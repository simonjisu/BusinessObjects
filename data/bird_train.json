{"sample_id": 0, "db_id": "movie_platform", "final": {"question": "Name movie titles released in year 1945. Sort the listing by the descending order of movie popularity.", "sql": "SELECT movie_title FROM movies WHERE movie_release_year = 1945 ORDER BY movie_popularity DESC LIMIT 1", "source_tables": ["movies"]}, "evidence": "released in the year 1945 refers to movie_release_year = 1945;"}
{"sample_id": 1, "db_id": "movie_platform", "final": {"question": "State the most popular movie? When was it released and who is the director for the movie?", "sql": "SELECT movie_title, movie_release_year, director_name FROM movies ORDER BY movie_popularity DESC LIMIT 1", "source_tables": ["movies"]}, "evidence": "most popular movie refers to MAX(movie_popularity); when it was released refers to movie_release_year; director for the movie refers to director_name;"}
{"sample_id": 2, "db_id": "movie_platform", "final": {"question": "What is the name of the longest movie title? When was it released?", "sql": "SELECT movie_title, movie_release_year FROM movies ORDER BY LENGTH(movie_popularity) DESC LIMIT 1", "source_tables": ["movies"]}, "evidence": "longest movie title refers to MAX(LENGTH(movie_title)); when it was released refers to movie_release_year;"}
{"sample_id": 3, "db_id": "movie_platform", "final": {"question": "Name the movie with the most ratings.", "sql": "SELECT movie_title FROM movies GROUP BY movie_title ORDER BY COUNT(movie_title) DESC LIMIT 1", "source_tables": ["movies"]}, "evidence": "movie with the most rating refers to MAX(SUM(rating_score));"}
{"sample_id": 4, "db_id": "movie_platform", "final": {"question": "What is the average number of Mubi users who love movies directed by Stanley Kubrick?", "sql": "SELECT AVG(movie_popularity) FROM movies WHERE director_name = 'Stanley Kubrick'", "source_tables": ["movies"]}, "evidence": "average = AVG(movie_popularity); number of Mubi users who loves the movie refers to movie_popularity;"}
{"sample_id": 5, "db_id": "movie_platform", "final": {"question": "What is the average rating for movie titled 'When Will I Be Loved'?", "sql": "SELECT AVG(T2.rating_score) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'When Will I Be Loved'", "source_tables": ["ratings", "movies"]}, "evidence": "average rating = DIVIDE((SUM(rating_score where movie_title = 'When Will I Be Loved')), COUNT(rating_score));"}
{"sample_id": 6, "db_id": "movie_platform", "final": {"question": "What is the user avatar url for user 41579158? What is the latest movie rated by him / her?", "sql": "SELECT T3.user_avatar_image_url, T3.rating_date_utc FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id INNER JOIN ratings_users AS T3 ON T3.user_id = T2.user_id WHERE T3.user_id = 41579158 ORDER BY T3.rating_date_utc DESC LIMIT 1", "source_tables": ["ratings", "movies", "ratings_users"]}, "evidence": "user avatar url refers to user_avatar_image_url; latest movie rated refers to latest rating_date;"}
{"sample_id": 7, "db_id": "movie_platform", "final": {"question": "What is the percentage of the ratings were rated by user who was a subcriber?", "sql": "SELECT CAST(SUM(CASE WHEN user_subscriber = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM ratings", "source_tables": ["ratings"]}, "evidence": "user is a subscriber refers to user_subscriber = 1; percentage of ratings = DIVIDE(SUM(user_subscriber = 1), SUM(rating_score)) as percent;"}
{"sample_id": 8, "db_id": "movie_platform", "final": {"question": "List all movie title rated in April 2020 from user who was a trialist.", "sql": "SELECT T1.movie_title FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_trialist = 1 AND T2.rating_timestamp_utc LIKE '2020-04%'", "source_tables": ["ratings", "movies"]}, "evidence": "movie title rated in April 2020 refers to rating_timestamp_utc LIKE '%2020-04-%'; user is a trial list refers to user_trialist = 1;"}
{"sample_id": 9, "db_id": "movie_platform", "final": {"question": "List ther users who gave the worst rating for movie 'Love Will Tear Us Apart'.", "sql": "SELECT T1.user_id FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Love Will Tear Us Apart' AND T1.rating_score = 1", "source_tables": ["ratings", "movies"]}, "evidence": "worst rating refers to rating_score = 1;"}
{"sample_id": 10, "db_id": "movie_platform", "final": {"question": "List all movies with the best rating score. State the movie title and number of Mubi user who loves the movie.", "sql": "SELECT DISTINCT T2.movie_title, T2.movie_popularity FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5", "source_tables": ["ratings", "movies"]}, "evidence": "best rating score refers to rating_score = 5; number of Mubi user who loves the movie refers to movie_popularity;"}
{"sample_id": 11, "db_id": "movie_platform", "final": {"question": "For all ratings which are rated in year 2020, name the movies which has the rating scored 4 and above.", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE CAST(SUBSTR(T1.rating_timestamp_utc, 1, 4) AS INTEGER) = 2020 AND CAST(SUBSTR(T1.rating_timestamp_utc, 6, 2) AS INTEGER) > 4", "source_tables": ["ratings", "movies"]}, "evidence": "ratings in year 2020 refers to rating_timestamp_utc like '%2020%'; rating_score > = 4;"}
{"sample_id": 12, "db_id": "movie_platform", "final": {"question": "For all movies where users left a critic, find the movie name, user, rating and critics comments from the user.", "sql": "SELECT T2.movie_title, T1.user_id, T1.rating_score, T1.critic FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.critic IS NOT NULL", "source_tables": ["ratings", "movies"]}, "evidence": "movies where users left a critic refers to critic IS NOT NULL; critic comments refers to critic;"}
{"sample_id": 13, "db_id": "movie_platform", "final": {"question": "For movie titled 'Welcome to the Dollhouse', how many percentage of the ratings were rated with highest score.", "sql": "SELECT CAST(SUM(CASE WHEN T2.rating_score = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'Welcome to the Dollhouse'", "source_tables": ["ratings", "movies"]}, "evidence": "rated with highest score refers to rating_score = 5; percentage = MULTIPLY(DIVIDE(SUM(rating_score = 5), COUNT(rating_score)), 100)"}
{"sample_id": 14, "db_id": "movie_platform", "final": {"question": "What is the percentage of rated movies were released in year 2021?", "sql": "SELECT CAST(SUM(CASE WHEN T1.movie_release_year = 2021 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id", "source_tables": ["ratings", "movies"]}, "evidence": "percentage = DIVIDE(SUM(movie_release_year = 2021), COUNT(rating_id)) as percent; movies released in year 2021 refers to movie_release_year = 2021;"}
{"sample_id": 15, "db_id": "movie_platform", "final": {"question": "Who is the director of the movie Sex, Drink and Bloodshed?", "sql": "SELECT director_name FROM movies WHERE movie_title = 'Sex, Drink and Bloodshed'", "source_tables": ["movies"]}, "evidence": "Sex, Drink and Bloodshed refers to movie title = 'Sex, Drink and Bloodshed';"}
{"sample_id": 16, "db_id": "movie_platform", "final": {"question": "What is the name of the most followed list?", "sql": "SELECT list_title FROM lists ORDER BY list_followers DESC LIMIT 1", "source_tables": ["lists"]}, "evidence": "most followed list refers to MAX(list_followers);"}
{"sample_id": 17, "db_id": "movie_platform", "final": {"question": "What are the URL to the list page on Mubi of the lists with followers between 1-2 and whose last update timestamp was on 2012?", "sql": "SELECT list_url FROM lists WHERE list_update_timestamp_utc LIKE '2012%' AND list_followers BETWEEN 1 AND 2 ORDER BY list_update_timestamp_utc DESC LIMIT 1", "source_tables": ["lists"]}, "evidence": "URL to the list page on Mubi refers to list_url; list_followers = 1 OR list_followers = 2; last update timestamp was on 2012 refers to list_update_timestamp_utc BETWEEN '2012-1-1' AND '2012-12-31';"}
{"sample_id": 18, "db_id": "movie_platform", "final": {"question": "What is the list ID that was first created by user 85981819?", "sql": "SELECT list_id FROM lists_users WHERE user_id = 85981819 ORDER BY list_creation_date_utc ASC LIMIT 1", "source_tables": ["lists_users"]}, "evidence": "first created list refers to oldest list_creation_date_utc;"}
{"sample_id": 19, "db_id": "movie_platform", "final": {"question": "For movie id 1269, how many users, who was a paying subscriber and was eligible for trial when he rated the movie, gave the movie a rating score of less than or equal to 2?", "sql": "SELECT COUNT(*) FROM ratings WHERE movie_id = 1269 AND rating_score <= 2 AND user_eligible_for_trial = 1 AND user_has_payment_method = 1", "source_tables": ["ratings"]}, "evidence": "paying subscriber refers to user_has_payment_method = 1; eligible for trial refers to user_eligible_for_trial = 1; rating_score< = 2;"}
{"sample_id": 20, "db_id": "movie_platform", "final": {"question": "What are the movie popularity of the movies released in 2021 that were directed by Steven Spielberg? List the names of the movies and their corresponding popularity.", "sql": "SELECT movie_title, movie_popularity FROM movies WHERE movie_release_year = 2021 AND director_name = 'Steven Spielberg'", "source_tables": ["movies"]}, "evidence": "movie released in 2021 refers to movie_release_year = 2021; popularity refers to movie_popularity;"}
{"sample_id": 21, "db_id": "movie_platform", "final": {"question": "When was the first movie released and who directed it?", "sql": "SELECT movie_release_year, director_name FROM movies WHERE movie_release_year IS NOT NULL ORDER BY movie_release_year ASC LIMIT 1", "source_tables": ["movies"]}, "evidence": "first movie refers to oldest movie_release_year;"}
{"sample_id": 22, "db_id": "movie_platform", "final": {"question": "What is the user ID of the user, who was a subscriber when he created the list, who created a list for 10 consecutive years? If there are multiple users, indicate each of their user IDs.", "sql": "SELECT user_id FROM lists_users WHERE user_subscriber = 1 GROUP BY user_id HAVING MAX(SUBSTR(list_creation_date_utc, 1, 4)) - MIN(SUBSTR(list_creation_date_utc, 1, 4)) >= 10", "source_tables": ["lists_users"]}, "evidence": "user was a subscriber when he created the list refers to user_subscriber = 1; user who created a list for 10 consecutive years refers to user_id with list_creation_date_utc for 10 succeeding years;"}
{"sample_id": 23, "db_id": "movie_platform", "final": {"question": "How many users gave \"Pavee Lackeen: The Traveller Girl\" movie a rating score of 4?", "sql": "SELECT COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'Pavee Lackeen: The Traveller Girl' AND T2.rating_score = 4", "source_tables": ["ratings", "movies"]}, "evidence": "FALSE;"}
{"sample_id": 24, "db_id": "movie_platform", "final": {"question": "Was the user who created the \"World War 2 and Kids\" list eligible for trial when he created the list? Indicate how many followers does the said list has.", "sql": "SELECT T2.user_eligible_for_trial, T1.list_followers FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T1.user_id AND T1.list_id = T2.list_id WHERE T1.list_title = 'World War 2 and Kids'", "source_tables": ["lists", "lists_users"]}, "evidence": "user was eligible for trial when he created the list refers to user_eligible_for_trial = 1; number of followers a list have refers to list_followers;"}
{"sample_id": 25, "db_id": "movie_platform", "final": {"question": "Which year was the third movie directed by Quentin Tarantino released? Indicate the user ids of the user who gave it a rating score of 4.", "sql": "SELECT T2.movie_release_year, T1.user_id FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_id = ( SELECT movie_id FROM movies WHERE director_name = 'Quentin Tarantino' ORDER BY movie_release_year ASC LIMIT 2, 1 ) AND T1.rating_score = 4", "source_tables": ["ratings", "movies"]}, "evidence": "third movie refers to third movie that has oldest movie_release_year;"}
{"sample_id": 26, "db_id": "movie_platform", "final": {"question": "What is the URL to the movie director page on Mubi of the director whose movie was critic by user 2452551 and was given 39 likes?", "sql": "SELECT T2.director_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 2452551 AND T1.critic_likes = 39", "source_tables": ["ratings", "movies"]}, "evidence": "URL to the movie director page on Mubi refers to director_url; likes refers to critic_likes; critic_likes = 39;"}
{"sample_id": 27, "db_id": "movie_platform", "final": {"question": "What is the average rating score of the movie \"When Will I Be Loved\" and who was its director?", "sql": "SELECT AVG(T1.rating_score), T2.director_name FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved'", "source_tables": ["ratings", "movies"]}, "evidence": "average rating score = AVG(rating_score);"}
{"sample_id": 28, "db_id": "movie_platform", "final": {"question": "How many movies were added to the list with the most number of movies? Indicate whether the user was a paying subscriber or not when he created the list.", "sql": "SELECT T1.list_movie_number, T2.user_has_payment_method FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id ORDER BY T1.list_movie_number DESC LIMIT 1", "source_tables": ["lists", "lists_users"]}, "evidence": "list with the most number of movies refers to MAX(list_movie_number); user_has_payment_method = 1 means the user was a paying subscriber when he created the list; user_has_payment_method = 0 means the user was not a paying subscriber when he created the list;"}
{"sample_id": 29, "db_id": "movie_platform", "final": {"question": "What is the name of the movie whose critic received the highest number of likes related to the critic made by the user rating the movie?", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.critic_likes DESC LIMIT 1", "source_tables": ["ratings", "movies"]}, "evidence": "number of likes received refers to critic likes; received the highest number of likes refers to MAX(critic_likes);"}
{"sample_id": 30, "db_id": "movie_platform", "final": {"question": "How much is the popularity of the movie that has the highest popularity between 1920 to 1929 and when did the movie received its first rating score of 1 from the users who were a paying subscriber when they rated the movie ?", "sql": "SELECT MAX(T2.movie_popularity), MIN(T1.rating_timestamp_utc) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year BETWEEN 1920 AND 1929 AND T1.rating_score = 1 AND T1.user_has_payment_method = 1", "source_tables": ["ratings", "movies"]}, "evidence": "movie with highest popularity refers to MAX(movie_popularity); movie_release_year BETWEEN 1920 AND 1929; when the movie received its first rating score of 1 refers to oldest date in rating_timestamp_utc where rating score = 1; user was a paying subscriber when they rated the movie refers to user_has_payment_method = 1;"}
{"sample_id": 31, "db_id": "movie_platform", "final": {"question": "How many movies directed by Francis Ford Coppola have a popularity of more than 1,000? Indicate what is the highest amount of likes that each critic per movie has received, if there's any.", "sql": "SELECT COUNT(T2.movie_title), T1.critic FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.director_name = 'Francis Ford Coppola' AND T2.movie_popularity > 1000", "source_tables": ["ratings", "movies"]}, "evidence": "Francis Ford Coppola refers to director_name; popularity of more than 1,000 refers to movie_popularity >1000;highest amount of likes that each critic per movie has received refers to MAX(critic_likes)"}
{"sample_id": 32, "db_id": "movie_platform", "final": {"question": "What is the URL to the user profile image on Mubi of the user who gave the movie id of 1103 a 5 ratinng score on 4/19/2020?", "sql": "SELECT T2.user_avatar_image_url FROM ratings AS T1 INNER JOIN ratings_users AS T2 ON T1.user_id = T2.user_id WHERE T2.user_id = 1103 AND rating_score = 5 AND T2.rating_date_utc = '2020-04-19'", "source_tables": ["ratings", "ratings_users"]}, "evidence": "URL to the user profile image on Mubi\u00a0 refers to user_avatar_image_url;\u00a0 4/19/2020 refers to rating_date_utc"}
{"sample_id": 33, "db_id": "movie_platform", "final": {"question": "Among the lists created by user 4208563, which one has the highest number of followers? Indicate how many followers it has and whether the user was a subscriber or not when he created the list.", "sql": "SELECT T1.list_followers, T2.user_subscriber = 1 FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id AND T2.list_id = T2.list_id WHERE T2.user_id = 4208563 ORDER BY T1.list_followers DESC LIMIT 1", "source_tables": ["lists", "lists_users"]}, "evidence": "User 4208563 refers to user_id;highest number of followers refers to MAX(list_followers); user_subscriber = 1 means that the user was a subscriber when he created the list; user_subscriber = 0 means the user was not a subscriber when he created the list (to replace)"}
{"sample_id": 34, "db_id": "movie_platform", "final": {"question": "Which year has the least number of movies that was released and what is the title of the movie in that year that has the highest number of rating score of 1?", "sql": "SELECT DISTINCT T1.movie_release_year, T1.movie_title FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_release_year = ( SELECT movie_release_year FROM movies GROUP BY movie_release_year ORDER BY COUNT(movie_id) DESC LIMIT 1 ) AND T2.rating_score = 1", "source_tables": ["ratings", "movies"]}, "evidence": "least number of movies refers to MIN(movie_release_year); highest rating score refers to MAX(SUM(movie_id) where rating_score = '1')\n\n"}
{"sample_id": 35, "db_id": "movie_platform", "final": {"question": "How many users, who were a paying subscriber when they rated the movie, gave the movie that was released in 1924 and directed by Erich von Stroheim a rating score of 5?", "sql": "SELECT COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_release_year = 1924 AND T1.director_name = 'Erich von Stroheim' AND T2.rating_score = 5 AND T2.user_has_payment_method = 1", "source_tables": ["ratings", "movies"]}, "evidence": "Directed by Buster Keaton refers to director_name; released in 1924 refers to movie_release_year = 1924; paying subscriber refers to user_has_payment_method = 1\n\n"}
{"sample_id": 36, "db_id": "movie_platform", "final": {"question": "What is the average number of movies added to the lists of user 8516503? Give the user profile image URL on Mubi.", "sql": "SELECT AVG(T1.list_movie_number), T2.user_avatar_image_url FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T2.user_id = 8516503", "source_tables": ["lists", "lists_users"]}, "evidence": "user profile image URL refers to user_avatar_image_url; user 8516503 refers to user_id; Average refers to AVG(list_movie_number where user_id = 8516503)\n\n"}
{"sample_id": 37, "db_id": "movie_platform", "final": {"question": "How many users rated the movie \"The Magnificent Ambersons\" gave a rating score of no more than 2? List all the URL to the rating on Mubi.", "sql": "SELECT COUNT(T2.user_id), T2.rating_url FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'The Magnificent Ambersons' AND T2.rating_score <= 2", "source_tables": ["ratings", "movies"]}, "evidence": "The Magnificent Ambersons refers to movie_title; rating score of no more than 2 refers to rating_score<2; URL to rating refers to rating_url"}
{"sample_id": 38, "db_id": "movie_platform", "final": {"question": "How many users who created a list in the February of 2016 were eligible for trial when they created the list? Indicate the user id of the user who has the most number of followers in his list in February of 2016.", "sql": "SELECT T1.list_followers FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id AND T1.list_id = T2.list_id WHERE T2.list_creation_date_utc BETWEEN '2016-02-01' AND '2016-02-29' AND T2.user_eligible_for_trial = 1", "source_tables": ["lists", "lists_users"]}, "evidence": "created a list in the February of 2016 refer to list_creation_date_utc BETWEEN 2/1/2016 and 2/29/2016; eligible for trial refers to user_eligible_for_trial = 1;\n"}
{"sample_id": 39, "db_id": "movie_platform", "final": {"question": "What is the URL to the rating on Mubi of the Riff-Raff movie that was given the highest rating score by user 22030372?", "sql": "SELECT T2.rating_url FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_id = 22030372 AND T2.rating_score = 5 AND T1.movie_title = 'Riff-Raff'", "source_tables": ["ratings", "movies"]}, "evidence": "URL refer to rating_url; user 22030372 refer to user_id"}
{"sample_id": 40, "db_id": "movie_platform", "final": {"question": "How many directors have directed atleast 10 movies between 1960 to 1985? Indicate the name of the movie in those years of each director that received the highest amount of 5 rating score.", "sql": "SELECT T2.director_name FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year BETWEEN 1960 AND 1985 GROUP BY T2.director_name HAVING COUNT(T2.movie_id) > 10", "source_tables": ["ratings", "movies"]}, "evidence": "directed at least 10 movies refers to count(direct_name)>10; 1960 to 1985 refer to movie_release_year\n"}
{"sample_id": 41, "db_id": "movie_platform", "final": {"question": "How many users, who were not a a trialist when they rated the movie, gave the movie \"The South\" a rating score of not more than 2?", "sql": "SELECT COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_trialist = 0 AND T2.rating_score <= 2 AND T1.movie_title = 'The South'", "source_tables": ["ratings", "movies"]}, "evidence": "not a trialist refer to user_trialist = 0; rating score of not more than 2 refer to rating_score <2; The South refers to movie_title\n"}
{"sample_id": 42, "db_id": "movie_platform", "final": {"question": "How many likes did the critic of the movie \"Apocalypse Now\" received after giving the movie a rating score of 5?", "sql": "SELECT T2.critic_likes FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_trialist = 0 AND T2.rating_score = 5 AND T1.movie_title = 'Apocalypse Now'", "source_tables": ["ratings", "movies"]}, "evidence": "Apocalypse Now refer to movie_title; rating score refer to rating_score = '5';likes received refers to critic_likes\n"}
{"sample_id": 43, "db_id": "movie_platform", "final": {"question": "What is the average rating score of the movie \"The Crowd\" and who was its director?", "sql": "SELECT AVG(T2.rating_score), T1.director_name FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'The Crowd'", "source_tables": ["ratings", "movies"]}, "evidence": "director refer to director_name; The Crowd refer to movie_title; Average refer to AVG(rating_score)"}
{"sample_id": 44, "db_id": "movie_platform", "final": {"question": "When was the first movie of the director who directed the highest number of movies released and what is the user id of the user who received the highest number of comments related to the critic made by the user rating the movie?", "sql": "SELECT MIN(movie_release_year) FROM movies WHERE director_name = ( SELECT T2.director_name FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year BETWEEN 1960 AND 1985 GROUP BY T2.director_name ORDER BY COUNT(T2.director_name) DESC LIMIT 1 )", "source_tables": ["ratings", "movies"]}, "evidence": "comments refer to critic_comments"}
{"sample_id": 45, "db_id": "movie_platform", "final": {"question": "How many movies have a popularity of more than 400 but less than 500? Indicate the name of the movies and the highest rating score each movie has received.", "sql": "SELECT T1.movie_title, MAX(T2.rating_score) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_popularity BETWEEN 400 AND 500 GROUP BY T1.movie_title", "source_tables": ["ratings", "movies"]}, "evidence": "popularity of more than 400 but less than 500 refers to movie_popularity BETWEEN 400 AND 500; highest rating score refer to MAX(rating_score)\n\n"}
{"sample_id": 46, "db_id": "movie_platform", "final": {"question": "What is the URL to the rating on Mubi made by user 45579900 for the movie \"The Vertical Ray of the Sun\" that received 20 likes?", "sql": "SELECT T2.rating_url FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_id = 45579900 AND T1.movie_title = 'The Vertical Ray of the Sun' AND T2.critic_likes = 20", "source_tables": ["ratings", "movies"]}, "evidence": "URL refer to rating_url; 20 likes refer to critic_likes = \u201920\u2019; user 45579900 refer to user_id"}
{"sample_id": 47, "db_id": "movie_platform", "final": {"question": "What is the average popularity of each movie that was directed by Christopher Nolan? Indicate which movie directed by him has received the highest number of 5 rating scores.", "sql": "SELECT AVG(T2.movie_popularity) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.director_name = 'Christopher Nolan'", "source_tables": ["ratings", "movies"]}, "evidence": "5 rating scores refer to rating_score; Christopher Nolan refer to director_name; average popularity of each movie refer to AVG(movie_popularity where director_name = 'Christopher Nolan')"}
{"sample_id": 48, "db_id": "movie_platform", "final": {"question": "What are the names of the movie that was rated by the user between 1/1/2013 to 12/31/2013 by the user who created the list \"100 Greatest Living American Filmmakers\"? Calculate for the average rating score of those movies in 2013.", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists AS T3 ON T3.user_id = T1.user_id WHERE T1.rating_timestamp_utc BETWEEN '2013-01-01' AND '2013-12-31' AND T3.list_title = '100 Greatest Living American Filmmakers'", "source_tables": ["lists", "ratings", "movies"]}, "evidence": "Between 1/1/2013 to 12/31/2013 refer to rating_timestamp_utc; 100 Greatest Living American Filmmakers refer to list_title; average rating score refer to DIVIDE( ADD(rating_score where rating_timestamp_utc = '1/1/2013-12/31/2013'), COUNT(rating_timestamp_utc = '1/1/2013-12/31/2013'))"}
{"sample_id": 49, "db_id": "movie_platform", "final": {"question": "What is the average rating score of the 'Pavee Lackeen: The Traveller Girl' movie and what year was it released?", "sql": "SELECT AVG(T1.rating_score), T2.movie_release_year FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Pavee Lackeen: The Traveller Girl'", "source_tables": ["ratings", "movies"]}, "evidence": "year it was released refers to movie_release_year; average rating score refers to AVG(rating_score where movie_title = 'Final Destination 6'); Final Destination 6 refers to movie_title"}
{"sample_id": 50, "db_id": "movie_platform", "final": {"question": "How many movie lists were still updated 10 years after it was created?", "sql": "SELECT COUNT(*) FROM lists WHERE SUBSTR(list_update_timestamp_utc, 1, 4) - SUBSTR(list_creation_timestamp_utc, 1, 4) > 10", "source_tables": ["lists"]}, "evidence": "updated 10 years after it was created refers to list_update_timestamp_utc > (list_creation_timestamp_utc+10);"}
{"sample_id": 51, "db_id": "movie_platform", "final": {"question": "What's the description for the movie list \"Short and pretty damn sweet\"?", "sql": "SELECT list_description FROM lists WHERE list_title = 'Short and pretty damn sweet'", "source_tables": ["lists"]}, "evidence": "Short and pretty damn sweet is list_title; description refers to list_description;"}
{"sample_id": 52, "db_id": "movie_platform", "final": {"question": "Where can I find the movie list \"Short and pretty damn sweet\"?", "sql": "SELECT list_url FROM lists WHERE list_title = 'Short and pretty damn sweet'", "source_tables": ["lists"]}, "evidence": "Short and pretty damn sweet is list_title; location of the movie refers to list_url;"}
{"sample_id": 53, "db_id": "movie_platform", "final": {"question": "Among the movie lists created after 2010/1/1, how many of them have over 200 followers?", "sql": "SELECT COUNT(*) FROM lists WHERE list_followers > 200 AND list_update_timestamp_utc > '2010-01-01'", "source_tables": ["lists"]}, "evidence": "created after 2010/1/1 refers to list_update_timestamp_utc>'2010/1/1'; over 200 followers refers to list_followers>200;"}
{"sample_id": 54, "db_id": "movie_platform", "final": {"question": "How many movie lists were created by user 83373278 when he or she was a subscriber?", "sql": "SELECT COUNT(*) FROM lists_users WHERE user_id = 83373278 AND user_subscriber = 1", "source_tables": ["lists_users"]}, "evidence": "the user was a subscriber when he created the list refers to user_subscriber = 1; user 83373278 refers to user_id = 83373278;"}
{"sample_id": 55, "db_id": "movie_platform", "final": {"question": "In which year was the movie \"La Antena\" released?", "sql": "SELECT movie_release_year FROM movies WHERE movie_title = 'La Antena'", "source_tables": ["movies"]}, "evidence": "movie La Antena refers to movie_title = 'La Antena'; which year refers to movie_release_year;"}
{"sample_id": 56, "db_id": "movie_platform", "final": {"question": "Please give me the url of the movie \"La Antena\".", "sql": "SELECT movie_url FROM movies WHERE movie_title = 'La Antena'", "source_tables": ["movies"]}, "evidence": "movie La Antena refers to movie_title = 'La Antena'; url refers to movie_url;"}
{"sample_id": 57, "db_id": "movie_platform", "final": {"question": "Which movie is more popular, \"The General\" or \"Il grido\"?", "sql": "SELECT movie_title FROM movies WHERE movie_title = 'The General' OR movie_title = 'Il grido' ORDER BY movie_popularity DESC LIMIT 1", "source_tables": ["movies"]}, "evidence": "The General and Il grido are movie_title; more popular movie refers to higher (movie_popularity);"}
{"sample_id": 58, "db_id": "movie_platform", "final": {"question": "How many movies registered on Mubi are directed by Hong Sang-soo?", "sql": "SELECT COUNT(movie_id) FROM movies WHERE director_name = 'Hong Sang-soo'", "source_tables": ["movies"]}, "evidence": "Hong Sang-soo is the name of director;"}
{"sample_id": 59, "db_id": "movie_platform", "final": {"question": "Was the user who created the list \"250 Favourite Films\" a trialist when he or she created the list?", "sql": "SELECT T2.user_trialist FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.list_title = '250 Favourite Films'", "source_tables": ["lists", "lists_users"]}, "evidence": "the user was a trialist when he created the list refers to user_trailist = 1; 250 Favourite Films is list_title;"}
{"sample_id": 60, "db_id": "movie_platform", "final": {"question": "Please list the titles of the movie lists user 32172230 created when he or she was eligible for trial.", "sql": "SELECT T1.list_title FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.user_id = 32172230 AND T2.user_eligible_for_trial = 1", "source_tables": ["lists", "lists_users"]}, "evidence": "the user was eligible for trail when he created the list refers to user_eligile_for_trail = 1; user 32172230 refers to user_id = 32172230;"}
{"sample_id": 61, "db_id": "movie_platform", "final": {"question": "How many movie lists with over 100 movies had user 85981819 created when he or she was a paying subscriber?", "sql": "SELECT COUNT(*) FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.user_id = 85981819 AND T1.list_movie_number > 100 AND T2.user_has_payment_method = 1", "source_tables": ["lists", "lists_users"]}, "evidence": "the user was a paying subscriber when he created the list refers to user_has_payment_method = 1;\u00a0 movie lists with over 100 refers to list_movie_number >100;\u00a0 user 85981819 refers to user_id = 85981819;"}
{"sample_id": 62, "db_id": "movie_platform", "final": {"question": "What's the description of user 85981819's movie list with the most followers?", "sql": "SELECT T1.list_description FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.user_id = 85981819 ORDER BY T1.list_followers DESC LIMIT 1", "source_tables": ["lists", "lists_users"]}, "evidence": "user 85981819 refers to user_id = 85981819; most followers refers to Max(list_followers); description refers to list_descriptions;"}
{"sample_id": 63, "db_id": "movie_platform", "final": {"question": "When did the creator of the list \"250 Favourite Films\" last updated a movie list?", "sql": "SELECT T2.list_update_date_utc FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.list_title = '250 Favourite Films' ORDER BY T2.list_update_date_utc DESC LIMIT 1", "source_tables": ["lists", "lists_users"]}, "evidence": "250 Favourite Films refers to list_title; last update refers to list_update_date_utc;"}
{"sample_id": 64, "db_id": "movie_platform", "final": {"question": "What's the avatar image of the user who created the movie list \"250 Favourite Films\"?", "sql": "SELECT T2.user_avatar_image_url FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.list_title = '250 Favourite Films'", "source_tables": ["lists", "lists_users"]}, "evidence": "250 Favourite Films refers to list_title; avatar image refers to user_avatar_image_url;"}
{"sample_id": 65, "db_id": "movie_platform", "final": {"question": "How many more movie lists were created by the user who created the movie list \"250 Favourite Films\"?", "sql": "SELECT COUNT(list_id) FROM lists_users WHERE user_id = ( SELECT user_id FROM lists WHERE list_title = '250 Favourite Films' )", "source_tables": ["lists", "lists_users"]}, "evidence": "250 Favourite Films refers to list_title;"}
{"sample_id": 66, "db_id": "movie_platform", "final": {"question": "How many users liked the movie \"A Way of Life\" to the highest extent?", "sql": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.rating_score = 5", "source_tables": ["ratings", "movies"]}, "evidence": "like the movie highest to the extent refers to rating_score = 5; A Way of Life refers to movie_title;"}
{"sample_id": 67, "db_id": "movie_platform", "final": {"question": "Please list all the critics made by the user rating the movie \"A Way of Life\".", "sql": "SELECT T1.critic FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life'", "source_tables": ["ratings", "movies"]}, "evidence": "A Way of Life refers to movie_title;"}
{"sample_id": 68, "db_id": "movie_platform", "final": {"question": "How many critics of the movie \"Imitation of Life\" got more than 1 like?", "sql": "SELECT COUNT(*) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Imitation of Life' AND T1.critic_likes > 1", "source_tables": ["ratings", "movies"]}, "evidence": "Imitation of Life refers to movie_title; critics got more than 1 like refers to critic_likes >1;"}
{"sample_id": 69, "db_id": "movie_platform", "final": {"question": "Which user made a critic for the film \"When Will I Be Loved\" and got 2 comments for the critic?", "sql": "SELECT T1.user_id FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved' AND T1.critic_comments = 2", "source_tables": ["ratings", "movies"]}, "evidence": "When Will I Be Loved refers to movie_title;\u00a0 2 comments for the critic refers to critic_comments = 2;"}
{"sample_id": 70, "db_id": "movie_platform", "final": {"question": "When did user 39115684 rate the movie \"A Way of Life\"?", "sql": "SELECT T1.rating_score FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.user_id = 39115684", "source_tables": ["ratings", "movies"]}, "evidence": "A Way of Life' refers to movie_title; user 39115684 refers to userid = 39115684;\u00a0 when the user rate refers to rating_timestamp_utc;"}
{"sample_id": 71, "db_id": "movie_platform", "final": {"question": "What's the url of user 39115684's rating on the movie 'When Will I Be Loved'?", "sql": "SELECT T1.rating_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.user_id = 39115684", "source_tables": ["ratings", "movies"]}, "evidence": "A Way of Life refers to movie_title; user 39115684 refers to userid = 39115684;\u00a0 url refers to rating_url;"}
{"sample_id": 72, "db_id": "movie_platform", "final": {"question": "Was user 39115684 a trialist when he or she rated the movie \"A Way of Life\"?", "sql": "SELECT T1.user_trialist FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.user_id = 39115684", "source_tables": ["ratings", "movies"]}, "evidence": "A Way of Life' refers to movie_title; user 39115684 refers to userid = 39115684;\u00a0 the user was a trialist when he rated the movie refers to user_trialist = 1;"}
{"sample_id": 73, "db_id": "movie_platform", "final": {"question": "How many users were trialists when they rated the movie \"A Way of Life\"?", "sql": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved' AND T1.user_trialist = 1", "source_tables": ["ratings", "movies"]}, "evidence": "A Way of Life' refers to movie_title; the user was a trialist when he rated the movie refers to user_trialist = 1;"}
{"sample_id": 74, "db_id": "movie_platform", "final": {"question": "Please list all the links to the ratings on the movie \"A Way of Life\" with a critic.", "sql": "SELECT T1.rating_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.critic IS NOT NULL", "source_tables": ["ratings", "movies"]}, "evidence": "A Way of Life' refers to movie_title; with a critic refers to critic is not null, links to the ratings refers to rating_url;"}
{"sample_id": 75, "db_id": "movie_platform", "final": {"question": "How many users have rated the most popular movie?", "sql": "SELECT COUNT(rating_id) FROM ratings WHERE movie_id = ( SELECT movie_id FROM movies ORDER BY movie_popularity DESC LIMIT 1 )", "source_tables": ["ratings", "movies"]}, "evidence": "most popular refers to Max(movie_popularity);"}
{"sample_id": 76, "db_id": "movie_platform", "final": {"question": "User 58149469's critic on which film got 1 like and 2 comments?", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 58149469 AND T1.critic_likes = 1 AND T1.critic_comments = 2", "source_tables": ["ratings", "movies"]}, "evidence": "user 58149469 refers to user_id = 58149469; critic with 1 like refers to critic_likes = 1; critic with 2 comments refers to critic_comments = 2;"}
{"sample_id": 77, "db_id": "movie_platform", "final": {"question": "Among the users who are trailists when rating the movie \"When Will I Be Loved\", how many of them have rated \"1\" on the movie?", "sql": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved' AND T1.rating_score = 1 AND T1.user_trialist = 1", "source_tables": ["ratings", "movies"]}, "evidence": "When Will I Be Loved refers to movie_title; the user was a trialist when he rated the movie refers to user_trialist = 1;rated 1 on the movie refers to rating_score = 1;"}
{"sample_id": 78, "db_id": "movie_platform", "final": {"question": "How many ratings on the movie \"A Way of Life\" are made after the year 2011?", "sql": "SELECT COUNT(T1.rating_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.rating_timestamp_utc >= '2012-01-01'", "source_tables": ["ratings", "movies"]}, "evidence": "A Way of Life' is movie_title; rating after the year 2011 refers to rating_timestamp_utc > '2011';"}
{"sample_id": 79, "db_id": "movie_platform", "final": {"question": "What's of rating on the movie \"Innocence Unprotected\" by the user who created the movie list \"250 Favourite Films\"?", "sql": "SELECT T1.rating_score FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists AS T3 ON T3.user_id = T1.user_id WHERE T2.movie_title = 'Innocence Unprotected' AND T3.list_title = '250 Favourite Films'", "source_tables": ["lists", "ratings", "movies"]}, "evidence": "Innocence Unprotected' is movie_title; '250 Favourite Films' is list_title; rating refers to rating_score;"}
{"sample_id": 80, "db_id": "movie_platform", "final": {"question": "Please list the movies rated by the user who created the movie list \"250 Favourite Films\".", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists AS T3 ON T3.user_id = T1.user_id WHERE T3.list_title = '250 Favourite Films'", "source_tables": ["lists", "ratings", "movies"]}, "evidence": "250 Favourite Films' is list_title; movies refers to movie_title;"}
{"sample_id": 81, "db_id": "movie_platform", "final": {"question": "What's the average rating score of the movie \"A Way of Life\"?", "sql": "SELECT AVG(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life'", "source_tables": ["ratings", "movies"]}, "evidence": "A Way of Life' is movie_title; average rating score = Divide (Sum(rating_score), Count(rating_id));"}
{"sample_id": 82, "db_id": "movie_platform", "final": {"question": "What's the percentage of the users who have rated \"1\" on the movie \"When Will I Be Loved\"?", "sql": "SELECT CAST(SUM(CASE WHEN T1.rating_score = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved'", "source_tables": ["ratings", "movies"]}, "evidence": "When Will I Be Loved' is movie_title; rated 1 refers to rating_score = 1; percentage = Divide(Count(rating_id where rating_score = 1),Count(rating_id)) *100;"}
{"sample_id": 83, "db_id": "movie_platform", "final": {"question": "How much higher is the average rating score of the movie \"Innocence Unprotected\" than the movie \"When Will I Be Loved\"?", "sql": "SELECT SUM(CASE WHEN T2.movie_title = 'Innocence Unprotected' THEN T1.rating_score ELSE 0 END) / SUM(CASE WHEN T2.movie_title = 'Innocence Unprotected' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.movie_title = 'When Will I Be Loved' THEN T1.rating_score ELSE 0 END) / SUM(CASE WHEN T2.movie_title = 'When Will I Be Loved' THEN 1 ELSE 0 END) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id", "source_tables": ["ratings", "movies"]}, "evidence": "Innocence Unprotected' and 'When Will I Be Loved' are movie_title; Average rating score = Divide(Sum(rating_score), Count(rating_id));"}
{"sample_id": 84, "db_id": "movie_platform", "final": {"question": "Who was the director of the movie \"Tokyo Eyes\"\uff1f", "sql": "SELECT director_name FROM movies WHERE movie_title = 'Tokyo Eyes'", "source_tables": ["movies"]}, "evidence": "Tokyo Eyes' is movie_title, director refers to director_name;"}
{"sample_id": 85, "db_id": "movie_platform", "final": {"question": "How many films were released in 2007?", "sql": "SELECT COUNT(*) FROM movies WHERE movie_release_year = 2007", "source_tables": ["movies"]}, "evidence": "film released in 2007 refers to movie_release_year = 2007; film refers to movie"}
{"sample_id": 86, "db_id": "movie_platform", "final": {"question": "Which of the films released in 2006 was the most popular among Mubi users?", "sql": "SELECT movie_title FROM movies WHERE movie_release_year = 2006 ORDER BY movie_popularity DESC LIMIT 1", "source_tables": ["movies"]}, "evidence": "released in 2006 refers to movie_release_year = 2006; most popular refers to Max(movie_popularity); film refers to movie;"}
{"sample_id": 87, "db_id": "movie_platform", "final": {"question": "How many films did \u00c5ke Sandgren direct?", "sql": "SELECT COUNT(movie_title) FROM movies WHERE director_name = '\u00c5ke Sandgren'", "source_tables": ["movies"]}, "evidence": "Ake Sandgren is the director name;\u00a0 film refers to movie"}
{"sample_id": 88, "db_id": "movie_platform", "final": {"question": "Which of the films directed by \u00c1lex de la Iclesia is the most popular among Mubi users?", "sql": "SELECT movie_title FROM movies WHERE director_name = '\u00c5ke Sandgren' ORDER BY movie_popularity DESC LIMIT 1", "source_tables": ["movies"]}, "evidence": "Alex de la Iclesia is the director name; the most popular refers to Max(movie_popularity); films refers to movies;"}
{"sample_id": 89, "db_id": "movie_platform", "final": {"question": "When was the movie Cops released?", "sql": "SELECT movie_release_year FROM movies WHERE movie_title = 'Cops'", "source_tables": ["movies"]}, "evidence": "Cops' is movie_title; released refers to movie_release_year;"}
{"sample_id": 90, "db_id": "movie_platform", "final": {"question": "Please list the id of the director of the movie \"It's Winter\".", "sql": "SELECT director_id FROM movies WHERE movie_title = 'It''s Winter'", "source_tables": ["movies"]}, "evidence": "It's Winter' is movie_title;"}
{"sample_id": 91, "db_id": "movie_platform", "final": {"question": "Please provide the ID of the user with the most followers on the list.", "sql": "SELECT user_id FROM lists ORDER BY list_followers DESC LIMIT 1", "source_tables": ["lists"]}, "evidence": "most followers refers to Max(list_followers);"}
{"sample_id": 92, "db_id": "movie_platform", "final": {"question": "Please provide the title of the list with the most comments on the list.", "sql": "SELECT list_title FROM lists GROUP BY list_title ORDER BY COUNT(list_comments) DESC LIMIT 1", "source_tables": ["lists"]}, "evidence": "the most comments refers to Max(list_comments);"}
{"sample_id": 93, "db_id": "movie_platform", "final": {"question": "Which of the film released in 2008 scored the highest?", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year = 2008 ORDER BY T1.rating_score DESC LIMIT 1", "source_tables": ["ratings", "movies"]}, "evidence": "film released in 2008 refers to movie_release_year = 2008; scored the highest refers to Max(rating_score); film refers to movie;"}
{"sample_id": 94, "db_id": "movie_platform", "final": {"question": "Please list the names of the top three movies in the number of likes related to the critic made by the user rating the movie.", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.critic_likes DESC LIMIT 3", "source_tables": ["ratings", "movies"]}, "evidence": "likes related to the critic made by the user rating the movie refers to critic_likes; top refers to Max(critic_likes);"}
{"sample_id": 95, "db_id": "movie_platform", "final": {"question": "How many users have more than 100 followers in the list created by users in 2009?", "sql": "SELECT COUNT(T1.user_id) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_followers > 100 AND T1.list_creation_date_utc LIKE '2009%'", "source_tables": ["lists", "lists_users"]}, "evidence": "more than 100 followers refers to list_followers >100;\u00a0 list created by the user in 2009 refers to list_creation_date_utc = '2009';"}
{"sample_id": 96, "db_id": "movie_platform", "final": {"question": "How many users in Mubi give the movie \"White Night Wedding for 5\"?", "sql": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5 AND T2.movie_title = 'White Night Wedding'", "source_tables": ["ratings", "movies"]}, "evidence": "White Night Wedding' is movie_title; for 5 refers to rating_score = 5;"}
{"sample_id": 97, "db_id": "movie_platform", "final": {"question": "What's the cover image of the user who created the movie list 'Georgia related films'?", "sql": "SELECT T1.user_cover_image_url FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_title LIKE 'Georgia related films'", "source_tables": ["lists", "lists_users"]}, "evidence": "Play it cool' is list_title; cover image of user refers to user_cover_image_url;"}
{"sample_id": 98, "db_id": "movie_platform", "final": {"question": "How many followers does the list created by the user whose user_avatar_image_url is https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214 have?", "sql": "SELECT SUM(T2.list_followers) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T1.user_avatar_image_url = 'https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214'", "source_tables": ["lists", "lists_users"]}, "evidence": "followers refers to list_followers;"}
{"sample_id": 99, "db_id": "movie_platform", "final": {"question": "Please list the names of the movies that user 94978 scored as 5.", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5 AND T1.user_id = 94978", "source_tables": ["ratings", "movies"]}, "evidence": "user 94978 refers to user_id = 94978; scored as 5 refers to rating_score = 5;"}
{"sample_id": 167, "db_id": "book_publishing_company", "final": {"question": "Which date has the most ordered quantity? What is the total order quantity on that day?", "sql": "SELECT ord_date, SUM(qty) FROM sales GROUP BY ord_date ORDER BY SUM(qty) DESC LIMIT 1", "source_tables": ["sales"]}, "evidence": "total quantity refers to qty; most ordered quantity refers to order with the highest quantity where MAX(sum(qty))"}
{"sample_id": 168, "db_id": "book_publishing_company", "final": {"question": "What is the title with the most ordered quantity in year 1992?", "sql": "SELECT T2.title FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id WHERE STRFTIME('%Y', T1.ord_date) = '1992' ORDER BY T1.qty DESC LIMIT 1", "source_tables": ["sales", "titles"]}, "evidence": "total quantity refers to qty; most ordered quantity refers to order with the highest quantity where MAX(count(qty)); date refers to ord_date; year 1992 refers to YEAR(ord_date) = 1992"}
{"sample_id": 169, "db_id": "book_publishing_company", "final": {"question": "List the title, price and publication date for all sales with 'ON invoice' payment terms.", "sql": "SELECT T2.title, T2.price, T2.pubdate FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id WHERE T1.payterms = 'ON invoice'", "source_tables": ["sales", "titles"]}, "evidence": "publication date refers to pubdate; payment terms refers to payterms; payterms = 'ON invoice'"}
{"sample_id": 170, "db_id": "book_publishing_company", "final": {"question": "What is the title that have at least 10% royalty without minimum range amount.", "sql": "SELECT T1.title FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.lorange = 0 AND T2.royalty >= 10", "source_tables": ["roysched", "titles"]}, "evidence": "at least 10% royalty refers to royalty > = 10; minimum range is synonym for low range which refers to lorange; without minimum range amount refers to lorange <> 0"}
{"sample_id": 171, "db_id": "book_publishing_company", "final": {"question": "State the title and royalty percentage for title ID BU2075 between 10000 to 50000 range.", "sql": "SELECT T1.title, T2.royalty FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.lorange > 10000 AND T2.hirange < 50000 AND T1.title_ID = 'BU2075'", "source_tables": ["roysched", "titles"]}, "evidence": "lorange mean low range; hirange mean high range; range refers to between the low and high range; lorange>10000; hirange<12000"}
{"sample_id": 172, "db_id": "book_publishing_company", "final": {"question": "Among the titles with royalty percentage, which title has the greatest royalty percentage. State it's minimum range to enjoy this royalty percentage.", "sql": "SELECT T1.title, T2.lorange FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id ORDER BY T2.royalty DESC LIMIT 1", "source_tables": ["roysched", "titles"]}, "evidence": "minimum range is synonym for low range which refers to lorange"}
{"sample_id": 173, "db_id": "book_publishing_company", "final": {"question": "Provide a list of titles together with its publisher name for all publishers located in the USA.", "sql": "SELECT T1.title, T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.country = 'USA'", "source_tables": ["titles", "publishers"]}, "evidence": "publisher name refers to pub_name;"}
{"sample_id": 174, "db_id": "book_publishing_company", "final": {"question": "State the royalty percentage for the most year to date sale title within the 20000 range.", "sql": "SELECT MAX(T1.ytd_sales) FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.lorange > 20000 AND T2.hirange < 20000", "source_tables": ["roysched", "titles"]}, "evidence": "most year to date sales refers to MAX(ytd_sales); range limit means high range which refers to hirange; the 20000 range refers to hirange<20000"}
{"sample_id": 175, "db_id": "book_publishing_company", "final": {"question": "List all titles published in year 1991. Also provide notes details of the title and the publisher's name.", "sql": "SELECT T1.title, T1.notes, T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE STRFTIME('%Y', T1.pubdate) = '1991'", "source_tables": ["titles", "publishers"]}, "evidence": "publisher name refers to pub_name; publication date refers to pubdate; published in year 1991 refers to YEAR(pubdate) = 1991"}
{"sample_id": 176, "db_id": "book_publishing_company", "final": {"question": "List all titles with sales of quantity more than 20 and store located in the CA state.", "sql": "SELECT T1.title, T2.qty FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id INNER JOIN stores AS T3 ON T2.stor_id = T3.stor_id WHERE T2.qty > 20 AND T3.state = 'CA'", "source_tables": ["sales", "titles", "stores"]}, "evidence": "qty is abbreviation for quantity; sales of quantity more than 20 refers to qty>20; store refers to stor_name"}
{"sample_id": 177, "db_id": "book_publishing_company", "final": {"question": "Name the store with the highest quantity in sales? What is the least quantity title from the store's sale?", "sql": "SELECT T3.stor_id, T2.title FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id INNER JOIN stores AS T3 ON T3.stor_id = T1.stor_id WHERE T3.stor_id = ( SELECT stor_id FROM sales GROUP BY stor_id ORDER BY SUM(qty) DESC LIMIT 1 ) GROUP BY T3.stor_id, T2.title ORDER BY SUM(T1.qty) ASC LIMIT 1", "source_tables": ["sales", "titles", "stores"]}, "evidence": "qty is abbreviation for quantity; highest quantity refers to MAX(qty); least quantity refers to MIN(qty)"}
{"sample_id": 178, "db_id": "book_publishing_company", "final": {"question": "Name the title and publisher for title ID BU 2075. Provide all the royalty percentage for all ranges.", "sql": "SELECT T1.title, T3.pub_name, T2.lorange, T2.hirange, T2.royalty FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id INNER JOIN publishers AS T3 ON T1.pub_id = T3.pub_id WHERE T1.title_id = 'BU2075'", "source_tables": ["roysched", "titles", "publishers"]}, "evidence": "name the publisher refers to pub_name"}
{"sample_id": 179, "db_id": "book_publishing_company", "final": {"question": "Name the store with ID 7066 and calculate the percentage of the the quantity ordered that were on 'Net 30' payment terms.", "sql": "SELECT T2.stor_name , CAST(SUM(CASE WHEN payterms = 'Net 30' THEN qty ELSE 0 END) AS REAL) * 100 / SUM(qty) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id WHERE T1.stor_id = '7066' GROUP BY T2.stor_name", "source_tables": ["sales", "stores"]}, "evidence": "store with ID 7066 refers to stor_ID = '7066'; 'Net 60' payment terms refers to payterm = 'Net 60'; qty is abbreviation for quantity; percentage = DIVIDE(payterms = 'Net 60', sum(qty))*100"}
{"sample_id": 180, "db_id": "book_publishing_company", "final": {"question": "State the publisher name for publisher ID 877? Calculate its average year to date sales.", "sql": "SELECT T2.pub_name, AVG(T1.ytd_sales) FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.pub_id = '0877' GROUP BY T2.pub_name", "source_tables": ["titles", "publishers"]}, "evidence": "publisher id refers to pub_id; publisher name refers to pub_name; average year to date sales = AVG(ytd_sales)"}
{"sample_id": 181, "db_id": "book_publishing_company", "final": {"question": "Name all employees who were hired before year 1990.", "sql": "SELECT fname, lname FROM employee WHERE STRFTIME('%Y', hire_date) < '1990'", "source_tables": ["employee"]}, "evidence": "hired before year 1990 refers to YEAR(hire_date)<1990"}
{"sample_id": 182, "db_id": "book_publishing_company", "final": {"question": "Which employee has the lowest job level. State the first name, last name and when he /she was hired.", "sql": "SELECT fname, lname, hire_date FROM employee ORDER BY job_lvl LIMIT 1", "source_tables": ["employee"]}, "evidence": "lowest job level refers to MIN(job_lvl)"}
{"sample_id": 183, "db_id": "book_publishing_company", "final": {"question": "In which year has the most hired employees?", "sql": "SELECT STRFTIME('%Y', hire_date) FROM employee GROUP BY STRFTIME('%Y', hire_date) ORDER BY COUNT(emp_id) DESC LIMIT 1", "source_tables": ["employee"]}, "evidence": "most hired employees refers to MAX(count(emp_id))"}
{"sample_id": 184, "db_id": "book_publishing_company", "final": {"question": "List all employees who are at the maximum level in their job designation.", "sql": "SELECT T1.fname, T1.lname FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.job_lvl = T2.max_lvl", "source_tables": ["employee", "jobs"]}, "evidence": "maximum level in their job designation refers to job_lvl = MAX(max_lvl)"}
{"sample_id": 185, "db_id": "book_publishing_company", "final": {"question": "Name the Chief Executive Officer and when he/she was hired.", "sql": "SELECT T1.fname, T1.lname, T1.hire_date FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T2.job_desc = 'Chief Financial Officier'", "source_tables": ["employee", "jobs"]}, "evidence": "Chief Financial Offer is a job description which refers to job_desc"}
{"sample_id": 186, "db_id": "book_publishing_company", "final": {"question": "Who are the employees working for publisher not located in USA? State the employee's name and publisher name.", "sql": "SELECT T1.fname, T1.lname, T2.pub_name FROM employee AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.country != 'USA'", "source_tables": ["employee", "publishers"]}, "evidence": "not located at USA refers to country! = 'USA'"}
{"sample_id": 187, "db_id": "book_publishing_company", "final": {"question": "List all employees working for publisher 'GGG&G'. State their name and job description.", "sql": "SELECT T1.fname, T1.lname, T3.job_desc FROM employee AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id INNER JOIN jobs AS T3 ON T1.job_id = T3.job_id WHERE T2.pub_name = 'GGG&G'", "source_tables": ["employee", "jobs", "publishers"]}, "evidence": "name = fname, lname; job description refers to job_desc; publisher refers pub_name"}
{"sample_id": 188, "db_id": "book_publishing_company", "final": {"question": "For each publisher, state the type of titles they published order by the publisher name.", "sql": "SELECT DISTINCT T2.pub_name, T1.type FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id ORDER BY T2.pub_name", "source_tables": ["titles", "publishers"]}, "evidence": "publisher name refers to pub_name"}
{"sample_id": 189, "db_id": "book_publishing_company", "final": {"question": "Name the publisher which has the most titles published in 1991.", "sql": "SELECT T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE STRFTIME('%Y', T1.pubdate) = '1991' GROUP BY T1.pub_id, T2.pub_name ORDER BY COUNT(T1.title_id) DESC LIMIT 1", "source_tables": ["titles", "publishers"]}, "evidence": "most title published refers to MAX(count(title_id); published in 1991 refers to YEAR(pubdate) = 1991"}
{"sample_id": 190, "db_id": "book_publishing_company", "final": {"question": "Name the title with the highest price published by 'Binnet & Hardley'.", "sql": "SELECT T1.title FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.pub_name = 'Binnet & Hardley' ORDER BY T1.price DESC LIMIT 1", "source_tables": ["titles", "publishers"]}, "evidence": "published by refers to pub_name"}
{"sample_id": 191, "db_id": "book_publishing_company", "final": {"question": "Among all employees, who have job level greater than 200. State the employee name and job description.", "sql": "SELECT T1.fname, T1.lname, T2.job_desc FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.job_lvl > 200", "source_tables": ["employee", "jobs"]}, "evidence": "job level greater than 200 refers to job_lvl>200; job description refers to job_desc"}
{"sample_id": 192, "db_id": "book_publishing_company", "final": {"question": "Name all the authors for all business titles.", "sql": "SELECT T3.au_fname, T3.au_lname FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T1.type = 'business'", "source_tables": ["titleauthor", "titles", "authors"]}, "evidence": "business title refers to title under business where type = 'business'"}
{"sample_id": 193, "db_id": "book_publishing_company", "final": {"question": "List all the titles and year to date sales by author who are not on contract.", "sql": "SELECT T1.title_id, T1.ytd_sales FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T3.contract = 0", "source_tables": ["titleauthor", "titles", "authors"]}, "evidence": "year to date sales refers to ytd_sales; not on contract refers to contract = 0"}
{"sample_id": 194, "db_id": "book_publishing_company", "final": {"question": "For all authors from CA who are not on contract, which title of his/hers has the most year to date sales.", "sql": "SELECT T1.title FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T3.contract = 0 AND T3.state = 'CA' ORDER BY T1.ytd_sales DESC LIMIT 1", "source_tables": ["titleauthor", "titles", "authors"]}, "evidence": "year to date sales refers to ytd_sales; on contract refers to contract = 1"}
{"sample_id": 195, "db_id": "book_publishing_company", "final": {"question": "Name all the authors for 'Sushi, Anyone?'.", "sql": "SELECT T3.au_fname, T3.au_lname FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T1.title = 'Sushi, Anyone?'", "source_tables": ["titleauthor", "titles", "authors"]}, "evidence": "most year to date sales refers to MAX(ytd_sales); on contract refers to contract = 1; name of author = au_fname, au_lname"}
{"sample_id": 196, "db_id": "book_publishing_company", "final": {"question": "Calculate the percentage of the employees who are Editor or Designer?", "sql": "SELECT CAST(SUM(CASE WHEN T2.job_desc IN ('Editor', 'Designer') THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.job_id) FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id", "source_tables": ["employee", "jobs"]}, "evidence": "Editor or Auditor are job description which refers to job_desc; percentage = DIVIDE(count(job_desc = 'Editor' or job_desc = 'Auditor'), count(emp_id))*100"}
{"sample_id": 197, "db_id": "book_publishing_company", "final": {"question": "List all titles which have year to date sales higher than the average order by pubisher name.", "sql": "SELECT T1.title FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.ytd_sales > ( SELECT AVG(ytd_sales) FROM titles )", "source_tables": ["titles", "publishers"]}, "evidence": "year to date sales refers to ytd_sales; average order = AVG(ytd_sales)"}
{"sample_id": 198, "db_id": "book_publishing_company", "final": {"question": "How many publishers are in the USA?", "sql": "SELECT COUNT(pub_id) FROM publishers WHERE country = 'USA'", "source_tables": ["publishers"]}, "evidence": ""}
{"sample_id": 199, "db_id": "book_publishing_company", "final": {"question": "What is the publisher's information of New Moon Books?", "sql": "SELECT T1.pr_info FROM pub_info AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.pub_name = 'New Moon Books'", "source_tables": ["pub_info", "publishers"]}, "evidence": "publisher name refers to pub_name; New Moon Books is a publisher name"}
{"sample_id": 200, "db_id": "book_publishing_company", "final": {"question": "Please list the first names of the employees who work as Managing Editor.", "sql": "SELECT T1.fname FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T2.job_desc = 'Managing Editor'", "source_tables": ["employee", "jobs"]}, "evidence": "Managing Editor is a job description which refers to job_desc"}
{"sample_id": 201, "db_id": "book_publishing_company", "final": {"question": "What is the highest level of job to get to for the employee who got hired the earliest?", "sql": "SELECT T2.max_lvl FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id ORDER BY T1.hire_date LIMIT 1", "source_tables": ["employee", "jobs"]}, "evidence": "highest job level refers to MAX(job_lvl); hired the earliest refers to MIN(hire_date)"}
{"sample_id": 202, "db_id": "book_publishing_company", "final": {"question": "In which city is the store with the highest total sales quantity located?", "sql": "SELECT T2.city FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id GROUP BY T2.city ORDER BY SUM(T1.qty) DESC LIMIT 1", "source_tables": ["sales", "stores"]}, "evidence": "qty is abbreviation for quantity; highest sales quantity refers to MAX(qty)"}
{"sample_id": 203, "db_id": "book_publishing_company", "final": {"question": "What is the price of the book that sells the best?", "sql": "SELECT T2.price FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id ORDER BY T1.qty DESC LIMIT 1", "source_tables": ["sales", "titles"]}, "evidence": "qty is abbreviation for quantity; sells the best mean with the most sales quantity; MAX(qty)"}
{"sample_id": 204, "db_id": "book_publishing_company", "final": {"question": "Please list the stores that ordered the book \"Life Without Fear\".", "sql": "SELECT T2.stor_name FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id INNER JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T3.title = 'Life Without Fear'", "source_tables": ["titles", "sales", "stores"]}, "evidence": "store name refers to stor_name"}
{"sample_id": 205, "db_id": "book_publishing_company", "final": {"question": "Among the stores that have ordered the book \"Life Without Fear\", how many of them are located in Massachusetts?", "sql": "SELECT COUNT(T1.stor_id) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id INNER JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T2.state = 'Massachusetts'", "source_tables": ["titles", "sales", "stores"]}, "evidence": "Massachusetts is a state"}
{"sample_id": 206, "db_id": "book_publishing_company", "final": {"question": "In which country is the publisher of the book \"Life Without Fear\" located?", "sql": "SELECT T2.country FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.title = 'Life Without Fear'", "source_tables": ["titles", "publishers"]}, "evidence": "Life Without Fear is book title"}
{"sample_id": 207, "db_id": "book_publishing_company", "final": {"question": "What is the publisher that has published the most expensive book?", "sql": "SELECT T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id ORDER BY T1.price DESC LIMIT 1", "source_tables": ["titles", "publishers"]}, "evidence": "most expensive book refers to MAX(price)"}
{"sample_id": 208, "db_id": "book_publishing_company", "final": {"question": "Among the publishers in the USA, how many of them have published books that are over $15?", "sql": "SELECT COUNT(DISTINCT T1.pub_id) FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.country = 'USA' AND T1.price > 15", "source_tables": ["titles", "publishers"]}, "evidence": "are over $15 refers to price>15"}
{"sample_id": 209, "db_id": "book_publishing_company", "final": {"question": "Please give more detailed information about the first three books that sell the best.", "sql": "SELECT T1.notes FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id ORDER BY T2.qty DESC LIMIT 3", "source_tables": ["sales", "titles"]}, "evidence": "qty is abbreviation for quantity; sells the best mean with the most sales quantity; MAX(qty)"}
{"sample_id": 240, "db_id": "retail_complains", "final": {"question": "On which day was the most verbose complaint received?", "sql": "SELECT 'Date received' FROM callcenterlogs WHERE ser_time = ( SELECT MAX(ser_time) FROM callcenterlogs )", "source_tables": ["callcenterlogs"]}, "evidence": "day received refers to \"Date received\"; most verbose complaint refers to MAX(ser_time);"}
{"sample_id": 241, "db_id": "retail_complains", "final": {"question": "When did the earliest complaint start on 2017/3/22?", "sql": "SELECT MIN(ser_time) FROM callcenterlogs WHERE 'Date received' = '2017-03-22'", "source_tables": ["callcenterlogs"]}, "evidence": "earliest complaint refers to oldest ser_start; on 2017/3/22 refers to \"Date received\" = '2017-03-22';"}
{"sample_id": 242, "db_id": "retail_complains", "final": {"question": "Which complaint is more urgent, complaint ID CR2400594 or ID CR2405641?", "sql": "SELECT CASE WHEN SUM(CASE WHEN 'Complaint ID' = 'CR2400594' THEN priority END) > SUM(CASE WHEN 'Complaint ID' = 'CR2405641' THEN priority END) THEN 'CR2400594' ELSE 'CR2405641' END FROM callcenterlogs", "source_tables": ["callcenterlogs"]}, "evidence": "more urgent refers to MAX(priority);"}
{"sample_id": 243, "db_id": "retail_complains", "final": {"question": "Please list the full names of all the male clients born after the year 1990.", "sql": "SELECT first, middle, last FROM client WHERE year > 1990", "source_tables": ["client"]}, "evidence": "full names = first, middle, last; male refers to sex = 'Male'; year > 1990;"}
{"sample_id": 244, "db_id": "retail_complains", "final": {"question": "How many complaints have the client Diesel Galloway filed?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Diesel' AND T1.last = 'Galloway'", "source_tables": ["events", "client"]}, "evidence": ""}
{"sample_id": 245, "db_id": "retail_complains", "final": {"question": "What is the detailed product of the complaint filed by Diesel Galloway on 2014/7/3?", "sql": "SELECT T2.'Sub-product' FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Diesel' AND T1.last = 'Galloway' AND T2.'Date received' = '2014-07-03'", "source_tables": ["events", "client"]}, "evidence": "detailed product refers to \"sub-product\"; on 2014/7/3 refers to \"Date received\" = '2014-07-03';"}
{"sample_id": 246, "db_id": "retail_complains", "final": {"question": "Was the tag in the complaint filed by Matthew Pierce on 2016/10/28 approved by himself?", "sql": "SELECT CASE WHEN T2.'Consumer consent provided?' IN (NULL, 'N/A', 'Empty') THEN 'No' ELSE 'Yes' END FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Matthew' AND T1.last = 'Pierce' AND T2.'Date received' = '2016-10-28'", "source_tables": ["events", "client"]}, "evidence": "on 2016/10/28 refers to Date received = '2016-10-28'; \"Consumer consent provided?\" in (null, 'N/A', 'Empty') means that the company didn't get the permission of consent; \"Consumer consent provided?\" not in (null, 'N/A', 'Empty') means that customers provide the consent for this tag;"}
{"sample_id": 247, "db_id": "retail_complains", "final": {"question": "For how long was the complaint filed by Matthew Pierce on 2016/10/28 delayed?", "sql": "SELECT 365 * (strftime('%Y', T2.'Date sent to company') - strftime('%Y', T2.'Date received')) + 30 * (strftime('%M', T2.'Date sent to company') - strftime('%M', T2.'Date received')) + (strftime('%d', T2.'Date sent to company') - strftime('%d', T2.'Date received')) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Matthew' AND T1.last = 'Pierce' AND T2.'Date received' = '2016-10-28'", "source_tables": ["events", "client"]}, "evidence": "on 2016/10/28 refers to \"Date received\" = '2016-10-28'; delayed = SUBTRACT(\"Date sent to company', 'Date received\");"}
{"sample_id": 248, "db_id": "retail_complains", "final": {"question": "What is the full name of the client whose complaint on 2017/3/27 was received by MICHAL?", "sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.'rand client' WHERE T2.'Date received' = '2017-03-27' AND T2.server = 'MICHAL'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "full names = first, middle, last; on 2017/3/27 refers to \"Date received\" = '2017-03-27'; MICHAL refers to server = 'MICHAL';"}
{"sample_id": 249, "db_id": "retail_complains", "final": {"question": "For how long did the complaint filed on 2017/3/27 by Rachel Hicks last?", "sql": "SELECT T2.ser_time FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.'rand client' WHERE T1.first = 'Rachel' AND T1.last = 'Hicks' AND T2.'Date received' = '2017-03-27'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "how long did the complaint filed last refers to ser_time; on 2017/3/27 refers to \"Date received\" = '2017-03-27';"}
{"sample_id": 250, "db_id": "retail_complains", "final": {"question": "Among all the clients from the New York city, how many of them have filed a complaint on the issue of Deposits and withdrawals?", "sql": "SELECT COUNT(T2.Issue) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Issue = 'Deposits and withdrawals' AND T1.city = 'New York City'", "source_tables": ["events", "client"]}, "evidence": ""}
{"sample_id": 251, "db_id": "retail_complains", "final": {"question": "Please list the full names of all the clients whose complaints are still in progress.", "sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.'Company response to consumer' = 'In progress'", "source_tables": ["events", "client"]}, "evidence": "full name = first, middle, last; complaints are still in progress refers to \"Company response to consumer\" = 'In progress';"}
{"sample_id": 252, "db_id": "retail_complains", "final": {"question": "Among the clients who did receive a timely response for their complaint, how many of them are from New York?", "sql": "SELECT COUNT(T1.city) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.'Timely response?' = 'No' AND T1.city = 'New York City'", "source_tables": ["events", "client"]}, "evidence": "did not receive a timely response refers to \"Timely response?\" = 'No'; New York refers to city = 'New York';"}
{"sample_id": 253, "db_id": "retail_complains", "final": {"question": "How many complaints on credit cards in the year 2016 were filed by male clients?", "sql": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE strftime('%Y', T2.'Date received') = '2016' AND T1.sex = 'Male' AND T2.Product = 'Credit card'", "source_tables": ["events", "client"]}, "evidence": "credit cards refers to Product = 'Credit card'; 2016 refers to year(Date received) = 2016; male refers to sex = 'Male';"}
{"sample_id": 254, "db_id": "retail_complains", "final": {"question": "Which division is Diesel Galloway in?", "sql": "SELECT T2.division FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.first = 'Diesel' AND T1.last = 'Galloway'", "source_tables": ["district", "client"]}, "evidence": ""}
{"sample_id": 255, "db_id": "retail_complains", "final": {"question": "Please list the full names of all the male clients in the Pacific division.", "sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'Pacific' AND T1.sex = 'Male'", "source_tables": ["district", "client"]}, "evidence": "full names = first, middle, last; male refers to sex = 'Male';"}
{"sample_id": 256, "db_id": "retail_complains", "final": {"question": "What is the average number of complaints on credit cards filed by clients from New York in the 3 consecutive years starting from 2015?", "sql": "SELECT CAST(COUNT(T2.'Complaint ID') AS REAL) / 3 AS average FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE strftime('%Y', T2.'Date received') BETWEEN '2015' AND '2017' AND T1.city = 'New York City' AND T2.Product = 'Credit card'", "source_tables": ["events", "client"]}, "evidence": "average = AVG(Complaint ID); credit cards refers to Product = 'Credit card'; New York refers to city = 'New York'; 3 consecutive years starting from 2015 refers to \"Date received\" BETWEEN 2015 AND 2017;"}
{"sample_id": 257, "db_id": "retail_complains", "final": {"question": "What is the percentage of the increase of complaints filed by the clients from New York from the year 2016 to the year 2017?", "sql": "SELECT 100.0 * (SUM(CASE WHEN strftime('%Y', T2.'Date received') = '2017' THEN 1 ELSE 0 END) - SUM(CASE WHEN strftime('%Y', T2.'Date received') = '2016' THEN 1 ELSE 0 END)) / SUM(CASE WHEN strftime('%Y', T2.'Date received') = '2016' THEN 1 ELSE 0 END) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'New York City'", "source_tables": ["events", "client"]}, "evidence": "percentage of increase = MULTIPLY(DIVIDE(SUBTRACT(SUM(year(\"Date received\") = 2017), SUM(year(\"Date received\") = 2016)), SUM(year(\"Date received\") = 2016)), 1.0); New York refers to city = 'New York'; year(\"Date received\") BETWEEN 2016 AND 2017;"}
{"sample_id": 258, "db_id": "retail_complains", "final": {"question": "What was the serve time for the complaint call from client \"C00007127\" on 2017/2/22?", "sql": "SELECT T1.ser_time FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.'Complaint ID' = T2.'Complaint ID' WHERE T2.Client_ID = 'C00007127' AND T1.'Date received' = '2017-02-22'", "source_tables": ["events", "callcenterlogs"]}, "evidence": "serve time refers to ser_time; longer ser_time means more verbose or longer complaint; on 2017/2/22 refers to \"Date received\" = '2017-02-22';"}
{"sample_id": 259, "db_id": "retail_complains", "final": {"question": "Which state does the owner of \"wyatt.collins@gmail.com\" live in? Give the full name of the state.", "sql": "SELECT T1.state FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.email = 'wyatt.collins@gmail.com'", "source_tables": ["district", "client"]}, "evidence": "full name of the state refers to state_name;"}
{"sample_id": 260, "db_id": "retail_complains", "final": {"question": "Which detailed product did Mr Lennox Oliver Drake complain about?", "sql": "SELECT DISTINCT T2.'Sub-product' FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Lennox' AND T1.middle = 'Oliver' AND T1.last = 'Drake' AND T1.sex = 'Male'", "source_tables": ["events", "client"]}, "evidence": "detailed product refers to \"Sub-product\"; Mr refers to sex = 'Male';"}
{"sample_id": 261, "db_id": "retail_complains", "final": {"question": "What was the detailed issue did Mr Gunner Omer Fuller complain about?", "sql": "SELECT T2.'Sub-issue' FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Gunner' AND T1.middle = 'Omer' AND T1.last = 'Fuller' AND T1.sex = 'Male'", "source_tables": ["events", "client"]}, "evidence": "detailed issue refers to Sub-issue; Mr refers to sex = 'Male';"}
{"sample_id": 262, "db_id": "retail_complains", "final": {"question": "Did Ms. Lyric Emely Taylor provide the consent for result of the complaint call on 2016/5/20?", "sql": "SELECT CASE WHEN T2.'Consumer consent provided?' IN (NULL, 'N/A', '') THEN 'No' ELSE 'Yes' END FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Lyric' AND T1.middle = 'Emely' AND T1.last = 'Taylor' AND T1.sex = 'Female' AND T2.'Date received' = '2016-05-20'", "source_tables": ["events", "client"]}, "evidence": "Ms refers to sex = 'Female'; \"Consumer consent provided?\" in (null, 'N/A', 'Empty') means that the company didn't get the permission of consent; \"Consumer consent provided?\" not in (null, 'N/A', 'Empty') means the customers provide the consent; on 2016/5/20 refers to Date received = '2016-05-20';"}
{"sample_id": 263, "db_id": "retail_complains", "final": {"question": "How many days delay for the complaint call from Mr. Brantley Julian Stanley on 2012/5/18?", "sql": "SELECT 365 * (strftime('%Y', T2.'Date sent to company') - strftime('%Y', T2.'Date received')) + 30 * (strftime('%M', T2.'Date sent to company') - strftime('%M', T2.'Date received')) + (strftime('%d', T2.'Date sent to company') - strftime('%d', T2.'Date received')) AS days FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.'Date received' = '2012-05-18' AND T1.sex = 'Male' AND T1.first = 'Brantley' AND T1.middle = 'Julian' AND T1.last = 'Stanley'", "source_tables": ["events", "client"]}, "evidence": "days delay for the complaint = SUBTRACT(\"date sent to company\", \"Date received\"); Mr refers to sex = 'Male'; on 2012/5/18 refers to \"Date received\" = '2012-05-18';"}
{"sample_id": 264, "db_id": "retail_complains", "final": {"question": "Which district did the review on 2018/9/11 come from? Give the name of the city.", "sql": "SELECT T2.district_id, T2.city FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Date = '2018-09-11'", "source_tables": ["district", "reviews"]}, "evidence": "on 2018/9/11 refers to Date = '2017-07-22';"}
{"sample_id": 265, "db_id": "retail_complains", "final": {"question": "What was the review context from Jacksonville on 2017/7/22?", "sql": "SELECT T1.Reviews FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Jacksonville' AND T1.Date = '2017-07-22'", "source_tables": ["district", "reviews"]}, "evidence": "Jacksonville refers to city = 'Jacksonville'; on 2017/7/22 refers to Date = '2017-07-22';"}
{"sample_id": 266, "db_id": "retail_complains", "final": {"question": "Which product received a review from Indianapolis on 2016/10/7?", "sql": "SELECT T1.Product FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Indianapolis' AND T1.Date = '2016-10-07'", "source_tables": ["district", "reviews"]}, "evidence": "Indianapolis refers to state = 'Indianapolis'; on 2016/10/7 refers to Date = '2013-04-04';"}
{"sample_id": 267, "db_id": "retail_complains", "final": {"question": "How many stars did \"Eagle Capital\" received from Little Rock on 2013/4/4?", "sql": "SELECT COUNT(T1.Stars) FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Product = 'Eagle Capital' AND T2.city = 'Little Rock' AND T1.Date = '2013-04-04'", "source_tables": ["district", "reviews"]}, "evidence": "Eagle Capital refers to Product = 'Eagle Capital'; Little Rock is a city; on 2013/4/4 refers to Date = '2013-04-04';"}
{"sample_id": 268, "db_id": "retail_complains", "final": {"question": "For the client who made the complaint call \"CR0217298\", what was his/her birthday\uff1f", "sql": "SELECT T1.month, T1.day FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.'Complaint ID' = 'CR0217298'", "source_tables": ["events", "client"]}, "evidence": "complaint call refers to Complaint ID; birthday = year, month, day;"}
{"sample_id": 269, "db_id": "retail_complains", "final": {"question": "What was the phone of number of the client who made the complaint call \"CR0100432\" \uff1f", "sql": "SELECT T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.'Complaint ID' = 'CR0100432'", "source_tables": ["events", "client"]}, "evidence": "complaint call refers to Complaint ID;"}
{"sample_id": 270, "db_id": "retail_complains", "final": {"question": "For all the complaint callers on 2017/3/27, what percentage of the clients are females?", "sql": "SELECT CAST(SUM(CASE WHEN T1.sex = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.'Date received' = '2017-03-27'", "source_tables": ["events", "client"]}, "evidence": "on 2017/3/27 refers to \"Date received\" = '2017-03-27'; percentage = MULTIPLY(DIVIDE(SUM(sex = 'Female' ), COUNT(client_id)), 1.0); females refers to sex = 'Female';"}
{"sample_id": 271, "db_id": "retail_complains", "final": {"question": "What is the percentage of the complaint calls from Mr Mason Javen Lopez has got the consent provided by the customer?", "sql": "SELECT CAST(SUM(CASE WHEN T2.'Consumer consent provided?' = 'Consent provided' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.'Consumer consent provided?') FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Male' AND T1.first = 'Mason' AND T1.middle = 'Javen' AND T1.last = 'Lopez'", "source_tables": ["events", "client"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(\"Consumer consent provided?\" = 'Consent provided'), COUNT(client_id)), 1.0); Mr refers to sex = 'Male'; consent provided by the customer refers to \"Consumer consent provided?\" = 'Consent provided';"}
{"sample_id": 272, "db_id": "retail_complains", "final": {"question": "How many priority urgent complaints were received in march of 2017? List the complaint ID of these complaints.", "sql": "SELECT COUNT('Complaint ID') FROM callcenterlogs WHERE 'Date received' LIKE '2017-01%' AND priority = ( SELECT MAX(priority) FROM callcenterlogs )", "source_tables": ["callcenterlogs"]}, "evidence": "urgent complaints refers to priority = 2; march of 2017 refers to \"Date received\" BETWEEN '2017-01-01' AND '2017-01-31';"}
{"sample_id": 273, "db_id": "retail_complains", "final": {"question": "Please list the full name, date of birth, and email id of the elderly clients in descending order of age.", "sql": "SELECT first, middle, last, year, month , day, email FROM client WHERE age > 65 ORDER BY age DESC", "source_tables": ["client"]}, "evidence": "full name = first, middle, last; date of birth = year, month, day; elderly clients refers to age > 65;"}
{"sample_id": 274, "db_id": "retail_complains", "final": {"question": "Which product got the most five stars, and how many?", "sql": "SELECT T.Product, MAX(T.num) FROM ( SELECT Product, COUNT(Stars) AS num FROM reviews WHERE Stars = 5 GROUP BY Product ) T", "source_tables": ["reviews"]}, "evidence": "most five stars refers to MAX(COUNT(stars = 5));"}
{"sample_id": 275, "db_id": "retail_complains", "final": {"question": "List all the states in the South region.", "sql": "SELECT state FROM state WHERE Region = 'South'", "source_tables": ["state"]}, "evidence": ""}
{"sample_id": 276, "db_id": "retail_complains", "final": {"question": "What is the email id of clients whose calls were hung?", "sql": "SELECT T1.email FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.'rand client' WHERE T2.outcome = 'HANG'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "email id refers to email; calls were hung refers to outcome = 'Hang';"}
{"sample_id": 277, "db_id": "retail_complains", "final": {"question": "Calculate the average age of clients from the Midwest region.", "sql": "SELECT CAST(SUM(T1.age) AS REAL) / COUNT(T3.Region) AS average FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T3.Region = 'Midwest'", "source_tables": ["state", "district", "client"]}, "evidence": "average age = AVG(age);"}
{"sample_id": 278, "db_id": "retail_complains", "final": {"question": "List the full name and phone number of clients who submitted the complaint via fax.", "sql": "SELECT T1.first, T1.middle, T1.last, T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.'Submitted via' = 'Fax'", "source_tables": ["events", "client"]}, "evidence": "full name = first, middle, last; submitted the complaint via fax refers to \"Submitted via\" = 'fax';"}
{"sample_id": 279, "db_id": "retail_complains", "final": {"question": "Find and list the names of districts which has below-average stars for Eagle Capital.", "sql": "SELECT T2.division FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Product = 'Eagle Capital' AND T1.Stars > ( SELECT AVG(Stars) FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id )", "source_tables": ["district", "reviews"]}, "evidence": "below average = AVG(stars) < Stars; Eagle Capital refers to Product = 'Eagle Capital';"}
{"sample_id": 280, "db_id": "retail_complains", "final": {"question": "In the calls from the mountain division, how many are from teenage clients?", "sql": "SELECT COUNT(T1.age) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.age BETWEEN 12 AND 20 AND T2.division = 'Mountain'", "source_tables": ["district", "client"]}, "evidence": "teenage refers to age BETWEEN 12 AND 20;"}
{"sample_id": 281, "db_id": "retail_complains", "final": {"question": "What is the number of complaints related to Credit cards came from female clients?", "sql": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Female' AND T2.Product = 'Credit card'", "source_tables": ["events", "client"]}, "evidence": "Credit cards refers to Product = 'Credit card'; female refers to sex = 'female';"}
{"sample_id": 282, "db_id": "retail_complains", "final": {"question": "Among the clients born between 1980 and 2000, list the name of male clients who complained through referral.", "sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.year BETWEEN 1980 AND 2000 AND T1.sex = 'Male' AND T2.'Submitted via' = 'Referral'", "source_tables": ["events", "client"]}, "evidence": "born between 1980 and 2000 refers to year BETWEEN 1980 AND 2000; name = first, middle, last; male refers to sex = 'Male'; complained through refers to \"Submitted via\";"}
{"sample_id": 283, "db_id": "retail_complains", "final": {"question": "What is the medium through which most complaints are registered in Florida?", "sql": "SELECT T3.'Submitted via' FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.'rand client' = T2.client_id INNER JOIN events AS T3 ON T1.'Complaint ID' = T3.'Complaint ID' WHERE T2.state = 'FL' GROUP BY T1.'Complaint ID' ORDER BY COUNT(T1.'Complaint ID') DESC LIMIT 1", "source_tables": ["events", "client", "callcenterlogs"]}, "evidence": "medium refers to \"Submitted via\"; most complaints refers to MAX(Complaint ID); Florida refers to state = 'florida';"}
{"sample_id": 284, "db_id": "retail_complains", "final": {"question": "Calculate the average number of complaints received from New Bedford each year which are closed with explanation.", "sql": "SELECT STRFTIME('%Y', T3.'Date received') , CAST(SUM(CASE WHEN T3.'Company response to consumer' = 'Closed with explanation' THEN 1 ELSE 0 END) AS REAL) / COUNT(T3.'Complaint ID') AS average FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.'rand client' = T2.client_id INNER JOIN events AS T3 ON T1.'Complaint ID' = T3.'Complaint ID' WHERE T2.city = 'New Bedford' GROUP BY strftime('%Y', T3.'Date received')", "source_tables": ["events", "client", "callcenterlogs"]}, "evidence": "average = AVG(\"Complaint ID\"); New Bedford refers to city = 'New Bedford'; closed with explanation refers to Company response to consumer = 'Closed with explanation';"}
{"sample_id": 285, "db_id": "retail_complains", "final": {"question": "What percentage of consumers from Houston disputed complaints?", "sql": "SELECT CAST(SUM(CASE WHEN T2.'Consumer disputed?' = 'Yes' AND T1.city = 'Houston' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID", "source_tables": ["events", "client"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(\"Consumer disputed?\" = 'Yes' AND city = 'Houston'), COUNT(client_id)), 1.0); Houston refers to city = 'Houston';"}
{"sample_id": 286, "db_id": "retail_complains", "final": {"question": "Find the number of service members who complained in Syracuse.", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Tags = 'Servicemember' AND T1.city = 'Syracuse'", "source_tables": ["events", "client"]}, "evidence": "service members refers to client.client_id; Syracuse refers to city = 'Syracuse';"}
{"sample_id": 287, "db_id": "retail_complains", "final": {"question": "Among the calls from California, what percentage are priority 1?", "sql": "SELECT CAST(SUM(CASE WHEN T1.priority = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.priority) FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.'rand client' = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id INNER JOIN state AS T4 ON T3.state_abbrev = T4.StateCode WHERE T4.State = 'California'", "source_tables": ["state", "district", "client", "callcenterlogs"]}, "evidence": "California refers to state = 'California'; percentage = MULTIPLY(DIVIDE(SUM(priority = 1), COUNT(\"Complaint ID\"), 1.0));"}
{"sample_id": 288, "db_id": "retail_complains", "final": {"question": "Calculate the difference in the average age of elderly and middle-aged clients in the Northeast region.", "sql": "SELECT (CAST(SUM(CASE WHEN T1.age BETWEEN 35 AND 55 THEN T1.age ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age BETWEEN 35 AND 55 THEN 1 ELSE 0 END)) - (CAST(SUM(CASE WHEN T1.age > 65 THEN T1.age ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age > 65 THEN 1 ELSE 0 END)) AS difference FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T3.Region = 'Northeast'", "source_tables": ["state", "district", "client"]}, "evidence": "difference in the average = SUBTRACT(AVG(age BETWEEN 35 AND 55), AVG( age > 65)); elderly refers to age > 65; middle-aged refers to age BETWEEN 35 AND 55;"}
{"sample_id": 289, "db_id": "retail_complains", "final": {"question": "List by their ID number the 3 longest complaints.", "sql": "SELECT 'Complaint ID' FROM callcenterlogs ORDER BY ser_time DESC LIMIT 3", "source_tables": ["callcenterlogs"]}, "evidence": "ID number refers to \"Complaint ID\"; longest complaints refers to MAX(ser_time);"}
{"sample_id": 290, "db_id": "retail_complains", "final": {"question": "How many clients have an email account other than gmail.com?", "sql": "SELECT COUNT(email) FROM client WHERE email NOT LIKE '%@gmail.com'", "source_tables": ["client"]}, "evidence": "email account other than gmail.com refers to email not like '%@gmail.com';"}
{"sample_id": 291, "db_id": "retail_complains", "final": {"question": "Identify by their ID all clients who did not give their consent permission.", "sql": "SELECT Client_ID FROM events WHERE 'Consumer consent provided?' = 'N/A' OR 'Consumer consent provided?' IS NULL OR 'Consumer consent provided?' = ''", "source_tables": ["events"]}, "evidence": "did not give their consent permission refers to Consumer consent provided is null, 'N/A', or empty;"}
{"sample_id": 292, "db_id": "retail_complains", "final": {"question": "List by their ID the complaints received by the company on 25/09/2014 that took the longest.", "sql": "SELECT 'Complaint ID' FROM events WHERE strftime('%J', 'Date sent to company') - strftime('%J', 'Date received') = ( SELECT MAX(strftime('%J', 'Date sent to company') - strftime('%J', 'Date received')) FROM events WHERE 'Date sent to company' = '2014-09-25' ) AND 'Date sent to company' = '2014-09-25'", "source_tables": ["events"]}, "evidence": "ID of the complaints refers to \"Complaint ID\"; on 25/09/2014 refers to \"Date sent to company\" = '2014-09-25'; took the longest = MAX(SUBTRACT(\"Date sent to company\", \"Date received\"));"}
{"sample_id": 293, "db_id": "retail_complains", "final": {"question": "List priority 2 complaints by date received.", "sql": "SELECT DISTINCT 'Complaint ID' FROM callcenterlogs WHERE priority = 2 ORDER BY 'Date received' DESC", "source_tables": ["callcenterlogs"]}, "evidence": ""}
{"sample_id": 294, "db_id": "retail_complains", "final": {"question": "How many complaints are not in process with an agent?", "sql": "SELECT COUNT(outcome) FROM callcenterlogs WHERE outcome != 'AGENT'", "source_tables": ["callcenterlogs"]}, "evidence": "not in process with an agent refers to outcome ! = 'AGENT';"}
{"sample_id": 295, "db_id": "retail_complains", "final": {"question": "How many Credit Card complaints did Sharon handle?", "sql": "SELECT COUNT(T1.'Complaint ID') FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.'Complaint ID' = T2.'Complaint ID' WHERE T2.Product = 'Credit card' AND T1.server = 'SHARON'", "source_tables": ["events", "callcenterlogs"]}, "evidence": "Credit Card refers to Product = 'Credit Card'; Sharon refers to server = 'SHARON';"}
{"sample_id": 296, "db_id": "retail_complains", "final": {"question": "In which region have the most 1-star reviews been done?", "sql": "SELECT T3.Region FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T1.Stars = 1 GROUP BY T3.Region ORDER BY COUNT(T3.Region) DESC LIMIT 1", "source_tables": ["state", "district", "reviews"]}, "evidence": "most 1-star reviews refers to MAX(COUNT(stars = 1));"}
{"sample_id": 297, "db_id": "retail_complains", "final": {"question": "In what years were the clients who demanded more problems with Certificate of deposit born?", "sql": "SELECT T1.year FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.'Sub-product' = '(CD) Certificate of deposit' GROUP BY T1.year ORDER BY COUNT(T1.year) DESC LIMIT 1", "source_tables": ["events", "client"]}, "evidence": "more problems with Certificate refers to MAX(COUNT(\"Sub-product\" = '(CD) Certificate of deposit'));"}
{"sample_id": 298, "db_id": "retail_complains", "final": {"question": "How many cases of billing dispute issues occurred in the Mountain division?", "sql": "SELECT COUNT(T1.Issue) FROM events AS T1 INNER JOIN client AS T2 ON T1.Client_ID = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.Issue = 'Billing disputes' AND T3.division = 'Mountain'", "source_tables": ["events", "district", "client"]}, "evidence": "billing dispute refers to issue = 'Billing disputes';"}
{"sample_id": 299, "db_id": "retail_complains", "final": {"question": "How many male clients are from the state of Massachusetts?", "sql": "SELECT COUNT(T3.sex) FROM state AS T1 INNER JOIN district AS T2 ON T1.StateCode = T2.state_abbrev INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.state = 'Massachusetts' AND T3.sex = 'Male'", "source_tables": ["state", "district", "client"]}, "evidence": "male refers to sex = 'Male';"}
{"sample_id": 300, "db_id": "retail_complains", "final": {"question": "Lists the last name of all clients who made a PS-type complaint and were served by TOVA.", "sql": "SELECT t1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.'rand client' WHERE T2.type = 'PS' AND T2.server = 'TOVA'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "PS-type complaint refers to type = 'PS'; served by refers to server;\n\n"}
{"sample_id": 301, "db_id": "retail_complains", "final": {"question": "How many clients under the age of 35 gave Eagle National Mortgage 1 star?", "sql": "SELECT COUNT(T2.age) FROM reviews AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.Product = 'Eagle National Mortgage' AND T1.Stars = 1 AND T2.age < 35", "source_tables": ["reviews", "client"]}, "evidence": "age < 35; Eagle National Mortgage refers to Product = 'Eagle National Mortgage';"}
{"sample_id": 302, "db_id": "retail_complains", "final": {"question": "How many male clients born in the year 1977 were given priority 0 in their complaints?", "sql": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.'rand client' WHERE T1.sex = 'Male' AND T2.priority = 0 AND T1.year = 1997", "source_tables": ["client", "callcenterlogs"]}, "evidence": "male refers to sex = 'Male';"}
{"sample_id": 303, "db_id": "retail_complains", "final": {"question": "List by name all customers who provided consent for the tag Older American.", "sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Tags = 'Older American' AND T2.'Consumer consent provided?' != 'N/A' AND T2.'Consumer consent provided?' IS NOT NULL AND T2.'Consumer consent provided?' != ''", "source_tables": ["events", "client"]}, "evidence": "name refers to first; provided consent refers to \"Consumer consent provided?\" not in ('N/A', null, 'empty');"}
{"sample_id": 304, "db_id": "retail_complains", "final": {"question": "What is the name of the state in which there have been the largest number of complaints with priority 0?", "sql": "SELECT T2.state FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.'rand client' = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id INNER JOIN state AS T4 ON T3.state_abbrev = T4.StateCode WHERE T1.priority = 0 GROUP BY T2.state ORDER BY COUNT(T2.state) DESC LIMIT 1", "source_tables": ["state", "district", "client", "callcenterlogs"]}, "evidence": "largest number of complaints refers to MAX(COUNT(\"Complaint ID\") WHERE priority = 0);"}
{"sample_id": 305, "db_id": "retail_complains", "final": {"question": "How many complaints made by women and served after 3 pm received a timely response from the company?", "sql": "SELECT COUNT(T1.'Complaint ID') FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.'rand client' = T2.client_id INNER JOIN events AS T3 ON T1.'Complaint ID' = T3.'Complaint ID' WHERE T2.sex = 'Female' AND T1.ser_start BETWEEN '15:00:01' AND '23:59:59' AND T3.'Timely response?' = 'Yes'", "source_tables": ["events", "client", "callcenterlogs"]}, "evidence": "women refers to sex = 'Female'; served after 3 pm refers to ser_time BETWEEN '15:00:01' AND '23:59:59'; received a timely response refers to \"Timely response?\" = 'Yes';"}
{"sample_id": 306, "db_id": "retail_complains", "final": {"question": "How many complaints were served in 5 minutes or less by DORIT and responded to the customer with an explanation, were made by phone?", "sql": "SELECT COUNT(T1.'Complaint ID') FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.'Complaint ID' = T2.'Complaint ID' WHERE T1.ser_time < '00:05:00' AND T1.server = 'DORIT' AND T2.'Submitted via' = 'Phone' AND T2.'Company response to consumer' = 'Closed with explanation'", "source_tables": ["events", "callcenterlogs"]}, "evidence": "served in 5 minutes or less refers to ser_time < '00:05:00'; DORIT refers to server = 'DORIT'; responded with an explanation refers to \"Company response to consumer\" = 'Closed with explanation'; made by refers to \"Submitted via\";"}
{"sample_id": 307, "db_id": "retail_complains", "final": {"question": "How many clients with the last name Alvarado are from Maryland?", "sql": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T1.state_abbrev = T3.StateCode WHERE T2.last = 'Alvarado' AND T2.state = 'MD'", "source_tables": ["state", "district", "client"]}, "evidence": "The abbreviation of Maryland is 'MD';"}
{"sample_id": 308, "db_id": "retail_complains", "final": {"question": "How many reviews by people between 30 and 50 years include the word 'great'?", "sql": "SELECT COUNT(T1.Reviews) FROM reviews AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.age BETWEEN 30 AND 50 AND T1.Reviews LIKE '%great%'", "source_tables": ["reviews", "client"]}, "evidence": "between 30 and 50 years refers to age BETWEEN 30 AND 50; include the word great refers to Review like '%Great%';"}
{"sample_id": 309, "db_id": "retail_complains", "final": {"question": "What is the full address of the customers who, having received a timely response from the company, have dispute about that response?", "sql": "SELECT T1.address_1, T1.address_2 FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.'Timely response?' = 'Yes' AND T2.'Consumer disputed?' = 'Yes'", "source_tables": ["events", "client"]}, "evidence": "full address = address_1, address_2; received a timely response refers to Timely response? = 'Yes'; have dispute refers to \"Consumer disputed?\" = 'Yes';"}
{"sample_id": 310, "db_id": "retail_complains", "final": {"question": "How many complaints from female clients born in the year 2000 were not sent through the web?", "sql": "SELECT COUNT(T2.'Submitted via') FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Female' AND T1.year = 2000 AND T2.'Submitted via' != 'Web'", "source_tables": ["events", "client"]}, "evidence": "female refers to sex = 'Female'; sent through refers to \"Submitted via\"; not sent through web refers to \"Submitted via\" ! = 'Web';\n"}
{"sample_id": 311, "db_id": "retail_complains", "final": {"question": "List all the complaints narratives made by the customer named Brenda and last name Mayer.", "sql": "SELECT T2.'Consumer complaint narrative' FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Brenda' AND T1.last = 'Mayer'", "source_tables": ["events", "client"]}, "evidence": "complaints narratives refers to \"Consumer complaint narrative\";"}
{"sample_id": 312, "db_id": "retail_complains", "final": {"question": "How many complaints from customers with a gmail.com email were received by the company in February 2017?", "sql": "SELECT COUNT(T1.email) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.'rand client' WHERE (T2.'Date received' LIKE '2017-02%' OR T2.'Date received' LIKE '2017-01%') AND T1.email LIKE '%@gmail.com'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "gmail.com email refers to email like '%gmail.com'; in February 2017 refers to \"Date received\" BETWEEN '2017-01-02' AND '2017-02-28';"}
{"sample_id": 313, "db_id": "retail_complains", "final": {"question": "What is the average number of stars given by Oregon clients in their reviews?", "sql": "SELECT CAST(SUM(T3.Stars) AS REAL) / COUNT(T3.Stars) AS average FROM state AS T1 INNER JOIN district AS T2 ON T1.StateCode = T2.state_abbrev INNER JOIN reviews AS T3 ON T2.district_id = T3.district_id WHERE T1.State = 'Oregon'", "source_tables": ["state", "district", "reviews"]}, "evidence": "average = DIVIDE(SUM(State = 'Oregon'), COUNT(district_id)); Oregon refers to state = 'Oregon';"}
{"sample_id": 314, "db_id": "retail_complains", "final": {"question": "What percentage of clients who sent their complaints by postal mail are age 50 and older?", "sql": "SELECT CAST(SUM(CASE WHEN T1.age > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.'Submitted via') FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.'Submitted via' = 'Postal mail'", "source_tables": ["events", "client"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(\"Submitted via\" = 'Postal mail'), COUNT(client_id)), 1.0); sent their complaints by refers to \"Submitted via\"; age > 50;"}
{"sample_id": 315, "db_id": "retail_complains", "final": {"question": "What is the average age of Norwalk clients?", "sql": "SELECT CAST(SUM(T1.age) AS REAL) / COUNT(T1.age) AS average FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Norwalk'", "source_tables": ["district", "client"]}, "evidence": "average age = AVG(age); Norwalk refers to city = 'Norwalk';"}
{"sample_id": 316, "db_id": "retail_complains", "final": {"question": "How many clients who live in Kansas City provided a 1-star review?", "sql": "SELECT COUNT(T1.Stars) FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Kansas City' AND T1.Stars = 1", "source_tables": ["district", "reviews"]}, "evidence": "1-star review refers stars = 1;"}
{"sample_id": 317, "db_id": "retail_complains", "final": {"question": "Which state has the highest number of clients who gave a 5-star review?", "sql": "SELECT T2.state_abbrev FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Stars = 5 GROUP BY T2.state_abbrev ORDER BY COUNT(T2.state_abbrev) DESC LIMIT 1", "source_tables": ["district", "reviews"]}, "evidence": "highest number of clients refers to MAX(COUNT(client_id)); 5-star review refers to stars = 5;"}
{"sample_id": 318, "db_id": "retail_complains", "final": {"question": "Which region does Noah Thompson live in?", "sql": "SELECT T2.division FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.first = 'Noah' AND T1.last = 'Thompson'", "source_tables": ["district", "client"]}, "evidence": ""}
{"sample_id": 319, "db_id": "retail_complains", "final": {"question": "How did Kyran Muller submit his complaint?", "sql": "SELECT DISTINCT T2.'Submitted via' FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Kyran' AND T1.last = 'Muller'", "source_tables": ["events", "client"]}, "evidence": "how it was submitted refers to \"Submitted via\";"}
{"sample_id": 320, "db_id": "retail_complains", "final": {"question": "What are the products that people who were born after 2005 complain about?", "sql": "SELECT DISTINCT T2.Product FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.year > 2005", "source_tables": ["events", "client"]}, "evidence": "year > 2005;"}
{"sample_id": 321, "db_id": "retail_complains", "final": {"question": "How long was Kendall Allen's complaint about her credit card?", "sql": "SELECT T3.ser_time FROM events AS T1 INNER JOIN client AS T2 ON T1.Client_ID = T2.client_id INNER JOIN callcenterlogs AS T3 ON T1.'Complaint ID' = T3.'Complaint ID' WHERE T2.first = 'Kendall' AND T2.last = 'Allen' AND T2.sex = 'Female' AND T1.Product = 'Credit card'", "source_tables": ["events", "client", "callcenterlogs"]}, "evidence": "how long refers to ser_time; credit card refers to Product = 'Credit Card';"}
{"sample_id": 322, "db_id": "retail_complains", "final": {"question": "What was the issue that the client with the longest server time faced?", "sql": "SELECT T2.Issue FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.'Complaint ID' = T2.'Complaint ID' WHERE T1.ser_time = ( SELECT MAX(ser_time) FROM callcenterlogs )", "source_tables": ["events", "callcenterlogs"]}, "evidence": "longest server time refers to MAX(ser_time);"}
{"sample_id": 323, "db_id": "retail_complains", "final": {"question": "How many clients who live in New York City submitted their complaints via fax?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'New York City' AND T2.'Submitted via' = 'Fax'", "source_tables": ["events", "client"]}, "evidence": "submitted complaints via fax refers to \"Submitted via\" = 'Fax';"}
{"sample_id": 324, "db_id": "retail_complains", "final": {"question": "What is the percentage of male clients complaining about their credit cards?", "sql": "SELECT CAST(SUM(CASE WHEN T1.sex = 'Male' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Product = 'Credit card'", "source_tables": ["events", "client"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(sex = 'Male'), COUNT(client_id)), 1.0); male refers to sex = 'Male'; credit cards refers to Product = 'Credit card';"}
{"sample_id": 325, "db_id": "retail_complains", "final": {"question": "Please list any two clients with their full names who have been tagged as \"Older American\" by the company without seeking their permission.", "sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Tags = 'Older American' AND T2.'Consumer consent provided?' IN (NULL, 'N/A', '') LIMIT 2", "source_tables": ["events", "client"]}, "evidence": "full names = first, middle, last; without seeking their permission refers to \"Consumer consent provided?\" in (null, 'N/A' or 'empty');"}
{"sample_id": 326, "db_id": "retail_complains", "final": {"question": "What is the birth date of the youngest client?", "sql": "SELECT day, month, year FROM client ORDER BY year DESC, month DESC, day DESC LIMIT 1", "source_tables": ["client"]}, "evidence": "birth date refers to year, month, day; youngest client refers to max(year, month, day)"}
{"sample_id": 327, "db_id": "retail_complains", "final": {"question": "How many times does the consumer have no dispute over a non-timely response from the company?", "sql": "SELECT COUNT('Timely response?') FROM events WHERE 'Timely response?' = 'No' AND 'Consumer disputed?' = 'No'", "source_tables": ["events"]}, "evidence": "no dispute refers to Consumer disputed? = 'No'; non-timely response refers to Timely response? = 'No'"}
{"sample_id": 328, "db_id": "retail_complains", "final": {"question": "How many of the complaints are longer than 15 minutes?", "sql": "SELECT COUNT(ser_time) FROM callcenterlogs WHERE strftime('%M', ser_time) > '15'", "source_tables": ["callcenterlogs"]}, "evidence": "longer than 15 minutes refers to ser_time > '00:15:00'"}
{"sample_id": 329, "db_id": "retail_complains", "final": {"question": "What is the most common issue for the highest priority complaints?", "sql": "SELECT T1.Issue FROM events AS T1 INNER JOIN callcenterlogs AS T2 ON T1.'Complaint ID' = T2.'Complaint ID' WHERE T2.priority = 2 GROUP BY T1.Issue ORDER BY COUNT(T1.Issue) DESC LIMIT 1", "source_tables": ["events", "callcenterlogs"]}, "evidence": "most common refers to max(count(issue)); highest priority refers to priority = 2"}
{"sample_id": 330, "db_id": "retail_complains", "final": {"question": "List the full names of all clients who live in the Pacific division.", "sql": "SELECT T2.first, T2.middle, T2.last FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.division = 'Pacific'", "source_tables": ["district", "client"]}, "evidence": "full name refers to first, last"}
{"sample_id": 331, "db_id": "retail_complains", "final": {"question": "What is the social number of the person who made the most complaints?", "sql": "SELECT T1.social FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID GROUP BY T1.client_id ORDER BY COUNT(T1.client_id) DESC LIMIT 1", "source_tables": ["events", "client"]}, "evidence": "social number refers to social; most complaints refers to max(count(event.Client_ID))"}
{"sample_id": 332, "db_id": "retail_complains", "final": {"question": "Which is the city where most of the 1 star reviews come from?", "sql": "SELECT T2.city FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Stars = 1 GROUP BY T2.city ORDER BY COUNT(T2.city) DESC LIMIT 1", "source_tables": ["district", "reviews"]}, "evidence": "most refers to max(count(state_abbrev)); 1 star review refers to Stars = 1"}
{"sample_id": 333, "db_id": "retail_complains", "final": {"question": "What is the address of the client who made a complaint via postal mail on March 14, 2012?", "sql": "SELECT T1.address_1, T1.address_2 FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.'Date received' = '2012-03-14' AND T2.'Submitted via' = 'Postal mail'", "source_tables": ["events", "client"]}, "evidence": "address refers to address_1, address_2; via postal mail refers to Submitted via = 'Postal mail'; March 14 2012 refers to Date received = '2012-03-14'"}
{"sample_id": 334, "db_id": "retail_complains", "final": {"question": "Among the female clients, how many of them have a complaint with a priority of 1?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.'rand client' WHERE T1.sex = 'Female' AND T2.priority = 1", "source_tables": ["client", "callcenterlogs"]}, "evidence": "female refers to sex = 'Female'"}
{"sample_id": 335, "db_id": "retail_complains", "final": {"question": "List all the server of the phone complaints with a late response from the company.", "sql": "SELECT DISTINCT T2.server FROM events AS T1 INNER JOIN callcenterlogs AS T2 ON T1.'Complaint ID' = T2.'Complaint ID' WHERE T1.'Submitted via' = 'Phone' AND T1.'Timely response?' = 'No'", "source_tables": ["events", "callcenterlogs"]}, "evidence": "phone complaint refers to Submitted via = 'Phone'; late response refers to Timely response? = 'No'"}
{"sample_id": 336, "db_id": "retail_complains", "final": {"question": "List all the issues of the complaints made by Kaitlyn Eliza Elliott.", "sql": "SELECT DISTINCT T2.Issue FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Kaitlyn' AND T1.middle = 'Eliza' AND T1.last = 'Elliott'", "source_tables": ["events", "client"]}, "evidence": ""}
{"sample_id": 337, "db_id": "retail_complains", "final": {"question": "What is the name of the state that the client with the email \"skylar.ramirez@gmail.com\" lives in?", "sql": "SELECT T3.state FROM state AS T1 INNER JOIN district AS T2 ON T1.StateCode = T2.state_abbrev INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T3.email = 'skylar.ramirez@gmail.com'", "source_tables": ["state", "district", "client"]}, "evidence": ""}
{"sample_id": 338, "db_id": "retail_complains", "final": {"question": "Which region has the second most clients?", "sql": "SELECT T2.division FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id GROUP BY T2.division ORDER BY COUNT(T2.division) DESC LIMIT 1, 1", "source_tables": ["district", "client"]}, "evidence": "region refers to division; second most refers to second max(client_id)"}
{"sample_id": 339, "db_id": "retail_complains", "final": {"question": "Who is the owner of the final phone number for the complaints on server \"MORIAH\" on 9/11/2013?", "sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.'rand client' WHERE T2.server = 'MORIAH' AND T2.'Date received' = '2013-09-11'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "owner refers to first, middle, last; on 9/11/2013 refers to Date received = '2013-09-11'"}
{"sample_id": 408, "db_id": "movies_4", "final": {"question": "Please list the names of the production company of the movie \"Four Rooms\".", "sql": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Four Rooms'", "source_tables": ["movie_company", "production_company", "movie"]}, "evidence": "names of the production company refers to movie_company; movie \"Four Rooms\" refers to title = 'Four Rooms'"}
{"sample_id": 409, "db_id": "movies_4", "final": {"question": "How many production companies does the movie \"Four Rooms\" have?", "sql": "SELECT COUNT(CNAME) FROM ( SELECT T1.company_name AS CNAME FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Four Rooms' )", "source_tables": ["movie_company", "production_company", "movie"]}, "evidence": "movie \"Four Rooms\" refers to title = 'Four Rooms'"}
{"sample_id": 410, "db_id": "movies_4", "final": {"question": "Please list the titles of all the movie produced by production company \"Universal Pictures\".", "sql": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Universal Pictures'", "source_tables": ["movie_company", "production_company", "movie"]}, "evidence": "\"Universal Pictures\" refers to company_name = 'Universal Pictures'"}
{"sample_id": 411, "db_id": "movies_4", "final": {"question": "What is the title of the latest released movie produced by production company \"Universal Pictures\"?", "sql": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Universal Pictures' ORDER BY T3.release_date DESC LIMIT 1", "source_tables": ["movie_company", "production_company", "movie"]}, "evidence": "\"Universal Pictures\" refers to company_name = 'Universal Pictures'; latest released refers to max(release_date)"}
{"sample_id": 412, "db_id": "movies_4", "final": {"question": "What is the name of the director of photography of the movie \"Pirates of the Caribbean: At World's End\"?", "sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Director of Photography'", "source_tables": ["person", "movie_crew", "movie"]}, "evidence": "name of the director of photography refers to person_name where job = 'Director of Photography'; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'"}
{"sample_id": 413, "db_id": "movies_4", "final": {"question": "What was the job of Dariusz Wolski in the movie \"Pirates of the Caribbean: At World's End\"?", "sql": "SELECT T2.job FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T3.person_name = 'Dariusz Wolski'", "source_tables": ["person", "movie_crew", "movie"]}, "evidence": "movie \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'"}
{"sample_id": 414, "db_id": "movies_4", "final": {"question": "Please list the names of all the crew members of the movie \"Pirates of the Caribbean: At World's End\".", "sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End'", "source_tables": ["person", "movie_crew", "movie"]}, "evidence": "names refers to person_name; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'"}
{"sample_id": 415, "db_id": "movies_4", "final": {"question": "How many crew members worked as producer in the movie \"Pirates of the Caribbean: At World's End\"?", "sql": "SELECT COUNT(T3.person_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Producer'", "source_tables": ["person", "movie_crew", "movie"]}, "evidence": "worked as producer refers to job = 'Producer'; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'"}
{"sample_id": 416, "db_id": "movies_4", "final": {"question": "Please list the names of all the producers in the movie \"Pirates of the Caribbean: At World's End\".", "sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Producer'", "source_tables": ["person", "movie_crew", "movie"]}, "evidence": "names refers to person_name; producers refers to job = 'Producer'; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'"}
{"sample_id": 417, "db_id": "movies_4", "final": {"question": "In how many movie does Dariusz Wolski work as the director of photography?", "sql": "SELECT COUNT(T2.movie_id) FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'", "source_tables": ["person", "movie_crew"]}, "evidence": "director of photography refers to job = 'Director of Photography'"}
{"sample_id": 418, "db_id": "movies_4", "final": {"question": "Among the movie in which Dariusz Wolski works as the director of photography, what is the title of the one with the highest average vote?", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography' ORDER BY T1.vote_average DESC LIMIT 1", "source_tables": ["person", "movie_crew", "movie"]}, "evidence": "director of photography refers to job = 'Director of Photography'; highest average vote refers to max(vote_average)"}
{"sample_id": 419, "db_id": "movies_4", "final": {"question": "When was the release date of the latest movie in which Dariusz Wolski worked as a crew member?", "sql": "SELECT T1.release_date FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' ORDER BY T1.release_date DESC LIMIT 1", "source_tables": ["person", "movie_crew", "movie"]}, "evidence": "release date of the latest movie refers to max(release_date)"}
{"sample_id": 420, "db_id": "movies_4", "final": {"question": "Among the movie in which Dariusz Wolski works as the director of photography, what is the percentage of those movie whose vote average is over 5.0?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.vote_average > 5 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.vote_average) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'", "source_tables": ["person", "movie_crew", "movie"]}, "evidence": "director of photography refers to job = 'Director of Photography'; vote average is over 8.0 refers to vote_average > 5; percentage = divide(sum(movie_id) when vote_average > 5, count(movie_id)) as percentage"}
{"sample_id": 421, "db_id": "movies_4", "final": {"question": "What is the average revenue of the movie in which Dariusz Wolski works as the director of photography?", "sql": "SELECT CAST(SUM(T1.revenue) AS REAL) / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'", "source_tables": ["person", "movie_crew", "movie"]}, "evidence": "director of photography refers to job = 'Director of Photography'; average revenue = divide(sum(revenue), count(movie_id))"}
{"sample_id": 422, "db_id": "movies_4", "final": {"question": "Give the name of the movie with a revenue of 559852396.", "sql": "SELECT title FROM movie WHERE revenue = 559852396", "source_tables": ["movie"]}, "evidence": "name of the movie refers to title; revenue of 559852396 refers to revenue = '559852396'"}
{"sample_id": 423, "db_id": "movies_4", "final": {"question": "What was David Rubin's job in the movie \"Days of Thunder\"?", "sql": "SELECT T2.job FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'David Rubin' AND T1.title = 'Days of Thunder'", "source_tables": ["person", "movie_crew", "movie"]}, "evidence": "\"Days of Thunder\" refers to title = 'Days of Thunder'"}
{"sample_id": 424, "db_id": "movies_4", "final": {"question": "How many movies were directed by Michael Bay?", "sql": "SELECT COUNT(T2.movie_id) FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Michael Bay' AND T2.job = 'Director'", "source_tables": ["person", "movie_crew"]}, "evidence": "directed by refers to job = 'Director'"}
{"sample_id": 425, "db_id": "movies_4", "final": {"question": "Show the total number of keywords of the movie \"I Hope They Serve Beer in Hell\".", "sql": "SELECT COUNT(T2.keyword_id) FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'I Hope They Serve Beer in Hell'", "source_tables": ["movie_keywords", "movie"]}, "evidence": "\"I Hope They Serve Beer in Hell\" refers to title = 'I Hope They Serve Beer in Hell';"}
{"sample_id": 426, "db_id": "movies_4", "final": {"question": "For the movie \"Land of the Dead\", who is its director?", "sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Land of the Dead' AND T2.job = 'Director'", "source_tables": ["person", "movie_crew", "movie"]}, "evidence": "\"Land of the Dead\" refers to title = 'Land of the Dead'; director refers to person_name where job = 'Director'"}
{"sample_id": 427, "db_id": "movies_4", "final": {"question": "Tell the number of movies made by Paramount Animation.", "sql": "SELECT COUNT(T2.movie_id) FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id WHERE T1.company_name = 'Paramount Animation'", "source_tables": ["movie_company", "production_company"]}, "evidence": "Paramount Animation refers to company_name = 'Paramount Animation'"}
{"sample_id": 428, "db_id": "movies_4", "final": {"question": "How many female characters are there in the movie \"Spider-Man 3\"?", "sql": "SELECT COUNT(*) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Spider-Man 3' AND T3.gender = 'Female'", "source_tables": ["movie_cast", "gender", "movie"]}, "evidence": "female characters refer to gender = 'Female'; \"Spider-Man 3\" refers to title = 'Spider-Man 3'"}
{"sample_id": 429, "db_id": "movies_4", "final": {"question": "Provide the most used keyword in the movies.", "sql": "SELECT T1.keyword_name FROM keyword AS T1 INNER JOIN movie_keywords AS T2 ON T1.keyword_id = T2.keyword_id GROUP BY T1.keyword_name ORDER BY COUNT(T1.keyword_name) DESC LIMIT 1", "source_tables": ["movie_keywords", "keyword"]}, "evidence": "most used keyword refers to keyword_name where max(count(keyword_name))"}
{"sample_id": 430, "db_id": "movies_4", "final": {"question": "How many producers does the movie \"The Amityville Horror\" have?", "sql": "SELECT COUNT(T2.person_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'The Amityville Horror' AND T2.job = 'Producer'", "source_tables": ["movie_crew", "movie"]}, "evidence": "producers refers to job = 'Producer'; \"The Amityville Horror\" refers to title = 'The Amityville Horror'"}
{"sample_id": 431, "db_id": "movies_4", "final": {"question": "What is the production company of the movie \"Crazy Heart\"?", "sql": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Crazy Heart'", "source_tables": ["movie_company", "production_company", "movie"]}, "evidence": "movie \"Crazy Heart\" refers to title = 'Crazy Heart'; production company refers to company_name"}
{"sample_id": 432, "db_id": "movies_4", "final": {"question": "Give the number of movies with \"saving the world\" as the keyword.", "sql": "SELECT COUNT(T2.movie_id) FROM keyword AS T1 INNER JOIN movie_keywords AS T2 ON T1.keyword_id = T2.keyword_id WHERE keyword_name = 'saving the world'", "source_tables": ["movie_keywords", "keyword"]}, "evidence": "\"saving the world\" as the keyword refers to keyword_name = 'saving the world'"}
{"sample_id": 433, "db_id": "movies_4", "final": {"question": "For all the movies which were produced by Cruel and Unusual Films, which one has the most popularity?", "sql": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Cruel and Unusual Films' ORDER BY T3.popularity DESC LIMIT 1", "source_tables": ["movie_company", "production_company", "movie"]}, "evidence": "produced by Cruel and Unusual Films refers to company_name = 'Cruel and Unusual Films'; most popularity refers to max(popularity)"}
{"sample_id": 434, "db_id": "movies_4", "final": {"question": "For the movie \"Reign of Fire\", which department was Marcia Ross in?", "sql": "SELECT T4.department_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id INNER JOIN department AS T4 ON T2.department_id = T4.department_id WHERE T3.person_name = 'Marcia Ross' AND T1.title = 'Reign of Fire'", "source_tables": ["person", "movie_crew", "department", "movie"]}, "evidence": "movie \"Reign of Fire\" refers to title = 'Reign of Fire'; which department refers to department_name"}
{"sample_id": 435, "db_id": "movies_4", "final": {"question": "Calculate the average budget of the movies directed by Jaume Collet-Serra.", "sql": "SELECT CAST(SUM(T1.budget) AS REAL) / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Jaume Collet-Serra' AND T2.job = 'Director'", "source_tables": ["person", "movie_crew", "movie"]}, "evidence": "directed by refers to job = 'Director'; average budget = AVG(budget)"}
{"sample_id": 436, "db_id": "movies_4", "final": {"question": "What is the percentage of male characters in the movie \"Bride Wars\"?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Male' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T3.gender) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Bride Wars'", "source_tables": ["movie_cast", "gender", "movie"]}, "evidence": "male refers to gender = 'Male'; \"Bride Wars\" refers to title = 'Bride Wars'; percentage = divide(sum(gender = 'Male'), count(gender)) * 100 as percentage"}
{"sample_id": 437, "db_id": "movies_4", "final": {"question": "What is the title of the movie that was made with the most money and resources?", "sql": "SELECT title FROM movie ORDER BY budget DESC LIMIT 1", "source_tables": ["movie"]}, "evidence": "made with the most money and resources refers to max(budget)"}
{"sample_id": 438, "db_id": "movies_4", "final": {"question": "How many movies have made at least 1 Billion at the box office?", "sql": "SELECT COUNT(movie_id) FROM movie WHERE revenue > 1000000000", "source_tables": ["movie"]}, "evidence": "have made at least 1 Billion at the box office refers to revenue > 1000000000"}
{"sample_id": 439, "db_id": "movies_4", "final": {"question": "When was the first movie released?", "sql": "SELECT MIN(release_date) FROM movie WHERE movie_status = 'Released'", "source_tables": ["movie"]}, "evidence": "when the first movie refers to release_date where min(release_date)"}
{"sample_id": 440, "db_id": "movies_4", "final": {"question": "How many crew are named John Young?", "sql": "SELECT COUNT(person_id) FROM person WHERE person_name = 'John Young'", "source_tables": ["person"]}, "evidence": ""}
{"sample_id": 441, "db_id": "movies_4", "final": {"question": "Provide the title of the movie that is most-liked by a large number of people.", "sql": "SELECT title FROM movie ORDER BY popularity DESC LIMIT 1", "source_tables": ["movie"]}, "evidence": "most-liked by a large number of people refers to max(popularity)"}
{"sample_id": 442, "db_id": "movies_4", "final": {"question": "Who is the person associated with the crew id 1325273?", "sql": "SELECT person_name FROM person WHERE person_id = 1325273", "source_tables": ["person"]}, "evidence": "Who is the person refers to person_name; crew id 1325273 refers to person_id = 1325273"}
{"sample_id": 443, "db_id": "movies_4", "final": {"question": "What is the name of the production company that made the most movies?", "sql": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY COUNT(T2.movie_id) DESC LIMIT 1", "source_tables": ["movie_company", "production_company"]}, "evidence": "name of the production company refers to company_name; most movies refers to max(count(company_name))"}
{"sample_id": 444, "db_id": "movies_4", "final": {"question": "Who played Captain Jack Sparrow in all of the Pirates of the Caribbean movies?", "sql": "SELECT DISTINCT T3.person_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T2.character_name = 'Captain Jack Sparrow' AND T1.title LIKE 'Pirates of the Caribbean%'", "source_tables": ["movie_cast", "person", "movie"]}, "evidence": "Captain Jack Sparrow refers to character_name = 'Captain Jack Sparrow'; Pirates of the Caribbean movies refers to title LIKE 'Pirates of the Carribbean%'"}
{"sample_id": 445, "db_id": "movies_4", "final": {"question": "What is Walt Disney Pictures' most popular movie?", "sql": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Walt Disney Pictures' ORDER BY T3.popularity DESC LIMIT 1", "source_tables": ["movie_company", "production_company", "movie"]}, "evidence": "Walt Disney Pictures refers to company_name = 'Walt Disney Pictures'; most popular movie refers to max(popularity)"}
{"sample_id": 446, "db_id": "movies_4", "final": {"question": "How many movies did Universal Studios release?", "sql": "SELECT COUNT(T2.movie_id) FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id WHERE T1.company_name = 'Universal Studios'", "source_tables": ["movie_company", "production_company"]}, "evidence": "Universal Studios refers to company_name = 'Universal Studios'"}
{"sample_id": 447, "db_id": "movies_4", "final": {"question": "Which production company produced the movie that made the most money at the box office?", "sql": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id GROUP BY T1.company_id ORDER BY SUM(T3.revenue) DESC LIMIT 1", "source_tables": ["movie_company", "production_company", "movie"]}, "evidence": "Which production company refers to company_name; most money at the box office refers to max(revenue)"}
{"sample_id": 448, "db_id": "movies_4", "final": {"question": "How many female crews are in the movie \"Mr. Smith Goes to Washington\"?", "sql": "SELECT COUNT(T3.gender) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Mr. Smith Goes to Washington' AND T3.gender = 'Female'", "source_tables": ["movie_cast", "gender", "movie"]}, "evidence": "female crews refers to gender = 'Female'; \"Mr. Smith Goes to Washington\" refers to title = 'Mr. Smith Goes to Washington'"}
{"sample_id": 449, "db_id": "movies_4", "final": {"question": "List the names of the production companies that made at least 200 movies.", "sql": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING COUNT(T2.movie_id) > 200", "source_tables": ["movie_company", "production_company"]}, "evidence": "names of the production companies refers to company_name; at least 200 movies refers to COUNT(company_name) > = 200"}
{"sample_id": 450, "db_id": "movies_4", "final": {"question": "How many movies did Harrison Ford appear in total?", "sql": "SELECT COUNT(T2.movie_id) FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Harrison Ford'", "source_tables": ["person", "movie_cast"]}, "evidence": ""}
{"sample_id": 451, "db_id": "movies_4", "final": {"question": "What is the title of Jamie Foxx's most recent movie?", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Jamie Foxx' ORDER BY T1.release_date DESC LIMIT 1", "source_tables": ["movie_cast", "person", "movie"]}, "evidence": "most recent movie refers to max(release_date)"}
{"sample_id": 452, "db_id": "movies_4", "final": {"question": "How many movies released in 1995 did Quentin Tarantino appear in?", "sql": "SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Quentin Tarantino' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 1995", "source_tables": ["movie_cast", "person", "movie"]}, "evidence": "released in 1995 refers to release_date LIKE '1995%'"}
{"sample_id": 453, "db_id": "movies_4", "final": {"question": "What is the title of the first crime movie ever released?", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Crime' ORDER BY T1.release_date LIMIT 1", "source_tables": ["genre", "movie_genres", "movie"]}, "evidence": "first crime movie ever released refers to min(release_date) and genre_name = 'Crime'"}
{"sample_id": 454, "db_id": "movies_4", "final": {"question": "How many horror movies are there?", "sql": "SELECT COUNT(T1.movie_id) FROM movie_genres AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.genre_id WHERE T2.genre_name = 'Horror'", "source_tables": ["genre", "movie_genres"]}, "evidence": "horror movies refers to genre_name = 'Horror'"}
{"sample_id": 455, "db_id": "movies_4", "final": {"question": "List the person IDs of the second film editors in Movie No. 12.", "sql": "SELECT person_id FROM movie_crew WHERE movie_id = 12 AND job = 'Second Film Editor'", "source_tables": ["movie_crew"]}, "evidence": "second film editors refers to job = 'Second Film Editor'; Movie No. 12 refers to movie_id = 12"}
{"sample_id": 456, "db_id": "movies_4", "final": {"question": "How many animators does Movie No. 129 have?", "sql": "SELECT COUNT(movie_id) FROM movie_crew WHERE movie_id = 129 AND job = 'Animation'", "source_tables": ["movie_crew"]}, "evidence": "animators refers to job = 'Animation'; Movie No. 129 refers to movie_id = 129"}
{"sample_id": 457, "db_id": "movies_4", "final": {"question": "In Movie No. 19, how many people are there in Department No. 7? Please give me their job.", "sql": "SELECT COUNT(DISTINCT job) FROM movie_crew WHERE movie_id = 19 AND department_id = 7", "source_tables": ["movie_crew"]}, "evidence": "Movie No. 19 refers to movie_id = 19; Department No. 7 refers to department_id = 7"}
{"sample_id": 458, "db_id": "movies_4", "final": {"question": "Write the person ID and character name of casts between order numbers 1 and 10 in Movie No. 285.", "sql": "SELECT person_id, character_name FROM movie_cast WHERE movie_id = 285 AND cast_order BETWEEN 1 AND 10", "source_tables": ["movie_cast"]}, "evidence": "casts between order numbers 1 and 10 refers to cast_order BETWEEN 2 AND 9; Movie No. 285 refers to movie_id = 285"}
{"sample_id": 459, "db_id": "movies_4", "final": {"question": "How many times did Bob Peterson appear in the movie credits?", "sql": "SELECT COUNT(T2.movie_id) FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Bob Peterson'", "source_tables": ["person", "movie_cast"]}, "evidence": ""}
{"sample_id": 460, "db_id": "movies_4", "final": {"question": "Tally the movie ID and character name in the movie starring Jim Carrey.", "sql": "SELECT T2.movie_id, T2.character_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Jim Carrey'", "source_tables": ["person", "movie_cast"]}, "evidence": ""}
{"sample_id": 461, "db_id": "movies_4", "final": {"question": "Give the names of the female cast in Movie No. 1865.", "sql": "SELECT T2.person_name FROM movie_cast AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.person_id INNER JOIN gender AS T3 ON T1.gender_id = T3.gender_id WHERE T1.movie_id = 1865 AND T3.gender = 'Female'", "source_tables": ["person", "gender", "movie_cast"]}, "evidence": "female cast refers to gender = 'Female'; name of cast refers to person_name; Movie No. 1865 refers to movie_id = 1865"}
{"sample_id": 462, "db_id": "movies_4", "final": {"question": "Write me the titles of the movies starring Jim Carrey.", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Jim Carrey'", "source_tables": ["movie_cast", "person", "movie"]}, "evidence": "Jim Carrey is the person_name;"}
{"sample_id": 463, "db_id": "movies_4", "final": {"question": "List the director's name of the movies released between 1/01/1916 and 12/31/1925.", "sql": "SELECT T2.person_name FROM movie_cast AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.person_id INNER JOIN movie AS T3 ON T1.movie_id = T3.movie_id INNER JOIN movie_crew AS T4 ON T1.movie_id = T4.movie_id WHERE T4.job = 'Director' AND T3.release_date BETWEEN '1916-01-01' AND '1925-12-31'", "source_tables": ["movie", "person", "movie_crew", "movie_cast"]}, "evidence": "director's name refers to person_name where job = 'Director'; released between 1/01/1916 and 12/31/1925 refers to release_date BETWEEN '1916-01-02' AND '1925-12-30'"}
{"sample_id": 464, "db_id": "movies_4", "final": {"question": "How many films released between 1/2/1990 and 12/30/2000 starred Uma Thurman?", "sql": "SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Uma Thurman' AND T1.release_date BETWEEN '1990-01-01' AND '2000-12-31'", "source_tables": ["movie_cast", "person", "movie"]}, "evidence": "released between 1/2/1990 and 12/30/2000 refers to release_date BETWEEN '1990-01-02' AND '2000-12-30'; film has the same meaning as movie; starred Uma Thurman refers to person_name = 'Uma Thurman'"}
{"sample_id": 465, "db_id": "movies_4", "final": {"question": "Write the titles of horror films with a vote average of more than 7.", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Horror' AND vote_average > 7", "source_tables": ["genre", "movie_genres", "movie"]}, "evidence": "horror films refers to genre_name = 'Horror'; vote average of more than 7 refers to vote_average > 7"}
{"sample_id": 466, "db_id": "movies_4", "final": {"question": "Give the genre and popularity of movies whose revenue is at least 120,000,000 between 2012 and 2015.", "sql": "SELECT T3.genre_name, T1.popularity FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.revenue > 120000000 AND T1.release_date BETWEEN '2012-01-01' AND '2015-12-31'", "source_tables": ["genre", "movie_genres", "movie"]}, "evidence": "genre refers to genre_name; revenue is at least 120,000,000 refers to revenue > = 120000000; between 2012 and 2015 refers to release_date BETWEEN '2012-01-01' AND '2015-12-31'"}
{"sample_id": 467, "db_id": "movies_4", "final": {"question": "How many Indian movies between 1/2/1990 and 12/30/2003 have revenue of more than 75,000,000 and popularity of no less than 20?", "sql": "SELECT COUNT(T2.movie_id) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id WHERE T1.revenue > 75000000 AND T1.popularity >= 20 AND T1.release_date BETWEEN '1990-01-01' AND '2003-12-31'", "source_tables": ["production_country", "movie"]}, "evidence": "Indian movies refers to country_name = 'India'; between 1/2/1990 and 12/30/2003 refers to release_date BETWEEN '1990-01-02' AND '2003-12-30'; revenue of more than 75,000,000 refers to revenue > 75000000; popularity of no less than 20 refers to popularity > = 20"}
{"sample_id": 468, "db_id": "movies_4", "final": {"question": "What is the title of the highest-budget film to date? Please include the revenue and name the country.", "sql": "SELECT T1.title, T1.revenue, T3.COUNTry_name FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id ORDER BY T1.budget DESC LIMIT 1", "source_tables": ["country", "production_country", "movie"]}, "evidence": "highest-budget film refers to max(budget); name the country refers to country_name"}
{"sample_id": 469, "db_id": "movies_4", "final": {"question": "List the title of movies in Latin released between 1/01/1990 and 12/31/1995.", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Latin' AND T1.release_date BETWEEN '1990-01-01' AND '1995-12-31'", "source_tables": ["movie_languages", "language", "movie"]}, "evidence": "movies in Latin refers to language_name = 'Latin'; released between 1/01/1990 and 12/31/1995 refers to release_date BETWEEN '1990-01-01' AND '1995-12-31'"}
{"sample_id": 470, "db_id": "movies_4", "final": {"question": "What is the average revenue of American movies in 2006?", "sql": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'United States of America' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2006", "source_tables": ["country", "production_country", "movie"]}, "evidence": "American movies refers to country_name = 'United States of America'; in 2006 refers to release_date LIKE '2006%'; average revenue = AVG(revenue)"}
{"sample_id": 471, "db_id": "movies_4", "final": {"question": "Calculate the 2016 gap between the average revenue for Indian and American films.", "sql": "SELECT AVG(CASE WHEN T3.COUNTry_name = 'United States of America' THEN T1.revenue END) - AVG(CASE WHEN T3.COUNTry_name = 'India' THEN T1.revenue END) AS CALCULATE FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2016", "source_tables": ["country", "production_country", "movie"]}, "evidence": "2016 refers to release_date LIKE '2016%'; Indian and American films refers to country_name = 'India' and country_name = 'United States of America'; gap between the average revenue refers to subtract(divide(sum(revenue), count(movie_id)) when country_name = 'United States of America', divide(sum(revenue), count(movie_id)) when country_name = 'India')"}
{"sample_id": 472, "db_id": "movies_4", "final": {"question": "What is the percentage of romance films among films produced in India in 2015?", "sql": "SELECT CAST(COUNT(CASE WHEN T4.genre_name = 'Romance' THEN T1.movie_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_COUNTry AS T3 ON T1.movie_id = T3.movie_id INNER JOIN genre AS T4 ON T2.genre_id = T4.genre_id INNER JOIN COUNTry AS T5 ON T3.COUNTry_id = T5.COUNTry_id WHERE T5.COUNTry_name = 'India' AND T1.release_date BETWEEN '2015-01-01' AND '2015-12-31'", "source_tables": ["movie", "genre", "movie_genres", "country", "production_country"]}, "evidence": "romance films refers to genre_name = 'Romance'; in India refers to country_name = 'India'; 2015 refers to release_date BETWEEN '2015-01-01' AND '2015-01-31'; percentage = divide(sum(movie_id) when genre_name = 'Romance', count(movie_id)) as percentage"}
{"sample_id": 473, "db_id": "movies_4", "final": {"question": "Which actor plays Optimus Prime?", "sql": "SELECT DISTINCT T1.person_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T2.character_name = 'Optimus Prime (voice)'", "source_tables": ["person", "movie_cast"]}, "evidence": "Which actor refers to person_name; Optimus Prime refers to character_name = 'Optimus Prime (voice)'"}
{"sample_id": 474, "db_id": "movies_4", "final": {"question": "What is the gender of the character 'USAF Master Sgt. Epps?'", "sql": "SELECT T2.gender FROM movie_cast AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.gender_id WHERE T1.character_name = 'USAF Master Sgt. Epps'", "source_tables": ["gender", "movie_cast"]}, "evidence": "character 'USAF Master Sgt. Epps' refers to character_name = 'USAF Master Sgt. Epps'"}
{"sample_id": 475, "db_id": "movies_4", "final": {"question": "List all companies who worked in the movie 'Ultramarines: A Warhammer 40,000 Movie.'", "sql": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Ultramarines: A Warhammer 40,000 Movie'", "source_tables": ["movie_company", "production_company", "movie"]}, "evidence": "all companies refers to company_name; movie 'Ultramarines: A Warhammer 40,000 Movie' refers to title = 'Ultramarines: A Warhammer 40,000 Movie'"}
{"sample_id": 476, "db_id": "movies_4", "final": {"question": "Which movie did the company 'Radiant Film GmbH' work on?", "sql": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Radiant Film GmbH'", "source_tables": ["movie_company", "production_company", "movie"]}, "evidence": "Which movie refers to title; company 'Radiant Film GmbH' refers to company_name = 'Radiant Film GmbH'"}
{"sample_id": 477, "db_id": "movies_4", "final": {"question": "What are the genres of Sky Captain and the World of Tomorrow?", "sql": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.title = 'Sky Captain and the World of Tomorrow'", "source_tables": ["genre", "movie_genres", "movie"]}, "evidence": "genres refers to genre_name; Sky Captain and the World of Tomorrow refers to title = 'Sky Captain and the World of Tomorrow'"}
{"sample_id": 478, "db_id": "movies_4", "final": {"question": "Write all the keywords belonging to the movie 'Sky Captain and the World of Tomorrow.'", "sql": "SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.title = 'Sky Captain and the World of Tomorrow'", "source_tables": ["movie_keywords", "keyword", "movie"]}, "evidence": "keywords refers to keyword_name; movie 'Sky Captain and the World of Tomorrow' refers to title = 'Sky Captain and the World of Tomorrow'"}
{"sample_id": 479, "db_id": "movies_4", "final": {"question": "The movie 'Gojira ni-sen mireniamu' is from which country?", "sql": "SELECT T3.COUNTry_name FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T1.title = 'Gojira ni-sen mireniamu'", "source_tables": ["country", "production_country", "movie"]}, "evidence": "movie 'Gojira ni-sen mireniamu' refers to title = 'Gojira ni-sen mireniamu'; which country refers to country_name"}
{"sample_id": 480, "db_id": "movies_4", "final": {"question": "Which movie has the keyword 'extremis?'", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'extremis'", "source_tables": ["movie_keywords", "keyword", "movie"]}, "evidence": "Which movie refers to title; keyword 'extremis' refers to keyword_name = 'extremis'"}
{"sample_id": 481, "db_id": "movies_4", "final": {"question": "List 10 movie titles that were produced in France.", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'France' LIMIT 10", "source_tables": ["country", "production_country", "movie"]}, "evidence": "France refers to country_name = 'France'"}
{"sample_id": 482, "db_id": "movies_4", "final": {"question": "Who is the director for the movie 'Transformers?'", "sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Transformers' AND T2.job = 'Director'", "source_tables": ["person", "movie_crew", "movie"]}, "evidence": "the director refers to person_name where job = 'Director'; movie 'Transformers' refers to title = 'Transformers'"}
{"sample_id": 483, "db_id": "movies_4", "final": {"question": "List 10 crews alongside their jobs who worked on the movie 'Mad Max: Fury Road.'", "sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Mad Max: Fury Road' LIMIT 10", "source_tables": ["person", "movie_crew", "movie"]}, "evidence": "crews refers to person_name; movie 'Mad Max: Fury Road' refers to title = 'Mad Max: Fury Road'"}
{"sample_id": 484, "db_id": "movies_4", "final": {"question": "What percentage of movies that came from Japan belong in the 'animation' genre?", "sql": "SELECT CAST(COUNT(CASE WHEN T4.genre_name = 'Animation' THEN T1.movie_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_COUNTry AS T3 ON T1.movie_id = T3.movie_id INNER JOIN genre AS T4 ON T2.genre_id = T4.genre_id INNER JOIN COUNTry AS T5 ON T3.COUNTry_id = T5.COUNTry_id WHERE T5.COUNTry_name = 'Japan'", "source_tables": ["movie", "genre", "movie_genres", "country", "production_country"]}, "evidence": "from Japan refers to country_name = 'Japan'; in the 'animation' genre refers to genre_name = 'animation'; percentage = divide(sum(movie_id) when genre_name = 'animation', count(movie_id)) as percentage"}
{"sample_id": 485, "db_id": "movies_4", "final": {"question": "What is the ratio between male and female cast members of the movie 'Iron Man?' Count how many have unspecified genders.", "sql": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Male' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS RATIO , COUNT(CASE WHEN T3.gender = 'Unspecified' THEN 1 ELSE NULL END) AS UNGENDERS FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Iron Man'", "source_tables": ["movie_cast", "gender", "movie"]}, "evidence": "male refers to gender = 'Male'; female refers to gender = 'Female'; movie 'Iron Man' refers to title = 'Iron Man'; ratio = divide(sum(gender = 'Female'), sum(gender = 'Male'))"}
{"sample_id": 486, "db_id": "movies_4", "final": {"question": "List down five movie titles that were released before 2000.", "sql": "SELECT title FROM movie WHERE CAST(STRFTIME('%Y', release_date) AS INT) < 2000 LIMIT 5", "source_tables": ["movie"]}, "evidence": "released before 2000 refers to release_date < '2000-01-01'"}
{"sample_id": 487, "db_id": "movies_4", "final": {"question": "What is the keyword ID of the movie with the title of \"Sin City\"?", "sql": "SELECT T2.keyword_id FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Sin City'", "source_tables": ["movie_keywords", "movie"]}, "evidence": "title of \"Sin City\" refers to title = 'Sin City'"}
{"sample_id": 488, "db_id": "movies_4", "final": {"question": "Look for the movie title with the keyword of \"angel\".", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'angel'", "source_tables": ["movie_keywords", "keyword", "movie"]}, "evidence": "keyword of \"angel\" refers to keyword_name = 'angel'"}
{"sample_id": 489, "db_id": "movies_4", "final": {"question": "Which keywords belong to the movie titles with the highest popularity?", "sql": "SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id ORDER BY T1.popularity DESC LIMIT 1", "source_tables": ["movie_keywords", "keyword", "movie"]}, "evidence": "Which keywords refers to keyword_name; highest popularity refers to max(popularity)"}
{"sample_id": 490, "db_id": "movies_4", "final": {"question": "Provide the genre ID of the movie with the title of \"The Dark Knight\".", "sql": "SELECT T2.genre_id FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'The Dark Knight'", "source_tables": ["movie_genres", "movie"]}, "evidence": "movie with the title of \"The Dark Knight\" refers to title = 'The Dark Knight'"}
{"sample_id": 491, "db_id": "movies_4", "final": {"question": "List down the movie titles within the genre of thriller.", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Thriller'", "source_tables": ["genre", "movie_genres", "movie"]}, "evidence": "genre of thriller refers to genre_name = 'Thriller'"}
{"sample_id": 492, "db_id": "movies_4", "final": {"question": "Write down five rumoured movie titles within the genre of Drama.", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.movie_status = 'Rumored' AND T3.genre_name = 'Drama' LIMIT 5", "source_tables": ["genre", "movie_genres", "movie"]}, "evidence": "rumoured movie refers to movie_status = 'rumoured'; genre of Drama refers to genre_name = 'Drama'"}
{"sample_id": 493, "db_id": "movies_4", "final": {"question": "What is the genre of the movie title with the lowest revenue generated?", "sql": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id ORDER BY T1.revenue LIMIT 1", "source_tables": ["genre", "movie_genres", "movie"]}, "evidence": "genre refers to genre_name; lowest revenue refers to min(revenue)"}
{"sample_id": 494, "db_id": "movies_4", "final": {"question": "State the genre of the movie title with a runtime of only 14 minutes.", "sql": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.runtime = 14", "source_tables": ["genre", "movie_genres", "movie"]}, "evidence": "genre refers to genre_name; runtime of only 14 minutes refers to runtime = 14"}
{"sample_id": 495, "db_id": "movies_4", "final": {"question": "What is the genre of the movie title which was well-received by the audiences but made the lowest revenue?", "sql": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id ORDER BY T1.vote_average DESC, T1.revenue LIMIT 1", "source_tables": ["genre", "movie_genres", "movie"]}, "evidence": "genre refers to genre_name; well-received by the audiences refers to max(vote_average); lowest revenue refers to min(revenue)"}
{"sample_id": 496, "db_id": "movies_4", "final": {"question": "Provide the genre of a movie title with a tagline of \"A long time ago in a galaxy far, far away\u2026\".", "sql": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T3.genre_id = T2.genre_id WHERE T1.tagline = 'A long time ago in a galaxy far, far away...'", "source_tables": ["genre", "movie_genres", "movie"]}, "evidence": "genre refers to genre_name; tagline of \"A long time ago in a galaxy far, far away\u2026\" refers to tagline = 'A long time ago in a galaxy far, far away\u2026'"}
{"sample_id": 497, "db_id": "movies_4", "final": {"question": "What is the country ID of the movie with the title of \"Pirates of the Caribbean: Dead Man's Chest\"?", "sql": "SELECT T2.COUNTry_id FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title LIKE 'Pirates of the Caribbean: Dead Man%s Chest'", "source_tables": ["production_country", "movie"]}, "evidence": "title of \"Pirates of the Caribbean: Dead Man's Chest\" refers to title = 'Pirates of the Caribbean: Dead Man''s Chest'"}
{"sample_id": 498, "db_id": "movies_4", "final": {"question": "List down the movie titles that were produced in Canada.", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'Canada'", "source_tables": ["country", "production_country", "movie"]}, "evidence": "produced in Canada refers to country_name = 'Canada'"}
{"sample_id": 499, "db_id": "movies_4", "final": {"question": "Accumulate the budget of the movie titles with the keyword of \"video game\".", "sql": "SELECT SUM(T1.budget) FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'video game'", "source_tables": ["movie_keywords", "keyword", "movie"]}, "evidence": "keyword of \"video game\" refers to keyword_name = 'video game'"}
{"sample_id": 500, "db_id": "movies_4", "final": {"question": "For movies with the keyword of \"civil war\", calculate the average revenue generated by these movies.", "sql": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'civil war'", "source_tables": ["movie_keywords", "keyword", "movie"]}, "evidence": "keyword of \"civil war\" refers to keyword_name = 'civil war'; average revenue = AVG(revenue)"}
{"sample_id": 501, "db_id": "movies_4", "final": {"question": "Find out the popularity of the movies with the highest vote count.", "sql": "SELECT popularity FROM movie ORDER BY vote_COUNT DESC LIMIT 1", "source_tables": ["movie"]}, "evidence": "highest vote count refers to max(vote_count)"}
{"sample_id": 566, "db_id": "codebase_comments", "final": {"question": "How many English language codes whose comments for the method are in the XML format?", "sql": "SELECT COUNT(Lang) FROM Method WHERE Lang = 'en' AND CommentIsXml = 1", "source_tables": ["method"]}, "evidence": "English language refers to Lang = 'en'; the comments for this method is XML format refers to CommentIsXml = 1;"}
{"sample_id": 567, "db_id": "codebase_comments", "final": {"question": "What is the task of the method whose tokenized name is \"online median filter test median window filling\"?", "sql": "SELECT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE NameTokenized = 'online median filter test median window filling'", "source_tables": ["method"]}, "evidence": "tokenized name refers to NameTokenized; task of the method refers to the second part of name deliminated by \".\"; for example, the task of 'LinqToDelicious.HttpWebRequestFactory.Create' is 'HttpWebRequestFactory'"}
{"sample_id": 568, "db_id": "codebase_comments", "final": {"question": "What is the time of sampling of the solution with the highest sampling time? Indicate the id number of the solution.", "sql": "SELECT DISTINCT SampledAt, SolutionId FROM Method WHERE SampledAt = ( SELECT MAX(SampledAt) FROM Method )", "source_tables": ["method"]}, "evidence": "highest sampling time refers to max(SampledAt); id number of the solution refers to SolutionId;"}
{"sample_id": 569, "db_id": "codebase_comments", "final": {"question": "How many followers do the most followed repository on Github have? Give the github address of the repository.", "sql": "SELECT Forks, Url FROM Repo WHERE Forks = ( SELECT MAX(Forks) FROM Repo )", "source_tables": ["repo"]}, "evidence": "more forks refers to more people follow this repository; most followed repository refers to max(Forks);\u00a0 the github address of the repository refers to Url;"}
{"sample_id": 570, "db_id": "codebase_comments", "final": {"question": "What is the id of the repository with the highest number of solution path?", "sql": "SELECT RepoId FROM solution GROUP BY RepoId ORDER BY COUNT(Path) DESC LIMIT 1", "source_tables": ["solution"]}, "evidence": "highest number of solution path refers to max(count(Path)); id of the repository refers to RepoId"}
{"sample_id": 571, "db_id": "codebase_comments", "final": {"question": "What is the most liked repository? Indicate its github address and the amount of stars it has received.", "sql": "SELECT Url, Stars FROM Repo WHERE Stars = ( SELECT MAX(Stars) FROM Repo )", "source_tables": ["repo"]}, "evidence": "more stars mean more people like this repository; most liked refers to max(Stars); the github address of repository refers to Url;"}
{"sample_id": 572, "db_id": "codebase_comments", "final": {"question": "What is the name of the solution path with the highest processed time?", "sql": "SELECT Path FROM Solution WHERE ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Solution )", "source_tables": ["solution"]}, "evidence": "highest processed time refers to max(ProcessedTime);"}
{"sample_id": 573, "db_id": "codebase_comments", "final": {"question": "How much is the processed time of downloading the most popular repository?", "sql": "SELECT ProcessedTime FROM Repo WHERE Watchers = ( SELECT MAX(Watchers) FROM Repo )", "source_tables": ["repo"]}, "evidence": "more watchers mean that this repository is more popular;"}
{"sample_id": 574, "db_id": "codebase_comments", "final": {"question": "What is the github address of the \"nofear_Mara\\Mara.sln\" solution path?", "sql": "SELECT Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE Path = 'nofear_MaraMara.sln'", "source_tables": ["solution", "repo"]}, "evidence": "github address of repository refers to Url;"}
{"sample_id": 575, "db_id": "codebase_comments", "final": {"question": "Which repository has the longest amount of processed time of downloading? Indicate whether the solution paths in the repository can be implemented without needs of compilation.", "sql": "SELECT DISTINCT T1.id, T2.WasCompiled FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Repo )", "source_tables": ["solution", "repo"]}, "evidence": "longest amount of processed time refers to max(ProcessedTime); the repository can be implemented without needs of compilation refers to WasCompiled = 1;"}
{"sample_id": 576, "db_id": "codebase_comments", "final": {"question": "What is the tokenized name of the solution whose path is \"maravillas_linq-to-delicious\\tasty.sln\"?", "sql": "SELECT DISTINCT T2.NameTokenized FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'maravillas_linq-to-delicious'", "source_tables": ["solution", "method"]}, "evidence": "tokenized name refers to NameTokenized"}
{"sample_id": 577, "db_id": "codebase_comments", "final": {"question": "Among the repositories whose number of stars received are between 6,000 to 9,000, which repository has the highest number of solution paths and many of those solution paths needs to be compiled if user wants to implement it?", "sql": "SELECT T2.RepoId, COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars BETWEEN 6000 AND 9000 AND T2.WasCompiled = 0 GROUP BY T2.RepoId ORDER BY COUNT(T2.RepoId) DESC LIMIT 1", "source_tables": ["solution", "repo"]}, "evidence": "Stars between 6,000 to 9,000; highest number of solution paths refers to max(count(Path)); needs to be compiled if user wants to implement it refers to WasCompiled = 0;"}
{"sample_id": 578, "db_id": "codebase_comments", "final": {"question": "In the \"https://github.com/wallerdev/htmlsharp.git\", give all the linearized sequenced of API calls.", "sql": "SELECT T3.ApiCalls FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T1.Url = 'https://github.com/wallerdev/htmlsharp.git'", "source_tables": ["solution", "method", "repo"]}, "evidence": "linearized sequenced of API calls refers to ApiCalls; 'https://github.com/wallerdev/htmlsharp.git' is url of repository"}
{"sample_id": 579, "db_id": "codebase_comments", "final": {"question": "How many solution paths are there inside the 2nd most popular repository?", "sql": "SELECT COUNT(DISTINCT T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = ( SELECT Watchers FROM Repo ORDER BY Watchers DESC LIMIT 1, 1 )", "source_tables": ["solution", "repo"]}, "evidence": "more watchers mean that this repository is more popular; most popular repository refers to max(Watchers);"}
{"sample_id": 580, "db_id": "codebase_comments", "final": {"question": "What is the average processed time of the solution paths inside the \"https://github.com/zphingphong/DiscardCustomerApp.git\"?", "sql": "SELECT CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/zphingphong/DiscardCustomerApp.git'", "source_tables": ["solution", "repo"]}, "evidence": "average processed time = avg(Solution.ProcessedTime);"}
{"sample_id": 581, "db_id": "codebase_comments", "final": {"question": "What is the full comment on the method whose solution path is \"bmatzelle_nini\\Source\\Nini.sln\" with a tokenized name of \"alias text add alias\"?", "sql": "SELECT T2.FullComment FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'bmatzelle_niniSourceNini.sln' AND T2.NameTokenized = 'alias text add alias'", "source_tables": ["solution", "method"]}, "evidence": ""}
{"sample_id": 582, "db_id": "codebase_comments", "final": {"question": "What is the linearized sequenced of API calls of the method whose solution path is \"mauriciodeamorim_tdd.encontro2\\Tdd.Encontro2.sln\"?", "sql": "SELECT T2.ApiCalls FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'mauriciodeamorim_tdd.encontro2Tdd.Encontro2.sln'", "source_tables": ["solution", "method"]}, "evidence": "linearized sequenced of API calls refers to ApiCalls;"}
{"sample_id": 583, "db_id": "codebase_comments", "final": {"question": "How many solution paths that needs to be compiled if user wants to implement it in \"https://github.com/jeffdik/tachy.git\"?", "sql": "SELECT COUNT(T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/jeffdik/tachy.git' AND T2.WasCompiled = 0", "source_tables": ["solution", "repo"]}, "evidence": "needs to be compiled if user wants to implement refers to WasCompiled = 0; https://github.com/jeffdik/tachy.git is url of repository"}
{"sample_id": 584, "db_id": "codebase_comments", "final": {"question": "How much is the processed time of the method whose tokenized name is \"about box1 dispose\"? Indicate the language of the method.", "sql": "SELECT DISTINCT T1.ProcessedTime, T2.Lang FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'about box1 dispose'", "source_tables": ["solution", "method"]}, "evidence": "language refers to Lang;"}
{"sample_id": 585, "db_id": "codebase_comments", "final": {"question": "In \"maxild_playground\\Playground.sln\", what is the time of sampling for the method \"GitHubRepo.Cli.GitHubClientWrapper.GetReleases\"?", "sql": "SELECT T2.SampledAt FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'maxild_playgroundPlayground.sln' AND T2.Name = 'GitHubRepo.Cli.GitHubClientWrapper.GetReleases'", "source_tables": ["solution", "method"]}, "evidence": "the time of sampling refers to SampledAt; 'maxild_playground\\Playground.sln' is the path of a solution"}
{"sample_id": 586, "db_id": "codebase_comments", "final": {"question": "What is the language of the method used in the solution path \"opendns_diagnosticapp\\windows\\OpenDnsDiagnostic.sln\"?", "sql": "SELECT T2.Lang FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'opendns_diagnosticappwindowsOpenDnsDiagnostic.sln'", "source_tables": ["solution", "method"]}, "evidence": "language refers to Lang;"}
{"sample_id": 587, "db_id": "codebase_comments", "final": {"question": "What's the task of the method whose tokenized name is \"html parser feed\"?", "sql": "SELECT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE NameTokenized = 'html parser feed'", "source_tables": ["method"]}, "evidence": "tokenized name refers to NameTokenized; task of the method refers to the second part of name deliminated by \".\"; for example, the task of 'LinqToDelicious.HttpWebRequestFactory.Create' is 'HttpWebRequestFactory'"}
{"sample_id": 588, "db_id": "codebase_comments", "final": {"question": "Are the comments for the method \"HtmlSharp.HtmlParser.Feed\" in XML format?", "sql": "SELECT CASE WHEN CommentIsXml = 0 THEN 'No' WHEN CommentIsXml = 1 THEN 'Yes' END isXMLFormat FROM Method WHERE Name = 'HtmlSharp.HtmlParser.Feed'", "source_tables": ["method"]}, "evidence": "the comment for this method is not XML refers to CommentsXML = 0; the comments for this method is XML refers to CommentsXML = 1"}
{"sample_id": 589, "db_id": "codebase_comments", "final": {"question": "Which method has the summary \"Write a command to the log\"?", "sql": "SELECT Name FROM Method WHERE Summary = 'Write a command to the log'", "source_tables": ["method"]}, "evidence": ""}
{"sample_id": 590, "db_id": "codebase_comments", "final": {"question": "How many solutions contain files found within the repository most people like?", "sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = ( SELECT MAX(Stars) FROM Repo )", "source_tables": ["solution", "repo"]}, "evidence": "more stars mean more people like this repository; most people like refers to max(Stars);"}
{"sample_id": 591, "db_id": "codebase_comments", "final": {"question": "Please list the path of the solution that contains files found within the repository most people like.", "sql": "SELECT DISTINCT T2.Path FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = ( SELECT MAX(Stars) FROM Repo )", "source_tables": ["solution", "repo"]}, "evidence": "more stars mean more people like this repository; most people like refers to max(Stars);"}
{"sample_id": 592, "db_id": "codebase_comments", "final": {"question": "What is the github address of the repository that contains files used by solution ID12?", "sql": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 12", "source_tables": ["solution", "repo"]}, "evidence": "github address refers to Url;"}
{"sample_id": 593, "db_id": "codebase_comments", "final": {"question": "Among the solutions that contain files within the repository followed by over 1000 people, how many of them can be\nimplemented without needs of compilation?", "sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks > 1000 AND T2.WasCompiled = 1", "source_tables": ["solution", "repo"]}, "evidence": "followed by over 1000 people refers to Forks >1000; can be\nimplemented without needs of compilation refers to WasCompiled = 1;"}
{"sample_id": 594, "db_id": "codebase_comments", "final": {"question": "Which solution contains files within a more popular repository, the solution ID18 or solution ID19?", "sql": "SELECT CASE WHEN SUM(CASE WHEN T2.Id = 18 THEN T1.Watchers ELSE 0 END) > SUM(CASE WHEN T2.Id = 19 THEN T1.Watchers ELSE 0 END) THEN 'SolutionID18' WHEN SUM(CASE WHEN T2.Id = 18 THEN T1.Watchers ELSE 0 END) < SUM(CASE WHEN T2.Id = 19 THEN T1.Watchers ELSE 0 END) THEN 'SolutionID19' END isMorePopular FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId", "source_tables": ["solution", "repo"]}, "evidence": "more watchers mean that this repository is more popular;"}
{"sample_id": 595, "db_id": "codebase_comments", "final": {"question": "Among the solutions that contain files within the repository needing the longest processed time to download, how many of them doesn't need to be\ncompiled if user wants to implement it?", "sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Repo ) AND T2.WasCompiled = 1", "source_tables": ["solution", "repo"]}, "evidence": "longest processed time refers to max(Solution.ProcessedTime); needs to be compiled if user wants to implement it refers to WasCompiled = 0\uff1b"}
{"sample_id": 596, "db_id": "codebase_comments", "final": {"question": "What is the processed time to download the repository whose files are contained in the solution with the path \"jeffdik_tachy\\src\\Tachy.sln\".", "sql": "SELECT DISTINCT T2.ProcessedTime FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'jeffdik_tachysrcTachy.sln'", "source_tables": ["solution", "repo"]}, "evidence": ""}
{"sample_id": 597, "db_id": "codebase_comments", "final": {"question": "Please give the url of the repository whose files are contained in solution ID 9?", "sql": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 9", "source_tables": ["solution", "repo"]}, "evidence": ""}
{"sample_id": 598, "db_id": "codebase_comments", "final": {"question": "Please list all the paths of the solutions containing files within the repository whose url is \"https://github.com/maxild/playground.git\".", "sql": "SELECT T2.Path FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/maxild/playground.git'", "source_tables": ["solution", "repo"]}, "evidence": ""}
{"sample_id": 599, "db_id": "codebase_comments", "final": {"question": "Among the repositories with over 200 likes, how many of them have files contained by solutions with a processed time of under 636439500080712000?", "sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.ProcessedTime < 636439500080712000 AND T1.Stars > 200", "source_tables": ["solution", "repo"]}, "evidence": "over 200 likes refers to Stars > 200; ProcessedTime<636439500080712000;"}
{"sample_id": 600, "db_id": "codebase_comments", "final": {"question": "Please list the IDs of the solutions that contain files within the top 3 followed repositories.", "sql": "SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId ORDER BY T1.Forks DESC LIMIT 3", "source_tables": ["solution", "repo"]}, "evidence": "more forks refers to more people follow this repository;"}
{"sample_id": 601, "db_id": "codebase_comments", "final": {"question": "What is the average time needed for the solutions containing files within the repository whose url is \"https://github.com/jeffdik/tachy.git\" to be processd?", "sql": "SELECT CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/jeffdik/tachy.git'", "source_tables": ["solution", "repo"]}, "evidence": "average time = avg(ProcessedTime)\uff1b"}
{"sample_id": 602, "db_id": "codebase_comments", "final": {"question": "How many more followers in percentage are there for the repository used by solution ID 18 than solution ID19?", "sql": "SELECT CAST((SUM(CASE WHEN T2.Id = 18 THEN T1.Forks ELSE 0 END) - SUM(CASE WHEN T2.Id = 19 THEN T1.Forks ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 19 THEN T1.Forks ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId", "source_tables": ["solution", "repo"]}, "evidence": "followers refers to Forks; percentage = divide(SUBTRACT(Forks(Solution.ID = 18), Forks(Solution.ID = 19)), Forks(Solution.ID = 19))*100%"}
{"sample_id": 603, "db_id": "codebase_comments", "final": {"question": "What is the language of the method ''PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn\"?", "sql": "SELECT Lang FROM Method WHERE Name = 'PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn'", "source_tables": ["method"]}, "evidence": "language refers to Lang\uff1b"}
{"sample_id": 604, "db_id": "codebase_comments", "final": {"question": "Show the full Comment of the method \"DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows\".", "sql": "SELECT FullComment FROM Method WHERE Name = 'DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows'", "source_tables": ["method"]}, "evidence": ""}
{"sample_id": 605, "db_id": "codebase_comments", "final": {"question": "List the summary of the method \"Castle.MonoRail.Framework.Test.StubViewComponentContext.RenderSection\".", "sql": "SELECT DISTINCT Summary FROM Method WHERE Name = 'Castle.MonoRail.Framework.Test.StubViewComponentContext.RenderSection'", "source_tables": ["method"]}, "evidence": ""}
{"sample_id": 606, "db_id": "codebase_comments", "final": {"question": "Give the tokenized name for the method \"Supay.Irc.Messages.KnockMessage.GetTokens\".", "sql": "SELECT NameTokenized FROM Method WHERE Name = 'Supay.Irc.Messages.KnockMessage.GetTokens'", "source_tables": ["method"]}, "evidence": ""}
{"sample_id": 607, "db_id": "codebase_comments", "final": {"question": "How many stars does the repository of the solution No. 45997 have?", "sql": "SELECT T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 45997", "source_tables": ["solution", "repo"]}, "evidence": "repository of solution no. refers to Id"}
{"sample_id": 608, "db_id": "codebase_comments", "final": {"question": "For the repository which got '8094' Stars, how many solutions does it contain?", "sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 8094", "source_tables": ["solution", "repo"]}, "evidence": "repository refers to Repo.Id;"}
{"sample_id": 609, "db_id": "codebase_comments", "final": {"question": "What is the solution path for the method \"IQ.Data.DbQueryProvider.CanBeEvaluatedLocally\"?", "sql": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'IQ.Data.DbQueryProvider.CanBeEvaluatedLocally'", "source_tables": ["solution", "method"]}, "evidence": "solution path refers to Path; method refers to Name; Name = 'IQ.Data.DbQueryProvider.CanBeEvaluatedLocally'"}
{"sample_id": 610, "db_id": "codebase_comments", "final": {"question": "For the method which got the tokenized name as 'interp parser expr', what is the processed time for its solution?", "sql": "SELECT T1.ProcessedTime FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'interp parser expr'", "source_tables": ["solution", "method"]}, "evidence": "tokenized name refers to NameTokenized; NameTokenized = 'interp parser expr'; processed time for its solution refers to ProcessedTime;"}
{"sample_id": 611, "db_id": "codebase_comments", "final": {"question": "What is the repository number for the solution of method \"SCore.Poisson.ngtIndex\"?", "sql": "SELECT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'SCore.Poisson.ngtIndex'", "source_tables": ["solution", "method"]}, "evidence": "repository number refers to RepoId; method refers to Name; Name = \u2018SCore.Poisson.ngtIndex\u2019"}
{"sample_id": 612, "db_id": "codebase_comments", "final": {"question": "Tell the path of the solution for the method \"ExportToRTF.RTFStyleSheet.H6Write\".", "sql": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'ExportToRTF.RTFStyleSheet.H6Write'", "source_tables": ["solution", "method"]}, "evidence": "path of the solution refers to Path; method refers to Name; Name = 'ExportToRTF.RTFStyleSheet.H6Write';"}
{"sample_id": 613, "db_id": "codebase_comments", "final": {"question": "For the repository with '8094' watchers , how many solutions does it contain?", "sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = 8094", "source_tables": ["solution", "repo"]}, "evidence": "repository refers to Repo.Id and RepoId; solutions a repository contains refers to Solution.Id;"}
{"sample_id": 614, "db_id": "codebase_comments", "final": {"question": "Give the repository Url of the one with most solutions.", "sql": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId GROUP BY T2.RepoId ORDER BY COUNT(T2.RepoId) DESC LIMIT 1", "source_tables": ["solution", "repo"]}, "evidence": "repository URL refers to Url; repository Url with most solutions refers to MAX(COUNT(Solution.Id));"}
{"sample_id": 615, "db_id": "codebase_comments", "final": {"question": "How many solutions does the repository which has 1445 Forks contain?", "sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks = 1445", "source_tables": ["solution", "repo"]}, "evidence": "solutions refers to Solution.Id; repository refers to Repository.Id;"}
{"sample_id": 616, "db_id": "codebase_comments", "final": {"question": "Among all the solution of the 'zh-cn' methods, which path is most often used?", "sql": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'zh-cn' GROUP BY T1.Path ORDER BY COUNT(T1.Path) DESC LIMIT 1", "source_tables": ["solution", "method"]}, "evidence": "solution refers to SolutionId; zh-cn refers to Lang = 'zh-cn'; path that is most often used refers to MAX(COUNT(Path));"}
{"sample_id": 617, "db_id": "codebase_comments", "final": {"question": "Give the number of watchers that the repository of the solution No. 338082 have.", "sql": "SELECT T1.Watchers FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 338082", "source_tables": ["solution", "repo"]}, "evidence": "number of watchers refers to Watchers; solution number refers to Solution.Id;"}
{"sample_id": 618, "db_id": "codebase_comments", "final": {"question": "For the repository which got '189' Stars, how many solutions which needs to be compiled does it contain?", "sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 189 AND T2.WasCompiled = 0", "source_tables": ["solution", "repo"]}, "evidence": "repository refers to Repository.Id; solution needs to be compiled refers to WasCompiled = 0;"}
{"sample_id": 619, "db_id": "codebase_comments", "final": {"question": "Show the solution path for the method \"Mosa.Platform.x86.Instructions.IMul.EmitLegacy\"?", "sql": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'Mosa.Platform.x86.Instructions.IMul.EmitLegacy'", "source_tables": ["solution", "method"]}, "evidence": "solution path refers to Path; method refers to Name; Name = 'Mosa.Platform.x86.Instructions.IMul.EmitLegacy';"}
{"sample_id": 620, "db_id": "codebase_comments", "final": {"question": "For the method which got the tokenized name as 't jadwal entity get single mpic', what is the path time for its solution?", "sql": "SELECT DISTINCT T1.ProcessedTime FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 't jadwal entity get single mpic'", "source_tables": ["solution", "method"]}, "evidence": "tokenized name refers to NameTokenized; NameTokenized = 't jadwal entity get single mpic'; path time for its solution refers to ProcessedTime;"}
{"sample_id": 621, "db_id": "codebase_comments", "final": {"question": "Give the repository ID for the solution of method \"Kalibrasi.Data.EntityClasses.THistoryJadwalEntity.GetSingleTjadwal\".", "sql": "SELECT DISTINCT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'Kalibrasi.Data.EntityClasses.THistoryJadwalEntity.GetSingleTjadwal'", "source_tables": ["solution", "method"]}, "evidence": "repository ID refers to RepoID; method refers to Name; Name = 'Kalibrasi.Data.EntityClasses.THistoryJadwalEntity.GetSingleTjadwal';"}
{"sample_id": 623, "db_id": "codebase_comments", "final": {"question": "Give the number of solutions that the repository which has 3060 Stars contains.", "sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 3060", "source_tables": ["solution", "repo"]}, "evidence": "solutions refers to Solution.Id; repository refers to Repository.Id;"}
{"sample_id": 624, "db_id": "codebase_comments", "final": {"question": "For the solution of the most 'sw' methods, what is its path?", "sql": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'sw'", "source_tables": ["solution", "method"]}, "evidence": "solution refers to SolutionId; sw refers to Lang = 'sw'; solution with the most 'sw' methods refers to MAX(COUNT(Lang = 'sw'));"}
{"sample_id": 625, "db_id": "codebase_comments", "final": {"question": "How many percent more of the watchers for the repository of solution No.83855 than No.1502?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Id = 83855 THEN T1.Watchers ELSE 0 END) - SUM(CASE WHEN T2.Id = 1502 THEN T1.Watchers ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 1502 THEN T1.Watchers ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId", "source_tables": ["solution", "repo"]}, "evidence": "solution No. refers to Solution.Id; percentage = DIVIDE(MULTIPLY(SUBTRACT(SUM(Solution.Id = 83855), SUM(Solution.Id = 1502)), 100)), SUM(Soltution.Id = 1502);"}
{"sample_id": 626, "db_id": "codebase_comments", "final": {"question": "How many percent more of the stars for the repository of solution No.51424 than No.167053?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Id = 51424 THEN T1.Stars ELSE 0 END) - SUM(CASE WHEN T2.Id = 167053 THEN T1.Stars ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 167053 THEN T1.Stars ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId", "source_tables": ["solution", "repo"]}, "evidence": "solution No. refers to Solution.Id; percentage = DIVIDE(MULTIPLY(SUBTRACT(SUM(Solution.Id = 51424), SUM(Solution.Id = 167053)), 100)), SUM(Solution.Id = 167053);"}
{"sample_id": 627, "db_id": "codebase_comments", "final": {"question": "How many percent more of the Forks for the repository of solution No.53546 than No.1502?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Id = 53546 THEN T1.Forks ELSE 0 END) - SUM(CASE WHEN T2.Id = 1502 THEN T1.Forks ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 1502 THEN T1.Forks ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId", "source_tables": ["solution", "repo"]}, "evidence": "solution No. refers to Solution.Id; percentage = DIVIDE(MULTIPLY(SUBTRACT(SUM(Solution.Id = 53546), SUM(Solution.Id = 1502)), 100)), SUM(Solution.Id = 1502);"}
{"sample_id": 628, "db_id": "codebase_comments", "final": {"question": "List all the methods with a solution with a \"636449700980488000\" processed time.", "sql": "SELECT DISTINCT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.ProcessedTime = 636449700980488000", "source_tables": ["solution", "method"]}, "evidence": "methods refers to Name; solution refers to SolutionId;"}
{"sample_id": 629, "db_id": "codebase_comments", "final": {"question": "How many solutions are in \"https://github.com/derickbailey/presentations-and-training.git\"?", "sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/derickbailey/presentations-and-training.git'", "source_tables": ["solution", "repo"]}, "evidence": "solutions refers to Solution.Id; https://github.com/derickbailey/presentations-and-training.git refers to Url; Url; = 'https://github.com/derickbailey/presentations-and-training.git';"}
{"sample_id": 630, "db_id": "codebase_comments", "final": {"question": "What is the total processed time of all solutions from the repository with the most forks?", "sql": "SELECT SUM(T2.ProcessedTime) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks = ( SELECT MAX(Forks) FROM Repo )", "source_tables": ["solution", "repo"]}, "evidence": "total processed time = AVG(ProcessedTime where MAX(COUNT(Forks))); repository with the most forks refers to MAX(COUNT(Forks));"}
{"sample_id": 631, "db_id": "codebase_comments", "final": {"question": "List all the path of solution from all the \"it\" lang code method.", "sql": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'it'", "source_tables": ["solution", "method"]}, "evidence": "path of the solution refers to Path; solution refers to Solution.Id;"}
{"sample_id": 632, "db_id": "codebase_comments", "final": {"question": "What is the path of solution of \"spinachLexer.mT__55\" method?", "sql": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'spinachLexer.mT__55'", "source_tables": ["solution", "method"]}, "evidence": "path of the solution refers to Path; solution refers to Solution.Id; method refers to Name; Name = 'spinachLexer.mT__55';"}
{"sample_id": 633, "db_id": "codebase_comments", "final": {"question": "What are the \"en\" methods with solutions from repository \"1093\"", "sql": "SELECT DISTINCT T2.id FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.RepoId = 1093 AND T2.Lang = 'en'", "source_tables": ["solution", "method"]}, "evidence": "en methods refers to lang = 'en'; solution refers to Solution.Id; repository refers to RepoId; RepoId = 1093;"}
{"sample_id": 634, "db_id": "codebase_comments", "final": {"question": "What are the paths of solutions in repository \"https://github.com/ecoffey/Bebop.git\"", "sql": "SELECT DISTINCT T2.Path FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/ecoffey/Bebop.git'", "source_tables": ["solution", "repo"]}, "evidence": "path of solutions refers to Path; https://github.com/ecoffey/Bebop.git refers to Url; Url = 'https://github.com/ecoffey/Bebop.git';"}
{"sample_id": 635, "db_id": "codebase_comments", "final": {"question": "List all the ids of repositories for solutions with \"ro\" methods.", "sql": "SELECT DISTINCT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'ro'", "source_tables": ["solution", "method"]}, "evidence": "ids of repositories refers to RepoId; ro refers to lang = 'ro';"}
{"sample_id": 636, "db_id": "codebase_comments", "final": {"question": "What is the repository id of the method with tokenized name \"crc parameters get hash code\"?", "sql": "SELECT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'crc parameters get hash code'", "source_tables": ["solution", "method"]}, "evidence": "repository id refers to RepoId; tokenized name refers to NameTokenized; NameTokenized = 'crc parameters get hash code';"}
{"sample_id": 637, "db_id": "codebase_comments", "final": {"question": "How many methods with solutions with path 'maravillas_linq-to-delicious\\tasty.sln'?", "sql": "SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'maravillas_linq-to-delicious\\tasty.sln'", "source_tables": ["solution", "method"]}, "evidence": "solution refers to SolutionId;"}
{"sample_id": 638, "db_id": "codebase_comments", "final": {"question": "List all the solutions ids of the repository with \"636430969128176000\" processed time", "sql": "SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.ProcessedTime = 636430969128176000", "source_tables": ["solution", "repo"]}, "evidence": "solution ids refers to Solution.Id;"}
{"sample_id": 639, "db_id": "codebase_comments", "final": {"question": "What is the url for repository that has the longest processed time solution?", "sql": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Solution )", "source_tables": ["solution", "repo"]}, "evidence": "Url for repository refers to Url; longest processed toe trefers to MAX(ProcessedTime);"}
{"sample_id": 690, "db_id": "trains", "final": {"question": "How many trains are there that run in the east direction?", "sql": "SELECT COUNT(id) FROM trains WHERE direction = 'east'", "source_tables": ["trains"]}, "evidence": "east is a direction"}
{"sample_id": 691, "db_id": "trains", "final": {"question": "How many cars are there on train no.1?", "sql": "SELECT COUNT(id) FROM cars WHERE train_id = 1", "source_tables": ["cars"]}, "evidence": "train no.1 refers to train_id = 1"}
{"sample_id": 692, "db_id": "trains", "final": {"question": "What is the shape of the tail car on train no.1?", "sql": "SELECT shape FROM cars WHERE train_id = 1 AND position = 4", "source_tables": ["cars"]}, "evidence": "train no.1 refers to train_id = 1; tail car refers to position = 4"}
{"sample_id": 693, "db_id": "trains", "final": {"question": "Please list the IDs of all the trains with at least one car in a non-regular shape.", "sql": "SELECT train_id FROM cars WHERE shape IN ('elipse', 'bucket') GROUP BY train_id", "source_tables": ["cars"]}, "evidence": "non-regular shape refers to shape in ('elipse', 'bucket')"}
{"sample_id": 694, "db_id": "trains", "final": {"question": "How many cars on train no.1 have the roof open?", "sql": "SELECT COUNT(id) FROM cars WHERE train_id = 1 AND roof = 'none'", "source_tables": ["cars"]}, "evidence": "train no. 1 refers to train_id = 1; roof open refers to roof = 'none'"}
{"sample_id": 695, "db_id": "trains", "final": {"question": "Please list the IDs of all the cars on train no.1 that have 2 wheels.", "sql": "SELECT id FROM cars WHERE train_id = 1 AND wheels = 2", "source_tables": ["cars"]}, "evidence": "train no.1 refers to train_id = 1; 2 wheels refers to wheels = 2"}
{"sample_id": 696, "db_id": "trains", "final": {"question": "Among the trains that run in the east direction, how many of them have at least one car in a non-regular shape?", "sql": "SELECT SUM(CASE WHEN T1.shape IN ('bucket', 'elipse') THEN 1 ELSE 0 end)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'", "source_tables": ["trains", "cars"]}, "evidence": "non-regular shape refers to shape in ('elipse', 'bucket')"}
{"sample_id": 697, "db_id": "trains", "final": {"question": "Please list the IDs of all the trains that run in the east direction and have less than 4 cars.", "sql": "SELECT T1.id FROM trains AS T1 INNER JOIN ( SELECT train_id, MAX(position) AS carsNum FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T1.direction = 'east' AND T2.carsNum < 4", "source_tables": ["trains", "cars"]}, "evidence": "less than 4 cars refers to carsNum < 4"}
{"sample_id": 698, "db_id": "trains", "final": {"question": "Please list the IDs of all the cars with double sides on trains that run in the west direction.", "sql": "SELECT T1.id FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.sides = 'double'", "source_tables": ["trains", "cars"]}, "evidence": "double sides on trains refers to sides = 'double'"}
{"sample_id": 699, "db_id": "trains", "final": {"question": "Among the trains that run in the east direction, how many of them have more than 2 long cars?", "sql": "SELECT SUM(CASE WHEN T2.longCarsNum > 2 THEN 1 ELSE 0 END)as count FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) AS longCarsNum FROM cars WHERE len = 'long' GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T1.direction = 'west'", "source_tables": ["trains", "cars"]}, "evidence": "more than 2 long cars refers to longCarsNum > 2"}
{"sample_id": 700, "db_id": "trains", "final": {"question": "Please list the directions in which the trains with at least one empty-loaded car run.", "sql": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.load_num = 0", "source_tables": ["trains", "cars"]}, "evidence": "at least one empty-loaded car run refers to load_num = 0"}
{"sample_id": 701, "db_id": "trains", "final": {"question": "In which direction does the train with an ellipse-shape car run?", "sql": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.shape = 'ellipse'", "source_tables": ["trains", "cars"]}, "evidence": "shape = 'ellipse'"}
{"sample_id": 702, "db_id": "trains", "final": {"question": "What is the total number of short cars on all the trains that run in the east direction?", "sql": "SELECT SUM(CASE WHEN T1.len = 'short' then 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'", "source_tables": ["trains", "cars"]}, "evidence": "short cars refers to len = 'short'"}
{"sample_id": 703, "db_id": "trains", "final": {"question": "Please list the shapes of all the head cars on the trains that run in the east direction.", "sql": "SELECT T1.shape FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.position = 1 GROUP BY T1.shape", "source_tables": ["trains", "cars"]}, "evidence": "head cars refers to position = 1;"}
{"sample_id": 704, "db_id": "trains", "final": {"question": "How many cars on a train that runs in the east direction have a flat roof?", "sql": "SELECT SUM(CASE WHEN T1.roof = 'flat' THEN 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'", "source_tables": ["trains", "cars"]}, "evidence": "flat roof refers to roof = 'flat'"}
{"sample_id": 705, "db_id": "trains", "final": {"question": "Among the cars on a train that runs in the east direction, how many of them have a flat roof and a circle load shape?", "sql": "SELECT SUM(CASE WHEN T1.load_shape = 'circle' THEN 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.roof = 'flat'", "source_tables": ["trains", "cars"]}, "evidence": "flat roof refers to roof = 'flat'; load_shape = 'circle'"}
{"sample_id": 706, "db_id": "trains", "final": {"question": "Trains that run in which direction have more rectangle-shaped cars in total?", "sql": "SELECT T1.direction FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) AS rectCarsNum FROM cars WHERE shape = 'rectangle' GROUP BY train_id ) AS T2 ON T1.id = T2.train_id ORDER BY T2.rectCarsNum DESC", "source_tables": ["trains", "cars"]}, "evidence": "more rectangle-shaped cars refers to MAX(rectCarsNum)"}
{"sample_id": 707, "db_id": "trains", "final": {"question": "Please list the directions in which the trains with 4 short cars run.", "sql": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.len = 'short' AND T1.position = 4", "source_tables": ["trains", "cars"]}, "evidence": "short refers to len = 'short'; 4 cars run refers to position = 4"}
{"sample_id": 708, "db_id": "trains", "final": {"question": "What is the average number of cars on trains that run in the east direction?", "sql": "SELECT CAST(COUNT(T1.id) AS REAL) / COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'", "source_tables": ["trains", "cars"]}, "evidence": "calculation = DIVIDE(count(id), count(train_id))"}
{"sample_id": 709, "db_id": "trains", "final": {"question": "Among the trains that have at least one non-regular shaped car, what is the percentage of it running in the east direction?", "sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.direction = 'east' THEN T1.train_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.shape IN ('bucket', 'ellipse')", "source_tables": ["trains", "cars"]}, "evidence": "non-regular shaped car refers to shape in ('bucket', 'ellipse'); calculation = MULTIPLY(DIVIDE(count(direction = 'east' then train_id)), count(train_id), 100)"}
{"sample_id": 710, "db_id": "trains", "final": {"question": "How many short cars are in the shape of hexagon?", "sql": "SELECT COUNT(id) FROM cars WHERE shape = 'hexagon' AND len = 'short'", "source_tables": ["cars"]}, "evidence": "short cars refers to len = 'short'; in the shape of hexagon refers to shape = 'hexagon'"}
{"sample_id": 711, "db_id": "trains", "final": {"question": "How many trains are running west?", "sql": "SELECT COUNT(id) FROM trains WHERE direction = 'west'", "source_tables": ["trains"]}, "evidence": "west is a direction"}
{"sample_id": 712, "db_id": "trains", "final": {"question": "What are the load shapes of all the short ellipse cars?", "sql": "SELECT load_shape FROM cars WHERE shape = 'ellipse' AND len = 'short'", "source_tables": ["cars"]}, "evidence": "short refers to len = 'short'; ellipse cars refers to shape = 'ellipse'"}
{"sample_id": 713, "db_id": "trains", "final": {"question": "What are the ids of the train running east?", "sql": "SELECT id FROM trains WHERE direction = 'east'", "source_tables": ["trains"]}, "evidence": "east is a direction"}
{"sample_id": 730, "db_id": "movie", "final": {"question": "Please list the names of the characters in the movie Look Who's Talking.", "sql": "SELECT T2.'Character Name' FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'Look Who''s Talking'", "source_tables": ["characters", "movie"]}, "evidence": "movie Look Who's Talking refers to title = 'Look Who's Talking'"}
{"sample_id": 731, "db_id": "movie", "final": {"question": "Which character has the longest screen time in the movie Batman?", "sql": "SELECT T2.'Character Name' FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'Batman' ORDER BY T2.screentime DESC LIMIT 1", "source_tables": ["characters", "movie"]}, "evidence": "longest screen time refers to max(screentime); movie Batman refers to title = 'Batman'"}
{"sample_id": 732, "db_id": "movie", "final": {"question": "Which actor played the role of Joker in the movie Batman?", "sql": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Batman' AND T2.'Character Name' = 'Joker'", "source_tables": ["characters", "actor", "movie"]}, "evidence": "role of Joker refers to character_name = 'Joker'; movie Batman refers to title = 'Batman'"}
{"sample_id": 733, "db_id": "movie", "final": {"question": "Please list the names of the actors who played a role in the movie Batman.", "sql": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Batman'", "source_tables": ["characters", "actor", "movie"]}, "evidence": "movie Batman refers to title = 'Batman'"}
{"sample_id": 734, "db_id": "movie", "final": {"question": "Which movie is the character Dr. Archibald 'Moonlight' Graham from?", "sql": "SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.'Character Name' = 'Dr. Archibald ''Moonlight'' Graham'", "source_tables": ["characters", "movie"]}, "evidence": "movie name refers to title; character Dr. Archibald 'Moonlight' Graham refers to character_name = 'Dr. Archibald 'Moonlight' Graham'"}
{"sample_id": 735, "db_id": "movie", "final": {"question": "Please list the names of the movies starring Tom Cruise.", "sql": "SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise'", "source_tables": ["characters", "actor", "movie"]}, "evidence": "movie name refers to title; starring Tom Cruise refers to name = 'Tom Cruise'"}
{"sample_id": 736, "db_id": "movie", "final": {"question": "How many movies starring Morgan Freeman are suggested by parental guidance?", "sql": "SELECT COUNT(*) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Morgan Freeman' AND T1.'MPAA Rating' = 'PG'", "source_tables": ["characters", "actor", "movie"]}, "evidence": "'suggested by parental guidance' refers to mpaa_rating = 'PG'"}
{"sample_id": 737, "db_id": "movie", "final": {"question": "Among the movies starring Tom Cruise, which one of them has the best quality?", "sql": "SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise' ORDER BY T1.Rating DESC LIMIT 1", "source_tables": ["characters", "actor", "movie"]}, "evidence": "starring Tom Cruise refers to name = 'Tom Cruise'; best quality refers to max(rating)"}
{"sample_id": 738, "db_id": "movie", "final": {"question": "What is the name of the character played by Tom Cruise in the movie Born on the Fourth of July?", "sql": "SELECT T2.'Character Name' FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise' AND T1.Title = 'Born on the Fourth of July'", "source_tables": ["characters", "actor", "movie"]}, "evidence": "played by Tom Cruise refers to name = 'Tom Cruise'; movie Born on the Fourth of July refers to title = 'Born on the Fourth of July'"}
{"sample_id": 739, "db_id": "movie", "final": {"question": "Please list the names of all the characters played by Tom Cruise.", "sql": "SELECT T1.'Character Name' FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T2.Name = 'Tom Cruise'", "source_tables": ["characters", "actor"]}, "evidence": "played by Tom Cruise refers to name = 'Tom Cruise'"}
{"sample_id": 740, "db_id": "movie", "final": {"question": "Among the actors who starred in the movie Batman, which one of them is the tallest?", "sql": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Batman' ORDER BY T3.'Height (Inches)' DESC LIMIT 1", "source_tables": ["characters", "actor", "movie"]}, "evidence": "movie Batman refers to title = 'Batman'; tallest refers to max(height_inches)"}
{"sample_id": 741, "db_id": "movie", "final": {"question": "How many movies star a male African American actor?", "sql": "SELECT COUNT(*) FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T2.Gender = 'Male' AND T2.Ethnicity = 'African American'", "source_tables": ["characters", "actor"]}, "evidence": "male refers to gender = 'Male'; African American refers to ethnicity = 'African American'"}
{"sample_id": 742, "db_id": "movie", "final": {"question": "What is the average rating of all the movies starring Tom Cruise?", "sql": "SELECT AVG(T1.Rating) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise'", "source_tables": ["characters", "actor", "movie"]}, "evidence": "starring Tom Cruise refers to name = 'Tom Cruise'; average rating = divide(sum(rating where name = 'Tom Cruise'), count(movieid where name = 'Tom Cruise'))"}
{"sample_id": 743, "db_id": "movie", "final": {"question": "How much longer in percentage is the screen time of the most important character in Batman than the least important one?", "sql": "SELECT (MAX(CAST(SUBSTR(T2.screentime, 3, 2) AS REAL)) - MIN(CAST(SUBSTR(T2.screentime, 3, 2) AS REAL))) * 100 / MIN(CAST(SUBSTR(T2.screentime, 3, 2) AS REAL)) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'Batman'", "source_tables": ["characters", "movie"]}, "evidence": "most important character refers to max(screentime); least important character refers to min(screentime); movie Batman refers to title = 'Batman'; percentage = divide(subtract(max(screentime) , min(screentime)) , min(screentime)) * 100%"}
{"sample_id": 744, "db_id": "movie", "final": {"question": "Which movie had the biggest budget? Give the name of the movie.", "sql": "SELECT Title FROM movie ORDER BY Budget DESC LIMIT 1", "source_tables": ["movie"]}, "evidence": "biggest budget refers to max(Budget); name of the movie refers to Title"}
{"sample_id": 745, "db_id": "movie", "final": {"question": "What is the MPAA rating for the movie with the character named \"Peter Quill\" in it?", "sql": "SELECT T1.'MPAA Rating' FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.'Character Name' = 'Peter Quill'", "source_tables": ["characters", "movie"]}, "evidence": "MPAA rating = 'G' means General audiences; MPAA rating = 'PG' means Parental guidance suggested; MPAA rating = 'R'means Restricted; MPAA rating = 'X' means No one under 17 admitted"}
{"sample_id": 746, "db_id": "movie", "final": {"question": "Give the name of the No.1 character in the credit list from the highest rating thriller movie.", "sql": "SELECT T2.'Character Name' FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.creditOrder = '1' AND T1.Genre = 'Thriller' ORDER BY T1.Rating DESC LIMIT 1", "source_tables": ["characters", "movie"]}, "evidence": "No.1 character in the credit list refers to creditOrder = '1'; highest rating refers to max(rating); thriller movie refers to Genre = 'Thriller'"}
{"sample_id": 747, "db_id": "movie", "final": {"question": "Who was the actor that played in the movie \"Batman\" with the longest screentime?", "sql": "SELECT T2.Name FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID INNER JOIN movie AS T3 ON T3.MovieID = T1.MovieID WHERE T3.Title = 'Batman' ORDER BY T1.screentime DESC LIMIT 1", "source_tables": ["characters", "actor", "movie"]}, "evidence": "movie \"Batman\" refers to Title = 'Batman'; longest screentime refers to max(screentime)"}
{"sample_id": 748, "db_id": "movie", "final": {"question": "How many movies has the highest networth actor acted in?", "sql": "SELECT COUNT(*) FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE CAST(REPLACE(REPLACE(T2.NetWorth, ',', ''), '$', '') AS REAL) = ( SELECT MAX(CAST(REPLACE(REPLACE(NetWorth, ',', ''), '$', '') AS REAL)) FROM actor)", "source_tables": ["characters", "actor"]}, "evidence": "highest networth refers to max(networth)"}
{"sample_id": 749, "db_id": "movie", "final": {"question": "Who played the character named \"Chanice Kobolowski\"?", "sql": "SELECT T2.Name FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.'Character Name' = 'Chanice Kobolowski'", "source_tables": ["characters", "actor"]}, "evidence": ""}
{"sample_id": 750, "db_id": "movie", "final": {"question": "When is the birthday of the actor who played \"Sully\"?", "sql": "SELECT T2.'Date of Birth' FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.'Character Name' = 'Sully'", "source_tables": ["characters", "actor"]}, "evidence": "birthday refers to Date of Birth; \"Sully\" refers to Character Name = 'Sully'"}
{"sample_id": 751, "db_id": "movie", "final": {"question": "Show the birth city of the actor who played \"Gabriel Martin\".", "sql": "SELECT T2.'Birth City' FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.'Character Name' = 'Gabriel Martin'", "source_tables": ["characters", "actor"]}, "evidence": "\"Gabriel Martin\" refers to Character Name = 'Gabriel Martin'"}
{"sample_id": 752, "db_id": "movie", "final": {"question": "Give the biography of the actor who played \"Michael Moscovitz\".", "sql": "SELECT T2.Biography FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.'Character Name' = 'Michael Moscovitz'", "source_tables": ["characters", "actor"]}, "evidence": "\"Michael Moscovitz\" refers to Character Name = 'Michael Moscovitz'"}
{"sample_id": 753, "db_id": "movie", "final": {"question": "How tall is the actor who played \"Lurch\"?", "sql": "SELECT T2.'Height (Inches)' FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.'Character Name' = 'Lurch'", "source_tables": ["characters", "actor"]}, "evidence": "tall refers to Height (Inches); \"Lurch\" refers to Character Name = 'Lurch'"}
{"sample_id": 754, "db_id": "movie", "final": {"question": "Show the No.3 character name in the credit list of the movie \"G.I. Joe: The Rise of Cobra\".", "sql": "SELECT T2.'Character Name' FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'G.I. Joe: The Rise of Cobra' AND T2.creditOrder = '3'", "source_tables": ["characters", "movie"]}, "evidence": "No.3 character refers to creditOrder = '3'; movie \"G.I. Joe: The Rise of Cobra\" refers to Title = 'G.I. Joe: The Rise of Cobra'"}
{"sample_id": 755, "db_id": "movie", "final": {"question": "Who played the No.2 character in the credit list of the movie \"American Hustle\"?", "sql": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'American Hustle' AND T2.creditOrder = '2'", "source_tables": ["characters", "actor", "movie"]}, "evidence": "No.2 character refers to creditOrder = '2'; movie \"American Hustle\" refers to Title = 'American Hustle'"}
{"sample_id": 756, "db_id": "movie", "final": {"question": "Who played the No.1 character in the credit list of the movie which was released on \"2015/10/26\"?", "sql": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.'Release Date' = '2015-10-26' AND T2.creditOrder = '1'", "source_tables": ["characters", "actor", "movie"]}, "evidence": "No.1 character refers to creditOrder = '1'; released on \"2015/10/26\" refers to Release Date = '2015-10-26'"}
{"sample_id": 776, "db_id": "social_media", "final": {"question": "How many tweets are in English?", "sql": "SELECT COUNT(TweetID) AS tweet_number FROM twitter WHERE Lang = 'en'", "source_tables": ["twitter"]}, "evidence": "english is the language and refers to Lang = 'en'"}
{"sample_id": 777, "db_id": "social_media", "final": {"question": "Please list the texts of all the tweets that are reshared.", "sql": "SELECT text FROM twitter WHERE IsReshare = 'TRUE'", "source_tables": ["twitter"]}, "evidence": "reshared refers to Isreshare = 'TRUE'"}
{"sample_id": 778, "db_id": "social_media", "final": {"question": "How many tweets are seen by more than 1000 unique users?", "sql": "SELECT COUNT(TweetID) AS tweet_number FROM twitter WHERE Reach > 1000", "source_tables": ["twitter"]}, "evidence": "seen by more than 1000 unique users refers to Reach > 1000"}
{"sample_id": 779, "db_id": "social_media", "final": {"question": "Among all the tweets that have a positive sentiment, how many of them are posted on Thursday?", "sql": "SELECT COUNT(TweetID) AS tweet_number FROM twitter WHERE Sentiment > 0 AND Weekday = 'Thursday'", "source_tables": ["twitter"]}, "evidence": "positive sentiment refers to Sentiment > 0; posted on Thursday refers to Weekday = 'Thursday'"}
{"sample_id": 780, "db_id": "social_media", "final": {"question": "What is the text of the tweet that got the most `likes`?", "sql": "SELECT text FROM twitter WHERE Likes = ( SELECT MAX( Likes) FROM twitter )", "source_tables": ["twitter"]}, "evidence": "got the most like refers to Max(Likes)"}
{"sample_id": 781, "db_id": "social_media", "final": {"question": "Please list all the cities in Argentina.", "sql": "SELECT City FROM location WHERE City IS NOT NULL AND Country = 'Argentina'", "source_tables": ["location"]}, "evidence": "\"Argentina\" is the Country"}
{"sample_id": 782, "db_id": "social_media", "final": {"question": "How many tweets in total were posted by a user in Argentina?", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country = 'Argentina' LIMIT 1", "source_tables": ["location", "twitter"]}, "evidence": "\"Argentina\" is the Country"}
{"sample_id": 783, "db_id": "social_media", "final": {"question": "Users in which city of Argentina post the most tweets?", "sql": "SELECT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country = 'Argentina' GROUP BY T2.City ORDER BY COUNT(T1.TweetID) DESC LIMIT 1", "source_tables": ["location", "twitter"]}, "evidence": "\"Argentina\" is the Country; post the most tweets refers to Max(Count(TweetID))"}
{"sample_id": 784, "db_id": "social_media", "final": {"question": "Among all the tweets that are reshared, how many of them are posted by a user in Buenos Aires?", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.City = 'Buenos Aires' AND T1.IsReshare = 'TRUE'", "source_tables": ["location", "twitter"]}, "evidence": "reshared refers to Isreshare = 'TRUE'; 'Buenos Aires' is the City"}
{"sample_id": 785, "db_id": "social_media", "final": {"question": "Please list the texts of all the tweets posted from Buenos Aires with a positive sentiment.", "sql": "SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.Sentiment > 0 AND T2.City = 'Buenos Aires'", "source_tables": ["location", "twitter"]}, "evidence": "\"Buenos Aires\" is the City; positive sentiment refers to Sentiment > 0"}
{"sample_id": 786, "db_id": "social_media", "final": {"question": "From which country is the tweet with the most likes posted?", "sql": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID ORDER BY T1.Likes DESC LIMIT 1", "source_tables": ["location", "twitter"]}, "evidence": "tweet with the most likes refers to Max(Likes)"}
{"sample_id": 787, "db_id": "social_media", "final": {"question": "Users in which country has posted more numbers of positive tweets, Argentina or Australia?", "sql": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country IN ('Argentina', 'Australia') AND T1.Sentiment > 0 GROUP BY T2.Country ORDER BY COUNT(T1.TweetID) DESC LIMIT 1", "source_tables": ["location", "twitter"]}, "evidence": "\"Argentina\" and \"Australia\" are both Country; positive tweets refers to Sentiment > 0; Country posted more number of tweets refers to Country where Max(Count(TweetID))"}
{"sample_id": 788, "db_id": "social_media", "final": {"question": "Among all the tweets posted from Buenos Aires, how many of them were posted on Thursdays?", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.City = 'Buenos Aires' AND T1.Weekday = 'Thursday'", "source_tables": ["location", "twitter"]}, "evidence": "\"Buenos Aires\" is the City; posted on Thursday refers to Weekday = 'Thursday'"}
{"sample_id": 789, "db_id": "social_media", "final": {"question": "Among all the users that have posted a tweet with over 1000 likes, how many of them are male?", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Likes > 10 AND T2.Gender = 'Male'", "source_tables": ["user", "twitter"]}, "evidence": "over 1000 likes refers to Likes > 1000; 'Male' is the Gender of user"}
{"sample_id": 790, "db_id": "social_media", "final": {"question": "How many tweets have the male users posted in total?", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male'", "source_tables": ["user", "twitter"]}, "evidence": "male users refers to Gender = 'Male'; total tweets refers to Count(TweetID)"}
{"sample_id": 791, "db_id": "social_media", "final": {"question": "What is the gender of the user who has posted the tweet that is seen by the most number of unique users?", "sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Reach DESC LIMIT 1", "source_tables": ["user", "twitter"]}, "evidence": "seen by the most number of unique users refers to Max(Reach)"}
{"sample_id": 792, "db_id": "social_media", "final": {"question": "How many tweets are posted by male users in Argentina?", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T3 ON T1.UserID = T3.UserID WHERE T3.Gender = 'Male' AND T2.Country = 'Argentina'", "source_tables": ["user", "location", "twitter"]}, "evidence": "\"Argentina\" is the Country; male user refers to Gender = 'Male'"}
{"sample_id": 793, "db_id": "social_media", "final": {"question": "Please list the texts of all the tweets posted by male users from Buenos Aires.", "sql": "SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T2 ON T2.UserID = T1.UserID INNER JOIN user AS T3 ON T1.UserID = T3.UserID WHERE T2.City = 'Buenos Aires' AND T3.Gender = 'Male'", "source_tables": ["user", "location", "twitter"]}, "evidence": "\"Buenos Aires\" is the City; male user refers to Gender = 'Male'"}
{"sample_id": 794, "db_id": "social_media", "final": {"question": "What is the average number of tweets posted by the users in a city in Argentina?", "sql": "SELECT SUM(CASE WHEN T2.City = 'Buenos Aires' THEN 1.0 ELSE 0 END) / COUNT(T1.TweetID) AS avg FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country = 'Argentina'", "source_tables": ["location", "twitter"]}, "evidence": "\"Argentina\" is the Country; average number of tweets in a city = Divide (Count(TweetID where Country = 'Argentina'), Count (City))"}
{"sample_id": 795, "db_id": "social_media", "final": {"question": "Among all the tweets with a positive sentiment, what is the percentage of those posted by a male user?", "sql": "SELECT SUM(CASE WHEN T2.Gender = 'Male' THEN 1.0 ELSE 0 END) / COUNT(T1.TweetID) AS per FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Sentiment > 0", "source_tables": ["user", "twitter"]}, "evidence": "positive sentiment refers to Sentiment > 0; male user refers to Gender = 'Male'; percentage = Divide (Count(TweetID where Gender = 'Male'), Count (TweetID)) * 100"}
{"sample_id": 796, "db_id": "social_media", "final": {"question": "Give the number of users who do not show their genders.", "sql": "SELECT COUNT(UserID) AS user_number FROM user WHERE Gender = 'Unknown'", "source_tables": ["user"]}, "evidence": "do not show their gender refers to Gender = 'Unknown'"}
{"sample_id": 797, "db_id": "social_media", "final": {"question": "State the number of states in the United Kingdom.", "sql": "SELECT COUNT(State) AS State_number FROM location WHERE Country = 'United Kingdom'", "source_tables": ["location"]}, "evidence": "\"United Kingdom\" is the Country"}
{"sample_id": 798, "db_id": "social_media", "final": {"question": "What is the code of Gwynedd State?", "sql": "SELECT DISTINCT StateCode FROM location WHERE State = 'Gwynedd'", "source_tables": ["location"]}, "evidence": "code refers to StateCode"}
{"sample_id": 799, "db_id": "social_media", "final": {"question": "Give the location id of West Sussex State.", "sql": "SELECT DISTINCT LocationID FROM location WHERE State = 'West Sussex'", "source_tables": ["location"]}, "evidence": ""}
{"sample_id": 800, "db_id": "social_media", "final": {"question": "How many reshared tweets are there in Texas?", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.State = 'Texas' AND T1.IsReshare = 'TRUE'", "source_tables": ["location", "twitter"]}, "evidence": "reshared tweet refers to IsReshare = 'TRUE'; 'Texas' is the State"}
{"sample_id": 801, "db_id": "social_media", "final": {"question": "For the tweet which got a reach number of 547851, which country did it come from?", "sql": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.Reach = 547851", "source_tables": ["location", "twitter"]}, "evidence": "reach number of 547851 refers to Reach = 547851"}
{"sample_id": 802, "db_id": "social_media", "final": {"question": "State the number of positive tweets from Ha Noi.", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.Sentiment > 0 AND T2.State = 'Ha Noi'", "source_tables": ["location", "twitter"]}, "evidence": "positive tweet refers to Sentiment > 0; 'Ha Noi' is the State"}
{"sample_id": 803, "db_id": "social_media", "final": {"question": "Show the text of the tweet with the highest klout from Connecticut.", "sql": "SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.State = 'Connecticut' ORDER BY T1.Klout DESC LIMIT 1", "source_tables": ["location", "twitter"]}, "evidence": "highest klout refers to Max(Klout); 'Connecticut' is the State"}
{"sample_id": 804, "db_id": "social_media", "final": {"question": "How many female Twitter users are there from Wisconsin?", "sql": "SELECT COUNT(T1.Likes) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T3 ON T3.UserID = T1.UserID WHERE T2.State = 'Wisconsin' AND T3.Gender = 'Female'", "source_tables": ["user", "location", "twitter"]}, "evidence": "female users refers to Gender = 'Female'; 'Wisconsin' is the State"}
{"sample_id": 805, "db_id": "social_media", "final": {"question": "What is the gender of the user who tweeted `tw-715909161071091712`?", "sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.TweetID = 'tw-715909161071091712'", "source_tables": ["user", "twitter"]}, "evidence": "\"tw-715909161071091712\" is the TweetID"}
{"sample_id": 806, "db_id": "social_media", "final": {"question": "Give the name of the city of the user who tweeted `One of our favorite stories is @FINRA_News's move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a`.", "sql": "SELECT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.text = 'One of our favorite stories is @FINRA_News''s move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a'", "source_tables": ["location", "twitter"]}, "evidence": "\"One of our favorite stories is @FINRA_News's move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a\" is the text"}
{"sample_id": 807, "db_id": "social_media", "final": {"question": "What is the gender of the user whose tweet got 535 retweets?", "sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.RetweetCount = 535", "source_tables": ["user", "twitter"]}, "evidence": "tweet got 535 retweets refers to RetweetCount = 535"}
{"sample_id": 808, "db_id": "social_media", "final": {"question": "Give the gender of the user who made the highest klout tweet on Wednesdays.", "sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Weekday = 'Wednesday' ORDER BY T1.Klout DESC LIMIT 1", "source_tables": ["user", "twitter"]}, "evidence": "highest klout refers to Max(Klout); 'Wednesday' is the Weekday"}
{"sample_id": 809, "db_id": "social_media", "final": {"question": "For the tweet which got the most likes, state the gender of the user who tweeted it.", "sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Likes DESC LIMIT 1", "source_tables": ["user", "twitter"]}, "evidence": "most likes refers to Max(Likes)"}
{"sample_id": 810, "db_id": "social_media", "final": {"question": "State the number of tweets from Michigan on Thursdays.", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.Weekday = 'Thursday' AND T2.State = 'Michigan'", "source_tables": ["location", "twitter"]}, "evidence": "\"Michigan\" is the State; 'Thursday' is the Weekday; number of tweets refers to Count(TweetID)"}
{"sample_id": 811, "db_id": "social_media", "final": {"question": "Which state was the tweet `tw-685681052912873473` from? Give the state code.", "sql": "SELECT T2.StateCode FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.TweetID = 'tw-685681052912873473'", "source_tables": ["location", "twitter"]}, "evidence": "tw-685681052912873473' is the TweetID"}
{"sample_id": 812, "db_id": "social_media", "final": {"question": "What is the percentage of male Twitter users from Florida?", "sql": "SELECT SUM(CASE WHEN T3.Gender = 'Male' THEN 1.0 ELSE 0 END) / COUNT(T1.TweetID) AS percentage FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T3 ON T3.UserID = T1.UserID WHERE T2.State = 'Florida'", "source_tables": ["user", "location", "twitter"]}, "evidence": "\"Florida\" is the State; male user refers to Gender = 'Male'; percentage = Divide (Count(UserID where Gender = 'Male'), Count (UserID)) * 100"}
{"sample_id": 813, "db_id": "social_media", "final": {"question": "What is the percentage of the tweets from California are positive?", "sql": "SELECT SUM(CASE WHEN T1.Sentiment > 0 THEN 1.0 ELSE 0 END) / COUNT(T1.TweetID) AS percentage FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE State = 'California'", "source_tables": ["location", "twitter"]}, "evidence": "\"California\" is the State; positive tweet refers to Sentiment > 0; percentage = Divide (Count(TweetID where Sentiment > 0), Count (TweetID)) * 100"}
{"sample_id": 814, "db_id": "social_media", "final": {"question": "What is the day of the week that tweet with ID tw-682712873332805633 was posted?", "sql": "SELECT Weekday FROM twitter WHERE TweetID = 'tw-682712873332805633'", "source_tables": ["twitter"]}, "evidence": "\"tw-682712873332805633\" is the TweetID; day of the week refers to Weekday"}
{"sample_id": 815, "db_id": "social_media", "final": {"question": "How many unique users have seen tweet with text `Happy New Year to all those AWS instances of ours!`?", "sql": "SELECT Reach FROM twitter WHERE text = 'Happy New Year to all those AWS instances of ours!'", "source_tables": ["twitter"]}, "evidence": "\"Happy New Year to all those AWS instances of ours!\" is the text; seen unique users refers to Reach"}
{"sample_id": 816, "db_id": "social_media", "final": {"question": "Count the total number of tweet IDs in `en`.", "sql": "SELECT COUNT(DISTINCT TweetID) FROM twitter WHERE Lang = 'en'", "source_tables": ["twitter"]}, "evidence": "\"en\" is the language and refers to Lang = 'en'"}
{"sample_id": 817, "db_id": "social_media", "final": {"question": "Is 3751 the location ID for tweet with ID tw-682714048199311366?", "sql": "SELECT LocationID FROM twitter WHERE TweetID = 'tw-682714048199311366'", "source_tables": ["twitter"]}, "evidence": "\"tw-682714048199311366\" is the TweetID"}
{"sample_id": 818, "db_id": "social_media", "final": {"question": "How many tweets have been posted on Wednesday?", "sql": "SELECT COUNT(TweetID) FROM twitter WHERE Weekday = 'Wednesday'", "source_tables": ["twitter"]}, "evidence": "\"Wednesday\" is the Weekday"}
{"sample_id": 819, "db_id": "social_media", "final": {"question": "List down all of the texts posted on Twitter on Thursday.", "sql": "SELECT text FROM twitter WHERE Weekday = 'Thursday'", "source_tables": ["twitter"]}, "evidence": "\"Thursday\" is the Weekday"}
{"sample_id": 820, "db_id": "social_media", "final": {"question": "What is the gender of the user who posted a tweet with ID tw-682714583044243456?", "sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.TweetID = 'tw-682714583044243456'", "source_tables": ["user", "twitter"]}, "evidence": "\"tw-682714583044243456\" is the TweetID"}
{"sample_id": 821, "db_id": "social_media", "final": {"question": "List down the text of tweets posted by unknown gender users.", "sql": "SELECT T1.text FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Unknown'", "source_tables": ["user", "twitter"]}, "evidence": "unknown gender user refers to Gender = 'Unknown'"}
{"sample_id": 854, "db_id": "cs_semester", "final": {"question": "Which course is more difficult, Intro to BlockChain or Computer Network?", "sql": "SELECT name FROM course WHERE name = 'Intro to BlockChain' OR name = 'Computer Network' ORDER BY diff DESC LIMIT 1", "source_tables": ["course"]}, "evidence": "diff refers to difficulty; diff is higher means the course is more difficult;"}
{"sample_id": 855, "db_id": "cs_semester", "final": {"question": "Please list the names of the courses that are less important than Machine Learning Theory.", "sql": "SELECT name FROM course WHERE credit < ( SELECT credit FROM course WHERE name = 'Machine Learning Theory' )", "source_tables": ["course"]}, "evidence": "lower credit means less important;"}
{"sample_id": 856, "db_id": "cs_semester", "final": {"question": "How many professors are more popular than Zhou Zhihua?", "sql": "SELECT COUNT(prof_id) FROM prof WHERE popularity > ( SELECT popularity FROM prof WHERE first_name = 'Zhihua' AND last_name = 'Zhou' )", "source_tables": ["prof"]}, "evidence": "higher popularity means the professor is more popular;"}
{"sample_id": 857, "db_id": "cs_semester", "final": {"question": "What is the phone number of Kerry Pryor?", "sql": "SELECT phone_number FROM student WHERE l_name = 'Pryor' AND f_name = 'Kerry'", "source_tables": ["student"]}, "evidence": ""}
{"sample_id": 858, "db_id": "cs_semester", "final": {"question": "Which professor advised Faina Mallinar to become a research assistant? Please give his or her full name.", "sql": "SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Faina' AND T3.l_name = 'Mallinar'", "source_tables": ["prof", "student", "ra"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; full name refers to f_name and l_name;"}
{"sample_id": 859, "db_id": "cs_semester", "final": {"question": "How many research assistants does Sauveur Skyme have?", "sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.first_name = 'Sauveur' AND T2.last_name = 'Skyme'", "source_tables": ["prof", "ra"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA;"}
{"sample_id": 860, "db_id": "cs_semester", "final": {"question": "Please list the full names of all the students who are research assistants with the highest research capability.", "sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN RA AS T2 ON T1.student_id = T2.student_id WHERE T2.capability = 5", "source_tables": ["student", "ra"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; the highest research capability refers to capability = 5; full name refers to f_name and l_name;"}
{"sample_id": 861, "db_id": "cs_semester", "final": {"question": "How many research assistants of Ogdon Zywicki have an average salary?", "sql": "SELECT COUNT(T1.prof_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.first_name = 'Ogdon' AND T1.salary = 'med' AND T2.last_name = 'Zywicki'", "source_tables": ["prof", "ra"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; average salary refers to salary = 'med';"}
{"sample_id": 862, "db_id": "cs_semester", "final": {"question": "Please list the full names of all the students who took the course Machine Learning Theory.", "sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Machine Learning Theory'", "source_tables": ["student", "course", "registration"]}, "evidence": "full name refers to f_name and l_name;"}
{"sample_id": 863, "db_id": "cs_semester", "final": {"question": "Among the students who got a B in the course Machine Learning Theory, how many of them have a gpa of over 3?", "sql": "SELECT COUNT(student_id) FROM registration WHERE grade = 'B' AND student_id IN ( SELECT student_id FROM student WHERE gpa > 3 AND course_id IN ( SELECT course_id FROM course WHERE name = 'Machine Learning Theory' ) )", "source_tables": ["student", "course", "registration"]}, "evidence": "B refers to grade; GPA is an abbreviated name of Grade Point Average where over 3 refers to gpa > 3;"}
{"sample_id": 864, "db_id": "cs_semester", "final": {"question": "Please list the names of the courses taken by Laughton Antonio.", "sql": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.f_name = 'Laughton' AND T1.l_name = 'Antonio'", "source_tables": ["student", "course", "registration"]}, "evidence": ""}
{"sample_id": 865, "db_id": "cs_semester", "final": {"question": "Which student failed the course Intro to Database 2? Please give his or her full name.", "sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.grade IS NULL AND T3.name = 'Intro to Database 2'", "source_tables": ["student", "course", "registration"]}, "evidence": "If grade is NULL, it means that this student fails to pass the course; full name refers to f_name and l_name;"}
{"sample_id": 866, "db_id": "cs_semester", "final": {"question": "Which student is more satisfied with the course Machine Learning Theory, Willie Rechert or Laughton Antonio?", "sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE (T1.f_name = 'Laughton' OR T1.f_name = 'Willie') AND (T1.l_name = 'Antonio' OR T1.l_name = 'Rechert') AND T3.name = 'Machine Learning Theory' ORDER BY T2.sat DESC LIMIT 1", "source_tables": ["student", "course", "registration"]}, "evidence": "sat refers to student's satisfaction degree with the course; more satisfied refers to MAX(sat);"}
{"sample_id": 867, "db_id": "cs_semester", "final": {"question": "Among the professors who have more than 3 research assistants, how many of them are male?", "sql": "SELECT COUNT(*) FROM ( SELECT T2.prof_id FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.gender = 'Male' GROUP BY T1.prof_id HAVING COUNT(T1.student_id) > 3 )", "source_tables": ["prof", "ra"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; more than 3 research assistant refers to COUNT(student_id) > 3;"}
{"sample_id": 868, "db_id": "cs_semester", "final": {"question": "Among the students who took the course Machine Learning Theory, how many of them are undergraduates?", "sql": "SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Machine Learning Theory' AND T1.type = 'UG'", "source_tables": ["student", "course", "registration"]}, "evidence": "UG is an abbreviated name of undergraduate student in which type = 'UG';"}
{"sample_id": 869, "db_id": "cs_semester", "final": {"question": "Which professor advised Willie Rechert to work as a research assistant? Please give his or her full name.", "sql": "SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Willie' AND T3.l_name = 'Rechert'", "source_tables": ["prof", "student", "ra"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; prof_id refers to professor\u2019s ID; full name refers to f_name and l_name;"}
{"sample_id": 870, "db_id": "cs_semester", "final": {"question": "What is the average gpa of Ogdon Zywicki's research assistants?", "sql": "SELECT SUM(T3.gpa) / COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T1.student_id = T3.student_id WHERE T2.first_name = 'Ogdon' AND T2.last_name = 'Zywicki'", "source_tables": ["prof", "student", "ra"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; prof_id refers to professor\u2019s ID; GPA is an abbreviated name of Grade Point Average where average = AVG(gpa);"}
{"sample_id": 871, "db_id": "cs_semester", "final": {"question": "What is the average satisfying degree of the course Machine Learning Theory?", "sql": "SELECT CAST(SUM(T1.sat) AS REAL) / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Machine Learning Theory'", "source_tables": ["course", "registration"]}, "evidence": "sat refers to student's satisfaction degree with the course;"}
{"sample_id": 872, "db_id": "cs_semester", "final": {"question": "Give the number of research postgraduate students.", "sql": "SELECT COUNT(student_id) FROM student WHERE type = 'RPG'", "source_tables": ["student"]}, "evidence": "RPG is an abbreviated name of research postgraduate student in which type = 'RPG';"}
{"sample_id": 873, "db_id": "cs_semester", "final": {"question": "Which student has the highest gpa? Give the full name.", "sql": "SELECT f_name, l_name FROM student WHERE gpa = ( SELECT MAX(gpa) FROM student )", "source_tables": ["student"]}, "evidence": "GPA is an abbreviated name of Grade Point Average where highest GPA = MAX(gpa); full name refers to f_name and l_name;"}
{"sample_id": 874, "db_id": "cs_semester", "final": {"question": "For the 3-credit course with the easiest difficulty, how many students get an \"A\" in that course?", "sql": "SELECT COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.grade = 'A' AND T2.credit = '3' AND T2.diff = 1", "source_tables": ["course", "registration"]}, "evidence": "diff refers to difficulty; diff is higher means the course is more difficult in which easiest difficulty refers to diff = 1; 3-credit course refers to credit = '3'; get an \"A\" refers to grade = 'A' for the course;"}
{"sample_id": 875, "db_id": "cs_semester", "final": {"question": "How many students took the hardest course?", "sql": "SELECT COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.diff = 5", "source_tables": ["course", "registration"]}, "evidence": "diff refers to difficulty; diff is higher means the course is more difficult in which hardest difficulty is expressed as diff = 5;"}
{"sample_id": 876, "db_id": "cs_semester", "final": {"question": "Which professor is Oliy Spratling working with? Give the full name.", "sql": "SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Oliy' AND T3.l_name = 'Spratling'", "source_tables": ["prof", "student", "ra"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; full name refers to f_name and l_name;"}
{"sample_id": 877, "db_id": "cs_semester", "final": {"question": "For the professor who is working with Harrietta Lydford, how is his popularity?", "sql": "SELECT T1.popularity FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Harrietta' AND T3.l_name = 'Lydford'", "source_tables": ["prof", "student", "ra"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; higher popularity means more popular; prof_id refers to professor\u2019s ID;"}
{"sample_id": 878, "db_id": "cs_semester", "final": {"question": "How many research assistants does the female professor with the lowest teaching ability have?", "sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability = '1' AND T2.gender = 'Female'", "source_tables": ["prof", "ra"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; professor with the lowest teaching ability refers to prof_id where teachability = '1';"}
{"sample_id": 879, "db_id": "cs_semester", "final": {"question": "For the professors who advise more than 2 students, which professor has a higher teaching ability? Give the full name.", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, T2.teachingability FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id GROUP BY T1.prof_id HAVING COUNT(student_id) > 2 ) T ORDER BY T.teachingability DESC LIMIT 1", "source_tables": ["prof", "ra"]}, "evidence": "professor advising more than 2 students refers to COUNT(student_id) > 2; higher teachability refers to MAX(teachingability); full name refers to f_name and l_name;"}
{"sample_id": 880, "db_id": "cs_semester", "final": {"question": "Give the grade score for Rik Unsworth in \"Computer Network\".", "sql": "SELECT CASE grade WHEN 'A' THEN 4 WHEN 'B' THEN 3 WHEN 'C' THEN 2 ELSE 1 END AS result FROM registration WHERE student_id IN ( SELECT student_id FROM student WHERE f_name = 'Rik' AND l_name = 'Unsworth' AND course_id IN ( SELECT course_id FROM course WHERE name = 'Computer Network' ) )", "source_tables": ["student", "course", "registration"]}, "evidence": "Academic grades awarded for participation in a course are A, B, C, D and F where Grade 'A' means excellent, Grade 'B' means good, Grade 'C' means fair, Grade 'D' means poorly pass, if grade is null or empty, it means that this student fails to pass this course in which grade = NULL;"}
{"sample_id": 881, "db_id": "cs_semester", "final": {"question": "How many courses does Alvera McQuillin take?", "sql": "SELECT COUNT(T1.course_id) FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.f_name = 'Alvera' AND T2.l_name = 'McQuillin'", "source_tables": ["student", "registration"]}, "evidence": ""}
{"sample_id": 882, "db_id": "cs_semester", "final": {"question": "State the name of research postgraduate student among Professor Zhihua Zhou's research assistants.", "sql": "SELECT T3.f_name, T3.l_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T1.first_name = 'Zhihua' AND T3.type = 'RPG' AND T1.last_name = 'Zhou'", "source_tables": ["prof", "student", "ra"]}, "evidence": "research postgraduate student refers to type = 'RPG'; research assistant refers to the student who serves for research where the abbreviation is RA;"}
{"sample_id": 883, "db_id": "cs_semester", "final": {"question": "Provide the number of students enrolled in the \"Statistical Learning\" course.", "sql": "SELECT COUNT(T2.student_id) FROM course AS T1 INNER JOIN registration AS T2 ON T1.course_id = T2.course_id WHERE T1.name = 'Statistical learning'", "source_tables": ["course", "registration"]}, "evidence": ""}
{"sample_id": 884, "db_id": "cs_semester", "final": {"question": "Who were the students who failed the course \"Applied Deep Learning\"? Give the full name.", "sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Applied Deep Learning ' AND T2.grade IS NULL", "source_tables": ["student", "course", "registration"]}, "evidence": "If grade is null or empty, it means that this student fails to pass the course in which grade = NULL;"}
{"sample_id": 885, "db_id": "cs_semester", "final": {"question": "Give the phone number of the only student who obtained \"A\" in the course \"Intro to BlockChain\".", "sql": "SELECT T1.phone_number FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Intro to BlockChain' AND T2.grade = 'A'", "source_tables": ["student", "course", "registration"]}, "evidence": "A refers to an excellent grade in which grade = 'A' for the course;"}
{"sample_id": 886, "db_id": "cs_semester", "final": {"question": "What is the percentage of Professor Ogdon Zywicki's research assistants are taught postgraduate students?", "sql": "SELECT CAST(SUM(CASE WHEN T3.type = 'TPG' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T1.student_id = T3.student_id WHERE T2.first_name = 'Ogdon' AND T2.last_name = 'Zywicki'", "source_tables": ["prof", "student", "ra"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; taught postgraduate student refers to type = 'TPG'; DIVIDE(COUNT(student_id where type = 'TPG' and first_name = 'Ogdon', last_name = 'Zywicki'), COUNT(first_name = 'Ogdon', last_name = 'Zywicki')) as percentage;"}
{"sample_id": 887, "db_id": "cs_semester", "final": {"question": "What is the percentage of students who get a \"B\" in the course \"Computer Network\"?", "sql": "SELECT CAST(SUM(CASE WHEN T1.grade = 'B' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Computer Network'", "source_tables": ["course", "registration"]}, "evidence": "DIVIDE(COUNT(student_id(grade = 'B' and name = 'Computer Network')), COUNT(student_id where name = ' Computer Network')) as percentage;"}
{"sample_id": 888, "db_id": "cs_semester", "final": {"question": "How many courses have the highest difficulty?", "sql": "SELECT COUNT(course_id) FROM course WHERE diff = 5", "source_tables": ["course"]}, "evidence": "diff refers to difficulty; diff is higher means the course is more difficult in which highest difficulty is expessed as diff = 5;"}
{"sample_id": 889, "db_id": "cs_semester", "final": {"question": "What is the full name of the professor who graduated from an Ivy League School?", "sql": "SELECT first_name, last_name FROM prof WHERE graduate_from IN ( 'Brown University',  'Columbia University',  'Cornell University',  'Dartmouth College',  'Harvard University',  'Princeton University',  'University of Pennsylvania',  'Yale University' )", "source_tables": ["prof"]}, "evidence": "Ivy League school is assembled by 8 universities: Brown University, Columbia University, Cornell University, Dartmouth College, Harvard University, Princeton University, University of Pennsylvania and Yale University;"}
{"sample_id": 890, "db_id": "cs_semester", "final": {"question": "Among the most important courses, what is the name of the most difficult course?", "sql": "SELECT name FROM course WHERE credit = ( SELECT MAX(credit) FROM course ) AND diff = ( SELECT MAX(diff) FROM course )", "source_tables": ["course"]}, "evidence": "Higher credit means more important in which most important refers to MAX(credit); diff refers to difficulty; the most difficult course refers to MAX(diff);"}
{"sample_id": 891, "db_id": "cs_semester", "final": {"question": "How many students have the highest intelligence among those taking a bachelor's degree?", "sql": "SELECT COUNT(student_id) FROM student WHERE type = 'UG' AND intelligence = ( SELECT MAX(intelligence) FROM student )", "source_tables": ["student"]}, "evidence": "bachelor's degree is an undergraduate degree in which type = 'UG'; the highest intelligence refers to MAX(intelligence);"}
{"sample_id": 892, "db_id": "cs_semester", "final": {"question": "Among the most popular professors, how many are females?", "sql": "SELECT COUNT(prof_id) FROM prof WHERE gender = 'Female' AND popularity = ( SELECT MAX(popularity) FROM prof )", "source_tables": ["prof"]}, "evidence": "the most popular professors refers to prof_id where MAX(popularity); female refers to gender;"}
{"sample_id": 893, "db_id": "cs_semester", "final": {"question": "How many research postgraduate students are there?", "sql": "SELECT COUNT(student_id) FROM student WHERE type = 'RPG'", "source_tables": ["student"]}, "evidence": "research postgraduate student refers to type = 'RPG';"}
{"sample_id": 894, "db_id": "cs_semester", "final": {"question": "How many students got an A in Applied Deep Learning?", "sql": "SELECT COUNT(T2.student_id) FROM course AS T1 INNER JOIN registration AS T2 ON T1.course_id = T2.course_id WHERE T2.grade = 'A' AND T1.name = 'Applied Deep Learning '", "source_tables": ["course", "registration"]}, "evidence": "A refers to an excellent grade in which grade = 'A' for the course;"}
{"sample_id": 895, "db_id": "cs_semester", "final": {"question": "What are the GPAs of the unpaid Research Assistants?", "sql": "SELECT T2.gpa FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'free'", "source_tables": ["student", "ra"]}, "evidence": "Unpaid Research Assistants undertake their work without payment in which salary = 'free';"}
{"sample_id": 896, "db_id": "cs_semester", "final": {"question": "Among the easiest courses, what is the name of the course where most students got an A?", "sql": "SELECT T2.name FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.grade = 'A' AND T2.diff = 1 GROUP BY T2.name ORDER BY COUNT(T1.student_id) DESC LIMIT 1", "source_tables": ["course", "registration"]}, "evidence": "diff refers to difficulty; the easiest courses refers to diff = 1; A refers to an excellent grade in which grade = 'A' for the course;"}
{"sample_id": 897, "db_id": "cs_semester", "final": {"question": "How many courses does the student with the highest GPA this semester take?", "sql": "SELECT COUNT(course_id) FROM registration WHERE student_id IN ( SELECT student_id FROM student WHERE gpa = ( SELECT MAX(gpa) FROM student ) )", "source_tables": ["student", "registration"]}, "evidence": "student with the highest GPA refers to student_id where MAX(gpa);"}
{"sample_id": 898, "db_id": "cs_semester", "final": {"question": "How many students does Ogdon Zywicki advise?", "sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.first_name = 'Ogdon' AND T2.last_name = 'Zywicki'", "source_tables": ["prof", "ra"]}, "evidence": "Ogdon Zywicki is a professor;"}
{"sample_id": 899, "db_id": "cs_semester", "final": {"question": "What is the name of the course with the highest satisfaction from students?", "sql": "SELECT DISTINCT T2.name FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.sat = 5", "source_tables": ["course", "registration"]}, "evidence": "sat refers to student's satisfaction degree with the course where sat = 5 stands for the highest satisfaction;"}
{"sample_id": 900, "db_id": "cs_semester", "final": {"question": "What are the names of the courses that the students with the lowest intelligence are least satisfied with?", "sql": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.sat = 1 AND T1.intelligence = 1", "source_tables": ["student", "course", "registration"]}, "evidence": "lower intelligence refers to intelligence = 1; sat refers to student's satisfaction degree with the course where least satisfaction refers to sat = 1;"}
{"sample_id": 901, "db_id": "cs_semester", "final": {"question": "Which of the two courses, \"Advanced Operating System\" or \"Intro to BlockChain', did most of the students receive an A in?", "sql": "SELECT T2.name FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.grade = 'A' AND T2.name IN ('Advanced Operating System', 'Intro to BlockChain') GROUP BY T2.name ORDER BY COUNT(T1.student_id) DESC LIMIT 1", "source_tables": ["course", "registration"]}, "evidence": "A refers to an excellent grade in which grade = 'A';"}
{"sample_id": 902, "db_id": "cs_semester", "final": {"question": "What is the popularity of the professor who advises the highest number of students with the highest research ability?", "sql": "SELECT T2.popularity FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id GROUP BY T1.prof_id, T1.capability ORDER BY COUNT(T1.student_id) DESC, T1.capability DESC LIMIT 1", "source_tables": ["prof", "ra"]}, "evidence": "professor with the highest research ability refers to prof_id where MAX(capability);"}
{"sample_id": 903, "db_id": "cs_semester", "final": {"question": "What is the average number of students who registered for the courses with a difficulty of 4?", "sql": "SELECT CAST(COUNT(T1.student_id) AS REAL) / COUNT(DISTINCT T2.course_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.diff = 4", "source_tables": ["course", "registration"]}, "evidence": "diff refers to difficulty; DIVIDE(COUNT(student_id where diff = 4), COUNT(course_id where diff = 4));"}
{"sample_id": 904, "db_id": "cs_semester", "final": {"question": "How many students, who have a GPA between 3 to 4, failed a course?", "sql": "SELECT COUNT(T2.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T2.grade IS NULL AND T1.gpa BETWEEN 3 AND 4", "source_tables": ["student", "registration"]}, "evidence": "GPA is an abbreviated name of Grade Point Average where GPA between 3 to 4 refers to gpa BETWEEN 3 AND 4; If grade is null or empty, it means that this student fails to pass this course;"}
{"sample_id": 905, "db_id": "cs_semester", "final": {"question": "How many students taking a bachelor's degree received an A in all of the courses that they took?", "sql": "SELECT COUNT(T2.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T2.grade = 'A' AND T1.type = 'UG'", "source_tables": ["student", "registration"]}, "evidence": "bachelor's degree is an undergraduate degree in which type = 'UG'; A refers to an excellent grade in which grade = 'A';"}
{"sample_id": 906, "db_id": "cs_semester", "final": {"question": "What is the average GPA of the students with the highest research capability and high salary? List the full names of the students.", "sql": "SELECT AVG(T2.gpa), T2.f_name, T2.l_name FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'high' AND T1.capability = 5 GROUP BY T2.student_id", "source_tables": ["student", "ra"]}, "evidence": "the highest research capability refers to capability = 5; high salary refers to salary = 'high'; prof_id refers to professor\u2019s ID; GPA is an abbreviated name of Grade Point Average where average GPA refers to AVG(gpa);"}
{"sample_id": 907, "db_id": "cs_semester", "final": {"question": "List the professors' IDs and students' IDs with the lowest research ability.", "sql": "SELECT prof_id, student_id FROM RA WHERE capability = ( SELECT MIN(capability) FROM RA )", "source_tables": ["ra"]}, "evidence": "the lowest research ability refers to MIN(capability); professor\u2019s ID refers to prof_id;"}
{"sample_id": 908, "db_id": "cs_semester", "final": {"question": "Name the professor who got graduation from the University of Boston.", "sql": "SELECT first_name, last_name FROM prof WHERE graduate_from = 'University of Boston'", "source_tables": ["prof"]}, "evidence": "Name the professor refers to full name which includes f_name and l_name;"}
{"sample_id": 909, "db_id": "cs_semester", "final": {"question": "List the courses' IDs and students' IDs who failed to pass the course.", "sql": "SELECT course_id, student_id FROM registration WHERE grade IS NULL OR grade = ''", "source_tables": ["registration"]}, "evidence": "If grade is null or empty, it means that this student fails to pass the course;"}
{"sample_id": 910, "db_id": "cs_semester", "final": {"question": "What is the male and female ratio among the professors?", "sql": "SELECT CAST(SUM(CASE WHEN gender = 'Male' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender = 'Female' THEN 1 ELSE 0 END) FROM prof", "source_tables": ["prof"]}, "evidence": "DIVIDE(COUNT(prof_id where gender = 'Male'), COUNT(prof_id where gender = 'Female'));"}
{"sample_id": 911, "db_id": "cs_semester", "final": {"question": "Describe the names and credits of the least difficult courses.", "sql": "SELECT name, credit FROM course WHERE diff = ( SELECT MIN(diff) FROM course )", "source_tables": ["course"]}, "evidence": "diff refers to difficulty; the least difficult courses refer to MIN(diff);"}
{"sample_id": 912, "db_id": "cs_semester", "final": {"question": "Describe the students' full names and GPAs under the supervision of the most popular professor.", "sql": "SELECT T3.f_name, T3.l_name, T3.gpa FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id ORDER BY T1.popularity DESC LIMIT 1", "source_tables": ["prof", "student", "ra"]}, "evidence": "student's full names = f_name, l_name; most popular refers to MAX(popularity);"}
{"sample_id": 913, "db_id": "cs_semester", "final": {"question": "Provide the full names and emails of unpaid research assistants.", "sql": "SELECT T2.f_name, T2.l_name, T2.email FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'free'", "source_tables": ["student", "ra"]}, "evidence": "full names = f_name, l_name; research assistant refers to the student who serves for research where the abbreviation is RA; unpaid research assistant refers to salary = 'free';"}
{"sample_id": 914, "db_id": "cs_semester", "final": {"question": "List the research assistants' full names, capabilities and GPAs who were under the supervision of Merwyn Conkay.", "sql": "SELECT T3.f_name, T3.l_name, T2.capability, T3.gpa FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T1.first_name = 'Merwyn' AND T1.last_name = 'Conkay'", "source_tables": ["prof", "student", "ra"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; full names = f_name, l_name;"}
{"sample_id": 915, "db_id": "cs_semester", "final": {"question": "Describe the students' full names and grades in Intro to BlockChain course.", "sql": "SELECT T1.f_name, T1.l_name, T2.grade FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Intro to BlockChain'", "source_tables": ["student", "course", "registration"]}, "evidence": "student's full names = f_name, l_name;"}
{"sample_id": 916, "db_id": "cs_semester", "final": {"question": "Among students registered for the most difficult course, list the students' full names who got grade A.", "sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.grade = 'A' ORDER BY T3.diff DESC LIMIT 1", "source_tables": ["student", "course", "registration"]}, "evidence": "difficulty refers to diff; most difficult course refers to MAX(diff); student's full names = f_name, l_name;"}
{"sample_id": 917, "db_id": "cs_semester", "final": {"question": "Describe the full names and graduated universities of the professors who advised Olia Rabier.", "sql": "SELECT T1.first_name, T1.last_name, T1.graduate_from FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Olia' AND T3.l_name = 'Rabier'", "source_tables": ["prof", "student", "ra"]}, "evidence": "full names of the professors = first_name, last_name; graduated universities of the professors refers to graduate_from;"}
{"sample_id": 918, "db_id": "cs_semester", "final": {"question": "Name the students of the Advanced Database Systems course with the highest satisfaction.", "sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Advanced Database Systems' ORDER BY T2.sat DESC LIMIT 1", "source_tables": ["student", "course", "registration"]}, "evidence": "full the students = f_name, l_name; course refers to name; satisfaction refers to sat; highest satisfaction refers to MAX(sat);"}
{"sample_id": 919, "db_id": "cs_semester", "final": {"question": "Calculate the GPA of the semester for Laughton Antonio.", "sql": "SELECT CAST(SUM(T3.credit * CASE T1.grade WHEN 'A' THEN 4 WHEN 'B' THEN 3 WHEN 'C' THEN 2 WHEN 'D' THEN 1 ELSE 1 END) AS REAL) / COUNT(T3.credit) FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T1.course_id = T3.course_id WHERE T2.f_name = 'Laughton' AND T2.l_name = 'Antonio'", "source_tables": ["student", "course", "registration"]}, "evidence": "GPA of the semester = DIVIDE(SUM(MULTIPLY(credit, grade)), SUM(credit)); grade 'A' refers to gpa = 4; grade 'B' refers to gpa = 3; grade 'C' refers to gpa = 2; grade 'D' refers to gpa = 1;"}
{"sample_id": 920, "db_id": "cs_semester", "final": {"question": "Provide the registered courses' names by undergraduate students with GPA of 3.7 and above.", "sql": "SELECT DISTINCT T1.f_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.type = 'UG' AND T1.gpa > 3.7", "source_tables": ["student", "course", "registration"]}, "evidence": "Undergraduate students refers to type = 'UG'; GPA of 3.7 and above refers to gpa > 3.7;"}
{"sample_id": 967, "db_id": "computer_student", "final": {"question": "What is the average number of students for each advisor?", "sql": "SELECT CAST(COUNT(p_id) AS REAL) / COUNT(DISTINCT p_id_dummy) AS avgnum FROM advisedBy GROUP BY p_id_dummy", "source_tables": ["advisedby"]}, "evidence": "students refers to advisedBy.p_id; advisor refers to p_id_dummy; average number = avg(count(advisedBy.p_id))"}
{"sample_id": 968, "db_id": "computer_student", "final": {"question": "How many professors are teaching course ID 18?", "sql": "SELECT COUNT(DISTINCT p_id) FROM taughtBy WHERE course_id = 18", "source_tables": ["taughtby"]}, "evidence": "professors refers to taughtBy.p_id; course ID 18 refers to taughtBy.course_id"}
{"sample_id": 969, "db_id": "computer_student", "final": {"question": "List all the course IDs for professional or master/graduate courses.", "sql": "SELECT course_id FROM course WHERE courseLevel = 'Level_500'", "source_tables": ["course"]}, "evidence": "professional or master/graduate courses refers to courseLevel = 'Level_500'"}
{"sample_id": 970, "db_id": "computer_student", "final": {"question": "How many courses are there for basic or medium undergraduate courses?", "sql": "SELECT COUNT(course_id) FROM course WHERE courseLevel = 'Level_300'", "source_tables": ["course"]}, "evidence": "basic or medium undergraduate courses refers to courseLevel = 'Level_300'; courses refers to course.course_id"}
{"sample_id": 971, "db_id": "computer_student", "final": {"question": "List the ID of all professors who are not faculty member along with the courses taught by him/her.", "sql": "SELECT T2.p_id, T2.course_id FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id WHERE T1.professor = 1 AND T1.hasPosition <> 0", "source_tables": ["person", "taughtby"]}, "evidence": "ID of all professors refers to person.p_id where professor = 1; not faculty member refers to hasPosition = 0; courses refers to taughtBy.course_id"}
{"sample_id": 972, "db_id": "computer_student", "final": {"question": "Provide the ID of professors who are teaching high-level or harder undergraduate course.", "sql": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_400'", "source_tables": ["course", "taughtby"]}, "evidence": "ID of professors refers to taughtBy.p_id; high-level or harder undergraduate course refers to courseLevel = 'Level_400'"}
{"sample_id": 973, "db_id": "computer_student", "final": {"question": "What are the courses taught by the advisors who gave advice to student with ID 376?", "sql": "SELECT T3.course_id FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id INNER JOIN taughtBy AS T3 ON T2.p_id = T3.p_id WHERE T1.p_id = 141", "source_tables": ["person", "taughtby", "advisedby"]}, "evidence": "courses refers to course_id; advisors refers to p_id_dummy and taughtBy.p_id; student with ID 376 refers to advisedBy.p_id = 376"}
{"sample_id": 974, "db_id": "computer_student", "final": {"question": "Name the advisors for students in Year 3 of the program.", "sql": "SELECT T1.p_id FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_3'", "source_tables": ["person", "advisedby"]}, "evidence": "advisors refers to p_id_dummy; students in Year 3 of the program refers to yearsInProgram = 'Year_3'"}
{"sample_id": 975, "db_id": "computer_student", "final": {"question": "Which level of courses is taught by professor ID 297?", "sql": "SELECT T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.p_id = 297", "source_tables": ["course", "taughtby"]}, "evidence": "professor ID 297 refers to taughtBy.p_id = 297"}
{"sample_id": 976, "db_id": "computer_student", "final": {"question": "What level is course 165? List the professors who teach the course.", "sql": "SELECT T1.courseLevel, T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.course_id = 165", "source_tables": ["course", "taughtby"]}, "evidence": "course 165 refers to course_id = 165; professors refers to taughtBy.p_id"}
{"sample_id": 977, "db_id": "computer_student", "final": {"question": "List the ID and years in program for students taught by advisor with ID 5.", "sql": "SELECT T1.p_id, T2.yearsInProgram FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T1.p_id_dummy = 5", "source_tables": ["person", "advisedby"]}, "evidence": "advisor with ID 5 refers to p_id_dummy = 5"}
{"sample_id": 978, "db_id": "computer_student", "final": {"question": "State the courses and level of courses by professors who are faculty employees.", "sql": "SELECT T3.course_id, T3.courseLevel FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T1.course_id WHERE T2.hasPosition = 'Faculty_eme'", "source_tables": ["course", "person", "taughtby"]}, "evidence": "professors who are faculty employees refers to professor = 1; faculty employees refers to hasPosition = 'Faculty_eme'"}
{"sample_id": 979, "db_id": "computer_student", "final": {"question": "Find the ID of advisor of student ID 80 and state the level of courses taught by him/her.", "sql": "SELECT T1.p_id_dummy, T2.courseLevel FROM advisedBy AS T1 INNER JOIN course AS T2 ON T1.p_id = T2.course_id INNER JOIN taughtBy AS T3 ON T2.course_id = T3.course_id WHERE T1.p_id = 80", "source_tables": ["course", "taughtby", "advisedby"]}, "evidence": "ID of advisor refers to p_id_dummy; student ID 80 refers to advisedBy.p_id = 80; level of courses refers to courseLevel"}
{"sample_id": 980, "db_id": "computer_student", "final": {"question": "Provide the ID of professors who teach in both harder undergraduate course and master/graduate courses.", "sql": "SELECT DISTINCT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_400' OR T1.courseLevel = 'Level_500'", "source_tables": ["course", "taughtby"]}, "evidence": "harder undergraduate course refers to courseLevel = 'Level_400'; master/graduate courses refers to courseLevel = 'Level_500'; ID of professors refers to taughtBy.p_id"}
{"sample_id": 981, "db_id": "computer_student", "final": {"question": "Who are the professors who gave advice to students in the 12th years of program?", "sql": "SELECT T1.p_id_dummy FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_12'", "source_tables": ["person", "advisedby"]}, "evidence": "professors refers to p_id_dummy; 12th years of program refers to yearsInProgram = 'Year_12'"}
{"sample_id": 982, "db_id": "computer_student", "final": {"question": "Which are the courses with the most number of professors? State the course ID and the level of the course.", "sql": "SELECT T1.course_id, T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id, T1.courseLevel ORDER BY COUNT(T1.course_id) DESC LIMIT 1", "source_tables": ["course", "taughtby"]}, "evidence": "courses refers taughtBy.course_id; most number of professors\u00a0 refers to max(count(taughtBy.p_id)); level of the course refers to courseLevel"}
{"sample_id": 983, "db_id": "computer_student", "final": {"question": "How many basic and medium undergraduate courses are there?", "sql": "SELECT COUNT(*) FROM course WHERE courseLevel = 'Level_300'", "source_tables": ["course"]}, "evidence": "basic and medium undergraduate courses refers to courseLevel = 'Level_300' and courses refers to course.course_id"}
{"sample_id": 984, "db_id": "computer_student", "final": {"question": "How many people teaches course no.11?", "sql": "SELECT COUNT(*) FROM taughtBy WHERE course_id = 11", "source_tables": ["taughtby"]}, "evidence": "people refers to taughtBy.p_id; course no.11 refers to course_id = 11"}
{"sample_id": 985, "db_id": "computer_student", "final": {"question": "Which course has more teachers, course no.16 or course no.18?", "sql": "SELECT course_id FROM taughtBy WHERE course_id = 11 OR course_id = 18 GROUP BY course_id ORDER BY COUNT(course_id) DESC LIMIT 1", "source_tables": ["taughtby"]}, "evidence": "teachers refers to taughtBy.p_id; course no.16 refers to course_id = 16; course no.18 refers to course_id = 18"}
{"sample_id": 986, "db_id": "computer_student", "final": {"question": "How many teachers are faculty employees?", "sql": "SELECT COUNT(*) FROM person WHERE hasPosition = 'Faculty_eme'", "source_tables": ["person"]}, "evidence": "teachers refers to professor = 1; faculty employees refers to hasPosition = 'Faculty_eme'"}
{"sample_id": 987, "db_id": "computer_student", "final": {"question": "Please list the IDs of the teachers who have advised more than 4 others to teach.", "sql": "SELECT p_id_dummy FROM advisedBy GROUP BY p_id_dummy HAVING COUNT(p_id_dummy) > 4", "source_tables": ["advisedby"]}, "evidence": "teachers refers to p_id_dummy; have advised more than 4 others refers to count(advisedBy.p_id) > 4"}
{"sample_id": 988, "db_id": "computer_student", "final": {"question": "How many basic or medium undergraduate courses are taught by a professor?", "sql": "SELECT COUNT(*) FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id INNER JOIN person AS T3 ON T3.p_id = T2.p_id WHERE T1.courseLevel = 'Level_300' AND T3.professor = 1", "source_tables": ["course", "taughtby", "person"]}, "evidence": "basic or medium undergraduate courses refers to courseLevel = 'Level_300'; professor refers to professor = 1"}
{"sample_id": 989, "db_id": "computer_student", "final": {"question": "Please list the IDs of all the faculty employees who teaches a basic or medium undergraduate course.", "sql": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id INNER JOIN person AS T3 ON T3.p_id = T2.p_id WHERE T1.courseLevel = 'Level_300' AND T3.hasPosition = 'Faculty_eme'", "source_tables": ["course", "taughtby", "person"]}, "evidence": "faculty employees refers to hasPosition = 'Faculty_eme'; basic or medium undergraduate course refers to courseLevel = 'Level_300'"}
{"sample_id": 990, "db_id": "computer_student", "final": {"question": "Is the teacher who teaches course no.9 a faculty member?", "sql": "SELECT T2.hasPosition FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T1.course_id = 9", "source_tables": ["person", "taughtby"]}, "evidence": "teacher refers to taughtBy.p_id; course no.9 refers to taughtBy.course_id = 9; faculty member refers to hasPosition ! = 0"}
{"sample_id": 991, "db_id": "computer_student", "final": {"question": "Please list the levels of the all courses taught by teacher no.79.", "sql": "SELECT T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.p_id = 79", "source_tables": ["course", "taughtby"]}, "evidence": "levels of the all courses refers to courseLevel; teacher no.79 refers to taughtBy.p_id = 79"}
{"sample_id": 992, "db_id": "computer_student", "final": {"question": "Please list the IDs of the advisors of the students who are in the 5th year of their program.", "sql": "SELECT T1.p_id_dummy FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_5'", "source_tables": ["person", "advisedby"]}, "evidence": "IDs of the advisors refers to p_id_dummy; in the 5th year of their program refers to yearsInProgram = 'Year_5'"}
{"sample_id": 993, "db_id": "computer_student", "final": {"question": "How many students are advised to teach by a professor teaching basic or medium undergraduate courses?", "sql": "SELECT COUNT(DISTINCT T4.p_id) FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id INNER JOIN advisedBy AS T4 ON T4.p_id = T1.p_id WHERE T1.professor = 1 AND T3.courseLevel = 'Level_300'", "source_tables": ["course", "person", "taughtby", "advisedby"]}, "evidence": "students refers to advisedBy.p_id; professor refers to p_id_dummy and taughtBy.p_id and professor = 1; basic or medium undergraduate courses refers to courseLevel = 'Level_300'"}
{"sample_id": 994, "db_id": "computer_student", "final": {"question": "Among the courses that are basic or medium undergraduate courses, how many of them are taught by a faculty member?", "sql": "SELECT COUNT(*) FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id INNER JOIN person AS T3 ON T2.p_id = T3.p_id WHERE T3.professor = 1 AND T1.courseLevel = 'Level_300'", "source_tables": ["course", "taughtby", "person"]}, "evidence": "courses that are basic or medium undergraduate courses refers to courseLevel = 'Level_300'; faculty member refers to hasPosition ! = 0"}
{"sample_id": 995, "db_id": "computer_student", "final": {"question": "For the professor who advised student no.6, please list the IDs of the courses he or she teaches.", "sql": "SELECT T2.course_id FROM taughtBy AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id INNER JOIN advisedBy AS T3 ON T3.p_id = T1.p_id WHERE T1.p_id = 9", "source_tables": ["course", "taughtby", "advisedby"]}, "evidence": "professor refers to p_id_dummy and professor = 1; student no.6 refers to advisedBy.p_id = 6; IDs of the courses refers to taughtBy.course_id"}
{"sample_id": 996, "db_id": "computer_student", "final": {"question": "What is the level of the course with the most number of teachers?", "sql": "SELECT T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY COUNT(T2.p_id) DESC LIMIT 1", "source_tables": ["course", "taughtby"]}, "evidence": "level of the course refers to courseLevel; course with most number of teachers refers to course_id = max(count(taughtBy.p_id))"}
{"sample_id": 997, "db_id": "computer_student", "final": {"question": "Please list the IDs of the professors that teaches more than 3 courses.", "sql": "SELECT T1.p_id FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.professor = 1 GROUP BY T1.p_id HAVING COUNT(DISTINCT T1.course_id) > 3", "source_tables": ["person", "taughtby"]}, "evidence": "IDs of the professors refers to taughtBy.p_id and professor = 1; teaches more than 3 courses\u00a0 refers to count(course_id) > 3"}
{"sample_id": 998, "db_id": "computer_student", "final": {"question": "Please list the IDs of the top 3 professors that teaches the most courses.", "sql": "SELECT T1.p_id FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.professor = 1 GROUP BY T1.p_id ORDER BY COUNT(*) DESC LIMIT 3", "source_tables": ["person", "taughtby"]}, "evidence": "IDs of the professors refers to taughtBy.p_id and professor = 1; teaches the most courses refers to max(count(course_id))"}
{"sample_id": 999, "db_id": "computer_student", "final": {"question": "In total, all the students in the 3rd year of their program are advised by how many professors?", "sql": "SELECT COUNT(DISTINCT T1.p_id_dummy) FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_3'", "source_tables": ["person", "advisedby"]}, "evidence": "3rd year of their program refers to yearsInProgram = 'Year_3'; professors refers to p_id_dummy"}
{"sample_id": 1000, "db_id": "computer_student", "final": {"question": "What is the average number of courses taught by a professor?", "sql": "SELECT CAST(COUNT(T1.course_id) AS REAL) / COUNT(DISTINCT T2.p_id) AS num FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.professor = 1", "source_tables": ["person", "taughtby"]}, "evidence": "professor refers to professor = 1; average number of courses = divide(count(taughtBy.course_id), count(taughtBy.p_id) where professor = 1 )"}
{"sample_id": 1001, "db_id": "computer_student", "final": {"question": "What is the ratio of professors and students?", "sql": "SELECT CAST(SUM(CASE  WHEN professor = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE  WHEN student = 1 THEN 1 ELSE 0 END) AS per FROM person", "source_tables": ["person"]}, "evidence": "professors refers to professor = 1; students refers to student = 1; ratio = divide(count(person.p_id) when professor = 1, count(person.p_id) when student = 1)"}
{"sample_id": 1002, "db_id": "computer_student", "final": {"question": "Calculate the percentage of high-level undergraduate course.", "sql": "SELECT CAST(SUM(CASE  WHEN courseLevel = 'Level_400' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS per FROM course", "source_tables": ["course"]}, "evidence": "high-level undergraduate course refers to courseLevel = 'Level_400'; percentage = divide(count(course.course_id) when courseLevel = 'Level_400', count(course.course_id)) * 100%"}
{"sample_id": 1003, "db_id": "computer_student", "final": {"question": "List down all the person IDs who taught course ID of 18.", "sql": "SELECT p_id FROM taughtBy WHERE course_id = 18", "source_tables": ["taughtby"]}, "evidence": "person IDs refers to taughtBy.p_id; course ID of 18\u00a0 refers to taughtBy.course_id = 18"}
{"sample_id": 1004, "db_id": "computer_student", "final": {"question": "Provide the position status and IDs of professor who advised student ID \"303\".", "sql": "SELECT T2.hasPosition, T1.p_id_dummy FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id_dummy = T2.p_id WHERE T1.p_id = 303", "source_tables": ["person", "advisedby"]}, "evidence": "position status refers to hasPosition; IDs of professor refers to p_id_dummy; student ID \"303\" refers to advisedBy.p_id = 303"}
{"sample_id": 1005, "db_id": "computer_student", "final": {"question": "List the person IDs and course levels of the affiliated professors in faculty.", "sql": "SELECT T1.p_id, T3.courseLevel FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id WHERE T1.hasPosition = 'Faculty_aff'", "source_tables": ["course", "person", "taughtby"]}, "evidence": "person IDs refers to person.p_id; affiliated professors in faculty refers to professor = 1 and hasPosition = 'Faculty_aff'"}
{"sample_id": 1006, "db_id": "computer_student", "final": {"question": "Describe the year in program and in phase status for the student with most number in advisor.", "sql": "SELECT T2.yearsInProgram, T2.inPhase FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id GROUP BY T1.p_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["person", "advisedby"]}, "evidence": "student refers to advisedBy.p_id; most number in advisor refers to max(count(p_id_dummy))"}
{"sample_id": 1007, "db_id": "computer_student", "final": {"question": "List down the advised student IDs and IDs of employing professor in faculty.", "sql": "SELECT T1.p_id, T2.p_id FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id_dummy = T2.p_id WHERE hasPosition = 'Faculty_eme'", "source_tables": ["person", "advisedby"]}, "evidence": "advised student IDs refers to person.p_id; IDs of employing professor in faculty refers to p_id_dummy and hasPosition = 'Faculty_eme'"}
{"sample_id": 1008, "db_id": "computer_student", "final": {"question": "List the course IDs and levels of person IDs from 40 to 50.", "sql": "SELECT T1.course_id, T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.p_id BETWEEN 40 AND 50", "source_tables": ["course", "taughtby"]}, "evidence": "course IDs and levels refers to course.course_id and courseLevel; person IDs from 40 to 50 refers to taughtBy.p_id between 40 and 50"}
{"sample_id": 1009, "db_id": "computer_student", "final": {"question": "Describe the course level and list of person IDs who taught course ID of 147.", "sql": "SELECT T1.courseLevel, T1.course_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.p_id = 141", "source_tables": ["course", "taughtby"]}, "evidence": "person IDs refers to taughtBy.p_id; course ID of 147 refers to course.course_id = 147"}
{"sample_id": 1039, "db_id": "talkingdata", "final": {"question": "What is the device id of the oldest user?", "sql": "SELECT device_id FROM gender_age WHERE age = ( SELECT MAX(age) FROM gender_age )", "source_tables": ["gender_age"]}, "evidence": "oldest user refers to MAX(age);"}
{"sample_id": 1040, "db_id": "talkingdata", "final": {"question": "How many events were held at coordinate 97,40?", "sql": "SELECT COUNT(event_id) FROM 'events' WHERE latitude = 40 AND longitude = 97", "source_tables": ["events"]}, "evidence": "coordinate 97,40 refers to longitude = 97 AND latitude = 40;"}
{"sample_id": 1041, "db_id": "talkingdata", "final": {"question": "How many male users are in the age group of M32-38?", "sql": "SELECT COUNT(gender) FROM gender_age WHERE gender = 'M' AND 'group' = 'M32-38'", "source_tables": ["gender_age"]}, "evidence": "male refers to gender = 'M'; age group refers to group; `group` = 'M32-38';"}
{"sample_id": 1042, "db_id": "talkingdata", "final": {"question": "How many female users over the age of 50 are there?", "sql": "SELECT COUNT(gender) FROM gender_age WHERE age > 50 AND gender = 'F'", "source_tables": ["gender_age"]}, "evidence": "female refers to gender = 'F'; over the age of 50 refers to age > 50;"}
{"sample_id": 1043, "db_id": "talkingdata", "final": {"question": "How many active users were there in the event id 2?", "sql": "SELECT COUNT(is_active) FROM app_events WHERE event_id = 2 AND is_active = 1", "source_tables": ["app_events"]}, "evidence": "active users refers to is_active = 1;"}
{"sample_id": 1044, "db_id": "talkingdata", "final": {"question": "What is the gender of the youngest user?", "sql": "SELECT gender FROM gender_age WHERE age = ( SELECT MIN(age) FROM gender_age )", "source_tables": ["gender_age"]}, "evidence": "youngest user refers to MIN(age);"}
{"sample_id": 1045, "db_id": "talkingdata", "final": {"question": "What is the name of the category which most users belong to?", "sql": "SELECT T.category FROM ( SELECT T2.category, COUNT(T1.app_id) AS num FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T2.label_id = T1.label_id GROUP BY T1.app_id, T2.category ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["label_categories", "app_labels"]}, "evidence": "most users belong to refers to MAX(COUNT(app_id)); name of category refers to category;"}
{"sample_id": 1046, "db_id": "talkingdata", "final": {"question": "What is the model of the oldest user's device?", "sql": "SELECT T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id ORDER BY T2.age DESC LIMIT 1", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "model of the device refers to device_model; oldest user refers to MAX(age);"}
{"sample_id": 1047, "db_id": "talkingdata", "final": {"question": "How many users are there in the Home Decoration category?", "sql": "SELECT COUNT(T1.app_id) FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T2.label_id = T1.label_id WHERE T2.category = 'Home Decoration'", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1048, "db_id": "talkingdata", "final": {"question": "How many male users are active in the events held on 5/1/2016?", "sql": "SELECT COUNT(T3.gender) FROM app_events AS T1 INNER JOIN events_relevant AS T2 ON T2.event_id = T1.event_id INNER JOIN gender_age AS T3 ON T3.device_id = T2.device_id WHERE T1.is_active = 1 AND T3.gender = 'M' AND T2.timestamp LIKE '2016-05-01%'", "source_tables": ["app_events", "gender_age", "events_relevant"]}, "evidence": "male refers to gender = 'M'; active refers to is_active = 1; on 5/1/2016 refers to timestamp LIKE '2016-05-01%';"}
{"sample_id": 1049, "db_id": "talkingdata", "final": {"question": "How many female users use ZenFone 5 devices?", "sql": "SELECT COUNT(T1.gender) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T2.device_id = T1.device_id WHERE T1.gender = 'F' AND T2.device_model = 'ZenFone 5'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "female refers to gender = 'F'; ZenFone 5 refers to device_model = 'ZenFone 5';"}
{"sample_id": 1050, "db_id": "talkingdata", "final": {"question": "What is the age of the oldest active user that participated in the event held on 5/6/2016 at coordinates 121, 31?", "sql": "SELECT T3.age FROM app_events AS T1 INNER JOIN events_relevant AS T2 ON T1.event_id = T2.event_id INNER JOIN gender_age AS T3 ON T2.device_id = T3.device_id WHERE T1.is_active = 1 AND T2.longitude = 121 AND T2.latitude = 31 AND SUBSTR(T2.timestamp, 1, 10) = '2016-05-06' ORDER BY T3.age DESC LIMIT 1", "source_tables": ["app_events", "gender_age", "events_relevant"]}, "evidence": "oldest user refers to MAX(age); active user refers to is_active = 1; on 5/6/2016 refers to timestamp LIKE '2016-05-06%'; coordinates 121, 31 refers to longitude = 121 AND latitude = 31;"}
{"sample_id": 1051, "db_id": "talkingdata", "final": {"question": "What is the most common device model among female users between the ages 27 to 28?", "sql": "SELECT T2.device_model FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.'group' = 'F27-28' AND T1.gender = 'F' ORDER BY T2.device_id DESC LIMIT 1", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "most common device model refers to MAX(COUNT(device_id)); female refers to gender = 'F'; between the ages 27 to 28 refers to group = 'F27-28';"}
{"sample_id": 1052, "db_id": "talkingdata", "final": {"question": "What are the categories of the top 2 oldest events?", "sql": "SELECT T4.category FROM events_relevant AS T1 INNER JOIN app_events_relevant AS T2 ON T1.event_id = T2.event_id INNER JOIN app_labels AS T3 ON T3.app_id = T2.app_id INNER JOIN label_categories AS T4 ON T3.label_id = T4.label_id ORDER BY T1.timestamp LIMIT 2", "source_tables": ["label_categories", "app_events_relevant", "app_labels", "events_relevant"]}, "evidence": "oldest event refers to MIN(timestamp);"}
{"sample_id": 1053, "db_id": "talkingdata", "final": {"question": "What is the gender of the majority of Vivo phone users?", "sql": "SELECT T.gender FROM ( SELECT T2.gender, COUNT(T2.gender) AS num FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'vivo' GROUP BY T2.gender ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "majority of Vivo phone users refers to MAX(COUNT(phone_brand = 'vivo'));"}
{"sample_id": 1054, "db_id": "talkingdata", "final": {"question": "Which category has the highest number of users?", "sql": "SELECT T.category FROM ( SELECT T2.category, COUNT(T1.app_id) AS num FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T2.label_id = T1.label_id GROUP BY T1.app_id, T2.category ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["label_categories", "app_labels"]}, "evidence": "highest number of users refers to MAX(COUNT(app_id));"}
{"sample_id": 1055, "db_id": "talkingdata", "final": {"question": "How many users belong to the MOBA category?", "sql": "SELECT COUNT(T2.app_id) FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T2.label_id = T1.label_id WHERE T1.category = 'MOBA'", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1056, "db_id": "talkingdata", "final": {"question": "What is the percentage of female OPPO users against the male OPPO users?", "sql": "SELECT SUM(IIF(T2.gender = 'F', 1, 0)) * 100 / COUNT(T2.device_id) AS perFemale , SUM(IIF(T2.gender = 'M', 1, 0)) * 100 / COUNT(T2.device_id) AS perMale FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'OPPO'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "percentage = DIVIDE(MULTIPLY(CONCAT(COUNT(device_id WHERE phone_brand = 'OPPO' AND gender = 'F'), 100), COUNT(device_id)), '%') AS 'the percentage of female OPPO users'; DIVIDE(MULTIPLY(CONCAT(COUNT(device_id WHERE phone_brand = 'OPPO' AND gender = 'M'), 100), COUNT(device_id)), '%') AS 'the percentage of male OPPO users';"}
{"sample_id": 1057, "db_id": "talkingdata", "final": {"question": "What were the locations of the events on 8th May, 2016?", "sql": "SELECT longitude, latitude FROM 'events' WHERE SUBSTR('timestamp', 1, 10) = '2016-05-08'", "source_tables": ["events"]}, "evidence": "location = longitude, latitude; on 8th May, 2016 refers to `timestamp` LIKE '2016-05-08%';"}
{"sample_id": 1058, "db_id": "talkingdata", "final": {"question": "List the app users IDs and installed status for the event ID of 844.", "sql": "SELECT app_id , IIF(is_installed = 1, 'YES', 'NO') AS status FROM app_events WHERE event_id = 844", "source_tables": ["app_events"]}, "evidence": "app user IDs refers to app_id; is_installed = 1 means the app status is installed; is_installed = 0 means the app status is not installed;"}
{"sample_id": 1059, "db_id": "talkingdata", "final": {"question": "How many events were there on 30th April, 2016?", "sql": "SELECT COUNT(event_id) FROM events WHERE SUBSTR('timestamp', 1, 10) = '2016-04-30'", "source_tables": ["events"]}, "evidence": "on 30th April, 2016 refers to `timestamp` LIKE '2016-04-30%';"}
{"sample_id": 1060, "db_id": "talkingdata", "final": {"question": "How many users used Vivo Xplay3S model?", "sql": "SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE device_model = 'Xplay3S' AND phone_brand = 'vivo'", "source_tables": ["phone_brand_device_model2"]}, "evidence": "Vivo Xplay3S model refers to phone_brand = 'vivo' AND device_model = 'Xplay3S';"}
{"sample_id": 1061, "db_id": "talkingdata", "final": {"question": "What is the ratio of male and female users in 27-28 age group?", "sql": "SELECT SUM(IIF(gender = 'M' AND 'group' = 'M27-28', 1, 0)) / SUM(IIF(gender = 'F' AND 'group' = 'F27-28', 1, 0)) AS r FROM gender_age", "source_tables": ["gender_age"]}, "evidence": "ratio = DIVIDE(COUNT(device_id WHERE gender = 'M' AND `group` = 'M27-28'), COUNT(device_id WHERE gender = 'F' AND `group` = 'F27-28')); 27-28 age group refers to `group` = 'F27-28';"}
{"sample_id": 1062, "db_id": "talkingdata", "final": {"question": "What are the labels' IDs of online shopping and online malls categories?", "sql": "SELECT label_id FROM label_categories WHERE category IN ('online shopping', 'online malls')", "source_tables": ["label_categories"]}, "evidence": ""}
{"sample_id": 1063, "db_id": "talkingdata", "final": {"question": "Describe the phone brands and models of the users who participated in events on 5th May, 2016 at the coordinates of (112,44).", "sql": "SELECT DISTINCT T2.phone_brand, T2.device_model FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T2.device_id = T1.device_id WHERE T1.timestamp LIKE '2016-05-05%' AND T1.longitude = 112 AND T1.latitude = 44", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "models refers to device_model; on 5th May, 2016 refers to timestamp LIKE '2016-05-05%'; coordinates of (112,44) refers to longitude = 112 AND latitude = 44;"}
{"sample_id": 1064, "db_id": "talkingdata", "final": {"question": "Provide the app users IDs and time for the event ID of 82.", "sql": "SELECT T1.app_id, T2.timestamp FROM app_events AS T1 INNER JOIN events AS T2 ON T2.event_id = T1.event_id WHERE T2.event_id = 82", "source_tables": ["events", "app_events"]}, "evidence": "app user IDs refers to app_id; time refers to timestamp;"}
{"sample_id": 1065, "db_id": "talkingdata", "final": {"question": "Describe the device user gender and age of the event ID of 15251.", "sql": "SELECT T1.gender, T1.age FROM gender_age AS T1 INNER JOIN events AS T2 ON T2.device_id = T1.device_id WHERE T2.event_id = 15251", "source_tables": ["events", "gender_age"]}, "evidence": ""}
{"sample_id": 1066, "db_id": "talkingdata", "final": {"question": "How many events did the 88-years-old male users participate on 4th May,2016?", "sql": "SELECT COUNT(T2.event_id) FROM gender_age AS T1 INNER JOIN events AS T2 ON T2.device_id = T1.device_id WHERE T1.gender = 'M' AND SUBSTR('timestamp', 1, 10) = '2016-05-04' AND T1.age = 88", "source_tables": ["events", "gender_age"]}, "evidence": "88-years-old refers to age = 88; male refers to gender = 'M'; on 4th May, 2016 refers to timestamp LIKE '2016-05-04%';"}
{"sample_id": 1067, "db_id": "talkingdata", "final": {"question": "Describe the ages, genders and numbers of events participated by the users at coordinates of (-102,38).", "sql": "SELECT DISTINCT T1.age, T1.gender, COUNT(T2.event_id) FROM gender_age AS T1 INNER JOIN 'events' AS T2 ON T2.device_id = T1.device_id WHERE T2.longitude = -102 AND T2.latitude = 38 GROUP BY T1.age, T1.gender, T2.longitude, T2.latitude", "source_tables": ["events", "gender_age"]}, "evidence": "coordinates of (-102,38) refers to longitude = -102, latitude = 38;"}
{"sample_id": 1068, "db_id": "talkingdata", "final": {"question": "Provide the phone brands and models of the users who were at the coordinates of (80,44).", "sql": "SELECT DISTINCT T1.phone_brand, T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN events AS T2 ON T2.device_id = T1.device_id WHERE T2.longitude = 80 AND T2.latitude = 44", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "models refers to device_model; coordinates of (80,44) refers to longitude = 80 AND latitude = 44;"}
{"sample_id": 1069, "db_id": "talkingdata", "final": {"question": "List the included categories in the event ID of 155.", "sql": "SELECT DISTINCT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T2.label_id = T1.label_id INNER JOIN app_events AS T3 ON T3.app_id = T2.app_id WHERE T3.event_id = 155", "source_tables": ["label_categories", "app_events", "app_labels"]}, "evidence": ""}
{"sample_id": 1070, "db_id": "talkingdata", "final": {"question": "Among HTC Butterfly phone users, list any five devices' IDs used by females.", "sql": "SELECT T2.device_id FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.device_model = 'Butterfly' AND T2.gender = 'F' AND T1.phone_brand = 'HTC' LIMIT 5", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "HTC Butterfly refers to phone_brand = 'HTC' AND device_model = 'Butterfly'; females refers to gender = 'F';"}
{"sample_id": 1071, "db_id": "talkingdata", "final": {"question": "How many app IDs were included under science fiction category?", "sql": "SELECT COUNT(T2.app_id) FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T2.label_id = T1.label_id WHERE T1.category = 'science fiction'", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1072, "db_id": "talkingdata", "final": {"question": "What are the ages and genders of the LG L70 users?", "sql": "SELECT T2.age, T2.gender FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'LG' AND T1.device_model = 'L70'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "LG L70 refers to phone_brand = 'LG' AND device_model = 'L70';"}
{"sample_id": 1073, "db_id": "talkingdata", "final": {"question": "Calculate the percentage of the app user IDs under Industry tag category.", "sql": "SELECT SUM(IIF(T1.category = 'Industry tag', 1, 0)) * 100 / COUNT(T2.app_id) AS per FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T2.label_id = T1.label_id", "source_tables": ["label_categories", "app_labels"]}, "evidence": "percentage = DIVIDE(MULTIPLY(CONCAT(COUNT(app_id WHERE category = 'Industry tag'), 100), COUNT(app_id)),'%');"}
{"sample_id": 1074, "db_id": "talkingdata", "final": {"question": "Among the LG brand users, calculate the percentage of the Nexus 5 model user. What is the ratio of male and female users of it?", "sql": "SELECT SUM(IIF(T1.device_model = 'Nexus 5', 1, 0)) * 100 / COUNT(T1.device_id) AS per , SUM(IIF(T1.device_model = 'Nexus 5' AND T2.gender = 'M', 1, 0)) / SUM(IIF(T1.device_model = 'Nexus 5' AND T2.gender = 'F', 1, 0)) AS r FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'LG'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "LG brand refers to phone_brand = 'LG'; percentage = DIVIDE(MULTIPLY(CONCAT(COUNT(device_id WHERE device_model = 'Nexus 5'), 100), COUNT(device_id)),'%'); ratio = DIVIDE(COUNT(device_id WHERE device_model = 'Nexus 5' AND gender = 'M'), COUNT(device_id WHERE device_model = 'Nexus 5' AND gender = 'F')); Nexus 5 model refers to device_model = 'Nexus 5';"}
{"sample_id": 1075, "db_id": "talkingdata", "final": {"question": "How many users of the app were not active when event no.2 happened?", "sql": "SELECT COUNT(event_id) FROM app_events WHERE event_id = 2 AND is_active = 0", "source_tables": ["app_events"]}, "evidence": "not active refers to is_active = 0; event no. refers to event_id; event_id = 2;"}
{"sample_id": 1076, "db_id": "talkingdata", "final": {"question": "How many events in total have happened on the devices in 2016?", "sql": "SELECT COUNT(event_id) FROM 'events' WHERE SUBSTR('timestamp', 1, 4) = '2016'", "source_tables": ["events"]}, "evidence": "in 2016 refers to `timestamp` LIKE '2016%';"}
{"sample_id": 1077, "db_id": "talkingdata", "final": {"question": "How many events have happened on device no.29182687948017100 in 2016?", "sql": "SELECT COUNT(event_id) FROM 'events' WHERE SUBSTR('timestamp', 1, 4) = '2016' AND device_id = 29182687948017100", "source_tables": ["events"]}, "evidence": "device no. refers to device_id; device_id = 29182687948017100; in 2016 refers to `timestamp` LIKE '2016%';"}
{"sample_id": 1078, "db_id": "talkingdata", "final": {"question": "How many device users are male?", "sql": "SELECT COUNT(device_id) FROM gender_age WHERE gender = 'M'", "source_tables": ["gender_age"]}, "evidence": "male refers to gender = 'M';"}
{"sample_id": 1079, "db_id": "talkingdata", "final": {"question": "What is the age of the oldest device user?", "sql": "SELECT MAX(age) FROM gender_age", "source_tables": ["gender_age"]}, "evidence": "oldest device user refers to MAX(age);"}
{"sample_id": 1080, "db_id": "talkingdata", "final": {"question": "Among the female users of the devices, how many of them are under 30?", "sql": "SELECT COUNT(device_id) FROM gender_age WHERE age < 30 AND gender = 'F'", "source_tables": ["gender_age"]}, "evidence": "female refers to gender = 'F'; under 30 refers to age < 30;"}
{"sample_id": 1081, "db_id": "talkingdata", "final": {"question": "Among the users who use a Galaxy Note 2, how many of them are female?", "sql": "SELECT COUNT(T1.device_id) FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T2.gender = 'F' AND T1.device_model = 'Galaxy Note 2'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "Galaxy Note 2 refers to device_model = 'Galaxy Note 2'; female refers to gender = 'F';"}
{"sample_id": 1082, "db_id": "talkingdata", "final": {"question": "Please list the ages of all the users who use a Galaxy Note 2.", "sql": "SELECT T2.age FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.device_model = 'Galaxy Note 2'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "Galaxy Note 2 refers to device_model = 'Galaxy Note 2';"}
{"sample_id": 1083, "db_id": "talkingdata", "final": {"question": "What is the device model of the device used by the oldest user?", "sql": "SELECT device_model FROM phone_brand_device_model2 WHERE device_id IN ( SELECT device_id FROM gender_age WHERE age = ( SELECT MAX(age) FROM gender_age ) )", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "oldest user refers to MAX(age);"}
{"sample_id": 1084, "db_id": "talkingdata", "final": {"question": "To which user group do most of the users who uses a vivo device belong?", "sql": "SELECT T.'group' FROM ( SELECT T2.'group', COUNT('group') AS num FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'vivo' GROUP BY T2.'group' ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "user group where most of the users belong refers to MAX(COUNT(group)); vivo device refers to phone_brand = 'vivo';"}
{"sample_id": 1085, "db_id": "talkingdata", "final": {"question": "How many app users belong to the category of Securities?", "sql": "SELECT COUNT(T1.app_id) FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T2.label_id = T1.label_id WHERE T2.category = 'Securities'", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1086, "db_id": "talkingdata", "final": {"question": "To which categories does app user no.1977658975649780000 belong?", "sql": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = 1977658975649780000", "source_tables": ["label_categories", "app_labels"]}, "evidence": "app no. refers to app_id; app_id = 1977658975649780000;"}
{"sample_id": 1087, "db_id": "talkingdata", "final": {"question": "Please list the categories of the app users who are not active when event no.2 happened.", "sql": "SELECT DISTINCT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id INNER JOIN app_events AS T3 ON T2.app_id = T3.app_id WHERE T3.event_id = 2 AND T3.is_active = 0", "source_tables": ["label_categories", "app_events", "app_labels"]}, "evidence": "not active refers to is_active = 0; event no. refers to event_id; event_id = 2;"}
{"sample_id": 1088, "db_id": "talkingdata", "final": {"question": "Please list the location coordinates of all the devices with an inactive app user when event no.2 happened.", "sql": "SELECT DISTINCT T2.longitude, T2.latitude FROM app_events AS T1 INNER JOIN events AS T2 ON T2.event_id = T1.event_id WHERE T2.event_id = 2 AND T1.is_active = 0", "source_tables": ["events", "app_events"]}, "evidence": "location coordinates = longitude, latitude; inactive refers to is_active = 0; event no. refers to event_id; event_id = 2;"}
{"sample_id": 1089, "db_id": "talkingdata", "final": {"question": "Among all the times event no.2 happened when the app user was not active, when was the earliest time this situation happened?", "sql": "SELECT T2.timestamp FROM app_events AS T1 INNER JOIN events AS T2 ON T2.event_id = T1.event_id WHERE T1.is_active = 0 AND T2.event_id = 2 ORDER BY T2.timestamp LIMIT 1", "source_tables": ["events", "app_events"]}, "evidence": "event no. refers to event_id; event_id = 2; not active refers to is_active = 0; earliest time refers to MIN(timestamp);"}
{"sample_id": 1090, "db_id": "talkingdata", "final": {"question": "Please list the IDs of the events happened on all the vivo devices.", "sql": "SELECT T2.event_id FROM phone_brand_device_model2 AS T1 INNER JOIN events AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'vivo'", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "IDs of the events refers to event_id; vivo devices refers to phone_brand = 'vivo';"}
{"sample_id": 1091, "db_id": "talkingdata", "final": {"question": "Among the devices with event no.2 happening, how many of them are vivo devices?", "sql": "SELECT COUNT(T1.device_id) FROM phone_brand_device_model2 AS T1 INNER JOIN events AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'vivo' AND T2.event_id = 2", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "event no. refers to event_id; event_id = 2; vivo devices refers to phone_brand = 'vivo';"}
{"sample_id": 1092, "db_id": "talkingdata", "final": {"question": "Please list the time when event no.2 happened on a vivo device.", "sql": "SELECT T1.timestamp FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.event_id = T2.device_id WHERE T2.phone_brand = 'vivo' AND T1.event_id = '2'", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "time refers to timestamp; event no. refers to event_id; event_id = '2'; vivo device refers to phone_brand = 'vivo';"}
{"sample_id": 1093, "db_id": "talkingdata", "final": {"question": "How many events in total have happened on all the vivo devices in the year 2016?", "sql": "SELECT COUNT(T1.event_id) FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.event_id = T2.device_id WHERE STRFTIME('%Y', T1.timestamp) = '2016' AND T2.phone_brand = 'vivo'", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "vivo devices refers to phone_brand = 'vivo'; in the year 2016 refers to year(timestamp) = 2016;"}
{"sample_id": 1094, "db_id": "talkingdata", "final": {"question": "Among the users who uses a vivo device, how many of them are female and under 30?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'F' AND T2.phone_brand = 'vivo' AND T1.age < 30", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "vivo device refers to phone_brand = 'vivo'; female refers to gender = 'F'; under 30 refers to age < 30;"}
{"sample_id": 1095, "db_id": "talkingdata", "final": {"question": "What is the category that the most app users belong to?", "sql": "SELECT T.category FROM ( SELECT T1.category, COUNT(T2.app_id) AS num FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id GROUP BY T1.label_id ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["label_categories", "app_labels"]}, "evidence": "most app users refers to MAX(COUNT(app_id));"}
{"sample_id": 1096, "db_id": "talkingdata", "final": {"question": "What is the brand of the device used by the youngest female user?", "sql": "SELECT phone_brand FROM phone_brand_device_model2 WHERE device_id IN ( SELECT * FROM ( SELECT device_id FROM gender_age WHERE gender = 'F' ORDER BY age LIMIT 1 ) AS T )", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "brand of the device refers to phone_brand; youngest refers to MIN(age); female refers to gender = 'F';"}
{"sample_id": 1097, "db_id": "talkingdata", "final": {"question": "How many users in user group M23-26 use a vivo device?", "sql": "SELECT COUNT(T2.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.'group' = 'M23-26' AND T2.phone_brand = 'vivo'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "user group M23-26 refers to group = 'M23-26'; vivo device refers to phone_brand = 'vivo';"}
{"sample_id": 1098, "db_id": "talkingdata", "final": {"question": "Among all the users who use a vivo device, what is the percentage of the users in the M23-26 user group?", "sql": "SELECT SUM(IIF(T1.'group' = 'M23-26', 1.0, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "vivo device refers to phone_brand = 'vivo'; percentage = MULTIPLY(DIVIDE(COUNT(phone_brand = 'vivo WHERE group = 'M23-26), COUNT(phone_brand = 'vivo)), 100); M23-26 user group refers to group = 'M23-26';"}
{"sample_id": 1099, "db_id": "talkingdata", "final": {"question": "Among all the devices with event no.2 happening, what is the percentage of the device being a vivo phone?", "sql": "SELECT SUM(IIF(T2.phone_brand = 'vivo', 1, 0)) / COUNT(T1.device_id) AS per FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.event_id = T2.device_id WHERE T1.event_id = '2'", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "event no. refers to event_id; event_id = '2'; percentage = SUM(IF(phone_brand = 'vivo',1,0)), COUNT(device_id) WHERE event_id = '2'; vivo phone refers to phone_brand = 'vivo';"}
{"sample_id": 1100, "db_id": "talkingdata", "final": {"question": "What is the average age of all the vivo device users?", "sql": "SELECT AVG(age) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "average age = AVG(age); vivo device refers to phone_brand = 'vivo';"}
{"sample_id": 1101, "db_id": "talkingdata", "final": {"question": "How many female users belong to the age group of 27 to 28?", "sql": "SELECT COUNT(device_id) FROM gender_age WHERE 'group' = 'F27-28' AND gender = 'F'", "source_tables": ["gender_age"]}, "evidence": "female refers to gender = 'F'; age group of 27 to 28 refers to `group` = 'F27-28';"}
{"sample_id": 1102, "db_id": "talkingdata", "final": {"question": "What is the age of the oldest male user of the app?", "sql": "SELECT MAX(age) FROM gender_age WHERE gender = 'M'", "source_tables": ["gender_age"]}, "evidence": "oldest user refers to MAX(age); male refers to gender = 'M';"}
{"sample_id": 1103, "db_id": "talkingdata", "final": {"question": "How many users installed the app but are not active?", "sql": "SELECT COUNT(app_id) FROM app_events WHERE is_installed = 1 AND is_active = 0", "source_tables": ["app_events"]}, "evidence": "installed refers to is_installed = 1; not active refers to is_active = 0;"}
{"sample_id": 1104, "db_id": "talkingdata", "final": {"question": "What is the age of the youngest female user of the app?", "sql": "SELECT MIN(age) FROM gender_age WHERE gender = 'F'", "source_tables": ["gender_age"]}, "evidence": "youngest user refers to MIN(age); female refers to gender = 'F';"}
{"sample_id": 1105, "db_id": "talkingdata", "final": {"question": "How many models does the VIVO phone brand released?", "sql": "SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE phone_brand = 'vivo'", "source_tables": ["phone_brand_device_model2"]}, "evidence": "models refers to device_model;"}
{"sample_id": 1106, "db_id": "talkingdata", "final": {"question": "List at least 15 phone models released under the OPPO brand.", "sql": "SELECT device_model FROM phone_brand_device_model2 WHERE phone_brand = 'OPPO' LIMIT 15", "source_tables": ["phone_brand_device_model2"]}, "evidence": "phone models refers to device_model; OPPO brand refers to phone_brand = 'OPPO';"}
{"sample_id": 1107, "db_id": "talkingdata", "final": {"question": "List at least 10 device models that male users over the age of 39 usually use.", "sql": "SELECT T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T2.'group' = 'M39+' AND T2.gender = 'M' LIMIT 10", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "male refers to gender = 'M'; over the age of 39 refers to group = 'M39+';"}
{"sample_id": 1108, "db_id": "talkingdata", "final": {"question": "List 5 device models that users use to install the app and are active in using the app.", "sql": "SELECT T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.event_id INNER JOIN app_events AS T3 ON T2.event_id = T3.event_id WHERE T3.is_active = 1 AND T3.is_installed = 1 LIMIT 5", "source_tables": ["events", "phone_brand_device_model2", "app_events"]}, "evidence": "install refers to is_installed = 1; active refers to is_active = 1;"}
{"sample_id": 1109, "db_id": "talkingdata", "final": {"question": "How many users belong to \"Financial Information\" category?", "sql": "SELECT COUNT(T1.app_id) FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id WHERE T2.category = 'Financial Information'", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1110, "db_id": "talkingdata", "final": {"question": "How many users belong to \"game-Art Style\" category?", "sql": "SELECT COUNT(T1.app_id) FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id WHERE T2.category = 'game-Art Style'", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1111, "db_id": "talkingdata", "final": {"question": "Provide the total number of the male users that use OPPO as their phone brand.", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'OPPO' AND T1.gender = 'M'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "male refers to gender = 'Male';"}
{"sample_id": 1112, "db_id": "talkingdata", "final": {"question": "What is the brand of the youngest user's device?", "sql": "SELECT device_model FROM phone_brand_device_model2 WHERE device_id IN ( SELECT device_id FROM gender_age WHERE age = ( SELECT MIN(age) FROM gender_age ) )", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "brand of the device refers to phone_brand; youngest user refers to MIN(age);"}
{"sample_id": 1113, "db_id": "talkingdata", "final": {"question": "List at least 3 categories with the lowest number of users.", "sql": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id ORDER BY T2.label_id LIMIT 3", "source_tables": ["label_categories", "app_labels"]}, "evidence": "lowest number of users refers to MIN(COUNT(label_id));"}
{"sample_id": 1114, "db_id": "talkingdata", "final": {"question": "How many male users use the Galaxy Ace Plus model?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Galaxy Ace Plus' AND T1.gender = 'M'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "male refers to gender = 'M'; Galaxy Ace Plus refers to device_model = 'Galaxy Ace Plus';"}
{"sample_id": 1115, "db_id": "talkingdata", "final": {"question": "What is the age group of most OPPO users?", "sql": "SELECT T.'group' FROM ( SELECT T1.'group', COUNT(T1.'group') AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'OPPO' GROUP BY T1.'group' ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "age group refers to group; most OPPO users refers to MAX(COUNT(phone_brand = 'OPPO')); OPPO users refers to phone_brand = 'OPPO';"}
{"sample_id": 1116, "db_id": "talkingdata", "final": {"question": "List at least 5 device models that are commonly used by female users.", "sql": "SELECT T.device_model FROM ( SELECT T2.device_model, COUNT(T2.device_model) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'F' GROUP BY T2.device_model ) AS T ORDER BY T.num DESC LIMIT 5", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "device models that are commonly used refers to MAX(COUNT(device_model)); female refers to gender = 'F';"}
{"sample_id": 1117, "db_id": "talkingdata", "final": {"question": "Calculate the ratio in percentage between the average number of app users belonging to \"80s Japanese comic\" and \"90s Japanese comic\".", "sql": "SELECT SUM(IIF(T1.category = '80s Japanese comic', 1, 0)) / COUNT(T1.label_id) AS J8 , SUM(IIF(T1.category = '90s Japanese comic', 1, 0)) / COUNT(T1.label_id) AS J9 FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id", "source_tables": ["label_categories", "app_labels"]}, "evidence": "ratio in percentage = DIVIDE(SUM(IF(category = '80s Japanese comic',1,0)), COUNT(app_id)) as '80s'; DIVIDE(SUM(IF(category = '90s Japanese comic',1,0)), COUNT(app_id)) as '90s'; 80s Japanese comic refers to category = '80s Japanese comic'; 90s Japanese comic refers to category = '80s Japanese comic';"}
{"sample_id": 1118, "db_id": "talkingdata", "final": {"question": "Among the female users that uses OPPO as their phone brand, what is the percentage of them of the user that uses R815T model to install the app?", "sql": "SELECT SUM(IIF(T1.phone_brand = 'OPPO', 1, 0)) / SUM(IIF(T1.device_id = 'R815T', 1, 0)) AS num FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T2.gender = 'F'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "female refers to gender = 'F'; percentage = DIVIDE(SUM(IF(phone_brand = 'OPPO',1,0)), SUM(IF(device_id = 'R815T',1,0))); R815T refers to device_id = 'R815T';"}
{"sample_id": 1119, "db_id": "talkingdata", "final": {"question": "What is the phone brand of the device model \"\u575a\u679c\u624b\u673a\"?", "sql": "SELECT phone_brand FROM phone_brand_device_model2 WHERE device_model = '\u575a\u679c\u624b\u673a'", "source_tables": ["phone_brand_device_model2"]}, "evidence": ""}
{"sample_id": 1120, "db_id": "talkingdata", "final": {"question": "Give the number of device models for \"\u4e2d\u5174\" phone brand.", "sql": "SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE device_model = '\u4e2d\u5174'", "source_tables": ["phone_brand_device_model2"]}, "evidence": ""}
{"sample_id": 1121, "db_id": "talkingdata", "final": {"question": "Which group does age 24 belong to?", "sql": "SELECT 'group' FROM gender_age WHERE age = '24'", "source_tables": ["gender_age"]}, "evidence": ""}
{"sample_id": 1122, "db_id": "talkingdata", "final": {"question": "Give the time stamp for event No.887711.", "sql": "SELECT timestamp FROM events WHERE event_id = '887711'", "source_tables": ["events"]}, "evidence": "event no. refers to event_id; event_id = '887711';"}
{"sample_id": 1123, "db_id": "talkingdata", "final": {"question": "Provide the number of events that happened on 2016/5/6.", "sql": "SELECT COUNT(event_id) FROM events WHERE SUBSTR('timestamp', 1, 10) = '2016-05-06'", "source_tables": ["events"]}, "evidence": "on 2016/5/6 refers to timestamp = '2016/5/6 XX:XX:XX';"}
{"sample_id": 1124, "db_id": "talkingdata", "final": {"question": "For the event which happened at 23:55:16 on 2016/5/7, in the location coordinate(113, 28), on what device did it happen? Give the name of the device model.", "sql": "SELECT T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.event_id WHERE T2.longitude = '113' AND T2.latitude = '28' AND T2.timestamp = '2016-05-07 23:55:16'", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "at 23:55:16 on 2016/5/7 refers to timestamp = '2016/5/7 23:55:16'; location coordinate (113, 28) refers to longitude = '113' AND latitude = '28';"}
{"sample_id": 1125, "db_id": "talkingdata", "final": {"question": "Give the number of \"game-Fishing\" apps.", "sql": "SELECT COUNT(T2.app_id) FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'game-Fishing'", "source_tables": ["label_categories", "app_labels"]}, "evidence": "game-Fishing refers to category = 'game-Fishing';"}
{"sample_id": 1126, "db_id": "talkingdata", "final": {"question": "State the number of the \"\u9b45\u84ddNote 2\" users who are in the \"F29-32\" group.", "sql": "SELECT COUNT(T2.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.'group' = 'F29-32' AND T2.device_model = '\u9b45\u84ddNote 2'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "\u9b45\u84ddNote 2 refers to device_model = '\u9b45\u84ddNote 2';"}
{"sample_id": 1127, "db_id": "talkingdata", "final": {"question": "Give the number of 30-year-old users who were active in the events on 2016/5/2.", "sql": "SELECT COUNT(T3.device_id) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id INNER JOIN gender_age AS T3 ON T2.device_id = T3.device_id WHERE SUBSTR('timestamp', 1, 10) = '2016-05-02' AND T1.is_active = 1 AND T3.age = '30'", "source_tables": ["events", "app_events", "gender_age"]}, "evidence": "30-year-old refers to age = '30'; active refers to is_active = 1; on 2016/5/2 refers to timestamp = '2016/5/2 XX:XX:XX';"}
{"sample_id": 1128, "db_id": "talkingdata", "final": {"question": "For the event which happened at 23:33:34 on 2016/5/6, how many installed apps were involved?", "sql": "SELECT COUNT(T1.event_id) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE SUBSTR(T2.'timestamp', 1, 10) = '2016-05-06' AND T1.is_installed = '1'", "source_tables": ["events", "app_events"]}, "evidence": "at 23:33:34 on 2016/5/6 refers to timestamp = '2016/5/6 23:33:34'; installed refers to is_installed = '1';"}
{"sample_id": 1129, "db_id": "talkingdata", "final": {"question": "Give the number of female users of \"E\u6d3e\" brand devices.", "sql": "SELECT COUNT(T2.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'F' AND T2.phone_brand = 'E\u6d3e'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "female refers to gender = 'F'; E\u6d3e brand refers to phone_brand = 'E\u6d3e';"}
{"sample_id": 1130, "db_id": "talkingdata", "final": {"question": "How many male users of the \"Galaxy S5\" device model?", "sql": "SELECT COUNT(T1.device_id) FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T1.device_model = 'Galaxy S5' AND T2.gender = 'M'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "male refers to gender = 'M';"}
{"sample_id": 1131, "db_id": "talkingdata", "final": {"question": "How many users from the group \"F29-32\" who were active in the events on 2016/5/7?", "sql": "SELECT COUNT(T1.app_id) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id INNER JOIN gender_age AS T3 ON T2.event_id = T3.device_id WHERE SUBSTR(T2.'timestamp', 1, 10) = '2016-05-07' AND T1.is_active = '1' AND T3.'group' = 'F29-32'", "source_tables": ["events", "app_events", "gender_age"]}, "evidence": "active users refers to is_active = '1'; on 2016/5/7 refers to timestamp = '2016/5/7 XX:XX:XX';"}
{"sample_id": 1132, "db_id": "talkingdata", "final": {"question": "Which category does the app id No.894384172610331000 belong to?", "sql": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = '894384172610331000'", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1133, "db_id": "talkingdata", "final": {"question": "For the event which happened at 14:09:49 on 2016/5/6, in the location coordinate(116, 40), how many apps were active?", "sql": "SELECT COUNT(T1.app_id) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE T2.timestamp = '2016-05-06 14:09:49' AND T1.is_active = '1' AND T2.longitude = '116' AND T2.latitude = '40'", "source_tables": ["events", "app_events"]}, "evidence": "at 14:09:49 on 2016/5/6 refers to timestamp = '2016/5/6 14:09:49'; location coordinate(116, 40) refers to longitude = '116' AND latitude = '40'; active refers to is_active = '1';"}
{"sample_id": 1134, "db_id": "talkingdata", "final": {"question": "How many times is the number of active apps in the event that happened at 7:50:28 on 2016/5/2 than in the event that happened at 7:41:03 on 2016/5/2?", "sql": "SELECT SUM(IIF(timestamp = '2016-05-02 7:50:28', 1, 0)) / SUM(IIF(timestamp = '2016-05-02 7:41:03', 1, 0)) AS num FROM events AS T1 INNER JOIN app_events AS T2 ON T1.event_id = T2.event_id WHERE T2.is_active = '1'", "source_tables": ["events", "app_events"]}, "evidence": "how many times = DIVIDE(SUM(IF(timestamp = '2016/5/2 7:50:28', 1,0)), SUM(IF(timestamp = '2016/5/2 7:41:03',1,0))); active refers to is_active = '1'; at 7:50:28 on 2016/5/2 refers to timestamp = '2016/5/2 7:50:28'; at 7:41:03 on 2016/5/2 refers to timestamp = '2016/5/2 7:41:03';"}
{"sample_id": 1135, "db_id": "talkingdata", "final": {"question": "How many devices are of the brand vivo?", "sql": "SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE phone_brand = 'vivo'", "source_tables": ["phone_brand_device_model2"]}, "evidence": "brand vivo refers to phone_brand = 'vivo';"}
{"sample_id": 1136, "db_id": "talkingdata", "final": {"question": "How many more devices are there of the brand vivo than of the brand LG?", "sql": "SELECT SUM(IIF(phone_brand = 'vivo', 1, 0)) - SUM(IIF(phone_brand = 'LG', 1, 0)) AS num FROM phone_brand_device_model2", "source_tables": ["phone_brand_device_model2"]}, "evidence": "how many more = SUBTRACT(SUM(IF(phone_brand = 'vivo',1,0)), SUM(IF(phone_brand = 'LG',1,0))); brand vivo refers to phone_brand = 'vivo'; brand LG refers to phone_brand = 'LG';"}
{"sample_id": 1137, "db_id": "talkingdata", "final": {"question": "What is the ID of the device used by the youngest user?", "sql": "SELECT device_id FROM gender_age WHERE age = ( SELECT MIN(age) FROM gender_age )", "source_tables": ["gender_age"]}, "evidence": "ID of the device refers to device_id; youngest user refers to MIN(age);"}
{"sample_id": 1138, "db_id": "talkingdata", "final": {"question": "Among the female users of the devices, how many of them are over 30?", "sql": "SELECT COUNT(device_id) FROM gender_age WHERE age > 30 AND gender = 'F'", "source_tables": ["gender_age"]}, "evidence": "female refers to gender = 'F'; over 30 refers to age > 30;"}
{"sample_id": 1139, "db_id": "talkingdata", "final": {"question": "Is the oldest device user male or female?", "sql": "SELECT gender FROM gender_age WHERE age = ( SELECT MAX(age) FROM gender_age )", "source_tables": ["gender_age"]}, "evidence": "MAX(Age) AND gender = 'M' means that the oldest device user is male; MAX(Age) AND gender = 'F' means that the oldest device user is female;"}
{"sample_id": 1140, "db_id": "talkingdata", "final": {"question": "What is the age of the youngest female device user?", "sql": "SELECT MIN(age) FROM gender_age WHERE gender = 'F'", "source_tables": ["gender_age"]}, "evidence": "youngest refers to MIN(age); female refers to gender = 'F';"}
{"sample_id": 1141, "db_id": "talkingdata", "final": {"question": "Among all the users who use a vivo device, what is the age of the youngest user?", "sql": "SELECT T1.age FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo' ORDER BY T1.age LIMIT 1", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "vivo device refers to phone_brand = 'vivo'; youngest refers to MIN(age);"}
{"sample_id": 1142, "db_id": "talkingdata", "final": {"question": "Please list the app IDs of all the users in the Securities category.", "sql": "SELECT T2.app_id FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'Securities'", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1143, "db_id": "talkingdata", "final": {"question": "For the device with an event occurring on 2016/5/1 at 0:55:25, what is the gender of its user?", "sql": "SELECT T1.gender FROM gender_age AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.device_id WHERE T2.timestamp = '2016-05-01 00:55:25'", "source_tables": ["events", "gender_age"]}, "evidence": "on 2016/5/1 at 0:55:25 refers to timestamp = '2016-05-01 00:55:25';"}
{"sample_id": 1144, "db_id": "talkingdata", "final": {"question": "Among the devices with an event occurring in 2016, how many of them are owned by a user in the M23-26 user group?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.device_id WHERE STRFTIME('%Y', T2.timestamp) = '2016' AND T1.'group' = 'M23-26'", "source_tables": ["events", "gender_age"]}, "evidence": "in 2016 refers to year(timestamp) = 2016; M23-26 user group refers to `group` = 'M23-26';"}
{"sample_id": 1145, "db_id": "talkingdata", "final": {"question": "What is the brand of the device used by the most users in the M23-26 user group?", "sql": "SELECT T.phone_brand FROM ( SELECT T2.phone_brand, COUNT(T1.device_id) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.'group' = 'M23-26' GROUP BY T2.phone_brand ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "brand of the device refers to phone_brand; M23-26 user group refers to `group` = 'M23-26';"}
{"sample_id": 1146, "db_id": "talkingdata", "final": {"question": "Please list the location coordinates of all the Galaxy Note 2 devices when an event happened.", "sql": "SELECT T1.longitude, T1.latitude FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Galaxy Note 2'", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "location coordinates = longitude, latitude; Galaxy Note 2 refers to device_model = 'Galaxy Note 2';"}
{"sample_id": 1147, "db_id": "talkingdata", "final": {"question": "Please list all the models of the devices used by a female user.", "sql": "SELECT T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T2.gender = 'F'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "models of the devices refers to device_model; female refers to gender = 'F';"}
{"sample_id": 1148, "db_id": "talkingdata", "final": {"question": "What are the categories that app user ID7324884708820020000 belongs to?", "sql": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = 7324884708820020000", "source_tables": ["label_categories", "app_labels"]}, "evidence": "app user ID refers to app_id; app_id = 7324884708820020000;"}
{"sample_id": 1149, "db_id": "talkingdata", "final": {"question": "Among the app users who were not active when event no.2 happened, how many of them belong to the category Property Industry 1.0?", "sql": "SELECT COUNT(T2.app_id) FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id INNER JOIN app_events AS T3 ON T2.app_id = T3.app_id WHERE T3.is_active = 0 AND T1.category = 'Property Industry 1.0' AND T3.event_id = 2", "source_tables": ["label_categories", "app_events", "app_labels"]}, "evidence": "not active refers to is_active = 0; event no. refers to event_id; event_id = 2;"}
{"sample_id": 1150, "db_id": "talkingdata", "final": {"question": "How many categories in total do the app users who were not active when event no.2 happened belong to?", "sql": "SELECT COUNT(*) FROM ( SELECT COUNT(DISTINCT T1.category) AS result FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id INNER JOIN app_events AS T3 ON T2.app_id = T3.app_id WHERE T3.event_id = 2 AND T3.is_active = 0 GROUP BY T1.category ) T", "source_tables": ["label_categories", "app_events", "app_labels"]}, "evidence": "not active refers to is_active = 0; event no. refers to event_id; event_id = 2;"}
{"sample_id": 1151, "db_id": "talkingdata", "final": {"question": "What is the device model used by the most female users over 30?", "sql": "SELECT T.device_model FROM ( SELECT T2.device_model, COUNT(T2.device_model) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age > 30 AND T1.gender = 'F' GROUP BY T2.device_model ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "female users refers to gender = 'F'; most female users refers to MAX(COUNT(gender = 'F')); over 30 refers to age > 30;"}
{"sample_id": 1152, "db_id": "talkingdata", "final": {"question": "Please list the models of all the devices with an event under the location coordinates (121, 31).", "sql": "SELECT T2.device_model FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.longitude = 121 AND T1.latitude = 31", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "models of the devices refers to device_model; location coordinates (121, 31) refers to longitude = 121 AND latitude = 31;"}
{"sample_id": 1153, "db_id": "talkingdata", "final": {"question": "What are the top 3 categories with the most app users?", "sql": "SELECT T.category FROM ( SELECT T2.category, COUNT(T1.app_id) AS num FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id GROUP BY T2.category ) AS T ORDER BY T.num DESC LIMIT 3", "source_tables": ["label_categories", "app_labels"]}, "evidence": "most app users refers to MAX(COUNT(app_id));"}
{"sample_id": 1154, "db_id": "talkingdata", "final": {"question": "Please list the event IDs of the events that have happened on the device of the oldest user.", "sql": "SELECT T2.event_id FROM gender_age AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.device_id ORDER BY T1.age DESC LIMIT 1", "source_tables": ["events", "gender_age"]}, "evidence": "oldest user refers to MAX(age);"}
{"sample_id": 1155, "db_id": "talkingdata", "final": {"question": "How many events have happened on the device of the youngest female user?", "sql": "SELECT COUNT(T1.event_id) FROM events AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T2.gender = 'F' GROUP BY T1.event_id, T2.age ORDER BY T2.age LIMIT 1", "source_tables": ["events", "gender_age"]}, "evidence": "youngest refers to MIN(age); female refers to gender = 'F';"}
{"sample_id": 1156, "db_id": "talkingdata", "final": {"question": "Among the devices on which an event happened on 2016/5/1, how many of them are used by a male user?", "sql": "SELECT COUNT(T1.device_id) FROM events AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T1.timestamp = '2016-05-01' AND T2.gender = 'M'", "source_tables": ["events", "gender_age"]}, "evidence": "on 2016/5/1 refers to timestamp = '2016-05-01'; male refers to gender = 'M';"}
{"sample_id": 1157, "db_id": "talkingdata", "final": {"question": "Which category has more app users, Securities or Finance?", "sql": "SELECT IIF(SUM(IIF(T2.category = 'Securities', 1, 0)) - SUM(IIF(T2.category = 'Finance', 1, 0)) > 0, 'Securities', 'Finance') AS diff FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id", "source_tables": ["label_categories", "app_labels"]}, "evidence": "more app users refers to SUBTRACT(IF(SUM(category = 'Securities'), SUM(category = 'Finance')) > 0,'Securities','Finance') as more;"}
{"sample_id": 1158, "db_id": "talkingdata", "final": {"question": "Please list the device models of all the devices used by a user in the M23-26 user group.", "sql": "SELECT T2.device_model FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.'group' = 'M23-26'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "M23-26 user group refers to `group` = 'M23-26';"}
{"sample_id": 1159, "db_id": "talkingdata", "final": {"question": "What is the average age of the female users who uses a vivo device?", "sql": "SELECT AVG(T1.age) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo' AND T1.gender = 'F'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "average age = AVG(age); female refers to gender = 'F'; vivo device refers to phone_brand = 'vivo';"}
{"sample_id": 1160, "db_id": "talkingdata", "final": {"question": "What is the ratio of female users to male users who uses a vivo device?", "sql": "SELECT SUM(IIF(T1.gender = 'M', 1, 0)) / SUM(IIF(T1.gender = 'F', 1, 0)) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "ratio = DIVIDE(SUM(gender = 'M' WHERE phone_brand = 'vivo'), SUM(gender = 'F' WHERE phone_brand = 'vivo')); female refers to gender = 'F'; male refers to gender = 'M'; vivo device refers to phone_brand = 'vivo';"}
{"sample_id": 1161, "db_id": "talkingdata", "final": {"question": "What is the ratio of the number of app users that belong to the Securities category to the number of app users that belong to the Finance category?", "sql": "SELECT SUM(IIF(T2.category = 'Securities', 1, 0)) / SUM(IIF(T2.category = 'Finance', 1, 0)) AS per FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id", "source_tables": ["label_categories", "app_labels"]}, "evidence": "ratio = DIVIDE(SUM(category = 'Securities'), SUM(category = 'Finance'));"}
{"sample_id": 1245, "db_id": "law_episode", "final": {"question": "Please list all the keywords of the episode \"Refuge: Part 1\".", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Refuge: Part 1'", "source_tables": ["episode", "keyword"]}, "evidence": "episode \"Refuge: Part 1\" refers to title = 'Refuge: Part 1'"}
{"sample_id": 1246, "db_id": "law_episode", "final": {"question": "How many keywords are there for season 9, episode 23 of law_and_order?", "sql": "SELECT COUNT(T2.keyword) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.season = 9 AND T1.episode = 23", "source_tables": ["episode", "keyword"]}, "evidence": ""}
{"sample_id": 1247, "db_id": "law_episode", "final": {"question": "What is the title of the episode with the keyword \"laundering money\"?", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T2.keyword = 'laundering money'", "source_tables": ["episode", "keyword"]}, "evidence": "keyword \"laundering money\" refers to keyword = 'laundering money'"}
{"sample_id": 1248, "db_id": "law_episode", "final": {"question": "Please list all the keywords for the episodes with a rating of over 8.", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.rating > 8", "source_tables": ["episode", "keyword"]}, "evidence": "a rating of over 8 refers to rating > 8"}
{"sample_id": 1249, "db_id": "law_episode", "final": {"question": "How many 10-star votes were given to the episode titled \"Cherished\"?", "sql": "SELECT T2.votes FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Cherished' AND T2.stars = 10", "source_tables": ["episode", "vote"]}, "evidence": "10-star vote refers to stars = 10; titled \"Cherished\" refers to title = 'Cherished'"}
{"sample_id": 1250, "db_id": "law_episode", "final": {"question": "How many votes did the episode titled \"Cherished\" get in total?", "sql": "SELECT SUM(T2.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Cherished'", "source_tables": ["episode", "vote"]}, "evidence": "titled \"Cherished\" refers to title = 'Cherished'"}
{"sample_id": 1251, "db_id": "law_episode", "final": {"question": "What is the title of the episode that got the most 10-star votes?", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10 ORDER BY T2.votes DESC LIMIT 1", "source_tables": ["episode", "vote"]}, "evidence": "the most refers to max(votes); 10-star refers to stars = 10"}
{"sample_id": 1252, "db_id": "law_episode", "final": {"question": "Park Dietz was credited in which role in the episode titled \"Cherished\"?", "sql": "SELECT T2.role FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.title = 'Cherished' AND T3.name = 'Park Dietz' AND T2.credited = 'true'", "source_tables": ["episode", "person", "credit"]}, "evidence": "credited refers to credited = 'true'; titled \"Cherished\" refers to title = 'Cherished'"}
{"sample_id": 1253, "db_id": "law_episode", "final": {"question": "How many people had filled a role in the episode titled \"Cherished\", but did not show up in the on-screen credits?", "sql": "SELECT COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Cherished' AND T2.credited = 'false'", "source_tables": ["episode", "credit"]}, "evidence": "titled \"Cherished\" refers to title = 'Cherished'; did not show up in the on-screen credits refers to credited = ''"}
{"sample_id": 1254, "db_id": "law_episode", "final": {"question": "Who was credited as \"technical advisor\" in the episode titled \"Cherished\"?", "sql": "SELECT T3.name FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.title = 'Cherished' AND T2.credited = 'true' AND T2.role = 'technical advisor'", "source_tables": ["episode", "person", "credit"]}, "evidence": "who refers to name; credited refers to credited = 'true'; as \"technical advisor\" refers to role = 'technical advisor'; titled \"Cherished\" refers to title = 'Cherished'"}
{"sample_id": 1255, "db_id": "law_episode", "final": {"question": "For how many times was Park Dietz credited?", "sql": "SELECT COUNT(T3.person_id) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T2.credited = 'true' AND T3.name = 'Park Dietz'", "source_tables": ["episode", "person", "credit"]}, "evidence": "credited refers to credited = 'true'"}
{"sample_id": 1256, "db_id": "law_episode", "final": {"question": "Please list the titles of all the episodes in which Park Dietz was credited.", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T2.credited = 'true' AND T3.name = 'Park Dietz'", "source_tables": ["episode", "person", "credit"]}, "evidence": "credited refers to credited = 'true'"}
{"sample_id": 1257, "db_id": "law_episode", "final": {"question": "Was Anthony Azzara's role in episode tt0629204 displayed in the credits at the end of the episode?", "sql": "SELECT T1.credited FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'Anthony Azzara' AND T1.episode_id = 'tt0629204'", "source_tables": ["person", "credit"]}, "evidence": "episode tt0629204 refers to episode_id = 'tt0629204'; credited refers to credited = 'true'; not credited refers to credited = ''"}
{"sample_id": 1258, "db_id": "law_episode", "final": {"question": "How many keywords are there in the episode Disciple?", "sql": "SELECT COUNT(T2.keyword) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Disciple'", "source_tables": ["episode", "keyword"]}, "evidence": "episode Disciple refers to title = 'Disciple'"}
{"sample_id": 1259, "db_id": "law_episode", "final": {"question": "Which episode got the most 1 star votes? Give its title.", "sql": "SELECT T2.title FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.stars = 1 ORDER BY T1.votes DESC LIMIT 1", "source_tables": ["vote", "episode"]}, "evidence": "the most refers to max(votes); 1 star refers to stars = '1'"}
{"sample_id": 1260, "db_id": "law_episode", "final": {"question": "How many nominations did Law and Order season 9, episode 20 get?", "sql": "SELECT COUNT(T2.award_id) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.series = 'Law and Order' AND T1.season = 9 AND T1.episode = 20", "source_tables": ["episode", "award"]}, "evidence": "Law and Order refers to series = 'Law and Order'"}
{"sample_id": 1261, "db_id": "law_episode", "final": {"question": "For season 9, episode 17 of the show Law and Order, how many roles have been included in the credit?", "sql": "SELECT COUNT(T2.role) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.series = 'Law and Order' AND T1.season = 9 AND T1.episode = 17 AND T2.credited = 'true'", "source_tables": ["episode", "credit"]}, "evidence": "Law and Order refers to series = 'Law and Order'; included in the credit refers to credited = 'true'"}
{"sample_id": 1262, "db_id": "law_episode", "final": {"question": "Describe what happened in the episode of award no.296.", "sql": "SELECT T1.summary FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.award_id = 296", "source_tables": ["episode", "award"]}, "evidence": "description of what happened refers to summary; award no.296 refers to award_id = '296'"}
{"sample_id": 1263, "db_id": "law_episode", "final": {"question": "Which role did Joseph Blair play in the show?", "sql": "SELECT T1.role FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'Joseph Blair'", "source_tables": ["person", "credit"]}, "evidence": ""}
{"sample_id": 1264, "db_id": "law_episode", "final": {"question": "How many awards has Rene Balcer been nominated for?", "sql": "SELECT COUNT(T2.award_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T1.name = 'Rene Balcer'", "source_tables": ["person", "award"]}, "evidence": ""}
{"sample_id": 1265, "db_id": "law_episode", "final": {"question": "For the episode with the most votes, give its air date.", "sql": "SELECT T2.air_date FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id GROUP BY T2.episode_id ORDER BY SUM(T1.votes) DESC LIMIT 1", "source_tables": ["vote", "episode"]}, "evidence": "the most votes refers to max(votes)"}
{"sample_id": 1266, "db_id": "law_episode", "final": {"question": "Who was nominated for award no.313? Give the full name.", "sql": "SELECT T1.name FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.award_id = 313", "source_tables": ["person", "award"]}, "evidence": "award no.313 refers to award_id = '313'; full name refers to name"}
{"sample_id": 1267, "db_id": "law_episode", "final": {"question": "How many episodes did J.K. Simmons' role appear on the show?", "sql": "SELECT COUNT(T1.role) FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'J.K. Simmons'", "source_tables": ["person", "credit"]}, "evidence": ""}
{"sample_id": 1268, "db_id": "law_episode", "final": {"question": "Display the number of 9-star votes the episode Sideshow received.", "sql": "SELECT T2.votes FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 9 AND T1.title = 'Sideshow'", "source_tables": ["episode", "vote"]}, "evidence": "9-star vote refers to stars = '9'; episode Sideshow refers to title = 'Sideshow'"}
{"sample_id": 1269, "db_id": "law_episode", "final": {"question": "How many times is the number of keywords in \"Refuge: Part 1\" episode than \"Shield\" episode?", "sql": "SELECT CAST(SUM(CASE WHEN T1.title = 'Refuge: Part 1' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.title = 'Shield' THEN 1 ELSE 0 END) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id", "source_tables": ["episode", "keyword"]}, "evidence": "\"Refuge: Part 1\" episode refers to title = 'Refuge: Part 1'; \"Shield\" episode refers to title = 'Shield'; times = divide(count(keyword where title = 'Refuge: Part 1'), count(keyword where title = 'Shield'))"}
{"sample_id": 1270, "db_id": "law_episode", "final": {"question": "Calculate the average number of cast members that appeared in the credit from the 185th to the 193rd episode.", "sql": "SELECT CAST(COUNT(T1.episode_id) AS REAL) / (193 - 185 + 1) FROM Credit AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.category = 'Cast' AND T1.credited = 'true' AND T2.number_in_series BETWEEN 185 AND 193", "source_tables": ["episode", "credit"]}, "evidence": "appeared in the credit refers to credited = 'TRUE'; from the 185th to the 193rd episode refers to number_in_series between 185 and 193; cast refers to category = 'Cast'; average number = divide(count(episode_id), 9)"}
{"sample_id": 1271, "db_id": "law_episode", "final": {"question": "What are the names of the person that were not credited at the end of episode tt0629391?", "sql": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.credited = 'false' AND T1.episode_id = 'tt0629391'", "source_tables": ["person", "credit"]}, "evidence": "not credited refers to credited = ''; episode tt0629391 refers to episode_id = 'tt0629391'"}
{"sample_id": 1272, "db_id": "law_episode", "final": {"question": "How many people have won at least 3 awards?", "sql": "SELECT COUNT(T1.person_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.result = 'Winner' GROUP BY T1.person_id HAVING COUNT(T2.award_id) >= 3", "source_tables": ["person", "award"]}, "evidence": "won refers to result = 'Winner'; at least 3 awards refers to count(result) > 3"}
{"sample_id": 1273, "db_id": "law_episode", "final": {"question": "Who is the script supervisor of the series in episode tt0629204?", "sql": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.episode_id = 'tt0629204' AND T1.role = 'script supervisor'", "source_tables": ["person", "credit"]}, "evidence": "who refers to name; script supervisor refers to role = 'script supervisor'; episode tt0629204 refers to episode_id = 'tt0629204'"}
{"sample_id": 1274, "db_id": "law_episode", "final": {"question": "How many awards has Julia Roberts been nominated for?", "sql": "SELECT COUNT(T2.award_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T1.name = 'Julia Roberts' AND T2.result = 'Nominee'", "source_tables": ["person", "award"]}, "evidence": "been nominated refers to result = 'Nominee'"}
{"sample_id": 1275, "db_id": "law_episode", "final": {"question": "Who is the tallest camera operator?", "sql": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.role = 'camera operator' ORDER BY T2.height_meters DESC LIMIT 1", "source_tables": ["person", "credit"]}, "evidence": "who refers to name; the tallest refers to max(height_meters); camera operator refers to role = 'camera operator'"}
{"sample_id": 1276, "db_id": "law_episode", "final": {"question": "How many people, who were born in Canada, won an award in 1999?", "sql": "SELECT COUNT(T1.person_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.year = 1999 AND T1.birth_country = 'Canada'", "source_tables": ["person", "award"]}, "evidence": "born in Canada refers to birth_country = 'Canada'; in 1999 refers to year = 1999"}
{"sample_id": 1277, "db_id": "law_episode", "final": {"question": "How many people gave the most enjoyed episode a 10-star rating?", "sql": "SELECT COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10", "source_tables": ["episode", "vote"]}, "evidence": "the most enjoyed refers max(rating); 10-star refers to stars = 10"}
{"sample_id": 1278, "db_id": "law_episode", "final": {"question": "What are the keywords of the \"Shield\" episode?", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Shield'", "source_tables": ["episode", "keyword"]}, "evidence": "\"Shield\" episode refers to title = 'Shield'"}
{"sample_id": 1279, "db_id": "law_episode", "final": {"question": "What is the percentage of people who gave the \"True North\" episode a 1-star rating?", "sql": "SELECT CAST(SUM(CASE WHEN T2.stars = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'True North' AND T1.episode_id = 'tt0629477'", "source_tables": ["episode", "vote"]}, "evidence": "the \"True North\" episode refers to title = 'True North'; 1-star refers to stars = 1; percentage = divide(count(episode_id where stars = 1), count(episode_id)) * 100% where title = 'True North'"}
{"sample_id": 1280, "db_id": "law_episode", "final": {"question": "What is the title of the episode with the highest number of keywords?", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id GROUP BY T1.episode_id ORDER BY COUNT(T2.keyword) DESC LIMIT 1", "source_tables": ["episode", "keyword"]}, "evidence": "the highest number of keywords refers to max(count(keyword))"}
{"sample_id": 1281, "db_id": "law_episode", "final": {"question": "Among the episodes that were aired in 1998, how many won an International Monitor Awards?", "sql": "SELECT COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE strftime('%Y', T1.air_date) = '1998' AND T2.organization = 'International Monitor Awards' AND T2.result = 'Winner'", "source_tables": ["episode", "award"]}, "evidence": "aired in 1998 refers to air_date like '1998%'; won refers to result = 'Winner'; International Monitor Awards refers to organization = 'International Monitor Awards'"}
{"sample_id": 1282, "db_id": "law_episode", "final": {"question": "How many times did the episode titled \"Agony\" win an award?", "sql": "SELECT COUNT(T2.award_id) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Agony' AND T2.result = 'Winner'", "source_tables": ["episode", "award"]}, "evidence": "titled \"Agony\" refers to title = 'Agony'; win an award refers to result = 'Winner'"}
{"sample_id": 1283, "db_id": "law_episode", "final": {"question": "How many episodes are there in the 9th season of Law and Order? Calculate the average number of casts per season of the said series.", "sql": "SELECT SUM(CASE WHEN T2.season = 9 THEN 1 ELSE 0 END) AS num , CAST(SUM(CASE WHEN T2.season = 9 THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.episode_id) FROM Credit AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.category = 'Cast' AND T2.series = 'Law and Order'", "source_tables": ["episode", "credit"]}, "evidence": "the 9th season refers to season = 9; Law and Order refers to series = 'Law and Order'; cast refers to category = 'Cast'; average number of casts per season = divide(count(person_id), count(episode_id))"}
{"sample_id": 1284, "db_id": "law_episode", "final": {"question": "What are the keywords of the episode which received the 2nd-highest number of votes?", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.votes NOT IN ( SELECT MAX(T1.votes) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id ) ORDER BY T1.votes DESC LIMIT 1", "source_tables": ["episode", "keyword"]}, "evidence": "the 2nd-highest number of votes refers to second max(votes)"}
{"sample_id": 1285, "db_id": "law_episode", "final": {"question": "How many awards did the \"Agony\" win?", "sql": "SELECT COUNT(T2.award) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Agony' AND T2.result = 'Winner'", "source_tables": ["episode", "award"]}, "evidence": "the \"Agony\" refers to title = 'Agony'; win refers to result = 'Winner'"}
{"sample_id": 1286, "db_id": "law_episode", "final": {"question": "Who is the narrator of the \"Flight\" episode?", "sql": "SELECT T3.name FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.title = 'Flight' AND T2.role = 'Narrator'", "source_tables": ["episode", "person", "credit"]}, "evidence": "who refers to name; narrator refers to role = 'Narrator'; the \"Flight\" episode refers to title = 'Flight'"}
{"sample_id": 1287, "db_id": "law_episode", "final": {"question": "In which organization did Constantine Makris win the most awards?", "sql": "SELECT T2.organization FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T1.name = 'Constantine Makris' AND T2.result = 'Winner' GROUP BY T2.organization ORDER BY COUNT(T2.award_id) DESC LIMIT 1", "source_tables": ["person", "award"]}, "evidence": "win refers to result = 'Winner'; the most awards refers to max(count(award_id))"}
{"sample_id": 1288, "db_id": "law_episode", "final": {"question": "Who is the stunt coordinator in episode 3?", "sql": "SELECT T3.name FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.episode = 3 AND T2.role = 'stunt coordinator'", "source_tables": ["episode", "person", "credit"]}, "evidence": "who refers to name; stunt coordinator refers to role = 'stunt coordinator'"}
{"sample_id": 1289, "db_id": "law_episode", "final": {"question": "How many people were not credited at the end of the \"Admissions\" episode?", "sql": "SELECT COUNT(T2.person_id) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Admissions' AND T2.credited = 'false'", "source_tables": ["episode", "credit"]}, "evidence": "not credited refers to credited = ''; the \"Admissions\" episode refers to title = 'Admissions'"}
{"sample_id": 1290, "db_id": "law_episode", "final": {"question": "What is the title of the episode that has the highest number of crews in the Art Department?", "sql": "SELECT T2.title FROM Credit AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.category = 'Art Department' GROUP BY T2.episode_id ORDER BY COUNT(T1.category) DESC LIMIT 1", "source_tables": ["episode", "credit"]}, "evidence": "the highest number of crews refers to max(count(person_id)); in the Art Department refers to category = 'Art Department'"}
{"sample_id": 1291, "db_id": "law_episode", "final": {"question": "How many roles did Julia Roberts play in the series?", "sql": "SELECT COUNT(T1.role) FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'Julia Roberts'", "source_tables": ["person", "credit"]}, "evidence": ""}
{"sample_id": 1292, "db_id": "law_episode", "final": {"question": "What are the titles of the top 3 episodes that received no less than 30 votes in its 10-star rating?", "sql": "SELECT T2.title FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.votes >= 30 AND T1.stars = 10 ORDER BY T1.votes DESC LIMIT 3", "source_tables": ["vote", "episode"]}, "evidence": "no less than 30 votes refers to votes > = 30; 10-star rating refers to stars = 10"}
{"sample_id": 1293, "db_id": "law_episode", "final": {"question": "Who is the youngest person to ever play a \"clerk\" role in the series?", "sql": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.role = 'Clerk' AND T2.birthdate IS NOT NULL ORDER BY T2.birthdate LIMIT 1", "source_tables": ["person", "credit"]}, "evidence": "who refers to name; the youngest person refers to max(birthdate); a \"clerk\" role refers to role = 'Clerk'"}
{"sample_id": 1294, "db_id": "law_episode", "final": {"question": "How many people did not enjoy the finale episode?", "sql": "SELECT COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.episode = 24 AND T2.stars = 1", "source_tables": ["episode", "vote"]}, "evidence": "did not enjoy refers to stars = 1; the finale episode refers to episode = 24"}
{"sample_id": 1295, "db_id": "law_episode", "final": {"question": "List the names of all the cast members in the series.", "sql": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.category = 'Cast'", "source_tables": ["person", "credit"]}, "evidence": "cast member refers to category = 'Cast'"}
{"sample_id": 1296, "db_id": "law_episode", "final": {"question": "Who is the person who appeared the most in the series? Calculate in percentage how many times he or she appeared.", "sql": "SELECT T2.person_id, CAST(COUNT(T2.person_id) AS REAL) * 100 / ( SELECT COUNT(T2.person_id) AS num FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id ) AS per FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id GROUP BY T2.person_id ORDER BY COUNT(T2.person_id) DESC LIMIT 1", "source_tables": ["person", "credit"]}, "evidence": "who refers to name; appear the most refers to max(count(person_id)); percentage = divide(count(person_id where max(count(person_id))), count(person_id)) * 100%"}
{"sample_id": 1297, "db_id": "law_episode", "final": {"question": "Which episodes of the Law & Order have been nominated for the Primetime Emmy Awards?", "sql": "SELECT DISTINCT episode_id FROM Award WHERE award_category = 'Primetime Emmy'", "source_tables": ["award"]}, "evidence": "episode refers to award; the Primetime Emmy Awards refers to award_category like 'Primetime Emmy'"}
{"sample_id": 1298, "db_id": "law_episode", "final": {"question": "How many episodes have not won any Law & Order series awards?", "sql": "SELECT COUNT(award_id) FROM Award WHERE Result = 'Nominee'", "source_tables": ["award"]}, "evidence": "have not won any award refers to Result = 'Nominee'"}
{"sample_id": 1299, "db_id": "law_episode", "final": {"question": "What roles have not been credited at the end of the episodes?", "sql": "SELECT DISTINCT role FROM Credit WHERE credited = 'false'", "source_tables": ["credit"]}, "evidence": "have not been credited refers to credited = ''"}
{"sample_id": 1300, "db_id": "law_episode", "final": {"question": "What is the title of the 3 worst rated episodes?", "sql": "SELECT title FROM Episode ORDER BY rating LIMIT 3", "source_tables": ["episode"]}, "evidence": "worst rated refers to min(rating)"}
{"sample_id": 1301, "db_id": "law_episode", "final": {"question": "What is the full place of birth of Rene Chenevert Balcer?", "sql": "SELECT birth_place, birth_region FROM Person WHERE birth_name = 'Rene Chenevert Balcer'", "source_tables": ["person"]}, "evidence": "full place of birth refers to birth_place, birth_region; Rene Chenevert Balcer refers to birth_name = 'Rene Chenevert Balcer'"}
{"sample_id": 1302, "db_id": "law_episode", "final": {"question": "What is the name of the actors born in the USA?", "sql": "SELECT name FROM Person WHERE birth_country = 'USA'", "source_tables": ["person"]}, "evidence": "born in the USA refers to birth_country = 'USA'"}
{"sample_id": 1303, "db_id": "law_episode", "final": {"question": "What is the title of the episodes that were least enjoyed?", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 1", "source_tables": ["episode", "vote"]}, "evidence": "least enjoyed refers to stars = 1"}
{"sample_id": 1304, "db_id": "law_episode", "final": {"question": "What are the names of the two people who won an award for their role as directors?", "sql": "SELECT T1.name FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.Result = 'Winner' AND T2.role = 'director'", "source_tables": ["person", "award"]}, "evidence": "won an award refers to result = 'Winner'; role as director refers to role = 'director'"}
{"sample_id": 1305, "db_id": "law_episode", "final": {"question": "How many votes did the episode titled Juvenile get?", "sql": "SELECT SUM(T2.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Juvenile'", "source_tables": ["episode", "vote"]}, "evidence": "the episode titled Juvenile refers to title = 'Juvenile'"}
{"sample_id": 1306, "db_id": "law_episode", "final": {"question": "In which episodes was Anthony Azzara not credited?", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T2.credited = 'false' AND T3.name = 'Anthony Azzara'", "source_tables": ["episode", "person", "credit"]}, "evidence": "which episode refers to title; not credited refers to credited = ''"}
{"sample_id": 1307, "db_id": "law_episode", "final": {"question": "In what year did the episodes titled DWB get an award?", "sql": "SELECT DISTINCT T1.year FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.title = 'DWB' AND T1.result = 'Winner'", "source_tables": ["episode", "award"]}, "evidence": "titled DWB refers to title = 'DWB'; get an award refers to result = 'Winner'"}
{"sample_id": 1308, "db_id": "law_episode", "final": {"question": "In which region were the assistant location managers born?", "sql": "SELECT T2.birth_region FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.role = 'president of NBC West Coast'", "source_tables": ["person", "credit"]}, "evidence": "region refers to birth_region; assistant location manager refers to role = 'assistant location manager'"}
{"sample_id": 1309, "db_id": "law_episode", "final": {"question": "How many stars did the episodes in which Donna Villella worked?", "sql": "SELECT COUNT(T3.person_id) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T3.name = 'Donna Villella'", "source_tables": ["episode", "person", "credit"]}, "evidence": ""}
{"sample_id": 1310, "db_id": "law_episode", "final": {"question": "What role was Julia Roberts nominated for?", "sql": "SELECT T2.role FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.Result = 'Nominee' AND T1.name = 'Julia Roberts'", "source_tables": ["person", "award"]}, "evidence": "nominated refers to result = 'Nominee'"}
{"sample_id": 1311, "db_id": "law_episode", "final": {"question": "What role does the tallest person play?", "sql": "SELECT T2.role FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.person_id = T2.person_id INNER JOIN Award AS T3 ON T2.episode_id = T3.episode_id ORDER BY T1.height_meters DESC LIMIT 1", "source_tables": ["person", "credit", "award"]}, "evidence": "the tallest refers to max(height_meters)"}
{"sample_id": 1312, "db_id": "law_episode", "final": {"question": "What is the title of the episode with the most nominations?", "sql": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.result = 'Nominee' GROUP BY T2.episode_id ORDER BY COUNT(T1.result) DESC LIMIT 1", "source_tables": ["episode", "award"]}, "evidence": "the most nominations refers to max(count(episode_id where result = 'Nominee'))"}
{"sample_id": 1359, "db_id": "synthea", "final": {"question": "According to the observation on 2008/3/11, what was the height of Elly Koss?", "sql": "SELECT T2.value, T2.units FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.date = '2008-03-11' AND T2.description = 'Body Height'", "source_tables": ["patients", "observations"]}, "evidence": "2008/3/11 refers to date = '2008-03-11'; height refers to DESCRIPTION = 'Body Height' from observations;"}
{"sample_id": 1360, "db_id": "synthea", "final": {"question": "By how much did Elly Koss's weight increase from the observation in 2008 to the observation in 2009?", "sql": "SELECT SUM(CASE WHEN strftime('%Y', T2.date) = '2009' THEN T2.VALUE END) - SUM(CASE WHEN strftime('%Y', T2.date) = '2008' THEN T2.VALUE END) AS increase , T2.units FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description = 'Body Height'", "source_tables": ["patients", "observations"]}, "evidence": "SUBTRACT((DATE like '2009%'), (DATE like '2008%')) where DESCRIPTION = 'Body Weight';"}
{"sample_id": 1361, "db_id": "synthea", "final": {"question": "During all the observations of Elly Koss, what was the highest Systolic Blood Pressure observed?", "sql": "SELECT T2.value, T2.units FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description = 'Systolic Blood Pressure' ORDER BY T2.VALUE DESC LIMIT 1", "source_tables": ["patients", "observations"]}, "evidence": "the highest Systolic Blood Pressure refers to MAX(DESCRIPTION = 'Systolic Blood Pressure') from observations;"}
{"sample_id": 1362, "db_id": "synthea", "final": {"question": "For how many times had Elly Koss have her Systolic Blood Pressure observed?", "sql": "SELECT COUNT(T2.description) FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description = 'Systolic Blood Pressure'", "source_tables": ["patients", "observations"]}, "evidence": "Systolic Blood Pressure refers to DESCRIPTION = 'Systolic Blood Pressure';"}
{"sample_id": 1363, "db_id": "synthea", "final": {"question": "The highest Systolic Blood Pressure was observed in which patient? Please give his or her full name.", "sql": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.VALUE = ( SELECT MAX(VALUE) FROM observations WHERE description = 'Systolic Blood Pressure' ) LIMIT 1", "source_tables": ["patients", "observations"]}, "evidence": "the highest Systolic Blood Pressure refers to MAX(DESCRIPTION = 'Systolic Blood Pressure') from observations; full name refers to first, last;"}
{"sample_id": 1364, "db_id": "synthea", "final": {"question": "For how long was Elly Koss required to take Acetaminophen?", "sql": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS days FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description LIKE 'Acetaminophen%'", "source_tables": ["medications", "patients"]}, "evidence": "SUM(MULTIPLY(365, SUBTRACT(strftime('%Y', STOP), strftime('%Y', START))), MULTIPLY(30, SUBTRACT(strftime('%m', STOP), strftime('%m', START))), SUBTRACT(strftime('%d', STOP), strftime('%d', START))) where DESCRIPTION like 'Acetaminophen%';"}
{"sample_id": 1365, "db_id": "synthea", "final": {"question": "Please list all the medication that are prescribed to Elly Koss.", "sql": "SELECT DISTINCT T2.description FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss'", "source_tables": ["medications", "patients"]}, "evidence": "medication that are prescribed refers to DESCRIPTION from medications;"}
{"sample_id": 1366, "db_id": "synthea", "final": {"question": "Why did Elly Koss need to take Acetaminophen?", "sql": "SELECT T2.REASONDESCRIPTION FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description LIKE 'Acetaminophen%'", "source_tables": ["medications", "patients"]}, "evidence": "why need to take Acetaminophen refers to REASONDESCRIPTION\u00a0 where DESCRIPTION like 'Acetaminophen%' from medications;"}
{"sample_id": 1367, "db_id": "synthea", "final": {"question": "What medication did Elly Koss take when she had Streptococcal sore throat?", "sql": "SELECT T2.description FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.reasondescription = 'Streptococcal sore throat (disorder)'", "source_tables": ["medications", "patients"]}, "evidence": "medication refers to DESCRIPTION from medications; Streptococcal sore throat refers to REASONDESCRIPTION like 'Streptococcal sore throat%';"}
{"sample_id": 1368, "db_id": "synthea", "final": {"question": "Please give the full names of all the patients who had been prescribed with Acetaminophen.", "sql": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.description LIKE 'Acetaminophen%'", "source_tables": ["medications", "patients"]}, "evidence": "full name refers to first, last; prescribed with Acetaminophen refer to DESCRIPTION like 'Acetaminophen%' from medications;"}
{"sample_id": 1369, "db_id": "synthea", "final": {"question": "What was the condition of Elly Koss on 2009/1/8?", "sql": "SELECT T2.description FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.START = '2009-01-08'", "source_tables": ["patients", "conditions"]}, "evidence": "condition on 2009/1/8 refers to DESCRIPTION from conditions where START = '2009-01-08';"}
{"sample_id": 1370, "db_id": "synthea", "final": {"question": "For how long did Elly Koss's cystitis last?", "sql": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS days FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description = 'Cystitis'", "source_tables": ["patients", "conditions"]}, "evidence": "SUM(MULTIPLY(365, SUBTRACT(strftime('%Y', STOP), strftime('%Y', START))), MULTIPLY(30, SUBTRACT(strftime('%m', STOP), strftime('%m', START))), SUBTRACT(strftime('%d', STOP), strftime('%d', START))) where DESCRIPTION = 'Cystitis';"}
{"sample_id": 1371, "db_id": "synthea", "final": {"question": "According to all the observations of Elly Koss, what was her average weight?", "sql": "SELECT AVG(T2.VALUE), T2.units FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description = 'Body Weight'", "source_tables": ["patients", "observations"]}, "evidence": "DIVIDE(SUM(VALUE), COUNT(VALUE)) WHERE DESCRIPTION = 'Body Weight';"}
{"sample_id": 1372, "db_id": "synthea", "final": {"question": "Among all the patients who once had cystitis, what was the percentage of them being married?", "sql": "SELECT CAST(SUM(CASE WHEN T1.marital = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.description = 'Cystitis'", "source_tables": ["patients", "conditions"]}, "evidence": "DIVIDE(COUNT(marital = 'M'), COUNT(patient)) as percentage where DESCRIPTION = 'Cystitis';\n"}
{"sample_id": 1373, "db_id": "synthea", "final": {"question": "Give the body height status of Mr. Vincent Wyman on 2010/8/2.", "sql": "SELECT T2.description, T2.VALUE, T2.units FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mr.' AND T1.first = 'Vincent' AND T1.last = 'Wyman' AND T2.date = '2010-08-02' AND T2.description = 'Body Height'", "source_tables": ["patients", "observations"]}, "evidence": "body height status refers to DESCRIPTION = 'Body Height' from observations;\u00a0on 2010/8/2 refers to DATE = '2010-08-02';"}
{"sample_id": 1374, "db_id": "synthea", "final": {"question": "How many care plans has Mrs. Norman Berge taken?", "sql": "SELECT COUNT(T2.PATIENT) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mrs.' AND T1.first = 'Norman' AND T1.last = 'Berge'", "source_tables": ["patients", "careplans"]}, "evidence": ""}
{"sample_id": 1375, "db_id": "synthea", "final": {"question": "Why did Mrs. Annabelle Pouros take leucovorin 100 mg injection on 1970/12/19? State the reason.", "sql": "SELECT T2.reasondescription FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mrs.' AND T1.first = 'Annabelle' AND T1.last = 'Pouros' AND T2.start = '1970-12-19' AND T2.description = 'Leucovorin 100 MG Injection'", "source_tables": ["medications", "patients"]}, "evidence": "reason why take leucovorin 100 mg injection refers to REASONDESCRIPTION where DESCRIPTION = 'Leucovorin 100 MG Injection'; on 1970/12/19 refers to START = '1970-12-19';"}
{"sample_id": 1376, "db_id": "synthea", "final": {"question": "What is the prevalence percentage of condition no. 64859006?", "sql": "SELECT DISTINCT T1.'PREVALENCE PERCENTAGE' FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON lower(T1.ITEM) = lower(T2.DESCRIPTION) WHERE T2.code = '64859006'", "source_tables": ["conditions", "all_prevalences"]}, "evidence": "condition no. 64859006 refers to conditions where CODE = '64859006';"}
{"sample_id": 1377, "db_id": "synthea", "final": {"question": "State the prevalence rate of condition no. 368581000119106.", "sql": "SELECT DISTINCT T1.'PREVALENCE RATE' FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON lower(T1.ITEM) = lower(T2.DESCRIPTION) WHERE T2.code = '368581000119106'", "source_tables": ["conditions", "all_prevalences"]}, "evidence": "condition no. 368581000119106 refers to conditions where CODE = '368581000119106';"}
{"sample_id": 1378, "db_id": "synthea", "final": {"question": "Give the procedure description of Ms. Jacquelyn Shanahan on 2009/8/9.", "sql": "SELECT DISTINCT T2.description FROM patients AS T1 INNER JOIN procedures AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Ms.' AND T1.first = 'Jacquelyn' AND T1.last = 'Shanahan' AND T2.DATE = '2009-08-09'", "source_tables": ["patients", "procedures"]}, "evidence": "on 2009/8/9 refers to DATE = '2009-08-09';"}
{"sample_id": 1379, "db_id": "synthea", "final": {"question": "Give the number of claims did Ms. Abbie Cole have in the year of 2011.", "sql": "SELECT COUNT(T2.BILLABLEPERIOD) FROM patients AS T1 INNER JOIN claims AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Ms.' AND T1.first = 'Abbie' AND T1.last = 'Cole' AND T2.BILLABLEPERIOD BETWEEN '2010-12-31' AND '2012-01-01'", "source_tables": ["patients", "claims"]}, "evidence": "in the year of 2011 refers to BILLABLEPERIOD between '2010-12-31' and '2012-01-01';"}
{"sample_id": 1380, "db_id": "synthea", "final": {"question": "How many allergies does Mrs. Saundra Monahan have?", "sql": "SELECT COUNT(DISTINCT T2.code) FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mrs.' AND T1.first = 'Saundra' AND T1.last = 'Monahan'", "source_tables": ["allergies", "patients"]}, "evidence": "allergies refer to PATIENT from allergies;"}
{"sample_id": 1381, "db_id": "synthea", "final": {"question": "Provide the name of the patient who had a claim on 1947/9/11.", "sql": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN claims AS T2 ON T1.patient = T2.PATIENT WHERE T2.billableperiod = '1947-09-11'", "source_tables": ["patients", "claims"]}, "evidence": "name of the patient implies full name and refers to first, last; on 1947/9/11 refers to BILLABLEPERIOD = '1947-09-11';"}
{"sample_id": 1382, "db_id": "synthea", "final": {"question": "Describe the encounter of Mr. Hubert Baumbach on 2008/10/25.", "sql": "SELECT T2.description FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mr.' AND T1.first = 'Hubert' AND T1.last = 'Baumbach' AND T2.date = '2008-10-25'", "source_tables": ["encounters", "patients"]}, "evidence": "encounter refers to DESCRIPTION from encounters; on 2008/10/25 refers to DATE = '2008-10-25';"}
{"sample_id": 1383, "db_id": "synthea", "final": {"question": "What kind of condition did Keven Kuhn have from 2016/9/24 to 2016/10/10? Describe the condition.", "sql": "SELECT T2.description FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Keven' AND T1.last = 'Kuhn' AND T2.start = '2016-09-24' AND T2.stop = '2016-10-10'", "source_tables": ["patients", "conditions"]}, "evidence": "kind of condition refers to DESCRIPTION from conditions;\u00a0from 2016/9/24 to 2016/10/10 refers to START = '2016-09-24' and STOP = '2016-10-10';"}
{"sample_id": 1384, "db_id": "synthea", "final": {"question": "When did Mrs. Ira Deckow have the standard pregnancy test?", "sql": "SELECT T2.date FROM patients AS T1 INNER JOIN procedures AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mrs.' AND T1.first = 'Ira' AND T1.last = 'Deckow' AND T2.description = 'Standard pregnancy test'", "source_tables": ["patients", "procedures"]}, "evidence": "standard pregnancy test refers to DESCRIPTION = 'Standard pregnancy test' from procedures;"}
{"sample_id": 1385, "db_id": "synthea", "final": {"question": "Calculate the average period of Mr. Wesley Lemke's care plans.", "sql": "SELECT CAST(SUM(strftime('%J', T2.STOP) - strftime('%J', T2.START)) AS REAL) / COUNT(T1.patient) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mr.' AND T1.first = 'Wesley' AND T1.last = 'Lemke'", "source_tables": ["patients", "careplans"]}, "evidence": "DIVIDE(SUBTRACT(stop time - start time), COUNT(ID)));"}
{"sample_id": 1386, "db_id": "synthea", "final": {"question": "State the average period of Ms. Angelena Kertzmann's several normal pregnancies.", "sql": "SELECT CAST(SUM(strftime('%J', T2.STOP) - strftime('%J', T2.START)) AS REAL) / COUNT(T2.PATIENT) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Ms.' AND T1.first = 'Angelena' AND T1.last = 'Kertzmann' AND T2.description = 'Normal pregnancy'", "source_tables": ["patients", "conditions"]}, "evidence": "DIVIDE(SUBTRACT(stop time - start time), COUNT(DESCRIPTION = 'Normal pregnancy')));"}
{"sample_id": 1387, "db_id": "synthea", "final": {"question": "What is the id of the patient who has the longest allergy period?", "sql": "SELECT PATIENT FROM allergies WHERE STOP IS NOT NULL GROUP BY PATIENT ORDER BY CASE WHEN SUBSTR(STOP, -2, 1) != '9' THEN SUBSTR(STOP, LENGTH(STOP) - 1) + 2000 END - CASE WHEN SUBSTR(START, -2, 1) = '9' THEN SUBSTR(START, LENGTH(START) - 1) + 1900 ELSE SUBSTR(START, LENGTH(START) - 1) + 2000 END LIMIT 1", "source_tables": ["allergies"]}, "evidence": "id of the patient refers to PATIENT from allergies where STOP is not null; the longest allergy period refers to MAX(SUBTRACT((SUBSTR(STOP, - 2, 1)! = '9' then substr(STOP, length(STOP) - 1) + 2000 end), (SUBSTR(START, - 2, 1) = '9' then substr(START, length(START) - 1) + 1900 else substr(START, length(START) - 1) + 2000 end)));\n"}
{"sample_id": 1388, "db_id": "synthea", "final": {"question": "How many patients have diabetes that started in 1988?", "sql": "SELECT COUNT(PATIENT) FROM conditions WHERE DESCRIPTION = 'Diabetes' AND strftime('%Y', START) = '1988'", "source_tables": ["conditions"]}, "evidence": "diabetes that started in 1988 refers to DESCRIPTION = 'Diabetes' from conditions and START like '1988%';"}
{"sample_id": 1389, "db_id": "synthea", "final": {"question": "How many patients are allergic to eggs?", "sql": "SELECT COUNT(PATIENT) FROM allergies WHERE DESCRIPTION = 'Allergy to eggs'", "source_tables": ["allergies"]}, "evidence": "allergic to eggs refer to DESCRIPTION = 'Allergy to eggs' from allergies;"}
{"sample_id": 1390, "db_id": "synthea", "final": {"question": "What is the id of the patient whose hypertension started most recently?", "sql": "SELECT PATIENT FROM conditions WHERE START = ( SELECT MAX(START) FROM conditions WHERE DESCRIPTION = 'Hypertension' )", "source_tables": ["conditions"]}, "evidence": "id of the patient refers to PATIENT from conditions;\u00a0 hypertension refers to DESCRIPTION = 'Hypertension'; most recently refers to MAX(START);"}
{"sample_id": 1391, "db_id": "synthea", "final": {"question": "What is the most common allergy among patients?", "sql": "SELECT DESCRIPTION FROM allergies GROUP BY DESCRIPTION ORDER BY COUNT(DESCRIPTION) DESC LIMIT 1", "source_tables": ["allergies"]}, "evidence": "the most common allergy refers to MAX(COUNT(DESCRIPTION)) from allergies;"}
{"sample_id": 1392, "db_id": "synthea", "final": {"question": "What is/are the ids of the tallest patient/s?", "sql": "SELECT PATIENT FROM observations WHERE DESCRIPTION = 'Body Height' AND UNITS = 'cm' ORDER BY VALUE DESC LIMIT 1", "source_tables": ["observations"]}, "evidence": "id of the tallest patient/s refers to PATIENT from observations where MAX(DESCRIPTION = 'Body Height');"}
{"sample_id": 1393, "db_id": "synthea", "final": {"question": "What is the most common condition among the female Americans?", "sql": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.gender = 'F' AND T1.ethnicity = 'american' GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1", "source_tables": ["patients", "conditions"]}, "evidence": "the most common condition refers to MAX(COUNT(DESCRIPTION)); among the female Americans refer to PATIENT where gender = 'F' and ethnicity = 'american';"}
{"sample_id": 1394, "db_id": "synthea", "final": {"question": "Among the patients that started taking Ibuprofen 200mg Oral Tablet in 2016, how many Dominican patients stopped taking the medicine after exactly one month?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Ibuprofen 200 MG Oral Tablet' AND T1.ethnicity = 'dominican' AND strftime('%Y', T2.START) = '2016' AND strftime('%m', T2.STOP) - strftime('%m', T2.START) = 1", "source_tables": ["medications", "patients"]}, "evidence": "Ibuprofen 200mg Oral Tablet refers to DESCRIPTION = 'Ibuprofen 200 MG Oral Tablet' from medications; started in 2016 refers to START like '2016%'; Dominican patients refer to ethnicity = 'dominican'; stopped taking the medicine after exactly one month refers to SUBTRACT(strftime('%m', STOP), strftime('%m', START)) = 1;"}
{"sample_id": 1395, "db_id": "synthea", "final": {"question": "How many of the patients born in 1920s had pneumonia?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE DESCRIPTION = 'Pneumonia' AND strftime('%Y', T1.birthdate) LIKE '192%'", "source_tables": ["patients", "conditions"]}, "evidence": "patients born in 1920s refer to patient where birthdate like '192%'; pneumonia refers to DESCRIPTION = 'Pneumonia' from conditions;"}
{"sample_id": 1396, "db_id": "synthea", "final": {"question": "What are the full names of the patients who started taking Yaz 28 Day Pack in 2011?", "sql": "SELECT DISTINCT T1.first, T1.last, T1.suffix FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Yaz 28 Day Pack' AND strftime('%Y', T2.START) = '2011'", "source_tables": ["medications", "patients"]}, "evidence": "full name refers to first, last; Yaz 28 Day Pack refers to DESCRIPTION = 'Yaz 28 Day Pack' from medications; started taking in 2011 refers to START like '2011%';"}
{"sample_id": 1397, "db_id": "synthea", "final": {"question": "How many Black patients were immunized with DTaP in 2013?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T1.race = 'black' AND T2.DESCRIPTION = 'DTaP' AND strftime('%Y', T2.DATE) = '2013'", "source_tables": ["immunizations", "patients"]}, "evidence": "Black patients refer to patient where race = 'black'; immunized with DTaP refers to DESCRIPTION = 'DTaP' from immunizations; in 2013 refers to DATE like '2013%';"}
{"sample_id": 1398, "db_id": "synthea", "final": {"question": "How many immunizations did the patient with the most prevalent condition that started recently get?", "sql": "SELECT COUNT(T2.patient) FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON lower(T1.ITEM) = lower(T2.DESCRIPTION) INNER JOIN immunizations AS T3 ON T2.PATIENT = T3.PATIENT GROUP BY T2.PATIENT ORDER BY T2.START DESC, T1.'PREVALENCE RATE' DESC LIMIT 1", "source_tables": ["immunizations", "conditions", "all_prevalences"]}, "evidence": "patient with the most prevalent condition refers to patient where MAX(PREVALENCE RATE); started recently refers to MAX(START);"}
{"sample_id": 1399, "db_id": "synthea", "final": {"question": "How many patients have the most prevalent conditions?", "sql": "SELECT COUNT(DISTINCT T2.patient) FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON lower(T1.ITEM) = lower(T2.DESCRIPTION) ORDER BY T1.'PREVALENCE RATE' DESC LIMIT 1", "source_tables": ["conditions", "all_prevalences"]}, "evidence": "the most prevalent conditions refer to MAX(PREVALENCE RATE);"}
{"sample_id": 1400, "db_id": "synthea", "final": {"question": "What is the most common condition among the patients who received influenza seasonal injectable preservative free immunization?", "sql": "SELECT T2.DESCRIPTION FROM immunizations AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free' GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1", "source_tables": ["immunizations", "conditions"]}, "evidence": "the most common condition refers to MAX(DESCRIPTION) from conditions; patients who received influenza seasonal injectable preservative free immunization refer to PATIENT where DESCRIPTION = 'Influenza seasonal injectable preservative free' from immunizations;"}
{"sample_id": 1401, "db_id": "synthea", "final": {"question": "List the ids of all the patients with condition that has a prevalence percentage of 18.8%.", "sql": "SELECT DISTINCT T1.PATIENT FROM conditions AS T1 INNER JOIN all_prevalences AS T2 ON lower(T2.ITEM) = lower(T1.DESCRIPTION) WHERE T2.'PREVALENCE PERCENTAGE' = CAST(18.8 AS float)", "source_tables": ["conditions", "all_prevalences"]}, "evidence": "ids of the patients refer to PATIENT from conditions; condition that has a prevalence percentage of 18.8% refers to PREVALENCE PERCENTAGE = 18.8;"}
{"sample_id": 1402, "db_id": "synthea", "final": {"question": "How many conditions did Tyree Eichmann have?", "sql": "SELECT COUNT(DISTINCT T2.DESCRIPTION) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Tyree' AND T1.last = 'Eichmann'", "source_tables": ["patients", "conditions"]}, "evidence": "conditions refer to DESCRIPTION from conditions;"}
{"sample_id": 1403, "db_id": "synthea", "final": {"question": "Among the patients who were immunized with meningococcal MCV4P, how many have viral sinusitis disorder after getting the immunization?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM immunizations AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.DESCRIPTION = 'meningococcal MCV4P' AND T2.DESCRIPTION = 'Viral sinusitis (disorder)'", "source_tables": ["immunizations", "conditions"]}, "evidence": "immunized with meningococcal MCV4P refers to DESCRIPTION = 'meningococcal MCV4P' from immunizations; viral sinusitis disorder refers to DESCRIPTION = 'Viral sinusitis (disorder)' from conditions;"}
{"sample_id": 1404, "db_id": "synthea", "final": {"question": "Among the patients with prediabetes, how many are female?", "sql": "SELECT COUNT(DISTINCT T2.patient) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.gender = 'F' AND T1.DESCRIPTION = 'Prediabetes'", "source_tables": ["patients", "conditions"]}, "evidence": "patients with prediabetes refer to PATIENT from conditions where DESCRIPTION = 'Prediabetes'; female refers to gender = 'F';"}
{"sample_id": 1405, "db_id": "synthea", "final": {"question": "Indicate the patient's full name with the lowest body mass index in kg/m2.", "sql": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Body Mass Index' AND T2.UNITS = 'kg/m2' ORDER BY T2.VALUE LIMIT 1", "source_tables": ["patients", "observations"]}, "evidence": "full name refers to first, last; the lowest body mass index in kg/m2 refers to DESCRIPTION = Body Mass Index from observations where MIN(VALUE) and UNITS = 'kg/m2';"}
{"sample_id": 1406, "db_id": "synthea", "final": {"question": "What is the age of the patient with hypertension named Giovanni Russel?", "sql": "SELECT strftime('%Y', T2.deathdate) - strftime('%Y', T2.birthdate) AS age FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.first = 'Giovanni' AND T2.last = 'Russel' AND T1.DESCRIPTION = 'Hypertension'", "source_tables": ["patients", "conditions"]}, "evidence": "age refers to SUBTRACT(strftime('%Y', deathdate), strftime('%Y', birthdate)); hypertension refers to conditions where DESCRIPTION = 'Hypertension';"}
{"sample_id": 1407, "db_id": "synthea", "final": {"question": "How many Asian female patients take oxaliplatin 5 MG/ML [Eloxatin]?", "sql": "SELECT COUNT(DISTINCT T2.patient) FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'oxaliplatin 5 MG/ML [Eloxatin]' AND T2.race = 'asian' AND T2.gender = 'F'", "source_tables": ["medications", "patients"]}, "evidence": "female refers to gender = 'F'; oxaliplatin 5 MG/ML [Eloxatin] refers to medications where DESCRIPTION = 'oxaliplatin 5 MG/ML [Eloxatin]';"}
{"sample_id": 1408, "db_id": "synthea", "final": {"question": "Count all of the living patients that had a stroke.", "sql": "SELECT COUNT(DISTINCT T2.patient) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.description = 'Stroke' AND T2.deathdate IS NULL", "source_tables": ["patients", "conditions"]}, "evidence": "if deathdate is null, it means this patient is still alive or living; stroke refers to conditions where DESCRIPTION = 'Stroke';"}
{"sample_id": 1409, "db_id": "synthea", "final": {"question": "What is the total number of Asian patients who are allergic to peanuts?", "sql": "SELECT COUNT(T2.patient) FROM allergies AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Allergy to peanuts' AND T2.race = 'asian'", "source_tables": ["allergies", "patients"]}, "evidence": "Asian refers to race like 'asian%'; allergic to peanuts refers to allergies where DESCRIPTION = 'Allergy to peanuts'; \n"}
{"sample_id": 1410, "db_id": "synthea", "final": {"question": "Among the patients with hypertension, what is the average of their diastolic blood pressure?", "sql": "SELECT AVG(T1.VALUE) FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient INNER JOIN conditions AS T3 ON T2.patient = T3.PATIENT WHERE T3.DESCRIPTION = 'Hypertension' AND T1.DESCRIPTION = 'Diastolic Blood Pressure'", "source_tables": ["conditions", "patients", "observations"]}, "evidence": "hypertension refers to conditions where DESCRIPTION = 'Hypertension'; average diastolic blood pressure refers to AVG(VALUE) where DESCRIPTION = 'Diastolic Blood Pressure' from observations;"}
{"sample_id": 1411, "db_id": "synthea", "final": {"question": "What is the medicine prescribed for the patient with social security number 999-94-3751?", "sql": "SELECT T1.DESCRIPTION FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.ssn = '999-94-3751'", "source_tables": ["medications", "patients"]}, "evidence": "medicine prescribed refers to DESCRIPTION from medications; social security number 999-94-3751 refers to ssn = '999-94-3751';"}
{"sample_id": 1412, "db_id": "synthea", "final": {"question": "Give the social security number of the female Irish patient allergic to grass pollen.", "sql": "SELECT T2.ssn FROM allergies AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Allergy to grass pollen' AND T2.ethnicity = 'irish' AND T2.gender = 'F'", "source_tables": ["allergies", "patients"]}, "evidence": "social security number refers to ssn; female refers to gender = 'F'; Irish refers to ethnicity = 'irish'; allergic to grass pollen refers to allergies where DESCRIPTION = 'Allergy to grass pollen';"}
{"sample_id": 1413, "db_id": "synthea", "final": {"question": "Who is the patient involved in the care plan with code 311791003?", "sql": "SELECT T2.first, T2.last FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.CODE = 315043002", "source_tables": ["patients", "careplans"]}, "evidence": ""}
{"sample_id": 1414, "db_id": "synthea", "final": {"question": "Among the patients that died, what is the condition of the oldest patient?", "sql": "SELECT T1.DESCRIPTION FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.deathdate IS NOT NULL ORDER BY strftime('%Y', T2.deathdate) - strftime('%Y', T2.birthdate) DESC LIMIT 1", "source_tables": ["patients", "conditions"]}, "evidence": "if deathdate is not null, it means this patient died; condition refers to DESCRIPTION from conditions; the oldest patient refers to MAX(SUBTRACT(strftime('%Y', deathdate), strftime('%Y', birthdate)));"}
{"sample_id": 1415, "db_id": "synthea", "final": {"question": "What is the code of the prevalent disease with the highest occurrences?", "sql": "SELECT T2.code FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON T1.ITEM = T2.DESCRIPTION ORDER BY T1.OCCURRENCES DESC LIMIT 1", "source_tables": ["conditions", "all_prevalences"]}, "evidence": ""}
{"sample_id": 1416, "db_id": "synthea", "final": {"question": "What is the glucose level of the patient that lives at 365 Della Crossroad Suite 202, Deerfield, MA 01342 US?", "sql": "SELECT DISTINCT T2.DESCRIPTION, T2.VALUE, T2.UNITS FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Glucose' AND T1.address = '365 Della Crossroad Suite 202 Deerfield MA 01342 US'", "source_tables": ["patients", "observations"]}, "evidence": "glucose level refers to VALUE, UNITS where DESCRIPTION = 'Glucose' from observations; lives at 365 Della Crossroad Suite 202, Deerfield, MA 01342 US refers to address = '365 Della Crossroad Suite 202 Deerfield MA 01342 US';"}
{"sample_id": 1417, "db_id": "synthea", "final": {"question": "Provide at least 5 social security numbers of patients with a prevalent disease with a prevalence percentage lower than 30% of the average prevalence percentage of conditions.", "sql": "SELECT DISTINCT T2.ssn FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient INNER JOIN all_prevalences AS T3 ON lower(T1.DESCRIPTION) = lower(T3.ITEM) WHERE CAST(T3.'PREVALENCE PERCENTAGE' AS REAL) * 100 / ( SELECT AVG('PREVALENCE PERCENTAGE') FROM all_prevalences ) < 30 LIMIT 5", "source_tables": ["patients", "conditions", "all_prevalences"]}, "evidence": "social security number refers to ssn; prevalence percentage lower than 30% of the average prevalence percentage of conditions refers to PREVALENCE PERCENTAGE < MULTIPLY(0.3, AVG(PREVALENCE PERCENTAGE));"}
{"sample_id": 1418, "db_id": "synthea", "final": {"question": "Among the patients with acute bronchitis, what is the percentage of Asian women?", "sql": "SELECT CAST(SUM(CASE WHEN T2.gender = 'F' AND T2.race = 'asian' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.gender) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Acute bronchitis (disorder)'", "source_tables": ["patients", "conditions"]}, "evidence": "DIVIDE(COUNT(PATIENT where gender = 'F' and race = 'asian'), COUNT(PATIENT)) as percentage where DESCRIPTION = 'Acute bronchitis (disorder)' ;"}
{"sample_id": 1419, "db_id": "synthea", "final": {"question": "Provide the number of encounters for Major D'Amore.", "sql": "SELECT COUNT(T2.ID) FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Major' AND T1.last = 'D''Amore'", "source_tables": ["encounters", "patients"]}, "evidence": ""}
{"sample_id": 1420, "db_id": "synthea", "final": {"question": "List the procedures received by Emmy Waelchi.", "sql": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN procedures AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Emmy' AND T1.last = 'Waelchi'", "source_tables": ["patients", "procedures"]}, "evidence": "procedures refer to DESCRIPTION from procedures;"}
{"sample_id": 1421, "db_id": "synthea", "final": {"question": "Provide the patients' full names who received the extraction of wisdom tooth.", "sql": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN procedures AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Extraction of wisdom tooth'", "source_tables": ["patients", "procedures"]}, "evidence": "patient's full name refers to first, last; extraction of wisdom tooth refers to DESCRIPTION = 'Extraction of wisdom tooth' from procedures;"}
{"sample_id": 1422, "db_id": "synthea", "final": {"question": "Provide the body weight of Elly Koss in every observation.", "sql": "SELECT T2.DESCRIPTION, T2.VALUE, T2.UNITS FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.DESCRIPTION = 'Body Weight'", "source_tables": ["patients", "observations"]}, "evidence": "body weight VALUE and UNITS where DESCRIPTION = 'Body Weight' from observations;"}
{"sample_id": 1423, "db_id": "synthea", "final": {"question": "Name the patients who had an allergy to soy.", "sql": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Allergy to soya'", "source_tables": ["allergies", "patients"]}, "evidence": "allergy to soy refers to allergies where DESCRIPTION = 'Allergy to soya';"}
{"sample_id": 1424, "db_id": "synthea", "final": {"question": "How many times did Keven Kuhn receive DTaP immunization?", "sql": "SELECT COUNT(T2.CODE) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Keven' AND T1.last = 'Kuhn' AND T2.DESCRIPTION = 'DTaP'", "source_tables": ["immunizations", "patients"]}, "evidence": "DTaP immunization refers to immunizations where DESCRIPTION = 'DTaP';"}
{"sample_id": 1425, "db_id": "synthea", "final": {"question": "Who had to take Clopidogrel 75 MG Oral Tablet for over 10 years?", "sql": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Clopidogrel 75 MG Oral Tablet' AND strftime('%Y', T2.STOP) - strftime('%Y', T2.START) > 10", "source_tables": ["medications", "patients"]}, "evidence": "Who implies the full name of the patient which refers to first, last; Clopidogrel 75 MG Oral Tablet refers to medications where DESCRIPTION = 'Clopidogrel 75 MG Oral Tablet'; for over 10 years refers to SUBTRACT(strftime('%Y', STOP), strftime('%Y', START)) > 10;"}
{"sample_id": 1426, "db_id": "synthea", "final": {"question": "Which procedures and medications were received by the patient with the third-degree burn?", "sql": "SELECT DISTINCT T1.DESCRIPTION, T3.DESCRIPTION FROM procedures AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT INNER JOIN medications AS T3 ON T2.patient = T3.PATIENT WHERE T2.DESCRIPTION = 'Third degree burn'", "source_tables": ["medications", "procedures", "conditions"]}, "evidence": "procedures refer to DESCRIPTION from procedures; medications refers to DESCRIPTION from medications; third-degree burn refers to conditions where DESCRIPTION = 'Third degree burn';"}
{"sample_id": 1427, "db_id": "synthea", "final": {"question": "Provide medications received by patients with an allergy to mould on 6th June 2016.", "sql": "SELECT T2.DESCRIPTION FROM allergies AS T1 INNER JOIN medications AS T2 ON T1.PATIENT = T2.PATIENT WHERE T1.START = '6/6/16' AND T1.DESCRIPTION = 'Allergy to mould'", "source_tables": ["allergies", "medications"]}, "evidence": "medications refers to DESCRIPTION from medications; allergy to mould refers to allergies where DESCRIPTION = 'Allergy to mould'; on 6th June 2016 refers to START = '6/6/16';"}
{"sample_id": 1428, "db_id": "synthea", "final": {"question": "Describe the care plans received by the patient with secondary malignant neoplasm of the colon.", "sql": "SELECT DISTINCT T1.DESCRIPTION FROM careplans AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Secondary malignant neoplasm of colon'", "source_tables": ["careplans", "conditions"]}, "evidence": "care plans refer to DESCRIPTION from careplans; secondary malignant neoplasm of the colon refers to conditions where DESCRIPTION = 'Secondary malignant neoplasm of colon';"}
{"sample_id": 1429, "db_id": "synthea", "final": {"question": "What is the prevalence rate of the patients' diseases started on 9th May 2014?", "sql": "SELECT T2.'PREVALENCE RATE' FROM conditions AS T1 INNER JOIN all_prevalences AS T2 ON lower(T1.DESCRIPTION) = lower(T2.ITEM) WHERE T1.START = '2014-05-09'", "source_tables": ["conditions", "all_prevalences"]}, "evidence": "diseases started on 9th May 2014 refer to DESCRIPTION from conditions where START = '5/9/2014';"}
{"sample_id": 1430, "db_id": "synthea", "final": {"question": "Among observations in 2011, provide the names and ages of patients whose Systolic Blood Pressures are 200mmHg.", "sql": "SELECT T2.first, T2.last , CASE WHEN T2.deathdate IS NULL THEN strftime('%Y', T1.DATE) - strftime('%Y', T2.birthdate) ELSE strftime('%Y', T2.deathdate) - strftime('%Y', T2.birthdate) END AS age FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Systolic Blood Pressure' AND T1.VALUE = 200 AND T1.UNITS = 'mmHg' AND strftime('%Y', T1.DATE) = '2011'", "source_tables": ["patients", "observations"]}, "evidence": "name implies the patient's full name which refers to first, last; age refers to deathdate is null then SUBTRACT(strftime('%Y', DATE), strftime('%Y', birthdate)); Systolic Blood Pressures are 200mmHg refers to DESCRIPTION = 'Systolic Blood Pressure' and VALUE = 200 and UNITS = 'mmHg' from observations; in 2011 refers to DATE like '2011%';"}
{"sample_id": 1431, "db_id": "synthea", "final": {"question": "Among the immunizations in 2017, calculate the percentage of patients who received the Influenza seasonal injectable preservative free. Among them, how many patients are English?", "sql": "SELECT CAST(SUM(CASE WHEN T2.DESCRIPTION = 'Influenza seasonal injectable preservative free' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.patient), SUM(CASE WHEN T1.ethnicity = 'english' THEN 1 ELSE 0 END) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE strftime('%Y', T2.DATE) = '2017'", "source_tables": ["immunizations", "patients"]}, "evidence": "DIVIDE(COUNT(PATIENT when DESCRIPTION = 'Influenza seasonal injectable preservative free'), COUNT(PATIENT)) as percentage where strftime('%Y', 2017); English refers ethnicity = 'english';"}
{"sample_id": 1432, "db_id": "synthea", "final": {"question": "List down the first name of patients who encountered normal pregnancy.", "sql": "SELECT DISTINCT T1.first FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T2.REASONDESCRIPTION = 'Normal pregnancy'", "source_tables": ["encounters", "patients"]}, "evidence": "encountered normal pregnancy refers to encounters where REASONDESCRIPTION = 'Normal pregnancy';"}
{"sample_id": 1433, "db_id": "synthea", "final": {"question": "What are the birth date of patients who took outpatient encounter care plan?", "sql": "SELECT DISTINCT T1.birthdate FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Outpatient Encounter'", "source_tables": ["encounters", "patients"]}, "evidence": "outpatient encounter care plan refers to careplans where DESCRIPTION = 'Outpatient Encounter';"}
{"sample_id": 1434, "db_id": "synthea", "final": {"question": "List down the first name of patients who have cystitis condition.", "sql": "SELECT DISTINCT T1.first FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Cystitis'", "source_tables": ["patients", "conditions"]}, "evidence": "cystitis refers to conditions where DESCRIPTION = 'Cystitis';"}
{"sample_id": 1435, "db_id": "synthea", "final": {"question": "How many stroke patients have married?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Stroke' AND T1.marital = 'M'", "source_tables": ["patients", "conditions"]}, "evidence": "stroke refers to conditions where DESCRIPTION = 'Stroke'; married refers to the marital status of the patient in which marital = 'M';"}
{"sample_id": 1436, "db_id": "synthea", "final": {"question": "List down the address of patients who have billable period in 2010.", "sql": "SELECT DISTINCT T1.address FROM patients AS T1 INNER JOIN claims AS T2 ON T1.patient = T2.PATIENT WHERE T2.BILLABLEPERIOD LIKE '2010%'", "source_tables": ["patients", "claims"]}, "evidence": ""}
{"sample_id": 1437, "db_id": "synthea", "final": {"question": "List down the last name of patients who are allergic to dairy products.", "sql": "SELECT DISTINCT T1.last FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Allergy to dairy product'", "source_tables": ["allergies", "patients"]}, "evidence": "allergic to dairy products refers to allergies where DESCRIPTION = 'Allergy to dairy product';"}
{"sample_id": 1438, "db_id": "synthea", "final": {"question": "When the allergy starts for Angelo Buckridge.", "sql": "SELECT T2.START FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Adolfo' AND T1.last = 'Schmitt' AND T2.STOP IS NOT NULL", "source_tables": ["allergies", "patients"]}, "evidence": ""}
{"sample_id": 1439, "db_id": "synthea", "final": {"question": "How many of the male patients are allergic to house dust mites?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'House dust mite allergy' AND T1.gender = 'M'", "source_tables": ["allergies", "patients"]}, "evidence": "male patients refer to PATIENT where gender = 'M'; allergic to house dust mites refers to allergies where DESCRIPTION = 'House dust mite allergy';"}
{"sample_id": 1440, "db_id": "synthea", "final": {"question": "What kind of allergy is most common among white people?", "sql": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T1.race = 'white' GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1", "source_tables": ["allergies", "patients"]}, "evidence": "kind of allergy is most common refers to MAX(COUNT(DESCRIPTION)) from allergies; white refers to race = 'white';"}
{"sample_id": 1441, "db_id": "synthea", "final": {"question": "List down the first name of patients who received \"Influenza seasonal injectable preservative free\" immunization.", "sql": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free'", "source_tables": ["immunizations", "patients"]}, "evidence": "\"Influenza seasonal injectable preservative free\" immunization refers to immunizations where DESCRIPTION = 'Influenza seasonal injectable preservative free';"}
{"sample_id": 1442, "db_id": "synthea", "final": {"question": "Calculate the number of female patients who accepted \"HPV quadrivalent\" immunization.", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'HPV  quadrivalent' AND T1.gender = 'F'", "source_tables": ["immunizations", "patients"]}, "evidence": "female refers to gender = 'F'; \"HPV quadrivalent\" immunization refers to immunizations where DESCRIPTION = 'HPV quadrivalent';"}
{"sample_id": 1443, "db_id": "synthea", "final": {"question": "List down the encounter descriptions of patients who were born in Pittsfield MA US.", "sql": "SELECT DISTINCT T2.DESCRIPTION FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.birthplace = 'Pittsfield MA US'", "source_tables": ["encounters", "patients"]}, "evidence": "born in Pittsfield MA US refers to birthplace = 'Pittsfield MA US';"}
{"sample_id": 1444, "db_id": "synthea", "final": {"question": "Calculate the total type of allergies for German people.", "sql": "SELECT COUNT(DISTINCT T2.DESCRIPTION) FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T1.ethnicity = 'german'", "source_tables": ["allergies", "patients"]}, "evidence": "type of allergies refers to DESCRIPTION from allergies; German people refer to PATIENT where ethnicity = 'german';"}
{"sample_id": 1445, "db_id": "synthea", "final": {"question": "Calculate the average age of patients with prediabetes care plan.", "sql": "SELECT CAST(SUM(CASE WHEN T1.deathdate IS NULL THEN strftime('%Y', T2.STOP) - strftime('%Y', T1.birthdate) ELSE strftime('%Y', T1.deathdate) - strftime('%Y', T1.birthdate) END) AS REAL) / COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T2.REASONDESCRIPTION = 'Prediabetes'", "source_tables": ["patients", "careplans"]}, "evidence": "SUBTRACT(SUM(deathdate), SUM(birthdate)), COUNT(patient) where REASONDESCRIPTION = 'Prediabetes' from careplans;"}
{"sample_id": 1446, "db_id": "synthea", "final": {"question": "How many of the patients who have stopped taking medication for 'coronary heart disease' are still alive?", "sql": "SELECT COUNT(DISTINCT T2.patient) FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.REASONDESCRIPTION = 'Coronary Heart Disease' AND T1.STOP IS NOT NULL AND T2.deathdate IS NULL", "source_tables": ["medications", "patients"]}, "evidence": "patients who have stopped taking medication for 'coronary heart disease' refer to PATIENT where REASONDESCRIPTION = 'Coronary Heart Disease' and STOP is not null from medications; if deathdate is null, it means this patient is still alive;"}
{"sample_id": 1447, "db_id": "synthea", "final": {"question": "How many of the patients who underwent a 'bone immobilization' procedure have a driver's license?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN procedures AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Bone immobilization' AND T1.drivers IS NOT NULL", "source_tables": ["patients", "procedures"]}, "evidence": "patients who underwent a 'bone immobilization' procedure refer to PATIENT from procedures where DESCRIPTION = 'Bone immobilization'; have a driver's license refers to drivers is not null;"}
{"sample_id": 1448, "db_id": "synthea", "final": {"question": "Indicate the full name of the patients who have 3 different allergies.", "sql": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT GROUP BY T1.patient ORDER BY COUNT(DISTINCT T2.DESCRIPTION) > 3", "source_tables": ["allergies", "patients"]}, "evidence": "full name refers to first, last; have 3 different allergies refer to allergies where COUNT(DESCRIPTION) > 3;"}
{"sample_id": 1449, "db_id": "synthea", "final": {"question": "How many patients with 'allergy to eggs' have been immunized with 'Td (adult) preservative free'?", "sql": "SELECT COUNT(DISTINCT T2.patient) FROM allergies AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient INNER JOIN immunizations AS T3 ON T2.patient = T3.PATIENT WHERE T1.DESCRIPTION = 'Allergy to eggs' AND T3.DESCRIPTION = 'Td (adult) preservative free'", "source_tables": ["allergies", "patients", "immunizations"]}, "evidence": "allergy to eggs' refers to allergies where DESCRIPTION = 'Allergy to eggs'; immunized with 'Td (adult) preservative free' refers to immunizations where DESCRIPTION = 'Td (adult) preservative free';"}
{"sample_id": 1450, "db_id": "synthea", "final": {"question": "How many patients with a body weight of more than 100 kg have a 'diabetes self-management plan' care plan?", "sql": "SELECT COUNT(DISTINCT T2.patient) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient INNER JOIN observations AS T3 ON T2.patient = T3.PATIENT WHERE T3.DESCRIPTION = 'Body Weight' AND T1.DESCRIPTION = 'Diabetes self management plan' AND T3.VALUE > 100 AND T3.UNITS = 'kg'", "source_tables": ["patients", "careplans", "observations"]}, "evidence": "body weight of more than 100 kg refers to observations.DESCRIPTION = 'Body Weight' AND observations.VALUE > 100 AND observations.UNITS = 'kg'; diabetes self-management plan refers to careplans.DESCRIPTION = 'Diabetes self management plan';"}
{"sample_id": 1451, "db_id": "synthea", "final": {"question": "What gender is more prone to 'dander (animal) allergy'?", "sql": "SELECT T1.gender FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Dander (animal) allergy' GROUP BY T1.gender ORDER BY COUNT(T1.gender) DESC LIMIT 1", "source_tables": ["allergies", "patients"]}, "evidence": "gender who is more prone to dander (animal) allergy refers to MAX(COUNT(Gender WHERE allergies.DESCRIPTION = 'Dander (animal) allergy'));"}
{"sample_id": 1452, "db_id": "synthea", "final": {"question": "On what dates did the billable period begin for patients with the last name Dickinson?", "sql": "SELECT DISTINCT T2.BILLABLEPERIOD FROM patients AS T1 INNER JOIN claims AS T2 ON T1.patient = T2.PATIENT WHERE T1.last = 'Dickinson'", "source_tables": ["patients", "claims"]}, "evidence": "dates when the billable period begin refers to BILLABLEPERIOD;"}
{"sample_id": 1453, "db_id": "synthea", "final": {"question": "List the full name of all patients with 'otitis media'.", "sql": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Otitis media'", "source_tables": ["patients", "conditions"]}, "evidence": "full name = first, last; otitis media refers to conditions.DESCRIPTION = 'Otitis media';"}
{"sample_id": 1454, "db_id": "synthea", "final": {"question": "How many patients of Irish ethnicity take medication for 'myocardial infarction'?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.REASONDESCRIPTION = 'Myocardial Infarction' AND T1.ethnicity = 'irish'", "source_tables": ["medications", "patients"]}, "evidence": "take medication for myocardial infarction refers to medications.REASONDESCRIPTION = 'Myocardial Infarction';"}
{"sample_id": 1455, "db_id": "synthea", "final": {"question": "How many patients with care plan for 'concussion with loss of consciousness' are married?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.marital = 'M' AND T2.REASONDESCRIPTION = 'Concussion with loss of consciousness'", "source_tables": ["patients", "careplans"]}, "evidence": "concussion with loss of consciousness refers to careplans.DESCRIPTION = 'Concussion with loss of consciousness'; married refers to marital = 'M';"}
{"sample_id": 1456, "db_id": "synthea", "final": {"question": "How many patients immunized against 'monovalent rotavirus' ceased their care plan on 11/23/2013?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM careplans AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'rotavirus  monovalent' AND T1.STOP = '2013-11-23'", "source_tables": ["immunizations", "careplans"]}, "evidence": "immunized against monovalent rotavirus refers to immunizations.DESCRIPTION = 'rotavirus monovalent'; ceased their care plan on 11/23/2013 refers to careplans.STOP = '2013-11-23';"}
{"sample_id": 1457, "db_id": "synthea", "final": {"question": "How many women need to take 'Nitroglycerin 0.4 MG/ACTUAT [Nitrolingual]'?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Nitroglycerin 0.4 MG/ACTUAT [Nitrolingual]' AND T1.gender = 'F'", "source_tables": ["medications", "patients"]}, "evidence": "women refers to gender = 'F';\u00a0Nitroglycerin 0.4 MG/ACTUAT [Nitrolingual] refers to medications.DESCRIPTION = 'Nitroglycerin 0.4 MG/ACTUAT [Nitrolingual]'"}
{"sample_id": 1458, "db_id": "synthea", "final": {"question": "What percentage of patients born in 'Pembroke MA US' have 'allergy to grass pollen'?", "sql": "SELECT CAST(SUM(CASE WHEN T2.DESCRIPTION = 'Allergy to grass pollen' THEN 1 ELSE 0 END) AS REL) * 100 / COUNT(T1.patient) FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T1.birthplace = 'Pembroke MA US'", "source_tables": ["allergies", "patients"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(patient WHERE allergies.DESCRIPTION = 'Allergy to grass pollen'), COUNT(patient) WHERE birthplace = 'Pembroke MA US'), 100.0); born in Pembroke MA US refers to birthplace = 'Pembroke MA US'; allergy to grass pollen refers to allergies.DESCRIPTION = 'Allergy to grass';"}
{"sample_id": 1459, "db_id": "synthea", "final": {"question": "What is the average body weight of Asian patients?", "sql": "SELECT SUM(T2.VALUE) / COUNT(T1.patient) FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.race = 'asian' AND T2.DESCRIPTION = 'Body Weight' AND T2.UNITS = 'kg'", "source_tables": ["patients", "observations"]}, "evidence": "average = AVG(observations.VALUE WHERE observations.DESCRIPTION = 'Body Weight' AND observations.UNITS = 'kg'); body weight refers to observations.DESCRIPTION = 'Body Weight'; Asian refers to race = 'asian';"}
{"sample_id": 1460, "db_id": "synthea", "final": {"question": "Write down the Social Security numbers of patients who have latex allergies.", "sql": "SELECT T1.ssn FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Latex allergy'", "source_tables": ["allergies", "patients"]}, "evidence": "Social Security numbers refers to ssn; latex allergies refers to allergies.DESCRIPTION = 'Latex allergy';"}
{"sample_id": 1461, "db_id": "synthea", "final": {"question": "How long did Isadora Moen's allergy last? Tell me what kind of allergy she has.", "sql": "SELECT CASE WHEN SUBSTR(T1.STOP, -2, 1) != '9' THEN SUBSTR(T1.STOP, LENGTH(T1.STOP) - 1) + 2000 END - CASE WHEN SUBSTR(T1.START, -2, 1) = '9' THEN SUBSTR(T1.START, LENGTH(T1.START) - 1) + 1900 ELSE SUBSTR(T1.START, LENGTH(T1.START) - 1) + 2000 END AS years , T1.DESCRIPTION FROM allergies AS T1 INNER JOIN patients AS T2 ON T2.patient = T1.PATIENT WHERE T1.STOP IS NOT NULL AND T1.START IS NOT NULL AND T2.first = 'Isadora' AND T2.last = 'Moen'", "source_tables": ["allergies", "patients"]}, "evidence": "how long the allergies last = SUBTRACT(allergies.STOP, allergies.START); kind of allergy refers to allergies.DESCRIPTION;"}
{"sample_id": 1462, "db_id": "synthea", "final": {"question": "How many times was Elly Koss given a care plan between 1/11/2009 and 10/23/2010?", "sql": "SELECT COUNT(T2.PATIENT) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.START BETWEEN '2009-01-11' AND '2010-10-23'", "source_tables": ["patients", "careplans"]}, "evidence": "between 1/11/2009 and 10/23/2010 refers to careplans.START between '2009-11-1' and '2010-10-23';"}
{"sample_id": 1463, "db_id": "synthea", "final": {"question": "In 2009, who among the married patients had undergone a care plan for more than 60 days?", "sql": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.marital = 'M' AND strftime('%J', T2.STOP) - strftime('%J', T2.START) > 60", "source_tables": ["patients", "careplans"]}, "evidence": "in 2009 refers to year(careplans.START) = 2009; married patients refers to marital = 'M'; undergone a care plan for more than 60 days refers to SUBTRACT(careplans.STOP, careplans.START) > 60;"}
{"sample_id": 1464, "db_id": "synthea", "final": {"question": "Please provide the dates on which Elly Koss was immunized with the influenza seasonal injectable preservative-free vaccine.", "sql": "SELECT T2.DATE FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free' AND T1.first = 'Elly' AND T1.last = 'Koss'", "source_tables": ["immunizations", "patients"]}, "evidence": "date of immunization refers to immunizations.DATE; immunized with the influenza seasonal injectable preservative-free vaccine refers to immunizations.DESCRIPTION = 'Influenza seasonal injectable preservative free';"}
{"sample_id": 1465, "db_id": "synthea", "final": {"question": "From 7/9/2010 to 10/29/2013, how many black patients were immunized with the meningococcal MCV4P vaccine?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'meningococcal MCV4P' AND T2.DATE BETWEEN '2010-07-09' AND '2013-10-29' AND T1.race = 'black'", "source_tables": ["immunizations", "patients"]}, "evidence": "From 7/9/2010 to 10/29/2013 refers to DATE between '2010-07-09' and '2013-10-29'; black patients refers to race = 'black'; immunized with the meningococcal MCV4P vaccine refers to immunizations.DESCRIPTION = 'meningococcal MCV4P';"}
{"sample_id": 1466, "db_id": "synthea", "final": {"question": "Give me the immunization codes and dates on which Ms. Jacquelyn Shanahan was immunized with influenza seasonal injectable preservative-free vaccine.", "sql": "SELECT DISTINCT T2.CODE, T2.DATE FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Ms.' AND T1.first = 'Jacquelyn' AND T1.last = 'Shanahan' AND T2.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free'", "source_tables": ["immunizations", "patients"]}, "evidence": "immunization codes refers to immunizations.CODE; immunization dates refers to immunizations.DATE; immunized with influenza seasonal injectable preservative-free vaccine refers to immunizations.DESCRIPTION = 'Influenza seasonal injectable preservative free'; 4 consecutive years refers to 4 succeeding years;"}
{"sample_id": 1467, "db_id": "synthea", "final": {"question": "How long did Berry Keebler take the Acetaminophen 160 MG when he was admitted due to acute bronchitis?", "sql": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS takenDays FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Berry' AND T1.last = 'Keebler' AND T2.REASONDESCRIPTION = 'Acute bronchitis (disorder)' AND T2.DESCRIPTION = 'Acetaminophen 160 MG'", "source_tables": ["medications", "patients"]}, "evidence": "how long = SUBTRACT(medications.STOP, medications.START); Acetaminophen 160 MG refers to medications.DESCRIPTION = 'Acetaminophen 160 MG'; acute bronchitis refers to medications.REASONDESCRIPTION = 'Acute bronchitis (disorder)';"}
{"sample_id": 1468, "db_id": "synthea", "final": {"question": "In 2010, how many single patients took Nitrofurantoin 5 mg/ML [Furadantin] to cure cystitis?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.marital = 'S' AND T2.REASONDESCRIPTION = 'Cystitis' AND T2.DESCRIPTION = 'Nitrofurantoin 5 MG/ML [Furadantin]' AND strftime('%Y', T2.START) = '2010'", "source_tables": ["medications", "patients"]}, "evidence": "in 2010 refers to substr(medications.START, 1, 4) = '2010' AND substr(medications.stop, 1, 4) = '2010'; Nitrofurantoin 5 mg/ML [Furadantin] refers to medications.DESCRIPTION = 'Nitrofurantoin 5 MG/ML [Furadantin]'; cystitis refers to medications.REASONDESCRIPTION = 'Cystitis';"}
{"sample_id": 1469, "db_id": "synthea", "final": {"question": "Tell me the reason for Lavelle Vandervort's encounter on 11/20/2013?", "sql": "SELECT T2.REASONDESCRIPTION FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T2.DATE = '2013-11-20' AND T1.first = 'Lavelle' AND T1.last = 'Vandervort'", "source_tables": ["encounters", "patients"]}, "evidence": "reason for encounter refers to encounters.REASONDESCRIPTION; on 11/20/2013 refers to encounters.DATE = '2013-11-20';"}
{"sample_id": 1544, "db_id": "car_retails", "final": {"question": "List the country and how many customers are there.", "sql": "SELECT country, COUNT(customerNumber) FROM customers GROUP BY country", "source_tables": ["customers"]}, "evidence": ""}
{"sample_id": 1545, "db_id": "car_retails", "final": {"question": "Which different vendor has the most amount of orders? Calculate the total estimated earnings.", "sql": "SELECT DISTINCT T1.productVendor, T1.MSRP - T1.buyPrice FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode GROUP BY T1.productVendor, T1.MSRP, T1.buyPrice ORDER BY COUNT(T2.quantityOrdered) DESC LIMIT 1", "source_tables": ["orderdetails", "products"]}, "evidence": "amount of order refers to quantityOrdered; most amount of orders refers to SUM(QuantityOrdered); estimated earnings refers to expected profits; expected profits = SUBTRACT(msrp, buyPrice);"}
{"sample_id": 1546, "db_id": "car_retails", "final": {"question": "Who is the sales agent of the distinct customer who paid the highest amount in the year 2004?", "sql": "SELECT DISTINCT T3.lastName, T3.firstName FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber INNER JOIN employees AS T3 ON T2.salesRepEmployeeNumber = T3.employeeNumber WHERE STRFTIME('%Y', T1.paymentDate) = '2004' ORDER BY T1.amount DESC LIMIT 1", "source_tables": ["employees", "payments", "customers"]}, "evidence": ""}
{"sample_id": 1547, "db_id": "car_retails", "final": {"question": "What was the total price of the products shipped to Rovelli Gifts Distributors Ltd. between 1/1/2003 and 12/31/2003?", "sql": "SELECT T3.priceEach * T3.quantityOrdered FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber INNER JOIN orderdetails AS T3 ON T2.orderNumber = T3.orderNumber WHERE T1.customerName = 'Rovelli Gifts' AND T2.status = 'Shipped' AND STRFTIME('%Y', T2.shippedDate) = '2003'", "source_tables": ["orderdetails", "orders", "customers"]}, "evidence": "Mini Gifts Distributors Ltd. Is the customer name; shippedDate between '2003-01-01' and '2003-12-31'; total price = MULTIPLY(quantityOrdered, priceEach);"}
{"sample_id": 1548, "db_id": "car_retails", "final": {"question": "How many employees are there in Sydney?", "sql": "SELECT COUNT(employeeNumber) FROM employees WHERE officeCode = ( SELECT officeCode FROM offices WHERE city = 'Sydney' )", "source_tables": ["employees", "offices"]}, "evidence": "sales agent and sales representative are synonyms; Sydney is a city;"}
{"sample_id": 1549, "db_id": "car_retails", "final": {"question": "Which sales representatives in New York city whose leader is Anthony Bow with the employee number is 1143? Indicate their employee numbers.", "sql": "SELECT T1.employeeNumber FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T1.reportsTo = 1143 AND T2.city = 'NYC'", "source_tables": ["employees", "offices"]}, "evidence": "reportsTO' is the leader of the 'employeeNumber';"}
{"sample_id": 1550, "db_id": "car_retails", "final": {"question": "What is the average, highest and lowest annual payments collected between 1/1/2003 to 12/31/2005?", "sql": "SELECT CAST(SUM(T1.amount) AS REAL) / 3, MAX(T1.amount) , MIN(T1.amount) FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.paymentDate BETWEEN '2003-01-01' AND '2005-12-31'", "source_tables": ["payments", "customers"]}, "evidence": "paymentDate BETWEEN '2003-01-01' AND '2005-12-31'; average annual payments = DIVIDE(SUM(amount), 3);"}
{"sample_id": 1551, "db_id": "car_retails", "final": {"question": "Which countries do the top 5 highest paying customers in a single payment come from? Indicate their entire address.", "sql": "SELECT DISTINCT T2.country, T2.addressLine1, T2.addressLine2 FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber ORDER BY T1.amount DESC LIMIT 5", "source_tables": ["payments", "customers"]}, "evidence": "highest paying customer refers to MAX(amount); entire address = addressLine1+addressLine2;"}
{"sample_id": 1552, "db_id": "car_retails", "final": {"question": "How many checks were issued by Euro+ Shopping Channel in the year 2004?", "sql": "SELECT COUNT(T1.checkNumber) FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE customerName = 'Euro+ Shopping Channel' AND STRFTIME('%Y', T1.paymentDate) = '2004'", "source_tables": ["payments", "customers"]}, "evidence": "Euro+ Shopping Channel is a customer name; year(paymentDate) = '2004';"}
{"sample_id": 1553, "db_id": "car_retails", "final": {"question": "Of all the classic cars, with a product scale of 1:18, which product is the most ordered product by customers?", "sql": "SELECT T1.productName FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode WHERE T1.productScale = '1:18' AND T1.productLine = 'Classic Cars' GROUP BY T1.productName ORDER BY SUM(T2.quantityOrdered) DESC LIMIT 1", "source_tables": ["orderdetails", "products"]}, "evidence": "classic car is a product line; most ordered product refers to MAX(quantityOrdered);"}
{"sample_id": 1554, "db_id": "car_retails", "final": {"question": "How many customers have a credit limit of not more than 100,000 and which customer made the highest total payment amount for the year 2004?", "sql": "SELECT ( SELECT COUNT(customerNumber) FROM customers WHERE creditLimit <= 100000 AND customerNumber IN ( SELECT customerNumber FROM payments WHERE STRFTIME('%Y', paymentDate) = '2004' ) ), T1.customerName FROM customers AS T1 INNER JOIN payments AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.creditLimit <= 100000 AND STRFTIME('%Y', T2.paymentDate) = '2004' GROUP BY T1.customerNumber, T1.customerName ORDER BY SUM(T2.amount) DESC LIMIT 1", "source_tables": ["payments", "customers"]}, "evidence": "creditLimit < = 100000; total payment amount refers to amount; highest total payment amount refers to MAX(amount); year(paymentDate) = '2004';"}
{"sample_id": 1555, "db_id": "car_retails", "final": {"question": "Which of the customers, whose Tokyo-based sales representative reports to the Vice President of Sales whose employee number is 1056, has paid the highest payment? List the customer's name, the contact person and calculate the total amount of that customer's total payments.", "sql": "SELECT T2.customerName, T2.contactFirstName, T2.contactLastName, SUM(T3.amount) FROM employees AS T1 INNER JOIN customers AS T2 ON T2.salesRepEmployeeNumber = T1.employeeNumber INNER JOIN payments AS T3 ON T2.customerNumber = T3.customerNumber INNER JOIN offices AS T4 ON T1.officeCode = T4.officeCode WHERE T4.city = 'Tokyo' AND T1.reportsTo = 1056 GROUP BY T2.customerName, T2.contactFirstName, T2.contactLastName ORDER BY amount DESC LIMIT 1", "source_tables": ["offices", "employees", "payments", "customers"]}, "evidence": "Tokyo is a city; 'reportsTO' is the leader of the 'employeeNumber'; highest payment refers to MAX(amount); total amount of payments = SUM(amount);"}
{"sample_id": 1556, "db_id": "car_retails", "final": {"question": "Which two products has the highest and lowest expected profits? Determine the total price for each product in terms of the largest quantity that was ordered.", "sql": "SELECT T2.productName, SUM(T1.quantityOrdered * T1.priceEach) FROM orderdetails AS T1 INNER JOIN ( SELECT productCode, productName FROM products ORDER BY MSRP - buyPrice DESC LIMIT 1 ) AS T2 ON T1.productCode = T2.productCode UNION SELECT T2.productName, SUM(quantityOrdered * priceEach) FROM orderdetails AS T1 INNER JOIN ( SELECT productCode, productName FROM products ORDER BY MSRP - buyPrice ASC LIMIT 1 ) AS T2 ON T1.productCode = T2.productCode", "source_tables": ["orderdetails", "products"]}, "evidence": "expected profits = SUBTRACT(msrp, buyPrice); total price = MULTIPLY(quantityOrdered, priceEach)"}
{"sample_id": 1557, "db_id": "car_retails", "final": {"question": "How many different orders with a total price greater than 4000 are cancelled?", "sql": "SELECT COUNT(DISTINCT T1.orderNumber) FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE T1.quantityOrdered * T1.priceEach > 4000 AND T2.status = 'Cancelled'", "source_tables": ["orderdetails", "orders"]}, "evidence": "total price = MULTIPLY(quantityOrdered, priceEach) > 4000; cancelled orders refer to status = 'Cancelled';"}
{"sample_id": 1558, "db_id": "car_retails", "final": {"question": "How many distinct orders were there in 2003 when the quantity ordered was less than 30?", "sql": "SELECT COUNT(DISTINCT T1.orderNumber) FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE T1.quantityOrdered < 30 AND STRFTIME('%Y', T2.orderDate) = '2003'", "source_tables": ["orderdetails", "orders"]}, "evidence": "year(orderDate) = '2003'; quantityOrdered < 30;"}
{"sample_id": 1559, "db_id": "car_retails", "final": {"question": "What is the total value of cancelled orders?", "sql": "SELECT SUM(T1.quantityOrdered * T1.priceEach) FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE T2.status = 'Cancelled'", "source_tables": ["orderdetails", "orders"]}, "evidence": "total value = SUM(MULTIPLY(quantityOrdered, priceEach)); cancelled orders refers to status = 'Cancelled';"}
{"sample_id": 1560, "db_id": "car_retails", "final": {"question": "Please calculate the total value of Motorcycles orders.", "sql": "SELECT SUM(T1.quantityOrdered * T1.priceEach) FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode WHERE T2.productLine = 'Motorcycles'", "source_tables": ["orderdetails", "products"]}, "evidence": "Motorcycle is a product line; total value = SUM(MULTIPLY(quantityOrdered, priceEach));"}
{"sample_id": 1561, "db_id": "car_retails", "final": {"question": "How many Planes orders were there?", "sql": "SELECT COUNT(T1.productCode) FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode WHERE T2.productLine = 'Planes'", "source_tables": ["orderdetails", "products"]}, "evidence": "Planes is a product line;"}
{"sample_id": 1562, "db_id": "car_retails", "final": {"question": "How many orders which expected profits greater than 100?", "sql": "SELECT COUNT(T1.productCode) FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode WHERE T2.MSRP - T2.buyPrice > 100", "source_tables": ["orderdetails", "products"]}, "evidence": "expected profits greater than 100 = (SUBTRACT(msrp, buyPrice))>100;"}
{"sample_id": 1563, "db_id": "car_retails", "final": {"question": "Please calculate the average total price of orders from Exoto Designs Vendor in 2005.", "sql": "SELECT SUM(T2.quantityOrdered * T2.priceEach) / COUNT(T3.orderNumber) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber WHERE T1.productVendor = 'Exoto Designs' AND STRFTIME('%Y', T3.orderDate) = '2005'", "source_tables": ["orderdetails", "orders", "products"]}, "evidence": "average total price = DIVIDE(SUM(MULTIPLY(quantityOrdered, priceEach))), COUNT(orderNumber)); year(orderDate) = '2005';"}
{"sample_id": 1564, "db_id": "car_retails", "final": {"question": "How many sales representatives who have office code is 1?", "sql": "SELECT COUNT(officeCode) FROM employees WHERE jobTitle = 'Sales Rep' AND officeCode = 1", "source_tables": ["employees"]}, "evidence": "sales representative refers to jobTitle = 'Sales Rep';"}
{"sample_id": 1565, "db_id": "car_retails", "final": {"question": "Please list different customer names with the payment amount of over 50,000.", "sql": "SELECT DISTINCT T2.customerName FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.amount > 50000", "source_tables": ["payments", "customers"]}, "evidence": "amount > 50000;"}
{"sample_id": 1566, "db_id": "car_retails", "final": {"question": "Please calculate the total payment amount of customers who come from the USA.", "sql": "SELECT SUM(T1.amount) FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T2.country = 'USA'", "source_tables": ["payments", "customers"]}, "evidence": "USA is a country; total amount payment refers to SUM(amount);"}
{"sample_id": 1567, "db_id": "car_retails", "final": {"question": "What are the total payments of customers with no credit limit in 2003?", "sql": "SELECT SUM(amount) FROM payments WHERE STRFTIME('%Y', paymentDate) = '2003' AND customerNumber IN ( SELECT customerNumber FROM customers WHERE creditLimit = 0 )", "source_tables": ["payments", "customers"]}, "evidence": "total payment refers to SUM(amount); no credit limit refers to creditLimit = 0; year(paymentDate) = '2003';"}
{"sample_id": 1568, "db_id": "car_retails", "final": {"question": "Please list the name and phone number of the customer whose order was cancelled.", "sql": "SELECT T2.customerName, T2.phone FROM orders AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.status = 'Cancelled'", "source_tables": ["orders", "customers"]}, "evidence": "cancelled order refers to status = 'Cancelled';"}
{"sample_id": 1569, "db_id": "car_retails", "final": {"question": "How many French customers shipped 2 orders which have been cancelled?", "sql": "SELECT COUNT(T2.country) FROM orders AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.status = 'Shipped' AND T2.country = 'France' GROUP BY T2.customerNumber HAVING COUNT(T1.status) = 2", "source_tables": ["orders", "customers"]}, "evidence": "French is a nationality of country = 'France'; cancelled orders refers to status = 'Cancelled';"}
{"sample_id": 1570, "db_id": "car_retails", "final": {"question": "Please calculate the average total price of shipped orders from German customers.", "sql": "SELECT SUM(T3.quantityOrdered * T3.priceEach) / COUNT(T2.orderNumber) FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber INNER JOIN orderdetails AS T3 ON T2.orderNumber = T3.orderNumber WHERE T2.status = 'Shipped' AND T1.country = 'Germany'", "source_tables": ["orderdetails", "orders", "customers"]}, "evidence": "average total price = DIVIDE(MULTIPLY(quantityOrdered, priceEach)), COUNT(orderNumber)); German is a nationality of country = 'Germany'; shipped orders refers to status = 'Shipped';"}
{"sample_id": 1571, "db_id": "car_retails", "final": {"question": "List out full name of employees who are working in Tokyo?", "sql": "SELECT T1.firstName, T1.lastName FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Tokyo'", "source_tables": ["employees", "offices"]}, "evidence": "Tokyo is a city; full name = firstName+lastName;"}
{"sample_id": 1572, "db_id": "car_retails", "final": {"question": "How many Sales Rep who are working in Tokyo? List out email and full name of those employees.", "sql": "SELECT T1.firstName, T1.lastName, T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Tokyo' AND T1.jobTitle = 'Sales Rep'", "source_tables": ["employees", "offices"]}, "evidence": "Sales Rep is a job title; Tokyo is a city; full name = firstName+lastName;"}
{"sample_id": 1573, "db_id": "car_retails", "final": {"question": "State the email of those who are staff of Murphy Diane whose number is 1002 and living in San Francisco", "sql": "SELECT T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T1.reportsTo = 1002 AND T2.city = 'San Francisco'", "source_tables": ["employees", "offices"]}, "evidence": "staff of refers to reportsTO; San Francisco is a city;"}
{"sample_id": 1574, "db_id": "car_retails", "final": {"question": "Determine the email and Code of employee who are working at United State, state MA", "sql": "SELECT T1.email, T1.employeeNumber FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.state = 'MA' AND T2.country = 'USA'", "source_tables": ["employees", "offices"]}, "evidence": "code of employee refers to employeeNumber; United States of America refers to country = 'USA';"}
{"sample_id": 1575, "db_id": "car_retails", "final": {"question": "How many Sales Manager who are working in Sydney? List out their email.", "sql": "SELECT T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T1.jobTitle LIKE '%Sales Manager%' AND T2.city = 'Sydney'", "source_tables": ["employees", "offices"]}, "evidence": "Sales Manager is a job title; Sydney is a city;"}
{"sample_id": 1576, "db_id": "car_retails", "final": {"question": "How many employees who are living in Australia and have the credit limit under 200000? State their email address and countries where they are working.", "sql": "SELECT T2.email, T3.country FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber INNER JOIN offices AS T3 ON T2.officeCode = T3.officeCode WHERE T3.country = 'Australia' AND T1.creditLimit < 200000 AND T2.jobTitle = 'Sales Rep'", "source_tables": ["offices", "employees", "customers"]}, "evidence": "Australia is a country; creditLimit < 20000;"}
{"sample_id": 1577, "db_id": "car_retails", "final": {"question": "State 10 emails of UK Sales Rep who have the lowest credit limit.", "sql": "SELECT DISTINCT T2.email FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber WHERE T2.jobTitle = 'Sales Rep' AND T1.country = 'UK' ORDER BY T1.creditLimit LIMIT 10", "source_tables": ["employees", "customers"]}, "evidence": "UK is a country; Sales Rep is a job title;"}
{"sample_id": 1578, "db_id": "car_retails", "final": {"question": "How many Australian customers who have credit line under 220000?", "sql": "SELECT COUNT(creditLimit) FROM customers WHERE creditLimit < 220000 AND country = 'Australia'", "source_tables": ["customers"]}, "evidence": "Australian is a nationality of country = 'Australia'; credit line refers to creditLimit; creditLimit < 220000;"}
{"sample_id": 1579, "db_id": "car_retails", "final": {"question": "List out 3 customer numbers who have highest amount payment", "sql": "SELECT customerNumber FROM payments ORDER BY amount DESC LIMIT 3", "source_tables": ["payments"]}, "evidence": "amount of payment refers to amount;"}
{"sample_id": 1580, "db_id": "car_retails", "final": {"question": "Determine the email and Code of employee who are working at United State, state CA", "sql": "SELECT T1.email, T1.employeeNumber FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.country = 'USA' AND T2.state = 'CA' GROUP BY T1.email, T1.officeCode", "source_tables": ["employees", "offices"]}, "evidence": "United States of America refers to country = 'USA'; code of employee refers to employeeNumber;"}
{"sample_id": 1581, "db_id": "car_retails", "final": {"question": "List out full name of employees who are working in Boston?", "sql": "SELECT T1.firstName, T1.lastName FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Boston'", "source_tables": ["employees", "offices"]}, "evidence": "full name = contactFirstName, contactLastName; Boston is a city;"}
{"sample_id": 1582, "db_id": "car_retails", "final": {"question": "State top 3 emails of UK Sales Rep who have the highest credit limit.", "sql": "SELECT T2.email FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber WHERE T2.jobTitle = 'Sales Rep' AND T1.country = 'UK' GROUP BY T1.customerName, T2.email ORDER BY SUM(T1.creditLimit) DESC LIMIT 3", "source_tables": ["employees", "customers"]}, "evidence": "UK is a country; Sales Rep is a job title;"}
{"sample_id": 1583, "db_id": "car_retails", "final": {"question": "How many customers who are in Norway and have credit line under 220000?", "sql": "SELECT COUNT(creditLimit) FROM customers WHERE creditLimit < 220000 AND country = 'Norway'", "source_tables": ["customers"]}, "evidence": "Norway is a country; credit line refers to creditLimit; creditLimit<220000;"}
{"sample_id": 1584, "db_id": "car_retails", "final": {"question": "List out full name and email of employees who are working in Paris?", "sql": "SELECT T1.firstName, T1.lastName, T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Paris'", "source_tables": ["employees", "offices"]}, "evidence": "full name = firstName+LastName; Paris is a city;"}
{"sample_id": 1585, "db_id": "car_retails", "final": {"question": "List the product code of the top five motorcycles, by descending order, the number of quantity in stock.", "sql": "SELECT productCode, quantityInStock FROM products WHERE productLine = 'Motorcycles' ORDER BY quantityInStock DESC LIMIT 5", "source_tables": ["products"]}, "evidence": "motorcycle is a product line;"}
{"sample_id": 1586, "db_id": "car_retails", "final": {"question": "Among the German customers, how many of the them has credit limit of zero?", "sql": "SELECT COUNT(customerNumber) FROM customers WHERE creditLimit = 0 AND country = 'Germany'", "source_tables": ["customers"]}, "evidence": "German is a nationality of country = 'Germany'; CREDITLIMIT = 0"}
{"sample_id": 1587, "db_id": "car_retails", "final": {"question": "From 2003 to 2004, how many customers have paid more than three times?", "sql": "SELECT COUNT(customernumber) FROM ( SELECT customernumber FROM payments WHERE STRFTIME('%Y', paymentDate) >= '2003' AND STRFTIME('%Y', paymentDate) <= '2004' GROUP BY customernumber HAVING COUNT(customernumber) > 3 ) T", "source_tables": ["payments"]}, "evidence": "paymentdate BETWEEN '2003-01-01' AND '2004-12-31'; customers who have paid more than three times refers to (COUNT(customernumber)>3);"}
{"sample_id": 1588, "db_id": "car_retails", "final": {"question": "What is the average actual profit by 1937 Lincoln Berline?", "sql": "SELECT SUM(T1.priceEach - T2.buyPrice) / COUNT(*) FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode WHERE T2.productName = '1937 Lincoln Berline'", "source_tables": ["orderdetails", "products"]}, "evidence": "average actual profit = AVG(SUBTRACT(priceEach, buyPrice)); 1937 Lincoln Berline is a product name;"}
{"sample_id": 1589, "db_id": "car_retails", "final": {"question": "Among the motorcycles with product scale of 1:10, which of them is the most ordered by American customers?", "sql": "SELECT T1.productName FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber INNER JOIN customers AS T4 ON T3.customerNumber = T4.customerNumber WHERE T1.productLine = 'Motorcycles' AND T1.productScale = '1:10' AND T4.country = 'USA' GROUP BY T1.productName ORDER BY SUM(T2.quantityOrdered) DESC LIMIT 1", "source_tables": ["orderdetails", "orders", "products", "customers"]}, "evidence": "motorcycle is a product line; American is a nationality of country = 'USA';"}
{"sample_id": 1590, "db_id": "car_retails", "final": {"question": "Between 8/1/2003 and 8/30/2004, how many checks were issued by Mini Gifts Distributors Ltd.? Please list their check numbers.", "sql": "SELECT T1.checkNumber FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.paymentDate >= '2003-08-01' AND T1.paymentDate <= '2004-08-30' AND T2.customerName = 'Mini Gifts Distributors Ltd.'", "source_tables": ["payments", "customers"]}, "evidence": "paymentDate BETWEEN '2003-08-01' AND '2004-08-30'; Mini Gifts Distributors Ltd. Is a customer name;"}
{"sample_id": 1591, "db_id": "car_retails", "final": {"question": "For the planes which has the hightest total price, how much it exceeds the average?", "sql": "SELECT MAX(quantityOrdered * priceEach) - AVG(priceEach) FROM orderdetails WHERE productCode IN ( SELECT productCode FROM products WHERE productLine = 'Planes' )", "source_tables": ["orderdetails", "products"]}, "evidence": "plane is a product line; total price = MULTIPLY(quantityOrdered, priceEach); how much the total price exceeds the average = SUBTRACT(MAX(MULTIPLY(quantityOrdered, priceEach))), AVG(priceEach));"}
{"sample_id": 1592, "db_id": "car_retails", "final": {"question": "What is the total value of shipped vintage car orders from 2003-2004?", "sql": "SELECT SUM(T2.priceEach * T2.quantityOrdered) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber WHERE T3.status = 'Shipped' AND T3.orderDate BETWEEN '2003-01-01' AND '2004-12-31'", "source_tables": ["orderdetails", "orders", "products"]}, "evidence": "total value = SUM(MULTIPLY(quantityOrdered, priceEach)); shipped orders refers to status = 'Shipped'; vintage car is a product line; year(orderDate) between 2003 and 2004;"}
{"sample_id": 1593, "db_id": "car_retails", "final": {"question": "Who is the sales agent of the customer who has made the highest payment? Include the full names of employee and his/her supervisor.", "sql": "SELECT T1.firstName, T1.lastName, T1.reportsTo FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber INNER JOIN payments AS T3 ON T2.customerNumber = T3.customerNumber ORDER BY T3.amount DESC LIMIT 1", "source_tables": ["employees", "payments", "customers"]}, "evidence": "payment refers to amount; full name = firstName+lastName; supervisor refers to reportsTO; 'reportsTO' is the leader of the 'employeeNumber';"}
{"sample_id": 1594, "db_id": "car_retails", "final": {"question": "What is the highest amount of order made by the sales representative in Boston? Please give the name of the product and amount.", "sql": "SELECT T2.productName, T1.quantityOrdered * T1.priceEach FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T1.orderNumber = T3.orderNumber INNER JOIN customers AS T4 ON T3.customerNumber = T4.customerNumber WHERE T4.city = 'Boston' AND T4.salesRepEmployeeNumber IN ( SELECT employeeNumber FROM employees WHERE jobTitle = 'Sales Rep' ) ORDER BY T1.quantityOrdered DESC LIMIT 1", "source_tables": ["employees", "orders", "products", "orderdetails", "customers"]}, "evidence": "Boston is a city; amount of order = MULTIPLY(quantityOrdered, priceEach);"}
{"sample_id": 1595, "db_id": "car_retails", "final": {"question": "What is the total actual profit gained from orders made by American customers from 2003-01-06 to 2005-05-09?", "sql": "SELECT SUM(T2.priceEach - T1.buyPrice) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber INNER JOIN customers AS T4 ON T3.customerNumber = T4.customerNumber WHERE T3.orderDate > '2003-01-05' AND T3.orderDate < '2005-05-10'", "source_tables": ["orderdetails", "orders", "products", "customers"]}, "evidence": "total actual profit = SUM(SUBTRACT(priceEach, buyPrice)); American is a nationality of country = 'USA'; orderDate BETWEEN '2003-01-06' AND '2005-05-09';"}
{"sample_id": 1596, "db_id": "car_retails", "final": {"question": "From which branch does the sales representative employee who made the most sales in 2005? Please indicates its full address and phone number.", "sql": "SELECT T3.addressLine1, T3.addressLine2, T3.phone FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber INNER JOIN customers AS T3 ON T2.customerNumber = T3.customerNumber INNER JOIN employees AS T4 ON T3.salesRepEmployeeNumber = T4.employeeNumber INNER JOIN offices AS T5 ON T4.officeCode = T5.officeCode WHERE STRFTIME('%Y', T2.orderDate) = '2005' AND T4.jobTitle = 'Sales Rep' ORDER BY T1.quantityOrdered DESC LIMIT 1", "source_tables": ["employees", "orders", "customers", "orderdetails", "offices"]}, "evidence": "orderDate between '2005-01-01' and '2005-12-31'; full address = addressLine1+addressLine2;"}
{"sample_id": 1597, "db_id": "car_retails", "final": {"question": "What is the phone number of all companies where the last name of the contact person starts with the letter M and are not from Germany?", "sql": "SELECT phone FROM customers WHERE contactLastName LIKE 'M%' AND country != 'Germany'", "source_tables": ["customers"]}, "evidence": "last name of contact person starts with M refers to lastName LIKE 'M%'; Germany is a country; not from Germany refers to country<>'Germany';"}
{"sample_id": 1598, "db_id": "car_retails", "final": {"question": "Calculate the average amount of payments made by customers during the first half of 2004.", "sql": "SELECT AVG(amount) FROM payments WHERE paymentDate BETWEEN '2004-01-01' AND '2004-06-30'", "source_tables": ["payments"]}, "evidence": "average amount of payments = DIVIDE(SUM(amount), COUNT(customerNumber); first half of 2014 refers to paymentDate > = '2004-01-01' AND paymentDate < '2004-07-01;"}
{"sample_id": 1599, "db_id": "car_retails", "final": {"question": "Of all the orders placed and shipped throughout the year 2005, what percentage of those orders corresponds to customer number 186?", "sql": "SELECT CAST(SUM(CASE WHEN customerNumber = 186 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(orderNumber) FROM orders WHERE status = 'Shipped' AND shippedDate BETWEEN '2005-01-01' AND '2005-12-31'", "source_tables": ["orders"]}, "evidence": "shipped orders refers to status = 'shipped'; year(shippedDate) = 2005; percentage = DIVIDE(SUM(customerNumber = 186)), COUNT(orderNumber)) as percentage;"}
{"sample_id": 1600, "db_id": "car_retails", "final": {"question": "How many customers with a canceled shipment have a credit limit greater than 115,000?", "sql": "SELECT COUNT(T1.customerNumber) FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber WHERE T2.status = 'Cancelled' AND T1.creditLimit > 115000", "source_tables": ["orders", "customers"]}, "evidence": "cancelled shipment refers to status = 'cancelled'; creditLimit > 115000;"}
{"sample_id": 1601, "db_id": "car_retails", "final": {"question": "On what date did the customer with the lowest credit limit serviced by sales representative Barry Jones make payments for his/her orders?", "sql": "SELECT T3.paymentDate FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber INNER JOIN payments AS T3 ON T2.customerNumber = T3.customerNumber WHERE T1.firstName = 'Barry' AND T1.lastName = 'Jones' AND T1.jobTitle = 'Sales Rep' ORDER BY T2.creditLimit ASC LIMIT 1", "source_tables": ["employees", "payments", "customers"]}, "evidence": ""}
{"sample_id": 1602, "db_id": "car_retails", "final": {"question": "To whom does the employee have to inform that is the sales representative of the French customer?", "sql": "SELECT T1.reportsTo FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber WHERE T2.country = 'France'", "source_tables": ["employees", "customers"]}, "evidence": "inform refers to reportsTo; 'reportsTO' is the leader of the 'employeeNumber'; France is a country; country = 'France';"}
{"sample_id": 1603, "db_id": "car_retails", "final": {"question": "What is the full address of the customer who commented that DHL be used for the order that was shipped on April 4, 2005?", "sql": "SELECT T1.addressLine1, T1.addressLine2 FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber WHERE T2.shippedDate = '2005-04-04' AND T2.status = 'Shipped'", "source_tables": ["orders", "customers"]}, "evidence": "full address = addressLine1+addressLine2; shippedDate = '2005-04-04';"}
{"sample_id": 1604, "db_id": "car_retails", "final": {"question": "What is the full address of the office where the employee who is a sales representative for the customer whose business is located in the city of New York works?", "sql": "SELECT T2.addressLine1, T2.addressLine2 FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber INNER JOIN offices AS T3 ON T1.officeCode = T3.officeCode WHERE T2.city = 'NYC' AND T1.jobTitle = 'Sales Rep'", "source_tables": ["offices", "employees", "customers"]}, "evidence": "full address = addressLine1 + addressLine2; NYC is a shortname of New York City."}
{"sample_id": 1605, "db_id": "car_retails", "final": {"question": "What is the full address of the office where 4 people work and one of them is Sales Representation?", "sql": "SELECT T1.addressLine1, T1.addressLine2 FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber WHERE T2.jobTitle = 'Sales Rep'", "source_tables": ["employees", "customers"]}, "evidence": "full address = addressLine1+addressLine2; Sales Manager is a job title;"}
{"sample_id": 1606, "db_id": "car_retails", "final": {"question": "What profit can the seller Carousel DieCast Legends make from the sale of the product described as \"The perfect holiday or anniversary gift for executives\"?", "sql": "SELECT SUM(T2.MSRP - T2.buyPrice) FROM productlines AS T1 INNER JOIN products AS T2 ON T1.productLine = T2.productLine WHERE T2.productVendor = 'Carousel DieCast Legends' AND T1.textDescription LIKE '%perfect holiday or anniversary gift for executives%'", "source_tables": ["productlines", "products"]}, "evidence": "seller and product vendor are synonyms; Carousel DieCast Legends is a product vendor; profit = SUM(SUBTRACT(msrp, buyPrice));"}
{"sample_id": 1607, "db_id": "car_retails", "final": {"question": "Of the clients whose businesses are located in the city of Boston, calculate which of them has a higher average amount of payment.", "sql": "SELECT T1.customerNumber FROM customers AS T1 INNER JOIN payments AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.city = 'Boston' GROUP BY T1.customerNumber ORDER BY SUM(T2.amount) / COUNT(T2.paymentDate) DESC LIMIT 1", "source_tables": ["payments", "customers"]}, "evidence": "average amount payment = AVG(amount);"}
{"sample_id": 1608, "db_id": "car_retails", "final": {"question": "Calculate the total quantity ordered for 18th Century Vintage Horse Carriage and the average price.", "sql": "SELECT SUM(T2.quantityOrdered) , SUM(T2.quantityOrdered * T2.priceEach) / SUM(T2.quantityOrdered) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode WHERE T1.productName = '18th Century Vintage Horse Carriage'", "source_tables": ["orderdetails", "products"]}, "evidence": "18th Century Vintage Horse Carriage is a product name; average price = AVG(priceEach);"}
{"sample_id": 1609, "db_id": "car_retails", "final": {"question": "How many kinds of products did order No. 10252 contain?", "sql": "SELECT COUNT(t.productCode) FROM orderdetails t WHERE t.orderNumber = '10252'", "source_tables": ["orderdetails"]}, "evidence": "Products refer to productCode;"}
{"sample_id": 1610, "db_id": "car_retails", "final": {"question": "Who is the sales representative that made the order which was sent to 25 Maiden Lane, Floor No. 4?", "sql": "SELECT T2.firstName, T2.lastName FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber WHERE T1.addressLine1 = '25 Maiden Lane' AND T1.addressLine2 = 'Floor No. 4'", "source_tables": ["employees", "customers"]}, "evidence": "Sales representative is an employee;"}
{"sample_id": 1611, "db_id": "car_retails", "final": {"question": "Where's Foon Yue Tseng's office located at? Give the detailed address.", "sql": "SELECT T1.addressLine1, T1.addressLine2 FROM offices AS T1 INNER JOIN employees AS T2 ON T1.officeCode = T2.officeCode WHERE T2.firstName = 'Foon Yue' AND T2.lastName = 'Tseng'", "source_tables": ["employees", "offices"]}, "evidence": "Detailed address comprises addressLine1 and addressLine2;"}
{"sample_id": 1612, "db_id": "car_retails", "final": {"question": "Compared with the orders happened on 2005-04-08 and two days later, which day's order had a higher value?", "sql": "SELECT T2.orderDate FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE STRFTIME('%Y-%m-%d', T2.orderDate) = '2005-04-08' OR STRFTIME('%Y-%m-%d', T2.orderDate) = '2005-04-10' ORDER BY T1.quantityOrdered * T1.priceEach DESC LIMIT 1", "source_tables": ["orderdetails", "orders"]}, "evidence": "2005-04-08 and two days later refer to orderDate = '2005-04-08' and orderDate = '2005-04-10'; order with a higher value refers to MAX(Total price) = MULTIPLY(quantityOrdered, priceEach); "}
{"sample_id": 1613, "db_id": "car_retails", "final": {"question": "How many products with the highest expected profits were sold in total?", "sql": "SELECT SUM(t2.quantityOrdered) FROM orderdetails AS t2 INNER JOIN ( SELECT t1.productCode FROM products AS t1 ORDER BY t1.MSRP - t1.buyPrice DESC LIMIT 1 ) AS t3 ON t2.productCode = t3.productCode", "source_tables": ["orderdetails", "products"]}, "evidence": "Products refer to productCode; Expected profits = SUBTRACT(MSRP, buyPrice);"}
{"sample_id": 1614, "db_id": "car_retails", "final": {"question": "How much did Petit Auto pay on 2004-08-09?", "sql": "SELECT t1.amount FROM payments AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.customerName = 'Petit Auto' AND t1.paymentDate = '2004-08-09'", "source_tables": ["payments", "customers"]}, "evidence": "Petit Auto is name of customer; paymentDate = '2004-08-09';"}
{"sample_id": 1615, "db_id": "car_retails", "final": {"question": "What was the contact name for the check \"NR157385\"?", "sql": "SELECT t2.contactFirstName, t2.contactLastName FROM payments AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.checkNumber = 'NR157385'", "source_tables": ["payments", "customers"]}, "evidence": "Contact name refers to customerName;"}
{"sample_id": 1616, "db_id": "car_retails", "final": {"question": "Which customer made the order No. 10160? Give the contact name.", "sql": "SELECT t2.contactFirstName, t2.contactLastName FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.orderNumber = '10160'", "source_tables": ["orders", "customers"]}, "evidence": ""}
{"sample_id": 1617, "db_id": "car_retails", "final": {"question": "Where was the order No. 10383 shipped to? Show me the address.", "sql": "SELECT t2.addressLine1, t2.addressLine2 FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.orderNumber = '10383'", "source_tables": ["orders", "customers"]}, "evidence": "Address comprises addressLine1 and addressLine2;"}
{"sample_id": 1618, "db_id": "car_retails", "final": {"question": "For the productline where the product No.S18_2949 was produced, what's the text description for that product line?", "sql": "SELECT t1.textDescription FROM productlines AS t1 INNER JOIN products AS t2 ON t1.productLine = t2.productLine WHERE t2.productCode = 'S18_2949'", "source_tables": ["productlines", "products"]}, "evidence": ""}
{"sample_id": 1670, "db_id": "restaurant", "final": {"question": "How many restaurants have not obtained a minimum of 3 in their reviews?", "sql": "SELECT COUNT(id_restaurant) FROM generalinfo WHERE review < 3", "source_tables": ["generalinfo"]}, "evidence": "have not obtained a minimum of 3 in review refers to review < 3"}
{"sample_id": 1671, "db_id": "restaurant", "final": {"question": "What types of food are served at the 4 top-reviewed restaurants?", "sql": "SELECT food_type FROM generalinfo WHERE review = ( SELECT MAX(review) FROM generalinfo ) LIMIT 4", "source_tables": ["generalinfo"]}, "evidence": "top-reviewed refers to review = 4; type of food refers to food_type\n\n"}
{"sample_id": 1672, "db_id": "restaurant", "final": {"question": "How many restaurants in the city of Richmond serve Mediterranean food?", "sql": "SELECT COUNT(id_restaurant) FROM generalinfo WHERE food_type = 'mediterranean' AND city = 'richmond'", "source_tables": ["generalinfo"]}, "evidence": "Mediterranean food refers to food_type = \u00a0 'mediterranean'"}
{"sample_id": 1673, "db_id": "restaurant", "final": {"question": "List all the cities in Sonoma County.", "sql": "SELECT city FROM geographic WHERE county = 'sonoma county'", "source_tables": ["geographic"]}, "evidence": ""}
{"sample_id": 1674, "db_id": "restaurant", "final": {"question": "What counties are not in the Bay Area Region?", "sql": "SELECT DISTINCT county FROM geographic WHERE region != 'bay area'", "source_tables": ["geographic"]}, "evidence": "not in the Bay Area region refers to region ! = 'bay area'"}
{"sample_id": 1675, "db_id": "restaurant", "final": {"question": "List all cities in the Northern California Region.", "sql": "SELECT city FROM geographic WHERE region = 'northern california'", "source_tables": ["geographic"]}, "evidence": ""}
{"sample_id": 1676, "db_id": "restaurant", "final": {"question": "List by its ID number all restaurants on 11th Street in Oakland.", "sql": "SELECT id_restaurant FROM location WHERE city = 'oakland' AND street_name = '11th street'", "source_tables": ["location"]}, "evidence": "11th Street refers to street_name = '11th street'; Oakland refers to city = 'oakland'; ID number of restaurant refers to id_restaurant\n\n"}
{"sample_id": 1677, "db_id": "restaurant", "final": {"question": "How many restaurants can we find at number 871 on its street?", "sql": "SELECT COUNT(id_restaurant) FROM location WHERE street_num = 871", "source_tables": ["location"]}, "evidence": "number 871 on its street refers to street_num = 871"}
{"sample_id": 1678, "db_id": "restaurant", "final": {"question": "At what numbers on 9th Avenue of San Francisco there are restaurants?", "sql": "SELECT id_restaurant FROM location WHERE City = 'san francisco' AND street_name = '9th avenue'", "source_tables": ["location"]}, "evidence": "9th Avenue refers to street_name = '9th avenue'; San Francisco refers to City = 'san francisco'"}
{"sample_id": 1679, "db_id": "restaurant", "final": {"question": "What type of food is there in the restaurants on Adeline Street in Berkeley city?", "sql": "SELECT T1.food_type FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_name = 'adeline st' AND T2.city = 'berkeley'", "source_tables": ["generalinfo", "location"]}, "evidence": "Adeline Street refers to street_name = 'adeline st'; type of food refers to food_type\n\n"}
{"sample_id": 1680, "db_id": "restaurant", "final": {"question": "In which regions are there no African food restaurants?", "sql": "SELECT DISTINCT T2.region FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.food_type != 'african'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "no African food restaurants refers to food_type <> 'african'"}
{"sample_id": 1681, "db_id": "restaurant", "final": {"question": "In which counties are there A&W Root Beer Restaurants?", "sql": "SELECT DISTINCT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label = 'a & w root beer'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "A&W Root Beer Restaurant refers to label = 'a & w root beer'"}
{"sample_id": 1682, "db_id": "restaurant", "final": {"question": "Indicate street and number of the Adelitas Taqueria Restaurants.", "sql": "SELECT T1.street_name, T1.street_num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'adelitas taqueria'", "source_tables": ["generalinfo", "location"]}, "evidence": "street refers to street_name; number refers to street_num; Adelitas Taqueria Restaurant refers to label = 'adelitas taqueria'"}
{"sample_id": 1683, "db_id": "restaurant", "final": {"question": "What type of food is served at the restaurant located at 3140, Alpine Road at San Mateo County?", "sql": "SELECT T2.food_type FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant INNER JOIN geographic AS T3 ON T2.city = T3.city WHERE T3.County = 'san mateo county' AND T1.street_name = 'alpine rd' AND T1.street_num = 3140", "source_tables": ["geographic", "generalinfo", "location"]}, "evidence": "3140 Alpine Road at San Mateo County refers to street_num = 3140 AND street_name = 'alpine rd' AND County = 'san mateo county'; type of food refers to food_type"}
{"sample_id": 1684, "db_id": "restaurant", "final": {"question": "In which streets of the city of San Francisco are there restaurants that serve seafood?", "sql": "SELECT T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T2.food_type = 'seafood' AND street_name IS NOT NULL", "source_tables": ["generalinfo", "location"]}, "evidence": "street refers to street_name; seafood refers to food_type = 'seafood'"}
{"sample_id": 1685, "db_id": "restaurant", "final": {"question": "List all counties where there is no Bakers Square Restaurant & Pie Shop.", "sql": "SELECT DISTINCT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label != 'bakers square restaurant & pie shop'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "no Bakers Square Restaurant & Pie Shop refers to label <> 'bakers square restaurant & pie shop'"}
{"sample_id": 1686, "db_id": "restaurant", "final": {"question": "In how many counties is there a street called Appian Way?", "sql": "SELECT COUNT(DISTINCT T2.county) FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.street_name = 'appian way'", "source_tables": ["geographic", "location"]}, "evidence": "a street called Appian Way refers to street_name = 'appian way'"}
{"sample_id": 1687, "db_id": "restaurant", "final": {"question": "What is the rating of each restaurant reviews on Atlantic Ave?", "sql": "SELECT T1.review FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_name = 'atlantic ave'", "source_tables": ["generalinfo", "location"]}, "evidence": "Atlantic Ave refers to street_name = 'atlantic ave'; rating refers to review"}
{"sample_id": 1688, "db_id": "restaurant", "final": {"question": "Identify all restaurants in Contra Costa County by id.", "sql": "SELECT T1.id_restaurant FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'contra costa county'", "source_tables": ["geographic", "location"]}, "evidence": ""}
{"sample_id": 1689, "db_id": "restaurant", "final": {"question": "Identify all the restaurants in Yolo County by their label.", "sql": "SELECT T1.id_restaurant, T1.label FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'yolo county'", "source_tables": ["geographic", "generalinfo"]}, "evidence": ""}
{"sample_id": 1690, "db_id": "restaurant", "final": {"question": "What restaurant on Drive Street in San Rafael doesn't serve American food?", "sql": "SELECT T1.label FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_name = 'drive' AND T1.food_type != 'american' AND T2.city = 'san rafael'", "source_tables": ["generalinfo", "location"]}, "evidence": "Drive Street refers to street_name = 'drive'; San Rafael refers to city = 'san rafael'; American food refers to food_type\u00a0<> 'american'"}
{"sample_id": 1691, "db_id": "restaurant", "final": {"question": "On which streets in the city of San Francisco are there restaurants with a review of 1.7?", "sql": "SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.review = 1.7", "source_tables": ["generalinfo", "location"]}, "evidence": "street refers to street_name; review of 1.7 refers to review = 1.7"}
{"sample_id": 1692, "db_id": "restaurant", "final": {"question": "Which restaurant on the street Alameda de las Pulgas in the city of Menlo Park is the worst rated?", "sql": "SELECT T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'avenida de las pulgas' AND T2.city = 'menlo park' ORDER BY review LIMIT 1", "source_tables": ["generalinfo", "location"]}, "evidence": "restaurant refers to label; street Alameda de las Pulgas refers to street_name = 'avenida de las pulgas'; the worst rated refers to min(review)"}
{"sample_id": 1693, "db_id": "restaurant", "final": {"question": "On what street in Tuolumne County is Good Heavens restaurant located?", "sql": "SELECT T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant INNER JOIN geographic AS T3 ON T2.city = T3.city WHERE T2.label = 'good heavens' AND T3.county = 'tuolumne county'", "source_tables": ["geographic", "generalinfo", "location"]}, "evidence": "street refers to street_name; Good Heavens restaurant refers to label = 'good heavens'"}
{"sample_id": 1694, "db_id": "restaurant", "final": {"question": "Indicate the street numbers where Aux Delices Vietnamese Restaurant are located.", "sql": "SELECT DISTINCT T1.street_num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'aux delices vietnamese restaurant'", "source_tables": ["generalinfo", "location"]}, "evidence": "street numbers refers to street_num; Aux Delices Vietnamese Restaurant refers to label = 'aux delices vietnamese restaurant'"}
{"sample_id": 1695, "db_id": "restaurant", "final": {"question": "Identify all the restaurants in Marin County by their id.", "sql": "SELECT T1.id_restaurant FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'marin county'", "source_tables": ["geographic", "generalinfo"]}, "evidence": ""}
{"sample_id": 1696, "db_id": "restaurant", "final": {"question": "In which regions are there no pizza restaurants?", "sql": "SELECT DISTINCT T2.region FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.food_type = 'pizza' AND T2.region != 'unknown'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "no pizza restaurants refers to food_type = 'pizza'"}
{"sample_id": 1697, "db_id": "restaurant", "final": {"question": "Calculate the average rating of reviews for restaurants in Santa Cruz County.", "sql": "SELECT AVG(T2.review) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.county = 'santa cruz county'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "average rating = divide(sum(review where county = 'santa cruz county'), count(id_restaurant where county = 'santa cruz county'))"}
{"sample_id": 1698, "db_id": "restaurant", "final": {"question": "What percentage of restaurants in Monterey County have Mexican food?", "sql": "SELECT CAST(SUM(IIF(T2.food_type = 'mexican', 1, 0)) AS REAL) * 100 / COUNT(T2.id_restaurant) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.county = 'monterey county'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "Mexican food refers to food_type = 'mexican'; percentage = divide(count(id_restaurant where food_type = 'mexican'), count(id_restaurant)) where county = 'monterey county' * 100%"}
{"sample_id": 1699, "db_id": "restaurant", "final": {"question": "What percentage of streets named 11th Street are in Alameda County?", "sql": "SELECT CAST(SUM(IIF(T1.street_name = '11th st', 1, 0)) AS REAL) * 100 / COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.County = 'alameda county'", "source_tables": ["geographic", "location"]}, "evidence": "street named 11th Street refers to street_name = '11th st'; percentage = divide(count(street_name = '11th st' and County = 'alameda county'), count(street_name where County = 'alameda county')) * 100%"}
{"sample_id": 1700, "db_id": "restaurant", "final": {"question": "Please list all of the restaurants that serve European food.", "sql": "SELECT label FROM generalinfo WHERE food_type = 'european'", "source_tables": ["generalinfo"]}, "evidence": "restaurant refers to label; European food refers to food_type = 'european'"}
{"sample_id": 1701, "db_id": "restaurant", "final": {"question": "What cities are located in Northern California?", "sql": "SELECT city FROM geographic WHERE region = 'northern california'", "source_tables": ["geographic"]}, "evidence": "Northern California refers to region = 'northern california'"}
{"sample_id": 1702, "db_id": "restaurant", "final": {"question": "What does the one and only 24-hour diner's name?", "sql": "SELECT label FROM generalinfo WHERE food_type = '24 hour diner'", "source_tables": ["generalinfo"]}, "evidence": "24-hour diner refers to food_type = '24 hour diner'; diner name refers to label"}
{"sample_id": 1703, "db_id": "restaurant", "final": {"question": "Please list any five cities that have an unidentified county and region.", "sql": "SELECT city FROM geographic WHERE county = 'unknown' AND region = 'unknown' LIMIT 5", "source_tables": ["geographic"]}, "evidence": "unidentified county and region refers to county = 'unknown' AND region = 'unknown'"}
{"sample_id": 1704, "db_id": "restaurant", "final": {"question": "What is the county and region of Davis City?", "sql": "SELECT county, region FROM geographic WHERE city = 'Davis'", "source_tables": ["geographic"]}, "evidence": ""}
{"sample_id": 1705, "db_id": "restaurant", "final": {"question": "Please list all of the street names in Clayton City.", "sql": "SELECT street_name FROM location WHERE city = 'Clayton'", "source_tables": ["location"]}, "evidence": ""}
{"sample_id": 1706, "db_id": "restaurant", "final": {"question": "What are the most popular restaurants in San Francisco among diners?", "sql": "SELECT id_restaurant, label FROM generalinfo WHERE city = 'San Francisco' AND review = ( SELECT MAX(review) FROM generalinfo WHERE city = 'San Francisco' )", "source_tables": ["generalinfo"]}, "evidence": "the most popular refers to max(review); restaurant refers to label; San Francisco refers to city = 'San Francisco'"}
{"sample_id": 1707, "db_id": "restaurant", "final": {"question": "How many American food restaurants are unpopular in Carmel?", "sql": "SELECT COUNT(id_restaurant) FROM generalinfo WHERE food_type = 'american' AND city = 'carmel' AND review = ( SELECT MIN(review) FROM generalinfo WHERE food_type = 'american' AND city = 'carmel' )", "source_tables": ["generalinfo"]}, "evidence": "American Food Restaurant refers to food_type = 'ameraican'; unpopular refers to min(review); Carmel refers to city = 'Carmel'"}
{"sample_id": 1708, "db_id": "restaurant", "final": {"question": "What is the percentage of restaurants that serve American food in Dublin city?", "sql": "SELECT CAST(SUM(IIF(food_type = 'american food', 1, 0)) AS REAL) * 100 / COUNT(id_restaurant) FROM generalinfo WHERE city = 'dublin'", "source_tables": ["generalinfo"]}, "evidence": "American food refers to food_type = 'american food'; percentage = divide(count(id_restaurant), count(id_restaurant where food_type = 'american food')) where city = 'dublin' * 100%"}
{"sample_id": 1709, "db_id": "restaurant", "final": {"question": "What is the full address of Albert's Caf\u00e9?", "sql": "SELECT T2.street_num, T2.street_name, T1.city FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.label = 'Albert''s Caf\u00e9'", "source_tables": ["generalinfo", "location"]}, "evidence": "full address = street_num, street_name, city; Albert's Caf\u00e9 refers to label = 'Albert's Caf\u00e9'"}
{"sample_id": 1710, "db_id": "restaurant", "final": {"question": "What are the restaurants that are located at \"19th St. Oakland\"?", "sql": "SELECT T1.id_restaurant FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'Oakland' AND T2.street_name = '19th St'", "source_tables": ["generalinfo", "location"]}, "evidence": "restaurant refers to label; \"19th St. Oakland\" refers to street_name = '19th St' AND city = 'Oakland'"}
{"sample_id": 1711, "db_id": "restaurant", "final": {"question": "What kind of restaurants can be found at \"106 E 25th Ave\"?", "sql": "SELECT T1.food_type FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_num = 106 AND T2.street_name = 'e 25th ave'", "source_tables": ["generalinfo", "location"]}, "evidence": "kind of restaurant refers to food_type; \"106 E 25th Ave\" refers to street_name = 'e 25th ave'"}
{"sample_id": 1712, "db_id": "restaurant", "final": {"question": "Please name any three restaurants that have an unidentified region.", "sql": "SELECT T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant INNER JOIN geographic AS T3 ON T2.city = T3.city WHERE T3.region = 'unknown' LIMIT 3", "source_tables": ["geographic", "generalinfo", "location"]}, "evidence": "restaurant name refers to label; unidentified region refers to region = 'unknown'"}
{"sample_id": 1713, "db_id": "restaurant", "final": {"question": "What is the name of the Chinese restaurant that can be found at 104 San Tomas Aquino Road, Campbell?", "sql": "SELECT T1.label FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_num = 104 AND T1.city = 'campbell' AND T2.street_name = 'san tomas aquino road'", "source_tables": ["generalinfo", "location"]}, "evidence": "restaurant name refers to label; Chinese restaurant refers to food_type = 'chinese'; 104 San Tomas Aquino Road Campbell refers to street_num = 104 AND street_name = 'san tomas aquino road' AND city = 'campbell'"}
{"sample_id": 1714, "db_id": "restaurant", "final": {"question": "How many Thai restaurants can be found in San Pablo Ave, Albany?", "sql": "SELECT COUNT(T1.id_restaurant) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.food_type = 'thai' AND T1.city = 'albany' AND T2.street_name = 'san pablo ave'", "source_tables": ["generalinfo", "location"]}, "evidence": "Thai restaurant refers to food_type = 'thai'; San Pablo Ave Albany refers to street_name = 'san pablo ave' AND T1.city = 'albany'"}
{"sample_id": 1715, "db_id": "restaurant", "final": {"question": "What is the county and region of Plearn-Thai Cuisine restaurant?", "sql": "SELECT T1.county, T1.region, T2.label FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.label = 'plearn-thai cuisine'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "Plearn-Thai Cuisine restaurant refers to label = 'plearn-thai cuisine'"}
{"sample_id": 1716, "db_id": "restaurant", "final": {"question": "What is the name of the restaurant that is located in El Dorado County, Lake Tahoe region?", "sql": "SELECT T2.label FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'lake tahoe' AND T1.county = 'el dorado county'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "restaurant name refers to label"}
{"sample_id": 1717, "db_id": "restaurant", "final": {"question": "Which county and region does the street E. El Camino Real belong to?", "sql": "SELECT DISTINCT T2.county, T2.region FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.street_name = 'E. El Camino Real'", "source_tables": ["geographic", "location"]}, "evidence": "street E. El Camino Real refers to street_name = 'E. El Camino Real'"}
{"sample_id": 1718, "db_id": "restaurant", "final": {"question": "What is the name of the least popular Indian restaurant on Shattuck Avenue in Berkeley?", "sql": "SELECT T1.id_restaurant FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'berkeley' AND T2.street_name = 'shattuck ave' AND T1.food_type = 'Indian restaurant' ORDER BY T1.review LIMIT 1", "source_tables": ["generalinfo", "location"]}, "evidence": "restaurant name refers to label; the least popular refers to min(review); Indian restaurant refers to food_type = 'Indian restaurant'; Shattuck Avenue in Berkeley refers to street_name = 'shattuck ave' and city = 'berkeley'"}
{"sample_id": 1719, "db_id": "restaurant", "final": {"question": "What is the percentage of restaurants in the Bay Area region that scored over 4 for the review rating?", "sql": "SELECT CAST(SUM(IIF(T2.review > 4, 1, 0)) AS REAL) * 100 / COUNT(T2.id_restaurant) FROM geographic AS T1 RIGHT JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'bay area'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "scored over 4 refers to review > 4; percentage = divide(count(id_restaurant where region = 'bay area' and review > 4), count(id_restaurant where region = 'Bay Area')) * 100%"}
{"sample_id": 1720, "db_id": "restaurant", "final": {"question": "List every city in San Mateo County.", "sql": "SELECT city FROM geographic WHERE county = 'san mateo county'", "source_tables": ["geographic"]}, "evidence": ""}
{"sample_id": 1721, "db_id": "restaurant", "final": {"question": "How many restaurants have more than 4 star reviews?", "sql": "SELECT COUNT(id_restaurant) AS cnt FROM generalinfo WHERE review > 4", "source_tables": ["generalinfo"]}, "evidence": "more than 4 star review refers to review > 4"}
{"sample_id": 1722, "db_id": "restaurant", "final": {"question": "Which street has the most restaurants?", "sql": "SELECT street_name FROM location GROUP BY street_name ORDER BY COUNT(street_name) DESC LIMIT 1", "source_tables": ["location"]}, "evidence": "street refers to street_name; the most restaurants refers to max(count(street_name))"}
{"sample_id": 1723, "db_id": "restaurant", "final": {"question": "Which chicken restaurant has the highest review?", "sql": "SELECT label FROM generalinfo WHERE food_type = 'chicken' ORDER BY review DESC LIMIT 1", "source_tables": ["generalinfo"]}, "evidence": "chicken restaurant refers to food_type = 'chicken'; the highest review refers to max(review)"}
{"sample_id": 1724, "db_id": "restaurant", "final": {"question": "Which county is El Cerrito from?", "sql": "SELECT county FROM geographic WHERE city = 'el cerrito'", "source_tables": ["geographic"]}, "evidence": "El Cerrito refers to city = 'el cerrito'"}
{"sample_id": 1725, "db_id": "restaurant", "final": {"question": "How many restaurants are on Irving Street?", "sql": "SELECT COUNT(id_restaurant) FROM location WHERE street_name = 'irving'", "source_tables": ["location"]}, "evidence": "Irving Street refers to street_name = 'irving'"}
{"sample_id": 1726, "db_id": "restaurant", "final": {"question": "Provide a list of restaurants from Marin county.", "sql": "SELECT T1.label FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'marin county'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "restaurant refers to label"}
{"sample_id": 1727, "db_id": "restaurant", "final": {"question": "What is the address of the Peking Duck restaurant?", "sql": "SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.label = 'peking duck restaurant'", "source_tables": ["generalinfo", "location"]}, "evidence": "address refers to street_num, street_name; Peking Duck restaurant refers to label = 'peking duck restaurant'"}
{"sample_id": 1728, "db_id": "restaurant", "final": {"question": "List all the streets with more than 10 restaurants in Alameda county.", "sql": "SELECT T2.street_name FROM geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city WHERE T1.county = 'alameda county' GROUP BY T2.street_name HAVING COUNT(T2.id_restaurant) > 10", "source_tables": ["geographic", "location"]}, "evidence": "street refers to street_name; more than 10 restaurants refers to count(id_restaurant) > 10"}
{"sample_id": 1729, "db_id": "restaurant", "final": {"question": "What are the regions with Greek restaurants?", "sql": "SELECT DISTINCT T1.region FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'greek'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "Greek restaurant refers to food_type = 'greek'"}
{"sample_id": 1730, "db_id": "restaurant", "final": {"question": "List all of the restaurant addresses from an unknown region.", "sql": "SELECT T2.street_name FROM geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city WHERE T1.region = 'unknown'", "source_tables": ["geographic", "location"]}, "evidence": "restaurant address refers to street_num, street_name; unknown region refers to region = 'unknown'"}
{"sample_id": 1731, "db_id": "restaurant", "final": {"question": "What is the review of the restaurant at 8440 Murray Ave?", "sql": "SELECT T2.review FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'murray ave' AND T1.street_num = 8440", "source_tables": ["generalinfo", "location"]}, "evidence": "8440 Murray Ave refers to street_num = 8440 and street_name = 'murray ave'"}
{"sample_id": 1732, "db_id": "restaurant", "final": {"question": "What type of restaurant is most common in Monterey county?", "sql": "SELECT T2.food_type FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.county = 'Monterey' GROUP BY T2.food_type ORDER BY COUNT(T2.food_type) DESC LIMIT 1", "source_tables": ["geographic", "generalinfo"]}, "evidence": "type refers to food_type; most common refers to max(count(food_type))"}
{"sample_id": 1733, "db_id": "restaurant", "final": {"question": "Which street in San Francisco has the most burger restaurants?", "sql": "SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.food_type = 'burgers' GROUP BY T2.street_name ORDER BY COUNT(T2.id_restaurant) DESC LIMIT 1", "source_tables": ["generalinfo", "location"]}, "evidence": "street refers to street_name; San Francisco refers to city = 'san francisco'; burger restaurant refers to food_type = 'burgers'; the most burger restaurants refers to max(count(street_name where food_type = 'burgers' and city = 'san francisco'))"}
{"sample_id": 1734, "db_id": "restaurant", "final": {"question": "What is the region of 1149 El Camino Real?", "sql": "SELECT T2.region FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.street_num = 1149 AND T1.street_name = 'el camino real'", "source_tables": ["geographic", "location"]}, "evidence": "1149 El Camino Real refers to street_num = 1149 and street_name = 'el camino real'"}
{"sample_id": 1735, "db_id": "restaurant", "final": {"question": "What is the county of the Sankee restaurant?", "sql": "SELECT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label = 'sankee'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "Sankee restaurant refers to label = 'sankee'"}
{"sample_id": 1736, "db_id": "restaurant", "final": {"question": "How many streets with restaurants are there in the Northern California region?", "sql": "SELECT COUNT(T1.city) FROM geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city WHERE T1.region = 'northern california'", "source_tables": ["geographic", "location"]}, "evidence": ""}
{"sample_id": 1737, "db_id": "restaurant", "final": {"question": "List all of the restaurants on Park St.", "sql": "SELECT T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'park st'", "source_tables": ["generalinfo", "location"]}, "evidence": "restaurant refers to label; Park St refers to street_name = 'park st'"}
{"sample_id": 1738, "db_id": "restaurant", "final": {"question": "What percentage of restaurants are from the Bay Area?", "sql": "SELECT CAST(SUM(IIF(T1.region = 'bay area', 1, 0)) AS REAL) * 100 / COUNT(T2.id_restaurant) FROM geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city", "source_tables": ["geographic", "location"]}, "evidence": "Bay Area refers to region = 'bay area'; percentage = divide(count(id_restaurant where region = 'bay area'), count(id_restaurant)) * 100%"}
{"sample_id": 1739, "db_id": "restaurant", "final": {"question": "List all the average reviews of Chinese restaurants for each county from highest to lowest.", "sql": "SELECT AVG(T1.review) FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.food_type = 'chinese' GROUP BY T1.id_restaurant ORDER BY AVG(T1.review) DESC", "source_tables": ["geographic", "generalinfo"]}, "evidence": "Chinese restaurant refers to food_type = 'chinese'; average review refers to divide(sum(review), count(review))"}
{"sample_id": 1787, "db_id": "soccer_2016", "final": {"question": "How many players were born after the year 1985?", "sql": "SELECT COUNT(Player_Id) FROM Player WHERE SUBSTR(DOB, 1, 4) > 1985", "source_tables": ["player"]}, "evidence": "born after the year 1985 refers to SUBSTR(DOB, 1, 4) > 1985"}
{"sample_id": 1788, "db_id": "soccer_2016", "final": {"question": "How many matches were there in May, 2008?", "sql": "SELECT COUNT(Match_Id) FROM 'Match' WHERE SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 7, 1) = '5'", "source_tables": ["match"]}, "evidence": "in May 2008 refers to SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 7, 1) = '5'"}
{"sample_id": 1789, "db_id": "soccer_2016", "final": {"question": "For how many times has player no.41 won the \"man of the match\" award?", "sql": "SELECT COUNT(Match_Id) FROM 'Match' WHERE Man_of_the_Match = 41", "source_tables": ["match"]}, "evidence": "player no.41 won the \"man of the match\" refers to Man_of_the_Match = 41"}
{"sample_id": 1790, "db_id": "soccer_2016", "final": {"question": "Please list the IDs of all the matches in the year 2008.", "sql": "SELECT Match_Id FROM 'Match' WHERE SUBSTR(Match_Date, 1, 4) = '2008'", "source_tables": ["match"]}, "evidence": "ID of matches refers to Match_Id; in the year 2008 refers to SUBSTR(Match_Date, 1, 4) = '2008'"}
{"sample_id": 1791, "db_id": "soccer_2016", "final": {"question": "How many players are from Australia?", "sql": "SELECT COUNT(CASE WHEN T2.Country_Name = 'Australia' THEN T1.Player_Id ELSE NULL END) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_Id", "source_tables": ["country", "player"]}, "evidence": "Australia refers to Country_Name = 'Australia'"}
{"sample_id": 1792, "db_id": "soccer_2016", "final": {"question": "Which country is the oldest player from?", "sql": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN Player AS T2 ON T2.Country_Name = T1.Country_Id WHERE T2.Country_Name IS NOT NULL ORDER BY T2.DOB LIMIT 1", "source_tables": ["country", "player"]}, "evidence": "country refers to Country_Name; the oldest refers to min(DOB)"}
{"sample_id": 1793, "db_id": "soccer_2016", "final": {"question": "What is the bowling skill of SC Ganguly?", "sql": "SELECT T1.Bowling_Skill FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T2.Bowling_skill = T1.Bowling_Id WHERE T2.Player_Name = 'SC Ganguly'", "source_tables": ["player", "bowling_style"]}, "evidence": "SC Ganguly refers to Player_Name = 'SC Ganguly'"}
{"sample_id": 1794, "db_id": "soccer_2016", "final": {"question": "Among the players who use the right hand as their batting hand, how many of them were born after 1985?", "sql": "SELECT SUM(CASE WHEN SUBSTR(T1.DOB, 1, 4) > 1985 THEN 1 ELSE 0 END) FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id WHERE T2.Batting_Hand = 'Right-hand bat'", "source_tables": ["player", "batting_style"]}, "evidence": "right hand as batting hand refers to Batting_Hand = 'Right-hand bat'; born after 1985 refers to SUBSTR(DOB, 1, 4) > 1985"}
{"sample_id": 1795, "db_id": "soccer_2016", "final": {"question": "Please list the names of the players who use the right hand as their batting hand and are from Australia.", "sql": "SELECT T2.Player_Name FROM Country AS T1 INNER JOIN Player AS T2 ON T2.Country_Name = T1.Country_id INNER JOIN Batting_Style AS T3 ON T2.Batting_hand = T3.Batting_Id WHERE T1.Country_Name = 'Australia' AND T3.Batting_Hand = 'Right-hand bat'", "source_tables": ["country", "player", "batting_style"]}, "evidence": "name of player refers to Player_Name; right hand as batting hand refers to Batting_Hand = 'Right-hand bat'; Australia refers to Country_Name = 'Australia'"}
{"sample_id": 1796, "db_id": "soccer_2016", "final": {"question": "Please list the bowling skills of all the players from Australia.", "sql": "SELECT T2.Bowling_Skill FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id INNER JOIN Country AS T3 ON T1.Country_Name = T3.Country_Id WHERE T3.Country_Name = 'Australia' GROUP BY T2.Bowling_Skill", "source_tables": ["country", "player", "bowling_style"]}, "evidence": "Australia refers to Country_Name = 'Australia'"}
{"sample_id": 1797, "db_id": "soccer_2016", "final": {"question": "Among the players whose bowling skill is \"Legbreak\", when was the oldest one of them born?", "sql": "SELECT MIN(T1.DOB) FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id WHERE T2.Bowling_Skill = 'Legbreak'", "source_tables": ["player", "bowling_style"]}, "evidence": "the oldest refers to min(DOB); date of birth refers to DOB"}
{"sample_id": 1798, "db_id": "soccer_2016", "final": {"question": "What is the bowling skill used by most players?", "sql": "SELECT T1.Bowling_Skill FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T2.Bowling_skill = T1.Bowling_Id GROUP BY T1.Bowling_Skill ORDER BY COUNT(T1.Bowling_Skill) DESC LIMIT 1", "source_tables": ["player", "bowling_style"]}, "evidence": "bowling skill used by most players refers to max(count(Bowling_Skill))"}
{"sample_id": 1799, "db_id": "soccer_2016", "final": {"question": "What is the name of the player who won the \"man of the match\" award in the match on 2008/4/18?", "sql": "SELECT T2.Player_Name FROM Match AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match WHERE T1.Match_Date = '2008-04-18'", "source_tables": ["player", "match"]}, "evidence": "name of player refers to Player_Name; on 2008/4/18 refers to Match_Date = '2008-04-18'"}
{"sample_id": 1800, "db_id": "soccer_2016", "final": {"question": "For how many times has SC Ganguly played as team captain in a match?", "sql": "SELECT SUM(CASE WHEN T3.Role_Desc = 'Captain' THEN 1 ELSE 0 END) FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id WHERE T1.Player_Name = 'SC Ganguly'", "source_tables": ["player", "player_match", "rolee"]}, "evidence": "SC Ganguly refers to Player_Name = 'SC Ganguly'; team captain refers to Role_Desc = 'Captain'"}
{"sample_id": 1801, "db_id": "soccer_2016", "final": {"question": "What is the role of SC Ganguly in the match on 2008/4/18?", "sql": "SELECT T2.Role_Id FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id INNER JOIN Match AS T4 ON T2.Match_Id = T4.Match_Id WHERE T1.Player_Name = 'SC Ganguly' AND T4.Match_Date = '2008-04-18'", "source_tables": ["player", "player_match", "match", "rolee"]}, "evidence": "role refers to of Role_Id; SC Ganguly refers to Player_Name = 'SC Ganguly'; on 2008/4/18 refers to Match_Date = '2008-04-18'"}
{"sample_id": 1802, "db_id": "soccer_2016", "final": {"question": "Among all the matches SC Ganguly has played in, what is the highest winning margin?", "sql": "SELECT MAX(T3.Win_Margin) FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id WHERE T1.Player_Name = 'SC Ganguly'", "source_tables": ["player", "player_match", "match"]}, "evidence": "SC Ganguly refers to Player_Name = 'SC Ganguly'; the highest winning margin refers to max(Win_Margin)"}
{"sample_id": 1803, "db_id": "soccer_2016", "final": {"question": "What is the average winning margin of all the matches SC Ganguly has played in?", "sql": "SELECT CAST(SUM(T3.Win_Margin) AS REAL) / COUNT(*) FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id WHERE T1.Player_Name = 'SC Ganguly'", "source_tables": ["player", "player_match", "match"]}, "evidence": "SC Ganguly refers to Player_Name = 'SC Ganguly'; the average winning margin = divide(sum(Win_Margin), count(Match_Id)) where Player_Name = 'SC Ganguly'"}
{"sample_id": 1804, "db_id": "soccer_2016", "final": {"question": "Among all the players born after the year 1985, what is the percentage of the players who use the right hand as their batting hand?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Batting_Hand = 'Right-hand bat' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id WHERE SUBSTR(T1.DOB, 1, 4) > 1985", "source_tables": ["player", "batting_style"]}, "evidence": "born after the year 1985 refers to SUBSTR(DOB, 1, 4) > 1985; right hand as batting hand refers to Batting_Hand = 'Right-hand bat'; percentage = divide(count(Player_Id where Batting_Hand = 'Right-hand bat'), count(Player_Id)) * 100% where SUBSTR(DOB, 1, 4) > 1985"}
{"sample_id": 1805, "db_id": "soccer_2016", "final": {"question": "Give the name of the youngest player.", "sql": "SELECT Player_Name FROM Player ORDER BY DOB DESC LIMIT 1", "source_tables": ["player"]}, "evidence": "name of player refers to Player_Name; the youngest refers to max(DOB)"}
{"sample_id": 1806, "db_id": "soccer_2016", "final": {"question": "How many times has Sunrisers Hyderabad been the toss winner of a game?", "sql": "SELECT SUM(CASE WHEN Toss_Winner = ( SELECT Team_Id FROM Team WHERE Team_Name = 'Sunrisers Hyderabad' ) THEN 1 ELSE 0 END) FROM 'Match'", "source_tables": ["team", "match"]}, "evidence": "Sunrisers Hyderabad refers to Team_Name = 'Sunrisers Hyderabad'; time of toss winner refers to count(Toss_Winner)"}
{"sample_id": 1807, "db_id": "soccer_2016", "final": {"question": "Give the name of the striker in the match no. 419169, over no.3, ball no.2, inning no.2.", "sql": "SELECT T2.Player_Name FROM Ball_by_Ball AS T1 INNER JOIN Player AS T2 ON T1.Striker = T2.Player_Id WHERE T1.Match_Id = 419169 AND T1.Over_Id = 3 AND T1.Ball_Id = 2 AND T1.Innings_No = 2", "source_tables": ["player", "ball_by_ball"]}, "evidence": "name of the striker refers to Player_Name; match no. 419169 refers to Match_Id = 419169; over no.3 refers to Over_Id = 3; ball no.2 refers to Ball_Id = 2; inning no.2 refers to Innings_No = 2"}
{"sample_id": 1808, "db_id": "soccer_2016", "final": {"question": "Give the name of venue for the game with a win margin of 138 points.", "sql": "SELECT T2.Venue_Name FROM 'Match' AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T1.Win_Margin = 138", "source_tables": ["venue", "match"]}, "evidence": "name of venue refers to Venue_Name; a win margin of 138 points refers to Win_Margin = 138"}
{"sample_id": 1809, "db_id": "soccer_2016", "final": {"question": "For the game on 2008/5/12, who was the man of the match?", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match WHERE T2.Match_Date = '2008-05-12'", "source_tables": ["player", "match"]}, "evidence": "on 2008/5/12 refers to Match_Date = '2008-05-12'; name refers to Player_Name;"}
{"sample_id": 1810, "db_id": "soccer_2016", "final": {"question": "State the name of captain keeper of the match no.419117.", "sql": "SELECT T3.Player_Name FROM Player_Match AS T1 INNER JOIN Rolee AS T2 ON T1.Role_Id = T2.Role_Id INNER JOIN Player AS T3 ON T1.Player_Id = T3.Player_Id WHERE T1.Match_Id = '419117' AND T2.Role_Desc = 'CaptainKeeper'", "source_tables": ["player", "player_match", "rolee"]}, "evidence": "name refers to Player_Name; captain keeper refers to Role_Desc = 'CaptainKeeper'; match no.419117 refers to Match_Id = '419117'"}
{"sample_id": 1811, "db_id": "soccer_2016", "final": {"question": "Who was the man of the series in 2013? Give the full name.", "sql": "SELECT T2.Player_Name FROM Season AS T1 INNER JOIN Player AS T2 ON T1.Man_of_the_Series = T2.Player_Id WHERE T1.Season_Year = 2013", "source_tables": ["season", "player"]}, "evidence": "full name refers to Player_Name; in 2013 refers to Season_Year = 2013"}
{"sample_id": 1812, "db_id": "soccer_2016", "final": {"question": "Give the date of birth of the 2014 Orange Cap winner.", "sql": "SELECT T2.DOB FROM Season AS T1 INNER JOIN Player AS T2 ON T1.Man_of_the_Series = T2.Player_Id WHERE T1.Season_Year = 2014 AND T1.Orange_Cap IS NOT NULL", "source_tables": ["season", "player"]}, "evidence": "date of birth refers to DOB; 2014 refers to Season_Year = 2014; Orange Cap winner refers to Orange_Cap IS NOT NULL"}
{"sample_id": 1813, "db_id": "soccer_2016", "final": {"question": "What is the nationality of the 7th season Purple Cap winner?", "sql": "SELECT T3.Country_Name FROM Season AS T1 INNER JOIN Player AS T2 ON T1.Man_of_the_Series = T2.Player_Id INNER JOIN Country AS T3 ON T2.Country_Name = T3.Country_Id WHERE T1.Season_Id = 7 AND T1.Purple_Cap IS NOT NULL", "source_tables": ["season", "country", "player"]}, "evidence": "nationality refers to Country_Name; the 7th season refers to Season_Id = 7; Purple Cap winner refers to Purple_Cap IS NOT NULL"}
{"sample_id": 1814, "db_id": "soccer_2016", "final": {"question": "Which country does Ranchi city belong to?", "sql": "SELECT T2.Country_Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.Country_Id = T2.Country_Id WHERE T1.City_Name = 'Ranchi'", "source_tables": ["country", "city"]}, "evidence": "country refers to Country_Name; Ranchi city refers to City_Name = 'Ranchi'"}
{"sample_id": 1815, "db_id": "soccer_2016", "final": {"question": "How many Indian cities are there in the database?", "sql": "SELECT SUM(CASE WHEN T2.Country_Name = 'India' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN Country AS T2 ON T1.Country_Id = T2.Country_Id", "source_tables": ["country", "city"]}, "evidence": "Indian refers to Country_Name = 'India'"}
{"sample_id": 1816, "db_id": "soccer_2016", "final": {"question": "State the name of the city with the most venues.", "sql": "SELECT T1.City_Name FROM City AS T1 INNER JOIN Venue AS T2 ON T1.City_Id = T2.City_Id GROUP BY T1.City_Id ORDER BY COUNT(T2.Venue_Id) DESC LIMIT 1", "source_tables": ["city", "venue"]}, "evidence": "name of the city refers to City_Name; the most venues refers to max(count(Venue_Id))"}
{"sample_id": 1817, "db_id": "soccer_2016", "final": {"question": "What is the batting hand of MK Pandey?", "sql": "SELECT T2.Batting_hand FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id WHERE T1.Player_Name = 'MK Pandey'", "source_tables": ["player", "batting_style"]}, "evidence": "MK Pandey refers to Player_Name = 'MK Pandey'"}
{"sample_id": 1818, "db_id": "soccer_2016", "final": {"question": "In the database, how many times is the number of Indian cities to the South African cities?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Country_Name = 'India' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.Country_Name = 'South Africa' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN Country AS T2 ON T1.Country_Id = T2.Country_Id", "source_tables": ["country", "city"]}, "evidence": "Indian refers to Country_Name = 'India'; South African refers to Country_Name = 'South Africa'; how many times = divide(count(City_Id where Country_Name = 'India'), count(City_Id where Country_Name = 'South Africa'))"}
{"sample_id": 1819, "db_id": "soccer_2016", "final": {"question": "How many times does M Chinnaswamy Stadium host games than Maharashtra Cricket Association Stadium?", "sql": "SELECT SUM(CASE WHEN T2.Venue_Name = 'M Chinnaswamy Stadium' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.Venue_Name = 'Maharashtra Cricket Association Stadium' THEN 1 ELSE 0 END) FROM 'Match' AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id", "source_tables": ["venue", "match"]}, "evidence": "M Chinnaswamy Stadium refers to Venue_Name = 'M Chinnaswamy Stadium'; Maharashtra Cricket Association Stadium refers to Venue_Name = 'Maharashtra Cricket Association Stadium'; how many times = divide(count(Match_Id where Venue_Name = 'M Chinnaswamy Stadium'), count(Match_Id where Venue_Name = 'Maharashtra Cricket Association Stadium'))"}
{"sample_id": 1820, "db_id": "soccer_2016", "final": {"question": "Who is the oldest player?", "sql": "SELECT Player_Name FROM Player ORDER BY DOB ASC LIMIT 1", "source_tables": ["player"]}, "evidence": "name of the player refers to Player_Name; the oldest refers to min(DOB)"}
{"sample_id": 1821, "db_id": "soccer_2016", "final": {"question": "How many matches were played on May 2008?", "sql": "SELECT SUM(CASE WHEN SUBSTR(Match_Date, 7, 1) = '5' THEN 1 ELSE 0 END) FROM 'Match' WHERE SUBSTR(Match_Date, 1, 4) = '2008'", "source_tables": ["match"]}, "evidence": "in May 2008 refers to SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 7, 1) = '5'"}
{"sample_id": 1822, "db_id": "soccer_2016", "final": {"question": "How many players were born in the 90s?", "sql": "SELECT COUNT(Player_Id) AS cnt FROM Player WHERE DOB BETWEEN '1990-01-01' AND '1999-12-31'", "source_tables": ["player"]}, "evidence": "born in the 90s refers to DOB > = '1990-01-01' AND DOB < = '1999-12-31'"}
{"sample_id": 1823, "db_id": "soccer_2016", "final": {"question": "How many matches did Team 10 play in 2012?", "sql": "SELECT SUM(CASE WHEN Team_1 = 10 OR Team_2 = 10 THEN 1 ELSE 0 END) FROM 'Match' WHERE SUBSTR(Match_Date, 1, 4) = '2012'", "source_tables": ["match"]}, "evidence": "Team 10 refers to Team_1 = 10 OR Team_2 = 10; in 2012 refers to SUBSTR(Match_Date, 1, 4) = '2012'"}
{"sample_id": 1824, "db_id": "soccer_2016", "final": {"question": "List the id of the player who won the Orange Cap for 2 consecutive seasons.", "sql": "SELECT Orange_Cap FROM Season GROUP BY Orange_Cap HAVING COUNT(Season_Year) > 1", "source_tables": ["season"]}, "evidence": "id of the player who won the Orange Cap refers to Orange_Cap; for 2 consecutive seasons refers to count(Season_Year) > 1"}
{"sample_id": 1825, "db_id": "soccer_2016", "final": {"question": "How many matches were played in Season 7?", "sql": "SELECT COUNT(Match_Id) FROM 'Match' WHERE Season_Id = 7", "source_tables": ["match"]}, "evidence": "Season 7 refers to Season_Id = 7"}
{"sample_id": 1826, "db_id": "soccer_2016", "final": {"question": "How many umpires are from South Africa?", "sql": "SELECT SUM(CASE WHEN T1.Country_Name = 'South Africa' THEN 1 ELSE 0 END) FROM Country AS T1 INNER JOIN Umpire AS T2 ON T1.Country_ID = T2.Umpire_Country", "source_tables": ["country", "umpire"]}, "evidence": "South Africa refers to Country_Name = 'South Africa'"}
{"sample_id": 1827, "db_id": "soccer_2016", "final": {"question": "What is the name of the player with the highest number of outstanding player awards in a particular match?", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match GROUP BY T2.Man_of_the_Match ORDER BY COUNT(T2.Man_of_the_Match) DESC LIMIT 1", "source_tables": ["player", "match"]}, "evidence": "name of the player refers to Player_Name; the highest number of outstanding player awards refers to max(count(Man_of_the_Match))"}
{"sample_id": 1828, "db_id": "soccer_2016", "final": {"question": "In which country do the majority of the players are from?", "sql": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN Player AS T2 ON T1.Country_Id = T2.Country_Name GROUP BY T2.Country_Name ORDER BY COUNT(T2.Country_Name) DESC LIMIT 1", "source_tables": ["country", "player"]}, "evidence": "country refers to Country_Name; the majority of the players\u00a0 refers to max(count(Country_Name))"}
{"sample_id": 1829, "db_id": "soccer_2016", "final": {"question": "How many Orange Cap awards were won by CH Gayle?", "sql": "SELECT SUM(CASE WHEN T1.Player_Name = 'CH Gayle' THEN 1 ELSE 0 END) AS cnt FROM Player AS T1 INNER JOIN Season AS T2 ON T1.Player_Id = T2.Orange_Cap", "source_tables": ["season", "player"]}, "evidence": "CH Gayle refers to Player_Name = 'CH Gayle'"}
{"sample_id": 1830, "db_id": "soccer_2016", "final": {"question": "Which season played the highest number of matches at M Chinnaswamy Stadium?", "sql": "SELECT T1.Season_Id FROM 'Match' AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T2.Venue_Name = 'M Chinnaswamy Stadium' GROUP BY T1.Season_Id ORDER BY COUNT(T1.Season_Id) DESC LIMIT 1", "source_tables": ["venue", "match"]}, "evidence": "season refers to Season_Id; the highest number of matches refers to max(count(Season_Id)); M Chinnaswamy Stadium refers to Venue_Name = 'M Chinnaswamy Stadium'"}
{"sample_id": 1831, "db_id": "soccer_2016", "final": {"question": "What is the name of the team that won the most number of matches in season 1?", "sql": "SELECT Team_Name FROM Team WHERE Team_Id = ( SELECT Match_Winner FROM 'Match' WHERE season_Id = 1 GROUP BY Match_Winner ORDER BY COUNT(Match_Winner) DESC LIMIT 1 )", "source_tables": ["team", "match"]}, "evidence": "name of the team refers to Team_Name; the most number of matches refers to max(count(Match_Winner)); season 1 refers to season_Id = 1"}
{"sample_id": 1832, "db_id": "soccer_2016", "final": {"question": "Which venue did Kolkata Knight Riders play most of their matches as a Team 1?", "sql": "SELECT T3.Venue_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Team_1 INNER JOIN Venue AS T3 ON T2.Venue_Id = T3.Venue_Id WHERE T1.Team_Name = 'Kolkata Knight Riders' GROUP BY T3.Venue_Id ORDER BY COUNT(T3.Venue_Id) DESC LIMIT 1", "source_tables": ["venue", "team", "match"]}, "evidence": "venue refers to Venue_Name; Kolkata Knight Riders refers to Team_Name = 'Kolkata Knight Riders'; most of their matches refers to max(count(Venue_Id)); Team 1 refers to Team_Id = Team_1"}
{"sample_id": 1833, "db_id": "soccer_2016", "final": {"question": "Which team has the highest number of losses of all time?", "sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN ( SELECT COUNT(Team_1) AS a, Team_1 FROM Match WHERE Team_1 <> Match_Winner GROUP BY Team_1 UNION SELECT COUNT(Team_2) AS a, Team_2 FROM Match WHERE Team_2 <> Match_Winner GROUP BY Team_2 ORDER BY a DESC LIMIT 1 ) AS T2 ON T1.Team_Id = T2.Team_1", "source_tables": ["team", "match"]}, "evidence": "name of the team refers to Team_Name; the highest number of losses refers to max(add(count(Team_1 where Team_Id = Team_1 and Team_1 <> Match_Winner), count(Team_2 where Team_Id = Team_2 and Team_2 <> Match_Winner)))"}
{"sample_id": 1834, "db_id": "soccer_2016", "final": {"question": "Who is the player who won the first ever \"man of the match\" award?", "sql": "SELECT Player_Name FROM Player WHERE Player_Id = ( SELECT Man_of_the_Match FROM 'Match' ORDER BY match_date ASC LIMIT 1 )", "source_tables": ["player", "match"]}, "evidence": "name of the player refers to Player_Name; the first ever refers to min(match_date); \"man of the match\" award refers to Player_Id in 'Man_of_the_Match'"}
{"sample_id": 1835, "db_id": "soccer_2016", "final": {"question": "When did Chennai Super Kings play its first match?", "sql": "SELECT Match_Date FROM 'Match' WHERE team_1 = ( SELECT Team_Id FROM Team WHERE Team_Name = 'Chennai Super Kings' ) OR Team_2 = ( SELECT Team_Id FROM Team WHERE Team_Name = 'Chennai Super Kings' ) ORDER BY Match_Date ASC LIMIT 1", "source_tables": ["team", "match"]}, "evidence": "match date refers to Match_Date; Chennai Super Kings refers to Team_Name = 'Chennai Super Kings'; first match refers to min(Match_Date)"}
{"sample_id": 1836, "db_id": "soccer_2016", "final": {"question": "How many players with left-hand batting style are from India?", "sql": "SELECT SUM(CASE WHEN T1.Batting_hand = 'Left-hand bat' THEN 1 ELSE 0 END) AS cnt FROM Batting_Style AS T1 INNER JOIN Player AS T2 ON T1.Batting_Id = T2.Batting_hand INNER JOIN Country AS T3 ON T2.Country_Name = T3.Country_Id WHERE T3.Country_Name = 'India'", "source_tables": ["country", "player", "batting_style"]}, "evidence": "left-hand batting style refers to Batting_hand = 'Left-hand bat'; India refers to Country_Name = 'India'"}
{"sample_id": 1837, "db_id": "soccer_2016", "final": {"question": "Who is the player that has the highest number of roles as a captain for Deccan Chargers?", "sql": "SELECT T4.Player_Name FROM Team AS T1 INNER JOIN Player_Match AS T2 ON T1.Team_id = T2.Team_id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id INNER JOIN Player AS T4 ON T2.Player_Id = T4.Player_Id WHERE T1.Team_Name = 'Deccan Chargers' AND T1.Team_Id = 8 AND T3.Role_Desc = 'Captain' AND T3.Role_Id = 1 GROUP BY T4.Player_Id ORDER BY COUNT(T3.Role_Id) DESC LIMIT 1", "source_tables": ["player", "player_match", "team", "rolee"]}, "evidence": "name of the player refers to Player_Name; the highest number of roles refers to max(count(Role_Id)); as a captain refers to Role_Desc = 'Captain'; Deccan Chargers refers to Team_Name = 'Deccan Chargers'"}
{"sample_id": 1838, "db_id": "soccer_2016", "final": {"question": "What is the percentage of all right-handed batting players among all the other players?", "sql": "SELECT CAST(SUM(CASE WHEN T1.Batting_hand = 'Right-hand bat' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Player_Id) FROM Batting_Style AS T1 INNER JOIN Player AS T2 ON T2.Batting_hand = T1.Batting_Id", "source_tables": ["player", "batting_style"]}, "evidence": "right-handed batting refers to Batting_hand = 'Right-hand bat'; percentage = divide(count(Player_Id where Batting_hand = 'Right-hand bat'), count(Player_Id)) * 100%"}
{"sample_id": 1839, "db_id": "soccer_2016", "final": {"question": "Name the player who is born on July 7, 1981.", "sql": "SELECT Player_name FROM Player WHERE DOB = '1981-07-07'", "source_tables": ["player"]}, "evidence": "name of the player refers to Player_Name; born on July 7 1981 refers to DOB = '1981-07-07'"}
{"sample_id": 1840, "db_id": "soccer_2016", "final": {"question": "How many matches were played by the player with player ID 2?", "sql": "SELECT SUM(CASE WHEN Player_Id = 2 THEN 1 ELSE 0 END) FROM Player_Match", "source_tables": ["player_match"]}, "evidence": "player ID 2 refers to Player_Id = 2"}
{"sample_id": 1841, "db_id": "soccer_2016", "final": {"question": "List the first team's name in the match with the highest winning margin.", "sql": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 ORDER BY T1.Win_Margin DESC LIMIT 1", "source_tables": ["team", "match"]}, "evidence": "team's name refers to Team_Name; first team refers to Team_Id = Team_1; the highest winning margin refers to max(Win_Margin)"}
{"sample_id": 1842, "db_id": "soccer_2016", "final": {"question": "Give the country where St. George's Park is located.", "sql": "SELECT T3.Country_Name FROM Venue AS T1 INNER JOIN City AS T2 ON T2.City_Id = T1.City_Id INNER JOIN Country AS T3 ON T3.Country_Id = T2.Country_id WHERE T1.Venue_Name = 'St George''s Park'", "source_tables": ["country", "city", "venue"]}, "evidence": "country refers to Country_Name; St. George's Park refers to Venue_Name = 'St George''s Park'"}
{"sample_id": 1843, "db_id": "soccer_2016", "final": {"question": "List the player's name of Mumbai Indians in the match ID 335990.", "sql": "SELECT T3.Team_Name FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T2.Player_Id = T1.Player_Id INNER JOIN Team AS T3 ON T3.Team_Id = T2.Team_Id WHERE T2.Match_Id = 335990 AND T3.Team_Name = 'Mumbai Indians' GROUP BY T3.Team_Name", "source_tables": ["player", "player_match", "team"]}, "evidence": "Mumbai Indians refers to Team_Name = 'Mumbai Indians'; match ID 335990 refers to Match_Id = 335990"}
{"sample_id": 1844, "db_id": "soccer_2016", "final": {"question": "Provide the winning team's name in the match with the point of winning margin of 7 on May 7, 2009.", "sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T2.Match_Date = '2009-05-07' AND T2.Win_Margin = 7", "source_tables": ["team", "match"]}, "evidence": "the winning team refers to Team_Id = Match_Winner; the point of winning margin of 7 refers to Win_Margin = 7; on May 7 2009 refers to Match_Date = '2009-05-07'"}
{"sample_id": 1845, "db_id": "soccer_2016", "final": {"question": "How many of the matches are Superover?", "sql": "SELECT SUM(CASE WHEN T2.Outcome_Type = 'Superover' THEN 1 ELSE 0 END) FROM Match AS T1 INNER JOIN Outcome AS T2 ON T2.Outcome_Id = T1.Outcome_type", "source_tables": ["outcome", "match"]}, "evidence": "Superover refers to Outcome_Type = 'Superover'"}
{"sample_id": 1846, "db_id": "soccer_2016", "final": {"question": "List the cities located in U.A.E.", "sql": "SELECT T1.City_Name FROM City AS T1 INNER JOIN Country AS T2 ON T2.Country_Id = T1.Country_id WHERE T2.Country_Name = 'U.A.E'", "source_tables": ["country", "city"]}, "evidence": "city refers to City_Name; U.A.E refers to Country_Name = 'U.A.E'"}
{"sample_id": 1847, "db_id": "soccer_2016", "final": {"question": "What is the total number of won matches of the team named \"Pune Warriors\"?", "sql": "SELECT SUM(CASE WHEN T2.Team_Name = 'Pune Warriors' THEN 1 ELSE 0 END) FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Match_Winner", "source_tables": ["team", "match"]}, "evidence": "the team named \"Pune Warriors\" refers to Team_Name = 'Pune Warriors'; the total number of won matches = count(Team_Name where Team_Id = Match_Winner)"}
{"sample_id": 1848, "db_id": "soccer_2016", "final": {"question": "Among the matches held in 2015, who is the winning team in the match ID 829768?", "sql": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Match_Winner WHERE T1.Match_Date LIKE '2015%' AND T1.Match_Id = 829768", "source_tables": ["team", "match"]}, "evidence": "in 2015 refers to Match_Date LIKE '2015%'; the winning team refers to Team_Id = Match_Winner; match ID 829768 refers to Match_Id = 829768"}
{"sample_id": 1849, "db_id": "soccer_2016", "final": {"question": "What is the role of K Goel in the match ID 335992?", "sql": "SELECT T3.Role_Desc FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T2.Player_Id = T1.Player_Id INNER JOIN Rolee AS T3 ON T3.Role_Id = T2.Role_Id WHERE T2.Match_Id = 335992 AND T1.Player_Name = 'K Goel'", "source_tables": ["player", "player_match", "rolee"]}, "evidence": "role refers to Role_Desc; K Goel refers to Player_Name = 'K Goel'; match ID 335992 refers to Match_Id = 335992"}
{"sample_id": 1850, "db_id": "soccer_2016", "final": {"question": "How many cities are located in South Africa?", "sql": "SELECT SUM(CASE WHEN T2.Country_Name = 'South Africa' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN Country AS T2 ON T2.Country_Id = T1.Country_id", "source_tables": ["country", "city"]}, "evidence": "South Africa refers to Country_Name = 'South Africa'"}
{"sample_id": 1851, "db_id": "soccer_2016", "final": {"question": "How many matches were held at the venue named \"Newlands\"?", "sql": "SELECT SUM(CASE WHEN T2.Venue_Name = 'Newlands' THEN 1 ELSE 0 END) FROM Match AS T1 INNER JOIN Venue AS T2 ON T2.Venue_Id = T1.Venue_Id", "source_tables": ["venue", "match"]}, "evidence": "the venue named \"Newlands\" refers to Venue_Name = 'Newlands'"}
{"sample_id": 1852, "db_id": "soccer_2016", "final": {"question": "Provide the point of the winning margin in a match between Mumbai Indians and Royal Challengers Bangalore on May 28, 2008.", "sql": "SELECT T1.Win_Margin FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 INNER JOIN Team AS T3 ON T3.Team_Id = T1.Team_2 WHERE (T2.Team_Name = 'Mumbai Indians' AND T3.Team_Name = 'Royal Challengers Bangalore' AND T1.Match_Date = '2008-05-28') OR (T2.Team_Name = 'Royal Challengers Bangalore' AND T3.Team_Name = 'Mumbai Indians' AND T1.Match_Date = '2008-05-28')", "source_tables": ["team", "match"]}, "evidence": "point of the winning margin refers to Win_Margin; Mumbai Indians refers to Team_Name = 'Mumbai Indians'; Royal Challengers Bangalore refers to Team_Name = 'Royal Challengers Bangalore'; on May 28 2008 refers to Match_Date = '2008-05-28'"}
{"sample_id": 1853, "db_id": "soccer_2016", "final": {"question": "List the names of the first andthe second teams that played a match with the point of the winning margin lower than the 30% of the average winning margin of the matches held in 2011.", "sql": "SELECT DISTINCT CASE WHEN T1.Win_Margin < ( SELECT AVG(Win_Margin) * 0.3 FROM Match WHERE Match_Date LIKE '2011%' ) THEN T2.Team_Name END, CASE WHEN T1.Win_Margin < ( SELECT AVG(Win_Margin) * 0.3 FROM Match WHERE Match_Date LIKE '2011%' ) THEN T3.Team_Name END FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 INNER JOIN Team AS T3 ON T3.Team_Id = T1.Team_2 WHERE T1.Match_Date LIKE '2011%'", "source_tables": ["team", "match"]}, "evidence": "name of the team refers to Team_Name; in 2011 refers to Match_Date LIKE '2011%'; the point of winning margin lower than 30% of the average winning margin refers to Win_Margin < multiply(avg(Win_Margin), 0.3) where Match_Date LIKE '2011%'"}
{"sample_id": 1854, "db_id": "soccer_2016", "final": {"question": "Among the players born in 1977, what is the percentage of the players with a role as a captain?", "sql": "SELECT CAST(SUM(CASE WHEN T1.Role_Desc = 'Captain' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Role_Id) FROM Rolee AS T1 INNER JOIN Player_Match AS T2 ON T2.Role_Id = T1.Role_Id INNER JOIN Player AS T3 ON T3.Player_Id = T2.Player_Id WHERE T3.DOB LIKE '1977%'", "source_tables": ["player", "player_match", "rolee"]}, "evidence": "born in 1977 refers to DOB LIKE '1977%'; a role as a captain refers to Role_Desc = 'Captain'; percentage = divide(count(Role_Id where Role_Desc = 'Captain'), count(Role_Id)) * 100% where DOB LIKE '1977%'"}
{"sample_id": 1855, "db_id": "soccer_2016", "final": {"question": "How many overs were there in the first innings of match ID \"335996\"?", "sql": "SELECT COUNT(Over_Id) FROM Ball_by_Ball WHERE Match_Id = 335996 AND Innings_No = 1", "source_tables": ["ball_by_ball"]}, "evidence": "the first innings refers to Innings_No = 1; match ID \"335996\" refers to Match_Id = 335996"}
{"sample_id": 1856, "db_id": "soccer_2016", "final": {"question": "List the over IDs, ball IDs, and innings numbers of the match ID \"336004\" while the batsman got the maximum scores.", "sql": "SELECT Over_Id, Ball_Id, Innings_No FROM Batsman_Scored WHERE Match_Id = 336004 ORDER BY Runs_Scored DESC LIMIT 1", "source_tables": ["batsman_scored"]}, "evidence": "over ID refers to Over_Id; ball ID refers to Ball_Id; innings number refers to Innings_No; match ID \"336004\" refers to Match_Id = 336004; batsman got the maximum scores refers to max(Runs_Scored)"}
{"sample_id": 1857, "db_id": "soccer_2016", "final": {"question": "Describe any five matches IDs that reached over ID 20.", "sql": "SELECT Match_Id FROM Ball_by_Ball WHERE Over_Id = 20 GROUP BY Match_Id LIMIT 5", "source_tables": ["ball_by_ball"]}, "evidence": "reached over ID 20 refers to Over_Id = 20"}
{"sample_id": 1858, "db_id": "soccer_2016", "final": {"question": "How many players got out in the first inning of match ID \"548335\"?", "sql": "SELECT SUM(CASE WHEN Match_Id = 548335 THEN 1 ELSE 0 END) FROM Wicket_Taken WHERE Innings_No = 1", "source_tables": ["wicket_taken"]}, "evidence": "got out refers to Player_Out; the first inning refers to Innings_No = 1; match ID \"548335\" refers to Match_Id = 548335"}
{"sample_id": 1859, "db_id": "soccer_2016", "final": {"question": "List the players' names who were born in 1971.", "sql": "SELECT Player_name FROM Player WHERE DOB LIKE '1971%'", "source_tables": ["player"]}, "evidence": "players' name refers to Player_name; born in 1971 refers to DOB LIKE '1971%'"}
{"sample_id": 1860, "db_id": "soccer_2016", "final": {"question": "Provide the match IDs which were held on 18th April 2015.", "sql": "SELECT Match_Id FROM Match WHERE Match_Date LIKE '%2015-04-18%'", "source_tables": ["match"]}, "evidence": "on 18th April 2015 refers to DATE(Match_Date) = '2015-04-18'"}
{"sample_id": 1861, "db_id": "soccer_2016", "final": {"question": "List the match IDs which had players out by hit wickets.", "sql": "SELECT T1.Match_Id FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T2.Out_Id = T1.Kind_Out WHERE T2.Out_Name = 'hit wicket'", "source_tables": ["wicket_taken", "out_type"]}, "evidence": "had players out by hit wickets refers to Out_Name = 'hit wicket'"}
{"sample_id": 1862, "db_id": "soccer_2016", "final": {"question": "How many players got out by being stumped in the second innings of all matches?", "sql": "SELECT SUM(CASE WHEN T1.Innings_No = 2 THEN 1 ELSE 0 END) FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T2.Out_Id = T1.Kind_Out WHERE T2.Out_Name = 'stumped'", "source_tables": ["wicket_taken", "out_type"]}, "evidence": "got out by being stumped refers to Out_Name = 'stumped'; the second innings refers to Innings_No = 2"}
{"sample_id": 1863, "db_id": "soccer_2016", "final": {"question": "How many times did Yuvraj Singh receive the Man of the Match award?", "sql": "SELECT SUM(CASE WHEN T2.Player_Name = 'Yuvraj Singh' THEN 1 ELSE 0 END) FROM Match AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match", "source_tables": ["player", "match"]}, "evidence": "Yuvraj Singh refers to Player_Name = 'Yuvraj Singh'; receive the Man of the Match award refers to Player_Id = Man_of_the_Match"}
{"sample_id": 1864, "db_id": "soccer_2016", "final": {"question": "Among the players who were born in 1977, provide names and birthdates of the players from England.", "sql": "SELECT T2.Player_Name, T2.DOB FROM Country AS T1 INNER JOIN Player AS T2 ON T2.Country_Name = T1.Country_Id WHERE T2.DOB LIKE '1977%' AND T1.Country_Name = 'England'", "source_tables": ["country", "player"]}, "evidence": "born in 1977 refers to DOB LIKE '1977%'; name refers to Player_Name; birthdate refers to DOB; England refers to Country_Name = 'England'"}
{"sample_id": 1865, "db_id": "soccer_2016", "final": {"question": "Who got the Man of the Series Award in 2010?", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Match AS T2 ON T2.Man_of_the_Match = T1.Player_Id INNER JOIN Season AS T3 ON T3.Season_Id = T2.Season_Id WHERE T3.Season_Year = 2010 GROUP BY T1.Player_Name", "source_tables": ["season", "player", "match"]}, "evidence": "player's name refers to Player_Name; got the Man of the Series Award refers to Man_of_the_Match = Player_Id; in 2010 refers to Season_Year = 2010"}
{"sample_id": 1866, "db_id": "soccer_2016", "final": {"question": "Calculate the win rate of the team \"Chennai Super Kings\".", "sql": "SELECT CAST(SUM(CASE WHEN T1.Match_Winner = 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Match_Id) FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 INNER JOIN Team AS T3 ON T3.Team_Id = T1.Team_2 WHERE T2.Team_Name = 'Chennai Super Kings' OR T3.Team_Name = 'Chennai Super Kings'", "source_tables": ["team", "match"]}, "evidence": "team \"Chennai Super Kings\" refers to Team_Name = 'Chennai Super Kings'; win rate = divide(count(Match_Id where Match_Winner = 3), count(Match_Id)) * 100%"}
{"sample_id": 1867, "db_id": "soccer_2016", "final": {"question": "List the names and countries of the players from Gujarat Lions who played in the match held on 11th April 2016.", "sql": "SELECT T4.Player_Name, T5.Country_Name FROM Player_Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_Id INNER JOIN Match AS T3 ON T3.Match_Id = T1.Match_Id INNER JOIN Player AS T4 ON T4.Player_Id = T1.Player_Id INNER JOIN Country AS T5 ON T5.Country_Id = T4.Country_Name WHERE T2.Team_Name = 'Gujarat Lions' AND T3.Match_Date = '2016-04-11'", "source_tables": ["player", "player_match", "country", "team", "match"]}, "evidence": "player's name refers to Player_Name; country refers to Country_Name; Gujarat Lions refers to Team_Name = 'Gujarat Lions'; on 11th April 2016 refers to Match_Date = '2016-04-11'"}
{"sample_id": 1868, "db_id": "soccer_2016", "final": {"question": "Provide the names and birthdates of players who have left-arm fast skills.", "sql": "SELECT T1.Player_Name, T1.DOB FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T2.Bowling_Id = T1.Bowling_skill WHERE T2.Bowling_skill = 'Left-arm fast'", "source_tables": ["player", "bowling_style"]}, "evidence": "player's name refers to Player_Name; birthdate refers to DOB; have left-arm fast skills refers to Bowling_skill = 'Left-arm fast'"}
{"sample_id": 1869, "db_id": "soccer_2016", "final": {"question": "Where did BR Doctrove come from?", "sql": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN Umpire AS T2 ON T2.Umpire_Country = T1.Country_Id WHERE T2.Umpire_Name = 'BR Doctrove'", "source_tables": ["country", "umpire"]}, "evidence": "the country the umpire comes from refers to Country_Name; BR Doctrove refers to Umpire_Name = 'BR Doctrove'"}
{"sample_id": 1870, "db_id": "soccer_2016", "final": {"question": "Who was the captain of the winning team in the match held on 1st June 2008?", "sql": "SELECT T3.Player_Name FROM Player_Match AS T1 INNER JOIN Match AS T2 ON T2.Match_Id = T1.Match_Id INNER JOIN Player AS T3 ON T3.Player_Id = T1.Player_Id INNER JOIN Rolee AS T4 ON T4.Role_Id = T1.Role_Id WHERE T2.Match_Date = '2008-06-01' AND T4.Role_Desc = 'Captain' AND T2.Match_Winner = T1.Team_Id", "source_tables": ["player", "player_match", "match", "rolee"]}, "evidence": "player's name refers to Player_Name; captain refers to Role_Desc = 'Captain'; the winning team refers to Match_Winner = Team_Id; on 1st June 2008 refers to Match_Date = '2008-06-01'"}
{"sample_id": 1871, "db_id": "soccer_2016", "final": {"question": "Which team did CK Kapugedera belong to? How many matches did he play?", "sql": "SELECT T3.Team_Name, COUNT(T2.Match_Id) FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T2.Player_Id = T1.Player_Id INNER JOIN Team AS T3 ON T3.Team_Id = T2.Team_Id WHERE T1.Player_Name = 'CK Kapugedera'", "source_tables": ["player", "player_match", "team"]}, "evidence": "team refers to Team_Name; CK Kapugedera refers to Player_Name = 'CK Kapugedera'"}
{"sample_id": 1872, "db_id": "soccer_2016", "final": {"question": "Among the matches held in Mumbai, how many percent of them were held in Wankhede Stadium?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Venue_Name = 'Wankhede Stadium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.Match_Id) FROM City AS T1 INNER JOIN Venue AS T2 ON T2.City_Id = T1.City_Id INNER JOIN Match AS T3 ON T3.Venue_Id = T2.Venue_Id WHERE T1.City_Name = 'Mumbai'", "source_tables": ["city", "venue", "match"]}, "evidence": "Mumbai refers to City_Name = 'Mumbai'; Wankhede Stadium refers to Venue_Name = 'Wankhede Stadium'; percent = divide(count(Match_Id where Venue_Name = 'Wankhede Stadium'), count(Match_Id)) * 100% where City_Name = 'Mumbai'"}
{"sample_id": 1873, "db_id": "soccer_2016", "final": {"question": "Among the players out in match ID 392187, calculate the percentage of players out by bowl.", "sql": "SELECT CAST(SUM(CASE WHEN T2.Out_Name = 'bowled' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Player_Out) FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T2.Out_Id = T1.Kind_Out WHERE T1.Match_Id = 392187", "source_tables": ["wicket_taken", "out_type"]}, "evidence": "out by bowl refers to Out_Name = 'bowled'; percentage = divide(count(Player_Out where Out_Name = 'bowled'), count(Player_Out)) * 100% where Match_Id = 392187"}
{"sample_id": 1874, "db_id": "soccer_2016", "final": {"question": "How many percent of the toss-winners decided to bowl first on the pitch from 2010 to 2016?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Toss_Name = 'field' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Toss_Id) FROM Match AS T1 INNER JOIN Toss_Decision AS T2 ON T2.Toss_Id = T1.Toss_Decide WHERE T1.Match_Date BETWEEN '2010-01-01' AND '2016-12-31'", "source_tables": ["toss_decision", "match"]}, "evidence": "decide to bowl first refers to Toss_Name = 'field'; from 2010 to 2016 refers to Match_Date BETWEEN '2010-01-01' AND '2016-12-31'; percent = divide(count(Toss_Id where Toss_Name = 'field'), count(Toss_Id)) * 100% where Match_Date BETWEEN '2010-01-01' AND '2016-12-31'"}
{"sample_id": 1875, "db_id": "soccer_2016", "final": {"question": "List down the ID of toss winners who decided to bat after winning the \"toss of the coin\".", "sql": "SELECT Toss_Winner FROM Match WHERE Toss_Decide = 2", "source_tables": ["match"]}, "evidence": "decided to bat refers to Toss_Decide = 2; ID of toss winners refers to Toss_winner"}
{"sample_id": 1876, "db_id": "soccer_2016", "final": {"question": "List down the match ID of matches that the \"man of the match\" award was given to BB McCullum.", "sql": "SELECT T1.Match_Id FROM Match AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match WHERE T2.Player_Name = 'BB McCullum'", "source_tables": ["player", "match"]}, "evidence": ""}
{"sample_id": 1877, "db_id": "soccer_2016", "final": {"question": "List down the DOB of players who received the \"man of the match\" award.", "sql": "SELECT T2.DOB FROM Match AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match", "source_tables": ["player", "match"]}, "evidence": ""}
{"sample_id": 1878, "db_id": "soccer_2016", "final": {"question": "List down the name of teams that won the toss of the coin from matches with ID from 336010 to 336020.", "sql": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Toss_Winner WHERE T1.Match_Id BETWEEN 336010 AND 336020", "source_tables": ["team", "match"]}, "evidence": "name of teams refers to Team_Name; won the toss refers to Toss_Winner; matches with ID from 336010 to 336020\u00a0 refers to Match_Id BETWEEN 336010 AND 336020"}
{"sample_id": 1879, "db_id": "soccer_2016", "final": {"question": "How many matches have Mumbai Indians won?", "sql": "SELECT SUM(CASE WHEN T2.Team_Name = 'Mumbai Indians' THEN 1 ELSE 0 END) FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Match_Winner", "source_tables": ["team", "match"]}, "evidence": "Mumbai Indians refers to Team_Name = 'Mumbai Indians'; won refers to Match_Winner"}
{"sample_id": 1880, "db_id": "soccer_2016", "final": {"question": "List down names of teams that have played as second team against Pune Warriors.", "sql": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_2 WHERE T1.Team_1 = ( SELECT Team_Id FROM Team WHERE Team_Name = 'Pune Warriors' ) GROUP BY T2.Team_Name", "source_tables": ["team", "match"]}, "evidence": "names of teams refers to Team_Name; second team refers to Team_2; Pune Warriors refers to Team_Name = 'Pune Warriors'"}
{"sample_id": 1881, "db_id": "soccer_2016", "final": {"question": "What is the name of the team that won match ID 336000?", "sql": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Match_Winner WHERE T1.Match_Id = 336000", "source_tables": ["team", "match"]}, "evidence": "name of the team refers to Team_Name; won refers to Match_Winner"}
{"sample_id": 1882, "db_id": "soccer_2016", "final": {"question": "What are the match IDs that were played at Brabourne Stadium?", "sql": "SELECT T1.Match_Id FROM Match AS T1 INNER JOIN Venue AS T2 ON T2.Venue_Id = T1.Venue_Id WHERE T2.Venue_Name = 'Brabourne Stadium'", "source_tables": ["venue", "match"]}, "evidence": "at Brabourne Stadium refers to Venue_Name = 'Brabourne Stadium'"}
{"sample_id": 1883, "db_id": "soccer_2016", "final": {"question": "List down the name of venues in season 2.", "sql": "SELECT T2.Venue_Name FROM Match AS T1 INNER JOIN Venue AS T2 ON T2.Venue_Id = T1.Venue_Id WHERE T1.Season_Id = 2 GROUP BY T2.Venue_Name", "source_tables": ["venue", "match"]}, "evidence": "name of venues refers to Venue_Name; season 2 refers to Season_Id = 2"}
{"sample_id": 1884, "db_id": "soccer_2016", "final": {"question": "What is the city of M Chinnaswamy Stadium?", "sql": "SELECT T1.City_Name FROM City AS T1 INNER JOIN Venue AS T2 ON T2.City_Id = T1.City_Id WHERE T2.Venue_Name = 'M Chinnaswamy Stadium'", "source_tables": ["city", "venue"]}, "evidence": "city refers to City_Name; M Chinnaswamy Stadium refers to Venue_Name = 'M Chinnaswamy Stadium'"}
{"sample_id": 1885, "db_id": "soccer_2016", "final": {"question": "List down all of the venues in Mumbai.", "sql": "SELECT T2.Venue_Name FROM City AS T1 INNER JOIN Venue AS T2 ON T2.City_Id = T1.City_Id WHERE T1.City_Name = 'Mumbai'", "source_tables": ["city", "venue"]}, "evidence": "venues refers to Venue_Name; Mumbai refers to City_Name = 'Mumbai'"}
{"sample_id": 1886, "db_id": "soccer_2016", "final": {"question": "List down all of the winning teams' IDs that played in St George's Park.", "sql": "SELECT T2.Match_Winner FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T1.Venue_Name LIKE 'St George%'", "source_tables": ["venue", "match"]}, "evidence": "winning teams' refers to Match_Winner; played in St George's Park refers to Venue_Name like 'St George%'"}
{"sample_id": 1887, "db_id": "soccer_2016", "final": {"question": "Is SuperSport Park located at Centurion?", "sql": "SELECT T2.City_Name FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id WHERE T1.Venue_Name LIKE 'St George%'", "source_tables": ["city", "venue"]}, "evidence": "SuperSport Park refers to Venue_Name = 'SuperSport Park'; Centurion refers to City_Name = 'Centurion'"}
{"sample_id": 1888, "db_id": "soccer_2016", "final": {"question": "Calculate the total winning match for Deccan Chargers.", "sql": "SELECT SUM(T2.Match_Winner) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T1.Team_Name = 'Deccan Chargers'", "source_tables": ["team", "match"]}, "evidence": "winning refers to Match_Winner; Deccan Chargers refers to Team_Name = 'Deccan Chargers'"}
{"sample_id": 1889, "db_id": "soccer_2016", "final": {"question": "Count the total venues located in Pune City.", "sql": "SELECT SUM(T1.Venue_Name) FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id WHERE T2.City_Name = 'Pune'", "source_tables": ["city", "venue"]}, "evidence": "Pune City refers to City_Name = 'Pune'"}
{"sample_id": 1890, "db_id": "soccer_2016", "final": {"question": "Give the player id of the player who was at the non-striker end for the most number of balls in the match 501219.", "sql": "SELECT Ball_Id FROM Ball_by_Ball WHERE Non_Striker = Ball_Id ORDER BY Ball_Id DESC LIMIT 1", "source_tables": ["ball_by_ball"]}, "evidence": "most number of balls refers to max(Ball_Id); match 501219 refers to Match_Id = 501219;\nplayer id also refers to non_striker or ball_id"}
{"sample_id": 1891, "db_id": "soccer_2016", "final": {"question": "Calculate the average runs scored during the first half of all first innings.", "sql": "SELECT CAST(SUM(CASE WHEN 1 < Over_Id AND Over_Id < 25 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(Runs_Scored) FROM Batsman_Scored WHERE Innings_No = 1", "source_tables": ["batsman_scored"]}, "evidence": "first half refers to 1 < Over_Id and Over_Id < 25; average = divide(sum(Over_Id) when 1 < Over_Id and Over_Id < 25, sum(Runs_Scored)) as percentage; first innings refers to Innings_No = 1"}
{"sample_id": 1892, "db_id": "soccer_2016", "final": {"question": "What are the average extra runs given in the second innings of every match?", "sql": "SELECT AVG(Innings_No) FROM Extra_Runs WHERE Innings_No = 2", "source_tables": ["extra_runs"]}, "evidence": "second innings refers to Innings_No = 2; average extra runs = divide(sum(Extra_Runs), count(Innings_No)) when Innings_No = 2"}
{"sample_id": 1893, "db_id": "soccer_2016", "final": {"question": "Among the matches, what percentage have a winning margin above 100?", "sql": "SELECT CAST(COUNT(CASE WHEN Win_Margin > 100 THEN 1 ELSE 0 END) AS REAL) * 100 / TOTAL(Match_Id) FROM 'Match'", "source_tables": ["match"]}, "evidence": "winning margin above 100 refers to Win_Margin > 100; percentage = divide(count(Match_Id) when Win_Margin > 100, count(Match_Id)) as percentage"}
{"sample_id": 1894, "db_id": "soccer_2016", "final": {"question": "List the name of the players born between 1970 and 1990 in descending order of age.", "sql": "SELECT Player_Name FROM Player WHERE DOB BETWEEN '1970-01-01' AND '1990-12-31' ORDER BY DOB DESC", "source_tables": ["player"]}, "evidence": "name of the players refers to Player_Name; born between 1970 and 1990 refers to DOB between '1970-01-01' and '1990-12-31'"}
{"sample_id": 1895, "db_id": "soccer_2016", "final": {"question": "Of the wickets taken in the third overs, how many are without the involvement of fielders?", "sql": "SELECT SUM(CASE WHEN Fielders = '' THEN 1 ELSE 0 END) FROM Wicket_Taken WHERE Over_Id = 3", "source_tables": ["wicket_taken"]}, "evidence": "third overs refers to Over_Id = 3; without the involvement of fielders refers to Fielders = ''"}
{"sample_id": 1896, "db_id": "soccer_2016", "final": {"question": "From which country does the most umpires are from? How many of them are from the mentioned country?\n", "sql": "SELECT T2.Country_Id, COUNT(T1.Umpire_Id) FROM Umpire AS T1 INNER JOIN Country AS T2 ON T2.Country_Id = T1.Umpire_Country GROUP BY T2.Country_Id ORDER BY COUNT(T1.Umpire_Id) DESC LIMIT 1", "source_tables": ["country", "umpire"]}, "evidence": "which country refers to Country_Id; most umpires refers to max(count(Umpire_Id))"}
{"sample_id": 1897, "db_id": "soccer_2016", "final": {"question": "Among the players, what percentage are both captain and keeper?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Role_Desc = 'CaptainKeeper' THEN 1 ELSE 0 END) AS REAL) * 100 / TOTAL(T1.Player_Id) FROM Player_Match AS T1 INNER JOIN Rolee AS T2 ON T1.Role_Id = T2.Role_Id", "source_tables": ["player_match", "rolee"]}, "evidence": "captain and keeper refers to Role_Desc = 'CaptainKeeper'; percentage = divide(count(Player_Id) when Role_Desc = 'CaptainKeeper', count(Player_Id)) as percentage"}
{"sample_id": 1898, "db_id": "soccer_2016", "final": {"question": "In the players, how many were out by hit wicket?", "sql": "SELECT Player_Out FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T1.Kind_Out = T2.Out_Id WHERE Out_Name = 'hit wicket'", "source_tables": ["wicket_taken", "out_type"]}, "evidence": "out by hit wicket refers to Out_Name = 'hit wicket'"}
{"sample_id": 1899, "db_id": "soccer_2016", "final": {"question": "On average, how many players from each country bat with their right hand?", "sql": "SELECT CAST(SUM(CASE WHEN T1.Batting_hand = 'Right-hand bat' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Country_Name) FROM Batting_Style AS T1 INNER JOIN Player AS T2 ON T1.Batting_id = T2.Batting_hand", "source_tables": ["player", "batting_style"]}, "evidence": "bat with their right hand refers to Batting_hand = 'Right-hand bat'; average = divide(count(Player_Id) when Batting_hand = 'Right-hand bat', count(Country_Name))"}
{"sample_id": 1900, "db_id": "soccer_2016", "final": {"question": "What percentage of players have Legbreak skill?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Bowling_skill = ' Legbreak' THEN 1 ELSE 0 END) AS REAL) * 100 / TOTAL(T1.Player_Id) FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id", "source_tables": ["player", "bowling_style"]}, "evidence": "Legbreak skill refers to Bowling_skill = 'Legbreak' ; percentage = divide(sum(Player_Id) when Bowling_skill = 'Legbreak', count(Player_Id)) as percentage"}
{"sample_id": 1901, "db_id": "soccer_2016", "final": {"question": "In the matches where the winning margin is less than fifty, how many teams won by wicket?", "sql": "SELECT COUNT(T2.Win_Id) FROM 'Match' AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id WHERE T2.Win_Type = 'wickets' AND T1.Win_Margin < 50", "source_tables": ["match", "win_by"]}, "evidence": "winning margin is less than fifty refers to Win_Margin < 50; won by wicket refers to Win_Type = 'wickets'"}
{"sample_id": 1902, "db_id": "soccer_2016", "final": {"question": "In how many venues did team 2 win the toss and lose the match?", "sql": "SELECT SUM(CASE WHEN T1.Team_2 = T1.Match_Winner THEN 1 ELSE 0 END) FROM 'Match' AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T1.Team_1 = T1.Toss_Winner", "source_tables": ["venue", "match"]}, "evidence": "team 2 win the toss refers to Toss_Winner = Team_2 ; lose the match refers to Match_Winner = Team_1"}
{"sample_id": 1903, "db_id": "soccer_2016", "final": {"question": "Which player became the man of the series in the year 2012? Give the name and country of this player.", "sql": "SELECT T2.Player_Name, T3.Country_Name FROM Season AS T1 INNER JOIN Player AS T2 ON T1.Man_of_the_Series = T2.Player_Id INNER JOIN Country AS T3 ON T2.Country_Name = T3.Country_Id WHERE T1.Season_Year = 2012", "source_tables": ["season", "country", "player"]}, "evidence": "year 2012 refers to Season_Year = 2012; name of player refers to Player_Name.; country of this player refers to Country_Name"}
{"sample_id": 1904, "db_id": "soccer_2016", "final": {"question": "Give the name of the venue where the most number of matches are held.", "sql": "SELECT T2.Venue_Name FROM 'Match' AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id GROUP BY T2.Venue_Name ORDER BY COUNT(T2.Venue_Id) DESC LIMIT 1", "source_tables": ["venue", "match"]}, "evidence": "name of the venue refers to Venue_Name; most number of matches refers to max(count(Venue_Id))"}
{"sample_id": 1905, "db_id": "soccer_2016", "final": {"question": "Which city hosted the least number of no-result matches?", "sql": "SELECT T4.City_Name FROM 'Match' AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id INNER JOIN Venue AS T3 ON T1.Venue_Id = T3.Venue_Id INNER JOIN City AS T4 ON T3.City_Id = T4.City_Id WHERE T2.Win_Type = 'NO Result' GROUP BY T4.City_Id ORDER BY COUNT(T2.Win_Type) ASC LIMIT 1", "source_tables": ["city", "venue", "match", "win_by"]}, "evidence": "city refers to City_Name; no-result matches refers to Win_type = 'NoResult'; least number refers to min(count(Win_type = 'NoResult'))"}
{"sample_id": 1906, "db_id": "soccer_2016", "final": {"question": "Write the name of the player who was the man of the series more than one time.", "sql": "SELECT T2.Player_Name FROM Season AS T1 INNER JOIN Player AS T2 ON T1.Man_of_the_Series = T2.Player_Id WHERE T1.Man_of_the_Series > 1", "source_tables": ["season", "player"]}, "evidence": "name of the player refers to Player_Name; man of the series more than one time refers to count(Man_of_the_Series) > 1"}
{"sample_id": 1907, "db_id": "soccer_2016", "final": {"question": "List the name and country of the players who got more than average catches in ascending order of the number of catches.", "sql": "SELECT T1.Player_Name, T4.Country_Name FROM Player AS T1 INNER JOIN Wicket_Taken AS T2 ON T1.Player_Id = T2.Fielders INNER JOIN Out_Type AS T3 ON T2.Kind_Out = T3.Out_Id INNER JOIN Country AS T4 ON T1.Country_Name = T4.Country_Id GROUP BY T1.Player_Name ORDER BY COUNT(T3.Out_Name) ASC", "source_tables": ["wicket_taken", "player", "country", "out_type"]}, "evidence": "name and country of the players refers to Player_Name and Country_Name; catches refers to Out_name = 'caught'; average catches refers to divide(count(Player_ID) when Out_name = 'caught', sum(Player_ID))"}
{"sample_id": 1908, "db_id": "soccer_2016", "final": {"question": "Of the matches that were won by runs by team 1, what percentage have team 1 won the toss and decided to field?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.Team_1 = T1.Match_Winner = T1.Toss_Winner THEN 1 ELSE 0 END) AS REAL) * 100 / TOTAL(T1.Team_1) FROM 'Match' AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id INNER JOIN Toss_Decision AS T3 ON T1.Toss_Decide = T3.Toss_Id WHERE T3.Toss_Name = 'field' AND T2.Win_Type = 'runs'", "source_tables": ["toss_decision", "match", "win_by"]}, "evidence": "won by runs refers to Win_Type = 'runs'; won the toss and decided to field refers to Toss_Winner and Toss_Name = 'field'; percentage = divide(count(Team_1) when Match_Winner = Team_1 and Toss_Winner = Team_1, count(Team_1)) as percentage"}
{"sample_id": 1909, "db_id": "soccer_2016", "final": {"question": "What is the difference in the average number of players out by lbw and runout in the matches?", "sql": "SELECT AVG(T1.Player_Out) FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T1.Kind_Out = T2.Out_Id WHERE T2.Out_Name = 'lbw'", "source_tables": ["wicket_taken", "out_type"]}, "evidence": "out by lbw refers to Out_Id = 4; runout refers to Out_Id = 3; average out by lbw refers to\u00a0 avg(Player_Out when Out_Id = 4); average out by runout refers to\u00a0 avg(Player_Out when Out_Id = 3)"}
{"sample_id": 1910, "db_id": "soccer_2016", "final": {"question": "Identify by their ID all the overs in which the player with ID 7 was on strike.", "sql": "SELECT DISTINCT Over_Id FROM Ball_by_Ball WHERE Striker = 7", "source_tables": ["ball_by_ball"]}, "evidence": "Identify by their ID all the overs refers to Over_Id; player with ID 7 was on strike refers to Striker = 7"}
{"sample_id": 1911, "db_id": "soccer_2016", "final": {"question": "How many first teams chose to bat after winning the toss?", "sql": "SELECT COUNT(Team_1) FROM 'Match' WHERE Team_1 = Toss_Winner AND Toss_Decide = 2", "source_tables": ["match"]}, "evidence": "first teams refers to Team_1; chose to bat after winning the toss refers to Toss_Winner and Toss_Decide = 2"}
{"sample_id": 1912, "db_id": "soccer_2016", "final": {"question": "How many games were played in March 2010?", "sql": "SELECT SUM(CASE WHEN Match_Date LIKE '2010-03%' THEN 1 ELSE 0 END) FROM 'Match'", "source_tables": ["match"]}, "evidence": "were played in March 2010 refers to Match_Date = '2010-03%'"}
{"sample_id": 1913, "db_id": "soccer_2016", "final": {"question": "How many players are older than Gurkeerat Singh player?", "sql": "SELECT SUM(CASE WHEN DOB < '1990-06-29' THEN 1 ELSE 0 END) FROM Player WHERE Player_Name != 'Gurkeerat Singh'", "source_tables": ["player"]}, "evidence": "older than Gurkeerat Singh player refers to DOB ! = 'Gurkeerat Singh' and DOB < '1990-06-29'"}
{"sample_id": 1914, "db_id": "soccer_2016", "final": {"question": "How many times has SR Watson been named 'Man of the Match'?", "sql": "SELECT SUM(CASE WHEN T2.Player_Name = 'SR Watson' THEN 1 ELSE 0 END) FROM 'Match' AS T1 INNER JOIN Player AS T2 ON T1.Man_of_the_Match = T2.Player_Id", "source_tables": ["player", "match"]}, "evidence": ""}
{"sample_id": 1915, "db_id": "soccer_2016", "final": {"question": "Indicate the name of the most versatile players of the Delhi Daredevils.", "sql": "SELECT T3.Player_Name FROM Player_Match AS T1 INNER JOIN Team AS T2 ON T1.Team_Id = T2.Team_Id INNER JOIN Player AS T3 ON T1.Player_Id = T3.Player_Id WHERE T2.Team_Name = 'Delhi Daredevils' GROUP BY T3.Player_Name ORDER BY COUNT(T1.Role_Id) DESC LIMIT 1", "source_tables": ["player", "player_match", "team"]}, "evidence": "if a player has multiple roles in a match, it means this player is versatile; name refers to Player_Name; most versatile player refers to MAX(COUNT(Role_id)); Delhi Daredevils refers to Team_Name = 'Delhi Daredevils'"}
{"sample_id": 1916, "db_id": "soccer_2016", "final": {"question": "What is the name of the player who has been chosen the most times for 'Man of the Series'?", "sql": "SELECT T3.Player_Name FROM Season AS T1 INNER JOIN Match AS T2 ON T1.Man_of_the_Series = T2.Man_of_the_Match INNER JOIN Player AS T3 ON T2.Man_of_the_Match = T3.Player_Id GROUP BY T3.Player_Name ORDER BY COUNT(T1.Man_of_the_Series) DESC LIMIT 1", "source_tables": ["season", "player", "match"]}, "evidence": "name of the player refers to Player_Name; most times for 'Man of the Series' refers to max(count(Man_of_the_Match))"}
{"sample_id": 1917, "db_id": "soccer_2016", "final": {"question": "In what year did SP Narine win the Orange Cap?", "sql": "SELECT T4.Season_Year, T4.Orange_Cap FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id INNER JOIN Season AS T4 ON T3.Season_Id = T4.Season_Id WHERE T1.Player_Name = 'SP Narine' GROUP BY T4.Season_Year, T4.Orange_Cap", "source_tables": ["season", "player", "player_match", "match"]}, "evidence": "year refers to Season_Year"}
{"sample_id": 1918, "db_id": "soccer_2016", "final": {"question": "Which teams have had a player awarded the Purple Cap and another with the Orange Cap in the same season?", "sql": "SELECT T5.Team_Name, T1.Orange_Cap, T1.Purple_Cap FROM Season AS T1 INNER JOIN Match AS T2 ON T1.Season_Id = T2.Season_Id INNER JOIN Player_Match AS T3 ON T2.Match_Id = T3.Match_Id INNER JOIN Player AS T4 ON T3.Player_Id = T4.Player_Id INNER JOIN Team AS T5 ON T3.Team_Id = T5.Team_Id GROUP BY T5.Team_Name, T1.Orange_Cap, T1.Purple_Cap", "source_tables": ["season", "player_match", "player", "team", "match"]}, "evidence": ""}
{"sample_id": 1919, "db_id": "soccer_2016", "final": {"question": "List all Zimbabwean players.", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_Id WHERE T2.Country_Name = 'Zimbabwea'", "source_tables": ["country", "player"]}, "evidence": "Zimbabwean refers to Country_Name = 'Zimbabwea'; players refers to Player_Name"}
{"sample_id": 1920, "db_id": "soccer_2016", "final": {"question": "How many players bat with their left hands?", "sql": "SELECT SUM(CASE WHEN T2.Batting_hand = 'Left-hand bat' THEN 1 ELSE 0 END) FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id", "source_tables": ["player", "batting_style"]}, "evidence": "bat with their left hands refers to Batting_hand = 'Left-hand bat'"}
{"sample_id": 1921, "db_id": "soccer_2016", "final": {"question": "How many games were not won by runs?", "sql": "SELECT SUM(CASE WHEN T2.Win_Type != 'runs' THEN 1 ELSE 0 END) FROM 'Match' AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id", "source_tables": ["match", "win_by"]}, "evidence": "not won by runs refers to Win_Type ! = 'runs'"}
{"sample_id": 1922, "db_id": "soccer_2016", "final": {"question": "List the name of all New Zealand umpires.", "sql": "SELECT T1.Umpire_Name FROM Umpire AS T1 INNER JOIN Country AS T2 ON T1.Umpire_Country = T2.Country_Id WHERE T2.Country_Name = 'New Zealand'", "source_tables": ["country", "umpire"]}, "evidence": "New Zealand umpires refers to Country_Name = 'New Zealand'; name of umpires refers to Umpire_Name"}
{"sample_id": 1923, "db_id": "soccer_2016", "final": {"question": "In which country do most players have the 'slow left-arm chinaman' bowling style?", "sql": "SELECT T3.Country_Name FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T1.Bowling_Id = T2.Bowling_skill INNER JOIN Country AS T3 ON T2.Country_Name = T3.Country_Id WHERE T1.Bowling_skill = 'Slow left-arm chinaman'", "source_tables": ["country", "player", "bowling_style"]}, "evidence": "'slow left-arm chinaman' bowling style refers to Bowling_skill = 'Slow left-arm chinaman'; most players\u00a0 refers to max(count(Country_Id))"}
{"sample_id": 1924, "db_id": "soccer_2016", "final": {"question": "In which venue did Kochi Tuskers Kerala play most of their matches?", "sql": "SELECT T1.Venue_Name FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.Venue_Id = T2.Venue_Id INNER JOIN Team AS T3 ON T2.Team_1 = T3.Team_Id WHERE T3.Team_Name = 'Kochi Tuskers Kerala' GROUP BY T1.Venue_Name", "source_tables": ["venue", "match", "team"]}, "evidence": "Kochi Tuskers Kerala refers to Team_Name = 'Kochi Tuskers Kerala'; most of their matches refers to max(Venue_Id)"}
{"sample_id": 1925, "db_id": "soccer_2016", "final": {"question": "In how many games in which the batting team was the Delhi Daredevils were no runs scored?", "sql": "SELECT COUNT(T1.Runs_Scored) FROM Batsman_Scored AS T1 INNER JOIN Ball_by_Ball AS T2 ON T1.Match_Id = T2.Match_Id INNER JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id INNER JOIN Team AS T4 ON T3.Team_1 = T4.Team_Id WHERE T2.Team_Batting = 1 OR T2.Team_Batting = 2 AND T4.Team_Name = 'Delhi Daredevils'", "source_tables": ["batsman_scored", "ball_by_ball", "match", "team"]}, "evidence": "batting team was the Delhi Daredevils refers to Team_Name = 'Delhi Daredevils' and Team_1 = Team_Id where Team_Batting = 1 or Team_2 = Team_Id where Team_Batting = 2; no runs scored refers to Runs_Scored = 0"}
{"sample_id": 1926, "db_id": "soccer_2016", "final": {"question": "In what percentage of games played at the Dr DY Patil Sports Academy venue did the winning team win by a margin of less than 10?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.Win_Margin < 10 THEN 1 ELSE 0 END) AS REAL) * 100 / TOTAL(T1.Venue_Id) FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T1.Venue_Name = 'Dr DY Patil Sports Academy'", "source_tables": ["venue", "match"]}, "evidence": "Dr DY Patil Sports Academy venue refers to Venue_Name = 'Dr DY Patil Sports Academy'; win by a margin of less than 10 refers to Win_Margin < 10; percentage = divide(count(Venue_Id) when Win_Margin < 10, sum(Venue_Id)) as percentage"}
{"sample_id": 1927, "db_id": "soccer_2016", "final": {"question": "What is the average number of extra runs made as noballs?", "sql": "SELECT AVG(T1.Extra_Runs) FROM Extra_Runs AS T1 INNER JOIN Extra_Type AS T2 ON T1.Extra_Type_Id = T2.Extra_Id WHERE T2.Extra_Name = 'noballs'", "source_tables": ["extra_type", "extra_runs"]}, "evidence": "noballs refers to Extra_Name = 'noballs' ; average number = divide(sum(Extra_Runs), count(Extra_Runs))"}
{"sample_id": 1928, "db_id": "soccer_2016", "final": {"question": "List the player's ID of the top five players, by descending order, in terms of bowling skill.", "sql": "SELECT Player_Id FROM Player ORDER BY Bowling_skill DESC LIMIT 5", "source_tables": ["player"]}, "evidence": "player's ID refers to Player_Id"}
{"sample_id": 1929, "db_id": "soccer_2016", "final": {"question": "How many players were born before 10/16/1975, and have a bowling skill of less than 3?", "sql": "SELECT COUNT(*) FROM Player WHERE DOB < '1975-10-16' AND Bowling_skill < 3", "source_tables": ["player"]}, "evidence": "born before 10/16/1975 refers to DOB < 1975-10-16; bowling skill of less than 3 refers to Bowling_skill < 3"}
{"sample_id": 1930, "db_id": "soccer_2016", "final": {"question": "What is the name of the youngest player?", "sql": "SELECT Player_Name FROM Player ORDER BY DOB DESC LIMIT 1", "source_tables": ["player"]}, "evidence": "name refers to Player_Name; youngest player refers to max(DOB)"}
{"sample_id": 1931, "db_id": "soccer_2016", "final": {"question": "Tally the player IDs of \"Man of the Series\" awardees for the seasons from 2011 to 2015.", "sql": "SELECT Man_of_the_Series FROM Season WHERE 2011 < Season_Year < 2015", "source_tables": ["season"]}, "evidence": "seasons from 2011 to 2015 refers to 2011 < Season_Year < 2015"}
{"sample_id": 1932, "db_id": "soccer_2016", "final": {"question": "What is the total number of runs scored by the batsmen during the 2nd inning of the match ID 335988?", "sql": "SELECT SUM(Runs_Scored) FROM Batsman_Scored WHERE Match_Id = 335988 AND Innings_No = 2", "source_tables": ["batsman_scored"]}, "evidence": "number of runs refers to Runs_Scored; 2nd inning refers to Innings_No = 2"}
{"sample_id": 1933, "db_id": "soccer_2016", "final": {"question": "Between match nos. 335989 and 337000, how many times did a batsman score more than 3 runs during over no. 1, ball no. 1, and inning no. 1 of the matches?", "sql": "SELECT SUM(CASE WHEN Runs_Scored > 3 THEN 1 ELSE 0 END) FROM Batsman_Scored WHERE 335989 < Match_Id < 337000 AND Innings_No = 1 AND Over_Id = 1 AND Ball_Id = 1", "source_tables": ["batsman_scored"]}, "evidence": "Between match no. 335989 and 337000 refers to 335989 < Match_Id < 337000; batsman score more than 3 runs during over no. 1, ball no. 1, and inning no. 1 of the matches refers to Runs_Scored > 3 and\u00a0 Over_Id = 1 and Ball_Id = 1 and Innings_No = 1"}
{"sample_id": 1934, "db_id": "soccer_2016", "final": {"question": "Give me the match ID and date of the matches that were held in Kingsmead for three consecutive days.", "sql": "SELECT T1.Match_Id, T1.Match_Date FROM 'Match' AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T2.Venue_Name = 'Kingsmead'", "source_tables": ["venue", "match"]}, "evidence": "date of the matches refers to Match_Date; held in Kingsmead refers to Venue_Name = 'Kingsmead'"}
{"sample_id": 1935, "db_id": "soccer_2016", "final": {"question": "How many times did the matches were held in MA Chidambaram Stadium from 5/9/2009 to 8/8/2011?", "sql": "SELECT SUM(CASE WHEN Venue_Name = 'MA Chidambaram Stadium' THEN 1 ELSE 0 END) FROM 'Match' AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE Match_Date BETWEEN '2009-05-09' AND '2011-08-08'", "source_tables": ["venue", "match"]}, "evidence": "MA Chidambaram Stadium refers to Venue_Name = 'MA Chidambaram Stadium' ; from 5/9/2009 to 8/8/2011 refers to Match_Date between '2009-05-09' and '2011-08-08'"}
{"sample_id": 1936, "db_id": "soccer_2016", "final": {"question": "Where was the ID 336005 match held? Please give me the venue and the city.", "sql": "SELECT T2.Venue_Name, T3.City_Name FROM 'Match' AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id INNER JOIN City AS T3 ON T2.City_Id = T3.City_Id WHERE T1.Match_Id = '336005'", "source_tables": ["city", "venue", "match"]}, "evidence": "ID 336005 match refers to Match_Id = '336005'; venue refers to Venue_Name; city refers to City_Name"}
{"sample_id": 1937, "db_id": "soccer_2016", "final": {"question": "Which team wins the toss during the match ID 336011, and can you tell me whether they decided to bat or field?", "sql": "SELECT T2.Toss_Name, T1.Toss_Decide, T1.Toss_Winner FROM 'Match' AS T1 INNER JOIN Toss_Decision AS T2 ON T1.Toss_Decide = T2.Toss_Id WHERE T1.Match_Id = '336011'", "source_tables": ["toss_decision", "match"]}, "evidence": "wins the toss refers to Toss_Winner; whether they decided to bat or field refers to Toss_Name"}
{"sample_id": 1938, "db_id": "soccer_2016", "final": {"question": "Among the South African players, how many were born before 4/11/1980?", "sql": "SELECT SUM(CASE WHEN T1.DOB < '1980-4-11' THEN 1 ELSE 0 END) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_Id WHERE T2.Country_Name = 'South Africa'", "source_tables": ["country", "player"]}, "evidence": "South African players refers to Country_Name = 'South Africa'; born before 4/11/1980 refers to DOB < '1980-4-11'"}
{"sample_id": 1939, "db_id": "soccer_2016", "final": {"question": "Write down the name of players whose bowling skill is Legbreak.", "sql": "SELECT T2.Player_Name FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T1.Bowling_Id = T2.Bowling_skill WHERE T1.Bowling_skill = 'Legbreak'", "source_tables": ["player", "bowling_style"]}, "evidence": "name of players refers to Player_Name"}
{"sample_id": 1940, "db_id": "soccer_2016", "final": {"question": "When and for what role did the youngest player appear in his first match?", "sql": "SELECT T1.Match_Date, T4.Role_Desc FROM 'Match' AS T1 INNER JOIN Player_Match AS T2 ON T1.Match_Id = T2.Match_Id INNER JOIN Player AS T3 ON T2.Player_Id = T3.Player_Id INNER JOIN Rolee AS T4 ON T2.Role_Id = T4.Role_Id ORDER BY T3.DOB DESC LIMIT 1", "source_tables": ["player", "player_match", "match", "rolee"]}, "evidence": "When refers to Match_Date; youngest player refers to max(DOB); first match refers to min(Match_Date)"}
{"sample_id": 2045, "db_id": "music_tracker", "final": {"question": "What is the release title of the single that was released by Ron Hunt in 1979 that was downloaded 239 times?", "sql": "SELECT groupName FROM torrents WHERE artist LIKE 'ron hunt & ronnie g & the sm crew' AND groupYear = 1979 AND releaseType LIKE 'single' AND totalSnatched = 239", "source_tables": ["torrents"]}, "evidence": "release title refers to groupName; Ron Hunt is an artist; groupYear = 1979; releaseType = 'single'; downloaded 239 times refer to totalSnatched = 239;"}
{"sample_id": 2046, "db_id": "music_tracker", "final": {"question": "How many times was the album released by blowfly in 1980 downloaded?", "sql": "SELECT totalSnatched FROM torrents WHERE artist LIKE 'blowfly' AND groupYear = 1980", "source_tables": ["torrents"]}, "evidence": "blowfly is an artist; groupYear = 1980; album refers to releaseType; downloaded refers to totalSnatched;"}
{"sample_id": 2047, "db_id": "music_tracker", "final": {"question": "What is the tag of the album with the highest amount of downloads?", "sql": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'album' ORDER BY T1.totalSnatched DESC LIMIT 1", "source_tables": ["torrents", "tags"]}, "evidence": "album refers to releaseType; the highest amount of downloads refers to MAX(totalSnatched);"}
{"sample_id": 2048, "db_id": "music_tracker", "final": {"question": "What are the top 5 tags with the highest amount of downloads?", "sql": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'album' ORDER BY T1.totalSnatched DESC LIMIT 5", "source_tables": ["torrents", "tags"]}, "evidence": "the highest amount of downloads refers to MAX(totalSnatched);"}
{"sample_id": 2049, "db_id": "music_tracker", "final": {"question": "What is the release title of the single under the \"funk\" tag that was released the oldest?", "sql": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag LIKE 'funk' AND T1.releaseType = 'single' ORDER BY T1.groupYear LIMIT 1", "source_tables": ["torrents", "tags"]}, "evidence": "release title of single refers to groupName where releaseType = 'single'; the oldest means coming before all others in time and refers to MIN(groupYear);"}
{"sample_id": 2050, "db_id": "music_tracker", "final": {"question": "Name all the release titles of the \"ep's\" under the alternative tag.", "sql": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag LIKE 'alternative' AND T1.releaseType = 'ep'", "source_tables": ["torrents", "tags"]}, "evidence": "release titles of the \"ep's\" refer to groupName where releaseType = 'ep';"}
{"sample_id": 2051, "db_id": "music_tracker", "final": {"question": "What are the tags of the top 5 least downloaded live albums?", "sql": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'album' ORDER BY T1.totalSnatched LIMIT 5", "source_tables": ["torrents", "tags"]}, "evidence": "least downloaded album refers to MIN(totalSnatched where releaseType = 'album');"}
{"sample_id": 2052, "db_id": "music_tracker", "final": {"question": "What is the tag and the artist of the most downloaded single?", "sql": "SELECT T2.tag, T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'single' ORDER BY T1.totalSnatched DESC LIMIT 1", "source_tables": ["torrents", "tags"]}, "evidence": "the most downloaded single refers to MAX(totalSnatched where releaseType = 'single');"}
{"sample_id": 2053, "db_id": "music_tracker", "final": {"question": "How many releases are tagged \"1980s\"?", "sql": "SELECT COUNT(id) FROM tags WHERE tag LIKE '1980s'", "source_tables": ["tags"]}, "evidence": "tag = '1980s';"}
{"sample_id": 2054, "db_id": "music_tracker", "final": {"question": "How many times has the release \"city funk\" been downloaded?", "sql": "SELECT totalSnatched FROM torrents WHERE groupName LIKE 'city funk'", "source_tables": ["torrents"]}, "evidence": "groupName = 'city funk'; downloaded refers to totalSnatched;"}
{"sample_id": 2055, "db_id": "music_tracker", "final": {"question": "Please list the releases that have been downloaded for more than 20000 times.", "sql": "SELECT groupName FROM torrents WHERE totalSnatched > 20000", "source_tables": ["torrents"]}, "evidence": "releases refer to groupName; downloaded for more than 20000 times refers to totalSnatched > 20000;"}
{"sample_id": 2056, "db_id": "music_tracker", "final": {"question": "What are the tags of the release \"sugarhill gang\"?", "sql": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupName = 'sugarhill gang'", "source_tables": ["torrents", "tags"]}, "evidence": "release \"sugarhill gang\" refers to groupName = 'sugarhill gang';"}
{"sample_id": 2057, "db_id": "music_tracker", "final": {"question": "How many tags does the release \"city funk\" have\uff1f", "sql": "SELECT COUNT(T2.tag) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupName = 'city funk'", "source_tables": ["torrents", "tags"]}, "evidence": "release \"city funk\" refers to groupName = 'city funk';"}
{"sample_id": 2058, "db_id": "music_tracker", "final": {"question": "Please list the titles of all the releases with the tag \"1980s\".", "sql": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = '1980s'", "source_tables": ["torrents", "tags"]}, "evidence": "titles refer to groupName;"}
{"sample_id": 2059, "db_id": "music_tracker", "final": {"question": "Among the releases with the tag \"1980s\", which one of them is the most downloaded? Please give its title.", "sql": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = '1980s' ORDER BY T1.totalSnatched DESC LIMIT 1", "source_tables": ["torrents", "tags"]}, "evidence": "title refers to groupName; the most downloaded refers to MAX(totalSnatched);"}
{"sample_id": 2060, "db_id": "music_tracker", "final": {"question": "How many releases by the artist michael jackson are tagged \"pop\"?", "sql": "SELECT COUNT(T1.groupName) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'pop' AND T1.artist = 'michael jackson'", "source_tables": ["torrents", "tags"]}, "evidence": "tag = 'pop';"}
{"sample_id": 2061, "db_id": "music_tracker", "final": {"question": "Among the releases that were released in 2000, how many of them were released as an album and tagged \"pop\"?", "sql": "SELECT COUNT(T1.groupName) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'pop' AND T1.releaseType = 'album' AND T1.groupYear = 2000", "source_tables": ["torrents", "tags"]}, "evidence": "groupYear = 2000; album refers to releaseType;"}
{"sample_id": 2062, "db_id": "music_tracker", "final": {"question": "What are the average download times for the a release tagged \"1980s\"?", "sql": "SELECT CAST(SUM(T1.totalSnatched) AS REAL) / COUNT(T2.tag) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = '1980s'", "source_tables": ["torrents", "tags"]}, "evidence": "AVG(totalSnatched where tag = '1980s');"}
{"sample_id": 2063, "db_id": "music_tracker", "final": {"question": "Name the title of the top three releases with the highest number of downloads.", "sql": "SELECT groupName FROM torrents ORDER BY totalSnatched DESC LIMIT 3", "source_tables": ["torrents"]}, "evidence": "title refers to groupName; the highest number of downloads refers to MAX(totalSnatched);"}
{"sample_id": 2064, "db_id": "music_tracker", "final": {"question": "Provide the name of the artist who released his or her Single-Table in 2012 with the highest number of downloads. Name the Single-Table title as well.", "sql": "SELECT artist, groupName FROM torrents WHERE groupYear = 2012 AND releaseType LIKE 'Single' ORDER BY totalSnatched DESC LIMIT 1", "source_tables": ["torrents"]}, "evidence": "title refers to groupName; the highest number of downloads refers to MAX(totalSnatched where groupYear = 2012 and releaseType = 'single');"}
{"sample_id": 2065, "db_id": "music_tracker", "final": {"question": "How many albums and Single-Tables were released by the artist named '50 cent' between 2010 and 2015?", "sql": "SELECT COUNT(id), ( SELECT COUNT(id) FROM torrents WHERE groupYear BETWEEN 2010 AND 2015 AND artist LIKE '50 cent' AND releaseType LIKE 'album' ) FROM torrents WHERE groupYear BETWEEN 2010 AND 2015 AND artist LIKE '50 cent' AND releaseType LIKE 'Single'", "source_tables": ["torrents"]}, "evidence": "albums refer to releaseType = 'album'; releaseType = 'single'; between 2010 and 2015 refers to groupYear between 2010 and 2015;"}
{"sample_id": 2066, "db_id": "music_tracker", "final": {"question": "An American rapper '2Pac' released his first solo album in 1991, how many years have passed until his next album was released?", "sql": "SELECT ( SELECT groupYear FROM torrents WHERE artist LIKE '2Pac' AND releaseType LIKE 'album' ORDER BY groupYear LIMIT 1, 1 ) - groupYear FROM torrents WHERE artist LIKE '2Pac' AND releaseType LIKE 'album' AND groupYear = 1991", "source_tables": ["torrents"]}, "evidence": "2Pac is an artist; album refers to releaseType; groupYear = 1991; SUBTRACT(groupYear = 1991, groupYear where releaseType = 'album' LIMIT 1 OFFSET 1);"}
{"sample_id": 2067, "db_id": "music_tracker", "final": {"question": "Find the average number of downloads for Single-Tables released by '2Pac' between 2001 and 2013.", "sql": "SELECT AVG(totalSnatched) FROM torrents WHERE artist LIKE '2Pac' AND releaseType LIKE 'Single' AND groupYear BETWEEN 2001 AND 2013", "source_tables": ["torrents"]}, "evidence": "2Pac is an artist; releaseType = 'single'; between 2001 and 2013 refers to groupYear between 2001 and 2013; average number of downloads = AVG(totalSnatched);"}
{"sample_id": 2068, "db_id": "music_tracker", "final": {"question": "Provide the title, release year and the tag associated with the live album that has the highest number of downloads?", "sql": "SELECT T1.groupName, T1.groupYear, T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'live album' ORDER BY T1.totalSnatched DESC LIMIT 1", "source_tables": ["torrents", "tags"]}, "evidence": "release year refers to groupYear; title of live album refers to groupName where releaseType = 'live album'; the highest number of downloads refers to MAX(totalSnatched);"}
{"sample_id": 2069, "db_id": "music_tracker", "final": {"question": "Provide the name of artists who released at least two bootlegs in 2016.", "sql": "SELECT artist FROM torrents WHERE groupYear = 2016 AND releaseType LIKE 'bootleg' GROUP BY artist HAVING COUNT(releaseType) > 2", "source_tables": ["torrents"]}, "evidence": "at least two bootlegs refer to COUNT(releaseType = 'bootleg')\u2265 2; groupYear = 2016;"}
{"sample_id": 2070, "db_id": "music_tracker", "final": {"question": "Which artist released singles between 1980 to 1982?", "sql": "SELECT artist FROM torrents WHERE groupYear BETWEEN 1980 AND 1982 AND releaseType LIKE 'single'", "source_tables": ["torrents"]}, "evidence": "releaseType = 'single'; between 1980 to 1982 refers to groupYear between 1980 and 1982;"}
{"sample_id": 2071, "db_id": "music_tracker", "final": {"question": "Indicates groups with id from 10 to 20 with singles downloaded at least 20.", "sql": "SELECT groupName FROM torrents WHERE totalSnatched >= 20 AND releaseType LIKE 'single' AND id BETWEEN 10 AND 20", "source_tables": ["torrents"]}, "evidence": "releaseType = 'single'; downloaded at least 20 refers to totalSnatched \u2265 20; id from 10 to 20 refer to id between 10 and 20; groups refer to groupName;"}
{"sample_id": 2090, "db_id": "world_development_indicators", "final": {"question": "Among the countries in the group of Heavily Indebted Poor Countries, how many of them are under the lending category of the International Development Associations?", "sql": "SELECT COUNT(CountryCode) FROM Country WHERE LendingCategory = 'IDA' AND OtherGroups = 'HIPC'", "source_tables": ["country"]}, "evidence": "group of Heavily Indebted Poor Countries is OtherGroups = 'HIPC'; International Development Associations refers to lendingcategory = 'IDA'"}
{"sample_id": 2091, "db_id": "world_development_indicators", "final": {"question": "Please list the countries under the lending category of the International Development Associations and have a external debt reporting finished by estimation.", "sql": "SELECT ShortName, ExternalDebtReportingStatus FROM Country WHERE LendingCategory = 'IDA'", "source_tables": ["country"]}, "evidence": "countries refer to the ShortName; International Development Associations refers to lendingcategory = 'IDA'; have a external debt reporting finished by estimation refers to ExternalDebtReportingStatus = 'Estimate'"}
{"sample_id": 2092, "db_id": "world_development_indicators", "final": {"question": "What's the description of the series code SM.POP.TOTL for Aruba?", "sql": "SELECT T2.Description FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Seriescode = 'SM.POP.TOTL'", "source_tables": ["countrynotes", "country"]}, "evidence": "Aruba is the name of the country where ShortName = 'Aruba'"}
{"sample_id": 2093, "db_id": "world_development_indicators", "final": {"question": "Please list the countries in Latin America & Caribbean with a note on the series code SM.POP.TOTL.", "sql": "SELECT T1.SHORTNAME, T2.Description FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.Region = 'Latin America & Caribbean' AND T2.Seriescode = 'SM.POP.TOTL'", "source_tables": ["countrynotes", "country"]}, "evidence": "Countries refer to the ShortName; Latin America & Caribbean is the name of the region"}
{"sample_id": 2094, "db_id": "world_development_indicators", "final": {"question": "Among the countries with note on the series code SM.POP.TOTL, how many of them are in the low-income group?", "sql": "SELECT COUNT(T1.Countrycode) FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Seriescode = 'SM.POP.TOTL' AND T1.IncomeGroup = 'Low income'", "source_tables": ["countrynotes", "country"]}, "evidence": "countries refer to Countrycode; low-income group refers to incomegroup = 'Low income'; with notes refers to description IS NOT NULL; series code SM.POP.TOTL refers to Seriescode = 'SM.POP.TOTL'"}
{"sample_id": 2095, "db_id": "world_development_indicators", "final": {"question": "Please list the descriptions of the series code SM.POP.TOTL for all the countries that are under the lending category of the International Development Associations.", "sql": "SELECT T2.Description FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.LendingCategory = 'IDA' AND T2.Seriescode = 'SM.POP.TOTL'", "source_tables": ["countrynotes", "country"]}, "evidence": "Countries are the Countrycode; International Development Associations refers to lendingcategory = 'IDA'"}
{"sample_id": 2096, "db_id": "world_development_indicators", "final": {"question": "How many low-income countries under the lending category of the International Development Associations have a note on the series code SM.POP.TOTL?", "sql": "SELECT COUNT(T1.Countrycode) FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.LendingCategory = 'IDA' AND T2.Seriescode = 'SM.POP.TOTL' AND IncomeGroup = 'Low income'", "source_tables": ["countrynotes", "country"]}, "evidence": "low-income countries are where the incomegroup = Low income"}
{"sample_id": 2097, "db_id": "world_development_indicators", "final": {"question": "Among the countries in the High income: OECD group whose currency unit is Euro, how many of them have a note on the series code SP.DYN.AMRT.FE?", "sql": "SELECT COUNT(T1.Countrycode) FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.IncomeGroup = 'High income: OECD' AND T1.CurrencyUnit = 'Euro' AND T2.Seriescode = 'SP.DYN.AMRT.FE'", "source_tables": ["countrynotes", "country"]}, "evidence": "countries refer to Countrycode; in the high income refers to incomegroup = 'High'; with notes refers to description IS NOT NULL; series code SP.DYN.AMRT.FE refers to Seriescode = 'SP.DYN.AMRT.FE'"}
{"sample_id": 2098, "db_id": "world_development_indicators", "final": {"question": "What is the long name of the country with the description \"Estimates are derived from data on foreign-born population.\" on the series code SM.POP.TOTL?", "sql": "SELECT T1.LongName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Estimates are derived FROM data on foreign-born population.' AND T2.Seriescode = 'SM.POP.TOTL'", "source_tables": ["countrynotes", "country"]}, "evidence": ""}
{"sample_id": 2099, "db_id": "world_development_indicators", "final": {"question": "What is the description of the footnote on the series code AG.LND.FRST.K2 in 1990 for Aruba?", "sql": "SELECT T2.Description FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Seriescode = 'AG.LND.FRST.K2' AND T2.Year = 'YR1990'", "source_tables": ["country", "footnotes"]}, "evidence": "Year = 1990; Aruba is the name of country where ShortName = 'Aruba'"}
{"sample_id": 2100, "db_id": "world_development_indicators", "final": {"question": "On which years did Aruba got a footnote on the series code AG.LND.FRST.K2?", "sql": "SELECT T2.Year FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Seriescode = 'AG.LND.FRST.K2'", "source_tables": ["country", "footnotes"]}, "evidence": "Aruba is the name of country where ShortName = 'Aruba'"}
{"sample_id": 2101, "db_id": "world_development_indicators", "final": {"question": "Please list the countries that got the footnote \"Data are classified as official aid.\" on the series code DC.DAC.AUSL.CD in 2002.", "sql": "SELECT T1.SHORTNAME FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data are classified as official aid.' AND T2.Seriescode = 'DC.DAC.AUSL.CD' AND T2.Year LIKE '%2002%'", "source_tables": ["country", "footnotes"]}, "evidence": "countries are the Countrycode; footnote refers to Description = 'Data are classified as official aid'"}
{"sample_id": 2102, "db_id": "world_development_indicators", "final": {"question": "How many footnotes did Aruba got on different series code in the year 2002?", "sql": "SELECT COUNT(T2.SeriesCode) FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Year = 'YR2002'", "source_tables": ["country", "footnotes"]}, "evidence": "Aruba is the name of country where ShortName = 'Aruba'"}
{"sample_id": 2103, "db_id": "world_development_indicators", "final": {"question": "For how many consecutive years did Aruba get a footnote on the series code BX.KLT.DINV.CD.WD?", "sql": "SELECT COUNT(T2.Year) FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Seriescode = 'BX.KLT.DINV.CD.WD'", "source_tables": ["country", "footnotes"]}, "evidence": "Aruba is the name of country where ShortName = 'Aruba'"}
{"sample_id": 2104, "db_id": "world_development_indicators", "final": {"question": "What is the average adolescent fertility rate of the country whose Alpha2Code is 1A over the years this indicator was calculated.", "sql": "SELECT AVG(T2.Value) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName LIKE 'adolescent fertility rate%'", "source_tables": ["country", "indicators"]}, "evidence": "the average adolescent fertility rate is DIVIDE(SUM(value), SUM(IndicatorName like 'adolescent fertility rate%'))"}
{"sample_id": 2105, "db_id": "world_development_indicators", "final": {"question": "What are the special notes for the country whose average adolescent fertility rate is the highest?", "sql": "SELECT DISTINCT T1.SpecialNotes FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Value = ( SELECT Value FROM Indicators WHERE IndicatorName LIKE 'Adolescent fertility rate%' ORDER BY Value DESC LIMIT 1 )", "source_tables": ["country", "indicators"]}, "evidence": "the average adolescent fertility rate is DIVIDE(SUM(value), SUM(IndicatorName like 'adolescent fertility rate%')); MAX(average adolescent fertility rate)"}
{"sample_id": 2106, "db_id": "world_development_indicators", "final": {"question": "List the East Asia & Pacific countries which are under the High income: nonOECD group. Please include their alpha code.", "sql": "SELECT CountryCode, Alpha2Code FROM Country WHERE Region = 'East Asia & Pacific' AND IncomeGroup = 'High income: nonOECD'", "source_tables": ["country"]}, "evidence": "the East Asia & Pacific countries are where Region = 'East Asia & Pacific'; High income: nonOECD group is where IncomeGroup = 'High income: nonOECD'"}
{"sample_id": 2107, "db_id": "world_development_indicators", "final": {"question": "In which country's latest trade data and latest water withdrawal data were both updated in the year 2013? Give its long name and Alpha 2 code.", "sql": "SELECT LongName, Alpha2Code FROM Country WHERE LatestTradeData = 2013 AND LatestWaterWithdrawalData = 2013", "source_tables": ["country"]}, "evidence": ""}
{"sample_id": 2108, "db_id": "world_development_indicators", "final": {"question": "What is the average value of Adjusted net enrolment rate, primary, both sexes (%) indicator in Algeria from 1975 to 1980?", "sql": "SELECT CAST(SUM(Value) AS REAL) / COUNT(CountryCode) FROM Indicators WHERE CountryName = 'Algeria' AND Year > 1974 AND Year < 1981 AND IndicatorName = 'Adjusted net enrolment rate, primary, both sexes (%)'", "source_tables": ["indicators"]}, "evidence": "the average value of Adjusted net enrolment rate, primary, both sexes (%) is DIVIDE(SUM(Value), SUM(IndicatorName = 'Adjusted net enrolment rate, primary, both sexes (%)')); Year BETWEEN 1975 AND 1980; Algeria is the name of country where CountryName = 'Algeria'"}
{"sample_id": 2109, "db_id": "world_development_indicators", "final": {"question": "What are the Indicator names and aggregation methods when the topic is Economic Policy & Debt: Balance of payments: Capital & financial account?", "sql": "SELECT IndicatorName, AggregationMethod FROM Series WHERE Topic = 'Economic Policy & Debt: Balance of payments: Capital & financial account'", "source_tables": ["series"]}, "evidence": ""}
{"sample_id": 2110, "db_id": "world_development_indicators", "final": {"question": "List down the series codes in which the topic is about Environment: Emissions and the license type is restricted. Please include their alpha code.", "sql": "SELECT SeriesCode FROM Series WHERE Topic = 'Environment: Emissions' AND LicenseType = 'Restricted'", "source_tables": ["series"]}, "evidence": ""}
{"sample_id": 2111, "db_id": "world_development_indicators", "final": {"question": "In 1970, how many Middle Eastern & North African countries whose value for CO2 emissions from gaseous fuel consumption (kt) indicator is more than 600?", "sql": "SELECT COUNT(T2.CountryCode)  FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Region = 'Middle East & North Africa' AND T1.IndicatorName = 'CO2 emissions FROM gaseous fuel consumption (kt)' AND T1.Year = 1970 AND T1.Value > 600", "source_tables": ["country", "indicators"]}, "evidence": "Year = 1970; Middle East & North Africa is the name of the region where Region = 'Middle East & North Africa'; CO2 emissions from gaseous fuel consumption (kt) is the name of indicator where IndicatorName = 'CO2 emissions from gaseous fuel consumption (kt)'"}
{"sample_id": 2112, "db_id": "world_development_indicators", "final": {"question": "List down the top 3 Latin American & Caribbean countries with the highest average value in \"CO2 emissions (kt)\" indicator since 1965. Give their highest value and in what year.", "sql": "SELECT DISTINCT T1.CountryCode, T1.Year, T1.Value FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Region = 'Latin America & Caribbean' AND T1.IndicatorName = 'CO2 emissions (kt)' AND T1.Year > 1965 AND T1.Year < 1980 ORDER BY T1.Value DESC LIMIT 3", "source_tables": ["country", "indicators"]}, "evidence": "Latin American & Caribbean countries is the name of the region where Region in ('Latin America' , 'Caribbean'); CO2 emissions from gaseous fuel consumption (kt) is the name of indicator where IndicatorName = 'CO2 emissions from gaseous fuel consumption (kt)'; average value in CO2 emissions (kt) = DIVIDE(SUM(Value), SUM(IndicatorName = 'CO2 emissions from gaseous fuel consumption (kt)')); Year > 1965"}
{"sample_id": 2113, "db_id": "world_development_indicators", "final": {"question": "What is the series note description of the series \"SP.DYN.TO65.MA.ZS\" which covers the topic \"Health: Mortality\" in 1967?", "sql": "SELECT T2.Description FROM Series AS T1 INNER JOIN SeriesNotes AS T2 ON T1.SeriesCode = T2.Seriescode WHERE T1.SeriesCode = 'SP.DYN.TO65.MA.ZS' AND T1.Topic = 'Health: Mortality' AND T2.Year = 'YR1967'", "source_tables": ["series", "seriesnotes"]}, "evidence": "in 1967 refers to Year = 'YR1967'"}
{"sample_id": 2114, "db_id": "world_development_indicators", "final": {"question": "Please write down the footnote descriptions of Albania in 1981.", "sql": "SELECT DISTINCT T1.Description FROM FootNotes AS T1 INNER JOIN Country AS T2 ON T1.Countrycode = T2.CountryCode WHERE T1.Year = 'YR1981' AND T2.ShortName = 'Albania'", "source_tables": ["country", "footnotes"]}, "evidence": "Albania is the name of country where Country = 'Albania'"}
{"sample_id": 2115, "db_id": "world_development_indicators", "final": {"question": "Enumerate the footnote narratives of The Bahamas under the series code SH.DTH.IMRT in the year 1984.", "sql": "SELECT DISTINCT T1.Description FROM FootNotes AS T1 INNER JOIN Country AS T2 ON T1.Countrycode = T2.CountryCode WHERE T1.Year = 'YR1984' AND T2.ShortName = 'The Bahamas' AND T1.Seriescode = 'SH.DTH.IMRT'", "source_tables": ["country", "footnotes"]}, "evidence": "narratives is Description; The Bahamas is the name of the country where Country = 'The Bahamas'"}
{"sample_id": 2116, "db_id": "world_development_indicators", "final": {"question": "What is the short name of the country in which the \"Net bilateral aid flows from DAC donors, Sweden (current US$)\" indicator hit the 570,000 value in 1970?", "sql": "SELECT T2.ShortName FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName = 'Net bilateral aid flows FROM DAC donors, Sweden (current US$)' AND T1.Year = 1970 AND T1.Value = 570000", "source_tables": ["country", "indicators"]}, "evidence": "Net bilateral aid flows from DAC donors, Sweden (current US$) is the name of indicator where IndicatorName = 'Net bilateral aid flows from DAC donors, Sweden (current US$)'; Year = 1970; Value > 570,000"}
{"sample_id": 2117, "db_id": "world_development_indicators", "final": {"question": "List down the World Bank code of the countries whose country note has described \"Data source : Human Mortality Database by University of California, Berkeley, and Max Planck Institute for Demographic Research.\"? Please include their lending category.", "sql": "SELECT DISTINCT T1.Wb2code, T1.LendingCategory FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data source : Human Mortality Database by University of California, Berkeley, and Max Planck Institute for Demographic Research.' AND T1.LendingCategory != ''", "source_tables": ["countrynotes", "country"]}, "evidence": "World Bank code refers to Wb2code; Data source refers to Description"}
{"sample_id": 2118, "db_id": "world_development_indicators", "final": {"question": "What is the topic of the series when the Total reserves minus gold (current US$) indicator of Haiti hit the value of 3,000,000 in 1961? Please include its series code and license type.", "sql": "SELECT T2.Topic, T2.Seriescode, T2.LicenseType FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T1.Year = 1961 AND T1.CountryName = 'Haiti' AND T1.IndicatorName = 'Total reserves minus gold (current US$)' AND T1.Value = 3000000", "source_tables": ["indicators", "series"]}, "evidence": "Total reserves minus gold (current US$) is the IndicatorName; Haiti is the CountryName; Year = 1961"}
{"sample_id": 2119, "db_id": "world_development_indicators", "final": {"question": "How many countries have reached their Adjusted net national income per capita (constant 2005 US$) indicator value to more than 1,000 but have not finished their external debt reporting?", "sql": "SELECT COUNT(T1.CountryCode) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Adjusted net national income per capita (constant 2005 US$)' AND T1.ExternalDebtReportingStatus = 'Preliminary' AND T2.Value > 1000", "source_tables": ["country", "indicators"]}, "evidence": "Adjusted net national income per capita (constant 2005 US$) is the IndicatorName; have not finished their external debt reporting means ExternalDebtReportingStatus = 'Preliminary'"}
{"sample_id": 2120, "db_id": "world_development_indicators", "final": {"question": "Which countries have a fertility rate between 4 and 5 in 1979? List their names.", "sql": "SELECT CountryName FROM Indicators WHERE Year = 1979 AND IndicatorName = 'Fertility rate, total (births per woman)' AND value >= 4 AND Value <= 5", "source_tables": ["indicators"]}, "evidence": "Year = 1979; fertility rate refers to IndicatorName = 'Fertility rate, total (births per woman)'; Value is between 4 and 5;"}
{"sample_id": 2121, "db_id": "world_development_indicators", "final": {"question": "Find the countries in south Asia which are in the low-income group. What is the source of their recent income and expenditure data? List it alongside the table name of the countries.", "sql": "SELECT TableName, SourceOfMostRecentIncomeAndExpenditureData FROM Country WHERE Region = 'South Asia' AND IncomeGroup = 'Low income'", "source_tables": ["country"]}, "evidence": "South Asia is the name of the region; IncomeGroup = 'Low income';"}
{"sample_id": 2122, "db_id": "world_development_indicators", "final": {"question": "What are the sources for the data of children who finished primary school education in Latin America & Caribbean countries?", "sql": "SELECT DISTINCT T2.Source FROM Footnotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode INNER JOIN Country AS T3 ON T1.Countrycode = T3.CountryCode WHERE T3.Region = 'Latin America & Caribbean' AND T2.IndicatorName = 'Children out of school, primary'", "source_tables": ["country", "footnotes", "series"]}, "evidence": "Latin America & Caribbean is the name of the region; children who finished primary school education refer to IndicatorName = 'Out-of-school children of primary school age, both sexes (number)'; sources refer to Description;"}
{"sample_id": 2123, "db_id": "world_development_indicators", "final": {"question": "List the sources for the Net Migration in South American countries in 2002.", "sql": "SELECT T2.Source FROM CountryNotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode INNER JOIN Country AS T3 ON T1.Countrycode = T3.CountryCode INNER JOIN SeriesNotes AS T4 ON T2.SeriesCode = T4.Seriescode WHERE T4.Year LIKE '%2002%' AND T2.IndicatorName = 'Net migration'", "source_tables": ["countrynotes", "country", "series", "seriesnotes"]}, "evidence": "South American is the name of the region; Year contains '2002'; sources refer to Description; IndicatorName = 'Net migration';"}
{"sample_id": 2124, "db_id": "world_development_indicators", "final": {"question": "What are the sources for the data of children who finished primary school education in North American countries?", "sql": "SELECT DISTINCT T3.Description FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN CountryNotes AS T3 ON T2.CountryCode = T3.Countrycode WHERE T1.Region = 'North America' AND T2.IndicatorName = 'Out-of-school children of primary school age, both sexes (number)'", "source_tables": ["countrynotes", "country", "indicators"]}, "evidence": "North American is the name of the region; sources refer to Description; children who finished primary school education refer to IndicatorName = 'Out-of-school children of primary school age, both sexes (number)';"}
{"sample_id": 2125, "db_id": "world_development_indicators", "final": {"question": "In the countries for which the latest trade data are from 2013, what was the GDP growth in 2014? List them in the ascending order of GDP.", "sql": "SELECT DISTINCT T1.CountryCode, T2.Value FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.LatestTradeData = 2013 AND T2.IndicatorName LIKE 'GDP growth (annual %)' AND T2.year = 2014 AND T2.Value > 0 ORDER BY T2.Value ASC", "source_tables": ["country", "indicators"]}, "evidence": "IndicatorName = 'GDP growth (annual %)'; Year = 2014;"}
{"sample_id": 2126, "db_id": "world_development_indicators", "final": {"question": "Which European countries had the highest private expenditure on health in 2005? List the top ten countries in descending order and find the source of the data.", "sql": "SELECT DISTINCT T1.CountryCode, T3.Description FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN CountryNotes AS T3 ON T1.CountryCode = T3.Countrycode WHERE T2.IndicatorName = 'Out-of-pocket health expenditure (% of private expenditure on health)' AND T2.Value > 0 AND T2.year = 2005 ORDER BY T2.Value DESC LIMIT 10", "source_tables": ["countrynotes", "country", "indicators"]}, "evidence": "Year = 2005; private expenditure on health refers to IndicatorName = 'Out-of-pocket health expenditure (% of private expenditure on health)'; the highest refers to MAX(Value); source refers to Description;"}
{"sample_id": 2127, "db_id": "world_development_indicators", "final": {"question": "How many low income countries are there in South Asia?", "sql": "SELECT COUNT(CountryCode) FROM Country WHERE Region = 'South Asia' AND IncomeGroup = 'Low income'", "source_tables": ["country"]}, "evidence": "South Asia is the name of the region; IncomeGroup = 'Low income';"}
{"sample_id": 2128, "db_id": "world_development_indicators", "final": {"question": "Please list the short name of countries which have the latest trade data after 2010.", "sql": "SELECT ShortName FROM Country WHERE LatestTradeData > 2010", "source_tables": ["country"]}, "evidence": "the latest trade data after 2010 implies LatestTradeData > 2010;"}
{"sample_id": 2129, "db_id": "world_development_indicators", "final": {"question": "Please calculate the percentage of Sub-Saharan African countries which are in the Special trade system.", "sql": "SELECT  CAST(SUM(CASE WHEN Region = 'Sub-Saharan Africa' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CountryCode) FROM Country WHERE SystemOfTrade = 'Special trade system'", "source_tables": ["country"]}, "evidence": "Sub-Saharan African is the name of the region; SystemOfTrade = 'Special trade system'; countries refer to CountryCode; DIVIDE(COUNT (CountryCode where SystemOfTrade = 'Special trade system' and Region = 'Sub-Saharan Africa'), COUNT(CountryCode where Region = 'Sub-Saharan Africa')) as percentage;"}
{"sample_id": 2130, "db_id": "world_development_indicators", "final": {"question": "Please calculate the average of Arms imports (SIPRI trend indicator values) of the European & Central Asian countries.", "sql": "SELECT CAST(SUM(T2.Value) AS REAL) / COUNT(T1.CountryCode) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Region = 'Europe & Central Asia' AND T2.IndicatorName = 'Arms imports (SIPRI trend indicator values)'", "source_tables": ["country", "indicators"]}, "evidence": "European & Central Asian is the name of the region; IndicatorName = 'Arms imports (SIPRI trend indicator values)'; countries refer to CountryCode; DIVIDE(Sum(Value), Count(CountryCode));"}
{"sample_id": 2131, "db_id": "world_development_indicators", "final": {"question": "Which upper middle income country has the lowest value of CO2 emissions (kt)?", "sql": "SELECT T1.CountryCode FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'Upper middle income' AND T2.IndicatorName = 'CO2 emissions (kt)' ORDER BY T2.Value ASC LIMIT 1", "source_tables": ["country", "indicators"]}, "evidence": "IncomeGroup = 'Upper middle income'; IndicatorName = 'CO2 emissions (kt); the lowest value refers to MIN(Value);"}
{"sample_id": 2132, "db_id": "world_development_indicators", "final": {"question": "What is the minimum of International migrant stock, total of heavily indebted poor countries?", "sql": "SELECT MIN(T2.Value) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.OtherGroups = 'HIPC' AND T2.IndicatorName = 'International migrant stock, total'", "source_tables": ["country", "indicators"]}, "evidence": "IndicatorName = 'International migrant stock, total'; heavily indebted poor countries referred to by its abbreviated 'HIPC' = OtherGroups; MIN(Value);"}
{"sample_id": 2133, "db_id": "world_development_indicators", "final": {"question": "Please list the indicator names belonging to Education: Inputs topic in 2000.", "sql": "SELECT DISTINCT T2.IndicatorName FROM Footnotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode WHERE T1.Year = 'YR2000' AND T2.Topic = 'Education: Inputs'", "source_tables": ["footnotes", "series"]}, "evidence": "Year = 'YR2000';"}
{"sample_id": 2134, "db_id": "world_development_indicators", "final": {"question": "How many annual indicators use the Sum aggregation method from 2001 to 2003?", "sql": "SELECT COUNT(DISTINCT T2.SeriesCode)  FROM Footnotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode WHERE T1.Year IN ('YR2001', 'YR2002', 'YR2003') AND T2.Periodicity = 'Annual' AND T2.AggregationMethod = 'Sum'", "source_tables": ["footnotes", "series"]}, "evidence": "Annual refers to Periodicity; from 2001 to 2003 implies Year = 'YR2001', Year = 'YR2002' , Year = 'YR2003';"}
{"sample_id": 2135, "db_id": "world_development_indicators", "final": {"question": "In 2005, which series codes use the International Monetary Fund, Balance of Payments Statistics Yearbook and data files source?", "sql": "SELECT T1.Seriescode, T2.Source FROM Footnotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode WHERE T1.Year LIKE '%2005%' AND T2.Source LIKE 'International Monetary Fund%'", "source_tables": ["footnotes", "series"]}, "evidence": "Year contains '2005'; series codes contain 'International Monetary Fund'"}
{"sample_id": 2136, "db_id": "world_development_indicators", "final": {"question": "What percentage of countries in South Asia have the Life expectancy at birth, female (years) greater than 50?", "sql": "SELECT CAST(SUM(CASE WHEN T2.value > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.CountryCode) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Region = 'South Asia' AND T2.IndicatorName = 'Life expectancy at birth, female (years)'", "source_tables": ["country", "indicators"]}, "evidence": "South Asia is the name of the region; IndicatorName = 'Life expectancy at birth, female (years)'; greater than 50 refers to Value>50; DIVIDE(COUNT(CountryCode where IndicatorName = 'Life expectancy at birth, female (years)'; Value>50; Region = 'South Asia'), COUNT(CountryCode where Region = 'South Asia')) as percentage;"}
{"sample_id": 2137, "db_id": "world_development_indicators", "final": {"question": "From 1960 to 1965, which country had the highest Death rate, crude (per 1,000 people)?", "sql": "SELECT CountryName FROM Indicators WHERE Year BETWEEN 1960 AND 1965 AND IndicatorName = 'Death rate, crude (per 1,000 people)' ORDER BY Value DESC LIMIT 1", "source_tables": ["indicators"]}, "evidence": "IndicatorName = 'Death rate, crude (per 1,000 people)'; the highest refers to MAX(Value); from 1960 to 1965 refers to Year between '1960' and '1965'; country refers to CountryName;"}
{"sample_id": 2138, "db_id": "world_development_indicators", "final": {"question": "Please list the indicator names of Arab World whose values are higher than 50 in 1960.", "sql": "SELECT IndicatorName FROM Indicators WHERE CountryName = 'Arab World' AND Year = 1960 AND Value > 50", "source_tables": ["indicators"]}, "evidence": "Arab World refers to CountryName; Year = '1960'; values are higher than 50 refers to Value>50;"}
{"sample_id": 2139, "db_id": "world_development_indicators", "final": {"question": "Which country has the highest value of Merchandise imports by the reporting economy (current US$)?", "sql": "SELECT CountryName FROM Indicators WHERE IndicatorName = 'Merchandise imports by the reporting economy (current US$)' ORDER BY Value DESC LIMIT 1", "source_tables": ["indicators"]}, "evidence": "country refers to CountryName; the highest value implies MAX(Value); IndicatorName = 'Merchandise imports by the reporting economy (current US$)';"}
{"sample_id": 2140, "db_id": "world_development_indicators", "final": {"question": "Please list annual indicator names which have values of more than 100 in 1965.", "sql": "SELECT DISTINCT T2.IndicatorName FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T1.Year = 1965 AND T1.Value > 100 AND T2.Periodicity = 'Annual'", "source_tables": ["indicators", "series"]}, "evidence": "Annual refers to Periodicity; values of more than 100 implies Value>100; Year = '1965';"}
{"sample_id": 2141, "db_id": "world_development_indicators", "final": {"question": "From 1968 to 1970, what are indicator names whose license type is open and values are less than 100?", "sql": "SELECT DISTINCT T1.IndicatorName FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T1.Year >= 1968 AND T1.Year < 1971 AND T2.LicenseType = 'Open' AND T1.Value < 100", "source_tables": ["indicators", "series"]}, "evidence": "From 1968 to 1970 refers to Year between '1968' and '1970'; values are less than 100 imply Value<100;"}
{"sample_id": 2142, "db_id": "world_development_indicators", "final": {"question": "Which country had the highest value of indicator belongs to Private Sector & Trade: Exports topic? Please list the country name and indicator name.", "sql": "SELECT T1.CountryName, T1.IndicatorName FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T2.Topic = 'Private Sector & Trade: Exports' ORDER BY T1.Value DESC LIMIT 1", "source_tables": ["indicators", "series"]}, "evidence": "country refers to CountryName;"}
{"sample_id": 2143, "db_id": "world_development_indicators", "final": {"question": "Which indicator name uses the Weighted average method and has the lowest value?", "sql": "SELECT T1.IndicatorName, MIN(T1.Value) FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T2.AggregationMethod = 'Weighted average'", "source_tables": ["indicators", "series"]}, "evidence": "AggregationMethod = 'Weighted average'; the lowest value implies MIN(Value);"}
{"sample_id": 2144, "db_id": "world_development_indicators", "final": {"question": "Please list out all annual indicator names of Sudan in 1961?", "sql": "SELECT T1.IndicatorName FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T1.CountryName = 'Sudan' AND T1.Year = 1961 AND T2.Periodicity = 'Annual'", "source_tables": ["indicators", "series"]}, "evidence": "Sudan is the name of the country; Periodicity = 'Annual'; Year = '1961'"}
{"sample_id": 2145, "db_id": "world_development_indicators", "final": {"question": "From 1960 to 1965, which country has the lowest value of indicator belongs to Health: Population: Structure?", "sql": "SELECT CountryName FROM Indicators WHERE Value = ( SELECT MIN(T1.Value) FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T1.Year >= 1960 AND T1.Year < 1966 AND T2.Topic = 'Health: Population: Structure' )", "source_tables": ["indicators", "series"]}, "evidence": "From 1960 to 1965 refers to Year between '1960' and '1965'; the lowest value implies MIN(Value); country refers to CountryName;"}
{"sample_id": 2146, "db_id": "world_development_indicators", "final": {"question": "What percentage of upper middle income countries which have the CO2 emissions from liquid fuel consumption (% of total)\n\nless than 80%?", "sql": "SELECT SUM(CASE WHEN T2.IndicatorName = 'CO2 emissions FROM liquid fuel consumption (% of total)' AND t2.Value < 80 THEN 1 ELSE 0 END) * 1.0 / COUNT(T1.CountryCode) persent FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'Upper middle income'", "source_tables": ["country", "indicators"]}, "evidence": "IndicatorName = 'CO2 emissions from liquid fuel consumption (% of total)'; less than 80% implies Value<80%; IncomeGroup = 'Upper middle income'; DIVIDE(COUNT(CountryCode where IndicatorName = 'CO2 emissions from liquid fuel consumption (% of total)'; Value<80%; IncomeGroup = 'Upper middle income'), COUNT(CountryCode where IncomeGroup = 'Upper middle income'));"}
{"sample_id": 2147, "db_id": "world_development_indicators", "final": {"question": "What is indicator code of Rural population?", "sql": "SELECT DISTINCT IndicatorCode FROM Indicators WHERE IndicatorName = 'Rural population'", "source_tables": ["indicators"]}, "evidence": "IndicatorName = 'Rural population';"}
{"sample_id": 2148, "db_id": "world_development_indicators", "final": {"question": "How many country uses the 2008 System of National Accounts methodology? List our their table name.", "sql": "SELECT TableName  FROM Country WHERE SystemOfNationalAccounts = 'Country uses the 2008 System of National Accounts methodology.'", "source_tables": ["country"]}, "evidence": ""}
{"sample_id": 2149, "db_id": "world_development_indicators", "final": {"question": "List out the series code of countries using Euro as their currency unit.", "sql": "SELECT DISTINCT T2.SeriesCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.CurrencyUnit = 'Euro'", "source_tables": ["countrynotes", "country"]}, "evidence": ""}
{"sample_id": 2150, "db_id": "world_development_indicators", "final": {"question": "List out the long name of countries using series code as DT.DOD.DSTC.CD", "sql": "SELECT T1.LongName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.SeriesCode = 'DT.DOD.DSTC.CD'", "source_tables": ["countrynotes", "country"]}, "evidence": ""}
{"sample_id": 2151, "db_id": "world_development_indicators", "final": {"question": "Mention the series code of countries using Hong Kong dollar as their currency unit.", "sql": "SELECT T2.SeriesCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.CurrencyUnit = 'Hong Kong dollar'", "source_tables": ["countrynotes", "country"]}, "evidence": ""}
{"sample_id": 2152, "db_id": "world_development_indicators", "final": {"question": "List out the table name of countries using series code as SP.DYN.TO65.MA.ZS", "sql": "SELECT T1.TableName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Seriescode = 'SP.DYN.TO65.MA.ZS'", "source_tables": ["countrynotes", "country"]}, "evidence": ""}
{"sample_id": 2153, "db_id": "world_development_indicators", "final": {"question": "List out the country name of lower earning countries", "sql": "SELECT DISTINCT T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'Low income'", "source_tables": ["country", "indicators"]}, "evidence": "lower earning countries refer to IncomeGroup = 'Low income';"}
{"sample_id": 2154, "db_id": "world_development_indicators", "final": {"question": "List out the series code and country code of the poor countries that located in Latin American & Carribbean.", "sql": "SELECT T2.SeriesCode, T2.CountryCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.Region = 'Latin America & Caribbean' AND t1.incomegroup = 'Low income'", "source_tables": ["countrynotes", "country"]}, "evidence": "Latin American & Carribbean is the name of the region; poor countries refers to IncomeGroup = 'Low income';"}
{"sample_id": 2155, "db_id": "world_development_indicators", "final": {"question": "Mention the series code of countries using Australian dollar as their currency unit. Which country belongs to middle income group among them.", "sql": "SELECT T1.CountryCode, T2.SeriesCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.CurrencyUnit = 'Australian dollar' AND T1.IncomeGroup = 'Lower middle income'", "source_tables": ["countrynotes", "country"]}, "evidence": "middle income group refers to IncomeGroup = 'Low middle income';"}
{"sample_id": 2156, "db_id": "world_development_indicators", "final": {"question": "List out the country name of upper middle income group. Which country has the earliest national account base year? List out the region where this country locates.", "sql": "SELECT DISTINCT T1.CountryName FROM indicators AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IncomeGroup = 'Upper middle income' UNION SELECT longname FROM ( SELECT longname FROM country WHERE NationalAccountsBaseYear <> '' ORDER BY NationalAccountsBaseYear ASC LIMIT 1 )", "source_tables": ["country", "indicators"]}, "evidence": "IncomeGroup = 'Upper middle income'; the earliest national account base year refers to MIN(NationalAccountsBaseYear); \n"}
{"sample_id": 2157, "db_id": "world_development_indicators", "final": {"question": "List out the country code and country name of the rich countries using Euro as their currency unit", "sql": "SELECT DISTINCT T1.CountryCode, T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.CurrencyUnit = 'Euro' AND (T1.IncomeGroup = 'High income: OECD' OR T1.IncomeGroup = 'High income: nonOECD')", "source_tables": ["country", "indicators"]}, "evidence": "Non-OECD and OECD countries can be regarded as rich countries for those that are part of the High Income Group;"}
{"sample_id": 2158, "db_id": "world_development_indicators", "final": {"question": "List out the table name and currency unit of countries using series code as FP.CPI.TOTL", "sql": "SELECT T1.TableName, T1.CurrencyUnit FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.SeriesCode = 'FP.CPI.TOTL'", "source_tables": ["countrynotes", "country"]}, "evidence": ""}
{"sample_id": 2159, "db_id": "world_development_indicators", "final": {"question": "List out the name and indicator code of high income: nonOECD countries", "sql": "SELECT DISTINCT T1.CountryCode, T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'High income: nonOECD'", "source_tables": ["country", "indicators"]}, "evidence": "high income: non-OECD' refer to IncomeGroup;"}
{"sample_id": 2160, "db_id": "world_development_indicators", "final": {"question": "Mention the series code of countries using pound sterling as their currency unit. Which country belongs to high income group among them.", "sql": "SELECT DISTINCT T1.CountryCode, T1.CurrencyUnit, T1.IncomeGroup FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.CurrencyUnit = 'Pound sterling' AND T1.IncomeGroup LIKE '%high income%'", "source_tables": ["countrynotes", "country"]}, "evidence": ""}
{"sample_id": 2161, "db_id": "world_development_indicators", "final": {"question": "List down 10 country codes and it's short names.", "sql": "SELECT CountryCode, ShortName FROM Country LIMIT 10", "source_tables": ["country"]}, "evidence": ""}
{"sample_id": 2162, "db_id": "world_development_indicators", "final": {"question": "How many of the countries name start with alphabet A? List down the Alpha2Code of them.", "sql": "SELECT COUNT(ShortName) FROM Country WHERE ShortName LIKE 'A%' UNION SELECT alpha2code FROM country WHERE shortname LIKE 'A%'", "source_tables": ["country"]}, "evidence": "countries name starts with alphabet A refers to shortname like 'A%';"}
{"sample_id": 2163, "db_id": "world_development_indicators", "final": {"question": "Which countries use Euro as their currency? List down the table name.", "sql": "SELECT TableName FROM Country WHERE CurrencyUnit = 'Euro'", "source_tables": ["country"]}, "evidence": "CurrencyUnit = 'Euro';"}
{"sample_id": 2164, "db_id": "world_development_indicators", "final": {"question": "How many of the countries do not have special notes? List the long name.", "sql": "SELECT COUNT(LongName) FROM Country WHERE SpecialNotes = '' UNION SELECT longname FROM country WHERE specialnotes = ''", "source_tables": ["country"]}, "evidence": "do not have special notes implies SpecialNotes are NULL;"}
{"sample_id": 2165, "db_id": "world_development_indicators", "final": {"question": "Which high income group countries are from Asia?", "sql": "SELECT CountryCode, Region FROM Country WHERE (IncomeGroup = 'High income: OECD' OR IncomeGroup = 'High income: nonOECD') AND Region LIKE '%Asia%'", "source_tables": ["country"]}, "evidence": "Asia is the name of the region;"}
{"sample_id": 2166, "db_id": "world_development_indicators", "final": {"question": "Name the countries' long name with national accounts base year prior to 1980.", "sql": "SELECT LongName FROM Country WHERE NationalAccountsBaseYear < '1980' AND NationalAccountsBaseYear != ''", "source_tables": ["country"]}, "evidence": "national accounts base year prior to 1980 means before 1980 and refers to NationalAccountsBaseYear<1980;"}
{"sample_id": 2167, "db_id": "world_development_indicators", "final": {"question": "Which low income country has a series code of DT.DOD.DECT.CD? Name the country code of it.", "sql": "SELECT T1.CountryCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.IncomeGroup = 'Low income' AND T2.Seriescode = 'DT.DOD.DECT.CD'", "source_tables": ["countrynotes", "country"]}, "evidence": "IncomeGroup = 'Low income';"}
{"sample_id": 2168, "db_id": "world_development_indicators", "final": {"question": "State the table name of country with description of \"Covers mainland Tanzania only\".", "sql": "SELECT DISTINCT T1.TableName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Covers mainland Tanzania only.'", "source_tables": ["countrynotes", "country"]}, "evidence": ""}
{"sample_id": 2169, "db_id": "world_development_indicators", "final": {"question": "Write down the description and series code of Benin in year 2005.", "sql": "SELECT T2.Description, T2.Seriescode FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.TableName = 'Benin' AND T2.Year = 'YR2005'", "source_tables": ["country", "footnotes"]}, "evidence": "Benin is the short name of the country; year 2005 refers to Year = 'YR2005';"}
{"sample_id": 2170, "db_id": "world_development_indicators", "final": {"question": "What are the footnote description of Finland in year 2000?", "sql": "SELECT DISTINCT T2.Description FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.TableName = 'Finland' AND T2.Year = 'YR2000'", "source_tables": ["country", "footnotes"]}, "evidence": "Finland is the short name of the country; year 2000 refers to Year = 'YR2000';"}
{"sample_id": 2171, "db_id": "world_development_indicators", "final": {"question": "What are the years when countries have indicator name of \"Air transport, passengers carried\"? List the table name of these countries.", "sql": "SELECT DISTINCT T2.Year, T1.TableName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Air transport, passengers carried'", "source_tables": ["country", "indicators"]}, "evidence": ""}
{"sample_id": 2172, "db_id": "world_development_indicators", "final": {"question": "List the long name of countries with indicator name in 1980.", "sql": "SELECT DISTINCT T1.LongName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Year = 1980 AND T2.IndicatorName IS NOT NULL", "source_tables": ["country", "indicators"]}, "evidence": "with any indicator name implies IndicatorName is not NULL; Year = '1980';"}
{"sample_id": 2173, "db_id": "world_development_indicators", "final": {"question": "State the currency of Malaysia and what are the indicator code used by this country in 1970?", "sql": "SELECT T1.currencyunit, T2.IndicatorCode FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.TableName = 'Malaysia' AND T2.Year = 1970", "source_tables": ["country", "indicators"]}, "evidence": "Malaysia is the name of the country; currency refers to CurrencyUnit; Year = '1970';"}
{"sample_id": 2174, "db_id": "world_development_indicators", "final": {"question": "Name 5 country codes of country with highest value and state the region of these countries.", "sql": "SELECT DISTINCT T1.CountryCode, T1.Region FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode ORDER BY T2.Value DESC LIMIT 5", "source_tables": ["country", "indicators"]}, "evidence": "with highest value refers to MAX(Value);"}
{"sample_id": 2175, "db_id": "world_development_indicators", "final": {"question": "How many countries have country note description as \"Sources: UN Energy Statistics (2014)\"? List the currency of these countries.", "sql": "SELECT COUNT(DISTINCT T1.Countrycode) FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Sources: UN Energy Statistics (2014)' UNION SELECT DISTINCT t1.CurrencyUnit FROM country AS t1 INNER JOIN countrynotes AS t2 ON t1.CountryCode = t2.Countrycode WHERE t2.Description = 'Sources: UN Energy Statistics (2014)'", "source_tables": ["countrynotes", "country"]}, "evidence": "countries refer to CountryCode; currency refers to CurrencyUnit;"}
{"sample_id": 2176, "db_id": "world_development_indicators", "final": {"question": "How many footnotes have been made in year 1980 and what are the table names of these countries that made the footnotes?", "sql": "SELECT COUNT(T2.Description) FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Year = 'YR1980' UNION ALL SELECT DISTINCT T1.TableName FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Year = 'YR1980'", "source_tables": ["country", "footnotes"]}, "evidence": "year 1980 refers to Year = 'YR1980';"}
{"sample_id": 2177, "db_id": "world_development_indicators", "final": {"question": "List the series code of country with country notes description as \"Data sources : Eurostat\" and state the Wb2Code of these countries.", "sql": "SELECT T2.seriescode, T1.Wb2Code FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data sources : Eurostat'", "source_tables": ["countrynotes", "country"]}, "evidence": ""}
{"sample_id": 2178, "db_id": "world_development_indicators", "final": {"question": "Among the low income countries, which country has the lowest fertility rate?", "sql": "SELECT T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'Low income' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' ORDER BY T2.Value LIMIT 1", "source_tables": ["country", "indicators"]}, "evidence": "fertility rate refers to IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'; lowest refers to MIN(Value); IncomeGroup = 'Low income';"}
{"sample_id": 2179, "db_id": "world_development_indicators", "final": {"question": "How much is the total urban population of middle income countries in 1960?", "sql": "SELECT SUM(T2.Value) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup LIKE '%middle income' AND T2.Year = 1960 AND T2.IndicatorName = 'Urban population'", "source_tables": ["country", "indicators"]}, "evidence": "IncomeGroup = 'Middle income'; Year = 1960; urban population refers to IndicatorName;"}
{"sample_id": 2180, "db_id": "world_development_indicators", "final": {"question": "Name the country with fastest growth in adjusted net national income in 1980 and state the currency used by this country.", "sql": "SELECT T2.countryname, T1.CurrencyUnit FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Adjusted net national income (annual % growth)' AND T2.Year = 1980 AND T1.CurrencyUnit != '' ORDER BY T2.Value DESC LIMIT 1", "source_tables": ["country", "indicators"]}, "evidence": "fastest growth refers to MAX(Value); IndicatorName = 'Adjusted net national income (annual % growth)'; Year = '1980'; currency refers to CurrencyUnit;"}
{"sample_id": 2181, "db_id": "world_development_indicators", "final": {"question": "How many countries using the 1993 System of National Accounts methodology?", "sql": "SELECT COUNT(CountryCode) FROM Country WHERE SystemOfNationalAccounts = 'Country uses the 1993 System of National Accounts methodology.'", "source_tables": ["country"]}, "evidence": "use the 1993 System of National Accounts methodology refers to SystemOfNationalAccounts = '1993 System of National Accounts methodology.'"}
{"sample_id": 2182, "db_id": "world_development_indicators", "final": {"question": "Which country have completed vital registration? List all the countries.", "sql": "SELECT ShortName FROM Country WHERE VitalRegistrationComplete = 'Yes'", "source_tables": ["country"]}, "evidence": "have completed vital registration refers to VitalRegistrationComplete = Yes; country name refers to ShortName"}
{"sample_id": 2183, "db_id": "world_development_indicators", "final": {"question": "Which country have conducted population census from 2010 until 2012 and have completed vital registration?", "sql": "SELECT ShortName, LongName FROM Country WHERE LatestPopulationCensus >= 2010 AND LatestPopulationCensus < 2013 AND VitalRegistrationComplete = 'Yes'", "source_tables": ["country"]}, "evidence": "from 2010 until 2012 refers to LatestPopulationCensus between '2010' and '2012'; have completed vital registration refers to VitalRegistrationComplete = 'Yes'; CountryName = ShortName + LongName"}
{"sample_id": 2247, "db_id": "movielens", "final": {"question": "List the different director IDs of the movies whose user rating is more than 4.", "sql": "SELECT DISTINCT T2.directorid FROM u2base AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.rating > 4", "source_tables": ["movies2directors", "u2base"]}, "evidence": ""}
{"sample_id": 2248, "db_id": "movielens", "final": {"question": "Among the users who gave a rating of 5, how many of them are male?", "sql": "SELECT COUNT(T1.userid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 5 AND T2.u_gender = 'M'", "source_tables": ["users", "u2base"]}, "evidence": "Male users mean that u_gender = 'M'"}
{"sample_id": 2249, "db_id": "movielens", "final": {"question": "List the genres of the movies which actor id 851 is the star.", "sql": "SELECT T2.genre FROM movies2actors AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T1.actorid = T3.actorid WHERE T3.actorid = 851", "source_tables": ["movies2directors", "movies2actors", "actors"]}, "evidence": ""}
{"sample_id": 2250, "db_id": "movielens", "final": {"question": "How many movies from the USA which user rating is less than 3?", "sql": "SELECT COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA' AND T1.rating < 3", "source_tables": ["u2base", "movies"]}, "evidence": ""}
{"sample_id": 2251, "db_id": "movielens", "final": {"question": "Among the movies from France, how many of them are drama?", "sql": "SELECT COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'France' AND T1.genre = 'drama'", "source_tables": ["movies2directors", "movies"]}, "evidence": "France a one country"}
{"sample_id": 2252, "db_id": "movielens", "final": {"question": "What is the average occupation of users whose ratings are not more than 2 ?", "sql": "SELECT AVG(T2.occupation) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating < 2", "source_tables": ["users", "u2base"]}, "evidence": ""}
{"sample_id": 2253, "db_id": "movielens", "final": {"question": "List the top 10 USA movies, by descending order, from the highest to the lowest, the user rating.", "sql": "SELECT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA' GROUP BY T1.movieid ORDER BY AVG(T1.rating) DESC LIMIT 10", "source_tables": ["u2base", "movies"]}, "evidence": "USA is a country"}
{"sample_id": 2254, "db_id": "movielens", "final": {"question": "What is the average number of casts of movies that are from the USA?", "sql": "SELECT AVG(T2.cast_num) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'USA'", "source_tables": ["movies2actors", "movies"]}, "evidence": "USA is a country"}
{"sample_id": 2255, "db_id": "movielens", "final": {"question": "List the top 5 movies from other countries which to language is not in English.", "sql": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'other' AND T2.isEnglish = 'F' LIMIT 5", "source_tables": ["u2base", "movies"]}, "evidence": "not in English can be represented by isEnglish = 'F'"}
{"sample_id": 2256, "db_id": "movielens", "final": {"question": "Among the best actors, how many of them got a rating of 5 to the movies they starred?", "sql": "SELECT COUNT(T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN u2base AS T3 ON T2.movieid = T3.movieid WHERE T1.a_quality = 5 AND T3.rating = 5", "source_tables": ["u2base", "actors", "movies2actors"]}, "evidence": ""}
{"sample_id": 2257, "db_id": "movielens", "final": {"question": "What is the average rating of the newest movies from France?", "sql": "SELECT AVG(T1.rating) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'france' AND T2.year = 4", "source_tables": ["u2base", "movies"]}, "evidence": "France is a country; year = 4 represents the newest date."}
{"sample_id": 2258, "db_id": "movielens", "final": {"question": "Among the most rated UK movies, how many of them has running time of less than 2?", "sql": "SELECT COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'UK' AND T2.runningtime < 2 AND T1.rating = 5", "source_tables": ["u2base", "movies"]}, "evidence": "UK is a country"}
{"sample_id": 2259, "db_id": "movielens", "final": {"question": "List the id of male users who gave ratings of less than 3 to French movies with running time of 2.", "sql": "SELECT T1.userid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid INNER JOIN users AS T3 ON T1.userid = T3.userid WHERE T2.country = 'France' AND T2.runningtime = 2 AND T1.rating < 3 AND T3.u_gender = 'M'", "source_tables": ["users", "u2base", "movies"]}, "evidence": "Male users mean that u_gender = 'M'; France is a country"}
{"sample_id": 2260, "db_id": "movielens", "final": {"question": "Among the worst actresses, how many of them got a rating of more than 3 to the movies they starred?", "sql": "SELECT COUNT(T1.userid) FROM u2base AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid INNER JOIN users AS T4 ON T1.userid = T4.userid WHERE T3.a_quality = 0 AND T1.rating > 3 AND T4.u_gender = 'F'", "source_tables": ["actors", "u2base", "movies2actors", "users"]}, "evidence": "Worst actresses means a_quality is the least; The least a_quality is 0"}
{"sample_id": 2261, "db_id": "movielens", "final": {"question": "What is the ID of audiences that gave the most rating of 5?", "sql": "SELECT userid FROM u2base WHERE rating = 5 GROUP BY userid ORDER BY COUNT(movieid) DESC LIMIT 1", "source_tables": ["u2base"]}, "evidence": "The audience and users are the same meaning"}
{"sample_id": 2262, "db_id": "movielens", "final": {"question": "What are the ID of actors that had worked together with director 22397? What was the genre of that movie?", "sql": "SELECT T2.actorid, T4.genre FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid INNER JOIN movies2directors AS T4 ON T1.movieid = T4.movieid WHERE T4.directorid = 22397", "source_tables": ["actors", "movies2directors", "movies2actors", "movies"]}, "evidence": ""}
{"sample_id": 2263, "db_id": "movielens", "final": {"question": "Please list down the ID of actors and directors in action movies.", "sql": "SELECT T2.actorid, T1.directorid FROM movies2directors AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.genre = 'Action'", "source_tables": ["movies2directors", "movies2actors"]}, "evidence": ""}
{"sample_id": 2264, "db_id": "movielens", "final": {"question": "How many female actors acted in the movies of year 4?", "sql": "SELECT COUNT(T2.actorid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T3.a_gender = 'F' AND T1.year = 4", "source_tables": ["actors", "movies2actors", "movies"]}, "evidence": "Female actors mean that a_gender = 'F'"}
{"sample_id": 2265, "db_id": "movielens", "final": {"question": "What are the ID of actors with quality rating of 3 acted in English USA movies?", "sql": "SELECT T2.actorid FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T3.a_quality = 3 AND T1.country = 'USA' AND T1.isEnglish = 'T'", "source_tables": ["actors", "movies2actors", "movies"]}, "evidence": "English movies refers to isEnglish = 'T'; USA is a country"}
{"sample_id": 2266, "db_id": "movielens", "final": {"question": "List down the ID of movies with running time of 3 and average revenue of 1?", "sql": "SELECT T1.movieid FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid INNER JOIN directors AS T3 ON T2.directorid = T3.directorid WHERE T1.runningtime = 3 AND T3.avg_revenue = 1", "source_tables": ["movies2directors", "directors", "movies"]}, "evidence": ""}
{"sample_id": 2267, "db_id": "movielens", "final": {"question": "UK produced what genre of movies?", "sql": "SELECT T2.genre FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'UK'", "source_tables": ["movies2directors", "movies"]}, "evidence": "UK is a country"}
{"sample_id": 2268, "db_id": "movielens", "final": {"question": "What is the favourite movie genre for audiences of age 18?", "sql": "SELECT T1.genre FROM movies2directors AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid INNER JOIN users AS T3 ON T2.userid = T3.userid WHERE T3.age = 18 GROUP BY T1.genre ORDER BY COUNT(T1.movieid) DESC LIMIT 1", "source_tables": ["movies2directors", "u2base", "users"]}, "evidence": "The audience and users are the same meaning"}
{"sample_id": 2269, "db_id": "movielens", "final": {"question": "What is the ID of actors that acted in the movies most viewed by audience with occupation 5?", "sql": "SELECT T3.actorid FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid INNER JOIN movies2actors AS T3 ON T2.movieid = T3.movieid WHERE T1.occupation = 5 GROUP BY T2.movieid ORDER BY COUNT(T1.userid) DESC LIMIT 1", "source_tables": ["u2base", "users", "movies2actors"]}, "evidence": "The audience and users are the same meaning"}
{"sample_id": 2270, "db_id": "movielens", "final": {"question": "Movies with rating 3 are viewed by audiences in which distinct age group?", "sql": "SELECT DISTINCT T2.age FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 3", "source_tables": ["users", "u2base"]}, "evidence": "The audience and users are the same meaning"}
{"sample_id": 2271, "db_id": "movielens", "final": {"question": "Action movies are mostly directed by directors of which country?", "sql": "SELECT T3.country FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.directorid = T2.directorid INNER JOIN movies AS T3 ON T1.movieid = T3.movieid WHERE T1.genre = 'Action' GROUP BY T3.country ORDER BY COUNT(T3.country) DESC LIMIT 1", "source_tables": ["movies2directors", "directors", "movies"]}, "evidence": ""}
{"sample_id": 2272, "db_id": "movielens", "final": {"question": "Please list down ID of movies acted by top 5 actors based on actor rating.", "sql": "SELECT T2.movieid FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid GROUP BY T2.actorid ORDER BY AVG(T1.a_quality) DESC LIMIT 5", "source_tables": ["actors", "movies2actors"]}, "evidence": ""}
{"sample_id": 2273, "db_id": "movielens", "final": {"question": "List down 5 non English adventure movies from UK?", "sql": "SELECT T1.movieid FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'UK' AND T1.genre = 'Adventure' AND T2.isEnglish = 'F' LIMIT 5", "source_tables": ["movies2directors", "movies"]}, "evidence": "not English refers to isEnglish = 'F'; UK is a country"}
{"sample_id": 2274, "db_id": "movielens", "final": {"question": "What is the percentage of female audiences who viewed movies with rating 2?", "sql": "SELECT CAST(SUM(IIF(T2.u_gender = 'F', 1, 0)) AS REAL) * 100 / COUNT(T2.userid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 2", "source_tables": ["users", "u2base"]}, "evidence": "The audience and users are the same meaning; Female users refers to u_gender = 'F'; Percentage of female users = count(female users) / count(all users); count(all users) = count(female users) + count(male users)"}
{"sample_id": 2275, "db_id": "movielens", "final": {"question": "What is the difference of female and male audiences in number who viewed horror movies?", "sql": "SELECT SUM(IIF(T2.u_gender = 'F', 1, 0)) - SUM(IIF(T2.u_gender = 'M', 1, 0)) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid INNER JOIN movies2directors AS T3 ON T3.movieid = T1.movieid WHERE T3.genre = 'horror'", "source_tables": ["users", "u2base", "movies2directors"]}, "evidence": "The audience and users are the same meaning; Difference of female and male audiences = count(female users) - count(male users); Female users refers to u_gender = 'F'; Male users refers to u_gender = 'M'"}
{"sample_id": 2276, "db_id": "movielens", "final": {"question": "Please list the genre of the movies that are the newest and is in English.", "sql": "SELECT T2.genre FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.year = 4 AND T1.isEnglish = 'T'", "source_tables": ["movies2directors", "movies"]}, "evidence": "Year contains relative value, higher year value refers to newer date; Year = 4 refers to newest date, Year = 1 refer to oldest date; In English means isEnglish = T"}
{"sample_id": 2277, "db_id": "movielens", "final": {"question": "Among the action movies from the USA, how many of them are not in English?", "sql": "SELECT COUNT(T1.movieid) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'USA' AND T1.isEnglish = 'F' AND T2.genre = 'Action'", "source_tables": ["movies2directors", "movies"]}, "evidence": "USA is a country; not in English can be represented by isEnglish = 'F'"}
{"sample_id": 2278, "db_id": "movielens", "final": {"question": "For the male users no older than 18, how many times have they given the highest rating?", "sql": "SELECT COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 5 AND T2.age < 18 AND T2.u_gender = 'M'", "source_tables": ["users", "u2base"]}, "evidence": "Male users refers to u_gender = 'M'"}
{"sample_id": 2279, "db_id": "movielens", "final": {"question": "Please list the ID of the movie that has been mostly rated by female users.", "sql": "SELECT T1.movieid FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T2.u_gender = 'F' GROUP BY T1.movieid ORDER BY COUNT(T2.userid) DESC LIMIT 1", "source_tables": ["users", "u2base"]}, "evidence": "Female users refers to u_gender = 'F'"}
{"sample_id": 2280, "db_id": "movielens", "final": {"question": "Among divergent movies that got the highest rating, how many of them are from the UK?", "sql": "SELECT COUNT(DISTINCT T1.movieid) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'UK' AND T1.rating = 5", "source_tables": ["u2base", "movies"]}, "evidence": "UK is a country"}
{"sample_id": 2281, "db_id": "movielens", "final": {"question": "Please list different IDs of movies that are the newest and have gotten the lowest rating.", "sql": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.year = 4 AND T1.rating = 1", "source_tables": ["u2base", "movies"]}, "evidence": "Year contains relative value, higer year value refers to newer date; Year = 4 refers to newest date, Year = 1 refer to oldest date; Lowest rating = 1"}
{"sample_id": 2282, "db_id": "movielens", "final": {"question": "For the movies in English that are the oldest, how many of them have the lowest rating?", "sql": "SELECT COUNT(DISTINCT T1.movieid) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.year = 1 AND T2.rating = 1 AND T1.isEnglish = 'T'", "source_tables": ["u2base", "movies"]}, "evidence": "Year contains relative value, higer year value refers to newer date; Year = 4 refers to newest date, Year = 1 refer to oldest date; Lowest rating = 1\uff1bisEnglish = 'T' means English movie"}
{"sample_id": 2283, "db_id": "movielens", "final": {"question": "How many different female users have rated movies from France?", "sql": "SELECT COUNT(DISTINCT T2.userid) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T1.u_gender = 'F' AND T3.country = 'France'", "source_tables": ["u2base", "users", "movies"]}, "evidence": "France is a country; Female users mean that u_gender = 'F'"}
{"sample_id": 2284, "db_id": "movielens", "final": {"question": "For different directors who direct well, how many of them have directed an action film?", "sql": "SELECT COUNT(DISTINCT T2.directorid) FROM movies2directors AS T2 INNER JOIN directors AS T3 ON T2.directorid = T3.directorid WHERE T2.genre = 'Action' AND T3.d_quality = 4", "source_tables": ["movies2directors", "directors"]}, "evidence": "direct well means the quality of directing is good, which means d_quality = 4."}
{"sample_id": 2285, "db_id": "movielens", "final": {"question": "Please list the genre of the movies that are directed by the directors with the highest level of average revenue.", "sql": "SELECT T2.genre FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.avg_revenue = 4", "source_tables": ["directors", "movies2directors"]}, "evidence": ""}
{"sample_id": 2286, "db_id": "movielens", "final": {"question": "How many distinct movies in English stars a male actor who acts the best?", "sql": "SELECT COUNT(DISTINCT T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T3.isEnglish = 'T' AND T1.a_gender = 'M' AND T1.a_quality = 5", "source_tables": ["actors", "movies", "movies2actors"]}, "evidence": "Male actors mean that a_gender = 'M'; isEnglish = 'T' means movies in English"}
{"sample_id": 2287, "db_id": "movielens", "final": {"question": "Please list the country of the movie that stars an actress who acts the worse.", "sql": "SELECT T3.country FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T1.a_gender = 'F' AND T1.a_quality = 0", "source_tables": ["actors", "movies", "movies2actors"]}, "evidence": "a_quality = 5 refers to act the best, a_quality = 0 refers to act the worst"}
{"sample_id": 2288, "db_id": "movielens", "final": {"question": "What is the highest average rating for action movies made in the USA?", "sql": "SELECT AVG(T2.rating) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid INNER JOIN movies2directors AS T3 ON T1.movieid = T3.movieid WHERE T1.country = 'USA' AND T3.genre = 'Action' GROUP BY T1.movieid ORDER BY AVG(T2.rating) DESC LIMIT 1", "source_tables": ["movies2directors", "u2base", "movies"]}, "evidence": "USA is a country"}
{"sample_id": 2289, "db_id": "movielens", "final": {"question": "Among the films directed by directors who direct the best, how many of them have an average rating of over 3.5?", "sql": "SELECT COUNT(*) FROM ( SELECT DISTINCT T2.movieid FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid INNER JOIN u2base AS T3 ON T2.movieid = T3.movieid WHERE T1.d_quality = 5 GROUP BY T2.movieid HAVING AVG(T3.rating) > 3.5 ) AS T1", "source_tables": ["directors", "movies2directors", "u2base"]}, "evidence": "d_quality = 5 refers to direct the best, d_quality = 0 refers to direct the worst"}
{"sample_id": 2290, "db_id": "movielens", "final": {"question": "Which adventure movie has the highest average rating?", "sql": "SELECT T1.movieid FROM movies2directors AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.genre = 'Adventure' GROUP BY T1.movieid ORDER BY AVG(T2.rating) DESC LIMIT 1", "source_tables": ["movies2directors", "u2base"]}, "evidence": ""}
{"sample_id": 2291, "db_id": "movielens", "final": {"question": "How many of the users who rate the movie with the id '2462959' are female?", "sql": "SELECT COUNT(T1.userid) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T2.userid = 2462959 AND T1.u_gender = 'F'", "source_tables": ["u2base", "users"]}, "evidence": "Female users mean that u_gender = 'F'"}
{"sample_id": 2292, "db_id": "movielens", "final": {"question": "What is the most distinct rated movie with a running time of 0?", "sql": "SELECT DISTINCT T1.movieid FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.runningtime = 0 AND T2.rating = ( SELECT MAX(rating) FROM u2base )", "source_tables": ["u2base", "movies"]}, "evidence": ""}
{"sample_id": 2293, "db_id": "movielens", "final": {"question": "List the ids and ratings of each actors played in the movie with the id 1722327?", "sql": "SELECT T1.actorid, T1.a_quality FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid WHERE T2.movieid = 1722327", "source_tables": ["actors", "movies2actors"]}, "evidence": ""}
{"sample_id": 2294, "db_id": "movielens", "final": {"question": "Which directors with the best quality directed the most films?", "sql": "SELECT T1.directorid FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality = 5 GROUP BY T1.directorid ORDER BY COUNT(T2.movieid) DESC LIMIT 1", "source_tables": ["directors", "movies2directors"]}, "evidence": "d_quality = 5 refers to direct the best"}
{"sample_id": 2295, "db_id": "movielens", "final": {"question": "How many drama movie with the rating of 3?", "sql": "SELECT COUNT(DISTINCT T2.movieid) FROM u2base AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T2.genre = 'drama' AND T1.rating = 3", "source_tables": ["movies2directors", "u2base"]}, "evidence": ""}
{"sample_id": 2296, "db_id": "movielens", "final": {"question": "How many of the movies rated 5 are rated by a user between the ages of 25 and 35?", "sql": "SELECT COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 5 AND T2.age BETWEEN 25 AND 35", "source_tables": ["users", "u2base"]}, "evidence": ""}
{"sample_id": 2297, "db_id": "movielens", "final": {"question": "Please list all horror films that have a rating of 1.", "sql": "SELECT T1.movieid FROM u2base AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.rating = 1 AND T2.genre = 'Horror'", "source_tables": ["movies2directors", "u2base"]}, "evidence": ""}
{"sample_id": 2298, "db_id": "movielens", "final": {"question": "List the IDs of all the directors who worked on French films.", "sql": "SELECT T2.directorid FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'France'", "source_tables": ["movies2directors", "movies"]}, "evidence": "France is a country"}
{"sample_id": 2299, "db_id": "movielens", "final": {"question": "List all of the user ids and ages who rated movies with the id 1695219?", "sql": "SELECT T2.userid, T2.age FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.movieid = 1695219", "source_tables": ["users", "u2base"]}, "evidence": ""}
{"sample_id": 2300, "db_id": "movielens", "final": {"question": "Which genre contains the greatest number of non-English films?", "sql": "SELECT T2.genre FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.isEnglish = 'F' GROUP BY T2.genre ORDER BY COUNT(T1.movieid) DESC LIMIT 1", "source_tables": ["movies2directors", "movies"]}, "evidence": "isEnglish = 'F' means non-English"}
{"sample_id": 2301, "db_id": "movielens", "final": {"question": "List the cast and the director of the movie with the id 1949144.", "sql": "SELECT T1.actorid, T2.directorid FROM movies2actors AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.movieid = 1949144", "source_tables": ["movies2directors", "movies2actors"]}, "evidence": ""}
{"sample_id": 2302, "db_id": "movielens", "final": {"question": "Among the actors who acted in UK movies, what percentage of actors received a rating of at least 3?", "sql": "SELECT CAST(SUM(IIF(T3.a_quality >= 3, 1, 0)) AS REAL) * 100 / COUNT(T1.movieid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T1.country = 'UK'", "source_tables": ["actors", "movies2actors", "movies"]}, "evidence": "UK is a country"}
{"sample_id": 2303, "db_id": "movielens", "final": {"question": "What is the proportion of action movies directors who are called 'box office success paradox'?", "sql": "SELECT CAST(SUM(IIF(T2.avg_revenue > T2.d_quality, 1, 0)) AS REAL) * 100 / COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.directorid = T2.directorid WHERE T1.genre = 'Action'", "source_tables": ["movies2directors", "directors"]}, "evidence": "'box office success paradox' means average revenue exceeds their quality; The proportion can be computed by [(avg_revenue > d_quality) / ()] * 100%"}
{"sample_id": 2304, "db_id": "movielens", "final": {"question": "Please list the actor IDs whose movies have the newest published date.", "sql": "SELECT T1.actorid FROM movies2actors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.year = 4", "source_tables": ["movies2actors", "movies"]}, "evidence": "Year contains relative value, higher year value refers to newer date; Year = 4 refers to newest date"}
{"sample_id": 2345, "db_id": "superstore", "final": {"question": "Please list the names of all the products ordered in order CA-2011-112326 in superstores in the center.", "sql": "SELECT DISTINCT T2.'Product Name' FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T1.'Order ID' = 'CA-2011-112326'", "source_tables": ["product", "central_superstore"]}, "evidence": "names of all the products refers to \"Product Name\"; order CA-2011-112326 refers to \"Order ID\" = 'CA-2011-112326'; in the center refers to Region = 'Central';"}
{"sample_id": 2346, "db_id": "superstore", "final": {"question": "Among all the orders made by Aimee Bixby, what was the longest shipment time?", "sql": "SELECT MAX(strftime('%J', 'Ship Date') - strftime('%J', 'Order Date')) AS longestTimeDays FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T1.'Customer Name' = 'Aimee Bixby'", "source_tables": ["people", "central_superstore"]}, "evidence": "made by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby'; longest shipment time refers to MAX(SUM(SUTRACT(julianday(\"Ship Date\"), julianday(\"Order Date\")), 1))"}
{"sample_id": 2347, "db_id": "superstore", "final": {"question": "Among all the orders made by Aimee Bixby, how many of them chose the slowest delivery speed?", "sql": "SELECT COUNT(DISTINCT T2.'Order ID') FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T1.'Customer Name' = 'Aimee Bixby' AND T2.'Ship Mode' = 'Standard Class'", "source_tables": ["people", "central_superstore"]}, "evidence": "made by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby'; the slowest delivery speed refers to \"Ship Mode\" = 'Standard Class';"}
{"sample_id": 2348, "db_id": "superstore", "final": {"question": "How many orders has Aimee Bixby made?", "sql": "SELECT COUNT(DISTINCT T2.'Order ID') FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T1.'Customer Name' = 'Aimee Bixby'", "source_tables": ["people", "central_superstore"]}, "evidence": "Aimee Bixby made refers to \"Customer Name\" = 'Aimee Bixby';"}
{"sample_id": 2349, "db_id": "superstore", "final": {"question": "Please list the IDs of the orders made by Aimee Bixby with more than 3 kinds of products ordered.", "sql": "SELECT DISTINCT T2.'Order ID' FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T1.'Customer Name' = 'Aimee Bixby' GROUP BY T2.'Product ID' HAVING COUNT(T2.'Product ID') > 3", "source_tables": ["people", "central_superstore"]}, "evidence": "made by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby'; with more than 3 kinds of products ordered refers to count(\"Product ID\") > 3;"}
{"sample_id": 2350, "db_id": "superstore", "final": {"question": "Among the orders made by Aimee Bixby, how many of them included at least one kind of product under the category \"Furniture\"?", "sql": "SELECT COUNT(DISTINCT T2.'Order ID') FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T2.'Product ID' WHERE T3.Category = 'Furniture' AND T1.'Customer Name' = 'Aimee Bixby'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "made by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby';"}
{"sample_id": 2351, "db_id": "superstore", "final": {"question": "Please list the names of all the products ordered by Aimee Bixby in 2016.", "sql": "SELECT DISTINCT T3.'Product Name' FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T2.'Product ID' WHERE T1.'Customer Name' = 'Aimee Bixby' AND STRFTIME('%Y', T2.'Ship Date') = '2016'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "ordered by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby'; ordered n 2016 refers to strftime('%Y', \"Order Date\") = '2016';"}
{"sample_id": 2352, "db_id": "superstore", "final": {"question": "What is the total quantity of \"Telescoping Adjustable Floor Lamp\" ordered from central superstores?", "sql": "SELECT SUM(T1.Quantity) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T2.'Product Name' = 'Telescoping Adjustable Floor Lamp'", "source_tables": ["product", "central_superstore"]}, "evidence": "\"Telescoping Adjustable Floor Lamp\" is a \"Product Name\"; from central superstores refers to Region = 'Central';"}
{"sample_id": 2353, "db_id": "superstore", "final": {"question": "Please list the names of all the customers who had ordered the product \"Telescoping Adjustable Floor Lamp\".", "sql": "SELECT DISTINCT T1.'Customer Name' FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T2.'Product ID' WHERE T3.'Product Name' = 'Telescoping Adjustable Floor Lamp'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "\"Telescoping Adjustable Floor Lamp\" is a product name; names of all the customers refers to \"Customer Name\""}
{"sample_id": 2354, "db_id": "superstore", "final": {"question": "Among the customers who have ordered the product \"Telescoping Adjustable Floor Lamp\", how many of them are consumers?", "sql": "SELECT COUNT(DISTINCT T1.'Customer Name') FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T2.'Product ID' WHERE T3.'Product Name' = 'Telescoping Adjustable Floor Lamp' AND T1.Segment = 'Consumer'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "\"Telescoping Adjustable Floor Lamp\" is a \"Product Name\"; consumers refers to Segment = 'Consumer';"}
{"sample_id": 2355, "db_id": "superstore", "final": {"question": "What was the quantity of Xerox 1952 ordered by Aimee Bixby on 2014/9/10?", "sql": "SELECT SUM(T2.Quantity) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T2.'Product ID' WHERE T1.'Customer Name' = 'Aimee Bixby' AND T3.'Product Name' = 'Xerox 1952' AND T2.'Order Date' = '2014-09-10'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "Xerox 1952 is a \"Product Name\"; ordered by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby'; on 2014/9/10 refers to \"Order Date\" = date('2014-09-10');"}
{"sample_id": 2356, "db_id": "superstore", "final": {"question": "For how many times has Aimee Bixby ordered the product Xerox 1952?", "sql": "SELECT COUNT(DISTINCT T2.'Order ID') FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T2.'Product ID' WHERE T1.'Customer Name' = 'Aimee Bixby' AND T3.'Product Name' = 'Xerox 1952'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "Xerox 1952 is a \"Product Name\"; Aimee Bixby ordered refers to \"Customer Name\" = 'Aimee Bixby';"}
{"sample_id": 2357, "db_id": "superstore", "final": {"question": "What was the original price of Xerox 1952 ordered by Aimee Bixby on 2014/9/10?", "sql": "SELECT DISTINCT T2.Sales / (1 - T2.Discount) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T2.'Product ID' WHERE T1.'Customer Name' = 'Aimee Bixby' AND T3.'Product Name' = 'Xerox 1952' AND T2.'Order Date' = '2014-09-10'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "Xerox 1952 is a \"Product Name\"; ordered by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby'; on 2014/9/10 refers to \"Order Date\" = date('2014-09-10'); original price refers to DIVIDE(Sales, SUTRACT(1, discount))"}
{"sample_id": 2358, "db_id": "superstore", "final": {"question": "What was the total cost of Xerox 1952 ordered by Aimee Bixby on 2014/9/10?", "sql": "SELECT DISTINCT (T2.Sales / (1 - T2.discount)) * T2.Quantity - Profit FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T2.'Product ID' WHERE T1.'Customer Name' = 'Aimee Bixby' AND T3.'Product Name' = 'Xerox 1952' AND T2.'Order Date' = '2014-09-10'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "Xerox 1952 is a \"Product Name\"; ordered by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby'; on 2014/9/10 refers to \"Order Date\" = date('2014-09-10'); total cost refers to SUTRACT(MULTIPLY(DIVIDE(Sales, SUTRACT(1, discount)), Quantity), Profit)"}
{"sample_id": 2359, "db_id": "superstore", "final": {"question": "How many art products were ordered in 2013 in the east superstore?", "sql": "SELECT COUNT(DISTINCT T1.'Product ID') FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T2.'Sub-Category' = 'Art' AND T1.Region = 'East' AND STRFTIME('%Y', T1.'Order Date') = '2013'", "source_tables": ["product", "east_superstore"]}, "evidence": "ordered in 2013 refers to strftime('%Y', \"Order Date\") = '2013'; art products refers to \"Sub-Category\" = 'Art'"}
{"sample_id": 2360, "db_id": "superstore", "final": {"question": "Who is the customer who purchased the largest total cost of products in a single order?", "sql": "SELECT T2.'Customer Name' FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' GROUP BY T1.'Order ID', T2.'Customer Name' ORDER BY SUM((T1.Sales / (1 - T1.Discount)) * T1.Quantity - T1.Profit) DESC LIMIT 1", "source_tables": ["people", "east_superstore"]}, "evidence": "largest total cost refers to MAX(SUTRACT(MULTIPLY(DIVIDE(Sales, SUTRACT(1, discount)), Quantity), Profit))"}
{"sample_id": 2361, "db_id": "superstore", "final": {"question": "What is the name of the product that has the highest original price?", "sql": "SELECT T2.'Product Name' FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' ORDER BY (T1.Sales / (1 - T1.Discount)) DESC LIMIT 1", "source_tables": ["product", "east_superstore"]}, "evidence": "has the highest original price refers to MAX(DIVIDE(Sales, SUTRACT(1, discount))); name of the product refers to \"Product Name\""}
{"sample_id": 2362, "db_id": "superstore", "final": {"question": "What is the name of the product that was ordered recently by Darren Powers?", "sql": "SELECT T3.'Product Name' FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T2.'Product ID' WHERE T1.'Customer Name' = 'Darren Powers' ORDER BY T2.'Order Date' DESC LIMIT 1", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "Darren Powers is the \"Customer Name\"; name of the product refers to \"Product Name\"; recently refers to MAX(\"Order Date\")"}
{"sample_id": 2363, "db_id": "superstore", "final": {"question": "How many quantities of Advantus plastic paper clips were ordered overall?", "sql": "SELECT SUM(T1.Quantity) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T2.'Product Name' = 'Advantus Plastic Paper Clips'", "source_tables": ["product", "central_superstore"]}, "evidence": "Advantus plastic paper clips is the \"Product Name\";"}
{"sample_id": 2364, "db_id": "superstore", "final": {"question": "Which order of Logitech G600 MMO Gaming Mouse has the highest total cost?", "sql": "SELECT T1.'Order ID' FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T2.'Product Name' = 'Logitech G600 MMO Gaming Mouse' GROUP BY T1.'Order ID' ORDER BY SUM((T1.Sales / (1 - T1.Discount)) * T1.Quantity - T1.Profit) DESC LIMIT 1", "source_tables": ["product", "central_superstore"]}, "evidence": "Logitech G600 MMO Gaming Mouse refers to \"Product Name\"; highest total cost refers to MAX(SUTRACT(MULTIPLY(DIVIDE(Sales, SUTRACT(1, discount)), Quantity), Profit))"}
{"sample_id": 2365, "db_id": "superstore", "final": {"question": "What are the names of the products that were ordered by Alejandro Grove?", "sql": "SELECT DISTINCT T3.'Product Name' FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T1.'Product ID' WHERE T2.'Customer Name' = 'Alejandro Grove'", "source_tables": ["people", "west_superstore", "product"]}, "evidence": "ordered by Alejandro Grove refers to \"Customer Name\" = 'Alejandro Grove'; names of the products refers to \"Product Name\""}
{"sample_id": 2366, "db_id": "superstore", "final": {"question": "How many customers in Chicago ordered at least 10 Cardinal EasyOpen D-Ring Binders in a single order?", "sql": "SELECT COUNT(DISTINCT T1.'Customer ID') FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T1.'Product ID' WHERE T3.'Product Name' = 'Cardinal EasyOpen D-Ring Binders' AND T2.City = 'Chicago' AND T1.Quantity > 10", "source_tables": ["people", "west_superstore", "product"]}, "evidence": "at least 10 goods refers to Quantity > = 14; Cardinal EasyOpen D-Ring Binders refers to \"Product Name\"; customers in Chicago refers to City = 'Chicago'"}
{"sample_id": 2367, "db_id": "superstore", "final": {"question": "What are the names of the products with a profit of no less than 1,000 in one single order?", "sql": "SELECT DISTINCT T2.'Product Name' FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T1.Profit > 1000", "source_tables": ["product", "west_superstore"]}, "evidence": "profit of no less than 1,000 refers to Profit > = 1000; names of the products refers to \"Product Name\""}
{"sample_id": 2368, "db_id": "superstore", "final": {"question": "Name 10 products that were shipped first class from the East region.", "sql": "SELECT T2.'Product Name' FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T1.'Ship Mode' = 'First Class' AND T2.Region = 'East' LIMIT 10", "source_tables": ["product", "east_superstore"]}, "evidence": "shipped first class refers to \"Ship Mode\" = 'First Class'; Region = 'East'"}
{"sample_id": 2369, "db_id": "superstore", "final": {"question": "List the products ordered by Becky Martin around the Central region.", "sql": "SELECT DISTINCT T3.'Product Name' FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T2.'Product ID' WHERE T1.'Customer Name' = 'Becky Martin' AND T3.Region = 'Central'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "ordered by Becky Martin refers to \"Customer Name\" = 'Becky Martin'; Region = 'Central'; products refers to \"Product Name\""}
{"sample_id": 2370, "db_id": "superstore", "final": {"question": "List 5 customers in the West region who had their item shipped 'Second Class.'", "sql": "SELECT DISTINCT T2.'Customer Name' FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T1.Region = 'West' AND T1.'Ship Mode' = 'Second Class' LIMIT 5", "source_tables": ["people", "west_superstore"]}, "evidence": "shipped 'Second Class.' refers to \"Ship Mode\" = 'Second Class'; customers refers to \"Customer Name\"; Region = 'West'"}
{"sample_id": 2371, "db_id": "superstore", "final": {"question": "Add the total profit of Patrick Gardner in the Central region.", "sql": "SELECT SUM(T2.Profit) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T1.'Customer Name' = 'Patrick Gardner' AND T1.Region = 'Central'", "source_tables": ["people", "central_superstore"]}, "evidence": "Patrick Gardner is the \"Customer Name\"; Region = 'Central'"}
{"sample_id": 2372, "db_id": "superstore", "final": {"question": "Which item was shipped on 3/4/2013 and scheduled for same day delivery in the South region?", "sql": "SELECT T2.'Product Name' FROM south_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T1.'Ship Date' = '2013-03-04' AND T2.Region = 'South' AND T1.'Order Date' = '2013-03-04'", "source_tables": ["south_superstore", "product"]}, "evidence": "shipped on 3/4/2013 refers to \"Order Date\" = date('2013-03-04'); same day delivery refers to \"Ship Mode\" = 'Same Day'; item refers to \"Product Name\""}
{"sample_id": 2373, "db_id": "superstore", "final": {"question": "What is the total sales of 'Avery Hi-Liter EverBold Pen Style Fluorescent Highlighters, 4/Pack' in the Central region?", "sql": "SELECT SUM(T1.Sales) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T2.'Product Name' = 'Avery Hi-Liter EverBold Pen Style Fluorescent Highlighters, 4/Pack' AND T2.Region = 'Central'", "source_tables": ["product", "central_superstore"]}, "evidence": "'Avery Hi-Liter EverBold Pen Style Fluorescent Highlighters, 4/Pack' is the \"Product Name\";"}
{"sample_id": 2374, "db_id": "superstore", "final": {"question": "Name the item ordered by Jonathan Doherty with the highest quantity in the East region.", "sql": "SELECT T3.'Product Name' FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T1.'Product ID' WHERE T2.'Customer Name' = 'Jonathan Doherty' AND T2.Region = 'East' ORDER BY T1.Quantity DESC LIMIT 1", "source_tables": ["people", "east_superstore", "product"]}, "evidence": "Jonathan Doherty is the \"Customer Name\"; highest quantity refers to MAX(Quantity); Region = 'East'"}
{"sample_id": 2375, "db_id": "superstore", "final": {"question": "How much is the total quantity of items from the East region shipped on 3/25/2015? Name the products.", "sql": "SELECT SUM(T1.Quantity), T2.'Product Name' FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T1.'Ship Date' = '2015-03-25' AND T2.Region = 'East'", "source_tables": ["product", "east_superstore"]}, "evidence": "shipped on 3/25/2015 refers to \"Ship Date\" = Date('2015-03-25');"}
{"sample_id": 2376, "db_id": "superstore", "final": {"question": "Which customer ordered 'Global High-Back Leather Tilter, Burgundy' on 10/13/2013 in the East region?", "sql": "SELECT DISTINCT T2.'Customer Name' FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T1.'Product ID' WHERE T3.'Product Name' = 'Global High-Back Leather Tilter, Burgundy' AND T1.'Order Date' = '2013-10-13' AND T1.Region = 'East'", "source_tables": ["people", "east_superstore", "product"]}, "evidence": "'Global High-Back Leather Tilter, Burgundy' is the \"Product Name\"; on 10/13/2013 refers to \"Order Date\" = Date('2013-10-13'); Region = 'East'"}
{"sample_id": 2377, "db_id": "superstore", "final": {"question": "What category does the item ordered by Katherine Murray on 11/4/2018 in the South region belong to?", "sql": "SELECT DISTINCT T3.Category FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T1.'Product ID' WHERE T2.'Customer Name' = 'Katherine Murray' AND T1.'Order Date' = '2018-11-04' AND T2.Region = 'South'", "source_tables": ["south_superstore", "people", "product"]}, "evidence": "ordered by Katherine Murray refers to \"Customer Name\" = 'Katherine Murray'; on 11/4/2018 refers to \"Order Date\" = Date('2018-11-04');"}
{"sample_id": 2378, "db_id": "superstore", "final": {"question": "What percentage do items under the category of 'Furniture' make up the total number of items ordered that are shipped as standard in the West region?", "sql": "SELECT CAST(SUM(CASE  WHEN T2.Category = 'Furniture' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(T1.Quantity) FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T2.Region = 'West' AND T1.'Ship Mode' = 'Standard Class'", "source_tables": ["product", "west_superstore"]}, "evidence": "shipped as standard refers to \"Ship Mode\" = 'Standard Class'; Region = 'West'; percentage refers to DIVIDE(SUM(Quantity where Category = 'Furniture'), SUM(Quantity)) * 1.0"}
{"sample_id": 2379, "db_id": "superstore", "final": {"question": "What is the ship date of the order by the customer named Ann Chong in the central region?", "sql": "SELECT T2.'Ship Date' FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T1.'Customer Name' = 'Ann Chong' AND T1.Region = 'Central'", "source_tables": ["people", "central_superstore"]}, "evidence": "Ann Chong' is the \"Customer Name\"; Region = 'Central'"}
{"sample_id": 2380, "db_id": "superstore", "final": {"question": "Give the customer segment from the West region that orders the order ID CA-2011-108189.", "sql": "SELECT DISTINCT T2.Segment FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T1.Region = 'West' AND T1.'Order ID' = 'CA-2011-108189'", "source_tables": ["people", "west_superstore"]}, "evidence": "Region = 'West'"}
{"sample_id": 2381, "db_id": "superstore", "final": {"question": "What are the total sales of the accumulated orders of Hon Valutask Swivel Chairs in the West region?", "sql": "SELECT SUM(T1.Sales) FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T2.'Product Name' = 'Hon Valutask Swivel Chairs' AND T1.Region = 'West'", "source_tables": ["product", "west_superstore"]}, "evidence": "'Hon Valutask Swivel Chairs' is the \"Product Name\""}
{"sample_id": 2382, "db_id": "superstore", "final": {"question": "Provide the order ID of Frank Olsen of the South region.", "sql": "SELECT T1.'Order ID' FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T2.Region = 'South' AND T2.'Customer Name' = 'Frank Olsen'", "source_tables": ["south_superstore", "people"]}, "evidence": "Frank Olsen' is the \"Customer Name\"; Region = 'South'"}
{"sample_id": 2383, "db_id": "superstore", "final": {"question": "What product was ordered in the Central region on April 26, 2018, and shipped by April 27, 2018?", "sql": "SELECT T2.'Product Name' FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T1.'Order Date' = '2018-04-26' AND T1.'Ship Date' = '2018-04-27' AND T2.Region = 'Central'", "source_tables": ["product", "central_superstore"]}, "evidence": "on April 26, 2018 refers to \"Order Date\" = date('2018-04-26'); shipped by April 27, 2018 refers to \"Ship Date\" = date('2018-04-27');"}
{"sample_id": 2384, "db_id": "superstore", "final": {"question": "From which city and state does the customer that bought the product with the highest sales?", "sql": "SELECT T5.City, T5.State FROM west_superstore AS T1 INNER JOIN east_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN central_superstore AS T3 ON T3.'Customer ID' = T2.'Customer ID' INNER JOIN south_superstore AS T4 ON T4.'Customer ID' = T3.'Customer ID' INNER JOIN people AS T5 ON T5.'Customer ID' = T4.'Customer ID' ORDER BY T2.Sales DESC LIMIT 1", "source_tables": ["south_superstore", "east_superstore", "west_superstore", "people", "central_superstore"]}, "evidence": "highest sales refers to max(Sales)"}
{"sample_id": 2385, "db_id": "superstore", "final": {"question": "Who is the customer from the East region that purchased the order with the highest profit?", "sql": "SELECT T2.'Customer Name' FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T1.Region = 'East' ORDER BY T1.Profit DESC LIMIT 1", "source_tables": ["people", "east_superstore"]}, "evidence": "highest profit refers to MAX(profit); Region = 'East'"}
{"sample_id": 2386, "db_id": "superstore", "final": {"question": "Among the customers from Chicago, Illinois, what is the highest quantity of products bought in a single order?", "sql": "SELECT T1.Quantity FROM west_superstore AS T1 INNER JOIN east_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN central_superstore AS T3 ON T3.'Customer ID' = T2.'Customer ID' INNER JOIN south_superstore AS T4 ON T4.'Customer ID' = T3.'Customer ID' INNER JOIN people AS T5 ON T5.'Customer ID' = T4.'Customer ID' WHERE T5.City = 'Chicago' AND T5.State = 'Illinois' ORDER BY T1.Quantity DESC LIMIT 1", "source_tables": ["south_superstore", "east_superstore", "west_superstore", "people", "central_superstore"]}, "evidence": "from Chicago refers to City = 'Chicago'; Illinois refers to State = 'Illinois'; highest quantity refers to max(Quantity)"}
{"sample_id": 2387, "db_id": "superstore", "final": {"question": "What are the order date and product name of the order ID CA-2011-137274 from the Central region?", "sql": "SELECT T1.'Order Date', T2.'Product Name' FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T1.'Order ID' = 'CA-2011-137274' AND T2.Region = 'Central'", "source_tables": ["product", "central_superstore"]}, "evidence": ""}
{"sample_id": 2388, "db_id": "superstore", "final": {"question": "List down the customers that purchased the product named Xerox 23 in the South region.", "sql": "SELECT DISTINCT T2.'Customer Name' FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T1.'Product ID' WHERE T1.Region = 'South' AND T3.'Product Name' = 'Xerox 23'", "source_tables": ["south_superstore", "people", "product"]}, "evidence": "product named Xerox 23 refers to \"Product Name\" = 'Xerox 23'; customers refers to \"Customer Name\""}
{"sample_id": 2389, "db_id": "superstore", "final": {"question": "Among the products under the office supplies category, what is the product that made the highest sales in the Central region?", "sql": "SELECT T2.'Product Name' FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T2.Category = 'Office Supplies' AND T2.Region = 'Central' ORDER BY T1.Sales DESC LIMIT 1", "source_tables": ["product", "central_superstore"]}, "evidence": "made the highest sales refers to MAX(Sales)"}
{"sample_id": 2390, "db_id": "superstore", "final": {"question": "Who is the customer from the West region that received the highest discount?", "sql": "SELECT T2.'Customer Name' FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T1.Region = 'West' ORDER BY T1.Discount DESC LIMIT 1", "source_tables": ["people", "west_superstore"]}, "evidence": "received the highest discount refers to MAX(discount); customer refers to \"Customer Name\""}
{"sample_id": 2391, "db_id": "superstore", "final": {"question": "Provide the names of the products with a profit greater than 98% of the average profit of all products in the East region.", "sql": "SELECT DISTINCT T2.'Product Name' FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T2.Region = 'East' AND T1.Profit > ( SELECT AVG(Profit) * 0.98 FROM east_superstore )", "source_tables": ["product", "east_superstore"]}, "evidence": "names of the products refers to \"Product Name\";\u00a0 profit greater than 98% of the average profit refers to Profit > MULTIPLY(AVG(Profit), 0.98)"}
{"sample_id": 2392, "db_id": "superstore", "final": {"question": "Name the customers from the Eastern region whose orders cost above 80000.", "sql": "SELECT DISTINCT T2.'Customer Name' FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T1.Region = 'East' AND T1.Sales / (1 - T1.Discount) * T1.Quantity - T1.Profit > 80000", "source_tables": ["people", "east_superstore"]}, "evidence": "cost above 80000 refers to SUTRACT(MULTIPLY(DIVIDE(Sales, SUTRACT(1, discount)), Quantity), Profit) > 80000"}
{"sample_id": 2393, "db_id": "superstore", "final": {"question": "How many orders were made by Maxwell Schwartz in 2015?", "sql": "SELECT COUNT(DISTINCT T1.'Order ID') FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T2.'Customer Name' = 'Maxwell Schwartz' AND STRFTIME('%Y', T1.'Order Date') = '2015'", "source_tables": ["people", "east_superstore"]}, "evidence": "Maxwell Schwartz' is the \"Customer Name\"; in 2015 refers to strftime('%Y', \"Order Date\") = '2015';"}
{"sample_id": 2394, "db_id": "superstore", "final": {"question": "Who ordered the Bush Mission Pointe Library in the Central Region?", "sql": "SELECT DISTINCT T2.'Customer Name' FROM central_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T1.'Product ID' WHERE T3.'Product Name' = 'Bush Mission Pointe Library' AND T3.Region = 'Central'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "Bush Mission Pointe Library' is the \"Product Name\";"}
{"sample_id": 2395, "db_id": "superstore", "final": {"question": "Calculate the total profit by Cisco SPA301 for all regions.", "sql": "SELECT SUM(T1.Profit) + SUM(T2.Profit) + SUM(T3.Profit) + SUM(T4.Profit) AS totalProfit FROM west_superstore AS T1 INNER JOIN east_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN central_superstore AS T3 ON T3.'Customer ID' = T2.'Customer ID' INNER JOIN south_superstore AS T4 ON T4.'Customer ID' = T3.'Customer ID' INNER JOIN product AS T5 ON T5.'Product ID' = T4.'Product ID' WHERE T5.'Product Name' = 'Cisco SPA301'", "source_tables": ["south_superstore", "product", "east_superstore", "west_superstore", "central_superstore"]}, "evidence": "Cisco SPA301' is the \"Product Name\"; all regions refers to central_superstore, south_superstore, west_superstore, east_superstore"}
{"sample_id": 2396, "db_id": "superstore", "final": {"question": "List the products that were ordered by Anne McFarland from the Western store.", "sql": "SELECT DISTINCT T3.'Product Name' FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T1.'Product ID' WHERE T2.'Customer Name' = 'Anne McFarland'", "source_tables": ["people", "west_superstore", "product"]}, "evidence": "Anne McFarland' is the \"Customer Name\"; Western store refers to west_superstore; products refers to \"Product Name\""}
{"sample_id": 2397, "db_id": "superstore", "final": {"question": "List the products ordered by customers in Coachella.", "sql": "SELECT DISTINCT T3.'Product Name' FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T1.'Product ID' WHERE T2.City = 'Coachella'", "source_tables": ["people", "west_superstore", "product"]}, "evidence": "in Coachella refers to City = 'Coachella'; products refers to \"Product Name\""}
{"sample_id": 2398, "db_id": "superstore", "final": {"question": "Compare the numbers of orders between the Eastern and Western stores in 2015.", "sql": "SELECT east, west FROM ( SELECT COUNT('Order ID') AS east , ( SELECT COUNT('Order ID') FROM west_superstore WHERE 'Order Date' LIKE '2015%' ) AS west FROM east_superstore WHERE 'Order Date' LIKE '2015%' )", "source_tables": ["east_superstore", "west_superstore"]}, "evidence": "in 2015 refers to strftime('%Y', \"Order Date\") = '2015'; Eastern store refers to east_superstore; Western store refers west_superstore;"}
{"sample_id": 2399, "db_id": "superstore", "final": {"question": "List the products ordered by Matt Abelman from the Western store in 2013.", "sql": "SELECT DISTINCT T3.'Product Name' FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T1.'Product ID' WHERE T2.'Customer Name' = 'Matt Abelman' AND STRFTIME('%Y', T1.'Order Date') = '2013'", "source_tables": ["people", "west_superstore", "product"]}, "evidence": "ordered by Matt Abelman refers to \"Customer Name\" = 'Matt Abelman'; in 2013 refers to \"Order Date\" like '2013%'"}
{"sample_id": 2400, "db_id": "superstore", "final": {"question": "Calculate the total cost of the orders by Brad Thomas in 2016.", "sql": "SELECT SUM((T1.Sales / (1 - T1.Discount)) * T1.Quantity - T1.Profit) AS cost FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T1.'Product ID' = T3.'Product ID' AND T1.Region = T3.Region WHERE T1.Region = 'East' AND T2.'Customer Name' = 'Brad Thomas' AND strftime('%Y', T1.'Order Date') = '2016'", "source_tables": ["people", "east_superstore", "product"]}, "evidence": "Brad Thomas is the \"Customer Name\"; in 2016 refers to strftime('%Y', \"Order Date\") = '2016'; total cost refers to SUM(SUTRACT(MULTIPLY(DIVIDE(Sales, SUTRACT(1, discount)), Quantity), Profit))"}
{"sample_id": 2401, "db_id": "superstore", "final": {"question": "Provide the names, cities, and countries of the customers who ordered the Plantronics single ear headset.", "sql": "SELECT DISTINCT T2.'Customer Name', T2.City, T2.Country FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T1.'Product ID' WHERE T3.'Product Name' = 'Plantronics Single Ear Headset'", "source_tables": ["people", "west_superstore", "product"]}, "evidence": "Plantronics Single Ear Headset' is the \"Product Name\"; name refers to \"Customer Name\";"}
{"sample_id": 2402, "db_id": "superstore", "final": {"question": "Provide the shipping dates and products of the orders by Gene Hale.", "sql": "SELECT DISTINCT T2.'Ship Date', T3.'Product Name' FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T2.'Product ID' WHERE T1.'Customer Name' = 'Gene Hale'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "Gene Hale' refers to \"Customer Name\"; shipping date refers to \"Ship Date\"; products refers to \"Product Name\""}
{"sample_id": 2403, "db_id": "superstore", "final": {"question": "How many orders in the south superstore with the fastest delivery are items of furniture?", "sql": "SELECT COUNT(T1.'Order ID') FROM south_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T1.'Ship Mode' = 'First Class' AND T2.Category = 'Furniture'", "source_tables": ["south_superstore", "product"]}, "evidence": "fastest delivery refers to Ship Mode = 'First Class'; furniture refers to Category = 'Furniture'"}
{"sample_id": 2404, "db_id": "superstore", "final": {"question": "How many office supply orders were made by Cindy Stewart in the south superstore?", "sql": "SELECT COUNT(*) FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T1.'Product ID' WHERE T3.Category = 'Office Supplies' AND T2.'Customer Name' = 'Cindy Stewart'", "source_tables": ["south_superstore", "people", "product"]}, "evidence": "office supply refers to Category = 'Office Supplies'"}
{"sample_id": 2405, "db_id": "superstore", "final": {"question": "What product category got the highest profit in the south superstore?", "sql": "SELECT T2.Category FROM south_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' ORDER BY T1.Profit DESC LIMIT 1", "source_tables": ["south_superstore", "product"]}, "evidence": "highest profit refers to MAX(Profit)"}
{"sample_id": 2406, "db_id": "superstore", "final": {"question": "List the name of all products that Cindy Stewart ordered in the east superstore.", "sql": "SELECT T3.'Product Name' FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T1.'Product ID' WHERE T2.'Customer Name' = 'Cindy Stewart'", "source_tables": ["south_superstore", "people", "product"]}, "evidence": "name of all products refers to Product Name; Cindy Stewart is the Customer Name;"}
{"sample_id": 2407, "db_id": "superstore", "final": {"question": "List the name of all products in the west superstore that customers chose for same-day shipment in the year 2013.", "sql": "SELECT T2.'Product Name' FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T1.'Ship Mode' = 'Same Day' AND T1.'Ship Date' LIKE '2013%'", "source_tables": ["product", "west_superstore"]}, "evidence": "name of all products refers to Product Name; same-day shipment refers to \"Ship Mode\" = 'Same Day'; year 2013 refers to \"Ship Date\" BETWEEN '2013-01-01' AND '2013-12-31'"}
{"sample_id": 2408, "db_id": "superstore", "final": {"question": "What product category that Sam Craven ordered from the central and east superstore?", "sql": "SELECT DISTINCT T3.Category FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T1.'Product ID' LEFT JOIN central_superstore AS T4 ON T3.'Product ID' = T4.'Product ID' WHERE T2.'Customer Name' = 'Sam Craven'", "source_tables": ["people", "east_superstore", "central_superstore", "product"]}, "evidence": ""}
{"sample_id": 2409, "db_id": "superstore", "final": {"question": "What is the total quantity that Cindy Stewart order \"Lexmark X 9575 Professional All-in-One Color Printer\" in the south superstore?", "sql": "SELECT SUM(T1.Quantity) FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T1.'Product ID' WHERE T2.'Customer Name' = 'Cindy Stewart' AND T3.'Product Name' = 'Lexmark X 9575 Professional All-in-One Color Printer'", "source_tables": ["south_superstore", "people", "product"]}, "evidence": "Lexmark X 9575 Professional All-in-One Color Printer' is the \"Product Name\""}
{"sample_id": 2410, "db_id": "superstore", "final": {"question": "List the name of all the products with order quantities greater than or equal to 10 in the central superstore that has been shipped by the slowest delivery method.", "sql": "SELECT DISTINCT T2.'Product Name' FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T1.'Ship Mode' = 'Standard Class' AND T1.Quantity >= 10", "source_tables": ["product", "central_superstore"]}, "evidence": "name of all the products refers to Product Name; order quantities greater than or equal to 10 refers to COUNT(\"Order ID\") > = 10; slowest delivery refers to \"Ship Mode\" = 'Standard Class'"}
{"sample_id": 2411, "db_id": "superstore", "final": {"question": "What product category got the least sales in the west superstore?", "sql": "SELECT T2.Category FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' ORDER BY T1.Sales LIMIT 1", "source_tables": ["product", "west_superstore"]}, "evidence": "least sales refers to Sales = MIN(Sales)"}
{"sample_id": 2412, "db_id": "superstore", "final": {"question": "What is the total profit of \"Memorex Froggy Flash Drive 8 GB in south superstore?", "sql": "SELECT SUM(T1.Profit) FROM south_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' GROUP BY T2.'Product Name' = 'Memorix Froggy Flash Drive 8 GB'", "source_tables": ["south_superstore", "product"]}, "evidence": "\"Memorix Froggy Flash Drive 8 GB\" is the \"Product Name\""}
{"sample_id": 2413, "db_id": "superstore", "final": {"question": "What is the total sales of furniture products in the east superstore in the year 2016.\n", "sql": "SELECT SUM(T1.Sales) FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE STRFTIME('%Y', T1.'Order Date') = '2016' AND T2.Category = 'Furniture'", "source_tables": ["product", "east_superstore"]}, "evidence": "furniture products refers to Category = 'Furnitures'; in the year 2016 refers to \"Order Date\" BETWEEN '2016-01-01' AND '2016-12-31'"}
{"sample_id": 2461, "db_id": "shooting", "final": {"question": "Among all the male officers, what is the percentage of them are White?", "sql": "SELECT CAST(SUM(IIF(race = 'W', 1, 0)) AS REAL) * 100 / COUNT(case_number) FROM officers WHERE gender = 'M'", "source_tables": ["officers"]}, "evidence": "male refers to gender = 'M'; white refers to race = 'W'; percentage = divide(count(officers where race = 'W'), count(officers)) where gender = 'M' * 100%"}
{"sample_id": 2462, "db_id": "shooting", "final": {"question": "What is the percentage of the cases involved more than 3 officers from year 2010 to 2015?", "sql": "SELECT CAST(SUM(IIF(officer_count > 3, 1, 0)) AS REAL) * 100 / COUNT(case_number) FROM incidents WHERE STRFTIME('%Y', date) BETWEEN '2010' AND '2015'", "source_tables": ["incidents"]}, "evidence": "more than 3 officers refers to officer_count > 3; from year 2010 to 2015 refers to date between '2010-01-01' and '2015-12-31'; percentage = divide(count(case_number where officer_count > 3), count(case_number)) where date between '2010-01-01' and '2015-12-31' * 100%"}
{"sample_id": 2463, "db_id": "shooting", "final": {"question": "In which year has the greatest number of cases where Handgun was used as weapon?", "sql": "SELECT STRFTIME('%Y', date) FROM incidents WHERE subject_weapon = 'Handgun' GROUP BY STRFTIME('%Y', date) ORDER BY COUNT(case_number) DESC LIMIT 1", "source_tables": ["incidents"]}, "evidence": "year refers to year(date); the greatest number of cases refers to max(count(case_number)); OS Spray was used as weapon refers to subject_weapon = 'OS Spray'"}
{"sample_id": 2464, "db_id": "shooting", "final": {"question": "Among the cases dismissed by the grand jury disposition, what percentage of cases is where the subject is injured?", "sql": "SELECT CAST(SUM(subject_statuses = 'Injured') AS REAL) * 100 / COUNT(case_number) FROM incidents WHERE grand_jury_disposition = 'No Bill'", "source_tables": ["incidents"]}, "evidence": "dismissed by the grand jury disposition refers to grand_jury_disposition = 'No Bill'; the subject is injured refers to subject_statuses = 'injured'; percentage = divide(count(incidents where subject_statuses = 'injured'), count(incidents)) where grand_jury_disposition = 'No Bill' * 100%"}
{"sample_id": 2465, "db_id": "shooting", "final": {"question": "Did the number of cases with Vehicle as subject weapon increase or decrease from year 2007 to 2008. State the difference.", "sql": "SELECT SUM(IIF(STRFTIME('%Y', date) = '2007', 1, 0)) - SUM(IIF(STRFTIME('%Y', date) = '2008', 1, 0)) FROM incidents WHERE subject_weapon = 'Vehicle'", "source_tables": ["incidents"]}, "evidence": "number of cases refers to count(case_number); with Vehicle as subject weapon refers to subject_weapon = 'Vehicle'; year 2007 refers to date between '2007-01-01' and '2007-12-31'; year 2008 refers to date between '2008-01-01' and '2008-12-31'"}
{"sample_id": 2466, "db_id": "shooting", "final": {"question": "Among the 'Handgun' weapon used by subject, how many percent were 'Shoot and Miss'?", "sql": "SELECT CAST(SUM(subject_statuses = 'Shoot and Miss') AS REAL) * 100 / COUNT(case_number) FROM incidents WHERE subject_weapon = 'Handgun'", "source_tables": ["incidents"]}, "evidence": "'Handgun' weapon refers to subject_weapon = 'Handgun'; 'Shoot and Miss' refers to subject_statuses = 'Shoot and Miss'; percent = divide(count(incidents where subject_statuses = 'Shoot and Miss'), count(incidents)) where subject_weapon = 'Handgun' * 100%"}
{"sample_id": 2467, "db_id": "shooting", "final": {"question": "Who are the officers involved in cases that are voted as 'No Bill'. List their last name and gender.", "sql": "SELECT T2.last_name, T2.gender FROM incidents AS T1 INNER JOIN officers AS T2 ON T1.case_number = T2.case_number WHERE T1.grand_jury_disposition = 'No Bill'", "source_tables": ["incidents", "officers"]}, "evidence": "voted as 'No Bill' refers to grand_jury_disposition = 'No Bill'"}
{"sample_id": 2468, "db_id": "shooting", "final": {"question": "Which are the cases where the subject are female. List the case number, subject status and weapon.", "sql": "SELECT T1.case_number, T1.subject_statuses, T1.subject_weapon FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T2.gender = 'F'", "source_tables": ["incidents", "subjects"]}, "evidence": "female refers to gender = 'F'; weapon refers to subject_weapon"}
{"sample_id": 2469, "db_id": "shooting", "final": {"question": "From the cases where the subject are male, list the case number and the location and subject status.", "sql": "SELECT T1.case_number, T1.location, T1.subject_statuses FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T2.gender = 'M'", "source_tables": ["incidents", "subjects"]}, "evidence": "male refers to gender = 'M'"}
{"sample_id": 2470, "db_id": "shooting", "final": {"question": "For case(s) where officer 'Evenden, George' is in charged, state the case number and the grand jury disposition?", "sql": "SELECT T1.case_number, T1.grand_jury_disposition FROM incidents AS T1 INNER JOIN officers AS T2 ON T1.case_number = T2.case_number WHERE T2.first_name = 'George' AND T2.last_name = 'Evenden'", "source_tables": ["incidents", "officers"]}, "evidence": "officer 'Evenden, George' refers to full_name = 'Evenden, George'"}
{"sample_id": 2471, "db_id": "shooting", "final": {"question": "For case number '134472-2015', list the last name of the officers involved and state the subject statuses.", "sql": "SELECT T2.last_name, T1.subject_statuses FROM incidents AS T1 INNER JOIN officers AS T2 ON T1.case_number = T2.case_number WHERE T1.case_number = '134472-2015'", "source_tables": ["incidents", "officers"]}, "evidence": ""}
{"sample_id": 2472, "db_id": "shooting", "final": {"question": "From the cases where the subject were deceased, list the subject's last name, gender, race and case number.", "sql": "SELECT T2.last_name, T2.gender, T2.race, T2.case_number FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T1.subject_statuses = 'Deceased'", "source_tables": ["incidents", "subjects"]}, "evidence": "subject were deceased refers to subject_statuses = 'Deceased'"}
{"sample_id": 2473, "db_id": "shooting", "final": {"question": "What is the percentage of subject who are female used the Vehicle as weapon?", "sql": "SELECT CAST(SUM(T1.subject_weapon = 'Vehicle') AS REAL) * 100 / COUNT(T1.case_number) FROM incidents T1 INNER JOIN subjects T2 ON T1.case_number = T2.case_number WHERE T2.gender = 'F'", "source_tables": ["incidents", "subjects"]}, "evidence": "female refers to gender = 'F'; use Vehicle as weapon refers to subject_weapon = 'Vehicle'; percentage = divide(count(case_number where subject_weapon = 'Vehicle'), count(case_number)) where gender = 'F' * 100%"}
{"sample_id": 2474, "db_id": "shooting", "final": {"question": "From the 'Injured' statuses of the subject, what is the ratio of weapons used are knife against handgun?", "sql": "SELECT CAST(SUM(T1.subject_weapon = 'Knife') AS REAL) * 100 / SUM(T1.subject_weapon = 'Handgun') FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T1.subject_statuses = 'Injured'", "source_tables": ["incidents", "subjects"]}, "evidence": "the 'Shoot and Miss' status refers to subject_statuses = 'Shoot and Miss'; knife refers to subject_weapon = 'knife'; toy handgun refers to subject_weapon = 'toy handgun'; ratio = divide(count(case_number where subject_weapon = 'knife'), count(case_number where subject_weapon = 'toy handgun')) where subject_statuses = 'Shoot and Miss'"}
{"sample_id": 2475, "db_id": "shooting", "final": {"question": "List all cases from the year 2012 in which the subject was deceased", "sql": "SELECT case_number FROM incidents WHERE STRFTIME('%Y', date) > '2011' AND subject_statuses = 'Deceased'", "source_tables": ["incidents"]}, "evidence": "case refers to case_number; year 2012 refers to date between '2012-01-01' and '2012-12-31'; subject was deceased refers to subject_statuses = 'Deceased'"}
{"sample_id": 2476, "db_id": "shooting", "final": {"question": "Of all male officers, what percentage are black officers?", "sql": "SELECT CAST(SUM(race = 'B') AS REAL) * 100 / COUNT(case_number) FROM officers WHERE gender = 'M'", "source_tables": ["officers"]}, "evidence": "male refers to gender = 'M'; black refers to race = 'B'; percentage = divide(count(officers where race = 'B'), count(officers)) where gender = 'M' * 100%"}
{"sample_id": 2489, "db_id": "genes", "final": {"question": "For the genes that are located in the plasma membrane, please list their number of chromosomes.", "sql": "SELECT T1.Chromosome FROM Genes AS T1 INNER JOIN Classification AS T2 ON T1.GeneID = T2.GeneID WHERE T2.Localization = 'plasma membrane'", "source_tables": ["classification", "genes"]}, "evidence": ""}
{"sample_id": 2490, "db_id": "genes", "final": {"question": "How many non-essential genes are located in the nucleus?", "sql": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Classification AS T2 ON T1.GeneID = T2.GeneID WHERE T2.Localization = 'nucleus' AND T1.Essential = 'Non-Essential'", "source_tables": ["classification", "genes"]}, "evidence": ""}
{"sample_id": 2491, "db_id": "genes", "final": {"question": "Among the genes with nucleic acid metabolism defects, how many of them can be found in the vacuole?", "sql": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Classification AS T2 ON T1.GeneID = T2.GeneID WHERE T2.Localization = 'vacuole' AND T1.Phenotype = 'Nucleic acid metabolism defects'", "source_tables": ["classification", "genes"]}, "evidence": ""}
{"sample_id": 2492, "db_id": "genes", "final": {"question": "Please list the location of the genes that have the most chromosomes.", "sql": "SELECT T2.Localization FROM Genes AS T1 INNER JOIN Classification AS T2 ON T1.GeneID = T2.GeneID ORDER BY T1.Chromosome DESC LIMIT 1", "source_tables": ["classification", "genes"]}, "evidence": ""}
{"sample_id": 2493, "db_id": "genes", "final": {"question": "Among the pairs of genes that are both located in the nucleus, what is the highest expression correlation score?", "sql": "SELECT T2.Expression_Corr FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 INNER JOIN Genes AS T3 ON T3.GeneID = T2.GeneID2 WHERE T1.Localization = 'nucleus' AND T3.Localization = 'nucleus' ORDER BY T2.Expression_Corr DESC LIMIT 1", "source_tables": ["interactions", "genes"]}, "evidence": ""}
{"sample_id": 2494, "db_id": "genes", "final": {"question": "What are the functions of the pair of genes that have the lowest expression correlation score?a", "sql": "SELECT T1.Function FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 ORDER BY T2.Expression_Corr ASC LIMIT 1", "source_tables": ["interactions", "genes"]}, "evidence": ""}
{"sample_id": 2495, "db_id": "genes", "final": {"question": "Among the pairs of genes that are not from the class of motorproteins, how many of them are negatively correlated?", "sql": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr < 0 AND T1.Class = 'Motorproteins'", "source_tables": ["interactions", "genes"]}, "evidence": "If Expression_Corr < 0, it means the negatively correlated"}
{"sample_id": 2496, "db_id": "genes", "final": {"question": "For the pairs of genes with one having 8 chromosomes and the other having 6 chromosomes, what is the highest expression correlation score?", "sql": "SELECT T2.Expression_Corr FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Chromosome = 6 OR T1.Chromosome = 8 ORDER BY T2.Expression_Corr DESC LIMIT 1", "source_tables": ["interactions", "genes"]}, "evidence": ""}
{"sample_id": 2497, "db_id": "genes", "final": {"question": "Please list the motif of the genes that are located in the cytoplasm and have 7 chromosomes.", "sql": "SELECT T2.GeneID1, T2.GeneID2 FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Localization = 'cytoplasm' AND T1.Chromosome = 7", "source_tables": ["interactions", "genes"]}, "evidence": ""}
{"sample_id": 2498, "db_id": "genes", "final": {"question": "For the non-essential genes whose functions are transcription, how many of them are not located in the cytoplasm?", "sql": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Localization != 'cytoplasm' AND T1.Function = 'TRANSCRIPTION' AND T1.Essential = 'NON-Essential'", "source_tables": ["interactions", "genes"]}, "evidence": ""}
{"sample_id": 2499, "db_id": "genes", "final": {"question": "How many pairs of positively correlated genes are both non-essential?", "sql": "SELECT COUNT(T2.GeneID2) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr > 0 AND T1.Essential = 'Non-Essential'", "source_tables": ["interactions", "genes"]}, "evidence": "If Expression_Corr > 0, it means the expression correlation is positive"}
{"sample_id": 2500, "db_id": "genes", "final": {"question": "If a pair of genes is positively correlated, what is the possibility of it being composed of two genes both with over 10 chromosomes?", "sql": "SELECT CAST(SUM(IIF(T1.Chromosome > 10 AND T3.Chromosome > 10, 1, 0)) AS REAL) * 100 / COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 INNER JOIN Genes AS T3 ON T3.GeneID = T2.GeneID2 WHERE T2.Expression_Corr > 0", "source_tables": ["interactions", "genes"]}, "evidence": "Positively correlated means Expression_Corr > 0; Possibility = count(the pairs of genes with both chromosomes over 20) / count(pairs of genes that are positively correlated)"}
{"sample_id": 2501, "db_id": "genes", "final": {"question": "For the pairs of genes both from the class ATPases, what is the average expression correlation score?", "sql": "SELECT AVG(T2.Expression_Corr) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Class = 'ATPases'", "source_tables": ["interactions", "genes"]}, "evidence": ""}
{"sample_id": 2512, "db_id": "app_store", "final": {"question": "How many apps were last updated in January of 2018? Please write one translated review with positive sentiment for each app, if there's any.", "sql": "SELECT DISTINCT Translated_Review FROM user_reviews WHERE App IN ( SELECT App FROM playstore WHERE 'Last Updated' BETWEEN 'January 1, 2018' AND 'January 31, 2018' ) AND Sentiment = 'Positive'", "source_tables": ["user_reviews", "playstore"]}, "evidence": "updated in January of 2018 refers to Last Updated BETWEEN 'January 1, 2018' and 'January 31, 2018';"}
{"sample_id": 2513, "db_id": "app_store", "final": {"question": "How many users mildly likes the 7 Minute Workout app and when was it last updated?", "sql": "SELECT COUNT(T2.Sentiment_Polarity), T1.'Last Updated' FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = '7 Minute Workout' AND T2.Sentiment_Polarity BETWEEN 0 AND 0.5", "source_tables": ["user_reviews", "playstore"]}, "evidence": "mildly likes the app refers to Sentiment_Polarity> = 0 and Sentiment_Polarity<0.5;"}
{"sample_id": 2514, "db_id": "app_store", "final": {"question": "How many users holds neutral attitude towards the HTC Weather app? Indicate the app's rating on the Google Play Store.", "sql": "SELECT COUNT(T1.Rating), T1.Rating FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'HTC Weather' AND T2.Sentiment = 'Neutral'", "source_tables": ["user_reviews", "playstore"]}, "evidence": "user holds neutral attitude refers to Sentiment = 'Neutral';"}
{"sample_id": 2515, "db_id": "app_store", "final": {"question": "What is the name and category of the app with the highest amount of -1 sentiment polarity score?", "sql": "SELECT DISTINCT T1.App, T1.Category FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Sentiment_Polarity = '-1.0'", "source_tables": ["user_reviews", "playstore"]}, "evidence": "highest amount of -1 sentiment polarity score refers to MAX(Count(Sentiment_Polarity = 1.0))"}
{"sample_id": 2516, "db_id": "app_store", "final": {"question": "What is the average sentiment polarity score of the Cooking Fever app? Indicate the age group that the app is targeted at.", "sql": "SELECT AVG(T2.Sentiment_Polarity), T1.'Content Rating' FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Cooking Fever'", "source_tables": ["user_reviews", "playstore"]}, "evidence": "average sentiment polarity score = AVG(Sentiment_Polarity); age group the app is target at refers to Content Rating;"}
{"sample_id": 2517, "db_id": "app_store", "final": {"question": "What is the lowest sentiment polarity score of the Basketball Stars app for people who dislikes the app pretty much and how many downloads does it have?", "sql": "SELECT MIN(T2.Sentiment_Polarity), T1.Installs FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Basketball Stars'", "source_tables": ["user_reviews", "playstore"]}, "evidence": "lowest sentiment polarity score refers to MIN(Sentiment_Polarity); user dislike the app pretty much refers to Sentiment_Polarity<-0.5; number of downloads it has refers to installs;"}
{"sample_id": 2518, "db_id": "app_store", "final": {"question": "For the Akinator app, how many reviews have sentiment subjectivity of no more than 0.5 and what is its current version?", "sql": "SELECT COUNT(T2.Sentiment_Subjectivity), T1.'Current Ver' FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Akinator' AND T2.Sentiment_Subjectivity < 0.5", "source_tables": ["user_reviews", "playstore"]}, "evidence": "Sentiment_Subjectivity<0.5; current version refers to Current Ver;"}
{"sample_id": 2519, "db_id": "app_store", "final": {"question": "How many apps have rating of 5?", "sql": "SELECT COUNT(App) FROM playstore WHERE Rating = 5", "source_tables": ["playstore"]}, "evidence": "FALSE;"}
{"sample_id": 2520, "db_id": "app_store", "final": {"question": "What are the top 5 installed free apps?", "sql": "SELECT App FROM playstore WHERE Price = 0 ORDER BY CAST(REPLACE(REPLACE(Installs, ',', ''), '+', '') AS INTEGER) DESC LIMIT 5", "source_tables": ["playstore"]}, "evidence": "free app refers to price = 0; most installed app refers to MAX(Installs);"}
{"sample_id": 2521, "db_id": "app_store", "final": {"question": "Name the top 10 most reviewed apps.", "sql": "SELECT DISTINCT App FROM playstore ORDER BY Reviews DESC LIMIT 10", "source_tables": ["playstore"]}, "evidence": "most reviewed app refers to MAX(Reviews);"}
{"sample_id": 2522, "db_id": "app_store", "final": {"question": "How many of the users hold neutral attitude on \"10 Best Foods for You\" app and what category is this app?", "sql": "SELECT COUNT(T2.App), T1.Category FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = '10 Best Foods for You' AND T2.Sentiment = 'Neutral'", "source_tables": ["user_reviews", "playstore"]}, "evidence": "neutral attitude refers to Sentiment = 'Neutral';"}
{"sample_id": 2523, "db_id": "app_store", "final": {"question": "What are the apps that users pretty like this app and how many installs amount of these apps?", "sql": "SELECT DISTINCT T1.App, T1.Installs FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Sentiment_Polarity > 0", "source_tables": ["user_reviews", "playstore"]}, "evidence": "users pretty much likes the app refers to Sentiment_Polarity = 'Positive';"}
{"sample_id": 2524, "db_id": "app_store", "final": {"question": "List apps whose rating is 3.9 and state the translated review of each app.", "sql": "SELECT T1.App, T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Rating = 3.9", "source_tables": ["user_reviews", "playstore"]}, "evidence": "lowest rating refers to Rating = 1;"}
{"sample_id": 2525, "db_id": "app_store", "final": {"question": "How many apps that are only compatible with Android ver 8.0 and above? List down the users' sentiment of these apps.", "sql": "SELECT DISTINCT Sentiment FROM user_reviews WHERE App IN ( SELECT App FROM playstore WHERE 'Android Ver' = '8.0 and up' )", "source_tables": ["user_reviews", "playstore"]}, "evidence": "compatible with android refers to Android Ver; Android Ver\" = '8.0 and up';"}
{"sample_id": 2526, "db_id": "app_store", "final": {"question": "Which apps have multiple genres and what is the total sentiment subjectivity of these apps?", "sql": "SELECT SUM(T2.Sentiment_Subjectivity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Genres > 1", "source_tables": ["user_reviews", "playstore"]}, "evidence": "multiple genres refers to COUNT(Genres>1; total sentiment subjectivity = Sum(Sentiment_Subjectivity);"}
{"sample_id": 2527, "db_id": "app_store", "final": {"question": "Which apps have not been updated since year 2015 and what kind of sentiment users hold on it?", "sql": "SELECT DISTINCT App, Sentiment FROM user_reviews WHERE App IN ( SELECT App FROM playstore WHERE CAST(SUBSTR('Last Updated', -4, 4) AS INTEGER) < 2015 )", "source_tables": ["user_reviews", "playstore"]}, "evidence": "since year 2015 refers to \"Last Updated\"<'January 1, 2015';"}
{"sample_id": 2528, "db_id": "app_store", "final": {"question": "What is the total installs of apps with content rating of adults only 18+ and what are the translated reviews of it?", "sql": "SELECT SUM(T1.Installs), T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.'Content Rating' = 'Adults only 18+'", "source_tables": ["user_reviews", "playstore"]}, "evidence": "total installs = SUM(Installs);"}
{"sample_id": 2529, "db_id": "app_store", "final": {"question": "Which of the app is the best selling app and what is the sentiments polarity of it?", "sql": "SELECT T1.App, T2.Sentiment_Polarity FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App ORDER BY T1.Price * CAST(REPLACE(REPLACE(Installs, ',', ''), '+', '') AS INTEGER) DESC LIMIT 1", "source_tables": ["user_reviews", "playstore"]}, "evidence": "best selling app = MAX(MULTIPLY(Price, Installs));"}
{"sample_id": 2530, "db_id": "app_store", "final": {"question": "What is the average rating of comic category apps? How many users hold positive attitude towards this app?", "sql": "SELECT AVG(T1.Rating) , COUNT(CASE WHEN T2.Sentiment = 'Positive' THEN 1 ELSE NULL END) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Category = 'COMICS'", "source_tables": ["user_reviews", "playstore"]}, "evidence": "average rating = AVG(Rating where Category = 'COMICS'); number of users who hold a positive attitude towards the app refers to SUM(Sentiment = 'Positive');"}
{"sample_id": 2531, "db_id": "app_store", "final": {"question": "What is the rating for \"Draw A Stickman\"?", "sql": "SELECT Rating FROM playstore WHERE APP = 'Draw A Stickman'", "source_tables": ["playstore"]}, "evidence": "Draw A Stickman refers to App = 'Draw A Stickman';"}
{"sample_id": 2532, "db_id": "app_store", "final": {"question": "How many of the reviews for the app \"Brit + Co\" have a comment?", "sql": "SELECT COUNT(App) FROM user_reviews WHERE App = 'Brit + Co' AND Translated_Review IS NOT NULL", "source_tables": ["user_reviews"]}, "evidence": "Brit + Co refers to App = 'Brit + Co'; comment refers to Translated Review NOT null;"}
{"sample_id": 2533, "db_id": "app_store", "final": {"question": "List the top 5 shopping apps with the most reviews.", "sql": "SELECT DISTINCT App FROM playstore WHERE Genres = 'Shopping' GROUP BY App ORDER BY COUNT(App) DESC LIMIT 5", "source_tables": ["playstore"]}, "evidence": "shopping apps refers to Genre = 'Shopping'; most reviews refers to MAX(Reviews);"}
{"sample_id": 2534, "db_id": "app_store", "final": {"question": "How many neutral reviews does the app \"Dino War: Rise of Beasts\" have?", "sql": "SELECT COUNT(App) FROM user_reviews WHERE App = 'Dino War: Rise of Beasts' AND Sentiment = 'Neutral'", "source_tables": ["user_reviews"]}, "evidence": "neutral reviews refers to Sentiment = 'Neutral';"}
{"sample_id": 2535, "db_id": "app_store", "final": {"question": "What are the apps with only 5,000+ installs?", "sql": "SELECT DISTINCT App FROM playstore WHERE Installs = '5,000+'", "source_tables": ["playstore"]}, "evidence": "Installs = '5,000+';"}
{"sample_id": 2536, "db_id": "app_store", "final": {"question": "List all the negative comments on the \"Dog Run - Pet Dog Simulator\" app.", "sql": "SELECT Translated_Review FROM user_reviews WHERE App = 'Dog Run - Pet Dog Simulator' AND Sentiment = 'Negative'", "source_tables": ["user_reviews"]}, "evidence": "negative comment refers to Sentiment = 'Negative';"}
{"sample_id": 2537, "db_id": "app_store", "final": {"question": "Which free app has the most Negative comments?", "sql": "SELECT T1.App FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Type = 'Free' AND T2.Sentiment = 'Negative' GROUP BY T1.App ORDER BY COUNT(T2.Sentiment) DESC LIMIT 1", "source_tables": ["user_reviews", "playstore"]}, "evidence": "paid app refers to Type = 'Paid'; negative comment refers to Sentiment = 'Negative'; paid app with most negative comments refers to MAX(COUNT(Sentiment = 'Negative')) where Type = 'Paid';"}
{"sample_id": 2538, "db_id": "app_store", "final": {"question": "How many negative comments are there in all the apps with 100,000,000+ installs?", "sql": "SELECT COUNT(T2.Sentiment) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Installs = '100,000,000+' AND T2.Sentiment = 'Negative'", "source_tables": ["user_reviews", "playstore"]}, "evidence": "negative comment refers to Sentiment = 'Negative'; Installs = '100,000,000+';"}
{"sample_id": 2539, "db_id": "app_store", "final": {"question": "What are the content ratings for the apps that have \"gr8\" in their comments?", "sql": "SELECT DISTINCT T1.'Content Rating' FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Translated_Review LIKE '%gr8%'", "source_tables": ["user_reviews", "playstore"]}, "evidence": "app with gr8 in their comments refers to Translated_Review LIKE '%gr8%';"}
{"sample_id": 2540, "db_id": "app_store", "final": {"question": "What is the total Sentiment polarity score of the most expensive app?", "sql": "SELECT SUM(T2.Sentiment_Polarity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Price = ( SELECT MAX(Price) FROM playstore )", "source_tables": ["user_reviews", "playstore"]}, "evidence": "total sentiment polarity score = sum(Sentiment_Polarity); most expensive app refers to MAX(Price);"}
{"sample_id": 2541, "db_id": "app_store", "final": {"question": "What is the rating for \"Garden Coloring Book\"? List all of its reviews.", "sql": "SELECT T1.Rating, T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Garden Coloring Book'", "source_tables": ["user_reviews", "playstore"]}, "evidence": "Golfshot Plus: Golf GPS refers to App = 'Golfshot Plus: Golf GPS'; review refers to Translated_Review;"}
{"sample_id": 2542, "db_id": "app_store", "final": {"question": "Which Photography app has the highest total Sentiment subjectivity score?", "sql": "SELECT T1.App FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Genres = 'Photography' GROUP BY T1.App ORDER BY SUM(T2.Sentiment_Subjectivity) DESC LIMIT 1", "source_tables": ["user_reviews", "playstore"]}, "evidence": "Photography app refers to Genre = 'Photography'; highest total sentiment subjectivity score = MAX(sum(Sentiment_Subjectivity));"}
{"sample_id": 2543, "db_id": "app_store", "final": {"question": "List all the comments on the lowest rated Mature 17+ app.", "sql": "SELECT T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.'Content Rating' = 'Mature 17+' ORDER BY T1.Rating LIMIT 1", "source_tables": ["user_reviews", "playstore"]}, "evidence": "comments refers to Translated_Review; lowest rated refers to Rating = 1; Mature 17+ refers to Content Rating = 'Mature 17+ ';"}
{"sample_id": 2544, "db_id": "app_store", "final": {"question": "What is the number of installments of the app with the highest total Sentiment polarity score?", "sql": "SELECT T1.Installs FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App GROUP BY T1.App ORDER BY SUM(T2.Sentiment_Polarity) DESC LIMIT 1", "source_tables": ["user_reviews", "playstore"]}, "evidence": "installments refers to Installs; highest total sentiment polarity score = MAX(SUM(Sentiment_Polarity));"}
{"sample_id": 2545, "db_id": "app_store", "final": {"question": "What is the number of neutral comments from all the weather apps?", "sql": "SELECT COUNT(T2.Sentiment) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Genres = 'Weather' AND T2.Sentiment = 'Neutral'", "source_tables": ["user_reviews", "playstore"]}, "evidence": "neutral comments refers to Sentiment = 'Neutral'; weather app refers to Genre = 'Weather';"}
{"sample_id": 2546, "db_id": "app_store", "final": {"question": "Which 1,000,000,000+ intalls apps has the most no comment reviews?", "sql": "SELECT T1.App FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Installs = '1,000,000+' AND T2.Translated_Review = 'nan' GROUP BY T1.App ORDER BY COUNT(T2.Translated_Review) DESC LIMIT 1", "source_tables": ["user_reviews", "playstore"]}, "evidence": "no comment refers to Translated_Review = 'nan'; most no comment reviews = (MAX(COUNT(Translated_Review = 'nan')));"}
{"sample_id": 2547, "db_id": "app_store", "final": {"question": "What is the rating and the total Sentiment subjectivity score of \"Onefootball - Soccer Scores\"?", "sql": "SELECT T1.Rating, SUM(T2.Sentiment_Subjectivity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Onefootball - Soccer Scores'", "source_tables": ["user_reviews", "playstore"]}, "evidence": "Onefootball - Soccer Scores refers to App = 'Onefootball - Soccer Scores';"}
{"sample_id": 2548, "db_id": "app_store", "final": {"question": "What percentage of no comment reviews are from \"Teen\" content rating apps?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.'Content Rating' = 'Teen' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.App) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Translated_Review = 'nan'", "source_tables": ["user_reviews", "playstore"]}, "evidence": "no comment refers to Translated_Review = 'nan'; percentage = DIVIDE((SUM(Content Rating = 'Teen')), COUNT(*));"}
{"sample_id": 2575, "db_id": "regional_sales", "final": {"question": "Which region has the most number of sales team?", "sql": "SELECT Region FROM 'Sales Team' GROUP BY Region ORDER BY COUNT(DISTINCT 'Sales Team') DESC LIMIT 1", "source_tables": ["sales team"]}, "evidence": "the most number of sales team refers to MAX(COUNT(Sales Team));"}
{"sample_id": 2576, "db_id": "regional_sales", "final": {"question": "List all the customers with name containing the word 'Group'.", "sql": "SELECT T FROM ( SELECT IIF('Customer Names' LIKE '%Group%', 'Customer Names', NULL) AS T FROM Customers ) WHERE T IS NOT NULL", "source_tables": ["customers"]}, "evidence": "name containing the word 'Group' refers to Customer Names LIKE '%Group%';"}
{"sample_id": 2577, "db_id": "regional_sales", "final": {"question": "What is the average median income for all City type of stores?", "sql": "SELECT AVG('Median Income') FROM 'Store Locations' WHERE Type = 'City'", "source_tables": ["store locations"]}, "evidence": "AVG(Median Income) where Type = 'City';"}
{"sample_id": 2578, "db_id": "regional_sales", "final": {"question": "Name the sales team and the region of order number 'SO - 000137'.", "sql": "SELECT T2.'Sales Team', T2.Region FROM 'Sales Orders' AS T1 INNER JOIN 'Sales Team' AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderNumber = 'SO - 000137'", "source_tables": ["sales orders", "sales team"]}, "evidence": ""}
{"sample_id": 2579, "db_id": "regional_sales", "final": {"question": "List all the order numbers along with its product name for each order under the sales team of 'Douglas Tucker'.", "sql": "SELECT DISTINCT T1.ProductID, T1.'Product Name' FROM Products AS T1 INNER JOIN 'Sales Orders' AS T2 ON T2._ProductID = T1.ProductID INNER JOIN 'Sales Team' AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T3.'Sales Team' = 'Douglas Tucker'", "source_tables": ["sales orders", "sales team", "products"]}, "evidence": ""}
{"sample_id": 2580, "db_id": "regional_sales", "final": {"question": "Among orders in 2020, name the customers who had the greatest discount applied for 'Cocktail Glasses'", "sql": "SELECT DISTINCT T1.'Customer Names' FROM Customers AS T1 INNER JOIN 'Sales Orders' AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID WHERE T3.'Product Name' = 'Cocktail Glasses' AND SUBSTR(T2.OrderDate, -2) = '20' AND T2.'Discount Applied' = ( SELECT T2.'Discount Applied' FROM Customers AS T1 INNER JOIN 'Sales Orders' AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID WHERE T3.'Product Name' = 'Cocktail Glasses' AND T2.OrderDate LIKE '%/%/20' ORDER BY T2.'Discount Applied' DESC LIMIT 1 )", "source_tables": ["sales orders", "products", "customers"]}, "evidence": "MAX(Discount Applied) where Product Name = 'Cocktail Glasses'; orders in 2020 refer to the OrderDate between 01-01-2020 and 31-12-2020;"}
{"sample_id": 2581, "db_id": "regional_sales", "final": {"question": "List all the order numbers for In-Store sales and find the city where the store is located.", "sql": "SELECT DISTINCT T1.OrderNumber, T2.'City Name' FROM 'Sales Orders' AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StoreID = T1._StoreID WHERE T1.'Sales Channel' = 'In-Store'", "source_tables": ["sales orders", "store locations"]}, "evidence": "In-Store sales refer to Sales Channel = 'In-Store'; city refers to City Name;"}
{"sample_id": 2582, "db_id": "regional_sales", "final": {"question": "Name the most expensive ordered? Who, when was it ordered?", "sql": "SELECT T2.OrderNumber, T1.'Customer Names', T2.OrderDate FROM Customers AS T1 INNER JOIN 'Sales Orders' AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID ORDER BY T2.'Unit Cost' DESC LIMIT 1", "source_tables": ["sales orders", "products", "customers"]}, "evidence": "the most expensive refers to MAX(Unit Cost); who refers to Customer Names; when refers to OrderDate;"}
{"sample_id": 2583, "db_id": "regional_sales", "final": {"question": "List all the numbers ordered by 'Rochester Ltd' in 2018.", "sql": "SELECT DISTINCT T FROM ( SELECT CASE  WHEN T1.OrderDate LIKE '%/%/18' AND T2.'Customer Names' = 'Rochester Ltd' THEN T1.OrderNumber ELSE NULL END AS T FROM 'Sales Orders' T1 INNER JOIN Customers T2 ON T2.CustomerID = T1._CustomerID ) WHERE T IS NOT NULL", "source_tables": ["sales orders", "customers"]}, "evidence": "Rochester Ltd is the name of the customer; all the numbers ordered refer to OrderNumber; 2018 refers to SUBSTR(OrderDate, -2) = '18';"}
{"sample_id": 2584, "db_id": "regional_sales", "final": {"question": "Provide all the orders from WARE-NMK1003. Name the product and sales team for each of these order.", "sql": "SELECT DISTINCT T1.'Product Name', T3.'Sales Team' FROM Products AS T1 INNER JOIN 'Sales Orders' AS T2 ON T2._ProductID = T1.ProductID INNER JOIN 'Sales Team' AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T2.WarehouseCode = 'WARE-NMK1003'", "source_tables": ["sales orders", "sales team", "products"]}, "evidence": "all the orders from WARE-NMK1003 refer to OrderNumber where WarehouseCode = 'WARE-NMK1003'; product refers to Product Name;"}
{"sample_id": 2585, "db_id": "regional_sales", "final": {"question": "List the name of all customers who had made orders online.", "sql": "SELECT T FROM ( SELECT CASE  WHEN T2.'Sales Channel' = 'Online' THEN T1.'Customer Names' ELSE NULL END AS T FROM Customers T1 INNER JOIN 'Sales Orders' T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL", "source_tables": ["sales orders", "customers"]}, "evidence": "orders online refer to Sales Channel = 'Online';"}
{"sample_id": 2586, "db_id": "regional_sales", "final": {"question": "Calculate the average net profit for bakeware product.", "sql": "SELECT AVG(REPLACE(T1.'Unit Price', ',', '') - REPLACE(T1.'Unit Cost', ',', ''))  FROM 'Sales Orders' AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.'Product Name' = 'Bakeware'", "source_tables": ["sales orders", "products"]}, "evidence": "net profit can be computed as SUBTRACT(Unit Price, Unit Cost); AVG(net profit) where Product Name = 'Bakeware';"}
{"sample_id": 2587, "db_id": "regional_sales", "final": {"question": "Name the sales team name who had orders with the greatest net profit in 2020.", "sql": "SELECT T2.'Sales Team' FROM 'Sales Orders' AS T1 INNER JOIN 'Sales Team' AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderDate LIKE '%/%/20' GROUP BY T2.'Sales Team' ORDER BY SUM(REPLACE(T1.'Unit Price', ',', '') - REPLACE(T1.'Unit Cost', ',', '')) DESC LIMIT 1", "source_tables": ["sales orders", "sales team"]}, "evidence": "net profit can be computed as SUBTRACT(Unit Price, Unit Cost); the greatest net profit in 2020 refers to MAX(net profit) where OrderDate LIKE '%/20';"}
{"sample_id": 2588, "db_id": "regional_sales", "final": {"question": "Sate the order number and calculate the net profit for each order under Joshua Bennett.", "sql": "SELECT T1.OrderNumber , REPLACE(T1.'Unit Price', ',', '') - REPLACE(T1.'Unit Cost', ',', '')  FROM 'Sales Orders' AS T1 INNER JOIN 'Sales Team' AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.'Sales Team' = 'Joshua Bennett'", "source_tables": ["sales orders", "sales team"]}, "evidence": "net profit can be computed as SUBTRACT(Unit Price, Unit Cost); Joshua Bennett is the name of Sales Team;"}
{"sample_id": 2589, "db_id": "regional_sales", "final": {"question": "Among the sales order shipped in July 2018, calculate the percentage of orders for home fragrances.", "sql": "SELECT SUM(CASE WHEN T2.'Product Name' = 'Home Fragrances' THEN 1 ELSE 0 END) * 100 / COUNT(T1.OrderNumber)  FROM 'Sales Orders' AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.ShipDate LIKE '7/%/18'", "source_tables": ["sales orders", "products"]}, "evidence": "shipped in July 2018 refers to ShipDate between 01-07-2018 and 31-07-2018; DIVIDE(COUNT(OrderNumber where Product Name = 'Home Fragrances' and SUBSTR(OrderDate, 1, 1) = '7'), COUNT(OrderNumber where SUBSTR(ShipDate, -2) = '18')) as percentage;"}
{"sample_id": 2590, "db_id": "regional_sales", "final": {"question": "List down the customer IDs and names that start with alphabet \"W\".", "sql": "SELECT DISTINCT CustomerID, 'Customer Names' FROM Customers WHERE 'Customer Names' LIKE 'W%' ORDER BY 'Customer Names' DESC", "source_tables": ["customers"]}, "evidence": "names that start with alphabet \"W\" refer to Customer Names LIKE 'W%';"}
{"sample_id": 2591, "db_id": "regional_sales", "final": {"question": "List down the product IDs and names that include the word \"Outdoor\".", "sql": "SELECT ProductID, T FROM ( SELECT ProductID , CASE  WHEN 'Product Name' LIKE '%Outdoor%' THEN 'Product Name' ELSE NULL END AS T FROM Products ) WHERE T IS NOT NULL ORDER BY T DESC", "source_tables": ["products"]}, "evidence": "names that include the word \"Outdoor\" refer to Product Name LIKE '%Outdoor%';"}
{"sample_id": 2592, "db_id": "regional_sales", "final": {"question": "Among the sales with 40% discount via in-store channel, how many products were shipped from warehouse code of WARE-NMK1003?", "sql": "SELECT COUNT(DISTINCT T) FROM ( SELECT CASE  WHEN 'Sales Channel' = 'In-Store' AND WarehouseCode = 'WARE-NMK1003' AND 'Discount Applied' = '0.4' THEN OrderNumber ELSE NULL END AS T FROM 'Sales Orders' ) WHERE T IS NOT NULL", "source_tables": ["sales orders"]}, "evidence": "40% discount refers to Discount Applied = 0.4; in-store channel refers to Sales Channel = 'In-Store'; orders refer to OrderNumber;"}
{"sample_id": 2593, "db_id": "regional_sales", "final": {"question": "Mention the most populated city and median income of the store in Florida state.", "sql": "SELECT 'City Name', 'Median Income' FROM 'Store Locations' WHERE State = 'Florida' ORDER BY Population DESC LIMIT 1", "source_tables": ["store locations"]}, "evidence": "most populated refers to Max(Population);"}
{"sample_id": 2594, "db_id": "regional_sales", "final": {"question": "Describe the ID, city and region of the stores which are in Allen country.", "sql": "SELECT DISTINCT T2.StoreID, T2.'City Name', T1.Region FROM Regions AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StateCode = T1.StateCode WHERE T2.County = 'Allen County'", "source_tables": ["regions", "store locations"]}, "evidence": "ID refers to StoreID;"}
{"sample_id": 2595, "db_id": "regional_sales", "final": {"question": "List the ID, city, state and region for the store type which is fewer between borough and CDP.", "sql": "SELECT DISTINCT T2.StoreID, T2.'City Name', T1.State, T2.Type FROM Regions AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StateCode = T1.StateCode WHERE T2.Type = 'Borough' OR T2.Type = 'CDP'", "source_tables": ["regions", "store locations"]}, "evidence": "COUNT(StoreID) < COUNT(StoreID where Type = 'Borough') < COUNT(StoreID where Type = 'CDP');"}
{"sample_id": 2596, "db_id": "regional_sales", "final": {"question": "Write down the region and name of the sale team ID of 18 and compare their orders between in-store and online.", "sql": "SELECT T2.Region, T2.'Sales Team' FROM 'Sales Orders' AS T1 INNER JOIN 'Sales Team' AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.SalesTeamID = 18 AND T1.'Sales Channel' = 'In-Store' OR T1.'Sales Channel' = 'Online'", "source_tables": ["sales orders", "sales team"]}, "evidence": "sale team ID of 18 refers to _SalesTeamID = 18; COUNT(OrderNumber where Sales Channel = 'In-Store') > COUNT(OrderNumber where Sales Channel = 'Online');"}
{"sample_id": 2597, "db_id": "regional_sales", "final": {"question": "Calculate the percentage of order via in-store channel of customer \"Medline\".", "sql": "SELECT CAST(SUM(CASE WHEN T1.'Sales Channel' = 'In-Store' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1._CustomerID) FROM 'Sales Orders' AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.'Customer Names' = 'Medline '", "source_tables": ["sales orders", "customers"]}, "evidence": "Medline is the name of the customer; DIVIDE(COUNT(OrderNumber where Sales Channel = 'In-Store' and Customer Names = 'Medline'), COUNT(OrderNumber where Customer Names = 'Medline')) as percentage;"}
{"sample_id": 2598, "db_id": "regional_sales", "final": {"question": "Describe the customer names and lasting delivery periods for the product of \"Bedroom Furniture\" by wholesale channel in 2019.", "sql": "SELECT T1.'Customer Names', T2.DeliveryDate FROM Customers AS T1 INNER JOIN 'Sales Orders' AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID WHERE T2.'Sales Channel' = 'Wholesale' AND T3.'Product Name' = 'Bedroom Furniture' AND T2.OrderDate LIKE '%/%/19'", "source_tables": ["sales orders", "products", "customers"]}, "evidence": "delivery period in 2019 means time between placing of an order and the receipt of product and refers to SUBTRACT(DeliveryDate, OrderDate) where SUBSTR(OrderDate, -2 ) = '19'; Sales Channel = 'Wholesale'; Product Name = 'Bedroom Furniture';"}
{"sample_id": 2599, "db_id": "regional_sales", "final": {"question": "Describe the customer names and product names which had over 3800 USD in net profit.", "sql": "SELECT DISTINCT 'Customer Names', 'Product Name' FROM ( SELECT T1.'Customer Names', T3.'Product Name' , REPLACE(T2.'Unit Price', ',', '') - REPLACE(T2.'Unit Cost', ',', '') AS T FROM Customers T1 INNER JOIN 'Sales Orders' T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products T3 ON T3.ProductID = T2._ProductID ) WHERE T > 3800", "source_tables": ["sales orders", "products", "customers"]}, "evidence": "over 3800 USD in net profit refers to SUBTRACT(Unit Price, Unit Cost) where Net Profit > 3800;"}
{"sample_id": 2600, "db_id": "regional_sales", "final": {"question": "List the store located cities with regions in no water area of California state.", "sql": "SELECT DISTINCT T2.'City Name' FROM Regions AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StateCode = T1.StateCode WHERE T2.State = 'California' AND T2.'Water Area' = '0'", "source_tables": ["regions", "store locations"]}, "evidence": "cities refer to City Name; no water area refers to Water Area = 0;"}
{"sample_id": 2601, "db_id": "regional_sales", "final": {"question": "Calculate the order percentage by \"Carlos Miller\" sales team.", "sql": "SELECT CAST(SUM(CASE WHEN T2.'Sales Team' = 'Carlos Miller' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM 'Sales Orders' AS T1 INNER JOIN 'Sales Team' AS T2 ON T2.SalesTeamID = T1._SalesTeamID", "source_tables": ["sales orders", "sales team"]}, "evidence": "DIVIDE(COUNT(OrderNumber where Sales Team = 'Carlos Miller'), COUNT(OrderNumber)) as percentage;"}
{"sample_id": 2602, "db_id": "regional_sales", "final": {"question": "Compare the number of orders between \"Platters\" and \"Serveware\" products.", "sql": "SELECT SUM(CASE WHEN T2.'Product Name' = 'Platters' THEN 1 ELSE 0 END) AS num1 , SUM(CASE WHEN T2.'Product Name' = 'Serveware' THEN 1 ELSE 0 END) AS num2 FROM 'Sales Orders' AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID", "source_tables": ["sales orders", "products"]}, "evidence": "COUNT(OrderNumber where Product Name = 'Platters') > COUNT(OrderNumber where Product Name = 'Serveware');"}
{"sample_id": 2603, "db_id": "regional_sales", "final": {"question": "Calculate the total net profit of the store located in highest median income city.", "sql": "SELECT SUM(REPLACE(T1.'Unit Price', ',', '') - REPLACE(T1.'Unit Cost', ',', '')) FROM 'Sales Orders' AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StoreID = T1._StoreID ORDER BY T2.'Median Income' DESC LIMIT 1", "source_tables": ["sales orders", "store locations"]}, "evidence": "net profit can be computed as SUBTRACT(Unit Price, Unit Cost); highest median income city refers to City Name where MAX(Median Income);"}
{"sample_id": 2604, "db_id": "regional_sales", "final": {"question": "Among the sales team in South region, write down the numbers of orders made by the sales team ID of one digit.", "sql": "SELECT COUNT(T1.OrderNumber) FROM 'Sales Orders' AS T1 INNER JOIN 'Sales Team' AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.Region = 'South' AND T2.SalesTeamID BETWEEN 1 AND 9 GROUP BY T2.SalesTeamID HAVING COUNT(T1.OrderNumber)", "source_tables": ["sales orders", "sales team"]}, "evidence": "sales team ID of one digit refers to _SalesTeamID BETWEEN 1 AND 9; numbers of orders refer to COUNT(OrderNumber);"}
{"sample_id": 2605, "db_id": "regional_sales", "final": {"question": "How many orders have order date in 5/31/2018?", "sql": "SELECT SUM(IIF(OrderDate = '5/31/18', 1, 0)) FROM 'Sales Orders'", "source_tables": ["sales orders"]}, "evidence": "orders refer to OrderNumber;"}
{"sample_id": 2606, "db_id": "regional_sales", "final": {"question": "List out the name of orders which have delivery date of 6/13/2018.", "sql": "SELECT DISTINCT T FROM ( SELECT IIF(DeliveryDate = '6/13/18', OrderNumber, NULL) AS T FROM 'Sales Orders' ) WHERE T IS NOT NULL", "source_tables": ["sales orders"]}, "evidence": ""}
{"sample_id": 2607, "db_id": "regional_sales", "final": {"question": "How many orders placed were with more than 5 product quantities?", "sql": "SELECT SUM(IIF('Order Quantity' > 5, 1, 0)) FROM 'Sales Orders'", "source_tables": ["sales orders"]}, "evidence": "orders refer to OrderNumber; more than 5 product quantities refer to Order Quantity > 5;"}
{"sample_id": 2608, "db_id": "regional_sales", "final": {"question": "State the full name of state code \"GA\".", "sql": "SELECT T FROM ( SELECT IIF(StateCode = 'GA', State, NULL) AS T FROM Regions ) WHERE T IS NOT NULL", "source_tables": ["regions"]}, "evidence": ""}
{"sample_id": 2609, "db_id": "regional_sales", "final": {"question": "How many states located in the Midwest region?", "sql": "SELECT COUNT(DISTINCT T) FROM ( SELECT CASE  WHEN Region = 'Midwest' THEN StateCode ELSE NULL END AS T FROM Regions ) WHERE T IS NOT NULL", "source_tables": ["regions"]}, "evidence": ""}
{"sample_id": 2610, "db_id": "regional_sales", "final": {"question": "List out the product name of order which has unit cost of 781.22.", "sql": "SELECT T FROM ( SELECT DISTINCT IIF(T1.'Unit Cost' = 781.22, T2.'Product Name', NULL) AS T FROM 'Sales Orders' T1 INNER JOIN Products T2 ON T2.ProductID = T1._ProductID ) WHERE T IS NOT NULL", "source_tables": ["sales orders", "products"]}, "evidence": ""}
{"sample_id": 2611, "db_id": "regional_sales", "final": {"question": "State the delivery date of cookware.", "sql": "SELECT T FROM ( SELECT DISTINCT IIF(T2.'Product Name' = 'Cookware', T1.DeliveryDate, NULL) AS T FROM 'Sales Orders' T1 INNER JOIN Products T2 ON T2.ProductID = T1._ProductID ) WHERE T IS NOT NULL", "source_tables": ["sales orders", "products"]}, "evidence": "Cookware is the name of the product;"}
{"sample_id": 2612, "db_id": "regional_sales", "final": {"question": "How many furniture cushions orders which have date of order in 2018?", "sql": "SELECT SUM(CASE WHEN T1.OrderDate LIKE '%/%/18' AND T2.'Product Name' = 'Furniture Cushions' THEN 1 ELSE 0 END) FROM 'Sales Orders' AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID", "source_tables": ["sales orders", "products"]}, "evidence": "furniture cushions orders refer to OrderNumber where Product Name = 'Furniture Cushions'; date of order in 2018 refers to SUBSTR(OrderDate, -2) = '18'"}
{"sample_id": 2613, "db_id": "regional_sales", "final": {"question": "List out the name of products which have been applied 10% discount.", "sql": "SELECT T FROM ( SELECT DISTINCT IIF(T1.'Discount Applied' = 0.1, T2.'Product Name', NULL) AS T FROM 'Sales Orders' T1 INNER JOIN Products T2 ON T2.ProductID = T1._ProductID ) WHERE T IS NOT NULL", "source_tables": ["sales orders", "products"]}, "evidence": "applied 10% discount refers to Discount Applied = 0.1;"}
{"sample_id": 2614, "db_id": "regional_sales", "final": {"question": "Calculate the average net profit of phones which have sales channel of distributor.", "sql": "SELECT SUM(REPLACE(T1.'Unit Price', ',', '') - REPLACE(T1.'Unit Cost', ',', '')) / COUNT(T1.OrderNumber) FROM 'Sales Orders' AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.'Product Name' = 'Phones' AND T1.'Sales Channel' = 'Distributor'", "source_tables": ["sales orders", "products"]}, "evidence": "net profit can be computed as SUBTRACT(Unit Price, Unit Cost); AVG(net profit) where Product Name = 'Phones' and Sales Channel = 'Distributor';"}
{"sample_id": 2615, "db_id": "regional_sales", "final": {"question": "Calculate the average net profit of bar tools which has ordered quantity exceed 5.", "sql": "SELECT SUM(REPLACE(T1.'Unit Price', ',', '') - REPLACE(T1.'Unit Cost', ',', '')) / COUNT(T1.OrderNumber) FROM 'Sales Orders' AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.'Product Name' = 'Bar Tools' AND T1.'Order Quantity' > 5", "source_tables": ["sales orders", "products"]}, "evidence": "net profit can be computed as SUBTRACT(Unit Price, Unit Cost); AVG(net profit) where Product Name = 'Bar Tools' and Order Quantity > 5;"}
{"sample_id": 2616, "db_id": "regional_sales", "final": {"question": "List out the city name of states located in South region.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T1.Region = 'South' THEN T2.'City Name' END AS T FROM Regions T1 INNER JOIN 'Store Locations' T2 ON T2.StateCode = T1.StateCode ) WHERE T IS NOT NULL", "source_tables": ["regions", "store locations"]}, "evidence": ""}
{"sample_id": 2617, "db_id": "regional_sales", "final": {"question": "What is the region of stores which have type of \"Town\" in the list?", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.Type = 'Town' THEN T1.Region END AS T FROM Regions T1 INNER JOIN 'Store Locations' T2 ON T2.StateCode = T1.StateCode ) WHERE T IS NOT NULL", "source_tables": ["regions", "store locations"]}, "evidence": ""}
{"sample_id": 2618, "db_id": "regional_sales", "final": {"question": "How many orders that Medsep Group had made?", "sql": "SELECT SUM(CASE WHEN T1.'Customer Names' = 'Medsep Group' THEN 1 ELSE 0 END) FROM Customers AS T1 INNER JOIN 'Sales Orders' AS T2 ON T2._CustomerID = T1.CustomerID", "source_tables": ["sales orders", "customers"]}, "evidence": "Medsep Group is the name of the customer; orders refer to OrderNumber;"}
{"sample_id": 2619, "db_id": "regional_sales", "final": {"question": "List out the discount levels applied for all orders from Ole Group.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T1.'Customer Names' = 'Ole Group' THEN T2.'Discount Applied' END AS T FROM Customers T1 INNER JOIN 'Sales Orders' T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL", "source_tables": ["sales orders", "customers"]}, "evidence": "Ole Group is the name of the customer; discount levels applied refer to Discount Applied NOT NULL;"}
{"sample_id": 2620, "db_id": "regional_sales", "final": {"question": "State the customer name of orders which has shipped date in 7/8/2018.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.ShipDate = '7/8/18' THEN T1.'Customer Names' END AS T FROM Customers T1 INNER JOIN 'Sales Orders' T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL", "source_tables": ["sales orders", "customers"]}, "evidence": "shipped date in 7/8/2018 refers to ShipDate = '7/8/18'"}
{"sample_id": 2621, "db_id": "regional_sales", "final": {"question": "Among the orders placed by Ei, how many orders have quantity greater than 4?", "sql": "SELECT SUM(CASE WHEN T1.'Order Quantity' > 4 AND T2.'Customer Names' = 'Ei ' THEN 1 ELSE 0 END) FROM 'Sales Orders' AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID", "source_tables": ["sales orders", "customers"]}, "evidence": "Ei is the name of the customer; orders have quantity greater than 4 refer to OrderNumber WHERE Order Quantity > 4;"}
{"sample_id": 2622, "db_id": "regional_sales", "final": {"question": "Among the orders placed by Pacific Ltd, how many orders have been applied 5% discount ?", "sql": "SELECT SUM(CASE WHEN T1.'Discount Applied' = 0.05 AND T2.'Customer Names' = 'Pacific Ltd' THEN 1 ELSE 0 END) FROM 'Sales Orders' AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID", "source_tables": ["sales orders", "customers"]}, "evidence": "orders by Pacific Ltd refer to OrderNumber where Customer Names = 'Pacific Ltd'; applied 5% discount refers to Discount Applied = 0.05;"}
{"sample_id": 2623, "db_id": "regional_sales", "final": {"question": "What is the customer names of orders which have unit cost greater than 4000USD?", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.'Unit Cost' > 4000 THEN T1.'Customer Names' END AS T FROM Customers T1 INNER JOIN 'Sales Orders' T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL", "source_tables": ["sales orders", "customers"]}, "evidence": "unit cost greater than 4000USD refers to Unit Cost > 4000;"}
{"sample_id": 2624, "db_id": "regional_sales", "final": {"question": "Please list the id and detailed position of all stores in Birmingham city.", "sql": "SELECT StoreID, Latitude, Longitude FROM 'Store Locations' WHERE 'City Name' = 'Birmingham'", "source_tables": ["store locations"]}, "evidence": "Latitude and Longitude coordinates can be used to identify the detailed position of stores; id refers to StoreID;"}
{"sample_id": 2625, "db_id": "regional_sales", "final": {"question": "Which city has the largest population?", "sql": "SELECT 'City Name' FROM 'Store Locations' ORDER BY Population DESC LIMIT 1", "source_tables": ["store locations"]}, "evidence": "city has the largest population refers to City Name where MAX(Population);"}
{"sample_id": 2626, "db_id": "regional_sales", "final": {"question": "How many CDP stores are there in California?", "sql": "SELECT SUM(CASE WHEN State = 'California' AND Type = 'CDP' THEN 1 ELSE 0 END) FROM 'Store Locations'", "source_tables": ["store locations"]}, "evidence": "California is a state; CDP stores refer to StoreID where Type = 'CDP';"}
{"sample_id": 2627, "db_id": "regional_sales", "final": {"question": "Please give the order number and product name of the order which has the lowest unit price.", "sql": "SELECT T1.OrderNumber, T2.'Product Name' FROM 'Sales Orders' AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE REPLACE(T1.'Unit Price', ',', '') = ( SELECT REPLACE(T1.'Unit Price', ',', '') FROM 'Sales Orders' AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID ORDER BY REPLACE(T1.'Unit Price', ',', '') LIMIT 1 )", "source_tables": ["sales orders", "products"]}, "evidence": "the lowest unit price refers to MIN(Unit Price);"}
{"sample_id": 2628, "db_id": "regional_sales", "final": {"question": "Which product has the highest net profit in 2019?", "sql": "SELECT T2.'Product Name' FROM 'Sales Orders' AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.OrderDate LIKE '%/%/19' ORDER BY REPLACE(T1.'Unit Price', ',', '') - REPLACE(T1.'Unit Cost', ',', '') DESC LIMIT 1", "source_tables": ["sales orders", "products"]}, "evidence": "net profit can be computed as SUBTRACT(Unit Price, Unit Cost); the highest net profit in 2019 refers to MAX(Net Profit) where OrderDate LIKE '%/19'; product refers to Product Name;"}
{"sample_id": 2629, "db_id": "regional_sales", "final": {"question": "What is the average unit price of a Cookware product?", "sql": "SELECT AVG(REPLACE(T1.'Unit Price', ',', '')) FROM 'Sales Orders' AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.'Product Name' = 'Cookware'", "source_tables": ["sales orders", "products"]}, "evidence": "AVG(Unit Price where Product Name = 'Cookware');"}
{"sample_id": 2630, "db_id": "regional_sales", "final": {"question": "Please list all sale team names which had orders on 5/31/2018.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T1.OrderDate = '5/31/18' THEN T2.'Sales Team' ELSE NULL END AS T FROM 'Sales Orders' T1 INNER JOIN 'Sales Team' T2 ON T2.SalesTeamID = T1._SalesTeamID ) WHERE T IS NOT NULL", "source_tables": ["sales orders", "sales team"]}, "evidence": "had orders on 5/31/2018 refer to OrderDate = '5/31/18'; sale team names refer to Sales Team;"}
{"sample_id": 2631, "db_id": "regional_sales", "final": {"question": "Which sales team name has the least orders in 2019?", "sql": "SELECT T2.'Sales Team' FROM 'Sales Orders' AS T1 INNER JOIN 'Sales Team' AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderDate LIKE '%/%/19' GROUP BY T2.'Sales Team' ORDER BY COUNT(T1.OrderNumber) ASC LIMIT 1", "source_tables": ["sales orders", "sales team"]}, "evidence": "sale team names refer to Sales Team; the least orders in 2019 refer to MIN(COUNT(OrderNumber where SUBSTR(OrderDate, -2) = '19'));"}
{"sample_id": 2632, "db_id": "regional_sales", "final": {"question": "From 2018 to 2020, which year did the George Lewis group have the highest number of orders?", "sql": "SELECT SUBSTR(T1.OrderDate, -2, 2) FROM 'Sales Orders' AS T1 INNER JOIN 'Sales Team' AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.'Sales Team' = 'George Lewis' GROUP BY SUBSTR(T1.OrderDate, -2, 2) ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1", "source_tables": ["sales orders", "sales team"]}, "evidence": "George Lewis refers to Sales Team; the highest number of orders refers to MAX(COUNT(OrderNumber)); which year from 2018 to 2020 refers to SUBSTR(OrderDate, -2) IN ('18', '19', '20') GROUP BY SUBSTR(OrderDate, -2);"}
{"sample_id": 2633, "db_id": "regional_sales", "final": {"question": "What is the percentage of total orders from stores in Orange County in 2018?", "sql": "SELECT CAST(SUM(CASE WHEN T2.County = 'Orange County' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM 'Sales Orders' AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderDate LIKE '%/%/18'", "source_tables": ["sales orders", "store locations"]}, "evidence": "DIVIDE(COUNT(OrderNumber where County = 'Orange County' and SUBSTR(OrderDate, -2) = '18'), COUNT(OrderNumber where SUBSTR(OrderDate, -2) = '18')) as percentage;"}
{"sample_id": 2634, "db_id": "regional_sales", "final": {"question": "Which order number has the highest unit price?", "sql": "SELECT OrderNumber FROM 'Sales Orders' WHERE REPLACE('Unit Price', ',', '') = ( SELECT REPLACE('Unit Price', ',', '') FROM 'Sales Orders' ORDER BY REPLACE('Unit Price', ',', '') DESC LIMIT 1 )", "source_tables": ["sales orders"]}, "evidence": "the highest unit price refers to MAX(Unit Price);"}
{"sample_id": 2635, "db_id": "regional_sales", "final": {"question": "Which sales team id has the highest number of orders in 2018?", "sql": "SELECT _SalesTeamID FROM 'Sales Orders' WHERE OrderDate LIKE '%/%/18' GROUP BY _SalesTeamID ORDER BY COUNT(_SalesTeamID) DESC LIMIT 1", "source_tables": ["sales orders"]}, "evidence": "the highest number of orders in 2018 refers to MAX(COUNT(OrderNumber where SUBSTR(OrderDate, -2) = '18'));"}
{"sample_id": 2636, "db_id": "regional_sales", "final": {"question": "What is the unit cost of order SO - 000103?", "sql": "SELECT DISTINCT T FROM ( SELECT IIF(OrderNumber = 'SO - 000103', 'Unit Cost', NULL) AS T FROM 'Sales Orders' ) WHERE T IS NOT NULL", "source_tables": ["sales orders"]}, "evidence": "OrderNumber = 'SO - 000103';"}
{"sample_id": 2637, "db_id": "regional_sales", "final": {"question": "In 2020, what were the total orders of all stores in Maricopa County?", "sql": "SELECT SUM(CASE WHEN T2.County = 'Maricopa County' AND OrderDate LIKE '%/%/20' THEN 1 ELSE 0 END) FROM 'Sales Orders' AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StoreID = T1._StoreID", "source_tables": ["sales orders", "store locations"]}, "evidence": "total orders refer to COUNT(OrderNumber); 2020 refers to SUBSTR(OrderDate, -2) = '20';"}
{"sample_id": 2638, "db_id": "regional_sales", "final": {"question": "What is the detailed position of the store which has order SO - 000115?", "sql": "SELECT T2.Latitude, T2.Longitude FROM 'Sales Orders' AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderNumber = 'SO - 000115'", "source_tables": ["sales orders", "store locations"]}, "evidence": "Latitude and Longitude coordinates can be used to identify the detailed position of stores; store refers to StoreID WHERE OrderNumber = 'SO - 000115';"}
{"sample_id": 2639, "db_id": "regional_sales", "final": {"question": "Please calculate the total number of orders by each city in 2019.", "sql": "SELECT COUNT(T1.OrderNumber) FROM 'Sales Orders' AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderDate LIKE '%/%/19' GROUP BY T2.'City Name' HAVING COUNT(T1.OrderNumber)", "source_tables": ["sales orders", "store locations"]}, "evidence": "total number of orders refers to COUNT(OrderNumber); 2019 refers to OrderDate between 01-01-2019 and 31-12-2019; city refers to City Name;"}
{"sample_id": 2640, "db_id": "regional_sales", "final": {"question": "Please list the names of customers who have total orders of over 3 in 2018.", "sql": "SELECT DISTINCT IIF(COUNT(T2.CustomerID) > 3, T2.'Customer Names', NULL) FROM 'Sales Orders' AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T1.OrderDate LIKE '%/%/18' GROUP BY T1._CustomerID HAVING COUNT(T2.CustomerID)", "source_tables": ["sales orders", "customers"]}, "evidence": "total orders of over 3 in 2018 refer to COUNT(OrderNumber) > 3 where SUBSTR(OrderDate, -2) = '18';"}
{"sample_id": 2641, "db_id": "regional_sales", "final": {"question": "What were the total orders of Medsep Group from 2018 to 2020?", "sql": "SELECT SUM(CASE WHEN SUBSTR(T1.OrderDate, -2) IN ('18', '19', '20') AND T2.'Customer Names' = 'Medsep Group' THEN 1 ELSE 0 END) FROM 'Sales Orders' AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID", "source_tables": ["sales orders", "customers"]}, "evidence": "Medsep Group is the name of the customer; total orders refer to COUNT(OrderNumber); from 2018 to 2020 refers to SUBSTR(OrderDate, -2) IN ('18', '19', '20');"}
{"sample_id": 2642, "db_id": "regional_sales", "final": {"question": "Please list the customer names whose order quantity was more than 5 on 6/1/2018.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN SUM(T1.'Order Quantity') > 5 THEN T2.'Customer Names' END AS T FROM 'Sales Orders' T1 INNER JOIN Customers T2 ON T2.CustomerID = T1._CustomerID WHERE T1.OrderDate = '6/1/18' GROUP BY T1._CustomerID ) WHERE T IS NOT NULL", "source_tables": ["sales orders", "customers"]}, "evidence": "order quantity was more than 5 on 6/1/2018 refers to Order Quantity > 5 where OrderDate = 6/1/2018;"}
{"sample_id": 2643, "db_id": "regional_sales", "final": {"question": "What is the percentage of total orders of Stephen Payne that had a net profit of over 1000?", "sql": "SELECT CAST(SUM(CASE WHEN REPLACE(T1.'Unit Price', ',', '') - REPLACE(T1.'Unit Cost', ',', '') > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM 'Sales Orders' AS T1 INNER JOIN 'Sales Team' AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.'Sales Team' = 'Stephen Payne'", "source_tables": ["sales orders", "sales team"]}, "evidence": "Sales Team = 'Stephen Payne'; net profit can be computed as SUBTRACT(Unit Price, Unit Cost); DIVIDE(COUNT(OrderNumber where Sales Team = 'Stephen Payne' and Net Profit > 1000)), (COUNT(OrderNumber where Sales Team = 'Stephen Payne')) as percentage;"}
{"sample_id": 2644, "db_id": "regional_sales", "final": {"question": "How many sales team were from Northeast?", "sql": "SELECT SUM(CASE WHEN Region = 'Northeast' THEN 1 ELSE 0 END) FROM 'Sales Team'", "source_tables": ["sales team"]}, "evidence": "Northeast is the name of the region;"}
{"sample_id": 2645, "db_id": "regional_sales", "final": {"question": "State the name of all city in Maricopa County along with its latitude and longitude.", "sql": "SELECT DISTINCT 'City Name', Latitude, Longitude FROM 'Store Locations' WHERE County = 'Maricopa County'", "source_tables": ["store locations"]}, "evidence": ""}
{"sample_id": 2646, "db_id": "regional_sales", "final": {"question": "Which order have the highest unit cost?", "sql": "SELECT OrderNumber FROM 'Sales Orders' WHERE REPLACE('Unit Cost', ',', '') = ( SELECT REPLACE('Unit Cost', ',', '') FROM 'Sales Orders' ORDER BY REPLACE('Unit Cost', ',', '') DESC LIMIT 1 )", "source_tables": ["sales orders"]}, "evidence": "order have the highest unit cost refers to OrderNumber where MAX(Unit Cost);"}
{"sample_id": 2647, "db_id": "regional_sales", "final": {"question": "List all the name of products with the ID of 30 to 40.", "sql": "SELECT T FROM ( SELECT CASE  WHEN ProductID BETWEEN 30 AND 40 THEN 'Product Name' ELSE NULL END AS T FROM Products ) WHERE T IS NOT NULL", "source_tables": ["products"]}, "evidence": "products with the ID of 30 to 40 refer to Product Name WHERE ProductID BETWEEN 30 AND 40;"}
{"sample_id": 2648, "db_id": "regional_sales", "final": {"question": "Calculate ratio between the highest unit cost and the lowest unit cost?", "sql": "SELECT ( SELECT REPLACE('Unit Cost', ',', '') FROM 'Sales Orders' WHERE REPLACE('Unit Cost', ',', '') = ( SELECT REPLACE('Unit Cost', ',', '') FROM 'Sales Orders' ORDER BY REPLACE('Unit Cost', ',', '') DESC LIMIT 1 ) ORDER BY REPLACE('Unit Cost', ',', '') DESC LIMIT 1 ) / ( SELECT REPLACE('Unit Cost', ',', '') FROM 'Sales Orders' WHERE REPLACE('Unit Cost', ',', '') = ( SELECT REPLACE('Unit Cost', ',', '') FROM 'Sales Orders' ORDER BY REPLACE('Unit Cost', ',', '') ASC LIMIT 1 ) ORDER BY REPLACE('Unit Cost', ',', '') ASC LIMIT 1 )", "source_tables": ["sales orders"]}, "evidence": "ratio can be calculated as DIVIDE(MAX(Unit_Cost)), MIN(Unit Cost);"}
{"sample_id": 2649, "db_id": "regional_sales", "final": {"question": "Which product was ordered the most in 2018?", "sql": "SELECT T2.'Product Name' FROM 'Sales Orders' AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.OrderDate LIKE '%/%/18' GROUP BY T1._ProductID ORDER BY COUNT(T1._ProductID) DESC LIMIT 1", "source_tables": ["sales orders", "products"]}, "evidence": "product refers to Product Name; ordered the most in 2018 refers to MAX(COUNT(OrderNumber)) where SUBSTR(OrderDate, -2) = '18';"}
{"sample_id": 2650, "db_id": "regional_sales", "final": {"question": "How many products sold by Adam Hernandez?", "sql": "SELECT SUM(CASE WHEN T2.'Sales Team' = 'Adam Hernandez' THEN 1 ELSE 0 END) FROM 'Sales Orders' AS T1 INNER JOIN 'Sales Team' AS T2 ON T2.SalesTeamID = T1._SalesTeamID", "source_tables": ["sales orders", "sales team"]}, "evidence": "products sold by Adam Hernandez refer to SUM(Order Quantity where Sales Team = 'Adam Hernandez');"}
{"sample_id": 2651, "db_id": "regional_sales", "final": {"question": "List all orders where its products were shipped from Daly City.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.'City Name' = 'Daly City' THEN T1.OrderNumber END AS T FROM 'Sales Orders' T1 INNER JOIN 'Store Locations' T2 ON T2.StoreID = T1._StoreID ) WHERE T IS NOT NULL", "source_tables": ["sales orders", "store locations"]}, "evidence": "shipped from Daly City refers to Store Locations where City Name = 'Daly City'; orders refer to OrderNumber;"}
{"sample_id": 2652, "db_id": "regional_sales", "final": {"question": "How many orders made by Rochester Ltd?", "sql": "SELECT SUM(CASE WHEN T1.'Customer Names' = 'Rochester Ltd' THEN 1 ELSE 0 END) FROM Customers AS T1 INNER JOIN 'Sales Orders' AS T2 ON T2._CustomerID = T1.CustomerID", "source_tables": ["sales orders", "customers"]}, "evidence": "Rochester Ltd is the name of the customer; orders refer to OrderNumber;"}
{"sample_id": 2653, "db_id": "regional_sales", "final": {"question": "State the order number where Qualitest ordered the highest product quantity.", "sql": "SELECT T1.OrderNumber FROM 'Sales Orders' AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.'Customer Names' = 'Qualitest ' ORDER BY T1.'Order Quantity' DESC LIMIT 1", "source_tables": ["sales orders", "customers"]}, "evidence": "Qualitest ordered the highest product quantity refers to Customer Names where MAX(Order Quantity);"}
{"sample_id": 2654, "db_id": "regional_sales", "final": {"question": "List the order for all in-store sales along with the products sold.", "sql": "SELECT DISTINCT T1.OrderNumber, T2.'Product Name' FROM 'Sales Orders' AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.'Sales Channel' = 'In-Store'", "source_tables": ["sales orders", "products"]}, "evidence": "orders for all in-store sales refer to OrderNumber where Sales Channel = 'In-Store'; products refer to Product Name;"}
{"sample_id": 2655, "db_id": "regional_sales", "final": {"question": "How many online sales were made in May 2018 where products were shipped from Norman?", "sql": "SELECT SUM(CASE WHEN T1.OrderDate LIKE '5/%/18' AND T1.'Sales Channel' = 'Online' AND T2.'City Name' = 'Norman' THEN 1 ELSE 0 END) FROM 'Sales Orders' AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StoreID = T1._StoreID", "source_tables": ["sales orders", "store locations"]}, "evidence": "online sales refer to OrderNumber where Sales Channel = 'Online'; May 2018 refers to OrderDate LIKE '5/%/18'; Norman is the name of the city;"}
{"sample_id": 2656, "db_id": "regional_sales", "final": {"question": "Among the products sold in Maricopa County, which was the least sold?", "sql": "SELECT T1.'Product Name' FROM Products AS T1 INNER JOIN 'Sales Orders' AS T2 ON T2._ProductID = T1.ProductID INNER JOIN 'Store Locations' AS T3 ON T3.StoreID = T2._StoreID WHERE T3.County = 'Maricopa County' ORDER BY T2.'Order Quantity' ASC LIMIT 1", "source_tables": ["sales orders", "products", "store locations"]}, "evidence": "the least sold product refers to Product Name where MIN(Order Quantity);"}
{"sample_id": 2657, "db_id": "regional_sales", "final": {"question": "State all the order numbers for sales team of Samuel Fowler.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.'Sales Team' = 'Samuel Fowler' THEN T1.OrderNumber ELSE NULL END AS T FROM 'Sales Orders' T1 INNER JOIN 'Sales Team' T2 ON T2.SalesTeamID = T1._SalesTeamID ) WHERE T IS NOT NULL", "source_tables": ["sales orders", "sales team"]}, "evidence": ""}
{"sample_id": 2658, "db_id": "regional_sales", "final": {"question": "Find the number of baseball ordered in December 2017.", "sql": "SELECT COUNT(T2.OrderNumber) FROM Products AS T1 INNER JOIN 'Sales Orders' AS T2 ON T2._ProductID = T1.ProductID WHERE T1.'Product Name' = 'Baseball' AND T2.OrderDate LIKE '12/%/18'", "source_tables": ["sales orders", "products"]}, "evidence": "Product Name = 'Baseball'; December 2017 refers to OrderDate LIKE '12/%/17';"}
{"sample_id": 2659, "db_id": "regional_sales", "final": {"question": "Find the average number of ornaments sold each month in 2018.", "sql": "SELECT CAST(SUM(T2.'Order Quantity') AS REAL) / 12 FROM Products AS T1 INNER JOIN 'Sales Orders' AS T2 ON T2._ProductID = T1.ProductID WHERE T1.'Product Name' = 'Ornaments' AND T2.OrderDate LIKE '%/%/18'", "source_tables": ["sales orders", "products"]}, "evidence": "DIVIDE(SUM(Order Quantity where Product Name = 'Ornaments' and OrderDate LIKE '%/18'), 12);"}
{"sample_id": 2660, "db_id": "regional_sales", "final": {"question": "Find the percentage of products that were shipped from Burbank in 2018?", "sql": "SELECT CAST(SUM(CASE WHEN T3.'City Name' = 'Burbank' THEN T2.'Order Quantity' ELSE 0 END) AS REAL) * 100 / SUM(T2.'Order Quantity') FROM Products AS T1 INNER JOIN 'Sales Orders' AS T2 ON T2._ProductID = T1.ProductID INNER JOIN 'Store Locations' AS T3 ON T3.StoreID = T2._StoreID WHERE T2.OrderDate LIKE '%/%/18'", "source_tables": ["sales orders", "products", "store locations"]}, "evidence": "DIVIDE(SUM(Order Quantity where City Name = 'Burbank' and SUBSTR(OrderDate, -2) = '18')), (SUM(Order Quantity where SUBSTR(OrderDate, -2) = '18')) as percentage;"}
{"sample_id": 2661, "db_id": "regional_sales", "final": {"question": "What is the difference in order number from \"WARE-MKL1006\" and \"WARE-NBV1002\"?", "sql": "SELECT SUM(IIF(WarehouseCode = 'WARE-MKL1006', 1, 0)) - SUM(IIF(WarehouseCode = 'WARE-NBV1002', 1, 0)) AS difference FROM 'Sales Orders'", "source_tables": ["sales orders"]}, "evidence": "\"WARE-NBV1002\" and \"WARE-MKL1006\" are both WarehouseCode; difference in order number = Subtract(Count(OrderNumber where WarehouseCode = 'WARE-MKL1006'), Count(OrderNumber where WarehouseCode = 'WARE-NBV1002'))"}
{"sample_id": 2662, "db_id": "regional_sales", "final": {"question": "Describe the product names delivered in 2021 for the customer \"Sundial\".", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.DeliveryDate LIKE '%/%/21' AND T1.'Customer Names' = 'Sundial ' THEN T3.'Product Name' END AS T FROM Customers T1 INNER JOIN 'Sales Orders' T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products T3 ON T3.ProductID = T2._ProductID ) WHERE T IS NOT NULL", "source_tables": ["sales orders", "products", "customers"]}, "evidence": "delivered in 2021 refer to DeliveryDate LIKE '%/21'; 'Sundial' is the Customer Names"}
{"sample_id": 2663, "db_id": "regional_sales", "final": {"question": "Write down the store IDs and region of the state \"Michigan\".", "sql": "SELECT DISTINCT T2.StoreID, T1.Region FROM Regions AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StateCode = T1.StateCode WHERE T2.State = 'Michigan'", "source_tables": ["regions", "store locations"]}, "evidence": "\"Michigan\" is the State"}
{"sample_id": 2664, "db_id": "regional_sales", "final": {"question": "Compare the total number of orders between customer \"Apollo Ltd\" and \"Pacific Ltd\".", "sql": "SELECT SUM(CASE WHEN T2.'Customer Names' = 'Apollo Ltd' THEN 1 ELSE 0 END), SUM(CASE WHEN T2.'Customer Names' = 'Pacific Ltd' THEN 1 ELSE 0 END) FROM 'Sales Orders' AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID", "source_tables": ["sales orders", "customers"]}, "evidence": "\"Apollo Ltd\" and \"Pacific Ltd\" are both Customer Names; total number of orders refers to COUNT(OrderNumber)"}
{"sample_id": 2665, "db_id": "regional_sales", "final": {"question": "Find the store ID with more orders between \"Aurora\" and \"Babylon\" city.", "sql": "SELECT T2.StoreID FROM 'Sales Orders' AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StoreID = T1._StoreID WHERE T2.'City Name' = 'Aurora (Township)' OR T2.'City Name' = 'Babylon (Town)' GROUP BY T2.StoreID ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1", "source_tables": ["sales orders", "store locations"]}, "evidence": "\"Aurora\" refers to City Name = 'Aurora (Township)'; \"Babylon\" refers to City Name = 'Babylong (Town)'; more order refers to Max(Count(OrderNumber))"}
{"sample_id": 2666, "db_id": "regional_sales", "final": {"question": "List down the customer names and product names of the order made by \"Anthony Torres\" via distributor channel.", "sql": "SELECT DISTINCT T1.'Customer Names', T4.'Product Name' FROM Customers AS T1 INNER JOIN 'Sales Orders' AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN 'Sales Team' AS T3 ON T3.SalesTeamID = T2._SalesTeamID INNER JOIN Products AS T4 ON T4.ProductID = T2._ProductID WHERE T3.'Sales Team' = 'Anthony Torres' AND T2.'Sales Channel' = 'Distributor'", "source_tables": ["sales orders", "sales team", "products", "customers"]}, "evidence": "\"Anthony Torres\" is the name of Sales Team; distributor channel refers to Sales Channel = 'Distributor'"}
{"sample_id": 2667, "db_id": "regional_sales", "final": {"question": "Mention the customer names and IDs which ordered total net profit of above 5000 USD through online channel.", "sql": "SELECT DISTINCT 'Customer Names', CustomerID FROM ( SELECT T2.'Customer Names', T2.CustomerID , SUM(REPLACE(T1.'Unit Price', ',', '') - REPLACE(T1.'Unit Cost', ',', '')) AS T FROM 'Sales Orders' T1 INNER JOIN Customers T2 ON T2.CustomerID = T1._CustomerID WHERE T1.'Sales Channel' = 'Online' GROUP BY T2.CustomerID ) WHERE T > 5000", "source_tables": ["sales orders", "customers"]}, "evidence": "IDs refers to CustomerID; total net profit of above 5000 USD refers to SUM(Subtract(Unit Price, Unit Cost)) > 5000"}
{"sample_id": 2668, "db_id": "regional_sales", "final": {"question": "Find the net profit of the floral products which were delivered in 2021.", "sql": "SELECT SUM(REPLACE(T1.'Unit Price', ',', '') - REPLACE(T1.'Unit Cost', ',', '')) FROM 'Sales Orders' AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.DeliveryDate LIKE '%/%/21' AND T2.'Product Name' = 'Floral'", "source_tables": ["sales orders", "products"]}, "evidence": "floral product refers to Product Name = 'Floral'; total net profit = SUM(Subtract(Unit Price, Unit Cost)); delivered in 2021 refers to DeliveryDate LIKE '%/21'"}
{"sample_id": 2669, "db_id": "regional_sales", "final": {"question": "Count the number of orders made from the store in city with population of 3000000 to 4000000.", "sql": "SELECT COUNT(T1.OrderNumber) FROM 'Sales Orders' AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StoreID = T1._StoreID WHERE T2.Population BETWEEN 3000000 AND 4000000", "source_tables": ["sales orders", "store locations"]}, "evidence": "number of order refers to OrderNumber; population of 3000000 to 4000000 refers to Population BETWEEN 3000000 AND 4000000"}
{"sample_id": 2670, "db_id": "regional_sales", "final": {"question": "Name the products via wholesale channel of the store under Pacific/Honolulu time zone.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T3.'Time Zone' = 'Pacific/Honolulu' AND T2.'Sales Channel' = 'Wholesale' THEN T1.'Product Name' ELSE NULL END AS T FROM Products T1 INNER JOIN 'Sales Orders' T2 ON T2._ProductID = T1.ProductID INNER JOIN 'Store Locations' T3 ON T3.StoreID = T2._StoreID ) WHERE T IS NOT NULL", "source_tables": ["sales orders", "products", "store locations"]}, "evidence": "products refers to Product Name; via wholesale channel refers to Sales Channel = 'Wholesale'"}
{"sample_id": 2671, "db_id": "regional_sales", "final": {"question": "List the order numbers and product names which were ordered on 6th June, 2018.", "sql": "SELECT DISTINCT OrderNumber, 'Product Name' FROM ( SELECT IIF(T2.OrderDate = '6/6/18', T2.OrderNumber, NULL) AS 'OrderNumber' , IIF(T2.OrderDate = '6/6/18', T1.'Product Name', NULL) AS 'Product Name' FROM Products T1 INNER JOIN 'Sales Orders' T2 ON T2._ProductID = T1.ProductID ) WHERE OrderNumber IS NOT NULL AND 'Product Name' IS NOT NULL", "source_tables": ["sales orders", "products"]}, "evidence": "ordered on 6th June 2018 refers to OrderDate = '6/5/18'"}
{"sample_id": 2672, "db_id": "regional_sales", "final": {"question": "Find the average yearly order by customer Weimei Corp for 2018, 2019 and 2020.", "sql": "SELECT COUNT(T1.OrderNumber) / 3 FROM 'Sales Orders' AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE (T1.OrderDate LIKE '%/%/18' AND T2.'Customer Names' = 'Weimei Corp') OR (T1.OrderDate LIKE '%/%/19' AND T2.'Customer Names' = 'Weimei Corp') OR (T1.OrderDate LIKE '%/%/20' AND T2.'Customer Names' = 'Weimei Corp')", "source_tables": ["sales orders", "customers"]}, "evidence": "\"Weimei Corp\" is the Customer Names; in 2018, 2019 and 2020 refers to SUBSTR (OrderDate, -2) IN ('18', '19', '20') : Average order = Divide (Count (OrderNumber), 3)"}
{"sample_id": 2739, "db_id": "european_football_1", "final": {"question": "What is the most consecutive games tied by Ebbsfleet as an away team in the 2008 season?", "sql": "SELECT COUNT(*) FROM matchs WHERE season = 2008 AND AwayTeam = 'Ebbsfleet' AND FTR = 'D'", "source_tables": ["matchs"]}, "evidence": "consecutive games mean happen one after the other without interruption and refer to Date; tied refers to FTR = 'D';"}
{"sample_id": 2740, "db_id": "european_football_1", "final": {"question": "Of all the divisions in the world, what percentage of them belong to England?", "sql": "SELECT CAST(COUNT(CASE WHEN country = 'England' THEN division ELSE NULL END) AS REAL) * 100 / COUNT(division) FROM divisions", "source_tables": ["divisions"]}, "evidence": "DIVIDE(COUNT(division where country = 'England'), COUNT(division)) as percentage;"}
{"sample_id": 2741, "db_id": "european_football_1", "final": {"question": "What percentage of games won, games lost and games drawn does Cittadella have as a home team in total?", "sql": "SELECT CAST(COUNT(CASE WHEN FTR = 'H' THEN 1 ELSE NULL END) / COUNT(HomeTeam) AS REAL) * 100, CAST(COUNT(CASE WHEN FTR = 'A' THEN 1 ELSE NULL END) AS REAL) / COUNT(HomeTeam), CAST(COUNT(CASE WHEN FTR = 'D' THEN 1 ELSE NULL END) AS REAL) / COUNT(HomeTeam) FROM matchs WHERE HomeTeam = 'Cittadella'", "source_tables": ["matchs"]}, "evidence": "Percentage of games won = DIVIDE(COUNT(FTR = 'H' where HomeTeam = 'Cittadella'), COUNT(Div where HomeTeam = 'Cittadella')) as percentage; Percentage of games lost = DIVIDE(COUNT(FTR = 'A' where HomeTeam = 'Cittadella')), COUNT(Div where HomeTeam = 'Cittadella') as percentage; percentage of games drawn = DIVIDE(SUM(FTR = 'D'where HomeTeam = 'Cittadella'), COUNT(Div where HomeTeam = 'Cittadella')) as percentage;\n"}
{"sample_id": 2742, "db_id": "european_football_1", "final": {"question": "Of all the teams that played as a team away against Caen in the 2010 season, which one has the highest winning percentage?", "sql": "SELECT AwayTeam FROM matchs WHERE HomeTeam = 'Caen' AND season = 2010 AND FTR = 'A' GROUP BY AwayTeam ORDER BY COUNT(AwayTeam) DESC LIMIT 1", "source_tables": ["matchs"]}, "evidence": "Caen refers to HomeTeam; which one refers to AwayTeam; the highest winning percentage = MAX(DIVIDE(COUNT(FTR = 'A' where HomeTeam = 'Caen', season = '2010')), COUNT(Div where HomeTeam = 'Caen', season = '2010')) as percentage;"}
{"sample_id": 2743, "db_id": "european_football_1", "final": {"question": "What percentage of matches played on 2005/07/30 belong to the F1 division?", "sql": "SELECT CAST(SUM(CASE WHEN Div = 'F1' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Div) FROM matchs WHERE Date = '2005-07-30'", "source_tables": ["matchs"]}, "evidence": "Division refers to Div; DIVIDE(COUNT(Div = 'F1', Date = '2005/07/30'), COUNT(Div, Date = '2005/07/30')) as percentage;"}
{"sample_id": 2744, "db_id": "european_football_1", "final": {"question": "What percentage of all tied games did the Sassuolo team play in?", "sql": "SELECT CAST(SUM(CASE WHEN HomeTeam = 'Sassuolo' OR AwayTeam = 'Sassuolo' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(FTR) FROM matchs WHERE FTR = 'D'", "source_tables": ["matchs"]}, "evidence": "tied games refer FTR = 'D'; DIVIDE(COUNT(Div where FTR = 'D', HomeTeam = 'Sassuolo' or AwayTeam = 'Sassuolo'), COUNT(Div where HomeTeam = 'Sassuolo' or AwayTeam = 'Sassuolo')) as percentage;"}
{"sample_id": 2745, "db_id": "european_football_1", "final": {"question": "What is the percentage whereby the away team scored 2 goals during the 2017 seasons?", "sql": "SELECT CAST(SUM(CASE WHEN FTAG = 2 THEN 1 ELSE 0 END) / COUNT(FTAG) AS REAL) * 100 FROM matchs WHERE season = 2017", "source_tables": ["matchs"]}, "evidence": "scored 2 goals refers to FTAG = 2, which is short name for Final-time Away-team Goals; DIVIDE(COUNT(Div where season = 2017, FTAG = '2'), COUNT(Div where season = 2017)) as percentage;"}
{"sample_id": 2746, "db_id": "european_football_1", "final": {"question": "What is the name of all the teams that played in the EFL League One division?", "sql": "SELECT T1.HomeTeam,T1.AwayTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div=T2.division WHERE T2.name = 'EFL League One' and T1.Div = 'E2'", "source_tables": ["matchs", "divisions"]}, "evidence": "all the teams include both HomeTeam and AwayTeam; name = 'EFL League One'; DIV = 'E2';"}
{"sample_id": 2747, "db_id": "european_football_1", "final": {"question": "How many teams playing in divisions in Greece have ever scored 4 or more goals?", "sql": "SELECT COUNT(DISTINCT CASE WHEN T1.FTHG >= 4 THEN HomeTeam ELSE NULL end) + COUNT(DISTINCT CASE WHEN T1.FTAG >= 4 THEN AwayTeam ELSE NULL end) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.country = 'Greece'", "source_tables": ["matchs", "divisions"]}, "evidence": "teams include both HomeTeam and AwayTeam; country = 'Greece'; scored 4 or more goals refer to FTAG\u22654, which is short name for Final-time Away-team Goals;"}
{"sample_id": 2748, "db_id": "european_football_1", "final": {"question": "How many matches played in the 2019 season of Scottish Championship league were ended with an equal result of 2-2?", "sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2019 AND T2.name = 'Scottish Championship' AND T1.FTAG = 2 AND T1.FTHG = 2", "source_tables": ["matchs", "divisions"]}, "evidence": "matches refer to Div; Scottish Championship is a name of the league; equal result of 2-2 refers to FTAG = 2 AND FTHG = 2;"}
{"sample_id": 2749, "db_id": "european_football_1", "final": {"question": "Which 2 Scottish teams scored 10 goals playing as a local team and in which seasons?", "sql": "SELECT T1.HomeTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.country = 'Scotland' AND T1.FTHG = 10", "source_tables": ["matchs", "divisions"]}, "evidence": "local team refers to HomeTeam; Scottish means belong to the country = 'Scotland'; scored 10 goals refer to FTHG = 10, which is short name for Final-time Away-team Goals;"}
{"sample_id": 2750, "db_id": "european_football_1", "final": {"question": "From the Spanish LaLiga division in the 2017 season, which team won the most times as a local team and by what percentage?", "sql": "SELECT T1.HomeTeam HWHT , CAST(COUNT(CASE WHEN T1.FTR = 'H' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(HomeTeam) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'LaLiga' AND T2.country = 'Spain' AND T1.season = 2017", "source_tables": ["matchs", "divisions"]}, "evidence": "local team refers to HomeTeam; Spanish means belong to the country = 'Spain'; LaLiga is a name of division; won as a local team refers to FTR = 'H', where H stands for home victory; DIVIDE(COUNT(Div where name = 'LaLiga', country = 'Spain', season = 2017, FRT = 'H'), COUNT(Div where name = 'LaLiga', country = 'Spain', season = 2017)) as percentage;"}
{"sample_id": 2751, "db_id": "european_football_1", "final": {"question": "How many teams that played in the 2012 season belong to any of the English divisions and what percentage play in each of the divisions?", "sql": "SELECT ( SELECT COUNT(T1.Div) AS total FROM matchs T1 INNER JOIN divisions T2 ON T2.division = T1.Div WHERE T2.country = 'England' AND T1.season = 2012 ) AS num , CASE WHEN 1 THEN T.result END AS percentage FROM ( SELECT 100.0 * COUNT(T1.Div) / ( SELECT COUNT(T1.Div) FROM matchs T1 INNER JOIN divisions T2 ON T2.division = T1.Div WHERE T2.country = 'England' AND T1.season = 2012 ) AS result FROM matchs T1 INNER JOIN divisions T2 ON T2.division = T1.Div WHERE T2.country = 'England' AND T1.season = 2012 GROUP BY T2.division ) AS T", "source_tables": ["matchs", "divisions"]}, "evidence": "matches = Div"}
{"sample_id": 2752, "db_id": "european_football_1", "final": {"question": "What is the highest final-time score across all divisions in the 2021 season? Which team was the team that made up that score?", "sql": "SELECT ( SELECT MAX(MAX(FTAG), MAX(FTHG)) FROM matchs WHERE season = 2021 ) AS T1, AwayTeam FROM matchs WHERE season = 2021 AND FTHG = T1 OR FTAG = T1", "source_tables": ["matchs"]}, "evidence": "MAX(SUM where FTHG, FTAG, season = 2021);"}
{"sample_id": 2753, "db_id": "european_football_1", "final": {"question": "What is the name of the home team in division P1 with the highest final time goal in all seasons?", "sql": "SELECT HomeTeam FROM matchs WHERE Div = 'P1' AND season = 2021 ORDER BY FTHG DESC LIMIT 1", "source_tables": ["matchs"]}, "evidence": "the highest final time goal refers to MAX(FTHG); P1 = Div;"}
{"sample_id": 2754, "db_id": "european_football_1", "final": {"question": "What was the difference in home team and away team win percentages across all divisions in 2010?", "sql": "SELECT CAST(COUNT(CASE WHEN FTR = 'H' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(FTR) - CAST(COUNT(CASE WHEN FTR = 'A' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(FTR) DIFFERENCE FROM matchs WHERE season = 2010", "source_tables": ["matchs"]}, "evidence": "2010 refers to season = 2010; SUBTRACT(DIVIDE(COUNT(Div where FTR = 'H', season = 2010), COUNT(Div where season = 2010)), COUNT(Div where FTR = 'A', season = 2010), COUNT(Div where season = 2010)) as percentage;"}
{"sample_id": 2755, "db_id": "european_football_1", "final": {"question": "Which division had the most draft matches in the 2008 season?", "sql": "SELECT Div FROM matchs WHERE season = 2008 AND FTR = 'D' GROUP BY Div ORDER BY COUNT(FTR) DESC LIMIT 1", "source_tables": ["matchs"]}, "evidence": "the most draft matches refer to MAX(COUNT(Div)) where FTR = 'D';"}
{"sample_id": 2756, "db_id": "european_football_1", "final": {"question": "Which team won the match in the EC division on January 20, 2008 at home?", "sql": "SELECT HomeTeam FROM matchs WHERE Div = 'EC' AND Date = '2008-01-20' AND FTR = 'H'", "source_tables": ["matchs"]}, "evidence": "won at home refers to FTR = 'H'; January 20, 2008 refers to Date = '2008-01-20'; EC division refers to Div = 'EC';"}
{"sample_id": 2757, "db_id": "european_football_1", "final": {"question": "What is the name of the division in which Club Brugge and Genk competed on September 13, 2009?", "sql": "SELECT T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.Date = '2009-09-13' and T1.HomeTeam = 'Club Brugge' AND T1.AwayTeam = 'Genk'", "source_tables": ["matchs", "divisions"]}, "evidence": "September 13, 2009 refers to Date = '2009-09-13'; Club Brugge refers to HomeTeam; Genk refers to AwayTeam;"}
{"sample_id": 2758, "db_id": "european_football_1", "final": {"question": "How many matches were played in the Scottish Premiership division from 2006 to 2008?", "sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Scottish Premiership' AND (T1.season BETWEEN 2006 AND 2008)", "source_tables": ["matchs", "divisions"]}, "evidence": "Scottish Premiership is a name of division; from 2006 to 2008 means seasons between 2006 and 2008;"}
{"sample_id": 2759, "db_id": "european_football_1", "final": {"question": "In which division was the match between Hibernian, the away team, and Hearts, the home team, played? To which country does this division belong?", "sql": "SELECT DISTINCT T2.division,T2.country FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.HomeTeam = 'Hearts' AND T1.AwayTeam = 'Hibernian'", "source_tables": ["matchs", "divisions"]}, "evidence": "FALSE;"}
{"sample_id": 2760, "db_id": "european_football_1", "final": {"question": "Which away team in the division of Bundesliga has the highest final time goals?", "sql": "SELECT T1.AwayTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div=T2.division WHERE T2.name = 'Bundesliga' ORDER BY T1.FTAG DESC LIMIT 1", "source_tables": ["matchs", "divisions"]}, "evidence": "Bundesliga is a name of division; the highest final time goals refers to MAX(FTAG);"}
{"sample_id": 2761, "db_id": "european_football_1", "final": {"question": "Please provide the names of any three away teams that competed in the Italian divisions.", "sql": "SELECT T1.AwayTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div=T2.division WHERE T2.country = 'Italy' LIMIT 3", "source_tables": ["matchs", "divisions"]}, "evidence": "Italian means belong to country = 'Italy\";"}
{"sample_id": 2762, "db_id": "european_football_1", "final": {"question": "What is the name of the division that has had the lowest number of draft matches in the 2019 season?", "sql": "SELECT T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2019 AND T1.FTR = 'D' GROUP BY T2.division ORDER BY COUNT(FTR) LIMIT 1", "source_tables": ["matchs", "divisions"]}, "evidence": "the lowest number of draft matches refers to MIN(COUNT(FTR = 'D'));"}
{"sample_id": 2763, "db_id": "european_football_1", "final": {"question": "How many times did Valencia's home team win in the LaLiga division?", "sql": "SELECT COUNT(T1.HomeTeam) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'LaLiga' AND T1.HomeTeam = 'Valencia' AND T1.FTR = 'H'", "source_tables": ["matchs", "divisions"]}, "evidence": "LaLiga is a name of the division; Valencia's home team refers to HomeTeam = 'Valencia'; win refers to FTR = 'H';"}
{"sample_id": 2764, "db_id": "european_football_1", "final": {"question": "In how many matches in the Seria A division did both teams have equal goals?", "sql": "SELECT COUNT(T1.FTR) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Seria A' AND T1.FTR = 'D'", "source_tables": ["matchs", "divisions"]}, "evidence": "Seria A is a name of division; equal goals refers to FTR = 'D', where D stands for draft;"}
{"sample_id": 2765, "db_id": "european_football_1", "final": {"question": "How many football divisions does England have?", "sql": "SELECT COUNT(division) FROM divisions WHERE country = 'England'", "source_tables": ["divisions"]}, "evidence": "England is the name of country;"}
{"sample_id": 2766, "db_id": "european_football_1", "final": {"question": "What's the name of the football division in the Netherlands?", "sql": "SELECT name FROM divisions WHERE country = 'Netherlands'", "source_tables": ["divisions"]}, "evidence": "Netherlands is the name of country;"}
{"sample_id": 2767, "db_id": "european_football_1", "final": {"question": "Who is the winner of the game happened on 2009/10/10, between \"East Fife\" and \"Dumbarton\"?", "sql": "SELECT CASE WHEN FTR = 'H' THEN 'East Fife' ELSE 'Dumbarton' END WINNER FROM matchs WHERE Date = '2009-10-10' AND HomeTeam = 'East Fife' AND AwayTeam = 'Dumbarton'", "source_tables": ["matchs"]}, "evidence": "2009/10/10 is a date; the winner refers to FTR = 'A'; East Fife and Dumbarton are name of teams where HomeTeam = 'East Fife'; AwayTeam = 'Dumbarton';"}
{"sample_id": 2768, "db_id": "european_football_1", "final": {"question": "What was the final score for the game Bursaspor vs Denizlispor on 2009/4/26?", "sql": "SELECT FTHG, FTAG FROM matchs WHERE Date = '2009-04-26' AND HomeTeam = 'Bursaspor' AND AwayTeam = 'Denizlispor'", "source_tables": ["matchs"]}, "evidence": "Bursaspor vs Denizlispor are names of teams where HomeTeam = 'Bursaspor' and AwayTeam = 'Denizlispor'; Date = '2009-04-26'; final score refers to FTHG, FTAG;"}
{"sample_id": 2769, "db_id": "european_football_1", "final": {"question": "When did the first match that score more than 10 goals happen?", "sql": "SELECT MIN(Date) FROM matchs WHERE FTHG + FTAG > 10", "source_tables": ["matchs"]}, "evidence": "score more than 10 goals refers to SUM(FTHG, FTAG)>10, which are short names for Final-time Home-team Goals and Final-time Away-team Goals; the first means the earliest and refers to MIN(Date);"}
{"sample_id": 2770, "db_id": "european_football_1", "final": {"question": "For the Ligue 2 game that made the most goals, who is the winner of that game?", "sql": "SELECT CASE WHEN T1.FTR = 'H' THEN T1.HomeTeam ELSE T1.AwayTeam END WINNER FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Ligue 2' ORDER BY T1.FTAG + T1.FTHG DESC LIMIT 1", "source_tables": ["matchs", "divisions"]}, "evidence": "Ligue 2 is the name of division; the most goals refer to MAX(SUM(FTHG, FTAG)) which are short names for Final-time Home-team Goals and Final-time Away-team Goals; winner refers to FTR = 'A';"}
{"sample_id": 2771, "db_id": "european_football_1", "final": {"question": "How many Away Victories happened on 2016/3/27 in the LaLiga 2 division?", "sql": "SELECT COUNT(T1.FTR) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'LaLiga 2' AND T1.Date = '2016-03-27' AND T1.FTR = 'A'", "source_tables": ["matchs", "divisions"]}, "evidence": "Away victories refer to FTR = 'A'; LaLiga 2 is the name of division; Date = '2016-03-27';"}
{"sample_id": 2772, "db_id": "european_football_1", "final": {"question": "How many draw games happened on 2018/8/7 for National League?", "sql": "SELECT COUNT(T1.FTR) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'National League' AND T1.Date = '2018-08-07' AND T1.FTR = 'D'", "source_tables": ["matchs", "divisions"]}, "evidence": "National League is the name of division; Date = '2018-08-07'; draw refers to FTR = 'D'; games refer to Div;"}
{"sample_id": 2796, "db_id": "professional_basketball", "final": {"question": "Among the winning game from the team, what is the percentage of the winning was home game.", "sql": "SELECT CAST(homeWon AS REAL) * 100 / won  FROM teams", "source_tables": ["teams"]}, "evidence": "percentage of winning at the home = Divide(homeWon, won) * 100"}
{"sample_id": 2797, "db_id": "professional_basketball", "final": {"question": "Which team(s) has greater than 75% lost among all the games played.", "sql": "SELECT name FROM teams WHERE CAST(lost AS REAL) * 100 / games > 75", "source_tables": ["teams"]}, "evidence": "greater than 75% lost refers to Divide(lost, games) > 0.75; team refers to tmID"}
{"sample_id": 2798, "db_id": "professional_basketball", "final": {"question": "List the team name and the total wins of the team in year 2005 which has greater winning from the previous year.", "sql": "SELECT T1.name, T1.won FROM teams AS T1 INNER JOIN ( SELECT * FROM teams WHERE year = 2004 ) AS T2 on T1.tmID = T2.tmID WHERE T1.year = 2005 and T1.won > T2.won", "source_tables": ["teams"]}, "evidence": "2005 refers to year = 2005 ; previous year refers to year = 2004; team with greater winning than previous year refers to Won where year = 2005 > Won where year = 2004; team name refers to tmID"}
{"sample_id": 2799, "db_id": "professional_basketball", "final": {"question": "For team who has more home won than home lost more than 80%, list the team name and the offense points.", "sql": "SELECT name, o_pts FROM teams WHERE CAST((homeWon - homeLost) AS REAL) * 100 / games > 80", "source_tables": ["teams"]}, "evidence": "home won than home lost more than 80% refers to Divide(Subtract(homeWon, homeLost), games) > 0.8; offense point refers to o_fgm"}
{"sample_id": 2800, "db_id": "professional_basketball", "final": {"question": "What is the percentage of the teams who had post season (playoff) were ranked number 1?", "sql": "SELECT CAST(SUM(CASE WHEN rank = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(name) FROM teams", "source_tables": ["teams"]}, "evidence": "had post season (play off) refers to playoff is not null; percentage = Divide (Count(Team where rank = 1, Count(Team))) * 100"}
{"sample_id": 2801, "db_id": "professional_basketball", "final": {"question": "Who is the coach for 'BOS' team in year 1950. List the coach ID together with the number of game won and lost.", "sql": "SELECT coachID, won, lost FROM coaches WHERE year = 1950 AND tmID = 'BOS'", "source_tables": ["coaches"]}, "evidence": "'BOS' is the tmID; 1950 refers to year = 1950; number of game won refers to won; number of game lost refers to lost"}
{"sample_id": 2802, "db_id": "professional_basketball", "final": {"question": "Who is the longest serving coach from year 1970 to 1980. List the coach ID and the team(s) he served.", "sql": "SELECT coachID, tmID FROM coaches WHERE year BETWEEN 1970 AND 1980 ORDER BY stint DESC LIMIT 1", "source_tables": ["coaches"]}, "evidence": "1970 to 1980 refers to year between 1970 and 1980; longest serving coach Max(Count(coachID)); team(s) he served refers to tmID"}
{"sample_id": 2803, "db_id": "professional_basketball", "final": {"question": "In year 2000, who are the coaches with more than 50 games won. List the coachID, team name and number of game won at home game.", "sql": "SELECT T1.coachID, T2.name, T2.won FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 2000 AND T2.won > 50", "source_tables": ["coaches", "teams"]}, "evidence": "more than 50 games won refers to won > 50"}
{"sample_id": 2804, "db_id": "professional_basketball", "final": {"question": "List all the coaches with more game lost than won from year 2000-2010. List the coach ID, team name and year.", "sql": "SELECT DISTINCT T1.coachID, T2.tmID, T1.year FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year BETWEEN 2000 AND 2010 AND T2.lost > T2.won", "source_tables": ["coaches", "teams"]}, "evidence": "from year 2000 to 2010 refers to year between 2000 and 2010; more game lost then won refers to lost > won"}
{"sample_id": 2805, "db_id": "professional_basketball", "final": {"question": "Which are the teams coached by 'adelmri01' from year 1990-1995. List the team name, year and offense point.", "sql": "SELECT T2.name, T1.year, T2.o_pts FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year BETWEEN 1990 AND 1995 AND T1.coachID = 'adelmri01'", "source_tables": ["coaches", "teams"]}, "evidence": "year 1990-1995 refers to year between 1990 and 1995; 'adelmri01' is the coachID; offense point refers to o_fgm"}
{"sample_id": 2806, "db_id": "professional_basketball", "final": {"question": "Which team(s) had 90% games won. List the coach ID for the team and year played.", "sql": "SELECT DISTINCT T2.name, T1.year, T1.coachID FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID WHERE CAST(T2.won AS REAL) * 100 / T2.games > 90", "source_tables": ["coaches", "teams"]}, "evidence": "team with 90% games won refers to Divide (won, games) > 0.9"}
{"sample_id": 2807, "db_id": "professional_basketball", "final": {"question": "What is the percentage of player who won \"All-Defensive First Team\" from 1980 - 2000 is from 'NY'.", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T1.birthState = 'NY' AND T2.award = 'All-Defensive First Team' AND T2.year BETWEEN 1980 AND 2000", "source_tables": ["players", "awards_players"]}, "evidence": "\"All-Defensive First Team\" is the award; ' NY' is the birthState; 1980 to 2000 refers to year between 1980 and 2000; percentage = Divide (Count(playerID where birthState = 'NY'), Count(playerID)) * 100"}
{"sample_id": 2808, "db_id": "professional_basketball", "final": {"question": "What division did the team coached by the winner of the 1977 NBA Coach of the Year award play in in 1976?", "sql": "SELECT DISTINCT T3.divID FROM awards_coaches AS T1 INNER JOIN coaches AS T2 ON T1.coachID = T2.coachID INNER JOIN teams AS T3 ON T2.tmID = T3.tmID WHERE T1.year = 1977 AND T1.award = 'NBA Coach of the Year' AND T3.year = 1976", "source_tables": ["coaches", "awards_coaches", "teams"]}, "evidence": "\"NBA Coach of the Year\" is the award; in 1977 refers to year = 1977; in 1976 refers to year = 1976; division refers to divisionID"}
{"sample_id": 2809, "db_id": "professional_basketball", "final": {"question": "Which coach of the Chicago Bulls during the year 1981 won the NBA Coach of the Year award in the 1970s?", "sql": "SELECT DISTINCT T2.coachID FROM coaches AS T1 INNER JOIN awards_coaches AS T2 ON T1.coachID = T2.coachID INNER JOIN teams AS T3 ON T3.tmID = T1.tmID WHERE T2.award = 'NBA Coach of the Year' AND T2.year BETWEEN 1970 AND 1979 AND T1.year = 1981 AND T3.name = 'Chicago Bulls'", "source_tables": ["teams", "coaches", "awards_coaches"]}, "evidence": "\"Chicago Bull\" is the name of team; during the year 1981 refers to year = 1981; 'NBA Coach of the Year' is the award; in the 1970s refers to year between 1970 to 1979"}
{"sample_id": 2810, "db_id": "professional_basketball", "final": {"question": "What is the nickname of the NBA player whose team competed in the Western Conference in the season 2006 and who had a total of two blocks?", "sql": "SELECT T2.nameNick FROM player_allstar AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.blocks = 2 AND T1.conference = 'West' AND T1.season_id = 2006", "source_tables": ["player_allstar", "players"]}, "evidence": "completed in the Western conference refers to conference = 'West'; in season 2006 refers to season_id = 2006; total of two blocks refers to blocks = 2; nickname refers to nameNick"}
{"sample_id": 2811, "db_id": "professional_basketball", "final": {"question": "In what year did the only team to beat the Houston in the final round of postseason series games earn its lowest ranking?", "sql": "SELECT T2.year FROM series_post AS T1 INNER JOIN teams AS T2 ON T1.tmIDWinner = T2.tmID WHERE T1.round = 'DSF' AND T1.tmIDLoser = 'HSM' ORDER BY T2.rank ASC LIMIT 1", "source_tables": ["series_post", "teams"]}, "evidence": "beat the Huston refers to tmIDLoser = 'HSM';\u00a0 in final round of post season refers to round = 'DSF'"}
{"sample_id": 2812, "db_id": "professional_basketball", "final": {"question": "What is the birth date of the player with the most assists during the 1985 All-Star season?", "sql": "SELECT T1.birthDate FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id = 1985 ORDER BY T2.assists DESC LIMIT 1", "source_tables": ["player_allstar", "players"]}, "evidence": "most assist refers to Max(assists); in 1985 All Star season refers to season_id = 1985"}
{"sample_id": 2813, "db_id": "professional_basketball", "final": {"question": "Which player, born in Winter Haven, played 12 minutes per season during the 1980s in the All-Stars?", "sql": "SELECT DISTINCT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCity = 'Winter Haven' AND T2.season_id BETWEEN 1980 AND 1989 AND T2.minutes = 12", "source_tables": ["player_allstar", "players"]}, "evidence": "born in Winter Haven refers to birthCity = 'Winter Haven'; during the 1980s in All-Stars refers to season_id = 1980; played in 12 minutes\u00a0 per season refers to minutes = 12"}
{"sample_id": 2814, "db_id": "professional_basketball", "final": {"question": "Of all the All-star players who played in the Eastern Conference for no more than 5 minutes, how many went to Illinois College?", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.conference = 'East' AND T2.minutes <= 5 AND T1.college = 'Illinois'", "source_tables": ["player_allstar", "players"]}, "evidence": "Eastern conference refers to conference = 'East'; no more than 5 minutes refers to minutes < 5"}
{"sample_id": 2815, "db_id": "professional_basketball", "final": {"question": "Between the years 1990 and 2007, of the total rebounds achieved by each player, how many managed to exceed 75% of defensive rebounds?", "sql": "SELECT COUNT(DISTINCT playerID) FROM player_allstar WHERE CAST(d_rebounds AS REAL) * 100 / rebounds > 75 AND season_id BETWEEN 1990 AND 2007", "source_tables": ["player_allstar"]}, "evidence": "the year 1990 and 2007 refers to year BETWEEN 1990 AND 2007; exceed 75% of defensive rebounds refers to Divide (dRebounds, rebounds) * 100 > 75"}
{"sample_id": 2816, "db_id": "professional_basketball", "final": {"question": "in which year costela01 obtained the best balance of games won as a coach?", "sql": "SELECT year FROM coaches WHERE coachID = 'costela01' ORDER BY CAST(won AS REAL) / (won + lost) DESC LIMIT 1", "source_tables": ["coaches"]}, "evidence": "\"costela01\" is the coachID; best balance of game won refers to Max(Divide(won, Sum(won, lost)))"}
{"sample_id": 2817, "db_id": "professional_basketball", "final": {"question": "How many total minutes has the Brooklyn-born player, known by the name of Superman, played during all of his NBA All-Star seasons?", "sql": "SELECT SUM(T2.minutes) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCity = 'Brooklyn' AND T1.nameNick LIKE '%Superman%'", "source_tables": ["player_allstar", "players"]}, "evidence": "\"Brooklyn\" is the birthCity of player; known by the name of Superman refers to nameNick like '%Superman%'; total minutes refers to Sum(minutes)"}
{"sample_id": 2818, "db_id": "professional_basketball", "final": {"question": "Of all the teams coached by the winner of the 1994 NBA Coach of the Year award, which team has lost the most times playing at home?", "sql": "SELECT T3.tmID FROM awards_coaches AS T1 INNER JOIN coaches AS T2 ON T1.coachID = T2.coachID INNER JOIN teams AS T3 ON T3.tmID = T2.tmID WHERE T1.year = 1994 AND T1.award = 'NBA Coach of the Year' GROUP BY T3.tmID ORDER BY SUM(T3.homeLost) DESC LIMIT 1", "source_tables": ["coaches", "awards_coaches", "teams"]}, "evidence": "of 1994 refers to year = 1994; 'NBA Coach of the Year' is the award; lost the most time at home refers to Max(homeLost)"}
{"sample_id": 2819, "db_id": "professional_basketball", "final": {"question": "Which winning team in the final round of the postseason series games against the LAL won more than 60 games in the NBA league during the year 1996?", "sql": "SELECT DISTINCT T2.tmID FROM series_post AS T1 INNER JOIN teams AS T2 ON T1.tmIDWinner = T2.tmID WHERE T2.won > 60 AND T1.year = 1996 AND T1.round = 'CSF' AND T1.tmIDLoser = 'LAL'", "source_tables": ["series_post", "teams"]}, "evidence": "final round of post season refers to round = 'CSF'; won against LAL refers to tmIDLoser = 'LAL'; in the NBA league refers to lgID = 'NBA'; won more than 60 games refers to won > 60"}
{"sample_id": 2820, "db_id": "professional_basketball", "final": {"question": "In which league did the player who weighs 40% less than the heaviest player and whose height is 80 inches play?", "sql": "SELECT T2.lgID FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID GROUP BY T2.lgID, T1.weight HAVING T1.weight = MAX(T1.weight) - MAX(T1.weight) * 0.4", "source_tables": ["players", "players_teams"]}, "evidence": "weigh 40% less than the heaviest player refers to weight = Multiply(Max (weight), 0.6); league refers to lgID"}
{"sample_id": 2821, "db_id": "professional_basketball", "final": {"question": "Please list the name of the coach who has served more than 2 NBA teams.", "sql": "SELECT coachID FROM coaches GROUP BY coachID HAVING COUNT(DISTINCT tmID) > 2", "source_tables": ["coaches"]}, "evidence": "\"NBA\" is the lgID; server more than 2 teams refers to Count(tmID) = 2"}
{"sample_id": 2822, "db_id": "professional_basketball", "final": {"question": "What is the name of the coach during whose period of coaching, a team has the most numbers of games won in the post-season games?", "sql": "SELECT coachID FROM coaches ORDER BY post_wins DESC LIMIT 1", "source_tables": ["coaches"]}, "evidence": "the most number of game won in post season refers to Max(post_wins); coach refers to coachID"}
{"sample_id": 2823, "db_id": "professional_basketball", "final": {"question": "Among the coaches who have served more than 2 NBA teams, during which coach's period of coaching, a team has the least numbers of games lost in the post-season games?", "sql": "SELECT coachID FROM coaches WHERE lgID = 'NBA' AND post_wins != 0 AND post_losses != 0 AND coachID IN ( SELECT coachID FROM coaches WHERE lgID = 'NBA' GROUP BY coachID HAVING COUNT(tmID) > 2 ) ORDER BY post_losses ASC LIMIT 1", "source_tables": ["coaches"]}, "evidence": "served more than 2 NBA teams refers to count (tmID) > = 2; least number of game lost in post season refers to Min(post_losses)"}
{"sample_id": 2824, "db_id": "professional_basketball", "final": {"question": "Among the players from the ABA league, how many of them have the center position?", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.lgID = 'ABA' AND (T1.pos = 'C' OR T1.pos = 'F-C')", "source_tables": ["players", "players_teams"]}, "evidence": "\"ABA\" is the lgID; center position refers to pos = \u00a0 'C' or pos = 'F-C'; players refers to playerID"}
{"sample_id": 2825, "db_id": "professional_basketball", "final": {"question": "Please list the first name of the players from the NBA league with the forward position.", "sql": "SELECT DISTINCT T1.firstName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE (T1.pos = 'F' OR T1.pos = 'F-C') AND T2.lgID = 'NBA'", "source_tables": ["players", "players_teams"]}, "evidence": "\"NBA\" is the lgID; with the forward position refers to pos = 'F' of pos = 'F-C'"}
{"sample_id": 2826, "db_id": "professional_basketball", "final": {"question": "Among the players who went to high school in Chicago, how many of them belongs to the west conference?", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.hsCity = 'Chicago' AND T2.conference = 'West'", "source_tables": ["player_allstar", "players"]}, "evidence": "high school in Chicago refers to hsCity = 'Chicago'; belong to the west conference refers to divID = 'WE'"}
{"sample_id": 2827, "db_id": "professional_basketball", "final": {"question": "For the players who belongs to the east conference, please list the name of the college they went to.", "sql": "SELECT DISTINCT T1.college FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.conference = 'East'", "source_tables": ["player_allstar", "players"]}, "evidence": "belong to the east conference refers to divID = 'EA'"}
{"sample_id": 2828, "db_id": "professional_basketball", "final": {"question": "Among the players from the NBL league, how many of them were born in Spencer?", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCity = 'Spencer' AND T2.lgID = 'NBL'", "source_tables": ["players", "players_teams"]}, "evidence": "\"NBL\" is the lgID; 'Spencer' is the birthCity"}
{"sample_id": 2829, "db_id": "professional_basketball", "final": {"question": "Please list the birth date of the player who has won the most MVPs.", "sql": "SELECT T1.birthDate FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Most Valuable Player' GROUP BY T1.playerID, T1.birthDate ORDER BY COUNT(award) DESC LIMIT 1", "source_tables": ["players", "awards_players"]}, "evidence": "won the most MVP refers to Max(Count(award = 'Most Valuable Player'))"}
{"sample_id": 2830, "db_id": "professional_basketball", "final": {"question": "Among the players born in Whitestone, how many of them have won the MVP?", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Most Valuable Player' AND T1.birthCity = 'Houston'", "source_tables": ["players", "awards_players"]}, "evidence": "\"Whitestone\" is the birthCity of the player; won the MVP refers to award = 'Most Valuable Player'"}
{"sample_id": 2831, "db_id": "professional_basketball", "final": {"question": "Among the players who have won the award of Rookie of the year, what is the height of the tallest player?", "sql": "SELECT T1.height FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Rookie of the Year' ORDER BY T1.height DESC LIMIT 1", "source_tables": ["players", "awards_players"]}, "evidence": "\"Rookie of the Year\" is the award; tallest player refers to Max(height)"}
{"sample_id": 2832, "db_id": "professional_basketball", "final": {"question": "What is the average weight of the players who have won the award of Rookie of the year?", "sql": "SELECT AVG(T1.weight) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Rookie of the Year'", "source_tables": ["players", "awards_players"]}, "evidence": "\"Rookie of the Year\" is the award; average weight = Divide (Sum(weight), Count(playerID))"}
{"sample_id": 2833, "db_id": "professional_basketball", "final": {"question": "Among the players that went to high school in New York and have won the MVP, what is their average height?", "sql": "SELECT AVG(T1.height) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Most Valuable Player' AND T1.birthCity = 'New York'", "source_tables": ["players", "awards_players"]}, "evidence": "high school in New York refers to highSchool like '%New York%'; won the MVP refers to award = 'Most Valuable Player'; average height = Divide (Sum(height), Count(playerID))"}
{"sample_id": 2834, "db_id": "professional_basketball", "final": {"question": "Please list the top ten teams with the highest scores in 2000.", "sql": "SELECT tmID FROM players_teams WHERE year = 2000 GROUP BY tmID ORDER BY SUM(PostPoints) DESC LIMIT 10", "source_tables": ["players_teams"]}, "evidence": "in 2000 refers to year = 2000; team with highest score refers to Max(o_fgm)"}
{"sample_id": 2835, "db_id": "professional_basketball", "final": {"question": "Which teams have winning rate less than 50%?", "sql": "SELECT name FROM teams WHERE CAST(won AS REAL) * 100 / (won + lost) < 50", "source_tables": ["teams"]}, "evidence": "team with winning rate less than 50% refers to Divide (won, Sum(won, lost)) < 0.5"}
{"sample_id": 2836, "db_id": "professional_basketball", "final": {"question": "Who are the coaches for team with winning rate of 80% and above?", "sql": "SELECT coachID FROM coaches GROUP BY tmID, coachID, won, lost HAVING CAST(won AS REAL) * 100 / (won + lost) > 80", "source_tables": ["coaches"]}, "evidence": "winning rate of 80% and above refers to Divide (won, Sum(won, lost)) > 0.8; coaches refers to coachID"}
{"sample_id": 2837, "db_id": "professional_basketball", "final": {"question": "Which coach has serviced in NBA for more than 10 years.", "sql": "SELECT coachID FROM coaches WHERE lgID = 'NBA' GROUP BY coachID HAVING MAX(year) - MIN(year) > 10", "source_tables": ["coaches"]}, "evidence": "\"NBA\" is the lgID; coach who serviced for more than 10 years refers to coachID where Subtract (Max(year), Min(year)) > 10"}
{"sample_id": 2838, "db_id": "professional_basketball", "final": {"question": "How many teams have played more than 3800 points and have player with \"Most Valuable Player\" award?", "sql": "SELECT COUNT(DISTINCT T4.name) FROM ( SELECT T1.name, SUM(T2.points) FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN awards_players AS T3 ON T2.playerID = T3.playerID WHERE T3.award = 'Most Valuable Player' GROUP BY T1.name HAVING SUM(T2.points) >= 3800 ) AS T4", "source_tables": ["players_teams", "awards_players", "teams"]}, "evidence": "played more than 3800 points refers to Sum(points) > = 3800"}
{"sample_id": 2839, "db_id": "professional_basketball", "final": {"question": "Which player from \"AFS\" team has the tallest height?", "sql": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'AFS' ORDER BY T1.height DESC LIMIT 1", "source_tables": ["players", "players_teams"]}, "evidence": "\"AFS\" is the tmID; tallest height refers to Max(height)"}
{"sample_id": 2840, "db_id": "professional_basketball", "final": {"question": "Please list down the last name of players from \"BLB\" team.", "sql": "SELECT T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'BLB'", "source_tables": ["players", "players_teams"]}, "evidence": "\"BLB\" is the tmID"}
{"sample_id": 2841, "db_id": "professional_basketball", "final": {"question": "From 1962 to 1975, how many coaches received the award?", "sql": "SELECT COUNT(DISTINCT coachID) FROM awards_coaches WHERE year BETWEEN 1962 AND 1975", "source_tables": ["awards_coaches"]}, "evidence": "from 1960 to 1975 refers to year between 1960 and 1975"}
{"sample_id": 2842, "db_id": "professional_basketball", "final": {"question": "Please list the coach IDs who received the award twice from 1970 to 1990.", "sql": "SELECT coachID FROM awards_coaches WHERE year BETWEEN 1970 AND 1990 GROUP BY coachID, award HAVING COUNT(award) = 2", "source_tables": ["awards_coaches"]}, "evidence": "from 1970 to 1990 refers to year between 1970 and 1990;\u00a0 received award twice refers to coachID where Count(coachID) = 2"}
{"sample_id": 2843, "db_id": "professional_basketball", "final": {"question": "From 1962 to 2011, how many coaches received both NBA and ABA awards?", "sql": "SELECT COUNT(DISTINCT coachID) FROM awards_coaches WHERE year BETWEEN 1962 AND 2011 AND award = 'ABA Coach of the Year' AND coachID IN ( SELECT coachID FROM awards_coaches WHERE year BETWEEN 1962 AND 2011 AND award = 'NBA Coach of the Year' )", "source_tables": ["awards_coaches"]}, "evidence": "from 1962 to 2011 refers to year between 1960 and 2011; received both NBA and ABA award refers to coachID where award LIKE 'NBA%' and 'ABA%'"}
{"sample_id": 2844, "db_id": "professional_basketball", "final": {"question": "In 1975, what was the average point of all-star players coming from the USA?", "sql": "SELECT AVG(T2.points) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id = 1975", "source_tables": ["player_allstar", "players"]}, "evidence": "in 1975 refers to season_id = 1975; coming from USA refers to birthCountry = 'USA'; average point refers to Divide (Sum(points), Count(playerID))"}
{"sample_id": 2845, "db_id": "professional_basketball", "final": {"question": "Please list the last names and first names of all-star players who are higher than 75 inch.", "sql": "SELECT DISTINCT T1.lastName, T1.firstName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.height > 75", "source_tables": ["player_allstar", "players"]}, "evidence": "higher than 75 inch refers to height > 75"}
{"sample_id": 2846, "db_id": "professional_basketball", "final": {"question": "What is the minimum weight of all-star players coming from UCLA college?", "sql": "SELECT MIN(T1.weight) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.college = 'UCLA'", "source_tables": ["player_allstar", "players"]}, "evidence": "minimum weight refers to Min(weight)"}
{"sample_id": 2847, "db_id": "professional_basketball", "final": {"question": "What is the maximum weight of USA all-star players?", "sql": "SELECT MAX(T1.weight) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCountry = 'USA'", "source_tables": ["player_allstar", "players"]}, "evidence": "\"USA\" is the birthCountry of player;\u00a0 maximum weight refers to Max(weight)"}
{"sample_id": 2848, "db_id": "professional_basketball", "final": {"question": "From 1960 to 1970, what is the total point of all-star players who are still alive?", "sql": "SELECT SUM(T2.points) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id BETWEEN 1960 AND 1970 AND T1.deathDate = '0000-00-00'", "source_tables": ["player_allstar", "players"]}, "evidence": "from 1960 to 1970 refers to season_id between 1960 and 1970; still alive refers to deathDate = '0000-00-00'"}
{"sample_id": 2849, "db_id": "professional_basketball", "final": {"question": "Among players who were born after 1950, who had offence rebounds rates more than 30%? Please list their last names and first names.", "sql": "SELECT DISTINCT T1.lastName, T1.firstName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.birthDate > 1950 AND CAST(T2.o_rebounds AS REAL) * 100 / T2.rebounds > 30", "source_tables": ["player_allstar", "players"]}, "evidence": "born after 1950 refers to birthDate > = '1950-01-01'; offence rebound rate more than 30% refers to Divide (oRebounds, rebounds) > 0.3"}
{"sample_id": 2850, "db_id": "professional_basketball", "final": {"question": "How many players received Rookie of the Year award from 1969 to 2010?", "sql": "SELECT COUNT(playerID) FROM awards_players WHERE year BETWEEN 1969 AND 2010 AND award = 'Rookie of the Year'", "source_tables": ["awards_players"]}, "evidence": "from 1969 to 2010 refers to year BETWEEN 1969 and 2010; 'Rookie of the Year' is the award"}
{"sample_id": 2851, "db_id": "professional_basketball", "final": {"question": "Please list the team names which have at least 3 all-star players.", "sql": "SELECT T1.tmID FROM players_teams AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID GROUP BY T1.tmID HAVING COUNT(DISTINCT T1.playerID) >= 3", "source_tables": ["player_allstar", "players_teams"]}, "evidence": "team with at least 3 all star player refers to tmID where Count(player_allstar.playerID) > = 3"}
{"sample_id": 2852, "db_id": "professional_basketball", "final": {"question": "From 1950 to 1970, what is the maximum point of players whose teams were ranked 1?", "sql": "SELECT MAX(T2.points) FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year BETWEEN 1950 AND 1970 AND T1.rank = 1", "source_tables": ["players_teams", "teams"]}, "evidence": "from 1950 to 1970 refers to year between 1950 and 1970; team with rank 1 refers to rank = 1; maximum point refers to Max(points)"}
{"sample_id": 2853, "db_id": "professional_basketball", "final": {"question": "Please list the last names and first names of all-star players whose team were ranked 1 for consecutive 3 years from 1937 to 1940.", "sql": "SELECT T5.lastName, T5.firstName FROM players_teams AS T4 INNER JOIN players AS T5 ON T4.playerID = T5.playerID WHERE T4.year BETWEEN 1937 AND 1940 AND T4.tmID IN ( SELECT DISTINCT T1.tmID FROM teams AS T1 INNER JOIN teams AS T2 INNER JOIN teams AS T3 ON T1.tmID = T2.tmID AND T2.tmID = T3.tmID AND T3.year - T2.year = 1 AND T2.year - T1.year = 1 WHERE T1.rank = 1 AND T1.year BETWEEN 1937 AND 1940 )", "source_tables": ["players_teams", "players", "teams"]}, "evidence": "from 1937 to 1940 refers to year between 1937 and 1940; rank 1 for 3 years refers to tmID where Count (rank = 1) > = 3"}
{"sample_id": 2854, "db_id": "professional_basketball", "final": {"question": "Among the teams that were ranked 3 from 1937 to 1940, what is the team name whose players had the highest point?", "sql": "SELECT DISTINCT T1.name FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.rank = 3 AND T1.year BETWEEN 1937 AND 1940 ORDER BY T2.points DESC LIMIT 1", "source_tables": ["players_teams", "teams"]}, "evidence": "from 1937 to 1940 refers to year between 1937 and 1940; player with highest point refers to Max(points)"}
{"sample_id": 2855, "db_id": "professional_basketball", "final": {"question": "In 1937, how many teams whose players got at least 500 points?", "sql": "SELECT COUNT(*) FROM ( SELECT T2.name, SUM(T1.points) FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 1937 GROUP BY T2.name HAVING SUM(points) >= 500 ) AS T3", "source_tables": ["players_teams", "teams"]}, "evidence": "in 1937 refers to year = 1937; player got at least 500 points refers to Sum(points) > = 500"}
{"sample_id": 2856, "db_id": "professional_basketball", "final": {"question": "In 1990, how many players whose teams had the winning rate of more than 75%?", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE CAST(T2.won AS REAL) * 100 / CAST(T2.games AS REAL) > 75 AND T1.year = 1990", "source_tables": ["players_teams", "teams"]}, "evidence": "in 1990 refers to year = 1990; winning rate of more than 75% refers to Divide(won, games) > 0.75"}
{"sample_id": 2857, "db_id": "professional_basketball", "final": {"question": "Please list the top three shortest black players.", "sql": "SELECT firstName, lastName FROM players WHERE race = 'B' AND height > 0 ORDER BY height ASC LIMIT 3", "source_tables": ["players"]}, "evidence": "shortest player refers to Min(height); black players refers to race = 'B'"}
{"sample_id": 2858, "db_id": "professional_basketball", "final": {"question": "How many players with the first name Joe were drafted in 1970?", "sql": "SELECT COUNT(DISTINCT playerID) FROM draft WHERE firstName = 'Joe' AND draftYear = 1970", "source_tables": ["draft"]}, "evidence": "drafted in 1970 refers to draftYear = 1970"}
{"sample_id": 2859, "db_id": "professional_basketball", "final": {"question": "How many field goals did George Mikan make overall between 1951 and 1953?", "sql": "SELECT COUNT(fg_made) FROM player_allstar WHERE first_name = 'George' AND last_name = 'Mikan' AND season_id BETWEEN 1951 AND 1953", "source_tables": ["player_allstar"]}, "evidence": "between 1951 and 1953 refers to season_id; field goal refers to fg_made"}
{"sample_id": 2860, "db_id": "professional_basketball", "final": {"question": "What are the basketball players' BMI ranges?", "sql": "SELECT MIN(CAST(weight AS REAL) / (height * height)) , MAX(CAST(weight AS REAL) / (height * height)) FROM players", "source_tables": ["players"]}, "evidence": "BMI = Multiply(Divide(weight, Multiply(height, height)), 703)"}
{"sample_id": 2861, "db_id": "professional_basketball", "final": {"question": "What is the name of the team with the highest home lost rate?", "sql": "SELECT name FROM teams ORDER BY CAST(homeWon AS REAL) / (homeWon + homeLost) DESC LIMIT 1", "source_tables": ["teams"]}, "evidence": "highest home lost rate = Max(Divide(homelost, Sum(homeWon, homeLost)))"}
{"sample_id": 2862, "db_id": "professional_basketball", "final": {"question": "How old was Alexis Ajinca when he was first drafted?", "sql": "SELECT draftYear - strftime('%Y', birthDate) FROM draft AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.firstName = 'Alexis' AND T1.lastName = 'Ajinca' AND draftRound = 1", "source_tables": ["draft", "players"]}, "evidence": "age when drafted refers to Subtract(draftYear, year(birthDate)); first drafted refers to draftYear"}
{"sample_id": 2863, "db_id": "professional_basketball", "final": {"question": "Who is the tallest player in Denver Nuggets since 1980?", "sql": "SELECT T1.firstName, T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T3.tmID = T2.tmID WHERE T3.name = 'Denver Nuggets' AND T2.year > 1980 ORDER BY T1.height DESC LIMIT 1", "source_tables": ["players", "players_teams", "teams"]}, "evidence": "\"Denver Nuggets\" is the name of team; since 1980 refers to year > 1980; tallest player = Max(height)"}
{"sample_id": 2864, "db_id": "professional_basketball", "final": {"question": "Among the players who have passed away, who had the most award?", "sql": "SELECT T1.playerID FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE deathDate IS NOT NULL GROUP BY T1.playerID ORDER BY COUNT(award) DESC LIMIT 1", "source_tables": ["players", "awards_players"]}, "evidence": "pass away refers to deathDate ! = 'null'; most award refers to playerID where Max(Count(award))"}
{"sample_id": 2865, "db_id": "professional_basketball", "final": {"question": "What is the full name of the team that has the most players from UCLA?", "sql": "SELECT T3.name FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T3.tmID = T2.tmID WHERE T1.college = 'UCLA' GROUP BY T3.name ORDER BY COUNT(DISTINCT T1.playerID) DESC LIMIT 1", "source_tables": ["players", "players_teams", "teams"]}, "evidence": "\"UCLA\" is the college; team with most players refers to tmID where Max(Count(playerID))"}
{"sample_id": 2866, "db_id": "professional_basketball", "final": {"question": "What is the average BMI of an All-star player?", "sql": "SELECT AVG(CAST(T1.weight AS REAL) / (T1.height * T1.height)) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID", "source_tables": ["player_allstar", "players"]}, "evidence": "average BMI refers to AVG (Multiply(Divide(weight, Multiply(height, height)), 703))"}
{"sample_id": 2867, "db_id": "professional_basketball", "final": {"question": "What is the full name of the team with the fastest growth in winning rate in the 'ABA' league from 1972 to 1973?", "sql": "SELECT T1.name FROM teams AS T1 INNER JOIN ( SELECT * FROM teams WHERE lgID = 'ABA' AND year = 1972 ) AS T2 ON T1.tmID = T2.tmID WHERE T1.lgID = 'ABA' AND T1.year = 1973 ORDER BY (CAST(T1.won AS REAL) / (T1.won + T1.lost) - (CAST(T2.won AS REAL) / (T2.won + T2.lost))) DESC LIMIT 1", "source_tables": ["teams"]}, "evidence": "\"ABA\" is the lgID; from 1972 to 1973 refers to year = 1972 and year = 1973; team with the fastest growth in winning rate = Max(Subtract(Divide(won where year = 1973, Sum(won, lost)),Divide(won where year = 1972, Sum(won, lost))))"}
{"sample_id": 2868, "db_id": "professional_basketball", "final": {"question": "Please list the first names of the players with the most personal fouls in the 'NBL' league.", "sql": "SELECT T1.firstName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.lgID = 'NBL' GROUP BY T1.playerID, T1.firstName ORDER BY COUNT(PF) DESC LIMIT 1", "source_tables": ["players", "players_teams"]}, "evidence": "\"NBL\" is the lgID; most\u00a0 personal foul refers to Max(Count(PF))"}
{"sample_id": 2869, "db_id": "professional_basketball", "final": {"question": "What is the average height of an East conference All-star player?", "sql": "SELECT AVG(DISTINCT height) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE conference = 'East'", "source_tables": ["player_allstar", "players"]}, "evidence": "average height refers to avg(height)"}
{"sample_id": 2870, "db_id": "professional_basketball", "final": {"question": "Among the coaches who won the 'ABA Coach of the Year' award, which is the coach with the highest number of won games?", "sql": "SELECT T1.coachID FROM coaches AS T1 INNER JOIN awards_coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.award = 'ABA Coach of the Year' GROUP BY T1.coachID, T1.won ORDER BY T1.won DESC LIMIT 1", "source_tables": ["coaches", "awards_coaches"]}, "evidence": "\"ABA Coach of the Year\" is the award; highest number of won games refers to Max(Count(won))"}
{"sample_id": 2871, "db_id": "professional_basketball", "final": {"question": "What is the full name of the team that the 'NBA Coach of the Year' 1992 winner coached?", "sql": "SELECT name FROM teams AS T1 INNER JOIN coaches AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN awards_coaches AS T3 ON T2.coachID = T3.coachID AND T2.year = T3.year WHERE T3.year = 1992 AND award = 'NBA Coach of the Year'", "source_tables": ["awards_coaches", "coaches", "teams"]}, "evidence": "\"NBA Coach of the Year\" is the award; in 1992 refers to year = 1992;"}
{"sample_id": 2872, "db_id": "professional_basketball", "final": {"question": "What is the first and last name of the player with the highest field goal made rate in 1973?", "sql": "SELECT T1.firstName, T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE year = 1973 ORDER BY CAST(T2.fgMade AS REAL) / T2.fgAttempted DESC LIMIT 1", "source_tables": ["players", "players_teams"]}, "evidence": "in 1973 refers to year = 1973; player with highest field goal made refers to Max(Divide(fgMade, fgAttempted))"}
{"sample_id": 2873, "db_id": "professional_basketball", "final": {"question": "What is the full name of the team that selected Mike Lynn?", "sql": "SELECT T1.name FROM teams AS T1 INNER JOIN draft AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.draftYear WHERE T2.firstName = 'Mike' AND T2.lastName = 'Lynn'", "source_tables": ["draft", "teams"]}, "evidence": "full name refers to teams.name"}
{"sample_id": 2874, "db_id": "professional_basketball", "final": {"question": "Among the Most improved Players awarded from 1985-1990, how many player whose country is USA?", "sql": "SELECT COUNT(DISTINCT T2.playerID) FROM awards_players AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.award = 'Most Improved Player' AND T2.birthCountry = 'USA' AND T1.year BETWEEN 1985 AND 1990", "source_tables": ["players", "awards_players"]}, "evidence": "the Most improved Player refers to award = 'Most Improved Player'; from 1985-1990 refers to year between 1985 and 1990; country is USA refers to birthCountry = 'USA'"}
{"sample_id": 2875, "db_id": "professional_basketball", "final": {"question": "Please list out the first name and last name of player who attended California college and have been selected as all stars?", "sql": "SELECT DISTINCT T1.firstName, T1.lastName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.college = 'California'", "source_tables": ["player_allstar", "players"]}, "evidence": "California college refers to college = 'California'"}
{"sample_id": 2876, "db_id": "professional_basketball", "final": {"question": "From 1950 to 1970, how many coaches who received more than 1 award?", "sql": "SELECT COUNT(coachID) FROM awards_coaches WHERE year BETWEEN 1950 AND 1970 GROUP BY coachID HAVING COUNT(coachID) > 1", "source_tables": ["awards_coaches"]}, "evidence": "from 1950 to 1970 refers to year between 1950 and 1970; more than 3 awards refers to count(award) > 3"}
{"sample_id": 2877, "db_id": "professional_basketball", "final": {"question": "How many players received Most Valuable Player award from 1969 to 1975?", "sql": "SELECT COUNT(DISTINCT playerID) FROM awards_players WHERE year BETWEEN 1969 AND 1975 AND award = 'Most Valuable Player'", "source_tables": ["awards_players"]}, "evidence": "Most Valuable Player award refers to award = 'Most Valuable Player'; from 1969 to 1975 refers to year between 1969 and 1975"}
{"sample_id": 2878, "db_id": "professional_basketball", "final": {"question": "Please list the team names which have at least 5 players were born in the same state.", "sql": "SELECT DISTINCT name FROM teams WHERE tmID IN ( SELECT tmID FROM players_teams AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T2.birthState IS NOT NULL GROUP BY T1.tmID, T2.birthState HAVING COUNT(*) > 5 )", "source_tables": ["players_teams", "players", "teams"]}, "evidence": "team name refers to teams.name; state that a player is born refers to birthState"}
{"sample_id": 2879, "db_id": "professional_basketball", "final": {"question": "How many teams in the NBA which has at least 3 all-star players?", "sql": "SELECT COUNT(*) FROM ( SELECT tmID FROM players_teams AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.lgID = 'NBA' GROUP BY T1.tmID HAVING COUNT(DISTINCT T1.playerID) > 3 ) AS T3", "source_tables": ["player_allstar", "players_teams"]}, "evidence": "NBA refers to lgID = 'NBA'; have at least 3 all-star players refers to count(player_allstar.playerID) > 3"}
{"sample_id": 2880, "db_id": "professional_basketball", "final": {"question": "Which state has the most players selected as all stars?", "sql": "SELECT T1.birthState FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID GROUP BY T1.birthState ORDER BY COUNT(DISTINCT T1.playerID) DESC LIMIT 1", "source_tables": ["player_allstar", "players"]}, "evidence": "state refers to birthState; the most players refers to max(count(playerID))"}
{"sample_id": 2881, "db_id": "professional_basketball", "final": {"question": "How many players whose teams were ranked 6 in 1937?", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T3.tmID = T2.tmID WHERE T3.year = 1937 AND T3.rank = 6", "source_tables": ["players", "players_teams", "teams"]}, "evidence": "ranked 6 refers to rank = 6; in 1937 refers to year = 1937"}
{"sample_id": 2882, "db_id": "professional_basketball", "final": {"question": "In 1950, how many players whose teams have the losing rate less than 20%?", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T3.tmID = T2.tmID WHERE CAST(T3.lost AS REAL) * 100 / (T3.lost + T3.won) < 20", "source_tables": ["players", "players_teams", "teams"]}, "evidence": "in 1950 refers to year = 1950; losing rate less than 20% refers to divide(lost, add(won, lost)) < 0.2"}
{"sample_id": 2883, "db_id": "professional_basketball", "final": {"question": "List the full name of players who are born outside USA.", "sql": "SELECT firstName, middleName, lastName FROM players WHERE birthCountry != 'USA'", "source_tables": ["players"]}, "evidence": "full name refers to firstName, middleName, lastName; born outside USA refers to birthCountry ! = 'USA'"}
{"sample_id": 2884, "db_id": "professional_basketball", "final": {"question": "List out all the coach ID who have served more than 2 different teams.", "sql": "SELECT coachID FROM coaches GROUP BY coachID HAVING COUNT(DISTINCT tmID) > 2", "source_tables": ["coaches"]}, "evidence": "more than 2 different teams refers to count(tmID) > 2"}
{"sample_id": 2885, "db_id": "professional_basketball", "final": {"question": "Which coach has the most 'won' than 'lost' in year '1988'?", "sql": "SELECT coachID FROM coaches WHERE year = 1988 ORDER BY won - lost DESC LIMIT 1", "source_tables": ["coaches"]}, "evidence": "in year '1988' refers to year = 1988; the most 'won' than 'lost' refers to max(subtract(won, lost))"}
{"sample_id": 2886, "db_id": "professional_basketball", "final": {"question": "Name the team in which the coach won the title 'NBA Coach of the Year' in 2010.", "sql": "SELECT DISTINCT T1.tmID FROM coaches AS T1 INNER JOIN awards_coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 2010 AND T2.award = 'NBA Coach of the Year'", "source_tables": ["coaches", "awards_coaches"]}, "evidence": "team name refers to teams.name; won the title 'NBA Coach of the Year' refers to award = 'NBA Coach of the Year'; in 2010 refers to year = 2010"}
{"sample_id": 2887, "db_id": "professional_basketball", "final": {"question": "List the first name, last name, height and weight of the players who has all free throw attempted successfully made.", "sql": "SELECT DISTINCT T1.firstName, T1.lastName, T1.height, T1.weight FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.ft_attempted > 0 AND ft_attempted = ft_made", "source_tables": ["player_allstar", "players"]}, "evidence": "all free throw attempted successfully made refers to ftAttempted > 0 and ftAttempted = ftMade"}
{"sample_id": 2888, "db_id": "professional_basketball", "final": {"question": "List the first name, last name and team name of players who are drafted from 'Seattle' between year 1965 to 1970.", "sql": "SELECT DISTINCT T1.firstName, T1.lastName, T3.name FROM players AS T1 INNER JOIN draft AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T2.tmID = T3.tmID WHERE T2.draftFrom = 'Seattle' AND T2.draftYear BETWEEN 1965 AND 1970", "source_tables": ["players", "draft", "teams"]}, "evidence": "team name refers to teams.name; drafted from 'Seattle' refers to draftFrom = 'Seattle'; between year 1965 to 1970 refers to draftYear between 1965 and 1970"}
{"sample_id": 2889, "db_id": "professional_basketball", "final": {"question": "List the full name and age of the player when he won the \"Finals MVP\" in 2003.", "sql": "SELECT T1.firstName, T1.middleName, T1.lastName , 2003 - strftime('%Y', T1.birthDate) FROM awards_players AS T2 JOIN players AS T1 ON T2.playerID = T1.playerID WHERE T2.award = 'Finals MVP' AND T2.year = 2003", "source_tables": ["players", "awards_players"]}, "evidence": "full name refers to firstName, middleName, lastName; age = subtract(2003, year(birthDate)); won the \"Finals MVP\" refers to award = 'Finals MVP'; in 2003 refers to year = 2003"}
{"sample_id": 2953, "db_id": "shakespeare", "final": {"question": "How many of Shakespeare's works were finished before the year 1602?", "sql": "SELECT COUNT(id) FROM works WHERE Date < 1602", "source_tables": ["works"]}, "evidence": "finished before the year 1602 refers to Date < 1602"}
{"sample_id": 2954, "db_id": "shakespeare", "final": {"question": "How many scenes are there in Act 1 in Twelfth Night?", "sql": "SELECT COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 1 AND T1.Title = 'Twelfth Night'", "source_tables": ["chapters", "works"]}, "evidence": "Twelfth Night refers to Title = 'Twelfth Night'"}
{"sample_id": 2955, "db_id": "shakespeare", "final": {"question": "What is the description of Act 1, Scene 2 in Twelfth Night?", "sql": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Twelfth Night' AND T2.Act = 1 AND T2.Scene = 2", "source_tables": ["chapters", "works"]}, "evidence": "Twelfth Night refers to Title = 'Twelfth Night'"}
{"sample_id": 2956, "db_id": "shakespeare", "final": {"question": "How many more scenes are there in Act 1 than in Act 5 in Twelfth Night?", "sql": "SELECT SUM(IIF(T2.Act = 1, 1, 0)) - SUM(IIF(T2.Act = 5, 1, 0)) AS more FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Twelfth Night'", "source_tables": ["chapters", "works"]}, "evidence": "in Twelfth Night refers to Title = 'Twelfth Night'; How many more scenes = subtract(sum(Act = 1), sum(Act = 5))"}
{"sample_id": 2957, "db_id": "shakespeare", "final": {"question": "Which work is the character Lord Abergavenny from? Please give its short or abbreviated title.", "sql": "SELECT DISTINCT T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.CharName = 'Lord Abergavenny'", "source_tables": ["characters", "paragraphs", "chapters", "works"]}, "evidence": "Lord Abergavenny refers to CharName = 'Lord Abergavenny'; short or abbreviated title refers to Title"}
{"sample_id": 2958, "db_id": "shakespeare", "final": {"question": "Please list the character names of all the characters from the work Twelfth Night.", "sql": "SELECT DISTINCT T4.CharName FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.Title = 'Twelfth Night'", "source_tables": ["characters", "paragraphs", "chapters", "works"]}, "evidence": "character names refers to CharName; Twelfth Night refers to Title = 'Twelfth Night'"}
{"sample_id": 2959, "db_id": "shakespeare", "final": {"question": "How many paragraphs are there in Act 1, Scene 1 in Twelfth Night?", "sql": "SELECT SUM(T3.ParagraphNum) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T2.Act = 1 AND T2.Scene = 1 AND T1.Title = 'Twelfth Night'", "source_tables": ["paragraphs", "chapters", "works"]}, "evidence": "Twelfth Night refers to Title = 'Twelfth Night'"}
{"sample_id": 2960, "db_id": "shakespeare", "final": {"question": "Please list all the paragraphs in Act 1, Scene 1 in Twelfth Night.", "sql": "SELECT T3.PlainText FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T2.Act = 1 AND T2.Scene = 1 AND T1.Title = 'Twelfth Night'", "source_tables": ["paragraphs", "chapters", "works"]}, "evidence": "Twelfth Night refers to Title = 'Twelfth Night'; list the paragraphs refers to PlainText"}
{"sample_id": 2961, "db_id": "shakespeare", "final": {"question": "How many paragraphs contain the character Lord Abergavenny?", "sql": "SELECT SUM(T1.ParagraphNum) FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.character_id = T2.id WHERE T2.CharName = 'Lord Abergavenny'", "source_tables": ["characters", "paragraphs"]}, "evidence": "Lord Abergavenny refers to CharName = 'Lord Abergavenny'"}
{"sample_id": 2962, "db_id": "shakespeare", "final": {"question": "Please list the IDs of the paragraphs in which the character \"son to Tamora\" appears.", "sql": "SELECT T1.id FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.character_id = T2.id WHERE T2.Description = 'son to Tamora'", "source_tables": ["characters", "paragraphs"]}, "evidence": "character \"son to Tamora\"\u00a0 refers to characters.Description = 'son to Tamora'"}
{"sample_id": 2963, "db_id": "shakespeare", "final": {"question": "For how many times has the scene \"OLIVIA\u2019S house.\" appeared in Twelfth Night?", "sql": "SELECT COUNT(T2.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Description = 'OLIVIA\u2019S house.' AND T1.Title = 'Twelfth Night'", "source_tables": ["chapters", "works"]}, "evidence": "\"OLIVIA\u2019S house.\"\u00a0 refers to chapters.Description = 'OLIVIA\u2019S house.'; Twelfth Night refers to Title = 'Twelfth Night'"}
{"sample_id": 2964, "db_id": "shakespeare", "final": {"question": "How many characters are there in Twelfth Night?", "sql": "SELECT COUNT(DISTINCT T4.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.Title = 'Twelfth Night'", "source_tables": ["characters", "paragraphs", "chapters", "works"]}, "evidence": "Twelfth Night refers to Title = 'Twelfth Night'"}
{"sample_id": 2965, "db_id": "shakespeare", "final": {"question": "Please give the title of the work of Shakespeare that has the most characters.", "sql": "SELECT T.Title FROM ( SELECT T1.Title, COUNT(T3.character_id) AS num FROM works T1 INNER JOIN chapters T2 ON T1.id = T2.work_id INNER JOIN paragraphs T3 ON T2.id = T3.chapter_id INNER JOIN characters T4 ON T3.character_id = T4.id GROUP BY T3.character_id, T1.Title ) T ORDER BY T.num DESC LIMIT 1", "source_tables": ["characters", "paragraphs", "chapters", "works"]}, "evidence": "most characters refers to max(count(character_id))"}
{"sample_id": 2966, "db_id": "shakespeare", "final": {"question": "What is the average number of characters in all the works of Shakespeare?", "sql": "SELECT SUM(DISTINCT T4.id) / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id", "source_tables": ["characters", "paragraphs", "chapters", "works"]}, "evidence": "average number = divide(sum(character_id), count(work_id))"}
{"sample_id": 2967, "db_id": "shakespeare", "final": {"question": "How many scenes are there on average in one act in Twelfth Night?", "sql": "SELECT SUM(T2.Scene) / COUNT(T2.Act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Twelfth Night'", "source_tables": ["chapters", "works"]}, "evidence": "Twelfth Night refers to Title = 'Twelfth Night'; average scene = divide(sum(Scene), count(Act))"}
{"sample_id": 2968, "db_id": "shakespeare", "final": {"question": "How many comedies did Shakespeare create?", "sql": "SELECT COUNT(id) FROM works WHERE GenreType = 'Comedy'", "source_tables": ["works"]}, "evidence": "comedies refers to GenreType = 'Comedy'"}
{"sample_id": 2969, "db_id": "shakespeare", "final": {"question": "When did Shakespeare write the first poem?", "sql": "SELECT MIN(Date) FROM works WHERE GenreType = 'Poem'", "source_tables": ["works"]}, "evidence": "first poem refers to GenreType = 'Poem' and Date = 'min'"}
{"sample_id": 2970, "db_id": "shakespeare", "final": {"question": "Give the abbreviation name for the character \"Earl of Westmoreland\".", "sql": "SELECT DISTINCT Abbrev FROM characters WHERE CharName = 'Earl of Westmoreland'", "source_tables": ["characters"]}, "evidence": "abbreviation name refers to Abbrev; character \"Earl of Westmoreland\" refers to CharName = 'Earl of Westmoreland'"}
{"sample_id": 2971, "db_id": "shakespeare", "final": {"question": "Which chapter has the most paragraphs? Give the description of the chapter.", "sql": "SELECT T1.Description FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.chapter_id ORDER BY T2.ParagraphNum DESC LIMIT 1", "source_tables": ["paragraphs", "chapters"]}, "evidence": "most paragraphs refers to max(count(chapter_id))"}
{"sample_id": 2972, "db_id": "shakespeare", "final": {"question": "Which character was mentioned in the paragraph \"Would he do so, I'ld beg your precious mistress, Which he counts but a trifle.\"? Give the character name.", "sql": "SELECT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.PlainText = 'Would he do so, I''ld beg your precious mistress,Which he counts but a trifle.'", "source_tables": ["characters", "paragraphs"]}, "evidence": "paragraph \"Would he do so, I'ld beg your precious mistress, Which he counts but a trifle.\"\u00a0 refers to PlainText = 'Would he do so, I'ld beg your precious mistress, Which he counts but a trifle.'"}
{"sample_id": 2973, "db_id": "shakespeare", "final": {"question": "How many characters are there in Titus Andronicus?", "sql": "SELECT COUNT(DISTINCT T3.character_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T1.Title = 'Titus Andronicus'", "source_tables": ["paragraphs", "chapters", "works"]}, "evidence": "Titus Andronicus refers to Title = 'Titus Andronicus'"}
{"sample_id": 2974, "db_id": "shakespeare", "final": {"question": "List the number of acts in Two Gentlemen of Verona.", "sql": "SELECT DISTINCT T1.Act FROM chapters AS T1 INNER JOIN works AS T2 ON T1.id = T1.work_id WHERE T2.LongTitle = 'Two Gentlemen of Verona'", "source_tables": ["chapters", "works"]}, "evidence": "Two Gentlemen of Verona refers to LongTitle = 'Two Gentlemen of Verona'"}
{"sample_id": 2975, "db_id": "shakespeare", "final": {"question": "What is the description for the character mentioned in paragraph No.640171?", "sql": "SELECT T1.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.id = '640171'", "source_tables": ["characters", "paragraphs"]}, "evidence": "paragraph No.640171 refers to paragraphs.id = '640171'"}
{"sample_id": 2976, "db_id": "shakespeare", "final": {"question": "Give the title of the work that contains the character \"Shylock\".", "sql": "SELECT DISTINCT T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.CharName = 'Shylock'", "source_tables": ["characters", "paragraphs", "chapters", "works"]}, "evidence": "character \"Shylock\" refers to CharName = 'Shylock'"}
{"sample_id": 2977, "db_id": "shakespeare", "final": {"question": "How many scenes are there in King John?", "sql": "SELECT COUNT(T2.Scene) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'King John'", "source_tables": ["chapters", "works"]}, "evidence": "King John refers to Title = 'King John'"}
{"sample_id": 2978, "db_id": "shakespeare", "final": {"question": "How many chapters does the character Demetrius show in the story?", "sql": "SELECT COUNT(DISTINCT T2.chapter_id) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Demetrius'", "source_tables": ["characters", "paragraphs"]}, "evidence": "character Demetrius refers to CharName = 'Demetrius'"}
{"sample_id": 2979, "db_id": "shakespeare", "final": {"question": "Which Shakespeare story with character ID 324 has description of 'this friend of Caesar'?", "sql": "SELECT T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T2.id = '324' AND T2.Description = 'friend to Caesar'", "source_tables": ["characters", "paragraphs", "chapters", "works"]}, "evidence": ""}
{"sample_id": 2980, "db_id": "shakespeare", "final": {"question": "Give the description for the Act No.2, Scene No.2 of Midsummer Night's Dream.", "sql": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = '2' AND T2.Scene = '2' AND T1.Title = 'Midsummer Night''s Dream'", "source_tables": ["chapters", "works"]}, "evidence": "Act No.2 refers to Act = '2'; Scene No.2\u00a0 refers to Scene = '2'; Midsummer Night's Dream refers to Title = 'Midsummer Night''s Dream'"}
{"sample_id": 2981, "db_id": "shakespeare", "final": {"question": "Which Shakespeare tragedy has the most scenes? Give the long title.", "sql": "SELECT T.LongTitle FROM ( SELECT T1.LongTitle, COUNT(T2.Scene) AS num FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.GenreType = 'Tragedy' GROUP BY T1.LongTitle, T2.Scene ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["chapters", "works"]}, "evidence": "tragedy refers to GenreType = 'Tragedy'; most scenes refers to max(count(Scene))"}
{"sample_id": 2982, "db_id": "shakespeare", "final": {"question": "How many paragraphs are there in the scene whose description is \"A Sea-port in Cyprus. An open place near the quay.\"?", "sql": "SELECT SUM(T2.ParagraphNum) FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.chapter_id WHERE T1.Description = 'A Sea-port in Cyprus. An open place near the quay.'", "source_tables": ["paragraphs", "chapters"]}, "evidence": ""}
{"sample_id": 2983, "db_id": "shakespeare", "final": {"question": "What percentage of all scenes are tragic scenes in Shakespeare's work in 1594?", "sql": "SELECT CAST(SUM(IIF(T2.GenreType = 'Tragedy', 1, 0)) AS REAL) * 100 / COUNT(T1.Scene) FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T2.Date = '1594'", "source_tables": ["chapters", "works"]}, "evidence": "tragic scenes refers to GenreType = 'Tragedy'; work in 1594 refers to Date = '1594'; percentage = divide((sum(Scene) when GenreType = 'Tragedy'), count(Scene))as percentage"}
{"sample_id": 2984, "db_id": "shakespeare", "final": {"question": "Gives the average number of chapters in Shakespeare's 1599 work.", "sql": "SELECT CAST(COUNT(T1.id) AS REAL) / COUNT(DISTINCT T2.id) FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T2.Date = '1599'", "source_tables": ["chapters", "works"]}, "evidence": "1599 work refers to Date = '1599'; average number refers to divide(count(chapters.id), count(works.id))"}
{"sample_id": 2985, "db_id": "shakespeare", "final": {"question": "How many \"servant to Timon\" characters are there?", "sql": "SELECT COUNT(id) FROM characters WHERE Description = 'servant to Timon'", "source_tables": ["characters"]}, "evidence": "servant to Timon refers to characters.Description = 'servant to Timon'"}
{"sample_id": 2986, "db_id": "shakespeare", "final": {"question": "What is the title of the first ever work of William Shakespeare?", "sql": "SELECT Title FROM works WHERE Date = ( SELECT MIN(Date) FROM works )", "source_tables": ["works"]}, "evidence": "first ever work refers to min(Date)"}
{"sample_id": 2987, "db_id": "shakespeare", "final": {"question": "How many poems did Shakespeare write?", "sql": "SELECT COUNT(id) FROM works WHERE GenreType = 'Poem'", "source_tables": ["works"]}, "evidence": "poems refers to GenreType = 'Poem'"}
{"sample_id": 2988, "db_id": "shakespeare", "final": {"question": "How many scenes are there in work id 7, act 1?", "sql": "SELECT COUNT(id) FROM chapters WHERE work_id = 7 AND Act = 1", "source_tables": ["chapters"]}, "evidence": ""}
{"sample_id": 2989, "db_id": "shakespeare", "final": {"question": "In the year 1500s, how many tragedies did Shakespeare write?", "sql": "SELECT COUNT(id) FROM works WHERE GenreType = 'Tragedy' AND Date BETWEEN 1500 AND 1599", "source_tables": ["works"]}, "evidence": "year 1500s refers to Date between 1500 and 1599; tragedies refers to GenreType = 'Tragedy'"}
{"sample_id": 2990, "db_id": "shakespeare", "final": {"question": "Who is the daughter of Capulet?", "sql": "SELECT CharName FROM characters WHERE Description = 'Daughter to Capulet'", "source_tables": ["characters"]}, "evidence": "daughter of Capulet refers to characters.Description = 'Daughter to Capulet'"}
{"sample_id": 2991, "db_id": "shakespeare", "final": {"question": "How many paragraphs are there in \"Ay, surely, mere the truth: I know his lady.\"?", "sql": "SELECT ParagraphNum FROM paragraphs WHERE PlainText = 'Ay, surely, mere the truth: I know his lady.'", "source_tables": ["paragraphs"]}, "evidence": "\"Ay, surely, mere the truth: I know his lady.\" refers to PlainText = 'Ay, surely, mere the truth: I know his lady.'"}
{"sample_id": 2992, "db_id": "shakespeare", "final": {"question": "What is the long title of the work with the highest number of scenes in act 1?", "sql": "SELECT T2.LongTitle FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T1.Act = 1 ORDER BY T1.Scene DESC LIMIT 1", "source_tables": ["chapters", "works"]}, "evidence": "highest number of scenes refers to max(count(Scene))"}
{"sample_id": 2993, "db_id": "shakespeare", "final": {"question": "What is the description of the chapter with the longest number of paragraphs?", "sql": "SELECT T2.Description FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id ORDER BY T1.ParagraphNum DESC LIMIT 1", "source_tables": ["paragraphs", "chapters"]}, "evidence": "chapter with the longest number of paragraphs refers to max(ParagraphNum)"}
{"sample_id": 2994, "db_id": "shakespeare", "final": {"question": "In \"Twelfth Night, Or What You Will\", what is the description of the chapter in 2nd scene, Act 2?", "sql": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.LongTitle = 'Twelfth Night, Or What You Will' AND T2.Scene = 2 AND T2.Act = 2", "source_tables": ["chapters", "works"]}, "evidence": "\"Twelfth Night, Or What You Will\"\u00a0 refers to LongTitle = 'Twelfth Night, Or What You Will'; 2nd scene refers to Scene = 2"}
{"sample_id": 2995, "db_id": "shakespeare", "final": {"question": "What are the descriptions of the short chapters?", "sql": "SELECT DISTINCT T2.Description FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id WHERE T1.ParagraphNum < 150", "source_tables": ["paragraphs", "chapters"]}, "evidence": "short chapters refers to ParagraphNum < 150"}
{"sample_id": 2996, "db_id": "shakespeare", "final": {"question": "Which of Shakespeare's work has chapter description of \"A field near Windsor\"?", "sql": "SELECT T2.Title FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T1.Description = 'A field near Windsor.'", "source_tables": ["chapters", "works"]}, "evidence": ""}
{"sample_id": 2997, "db_id": "shakespeare", "final": {"question": "How many paragraphs are there in the chapter with the highest amount of scenes in act 1?", "sql": "SELECT T1.ParagraphNum FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id WHERE T2.Act = 1 ORDER BY T2.Scene DESC LIMIT 1", "source_tables": ["paragraphs", "chapters"]}, "evidence": "How many paragraphs refers to ParagraphNum; highest amount of scenes refers to max(count(Scene))"}
{"sample_id": 2998, "db_id": "shakespeare", "final": {"question": "Other than \"stage directions\", what is the name of the character that appeared 5 times in \"the sea-coast\"?", "sql": "SELECT T.CharName FROM ( SELECT T3.CharName, COUNT(T3.id) AS num FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id INNER JOIN characters AS T3 ON T1.character_id = T3.id WHERE T2.Description = 'The sea-coast.' AND T3.CharName != '(stage directions)' AND T1.chapter_id = 18709 GROUP BY T3.id, T3.CharName ) AS T WHERE T.num = 5", "source_tables": ["characters", "paragraphs", "chapters"]}, "evidence": "Other than \"stage directions\" refers to CharName ! = '(stage directions)'; name of the character refers to CharName; appeared 5 times in \"the sea-coast\" refers to chapters.Description = 'The sea-coast.' and count(character_id) = 5"}
{"sample_id": 2999, "db_id": "shakespeare", "final": {"question": "Among the chapters in \"As You Like It\", how many chapters have a paragraph number of no more than 50?", "sql": "SELECT COUNT(T3.chapter_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T1.Title = 'As You Like It' AND T3.ParagraphNum < 50", "source_tables": ["paragraphs", "chapters", "works"]}, "evidence": "\"As You Like It\" refers to Title = 'As You Like It' ;paragraph number of no more than 50 refers to ParagraphNum < 50"}
{"sample_id": 3000, "db_id": "shakespeare", "final": {"question": "In \"Florence. Without the walls. A tucket afar off\", what is the id of the character that was mentioned in \"His name, I pray you.\"?", "sql": "SELECT T1.character_id FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id WHERE T1.PlainText = 'His name, I pray you.' AND T2.Description = 'Florence. Without the walls. A tucket afar off.'", "source_tables": ["paragraphs", "chapters"]}, "evidence": "\"Florence. Without the walls. A tucket afar off\" refers to chapters.Description = 'Florence. Without the walls. A tucket afar off.'; \"His name, I pray you.\" refers to PlainText = 'His name, I pray you.'"}
{"sample_id": 3001, "db_id": "shakespeare", "final": {"question": "How many characters are there in Hamlet?", "sql": "SELECT COUNT(DISTINCT T3.character_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T1.Title = 'Hamlet'", "source_tables": ["paragraphs", "chapters", "works"]}, "evidence": "Hamlet refers to Title = 'Hamlet'"}
{"sample_id": 3002, "db_id": "shakespeare", "final": {"question": "How many scenes are there in the 5th act of \"History of Henry VIII\"?", "sql": "SELECT SUM(T2.Scene) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 5 AND T1.LongTitle = 'History of Henry VIII'", "source_tables": ["chapters", "works"]}, "evidence": "5th act refers to Act = 5; \"History of Henry VIII\" refers to LongTitle = 'History of Henry VIII'"}
{"sample_id": 3003, "db_id": "shakespeare", "final": {"question": "Among the history works written by Shakespeare, how many works whose 1st acts have no more than 2 scenes?", "sql": "SELECT COUNT(DISTINCT T2.work_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 1 AND T2.Scene < 2 AND T1.GenreType = 'History'", "source_tables": ["chapters", "works"]}, "evidence": "history refers to GenreType = 'History' ; 1st acts\u00a0 refers to Act = 1; no more than 2 scenes refers to count(Scene) < 2"}
{"sample_id": 3004, "db_id": "shakespeare", "final": {"question": "How many acts are there in Sonnets?", "sql": "SELECT SUM(DISTINCT T2.Act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Sonnets'", "source_tables": ["chapters", "works"]}, "evidence": "Sonnets refers to Title = 'Sonnets'"}
{"sample_id": 3005, "db_id": "shakespeare", "final": {"question": "What is the description of the chapter where the character whose abrreviated name is 1Play appeared first?", "sql": "SELECT T2.Description FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id INNER JOIN characters AS T3 ON T1.character_id = T3.id WHERE T3.Abbrev = '1Play' ORDER BY T1.chapter_id LIMIT 1", "source_tables": ["characters", "paragraphs", "chapters"]}, "evidence": "abbreviated name is 1Play; appeared first refers to Abbrev = '1Play' and min(chapter_id)"}
{"sample_id": 3006, "db_id": "shakespeare", "final": {"question": "What are the titles and genres of the one-act works of Shakespeare?", "sql": "SELECT DISTINCT T1.Title, T1.GenreType FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 1", "source_tables": ["chapters", "works"]}, "evidence": "one-act works refers to count(Act) = 1; genre refers to GenreType\n"}
{"sample_id": 3007, "db_id": "shakespeare", "final": {"question": "How many paragraphs are there in the longest chapter where Sir Richard Ratcliff appeared?", "sql": "SELECT MAX(T2.ParagraphNum) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Sir Richard Ratcliff'", "source_tables": ["characters", "paragraphs"]}, "evidence": "longest chapter refers to max(ParagraphNum); Sir Richard Ratcliff\u00a0 refers to CharName = 'Sir Richard Ratcliff'"}
{"sample_id": 3008, "db_id": "shakespeare", "final": {"question": "In \"A Lover's Complaint\", what is the description of Act 1, Scene 1?", "sql": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 1 AND T2.Scene = 1 AND T1.Title = 'A Lover''s Complaint'", "source_tables": ["chapters", "works"]}, "evidence": "\"A Lover's Complaint\" refers to Title = 'A Lover''s Complaint'"}
{"sample_id": 3009, "db_id": "shakespeare", "final": {"question": "When did Shakespeare create his work that has 154 scenes?", "sql": "SELECT T1.Date, T1.id FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Scene = 154", "source_tables": ["chapters", "works"]}, "evidence": "When refers to Date; has 154 scenes refers to count(Scene) = 154"}
{"sample_id": 3010, "db_id": "shakespeare", "final": {"question": "On average, how many scenes are there in each of the comedy works written by Shakespeare?", "sql": "SELECT CAST(SUM(T2.Scene) AS REAL) / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.GenreType = 'Comedy'", "source_tables": ["chapters", "works"]}, "evidence": "comedy refers to GenreType = 'Comedy'; average = divide(sum(count(Scene)), count(work.id))"}
{"sample_id": 3011, "db_id": "shakespeare", "final": {"question": "Between Rome and Juliet, which character was mentioned the most in the The Tragedy of Romeo and Juliet? Calculate for Romeo and Juliet's individual amount of appearance in percentage against the overall number of characters that appeared in the said work.", "sql": "SELECT SUM(IIF(T4.CharName = 'Romeo', 1, 0)), SUM(IIF(T4.CharName = 'Juliet', 1, 0)), CAST(SUM(IIF(T4.CharName = 'Romeo', 1, 0)) + SUM(IIF(T4.CharName = 'Juliet', 1, 0)) AS REAL) * 100 / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id", "source_tables": ["characters", "paragraphs", "chapters", "works"]}, "evidence": "Rome and Juliet refers to CharName = 'Romeo' and CharName = 'Juliet'; The Tragedy of Romeo and Juliet refers to LongTitle = 'The Tragedy of Romeo and Juliet'; percentage = divide(sum(charater.id) when CharName = 'Romeo', sum(charater.id)) as percentage and percentage = divide(sum(charater.id) when CharName = 'Juliet', count(charater.id)) as percentage"}
{"sample_id": 3012, "db_id": "shakespeare", "final": {"question": "What is the paragraph number with plain text \"This is Illyria, lady\"?", "sql": "SELECT ParagraphNum FROM paragraphs WHERE PlainText = 'This is Illyria, lady.'", "source_tables": ["paragraphs"]}, "evidence": "paragraph number refers to ParagraphNum"}
{"sample_id": 3013, "db_id": "shakespeare", "final": {"question": "How many number of paragraphs are there in chapter ID 18881?", "sql": "SELECT COUNT(ParagraphNum) FROM paragraphs WHERE chapter_id = 18881", "source_tables": ["paragraphs"]}, "evidence": "number of paragraphs refers to ParagraphNum"}
{"sample_id": 3014, "db_id": "shakespeare", "final": {"question": "List down any 5 titles in the history genre.", "sql": "SELECT Title FROM works WHERE GenreType = 'History' LIMIT 5", "source_tables": ["works"]}, "evidence": "in the history genre refers to GenreType = 'History'"}
{"sample_id": 3015, "db_id": "shakespeare", "final": {"question": "How many scenes are there in Act 5 of work ID 9?", "sql": "SELECT COUNT(Scene) FROM chapters WHERE work_id = 9 AND Act = 5", "source_tables": ["chapters"]}, "evidence": ""}
{"sample_id": 3016, "db_id": "shakespeare", "final": {"question": "List the character names and descriptions of chapter ID 18710.", "sql": "SELECT DISTINCT T1.CharName, T1.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.Chapter_id = 18710", "source_tables": ["characters", "paragraphs"]}, "evidence": "character names refers to CharName"}
{"sample_id": 3017, "db_id": "shakespeare", "final": {"question": "How many chapters are there in \"Midsummer Night's Dream\"?", "sql": "SELECT COUNT(T2.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Midsummer Night''s Dream'", "source_tables": ["chapters", "works"]}, "evidence": "in \"Midsummer Night's Dream\" refers to Title = 'Midsummer Night's Dream'"}
{"sample_id": 3018, "db_id": "shakespeare", "final": {"question": "How many paragraphs are there in Act 5 Scene 1 of \"Comedy of Errors\"?", "sql": "SELECT COUNT(T3.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T2.Act = 5 AND T2.Scene = 1 AND T1.Title = 'Comedy of Errors'", "source_tables": ["paragraphs", "chapters", "works"]}, "evidence": "\"Comedy of Errors\" refers to Title = 'Comedy of Errors'"}
{"sample_id": 3063, "db_id": "cars", "final": {"question": "Among the cars with 8 cylinders, what is the name of the one that's the most expensive?", "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.cylinders = 8 ORDER BY T2.price DESC LIMIT 1", "source_tables": ["price", "data"]}, "evidence": "with 8 cylinders refers to cylinders = 8; name of the car refers to car_name; the most expensive refers to max(price)"}
{"sample_id": 3064, "db_id": "cars", "final": {"question": "Among the cars over 3000lbs, how many of them cost less than $30000?", "sql": "SELECT COUNT(T1.car_name) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.weight > 3000 AND T2.price < 30000", "source_tables": ["price", "data"]}, "evidence": "over 3000lbs refers to weight > 3000; cost less than $30000 refers to price < 30000"}
{"sample_id": 3065, "db_id": "cars", "final": {"question": "What is the acceleration of the most expensive car?", "sql": "SELECT T1.acceleration FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1", "source_tables": ["price", "data"]}, "evidence": "the most expensive refers to max(price)"}
{"sample_id": 3066, "db_id": "cars", "final": {"question": "How much US dollars does a Ford Torino cost?", "sql": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'ford torino'", "source_tables": ["price", "data"]}, "evidence": "cost refers to price; Ford Torino refers to car_name = 'ford torino'"}
{"sample_id": 3067, "db_id": "cars", "final": {"question": "What was the origin country of the car model ford torino produced in 1970?", "sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.car_name = 'ford torino' AND T2.model_year = 1970", "source_tables": ["country", "production", "data"]}, "evidence": "origin country refers to country; Ford Torino refers to car_name = 'ford torino'; produced in 1970 refers to model_year = 1970"}
{"sample_id": 3068, "db_id": "cars", "final": {"question": "Among the car models introduced in the market in 1970, how many of them have the USA as their origin country?", "sql": "SELECT COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T1.model_year = 1970 AND T2.country = 'USA'", "source_tables": ["country", "production"]}, "evidence": "introduced in the market in 1970 refers to model_year = 1970; have the USA as origin country refers to country = 'USA'"}
{"sample_id": 3069, "db_id": "cars", "final": {"question": "Please list the names of all the car models whose origin country is the USA.", "sql": "SELECT DISTINCT T1.car_name FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T2.country = T3.origin WHERE T3.country = 'USA'", "source_tables": ["country", "production", "data"]}, "evidence": "name of car model refers to car_name; origin country is the USA refers to country = 'USA'"}
{"sample_id": 3070, "db_id": "cars", "final": {"question": "Please list the names of the top 3 most expensive cars.", "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 3", "source_tables": ["price", "data"]}, "evidence": "name of the car refers to car_name; the most expensive refers to max(price)"}
{"sample_id": 3071, "db_id": "cars", "final": {"question": "Please list all the years in which the car model Chevrolet Impala was introduced in the market.", "sql": "SELECT DISTINCT T1.model_year FROM production AS T1 INNER JOIN data AS T2 ON T1.ID = T2.ID WHERE T2.car_name = 'chevrolet impala'", "source_tables": ["production", "data"]}, "evidence": "year refers to model_year; Chevrolet Impala refers to car_name = 'chevrolet impala'"}
{"sample_id": 3072, "db_id": "cars", "final": {"question": "Among the cars with an acceleration of over 10 miles per squared hour, how many of them cost more than $20000 and less than $30000?", "sql": "SELECT COUNT(*) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.acceleration > 10 AND T2.price BETWEEN 20000 AND 30000", "source_tables": ["price", "data"]}, "evidence": "an acceleration of over 10 miles per squared hour refers to acceleration > 10; cost more than $20000 and less than $30000 refers to price < 30000 AND price > 20000"}
{"sample_id": 3073, "db_id": "cars", "final": {"question": "Please list the weights of all the cars with the price over $40000.", "sql": "SELECT T1.weight FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price > 40000", "source_tables": ["price", "data"]}, "evidence": "price over $40000 refers to price > 40000"}
{"sample_id": 3074, "db_id": "cars", "final": {"question": "What is the maximum acceleration of a car with price over $40000?", "sql": "SELECT MAX(T1.acceleration) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price > 40000", "source_tables": ["price", "data"]}, "evidence": "the maximum acceleration refers to max(acceleration); price over $40000 refers to price > 40000"}
{"sample_id": 3075, "db_id": "cars", "final": {"question": "What is the average price of cars with 8 cylinders?", "sql": "SELECT AVG(T2.price) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.cylinders = 8", "source_tables": ["price", "data"]}, "evidence": "with 8 cylinders refers to cylinders = 8; average price = avg(price) where cylinders = 8"}
{"sample_id": 3076, "db_id": "cars", "final": {"question": "What is the maximum sweep volume of a car that costs less than $30000?", "sql": "SELECT MAX(T1.displacement / T1.cylinders) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price < 30000", "source_tables": ["price", "data"]}, "evidence": "cost less than $30000 refers to price < 30000; the maximum sweep volume = max(divide(displacement, cylinders)) where price < 30000"}
{"sample_id": 3077, "db_id": "cars", "final": {"question": "How many cars in the database are originated from Europe?", "sql": "SELECT COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'Europe'", "source_tables": ["country", "production"]}, "evidence": "originated from Europe refers to country = 'Europe'"}
{"sample_id": 3078, "db_id": "cars", "final": {"question": "Show the origin country of Chevrolet Malibu.", "sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.car_name = 'chevrolet malibu'", "source_tables": ["country", "production", "data"]}, "evidence": "origin country refers to country; Chevrolet Malibu refers to car_name = 'chevrolet malibu'"}
{"sample_id": 3079, "db_id": "cars", "final": {"question": "What are the miles per gallon of the most expensive car?", "sql": "SELECT T1.mpg FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1", "source_tables": ["price", "data"]}, "evidence": "miles per gallon refers to mpg; the most expensive refers to max(price)"}
{"sample_id": 3080, "db_id": "cars", "final": {"question": "Tell the origin country of car no.382.", "sql": "SELECT DISTINCT T2.country FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T1.ID = 382", "source_tables": ["country", "production"]}, "evidence": "origin country refers to country; car no.382 refers to ID = 382"}
{"sample_id": 3081, "db_id": "cars", "final": {"question": "Which is the origin country of the $44274.40748 car?", "sql": "SELECT T3.country FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.price = 44274.40748", "source_tables": ["price", "country", "production"]}, "evidence": "origin country refers to country; the $44274.40748 car refers to price = 44274.40748"}
{"sample_id": 3082, "db_id": "cars", "final": {"question": "How much is the Volkswagen Dasher with 14.1 mph acceleration?", "sql": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'volkswagen dasher' AND T1.acceleration = '14.1'", "source_tables": ["price", "data"]}, "evidence": "cost refers to price; Volkswagen Dasher refers to car_name = 'volkswagen dasher'; 14.1 mph acceleration refers to acceleration = 14.1"}
{"sample_id": 3083, "db_id": "cars", "final": {"question": "Provide the engine displacement status of the $37443.85589 car.", "sql": "SELECT T1.displacement FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = '37443.85589'", "source_tables": ["price", "data"]}, "evidence": "engine displacement status refers to displacement; the $37443.85589 car refers to price = 37443.85589"}
{"sample_id": 3084, "db_id": "cars", "final": {"question": "When was the $32650.65157 car introduced to the market? State the year.", "sql": "SELECT T1.model FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = '32650.65157'", "source_tables": ["price", "data"]}, "evidence": "the $32650.65157 car refers to price = 32650.65157; year refers to model"}
{"sample_id": 3085, "db_id": "cars", "final": {"question": "Provide the price of the only Toyota Corona hardtop in the database.", "sql": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'toyota corona hardtop'", "source_tables": ["price", "data"]}, "evidence": "Toyota Corona hardtop refers to car_name = 'toyota corona hardtop'"}
{"sample_id": 3086, "db_id": "cars", "final": {"question": "How many cylinders does the cheapest car have?", "sql": "SELECT T1.cylinders FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY price ASC LIMIT 1", "source_tables": ["price", "data"]}, "evidence": "the cheapest car refers to min(price)"}
{"sample_id": 3087, "db_id": "cars", "final": {"question": "Which car in the database provides the best crash protection based on its weight? How much is it?", "sql": "SELECT T1.ID, T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T1.weight DESC LIMIT 1", "source_tables": ["price", "data"]}, "evidence": "the best crash protection refers to max(weight); cost refers to price"}
{"sample_id": 3088, "db_id": "cars", "final": {"question": "State the origin country of the fastest car in the database.", "sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country ORDER BY T1.horsepower DESC LIMIT 1", "source_tables": ["country", "production", "data"]}, "evidence": "origin country refers to country; the fastest refers to max(horsepower)"}
{"sample_id": 3089, "db_id": "cars", "final": {"question": "What is the percentage of Japanese cars in the database?", "sql": "SELECT CAST(SUM(CASE WHEN T2.country = 'Japan' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin", "source_tables": ["country", "production"]}, "evidence": "Japanese car refers to country = 'Japan'; percentage = divide(count(ID where country = 'Japan'), count(ID)) * 100%"}
{"sample_id": 3090, "db_id": "cars", "final": {"question": "Calculate the swept volume of the $34538.97449 car.", "sql": "SELECT T1.displacement / T1.cylinders FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = 34538.97449", "source_tables": ["price", "data"]}, "evidence": "sweep volume = divide(displacement, cylinders); the $34538.97449 car refers to price = 34538.97449"}
{"sample_id": 3091, "db_id": "cars", "final": {"question": "What is the name of the most expensive car?", "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1", "source_tables": ["price", "data"]}, "evidence": "name of the car refers to car_name; the most expensive refers to max(price)"}
{"sample_id": 3092, "db_id": "cars", "final": {"question": "How many cars were released in the USA in 1981?", "sql": "SELECT COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'USA' AND T1.model_year = 1981", "source_tables": ["country", "production"]}, "evidence": "in the USA refers to country = 'USA'; in 1981 refers to model_year = 1981"}
{"sample_id": 3093, "db_id": "cars", "final": {"question": "How much is the car with the highest sweep volume?", "sql": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T1.displacement / T1.cylinders DESC LIMIT 1", "source_tables": ["price", "data"]}, "evidence": "cost refers to price; the highest sweep volume refers to max(divide(displacement, cylinders))"}
{"sample_id": 3094, "db_id": "cars", "final": {"question": "What is the fastest car made by Japan?", "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T3.country = 'Japan' ORDER BY T1.horsepower DESC LIMIT 1", "source_tables": ["country", "production", "data"]}, "evidence": "the fastest refers to max(horsepower); made by Japan refers to country = 'Japan'; name of the car refers to car_name"}
{"sample_id": 3095, "db_id": "cars", "final": {"question": "How many times was Ford Maverick introduced to the market?", "sql": "SELECT COUNT(T2.model_year) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'ford maverick'", "source_tables": ["production", "data"]}, "evidence": "Ford Maverick refers to car_name = 'ford maverick';"}
{"sample_id": 3096, "db_id": "cars", "final": {"question": "Which country produced the most fuel-efficient car?", "sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country ORDER BY T1.mpg DESC LIMIT 1", "source_tables": ["country", "production", "data"]}, "evidence": "the most fuel-efficient refers to max(mpg)"}
{"sample_id": 3097, "db_id": "cars", "final": {"question": "Which Dodge car is the cheapest?", "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name LIKE 'dodge%' ORDER BY T2.price ASC LIMIT 1", "source_tables": ["price", "data"]}, "evidence": "Dodge car refers to car_name LIKE 'dodge%'; the cheapest refers to min(price); name of the car refers to car_name"}
{"sample_id": 3098, "db_id": "cars", "final": {"question": "What is the name of the most expensive car that was produced by the USA?", "sql": "SELECT T4.car_name FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T3.country = 'USA' ORDER BY T1.price DESC LIMIT 1", "source_tables": ["price", "country", "production", "data"]}, "evidence": "name of the car refers to car_name; the most expensive refers to max(price); produced by the USA refers to country = 'USA'"}
{"sample_id": 3099, "db_id": "cars", "final": {"question": "Among the cars with an engine displacement of no less than 400 cubic millimeter, how many cars cost at least 30,000?", "sql": "SELECT COUNT(*) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.displacement > 400 AND T2.price > 30000", "source_tables": ["price", "data"]}, "evidence": "engine displacement of no less than 400 cubic millimeter refers to displacement > 400; cost at least 30,000 refers to price > 30000"}
{"sample_id": 3100, "db_id": "cars", "final": {"question": "Which year did Europe produce the most cars?", "sql": "SELECT T1.model_year FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'Europe' GROUP BY T1.model_year ORDER BY COUNT(T1.model_year) DESC LIMIT 1", "source_tables": ["country", "production"]}, "evidence": "year refers to model_year; Europe refers to country = 'Europe'; the most cars refers to max(model_year)"}
{"sample_id": 3101, "db_id": "cars", "final": {"question": "How much is the Peugeot 505s Turbo Diesel?", "sql": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'peugeot 505s turbo diesel'", "source_tables": ["price", "data"]}, "evidence": "cost refers to price; Peugeot 505s Turbo Diesel refers to car_name = 'peugeot 505s turbo diesel'"}
{"sample_id": 3102, "db_id": "cars", "final": {"question": "What is the miles per square hour of the cheapest car produced by the USA?", "sql": "SELECT T4.acceleration FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T3.country = 'USA' ORDER BY T1.price ASC LIMIT 1", "source_tables": ["price", "country", "production", "data"]}, "evidence": "miles per square hour refers to acceleration; the cheapest refers to min(price); produced by the USA refers to country = 'USA'"}
{"sample_id": 3103, "db_id": "cars", "final": {"question": "Which country produced the highest number of cars? Calculate the annual average number of cars that the said country produced from the very start to the present.", "sql": "SELECT T2.country, CAST(COUNT(T1.ID) AS REAL) / COUNT(DISTINCT T1.model_year) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin GROUP BY T2.country ORDER BY COUNT(T2.country) DESC LIMIT 1", "source_tables": ["country", "production"]}, "evidence": "the highest number of cars refers to max(country); annual average number = divide(count(ID), count(model_year))"}
{"sample_id": 3104, "db_id": "cars", "final": {"question": "What is the percentage of cars that was produced by Japan among those that have a sweep volume of no less than 30?", "sql": "SELECT CAST(SUM(CASE WHEN T3.country = 'Japan' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.displacement / T1.cylinders > 30", "source_tables": ["country", "production", "data"]}, "evidence": "produced by Japan refers to country = 'Japan'; a sweep volume of no less than 30 refers to divide(displacement, cylinders) > 30; percentage = divide(count(ID where country = 'Japan'), count(ID)) * 100% where divide(displacement, cylinders) > 30"}
{"sample_id": 3105, "db_id": "cars", "final": {"question": "List the name of the cars with model year 1975.", "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T2.model_year = 1975", "source_tables": ["production", "data"]}, "evidence": "name of the car refers to car_name; model year 1975 refers to model_year = 1975"}
{"sample_id": 3106, "db_id": "cars", "final": {"question": "Calculate the average price of cars from Europe.", "sql": "SELECT AVG(T1.price) FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T3.country = 'Europe'", "source_tables": ["price", "country", "production"]}, "evidence": "from Europe refers to country = 'Europe'; average price = avg(price) where country = 'Europe'"}
{"sample_id": 3107, "db_id": "cars", "final": {"question": "What is the price of the car ID 15?", "sql": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.ID = 15", "source_tables": ["price", "data"]}, "evidence": ""}
{"sample_id": 3108, "db_id": "cars", "final": {"question": "How many of the cars from Japan weighed less than 3000?", "sql": "SELECT COUNT(*) FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T3.country = 'Japan' AND T4.weight < 3000", "source_tables": ["price", "country", "production", "data"]}, "evidence": "from Japan refers to country = 'Japan'; weighed less than 3000 refers to weight < 3000"}
{"sample_id": 3109, "db_id": "cars", "final": {"question": "Among the cars produced in year 1973, how many of the cars have horsepower less than 100?", "sql": "SELECT COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T2.model_year = 1973 AND T1.horsepower < 100", "source_tables": ["production", "data"]}, "evidence": "produced in year 1973 refers to model_year = 1973; have horsepower less than 100 refers to horsepower < 100"}
{"sample_id": 3110, "db_id": "cars", "final": {"question": "Provide the ID of cars from Japan worth greater than 35000 and have an acceleration of 14.", "sql": "SELECT T4.ID FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T3.country = 'Japan' AND T1.price > 3500 AND T4.acceleration = 14", "source_tables": ["price", "country", "production", "data"]}, "evidence": "from Japan refers to country = 'Japan'; worth greater than 35000 refers to price > 35000; have an acceleration of 14 refers to acceleration = 14"}
{"sample_id": 3111, "db_id": "cars", "final": {"question": "Give the model year of the heaviest car.", "sql": "SELECT T2.model_year FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID ORDER BY T1.weight DESC LIMIT 1", "source_tables": ["production", "data"]}, "evidence": "the heaviest refers to max(weight)"}
{"sample_id": 3112, "db_id": "cars", "final": {"question": "What is the horsepower and model year of the car named Subaru Dl?", "sql": "SELECT T1.horsepower, T2.model_year FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'subaru dl'", "source_tables": ["production", "data"]}, "evidence": "the car named Subaru Dl refers to car_name = 'subaru dl'"}
{"sample_id": 3147, "db_id": "donor", "final": {"question": "What is the total amount of donations in 2012.", "sql": "SELECT SUM(donation_total) FROM donations WHERE donation_timestamp LIKE '2012%'", "source_tables": ["donations"]}, "evidence": "total amount of donations refers to sum(donation_total); 2012 refers to donation_timestamp LIKE'2012%'"}
{"sample_id": 3148, "db_id": "donor", "final": {"question": "When was the highest amount of donated? How much was the amount?", "sql": "SELECT donation_timestamp, donation_total FROM donations WHERE donation_total = ( SELECT donation_total FROM donations ORDER BY donation_total DESC LIMIT 1 )", "source_tables": ["donations"]}, "evidence": "when refers donation_timestamp; the highest amount refers to max(donation_total)"}
{"sample_id": 3149, "db_id": "donor", "final": {"question": "Calculate the total amount of donations made in 2011 for an honoree with payment via campaign page.", "sql": "SELECT SUM(donation_total) FROM donations WHERE donation_timestamp LIKE '2011%' AND via_giving_page = 't' AND for_honoree = 't'", "source_tables": ["donations"]}, "evidence": "total amount refers to sum(donation_total); 2011 refers to donation_timestamp LIKE'2011%'; honoree refers to for_honoree = 't'; via campaign page refers to via_giving_page = 't'"}
{"sample_id": 3150, "db_id": "donor", "final": {"question": "For each donation not from a teacher, state the donor account id and calculate the percentage of donation given for optional support.", "sql": "SELECT donor_acctid, donation_optional_support / donation_total FROM donations WHERE is_teacher_acct = 'f'", "source_tables": ["donations"]}, "evidence": "not from a teacher refers to is_teacher_acct = 'f'; donor account id refers to donor_acctid; percentage of donation = divide(donation_optional_support, donation_total)*100%"}
{"sample_id": 3151, "db_id": "donor", "final": {"question": "Name all the project titles whereby project materials are intended mainly for literary.", "sql": "SELECT T1.title FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_subject = 'Literacy'", "source_tables": ["essays", "projects"]}, "evidence": "intended mainly for literary refers to primary_focus_subject = 'Literacy'"}
{"sample_id": 3152, "db_id": "donor", "final": {"question": "Name the project titles meant for school whereby 65% of the students are on reduced lunch.", "sql": "SELECT T1.title FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.poverty_level LIKE 'highest%'", "source_tables": ["essays", "projects"]}, "evidence": "65% of the students are on reduced lunch refers to poverty_level = 'highest poverty'"}
{"sample_id": 3153, "db_id": "donor", "final": {"question": "For project titled 'Toot Your Flute!', what is the main subject of the project materials intended for? Name the other projects with the similar focus.", "sql": "SELECT T2.primary_focus_subject FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title = 'Toot Your Flute!'", "source_tables": ["essays", "projects"]}, "evidence": "main subject refers to primary_focus_subject"}
{"sample_id": 3154, "db_id": "donor", "final": {"question": "Name the project titles created by teacher who acquired a doctor degree.", "sql": "SELECT T1.title FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_message LIKE 'Donation on behalf of Matt Carpenter because I''m a strong believer in education.'", "source_tables": ["essays", "donations"]}, "evidence": "teacher who acquired a doctor degree refers to teacher_prefix = 'Dr.'"}
{"sample_id": 3155, "db_id": "donor", "final": {"question": "What is the project in which 320 students will be impacted if the project is funded? Name the project and state the project cost.", "sql": "SELECT T1.title, T2.total_price_excluding_optional_support FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.students_reached = 320", "source_tables": ["essays", "projects"]}, "evidence": "320 students will be impacted refers to students_reached = 320; name the project refers to title; project cost refers tp total_price_excluding_optional_support"}
{"sample_id": 3156, "db_id": "donor", "final": {"question": "For all donors from Texas City, list their donation message and name of the project they donated to.", "sql": "SELECT T2.donation_message, T1.title FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donor_city = 'Texas City'", "source_tables": ["essays", "donations"]}, "evidence": "from Texas City refers to donor_city = 'Texas City'; name of the project refers title"}
{"sample_id": 3157, "db_id": "donor", "final": {"question": "Name the vendors who provide resources for project 'Lights, Camera, Action!'. List all the item names and unit price for each.", "sql": "SELECT T1.vendor_name, T1.item_name, T1.item_unit_price FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN essays AS T3 ON T2.projectid = T3.projectid WHERE T3.title = 'Lights, Camera, Action!'", "source_tables": ["essays", "resources", "projects"]}, "evidence": "project 'Lights, Camera, Action!' refers to title = 'Lights, Camera, Action!'"}
{"sample_id": 3158, "db_id": "donor", "final": {"question": "How much donations have been collected for project 'Whistle While We Work!'?", "sql": "SELECT SUM(T2.donation_to_project) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title = 'Whistle While We Work!'", "source_tables": ["essays", "donations"]}, "evidence": "donations collected refers to sum(donation_to_project); project 'Whistle While We Work!' refers to title = 'Whistle While We Work!'"}
{"sample_id": 3159, "db_id": "donor", "final": {"question": "Name and describe all projects created by New York teachers.", "sql": "SELECT T1.title, T1.short_description FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.teacher_ny_teaching_fellow = 't'", "source_tables": ["essays", "projects"]}, "evidence": "project name refers to title; describe refers to short_description; New York teachers refers to teacher_ny_teaching_fellow = 't'"}
{"sample_id": 3160, "db_id": "donor", "final": {"question": "If funded, which are the projects that could impact at least 600 students for a school with moderate level of poverty? Name the projects and state the project cost.", "sql": "SELECT DISTINCT T2.title, T1.total_price_excluding_optional_support FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T1.students_reached >= 600 AND T1.poverty_level LIKE 'moderate poverty'", "source_tables": ["essays", "projects"]}, "evidence": "impact at least 600 students refers to students_reached > = 600; moderate level of poverty refers to poverty_level = 'moderate poverty'; project name refers to title; project cost refers to total_price_excluding_optional_support"}
{"sample_id": 3161, "db_id": "donor", "final": {"question": "From the total amount of donation to projects, what is the percentage of the amount is for school projects located in the rural area?", "sql": "SELECT CAST(SUM(CASE WHEN T2.school_metro = 'rural' THEN T1.donation_to_project ELSE 0 END) AS REAL) * 100 / SUM(donation_to_project) FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid", "source_tables": ["donations", "projects"]}, "evidence": "located in the rural area refers to school_metro = 'rural'; percentage = divide(sum(donation_to_project), sum(donation_to_project where school_metro = 'rural'))*100%"}
{"sample_id": 3162, "db_id": "donor", "final": {"question": "Name the project that costs the most. How much has been collected from donation and what is the percentage amount still lacking?", "sql": "SELECT T1.title, SUM(T3.donation_to_project), CAST((T2.total_price_excluding_optional_support - SUM(T3.donation_to_project)) AS REAL) * 100 / SUM(T3.donation_to_project) FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid ORDER BY T2.total_price_excluding_optional_support DESC LIMIT 1", "source_tables": ["essays", "projects", "donations"]}, "evidence": "project name refers to title; costs the most refers to max(total_price_excluding_optional_support); amount collected from donation refers to sum(donation_to_project); percentage amount refers to divide(subtract(total_price_excluding_optional_support, sum(donation_to_project)), sum(donation_to_project))*100%"}
{"sample_id": 3163, "db_id": "donor", "final": {"question": "How many schools in the West New York School District have the highest poverty level?", "sql": "SELECT COUNT(poverty_level) FROM projects WHERE school_district = 'West New York School District' AND poverty_level = 'highest poverty'", "source_tables": ["projects"]}, "evidence": "the highest poverty level refers to poverty_level = 'highest poverty'"}
{"sample_id": 3164, "db_id": "donor", "final": {"question": "How many donations from teachers were done in the state of Colorado?", "sql": "SELECT COUNT(donationid) FROM donations WHERE is_teacher_acct = 't' AND donor_state = 'CO'", "source_tables": ["donations"]}, "evidence": "from teachers refers to is_teacher_acct = 't'; the state of Colorado refers to donor_state = 'CO-Colorado'"}
{"sample_id": 3165, "db_id": "donor", "final": {"question": "Which project have the highest total price including optional support? Indicate the project id.", "sql": "SELECT projectid FROM projects ORDER BY total_price_including_optional_support DESC LIMIT 1", "source_tables": ["projects"]}, "evidence": "highest total price including optional support refers to max(total_price_including_optional_support)"}
{"sample_id": 3166, "db_id": "donor", "final": {"question": "Which state have the highest number of PayPal donations for an honoree whose portion of a donation included corporate sponsored giftcard?", "sql": "SELECT DISTINCT donor_state FROM donations WHERE for_honoree = 't' AND payment_included_campaign_gift_card = 't' AND payment_method = 'paypal' AND donor_state = ( SELECT donor_state FROM donations GROUP BY donor_state ORDER BY SUM(donation_total) DESC LIMIT 1 )", "source_tables": ["donations"]}, "evidence": "which state refers to donor_state; highest number refers to max(count(donor_state)); PayPal donations refers to payment_method = 'paypal'; for an honoree refers to for_honoree = 't'; included corporate sponsored giftcard refers to payment_included_campaign_gift_card = 't'"}
{"sample_id": 3167, "db_id": "donor", "final": {"question": "Who is the largest donor by amount? Give the donation id and the total amount of the donation.", "sql": "SELECT donationid, donation_total FROM donations ORDER BY donation_total DESC LIMIT 1", "source_tables": ["donations"]}, "evidence": "largest donor by amount refers to max(donation_total); total amount of the donation refers to donation_total"}
{"sample_id": 3168, "db_id": "donor", "final": {"question": "What is the id of the project that has the highest optional tip? Indicate the names of the resources that were requested.", "sql": "SELECT T1.projectid, T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid ORDER BY T2.total_price_including_optional_support - T2.total_price_excluding_optional_support DESC LIMIT 1", "source_tables": ["resources", "projects"]}, "evidence": "highest optional tip refers to subtract(total_price_including_optional_support, total_price_excluding_optional_support); names of the resources refers to item_name"}
{"sample_id": 3169, "db_id": "donor", "final": {"question": "What were the resources that were requested by the teacher for project \"d6ef27c07c30c81f0c16c32b6acfa2ff\"? Indicate the quantities as well and whether or not the teacher acquired P.h.D or doctor degree.", "sql": "SELECT DISTINCT T1.item_name, T1.item_quantity, T2.teacher_prefix FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.projectid = 'd6ef27c07c30c81f0c16c32b6acfa2ff'", "source_tables": ["resources", "projects"]}, "evidence": "resources that were requested refers to item_name; project \"d6ef27c07c30c81f0c16c32b6acfa2ff\" refers to projectid = 'd6ef27c07c30c81f0c16c32b6acfa2ff'; quantities refers to item_quantity; teacher_prefix = 'Dr. ' refers to teacher acquired P.h.D or doctor degree"}
{"sample_id": 3170, "db_id": "donor", "final": {"question": "What is the total price including optional support received by the teacher who posted the essay titled \"Recording Rockin' Readers\"?", "sql": "SELECT SUM(T1.total_price_including_optional_support) FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title = 'Recording Rockin'' Readers'", "source_tables": ["essays", "projects"]}, "evidence": ""}
{"sample_id": 3171, "db_id": "donor", "final": {"question": "What is the latitude and longitude of the school where the teacher who wrote \"Smile for the Camera!!!\" teaches?", "sql": "SELECT T1.school_latitude, T1.school_longitude FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title = 'Smile for the Camera!!!'", "source_tables": ["essays", "projects"]}, "evidence": "wrote \"Smile for the Camera!!!\" refers to title = 'Smile for the Camera!!!'; latitude refers to school_latitude; longitude refers to school_longitude"}
{"sample_id": 3172, "db_id": "donor", "final": {"question": "What is the total amount of all the donations made by the donor who made the highest donation in a single amount? Indicate the essay title to where he/she made his/her biggest donation.", "sql": "SELECT T2.donation_total, T1.title FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_total = ( SELECT MAX(donation_total) FROM donations )", "source_tables": ["essays", "donations"]}, "evidence": "total amount of all the donations refers to sum(donation_total); highest donation refers to max(donation_total)"}
{"sample_id": 3173, "db_id": "donor", "final": {"question": "What are the favorite project types of each of the top 10 donors?", "sql": "SELECT project_resource_type FROM ( SELECT T1.donor_acctid, T3.project_resource_type FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN resources AS T3 ON T2.projectid = T3.projectid ORDER BY T1.donation_total DESC LIMIT 10 ) GROUP BY project_resource_type ORDER BY COUNT(project_resource_type) DESC LIMIT 1", "source_tables": ["donations", "resources", "projects"]}, "evidence": "favorite project type refers to project_resource_type; top donors refers to max(donation_total)"}
{"sample_id": 3174, "db_id": "donor", "final": {"question": "When was the first ever project went live on the site and what were the names of the resources being requested? If there are multiple projects that have the same date, indicate each of them and their items.", "sql": "SELECT T2.date_posted, T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.date_posted = ( SELECT date_posted FROM projects ORDER BY date_posted ASC LIMIT 1 )", "source_tables": ["resources", "projects"]}, "evidence": "first ever project refers to min(date_posted); names of the resources refers to item_name"}
{"sample_id": 3175, "db_id": "donor", "final": {"question": "What is the name of the vendor that supplies resources to the project \"iMath\"?", "sql": "SELECT DISTINCT T1.vendor_name FROM resources AS T1 INNER JOIN essays AS T3 ON T1.projectid = T3.projectid WHERE T3.title = 'iMath'", "source_tables": ["essays", "resources"]}, "evidence": "project \"iMath\" refers to title = 'iMath'"}
{"sample_id": 3176, "db_id": "donor", "final": {"question": "When was the project with the highest quantity went live on the site? Indicate the grade level for which the project materials are intended.", "sql": "SELECT T2.date_posted, T2.grade_level FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid ORDER BY T1.item_quantity DESC LIMIT 1", "source_tables": ["resources", "projects"]}, "evidence": "project with the highest quantity refers to max(item_quantity)"}
{"sample_id": 3177, "db_id": "donor", "final": {"question": "What is the average amount of donations by people who donated in the project \"Recording Rockin' Readers\"", "sql": "SELECT AVG(T3.donation_to_project) FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T1.title = 'Recording Rockin'' Readers'", "source_tables": ["essays", "projects", "donations"]}, "evidence": "average amount of donations = divide(sum(donation_to_project), count(donor_acctid)); project \"Recording Rockin' Readers\" refers to title = 'Recording Rockin' Readers'"}
{"sample_id": 3178, "db_id": "donor", "final": {"question": "What is the essay title of the project that have the highest total price excluding optional support and who is the biggest donor? Identify the donor and calculate how many percent did he/she donated in the project.", "sql": "SELECT T1.title, T3.donor_acctid, CAST(T3.donation_to_project AS REAL) / T2.total_price_excluding_optional_support FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid ORDER BY T3.donation_to_project DESC LIMIT 1", "source_tables": ["essays", "projects", "donations"]}, "evidence": "highest total price excluding optional support refers to max(total_price_excluding_optional_support); who refers to donor_acctid; percent = divide(donation_to_project, total_price_excluding_optional_support)*100%"}
{"sample_id": 3179, "db_id": "donor", "final": {"question": "From which state do the 5 biggest donor, who gave the highest cost of optional support, come from? List their donor_acctid and calculate for their average cost of optional support for every donations they make and identtify the project's type of resource to which they gave the hightest optional support.", "sql": "SELECT T1.school_state, T2.donor_acctid, AVG(T2.donation_optional_support), T1.resource_type FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid ORDER BY T2.donation_optional_support DESC LIMIT 5", "source_tables": ["donations", "projects"]}, "evidence": "which state refers to school_state; highest cost of optional support refers to max(donation_optional_support); average cost of optional support = avg(donation_optional_support)"}
{"sample_id": 3180, "db_id": "donor", "final": {"question": "Which project in Brooklyn that have the highest request of resources? State the the project ID including all of the name of item requested.", "sql": "SELECT T1.projectid, T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_city LIKE 'Brooklyn' GROUP BY T1.item_name ORDER BY COUNT(T1.item_name) DESC LIMIT 1", "source_tables": ["resources", "projects"]}, "evidence": "in Brooklyn refers to school_city = 'Brooklyn'; highest request of resources refers to max(count(T1.item_name))"}
{"sample_id": 3181, "db_id": "donor", "final": {"question": "How many schools in urban area requested for books resources?", "sql": "SELECT COUNT(T2.schoolid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.resource_type = 'Books' AND T2.school_metro = 'urban'", "source_tables": ["resources", "projects"]}, "evidence": "urban area refers to school_metro = 'urban'; books resources refers to project_resource_type = 'Books'"}
{"sample_id": 3182, "db_id": "donor", "final": {"question": "Which school requested the highest amount of resources from Amazon? State the school's ID.", "sql": "SELECT T2.schoolid FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.vendor_name LIKE 'Amazon' GROUP BY T2.schoolid ORDER BY COUNT(T1.vendor_name) DESC LIMIT 1", "source_tables": ["resources", "projects"]}, "evidence": "highest amount of resources refers to max(count(schoolid)); Amazon refers to vendor_name = 'Amazon'"}
{"sample_id": 3183, "db_id": "donor", "final": {"question": "How many donors in Los Angeles donated to school in another city?", "sql": "SELECT COUNT(T2.schoolid) FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.donor_city = 'Los Angeles' AND T2.school_city NOT LIKE 'Los Angeles'", "source_tables": ["donations", "projects"]}, "evidence": "in Los Angeles refers to donor_city = 'Los Angeles'; school in another city refers to school_city ! = 'Los Angeles'"}
{"sample_id": 3184, "db_id": "donor", "final": {"question": "What is the prefix for the teacher who handled the 'Reading About Other Cultures' project?", "sql": "SELECT T2.teacher_prefix FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Reading About Other Cultures'", "source_tables": ["essays", "projects"]}, "evidence": "Reading About Other Cultures' project refers to title = 'Reading About Other Cultures'; prefix for the teacher refers to teacher_prefix"}
{"sample_id": 3185, "db_id": "donor", "final": {"question": "How many students will be impacted for the Fit Firsties! Project?", "sql": "SELECT T2.students_reached FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Fit Firsties!'", "source_tables": ["essays", "projects"]}, "evidence": "how many students refers to students_reached; Fit Firsties! project refers to title = 'Fit Firsties!'"}
{"sample_id": 3186, "db_id": "donor", "final": {"question": "List the title of all projects located in Chicago along with the ID of the donor.", "sql": "SELECT T1.title, T3.donor_acctid FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T2.school_city LIKE 'Chicago'", "source_tables": ["essays", "projects", "donations"]}, "evidence": "in Chicago refers to school_city = 'Chicago'; ID of the donor refers to donor_acctid"}
{"sample_id": 3187, "db_id": "donor", "final": {"question": "Which projects created by teachers with Doctor Degree where the project have more than 300 students involved. List down the title of the project.", "sql": "SELECT T1.title FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.teacher_prefix LIKE 'Dr.' AND T2.students_reached > 300", "source_tables": ["essays", "projects"]}, "evidence": "eachers with Doctor Degree refers to teacher_prefix = 'Dr.'; more than 300 students involved refers to students_reached > 300"}
{"sample_id": 3188, "db_id": "donor", "final": {"question": "State the name of vendor that supplies book resources to all school with literacy subject as their primary focus.", "sql": "SELECT DISTINCT T1.vendor_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_subject LIKE 'Literacy'", "source_tables": ["resources", "projects"]}, "evidence": "literacy subject as primary focus refers to primary_focus_subject = 'Literacy'"}
{"sample_id": 3189, "db_id": "donor", "final": {"question": "What is the title of project that have the most expensive funds?", "sql": "SELECT T1.title FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.projectid = ( SELECT projectid FROM resources ORDER BY item_unit_price * item_quantity DESC LIMIT 1 )", "source_tables": ["essays", "resources", "projects"]}, "evidence": "the most expensive funds refers to max(multiply(item_unit_price, item_quantity))"}
{"sample_id": 3190, "db_id": "donor", "final": {"question": "Among all the donors from New York, how many of them are teachers?", "sql": "SELECT COUNT(donationid) FROM donations WHERE is_teacher_acct = 't' AND donor_city = 'New York'", "source_tables": ["donations"]}, "evidence": "from New York refers to donor_city = 'New York'; donor is a teacher refers to is_teacher_acct = 't';"}
{"sample_id": 3191, "db_id": "donor", "final": {"question": "How many donors from New Jersey have made a donation for an honoree?", "sql": "SELECT COUNT(donationid) FROM donations WHERE for_honoree = 't' AND donor_state = 'NJ'", "source_tables": ["donations"]}, "evidence": "from New Jersey refers to donor_state = 'NJ'; for an honoree refers to for_honoree = 't';"}
{"sample_id": 3192, "db_id": "donor", "final": {"question": "What is the donation message for donation ID a84dace1ff716f6f0c7af8ef9090a5d5?", "sql": "SELECT donation_message FROM donations WHERE donationid = 'a84dace1ff716f6f0c7af8ef9090a5d5'", "source_tables": ["donations"]}, "evidence": ""}
{"sample_id": 3193, "db_id": "donor", "final": {"question": "Please list the types of resources that the vendor Lakeshore Learning Materials has provided for the projects.", "sql": "SELECT DISTINCT project_resource_type FROM resources WHERE vendor_name = 'Lakeshore Learning Materials'", "source_tables": ["resources"]}, "evidence": "Lakeshore Learning Materials is vendor_name; type of resources refers to project_resource_type;"}
{"sample_id": 3194, "db_id": "donor", "final": {"question": "What is the name of the item that is provided in the biggest amount by the vendor Lakeshore Learning Materials?", "sql": "SELECT item_name FROM resources WHERE vendor_name = 'Lakeshore Learning Materials' ORDER BY item_quantity DESC LIMIT 1", "source_tables": ["resources"]}, "evidence": "lakeshore Learning Materials is vendor_name; biggest amount refers to Max(item_quantity);"}
{"sample_id": 3195, "db_id": "donor", "final": {"question": "Among the projects created by a teacher from New York, how many of them have a donor from the same city?", "sql": "SELECT COUNT(T1.projectid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.teacher_ny_teaching_fellow = 't' AND T2.donor_city = 'New York'", "source_tables": ["donations", "projects"]}, "evidence": "New York is the donor city; donor from the same city refers to donor from New York in which teacher_ny_teaching_fellow = 't';"}
{"sample_id": 3196, "db_id": "donor", "final": {"question": "How many projects have their resources provided by the vendor Lakeshore Learning Materials and are created by a teacher with a doctor degree?", "sql": "SELECT COUNT(T1.projectid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.vendor_name = 'Lakeshore Learning Materials' AND T2.teacher_prefix = 'Dr.'", "source_tables": ["resources", "projects"]}, "evidence": "Lakeshore Learning Materials is vendor_name;\u00a0 teacher with a doctor degree refers to teacher_prefix = 'Dr.';"}
{"sample_id": 3197, "db_id": "donor", "final": {"question": "Please list the vendor providing resources for the projects of a school with the highest poverty level.", "sql": "SELECT T1.vendor_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.poverty_level = 'highest poverty'", "source_tables": ["resources", "projects"]}, "evidence": "highest poverty level refers to poverty_level = 'highest poverty';"}
{"sample_id": 3198, "db_id": "donor", "final": {"question": "Of the projects whose resources are provided by the vendor Lakeshore Learning Materials, the school of which project has the highest cost of labor fulfillment? Please give its school ID.", "sql": "SELECT T2.schoolid FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.vendor_name = 'Lakeshore Learning Materials' ORDER BY T2.fulfillment_labor_materials DESC LIMIT 1", "source_tables": ["resources", "projects"]}, "evidence": "Lakeshore Learning Materials is vendor_name; highest cost of labor fulfillment refers to Max(fulfillment_labor_materials);"}
{"sample_id": 3199, "db_id": "donor", "final": {"question": "Who is the vendor of the resources needed by the project that had the highest cost of optional tip?", "sql": "SELECT T1.vendor_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid ORDER BY T2.total_price_including_optional_support - T2.total_price_including_optional_support DESC LIMIT 1", "source_tables": ["resources", "projects"]}, "evidence": "Highest cost of the optional tip refers to Max(total_price_including_optional_support - total_price_excluding_optional_support);"}
{"sample_id": 3200, "db_id": "donor", "final": {"question": "What is the total donated amount for projects created by a teacher working in a school in Brooklyn?", "sql": "SELECT SUM(T2.donation_total) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_city = 'Brooklyn'", "source_tables": ["donations", "projects"]}, "evidence": "school in Brooklyn refers to school_city = 'Brooklyn'; total donated amount refers to donation_total;"}
{"sample_id": 3201, "db_id": "donor", "final": {"question": "Please list the donation messages of the donations for the projects created by a teacher working in a public magnet school in Brooklyn.", "sql": "SELECT T2.donation_message FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_city = 'Brooklyn' AND T1.school_magnet = 't'", "source_tables": ["donations", "projects"]}, "evidence": "school in Brooklyn refers to school_city = 'Brooklyn'; public magnet refers to school_magnet = 't';"}
{"sample_id": 3202, "db_id": "donor", "final": {"question": "Among the donations with a portion using account credits redemption, how many of them are for projects created by teachers working in a public year-round school?", "sql": "SELECT COUNT(T1.projectid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.payment_included_acct_credit = 't' AND T1.school_year_round = 't'", "source_tables": ["donations", "projects"]}, "evidence": "portion using account credits redemption refers to payment_included_acct_credit = 't'; year-round school refers to school_year_round = 't';"}
{"sample_id": 3203, "db_id": "donor", "final": {"question": "What is the total donation amount made for projects whose main subject area are Literacy & Language?", "sql": "SELECT SUM(T2.dollar_amount) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.primary_focus_area = 'Literacy & Language'", "source_tables": ["donations", "projects"]}, "evidence": "main subject area refers to primary_focus_area = 'Literacy & Language'; total donation amount refers to Sum(dollar_amount);"}
{"sample_id": 3204, "db_id": "donor", "final": {"question": "Which donor has donated the most for a project whose main subject area is Literacy & Language? Please give his or her ID.", "sql": "SELECT T2.donor_acctid FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.primary_focus_area = 'Literacy & Language' ORDER BY T2.donation_total DESC LIMIT 1", "source_tables": ["donations", "projects"]}, "evidence": "main subject area refers to primary_focus_area = 'Literacy & Language'; donated the most refers to Max(donation_total);"}
{"sample_id": 3205, "db_id": "donor", "final": {"question": "What is the most requested item under the resource type \"Supplies\" for projects whose main subject area is Literacy & Language?", "sql": "SELECT T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_area = 'Literacy & Language' AND T1.project_resource_type = 'Supplies' ORDER BY T1.item_quantity DESC LIMIT 1", "source_tables": ["resources", "projects"]}, "evidence": "main subject area refers to primary_focus_area = 'Literacy & Language'; resource type supplies refers to project_resource_type = 'Supplies'; most requested item refers to Max(item_quantity);"}
{"sample_id": 3206, "db_id": "donor", "final": {"question": "Which item provided to a project whose main subject area is Literacy & Language has the highest unit price?", "sql": "SELECT T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_area = 'Literacy & Language' ORDER BY T1.item_unit_price DESC LIMIT 1", "source_tables": ["resources", "projects"]}, "evidence": "main subject area refers to primary_focus_area = 'Literacy & Language'; highest unit price refers to Max(item_unit_price);"}
{"sample_id": 3207, "db_id": "donor", "final": {"question": "What is the average donation amount to a project created by a teacher working in a school in Brooklyn?", "sql": "SELECT SUM(T2.donation_total) / COUNT(donationid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_city = 'Brooklyn'", "source_tables": ["donations", "projects"]}, "evidence": "school in Brooklyn refers to school_city = 'Brooklyn'; Average = AVG(donation_total);"}
{"sample_id": 3208, "db_id": "donor", "final": {"question": "To which city did donor \u201c22cbc920c9b5fa08dfb331422f5926b5\u201d donate?", "sql": "SELECT DISTINCT donor_city FROM donations WHERE donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5'", "source_tables": ["donations"]}, "evidence": "donor \u201c22cbc920c9b5fa08dfb331422f5926b5\u201d refers to donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5'; city refers to donor_city"}
{"sample_id": 3209, "db_id": "donor", "final": {"question": "Is donor \u201c22cbc920c9b5fa08dfb331422f5926b5\u201d a teacher?", "sql": "SELECT DISTINCT is_teacher_acct FROM donations WHERE donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5'", "source_tables": ["donations"]}, "evidence": "donor \u201c22cbc920c9b5fa08dfb331422f5926b5\u201d refers to donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5'; is a teacher refers to is_teacher_acct;"}
{"sample_id": 3210, "db_id": "donor", "final": {"question": "Have the teacher \"42d43fa6f37314365d08692e08680973\" acquired P.h.D or doctor degree?", "sql": "SELECT CASE WHEN teacher_prefix = 'Dr.' THEN 'Yes' ELSE 'NO' END FROM projects WHERE teacher_acctid = '42d43fa6f37314365d08692e08680973'", "source_tables": ["projects"]}, "evidence": "teacher \"42d43fa6f37314365d08692e08680973\" refers to teacher_acctid = '42d43fa6f37314365d08692e08680973';"}
{"sample_id": 3211, "db_id": "donor", "final": {"question": "Is teacher \"42d43fa6f37314365d08692e08680973\" a New York teacher?", "sql": "SELECT teacher_ny_teaching_fellow end FROM projects WHERE teacher_acctid = '42d43fa6f37314365d08692e08680973'", "source_tables": ["projects"]}, "evidence": "teacher \"42d43fa6f37314365d08692e08680973\"refers to teacher_acctid = '42d43fa6f37314365d08692e08680973';"}
{"sample_id": 3212, "db_id": "donor", "final": {"question": "Please list the titles of projects by which schools in Abington was donated.", "sql": "SELECT T2.title FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T1.school_city LIKE 'Abington'", "source_tables": ["essays", "projects"]}, "evidence": "Abington is school_city;"}
{"sample_id": 3213, "db_id": "donor", "final": {"question": "Please list the resource names of project that teacher \"822b7b8768c17456fdce78b65abcc18e\" created.", "sql": "SELECT T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'", "source_tables": ["resources", "projects"]}, "evidence": "teacher \"822b7b8768c17456fdce78b65abcc18e\" refers to teacher_acctid = '822b7b8768c17456fdce78b65abcc18e';"}
{"sample_id": 3214, "db_id": "donor", "final": {"question": "Among the schools' projects whose donation didn't use account credits redemption,how many schools are public magnet schools?", "sql": "SELECT COUNT(T1.schoolid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_magnet = 't' AND T2.payment_included_acct_credit = 'f'", "source_tables": ["donations", "projects"]}, "evidence": "donation didn't use account credits redemption refers to payment_included_acct_credit = 'f'; magnet school refers to school_magnet = 't';"}
{"sample_id": 3215, "db_id": "donor", "final": {"question": "Please provide the type of resource that donation \"b39547f29dfc25fb13c6e9e8d940dc43\" contain.", "sql": "SELECT DISTINCT T1.project_resource_type FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T3.donationid LIKE 'b39547f29dfc25fb13c6e9e8d940dc43'", "source_tables": ["donations", "resources", "projects"]}, "evidence": "donation \"b39547f29dfc25fb13c6e9e8d940dc43\" refers to donationid = 'b39547f29dfc25fb13c6e9e8d940dc43'; type of resource refers to project_resource_type;"}
{"sample_id": 3216, "db_id": "donor", "final": {"question": "Among public magnet schools,what percentage of schools that receive the donated resources as books?", "sql": "SELECT CAST(SUM(CASE WHEN T1.project_resource_type = 'Books' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.projectid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_magnet = 't'", "source_tables": ["resources", "projects"]}, "evidence": "magnet school refers to school_magnet = 't'; donated resources as books refers to project_resource_type = 'Books'; percentage = Divide(Count(projectid) where project_resource_type = 'Books', Count(projectid))*100"}
{"sample_id": 3217, "db_id": "donor", "final": {"question": "In the schools donated by the project of the resources provided by ABC School Supply, how many schools are public magnet schools?", "sql": "SELECT COUNT(T2.schoolid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_magnet = 't' AND T1.vendor_name = 'ABC School Supply'", "source_tables": ["resources", "projects"]}, "evidence": "ABC School Supply is vendor_name;\u00a0 public magnet school refers to school_magnet = 't';"}
{"sample_id": 3218, "db_id": "donor", "final": {"question": "Among the schools donated by donor \"000eebf28658900e63b538cf8a73afbd\",how many schools whose poverty level are highest?", "sql": "SELECT COUNT(T1.schoolid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.poverty_level = 'highest poverty' AND T2.donor_acctid = '000eebf28658900e63b538cf8a73afbd'", "source_tables": ["donations", "projects"]}, "evidence": "donor \"000eebf28658900e63b538cf8a73afbd\" refers to donor_acctid = '000eebf28658900e63b538cf8a73afbd'; highest poverty level refers to poverty_level = 'highest poverty';"}
{"sample_id": 3219, "db_id": "donor", "final": {"question": "What is the short description of the project that gives donation to school \u201c301c9bf0a45d159d162b65a93fddd74e\u201d?", "sql": "SELECT T2.short_description FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T1.schoolid = '301c9bf0a45d159d162b65a93fddd74e'", "source_tables": ["essays", "projects"]}, "evidence": "school \u201c301c9bf0a45d159d162b65a93fddd74e\" refers to schoolid = '301c9bf0a45d159d162b65a93fddd74e';"}
{"sample_id": 3220, "db_id": "donor", "final": {"question": "Which city does the school that project \"iMath\" donated to in?", "sql": "SELECT T1.school_city FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title LIKE 'iMath'", "source_tables": ["essays", "projects"]}, "evidence": "iMath is the title; city refers to school_city;"}
{"sample_id": 3221, "db_id": "donor", "final": {"question": "How to pay the donation of the project that teacher \"822b7b8768c17456fdce78b65abcc18e\" created?", "sql": "SELECT T2.payment_method FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'", "source_tables": ["donations", "projects"]}, "evidence": "teacher \"822b7b8768c17456fdce78b65abcc18e\" refers to teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'; how to pay the donation refers to payment_method;"}
{"sample_id": 3222, "db_id": "donor", "final": {"question": "How much did the project that teacher \"822b7b8768c17456fdce78b65abcc18e\" created donate?", "sql": "SELECT T2.donation_total FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'", "source_tables": ["donations", "projects"]}, "evidence": "teacher \"822b7b8768c17456fdce78b65abcc18e\" refers to teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'; donated refers to donation_total;"}
{"sample_id": 3223, "db_id": "donor", "final": {"question": "Is the donor who donated to school \"d4af834b1d3fc8061e1ee1b3f1a77b85\" a teacher?", "sql": "SELECT T2.is_teacher_acct FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.schoolid = 'd4af834b1d3fc8061e1ee1b3f1a77b85'", "source_tables": ["donations", "projects"]}, "evidence": "school \"d4af834b1d3fc8061e1ee1b3f1a77b85\" refers to schoolid = 'd4af834b1d3fc8061e1ee1b3f1a77b85'; donor is a teacher refers to is_teacher_acct = 't';"}
{"sample_id": 3224, "db_id": "donor", "final": {"question": "Among the schools whose donators are teachers, what is the percentage of schools that are in Brooklyn?", "sql": "SELECT CAST(SUM(CASE WHEN T1.school_city LIKE 'Brooklyn' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.teacher_acctid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.is_teacher_acct = 't'", "source_tables": ["donations", "projects"]}, "evidence": "donors are teachers refers to is_teacher_acct = 't'; Brooklyn is school_city; percentage = Divide(Count(school_city-'Brooklyn'),Count(school_city))*100"}
{"sample_id": 3225, "db_id": "donor", "final": {"question": "Among the projects whose donators are teachers, what is the percentage of projects that affected more than 30 students?", "sql": "SELECT CAST(SUM(CASE WHEN T1.students_reached > 30 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.projectid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.is_teacher_acct = 't'", "source_tables": ["donations", "projects"]}, "evidence": "donors are teachers refers to is_teacher_acct = 't'; affect more than 30 students refers to students_reached>30; Percentage = Divide(Count(students_reached>30), Count(students_reached))*100"}
{"sample_id": 3226, "db_id": "donor", "final": {"question": "How many schools which have suburban metro are there in Bethlehem?", "sql": "SELECT COUNT(schoolid) FROM projects WHERE school_city = 'Bethlehem' AND school_metro = 'suburban'", "source_tables": ["projects"]}, "evidence": "Bethlehem is school_city; suburban metro refers to school_metro = 'suburban';"}
{"sample_id": 3227, "db_id": "donor", "final": {"question": "What is the number of the year round school in Los Angeles?", "sql": "SELECT COUNT(school_year_round) FROM projects WHERE school_city = 'Los Angeles' AND school_year_round = 't'", "source_tables": ["projects"]}, "evidence": "Los Angeles is school_city; year-round school refers to school_year_round = 't';"}
{"sample_id": 3228, "db_id": "donor", "final": {"question": "State the number of public magnet schools in New York Manhattan.", "sql": "SELECT COUNT(schoolid) FROM projects WHERE school_county = 'New York (Manhattan)' AND school_magnet = 't'", "source_tables": ["projects"]}, "evidence": "public magnet school refers to school_magnet = 't'; in New York Manhattan refers to school_country = 'New York(Manhattan)';"}
{"sample_id": 3229, "db_id": "donor", "final": {"question": "How many teachers in Twin Falls have Math & Science as their primary focus area?", "sql": "SELECT COUNT(teacher_acctid) FROM projects WHERE school_county = 'Twin Falls' AND primary_focus_area = 'Math & Science'", "source_tables": ["projects"]}, "evidence": "Twin Falls is school_country; 'Math & Science' is primary_focus_area;"}
{"sample_id": 3230, "db_id": "donor", "final": {"question": "How many teachers that have Literature & Writing as their primary focus subject use 'Mr' as their teacher prefix?", "sql": "SELECT COUNT(teacher_acctid) FROM projects WHERE teacher_prefix = 'Mr.' AND primary_focus_subject = 'Literature & Writing'", "source_tables": ["projects"]}, "evidence": "Literature & Writing' is primary_focus_subject; use 'Mr' as their teacher prefix refers to teacher_prefix = 'Mr';"}
{"sample_id": 3231, "db_id": "donor", "final": {"question": "What is the total number of projects that was created by the teachers that teach 3-5 grades in Boston Public School District?", "sql": "SELECT COUNT(projectid) FROM projects WHERE school_district = 'Boston Public School District' AND grade_level = 'Grades 3-5'", "source_tables": ["projects"]}, "evidence": "teach 3-5 grades refers to grade_level = 'Grades 3-5'; 'Boston Public School District' is school_district;"}
{"sample_id": 3232, "db_id": "donor", "final": {"question": "For the teacher who wrote the project 'ABC Read', which city was he/she in?", "sql": "SELECT T2.school_city FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title = 'ABC Read'", "source_tables": ["essays", "projects"]}, "evidence": "ABC Read' is the title; city refers to school_city"}
{"sample_id": 3233, "db_id": "donor", "final": {"question": "What is the teacher prefix for the teacher who wrote the project 'Creating Memories and Inspiring Dreams'?", "sql": "SELECT T2.teacher_prefix FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Creating Memories and Inspiring Dreams%'", "source_tables": ["essays", "projects"]}, "evidence": "Creating Memories and Inspiring Dreams is title;"}
{"sample_id": 3234, "db_id": "donor", "final": {"question": "Is the donor of the project 'Calculate, Financial Security For Tomorrow Starts Today! ' a teacher?", "sql": "SELECT T2.is_teacher_acct FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Calculate, Financial Security For Tomorrow Starts Today! '", "source_tables": ["essays", "donations"]}, "evidence": "Calculate, Financial Security For Tomorrow Starts Today! ' is title; donor is a teacher refers to is_teacher_acct = 't'"}
{"sample_id": 3235, "db_id": "donor", "final": {"question": "What is the title for the project that got the donation message as \"Donation on behalf of Matt Carpenter because I'm a strong believer in education\".", "sql": "SELECT T1.title FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_message LIKE 'Donation on behalf of Matt Carpenter because I''m a strong believer in education.'", "source_tables": ["essays", "donations"]}, "evidence": ""}
{"sample_id": 3236, "db_id": "donor", "final": {"question": "How many number of donations did the project 'A Rug For Reaching Readers' get?", "sql": "SELECT SUM(T2.donation_total) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'A Rug For Reaching Readers'", "source_tables": ["essays", "donations"]}, "evidence": "A Rug For Reaching Readers'is the title;"}
{"sample_id": 3237, "db_id": "donor", "final": {"question": "What is the total donation amount for the project 'Engaging Young Readers with a Leveled Classroom Library'?", "sql": "SELECT SUM(T2.donation_to_project) + SUM(T2.donation_optional_support) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Engaging Young Readers with a Leveled Classroom Library '", "source_tables": ["essays", "donations"]}, "evidence": "Engaging Young Readers with a Leveled Classroom Library' is the title; total donation amount = Add(donation_to_project, donation_optional_support)"}
{"sample_id": 3238, "db_id": "donor", "final": {"question": "What was the donation optional support amount for the project 'Armenian Genocide'?", "sql": "SELECT T2.donation_optional_support FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Armenian Genocide'", "source_tables": ["essays", "donations"]}, "evidence": "Armenian Genocide' is the title;"}
{"sample_id": 3239, "db_id": "donor", "final": {"question": "State the short description for the project which got the donation at 14:44:29 on 2012/9/6.", "sql": "SELECT T1.short_description FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_timestamp LIKE '2012-09-06 14:44:29'", "source_tables": ["essays", "donations"]}, "evidence": "donation at 14:44:29 on 2012/9/6 refers to donation_timestamp = '2012/9/6 14:44:29';"}
{"sample_id": 3240, "db_id": "donor", "final": {"question": "Did the project 'I Can't See It...Can You Help Me???' get the tip for the donation?", "sql": "SELECT T2.donation_included_optional_support FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'I Can''t See It...Can You Help Me???'", "source_tables": ["essays", "donations"]}, "evidence": "I Can't See It...Can You Help Me???' is the title;"}
{"sample_id": 3241, "db_id": "donor", "final": {"question": "What is the teacher's account ID for the project that got the donation at 11:38:43 on 2008/7/29 ?", "sql": "SELECT T1.teacher_acctid FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_timestamp LIKE '2008-07-29 11:38:43.361'", "source_tables": ["essays", "donations"]}, "evidence": "donation at 11:38:43 on 2008/7/29 refers to donation_timestamp = '2008/7/29 11:38:43'; teacher's account ID refers to teacher_acctid;"}
{"sample_id": 3242, "db_id": "donor", "final": {"question": "Show the school id for the project 'Virtual Aquarium Needs Help!'.", "sql": "SELECT T2.schoolid FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Virtual Aquarium Needs Help!'", "source_tables": ["essays", "projects"]}, "evidence": "Virtual Aquarium Needs Help!' is the title;"}
{"sample_id": 3307, "db_id": "video_games", "final": {"question": "How many more games were sold on game platform ID 50 than on game platform ID 51 in region ID 1?", "sql": "SELECT (SUM(CASE WHEN T.game_platform_id = 50 THEN T.num_sales ELSE 0 END) - SUM(CASE WHEN T.game_platform_id = 51 THEN T.num_sales ELSE 0 END)) * 100000 AS nums FROM region_sales AS T WHERE T.region_id = 1", "source_tables": ["region_sales"]}, "evidence": "result = subtract(sum(num_sales where game_platform_id = 50), sum(num_sales where game_platform_id = 51))"}
{"sample_id": 3308, "db_id": "video_games", "final": {"question": "Please list all the games that have the same game genre as 3D Lemmings.", "sql": "SELECT T1.game_name FROM game AS T1 WHERE T1.genre_id = ( SELECT T.genre_id FROM game AS T WHERE T.game_name = '3D Lemmings' )", "source_tables": ["game"]}, "evidence": "game refers to game_name; 3D Lemmings refers to game_name = '3D Lemmings'"}
{"sample_id": 3309, "db_id": "video_games", "final": {"question": "How many action games are there in total?", "sql": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Action'", "source_tables": ["game", "genre"]}, "evidence": "action game refers to genre_name = 'Action'"}
{"sample_id": 3310, "db_id": "video_games", "final": {"question": "What is the genre of 3D Lemmings?", "sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '3D Lemmings'", "source_tables": ["game", "genre"]}, "evidence": "genre refers to genre_name; 3D Lemmings refers to game_name = '3D Lemmings'"}
{"sample_id": 3311, "db_id": "video_games", "final": {"question": "Who is the publisher of 3D Lemmings?", "sql": "SELECT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = '3D Lemmings'", "source_tables": ["game", "publisher", "game_publisher"]}, "evidence": "publisher refers to publisher_name; 3D Lemmings refers to game_name = '3D Lemmings'"}
{"sample_id": 3312, "db_id": "video_games", "final": {"question": "Please list the names of all the games published by 10TACLE Studios.", "sql": "SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T3.publisher_name = '10TACLE Studios'", "source_tables": ["game", "publisher", "game_publisher"]}, "evidence": "name refers to game_name; published by 10TACLE Studios refers to publisher_name = '10TACLE Studios'"}
{"sample_id": 3313, "db_id": "video_games", "final": {"question": "Among the games published by 10TACLE Studios, how many of them are puzzles?", "sql": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T4.genre_name = 'Puzzle' AND T3.publisher_name = '10TACLE Studios'", "source_tables": ["game", "publisher", "genre", "game_publisher"]}, "evidence": "published by 10TACLE Studios refers to publisher_name = '10TACLE Studios'; puzzle refers to genre_name = 'Puzzle'"}
{"sample_id": 3314, "db_id": "video_games", "final": {"question": "Please list the names of all the games published by 10TACLE Studios and are puzzles.", "sql": "SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T3.publisher_name = '10TACLE Studios' AND T4.genre_name = 'Puzzle'", "source_tables": ["game", "publisher", "genre", "game_publisher"]}, "evidence": "name refers to game_name; published by 10TACLE Studios refers to publisher_name = '10TACLE Studios'; puzzle refers to genre_name = 'Puzzle'"}
{"sample_id": 3315, "db_id": "video_games", "final": {"question": "Which publisher has published the most games?", "sql": "SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T2.id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T1.publisher_id ORDER BY COUNT(T2.id) DESC LIMIT 1 ) t", "source_tables": ["publisher", "game_publisher"]}, "evidence": "publisher refers to publisher_name; the most games refers to max(count(game_id))"}
{"sample_id": 3316, "db_id": "video_games", "final": {"question": "On which platform was Panzer Tactics released in 2007?", "sql": "SELECT T5.platform_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN game AS T3 ON T1.game_id = T3.id INNER JOIN game_platform AS T4 ON T1.id = T4.game_publisher_id INNER JOIN platform AS T5 ON T4.platform_id = T5.id WHERE T3.game_name = 'Panzer Tactics' AND T4.release_year = 2007", "source_tables": ["game_publisher", "game", "game_platform", "platform", "publisher"]}, "evidence": "platform refers to platform_name; Panzer Tactics refers to game_name = 'Panzer Tactics'; released in 2007 refers to release_year = 2007"}
{"sample_id": 3317, "db_id": "video_games", "final": {"question": "In which year was Panzer Tactics released on DS?", "sql": "SELECT T4.release_year FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN game AS T3 ON T1.game_id = T3.id INNER JOIN game_platform AS T4 ON T1.id = T4.game_publisher_id INNER JOIN platform AS T5 ON T4.platform_id = T5.id WHERE T3.game_name = 'Panzer Tactics' AND T5.platform_name = 'DS'", "source_tables": ["game_publisher", "game", "game_platform", "platform", "publisher"]}, "evidence": "year refers to release_year; Panzer Tactics refers to game_name = 'Panzer Tactics'; on DS refers to platform_name = 'DS'"}
{"sample_id": 3318, "db_id": "video_games", "final": {"question": "Please list the names of the publishers of all the puzzle games.", "sql": "SELECT DISTINCT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T4.genre_name = 'Puzzle'", "source_tables": ["game", "publisher", "genre", "game_publisher"]}, "evidence": "name of publisher refers to publisher_name; puzzle refers to genre_name = 'Puzzle'"}
{"sample_id": 3319, "db_id": "video_games", "final": {"question": "What is the name of the publisher that has published the most puzzle games?", "sql": "SELECT T.publisher_name FROM ( SELECT T3.publisher_name, COUNT(DISTINCT T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T4.genre_name = 'Puzzle' GROUP BY T3.publisher_name ORDER BY COUNT(DISTINCT T1.id) DESC LIMIT 1 ) t", "source_tables": ["game", "publisher", "genre", "game_publisher"]}, "evidence": "name of publisher refers to publisher_name; puzzle refers to genre_name = 'Puzzle'; the most puzzle games refers to max(count(game_id where genre_name = 'Puzzle'))"}
{"sample_id": 3320, "db_id": "video_games", "final": {"question": "How many publishers have published more than 3 puzzle games?", "sql": "SELECT COUNT(T.publisher_name) FROM ( SELECT T3.publisher_name, COUNT(DISTINCT T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T4.genre_name = 'Puzzle' GROUP BY T3.publisher_name HAVING COUNT(DISTINCT T1.id) > 3 ) t", "source_tables": ["game", "publisher", "genre", "game_publisher"]}, "evidence": "puzzle refers to genre_name = 'Puzzle'; more than 3 puzzle games refers to count(game_id where genre_name = 'Puzzle') > 3"}
{"sample_id": 3321, "db_id": "video_games", "final": {"question": "Among the games published by Nintendo, what is the percentage of those in the genre of sports?", "sql": "SELECT CAST(COUNT(CASE WHEN T4.genre_name = 'Sports' THEN T1.id ELSE NULL END) AS REAL) * 100/ COUNT(T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T3.publisher_name = 'Nintendo'", "source_tables": ["game", "publisher", "genre", "game_publisher"]}, "evidence": "published by Nintendo refers to publisher_name = 'Nintendo'; in the genre of sports refers to genre_name = 'Sports'; percentage = divide(count(game_id where genre_name = 'Sports'), count(game_id)) * 100% where publisher_name = 'Nintendo'"}
{"sample_id": 3322, "db_id": "video_games", "final": {"question": "How many games were sold on the DS platform on average in the 4 different regions?", "sql": "SELECT SUM(T1.num_sales) * 100000 / 4 FROM region_sales AS T1 INNER JOIN game_platform AS T2 ON T1.game_platform_id = T2.id INNER JOIN platform AS T3 ON T2.platform_id = T3.id WHERE T3.platform_name = 'DS'", "source_tables": ["game_platform", "platform", "region_sales"]}, "evidence": "on the DS platform refers to platform_name = 'DS'; number of games sold on average = divide(sum(multiply(num_sales, 100000)), 4) where platform_name = 'DS'"}
{"sample_id": 3323, "db_id": "video_games", "final": {"question": "Tell the number of games whose publisher id is 352.", "sql": "SELECT DISTINCT T.game_id FROM game_publisher AS T WHERE T.publisher_id = 352", "source_tables": ["game_publisher"]}, "evidence": "number of games refers to count(game_id)"}
{"sample_id": 3324, "db_id": "video_games", "final": {"question": "List the genre id of the game Pro Evolution Soccer 2012.", "sql": "SELECT T.genre_id FROM game AS T WHERE T.game_name = 'Pro Evolution Soccer 2012'", "source_tables": ["game"]}, "evidence": "Pro Evolution Soccer 2012 refers to game_name = 'Pro Evolution Soccer 2012'"}
{"sample_id": 3325, "db_id": "video_games", "final": {"question": "State the region id of Japan.", "sql": "SELECT T.id FROM region AS T WHERE T.region_name = 'Japan'", "source_tables": ["region"]}, "evidence": "region id refers to region.id; Japan refers to region_name = 'Japan'"}
{"sample_id": 3326, "db_id": "video_games", "final": {"question": "Show the id of the game platform with the most sales in region 2.", "sql": "SELECT T1.game_platform_id FROM ( SELECT T.game_platform_id, SUM(T.num_sales) FROM region_sales AS T WHERE T.region_id = 2 GROUP BY T.game_platform_id ORDER BY SUM(T.num_sales) DESC LIMIT 1 ) T1", "source_tables": ["region_sales"]}, "evidence": "id of the game platform refers to game_platform_id; the most sales refers to max(num_sales); region 2 refers to region_id = '2'"}
{"sample_id": 3327, "db_id": "video_games", "final": {"question": "Which genre has the most games? Show its id.", "sql": "SELECT genre_id FROM ( SELECT T.genre_id, COUNT(T.id) FROM game AS T GROUP BY T.genre_id ORDER BY COUNT(T.id) DESC LIMIT 1 )", "source_tables": ["game"]}, "evidence": "the most games refers to max(game_id); genre id refers to genre_id"}
{"sample_id": 3328, "db_id": "video_games", "final": {"question": "What is the id of the game \"Resident Evil Archives: Resident Evil\"?", "sql": "SELECT T.genre_id FROM game AS T WHERE T.game_name = 'Resident Evil Archives: Resident Evil'", "source_tables": ["game"]}, "evidence": "id of game refers to game.id; \"Resident Evil Archives: Resident Evil\" refers to game_name = 'Resident Evil Archives: Resident Evil'"}
{"sample_id": 3329, "db_id": "video_games", "final": {"question": "Show the number of games which were released on X360 in 2010.", "sql": "SELECT COUNT(DISTINCT T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T1.platform_name = 'X360' AND T2.release_year = 2010", "source_tables": ["platform", "game_publisher", "game_platform"]}, "evidence": "on X360 refers to platform_name = 'X360'; in 2010 refers to release_year = '2010'"}
{"sample_id": 3330, "db_id": "video_games", "final": {"question": "State the publisher name of the game \"ModNation Racers\".", "sql": "SELECT T1.publisher_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = 'ModNation Racers'", "source_tables": ["game_publisher", "publisher", "game"]}, "evidence": "game \"ModNation Racers\" refers to game_name = 'ModNation Racers'"}
{"sample_id": 3331, "db_id": "video_games", "final": {"question": "Show the id of game platform which makes the most sales in Japan.", "sql": "SELECT T.game_platform_id FROM ( SELECT T2.game_platform_id, MAX(T2.num_sales) FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Japan' ) t", "source_tables": ["region_sales", "region"]}, "evidence": "id of game platform refers to game_platform_id; the most sales refers to max(num_sales); in Japan refers to region_name = 'Japan'"}
{"sample_id": 3332, "db_id": "video_games", "final": {"question": "How many platforms are available for the game Pro Evolution Soccer 2016?", "sql": "SELECT COUNT(T2.id) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id INNER JOIN game_publisher AS T3 ON T1.game_publisher_id = T3.id INNER JOIN game AS T4 ON T3.game_id = T4.id WHERE T4.game_name = 'Pro Evolution Soccer 2016'", "source_tables": ["game_publisher", "game_platform", "platform", "game"]}, "evidence": "game Pro Evolution Soccer 2016 refers to game_name = 'Pro Evolution Soccer 2016'"}
{"sample_id": 3333, "db_id": "video_games", "final": {"question": "How many games in the database belong to the genre of sports?", "sql": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Sports'", "source_tables": ["game", "genre"]}, "evidence": "the genre of sports refers to genre_name = 'Sports'"}
{"sample_id": 3334, "db_id": "video_games", "final": {"question": "Name of the publisher of the game id 10031.", "sql": "SELECT T2.publisher_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.game_id = 10031", "source_tables": ["publisher", "game_publisher"]}, "evidence": "name of publisher refers to publisher_name; the game id 10031 refers to game_id = '10031'"}
{"sample_id": 3335, "db_id": "video_games", "final": {"question": "State the name of the publisher with the most games.", "sql": "SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T2.publisher_name ORDER BY COUNT(DISTINCT T1.game_id) DESC LIMIT 1 ) t", "source_tables": ["publisher", "game_publisher"]}, "evidence": "name of publisher refers to publisher_name; the most games refers to max(game_id)"}
{"sample_id": 3336, "db_id": "video_games", "final": {"question": "How many more sports games than simulation games?", "sql": "SELECT COUNT(CASE WHEN T1.genre_name = 'Sports' THEN T2.id ELSE NULL END) - COUNT(CASE WHEN T1.genre_name = 'Simulation' THEN T2.id ELSE NULL END) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id", "source_tables": ["game", "genre"]}, "evidence": "sports game refers to genre_name = 'Sports'; simulation game refers to genre_name = 'Simulation'; how many more = subtract(sum(game_id where genre_name = 'Sports'), sum(game_id where genre_name = 'Simulation'))"}
{"sample_id": 3337, "db_id": "video_games", "final": {"question": "Tell the genre of the game \"Resident Evil: Revelations\".", "sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = 'Resident Evil: Revelations'", "source_tables": ["game", "genre"]}, "evidence": "genre refers to genre_name; game \"Resident Evil: Revelations\" refers to game_name = 'Resident Evil: Revelations'"}
{"sample_id": 3338, "db_id": "video_games", "final": {"question": "How many sales does game platform id 3871 make in Europe?", "sql": "SELECT T2.num_sales * 100000 FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Europe' AND T2.game_platform_id = 3871", "source_tables": ["region_sales", "region"]}, "evidence": "number of sales = multiply(num_sales, 100000); in Europe refers to region_name = 'Europe'"}
{"sample_id": 3339, "db_id": "video_games", "final": {"question": "Give the number of games which were published by Ascaron Entertainment GmbH.", "sql": "SELECT COUNT(T2.game_id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id WHERE T1.publisher_name = 'Ascaron Entertainment GmbH'", "source_tables": ["game_publisher", "publisher"]}, "evidence": "published by Ascaron Entertainment GmbH refers to publisher_name = 'Ascaron Entertainment GmbH'"}
{"sample_id": 3340, "db_id": "video_games", "final": {"question": "Show the name of the earliest platform in the database.", "sql": "SELECT T2.platform_name FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id ORDER BY T1.release_year ASC LIMIT 1", "source_tables": ["game_platform", "platform"]}, "evidence": "the earliest refers to min(release_year); name of platform refers to platform_name"}
{"sample_id": 3341, "db_id": "video_games", "final": {"question": "For all the games which were published by Namco Bandai Games, what percentage of them were adventure games?", "sql": "SELECT CAST(COUNT(CASE WHEN T4.genre_name = 'Adventure' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T3.publisher_name = 'Namco Bandai Games'", "source_tables": ["game", "publisher", "genre", "game_publisher"]}, "evidence": "published by Namco Bandai Games refers to publisher_name = 'Namco Bandai Games'; adventure game refers to genre_name = 'Adventure'; percentage = divide(sum(game_id where genre_name = 'Adventure'), count(game_id)) * 100% where publisher_name = 'Namco Bandai Games'"}
{"sample_id": 3342, "db_id": "video_games", "final": {"question": "How many times more is the number of games which were published by Atari than Athena?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.publisher_name = 'Atari' THEN T2.game_id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T1.publisher_name = 'Athena' THEN T2.game_id ELSE NULL END) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id", "source_tables": ["game_publisher", "publisher"]}, "evidence": "published by Atari refers to publisher_name = 'Atari'; published by\u00a0 Athena refers to publisher_name = 'Athena'; times = divide(sum(publisher_id where publisher_name = 'Atari'), sum(publisher_id where publisher_name = 'Athena'))"}
{"sample_id": 3343, "db_id": "video_games", "final": {"question": "How many games did Electronic Arts publish?", "sql": "SELECT COUNT(DISTINCT T2.game_id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id WHERE T1.publisher_name = 'Electronic Arts'", "source_tables": ["game_publisher", "publisher"]}, "evidence": "Electronic Arts refers to publisher_name = 'Electronic Arts'"}
{"sample_id": 3344, "db_id": "video_games", "final": {"question": "What is the genre of the Advent Rising game?", "sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = 'Advent Rising'", "source_tables": ["game", "genre"]}, "evidence": "genre refers to genre_name; Advent Rising game refers to game_name = 'Advent Rising'"}
{"sample_id": 3345, "db_id": "video_games", "final": {"question": "How many role-playing games did Microsoft Game Studios publish?", "sql": "SELECT COUNT(T3.id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Role-Playing' AND T1.publisher_name = 'Microsoft Game Studios'", "source_tables": ["game_publisher", "genre", "publisher", "game"]}, "evidence": "role-playing game refers to genre_name = 'Role-Playing'; Microsoft Game Studios refers to publisher_name = 'Microsoft Game Studios'"}
{"sample_id": 3346, "db_id": "video_games", "final": {"question": "Which publisher published the most games?", "sql": "SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T2.publisher_name ORDER BY COUNT(DISTINCT T1.game_id) DESC LIMIT 1 ) t", "source_tables": ["publisher", "game_publisher"]}, "evidence": "publisher refers to publisher_name; the most games refers to max(count(publisher_id))"}
{"sample_id": 3347, "db_id": "video_games", "final": {"question": "In 2004, what are the names of the platforms where Codemasters publish its games?", "sql": "SELECT T4.platform_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T3.release_year = 2004 AND T1.publisher_name = 'Codemasters'", "source_tables": ["game_publisher", "game_platform", "platform", "publisher"]}, "evidence": "name of platform refers to platform_name; Codemasters refers to publisher_name = 'Codemasters'; in 2004 refers to release_year = 2004"}
{"sample_id": 3348, "db_id": "video_games", "final": {"question": "How many games were released on PS4 in 2014?", "sql": "SELECT COUNT(DISTINCT T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T1.platform_name = 'PS4' AND T2.release_year = 2014", "source_tables": ["platform", "game_publisher", "game_platform"]}, "evidence": "on PS4 refers to platform_name = 'PS4'; in 2014 refers to release_year = 2014"}
{"sample_id": 3349, "db_id": "video_games", "final": {"question": "What are the names of the publishers who published the oldest games?", "sql": "SELECT DISTINCT T3.publisher_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id ORDER BY T1.release_year LIMIT 1", "source_tables": ["publisher", "game_platform", "game_publisher"]}, "evidence": "name of publisher refers to publisher_name; the oldest game refers to min(release_year)"}
{"sample_id": 3350, "db_id": "video_games", "final": {"question": "How many publishers in Japan released a game on X360 in 2011?", "sql": "SELECT COUNT(T3.game_publisher_id) FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T4.platform_name = 'X360' AND T3.release_year = 2011 AND T1.region_name = 'Japan'", "source_tables": ["region_sales", "game_platform", "platform", "region"]}, "evidence": "in Japan refers to region_name = 'Japan'; on X360 refers to platform_name = 'X360'; in 2011 refers to release_year = 2011"}
{"sample_id": 3351, "db_id": "video_games", "final": {"question": "Which game platform is the most popular in Europe?", "sql": "SELECT T.platform_name FROM ( SELECT T4.platform_name, SUM(T2.num_sales) FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.region_name = 'Europe' ORDER BY T2.num_sales DESC LIMIT 1 ) t", "source_tables": ["region_sales", "game_platform", "platform", "region"]}, "evidence": "game platform refers to game_platform_id; the most popular refers to max(num_sales); in Europe refers to region_name = 'Europe'"}
{"sample_id": 3352, "db_id": "video_games", "final": {"question": "Which year has the most number of PC games releases?", "sql": "SELECT T.release_year FROM ( SELECT T2.release_year, COUNT(DISTINCT T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T1.platform_name = 'PC' GROUP BY T2.release_year ORDER BY COUNT(DISTINCT T3.game_id) DESC LIMIT 1 ) t", "source_tables": ["platform", "game_publisher", "game_platform"]}, "evidence": "year refers to release_year; the most number of releases refers to max(count(game_id))"}
{"sample_id": 3353, "db_id": "video_games", "final": {"question": "List the names of all the publishers who published one game only.", "sql": "SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T2.publisher_name HAVING COUNT(DISTINCT T1.game_id) = 1 ) t", "source_tables": ["publisher", "game_publisher"]}, "evidence": "name of publisher refers to publisher_name; published one game only refers to count(publisher_id) = 1"}
{"sample_id": 3354, "db_id": "video_games", "final": {"question": "What are the names of the games that were published by 505 Games?", "sql": "SELECT T3.game_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.publisher_name = '505 Games'", "source_tables": ["game_publisher", "publisher", "game"]}, "evidence": "name of game refers to game_name; published by 505 Games refers to publisher_name = '505 Games'"}
{"sample_id": 3355, "db_id": "video_games", "final": {"question": "What is the genre ID of the game named 25 to Life?", "sql": "SELECT T.genre_id FROM game AS T WHERE T.game_name = '25 to Life'", "source_tables": ["game"]}, "evidence": "the game named 25 to Life refers to game_name = '25 to Life'"}
{"sample_id": 3356, "db_id": "video_games", "final": {"question": "List down the game ID of games with genre ID 2.", "sql": "SELECT T.id FROM game AS T WHERE T.genre_id = 2", "source_tables": ["game"]}, "evidence": "game ID refers to game.id; genre ID 2 refers to genre_id = 2"}
{"sample_id": 3357, "db_id": "video_games", "final": {"question": "Provide the release year of record ID 1 to 10.", "sql": "SELECT T.release_year FROM game_platform AS T WHERE T.id BETWEEN 1 AND 10", "source_tables": ["game_platform"]}, "evidence": "record ID 1 to 10 refers to game.id BETWEEN 1 AND 10"}
{"sample_id": 3358, "db_id": "video_games", "final": {"question": "Give the game publisher ID of records with platform ID 15.", "sql": "SELECT T.game_publisher_id FROM game_platform AS T WHERE T.platform_id = 15", "source_tables": ["game_platform"]}, "evidence": "platform ID 15 refers to platform_id = 15"}
{"sample_id": 3359, "db_id": "video_games", "final": {"question": "List down the record ID of records released between 2000 to 2003.", "sql": "SELECT T.id FROM game_platform AS T WHERE T.release_year BETWEEN 2000 AND 2003", "source_tables": ["game_platform"]}, "evidence": "record ID refers to game.id; released between 2000 to 2003 refers to release_year BETWEEN 2000 AND 2003"}
{"sample_id": 3360, "db_id": "video_games", "final": {"question": "What is the number of sales in region ID 2 with game platform ID 9615?", "sql": "SELECT T.num_sales * 100000 FROM region_sales AS T WHERE T.region_id = 2 AND T.game_platform_id = 9615", "source_tables": ["region_sales"]}, "evidence": "number of sales refers to multiply(num_sales, 100000)"}
{"sample_id": 3361, "db_id": "video_games", "final": {"question": "List down the names of platform where the games released in 2016 can be played on.", "sql": "SELECT DISTINCT T1.platform_name FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id WHERE T2.release_year = 2016", "source_tables": ["platform", "game_platform"]}, "evidence": "name of platform refers to platform_name; released in 2016 refers to release_year = 2016"}
{"sample_id": 3362, "db_id": "video_games", "final": {"question": "When was the game titled 3DS Classic Collection released?", "sql": "SELECT T1.release_year FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = '3DS Classic Collection'", "source_tables": ["game", "game_platform", "game_publisher"]}, "evidence": "when refers to release_year; the game titled 3DS Classic Collection refers to game_name = '3DS Classic Collection'"}
{"sample_id": 3363, "db_id": "video_games", "final": {"question": "What is the average number of sales in Japan?", "sql": "SELECT AVG(T2.num_sales) * 100000 AS avg_japan FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Japan'", "source_tables": ["region_sales", "region"]}, "evidence": "in Japan refers to region_name = 'Japan'; average number of sales = multiply(avg(num_sales), 100000) where region_name = 'Japan'"}
{"sample_id": 3364, "db_id": "video_games", "final": {"question": "Give the genre of the games released from 2000 to 2002.", "sql": "SELECT DISTINCT T4.genre_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T1.release_year BETWEEN 2000 AND 2002", "source_tables": ["game", "genre", "game_platform", "game_publisher"]}, "evidence": "genre refers to genre_name; released from 2000 to 2002 refers to release_year BETWEEN 2000 AND 2002"}
{"sample_id": 3365, "db_id": "video_games", "final": {"question": "List down the name of games published by 3DO.", "sql": "SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T3.publisher_name = '3DO'", "source_tables": ["game", "publisher", "game_publisher"]}, "evidence": "name of game refers to game_name; published by 3DO refers to publisher_name = '3DO'"}
{"sample_id": 3366, "db_id": "video_games", "final": {"question": "How many role-playing games are there?", "sql": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Role-Playing'", "source_tables": ["game", "genre"]}, "evidence": "role-playing game refers to genre_name = 'Role-Playing'"}
{"sample_id": 3367, "db_id": "video_games", "final": {"question": "List the region name where games reached 300000 sales and above.", "sql": "SELECT DISTINCT T1.region_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T2.num_sales * 100000 > 300000", "source_tables": ["region_sales", "region"]}, "evidence": "reached 300000 sales and above refers to num_sales > 3"}
{"sample_id": 3368, "db_id": "video_games", "final": {"question": "Which company published the game with the most sales in North America?", "sql": "SELECT T.publisher_name FROM ( SELECT T5.publisher_name, SUM(T2.num_sales) * 100000 FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN publisher AS T5 ON T4.publisher_id = T5.id WHERE T1.region_name = 'North America' GROUP BY T5.publisher_name ORDER BY SUM(T2.num_sales) * 100000 DESC LIMIT 1 ) t", "source_tables": ["game_publisher", "game_platform", "region_sales", "region", "publisher"]}, "evidence": "company refers to publisher_name; the most sales refers to max(num_sales); in North America refers to region_name = 'North America'"}
{"sample_id": 3369, "db_id": "video_games", "final": {"question": "What is the release year of the game that gained 350000 sales in North America?", "sql": "SELECT T3.release_year FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id WHERE T2.num_sales * 100000 = 350000 AND T1.region_name = 'North America'", "source_tables": ["region_sales", "game_platform", "region"]}, "evidence": "gained 350000 sales refers to num_sales = 3.5; in North America refers to region_name = 'North America'"}
{"sample_id": 3370, "db_id": "video_games", "final": {"question": "In which platform does the game titled 15 Days available?", "sql": "SELECT T1.platform_name FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id INNER JOIN game AS T4 ON T3.game_id = T4.id WHERE T4.game_name = 'Counter Force'", "source_tables": ["game", "platform", "game_publisher", "game_platform"]}, "evidence": "platform refers to platform_name; the game titled 15 Days refers to game_name = '15 Days'"}
{"sample_id": 3371, "db_id": "video_games", "final": {"question": "Give the name of the publisher of the game ID 75.", "sql": "SELECT T2.publisher_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.game_id = 75", "source_tables": ["publisher", "game_publisher"]}, "evidence": "name of publisher refers to publisher_name; the game ID 75 refers to game_id = 75"}
{"sample_id": 3372, "db_id": "video_games", "final": {"question": "What is the title of the game that gained the most sales in Japan?", "sql": "SELECT T.game_name FROM ( SELECT T5.game_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN game AS T5 ON T4.game_id = T5.id WHERE T1.region_name = 'Japan' ORDER BY T2.num_sales DESC LIMIT 1 ) t", "source_tables": ["game_publisher", "game", "game_platform", "region_sales", "region"]}, "evidence": "title of the game refers to game_name; gained the most sales refers to max(num_sales); in Japan refers to region_name = 'Japan'"}
{"sample_id": 3373, "db_id": "video_games", "final": {"question": "Provide the game publisher's name of the game with sales greater than 90% of the average sales in Japan.", "sql": "SELECT DISTINCT T5.publisher_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN publisher AS T5 ON T4.publisher_id = T5.id WHERE T2.num_sales * 10000000 > ( SELECT AVG(T2.num_sales) * 100000 * 90 FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Japan' )", "source_tables": ["game_publisher", "game_platform", "region_sales", "region", "publisher"]}, "evidence": "game publisher's name refers to publisher_name; sales greater than 90% of the average sales refers to num_sales > multiply(0.9, avg(num_sales)); in Japan refers to region_name = 'Japan'"}
{"sample_id": 3374, "db_id": "video_games", "final": {"question": "Among the games released in 2004, what is the percentage of games on PSP?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.platform_name = 'PSP' THEN T3.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T2.release_year = 2004", "source_tables": ["platform", "game_publisher", "game_platform"]}, "evidence": "in 2004 refers to release_year = 2004; on PSP refers to platform_name = 'PSP'; percentage = divide(sum(platform_id where platform_name = 'PSP'), count(platform_id)) * 100% where release_year = 2004"}
{"sample_id": 3375, "db_id": "video_games", "final": {"question": "How many games were released in 1981?", "sql": "SELECT COUNT(T.id) FROM game_platform AS T WHERE T.release_year = 1981", "source_tables": ["game_platform"]}, "evidence": "released in 1981 refers to release_year = 1981"}
{"sample_id": 3376, "db_id": "video_games", "final": {"question": "What is the genre ID of the '2Xtreme' game?", "sql": "SELECT T.genre_id FROM game AS T WHERE T.game_name = '2Xtreme'", "source_tables": ["game"]}, "evidence": "the '2Xtreme' game refers to game_name = '2Xtreme'"}
{"sample_id": 3377, "db_id": "video_games", "final": {"question": "Sum the total game sales in every region for platform ID 9658.", "sql": "SELECT SUM(T.num_sales) * 100000 FROM region_sales AS T WHERE T.game_platform_id = 9658", "source_tables": ["region_sales"]}, "evidence": "total game sales refers to multiply(sum(num_sales), 100000); platform ID 9658 refers to game_platform_id = 9658"}
{"sample_id": 3378, "db_id": "video_games", "final": {"question": "Provide the ID of 1C Company.", "sql": "SELECT T.id FROM publisher AS T WHERE T.publisher_name = '1C Company'", "source_tables": ["publisher"]}, "evidence": "ID refers to publisher.id; 1C Company refers to publisher_name = '1C Company'"}
{"sample_id": 3379, "db_id": "video_games", "final": {"question": "Provide the genre name of the genre ID 3.", "sql": "SELECT T.genre_name FROM genre AS T WHERE T.id = 3", "source_tables": ["genre"]}, "evidence": "genre ID 3 refers to genre.id = 3"}
{"sample_id": 3380, "db_id": "video_games", "final": {"question": "List the game IDs that were released in 2017.", "sql": "SELECT T.id FROM game_platform AS T WHERE T.release_year = 2017", "source_tables": ["game_platform"]}, "evidence": "game ID refers to game.id; released in 2017 refers to release_year = 2017"}
{"sample_id": 3381, "db_id": "video_games", "final": {"question": "When was the \"Adventure Island\" game released?", "sql": "SELECT T3.release_year FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id WHERE T1.game_name = 'Adventure Island'", "source_tables": ["game", "game_platform", "game_publisher"]}, "evidence": "when refers to release_year; the \"Adventure Island\" game refers to game_name = 'Adventure Island'"}
{"sample_id": 3382, "db_id": "video_games", "final": {"question": "How many games are puzzle genre?", "sql": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Puzzle'", "source_tables": ["game", "genre"]}, "evidence": "puzzle genre refers to genre_name = 'Puzzle'"}
{"sample_id": 3383, "db_id": "video_games", "final": {"question": "Provide the games that can be played on the SCD platform.", "sql": "SELECT T4.game_name FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id INNER JOIN game_publisher AS T3 ON T1.game_publisher_id = T3.id INNER JOIN game AS T4 ON T3.game_id = T4.id WHERE T2.platform_name = 'SCD'", "source_tables": ["game_publisher", "game_platform", "platform", "game"]}, "evidence": "game refers to game_name; on the SCD platform refers to platform_name = 'SCD'"}
{"sample_id": 3384, "db_id": "video_games", "final": {"question": "How many games were published by Acclaim Entertainment?", "sql": "SELECT COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Acclaim Entertainment'", "source_tables": ["publisher", "game_publisher"]}, "evidence": "published by Acclaim Entertainment refers to publisher_name = 'Acclaim Entertainment'"}
{"sample_id": 3385, "db_id": "video_games", "final": {"question": "Name the publisher of the Chronicles of the Sword game.", "sql": "SELECT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = 'Chronicles of the Sword'", "source_tables": ["game", "publisher", "game_publisher"]}, "evidence": "publisher refers to publisher_name; the Chronicles of the Sword game refers to game_name = 'Chronicles of the Sword'"}
{"sample_id": 3386, "db_id": "video_games", "final": {"question": "Provide the number of games sold in North America on the PS4 platform.", "sql": "SELECT SUM(T1.num_sales * 100000) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id INNER JOIN game_platform AS T3 ON T1.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T2.region_name = 'North America' AND T4.platform_name = 'PS4'", "source_tables": ["region", "game_platform", "platform", "region_sales"]}, "evidence": "number of games sold refers to sum(multiply(num_sales, 100000)); in North America refers to region_name = 'North America'; on the PS4 platform refers to platform_name = 'PS4'"}
{"sample_id": 3387, "db_id": "video_games", "final": {"question": "Provide the ID of the most popular platform in Europe.", "sql": "SELECT T.game_platform_id FROM ( SELECT T1.game_platform_id, SUM(T1.num_sales) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id WHERE T2.region_name = 'Europe' GROUP BY T1.game_platform_id ORDER BY SUM(T1.num_sales) DESC LIMIT 1 ) t", "source_tables": ["region", "region_sales"]}, "evidence": "ID refers to game_platform_id; the most popular refers to max(num_sales); in Europe refers to region_name = 'Europe'"}
{"sample_id": 3388, "db_id": "video_games", "final": {"question": "Name the game released in 2011.", "sql": "SELECT T3.game_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.release_year = 2011", "source_tables": ["game", "game_platform", "game_publisher"]}, "evidence": "game refers to game_name; released in 2011 refers to release_year = 2011"}
{"sample_id": 3389, "db_id": "video_games", "final": {"question": "How many games can be played on the Wii platform?", "sql": "SELECT COUNT(T1.id) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id WHERE T2.platform_name = 'Wii'", "source_tables": ["game_platform", "platform"]}, "evidence": "on the Wii platform refers to platform_name = 'Wii'"}
{"sample_id": 3390, "db_id": "video_games", "final": {"question": "Provide any five games and release year under the sports genre.", "sql": "SELECT T3.game_name, T1.release_year FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Sports' LIMIT 5", "source_tables": ["game", "genre", "game_platform", "game_publisher"]}, "evidence": "game refers to game_name; under the sports genre refers to genre_name = 'Sports'"}
{"sample_id": 3391, "db_id": "video_games", "final": {"question": "Mention the genre of the 2Xtreme.", "sql": "SELECT T2.id FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '2Xtreme'", "source_tables": ["game", "genre"]}, "evidence": "genre refers to genre_name; the 2Xtreme game refers to game_name = '2Xtreme'"}
{"sample_id": 3392, "db_id": "video_games", "final": {"question": "Provide the platform where the Panzer Tactics can be played.", "sql": "SELECT T4.platform_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.game_name = 'Panzer Tactics'", "source_tables": ["game", "game_platform", "platform", "game_publisher"]}, "evidence": "platform refers to platform_name; the Panzer Tactics is a game name."}
{"sample_id": 3393, "db_id": "video_games", "final": {"question": "Calculate how many percent of sales in North America is higher than the average sale per region for platform ID 9577.", "sql": "SELECT (SUM(CASE WHEN T2.region_name = 'North America' THEN T1.num_sales ELSE 0 END) - AVG(T1.num_sales)) * 100.0 / AVG(T1.num_sales) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id WHERE T1.game_platform_id = 9577", "source_tables": ["region", "region_sales"]}, "evidence": "in North America refers to region_name = 'North America'; platform ID 9577 refers to game_platform_id = 9577; percent = divide(subtract(num_sales where region_name = 'North America' and game_platform_id = 9577, avg(num_sales)), avg(num_sales)) * 100%"}
{"sample_id": 3394, "db_id": "video_games", "final": {"question": "Which game has the longest name?", "sql": "SELECT T.game_name FROM game AS T ORDER BY LENGTH(T.game_name) DESC LIMIT 1", "source_tables": ["game"]}, "evidence": "game refers to game_name; the longest name refers to max(length(game_name))"}
{"sample_id": 3395, "db_id": "video_games", "final": {"question": "How many games were released in 2001?", "sql": "SELECT COUNT(T.id) FROM game_platform AS T WHERE T.release_year = 2001", "source_tables": ["game_platform"]}, "evidence": "released in 2001 refers to release_year = 2001"}
{"sample_id": 3396, "db_id": "video_games", "final": {"question": "What is the total number of sales across all regions?", "sql": "SELECT SUM(T.num_sales) * 100000 FROM region_sales t", "source_tables": ["region_sales"]}, "evidence": "total number of sales = sum(num_sales)"}
{"sample_id": 3397, "db_id": "video_games", "final": {"question": "What is the average number of games published by a publisher?", "sql": "SELECT CAST(COUNT(T.game_id) AS REAL) / COUNT(DISTINCT T.publisher_id) FROM game_publisher AS T", "source_tables": ["game_publisher"]}, "evidence": "average number = divide(count(game_id), count(publisher_id))"}
{"sample_id": 3398, "db_id": "video_games", "final": {"question": "What is the first year a game is released?", "sql": "SELECT MIN(T.release_year) FROM game_platform t", "source_tables": ["game_platform"]}, "evidence": "the first year refers to min(release_year)"}
{"sample_id": 3399, "db_id": "video_games", "final": {"question": "What is the least common game genre?", "sql": "SELECT T.game_name FROM ( SELECT T2.game_name, COUNT(T2.id) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id GROUP BY T2.game_name ORDER BY COUNT(T2.id) ASC LIMIT 1 ) t", "source_tables": ["game", "genre"]}, "evidence": "the least common game genre refers to min(count(genre_id)); genre refers to genre_name"}
{"sample_id": 3400, "db_id": "video_games", "final": {"question": "Which is the publisher for the game \"Prism: Light the Way\"?", "sql": "SELECT T1.publisher_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = 'Prism: Light the Way'", "source_tables": ["game_publisher", "publisher", "game"]}, "evidence": "publisher refers to publisher_name; game \"Prism: Light the Way\" refers to game_name = 'Prism: Light the Way'"}
{"sample_id": 3401, "db_id": "video_games", "final": {"question": "List the platforms that release the most games each year.", "sql": "SELECT T1.platform_name FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id GROUP BY T2.release_year, T1.platform_name ORDER BY COUNT(DISTINCT T3.game_id) DESC", "source_tables": ["platform", "game_publisher", "game_platform"]}, "evidence": "platform refers to platform_id; the most games refers to max(count(game_publisher_id))"}
{"sample_id": 3402, "db_id": "video_games", "final": {"question": "How many games do not have any sales in Europe?", "sql": "SELECT COUNT(*) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id WHERE T2.region_name = 'Europe' AND T1.num_sales = 0", "source_tables": ["region", "region_sales"]}, "evidence": "do not have any sales refers to num_sales = 0; in Europe refers to region_name = 'Europe'"}
{"sample_id": 3403, "db_id": "video_games", "final": {"question": "What are the games that were released in 2006?", "sql": "SELECT T3.game_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.release_year = 2006", "source_tables": ["game", "game_platform", "game_publisher"]}, "evidence": "game refers to game_name; released in 2006 refers to release_year = 2006"}
{"sample_id": 3404, "db_id": "video_games", "final": {"question": "What is the genre of the game \"Mario vs. Donkey Kong\"?", "sql": "SELECT T1.genre_name FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id WHERE T2.game_name = 'Mario vs. Donkey Kong'", "source_tables": ["game", "genre"]}, "evidence": "genre refers to genre_name; game \"Mario vs. Donkey Kong\" refers to game_name = 'Mario vs. Donkey Kong'"}
{"sample_id": 3405, "db_id": "video_games", "final": {"question": "Which publisher published the most games?", "sql": "SELECT T.publisher_name FROM ( SELECT T1.publisher_name, COUNT(DISTINCT T2.game_id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id GROUP BY T1.publisher_name ORDER BY COUNT(DISTINCT T2.game_id) DESC LIMIT 1 ) t", "source_tables": ["game_publisher", "publisher"]}, "evidence": "publisher refers to publisher_name; the most games refers to max(count(game_id))"}
{"sample_id": 3406, "db_id": "video_games", "final": {"question": "List all the platform games.", "sql": "SELECT T2.game_name FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id WHERE T1.genre_name = 'Platform'", "source_tables": ["game", "genre"]}, "evidence": "platform game refers to genre_name = 'Platform'; game refers to game_name"}
{"sample_id": 3407, "db_id": "video_games", "final": {"question": "What are the years that \"WiiU\" got a new game?", "sql": "SELECT T2.release_year FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id WHERE T1.platform_name = 'WiiU' ORDER BY T2.release_year DESC LIMIT 1", "source_tables": ["platform", "game_platform"]}, "evidence": "year refers to release_year; \"WiiU\" refers to platform_name = 'WiiU'"}
{"sample_id": 3408, "db_id": "video_games", "final": {"question": "Which game has the most sales in Japan?", "sql": "SELECT T5.game_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN game AS T5 ON T4.game_id = T5.id WHERE T1.region_name = 'Japan' ORDER BY T2.num_sales DESC LIMIT 1", "source_tables": ["game_publisher", "game", "game_platform", "region_sales", "region"]}, "evidence": "\nwhich game refers to game_name; most sales refers to MAX(num_sales); Japan refers to region_name = 'Japan';"}
{"sample_id": 3409, "db_id": "video_games", "final": {"question": "List the games from the publisher \"Activision\".", "sql": "SELECT T3.game_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.publisher_name = 'Activision'", "source_tables": ["game_publisher", "publisher", "game"]}, "evidence": "games refers to game_name; \"Activision\" refers to publisher_name = 'Activision';"}
{"sample_id": 3410, "db_id": "video_games", "final": {"question": "How many different publishers have published a game that starts with \"Marvel\"?", "sql": "SELECT COUNT(DISTINCT T1.publisher_id) FROM game_publisher AS T1 INNER JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.game_name LIKE 'Marvel%'", "source_tables": ["game", "game_publisher"]}, "evidence": "game that starts with \"Marvel\" refers to game_name LIKE 'Marvel%';"}
{"sample_id": 3411, "db_id": "video_games", "final": {"question": "What percentage of games are sports?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.genre_name = 'Sports' THEN T2.id ELSE NULL END) AS REAL) * 100 / COUNT(T2.id) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id", "source_tables": ["game", "genre"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(genre_name = 'sport'), COUNT(game_name)), 100.0); sports refers to genre_name = 'sport';"}
{"sample_id": 3412, "db_id": "video_games", "final": {"question": "What is the ratio of game sales between North America and Japan?", "sql": "SELECT SUM(CASE WHEN T2.region_name = 'North America' THEN T1.num_sales ELSE 0 END) / SUM(CASE WHEN T2.region_name = 'Japan' THEN T1.num_sales ELSE 0 END) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id", "source_tables": ["region", "region_sales"]}, "evidence": "ratio = DIVIDE(SUM(num_sales WHERE region_name = 'North America'), SUM(num_sales WHERE region_name = 'Japan')); North America refers to region_name = 'North America'; Japan refers to region_name = 'Japan';"}
{"sample_id": 3413, "db_id": "video_games", "final": {"question": "Which year has the most number of video game releases?", "sql": "SELECT T1.release_year FROM ( SELECT T.release_year, COUNT(id) FROM game_platform AS T GROUP BY T.release_year ORDER BY COUNT(T.id) DESC LIMIT 1 ) T1", "source_tables": ["game_platform"]}, "evidence": "year that has the most number of video game releases refers to MAX(COUNT(release_year));"}
{"sample_id": 3414, "db_id": "video_games", "final": {"question": "How many video game publishers have Interactive in their names?", "sql": "SELECT COUNT(T.id) FROM publisher AS T WHERE T.publisher_name LIKE '%Interactive%'", "source_tables": ["publisher"]}, "evidence": "publishers that have Interactive in their names refers to publisher_name LIKE '%Interactive%';"}
{"sample_id": 3415, "db_id": "video_games", "final": {"question": "What are the top 2 platforms with the most sales in North America?", "sql": "SELECT T4.platform_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.region_name = 'North America' ORDER BY T2.num_sales DESC LIMIT 2", "source_tables": ["region_sales", "game_platform", "platform", "region"]}, "evidence": "platforms refers to platform_name; most sales refers to MAX(num_sales); North America refers to region_name = 'North America';"}
{"sample_id": 3416, "db_id": "video_games", "final": {"question": "How many games did BMG Interactive Entertainment release in 2012?", "sql": "SELECT COUNT(DISTINCT T2.game_id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id WHERE T3.release_year = 2012", "source_tables": ["game_publisher", "game_platform", "publisher"]}, "evidence": "BMG Interactive Entertainment refers to publisher_name = 'BMG Interactive Entertainment'; release in 2012 refers to release_year = 2012;"}
{"sample_id": 3417, "db_id": "video_games", "final": {"question": "What is the name of the publisher that released the most video games in 2007?", "sql": "SELECT T3.publisher_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.release_year = 2007 GROUP BY T3.publisher_name ORDER BY COUNT(DISTINCT T2.game_id) DESC LIMIT 1", "source_tables": ["publisher", "game_platform", "game_publisher"]}, "evidence": "name of the publisher refers to publisher_name; publisher that released the most video games in 2007 refers to MAX(COUNT(publisher_name)) WHERE release_year = 2007;"}
{"sample_id": 3418, "db_id": "video_games", "final": {"question": "How many publishers published the Minecraft game?", "sql": "SELECT COUNT(T2.publisher_id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id WHERE T1.game_name = 'Minecraft'", "source_tables": ["game", "game_publisher"]}, "evidence": "Minecraft refers to game_name = 'Minecraft';"}
{"sample_id": 3419, "db_id": "video_games", "final": {"question": "Which publisher has published the most number of Action games?", "sql": "SELECT T.publisher_name FROM ( SELECT T4.publisher_name, COUNT(DISTINCT T2.id) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id INNER JOIN game_publisher AS T3 ON T2.id = T3.game_id INNER JOIN publisher AS T4 ON T3.publisher_id = T4.id WHERE T1.genre_name = 'Action' GROUP BY T4.publisher_name ORDER BY COUNT(DISTINCT T2.id) DESC LIMIT 1 ) t", "source_tables": ["game", "genre", "publisher", "game_publisher"]}, "evidence": "which publisher refers to publisher_name; publisher that has published the most number of Action games refers to MAX(COUNT(publisher_name)) WHERE genre_name = 'Action'; Action games refers to game_name WHERE genre_name = 'Action';"}
{"sample_id": 3420, "db_id": "video_games", "final": {"question": "How many Sports games did Nintendo publish?", "sql": "SELECT COUNT(T3.id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Sports' AND T1.publisher_name = 'Nintendo'", "source_tables": ["game_publisher", "genre", "publisher", "game"]}, "evidence": "Sports games refers to game_name WHERE genre_name = 'Sports'; Nintendo refers to publisher_name = 'Nintendo';"}
{"sample_id": 3421, "db_id": "video_games", "final": {"question": "What is the genre of the game '2 Games in 1: Sonic Advance & ChuChu Rocket!'?", "sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '2 Games in 1: Sonic Advance & ChuChu Rocket!'", "source_tables": ["game", "genre"]}, "evidence": "genre refers to genre_name; '2 Games in 1: Sonic Advance & ChuChu Rocket!' is a game name;"}
{"sample_id": 3422, "db_id": "video_games", "final": {"question": "How many times did other regions make positive sales in DS platform?", "sql": "SELECT COUNT(DISTINCT T2.id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN region_sales AS T3 ON T1.id = T3.game_platform_id INNER JOIN region AS T4 ON T3.region_id = T4.id WHERE T1.platform_name = 'DS' AND T4.region_name = 'Other' AND T3.num_sales > 0", "source_tables": ["region", "platform", "region_sales", "game_platform"]}, "evidence": "other regions refers to region_name = 'Other'; positive sales refers to num_sales > 0; DS platform refers to platform_name = 'DS';"}
{"sample_id": 3423, "db_id": "video_games", "final": {"question": "What are the names of the games published by American Softworks?", "sql": "SELECT T3.game_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.publisher_name = 'American Softworks'", "source_tables": ["game_publisher", "publisher", "game"]}, "evidence": "names of the games refers to game_name; American Softworks refers to publisher_name = 'American Softworks';"}
{"sample_id": 3424, "db_id": "video_games", "final": {"question": "How many strategy games are there?", "sql": "SELECT COUNT(CASE WHEN T1.genre_name = 'Strategy' THEN T2.id ELSE NULL END) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id", "source_tables": ["game", "genre"]}, "evidence": "strategy games refers game_name WHERE genre_name = 'Strategy';"}
{"sample_id": 3425, "db_id": "video_games", "final": {"question": "Which publisher published Overwatch?", "sql": "SELECT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = 'Overwatch'", "source_tables": ["game", "publisher", "game_publisher"]}, "evidence": "which publisher refers to publisher_name; Overwatch refers to game_name = 'Overwatch';"}
{"sample_id": 3426, "db_id": "video_games", "final": {"question": "What is the name of the genre with the most number of video games?", "sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T2.id = T1.genre_id GROUP BY T2.genre_name ORDER BY COUNT(T1.genre_id) DESC LIMIT 1", "source_tables": ["game", "genre"]}, "evidence": "name of the genre refers to genre_name; genre with the most number of video games refers to MAX(COUNT(genre_name));"}
{"sample_id": 3508, "db_id": "authors", "final": {"question": "How many authors are affiliated with University of California Berkeley?", "sql": "SELECT COUNT(Id) FROM Author WHERE Affiliation = 'University of California Berkeley'", "source_tables": ["author"]}, "evidence": "affiliated refers to Affiliation; 'University of California Berkeley' is the Affiliation"}
{"sample_id": 3509, "db_id": "authors", "final": {"question": "What is the paper \"Stitching videos streamed by mobile phones in real-time\" about?", "sql": "SELECT Keyword FROM Paper WHERE Title = 'Stitching videos streamed by mobile phones in real-time'", "source_tables": ["paper"]}, "evidence": "\"Stitching videos streamed by mobile phones in real-time\" is the Title of paper; what the paper is about refers to Keywords"}
{"sample_id": 3510, "db_id": "authors", "final": {"question": "Please list the titles of the papers published in the journal \"Concepts in Magnetic Resonance Part A\" in 2008.", "sql": "SELECT T2.Title FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Concepts in Magnetic Resonance Part A' AND T2.Year = 2008", "source_tables": ["paper", "journal"]}, "evidence": "journal \"Concepts in Magnetic Resonance Part A\" refers to FullName = 'Concepts in Magnetic Resonance Part A'; in 2018 refers to Year = 2018"}
{"sample_id": 3511, "db_id": "authors", "final": {"question": "How many papers were published in the journal \"Concepts in Magnetic Resonance Part A\"?", "sql": "SELECT COUNT(T2.Id) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Concepts in Magnetic Resonance Part A'", "source_tables": ["paper", "journal"]}, "evidence": "journal \"Concepts in Magnetic Resonance Part A\" refers to FullName = 'Concepts in Magnetic Resonance Part A'"}
{"sample_id": 3512, "db_id": "authors", "final": {"question": "What is the url of the journal in which the paper \"Area Effects in Cepaea\" was published?", "sql": "SELECT T1.HomePage FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Title = 'Area Effects in Cepaea'", "source_tables": ["paper", "journal"]}, "evidence": "url refers to HomePage; 'Area Effects in Cepaea' is the Title of paper"}
{"sample_id": 3513, "db_id": "authors", "final": {"question": "Among the papers published in the journal \"Molecular Brain\", how many of them were published in the year 2011?", "sql": "SELECT COUNT(T2.Id) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Year = 2011 AND T1.FullName = 'Molecular Brain'", "source_tables": ["paper", "journal"]}, "evidence": "\"Molecular Brain\" is the FullName of journal"}
{"sample_id": 3514, "db_id": "authors", "final": {"question": "How many papers were published in 2011 in the journal whose short name is \"Mol Brain\"?", "sql": "SELECT COUNT(T2.Id) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Year = 2011 AND T1.ShortName = 'Mol Brain'", "source_tables": ["paper", "journal"]}, "evidence": "in 2011 refers to Year = 2011; 'Mol Brain' is the ShortName of journal"}
{"sample_id": 3515, "db_id": "authors", "final": {"question": "How many authors does the paper \"Equation Solving in Geometrical Theories\" have?", "sql": "SELECT COUNT(T1.AuthorId) FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title = 'Equation Solving in Geometrical Theories'", "source_tables": ["paper", "paperauthor"]}, "evidence": "\"Equation Solving in Geometrical Theories\" is the title of paper"}
{"sample_id": 3516, "db_id": "authors", "final": {"question": "Please list the names of the authors of the paper \"Area Effects in Cepaea\".", "sql": "SELECT T1.Name FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title = 'Area Effects in Cepaea'", "source_tables": ["paper", "paperauthor"]}, "evidence": "\"Area Effects in Cepaea\" is the title of paper"}
{"sample_id": 3517, "db_id": "authors", "final": {"question": "Among the authors of the paper \"Stitching videos streamed by mobile phones in real-time\", how many of them are affiliated with Cairo Microsoft Innovation Lab?", "sql": "SELECT COUNT(T1.AuthorId) FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Affiliation = 'University of Tokyo' AND T2.Title = 'FIBER: A Generalized Framework for Auto-tuning Software'", "source_tables": ["paper", "paperauthor"]}, "evidence": "\"FIBER: A Generalized Framework for Auto-tuning Software\" is the Title of paper; affiliated refers to Affiliation;\u00a0 University of Tokyo is the affiliation organization"}
{"sample_id": 3518, "db_id": "authors", "final": {"question": "Please list the titles of the paper whose authors include Klaus Zimmermann.", "sql": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Name = 'Klaus Zimmermann'", "source_tables": ["paper", "paperauthor"]}, "evidence": "\"Klaus Zimmermann\" is the name of author"}
{"sample_id": 3519, "db_id": "authors", "final": {"question": "Which author of the paper \"Incremental Extraction of Keyterms for Classifying Multilingual Documents in the Web\" is affiliated with National Taiwan University Department of Computer Science and Information Engineering Taiwan?", "sql": "SELECT T1.Name FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title = 'Incremental Extraction of Keyterms for Classifying Multilingual Documents in the Web' AND T1.Affiliation = 'National Taiwan University Department of Computer Science and Information Engineering Taiwan'", "source_tables": ["paper", "paperauthor"]}, "evidence": "\"Incremental Extraction of Keyterms for Classifying Multilingual Documents in the Web\" is the title of paper; affiliated with refers to Affiliation; \"National Taiwan University Department of Computer Science and Information Engineering Taiwan\" is the Affiliation organization"}
{"sample_id": 3520, "db_id": "authors", "final": {"question": "What is the title of the paper published in 1995 and whose author included Thomas Wiegand?", "sql": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Name = 'Thomas Wiegand' AND T2.Year = 1995", "source_tables": ["paper", "paperauthor"]}, "evidence": "published in 1995 refers to Year = 1995; 'Thomas Wiegand' is the name of author"}
{"sample_id": 3521, "db_id": "authors", "final": {"question": "How many papers whose authors include Thomas Wiegand were published in 1995?", "sql": "SELECT COUNT(T2.Title) FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Name = 'Thomas Wiegand' AND T2.Year = 1995", "source_tables": ["paper", "paperauthor"]}, "evidence": "published in 1995 refers to Year = 1995; 'Thomas Wiegand' is the name of author"}
{"sample_id": 3522, "db_id": "authors", "final": {"question": "What is the average number of papers published in the journal \"Molecular Brain\" every year from 2008 to 2011?", "sql": "SELECT CAST(COUNT(T2.Id) AS REAL) / COUNT(DISTINCT T2.Year) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Molecular Brain' AND T2.Year BETWEEN 2008 AND 2011", "source_tables": ["paper", "journal"]}, "evidence": "\"Molecular Brain\" is the FullName of journal; year from 2008 to 2011 refers to Year BETWEEN 2008 AND 2011; average = Divide (Count(Id),4)"}
{"sample_id": 3523, "db_id": "authors", "final": {"question": "How many more papers in total were published in the journal \"Cases Journal\" than in the journal \"Molecular Brain\" in percentage?", "sql": "SELECT SUM(CASE WHEN T1.FullName = 'Cases Journal' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.FullName = 'Molecular Brain' THEN 1 ELSE 0 END) AS DIFF FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId", "source_tables": ["paper", "journal"]}, "evidence": "\"Cases Journal\" and \"Molecular Brain\" are FullName of journal; more paper in percentage = Subtract(Count(Id(FullName = 'Cases Journal')), Count(Id(FullName = 'Molecular Brain')))/ Count(Id(FullNmae = 'Molecular Brain')) * 100"}
{"sample_id": 3524, "db_id": "authors", "final": {"question": "How many journals have a word \"computing\" in its full name?", "sql": "SELECT COUNT(Id) FROM Journal WHERE FullName LIKE '%computing%'", "source_tables": ["journal"]}, "evidence": "word computing refers to FullName LIKE '%computing%'"}
{"sample_id": 3525, "db_id": "authors", "final": {"question": "Enumerate the paper and author ID of authors with affiliation with Cairo Microsoft Innovation Lab.", "sql": "SELECT PaperId, AuthorId FROM PaperAuthor WHERE Affiliation LIKE 'Cairo Microsoft Innovation Lab%'", "source_tables": ["paperauthor"]}, "evidence": "\"Cairo Microsoft Innovation Lab\" is the Affiliation organization"}
{"sample_id": 3526, "db_id": "authors", "final": {"question": "What is the short name and full name of conference uses the homepage \"http://www.informatik.uni-trier.de/~ley/db/conf/ices/index.html\"?", "sql": "SELECT ShortName, FullName FROM Conference WHERE HomePage = 'http://www.informatik.uni-trier.de/~ley/db/conf/ices/index.html'", "source_tables": ["conference"]}, "evidence": ""}
{"sample_id": 3527, "db_id": "authors", "final": {"question": "List down the author ID of authors with a name of \"Peter\".", "sql": "SELECT AuthorId FROM PaperAuthor WHERE Name = 'Peter'", "source_tables": ["paperauthor"]}, "evidence": "\"Peter\" is the name of author"}
{"sample_id": 3528, "db_id": "authors", "final": {"question": "List the title of papers with a conference ID from 160 to 170, include their conference short name.", "sql": "SELECT DISTINCT T1.Title, T2.ShortName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.ConferenceId BETWEEN 160 AND 170", "source_tables": ["paper", "conference"]}, "evidence": "conference ID from 160 to 170 refers to ConferenceId BETWEEN 160 AND 170"}
{"sample_id": 3529, "db_id": "authors", "final": {"question": "What is the title and journal homepage of the latest published paper?", "sql": "SELECT T1.Title, T2.HomePage FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id ORDER BY T1.Year DESC LIMIT 1", "source_tables": ["paper", "journal"]}, "evidence": "latest published paper refers to Max(Year)"}
{"sample_id": 3530, "db_id": "authors", "final": {"question": "In year 1999, list the titles and conference's short name of paper authored by someone named \"Philip\".", "sql": "SELECT T1.Title, T3.ShortName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Conference AS T3 ON T1.ConferenceId = T3.Id WHERE T1.Year = 1999 AND T2.Name LIKE 'Philip%'", "source_tables": ["paper", "conference", "paperauthor"]}, "evidence": "in year 1999 refers to Year = 1999;\u00a0 someone named \"Philip\" refers to Name LIKE 'Philip%'"}
{"sample_id": 3531, "db_id": "authors", "final": {"question": "What is the total number and conference's homepage of papers held in a conference with an ID of 187 during 1990 to 2000?", "sql": "SELECT COUNT(T2.ConferenceId), T1.HomePage FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T2.Year BETWEEN 1990 AND 2000 AND T2.ConferenceId = 187", "source_tables": ["paper", "conference"]}, "evidence": "Id of 187 refers to ConferenceId = 187; during 1990 to 2000 refers to Year BETWEEN 1990 and 2000; total number of conference refers to Count(ConferenceId = 187)"}
{"sample_id": 3532, "db_id": "authors", "final": {"question": "What is the title of the paper published in 2003 by an author with affiliation with Department of Network Science, Graduate School of Information Systems, The University of Electro-Communications?", "sql": "SELECT DISTINCT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Affiliation = 'Department of Network Science, Graduate School of Information Systems, The University of Electro-Communications' AND T2.Year = 2003", "source_tables": ["paper", "paperauthor"]}, "evidence": "published in 2003 refers to Year = 2003; 'Department of Network Science, Graduate School of Information Systems, The University of Electro-Communications' is the Affiliation organization"}
{"sample_id": 3533, "db_id": "authors", "final": {"question": "List the authors and journal short name of the papers with \"chemiluminescence\" in its title and has a journal ID from 245 to 250.", "sql": "SELECT T2.Name, T3.ShortName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T1.JournalId BETWEEN 245 AND 250 AND T1.Title LIKE '%chemiluminescence%'", "source_tables": ["paper", "paperauthor", "journal"]}, "evidence": "with \"chemiluminescence\" in its title refers to Title LIKE 'chemiluminescence%'; journal ID from 245 to 250 refers to JournalId BETWEEN 245 AND 250"}
{"sample_id": 3534, "db_id": "authors", "final": {"question": "Among the papers with conference ID of 0, list down the authors of papers with a journal ID less than 100.", "sql": "SELECT DISTINCT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.ConferenceId = 0 AND T1.JournalId < 100", "source_tables": ["paper", "paperauthor"]}, "evidence": "Conference ID of 0 refers to ConferenceId = 0; journal ID of less than 100 refers to JournalId < 100"}
{"sample_id": 3535, "db_id": "authors", "final": {"question": "What is the title and author ID of paper with conference ID less than 100 in year 2006?", "sql": "SELECT DISTINCT T1.Title, T2.AuthorId FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Year = 2006 AND T1.ConferenceId < 100", "source_tables": ["paper", "paperauthor"]}, "evidence": "conference ID less than 100 refers to ConferenceId < 100; in year 2006 refers to Year = 2006"}
{"sample_id": 3536, "db_id": "authors", "final": {"question": "What are the paper IDs of papers presented in conferences has a homepage starts with \"http://www.informatik.uni-trier.de/~ley/db/conf/\"?", "sql": "SELECT T1.Id FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.HomePage LIKE 'http://www.informatik.uni-trier.de/~ley/db/conf/%'", "source_tables": ["paper", "conference"]}, "evidence": "homepage starts with \"http://www.informatik.uni-trier.de/~ley/db/conf/\" refers to HomePage LIKE 'http://www.informatik.uni-trier.de/~ley/db/conf/%'"}
{"sample_id": 3537, "db_id": "authors", "final": {"question": "What are the journal homepages and author ID of the papers published in 2000 to 2005 with a word \"social\" in its title?", "sql": "SELECT T3.HomePage, T2.AuthorId FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T1.Year BETWEEN 2000 AND 2005 AND T1.Title LIKE '%SOCIAL%'", "source_tables": ["paper", "paperauthor", "journal"]}, "evidence": "in 2000 to 2005 refers to Year BETWEEN 2000 AND 2005; a word \"social\" in its title refers to Title = '%SOCIAL%'"}
{"sample_id": 3538, "db_id": "authors", "final": {"question": "What is the author ID and their affiliations of authors of the papers with a journal ID of 0 and published in 2009.", "sql": "SELECT DISTINCT T2.AuthorId, T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.JournalId = 0 AND T1.Year = 2009 AND T2.Affiliation IS NOT NULL", "source_tables": ["paper", "paperauthor"]}, "evidence": "published in 2009 refers to Year = 2009; journal ID of 0 refers to JournalId = 0"}
{"sample_id": 3539, "db_id": "authors", "final": {"question": "In papers with journal IDs from 200 to 300 and with its short name starts with A, what is the percentage of papers with conference ID of 0?", "sql": "SELECT CAST(SUM(CASE WHEN T1.ConferenceId = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ConferenceId) FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.JournalId BETWEEN 200 AND 300 AND T2.ShortName LIKE 'A%'", "source_tables": ["paper", "journal"]}, "evidence": "journal ID of 200 to 300 refers to JournalId BETWEEN 200 AND 300; short name starts with A refers to ShortName LIKE 'A%'; Percentage = Divide (Count(ConferenceId = 0), Count(ConferenceId)) * 100"}
{"sample_id": 3540, "db_id": "authors", "final": {"question": "Within the year of 2001 to 2010, find the paper published rate of 2001.", "sql": "SELECT CAST(SUM(CASE WHEN Year = 2001 THEN 1 ELSE 0 END) AS REAL) / COUNT(Id) FROM Paper WHERE Year >= 2001 AND Year < 2011", "source_tables": ["paper"]}, "evidence": "year of 2001 to 2010 refers to Year BETWEEN 2001 AND 2010; Percentage = Divide(Count (PaperId(Year = 2001)), Count (PaperID(Year BETWEEN 2001 AND 2010))) * 100"}
{"sample_id": 3541, "db_id": "authors", "final": {"question": "Write down the conference full name of \"ICWE\" and it's homepage address.", "sql": "SELECT FullName, Homepage FROM Conference WHERE ShortName = 'ICWE'", "source_tables": ["conference"]}, "evidence": "\"ICWE\" is the ShortName of conference"}
{"sample_id": 3542, "db_id": "authors", "final": {"question": "Between \"Standford University\" and \"Massachusetts Institute of Technolgy\", which organization had affiliated with more author.?", "sql": "SELECT Affiliation FROM Author WHERE Affiliation IN ('Stanford University', 'Massachusetts Institute of Technology') GROUP BY Affiliation ORDER BY COUNT(Id) DESC LIMIT 1", "source_tables": ["author"]}, "evidence": "\"Standford University\" and \"Massachusetts Institute of Technolgy\" are affiliation organization; affiliated with more author refers to Max(Count(Id))"}
{"sample_id": 3543, "db_id": "authors", "final": {"question": "What is the ratio of author with affiliation and without affiliation?", "sql": "SELECT CAST(SUM(CASE WHEN Affiliation IS NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(*) FROM Author", "source_tables": ["author"]}, "evidence": "with affiliation refers to Affiliation is not Null; without affiliation refers to Affiliation IS NULL; Ration = Count(Id(Affiliation is NOT NULL)) : Count (Id (Affiliation IS NULL))"}
{"sample_id": 3544, "db_id": "authors", "final": {"question": "Write down the author's name and IDs who are affiliated with Univeristiy of Oulu.", "sql": "SELECT Name, id FROM Author WHERE Affiliation = 'University of Oulu'", "source_tables": ["author"]}, "evidence": "\"University of Oulu\" is the Affiliation Organization"}
{"sample_id": 3545, "db_id": "authors", "final": {"question": "Write down the title and affiliation of the preprinted paper written by \"Roger J.Marshal\".", "sql": "SELECT T1.Title, T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Roger J. Marshall' AND T1.ConferenceID = 0 AND T1.JournalID = 0", "source_tables": ["paper", "paperauthor"]}, "evidence": "\"Roger J. Marshall\" is the name of author; preprinted paper refers to ConferenceId = 0 AND JournalId = 0"}
{"sample_id": 3546, "db_id": "authors", "final": {"question": "Find the paper ID, title, published year and journal's full name of the paper which included the most number in author.", "sql": "SELECT T1.Id, T1.Title, T1.Year, T3.FullName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id GROUP BY T2.AuthorId ORDER BY COUNT(T2.AuthorId) DESC LIMIT 1", "source_tables": ["paper", "paperauthor", "journal"]}, "evidence": "most number in author refers to Max (Count(PaperId))"}
{"sample_id": 3547, "db_id": "authors", "final": {"question": "Describe the paper title, published year, conference's short name and included author names in the paper ID of 15.", "sql": "SELECT DISTINCT T1.Title, T1.Year, T3.ShortName, T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Conference AS T3 ON T1.ConferenceId = T3.Id WHERE T1.Id = 15", "source_tables": ["paper", "conference", "paperauthor"]}, "evidence": "paper ID of 15 refers to PaperId = 15"}
{"sample_id": 3548, "db_id": "authors", "final": {"question": "Among author ID of under 1000, who published the paper in affiliation with Zurich, ETH, provide paper ID, year and keyword if any.", "sql": "SELECT T2.Id, T2.Year, T2.Keyword FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.AuthorId < 1000 AND T1.Affiliation = 'Zurich, ETH'", "source_tables": ["paper", "paperauthor"]}, "evidence": "author ID of under 100 refers to AuthorId < 100; 'Zurich, ETH' is the Affiliation"}
{"sample_id": 3549, "db_id": "authors", "final": {"question": "Among the author included in the paper of \"Inspection resistant memory: Architectural support for security from physical examination\", write down the author name and ID who were affiliated with Microsoft Research, USA.", "sql": "SELECT T2.Name, T1.Id FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Inspection resistant memory: Architectural support for security FROM physical examination' AND T2.Affiliation = 'Microsoft Research, USA'", "source_tables": ["paper", "paperauthor"]}, "evidence": "\"Inspection resistant memory: Architectural support for security from physical examination\" is the title of paper;\u00a0 'Microsoft Research, USA' is the Affiliation"}
{"sample_id": 3550, "db_id": "authors", "final": {"question": "Write down the author name, affiliation, jounal short name and full name of the paper \"Decreased Saliva Secretion and Down-Regulation of AQP5 in Submandibular Gland in Irradiated Rats\".", "sql": "SELECT T2.Name, T2.Affiliation, T3.ShortName, T3.FullName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T1.Title = 'Decreased Saliva Secretion and Down-Regulation of AQP5 in Submandibular Gland in Irradiated Rats'", "source_tables": ["paper", "paperauthor", "journal"]}, "evidence": "\"Decreased Saliva Secretion and Down-Regulation of AQP5 in Submandibular Gland in Irradiated Rats\" is the Title of paper"}
{"sample_id": 3551, "db_id": "authors", "final": {"question": "List the paper title and journal ID which were published under the conference name of \"International Symposium of Robotics Research\".", "sql": "SELECT DISTINCT T2.Title, T2.JournalId FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T1.FullName = 'International Symposium of Robotics Research' AND T2.Year = 2003", "source_tables": ["paper", "conference"]}, "evidence": "\"International Symposium of Robotics Research\" is the FullName of conference;"}
{"sample_id": 3552, "db_id": "authors", "final": {"question": "Name the title, year and keyword of the paper which were written by the author ID of 661002 with the affiliation of \"Scientific Computing and Imaging Institute, University of Utah, UT 84112, USA\" organization.", "sql": "SELECT T2.Title, T2.Year, T2.Keyword FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.AuthorId = 661002 AND T1.Affiliation = 'Scientific Computing and Imaging Institute, University of Utah, UT 84112, USA'", "source_tables": ["paper", "paperauthor"]}, "evidence": "\"661002\" is the AuthorId;\u00a0 \"Scientific Computing and Imaging Institute, University of Utah, UT 84112, USA\" is the Affiliation organization"}
{"sample_id": 3553, "db_id": "authors", "final": {"question": "Calculate the differences of the paper number with the journal name of IWC in 2000 and 2010.", "sql": "SELECT SUM(CASE WHEN T2.Year = 2000 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.Year = 2010 THEN 1 ELSE 0 END) AS DIFF FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.ShortName = 'IWC'", "source_tables": ["paper", "journal"]}, "evidence": "\"IWC\" is the ShortName of journal;\u00a0 '2000' and '2010' are Year;\u00a0 Difference = Subtract(Count(Paper.Id(Year = 2000)), Count(Paper.Id(Year = 2010)))"}
{"sample_id": 3554, "db_id": "authors", "final": {"question": "Provide any four valid Journal ID along with short name and full name of the papers which were made in 2013.", "sql": "SELECT DISTINCT T2.JournalId, T1.ShortName, T1.FullName FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Year = 2013 AND T2.JournalId != 0 AND T2.JournalId != -1 LIMIT 4", "source_tables": ["paper", "journal"]}, "evidence": "valid journal ID refers to JournalId! = 0 and JournalId! = -1; made in 2013 refers to Year = 2013"}
{"sample_id": 3555, "db_id": "authors", "final": {"question": "Under the conference name of MICRO, calculate how many more paper is needed to published in 1971 to 1980 in average by yearly to get equivalent to the number of paper from 1991 to 2000. Write down the title and author name of the paper that were actually published during 1971 to 1980 with the conference name with MICRO.", "sql": "SELECT T2.title, T3.name, T1.FullName FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.id = T2.ConferenceId INNER JOIN PaperAuthor AS T3 ON T1.id = T3.PaperId WHERE T1.ShortName = 'MICRO' AND T2.Year BETWEEN '1971' AND '1980'", "source_tables": ["paper", "conference", "paperauthor"]}, "evidence": "\"MICRO\" is the ShortName of conference; in 1971 to 1980 refers to Year BETWEEN '1971' AND '1980'; in 1991 to 2000 refers to Year BETWEEN '1991' AND '2000': Average needed paper = Subtract (Count(PaperId(Year BETWEEN '1991' AND '2000')), Count(PaperId(Year BETWEEN '1971' AND '1980')))/10"}
{"sample_id": 3556, "db_id": "authors", "final": {"question": "How many of the papers are preprinted or not published?", "sql": "SELECT COUNT(Id) FROM Paper WHERE Year = 0", "source_tables": ["paper"]}, "evidence": "preprinted or not published refers to Year = 0"}
{"sample_id": 3557, "db_id": "authors", "final": {"question": "State the full name of conference for paper \"The Dissimilarity Representation as a Tool for Three-Way Data Classification: A 2D Measure\".", "sql": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'The Dissimilarity Representation as a Tool for Three-Way Data Classification: A 2D Measure'", "source_tables": ["paper", "conference"]}, "evidence": "\"The Dissimilarity Representation as a Tool for Three-Way Data Classification: A 2D Measure\" is the Title of paper"}
{"sample_id": 3558, "db_id": "authors", "final": {"question": "What is the homepage address for paper \"Energy-efficiency bounds for noise-tolerant dynamic circuits\"?", "sql": "SELECT T2.HomePage FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'Energy-efficiency bounds for noise-tolerant dynamic circuits'", "source_tables": ["paper", "conference"]}, "evidence": "\"Energy-efficiency bounds for noise-tolerant dynamic circuits\" is the Title of paper"}
{"sample_id": 3559, "db_id": "authors", "final": {"question": "Write down the name of authors for paper with id from 101 to 105.", "sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Id > 100 AND T1.Id < 106", "source_tables": ["paper", "paperauthor"]}, "evidence": "paper with ID from 101 to 105 refers to Id BETWEEN 100 AND 106"}
{"sample_id": 3560, "db_id": "authors", "final": {"question": "Among the papers published in 2009, pick 10 and list down the conference's short name of these papers.", "sql": "SELECT T2.PaperId, T4.ShortName FROM Author AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.AuthorId INNER JOIN Paper AS T3 ON T2.PaperId = T3.Id INNER JOIN Conference AS T4 ON T3.ConferenceId = T4.Id WHERE T3.Year = 2009 LIMIT 10", "source_tables": ["paper", "conference", "paperauthor", "author"]}, "evidence": "published in 2009 refers to Year = 2009"}
{"sample_id": 3561, "db_id": "authors", "final": {"question": "Write down homepage URL of journal for paper \"364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results\".", "sql": "SELECT T2.HomePage FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Title = '364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results'", "source_tables": ["paper", "journal"]}, "evidence": "paper \"364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results\" refers to Title = '364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results'"}
{"sample_id": 3562, "db_id": "authors", "final": {"question": "List down all paper name that were published in conference \"International Conference on Internet Computing\".", "sql": "SELECT T1.Title FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'International Conference on Internet Computing' AND T1.Title <> ''", "source_tables": ["paper", "conference"]}, "evidence": "conference \"International Conference on Internet Computing\" refers to FullName = 'International Conference on Internet Computing'; paper name refers to Title"}
{"sample_id": 3563, "db_id": "authors", "final": {"question": "Among papers that were published in 2005, provide the author name of paper with key words of \"LOAD; IDE; SNP; haplotype; asso- ciation studies\".", "sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Year = 2005 AND T1.Keyword = 'KEY WORDS: LOAD IDE SNP haplotype asso- ciation studies'", "source_tables": ["paper", "paperauthor"]}, "evidence": "in 2005 refers to Year = '2005'; key words of \"LOAD; IDE; SNP; haplotype; asso- ciation studies\" refers to Keyword = 'LOAD; IDE; SNP; haplotype; asso- ciation studies'"}
{"sample_id": 3564, "db_id": "authors", "final": {"question": "How many authors have written paper \"145 GROWTH HORMONE RECEPTORS AND THE ONSET OF HYPERINSULINEMIA IN THE OBESE ZUCKER RAT: \"?", "sql": "SELECT COUNT(DISTINCT T2.Name) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = '145 GROWTH HORMONE RECEPTORS AND THE ONSET OF HYPERINSULINEMIA IN THE OBESE ZUCKER RAT: '", "source_tables": ["paper", "paperauthor"]}, "evidence": "paper \"145 GROWTH HORMONE RECEPTORS AND THE ONSET OF HYPERINSULINEMIA IN THE OBESE ZUCKER RAT: \" refers to Title like'%145 GROWTH HORMONE RECEPTORS AND THE ONSET OF HYPERINSULINEMIA IN THE OBESE ZUCKER RAT:%'"}
{"sample_id": 3565, "db_id": "authors", "final": {"question": "Who are the co-authors for Jei Keon Chae and what is the title of paper written by them?", "sql": "SELECT T2.AuthorId, T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Jei Keon Chae'", "source_tables": ["paper", "paperauthor"]}, "evidence": "'Jei Keon Chee' is the name of author;"}
{"sample_id": 3566, "db_id": "authors", "final": {"question": "What are the conference name and journal name of paper written by Shueh-Lin Yau? List down the name of co-authors and provide the title of that paper.", "sql": "SELECT T1.ConferenceId, T1.JournalId, T2.Name, T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Conference AS T3 ON T1.ConferenceId = T3.Id INNER JOIN Journal AS T4 ON T1.JournalId = T4.Id WHERE T2.Name = 'Shueh-Lin Yau'", "source_tables": ["paper", "conference", "paperauthor", "journal"]}, "evidence": "Shueh-Lin Yau is the name of author;"}
{"sample_id": 3567, "db_id": "authors", "final": {"question": "How many papers were preprinted between the years 1990 and 2000?", "sql": "SELECT COUNT(id) FROM Paper WHERE Year BETWEEN '1990' AND '2000' AND ConferenceId = 0 AND JournalId = 0", "source_tables": ["paper"]}, "evidence": "years 1990 and 2000 refers to Year BETWEEN '1990' AND '2000'; papers refers to COUNT(id)"}
{"sample_id": 3568, "db_id": "authors", "final": {"question": "List the names of all authors affiliated with Birkbeck University of London.", "sql": "SELECT Name FROM Author WHERE Affiliation = 'Birkbeck University of London'", "source_tables": ["author"]}, "evidence": "affiliated with Birkbeck University of London refers to Affiliation = 'Birkbeck University of London'"}
{"sample_id": 3569, "db_id": "authors", "final": {"question": "List the short name of all conferences whose full name begins with International Symposium.", "sql": "SELECT ShortName FROM Conference WHERE FullName LIKE 'International Symposium%'", "source_tables": ["conference"]}, "evidence": "full name refers to FullName LIKE 'International Symposium%'"}
{"sample_id": 3570, "db_id": "authors", "final": {"question": "How many journals do not have a website?", "sql": "SELECT COUNT(HomePage) FROM Journal WHERE HomePage = ''", "source_tables": ["journal"]}, "evidence": "do not have a website refers to HomePage = ''"}
{"sample_id": 3571, "db_id": "authors", "final": {"question": "List author name for articles that are preprinted but not published.", "sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Year = 0", "source_tables": ["paper", "paperauthor"]}, "evidence": "articles that are preprinted but not published refers to Year = 0"}
{"sample_id": 3572, "db_id": "authors", "final": {"question": "List author affiliation for papers whose topic is Quantum Physics.", "sql": "SELECT T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Keyword = 'Quantum Physics'", "source_tables": ["paper", "paperauthor"]}, "evidence": "topic is Quantum Physics refers to Keyword = 'Quantum Physics'"}
{"sample_id": 3573, "db_id": "authors", "final": {"question": "Identify by conference full name all papers in which a journal was not published but a conference.", "sql": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.ConferenceId != 0 AND T1.JournalId = 0 AND T1.Year != 0", "source_tables": ["paper", "conference"]}, "evidence": "journal was not published but a conference refers to ConferenceId ! = 0 And JournalId = 0 Year ! = 0"}
{"sample_id": 3574, "db_id": "authors", "final": {"question": "Identify by papers title those in which conferences have been published that do not have a website..", "sql": "SELECT T2.Title FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T1.HomePage = '' AND T2.Title <> ''", "source_tables": ["paper", "conference"]}, "evidence": "do not have a website refers to HomePage IS NULL OR HomePage = ''"}
{"sample_id": 3575, "db_id": "authors", "final": {"question": "Identify by publication year in the paper database all journals that don't have short name.", "sql": "SELECT DISTINCT T2.Year, FullName FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.ShortName = ''", "source_tables": ["paper", "journal"]}, "evidence": "don't have short name refers to ShortName is NULL OR ShortName = ''"}
{"sample_id": 3576, "db_id": "authors", "final": {"question": "What is the affiliation of the author writing in the journal 'A combined search for the standard model Higgs boson at s = 1.96 \u00c2 TeV'?", "sql": "SELECT T1.Affiliation FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title = 'A combined search for the standard model Higgs boson at s = 1.96 \u00c2 TeV'", "source_tables": ["paper", "paperauthor"]}, "evidence": "journal 'A combined search for the standard model Higgs boson at s = 1.96 \u00c2 TeV' refers to Title = 'A combined search for the standard model Higgs boson at s = 1.96 \u00c2 TeV'"}
{"sample_id": 3577, "db_id": "authors", "final": {"question": "Indicate the name of all the journals published in the paper database in the year 2001.", "sql": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Year = 2001 AND T1.ConferenceId > 0 AND T1.JournalId > 0", "source_tables": ["paper", "journal"]}, "evidence": "name of all the journals refers to FullName"}
{"sample_id": 3578, "db_id": "authors", "final": {"question": "What is the name of the co-authors of the paper titled 'Particle identification using the time-over-threshold method in the ATLAS Transition Radiation Tracker'?", "sql": "SELECT T1.Name FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title = 'Particle identification using the time-over-threshold method in the ATLAS Transition Radiation Tracker'", "source_tables": ["paper", "paperauthor"]}, "evidence": "paper titled 'Particle identification using the time-over-threshold method in the ATLAS Transition Radiation Tracker' refers to Title = 'Particle identification using the time-over-threshold method in the ATLAS Transition Radiation Tracker'"}
{"sample_id": 3579, "db_id": "authors", "final": {"question": "In how many papers and in what years was the International Conference on Database Theory published?", "sql": "SELECT COUNT(T1.Id) AS PAPER, COUNT(DISTINCT T1.Year) AS YEARS FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE year != 0 AND T2.FullName = 'International Conference on Database Theory'", "source_tables": ["paper", "conference"]}, "evidence": "the International Conference on Database Theory refers to FullName = 'International Conference on Database Theory'; published refers to year ! = 0"}
{"sample_id": 3580, "db_id": "authors", "final": {"question": "What is the full name of the journals that are published in the database papers whose topic is Sustainability?", "sql": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Keyword = 'Sustainability'", "source_tables": ["paper", "journal"]}, "evidence": "topic is Sustainability refers to Keyword = 'Sustainability'"}
{"sample_id": 3581, "db_id": "authors", "final": {"question": "What is the name of the authors of papers in which conferences have been published whose full name includes the word Workshop?", "sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Conference AS T3 ON T1.ConferenceId = T3.Id WHERE T3.FullName LIKE '%Workshop%'", "source_tables": ["paper", "conference", "paperauthor"]}, "evidence": "full name includes the word Workshop refers to FullName LIKE '%Workshop%'"}
{"sample_id": 3582, "db_id": "authors", "final": {"question": "What percentage of authors of the paper about Charged particle multiplicity are affiliated with INFN?", "sql": "SELECT CAST((SUM(CASE WHEN T1.Affiliation LIKE '%INFN%' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T2.Id) FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title LIKE '%Charged particle multiplicity%'", "source_tables": ["paper", "paperauthor"]}, "evidence": "about Charged particle multiplicity refers to Title which contains 'Charged particle multiplicity'; affiliated with INFN refers to Affiliation LIKE '%INFN%' ; percentage refers to DIVIDE(COUNT(Affiliation LIKE '%INFN%' ), COUNT(AuthorId)) * 100%"}
{"sample_id": 3583, "db_id": "authors", "final": {"question": "What percentage of journals whose short name begins with ANN were published in the paper database in 1989?", "sql": "SELECT CAST((SUM(CASE WHEN T1.ShortName LIKE 'ANN%' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.ShortName) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Year = 1989", "source_tables": ["paper", "journal"]}, "evidence": "short name begins with ANN refers to ShortName like 'ANN%' ; percentage refers to DIVIDE(COUNT(ShortName like 'ANN%' ), COUNT(id)) * 100%;\u00a0 in 1989 refers to Year = 1989"}
{"sample_id": 3584, "db_id": "authors", "final": {"question": "How many authors were associated with the Microsoft Research when paper number 1 was written?", "sql": "SELECT COUNT(PaperId) FROM PaperAuthor WHERE Affiliation LIKE '%Microsoft Research%'", "source_tables": ["paperauthor"]}, "evidence": "associated with the Microsoft Research refers to Affiliation contains 'Microsoft Research'; paper number 1 refers to PaperId = 1"}
{"sample_id": 3585, "db_id": "authors", "final": {"question": "What was the topic of the article \"A Formal Approach to Service Component Architecture\" and when was it published?", "sql": "SELECT Keyword, Year FROM Paper WHERE Title = 'A Formal Approach to Service Component Architecture'", "source_tables": ["paper"]}, "evidence": "article \"A Formal Approach to Service Component Architecture\" refers to Title = 'A Formal Approach to Service Component Architecture'; topic of the article refers to Keyword"}
{"sample_id": 3586, "db_id": "authors", "final": {"question": "What percentage of papers were preprinted after the year 2000?", "sql": "SELECT CAST(SUM(CASE WHEN Year > 2000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Id) FROM Paper", "source_tables": ["paper"]}, "evidence": "after the year 2000 refers to Year > 2000; preprinted refers to ConferenceId = 0 AND JournalId = 0; percentage refers to DIVIDE(COUNT(ConferenceId = 0 AND JournalId = 0 AND Year > 2000), COUNT(Id))"}
{"sample_id": 3587, "db_id": "authors", "final": {"question": "Please list the names of the authors of the paper \"Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers\".", "sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers'", "source_tables": ["paper", "paperauthor"]}, "evidence": "paper \"Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers\" refers to Title = 'Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers'"}
{"sample_id": 3588, "db_id": "authors", "final": {"question": "What is the full name of the journal that published the paper \"Multiple paternity in a natural population of a salamander with long-term sperm storage\"?", "sql": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Title = 'Multiple paternity in a natural population of a salamander with long-term sperm storage'", "source_tables": ["paper", "journal"]}, "evidence": "paper \"Multiple paternity in a natural population of a salamander with long-term sperm storage\" refers to Title = 'Multiple paternity in a natural population of a salamander with long-term sperm storage'"}
{"sample_id": 3589, "db_id": "authors", "final": {"question": "How many papers were in the journal \"Iet Software/iee Proceedings - Software\"?", "sql": "SELECT COUNT(T1.JournalId) FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T2.FullName = 'Iet Software/iee Proceedings - Software'", "source_tables": ["paper", "journal"]}, "evidence": "journal \"Iet Software/iee Proceedings - Software\" refers to FullName = 'Iet Software/iee Proceedings - Software'; papers refers to COUNT(JournalId)"}
{"sample_id": 3590, "db_id": "authors", "final": {"question": "What is the full name of the conference where paper number 5 was published?", "sql": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Id = 5", "source_tables": ["paper", "conference"]}, "evidence": "paper number 5 refers to Id = 5"}
{"sample_id": 3591, "db_id": "authors", "final": {"question": "Please list the titles of any two papers that Jundu has written.", "sql": "SELECT T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name LIKE 'Jun du%' LIMIT 2", "source_tables": ["paper", "paperauthor"]}, "evidence": "papers that Jundu has written refers to Name LIKE '%Jun du%'"}
{"sample_id": 3592, "db_id": "authors", "final": {"question": "What is the title of the paper that was written by Cheng Huang and affiliated with Microsoft?", "sql": "SELECT T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Cheng Huang' AND T2.Affiliation = 'Microsoft'", "source_tables": ["paper", "paperauthor"]}, "evidence": "paper that was written by Cheng Huang refers to Name = 'Cheng Huang'; affiliated with Microsoft refers to Affiliation LIKE 'Microsoft %'"}
{"sample_id": 3593, "db_id": "authors", "final": {"question": "Please provide the full name of the conference where one of the papers of Jean-luc Hainaut were published.", "sql": "SELECT DISTINCT T3.FullName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Conference AS T3 ON T1.ConferenceId = T3.Id WHERE T2.Name = 'Jean-luc Hainaut' LIMIT 1", "source_tables": ["paper", "conference", "paperauthor"]}, "evidence": "papers of Jean-luc Hainaut refers to Name = 'Jean-luc Hainaut'"}
{"sample_id": 3594, "db_id": "authors", "final": {"question": "What are the three journals that the papers written by Andrew Cain were published in? Please provide your answer with the full name of each journal.", "sql": "SELECT T3.FullName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T2.Name = 'Andrew Cain'", "source_tables": ["paper", "paperauthor", "journal"]}, "evidence": "written by Andrew Cain refers to Name = 'Andrew Cain'"}
{"sample_id": 3595, "db_id": "authors", "final": {"question": "Please list all of the associations that the authors of the paper \"FIBER: A Generalized Framework for Auto-tuning Software\" are affiliated with.", "sql": "SELECT DISTINCT T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'FIBER: A Generalized Framework for Auto-tuning Software'", "source_tables": ["paper", "paperauthor"]}, "evidence": "paper \"FIBER: A Generalized Framework for Auto-tuning Software\" refers to Title = 'FIBER: A Generalized Framework for Auto-tuning Software'; are affiliated with refers to Affiliation"}
{"sample_id": 3596, "db_id": "authors", "final": {"question": "Please provide the titles of any two papers that are either preprinted or unpublished along with the full name of the journal to which those papers belong.", "sql": "SELECT T1.Title, T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Year < 1 LIMIT 2", "source_tables": ["paper", "journal"]}, "evidence": "papers that are either preprinted or unpublished along refers to Year = 0"}
{"sample_id": 3597, "db_id": "authors", "final": {"question": "What is the journal's short and full names that feature papers on the \"Materials\" topic?", "sql": "SELECT T2.ShortName, T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Keyword LIKE '%Materials%'", "source_tables": ["paper", "journal"]}, "evidence": "papers on the \"Materials\" topic refers to Keyword = 'Materials'"}
{"sample_id": 3598, "db_id": "authors", "final": {"question": "List the names of authors affiliated with the University of Oxford in alphabetical order.", "sql": "SELECT Name FROM Author WHERE Affiliation = 'University of Oxford' ORDER BY Name ASC", "source_tables": ["author"]}, "evidence": "affiliated with the University of Oxford refers to Affiliation = 'University of Oxford'"}
{"sample_id": 3599, "db_id": "authors", "final": {"question": "List the short name and home page URL of all the international conferences on artificial intelligence.", "sql": "SELECT ShortName, HomePage FROM Conference WHERE FullName LIKE 'International Conference on Artificial Intelligence%'", "source_tables": ["conference"]}, "evidence": "all the international conferences on artificial intelligence refers to FullName LIKE 'International Conference on Artificial Intelligence%'"}
{"sample_id": 3600, "db_id": "authors", "final": {"question": "Find the names of papers which are published in the year 1996.", "sql": "SELECT Title FROM Paper WHERE year = 1996", "source_tables": ["paper"]}, "evidence": ""}
{"sample_id": 3601, "db_id": "authors", "final": {"question": "List the title and author's name of papers published in the 2007 Neoplasia journal.", "sql": "SELECT T1.Title, T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T3.FullName = 'Neoplasia' AND T1.Year = 2007", "source_tables": ["paper", "paperauthor", "journal"]}, "evidence": "published in the 2007 refers to Year = 2007; Neoplasia journal refers to FullName = 'Neoplasia'"}
{"sample_id": 3602, "db_id": "authors", "final": {"question": "Among the authors affiliated with Soongsil University, list the authors' names and papers published during the year 2000.", "sql": "SELECT T2.Title, T1.Name FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Affiliation = 'Soongsil University' AND T2.Year = 2000", "source_tables": ["paper", "paperauthor"]}, "evidence": "authors affiliated with Soongsil University refers to Affiliation = 'Soongsil University'"}
{"sample_id": 3603, "db_id": "authors", "final": {"question": "Give the title and author's name of the papers published between 2000 and 2005 that include the topic optical properties.", "sql": "SELECT T1.Title, T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Keyword LIKE '%optical properties%' AND T1.Year BETWEEN 2000 AND 2005 AND T1.Title <> ''", "source_tables": ["paper", "paperauthor"]}, "evidence": "published between 2000 and 2005 refers to Year BETWEEN 2000 AND 2005; include the topic optical properties refers to Keyword LIKE '%optical properties%'"}
{"sample_id": 3604, "db_id": "authors", "final": {"question": "What is the average number of papers published in the World Computer Congress each year?", "sql": "SELECT CAST(SUM(CASE WHEN T2.FullName = 'International Congress Series' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.Id) AS Div1, T1.Year FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id GROUP BY T1.YEAR HAVING Div1 != 0", "source_tables": ["paper", "journal"]}, "evidence": "published in the World Computer Congress refers to FullName = 'World Computer Congress'; average refers to DIVIDE(COUNT(FullName = 'World Computer Congress'), COUNT(Id))"}
{"sample_id": 3605, "db_id": "authors", "final": {"question": "Give the Title and author's name of the books that were preprint in 1997.", "sql": "SELECT DISTINCT T2.Name, T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.ConferenceId = 0 AND T1.JournalId = 0 AND T1.Year = 1997 AND T1.Title <> ''", "source_tables": ["paper", "paperauthor"]}, "evidence": "in 1997 refers to Year = 1997; books that were preprint refers to ConferenceId = 0 AND JournalId = 0"}
{"sample_id": 3606, "db_id": "authors", "final": {"question": "Write the titles of papers published by Adam Jones and the journal name in which it was published from 2005 to 2010.", "sql": "SELECT T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T2.Name = 'Adam Jones' AND T1.Year BETWEEN 2005 AND 2010", "source_tables": ["paper", "paperauthor", "journal"]}, "evidence": "published from 2005 to 2010 refers to Year BETWEEN 2005 AND 2010; published by Adam Jones refers to Name = 'Adam Jones'"}
{"sample_id": 3607, "db_id": "authors", "final": {"question": "How many authors is affiliated to the organization \"Otterbein University\"?", "sql": "SELECT COUNT(Name) FROM Author WHERE Affiliation = 'Otterbein University'", "source_tables": ["author"]}, "evidence": "Otterbein University is an Affiliation"}
{"sample_id": 3608, "db_id": "authors", "final": {"question": "How many authors drafted the paper \"Subcellular localization of nuclease in barley aleurone\"?", "sql": "SELECT COUNT(DISTINCT T2.Name) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Subcellular localization of nuclease in barley aleurone'", "source_tables": ["paper", "paperauthor"]}, "evidence": "'Subcellular localization of nuclease in barley aleurone' is the title of paper"}
{"sample_id": 3609, "db_id": "authors", "final": {"question": "What is the full name of the conference in which the paper titled \"Extended Fuzzy Regression Models\" was published?", "sql": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'Extended Fuzzy Regression Models'", "source_tables": ["paper", "conference"]}, "evidence": "'Extended Fuzzy Regression Models' is the title of paper; full name of the conference refers to FullName"}
{"sample_id": 3610, "db_id": "authors", "final": {"question": "How many papers are published under the conference \"Mathematics of Program Construction\n\"?", "sql": "SELECT COUNT(T1.Id) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'Mathematics of Program Construction'", "source_tables": ["paper", "conference"]}, "evidence": "'Mathematics of Program Construction' is the FullName of conference"}
{"sample_id": 3611, "db_id": "authors", "final": {"question": "Who is the author of the paper titled \"Open Sourcing Social Solutions (Building Communities of Change)\"?", "sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Open Sourcing Social Solutions (Building Communities of Change)'", "source_tables": ["paper", "paperauthor"]}, "evidence": "'Open Sourcing Social Solutions (Building Communities of Change)' is a title of the paper; author refers to PaperAuthor.Name"}
{"sample_id": 3682, "db_id": "college_completion", "final": {"question": "List the all the institutes from the state with the most number of American Indian in 2007.", "sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2007 AND T2.race = 'Ai' GROUP BY T1.chronname ORDER BY COUNT(T1.chronname) DESC LIMIT 1", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "institutes refers to chronname; American Indian refers to race = 'Ai'; most number of American Indian refers to MAX(COUNT(race = 'Ai')); in 2007 refers to year = '2007';"}
{"sample_id": 3683, "db_id": "college_completion", "final": {"question": "State the name and website of the institutes from the state with 209 graduate cohort in 2011.", "sql": "SELECT T1.chronname, T1.site FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2011 AND T2.grad_cohort = 209", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "name of the institutes refers to chronname; website refers to site; graduate cohort refers to grad_cohort; in 2011 refers to year = '2011';"}
{"sample_id": 3684, "db_id": "college_completion", "final": {"question": "What is the number of female graduates between 2011 to 2013 from the state where 'Gateway Community College' is located?", "sql": "SELECT COUNT(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year BETWEEN 2011 AND 2013 AND T1.chronname = 'Gateway Community College' AND T2.gender = 'F'", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "female refers to gender = 'F'; graduates refers to grad_cohort; between 2011 to 2013 refers to year BETWEEN 2011 AND 2013; Gateway Community College refers to chronname = 'Gateway Community College';"}
{"sample_id": 3685, "db_id": "college_completion", "final": {"question": "What is the total male graduates in 2012 in the state whereby the institute with the highest average amount of student aid going to undergraduate recipients is located?", "sql": "SELECT COUNT(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2012 AND T2.gender = 'M' ORDER BY T1.aid_value DESC LIMIT 1", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "male refers to gender = 'M'; graduates refers to grad_cohort; in 2012 refers to year = 2012; highest average amount of student aid going to undergraduate recipients refers to MAX(aid_value);"}
{"sample_id": 3686, "db_id": "college_completion", "final": {"question": "State the average median SAT value for institutes in the state with the most male graduate cohort in 2013.", "sql": "SELECT AVG(T1.med_sat_value) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2013 AND T2.gender = 'M' GROUP BY T2.grad_cohort ORDER BY COUNT(T2.grad_cohort) DESC LIMIT 1", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "median SAT value refers to med_sat_value; average = AVG(med_sat_value); male refers to gender = 'M'; graduate cohort refers to grad_cohort; most male graduate cohort refers to MAX(COUNT(grad_cohort WHERE gender = 'M')); in 2013 refers to year = 2013;"}
{"sample_id": 3687, "db_id": "college_completion", "final": {"question": "Name the state with the most number of graduate cohort in 2012 from private institute for profit? List all such institutes in the mentioned state.", "sql": "SELECT T1.state, T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2012 AND T1.control = 'Private for-profit' GROUP BY T2.grad_cohort ORDER BY COUNT(T2.grad_cohort) DESC LIMIT 1", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "most number of graduate cohort refers to MAX(SUM(grad_cohort)); in 2012 refers to year = 2012; private institute for profit refers to control = 'Private for-profit'; institutes refers to chronname;"}
{"sample_id": 3688, "db_id": "college_completion", "final": {"question": "List all the public institutes from the state with the least number of graduate cohort in 2013.", "sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2013 AND T1.control = 'Public' ORDER BY T2.grad_cohort LIMIT 1", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "public refers to control = 'Public'; institutes refers to chronname; least number of graduate cohort refers to MIN(grad_cohort); in 2013 refers to year = 2013;"}
{"sample_id": 3689, "db_id": "college_completion", "final": {"question": "Provide the institute name with less than 200 graduate cohort of all races and genders in 2013. Also, please state the total number of full-time equivalent undergraduates for the institute.", "sql": "SELECT T1.chronname, T2.grad_cohort FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.year = 2013 AND T2.gender = 'B' AND T2.race = 'X' AND T2.grad_cohort < 200", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "institute name refers to chronname; less than 200 graduate cohort refers to grad_cohort < 200; all races refers to race = 'X'; all genders refers to gender = 'B'; in 2013 refers to year = 2013; total number of full-time equivalent undergraduates refers to fte_value;"}
{"sample_id": 3690, "db_id": "college_completion", "final": {"question": "What is the number of female graduate for all students cohort from Oakwood University in 2013?", "sql": "SELECT COUNT(*) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.year = 2013 AND T2.gender = 'F' AND T2.race = 'X' AND T1.chronname = 'Oakwood University'", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "female refers to gender = 'F'; graduates refers to grad_cohort; Oakwood University refers to chronname = 'Oakwood University'; in 2013 refers to year = 2013; all sutdents refer to rae = 'X';"}
{"sample_id": 3691, "db_id": "college_completion", "final": {"question": "In 2012, how many Asian female graduates were seeking another type of degree or certificate at the 4-year institution at University of Alaska at Anchorage?", "sql": "SELECT COUNT(*) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.gender = 'F' AND T2.race = 'A' AND T1.chronname = 'University of Alaska at Anchorage' AND T2.cohort = '4y other'", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "In 2012 refers to year = 2012; Asian refers to race = 'A'; female refers to gender = 'F'; graduates refers to grad_cohort; seeking another type of degree or certificate at a 4-year institution refers to cohort = '4y other'; University of Alaska at Anchorage refers to chronname = 'University of Alaska at Anchorage';"}
{"sample_id": 3692, "db_id": "college_completion", "final": {"question": "Compare the graduate cohort for Auburn University from 2011 to 2013?", "sql": "SELECT SUM(CASE WHEN T2.year = 2011 THEN T2.grad_cohort ELSE 0 END), SUM(CASE WHEN T2.year = 2012 THEN T2.grad_cohort ELSE 0 END), SUM(CASE WHEN T2.year = 2013 THEN T2.grad_cohort ELSE 0 END) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.gender = 'B' AND T2.race = 'X' AND T1.chronname = 'Auburn University'", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "graduate cohort for Auburn University refers to grad_cohort is not null WHERE chronname = 'Auburn University', gender = 'B', race = 'X' and cohort = '4y other', '4y bach'; from 2011 to 2013 refers to year in (2011, 2012, 2013);"}
{"sample_id": 3693, "db_id": "college_completion", "final": {"question": "Calculate the percentage of Black students in all private for profit institutions.", "sql": "SELECT CAST(SUM(CASE WHEN T2.race = 'B' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.race = 'B' AND T1.control = 'Private for-profit'", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "Black students refers to race = 'B'; private for profit refers to control = 'Private for-profit'; percentage = MULTIPLY(DIVIDE(SUM(race = 'B'), SUM(grad_cohort)), 100.0);"}
{"sample_id": 3694, "db_id": "college_completion", "final": {"question": "Calculate the percentage of Asian students among students of other races who graduated from institution in Alabama in year 2013 within 100 percent of normal / expected time.", "sql": "SELECT CAST(SUM(CASE WHEN T2.race = 'A' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.year = 2013 AND T1.state = 'Alabama'", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "Asian refers to race = 'A'; Alabama refers to state = 'Alabama'; graduated within 100 percent of normal/expected time refers to grad_100; percentage = MULTIPLY(DIVIDE(SUM(race = 'A'), SUM(grad_cohort)), 100);"}
{"sample_id": 3695, "db_id": "college_completion", "final": {"question": "What is the ratio of Asian male graduates to Asian female graduates from Harvard University in 2013?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Gender = 'M' THEN T2.grad_cohort ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.Gender = 'F' THEN T2.grad_cohort ELSE 0 END) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Harvard University' AND T2.year = 2013 AND T2.race = 'A'", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "ratio = MULTIPLY(DIVIDE(SUM(grad_cohort WHERE Gender = 'M'), SUM( grad_cohort WHERE Gender = 'F')), 1.0); Asian refers to race = 'A'; female refers to gender = 'F'; graduates refers to grad_cohort; male refers to gender = 'M'; Harvard University refers to chronname = 'Harvard University'; in 2013 refers to year = 2013;"}
{"sample_id": 3696, "db_id": "college_completion", "final": {"question": "From which institute is harder to graduate for a bachelor, Amridge University or Auburn University?", "sql": "SELECT chronname FROM institution_details WHERE chronname IN ('Amridge University', 'Auburn University') ORDER BY grad_100_value LIMIT 1", "source_tables": ["institution_details"]}, "evidence": "institute refers to chronname; harder to graduate for a bachelor refers to MIN(grad_100_value); Amridge University refers to chronname = 'Amridge University'; Auburn University refers to chronname = 'Auburn University';"}
{"sample_id": 3697, "db_id": "college_completion", "final": {"question": "How many institutes are private and not-for profit?", "sql": "SELECT COUNT(*) FROM institution_details WHERE control = 'Private not-for-profit'", "source_tables": ["institution_details"]}, "evidence": "private and not for profit refers to control = 'Private not-for-profit';"}
{"sample_id": 3698, "db_id": "college_completion", "final": {"question": "In total, how many Hispanic male students graduated from Amridge University?", "sql": "SELECT SUM(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Amridge University' AND T2.gender = 'M' AND T2.race = 'H'", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "Hispanic refers to race = 'H'; male refers to gender = 'M'; Amridge University refers to chronname = 'Amridge University';"}
{"sample_id": 3699, "db_id": "college_completion", "final": {"question": "How many students that graduated from Lincoln College in 2011 belong to the cohort type of Bachelor's/equivalent seeking cohort at 4-year institutions?", "sql": "SELECT COUNT(T1.unitid) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Lincoln College' AND T2.year = 2011 AND T2.cohort = '4y bach'", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "Lincoln College refers to chronname = 'Lincoln College'; in 2011 refers to year = 2011; Bachelor's/equivalent seeking cohort at 4-year institutions refers to cohort = '4y bach';"}
{"sample_id": 3700, "db_id": "college_completion", "final": {"question": "What's the number of male Hispanic students who graduated from Central Alabama Community College in 2011 within 100 percent of normal/expected time?", "sql": "SELECT SUM(T2.grad_100) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Central Alabama Community College' AND T2.year = 2011 AND T2.gender = 'M' AND T2.race = 'H'", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "male refers to gender = 'M'; Hispanic students refers to race = 'H'; Central Alabama Community College refers to chronname = 'Central Alabama Community College'; in 2011 refers to year = 2011; number of students who graduated within 100 percent of normal/expected time refers to grad_100;"}
{"sample_id": 3701, "db_id": "college_completion", "final": {"question": "How many students graduated from Central Alabama Community College in 2011 in total?", "sql": "SELECT T2.grad_cohort FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Central Alabama Community College' AND T2.year = 2011", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "Central Alabama Community College refers to chronname = 'Central Alabama Community College'; in 2011 refers to year = 2011;"}
{"sample_id": 3702, "db_id": "college_completion", "final": {"question": "Which cohort had the higher percentage of students who graduated from Central Alabama Community College in 2011 within 150 percent of normal/expected time, female White students or male White students?", "sql": "SELECT IIF(SUM(CASE WHEN T2.gender = 'F' THEN T2.grad_150 ELSE 0 END) > SUM(CASE WHEN T2.gender = 'M' THEN T2.grad_150 ELSE 0 END), 'female White students', 'male White students') FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Central Alabama Community College' AND T2.year = 2011 AND T2.race = 'W'", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "amount of percentage = SUM(grad_150 WHERE gender = 'F') as female; percentage = SUM(grad_150 WHERE gender = 'M') as male; Central Alabama Community College refers to chronname = 'Central Alabama Community College'; in 2011 refers to year = 2011; graduated within 150 percent of normal/expected time refers to grad_150; female refers to gender = 'F'; White refers to race = 'w'; male refers to gender = 'M';"}
{"sample_id": 3703, "db_id": "college_completion", "final": {"question": "Which institute has the highest percentage of male White students graduating in 2011 within 150 percent of normal/expected time?", "sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.year = 2011 AND T2.gender = 'M' AND T2.race = 'W' AND T2.grad_150 = ( SELECT MAX(T2.grad_150) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.year = 2011 AND T2.gender = 'M' AND T2.race = 'W' )", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "male refers to gender = 'M'; white refers to race = 'w'; in 2011 refers to year = 2011; graduating within 150 percent of normal/expected time refers to grad_150;"}
{"sample_id": 3704, "db_id": "college_completion", "final": {"question": "Please list the names of the institutes with the percentage of male White students graduating in 2011 within 150 percent of normal/expected time over 20.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE WHEN T2.grad_150 > 20 THEN T1.chronname ELSE NULL END AS T FROM institution_details T1 INNER JOIN institution_grads T2 ON T2.unitid = T1.unitid WHERE T2.year = 2011 AND T2.gender = 'M' AND T2.race = 'W' ) WHERE T IS NOT NULL", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "names of the institutes refers to chronname; male refers to gender = 'M'; white refers to race = 'w'; in 2011 refers to year = 2011; percentage of students graduating within 150 percent of normal/expected time over 20 refers to grad_150>20;"}
{"sample_id": 3705, "db_id": "college_completion", "final": {"question": "How many students for both genders graduated from a 2-year institute in Alabama in 2011?", "sql": "SELECT SUM(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE  T2.cohort = '2y all' AND T2.year = 2011 AND T1.state = 'Alabama'", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "2-year institute refers to cohort = '2y all'; Alabama refers to state = 'Alabama'; in 2011 refers to year = 2011; T2.gender = 'B' means both genders;"}
{"sample_id": 3706, "db_id": "college_completion", "final": {"question": "How many more students in total graduated from Central Alabama Community College in 2012 than in 2011?", "sql": "SELECT SUM(CASE WHEN T2.year = 2012 THEN T2.grad_cohort ELSE 0 END) - SUM(CASE WHEN T2.year = 2011 THEN T2.grad_cohort ELSE 0 END) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Central Alabama Community College'", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "how many more = SUBTRACT(SUM(grad_cohort WHERE year = 2012)), (sum(grad_cohort WHERE year = 2011)); Central Alabama Community College refers to chronname = 'Central Alabama Community College'; in 2012 refers to year = 2012; in 2011 refers to year = 2011;"}
{"sample_id": 3707, "db_id": "college_completion", "final": {"question": "Among the institutes in the state of Alabama whose percent rank for median SAT value within sector is 77, how many of them have over 500 graduates in total in 2011?", "sql": "SELECT COUNT(DISTINCT T1.chronname) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.state = 'Alabama' AND T1.med_sat_percentile = '100' AND T2.year = 2011 AND T2.grad_cohort > 500", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "percent rank for median SAT value within sector refers to med_sat_percentile; over 500 graduates refers to grad_cohort > 500; in 2011 refers to year = 2011;"}
{"sample_id": 3708, "db_id": "college_completion", "final": {"question": "Among the public institutes in the state of Alabama, how many of them have over 30 students who graduated within 100 percent of normal/expected time in 2011?", "sql": "SELECT COUNT(T1.chronname) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.state = 'Alabama' AND T1.control = 'Public' AND T2.year = 2011 AND T2.grad_100 > 30", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "public refers to control = 'Public'; over 30 students who graduated within 100 percent of normal/expected time refers to grad_100 > 30; in 2011 refers to year = 2011;"}
{"sample_id": 3709, "db_id": "college_completion", "final": {"question": "Please list the names of the institutes in the state of Alabama whose all graduates in total exceeded 500 in 2011?", "sql": "SELECT DISTINCT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.state = 'Alabama' AND T2.year = 2011 AND T2.race = 'X' AND T2.grad_cohort > 500", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "names of the institutes refers to chronname; graduates refers to grad_cohort; grad_cohort > 500; in 2011 refers to year = 2011; all students refer to race = 'X'."}
{"sample_id": 3710, "db_id": "college_completion", "final": {"question": "What's the average number of graduates for Central Alabama Community College in the 3 consecutive years from 2011 to 2013?", "sql": "SELECT AVG(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Central Alabama Community College' AND T2.year IN (2011, 2012, 2013) AND T2.gender = 'B' AND T2.race = 'X'", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "graduates refers to grad_cohort; Central Alabama Community College refers to chronname = 'Central Alabama Community College'; average number of graduates for 3 consecutive years = DIVIDE(SUM(SUM(grad_cohort WHERE year = 2011), SUM(grad_cohort WHERE year = 2012), SUM(grad_cohort WHERE year = 2013)), 3);"}
{"sample_id": 3711, "db_id": "college_completion", "final": {"question": "What is the average percentage of students graduating within 100 percent of normal/expected time for Central Alabama Community College?", "sql": "SELECT AVG(T2.grad_100_rate) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Central Alabama Community College'", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "average = DIVIDE(SUM(grad_100_rate), (SUM(grad_100), SUM(grad_150))); percentage of students graduating within 100 percent of normal/expected time refers to grade_100_rate; Central Alabama Community College refers to chronname = 'Central Alabama Community College';"}
{"sample_id": 3712, "db_id": "college_completion", "final": {"question": "Give the web site address for \"Swarthmore College\".", "sql": "SELECT T FROM ( SELECT DISTINCT CASE WHEN chronname = 'Swarthmore College' THEN site ELSE NULL END AS T FROM institution_details ) WHERE T IS NOT NULL", "source_tables": ["institution_details"]}, "evidence": "website address refers to site; Swarthmore College refers to chronname = 'Swarthmore College';"}
{"sample_id": 3713, "db_id": "college_completion", "final": {"question": "Which state is \"Mercer University\" located in?", "sql": "SELECT T FROM ( SELECT DISTINCT CASE WHEN chronname = 'Mercer University' THEN state ELSE NULL END AS T FROM institution_details ) WHERE T IS NOT NULL", "source_tables": ["institution_details"]}, "evidence": "Mercer University refers to chronname = 'Mercer University';"}
{"sample_id": 3714, "db_id": "college_completion", "final": {"question": "Which city is \"Rensselaer Polytechnic Institute\" located in?", "sql": "SELECT T FROM ( SELECT DISTINCT CASE WHEN chronname = 'Rensselaer Polytechnic Institute' THEN city ELSE NULL END AS T FROM institution_details ) WHERE T IS NOT NULL", "source_tables": ["institution_details"]}, "evidence": "Rensselaer Polytechnic Institute refers to chronname = 'Rensselaer Polytechnic Institute';"}
{"sample_id": 3715, "db_id": "college_completion", "final": {"question": "Tell the abbreviation for \"Delaware\" state.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE WHEN state = 'Delaware' THEN state_abbr ELSE NULL END AS T FROM state_sector_grads ) WHERE T IS NOT NULL", "source_tables": ["state_sector_grads"]}, "evidence": "abbreviation for state refers to state_abbr;"}
{"sample_id": 3716, "db_id": "college_completion", "final": {"question": "How many 2-year public schools are there in \"California\"?", "sql": "SELECT COUNT(stateid) FROM state_sector_details WHERE state = 'California' AND level = '2-year' AND control = 'Public'", "source_tables": ["state_sector_details"]}, "evidence": "2-year refers to level = '2-year'; public refers to control = 'public'; California refers to state = 'California';"}
{"sample_id": 3717, "db_id": "college_completion", "final": {"question": "Give the post name of \"Idaho\" state.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE WHEN state = 'Idaho' THEN state_post ELSE NULL END AS T FROM state_sector_details ) WHERE T IS NOT NULL", "source_tables": ["state_sector_details"]}, "evidence": "post name refers to state_post;"}
{"sample_id": 3718, "db_id": "college_completion", "final": {"question": "Tell the name of school in \"NJ\" that could get the bachelor's degree with highest students number.", "sql": "SELECT DISTINCT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'NJ' AND T1.level = '4-year' AND T1.student_count = ( SELECT MAX(T1.student_count) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'NJ' AND T1.level = '4-year' )", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "name of school refers to chronname; NJ refers to state_abbr = 'NJ'; bachelor's degree refers to level = '4-year'; highest students number refers to MAX(student_count);"}
{"sample_id": 3719, "db_id": "college_completion", "final": {"question": "Give the web site address for the school in \"PA\" state with the highest latitude.", "sql": "SELECT DISTINCT T1.site FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'PA' AND T1.lat_y = ( SELECT MAX(T1.lat_y) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'PA' )", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "web site address refers to site; PA refers to state_abbr = 'PA'; highest latitude refers to MAX(lat_y);"}
{"sample_id": 3720, "db_id": "college_completion", "final": {"question": "Tell the number of 4-year public schools in UT whose graduation rate exceeds the average for the state.", "sql": "SELECT COUNT(DISTINCT T1.chronname) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'UT' AND T1.level = '4-year' AND T1.control = 'Public' AND T1.awards_per_value > T1.awards_per_state_value", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "4-year refers to level = '4-year'; public refers to control = 'Public'; UT refers to state_abbr = 'UT'; graduation rate exceeds the average for the state refers to awards_per_value > awards_per_state_value;"}
{"sample_id": 3721, "db_id": "college_completion", "final": {"question": "How many 2-year private nonprofit schools in \"CT\" whose graduation rate falls below the average for the state?", "sql": "SELECT COUNT(DISTINCT T1.chronname) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'CT' AND T2.level = '2-year' AND T1.control = 'Private not-for-profit' AND T1.awards_per_value < T1.awards_per_natl_value", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "2-year refers to level = '2-year'; private nonprofit refers to control = 'Private not-for-profit'; CT refers to state_abbr = 'CT'; graduation rate falls below the average for the state refers to awards_per_value < awards_per_natl_value;"}
{"sample_id": 3722, "db_id": "college_completion", "final": {"question": "Give the name of the 4-year public school in \"ID\" with the lowest graduation 100 value.", "sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'ID' AND T1.level = '4-year' AND T1.control = 'Public' GROUP BY T1.chronname ORDER BY SUM(T1.grad_100_value) ASC LIMIT 1", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "name of the school refers to chronname; 4-year refers to level = '4-year'; public refers to control = 'Public'; ID refers to state_abbr = 'ID'; lowest graduation 100 value refers to MIN(grad_100_value);"}
{"sample_id": 3723, "db_id": "college_completion", "final": {"question": "Which 4-year private for-profit school in \"KY\" has the highest graudation 150 value? Give the ID for the school.", "sql": "SELECT T1.chronname, T1.unitid FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'KY' AND T1.level = '4-year' AND T1.control = 'Private for-profit' GROUP BY T1.chronname ORDER BY SUM(T1.grad_150_value) DESC LIMIT 1", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "4-year refers to level = '4-year'; private for profit refers to control = 'Private for-profit'; KY refers to state_abbr = 'KY'; highest graduation 150 value refers to MAX(grad_150_value); ID of the school refers to unitid;"}
{"sample_id": 3724, "db_id": "college_completion", "final": {"question": "What was the number of female Hispanic students who graduated within 100 percent of expected time for \"Pennsylvania State University-Altoona\"?", "sql": "SELECT SUM(T2.grad_100) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Pennsylvania State University-Altoona' AND T2.gender = 'F' AND T2.race = 'H'", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "female refers to gender = 'F'; Hispanic refers to race = 'H'; graduated within 100 percent of expected time refers to grad_100; Pennsylvania State University-Altoona refers to chronname = 'Pennsylvania State University-Altoona';"}
{"sample_id": 3725, "db_id": "college_completion", "final": {"question": "Give the cohort name for the school with biggest cohort size.", "sql": "SELECT DISTINCT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.cohort_size = ( SELECT MAX(T1.cohort_size) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid )", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "biggest cohort size refers to MAX(cohort_size); cohort = '4y bach' means bachelor's or equivalent-seeking cohort at 4-year institutions; cohort = '4y other' means students seeking another type of degree or certificate at a 4-year institution; cohort = '2y all' means degree-seeking students at 2-year institutions;"}
{"sample_id": 3726, "db_id": "college_completion", "final": {"question": "Tell the number of 4-year private not-for-profit schools in the home state of \"Brevard Community College\".", "sql": "SELECT COUNT(T1.chronname) FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state WHERE T2.level = '4-year' AND T2.control = 'Private not-for-profit' AND T1.chronname = 'Brevard Community College'", "source_tables": ["institution_details", "state_sector_details"]}, "evidence": "4-year refers to level = '4-year'; private not-for-profit refers to control = 'Private not-for-profit'; Brevard Community College refers to chronname = 'Brevard Community College';"}
{"sample_id": 3758, "db_id": "public_review_platform", "final": {"question": "How many Yelp businesses are there in 'AZ' with less than \"3\" stars?", "sql": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND stars < 3", "source_tables": ["business"]}, "evidence": "AZ refers to state = 'AZ'; stars < 3;"}
{"sample_id": 3759, "db_id": "public_review_platform", "final": {"question": "What is the quantity of the closed or not running Yelp Businesses in 'AZ'?", "sql": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND active LIKE 'False'", "source_tables": ["business"]}, "evidence": "closed or not running refers to active = 'False'; AZ refers to state = 'AZ';"}
{"sample_id": 3760, "db_id": "public_review_platform", "final": {"question": "How many long reviews does user No. 36139 give for the Yelp businesses?", "sql": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 36139 AND review_length LIKE 'long'", "source_tables": ["reviews"]}, "evidence": "long reviews refers to review_length = 'long'; user No. refers to user_id;"}
{"sample_id": 3761, "db_id": "public_review_platform", "final": {"question": "How many users have \"uber\" number of fans?", "sql": "SELECT COUNT(user_id) FROM Users WHERE user_fans LIKE 'Uber'", "source_tables": ["users"]}, "evidence": "uber number of fans refers to user_fans = 'uber';"}
{"sample_id": 3762, "db_id": "public_review_platform", "final": {"question": "How many Yelp businesses are opened 24 hours?", "sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name LIKE 'Open 24 Hours' AND T2.attribute_value LIKE 'TRUE'", "source_tables": ["attributes", "business_attributes"]}, "evidence": "open 24 hours refers to attribute_name = 'Open 24 Hours' AND attribute_value = 'true';"}
{"sample_id": 3763, "db_id": "public_review_platform", "final": {"question": "What kind of \"wi-fi\" does Yelp business No.\"10172\" have?", "sql": "SELECT T2.attribute_value FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.business_id = 10172 AND T1.attribute_name LIKE 'wi-fi'", "source_tables": ["attributes", "business_attributes"]}, "evidence": "kind of wi-fi refers to attribute_value where attribute_name = 'Wi-Fi'; business No. refers to business_id;"}
{"sample_id": 3764, "db_id": "public_review_platform", "final": {"question": "How many \"bars\" are there in the Yelp business?", "sql": "SELECT COUNT(T1.category_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.category_name LIKE 'Bars'", "source_tables": ["categories", "business_categories"]}, "evidence": "bars refers to category_name = 'Bars';"}
{"sample_id": 3765, "db_id": "public_review_platform", "final": {"question": "How many more \"buffets\" than \"gyms\" in Yelp business?", "sql": "SELECT SUM(CASE WHEN T1.category_name LIKE 'Buffets' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.category_name LIKE 'Gyms' THEN 1 ELSE 0 END) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id", "source_tables": ["categories", "business_categories"]}, "evidence": "buffets refers to category_name = 'Buffets'; gyms refers to category_name = 'Gyms'; difference = SUBTRACT(SUM(category_name = 'Buffets'), SUM(category_name = 'Gyms'));"}
{"sample_id": 3766, "db_id": "public_review_platform", "final": {"question": "What business category is the Yelp business which got the most 5 star reviews in?", "sql": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Reviews AS T4 ON T3.business_id = T4.business_id WHERE T4.review_stars = 5 GROUP BY T1.category_name ORDER BY COUNT(T1.category_name) DESC LIMIT 1", "source_tables": ["categories", "business_categories", "reviews", "business"]}, "evidence": "business category refers to category_name; most 5 star reviews refers to MAX(COUNT(category_name WHERE star_reviews = 5));"}
{"sample_id": 3767, "db_id": "public_review_platform", "final": {"question": "In which year did the user who gave the most number of \"5\" star reviews join the Yelp?", "sql": "SELECT T2.user_yelping_since_year FROM Reviews AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.review_stars = 5 GROUP BY T2.user_yelping_since_year ORDER BY COUNT(T1.review_stars) DESC LIMIT 1", "source_tables": ["users", "reviews"]}, "evidence": "year the user join the Yelp refers to user_yelping_since_year; star reviews refers to review_stars;"}
{"sample_id": 3768, "db_id": "public_review_platform", "final": {"question": "For the user who gave the most number of long reviews, what is his/her averge ratings of all review?", "sql": "SELECT CAST(SUM(T1.review_stars) AS REAL) / COUNT(T1.review_stars) FROM Reviews AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.review_length LIKE 'Long' GROUP BY T1.user_id ORDER BY COUNT(T1.review_length) DESC LIMIT 1", "source_tables": ["users", "reviews"]}, "evidence": "long reviews refers to review_length = 'long'; most number of long reviews refers to MAX(COUNT(review_length = 'long')); average ratings = AVG(review_stars);"}
{"sample_id": 3769, "db_id": "public_review_platform", "final": {"question": "For the Yelp business which had the most number of \"long\" reviews, which category does it belong to?", "sql": "SELECT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T1.review_length LIKE 'Long' GROUP BY T2.business_id ORDER BY COUNT(T1.review_length) DESC LIMIT 1", "source_tables": ["categories", "business_categories", "reviews", "business"]}, "evidence": "long reviews refers to review_length = 'long'; most number of long reviews refers to MAX(COUNT(review_length = 'long')); category refers to category_name;"}
{"sample_id": 3770, "db_id": "public_review_platform", "final": {"question": "For the Yelp business which had the most number of \"short\" tips, which category does it belong to?", "sql": "SELECT DISTINCT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Tips AS T4 ON T3.business_id = T4.business_id WHERE T4.tip_length LIKE 'short'", "source_tables": ["categories", "business_categories", "tips", "business"]}, "evidence": "short tips refers to tip_length = 'short'; most number of short tips refers to MAX(COUNT(tip_length = 'short')); category refers to category_name;"}
{"sample_id": 3771, "db_id": "public_review_platform", "final": {"question": "In which year did the user who has given the most number of \"short\" tips join the Yelp?", "sql": "SELECT T2.user_yelping_since_year FROM Tips AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.tip_length LIKE 'short' GROUP BY T2.user_yelping_since_year ORDER BY COUNT(T1.tip_length) DESC LIMIT 1", "source_tables": ["users", "tips"]}, "evidence": "year the user join the Yelp refers to user_yelping_since_year; most number of short tips refers to MAX(COUNT(tip_length = 'Short'));"}
{"sample_id": 3772, "db_id": "public_review_platform", "final": {"question": "User No. 70271 only has given one tip to the Yelp business, which category was that business belonged to?", "sql": "SELECT T4.category_name FROM Tips AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T1.user_id = 70271", "source_tables": ["categories", "business_categories", "tips", "business"]}, "evidence": "user No. refers to user_id; short tip refers to tip_length = 'short'; category refers to category_name;"}
{"sample_id": 3773, "db_id": "public_review_platform", "final": {"question": "There was only one tip that user No. 69722 gave to the Yelp business, what was the ratings of that business?", "sql": "SELECT T2.stars FROM Tips AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.user_id = 69722", "source_tables": ["tips", "business"]}, "evidence": "short tip refers to tip_lenghth = 'short'; user No. refers to user_id; ratings refers to stars; stars = 5 means great experience; stars = 4 means good experience; stars = 3 means average experience; stars = 2 means bad experience; stars = 1 means terrible experience;\n"}
{"sample_id": 3774, "db_id": "public_review_platform", "final": {"question": "Give the percentage of \"Automotive\" businesses among all the Yelp businesses.", "sql": "SELECT CAST(SUM(CASE WHEN T2.category_name LIKE 'Automotive' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) AS 'percentage' FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id", "source_tables": ["categories", "business_categories"]}, "evidence": "automotive businesses refers to category_name = 'Automotive'; percentage = MULTIPLY(DIVIDE(SUM(category_name = 'Automotive'), COUNT(business_id)), 1.0);"}
{"sample_id": 3775, "db_id": "public_review_platform", "final": {"question": "What percentage more for the \"Women's Clothing\" Yelp businesses to \"Men's Clothing\"?", "sql": "SELECT CAST(SUM(CASE WHEN T2.category_name LIKE 'Women''s Clothing' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) - CAST(SUM(CASE WHEN T2.category_name LIKE 'Men''s Clothing' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) AS 'more percentage' FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id", "source_tables": ["categories", "business_categories"]}, "evidence": "Women's clothing refers to category_name = 'Women''s Clothing'; Men's clothing refers to category_name = 'Men''s Clothing'; percentage more = MULTIPLY(DIVIDE(SUBTRACT(SUM(category_name = 'Women''s Clothing'), SUM(category_name = 'Men''s Clothing')), COUNT(business_id)), 1.0);"}
{"sample_id": 3776, "db_id": "public_review_platform", "final": {"question": "Give the number of users who joined Yelp since \"2004\".", "sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year = 2004", "source_tables": ["users"]}, "evidence": "joined yelp since 2004 refers to user_yelping_since_year = 2004;"}
{"sample_id": 3777, "db_id": "public_review_platform", "final": {"question": "How many users who have joined Yelp since \"2005\" but have no fans?", "sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year = 2005 AND user_fans LIKE 'None'", "source_tables": ["users"]}, "evidence": "joined Yelp since 2005 refers to user_yelping_since_year = 2005; no fans refers to user_fans = 'None';"}
{"sample_id": 3778, "db_id": "public_review_platform", "final": {"question": "State the number of actively running Yelp businesses in \"Tolleson\".", "sql": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Tolleson' AND active LIKE 'TRUE'", "source_tables": ["business"]}, "evidence": "actively running refers to active = 'TRUE'; Tolleson refers to city = 'Tolleson';"}
{"sample_id": 3779, "db_id": "public_review_platform", "final": {"question": "What is the number of reviews from user No. \"21679\"?", "sql": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 21679", "source_tables": ["reviews"]}, "evidence": "user No. refers to user_id;"}
{"sample_id": 3780, "db_id": "public_review_platform", "final": {"question": "How many \"5\" star reviews does the Yelp business No. \"10682\" get?", "sql": "SELECT COUNT(review_length) FROM Reviews WHERE business_id = 10682 AND review_stars = 5", "source_tables": ["reviews"]}, "evidence": "5 star reviews refers to review_stars = 5; business No. refers to business_id;"}
{"sample_id": 3781, "db_id": "public_review_platform", "final": {"question": "Which closed/not running Yelp business in \"Sun City\" has got the most reviews? Give the business id.", "sql": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Sun City' AND T1.active LIKE 'FALSE' GROUP BY T1.business_id ORDER BY COUNT(T2.review_length) DESC LIMIT 1", "source_tables": ["reviews", "business"]}, "evidence": "closed/not running refers to active = 'False'; most reviews refers to MAX(COUNT(user_id));"}
{"sample_id": 3782, "db_id": "public_review_platform", "final": {"question": "For the only Yelp business in \"Yuma\" city, how many \"medium\" reviews did it get?", "sql": "SELECT COUNT(T2.review_length) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Yuma' AND T2.review_length LIKE 'Medium'", "source_tables": ["reviews", "business"]}, "evidence": "medium reviews refers to review_length = 'Medium';"}
{"sample_id": 3783, "db_id": "public_review_platform", "final": {"question": "Does Yelp business No.\"4960\" have TV?", "sql": "SELECT DISTINCT CASE WHEN T1.attribute_name LIKE 'Has TV' THEN 'yes' ELSE 'no' END FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.business_id = 4960", "source_tables": ["attributes", "business_attributes"]}, "evidence": "business No. refers to business_id; have TV refers to attribute_name = 'Has TV';"}
{"sample_id": 3784, "db_id": "public_review_platform", "final": {"question": "Give the number of \"dogs allowed\" Yelp businesses.", "sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name LIKE 'Dogs Allowed' AND T2.attribute_value LIKE 'TRUE'", "source_tables": ["attributes", "business_attributes"]}, "evidence": "number of Yelp businesses refers to business_id; dogs allowed refers to attribute_name = 'Dogs Allowed' AND attribute_value = 'true';"}
{"sample_id": 3785, "db_id": "public_review_platform", "final": {"question": "How many hours does the Yelp business No. \"5734\" open on Saturday?", "sql": "SELECT T1.closing_time - T1.opening_time AS 'hour' FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week LIKE 'Saturday' AND T1.business_id = 5734", "source_tables": ["business_hours", "days"]}, "evidence": "how many hours = SUBTRACT(closing_time, opening_time); business No. refers to business_id; open on Saturday refers to day_of_week = 'Saturday';"}
{"sample_id": 3786, "db_id": "public_review_platform", "final": {"question": "Tell the number of \"hair removal\" Yelp businesses.", "sql": "SELECT COUNT(T1.category_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.category_name LIKE 'Hair Removal'", "source_tables": ["categories", "business_categories"]}, "evidence": "hair removal refers to category_name = 'Hair Removal';"}
{"sample_id": 3787, "db_id": "public_review_platform", "final": {"question": "How many more \"Chinese\" than \"Filipino\" Yelp businesses?", "sql": "SELECT SUM(CASE WHEN T1.category_name LIKE 'Chinese' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.category_name LIKE 'Filipino' THEN 1 ELSE 0 END) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id", "source_tables": ["categories", "business_categories"]}, "evidence": "Chinese refers to category_name = 'Chinese'; Filipino refers to category_name = 'Filipino'; how many more = SUBTRACT(SUM(category_name = 'Chinese'), SUM(category_name = 'Filipino'));"}
{"sample_id": 3788, "db_id": "public_review_platform", "final": {"question": "User No.\"63469\" has got \"1\" like for a tip to the Yelp business, which city is that business located in?", "sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Tips AS T2 ON T1.business_id = T2.business_id WHERE T2.likes = 1 AND T2.user_id = 63469", "source_tables": ["tips", "business"]}, "evidence": "user No. refers to user_id;"}
{"sample_id": 3789, "db_id": "public_review_platform", "final": {"question": "How many types of music does Yelp business No.\"1141\" have?", "sql": "SELECT COUNT(T1.attribute_name) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value LIKE 'TRUE' AND T2.business_id = 1141", "source_tables": ["attributes", "business_attributes"]}, "evidence": "types of music refers to attribute_name LIKE '%music%' WHERE attribute_value = 'true'; business No. refers to business_id;\n"}
{"sample_id": 3790, "db_id": "public_review_platform", "final": {"question": "How many \"cute\" type of compliments does user No. 57400 get?", "sql": "SELECT COUNT(T1.compliment_type) FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.compliment_type LIKE 'cute' AND T2.user_id = 57400", "source_tables": ["compliments", "users_compliments"]}, "evidence": "type of compliments refers to compliment_type; user No. refers to user_id;"}
{"sample_id": 3791, "db_id": "public_review_platform", "final": {"question": "Who has got the most number of \"funny\" type of compliments? Give the user ID.", "sql": "SELECT user_id FROM Users_Compliments WHERE compliment_id IN ( SELECT compliment_id FROM Compliments WHERE compliment_type LIKE 'funny' )", "source_tables": ["compliments", "users_compliments"]}, "evidence": "type of compliments refers to compliment_type; most number of funny type of compliments refers to MAX(COUNT(number of compliments = 'high' WHERE compliment_type = 'funny'));"}
{"sample_id": 3792, "db_id": "public_review_platform", "final": {"question": "Give the number of \"drive-thru\" businesses in \"Scottsdale\" with business ID number less than \"1000\".", "sql": "SELECT T2.business_id FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.business_id < 1000 AND T3.city LIKE 'Scottsdale' AND T1.attribute_name LIKE 'Drive-Thru' AND T2.attribute_value LIKE 'TRUE'", "source_tables": ["attributes", "business_attributes", "business"]}, "evidence": "drive-thru refers to attribute_name = 'Drive-Thru' AND attribute_value = 'true'; Scottsdale refers to city = 'Scottsdale'; business_id < 1000;"}
{"sample_id": 3793, "db_id": "public_review_platform", "final": {"question": "What is the average rating for the all Yelp businesses that open 24 hours?", "sql": "SELECT CAST(SUM(T3.stars) AS REAL) / COUNT(T2.business_id) AS 'avg' FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name LIKE 'Open 24 Hours' AND T2.attribute_value LIKE 'TRUE'", "source_tables": ["attributes", "business_attributes", "business"]}, "evidence": "open 24 hours refers to attribute_name = 'Open 24 Hours' AND attribute_value = 'true'; rating refers to stars; average rating = AVG(stars);"}
{"sample_id": 3794, "db_id": "public_review_platform", "final": {"question": "For all the Yelp businesses that allow customers bring their own beer, what percentage of them are in \"Phoenix\"?", "sql": "SELECT CAST(SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.business_id) AS 'percentage' FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name LIKE 'BYOB' AND T2.attribute_value LIKE 'TRUE'", "source_tables": ["attributes", "business_attributes", "business"]}, "evidence": "bring their own beer refers to attribute_name = 'BYOB' AND attribute_value = 'TRUE'; Phoenix refers to city = 'Phoenix'; percentage = MULTIPLY(DIVIDE(SUM(city = 'Phoenix'), COUNT(business_id)), 1.0)"}
{"sample_id": 3795, "db_id": "public_review_platform", "final": {"question": "List the names of business in AZ with a rating of 5.", "sql": "SELECT business_id FROM Business WHERE state LIKE 'AZ' AND stars = 5", "source_tables": ["business"]}, "evidence": "AZ refers to state = 'AZ'; rating refers to stars;"}
{"sample_id": 3796, "db_id": "public_review_platform", "final": {"question": "How many active businesses of city are underrated?", "sql": "SELECT COUNT(business_id) FROM Business WHERE review_count LIKE 'Low' AND active LIKE 'TRUE'", "source_tables": ["business"]}, "evidence": "active businesses refers to active = 'true'; underrated refers to review_count = 'Low';"}
{"sample_id": 3797, "db_id": "public_review_platform", "final": {"question": "How many user ids from 1 to 20 have no fan users and have low ratings?", "sql": "SELECT COUNT(user_id) FROM Users WHERE user_id BETWEEN 1 AND 20 AND user_fans LIKE 'None' AND user_review_count LIKE 'Low'", "source_tables": ["users"]}, "evidence": "user_id BETWEEN 1 AND 20; no fan users refers to user_fans = 'None'; low ratings refers to user_review_count = 'Low';"}
{"sample_id": 3798, "db_id": "public_review_platform", "final": {"question": "Indicate the opening hours of businesses are with category in fashion.", "sql": "SELECT T4.opening_time FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T1.category_name LIKE 'Fashion'", "source_tables": ["categories", "business_categories", "business_hours", "business"]}, "evidence": "opening hours refers to opening_time; category refers to category_name;"}
{"sample_id": 3799, "db_id": "public_review_platform", "final": {"question": "How many businesses operating in the shopping business have opening times before 8AM?", "sql": "SELECT COUNT(T3.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T4.opening_time < '8AM' AND T1.category_name LIKE 'Shopping'", "source_tables": ["categories", "business_categories", "business_hours", "business"]}, "evidence": "shopping business refers to category_name = 'Shopping'; opening time before 8AM refers to opening_time < '8AM';"}
{"sample_id": 3800, "db_id": "public_review_platform", "final": {"question": "Provide name of businesses whose category is pets and are still opened after 9PM.", "sql": "SELECT T3.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T4.closing_time > '9PM' AND T1.category_name LIKE 'Pets'", "source_tables": ["categories", "business_categories", "business_hours", "business"]}, "evidence": "category refers to category_name; open after 9pm refers to closing_time > '9PM';"}
{"sample_id": 3801, "db_id": "public_review_platform", "final": {"question": "How many businesses with the category are open from Monday to Thursday?", "sql": "SELECT COUNT(T2.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id INNER JOIN Days AS T5 ON T4.day_id = T5.day_id WHERE T5.day_of_week LIKE 'Monday' OR T5.day_of_week LIKE 'Tuesday' OR T5.day_of_week LIKE 'Wednesday' OR T5.day_of_week LIKE 'Thursday'", "source_tables": ["business_hours", "days", "categories", "business_categories", "business"]}, "evidence": "open from Monday to Thursday refers to day_of_week BETWEEN Monday AND Thursday and day_id BETWEEN 2 AND 5;"}
{"sample_id": 3802, "db_id": "public_review_platform", "final": {"question": "Please indicate the review count of the \"active life\" businesses in Phoenix.", "sql": "SELECT COUNT(*) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Active Life' AND T3.city = 'Phoenix'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "active life refers to category_name = 'Active Life'; Phoenix refers to city = 'Phoenix';"}
{"sample_id": 3803, "db_id": "public_review_platform", "final": {"question": "Please list the businesses name with a rating less than 5 whose category name is men's clothing.", "sql": "SELECT T2.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name LIKE 'Men''s Clothing' AND T3.stars < 5", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "businesses name refers to business_id; rating refers to stars; stars < 5;"}
{"sample_id": 3804, "db_id": "public_review_platform", "final": {"question": "Which businesses are no longer in business but have a low number of votes useful?", "sql": "SELECT DISTINCT T1.business_id FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.active LIKE 'FALSE' AND T1.review_votes_useful LIKE 'Low'", "source_tables": ["categories", "business_categories", "reviews", "business"]}, "evidence": "no longer in business refers to active = 'False'; low number of votes useful refers to review_votes_useful = 'Low';"}
{"sample_id": 3805, "db_id": "public_review_platform", "final": {"question": "Please list the businesses names whose length of user review is long with business id from 1 to 20.", "sql": "SELECT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T1.review_length LIKE 'Long' AND T3.category_id BETWEEN 1 AND 20 GROUP BY T4.category_name", "source_tables": ["categories", "business_categories", "reviews", "business"]}, "evidence": "businesses names refers to business_id; length of user review is long refers to review_length = 'Long'; business_id BETWEEN 1 AND 20;"}
{"sample_id": 3806, "db_id": "public_review_platform", "final": {"question": "Please provide the attribute values \u200b\u200bof the bussinesses with fashion in Scottsdale.", "sql": "SELECT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T1.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T4.category_name LIKE 'Fashion' AND T1.city LIKE 'Scottsdale'", "source_tables": ["categories", "business_categories", "business_attributes", "business"]}, "evidence": "fashion refers to category_name = 'Fashion'; Scottsdale refers to city = 'Scottsdale';"}
{"sample_id": 3807, "db_id": "public_review_platform", "final": {"question": "How many compliments received from medium users that Phoenix city achieved?", "sql": "SELECT COUNT(T1.number_of_compliments) FROM Users_Compliments AS T1 INNER JOIN Reviews AS T2 ON T1.user_id = T2.user_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.city LIKE 'Phoenix' AND T1.number_of_compliments LIKE 'Medium'", "source_tables": ["users_compliments", "reviews", "business"]}, "evidence": "medium refers to number_of_compliments = 'Medium';"}
{"sample_id": 3808, "db_id": "public_review_platform", "final": {"question": "Provide the businesses name in Tempe city whose opening hours are earlier than 8AM.", "sql": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T3.city LIKE 'Tempe' AND T4.opening_time < '8AM'", "source_tables": ["categories", "business_categories", "business_hours", "business"]}, "evidence": "opening hours refers to opening_time; earlier than 8AM refers to opening_time < '8AM';"}
{"sample_id": 3809, "db_id": "public_review_platform", "final": {"question": "How many businesses in Glendale city that are still running is opened from 8AM to 6PM?", "sql": "SELECT COUNT(T1.category_name) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T3.city LIKE 'Glendale' AND T4.opening_time LIKE '8AM' AND T4.closing_time LIKE '6PM'", "source_tables": ["categories", "business_categories", "business_hours", "business"]}, "evidence": "still running refers to active = 'true'; opened from 8AM to 6PM refers to opening_time = '8AM' AND closing_time = '6PM';"}
{"sample_id": 3810, "db_id": "public_review_platform", "final": {"question": "How many businesses are there in Phoenix city? Find the percentage of businesses in Phoenix city in the total city.", "sql": "SELECT SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS 'num' , CAST(SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.city) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(city = 'Phoenix' END), COUNT(category_id)), 1.0);"}
{"sample_id": 3811, "db_id": "public_review_platform", "final": {"question": "How many cities have businesses with active life category? Find the percentage of the city where the review count that is low in total review count.", "sql": "SELECT SUM(CASE WHEN T2.category_name LIKE 'Active Life' THEN 1 ELSE 0 END) AS 'num' , CAST(SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS REAL) * 100 / ( SELECT COUNT(T3.review_count) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T3.review_count LIKE 'Low' ) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "category refers to category_name; percentage = MULTIPLY(DIVIDE(SUM(category_name = 'Active Life'), SUM(review_count = 'LOW')), 1.0);"}
{"sample_id": 3812, "db_id": "public_review_platform", "final": {"question": "How many active businesses are there in Phoenix?", "sql": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Phoenix' AND active LIKE 'TRUE'", "source_tables": ["business"]}, "evidence": "active businesses refers to active = 'true'; Phoenix refers to city = 'Phoenix';"}
{"sample_id": 3813, "db_id": "public_review_platform", "final": {"question": "How many businesses in Scottsdale are rated as \"wonderful experience\"?", "sql": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Scottsdale' AND stars > 3", "source_tables": ["business"]}, "evidence": "Scottsdale refers to city = 'Scottsdale'; rated refers to stars; rated as wonderful experience refers to stars > 3;"}
{"sample_id": 3814, "db_id": "public_review_platform", "final": {"question": "What is the average rating of inactive businesses?", "sql": "SELECT CAST(SUM(stars) AS REAL) / COUNT(business_id) AS 'average' FROM Business WHERE active LIKE 'FALSE'", "source_tables": ["business"]}, "evidence": "rating refers to stars; inactive refers to active = 'False'; average rating of inactive businesses = DIVIDE(SUM(stars), COUNT(business_id));"}
{"sample_id": 3815, "db_id": "public_review_platform", "final": {"question": "How many businesses in AZ state have the beer_and_wine attribute?", "sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id WHERE T2.attribute_value LIKE 'beer_and_wine' AND T1.state LIKE 'AZ'", "source_tables": ["business_attributes", "business"]}, "evidence": "beer_and_wine refers to attribute_value = 'beer_and_wine';"}
{"sample_id": 3816, "db_id": "public_review_platform", "final": {"question": "Which city has the most businesses whose attribute is full_bar?", "sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id WHERE T2.attribute_value LIKE 'full_bar' GROUP BY T1.city", "source_tables": ["business_attributes", "business"]}, "evidence": "most business refers to MAX(business_id); full_bar refers to attribute_value = 'full_bar';"}
{"sample_id": 3817, "db_id": "public_review_platform", "final": {"question": "How many businesses in the fashion industry are rated 5 stars?", "sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.stars = 5 AND T3.category_name LIKE 'Fashion'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "fashion industry refers to category_name = 'Fashion';"}
{"sample_id": 3818, "db_id": "public_review_platform", "final": {"question": "Which city has the highest number of businesses in the food industry whose number of reviews is high?", "sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.review_count LIKE 'High' AND T3.category_name LIKE 'Food' GROUP BY T1.city", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "highest number of businesses refers to MAX(business_id); food industry refers to category_name = 'Food'; number of reviews is high refers to review_count = 'High';"}
{"sample_id": 3819, "db_id": "public_review_platform", "final": {"question": "Please list all business IDs in Mesa city that review stars of over 3.", "sql": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Mesa' AND T2.review_stars > 3 GROUP BY T1.business_id", "source_tables": ["reviews", "business"]}, "evidence": "stars > 3;"}
{"sample_id": 3820, "db_id": "public_review_platform", "final": {"question": "Which city has the least number of businesses whose amount of funny votes is low?", "sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T2.review_votes_funny LIKE 'low' GROUP BY T1.city", "source_tables": ["reviews", "business"]}, "evidence": "least number of businesses refers to MIN(business_id); funny votes is low refers to review_votes_funny = 'Low';"}
{"sample_id": 3821, "db_id": "public_review_platform", "final": {"question": "What percentage of businesses are in the Real Estate sector and have the rating of 5 out of all businesses in Chandler?", "sql": "SELECT CAST(SUM(CASE WHEN T1.stars = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) AS 'percentage' FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.city LIKE 'Chandler' AND T3.category_name LIKE 'Real Estate'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "Real Estate sector refers to category_name = 'Real Estate'; rating of 5 refers to stars = 5; Chandler refers to city = 'Chandler'; percentage = MULTIPLY(DIVIDE(SUM(category_name = 'Real Estate' and stars = 5), COUNT(business_id)), 100);"}
{"sample_id": 3822, "db_id": "public_review_platform", "final": {"question": "How many users who started yelping since 2012 have sent a high number of funny votes?", "sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year = 2012 AND user_votes_funny LIKE 'High'", "source_tables": ["users"]}, "evidence": "users who started yelping in 2012 refers to user_yelping_since_year = '2012'; high number of funny votes refers to user_votes_funny = 'High';"}
{"sample_id": 3823, "db_id": "public_review_platform", "final": {"question": "What is the number of useful votes that the user 52592 received when reviewed for business number 2?", "sql": "SELECT review_votes_useful FROM Reviews WHERE user_id = 52592 AND business_id = 2", "source_tables": ["reviews"]}, "evidence": "number of useful votes refers to review_votes_useful; business number refers to business_id;"}
{"sample_id": 3824, "db_id": "public_review_platform", "final": {"question": "What are the attribute numbers that are related to payment?", "sql": "SELECT attribute_id FROM Attributes WHERE attribute_name LIKE '%payment%'", "source_tables": ["attributes"]}, "evidence": "attribute numbers refers to attribute_id; related to payment refers to attribute_name like '%payment%';"}
{"sample_id": 3825, "db_id": "public_review_platform", "final": {"question": "How long was the review for business number 2 that user number 612 wrote?", "sql": "SELECT review_length FROM Reviews WHERE user_id = 612 AND review_stars = 5 AND business_id = 2", "source_tables": ["reviews"]}, "evidence": "how long was the review refers to review_length; business number refers to business_id; user number refers to user_id;"}
{"sample_id": 3826, "db_id": "public_review_platform", "final": {"question": "How many businesses are actively running in Gilbert City?", "sql": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Gilbert' AND active LIKE 'True'", "source_tables": ["business"]}, "evidence": "actively running refers to active = 'true';"}
{"sample_id": 3827, "db_id": "public_review_platform", "final": {"question": "How many businesses in the AZ state got low quality of reviews?", "sql": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND review_count LIKE 'Low'", "source_tables": ["business"]}, "evidence": "low quality of reviews refers to review_count = 'low';"}
{"sample_id": 3828, "db_id": "public_review_platform", "final": {"question": "Please state any three business numbers in AZ state that have received the \"Great experience\" review stars.", "sql": "SELECT DISTINCT T2.business_id FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T2.state LIKE 'AZ' AND T1.review_stars = 5 LIMIT 3", "source_tables": ["reviews", "business"]}, "evidence": "business numbers refers to business_id; great experience review stars refers to review_stars = 5;"}
{"sample_id": 3829, "db_id": "public_review_platform", "final": {"question": "Please name one attribute that business number 2 does not have.", "sql": "SELECT T1.attribute_name FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value LIKE 'none' LIMIT 1", "source_tables": ["attributes", "business_attributes"]}, "evidence": "business number refers to business_id; business_id = 2; does not have refers to attribute_value = 'none';"}
{"sample_id": 3830, "db_id": "public_review_platform", "final": {"question": "How many \"cool\" compliments did user number 33 receive?", "sql": "SELECT COUNT(T2.compliment_type) FROM Users_Compliments AS T1 INNER JOIN Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.user_id = 33 AND T2.compliment_type LIKE 'cool'", "source_tables": ["compliments", "users_compliments"]}, "evidence": "cool compliments refers to compliment_type = 'cool'; user number refers to user_id;"}
{"sample_id": 3831, "db_id": "public_review_platform", "final": {"question": "What are the opening hours of business number 53 on Friday?", "sql": "SELECT T1.closing_time - T1.opening_time AS 'opening hours' FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week LIKE 'Friday' AND T1.business_id = 53", "source_tables": ["business_hours", "days"]}, "evidence": "opening hours refers to opening_time; business number refers to business_id; Friday refers to day_of_week = 'Friday';"}
{"sample_id": 3832, "db_id": "public_review_platform", "final": {"question": "What are the attributes that business number 56 have?", "sql": "SELECT T1.attribute_name FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value LIKE 'TRUE' AND T2.business_id = 56", "source_tables": ["attributes", "business_attributes"]}, "evidence": "business number refers to business_id; attributes that business have refers to attribute_value = 'true';"}
{"sample_id": 3833, "db_id": "public_review_platform", "final": {"question": "What are the categories that business number 15 belongs to?", "sql": "SELECT T2.category_name FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.business_id = 15", "source_tables": ["categories", "business_categories"]}, "evidence": "business number refers to business_id;"}
{"sample_id": 3834, "db_id": "public_review_platform", "final": {"question": "How many businesses are there in Scottsdale city under the category of \"Beauty & Spas\"?", "sql": "SELECT COUNT(T2.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.city LIKE 'Scottsdale' AND T1.category_name LIKE 'Beauty & Spas'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "category refers to category_name;"}
{"sample_id": 3835, "db_id": "public_review_platform", "final": {"question": "Please list any two user numbers that have an \"Uber\" number of cute compliments.", "sql": "SELECT T1.user_id FROM Users_Compliments AS T1 INNER JOIN Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.number_of_compliments LIKE 'Uber' AND T2.compliment_type LIKE 'cute' LIMIT 2", "source_tables": ["compliments", "users_compliments"]}, "evidence": "user numbers refers to user_id; Uber number refers to number_of_compliments = 'Uber'; cute compliments refers to compliment_type = 'cute';"}
{"sample_id": 3836, "db_id": "public_review_platform", "final": {"question": "How many businesses operating in the \"Accessories\" category have received a \"wonderful experience\" review from users?", "sql": "SELECT COUNT(T2.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.stars > 3 AND T1.category_name LIKE 'Accessories'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "Accessories category refers to category_name = 'Accessories'; wonderful experience review refers to stars > 3;"}
{"sample_id": 3837, "db_id": "public_review_platform", "final": {"question": "How long does business number 12 in Scottsdale stay open on day number 3?", "sql": "SELECT T2.closing_time - T2.opening_time AS 'hour' FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.business_id = 12 AND T1.city LIKE 'Scottsdale' AND T2.day_id = 3", "source_tables": ["business_hours", "business"]}, "evidence": "business number refers to business_id; Scottsdale refers to city = 'Scottsdale'; day number refers to day_id;"}
{"sample_id": 3838, "db_id": "public_review_platform", "final": {"question": "How many businesses in AZ state do not open on Thursday?", "sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Checkins AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.label_time_4 LIKE 'None' AND T1.state LIKE 'AZ' AND T3.day_of_week LIKE 'Thursday'", "source_tables": ["days", "checkins", "business"]}, "evidence": "do not open on Thursday refers to day_of_week = 'Thursday' AND label_time_4 = 'None';"}
{"sample_id": 3839, "db_id": "public_review_platform", "final": {"question": "How many businesses of Yelp are in Scottsdale?", "sql": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Scottsdale'", "source_tables": ["business"]}, "evidence": "Scottsdale refers to city = 'Scottsdale';"}
{"sample_id": 3840, "db_id": "public_review_platform", "final": {"question": "Among the Yelp_Businesses in Arizona, how many of them are still running?", "sql": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND active LIKE 'True'", "source_tables": ["business"]}, "evidence": "Arizona refers to state = 'AZ'; still running refers to active = 'true';"}
{"sample_id": 3841, "db_id": "public_review_platform", "final": {"question": "How many Yelp_Businesses in Scottsdale have received positive comments in the Elitestar rating?", "sql": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Scottsdale' AND stars > 3", "source_tables": ["business"]}, "evidence": "Scottsdale refers to city = 'Scottsdale'; positive comments refers to stars > 3; Elitestar rating refers to stars;"}
{"sample_id": 3842, "db_id": "public_review_platform", "final": {"question": "Which city has more Yelp_Business that's more appealing to users, Scottsdale or Anthem?", "sql": "SELECT city FROM Business ORDER BY review_count DESC LIMIT 1", "source_tables": ["business"]}, "evidence": "more appealing to users refers to MAX(review_count);"}
{"sample_id": 3843, "db_id": "public_review_platform", "final": {"question": "How many Yelp_Businesses in Arizona have a Elitestar rating of over 4?", "sql": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND stars > 4", "source_tables": ["business"]}, "evidence": "Arizona refers to state = 'AZ'; Elitestar rating of over 4 refers to stars > 4;"}
{"sample_id": 3844, "db_id": "public_review_platform", "final": {"question": "How many Yelp_Businesses are there in Arizona in total?", "sql": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ'", "source_tables": ["business"]}, "evidence": "Arizona refers to state = 'AZ';"}
{"sample_id": 3845, "db_id": "public_review_platform", "final": {"question": "Please list the cities of the Yelp_Businesses that have gotten a 5 in the Elitestar rating.", "sql": "SELECT city FROM Business WHERE stars = 5 GROUP BY city", "source_tables": ["business"]}, "evidence": "5 in the Elitestar rating refers to stars = 5;"}
{"sample_id": 3846, "db_id": "public_review_platform", "final": {"question": "How many reviews have the user whose ID is 3 posted?", "sql": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 3", "source_tables": ["reviews"]}, "evidence": ""}
{"sample_id": 3847, "db_id": "public_review_platform", "final": {"question": "How many reviews made by user whose ID is 3 are long?", "sql": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 3 AND review_length LIKE 'Long'", "source_tables": ["reviews"]}, "evidence": "long refers to review_length = 'Long';"}
{"sample_id": 3848, "db_id": "public_review_platform", "final": {"question": "Among the long reviews made by user ID 3, how many of them have received a medium number of useful votes?", "sql": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 3 AND review_length LIKE 'Long' AND review_votes_useful LIKE 'Medium'", "source_tables": ["reviews"]}, "evidence": "long reviews refers to review_length = 'Long'; medium number of useful votes refers to review_votes_useful = 'medium';"}
{"sample_id": 3849, "db_id": "public_review_platform", "final": {"question": "How many users have joined Yelp since the year 2012?", "sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year = 2012", "source_tables": ["users"]}, "evidence": "since year 2012 refers to user_yelping_since_year = '2012'"}
{"sample_id": 3850, "db_id": "public_review_platform", "final": {"question": "Please list the IDs of the users who have a high number of followers.", "sql": "SELECT user_id FROM Users WHERE user_fans LIKE 'High' GROUP BY user_id", "source_tables": ["users"]}, "evidence": "high number of followers refers to user_fans = 'High'"}
{"sample_id": 3851, "db_id": "public_review_platform", "final": {"question": "How many Yelp_Businesses do not provide alcohol?", "sql": "SELECT COUNT(T1.attribute_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name LIKE 'Alcohol' AND T2.attribute_value LIKE 'none'", "source_tables": ["attributes", "business_attributes"]}, "evidence": "do not provide alcohol refers to attribute_name = 'Alcohol'and attribute_value = 'none'\n"}
{"sample_id": 3852, "db_id": "public_review_platform", "final": {"question": "Among the Yelp_Businesses in Arizona, how many of them do not provide alcohol?", "sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name LIKE 'Alcohol' AND T2.attribute_value LIKE 'none' AND T3.state LIKE 'AZ'", "source_tables": ["attributes", "business_attributes", "business"]}, "evidence": "Arizona refers to state = 'AZ'; do not provide alcohol refers to attribute_name = 'Alcohol' and attribute_value = 'none'"}
{"sample_id": 3853, "db_id": "public_review_platform", "final": {"question": "Please list the business IDs of all the Yelp_Businesses that are good for kids.", "sql": "SELECT T2.business_id FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name LIKE 'Good for Kids' AND T2.attribute_value LIKE 'TRUE'", "source_tables": ["attributes", "business_attributes"]}, "evidence": "good for kids refers to attribute_name = 'Good for Kids' and attribute_value = 'true'\n"}
{"sample_id": 3854, "db_id": "public_review_platform", "final": {"question": "How many Yelp_Business falls under the category of \"Shopping\"?", "sql": "SELECT COUNT(T1.category_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.category_name LIKE 'Shopping'", "source_tables": ["categories", "business_categories"]}, "evidence": "category of \"Shopping\" refers to category_name = 'Shopping'"}
{"sample_id": 3855, "db_id": "public_review_platform", "final": {"question": "Under which categories is Yelp_Business no. 1?", "sql": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T2.business_id = 1", "source_tables": ["categories", "business_categories"]}, "evidence": "categories refers to category_name; Yelp_Business no.1 refers to business_id = 1"}
{"sample_id": 3856, "db_id": "public_review_platform", "final": {"question": "Among the Yelp_Businesses which are still running, how many of them fall under the category of \"Food\"?", "sql": "SELECT COUNT(T3.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Tips AS T4 ON T3.business_id = T4.business_id WHERE T1.category_name LIKE 'Food' AND T3.active LIKE 'TRUE'", "source_tables": ["categories", "business_categories", "tips", "business"]}, "evidence": "are still running refers to active = 'true'; the category of \"Food\" refers to category_name = 'Food'"}
{"sample_id": 3857, "db_id": "public_review_platform", "final": {"question": "How many Yelp_Business in Anthem are under the category of \"Food\"?", "sql": "SELECT COUNT(T3.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name LIKE 'Food' AND T3.city LIKE 'Anthem'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "in Anthem refers to city = 'Anthem'; the category of \"Food\" refers to category_name = 'Food'"}
{"sample_id": 3858, "db_id": "public_review_platform", "final": {"question": "Please list the business ID of the Yelp_Business with the highest Elitestar rating under the category \"Food\".", "sql": "SELECT T2.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name LIKE 'Food' ORDER BY T3.stars DESC LIMIT 1", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "under the category \"Food\" refers to category_name = 'Food'"}
{"sample_id": 3859, "db_id": "public_review_platform", "final": {"question": "How many Yelp_Business under the category of \"Food\" are good for kids?", "sql": "SELECT COUNT(T3.stars) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Attributes AS T4 ON T3.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.category_name LIKE 'Food' AND T5.attribute_name LIKE 'Good for Kids' AND T4.attribute_value LIKE 'TRUE'", "source_tables": ["attributes", "categories", "business_categories", "business_attributes", "business"]}, "evidence": "under the category of \"Food\" refers to category_name = 'Food'; are good for kids refers to attribute_name = 'Good for Kids' and attribute_value = 'true'"}
{"sample_id": 3860, "db_id": "public_review_platform", "final": {"question": "How many Yelp_Business in Arizona has user no. 3 reviewed?", "sql": "SELECT COUNT(T2.business_id) FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T2.state LIKE 'AZ' AND T1.user_id = 3", "source_tables": ["reviews", "business"]}, "evidence": "in Arizona refers to state = 'AZ'; user no. 3 refers to user_id = 3"}
{"sample_id": 3861, "db_id": "public_review_platform", "final": {"question": "Please list all the categories of the Yelp_Business in Arizona.", "sql": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.state LIKE 'AZ' GROUP BY T1.category_name", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "categories refers to category_name; in Arizona refers to state = 'AZ'"}
{"sample_id": 3862, "db_id": "public_review_platform", "final": {"question": "How long does Yelp_Business no.1 open on Tuesdays?", "sql": "SELECT T1.closing_time - T1.opening_time AS 'opening hours' FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week LIKE 'Tuesday' AND T1.business_id = 1", "source_tables": ["business_hours", "days"]}, "evidence": "\"How long\" and \"how much time\" are synonyms; how much time does this business open refers to subtract(closing_time, opening_time); Yelp_Business no.1 refers to business_id = 1; Tuesdays refers to day_of_week = 'Tuesday'"}
{"sample_id": 3863, "db_id": "public_review_platform", "final": {"question": "When does Yelp_Business no.1 open on Tuesdays?", "sql": "SELECT T1.opening_time FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week LIKE 'Tuesday' AND T1.business_id = 1", "source_tables": ["business_hours", "days"]}, "evidence": "Yelp_Business no.1 refers to business_id = 1; open on refers to opening_time; Tuesdays refers to day_of_week = 'Tuesday'"}
{"sample_id": 3864, "db_id": "public_review_platform", "final": {"question": "How many Yelp_Business close after 8PM on Mondays?", "sql": "SELECT COUNT(T1.business_id) FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week LIKE 'Monday' AND T1.closing_time > '8PM'", "source_tables": ["business_hours", "days"]}, "evidence": "close after 8PM refers to closing_time = '9PM' or closing_time = '10PM' closing_time = '11PM' closing_time = '12PM'; Mondays refers to day_of_week = 'Monday'"}
{"sample_id": 3865, "db_id": "public_review_platform", "final": {"question": "Please list the opening time on Mondays of all the Yelp_Businesses in Anthem that are still running.", "sql": "SELECT T1.opening_time FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.day_of_week LIKE 'Monday' AND T3.city LIKE 'Anthem' AND T3.active LIKE 'True' GROUP BY T1.opening_time", "source_tables": ["business_hours", "days", "business"]}, "evidence": "Mondays refers to day_of_week = 'Monday'; in Anthem refers to city = 'Anthem'; are still running refers to active = 'true'"}
{"sample_id": 3866, "db_id": "public_review_platform", "final": {"question": "Among the Yelp_Business in Arizona, how many of them closes at 12PM on Sundays?", "sql": "SELECT COUNT(T1.business_id) FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.day_of_week LIKE 'Sunday' AND T1.closing_time LIKE '12PM' AND T3.state LIKE 'AZ'", "source_tables": ["business_hours", "days", "business"]}, "evidence": "in Arizona refers to state = 'AZ'; closes at 12PM refers to closing_time = '12PM'; on Sundays refers to day_of_week = 'Sunday'"}
{"sample_id": 3867, "db_id": "public_review_platform", "final": {"question": "Please list the categories of the Yelp_Business that closes at 12PM on Sundays.", "sql": "SELECT T4.category_name FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business_Categories AS T3 ON T1.business_id = T3.business_id INNER JOIN Categories AS T4 ON T4.category_id = T4.category_id WHERE T1.closing_time = '12PM' AND T2.day_of_week = 'Sunday' GROUP BY T4.category_name", "source_tables": ["categories", "business_categories", "business_hours", "days"]}, "evidence": "categories refers to category_name; closes at 12PM refers to closing_time = '12PM'; on Sundays refers to day_of_week = 'Sunday'"}
{"sample_id": 3868, "db_id": "public_review_platform", "final": {"question": "How many \"Good for Kids\" Yelp_Businesses are open everyday of the week?", "sql": "SELECT COUNT(T1.business_id) FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business_Attributes AS T3 ON T1.business_id = T3.business_id INNER JOIN Attributes AS T4 ON T4.attribute_id = T4.attribute_id WHERE T2.day_id IN (1, 2, 3, 4, 5, 6, 7) AND T4.attribute_name = 'Good for Kids' AND T3.attribute_value = 'true'", "source_tables": ["attributes", "business_hours", "days", "business_attributes"]}, "evidence": "Good for Kids refers to attribute_name = 'Good for Kids'and attribute_value = 'true'; open everyday refers to day_id between 1 and 7"}
{"sample_id": 3869, "db_id": "public_review_platform", "final": {"question": "How many users became an elite user the same year they joined Yelp?", "sql": "SELECT COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = T2.year_id", "source_tables": ["users", "elite"]}, "evidence": "became an elite user the same year they joined Yelp refers to user_yelping_since_year = year_id"}
{"sample_id": 3870, "db_id": "public_review_platform", "final": {"question": "What is the longest business time on Mondays for a Yelp_Business under the category \"Shopping\"?", "sql": "SELECT T1.closing_time + 12 - T1.opening_time AS 'hour' FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id INNER JOIN Business_Categories AS T4 ON T3.business_id = T4.business_id INNER JOIN Categories AS T5 ON T4.category_id = T5.category_id WHERE T2.day_of_week LIKE 'Monday' AND T5.category_name LIKE 'Shopping' ORDER BY T1.closing_time + 12 - T1.opening_time DESC LIMIT 1", "source_tables": ["business_hours", "days", "categories", "business_categories", "business"]}, "evidence": "longest business time refers to max(subtract(closing_time, opening_time)); on Mondays refers to day_of_week = 'Monday';\u00a0 category \"Shopping\" refers to category_name = 'Shopping'"}
{"sample_id": 3871, "db_id": "public_review_platform", "final": {"question": "Please list the business IDs of the Yelp_Business that have a business time of longer than 12 hours on Sundays.", "sql": "SELECT T1.business_id FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T1.closing_time + 12 - T1.opening_time > 12 AND T2.day_of_week LIKE 'Sunday' GROUP BY T1.business_id", "source_tables": ["business_hours", "days", "business"]}, "evidence": "business time of longer than 12 hours refers to subtract(closing_time, opening_time) > 12; on Sundays refers to day_of_week = 'Sunday'"}
{"sample_id": 3872, "db_id": "public_review_platform", "final": {"question": "How many elite users have reviewed Yelp_Business no.1?", "sql": "SELECT COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id INNER JOIN Reviews AS T3 ON T1.user_id = T3.user_id WHERE T3.business_id = 1", "source_tables": ["users", "elite", "reviews"]}, "evidence": "Yelp_Business no.1 refers to business_id = 1"}
{"sample_id": 3873, "db_id": "public_review_platform", "final": {"question": "Among the users who have posted more than 10 reviews, how many users are elite users?", "sql": "SELECT COUNT(T4.user_id) FROM ( SELECT T1.user_id FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id INNER JOIN Reviews AS T3 ON T1.user_id = T3.user_id WHERE T3.user_id IS NOT NULL GROUP BY T3.user_id HAVING COUNT(T3.user_id) > 10 ) T4", "source_tables": ["users", "elite", "reviews"]}, "evidence": "posted more than 10 reviews refers to count(Reviews.user_id) > 10"}
{"sample_id": 3874, "db_id": "public_review_platform", "final": {"question": "Which Yelp_Business in Arizona gets the most number of reviews?", "sql": "SELECT T1.user_id FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T2.state LIKE 'AZ' GROUP BY T1.user_id ORDER BY COUNT(T1.user_id) DESC LIMIT 1", "source_tables": ["reviews", "business"]}, "evidence": "Arizona refers to state = 'AZ'; gets the most number of reviews refers to max(count(Reviews.business_id))"}
{"sample_id": 3875, "db_id": "public_review_platform", "final": {"question": "How many stars on average does a Yelp_Business in Anthem get from a user review?", "sql": "SELECT AVG(T2.review_stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Anthem'", "source_tables": ["reviews", "business"]}, "evidence": "in Anthem refers to city = 'Anthem'; stars on average = avg(review_stars)"}
{"sample_id": 3876, "db_id": "public_review_platform", "final": {"question": "How many stars on average does user no.3 give to Yelp_Business in Arizona?", "sql": "SELECT AVG(T2.review_stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.state LIKE 'AZ' AND T2.user_id = 3", "source_tables": ["reviews", "business"]}, "evidence": "user no.3 refers to user_id = 3; in Arizona refers to state = 'AZ'; stars on average = avg(review_stars(user_id = 3))"}
{"sample_id": 3877, "db_id": "public_review_platform", "final": {"question": "What is the average business time for Yelp_Business no.1 on weekends?", "sql": "SELECT T1.closing_time + 12 - T1.opening_time AS 'avg opening hours' FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T1.business_id = 1 AND (T2.day_of_week = 'Sunday' OR T2.day_of_week = 'Sunday')", "source_tables": ["business_hours", "days"]}, "evidence": "Yelp_Business no.1 refers to business_id = 1; on weekends refers to day_of_week = 'Saturday' or day_of_week = 'Sunday'; average business time refers to DIVIDE(SUBTRACT(closing_time, opening_time), 2)"}
{"sample_id": 3878, "db_id": "public_review_platform", "final": {"question": "What is the average Elitestar rating for a Yelp_Business that closes at 12PM on Sundays?", "sql": "SELECT CAST(SUM(T3.stars) AS REAL) / COUNT(T1.business_id) AS 'average stars' FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.day_of_week LIKE 'Sunday' AND T1.closing_time LIKE '12PM'", "source_tables": ["business_hours", "days", "business"]}, "evidence": "average Elitestar rating refers to DIVIDE(SUM(stars), COUNT(business_id)); closes at 12PM refers to closing_time = '12PM'; on Sundays refers to day_of_week = 'Sunday'"}
{"sample_id": 3879, "db_id": "public_review_platform", "final": {"question": "How many of the busineses are in Casa Grande?", "sql": "SELECT COUNT(city) FROM Business WHERE city LIKE 'Casa Grande'", "source_tables": ["business"]}, "evidence": "in Casa Grande refers to city = 'Casa Grande'"}
{"sample_id": 3880, "db_id": "public_review_platform", "final": {"question": "What is the total number of active businesses in AZ with a low review count?", "sql": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND active LIKE 'True' AND review_count LIKE 'low'", "source_tables": ["business"]}, "evidence": "active businesses refers to active = 'true'; in AZ refers to state = 'AZ'\n"}
{"sample_id": 3881, "db_id": "public_review_platform", "final": {"question": "List down the business ID with a star range from 2 to 3, located at Mesa.", "sql": "SELECT business_id FROM Business WHERE city LIKE 'Mesa' AND stars BETWEEN 2 AND 3", "source_tables": ["business"]}, "evidence": "star range from 2 to 3 refers to stars > = 2 AND stars < 4;\u00a0 located at Mesa refers to city = 'Mesa'"}
{"sample_id": 3882, "db_id": "public_review_platform", "final": {"question": "In users yelping since 2011 to 2013, how many of them have high count of fans?", "sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year BETWEEN 2011 AND 2013 AND user_fans LIKE 'High'", "source_tables": ["users"]}, "evidence": "In users yelping since 2011 to 2013 refers to user_yelping_since_year > = 2011 AND user_yelping_since_year < 2014"}
{"sample_id": 3883, "db_id": "public_review_platform", "final": {"question": "What is the review length of user 35026 to business with business ID 2?", "sql": "SELECT review_length FROM Reviews WHERE user_id = 35026 AND business_id = 2", "source_tables": ["reviews"]}, "evidence": "user 35026 refers to user_id = 35026"}
{"sample_id": 3884, "db_id": "public_review_platform", "final": {"question": "Among the businesses in Chandler, list the attribute of the business with a low review count.", "sql": "SELECT DISTINCT T3.attribute_id, T3.attribute_name FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.attribute_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.review_count = 'Low' AND T1.city = 'Chandler'", "source_tables": ["attributes", "business_attributes", "business"]}, "evidence": "in Chandler refers to city = 'Chandler'; attribute refers to attribute_name"}
{"sample_id": 3885, "db_id": "public_review_platform", "final": {"question": "In businesses with a category of mexican, how many of them has a star rating below 4?", "sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.stars < 4 AND T3.category_name LIKE 'Mexican'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "category of mexican refers to category_name = 'Mexican'; star rating below 4 refers to stars < 4"}
{"sample_id": 3886, "db_id": "public_review_platform", "final": {"question": "List the active business ID and its stars of the businesses fall under the category of Fashion.", "sql": "SELECT T1.business_id, T1.stars FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'TRUE' AND T3.category_name LIKE 'Fashion'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "active business refers to active = 'true'; category of Fashion refers to category = 'Fashion'"}
{"sample_id": 3887, "db_id": "public_review_platform", "final": {"question": "What is the category of businesses with highest star rating?", "sql": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id ORDER BY T1.stars DESC LIMIT 1", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "category refers to category_name; highest star rating refers to max(stars)"}
{"sample_id": 3888, "db_id": "public_review_platform", "final": {"question": "What is the category of the business with medium review length and highest review stars within business ID from 6 t0 9?", "sql": "SELECT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T1.review_length LIKE 'Medium' AND T2.business_id BETWEEN 6 AND 9 ORDER BY T1.review_stars DESC LIMIT 1", "source_tables": ["categories", "business_categories", "reviews", "business"]}, "evidence": "category refers to category_name; highest review stars refers to max(review_stars); business ID from 6 to 9 refers to business_id between 6 and 9"}
{"sample_id": 3889, "db_id": "public_review_platform", "final": {"question": "Count the active businesses that has an attribute of caters with low review count.", "sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T3.attribute_name LIKE 'Caters' AND T1.review_count LIKE 'Low' AND T1.active LIKE 'TRUE'", "source_tables": ["attributes", "business_attributes", "business"]}, "evidence": "active businesses refers to active = 'true'; attribute of caters refers to attribute_name = 'Caters'"}
{"sample_id": 3890, "db_id": "public_review_platform", "final": {"question": "What is the closing and opening time of businesses located at Tempe with highest star rating?", "sql": "SELECT T2.closing_time, T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Tempe' ORDER BY T1.stars DESC LIMIT 1", "source_tables": ["business_hours", "business"]}, "evidence": "located at Tempe refers to city = 'Tempe'; highest star rating refers to max(stars)"}
{"sample_id": 3891, "db_id": "public_review_platform", "final": {"question": "Among the active businesses located at Chandler, AZ, list the category and atrributes of business with a medium review count.", "sql": "SELECT T3.category_name, T5.attribute_name FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id INNER JOIN Business_Attributes AS T4 ON T1.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.active LIKE 'TRUE' AND T1.state LIKE 'AZ' AND T1.city LIKE 'Chandler' AND T1.review_count LIKE 'Medium'", "source_tables": ["attributes", "categories", "business_categories", "business_attributes", "business"]}, "evidence": "active businesses refers to active = 'true'; located at Chandler, AZ refers to city = 'Chandler', state = 'AZ'; category refers to category_name; atrributes refers to attribute_name"}
{"sample_id": 3892, "db_id": "public_review_platform", "final": {"question": "List the categories of active businesses in Surprise, AZ.", "sql": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'TRUE' AND T1.state LIKE 'AZ' AND T1.city LIKE 'Surprise' GROUP BY T3.category_name", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "categories refers to category_name; active businesses refers to active = 'true'; in Surprise, AZ refers to city = 'Surprise' and state = 'AZ'"}
{"sample_id": 3893, "db_id": "public_review_platform", "final": {"question": "Find the location of businesses that have business hours from 8 am to 9 pm every Friday.", "sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time LIKE '9PM' AND T2.opening_time LIKE '8AM' AND T3.day_of_week LIKE 'Friday' GROUP BY T1.city", "source_tables": ["business_hours", "days", "business"]}, "evidence": "location of businesses refers to city and state; business hours from 8 am to 9 pm refers to opening_time = '8AM', closing_time = '9PM'; every Friday refers to day_of_week = 'Friday'"}
{"sample_id": 3894, "db_id": "public_review_platform", "final": {"question": "What is the attribute value of an active business with a high review count and 3 stars which is located at Mesa, AZ?", "sql": "SELECT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.state LIKE 'AZ' AND T1.review_count LIKE 'High' AND T1.active LIKE 'TRUE' AND T1.city LIKE 'Mesa' AND T1.stars = 3", "source_tables": ["attributes", "business_attributes", "business"]}, "evidence": "active business refers to active = 'true'; located at Mesa, AZ refers to city = 'Mesa', state = 'AZ'"}
{"sample_id": 3895, "db_id": "public_review_platform", "final": {"question": "What is the opening time of the active businesses in Chandler that has a medium review count.", "sql": "SELECT DISTINCT T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Chandler' AND T1.active LIKE 'TRUE' AND T1.review_count LIKE 'Medium'", "source_tables": ["business_hours", "days", "business"]}, "evidence": "active businesses refers to active = 'true'; in Chandler refers to city = 'Chandler'"}
{"sample_id": 3896, "db_id": "public_review_platform", "final": {"question": "Among the businesses with a category of Accessories, what is the percentage of the business with less than 4 stars?", "sql": "SELECT CAST(SUM(CASE WHEN T1.stars < 4 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.stars) AS 'percentage' FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T3.category_name LIKE 'Accessories'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "category of Accessories refers to category_name = 'Accessories'; percentage of the business with less than 4 stars = divide(count(Business.business_id(stars < 4)), count(Business.business_id)) * 100%"}
{"sample_id": 3897, "db_id": "public_review_platform", "final": {"question": "List the closing time and day of week of active businesses in Tempe with stars greater than the 70% of average age of star rating.", "sql": "SELECT T2.closing_time, T3.day_of_week FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Tempe' AND T1.active LIKE 'TRUE' AND T1.stars > 0.7 * ( SELECT AVG(T1.stars) FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Tempe' AND T1.active LIKE 'TRUE' )", "source_tables": ["business_hours", "days", "business"]}, "evidence": "active businesses refers to active = 'true'; in Tempe refers to city = 'Tempe'; with stars greater than the 70% of average age of star rating refers to stars > DIVIDE(sum(stars), COUNT(business_id)) * 70%"}
{"sample_id": 3898, "db_id": "public_review_platform", "final": {"question": "How many active businesses are located at Phoenix, Arizona?", "sql": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Phoenix' AND active LIKE 'True'", "source_tables": ["business"]}, "evidence": "active business refers to active = 'true'; 'Phoenix' is the city"}
{"sample_id": 3899, "db_id": "public_review_platform", "final": {"question": "How many businesses are with high review count?", "sql": "SELECT COUNT(business_id) FROM Business WHERE review_count LIKE 'High'", "source_tables": ["business"]}, "evidence": "high review count refers to review_count = 'High'"}
{"sample_id": 3900, "db_id": "public_review_platform", "final": {"question": "How many businesses ID sell beer and wine?", "sql": "SELECT COUNT(business_id) FROM Business_Attributes WHERE attribute_id = 1 AND attribute_value = 'beer_and_wine'", "source_tables": ["business_attributes"]}, "evidence": "attribute_value = 'beer_and_wine'"}
{"sample_id": 3901, "db_id": "public_review_platform", "final": {"question": "How many attributes ID owned by business ID 2?", "sql": "SELECT COUNT(attribute_id) FROM Business_Attributes WHERE business_id = 2", "source_tables": ["business_attributes"]}, "evidence": ""}
{"sample_id": 3902, "db_id": "public_review_platform", "final": {"question": "How many users received high compliment type in photo?", "sql": "SELECT COUNT(T1.user_id) FROM Users_Compliments AS T1 INNER JOIN Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.number_of_compliments LIKE 'High' AND T2.compliment_id = 1", "source_tables": ["compliments", "users_compliments"]}, "evidence": "high compliments refers to number_of_compliments = 'High'; type in photo refers to compliment_ID = 1"}
{"sample_id": 3903, "db_id": "public_review_platform", "final": {"question": "How many businesses in Phoenix, Arizona is attributed to waiter service?", "sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.city LIKE 'Phoenix' AND T3.attribute_name LIKE 'waiter_service' AND T2.attribute_id = 2", "source_tables": ["attributes", "business_attributes", "business"]}, "evidence": "'Phoenix' is the city; waiter service refers to attribute_name = 'waiter_services'"}
{"sample_id": 3904, "db_id": "public_review_platform", "final": {"question": "Find out which business is opened for 24/7 and list out what is the business attribute.", "sql": "SELECT T5.attribute_name FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id INNER JOIN Business_Attributes AS T4 ON T3.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T2.day_id LIKE '1' AND '2' AND '3' AND '4' AND '5' AND '6' AND '7' AND T1.opening_time = T1.closing_time GROUP BY T5.attribute_name", "source_tables": ["business_hours", "days", "attributes", "business_attributes", "business"]}, "evidence": "opened for 24/7 refers to Business_Hours WHERE opening_time = closing_time and business_id COUNT(day_id) = 7; business attribute refers to attribute_name"}
{"sample_id": 3905, "db_id": "public_review_platform", "final": {"question": "Which business in fashion category has the most review?", "sql": "SELECT T3.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Reviews AS T4 ON T3.business_id = T4.business_id WHERE T1.category_name LIKE 'Fashion' AND T1.category_id = 7 GROUP BY T3.business_id ORDER BY COUNT(T4.user_id) DESC LIMIT 1", "source_tables": ["categories", "business_categories", "reviews", "business"]}, "evidence": "'Fashion' is the category_name; most review refers to Max(Count(user_id))"}
{"sample_id": 3906, "db_id": "public_review_platform", "final": {"question": "List out which business category that are most likely to have average good review in Arizona?", "sql": "SELECT DISTINCT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.state LIKE 'AZ' AND T1.review_stars >= 3", "source_tables": ["categories", "business_categories", "reviews", "business"]}, "evidence": "average good review refers to review_count > = 3; Arizona refers to state = 'AZ'; business category refers to category_name"}
{"sample_id": 3907, "db_id": "public_review_platform", "final": {"question": "What is the ratio of having the best to worse elite user in 2013?", "sql": "SELECT CAST(SUM(CASE WHEN T1.user_average_stars = 1 THEN 1 ELSE 0 END) AS REAL) / COUNT(T2.user_id) , SUM(CASE WHEN T1.user_average_stars = 5 THEN 1 ELSE 0 END) * 1.0 / COUNT(T2.user_id) FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id WHERE T2.year_id = 2013", "source_tables": ["users", "elite"]}, "evidence": "best elite refers to user_average_stars = 5; worse eliter refers to user_average_stars = 1: in 2013 refers to year_id = 2013; ratio = Divide(Count(user_id(user_average_stars = 5)),\u00a0 Count(user_id(user_average_stars = 1)))"}
{"sample_id": 3908, "db_id": "public_review_platform", "final": {"question": "Calculate the increment percentage of elite user for each year since year 2005.", "sql": "SELECT CAST(COUNT(CASE WHEN year_id < 2014 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(CASE WHEN year_id = 2005 THEN 1.0 ELSE NULL END) AS increment FROM Elite", "source_tables": ["elite"]}, "evidence": "since year 2005 refers to year_id Between 2005 and 2014; increment percentage = Divide(Count(user_id(year_id < 2014)), Count (user_id(year_id = 2015))) * 100"}
{"sample_id": 3909, "db_id": "public_review_platform", "final": {"question": "How many business have been reviewed by user ID 3 and how long have this user been with Yelp?", "sql": "SELECT COUNT(T1.business_id) , strftime('%Y', 'now') - T2.user_yelping_since_year FROM Reviews AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.user_id = 3", "source_tables": ["users", "reviews"]}, "evidence": "year with yelp = Subtract ('%Y'(CURRENT TIME), user_yelping_since_year)"}
{"sample_id": 3910, "db_id": "public_review_platform", "final": {"question": "What is the yearly average review done by user ID 3?", "sql": "SELECT COUNT(review_stars) / (strftime('%Y', 'now') - T1.user_yelping_since_year) FROM Users AS T1 INNER JOIN Reviews AS T2 ON T1.user_id = T2.user_id WHERE T1.user_id = 3", "source_tables": ["users", "reviews"]}, "evidence": "yearly average review = Divide( Count(business_id), Subtract('%Y'(CURRENT_TIME), user_yelping_since_year))"}
{"sample_id": 3911, "db_id": "public_review_platform", "final": {"question": "What is the average number of review received by each business given that the user is an elite?", "sql": "SELECT CAST(COUNT(T1.user_id) AS REAL) / COUNT(DISTINCT T1.business_id) FROM Reviews AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id", "source_tables": ["reviews", "elite"]}, "evidence": "average review = Divide(Count(user_id), Count(business_id))"}
{"sample_id": 3912, "db_id": "public_review_platform", "final": {"question": "List out the user who is an elite user for consecutively 5 years or more and what is the user average star? How many likes does this user gets?", "sql": "SELECT T2.user_average_stars, COUNT(T3.likes) FROM Elite AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id INNER JOIN Tips AS T3 ON T3.user_id = T2.user_id GROUP BY T1.user_id HAVING COUNT(T1.user_id) > 5", "source_tables": ["users", "elite", "tips"]}, "evidence": "elite user for consecutively 5 years or more refers to user_id COUNT(year_id) > 5; Average star = AVG(likes)"}
{"sample_id": 3913, "db_id": "public_review_platform", "final": {"question": "Find out which hotel and travel business having the most review? Calculate the standard deviation of the review star for this business.", "sql": "SELECT T2.category_id FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Reviews AS T3 ON T3.business_id = T1.business_id WHERE T2.category_name = 'Hotels & Travel' GROUP BY T2.category_id ORDER BY COUNT(T2.category_id) DESC LIMIT 1", "source_tables": ["categories", "business_categories", "reviews"]}, "evidence": "\"Hotel & Travel\" is the category_name; most review refers to Max(Count(category_id)); Average star per user = Divide (Sum (review_stars), Count(user_id))"}
{"sample_id": 3914, "db_id": "public_review_platform", "final": {"question": "What is the correlation between the review starts and business stars?", "sql": "SELECT CAST(SUM(T2.review_stars) AS REAL) / COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id", "source_tables": ["reviews", "business"]}, "evidence": "highest review count refers to review_count = 'Uber'; average business review stars = Divide (Sum(review_stars), Count(user_id))"}
{"sample_id": 3915, "db_id": "public_review_platform", "final": {"question": "How many of the businesses are active?", "sql": "SELECT COUNT(business_id) FROM Business WHERE active LIKE 'True'", "source_tables": ["business"]}, "evidence": "active refers to active = 'true'"}
{"sample_id": 3916, "db_id": "public_review_platform", "final": {"question": "List down the business ID with a low review count in Phoenix.", "sql": "SELECT business_id FROM Business WHERE city LIKE 'Phoenix' AND review_count LIKE 'Low'", "source_tables": ["business"]}, "evidence": "\"Phoenix\" is the city; low review count refers to review_count = 'Low'"}
{"sample_id": 3917, "db_id": "public_review_platform", "final": {"question": "What is the total number of active business in AZ with a high review count?", "sql": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND review_count LIKE 'High' AND active LIKE 'True'", "source_tables": ["business"]}, "evidence": "active business refers to active = 'true'; 'AZ' is the state; high review count refers to review_count = 'High'"}
{"sample_id": 3918, "db_id": "public_review_platform", "final": {"question": "List down the business ID with a star range from 3 to 4, located at Tempe.", "sql": "SELECT business_id FROM Business WHERE city LIKE 'Tempe' AND stars BETWEEN 3 AND 4", "source_tables": ["business"]}, "evidence": "star range from 3 to 4 refers to stars > = 3 AND stars < 5; 'Tempe' is the name of city"}
{"sample_id": 3919, "db_id": "public_review_platform", "final": {"question": "In users yelping since 2010 to 2012, how many of them has an low fans?", "sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year BETWEEN 2010 AND 2012 AND user_fans LIKE 'Low'", "source_tables": ["users"]}, "evidence": "user yelping since 2010 to 2012 refers to user_yelping_since_year > = '2010' AND user_yelping_since_year < '2013'; low fans refers to user_fans = 'Low'"}
{"sample_id": 3920, "db_id": "public_review_platform", "final": {"question": "What is the review length of user 60776 to business with business ID 1?", "sql": "SELECT review_length FROM Reviews WHERE user_id = 60776 AND business_id = 1", "source_tables": ["reviews"]}, "evidence": "\"60776\" is the user_id"}
{"sample_id": 3921, "db_id": "public_review_platform", "final": {"question": "Among the businesses in Scottsdale, list the attribute of the business with a high review count.", "sql": "SELECT T3.attribute_name FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.review_count LIKE 'High' AND T1.city LIKE 'Scottsdale' GROUP BY T3.attribute_name", "source_tables": ["attributes", "business_attributes", "business"]}, "evidence": "\"Scottsdale\" is the name of city; high review count refers to review_count = 'High'; attribute of the business refers to attribute_name"}
{"sample_id": 3922, "db_id": "public_review_platform", "final": {"question": "In businesses with a category of automotive, how many of them has an star rating below 3?", "sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T3.category_name LIKE 'Automotive' AND T1.stars < 3", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "\"Automotive\" is the category of business; star rating below 3 refers to stars < 3"}
{"sample_id": 3923, "db_id": "public_review_platform", "final": {"question": "List the active business ID and its stars of the businesses fall under the category of Pets.", "sql": "SELECT T1.business_id, T1.stars FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'TRUE' AND T3.category_name LIKE 'Pets'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "active business refers to active = 'true'; 'Pets' is the category_name"}
{"sample_id": 3924, "db_id": "public_review_platform", "final": {"question": "What is the attribute of the business with highest star rating?", "sql": "SELECT T3.attribute_name FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id ORDER BY T1.stars DESC LIMIT 1", "source_tables": ["attributes", "business_attributes", "business"]}, "evidence": "highest star rating Max(stars); attribute of business refers to attribute_name"}
{"sample_id": 3925, "db_id": "public_review_platform", "final": {"question": "What is the category of the business with short review length and highest review stars within business ID from 5 t0 10?", "sql": "SELECT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T1.review_length LIKE 'Short' AND T2.business_id BETWEEN 5 AND 10 ORDER BY T1.review_stars DESC LIMIT 1", "source_tables": ["categories", "business_categories", "reviews", "business"]}, "evidence": "short review length refers to review_length = 'Short'; highest review stars refers to Max(review_stars); business ID from 5 to 10 refers to business_id BETWEEN 5 AND 10; category of business refers to category_name"}
{"sample_id": 3926, "db_id": "public_review_platform", "final": {"question": "Count the active businesses that has an attribute of Wi-Fi with medium review count.", "sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T3.attribute_name LIKE 'Wi-Fi' AND T1.active LIKE 'TRUE' AND T1.review_count LIKE 'Medium'", "source_tables": ["attributes", "business_attributes", "business"]}, "evidence": "active business refers to active = 'true'; 'Wi-Fi' is the attribute_name; medium review count refers to review_count = 'Medium'"}
{"sample_id": 3927, "db_id": "public_review_platform", "final": {"question": "What is the closing and opening time of businesses located at Gilbert with highest star rating?", "sql": "SELECT T2.closing_time, T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Gilbert' ORDER BY T1.stars DESC LIMIT 1", "source_tables": ["business_hours", "business"]}, "evidence": "\"Gilbert\" is the name of city; highest star rating refers to Max(stars)"}
{"sample_id": 3928, "db_id": "public_review_platform", "final": {"question": "Among the active businesses located at Mesa, AZ, list the category and attributes of business with a low review count.", "sql": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T1.review_count = 'Low' AND T1.city = 'Mesa' AND T1.active = 'true' AND T1.state = 'AZ'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "active business refers to active = 'true': 'Mesa' is the name of city; 'AZ' is the state; low review count refers to review_count = 'Low'; category refers to category_name"}
{"sample_id": 3929, "db_id": "public_review_platform", "final": {"question": "List the categories of inactive businesses in AZ.", "sql": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'FALSE' AND T1.state LIKE 'AZ'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "inactive business refers to active = 'FALSE'; 'AZ' is the state; category refers to category_name"}
{"sample_id": 3930, "db_id": "public_review_platform", "final": {"question": "Find the location of businesses that has business hours from 9 am to 9 pm every Saturday.", "sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time LIKE '9PM' AND T2.opening_time LIKE '9AM' AND T3.day_of_week LIKE 'Saturday' GROUP BY T1.city", "source_tables": ["business_hours", "days", "business"]}, "evidence": "9 am refers to opening_time = '9AM'; 9 pm refers to closing_time = '9PM'; every Saturday refers to day_of_week = 'Saturday'; location refers to city"}
{"sample_id": 3931, "db_id": "public_review_platform", "final": {"question": "What is the attribute value of an inactive business with a medium review count and 3.5 stars which is located at Phoenix, AZ?", "sql": "SELECT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.state LIKE 'AZ' AND T1.review_count LIKE 'Medium' AND T1.active LIKE 'FALSE' AND T1.city LIKE 'Phoenix' AND T1.stars = 3.5", "source_tables": ["attributes", "business_attributes", "business"]}, "evidence": "inactive business refers to active = 'FALSE'; 'AZ' is the state; 'Phoenix' is the name of city; medium review count refers to review_count = 'Medium'; 3.5 stars refers to stars = 3.5"}
{"sample_id": 3932, "db_id": "public_review_platform", "final": {"question": "What is the opening time of the active businesses in Surprise that has a low review count.", "sql": "SELECT T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Surprise' AND T1.active LIKE 'TRUE' AND T1.review_count LIKE 'Low' GROUP BY T2.opening_time", "source_tables": ["business_hours", "days", "business"]}, "evidence": "active business refers to active = 'true'; 'Surprise' is the name of city;\u00a0 low review count refers to review_count = 'Low'"}
{"sample_id": 3933, "db_id": "public_review_platform", "final": {"question": "Among the businesses with a category of Local Services, what is the percentage of the business with less than 3 stars?", "sql": "SELECT CAST(SUM(CASE WHEN T1.stars < 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.stars) AS 'percentage' FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T3.category_name LIKE 'Local Services'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "\"Local Services\" is the category_name; less than 3 stars refers to stars < 3; percentage = Divide(Count(business_id(stars < 3)), Count(business_id)) * 100"}
{"sample_id": 3934, "db_id": "public_review_platform", "final": {"question": "List the closing time and day of week of active businesses in Scottsdale with stars greater than the 60% of average age of star rating.", "sql": "SELECT T2.closing_time, T3.day_of_week FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Scottsdale' AND T1.active LIKE 'TRUE' AND T1.stars > 0.6 * ( SELECT AVG(T1.stars) FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Scottsdale' AND T1.active LIKE 'TRUE' )", "source_tables": ["business_hours", "days", "business"]}, "evidence": "active business refers to active = 'true';\u00a0 'Scottsdale' is the name of city; stars greater than the 60% of average age of star rating refers to stars\u00a0 > avg(stars) * 60%"}
{"sample_id": 3935, "db_id": "public_review_platform", "final": {"question": "How many users have no followers in 2014?", "sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year = 2004 AND user_fans LIKE 'None'", "source_tables": ["users"]}, "evidence": "in 2004 refers to user_yelping_since_year = 2004; no follower refers to user_fans = 'None'"}
{"sample_id": 3936, "db_id": "public_review_platform", "final": {"question": "List at least 5 users that has received less than 5 low compliments from\nother users.", "sql": "SELECT user_id FROM Users_Compliments WHERE number_of_compliments LIKE 'Low' GROUP BY user_id ORDER BY COUNT(number_of_compliments) > 5 LIMIT 5", "source_tables": ["users_compliments"]}, "evidence": "less than 5 low compliment refers to number_of_compliments < 5"}
{"sample_id": 3937, "db_id": "public_review_platform", "final": {"question": "List at least 10 users ID that has 4 as an average ratings of all reviews sent.", "sql": "SELECT COUNT(user_id) FROM Users WHERE user_average_stars = 4 LIMIT 10", "source_tables": ["users"]}, "evidence": "4 as an average rating refers to user_average_stars = 4"}
{"sample_id": 3938, "db_id": "public_review_platform", "final": {"question": "What city does the business have a business hour from 10 am to 12 pm on Sunday?", "sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.opening_time LIKE '10AM' AND T2.closing_time LIKE '12PM' AND T3.day_of_week LIKE 'Sunday'", "source_tables": ["business_hours", "days", "business"]}, "evidence": "10 am refers to opening_time = '10AM'; 12 pm refers to closing_time = '12PM'; on Sunday refers to day_of_week = 'Sunday'"}
{"sample_id": 3939, "db_id": "public_review_platform", "final": {"question": "How many businesses are opened for 24 hours?", "sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value LIKE 'TRUE' AND T1.attribute_name LIKE 'Open 24 Hours'", "source_tables": ["attributes", "business_attributes"]}, "evidence": "opened for 24 hours refers to attribute_name = 'Open 24 Hours' AND attribute_value = 'true'"}
{"sample_id": 3940, "db_id": "public_review_platform", "final": {"question": "List at least 5 active business ID that are good for groups and dancing.", "sql": "SELECT T2.business_id FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T2.attribute_value LIKE 'TRUE' AND T1.attribute_name LIKE 'Good for Dancing' AND T1.attribute_name LIKE 'Good for Groups' LIMIT 5", "source_tables": ["attributes", "business_attributes", "business"]}, "evidence": "\"Good for Groups\" and \"Good for Dancing\" are attribute_name; active business refers to active = true'"}
{"sample_id": 3941, "db_id": "public_review_platform", "final": {"question": "Among the active businesses in Ahwatukee, which of them are still open in Sunday?", "sql": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Ahwatukee' AND T1.active LIKE 'TRUE' AND T3.day_of_week LIKE 'Sunday'", "source_tables": ["business_hours", "days", "business"]}, "evidence": "active business refers to active = 'true'; 'Ahwatukee' is the name of city; open in Sunday refers to day_of_week = 'Sunday'"}
{"sample_id": 3942, "db_id": "public_review_platform", "final": {"question": "List the categories of all active businesses that were not in Arizona.", "sql": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'TRUE' AND T1.state NOT LIKE 'AZ'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "active business refers to active = 'true'; not in Arizona refers to state ! = 'AZ'; category refers to category_name"}
{"sample_id": 3943, "db_id": "public_review_platform", "final": {"question": "List the category of the business with high review count but received 2 stars.", "sql": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.stars = 2 AND T1.review_count LIKE 'High'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "high review count refers to review_count = 'High'; received 2 stars refers to stars = 2; category refers to category_name"}
{"sample_id": 3944, "db_id": "public_review_platform", "final": {"question": "How many businesses have a romantic ambiance?", "sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value = 'true' AND T1.attribute_name = 'ambience_romantic'", "source_tables": ["attributes", "business_attributes"]}, "evidence": "romantic ambiance refers to attribute_name = 'ambience_romantic' AND attribute_value = 'true'"}
{"sample_id": 3945, "db_id": "public_review_platform", "final": {"question": "List the city of the business where they open from 1 pm to 6 pm on Saturday.", "sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time LIKE '6PM' AND T2.opening_time LIKE '1PM' AND T3.day_of_week LIKE 'Saturday'", "source_tables": ["business_hours", "days", "business"]}, "evidence": "1 pm refers to opening_time = '1PM'; 6 pm refers to closing_time = '6PM'; on Saturday refers to day_of_week = 'Saturday'"}
{"sample_id": 3946, "db_id": "public_review_platform", "final": {"question": "What is the total number of fans or followers who received most likes of their comments in the business?", "sql": "SELECT COUNT(T1.user_fans) FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id ORDER BY COUNT(T2.likes) DESC LIMIT 1", "source_tables": ["users", "tips"]}, "evidence": "fans and followers refers to user_fans; most likes of their comments refer to Max(likes)"}
{"sample_id": 3947, "db_id": "public_review_platform", "final": {"question": "What city does the business came from where they received a high volume of check-ins from 12 am to 1 am on Saturday.", "sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time = '1AM' AND T2.opening_time = '12AM' AND T3.day_of_week = 'Saturday'", "source_tables": ["business_hours", "days", "business"]}, "evidence": "12 am refers to opening_time = '12AM'; 1 am refers to closing_time = '1AM'; on Saturday refers to day_of_week = 'Saturday'"}
{"sample_id": 3948, "db_id": "public_review_platform", "final": {"question": "How many businesses have shopping centers and received high review count?", "sql": "SELECT COUNT(T2.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Shopping Centers' AND T3.review_count = 'High'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "\"Shopping Centers\" is the category_name; high review count refers to review_count = 'High'"}
{"sample_id": 3949, "db_id": "public_review_platform", "final": {"question": "How many businesses accept insurance?", "sql": "SELECT COUNT(T1.business_id) FROM Business_Attributes AS T1 INNER JOIN Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_name = 'Accepts Insurance' AND T1.attribute_value = 'true'", "source_tables": ["attributes", "business_attributes"]}, "evidence": "business that accept insurance refers to attribute_name = 'Accepts Insurance' AND attribute_value = 'true'"}
{"sample_id": 3950, "db_id": "public_review_platform", "final": {"question": "Calculate the average review star from users in businesses located in South Carolina and California state.", "sql": "SELECT 1.0 * (( SELECT SUM(T1.stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.state = 'SC' ) + ( SELECT SUM(T1.stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.state = 'CA' )) / ( SELECT SUM(T1.stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id ) AS reslut", "source_tables": ["reviews", "business"]}, "evidence": "\"South Carolina\" and \"California\" are both state; average review stars from users = Divide((Sum(review_stars(state = 'SC')) + Sum(review_stars(state = 'CA'))), Sum(stars))"}
{"sample_id": 3951, "db_id": "public_review_platform", "final": {"question": "Compare and get the difference of the number of businesses that are open in Monday and Tuesday from 10 am to 9 pm.", "sql": "SELECT SUM(CASE WHEN T3.day_of_week = 'Monday' THEN 1 ELSE 0 END) - SUM(CASE WHEN T3.day_of_week = 'Tuesday' THEN 1 ELSE 0 END) AS DIFF FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.opening_time = '10AM' AND T2.closing_time = '9PM'", "source_tables": ["business_hours", "days", "business"]}, "evidence": "10 am refers to opening_time = '10AM'; 9 pm refers to closing_time = '9PM'; 'Monday' and 'Tuesday' are both day_of_week; difference number of business = Subtract(Count(business_id(day_of_week = 'Monday')), Count(business_id(day_of_week = 'Tuesday')))"}
{"sample_id": 3952, "db_id": "public_review_platform", "final": {"question": "State the ID number for the attribute named \"Accepts Insurance\"?", "sql": "SELECT attribute_id FROM Attributes WHERE attribute_name = 'Accepts Insurance'", "source_tables": ["attributes"]}, "evidence": "ID number refers to attribute_id"}
{"sample_id": 3953, "db_id": "public_review_platform", "final": {"question": "How many actively running Yelp businesses are there located in \"Phoenix\" city?", "sql": "SELECT COUNT(business_id) FROM Business WHERE active = 'true' AND city = 'Phoenix'", "source_tables": ["business"]}, "evidence": "actively running business refers to active = 'true'; 'Phoenix' is the name of city"}
{"sample_id": 3954, "db_id": "public_review_platform", "final": {"question": "Give the number of \"4\" stars Yelp businesses in \"Mesa\" city.", "sql": "SELECT COUNT(business_id) FROM Business WHERE stars = 4 AND city = 'Mesa'", "source_tables": ["business"]}, "evidence": "\"4\" stars refers to stars = '4'; 'Mesa' is the name of city"}
{"sample_id": 3955, "db_id": "public_review_platform", "final": {"question": "Provide the number of Yelp businesses in \"Gilbert\" which got a\" high\" review count.", "sql": "SELECT COUNT(business_id) FROM Business WHERE review_count = 'High' AND city = 'Gilbert'", "source_tables": ["business"]}, "evidence": "\"Gilbert\" is the name of city; high review count refers to review_count = 'High'"}
{"sample_id": 3956, "db_id": "public_review_platform", "final": {"question": "Which actively running Yelp business in \"Gilbert\" has got the most reviews? Give the business id.", "sql": "SELECT DISTINCT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.active = 'true' AND T1.city = 'Gilbert' AND T1.review_count = 'Uber'", "source_tables": ["reviews", "business"]}, "evidence": "actively running business refers to active = 'true'; 'Gilbert' is the name of city; most review refers to review_count = 'Uber'"}
{"sample_id": 3957, "db_id": "public_review_platform", "final": {"question": "For the Yelp business in \"Tempe\" city which got \"3.5\" stars and review count as \"Uber\", how many \"long\" reviews did it get?", "sql": "SELECT COUNT(T2.review_length) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Tempe' AND T1.stars = '3.5' AND T1.review_count = 'Uber' AND T2.review_length = 'Long'", "source_tables": ["reviews", "business"]}, "evidence": "\"Tempe\" is the name of city; long review refers to review_length = 'Long'"}
{"sample_id": 3958, "db_id": "public_review_platform", "final": {"question": "How is the \"noise level\" for the only Yelp business in \u201cMesa\u201d which got a \"Uber\" review count?", "sql": "SELECT T3.attribute_name FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.city = 'Mesa' AND T1.review_count = 'Uber' AND T3.attribute_name = 'Noise Level'", "source_tables": ["attributes", "business_attributes", "business"]}, "evidence": "\"Noise Level\" is the attribute_name; 'Mesa' is the name of city"}
{"sample_id": 3959, "db_id": "public_review_platform", "final": {"question": "Is the Yelp business No. 14033 good for supper?", "sql": "SELECT T1.attribute_value FROM Business_Attributes AS T1 INNER JOIN Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_name = 'good_for_dinner' AND T1.business_id = 14033", "source_tables": ["attributes", "business_attributes"]}, "evidence": "business no. 14033 refers to business_id = 14033; good for supper refers to attribute_name = 'good_for_dinner'"}
{"sample_id": 3960, "db_id": "public_review_platform", "final": {"question": "How long is the Yelp business No. 15098 opened on Monday?", "sql": "SELECT SUBSTR(T1.closing_time, 1, 2) + 12 - SUBSTR(T1.opening_time, 1, 2) AS YYSJ FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week = 'Monday' AND T1.business_id = 15098", "source_tables": ["business_hours", "days"]}, "evidence": "Yelp business No. 15098 refers to business_id = '15098'; Monday refers to day_of_week = 'Monday'"}
{"sample_id": 3961, "db_id": "public_review_platform", "final": {"question": "For the Yelp businesses which received a \"5\" star review with \"uber\" number of votes for funny, which one is located in \"Phoenix\"? Give the business ID.", "sql": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Phoenix' AND T2.review_stars = 5 AND T2.review_votes_funny = 'Uber'", "source_tables": ["reviews", "business"]}, "evidence": "located in \"Phoenix\" refers to city = 'Phoenix'; received a \"5\" star review refers to review_stars = '5'; \"uber\" number of votes for funny refers to review_votes_funny = 'Uber'"}
{"sample_id": 3962, "db_id": "public_review_platform", "final": {"question": "Which city is the business that got a \"medium\" length tip with \"3\" likes located in?", "sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Tips AS T2 ON T1.business_id = T2.business_id WHERE T2.tip_length = 'Medium' AND T2.likes = 3", "source_tables": ["tips", "business"]}, "evidence": "medium length tip refers to tip_length = 'Medium';"}
{"sample_id": 3963, "db_id": "public_review_platform", "final": {"question": "For the user who joined Yelp in \"2010\", with an average of \"4.5\" stars review and has got uber number of fans, how many \"funny\" compliments has he/she received from other users?", "sql": "SELECT COUNT(T2.user_id) FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id INNER JOIN Compliments AS T3 ON T2.compliment_id = T3.compliment_id WHERE T1.user_yelping_since_year = 2010 AND T1.user_average_stars = 4.5 AND T1.user_fans = 'Uber' AND T3.compliment_type = 'funny'", "source_tables": ["compliments", "users", "users_compliments"]}, "evidence": "in \"2010\" refers to user_yelping_since_year = '2010'; average of \"4.5\" stars review refers to user_average_stars = '4.5'; uber number of fans refers to user_average_stars = '4.5'; \"funny\" compliments refers to compliment_type = 'funny'"}
{"sample_id": 3964, "db_id": "public_review_platform", "final": {"question": "How many \"cool\" type compliments does user No. 41717 get?", "sql": "SELECT COUNT(T2.number_of_compliments) FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.compliment_type = 'cool' AND T2.user_id = 41717", "source_tables": ["compliments", "users_compliments"]}, "evidence": "\"cool\" type compliments refers to compliment_type = 'cool'; user No. 41717 refers to user_id = 41717"}
{"sample_id": 3965, "db_id": "public_review_platform", "final": {"question": "Does Yelp business No.\"11825\" have a \"parking lot\"?", "sql": "SELECT T1.attribute_value FROM Business_Attributes AS T1 INNER JOIN Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.business_id = 11825 AND T2.attribute_name = 'parking_lot'", "source_tables": ["attributes", "business_attributes"]}, "evidence": "business No.\"11825\" refers to business_id = '12476'; have a \"parking lot\" refers to attribute_value = 'parking_lot'"}
{"sample_id": 3966, "db_id": "public_review_platform", "final": {"question": "Is the payment in mastercard possible for the Yelp business No.\"12476\"?", "sql": "SELECT T1.attribute_value FROM Business_Attributes AS T1 INNER JOIN Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.business_id = 12476 AND T2.attribute_name = 'payment_types_mastercard'", "source_tables": ["attributes", "business_attributes"]}, "evidence": "Yelp business No.\"12476\" refers to business_id = '12476'; payment in mastercard refers to attribute_value = 'payment_types_mastercard'"}
{"sample_id": 3967, "db_id": "public_review_platform", "final": {"question": "What is the percentage for the Yelp businesses in \"Pets\" category of all businesses?", "sql": "SELECT CAST(SUM(CASE WHEN T2.category_name = 'Pets' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.category_name) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id", "source_tables": ["categories", "business_categories"]}, "evidence": "businesses in \"Pets\" category refers to category_name = 'Pets'; percentage refers to DIVIDE(COUNT(category_name = 'Pets'), COUNT(business_id)) * 100%"}
{"sample_id": 3968, "db_id": "public_review_platform", "final": {"question": "How many times is the number of \"Women's Clothing\" Yelp businesses to \"Men's Clothing\"?", "sql": "SELECT CAST(SUM(CASE WHEN T2.category_name = 'Women''s Clothing' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.category_name = 'Men''s Clothing' THEN 1 ELSE 0 END) AS TIMES FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id", "source_tables": ["categories", "business_categories"]}, "evidence": "\"Women's Clothing\" Yelp businesses refers to\u00a0 category_name = 'Women''s Clothing'; \"Men's Clothing\" refers to category_name = 'Men''s Clothing'; times refers to DIVIDE(COUNT(category_name = 'Women''s Clothing'), COUNT(category_name = 'Men''s Clothing'))"}
{"sample_id": 3969, "db_id": "public_review_platform", "final": {"question": "Write down the ID, active status and city of the business which are in CA state.", "sql": "SELECT business_id, active, city FROM Business WHERE state = 'CA' AND active = 'true'", "source_tables": ["business"]}, "evidence": "the ID refers to business_id; active status refers to active; active = 'true' means the business is still running; active = 'false' means the business is closed or not running now"}
{"sample_id": 3970, "db_id": "public_review_platform", "final": {"question": "Calculate the percentage of running business among all business.", "sql": "SELECT CAST(SUM(CASE WHEN active = 'true' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(business_id) FROM Business", "source_tables": ["business"]}, "evidence": "running business refers to active = 'true'; percentage refers to DIVIDE(COUNT(active = 'true'), COUNT(business_id)) * 100%"}
{"sample_id": 3971, "db_id": "public_review_platform", "final": {"question": "Among all attribute names, list down the ID and attribute name which start with \"music\".", "sql": "SELECT attribute_id, attribute_name FROM Attributes WHERE attribute_name LIKE 'music%'", "source_tables": ["attributes"]}, "evidence": "attribute name which start with \"music\" refers to attribute_name LIKE 'music%'"}
{"sample_id": 3972, "db_id": "public_review_platform", "final": {"question": "Between 2006 and 2007, which year ID had the greater number in elite user?", "sql": "SELECT year_id FROM Elite WHERE year_id IN (2006, 2007) GROUP BY year_id ORDER BY COUNT(user_id) DESC LIMIT 1", "source_tables": ["elite"]}, "evidence": "2006 and 2007 refers to BETWEEN 2006 AND 2007; greater number in elite user refers to count(user_id)"}
{"sample_id": 3973, "db_id": "public_review_platform", "final": {"question": "Based on all user compliments, find the percentage of low number of compliments on all compliments ID.", "sql": "SELECT CAST(SUM(CASE WHEN number_of_compliments = 'Low' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(user_id) FROM Users_compliments", "source_tables": ["users_compliments"]}, "evidence": "low number of compliments refers to number_of_compliments = 'Low'; percentage refers to DIVIDE(COUNT(number_of_compliments = 'Low'), COUNT(user_id)) * 100"}
{"sample_id": 3974, "db_id": "public_review_platform", "final": {"question": "List down the business ID and user ID who got uber for cool votes.", "sql": "SELECT business_id, user_id FROM Reviews WHERE review_votes_cool = 'Uber'", "source_tables": ["reviews"]}, "evidence": "got uber for cool votes refers to review_votes_cool = 'Uber'"}
{"sample_id": 3975, "db_id": "public_review_platform", "final": {"question": "Write the user ID, business ID and tips length of who started using Yelp since 2004 and had high followers.", "sql": "SELECT T1.user_id, T2.business_id, T2.tip_length FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2004 AND T1.user_fans = 'High'", "source_tables": ["users", "tips"]}, "evidence": "started using Yelp since 2004 refers to user_yelping_since_year = '2004'; had high followers refers to user_fans = 'High'"}
{"sample_id": 3976, "db_id": "public_review_platform", "final": {"question": "Among the review votes of funny and cool hit uber with long review length, describe the business ID, active status, user ID and user year of joining Yelp.", "sql": "SELECT T1.business_id, T1.active, T3.user_id, T3.user_yelping_since_year FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T2.review_votes_cool = 'Uber' AND T2.review_votes_funny = 'Uber' AND T2.review_length = 'Long'", "source_tables": ["users", "reviews", "business"]}, "evidence": "review votes of funny refers to review_votes_funny = 'Uber'; cool hit uber refers to review_votes_cool = 'Uber'; user year of joining Yelp refers to user_yelping_since_year"}
{"sample_id": 3977, "db_id": "public_review_platform", "final": {"question": "Under the attribute name of \"music_playlist\", describe the attribute ID, business ID, city and inactive status.", "sql": "SELECT T1.attribute_id, T2.business_id, T3.city FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name = 'music_playlist' AND T3.active = 'false'", "source_tables": ["attributes", "business_attributes", "business"]}, "evidence": "active status refers to active; active = 'true' means the business is still running; active = 'false' means the business is inactive or not running now"}
{"sample_id": 3978, "db_id": "public_review_platform", "final": {"question": "Calculate the percentage of business with attribute name of \"Accepts Credit Cards\".", "sql": "SELECT CAST(SUM(CASE WHEN T1.attribute_name = 'Accepts Credit Cards' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.attribute_name) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id", "source_tables": ["attributes", "business_attributes"]}, "evidence": "percentage refers to DIVIDE(COUNT(attribute_name = 'Accepts Credit Cards'), COUNT(business_id))*100%"}
{"sample_id": 3979, "db_id": "public_review_platform", "final": {"question": "Among the stopped businesses in San Tan Valley city, list down the user ID and review length of who had great experience.", "sql": "SELECT T2.user_id, T2.review_length FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'San Tan Valley' AND T1.active = 'false' AND T2.review_stars = 5", "source_tables": ["reviews", "business"]}, "evidence": "stop businesses refers to active = 'false'; great experience refers to review_stars = 5\n\n"}
{"sample_id": 3980, "db_id": "public_review_platform", "final": {"question": "Mention the user average star, elite year and the compliment type of user ID 6027 whereby number of compliments reach uber.", "sql": "SELECT T2.user_average_stars, T1.year_id, T4.compliment_type, T3.number_of_compliments FROM Elite AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id INNER JOIN Users_Compliments AS T3 ON T2.user_id = T3.user_id INNER JOIN Compliments AS T4 ON T3.compliment_id = T4.compliment_id INNER JOIN Years AS T5 ON T1.year_id = T5.year_id WHERE T3.number_of_compliments = 'Uber' AND T3.user_id = 6027", "source_tables": ["elite", "compliments", "users_compliments", "users", "years"]}, "evidence": "number of compliments reach uber refers to number_of_compliments = 'Uber'; elite year refers to year_id; user average star refers to user_average_stars"}
{"sample_id": 3981, "db_id": "public_review_platform", "final": {"question": "Under the category name of \"Coffee & Tea\", mention any 5 business ID , their state and city.", "sql": "SELECT T2.business_id, T3.state, T3.city FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Coffee & Tea' LIMIT 5", "source_tables": ["categories", "business_categories", "business"]}, "evidence": ""}
{"sample_id": 3982, "db_id": "public_review_platform", "final": {"question": "Describe category name which had above 10% in comparing with all business and categories.", "sql": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id GROUP BY T2.category_id HAVING COUNT(T2.business_id) > ( SELECT COUNT(T3.business_id) FROM Business_Categories AS T3 ) * 0.1", "source_tables": ["categories", "business_categories"]}, "evidence": "above 10% refers to DIVIDE(COUNT(Business_Categories.business_id = category_id), COUNT(category_id)) * 100% > 10%"}
{"sample_id": 3983, "db_id": "public_review_platform", "final": {"question": "For the business with great experience existed in Sun Lakes city, provide the user ID who gave review on it and user followers.", "sql": "SELECT T3.user_id, T3.user_fans FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T1.city = 'Sun Lakes' AND T1.stars = 5", "source_tables": ["users", "reviews", "business"]}, "evidence": "with great experience refers to stars = 5"}
{"sample_id": 3984, "db_id": "public_review_platform", "final": {"question": "Compare the number of business between the category of \"Men's Clothing\" and \"Women's Clothing\".", "sql": "SELECT SUM(CASE WHEN T1.category_name = 'Men''s Clothing' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.category_name = 'Women''s Clothing' THEN 1 ELSE 0 END) AS diff FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id", "source_tables": ["categories", "business_categories"]}, "evidence": "category of \"Men's Clothing\" refers to category_name = 'Men''s Clothing'; \"Women's Clothing\" refers to category_name = 'Women''s Clothing'"}
{"sample_id": 3985, "db_id": "public_review_platform", "final": {"question": "Among highest quality user of under ID 100, mention compliment type which got highest compliment number and user's followers.", "sql": "SELECT T1.compliment_type, T3.user_fans FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T2.number_of_compliments = 'Uber' AND T2.user_id < 100", "source_tables": ["compliments", "users", "users_compliments"]}, "evidence": "highest quality user refers to number_of_compliments = 'Uber'; user of under ID 100 refers to user_id < 100 ;"}
{"sample_id": 4139, "db_id": "citeseer", "final": {"question": "Among all the citation, what is the percentage of paper ID under the Agents classification?", "sql": "SELECT CAST(COUNT(CASE WHEN class_label = 'Agents' THEN paper_id ELSE NULL END) AS REAL) * 100 / COUNT(paper_id) FROM paper", "source_tables": ["paper"]}, "evidence": "classification refers to class_label; class_label = 'Agents'; percentage = (divide(count(paper_id where class_label = 'Agents')), (count(paper_id)))*100;"}
{"sample_id": 4140, "db_id": "citeseer", "final": {"question": "What is the most cited word? How many papers was that word cited in?", "sql": "SELECT word_cited_id, COUNT(paper_id) FROM content GROUP BY word_cited_id ORDER BY COUNT(word_cited_id) DESC LIMIT 1", "source_tables": ["content"]}, "evidence": "most cited word refers to max(count(word_cited_id);"}
{"sample_id": 4141, "db_id": "citeseer", "final": {"question": "What is the total number of word cited under that class labelled 'AI'?", "sql": "SELECT COUNT(DISTINCT T2.word_cited_id) FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'AI'", "source_tables": ["paper", "content"]}, "evidence": ""}
{"sample_id": 4142, "db_id": "citeseer", "final": {"question": "For all words cited in paper ID 315017, state the other paper ID and class label which also cited those words.", "sql": "SELECT T1.class_label, T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.paper_id = 315017", "source_tables": ["paper", "content"]}, "evidence": ""}
{"sample_id": 4143, "db_id": "citeseer", "final": {"question": "Among all the DB class type citation, which word is the most frequently cited?", "sql": "SELECT T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'DB' GROUP BY T2.word_cited_id ORDER BY COUNT(T2.word_cited_id) DESC LIMIT 1", "source_tables": ["paper", "content"]}, "evidence": "class type refers to class_label; class_label = 'DB'; word that is most frequently cited refers to max(count(word_cited_id);"}
{"sample_id": 4144, "db_id": "citeseer", "final": {"question": "Calculate the percentage of words used in Agents class label.", "sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.class_label = 'Agents' THEN T2.word_cited_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.word_cited_id) FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id", "source_tables": ["paper", "content"]}, "evidence": "percentage = (divide(count(word_cited_id where class_label = 'Agents')), (count(word_cited_id)))*100;"}
{"sample_id": 4145, "db_id": "citeseer", "final": {"question": "Which paper ID cited the most word? In which class label does it belongs to?", "sql": "SELECT T1.paper_id, T1.class_label FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id, T1.class_label ORDER BY COUNT(T2.word_cited_id) DESC LIMIT 1", "source_tables": ["paper", "content"]}, "evidence": "most cited word refers to max(word_cited_id);"}
{"sample_id": 4146, "db_id": "citeseer", "final": {"question": "List all the paper ID and its class type that cited the word 'word1002'.", "sql": "SELECT T1.paper_id, T1.class_label FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T2.word_cited_id = 'word1002'", "source_tables": ["paper", "content"]}, "evidence": "class type refers to class_label;"}
{"sample_id": 4147, "db_id": "citeseer", "final": {"question": "List all words cited in the AI class label.", "sql": "SELECT DISTINCT T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'AI'", "source_tables": ["paper", "content"]}, "evidence": ""}
{"sample_id": 4148, "db_id": "citeseer", "final": {"question": "What is the class label of paper ID 'chakrabarti01integrating'. How many words were cited by this paper ID?", "sql": "SELECT DISTINCT T1.class_label, COUNT(T2.word_cited_id) FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.paper_id = 'chakrabarti01integrating' GROUP BY T1.class_label", "source_tables": ["paper", "content"]}, "evidence": ""}
{"sample_id": 4149, "db_id": "citeseer", "final": {"question": "List all paper ID and its class type with more than 20 cited words.", "sql": "SELECT DISTINCT T1.paper_id, T1.class_label FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id GROUP BY T2.paper_id, T1.class_label HAVING COUNT(T2.word_cited_id) > 20", "source_tables": ["paper", "content"]}, "evidence": "class type refers to class_label; count(word_cited_id)>20"}
{"sample_id": 4158, "db_id": "simpson_episodes", "final": {"question": "Which crew member of the simpson 20s is the oldest?", "sql": "SELECT name FROM Person WHERE birthdate IS NOT NULL ORDER BY birthdate ASC LIMIT 1;", "source_tables": ["person"]}, "evidence": "oldest refers to Min(birthdate)"}
{"sample_id": 4159, "db_id": "simpson_episodes", "final": {"question": "What's the nickname for Dan Castellaneta?", "sql": "SELECT nickname FROM Person WHERE name = 'Dan Castellaneta';", "source_tables": ["person"]}, "evidence": "\"Dan Castellaneta\" is the name of Person"}
{"sample_id": 4160, "db_id": "simpson_episodes", "final": {"question": "Among the crew members of the simpson 20s born in the New York city, how many of them were born after the year 1970?", "sql": "SELECT COUNT(name) FROM Person WHERE birth_region = 'New York' AND SUBSTR(birthdate, 1, 4) > '1970';", "source_tables": ["person"]}, "evidence": "born in New York city refers to birth_region = 'New York'; born after year 1970 refers to ('%Y', birthdate) > 1970"}
{"sample_id": 4161, "db_id": "simpson_episodes", "final": {"question": "In which country was the winner of the Outstanding Voice-Over Performance award of 2009 born?", "sql": "SELECT T1.birth_country FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award = 'Outstanding Voice-Over Performance' AND T2.year = 2009 AND T2.result = 'Winner';", "source_tables": ["person", "award"]}, "evidence": "\"Outstanding Voice-Over Performance\" is the award; 2009 refers to year = 2009; 'Winner' is the result; country refers to birth_country"}
{"sample_id": 4162, "db_id": "simpson_episodes", "final": {"question": "Please list the names of all the awards won by the crew member whose nickname is Doofus.", "sql": "SELECT T2.award FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T1.nickname = 'Doofus' AND T2.result = 'Winner';", "source_tables": ["person", "award"]}, "evidence": "award won refers to result = 'Winner'"}
{"sample_id": 4163, "db_id": "simpson_episodes", "final": {"question": "How many crew members who were born in the USA were nominated for the Outstanding Animated Program (For Programming Less Than One Hour) award in 2009?", "sql": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T1.birth_country = 'USA' AND T2.result = 'Nominee' AND T2.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T2.year = 2009;", "source_tables": ["person", "award"]}, "evidence": "born in USA refers to birth_country = 'USA'; were nominated refers to result = 'Nominee'; 'Outstanding Animated Program (For Programming Less Than One Hour)' is the award; in 2009 refers to year = 2009"}
{"sample_id": 4164, "db_id": "simpson_episodes", "final": {"question": "Which character won the Outstanding Voice-Over Performance award in 2009?", "sql": "SELECT DISTINCT T1.character FROM Character_Award AS T1 INNER JOIN Award AS T2 ON T1.award_id = T2.award_id WHERE T2.award = 'Outstanding Voice-Over Performance' AND T2.year = 2009 AND T2.result = 'Winner';", "source_tables": ["character_award", "award"]}, "evidence": "won refers to result = 'Winner'"}
{"sample_id": 4165, "db_id": "simpson_episodes", "final": {"question": "Please list all the keywords of the episode Lost Verizon.", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Lost Verizon';", "source_tables": ["episode", "keyword"]}, "evidence": "\"Lost Verizon\" is the title of episode"}
{"sample_id": 4166, "db_id": "simpson_episodes", "final": {"question": "How many keywords does the episode that was aired on 2008/10/19 have?", "sql": "SELECT COUNT(T2.keyword) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.air_date = '2008-10-19';", "source_tables": ["episode", "keyword"]}, "evidence": "aired on 2008/10/19 refers to air_date = '2008-10-19'"}
{"sample_id": 4167, "db_id": "simpson_episodes", "final": {"question": "What's the rating of the episode in which Dan Castellaneta won the Outstanding Voice-Over Performance award in 2009?", "sql": "SELECT T2.rating FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award = 'Outstanding Voice-Over Performance' AND SUBSTR(T1.year, 1, 4) = '2009' AND T1.person = 'Dan Castellaneta';", "source_tables": ["episode", "award"]}, "evidence": "\"Dan Castellaneta\" is the person;\u00a0 2009 is year;\u00a0 won refers result = 'Winner'"}
{"sample_id": 4168, "db_id": "simpson_episodes", "final": {"question": "How many 7-star votes in star score did the episode Lost Verizon have?", "sql": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lost Verizon' AND T2.stars = 7;", "source_tables": ["episode", "vote"]}, "evidence": "7-stars vote refers to stars = 7; 'Lost Verizon' is the title of episode"}
{"sample_id": 4169, "db_id": "simpson_episodes", "final": {"question": "How many stars did most of the voters give in star score for the episode Lost Verizon?", "sql": "SELECT T2.stars FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lost Verizon' ORDER BY T2.votes DESC LIMIT 1;", "source_tables": ["episode", "vote"]}, "evidence": "\"Lost Verizon\" is the title of episode; most voters refers to Max(votes)"}
{"sample_id": 4170, "db_id": "simpson_episodes", "final": {"question": "Please list the titles of the episodes that have over 200 voters voting a 10 in star score.", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.votes > 200 AND T2.stars = 10;", "source_tables": ["episode", "vote"]}, "evidence": "over 200 votes refers to votes > 200; 10 in star score refers to stars = 10"}
{"sample_id": 4171, "db_id": "simpson_episodes", "final": {"question": "How many episodes aired in the year 2009 have over 15% of voters giving 10 stars in star score?", "sql": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 4) = '2009' AND T2.stars = 10 AND T2.percent > 15;", "source_tables": ["episode", "vote"]}, "evidence": "aired in the year 2009 refers to air_date like '2009%'; 10 stars in star score refers to stars = 10; over 15% of voters refers to Votes.percent > 15"}
{"sample_id": 4172, "db_id": "simpson_episodes", "final": {"question": "What's the title of the episode that got the most 7-star votes in star score?", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 7 ORDER BY T2.votes DESC LIMIT 1;", "source_tables": ["episode", "vote"]}, "evidence": "7-stars vote refers to stars = 7;\u00a0 most refers to Max(votes)"}
{"sample_id": 4173, "db_id": "simpson_episodes", "final": {"question": "How many stars on average does the episode Lost Verizon have?", "sql": "SELECT CAST(SUM(T2.votes * T2.stars) AS REAL) / SUM(T2.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lost Verizon';", "source_tables": ["episode", "vote"]}, "evidence": "\"Lost Verizon\" is the title of episode; stars on average = Divide( Sum (Multiply (votes, stars)), Sum(votes))"}
{"sample_id": 4174, "db_id": "simpson_episodes", "final": {"question": "What is the percentage of Primetime Emmy nominated episodes with a rating over 7 to all the episodes that have a rating over 7?", "sql": "SELECT CAST(SUM(CASE WHEN T1.award_category = 'Primetime Emmy' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.rating > 7 AND T1.result = 'Nominee';", "source_tables": ["episode", "award"]}, "evidence": "\"Primetime Emmy' is the award_category;\u00a0 rating over 7 refers to rating > 7; nominated refers to result = 'Nominee'; percentage = Divide(Count(episode_id(award_category = 'Primetime Emmy')), Count (episode_id)) * 100"}
{"sample_id": 4175, "db_id": "simpson_episodes", "final": {"question": "Name the title of the episode where Pamela Hayden voiced the character 'Ruthie.'", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.person = 'Pamela Hayden' AND T2.role = 'Ruthie';", "source_tables": ["episode", "credit"]}, "evidence": "\"Pamela Hayden\" is the person; voice the character 'Ruthie' refers to role = 'Ruthie'"}
{"sample_id": 4176, "db_id": "simpson_episodes", "final": {"question": "List down all the roles of Matt Groening on the episode titled 'In the Name of the Grandfather' along with the episode number and series number.", "sql": "SELECT T2.role, T1.episode, T1.number_in_series FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.person = 'Matt Groening' AND T1.title = 'In the Name of the Grandfather';", "source_tables": ["episode", "credit"]}, "evidence": "\"Matt Groening\" is the person; 'In the Name of the Grandfather' is the title of episode; episode number refers to episode; series number refers to number_in_series"}
{"sample_id": 4177, "db_id": "simpson_episodes", "final": {"question": "Write down the title and summary of the episode with the keyword 'eviction.'", "sql": "SELECT T1.title, T1.summary FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T2.keyword = 'eviction';", "source_tables": ["episode", "keyword"]}, "evidence": ""}
{"sample_id": 4178, "db_id": "simpson_episodes", "final": {"question": "What is the average number of stars received by the episode titled 'Wedding for Disaster.'", "sql": "SELECT AVG(T2.stars) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Wedding for Disaster';", "source_tables": ["episode", "vote"]}, "evidence": "\"Wedding for Disaster\" is the title of episode; average number of stars = Divide(Sum(stars), Count(stars))"}
{"sample_id": 4179, "db_id": "simpson_episodes", "final": {"question": "Write the title and all the keywords of the episode that was aired on 3/22/2009.", "sql": "SELECT T1.title, T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.air_date = '2009-03-22';", "source_tables": ["episode", "keyword"]}, "evidence": "aired on 3/22/2009 refers to air_date = '2009-03-22'"}
{"sample_id": 4180, "db_id": "simpson_episodes", "final": {"question": "What is the birth name of the person who voiced 'Helen Lovejoy?'", "sql": "SELECT DISTINCT T1.birth_name FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T2.role = 'Helen Lovejoy';", "source_tables": ["person", "credit"]}, "evidence": "voiced refers to role; role = 'Helen Lovejoy\""}
{"sample_id": 4181, "db_id": "simpson_episodes", "final": {"question": "What is the percentage ratio between uncredited and credited roles on the episode that won the 2017 Jupiter Award for Best International TV Series? Please include the title of the episode and the names of the persons who were uncredited alongside their role in that episode.", "sql": "SELECT CAST(SUM(CASE WHEN T2.credited = 'false' THEN 1 END) AS REAL) * 100 / SUM(CASE WHEN T2.credited = 'true' THEN 1 END), T3.title, T2.person FROM Award AS T1 INNER JOIN Credit AS T2 ON T2.episode_id = T1.episode_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2017' AND T1.award_category = 'Jupiter Award' AND T1.award = 'Best International TV Series' AND T1.result = 'Winner';", "source_tables": ["episode", "credit", "award"]}, "evidence": "uncredited refers to credited = ''; credited refers to credited = 'true'; won refers to result = 'Winner'; 2017 is the year; 'Jupiter Award' is the award_category; 'Best International TV Series' is the award; percentage ratio = Divide (SUM(credited = ''), SUM(credited = 'true')) * 100"}
{"sample_id": 4182, "db_id": "simpson_episodes", "final": {"question": "How many episodes have more than 1000 votes?", "sql": "SELECT COUNT(episode_id) FROM Episode WHERE votes > 1000;", "source_tables": ["episode"]}, "evidence": "more than 1000 votes refers to votes > 1000"}
{"sample_id": 4183, "db_id": "simpson_episodes", "final": {"question": "How many persons were born in New York, USA?", "sql": "SELECT COUNT(name) FROM Person WHERE birth_place = 'New York City' AND birth_country = 'USA';", "source_tables": ["person"]}, "evidence": "\"New York\" is the birth_place; 'USA' is the birth_region"}
{"sample_id": 4184, "db_id": "simpson_episodes", "final": {"question": "List the name of all awards along with the award category, nominated by Marc Wilmore.", "sql": "SELECT award_id, award_category FROM Award WHERE person = 'Marc Wilmore';", "source_tables": ["award"]}, "evidence": "\"Marc Wilmore\" is the name of person"}
{"sample_id": 4185, "db_id": "simpson_episodes", "final": {"question": "How many crew have their own nickname? List their full name along with the nickname.", "sql": "SELECT COUNT(name) FROM Person WHERE nickname IS NOT NULL;", "source_tables": ["person"]}, "evidence": "crew refers to Person; full name refers to name; have nickname refers to nickname IS NOT NULL"}
{"sample_id": 4186, "db_id": "simpson_episodes", "final": {"question": "Find the average height for each person.", "sql": "SELECT AVG(height_meters) FROM Person;", "source_tables": ["person"]}, "evidence": "average high = Divide(Sum(height_meters), Count(name))"}
{"sample_id": 4187, "db_id": "simpson_episodes", "final": {"question": "Calculate the difference between the highest votes for episode and the lowest votes for episode.", "sql": "SELECT MAX(votes) - MIN(votes) FROM Vote;", "source_tables": ["vote"]}, "evidence": "highest vote refers to Max(votes); lowest vote refers to Min(votes); difference = Subtract(Max(votes), Min(votes))"}
{"sample_id": 4188, "db_id": "simpson_episodes", "final": {"question": "List the name character awarded for the Outstanding Voice-Over Performance award in 2009.", "sql": "SELECT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.year = 2009 AND T1.award = 'Outstanding Voice-Over Performance';", "source_tables": ["character_award", "award"]}, "evidence": "in 2009 refers to year = 2009"}
{"sample_id": 4189, "db_id": "simpson_episodes", "final": {"question": "Among the person nominated for the Comedy Series Award in 2009, how many of them were born in California?", "sql": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.year = 2009 AND T2.award = 'Comedy Series' AND T1.birth_region = 'California';", "source_tables": ["person", "award"]}, "evidence": "nominated refers to result = 'Nominee'; born in California refers to birth_place = 'California'; in 2009 refers to year = 2009"}
{"sample_id": 4190, "db_id": "simpson_episodes", "final": {"question": "What is the title of episode that won the Best International TV Series Award in 2017?", "sql": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2017' AND T1.award = 'Best International TV Series' AND T1.result = 'Winner';", "source_tables": ["episode", "award"]}, "evidence": "won refers to result = 'Winner'; in 2017 refers to year = 2017"}
{"sample_id": 4191, "db_id": "simpson_episodes", "final": {"question": "List the name of persons who were not included in the credit for the 'How the Test Was Won' episode.", "sql": "SELECT T2.person FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'How the Test Was Won' AND T2.credited = 'false';", "source_tables": ["episode", "credit"]}, "evidence": "\"How the Test Was Won\" is the title of episode; not included in the credit refers to credited = ' '; name of person refers to person"}
{"sample_id": 4192, "db_id": "simpson_episodes", "final": {"question": "What is the title of episode that has a keyword of 'riot' and 'cake'?", "sql": "SELECT DISTINCT T1.title FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T2.keyword IN ('riot', 'cake');", "source_tables": ["episode", "keyword"]}, "evidence": "\"riot\" and \"cake\" are both keyword"}
{"sample_id": 4193, "db_id": "simpson_episodes", "final": {"question": "Which episode has the most vote for 10 stars rating?", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 10 ORDER BY T1.votes DESC LIMIT 1;", "source_tables": ["episode", "vote"]}, "evidence": "10 stars rating refers to stars = 10; most vote refers to Max(votes)"}
{"sample_id": 4194, "db_id": "simpson_episodes", "final": {"question": "Name all the person who involved in the making of simpson 20s episode that aired between October to November.", "sql": "SELECT DISTINCT T2.person FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.air_date, 6, 2) BETWEEN '10' AND '11';", "source_tables": ["episode", "credit"]}, "evidence": "aired between October to November refers to strftime('%m', air_date) between '10' and '11';"}
{"sample_id": 4195, "db_id": "simpson_episodes", "final": {"question": "State the name of director for the 'Treehouse of Horror XIX' episode.", "sql": "SELECT T2.person FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Treehouse of Horror XIX' AND T2.role = 'director';", "source_tables": ["episode", "credit"]}, "evidence": "\"Treehouse of Horror XIX\" is the title of episode; 'director' is the role of person; name refers to person"}
{"sample_id": 4196, "db_id": "simpson_episodes", "final": {"question": "Based on the credits, state how many roles were played in the 5th episode of simpson 20.", "sql": "SELECT COUNT(DISTINCT T2.role) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.episode = 5;", "source_tables": ["episode", "credit"]}, "evidence": "5th episode refers to episode = 5"}
{"sample_id": 4197, "db_id": "simpson_episodes", "final": {"question": "List all the keyword for 'Take My Life, Please' episode.", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Take My Life, Please';", "source_tables": ["episode", "keyword"]}, "evidence": "\"Take My Life,Please\" is the title of episode"}
{"sample_id": 4198, "db_id": "simpson_episodes", "final": {"question": "Among the episode that get more than 950 votes, how many of the episodes were nominated for the 'Outstanding Voice-Over Performance Award in 2009'? Find the percentage of the episodes.", "sql": "SELECT CAST(SUM(CASE WHEN T1.award = 'Outstanding Voice-Over Performance' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.episode_id) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.votes > 950 AND T1.year = 2009;", "source_tables": ["episode", "award"]}, "evidence": "more than 950 votes refers to votes > 950; in 2009 refers to year = 2009; number of episode = Count(episode_id); nominated refers to result = 'Nominee'; percentage = Divide(Count(award = 'Outstanding Voice-Over Performance'), Count(episode_id)) * 100"}
{"sample_id": 4199, "db_id": "simpson_episodes", "final": {"question": "What is the ratio between the 5 stars votes for 'No Loan Again, Naturally' episode and 'Coming to Homerica' episode?", "sql": "SELECT CAST(SUM(CASE WHEN T1.title = 'No Loan Again, Naturally' THEN T1.votes ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.title = 'Coming to Homerica' THEN T1.votes ELSE 0 END) AS ratio FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 5;", "source_tables": ["episode", "vote"]}, "evidence": "5 stars votes refers to stars = 5 ; 'No Loan Again, Naturally' and 'Coming to Homerica' are both the title of episode;\u00a0 ratio = Divide (votes where title = 'No Loan Again, Naturally', votes where title = 'Coming to Homerica')"}
{"sample_id": 4200, "db_id": "simpson_episodes", "final": {"question": "How many times was Ian Maxtone-Graham nominated for an award in Writers Guild of America, USA?", "sql": "SELECT COUNT(award_id) FROM Award WHERE person = 'Ian Maxtone-Graham' AND organization = 'Writers Guild of America, USA' AND result = 'Nominee';", "source_tables": ["award"]}, "evidence": "\"Ian Maxtone-Graham\" is the person; nominated refers to result = 'Nominee'; 'Writers Guild of America, USA' is the organization"}
{"sample_id": 4201, "db_id": "simpson_episodes", "final": {"question": "What is the name of the person that has the highest number of nominated award but didn't win?", "sql": "SELECT person FROM Award WHERE result = 'Nominee' GROUP BY person ORDER BY COUNT(person) DESC LIMIT 1;", "source_tables": ["award"]}, "evidence": "nominated refers to result = 'Nominee'; highest number of nominated award refers to Max(Count(person))"}
{"sample_id": 4202, "db_id": "simpson_episodes", "final": {"question": "What is the title of the episode that received the lowest rating?", "sql": "SELECT title FROM Episode ORDER BY rating LIMIT 1;", "source_tables": ["episode"]}, "evidence": "lowest rating refers to Min(rating)"}
{"sample_id": 4203, "db_id": "simpson_episodes", "final": {"question": "What year did the Simpsons receive its first ever award for Favorite Animated Comedy in People's Choice Award?", "sql": "SELECT year FROM Award WHERE result = 'Winner' AND award = 'Favorite Animated Comedy' ORDER BY year DESC LIMIT 1;", "source_tables": ["award"]}, "evidence": "\"Favorite Animated Comedy\" is the award; 'People's Choice Award' is the award_category; received award refers to result = 'Winner'; first ever award refers to Min(year)"}
{"sample_id": 4204, "db_id": "simpson_episodes", "final": {"question": "How many episodes was Dell Hake not included in the credit list?", "sql": "SELECT COUNT(*) FROM Credit WHERE person = 'Dell Hake' AND credited = 'false';", "source_tables": ["credit"]}, "evidence": "\"Dell Hake\" is the person; not included in the credit list refers to credited = ''"}
{"sample_id": 4205, "db_id": "simpson_episodes", "final": {"question": "How old was the awardee when he/she won the first-ever award for Outstanding Voice-Over Performance in Primetime Emmy Awards?", "sql": "SELECT T2.year - CAST(SUBSTR(T1.birthdate, 1, 4) AS int) AS age FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award = 'Outstanding Voice-Over Performance' AND T2.organization = 'Primetime Emmy Awards' AND T2.result = 'Winner';", "source_tables": ["person", "award"]}, "evidence": "\"Outstanding Voice-Over Performance\" is the award; 'Primetime Emmy Awards' is the organization; awardee refers to result = 'Winner'; first ever award refers to Min(year); age at the time of awarded refers to Subtract(year, SUBSTR(birthdate, 0, 5))"}
{"sample_id": 4206, "db_id": "simpson_episodes", "final": {"question": "What character did Dan Castellaneta play that won him an award for Outstanding Voice-Over Performance in 2009 in the Primetime Emmy Awards?", "sql": "SELECT DISTINCT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.person = 'Dan Castellaneta' AND T1.award = 'Outstanding Voice-Over Performance' AND T1.organization = 'Primetime Emmy Awards' AND T1.year = 2009;", "source_tables": ["character_award", "award"]}, "evidence": "\"Dan Castellaneta\" is the person; won refers to result = 'Winner'; 'Outstanding Voice-Over Performance' is the award; 'Primetime Emmy Awards' is the organization; in 2009 refers to year = 2009"}
{"sample_id": 4207, "db_id": "simpson_episodes", "final": {"question": "Among the episodes aired on April of 2009, how many episodes won an award?", "sql": "SELECT COUNT(T1.episode_id) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2009' AND T2.air_date LIKE '2009-04%';", "source_tables": ["episode", "award"]}, "evidence": "aired on refers to air_date, April refers to SUBSTR(air_date, 6, 2) = '04'; 2009 refers to SUBSTR (air_date, 0, 5) = '2009'"}
{"sample_id": 4208, "db_id": "simpson_episodes", "final": {"question": "What is the birth place of the cast or crew member who won the Best Voice-Over Performance in Online Film & Television Association in 2009?", "sql": "SELECT T1.birth_place FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award = 'Best Voice-Over Performance' AND T2.organization = 'Online Film & Television Association' AND T2.year = 2009;", "source_tables": ["person", "award"]}, "evidence": "won refers to result = 'Winner'; 'Best Voice-Over Performance' is the award; ' Online Film & Television Association' is the organization; in 2009 refers to year = 2009"}
{"sample_id": 4209, "db_id": "simpson_episodes", "final": {"question": "How many 10 star votes did the top 4 episodes with the highest rating received?", "sql": "SELECT SUM(T1.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 10 ORDER BY T1.rating DESC LIMIT 4;", "source_tables": ["episode", "vote"]}, "evidence": "10 stars votes refers to stars = 10; highest rating refers to Max(rating); number of votes refers to SUM(votes)"}
{"sample_id": 4210, "db_id": "simpson_episodes", "final": {"question": "In \"No Loan Again, Naturally\", how many stars received votes of no more than 50?", "sql": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'No Loan Again, Naturally' AND T2.votes < 50;", "source_tables": ["episode", "vote"]}, "evidence": "\"No Loan Again, Naturally\" is the title of episode; votes of no more than 50 refers to votes < 50; number of stars refers to SUM(stars)"}
{"sample_id": 4211, "db_id": "simpson_episodes", "final": {"question": "How many award winners are from the USA?", "sql": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T1.birth_country = 'USA' AND T2.result = 'Winner';", "source_tables": ["person", "award"]}, "evidence": "award winner refers to result = 'Winner'; 'USA' is the birth_country"}
{"sample_id": 4212, "db_id": "simpson_episodes", "final": {"question": "In Season 20 Episode 11, how many times was Doofus included in the credit list?", "sql": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T1.nickname = 'Doofus' AND T2.credited = 'true' AND T2.episode_id = 'S20-E11';", "source_tables": ["person", "credit"]}, "evidence": "in Season 20 Episode 11 refers to episode_id = 'S20-E11'; 'Doofus' is the nickname of person; include in credit list refers to credited = 'true'"}
{"sample_id": 4213, "db_id": "simpson_episodes", "final": {"question": "What was the first award won by the cast or crew member of the show? Give the name of the person who won the said award.", "sql": "SELECT T2.award, T1.name FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.result = 'Winner' ORDER BY T2.year LIMIT 1;", "source_tables": ["person", "award"]}, "evidence": "won refers to result = 'Winner'; first award refers to Min(year)"}
{"sample_id": 4214, "db_id": "simpson_episodes", "final": {"question": "In \"Sex, Pies and Idiot Scrapes\", how many percentage of votes did the 9 star score has?", "sql": "SELECT T2.percent FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Sex, Pies and Idiot Scrapes' AND T2.stars = 9;", "source_tables": ["episode", "vote"]}, "evidence": "\"Sex, Pies and Idiot Scrapes\" is the title of episode; 9 star score refers to stars = 9; percentage refers to percent"}
{"sample_id": 4215, "db_id": "simpson_episodes", "final": {"question": "List the award name and persons who won the award in 2009.", "sql": "SELECT award, person FROM Award WHERE result = 'Winner' AND SUBSTR(year, 1, 4) = '2009';", "source_tables": ["award"]}, "evidence": "won the award refers to result = 'Winner'; in 2009 refers to year = 2009"}
{"sample_id": 4216, "db_id": "simpson_episodes", "final": {"question": "Among the casts who were born in Los Angeles, describe the name and birth date of who have 1.8 m and above in height.", "sql": "SELECT name, birthdate FROM Person WHERE birth_place = 'Los Angeles' AND height_meters >= 1.8;", "source_tables": ["person"]}, "evidence": "\"Los Angeles\" is the birth_place; 1.8 m and above in height refers to height_meters > = 1.8"}
{"sample_id": 4217, "db_id": "simpson_episodes", "final": {"question": "Provide the episode number, title and rating of which were aired in October, 2008.", "sql": "SELECT episode, title, rating FROM Episode WHERE SUBSTR(air_date, 1, 7) LIKE '2008-10%';", "source_tables": ["episode"]}, "evidence": "episode number refers to episode; aired in refers to air_date; October refers to Substr(air_date, 6, 2) = '10': 2008 refers to Substr(air_date, 0, 5) = '2008'"}
{"sample_id": 4218, "db_id": "simpson_episodes", "final": {"question": "Write down the award ID, award name and winner for character named \"Homer simpson 20\".", "sql": "SELECT T1.award_id, T1.award, T1.person FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Homer Simpson' AND T1.result = 'Winner';", "source_tables": ["character_award", "award"]}, "evidence": "\"Homer simpson 20\" is the character; \"Winner\" is the result; award name refers to award"}
{"sample_id": 4219, "db_id": "simpson_episodes", "final": {"question": "List down the award name, result, credit category and credited status of the \"Billy Kimball\".", "sql": "SELECT DISTINCT T1.award, T1.result, T2.category, T2.credited FROM Award AS T1 INNER JOIN Credit AS T2 ON T2.episode_id = T1.episode_id WHERE T2.person = 'Billy Kimball';", "source_tables": ["credit", "award"]}, "evidence": "\"Billy Kimball\" is the person; award name refers to award; credited category refers to category; credited status refers to credited; credited = 'true' means the person is included in the credit list and vice versa"}
{"sample_id": 4220, "db_id": "simpson_episodes", "final": {"question": "Name the person, award, organization, result and credited status of the assistant director in S20-E13.", "sql": "SELECT T1.person, T1.award, T1.organization, T1.result, T2.credited FROM Award AS T1 INNER JOIN Credit AS T2 ON T2.episode_id = T1.episode_id WHERE T2.episode_id = 'S20-E13' AND T2.role = 'assistant director';", "source_tables": ["credit", "award"]}, "evidence": "\"assistant director\" is the role of person; 'S20-E13' is the episode_id; credited status refers to credited; credited = 'true' means the person is included in the credit list and vice versa"}
{"sample_id": 4221, "db_id": "simpson_episodes", "final": {"question": "Describe the birth country, height and person name who were not included in credit list with category of casting.", "sql": "SELECT T1.birth_country, T1.height_meters, T1.name FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T2.category = 'Cast' AND T2.credited = 'false';", "source_tables": ["person", "credit"]}, "evidence": "height refers to height_meters; not in credit list refers to credited = ''; category of casting refers to category = 'Casting Department'"}
{"sample_id": 4222, "db_id": "simpson_episodes", "final": {"question": "List the nominee, keywords and episode ID of the title \"The Good, the Sad and the Drugly\".", "sql": "SELECT T3.person, T1.keyword, T1.episode_id FROM Keyword AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Award AS T3 ON T2.episode_id = T3.episode_id WHERE T2.title = 'The Good, the Sad and the Drugly' AND T3.result = 'Nominee';", "source_tables": ["episode", "keyword", "award"]}, "evidence": "nominee refers to result = 'Nominee'"}
{"sample_id": 4223, "db_id": "simpson_episodes", "final": {"question": "What is the voting numbers and percentage of the best rating scale of the episode which had keyword of \"arab stereotype\"?", "sql": "SELECT T2.votes, T2.percent FROM Keyword AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.keyword = 'arab stereotype' AND T2.stars = 10;", "source_tables": ["vote", "keyword"]}, "evidence": "best rating scale refers to stars = 10"}
{"sample_id": 4224, "db_id": "simpson_episodes", "final": {"question": "For the episode who won the award held by Jupiter Award, describe award name, aired date and rating of that episode.", "sql": "SELECT T1.award, T2.air_date, T2.rating FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.organization = 'Jupiter Award' AND T1.result = 'Winner';", "source_tables": ["episode", "award"]}, "evidence": "held by Jupiter Award refers to organization = 'Jupiter Award'; won the award refers to result = 'Winner'"}
{"sample_id": 4225, "db_id": "simpson_episodes", "final": {"question": "Mention the episode ID, title and any three keywords of the episode which get the most number of votes in star classification of worst.", "sql": "SELECT DISTINCT T3.episode_id, T2.title, T1.keyword FROM Keyword AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Vote AS T3 ON T2.episode_id = T3.episode_id WHERE T3.stars = 1 ORDER BY T3.votes DESC LIMIT 3;", "source_tables": ["episode", "vote", "keyword"]}, "evidence": "star classification of worst refers to stars = 1; most number of votes refers to MAX(votes)"}
{"sample_id": 4226, "db_id": "simpson_episodes", "final": {"question": "Among the episodes with excellent rating which were aired in 2008, describe the title, episode's image, award name and person who were nominated.", "sql": "SELECT T2.title, T2.episode_image, T1.award, T1.person FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.rating BETWEEN 7 AND 10 AND SUBSTR(T2.air_date, 1, 4) = '2008' AND T1.result = 'Nominee';", "source_tables": ["episode", "award"]}, "evidence": "excellent rating refers to 7 < = rating < = 10; aired in 2008 refers to SUBSTRACT(air_date, 0, 5) = '2008'; who were nominated refers to result = 'Nominee'"}
{"sample_id": 4227, "db_id": "simpson_episodes", "final": {"question": "Describe the award title, person and character name of the award ID 326.", "sql": "SELECT DISTINCT T1.award, T1.person, T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.award_id = 326;", "source_tables": ["character_award", "award"]}, "evidence": ""}
{"sample_id": 4228, "db_id": "simpson_episodes", "final": {"question": "Describe name, birth country, role in episode and age in 2022 of the oldest crew member..", "sql": "SELECT T1.name, T1.birth_place, T2.role, 2022 - CAST(SUBSTR(T1.birthdate, 1, 4) AS int) AS age FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T1.birthdate IS NOT NULL ORDER BY T1.birthdate LIMIT 1;", "source_tables": ["person", "credit"]}, "evidence": "age in 2022 refers to SUBTRACT(2022, substr(birthdate, 0, 5)); oldest refers to MIN(birthdate)"}
{"sample_id": 4229, "db_id": "simpson_episodes", "final": {"question": "Provide the number of credits, category, role and birthplace of the crew member who was born in North Korea.", "sql": "SELECT DISTINCT T2.credited, T2.category, T2.role, T1.birth_place FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T1.birth_country = 'North Korea';", "source_tables": ["person", "credit"]}, "evidence": "number of credits refers to credited; born in North Korea refers to birth_country = 'North Korea'"}
{"sample_id": 4230, "db_id": "simpson_episodes", "final": {"question": "Find the winning rate of award in 2010. Describe the winner name, award name, episode title and role of the winner in that episode.", "sql": "SELECT T3.rate, T4.person, T4.award, T5.title, T4.role FROM ( SELECT CAST(SUM(CASE WHEN T1.result = 'Winner' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.result IN ('Winner', 'Nominee') THEN 1 ELSE 0 END) AS rate , T1.person, T1.award, T2.title, T1.role FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2010' ) AS T3 INNER JOIN Award AS T4 INNER JOIN Episode AS T5 ON T4.episode_id = T5.episode_id WHERE T4.year = 2010 AND T4.result = 'Winner';", "source_tables": ["episode", "award"]}, "evidence": "in 2010 refers to year = 2010; winning rate refers to DIVIDE(COUNT(result = 'winner'), COUNT(*));"}
{"sample_id": 4231, "db_id": "simpson_episodes", "final": {"question": "Name the title of the episode that received the highest star score and the highest number of votes.", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id ORDER BY T2.stars DESC, T2.votes DESC LIMIT 1;", "source_tables": ["episode", "vote"]}, "evidence": "received the highest star score refers to MAX(stars); the highest number of votes refers to MAX(votes)"}
{"sample_id": 4232, "db_id": "simpson_episodes", "final": {"question": "What is the total number of awards won by The simpson 20s: Season 20?", "sql": "SELECT COUNT(award_id) FROM Award WHERE result = 'Winner';", "source_tables": ["award"]}, "evidence": "total number of awards refers to COUNT(award); awards won refers to result = 'Winner';"}
{"sample_id": 4233, "db_id": "simpson_episodes", "final": {"question": "Name the title of the episode that was nominated for Emmy's Outstanding Animated Program 21 times.", "sql": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.organization = 'Primetime Emmy Awards' AND T1.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T1.result = 'Nominee' GROUP BY T1.episode_id HAVING COUNT(T1.episode_id) = 21;", "source_tables": ["episode", "award"]}, "evidence": "nominated for refers to result = 'Nominee'; Outstanding Animated Program refers to award = 'Outstanding Animated Program (For Programming Less Than One Hour)'; Emmy's refers to organization = 'Primetime Emmy Awards'; 21 times refers to COUNT(episode_id) = 21;"}
{"sample_id": 4234, "db_id": "simpson_episodes", "final": {"question": "What is the average number of stars assigned to The simpson 20s: S20-E12? What is the said episode all about?", "sql": "SELECT AVG(T2.stars), T1.summary FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.episode_id = 'S20-E12';", "source_tables": ["episode", "vote"]}, "evidence": "average number of stars refers to AVG(stars); simpson 20s: S20-E12 refers to episode_id = 'S20-E12'; episode all about refers to summary"}
{"sample_id": 4235, "db_id": "simpson_episodes", "final": {"question": "Name the performer who won Emmy Award for Outstanding Voice-Over Performance by playing Homer simpson 20.", "sql": "SELECT T1.person FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Homer simpson 20' AND T1.organization = 'Primetime Emmy Awards' AND T1.award = 'Outstanding Voice-Over Performance' AND T1.result = 'Winner';", "source_tables": ["character_award", "award"]}, "evidence": "Outstanding Voice-Over Performance refers to award = 'Outstanding Voice-Over Performance'; who won refers to result = 'Winner'; Emmy refers to organization = 'Primetime Emmy Awards'; playing Homer simpson 20 refers to character = 'Homer simpson 20'"}
{"sample_id": 4236, "db_id": "simpson_episodes", "final": {"question": "What is the birth name of Al Jean and his role in creating The simpson 20s: Season 20?", "sql": "SELECT DISTINCT T1.birth_name, T2.role FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T1.name = 'Al Jean';", "source_tables": ["person", "credit"]}, "evidence": ""}
{"sample_id": 4237, "db_id": "simpson_episodes", "final": {"question": "How many nominations have Billy Kimball received in 2010 for The simpson 20s: Season 20?", "sql": "SELECT COUNT(award_id) FROM Award WHERE person = 'Billy Kimball' AND SUBSTR(year, 1, 4) = '2010' AND result = 'Nominee';", "source_tables": ["award"]}, "evidence": "in 2010 refers to year = 2010; nominations refers to result = 'Nominee'"}
{"sample_id": 4238, "db_id": "simpson_episodes", "final": {"question": "List all keywords associated with the episode 'Take My Life, Please'.", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Take My Life, Please';", "source_tables": ["episode", "keyword"]}, "evidence": "episode 'Take My Life, Please' refers to title = \u00a0 'Take My Life, Please'"}
{"sample_id": 4239, "db_id": "simpson_episodes", "final": {"question": "Indicate the name and category of the most recent award received by the show.", "sql": "SELECT award, award_category FROM Award WHERE result = 'Winner' ORDER BY year DESC LIMIT 1;", "source_tables": ["award"]}, "evidence": "most recent refers to MAX(year); received refers to result = 'Winner'; name of award refers to award; category refers to award_category"}
{"sample_id": 4240, "db_id": "simpson_episodes", "final": {"question": "What is The simpson 20s: Season 20 average awards winning rate?", "sql": "SELECT CAST(SUM(CASE WHEN result = 'Winner' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(award) AS rate FROM Award;", "source_tables": ["award"]}, "evidence": "average awards winning rate refers to DIVIDE(SUM(result = 'winner'), COUNT(award));"}
{"sample_id": 4241, "db_id": "simpson_episodes", "final": {"question": "How many episodes were aired between October and November 2008?", "sql": "SELECT COUNT(episode_id) FROM Episode WHERE air_date LIKE '2008-10%' OR air_date LIKE '2008-11%';", "source_tables": ["episode"]}, "evidence": "between October and November 2008 refers to air_date BETWEEN '2008-10-01' and '2008-11-30'"}
{"sample_id": 4242, "db_id": "simpson_episodes", "final": {"question": "Among episodes aired in 2009, which episode has received the worst response based on the rating.", "sql": "SELECT episode_id FROM Episode WHERE air_date LIKE '2009%' ORDER BY rating LIMIT 1;", "source_tables": ["episode"]}, "evidence": "aired in 2009 refers to year(air_date) = 2009; received the worst response based on the rating refers to MIN(rating)"}
{"sample_id": 4243, "db_id": "simpson_episodes", "final": {"question": "List the categories for which Bonita Pietila was given credit and her role in creating the episodes.", "sql": "SELECT DISTINCT category, role FROM Credit WHERE person = 'Bonita Pietila';", "source_tables": ["credit"]}, "evidence": ""}
{"sample_id": 4244, "db_id": "simpson_episodes", "final": {"question": "Who from The simpson 20s: Season 20 cast and crew was born in October 29, 1957 in Chicago, Illinois?", "sql": "SELECT name FROM Person WHERE birthdate = '1957-10-29' AND birth_place = 'Chicago' AND birth_region = 'Illinois';", "source_tables": ["person"]}, "evidence": "born in October 29, 1957 refers to birthdate = '1957-10-29'; in Chicago refers to birth_place = 'Chicago'; Illinois refers to birth_region = 'Illinois'"}
{"sample_id": 4245, "db_id": "simpson_episodes", "final": {"question": "Who produced The simpson 20s: Season 20?", "sql": "SELECT DISTINCT person FROM Credit WHERE role = 'producer';", "source_tables": ["credit"]}, "evidence": "produced refers to role = 'producer'"}
{"sample_id": 4246, "db_id": "simpson_episodes", "final": {"question": "How old was composer of the show when he was nominated for Emmy's Outstanding Music Composition for a Series in 2009. Indicate his full name as well.", "sql": "SELECT T1.year - T2.birthdate AS ageIn2009, T2.name FROM Award AS T1 INNER JOIN Person AS T2 ON T1.person = T2.name WHERE T1.role = 'composer' AND T1.organization = 'Primetime Emmy Awards' AND T1.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)' AND T1.result = 'Nominee' AND T1.year = 2009;", "source_tables": ["person", "award"]}, "evidence": "in 2009 refers to year = 2009; old refers to SUBTRACT(2009, birthdate); composer of the show refers to role = 'composer'; Emmy's refers to organization = 'Primetime Emmy Awards'; nominated refers to result = 'Nominee'; Outstanding Music Composition refers to award = 'Outstanding Music Composition for a Series (Original Dramatic Score)'"}
{"sample_id": 4247, "db_id": "simpson_episodes", "final": {"question": "Which episode of The simpson 20s: Season 20 has received the most nominations? Indicate the title.", "sql": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id GROUP BY T1.episode_id ORDER BY COUNT(*) DESC LIMIT 1;", "source_tables": ["episode", "award"]}, "evidence": "received the most nomination refers to MAX(COUNT(episode_id))"}
{"sample_id": 4248, "db_id": "simpson_episodes", "final": {"question": "Please indicate the birthplace of the crew which name is Dan Castellaneta.", "sql": "SELECT birth_place FROM Person WHERE name = 'Dan Castellaneta';", "source_tables": ["person"]}, "evidence": ""}
{"sample_id": 4249, "db_id": "simpson_episodes", "final": {"question": "How many crews were born in the USA?", "sql": "SELECT COUNT(name) FROM Person WHERE birth_country = 'USA';", "source_tables": ["person"]}, "evidence": "born in the USA refers to birth_country = 'USA'"}
{"sample_id": 4250, "db_id": "simpson_episodes", "final": {"question": "Please list the name of crew that were born before 1970.", "sql": "SELECT name FROM Person WHERE SUBSTR(birthdate, 1, 4) < '1970';", "source_tables": ["person"]}, "evidence": "born before 1970 refers to birthdate < '1970-01-01'"}
{"sample_id": 4251, "db_id": "simpson_episodes", "final": {"question": "Name of the crew that were born in California, USA between 1958 and 1969.", "sql": "SELECT name FROM Person WHERE SUBSTR(birthdate, 1, 4) = '1958' AND birth_place = 'California' AND birth_country = 'USA';", "source_tables": ["person"]}, "evidence": "born in California refers to birth_place = 'California'; USA refers to birth_country = 'USA'; between 1958 and 1969 refers to birthdate BETWEEN '1958-01-01' and '1958-12-31'"}
{"sample_id": 4252, "db_id": "simpson_episodes", "final": {"question": "Which episode ids are rated 5 stars and have more than 100 votes?", "sql": "SELECT episode_id FROM Vote WHERE stars = 5 AND votes > 100;", "source_tables": ["vote"]}, "evidence": "more than 100 votes refers to votes > 100"}
{"sample_id": 4253, "db_id": "simpson_episodes", "final": {"question": "Please indicate the keywords of the title \"Double, Double, Boy in Trouble\".", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Double, Double, Boy in Trouble';", "source_tables": ["episode", "keyword"]}, "evidence": ""}
{"sample_id": 4254, "db_id": "simpson_episodes", "final": {"question": "Among episodes from 10 to 20, which episode has more than 200 votes?", "sql": "SELECT DISTINCT T1.episode FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.episode BETWEEN 10 AND 20 AND T2.votes > 200;", "source_tables": ["episode", "vote"]}, "evidence": "episodes from 10 to 20 refers to episode BETWEEN 10 and 20; more than 200 votes refers to COUNT(votes) > 200"}
{"sample_id": 4255, "db_id": "simpson_episodes", "final": {"question": "Please indicate the keywords of the episode that won the Primetime Emmy Award category.", "sql": "SELECT T2.keyword FROM Award AS T1 INNER JOIN Keyword AS T2 ON T2.episode_id = T1.episode_id WHERE T1.award_category = 'Primetime Emmy';", "source_tables": ["keyword", "award"]}, "evidence": "Primetime Emmy Award refers to award_category = 'Primetime Emmy'"}
{"sample_id": 4256, "db_id": "simpson_episodes", "final": {"question": "Who is the recipient of the Primetime Emmy Award with the most votes?", "sql": "SELECT T1.person FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.award_category = 'Primetime Emmy' ORDER BY T2.votes DESC LIMIT 1;", "source_tables": ["vote", "award"]}, "evidence": "Primetime Emmy Award refers to award_category = 'Primetime Emmy'; the most votes refers to MAX(votes)"}
{"sample_id": 4257, "db_id": "simpson_episodes", "final": {"question": "Which episode id did award Outstanding Animated Program (For Programming Less Than One Hour) with an episode star score of 10?", "sql": "SELECT DISTINCT T1.episode_id FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T2.stars = 10;", "source_tables": ["vote", "award"]}, "evidence": "star score of 10 refers to stars = 10"}
{"sample_id": 4258, "db_id": "simpson_episodes", "final": {"question": "Please give the name of the director who achieved the Outstanding Animated Program (For Programming Less Than One Hour) award whose episode title is \"No Loan Again, Naturally\".", "sql": "SELECT T1.person FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.role = 'director' AND T1.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T2.title = 'No Loan Again, Naturally';", "source_tables": ["episode", "award"]}, "evidence": "the director refers to role = 'director'"}
{"sample_id": 4259, "db_id": "simpson_episodes", "final": {"question": "Please indicate which writer has an episode star score greater than 5 in 2009.", "sql": "SELECT T1.person FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2009' AND T1.role = 'writer' AND T2.votes > 5;", "source_tables": ["episode", "award"]}, "evidence": "writer refers to role = 'writer'; star score greater than 5 refers to stars > 5; in 2009 refers to year = 2009"}
{"sample_id": 4260, "db_id": "simpson_episodes", "final": {"question": "How many WGA Award (TV) award recipients were born in the USA from 2009 to 2010?", "sql": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award_category = 'WGA Award (TV)' AND T1.birth_country = 'USA' AND T2.year BETWEEN 2009 AND 2010;", "source_tables": ["person", "award"]}, "evidence": "WGA Award (TV) award refers to award_category = 'WGA Award (TV)'; born in the USA refers to birth_country = 'USA'; from 2009 to 2010 refers to birthdate BETWEEN '2019-01-01' and '2019-12-31'"}
{"sample_id": 4261, "db_id": "simpson_episodes", "final": {"question": "Which episode did the composer win for Outstanding Music Composition for a Series (Original Dramatic Score) with more than 200 votes?", "sql": "SELECT DISTINCT T1.episode_id FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.role = 'composer' AND T1.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)' AND T2.votes > 200;", "source_tables": ["vote", "award"]}, "evidence": "more than 200 votes refer to votes > 200; composer refers to role = 'composer'; Outstanding Music Composition for a Series (Original Dramatic Score) refers to award = 'Outstanding Music Composition for a Series (Original Dramatic Score)'"}
{"sample_id": 4262, "db_id": "simpson_episodes", "final": {"question": "The person named Al Jean achieved the Primetime Emmy Award category in 2009, which episode did AI Jean achieve?", "sql": "SELECT T2.episode_id FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2009' AND T1.person = 'Al Jean' AND T1.award_category = 'Primetime Emmy';", "source_tables": ["episode", "award"]}, "evidence": "in 2009 refers to year = 2009"}
{"sample_id": 4263, "db_id": "simpson_episodes", "final": {"question": "How much more votes for episode 1 than for episode 5?", "sql": "SELECT SUM(CASE WHEN T1.episode = 1 THEN T2.votes ELSE 0 END) - SUM(CASE WHEN T1.episode = 5 THEN T2.votes ELSE 0 END) AS diff FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id;", "source_tables": ["episode", "vote"]}, "evidence": "more votes refers to SUBTRACT(SUM(votes when episode = 1), SUM(votes when episode = 5))"}
{"sample_id": 4264, "db_id": "simpson_episodes", "final": {"question": "What award did the character Homer simpson 20 achieve in 2009?", "sql": "SELECT DISTINCT T1.award FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.year = 2009 AND T2.character = 'Homer Simpson';", "source_tables": ["character_award", "award"]}, "evidence": "in 2009 refers to year = 2009"}
{"sample_id": 4265, "db_id": "simpson_episodes", "final": {"question": "How many episodes have won the award for Outstanding Animated Program (Programming Under One Hour) with less than 100 votes? Calculate the percentage of episodes with less than 100 votes out of total episodes.", "sql": "SELECT SUM(CASE WHEN T2.votes < 100 THEN 1 ELSE 0 END) AS num , CAST(SUM(CASE WHEN T2.votes < 100 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Award AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE T1.award = 'Outstanding Animated Program (For Programming Less Than One Hour)';", "source_tables": ["vote", "episode", "award"]}, "evidence": "less than 100 votes refers to votes < 100; percentage refers to DIVIDE(COUNT(episode_id when votes < 100), COUNT(episode_id)) * 100%"}
{"sample_id": 4266, "db_id": "simpson_episodes", "final": {"question": "How many recipients of the Primetime Emmy Award category that were born in the USA? Find the percentage of Americans in the total number of the country.", "sql": "SELECT SUM(CASE WHEN T1.birth_country = 'USA' THEN 1 ELSE 0 END) AS num , CAST(SUM(CASE WHEN T1.birth_country = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award_category = 'Primetime Emmy' AND T2.person = 'Dan Castellaneta';", "source_tables": ["person", "award"]}, "evidence": "born in the USA refers to birth_country = 'USA'; recipients refers to person = 'recipients'; percentage refers to DIVIDE(COUNT(birth_country = 'USA'), count(award_id))"}
{"sample_id": 4267, "db_id": "simpson_episodes", "final": {"question": "Please list two people who are the nominees for the \"Outstanding Voice-Over Performance\" award for season 20.", "sql": "SELECT person FROM Award WHERE result = 'Nominee' AND award = 'Outstanding Voice-Over Performance' AND episode_id LIKE 'S20%' LIMIT 2;", "source_tables": ["award"]}, "evidence": "season 20 refers to episode_id LIKE 'S20%'"}
{"sample_id": 4268, "db_id": "simpson_episodes", "final": {"question": "How many executive producers are the nominees for the award of \"Outstanding Animated Program (For Programming Less Than One Hour)\"?", "sql": "SELECT COUNT(*) FROM Award WHERE role = 'executive producer' AND result = 'Nominee' AND award = 'Outstanding Animated Program (For Programming Less Than One Hour)';", "source_tables": ["award"]}, "evidence": "the nominees refers to result = 'Nominee'; executive producers refers to role = 'executive producer'"}
{"sample_id": 4269, "db_id": "simpson_episodes", "final": {"question": "In the crew, who was born in 1962 in California?", "sql": "SELECT name FROM Person WHERE SUBSTR(birthdate, 1, 4) = '1962' AND birth_region = 'California';", "source_tables": ["person"]}, "evidence": "born in 1962 refers to year(birthdate) = 1962; in California refers to birth_region = 'California'"}
{"sample_id": 4270, "db_id": "simpson_episodes", "final": {"question": "How many of the crew members who are taller than 1.70m were born in Canada?", "sql": "SELECT COUNT(name) FROM Person WHERE height_meters > 1.70 AND birth_country = 'Canada';", "source_tables": ["person"]}, "evidence": "taller than 1.70m refers to height_meters > 1.70; born in Canada refers to birth_country = 'Canada'"}
{"sample_id": 4271, "db_id": "simpson_episodes", "final": {"question": "How many people were considered as prospective recipients of the \"Animation\" award?", "sql": "SELECT COUNT(*) FROM Award WHERE award = 'Animation' AND result = 'Nominee';", "source_tables": ["award"]}, "evidence": "prospective recipients refers to result = 'Nominee'"}
{"sample_id": 4272, "db_id": "simpson_episodes", "final": {"question": "Please list any three episodes that have an excellent rating.", "sql": "SELECT title FROM Episode WHERE rating BETWEEN 7 AND 10 LIMIT 3;", "source_tables": ["episode"]}, "evidence": "an excellent rating refers to 7 < rating < = 10"}
{"sample_id": 4273, "db_id": "simpson_episodes", "final": {"question": "What are the top five most popular episodes?", "sql": "SELECT episode_id FROM Episode ORDER BY votes DESC LIMIT 5;", "source_tables": ["episode"]}, "evidence": "most popular episodes refers to MAX(votes)"}
{"sample_id": 4274, "db_id": "simpson_episodes", "final": {"question": "Please list the three episodes with the highest number of votes for the worst star rating.", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = ( SELECT MIN(stars) FROM Vote ) ORDER BY T2.votes DESC LIMIT 3;", "source_tables": ["episode", "vote"]}, "evidence": "highest number of votes refers to MAX(COUNT(votes)); worst star rating refers to stars = 1"}
{"sample_id": 4275, "db_id": "simpson_episodes", "final": {"question": "What was the character that Dan Castellaneta did the voice over for and was awarded?", "sql": "SELECT DISTINCT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.award LIKE '%Voice-Over%' AND T1.person = 'Dan Castellaneta';", "source_tables": ["character_award", "award"]}, "evidence": "voice over for and was awarded refers to award like '%Voice-Over%';"}
{"sample_id": 4276, "db_id": "simpson_episodes", "final": {"question": "Please list all of the episodes that aired in 2008 that have the highest number of votes for the maximum star rating.", "sql": "SELECT T1.episode_id FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 4) = '2008' ORDER BY T2.votes DESC LIMIT 1;", "source_tables": ["episode", "vote"]}, "evidence": "aired in 2008 refers to air_date like '2008%'; highest number of votes refers to MAX(votes); maximum star rating refers to stars = 10"}
{"sample_id": 4277, "db_id": "simpson_episodes", "final": {"question": "What are the keywords of the episode \"Take My Life, Please\"?", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Take My Life, Please';", "source_tables": ["episode", "keyword"]}, "evidence": "episode \"Take My Life, Please\" refers to title = 'Take My Life, Please'"}
{"sample_id": 4278, "db_id": "simpson_episodes", "final": {"question": "Please provide any two episodes' names that have the same keyword of \"1930s to 2020s\".", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T2.keyword = '1930s to 2020s' LIMIT 2;", "source_tables": ["episode", "keyword"]}, "evidence": ""}
{"sample_id": 4279, "db_id": "simpson_episodes", "final": {"question": "In 2010, which episode did Joel H. Cohen win an award for?", "sql": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2010' AND T1.person = 'Joel H. Cohen';", "source_tables": ["episode", "award"]}, "evidence": "In 2010 refers to year = 2010"}
{"sample_id": 4280, "db_id": "simpson_episodes", "final": {"question": "How many votes of 5-star did the episode \"Lisa the Drama Queen\" receive?", "sql": "SELECT SUM(T2.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lisa the Drama Queen' AND T2.stars = 5;", "source_tables": ["episode", "vote"]}, "evidence": "episode \"Lisa the Drama Queen\" refers to title = 'Lisa the Drama Queen';"}
{"sample_id": 4281, "db_id": "simpson_episodes", "final": {"question": "What is the number of votes for 10-star for the episode that has the keyword \"reference to the fantastic four\"?", "sql": "SELECT T2.votes FROM Keyword AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10 AND T1.keyword = 'reference to the fantastic four';", "source_tables": ["vote", "keyword"]}, "evidence": "10-star refers to stars = 10"}
{"sample_id": 4282, "db_id": "simpson_episodes", "final": {"question": "What is the difference between the number of votes for 1-star vs. 10-star for the episode \"The Burns and the Bees\"?", "sql": "SELECT SUM(CASE WHEN T2.stars = 10 THEN T2.votes ELSE 0 END) - SUM(CASE WHEN T2.stars = 1 THEN T2.votes ELSE 0 END) AS Difference FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'The Burns and the Bees';", "source_tables": ["episode", "vote"]}, "evidence": "1-star refers to stars = 1; 10-star refers to stars = 10; episode \"The Burns and the Bees\" refers to title = 'The Burns and the Bees'; difference refers to SUBTRACT(votes when stars = 1, votes when stars = 10)"}
{"sample_id": 4283, "db_id": "simpson_episodes", "final": {"question": "What are the keywords of the least popular episode?", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id ORDER BY T1.votes LIMIT 1;", "source_tables": ["episode", "keyword"]}, "evidence": "least popular episode refers to MIN(votes)"}
{"sample_id": 4368, "db_id": "student_loan", "final": {"question": "How many students have never been absent from school?", "sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE 'month' = 0", "source_tables": ["longest_absense_from_school"]}, "evidence": "have never been absent refers to `month` = 0;"}
{"sample_id": 4369, "db_id": "student_loan", "final": {"question": "For the students who have been absent from school for the longest time, how many months have they been absent?", "sql": "SELECT MAX(month) FROM longest_absense_from_school", "source_tables": ["longest_absense_from_school"]}, "evidence": "absent from school for the longest time refers to MAX(month)"}
{"sample_id": 4370, "db_id": "student_loan", "final": {"question": "How many students belong to the navy department?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'navy'", "source_tables": ["enlist"]}, "evidence": "belong to the navy department refers to organ = 'navy';"}
{"sample_id": 4371, "db_id": "student_loan", "final": {"question": "Among the students that have been absent from school for more than 5 months, how many of them are male?", "sql": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN male AS T2 ON T1.'name' = T2.'name' WHERE T1.'month' >= 5", "source_tables": ["male", "longest_absense_from_school"]}, "evidence": "absent from school for more than 5 months refers to `month`\u00a0 > = 5;"}
{"sample_id": 4372, "db_id": "student_loan", "final": {"question": "Please list the names of the male students that belong to the navy department.", "sql": "SELECT T1.name FROM enlist AS T1 INNER JOIN male AS T2 ON T1.'name' = T2.'name' WHERE T1.organ = 'navy'", "source_tables": ["male", "enlist"]}, "evidence": "belong to the navy department refers to organ = 'navy';"}
{"sample_id": 4373, "db_id": "student_loan", "final": {"question": "Among the students that have filed for bankruptcy, how many of them have been absent from school for over 5 months?", "sql": "SELECT COUNT(T1.name) FROM filed_for_bankrupcy AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.'name' = T2.'name' WHERE T2.'month' > 5", "source_tables": ["filed_for_bankrupcy", "longest_absense_from_school"]}, "evidence": "absent from school for over 5 months refers to `month` > 5;"}
{"sample_id": 4374, "db_id": "student_loan", "final": {"question": "Among the students from the navy department, how many of them have payment due?", "sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN no_payment_due AS T2 ON T1.'name' = T2.'name' WHERE T1.organ = 'navy' AND T2.bool = 'pos'", "source_tables": ["no_payment_due", "enlist"]}, "evidence": "from the navy department refers to organ = 'navy'; have payment due refers to bool = 'pos';"}
{"sample_id": 4375, "db_id": "student_loan", "final": {"question": "Please list the male students that are disabled and have filed for bankruptcy.", "sql": "SELECT T1.name, T2.name, T3.name FROM disabled AS T1 INNER JOIN male AS T2 ON T1.'name' = T2.'name' INNER JOIN filed_for_bankrupcy AS T3 ON T1.'name' = T3.'name'", "source_tables": ["filed_for_bankrupcy", "disabled", "male"]}, "evidence": "male students that are disabled and have filed for bankruptcy refers to name that appeared in all three male, disabled and filed_for_bankrupcy tables."}
{"sample_id": 4376, "db_id": "student_loan", "final": {"question": "How many female students are disabled?", "sql": "SELECT COUNT(name) FROM disabled WHERE name NOT IN ( SELECT name FROM male )", "source_tables": ["disabled", "male"]}, "evidence": "females students are disabled refers to name that appeared in both disabled and male tables"}
{"sample_id": 4377, "db_id": "student_loan", "final": {"question": "How many students are unemployed and have payment due?", "sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN no_payment_due AS T2 ON T1.'name' = T2.'name'", "source_tables": ["unemployed", "no_payment_due"]}, "evidence": "are unemployed and have payment due refers to"}
{"sample_id": 4378, "db_id": "student_loan", "final": {"question": "What is the longest time for a student from the navy department to be absent from school?", "sql": "SELECT T1.month FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.'name' = T2.'name' WHERE T2.organ = 'navy' ORDER BY T1.'month' DESC LIMIT 1", "source_tables": ["longest_absense_from_school", "enlist"]}, "evidence": "navy department refers to organ = 'navy'; longest time to be absent from school refers to MAX(month)"}
{"sample_id": 4379, "db_id": "student_loan", "final": {"question": "How many disabled students have never been absent from school?", "sql": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.'name' = T2.'name' WHERE T1.'month' = 0", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "never been absent from school refers to month = 0"}
{"sample_id": 4380, "db_id": "student_loan", "final": {"question": "Please list the departments the students are absent from school for 9 months are in.", "sql": "SELECT T2.organ FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.'name' = T2.'name' WHERE T1.'month' = 9", "source_tables": ["longest_absense_from_school", "enlist"]}, "evidence": "absent from school for 9 months refers to month = 9"}
{"sample_id": 4381, "db_id": "student_loan", "final": {"question": "Which department has the most disabled students?", "sql": "SELECT T2.organ, COUNT(T1.name) FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.'name' = T2.'name' GROUP BY T2.organ ORDER BY COUNT(T1.name) DESC LIMIT 1", "source_tables": ["disabled", "enlist"]}, "evidence": "department refers to organ; most disabled students refers to MAX(disabled.name)"}
{"sample_id": 4382, "db_id": "student_loan", "final": {"question": "Please list all the female students that have filed for bankruptcy.", "sql": "SELECT name FROM filed_for_bankrupcy WHERE name NOT IN ( SELECT name FROM male )", "source_tables": ["filed_for_bankrupcy", "male"]}, "evidence": "females students have filed for bankruptcy refers to name that appeared in both filed_for_bankrupcy and male tables"}
{"sample_id": 4383, "db_id": "student_loan", "final": {"question": "What is the percentage of male students in the navy department?", "sql": "SELECT CAST(COUNT(T2.name) AS REAL) * 100 / COUNT(T1.name) FROM enlist AS T1 LEFT JOIN male AS T2 ON T1.'name' = T2.'name' WHERE T1.organ = 'navy'", "source_tables": ["male", "enlist"]}, "evidence": "in the navy department refers to organ = 'navy'; percentage refers to DIVIDE(COUNT(name where organ = 'navy'), COUNT(name))"}
{"sample_id": 4384, "db_id": "student_loan", "final": {"question": "What is the average time for a disabled student to be absent from school?", "sql": "SELECT AVG(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.'name' = T2.'name'", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "average time refers to DIVIDE(SUM(`month`), COUNT(name))"}
{"sample_id": 4385, "db_id": "student_loan", "final": {"question": "Name all students enlisted in the foreign legion.", "sql": "SELECT name FROM enlist WHERE organ = 'foreign_legion'", "source_tables": ["enlist"]}, "evidence": "in the foreign legion organ = 'foreign_legion';"}
{"sample_id": 4386, "db_id": "student_loan", "final": {"question": "Does student348 have a due payment?", "sql": "SELECT bool FROM no_payment_due WHERE name = 'student348'", "source_tables": ["no_payment_due"]}, "evidence": "payment due refers to bool = 'pos' means the student has payment due , bool = 'neg' means the student does not have payment due;"}
{"sample_id": 4387, "db_id": "student_loan", "final": {"question": "Which school is student829 enrolled in?", "sql": "SELECT school FROM enrolled WHERE name = 'student829'", "source_tables": ["enrolled"]}, "evidence": ""}
{"sample_id": 4388, "db_id": "student_loan", "final": {"question": "How many months has student217 been absent?", "sql": "SELECT month FROM longest_absense_from_school WHERE name = 'student217'", "source_tables": ["longest_absense_from_school"]}, "evidence": ""}
{"sample_id": 4389, "db_id": "student_loan", "final": {"question": "List all students that have been absent for 6 months.", "sql": "SELECT name FROM longest_absense_from_school WHERE 'month' = 6", "source_tables": ["longest_absense_from_school"]}, "evidence": "absent for 6 months `month` = 6;"}
{"sample_id": 4390, "db_id": "student_loan", "final": {"question": "Which organization did student285 enlist?", "sql": "SELECT organ FROM enlist WHERE name = 'student285'", "source_tables": ["enlist"]}, "evidence": ""}
{"sample_id": 4391, "db_id": "student_loan", "final": {"question": "Is student281 disabled and which school is the student enrolled in?", "sql": "SELECT T2.name, T1.school FROM enrolled AS T1 INNER JOIN disabled AS T2 ON T1.'name' = T2.'name' WHERE T1.name = 'student281'", "source_tables": ["enrolled", "disabled"]}, "evidence": ""}
{"sample_id": 4392, "db_id": "student_loan", "final": {"question": "List all students in the air force and which school they were enrolled at.", "sql": "SELECT T1.name, T1.school FROM enrolled AS T1 INNER JOIN enlist AS T2 ON T1.'name' = T2.'name' WHERE T2.organ = 'air_force'", "source_tables": ["enrolled", "enlist"]}, "evidence": "in the air force refers to organ = 'air_force';"}
{"sample_id": 4393, "db_id": "student_loan", "final": {"question": "List 10 students that have no due payments and are not males.", "sql": "SELECT T1.name FROM no_payment_due AS T1 INNER JOIN person AS T2 ON T1.'name' = T2.'name' WHERE T2.'name' NOT IN ( SELECT name FROM male ) AND T1.bool = 'neg'", "source_tables": ["person", "male", "no_payment_due"]}, "evidence": "no due payments refers to bool = 'neg'; not males refers to not in male table"}
{"sample_id": 4394, "db_id": "student_loan", "final": {"question": "Name 5 students with due payments that are enlisted alongside which organization they were enlisted.", "sql": "SELECT T2.organ, T1.name FROM no_payment_due AS T1 INNER JOIN enlist AS T2 ON T1.'name' = T2.'name' WHERE T1.bool = 'pos' LIMIT 5", "source_tables": ["no_payment_due", "enlist"]}, "evidence": "with due payments refers to bool = 'pos'; organization refers to organ"}
{"sample_id": 4395, "db_id": "student_loan", "final": {"question": "Name all disabled students that are enrolled in SMC.", "sql": "SELECT T2.name FROM enrolled AS T1 INNER JOIN disabled AS T2 ON T1.'name' = T2.'name' WHERE T1.school = 'smc'", "source_tables": ["enrolled", "disabled"]}, "evidence": "enrolled in SMC refers to school = 'smc';"}
{"sample_id": 4396, "db_id": "student_loan", "final": {"question": "Which students that filed for bankruptcy are also in the foreign legion?", "sql": "SELECT T2.name FROM enlist AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.'name' = T2.'name' WHERE T1.organ = 'foreign_legion'", "source_tables": ["filed_for_bankrupcy", "enlist"]}, "evidence": "in the foreign legion refers to organ = 'foreign_legion';"}
{"sample_id": 4397, "db_id": "student_loan", "final": {"question": "How many male students have no due payments?", "sql": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN male AS T2 ON T1.name = T2.name WHERE T1.bool = 'neg'", "source_tables": ["male", "no_payment_due"]}, "evidence": "have no due payments refers to bool = 'neg';"}
{"sample_id": 4398, "db_id": "student_loan", "final": {"question": "Which students that are in the marines have been absent for 6 months?", "sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.'name' = T2.'name' WHERE T2.organ = 'marines' AND T1.'month' = 6", "source_tables": ["longest_absense_from_school", "enlist"]}, "evidence": "in the marines refers to organ = 'marines'; absent for 6 months refers to month = 6"}
{"sample_id": 4399, "db_id": "student_loan", "final": {"question": "How many students from SMC are unemployed?", "sql": "SELECT T2.name FROM enrolled AS T1 INNER JOIN unemployed AS T2 ON T1.'name' = T2.'name' WHERE T1.school = 'smc'", "source_tables": ["enrolled", "unemployed"]}, "evidence": "from SMC refers to school = 'smc';"}
{"sample_id": 4400, "db_id": "student_loan", "final": {"question": "How many unemployed students are there that have been absent for 6 months?", "sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.'name' = T2.name WHERE T1.'month' = 6", "source_tables": ["unemployed", "longest_absense_from_school"]}, "evidence": "absent for 6 months refers to month = 6;"}
{"sample_id": 4401, "db_id": "student_loan", "final": {"question": "Count the number of students from UCSD enlisted in the peace corps.", "sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T1.'name' = T2.'name' WHERE T2.school = 'ucsd' AND T1.organ = 'peace_corps'", "source_tables": ["enrolled", "enlist"]}, "evidence": "in the peace corps refers to organ = 'peace_corps'; from UCSD refers to school = 'ucsd';"}
{"sample_id": 4402, "db_id": "student_loan", "final": {"question": "Student21 is enlisted in which organization and has the student been absent?", "sql": "SELECT T2.month, T1.organ FROM enlist AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.'name' = T2.'name' WHERE T1.name = 'student21'", "source_tables": ["longest_absense_from_school", "enlist"]}, "evidence": "organization refers to organ"}
{"sample_id": 4403, "db_id": "student_loan", "final": {"question": "What is the percentage ratio of students who are enlisted in foreign legions that have a due payment?", "sql": "SELECT CAST(SUM(IIF(T1.bool = 'pos', 1, 0)) AS REAL) * 100 / SUM(IIF(T1.bool = 'neg', 1, 0)) FROM no_payment_due AS T1 INNER JOIN enlist AS T2 ON T1.'name' = T2.'name' WHERE T2.organ = 'foreign_legion'", "source_tables": ["no_payment_due", "enlist"]}, "evidence": "have a due payment refers to bool = 'pos'; in foreign legions refers to organ = 'foreign_legion'; ratio refers to DIVIDE(COUNT(bool = 'pos'), COUNT(bool = 'neg'))"}
{"sample_id": 4404, "db_id": "student_loan", "final": {"question": "What percentage of students who enlisted in the navy make up the number of students enrolled in OCC?", "sql": "SELECT CAST(SUM(IIF(T1.school = 'occ', 1.0, 0)) AS REAL) * 100 / COUNT(T1.name) FROM enrolled AS T1 INNER JOIN enlist AS T2 ON T1.'name' = T2.'name' WHERE T2.organ = 'navy'", "source_tables": ["enrolled", "enlist"]}, "evidence": "in the navy refers to organ = 'navy'; enrolled in OCC refers to school = 'occ'"}
{"sample_id": 4405, "db_id": "student_loan", "final": {"question": "List out student IDs that have the longest absence duration from school.", "sql": "SELECT name FROM longest_absense_from_school WHERE 'month' = ( SELECT MAX(month) FROM longest_absense_from_school )", "source_tables": ["longest_absense_from_school"]}, "evidence": "longest absence duration refers to MAX(month)"}
{"sample_id": 4406, "db_id": "student_loan", "final": {"question": "What is the total number of students in the school?", "sql": "SELECT COUNT(name) FROM person", "source_tables": ["person"]}, "evidence": ""}
{"sample_id": 4407, "db_id": "student_loan", "final": {"question": "What is the longest students absence duration from school?", "sql": "SELECT name, month FROM longest_absense_from_school WHERE 'month' = ( SELECT MAX(month) FROM longest_absense_from_school )", "source_tables": ["longest_absense_from_school"]}, "evidence": "longest students absence duration MAX(month)"}
{"sample_id": 4408, "db_id": "student_loan", "final": {"question": "How many students were absence for 4 month?", "sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 4", "source_tables": ["longest_absense_from_school"]}, "evidence": "absence for 4 month refers to month = 4;"}
{"sample_id": 4409, "db_id": "student_loan", "final": {"question": "What is the number of unemployed and bankrupt students?", "sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name", "source_tables": ["unemployed", "filed_for_bankrupcy"]}, "evidence": ""}
{"sample_id": 4410, "db_id": "student_loan", "final": {"question": "Does disable students join organization. If yes, please indicate the organization joined by the students.", "sql": "SELECT DISTINCT T2.organ FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.'name' = T2.'name'", "source_tables": ["disabled", "enlist"]}, "evidence": "organization refers to organ"}
{"sample_id": 4411, "db_id": "student_loan", "final": {"question": "How many unemployed and bankrupt students that have payment dues?", "sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name INNER JOIN no_payment_due AS T3 ON T2.name = T3.name WHERE T3.bool = 'pos'", "source_tables": ["unemployed", "filed_for_bankrupcy", "no_payment_due"]}, "evidence": "have payment dues refers to bool = 'pos'"}
{"sample_id": 4412, "db_id": "student_loan", "final": {"question": "Please check if student 124 is disabled male.", "sql": "SELECT IIF(T2.name IS NULL, 'female', 'male') FROM male AS T1 LEFT JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.name = 'student124'", "source_tables": ["disabled", "male"]}, "evidence": "if student name appear in disabled then student is disabled and vice versa; if student name appear in male then student is male and vice versa"}
{"sample_id": 4413, "db_id": "student_loan", "final": {"question": "What is the employment, disability, gender and school debt status for student180 and student117?", "sql": "SELECT ( SELECT COUNT(name) FROM disabled WHERE name IN ('student180', 'student117') ), ( SELECT COUNT(name) FROM unemployed WHERE name IN ('student180', 'student117') ), ( SELECT COUNT(name) FROM male WHERE name IN ('student180', 'student117') ), ( SELECT COUNT(name) FROM no_payment_due WHERE name IN ('student180', 'student117'))", "source_tables": ["unemployed", "disabled", "male", "no_payment_due"]}, "evidence": "school debt status refers to bool; bool = 'pos' means has payment due; bool = 'neg' means doesn't has payment due; student appear in male.name means he is a male; student does not appear in male.name means she is a female;"}
{"sample_id": 4414, "db_id": "student_loan", "final": {"question": "How many female students joined a marines and air force organization?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ IN ('marines', 'air_force') AND name NOT IN ( SELECT name FROM male )", "source_tables": ["male", "enlist"]}, "evidence": "joined a marines refers to organ = 'marines'; air force organization refers to organ = 'air_force';"}
{"sample_id": 4415, "db_id": "student_loan", "final": {"question": "List out the organization joined and school enrolled by student27, student17 and student101?", "sql": "SELECT T1.school, T2.organ FROM enrolled AS T1 INNER JOIN enlist AS T2 ON T1.'name' = T2.'name' WHERE T1.'name' IN ('student27,student17,studetn101')", "source_tables": ["enrolled", "enlist"]}, "evidence": "organization joined refers to organ"}
{"sample_id": 4416, "db_id": "student_loan", "final": {"question": "What is the ratio of disable female to male students?", "sql": "SELECT CAST(SUM(IIF(T2.name IS NULL, 1, 0)) AS REAL) * 100 / COUNT(T2.name) FROM disabled AS T1 LEFT JOIN male AS T2 ON T1.'name' = T2.'name'", "source_tables": ["disabled", "male"]}, "evidence": "ratio refers to DIVIDE(COUNT(name not from male), COUNT(name from male))"}
{"sample_id": 4417, "db_id": "student_loan", "final": {"question": "How many female students are not joining any of the organization?", "sql": "SELECT COUNT(name) FROM person WHERE name NOT IN ( SELECT name FROM male ) AND name NOT IN ( SELECT name FROM enrolled )", "source_tables": ["enrolled", "person", "male"]}, "evidence": "female students refers to enlist.name who are NOT in male.name"}
{"sample_id": 4418, "db_id": "student_loan", "final": {"question": "List out all bankrupt students that are able to make payment before due?", "sql": "SELECT T1.name FROM filed_for_bankrupcy AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T2.bool = 'neg'", "source_tables": ["filed_for_bankrupcy", "no_payment_due"]}, "evidence": "make payment before due refers to bool = 'neg';"}
{"sample_id": 4419, "db_id": "student_loan", "final": {"question": "What is the average absence period of a student?", "sql": "SELECT AVG(month) FROM longest_absense_from_school", "source_tables": ["longest_absense_from_school"]}, "evidence": "average refers to DIVIDE(SUM(month), COUNT(name))"}
{"sample_id": 4420, "db_id": "student_loan", "final": {"question": "What is the average of absence for an employed students?", "sql": "SELECT AVG(month) FROM longest_absense_from_school WHERE name NOT IN ( SELECT name FROM unemployed )", "source_tables": ["unemployed", "longest_absense_from_school"]}, "evidence": "average refers to DIVIDE(SUM(month), COUNT(name))"}
{"sample_id": 4421, "db_id": "student_loan", "final": {"question": "What is the average absence period of a disabled student?", "sql": "SELECT AVG(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "average refers to DIVIDE(SUM(month), COUNT(name))"}
{"sample_id": 4422, "db_id": "student_loan", "final": {"question": "Which organization does student 313 belong to?", "sql": "SELECT organ FROM enlist WHERE name = 'studenT113'", "source_tables": ["enlist"]}, "evidence": "organization refers to organ"}
{"sample_id": 4423, "db_id": "student_loan", "final": {"question": "How many students enlisted in the fire-department?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'fire_department'", "source_tables": ["enlist"]}, "evidence": "enlisted in the fire-department refers to organ = 'fire_department';"}
{"sample_id": 4424, "db_id": "student_loan", "final": {"question": "How many students who have never been absent from school?", "sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 0", "source_tables": ["longest_absense_from_school"]}, "evidence": "have never been absent refers to `month` = 0;"}
{"sample_id": 4425, "db_id": "student_loan", "final": {"question": "How many students have been absent above 2 months?", "sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month > 2", "source_tables": ["longest_absense_from_school"]}, "evidence": "absent above 2 months refers to month > 2;"}
{"sample_id": 4426, "db_id": "student_loan", "final": {"question": "State the number of students do not have payment due.", "sql": "SELECT COUNT(name) FROM no_payment_due WHERE bool = 'neg'", "source_tables": ["no_payment_due"]}, "evidence": "do not have payment due refers to bool = 'neg';"}
{"sample_id": 4427, "db_id": "student_loan", "final": {"question": "Give the number of students who have payment due.", "sql": "SELECT COUNT(name) FROM no_payment_due WHERE bool = 'pos'", "source_tables": ["no_payment_due"]}, "evidence": "who have payment due refers to bool = 'pos';"}
{"sample_id": 4428, "db_id": "student_loan", "final": {"question": "Mention the name of disabled students who have never been absent from school.", "sql": "SELECT T1.name FROM disabled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name WHERE T2.month = 0", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "never been absent from school refers to month = 0"}
{"sample_id": 4429, "db_id": "student_loan", "final": {"question": "How many unemployed students are enlisted in the navy organization?", "sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'navy'", "source_tables": ["unemployed", "enlist"]}, "evidence": "enlisted in the navy organization refers to organ = 'navy';"}
{"sample_id": 4430, "db_id": "student_loan", "final": {"question": "Count the number of male students who belong to foreign legion.", "sql": "SELECT COUNT(T1.name) FROM male AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'foreign_legion'", "source_tables": ["male", "enlist"]}, "evidence": "belong to foreign legion refers to organ = 'foreign_legion';"}
{"sample_id": 4431, "db_id": "student_loan", "final": {"question": "List out the number of female students who enlisted in the air force.", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'air_force' AND name NOT IN ( SELECT name FROM male )", "source_tables": ["male", "enlist"]}, "evidence": "enlisted in the air force refers to organ = 'air_force';"}
{"sample_id": 4432, "db_id": "student_loan", "final": {"question": "State name of disabled students who have the longest duration of absense from school.", "sql": "SELECT T1.name FROM disabled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name ORDER BY T2.month DESC LIMIT 1", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "longest duration of absense refers to MAX(month)"}
{"sample_id": 4433, "db_id": "student_loan", "final": {"question": "State the unemployed students who enlisted in marines.", "sql": "SELECT T1.name FROM unemployed AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'marines'", "source_tables": ["unemployed", "enlist"]}, "evidence": "enlisted in marines refers to organ = 'marines';"}
{"sample_id": 4434, "db_id": "student_loan", "final": {"question": "Calculate the average duration of absense of disabled students.", "sql": "SELECT AVG(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "average refers to DIVIDE(SUM(month), COUNT(name))"}
{"sample_id": 4435, "db_id": "student_loan", "final": {"question": "What is the percentage of unemployed students who have been absent for 5 months from school?", "sql": "SELECT CAST(SUM(IIF(T1.month > 5, 1, 0)) AS REAL) * 100 / COUNT(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name", "source_tables": ["unemployed", "longest_absense_from_school"]}, "evidence": "percentage refers to DIVIDE(COUNT(month > 5), COUNT(month))"}
{"sample_id": 4436, "db_id": "student_loan", "final": {"question": "How many unemployed disabled students have been absent for 8 months from school?", "sql": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name INNER JOIN disabled AS T3 ON T2.name = T3.name WHERE T1.month = 8", "source_tables": ["unemployed", "disabled", "longest_absense_from_school"]}, "evidence": "absent for 8 months refers to month = 8;"}
{"sample_id": 4437, "db_id": "student_loan", "final": {"question": "State name of unemployed students who have the longest duration of absense from school.", "sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name ORDER BY T1.month DESC LIMIT 1", "source_tables": ["unemployed", "longest_absense_from_school"]}, "evidence": "longest duration of absense refers to MAX(month)"}
{"sample_id": 4438, "db_id": "student_loan", "final": {"question": "Mention the name of unemployed students who have never been absent from school.", "sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name WHERE T1.month = 0", "source_tables": ["unemployed", "longest_absense_from_school"]}, "evidence": "have never been absent from school refers to month = 0"}
{"sample_id": 4439, "db_id": "student_loan", "final": {"question": "How many disabled students have been absent for 3 months from school?", "sql": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.month = 3", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "have been absent for 3 months from school refers to month = 3"}
{"sample_id": 4440, "db_id": "student_loan", "final": {"question": "Mention the name of students who filed for bankruptcy and have never been absent from school.", "sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name WHERE T1.month = 0", "source_tables": ["filed_for_bankrupcy", "longest_absense_from_school"]}, "evidence": "have never been absent refers to month = 0;"}
{"sample_id": 4441, "db_id": "student_loan", "final": {"question": "State name of students who filed for bankruptcy and have the longest duration of absense from school.", "sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name ORDER BY T1.month DESC LIMIT 1", "source_tables": ["filed_for_bankrupcy", "longest_absense_from_school"]}, "evidence": "longest duration of absense refers to MAX(month)"}
{"sample_id": 4442, "db_id": "student_loan", "final": {"question": "What is the gender of student1000?", "sql": "SELECT IIF(T.result = 0, 'female', 'male') AS re FROM ( SELECT COUNT(name) AS result FROM male WHERE name = 'studenT1000' ) T", "source_tables": ["male"]}, "evidence": "student name appear in Male table means student is a male, student does not appear in Male table means student is a female"}
{"sample_id": 4443, "db_id": "student_loan", "final": {"question": "How many students are disabled?", "sql": "SELECT COUNT(name) FROM disabled", "source_tables": ["disabled"]}, "evidence": ""}
{"sample_id": 4444, "db_id": "student_loan", "final": {"question": "How many students have been absents for more than 6 months?", "sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month > 6", "source_tables": ["longest_absense_from_school"]}, "evidence": "absents for more than 6 months refers to month > 6"}
{"sample_id": 4445, "db_id": "student_loan", "final": {"question": "Which students have absents the most?", "sql": "SELECT name FROM longest_absense_from_school WHERE month = ( SELECT MAX(month) FROM longest_absense_from_school )", "source_tables": ["longest_absense_from_school"]}, "evidence": "absents the most refers to MAX(month)"}
{"sample_id": 4446, "db_id": "student_loan", "final": {"question": "How many students are enlisted in the army?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'army'", "source_tables": ["enlist"]}, "evidence": "enlisted in the army refers to organ = 'army';"}
{"sample_id": 4447, "db_id": "student_loan", "final": {"question": "Find the average number of absences for each student.", "sql": "SELECT AVG(month) FROM longest_absense_from_school", "source_tables": ["longest_absense_from_school"]}, "evidence": "average refers to DIVIDE(SUM(month), COUNT(name))"}
{"sample_id": 4448, "db_id": "student_loan", "final": {"question": "Sum up the number of students enlisted in foreign legion, peace corps and army.", "sql": "SELECT COUNT(name) FROM enlist WHERE organ IN ('army', 'peace_corps', 'foreign_legion')", "source_tables": ["enlist"]}, "evidence": "enlisted in foreign legion refers to organ = 'foreign_legion'; peace corps refers to organ = 'peace_corps'; army refers to organ = 'army'"}
{"sample_id": 4449, "db_id": "student_loan", "final": {"question": "Among the students enlisted in marines, how many of them are disabled?", "sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.organ = 'marines'", "source_tables": ["disabled", "enlist"]}, "evidence": "enlisted in marines refers to organ = 'marines';"}
{"sample_id": 4450, "db_id": "student_loan", "final": {"question": "How many unemployed students still have payment due?", "sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T2.bool = 'pos'", "source_tables": ["unemployed", "no_payment_due"]}, "evidence": "still have payment due refers to bool = 'pos'"}
{"sample_id": 4451, "db_id": "student_loan", "final": {"question": "Which female students had never been absent?", "sql": "SELECT T2.name FROM male AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name <> T2.name WHERE T2.month = 0", "source_tables": ["male", "longest_absense_from_school"]}, "evidence": "had never been absent refers to month = 0"}
{"sample_id": 4452, "db_id": "student_loan", "final": {"question": "Which school has the highest number of disabled students?", "sql": "SELECT T.school FROM ( SELECT T2.school, COUNT(T2.name) AS num FROM disabled AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name GROUP BY T2.school ) T ORDER BY T.num DESC LIMIT 1", "source_tables": ["enrolled", "disabled"]}, "evidence": "highest number of disabled students refers to MAX(COUNT(disabled.name))"}
{"sample_id": 4453, "db_id": "student_loan", "final": {"question": "List all the organisations of students who filed for bankcrupcy.", "sql": "SELECT T2.organ FROM filed_for_bankrupcy AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name", "source_tables": ["filed_for_bankrupcy", "enlist"]}, "evidence": "organization refers to organ; students who filed for bankrupcy refers to file_for_bankrupcy.name"}
{"sample_id": 4454, "db_id": "student_loan", "final": {"question": "How many male students join more than one organization?", "sql": "SELECT COUNT(T.a) FROM ( SELECT COUNT(DISTINCT T1.name) AS a, COUNT(T2.organ) AS num FROM male AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name GROUP BY T1.name ) T WHERE T.num > 1", "source_tables": ["male", "enlist"]}, "evidence": "more than one organization refers to COUNT(organ) > 1"}
{"sample_id": 4455, "db_id": "student_loan", "final": {"question": "List all the navy students who are disabled.", "sql": "SELECT T1.name FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'navy'", "source_tables": ["disabled", "enlist"]}, "evidence": "navy students refers to organ = 'navy'; disabled student refers to disabled.name"}
{"sample_id": 4456, "db_id": "student_loan", "final": {"question": "How many SMC's students that absent for 7 months?", "sql": "SELECT COUNT(T1.name) FROM enrolled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name WHERE T1.school = 'smc' AND T2.month = 7", "source_tables": ["enrolled", "longest_absense_from_school"]}, "evidence": "SMC's students refers to school = 'smc'; absent for 7 months refers to month = 7"}
{"sample_id": 4457, "db_id": "student_loan", "final": {"question": "List all the disabled female students.", "sql": "SELECT T1.name FROM disabled AS T1 INNER JOIN male AS T2 ON T1.name <> T2.name", "source_tables": ["disabled", "male"]}, "evidence": ""}
{"sample_id": 4458, "db_id": "student_loan", "final": {"question": "Calculate the ratio between unemployed students and disabled students.", "sql": "SELECT CAST(( SELECT COUNT(name) FROM unemployed ) AS REAL ) / ( SELECT COUNT(name) FROM disabled )", "source_tables": ["unemployed", "disabled"]}, "evidence": "ratio refers to DIVIDE(COUNT(name from unemployed), COUNT(name from disabled))"}
{"sample_id": 4459, "db_id": "student_loan", "final": {"question": "Find the percentage of male students enlisted in the fire department.", "sql": "SELECT CAST(COUNT(T2.name) AS REAL) * 100 / COUNT(T1.name) FROM enlist AS T1 LEFT JOIN male AS T2 ON T1.name = T2.name WHERE T1.organ = 'fire_department'", "source_tables": ["male", "enlist"]}, "evidence": "percentage refers to DIVIDE(COUNT(organ = 'fire_department'), COUNT(name))"}
{"sample_id": 4460, "db_id": "student_loan", "final": {"question": "How many students has the longest absense from school for 5 months?", "sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 5", "source_tables": ["longest_absense_from_school"]}, "evidence": "absense from school for 5 month refers to month = 5"}
{"sample_id": 4461, "db_id": "student_loan", "final": {"question": "How many students are enlisted in the Army organization?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'army'", "source_tables": ["enlist"]}, "evidence": "enlisted in the army refers to organ = 'army';"}
{"sample_id": 4462, "db_id": "student_loan", "final": {"question": "How many students are enrolled in UCLA school?", "sql": "SELECT COUNT(name) FROM enrolled WHERE school = 'ucla'", "source_tables": ["enrolled"]}, "evidence": "enrolled in UCLA refers to school = 'ucla';"}
{"sample_id": 4463, "db_id": "student_loan", "final": {"question": "List at least 5 students who has the longest absense from schoool?", "sql": "SELECT name FROM longest_absense_from_school ORDER BY month DESC LIMIT 5", "source_tables": ["longest_absense_from_school"]}, "evidence": "longest absense refers to MAX(month)"}
{"sample_id": 4464, "db_id": "student_loan", "final": {"question": "How many of the students joined two organization?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ >= 2", "source_tables": ["enlist"]}, "evidence": "joined two organization refers to COUNT(organ) > = 2"}
{"sample_id": 4465, "db_id": "student_loan", "final": {"question": "How many students are enlisted in the Navy organization?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'navy'", "source_tables": ["enlist"]}, "evidence": "enlisted in the navy organization refers to organ = 'navy';"}
{"sample_id": 4466, "db_id": "student_loan", "final": {"question": "How many male stuents do not have payment due?", "sql": "SELECT COUNT(T1.name) FROM male AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T2.bool = 'neg'", "source_tables": ["male", "no_payment_due"]}, "evidence": "do not have payment due refers to bool = 'neg';"}
{"sample_id": 4467, "db_id": "student_loan", "final": {"question": "How many students are enlisted in the Peace Corps organization are enrolled in UCSD school?", "sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name WHERE T1.organ = 'peace_corps' AND T2.school = 'ucsd'", "source_tables": ["enrolled", "enlist"]}, "evidence": "enlisted in the Peace Corps refers to organ = 'peace_corps'; enrolled in UCSD school refers to school = 'ucsd';"}
{"sample_id": 4468, "db_id": "student_loan", "final": {"question": "Among the unemployed students, how many of them have no payment due?", "sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T2.bool = 'neg'", "source_tables": ["unemployed", "no_payment_due"]}, "evidence": "have no payment due refers to bool = 'neg';\n\n"}
{"sample_id": 4469, "db_id": "student_loan", "final": {"question": "How many female students have no payment due?", "sql": "SELECT COUNT(name) FROM no_payment_due WHERE name NOT IN ( SELECT name FROM male )", "source_tables": ["male", "no_payment_due"]}, "evidence": "have no payment due refers to bool = 'neg'; female students refers to name NOT in male table"}
{"sample_id": 4470, "db_id": "student_loan", "final": {"question": "How many unemployed students have never been absent?", "sql": "SELECT COUNT(T2.name) FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name WHERE T1.month = 0", "source_tables": ["unemployed", "longest_absense_from_school"]}, "evidence": "never been absent refers to month = 0;"}
{"sample_id": 4471, "db_id": "student_loan", "final": {"question": "List at least 10 students who have no payment due and are enlisted in Fire Department organization.", "sql": "SELECT T1.name FROM no_payment_due AS T1 INNER JOIN enlist AS T2 ON T2.name = T1.name WHERE T1.bool = 'neg' AND T2.organ = 'fire_department' LIMIT 10", "source_tables": ["no_payment_due", "enlist"]}, "evidence": "no payment due refers to bool = 'neg'; organization refers to organ; organ = 'fire_department';"}
{"sample_id": 4472, "db_id": "student_loan", "final": {"question": "How many female students are enlisted in the Navy organization?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'navy' AND name NOT IN ( SELECT name FROM male )", "source_tables": ["male", "enlist"]}, "evidence": "female students refers to enlist.name who are NOT in male.name; organization refers to organ; organ = 'navy';"}
{"sample_id": 4473, "db_id": "student_loan", "final": {"question": "How many unemployed students are enlisted in the Army organization?", "sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name WHERE T1.organ = 'army'", "source_tables": ["unemployed", "enlist"]}, "evidence": "organization refers to organ; organ = 'army';"}
{"sample_id": 4474, "db_id": "student_loan", "final": {"question": "How many unemployed students have payment due?", "sql": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name WHERE T1.bool = 'pos'", "source_tables": ["unemployed", "no_payment_due"]}, "evidence": "have payment due refers to bool = 'pos';"}
{"sample_id": 4475, "db_id": "student_loan", "final": {"question": "List at least 5 students who have payment due and are enlisted in Peace Corps organization?", "sql": "SELECT T1.name FROM no_payment_due AS T1 INNER JOIN enlist AS T2 ON T2.name = T1.name WHERE T2.organ = 'peace_corps' AND T1.bool = 'pos' LIMIT 5", "source_tables": ["no_payment_due", "enlist"]}, "evidence": "have payment due refers to bool = 'pos'; organization refers to organ; organ = 'Peace Corps';"}
{"sample_id": 4476, "db_id": "student_loan", "final": {"question": "How many disabled students are female?", "sql": "SELECT COUNT(name) FROM disabled WHERE name NOT IN ( SELECT name FROM male )", "source_tables": ["disabled", "male"]}, "evidence": "female refers to disabled.name who are NOT in male.name;"}
{"sample_id": 4477, "db_id": "student_loan", "final": {"question": "How many disabled students have payment due?", "sql": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN no_payment_due AS T2 ON T2.name = T1.name WHERE T2.bool = 'pos'", "source_tables": ["disabled", "no_payment_due"]}, "evidence": "have payment due refers to bool = 'pos';"}
{"sample_id": 4478, "db_id": "student_loan", "final": {"question": "Calculate the average number of female students who are disabled and who joined Foreign Legion organization.", "sql": "SELECT CAST(SUM(IIF(T3.name IS NULL, 1, 0)) AS REAL) / COUNT(T1.name) FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name WHERE T2.organ = 'foreign_legion'", "source_tables": ["disabled", "male", "enlist"]}, "evidence": "average = DIVIDE(COUNT(disabled.name who are not in male.name WHERE organ = 'foreign_legion'), COUNT(disabled.name)); female students who are disabled refers to disabled.name who are NOT in male.name; organization refers to organ; organ = 'Foreign Legion';"}
{"sample_id": 4479, "db_id": "student_loan", "final": {"question": "Calculate the ratio in percentage between the average number of female and male students who joined Fire Department organization.", "sql": "SELECT CAST(SUM(IIF(T2.name IS NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.name), CAST(SUM(IIF(T2.name IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.name) FROM enlist AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name WHERE T1.organ = 'fire_department'", "source_tables": ["male", "enlist"]}, "evidence": "ratio = CONCAT(MULTIPLY(DIVIDE(COUNT(enlist.name WHERE organ = 'fire_department' which is NOT in male.name), COUNT(enlist.name WHERE organ = 'fire_department),'%'))) AS FEMALE; ratio = CONCAT(MULTIPLY(DIVIDE(COUNT(enlist.name WHERE organ = 'fire_department' which is IN male.name), COUNT(enlist.name WHERE organ = 'fire_department), 100))) AS MALE; female students refers to enlist.name who are NOT in male.name; male students refers to enlist.name who are IN male.name; organization refers to organ; organ = 'fire_department';"}
{"sample_id": 4480, "db_id": "student_loan", "final": {"question": "How many students enlisted in the navy?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'navy'", "source_tables": ["enlist"]}, "evidence": "navy refers to organ = 'navy';"}
{"sample_id": 4481, "db_id": "student_loan", "final": {"question": "Calculate the percentage of students who have never been absent.", "sql": "SELECT CAST(SUM(IIF(month = 0, 1, 0)) AS REAL) * 100 / COUNT(name) FROM longest_absense_from_school", "source_tables": ["longest_absense_from_school"]}, "evidence": "percentage = CONCAT(DIVIDE(MULTIPLY(COUNT(name WHERE month = 0), 100), COUNT(name)),'%'); never been absent refers to month = 0;"}
{"sample_id": 4482, "db_id": "student_loan", "final": {"question": "What is the ratio of students who have payment due and those who do not have payment due?", "sql": "SELECT CAST(SUM(IIF('bool' = 'pos', 1, 0)) AS REAL) / SUM(IIF('bool' = 'neg', 1, 0)) FROM no_payment_due", "source_tables": ["no_payment_due"]}, "evidence": "ratio = \u00a0DIVIDE(COUNT(name WHERE `bool` = 'pos'), COUNT(name WHERE `bool` = 'neg')); have payment due refers to `bool` = 'pos'; no payment due refers to `bool` = 'neg';"}
{"sample_id": 4483, "db_id": "student_loan", "final": {"question": "Provide the students' names and schools who enrolled for 15 months.", "sql": "SELECT name, school FROM enrolled WHERE month = 15", "source_tables": ["enrolled"]}, "evidence": "enrolled for 15 months refers to month = 15;"}
{"sample_id": 4484, "db_id": "student_loan", "final": {"question": "Calculate the average enlisted students per organization.", "sql": "SELECT CAST(COUNT(NAME) AS REAL) * 100 / COUNT(DISTINCT organ) FROM enlist", "source_tables": ["enlist"]}, "evidence": "average = DIVIDE(FLOOR(COUNT(NAME), COUNT(DISTINCT organ)));"}
{"sample_id": 4485, "db_id": "student_loan", "final": {"question": "List down the enrolled schools and duration of student214.", "sql": "SELECT school, month FROM enrolled WHERE name = 'student214'", "source_tables": ["enrolled"]}, "evidence": "enrolled schools refers to school; duration refers to month; student214 is a name of student;"}
{"sample_id": 4486, "db_id": "student_loan", "final": {"question": "Among all students, calculate the percentage of disabled students.", "sql": "SELECT CAST(COUNT(T2.name) AS REAL) * 100 / COUNT(T1.name) FROM person AS T1 LEFT JOIN disabled AS T2 ON T2.name = T1.name", "source_tables": ["disabled", "person"]}, "evidence": "percentage = CONCAT(DIVIDE(MULTIPLY(COUNT(disabled.name), 100), (COUNT(person.name that is not in disabled.name))),'%');"}
{"sample_id": 4487, "db_id": "student_loan", "final": {"question": "Among students who have been absent for nine months, how many of them are disabled?", "sql": "SELECT COUNT(T1.name) FROM disabled AS T1 LEFT JOIN longest_absense_from_school AS T2 ON T2.name = T1.name WHERE T2.month = 9", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "absent for 9 months refers to month = 9;"}
{"sample_id": 4488, "db_id": "student_loan", "final": {"question": "List down the student names who did not file for bankruptcy.", "sql": "SELECT name FROM person WHERE name NOT IN ( SELECT name FROM filed_for_bankrupcy )", "source_tables": ["filed_for_bankrupcy", "person"]}, "evidence": "students name who did not file a bankruptcy refers to person.name who are NOT in filed_for_bankrupcy.name;"}
{"sample_id": 4571, "db_id": "mental_health_survey", "final": {"question": "How many users answered \"No\" to question 19?", "sql": "SELECT COUNT(QuestionID) FROM Answer WHERE QuestionID = 19 AND AnswerText LIKE 'No'", "source_tables": ["answer"]}, "evidence": "Question 19 refer to QuestionID = 19; No refer to AnswerText = 'No'\n"}
{"sample_id": 4572, "db_id": "mental_health_survey", "final": {"question": "From 2016 to 2019, how many users each year were asked the question 13?", "sql": "SELECT SurveyID, COUNT(UserID) FROM Answer WHERE QuestionID = 13 AND SurveyID BETWEEN 2016 AND 2019 GROUP BY SurveyID", "source_tables": ["answer"]}, "evidence": "From 2016 to 2019 refer to SurveyID 2016 BETWEEN 2019; Question 13 refer to QuestionID"}
{"sample_id": 4573, "db_id": "mental_health_survey", "final": {"question": "How many users, between the age 27 to 35, were surveyed in 2018?", "sql": "SELECT T1.UserID FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.SurveyID = 2018 AND T2.questionid = 1 AND T1.AnswerText BETWEEN '27' AND '35'", "source_tables": ["answer", "question"]}, "evidence": "Age 27 to 35 refer to AnswerText 27 BETWEEN 35 where questionid = 1; 2018 refer to SurveyID\n\n"}
{"sample_id": 4574, "db_id": "mental_health_survey", "final": {"question": "In 2019, how many users in the United States have a family history of mental illness?", "sql": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN ( SELECT T2.questionid FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.SurveyID = 2019 AND T2.questionid = 6 AND T1.AnswerText LIKE 'Yes' ) AS T2 ON T1.QuestionID = T2.questionid WHERE T1.SurveyID = 2019 AND T2.questionid = 3 AND T1.AnswerText LIKE 'United States'", "source_tables": ["answer", "question"]}, "evidence": "2019 refer to SurveyID; Users in the United States refers to AnswerText = 'United States' where questionid = 3; have a family history of mental illness refers to AnswerText = 'Yes' where questionid = 6"}
{"sample_id": 4575, "db_id": "mental_health_survey", "final": {"question": "Betweeen 2016 to 2019, which year recorded the highest number of people with mental illness?", "sql": "SELECT T1.SurveyID FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.SurveyID BETWEEN 2016 AND 2019 AND T2.questionid = 34 AND T1.AnswerText LIKE 'Yes' GROUP BY T1.SurveyID ORDER BY COUNT(T1.UserID) DESC LIMIT 1", "source_tables": ["answer", "question"]}, "evidence": "Between 2016 to 2019 refer to SurveyID 2016 BETWEEN 2019; People with mental illness refers to AnswerText = 'Yes' where questionid = 34"}
{"sample_id": 4576, "db_id": "mental_health_survey", "final": {"question": "How many female users were surveyed in the mental health survey for 2017 in the state of Nebraska?", "sql": "SELECT COUNT(*) FROM ( SELECT T2.UserID FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID INNER JOIN Survey AS T3 ON T2.SurveyID = T3.SurveyID WHERE T3.Description = 'mental health survey for 2017' AND T1.questionid = 2 AND T2.AnswerText = 'Female' UNION SELECT T2.UserID FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID INNER JOIN Survey AS T3 ON T2.SurveyID = T3.SurveyID WHERE T1.questionid = 4 AND T2.AnswerText = 'Nebraska' AND T3.Description = 'mental health survey for 2017' )", "source_tables": ["answer", "question", "survey"]}, "evidence": "AnswerText = 'Yes' where questiontext = 'Do you have a family history of mental illness?'; AnswerText = 'Female' where questionid = 2; AnswerText = 'Nebraska' where questionid = 4"}
{"sample_id": 4577, "db_id": "mental_health_survey", "final": {"question": "How many users believed that their productivity is ever affected by a mental health issue overall?", "sql": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 54 AND T1.AnswerText LIKE 'Yes'", "source_tables": ["answer", "question"]}, "evidence": "Users who believed that their productivity is affected by a mental health issues overall refers to AnswerText = 'Yes' where questionid = 54"}
{"sample_id": 4578, "db_id": "mental_health_survey", "final": {"question": "What are the ages of the oldest and youngest user that were surveyed? Indicate their user id.", "sql": "SELECT MAX(T1.AnswerText), MIN(T1.AnswerText) , ( SELECT T1.UserID FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 1 ORDER BY T1.AnswerText LIMIT 1 ) AS 'youngest id' FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 1", "source_tables": ["answer", "question"]}, "evidence": "Oldest user refer to MAX(AnswerText) where questionid = 1; Youngest user refer to MIN(AnswerText) where questionid = 1\n"}
{"sample_id": 4579, "db_id": "mental_health_survey", "final": {"question": "Which country have the least number of users being surveyed? Indicate the name of the country. If there are multiple countries having the same number of users, indicate all of their names.", "sql": "SELECT T1.AnswerText FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 3 GROUP BY T1.AnswerText ORDER BY COUNT(T1.UserID) DESC LIMIT 1", "source_tables": ["answer", "question"]}, "evidence": "Country with least number of users being surveyed refers to MIN(COUNT(AnswerText)) where questionid = 3"}
{"sample_id": 4580, "db_id": "mental_health_survey", "final": {"question": "What is the average age of the survey respondents in the United States?", "sql": "SELECT CAST(SUM(T1.AnswerText) AS REAL) / COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN ( SELECT T1.UserID FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 3 AND T1.AnswerText = 'United States' ) AS T2 ON T1.UserID = T2.UserID INNER JOIN Question AS T3 ON T1.QuestionID = T3.questionid WHERE T3.questionid = 1", "source_tables": ["answer", "question"]}, "evidence": "Average age refer to AVG(AnswerText) where questionid = 1; respondents in the United States refers to AnswerText = 'United States' where questionid = 3"}
{"sample_id": 4581, "db_id": "mental_health_survey", "final": {"question": "What is the percentage of the the users who would bring up a mental health issue with a potential employer in an interview?", "sql": "SELECT CAST(SUM(CASE  WHEN T1.AnswerText LIKE 'Yes' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 12", "source_tables": ["answer", "question"]}, "evidence": "Percentage = DIVIDE(SUM(AnswerText = 'Yes' Or AnswerText = 'Maybe'), COUNT(QuestionID = 12))* 100"}
{"sample_id": 4582, "db_id": "mental_health_survey", "final": {"question": "How many questions in 2014's survey had more than 200 answers?", "sql": "SELECT COUNT(QuestionID) FROM Answer WHERE SurveyID LIKE 2014 GROUP BY QuestionID ORDER BY COUNT(QuestionID) > 200 LIMIT 1", "source_tables": ["answer"]}, "evidence": "2014 refer to SurveyID; COUNT(QuestionID) where COUNT(AnswerText) > 200"}
{"sample_id": 4583, "db_id": "mental_health_survey", "final": {"question": "What is the oldest age of the users in 2014's survey?", "sql": "SELECT T2.AnswerText FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T1.questiontext = 'What is your age?' AND T2.SurveyID = 2014 ORDER BY T2.AnswerText DESC LIMIT 1", "source_tables": ["answer", "question"]}, "evidence": "what is your age? refer to QuestionText; 2014 refer to SurveyID; oldest age refers to MAX(AnswerText)\n\n"}
{"sample_id": 4584, "db_id": "mental_health_survey", "final": {"question": "How many users answered \"No\" to the question \"Would you bring up a mental health issue with a potential employer in an interview?\" in 2014's survey?", "sql": "SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T1.questiontext = 'Would you bring up a mental health issue with a potential employer in an interview?' AND T2.SurveyID = 2014 AND T2.AnswerText LIKE 'NO'", "source_tables": ["answer", "question"]}, "evidence": "2014 refer to SurveyID; Answered No refer to AnswerText = 'No'; Question refer to questiontext\n\n"}
{"sample_id": 4585, "db_id": "mental_health_survey", "final": {"question": "Please list the IDs of the users who answered \"Yes\" to the question \"Do you think that discussing a physical health issue with your employer would have negative consequences?\" in 2014's survey.", "sql": "SELECT T2.UserID FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T1.questiontext = 'Do you think that discussing a physical health issue with your employer would have negative consequences?' AND T2.AnswerText LIKE 'Yes' AND T2.SurveyID = 2014", "source_tables": ["answer", "question"]}, "evidence": "2014 refer to SurveyID; Question refer to questiontext; yes refer to AnswerText = 'Yes'\n\n"}
{"sample_id": 4586, "db_id": "mental_health_survey", "final": {"question": "How many users participated in the mental health survey for 2014?", "sql": "SELECT COUNT(DISTINCT T1.UserID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2014'", "source_tables": ["answer", "survey"]}, "evidence": "mental health survey for 2014 refers to SurveyID = 2014"}
{"sample_id": 4587, "db_id": "mental_health_survey", "final": {"question": "Please list all the answers to the question \"Any additional notes or comments\" that are not null in 2014's survey.", "sql": "SELECT T2.AnswerText FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T1.questiontext = 'Any additional notes or comments' AND T2.SurveyID = 2014 AND T2.AnswerText <> -1", "source_tables": ["answer", "question"]}, "evidence": "question refers to questiontext; the answers that are not null refers to AnswerText ! = -1\n"}
{"sample_id": 4588, "db_id": "mental_health_survey", "final": {"question": "Please list all the common questions in 2014's survey and 2016's survey.", "sql": "SELECT T1.questiontext FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID IN (2014, 2016) GROUP BY T1.questiontext", "source_tables": ["answer", "question"]}, "evidence": "question refers to questiontext; all the common questions in 2014's survey and 2016's survey refers to QuestionID(SurveyID(2014)) = QuestionID(SurveyID(2016))\n"}
{"sample_id": 4589, "db_id": "mental_health_survey", "final": {"question": "How many users lived in Canada according to 2018's survey?", "sql": "SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID = 2018 AND T1.questiontext = 'What country do you live in?' AND T2.AnswerText = 'Canada'", "source_tables": ["answer", "question"]}, "evidence": "lived in Canada refers to AnswerText(QuestionID(3)) = 'Canada'"}
{"sample_id": 4590, "db_id": "mental_health_survey", "final": {"question": "Please list all the questions in the mental health survey for 2014.", "sql": "SELECT T2.questiontext FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid INNER JOIN Survey AS T3 ON T1.SurveyID = T3.SurveyID WHERE T3.Description LIKE 'mental health survey for 2014' GROUP BY T2.questiontext", "source_tables": ["answer", "question", "survey"]}, "evidence": "mental health survey for 2014 refers to SurveyID = 2014"}
{"sample_id": 4591, "db_id": "mental_health_survey", "final": {"question": "According to 2016's survey, what is the number of users with a mental health disorder in the past?", "sql": "SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID = 2016 AND T1.questiontext LIKE 'Have you had a mental health disorder in the past?' AND T2.AnswerText = 'Yes'", "source_tables": ["answer", "question"]}, "evidence": "users with a mental health disorder in the past refers to AnswerText(QuestionID(32)) = 'Yes'"}
{"sample_id": 4592, "db_id": "mental_health_survey", "final": {"question": "How many users answered \"Yes\" to the question \"Have you had a mental health disorder in the past?\" in 3 consecutive years starting from 2016?", "sql": "SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID IN (2016, 2017, 2018) AND T1.questiontext LIKE 'Have you had a mental health disorder in the past?' AND T2.AnswerText = 'Yes'", "source_tables": ["answer", "question"]}, "evidence": "question refers to questiontext; answered 'Yes' to question refers to AnswerText = 'Yes'; 3 consecutive years starting from 2016 refers to SurveyID = 2016 and SurveyID = 2017 and SurveyID = 2018"}
{"sample_id": 4593, "db_id": "mental_health_survey", "final": {"question": "What is the average result of the question \"What is your age?\" in 2014's survey?", "sql": "SELECT CAST(SUM(T2.AnswerText) AS REAL) / COUNT(T2.UserID) AS 'avg' FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID = 2014 AND T1.questiontext LIKE 'What is your age?'", "source_tables": ["answer", "question"]}, "evidence": "average result refers to avg(AnswerText(SurveyID = 2014& QuestionID = 1))"}
{"sample_id": 4594, "db_id": "mental_health_survey", "final": {"question": "What is the rate of increase of users with a current mental disorder from 2019's survey to 2016's survey?", "sql": "SELECT CAST(( SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID = 2019 AND T1.questiontext LIKE 'Do you currently have a mental health disorder?' AND T2.AnswerText = 'Yes' ) - ( SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID = 2016 AND T1.questiontext LIKE 'Do you currently have a mental health disorder?' AND T2.AnswerText = 'Yes' ) AS REAL) * 100 / ( SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID = 2016 AND T1.questiontext LIKE 'Do you currently have a mental health disorder?' AND T2.AnswerText = 'Yes' )", "source_tables": ["answer", "question"]}, "evidence": "rate of increase = subtract(divide(count(SurveyID = 2019& QuestionID = 33& AnswerText = 'Yes'), count(SurveyID = 2019& QuestionID = 33)), divide(count(SurveyID = 2016& QuestionID = 33& AnswerText = 'Yes'), count(SurveyID = 2016& QuestionID = 33)))"}
{"sample_id": 4595, "db_id": "mental_health_survey", "final": {"question": "Tell the question ID for \"Would you bring up a physical health issue with a potential employer in an interview?\".", "sql": "SELECT questionid FROM Question WHERE questiontext LIKE 'Would you bring up a physical health issue with a potential employer in an interview?'", "source_tables": ["question"]}, "evidence": ""}
{"sample_id": 4596, "db_id": "mental_health_survey", "final": {"question": "How many users answered the question No.20?", "sql": "SELECT MAX(UserID) - MIN(UserID) + 1 FROM Answer WHERE QuestionID = 20", "source_tables": ["answer"]}, "evidence": "question No.20 refers to QuestionID = 20"}
{"sample_id": 4597, "db_id": "mental_health_survey", "final": {"question": "How many questions did user No.5 answer?", "sql": "SELECT COUNT(QuestionID) FROM Answer WHERE UserID = 5", "source_tables": ["answer"]}, "evidence": "user No.5 refers to userID = 5"}
{"sample_id": 4598, "db_id": "mental_health_survey", "final": {"question": "How many users participated in the Survey No.2016?", "sql": "SELECT COUNT(DISTINCT UserID) FROM Answer WHERE SurveyID LIKE 2016", "source_tables": ["answer"]}, "evidence": "Survey No.2016 refers to SurveyID = 2016"}
{"sample_id": 4599, "db_id": "mental_health_survey", "final": {"question": "State the number of questions that were asked in the \"mental health survey for 2018\".", "sql": "SELECT COUNT(T1.QuestionID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2018'", "source_tables": ["answer", "survey"]}, "evidence": "mental health survey for 2018 refers to SurveyID = 2018"}
{"sample_id": 4600, "db_id": "mental_health_survey", "final": {"question": "Tell the number of surveys that contained the question \u201cWhat country do you work in?\u201d.", "sql": "SELECT COUNT(DISTINCT T1.QuestionID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid INNER JOIN Survey AS T3 ON T1.SurveyID = T3.SurveyID WHERE T2.questiontext = 'What country do you work in?'", "source_tables": ["answer", "question", "survey"]}, "evidence": "question refers to questiontext"}
{"sample_id": 4621, "db_id": "disney", "final": {"question": "How much more total box office gross did the Walt Disney Company have in revenue in 1998 than in 1997?", "sql": "SELECT SUM(CASE WHEN 'Year' = 1998 THEN Total ELSE 0 END) - SUM(CASE WHEN 'Year' = 1997 THEN Total ELSE 0 END) FROM revenue", "source_tables": ["revenue"]}, "evidence": "SUBTRACT(SUM(Year = 1998), SUM(Year = 1997))"}
{"sample_id": 4622, "db_id": "disney", "final": {"question": "In which segment did the Walt Disney Company earned a bigger revenue in 1998, Studio Entertainment or Disney Media Networks?", "sql": "SELECT CASE WHEN 'Studio Entertainment[NI 1]' > 'Disney Media Networks' THEN 'Studio Entertainment[NI 1]' ELSE 'Disney Media Networks' END FROM revenue WHERE 'Year' = 1998", "source_tables": ["revenue"]}, "evidence": "Studio Entertainment[NI 1]' > 'Disney Media Networks' where Year = 1998;"}
{"sample_id": 4623, "db_id": "disney", "final": {"question": "Who is the director of the movie Pinocchio?", "sql": "SELECT director FROM director WHERE name = 'Pinocchio'", "source_tables": ["director"]}, "evidence": "Pinocchio is the name of the movie;"}
{"sample_id": 4624, "db_id": "disney", "final": {"question": "Please list the villains of all the movies directed by Wolfgang Reitherman.", "sql": "SELECT T2.villian FROM director AS T1 INNER JOIN characters AS T2 ON T1.name = T2.movie_title WHERE T1.director = 'Wolfgang Reitherman' AND T2.villian IS NOT NULL", "source_tables": ["director", "characters"]}, "evidence": "Wolfgang Reitherman refers to director = 'Wolfgang Reitherman';"}
{"sample_id": 4625, "db_id": "disney", "final": {"question": "Among the movies directed by Wolfgang Reitherman, how many of them were released in December?", "sql": "SELECT COUNT(movie_title) FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE SUBSTR(release_date, INSTR(release_date, '-') + 1, 3) = 'Dec' AND T2.director = 'Wolfgang Reitherman'", "source_tables": ["director", "characters"]}, "evidence": "Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; released in December refers to (release_date, instr(release_date, '-') + 1, 3) = 'Dec';"}
{"sample_id": 4626, "db_id": "disney", "final": {"question": "The song \"Once Upon a Dream\" is associated with the movie directed by whom?", "sql": "SELECT T2.director FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.song = 'Once Upon a Dream'", "source_tables": ["director", "characters"]}, "evidence": "directed by whom refers to director; movie refers to movie_title;"}
{"sample_id": 4627, "db_id": "disney", "final": {"question": "Who is the voice actor for the villain of the movie \"Alice in Wonderland\"?", "sql": "SELECT T1.'voice-actor' FROM 'voice-actors' AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title WHERE T1.character LIKE '%' OR T2.villian OR '%' AND T2.movie_title = 'Alice in Wonderland'", "source_tables": ["voice-actors", "characters"]}, "evidence": "Alice in Wonderland refers to movie_title = 'Alice in Wonderland'; villain refers to character like '%'||T1.villian||'%';"}
{"sample_id": 4628, "db_id": "disney", "final": {"question": "Please list the release dates of all the movies in which Alan Tudyk is a voice actor.", "sql": "SELECT T2.release_date FROM 'voice-actors' AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title WHERE T1.'voice-actor' = 'Alan Tudyk'", "source_tables": ["voice-actors", "characters"]}, "evidence": "FALSE;"}
{"sample_id": 4629, "db_id": "disney", "final": {"question": "Among the movies in which Alan Tudyk is a voice actor, how many of them were released after 2012?", "sql": "SELECT COUNT(T2.movie) FROM characters AS T1 INNER JOIN 'voice-actors' AS T2 ON T1.movie_title = T2.movie WHERE T2.'voice-actor' = 'Alan Tudyk' AND SUBSTR(release_date, INSTR(release_date, '-') + 5) > 12", "source_tables": ["voice-actors", "characters"]}, "evidence": "released after 2012 refers to (release_date, instr(release_date, '-') + 5) > 12;"}
{"sample_id": 4630, "db_id": "disney", "final": {"question": "Among the movies directed by Wolfgang Reitherman, how many of them are Comedies?", "sql": "SELECT COUNT(T3.name) FROM ( SELECT T2.name FROM 'movies_total_gross' AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Wolfgang Reitherman' AND T1.genre = 'Comedy' GROUP BY T2.name ) T3", "source_tables": ["director", "movies_total_gross"]}, "evidence": "directed by Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; comedies refers to genre = 'Comedy'; movies refer to movie_title;"}
{"sample_id": 4631, "db_id": "disney", "final": {"question": "Among the movies directed by Wolfgang Reitherman, which one of them was the most popular?", "sql": "SELECT T2.movie_title FROM director AS T1 INNER JOIN movies_total_gross AS T2 ON T1.name = T2.movie_title WHERE T1.director = 'Wolfgang Reitherman' ORDER BY T2.total_gross DESC LIMIT 1", "source_tables": ["director", "movies_total_gross"]}, "evidence": "directed by Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; the most popular movie refers to MAX(total_gross);"}
{"sample_id": 4632, "db_id": "disney", "final": {"question": "Please list the movies directed by Wolfgang Reitherman that can be watched by the general audience.", "sql": "SELECT T1.movie_title FROM 'movies_total_gross' AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.MPAA_rating = 'G' AND T2.director = 'Wolfgang Reitherman'", "source_tables": ["director", "movies_total_gross"]}, "evidence": "directed by Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; movies refer to movie_title; general audience refers to MPAA_rating = 'G';"}
{"sample_id": 4633, "db_id": "disney", "final": {"question": "Which character is the villain of the most popular movie?", "sql": "SELECT T2.villian FROM 'movies_total_gross' AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title ORDER BY T1.total_gross DESC LIMIT 1", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "the most popular movie refers to movie_title where MAX(total_gross);"}
{"sample_id": 4634, "db_id": "disney", "final": {"question": "What is the genre of the movie whose villain is Commander Rourke?", "sql": "SELECT T2.genre FROM characters AS T1 INNER JOIN movies_total_gross AS T2 ON T2.movie_title = T1.movie_title WHERE T1.villian = 'Commander Rourke'", "source_tables": ["characters", "movies_total_gross"]}, "evidence": "FALSE;"}
{"sample_id": 4635, "db_id": "disney", "final": {"question": "Who is the villain of the movie \"Beauty and the Beast\"?", "sql": "SELECT villian FROM characters WHERE movie_title = 'Beauty and the Beast'", "source_tables": ["characters"]}, "evidence": "Beauty and the Beast refers to movie_title = 'Beauty and the Beast';"}
{"sample_id": 4636, "db_id": "disney", "final": {"question": "Which movie is the character Robin Hood in?", "sql": "SELECT movie_title FROM characters WHERE hero = 'Robin Hood'", "source_tables": ["characters"]}, "evidence": "Robin Hood is the main character of the movie which refers to hero = 'Robin Hood'; movie refers to movie_title;"}
{"sample_id": 4637, "db_id": "disney", "final": {"question": "Give the name of the movie which the song \"I Thought I Lost You\" is associated with.", "sql": "SELECT movie_title FROM characters WHERE song = 'I Thought I Lost You'", "source_tables": ["characters"]}, "evidence": "name of the movie refers to movie_title;"}
{"sample_id": 4638, "db_id": "disney", "final": {"question": "Who is the voice actor of the character \"Binkie Muddlefoot\"?", "sql": "SELECT 'voice-actor' FROM 'voice-actors' WHERE character = 'Binkie Muddlefoot'", "source_tables": ["voice-actors"]}, "evidence": "FALSE;"}
{"sample_id": 4639, "db_id": "disney", "final": {"question": "Who is the hero character of the movie whose total gross was $222,527,828?", "sql": "SELECT T1.hero FROM characters AS T1 INNER JOIN movies_total_gross AS T2 ON T2.movie_title = T1.movie_title WHERE T2.total_gross = '$222,527,828'", "source_tables": ["characters", "movies_total_gross"]}, "evidence": "FALSE;"}
{"sample_id": 4640, "db_id": "disney", "final": {"question": "Which song is associated with the most popular Disney movie in 1970s?", "sql": "SELECT T2.song FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title WHERE CAST(SUBSTR(T1.release_date, INSTR(T1.release_date, ', ') + 1) AS int) BETWEEN 1970 AND 1979 ORDER BY CAST(REPLACE(SUBSTR(T1.total_gross, 2), ',', '') AS float) DESC LIMIT 1", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "the most popular movie refers to movie_title where MAX(total_gross); in 1970s refers to (cast(SUBSTR(release_date, instr(release_date, ', ') + 1) as int) between 1970 and 1979);"}
{"sample_id": 4641, "db_id": "disney", "final": {"question": "Who is the hero character of the Disney movie directed by Will Finn?", "sql": "SELECT T1.hero FROM characters AS T1 INNER JOIN director AS T2 ON T2.name = T1.movie_title WHERE T2.director = 'Will Finn'", "source_tables": ["director", "characters"]}, "evidence": "Will Finn refers to director = 'Will Finn';"}
{"sample_id": 4642, "db_id": "disney", "final": {"question": "Who is the voice actor of the hero character from the movie The Little Mermaid?", "sql": "SELECT T2.'voice-actor' FROM characters AS T1 INNER JOIN 'voice-actors' AS T2 ON T2.movie = T1.movie_title WHERE T1.movie_title = 'The Little Mermaid' AND T2.character = T1.hero", "source_tables": ["voice-actors", "characters"]}, "evidence": "The Little Mermaid refers to movie_title = 'The Little Mermaid';"}
{"sample_id": 4643, "db_id": "disney", "final": {"question": "Give the name of the director of the movie in which Verna Felton was the voice actor for its character \"Aunt Sarah\".", "sql": "SELECT T1.director FROM director AS T1 INNER JOIN 'voice-actors' AS T2 ON T2.movie = T1.name WHERE T2.character = 'Aunt Sarah' AND T2.'voice-actor' = 'Verna Felton'", "source_tables": ["voice-actors", "director"]}, "evidence": "FALSE;"}
{"sample_id": 4644, "db_id": "disney", "final": {"question": "For the movie in which Tress MacNeille was the voice actor for its character \"Hyacinth Hippo\", what was the release date of that movie?", "sql": "SELECT T1.release_date FROM characters AS T1 INNER JOIN 'voice-actors' AS T2 ON T2.movie = T1.movie_title WHERE T2.character = 'Hyacinth Hippo' AND T2.'voice-actor' = 'Tress MacNeille'", "source_tables": ["voice-actors", "characters"]}, "evidence": "FALSE;"}
{"sample_id": 4645, "db_id": "disney", "final": {"question": "Who is the director of the adventure movie which was released on 2007/3/30?", "sql": "SELECT T1.director FROM director AS T1 INNER JOIN movies_total_gross AS T2 ON T2.movie_title = T1.name WHERE T2.genre = 'Adventure' AND T2.release_date = 'Mar 30, 2007'", "source_tables": ["director", "movies_total_gross"]}, "evidence": "released on 2007/3/30 refers to release_date = 'Mar 30, 2007'; adventure movie refers to genre = 'Adventure' ;"}
{"sample_id": 4646, "db_id": "disney", "final": {"question": "Wolfgang Reitherman has directed several Disney movies, which one has the highest grossing after accounting for inflation?", "sql": "SELECT T1.movie_title FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Wolfgang Reitherman' ORDER BY CAST(REPLACE(SUBSTR(inflation_adjusted_gross, 2), ',', '') AS REAL) DESC LIMIT 1", "source_tables": ["director", "movies_total_gross"]}, "evidence": "Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; the highest grossing after accounting for inflation refers to MAX(inflation_adjusted_gross);"}
{"sample_id": 4647, "db_id": "disney", "final": {"question": "Who is the hero character of the adventure movie which was released on 2016/3/4?", "sql": "SELECT T1.hero FROM characters AS T1 INNER JOIN movies_total_gross AS T2 ON T2.movie_title = T1.movie_title WHERE T2.genre = 'Adventure' AND T1.release_date = '4-Mar-16'", "source_tables": ["characters", "movies_total_gross"]}, "evidence": "released on 2016/3/4 refers to release_date = '4-Mar-16'; adventure movie refers to genre = 'Adventure' ;"}
{"sample_id": 4648, "db_id": "disney", "final": {"question": "The character Donald Duck has appeared in two Disney movies, which one has more grossing?", "sql": "SELECT T1.movie_title FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title WHERE T2.hero = 'Donald Duck' ORDER BY CAST(REPLACE(SUBSTR(total_gross, 2), ',', '') AS REAL) DESC LIMIT 1", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "Donald Duck is the main character of the movie which refers to hero = 'Donald Duck'; which one has more grossing refers to movie_title where MAX(total_gross);"}
{"sample_id": 4649, "db_id": "disney", "final": {"question": "How many movies did Wolfgang Reitherman direct?", "sql": "SELECT COUNT(name) FROM director WHERE director = 'Wolfgang Reitherman'", "source_tables": ["director"]}, "evidence": "Wolfgang Reitherman refers director = 'Wolfgang Reitherman';"}
{"sample_id": 4650, "db_id": "disney", "final": {"question": "Who is the most productive director?", "sql": "SELECT director FROM director GROUP BY director ORDER BY COUNT(name) DESC LIMIT 1", "source_tables": ["director"]}, "evidence": "Most productive director refers to director where MAX(COUNT(name));"}
{"sample_id": 4651, "db_id": "disney", "final": {"question": "How many restricted horror movies were released between 1/1/1990 to 12/31/2015?", "sql": "SELECT COUNT(movie_title) FROM movies_total_gross WHERE MPAA_rating = 'R' AND genre = 'Horror' AND CAST(SUBSTR(release_date, INSTR(release_date, ', ') + 1) AS int) BETWEEN 1990 AND 2015", "source_tables": ["movies_total_gross"]}, "evidence": "Restricted refers to MPAA_rating = 'R'; horror refers to genre = 'Horror'; released between 1/1/1990 to 12/31/2015 refers to (cast(SUBSTR(release_date, instr(release_date, ', ') + 1) as int) between 1990 and 2015);"}
{"sample_id": 4652, "db_id": "disney", "final": {"question": "What are the names of the characters voiced by Frank Welker?", "sql": "SELECT character FROM 'voice-actors' WHERE 'voice-actor' = 'Frank Welker'", "source_tables": ["voice-actors"]}, "evidence": "Frank Welker refers to voice-actor = 'Frank Welker';"}
{"sample_id": 4653, "db_id": "disney", "final": {"question": "How much is the total gross of the movie with a song titled \"Little Wonders\"?", "sql": "SELECT T1.total_gross FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T2.movie_title = T1.movie_title WHERE T2.song = 'Little Wonders'", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "song = 'Little Wonders'"}
{"sample_id": 4654, "db_id": "disney", "final": {"question": "What is the Motion Picture Association of America rating for the movie featuring a villain named Turbo?", "sql": "SELECT T1.MPAA_rating FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T2.movie_title = T1.movie_title WHERE T2.villian = 'Turbo'", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "The Motion Picture Association of America rating refers to MPAA_rating; villian = 'Turbo';"}
{"sample_id": 4655, "db_id": "disney", "final": {"question": "How many movies for mature audiences or parental guidance suggested did Bill Thompson work as a voice actor?", "sql": "SELECT COUNT(T.movie) FROM ( SELECT T1.movie FROM 'voice-actors' AS T1 INNER JOIN movies_total_gross AS T2 ON T1.movie = T2.movie_title WHERE MPAA_rating = 'PG' AND 'voice-actor' = 'Bill Thompson' GROUP BY T1.movie ) AS T", "source_tables": ["voice-actors", "movies_total_gross"]}, "evidence": "movies for mature audiences or parental guidance refer to movie_title where MPAA_rating = 'PG';"}
{"sample_id": 4656, "db_id": "disney", "final": {"question": "How many of Gary Trousdale's movies are adventure movies?", "sql": "SELECT COUNT(T.name) FROM ( SELECT T1.name FROM director AS T1 INNER JOIN movies_total_gross AS T2 ON T1.name = T2.movie_title WHERE T1.director = 'Gary Trousdale' AND T2.genre = 'Adventure' GROUP BY T1.name ) T", "source_tables": ["director", "movies_total_gross"]}, "evidence": "Gary Trousdale refers director = 'Gary Trousdale'; the adventure movie refers to genre = 'Adventure';"}
{"sample_id": 4657, "db_id": "disney", "final": {"question": "Which director did Bill Thompson work the most with?", "sql": "SELECT director FROM director AS T1 INNER JOIN 'voice-actors' AS T2 ON T1.name = T2.movie WHERE T2.'voice-actor' = 'Bill Thompson' GROUP BY director ORDER BY COUNT(director) DESC LIMIT 1", "source_tables": ["voice-actors", "director"]}, "evidence": "Bill Thompson refers to voice-actor = 'Bill Thompson'; worked the most refers to MAX(COUNT(name));"}
{"sample_id": 4658, "db_id": "disney", "final": {"question": "What is the most popular movie directed by Ron Clements?", "sql": "SELECT T2.name FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T2.name = T1.movie_title WHERE T2.director = 'Ron Clements' ORDER BY CAST(REPLACE(SUBSTR(total_gross, 2), ',', '') AS int) DESC LIMIT 1", "source_tables": ["director", "movies_total_gross"]}, "evidence": "Ron Clements refers to director = 'Ron Clements'; the most popular movie refers to movie_title where MAX(total_gross);"}
{"sample_id": 4659, "db_id": "disney", "final": {"question": "List all the voice actors in the movie directed by Ben Sharpsteen which was released on February 9, 1940.", "sql": "SELECT T2.'voice-actor' FROM director AS T1 INNER JOIN 'voice-actors' AS T2 INNER JOIN movies_total_gross AS T3 ON T1.name = T2.movie AND T2.movie = T3.movie_title WHERE T1.director = 'Ben Sharpsteen' AND T3.release_date = 'Feb 9, 1940' AND T2.'voice-actor' != 'None' GROUP BY T2.'voice-actor'", "source_tables": ["voice-actors", "director", "movies_total_gross"]}, "evidence": "Ben Sharpsteen refers to director = 'Ben Sharpsteen'; released on February 9, 1940 refers to release_date = 'Feb 9, 1940';"}
{"sample_id": 4660, "db_id": "disney", "final": {"question": "How many PG adventure movies did Ron Clements direct?", "sql": "SELECT COUNT(*) FROM director AS T1 INNER JOIN movies_total_gross AS T2 ON T1.name = T2.movie_title WHERE T1.director = 'Ron Clements' AND T2.MPAA_rating = 'PG' AND T2.genre = 'Adventure'", "source_tables": ["director", "movies_total_gross"]}, "evidence": "Ron Clements refers to director = 'Ron Clements'; PG is an abbreviation for parental guidance and refers to MPAA_rating = 'PG'; adventure movie refers to genre = 'Adventure';"}
{"sample_id": 4661, "db_id": "disney", "final": {"question": "How many horror movies are there?", "sql": "SELECT COUNT(movie_title) FROM 'movies_total_gross' WHERE genre = 'Horror'", "source_tables": ["movies_total_gross"]}, "evidence": "Horror refers to genre = 'Horror';"}
{"sample_id": 4662, "db_id": "disney", "final": {"question": "Who is the villain in the movie \"The Great Mouse Detective\"?", "sql": "SELECT villian FROM characters WHERE movie_title = 'The Great Mouse Detective'", "source_tables": ["characters"]}, "evidence": "The Great Mouse Detective refers to movie_title = 'The Great Mouse Detective';"}
{"sample_id": 4663, "db_id": "disney", "final": {"question": "List the voice actors from the movie \"Meet the Robinsons\".", "sql": "SELECT 'voice-actor' FROM 'voice-actors' WHERE movie = 'Meet the Robinsons'", "source_tables": ["voice-actors"]}, "evidence": "Meet the Robinsons refers to movie_title = 'Meet the Robinsons';"}
{"sample_id": 4664, "db_id": "disney", "final": {"question": "Which director has made the most movies?", "sql": "SELECT director, COUNT(name) FROM director GROUP BY director ORDER BY COUNT(name) DESC LIMIT 1", "source_tables": ["director"]}, "evidence": "the most movies refers to MAX(COUNT(name));"}
{"sample_id": 4665, "db_id": "disney", "final": {"question": "From 2000 to 2010, in which year did the studio entertainment segment make the most revenue?", "sql": "SELECT 'Year' FROM revenue WHERE 'Year' BETWEEN 2000 AND 2010 ORDER BY 'Studio Entertainment[NI 1]' DESC LIMIT 1", "source_tables": ["revenue"]}, "evidence": "From 2000 to 2010 refers to Year between 2000 and 2010; the most revenue refers to MAX(\"Studio Entertainment[NI 1]\");"}
{"sample_id": 4666, "db_id": "disney", "final": {"question": "List all the songs associated with drama movies.", "sql": "SELECT song FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title WHERE T1.genre = 'Drama' GROUP BY song", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "drama refers to genre = 'Drama';"}
{"sample_id": 4667, "db_id": "disney", "final": {"question": "Who are the voice actors for all the heroes?", "sql": "SELECT T2.'voice-actor' FROM characters AS T1 INNER JOIN 'voice-actors' AS T2 ON T2.character = T1.hero WHERE T2.movie = T1.movie_title", "source_tables": ["voice-actors", "characters"]}, "evidence": "FALSE;"}
{"sample_id": 4668, "db_id": "disney", "final": {"question": "Provide a list of directors from the 1990s.", "sql": "SELECT T2.director FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name AND CAST(SUBSTR(release_date, INSTR(release_date, ', ') + 1) AS int) BETWEEN 1990 AND 2000 GROUP BY T2.director", "source_tables": ["director", "movies_total_gross"]}, "evidence": "the 1990s refers to (cast(SUBSTR(release_date, instr(release_date, ', ') + 1) as int) between 1990 and 2000);"}
{"sample_id": 4669, "db_id": "disney", "final": {"question": "Who voiced the villain in \"The Rescuers\"?", "sql": "SELECT T1.'voice-actor' FROM 'voice-actors' AS T1 INNER JOIN characters AS T2 ON T2.movie_title = T1.movie WHERE T2.movie_title = 'The Rescuers' AND T1.character = T2.villian", "source_tables": ["voice-actors", "characters"]}, "evidence": "The Rescuers refers to movie_title = 'The Rescuers'; who voiced refers to voice-actor;"}
{"sample_id": 4670, "db_id": "disney", "final": {"question": "List all of Wolfgang Reitherman's movies and their voice actors.", "sql": "SELECT T1.name, T2.'voice-actor' FROM director AS T1 INNER JOIN 'voice-actors' AS T2 ON T1.name = T2.movie WHERE T1.director = 'Wolfgang Reitherman'", "source_tables": ["voice-actors", "director"]}, "evidence": "Wolfgang Reitherman refers to director = 'Wolfgang Reitherman';"}
{"sample_id": 4671, "db_id": "disney", "final": {"question": "What are the characters in the PG movies?", "sql": "SELECT DISTINCT T2.character FROM movies_total_gross AS T1 INNER JOIN 'voice-actors' AS T2 ON T1.movie_title = T2.movie WHERE T1.MPAA_rating = 'PG'", "source_tables": ["voice-actors", "movies_total_gross"]}, "evidence": "PG is an abbreviation for parental guidance and refers to MPAA_rating = 'PG';"}
{"sample_id": 4672, "db_id": "disney", "final": {"question": "What is the highest grossing movie without a song?", "sql": "SELECT T1.movie_title FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T2.movie_title = T1.movie_title WHERE T2.song IS NULL ORDER BY CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "the highest grossing movie without song refers to movie_title where MAX(total_gross) and song = 'null';"}
{"sample_id": 4673, "db_id": "disney", "final": {"question": "Who directed the movie with the most voice actors?", "sql": "SELECT T2.director, COUNT(DISTINCT T1.'voice-actor') FROM 'voice-actors' AS T1 INNER JOIN director AS T2 ON T1.movie = T2.name GROUP BY T2.director ORDER BY COUNT(DISTINCT T1.'voice-actor') DESC LIMIT 1", "source_tables": ["voice-actors", "director"]}, "evidence": "who directed refers director;"}
{"sample_id": 4674, "db_id": "disney", "final": {"question": "Who are the voice actors in the movie that came out on 11/24/2010?", "sql": "SELECT T2.'voice-actor' FROM movies_total_gross AS T1 INNER JOIN 'voice-actors' AS T2 ON T1.movie_title = T2.movie WHERE T1.release_date = 'Nov 24, 2010'", "source_tables": ["voice-actors", "movies_total_gross"]}, "evidence": "Came out on 11/24/2010 refers to release_date = 'Nov 24, 2010';"}
{"sample_id": 4675, "db_id": "disney", "final": {"question": "List the directors of movies that feature a song.", "sql": "SELECT T2.director FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.song IS NOT NULL GROUP BY T2.director", "source_tables": ["director", "characters"]}, "evidence": "movies that feature a song refer to movie_title where song is not NULL;"}
{"sample_id": 4676, "db_id": "disney", "final": {"question": "What are the total grosses for the movies with Jim Cummings as the voice actor?", "sql": "SELECT T2.movie_title FROM 'voice-actors' AS T1 INNER JOIN movies_total_gross AS T2 ON T2.movie_title = T1.movie WHERE T1.'voice-actor' = 'Jim Cummings' ORDER BY CAST(REPLACE(trim(T2.total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1", "source_tables": ["voice-actors", "movies_total_gross"]}, "evidence": "FALSE;"}
{"sample_id": 4677, "db_id": "disney", "final": {"question": "Which of the movies directed by Ron Clements has the highest total gross?", "sql": "SELECT T2.movie_title FROM director AS T1 INNER JOIN movies_total_gross AS T2 ON T1.name = T2.movie_title WHERE T1.director = 'Ron Clements' ORDER BY CAST(REPLACE(trim(T2.total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1", "source_tables": ["director", "movies_total_gross"]}, "evidence": "Ron Clements refer to director = 'Ron Clements'; the highest total gross refers to MAX(total_gross);"}
{"sample_id": 4678, "db_id": "disney", "final": {"question": "What is the average total gross for the movies featuring Sterling Holloway?", "sql": "SELECT SUM(CAST(REPLACE(trim(T2.total_gross, '$'), ',', '') AS REAL)) / COUNT(T2.movie_title) FROM 'voice-actors' AS T1 INNER JOIN movies_total_gross AS T2 ON T1.movie = T2.movie_title WHERE T1.'voice-actor' = 'Sterling Holloway'", "source_tables": ["voice-actors", "movies_total_gross"]}, "evidence": "DIVIDE(SUM(total_gross where voice-actor = 'Sterling Holloway'); COUNT(movie_title where voice-actor = 'Sterling Holloway'));"}
{"sample_id": 4679, "db_id": "disney", "final": {"question": "What proportion of the total gross of all movies is from movies with songs?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.song IS NOT NULL THEN T2.movie_title ELSE NULL END) AS REAL) * 100 / COUNT(T2.movie_title) FROM characters AS T1 INNER JOIN movies_total_gross AS T2 ON T1.movie_title = T2.movie_title", "source_tables": ["characters", "movies_total_gross"]}, "evidence": "Movies with songs refer song = 'not null'; DIVIDE(SUM(total_gross where song = 'not null'), sum(total_gross)) as percentage;"}
{"sample_id": 4680, "db_id": "disney", "final": {"question": "List the movies and genres released in 2016.", "sql": "SELECT movie_title, genre FROM movies_total_gross WHERE SUBSTR(release_date, LENGTH(release_date) - 3, LENGTH(release_date)) = '2016'", "source_tables": ["movies_total_gross"]}, "evidence": "released in 2016 refers to substr(release_date, length(release_date) - 3, length(release_date)) = '2016'; movies refer to the movie_title;"}
{"sample_id": 4681, "db_id": "disney", "final": {"question": "Who is the villain in Little Mermaid?", "sql": "SELECT villian FROM characters WHERE movie_title = 'Little Mermaid'", "source_tables": ["characters"]}, "evidence": "Little Mermaid refers to movie_title = 'Little Mermaid';"}
{"sample_id": 4682, "db_id": "disney", "final": {"question": "List the movie titles directed by Jack Kinney.", "sql": "SELECT name FROM director WHERE director = 'Jack Kinney'", "source_tables": ["director"]}, "evidence": "Jack Kinney refers to director = 'Jack Kinney';"}
{"sample_id": 4683, "db_id": "disney", "final": {"question": "Provide the movie titles and the estimated inflation rate of the highest total grossed movie.", "sql": "SELECT movie_title, CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL) / CAST(REPLACE(trim(total_gross, '$'), ',', '') AS REAL) FROM movies_total_gross ORDER BY CAST(REPLACE(trim(total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1", "source_tables": ["movies_total_gross"]}, "evidence": "The highest grossed movie refers to MAX(total_gross); DIVIDE(inflation_adjusted_gross, total_gross) as percentage;"}
{"sample_id": 4684, "db_id": "disney", "final": {"question": "List the PG-13 romantic comedy movie titles and their release dates.", "sql": "SELECT movie_title, release_date FROM movies_total_gross WHERE MPAA_rating = 'PG-13' AND genre = 'Romantic Comedy'", "source_tables": ["movies_total_gross"]}, "evidence": "PG-13 refers to MPAA_rating = 'PG-13'; romantic comedy refers to genre = 'Romantic Comedy';"}
{"sample_id": 4685, "db_id": "disney", "final": {"question": "List the movie titles and character names by Bill Thompson.", "sql": "SELECT movie, character FROM 'voice-actors' WHERE 'voice-actor' = 'Bill Thompson'", "source_tables": ["voice-actors"]}, "evidence": "Bill Thompson refers to voice-actor = 'Bill Thompson';"}
{"sample_id": 4686, "db_id": "disney", "final": {"question": "List the movie titles and associated songs directed by Ron Clements.", "sql": "SELECT T1.movie_title, T1.song FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Ron Clements'", "source_tables": ["director", "characters"]}, "evidence": "Ron Clements refers director = 'Ron Clements';"}
{"sample_id": 4687, "db_id": "disney", "final": {"question": "Provide the titles, main characters, and associated songs of the movies directed by Wolfgang Reitherman in 1977.", "sql": "SELECT T1.movie_title, T2.hero, T2.song FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title INNER JOIN director AS T3 ON T1.movie_title = T3.name WHERE T3.director = 'Wolfgang Reitherman' AND SUBSTR(T1.release_date, LENGTH(T1.release_date) - 3, LENGTH(T1.release_date)) = '1977'", "source_tables": ["director", "movies_total_gross", "characters"]}, "evidence": "Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; 1997 refers to substr(release_date, length(release_date) - 3, length(release_date)) = '1977'; the titles refer to movie_title; main characters refer to hero;"}
{"sample_id": 4688, "db_id": "disney", "final": {"question": "Which movies had the main character named Donald Duck and who directed them?", "sql": "SELECT T1.movie_title, T2.director FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.hero = 'Donald Duck'", "source_tables": ["director", "characters"]}, "evidence": "Donald Duck is the main character of the movie which refers to hero = 'Donald Duck'; movies refer to movie_title; who directed refers director;"}
{"sample_id": 4689, "db_id": "disney", "final": {"question": "Describe the hero, director, and the release date of Mulan.", "sql": "SELECT T1.hero, T2.director, T1.release_date FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.movie_title = 'Mulan'", "source_tables": ["director", "characters"]}, "evidence": "Mulan refers to movie_title = 'Mulan';"}
{"sample_id": 4736, "db_id": "legislator", "final": {"question": "How many current legislators do not have an account on ballotpedia.org ?", "sql": "SELECT COUNT(*) FROM current WHERE ballotpedia_id = '' OR ballotpedia_id IS NULL", "source_tables": ["current"]}, "evidence": "do not have an account on ballotpedia.org refers to ballotpedia_id IS NULL OR ballotpedia_id = ''"}
{"sample_id": 4737, "db_id": "legislator", "final": {"question": "Please list the official full names of all the current legislators who do not have an account on C-SPAN's video website.", "sql": "SELECT official_full_name FROM current WHERE cspan_id IS NULL OR cspan_id = ''", "source_tables": ["current"]}, "evidence": "legislators who do not have an account refers to cspan_id IS NULL OR cspan_id = ''"}
{"sample_id": 4738, "db_id": "legislator", "final": {"question": "How many current legislators were born after the year 1960?", "sql": "SELECT COUNT(bioguide_id) FROM current WHERE birthday_bio >= '1961-01-01'", "source_tables": ["current"]}, "evidence": "born after the year 1960 refers to birthday_bio > '1960-01-01'"}
{"sample_id": 4739, "db_id": "legislator", "final": {"question": "Among all the current female legislators, how many of them have not been registered in Federal Election Commission data?", "sql": "SELECT COUNT(*) FROM current WHERE (fec_id IS NULL OR fec_id = '') AND gender_bio = 'F'", "source_tables": ["current"]}, "evidence": "have not been registered refers to fec_id IS NULL; female refers to gender_bio = 'F'"}
{"sample_id": 4740, "db_id": "legislator", "final": {"question": "What is the google entity ID of current legislator Sherrod Brown?", "sql": "SELECT google_entity_id_id FROM current WHERE official_full_name = 'Sherrod Brown'", "source_tables": ["current"]}, "evidence": "Sherrod Brown is an official_full_name"}
{"sample_id": 4741, "db_id": "legislator", "final": {"question": "Which current legislator is older, Sherrod Brown or Maria Cantwell?", "sql": "SELECT official_full_name FROM current WHERE official_full_name = 'Sherrod Brown' OR official_full_name = 'Maria Cantwell' ORDER BY birthday_bio LIMIT 1", "source_tables": ["current"]}, "evidence": "older refers to MAX(birthday_bio); 'Sherrod Brown' and 'Maria Cantwell' are official_full_name"}
{"sample_id": 4742, "db_id": "legislator", "final": {"question": "What is the username of the current official Facebook presence of current legislator Todd Young?", "sql": "SELECT T1.facebook FROM 'social-media' AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.official_full_name = 'Todd Young'", "source_tables": ["current", "social-media"]}, "evidence": "Todd Young is an official_full_name; username of current official Facebook presences refers to facebook;"}
{"sample_id": 4743, "db_id": "legislator", "final": {"question": "How many current legislators do not have an account on instagram?", "sql": "SELECT COUNT(*) FROM 'social-media' AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T1.instagram IS NULL", "source_tables": ["current", "social-media"]}, "evidence": "do not have an account on instagram refers to instagram is null"}
{"sample_id": 4744, "db_id": "legislator", "final": {"question": "To which current legislator does twitter ID234128524 belong? Please give his or her full official name.", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN 'social-media' AS T2 ON T2.bioguide = T1.bioguide_id WHERE T2.twitter_id = 234128524", "source_tables": ["current", "social-media"]}, "evidence": "full official name refers to official_full_name"}
{"sample_id": 4745, "db_id": "legislator", "final": {"question": "Please list the current official YouTube usernames of all the current female legislators.", "sql": "SELECT T2.youtube FROM current AS T1 INNER JOIN 'social-media' AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.gender_bio = 'F'", "source_tables": ["current", "social-media"]}, "evidence": "official YouTube usernames refers to youtube; female refers to gender_bio = 'F'"}
{"sample_id": 4746, "db_id": "legislator", "final": {"question": "What is the username of the current official Facebook presence of the oldest current legislator?", "sql": "SELECT T2.facebook FROM current AS T1 INNER JOIN 'social-media' AS T2 ON T2.bioguide = T1.bioguide_id ORDER BY T1.birthday_bio LIMIT 1", "source_tables": ["current", "social-media"]}, "evidence": "username of the official Facebook refers to facebook; the oldest refers to MAX(birthday_bio)"}
{"sample_id": 4747, "db_id": "legislator", "final": {"question": "Among the current legislators who do not have accounts on OpenSecrets.org., how many of them do not have instagram accounts either?", "sql": "SELECT SUM(CASE WHEN T1.instagram IS NULL THEN 1 ELSE 0 END) AS count FROM 'social-media' AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T2.opensecrets_id IS NULL OR T2.opensecrets_id = ''", "source_tables": ["current", "social-media"]}, "evidence": "do not have accounts on OpenSecrets.org refers to opensecrets_ID is NULL OR opensecrets_id = ''; do not have instagram accounts refers to instagram is null"}
{"sample_id": 4748, "db_id": "legislator", "final": {"question": "Current legislator Roger F. Wicker has not been a representative for how many terms?", "sql": "SELECT SUM(CASE WHEN T1.official_full_name = 'Roger F. Wicker' THEN 1 ELSE 0 END) AS count FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.district IS NULL OR T2.district = ''", "source_tables": ["current-terms", "current"]}, "evidence": "Roger F. Wicker is an official_full_name; not a representative refers to district IS NULL OR district = ''"}
{"sample_id": 4749, "db_id": "legislator", "final": {"question": "For how many terms has current legislator Sherrod Brown served?", "sql": "SELECT COUNT(*) FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Sherrod Brown'", "source_tables": ["current-terms", "current"]}, "evidence": "Sherrod Brown is an official_full_name"}
{"sample_id": 4750, "db_id": "legislator", "final": {"question": "Please list the official full names of all the current legislators who were once a senator during his or her terms.", "sql": "SELECT T2.official_full_name FROM 'current-terms' AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.state_rank IS NOT NULL", "source_tables": ["current-terms", "current"]}, "evidence": "once a senator during term refers to state_rank IS NOT NULL"}
{"sample_id": 4751, "db_id": "legislator", "final": {"question": "For which state did current legislator Sherrod Brown serve during his term that started on 1993/1/5?", "sql": "SELECT T1.state FROM 'current-terms' AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.start = '1993-01-05' AND T2.official_full_name = 'Sherrod Brown'", "source_tables": ["current-terms", "current"]}, "evidence": "Sherrod Brown is an full official name; started on 1993/1/5 refers to start = '1993-01-05';"}
{"sample_id": 4752, "db_id": "legislator", "final": {"question": "Among all the female current legislators, how many of them have served for more than 4 terms?", "sql": "SELECT COUNT(CID) FROM ( SELECT T1.bioguide_id AS CID FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' GROUP BY T2.bioguide HAVING COUNT(T2.bioguide) > 4 )", "source_tables": ["current-terms", "current"]}, "evidence": "female refers to gender_bio = 'F'; served for more than 4 terms refers to COUNT(bioguide > 4)"}
{"sample_id": 4753, "db_id": "legislator", "final": {"question": "Among the current legislators who have served for more than 6 terms, how many of them were born after 1960?", "sql": "SELECT COUNT(CID) FROM ( SELECT T1.bioguide_id AS CID FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio >= '1960-01-01' GROUP BY T2.bioguide HAVING COUNT(T2.bioguide) > 6 )", "source_tables": ["current-terms", "current"]}, "evidence": "served for more than 6 terms refers to COUNT(bioguide > 6); born after 1960 refers to birthday_bio > = '1960-01-01'"}
{"sample_id": 4754, "db_id": "legislator", "final": {"question": "What is the average number of terms for a current female legislator?", "sql": "SELECT CAST(COUNT(T2.bioguide) AS REAL) / COUNT(DISTINCT T1.bioguide_id) FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F'", "source_tables": ["current-terms", "current"]}, "evidence": "female refers to gender_bio = 'F'; calculation refers to DIVIDE(COUNT(bioguide WHERE gender_bio = 'F'), COUNT(bioguide_id))"}
{"sample_id": 4755, "db_id": "legislator", "final": {"question": "Among all the current legislators whose religion is Roman Catholic, what is the percentage of the ones without an instagram account?", "sql": "SELECT CAST(SUM(CASE WHEN T1.instagram IS NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM 'social-media' AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T2.religion_bio = 'Roman Catholic'", "source_tables": ["current", "social-media"]}, "evidence": "religion is Roman Catholic refers to religion_bio = 'Roman Catholic'; calculation = MULTIPLY(DIVIDE(COUNT(instagram is null), COUNT(bioguide_id)), 1.0)"}
{"sample_id": 4756, "db_id": "legislator", "final": {"question": "How many males were members of the current legislators?", "sql": "SELECT COUNT(*) FROM current WHERE gender_bio = 'M'", "source_tables": ["current"]}, "evidence": "male refers to gender_bio = 'M'"}
{"sample_id": 4757, "db_id": "legislator", "final": {"question": "How many current legislators chose Republican as their political party?", "sql": "SELECT COUNT(*) FROM 'current-terms' WHERE party = 'Republican'", "source_tables": ["current-terms"]}, "evidence": "chose Republican as their political party refers to party = 'Republican'"}
{"sample_id": 4758, "db_id": "legislator", "final": {"question": "How many legislators have an Instagram account?", "sql": "SELECT COUNT(*) FROM 'social-media' WHERE instagram IS NOT NULL AND instagram <> ''", "source_tables": ["social-media"]}, "evidence": "have an Instagram account refers to instagram is NOT null and instagram <>''"}
{"sample_id": 4759, "db_id": "legislator", "final": {"question": "How many females were members of the past legislators?", "sql": "SELECT COUNT(*) FROM historical WHERE gender_bio = 'F'", "source_tables": ["historical"]}, "evidence": "female refers to gender_bio = 'F'"}
{"sample_id": 4760, "db_id": "legislator", "final": {"question": "How many male legislators are Roman Catholic?", "sql": "SELECT COUNT(*) FROM current WHERE religion_bio = 'Roman Catholic' AND gender_bio = 'M'", "source_tables": ["current"]}, "evidence": "male refers to gender_bio = 'M'; Roman Catholic is a religion_bio"}
{"sample_id": 4761, "db_id": "legislator", "final": {"question": "What type of political party Sherrod Brown has in 2005?", "sql": "SELECT T1.party FROM 'current-terms' AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.first_name = 'Sherrod' AND T2.last_name = 'Brown' AND T1.start LIKE '%2005%'", "source_tables": ["current-terms", "current"]}, "evidence": "political party refers to party; Sherrod Brown is an official_full_name; official_full_name refers to first_name, last_name; 2005 refers to start = 2005"}
{"sample_id": 4762, "db_id": "legislator", "final": {"question": "List the full name of all the senior senators in year 2013.", "sql": "SELECT T2.official_full_name FROM 'current-terms' AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.state_rank = 'senior' AND T1.type = 'sen' AND T1.start LIKE '2013%'", "source_tables": ["current-terms", "current"]}, "evidence": "full name refers to official_full_name; senior refers to state_rank = 'senior'; senators refers to type = 'sen'; 2013 refers to start LIKE '2013%'"}
{"sample_id": 4763, "db_id": "legislator", "final": {"question": "What is the current official Youtube username of Chris Van Hollen?", "sql": "SELECT T2.youtube FROM current AS T1 INNER JOIN 'social-media' AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.official_full_name = 'Chris Van Hollen'", "source_tables": ["current", "social-media"]}, "evidence": "Youtube username refers to youtube; Chris Van Hollen is an official_full_name"}
{"sample_id": 4764, "db_id": "legislator", "final": {"question": "How many official social media does Mark Warner have?", "sql": "SELECT CASE WHEN T1.facebook IS NOT NULL THEN 1 END + CASE WHEN T1.instagram IS NOT NULL THEN 1 END + CASE WHEN T1.twitter IS NOT NULL THEN 1 END + CASE WHEN T1.youtube IS NOT NULL THEN 1 END AS COUNTSOCIAL FROM 'social-media' AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T2.first_name = 'Mark' AND T2.last_name = 'Warner'", "source_tables": ["current", "social-media"]}, "evidence": "official social media refers to facebook is not null, instagram is not null, twitter is not null, youtube is not null; Mark Warner is an official_full_name; official_full_name refers to first_name, last_name"}
{"sample_id": 4765, "db_id": "legislator", "final": {"question": "List the last name of all current legislators who live in California.", "sql": "SELECT T1.last_name FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state = 'CA' GROUP BY T1.last_name", "source_tables": ["current-terms", "current"]}, "evidence": "California refers to state = 'CA'"}
{"sample_id": 4766, "db_id": "legislator", "final": {"question": "List the full name of all current female senators.", "sql": "SELECT T2.first_name, T2.last_name FROM 'current-terms' AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.type = 'sen' AND T2.gender_bio = 'F' GROUP BY T2.ballotpedia_id", "source_tables": ["current-terms", "current"]}, "evidence": "full name refers to official_full_name; female refers to gender_bio = 'F'; senators refers to type = 'sen'"}
{"sample_id": 4767, "db_id": "legislator", "final": {"question": "What is the numeric ID of Chris Van Hollen on GovTrack.us?", "sql": "SELECT T2.govtrack FROM current AS T1 INNER JOIN 'social-media' AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.official_full_name = 'Chris Van Hollen'", "source_tables": ["current", "social-media"]}, "evidence": "Chris Van Hollen is an official_full_name; numeric ID on GovTrack.us refers to govtrack"}
{"sample_id": 4768, "db_id": "legislator", "final": {"question": "What is the current official Twitter handle of Roger F. Wicker?", "sql": "SELECT T2.twitter FROM current AS T1 INNER JOIN 'social-media' AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.official_full_name = 'Roger F. Wicker'", "source_tables": ["current", "social-media"]}, "evidence": "Twitter handle refers to twitter; Roger F. Wicker is an official_full_name"}
{"sample_id": 4769, "db_id": "legislator", "final": {"question": "List the full name of all past legislators that chose Pro-Administration as their political party in year 1791.", "sql": "SELECT T1.first_name, T1.last_name FROM historical AS T1 INNER JOIN 'historical-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Pro-Administration' AND CAST(T2.start AS DATE) <= 1791 AND CAST(T2.END AS DATE) >= 1791", "source_tables": ["historical-terms", "historical"]}, "evidence": "full name refers to official_full_name; chose Pro-Administration as their political party refers to party = 'Pro-Administration'; 1791 refers to start < = 1791 AND END > = 1791"}
{"sample_id": 4770, "db_id": "legislator", "final": {"question": "Provide the full name of all current female legislators that chose Republican as their political party.", "sql": "SELECT T1.first_name, T1.last_name FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Republican' AND T1.gender_bio = 'F' AND T2.END > DATE() GROUP BY T1.bioguide_id", "source_tables": ["current-terms", "current"]}, "evidence": "full name refers to official_full_name; official_full_name refers to first_name, last_name; female refers to gender_bio = 'F'; chose Republican as their political party refers to party = 'Republican'; current legislators refers to END > Date()"}
{"sample_id": 4771, "db_id": "legislator", "final": {"question": "What is the district number that Chris Van Hollen serving?", "sql": "SELECT T2.district FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Chris Van Hollen' AND T2.district IS NOT NULL GROUP BY T2.district", "source_tables": ["current-terms", "current"]}, "evidence": "Chris Van Hollen is an official_full_name"}
{"sample_id": 4772, "db_id": "legislator", "final": {"question": "How many times did Richard Durbin become a legislator in district 20?", "sql": "SELECT SUM(CASE WHEN T2.district = 20 THEN 1 ELSE 0 END) AS count FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Richard' AND T1.last_name = 'Durbin'", "source_tables": ["current-terms", "current"]}, "evidence": "Richard Durbin is an official_full_name;\u00a0 official_full_name refers to first_name, last_name; district 20 refers to district = 20"}
{"sample_id": 4773, "db_id": "legislator", "final": {"question": "Calculate the average number of current male legislators who chose Democrat from 2000 until 2021.", "sql": "SELECT CAST(COUNT(T1.bioguide_id) AS REAL) / 22 FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'M' AND CAST(T2.start AS DATE) >= 2000 AND CAST(T2.END AS DATE) <= 2021 AND T2.party = 'Democrat'", "source_tables": ["current-terms", "current"]}, "evidence": "male refers to gender_bio = 'M'; legislators who chose Democrat refers to party = 'Democrat'; from 2000 until 2021 refers to start > = 2000 AND END < = 2021; calculation = DIVIDE(COUNT(bioguide_id), 22)"}
{"sample_id": 4774, "db_id": "legislator", "final": {"question": "Calculate the percentage of the total number of current female legislators and past female legislators. State which one has the highest value.", "sql": "SELECT CAST(COUNT(CASE WHEN current.gender_bio = 'F' THEN current.bioguide_id ELSE NULL END) AS REAL) * 100 / ( SELECT COUNT(CASE WHEN historical.gender_bio = 'F' THEN historical.bioguide_id ELSE NULL END) FROM historical ) FROM current", "source_tables": ["current", "historical"]}, "evidence": "female refers to gender_bio = 'F'; calculation = MULTIPLY(DIVIDE(COUNT(current.gender_bio = 'F' THEN current.bioguide_id)), (COUNT(historical.gender_bio = 'F' then historical.bioguide_id)), 1.0); the highest value refers to MAX(calculation)"}
{"sample_id": 4775, "db_id": "legislator", "final": {"question": "Give the YouTube ID of the channel 'RepWassermanSchultz.'", "sql": "SELECT youtube_id FROM 'social-media' WHERE youtube = 'RepWassermanSchultz'", "source_tables": ["social-media"]}, "evidence": "RepWassermanSchultz refers to youtube"}
{"sample_id": 4776, "db_id": "legislator", "final": {"question": "What are the Facebook, Twitter and YouTube usernames of Adam Kinzinger?", "sql": "SELECT T2.facebook FROM current AS T1 INNER JOIN 'social-media' AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.official_full_name = 'Adam Kinzinger'", "source_tables": ["current", "social-media"]}, "evidence": "Facebook, Twitter and YouTube usernames refers to facebook, twitter, youtube; Adam Kinzinger is an official_full_name"}
{"sample_id": 4777, "db_id": "legislator", "final": {"question": "Which party does Christopher Henderson Clark belong to?", "sql": "SELECT T1.party FROM 'historical-terms' AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.first_name OR T2.middle_name OR T2.last_name = 'ChristopherHendersonClark'", "source_tables": ["historical-terms", "historical"]}, "evidence": "Christopher Henderson Clark is full name; full name refers to first_name, middle_name, last_name"}
{"sample_id": 4778, "db_id": "legislator", "final": {"question": "List the official full names of 10 legislators who have a YouTube account but no Instagram account.", "sql": "SELECT T2.official_full_name FROM 'social-media' AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T1.facebook IS NOT NULL AND (T1.instagram IS NULL OR T1.instagram = '') LIMIT 10", "source_tables": ["current", "social-media"]}, "evidence": "have a YouTube account but no Instagram account refers to facebook is not null and (instagram is null or instagram = '')"}
{"sample_id": 4779, "db_id": "legislator", "final": {"question": "Give the official full names of legislators representing Virginia.", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state = 'VA' GROUP BY T1.official_full_name", "source_tables": ["current-terms", "current"]}, "evidence": "Virginia refers to state = 'VA'"}
{"sample_id": 4780, "db_id": "legislator", "final": {"question": "Which historical legislators are members of the National Greenbacker party? Write their first and last names.", "sql": "SELECT T2.first_name, T2.last_name FROM 'historical-terms' AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.party = 'National Greenbacker'", "source_tables": ["historical-terms", "historical"]}, "evidence": "members of the National Greenbacker party refers to party = 'National Greenbacker'; first and last names refers to first_name, last_name"}
{"sample_id": 4781, "db_id": "legislator", "final": {"question": "Which legislator has the YouTube channel 'RoskamIL06?' Write the official full name.", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN 'social-media' AS T2 ON T2.bioguide = T1.bioguide_id WHERE T2.youtube = 'RoskamIL06'", "source_tables": ["current", "social-media"]}, "evidence": "YouTube channel 'RoskamIL06' refers to youtube = 'RoskamIL06';"}
{"sample_id": 4782, "db_id": "legislator", "final": {"question": "List the full names of 10 legislators who only have a Facebook account.", "sql": "SELECT T2.official_full_name FROM 'social-media' AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE (T1.youtube IS NULL OR T1.youtube = '') AND (T1.instagram IS NULL OR T1.instagram = '') AND (T1.twitter IS NULL OR T1.twitter = '') AND T1.facebook IS NOT NULL AND T1.facebook != ''", "source_tables": ["current", "social-media"]}, "evidence": "full names refers to official_full_name; only have a Facebook account refers to youtube is NULL or youtube = '', instagram is NULL or instagram = '', twitter is NULL or twitter = '', facebook is not NULL and facebook = ''"}
{"sample_id": 4783, "db_id": "legislator", "final": {"question": "Write the full names of junior ranked Republicans.", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Republican' AND T2.state_rank = 'junior' GROUP BY T1.official_full_name", "source_tables": ["current-terms", "current"]}, "evidence": "full name refers to official_full_name; junior refers to state_rank = 'junior'; Republicans refers to party = 'Republican'"}
{"sample_id": 4784, "db_id": "legislator", "final": {"question": "What is the contact URL of Claire McCaskill?", "sql": "SELECT T2.contact_form FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Claire McCaskill' GROUP BY T2.contact_form", "source_tables": ["current-terms", "current"]}, "evidence": "contact URL refers to contact_form; Claire McCaskill is an official_full_name"}
{"sample_id": 4785, "db_id": "legislator", "final": {"question": "Give the Wikipedia IDs of historical legislators who are Readjuster Democrats.", "sql": "SELECT T2.wikipedia_id FROM 'historical-terms' AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.party = 'Readjuster Democrat'", "source_tables": ["historical-terms", "historical"]}, "evidence": "Readjuster Democrats refers to party = 'Readjuster Democrat'"}
{"sample_id": 4786, "db_id": "legislator", "final": {"question": "List the full names of Republican legislators who have a nickname.", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Republican' AND T1.nickname_name IS NOT NULL GROUP BY T1.official_full_name", "source_tables": ["current-terms", "current"]}, "evidence": "full names refers to official_full_name; Republican refers to party = 'Republican'; nickname refers to nickname_name"}
{"sample_id": 4787, "db_id": "legislator", "final": {"question": "Which state did Veronica Grace Boland represent and which party is she affiliated?", "sql": "SELECT T2.state, T2.party FROM historical AS T1 INNER JOIN 'historical-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name OR T1.middle_name OR T1.last_name = 'VeronicaGraceBoland'", "source_tables": ["historical-terms", "historical"]}, "evidence": "Veronica Grace Boland is a full name; full name refers to first_name, middle_name, last_name; party affiliated refers to party"}
{"sample_id": 4788, "db_id": "legislator", "final": {"question": "How many historical legislators were born in 1973?", "sql": "SELECT COUNT(*) FROM historical WHERE CAST(birthday_bio AS date) = 1973", "source_tables": ["historical"]}, "evidence": "born in 1973 refers to birthday_bio = 1973"}
{"sample_id": 4789, "db_id": "legislator", "final": {"question": "What is the ratio of males and females among historical legislators?", "sql": "SELECT CAST(SUM(CASE WHEN gender_bio = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender_bio = 'F' THEN 1 ELSE 0 END) FROM historical", "source_tables": ["historical"]}, "evidence": "male refers to gender_bio = 'M'; female refers to gender_bio = 'F'; calculation = DIVIDE(COUNT(gender_bio = 'M' THEN bioguide_id), COUNT(gender_bio = 'F' THEN bioguide_id))"}
{"sample_id": 4790, "db_id": "legislator", "final": {"question": "Among the legislators who will end in 2009, how many are from the Republican party?", "sql": "SELECT 'END', party FROM 'current-terms' WHERE STRFTIME('%Y', 'END') = '2009' AND party = 'Republican'", "source_tables": ["current-terms"]}, "evidence": "the legislators who will end in 2009 refers to END 2009; from the Republican party refers to party = 'Republican'"}
{"sample_id": 4791, "db_id": "legislator", "final": {"question": "List the official full names and genders of legislators who have Collins as their last name.", "sql": "SELECT official_full_name, gender_bio FROM current WHERE last_name = 'Collins'", "source_tables": ["current"]}, "evidence": "genders refers to gender_bio; Collins is a last_name"}
{"sample_id": 4792, "db_id": "legislator", "final": {"question": "How many percent of senators were from class 1?", "sql": "SELECT CAST(SUM(CASE WHEN class = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM 'historical-terms' WHERE type = 'sen'", "source_tables": ["historical-terms"]}, "evidence": "senator refers to type = 'sen'; class 1 refers to class = 1; calculation = MULTIPLY(DIVIDE(COUNT(class = 1 then bioguide), COUNT(bioguide)), 1.0)"}
{"sample_id": 4793, "db_id": "legislator", "final": {"question": "Provide the current legislators' official full names who are from the Independent party.", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Independent' GROUP BY T1.official_full_name", "source_tables": ["current-terms", "current"]}, "evidence": "Independent party refers to party = 'Independent'"}
{"sample_id": 4794, "db_id": "legislator", "final": {"question": "How many years had Jr. John Conyers served in total?", "sql": "SELECT SUM(CAST(T2.END - T2.start AS DATE)) AS sum FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'John Conyers, Jr.'", "source_tables": ["current-terms", "current"]}, "evidence": "Jr. John Conyers is an official_full_name; years served refers to SUM(SUBTRACT(END, start))"}
{"sample_id": 4795, "db_id": "legislator", "final": {"question": "How old was Jr. F. James Sensenbrenner when he first started as a legislator?", "sql": "SELECT CAST(MIN(T2.start) - T1.birthday_bio AS DATE) AS AGE FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'F. James Sensenbrenner, Jr.'", "source_tables": ["current-terms", "current"]}, "evidence": "Jr. F. James Sensenbrenner is an official_full_name; How old refers to SUBTRACT(MIN(start), birthday_bio)"}
{"sample_id": 4796, "db_id": "legislator", "final": {"question": "List the full names, religions, and parties of legislators who have served in Maine.", "sql": "SELECT T1.official_full_name, T2.relation, T2.party FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state = 'ME' GROUP BY T1.official_full_name, T2.relation, T2.party", "source_tables": ["current-terms", "current"]}, "evidence": "full names refers to official_full_name; religion refers to religion_bio; Maine refers to state = \"ME\""}
{"sample_id": 4797, "db_id": "legislator", "final": {"question": "Among legislators who have an Instagram account, list down their full names and nicknames who have a Thomas ID of less than 1000.", "sql": "SELECT T1.official_full_name, T1.nickname_name FROM current AS T1 INNER JOIN 'social-media' AS T2 ON T2.bioguide = T1.bioguide_id WHERE T2.instagram IS NOT NULL AND T1.thomas_id < 1000", "source_tables": ["current", "social-media"]}, "evidence": "have an Instagram account refers to instagram is not null; full names refers to official_full_name; nicknames refers to nickname_name; Thomas ID of less than 1000 refers to thomas_id < 1000;"}
{"sample_id": 4798, "db_id": "legislator", "final": {"question": "When was the last serving date of Matt Salmon?", "sql": "SELECT T1.END FROM 'historical-terms' AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.official_full_name = 'Matt Salmon'", "source_tables": ["historical-terms", "historical"]}, "evidence": "Matt Salmon is an official_full_name"}
{"sample_id": 4799, "db_id": "legislator", "final": {"question": "Among the legislators who have served in the U.S. House, provide the party and the state of the legislators who were born in 1738.", "sql": "SELECT T1.party, T1.state FROM 'historical-terms' AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.house_history_id IS NOT NULL AND T2.birthday_bio LIKE '%1738%'", "source_tables": ["historical-terms", "historical"]}, "evidence": "have served in the U.S. House refers to house_history_id IS NOT NULL; born in 1738 refers to birthday_bio = 1738"}
{"sample_id": 4800, "db_id": "legislator", "final": {"question": "List the IDs and full names of legislators from the Liberal Republican party.", "sql": "SELECT T2.bioguide_id, T2.first_name, T2.last_name FROM 'historical-terms' AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.party = 'Liberal Republican'", "source_tables": ["historical-terms", "historical"]}, "evidence": "full_name refers to first_name, last_name; from the Liberal Republican party refers to party = 'Liberal Republican'"}
{"sample_id": 4801, "db_id": "legislator", "final": {"question": "Among the legislators who started a term on 2nd December 1793, how many of them were males?", "sql": "SELECT COUNT(T1.bioguide_id) FROM historical AS T1 INNER JOIN 'historical-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'M' AND T2.start = '1793-12-02'", "source_tables": ["historical-terms", "historical"]}, "evidence": "started a term on 2nd December 1793 refers to start = '1793-12-02'; male refers to gender_bio = 'M'"}
{"sample_id": 4802, "db_id": "legislator", "final": {"question": "Compare the number of legislators who started the term in 1875 and 2005.", "sql": "SELECT SUM(CASE WHEN 'current-terms'.start LIKE '2005%' THEN 1 ELSE 0 END) - ( SELECT SUM(CASE WHEN start LIKE '1875%' THEN 1 ELSE 0 END) FROM 'historical-terms' ) FROM 'current-terms'", "source_tables": ["current-terms", "historical-terms"]}, "evidence": "started the term in 1875 refers to start LIKE '1875%'; started the term in 2005 refers to start LIKE '2005%'"}
{"sample_id": 4803, "db_id": "legislator", "final": {"question": "List the full names, Twitter IDs, and YouTube IDs of legislators who have Richard as their first name.", "sql": "SELECT T2.official_full_name, T1.twitter_id, T1.youtube_id FROM 'social-media' AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T2.first_name = 'Richard'", "source_tables": ["current", "social-media"]}, "evidence": "full names refers to official_full_name; Richard as their first name refers to first_name = 'Richard'"}
{"sample_id": 4804, "db_id": "legislator", "final": {"question": "Provide the start date, end date, and party of Pearl Peden Oldfield.", "sql": "SELECT T2.start, T2.'end', T2.party FROM historical AS T1 INNER JOIN 'historical-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Pearl' AND T1.middle_name = 'Peden' AND T1.last_name = 'Oldfield'", "source_tables": ["historical-terms", "historical"]}, "evidence": "start date refers to start; end date refers to end date; Pearl Peden Oldfield refers to official_full_name; official_full_name refers to first_name, middle_name, last_name"}
{"sample_id": 4805, "db_id": "legislator", "final": {"question": "What is the birthday of Amy Klobuchar?", "sql": "SELECT birthday_bio FROM current WHERE first_name = 'Amy' AND last_name = 'Klobuchar'", "source_tables": ["current"]}, "evidence": "birthday refers to birthday_bio; Amy Klobuchar refers to full name; full name refers to first_name, last_name"}
{"sample_id": 4806, "db_id": "legislator", "final": {"question": "How many legislators have not been registered in Federal Election Commission data?", "sql": "SELECT COUNT(*) FROM current WHERE fec_id IS NULL OR fec_id = ''", "source_tables": ["current"]}, "evidence": "have not been registered in Federal Election Commission data refers to fec_id is null OR fec_id = ''"}
{"sample_id": 4807, "db_id": "legislator", "final": {"question": "State the number of female legislators in the list.", "sql": "SELECT COUNT(*) FROM current WHERE gender_bio = 'F'", "source_tables": ["current"]}, "evidence": "female refers to gender_bio = 'F'"}
{"sample_id": 4808, "db_id": "legislator", "final": {"question": "Give the full name of legislators who have accounts on OpenSecrets.org.", "sql": "SELECT COUNT(*) FROM current WHERE opensecrets_id IS NOT NULL AND opensecrets_id <> ''", "source_tables": ["current"]}, "evidence": "full name refers to first_name, last_name; have accounts on OpenSecrets.org refers to opensecrets_id IS NOT NULL AND opensecrets_id <> ''"}
{"sample_id": 4809, "db_id": "legislator", "final": {"question": "What is the middle name of the legislator whose birthday was on 8/24/1956?", "sql": "SELECT middle_name FROM current WHERE birthday_bio = '1956-08-24'", "source_tables": ["current"]}, "evidence": "birthday was on 8/24/1956 refers to birthday_bio = '1956-08-24'"}
{"sample_id": 4810, "db_id": "legislator", "final": {"question": "How many legislators hold the title \"Majority Leader\"?", "sql": "SELECT COUNT(bioguide) FROM 'current-terms' WHERE title = 'Majority Leader'", "source_tables": ["current-terms"]}, "evidence": ""}
{"sample_id": 4811, "db_id": "legislator", "final": {"question": "What is the title of legislator whose birthday on 2/20/1942?", "sql": "SELECT T2.title FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio = '1942-02-20' GROUP BY T2.title", "source_tables": ["current-terms", "current"]}, "evidence": "birthday on 2/20/1942 refers to birthday_bio = '1942-02-20'"}
{"sample_id": 4812, "db_id": "legislator", "final": {"question": "What is the gender of the legislator whose address at 317 Russell Senate Office Building Washington DC 20510?", "sql": "SELECT T1.gender_bio FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.address = '317 Russell Senate Office Building Washington DC 20510'", "source_tables": ["current-terms", "current"]}, "evidence": "gender refers to gender_bio"}
{"sample_id": 4813, "db_id": "legislator", "final": {"question": "List out the first name of legislators who are senior Senator.", "sql": "SELECT T1.first_name FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state_rank = 'senior' GROUP BY T1.first_name", "source_tables": ["current-terms", "current"]}, "evidence": "senior refers to state_rank = 'senior'; only senator has this value 'senior'"}
{"sample_id": 4814, "db_id": "legislator", "final": {"question": "Among male legislators, state number of the legislators who are not the senator.", "sql": "SELECT COUNT(T3.state) FROM ( SELECT T2.state FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'M' AND (T2.class IS NULL OR T2.class = '') GROUP BY T2.state ) T3", "source_tables": ["current-terms", "current"]}, "evidence": "male refers to gender_bio = M; not the senator refers to class IS NULL OR class = ''"}
{"sample_id": 4815, "db_id": "legislator", "final": {"question": "Calculate the percentage of legislators who are Senator and were born in 1964.", "sql": "SELECT CAST(SUM(CASE WHEN T2.class IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio LIKE '%1964%'", "source_tables": ["current-terms", "current"]}, "evidence": "are senator refers to class IS NOT NULL; born in 1964 refers to birthday_bio = 1964; calculation = MULTIPLY(DIVIDE(COUNT(class IS NOT NULL THEN bioguide_id), COUNT(bioguide_id)), 1.0)"}
{"sample_id": 4816, "db_id": "legislator", "final": {"question": "Calculate the percentage of legislators who are not Senator and were born before 1975.", "sql": "SELECT CAST(COUNT(CASE WHEN T2.class IS NULL THEN T1.bioguide_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bioguide_id) FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE CAST(T1.birthday_bio AS DATE) <= 1975", "source_tables": ["current-terms", "current"]}, "evidence": "not Senator refers to class is NULL; born before 1975 refers to birthday_bio < = 1975; calculation = MULTIPLY(DIVIDE(COUNT(class IS NULL THEN bioguide_id), COUNT(bioguide_id)), 1.0)"}
{"sample_id": 4817, "db_id": "legislator", "final": {"question": "What is the twitter name of the legislator whose birthday was on 5/27/1946?", "sql": "SELECT T2.twitter FROM current AS T1 INNER JOIN 'social-media' AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.birthday_bio = '1946-05-27'", "source_tables": ["current", "social-media"]}, "evidence": "birthday on 5/27/1946 refers to birthday_bio = '1946-05-27'"}
{"sample_id": 4818, "db_id": "legislator", "final": {"question": "State the opensecrets_id of the legislator whose YouTube name is Bluetkemeyer.", "sql": "SELECT T1.opensecrets_id FROM current AS T1 INNER JOIN 'social-media' AS T2 ON T2.bioguide = T1.bioguide_id WHERE T2.youtube = 'BLuetkemeyer'", "source_tables": ["current", "social-media"]}, "evidence": "Bluetkemeyer refers to youtube"}
{"sample_id": 4819, "db_id": "legislator", "final": {"question": "Mention the username of Facebook of Ralph Abraham.", "sql": "SELECT T2.facebook FROM current AS T1 INNER JOIN 'social-media' AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.first_name = 'Ralph' AND T1.last_name = 'Abraham'", "source_tables": ["current", "social-media"]}, "evidence": "username of Facebook refers to facebook; Ralph Abraham is an official_full_name; official_full_name refers to first_name, last_name"}
{"sample_id": 4820, "db_id": "legislator", "final": {"question": "What is the first name of the legislator whose address at 1005 Longworth HOB; Washington DC 20515-1408?", "sql": "SELECT T1.first_name FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.address = '1005 Longworth HOB Washington DC 20515-1408' GROUP BY T1.first_name", "source_tables": ["current-terms", "current"]}, "evidence": ""}
{"sample_id": 4821, "db_id": "legislator", "final": {"question": "What is the Instagram name of the legislator whose birthday was on 8/24/1952?", "sql": "SELECT T1.instagram FROM 'social-media' AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T2.birthday_bio = '1952-08-24'", "source_tables": ["current", "social-media"]}, "evidence": "Instagram name refers to instagram; birthday on 8/24/1952 refers to birthday_bio = '1952-08-24'"}
{"sample_id": 4822, "db_id": "legislator", "final": {"question": "State number of legislators who are not the senator among female legislators.", "sql": "SELECT COUNT(*) FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' AND (T2.class IS NULL OR T2.class = '')", "source_tables": ["current-terms", "current"]}, "evidence": "not the senator refers to class IS NULL OR class = ''; female refers to gender_bio = 'F';"}
{"sample_id": 4823, "db_id": "legislator", "final": {"question": "Give the religion of the legislator whose YouTube name is MaxineWaters.", "sql": "SELECT T2.religion_bio FROM 'social-media' AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T1.youtube = 'MaxineWaters'", "source_tables": ["current", "social-media"]}, "evidence": "MaxineWaters relates to youtube"}
{"sample_id": 4824, "db_id": "legislator", "final": {"question": "How many minority leaders have not been registered in Federal Election Commission data?", "sql": "SELECT COUNT(*) FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.title = 'Minority Leader' AND (T1.fec_id IS NULL OR T1.fec_id = '')", "source_tables": ["current-terms", "current"]}, "evidence": "minority leaders is a title; have not been registered in Federal Election Commission data refers to fec_id IS NULL OR fec_id = ''"}
{"sample_id": 4825, "db_id": "legislator", "final": {"question": "How many of the legislators are male?", "sql": "SELECT COUNT(*) FROM current WHERE gender_bio = 'M'", "source_tables": ["current"]}, "evidence": "male refers to gender_bio = 'M';"}
{"sample_id": 4826, "db_id": "legislator", "final": {"question": "Provide the facebook ID of the facebook account named \"RepWilson\".", "sql": "SELECT facebook_id FROM 'social-media' WHERE facebook = 'RepWilson'", "source_tables": ["social-media"]}, "evidence": ""}
{"sample_id": 4827, "db_id": "legislator", "final": {"question": "What is the total number of legislators with \"John\" as their first name?", "sql": "SELECT COUNT(*) FROM current WHERE first_name = 'John'", "source_tables": ["current"]}, "evidence": ""}
{"sample_id": 4828, "db_id": "legislator", "final": {"question": "Give the district numbers with an Anti-Administration party.", "sql": "SELECT district FROM 'historical-terms' WHERE party = 'Anti-Administration' GROUP BY district", "source_tables": ["historical-terms"]}, "evidence": ""}
{"sample_id": 4829, "db_id": "legislator", "final": {"question": "List the full name of legislators whose born in 1960.", "sql": "SELECT official_full_name FROM current WHERE birthday_bio LIKE '1960%'", "source_tables": ["current"]}, "evidence": "full name refers to official_full_name; born in 1960 refers to birthday_bio like '1960%';"}
{"sample_id": 4830, "db_id": "legislator", "final": {"question": "What is the google entity ID of Benjamin Hawkins?", "sql": "SELECT google_entity_id_id FROM historical WHERE first_name = 'Benjamin' AND last_name = 'Hawkins'", "source_tables": ["historical"]}, "evidence": ""}
{"sample_id": 4831, "db_id": "legislator", "final": {"question": "Who is the Pro-Administration senator that runs from March 4, 1789 to December 31, 1791?", "sql": "SELECT T1.first_name, T1.last_name FROM historical AS T1 INNER JOIN 'historical-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Pro-Administration' AND T2.start = '1789-03-04' AND T2.end = '1791-12-31'", "source_tables": ["historical-terms", "historical"]}, "evidence": "Pro-Administration refers to party = 'Pro-Administration'; senator refers to type = 'sen'; runs from March 4, 1789 refers to start = '1789-03-04'; runs to refers to end = '1791-12-31';"}
{"sample_id": 4832, "db_id": "legislator", "final": {"question": "What are the first and last name of the representatives of the house in district 9?", "sql": "SELECT T2.first_name, T2.last_name FROM 'historical-terms' AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.district = 9", "source_tables": ["historical-terms", "historical"]}, "evidence": "representatives refers to type = 'rep';"}
{"sample_id": 4833, "db_id": "legislator", "final": {"question": "Give the full name of the legislators with an independent party.", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Independent' GROUP BY T1.official_full_name", "source_tables": ["current-terms", "current"]}, "evidence": "full name refers to official_full_name;"}
{"sample_id": 4834, "db_id": "legislator", "final": {"question": "List down the open secrets and thomas ID of the democrat senators of New Jersey.", "sql": "SELECT T1.opensecrets_id, T1.thomas_id FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.type = 'sen' AND T2.state = 'NJ' GROUP BY T1.opensecrets_id, T1.thomas_id", "source_tables": ["current-terms", "current"]}, "evidence": "open secrets refers to opensecrets_id; democrat refers to party = democrat; senators refers to type = 'sen'; New Jersey refers to state = 'NJ';"}
{"sample_id": 4835, "db_id": "legislator", "final": {"question": "Provide the google entity ID of the senators in New York.", "sql": "SELECT T1.google_entity_id_id FROM historical AS T1 INNER JOIN 'historical-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.type = 'sen' AND T2.state = 'NY'", "source_tables": ["historical-terms", "historical"]}, "evidence": "google entity ID refers to google_entity_id_id; senators refers to type = 'sen'; New York refers to state = 'NY';"}
{"sample_id": 4836, "db_id": "legislator", "final": {"question": "Give the religion of the legislator with RSS url of http://www.corker.senate.gov/public/index.cfm/rss/feed.", "sql": "SELECT T1.religion_bio FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.rss_url = 'http://www.corker.senate.gov/public/index.cfm/rss/feed' GROUP BY T1.religion_bio", "source_tables": ["current-terms", "current"]}, "evidence": "religion refers to religion_bio;"}
{"sample_id": 4837, "db_id": "legislator", "final": {"question": "What is the party of the legislator named Susan M. Collins?", "sql": "SELECT T2.party FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Susan M. Collins' GROUP BY T2.party", "source_tables": ["current-terms", "current"]}, "evidence": "legislator's name refers to offical_full_name;"}
{"sample_id": 4838, "db_id": "legislator", "final": {"question": "List down the district number of the representative of the house named Jonathan Grout.", "sql": "SELECT T2.district FROM historical AS T1 INNER JOIN 'historical-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.last_name = 'Grout' AND T1.first_name = 'Jonathan' AND T2.type = 'rep'", "source_tables": ["historical-terms", "historical"]}, "evidence": "district number refers to district; representative of the house refers to type = 'rep';"}
{"sample_id": 4839, "db_id": "legislator", "final": {"question": "What is the party and state of the legislator that has an open secrets ID of N00003689 and thomas ID of 186?", "sql": "SELECT T2.party, T2.state FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.opensecrets_id = 'N00003689' AND T1.thomas_id = 186 GROUP BY T2.party, T2.state", "source_tables": ["current-terms", "current"]}, "evidence": ""}
{"sample_id": 4840, "db_id": "legislator", "final": {"question": "Provide the full name and birth date of the legislator with a contact form of http://www.brown.senate.gov/contact/.", "sql": "SELECT T1.official_full_name, T1.birthday_bio FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.contact_form = 'http://www.brown.senate.gov/contact/'", "source_tables": ["current-terms", "current"]}, "evidence": "full name refers to official_full_name; birth date refers to birthday_bio;"}
{"sample_id": 4841, "db_id": "legislator", "final": {"question": "Give the state and type of term of the legislator with the google entity ID of kg:/m/02pyzk.", "sql": "SELECT T2.state, T2.type FROM historical AS T1 INNER JOIN 'historical-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.google_entity_id_id = 'kg:/m/02pyzk'", "source_tables": ["historical-terms", "historical"]}, "evidence": "type of term refers to type; google entity ID refers to google_entity_id_id; google_entity_id_id = 'kg:/m/02pyzk';"}
{"sample_id": 4913, "db_id": "olympics", "final": {"question": "Please list the names of all the Olympic games that John Aalberg has taken part in.", "sql": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'John Aalberg'", "source_tables": ["games_competitor", "games", "person"]}, "evidence": "name of the Olympic games refers to games_name;"}
{"sample_id": 4914, "db_id": "olympics", "final": {"question": "What was the name of the Olympic game that John Aalberg took part in when he was 31?", "sql": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'John Aalberg' AND T2.age = 31", "source_tables": ["games_competitor", "games", "person"]}, "evidence": "when he was 31 refers to age = 31; name of the Olympic games refers to games_name;"}
{"sample_id": 4915, "db_id": "olympics", "final": {"question": "When John Aalberg took part in the 1994 Winter Olympic Game, how old was he?", "sql": "SELECT T2.age FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'John Aalberg' AND T1.games_name = '1994 Winter'", "source_tables": ["games_competitor", "games", "person"]}, "evidence": "how old was he refers to age; 1994 Winter refers to games_name = '1994 Winter';"}
{"sample_id": 4916, "db_id": "olympics", "final": {"question": "How many Olympic competitors are from Finland?", "sql": "SELECT COUNT(T1.person_id) FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id WHERE T2.region_name = 'Finland'", "source_tables": ["person_region", "noc_region"]}, "evidence": "competitors refer to person_id; from Finland refers to region_name = 'Finland';"}
{"sample_id": 4917, "db_id": "olympics", "final": {"question": "Please list the names of all the Olympic competitors from Finland.", "sql": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Finland'", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": "names of competitors refer to full_name; from Finland refers to region_name = 'Finland';"}
{"sample_id": 4918, "db_id": "olympics", "final": {"question": "The Olympic competitor John Aalberg is from which region?", "sql": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'John Aalberg'", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": "from which region refers to region_name;"}
{"sample_id": 4919, "db_id": "olympics", "final": {"question": "What is the NOC code of the region where the tallest male Olympic competitor is from?", "sql": "SELECT T1.noc FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.gender = 'M' ORDER BY T3.height DESC LIMIT 1", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": "NOC code of the region refers to noc; male refers to gender = 'M'; the tallest refers to MAX(height);"}
{"sample_id": 4920, "db_id": "olympics", "final": {"question": "Among all the Olympic competitors from Finland, how many of them are female?", "sql": "SELECT COUNT(T3.id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Finland' AND T3.gender = 'F'", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": "competitors from Finland refer to id where region_name = 'Finland'; female refers to gender = 'F';"}
{"sample_id": 4921, "db_id": "olympics", "final": {"question": "In which city was the 1992 Summer Olympic Games held?", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1992 Summer'", "source_tables": ["city", "games", "games_city"]}, "evidence": "In which city refers to city_name; 1992 Summer Olympic Games refer to games_name = '1992 Summer';"}
{"sample_id": 4922, "db_id": "olympics", "final": {"question": "Please list the names of the Olympic games that were held in London.", "sql": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London'", "source_tables": ["city", "games", "games_city"]}, "evidence": "held in London refers to city_name = 'London';"}
{"sample_id": 4923, "db_id": "olympics", "final": {"question": "In which year did London hold its earliest Olympic game?", "sql": "SELECT T3.games_year FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London' ORDER BY T3.games_year LIMIT 1", "source_tables": ["city", "games", "games_city"]}, "evidence": "In which year refers to games_year; London refers to city_name = 'London'; earliest Olympic game refers to MIN(games_year);"}
{"sample_id": 4924, "db_id": "olympics", "final": {"question": "For how many times has London held the Olympic games?", "sql": "SELECT COUNT(T1.games_id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'London'", "source_tables": ["city", "games_city"]}, "evidence": "London refers to city_name = 'London'; how many times refer to COUNT(games_id);"}
{"sample_id": 4925, "db_id": "olympics", "final": {"question": "What is the average height of the male Olympic competitors from Finland?", "sql": "SELECT AVG(T3.height) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Finland' AND T3.gender = 'M'", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": "DIVIDE(SUM(height), COUNT(id)) where region_name = 'Finland' and gender = 'M';"}
{"sample_id": 4926, "db_id": "olympics", "final": {"question": "Among the competitors of the 1994 Winter Olympic Game, what is the percentage of those from Finland?", "sql": "SELECT CAST(COUNT(CASE WHEN T5.region_name = 'Finland' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T3.id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id INNER JOIN person_region AS T4 ON T3.id = T4.person_id INNER JOIN noc_region AS T5 ON T4.region_id = T5.id WHERE T1.games_name = '1994 Winter'", "source_tables": ["noc_region", "person", "person_region", "games_competitor", "games"]}, "evidence": "DIVIDE(COUNT(id where region_name = 'Finland'), COUNT(id)) as percentage where games_name = '1994 Winter';"}
{"sample_id": 4927, "db_id": "olympics", "final": {"question": "Which sport does the event \"Shooting Women's Trap\" belong to?", "sql": "SELECT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T2.event_name LIKE 'Shooting Women%s Trap'", "source_tables": ["event", "sport"]}, "evidence": "sport refers to sport_name; event \"Shooting Women's Trap\" refers to event_name = 'Shooting Women''s Trap';"}
{"sample_id": 4928, "db_id": "olympics", "final": {"question": "Which city was the host of 1936 Winter Olympic Games?", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1936 Winter'", "source_tables": ["city", "games", "games_city"]}, "evidence": "Which city refers to city_name; 1936 Winter Olympic refers to games_name = '1936 Winter';"}
{"sample_id": 4929, "db_id": "olympics", "final": {"question": "How many Olympic Games has London hosted?", "sql": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London'", "source_tables": ["city", "games", "games_city"]}, "evidence": "London refers to city_name = 'London';"}
{"sample_id": 4930, "db_id": "olympics", "final": {"question": "Tell the number of swimming related events.", "sql": "SELECT COUNT(T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Swimming'", "source_tables": ["event", "sport"]}, "evidence": "swimming refers to sport_name = 'Swimming';"}
{"sample_id": 4931, "db_id": "olympics", "final": {"question": "For Peter Kohnke, show the name of his/her region.", "sql": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Peter Kohnke'", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": "name of his/her region refers to region_name;"}
{"sample_id": 4932, "db_id": "olympics", "final": {"question": "Which game has Jessica Carolina Aguilera Aguilera participated in? Give the id of the game.", "sql": "SELECT T2.games_id FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Jessica Carolina Aguilera Aguilera'", "source_tables": ["games_competitor", "person"]}, "evidence": "id of the game refers to games_id;"}
{"sample_id": 4933, "db_id": "olympics", "final": {"question": "Show the name of the sport with the most events.", "sql": "SELECT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id GROUP BY T1.sport_name ORDER BY COUNT(T2.event_name) DESC LIMIT 1", "source_tables": ["event", "sport"]}, "evidence": "name of the sport with the most events refers to sport_name where MAX(COUNT(id));"}
{"sample_id": 4934, "db_id": "olympics", "final": {"question": "Give the name of the tallest athlete from Sweden.", "sql": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Sweden' ORDER BY T3.height DESC LIMIT 1", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": "the tallest athlete refers to id where MAX(height); from Sweden refers to region_name = 'Sweden'; name refers to full_name;"}
{"sample_id": 4935, "db_id": "olympics", "final": {"question": "How many athletes in the database are from Guatemala?", "sql": "SELECT COUNT(T1.person_id) FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id WHERE T2.region_name = 'Guatemala'", "source_tables": ["person_region", "noc_region"]}, "evidence": "from Guatemala refers to region_name = 'Guatemala';"}
{"sample_id": 4936, "db_id": "olympics", "final": {"question": "Who has participated in the most Olympic Games in the database?", "sql": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id GROUP BY T2.person_id ORDER BY COUNT(T2.person_id) DESC LIMIT 1", "source_tables": ["games_competitor", "person"]}, "evidence": "Who refers to full_name; participated in the most Olympic Games refers to MAX(COUNT(games_id));"}
{"sample_id": 4937, "db_id": "olympics", "final": {"question": "Show the name of the competitor id 90991.", "sql": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T2.id = 90991", "source_tables": ["games_competitor", "person"]}, "evidence": "name of the competitor refers to full_name;"}
{"sample_id": 4938, "db_id": "olympics", "final": {"question": "How many competitor ids does Martina Kohlov have?", "sql": "SELECT COUNT(T2.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Martina Kohlov'", "source_tables": ["games_competitor", "person"]}, "evidence": ""}
{"sample_id": 4939, "db_id": "olympics", "final": {"question": "Calculate the bmi of the competitor id 147420.", "sql": "SELECT CAST(T1.weight AS REAL) / (T1.height * T1.height) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T2.id = 147420", "source_tables": ["games_competitor", "person"]}, "evidence": "DIVIDE(weight), MULTIPLY(height, height) where id = 147420;"}
{"sample_id": 4940, "db_id": "olympics", "final": {"question": "What is the percentage of male athletes from Estonia?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'M' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Estonia'", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": "DIVIDE(COUNT(id where gender = 'M'), COUNT(id)) as percentage where region_name = 'Estonia';"}
{"sample_id": 4941, "db_id": "olympics", "final": {"question": "Who is the youngest person who participated in the Olympics?", "sql": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age LIMIT 1", "source_tables": ["games_competitor", "person"]}, "evidence": "Who is the youngest person refers to full_name where MIN(age);"}
{"sample_id": 4942, "db_id": "olympics", "final": {"question": "How many 24 years old competitors competed in Men's Basketball?", "sql": "SELECT COUNT(T2.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN event AS T3 ON T1.event_id = T3.id WHERE T3.event_name LIKE 'Basketball Men%s Basketball' AND T2.age = 24", "source_tables": ["event", "games_competitor", "competitor_event"]}, "evidence": "24 years old competitors refer to id where age = 24; Men's Basketball refers to event_name = 'Basketball Men''s Basketball';"}
{"sample_id": 4943, "db_id": "olympics", "final": {"question": "What are the names of the events under Art Competitions?", "sql": "SELECT T2.event_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Art Competitions'", "source_tables": ["event", "sport"]}, "evidence": "Art Competitions refer to sport_name = 'Art Competitions'; names of events refers to event_name;"}
{"sample_id": 4944, "db_id": "olympics", "final": {"question": "How many gold medals does Henk Jan Zwolle have?", "sql": "SELECT COUNT(T1.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T1.full_name = 'Henk Jan Zwolle' AND T4.medal_name = 'Gold'", "source_tables": ["games_competitor", "person", "medal", "competitor_event"]}, "evidence": "gold medals refer to medal_name = 'Gold';"}
{"sample_id": 4945, "db_id": "olympics", "final": {"question": "What is the name of the event where competitors received the most gold medals?", "sql": "SELECT T2.event_name FROM competitor_event AS T1 INNER JOIN event AS T2 ON T1.event_id = T2.id INNER JOIN medal AS T3 ON T1.medal_id = T3.id WHERE T3.medal_name = 'Gold' GROUP BY T2.id ORDER BY COUNT(T1.event_id) DESC LIMIT 1", "source_tables": ["event", "medal", "competitor_event"]}, "evidence": "received the most gold medals refers to MAX(COUNT(medal_name = 'Gold'));"}
{"sample_id": 4946, "db_id": "olympics", "final": {"question": "How many athletes are from Australia?", "sql": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Australia'", "source_tables": ["person_region", "noc_region"]}, "evidence": "from Australia refer region_name = 'Australia';"}
{"sample_id": 4947, "db_id": "olympics", "final": {"question": "Which cities hosted at least 3 Olympic games?", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id GROUP BY T2.id HAVING COUNT(T1.games_id) >= 3", "source_tables": ["city", "games_city"]}, "evidence": "cities refer to city_name; hosted at least 3 Olympic games refers to COUNT(games_id) > = 3;"}
{"sample_id": 4948, "db_id": "olympics", "final": {"question": "How many Summer games were held in Stockholm?", "sql": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Stockholm' AND T3.season = 'Summer'", "source_tables": ["city", "games", "games_city"]}, "evidence": "Summer games refer to id where season = 'Summer'; in Stockholm refers to city_name = 'Stockholm';"}
{"sample_id": 4949, "db_id": "olympics", "final": {"question": "Which region do most of the athletes are from?", "sql": "SELECT T2.region_name FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id GROUP BY T2.region_name ORDER BY COUNT(T1.person_id) DESC LIMIT 1", "source_tables": ["person_region", "noc_region"]}, "evidence": "region refers to region_name; most of the athletes refer to MAX(COUNT(person_id));"}
{"sample_id": 4950, "db_id": "olympics", "final": {"question": "Where was the first Olympic game held?", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id ORDER BY T3.games_year LIMIT 1", "source_tables": ["city", "games", "games_city"]}, "evidence": "Where it was held refers to city_name; the first Olympic game refers to id where MIN(games_year);"}
{"sample_id": 4951, "db_id": "olympics", "final": {"question": "What is the name of the game in which the oldest Olympian has ever participated?", "sql": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id ORDER BY T2.age LIMIT 1", "source_tables": ["games_competitor", "games"]}, "evidence": "the oldest Olympian refers to id where MAX(age); name of the game refers to games_name;"}
{"sample_id": 4952, "db_id": "olympics", "final": {"question": "How many athletes competed in the 1992 Summer Olympics?", "sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1928 Summer'", "source_tables": ["games_competitor", "games"]}, "evidence": "1992 Summer Olympics refer to games_name = '1928 Summer';"}
{"sample_id": 4953, "db_id": "olympics", "final": {"question": "How many Olympic events did Michael Phelps II join in total? Find the percentage of the events where he won a gold medal.", "sql": "SELECT COUNT(T3.event_id) , CAST(COUNT(CASE WHEN T4.id = '1' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T4.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T1.full_name = 'Michael Fred Phelps, II'", "source_tables": ["games_competitor", "person", "medal", "competitor_event"]}, "evidence": "DIVIDE(COUNT(event_id where medal_name = 'Gold'), COUNT(event_id)) as percentage where full_name = 'Michael Fred Phelps, II';"}
{"sample_id": 4954, "db_id": "olympics", "final": {"question": "In the Winter and Summer Olympics of 1988, which game has the most number of competitors? Find the difference of the number of competitors between the two games.", "sql": "SELECT P1 , ( SELECT MAX(P2) - MIN(P2) FROM ( SELECT COUNT(T2.person_id) AS P2 FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name IN ('1988 Winter', '1988 Summer') GROUP BY T1.season ) ORDER BY P2 DESC LIMIT 1 ) FROM ( SELECT T1.season AS P1, COUNT(T2.person_id) AS P2 FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name IN ('1988 Winter', '1988 Summer') GROUP BY T1.season ) ORDER BY P2 DESC LIMIT 1", "source_tables": ["games_competitor", "games"]}, "evidence": "the most number of competitors refer to MAX(COUNT(person_id)); SUBTRACT(COUNT(person_id where games_name = '1988 Summer'), COUNT(person_id where games_name = '1988 Winter'));"}
{"sample_id": 4955, "db_id": "olympics", "final": {"question": "What age of the competitors is the most numerous?", "sql": "SELECT age FROM games_competitor GROUP BY age ORDER BY COUNT(person_id) DESC LIMIT 1", "source_tables": ["games_competitor"]}, "evidence": "age is the most numerous refers to age where MAX(COUNT(person_id));"}
{"sample_id": 4956, "db_id": "olympics", "final": {"question": "In which cities beginning with the letter M have the Olympic Games been held?", "sql": "SELECT city_name FROM city WHERE city_name LIKE 'M%'", "source_tables": ["city"]}, "evidence": "cities beginning with the letter M refer to city_name LIKE 'M%';"}
{"sample_id": 4957, "db_id": "olympics", "final": {"question": "In which cities were the 1976 winter and summer games held?", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name IN ('1976 Summer', '1976 Winter')", "source_tables": ["city", "games", "games_city"]}, "evidence": "cities refer to city_name; 1976 winter and summer games refer to games_name IN ('1976 Winter', '1976 Summer');"}
{"sample_id": 4958, "db_id": "olympics", "final": {"question": "What was the medal that Coleen Dufresne got?", "sql": "SELECT T4.medal_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T1.full_name = 'Coleen Dufresne (-Stewner)'", "source_tables": ["games_competitor", "person", "medal", "competitor_event"]}, "evidence": "What medal refers to medal_name;"}
{"sample_id": 4959, "db_id": "olympics", "final": {"question": "What is the name of the competitor who has won the most medals?", "sql": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T4.id != 4 GROUP BY T1.full_name ORDER BY COUNT(T4.id) DESC LIMIT 1", "source_tables": ["games_competitor", "person", "medal", "competitor_event"]}, "evidence": "name of the competitor refers to full_name; won the most medals refer to MAX(COUNT(medal_id));"}
{"sample_id": 4960, "db_id": "olympics", "final": {"question": "Where is competitor Estelle Nze Minko from?", "sql": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Estelle Nze Minko'", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": "Where competitor is from refers to region_name;"}
{"sample_id": 4961, "db_id": "olympics", "final": {"question": "What is the name of all the sports Chin Eei Hui has competed in?", "sql": "SELECT DISTINCT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id INNER JOIN competitor_event AS T3 ON T2.id = T3.event_id INNER JOIN games_competitor AS T4 ON T3.competitor_id = T4.id INNER JOIN person AS T5 ON T4.person_id = T5.id WHERE T5.full_name = 'Chin Eei Hui'", "source_tables": ["person", "games_competitor", "sport", "competitor_event", "event"]}, "evidence": "name of the sport refers to sport_name;"}
{"sample_id": 4962, "db_id": "olympics", "final": {"question": "What is the name of the oldest person who participated in the Olympic Games?", "sql": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age DESC LIMIT 1", "source_tables": ["games_competitor", "person"]}, "evidence": "the oldest person refers to person_id where MAX(age); name refers to full_name;"}
{"sample_id": 4963, "db_id": "olympics", "final": {"question": "In which Olympic Games have the largest number of women participation?", "sql": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.gender = 'F' GROUP BY T1.games_name ORDER BY COUNT(T2.person_id) DESC LIMIT 1", "source_tables": ["games_competitor", "games", "person"]}, "evidence": "the largest number of women participation refers to MAX(COUNT(gender = 'F')); In which Olympic Games refer to games_year;"}
{"sample_id": 4964, "db_id": "olympics", "final": {"question": "How many males from Belgium have participated in an Olympic Games?", "sql": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Belgium' AND T3.gender = 'M'", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": "males refer to gender = 'M'; Belgium refers to region_name = 'Belgium';"}
{"sample_id": 4965, "db_id": "olympics", "final": {"question": "How many persons participated in the Sapporo Olympics?", "sql": "SELECT COUNT(T1.person_id) FROM games_competitor AS T1 INNER JOIN games_city AS T2 ON T1.games_id = T2.games_id INNER JOIN city AS T3 ON T2.city_id = T3.id WHERE T3.city_name = 'Sapporo'", "source_tables": ["city", "games_competitor", "games_city"]}, "evidence": "the Sapporo Olympics refer to games_id where city_name = 'Sapporo';"}
{"sample_id": 4966, "db_id": "olympics", "final": {"question": "In which Olympic Games has Morten Aleksander Djupvik participated?", "sql": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Morten Aleksander Djupvik'", "source_tables": ["games_competitor", "games", "person"]}, "evidence": "In which Olympic Games refer to games_year;"}
{"sample_id": 4967, "db_id": "olympics", "final": {"question": "How many persons in total have participated in 12 meter Mixed Sailing competitions?", "sql": "SELECT COUNT(T1.competitor_id) FROM competitor_event AS T1 INNER JOIN event AS T2 ON T1.event_id = T2.id INNER JOIN sport AS T3 ON T2.sport_id = T3.id WHERE T2.event_name = 'Sailing Mixed 12 metres'", "source_tables": ["event", "sport", "competitor_event"]}, "evidence": "12 meter Mixed Sailing competitions refer to event_name = 'Sailing Mixed 12 metres';"}
{"sample_id": 4968, "db_id": "olympics", "final": {"question": "How many different events are there of Modern Pentathlon?", "sql": "SELECT COUNT(DISTINCT T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Modern Pentathlon'", "source_tables": ["event", "sport"]}, "evidence": "Modern Pentathlon refers to sport_name = 'Modern Pentathlon';"}
{"sample_id": 4969, "db_id": "olympics", "final": {"question": "Calculate the percentage of women who have participated in Equestrianism Mixed Three-Day Event, Individual.", "sql": "SELECT CAST(COUNT(CASE WHEN T1.gender = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN event AS T4 ON T3.event_id = T4.id WHERE T4.event_name = 'Equestrianism Mixed Three-Day Event, Individual'", "source_tables": ["event", "games_competitor", "person", "competitor_event"]}, "evidence": "DIVIDE(COUNT(person_id where gender = 'F), COUNT(person_id)) as percentage where event_name = 'Equestrianism Mixed Three-Day Event, Individual';"}
{"sample_id": 4970, "db_id": "olympics", "final": {"question": "Calculate the average age of the persons who participated in the 1992 Summer Games.", "sql": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1992 Summer'", "source_tables": ["games_competitor", "games", "person"]}, "evidence": "DIVIDE(SUM(age), COUNT(person_id)) where games_name = '1992 Summer';"}
{"sample_id": 4971, "db_id": "olympics", "final": {"question": "List out years that only have summer games.", "sql": "SELECT games_year FROM games WHERE season != 'Winter' GROUP BY games_year HAVING COUNT(season) = 1", "source_tables": ["games"]}, "evidence": "years refer to games_year; only have summer games refer to games_year where COUNT(games_name) = 1 and season = 'Summer';"}
{"sample_id": 4972, "db_id": "olympics", "final": {"question": "How many Olympics games were held during the 90s?", "sql": "SELECT COUNT(games_year) FROM games WHERE games_year BETWEEN '1990' AND '1999'", "source_tables": ["games"]}, "evidence": "games refer to id; during the 90s refers to games_year BETWEEN 1990 AND 1999;"}
{"sample_id": 4973, "db_id": "olympics", "final": {"question": "How many athletes participated in the 2014 Winter Olympics?", "sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '2014 Winter'", "source_tables": ["games_competitor", "games"]}, "evidence": "athletes refer to person_id; 2014 Winter Olympics refer to games_name = '2014 Winter';"}
{"sample_id": 4974, "db_id": "olympics", "final": {"question": "How many athletes from region 151 have won a medal?", "sql": "SELECT COUNT(T3.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN person_region AS T3 ON T2.person_id = T3.person_id WHERE T3.region_id = 151 AND T1.medal_id != 4", "source_tables": ["person_region", "games_competitor", "competitor_event"]}, "evidence": "athletes refer to person_id; region 151 refers to region_id = 151; won a medal refers to medal_id <> 4;"}
{"sample_id": 4975, "db_id": "olympics", "final": {"question": "How many athlete from China participate in the 2016 Summer Olympics?", "sql": "SELECT COUNT(T3.id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id INNER JOIN person_region AS T4 ON T3.id = T4.person_id INNER JOIN noc_region AS T5 ON T4.region_id = T5.id WHERE T1.games_name = '2016 Summer' AND T5.region_name = 'China'", "source_tables": ["noc_region", "person", "person_region", "games_competitor", "games"]}, "evidence": "athletes from China refer to person_id where region_name = 'China'; the 2016 Summer Olympics refer to games_name = '2016 Summer';"}
{"sample_id": 4976, "db_id": "olympics", "final": {"question": "How many gold medals were given to the winners in the Ice Hockey Men's Ice Hockey event?", "sql": "SELECT COUNT(T2.competitor_id) FROM event AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.event_id WHERE T1.event_name LIKE 'Ice Hockey Men%s Ice Hockey' AND T2.medal_id = 1", "source_tables": ["event", "competitor_event"]}, "evidence": "gold medals given to the winners refer to competitor_id where medal_name = 'Gold'; Ice Hockey Men's Ice Hockey refers to event_name = 'Ice Hockey Men''s Ice Hockey';"}
{"sample_id": 4977, "db_id": "olympics", "final": {"question": "Which region has the highest medal number?", "sql": "SELECT T5.region_name FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN person_region AS T4 ON T3.person_id = T4.person_id INNER JOIN noc_region AS T5 ON T4.region_id = T5.id WHERE T1.id != 4 GROUP BY T5.region_name ORDER BY COUNT(T2.competitor_id) DESC LIMIT 1", "source_tables": ["noc_region", "person_region", "games_competitor", "medal", "competitor_event"]}, "evidence": "region refers to region_name; the highest medal number refers to MAX(COUNT(medal_id <> 4));"}
{"sample_id": 4978, "db_id": "olympics", "final": {"question": "List out all the gold medalist winners in cycling sport.", "sql": "SELECT DISTINCT T5.full_name FROM event AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.event_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN sport AS T4 ON T1.sport_id = T4.id INNER JOIN person AS T5 ON T3.person_id = T5.id WHERE T4.sport_name = 'Cycling' AND T2.medal_id = 1", "source_tables": ["person", "games_competitor", "sport", "competitor_event", "event"]}, "evidence": "gold medalist winners refer to full_name where medal_name = 'Gold'; cycling sport refers to sport_name = 'Cycling';"}
{"sample_id": 4979, "db_id": "olympics", "final": {"question": "List out all the medals won by Lee Chong Wei.", "sql": "SELECT DISTINCT T1.medal_name FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN person AS T4 ON T3.person_id = T4.id WHERE T4.full_name = 'Lee Chong Wei' AND T2.medal_id <> 4", "source_tables": ["games_competitor", "medal", "competitor_event", "person"]}, "evidence": "medals refer to medal_id where medal_id <> 4;"}
{"sample_id": 4980, "db_id": "olympics", "final": {"question": "What is the percentage of female athletes below 20s who participated in the 2002 Winter Olympic?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2002 Winter' AND T2.age < 20", "source_tables": ["games_competitor", "games", "person"]}, "evidence": "DIVIDE(COUNT(person_id where gender = 'F' and age < 20), COUNT(person_id)) as percentage where games_name = '2002 Winter';"}
{"sample_id": 4981, "db_id": "olympics", "final": {"question": "What is the ratio male to female athletes in the 2012 Summer Olympic?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'M' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN T3.gender = 'F' THEN 1 ELSE NULL END) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2012 Summer'", "source_tables": ["games_competitor", "games", "person"]}, "evidence": "DIVIDE(COUNT(gender = 'M'), COUNT(gender = 'F')) where games_name = '2012 Summer';"}
{"sample_id": 4982, "db_id": "olympics", "final": {"question": "Which summer Olympic have the highest and lowest number of participants?", "sql": "SELECT ( SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.season = 'Summer' GROUP BY T1.games_year ORDER BY COUNT(T2.person_id) DESC LIMIT 1 ) AS HIGHEST , ( SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.season = 'Summer' GROUP BY T1.games_year ORDER BY COUNT(T2.person_id) LIMIT 1 ) AS LOWEST", "source_tables": ["games_competitor", "games"]}, "evidence": "the highest number of participants refers to MAX(COUNT(person_id)); the lowest number of participants refers to MIN(COUNT(person_id)); Which summer Olympic refers to games_name where season = 'Summer';"}
{"sample_id": 4983, "db_id": "olympics", "final": {"question": "How many athletes from Malaysia have won a medal?", "sql": "SELECT COUNT(T3.person_id) FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN person_region AS T4 ON T3.person_id = T4.person_id INNER JOIN noc_region AS T5 ON T4.region_id = T5.id WHERE T5.region_name = 'Malaysia' AND T1.id != 4", "source_tables": ["noc_region", "person_region", "games_competitor", "medal", "competitor_event"]}, "evidence": "Malaysia refers to region_name = 'Malaysia'; athletes won a medal refer to competitor_id where medal_id <> 4;"}
{"sample_id": 4984, "db_id": "olympics", "final": {"question": "How many athletes playing in Canoeing fall into overweight BMI category in the 2008 Summer games?", "sql": "SELECT COUNT(T5.id) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id INNER JOIN competitor_event AS T3 ON T2.id = T3.event_id INNER JOIN games_competitor AS T4 ON T3.competitor_id = T4.id INNER JOIN person AS T5 ON T4.person_id = T5.id INNER JOIN games AS T6 ON T4.games_id = T6.id WHERE T1.sport_name = 'Canoeing' AND T6.games_name = '2008 Summer' AND T5.weight * 10000.0 / (T5.height * T5.height) BETWEEN 25.0 AND 30", "source_tables": ["person", "games_competitor", "sport", "competitor_event", "event", "games"]}, "evidence": "fall into overweight BMI category refers to DIVIDE(weight), MULTIPLY(height, height) < 30; Canoeing refers to a sport name; the 2008 Summer games refer to games_name = '2008 Summer';"}
{"sample_id": 4985, "db_id": "olympics", "final": {"question": "What is the average height of male athletes playing basketball sport?", "sql": "SELECT AVG(T5.height) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id INNER JOIN competitor_event AS T3 ON T2.id = T3.event_id INNER JOIN games_competitor AS T4 ON T3.competitor_id = T4.id INNER JOIN person AS T5 ON T4.person_id = T5.id WHERE T1.sport_name = 'Basketball' AND T5.gender = 'M'", "source_tables": ["person", "games_competitor", "sport", "competitor_event", "event"]}, "evidence": "AVG(height) where sport_name = 'Basketball' and event_name = 'Basketball Men''s';"}
{"sample_id": 4986, "db_id": "olympics", "final": {"question": "How many female athletes are from the Philippines?", "sql": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Philippines' AND T3.gender = 'F'", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": "female athletes refer to id where gender = 'F'; from the Philippines region_name = 'Philippines';"}
{"sample_id": 4987, "db_id": "olympics", "final": {"question": "Which region is Yao Ming from?", "sql": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Yao Ming'", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": "region refers to region_name;"}
{"sample_id": 4988, "db_id": "olympics", "final": {"question": "At what age did Michael Fred Phelps, II join the Olympics?", "sql": "SELECT T2.age FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Michael Fred Phelps, II' ORDER BY T2.age LIMIT 1", "source_tables": ["games_competitor", "person"]}, "evidence": "At what age join the Olympics refers to MIN(age);"}
{"sample_id": 4989, "db_id": "olympics", "final": {"question": "How many athletes are there in the region where Clara Hughes is from?", "sql": "SELECT COUNT(person_id) FROM person_region WHERE region_id = ( SELECT T1.region_id FROM person_region AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.id WHERE T2.full_name = 'Clara Hughes' )", "source_tables": ["person_region", "person"]}, "evidence": ""}
{"sample_id": 4990, "db_id": "olympics", "final": {"question": "How many Men's 200 Metres Freestyle events did Ian James Thorpe compete in?", "sql": "SELECT COUNT(T1.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN event AS T4 ON T3.event_id = T4.id WHERE T1.full_name = 'Ian James Thorpe' AND T4.event_name LIKE 'Swimming Men%s 200 metres Freestyle'", "source_tables": ["event", "games_competitor", "person", "competitor_event"]}, "evidence": "Men's 200 Metres Freestyle events refer to event_name = 'Swimming Men''s 200 metres Freestyle'; events compete in refers to event_id;"}
{"sample_id": 4991, "db_id": "olympics", "final": {"question": "How many times was Larysa Semenivna Latynina (Diriy-) declared as champion in Gymnastics Women's Individual All-Around?", "sql": "SELECT COUNT(T1.id) FROM event AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.event_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN person AS T4 ON T3.person_id = T4.id WHERE T4.full_name = 'Larysa Semenivna Latynina (Diriy-)' AND T1.event_name LIKE 'Gymnastics Women%s Individual All-Around' AND T2.medal_id = 1", "source_tables": ["event", "games_competitor", "competitor_event", "person"]}, "evidence": "Gymnastics Women's Individual All-Around refers to event_name = 'Gymnastics Women''s Individual All-Around'; declared as champion refers to medal_name = 'Gold' or medal_id = 1;"}
{"sample_id": 4992, "db_id": "olympics", "final": {"question": "What are the names of the cities where Carl Lewis Borack competed?", "sql": "SELECT T4.city_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T1.full_name = 'Carl Lewis Borack'", "source_tables": ["games_competitor", "city", "person", "games_city"]}, "evidence": "name of the cities refers to city_name"}
{"sample_id": 4993, "db_id": "olympics", "final": {"question": "How many Olympic games were held in London?", "sql": "SELECT COUNT(T1.games_id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'London'", "source_tables": ["city", "games_city"]}, "evidence": "London refers to city_name = 'London';"}
{"sample_id": 4994, "db_id": "olympics", "final": {"question": "Which city was the 1992 Summer Olympic held?", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1992 Summer'", "source_tables": ["city", "games", "games_city"]}, "evidence": "city refers to city_name; 1992 Summer Olympic refers to games_name = '1992 Summer';"}
{"sample_id": 4995, "db_id": "olympics", "final": {"question": "How many athletes over the age of 59 competed in the 2016 Summer Olympics?", "sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '2016 Summer' AND T2.age > 59", "source_tables": ["games_competitor", "games"]}, "evidence": "over the age of 59 refers to age > 59; the 2016 Summer Olympics refer to games_name = '2016 Summer';"}
{"sample_id": 4996, "db_id": "olympics", "final": {"question": "Among the Olympic games held in Los Angeles, what is the name of the Olympic game that has the most number of competitors?", "sql": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T4.city_name = 'Los Angeles' GROUP BY T1.id ORDER BY COUNT(T2.person_id) DESC LIMIT 1", "source_tables": ["city", "games_competitor", "games", "games_city"]}, "evidence": "Los Angeles refers to city_name = 'Lost Angeles'; the Olympic game refers to games_name; the most number of competitors refers to MAX(COUNT(games_name));"}
{"sample_id": 4997, "db_id": "olympics", "final": {"question": "How many 10-year old athletes participated in the Gymnastics Men's Parallel Bars, Teams event?", "sql": "SELECT COUNT(T2.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN event AS T3 ON T1.event_id = T3.id WHERE T3.event_name LIKE 'Gymnastics Men%s Parallel Bars, Teams' AND T2.age = 10", "source_tables": ["event", "games_competitor", "competitor_event"]}, "evidence": "10-year old athletes refer to competitor_id where age = 10; Gymnastics Men's Parallel Bars, Teams refer to event_name = 'Gymnastics Men''s Parallel Bars, Teams';"}
{"sample_id": 4998, "db_id": "olympics", "final": {"question": "What is the average age of the athletes from the United States of America who competed in the 2016 Summer Olympics?", "sql": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person_region AS T3 ON T2.person_id = T3.person_id INNER JOIN noc_region AS T4 ON T3.region_id = T4.id WHERE T1.games_name = '2016 Summer' AND T4.region_name = 'USA'", "source_tables": ["person_region", "noc_region", "games_competitor", "games"]}, "evidence": "AVG(age) where games_name = '2016 Summer' and region_name = 'USA';"}
{"sample_id": 4999, "db_id": "olympics", "final": {"question": "Which region does the NOC code \"COL\" stand for?", "sql": "SELECT region_name FROM noc_region WHERE noc = 'COL'", "source_tables": ["noc_region"]}, "evidence": "region refers to region_name; NOC code \"COL\" refers to noc = 'COL';"}
{"sample_id": 5000, "db_id": "olympics", "final": {"question": "State the name of sport id 19.", "sql": "SELECT sport_name FROM sport WHERE id = 19", "source_tables": ["sport"]}, "evidence": "name of sport refers to sport_name"}
{"sample_id": 5001, "db_id": "olympics", "final": {"question": "Give the id of the event \"Shooting Mixed Skeet\".", "sql": "SELECT id FROM event WHERE event_name = 'Shooting Mixed Skeet'", "source_tables": ["event"]}, "evidence": "\"Shooting Mixed Skeet\" refers to event_name = 'Shooting Mixed Skeet';"}
{"sample_id": 5002, "db_id": "olympics", "final": {"question": "Provide hockey's sport id.", "sql": "SELECT id FROM sport WHERE sport_name = 'Hockey'", "source_tables": ["sport"]}, "evidence": "hockey's sport refers to sport_name = 'hockey';"}
{"sample_id": 5003, "db_id": "olympics", "final": {"question": "Tell the weight of Dagfinn Sverre Aarskog.", "sql": "SELECT weight FROM person WHERE full_name = 'Dagfinn Sverre Aarskog'", "source_tables": ["person"]}, "evidence": ""}
{"sample_id": 5004, "db_id": "olympics", "final": {"question": "What is the id of Rio de Janeiro?", "sql": "SELECT id FROM city WHERE city_name = 'Rio de Janeiro'", "source_tables": ["city"]}, "evidence": "Rio de Janeiro refers to city_name = 'Rio de Janeiro';"}
{"sample_id": 5005, "db_id": "olympics", "final": {"question": "How many people have won the gold medal of the event \"Rowing Women's Coxed Eights\"?", "sql": "SELECT COUNT(T1.competitor_id) FROM competitor_event AS T1 INNER JOIN event AS T2 ON T1.event_id = T2.id INNER JOIN medal AS T3 ON T1.medal_id = T3.id WHERE T2.event_name LIKE 'Rowing Women%s Coxed Eights' AND T3.medal_name = 'Gold'", "source_tables": ["event", "medal", "competitor_event"]}, "evidence": "won the gold medal refers to medal_name = 'Gold'; event \"Rowing Women's Coxed Eights\" refers to event_name = 'Rowing Women''s Coxed Eights';"}
{"sample_id": 5006, "db_id": "olympics", "final": {"question": "How many kinds of events belong to the sport of cycling?", "sql": "SELECT COUNT(T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Cycling'", "source_tables": ["event", "sport"]}, "evidence": "kinds of events refer to event_name; sport of cycling refers to sport_name = 'Cycling';"}
{"sample_id": 5007, "db_id": "olympics", "final": {"question": "What is Vijay Singh Chauhan's region name?", "sql": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Vijay Singh Chauhan'", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": ""}
{"sample_id": 5008, "db_id": "olympics", "final": {"question": "When did Roma host the Olympic Games?", "sql": "SELECT T3.games_year FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Roma'", "source_tables": ["city", "games", "games_city"]}, "evidence": "Roma refers to city_name = 'Roma'; When host refers to games_year;"}
{"sample_id": 5009, "db_id": "olympics", "final": {"question": "How many 20 years old athletes were there in the 1984 Summer Olympic Games?", "sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1984 Summer' AND T2.age = 20", "source_tables": ["games_competitor", "games"]}, "evidence": "20 years old athletes refer to person_id where age = 20; 1984 Summer Olympic Games refer to games_name = '1984 Summer';"}
{"sample_id": 5010, "db_id": "olympics", "final": {"question": "How many games has Prithipal Singh participated in?", "sql": "SELECT COUNT(T2.games_id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Prithipal Singh'", "source_tables": ["games_competitor", "person"]}, "evidence": "games refer to games_id;"}
{"sample_id": 5011, "db_id": "olympics", "final": {"question": "State the number of athletes in the 1984 Summer Olympic Games who were more than 50 years old.", "sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1984 Summer' AND T2.age > 50", "source_tables": ["games_competitor", "games"]}, "evidence": "the 1984 Summer Olympic Games refer to games_name = '1984 Summer'; athletes more than 50 years old refer to person_id where age > 50;"}
{"sample_id": 5012, "db_id": "olympics", "final": {"question": "How many kinds of events does athletics have?", "sql": "SELECT COUNT(T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Athletics'", "source_tables": ["event", "sport"]}, "evidence": "kinds of events refer to event_name; athletics refer to sport_name = 'Athletics';"}
{"sample_id": 5013, "db_id": "olympics", "final": {"question": "Who is the heaviest athlete from Russia?", "sql": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Russia' ORDER BY T3.weight DESC LIMIT 1", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": "the heaviest athlete refers to full_name where MAX(weight); from Russia refers to region_name = 'Russia';"}
{"sample_id": 5082, "db_id": "address", "final": {"question": "What is the total number of households in Arecibo county?", "sql": "SELECT SUM(T1.households) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO'", "source_tables": ["country", "zip_data"]}, "evidence": "\"ARECIBO\" is the county; total number of households refer to sum(households)"}
{"sample_id": 5083, "db_id": "address", "final": {"question": "Which residential area in Arecibo county has the highest average house value? Please give its zip_code.", "sql": "SELECT T1.zip_code FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO' ORDER BY T1.avg_house_value DESC LIMIT 1", "source_tables": ["country", "zip_data"]}, "evidence": "\"ARECIBO\" is the county; highest average house value refers to Max(avg_house_value)"}
{"sample_id": 5084, "db_id": "address", "final": {"question": "Please list the numbers of males in all the residential areas in Arecibo county.", "sql": "SELECT SUM(T1.male_population) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO'", "source_tables": ["country", "zip_data"]}, "evidence": "\"ARECIBO\" is the county; number of males refers to Sum(male_population)"}
{"sample_id": 5085, "db_id": "address", "final": {"question": "Among all the residential areas in Delaware, how many of them implement daylight saving?", "sql": "SELECT COUNT(T1.zip_code) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'DELAWARE' AND T1.daylight_savings = 'Yes'", "source_tables": ["country", "zip_data"]}, "evidence": "\"Delaware\" is a county; implement daylight savings refers to daylight_saving = 'Yes'"}
{"sample_id": 5086, "db_id": "address", "final": {"question": "Among all the residential areas in Arecibo county, what is the zip_code of the one with the highest white population?", "sql": "SELECT T1.zip_code FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO' ORDER BY T1.white_population DESC LIMIT 1", "source_tables": ["country", "zip_data"]}, "evidence": "\"ARECIBO\" is the county; highest white population refers to Max(white_population)"}
{"sample_id": 5087, "db_id": "address", "final": {"question": "In which county is the residential area with the highest average income per household located?", "sql": "SELECT T2.county FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO' GROUP BY T2.county ORDER BY T1.avg_income_per_household DESC LIMIT 1", "source_tables": ["country", "zip_data"]}, "evidence": "highest average income per household refers to Max(avg_income_per_household)"}
{"sample_id": 5088, "db_id": "address", "final": {"question": "Please list the names of all the counties with at least one residential area that implements daylight saving.", "sql": "SELECT DISTINCT T2.county FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T1.daylight_savings = 'Yes'", "source_tables": ["country", "zip_data"]}, "evidence": "implements daylight savings refers to daylight_savings = 'Yes'"}
{"sample_id": 5089, "db_id": "address", "final": {"question": "Please list the zip_codes of all the residential areas in Huntingdon county with over 30 employees.", "sql": "SELECT DISTINCT T1.zip_code FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'HUNTINGDON' AND T1.employees > 30", "source_tables": ["country", "zip_data"]}, "evidence": "over 30 employees refers to employee > 30; 'HUNTINGDON' is the county"}
{"sample_id": 5090, "db_id": "address", "final": {"question": "Please list the Asian populations of all the residential areas with the bad alias \"URB San Joaquin\".", "sql": "SELECT SUM(T1.asian_population) FROM zip_data AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code WHERE T2.bad_alias = 'URB San Joaquin'", "source_tables": ["zip_data", "avoid"]}, "evidence": "\"URB San Joaquin\" is the bad_alias"}
{"sample_id": 5091, "db_id": "address", "final": {"question": "Among the residential areas with the bad alias \"Internal Revenue Service\", how many of them are in the Eastern time zone?", "sql": "SELECT COUNT(T1.zip_code) FROM zip_data AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code WHERE T2.bad_alias = 'Internal Revenue Service' AND T1.time_zone = 'Eastern'", "source_tables": ["zip_data", "avoid"]}, "evidence": "\"Internal Revenue Service\" is the bad_alias; in Eastern time zone refers to time_zone = 'Eastern'"}
{"sample_id": 5092, "db_id": "address", "final": {"question": "What is the bad alias of the residential area with the highest average house value?", "sql": "SELECT T2.bad_alias FROM zip_data AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code WHERE T1.avg_house_value = ( SELECT MAX(avg_house_value) FROM zip_data ) LIMIT 1", "source_tables": ["zip_data", "avoid"]}, "evidence": "highest average house value refers to Max(avg_house_value)"}
{"sample_id": 5093, "db_id": "address", "final": {"question": "Please list the bad alias of all the residential areas with a median female age of over 32.", "sql": "SELECT DISTINCT T2.bad_alias FROM zip_data AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code WHERE T1.female_median_age > 32", "source_tables": ["zip_data", "avoid"]}, "evidence": "median female age of over 32 refers to median_female_age > 32"}
{"sample_id": 5094, "db_id": "address", "final": {"question": "What is the highest gender ratio of the residential areas in Arecibo county?", "sql": "SELECT CAST(T1.male_population AS REAL) / T1.female_population FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO' AND T1.female_population <> 0 ORDER BY 1 DESC LIMIT 1", "source_tables": ["country", "zip_data"]}, "evidence": "\"ARECIBO\" is the county; highest gender ration refers to Max(Divide (male_population, female_population))"}
{"sample_id": 5095, "db_id": "address", "final": {"question": "What is the average median female age of all the residential areas in the Arecibo county?", "sql": "SELECT SUM(T1.female_median_age) / COUNT(T1.zip_code) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO'", "source_tables": ["country", "zip_data"]}, "evidence": "\"ARECIBO\" is the county; average median female age = Divide (Sum(median_female_age), Count(country))"}
{"sample_id": 5096, "db_id": "address", "final": {"question": "What is the area code of the city with the female median age over 32 years old?", "sql": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN ZIP_Data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.female_median_age > 32 GROUP BY T1.area_code", "source_tables": ["area_code", "zip_data"]}, "evidence": ""}
{"sample_id": 5097, "db_id": "address", "final": {"question": "What is the alias of the city called Hartford?", "sql": "SELECT DISTINCT T2.alias FROM zip_data AS T1 INNER JOIN alias AS T2 ON T1.zip_code = T2.zip_code WHERE T1.city = 'Hartford'", "source_tables": ["alias", "zip_data"]}, "evidence": "\"Hartford\" is the city"}
{"sample_id": 5098, "db_id": "address", "final": {"question": "How many counties are there in Alabama?", "sql": "SELECT COUNT(T2.county) FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Alabama'", "source_tables": ["state", "country"]}, "evidence": "\"Alabama\" is the name"}
{"sample_id": 5099, "db_id": "address", "final": {"question": "How many post offices are there in New York?", "sql": "SELECT COUNT(DISTINCT T2.zip_code) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.abbreviation = 'NY' AND T2.type = 'Post Office'", "source_tables": ["state", "zip_data"]}, "evidence": "\"New York\" refers to state = 'NY' and name = 'New York'; 'Post Office' is the type"}
{"sample_id": 5100, "db_id": "address", "final": {"question": "What are the precise locations of the cities with an area code of 787?", "sql": "SELECT T2.latitude, T2.longitude FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = '787' GROUP BY T2.latitude, T2.longitude", "source_tables": ["area_code", "zip_data"]}, "evidence": "precise location refers to latitude, longitude"}
{"sample_id": 5101, "db_id": "address", "final": {"question": "In California, how many delivery receptacles are there in the community post office that has the highest number of delivery receptacles?", "sql": "SELECT COUNT(*) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.abbreviation = 'CA' AND T2.type LIKE '%Community Post Office%' AND T1.name = 'California' AND T2.state = 'CA'", "source_tables": ["state", "zip_data"]}, "evidence": "in California refers to name = 'California' and state = 'CA'; 'Community Post Office' is the Type"}
{"sample_id": 5102, "db_id": "address", "final": {"question": "In which county can you find the city with the highest number of females?", "sql": "SELECT T4.county FROM zip_data AS T3 INNER JOIN country AS T4 ON T3.zip_code = T4.zip_code GROUP BY T4.county ORDER BY T3.female_population DESC LIMIT 1", "source_tables": ["country", "zip_data"]}, "evidence": "highest number of females refers to Max(female_population)"}
{"sample_id": 5103, "db_id": "address", "final": {"question": "What are the names of the states whose postal point is not affiliated with any organization?", "sql": "SELECT DISTINCT T2.name FROM zip_data AS T1 INNER JOIN state AS T2 ON T1.state = T2.abbreviation WHERE T1.division IS NULL", "source_tables": ["state", "zip_data"]}, "evidence": "postal point is not affiliated with any organization refers to division is null"}
{"sample_id": 5104, "db_id": "address", "final": {"question": "What is the difference in the most populated city of Allentown-Bethlehem-Easton, PA-NJ in 2020 against its population in 2010?", "sql": "SELECT T1.population_2020 - T1.population_2010 AS result_data FROM zip_data AS T1 INNER JOIN CBSA AS T2 ON T1.CBSA = T2.CBSA WHERE T2.CBSA_name = 'Allentown-Bethlehem-Easton, PA-NJ' ORDER BY T1.population_2020 DESC LIMIT 1", "source_tables": ["cbsa", "zip_data"]}, "evidence": "\"Allentown-Bethlehem-Easton, PA-NJ\" is the CBSA_name; most populated city refers to Max(population_2020); difference = Subtract (population_2020, population_2011)"}
{"sample_id": 5105, "db_id": "address", "final": {"question": "List all the zip codes in the county of New Castle in Delaware.", "sql": "SELECT DISTINCT T2.zip_code FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T2.county = 'NEW CASTLE' AND T1.name = 'Delaware'", "source_tables": ["state", "country"]}, "evidence": "\"NEW CASTLE\" is the county; 'Delaware' is the name of state"}
{"sample_id": 5106, "db_id": "address", "final": {"question": "How many representatives are there in the state with the highest monthly benefit payments for retired workers?", "sql": "SELECT COUNT(T3.cognress_rep_id) FROM zip_data AS T1 INNER JOIN state AS T2 ON T1.state = T2.abbreviation INNER JOIN congress AS T3 ON T2.abbreviation = T3.abbreviation ORDER BY T1.monthly_benefits_retired_workers DESC LIMIT 1", "source_tables": ["state", "congress", "zip_data"]}, "evidence": "state with highest monthly benefits payment for retired workers refers to Max(monthly_benefits_retired_workers)"}
{"sample_id": 5107, "db_id": "address", "final": {"question": "In the state where Lisa Murkowski is the representative, how many cities have zero employees?", "sql": "SELECT COUNT(T3.city) FROM congress AS T1 INNER JOIN state AS T2 ON T1.abbreviation = T2.abbreviation INNER JOIN zip_data AS T3 ON T2.abbreviation = T3.state WHERE T1.first_name = 'Murkowski' AND T1.last_name = 'Lisa' AND T3.employees = 0", "source_tables": ["congress", "state", "zip_data"]}, "evidence": "zero employee refers to employees = 0"}
{"sample_id": 5108, "db_id": "address", "final": {"question": "What are the top 3 states with the highest Asian population? List the full names of all the representatives in the said states.", "sql": "SELECT t.state, T1.first_name, T1.last_name FROM zip_data AS T INNER JOIN congress AS T1 ON t.state = T1.abbreviation GROUP BY t.state ORDER BY SUM(t.asian_population) DESC LIMIT 3", "source_tables": ["congress", "zip_data"]}, "evidence": "city with highest asian population refers to Max(Sum(asian_population)); full name refers to first_name, last_name"}
{"sample_id": 5109, "db_id": "address", "final": {"question": "Which state is Outagamie County in? Give the full name of the state.", "sql": "SELECT DISTINCT T2.name FROM country AS T1 INNER JOIN state AS T2 ON T1.state = T2.abbreviation WHERE T1.county = 'OUTAGAMIE'", "source_tables": ["state", "country"]}, "evidence": "\"OUTAGAMIE\" is the county"}
{"sample_id": 5110, "db_id": "address", "final": {"question": "What party does the area with the zip code 91701 belong to?", "sql": "SELECT T1.party FROM congress AS T1 INNER JOIN state AS T2 ON T1.abbreviation = T2.abbreviation INNER JOIN zip_data AS T3 ON T2.abbreviation = T3.state WHERE T3.zip_code = 91701 GROUP BY T1.party", "source_tables": ["congress", "state", "zip_data"]}, "evidence": ""}
{"sample_id": 5111, "db_id": "address", "final": {"question": "How many males are there in New Haven County's residential areas?", "sql": "SELECT SUM(T1.male_population) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'NEW HAVEN'", "source_tables": ["country", "zip_data"]}, "evidence": "\"NEW HAVEN\" is the county; male refers to male_population"}
{"sample_id": 5112, "db_id": "address", "final": {"question": "Show the alias for the county at coordinate (18.090875, -66.867756).", "sql": "SELECT T2.alias FROM zip_data AS T1 INNER JOIN alias AS T2 ON T1.zip_code = T2.zip_code WHERE T1.latitude = 18.090875 AND T1.longitude = -66.867756", "source_tables": ["alias", "zip_data"]}, "evidence": "coordinates refers to latitude, longitude; latitude = '18.090875; longitude = '-66.867756'"}
{"sample_id": 5113, "db_id": "address", "final": {"question": "For the city with the most elders, what's its area code?", "sql": "SELECT T2.area_code FROM zip_data AS T1 INNER JOIN area_code AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.area_code ORDER BY T1.over_65 DESC LIMIT 1", "source_tables": ["area_code", "zip_data"]}, "evidence": "city with most elders refers to Max(over_65)"}
{"sample_id": 5114, "db_id": "address", "final": {"question": "For the county represented by Thompson Bennie G, how many bad aliases does it have?", "sql": "SELECT COUNT(DISTINCT T2.bad_alias) FROM zip_congress AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T1.district = T3.cognress_rep_id WHERE T3.first_name = 'Thompson' AND T3.last_name = 'Bennie G'", "source_tables": ["zip_congress", "congress", "avoid"]}, "evidence": ""}
{"sample_id": 5115, "db_id": "address", "final": {"question": "Give the location coordinates of the city with area code 636.", "sql": "SELECT T2.latitude, T2.longitude FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 636", "source_tables": ["area_code", "zip_data"]}, "evidence": "location coordinate refers to (latitude, longitude)"}
{"sample_id": 5116, "db_id": "address", "final": {"question": "Show the zip code of the county represented by Buchanan Vernon.", "sql": "SELECT T2.zip_code FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.first_name = 'Buchanan' AND T1.last_name = 'Vernon'", "source_tables": ["congress", "zip_congress"]}, "evidence": ""}
{"sample_id": 5117, "db_id": "address", "final": {"question": "Which state is area code 878 in? Give the name of the state.", "sql": "SELECT T2.state FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 878", "source_tables": ["area_code", "zip_data"]}, "evidence": ""}
{"sample_id": 5118, "db_id": "address", "final": {"question": "How many counties are there in Virginia State?", "sql": "SELECT COUNT(T2.county) FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Virginia'", "source_tables": ["state", "country"]}, "evidence": "\"Virginia\" is the state"}
{"sample_id": 5119, "db_id": "address", "final": {"question": "Give the name and the position of the cbsa officer from the area with the zip code 45503.", "sql": "SELECT T1.CBSA_name, T2.latitude, T2.longitude FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.zip_code = 45503 GROUP BY T1.CBSA_name, T2.latitude, T2.longitude", "source_tables": ["cbsa", "zip_data"]}, "evidence": "position refers to latitude, longitude"}
{"sample_id": 5120, "db_id": "address", "final": {"question": "Tell the name of the county which is represented by Hartzler Vicky.", "sql": "SELECT T1.county FROM country AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T3.first_name = 'Hartzler' AND T3.last_name = 'Vicky' GROUP BY T1.county", "source_tables": ["zip_congress", "country", "congress"]}, "evidence": "name of county refers to county"}
{"sample_id": 5121, "db_id": "address", "final": {"question": "Calculate the average male median age of all the residential areas in Windham county.", "sql": "SELECT SUM(T2.male_median_age) / COUNT(T2.median_age) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'WINDHAM'", "source_tables": ["country", "zip_data"]}, "evidence": "average male median age refers to Divide (Sum(male_median_age), Count(county)); 'WINDHAM' is the county"}
{"sample_id": 5122, "db_id": "address", "final": {"question": "For the county where DeSantis Ron is from, what is the average female median age?", "sql": "SELECT SUM(T4.female_median_age) / COUNT(T1.county) FROM country AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id INNER JOIN zip_data AS T4 ON T1.zip_code = T4.zip_code WHERE T3.first_name = 'DeSantis' AND T3.last_name = 'Ron'", "source_tables": ["zip_congress", "country", "zip_data", "congress"]}, "evidence": "average female median age refers to Divide (Sum(female_median_age), Count(county))"}
{"sample_id": 5123, "db_id": "address", "final": {"question": "What is the area code of Bishopville, SC?", "sql": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Bishopville' AND T2.state = 'SC'", "source_tables": ["area_code", "zip_data"]}, "evidence": "\"Bishopville\" is the city; 'SC' is the state"}
{"sample_id": 5124, "db_id": "address", "final": {"question": "Name the bad alias of Geneva, AL.", "sql": "SELECT T1.bad_alias FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Geneva' AND T2.state = 'AL'", "source_tables": ["zip_data", "avoid"]}, "evidence": "\"Geneva\" is the city; 'AL' is the state"}
{"sample_id": 5125, "db_id": "address", "final": {"question": "Which city and state has the bad alias of Lawrenceville?", "sql": "SELECT T2.city, T2.state FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.bad_alias = 'Lawrenceville' GROUP BY T2.city, T2.state", "source_tables": ["zip_data", "avoid"]}, "evidence": "\"Lawrenceville\" is the bad_alias"}
{"sample_id": 5126, "db_id": "address", "final": {"question": "Name both the alias and the bad alias of zip code 38015.", "sql": "SELECT T1.alias, T2.bad_alias FROM alias AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code WHERE T1.zip_code = 38015", "source_tables": ["alias", "avoid"]}, "evidence": ""}
{"sample_id": 5127, "db_id": "address", "final": {"question": "What is the zip code of the district represented by Steven A King?", "sql": "SELECT T2.zip_code FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.first_name = 'King' AND T1.last_name = 'Steven A'", "source_tables": ["congress", "zip_congress"]}, "evidence": ""}
{"sample_id": 5128, "db_id": "address", "final": {"question": "What is the CBSA name and type in York, ME?", "sql": "SELECT T1.CBSA_name, T1.CBSA_type FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.city = 'York' AND T2.state = 'ME'", "source_tables": ["cbsa", "zip_data"]}, "evidence": "\"York\" is the city; 'ME' is the state; type refers to CBSA_type"}
{"sample_id": 5129, "db_id": "address", "final": {"question": "List 10 cities with a median age over 40. Include their zip codes and area codes.", "sql": "SELECT T2.city, T2.zip_code, T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.median_age >= 40 LIMIT 10", "source_tables": ["area_code", "zip_data"]}, "evidence": "median age over 40 refers to median_age > 40"}
{"sample_id": 5130, "db_id": "address", "final": {"question": "Name the county that has the bad alias of Druid Hills.", "sql": "SELECT T2.county FROM avoid AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T1.bad_alias = 'Druid Hills'", "source_tables": ["country", "avoid"]}, "evidence": "\"Druid Hills\" is the bad_alias"}
{"sample_id": 5131, "db_id": "address", "final": {"question": "What is the area code of Phillips county in Montana?", "sql": "SELECT DISTINCT T1.area_code FROM area_code AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code INNER JOIN state AS T3 ON T2.state = T3.abbreviation WHERE T2.county = 'PHILLIPS' AND T3.name = 'Montana'", "source_tables": ["state", "country", "area_code"]}, "evidence": "\"PHILLIPS\" is the county; 'Montana' is the name of state"}
{"sample_id": 5132, "db_id": "address", "final": {"question": "Which district has the largest land area in Wisconsin? Write the full name of the congress representative and include the postal codes.", "sql": "SELECT T2.zip_code, T1.first_name, T1.last_name FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.state = 'Wisconsin' ORDER BY T1.land_area DESC LIMIT 1", "source_tables": ["congress", "zip_congress"]}, "evidence": "\"Wisconsin\" is the state; largest land area refers to Max(land_area); full name refers to first_name, last_name; postal code refers to zip_code"}
{"sample_id": 5133, "db_id": "address", "final": {"question": "How many states are in the central time zone? Write their full names.", "sql": "SELECT SUM(CASE WHEN T1.time_zone = 'Central' THEN 1 ELSE 0 END) AS count FROM zip_data AS T1 INNER JOIN state AS T2 ON T2.abbreviation = T1.state WHERE T1.time_zone = 'Central'", "source_tables": ["state", "zip_data"]}, "evidence": "central time zone refers to time_zone = 'Central'"}
{"sample_id": 5134, "db_id": "address", "final": {"question": "Name 10 cities with their states that are under the Lexington-Fayette, KY office of the Canada Border Services Agency.", "sql": "SELECT DISTINCT T2.city, T2.state FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Lexington-Fayette, KY' LIMIT 10", "source_tables": ["cbsa", "zip_data"]}, "evidence": "\"Lexington-Fayette, KY\" is the CBSA_name"}
{"sample_id": 5135, "db_id": "address", "final": {"question": "What is the percentage ratio between Democrats and Republicans in Indiana? List the zip codes belonging to Democrats.", "sql": "SELECT CAST(COUNT(CASE WHEN T2.party = 'Democrat' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.party = 'Republican' THEN 1 ELSE NULL END)FROM zip_congress AS T1 INNER JOIN congress AS T2 ON T2.cognress_rep_id = T1.district", "source_tables": ["zip_congress", "congress"]}, "evidence": "\"Democrats\" and \"Republicans\" refers to party = 'Democrat\" and party = 'Republican'; percentage ratio = Multiply (Divide (Count(party = 'Democrat\"), Count(party = 'Republican')), 100)"}
{"sample_id": 5136, "db_id": "address", "final": {"question": "Calculate the ratio between the number of representatives in Alabama and the number of representatives in Illinois.", "sql": "SELECT CAST(COUNT(CASE WHEN state = 'Alabama' THEN cognress_rep_id ELSE NULL END) AS REAL) / COUNT(CASE WHEN state = 'Illinois' THEN cognress_rep_id ELSE NULL END) FROM congress", "source_tables": ["congress"]}, "evidence": "\"Alabama\" and \"Illinois\" are both state; Ratio = Divide (Count(state = 'Alabama'), Count(state = 'Illinois'))"}
{"sample_id": 5137, "db_id": "address", "final": {"question": "Calculate the average of 2020's population in each zip code.", "sql": "SELECT CAST(SUM(population_2020) AS REAL) / COUNT(zip_code) FROM zip_data", "source_tables": ["zip_data"]}, "evidence": "average of 2020 population in each zip code refers to Divide (Sum(population_2020), Count(zip_code))"}
{"sample_id": 5138, "db_id": "address", "final": {"question": "State the male population for all zip code which were under the Berlin, NH CBSA.", "sql": "SELECT T2.male_population FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Berlin, NH' GROUP BY T2.male_population", "source_tables": ["cbsa", "zip_data"]}, "evidence": "\"Berlin, NH\" is the CBSA_name"}
{"sample_id": 5139, "db_id": "address", "final": {"question": "Which CBSAs have more than 10 zip codes?", "sql": "SELECT T1.CBSA_name FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA GROUP BY T1.CBSA HAVING COUNT(T2.zip_code) > 10", "source_tables": ["cbsa", "zip_data"]}, "evidence": "has more than 10 zip codes refers to CBSA where count(CBSA) > 10"}
{"sample_id": 5140, "db_id": "address", "final": {"question": "List all the bad alias for zip codes in Puerto Rico.", "sql": "SELECT T1.bad_alias FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.state = 'PR'", "source_tables": ["zip_data", "avoid"]}, "evidence": "\"Puerto Rico\" refers to state = 'PR'"}
{"sample_id": 5141, "db_id": "address", "final": {"question": "What is the longitude and latitude for the district represented by Grayson Alan?", "sql": "SELECT T1.latitude, T1.longitude FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T3.first_name = 'Grayson' AND T3.last_name = 'Alan'", "source_tables": ["zip_congress", "congress", "zip_data"]}, "evidence": ""}
{"sample_id": 5142, "db_id": "address", "final": {"question": "What is the state for area code of 787?", "sql": "SELECT DISTINCT T2.state FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 787", "source_tables": ["area_code", "zip_data"]}, "evidence": ""}
{"sample_id": 5143, "db_id": "address", "final": {"question": "List all representatives of districts which have more than 30 000 population in 2020.", "sql": "SELECT T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T1.population_2020 > 30000 GROUP BY T3.first_name, T3.last_name", "source_tables": ["zip_congress", "congress", "zip_data"]}, "evidence": "more than 30000 population in 2020 refers to population_2020 > 30000; representative refers to first_name, last_name"}
{"sample_id": 5144, "db_id": "address", "final": {"question": "Which zip code in Massachusetts that have more than 1 area code?", "sql": "SELECT T1.zip_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.state = 'MA' GROUP BY T1.zip_code HAVING COUNT(T1.area_code) > 1", "source_tables": ["area_code", "zip_data"]}, "evidence": "\"Massachusetts\" is the state; zip code more than 1 area code refers to Count (zip_code) > 1"}
{"sample_id": 5145, "db_id": "address", "final": {"question": "State the county for Arecibo City.", "sql": "SELECT DISTINCT T1.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Arecibo'", "source_tables": ["country", "zip_data"]}, "evidence": "\"Arecibo\" is the city"}
{"sample_id": 5146, "db_id": "address", "final": {"question": "How many zip codes are under Barre, VT?", "sql": "SELECT COUNT(T2.zip_code) FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Barre, VT'", "source_tables": ["cbsa", "zip_data"]}, "evidence": "\"Barre, VT\" is the CBSA_name"}
{"sample_id": 5147, "db_id": "address", "final": {"question": "Among the zip code under Saint Croix county, which zip code has the biggest land area?", "sql": "SELECT T1.zip_code FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'SAINT CROIX' ORDER BY T2.land_area DESC LIMIT 1", "source_tables": ["country", "zip_data"]}, "evidence": "biggest land area refers to Max(land_area); \"SAINT CROIX\" is the county"}
{"sample_id": 5148, "db_id": "address", "final": {"question": "Calculate the difference between the 2020 population and the 2010 population for the districts represented by Griffin Tim.", "sql": "SELECT T1.population_2020 - T1.population_2010 FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T3.first_name = 'Griffin' AND T3.last_name = 'Tim'", "source_tables": ["zip_congress", "congress", "zip_data"]}, "evidence": "difference = Subtract (population_2020, population_2010)"}
{"sample_id": 5149, "db_id": "address", "final": {"question": "Based on the population in 2020, calculate the percentage for the population of Asian in the zip code where the CBSA was Atmore, AL.", "sql": "SELECT CAST(T2.asian_population AS REAL) * 100 / T2.population_2010 FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Atmore, AL'", "source_tables": ["cbsa", "zip_data"]}, "evidence": "\"Atmore, AL\" is CBSA_name; percentage = Divide(asian_population, population_2020) * 100"}
{"sample_id": 5150, "db_id": "address", "final": {"question": "Among the cities with an area code 939, which city has the highest Asian population?", "sql": "SELECT T2.city FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 939 ORDER BY T2.asian_population DESC LIMIT 1", "source_tables": ["area_code", "zip_data"]}, "evidence": "highest asian population refers to Max(asian_population)"}
{"sample_id": 5151, "db_id": "address", "final": {"question": "Give the name of the country and state of the city with elevation of 1039.", "sql": "SELECT DISTINCT T1.name, T2.state FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state INNER JOIN zip_data AS T3 ON T2.zip_code = T3.zip_code WHERE T3.elevation = 1039", "source_tables": ["state", "country", "zip_data"]}, "evidence": "elevation of 1039 refers to elevation = 1039"}
{"sample_id": 5152, "db_id": "address", "final": {"question": "Provide the alias and elevation of the city with zip code 1028.", "sql": "SELECT T1.alias, T2.elevation FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.zip_code = 1028", "source_tables": ["alias", "zip_data"]}, "evidence": ""}
{"sample_id": 5153, "db_id": "address", "final": {"question": "What is the area code of the city with the largest land area?", "sql": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.land_area = ( SELECT MAX(land_area) FROM zip_data )", "source_tables": ["area_code", "zip_data"]}, "evidence": "largest land area refers to Max(land_area)"}
{"sample_id": 5154, "db_id": "address", "final": {"question": "Give the area code of the city with the white population ranging between 1700 to 2000.", "sql": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.white_population BETWEEN 1700 AND 2000", "source_tables": ["area_code", "zip_data"]}, "evidence": ""}
{"sample_id": 5155, "db_id": "address", "final": {"question": "What is the Asian population in the city with the alias Leeds?", "sql": "SELECT SUM(T2.asian_population) FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'Leeds'", "source_tables": ["alias", "zip_data"]}, "evidence": ""}
{"sample_id": 5156, "db_id": "address", "final": {"question": "List down the area code and country of the city named Savoy.", "sql": "SELECT T1.area_code, T2.county FROM area_code AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code INNER JOIN zip_data AS T3 ON T1.zip_code = T3.zip_code WHERE T3.city = 'Savoy'", "source_tables": ["country", "area_code", "zip_data"]}, "evidence": "Savoy is the city;"}
{"sample_id": 5157, "db_id": "address", "final": {"question": "What are the alias of the cities with 0 population in 2010?", "sql": "SELECT DISTINCT T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.population_2010 = 0", "source_tables": ["alias", "zip_data"]}, "evidence": "with 0 population in 2010 refers to population_2010 = 0;"}
{"sample_id": 5158, "db_id": "address", "final": {"question": "Among the cities with area code 608, how many cities implement daylight savings?", "sql": "SELECT COUNT(T2.city) FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 608 AND T2.daylight_savings = 'Yes'", "source_tables": ["area_code", "zip_data"]}, "evidence": "implement daylight savings refers to daylight_savings = 'Yes';"}
{"sample_id": 5159, "db_id": "address", "final": {"question": "Provide the average elevation of the cities with alias Amherst.", "sql": "SELECT AVG(T2.elevation) FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'Amherst'", "source_tables": ["alias", "zip_data"]}, "evidence": "AVG(elevation) where alias = 'Amherst';"}
{"sample_id": 5160, "db_id": "address", "final": {"question": "What is the country and state of the city named Dalton?", "sql": "SELECT T2.county FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state INNER JOIN zip_data AS T3 ON T2.zip_code = T3.zip_code WHERE T3.city = 'Dalton' GROUP BY T2.county", "source_tables": ["state", "country", "zip_data"]}, "evidence": "Dalton is the city;"}
{"sample_id": 5161, "db_id": "address", "final": {"question": "Give at least five alias of cities with a postal point of post office.", "sql": "SELECT T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.type = 'Post Office' LIMIT 5", "source_tables": ["alias", "zip_data"]}, "evidence": "postal point of post office refers to type = 'Post Office';"}
{"sample_id": 5162, "db_id": "address", "final": {"question": "What is the difference in the number of cities with P.O. box only and cities with Post Office among the cities with area code 787?", "sql": "SELECT COUNT(CASE WHEN T2.type = 'P.O. Box Only' THEN 1 ELSE NULL END) - COUNT(CASE WHEN T2.type = 'Post Office' THEN 1 ELSE NULL END) AS DIFFERENCE FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 787", "source_tables": ["area_code", "zip_data"]}, "evidence": "SUBTRACT(COUNT(type = 'P.O. Box Only'), COUNT(type = 'Post Office')) where area_code = 787;"}
{"sample_id": 5163, "db_id": "address", "final": {"question": "Among the cities belonging to the country named Arroyo, calculate the percentage of increase in the population in these cities from 2010 to 2020.", "sql": "SELECT CAST((SUM(T2.population_2020) - SUM(T2.population_2010)) AS REAL) * 100 / SUM(T2.population_2010) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Arroyo'", "source_tables": ["country", "zip_data"]}, "evidence": "DIVIDE(SUBTRACT(SUM(population_2020)), SUM(population_2010)), SUM(population_2010) as percentage where county = 'ARROYO';"}
{"sample_id": 5164, "db_id": "address", "final": {"question": "Among the postal points in Texas, provide the zip codes and cities of postal points which have total beneficiaries of above 10000.", "sql": "SELECT T2.zip_code, T2.city FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Texas' AND T2.total_beneficiaries > 10000", "source_tables": ["state", "zip_data"]}, "evidence": "Texas is the name of the state, in which name = 'Texas'; total beneficiaries of above 10000 refer to total_beneficiaries > 10000;"}
{"sample_id": 5165, "db_id": "address", "final": {"question": "Among the postal points in the District of Columbia, how many of them have an area with above 20000 black population?", "sql": "SELECT COUNT(T1.zip_code) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'DISTRICT OF COLUMBIA' AND T2.black_population > 20000", "source_tables": ["country", "zip_data"]}, "evidence": "District of Columbia refers to county = 'DISTRICT OF COLUMBIA'; postal points refer to zip_code; area with above 20000 black population refers to black_population > 20000;"}
{"sample_id": 5166, "db_id": "address", "final": {"question": "Provide the city where zip code 19019 is located and the alias of that city.", "sql": "SELECT T2.city, T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.zip_code = 19019", "source_tables": ["alias", "zip_data"]}, "evidence": ""}
{"sample_id": 5167, "db_id": "address", "final": {"question": "List the bad alias of the postal point located in Camuy.", "sql": "SELECT T1.bad_alias FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Camuy'", "source_tables": ["zip_data", "avoid"]}, "evidence": "postal points refer to zip_code; Camuy is the city;"}
{"sample_id": 5168, "db_id": "address", "final": {"question": "Provide the zip code, city, and congress representative's full names of the area which has highest population in 2020.", "sql": "SELECT T1.zip_code, T1.city, T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id GROUP BY T2.district ORDER BY T1.population_2020 DESC LIMIT 1", "source_tables": ["zip_congress", "congress", "zip_data"]}, "evidence": "representative's full names refer to first_name, last_name; area which has highest population in 2020 refers to MAX(population_2020);"}
{"sample_id": 5169, "db_id": "address", "final": {"question": "Among the daylight savings areas in the Midwest region, how many postal points are there in Illinois?", "sql": "SELECT COUNT(T2.zip_code) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Illinois' AND T2.daylight_savings = 'Yes' AND T2.region = 'Midwest'", "source_tables": ["state", "zip_data"]}, "evidence": "postal points refer to zip_code; the daylight savings areas refer to daylight_savings = 'Yes'; Illinois is the name of the state, in which name = 'Illinois';"}
{"sample_id": 5170, "db_id": "address", "final": {"question": "Provide the countries and the zip codes in the Virgin Islands.", "sql": "SELECT T2.county, T2.zip_code FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Virgin Islands'", "source_tables": ["state", "country"]}, "evidence": "the Virgin Islands refer to state where name = 'Virgin Islands';"}
{"sample_id": 5171, "db_id": "address", "final": {"question": "Provide the zip codes and the alias of Greeneville.", "sql": "SELECT T2.zip_code, T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Greeneville'", "source_tables": ["alias", "zip_data"]}, "evidence": "Greeneville is the city;"}
{"sample_id": 5232, "db_id": "beer_factory", "final": {"question": "What is the name of the root beer brand that has the longest history?", "sql": "SELECT BrandName FROM rootbeerbrand WHERE FirstBrewedYear = ( SELECT MIN(FirstBrewedYear) FROM rootbeerbrand )", "source_tables": ["rootbeerbrand"]}, "evidence": "name of the root beer brand refers to BrandName; longest history refers to MIN(FirstBrewedYear);"}
{"sample_id": 5233, "db_id": "beer_factory", "final": {"question": "How many breweries are located in North America?", "sql": "SELECT COUNT(BrandID) FROM rootbeerbrand WHERE Country = 'United States'", "source_tables": ["rootbeerbrand"]}, "evidence": "North America refers to country = 'United States'; North America is the name of continent where country = 'United States' is located;"}
{"sample_id": 5234, "db_id": "beer_factory", "final": {"question": "Please list the names of all the root beer brands that are advertised on facebook.", "sql": "SELECT BrandName FROM rootbeerbrand WHERE FacebookPage IS NOT NULL", "source_tables": ["rootbeerbrand"]}, "evidence": "name of the root beer brand refers to BrandName; advertised on facebook refers to FacebookPage IS not NULL;"}
{"sample_id": 5235, "db_id": "beer_factory", "final": {"question": "What is the name of the root beer brand with the lowest unit profit available to wholesalers?", "sql": "SELECT BrandName FROM rootbeerbrand ORDER BY CurrentRetailPrice - WholesaleCost LIMIT 1", "source_tables": ["rootbeerbrand"]}, "evidence": "name of the root beer brand refers to BrandName; lowest unit profit available to wholesalers refers to MIN(SUBTRACT(CurrentRetailPrice, WholesaleCost));"}
{"sample_id": 5236, "db_id": "beer_factory", "final": {"question": "What is the description of the root beer brand A&W?", "sql": "SELECT Description FROM rootbeerbrand WHERE BrandName = 'A&W'", "source_tables": ["rootbeerbrand"]}, "evidence": "A&W refers to BrandName = 'A&W';"}
{"sample_id": 5237, "db_id": "beer_factory", "final": {"question": "In which city is the brewery AJ Stephans Beverages located?", "sql": "SELECT City FROM rootbeerbrand WHERE BreweryName = 'AJ Stephans Beverages'", "source_tables": ["rootbeerbrand"]}, "evidence": "AJ Stephans refers to BreweryName = 'AJ Stephans Beverages';"}
{"sample_id": 5238, "db_id": "beer_factory", "final": {"question": "How many transactions had Frank-Paul Santangelo made in July, 2014?", "sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND STRFTIME('%Y-%m', T2.TransactionDate) = '2014-07'", "source_tables": ["transaction", "customers"]}, "evidence": "in July, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '07';"}
{"sample_id": 5239, "db_id": "beer_factory", "final": {"question": "Among the transactions made in July, 2014, how many of them were made by a male customer?", "sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Gender = 'M' AND STRFTIME('%Y-%m', T2.TransactionDate) = '2014-07'", "source_tables": ["transaction", "customers"]}, "evidence": "in July, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '07'; male customer refers to Gender = 'M';"}
{"sample_id": 5240, "db_id": "beer_factory", "final": {"question": "Among the users that permit the company to send regular emails to them, how many of them had made a transaction with a Visa card in July, 2014?", "sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.SubscribedToEmailList = 'TRUE' AND T2.CreditCardType = 'Visa' AND STRFTIME('%Y-%m', T2.TransactionDate) = '2014-07'", "source_tables": ["transaction", "customers"]}, "evidence": "users permit the company to send regular emails to them refers to subscribedtoemaillist = 'TRUE'; Visa card refers to creditcardtype = 'Visa'; in July, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '07';"}
{"sample_id": 5241, "db_id": "beer_factory", "final": {"question": "What is the full name of the customer that had made the most transactions in August, 2014?", "sql": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y-%m', T2.TransactionDate) = '2014-08' GROUP BY T1.CustomerID ORDER BY COUNT(T2.CustomerID) DESC LIMIT 1", "source_tables": ["transaction", "customers"]}, "evidence": "full name = First, Last; made the most transactions refers to MAX(COUNT(TransactionID)); in August, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08';"}
{"sample_id": 5242, "db_id": "beer_factory", "final": {"question": "Please list the brands of all the root beer that Frank-Paul Santangelo had purchased on 2014/7/7.", "sql": "SELECT DISTINCT T4.BrandName FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND T2.TransactionDate = '2014-07-07'", "source_tables": ["transaction", "rootbeerbrand", "rootbeer", "customers"]}, "evidence": "brands of the root beer refers to BrandName; purchased on 2014/7/7 refers to transactiondate = '2014-07-07';"}
{"sample_id": 5243, "db_id": "beer_factory", "final": {"question": "Of the 4 root beers that Frank-Paul Santangelo purchased on 2014/7/7, how many of them were in cans?", "sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND T2.TransactionDate = '2014-07-07' AND T3.ContainerType = 'Can'", "source_tables": ["transaction", "rootbeer", "customers"]}, "evidence": "on 2014/7/7 refers to transactiondate = '2014-07-07'; in cans refers to containertype = 'Can';"}
{"sample_id": 5244, "db_id": "beer_factory", "final": {"question": "How many root beers of the Bulldog were purchased in August, 2014?", "sql": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN 'transaction' AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014-08%' AND T3.BrandName = 'Bulldog'", "source_tables": ["rootbeer", "rootbeerbrand", "transaction"]}, "evidence": "Bulldog refers to BrandName = 'Bulldog'; purchased in August, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08';"}
{"sample_id": 5245, "db_id": "beer_factory", "final": {"question": "Please list the full names of the customers who have purchased at least one root beer produced by AJ Stephans Beverages.", "sql": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T4.BreweryName = 'AJ Stephans Beverages'", "source_tables": ["transaction", "rootbeerbrand", "rootbeer", "customers"]}, "evidence": "full name = First, Last; customers who have purchased at least one root beer refers to CustomerID > = 1; produced by AJ Stephans Beverages refers to BreweryName = 'AJ Stephans Beverages';"}
{"sample_id": 5246, "db_id": "beer_factory", "final": {"question": "Among the root beer brands that do not advertise on Twitter, how many of them have root beers sold in August, 2014?", "sql": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN 'transaction' AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014-08%' AND T3.Twitter IS NULL", "source_tables": ["rootbeer", "rootbeerbrand", "transaction"]}, "evidence": "do not advertise on Twitter refers to twitter IS NULL; in August, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08';"}
{"sample_id": 5247, "db_id": "beer_factory", "final": {"question": "What is the number of the credit card that Frank-Paul Santangelo used to purchase root beers on 2014/7/7?", "sql": "SELECT DISTINCT T2.CreditCardNumber FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND T2.TransactionDate = '2014-07-07'", "source_tables": ["transaction", "customers"]}, "evidence": "number of the credit card refers to CreditCardNumber; on 2014/7/7 refers to TransactionDate = '2014-07-07';"}
{"sample_id": 5248, "db_id": "beer_factory", "final": {"question": "Among all the root beers purchased by Frank-Paul Santangelo, how many of them were non-sweetened?", "sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND T4.ArtificialSweetener = 'FALSE' AND T4.Honey = 'FALSE'", "source_tables": ["transaction", "rootbeerbrand", "rootbeer", "customers"]}, "evidence": "non-sweetened refers to honey = 'FALSE' AND artificialsweetener = 'FALSE';"}
{"sample_id": 5249, "db_id": "beer_factory", "final": {"question": "Please list the dates on which a male customer has purchased more than 3 root beers.", "sql": "SELECT T2.TransactionDate FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Gender = 'M' GROUP BY T2.TransactionDate HAVING COUNT(T2.CustomerID) > 3", "source_tables": ["transaction", "customers"]}, "evidence": "dates of purchase refers to TransactionDate; male customer refers to Gender = 'M'; purchased more than 3 root beers refers to COUNT(CustomerID) > 3;"}
{"sample_id": 5250, "db_id": "beer_factory", "final": {"question": "What is the average number of root beers of the brand A&W sold in a day in August, 2014?", "sql": "SELECT CAST(COUNT(T1.BrandID) AS REAL) / 31 FROM rootbeer AS T1 INNER JOIN 'transaction' AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014-08%' AND T3.BrandName = 'A&W'", "source_tables": ["rootbeer", "rootbeerbrand", "transaction"]}, "evidence": "average = DIVIDE(SUM(COUNT(RootBeerID WHERE BrandName = 'A&W' AND SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08')), 31); A&W refers to BrandName = 'A&W'; in August, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08';"}
{"sample_id": 5251, "db_id": "beer_factory", "final": {"question": "Among all the root beers sold in 2014, what is the percentage of the root beers produced by the brewery AJ Stephans Beverages?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.BreweryName = 'AJ Stephans Beverages' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN 'transaction' AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014%'", "source_tables": ["rootbeer", "rootbeerbrand", "transaction"]}, "evidence": "sold in 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014'; percentage = DIVIDE(MULTIPLY(SUM(BreweryName = 'AJ Stephans Beverages'), 1.0), COUNT(RootBeerID)) WHERE SUBSTR(TransactionDate, 1, 4) = '2014'; AJ Stephans Beverages refers to BreweryName = 'AJ Stephans Beverages';"}
{"sample_id": 5252, "db_id": "beer_factory", "final": {"question": "Tell the number of reviews given by James House.", "sql": "SELECT COUNT(T2.CustomerID) FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'James' AND T1.Last = 'House'", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "FALSE;"}
{"sample_id": 5253, "db_id": "beer_factory", "final": {"question": "Show the credit card number of Lisa Ling.", "sql": "SELECT DISTINCT T2.CreditCardNumber FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Lisa' AND T1.Last = 'Ling'", "source_tables": ["transaction", "customers"]}, "evidence": "FALSE;"}
{"sample_id": 5254, "db_id": "beer_factory", "final": {"question": "State the coordinate of Sac State American River Courtyard.", "sql": "SELECT T2.Latitude, T2.Longitude FROM location AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID WHERE T1.LocationName = 'Sac State American River Courtyard'", "source_tables": ["geolocation", "location"]}, "evidence": "coordinate = Latitude, Longitude; Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard';"}
{"sample_id": 5255, "db_id": "beer_factory", "final": {"question": "Provide the name of the location where transaction no.100885 happened.", "sql": "SELECT T2.LocationName FROM 'transaction' AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.TransactionID = 100885", "source_tables": ["location", "transaction"]}, "evidence": "name of the location refers to LocationName; transaction no. refers to TransactionID; TransactionID = 100885;"}
{"sample_id": 5256, "db_id": "beer_factory", "final": {"question": "Which city does the customer who finished transaction no.103545 live in?", "sql": "SELECT T1.City FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.TransactionID = 103545", "source_tables": ["transaction", "customers"]}, "evidence": "transaction no. refers to TransactionID; TransactionID = 103545;"}
{"sample_id": 5257, "db_id": "beer_factory", "final": {"question": "What is the phone number of the customer who owns the credit card of number 6011179359005380?", "sql": "SELECT DISTINCT T1.PhoneNumber FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CreditCardNumber = 6011179359005382", "source_tables": ["transaction", "customers"]}, "evidence": "FALSE;"}
{"sample_id": 5258, "db_id": "beer_factory", "final": {"question": "Which customer has the most reviews? State the full name.", "sql": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.CustomerID ORDER BY COUNT(T2.CustomerID) DESC LIMIT 1", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "customer that has the most reviews refers to MAX(COUNT(CustomerID)); full name = First, Last;"}
{"sample_id": 5259, "db_id": "beer_factory", "final": {"question": "For the customer who leaves the review content of \"Tastes like Australia.\", when was his/her first purchase date?", "sql": "SELECT T1.FirstPurchaseDate FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Review = 'Tastes like Australia.'", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "review content of \"Tastes like Australia.\" refers to Review = 'Tastes like Australia.';"}
{"sample_id": 5260, "db_id": "beer_factory", "final": {"question": "When did Natalie Dorris buy her first root beer?", "sql": "SELECT T2.TransactionDate FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Natalie' AND T1.Last = 'Dorris' ORDER BY T2.TransactionDate LIMIT 1", "source_tables": ["transaction", "customers"]}, "evidence": "when a customer bought their first root beer refers to FirstPurchaseDate;"}
{"sample_id": 5261, "db_id": "beer_factory", "final": {"question": "For the root beer brand with the most 5 star ratings, what is the name of the brewery?", "sql": "SELECT T1.BreweryName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5 GROUP BY T1.BrandID ORDER BY COUNT(T2.StarRating) DESC LIMIT 1", "source_tables": ["rootbeerreview", "rootbeerbrand"]}, "evidence": "most 5 star ratings refers to MAX(COUNT(StarRating = 5)); name of the brewery refers to BreweryName;"}
{"sample_id": 5262, "db_id": "beer_factory", "final": {"question": "For the customer who gave a 3 star rating to Frostie brand on 2014/4/24, did the user permit the company to send regular emails to him/her?", "sql": "SELECT CASE WHEN T1.SubscribedToEmailList LIKE 'TRUE' THEN 'YES' ELSE 'NO' END AS result FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T2.BrandID = T3.BrandID WHERE T2.StarRating = 3 AND T3.BrandName = 'Frostie' AND T2.ReviewDate = '2014-04-24'", "source_tables": ["rootbeerreview", "rootbeerbrand", "customers"]}, "evidence": "3 star rating refers to StarRating = 3; Frostie refers to\u00a0 BrandName = 'Frostie'; if SubscribedToEmailList = 'TRUE', it means the user permit the company to send regular emails to him/her; if SubscribedToEmailList = FALSE', it means the user did not permit the company to send regular emails to him/her; rating on 2014/4/24 refers to ReviewDate = '2014-04-24';"}
{"sample_id": 5263, "db_id": "beer_factory", "final": {"question": "For the root beer brand which got the review with the content of \"The quintessential dessert root beer. No ice cream required.\", what is the current retail price of the root beer?", "sql": "SELECT T1.CurrentRetailPrice - T1.WholesaleCost AS price FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.Review = 'The quintessential dessert root beer. No ice cream required.'", "source_tables": ["rootbeerreview", "rootbeerbrand"]}, "evidence": "review with the content of \"The quintessential dessert root beer. No ice cream required.\" refers to Review = 'The quintessential dessert root beer. No ice cream required.';"}
{"sample_id": 5264, "db_id": "beer_factory", "final": {"question": "What is the percentage of 5 star ratings River City brand root beer get?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.StarRating = 5 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.StarRating) FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T1.BrandName = 'River City'", "source_tables": ["rootbeerreview", "rootbeerbrand"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(BrandID WHERE StarRating = 5), COUNT(BrandID) WHERE BrandName = 'River City'), 1.0); 5 star ratings refers to StarRating = 5; River City refers to BrandName = 'River City';"}
{"sample_id": 5265, "db_id": "beer_factory", "final": {"question": "What is the average number of reviews of all the root beer brands from \"CA\" State?", "sql": "SELECT CAST(COUNT(*) AS REAL) / COUNT(DISTINCT T1.BrandID) AS avgreview FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T1.State = 'CA'", "source_tables": ["rootbeerreview", "rootbeerbrand"]}, "evidence": "average = DIVIDE(COUNT(CustomerID), COUNT(BrandID) WHERE state = CA); \n"}
{"sample_id": 5266, "db_id": "beer_factory", "final": {"question": "How many female customers permit the company to send regular emails to them?", "sql": "SELECT COUNT(CustomerID) FROM customers WHERE Gender = 'F' AND SubscribedToEmailList = 'TRUE'", "source_tables": ["customers"]}, "evidence": "female refers to Gender = 'F'; customer permits the company to send regular emails to them refers to SubscribedToEmailList = 'TRUE';"}
{"sample_id": 5267, "db_id": "beer_factory", "final": {"question": "What is the name of the brand of the beer with the shortest brewed history?", "sql": "SELECT BrandName FROM rootbeerbrand ORDER BY FirstBrewedYear DESC LIMIT 1", "source_tables": ["rootbeerbrand"]}, "evidence": "name of the brand of the beer refers to BrandName; shortest brewed history refers to MAX(FirstBrewedYear);"}
{"sample_id": 5268, "db_id": "beer_factory", "final": {"question": "What are the full names of the first top 10 customers?", "sql": "SELECT First, Last FROM customers ORDER BY FirstPurchaseDate LIMIT 10", "source_tables": ["customers"]}, "evidence": "full name = First Last; first top 10 customers refers to MIN(FirstPurchaseDate) LIMIT 10;"}
{"sample_id": 5269, "db_id": "beer_factory", "final": {"question": "How many breweries are there in Australia?", "sql": "SELECT COUNT(BreweryName) FROM rootbeerbrand WHERE Country = 'Australia'", "source_tables": ["rootbeerbrand"]}, "evidence": "Australia refers to Country = 'Australia';"}
{"sample_id": 5270, "db_id": "beer_factory", "final": {"question": "How many customers are named Charles in Sacramento?", "sql": "SELECT COUNT(CustomerID) FROM customers WHERE First = 'Charles' AND City = 'Sacramento'", "source_tables": ["customers"]}, "evidence": "Sacramento refers to City = 'Sacramento';"}
{"sample_id": 5271, "db_id": "beer_factory", "final": {"question": "How many transactions were paid through MasterCard in 2014?", "sql": "SELECT COUNT(TransactionID) FROM 'transaction' WHERE CreditCardType = 'MasterCard' AND TransactionDate LIKE '2014%'", "source_tables": ["transaction"]}, "evidence": "MasterCard refers to CreditCardType = 'MasterCard'; in 2014 refers to TransactionDate > = '2014-01-01' AND TransactionDate < = '2014-12-31';"}
{"sample_id": 5272, "db_id": "beer_factory", "final": {"question": "Which brand of root beer did Jayne Collins give the lowest rating?", "sql": "SELECT T3.BrandName FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T2.BrandID = T3.BrandID WHERE T1.First = 'Jayne' AND T1.Last = 'Collins' AND T2.StarRating = 1", "source_tables": ["rootbeerreview", "rootbeerbrand", "customers"]}, "evidence": "brand of root beer refers to BrandName; lowest rating refers to MIN(StarRating);"}
{"sample_id": 5273, "db_id": "beer_factory", "final": {"question": "How many sweet bottled root beers that do not contain cane sugar were purchased in 2015 through the selling company located in Sac State American River Courtyard?", "sql": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID INNER JOIN location AS T3 ON T1.LocationID = T3.LocationID WHERE T3.LocationName = 'Sac State American River Courtyard' AND T1.PurchaseDate LIKE '2015%' AND T2.Honey = 'TRUE' AND T2.CaneSugar = 'FALSE' AND T1.ContainerType = 'Bottle'", "source_tables": ["rootbeer", "rootbeerbrand", "location"]}, "evidence": "sweet refers to Honey = 'TRUE'; bottled refers to ContainerType = 'Bottle'; do not contain cane sugar refers to CaneSugar = 'FALSE'; in 2015 refers to PurchaseDate < = '2015-12-31'; Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard';"}
{"sample_id": 5274, "db_id": "beer_factory", "final": {"question": "Which brewery does the most purchased root beer in 2016 belong to?", "sql": "SELECT T2.BreweryName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T1.PurchaseDate BETWEEN '2016-01-01' AND '2016-12-31' GROUP BY T2.BrandID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1", "source_tables": ["rootbeer", "rootbeerbrand"]}, "evidence": "most purchased root beer refers to MAX(COUNT(BrandID)); in 2016 refers to PurchaseDate > = '2016-01-01' AND PurchaseDate < = '2016-12-31';"}
{"sample_id": 5275, "db_id": "beer_factory", "final": {"question": "What are the full names of the customer who gave River City a 5-star?", "sql": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T2.BrandID = T3.BrandID WHERE T3.BrandName = 'River City' AND T2.StarRating = 5", "source_tables": ["rootbeerreview", "rootbeerbrand", "customers"]}, "evidence": "full name = First, Last; River City refers to BrandName = 'River City'; 5-star refers to StarRating = 5;"}
{"sample_id": 5276, "db_id": "beer_factory", "final": {"question": "How many root beers did Tom Hanks purchase between 2015 to 2016?", "sql": "SELECT COUNT(T2.RootBeerID) FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Tom' AND T1.Last = 'Hanks' AND T2.TransactionDate BETWEEN '2015-01-01' AND '2016-12-31'", "source_tables": ["transaction", "customers"]}, "evidence": "between 2015 to 2016 refers to TransactionDate > = '2015-01-01' AND TransactionDate < '2016-12-31';"}
{"sample_id": 5277, "db_id": "beer_factory", "final": {"question": "Which brand of root beer was highly rated by customers?", "sql": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5", "source_tables": ["rootbeerreview", "rootbeerbrand"]}, "evidence": "brand of root beer refers to BrandName; highly rated refers to MAX(COUNT(StarRating = 5));"}
{"sample_id": 5278, "db_id": "beer_factory", "final": {"question": "How many Henry Weinhard's were bought by Nicholas Sparks?", "sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T1.First = 'Nicholas' AND T1.Last = 'Sparks' AND T4.BrandName LIKE 'Henry Weinhard%s'", "source_tables": ["transaction", "rootbeerbrand", "rootbeer", "customers"]}, "evidence": "Henry Weinhard's refers to BrandName = 'Henry Weinhard''s';"}
{"sample_id": 5279, "db_id": "beer_factory", "final": {"question": "Among the root beer brands that do not advertise on Facebook and Twitter, which brand has the highest number of purchases?", "sql": "SELECT T2.BreweryName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T2.FacebookPage IS NULL AND T2.Twitter IS NULL GROUP BY T2.BrandID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1", "source_tables": ["rootbeer", "rootbeerbrand"]}, "evidence": "do not advertise on Facebook and Twitter refers to FacebookPage IS NULL AND Twitter IS NULL; highest number of purchases refers to MAX(COUNT(BrandID));"}
{"sample_id": 5280, "db_id": "beer_factory", "final": {"question": "Between Sac State Union and Sac State American River Courtyard, which location sold the most Dog n Suds root beer?", "sql": "SELECT T3.LocationName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID INNER JOIN location AS T3 ON T1.LocationID = T3.LocationID WHERE T2.BrandName = 'Dog n Suds' AND T3.LocationName IN ('Sac State American River Courtyard', 'Sac State Union') GROUP BY T1.LocationID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1", "source_tables": ["rootbeer", "rootbeerbrand", "location"]}, "evidence": "Between Sac State Union and Sac State American River Courtyard refers to LocationName IN('Sac State American River Courtyard', 'Sac State Union'); Dog n Suds refers to BrandName = 'Dog n Suds'; sold the most root beer refers to MAX(COUNT(BrandID));"}
{"sample_id": 5281, "db_id": "beer_factory", "final": {"question": "How many canned A&W were purchased in 2016?", "sql": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T1.ContainerType = 'Can' AND T2.BrandName = 'A&W' AND T1.PurchaseDate LIKE '2016%'", "source_tables": ["rootbeer", "rootbeerbrand"]}, "evidence": "canned refers to ContainerType = 'Can'; A&W refers to BrandName = 'A&W'; in 2016 refers to PurchaseDate > = '2016-01-01' AND PurchaseDate < = '2016-12-31';"}
{"sample_id": 5282, "db_id": "beer_factory", "final": {"question": "What is the precise location of Sac State Union?", "sql": "SELECT T2.Latitude, T2.Longitude FROM location AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID WHERE T1.LocationName = 'Sac State Union'", "source_tables": ["geolocation", "location"]}, "evidence": "precise location = Latitude, Longitude; Sac State Union refers to LocationName = 'Sac State Union';"}
{"sample_id": 5283, "db_id": "beer_factory", "final": {"question": "What are the brands of the root beers that received 5-star ratings from no less than 5 customers?", "sql": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5 GROUP BY T2.BrandID HAVING COUNT(T2.StarRating) >= 5", "source_tables": ["rootbeerreview", "rootbeerbrand"]}, "evidence": "brand of the root beer refers to BrandName; 5-star ratings\u00a0refers to StarRating = 5; no less than 5 customers refers to COUNT(CustomerID) > = 5;"}
{"sample_id": 5284, "db_id": "beer_factory", "final": {"question": "List the brands of root beer produced by Dr Pepper Snapple Group and calculate their percentage of purchases between 2014 to 2016.", "sql": "SELECT T1.BrandName , CAST(SUM(CASE WHEN T2.PurchaseDate >= '2014-01-01' AND T2.PurchaseDate <= '2016-12-31' THEN 1 ELSE 0 END) AS REAL) / COUNT(T2.BrandID) AS purchase FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID WHERE T1.BreweryName = 'Dr Pepper Snapple Group' GROUP BY T2.BrandID", "source_tables": ["rootbeer", "rootbeerbrand"]}, "evidence": "brand of root beer refers to BrandName; produced by Dr Pepper Snapple Group refers to BreweryName = 'Dr Pepper Snapple Group'; percentage of purchases = MULTIPLY(DIVIDE(SUM(BrandID WHERE PurchaseDate > = '2014-01-01' AND PurchaseDate < = '2016-12-31'), COUNT(BrandID) WHERE BreweryName = 'Dr Pepper Snapple Group'), 1.0); between 2014 to 2016 refers to PurchaseDate > = '2014-01-01' AND PurchaseDate < = '2016-12-31;"}
{"sample_id": 5285, "db_id": "beer_factory", "final": {"question": "Which brand of root beer has the lowest unit profit available to wholesalers? Indicate the ID of the customer that has the highest number of purchases of the said brand.", "sql": "SELECT T3.BrandName, T2.CustomerID FROM rootbeer AS T1 INNER JOIN 'transaction' AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID GROUP BY T3.BrandID ORDER BY T3.CurrentRetailPrice - T3.WholesaleCost, COUNT(T1.BrandID) DESC LIMIT 1", "source_tables": ["rootbeer", "rootbeerbrand", "transaction"]}, "evidence": "brand of root beer refers to BrandName; lowest unit profit available to wholesalers refers to MIN(SUBTRACT(CurrentRetailPrice, WholesaleCost)); ID of the customer refers to CustomerID; highest number of purchases refers to MAX(COUNT(CustomerID));"}
{"sample_id": 5286, "db_id": "beer_factory", "final": {"question": "List the full name and phone number of male customers from Fair Oaks who are subscribed to the email list.", "sql": "SELECT First, Last, PhoneNumber FROM customers WHERE Gender = 'M' AND City = 'Fair Oaks' AND SubscribedToEmailList = 'TRUE'", "source_tables": ["customers"]}, "evidence": "full name = First, Last; male customers refers to Gender = 'M'; Fair Oaks refers to City = 'Fair Oaks'; subscribed to the email list refers to SubscribedToEmailList = 'TRUE';"}
{"sample_id": 5287, "db_id": "beer_factory", "final": {"question": "Among the root beer purchased in 2014, what percentage were sold in cans?", "sql": "SELECT CAST(COUNT(CASE WHEN ContainerType = 'Can' THEN RootBeerID ELSE NULL END) AS REAL) * 100 / COUNT(RootBeerID) FROM rootbeer WHERE PurchaseDate LIKE '2014%'", "source_tables": ["rootbeer"]}, "evidence": "in 2014 refers to PurchaseDate > = '2014-01-01' AND PurchaseDate < = '2014-12-31'; percentage = MULTIPLY(DIVIDE(SUM(ContainerType = 'Can'), COUNT(RootBeerID) WHERE PurchaseDate > = '2014-01-01' AND PurchaseDate < = '2014-12-31'), 1.0); in cans refers to ContainerType = 'Can';"}
{"sample_id": 5288, "db_id": "beer_factory", "final": {"question": "Give the name of the brands that brewed their first drink between 1996 and 2000 in the descending order of the date brewed.", "sql": "SELECT BrandName FROM rootbeerbrand WHERE FirstBrewedYear BETWEEN '1996' AND '2000' ORDER BY FirstBrewedYear DESC", "source_tables": ["rootbeerbrand"]}, "evidence": "name of the brands refers to BrandName; between 1996 and 2000 refers to FirstBrewedYear > = 1996 AND FirstBrewedYear < = 2000;"}
{"sample_id": 5289, "db_id": "beer_factory", "final": {"question": "Find the brand Id of the root beer which has the most number of customers who gave 1-star ratings.", "sql": "SELECT BrandID FROM rootbeerreview WHERE StarRating = 1 GROUP BY BrandID ORDER BY COUNT(BrandID) DESC LIMIT 1", "source_tables": ["rootbeerreview"]}, "evidence": "most number of customers who gave 1-star ratings refers to MAX(COUNT(StarRating = 1)); 1-star ratings refers to StarRating = 1;"}
{"sample_id": 5290, "db_id": "beer_factory", "final": {"question": "Among the transactions, what percentage is done by using a visa card?", "sql": "SELECT CAST(COUNT(CASE WHEN CreditCardType = 'Visa' THEN TransactionID ELSE NULL END) AS REAL) * 100 / COUNT(TransactionID) FROM 'transaction'", "source_tables": ["transaction"]}, "evidence": "visa card refers to CreditCardType = 'Visa'; percentage = MULTIPLY(DIVIDE(SUM(CreditCardType = 'Visa'), COUNT(TransactionID)), 1.0);"}
{"sample_id": 5291, "db_id": "beer_factory", "final": {"question": "How many brands of root beers are available in cans and contain corn syrup and artificial sweeteners?", "sql": "SELECT COUNT(BrandID) FROM rootbeerbrand WHERE CornSyrup = 'TRUE' AND ArtificialSweetener = 'TRUE' AND AvailableInCans = 'TRUE'", "source_tables": ["rootbeerbrand"]}, "evidence": "available in cans refers to AvailableInCans = 'TRUE'; contain corn syrup refers to CornSyrup = 'TRUE'; contain artificial sweeteners refers to ArtificialSweetener = 'TRUE';"}
{"sample_id": 5292, "db_id": "beer_factory", "final": {"question": "Calculate the percentage of sales done at Sac State American River Courtyard.", "sql": "SELECT CAST(COUNT(CASE WHEN T2.LocationName = 'Sac State American River Courtyard' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.TransactionID) FROM 'transaction' AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID", "source_tables": ["location", "transaction"]}, "evidence": "percentage = \u00a0 MULTIPLY(DIVIDE(SUM(LocationName = 'Sac State American River Courtyard'), COUNT(LocationID)), 1.0); Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard';"}
{"sample_id": 5293, "db_id": "beer_factory", "final": {"question": "On average how many caffeinated root beers are sold a day?", "sql": "SELECT CAST(COUNT(T2.RootBeerID) AS REAL) / COUNT(DISTINCT T2.PurchaseDate) FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID INNER JOIN 'transaction' AS T3 ON T2.RootBeerID = T3.RootBeerID WHERE T1.Caffeinated = 'TRUE'", "source_tables": ["rootbeer", "rootbeerbrand", "transaction"]}, "evidence": "average = DIVIDE(COUNT(RootBeerID WHERE Caffeinated = 'TRUE'), COUNT(PurchaseDate)); caffeinated refers to Caffeinated = 'TRUE';"}
{"sample_id": 5294, "db_id": "beer_factory", "final": {"question": "Find the root beer with the most and least amount of profit per unit and list the container types in which these root beers are sold.", "sql": "SELECT * FROM ( SELECT T1.BrandName, T2.ContainerType FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID ORDER BY T1.CurrentRetailPrice - T1.WholesaleCost DESC LIMIT 1 ) UNION ALL SELECT * FROM ( SELECT T3.BrandName, T4.ContainerType FROM rootbeerbrand AS T3 INNER JOIN rootbeer AS T4 ON T3.BrandID = T4.BrandID ORDER BY T3.CurrentRetailPrice - T3.WholesaleCost ASC LIMIT 1 )", "source_tables": ["rootbeer", "rootbeerbrand"]}, "evidence": "most amount of profit per unit refers to MAX(SUBTRACT(CurrentRetailPrice, WholesaleCost)); least amount of profit per unit refers to MIN(SUBTRACT(CurrentRetailPrice, WholesaleCost));"}
{"sample_id": 5295, "db_id": "beer_factory", "final": {"question": "What is the average cost of root beers purchased for more than 2 dollars and sold in bottles?", "sql": "SELECT AVG(T2.PurchasePrice) FROM rootbeer AS T1 INNER JOIN 'transaction' AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T1.ContainerType = 'Bottle' AND T2.PurchasePrice > 2", "source_tables": ["rootbeer", "rootbeerbrand", "transaction"]}, "evidence": "average cost = DIVIDE(SUM(PurchasePrice > 2), COUNT(RootBeerID) WHERE PurchasePrice > 2); more than 2 dollars refers to PurchasePrice > 2; in bottles refers to ContainerType = 'Bottle';"}
{"sample_id": 5296, "db_id": "beer_factory", "final": {"question": "Among the root beers sold in bottles, how many are sold at the location 38.559615, -121.42243?", "sql": "SELECT COUNT(T4.BrandID) FROM 'transaction' AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID INNER JOIN location AS T3 ON T1.LocationID = T3.LocationID INNER JOIN rootbeer AS T4 ON T1.RootBeerID = T4.RootBeerID WHERE T2.Latitude = 38.559615 AND T2.Longitude = -121.42243 AND T4.ContainerType = 'Bottle'", "source_tables": ["rootbeer", "location", "geolocation", "transaction"]}, "evidence": "in bottles refers to ContainerType = 'Bottle';\u00a0 location 38.559615, -121.42243 refers to latitude = 38.559615 AND longitude = -121.42243;"}
{"sample_id": 5297, "db_id": "beer_factory", "final": {"question": "Among the customers not subscribed to the mailing list, what percentage has given three or more stars in a review?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.StarRating > 3 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.CustomerID) FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.SubscribedToEmailList = 'FALSE'", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "not subscribed to the mailing list refers to SubscribedToEmailList = 'FALSE'; percentage = MULTIPLY(DIVIDE(SUM(CustomerID WHERE StarRating > 3), COUNT(CustomerID) WHERE SubscribedToEmailList = 'FALSE'), 1.0);"}
{"sample_id": 5298, "db_id": "beer_factory", "final": {"question": "Which root beer got the most five stars in 2012? Give the brand name of this beer.", "sql": "SELECT T3.BrandName FROM rootbeer AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.StarRating = 5 AND strftime('%Y', T2.ReviewDate) = '2012' GROUP BY T1.BrandID ORDER BY COUNT(T2.BrandID) DESC LIMIT 1", "source_tables": ["rootbeer", "rootbeerreview", "rootbeerbrand"]}, "evidence": "most five stars refers to MAX(COUNT(StarRating = 5)); in 2012 refers to FirstBrewedYear = 2012;"}
{"sample_id": 5299, "db_id": "beer_factory", "final": {"question": "In the female customers, how many bought root beer that contains artificial sweetener?", "sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T1.Gender = 'F' AND T4.ArtificialSweetener = 'TRUE'", "source_tables": ["transaction", "rootbeerbrand", "rootbeer", "customers"]}, "evidence": "female refers to Gender = 'F'; contains artificial sweetener refers to ArtificialSweetener = 'TRUE';"}
{"sample_id": 5300, "db_id": "beer_factory", "final": {"question": "Calculate the difference between the number of root beers sold that use cane sugar and corn syrup.", "sql": "SELECT COUNT(CASE WHEN T3.CaneSugar = 'TRUE' THEN T1.BrandID ELSE NULL END) - COUNT(CASE WHEN T3.CornSyrup = 'TRUE' THEN T1.BrandID ELSE NULL END) AS DIFFERENCE FROM rootbeer AS T1 INNER JOIN 'transaction' AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID", "source_tables": ["rootbeer", "rootbeerbrand", "transaction"]}, "evidence": "difference = SUBTRACT(SUM(CaneSugar = 'TRUE'), SUM(CornSyrup = 'TRUE')); use cane sugar refers to CaneSugar = 'TRUE'; corn syrup refers to CornSyrup = 'TRUE';"}
{"sample_id": 5301, "db_id": "beer_factory", "final": {"question": "Which brewery brewed the most sold root beer in 2015?", "sql": "SELECT T3.BreweryName FROM rootbeer AS T1 INNER JOIN 'transaction' AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2015%' GROUP BY T3.BrandID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1", "source_tables": ["rootbeer", "rootbeerbrand", "transaction"]}, "evidence": "brewery refers to BreweryName; most sold root beer refers to MAX(COUNT(BrandID)); in 2015 refers to TransactionDate > = '2015-01-01' AND TransactionDate < = '2015-12-31';"}
{"sample_id": 5302, "db_id": "beer_factory", "final": {"question": "Among the male customers in Sacramento, what percentage bought Dominion root beer in 2013?", "sql": "SELECT CAST(COUNT(CASE WHEN T4.BrandName = 'Dominion' THEN T1.CustomerID ELSE NULL END) AS REAL) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T1.City = 'Sacramento' AND T1.Gender = 'M' AND T2.TransactionDate LIKE '2014%'", "source_tables": ["transaction", "rootbeerbrand", "rootbeer", "customers"]}, "evidence": "male customers refers to Gender = 'M'; Sacramento refers to City = 'Sacramento'; percentage = MULTIPLY(DIVIDE(SUM(BrandID WHERE BrandName = 'Dominion'), COUNT(BrandID) WHERE City = 'Sacramento'), 1.0); Dominion refers to BrandName = 'Dominion'; in 2013 refers to TransactionDate > = 2013-01-01 AND TransactionDate < 2014-01-01;"}
{"sample_id": 5303, "db_id": "beer_factory", "final": {"question": "What is the difference in the average number of sales per day of root beer brands that contain honey and that don\u2019t contain honey.", "sql": "SELECT (CAST(SUM(CASE WHEN T1.Honey = 'TRUE' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT T3.TransactionDate)) - (CAST(SUM(CASE WHEN T1.Honey <> 'TRUE' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT T3.TransactionDate)) FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID INNER JOIN 'transaction' AS T3 ON T2.RootBeerID = T3.RootBeerID", "source_tables": ["rootbeer", "rootbeerbrand", "transaction"]}, "evidence": "difference in the average = SUBTRACT(DIVIDE(MULTIPLY(SUM(Honey = 'TRUE'), 1.0), COUNT(TransactionDate)), DIVIDE(MULTIPLY(SUM(Honey = 'FALSE'), 1.0), COUNT(TransactionDate))); contain honey refers to Honey = 'TRUE'; don\u2019t contain honey refers to Honey = 'FALSE'"}
{"sample_id": 5304, "db_id": "beer_factory", "final": {"question": "Find and list the full name and email of the customers who used American Express cards in Sac State Union.", "sql": "SELECT DISTINCT T1.First, T1.Last, T1.Email FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN location AS T3 ON T2.LocationID = T3.LocationID WHERE T3.LocationName = 'Sac State Union' AND T2.CreditCardType = 'American Express'", "source_tables": ["transaction", "location", "customers"]}, "evidence": "full name = First, Last; American Express cards refers to CreditCardType = 'American Express'; Sac State Union refers to LocationName = 'Sac State Union';"}
{"sample_id": 5305, "db_id": "beer_factory", "final": {"question": "In the reviews of September 2014. Which brand of beers obtained the highest star ratings?", "sql": "SELECT DISTINCT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5 AND T2.ReviewDate BETWEEN '2014-09-01' AND '2014-09-30'", "source_tables": ["rootbeerreview", "rootbeerbrand"]}, "evidence": "September 2014 refers to ReviewDate LIKE '2014-09%'; brand of beers refers to BrandName; highest star ratings refers to MAX(StarRating);"}
{"sample_id": 5306, "db_id": "beer_factory", "final": {"question": "What is the precise location of all paying customers with American Express?", "sql": "SELECT DISTINCT T2.Latitude, T2.Longitude FROM 'transaction' AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID WHERE T1.CreditCardType = 'American Express'", "source_tables": ["geolocation", "transaction"]}, "evidence": "precise location refers to Latitude, Longitude; American Express refers to CreditCardType = 'American Express';"}
{"sample_id": 5307, "db_id": "beer_factory", "final": {"question": "How many Folsom customers prefer to pay with Visa?", "sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.City = 'Folsom' AND T2.CreditCardType = 'Visa'", "source_tables": ["transaction", "customers"]}, "evidence": "Folsom refers to City = 'Folsom'; Visa refers to CreditCardType = 'Visa';"}
{"sample_id": 5308, "db_id": "beer_factory", "final": {"question": "From which cities are the customers who gave 5 stars in their reviews in November 2012?", "sql": "SELECT DISTINCT T1.City FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.StarRating = 5 AND T2.ReviewDate BETWEEN '2012-11-01' AND '2012-11-30'", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "5 stars refers to StarRating = 5; in November 2012 refers to ReviewDate LIKE '2012-11%';"}
{"sample_id": 5309, "db_id": "beer_factory", "final": {"question": "What brands of beer has Peg Winchester consumed?", "sql": "SELECT T3.BrandName FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T2.BrandID = T3.BrandID WHERE T1.First = 'Peg' AND T1.Last = 'Winchester'", "source_tables": ["rootbeerreview", "rootbeerbrand", "customers"]}, "evidence": "brands of beer refers to BrandName;"}
{"sample_id": 5363, "db_id": "sales", "final": {"question": "How many sales ids are there for customer id 80?", "sql": "SELECT COUNT(SalesID) FROM Sales WHERE CustomerID = 80", "source_tables": ["sales"]}, "evidence": ""}
{"sample_id": 5364, "db_id": "sales", "final": {"question": "Count the total quantity for sales from id 1 to 10.", "sql": "SELECT SUM(Quantity) FROM Sales WHERE SalesID BETWEEN 1 AND 10", "source_tables": ["sales"]}, "evidence": "sales from id 1 to 10 refers to SalesID BETWEEN 1 AND 10;"}
{"sample_id": 5365, "db_id": "sales", "final": {"question": "Calculate the average quantity per sales from sales id 20 to 30.", "sql": "SELECT AVG(Quantity) FROM Sales WHERE SalesID BETWEEN 20 AND 30", "source_tables": ["sales"]}, "evidence": "average quantity = AVG(Quantity); SalesID BETWEEN 20 AND 30;"}
{"sample_id": 5366, "db_id": "sales", "final": {"question": "List down the product id for products with the highest quantity.", "sql": "SELECT DISTINCT ProductID FROM Sales WHERE Quantity = ( SELECT MAX(Quantity) FROM Sales )", "source_tables": ["sales"]}, "evidence": "highest quantity refers to MAX(Quantity);"}
{"sample_id": 5367, "db_id": "sales", "final": {"question": "How many product ids have the lowest price?", "sql": "SELECT COUNT(DISTINCT ProductID) FROM Products WHERE Price = ( SELECT MAX(Price) FROM Products )", "source_tables": ["products"]}, "evidence": "lowest price refers to MIN(Price);"}
{"sample_id": 5368, "db_id": "sales", "final": {"question": "List down product names of free gifts.", "sql": "SELECT Name FROM Products WHERE Price = 0", "source_tables": ["products"]}, "evidence": "free gifts refers to Price = 0;"}
{"sample_id": 5369, "db_id": "sales", "final": {"question": "List down the product name for products from id 1 to 10.", "sql": "SELECT Name FROM Products WHERE ProductID BETWEEN 1 AND 10", "source_tables": ["products"]}, "evidence": "products from id 1 to 10 refers to ProductID BETWEEN 1 AND 10;"}
{"sample_id": 5370, "db_id": "sales", "final": {"question": "What is the name of the product with the lowest quantity?", "sql": "SELECT T2.Name FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Quantity LIMIT 1", "source_tables": ["sales", "products"]}, "evidence": "lowest quantity refers to MIN(Quantity);"}
{"sample_id": 5371, "db_id": "sales", "final": {"question": "How many customer ids have purchased Hex Nut 9?", "sql": "SELECT COUNT(T1.CustomerID) FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Hex Nut 9'", "source_tables": ["sales", "products"]}, "evidence": "Hex Nut 9' is name of product;"}
{"sample_id": 5372, "db_id": "sales", "final": {"question": "Calculate the total sales ids that were sales of Flat Washer 8.", "sql": "SELECT COUNT(T1.SalesID) FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Flat Washer 8'", "source_tables": ["sales", "products"]}, "evidence": "Flat Washer 8' is name of product;"}
{"sample_id": 5373, "db_id": "sales", "final": {"question": "List down all of the product names that were placed by sales person with id 10.", "sql": "SELECT DISTINCT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.SalesPersonID = 10", "source_tables": ["sales", "products"]}, "evidence": "id refers to SalesPersonID; SalesPersonID = 10"}
{"sample_id": 5374, "db_id": "sales", "final": {"question": "List down the first name of customers who placed order for product id 1.", "sql": "SELECT T1.FirstName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T2.ProductID = 1", "source_tables": ["sales", "products", "customers"]}, "evidence": ""}
{"sample_id": 5375, "db_id": "sales", "final": {"question": "What is the last name of the customer who placed an order for sales id 178?", "sql": "SELECT T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.SalesID = 178", "source_tables": ["sales", "customers"]}, "evidence": ""}
{"sample_id": 5376, "db_id": "sales", "final": {"question": "List down product ids that were purchased by customers called Abby.", "sql": "SELECT DISTINCT T1.ProductID FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Abby'", "source_tables": ["sales", "customers"]}, "evidence": ""}
{"sample_id": 5377, "db_id": "sales", "final": {"question": "Write down all of the product ids that were placed by Meander.", "sql": "SELECT DISTINCT T2.ProductID FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID WHERE T1.FirstName = 'Meander'", "source_tables": ["employees", "sales"]}, "evidence": ""}
{"sample_id": 5378, "db_id": "sales", "final": {"question": "What is the last name of sales person for sales id 100?", "sql": "SELECT T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID WHERE T2.SalesID = 100", "source_tables": ["employees", "sales"]}, "evidence": ""}
{"sample_id": 5379, "db_id": "sales", "final": {"question": "What is the first name of employee who handled sales for customer called Abigail?", "sql": "SELECT DISTINCT T3.FirstName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID WHERE T1.FirstName = 'Abigail'", "source_tables": ["employees", "sales", "customers"]}, "evidence": ""}
{"sample_id": 5380, "db_id": "sales", "final": {"question": "How many free gifts have customer with id 11782 received?", "sql": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.CustomerID = 11782 AND T1.Price = 0", "source_tables": ["sales", "products"]}, "evidence": "free gifts refers to Price = 0;"}
{"sample_id": 5381, "db_id": "sales", "final": {"question": "What is the full name of customers who dealt with sales person with id 5?", "sql": "SELECT T1.FirstName, T1.MiddleInitial, T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.SalesPersonID = 5", "source_tables": ["sales", "customers"]}, "evidence": "full name = FirstName, MiddleInitial, LastName;"}
{"sample_id": 5382, "db_id": "sales", "final": {"question": "List down all of the sales IDs for sales handled by sales people with first name starting with alphabet \"s\".", "sql": "SELECT T1.SalesID FROM Sales AS T1 INNER JOIN Employees AS T2 ON T1.SalesPersonID = T2.EmployeeID WHERE SUBSTR(T2.FirstName, 1, 1) = 's'", "source_tables": ["employees", "sales"]}, "evidence": "first name starting with alphabet \"s\" refers to FirstName LIKE 's%';"}
{"sample_id": 5383, "db_id": "sales", "final": {"question": "Among customers with IDs from 1 to 100, what is the highest price of products they purchased?", "sql": "SELECT T1.Price FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.CustomerID BETWEEN 1 AND 100 ORDER BY T1.Price DESC LIMIT 1", "source_tables": ["sales", "products"]}, "evidence": "IDs from 1 to 100 refers to CustomerID BETWEEN 1 AND 100 ; highest price refers to MAX(Price);"}
{"sample_id": 5384, "db_id": "sales", "final": {"question": "Among customers with the last name of Valdez, who purchased the highest quantity?", "sql": "SELECT T1.FirstName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.LastName = 'Valdez' ORDER BY T2.Quantity DESC LIMIT 1", "source_tables": ["sales", "customers"]}, "evidence": "highest quantity refers to MAX(Quantity);"}
{"sample_id": 5385, "db_id": "sales", "final": {"question": "Sum up the number sales ids handled by employees called Morningstar, Heather and Dean.", "sql": "SELECT SUM(IIF(T2.FirstName = 'Morningstar', 1, 0)) + SUM(IIF(T2.FirstName = 'Heather', 1, 0)) + SUM(IIF(T2.FirstName = 'Dean', 1, 0)) AS num FROM Sales AS T1 INNER JOIN Employees AS T2 ON T1.SalesPersonID = T2.EmployeeID", "source_tables": ["employees", "sales"]}, "evidence": "SUM = ADD(SUM(SalesID WHERE FirstName = 'Morningstar'), SUM(SalesID WHERE FirstName = 'Heather'), SUM(SalesID WHERE FirstName = 'Dean'));"}
{"sample_id": 5386, "db_id": "sales", "final": {"question": "Has Alex purchased product with id 498?", "sql": "SELECT IIF(T1.ProductID = 498, 'YES', 'NO') FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Alex'", "source_tables": ["sales", "customers"]}, "evidence": "WHEN ProductID = 498 AND FirstName = 'Alex' means that Alex purchased a product; WHEN ProductID = 498 AND FirstName NOT 'Alex' means Alex has not purchased a product;"}
{"sample_id": 5387, "db_id": "sales", "final": {"question": "Calculate the total price of products purchased by Adam.", "sql": "SELECT SUM(T3.Price * T2.quantity) FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.FirstName = 'Adam'", "source_tables": ["sales", "products", "customers"]}, "evidence": "total price = SUM(MULTIPLY(Price, Quantity));"}
{"sample_id": 5388, "db_id": "sales", "final": {"question": "Calculate the total price for products from id 400 to 500.", "sql": "SELECT SUM(T1.Price * T2.quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID BETWEEN 400 AND 500", "source_tables": ["sales", "products"]}, "evidence": "total price = SUM(MULTIPLY(Price, Quantity)); from id 400 to 500 refers to ProductID BETWEEN 400 AND 500;"}
{"sample_id": 5389, "db_id": "sales", "final": {"question": "Calculate the total quantity of products with name starting with alphabet \"c\".", "sql": "SELECT SUM(T2.Quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE SUBSTR(T1.Name, 1, 1) = 'C'", "source_tables": ["sales", "products"]}, "evidence": "name starting with alphabet \"c\" refers to Name LIKE 'C%';"}
{"sample_id": 5390, "db_id": "sales", "final": {"question": "Calculate the total quantity of products purchased by customer called Adrian.", "sql": "SELECT SUM(T2.Quantity) FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.FirstName = 'Adam'", "source_tables": ["sales", "customers"]}, "evidence": ""}
{"sample_id": 5391, "db_id": "sales", "final": {"question": "List the product ID of the top five products, by descending order, in terms of price.", "sql": "SELECT ProductID FROM Products ORDER BY Price DESC LIMIT 5", "source_tables": ["products"]}, "evidence": "top 5 products in terms of Price refers to MAX(Price) LIMIT 5;"}
{"sample_id": 5392, "db_id": "sales", "final": {"question": "Among the products, how many of them are freebies?", "sql": "SELECT COUNT(ProductID) FROM Products WHERE Price = 0", "source_tables": ["products"]}, "evidence": "freebies refers to Price = 0;"}
{"sample_id": 5393, "db_id": "sales", "final": {"question": "Write down the name of products whose sale quantity is more than 950.", "sql": "SELECT DISTINCT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Quantity > 950", "source_tables": ["sales", "products"]}, "evidence": "quantity is more than 950 refers to Quantity > 950;"}
{"sample_id": 5394, "db_id": "sales", "final": {"question": "What is the full name of employee who sold 1000 units?", "sql": "SELECT DISTINCT T2.FirstName, T2.MiddleInitial, T2.LastName FROM Sales AS T1 INNER JOIN Employees AS T2 ON T1.SalesPersonID = T2.EmployeeID WHERE T1.Quantity = 1000", "source_tables": ["employees", "sales"]}, "evidence": "full name of employee = FirstName, MiddleInitial, LastName; units refers to quantity; Quantity = 100"}
{"sample_id": 5395, "db_id": "sales", "final": {"question": "Tally the product name and quantity of the first ten sales.", "sql": "SELECT T3.Name, T2.Quantity FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T2.SalesID BETWEEN 1 AND 10", "source_tables": ["sales", "products", "customers"]}, "evidence": "first ten sales refers to SalesID BETWEEN 1 AND 10;"}
{"sample_id": 5396, "db_id": "sales", "final": {"question": "What is the total sales amount for Reflector?", "sql": "SELECT SUM(T1.Price * T2.quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Reflector'", "source_tables": ["sales", "products"]}, "evidence": "total sales amount = SUM(MULTIPLY(Price, Quantity)); 'Reflector' is name of product;"}
{"sample_id": 5397, "db_id": "sales", "final": {"question": "What is the best selling colour for HL Mountain Frame, 42?", "sql": "SELECT IIF(SUM(IIF(T1.Name = 'HL Mountain Frame - Silver, 42', T2.SalesID, 0)) - SUM(IIF(T1.Name = 'HL Mountain Frame - Black, 42', T2.SalesID, 0)) > 0, 'Silver', 'Black') FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID", "source_tables": ["sales", "products"]}, "evidence": "best selling colour refers to name of product with higher total sales; SUM(SalesID WHERE Name = 'HL Mountain Frame - Silver, 42') > SUM(Name = 'HL Mountain Frame - Black, 42') means Silver is the best selling colour, otherwise Black is the best seling colour;"}
{"sample_id": 5398, "db_id": "sales", "final": {"question": "What is the difference in price between HL Mountain Frame - Black, 42 and LL Mountain Frame - Black, 42?", "sql": "SELECT ( SELECT Price FROM Products WHERE Name = 'HL Mountain Frame - Black, 42' ) - ( SELECT Price FROM Products WHERE Name = 'LL Mountain Frame - Black, 42' ) AS num", "source_tables": ["products"]}, "evidence": "difference = SUBTRACT((Price WHERE Name = 'HL Mountain Frame - Black, 42'), (Price WHERE Name = 'HL Mountain Frame - Black, 42'));"}
{"sample_id": 5399, "db_id": "sales", "final": {"question": "Calculate the total number of sales closed by Michel E. DeFrance?", "sql": "SELECT COUNT(T1.SalesID) FROM Sales AS T1 INNER JOIN Employees AS T2 ON T1.SalesPersonID = T2.EmployeeID WHERE T2.FirstName = 'Michel' AND T2.MiddleInitial = 'e' AND T2.LastName = 'DeFrance'", "source_tables": ["employees", "sales"]}, "evidence": ""}
{"sample_id": 5400, "db_id": "sales", "final": {"question": "What is the average number of customers per sales person?", "sql": "SELECT CAST(COUNT(T1.CustomerID) AS REAL) / COUNT(T3.EmployeeID) FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID", "source_tables": ["employees", "sales", "customers"]}, "evidence": "average = DIVIDE(COUNT(CustomerID), COUNT(EmployeeID));"}
{"sample_id": 5401, "db_id": "sales", "final": {"question": "Among all customers handled by Innes E. del Castillo, how many have purchased Short-Sleeve Classic Jersey, L?", "sql": "SELECT COUNT(T2.CustomerID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID WHERE T3.FirstName = 'Innes' AND T3.LastName = 'del Castillo' AND T1.Name = 'Short-Sleeve Classic Jersey, L' AND T3.MiddleInitial = 'e'", "source_tables": ["employees", "sales", "products"]}, "evidence": "Short-Sleeve Classic Jersey, L' is name of product;"}
{"sample_id": 5402, "db_id": "sales", "final": {"question": "Name the sales person who helped Elizabeth A. White to purchase Road-250 Black, 48.", "sql": "SELECT DISTINCT T3.FirstName, T3.MiddleInitial, T3.LastName FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID INNER JOIN Customers AS T4 ON T2.CustomerID = T4.CustomerID WHERE T4.MiddleInitial = 'A' AND T4.LastName = 'White' AND T1.Name = 'Road-250 Black, 48' AND T4.FirstName = 'Elizabeth'", "source_tables": ["employees", "sales", "products", "customers"]}, "evidence": "name of the sales person = FirstName, MiddleInitial, LastName; 'Road-250 Black, 48' is name of product;"}
{"sample_id": 5403, "db_id": "sales", "final": {"question": "How many sales people managed to sell Headlights - Weatherproof?", "sql": "SELECT COUNT(T2.SalesPersonID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Headlights - Weatherproof'", "source_tables": ["sales", "products"]}, "evidence": "Headlights - Weatherproof' is name of product"}
{"sample_id": 5404, "db_id": "sales", "final": {"question": "Calculate the revenue produced through sales of HL Road Frame - Red, 56.", "sql": "SELECT SUM(T2.Quantity * T1.Price) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'HL Road Frame - Red, 56'", "source_tables": ["sales", "products"]}, "evidence": "revenue = MULTIPLY(SUM(Quantity, Price)); 'HL Road Frame - Red, 56' is name of product;"}
{"sample_id": 5405, "db_id": "sales", "final": {"question": "How many sales transactions were given by the customer named Joe L. Lopez?", "sql": "SELECT COUNT(T1.SalesID) FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Joe' AND T2.MiddleInitial = 'L' AND T2.LastName = 'Lopez'", "source_tables": ["sales", "customers"]}, "evidence": "sales transactions refers to SalesID;"}
{"sample_id": 5406, "db_id": "sales", "final": {"question": "Name the customers who received 'Touring Rim' as a free gift.", "sql": "SELECT DISTINCT T1.FirstName, T1.MiddleInitial, T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T3.Name = 'Touring Rim' AND T3.Price = 0", "source_tables": ["sales", "products", "customers"]}, "evidence": "name of the customer = FirstName, MiddleInitial, LastName; 'Touring Rim' is name of product;"}
{"sample_id": 5407, "db_id": "sales", "final": {"question": "Find the number of customers handled by each of the sales people.", "sql": "SELECT COUNT(CustomerID) FROM Sales GROUP BY SalesPersonID", "source_tables": ["sales"]}, "evidence": ""}
{"sample_id": 5408, "db_id": "sales", "final": {"question": "How many sales people are handling all the customers?", "sql": "SELECT COUNT(EmployeeID) FROM Employees", "source_tables": ["employees"]}, "evidence": ""}
{"sample_id": 5409, "db_id": "sales", "final": {"question": "Identify the name of the sales person with employee ID 7.", "sql": "SELECT FirstName, MiddleInitial, LastName FROM Employees WHERE EmployeeID = 7", "source_tables": ["employees"]}, "evidence": "name of the sales person = FirstName, MiddleInitial, LastName;"}
{"sample_id": 5410, "db_id": "sales", "final": {"question": "Name the most expensive and the least expensive products available, excluding free gifts.", "sql": "SELECT Name FROM Products WHERE Price IN (( SELECT MAX(Price) FROM Products ), ( SELECT MIN(Price) FROM Products ))", "source_tables": ["products"]}, "evidence": "most expensive product refers to MAX(Price); least expensive product refers to MIN(Price); excluding free gifts refers to not including Price = 0;"}
{"sample_id": 5411, "db_id": "sales", "final": {"question": "Among all the customers who have purchased ML Bottom Bracket, identify the percentage of sales by Albert I. Ringer?", "sql": "SELECT CAST(SUM(IIF(T3.FirstName = 'Albert' AND T3.MiddleInitial = 'I' AND T3.LastName = 'Ringer', 1, 0)) AS REAL) * 100 / COUNT(T2.CustomerID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID WHERE T1.Name = 'ML Bottom Bracket'", "source_tables": ["employees", "sales", "products"]}, "evidence": "ML Bottom Bracket' is name of product; percentage = MULTIPLY(DIVIDE(SUM(CustomerID WHERE FirstName = 'Albert' AND MiddleInitial = 'I' AND LastName = 'Ringer'), COUNT(CustomerID)), 1.0);"}
{"sample_id": 5412, "db_id": "sales", "final": {"question": "How many customers have the first name Abigail?", "sql": "SELECT COUNT(CustomerID) FROM Customers WHERE FirstName = 'Abigail'", "source_tables": ["customers"]}, "evidence": ""}
{"sample_id": 5413, "db_id": "sales", "final": {"question": "Indicate the quantity of Blade products sold.", "sql": "SELECT DISTINCT T2.Quantity FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Blade'", "source_tables": ["sales", "products"]}, "evidence": "Blade' is name of product;"}
{"sample_id": 5414, "db_id": "sales", "final": {"question": "Give the full name of the employee who has sold the most quantity.", "sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID ORDER BY T2.Quantity DESC LIMIT 1", "source_tables": ["employees", "sales"]}, "evidence": "full name of the employee = FirstName, LastName; most quantity refers to MAX(Quantity);"}
{"sample_id": 5415, "db_id": "sales", "final": {"question": "List the full name of the customer who purchased the most quantity of products.", "sql": "SELECT T1.FirstName, T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY T2.Quantity DESC LIMIT 1", "source_tables": ["sales", "customers"]}, "evidence": "full name of the customer = FirstName, LastName; most quantity refers to MAX(Quantity);"}
{"sample_id": 5416, "db_id": "sales", "final": {"question": "What is the name of the product that is most sold by sale person id 20?", "sql": "SELECT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.SalesPersonID = 20 ORDER BY T2.Quantity DESC LIMIT 1", "source_tables": ["sales", "products"]}, "evidence": "most sold refers to MAX(Quantity);"}
{"sample_id": 5417, "db_id": "sales", "final": {"question": "List the first names of employees with trading quantity for more than 500.", "sql": "SELECT DISTINCT T1.FirstName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID WHERE T2.Quantity > 500", "source_tables": ["employees", "sales"]}, "evidence": "trading quantity for more than 500 refers to Quantity > 500;"}
{"sample_id": 5418, "db_id": "sales", "final": {"question": "List the first names of customers who have purchased products from sale person id 1.", "sql": "SELECT T1.FirstName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.SalesPersonID = 1", "source_tables": ["sales", "customers"]}, "evidence": ""}
{"sample_id": 5419, "db_id": "sales", "final": {"question": "Calculate the total trading quantity of Abraham sold to Aaron Alexander.", "sql": "SELECT SUM(T2.Quantity) FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID WHERE T2.SalesPersonID = 1 AND T1.FirstName = 'Aaron' AND T1.LastName = 'Alexander' AND T3.FirstName = 'Abraham'", "source_tables": ["employees", "sales", "customers"]}, "evidence": "total trading quantity = SUM(Quantity WHERE Employees.FirstName = 'Abraham' AND Customers.FirstName = 'Aaron' AND Customers.LastName = 'Alexander');"}
{"sample_id": 5420, "db_id": "sales", "final": {"question": "List the full names of customers who have purchased products in quantity over 600.", "sql": "SELECT T1.FirstName, T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Quantity > 600", "source_tables": ["sales", "customers"]}, "evidence": "full names of customers = FirstName, LastName; quantity over 600 refers to quantity > 600;"}
{"sample_id": 5421, "db_id": "sales", "final": {"question": "Among the customers whose first name is Cameron, who bought the product in the most quantity?", "sql": "SELECT T1.FirstName, T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.FirstName = 'Cameron' ORDER BY T2.Quantity DESC LIMIT 1", "source_tables": ["sales", "customers"]}, "evidence": "most quantity refers to MAX(Quantity); who refers to FirstName, LastName;"}
{"sample_id": 5422, "db_id": "sales", "final": {"question": "Please provide sales ID for products named Hex Nut with a price greater than 100.", "sql": "SELECT T2.SalesID FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name LIKE 'Hex Nut%' AND T1.Price > 100", "source_tables": ["sales", "products"]}, "evidence": "price greater than 100 refers to price > 100;"}
{"sample_id": 5423, "db_id": "sales", "final": {"question": "Identify customer IDs who bought products priced from 1000 to 2000.", "sql": "SELECT DISTINCT T2.CustomerID FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Price BETWEEN 1000 AND 2000", "source_tables": ["sales", "products"]}, "evidence": "priced from 1000 to 2000 refers to Price BETWEEN 1000 AND 2000;"}
{"sample_id": 5424, "db_id": "sales", "final": {"question": "Calculate the total quantity of products that are gifts.", "sql": "SELECT SUM(T2.Quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Price = 0", "source_tables": ["sales", "products"]}, "evidence": "total quantity = SUM(Quantity); gifts refers to Price = 0;"}
{"sample_id": 5425, "db_id": "sales", "final": {"question": "Calculate the quantity percentage of the gift products in the total trading quantity.", "sql": "SELECT CAST(SUM(IIF(T1.Price = 0, T2.Quantity, 0)) AS REAL) * 100 / SUM(T2.Quantity)FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID", "source_tables": ["sales", "products"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(Quantity WHERE Price = 0), SUM(Quantity)), 1.0); gift products refers to Price = 0;"}
{"sample_id": 5426, "db_id": "sales", "final": {"question": "Calculate the percentage of sold blades in the total number of transactions.", "sql": "SELECT CAST(SUM(IIF(T1.Name = 'Blade', T2.Quantity, 0)) AS REAL) * 100 / SUM(T2.Quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID", "source_tables": ["sales", "products"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(Quantity WHERE Name = 'Blade'), SUM(Quantity)), 1.0); 'blades' refers to name of product;"}
{"sample_id": 5470, "db_id": "menu", "final": {"question": "How many dishes do not have correct data for the year in which it appeared first?", "sql": "SELECT COUNT(*) FROM Dish WHERE first_appeared < 1851 OR first_appeared > 2012", "source_tables": ["dish"]}, "evidence": "do not have correct data refers to first_appeared < 1851 or first_appeared > 2012;"}
{"sample_id": 5471, "db_id": "menu", "final": {"question": "Which dish lasted longer, Anchovies or Fresh lobsters in every style?", "sql": "SELECT CASE WHEN SUM(CASE WHEN name = 'Anchovies' THEN last_appeared - first_appeared ELSE 0 END) - SUM(CASE WHEN name = 'Fresh lobsters in every style' THEN last_appeared - first_appeared ELSE 0 END) > 0 THEN 'Anchovies' ELSE 'Fresh lobsters in every style' END FROM Dish WHERE name IN ('Fresh lobsters in every style', 'Anchovies')", "source_tables": ["dish"]}, "evidence": "if (SUBTRACT(last_appeared, first_appeared) WHERE name = 'Anchovies') > (SUBTRACT(last_appeared, first_appeared) WHERE name = 'Fresh lobsters in every style'), it means 'Anchovies' lasted longer; if (SUBTRACT(last_appeared , first_appeared) WHERE name = 'Fresh lobsters in every style') > (SUBTRACT(last_appeared , first_appeared) WHERE name = 'Anchovies') it means 'Fresh lobsters in every style' last longer;"}
{"sample_id": 5472, "db_id": "menu", "final": {"question": "Among all the dishes that were once free, what is the name of the dish that had appeared on most menus?", "sql": "SELECT name FROM Dish WHERE lowest_price = 0 ORDER BY menus_appeared DESC LIMIT 1", "source_tables": ["dish"]}, "evidence": "dishes that were once free refers to lowest_price = 0; appeared on most menus refers to MAX(menus_appeared);"}
{"sample_id": 5473, "db_id": "menu", "final": {"question": "How many menus with the name \"Waldorf Astoria\" have 4 pages?", "sql": "SELECT COUNT(*) FROM Menu WHERE name = 'Waldorf Astoria' AND page_count = 4", "source_tables": ["menu"]}, "evidence": "4 pages refers to page_count = 4;"}
{"sample_id": 5474, "db_id": "menu", "final": {"question": "What is the name of the dish that appeared on the upper left corner on menu page no. 1389?", "sql": "SELECT T1.name FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T2.menu_page_id = 1389 AND T2.xpos < 0.25 AND T2.ypos < 0.25", "source_tables": ["dish", "menuitem"]}, "evidence": "appeared on the upper left corner on menu refers to xpos < 0.25 AND ypos < 0.25; menu page no. refers to menu_page_id; menu_page_id = 1389;"}
{"sample_id": 5475, "db_id": "menu", "final": {"question": "Please list the prices of the dish \"Clear green turtle\" on every menu page it appeared on.", "sql": "SELECT T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Clear green turtle'", "source_tables": ["dish", "menuitem"]}, "evidence": "Clear green turtle is a name of dish;"}
{"sample_id": 5476, "db_id": "menu", "final": {"question": "Among all the menu pages with the appearance of the dish \"Clear green turtle\", how many of them have the dish at a stable price?", "sql": "SELECT SUM(CASE WHEN T1.name = 'Clear green turtle' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.highest_price IS NULL", "source_tables": ["dish", "menuitem"]}, "evidence": "Clear green turtle is a name of dish; stable price refers to highest_price is null;"}
{"sample_id": 5477, "db_id": "menu", "final": {"question": "What is the highest price of the dish \"Clear green turtle\" on a menu page?", "sql": "SELECT T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Clear green turtle' ORDER BY T2.price DESC LIMIT 1", "source_tables": ["dish", "menuitem"]}, "evidence": "highest price refers to MAX(Price); Clear green turtle is a name of dish;"}
{"sample_id": 5478, "db_id": "menu", "final": {"question": "Please list the IDs of all the menus in which the dish \"Clear green turtle\" had appeared.", "sql": "SELECT T1.menu_id FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T3.name = 'Clear green turtle'", "source_tables": ["menupage", "dish", "menuitem"]}, "evidence": "Clear green turtle is a name of dish;"}
{"sample_id": 5479, "db_id": "menu", "final": {"question": "Among the menus in which the dish \"Clear green turtle\" had appeared, how many of them used the dollar as their currency?", "sql": "SELECT SUM(CASE WHEN T3.currency = 'Dollars' THEN 1 ELSE 0 END) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T4.name = 'Clear green turtle'", "source_tables": ["menupage", "dish", "menu", "menuitem"]}, "evidence": "Clear green turtle is a name of dish; dollar as currency refers to currency = 'Dollars';"}
{"sample_id": 5480, "db_id": "menu", "final": {"question": "Among the menus in which the dish \"Clear green turtle\" had appeared, how many of them did not support taking out or booking in advance?", "sql": "SELECT SUM(CASE WHEN T4.name = 'Clear green turtle' THEN 1 ELSE 0 END) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T3.call_number IS NULL", "source_tables": ["menupage", "dish", "menu", "menuitem"]}, "evidence": "Clear green turtle is a name of dish; not support taking out or booking in advance refers to call_number is null;"}
{"sample_id": 5481, "db_id": "menu", "final": {"question": "Please list the names of all the dishes that appeared on the menu \"Zentral Theater Terrace\".", "sql": "SELECT T4.name FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T3.name = 'Zentral Theater Terrace'", "source_tables": ["menupage", "dish", "menu", "menuitem"]}, "evidence": "Zentral Theater Terrace is a name of menu;"}
{"sample_id": 5482, "db_id": "menu", "final": {"question": "Which dish has the highest price on the menu \"Zentral Theater Terrace\"? Please give its name.", "sql": "SELECT T4.name FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T3.name = 'Zentral Theater Terrace' ORDER BY T1.price DESC LIMIT 1", "source_tables": ["menupage", "dish", "menu", "menuitem"]}, "evidence": "highest price refers to MAX(Price); Zentral Theater Terrace is a name of menu;"}
{"sample_id": 5483, "db_id": "menu", "final": {"question": "How many dishes are there on the menu \"Zentral Theater Terrace\"?", "sql": "SELECT SUM(CASE WHEN T3.name = 'Zentral Theater Terrace' THEN 1 ELSE 0 END) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id", "source_tables": ["menupage", "menu", "menuitem"]}, "evidence": "Zentral Theater Terrace is a name of menu;"}
{"sample_id": 5484, "db_id": "menu", "final": {"question": "How many dishes are there in total in the menus with the name \"Waldorf Astoria\"?", "sql": "SELECT SUM(CASE WHEN T3.name = 'Waldorf Astoria' THEN 1 ELSE 0 END) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id", "source_tables": ["menupage", "menu", "menuitem"]}, "evidence": "FALSE;"}
{"sample_id": 5485, "db_id": "menu", "final": {"question": "Please list the IDs of the menus that are DIYs of the restaurant and have the dish \"Clear green turtle\".", "sql": "SELECT T2.menu_id FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T4.name = 'Clear green turtle' AND T3.sponsor IS NULL", "source_tables": ["menupage", "dish", "menu", "menuitem"]}, "evidence": "IDs of the menus refers to menu_id; menus that are DIYs of the restaurant refers to sponsor is null; Clear green turtle is a name of dish;"}
{"sample_id": 5486, "db_id": "menu", "final": {"question": "What is the average page number of the menus that have the dish \"Clear green turtle\"?", "sql": "SELECT AVG(T1.page_number) FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T3.name = 'Clear green turtle'", "source_tables": ["menupage", "dish", "menuitem"]}, "evidence": "average page number = AVG(page_number); Clear green turtle is a name of dish;"}
{"sample_id": 5487, "db_id": "menu", "final": {"question": "What is the average price of the dishes on the menu \"Zentral Theater Terrace\"?", "sql": "SELECT SUM(T1.price) / COUNT(T1.price) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id WHERE T3.name = 'Zentral Theater Terrace'", "source_tables": ["menupage", "menu", "menuitem"]}, "evidence": "average price = AVG(price); Zentral Theater Terrace refers to menu;"}
{"sample_id": 5488, "db_id": "menu", "final": {"question": "How many menu items were created on 28th March 2011?", "sql": "SELECT COUNT(*) FROM MenuItem WHERE created_at LIKE '2011-03-28%'", "source_tables": ["menuitem"]}, "evidence": "created on 28th March 2011 refers to created_at like '2011-03-28%';"}
{"sample_id": 5489, "db_id": "menu", "final": {"question": "How many dishes are included in the menu page ID 144?", "sql": "SELECT COUNT(*) FROM MenuItem WHERE menu_page_id = 144", "source_tables": ["menuitem"]}, "evidence": "FALSE;"}
{"sample_id": 5490, "db_id": "menu", "final": {"question": "How many menus were used in Dutcher House?", "sql": "SELECT COUNT(*) FROM Menu WHERE location = 'Dutcher House'", "source_tables": ["menu"]}, "evidence": "Dutcher House refers to location = 'Dutcher House';"}
{"sample_id": 5491, "db_id": "menu", "final": {"question": "How many dishes appeared on a menu more than once?", "sql": "SELECT COUNT(*) FROM Dish WHERE times_appeared > menus_appeared", "source_tables": ["dish"]}, "evidence": "appeared on a menu more than once refers to times_appeared > menus_appeared;"}
{"sample_id": 5492, "db_id": "menu", "final": {"question": "How many menus were created for steamship?", "sql": "SELECT COUNT(*) FROM Menu WHERE venue = 'STEAMSHIP'", "source_tables": ["menu"]}, "evidence": "steamship refers to venue = 'STEAMSHIP';"}
{"sample_id": 5493, "db_id": "menu", "final": {"question": "How many pages were there on the menu created on 17th November 1898?", "sql": "SELECT SUM(CASE WHEN T1.date = '1898-11-17' THEN 1 ELSE 0 END) FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id", "source_tables": ["menupage", "menu"]}, "evidence": "created on 17th November 1898 refers to date = '1898-11-17';"}
{"sample_id": 5494, "db_id": "menu", "final": {"question": "Name the dishes that were on the menu page ID 174.", "sql": "SELECT T2.name FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T1.menu_page_id = 174", "source_tables": ["dish", "menuitem"]}, "evidence": "FALSE;"}
{"sample_id": 5495, "db_id": "menu", "final": {"question": "List the names and menu page IDs of the dishes that first appeared in 1861.", "sql": "SELECT T2.name, T1.dish_id FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T2.first_appeared = 1861", "source_tables": ["dish", "menuitem"]}, "evidence": "first appeared in 1861 refers to first_appeared = 1861;"}
{"sample_id": 5496, "db_id": "menu", "final": {"question": "Among the dishes on menu page ID 7610, list the names and highest prices of the dishes in menu items that were created on 23rd May 2011.", "sql": "SELECT T1.name, T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T2.created_at LIKE '2011-05-23%' ORDER BY T2.price DESC LIMIT 1", "source_tables": ["dish", "menuitem"]}, "evidence": "highest prices of the dishes refers to MAX(price); created on 23rd May 2011 refers to created_at like '2011-05-23%';"}
{"sample_id": 5497, "db_id": "menu", "final": {"question": "List the dishes included on page number 30 with the least in full height.", "sql": "SELECT T3.name FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T1.page_number = 30 ORDER BY T1.full_height DESC, T1.full_height ASC LIMIT 1", "source_tables": ["menupage", "dish", "menuitem"]}, "evidence": "least in full height refers to MIN(full_height);"}
{"sample_id": 5498, "db_id": "menu", "final": {"question": "Provide the page IDs and name of the menu which had the highest page count.", "sql": "SELECT T1.page_number, T2.name FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id ORDER BY T2.page_count DESC LIMIT 1", "source_tables": ["menupage", "menu"]}, "evidence": "page IDs refers to page_number; highest page count refers to MAX(page_count);"}
{"sample_id": 5499, "db_id": "menu", "final": {"question": "On the menu with the most dishes, how many dishes were there on its second page?", "sql": "SELECT COUNT(T1.dish_id) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id WHERE T2.page_number = 2 GROUP BY T3.name ORDER BY T3.dish_count DESC LIMIT 1", "source_tables": ["menupage", "menu", "menuitem"]}, "evidence": "menu with the most dishes refers to menu.id with MAX(dish_count); second page refers to page_number = 2;"}
{"sample_id": 5500, "db_id": "menu", "final": {"question": "Provide the numbers of the menu item which includes Fresh lobsters in every style and location where that dish was used on a menu.", "sql": "SELECT T2.menu_id, T1.xpos, T1.ypos FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T4.name = 'Fresh lobsters in every style'", "source_tables": ["menupage", "dish", "menu", "menuitem"]}, "evidence": "Fresh lobsters in every style' is a name of dish; location where the dish was used on a menu = (xpos, ypos);"}
{"sample_id": 5501, "db_id": "menu", "final": {"question": "List the dishes that appeared at the left upper corner of the CHAS.BRADLEY'S OYSTER & DINING ROOM\"s sponsored menu.", "sql": "SELECT T4.name FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T3.sponsor = 'CHAS.BRADLEY''S OYSTER & DINING ROOM' AND T1.xpos < 0.25 AND T1.ypos < 0.25", "source_tables": ["menupage", "dish", "menu", "menuitem"]}, "evidence": "appeared at the left upper corner refers to xpos < 0.25 and ypos < 0.25; CHAS.BRADLEY'S OYSTER & DINING ROOM refers to sponsor = 'CHAS.BRADLEY''S OYSTER & DINING ROOM';"}
{"sample_id": 5502, "db_id": "menu", "final": {"question": "Provide the sponsor and event of the menu which includes Cerealine with Milk.", "sql": "SELECT T3.name, T3.event FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T4.name = 'Cerealine with Milk'", "source_tables": ["menupage", "dish", "menu", "menuitem"]}, "evidence": "Cerealine with Milk is a name of dish;"}
{"sample_id": 5503, "db_id": "menu", "final": {"question": "How many percent of Bluefish dishes are located at the center of the menu page?", "sql": "SELECT CAST(SUM(CASE WHEN T2.xpos BETWEEN 0.25 AND 0.75 AND T2.ypos BETWEEN 0.25 AND 0.75 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name LIKE '%BLuefish%'", "source_tables": ["dish", "menuitem"]}, "evidence": "percent = MULTIPLY(DIVIDE(SUM(xpos BETWEEN 0.25 AND 0.75 and ypos BETWEEN 0.25 AND 0.75), COUNT(id)), 1.0); Bluefish is a sub name of dish; located at the center of the menu page refers to xpos BETWEEN 0.25 AND 0.75 and ypos BETWEEN 0.25 AND 0.75;"}
{"sample_id": 5504, "db_id": "menu", "final": {"question": "Who is the sponsor of menu with ID 12463?", "sql": "SELECT sponsor FROM Menu WHERE id = 12463", "source_tables": ["menu"]}, "evidence": "FALSE;"}
{"sample_id": 5505, "db_id": "menu", "final": {"question": "What is the event sponsored by the Republican House?", "sql": "SELECT event FROM Menu WHERE sponsor = 'REPUBLICAN HOUSE'", "source_tables": ["menu"]}, "evidence": "sponsored by the Republican House refers to sponsor = 'REPUBLICAN HOUSE';"}
{"sample_id": 5506, "db_id": "menu", "final": {"question": "Where is the place that menu with ID 12472 was created for?", "sql": "SELECT location FROM Menu WHERE id = 12472", "source_tables": ["menu"]}, "evidence": "place refers to location;"}
{"sample_id": 5507, "db_id": "menu", "final": {"question": "Please describe the menu sponsored by Noviomagus physically.", "sql": "SELECT physical_description FROM Menu WHERE sponsor = 'Noviomagus'", "source_tables": ["menu"]}, "evidence": "describe the menu physically refers to physical_description; sponsored by Noviomagus refers to sponsor = 'Noviomagus';"}
{"sample_id": 5508, "db_id": "menu", "final": {"question": "What is the occasion for menu with ID 12463?", "sql": "SELECT occasion FROM Menu WHERE id = 12463", "source_tables": ["menu"]}, "evidence": "FALSE;"}
{"sample_id": 5509, "db_id": "menu", "final": {"question": "List down the locations of menu sponsored by Norddeutscher Lloyd Bremen.", "sql": "SELECT location FROM Menu WHERE sponsor = 'Norddeutscher Lloyd Bremen'", "source_tables": ["menu"]}, "evidence": "sponsored by Norddeutscher Lloyd Bremen refers to sponsor = 'Norddeutscher Lloyd Bremen';"}
{"sample_id": 5510, "db_id": "menu", "final": {"question": "List down the menu page IDs for menu sponsored by Occidental & Oriental?", "sql": "SELECT T2.id FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T2.sponsor = 'Occidental & Oriental'", "source_tables": ["menupage", "menu"]}, "evidence": "menu page IDs refers to MenuPage.id; sponsored by Occidental & Oriental refers to sponsor = 'Occidental & Oriental';"}
{"sample_id": 5511, "db_id": "menu", "final": {"question": "List down the image IDs for menu located at Manhattan Hotel.", "sql": "SELECT T1.image_id FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T2.location = 'Manhattan Hotel'", "source_tables": ["menupage", "menu"]}, "evidence": "located at Manhattan Hotel refers to location = 'Manhattan Hotel';"}
{"sample_id": 5512, "db_id": "menu", "final": {"question": "State the full height and width for menu called \"El Fuerte Del Palmar\".", "sql": "SELECT T1.full_height, T1.full_width FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T2.name = 'El Fuerte Del Palmar'", "source_tables": ["menupage", "menu"]}, "evidence": "width refers to full_width; El Fuerte Del Palmar is a name of menu;"}
{"sample_id": 5513, "db_id": "menu", "final": {"question": "Is \"c02c9a3b-6881-7080-e040-e00a180631aa\" the uuid for menu called \"The Biltmore\"?", "sql": "SELECT CASE WHEN T2.uuid = 'c02c9a3b-6881-7080-e040-e00a180631aa' THEN 'yes' ELSE 'no' END AS yn FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.name = 'The Biltmore' AND T2.uuid = 'c02c9a3b-6881-7080-e040-e00a180631aa'", "source_tables": ["menupage", "menu"]}, "evidence": "if 'c02c9a3b-6881-7080-e040-e00a180631aa' can be found in uuid, it means the 'c02c9a3b-6881-7080-e040-e00a180631aa' is the uuid for the menu called The Biltmore; if 'c02c9a3b-6881-7080-e040-e00a180631aa' can not be found in uuid, it means the 'c02c9a3b-6881-7080-e040-e00a180631aa' is not the uuid for the menu called The Biltmore; The Biltmore is a name of menu;"}
{"sample_id": 5514, "db_id": "menu", "final": {"question": "State the name of menu with the longest full height.", "sql": "SELECT T2.name FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id ORDER BY T1.full_height DESC LIMIT 1", "source_tables": ["menupage", "menu"]}, "evidence": "longest full height refers to MAX(full_height);"}
{"sample_id": 5515, "db_id": "menu", "final": {"question": "What is the page count for menu with page ID of 130?", "sql": "SELECT T1.page_count FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T2.id = 130", "source_tables": ["menupage", "menu"]}, "evidence": "page ID of 130 refers MenuPage.id = 130;"}
{"sample_id": 5516, "db_id": "menu", "final": {"question": "How much is the price of menu with image ID 4000009194?", "sql": "SELECT T3.price FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id INNER JOIN MenuItem AS T3 ON T2.id = T3.menu_page_id WHERE T2.image_id = 4000009194", "source_tables": ["menupage", "menuitem", "menu"]}, "evidence": "FALSE;"}
{"sample_id": 5517, "db_id": "menu", "final": {"question": "List down the page numbers for menu with dishes on the right upper corner.", "sql": "SELECT T2.page_number FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id INNER JOIN MenuItem AS T3 ON T2.id = T3.menu_page_id WHERE T3.xpos > 0.75 AND T3.ypos < 0.25", "source_tables": ["menupage", "menuitem", "menu"]}, "evidence": "on the right upper corner refers to xpos > 0.75 AND ypos < 0.25;"}
{"sample_id": 5518, "db_id": "menu", "final": {"question": "List down the name of dishes from menu created in April.", "sql": "SELECT T2.name FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE SUBSTR(T1.created_at, 7, 1) = '4'", "source_tables": ["dish", "menuitem"]}, "evidence": "created in April refers to SUBSTR(created_at, 7, 1) = '4';"}
{"sample_id": 5519, "db_id": "menu", "final": {"question": "List down name of dishes from menu with menu page ID 1389.", "sql": "SELECT T2.name FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T1.menu_page_id = 1389", "source_tables": ["dish", "menuitem"]}, "evidence": "FALSE;"}
{"sample_id": 5520, "db_id": "menu", "final": {"question": "What is the highest price of dishes with menu item ID 1 to 5?", "sql": "SELECT T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T2.id BETWEEN 1 AND 5 ORDER BY T2.price DESC LIMIT 1", "source_tables": ["dish", "menuitem"]}, "evidence": "highest price refers to MAX(price); menu item ID 1 to 5 refers to MenuItem.id BETWEEN 1 AND 5;"}
{"sample_id": 5521, "db_id": "menu", "final": {"question": "List down the name of dishes that were positioned on the left upper corner.", "sql": "SELECT T1.name FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T2.xpos < 0.25 AND T2.ypos < 0.25", "source_tables": ["dish", "menuitem"]}, "evidence": "positioned on the left upper corner refers to xpos < 0.25 AND ypos < 0.25;"}
{"sample_id": 5522, "db_id": "menu", "final": {"question": "Calculate the total dish count for menu with uuid of \"510d47e4-2958-a3d9-e040-e00a18064a99\" & \"510d47e4-295a-a3d9-e040-e00a18064a99\".", "sql": "SELECT SUM(CASE WHEN T2.uuid = '510d47e4-2958-a3d9-e040-e00a18064a99' THEN T1.dish_count ELSE 0 END) - SUM(CASE WHEN T2.uuid = '510d47e4-295a-a3d9-e040-e00a18064a99' THEN T1.dish_count ELSE 0 END) FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id", "source_tables": ["menupage", "menu"]}, "evidence": "total dish count for uuid of '510d47e4-2958-a3d9-e040-e00a18064a99' = SUM(dish_count WHERE uuid = '510d47e4-2958-a3d9-e040-e00a18064a99'); total dish count for uuid of '510d47e4-295a-a3d9-e040-e00a18064a99 = SUM(dish_count WHERE uuid = '510d47e4-295a-a3d9-e040-e00a18064a99');"}
{"sample_id": 5523, "db_id": "menu", "final": {"question": "Calculate the total price of items for menu with ID 12882.", "sql": "SELECT SUM(T2.price) FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id WHERE T1.menu_id = 12882", "source_tables": ["menupage", "menuitem"]}, "evidence": "total price = SUM(price);"}
{"sample_id": 5524, "db_id": "menu", "final": {"question": "List the top five dishes, by descending order, in terms of highest price.", "sql": "SELECT name FROM Dish ORDER BY highest_price DESC LIMIT 5", "source_tables": ["dish"]}, "evidence": "highest price refers to MAX(highest_price);"}
{"sample_id": 5525, "db_id": "menu", "final": {"question": "Among the dishes, how many of them are for free?", "sql": "SELECT COUNT(*) FROM Dish WHERE lowest_price = 0", "source_tables": ["dish"]}, "evidence": "free refers to lowest_price = 0;"}
{"sample_id": 5526, "db_id": "menu", "final": {"question": "What dishes made their first and last appearances in 1855 and 1900, respectively?", "sql": "SELECT name FROM Dish WHERE first_appeared = 1855 AND last_appeared = 1900", "source_tables": ["dish"]}, "evidence": "first appearance in 1855 refers to first_appeared = 1855; last appearance in 1900 refers to last_appeared = 1900;"}
{"sample_id": 5527, "db_id": "menu", "final": {"question": "Write down the top ten menus with the highest dish count.", "sql": "SELECT name FROM Menu GROUP BY name ORDER BY dish_count DESC LIMIT 10", "source_tables": ["menu"]}, "evidence": "highest dish count refers to MAX(dish_count);"}
{"sample_id": 5528, "db_id": "menu", "final": {"question": "How many dishes appear in the right upper corner of the menu page?", "sql": "SELECT COUNT(*) FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T1.dish_id = T2.id WHERE T1.xpos > 0.75 AND T1.ypos < 0.25", "source_tables": ["dish", "menuitem"]}, "evidence": "appear in the right upper corner of the menu page refers to xpos > 0.75 and ypos < 0.25;"}
{"sample_id": 5529, "db_id": "menu", "final": {"question": "How long has the \"Clear Green Turtle\" dish appeared on the menu, and tell me when its latest update was?", "sql": "SELECT T1.last_appeared - T1.first_appeared, T2.updated_at FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Clear green turtle'", "source_tables": ["dish", "menuitem"]}, "evidence": "Clear Green Turtle is a name of dish; how long a dish appeared on the menu = SUBTRACT(last_appeared, first_appeared); latest update refers to latest updated_at;"}
{"sample_id": 5530, "db_id": "menu", "final": {"question": "Tally the dishes that have appeared on the menu for more than 100 years.", "sql": "SELECT T1.name FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.last_appeared - T1.first_appeared > 100", "source_tables": ["dish", "menuitem"]}, "evidence": "appeared on the menu for more than 100 years = SUBTRACT(last_appeared, first_appeared) > 100;"}
{"sample_id": 5531, "db_id": "menu", "final": {"question": "How many dishes have appeared on the menu in less than 5 years?", "sql": "SELECT COUNT(*) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.last_appeared - T1.first_appeared < 5", "source_tables": ["dish", "menuitem"]}, "evidence": "appeared on the menu in less than 5 years = SUBTRACT(last_appeared, first_appeared) < 5;"}
{"sample_id": 5532, "db_id": "menu", "final": {"question": "Give me the name and menu price of dishes that were free.", "sql": "SELECT T2.name, T1.price FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T2.lowest_price = 0", "source_tables": ["dish", "menuitem"]}, "evidence": "dishes that were free refers to lowest_price = 0;"}
{"sample_id": 5533, "db_id": "menu", "final": {"question": "How much does the dish on page 2 of menu ID 12474 cost?", "sql": "SELECT T1.price FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T2.id = T1.menu_page_id WHERE T2.menu_id = 12474 AND T2.page_number = 2", "source_tables": ["menupage", "menuitem"]}, "evidence": "page 2 refers to page_number = 2;"}
{"sample_id": 5578, "db_id": "shipping", "final": {"question": "How many shipments were ordered by S K L Enterprises Inc in 2017?", "sql": "SELECT COUNT(T2.ship_id) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'S K L Enterprises Inc' AND STRFTIME('%Y', T2.ship_date) = '2017'", "source_tables": ["customer", "shipment"]}, "evidence": "\"S K L Enterprises Inc\" is the cust_name; in 2017 refers to Cast(ship_date AS DATE) = 2017"}
{"sample_id": 5579, "db_id": "shipping", "final": {"question": "What is the total number of pounds being transported for S K L Enterprises Inc?", "sql": "SELECT SUM(T2.weight) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'S K L Enterprises Inc'", "source_tables": ["customer", "shipment"]}, "evidence": "\"S K L Enterprises Inc\" is the cust_name; total number of pounds refers to Sum(weight)"}
{"sample_id": 5580, "db_id": "shipping", "final": {"question": "Among the shipments done by Sue Newell, how many of them are for S K L Enterprises Inc?", "sql": "SELECT COUNT(*) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN driver AS T3 ON T3.driver_id = T2.driver_id WHERE T1.cust_name = 'S K L Enterprises Inc' AND T3.first_name = 'Sue' AND T3.last_name = 'Newell'", "source_tables": ["customer", "driver", "shipment"]}, "evidence": "\"S K L Enterprises Inc\" is the cust_name"}
{"sample_id": 5581, "db_id": "shipping", "final": {"question": "How many shipments were ordered by a customer in Florida?", "sql": "SELECT COUNT(T1.cust_id) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.state = 'FL'", "source_tables": ["customer", "shipment"]}, "evidence": "customer in Florida refers to state = 'FL'"}
{"sample_id": 5582, "db_id": "shipping", "final": {"question": "Please list the IDs of all the shipments made by a retailer customer.", "sql": "SELECT T2.ship_id FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_type = 'retailer'", "source_tables": ["customer", "shipment"]}, "evidence": "\"retailer\" is the cust_type;\u00a0 IDs of shipments refers to ship_id"}
{"sample_id": 5583, "db_id": "shipping", "final": {"question": "Among the customers having at least one shipment in 2017, how many of them have an annual revenue of over 30000000?", "sql": "SELECT COUNT(COUNTCUSID) FROM ( SELECT COUNT(T1.cust_id) AS COUNTCUSID FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE STRFTIME('%Y', T2.ship_date) = '2017' AND T1.annual_revenue > 30000000 GROUP BY T1.cust_id HAVING COUNT(T2.ship_id) >= 1 ) T3", "source_tables": ["customer", "shipment"]}, "evidence": "shipment in 2017 refers to Cast(ship_date AS DATE) = 2017; annual revenue of over 30000000 refers to annual_revenue > 30000000"}
{"sample_id": 5584, "db_id": "shipping", "final": {"question": "How many shipments in 2017 were done by Sue Newell?", "sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE STRFTIME('%Y', T1.ship_date) = '2017' AND T2.first_name = 'Sue' AND T2.last_name = 'Newell'", "source_tables": ["driver", "shipment"]}, "evidence": "in 2017 refers to Cast(ship_date AS DATE) = 2017"}
{"sample_id": 5585, "db_id": "shipping", "final": {"question": "What is the full name of the driver that has done the most shipments in 2017?", "sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE STRFTIME('%Y', T1.ship_date) = '2017' GROUP BY T2.first_name, T2.last_name ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["driver", "shipment"]}, "evidence": "driver refers to driver_id; full name refers to first_name, last_name; in 2017 refers to Cast(ship_date AS DATE) = 2017; Most shipment refers to Max(Sum(weight))"}
{"sample_id": 5586, "db_id": "shipping", "final": {"question": "Among the shipments in 2017, how many of them have the destination in New Jersey?", "sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE STRFTIME('%Y', T1.ship_date) = '2017' AND T2.state = 'New Jersey'", "source_tables": ["city", "shipment"]}, "evidence": "in 2017 refers to Cast(ship_date AS DATE) = 2017; 'New Jersey' is the state"}
{"sample_id": 5587, "db_id": "shipping", "final": {"question": "What is the maximum weight being transported to New York during a single shipment?", "sql": "SELECT MAX(T1.weight) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.city_name = 'New York'", "source_tables": ["city", "shipment"]}, "evidence": "\"New York\" is the city_name; maximum weight refers to Max(weight)"}
{"sample_id": 5588, "db_id": "shipping", "final": {"question": "How much more pounds in total were transported to New York than to Chicago?", "sql": "SELECT SUM(CASE WHEN T2.city_name = 'New York' THEN T1.weight ELSE 0 END) - SUM(CASE WHEN T2.city_name = 'Chicago' THEN T1.weight ELSE 0 END) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id", "source_tables": ["city", "shipment"]}, "evidence": "\"New York\" and \"Chicago\" are both city_name; more pounds in total refers to Subtract (Sum(weight where city_name = 'New York'), Sum(weight where city_name = 'Chicago'))"}
{"sample_id": 5589, "db_id": "shipping", "final": {"question": "Please list the destination cities of all the shipments ordered by S K L Enterprises Inc.", "sql": "SELECT DISTINCT T3.city_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id WHERE T1.cust_name = 'S K L Enterprises Inc'", "source_tables": ["city", "customer", "shipment"]}, "evidence": "\"S K L Enterprises Inc\" is the cust_name; destination cities refers to city_name"}
{"sample_id": 5590, "db_id": "shipping", "final": {"question": "What is the average weight of the goods being transported on a single shipment ordered by S K L Enterprises Inc?", "sql": "SELECT AVG(T2.weight) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'S K L Enterprises Inc'", "source_tables": ["customer", "shipment"]}, "evidence": "\"S K L Enterprises Inc\" is the cust_name; average = Divide (Sum(weight), Count(ship_id))"}
{"sample_id": 5591, "db_id": "shipping", "final": {"question": "Among all the shipments to Florida, what is the percentage of the shipment to Jacksonville?", "sql": "SELECT CAST(SUM(CASE WHEN T2.city_name = 'Jacksonville' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.state = 'Florida'", "source_tables": ["city", "shipment"]}, "evidence": "\"Florida\" is the state; \"Jacksonville\" is city_name;"}
{"sample_id": 5592, "db_id": "shipping", "final": {"question": "State the headquarter of the truck which completed shipment no.1045.", "sql": "SELECT T1.make FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = 1045", "source_tables": ["truck", "shipment"]}, "evidence": "shipment no. 1045 refers to ship_id = 1045; headquarter refers to if make = 'Peterbit', then 'Texax(TX)', if make = 'Mack', then 'North Carolina (NC)'; if make = 'Kenworth', then 'Washington (WA)'"}
{"sample_id": 5593, "db_id": "shipping", "final": {"question": "How many shipments were delivered by the oldest truck model?", "sql": "SELECT COUNT(*) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id GROUP BY T1.model_year ORDER BY T1.model_year ASC LIMIT 1", "source_tables": ["truck", "shipment"]}, "evidence": "oldest truck model refers to Min(model_year)"}
{"sample_id": 5594, "db_id": "shipping", "final": {"question": "Who was the customer of shipment no.1275? Give the customer's name.", "sql": "SELECT T1.cust_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T2.ship_id = '1275'", "source_tables": ["customer", "shipment"]}, "evidence": "shipment no. 1275 refers to ship_id = 1275; customer name refers to cust_name"}
{"sample_id": 5595, "db_id": "shipping", "final": {"question": "Where was the destination city of shipment no.1701?", "sql": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1701'", "source_tables": ["city", "shipment"]}, "evidence": "shipment no. 1701 refers to ship_id = 1701; destination city refers to city_name"}
{"sample_id": 5596, "db_id": "shipping", "final": {"question": "Give the name of the driver of shipment no.1021.", "sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = '1021'", "source_tables": ["driver", "shipment"]}, "evidence": "shipment no. 1021 refers to ship_id = 1021; name refers to first_name, last_name"}
{"sample_id": 5597, "db_id": "shipping", "final": {"question": "Tell the name of the driver who received the shipment on 2017/11/5.", "sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_date = '2017-11-05'", "source_tables": ["driver", "shipment"]}, "evidence": "shipment on 2017/11/5 refers to ship_date = '2017-11/05'; name refers to first_name, last_name"}
{"sample_id": 5598, "db_id": "shipping", "final": {"question": "Show the population of the city which was the destination of shipment no.1398.", "sql": "SELECT T2.population FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1398'", "source_tables": ["city", "shipment"]}, "evidence": "shipment no. 1398 refers to ship_id = 1398"}
{"sample_id": 5599, "db_id": "shipping", "final": {"question": "Provide the ship date of the first shipment to customers in South Carolina.", "sql": "SELECT MIN(T1.ship_date) FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.state = 'SC'", "source_tables": ["customer", "shipment"]}, "evidence": "\"South Carolina\" refers to state = 'SC'; first shipment refers to Min(ship_date)"}
{"sample_id": 5600, "db_id": "shipping", "final": {"question": "For the shipment received by Leszek Kieltyka on 2017/9/25, what was its weight?", "sql": "SELECT T1.weight FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.first_name = 'Leszek' AND T2.last_name = 'Kieltyka' AND T1.ship_date = '2017-09-25'", "source_tables": ["driver", "shipment"]}, "evidence": "on 2017/9/25 refers to ship_date = '2017-09-25'"}
{"sample_id": 5601, "db_id": "shipping", "final": {"question": "What is the area of the destination city of shipment No.1346?", "sql": "SELECT T2.area FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1346'", "source_tables": ["city", "shipment"]}, "evidence": "shipment no. 1346 refers to ship_id = 1346"}
{"sample_id": 5602, "db_id": "shipping", "final": {"question": "Provide the weight of the shipment to U-haul Center Of N Syracuse on 2016/9/21.", "sql": "SELECT T1.weight FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.cust_name = 'U-haul Center Of N Syracuse' AND T1.ship_date = '2016-09-21'", "source_tables": ["customer", "shipment"]}, "evidence": "\"U-haul Center Of N Syracuse\" is the cust_name; on 2016/9/21 refers to ship_date = '2016/09/21'"}
{"sample_id": 5603, "db_id": "shipping", "final": {"question": "Who was the driver of truck no.3 on 2016/9/19? Tell the full name.", "sql": "SELECT T3.first_name, T3.last_name FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id INNER JOIN driver AS T3 ON T3.driver_id = T2.driver_id WHERE T1.truck_id = '3' AND T2.ship_date = '2016-09-19'", "source_tables": ["truck", "driver", "shipment"]}, "evidence": "truck no. 3 refers to truck_id = 3; on 2016/9/19 refers to ship_date = '2016-09-19'; full name refers to first_name, last_name"}
{"sample_id": 5604, "db_id": "shipping", "final": {"question": "Calculate the population density of the city as the destination of shipment no.1369.", "sql": "SELECT T2.area / T2.population FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1369'", "source_tables": ["city", "shipment"]}, "evidence": "shipment no. 1369 refers to ship_id = 1369; population density refers to Divide (area, population)"}
{"sample_id": 5605, "db_id": "shipping", "final": {"question": "What is the average number of shipments done by the Kenworth trucks?", "sql": "SELECT CAST(COUNT(T2.ship_id) AS REAL) / COUNT(DISTINCT T1.truck_id) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T1.make = 'Kenworth'", "source_tables": ["truck", "shipment"]}, "evidence": "\"Kenworth\" is the make of truck; average = Divide (Count(ship_id where make = 'Kenworth'), Count(truck_id where make = 'Kenworth))"}
{"sample_id": 5606, "db_id": "shipping", "final": {"question": "How many pounds did Sue Newell transport during her first shipment?", "sql": "SELECT T1.weight FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.first_name = 'Sue' AND T2.last_name = 'Newell' ORDER BY T1.ship_date ASC LIMIT 1", "source_tables": ["driver", "shipment"]}, "evidence": "first shipment refers to Min(ship_date); pounds refers to weight"}
{"sample_id": 5607, "db_id": "shipping", "final": {"question": "To whom did the company transport its heaviest shipment?", "sql": "SELECT T2.cust_name FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id ORDER BY T1.weight DESC LIMIT 1", "source_tables": ["customer", "shipment"]}, "evidence": "heaviest shipment refers to Max(weight)"}
{"sample_id": 5608, "db_id": "shipping", "final": {"question": "What is the full name of the driver who transported the first shipment of the company?", "sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id ORDER BY T1.ship_date ASC LIMIT 1", "source_tables": ["driver", "shipment"]}, "evidence": "first shipment of the company refers to Min(ship_date); full name refers to first_name, last_name"}
{"sample_id": 5609, "db_id": "shipping", "final": {"question": "In total, how many shipments were transported to Olympic Camper Sales Inc?", "sql": "SELECT COUNT(T2.ship_id) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'Olympic Camper Sales Inc'", "source_tables": ["customer", "shipment"]}, "evidence": "\"Olympic Camper Sales Inc\" is the cust_name"}
{"sample_id": 5610, "db_id": "shipping", "final": {"question": "How many of the shipments bound for New York City were shipped to Harry's Hot Rod Auto and Truck Accessories?", "sql": "SELECT COUNT(*) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id WHERE T3.city_name = 'New York' AND T1.cust_name = 'Harry''s Hot Rod Auto & Truck Accessories'", "source_tables": ["city", "customer", "shipment"]}, "evidence": "\"New York\" is the city_name; 'Harry's Hot Rod Auto & Truck Accessories' is the cust_name"}
{"sample_id": 5611, "db_id": "shipping", "final": {"question": "Among the top 5 heaviest shipments, how many shipments were transported via Mack?", "sql": "SELECT COUNT(T2.ship_id) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T1.make = 'Mack' ORDER BY T2.weight DESC LIMIT 1", "source_tables": ["truck", "shipment"]}, "evidence": "heaviest shipment refers to Max(weight); via Mack refers to make = 'Mack'"}
{"sample_id": 5612, "db_id": "shipping", "final": {"question": "What is the full name of the driver who delivered the most shipments to the least populated city?", "sql": "SELECT T1.first_name, T1.last_name FROM driver AS T1 INNER JOIN shipment AS T2 ON T1.driver_id = T2.driver_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id GROUP BY T1.first_name, T1.last_name, T3.population HAVING T3.population = MAX(T3.population) ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["city", "driver", "shipment"]}, "evidence": "least populated city refers to Min(population); fullname refers to first_name, last_name; most shipment refers to driver_id where Max(Count (ship_id))"}
{"sample_id": 5613, "db_id": "shipping", "final": {"question": "How many shipments with weight of no more than 1,000 pounds were shipped by the oldest truck?", "sql": "SELECT COUNT(*) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.weight < 1000 ORDER BY T1.model_year ASC LIMIT 1", "source_tables": ["truck", "shipment"]}, "evidence": "weight of no more than 1000 pounds refers to weight < 1000; oldest truck refers to Min (model_year)"}
{"sample_id": 5614, "db_id": "shipping", "final": {"question": "How much is the annual revenue of the customer with the most number of shipments?", "sql": "SELECT T2.annual_revenue FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_id ORDER BY COUNT(T1.cust_id) DESC LIMIT 1", "source_tables": ["customer", "shipment"]}, "evidence": "customer with the most number of shipment refers to cust_id where Max(Count(ship_id))"}
{"sample_id": 5615, "db_id": "shipping", "final": {"question": "Among the shipments for Downey, how many shipments were shipped to California in 2016?", "sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN customer AS T3 ON T3.cust_id = T1.cust_id WHERE T2.city_name = 'Downey' AND STRFTIME('%Y', T1.ship_date) = '2016' AND T3.state = 'CA'", "source_tables": ["city", "customer", "shipment"]}, "evidence": "\"Downey\" is the city_name; 'California' is the state, whose abbreviation is CA; in 2016 refers to year(ship_date) = 2016,"}
{"sample_id": 5616, "db_id": "shipping", "final": {"question": "How many shipments did Holger Nohr transport to North Las Vegas overall?", "sql": "SELECT COUNT(*) FROM driver AS T1 INNER JOIN shipment AS T2 ON T1.driver_id = T2.driver_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id WHERE T1.first_name = 'Holger' AND T1.last_name = 'Nohr' AND T3.city_name = 'North Las Vegas'", "source_tables": ["city", "driver", "shipment"]}, "evidence": "\"North Las Vegas\" is the city_name"}
{"sample_id": 5617, "db_id": "shipping", "final": {"question": "How many shipments were shipped to the most densely populated city?", "sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T2.area / T2.population DESC LIMIT 1", "source_tables": ["city", "shipment"]}, "evidence": "most densely populated city refers to Max(Divide(area, population))"}
{"sample_id": 5618, "db_id": "shipping", "final": {"question": "Determine the percentage of manufacturers who are from Texas among all of Lorenzo's customers.", "sql": "SELECT CAST(SUM(CASE WHEN cust_type = 'manufacturer' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customer WHERE state = 'TX'", "source_tables": ["customer"]}, "evidence": "\"Texas\" refers to state = 'TX'; 'manufacturer' is the cust_type; percentage = Divide (Count(cust_id where state = 'TX'), Count(cust_id)) * 100"}
{"sample_id": 5619, "db_id": "shipping", "final": {"question": "Identify the total weight of shipments transported to San Mateo, California, in 2016.", "sql": "SELECT SUM(T1.weight) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.city_name = 'San Mateo' AND STRFTIME('%Y', T1.ship_date) = '2016'", "source_tables": ["city", "shipment"]}, "evidence": "\"San Mateo\" is the city_name; in 2016 refers to Cast(ship_date as DATE) = 2016"}
{"sample_id": 5620, "db_id": "shipping", "final": {"question": "Identify the total weight of shipments transported in 2016 by the newest Peterbilt.", "sql": "SELECT SUM(T2.weight) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T1.make = 'Peterbilt' AND STRFTIME('%Y', T2.ship_date) = '2016' ORDER BY T1.model_year DESC LIMIT 1", "source_tables": ["truck", "shipment"]}, "evidence": "transported in 2016 refers to CAST(ship_date as DATE) = 2016; 'Peterbilt' is the make; newest refers to Max(model_year)"}
{"sample_id": 5621, "db_id": "shipping", "final": {"question": "What was the maximum weight of the shipment carried to Boston? Name the customer of that shipment.", "sql": "SELECT T1.weight, T2.cust_name FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T1.city_id WHERE T3.city_name = 'Boston' ORDER BY T1.weight DESC LIMIT 1", "source_tables": ["city", "customer", "shipment"]}, "evidence": "\"Boston\" is the city_name; maximum weight refers to Max(weight); customer refers to cust_name"}
{"sample_id": 5622, "db_id": "shipping", "final": {"question": "Where was shipment no. 1002 headed?", "sql": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1002'", "source_tables": ["city", "shipment"]}, "evidence": "shipment no. 1002 refers to ship_id = 1002; where shipment was headed refers to city_name"}
{"sample_id": 5623, "db_id": "shipping", "final": {"question": "What is the average shipment weight carried by the oldest Mack?", "sql": "SELECT AVG(T2.weight) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T1.make = 'Mack'", "source_tables": ["truck", "shipment"]}, "evidence": "\"Mack\" is the make; oldest refers to Min(model_year); average shipment weight refers to AVG(weight)"}
{"sample_id": 5624, "db_id": "shipping", "final": {"question": "Identify the full name of the driver who delivered a shipment to the city of New York in February 2016.", "sql": "SELECT T3.first_name, T3.last_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN driver AS T3 ON T3.driver_id = T1.driver_id WHERE T2.city_name = 'New York' AND T1.ship_date LIKE '2016-02%'", "source_tables": ["city", "driver", "shipment"]}, "evidence": "\"New York\" is the city_name; in February 2016 refers to ship_date LIKE '2016-02%'; full name refers to first_name, last_name"}
{"sample_id": 5625, "db_id": "shipping", "final": {"question": "Name the customer who sent the shipment to Oak Park.", "sql": "SELECT T2.cust_name FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T1.city_id WHERE T3.city_name = 'Oak Park'", "source_tables": ["city", "customer", "shipment"]}, "evidence": "\"Oak Park\" is the city_name; customer name refers to cust_name"}
{"sample_id": 5626, "db_id": "shipping", "final": {"question": "Determine the number of shipments delivered by Andrea Simons to Huntsville in 2016.", "sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN driver AS T3 ON T3.driver_id = T1.driver_id WHERE T3.first_name = 'Andrea' AND T3.last_name = 'Simons' AND T2.city_name = 'Huntsville' AND STRFTIME('%Y', T1.ship_date) = '2016'", "source_tables": ["city", "driver", "shipment"]}, "evidence": "\"Huntsville\" is the city_name; in 2016 refers to Cast(ship_date AS DATE) = 2016; number of shipment refers to Count(ship_id)"}
{"sample_id": 5627, "db_id": "shipping", "final": {"question": "How many shipments does each driver deliver per month on average?", "sql": "SELECT CAST(COUNT(*) AS REAL) / (12 * COUNT(T2.driver_id)) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id", "source_tables": ["driver", "shipment"]}, "evidence": "shipment data was for 24 months in 2016 and 2017 respectively; deliver per month on average refers to\u00a0Divide(Count(ship_id), Multiply (24, Count(driver_id)))"}
{"sample_id": 5628, "db_id": "shipping", "final": {"question": "Among all shipments placed by Sunguard Window Tinting & Truck Accessories in 2017, identify the percentage of shipments whose weight exceeded 10,000 pounds.", "sql": "SELECT CAST(SUM(CASE WHEN T1.weight >= 10000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.cust_name = 'Sunguard Window Tinting & Truck Accessories' AND STRFTIME('%Y', T1.ship_date) = '2017'", "source_tables": ["customer", "shipment"]}, "evidence": "\"Sunguard Window Tinting & Truck Accessories\" is the cust_name; weight exceed 10,000 pounds refers to weight > = 10000; in 2017 refers to Cast(ship_date AS DATE) = 2017; percentage = Divide (Sum(weight > = 10000), Sum(weight)) * 100"}
{"sample_id": 5629, "db_id": "shipping", "final": {"question": "Among all shipments delivered by Sue Newel, identify the percentage of shipments that were placed by Autoware Inc.", "sql": "SELECT CAST(SUM(CASE WHEN T3.cust_name = 'Autoware Inc' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS per FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id INNER JOIN customer AS T3 ON T3.cust_id = T1.cust_id WHERE T2.first_name = 'Sue' AND T2.last_name = 'Newell'", "source_tables": ["customer", "driver", "shipment"]}, "evidence": "\"Autoware Inc\" is the cust_name; percentage = Divide (Count(ship_id where cust_name = 'Autoware Inc'), Count(ship_id)) * 100"}
{"sample_id": 5630, "db_id": "shipping", "final": {"question": "How many cities which belong to New Jersey have transported weight greater than 20000?", "sql": "SELECT COUNT(*) FROM ( SELECT T2.city_id AS CITYID FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.state = 'New Jersey' GROUP BY T2.city_id HAVING SUM(T1.weight) > 20000 )", "source_tables": ["city", "shipment"]}, "evidence": "\"New Jersey\" is the state; transported weight greater than 20000 refers to Sum(weight) > 20000"}
{"sample_id": 5631, "db_id": "shipping", "final": {"question": "How many cities whose polulation is larger than 50000 pounds have shipment in 2017?", "sql": "SELECT COUNT(*) FROM city AS T1 INNER JOIN shipment AS T2 ON T1.city_id = T2.city_id WHERE T1.population > 50000 AND STRFTIME('%Y', T2.ship_date) = '2017'", "source_tables": ["city", "shipment"]}, "evidence": "population is larger than 50000 refers to population > 50000"}
{"sample_id": 5632, "db_id": "shipping", "final": {"question": "State the weight of shipments transported by Peterbilt.", "sql": "SELECT T2.weight FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE make = 'Peterbilt'", "source_tables": ["truck", "shipment"]}, "evidence": "\"Peterbilt\" is the make"}
{"sample_id": 5633, "db_id": "shipping", "final": {"question": "What is the model year of the truck used in shipment id 1003?", "sql": "SELECT T1.model_year FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1003'", "source_tables": ["truck", "shipment"]}, "evidence": "shipment id 1003 refers to ship_id = 1003"}
{"sample_id": 5634, "db_id": "shipping", "final": {"question": "What is the brand of truck used in shipment id 1011?", "sql": "SELECT T1.make FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1011'", "source_tables": ["truck", "shipment"]}, "evidence": "shipment id 1011 refers to ship_id = 1011; brand of truck refers to make"}
{"sample_id": 5635, "db_id": "shipping", "final": {"question": "What is the first name of the driver who transported shipment id 1028?", "sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = 1028", "source_tables": ["driver", "shipment"]}, "evidence": "shipment id 1028 refers to ship_id = 1028"}
{"sample_id": 5636, "db_id": "shipping", "final": {"question": "List out the state of driver who transported the shipment id 1055.", "sql": "SELECT T2.state FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = '1055'", "source_tables": ["driver", "shipment"]}, "evidence": "shipment id 1055 refers to ship_id = 1055"}
{"sample_id": 5637, "db_id": "shipping", "final": {"question": "State the address of drivers who transported the shipment with weight greater than 50000 pounds.", "sql": "SELECT T2.address FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id GROUP BY T2.driver_id HAVING SUM(T1.weight) > 50000", "source_tables": ["driver", "shipment"]}, "evidence": "shipment with weight greater than 50000 pounds refers to Sum(weight) > 50000"}
{"sample_id": 5638, "db_id": "shipping", "final": {"question": "Give the full name of driver who transported the items on 3/2/2016.", "sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_date = '2016-03-02'", "source_tables": ["driver", "shipment"]}, "evidence": "on 3/2/2016 refers to ship_date = '2016-02-03'; full name refers to first_name, last_name"}
{"sample_id": 5639, "db_id": "shipping", "final": {"question": "What is the average annual revenue of customers who have shipment weight of less than 65000 pounds?", "sql": "SELECT AVG(T1.annual_revenue) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T2.weight < 65000", "source_tables": ["customer", "shipment"]}, "evidence": "weight of less than 65000 pounds refers to weight < 65000; average annual revenue refers to AVG(annual_revenue)"}
{"sample_id": 5640, "db_id": "shipping", "final": {"question": "What is the percentage of wholesaler customers who have shipment weight of not greater than 70000 pounds?", "sql": "SELECT CAST(SUM(CASE WHEN T2.weight < 70000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_type = 'wholesaler'", "source_tables": ["customer", "shipment"]}, "evidence": "\"wholesaler\" is the cust_type; weight of not greater than 70000 pounds refers to weight < 70000; percentage = Divide (Count(cust_id where weight < 70000), Count(cust_id)) * 100"}
{"sample_id": 5684, "db_id": "language_corpus", "final": {"question": "Name the longest Catalan language Wikipedia page title and state the number of different words in this page.", "sql": "SELECT title, words FROM pages WHERE title = ( SELECT MAX(LENGTH(title)) FROM pages )", "source_tables": ["pages"]}, "evidence": "longest title refers to max(length(title))"}
{"sample_id": 5685, "db_id": "language_corpus", "final": {"question": "List all the Catalan language wikipedia page title with less than 10 number of different words in these pages.", "sql": "SELECT title FROM pages WHERE words < 10", "source_tables": ["pages"]}, "evidence": "less than 10 number of different words refers to words < 10"}
{"sample_id": 5686, "db_id": "language_corpus", "final": {"question": "List the page number for Catalan language wikipedia pages containing the word 'Art' in the page title.", "sql": "SELECT page FROM pages WHERE title LIKE 'Art%' OR title LIKE '%Art%' OR title LIKE '%Art'", "source_tables": ["pages"]}, "evidence": "containing the word 'Art' refers to title LIKE '% Art %'"}
{"sample_id": 5687, "db_id": "language_corpus", "final": {"question": "What is the title of Catalan language wikipedia page with revision page id '16203226'?", "sql": "SELECT title FROM pages WHERE revision = 16203226", "source_tables": ["pages"]}, "evidence": "revision page id '16203226' refers to revision = 16203226"}
{"sample_id": 5688, "db_id": "language_corpus", "final": {"question": "List the titles for all Catalan language wikipedia page from revision page id 106600 to 106700.", "sql": "SELECT title FROM pages WHERE revision BETWEEN 106600 AND 106700", "source_tables": ["pages"]}, "evidence": "from revision page id 106600 to 106700 refers to revision BETWEEN 106600 AND 106700"}
{"sample_id": 5689, "db_id": "language_corpus", "final": {"question": "How many Catalan language wikipedia pages have between 1000 to 2000 number of different words?", "sql": "SELECT COUNT(pid) FROM pages WHERE words BETWEEN 1000 AND 2000", "source_tables": ["pages"]}, "evidence": "between 1000 to 2000 number of different words refers to words BETWEEN 1000 AND 2000"}
{"sample_id": 5690, "db_id": "language_corpus", "final": {"question": "List the page id of wikipedia about Catalan language which have the appearance of the word 'decimal'?", "sql": "SELECT T2.pid FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'decimal'", "source_tables": ["pages_words", "words"]}, "evidence": "have the appearance of 'decimal' refers to word = 'decimal'"}
{"sample_id": 5691, "db_id": "language_corpus", "final": {"question": "Which word has the most occurrences within the same page of wikipedia about Catalan language?", "sql": "SELECT T1.word FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T2.occurrences = ( SELECT MAX(occurrences) FROM pages_words )", "source_tables": ["pages_words", "words"]}, "evidence": "most occurrences refers to max(occurrences)"}
{"sample_id": 5692, "db_id": "language_corpus", "final": {"question": "List all the first words of the biwords pair where the second word is 'antic'.", "sql": "SELECT T1.word FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st WHERE T2.w2nd = ( SELECT wid FROM words WHERE word = 'antic' )", "source_tables": ["biwords", "words"]}, "evidence": "first words refer to w1st.word; second word is 'antic' refers to w2nd.word = 'antic'"}
{"sample_id": 5693, "db_id": "language_corpus", "final": {"question": "Show all the title of pages and number of occurences for each page where the word 'quipu' appears.", "sql": "SELECT T1.title, T2.occurrences FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid INNER JOIN words AS T3 ON T2.wid = T3.wid WHERE T3.word = 'quipu'", "source_tables": ["pages_words", "pages", "words"]}, "evidence": "word 'quipu' appears refers to word = 'quipu'"}
{"sample_id": 5694, "db_id": "language_corpus", "final": {"question": "Calculate the average number of the word occurrences in which \u2018system\u2019 appeared as the first word in the pair.", "sql": "SELECT AVG(T2.occurrences) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st WHERE T2.w1st = ( SELECT wid FROM words WHERE word = 'sistema' )", "source_tables": ["biwords", "words"]}, "evidence": "average word occurrences = divide(sum(occurrences), count(occurrences)); \u2018system\u2019 appeared as the first word refers to w1st = 'system'"}
{"sample_id": 5695, "db_id": "language_corpus", "final": {"question": "What is the total pages of Wikipedia in Catalan language?", "sql": "SELECT pages FROM langs WHERE lang = 'ca'", "source_tables": ["langs"]}, "evidence": "total pages refers to sum(pages); Catalan language refers to lang = 'ca'"}
{"sample_id": 5696, "db_id": "language_corpus", "final": {"question": "In the Catalan language, which biwords pair appeared the most in this language/page?", "sql": "SELECT w1st, w2nd FROM biwords WHERE occurrences = ( SELECT MAX(occurrences) FROM biwords )", "source_tables": ["biwords"]}, "evidence": "biwords pair refers to w1st.word w2nd.word; appeared the most refers to max(occurrences)"}
{"sample_id": 5697, "db_id": "language_corpus", "final": {"question": "What is the word id of the catalan language that was repeated no more than 10 times in the said language?", "sql": "SELECT wid FROM langs_words WHERE occurrences <= 10", "source_tables": ["langs_words"]}, "evidence": "word id refers to wid; repeated no more than 10 times refers to occurrences < = 10"}
{"sample_id": 5698, "db_id": "language_corpus", "final": {"question": "What is the title of the Catalan language Wikipedia page that has the highest number of different words?", "sql": "SELECT title FROM pages WHERE words = ( SELECT MAX(words) FROM pages )", "source_tables": ["pages"]}, "evidence": "highest number of different words refers to max(words)"}
{"sample_id": 5699, "db_id": "language_corpus", "final": {"question": "What is the wikipedia page id of Arqueozoologia?", "sql": "SELECT page FROM pages WHERE title = 'Arqueozoologia'", "source_tables": ["pages"]}, "evidence": "page id refers to pid; Arqueozoologia refers to title = 'Arqueozoologia'"}
{"sample_id": 5700, "db_id": "language_corpus", "final": {"question": "In Abadia, what is the word id of the of the Catalan language that appeared the highest amount of times? Indicate the how many times did they said word id appeared.", "sql": "SELECT T2.wid, T2.occurrences FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.title = 'Abadia' ORDER BY T2.occurrences DESC LIMIT 1", "source_tables": ["pages_words", "pages"]}, "evidence": "Abadia refers to title = 'Abadia'; word id refers to wid; the highest amount of times refers to max(occurrences)"}
{"sample_id": 5701, "db_id": "language_corpus", "final": {"question": "What are the titles of the top 5 Catalan language Wikipedia page with the least number of different words? Indicate each title's word id that has appeared the most in the said pages.", "sql": "SELECT T1.title FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid ORDER BY T1.words LIMIT 5", "source_tables": ["pages_words", "pages"]}, "evidence": "least number of different words refers to min(words); word id refers to wid; appeared the most refers to max(occurrences)"}
{"sample_id": 5702, "db_id": "language_corpus", "final": {"question": "How many times did the word pair \"i\" and \"a\" appeared in the Cataln language/page?", "sql": "SELECT SUM(occurrences) FROM biwords WHERE w1st = 86 AND w2nd = 109", "source_tables": ["biwords"]}, "evidence": "times appeared refers to occurrences; word pair \"i\" and \"a\" refers to w1st.word = 'i' w2st.word = 'a'"}
{"sample_id": 5703, "db_id": "language_corpus", "final": {"question": "What are the word pairs that occured only twice?", "sql": "SELECT T1.word, T3.word FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T2.occurrences = 2", "source_tables": ["biwords", "words"]}, "evidence": "word pair refers to w1st.word w2nd.word; occured only twice refers to occurrences = 2"}
{"sample_id": 5704, "db_id": "language_corpus", "final": {"question": "What is the word pair that occured the highest amount of times in Addicio? Indicate how many times such word pair occured.", "sql": "SELECT T3.w1st, T3.w2nd, T3.occurrences FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid INNER JOIN biwords AS T3 ON T2.wid = T3.w1st OR T2.wid = T3.w2nd WHERE T1.title = 'Addicio' ORDER BY T3.occurrences DESC LIMIT 1", "source_tables": ["pages_words", "biwords", "pages"]}, "evidence": "word pair refers to w1st.word w2nd.word; occurred the highest amount of times refers to max(occurrences); Addicio refers to title = 'Addicio'; times occurred refer to occurrences"}
{"sample_id": 5705, "db_id": "language_corpus", "final": {"question": "What is the total word of title \"Adam\" and \"Acampada\"?", "sql": "SELECT SUM(words) FROM pages WHERE title IN ('Adam', 'Acampada')", "source_tables": ["pages"]}, "evidence": "total word refers to sum(words); title \"Adam\" and \"Acampada\" refers to title IN('Adam','Acampada')"}
{"sample_id": 5706, "db_id": "language_corpus", "final": {"question": "What is the revision page ID of title \"Aigua dol\u00c3\u00a7a\"?", "sql": "SELECT revision FROM pages WHERE title = 'Aigua dol\u00c3\u00a7a'", "source_tables": ["pages"]}, "evidence": "title \"Aigua dol\u00c3\u00a7a\" refers to title LIKE 'Aigua dol\u00c3\u00a7a%'"}
{"sample_id": 5707, "db_id": "language_corpus", "final": {"question": "What is the title of corpus with most words?", "sql": "SELECT title FROM pages WHERE words = ( SELECT MAX(words) FROM pages )", "source_tables": ["pages"]}, "evidence": "most words refers to max(words)"}
{"sample_id": 5708, "db_id": "language_corpus", "final": {"question": "What is the average words of the 10 fewest words title?", "sql": "SELECT CAST(SUM(CASE WHEN words >= 10 THEN words ELSE 0 END) AS REAL) / SUM(CASE WHEN words >= 10 THEN 1 ELSE 0 END) FROM pages", "source_tables": ["pages"]}, "evidence": "average words = avg(words); 10 fewest words refers to words > = 10"}
{"sample_id": 5709, "db_id": "language_corpus", "final": {"question": "Among the title with single digit word count, list down 5 revision page ID of these titles.", "sql": "SELECT revision FROM pages WHERE words < 10 LIMIT 5", "source_tables": ["pages"]}, "evidence": "single digit word count refers to words < 10"}
{"sample_id": 5710, "db_id": "language_corpus", "final": {"question": "List down the page id of titles start with alphabet \"b\".", "sql": "SELECT pid FROM pages WHERE title LIKE 'b%'", "source_tables": ["pages"]}, "evidence": "start with alphabet \"b\" refers to title LIKE 'b%'"}
{"sample_id": 5711, "db_id": "language_corpus", "final": {"question": "What is the title of corpus where word \"desena\" appear?", "sql": "SELECT T1.title FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid INNER JOIN words AS T3 ON T2.wid = T3.wid WHERE T3.word = 'desena'", "source_tables": ["pages_words", "pages", "words"]}, "evidence": "This is not"}
{"sample_id": 5712, "db_id": "language_corpus", "final": {"question": "What is the word id for title \"Sometent\"?", "sql": "SELECT T2.wid FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.title = 'Sometent'", "source_tables": ["pages_words", "pages"]}, "evidence": "word id refers to wid"}
{"sample_id": 5713, "db_id": "language_corpus", "final": {"question": "Is word id \"88\" the word id for title \"Animals\"?", "sql": "SELECT CASE WHEN COUNT(T1.pid) > 0 THEN 'YES' ELSE 'NO' END AS YORN FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T2.wid = 88 AND T1.title = 'Animals'", "source_tables": ["pages_words", "pages"]}, "evidence": "word id \"88\" refers to wid = 88"}
{"sample_id": 5714, "db_id": "language_corpus", "final": {"question": "What are the occurance of word \"del\" in title \"Any anomal\u00c3\u00adstic\"?", "sql": "SELECT T2.occurrences FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'del' AND T3.title = 'Any anomal\u00c3\u00adstic'", "source_tables": ["pages_words", "pages", "words"]}, "evidence": "This is not"}
{"sample_id": 5715, "db_id": "language_corpus", "final": {"question": "State one biword pair with occurence of 4.", "sql": "SELECT T1.word, T3.word FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T2.occurrences = 4 LIMIT 1", "source_tables": ["biwords", "words"]}, "evidence": "biword pair refers to w1st.word w2nd.word; occurrence of 4 refers to occurrences = 4"}
{"sample_id": 5716, "db_id": "language_corpus", "final": {"question": "What are the total occurence of words that paired with \"nombre\"?", "sql": "SELECT SUM(T2.occurrences) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st OR T1.wid = T2.w2nd WHERE T2.w1st IN (( SELECT wid FROM words WHERE word = 'nombre' ) OR T2.w2nd IN ( SELECT wid FROM words WHERE word = 'nombre' ))", "source_tables": ["biwords", "words"]}, "evidence": "total occurrence refers to sum(occurrences); paired with \"nombre\" refers to w1st.word = \"nombre\" or w2nd.word = \"nombre\""}
{"sample_id": 5717, "db_id": "language_corpus", "final": {"question": "What are the words that were paired with \"John\", list down 10 of them.", "sql": "SELECT w2nd FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'john' ) LIMIT 10", "source_tables": ["biwords", "words"]}, "evidence": "pair with \"John\" refers to w1st.word = \"John\" or w2nd.word = \"John\""}
{"sample_id": 5718, "db_id": "language_corpus", "final": {"question": "List down the revision page id of titles where \"fresc\" appears.", "sql": "SELECT T3.revision FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'fresc'", "source_tables": ["pages_words", "pages", "words"]}, "evidence": "page id refers to pid; \"fresc\" refers to word = 'fresc'"}
{"sample_id": 5719, "db_id": "language_corpus", "final": {"question": "List down the words with word id from 1 to 10 and write down a paired word for each of them.", "sql": "SELECT T1.word AS W1, T3.word AS W2 FROM words AS T1 LEFT JOIN biwords AS T2 ON T1.wid = T2.w1st LEFT JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T1.wid <= 10 GROUP BY T1.wid", "source_tables": ["biwords", "words"]}, "evidence": "word id from 1 to 10 refers to wid BETWEEN 1 AND 10"}
{"sample_id": 5720, "db_id": "language_corpus", "final": {"question": "For corpus title \"Atomium\", pick 3 words appear in the title and calculate the total occurence of these words.", "sql": "SELECT T1.word, T1.occurrences FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T2.pid = ( SELECT pid FROM pages WHERE title = 'Atomium' ) LIMIT 3", "source_tables": ["pages_words", "pages", "words"]}, "evidence": "total occurrences refers to sum(occurrences)"}
{"sample_id": 5721, "db_id": "language_corpus", "final": {"question": "Indicate which is the word that is repeated the most times.", "sql": "SELECT word FROM words WHERE occurrences = ( SELECT MAX(occurrences) FROM words )", "source_tables": ["words"]}, "evidence": "repeated the most times refer to MAX(occurrences);"}
{"sample_id": 5722, "db_id": "language_corpus", "final": {"question": "Indicate the page id of Wikipedia about Catalan language of all the pages that have a numeric value in their title.", "sql": "SELECT pid, title FROM pages WHERE title LIKE '%0%' OR '%1%' OR '%2%' OR '%3%' OR '%4%' OR '%5%' OR '%6%' OR '%7%' OR '%8%' OR '%9%'", "source_tables": ["pages"]}, "evidence": "the page id of Wikipedia refers to pid; numeric value contains only numbers, LIKE '%0%' OR '%1%' OR '%2%' OR '%3%' OR '%4%' OR '%5%' OR '%6%' OR '%7%' OR '%8%' OR '%9%';"}
{"sample_id": 5723, "db_id": "language_corpus", "final": {"question": "What is the title of the page that has the fewest words?", "sql": "SELECT title FROM pages WHERE title = ( SELECT MIN(words) FROM pages )", "source_tables": ["pages"]}, "evidence": "has the fewest words refers to MIN(COUNT(words));"}
{"sample_id": 5724, "db_id": "language_corpus", "final": {"question": "What is the pair of words that is repeated the most times? Identify them by their ID.", "sql": "SELECT w1st, w2nd FROM biwords WHERE occurrences = ( SELECT MAX(occurrences) FROM biwords )", "source_tables": ["biwords"]}, "evidence": "repeated the most times refer to MAX(occurrences); pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word;"}
{"sample_id": 5725, "db_id": "language_corpus", "final": {"question": "How many total occurrences are there in the three-letter words?", "sql": "SELECT SUM(occurrences) FROM words WHERE LENGTH(word) = 3", "source_tables": ["words"]}, "evidence": "three-letter words are words composed of exactly three letters;"}
{"sample_id": 5726, "db_id": "language_corpus", "final": {"question": "Calculate the average number of different words that appear on all pages whose title begins with A.", "sql": "SELECT AVG(words) FROM pages WHERE title LIKE 'A%'", "source_tables": ["pages"]}, "evidence": "DIVIDE(SUM(words WHERE title = 'A%'), COUNT(words WHERE title = 'A%')) as percentage; A is a letter;"}
{"sample_id": 5727, "db_id": "language_corpus", "final": {"question": "Calculate the average number of repetitions in the pairs of words in which the first word id is number 34.", "sql": "SELECT CAST(SUM(CASE WHEN w1st = 34 THEN 1 ELSE 0 END) AS REAL) / COUNT(w1st) FROM biwords", "source_tables": ["biwords"]}, "evidence": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; the first word id number 34 refers to w1st = 34; repetition refers to occurrences or times this pair appears; DIVIDE(SUM(occurrences where w1st = 34), COUNT(occurrences where w1st = 34));"}
{"sample_id": 5728, "db_id": "language_corpus", "final": {"question": "Calculate the percentage of pages that have 1500 different words.", "sql": "SELECT CAST(COUNT(CASE WHEN words = 1500 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(page) FROM pages WHERE words > 300 LIMIT 3", "source_tables": ["pages"]}, "evidence": "DIVIDE(COUNT(pages WHERE words = 1500), COUNT(pages)) as percentage;"}
{"sample_id": 5729, "db_id": "language_corpus", "final": {"question": "Calculate the percentage of times that the same word appears in a pair.", "sql": "SELECT CAST(COUNT(CASE WHEN w1st = w2nd THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(w1st) FROM biwords", "source_tables": ["biwords"]}, "evidence": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; the same word appears in a pair refers to w1st = w2nd; times refers to occurrences; DIVIDE(COUNT(occurrences where w1st = w2nd), COUNT(occurrences)) as percentage;"}
{"sample_id": 5730, "db_id": "language_corpus", "final": {"question": "Indicate the title of all the pages in which the word comunitat appears.", "sql": "SELECT T3.title FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'comunitat'", "source_tables": ["pages_words", "pages", "words"]}, "evidence": "This is not;"}
{"sample_id": 5731, "db_id": "language_corpus", "final": {"question": "Indicate on how many different pages the word ripoll appears.", "sql": "SELECT T3.page FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'ripoll'", "source_tables": ["pages_words", "pages", "words"]}, "evidence": "This is not;"}
{"sample_id": 5732, "db_id": "language_corpus", "final": {"question": "How many words are repeated on the Llista de conflictes armats page?", "sql": "SELECT occurrences FROM pages_words WHERE pid = ( SELECT pid FROM pages WHERE title = 'Llista de conflictes armats' )", "source_tables": ["pages_words", "pages"]}, "evidence": "title = 'Llista de conflictes armats'; How many repeated refers to occurrences;"}
{"sample_id": 5733, "db_id": "language_corpus", "final": {"question": "Indicate if there is any pair formed by the words fukunaga and d'egees.", "sql": "SELECT CASE WHEN COUNT(T1.wid) > 0 THEN 'yes' ELSE 'no' END FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st OR T1.wid = T2.w2nd WHERE T2.w1st = ( SELECT wid FROM words WHERE T1.word = 'fukunaga' ) AND T2.w2nd = ( SELECT wid FROM words WHERE word LIKE 'd%egees' )", "source_tables": ["biwords", "words"]}, "evidence": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word;\u00a0 w1st = word = 'fukunaga' or w2nd = word = 'fukunaga'; w1st = word = 'd'egees'or w2nd = word = 'd'egees';"}
{"sample_id": 5734, "db_id": "language_corpus", "final": {"question": "Calculate the average of repetitions in the pages that have a total of 100 different words.", "sql": "SELECT CAST(SUM(T2.occurrences) AS REAL) / COUNT(T1.page) FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.words = 100", "source_tables": ["pages_words", "pages"]}, "evidence": "Repetition refers to occurrences; 100 different words refers to words = 100; DIVIDE(SUM(occurrences where words = 100), COUNT(page where words = 100)) as percentage;"}
{"sample_id": 5735, "db_id": "language_corpus", "final": {"question": "Which Wikipedia page number does the Catalan language's name, Acampada, appear on?", "sql": "SELECT page FROM pages WHERE title = 'Acampada'", "source_tables": ["pages"]}, "evidence": "Wikipedia page number refers to page; title = 'Acampada';"}
{"sample_id": 5736, "db_id": "language_corpus", "final": {"question": "Please list any three Wikipedia pages with more than 300 words.", "sql": "SELECT page FROM pages WHERE words > 300 LIMIT 3", "source_tables": ["pages"]}, "evidence": "more than 300 words refers to words > 300;\u00a0 list any three means limit 3; Wikipedia pages refers to page;"}
{"sample_id": 5737, "db_id": "language_corpus", "final": {"question": "How many times did the word number 8 appear?", "sql": "SELECT occurrences FROM words WHERE wid = 8", "source_tables": ["words"]}, "evidence": "word number 8 refers to wid = 8; How many times refer to occurrences;"}
{"sample_id": 5738, "db_id": "language_corpus", "final": {"question": "Please list the top three most frequently occurring words and their ids.", "sql": "SELECT word, wid FROM words ORDER BY occurrences DESC LIMIT 3", "source_tables": ["words"]}, "evidence": "most frequently occurring words refer to MAX(occurrences); id refers to wid;"}
{"sample_id": 5739, "db_id": "language_corpus", "final": {"question": "How frequently did the words 1 and 25 appear together?", "sql": "SELECT occurrences FROM biwords WHERE w1st = 1 AND w2nd = 25", "source_tables": ["biwords"]}, "evidence": "How frequently refers to occurrences;\u00a0 word 1 refers to wid = 1; word 25 refers to wid = 25; appear together means pair, which is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word;\u00a0 w1st or w2nd = wid = 1; w1st or w2nd = wid = 25;"}
{"sample_id": 5740, "db_id": "language_corpus", "final": {"question": "What number of words are there on revision page 27457362?", "sql": "SELECT words FROM pages WHERE revision = 27457362", "source_tables": ["pages"]}, "evidence": "This is not;"}
{"sample_id": 5741, "db_id": "language_corpus", "final": {"question": "What is the percentage of words in the Catalan language that have a repetition of more than 16,000 times?", "sql": "SELECT CAST(COUNT(CASE WHEN occurrences > 16000 THEN lid ELSE NULL END) AS REAL) * 100 / COUNT(lid) FROM langs_words", "source_tables": ["langs_words"]}, "evidence": "words in the Catalan language refers lid = 1; repetition of more than 16,000 times refers to occurrences > 16000; DIVIDE(COUNT(words where lid = 1 and occurrences > 16000), COUNT(words where lid = 1)) as percentage;"}
{"sample_id": 5742, "db_id": "language_corpus", "final": {"question": "Which Wikipedia page number has the highest number of words in the Catalan language?", "sql": "SELECT page FROM pages WHERE words = ( SELECT MAX(words) FROM pages )", "source_tables": ["pages"]}, "evidence": "Wikipedia page number refers to page;\u00a0 the highest number of words in the Catalan language refers to MAX(lid = 1);"}
{"sample_id": 5743, "db_id": "language_corpus", "final": {"question": "What proportion of a pair of words in the Catalan language have been repeated less than 80 times?", "sql": "SELECT CAST(COUNT(CASE WHEN occurrences < 80 THEN lid ELSE NULL END) AS REAL) * 100 / COUNT(lid) FROM biwords", "source_tables": ["biwords"]}, "evidence": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; in the Catalan language refers to lid; repeated less than 80 times refers to occurrences < 80; DIVIDE(COUNT(lid where occurrences < 80), COUNT(lid)) as percentage;"}
{"sample_id": 5744, "db_id": "language_corpus", "final": {"question": "How many Catalan-language Wikipedia pages are there overall?", "sql": "SELECT pages FROM langs WHERE lang = 'ca'", "source_tables": ["langs"]}, "evidence": "Catalan-language refers to lang = 'ca';"}
{"sample_id": 5745, "db_id": "language_corpus", "final": {"question": "Please list any three Wikipedia pages that are written in Catalan, together with their titles and revision page numbers.", "sql": "SELECT title, revision FROM pages WHERE lid = 1 LIMIT 3", "source_tables": ["pages"]}, "evidence": "in Catalan means in Catalan-language and refers to lid = 1; revision page numbers refer to revision;"}
{"sample_id": 5746, "db_id": "language_corpus", "final": {"question": "What is the language of the pair of words numbered 1 and 616?", "sql": "SELECT T2.lang FROM biwords AS T1 INNER JOIN langs AS T2 ON T1.lid = T2.lid WHERE T1.w1st = 1 AND T1.w2nd = 616", "source_tables": ["biwords", "langs"]}, "evidence": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; w1st = 1; w2nd = 616;"}
{"sample_id": 5747, "db_id": "language_corpus", "final": {"question": "How many times does the Catalan word \"nombre\" repeat itself?", "sql": "SELECT T1.occurrences FROM langs_words AS T1 INNER JOIN words AS T2 ON T1.wid = T2.wid WHERE T2.word = 'nombre'", "source_tables": ["langs_words", "words"]}, "evidence": "the Catalan means Catalan language and refers to lid = 1; How many times repeat refers to occurrences;"}
{"sample_id": 5748, "db_id": "language_corpus", "final": {"question": "What is the second word in the pair of words number 1 and 8968?", "sql": "SELECT word FROM words WHERE wid = 8968", "source_tables": ["words"]}, "evidence": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; w1st = 1; w2nd = 8968;"}
{"sample_id": 5749, "db_id": "language_corpus", "final": {"question": "Which word has the most repetitions in the Catalan language?", "sql": "SELECT T2.word FROM langs_words AS T1 INNER JOIN words AS T2 ON T1.wid = T2.wid WHERE T1.occurrences = ( SELECT MAX(occurrences) FROM langs_words )", "source_tables": ["langs_words", "words"]}, "evidence": "the most repetitions refer to MAX(occurrences); Catalan language refers to lid = 1;"}
{"sample_id": 5750, "db_id": "language_corpus", "final": {"question": "How many times on page number 44 does the word \"votives\" appear?", "sql": "SELECT T2.occurrences FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'votives' AND T2.pid = 44", "source_tables": ["pages_words", "words"]}, "evidence": "How many times refers to occurrences; page number 44 refers to pid = 44;"}
{"sample_id": 5751, "db_id": "language_corpus", "final": {"question": "How many times on page number 16 does the second word in the pair of words 1 and 109 appear?", "sql": "SELECT SUM(T1.occurrences) FROM pages_words AS T1 INNER JOIN biwords AS T2 ON T2.w2nd = T1.wid WHERE T2.w2nd = 109 AND T2.w1st = 1 AND T1.pid = 16", "source_tables": ["pages_words", "biwords"]}, "evidence": "How many times appear refer to occurrences; page number 16 refers to pid = 16; Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; w1st = 1; w2nd = 109;"}
{"sample_id": 5752, "db_id": "language_corpus", "final": {"question": "What is the percentage of the words that have been repeated under 180 times in the Catalan language?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.occurrences < 180 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.lid) FROM langs AS T1 INNER JOIN langs_words AS T2 ON T1.lid = T2.lid WHERE T1.lang = 'ca'", "source_tables": ["langs_words", "langs"]}, "evidence": "repeated under 180 times refers to occurrences < 180; Catalan language refers to lang = 'ca'; DIVIDE(COUNT(words WHERE occurrences < 180 and lang = 'ca'), COUNT(words WHERE lang = 'ca')) as percentage;"}
{"sample_id": 5753, "db_id": "language_corpus", "final": {"question": "What percentage of Catalan-language Wikipedia pages have more than 10,000 words?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.words > 10000 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.page) FROM langs AS T1 INNER JOIN pages AS T2 ON T1.lid = T2.lid WHERE T1.lang = 'ca'", "source_tables": ["pages", "langs"]}, "evidence": "Catalan-language refers to lang = 'ca'; more than 10,000 words refer to\u00a0words > 10000; DIVIDE(COUNT(pages WHERE words > 10000 and lang = 'ca'), COUNT(pages WHERE lang = 'ca')) as percentage;"}
{"sample_id": 5754, "db_id": "language_corpus", "final": {"question": "How many times the word \"desena\" occurs?", "sql": "SELECT occurrences FROM words WHERE word = 'desena'", "source_tables": ["words"]}, "evidence": "How many times occurs refers to occurrences;"}
{"sample_id": 5755, "db_id": "language_corpus", "final": {"question": "How many words has the appearance times greater than 10?", "sql": "SELECT COUNT(w1st) AS countwords FROM biwords WHERE occurrences > 10", "source_tables": ["biwords"]}, "evidence": "appearance times greater than 10 refers to occurrences > 10;"}
{"sample_id": 5756, "db_id": "language_corpus", "final": {"question": "List out the total pages of Wikipedia in Catalan language.", "sql": "SELECT pages FROM langs", "source_tables": ["langs"]}, "evidence": "This is not;"}
{"sample_id": 5757, "db_id": "language_corpus", "final": {"question": "How many words have repetitions greater than 2000 and lower than 5000?", "sql": "SELECT COUNT(wid) FROM langs_words WHERE occurrences BETWEEN '2000' AND '5000'", "source_tables": ["langs_words"]}, "evidence": "repetitions greater than 2000 and lower than 5000 refer to occurrences between 2000 and 5000;"}
{"sample_id": 5758, "db_id": "language_corpus", "final": {"question": "List out the title of Catalan language Wikipedia page that has wikipedia revision page id as 106601.", "sql": "SELECT title FROM pages WHERE revision = 106601", "source_tables": ["pages"]}, "evidence": "Wikipedia revision page id as 106601 refers to revision = 106601;"}
{"sample_id": 5759, "db_id": "language_corpus", "final": {"question": "State the Wikipedia page title that has revision page id of 28040864.", "sql": "SELECT title FROM pages WHERE revision = 28040864", "source_tables": ["pages"]}, "evidence": "revision page id of 28040864 refers to revision = 28040864;"}
{"sample_id": 5760, "db_id": "language_corpus", "final": {"question": "How many times that the word pair of \"barcelona\" and \"precolombina\" occur?", "sql": "SELECT SUM(occurrences) FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'barcelona' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'precolombina' )", "source_tables": ["biwords", "words"]}, "evidence": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; w1st or w2nd = 'barcelona'; w1st or w2nd = 'precolombina';"}
{"sample_id": 5761, "db_id": "language_corpus", "final": {"question": "What is the locale of the language of the page titled \"Anys 90\"?", "sql": "SELECT T1.locale FROM langs AS T1 INNER JOIN pages AS T2 ON T1.lid = T2.lid WHERE T2.title = 'Anys 90'", "source_tables": ["pages", "langs"]}, "evidence": "page titled \"Anys 90\" refers to title = 'Anys 90';"}
{"sample_id": 5762, "db_id": "language_corpus", "final": {"question": "Which word that has 71303 appearance in the Catalan language?", "sql": "SELECT T1.word FROM words AS T1 INNER JOIN langs_words AS T2 ON T1.wid = T2.wid WHERE T2.occurrences = 71303", "source_tables": ["langs_words", "words"]}, "evidence": "has 71303 appearance refers to occurrences = 71303;"}
{"sample_id": 5763, "db_id": "language_corpus", "final": {"question": "What is the locale of the language of the page titled \"Abril\"?", "sql": "SELECT T1.locale FROM langs AS T1 INNER JOIN pages AS T2 ON T1.lid = T2.lid WHERE T2.title = 'Abril'", "source_tables": ["pages", "langs"]}, "evidence": "the page titled \"Abril\" refers to title = 'Abril';"}
{"sample_id": 5764, "db_id": "language_corpus", "final": {"question": "What is the total number of words in page containing pair of word id \"100\" and \"317\"?", "sql": "SELECT words FROM langs WHERE lid = ( SELECT lid FROM biwords WHERE w1st = 100 AND w2nd = 317 )", "source_tables": ["biwords", "langs"]}, "evidence": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; w1st = 100; w2nd = 317;"}
{"sample_id": 5820, "db_id": "airline", "final": {"question": "How many flights were there on 2018/8/1?", "sql": "SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018/8/1'", "source_tables": ["airlines"]}, "evidence": "on 2018/8/1 refers to FL_DATE = '2018/8/1';"}
{"sample_id": 5821, "db_id": "airline", "final": {"question": "Among the flights on 2018/8/1, how many of them departed from an airport in New York?", "sql": "SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018/8/1' AND ORIGIN = 'JFK'", "source_tables": ["airlines"]}, "evidence": "on 2018/8/1 refers to FL_DATE = '2018/8/1'; departed from an airport in New York refers to ORIGIN = 'JFK';"}
{"sample_id": 5822, "db_id": "airline", "final": {"question": "Please list the destination cities of all the flights that were cancelled on 2018/8/1.", "sql": "SELECT DEST FROM Airlines WHERE FL_DATE = '2018/8/1' AND CANCELLED = 1 GROUP BY DEST", "source_tables": ["airlines"]}, "evidence": "destination cities refers to DEST; cancelled refers to CANCELLED = 1; on 2018/8/1 refers to FL_DATE = '2018/8/1';"}
{"sample_id": 5823, "db_id": "airline", "final": {"question": "Please list the dates of the flights that were cancelled due to the most serious reason.", "sql": "SELECT FL_DATE FROM Airlines WHERE CANCELLATION_CODE = 'A' GROUP BY FL_DATE", "source_tables": ["airlines"]}, "evidence": "dates of the flights refers to FL_DATE; cancelled refers to CANCELLED = 1; most serious reason refers to CANCELLATION_CODE = 'A';"}
{"sample_id": 5824, "db_id": "airline", "final": {"question": "Please list the departure airports of the flights on 2018/8/1 that were delayed.", "sql": "SELECT T1.Description FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE = '2018/8/1' AND T2.DEP_DELAY > 0 GROUP BY T1.Description", "source_tables": ["airlines", "airports"]}, "evidence": "departure airports refers ORIGIN; on 2018/8/1 refers to FL_DATE = '2018/8/1'; delayed refers to DEP_DELAY > 0;"}
{"sample_id": 5825, "db_id": "airline", "final": {"question": "Among the flights on 2018/8/1, how many of them were scheduled to depart from John F. Kennedy International in New York?", "sql": "SELECT COUNT(T1.Code) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE = '2018/8/1' AND T1.Description = 'New York, NY: John F. Kennedy International'", "source_tables": ["airlines", "airports"]}, "evidence": "on 2018/8/1 refers to FL_DATE = '2018/8/1'; depart from refers to ORIGIN; John F. Kennedy International in New York refers to Description = 'New York, NY: John F. Kennedy International';"}
{"sample_id": 5826, "db_id": "airline", "final": {"question": "For the flight on 2018/8/1 that was delayed for the longest time, which was the destination airport of this flight?", "sql": "SELECT T1.Description FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE = '2018/8/1' ORDER BY T2.DEP_DELAY DESC LIMIT 1", "source_tables": ["airlines", "airports"]}, "evidence": "on 2018/8/1 refers to FL_DATE = '2018/8/1';\u00a0 delayed for the longest time refers to MAX(DEP_DELAY); destination airport refers to DEST;"}
{"sample_id": 5827, "db_id": "airline", "final": {"question": "Among the flights departing from John F. Kennedy International, how many of them arrived earlier than scheduled?", "sql": "SELECT SUM(CASE WHEN T2.ARR_DELAY < 0 THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T1.Description = 'New York, NY: John F. Kennedy International'", "source_tables": ["airlines", "airports"]}, "evidence": "departing from refers to ORIGIN; John F. Kennedy International refers to Description = 'New York, NY: John F. Kennedy International'; arrived earlier than scheduled refers to ARR_DELAY < 0;"}
{"sample_id": 5828, "db_id": "airline", "final": {"question": "Among all the flights scheduled to depart from John F. Kennedy International on 2018/8/1, when was the earliest one scheduled to depart?", "sql": "SELECT T2.DEP_TIME FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE = '2018/8/1' AND T1.Description = 'New York, NY: John F. Kennedy International' AND T2.DEP_TIME IS NOT NULL ORDER BY T2.DEP_TIME ASC LIMIT 1", "source_tables": ["airlines", "airports"]}, "evidence": "depart from refers to ORIGIN; John F. Kennedy International refers to Description = 'New York, NY: John F. Kennedy International'; on 2018/8/1 refers to FL_DATE = '2018/8/1'; earliest one scheduled to depart refers to MIN(DEP_TIME);"}
{"sample_id": 5829, "db_id": "airline", "final": {"question": "How many flights on 2018/8/1 were operated by American Airlines Inc.?", "sql": "SELECT COUNT(*) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN 'Air Carriers' AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T2.FL_DATE = '2018/8/1' AND T3.Description = 'American Airlines Inc.: AA'", "source_tables": ["airlines", "air carriers", "airports"]}, "evidence": "on 2018/8/1 refers to FL_DATE = '2018/8/1'; American Airlines Inc. refers to Description = 'American Airlines Inc.: AA';"}
{"sample_id": 5830, "db_id": "airline", "final": {"question": "Please list the flight numbers of all the flights operated by American Airlines Inc. that were scheduled to depart from John F. Kennedy International.", "sql": "SELECT T2.OP_CARRIER_FL_NUM FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN 'Air Carriers' AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA' AND T1.Description = 'New York, NY: John F. Kennedy International' AND T2.FL_DATE = '2018/8/1'", "source_tables": ["airlines", "air carriers", "airports"]}, "evidence": "flight numbers refers to OP_CARRIER_FL_NUM; American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; depart from refers to ORIGIN; John F. Kennedy International refers to Description = 'New York, NY: John F. Kennedy International';"}
{"sample_id": 5831, "db_id": "airline", "final": {"question": "How many flights operated by American Airlines Inc. on 2018/8/1 were faster than scheduled?", "sql": "SELECT SUM(CASE WHEN T2.ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN 'Air Carriers' AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T2.FL_DATE = '2018/8/1' AND T3.Description = 'American Airlines Inc.: AA'", "source_tables": ["airlines", "air carriers", "airports"]}, "evidence": "American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; on 2018/8/1 refers to FL_DATE = '2018/8/1'; faster than scheduled refers to ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME;"}
{"sample_id": 5832, "db_id": "airline", "final": {"question": "What is the flight number of the flight operated by American Airlines Inc. that had the longest delay in departure?", "sql": "SELECT T1.OP_CARRIER_FL_NUM FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T2.Code = T1.ORIGIN INNER JOIN 'Air Carriers' AS T3 ON T1.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA' ORDER BY T1.DEP_TIME DESC LIMIT 1", "source_tables": ["airlines", "air carriers", "airports"]}, "evidence": "flight numbers refers to OP_CARRIER_FL_NUM; American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; longest delay in departure refers to MAX(DEP_DELAY);"}
{"sample_id": 5833, "db_id": "airline", "final": {"question": "Among the flights operated by American Airlines Inc., how many of them were scheduled to land in New York?", "sql": "SELECT SUM(CASE WHEN T2.DEST = 'JFK' THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST INNER JOIN 'Air Carriers' AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA'", "source_tables": ["airlines", "air carriers", "airports"]}, "evidence": "American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; land in New York refers to DEST = 'JFK';"}
{"sample_id": 5834, "db_id": "airline", "final": {"question": "Among the flights operated by American Airlines Inc. on 2018/8/1, how many of them were cancelled?", "sql": "SELECT SUM(CASE WHEN T2.CANCELLED = 1 THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN 'Air Carriers' AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T2.FL_DATE = '2018/8/1' AND T3.Description = 'American Airlines Inc.: AA'", "source_tables": ["airlines", "air carriers", "airports"]}, "evidence": "American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; on 2018/8/1 refers to FL_DATE = '2018/8/1'; cancelled refers to CANCELLED = 1;"}
{"sample_id": 5835, "db_id": "airline", "final": {"question": "Which airline operated more flights on 2018/8/1, American Airlines Inc. or Endeavor Air Inc.?", "sql": "SELECT CASE WHEN COUNT(CASE WHEN T3.Description = 'American Airlines Inc.: AA' THEN 1 ELSE NULL END) > COUNT(CASE WHEN T3.Description = 'Endeavor Air Inc.: 9E' THEN 1 ELSE NULL END) THEN 'American Airlines Inc.: AA' ELSE 'Endeavor Air Inc.: 9E' END AS RESULT FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN 'Air Carriers' AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T2.FL_DATE = '2018/8/1'", "source_tables": ["airlines", "air carriers", "airports"]}, "evidence": "SUM(Description = 'American Airlines Inc.: AA') > SUM(Description = 'Endeavor Air Inc.: 9E') means American Airlines Inc. operated more flights than\u00a0 Endeavor Air Inc; SUM(Description = 'American Airlines Inc.: AA') < SUM(Description = 'Endeavor Air Inc.: 9E') means Endeavor Air Inc. operated more flights than American Airlines Inc.; on 2018/8/1 refers to FL_DATE = '2018/8/1';"}
{"sample_id": 5836, "db_id": "airline", "final": {"question": "What is the average departure delay time of flights operated by American Airlines Inc.?", "sql": "SELECT AVG(T1.DEP_DELAY) FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T2.Code = T1.ORIGIN INNER JOIN 'Air Carriers' AS T3 ON T1.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA'", "source_tables": ["airlines", "air carriers", "airports"]}, "evidence": "average departure delay time = DIVIDE(SUM(DEP_DELAY), COUNT(Code)); American Airlines Inc. refers to Description = 'American Airlines Inc.: AA';"}
{"sample_id": 5837, "db_id": "airline", "final": {"question": "How many flights on average does American Airlines Inc. operate every day in August, 2018?", "sql": "SELECT CAST( SUM(CASE WHEN T2.FL_DATE LIKE '2018/8%' THEN 1 ELSE 0 END) AS REAL) / 31 FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN 'Air Carriers' AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA'", "source_tables": ["airlines", "air carriers", "airports"]}, "evidence": "flights on average = DIVIDE(COUNT(Code), 31); American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; every day in August, 2018 refers to FL_DATE like '2018/8%';"}
{"sample_id": 5838, "db_id": "airline", "final": {"question": "What is the number of air carriers in the database?", "sql": "SELECT COUNT(Code) FROM 'Air Carriers'", "source_tables": ["air carriers"]}, "evidence": ""}
{"sample_id": 5839, "db_id": "airline", "final": {"question": "Give the number of planes that took off from Los Angeles International airport on 2018/8/27.", "sql": "SELECT SUM(CASE WHEN T2.FL_DATE = '2018/8/27' THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T1.Description = 'Los Angeles, CA: Los Angeles International'", "source_tables": ["airlines", "airports"]}, "evidence": "took off from refers to ORIGIN; Los Angeles International airport refers to Description = 'Los Angeles, CA: Los Angeles International'; on 2018/8/27 refers to FL_DATE = '2018/8/27';"}
{"sample_id": 5840, "db_id": "airline", "final": {"question": "Provide the number of airplanes that landed on Oakland Airport on 2018/8/7.", "sql": "SELECT SUM(CASE WHEN T1.Description LIKE '%Oakland%' THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE = '2018/8/7'", "source_tables": ["airlines", "airports"]}, "evidence": "landed on refers to DEST; Oakland Airport refers to Description which contains 'Oakland'; on 2018/8/7 refers to FL_DATE = '2018/8/7';"}
{"sample_id": 5841, "db_id": "airline", "final": {"question": "How many flights of Alaska Airlines were delayed on 2018/8/2?", "sql": "SELECT COUNT(*) FROM Airlines AS T1 INNER JOIN 'Air Carriers' AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.FL_DATE = '2018/8/2' AND T2.Description = 'Alaska Airlines Inc.: AS' AND T1.DEP_DELAY > 0", "source_tables": ["airlines", "air carriers"]}, "evidence": "Alaska Airlines refers to Description = 'Alaska Airlines Inc.: AS'; delayed refers to DEP_DELAY > 0; on 2018/8/2 refers to FL_DATE = '2018/8/2';"}
{"sample_id": 5842, "db_id": "airline", "final": {"question": "Tell the number of fights landed earlier on Miami Airport on 2018/8/12.", "sql": "SELECT COUNT(*) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE = '2018/8/12' AND T2.DEST = 'MIA' AND T2.ARR_DELAY < 0", "source_tables": ["airlines", "airports"]}, "evidence": "landed on refers to DEST; landed earlier refers to ARR_DELAY < 0; Miami Airport refers to DEST = 'MIA'; on 2018/8/12 refers to FL_DATE = '2018/8/12';"}
{"sample_id": 5843, "db_id": "airline", "final": {"question": "How many flights from American Airlines were cancelled due to a type A cancellation code?", "sql": "SELECT COUNT(*) FROM Airlines AS T1 INNER JOIN 'Air Carriers' AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.CANCELLATION_CODE = 'A' AND T2.Description = 'American Airlines Inc.: AA' AND T1.CANCELLED = 1", "source_tables": ["airlines", "air carriers"]}, "evidence": "American Airlines refers to Description = 'American Airlines Inc.: AA'; cancelled refers to Cancelled = 1; cancelled due to type A cancellation code refers to CANCELLATION_CODE = 'A';"}
{"sample_id": 5844, "db_id": "airline", "final": {"question": "How many flights of Endeavor Air Inc. were faster than scheduled on 2018/8/31?", "sql": "SELECT SUM(CASE WHEN T1.ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME THEN 1 ELSE 0 END) AS count FROM Airlines AS T1 INNER JOIN 'Air Carriers' AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.FL_DATE = '2018/8/31' AND T2.Description = 'Endeavor Air Inc.: 9E'", "source_tables": ["airlines", "air carriers"]}, "evidence": "Endeavor Air Inc. refers to Description = 'Endeavor Air Inc.: 9E'; faster than scheduled refers to ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME; on 2018/8/31 refers to FL_DATE = '2018/8/31';"}
{"sample_id": 5845, "db_id": "airline", "final": {"question": "How many planes of Spirit Air Lines took off on 2018/8/7?", "sql": "SELECT COUNT(T2.Code) FROM Airlines AS T1 INNER JOIN 'Air Carriers' AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.FL_DATE = '2018/8/7' AND T2.Description = 'Spirit Air Lines: NK'", "source_tables": ["airlines", "air carriers"]}, "evidence": "Spirit Air Lines refers to Description = 'Spirit Air Lines: NK'; on 2018/8/7 refers to FL_DATE = '2018/8/7';"}
{"sample_id": 5846, "db_id": "airline", "final": {"question": "For the flight with the tail number 'N702SK', which air carrier does it belong to?", "sql": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN 'Air Carriers' AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.TAIL_NUM = 'N702SK' GROUP BY T2.Description", "source_tables": ["airlines", "air carriers"]}, "evidence": "tail number refers to TAIL_NUM; TAIL_NUM = 'N702SK';"}
{"sample_id": 5847, "db_id": "airline", "final": {"question": "Provide the name of the airport which landed the most number of flights on 2018/8/15.", "sql": "SELECT T1.Description FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE = '2018/8/15' ORDER BY T2.DEST DESC LIMIT 1", "source_tables": ["airlines", "airports"]}, "evidence": "name of the airport refers to Description; airport that landed the most number of flights refers to MAX(COUNT(DEST)); on 2018/8/15 refers to FL_DATE = '2018/8/15';"}
{"sample_id": 5848, "db_id": "airline", "final": {"question": "For the flight from ATL to PHL on 2018/8/1 that scheduled local departure time as \"2040\", which air carrier does this flight belong to?", "sql": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN 'Air Carriers' AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.FL_DATE = '2018/8/1' AND T1.ORIGIN = 'ATL' AND T1.DEST = 'PHL' AND T1.CRS_DEP_TIME = '2040' GROUP BY T2.Description", "source_tables": ["airlines", "air carriers"]}, "evidence": "flight from ATL refers to ORIGIN = 'ATL'; flight to PHL refers to DEST = 'PHL'; on 2018/8/1 refers to FL_DATE = '2018/8/1'; local departure time refers to CRS_DEP_TIME; CRS_DEP_TIME = '2040';"}
{"sample_id": 5849, "db_id": "airline", "final": {"question": "Tell the number of flights that landed at Lake Charles Regional Airport on 2018/8/15.", "sql": "SELECT COUNT(T1.Code) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE = '2018/8/15' AND T1.Description = 'Lake Charles, LA: Lake Charles Regional'", "source_tables": ["airlines", "airports"]}, "evidence": "landed at refers to DEST; Lake Charles Regional Airport refers to Description = 'Lake Charles, LA: Lake Charles Regional'; on 2018/8/15 refers to FL_DATE = '2018/8/15';"}
{"sample_id": 5850, "db_id": "airline", "final": {"question": "How many flights were there from San Diego International airport to Los Angeles International airport in the August of 2018?", "sql": "SELECT COUNT(FL_DATE) FROM Airlines WHERE FL_DATE LIKE '2018/8%' AND ORIGIN = ( SELECT T2.ORIGIN FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T1.Description = 'San Diego, CA: San Diego International' ) AND DEST = ( SELECT T4.DEST FROM Airports AS T3 INNER JOIN Airlines AS T4 ON T3.Code = T4.DEST WHERE T3.Description = 'Los Angeles, CA: Los Angeles International' )", "source_tables": ["airlines", "airports"]}, "evidence": "flights from refers to ORIGIN; San Diego International airport refers to Description = 'San Diego, CA: San Diego International'; flights to refers to DEST; Los Angeles International airport refers to Description = 'Los Angeles, CA: Los Angeles International';\u00a0in the August of 2018 refers to FL_DATE like '2018/8%';"}
{"sample_id": 5851, "db_id": "airline", "final": {"question": "What is the percentage of flights from Los Angeles International airport that were cancelled due to a type C cancellation code?", "sql": "SELECT CAST(SUM(CASE WHEN T2.CANCELLATION_CODE = 'C' THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE = '2018/8/15' AND T2.CANCELLATION_CODE IS NOT NULL AND T1.Description = 'Los Angeles, CA: Los Angeles International'", "source_tables": ["airlines", "airports"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(CANCELLATION_CODE = 'C'), COUNT(Code)), 100); flights from refers to ORIGIN; Los Angeles International airport refers to Description = 'Los Angeles, CA: Los Angeles International'; cancelled refers to Cancelled = 1; cancelled due to a type C cancellation code refers to CANCELLATION_CODE = 'C';"}
{"sample_id": 5852, "db_id": "airline", "final": {"question": "What is the percentage of flights which landed at Pittsburgh were faster than scheduled?", "sql": "SELECT CAST(SUM(CASE WHEN T1.ACTUAL_ELAPSED_TIME < T1.CRS_ELAPSED_TIME THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T2.Code = T1.DEST WHERE T2.Description LIKE '%Pittsburgh%' AND T1.CRS_ELAPSED_TIME IS NOT NULL AND T1.ACTUAL_ELAPSED_TIME IS NOT NULL", "source_tables": ["airlines", "airports"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(ACTUAL_ELAPSED_TIME < T2.CRS_ELAPSED_TIME), COUNT(Code)), 100); landed at refers to DEST; Pittsburgh refers to Description which contains 'Pittsburgh'; faster than scheduled refers to ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME;"}
{"sample_id": 5853, "db_id": "airline", "final": {"question": "What is the description of the airline code 19049?", "sql": "SELECT Description FROM 'Air Carriers' WHERE Code = 19049", "source_tables": ["air carriers"]}, "evidence": ""}
{"sample_id": 5854, "db_id": "airline", "final": {"question": "How many flights departed on time on 8/1/2018?", "sql": "SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018/8/1' AND DEP_DELAY <= 0", "source_tables": ["airlines"]}, "evidence": "departed on time refers to DEP_DELAY < = 0; on 8/1/2018 refers to FL_DATE = '2018/8/1';"}
{"sample_id": 5855, "db_id": "airline", "final": {"question": "What are the codes of the airport found in Ankara, Turkey?", "sql": "SELECT Code FROM Airports WHERE Description LIKE '%Ankara, Turkey%'", "source_tables": ["airports"]}, "evidence": "airport found in Ankara, Turkey refers to Description like '%Ankara, Turkey%';"}
{"sample_id": 5856, "db_id": "airline", "final": {"question": "How long was the longest minute delay caused by a weather problem in airport id 12264?", "sql": "SELECT WEATHER_DELAY FROM Airlines WHERE ORIGIN_AIRPORT_ID = 12264 ORDER BY WEATHER_DELAY DESC LIMIT 1", "source_tables": ["airlines"]}, "evidence": "longest minute delay caused by a weather problem refers to MAX(WEATHER_DELAY); airport id refers to ORIGIN_AIRPORT_ID; ORIGIN_AIRPORT_ID = 12264;"}
{"sample_id": 5857, "db_id": "airline", "final": {"question": "What is the IATA code of the Anita Bay Airport in Anita Bay, Alaska?", "sql": "SELECT Code FROM Airports WHERE Description = 'Anita Bay, AK: Anita Bay Airport'", "source_tables": ["airports"]}, "evidence": "IATA code refers to Code; Anita Bay Airport in Anita Bay, Alaska refers to Description = 'Anita Bay, AK: Anita Bay Airport';"}
{"sample_id": 5858, "db_id": "airline", "final": {"question": "What is the origin airport id that recorded the longest delay due to a late aircraft?", "sql": "SELECT ORIGIN_AIRPORT_ID FROM Airlines ORDER BY LATE_AIRCRAFT_DELAY DESC LIMIT 1", "source_tables": ["airlines"]}, "evidence": "origin airport id refers to ORIGIN_AIRPORT_ID; longest delay due to a late aircraft refers to MAX(LATE_AIRCRAFT_DELAY);"}
{"sample_id": 5859, "db_id": "airline", "final": {"question": "How many flights depart to Hartsfield-Jackson Atlanta International from Chicago O'Hare International?", "sql": "SELECT COUNT(FL_DATE) FROM Airlines WHERE ORIGIN = ( SELECT T2.ORIGIN FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T1.Description = 'Chicago, IL: Chicago O''Hare International' ) AND DEST = ( SELECT T4.DEST FROM Airports AS T3 INNER JOIN Airlines AS T4 ON T3.Code = T4.DEST WHERE T3.Description = 'Atlanta, GA: Hartsfield-Jackson Atlanta International' )", "source_tables": ["airlines", "airports"]}, "evidence": "depart to refers to DEST; Hartsfield-Jackson Atlanta International refers to Description = 'Atlanta, GA: Hartsfield-Jackson Atlanta International'; depart from refers to ORIGIN; Chicago O'Hare International refes to Description = 'Chicago, IL: Chicago O'Hare International';"}
{"sample_id": 5860, "db_id": "airline", "final": {"question": "How many planes does Southwest Airlines Co. have?", "sql": "SELECT COUNT(T3.TAIL_NUM) FROM ( SELECT T1.TAIL_NUM FROM Airlines AS T1 INNER JOIN 'Air Carriers' AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T2.Description = 'Southwest Airlines Co.: WN' GROUP BY T1.TAIL_NUM ) T3", "source_tables": ["airlines", "air carriers"]}, "evidence": "planes refers to TAIL_NUM; Southwest Airlines Co. refers to Description = 'Southwest Airlines Co.: WN';"}
{"sample_id": 5861, "db_id": "airline", "final": {"question": "On August 2018, which day had the highest number of cancelled flights due to the most serious reasons in Dallas/Fort Worth International?", "sql": "SELECT T2.FL_DATE FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE LIKE '2018/8%' AND T1.Description = 'Dallas/Fort Worth, TX: Dallas/Fort Worth International' AND T2.ORIGIN = 'DFW' AND T2.CANCELLED = 1 AND T2.CANCELLATION_CODE = 'A' GROUP BY T2.FL_DATE ORDER BY COUNT(T2.FL_DATE) DESC LIMIT 1", "source_tables": ["airlines", "airports"]}, "evidence": "On August 2018 refers to FL_DATE like '2018/8%'; day with the highest number of cancelled flights refers to MAX(COUNT(FL_DATE WHERE CANCELLED = 1)); cancelled due to the most serious reasons refers to CANCELLATION_CODE = 'A'; in Dallas/Fort Worth International refers to Description = 'Dallas/Fort Worth, TX: Dallas/Fort Worth International';"}
{"sample_id": 5862, "db_id": "airline", "final": {"question": "List the tail numbers of all the aircraft that arrived on time at Meadows Field airport in August of 2018?", "sql": "SELECT T2.TAIL_NUM FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE LIKE '2018/8%' AND T1.Description = 'Bakersfield, CA: Meadows Field' AND T2.DEST = 'BFL' AND T2.ARR_DELAY <= 0 GROUP BY T2.TAIL_NUM", "source_tables": ["airlines", "airports"]}, "evidence": "tail number refers to TAIL_NUM; arrived on time refers to ARR_DELAY < = 0; Meadows Field airport refers to Description = 'Bakersfield, CA: Meadows Field'; in August of 2018 refers to FL_DATE like '2018/8%';"}
{"sample_id": 5863, "db_id": "airline", "final": {"question": "Among the airports whose destination is Logan International, what is the airline id of the carrier operator with the highest delay in minutes due to security?", "sql": "SELECT T2.OP_CARRIER_AIRLINE_ID FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T1.Description = 'Boston, MA: Logan International' AND T2.DEST = 'BOS' ORDER BY T2.SECURITY_DELAY DESC LIMIT 1", "source_tables": ["airlines", "airports"]}, "evidence": "destination refers to DEST; Logan International refers to Description = 'Boston, MA: Logan International'; airline id of the carrier operator refers to OP_CARRIER_AIRLINE_ID; highest delay in minutes due to security refers to MAX(SECURITY_DELAY);"}
{"sample_id": 5864, "db_id": "airline", "final": {"question": "What are the names of the top 5 airlines with the highest number of aircraft?", "sql": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN 'Air Carriers' AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code GROUP BY T2.Description ORDER BY T1.TAIL_NUM DESC LIMIT 5", "source_tables": ["airlines", "air carriers"]}, "evidence": "names of the airlines refers to Description; highest number of aircraft refers to MAX(COUNT(TAIL_NUM));"}
{"sample_id": 5865, "db_id": "airline", "final": {"question": "What is the name of the airline with the highest number of non-cancelled flights?", "sql": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN 'Air Carriers' AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.CANCELLED = 0 GROUP BY T2.Description ORDER BY COUNT(T1.CANCELLED) DESC LIMIT 1", "source_tables": ["airlines", "air carriers"]}, "evidence": "names of the airlines refers to Description; highest number of non-cancelled flights refers to MAX(COUNT(CANCELLED = 0));"}
{"sample_id": 5866, "db_id": "airline", "final": {"question": "Give the name of the airline to which tail number N202NN belongs to.", "sql": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN 'Air Carriers' AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.TAIL_NUM = 'N202NN' GROUP BY T2.Description", "source_tables": ["airlines", "air carriers"]}, "evidence": "name of the airline refers to Description; tail number refers to TAIL_NUM; TAIL_NUM = 'N202NN';"}
{"sample_id": 5867, "db_id": "airline", "final": {"question": "What is the name of the airline that flew the most flights to Chicago Midway International?", "sql": "SELECT T3.Description FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST INNER JOIN 'Air Carriers' AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T1.Description = 'Chicago, IL: Chicago Midway International' AND T2.DEST = 'MDW' GROUP BY T3.Description ORDER BY COUNT(T3.Description) DESC LIMIT 1", "source_tables": ["airlines", "air carriers", "airports"]}, "evidence": "name of the airline refers to Description; flights to refers to DEST; Chicago Midway International refers to Description = 'Chicago, IL: Chicago Midway International'; most flights to Chicago Midway International refers to MAX(COUNT(DEST WHERE Description = 'Chicago, IL: Chicago Midway International'));"}
{"sample_id": 5868, "db_id": "airline", "final": {"question": "What is the tail number of a Compass Airline's plane that flew the most number of flights from LAX to ABQ?", "sql": "SELECT T2.OP_CARRIER_AIRLINE_ID FROM 'Air Carriers' AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Compass Airlines: CP' AND T2.ORIGIN = 'LAX' AND T2.DEST = 'ABQ' GROUP BY T2.OP_CARRIER_AIRLINE_ID ORDER BY COUNT(T2.OP_CARRIER_AIRLINE_ID) DESC LIMIT 1", "source_tables": ["airlines", "air carriers"]}, "evidence": "tail number refers to TAIL_NUM; Compass Airline refers to Description = 'Compass Airlines: CP'; flew the most number of lights from LAX TO ABQ refers to MAX(COUNT(OP_CARRIER_AIRLINE_ID WHERE ORIGIN = 'LAX' and DEST = 'ABQ')); from LAX refers to ORIGIN = 'LAX'; to ABQ refers to DEST = 'ABQ';"}
{"sample_id": 5869, "db_id": "airline", "final": {"question": "Which airport did Republic Airline fly the most from?", "sql": "SELECT T2.DEST FROM 'Air Carriers' AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Republic Airline: YX' GROUP BY T2.DEST ORDER BY COUNT(T2.DEST) DESC LIMIT 1", "source_tables": ["airlines", "air carriers"]}, "evidence": "Republic Airline refers to Description = 'Republic Airline: YX'; fly the most from refers to MAX(COUNT(ORIGIN));"}
{"sample_id": 5870, "db_id": "airline", "final": {"question": "Which airline does the aircraft with the fastest flight belong to?", "sql": "SELECT T1.OP_CARRIER_AIRLINE_ID FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T1.ORIGIN = T2.Code WHERE T1.ACTUAL_ELAPSED_TIME IS NOT NULL AND T1.CRS_ELAPSED_TIME IS NOT NULL ORDER BY T1.ACTUAL_ELAPSED_TIME - T1.CRS_ELAPSED_TIME ASC LIMIT 1", "source_tables": ["airlines", "airports"]}, "evidence": "fastest flight refers to MIN(SUBTRACT(ACTUAL_ELAPSED_TIME, CRS_ELAPSED_TIME));"}
{"sample_id": 5871, "db_id": "airline", "final": {"question": "How many hours in total did all of the Delta Air Lines aircraft were delayed due to a late aircraft in August of 2018? Identify the plane number of the aircraft with the highest delayed hours.", "sql": "SELECT T1.TAIL_NUM, SUM(CAST(T1.LATE_AIRCRAFT_DELAY AS REAL) / 60) AS delay FROM Airlines AS T1 INNER JOIN 'Air Carriers' AS T2 ON T2.Code = T1.OP_CARRIER_AIRLINE_ID WHERE T1.FL_DATE LIKE '2018/8/%' AND T2.Description = 'Delta Air Lines Inc.: DL' ORDER BY delay DESC LIMIT 1", "source_tables": ["airlines", "air carriers"]}, "evidence": "hours in total = DIVIDE(SUM(LATE_AIRCRAFT_DELAY), 60); Delta Air Lines refers to Description = 'Delta Air Lines Inc.: DL'; delayed due to a late aircraft refers to LATE_AIRCRAFT_DELAY; in August of 2018 refers to FL_DATE like '2018/8/%'; plane number refers to TAIL_NUM; highest delayed hours refers to MAX(DIVIDE(SUM(LATE_AIRCRAFT_DELAY),60));"}
{"sample_id": 5872, "db_id": "airline", "final": {"question": "Please list any three airports with their codes.", "sql": "SELECT Code, Description FROM Airports LIMIT 3", "source_tables": ["airports"]}, "evidence": ""}
{"sample_id": 5873, "db_id": "airline", "final": {"question": "What is the code of Mississippi Valley Airlines?", "sql": "SELECT Code FROM 'Air Carriers' WHERE Description LIKE 'Mississippi Valley Airlines%'", "source_tables": ["air carriers"]}, "evidence": "Mississippi Valley Airlines refers to Description like 'Mississippi Valley Airlines%';"}
{"sample_id": 5874, "db_id": "airline", "final": {"question": "What is the scheduled local departure time and the actual departure time of the flight from Philadelphia to Harrisburg with the plane's tail number N627AE on the 13th of August 2018?", "sql": "SELECT CRS_DEP_TIME, DEP_TIME FROM Airlines WHERE ORIGIN = 'PHL' AND DEST = 'MDT' AND TAIL_NUM = 'N627AE' AND FL_DATE = '2018/8/13'", "source_tables": ["airlines"]}, "evidence": "scheduled local departure time refers to CRS_DEP_TIME; actual departure time refers to DEP_TIME; from Philadelphia refers to ORIGIN = 'PHL'; to Harrisburg refers to DEST = 'MDT'; tail number refers to TAIL_NUM; TAIL_NUM = 'N627AE'; on the 13th of August 2018 refers to FL_DATE = '2018/8/13';"}
{"sample_id": 5912, "db_id": "books", "final": {"question": "Among the books published by publisher ID 1929, how many of them have over 500 pages?", "sql": "SELECT COUNT(*) FROM book WHERE publisher_id = 1929 AND num_pages > 500", "source_tables": ["book"]}, "evidence": "books have over 500 pages refers to num_pages > 500"}
{"sample_id": 5913, "db_id": "books", "final": {"question": "What is the publication date of the book with the most pages?", "sql": "SELECT publication_date FROM book ORDER BY num_pages DESC LIMIT 1", "source_tables": ["book"]}, "evidence": "book with the most pages refers to Max(num_pages)"}
{"sample_id": 5914, "db_id": "books", "final": {"question": "What is the name of the publisher of the book \"The Illuminati\"?", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'The Illuminati'", "source_tables": ["publisher", "book"]}, "evidence": "\"The Illuminati\" is the title of the book; name of publisher refers to publisher_name"}
{"sample_id": 5915, "db_id": "books", "final": {"question": "How many books were published by publisher \"Thomas Nelson\"?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Thomas Nelson'", "source_tables": ["publisher", "book"]}, "evidence": "\"Thomas Nelson\" is the publisher_name"}
{"sample_id": 5916, "db_id": "books", "final": {"question": "What is the name of the publisher that has published the most number of books?", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id GROUP BY T2.publisher_name ORDER BY COUNT(T1.book_id) DESC LIMIT 1", "source_tables": ["publisher", "book"]}, "evidence": "name of publisher refers to publisher_name; publisher published the most number of books refers to Max(Count(book_id))"}
{"sample_id": 5917, "db_id": "books", "final": {"question": "Please give the title of the oldest book published by publisher \"Thomas Nelson\".", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Thomas Nelson' ORDER BY T1.publication_date ASC LIMIT 1", "source_tables": ["publisher", "book"]}, "evidence": "\"Thomas Nelson\" is the publisher_name; oldest book refers to Min(publication_date)"}
{"sample_id": 5918, "db_id": "books", "final": {"question": "Among the books published by publisher \"Thomas Nelson\", how many of them have over 300 pages?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Thomas Nelson' AND T1.num_pages > 300", "source_tables": ["publisher", "book"]}, "evidence": "\"Thomas Nelson\" is the publisher_name; books with over 300 pages refers to num_pages > 300"}
{"sample_id": 5919, "db_id": "books", "final": {"question": "What is the name of the publisher of the book with the most pages?", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id ORDER BY T1.num_pages DESC LIMIT 1", "source_tables": ["publisher", "book"]}, "evidence": "book with the most pages refers to Max(num_pages); name of publisher refers to publisher_name"}
{"sample_id": 5920, "db_id": "books", "final": {"question": "How many books are in English?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'English'", "source_tables": ["book_language", "book"]}, "evidence": "books in English refers to language_name = 'English'"}
{"sample_id": 5921, "db_id": "books", "final": {"question": "Please list the titles of all the books in British English.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'British English'", "source_tables": ["book_language", "book"]}, "evidence": "\"British English\" is the language_name of the book"}
{"sample_id": 5922, "db_id": "books", "final": {"question": "What is the cheapest order price of the book \"The Little House\"?", "sql": "SELECT MIN(T2.price) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'The Little House'", "source_tables": ["order_line", "book"]}, "evidence": "\"The Little House\" is the title of book; cheapest order price refers to Min(price)"}
{"sample_id": 5923, "db_id": "books", "final": {"question": "Please list the titles of all the books that Lucas Wyldbore has ordered.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Lucas' AND T4.last_name = 'Wyldbore'", "source_tables": ["order_line", "cust_order", "customer", "book"]}, "evidence": ""}
{"sample_id": 5924, "db_id": "books", "final": {"question": "Among the books ordered by Lucas Wyldbore, how many of them are over 300 pages?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Lucas' AND T4.last_name = 'Wyldbore' AND T1.num_pages > 300", "source_tables": ["order_line", "cust_order", "customer", "book"]}, "evidence": "books have over 300 pages refers to num_pages > 300"}
{"sample_id": 5925, "db_id": "books", "final": {"question": "What is the total price of all the books ordered by Lucas Wyldbore?", "sql": "SELECT SUM(T1.price) FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T3.first_name = 'Lucas' AND T3.last_name = 'Wyldbore'", "source_tables": ["order_line", "cust_order", "customer"]}, "evidence": "total price refers to Sum(price)"}
{"sample_id": 5926, "db_id": "books", "final": {"question": "How much money on average does Lucas Wyldbore spend on book orders?", "sql": "SELECT SUM(T1.price) / COUNT(*) FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T3.first_name = 'Lucas' AND T3.last_name = 'Wyldbore'", "source_tables": ["order_line", "cust_order", "customer"]}, "evidence": "average spend on book orders = AVG (price)"}
{"sample_id": 5927, "db_id": "books", "final": {"question": "Among the books ordered by Lucas Wyldbore, what is the percentage of those books over $13?", "sql": "SELECT CAST(SUM(CASE WHEN T1.price > 13 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T3.first_name = 'Lucas' AND T3.last_name = 'Wyldbore'", "source_tables": ["order_line", "cust_order", "customer"]}, "evidence": "books over $13 refers to price > 13; percentage = Divide (Sum (order_id where price > 13), Count (order_id)) * 100"}
{"sample_id": 5928, "db_id": "books", "final": {"question": "Which city does the address id 547 belong to?", "sql": "SELECT city FROM address WHERE address_id = 547", "source_tables": ["address"]}, "evidence": ""}
{"sample_id": 5929, "db_id": "books", "final": {"question": "How many orders has Cordy Dumbarton made?", "sql": "SELECT COUNT(*) FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'Cordy' AND T1.last_name = 'Dumbarton'", "source_tables": ["cust_order", "customer"]}, "evidence": ""}
{"sample_id": 5930, "db_id": "books", "final": {"question": "List the title of the earliest published Japanese book.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'Japanese' ORDER BY T1.publication_date ASC LIMIT 1", "source_tables": ["book_language", "book"]}, "evidence": "Japanese book refers to language_name = 'Japanese'; earliest published refers to Min(publication_date)"}
{"sample_id": 5931, "db_id": "books", "final": {"question": "For the publisher which published the most books, show its name.", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id GROUP BY T2.publisher_name ORDER BY COUNT(T2.publisher_id) DESC LIMIT 1", "source_tables": ["publisher", "book"]}, "evidence": "published the most books refers to Max(Count(book_id)); publisher refers to publisher_name"}
{"sample_id": 5932, "db_id": "books", "final": {"question": "How many books were published by Kensington?", "sql": "SELECT COUNT(T1.book_id) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Kensington'", "source_tables": ["publisher", "book"]}, "evidence": "\"Kensington\" is the publisher_name;"}
{"sample_id": 5933, "db_id": "books", "final": {"question": "Which language was book id 1405 written in?", "sql": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T1.book_id = 1405", "source_tables": ["book_language", "book"]}, "evidence": "language written in refers to language_name;"}
{"sample_id": 5934, "db_id": "books", "final": {"question": "Which customer has made the most orders? Show his/her full name.", "sql": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.first_name, T1.last_name ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["cust_order", "customer"]}, "evidence": "most order refers to Max(Count(order_id)); customer refers to first_name, last_name"}
{"sample_id": 5935, "db_id": "books", "final": {"question": "Name the book title of the bestseller.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id GROUP BY T1.title ORDER BY COUNT(T1.title) DESC LIMIT 1", "source_tables": ["order_line", "book"]}, "evidence": "book title refers to title; best sellers refers to title where Max(count(order_id))"}
{"sample_id": 5936, "db_id": "books", "final": {"question": "How many books did David Foster Wallace write?", "sql": "SELECT COUNT(T1.title) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'David Foster Wallace'", "source_tables": ["author", "book_author", "book"]}, "evidence": "\"David Foster Wallace\" is the author_name;"}
{"sample_id": 5937, "db_id": "books", "final": {"question": "How many orders does the book \"O Xar\u00e1\" have?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'O Xar\u00e1'", "source_tables": ["order_line", "book"]}, "evidence": "\"O Xar\u00e1\" is the title of the book"}
{"sample_id": 5938, "db_id": "books", "final": {"question": "Which country does Malina Johnson live in?", "sql": "SELECT T4.country_name FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id INNER JOIN country AS T4 ON T4.country_id = T3.country_id WHERE T1.first_name = 'Malina' AND T1.last_name = 'Johnson' AND T2.status_id = 2", "source_tables": ["country", "customer", "customer_address", "address"]}, "evidence": "country refers to country_name"}
{"sample_id": 5939, "db_id": "books", "final": {"question": "Give the number of Ukrainian addresses in the database.", "sql": "SELECT COUNT(*) FROM country AS T1 INNER JOIN address AS T2 ON T1.country_id = T2.country_id WHERE T1.country_name = 'Ukraine'", "source_tables": ["country", "address"]}, "evidence": "Ukrainian address refers to country_name = 'Ukraine'"}
{"sample_id": 5940, "db_id": "books", "final": {"question": "Which country does \u017dirovnica city belong to?", "sql": "SELECT T1.country_name FROM country AS T1 INNER JOIN address AS T2 ON T1.country_id = T2.country_id WHERE T2.city = '\u017dirovnica'", "source_tables": ["country", "address"]}, "evidence": "\"\u017dirovnica\" is the city; country refers to country_name"}
{"sample_id": 5941, "db_id": "books", "final": {"question": "Calculate the percentage of the International shipping orders on 2022/11/10.", "sql": "SELECT CAST(SUM(CASE WHEN T1.method_name = 'International' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM shipping_method AS T1 INNER JOIN cust_order AS T2 ON T1.method_id = T2.shipping_method_id WHERE T2.order_date LIKE '2022-11-10%'", "source_tables": ["shipping_method", "cust_order"]}, "evidence": "International shipping order refers to method_name = 'International'; orders on 2022/11/10 refers to order_date LIKE '2022-11-10%'; percentage = Divide (Sum(order_id\u00a0 where method_name = 'International'), Count(order_id)) * 100"}
{"sample_id": 5942, "db_id": "books", "final": {"question": "What is the average number of pages of David Coward's books?", "sql": "SELECT AVG(T1.num_pages) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'David Coward'", "source_tables": ["author", "book_author", "book"]}, "evidence": "number of pages refers to num_pages; average = Divide (Sum(num_pages), Count(book_id))"}
{"sample_id": 5943, "db_id": "books", "final": {"question": "What is the cost of the slowest and least expensive shipping method?", "sql": "SELECT method_name FROM shipping_method ORDER BY cost ASC LIMIT 1", "source_tables": ["shipping_method"]}, "evidence": "slowest and least expesive method refers to shipping_method = 'Standard'"}
{"sample_id": 5944, "db_id": "books", "final": {"question": "What is the title of the first book that was published in 1900?", "sql": "SELECT title FROM book WHERE STRFTIME('%Y', publication_date) = '1900' ORDER BY publication_date LIMIT 1", "source_tables": ["book"]}, "evidence": "published in 1900 refers to publication_date LIKE '1900%'; first book refers to Min(publication_date)"}
{"sample_id": 5945, "db_id": "books", "final": {"question": "What is the full name of the customer who owns the \"aalleburtonkc@yellowbook.com\" e-mail address?", "sql": "SELECT first_name, last_name FROM customer WHERE email = 'aalleburtonkc@yellowbook.com'", "source_tables": ["customer"]}, "evidence": "\"aalleburtonkc@yellowbook.com\" is the email of customer; full name refers to first_name, last_name"}
{"sample_id": 5946, "db_id": "books", "final": {"question": "How many orders in 2022 have Iran as their destinations?", "sql": "SELECT COUNT(*) FROM country AS T1 INNER JOIN address AS T2 ON T1.country_id = T2.country_id INNER JOIN cust_order AS T3 ON T3.dest_address_id = T2.address_id WHERE T1.country_name = 'Iran' AND STRFTIME('%Y', T3.order_date) = '2022'", "source_tables": ["country", "cust_order", "address"]}, "evidence": "Iran as their destination refers to country_name = 'Iran'; orders in 2022 refers to order_date LIKE '2022%'"}
{"sample_id": 5947, "db_id": "books", "final": {"question": "Among Daisey Lamball's orders, how many were shipped via International shipping?", "sql": "SELECT COUNT(*) FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T2.shipping_method_id WHERE T1.first_name = 'Daisey' AND T1.last_name = 'Lamball' AND T3.method_name = 'International'", "source_tables": ["cust_order", "customer", "shipping_method"]}, "evidence": "via international shipping refers to method_name = 'International'"}
{"sample_id": 5948, "db_id": "books", "final": {"question": "What is the full name of the customer who ordered the most books of all time?", "sql": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.first_name, T1.last_name ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["cust_order", "customer"]}, "evidence": "customer who ordered the most book refers to customer_id where Max(count(order_id)); full name refers to first_name, last_name"}
{"sample_id": 5949, "db_id": "books", "final": {"question": "How many orders did Antonia Poltun return?", "sql": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T1.status_value = 'Returned' AND T4.first_name = 'Antonia' AND T4.last_name = 'Poltun'", "source_tables": ["customer", "order_history", "order_status", "cust_order"]}, "evidence": "order returned refers to status_value = 'Returned'"}
{"sample_id": 5950, "db_id": "books", "final": {"question": "Which shipping method is preferred by customers the most?", "sql": "SELECT T2.method_name FROM cust_order AS T1 INNER JOIN shipping_method AS T2 ON T1.shipping_method_id = T2.method_id GROUP BY T2.method_name ORDER BY COUNT(T2.method_id) DESC LIMIT 1", "source_tables": ["cust_order", "shipping_method"]}, "evidence": "shipping method preferred the most by customers refers to method_id where Max(Count(method_id)); which shipping method refers to method_name"}
{"sample_id": 5951, "db_id": "books", "final": {"question": "How many orders were delivered in 2021?", "sql": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Delivered' AND STRFTIME('%Y', T2.status_date) = '2021'", "source_tables": ["order_history", "order_status"]}, "evidence": "delivered refers to status_value = 'Delivered'; in 2021 refers to status_date LIKE '2021%'"}
{"sample_id": 5952, "db_id": "books", "final": {"question": "What is the name of the first book written by J.K Rowling?", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'J.K. Rowling' ORDER BY T1.publication_date ASC LIMIT 1", "source_tables": ["author", "book_author", "book"]}, "evidence": "\"J.K Rowling\" is the author_name; first published book refers to book_id where Min(publication_date); name of the book refers to title"}
{"sample_id": 5953, "db_id": "books", "final": {"question": "How many books did A.R. Braunmuller write?", "sql": "SELECT COUNT(*) FROM author AS T1 INNER JOIN book_author AS T2 ON T1.author_id = T2.author_id WHERE T1.author_name = 'A.R. Braunmuller'", "source_tables": ["book_author", "author"]}, "evidence": "\"A.R. Braunmuller\" is the author_name"}
{"sample_id": 5954, "db_id": "books", "final": {"question": "What is the name of the publisher who published Agatha Christie's first book?", "sql": "SELECT T4.publisher_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T3.author_name = 'Agatha Christie' ORDER BY T1.publication_date ASC LIMIT 1", "source_tables": ["author", "publisher", "book_author", "book"]}, "evidence": "\"Agatha Christie\" is the author_name; name of publisher refers to publisher_name; first book refers to Min(publication_date)"}
{"sample_id": 5955, "db_id": "books", "final": {"question": "List all the names of the books written by Danielle Steel.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Danielle Steel'", "source_tables": ["author", "book_author", "book"]}, "evidence": "\"Danielle Steel\" is the author_name; name of books refers to title"}
{"sample_id": 5956, "db_id": "books", "final": {"question": "How many books by William Shakespeare were published by Penguin Classics?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T3.author_name = 'William Shakespeare' AND T4.publisher_name = 'Penguin Classics'", "source_tables": ["author", "publisher", "book_author", "book"]}, "evidence": "\"William Shakespeare\" is the author_name; \"Penguin Classics\" is the publisher_name"}
{"sample_id": 5957, "db_id": "books", "final": {"question": "What is the name of the publisher that published the most books?", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id GROUP BY T2.publisher_name ORDER BY COUNT(T2.publisher_id) DESC LIMIT 1", "source_tables": ["publisher", "book"]}, "evidence": "name of publisher refers to publisher_name; publisher published the most number of books refers to Max(Count(book_id))"}
{"sample_id": 5958, "db_id": "books", "final": {"question": "What is the total shipping cost of all the orders made by Page Holsey? Indicate how many of the said orders were ordered in 2022.", "sql": "SELECT SUM(T3.cost) FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T2.shipping_method_id WHERE T1.first_name = 'Page' AND T1.last_name = 'Holsey' AND STRFTIME('%Y', T2.order_date) = '2022'", "source_tables": ["cust_order", "customer", "shipping_method"]}, "evidence": "shipping cost refers to cost; ordered in 2022 refers to order_date LIKE '2022%'"}
{"sample_id": 5959, "db_id": "books", "final": {"question": "What is the name of the publisher with publisher ID 22?", "sql": "SELECT publisher_name FROM publisher WHERE publisher_id = 22", "source_tables": ["publisher"]}, "evidence": "name of publisher refers to publisher_name"}
{"sample_id": 5960, "db_id": "books", "final": {"question": "How many of the books authored by Al Gore have less than 400 pages?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Al Gore' AND T1.num_pages < 400", "source_tables": ["author", "book_author", "book"]}, "evidence": "\"AI Gore\" is the author_name; have less than 400 pages refers to num_pages < 400"}
{"sample_id": 5961, "db_id": "books", "final": {"question": "List the author's and publisher's name of the book published on July 10, 1997.", "sql": "SELECT T3.author_name, T4.publisher_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T1.publication_date = '1997-07-10'", "source_tables": ["author", "publisher", "book_author", "book"]}, "evidence": "author's name refers to author_name; publisher's name refers to publisher_name; book published on July 10, 1997 refers to publication_date LIKE '1997-07-10'"}
{"sample_id": 5962, "db_id": "books", "final": {"question": "What is the language of the book with ISBN 23755004321?", "sql": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T1.isbn13 = 23755004321", "source_tables": ["book_language", "book"]}, "evidence": "\"23755004321\" is the isbn13; language refers to language_name"}
{"sample_id": 5963, "db_id": "books", "final": {"question": "What is the title of the most expensive book?", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id ORDER BY T2.price DESC LIMIT 1", "source_tables": ["order_line", "book"]}, "evidence": "most expensive book refers to Max(price)"}
{"sample_id": 5964, "db_id": "books", "final": {"question": "Calculate the total price of books ordered by customer named Lucas Wyldbore.", "sql": "SELECT SUM(T1.price) FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T3.first_name = 'Lucas' AND T3.last_name = 'Wyldbore'", "source_tables": ["order_line", "cust_order", "customer"]}, "evidence": "total price refers to Sum(price); full name is composed of first name, last name"}
{"sample_id": 5965, "db_id": "books", "final": {"question": "List the ISBN of the book published in Spanish.", "sql": "SELECT T1.isbn13 FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'Spanish'", "source_tables": ["book_language", "book"]}, "evidence": "\"Spanish\" is the language_name; ISBN refers to isbn13"}
{"sample_id": 5966, "db_id": "books", "final": {"question": "Among the books that cost less than 1 dollar, how many were published by Berkley Trade?", "sql": "SELECT COUNT(*) FROM publisher AS T1 INNER JOIN book AS T2 ON T1.publisher_id = T2.publisher_id INNER JOIN order_line AS T3 ON T3.book_id = T2.book_id WHERE T1.publisher_name = 'Berkley' AND T3.price < 1", "source_tables": ["order_line", "publisher", "book"]}, "evidence": "book cost less than 1 dollar refers to price < 1; 'Berkley Trade' is the publisher_name;"}
{"sample_id": 5967, "db_id": "books", "final": {"question": "List the title of the books purchased by the customer named Zia Roizin.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Zia' AND T4.last_name = 'Roizin'", "source_tables": ["order_line", "cust_order", "customer", "book"]}, "evidence": ""}
{"sample_id": 5968, "db_id": "books", "final": {"question": "Who authored the book with greatest number of pages?", "sql": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id ORDER BY T1.num_pages DESC LIMIT 1", "source_tables": ["author", "book_author", "book"]}, "evidence": "greatest number of pages refers to Max(num_pages); who authored refers to author_name"}
{"sample_id": 5969, "db_id": "books", "final": {"question": "List the email of customers that bought the book titled Switch on the Night.", "sql": "SELECT T4.email FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T1.title = 'Switch on the Night'", "source_tables": ["order_line", "cust_order", "customer", "book"]}, "evidence": "\"Switch on the Night\" is the title"}
{"sample_id": 5970, "db_id": "books", "final": {"question": "List the author's name of the books published by Abrams.", "sql": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T4.publisher_name = 'Abrams'", "source_tables": ["author", "publisher", "book_author", "book"]}, "evidence": "\"Abrams\" is the publisher_name; author's name refers to author_name"}
{"sample_id": 5971, "db_id": "books", "final": {"question": "What is the publisher name of the book titled The Illuminati?", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'The Illuminati'", "source_tables": ["publisher", "book"]}, "evidence": "\"The Illuminati\" is the title of book"}
{"sample_id": 5972, "db_id": "books", "final": {"question": "In books authored by Abraham Lincoln, what is the percentage of the books published in 1992?", "sql": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', T1.publication_date) = '1992' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Abraham Lincoln'", "source_tables": ["author", "book_author", "book"]}, "evidence": "\"Abraham Lincoln\" is the author_name; published in 1992 refers to publication_date LIKE '1992%'; percentage = Divide (Sum(publication_date LIKE '1992%'), Count(publication_date)) * 100"}
{"sample_id": 5973, "db_id": "books", "final": {"question": "Among the books published in 2004, list the name of the publisher of books with number of pages greater than 70% of the average number of pages of all books.", "sql": "SELECT T1.title, T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE STRFTIME('%Y', T1.publication_date) = '2004' AND T1.num_pages * 100 > ( SELECT AVG(num_pages) FROM book ) * 70", "source_tables": ["publisher", "book"]}, "evidence": "published in 2004 refers to publication_date LIKE '2004%'; books with number of pages greater than 70% of the average number of pages refers to num_pages > Multiply(Avg(num_pages), 0.7); name of publisher refers to publisher_name"}
{"sample_id": 5974, "db_id": "books", "final": {"question": "Provide the contact email of Moss Zarb.", "sql": "SELECT email FROM customer WHERE first_name = 'Moss' AND last_name = 'Zarb'", "source_tables": ["customer"]}, "evidence": ""}
{"sample_id": 5975, "db_id": "books", "final": {"question": "Name the streets in Dallas.", "sql": "SELECT street_name FROM address WHERE city = 'Dallas'", "source_tables": ["address"]}, "evidence": "\"Dallas\" is the city; streets refers to street_name"}
{"sample_id": 5976, "db_id": "books", "final": {"question": "Which books were released by Orson Scott Card in 2001?", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Orson Scott Card' AND STRFTIME('%Y', T1.publication_date) = '2001'", "source_tables": ["author", "book_author", "book"]}, "evidence": "\"Orson Scott Card\" is the author_name; released in 2001 refers to publication_date LIKE '2001%'; books refers to title"}
{"sample_id": 5977, "db_id": "books", "final": {"question": "Count the number of books written by Orson Scott Card.", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Orson Scott Card'", "source_tables": ["author", "book_author", "book"]}, "evidence": "\"Orson Scott Card\" is the author_name"}
{"sample_id": 5978, "db_id": "books", "final": {"question": "Provide the authors and titles of the books which have more than 3000 pages.", "sql": "SELECT T3.author_name, T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T1.num_pages > 3000", "source_tables": ["author", "book_author", "book"]}, "evidence": "authors refers to author_name; more than 3000 pages refers to num_pages > 3000"}
{"sample_id": 5979, "db_id": "books", "final": {"question": "Who wrote \"The Prophet\"?", "sql": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T1.title = 'The Prophet'", "source_tables": ["author", "book_author", "book"]}, "evidence": "\"The Prophet\" is the title of the book: who wrote refers to author_name"}
{"sample_id": 5980, "db_id": "books", "final": {"question": "How many books were published by Ace Hardcover?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Ace Hardcover'", "source_tables": ["publisher", "book"]}, "evidence": "\"Ace Hardcover\" is the publisher_name"}
{"sample_id": 5981, "db_id": "books", "final": {"question": "Which publisher published Barry Eisler's book?", "sql": "SELECT T4.publisher_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T3.author_name = 'Barry Eisler'", "source_tables": ["author", "publisher", "book_author", "book"]}, "evidence": "\"Barry Eisler\" is the author_name; publisher refers to publisher_name"}
{"sample_id": 5982, "db_id": "books", "final": {"question": "How many books were published in Japanese?", "sql": "SELECT COUNT(T2.book_id) FROM book_language AS T1 INNER JOIN book AS T2 ON T1.language_id = T2.language_id WHERE T1.language_name = 'Japanese'", "source_tables": ["book_language", "book"]}, "evidence": "published in Japanese refers to language_name = 'Japanese'"}
{"sample_id": 5983, "db_id": "books", "final": {"question": "Sum the total price of the orders for The Prophet book.", "sql": "SELECT SUM(T1.price) FROM order_line AS T1 INNER JOIN book AS T2 ON T1.book_id = T2.book_id WHERE T2.title = 'The Prophet'", "source_tables": ["order_line", "book"]}, "evidence": "\"The Prophet\" is the title of the book: total price refers to Sum(price)"}
{"sample_id": 5984, "db_id": "books", "final": {"question": "Provide the number of orders by Daisey Lamball in 2021.", "sql": "SELECT COUNT(*) FROM cust_order AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Daisey' AND T2.last_name = 'Lamball' AND STRFTIME('%Y', T1.order_date) = '2021'", "source_tables": ["cust_order", "customer"]}, "evidence": "in 2021 refers to order_date LIKE '2021%'"}
{"sample_id": 5985, "db_id": "books", "final": {"question": "How many customers are from Australia?", "sql": "SELECT COUNT(*) FROM customer_address AS T1 INNER JOIN address AS T2 ON T2.address_id = T1.address_id INNER JOIN country AS T3 ON T3.country_id = T2.country_id WHERE T3.country_name = 'Australia'", "source_tables": ["country", "customer_address", "address"]}, "evidence": "\"Australia\" is the country_name;"}
{"sample_id": 5986, "db_id": "books", "final": {"question": "How many orders were delivered in December 2019?", "sql": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Delivered' AND STRFTIME('%Y', T2.status_date) = '2019'", "source_tables": ["order_history", "order_status"]}, "evidence": "delivered refers to status_value = 'Delivered'; in December 2019 refers to status_date LIKE '2019-12%'"}
{"sample_id": 5987, "db_id": "books", "final": {"question": "Provide the customers' names who ordered the Fantasmas.", "sql": "SELECT T4.first_name, T4.last_name FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T1.title = 'Fantasmas'", "source_tables": ["order_line", "cust_order", "customer", "book"]}, "evidence": "\"Fantasmas\" is the title of the book; customer names refers to first_name, last_name"}
{"sample_id": 5988, "db_id": "books", "final": {"question": "How many percent of orders in 2020 used international shipping?", "sql": "SELECT CAST(SUM(CASE WHEN T2.method_name = 'International' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cust_order AS T1 INNER JOIN shipping_method AS T2 ON T1.shipping_method_id = T2.method_id WHERE STRFTIME('%Y', T1.order_date) = '2020'", "source_tables": ["cust_order", "shipping_method"]}, "evidence": "international shipping refers to method_name = 'International'; orders in 2020 refers to order_date = '2020%'; percentage = Divide (Sum(method_name = 'International'), Count(order_id)) * 100"}
{"sample_id": 5989, "db_id": "books", "final": {"question": "List all the authors named \"George\".", "sql": "SELECT author_name FROM author WHERE author_name LIKE 'George%'", "source_tables": ["author"]}, "evidence": "author named 'George' refers to author_name = 'George%'"}
{"sample_id": 5990, "db_id": "books", "final": {"question": "Which year has the most customer orders?", "sql": "SELECT strftime('%Y', order_date) FROM cust_order GROUP BY strftime('%Y', order_date) ORDER BY COUNT(strftime('%Y', order_date)) DESC LIMIT 1", "source_tables": ["cust_order"]}, "evidence": "year with the most customer orders refers to Max(count(order_id))"}
{"sample_id": 5991, "db_id": "books", "final": {"question": "What is the average price for the order line?", "sql": "SELECT AVG(price) FROM order_line", "source_tables": ["order_line"]}, "evidence": "average price refers to AVG(price)"}
{"sample_id": 5992, "db_id": "books", "final": {"question": "List all of the books that were published in 1995.", "sql": "SELECT title FROM book WHERE STRFTIME('%Y', publication_date) = '1995'", "source_tables": ["book"]}, "evidence": "published in 1995 refers to publication_date LIKE '1995%'; ; list of book refers to title"}
{"sample_id": 5993, "db_id": "books", "final": {"question": "What is the most common domain for the email address among all the customers?", "sql": "SELECT SUBSTR(email, INSTR(email, '@') + 1, LENGTH(email) - INSTR(email, '@')) AS ym FROM customer GROUP BY SUBSTR(email, INSTR(email, '@') + 1, LENGTH(email) - INSTR(email, '@')) ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["customer"]}, "evidence": "most common domain for the email refers to Max(Count(SUBSTR(email, CHARINDEX('@', email) + 1, length(email) - charindex('@', email))))"}
{"sample_id": 5994, "db_id": "books", "final": {"question": "How many publishers have the word \"book\" in their name?", "sql": "SELECT COUNT(*) FROM publisher WHERE publisher_name LIKE '%book%'", "source_tables": ["publisher"]}, "evidence": "publisher have the word 'book' refers to publisher_name LIKE '%book%'"}
{"sample_id": 5995, "db_id": "books", "final": {"question": "Which language is the rarest among all the books?", "sql": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id GROUP BY T2.language_name ORDER BY COUNT(T2.language_name) ASC LIMIT 1", "source_tables": ["book_language", "book"]}, "evidence": "language written in refers to language_name; rarest refers to Min(Count(book_id))"}
{"sample_id": 5996, "db_id": "books", "final": {"question": "List all the order dates for the customer named \"Adrian Kunzelmann\".", "sql": "SELECT T3.order_date FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Adrian' AND T4.last_name = 'Kunzelmann'", "source_tables": ["order_line", "cust_order", "customer", "book"]}, "evidence": ""}
{"sample_id": 5997, "db_id": "books", "final": {"question": "How many addresses are from the Philippines?", "sql": "SELECT COUNT(T2.country_id) FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T2.country_name = 'Philippines'", "source_tables": ["country", "address"]}, "evidence": "\"Philippines\" is the country_name"}
{"sample_id": 5998, "db_id": "books", "final": {"question": "Who is the author who wrote the most books?", "sql": "SELECT T1.author_name FROM author AS T1 INNER JOIN book_author AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_name ORDER BY COUNT(T2.author_id) DESC LIMIT 1", "source_tables": ["book_author", "author"]}, "evidence": "author refers to author_name; who wrote the most book refers to Max(Count(author_id))"}
{"sample_id": 5999, "db_id": "books", "final": {"question": "What are the books published by \"Harper Collins\"?", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Harper Collins'", "source_tables": ["publisher", "book"]}, "evidence": "\"Harper Collins\" is the publisher_name; books refers to title"}
{"sample_id": 6000, "db_id": "books", "final": {"question": "How many orders were returned in the year 2020?", "sql": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Returned' AND STRFTIME('%Y', T2.status_date) = '2020'", "source_tables": ["order_history", "order_status"]}, "evidence": "returned refers to status_value = 'Returned'; in the year 2020 refers to status_date LIKE '%2020%'"}
{"sample_id": 6001, "db_id": "books", "final": {"question": "What is the second-least common method of shipping?", "sql": "SELECT T2.method_name FROM cust_order AS T1 INNER JOIN shipping_method AS T2 ON T1.shipping_method_id = T2.method_id GROUP BY T2.method_name ORDER BY COUNT(T2.method_id) ASC LIMIT 1, 1", "source_tables": ["cust_order", "shipping_method"]}, "evidence": "method of shipping refers to method_name; least method refers to Min(Count(method_id))"}
{"sample_id": 6002, "db_id": "books", "final": {"question": "How many of the customer addresses are inactive?", "sql": "SELECT COUNT(*) FROM customer_address AS T1 INNER JOIN address_status AS T2 ON T1.status_id = T2.status_id WHERE T2.address_status = 'Inactive'", "source_tables": ["address_status", "customer_address"]}, "evidence": "addresses are inactive refers to address_status = 'Inactive'"}
{"sample_id": 6003, "db_id": "books", "final": {"question": "What is the book with the most orders?", "sql": "SELECT T2.title FROM order_line AS T1 INNER JOIN book AS T2 ON T1.book_id = T2.book_id GROUP BY T2.title ORDER BY COUNT(T1.book_id) DESC LIMIT 1", "source_tables": ["order_line", "book"]}, "evidence": "books refers to title; the most orders refers to Max(Count(order_id))"}
{"sample_id": 6004, "db_id": "books", "final": {"question": "What is the address that received the most orders?", "sql": "SELECT T2.street_name, T2.city FROM cust_order AS T1 INNER JOIN address AS T2 ON T1.dest_address_id = T2.address_id GROUP BY T2.street_number, T2.street_name, T2.city ORDER BY COUNT(T1.dest_address_id) DESC LIMIT 1", "source_tables": ["cust_order", "address"]}, "evidence": "address refers to street_name, city; received the most orders refers to Max(count(dest_address_id))"}
{"sample_id": 6005, "db_id": "books", "final": {"question": "How much time does it take to update the status of order \"2398\"?", "sql": "SELECT strftime('%J', T2.status_date) - strftime('%J', T1.order_date) FROM cust_order AS T1 INNER JOIN order_history AS T2 ON T1.order_id = T2.order_id WHERE T1.order_id = 2398", "source_tables": ["cust_order", "order_history"]}, "evidence": "\"2398\" is the order_id; time = \u00a0 Subtract(strftime('%Y', status_date), strftime('%Y', order_date)) AS \"year\" , Subtract(strftime('%m', status_date), strftime('%m', order_date)) AS \"month\", Subtract (strftime('%d', status_date), strftime('%d', order_date)) AS \"day\""}
{"sample_id": 6006, "db_id": "books", "final": {"question": "Which customer has the most addresses?", "sql": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.first_name, T1.last_name ORDER BY COUNT(T2.customer_id) DESC LIMIT 1", "source_tables": ["customer", "customer_address"]}, "evidence": "customer refers to first_name, last_name; the most address refers to Max(count(address_id))"}
{"sample_id": 6007, "db_id": "books", "final": {"question": "What percentage of the total prices of all orders are shipped internationally?", "sql": "SELECT CAST(SUM(CASE WHEN T3.method_name = 'International' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cust_order AS T1 INNER JOIN order_line AS T2 ON T1.order_id = T2.order_id INNER JOIN shipping_method AS T3 ON T3.method_id = T1.shipping_method_id", "source_tables": ["cust_order", "order_line", "shipping_method"]}, "evidence": "shipped internationally refers to method_name = 'International'; percentage = Divide (Sum(price where method_name = 'International'), Sum(price)) * 100"}
{"sample_id": 6008, "db_id": "books", "final": {"question": "List all the authors who wrote fewer pages than the average.", "sql": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T1.num_pages < ( SELECT AVG(num_pages) FROM book )", "source_tables": ["author", "book_author", "book"]}, "evidence": "author refers to author_name; who wrote fewer pages than the average refers to num_pages < AVG(num_pages)"}
{"sample_id": 6009, "db_id": "books", "final": {"question": "Other than zero, what is the lowest price paid by a customer for an order?", "sql": "SELECT MIN(price) FROM order_line WHERE price <> 0", "source_tables": ["order_line"]}, "evidence": "other than 0 refers to price ! = 0; lowest price paid refers to Min(price)"}
{"sample_id": 6010, "db_id": "books", "final": {"question": "How many customers have an address that is located in the city of Villeneuve-la-Garenne?", "sql": "SELECT COUNT(address_id) FROM address WHERE city = 'Villeneuve-la-Garenne'", "source_tables": ["address"]}, "evidence": "\"Villeneuve-la-Garenne\" is the city"}
{"sample_id": 6011, "db_id": "books", "final": {"question": "How many authors are named Adam?", "sql": "SELECT COUNT(*) FROM author WHERE author_name LIKE 'Adam%'", "source_tables": ["author"]}, "evidence": "authors named Adam refers to author_name LIKE 'Adam'"}
{"sample_id": 6012, "db_id": "books", "final": {"question": "How many customers use a Yahoo! Mail e-mail address?", "sql": "SELECT COUNT(*) FROM customer WHERE email LIKE '%@yahoo.com'", "source_tables": ["customer"]}, "evidence": "Yahoo! Mail e-mail address refers to email LIKE '%@yahoo.com'"}
{"sample_id": 6013, "db_id": "books", "final": {"question": "What are the city addresses of the customers located in the United States of America?", "sql": "SELECT DISTINCT T2.city FROM country AS T1 INNER JOIN address AS T2 ON T1.country_id = T2.country_id WHERE T1.country_name = 'United States of America'", "source_tables": ["country", "address"]}, "evidence": "\"United States of America\" is the country_name"}
{"sample_id": 6014, "db_id": "books", "final": {"question": "How many orders did Marcelia Goering place in 2021 that uses the Priority Shipping method?", "sql": "SELECT COUNT(*) FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T2.shipping_method_id WHERE T1.first_name = 'Marcelia' AND T1.last_name = 'Goering' AND STRFTIME('%Y', T2.order_date) = '2021' AND T3.method_name = 'Priority'", "source_tables": ["cust_order", "customer", "shipping_method"]}, "evidence": "in 2021 refers to substr(order_date, 1, 4) = '2021'; priority shipping method refers to method_name = 'Priority'"}
{"sample_id": 6015, "db_id": "books", "final": {"question": "Which books have the most expensive price?", "sql": "SELECT T2.title FROM order_line AS T1 INNER JOIN book AS T2 ON T1.book_id = T2.book_id ORDER BY T1.price DESC LIMIT 1", "source_tables": ["order_line", "book"]}, "evidence": "most expensive book refers to Max(price)"}
{"sample_id": 6016, "db_id": "books", "final": {"question": "How many customers ordered the book titled \"Anleitung zum Zickigsein\"", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'Anleitung zum Zickigsein'", "source_tables": ["order_line", "book"]}, "evidence": "\"Anleitung zum Zickigsein\" is the title of the book"}
{"sample_id": 6017, "db_id": "books", "final": {"question": "What is the most expensive price paid by a customer for the book \"Bite Me If You Can (Argeneau #6)\"?", "sql": "SELECT MAX(T2.price) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'Bite Me If You Can (Argeneau #6)'", "source_tables": ["order_line", "book"]}, "evidence": "\"Bite Me If You Can (Argeneau #6)\" is the title of the book; most expensive price refers to Max(price)"}
{"sample_id": 6018, "db_id": "books", "final": {"question": "How many customers ordered the oldest book?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id GROUP BY T1.publication_date ORDER BY T1.publication_date ASC LIMIT 1", "source_tables": ["order_line", "book"]}, "evidence": "oldest book refers to Min(publiation_date)"}
{"sample_id": 6019, "db_id": "books", "final": {"question": "List all the titles of the Spanish books published by Alfaguara.", "sql": "SELECT T2.title FROM book_language AS T1 INNER JOIN book AS T2 ON T2.language_id = T1.language_id INNER JOIN publisher AS T3 ON T3.publisher_id = T2.publisher_id WHERE T1.language_name = 'Spanish' AND T3.publisher_name = 'Alfaguara' GROUP BY T2.title", "source_tables": ["book_language", "publisher", "book"]}, "evidence": "\"Spanish\" is the language_name; 'Alfaguara' is the publisher_name"}
{"sample_id": 6020, "db_id": "books", "final": {"question": "How many customers ordered Stephen King's first book?", "sql": "SELECT COUNT(T1.publication_date) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN order_line AS T4 ON T4.book_id = T1.book_id WHERE T3.author_name = 'Stephen King' ORDER BY T1.publication_date ASC LIMIT 1", "source_tables": ["order_line", "author", "book_author", "book"]}, "evidence": "\"Stephen King\" is the author_name; first book refers to Min(publication_date)"}
{"sample_id": 6021, "db_id": "books", "final": {"question": "What are the languages of the first two published books?", "sql": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id ORDER BY T1.publication_date ASC LIMIT 2", "source_tables": ["book_language", "book"]}, "evidence": "first two published book refers to Min(publication_date); language refers to language_name"}
{"sample_id": 6022, "db_id": "books", "final": {"question": "Who published the book \"The Secret Garden\"?", "sql": "SELECT DISTINCT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'The Secret Garden'", "source_tables": ["publisher", "book"]}, "evidence": "\"The Secret Garden\" is the title of the book; who published the book refers to\u00a0publisher_name"}
{"sample_id": 6023, "db_id": "books", "final": {"question": "Among the books that were published by Scholastic, how many were written by J.K Rowling?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id INNER JOIN book_author AS T3 ON T3.book_id = T1.book_id INNER JOIN author AS T4 ON T4.author_id = T3.author_id WHERE T2.publisher_name = 'Scholastic' AND T4.author_name = 'J.K. Rowling'", "source_tables": ["author", "publisher", "book_author", "book"]}, "evidence": "\"J.K Rowling\" is the author_name; 'Scholastic' is the publisher_name"}
{"sample_id": 6024, "db_id": "books", "final": {"question": "What are the names of all the publishers who have published at least 30 books?", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id GROUP BY T2.publisher_name HAVING COUNT(T2.publisher_name) >= 30", "source_tables": ["publisher", "book"]}, "evidence": "published at least 30 books refers to Count(book_id) > = 30"}
{"sample_id": 6025, "db_id": "books", "final": {"question": "Indicate the last number of each street.", "sql": "SELECT street_number FROM address", "source_tables": ["address"]}, "evidence": "street refers to street_name; last number of each street refers to Substr (street_number, -1)"}
{"sample_id": 6026, "db_id": "books", "final": {"question": "Indicate the complete address of customers located in Lazaro Cardenas.", "sql": "SELECT street_number, street_name, city, country_id FROM address WHERE city = 'Lazaro Cardenas'", "source_tables": ["address"]}, "evidence": "complete address refers to street_number, street_name, city, country; \"Lazaro Cardenas\" is the city"}
{"sample_id": 6027, "db_id": "books", "final": {"question": "Indicate the ISBN13 of all the books that have less than 140 pages and more than 135.", "sql": "SELECT isbn13 FROM book WHERE num_pages < 140 AND num_pages > 135", "source_tables": ["book"]}, "evidence": "ISBN13 refers to isbn13; less than 140 pages and more than 135 refers to num_pages > 135 AND num_pages < 140;"}
{"sample_id": 6028, "db_id": "books", "final": {"question": "Indicate the title of the six books with the greatest potential value as collectibles.", "sql": "SELECT title FROM book ORDER BY publication_date ASC LIMIT 6", "source_tables": ["book"]}, "evidence": "greatest potential value refers to Min(publication_date)"}
{"sample_id": 6029, "db_id": "books", "final": {"question": "How many books were ordered in the last month of the year 2020?", "sql": "SELECT COUNT(*) FROM cust_order WHERE order_date LIKE '2020-12%'", "source_tables": ["cust_order"]}, "evidence": "ordered in last month of the year 2020 refers to Substr(order_date, 1, 7) = '2020-12'"}
{"sample_id": 6110, "db_id": "food_inspection_2", "final": {"question": "Please list the full names of all the sanitarians under the supervision of Darlisha Jacobs.", "sql": "SELECT first_name, last_name FROM employee WHERE title = 'Sanitarian' AND supervisor = ( SELECT employee_id FROM employee WHERE first_name = 'Darlisha' AND last_name = 'Jacobs' )", "source_tables": ["employee"]}, "evidence": "full name refers to first_name, last_name"}
{"sample_id": 6111, "db_id": "food_inspection_2", "final": {"question": "Please list the full names of the sanitarians who did at least one inspection in May, 2010.", "sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE strftime('%Y-%m', T2.inspection_date) = '2010-05' AND T1.title = 'Sanitarian'", "source_tables": ["employee", "inspection"]}, "evidence": "full name refers to first_name, last_name; in May 2010 refers to inspection_date like '2010-05%'; sanitarian refers to title = 'Sanitarian'"}
{"sample_id": 6112, "db_id": "food_inspection_2", "final": {"question": "How many inspections were sanitarian Joshua Rosa responsible for in 2010?", "sql": "SELECT COUNT(T2.inspection_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE strftime('%Y', T2.inspection_date) = '2010' AND T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'", "source_tables": ["employee", "inspection"]}, "evidence": "in 2010 refers to inspection_date like '2010%'"}
{"sample_id": 6113, "db_id": "food_inspection_2", "final": {"question": "Please list the assumed name of all the facilities inspected by Joshua Rosa.", "sql": "SELECT DISTINCT T3.dba_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'", "source_tables": ["employee", "inspection", "establishment"]}, "evidence": "assumed name refers to dba_name"}
{"sample_id": 6114, "db_id": "food_inspection_2", "final": {"question": "Among the facilities that have undergone at least one inspection in 2010, how many of them are restaurants or cafeterias?", "sql": "SELECT COUNT(DISTINCT T1.license_no) FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y', T1.inspection_date) = '2010' AND T2.facility_type = 'Restaurant'", "source_tables": ["establishment", "inspection"]}, "evidence": "in 2010 refers to inspection_date like '2010%'; restaurant or cafeteria refers to facility_type = 'Restaurant'"}
{"sample_id": 6115, "db_id": "food_inspection_2", "final": {"question": "Please list the location coordinates of all the facilities that had an inspection on 2010/5/11.", "sql": "SELECT DISTINCT T2.latitude, T2.longitude FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE T1.inspection_date = '2010-05-11'", "source_tables": ["establishment", "inspection"]}, "evidence": "location coordinates refers to latitude, longitude; on 2010/5/11 refers to inspection_date = '2010-05-11'"}
{"sample_id": 6116, "db_id": "food_inspection_2", "final": {"question": "Among the facilities that have undergone at least one inspection in 2010, how many of them are in ward no.42?", "sql": "SELECT COUNT(DISTINCT T1.license_no) FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y', T1.inspection_date) = '2010' AND T2.ward = 42", "source_tables": ["establishment", "inspection"]}, "evidence": "in 2010 refers to inspection_date like '2010%'; in ward no.42 refers to ward = 42"}
{"sample_id": 6117, "db_id": "food_inspection_2", "final": {"question": "Please list the full names of all the sanitarians who have inspected the facility Burbank.", "sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T3.dba_name = 'Burbank' AND T1.title = 'Sanitarian'", "source_tables": ["employee", "inspection", "establishment"]}, "evidence": "full name refers to first_name, last_name; the facility Burbank refers to dba_name = 'Burbank'"}
{"sample_id": 6118, "db_id": "food_inspection_2", "final": {"question": "Please list the assumed name of all the facilities that failed an inspection in 2010.", "sql": "SELECT DISTINCT T2.dba_name FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE T1.results = 'Fail' AND strftime('%Y', T1.inspection_date) = '2010'", "source_tables": ["establishment", "inspection"]}, "evidence": "assumed name refers to dba_name; failed an inspection refers to results = 'Fail'; in 2010 refers to inspection_date like '2010%'"}
{"sample_id": 6119, "db_id": "food_inspection_2", "final": {"question": "What is the full name of the sanitarian who inspected Amundsen High School on 2010/5/11?", "sql": "SELECT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T2.inspection_date = '2010-05-11' AND T3.dba_name = 'AMUNDSEN HIGH SCHOOL' AND T1.title = 'Sanitarian'", "source_tables": ["employee", "inspection", "establishment"]}, "evidence": "full name refers to first_name, last_name;\u00a0 Amundsen High School refers to dba_name = 'AMUNDSEN HIGH SCHOOL'; on 2010/5/11 refers to inspection_date = '2010-05-11'"}
{"sample_id": 6120, "db_id": "food_inspection_2", "final": {"question": "Among the inspections done by sanitarian Joshua Rosa, how many of them have the result of \"pass\"?", "sql": "SELECT COUNT(T2.inspection_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.results = 'Pass' AND T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'", "source_tables": ["employee", "inspection"]}, "evidence": "have the result of \"pass\" refers to results = 'Pass'"}
{"sample_id": 6121, "db_id": "food_inspection_2", "final": {"question": "After Azha Restaurant Inc. passed the inspection on 2010/1/21, when was the follow-up inspection done?", "sql": "SELECT T1.followup_to FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE T2.dba_name = 'Azha Restaurant Inc.' AND T1.results = 'Pass' AND T1.inspection_date = '2010-01-21'", "source_tables": ["establishment", "inspection"]}, "evidence": "Azha Restaurant Inc. refers to dba_name = 'Azha Restaurant Inc.'; on 2010/1/21 refers to inspection_date = '2010-01-21'; follow-up inspection date refers to followup_to"}
{"sample_id": 6122, "db_id": "food_inspection_2", "final": {"question": "Among the facilities that had undergone at least one inspection in 2010, how many of them have the most serious food safety issues?", "sql": "SELECT COUNT(DISTINCT T2.license_no) FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y', T1.inspection_date) = '2010' AND T2.risk_level = 3", "source_tables": ["establishment", "inspection"]}, "evidence": "in 2010 refers to inspection_date like '2010%'; the most serious food safety issues refers to risk_level = 3"}
{"sample_id": 6123, "db_id": "food_inspection_2", "final": {"question": "What is the average number of inspections carried out in the year 2010 by a sanitarian whose salary is over 70000?", "sql": "SELECT CAST(SUM(CASE WHEN T2.inspection_date LIKE '2010%' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.salary > 70000 THEN 1 ELSE 0 END) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id", "source_tables": ["employee", "inspection"]}, "evidence": "in the year 2010 refers to inspection_date like '2010%'; salary is over 70000 refers to salary > 70000; average number = divide(sum(inspection where inspection_date like '2010%'), sum(employee_id where salary > 70000))"}
{"sample_id": 6124, "db_id": "food_inspection_2", "final": {"question": "What is the point level of \"Refrigeration and metal stem thermometers provided and conspicuous\"?", "sql": "SELECT point_level FROM inspection_point WHERE Description = 'Refrigeration and metal stem thermometers provided and conspicuous '", "source_tables": ["inspection_point"]}, "evidence": "\"Refrigeration and metal stem thermometers provided and conspicuous\" refers to Description = 'Refrigeration and metal stem thermometers provided and conspicuous '"}
{"sample_id": 6125, "db_id": "food_inspection_2", "final": {"question": "Which employee was responsible for inspection no.48224? Give the full name.", "sql": "SELECT T2.first_name, T2.last_name FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T1.inspection_id = 48224", "source_tables": ["employee", "inspection"]}, "evidence": "inspection no.48224 refers to inspection_id = '48224'; full name refers to first_name, last_name;"}
{"sample_id": 6126, "db_id": "food_inspection_2", "final": {"question": "How many inspections did All Style Buffet Restaurant have?", "sql": "SELECT COUNT(T2.inspection_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.facility_type = 'Restaurant' AND T1.dba_name = 'All Style Buffet'", "source_tables": ["establishment", "inspection"]}, "evidence": "All Style Buffet refers to dba_name = 'All Style Buffet'; Restaurant refers to facility_type = 'Restaurant'"}
{"sample_id": 6127, "db_id": "food_inspection_2", "final": {"question": "When did Wing Hung Chop Suey Restaurant have its first inspection?", "sql": "SELECT MIN(T2.inspection_date) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.aka_name = 'WING HUNG CHOP SUEY RESTAURANT'", "source_tables": ["establishment", "inspection"]}, "evidence": "Wing Hung Chop Suey Restaurant refers to aka_name = 'WING HUNG CHOP SUEY RESTAURANT'; first inspection refers to min(inspection_date)"}
{"sample_id": 6128, "db_id": "food_inspection_2", "final": {"question": "How many restaurants were inspected on 2015/5/8?", "sql": "SELECT COUNT(T2.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.inspection_date = '2015-05-08' AND T1.facility_type = 'Restaurant'", "source_tables": ["establishment", "inspection"]}, "evidence": "restaurant refers to facility_type = 'Restaurant'; on 2015/5/8 refers to inspection_date = '2015-05-08'"}
{"sample_id": 6129, "db_id": "food_inspection_2", "final": {"question": "How many \"food maintenance\" related violations did inspection no.1454071 have?", "sql": "SELECT COUNT(T2.point_id) FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.inspection_id = '1454071' AND T1.category = 'Food Maintenance'", "source_tables": ["inspection_point", "violation"]}, "evidence": "\"food maintenance\" related refers to category = 'Food Maintenance'; inspection no.1454071 refers to inspection_id = '1454071'"}
{"sample_id": 6130, "db_id": "food_inspection_2", "final": {"question": "State the number of violations did Royal Thai Cuisine has during the 2015/5/8 inspection.", "sql": "SELECT COUNT(T3.point_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T2.inspection_date = '2015-05-08' AND T1.dba_name = 'ROYAL THAI CUISINE'", "source_tables": ["establishment", "inspection", "violation"]}, "evidence": "Royal Thai Cuisine refers to dba_name = 'ROYAL THAI CUISINE'; 2015/5/8 refers to inspection_date = '2015-05-08'"}
{"sample_id": 6131, "db_id": "food_inspection_2", "final": {"question": "For the grocery store located at \"3635 W DIVERSEY AVE\", how many inspections did it have?", "sql": "SELECT COUNT(T2.inspection_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.address = '3635 W DIVERSEY AVE ' AND T1.facility_type = 'Grocery Store'", "source_tables": ["establishment", "inspection"]}, "evidence": "grocery store refers to facility_type = 'Grocery Store'; \"3635 W DIVERSEY AVE\" refers to address = '3635 W DIVERSEY AVE'"}
{"sample_id": 6132, "db_id": "food_inspection_2", "final": {"question": "Who is responsible for most of the inspections? Give the full name.", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T2.employee_id, T2.first_name, T2.last_name, COUNT(T1.inspection_id) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id GROUP BY T2.employee_id, T2.first_name, T2.last_name ORDER BY COUNT(T1.inspection_id) DESC LIMIT 1 ) AS T", "source_tables": ["employee", "inspection"]}, "evidence": "full name refers to first_name, last_name; most of the inspections refers to max(count(employee_id))"}
{"sample_id": 6133, "db_id": "food_inspection_2", "final": {"question": "How many inspections done by Lisa Tillman ended up with the result of \"Out of Business\"?", "sql": "SELECT COUNT(T1.inspection_id) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T2.first_name = 'Lisa' AND T2.last_name = 'Tillman' AND T1.results = 'Out of Business'", "source_tables": ["employee", "inspection"]}, "evidence": "the result of \"Out of Business\" refers to results = 'Out of Business'"}
{"sample_id": 6134, "db_id": "food_inspection_2", "final": {"question": "For the sanitarian who lives on 5000 N Wolcott Ave, how many establishments did he/she inspect in the May of 2011?", "sql": "SELECT COUNT(T1.inspection_id) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T2.address = '5000 N Wolcott Ave' AND T2.title = 'Sanitarian' AND strftime('%Y-%m', T1.inspection_date) = '2011-05'", "source_tables": ["employee", "inspection"]}, "evidence": "sanitarian refers to title = 'Sanitarian'; 5000 N Wolcott Ave refers to address = '5000 N Wolcott Ave'; in May 2011 refers to inspection_date between '2011-04-30' and '2011-06-01'"}
{"sample_id": 6135, "db_id": "food_inspection_2", "final": {"question": "Show the phone number of the sanitarian who was responsible for inspection no.634597.", "sql": "SELECT T2.phone FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T1.inspection_id = 634597 AND T2.title = 'Sanitarian'", "source_tables": ["employee", "inspection"]}, "evidence": "phone number refers to phone; sanitarian refers to title = 'Sanitarian'; inspection no.634597 refers to inspection_id = '634597'"}
{"sample_id": 6136, "db_id": "food_inspection_2", "final": {"question": "State the salary of the employee who did the most inspections.", "sql": "SELECT T1.salary FROM employee AS T1 INNER JOIN ( SELECT T.employee_id, COUNT(T.inspection_id) FROM inspection AS T GROUP BY T.employee_id ORDER BY COUNT(T.inspection_id) DESC LIMIT 1 ) AS T2 ON T1.employee_id = T2.employee_id", "source_tables": ["employee", "inspection"]}, "evidence": "the most inspections refers to max(count(employee_id))"}
{"sample_id": 6137, "db_id": "food_inspection_2", "final": {"question": "What is the average number of inspections did risk level 3 taverns have?", "sql": "SELECT CAST(COUNT(T2.inspection_id) AS REAL) / COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = 3 AND T1.facility_type = 'TAVERN'", "source_tables": ["establishment", "inspection"]}, "evidence": "risk level 3 refers to risk_level = '3'; tavern refers to facility_type = 'TAVERN'; average number = divide(count(inspection_id), sum(license_no)) where risk_level = '3' and facility_type = 'TAVERN'"}
{"sample_id": 6138, "db_id": "food_inspection_2", "final": {"question": "State the inspection pass rate of Pockets Restaurant.", "sql": "SELECT CAST(COUNT(CASE WHEN T2.results = 'Pass' THEN T2.inspection_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.inspection_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'POCKETS' AND T1.facility_type = 'Restaurant'", "source_tables": ["establishment", "inspection"]}, "evidence": "Pockets refers to dba_name = 'POCKETS'; Restaurant refers to facility_type = 'Restaurant'; pass refers to results = 'Pass'; the inspection pass rate = divide(sum(inspection_id where results = 'Pass'), count(license_no)) where dba_name = 'POCKETS' and facility_type = 'Restaurant'"}
{"sample_id": 6139, "db_id": "food_inspection_2", "final": {"question": "How many sanitarian employees in Chicago are from the zip code 60617?", "sql": "SELECT COUNT(employee_id) FROM employee WHERE zip = '60617'", "source_tables": ["employee"]}, "evidence": "sanitarian refers to title = 'Sanitarian'; in Chicago refers to city = 'Chicago'; zip code 60617 refers to zip = 60617"}
{"sample_id": 6140, "db_id": "food_inspection_2", "final": {"question": "What is the assumed name of the business located at 2903 W Irving Park Rd?", "sql": "SELECT DISTINCT dba_name FROM establishment WHERE address = '2903 W IRVING PARK RD '", "source_tables": ["establishment"]}, "evidence": "assumed name refers to dba_name; 2903 W Irving Park Rd refers to address = '2903 W IRVING PARK RD '"}
{"sample_id": 6141, "db_id": "food_inspection_2", "final": {"question": "What is the full name of the employee with the lowest salary?", "sql": "SELECT first_name, last_name FROM employee ORDER BY salary ASC LIMIT 1", "source_tables": ["employee"]}, "evidence": "full name refers to first_name, last_name; the lowest salary refers to min(salary)"}
{"sample_id": 6142, "db_id": "food_inspection_2", "final": {"question": "How many establishments that are doing business as Homemade Pizza have a risk level of 2?", "sql": "SELECT COUNT(license_no) FROM establishment WHERE risk_level = 2 AND dba_name = 'HOMEMADE PIZZA'", "source_tables": ["establishment"]}, "evidence": "Homemade Pizza refers to dba_name = 'HOMEMADE PIZZA'; a risk level of 2 refers to risk_level = 2"}
{"sample_id": 6143, "db_id": "food_inspection_2", "final": {"question": "How many inspections with critical food safety problems are under inspection point id 3?", "sql": "SELECT COUNT(inspection_id) FROM violation WHERE point_id = 3 AND fine = 500", "source_tables": ["violation"]}, "evidence": "critical food safety problems refers to fine = 500; point_id = 3"}
{"sample_id": 6144, "db_id": "food_inspection_2", "final": {"question": "How many employees are under Gregory Cardenas?", "sql": "SELECT COUNT(T1.employee_id) FROM employee AS T1 WHERE T1.supervisor = ( SELECT employee_id FROM employee WHERE first_name = 'Gregory' AND last_name = 'Cardenas' )", "source_tables": ["employee"]}, "evidence": ""}
{"sample_id": 6145, "db_id": "food_inspection_2", "final": {"question": "When did Renaldi's Pizza had its first inspection?", "sql": "SELECT MIN(T2.inspection_date) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'RENALDI''S PIZZA'", "source_tables": ["establishment", "inspection"]}, "evidence": "Renaldi's Pizza refers to dba_name = 'RENALDI''S PIZZA'; first inspection refers to min(inspection_date)"}
{"sample_id": 6146, "db_id": "food_inspection_2", "final": {"question": "What is the full name of the employee who was responsible for the most inspection in March 2016?", "sql": "SELECT T3.first_name, T3.last_name FROM ( SELECT T1.employee_id, COUNT(T1.inspection_id) FROM inspection AS T1 WHERE strftime('%Y-%m', T1.inspection_date) = '2016-03' GROUP BY T1.employee_id ORDER BY COUNT(T1.inspection_id) DESC LIMIT 1 ) AS T2 INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id", "source_tables": ["employee", "inspection"]}, "evidence": "full name refers to first_name, last_name; the most inspection refers to max(count(employee_id)); in March 2016 refers to inspection_date like '2016-03%'"}
{"sample_id": 6147, "db_id": "food_inspection_2", "final": {"question": "What are the names of the businesses that passed with conditions in May 2012?", "sql": "SELECT DISTINCT T2.dba_name FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y-%m', T1.inspection_date) = '2012-05' AND T1.results = 'Pass w/ Conditions'", "source_tables": ["establishment", "inspection"]}, "evidence": "name of business refers to dba_name; passed with conditions refers to results = 'Pass w/ Conditions'; in May 2012 refers to inspection_date like '2012-05%'"}
{"sample_id": 6148, "db_id": "food_inspection_2", "final": {"question": "Out of all the short form complaint inspections done by David Hodges, how many businesses passed?", "sql": "SELECT COUNT(DISTINCT T2.license_no) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.first_name = 'David' AND T1.last_name = 'Hodges' AND T1.employee_id = 153225 AND T2.inspection_type = 'Short Form Complaint' AND T2.results = 'Pass'", "source_tables": ["employee", "inspection"]}, "evidence": "short form complaint inspection refers to inspection_type = 'Short Form Complaint'; pass refers to results = 'Pass'"}
{"sample_id": 6149, "db_id": "food_inspection_2", "final": {"question": "How many businesses from ward 42 have at least 5 failed inspection results between 1/1/2010 to 12/31/2015?", "sql": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.inspection_date BETWEEN '2010-01-01' AND '2015-12-31' AND T1.ward = 42 AND T1.license_no IN ( SELECT license_no FROM ( SELECT license_no FROM inspection WHERE results = 'Fail' GROUP BY license_no HAVING COUNT(results) >= 5 ) )", "source_tables": ["establishment", "inspection"]}, "evidence": "ward 42 refers to ward = 42; at least 5 failed inspection results refers to count(results = 'Fail') > = 5; between 1/1/2010 to 12/31/2015 refers to inspection_date between '2010-01-01' and '2015-12-31'"}
{"sample_id": 6150, "db_id": "food_inspection_2", "final": {"question": "How much is the salary of the employee who has the highest number of inspections done of all time?", "sql": "SELECT T1.salary FROM employee AS T1 INNER JOIN ( SELECT employee_id, COUNT(inspection_id) FROM inspection GROUP BY employee_id ORDER BY COUNT(inspection_id) DESC LIMIT 1 ) AS T2 ON T1.employee_id = T2.employee_id", "source_tables": ["employee", "inspection"]}, "evidence": "the highest number of inspections done refers to max(count(employee_id))"}
{"sample_id": 6151, "db_id": "food_inspection_2", "final": {"question": "What is the assumed name of the business that has the highest total fine in 2014?", "sql": "SELECT T.dba_name FROM ( SELECT T1.dba_name, SUM(T3.fine) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE strftime('%Y', T2.inspection_date) = '2014' GROUP BY T1.dba_name ORDER BY SUM(T3.fine) DESC LIMIT 1 ) AS T", "source_tables": ["establishment", "inspection", "violation"]}, "evidence": "assumed name of business refers to dba_name; the highest total fine refers to max(sum(fine)); in 2014 refers to inspection_date like '2014%'"}
{"sample_id": 6152, "db_id": "food_inspection_2", "final": {"question": "What is the precise location of the establishment with the highest number of failed inspections?", "sql": "SELECT T1.latitude, T1.longitude FROM establishment AS T1 INNER JOIN ( SELECT license_no FROM inspection WHERE results = 'Fail' GROUP BY license_no ORDER BY COUNT(results) DESC LIMIT 1 ) AS T2 ON T1.license_no = T2.license_no", "source_tables": ["establishment", "inspection"]}, "evidence": "precise location refers to latitude, longitude; the highest number of failed inspections refers to max(count(results where results = 'Fail'))"}
{"sample_id": 6153, "db_id": "food_inspection_2", "final": {"question": "What are the comments of the inspector during the inspection of Taqueria La Fiesta on 1/25/2010?", "sql": "SELECT T3.inspector_comment FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T2.inspection_date = '2010-01-25' AND T1.dba_name = 'TAQUERIA LA FIESTA'", "source_tables": ["establishment", "inspection", "violation"]}, "evidence": "comment of the inspector refers to inspector_comment; Taqueria La Fiesta refers to dba_name = 'TAQUERIA LA FIESTA'; on 1/25/2010 refers to inspection_date = '2010-01-25'"}
{"sample_id": 6154, "db_id": "food_inspection_2", "final": {"question": "How much is the total fine given to Ron of Japan Inc in its inspection done on February 2014?", "sql": "SELECT SUM(T3.fine) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE strftime('%Y-%m', T2.inspection_date) = '2014-02' AND T1.dba_name = 'RON OF JAPAN INC'", "source_tables": ["establishment", "inspection", "violation"]}, "evidence": "total fine = sum(fine); Ron of Japan Inc refers to dba_name = 'RON OF JAPAN INC'; on February 2014 refers to inspection_date like '2014-02%'"}
{"sample_id": 6155, "db_id": "food_inspection_2", "final": {"question": "List the full names of the employees who were responsible for inspecting Taqueria La Paz.", "sql": "SELECT DISTINCT T3.first_name, T3.last_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T1.dba_name = 'TAQUERIA LA PAZ'", "source_tables": ["establishment", "employee", "inspection"]}, "evidence": "full name refers to first_name, last_name; Taqueria La Paz refers to dba_name = 'TAQUERIA LA PAZ'"}
{"sample_id": 6156, "db_id": "food_inspection_2", "final": {"question": "What is the full name of the employee who gave the highest amount of fine of all time?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, SUM(T3.fine) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id GROUP BY T1.first_name, T1.last_name ORDER BY SUM(T3.fine) DESC LIMIT 1 ) t", "source_tables": ["employee", "inspection", "violation"]}, "evidence": "full name refers to first_name, last_name; the highest amount of fine refers to max(sum(fine))"}
{"sample_id": 6157, "db_id": "food_inspection_2", "final": {"question": "What is the average number of inspections done by the top 5 employees with the highest salary? List the names of the said employees.", "sql": "SELECT CAST(COUNT(DISTINCT T2.inspection_id) AS REAL) / 5, T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.title = 'Sanitarian' ORDER BY T1.salary DESC LIMIT 5", "source_tables": ["employee", "inspection"]}, "evidence": "the highest salary refers to max(salary); sanitarian refers to title = 'Sanitarian'; name refers to first_name, last_name; average number = divide(sum(inspection_id), 5)"}
{"sample_id": 6158, "db_id": "food_inspection_2", "final": {"question": "Which business had the highest number of inspections done? Calculate the percentage of passed and failed inspections of the said business.", "sql": "SELECT T2.dba_name , CAST(SUM(CASE WHEN T1.results = 'Pass' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.inspection_id) AS percentagePassed , CAST(SUM(CASE WHEN T1.results = 'Fail' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.inspection_id) FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no GROUP BY T2.dba_name ORDER BY COUNT(T1.license_no) DESC LIMIT 1", "source_tables": ["establishment", "inspection"]}, "evidence": "business name refers to dba_name; the highest number of inspections done max(count(inspection_id)); percentage of passed inspections = divide(sum(inspection_id where results = 'Pass'), total(inspection_id)) * 100%; percentage of failed inspections = divide(sum(inspection_id where results = 'Fail'), total(inspection_id)) * 100%"}
{"sample_id": 6159, "db_id": "food_inspection_2", "final": {"question": "What is the employee's last name at 7211 S Hermitage Ave, Chicago, IL?", "sql": "SELECT last_name FROM employee WHERE address = '7211 S Hermitage Ave' AND city = 'Chicago' AND state = 'IL'", "source_tables": ["employee"]}, "evidence": "7211 S Hermitage Ave refers to address = '7211 S Hermitage Ave'; Chicago refers to city = 'Chicago'; IL refers to state = 'IL'"}
{"sample_id": 6160, "db_id": "food_inspection_2", "final": {"question": "What is the establishment's name and employee involved in the inspection ID 44256 on May 5, 2010?", "sql": "SELECT T1.dba_name, T3.first_name, T3.last_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T2.inspection_date = '2010-05-05' AND T2.inspection_id = 44256", "source_tables": ["establishment", "employee", "inspection"]}, "evidence": "establishment's name refers to dba_name; employee name refers to first_name, last_name; inspection ID 44256 refers to inspection_id = 44256; on May 5, 2010 refers to inspection_date = '2010-05-05'"}
{"sample_id": 6161, "db_id": "food_inspection_2", "final": {"question": "Give the address of the schools that passed the inspection in March 2010.", "sql": "SELECT DISTINCT T1.address FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y-%m', T2.inspection_date) = '2010-03' AND T2.results = 'Pass' AND T1.facility_type = 'School'", "source_tables": ["establishment", "inspection"]}, "evidence": "school refers to facility_type = 'School'; pass refers to results = 'Pass'; in March 2010 refers to inspection_date like '2010-03%'"}
{"sample_id": 6162, "db_id": "food_inspection_2", "final": {"question": "What is the employee's full name involved in the canvass inspection type on March 09, 2010?", "sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_date = '2010-03-09' AND T2.inspection_type = 'Canvass'", "source_tables": ["employee", "inspection"]}, "evidence": "full name refers to first_name, last_name; canvass inspection type refers to inspection_type = 'Canvass'; on March 09, 2010 refers to inspection_date = '2010-03-09'"}
{"sample_id": 6163, "db_id": "food_inspection_2", "final": {"question": "Provide the inspection ID of the establishment named \"PIZZA RUSTICA, INC.\"", "sql": "SELECT DISTINCT T2.inspection_id FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'PIZZA RUSTICA, INC'", "source_tables": ["establishment", "inspection"]}, "evidence": "\"PIZZA RUSTICA, INC.\" refers to dba_name = 'PIZZA RUSTICA, INC'"}
{"sample_id": 6164, "db_id": "food_inspection_2", "final": {"question": "How many restaurants with the highest risk level still passed the inspection?", "sql": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = 3 AND T2.results = 'Pass' AND T1.facility_type = 'Restaurant'", "source_tables": ["establishment", "inspection"]}, "evidence": "restaurant refers to facility_type = 'Restaurant'; the highest risk level refers to max(risk_level); pass the inspection refers to results = 'Pass'"}
{"sample_id": 6165, "db_id": "food_inspection_2", "final": {"question": "List the names of employees involved in an inspection with the Display of Inspection Report Summary category.", "sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id INNER JOIN inspection_point AS T4 ON T3.point_id = T4.point_id WHERE T4.category = 'Display of Inspection Report Summary'", "source_tables": ["employee", "inspection", "inspection_point", "violation"]}, "evidence": "name refers to first_name, last_name; Display of Inspection Report Summary category refers to category = 'Display of Inspection Report Summary'"}
{"sample_id": 6166, "db_id": "food_inspection_2", "final": {"question": "What is the title of the employee involved in inspection ID 60332?", "sql": "SELECT T1.title FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 60332", "source_tables": ["employee", "inspection"]}, "evidence": ""}
{"sample_id": 6167, "db_id": "food_inspection_2", "final": {"question": "How many of the restaurants with the lowest risk level failed the complaint inspection type?", "sql": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = '1' AND T2.inspection_type = 'Complaint' AND T1.facility_type = 'Restaurant' AND T2.results = 'Fail'", "source_tables": ["establishment", "inspection"]}, "evidence": "restaurant refers to facility_type = 'Restaurant'; the lowest risk level refers to min(risk_level); failed refers to results = 'Fail'; the complaint inspection type refers to inspection_type = 'Complaint'"}
{"sample_id": 6168, "db_id": "food_inspection_2", "final": {"question": "Provide the fine paid and the complete address of the establishment with inspection ID 48216.", "sql": "SELECT DISTINCT T3.fine, T1.state, T1.city, T1.address FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T2.inspection_id = 48216", "source_tables": ["establishment", "inspection", "violation"]}, "evidence": "complete address refers to state, city, address"}
{"sample_id": 6169, "db_id": "food_inspection_2", "final": {"question": "What is the inspection ID of the inspection with critical point level, $500 fine, and inspector comment \"CDI ON 5-17-10\"?", "sql": "SELECT T2.inspection_id FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.fine = 500 AND T1.point_level = 'Critical' AND T2.inspector_comment = 'CDI ON 5-17-10'", "source_tables": ["inspection_point", "violation"]}, "evidence": "critical point level refers to point_level = 'Critical'; $500 fine refers to fine = 500; inspector comment \"CDI ON 5-17-10\" refers to inspector_comment = 'CDI ON 5-17-10'"}
{"sample_id": 6170, "db_id": "food_inspection_2", "final": {"question": "What are the inspection description and inspector's comments in the inspection ID 164795?", "sql": "SELECT T1.Description, T2.inspector_comment FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.inspection_id = 44247", "source_tables": ["inspection_point", "violation"]}, "evidence": "inspection description refers to Description; inspector's comment refers to inspector_comment"}
{"sample_id": 6171, "db_id": "food_inspection_2", "final": {"question": "What are the inspector's comments and clean operating requirement code for inspection ID 54216 and point ID 34?", "sql": "SELECT T2.inspector_comment, T1.code FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.inspection_id = 54216 AND T2.point_id = 34", "source_tables": ["inspection_point", "violation"]}, "evidence": "inspector's comment refers to inspector_comment; clean operating requirement code refers to code"}
{"sample_id": 6172, "db_id": "food_inspection_2", "final": {"question": "Among the establishments that failed in the inspection, what is the percentage of establishments with the highest risk level?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.risk_level = 3 THEN T1.license_no END) AS REAL) * 100 / COUNT(T1.risk_level) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.results = 'Fail'", "source_tables": ["establishment", "inspection"]}, "evidence": "failed in inspection refers to results = 'Fail'; the highest risk level refers to max(risk_level); percentage = divide(count(license_no where risk_level = max(risk_level)), count(license_no)) * 100% where results = 'Fail'"}
{"sample_id": 6173, "db_id": "food_inspection_2", "final": {"question": "Among the employees that receive a salary between $75000 to $85000, what is the difference between the number of employees which undergone an inspection that fined 100 and 500?", "sql": "SELECT SUM(CASE WHEN T3.fine = 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T3.fine = 500 THEN 1 ELSE 0 END) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T1.salary BETWEEN 75000 AND 80000", "source_tables": ["employee", "inspection", "violation"]}, "evidence": "salary between $75000 and $85000 refers to 75000 < = salary < = 80000; difference = subtract(count(inspection_id where fine = 100), count(inspection_id where fine = 500)) where 75000 < = salary < = 80000"}
{"sample_id": 6174, "db_id": "food_inspection_2", "final": {"question": "How many inspections were done in January 2011?", "sql": "SELECT COUNT(inspection_id) FROM inspection WHERE strftime('%Y-%m', inspection_date) = '2011-01'", "source_tables": ["inspection"]}, "evidence": "in January 2011 refers to inspection_date like '2011-01%'"}
{"sample_id": 6175, "db_id": "food_inspection_2", "final": {"question": "How many inspections failed in 2014?", "sql": "SELECT COUNT(inspection_id) FROM inspection WHERE strftime('%Y', inspection_date) = '2014' AND results = 'Fail'", "source_tables": ["inspection"]}, "evidence": "failed refers to results = 'Fail'; in 2014 refers to inspection_date like '2014%'"}
{"sample_id": 6176, "db_id": "food_inspection_2", "final": {"question": "Calculate the percentage of inspections with the fine for a minor food safety problem.", "sql": "SELECT CAST(COUNT(CASE WHEN fine = 100 THEN inspection_id END) AS REAL) * 100 / COUNT(inspection_id) FROM violation", "source_tables": ["violation"]}, "evidence": "fine for a minor food safety problem refers to fine = 100; percentage = divide(count(inspection_id where fine = 100), sum(inspection_id)) * 100%"}
{"sample_id": 6177, "db_id": "food_inspection_2", "final": {"question": "List the point IDs and fines of the inspections done on 7th August 2010.", "sql": "SELECT T2.point_id, T2.fine FROM inspection AS T1 INNER JOIN violation AS T2 ON T1.inspection_id = T2.inspection_id WHERE T1.inspection_date = '2010-08-07'", "source_tables": ["inspection", "violation"]}, "evidence": "on 7th August 2010 refers to inspection_date = '2010-08-07'"}
{"sample_id": 6178, "db_id": "food_inspection_2", "final": {"question": "How many inspections were done under the personnel category?", "sql": "SELECT COUNT(T1.inspection_id) FROM violation AS T1 INNER JOIN inspection_point AS T2 ON T1.point_id = T2.point_id WHERE T2.category = 'Personnel'", "source_tables": ["inspection_point", "violation"]}, "evidence": "under the personnel category refers to category = 'Personnel'"}
{"sample_id": 6179, "db_id": "food_inspection_2", "final": {"question": "Provide the names and inspection results of the facilities located in Burnham.", "sql": "SELECT DISTINCT T1.dba_name, T2.results FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.city = 'BURNHAM'", "source_tables": ["establishment", "inspection"]}, "evidence": "names refers to dba_name; inspection result refers to results; in Burnham refers to city = 'BURNHAM'"}
{"sample_id": 6180, "db_id": "food_inspection_2", "final": {"question": "Compare the number of inspections under toxic items and no-smoking regulations.", "sql": "SELECT COUNT(CASE WHEN T2.category = 'Toxic Items' THEN T1.inspection_id END) AS Tox_nums , COUNT(CASE WHEN T2.category = 'No Smoking Regulations' THEN T1.inspection_id END) AS NosmoNums FROM violation AS T1 INNER JOIN inspection_point AS T2 ON T1.point_id = T2.point_id", "source_tables": ["inspection_point", "violation"]}, "evidence": "under toxic items refers to category = 'Toxic Items'; no-smoking regulations refers to category = 'No Smoking Regulations'"}
{"sample_id": 6181, "db_id": "food_inspection_2", "final": {"question": "Which facilities were inspected by Sarah Lindsey on 20th November 2012?", "sql": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T2.inspection_date = '2012-11-20' AND T3.first_name = 'Sarah' AND T3.last_name = 'Lindsey'", "source_tables": ["establishment", "employee", "inspection"]}, "evidence": "facility name refers to dba_name; on 20th November 2012 refers to inspection_date = '2012-11-20'"}
{"sample_id": 6182, "db_id": "food_inspection_2", "final": {"question": "Provide the categories and fines for the inspections done by Lisa Tillman in January 2014.", "sql": "SELECT DISTINCT T4.category, T3.fine FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id INNER JOIN violation AS T3 ON T1.inspection_id = T3.inspection_id INNER JOIN inspection_point AS T4 ON T3.point_id = T4.point_id WHERE T2.first_name = 'Lisa' AND T2.last_name = 'Tillman' AND strftime('%Y-%m', T1.inspection_date) = '2014-01'", "source_tables": ["employee", "inspection", "inspection_point", "violation"]}, "evidence": "in January 2014 refers to inspection_date like '2014-01%'"}
{"sample_id": 6183, "db_id": "food_inspection_2", "final": {"question": "How many inspections were done under the display of inspection report summary category?", "sql": "SELECT COUNT(T2.inspection_id) FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.category = 'Display of Inspection Report Summary'", "source_tables": ["inspection_point", "violation"]}, "evidence": "under the display of inspection report summary category refers to category = 'Display of Inspection Report Summary'"}
{"sample_id": 6184, "db_id": "food_inspection_2", "final": {"question": "List the types and results of the inspections done on Riverwalk caf\u00e9.", "sql": "SELECT T2.inspection_type, T2.results FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.facility_type = 'RIVERWALK CAFE'", "source_tables": ["establishment", "inspection"]}, "evidence": "type refers to inspection_type; Riverwalk caf\u00e9 refers to facility_type = 'RIVERWALK CAFE'"}
{"sample_id": 6185, "db_id": "food_inspection_2", "final": {"question": "Who inspected Jean Samocki and what was the result?", "sql": "SELECT T3.first_name, T3.last_name, T2.results FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T1.dba_name = 'JEAN SAMOCKI'", "source_tables": ["establishment", "employee", "inspection"]}, "evidence": "employee's name refers to first_name, last_name; Jean Samocki refers to dba_name = 'JEAN SAMOCKI'"}
{"sample_id": 6186, "db_id": "food_inspection_2", "final": {"question": "How much did Hacienda Los Torres from ward 36 fine for failing an inspection?", "sql": "SELECT SUM(T3.fine) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T1.dba_name = 'HACIENDA LOS TORRES' AND T1.ward = 36 AND T2.results = 'Fail'", "source_tables": ["establishment", "inspection", "violation"]}, "evidence": "Hacienda Los Torres refers to dba_name = 'HACIENDA LOS TORRES'; ward 36 refers to ward = 36; failing an inspection refers to results = 'Fail';"}
{"sample_id": 6187, "db_id": "food_inspection_2", "final": {"question": "Calculate the total amount of fine under the food equipment and utensil category.", "sql": "SELECT SUM(T2.fine) FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.category = 'Food Equipment and Utensil'", "source_tables": ["inspection_point", "violation"]}, "evidence": "under the food equipment and utensil category refers to category = 'Food Equipment and Utensil'"}
{"sample_id": 6188, "db_id": "food_inspection_2", "final": {"question": "Provide the names and locations of the facilities that failed inspections on 29th July 2013.", "sql": "SELECT T2.dba_name, T2.longitude, T2.latitude FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE T1.inspection_date = '2013-07-29' AND T1.results = 'Fail'", "source_tables": ["establishment", "inspection"]}, "evidence": "name refers to dba_name; location refers to latitude, longitude; failed inspections refers to results = 'Fail'; on 29th July 2013 refers to inspection_date = '2013-07-29'"}
{"sample_id": 6189, "db_id": "food_inspection_2", "final": {"question": "Calculate the percentage of inspections with verified quality. Among them, how many businesses were from Chicago?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.results LIKE '%Pass%' THEN T2.inspection_id END) AS REAL) * 100 / COUNT(T2.inspection_id), COUNT(DISTINCT T2.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.city = 'CHICAGO'", "source_tables": ["establishment", "inspection"]}, "evidence": "verified quality refers to results like 'Pass%'; from Chicago refers to city = 'CHICAGO'; percentage = divide(count(inspection_id where results like 'Pass%'), sum(inspection_id)) * 100%"}
{"sample_id": 6190, "db_id": "food_inspection_2", "final": {"question": "Calculate the average inspections per year done by Jessica Anthony from 2010 to 2017.", "sql": "SELECT CAST(COUNT(CASE WHEN T1.first_name = 'Jessica' AND T1.last_name = 'Anthony' THEN T2.inspection_id ELSE 0 END) AS REAL) / 8 FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE strftime('%Y', T2.inspection_date) BETWEEN '2010' AND '2017'", "source_tables": ["employee", "inspection"]}, "evidence": "from 2010 to 2017 refers to inspection_date > '2010-01-01' AND T2.inspection_id < '2017-12-31'; average inspections per year = divide(count(inspection_id where inspection_date > '2010-01-01' AND T2.inspection_id < '2017-12-31'), 8)"}
{"sample_id": 6191, "db_id": "food_inspection_2", "final": {"question": "Provide the first name of employee who did inspection ID 48225?", "sql": "SELECT T1.first_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 48225", "source_tables": ["employee", "inspection"]}, "evidence": ""}
{"sample_id": 6192, "db_id": "food_inspection_2", "final": {"question": "Tell the address of employee who did inspection ID 52238?", "sql": "SELECT T1.address FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 52238", "source_tables": ["employee", "inspection"]}, "evidence": ""}
{"sample_id": 6249, "db_id": "coinmarketcap", "final": {"question": "Name the coin that has the highest market capitalization for all transactions in 2018.", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date LIKE '2018%' AND T2.market_cap = ( SELECT MAX(market_cap) FROM historical WHERE STRFTIME('%Y', date) = '2018' )", "source_tables": ["historical", "coins"]}, "evidence": "highest market capitalization refers to max(market_cap); in 2018 refers to year(date) = 2018"}
{"sample_id": 6250, "db_id": "coinmarketcap", "final": {"question": "What is the total value of Argentum coined traded in the past 24 hours on 2016/10/11.", "sql": "SELECT T2.volume_24h FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Argentum' AND T2.date = '2016-10-11'", "source_tables": ["historical", "coins"]}, "evidence": "total value in the past 24 hours refers to volume_24h; on 11/10/16 refers to date = '2016-11-10'"}
{"sample_id": 6251, "db_id": "coinmarketcap", "final": {"question": "List the price for Zetacoin on 13/11/1 and the next 7 consecutive days. What is the average price for these 7 days?", "sql": "SELECT T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Zetacoin' AND T2.date BETWEEN '2013-11-01' AND '2013-11-07' UNION ALL SELECT AVG(T2.PRICE) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Zetacoin' AND T2.date BETWEEN '2013-11-01' AND '2013-11-07'", "source_tables": ["historical", "coins"]}, "evidence": "on 1/11/13 and the next 7 consecutive days refers to DATE BETWEEN '2013-11-01' AND '2013-11-07'; average price refers to AVG(price); Zetacoin refers to name = 'Zetacoin'"}
{"sample_id": 6252, "db_id": "coinmarketcap", "final": {"question": "For all transactions for WRAP in August 2016, list the time to achieve highest price and the time to achieve the lowest price.", "sql": "SELECT T2.time_high, T2.time_low, T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'WARP' AND STRFTIME('%Y-%m', T2.date) = '2016-08'", "source_tables": ["historical", "coins"]}, "evidence": "in May 2013 refers to month(date) = 5 AND year(date) = 2013; time to achieve the highest price refers to time_high; time to achieve the lowest price refers to time_low; WRAP refers to name = 'WARP'"}
{"sample_id": 6253, "db_id": "coinmarketcap", "final": {"question": "State the transaction date whereby DigixDAO was transacted at the hightest price.", "sql": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'DigixDAO' ORDER BY T2.price DESC LIMIT 1", "source_tables": ["historical", "coins"]}, "evidence": "the highest price refers to max(price); DigixDAO refers to name = 'DigixDAO'"}
{"sample_id": 6254, "db_id": "coinmarketcap", "final": {"question": "Name the coin with the highest percentage price changed in 24 hours. State the transaction date and price.", "sql": "SELECT T1.name, T2.DATE, T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.percent_change_24h = ( SELECT MAX(percent_change_24h) FROM historical )", "source_tables": ["historical", "coins"]}, "evidence": "the highest percentage price changed in 24 hours refers to max(percent_change_24h)"}
{"sample_id": 6255, "db_id": "coinmarketcap", "final": {"question": "What is the average monthly circulating supply for Frozen in 2014.", "sql": "SELECT CAST(SUM(T2.circulating_supply) AS REAL) / 12 FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Frozen' AND STRFTIME('%Y', T2.date) = '2014'", "source_tables": ["historical", "coins"]}, "evidence": "average monthly circulating supply = AVG(circulating_supply); in 2017 refers to date BETWEEN '2017-01-01' AND '2017-12-31'"}
{"sample_id": 6256, "db_id": "coinmarketcap", "final": {"question": "List all the inactive coins and state the last date of its transaction?", "sql": "SELECT T1.NAME, MAX(T2.DATE) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.ID = T2.coin_id WHERE T1.status = 'inactive' ORDER BY T2.DATE DESC LIMIT 1", "source_tables": ["historical", "coins"]}, "evidence": "the last date refers to max(date); inactive coins refers to status = 'inactive'"}
{"sample_id": 6257, "db_id": "coinmarketcap", "final": {"question": "What was the price of 1 Bitcoin in 2016?", "sql": "SELECT AVG(T2.price) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bitcoin' AND STRFTIME('%Y', T2.date) = '2016'", "source_tables": ["historical", "coins"]}, "evidence": "2016 refers to historical date where year(date) = 2016"}
{"sample_id": 6258, "db_id": "coinmarketcap", "final": {"question": "State the transaction date and the price when Bitcoin was bottomed?", "sql": "SELECT T2.date, T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bitcoin' ORDER BY T2.price LIMIT 1", "source_tables": ["historical", "coins"]}, "evidence": "was bottomed refers to min(price)"}
{"sample_id": 6259, "db_id": "coinmarketcap", "final": {"question": "For all coins with average price more than $1000. State the current status of the coin.", "sql": "SELECT T1.status FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id GROUP BY T1.name HAVING AVG(T2.price) > 1000", "source_tables": ["historical", "coins"]}, "evidence": "average price more than $1000 refers to AVG(price)>1000"}
{"sample_id": 6260, "db_id": "coinmarketcap", "final": {"question": "Name the coin and date of transactions with the greatest decline in percent change in 1 hour.", "sql": "SELECT T1.name, T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.percent_change_1h = ( SELECT MIN(percent_change_1h) FROM historical )", "source_tables": ["historical", "coins"]}, "evidence": "the greatest decline in percent change in 1 hour refers to max(percent_change_1h)"}
{"sample_id": 6261, "db_id": "coinmarketcap", "final": {"question": "Name the coin under the token category that gives the highest max profit.", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.category = 'token' ORDER BY T2.high - T2.low DESC LIMIT 1", "source_tables": ["historical", "coins"]}, "evidence": "the highest max profit refers to max(subtract(high, low))"}
{"sample_id": 6262, "db_id": "coinmarketcap", "final": {"question": "Name the coin that have higher than average percentage price changed from the previous 24 hours for transaction on 2013/6/22.", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2020-06-22' GROUP BY T1.name HAVING AVG(T2.percent_change_24h) > T2.PRICE", "source_tables": ["historical", "coins"]}, "evidence": "average percentage price changed from the previous 24 hours refers to AVG(percent_change_24h); on 15/5/2013 refers to DATE = '2013-04-15'"}
{"sample_id": 6263, "db_id": "coinmarketcap", "final": {"question": "Which crytocurrency was ranked the first by CoinMarketCap on 2013/4/28?", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T2.cmc_rank = 1", "source_tables": ["historical", "coins"]}, "evidence": "ranked the first refers to cmc_rank = 1; on 2013/4/28 refers to date = '2013-04-28'"}
{"sample_id": 6264, "db_id": "coinmarketcap", "final": {"question": "How much dollars was a Bitcoin worth on 2013/4/28 according to the coin market?", "sql": "SELECT T2.market_cap FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name = 'Bitcoin'", "source_tables": ["historical", "coins"]}, "evidence": "worth refers to price; on 2013/4/28 refers to date = '2013-04-28'"}
{"sample_id": 6265, "db_id": "coinmarketcap", "final": {"question": "Which crytocurrency was not opened on 2013/5/3?", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-05-03' AND T2.open IS NULL", "source_tables": ["historical", "coins"]}, "evidence": "not opened refers to open IS NULL; on 2013/5/3 refers to date = '2013-05-03'"}
{"sample_id": 6266, "db_id": "coinmarketcap", "final": {"question": "What was the price of Bitcoin when it closed at the end of the day on 2013/4/29?", "sql": "SELECT T2.close FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-29' AND T1.name = 'Bitcoin'", "source_tables": ["historical", "coins"]}, "evidence": "price when it closed refers to close; on 2013/4/29 refers to date = '2013-04-29'"}
{"sample_id": 6267, "db_id": "coinmarketcap", "final": {"question": "When did Bitcoin reach its highest price on 2013/4/29?", "sql": "SELECT T2.time_high FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-29' AND T1.name = 'Bitcoin'", "source_tables": ["historical", "coins"]}, "evidence": "time that a coin reaches its highest price refers to time_high; on 2013/4/29 refers to date = '2013-04-29'"}
{"sample_id": 6268, "db_id": "coinmarketcap", "final": {"question": "What was the max profit a user can make on Bitcoin on 2013/4/28?", "sql": "SELECT T2.high - T2.low FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name = 'Bitcoin'", "source_tables": ["historical", "coins"]}, "evidence": "the max profit = subtract(high, low); on 2013/4/28 refers to date = '2013-04-28'"}
{"sample_id": 6269, "db_id": "coinmarketcap", "final": {"question": "What was the number of Bitcoins verifiably burned until 2013/4/28?", "sql": "SELECT T2.max_supply - T2.total_supply FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name = 'Bitcoin'", "source_tables": ["historical", "coins"]}, "evidence": "the number of Bitcoins verifiably burned = max_supply - total_supply; 2013/4/28 refers to date = '2013-04-28'"}
{"sample_id": 6270, "db_id": "coinmarketcap", "final": {"question": "Which crytocurrency was traded in the highest value on 2016/1/8?", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2016-01-08' AND T2.volume_24h = ( SELECT MAX(volume_24h) FROM historical WHERE date = '2016-01-08' )", "source_tables": ["historical", "coins"]}, "evidence": "traded in the highest value refers to max(volume_24h); on 2016/1/8 refers to date = '2016-01-08'"}
{"sample_id": 6271, "db_id": "coinmarketcap", "final": {"question": "Please list the names of the crytocurrencies that have a total amount of existence of over 10000000 on 2013/4/28.", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T2.total_supply > 10000000", "source_tables": ["historical", "coins"]}, "evidence": "a total amount of existence of over 10000000 refers to total_supply>10000000; on 2013/4/28 refers to date = '2013-04-28'"}
{"sample_id": 6272, "db_id": "coinmarketcap", "final": {"question": "Had Bitcoin's price increased or decreased on 2013/5/5 compared with the price 7 days before?", "sql": "SELECT (CASE WHEN T2.percent_change_7d > 0 THEN 'INCREASED' ELSE 'DECREASED' END) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-05-05' AND T1.name = 'Bitcoin'", "source_tables": ["historical", "coins"]}, "evidence": "price increased refers to percent_change_7d>0; decreased refers percent_change_7d<0; on 2013/5/5 refers to date = '2013-05-05'"}
{"sample_id": 6273, "db_id": "coinmarketcap", "final": {"question": "Which crytocurrency had a bigger number of coins circulating in the market and in the general public's hands on 2013/4/28, Bitcoin or Litecoin?", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name IN ('Bitcoin', 'Litecoin') ORDER BY T2.circulating_supply DESC LIMIT 1", "source_tables": ["historical", "coins"]}, "evidence": "a bigger number of coins circulating in the market refers to max(circulating_supply); on 2013/4/28 refers to date = '2013-04-28'"}
{"sample_id": 6274, "db_id": "coinmarketcap", "final": {"question": "How much was a Bitcoin on 2013/4/28?", "sql": "SELECT T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name = 'Bitcoin'", "source_tables": ["historical", "coins"]}, "evidence": "how much refers to price; on 2013/4/28 refers to date = '2013-04-28'"}
{"sample_id": 6275, "db_id": "coinmarketcap", "final": {"question": "What was the average price of a Bitcoin in the year 2013?", "sql": "SELECT AVG(T2.price) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE STRFTIME('%Y', T2.date) = '2013' AND T1.name = 'Bitcoin'", "source_tables": ["historical", "coins"]}, "evidence": "average price refers SUM(price)/COUNT(named = 'Bitcoin'); in the year 2013 refers to year(date) = 2013"}
{"sample_id": 6276, "db_id": "coinmarketcap", "final": {"question": "What was the percentage of the Bitcoins verifiably burned until 2018/4/28?", "sql": "SELECT CAST((SUM(T2.max_supply) - SUM(T2.total_supply)) AS REAL) / SUM(T2.total_supply) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date < '2018-04-28' AND T1.name = 'Bitcoin'", "source_tables": ["historical", "coins"]}, "evidence": "the percentage of the Bitcoins verifiably burned = divide(subtract(SUM(max_supply), SUM(total_supply)),SUM(total_supply))*100%; until 2013/4/28 refers to date<'2013-04-08'"}
{"sample_id": 6297, "db_id": "retail_world", "final": {"question": "How many employees have obtained a doctorate?", "sql": "SELECT COUNT(EmployeeID) FROM Employees WHERE TitleOfCourtesy = 'Dr.'", "source_tables": ["employees"]}, "evidence": "doctorate refers to TitleOfCourtesy = 'Dr.;"}
{"sample_id": 6298, "db_id": "retail_world", "final": {"question": "To whom does Nancy Davolio report? Please give that employee's full name.", "sql": "SELECT FirstName, LastName FROM Employees WHERE EmployeeID = ( SELECT ReportsTo FROM Employees WHERE LastName = 'Davolio' AND FirstName = 'Nancy' )", "source_tables": ["employees"]}, "evidence": "to whom refers to ReportsTo; full name = FirstName, LastName;"}
{"sample_id": 6299, "db_id": "retail_world", "final": {"question": "Which phone number should I call if I want to reach Nancy Davolio's home?", "sql": "SELECT HomePhone FROM Employees WHERE LastName = 'Davolio' AND FirstName = 'Nancy'", "source_tables": ["employees"]}, "evidence": "phone number of Nancy Davolio's home refers to HomePhone WHERE FirstName = 'Nancy' AND LastName = 'Davolio';"}
{"sample_id": 6300, "db_id": "retail_world", "final": {"question": "How many employees have Andrew Fuller as their direct supervisor?", "sql": "SELECT COUNT(EmployeeID) FROM Employees WHERE ReportsTo = ( SELECT EmployeeID FROM Employees WHERE LastName = 'Fuller' AND FirstName = 'Andrew' )", "source_tables": ["employees"]}, "evidence": "direct supervisor refers to ReportsTo where the person being reported to is usually the direct supervisor of the reporter;"}
{"sample_id": 6301, "db_id": "retail_world", "final": {"question": "Which employee has the highest salary? Please give his or her full name.", "sql": "SELECT FirstName, LastName FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )", "source_tables": ["employees"]}, "evidence": "highest salary refers to MAX(Salary); full name = FirstName, LastName;"}
{"sample_id": 6302, "db_id": "retail_world", "final": {"question": "How much higher is the salary of Andrew Fuller than that of Nancy Davolio?", "sql": "SELECT ( SELECT Salary FROM Employees WHERE LastName = 'Fuller' AND FirstName = 'Andrew' ) - ( SELECT Salary FROM Employees WHERE LastName = 'Davolio' AND FirstName = 'Nancy' ) AS RESULT", "source_tables": ["employees"]}, "evidence": "how much higher = SUBTRACT(SUM(Salary WHERE LastName = 'Fuller' and FirstName = 'Andrew'), SUM(Salary WHERE LastName = 'Davolio' and FirstName = 'Nancy'));"}
{"sample_id": 6303, "db_id": "retail_world", "final": {"question": "Among the employees working as Sales Representatives, how many of them are located in the UK?", "sql": "SELECT COUNT(Country) FROM Employees WHERE Title = 'Sales Representative' AND Country = 'UK'", "source_tables": ["employees"]}, "evidence": "Sales Representatives refers to Title = 'Sales Representative'; UK refers to Country = 'UK';"}
{"sample_id": 6304, "db_id": "retail_world", "final": {"question": "Which employee is in charge of the sales in Hollis? Please give the employee's full name.", "sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Hollis'", "source_tables": ["employeeterritories", "employees", "territories"]}, "evidence": "Hollis refers to TerritoryDescription = 'Hollis'; full name = FirstName, LastName;"}
{"sample_id": 6305, "db_id": "retail_world", "final": {"question": "The sales of how many territories is Nancy Davolio in charge of?", "sql": "SELECT COUNT(T2.TerritoryID) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio'", "source_tables": ["employeeterritories", "employees"]}, "evidence": ""}
{"sample_id": 6306, "db_id": "retail_world", "final": {"question": "Please list the names of all the territories whose sales are taken in charge by Nancy Davolio.", "sql": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio'", "source_tables": ["employeeterritories", "employees", "territories"]}, "evidence": "names of all territories refers to TerritoryDescription;"}
{"sample_id": 6307, "db_id": "retail_world", "final": {"question": "The sales of how many territories in total do the employees in London take charge of?", "sql": "SELECT COUNT(T2.TerritoryID) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.City = 'London'", "source_tables": ["employeeterritories", "employees"]}, "evidence": "London refers to city = 'London';"}
{"sample_id": 6308, "db_id": "retail_world", "final": {"question": "Please list the territories whose sales are taken in charge by the employees who report to Andrew Fuller.", "sql": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.ReportsTo = ( SELECT EmployeeID FROM Employees WHERE FirstName = 'Andrew' AND LastName = 'Fuller' )", "source_tables": ["employeeterritories", "employees", "territories"]}, "evidence": "territories refers to TerritoryDescription;"}
{"sample_id": 6309, "db_id": "retail_world", "final": {"question": "How many employees in the UK takes charge of the sales in over 4 territories?", "sql": "SELECT COUNT(COUNTEID) FROM ( SELECT T1.EmployeeID AS COUNTEID FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.Country = 'UK' GROUP BY T1.EmployeeID HAVING COUNT(T2.TerritoryID) > 4 ) T1", "source_tables": ["employeeterritories", "employees"]}, "evidence": "UK refers to Country = 'UK'; employees with over 4 territories refers to EmployeeID WHERE TerritoryID > 4;"}
{"sample_id": 6310, "db_id": "retail_world", "final": {"question": "How many territories are there in the Eastern Region?", "sql": "SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern'", "source_tables": ["territories", "region"]}, "evidence": "Eastern Region refers to RegionDescription = 'Eastern';"}
{"sample_id": 6311, "db_id": "retail_world", "final": {"question": "Please list all the territories in the Eastern Region.", "sql": "SELECT DISTINCT T1.TerritoryDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern'", "source_tables": ["territories", "region"]}, "evidence": "territories refers to TerritoryDescription; Eastern Region refers to RegionDescription = 'Eastern';"}
{"sample_id": 6312, "db_id": "retail_world", "final": {"question": "How many employees in total are in charge of the sales in the Eastern Region?", "sql": "SELECT COUNT(T.EmployeeID) FROM ( SELECT T3.EmployeeID FROM Region AS T1 INNER JOIN Territories AS T2 ON T1.RegionID = T2.RegionID INNER JOIN EmployeeTerritories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.RegionDescription = 'Eastern' GROUP BY T3.EmployeeID ) T", "source_tables": ["territories", "employeeterritories", "region"]}, "evidence": "Eastern Region refers to RegionDescription = 'Eastern';"}
{"sample_id": 6313, "db_id": "retail_world", "final": {"question": "Please list the home phone numbers of the employees who are in charge of the sales in the territories in the Eastern Region.", "sql": "SELECT T1.HomePhone FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T4.RegionDescription = 'Eastern ' GROUP BY T1.HomePhone", "source_tables": ["employeeterritories", "employees", "territories", "region"]}, "evidence": "home phone numbers refers to HomePhone; Eastern Region refers to RegionDescription = 'Eastern';"}
{"sample_id": 6314, "db_id": "retail_world", "final": {"question": "How many more territories are there in than Eastern Region than in the Southern Region?", "sql": "SELECT ( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern' ) - ( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Southern' ) AS Calu", "source_tables": ["territories", "region"]}, "evidence": "how many more = SUBTRACT(SUM(RegionDescription = 'Eastern'), SUM(RegionDescription = 'Southern')); Eastern Region refers to RegionDescription = 'Eastern'; Southern Region refers to RegionDescription = 'Southern';"}
{"sample_id": 6315, "db_id": "retail_world", "final": {"question": "Please list the names of all the products ordered in order no. 10248.", "sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10248", "source_tables": ["products", "order details"]}, "evidence": "names of the products refers to ProductName; order no. refers to OrderID;"}
{"sample_id": 6316, "db_id": "retail_world", "final": {"question": "What is the quantity of Ikura ordered in order no. 10273?", "sql": "SELECT T2.Quantity FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10273 AND T1.ProductName = 'Ikura'", "source_tables": ["products", "order details"]}, "evidence": "Ikura refers to ProductName = 'Ikura'; order no. refers to OrderID;"}
{"sample_id": 6317, "db_id": "retail_world", "final": {"question": "What is the total price of Ikura ordered in order no. 10273?", "sql": "SELECT T2.UnitPrice * T2.Quantity FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10273 AND T1.ProductName = 'Ikura'", "source_tables": ["products", "order details"]}, "evidence": "total price = MULTIPLY(UnitPrice, Quantity); Ikura refers to ProductName = 'Ikura'; order no. refers to OrderID;"}
{"sample_id": 6318, "db_id": "retail_world", "final": {"question": "What is the total production of the product that is ordered in the highest quantity in order no. 10248?", "sql": "SELECT T1.UnitsInStock + T1.UnitsOnOrder FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10248 ORDER BY T2.Quantity DESC LIMIT 1", "source_tables": ["products", "order details"]}, "evidence": "total production of the product = SUM(units in stock, units on order); order no. refers to OrderID;"}
{"sample_id": 6319, "db_id": "retail_world", "final": {"question": "Of all the products ordered in order no. 10248, which product has the highest user satisfaction?", "sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10248 ORDER BY T1.ReorderLevel DESC LIMIT 1", "source_tables": ["products", "order details"]}, "evidence": "order no. refers to OrderID; highest user satisfaction refers to MAX(ReorderLevel);"}
{"sample_id": 6320, "db_id": "retail_world", "final": {"question": "How many orders have asked for the product Tofu?", "sql": "SELECT COUNT(T2.OrderID) FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName = 'Tofu'", "source_tables": ["products", "order details"]}, "evidence": "product refers to ProductName;"}
{"sample_id": 6321, "db_id": "retail_world", "final": {"question": "Please list the IDs of the orders with a product whose production is not continuous.", "sql": "SELECT T2.OrderID FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Discontinued = 1", "source_tables": ["products", "order details"]}, "evidence": "IDs of the orders refers to OrderID; production is not continuous refers to Discontinued = 1;"}
{"sample_id": 6322, "db_id": "retail_world", "final": {"question": "Of all the orders that have ordered Ikura, how many of them enjoys a unit price that's lower than its standard unit price?", "sql": "SELECT COUNT(T2.OrderID) FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName = 'Ikura' AND T2.UnitPrice < T1.UnitPrice", "source_tables": ["products", "order details"]}, "evidence": "Ikura refers to ProductName = 'Ikura'; ordered unit price that's lower than its standard unit price refers to \"Order Details\".UnitPrice < \"Product\".UnitPrice;"}
{"sample_id": 6323, "db_id": "retail_world", "final": {"question": "What is the name of the supplier company for Aniseed Syrup?", "sql": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Aniseed Syrup'", "source_tables": ["suppliers", "products"]}, "evidence": "name of the supplier refers to CompanyName; Aniseed Syrup refers to ProductName = 'Aniseed Syrup';"}
{"sample_id": 6324, "db_id": "retail_world", "final": {"question": "Please list the names of all the products whose supplier is in Japan.", "sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Japan'", "source_tables": ["suppliers", "products"]}, "evidence": "names of the products refers to ProductName; Japan refers to Country = 'Japan';"}
{"sample_id": 6325, "db_id": "retail_world", "final": {"question": "Please list the phone numbers of the suppliers of the products that have a higher units on order than units in stock.", "sql": "SELECT DISTINCT T2.Phone FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitsInStock < T1.UnitsOnOrder", "source_tables": ["suppliers", "products"]}, "evidence": "UnitsInStock < UnitsOnOrder;"}
{"sample_id": 6326, "db_id": "retail_world", "final": {"question": "Among the products that are no longer in continuous production, how many of them have their supplier in the USA?", "sql": "SELECT COUNT(T1.Discontinued) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'USA' AND T1.Discontinued = 1", "source_tables": ["suppliers", "products"]}, "evidence": "no longer continuous refers to Discontinued = 1; USA refers to Country = 'USA';"}
{"sample_id": 6327, "db_id": "retail_world", "final": {"question": "Who is the supplier of the product with the highest unit price?", "sql": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice = ( SELECT MAX(UnitPrice) FROM Products )", "source_tables": ["suppliers", "products"]}, "evidence": "supplier of the product refers to CompanyName; highest unit price refers to MAX(UnitPrice);"}
{"sample_id": 6328, "db_id": "retail_world", "final": {"question": "What is the average salary of the employees who takes charge of the sales of over 4 territories?", "sql": "SELECT AVG(T1.Salary) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID GROUP BY T1.EmployeeID HAVING COUNT(T2.TerritoryID) > 4", "source_tables": ["employeeterritories", "employees"]}, "evidence": "average salary = DIVIDE(SUM(Salary), COUNT(EmployeeID)); employees who takes charge of over 4 territories refers to EmployeeID WHERE COUNT(TerritoryID) > 4;"}
{"sample_id": 6329, "db_id": "retail_world", "final": {"question": "How much lower in percentage is the unit price of Ikura in order no. 10273 than its standard unit price?", "sql": "SELECT CAST((T1.UnitPrice - T2.UnitPrice) AS REAL) * 100 / T1.UnitPrice FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10273 AND T1.ProductName = 'Ikura'", "source_tables": ["products", "order details"]}, "evidence": "how much lower in percentage = MULTIPLY(DIVIDE(SUBTRACT(Products.UnitPrice, Order Details.UnitPrice), Products.UnitPrice), 100); Ikura refers to ProductName = 'Ikura'; order no. refers to OrderID;"}
{"sample_id": 6330, "db_id": "retail_world", "final": {"question": "What is the average quantity of Ikura ordered in one order?", "sql": "SELECT CAST(SUM(T2.Quantity) AS REAL) / COUNT(T2.OrderID) FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName = 'Ikura'", "source_tables": ["products", "order details"]}, "evidence": "average = AVG(Quantity); Ikura refers to ProductName = 'Ikura';"}
{"sample_id": 6331, "db_id": "retail_world", "final": {"question": "Among the products ordered in order no. 10248, which product has the biggest ratio of units on order to units in stock?", "sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10248 ORDER BY T1.UnitsOnOrder / T1.UnitsInStock DESC LIMIT 1", "source_tables": ["products", "order details"]}, "evidence": "order no. refers to OrderID; biggest ratio = MAX(DIVIDE(UnitsOnOrder, UnitsInStock));"}
{"sample_id": 6332, "db_id": "retail_world", "final": {"question": "Give the full name of the youngest employee.", "sql": "SELECT FirstName, LastName FROM Employees WHERE BirthDate = ( SELECT MAX(BirthDate) FROM Employees )", "source_tables": ["employees"]}, "evidence": "full name = FirstName, LastName; youngest refers to latest BirthDate;"}
{"sample_id": 6333, "db_id": "retail_world", "final": {"question": "Who is the newest hired employee? Give the full name.", "sql": "SELECT FirstName, LastName FROM Employees WHERE HireDate = ( SELECT MAX(HireDate) FROM Employees )", "source_tables": ["employees"]}, "evidence": "newest hired refers to latest HireDate; full name = FirstName, LastName;"}
{"sample_id": 6334, "db_id": "retail_world", "final": {"question": "Provide the number of orders that were handled by Michael Suyama.", "sql": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Michael' AND T1.LastName = 'Suyama'", "source_tables": ["employees", "orders"]}, "evidence": ""}
{"sample_id": 6335, "db_id": "retail_world", "final": {"question": "Give the name of the territory where Mr. Robert King works.", "sql": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.TitleOfCourtesy = 'Mr.' AND T1.FirstName = 'Robert' AND T1.LastName = 'King'", "source_tables": ["employeeterritories", "employees", "territories"]}, "evidence": "name of territory refers to TerritoryDescription; Mr. refers to TitleOfCourtesy = 'Mr';"}
{"sample_id": 6336, "db_id": "retail_world", "final": {"question": "Which territory does Ms. Laura Callahan's direct supervisor work in? Give the name of the territory.", "sql": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.EmployeeID = ( SELECT ReportsTo FROM Employees WHERE TitleOfCourtesy = 'Ms.' AND FirstName = 'Laura' AND LastName = 'Callahan' )", "source_tables": ["employeeterritories", "employees", "territories"]}, "evidence": "Ms. refers to TitleOfCourtesy = 'Ms'; ReportsTo\u2019 represents a hierarchical relationship where the person being reported to is usually the direct supervisor of the reporter; name of the territory refers to TerritoryDescription;"}
{"sample_id": 6337, "db_id": "retail_world", "final": {"question": "Who is in charge of the \"Santa Monica\" territory? Give the full name.", "sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Santa Monica'", "source_tables": ["employeeterritories", "employees", "territories"]}, "evidence": "Santa Monica refers to TerritoryDescription = 'Santa Monica'; full name = FirstName, MiddleName, LastName;"}
{"sample_id": 6338, "db_id": "retail_world", "final": {"question": "Give the home phone number of the employee who is in charge of \"Savannah\" territory.", "sql": "SELECT T1.HomePhone FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Savannah'", "source_tables": ["employeeterritories", "employees", "territories"]}, "evidence": "home phone number refers to HomePhone; Savannah refers to TerritoryDescription = 'Savannah';"}
{"sample_id": 6339, "db_id": "retail_world", "final": {"question": "For the order from \"HILAA\" on 1997/12/25, what was the total quantity of the products in that order?", "sql": "SELECT SUM(T2.Quantity) FROM Orders AS T1 INNER JOIN 'Order Details' AS T2 ON T1.OrderID = T2.OrderID WHERE T1.CustomerID = 'HILAA' AND T1.OrderDate LIKE '1997-12-25%'", "source_tables": ["orders", "order details"]}, "evidence": "HILLA refers to CustomerID = 'HILAA'; on 1997/12/25 refers to OrderDate = '1997/12/25';"}
{"sample_id": 6340, "db_id": "retail_world", "final": {"question": "For the order paying the highest freight, how many kinds of products does it contain?", "sql": "SELECT COUNT(T2.ProductID) FROM Orders AS T1 INNER JOIN 'Order Details' AS T2 ON T1.OrderID = T2.OrderID WHERE T1.Freight = ( SELECT MAX(Freight) FROM Orders ) GROUP BY T1.OrderID", "source_tables": ["orders", "order details"]}, "evidence": "highest freight refers to MAX(Freight); kinds of products refers to ProductID;"}
{"sample_id": 6341, "db_id": "retail_world", "final": {"question": "Tell the name of the shipper company for the order No.10585.", "sql": "SELECT T2.CompanyName FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.OrderID = 10585", "source_tables": ["shippers", "orders"]}, "evidence": "name of the shipper company refers to ShipName; order No. refers to OrderID;"}
{"sample_id": 6342, "db_id": "retail_world", "final": {"question": "Give the number of orders that were shipped by \"Federal Shipping\".", "sql": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Federal Shipping'", "source_tables": ["shippers", "orders"]}, "evidence": "Federal Shipping refers to CompanyName = 'Federal Shipping';"}
{"sample_id": 6343, "db_id": "retail_world", "final": {"question": "How many kinds of products are there in the the category of \"dairy products\"?", "sql": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.CategoryName = 'Dairy Products'", "source_tables": ["categories", "products"]}, "evidence": "kinds of products refers to ProductID; category refers to CategoryName;"}
{"sample_id": 6344, "db_id": "retail_world", "final": {"question": "Which category does \"tofu\" belong to?", "sql": "SELECT T2.CategoryName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.ProductName = 'Tofu'", "source_tables": ["categories", "products"]}, "evidence": "category refers to CategoryName; tofu refers to ProductName = 'Tofu';"}
{"sample_id": 6345, "db_id": "retail_world", "final": {"question": "What is the total production of the products from the supplier \u201cEscargots Nouveaux\u201d?", "sql": "SELECT SUM(T1.UnitsInStock + T1.UnitsOnOrder) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Escargots Nouveaux'", "source_tables": ["suppliers", "products"]}, "evidence": "total production of the products = add(units in stock , units on order); supplier \u201cEscargots Nouveaux\u201d refers to CompanyName = 'Escargots Nouveaux'"}
{"sample_id": 6346, "db_id": "retail_world", "final": {"question": "Give the reorder level for the products from the supplier \"Nord-Ost-Fisch Handelsgesellschaft mbH\".", "sql": "SELECT T1.ReorderLevel FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Nord-Ost-Fisch Handelsgesellschaft mbH'", "source_tables": ["suppliers", "products"]}, "evidence": "supplier \"Nord-Ost-Fisch Handelsgesellschaft mbH\" refers to CompanyName = 'Nord-Ost-Fisch Handelsgesellschaft mbH'"}
{"sample_id": 6347, "db_id": "retail_world", "final": {"question": "How many kinds of products are supplied by \"Karkki Oy\" company?", "sql": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Karkki Oy'", "source_tables": ["suppliers", "products"]}, "evidence": "supplied by refers to CompanyName"}
{"sample_id": 6348, "db_id": "retail_world", "final": {"question": "Give the contact name of the supplier for the product \"Gudbrandsdalsost\".", "sql": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Gudbrandsdalsost'", "source_tables": ["suppliers", "products"]}, "evidence": "product refers to ProductName"}
{"sample_id": 6349, "db_id": "retail_world", "final": {"question": "Tell the country name of the supplier for \"Scottish Longbreads\".", "sql": "SELECT T2.Country FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Scottish Longbreads'", "source_tables": ["suppliers", "products"]}, "evidence": "\"Scottish Longbreads\" refers to ProductName = 'Scottish Longbreads'"}
{"sample_id": 6350, "db_id": "retail_world", "final": {"question": "Give the number of territories in the \"Northern\" region.", "sql": "SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Northern'", "source_tables": ["territories", "region"]}, "evidence": "\"Northern\" region refers to RegionDescription = 'Northern'"}
{"sample_id": 6351, "db_id": "retail_world", "final": {"question": "Which region is \"Columbia\" in?", "sql": "SELECT T2.RegionDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T1.TerritoryDescription = 'Columbia'", "source_tables": ["territories", "region"]}, "evidence": "region refers to RegionID; \"Columbia\" refers to TerritoryDescription = 'Columbia'"}
{"sample_id": 6352, "db_id": "retail_world", "final": {"question": "For the orders of Customer \"WHITC\", what is the percentage of the orders were fulfilled with shipper company \"United Package\"?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.CompanyName = 'United Package' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.CustomerID = 'WHITC'", "source_tables": ["shippers", "orders"]}, "evidence": "Customer \"WHITC\" refers to CustomerID = 'WHITC'; shipper company \"United Package\" refers to CompanyName = 'United Package'; percentage = divide(count(ShipperID where CompanyName = 'United Package') , count(ShipperID)) * 100%"}
{"sample_id": 6353, "db_id": "retail_world", "final": {"question": "How many percent more orders were fulfilled with shipper company \"United Package\" than with \"Speedy Express\"?", "sql": "SELECT CAST((COUNT(CASE WHEN T2.CompanyName = 'United Package' THEN 1 ELSE NULL END) - COUNT(CASE WHEN T2.CompanyName = 'Speedy Express' THEN 1 ELSE NULL END)) AS REAL) * 100 / COUNT(CASE WHEN T2.CompanyName = 'Speedy Express' THEN 1 ELSE NULL END) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID", "source_tables": ["shippers", "orders"]}, "evidence": "percent = divide(subtract(count(OrderID where CompanyName = 'United Package') , count(OrderID where CompanyName = 'Speedy Express')) , count(OrderID where CompanyName = 'Speedy Express')) * 100%"}
{"sample_id": 6354, "db_id": "retail_world", "final": {"question": "How many times is the number of territories in \"Eastern Region\" than \"Southern Region\"?", "sql": "SELECT CAST(( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern' ) AS REAL) / ( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Southern' ) AS Calu", "source_tables": ["territories", "region"]}, "evidence": "\"Eastern Region\" refers to RegionDescription = 'Eastern'; \"Southern Region\" refers to RegionDescription = 'Southern'; times = divide(count(TerritoryDescription where RegionDescription = 'Eastern') , count(TerritoryDescription where RegionDescription = 'Southern'))"}
{"sample_id": 6355, "db_id": "retail_world", "final": {"question": "How many customers are there in the country with the highest number of customers?", "sql": "SELECT COUNT(CustomerID) FROM Customers GROUP BY Country ORDER BY COUNT(CustomerID) DESC LIMIT 1", "source_tables": ["customers"]}, "evidence": "highest number refers to max(count(CustomerID))"}
{"sample_id": 6356, "db_id": "retail_world", "final": {"question": "What are the order ids of the orders with freight of over 800?", "sql": "SELECT OrderID FROM Orders WHERE Freight > 800", "source_tables": ["orders"]}, "evidence": "freight of over 800 refers to Freight > 800"}
{"sample_id": 6357, "db_id": "retail_world", "final": {"question": "What is the Island Trading customer's complete address?", "sql": "SELECT Address, City, Region, Country, PostalCode FROM Customers WHERE CompanyName = 'Island Trading'", "source_tables": ["customers"]}, "evidence": "Island Trading refers to CompanyName = 'Island Trading'; complete address = Address, City, Region, Country, PostalCode"}
{"sample_id": 6358, "db_id": "retail_world", "final": {"question": "What is the most expensive product?", "sql": "SELECT ProductName FROM Products WHERE UnitPrice = ( SELECT MAX(UnitPrice) FROM Products )", "source_tables": ["products"]}, "evidence": "product refers to ProductName; most expensive refers to max(UnitPrice)"}
{"sample_id": 6359, "db_id": "retail_world", "final": {"question": "How many suppliers are there in the United States of America?", "sql": "SELECT COUNT(SupplierID) FROM Suppliers WHERE Country = 'USA'", "source_tables": ["suppliers"]}, "evidence": "United States of America refers to Country = 'USA'"}
{"sample_id": 6360, "db_id": "retail_world", "final": {"question": "Which product have the highest user satisfaction?", "sql": "SELECT ProductName FROM Products WHERE ReorderLevel = ( SELECT MAX(ReorderLevel) FROM Products )", "source_tables": ["products"]}, "evidence": "product refers to ProductName; highest user satisfaction refers to max(ReorderLevel)"}
{"sample_id": 6361, "db_id": "retail_world", "final": {"question": "What is the full name of the employee with the highest salary?", "sql": "SELECT FirstName, LastName FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )", "source_tables": ["employees"]}, "evidence": "full name refers to FirstName LastName; highest salary refers to max(Salary)"}
{"sample_id": 6362, "db_id": "retail_world", "final": {"question": "What are the names of the products that were discountinued?", "sql": "SELECT ProductName FROM Products WHERE Discontinued = 1", "source_tables": ["products"]}, "evidence": "discontinued refers to Discontinued = 1; name of products refers to ProductName"}
{"sample_id": 6363, "db_id": "retail_world", "final": {"question": "What is the average salary of sales representatives in the United Kingdom?", "sql": "SELECT AVG(Salary) FROM Employees WHERE Title = 'Sales Representative' AND Country = 'UK'", "source_tables": ["employees"]}, "evidence": "average salary = avg(Salary); sales representative refers to Title = 'Sales Representative'; in the United Kingdom refers to Country = 'UK'"}
{"sample_id": 6364, "db_id": "retail_world", "final": {"question": "What is the most widely used shipping company in the United States of America?", "sql": "SELECT T2.CompanyName FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.ShipCountry = 'USA' GROUP BY T2.CompanyName ORDER BY COUNT(T2.CompanyName) DESC LIMIT 1", "source_tables": ["shippers", "orders"]}, "evidence": "most widely used refers to max(count(ShipVia)); shipping company refers to CompanyName; in the United States of America refers to ShipCountry = 'USA'"}
{"sample_id": 6365, "db_id": "retail_world", "final": {"question": "How many products were supplied by Pavlova, Ltd.?", "sql": "SELECT COUNT(T1.ProductName) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Pavlova, Ltd.'", "source_tables": ["suppliers", "products"]}, "evidence": "Pavlova, Ltd. refers to CompanyName = 'Pavlova, Ltd.'"}
{"sample_id": 6366, "db_id": "retail_world", "final": {"question": "How many orders were shipped to GREAL via United Package?", "sql": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.CustomerID = 'GREAL' AND T2.CompanyName = 'United Package'", "source_tables": ["shippers", "orders"]}, "evidence": "GREAL refers to CustomerID = 'GREAL'; via United Package refers to CompanyName = 'United Package'"}
{"sample_id": 6367, "db_id": "retail_world", "final": {"question": "What are the names of the suppliers whose products have the highest user satisfaction?", "sql": "SELECT DISTINCT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ReorderLevel = ( SELECT MAX(ReorderLevel) FROM Products )", "source_tables": ["suppliers", "products"]}, "evidence": "name of the supplier refers to SupplierID; highest user satisfaction refers to max(ReorderLevel)"}
{"sample_id": 6368, "db_id": "retail_world", "final": {"question": "In total, how many orders were shipped via United Package?", "sql": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'United Package'", "source_tables": ["shippers", "orders"]}, "evidence": "via United Package refers to CompanyName = 'United Package'"}
{"sample_id": 6369, "db_id": "retail_world", "final": {"question": "How many suppliers in Australia whose products were discontinued?", "sql": "SELECT COUNT(T1.Discontinued) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.Discontinued = 1 AND T2.Country = 'Australia'", "source_tables": ["suppliers", "products"]}, "evidence": "in Australia refers to Country = 'Australia'; discontinued refers to Discontinued = 1"}
{"sample_id": 6370, "db_id": "retail_world", "final": {"question": "How much is the total purchase price, including freight, of the top 2 most expensive products?", "sql": "SELECT T2.UnitPrice * T2.Quantity + T1.Freight FROM Orders AS T1 INNER JOIN 'Order Details' AS T2 ON T1.OrderID = T2.OrderID ORDER BY T2.UnitPrice * T2.Quantity + T1.Freight DESC LIMIT 2", "source_tables": ["orders", "order details"]}, "evidence": "total purchase price including freight refers to add(multiply(UnitPrice , Quantity) , Freight); most expensive refers to max(UnitPrice)"}
{"sample_id": 6371, "db_id": "retail_world", "final": {"question": "What is the name of the supplier that supplies the most products to the company?", "sql": "SELECT T1.SupplierID FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID GROUP BY T1.SupplierID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["suppliers", "products"]}, "evidence": "name of the supplier refers to SupplierID; the most product refers to max(count(ProductID))"}
{"sample_id": 6372, "db_id": "retail_world", "final": {"question": "What are the names of the products that were ordered that have a unit price of no more than 5?", "sql": "SELECT DISTINCT T1.ProductName FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID WHERE T2.UnitPrice < 5", "source_tables": ["products", "order details"]}, "evidence": "unit price of no more than 5 refers to UnitPrice < 5; name of products refers to ProductName"}
{"sample_id": 6373, "db_id": "retail_world", "final": {"question": "What is the title of the employee with the highest number of territories in charge?", "sql": "SELECT T1.Title FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID GROUP BY T1.Title ORDER BY COUNT(T2.TerritoryID) DESC LIMIT 1", "source_tables": ["employeeterritories", "employees"]}, "evidence": "highest number of territories refers to max(TerritoryID)"}
{"sample_id": 6374, "db_id": "retail_world", "final": {"question": "What is the most ordered products by customers?", "sql": "SELECT T1.ProductID FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["products", "order details"]}, "evidence": "most ordered refers to max(count(ProductID)); product refers to ProductID"}
{"sample_id": 6375, "db_id": "retail_world", "final": {"question": "Which territories is the employee with a doctorate in charge of? List all of the territory descriptions.", "sql": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.TitleOfCourtesy = 'Dr.'", "source_tables": ["employeeterritories", "employees", "territories"]}, "evidence": "with a doctorate refers to TitleOfCourtesy = 'Dr.'"}
{"sample_id": 6376, "db_id": "retail_world", "final": {"question": "What are the territory descriptions of territories in the Eastern region?", "sql": "SELECT DISTINCT T1.TerritoryDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern' ORDER BY T1.TerritoryDescription", "source_tables": ["territories", "region"]}, "evidence": "in the Eastern region refers to RegionDescription = 'Eastern'"}
{"sample_id": 6377, "db_id": "retail_world", "final": {"question": "What is the average number of territories do each sales representative is in charge of?", "sql": "SELECT CAST(COUNT(T2.TerritoryID) AS REAL) / COUNT(DISTINCT T1.EmployeeID) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.Title = 'Sales Representative'", "source_tables": ["employeeterritories", "employees"]}, "evidence": "sales representative refers to Title = 'Sales Representative'; average number of territories = divide(count(TerritoryID) , count(EmployeeID)) where Title = 'Sales Representative'"}
{"sample_id": 6378, "db_id": "retail_world", "final": {"question": "Among the beverages, which product has the highest customer satisfaction?", "sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.CategoryName = 'Beverages' ORDER BY T1.ReorderLevel DESC LIMIT 1", "source_tables": ["categories", "products"]}, "evidence": "beverage refers to CategoryName = 'Beverages'; highest customer satisfaction refers to max(ReorderLevel)"}
{"sample_id": 6379, "db_id": "retail_world", "final": {"question": "What is the full name of the employee who handled the highest amount of orders?", "sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID GROUP BY T1.FirstName, T1.LastName ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["employees", "orders"]}, "evidence": "full name refers to FirstName LastName; highest amount of orders refers to max(count(OrderID))"}
{"sample_id": 6380, "db_id": "retail_world", "final": {"question": "How many products were ordered in the order with the highest freight?", "sql": "SELECT COUNT(T2.ProductID) FROM Orders AS T1 INNER JOIN 'Order Details' AS T2 ON T1.OrderID = T2.OrderID GROUP BY T2.ProductID ORDER BY COUNT(T1.Freight) DESC LIMIT 1", "source_tables": ["orders", "order details"]}, "evidence": "highest freight refers to max(Freight)"}
{"sample_id": 6381, "db_id": "retail_world", "final": {"question": "Among the seafood products, which product have the highest total production of the production?", "sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.CategoryName = 'Seafood' ORDER BY T1.UnitsInStock + T1.UnitsOnOrder DESC LIMIT 1", "source_tables": ["categories", "products"]}, "evidence": "seafood product refers to CategoryName = 'Seafood'; product refers to ProductID; highest total production refers to max(add(units in stock, units on order))"}
{"sample_id": 6382, "db_id": "retail_world", "final": {"question": "What is the difference in salary of the top 2 employees with the highest number of territories in charge?", "sql": "SELECT MAX(Salary) - MIN(Salary) FROM ( SELECT T1.Salary FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID GROUP BY T1.EmployeeID, T1.Salary ORDER BY COUNT(T2.TerritoryID) DESC LIMIT 2 ) T1", "source_tables": ["employeeterritories", "employees"]}, "evidence": "highest number of territories refers to max(TerritoryID); difference in salary = subtract(employeeA.Salary, employeeB.Salary)"}
{"sample_id": 6383, "db_id": "retail_world", "final": {"question": "What is the average price of products with more than fifty units in stock?", "sql": "SELECT SUM(UnitPrice) / COUNT(UnitPrice) FROM Products WHERE UnitsInStock > 50", "source_tables": ["products"]}, "evidence": "more than fifty units in stock refers to UnitsInStock > 50; average price = avg(UnitPrice where UnitsInStock > 50)"}
{"sample_id": 6384, "db_id": "retail_world", "final": {"question": "List the company names of customers from the city with the most customers.", "sql": "SELECT CompanyName FROM 'Customer and Suppliers by City' WHERE CITY = ( SELECT City FROM 'Customer and Suppliers by City' GROUP BY City ORDER BY COUNT(Relationship) DESC LIMIT 1 )", "source_tables": ["customer and suppliers by city"]}, "evidence": "most customers refers to max(count(Relationship))"}
{"sample_id": 6385, "db_id": "retail_world", "final": {"question": "Find and list the company name, company contact name, and contact title of customers from Madrid.", "sql": "SELECT CompanyName, ContactName, ContactTitle FROM Customers WHERE City = 'Madrid'", "source_tables": ["customers"]}, "evidence": "from Madrid refers to City = 'Madrid'"}
{"sample_id": 6386, "db_id": "retail_world", "final": {"question": "Give the full name and contact number of employees in descending order of age.", "sql": "SELECT FirstName, LastName, HomePhone FROM Employees ORDER BY BirthDate DESC", "source_tables": ["employees"]}, "evidence": "full name refers to FirstName LastName; contact number refers to HomePhone; descending order of age refers to order by BirthDate desc limit 1"}
{"sample_id": 6387, "db_id": "retail_world", "final": {"question": "Calculate the average price of products shipped to the UK.", "sql": "SELECT AVG(UnitPrice) AS avg FROM Invoices WHERE Country = 'UK'", "source_tables": ["invoices"]}, "evidence": "average price = divide(sum(UnitPrice) , count(ProductID)); the UK refers to Country = 'UK'"}
{"sample_id": 6388, "db_id": "retail_world", "final": {"question": "Among all the orders, which products sold for the most amount?", "sql": "SELECT ProductID FROM 'Order Details' GROUP BY ProductID ORDER BY SUM(Quantity) DESC LIMIT 1", "source_tables": ["order details"]}, "evidence": "the most amount refers to max(sum(Quantity))"}
{"sample_id": 6389, "db_id": "retail_world", "final": {"question": "List the name, address, and phone number of companies that supply products for more than thirty dollars per unit.", "sql": "SELECT T2.CompanyName, T2.Address, T2.Phone FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice > 30", "source_tables": ["suppliers", "products"]}, "evidence": "more than thirty dollars per unit refers to UnitPrice > 30"}
{"sample_id": 6390, "db_id": "retail_world", "final": {"question": "Among the customers, list customers' company names and addresses who paid more than average in freight.", "sql": "SELECT DISTINCT T1.CompanyName, T1.Address FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Freight > ( SELECT AVG(Freight) FROM Orders )", "source_tables": ["orders", "customers"]}, "evidence": "paid more than average in freight refers to Freight > divide(sum(Freight) , count(OrderID))"}
{"sample_id": 6391, "db_id": "retail_world", "final": {"question": "Find and list the full name of employees who are from the territory, Wilton.", "sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Wilton'", "source_tables": ["employeeterritories", "employees", "territories"]}, "evidence": "full name refers to FirstName LastName; Wilton refers to TerritoryDescription = 'Wilton'"}
{"sample_id": 6392, "db_id": "retail_world", "final": {"question": "List the names of non-US suppliers that have discontinued.", "sql": "SELECT DISTINCT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.Discontinued = 1 AND T2.Country != 'USA'", "source_tables": ["suppliers", "products"]}, "evidence": "non-US refers to Country <> 'USA'; discontinued refers to Discontinued = 1"}
{"sample_id": 6393, "db_id": "retail_world", "final": {"question": "List the top five most costly products in 1998.", "sql": "SELECT T3.ProductName FROM Orders AS T1 INNER JOIN 'Order Details' AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.OrderDate LIKE '1998%' ORDER BY T3.UnitPrice + T1.Freight DESC LIMIT 5", "source_tables": ["orders", "products", "order details"]}, "evidence": "most costly refers to max(add(unit price , Freight)); in 1998 refers to OrderDate > = '1998-01-01 00:00:00' AND OrderDate < '1999-01-01 00:00:00'"}
{"sample_id": 6394, "db_id": "retail_world", "final": {"question": "Of the customers who are from Canada, how many used Federal Shipping?", "sql": "SELECT COUNT(T3.CustomerID) FROM Shippers AS T1 INNER JOIN Orders AS T2 ON T1.ShipperID = T2.ShipVia INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T2.ShipName = 'Federal Shipping'", "source_tables": ["shippers", "orders", "customers"]}, "evidence": "from Canada refers to Country = 'Canada'; Federal Shipping refers to ShipName = 'Federal Shipping'"}
{"sample_id": 6395, "db_id": "retail_world", "final": {"question": "List the name of the top ten most ordered product's names in descending order of the number of orders.", "sql": "SELECT T3.ProductName FROM Orders AS T1 INNER JOIN 'Order Details' AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID GROUP BY T3.ProductName ORDER BY COUNT(*) DESC LIMIT 10", "source_tables": ["orders", "products", "order details"]}, "evidence": "most ordered refers to max(COUNT(OrderID))"}
{"sample_id": 6396, "db_id": "retail_world", "final": {"question": "Which supplier supplies the most amount of products?", "sql": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID GROUP BY T2.SupplierID, T2.CompanyName ORDER BY COUNT(T1.ProductName) DESC LIMIT 1", "source_tables": ["suppliers", "products"]}, "evidence": "supplier refers to SupplierID; most amount refers to max(count(ProductID))"}
{"sample_id": 6397, "db_id": "retail_world", "final": {"question": "Please list the full name and region of each employee in alphabetical order.", "sql": "SELECT DISTINCT T1.FirstName, T1.LastName, T4.RegionDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID ORDER BY T1.FirstName", "source_tables": ["employeeterritories", "employees", "territories", "region"]}, "evidence": "full name refers to FirstName LastName; region refers to RegionDescription"}
{"sample_id": 6398, "db_id": "retail_world", "final": {"question": "Which employee handled the most amount of orders in 1996? Give the full name, title, and address of this employee.", "sql": "SELECT FirstName, LastName, Title, address FROM Employees WHERE EmployeeID = ( SELECT T1.EmployeeID FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderDate BETWEEN '1996-01-01 00:00:00' AND '1997-01-01 00:00:00' GROUP BY T1.EmployeeID ORDER BY COUNT(T2.OrderID) DESC LIMIT 1 )", "source_tables": ["employees", "orders"]}, "evidence": "most amount of orders refers to max(count(OrderID)); in 1996 refers to OrderDate > = '1996-01-01 00:00:00' AND OrderDate < '1997-01-01 00:00:00'; full name refers to FirstName, LastName"}
{"sample_id": 6399, "db_id": "retail_world", "final": {"question": "What was the average unit price of products shipped via United Package in 1997?", "sql": "SELECT AVG(T2.UnitPrice) FROM Orders AS T1 INNER JOIN 'Order Details' AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Shippers AS T3 ON T1.ShipVia = T3.ShipperID WHERE T1.OrderDate LIKE '1997%' AND T3.CompanyName = 'United Package'", "source_tables": ["shippers", "orders", "order details"]}, "evidence": "via United Package refers to CompanyName = 'United Package'; in 1997 refers to OrderDate > = '1997-01-01 00:00:00' AND OrderDate < '1998-01-01 00:00:00'; average unit price = divide(sum(UnitPrice), count(ShipperID))"}
{"sample_id": 6400, "db_id": "retail_world", "final": {"question": "Calculate the percentage of shipping done through Speedy Express.", "sql": "SELECT CAST(COUNT(CASE WHEN T2.CompanyName = 'Speedy Express' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.ShipVia) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID", "source_tables": ["shippers", "orders"]}, "evidence": "through Speedy Express refers to CompanyName = 'Speedy Express'; percentage = divide(count(ShipperID where CompanyName = 'Speedy Express') , count(ShipperID)) * 100%"}
{"sample_id": 6401, "db_id": "retail_world", "final": {"question": "Indicate the courtesy title of the 3 employees who have the lowest salary.", "sql": "SELECT TitleOfCourtesy FROM Employees ORDER BY Salary LIMIT 3", "source_tables": ["employees"]}, "evidence": "courtesy title refers to TitleOfCourtesy; the lowest salary refers to MIN(Salary);"}
{"sample_id": 6402, "db_id": "retail_world", "final": {"question": "What is the last name of the employees who must report to the Vice President of Sales?", "sql": "SELECT LastName FROM Employees WHERE ReportsTo = ( SELECT EmployeeID FROM Employees WHERE Title = 'Vice President, Sales' )", "source_tables": ["employees"]}, "evidence": "report to represents a hierarchical relationship where the person being reported to is usually the direct supervisor of the reporter; Vice President of Sales refers to Title = 'Vice President, Sales';"}
{"sample_id": 6403, "db_id": "retail_world", "final": {"question": "What is the highest total price paid for an order?", "sql": "SELECT UnitPrice * Quantity * (1 - Discount) AS THETOP FROM 'Order Details' ORDER BY UnitPrice * Quantity * (1 - Discount) DESC LIMIT 1", "source_tables": ["order details"]}, "evidence": "the highest total price paid for an order can be calculated as MAX(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1-Discount)));"}
{"sample_id": 6404, "db_id": "retail_world", "final": {"question": "Which 3 products are produced in greater quantity?", "sql": "SELECT ProductName FROM Products ORDER BY UnitsInStock + UnitsOnOrder DESC LIMIT 3", "source_tables": ["products"]}, "evidence": "3 products produced in greater quantity refer to MAX(SUM(UnitsInStock, UnitsOnOrder)) Limit 3;"}
{"sample_id": 6405, "db_id": "retail_world", "final": {"question": "Of the 10 products with the highest unit price, identify by their ID the ones that have generated the least satisfaction.", "sql": "SELECT ProductID FROM Products ORDER BY ReorderLevel ASC, UnitPrice DESC LIMIT 1", "source_tables": ["products"]}, "evidence": "High reorder level generally means high user satisfaction of the product and vice versa; the least satisfaction refers to MIN(ReorderLevel); the highest unit price refers to MAX(UnitPrice);"}
{"sample_id": 6406, "db_id": "retail_world", "final": {"question": "How many non-discontinued products are there in the dairy category?", "sql": "SELECT COUNT(T1.CategoryID) FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.CategoryName = 'Dairy Products' AND T2.Discontinued = 0", "source_tables": ["categories", "products"]}, "evidence": "non-discontinued products in the dairy category refer to ProductID where Discontinued = 0 and CategoryName = 'Dairy Products';"}
{"sample_id": 6407, "db_id": "retail_world", "final": {"question": "What territories is the Inside Sales Coordinator in charge of?", "sql": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.Title = 'Inside Sales Coordinator'", "source_tables": ["employeeterritories", "employees", "territories"]}, "evidence": "territories refer to TerritoryDescription; Title = 'Inside Sales Coordinator';"}
{"sample_id": 6408, "db_id": "retail_world", "final": {"question": "Indicate the name of the companies that have freighted products for a value greater than 2,000,000.", "sql": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Freight > 2000000", "source_tables": ["orders", "customers"]}, "evidence": "freighted products for a value greater than 2,000,000 refer to Freight > 2000000; name of companies refers to CompanyName;"}
{"sample_id": 6409, "db_id": "retail_world", "final": {"question": "Through which companies have products been shipped the most times to the city of Aachen?", "sql": "SELECT T2.CompanyName FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.ShipCity = 'Aachen' GROUP BY T2.CompanyName ORDER BY COUNT(T1.ShipVia) DESC LIMIT 1", "source_tables": ["shippers", "orders"]}, "evidence": "shipped the most times refer to MAX(COUNT(ShipVia)); city of Aachen refers to ShipCity = 'Aache'; companies refers to CompanyName;"}
{"sample_id": 6410, "db_id": "retail_world", "final": {"question": "List the full name of all employees who work in the Northern region.", "sql": "SELECT DISTINCT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T4.RegionDescription = 'Northern'", "source_tables": ["employeeterritories", "employees", "territories", "region"]}, "evidence": "full names = FirstName, LastName; Northern region refers to RegionDescription = 'Northern';"}
{"sample_id": 6411, "db_id": "retail_world", "final": {"question": "What is the name of the contact person of the Pavlova supplier company?", "sql": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Pavlova'", "source_tables": ["suppliers", "products"]}, "evidence": "contact person refers to ContactName; Pavlova is the name of the product;"}
{"sample_id": 6412, "db_id": "retail_world", "final": {"question": "Indicate the name of the products that have been shipped to the city of Paris.", "sql": "SELECT T3.ProductName FROM Orders AS T1 INNER JOIN 'Order Details' AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.ShipCity = 'Paris'", "source_tables": ["orders", "products", "order details"]}, "evidence": "shipped to the city of Paris refers to ShipCity = 'Paris';"}
{"sample_id": 6413, "db_id": "retail_world", "final": {"question": "What product is the least shipped to the postal code 28023?", "sql": "SELECT T4.ProductName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN 'Order Details' AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID WHERE T1.PostalCode = 28023 ORDER BY T3.Quantity LIMIT 1", "source_tables": ["order details", "orders", "products", "customers"]}, "evidence": "the least shipped product refers ProductName where MIN(Quantity);"}
{"sample_id": 6414, "db_id": "retail_world", "final": {"question": "What is the full name of the employee in charge of the Southern region who is to report to Andrew Fuller?", "sql": "SELECT DISTINCT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T4.RegionDescription = 'Southern' AND T1.ReportsTo = ( SELECT EmployeeID FROM Employees WHERE FirstName = 'Andrew' AND LastName = 'Fuller' )", "source_tables": ["employeeterritories", "employees", "territories", "region"]}, "evidence": "full names = FirstName, LastName; report to represents a hierarchical relationship where the person being reported to is usually the direct supervisor of the reporter; Andrew Fuller refers to Employees WHERE FirstName = 'Andrew' AND LastName = 'Fuller'; Southern region refers to RegionDescription = 'Southern';"}
{"sample_id": 6415, "db_id": "retail_world", "final": {"question": "On what date did the Du monde entier company request that 9 units of Filo Mix be sent to it?", "sql": "SELECT T2.OrderDate FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN 'Order Details' AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID WHERE T4.ProductName = 'Filo Mix' AND T3.Quantity = 9 AND T1.CompanyName = 'Du monde entier'", "source_tables": ["order details", "orders", "products", "customers"]}, "evidence": "9 units of Filo Mix refer to ProductName where Quantity = 9; Du monde entier is the name of the customer; date refers to OrderDate;"}
{"sample_id": 6416, "db_id": "retail_world", "final": {"question": "Indicate the name of the categories to which the products of order number 10933 belong.", "sql": "SELECT T3.CategoryName FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Categories AS T3 ON T1.CategoryID = T3.CategoryID WHERE T2.OrderID = 10933", "source_tables": ["categories", "products", "order details"]}, "evidence": "order number 10933 refers to OrderID = 10933;"}
{"sample_id": 6417, "db_id": "retail_world", "final": {"question": "What is the phone number for the employee in charge of the Portsmouth territory?", "sql": "SELECT T1.HomePhone FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Portsmouth'", "source_tables": ["employeeterritories", "employees", "territories"]}, "evidence": "phone refers to HomePhone; Portsmouth territory refers to TerritoryDescription = 'Portsmouth';"}
{"sample_id": 6418, "db_id": "retail_world", "final": {"question": "What is the average quantity of product that have been shipped by Federal Shipping in November 1996?", "sql": "SELECT CAST(SUM(T2.Quantity) AS REAL) / COUNT(T2.OrderID) FROM Orders AS T1 INNER JOIN 'Order Details' AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Shippers AS T3 ON T1.ShipVia = T3.ShipperID WHERE T1.ShippedDate LIKE '1996-11%' AND T3.CompanyName = 'Federal Shipping'", "source_tables": ["shippers", "orders", "order details"]}, "evidence": "Federal Shipping refers to CompanyName = 'Federal Shipping'; DIVIDE(SUM(Quantity), COUNT(ProductID)) where CompanyName = 'Federal Shipping' and ShippedDate > = '1996-11-01 00:00:00' AND ShippedDate < '1996-12-01 00:00:00';"}
{"sample_id": 6419, "db_id": "retail_world", "final": {"question": "Of all the shipments made by United Package throughout the year 1996, what percentage correspond to the month of September?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.ShippedDate LIKE '1996-09%' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.ShipVia) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'United Package' AND T1.ShippedDate LIKE '1996%'", "source_tables": ["shippers", "orders"]}, "evidence": "DIVIDE(COUNT(OrderID where CompanyName = 'United Package' and ShippedDate > = '1996-09-01 00:00:00' AND ShippedDate < '1996-09-30 00:00:00')), (COUNT(OrderID where CompanyName = 'United Package' and ShippedDate > = '1996-01-01 00:00:00' AND ShippedDate < '1997-01-01 00:00:00')) as percentage; \n"}
{"sample_id": 6420, "db_id": "retail_world", "final": {"question": "How many owners are located in Mexico?", "sql": "SELECT COUNT(ContactTitle) FROM Customers WHERE Country = 'Mexico' AND ContactTitle = 'Owner'", "source_tables": ["customers"]}, "evidence": "owners in Mexico refer to ContactTitle where Country = 'Mexico';"}
{"sample_id": 6421, "db_id": "retail_world", "final": {"question": "What is the full address of Andr Fonseca?", "sql": "SELECT Address, City, Region, PostalCode, Country FROM Customers WHERE ContactName = 'Andr Fonseca'", "source_tables": ["customers"]}, "evidence": "full address includes Address, City, Region, PostalCode and Country; ContactName = 'Andr Fonseca';"}
{"sample_id": 6422, "db_id": "retail_world", "final": {"question": "What are the companies that have the same phone area code as 171?", "sql": "SELECT CompanyName FROM Customers WHERE Phone LIKE '(171)%'", "source_tables": ["customers"]}, "evidence": "phone area code as 171 refers to Phone LIKE '(171)%'; companies refer to CompanyName;"}
{"sample_id": 6423, "db_id": "retail_world", "final": {"question": "What is the difference in the number of employees from the UK and the USA who work as sales representatives?", "sql": "SELECT ( SELECT COUNT(Title) FROM Employees WHERE Country = 'UK' AND Title = 'Sales Representative' ) - ( SELECT COUNT(Title) FROM Employees WHERE Country = 'USA' AND Title = 'Sales Representative' ) AS DIFFERENCE", "source_tables": ["employees"]}, "evidence": "SUBTRACT(COUNT(EmployeeID where Country = 'UK' and Title = 'sales representative'), COUNT(EmployeeID where Country = 'USA' and Title = 'sales representative'));"}
{"sample_id": 6424, "db_id": "retail_world", "final": {"question": "How many sales associates are located in Sao Paulo, Brazil?", "sql": "SELECT COUNT(CustomerID) FROM Customers WHERE City = 'Sao Paulo' AND Country = 'Brazil' AND ContactTitle = 'Sales Associate'", "source_tables": ["customers"]}, "evidence": "sales associates refer to ContactTitle; Sao Paulo is the name of the city in the country Brazil;"}
{"sample_id": 6425, "db_id": "retail_world", "final": {"question": "What is the family name of the employee who shipped the order 10521 to CACTU?", "sql": "SELECT T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10521 AND T2.CustomerID = 'CACTU'", "source_tables": ["employees", "orders"]}, "evidence": "order 10521 refers to OrderID = 10521; CustomerID = 'CACTU'; family name refers to LastName;"}
{"sample_id": 6426, "db_id": "retail_world", "final": {"question": "What is the shipping cost for order number 10692 from the company Alfreds Futterkiste?", "sql": "SELECT T2.Freight FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.OrderID = 10692 AND T1.CompanyName = 'Alfreds Futterkiste'", "source_tables": ["orders", "customers"]}, "evidence": "Alfreds Futterkiste is the name of the company; order number 10692 refers to OrderID = 10692;"}
{"sample_id": 6427, "db_id": "retail_world", "final": {"question": "What is the shipping company for order number 10558?", "sql": "SELECT T2.CompanyName FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.OrderID = 10558", "source_tables": ["shippers", "orders"]}, "evidence": "order number 10558 refers to OrderID = 10558;"}
{"sample_id": 6428, "db_id": "retail_world", "final": {"question": "Please list any three order numbers that have been shipped using Speedy Express.", "sql": "SELECT T1.OrderID FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Speedy Express' LIMIT 3", "source_tables": ["shippers", "orders"]}, "evidence": "Speedy Express is the name of the shipping company; three order numbers refer to OrderID LIMIT 3;"}
{"sample_id": 6429, "db_id": "retail_world", "final": {"question": "What are the products that belong to the beverage category?", "sql": "SELECT T2.ProductName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.CategoryName = 'Beverages'", "source_tables": ["categories", "products"]}, "evidence": "products belong to beverage category refer to ProductName where CategoryName = 'beverage';"}
{"sample_id": 6430, "db_id": "retail_world", "final": {"question": "What is the description of the category that tofu belongs to?", "sql": "SELECT T1.Description FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.ProductName = 'tofu'", "source_tables": ["categories", "products"]}, "evidence": "tofu is the name of the product;"}
{"sample_id": 6431, "db_id": "retail_world", "final": {"question": "Which company supplies Gula Malacca?", "sql": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Gula Malacca'", "source_tables": ["suppliers", "products"]}, "evidence": "Gula Malacca is the name of the product; company refers to CompanyName;"}
{"sample_id": 6432, "db_id": "retail_world", "final": {"question": "What are the products that are supplied by Aux joyeux ecclsiastiques?", "sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Aux joyeux ecclsiastiques'", "source_tables": ["suppliers", "products"]}, "evidence": "Aux joyeux ecclsiastiques is the name of supply company; products refer to ProductName;"}
{"sample_id": 6433, "db_id": "retail_world", "final": {"question": "How much per unit of Konbu does Mayumi's charge?", "sql": "SELECT T1.UnitPrice FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName LIKE 'Mayumi%' AND T1.ProductName = 'Konbu'", "source_tables": ["suppliers", "products"]}, "evidence": "Mayumi's is the name of the company; how much per unit of Konbu refers to UnitPrice where ProductName = 'Konbu';"}
{"sample_id": 6434, "db_id": "retail_world", "final": {"question": "Who is the person to contact to get Camembert Pierrot?", "sql": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Camembert Pierrot'", "source_tables": ["suppliers", "products"]}, "evidence": "Camembert Pierrot is the name of the product; person to contact refers to ContactName;"}
{"sample_id": 6435, "db_id": "retail_world", "final": {"question": "Please name any three products that have been discontinued in the meat or poultry category.", "sql": "SELECT T2.ProductName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.Discontinued = 1 AND T1.CategoryName = 'Meat/Poultry' LIMIT 3", "source_tables": ["categories", "products"]}, "evidence": "three products that have been discontinued refer to ProductName LIMIT 3 where Discontinued = 1; CategoryName = 'Meat/Poultry';"}
{"sample_id": 6436, "db_id": "retail_world", "final": {"question": "Please name any two products that have the highest satisfaction levels among users of Heli Swaren GmbH & Co. KG.", "sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Heli Swaren GmbH & Co. KG' ORDER BY T1.ReorderLevel DESC LIMIT 2", "source_tables": ["suppliers", "products"]}, "evidence": "High reorder level generally means high user satisfaction; the highest satisfaction levels refer to MAX(ReorderLevel); two products refer to ProductName LIMIT 2; CompanyName = 'Heli Swaren GmbH & Co. KG';"}
{"sample_id": 6437, "db_id": "retail_world", "final": {"question": "Who is the one representing the company \"Heli Swaren GmbH & Co. KG\"?", "sql": "SELECT ContactName FROM Suppliers WHERE CompanyName = 'Heli Swaren GmbH & Co. KG'", "source_tables": ["suppliers"]}, "evidence": "Heli Swaren GmbH & Co. KG is the name of the company; who is representing refers to ContactName;"}
{"sample_id": 6438, "db_id": "retail_world", "final": {"question": "From which country is the company \"Drachenblut Delikatessen\" from?", "sql": "SELECT Country FROM Customers WHERE CompanyName = 'Drachenblut Delikatessen'", "source_tables": ["customers"]}, "evidence": "Drachenblut Delikatessen is the company name;"}
{"sample_id": 6439, "db_id": "retail_world", "final": {"question": "How many territories are there?", "sql": "SELECT COUNT(TerritoryID) FROM Territories", "source_tables": ["territories"]}, "evidence": ""}
{"sample_id": 6440, "db_id": "retail_world", "final": {"question": "What is the largest total price for an order?", "sql": "SELECT SUM(UnitPrice) FROM 'Order Details' GROUP BY OrderID ORDER BY SUM(UnitPrice) DESC LIMIT 1", "source_tables": ["order details"]}, "evidence": "the largest total price for an order can be calculated as MAX(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1-Discount)));"}
{"sample_id": 6441, "db_id": "retail_world", "final": {"question": "Which product is the most expensive?", "sql": "SELECT ProductName FROM Products WHERE UnitPrice = ( SELECT MAX(UnitPrice) FROM Products )", "source_tables": ["products"]}, "evidence": "most expensive product refers to ProductName where MAX(UnitPrice);"}
{"sample_id": 6442, "db_id": "retail_world", "final": {"question": "How many of the orders are shipped to France?", "sql": "SELECT COUNT(ShipCountry) FROM Orders WHERE ShipCountry = 'France'", "source_tables": ["orders"]}, "evidence": "shipped to France refers to ShipCountry = 'France';"}
{"sample_id": 6443, "db_id": "retail_world", "final": {"question": "Which region does Hoffman Estates belong to?", "sql": "SELECT T2.RegionDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T1.TerritoryDescription = 'Hoffman Estates'", "source_tables": ["territories", "region"]}, "evidence": "Hoffman Estates refer to TerritoryDescription;"}
{"sample_id": 6444, "db_id": "retail_world", "final": {"question": "What is the homepage link for the company that supplies the product \"Thringer Rostbratwurst\"?", "sql": "SELECT T2.HomePage FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Thringer Rostbratwurst'", "source_tables": ["suppliers", "products"]}, "evidence": "ProductName = 'Thringer Rostbratwurst';"}
{"sample_id": 6445, "db_id": "retail_world", "final": {"question": "List the first names of the employees who take the orders that ship to the city of \"Reims\".", "sql": "SELECT DISTINCT T1.FirstName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.ShipCity = 'Reims'", "source_tables": ["employees", "orders"]}, "evidence": "ship to the city of \"Reims\" refers to ShipCity = Reims';"}
{"sample_id": 6446, "db_id": "retail_world", "final": {"question": "What is the largest quantity of \"Manjimup Dried Apples\" for an order?", "sql": "SELECT T2.Quantity FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T2.ProductID = T1.ProductID WHERE T1.ProductName = 'Manjimup Dried Apples' ORDER BY T2.Quantity DESC LIMIT 1", "source_tables": ["products", "order details"]}, "evidence": "the largest quantity of \"Manjimup Dried Apples\" refers to MAX(Quantity) where ProductName = 'Manjimup Dried Apples';"}
{"sample_id": 6447, "db_id": "retail_world", "final": {"question": "How many orders were shipped by \"Speedy Express\"?", "sql": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Speedy Express'", "source_tables": ["shippers", "orders"]}, "evidence": "\"Speedy Express\" is the name of the shipping company; orders refer to OrderID;"}
{"sample_id": 6448, "db_id": "retail_world", "final": {"question": "Make a list of all the territories in the Southern region.", "sql": "SELECT DISTINCT T1.TerritoryDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Southern'", "source_tables": ["territories", "region"]}, "evidence": "territories in the Southern region refer to TerritoryDescription WHERE RegionDescription = 'Southern';"}
{"sample_id": 6449, "db_id": "retail_world", "final": {"question": "What are the prices on cheese products?", "sql": "SELECT T2.UnitPrice FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.Description = 'Cheeses'", "source_tables": ["categories", "products"]}, "evidence": "prices on cheese refer to UnitPrice WHERE Description = 'Cheeses';"}
{"sample_id": 6450, "db_id": "retail_world", "final": {"question": "How many orders did \"Laughing Bacchus Wine Cellars\" make?", "sql": "SELECT COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CompanyName = 'Laughing Bacchus Wine Cellars'", "source_tables": ["orders", "customers"]}, "evidence": "\"Laughing Bacchus Wine Cellars\" is the name of the company; orders refer to OrderID;"}
{"sample_id": 6451, "db_id": "retail_world", "final": {"question": "List all the products that were shipped to Starenweg 5.", "sql": "SELECT T3.ProductName FROM Orders AS T1 INNER JOIN 'Order Details' AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.ShipAddress = 'Starenweg 5' GROUP BY T3.ProductName", "source_tables": ["orders", "products", "order details"]}, "evidence": "products shipped to Starenweg 5 refer to ProductName where ShipAddress = 'Starenweg 5';"}
{"sample_id": 6452, "db_id": "retail_world", "final": {"question": "What are the products by the company \"Bigfoot Breweries\"?", "sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Bigfoot Breweries'", "source_tables": ["suppliers", "products"]}, "evidence": "Bigfoot Breweries is the name of the company; products refer to ProductName;"}
{"sample_id": 6453, "db_id": "retail_world", "final": {"question": "What are the names of Robert King's territories?", "sql": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.LastName = 'King' AND T1.FirstName = 'Robert'", "source_tables": ["employeeterritories", "employees", "territories"]}, "evidence": "Robert King is a full name of an employee where LastName = 'King' AND FirstName = 'Robert'; names of territories refer to TerritoryDescription;"}
{"sample_id": 6454, "db_id": "retail_world", "final": {"question": "Provide the name of the contact person who made the orders that shipped to Switzerland.", "sql": "SELECT T1.ContactName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.ShipCountry = 'Switzerland' GROUP BY T1.ContactName", "source_tables": ["orders", "customers"]}, "evidence": "shipped to Switzerland refers to ShipCountry = 'Switzerland'; contact person refers to Customers;"}
{"sample_id": 6455, "db_id": "retail_world", "final": {"question": "What proportion of orders are taken by the Sales Representative?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.Title = 'Sales Representative' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID", "source_tables": ["employees", "orders"]}, "evidence": "DIVIDE(COUNT(OrderID where Title = 'Sales Representative'), COUNT(OrderID)) as percentage;"}
{"sample_id": 6456, "db_id": "retail_world", "final": {"question": "Among the USA employess, how many of them has PhD title of courtesy?", "sql": "SELECT COUNT(Country) FROM Employees WHERE TitleOfCourtesy = 'Dr.' AND Country = 'USA'", "source_tables": ["employees"]}, "evidence": "\"USA\" is the Country; PhD title of courtesy refers to TitleOfCourtesy = 'Dr.'"}
{"sample_id": 6457, "db_id": "retail_world", "final": {"question": "What is the average salary for employees from ID 1 to 9?", "sql": "SELECT AVG(Salary) FROM Employees WHERE EmployeeID BETWEEN 1 AND 9", "source_tables": ["employees"]}, "evidence": "ID 1 to 9 refers to EmployeeID BETWEEN 1 AND 9; Average salary = AVG(Salary)"}
{"sample_id": 6458, "db_id": "retail_world", "final": {"question": "Calculate the total salary for employees from UK.", "sql": "SELECT SUM(Salary) FROM Employees WHERE Country = 'UK'", "source_tables": ["employees"]}, "evidence": "\"UK\" is the Country; total salary refers to Sum(Salary)"}
{"sample_id": 6459, "db_id": "retail_world", "final": {"question": "Is (206) 555-1189 the home phone number for Laura Callahan?", "sql": "SELECT CASE WHEN HomePhone = '(206) 555-1189' THEN 'YES' ELSE 'NO' END FROM Employees WHERE FirstName = 'Laura' AND LastName = 'Callahan'", "source_tables": ["employees"]}, "evidence": "\"Laura Callahan\" refers to FirstName = 'Laura AND LastName = 'Callahan"}
{"sample_id": 6460, "db_id": "retail_world", "final": {"question": "Write down the notes of employee with the highest salary.", "sql": "SELECT Notes FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )", "source_tables": ["employees"]}, "evidence": "highest salary refers to Max(Salary)"}
{"sample_id": 6461, "db_id": "retail_world", "final": {"question": "List down the customer ids who placed order with Michael Suyama.", "sql": "SELECT T2.CustomerID FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Michael' AND T1.LastName = 'Suyama'", "source_tables": ["employees", "orders"]}, "evidence": ""}
{"sample_id": 6462, "db_id": "retail_world", "final": {"question": "Where are the ship countries of orders placed by Janet Leverling?", "sql": "SELECT DISTINCT T2.ShipCountry FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Janet' AND T1.LastName = 'Leverling'", "source_tables": ["employees", "orders"]}, "evidence": ""}
{"sample_id": 6463, "db_id": "retail_world", "final": {"question": "How many orders have Margaret Peacock placed?", "sql": "SELECT COUNT(T2.EmployeeID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Margaret' AND T1.LastName = 'Peacock'", "source_tables": ["employees", "orders"]}, "evidence": ""}
{"sample_id": 6464, "db_id": "retail_world", "final": {"question": "Calculate the average salary per order for Andrew Fuller.", "sql": "SELECT CAST(SUM(T1.Salary) AS REAL) / COUNT(T2.EmployeeID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Andrew' AND T1.LastName = 'Fuller'", "source_tables": ["employees", "orders"]}, "evidence": "average salary = AVG(Salary)"}
{"sample_id": 6465, "db_id": "retail_world", "final": {"question": "What are the product names of Exotic Liquids?", "sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Exotic Liquids'", "source_tables": ["suppliers", "products"]}, "evidence": "\"Exotic Liquids\" is the CompanyName"}
{"sample_id": 6466, "db_id": "retail_world", "final": {"question": "List down the quantity per unit for products of Tokyo Traders.", "sql": "SELECT T1.QuantityPerUnit FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Tokyo Traders'", "source_tables": ["suppliers", "products"]}, "evidence": "\"Tokyo Traders\" is the CompanyName"}
{"sample_id": 6467, "db_id": "retail_world", "final": {"question": "How many products have been discountinued by New Orleans Cajun Delights?", "sql": "SELECT COUNT(T1.Discontinued) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'New Orleans Cajun Delights'", "source_tables": ["suppliers", "products"]}, "evidence": "\"New Orleans Cajun Delights\" is the CompanyName; discontinued refers to Discontinued = 1"}
{"sample_id": 6468, "db_id": "retail_world", "final": {"question": "Please calculate the average unit price for products of Formaggi Fortini s.r.l.", "sql": "SELECT SUM(T1.UnitPrice) / COUNT(T1.SupplierID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Formaggi Fortini s.r.l.'", "source_tables": ["suppliers", "products"]}, "evidence": "\"Formaggi Fortini s.r.l.\" is the CompanyName; average unit price = AVG(UnitPrice)"}
{"sample_id": 6469, "db_id": "retail_world", "final": {"question": "Calculate the total products that are supplied by Japan suppliers.", "sql": "SELECT COUNT(T1.SupplierID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Japan'", "source_tables": ["suppliers", "products"]}, "evidence": "Japan Supplier refers to Country = 'Japan'; total product refers to Count (ProductName)"}
{"sample_id": 6470, "db_id": "retail_world", "final": {"question": "What is the contact name for product Teatime Chocolate Biscuits?", "sql": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Teatime Chocolate Biscuits'", "source_tables": ["suppliers", "products"]}, "evidence": "\"Teatime Chocolate Biscuits\" is the ProductName"}
{"sample_id": 6471, "db_id": "retail_world", "final": {"question": "List down the company names that have the highest reorder level.", "sql": "SELECT DISTINCT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ReorderLevel = ( SELECT MAX(ReorderLevel) FROM Products )", "source_tables": ["suppliers", "products"]}, "evidence": "Highest reorder level refers to Max(ReorderLevel)"}
{"sample_id": 6472, "db_id": "retail_world", "final": {"question": "What is the contact title for the person who supplied a product that is 10 boxes x 12 pieces.", "sql": "SELECT T2.ContactTitle FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.QuantityPerUnit = '10 boxes x 12 pieces'", "source_tables": ["suppliers", "products"]}, "evidence": "\"10 boxes x 12 pieces\" is the QuantityPerUnit"}
{"sample_id": 6473, "db_id": "retail_world", "final": {"question": "What is the total units on order from Exotic Liquids?", "sql": "SELECT SUM(T1.UnitsOnOrder) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Exotic Liquids'", "source_tables": ["suppliers", "products"]}, "evidence": "\"Exotic Liquids\" is the CompanyName; total unit on order = Sum(UnitsOnOrder)"}
{"sample_id": 6474, "db_id": "retail_world", "final": {"question": "Calculate the percentage of products supplied by Gai pturage over all products.", "sql": "SELECT CAST(COUNT(CASE WHEN T2.CompanyName = 'Gai pturage' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.SupplierID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID", "source_tables": ["suppliers", "products"]}, "evidence": "\"Gai pturage\" is the CompanyName; Percentage = Divide (Count(SupplierID where CompanyName = 'Gai pturage'), Count (SupplierID)) * 100"}
{"sample_id": 6475, "db_id": "retail_world", "final": {"question": "List the product ID of the top five products, by descending order, the number of quantities in stock.", "sql": "SELECT ProductID FROM Products ORDER BY UnitsInStock DESC LIMIT 5", "source_tables": ["products"]}, "evidence": "by descending in number of quantity in stock refers to max(UnitsInStock)"}
{"sample_id": 6476, "db_id": "retail_world", "final": {"question": "Among the products, how many of them were discontinued in production?", "sql": "SELECT COUNT(*) FROM Products WHERE Discontinued = 1", "source_tables": ["products"]}, "evidence": "discontinued refers to Discontinued = 1"}
{"sample_id": 6477, "db_id": "retail_world", "final": {"question": "Give me the address, home phone and salary of the Sales Manager.", "sql": "SELECT Address, HomePhone, Salary FROM Employees WHERE Title = 'Sales Manager'", "source_tables": ["employees"]}, "evidence": "\"Sales Manage\" is the Title"}
{"sample_id": 6478, "db_id": "retail_world", "final": {"question": "What is the full name of the Vice President of Sales. Give me the URL of his/her photo.", "sql": "SELECT FirstName, LastName FROM Employees WHERE Title = 'Vice President, Sales'", "source_tables": ["employees"]}, "evidence": "\"Vice Present of Sales\" refers to Title = 'Vice President, Sales'; full name refers to FirstName, LastName; url of photo refers to PhotoPath"}
{"sample_id": 6479, "db_id": "retail_world", "final": {"question": "Write down the top ten companies with the most total sales by amount.", "sql": "SELECT CompanyName FROM 'Sales Totals by Amount' ORDER BY SaleAmount DESC LIMIT 10", "source_tables": ["sales totals by amount"]}, "evidence": "most total sales refers to Max(SaleAmount); companies refers to CompanyName"}
{"sample_id": 6480, "db_id": "retail_world", "final": {"question": "What is the average sales for each categories?", "sql": "SELECT AVG(ProductSales) FROM 'Sales by Category' GROUP BY CategoryName", "source_tables": ["sales by category"]}, "evidence": "average sales = AVG(ProductSales)"}
{"sample_id": 6481, "db_id": "retail_world", "final": {"question": "Compute the total order quantity for Uncle Bob's Organic Dried Pears so far.", "sql": "SELECT SUM(T2.Quantity) FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName LIKE 'Uncle Bob%s Organic Dried Pears'", "source_tables": ["products", "order details"]}, "evidence": "\"Uncle Bob's Organic Dried Pears\" is the ProductName; total order quantity refers to Sum(Quantity)"}
{"sample_id": 6482, "db_id": "retail_world", "final": {"question": "Among the seafoods, how many of them have an order quantity of more than 50?", "sql": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Categories AS T3 ON T1.CategoryID = T3.CategoryID WHERE T3.CategoryName = 'Seafood' AND T2.Quantity > 50", "source_tables": ["categories", "products", "order details"]}, "evidence": "\"Seafood\" is the CategoryName; order quantity of more than 50 refers to Quantity > 50"}
{"sample_id": 6483, "db_id": "retail_world", "final": {"question": "List the products whose supplier is Pavlova, Ltd. Please include the product ID and re-order level.", "sql": "SELECT T1.ProductName, T1.ProductID, T1.ReorderLevel FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Pavlova, Ltd.'", "source_tables": ["suppliers", "products"]}, "evidence": "\"Pavlova, Ltd\" is the CompanyName; products refers to ProductName"}
{"sample_id": 6484, "db_id": "retail_world", "final": {"question": "Who are the suppliers of the discontinued products?", "sql": "SELECT DISTINCT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.Discontinued = 1", "source_tables": ["suppliers", "products"]}, "evidence": "discontinued product refers to Discontinued = 1; supplier refers to CompanyName"}
{"sample_id": 6485, "db_id": "retail_world", "final": {"question": "Among the employees, give me the full names of those who have less than 4 territories.", "sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.EmployeeID < 4", "source_tables": ["employeeterritories", "employees"]}, "evidence": "less than 4 territories refers to EmployeeID where Count(TerritoryID) < 4"}
{"sample_id": 6486, "db_id": "retail_world", "final": {"question": "How many employees have territories in the Eastern region?", "sql": "SELECT COUNT(DISTINCT T1.FirstName) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T4.RegionDescription = 'Eastern'", "source_tables": ["employeeterritories", "employees", "territories", "region"]}, "evidence": "\"Eastern\" is the RegionDescription"}
{"sample_id": 6487, "db_id": "retail_world", "final": {"question": "From 1/3/97 to 8/10/97, how many orders were shipped via Federal Shipping?", "sql": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Federal Shipping' AND T1.ShippedDate BETWEEN '1997-03-01 00:00:00' AND '1997-10-08 23:59:59'", "source_tables": ["shippers", "orders"]}, "evidence": "from 1/3/97 to 8/10/97 refers to 1997-03-01 < ShippedDate < 1997-10-08; 'Federal Shipping' is the CompanyName"}
{"sample_id": 6488, "db_id": "retail_world", "final": {"question": "Tally the customer ID of orders that were shipped to Brazil by Margaret Peacock from 3/31/97 to 12/10/97.", "sql": "SELECT DISTINCT T2.CustomerID FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.LastName = 'Peacock' AND T1.FirstName = 'Margaret' AND T2.ShipCountry = 'Brazil' AND T2.ShippedDate BETWEEN '1997-03-31 00:00:00' AND '1997-12-10 23:59:59'", "source_tables": ["employees", "orders"]}, "evidence": "\"Brazil\" is the ShipCountry; from 3/31/97 to 12/10/97 refers to 1997-03-31 < ShippedDate < 1997-10-12"}
{"sample_id": 6489, "db_id": "retail_world", "final": {"question": "What is the re-order level of products that have an order quantity of 1?", "sql": "SELECT T1.ReorderLevel FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Quantity = 1", "source_tables": ["products", "order details"]}, "evidence": "order quantity of 1 refers to Quantity = 1"}
{"sample_id": 6490, "db_id": "retail_world", "final": {"question": "What is the stock value of every condiments?", "sql": "SELECT T1.UnitPrice * T1.UnitsInStock FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID", "source_tables": ["categories", "products"]}, "evidence": "\"Condiments\" is the CategoryName; Stock value = MULTIPLY( UnitPrice, UnitInStock)"}
{"sample_id": 6491, "db_id": "retail_world", "final": {"question": "How many territories are owned by Anne Dodsworth?", "sql": "SELECT COUNT(T2.TerritoryID) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Anne' AND T1.LastName = 'Dodsworth'", "source_tables": ["employeeterritories", "employees"]}, "evidence": ""}
{"sample_id": 6492, "db_id": "retail_world", "final": {"question": "Which of the American customers have experienced a delay in the shipment and how long was the longest?", "sql": "SELECT T1.CompanyName, TIMESTAMPDIFF(DAY, T2.ShippedDate, T2.RequiredDate) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Country = 'USA' AND TIMESTAMPDIFF(DAY, T2.ShippedDate, T2.RequiredDate) < 0", "source_tables": ["orders", "customers"]}, "evidence": "\"American\" refers to Country = 'USA'; longest delay in shipment refers to Max(Subtract(RequiredDate, ShippedDate)); customer refers to CustomerID"}
{"sample_id": 6493, "db_id": "retail_world", "final": {"question": "What is the contact name and phone number of the customer who has made the most total payment on the order to date?", "sql": "SELECT T1.ContactName, T1.Phone FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN 'Order Details' AS T3 ON T2.OrderID = T3.OrderID GROUP BY T2.OrderID, T1.ContactName, T1.Phone ORDER BY SUM(T3.UnitPrice * T3.Quantity * (1 - T3.Discount)) DESC LIMIT 1", "source_tables": ["order details", "orders", "customers"]}, "evidence": "most total payment = Max(Multiply(Quantity, UnitPrice, Subtract(1, Discount)))"}
{"sample_id": 6494, "db_id": "retail_world", "final": {"question": "Who is the sales representative of the customer who has made the highest payment? Include the full name of employee and his/her supervisor.", "sql": "SELECT T4.LastName, T4.FirstName, T4.ReportsTo , T1.Quantity * T1.UnitPrice * (1 - T1.Discount) AS payment FROM 'Order Details' AS T1 INNER JOIN Orders AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID INNER JOIN Employees AS T4 ON T2.EmployeeID = T4.EmployeeID ORDER BY payment DESC LIMIT 1", "source_tables": ["customers", "employees", "orders", "order details"]}, "evidence": "highest payment refers to Max(Multiply(Quantity, UnitPrice, Subtract(1, Discount))); full name refers to FirstName, LastName; his/her supervisor refers to 'ReportsTo'"}
{"sample_id": 6495, "db_id": "retail_world", "final": {"question": "How many customers are there in Berlin, Germany?", "sql": "SELECT COUNT(City) FROM Customers WHERE Country = 'Germany' AND City = 'Berlin'", "source_tables": ["customers"]}, "evidence": "\"Berlin\" is the City; 'Germany' is the Country"}
{"sample_id": 6496, "db_id": "retail_world", "final": {"question": "How many products does the company Exotic Liquids supply?", "sql": "SELECT COUNT(T1.ProductName) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Exotic Liquids'", "source_tables": ["suppliers", "products"]}, "evidence": "\"Exotic Liquids\" is the CompanyName of supplier"}
{"sample_id": 6497, "db_id": "retail_world", "final": {"question": "Which company has the lowest unit price? Please give the company name and the product name.", "sql": "SELECT T2.CompanyName, T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice = ( SELECT MIN(UnitPrice) FROM Products )", "source_tables": ["suppliers", "products"]}, "evidence": "lowest unit price refers to Min(UnitPrice)"}
{"sample_id": 6498, "db_id": "retail_world", "final": {"question": "What is the average unit price of Tokyo Traders' products?", "sql": "SELECT SUM(T1.UnitPrice) / COUNT(T2.SupplierID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Tokyo Traders'", "source_tables": ["suppliers", "products"]}, "evidence": "\"Tokyo Traders\" is the CompanyName; average unit price = AVG(UnitPrice)"}
{"sample_id": 6499, "db_id": "retail_world", "final": {"question": "How many territories are there in the Eastern region?", "sql": "SELECT COUNT(T1.RegionID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern'", "source_tables": ["territories", "region"]}, "evidence": "\"Eastern\" is the RegionDescription"}
{"sample_id": 6500, "db_id": "retail_world", "final": {"question": "Which region has the most territories?", "sql": "SELECT T2.RegionID FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID GROUP BY T2.RegionID ORDER BY COUNT(T1.TerritoryID) DESC LIMIT 1", "source_tables": ["territories", "region"]}, "evidence": "region refers to RegionDescription; most territories refers to Max(Count(TerritoryID))"}
{"sample_id": 6501, "db_id": "retail_world", "final": {"question": "Which region does territory id 2116 belong to?", "sql": "SELECT T2.RegionDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T1.TerritoryID = 2116", "source_tables": ["territories", "region"]}, "evidence": "region refers to RegionDescription"}
{"sample_id": 6502, "db_id": "retail_world", "final": {"question": "What percentage of orders were placed by customers in Madrid city in 1996?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.City = 'Madrid' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.City) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = 1996", "source_tables": ["orders", "customers"]}, "evidence": "\"Madrid\" is the City; in 1996 refers to YEAR (OrderDate) = 1996; percentage = Divide (Count (CustomerID where City = 'Madrid'), Count (CustomerID)) * 100"}
{"sample_id": 6503, "db_id": "retail_world", "final": {"question": "Please list the full names and titles of all employees.", "sql": "SELECT FirstName, LastName, Title FROM Employees", "source_tables": ["employees"]}, "evidence": "full name refers to LastName, FirstName"}
{"sample_id": 6504, "db_id": "retail_world", "final": {"question": "Who has the highest salary? Please give their first name.", "sql": "SELECT FirstName, LastName FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )", "source_tables": ["employees"]}, "evidence": "highest salary refers to Max(Salary)"}
{"sample_id": 6505, "db_id": "retail_world", "final": {"question": "How many sales representatives whose salaries are higher than 2000?", "sql": "SELECT COUNT(Title) FROM Employees WHERE Salary > 2000 AND Title = 'Sales Representative'", "source_tables": ["employees"]}, "evidence": "\"Sales Representative\" is the Title; higher than 2000 refers to Salary > 2000"}
{"sample_id": 6506, "db_id": "retail_world", "final": {"question": "In 1996, how many orders were from customers in the UK?", "sql": "SELECT COUNT(T1.CustomerID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = '1996' AND T1.Country = 'UK'", "source_tables": ["orders", "customers"]}, "evidence": "in 1996 refers to YEAR (OrderDate) = 1996; 'UK' is the Country;"}
{"sample_id": 6507, "db_id": "retail_world", "final": {"question": "Which company had the most orders in 1998?", "sql": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = '1998' GROUP BY T1.CompanyName ORDER BY COUNT(T2.OrderID) DESC LIMIT 1", "source_tables": ["orders", "customers"]}, "evidence": "in 1998 refers to YEAR (OrderDate) = 1998; most orders = Max(Count(CustomerID)); company refers to CompanyName"}
{"sample_id": 6508, "db_id": "retail_world", "final": {"question": "Please calculate the number of orders from customers by country in 1996.", "sql": "SELECT COUNT(T2.CustomerID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = '1996' GROUP BY T1.Country", "source_tables": ["orders", "customers"]}, "evidence": "in 1996 refer to YEAR(OrderDate) = 1996; number of order = Count(OrderID)"}
{"sample_id": 6509, "db_id": "retail_world", "final": {"question": "How many orders were from Hanna Moos company in 1999?", "sql": "SELECT COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = '1999' AND T1.CompanyName = 'Hanna Moos'", "source_tables": ["orders", "customers"]}, "evidence": "\"Hanna Moos\" is the CompanyName; in 1999 refer to YEAR (OrderDate) = 1999"}
{"sample_id": 6510, "db_id": "retail_world", "final": {"question": "How many days was the fastest shipping of Berglunds snabbkp's order?", "sql": "SELECT datediff(T2.ShippedDate, T2.OrderDate) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CompanyName = 'Berglunds snabbkp' ORDER BY datediff(T2.ShippedDate, T2.OrderDate) LIMIT 1", "source_tables": ["orders", "customers"]}, "evidence": "Berglunds snabbkp is the CompanyName; fastest shipping = Min(Subtract(ShippedDate, OrderDate))"}
{"sample_id": 6511, "db_id": "retail_world", "final": {"question": "Which company placed the order with the id 10257?", "sql": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.OrderID = 10257", "source_tables": ["orders", "customers"]}, "evidence": "\"10257\" is the OrderID; company refers to CompanyName"}
{"sample_id": 6512, "db_id": "retail_world", "final": {"question": "In which year did Around the Horn place the most orders?", "sql": "SELECT STRFTIME('%Y', T2.OrderDate) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CompanyName = 'Around the Horn' GROUP BY STRFTIME('%Y', T2.OrderDate) ORDER BY COUNT(T2.OrderID) DESC LIMIT 1", "source_tables": ["orders", "customers"]}, "evidence": "Around the Horn is the CompanyName; year with the most order refers to Year (OrderDate) where Max(Count(OrderID))"}
{"sample_id": 6513, "db_id": "retail_world", "final": {"question": "How many employees report to Andrew Fuller?", "sql": "SELECT COUNT(EmployeeID) FROM Employees WHERE ReportsTo = ( SELECT EmployeeID FROM Employees WHERE LastName = 'Fuller' AND FirstName = 'Andrew' )", "source_tables": ["employees"]}, "evidence": "\"Andrew Fuller\" refers to FirstName = 'Andrew' AND LastName = 'Fuller'; report to refers to ReportsTo ! = NULL"}
{"sample_id": 6514, "db_id": "retail_world", "final": {"question": "Which country are the majority of the suppliers located?", "sql": "SELECT Country FROM Suppliers GROUP BY Country ORDER BY COUNT(SupplierID) DESC LIMIT 1", "source_tables": ["suppliers"]}, "evidence": "majority of the suppliers located refers to MAX(COUNT(SupplierID))"}
{"sample_id": 6515, "db_id": "retail_world", "final": {"question": "What is the full name of the employees who report to the Sales Manager?", "sql": "SELECT FirstName, LastName FROM Employees WHERE ReportsTo = ( SELECT EmployeeID FROM Employees WHERE Title = 'Sales Manager' )", "source_tables": ["employees"]}, "evidence": "full name refers to LastName, FirstName; the Sales Manager refers to Title = 'Sales Manager'; report to refers to ReportsTo is not NULL;"}
{"sample_id": 6516, "db_id": "retail_world", "final": {"question": "In August of 1996, how many orders were placed by the customer with the highest amount of orders?", "sql": "SELECT COUNT(OrderID) FROM Orders WHERE OrderDate LIKE '1996-08%' GROUP BY CustomerID ORDER BY COUNT(OrderID) DESC LIMIT 1", "source_tables": ["orders"]}, "evidence": "August of 1996 refers to OrderDate = '1996-8'; highest amount of orders refers to MAX(COUNT(OrderID))"}
{"sample_id": 6517, "db_id": "retail_world", "final": {"question": "How much is the salary of the first employee that was hired?", "sql": "SELECT Salary FROM Employees WHERE HireDate = ( SELECT MIN(HireDate) FROM Employees )", "source_tables": ["employees"]}, "evidence": "first employee that was hired refers to MIN(HireDate)"}
{"sample_id": 6518, "db_id": "retail_world", "final": {"question": "How old was the oldest employee at the time he or she was hired?", "sql": "SELECT MAX(TIMESTAMPDIFF(YEAR, BirthDate, HireDate)) FROM Employees", "source_tables": ["employees"]}, "evidence": "oldest employee at the time he or she was hired refers to MAX(SUBTRACT(HireDate, Birthdate))"}
{"sample_id": 6519, "db_id": "retail_world", "final": {"question": "What is the total sales amount of all discontinued products?", "sql": "SELECT SUM(T2.UnitPrice * T2.Quantity) FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Discontinued = 1", "source_tables": ["products", "order details"]}, "evidence": "discontinued products refers to Discontinued = 1; total sales amount refers to SUM(MULTIPLY(UnitPrice, Quantity))"}
{"sample_id": 6670, "db_id": "retails", "final": {"question": "How many kinds of items are returned in order no.5?", "sql": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_orderkey = 5 AND l_returnflag = 'R'", "source_tables": ["lineitem"]}, "evidence": "returned refer to l_returnflag = 'R'; order no.5 refers to l_orderkey = 5; kinds of items refer to l_linenumber;"}
{"sample_id": 6671, "db_id": "retails", "final": {"question": "When was the latest date the items of order no.1 were shipped?", "sql": "SELECT MAX(l_shipdate) FROM lineitem WHERE l_orderkey = 1", "source_tables": ["lineitem"]}, "evidence": "order no.1 refers to l_orderkey = 1; the latest date shipped refers to MAX(l_shipdate);"}
{"sample_id": 6672, "db_id": "retails", "final": {"question": "Which order has a higher priority, order no. 4 or order no. 36?", "sql": "SELECT l_orderkey FROM lineitem WHERE l_orderkey IN (4, 36) ORDER BY l_shipdate DESC LIMIT 1", "source_tables": ["lineitem"]}, "evidence": "earlier orderdate have higher priority in delivery; which order no. 4 or order no. 36 refers to o_orderkey in (4, 36) where MIN(o_orderdate);"}
{"sample_id": 6673, "db_id": "retails", "final": {"question": "What is the comment of the order with the highest total price?", "sql": "SELECT o_comment FROM orders WHERE o_totalprice = ( SELECT MAX(o_totalprice) FROM orders )", "source_tables": ["orders"]}, "evidence": "the highest total price refers to MAX(o_totalprice); comment of the order refers to o_comment;"}
{"sample_id": 6674, "db_id": "retails", "final": {"question": "What is the phone number of Customer#000000001?", "sql": "SELECT c_phone FROM customer WHERE c_name = 'Customer#000000001'", "source_tables": ["customer"]}, "evidence": "customer phone refers to c_phone; Customer#000000001 refers to c_name;"}
{"sample_id": 6675, "db_id": "retails", "final": {"question": "How many orders in total have the customers in the household segment made?", "sql": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD'", "source_tables": ["customer", "orders"]}, "evidence": "orders in household segment refer to o_orderkey where c_mktsegment = 'HOUSEHOLD';"}
{"sample_id": 6676, "db_id": "retails", "final": {"question": "Among all the orders made by a customer in the household segment, what is the highest total price?", "sql": "SELECT MAX(T1.o_totalprice) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD'", "source_tables": ["customer", "orders"]}, "evidence": "orders in household segment refer to o_orderkey where c_mktsegment = 'HOUSEHOLD'; the highest total price refers to MAX(o_totalprice);"}
{"sample_id": 6677, "db_id": "retails", "final": {"question": "Please list the order comments of all the orders made by customers in the household segment.", "sql": "SELECT T1.o_comment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD'", "source_tables": ["customer", "orders"]}, "evidence": "orders in household segment refer to o_orderkey where c_mktsegment = 'HOUSEHOLD'; order comments refer to o_comment;"}
{"sample_id": 6678, "db_id": "retails", "final": {"question": "Please give the name of the customer who has made the single order with the highest total price.", "sql": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey ORDER BY T1.o_totalprice DESC LIMIT 1", "source_tables": ["customer", "orders"]}, "evidence": "name of the customer refers to c_name; single order with the highest total price refers to MAX(o_totalprice) LIMIT 1;"}
{"sample_id": 6679, "db_id": "retails", "final": {"question": "Please list the order keys of all the orders made by a customer whose account is in debt.", "sql": "SELECT T1.o_orderkey FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_acctbal < 0", "source_tables": ["customer", "orders"]}, "evidence": "account is in debt if c_acctbal < 0;"}
{"sample_id": 6680, "db_id": "retails", "final": {"question": "Among the orders made by customers in the household segment, how many of them are urgent?", "sql": "SELECT COUNT(T1.o_orderpriority) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD' AND T1.o_orderpriority = '1-URGENT'", "source_tables": ["customer", "orders"]}, "evidence": "orders in household segment refer to o_orderkey where c_mktsegment = 'HOUSEHOLD'; the order is urgent if o_orderpriority = '1-URGENT' ;"}
{"sample_id": 6681, "db_id": "retails", "final": {"question": "How many customers are in Brazil?", "sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'BRAZIL'", "source_tables": ["nation", "customer"]}, "evidence": "Brazil is the name of the nation which refers to n_name = 'BRAZIL'"}
{"sample_id": 6682, "db_id": "retails", "final": {"question": "Please list the phone numbers of all the customers in the household segment and are in Brazil.", "sql": "SELECT T1.c_phone FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'HOUSEHOLD' AND T2.n_name = 'BRAZIL'", "source_tables": ["nation", "customer"]}, "evidence": "phone numbers refer to c_phone; Brazil is the name of the nation which refers to n_name = 'BRAZIL'; household segment refers to c_mktsegment = 'HOUSEHOLD';"}
{"sample_id": 6683, "db_id": "retails", "final": {"question": "Among all the customers in Germany, how many of them have an account balance of over 1000?", "sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'GERMANY' AND T1.c_acctbal > 1000", "source_tables": ["nation", "customer"]}, "evidence": "Germany is the name of the nation which refers to n_name = 'GERMANY'; account balance of over 1000 refers to c_acctbal > 1000;"}
{"sample_id": 6684, "db_id": "retails", "final": {"question": "How many orders in total are made by customers in Germany?", "sql": "SELECT COUNT(T2.c_custkey) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY'", "source_tables": ["customer", "nation", "orders"]}, "evidence": "orders refer to o_orderkey; Germany is the name of the nation which refers to n_name = 'GERMANY';"}
{"sample_id": 6685, "db_id": "retails", "final": {"question": "What is the total price of all the orders made by customers in Germany?", "sql": "SELECT SUM(T3.o_totalprice) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY'", "source_tables": ["customer", "nation", "orders"]}, "evidence": "orders refer to o_orderkey; total price refers to o_totalprice; Germany is the name of the nation which refers to n_name = 'GERMANY';"}
{"sample_id": 6686, "db_id": "retails", "final": {"question": "Among the orders made by customers in Germany, which one of them has the highest priority in delivery? Please give its order key.", "sql": "SELECT T3.o_orderkey FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY' ORDER BY T3.o_orderdate LIMIT 1", "source_tables": ["customer", "nation", "orders"]}, "evidence": "orders refer to o_orderkey; Germany is the name of the nation which refers to n_name = 'GERMANY'; earlier orderdate have higher priority in delivery therefore MIN(o_orderdate);"}
{"sample_id": 6687, "db_id": "retails", "final": {"question": "What is the average price of the orders made by a customer in Germany?", "sql": "SELECT AVG(T3.o_totalprice) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY'", "source_tables": ["customer", "nation", "orders"]}, "evidence": "DIVIDE(SUM(o_totalprice), COUNT(o_orderkey)) where n_name = 'GERMANY';"}
{"sample_id": 6688, "db_id": "retails", "final": {"question": "Among all the customers, what is the percentage of the customer's nation being Germany?", "sql": "SELECT CAST(SUM(IIF(T2.n_name = 'GERMANY', 1, 0)) AS REAL) * 100 / COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey", "source_tables": ["nation", "customer"]}, "evidence": "DIVIDE(COUNT(c_custkey when n_name = 'GERMANY'), COUNT(c_custkey)) as percentage;"}
{"sample_id": 6689, "db_id": "retails", "final": {"question": "How many countries are there in the No.2 region?", "sql": "SELECT COUNT(n_nationkey) FROM nation WHERE n_regionkey = 2", "source_tables": ["nation"]}, "evidence": "No.2 region refers to n_regionkey = 2;"}
{"sample_id": 6690, "db_id": "retails", "final": {"question": "Which country does supplier No.34 come from?", "sql": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_suppkey = 34", "source_tables": ["supplier", "nation"]}, "evidence": "supplier No.34 refers to s_suppkey = 34; country refers to n_name;"}
{"sample_id": 6691, "db_id": "retails", "final": {"question": "Which region does \"Supplier#000000129\" belong to?", "sql": "SELECT T3.r_name FROM nation AS T1 INNER JOIN supplier AS T2 ON T1.n_nationkey = T2.s_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.s_name = 'Supplier#000000129'", "source_tables": ["supplier", "nation", "region"]}, "evidence": "\"Supplier#000000129\" is the name of the supplier which refers to s_name; Which region refers to r_name;"}
{"sample_id": 6692, "db_id": "retails", "final": {"question": "What is the nationality of \"Customer#000000055\"?", "sql": "SELECT T2.n_name FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_name = 'Customer#000000055'", "source_tables": ["nation", "customer"]}, "evidence": "\"Customer#000000055\" is the name of the customer which refers to c_name; nationality is the state of belonging to a particular country, therefore nationality refers to n_name;"}
{"sample_id": 6693, "db_id": "retails", "final": {"question": "Give customer No.106936's region name.", "sql": "SELECT T3.r_name FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_custkey = 106936", "source_tables": ["customer", "nation", "region"]}, "evidence": "\"Customer#000000055\" is the name of the customer which refers to c_name; region name refers to r_name;"}
{"sample_id": 6694, "db_id": "retails", "final": {"question": "Give the number of Moroccan customers whose account is in debt.", "sql": "SELECT COUNT(T1.c_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'MOROCCO' AND T1.c_acctbal < 0", "source_tables": ["nation", "customer"]}, "evidence": "account is in debt if c_acctbal < 0; Moroccan customers refer to c_name WHERE n_name = 'MOROCCO';"}
{"sample_id": 6695, "db_id": "retails", "final": {"question": "For the order with the total price of 231499.38, what was the discounted price for supplier No. 9397?", "sql": "SELECT T1.l_extendedprice * (1 - T1.l_discount) AS DISCOUNTERPRICE FROM lineitem AS T1 INNER JOIN orders AS T2 ON T2.o_orderkey = T1.l_orderkey WHERE T1.l_suppkey = 9397 AND T2.o_totalprice = 231499.38", "source_tables": ["lineitem", "orders"]}, "evidence": "MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)) where o_totalprice = 231499.38 AND l_suppkey = 9397;"}
{"sample_id": 6696, "db_id": "retails", "final": {"question": "For the order with the total price of 218195.43, which supplier handled the returned item? Give the supplier id.", "sql": "SELECT T2.l_suppkey FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_totalprice = 218195.43 AND T2.l_returnflag = 'R'", "source_tables": ["lineitem", "orders"]}, "evidence": "returned item refers to l_returnflag = 'R'; supplier id refers to l_suppkey; order with the total price of 218195.43 refers to o_totalprice = 218195.43;"}
{"sample_id": 6697, "db_id": "retails", "final": {"question": "Clerk#000000936 dealt with a \"Not Specified\" order on 1995/3/13, what was the charge for the part of the order shipped by truck?", "sql": "SELECT T2.l_extendedprice * (1 - T2.l_discount) * (1 + T2.l_tax) AS num FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_clerk = 'Clerk#000000936' AND T2.l_shipmode = 'TRUCK' AND T1.o_orderstatus = '4-NOT SPECIFIED' AND T1.o_orderdate = '1995-03-13'", "source_tables": ["lineitem", "orders"]}, "evidence": "MULTIPLY(MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)), SUM(1, l_tax)) WHERE o_clerk = 'Clerk#000000936', o_orderstatus = '4-NOT SPECIFIED', o_orderdate = '1995-03-13' AND l_shipmode = 'TRUCK';"}
{"sample_id": 6698, "db_id": "retails", "final": {"question": "Customer No.129301 made an order on 1996/7/27, what was the delivery time for the first part of that order?", "sql": "SELECT JULIANDAY(T2.l_receiptdate) - JULIANDAY(T2.l_commitdate) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_custkey = '129301' AND T1.o_orderdate = '1996-07-27'", "source_tables": ["lineitem", "orders"]}, "evidence": "SUBTRACT(l_receiptdate, l_commitdate) WHERE o_orderdate = '1996-07-27' AND o_custkey = '129301';"}
{"sample_id": 6699, "db_id": "retails", "final": {"question": "Give the name of the customer who made an order with Clerk#000000803 on 1997/12/10.", "sql": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_orderdate = '1997-12-10' AND T1.o_clerk = 'Clerk#000000803'", "source_tables": ["customer", "orders"]}, "evidence": "name of the customer refers to c_name; o_clerk = 'Clerk#000000803'; order on 1997/12/10 refers to o_orderdate = '1997-12-10';"}
{"sample_id": 6700, "db_id": "retails", "final": {"question": "Calculates the profit processed by Supplier No. 7414 on order No. 817154.", "sql": "SELECT T1.l_extendedprice * (1 - T1.l_discount) - T2.ps_supplycost * T1.l_quantity FROM lineitem AS T1 INNER JOIN partsupp AS T2 ON T1.l_suppkey = T2.ps_suppkey WHERE T1.l_suppkey = 7414 AND T1.l_orderkey = 817154", "source_tables": ["partsupp", "lineitem"]}, "evidence": "SUBTRACT(MULTIPLY(l_extendedprice, (SUBTRACT(1, l_discount)), MULTIPLY(ps_supplycost, l_quantity))) WHERE l_suppkey = 7414 AND l_orderkey = 817154;"}
{"sample_id": 6701, "db_id": "retails", "final": {"question": "Which country has the most number of suppliers whose account is in debt?", "sql": "SELECT T.n_name FROM ( SELECT T2.n_name, SUM(T1.s_acctbal) AS num FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 GROUP BY T2.n_name ) AS T ORDER BY T.num LIMIT 1", "source_tables": ["supplier", "nation"]}, "evidence": "country refers to n_name; the most number of suppliers whose account is in debt refers to MAX(SUM(s_acctbal < 0));"}
{"sample_id": 6702, "db_id": "retails", "final": {"question": "What is the percentage of the European countries among the given countries?", "sql": "SELECT CAST(SUM(IIF(T2.r_name = 'EUROPE', 1, 0)) AS REAL) * 100 / COUNT(T1.n_name) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey", "source_tables": ["nation", "region"]}, "evidence": "DIVIDE(COUNT(n_name where r_name = 'EUROPE'), COUNT(n_name)) as percentage;"}
{"sample_id": 6703, "db_id": "retails", "final": {"question": "Give the percentage of Japanese suppliers whose account is in debt.", "sql": "SELECT CAST(SUM(IIF(T2.n_name = 'JAPAN', 1, 0)) AS REAL) * 100 / COUNT(T1.s_name) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0", "source_tables": ["supplier", "nation"]}, "evidence": "account is in debt if s_acctbal < 0; DIVIDE(COUNT(s_acctbal < 0 where n_name = 'JAPAN'), COUNT(s_name where n_name = 'JAPAN')) as percentage;"}
{"sample_id": 6704, "db_id": "retails", "final": {"question": "What is the name of the customer with the highest amount of debt?", "sql": "SELECT c_name FROM customer WHERE c_acctbal = ( SELECT MIN(c_acctbal) FROM customer )", "source_tables": ["customer"]}, "evidence": "customer with the highest amount of debt refers to c_name where MIN(c_acctbal);"}
{"sample_id": 6705, "db_id": "retails", "final": {"question": "How many orders were shipped in 1998?", "sql": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1998'", "source_tables": ["lineitem"]}, "evidence": "orders refer to l_orderkey; shipped in 1998 refers to year(l_shipdate) = 1998;"}
{"sample_id": 6706, "db_id": "retails", "final": {"question": "How many customers are in debt?", "sql": "SELECT COUNT(c_custkey) FROM customer WHERE c_acctbal < 0", "source_tables": ["customer"]}, "evidence": "customers are in debt refer to c_custkey where c_acctbal < 0;"}
{"sample_id": 6707, "db_id": "retails", "final": {"question": "How many items that were shipped via air were returned in 1994?", "sql": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_returnflag = 'R' AND l_shipmode = 'AIR' AND STRFTIME('%Y', l_shipdate) = '1994'", "source_tables": ["lineitem"]}, "evidence": "items refer to l_linenumber; shipped via air in 1994 refers to year(l_shipdate) = 1994 where l_shipmode = 'AIR'; returned refer to l_returnflag = 'R';"}
{"sample_id": 6708, "db_id": "retails", "final": {"question": "How many customers are in the automobile market segment?", "sql": "SELECT COUNT(c_custkey) FROM customer WHERE c_mktsegment = 'AUTOMOBILE'", "source_tables": ["customer"]}, "evidence": "automobile market segment refers to c_mktsegment = 'AUTOMOBILE';"}
{"sample_id": 6709, "db_id": "retails", "final": {"question": "What are the top 2 order keys of the item with the highest amount of extended price?", "sql": "SELECT l_orderkey FROM lineitem ORDER BY l_extendedprice DESC LIMIT 2", "source_tables": ["lineitem"]}, "evidence": "the highest amount of extended price refers to MAX(l_extendedprice);"}
{"sample_id": 6710, "db_id": "retails", "final": {"question": "When was the order with the highest amount of total price shipped?", "sql": "SELECT T2.l_shipdate FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey ORDER BY T1.o_totalprice DESC LIMIT 1", "source_tables": ["lineitem", "orders"]}, "evidence": "when shipped refers to l_shipdate; the highest amount of total price refers to MAX(o_totalprice);"}
{"sample_id": 6711, "db_id": "retails", "final": {"question": "In which country do most of the customers come from?", "sql": "SELECT T.n_name FROM ( SELECT T2.n_name, COUNT(T1.c_custkey) AS num FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey GROUP BY T2.n_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["nation", "customer"]}, "evidence": "country refers to n_name; most of the customers refer to MAX(COUNT(c_custkey));"}
{"sample_id": 6712, "db_id": "retails", "final": {"question": "How many urgent orders were shipped the next day?", "sql": "SELECT COUNT(T2.o_orderkey) FROM lineitem AS T1 INNER JOIN orders AS T2 ON T2.o_orderkey = T1.l_orderkey WHERE JULIANDAY(T1.l_shipdate) - JULIANDAY(T2.o_orderdate) = 1 AND T2.o_orderpriority = '1-URGENT'", "source_tables": ["lineitem", "orders"]}, "evidence": "the order is urgent if o_orderpriority = '1-URGENT'; shipped the next day refers to SUBTRACT(l_shipdate, o_orderdate) = 1;"}
{"sample_id": 6713, "db_id": "retails", "final": {"question": "How many in debt customers in the household market segment are from Russia?", "sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal < 0 AND T1.c_mktsegment = 'HOUSEHOLD' AND T2.n_name = 'RUSSIA'", "source_tables": ["nation", "customer"]}, "evidence": "in debt customers refer to c_custkey where c_acctbal < 0; c_mktsegment = 'HOUSEHOLD'; Russian is the name of the nation which refers to n_name = 'RUSSIA';"}
{"sample_id": 6714, "db_id": "retails", "final": {"question": "How many suppliers are from Japan?", "sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'JAPAN'", "source_tables": ["nation", "customer"]}, "evidence": "suppliers refer to s_nationkey; Japan is the name of the nation which refers to n_name = 'JAPAN';"}
{"sample_id": 6715, "db_id": "retails", "final": {"question": "How many orders shipped via ship have a medium priority?", "sql": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'SHIP' AND T1.o_orderpriority = '3-MEDIUM'", "source_tables": ["lineitem", "orders"]}, "evidence": "orders shipped via ship refer to o_orderkey where l_shipmode = 'SHIP'; medium priority refers to o_orderpriority = '3-MEDIUM';"}
{"sample_id": 6716, "db_id": "retails", "final": {"question": "Among the customers from the United States, which market segment has the highest number of customers?", "sql": "SELECT T.c_mktsegment FROM ( SELECT T1.c_mktsegment, COUNT(T1.c_custkey) AS num FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'UNITED STATES' GROUP BY T1.c_mktsegment ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["nation", "customer"]}, "evidence": "the highest number of customers refer to MAX(COUNT(c_custkey)); the United States is the name of the nation which refers to n_name = 'UNITED STATES'; market segment refers to c_mktsegment;"}
{"sample_id": 6717, "db_id": "retails", "final": {"question": "What are the countries in the region of Asia?", "sql": "SELECT T1.n_name FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_name = 'ASIA'", "source_tables": ["nation", "region"]}, "evidence": "countries in the region of Asia refer to n_name where r_name = 'ASIA';"}
{"sample_id": 6718, "db_id": "retails", "final": {"question": "What are the names of the parts manufactured by manufacturer 3 that have a supply cost of 1,000?", "sql": "SELECT T2.p_name FROM partsupp AS T1 INNER JOIN part AS T2 ON T1.ps_partkey = T2.p_partkey WHERE T1.ps_supplycost = 1000 AND T2.p_mfgr = 'Manufacturer#3'", "source_tables": ["part", "partsupp"]}, "evidence": "names of the parts refer to p_name; manufacturer 3 refers to p_mfgr = 'Manufacturer#3'; ps_supplycost = 1000;"}
{"sample_id": 6719, "db_id": "retails", "final": {"question": "How many countries are there in the region whose comment description is \"asymptotes sublate after the r.\"", "sql": "SELECT COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_comment = 'asymptotes sublate after the r'", "source_tables": ["nation", "region"]}, "evidence": "r_comment = 'asymptotes sublate after the r'; countries refer to n_nationkey;"}
{"sample_id": 6720, "db_id": "retails", "final": {"question": "Among the products manufactured by manufacturer 5 that have a retail price of no more than 1,000, how many products were shipped via rail?", "sql": "SELECT COUNT(T1.ps_partkey) FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_mfgr = 'Manufacturer#5' AND T3.p_retailprice < 1000 AND T2.l_shipmode = 'RAIL'", "source_tables": ["part", "partsupp", "lineitem"]}, "evidence": "manufacturer 5 refers to p_mfgr = 'Manufacturer#5'; retail price of no more than 1,000 refers to p_retailprice < 1000; shipped via rail refers to shipmode = 'RAIL';"}
{"sample_id": 6721, "db_id": "retails", "final": {"question": "How much is the profit for smoke turquoise purple blue salmon that was delivered in person on 5/7/1996?", "sql": "SELECT T1.l_extendedprice * (1 - T1.l_discount) - T2.ps_supplycost * T1.l_quantity AS num FROM lineitem AS T1 INNER JOIN partsupp AS T2 ON T1.l_suppkey = T2.ps_suppkey INNER JOIN part AS T3 ON T2.ps_partkey = T3.p_partkey WHERE T1.l_receiptdate = '1996-05-07' AND T1.l_shipinstruct = 'DELIVER IN PERSON' AND T3.p_name = 'smoke turquoise purple blue salmon'", "source_tables": ["part", "partsupp", "lineitem"]}, "evidence": "SUBTRACT(MULTIPLY(l_extendedprice, (SUBTRACT(1, l_discount)), MULTIPLY(ps_supplycost, l_quantity))) where p_name = 'smoke turquoise purple blue salmon' and l_receiptdate = '1996-05-07' and l_shipinstruct = 'DELIVER IN PERSON';"}
{"sample_id": 6722, "db_id": "retails", "final": {"question": "What is the average price before discount of the top 10 orders with the highest total price?", "sql": "SELECT SUM(T2.l_extendedprice) / 10 FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey ORDER BY T1.o_totalprice DESC LIMIT 10", "source_tables": ["lineitem", "orders"]}, "evidence": "DIVIDE(SUM(l_extendedprice), 10) where MAX(o_totalprice);"}
{"sample_id": 6723, "db_id": "retails", "final": {"question": "Identify the names of the top 3 customers with the highest number of orders of all time and calculate for the average total price per order of each customers.", "sql": "SELECT T.c_name, T.res FROM ( SELECT T2.c_name, SUM(T1.o_totalprice) / COUNT(T1.o_orderkey) AS res , COUNT(T1.o_orderkey) AS num FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey GROUP BY T1.o_custkey ) AS T ORDER BY T.num DESC LIMIT 3", "source_tables": ["customer", "orders"]}, "evidence": "customers with the highest number of orders refer to c_name where MAX(COUNT(o_orderkey)); DIVIDE(SUM(o_totalprice), COUNT(o_orderkey));"}
{"sample_id": 6724, "db_id": "retails", "final": {"question": "How many items were shipped on 4th December, 1993?", "sql": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_shipdate = '1993-12-04'", "source_tables": ["lineitem"]}, "evidence": "items shipped on 4th December, 1993 refer to l_linenumber where l_shipdate = '1993-12-04';"}
{"sample_id": 6725, "db_id": "retails", "final": {"question": "What was the order date of items with the highest total price?", "sql": "SELECT o_orderdate FROM orders WHERE o_totalprice = ( SELECT MAX(o_totalprice) FROM orders )", "source_tables": ["orders"]}, "evidence": "the highest total price refers to MAX(o_totalprice);"}
{"sample_id": 6726, "db_id": "retails", "final": {"question": "Calculate the percentage of customers' accounts in debt.", "sql": "SELECT CAST(SUM(IIF(c_acctbal < 0, 1, 0)) AS REAL) * 100 / COUNT(c_custkey) FROM customer", "source_tables": ["customer"]}, "evidence": "DIVIDE(COUNT(c_custkey where c_acctbal < 0), COUNT(c_custkey)) as percentage;"}
{"sample_id": 6727, "db_id": "retails", "final": {"question": "How many part supplies were nearly out of stock?", "sql": "SELECT COUNT(ps_suppkey) FROM partsupp WHERE ps_availqty < 10", "source_tables": ["partsupp"]}, "evidence": "supplies nearly out of stock refer to ps_partkey where ps_availqty < 10;"}
{"sample_id": 6728, "db_id": "retails", "final": {"question": "Calculate the percentage of manufactured parts by Manufacturer#3.", "sql": "SELECT CAST(SUM(IIF(p_mfgr = 'Manufacturer#3', 1, 0)) AS REAL) * 100 / COUNT(p_partkey) FROM part", "source_tables": ["part"]}, "evidence": "DIVIDE(COUNT(p_partkey where p_mfgr = 'Manufacturer#3'), COUNT(p_partkey)) as percentage;"}
{"sample_id": 6729, "db_id": "retails", "final": {"question": "List any five parts name in Medium Plated Brass.", "sql": "SELECT p_name FROM part WHERE p_type = 'MEDIUM PLATED BRASS' LIMIT 5", "source_tables": ["part"]}, "evidence": "p_type = 'MEDIUM PLATED BRASS'; parts name refer to p_name;"}
{"sample_id": 6730, "db_id": "retails", "final": {"question": "Among the orders shipped in November, 1998 by air, how many orders were urgent?", "sql": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'AIR' AND T1.o_orderpriority = '1-URGENT' AND SUBSTR(T2.l_shipdate, 1, 7) = '1998-11'", "source_tables": ["lineitem", "orders"]}, "evidence": "orders shipped in November, 1998 refer to o_orderkey where l_shipdate LIKE '1998-11-%'; by air refers to l_shipmode = 'AIR'; the order is urgent if o_orderpriority = '1-URGENT' ;"}
{"sample_id": 6731, "db_id": "retails", "final": {"question": "How many customers are there in India?", "sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'INDIA'", "source_tables": ["nation", "customer"]}, "evidence": "customers refer to c_custkey; India is the name of the nation which refers to n_name = 'INDIA';"}
{"sample_id": 6732, "db_id": "retails", "final": {"question": "Among the customers from Morocco, how many customers were in debt?", "sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal < 0 AND T2.n_name = 'MOROCCO'", "source_tables": ["nation", "customer"]}, "evidence": "customers refer to c_custkey; Morocco is the name of the nation which refers to n_name = 'MOROCCO'; in debt refers to c_acctbal < 0;"}
{"sample_id": 6733, "db_id": "retails", "final": {"question": "List down the nation keys and names in Africa.", "sql": "SELECT T1.n_name, T1.n_nationkey FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_name = 'AFRICA'", "source_tables": ["nation", "region"]}, "evidence": "Africa refers to r_name = 'Africa';"}
{"sample_id": 6734, "db_id": "retails", "final": {"question": "Calculate the total price of orders by Customer#000000013.", "sql": "SELECT SUM(T1.o_totalprice) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_name = 'Customer#000000013'", "source_tables": ["customer", "orders"]}, "evidence": "Customer#000000013 is the name of the customer which refers to c_name;"}
{"sample_id": 6735, "db_id": "retails", "final": {"question": "How many items did Customer#000021159 order? Calculate those items total charges.", "sql": "SELECT COUNT(T2.o_orderkey), SUM(T3.l_extendedprice * (1 - T3.l_discount) * (1 + T3.l_tax)) FROM customer AS T1 INNER JOIN orders AS T2 ON T1.c_custkey = T2.o_custkey INNER JOIN lineitem AS T3 ON T2.o_orderkey = T3.l_orderkey WHERE T1.c_name = 'Customer#000021159' GROUP BY T3.l_linenumber", "source_tables": ["customer", "orders", "lineitem"]}, "evidence": "items Customer#000021159 order refer to l_linenumber where c_name = 'Customer#000021159'; SUM(MULTIPLY(MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)), SUM(1, l_tax))) where c_name = 'Customer#000021159';"}
{"sample_id": 6736, "db_id": "retails", "final": {"question": "Calculate the total profit made by chocolate floral blue coral cyan.", "sql": "SELECT SUM(T3.l_extendedprice * (1 - T3.l_discount) - T2.ps_supplycost * T3.l_quantity) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN lineitem AS T3 ON T2.ps_partkey = T3.l_partkey AND T2.ps_suppkey = T3.l_suppkey WHERE T1.p_name = 'chocolate floral blue coral cyan'", "source_tables": ["part", "partsupp", "lineitem"]}, "evidence": "SUBTRACT(MULTIPLY(l_extendedprice, (SUBTRACT(1, l_discount)), MULTIPLY(ps_supplycost, l_quantity))) where p_name = 'chocolate floral blue coral cyan';"}
{"sample_id": 6737, "db_id": "retails", "final": {"question": "Calculate the percentage of suppliers in Germany.", "sql": "SELECT CAST(SUM(IIF(T2.n_name = 'GERMANY', 1, 0)) AS REAL) * 100 / COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0", "source_tables": ["supplier", "nation"]}, "evidence": "DIVIDE(COUNT(s_suppkey where n_name = 'GERMANY'), COUNT(s_suppkey)) as percentage;"}
{"sample_id": 6738, "db_id": "retails", "final": {"question": "List the suppliers' names which supplied smoke red pale saddle plum.", "sql": "SELECT T3.s_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_name = 'smoke red pale saddle plum'", "source_tables": ["part", "partsupp", "supplier"]}, "evidence": "p_name = 'smoke red pale saddle plum'; the suppliers' names refer to s_name;"}
{"sample_id": 6739, "db_id": "retails", "final": {"question": "Among the suppliers from Middle East region, how many suppliers were in debt?", "sql": "SELECT COUNT(T3.s_name) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey INNER JOIN supplier AS T3 ON T2.n_nationkey = T3.s_nationkey WHERE T3.s_acctbal < 0 AND T1.r_name = 'MIDDLE EAST'", "source_tables": ["supplier", "nation", "region"]}, "evidence": "suppliers from Middle East region refer to s_name where r_name = 'MIDDLE EAST'; in debt refers to s_acctbal < 0;"}
{"sample_id": 6740, "db_id": "retails", "final": {"question": "Among the parts shipped by rail on 1st December, 1995, list part names with 10% discount.", "sql": "SELECT T2.p_name FROM partsupp AS T1 INNER JOIN part AS T2 ON T1.ps_partkey = T2.p_partkey INNER JOIN lineitem AS T3 ON T1.ps_partkey = T3.l_partkey WHERE T3.l_discount = 0.1 AND T3.l_shipdate = '1995-12-01' AND T3.l_shipmode = 'RAIL'", "source_tables": ["part", "partsupp", "lineitem"]}, "evidence": "shipped by rail on 1st December, 1995 refers to l_shipmode = 'RAIL' where l_shipdate = '1995-12-01'; part names with 10% discount refer to p_name where l_discount = 0.1;"}
{"sample_id": 6741, "db_id": "retails", "final": {"question": "Among the parts supplied by Supplier#000000018, provide parts names which had supply costs above 900.", "sql": "SELECT T2.p_name FROM partsupp AS T1 INNER JOIN part AS T2 ON T1.ps_partkey = T2.p_partkey INNER JOIN supplier AS T3 ON T1.ps_suppkey = T3.s_suppkey WHERE T1.ps_supplycost > 900 AND T3.s_name = 'Supplier#000000018'", "source_tables": ["part", "partsupp", "supplier"]}, "evidence": "Supplier#000000018 is the name of supplier which refers to s_name; supply costs above 900 refer to ps_supplycost > 900;"}
{"sample_id": 6742, "db_id": "retails", "final": {"question": "How many orders were shipped in 1994?", "sql": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1994'", "source_tables": ["lineitem"]}, "evidence": "orders shipped in 1994 refer to l_orderkey where year(l_shipdate) = 1994;"}
{"sample_id": 6743, "db_id": "retails", "final": {"question": "How many of the line items have been shipped by rail with a quantity less than 30?", "sql": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_quantity < 30 AND l_shipmode = 'RAIL'", "source_tables": ["lineitem"]}, "evidence": "shipped by rail refers to l_shipmode = 'RAIL'; quantity less than 30 refers to l_quantity < 30;"}
{"sample_id": 6744, "db_id": "retails", "final": {"question": "Among the customers in the furniture market segment, how many of them have a nation key of 1?", "sql": "SELECT COUNT(c_custkey) FROM customer WHERE c_mktsegment = 'FURNITURE' AND c_nationkey = 1", "source_tables": ["customer"]}, "evidence": "furniture market segment refers to c_mktsegment = 'FURNITURE';"}
{"sample_id": 6745, "db_id": "retails", "final": {"question": "Give the phone number of the customer with the highest account balance.", "sql": "SELECT c_phone FROM customer ORDER BY c_acctbal DESC LIMIT 1", "source_tables": ["customer"]}, "evidence": "phone number of the customer refers to c_phone; the highest account balance refers to MAX(c_acctbal);"}
{"sample_id": 6746, "db_id": "retails", "final": {"question": "What is the order priority of the order with the highest total price?", "sql": "SELECT o_orderpriority FROM orders WHERE o_totalprice = ( SELECT MAX(o_totalprice) FROM orders )", "source_tables": ["orders"]}, "evidence": "order with the highest total price refers to MAX(o_totalprice);"}
{"sample_id": 6747, "db_id": "retails", "final": {"question": "What is the total number of orders made by customers in United States?", "sql": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey INNER JOIN nation AS T3 ON T2.c_nationkey = T3.n_nationkey WHERE T3.n_name = 'UNITED STATES'", "source_tables": ["nation", "customer", "orders"]}, "evidence": "orders refer to o_orderkey; the United States is the name of the nation which refers to n_name = 'UNITED STATES';"}
{"sample_id": 6748, "db_id": "retails", "final": {"question": "Among the customers from Brazil, how many customers are in automobile market segment?", "sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'AUTOMOBILE' AND T2.n_name = 'BRAZIL'", "source_tables": ["nation", "customer"]}, "evidence": "customers refer to c_custkey; Brazil is the name of the nation which refers to n_name = 'BRAZIL'; c_mktsegment = 'automobile';"}
{"sample_id": 6749, "db_id": "retails", "final": {"question": "Provide the order comments for at least 5 orders made by customers in the furniture segment.", "sql": "SELECT T1.o_comment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'Furniture' LIMIT 5", "source_tables": ["customer", "orders"]}, "evidence": "order comments refer to o_comment; c_mktsegment = 'Furniture';"}
{"sample_id": 6750, "db_id": "retails", "final": {"question": "List down the countries that are located in Asia.", "sql": "SELECT T1.n_name FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_name = 'ASIA'", "source_tables": ["nation", "region"]}, "evidence": "countries in Asia refer to n_name where r_name = 'ASIA';"}
{"sample_id": 6751, "db_id": "retails", "final": {"question": "Name the countries that belong in the region with comment description \"furiously express accounts wake sly\".", "sql": "SELECT T1.n_name FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_comment = 'furiously express accounts wake sly'", "source_tables": ["nation", "region"]}, "evidence": "r_comment = 'furiously express accounts wake sly';"}
{"sample_id": 6752, "db_id": "retails", "final": {"question": "What is the total number of suppliers from Germany?", "sql": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'GERMANY'", "source_tables": ["supplier", "nation"]}, "evidence": "suppliers refer to s_suppkey; Germany is the name of the nation which refers to n_name = 'GERMANY';"}
{"sample_id": 6753, "db_id": "retails", "final": {"question": "Among the customers in Asia, how many customers are in debt?", "sql": "SELECT COUNT(T1.n_name) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_acctbal < 0 AND T3.r_name = 'ASIA'", "source_tables": ["customer", "nation", "region"]}, "evidence": "customers in Asia refer to n_name where r_name = 'ASIA'; customers in debt refer to c_acctbal < 0;"}
{"sample_id": 6754, "db_id": "retails", "final": {"question": "Provide the phone number of the customer with the highest total price in an order.", "sql": "SELECT T2.c_phone FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey ORDER BY T1.o_totalprice DESC LIMIT 1", "source_tables": ["customer", "orders"]}, "evidence": "phone number of the customer refers to c_phone; the highest total price refers to MAX(o_totalprice);"}
{"sample_id": 6755, "db_id": "retails", "final": {"question": "Among the products that have a retail price greater than 1,000, how many products were shipped via ship?", "sql": "SELECT COUNT(T1.ps_suppkey) FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_retailprice > 1000 AND T2.l_shipmode = 'SHIP'", "source_tables": ["part", "partsupp", "lineitem"]}, "evidence": "products refer to l_partkey; retail price greater than 1,000 refers to p_retailprice > 1000; shipped via ship refers to l_shipmode = 'SHIP';"}
{"sample_id": 6756, "db_id": "retails", "final": {"question": "What is the name and marketing segment of the customer with the total order price of 199180.63?", "sql": "SELECT T2.c_name, T2.c_mktsegment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice = 199180.63", "source_tables": ["customer", "orders"]}, "evidence": "name of the customer refers to c_name; total order price of 199180.63 refers o_totalprice = 199180.63; marketing segment refers to c_mktsegment;"}
{"sample_id": 6757, "db_id": "retails", "final": {"question": "Provide the nation and region of the customer with the address of wH55UnX7 VI?", "sql": "SELECT T1.n_name, T3.r_name FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_address = 'wH55UnX7 VI'", "source_tables": ["customer", "nation", "region"]}, "evidence": "nation refers to n_name; region refers to r_name; address of wH55UnX7 VI refers to c_address = 'wH55UnX7 VI';"}
{"sample_id": 6758, "db_id": "retails", "final": {"question": "Among all the customers in Brazil, how many of them have an account balance of less than 1000?", "sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'BRAZIL' AND T1.c_acctbal < 1000", "source_tables": ["nation", "customer"]}, "evidence": "customers refer to c_custkey; Brazil is the name of the nation which refers to n_name = 'BRAZIL'; account balance of less than 1000 refers to c_acctbal < 1000;"}
{"sample_id": 6759, "db_id": "retails", "final": {"question": "List the country name of the customers in the building marketing segment with an account balance greater than 80% of the average account balance of all customers.", "sql": "SELECT T2.n_name FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey INNER JOIN ( SELECT AVG(c_acctbal) * 0.8 AS avg_acctbal FROM customer ) AS T3 WHERE T1.c_acctbal > T3.avg_acctbal", "source_tables": ["nation", "customer"]}, "evidence": "country name refers to n_name; building marketing segment refers to c_mktsegment = 'BUILDING'; account balance greater than 80% of the average account balance of all customers refers to c_acctbal > MULTIPLY(AVG(c_acctbal), 0.8);"}
{"sample_id": 6760, "db_id": "retails", "final": {"question": "Among the customers with an account balance lower than 4000, what is the percentage of the customers in the US?", "sql": "SELECT CAST(SUM(IIF(T2.n_name = 'United States', 1, 0)) AS REAL) * 100 / COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal < 4000", "source_tables": ["nation", "customer"]}, "evidence": "DIVIDE(COUNT(c_custkey where n_name = 'United States' and c_acctbal < 4000), COUNT(c_custkey where c_acctbal < 4000)) as percentage;"}
{"sample_id": 6761, "db_id": "retails", "final": {"question": "Give the name and phone number of the customers who have more than 9000 account balance.", "sql": "SELECT c_name, c_phone FROM customer WHERE c_acctbal > 9000", "source_tables": ["customer"]}, "evidence": "the name of the customer refers to c_name; phone number of the customer refers to c_phone; have more than 9000 account balance refers to c_acctbal > 9000;"}
{"sample_id": 6762, "db_id": "retails", "final": {"question": "What is the average number of items shipped each day in April of 1994?", "sql": "SELECT AVG(l_linenumber) FROM lineitem WHERE l_shipdate BETWEEN '1994-01-01' AND '1994-01-30'", "source_tables": ["lineitem"]}, "evidence": "AVG(l_linenumber) where l_shipdate between '1994-01-01' and '1994-01-30';"}
{"sample_id": 6763, "db_id": "retails", "final": {"question": "List the order key of the orders with a total price between 200000 and 300000.", "sql": "SELECT o_orderkey FROM orders WHERE o_totalprice BETWEEN 200000 AND 300000", "source_tables": ["orders"]}, "evidence": "orders with a total price between 200000 and 300000 refer to o_totalprice between 200000 and 300000;"}
{"sample_id": 6764, "db_id": "retails", "final": {"question": "Find and list the part key of the parts which has an above-average retail price.", "sql": "SELECT p_partkey FROM part WHERE p_retailprice > ( SELECT AVG(p_retailprice) FROM part )", "source_tables": ["part"]}, "evidence": "part key of the parts which has an above-average retail price refer to p_partkey where p_retailprice > AVG(p_retailprice);"}
{"sample_id": 6765, "db_id": "retails", "final": {"question": "Calculate the percentage of part supply that costs more than 500.", "sql": "SELECT CAST(SUM(IIF(ps_supplycost > 500, 1, 0)) AS REAL) * 100 / COUNT(ps_suppkey) FROM partsupp", "source_tables": ["partsupp"]}, "evidence": "DIVIDE(COUNT(ps_suppkey where ps_supplycost > 500)), COUNT(ps_suppkey) as percentage;"}
{"sample_id": 6766, "db_id": "retails", "final": {"question": "Find the supply key of the top ten suppliers with the most account balance, and list the supply key along with the account balance in descending order of account balance.", "sql": "SELECT s_suppkey, s_acctbal FROM supplier ORDER BY s_acctbal DESC LIMIT 10", "source_tables": ["supplier"]}, "evidence": "supply key refers to s_suppkey; the most amount account balance refers to MAX(s_acctbal);"}
{"sample_id": 6767, "db_id": "retails", "final": {"question": "How many customers who are not in debt ordered an urgent order?", "sql": "SELECT COUNT(T2.c_custkey) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_acctbal > 0 AND T1.o_orderpriority = '1-URGENT'", "source_tables": ["customer", "orders"]}, "evidence": "customers who are not in debt refer to c_custkey where c_acctbal > 0; the order is urgent if o_orderpriority = '1-URGENT' ;"}
{"sample_id": 6768, "db_id": "retails", "final": {"question": "List the name and phone number of customers in India who have an above-average account balance.", "sql": "SELECT T1.c_name, T1.c_phone FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal > ( SELECT AVG(c_acctbal) FROM customer ) ORDER BY T1.c_name", "source_tables": ["nation", "customer"]}, "evidence": "name of customer refers to c_name; phone number of customer refers to c_phone; customers in India who have an above-average account balance refer to n_name = 'INDIA' and c_acctbal > AVG(c_acctbal);"}
{"sample_id": 6769, "db_id": "retails", "final": {"question": "In the parts supply by Supplier#000000654, list the top five parts with the most supply cost in descending order of supply cost.", "sql": "SELECT T2.ps_partkey FROM supplier AS T1 INNER JOIN partsupp AS T2 ON T1.s_suppkey = T2.ps_suppkey WHERE T1.s_name = 'Supplier#000000654' ORDER BY T2.ps_supplycost DESC LIMIT 5", "source_tables": ["supplier", "partsupp"]}, "evidence": "Supplier#000000654 is the name of the supplier which refers to s_name; parts with the most supply cost refer to ps_partkey where MAX(ps_supplycost);"}
{"sample_id": 6770, "db_id": "retails", "final": {"question": "What percentage of customers from France is in the automobile segment?", "sql": "SELECT CAST(SUM(IIF(T1.c_mktsegment = 'AUTOMOBILE', 1, 0)) AS REAL) * 100 / COUNT(T1.c_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'FRANCE'", "source_tables": ["nation", "customer"]}, "evidence": "DIVIDE(COUNT(c_name where c_mktsegment = 'AUTOMOBILE' and n_name = 'FRANCE'), COUNT(c_name where n_name = 'FRANCE')) as percentage;"}
{"sample_id": 6771, "db_id": "retails", "final": {"question": "Name the part which is most profitable.", "sql": "SELECT T.p_name FROM ( SELECT T3.p_name , T2.l_extendedprice * (1 - T2.l_discount) - T1.ps_supplycost * T2.l_quantity AS num FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["part", "partsupp", "lineitem"]}, "evidence": "profit can be calculated as SUBTRACT(MULTIPLY(l_extendedprice, (SUBTRACT(1, l_discount)), MULTIPLY(ps_supplycost, l_quantity))); part which is most profitable refers to p_name where MAX(profit);"}
{"sample_id": 6772, "db_id": "retails", "final": {"question": "List the names of the countries with the below-average number of customers in ascending order of customer numbers.", "sql": "SELECT T2.n_name FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey GROUP BY T2.n_name HAVING COUNT(T1.c_name) > ( SELECT COUNT(customer.c_name) / COUNT(DISTINCT nation.n_name) FROM customer INNER JOIN nation ON customer.c_nationkey = nation.n_nationkey ) ORDER BY COUNT(T1.c_name)", "source_tables": ["nation", "customer"]}, "evidence": "the names of countries with the below-average number of customers refer to n_name where COUNT(c_name) < DIVIDE(COUNT(c_name)), COUNT(n_name);"}
{"sample_id": 6773, "db_id": "retails", "final": {"question": "What percentage of customers from the African region is in the household segment?", "sql": "SELECT CAST(SUM(IIF(T2.r_name = 'AFRICA', 1, 0)) AS REAL) * 100 / COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey INNER JOIN customer AS T3 ON T1.n_nationkey = T3.c_nationkey WHERE T3.c_mktsegment = 'HOUSEHOLD'", "source_tables": ["customer", "nation", "region"]}, "evidence": "DIVIDE(COUNT(c_custkey where c_mktsegment = 'HOUSEHOLD' and r_name = 'AFRICA'), COUNT(c_custkey where r_name = 'AFRICA')) as percentage;"}
{"sample_id": 6774, "db_id": "retails", "final": {"question": "List the name of the top ten items with the most quantity available in the descending order of availability.", "sql": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey ORDER BY T2.ps_availqty DESC LIMIT 10", "source_tables": ["part", "partsupp"]}, "evidence": "items with the most quantity available refer to p_name where MAX(ps_availqty);"}
{"sample_id": 6775, "db_id": "retails", "final": {"question": "Calculate the difference in the average retail price of parts shipped via ship and air.", "sql": "SELECT (CAST(SUM(IIF(T3.l_shipmode = 'SHIP', T1.p_retailprice, 0)) AS REAL) / SUM(IIF(T3.l_shipmode = 'SHIP', 1, 0))) - (CAST(SUM(IIF(T3.l_shipmode = 'AIR', T1.p_retailprice, 0)) AS REAL) / SUM(IIF(T3.l_shipmode = 'AIR', 1, 0))) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN lineitem AS T3 ON T2.ps_suppkey = T3.l_suppkey", "source_tables": ["part", "partsupp", "lineitem"]}, "evidence": "SUBTRACT(DIVIDE(SUM(p_retailprice where l_shipmode = 'SHIP'), COUNT(l_shipmode = 'SHIP')), DIVIDE(SUM(p_retailprice where l_shipmode = 'AIR'), COUNT(l_shipmode = 'AIR')));"}
{"sample_id": 6776, "db_id": "retails", "final": {"question": "What is the average discount for the parts made by Manufacturer#5?", "sql": "SELECT AVG(T3.l_discount) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN lineitem AS T3 ON T2.ps_suppkey = T3.l_suppkey WHERE T1.p_mfgr = 'Manufacturer#5'", "source_tables": ["part", "partsupp", "lineitem"]}, "evidence": "DIVIDE(SUM(l_discount), COUNT(l_partkey)) where p_mfgr = 'Manufacturer#5';"}
{"sample_id": 6777, "db_id": "retails", "final": {"question": "In the parts shipped by rail, how many are of medium priority?", "sql": "SELECT COUNT(T2.l_partkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'RAIL' AND T1.o_orderpriority = '3-MEDIUM'", "source_tables": ["lineitem", "orders"]}, "evidence": "parts shipped by rail refer to l_partkey where l_shipmode = 'RAIL'; medium priority refers to o_orderpriority = '3-MEDIUM';"}
{"sample_id": 6778, "db_id": "retails", "final": {"question": "Among the suppliers in the European region, what percentage have a below-average account balance?", "sql": "SELECT CAST(SUM(IIF(T3.s_acctbal < ( SELECT AVG(supplier.s_acctbal) FROM supplier ), 1, 0)) AS REAL) * 100 / COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey INNER JOIN supplier AS T3 ON T1.n_nationkey = T3.s_nationkey WHERE T2.r_name = 'EUROPE'", "source_tables": ["supplier", "nation", "region"]}, "evidence": "DIVIDE(COUNT(s_acctbal < AVG(s_acctbal)), COUNT(s_suppkey)) as percentage where r_name = 'EUROPE';"}
{"sample_id": 6779, "db_id": "retails", "final": {"question": "Calculate the difference in the average number of low-priority orders shipped by truck in each month of 1995 and 1996.", "sql": "SELECT (CAST(SUM(IIF(STRFTIME('%Y', T2.l_shipdate) = 1995, 1, 0)) AS REAL) / 12) - (CAST(SUM(IIF(STRFTIME('%Y', T2.l_shipdate) = 1996, 1, 0)) AS REAL) / 12) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderpriority = '5-LOW' AND T2.l_shipmode = 'TRUCK'", "source_tables": ["lineitem", "orders"]}, "evidence": "SUBTRACT(DIVIDE(SUM(l_orderkey where year(l_shipdate) = 1995), 12), DIVIDE(SUM(l_orderkey where year(l_shipdate) = 1996), 12)) where o_orderpriority = '5-LOW';"}
{"sample_id": 6780, "db_id": "retails", "final": {"question": "List by their id all customers who have a debit balance in their accounts.", "sql": "SELECT c_custkey FROM customer WHERE c_acctbal < 0", "source_tables": ["customer"]}, "evidence": "customers who have a debt balance refer to c_custkey where c_acctbal < 0;"}
{"sample_id": 6781, "db_id": "retails", "final": {"question": "List by order number the 3 items with the lowest price after applying the discount.", "sql": "SELECT l_orderkey FROM lineitem ORDER BY l_extendedprice * (1 - l_discount) LIMIT 3", "source_tables": ["lineitem"]}, "evidence": "order number refers to l_orderkey; the lowest price after applying the discount refers to MIN(MULTIPLY(l_extendedprice), SUBTRACT(1, l_discount));"}
{"sample_id": 6782, "db_id": "retails", "final": {"question": "How many orders of more than 10 items have been returned?", "sql": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_quantity > 10 AND l_returnflag = 'R'", "source_tables": ["lineitem"]}, "evidence": "more than 10 items have been returned refer to l_returnflag = 'R' where l_quantity > 10; orders refer to l_orderkey;"}
{"sample_id": 6783, "db_id": "retails", "final": {"question": "What is the total price charged for orders shipped by air without shipping instructions?", "sql": "SELECT l_extendedprice * (1 - l_discount) * (1 + l_tax) AS totalprice FROM lineitem WHERE l_shipmode = 'AIR' AND l_shipinstruct = 'NONE'", "source_tables": ["lineitem"]}, "evidence": "SUM(MULTIPLY(MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)), SUM(1, l_tax))) where l_shipmode = 'AIR' and l_shipinstruct = 'NONE';"}
{"sample_id": 6784, "db_id": "retails", "final": {"question": "Of the orders with a lower delivery priority, how many have an urgent priority order?", "sql": "SELECT COUNT(o_orderkey) FROM orders WHERE o_orderpriority = '1-URGENT' GROUP BY o_orderdate ORDER BY o_orderdate DESC LIMIT 1", "source_tables": ["orders"]}, "evidence": "an urgent priority order refers to o_orderkey where o_orderpriority = '1-URGENT'; earlier orderdate have higher priority in delivery; lower delivery priority refers to MAX(o_orderdate);"}
{"sample_id": 6785, "db_id": "retails", "final": {"question": "How many suppliers from Egypt have a debit balance?", "sql": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 AND T2.n_name = 'EGYPT'", "source_tables": ["supplier", "nation"]}, "evidence": "suppliers refer to s_suppkey; Egypt is the name of the nation which refers to n_name = 'EGYPT'; the balance is in debt if s_acctbal < 0;"}
{"sample_id": 6786, "db_id": "retails", "final": {"question": "How many items shipped by REG AIR were ordered on March 22, 1995?", "sql": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'REG AIR' AND T1.o_orderdate = '1995-03-22'", "source_tables": ["lineitem", "orders"]}, "evidence": "items shipped by REG AIR refer to l_linenumber where l_shipmode = 'REG AIR'; ordered on March 22, 1995 refers to o_orderdate = '1995-03-22';"}
{"sample_id": 6787, "db_id": "retails", "final": {"question": "How many European suppliers are there?", "sql": "SELECT COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey INNER JOIN supplier AS T3 ON T1.n_nationkey = T3.s_nationkey WHERE T2.r_name = 'EUROPE'", "source_tables": ["supplier", "nation", "region"]}, "evidence": "European suppliers refer to s_suppkey where r_name = 'EUROPE';"}
{"sample_id": 6788, "db_id": "retails", "final": {"question": "To which segment belongs the customer that made the most orders in April 1994?", "sql": "SELECT T.c_mktsegment FROM ( SELECT T2.c_mktsegment, COUNT(T1.o_orderkey) AS num FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_orderdate LIKE '1994-04-%' GROUP BY T1.o_custkey ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["customer", "orders"]}, "evidence": "segment refers to c_mktsegment; customer made the most orders in April 1994 refers to c_custkey where o_orderdate LIKE '1994-04-%' and MAX(COUNT(o_orderkey));"}
{"sample_id": 6789, "db_id": "retails", "final": {"question": "Lists all parts supplied by Supplier#000000034.", "sql": "SELECT T3.p_name FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T2.s_name = 'Supplier#000000034'", "source_tables": ["part", "partsupp", "supplier"]}, "evidence": "part refers to p_name; Supplier#000000034 refers to s_name = 'Supplier#000000034'"}
{"sample_id": 6790, "db_id": "retails", "final": {"question": "What are the cost prices of large burnished copper?", "sql": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_type = 'LARGE BURNISHED COPPER'", "source_tables": ["part", "partsupp"]}, "evidence": "cost price refers to ps_supplycost; large burnished copper refers to p_type = 'LARGE BURNISHED COPPER'"}
{"sample_id": 6791, "db_id": "retails", "final": {"question": "How many clients from Mozambique required orders with a low priority order?", "sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey INNER JOIN orders AS T3 ON T1.c_custkey = T3.o_custkey WHERE T2.n_name = 'MOZAMBIQUE' AND T3.o_orderpriority = '5-LOW'", "source_tables": ["nation", "customer", "orders"]}, "evidence": "Mozambique refers to n_name = 'MOZAMBIQUE'; low priority order refers to o_orderpriority = '5-LOW'"}
{"sample_id": 6792, "db_id": "retails", "final": {"question": "Indicate the name of the product that is close to being sold out and that has the lowest cost price.", "sql": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T2.ps_availqty < 10 ORDER BY T2.ps_supplycost LIMIT 1", "source_tables": ["part", "partsupp"]}, "evidence": "name of the product refers to p_name; close to being sold out refers to ps_availqty < 10; the lowest cost price refers to min(ps_supplycost)"}
{"sample_id": 6793, "db_id": "retails", "final": {"question": "How many different clerks have served the customer with the address uFTe2u518et8Q8UC?", "sql": "SELECT COUNT(T1.o_clerk) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_address = 'uFTe2u518et8Q8UC'", "source_tables": ["customer", "orders"]}, "evidence": "clerk who have served the customer refers to o_clerk\n"}
{"sample_id": 6794, "db_id": "retails", "final": {"question": "Indicate the name of the parts without discount.", "sql": "SELECT T3.p_name FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T2.l_discount = 0.0000", "source_tables": ["part", "partsupp", "lineitem"]}, "evidence": "name of the part refers to p_name; without discount refers to l_discount = 0.0000"}
{"sample_id": 6795, "db_id": "retails", "final": {"question": "How many suppliers from Germany have left a comment with 'carefully regular packages'?", "sql": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'GERMANY' AND T1.s_comment LIKE '%carefully regular packages%'", "source_tables": ["supplier", "nation"]}, "evidence": "Germany is nation name which refers to n_name = 'GERMANY'; comment with 'carefully regular packages' refers to s_comment LIKE 'carefully regular packages%'"}
{"sample_id": 6796, "db_id": "retails", "final": {"question": "How many products shipped on 19/11/1994 were ordered on 21/09/1994?", "sql": "SELECT COUNT(T2.l_partkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderdate = '1994-09-21' AND T2.l_shipdate = '1994-11-19'", "source_tables": ["lineitem", "orders"]}, "evidence": "shipped on 19/11/1994 refers to l_shipdate = '1994-11-19'; ordered on 21/09/1994 refers to o_orderdate = '1994-09-21'"}
{"sample_id": 6797, "db_id": "retails", "final": {"question": "Calculate the average profit of prom brushed steel products.", "sql": "SELECT SUM(T2.l_extendedprice * (1 - T2.l_discount) - T1.ps_supplycost * T2.l_quantity) / COUNT(T1.ps_partkey) FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_type = 'PROMO BRUSHED STEEL'", "source_tables": ["part", "partsupp", "lineitem"]}, "evidence": "prom brushed steel refers to p_type = 'PROMO BRUSHED STEEL'; average profit = divide(sum(subtract(multiply(l_extendedprice, subtract(1, l_discount)), multiply(ps_supplycost, l_quantity))), count(ps_partkey))"}
{"sample_id": 6798, "db_id": "retails", "final": {"question": "What percentage of customers engaged in the household segment are from Iran?", "sql": "SELECT CAST(SUM(IIF(T2.n_name = 'IRAN', 1, 0)) AS REAL) * 100 / COUNT(T2.n_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'HOUSEHOLD'", "source_tables": ["nation", "customer"]}, "evidence": "the household segment refers to c_mktsegment = 'HOUSEHOLD'; Iran is nation name which refers to n_name = 'IRAN'; percentage = divide(count(c_custkey where n_name = 'IRAN'), count(c_custkey)) where c_mktsegment = 'HOUSEHOLD' * 100%"}
{"sample_id": 6799, "db_id": "retails", "final": {"question": "Please state the segment, the name, the address, and the phone number of customer number 3.", "sql": "SELECT c_mktsegment, c_name, c_address, c_phone FROM customer WHERE c_custkey = 3", "source_tables": ["customer"]}, "evidence": "segment refers to c_mktsegment; name refers to c_name; address refers to c_address; phone number refers to c_phone; customer number 3 refers to c_custkey = 3"}
{"sample_id": 6800, "db_id": "retails", "final": {"question": "Please list any three line item numbers that have 10% off.", "sql": "SELECT l_linenumber FROM lineitem WHERE l_discount = 0.1 LIMIT 3", "source_tables": ["lineitem"]}, "evidence": "line item number refers to l_linenumber; 10% off refers to l_discount = 0.1"}
{"sample_id": 6801, "db_id": "retails", "final": {"question": "How many of the line items that have a quantity greater than 40 have been shipped by air?", "sql": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_quantity > 40 AND l_shipmode = 'AIR'", "source_tables": ["lineitem"]}, "evidence": "quantity greater than 40 refers to l_quantity > 40; shipped by air refers to l_shipmode = 'AIR'"}
{"sample_id": 6802, "db_id": "retails", "final": {"question": "Which ship mode has more \"deliver in person\" instructions, rail or mail?", "sql": "SELECT IIF(SUM(IIF(l_shipmode = 'RAIL', 1, 0)) - SUM(IIF(l_shipmode = 'MAIL', 1, 0)), 'RAIL', 'MAIL') AS result FROM lineitem WHERE l_shipinstruct = 'DELIVER IN PERSON'", "source_tables": ["lineitem"]}, "evidence": "ship mode refers to l_shipmode; \"deliver in person\" instruction refers to l_shipinstruct = 'DELIVER IN PERSON'"}
{"sample_id": 6803, "db_id": "retails", "final": {"question": "What is the total price and the order priority of order number 33?", "sql": "SELECT o_totalprice, o_orderpriority FROM orders WHERE o_orderkey = 33", "source_tables": ["orders"]}, "evidence": "total price refers to o_totalprice; order priority refers to o_orderpriority; order number 33 refers to o_orderkey = 33"}
{"sample_id": 6804, "db_id": "retails", "final": {"question": "How many orders in 1998 had a total price under 950?", "sql": "SELECT COUNT(o_orderkey) AS countorders FROM orders WHERE STRFTIME('%Y', o_orderdate) = '1998' AND o_totalprice < 950", "source_tables": ["orders"]}, "evidence": "1998 refers to year(o_orderdate) = '1998'; a total price under 950 refers to o_totalprice < 950"}
{"sample_id": 6805, "db_id": "retails", "final": {"question": "Please list any three customers with debt.", "sql": "SELECT c_name FROM customer WHERE c_acctbal < 0 LIMIT 3", "source_tables": ["customer"]}, "evidence": "customer refers to c_name; with debt refers to c_acctbal < 0"}
{"sample_id": 6806, "db_id": "retails", "final": {"question": "What is the discounted price of line item number 1?", "sql": "SELECT l_extendedprice * (1 - l_discount) FROM lineitem WHERE l_linenumber = 1", "source_tables": ["lineitem"]}, "evidence": "discounted price refers to multiply(l_extendedprice, subtract(1, l_discount)); line item number 1 refers to l_linenumber = 1"}
{"sample_id": 6807, "db_id": "retails", "final": {"question": "What is the difference between the number of returned items and not returned items with the full price of under 16947.7?", "sql": "SELECT SUM(IIF(l_returnflag = 'A', 1, 0)) - SUM(IIF(l_returnflag = 'N', 1, 0)) AS diff FROM lineitem WHERE l_extendedprice < 16947.7", "source_tables": ["lineitem"]}, "evidence": "full price of under 16947.7 refers to l_extendedprice < 16947.7; returned item refers to l_returnflag = 'R'; not returned item refers to l_returnflag = 'A' OR l_returnflag = 'N'; difference = subtract(count(l_linenumber where l_returnflag = 'A' OR l_returnflag = 'N'), count(l_linenumber where l_returnflag = 'R')) where l_extendedprice < 16947.7"}
{"sample_id": 6808, "db_id": "retails", "final": {"question": "What is the supply cost of large plated tin?", "sql": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_type = 'large plated tin'", "source_tables": ["part", "partsupp"]}, "evidence": "supply cost refers to ps_supplycost; large plated tin refers to p_type = 'large plated tin'"}
{"sample_id": 6809, "db_id": "retails", "final": {"question": "Please name any three parts that have an available quantity of more than 9998.", "sql": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T2.ps_availqty > 9998 LIMIT 3", "source_tables": ["part", "partsupp"]}, "evidence": "part name refers to p_name; an available quantity of more than 9998 refers to ps_availqty > 9998"}
{"sample_id": 6810, "db_id": "retails", "final": {"question": "Please list any two parts that come with the wrap bag container and have a supply cost of under 10.", "sql": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T2.ps_supplycost < 10 AND T1.p_container = 'WRAP BAG' LIMIT 2", "source_tables": ["part", "partsupp"]}, "evidence": "part name refers to p_name; wrap bag container refers to p_container = 'WRAP BAG'; supply cost of under 10 refers to ps_supplycost < 10"}
{"sample_id": 6811, "db_id": "retails", "final": {"question": "What is the nationality of supplier number 1?", "sql": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_suppkey = 1", "source_tables": ["supplier", "nation"]}, "evidence": "nationality refers to n_name; supplier number 1 refers to s_suppkey = 1"}
{"sample_id": 6812, "db_id": "retails", "final": {"question": "What are the countries that belong to Africa?", "sql": "SELECT T2.n_name FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey WHERE T1.r_name = 'Africa'", "source_tables": ["nation", "region"]}, "evidence": "country is nation name which refers to n_name; Africa is region name refers to r_name = 'Africa'"}
{"sample_id": 6813, "db_id": "retails", "final": {"question": "Which region has the lowest number of countries?", "sql": "SELECT T.r_name FROM ( SELECT T1.r_name, COUNT(T2.n_name) AS num FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey GROUP BY T1.r_name ) AS T ORDER BY T.num LIMIT 1", "source_tables": ["nation", "region"]}, "evidence": "region refers to has r_name; the lowest number of countries refers to min(count(n_name))"}
{"sample_id": 6814, "db_id": "retails", "final": {"question": "How many customers from the furniture segments come from Iraq?", "sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'FURNITURE' AND T2.n_name = 'IRAQ'", "source_tables": ["nation", "customer"]}, "evidence": "furniture segment refers to c_mktsegment = 'FURNITURE'; Iraq refers to n_name = 'Iraq'"}
{"sample_id": 6815, "db_id": "retails", "final": {"question": "What is the name of the customer number 93697 with the total order price of 191918.92?", "sql": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice = 191918.92 AND T1.o_custkey = 93697", "source_tables": ["customer", "orders"]}, "evidence": "customer name refers to c_name; number 93697 refers to o_custkey = 93697; total order price of 191918.92 refers to o_totalprice = 191918.92"}
{"sample_id": 6816, "db_id": "retails", "final": {"question": "Which nation and region does the Customer#000000008 come from?", "sql": "SELECT T1.n_name, T3.r_name FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_name = 'Customer#000000008'", "source_tables": ["customer", "nation", "region"]}, "evidence": "nation refers to n_name; region refers to r_name; Customer#000000008 refers to c_name = 'Customer#000000008'"}
{"sample_id": 6915, "db_id": "ice_hockey_draft", "final": {"question": "What is the height of David Bornhammar in inches?", "sql": "SELECT T2.height_in_inch FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'David Bornhammar'", "source_tables": ["playerinfo", "height_info"]}, "evidence": "heigh in inches refers to height_in_inch;"}
{"sample_id": 6918, "db_id": "ice_hockey_draft", "final": {"question": "What is the name of the tallest player?", "sql": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id ORDER BY T2.height_in_cm DESC LIMIT 1", "source_tables": ["playerinfo", "height_info"]}, "evidence": "tallest player refers to MAX(height_in_cm);"}
{"sample_id": 6919, "db_id": "ice_hockey_draft", "final": {"question": "How much does David Bornhammar weigh in kilograms?", "sql": "SELECT T2.weight_in_kg FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.PlayerName = 'David Bornhammar'", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "weigh in kilograms refers to weight_in_kg;"}
{"sample_id": 6920, "db_id": "ice_hockey_draft", "final": {"question": "How many players weigh more than 90 kg?", "sql": "SELECT COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "weigh more than 90 kg refers to weight_in_kg > 90;"}
{"sample_id": 6921, "db_id": "ice_hockey_draft", "final": {"question": "Among the players that weigh more than 90 kg, how many of them have a position of defense?", "sql": "SELECT COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90 AND T1.position_info = 'D'", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "weigh more than 90 kg refers to weight_in_kg > 90; position of defense refers to position_info = 'D' ;"}
{"sample_id": 6922, "db_id": "ice_hockey_draft", "final": {"question": "Among the players that weigh more than 90 kg, what is the name of the player that has the most attendance in the player's first 7 years of NHL career?", "sql": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90 AND T1.sum_7yr_GP = ( SELECT MAX(T1.sum_7yr_GP) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90 )", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "weigh more than 90 kg refers to weight_in_kg > 90; name of the player refers to PlayerName; most attendance in the player's first 7 years of NHL career refers to MAX(sum_7yr_GP);"}
{"sample_id": 6923, "db_id": "ice_hockey_draft", "final": {"question": "What is the weight of the player with the longest time on ice in the player\u2019s first 7 years of NHL career in kilograms?", "sql": "SELECT T2.weight_in_kg FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.sum_7yr_TOI = ( SELECT MAX(t.sum_7yr_TOI) FROM PlayerInfo t )", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "weight in kilograms refers to weight_in_kg; longest time on ice in the player's first 7 years of NHL career refers to MAX(sum_7yr_TOI);"}
{"sample_id": 6924, "db_id": "ice_hockey_draft", "final": {"question": "How much taller is David Bornhammar than Pauli Levokari in centimeters?", "sql": "SELECT ( SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'David Bornhammar' ) - ( SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'Pauli Levokari' )", "source_tables": ["playerinfo", "height_info"]}, "evidence": "how much taller = SUBTRACT(SUM(height_in_cm WHERE PlayerName = 'David Bornhammar'), SUM(height_in_cm WHERE PlayerName = 'Pauli Levokari')); height in centimeters refers to height_in_cm;"}
{"sample_id": 6925, "db_id": "ice_hockey_draft", "final": {"question": "Among all the players that are right-shooted, how many of them weigh over 90 kg?", "sql": "SELECT COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90 AND T1.shoots = 'R'", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "right-shooted refers to shoots = 'R'; weigh over 90 kg refers to weight_in_kg > 90;"}
{"sample_id": 6926, "db_id": "ice_hockey_draft", "final": {"question": "Please list the names of all the players that are over 90 kg and are right-shooted.", "sql": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90 AND T1.shoots = 'R'", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "names of the players refers to PlayerName; over 90 kg refers to weight_in_kg > 90; right-shooted refers to shoots = 'R';"}
{"sample_id": 6927, "db_id": "ice_hockey_draft", "final": {"question": "What is the BMI of David Bornhammar?", "sql": "SELECT CAST(T2.weight_in_kg AS REAL) / (CAST(T3.height_in_cm AS REAL) / 100 * (CAST(T3.height_in_cm AS REAL) / 100)) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T1.PlayerName = 'David Bornhammar'", "source_tables": ["playerinfo", "height_info", "weight_info"]}, "evidence": "BMI = DIVIDE(weight_in_kg, power(DIVIDE(height_in_cm, 100), 2));"}
{"sample_id": 6928, "db_id": "ice_hockey_draft", "final": {"question": "What is the average height in centimeters of all the players in the position of defense?", "sql": "SELECT CAST(SUM(T2.height_in_cm) AS REAL) / COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.position_info = 'D'", "source_tables": ["playerinfo", "height_info"]}, "evidence": "average = AVG(height_in_cm); players refers to PlayerName; position of defense refers to position_info = 'D' ;"}
{"sample_id": 6929, "db_id": "ice_hockey_draft", "final": {"question": "What is the weight in pounds of the heaviest player?", "sql": "SELECT MAX(T2.weight_in_lbs) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "weight in pounds refers to weight_in_lbs; heaviest player refers to MAX(weight_in_lbs);"}
{"sample_id": 6931, "db_id": "ice_hockey_draft", "final": {"question": "Among the players whose total NHL games played in their first 7 years of NHL career is no less than 500, what is the name of the player who committed the most rule violations?", "sql": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.sum_7yr_GP > 500 ORDER BY T2.PIM DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "total NHL games played in their first 7 years of NHL career is no less than 500 refers to sum_7yr_GP > 500; name of the player refers to PlayerName; committed the most rule violations refers to MAX(PIM);"}
{"sample_id": 6932, "db_id": "ice_hockey_draft", "final": {"question": "What is the height in centimeter of the tallest player born in Edmonton, Alberta, Canada?", "sql": "SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.birthplace = 'Edmonton, AB, CAN' ORDER BY T2.height_in_cm DESC LIMIT 1", "source_tables": ["playerinfo", "height_info"]}, "evidence": "height in centimeter refers to height_in_cm; tallest player refers to MAX(height_in_cm); born in Edmonton, Alberta, Canada refers to birthplace = 'Edmonton, AB, CAN';"}
{"sample_id": 6933, "db_id": "ice_hockey_draft", "final": {"question": "How many players, who were drafted by Anaheim Ducks in 2008, have played for U.S. National U18 Team?", "sql": "SELECT COUNT(DISTINCT T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.overallby = 'Anaheim Ducks' AND T1.draftyear = 2008 AND T2.TEAM = 'U.S. National U18 Team'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "drafted by Anaheim Ducks refers to overallby = 'Anaheim Ducks'; in 2008 refers to draftyear = 2008; played for U.S. National U18 Team refers to TEAM = 'U.S. National U18 Team';"}
{"sample_id": 6934, "db_id": "ice_hockey_draft", "final": {"question": "What is the weight in kilograms of the player with the highest number of goal differential of all time?", "sql": "SELECT T3.weight_in_kg FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN weight_info AS T3 ON T2.weight = T3.weight_id ORDER BY T1.PLUSMINUS DESC LIMIT 1", "source_tables": ["playerinfo", "weight_info", "seasonstatus"]}, "evidence": "weight in kilograms refers to weight_in_kg; highest number of goal differential of all time refers to MAX(PLUSMINUS);"}
{"sample_id": 6935, "db_id": "ice_hockey_draft", "final": {"question": "Who is the most valuable player in QMJHL league during the 2004-2005 season?", "sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON BETWEEN '2004' AND '2005' AND T1.LEAGUE = 'QMJHL' ORDER BY T1.P DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "most valuable player refers to MAX(P); QMJHL league refers to LEAGUE = 'QMJHL'; 2004-2005 season refers to SEASON = '2004-2005';"}
{"sample_id": 6936, "db_id": "ice_hockey_draft", "final": {"question": "What are the names of the players who played for Acadie-Bathurst Titan during the regular season in 1998-1999?", "sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '1998-1999' AND T1.GAMETYPE = 'Regular Season' AND T1.TEAM = 'Acadie-Bathurst Titan'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "names of the players refers to PlayerName; played for Acadie-Bathurst Titan refers to TEAM = 'AcadieandBathurst Titan'; regular season refers to GAMETYPE = 'Regular Season'; in 1998-1999 refers to SEASON = '1998-1999';"}
{"sample_id": 6937, "db_id": "ice_hockey_draft", "final": {"question": "How many games did the tallest player have ever played?", "sql": "SELECT T1.GP FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.ELITEID = ( SELECT t.ELITEID FROM PlayerInfo t ORDER BY t.height DESC LIMIT 1 )", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "tallest player refers to MAX(height_in_cm);"}
{"sample_id": 6938, "db_id": "ice_hockey_draft", "final": {"question": "Who is the youngest player to have played during the 1997-1998 season for OHL League?", "sql": "SELECT DISTINCT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '1997-1998' AND T1.LEAGUE = 'OHL' ORDER BY T2.birthdate DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "youngest player refers to MAX(birthdate); 1997-1998 season refers to SEASON = '1997-1998'; OHL league refers to LEAGUE = 'OHL';"}
{"sample_id": 6939, "db_id": "ice_hockey_draft", "final": {"question": "Among the players who played 72 games, how many are left-shooters?", "sql": "SELECT COUNT(T2.ELITEID) FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.GP = 72 AND T2.shoots = 'L'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "played 72 games refers to GP = 72; left-shooters refers to shoots = 'L';"}
{"sample_id": 6940, "db_id": "ice_hockey_draft", "final": {"question": "What is the difference in the number of goals scored by Pavel Brendl during the regular season versus the playoffs in the 1998-1999 season?", "sql": "SELECT T3.Rs_G - T4.Pf_G AS diff FROM ( SELECT T2.PlayerName, T1.G AS Rs_G FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Pavel Brendl' AND T1.SEASON = '1998-1999' AND T1.GAMETYPE = 'Regular Season' ) AS T3 INNER JOIN ( SELECT T2.PlayerName, T1.G AS Pf_G FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Pavel Brendl' AND T1.SEASON = '1998-1999' AND T1.GAMETYPE = 'Playoffs' ) AS T4 ON T3.PlayerName = T4.PlayerName", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "difference = SUBTRACT(SUM(G WHERE GAMETYPE = 'Regular Season'), SUM(G WHERE GAMETYPE = 'Playoffs') WHERE SEASON = '1998-1999'); number of goals scored refers to G; regular season refers to GAMETYPE = 'Regular Season'; playoffs refers to GAMETYPE = 'Playoffs'; 1998-1999 season refers to SEASON = '1998-1999';"}
{"sample_id": 6941, "db_id": "ice_hockey_draft", "final": {"question": "What is the average weight in pounds of all the players with the highest prospects for the draft?", "sql": "SELECT CAST(SUM(T2.weight_in_lbs) AS REAL) / COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.CSS_rank = ( SELECT MAX(CSS_rank) FROM PlayerInfo )", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "average = AVG(weight_in_lbs); weight in pounds refers to weight_in_lbs; players refers to PlayerName; highest prospects for the draft refers to MAX(CSS_rank);"}
{"sample_id": 6942, "db_id": "ice_hockey_draft", "final": {"question": "Among all the teams that made the playoffs in the 2007-2008 season, identify the percentage that played over 20 games.", "sql": "SELECT CAST(COUNT(CASE WHEN GP > 20 THEN TEAM ELSE NULL END) AS REAL) * 100 / COUNT(TEAM) FROM SeasonStatus WHERE SEASON = '2007-2008' AND GAMETYPE = 'Playoffs'", "source_tables": ["seasonstatus"]}, "evidence": "playoffs refers to GAMETYPE = 'Playoffs'; percentage = MULTIPLY(DIVIDE(SUM(GP > 20), COUNT(ELITEID)), 100); played over 20 games refers to GP > 20; 2007-2008 season refers to SEASON = '2007-2008';"}
{"sample_id": 6943, "db_id": "ice_hockey_draft", "final": {"question": "Name the player who scored the most goals in a single game in the 2007-2008 season of WHL?", "sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2007-2008' AND T1.LEAGUE = 'WHL' ORDER BY T1.G DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "name of the player refers to PlayerName; scored the most goals in a single game refers to MAX(G); WHL refers to LEAGUE = 'WHL'; 2007-2008 season refers to SEASON = '2007-2008';"}
{"sample_id": 6944, "db_id": "ice_hockey_draft", "final": {"question": "Name the Chilliwack Chiefs players who have scored 100 points or more in the NHL.", "sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.TEAM = 'Chilliwack Chiefs' AND T1.P >= 100", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "name of the player refers to PlayerName; Chilliwack Chiefs refers to TEAM = 'Chilliwack Chiefs'; scored 100 points or more in the NHL refers to P > 100;"}
{"sample_id": 6945, "db_id": "ice_hockey_draft", "final": {"question": "Identify the players who weigh 120 kg.", "sql": "SELECT T2.PlayerName FROM weight_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.weight_id = T2.weight WHERE T1.weight_in_kg = 120", "source_tables": ["weight_info", "playerinfo"]}, "evidence": "players refers to PlayerName; weigh 120 kg refers to weight_in_kg = 120;"}
{"sample_id": 6946, "db_id": "ice_hockey_draft", "final": {"question": "Identify the players with the same height as Brian Gionta. How tall are they?", "sql": "SELECT T2.PlayerName, T1.height_in_cm FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height WHERE T2.height = ( SELECT height FROM PlayerInfo WHERE PlayerName = 'Brian Gionta' )", "source_tables": ["playerinfo", "height_info"]}, "evidence": "players refers to PlayerName; height refers to height_in_cm;"}
{"sample_id": 6947, "db_id": "ice_hockey_draft", "final": {"question": "Identify the name and position of the player who has committed the most rule violations.", "sql": "SELECT T2.PlayerName, T2.position_info FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.PIM = ( SELECT MAX(PIM) FROM SeasonStatus )", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "name of the player refers to PlayerName; position of the player refers to position_info; committed the most rule violations refers to MAX(PIM);"}
{"sample_id": 6948, "db_id": "ice_hockey_draft", "final": {"question": "Name the player who has the most NHL points in draft year.", "sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.P = ( SELECT MAX(P) FROM SeasonStatus )", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "name of the player refers to PlayerName; most NHL points in draft year refers to MAX(P);"}
{"sample_id": 6949, "db_id": "ice_hockey_draft", "final": {"question": "Among all players drafted by the Toronto Maple Leafs, identify the percentage who are from Eastern Europe.", "sql": "SELECT CAST(COUNT(CASE WHEN nation IN ('Belarus', 'Czech Rep.', 'Slovakia', 'Ukraine') THEN ELITEID ELSE NULL END) AS REAL) * 100 / COUNT(ELITEID) FROM PlayerInfo WHERE overallby = 'Toronto Maple Leafs'", "source_tables": ["playerinfo"]}, "evidence": "players refers to PlayerName; drafted by the Toronto Maple Leafs refers to overallby = 'Toronto Maple Leafs'; percentage = MULTIPLY(DIVIDE(SUM(nation = 'Eastern Europe'), COUNT(ELITEID) WHERE overallby = 'Toronto Maple Leafs'), 100); from Eastern Europe refers to nation in ('Belarus', 'Bulgaria', 'Czech Republic', 'Hungary', 'Moldova', 'Poland', 'Romania', 'Slovakia', 'Ukraine'); countries in a continent can be identified by referring to https://worldpopulationreview.com/country-rankings/list-of-countries-by-continent;"}
{"sample_id": 6950, "db_id": "ice_hockey_draft", "final": {"question": "Among all players drafted by the Toronto Maple Leafs in 2008, identify the player with the highest prospects for the draft.", "sql": "SELECT PlayerName FROM PlayerInfo WHERE overallby = 'Toronto Maple Leafs' AND draftyear = '2008' ORDER BY CSS_rank DESC LIMIT 1", "source_tables": ["playerinfo"]}, "evidence": "players refers to PlayerName; drafted by the Toronto Maple Leafs refers to overallby = 'Toronto Maple Leafs'; highest prospects for the draft refers to MAX(CSS_rank);"}
{"sample_id": 6951, "db_id": "ice_hockey_draft", "final": {"question": "Name the player and his team who made the playoffs in the 2006-2007 season of SuperElit league with the highest points.", "sql": "SELECT T2.PlayerName, T1.TEAM FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2006-2007' AND T1.GAMETYPE = 'Playoffs' AND T1.LEAGUE = 'SuperElit' ORDER BY T1.P DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "name of the player refers to PlayerName; playoffs refers to GAMETYPE = 'Playoffs'; highest points refers to MAX(P); 2006-2007 season refers to SEASON = '2006-2007'; SuperElit league refers to LEAGUE = 'SuperElit';"}
{"sample_id": 6952, "db_id": "ice_hockey_draft", "final": {"question": "How many players who were drafted by the Toronto Maple Leafs have played over 300 games in their first 7 years of the NHL career?", "sql": "SELECT COUNT(ELITEID) FROM PlayerInfo WHERE overallby = 'Toronto Maple Leafs' AND sum_7yr_GP > 300", "source_tables": ["playerinfo"]}, "evidence": "drafted by the Toronto Maple Leafs refers to overallby = 'Toronto Maple Leafs'; played over 300 games in their first 7 years of the NHL career refers to sum_7yr_GP > 300;"}
{"sample_id": 6953, "db_id": "ice_hockey_draft", "final": {"question": "How tall is the player from Yale University who picked up 28 penalty minutes in the 2005-2006 season?", "sql": "SELECT T3.height_in_cm FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T2.height = T3.height_id WHERE T1.SEASON = '2005-2006' AND T1.TEAM = 'Yale Univ.' AND T1.PIM = 28", "source_tables": ["playerinfo", "height_info", "seasonstatus"]}, "evidence": "how tall refers to height_in_cm; Yale University refers to TEAM = 'Yale Univ.'; 28 penalty minutes refers to PIM = '28'; 2005-2006 season refers to SEASON = '2005-2006';"}
{"sample_id": 6954, "db_id": "ice_hockey_draft", "final": {"question": "Among all goals scored by Calgary Hitmen in the 2007-2008 season, identify the percentage scored by Ian Schultz.", "sql": "SELECT CAST(SUM(CASE WHEN T2.PlayerName = 'Ian Schultz' THEN T1.G ELSE 0 END) AS REAL) * 100 / SUM(T1.G) FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2007-2008' AND T1.TEAM = 'Calgary Hitmen'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "goals scored refers to G; Calgary Hitmen refers to TEAM = 'Calgary Hitmen'; percentage = MULTIPLY(DIVIDE(SUM(G WHERE PlayerName = 'Ian Schultz'), SUM(G)), 100); 2007-2008 season refers to SEASON = '2007-2008';"}
{"sample_id": 6955, "db_id": "ice_hockey_draft", "final": {"question": "Among all penalty minutes picked up by Ak Bars Kazan in the 1999-2000 season, identify the percentage picked up by Yevgeni Muratov.", "sql": "SELECT CAST(SUM(CASE WHEN T2.PlayerName = 'Yevgeni Muratov' THEN T1.PIM ELSE 0 END) AS REAL) * 100 / SUM(T1.PIM) FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '1999-2000' AND T1.TEAM = 'Ak Bars Kazan'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "penalty minutes refers to PIM; Ak Bars Kazan refers to TEAM = 'Ak Bars Kazan'; percentage = MULTIPLY(DIVIDE(SUM(PIM WHERE PlayerName = 'Yevgeni Muratov'), SUM(PIM)), 100.0); 1999-2000 season refers to SEASON = '1999-2000';"}
{"sample_id": 6956, "db_id": "ice_hockey_draft", "final": {"question": "What is the birthplace of Aaron Gagnon?", "sql": "SELECT birthplace FROM PlayerInfo WHERE PlayerName = 'Aaron Gagnon'", "source_tables": ["playerinfo"]}, "evidence": "FALSE;"}
{"sample_id": 6957, "db_id": "ice_hockey_draft", "final": {"question": "What is the weight in kg of Tony Martensson?", "sql": "SELECT T2.weight_in_kg FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.PlayerName = 'Tony Martensson'", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "FALSE;"}
{"sample_id": 6958, "db_id": "ice_hockey_draft", "final": {"question": "List out the name of players who weight 190 lbs.", "sql": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_lbs = 190", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "name of players refers to PlayerName; weight 190 lbs refers to weight_in_lbs = 190;"}
{"sample_id": 6959, "db_id": "ice_hockey_draft", "final": {"question": "Who has the heaviest weight?", "sql": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id ORDER BY T2.weight_in_kg DESC LIMIT 1", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "who refers to PlayerName; heaviest weight refers to MAX(weight_in_kg);"}
{"sample_id": 6960, "db_id": "ice_hockey_draft", "final": {"question": "What is the percentage of players who were born in Denmark and weight above 154 lbs?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.nation = 'Denmark' AND T2.weight_in_lbs > 154 THEN T1.ELITEID ELSE NULL END) AS REAL) * 100 / COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(weight_in_lbs > 154 and nation = 'Denmark'), COUNT(ELITEID)), 100); players refers to PlayerName; born in Denmark refers to nation = 'Denmark'; weight above 154 lbs refers to weight_in_lbs > 154;"}
{"sample_id": 6961, "db_id": "ice_hockey_draft", "final": {"question": "Which team does Andreas Jamtin belong to?", "sql": "SELECT DISTINCT T1.TEAM FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Andreas Jamtin'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "FALSE;"}
{"sample_id": 6962, "db_id": "ice_hockey_draft", "final": {"question": "List out the seasons that Niklas Eckerblom played.", "sql": "SELECT DISTINCT T1.SEASON FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Niklas Eckerblom'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "FALSE;"}
{"sample_id": 6963, "db_id": "ice_hockey_draft", "final": {"question": "Mention the type of game that Matthias Trattnig played.", "sql": "SELECT DISTINCT T1.GAMETYPE FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Matthias Trattnig'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "type of game refers to GAMETYPE;"}
{"sample_id": 6964, "db_id": "ice_hockey_draft", "final": {"question": "List out the nation of players who played for the 1997-1998 season .", "sql": "SELECT DISTINCT T2.nation FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '1997-1998'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "players refers to PlayerName; 1997-1998 season refers to SEASON = '1997-1998';"}
{"sample_id": 6999, "db_id": "works_cycles", "final": {"question": "What is the average standard cost of product number CA-1098?", "sql": "SELECT AVG(T2.StandardCost) FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductNumber = 'CA-1098'", "source_tables": ["product", "productcosthistory"]}, "evidence": "Average cost = AVG(StandardCost)"}
{"sample_id": 7000, "db_id": "works_cycles", "final": {"question": "For all the products, list the product name and its corresponding start date for the current standard cost.", "sql": "SELECT T1.Name, T2.StartDate FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T2.EndDate IS NULL", "source_tables": ["product", "productcosthistory"]}, "evidence": "The current standard cost refers to EndDate is NULL"}
{"sample_id": 7001, "db_id": "works_cycles", "final": {"question": "List the products whereby the standard cost is $80 more than previous standard cost in history.", "sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.StandardCost - T2.StandardCost > 80 GROUP BY T1.Name", "source_tables": ["product", "productcosthistory"]}, "evidence": "SUBTRACT(product.StandardCost, CostHistory.StandardCost)>80"}
{"sample_id": 7002, "db_id": "works_cycles", "final": {"question": "Name all products and total quantity for each item for shopping cart ID 14951.", "sql": "SELECT T1.Name, T2.Quantity FROM Product AS T1 INNER JOIN ShoppingCartItem AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ShoppingCartID = 14951", "source_tables": ["product", "shoppingcartitem"]}, "evidence": ""}
{"sample_id": 7003, "db_id": "works_cycles", "final": {"question": "List the product name with more than 5 quantity in the shopping cart.", "sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN ShoppingCartItem AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Quantity > 5", "source_tables": ["product", "shoppingcartitem"]}, "evidence": "Product with more than 5 quantity refers to Quantity>5"}
{"sample_id": 7004, "db_id": "works_cycles", "final": {"question": "For all the purchase order transactions, name all the products with low quality.", "sql": "SELECT DISTINCT T1.Name FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Class = 'L' AND T2.TransactionType = 'P' ORDER BY T1.Name", "source_tables": ["product", "transactionhistory"]}, "evidence": "Low quality refers to the product's quality class, therefore Class = 'L'"}
{"sample_id": 7005, "db_id": "works_cycles", "final": {"question": "Provide all the transactions whereby the quantiy is more than 10,000 pieces. State the product name and the selling price.", "sql": "SELECT DISTINCT T1.Name, T1.ListPrice FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Quantity > 10000", "source_tables": ["product", "transactionhistory"]}, "evidence": "Quantity more than 10,000 pieces refers to Quantity>10000; selling price refers to ListPrice"}
{"sample_id": 7006, "db_id": "works_cycles", "final": {"question": "Which is a high quality product but with the lowest transacted quantity?", "sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Class = 'H' ORDER BY T2.Quantity ASC LIMIT 1", "source_tables": ["product", "transactionhistory"]}, "evidence": "High quality refers to the product's quality class, therefore Class = 'H'; the lowest transacted quantity refers to Quantity = 1"}
{"sample_id": 7007, "db_id": "works_cycles", "final": {"question": "How many transactions are there for product under the Mountain line?", "sql": "SELECT COUNT(T2.TransactionID) FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductLine = 'M'", "source_tables": ["product", "transactionhistory"]}, "evidence": "The Mountain line refers to the product line, therefore ProductLine = 'M'"}
{"sample_id": 7008, "db_id": "works_cycles", "final": {"question": "How much would be the total sales profit for shopping cart ID 20621 ?", "sql": "SELECT SUM((T1.ListPrice - T1.StandardCost) * T2.Quantity) FROM Product AS T1 INNER JOIN ShoppingCartItem AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ShoppingCartID = 20621", "source_tables": ["product", "shoppingcartitem"]}, "evidence": "Sales profit = MULTIPLY(SUBTRACT(ListPrice, StandardCost; Quantity)), where ShoppingCartID = '20621'"}
{"sample_id": 7009, "db_id": "works_cycles", "final": {"question": "List all product names that are high in quality. Please also state its selling price.", "sql": "SELECT Name, ListPrice FROM Product WHERE Class = 'H'", "source_tables": ["product"]}, "evidence": "High quality refers to the product's quality class, therefore Class = 'H'"}
{"sample_id": 7010, "db_id": "works_cycles", "final": {"question": "Which product line has the most products that are salable?", "sql": "SELECT ProductLine FROM Product WHERE FinishedGoodsFlag = 1 GROUP BY ProductLine ORDER BY COUNT(FinishedGoodsFlag) DESC LIMIT 1", "source_tables": ["product"]}, "evidence": "Saleable product refers to FinishedGoodsFlag = 1"}
{"sample_id": 7011, "db_id": "works_cycles", "final": {"question": "Provide details of review from reviewer whose name begin with letter 'J'. State the product ID, rating and comments.", "sql": "SELECT ProductID, Rating, Comments FROM ProductReview WHERE ReviewerName LIKE 'J%'", "source_tables": ["productreview"]}, "evidence": "reviewer whose name begin with letter 'J' = ReviewerName LIKE 'J%'"}
{"sample_id": 7012, "db_id": "works_cycles", "final": {"question": "State the product name, product line, rating and the selling price of product with the lowest rating.", "sql": "SELECT T1.Name, T1.ProductLine, T2.Rating, T1.ListPrice FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID ORDER BY T2.Rating ASC LIMIT 1", "source_tables": ["product", "productreview"]}, "evidence": "Product with the lowest rating refers to the rating\ngiven by the\nreviewer where Rating = 1"}
{"sample_id": 7013, "db_id": "works_cycles", "final": {"question": "Calculate the profit of each products. List all products with more than $100 in profit.", "sql": "SELECT DISTINCT Name FROM Product WHERE ListPrice - StandardCost > 100", "source_tables": ["product"]}, "evidence": "Profit = AVG(SUBTRACT(ListPrice, StandardCost)>100"}
{"sample_id": 7014, "db_id": "works_cycles", "final": {"question": "List down the product name, reviewer name, rating and comments for product under the road line.", "sql": "SELECT T1.Name, T2.ReviewerName, T2.Rating, T2.Comments FROM Product AS T1 INNER JOIN ProductReview AS T2 USING (productID) WHERE T1.ProductLine = 'R'", "source_tables": ["product", "productreview"]}, "evidence": "The Road line refers to the product line, therefore ProductLine = 'R'"}
{"sample_id": 7015, "db_id": "works_cycles", "final": {"question": "How many people reviewed for product named HL Mountain Pedal? What is the average rating?", "sql": "SELECT COUNT(T1.ProductID), AVG(T2.Rating) FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'HL Mountain Pedal'", "source_tables": ["product", "productreview"]}, "evidence": "AVG(Rating) = DIVIDE(SUM(rating), COUNT(ReviewerName))"}
{"sample_id": 7016, "db_id": "works_cycles", "final": {"question": "List the purchase order whereby all received quantity were rejected? Name those product.", "sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.RejectedQty = T2.ReceivedQty AND T2.RejectedQty <> 0", "source_tables": ["product", "purchaseorderdetail"]}, "evidence": "Rejected refers rejected product in which to RejectedQty = 1"}
{"sample_id": 7017, "db_id": "works_cycles", "final": {"question": "Among all products without any rejected quantity, which product has the highest line total? State the product name and unit price.", "sql": "SELECT T1.Name, T2.UnitPrice FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.RejectedQty = 0 ORDER BY T2.LineTotal DESC LIMIT 1", "source_tables": ["product", "purchaseorderdetail"]}, "evidence": "Product without any rejected quantity refers to RejectedQty = 0"}
{"sample_id": 7018, "db_id": "works_cycles", "final": {"question": "List all product names and its product line for all purchase order with order quantity of 5000 or more.", "sql": "SELECT T1.Name, T1.ProductLine FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderQty > 4999", "source_tables": ["product", "purchaseorderdetail"]}, "evidence": "Purchase order with order quantity of 5000 or more refers to OrderQty> = 5000"}
{"sample_id": 7019, "db_id": "works_cycles", "final": {"question": "What is the total ordered quantity for products under the 'Touring' line?", "sql": "SELECT SUM(T2.OrderQty) FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductLine = 'T'", "source_tables": ["product", "purchaseorderdetail"]}, "evidence": "The Touring line refers to the product line, therefore ProductLine = 'T'"}
{"sample_id": 7020, "db_id": "works_cycles", "final": {"question": "Among the low quality product, which product has the highest line total? List the product name and its line total?", "sql": "SELECT T1.Name, T2.LineTotal FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE Class = 'L' ORDER BY OrderQty * UnitPrice DESC LIMIT 1", "source_tables": ["product", "purchaseorderdetail"]}, "evidence": "Low quality refers to the product's quality class, therefore Class = 'L'"}
{"sample_id": 7021, "db_id": "works_cycles", "final": {"question": "Which product has the highest profit on net? State the product name.", "sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID ORDER BY T2.LastReceiptCost - T2.StandardPrice DESC LIMIT 1", "source_tables": ["product", "productvendor"]}, "evidence": "Profit on net = SUBTRACT(LastReceiptCost, StandardPrice)"}
{"sample_id": 7022, "db_id": "works_cycles", "final": {"question": "List all products with minimum order quantity of 100 and order them by product name in descending order.", "sql": "SELECT DISTINCT T1.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID WHERE T2.MinOrderQty = 100 ORDER BY T1.Name DESC", "source_tables": ["product", "productvendor"]}, "evidence": "miinimum order quantity refers to MinOrderQty = 100"}
{"sample_id": 7023, "db_id": "works_cycles", "final": {"question": "List the name and calculate its profit for product with the highest rating in review.", "sql": "SELECT T1.Name, T1.ListPrice - T1.StandardCost FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID ORDER BY T2.Rating DESC LIMIT 1", "source_tables": ["product", "productreview"]}, "evidence": "Profit = SUBTRACT(ListPrice, StandardCost); the highest rating in review refers to Rating = 5"}
{"sample_id": 7024, "db_id": "works_cycles", "final": {"question": "What is the total profit all transactions with product ID 827?", "sql": "SELECT SUM((T1.ListPrice - T1.StandardCost) * T2.Quantity) FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID = 827", "source_tables": ["product", "transactionhistory"]}, "evidence": "Profit = MULTIPLY(SUBTRACT(ListPrice, StandardCost) Quantity))"}
{"sample_id": 7025, "db_id": "works_cycles", "final": {"question": "Which currency pair's average exchange rate for the day is the highest?", "sql": "SELECT FromCurrencyCode, ToCurrencyCode FROM CurrencyRate ORDER BY AverageRate DESC LIMIT 1", "source_tables": ["currencyrate"]}, "evidence": "currency pair refers to FromCurrencyCode/ToCurrencyCode"}
{"sample_id": 7026, "db_id": "works_cycles", "final": {"question": "How many products with the highest unit price were ordered?", "sql": "SELECT OrderQty FROM PurchaseOrderDetail ORDER BY UnitPrice DESC LIMIT 1", "source_tables": ["purchaseorderdetail"]}, "evidence": "number of products refers to OrderQty"}
{"sample_id": 7027, "db_id": "works_cycles", "final": {"question": "Between Northwest and Southeast of the United States, which territory one recorded the highest amount of sales last year?", "sql": "SELECT Name FROM SalesTerritory WHERE CountryRegionCode = 'US' AND (Name = 'Northwest' OR Name = 'Southeast') ORDER BY SalesLastYear DESC LIMIT 1", "source_tables": ["salesterritory"]}, "evidence": "United States refers to CountryRegionCode = 'US';"}
{"sample_id": 7028, "db_id": "works_cycles", "final": {"question": "What is the full name of the Document Control Manager who is in charge of all Level 1 approved documents?", "sql": "SELECT T1.FirstName, T1.MiddleName, T1.LastName FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Document AS T3 ON T3.Owner = T2.BusinessEntityID WHERE T2.JobTitle = 'Document Control Manager' AND T3.DocumentLevel = 1 AND T3.Status = 2 GROUP BY T1.FirstName, T1.MiddleName, T1.LastName", "source_tables": ["employee", "person", "document"]}, "evidence": "full Name = FirstName+MiddleName+Last Name; approved document refers to Status = 2;"}
{"sample_id": 7029, "db_id": "works_cycles", "final": {"question": "Which customer has the highest subtotal amount of sales orders whose assigned to the salesperson with the highest bonus?", "sql": "SELECT T1.CustomerID FROM SalesOrderHeader AS T1 INNER JOIN SalesPerson AS T2 ON T1.SalesPersonID = T2.BusinessEntityID ORDER BY T1.SubTotal DESC LIMIT 1", "source_tables": ["salesorderheader", "salesperson"]}, "evidence": "highest subtotal amount of sales order refers to max(SubTotal);"}
{"sample_id": 7030, "db_id": "works_cycles", "final": {"question": "What is the total price of Sales Order ID 46625 with Volume Discount 11 to 14 and Product ID 716?", "sql": "SELECT T2.UnitPrice * T2.OrderQty FROM SpecialOffer AS T1 INNER JOIN SalesOrderDetail AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID WHERE T1.Description = 'Volume Discount 11 to 14' AND T1.SpecialOfferID = 2 AND T2.ProductID = 716 AND T2.SalesOrderID = 46625", "source_tables": ["salesorderdetail", "specialoffer"]}, "evidence": "total price = multiply(UnitPrice, OrderQty);"}
{"sample_id": 7031, "db_id": "works_cycles", "final": {"question": "Of the products that has a reorder inventory point of no more than 600, how many manufactured in-house products that takes 1 day to manufacture with BOM Level 4 are there?", "sql": "SELECT COUNT(T1.ProductID) FROM Product AS T1 INNER JOIN BillOfMaterials AS T2 ON T1.ProductID = T2.ProductAssemblyID WHERE T1.MakeFlag = 1 AND T1.DaysToManufacture = 1 AND T2.BOMLevel = 4 AND T1.ReorderPoint <= 600", "source_tables": ["product", "billofmaterials"]}, "evidence": "ReorderPoint<600; product is manufactured in-house refers to Makeflag = 1;"}
{"sample_id": 7032, "db_id": "works_cycles", "final": {"question": "What is the highest amount of bonus earned by the sales person in Canada?", "sql": "SELECT T2.Bonus FROM SalesTerritory AS T1 INNER JOIN SalesPerson AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T1.CountryRegionCode = 'CA' ORDER BY T2.SalesQuota DESC LIMIT 1", "source_tables": ["salesterritory", "salesperson"]}, "evidence": "Canada is name of a sales territory"}
{"sample_id": 7033, "db_id": "works_cycles", "final": {"question": "What are the names of the product that has the lowest rating?", "sql": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Rating = ( SELECT Rating FROM ProductReview ORDER BY Rating ASC LIMIT 1 )", "source_tables": ["product", "productreview"]}, "evidence": "lowest rating refers to Rating = 1;"}
{"sample_id": 7034, "db_id": "works_cycles", "final": {"question": "How many of the workers who started working in 2009 are from the Production Department?", "sql": "SELECT COUNT(T2.BusinessEntityID) FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.DepartmentID = T2.DepartmentID WHERE T2.StartDate >= '2009-01-01' AND T2.StartDate < '2010-01-01' AND T1.Name = 'Production'", "source_tables": ["employeedepartmenthistory", "department"]}, "evidence": "StartDate BETWEEN '2009-01-01' AND '2009-12-31';"}
{"sample_id": 7035, "db_id": "works_cycles", "final": {"question": "Who is the company's highest-paid single female employee? Include her full name and job title.", "sql": "SELECT T3.FirstName, T3.MiddleName, T3.LastName, T1.JobTitle FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Person AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.MaritalStatus = 'S' AND T1.Gender = 'F' ORDER BY T2.Rate DESC LIMIT 1", "source_tables": ["employee", "employeepayhistory", "person"]}, "evidence": "full name = FirstName+MiddleName+LastName; highest-paid refers to max(Rate); single refers to Status = 'S'; female refers to Gender = 'F';"}
{"sample_id": 7036, "db_id": "works_cycles", "final": {"question": "Who is the Vice President of Engineering and when did he join the company? Indicate his/her full name.", "sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName, T1.HireDate FROM Employee AS T1 INNER JOIN Person AS T2 USING (BusinessEntityID) WHERE T1.JobTitle = 'Vice President of Engineering'", "source_tables": ["employee", "person"]}, "evidence": "full name = FirstName+MiddleName+LastName; HiredDate refers to the date the person joins the company;"}
{"sample_id": 7037, "db_id": "works_cycles", "final": {"question": "How many active employees whose payrate is equal or below 30 per hour.", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.CurrentFlag = 1 AND T2.Rate <= 30", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "active employee refers to CurrentFlag = 1; Rate< = 30;"}
{"sample_id": 7038, "db_id": "works_cycles", "final": {"question": "Which department has a worker who just recently started working?", "sql": "SELECT T1.Name FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.DepartmentID = T2.DepartmentID ORDER BY T2.StartDate DESC LIMIT 1", "source_tables": ["employeedepartmenthistory", "department"]}, "evidence": "recently started working refers to latest StartDate;"}
{"sample_id": 7039, "db_id": "works_cycles", "final": {"question": "Which store sales person was reently hired? Indicate his/her full name and gender.", "sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName, T1.Gender FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP'", "source_tables": ["employee", "person"]}, "evidence": "SC is an abbreviation for Store Contact; store contact person refers to PersonType = 'SC'; recently hired refers to latest StartDate;"}
{"sample_id": 7040, "db_id": "works_cycles", "final": {"question": "How frequently do the employee with the least number of sick leave hours get paid?", "sql": "SELECT T2.PayFrequency FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.SickLeaveHours ASC LIMIT 1", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "least number of sick leave refers to min(SickLeaveHours); PayFrequency = 1 means \u2018Salary received monthly\u2019; PayFrequency = 2 means \u2018Salary received biweekly';"}
{"sample_id": 7041, "db_id": "works_cycles", "final": {"question": "Which job title has the lowest pay?", "sql": "SELECT T1.JobTitle FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T2.Rate ASC LIMIT 1", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "lowest pay refers to min(Rate);"}
{"sample_id": 7042, "db_id": "works_cycles", "final": {"question": "What is the total number of employees that worked in the Finance department?", "sql": "SELECT COUNT(T2.BusinessEntityID) FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 USING (DepartmentID) WHERE T1.Name = 'Finance'", "source_tables": ["employeedepartmenthistory", "department"]}, "evidence": ""}
{"sample_id": 7043, "db_id": "works_cycles", "final": {"question": "What is the profit of the product with the highest list price and of the product with the lowest list price other than 0? Indicates the depth the component is from its parent.", "sql": "SELECT ( SELECT ListPrice - StandardCost FROM Product WHERE ListPrice != 0 ORDER BY ListPrice DESC LIMIT 1 ) , ( SELECT ListPrice - StandardCost FROM Product WHERE ListPrice != 0 ORDER BY ListPrice LIMIT 1 )", "source_tables": ["product"]}, "evidence": "profit = subtract(ListPrice, StandardCost); the depth the component from its parent refers to BOMLevel;"}
{"sample_id": 7044, "db_id": "works_cycles", "final": {"question": "Among the companies to which Adventure Works Cycles purchases parts or other goods, what is the profit on net obtained from the vendor who has an above average credit rating? Kindly indicate each names of the vendor and the corresponding net profits.", "sql": "SELECT T2.Name, T1.LastReceiptCost - T1.StandardPrice FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.CreditRating = 3", "source_tables": ["vendor", "productvendor"]}, "evidence": "above average credit rating refers to CreditRating = 3; profit on net = subtract(LastReceiptCost, StandardPrice);"}
{"sample_id": 7045, "db_id": "works_cycles", "final": {"question": "How many accounts have an address that is too long?", "sql": "SELECT COUNT(*) FROM Address WHERE AddressLine2 <> ''", "source_tables": ["address"]}, "evidence": "address that is too long refers to AddressLine2! = null"}
{"sample_id": 7046, "db_id": "works_cycles", "final": {"question": "What is the postal code of the street address of the account that is latest updated?", "sql": "SELECT PostalCode FROM Address ORDER BY ModifiedDate DESC LIMIT 1", "source_tables": ["address"]}, "evidence": "account latest updated refers to year(ModifiedDate) = 2022 and month(ModifiedDate) = 10"}
{"sample_id": 7047, "db_id": "works_cycles", "final": {"question": "What is the longest assembly item duration for bicycles?", "sql": "SELECT JULIANDAY(EndDate) - JULIANDAY(StartDate) FROM BillOfMaterials ORDER BY JULIANDAY(EndDate) - JULIANDAY(StartDate) DESC LIMIT 1", "source_tables": ["billofmaterials"]}, "evidence": "longest assembly item duration = max(subtract(EndDate,StartDate))"}
{"sample_id": 7048, "db_id": "works_cycles", "final": {"question": "How many assembly items for bicycles aren't finished?", "sql": "SELECT COUNT(BillOfMaterialsID) FROM BillOfMaterials WHERE EndDate IS NULL", "source_tables": ["billofmaterials"]}, "evidence": "assembly lines that are not finished refers to EndDate = null"}
{"sample_id": 7049, "db_id": "works_cycles", "final": {"question": "Please list the unit measure code of the component that is of the greatest need in quantity to create the assembly.", "sql": "SELECT UnitMeasureCode FROM BillOfMaterials ORDER BY PerAssemblyQty DESC LIMIT 1", "source_tables": ["billofmaterials"]}, "evidence": "greatest need in quantity refers to max(PerAssemblyQty)"}
{"sample_id": 7050, "db_id": "works_cycles", "final": {"question": "How many product maintenance documents are private?", "sql": "SELECT COUNT(DocumentNode) FROM Document WHERE DocumentSummary IS NULL", "source_tables": ["document"]}, "evidence": "product maintenance documents are private refers to DocumentSummary = null"}
{"sample_id": 7051, "db_id": "works_cycles", "final": {"question": "Please list the titles of the documents that are pending approval.", "sql": "SELECT Title FROM Document WHERE Status = 1", "source_tables": ["document"]}, "evidence": "documents pending approval refers to Status = 1"}
{"sample_id": 7052, "db_id": "works_cycles", "final": {"question": "Please list the job titles of the employees who has a document that has been approved.", "sql": "SELECT DISTINCT T2.BusinessEntityID, T2.JobTitle FROM Document AS T1 INNER JOIN Employee AS T2 ON T1.Owner = T2.BusinessEntityID WHERE T1.Status = 2", "source_tables": ["employee", "document"]}, "evidence": "document has been approved refers to Status = 2"}
{"sample_id": 7053, "db_id": "works_cycles", "final": {"question": "What is the pay frequency of the oldest employee?", "sql": "SELECT T1.PayFrequency FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T2.BirthDate ASC LIMIT 1", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "oldest employee refers to min(BirthDate); PayFrequency = 1 refers to \u2018Salary received monthly\u2019; PayFrequency = 2 refers to \u2018Salary received biweekly'"}
{"sample_id": 7054, "db_id": "works_cycles", "final": {"question": "Among the employees whose pay frequencies are the highest, how many of them are married?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.MaritalStatus = 'M' AND T1.PayFrequency = ( SELECT PayFrequency FROM EmployeePayHistory ORDER BY PayFrequency DESC LIMIT 1 )", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "married refers to MaritalStatus = M; highest pay frequency refers to PayFrequency = 2"}
{"sample_id": 7055, "db_id": "works_cycles", "final": {"question": "For the employee who has been hired the latest, what is his or her pay rate?", "sql": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T2.HireDate DESC LIMIT 1", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "hired the latest refers to max(HireDate)"}
{"sample_id": 7056, "db_id": "works_cycles", "final": {"question": "Among the employees who have a pay rate of above 40, how many of them are male?", "sql": "SELECT SUM(CASE WHEN T2.Gender = 'M' THEN 1 ELSE 0 END) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Rate > 40", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "pay rate above 40 refers to Rate>40; male employee refers to Gender = M"}
{"sample_id": 7057, "db_id": "works_cycles", "final": {"question": "What is the highest pay rate of the employees who are exempt from collective bargaining?", "sql": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.SalariedFlag = 1 ORDER BY T1.Rate DESC LIMIT 1", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "employee exempt from collective bargaining refers to SalariedFlag = 1; highest pay rate refers to max(Rate)"}
{"sample_id": 7058, "db_id": "works_cycles", "final": {"question": "For the employees who have the highest pay frequency, please list their vacation hours.", "sql": "SELECT T2.VacationHours FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.BusinessEntityID = ( SELECT BusinessEntityID FROM EmployeePayHistory ORDER BY Rate DESC LIMIT 1 )", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "highest pay frequency refers to PayFrequency = 2"}
{"sample_id": 7059, "db_id": "works_cycles", "final": {"question": "What is the pay rate of the employee who has the longest vacation hours?", "sql": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T2.VacationHours DESC LIMIT 1", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "longest vacation hour refers to max(VacationHours)"}
{"sample_id": 7060, "db_id": "works_cycles", "final": {"question": "How many employees with a pay rate of over 35 have more than 10 sick leave hours?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.SickLeaveHours > 10 AND T1.Rate > 35", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "more than 10 sick leave hours refers to SickLeaveHours>10; pay rate over 35 refers to Rate>35;"}
{"sample_id": 7061, "db_id": "works_cycles", "final": {"question": "Among the active male employees, how many of them are paid with the highest frequency?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.CurrentFlag = 1 AND T2.Gender = 'M' AND T1.PayFrequency = 2", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "active status of employees refers to CurrentFlag = 1; Male refers to Gender = 'M'; highest frequency refers to PayFrequency = 2;"}
{"sample_id": 7062, "db_id": "works_cycles", "final": {"question": "How many male employees have the job position of sales person?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Gender = 'M' AND T2.PersonType = 'SP'", "source_tables": ["employee", "person"]}, "evidence": "Sales person refers to PersonType = 'SP'; Male refers to Gender = 'M';"}
{"sample_id": 7063, "db_id": "works_cycles", "final": {"question": "What is the job position of the oldest employee?", "sql": "SELECT T2.PersonType FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.BirthDate ASC LIMIT 1", "source_tables": ["employee", "person"]}, "evidence": "Oldest employee refers to Max ( Subtract((now())-BirthDate));"}
{"sample_id": 7064, "db_id": "works_cycles", "final": {"question": "What is the name style of the employee with the lowest pay rate?", "sql": "SELECT T2.NameStyle FROM EmployeePayHistory AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Rate IS NOT NULL ORDER BY T1.Rate ASC LIMIT 1", "source_tables": ["employeepayhistory", "person"]}, "evidence": "lowest pay rate refers to Min(Rate);"}
{"sample_id": 7065, "db_id": "works_cycles", "final": {"question": "Among the employees who are married, how many of them have a western name style?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.NameStyle = 0 AND T1.MaritalStatus = 'M'", "source_tables": ["employee", "person"]}, "evidence": "married refers to MaritalStatus = 'M'; western name style refers to NameStyle = '0';"}
{"sample_id": 7066, "db_id": "works_cycles", "final": {"question": "Among the employees who have more than 10 hours of sick leave, how many of them wish to receive e-mail promotions?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 1 AND T1.SickLeaveHours > 10", "source_tables": ["employee", "person"]}, "evidence": "Contact does wish to receive e-mail promotions refers to EmailPromotion = (1,2); more than 10 hours of sick leave refer to SickLeaveHours >10;"}
{"sample_id": 7067, "db_id": "works_cycles", "final": {"question": "Please list the employees who have more than 20 vacations hours and wish to receive e-mail promotions.", "sql": "SELECT T1.BusinessEntityID FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 1 AND T1.VacationHours > 20", "source_tables": ["employee", "person"]}, "evidence": "Contact does wish to receive e-mail promotions refers to EmailPromotion = (1,2); more than 20 vacations hours refers to VacationHours>20"}
{"sample_id": 7068, "db_id": "works_cycles", "final": {"question": "Please give the additional contact information of the oldest employee with the jod position of sales person.", "sql": "SELECT T2.AdditionalContactInfo FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE PersonType = 'SP' ORDER BY T1.BirthDate ASC LIMIT 1", "source_tables": ["employee", "person"]}, "evidence": "Sales person refers to PersonType = 'SP'; oldest employee refers to Max (Subtract((now())-BirthDate));"}
{"sample_id": 7069, "db_id": "works_cycles", "final": {"question": "What is the first name of the male employee who has a western name style?", "sql": "SELECT T2.FirstName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.NameStyle = 0 AND T1.Gender = 'M'", "source_tables": ["employee", "person"]}, "evidence": "western name style refers to NameStyle = 0; Male refers to Gender = 'M';"}
{"sample_id": 7070, "db_id": "works_cycles", "final": {"question": "Among the active employees, how many of them have a courtesy title of \"Mr\"?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.CurrentFlag = 1 AND T2.Title = 'Mr.'", "source_tables": ["employee", "person"]}, "evidence": "active status of employees refers to CurrentFlag = 1;"}
{"sample_id": 7071, "db_id": "works_cycles", "final": {"question": "Please give the personal information of the married employee who has the highest pay rate.", "sql": "SELECT T2.Demographics FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeePayHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.MaritalStatus = 'M' ORDER BY T3.Rate DESC LIMIT 1", "source_tables": ["employee", "employeepayhistory", "person"]}, "evidence": "married refers to MaritalStatus = 'M'; Highest pay rate refers to Max(Rate)"}
{"sample_id": 7072, "db_id": "works_cycles", "final": {"question": "What is the surname suffix of the employee who works as a store contact and has the longest sick leave hours?", "sql": "SELECT T2.Suffix FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP' ORDER BY T1.SickLeaveHours DESC LIMIT 1", "source_tables": ["employee", "person"]}, "evidence": "store contact refers to PersonType = 'SC';"}
{"sample_id": 7073, "db_id": "works_cycles", "final": {"question": "Among the married employees with the highest pay frequency, how many of them have an eastern name style?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeePayHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.MaritalStatus = 'M' AND T2.NameStyle = 1 AND T3.Rate = ( SELECT Rate FROM EmployeePayHistory ORDER BY Rate DESC LIMIT 1 )", "source_tables": ["employee", "employeepayhistory", "person"]}, "evidence": "married refers to MaritalStatus = 'M'; Eastern name style refers to NameStyle = 1;"}
{"sample_id": 7074, "db_id": "works_cycles", "final": {"question": "How many active employees do not wish to receive e-mail promotions?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.CurrentFlag = 1 AND T2.EmailPromotion = 1", "source_tables": ["employee", "person"]}, "evidence": "active status of employees refers to CurrentFlag = 1; the employee does not wish to receive an e-mail promotion refers to EmailPromotion = 0;"}
{"sample_id": 7075, "db_id": "works_cycles", "final": {"question": "Please list the credit card IDs of the employees who work as store contact.", "sql": "SELECT T2.CreditCardID FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.PersonType = 'SC'", "source_tables": ["person", "personcreditcard"]}, "evidence": "store contact refers to PersonType = 'SC';"}
{"sample_id": 7076, "db_id": "works_cycles", "final": {"question": "How many vacation hours do the male employees have on average?", "sql": "SELECT CAST(SUM(T1.VacationHours) AS REAL) / COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Gender = 'M' AND T2.PersonType = 'EM'", "source_tables": ["employee", "person"]}, "evidence": "employee refers to PersonType = 'EM'; Male refers to Gender = 'M'; Average = Divide( SUM(VacationHours(PersonType = 'EM'& Gender = 'M')),Count(BusinessEntityID(PersonType = 'EM' & Gender = 'M')));"}
{"sample_id": 7077, "db_id": "works_cycles", "final": {"question": "Among the employees who are married and wish to receive e-mail promotions, how much higher is their highest pay rate from the average pay rate?", "sql": "SELECT MAX(T1.Rate) - SUM(T1.Rate) / COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Employee AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T2.EmailPromotion = 2 AND T3.MaritalStatus = 'M'", "source_tables": ["employee", "employeepayhistory", "person"]}, "evidence": "married refers to MaritalStatus = 'M'; Contact does wish to receive e-mail promotions from Adventure Works refers to EmailPromotion = 1; Average = Divide (Sum(Rate (MaritalStatus = 'M' & EmailPromotion = 1))), Count (BusinessEntityID (MaritalStatus = 'M' & EmailPromotion = 1)); MAX(Rate (MaritalStatus = 'M' & EmailPromotion = 1) - Average;"}
{"sample_id": 7078, "db_id": "works_cycles", "final": {"question": "If a married employee has a western name style, what is the probability of him or her working as a store contact?", "sql": "SELECT CAST(COUNT(IIF(T1.PersonType = 'SC', T1.PersonType, NULL)) AS REAL) / COUNT(T1.PersonType) FROM Person AS T1 INNER JOIN Employee AS T2 WHERE T1.PersonType = 'SC' AND T1.NameStyle = 0 AND T2.MaritalStatus = 'M'", "source_tables": ["employee", "person"]}, "evidence": "married refers to MaritalStatus = 'M'; western name style refers to NameStyle = 0; store contact refers to PersonType = 'SC'; probability = Divide (Count (BusinessEntityID( PersonType = 'SC' & MaritalStatus = 'M')), Count (BusinessEntityID ( PersonType) & MariatlStatus = 'M'))\n"}
{"sample_id": 7079, "db_id": "works_cycles", "final": {"question": "Among the active employees with over 10 hours of sick leave, what is the percentage of the employees with over 20 vacation hours?", "sql": "SELECT CAST(SUM(CASE WHEN T2.VacationHours > 20 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.CurrentFlag = 1 AND T2.SickLeaveHours > 10", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "CurrentFlag = 1 refers to the active status of employees; Percentage = Divide (Count (BusinessEntityID (CurrentFlag = 1 & VacationHours >20 & SickLeaveHours > 10)), Count (BusinessEntityID (CurrentFlag = 1 & SickLeaveHours>10))) * 100;"}
{"sample_id": 7080, "db_id": "works_cycles", "final": {"question": "Average of the last receipt cost of the products whose average lead time is 60 days.", "sql": "SELECT SUM(LastReceiptCost) / COUNT(ProductID) FROM ProductVendor WHERE AverageLeadTime = 60", "source_tables": ["productvendor"]}, "evidence": "average = DIVIDE(SUM(lastreceiptcost), COUNT(OnorderQty)) where AverageLeadTime = 60"}
{"sample_id": 7081, "db_id": "works_cycles", "final": {"question": "Average cost of purchase orders made during the first six months of 2012.", "sql": "SELECT CAST(SUM(ActualCost) AS REAL) / COUNT(TransactionID) FROM TransactionHistoryArchive WHERE TransactionType = 'P' AND TransactionDate >= '2012-01-01' AND TransactionDate < '2012-07-01'", "source_tables": ["transactionhistoryarchive"]}, "evidence": "purchase orders refers to TransactionType = 'P'; first six months of 2012 refers to TransactionDate bewteen '2012-01-01'and '2012-06-30'; average = DIVIDE(ActualCost where TransactionType = 'P', count(TransactionID))\n"}
{"sample_id": 7082, "db_id": "works_cycles", "final": {"question": "What percentage of male employees hired throughout the years 2009 are married?", "sql": "SELECT CAST(SUM(CASE WHEN MaritalStatus = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(BusinessEntityID) FROM Employee WHERE SUBSTR(HireDate, 1, 4) = '2009' AND Gender = 'M'", "source_tables": ["employee"]}, "evidence": "male refers to Gender = 'M'; hired throughout the years 2009 refers to Year(HireDate) = 2009; married refers to MaritalStatus = 'M'; percentage = DIVIDE(count(BusinessEntityID(Gender = 'M'& Year(HireDate) = '2009& MaritalStatus = 'M')), count(BusinessEntityID(Gender = 'M'& Year(HireDate) = 2009)))\n\n"}
{"sample_id": 7083, "db_id": "works_cycles", "final": {"question": "What percentage of people named Mary who wants Receive Email promotions of AdventureWorks and selected partners are store contacts?", "sql": "SELECT CAST(SUM(CASE WHEN EmailPromotion = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN PersonType = 'SC' THEN 1 ELSE 0 END) FROM Person WHERE FirstName = 'Mary'", "source_tables": ["person"]}, "evidence": "wants Receive Email promotions of AdventureWorks and selected partners refers to EmailPromotion = 2; store contact refers to PersonType = 'SC'; percentage = DIVIDE(count(BusinessEntityID(FirstName = 'Marry'&EmailPromotion = '2')),count(BusinessEntityID)))\n"}
{"sample_id": 7084, "db_id": "works_cycles", "final": {"question": "List, by ProductID, all products whose profit, relative to the standard price, is negative.", "sql": "SELECT DISTINCT ProductID FROM ProductVendor WHERE StandardPrice - LastReceiptCost < 0", "source_tables": ["productvendor"]}, "evidence": "Profit = SUBTRACT(StandardPrice, LastRecipeCost)\n"}
{"sample_id": 7085, "db_id": "works_cycles", "final": {"question": "What is the average total due price of products with approved status?", "sql": "SELECT SUM(TotalDue) / COUNT(TotalDue) FROM PurchaseOrderHeader WHERE Status = 2", "source_tables": ["purchaseorderheader"]}, "evidence": "approved refers to Status = 2 , average total due price = AVG( DIVIDE(TotalDue, SUM(Status = 2 )))"}
{"sample_id": 7086, "db_id": "works_cycles", "final": {"question": "What is the percentage, by number of sales order units, for orders with quantities not greater than 3 and a discount of 0.2?", "sql": "SELECT CAST(SUM(CASE WHEN OrderQty < 3 AND UnitPriceDiscount = 0.2 THEN 1 ELSE 0 END) AS REAL) / COUNT(SalesOrderID) FROM SalesOrderDetail", "source_tables": ["salesorderdetail"]}, "evidence": "quantities not greater than 3 refers to OrderQty<3; discount of 0.2 refers to UnitPriceDiscount = 0.2; percentage = DIVIDE(count(SalesOrderID(OrderQty<3 & UnitPriceDiscount = 0.2)), count(SalesOrderID))*100%"}
{"sample_id": 7087, "db_id": "works_cycles", "final": {"question": "Lists all companies by BusinessEntityID that increased their current year sales by more than 60% over last year's sales and have a bonus greater than 3,000.", "sql": "SELECT BusinessEntityID FROM SalesPerson WHERE SalesYTD > SalesLastYear + SalesLastyear * 0.6 AND Bonus > 3000", "source_tables": ["salesperson"]}, "evidence": "increased their current year sales by more than 60% refers to\nDIVIDE(SUBTRACT(SalesYTD, SalesLastYear),SalesLastYear)>0.6"}
{"sample_id": 7088, "db_id": "works_cycles", "final": {"question": "Add the number of businesses that indicate their home address as their address and those whose address corresponds to the shipping address.", "sql": "SELECT SUM(CASE WHEN T2.Name = 'Home' THEN 1 ELSE 0 END) , SUM(CASE WHEN T2.Name = 'Shipping' THEN 1 ELSE 0 END) FROM BusinessEntityAddress AS T1 INNER JOIN AddressType AS T2 ON T1.AddressTypeID = T2.AddressTypeID", "source_tables": ["businessentityaddress", "addresstype"]}, "evidence": "their home address as their address refers to AddressTypeID = 2; address corresponds to the shipping address refers to AddressTypeID = 5"}
{"sample_id": 7089, "db_id": "works_cycles", "final": {"question": "Identifies the ID number of the customer whose sales order for 32 units had a unit price of 35.", "sql": "SELECT T2.CustomerID FROM SalesOrderDetail AS T1 INNER JOIN Customer AS T2 WHERE T1.UnitPrice = 35 AND T1.OrderQty = 32", "source_tables": ["customer", "salesorderdetail"]}, "evidence": "sales order for 32 units refers to OrderQty = 32"}
{"sample_id": 7090, "db_id": "works_cycles", "final": {"question": "What company has a Colonial Voice card that expired in March 2005?", "sql": "SELECT T2.BusinessEntityID FROM CreditCard AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.CreditCardID = T2.CreditCardID WHERE T1.CardType = 'ColonialVoice' AND T1.ExpMonth = 3 AND T1.ExpYear = 2005", "source_tables": ["creditcard", "personcreditcard"]}, "evidence": "Colonial Voice card refers to CardType = 'ColonialVoice' ; expired in March 2005 refers to ExpMonth = 3, ExpYear = 2005"}
{"sample_id": 7091, "db_id": "works_cycles", "final": {"question": "What is the credit rating of the company whose average lead time is 16 days for a standard price of 18.9900 and whose last receipt date is August 27, 2011?", "sql": "SELECT T2.CreditRating FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.StandardPrice = 18.9900 AND T1.AverageLeadTime = 16 AND STRFTIME('%Y-%m-%d', T1.LastReceiptDate) = '2011-08-27'", "source_tables": ["vendor", "productvendor"]}, "evidence": "last receipt date is August 17, 2011 refers to LastReceiptDate> = '2011-08-17 00:00:00' and LastReceiptDate < '2011-08-18 00:00:00';"}
{"sample_id": 7092, "db_id": "works_cycles", "final": {"question": "Calculate the number of products if we add the products of the accessories and components categories.", "sql": "SELECT COUNT(ProductID) FROM Product WHERE Name LIKE '%accessories %' OR Name LIKE '%components%'", "source_tables": ["product"]}, "evidence": ""}
{"sample_id": 7093, "db_id": "works_cycles", "final": {"question": "What is the job title of the newest employee in department 12?", "sql": "SELECT T1.JobTitle FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.DepartmentID = 12 ORDER BY T2.StartDate DESC LIMIT 1", "source_tables": ["employee", "employeedepartmenthistory"]}, "evidence": "newest employee refers to MAX(StartDate)"}
{"sample_id": 7094, "db_id": "works_cycles", "final": {"question": "List the first and last name of all unmarried male Production Supervisors.", "sql": "SELECT T2.FirstName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.MaritalStatus = 'S' AND T1.Gender = 'M' AND T1.JobTitle LIKE 'Production Supervisor%'", "source_tables": ["employee", "person"]}, "evidence": "unmarried refers to MaritalStatus = 'S', male refers to Gender = 'M', Production Supervisors is a job title"}
{"sample_id": 7095, "db_id": "works_cycles", "final": {"question": "How many products are there if we add all those located in the Subassembly category?", "sql": "SELECT COUNT(T1.LocationID) FROM Location AS T1 INNER JOIN ProductInventory AS T2 USING (LocationID) WHERE T1.Name = 'Subassembly'", "source_tables": ["productinventory", "location"]}, "evidence": "located in the Subassembly category refers to Name = 'Subassembly'"}
{"sample_id": 7096, "db_id": "works_cycles", "final": {"question": "Sum the total number of products rejected for having a trim length that is too long.", "sql": "SELECT SUM(T2.ScrappedQty) FROM ScrapReason AS T1 INNER JOIN WorkOrder AS T2 ON T1.ScrapReasonID = T2.ScrapReasonID WHERE T1.Name = 'Trim length too long'", "source_tables": ["scrapreason", "workorder"]}, "evidence": "number of product rejected refers to ScrapedQty; trim length that is too long refers to scrap reason where Name = 'Trim length too long'"}
{"sample_id": 7097, "db_id": "works_cycles", "final": {"question": "Calculate the total quantity of purchased product that has been prepared by employee number 257 and is in pending shipment status.", "sql": "SELECT SUM(T2.OrderQty) FROM PurchaseOrderHeader AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.PurchaseOrderID = T2.PurchaseOrderID WHERE T1.Status = 1", "source_tables": ["purchaseorderheader", "purchaseorderdetail"]}, "evidence": "employee number 257 refers to EmployeeID = 257; pending shipment status refers to Status = 3"}
{"sample_id": 7098, "db_id": "works_cycles", "final": {"question": "If we discount the products that do not have any type of offer, how many different products have been sold in an amount greater than 2 units per order?", "sql": "SELECT COUNT(DISTINCT T1.ProductID) FROM SalesOrderDetail AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID INNER JOIN SpecialOffer AS T3 ON T2.SpecialOfferID = T3.SpecialOfferID WHERE T1.OrderQty > 2 AND T1.UnitPriceDiscount = 0", "source_tables": ["specialoffer", "salesorderdetail", "specialofferproduct"]}, "evidence": "do not have any type of offer refers to Description = 'No Discount'; sold in an amount greater than 2 refers to OrderQty>2"}
{"sample_id": 7099, "db_id": "works_cycles", "final": {"question": "What type of transaction was made with the only yellow product, size 62 and with a minimum inventory stock of 500 units?", "sql": "SELECT DISTINCT T2.TransactionType FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Size = 62 AND T1.Color = 'Yellow' AND T1.SafetyStockLevel = 500", "source_tables": ["product", "transactionhistory"]}, "evidence": "yellow product refers to Color = 'Yellow'; minimum inventory stock of 500 units refers to SafetyStockLevel = 500"}
{"sample_id": 7100, "db_id": "works_cycles", "final": {"question": "What is the name of the subcategory to which the gray product with the lowest safety stock level belongs?", "sql": "SELECT T1.Name FROM ProductSubcategory AS T1 INNER JOIN Product AS T2 USING (ProductSubcategoryID) WHERE T2.Color = 'Grey' GROUP BY T1.Name", "source_tables": ["productsubcategory", "product"]}, "evidence": "gray is color of product"}
{"sample_id": 7101, "db_id": "works_cycles", "final": {"question": "What is the product cost end date with the highest weight in grams?", "sql": "SELECT T2.EndDate FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.WeightUnitMeasureCode = 'G' ORDER BY T1.Weight DESC LIMIT 1", "source_tables": ["product", "productcosthistory"]}, "evidence": "in grams refers to WeightUnitMeasureCode = 'G'"}
{"sample_id": 7102, "db_id": "works_cycles", "final": {"question": "What is the percentage of the total products ordered were not rejected by Drill size?", "sql": "SELECT CAST(SUM(CASE WHEN T2.VacationHours > 20 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.CurrentFlag = 1 AND T2.SickLeaveHours > 10", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "rejected quantity refers to ScrappedQty; rejected by Drill size refers to Name in ('Drill size too small','Drill size too large'); percentage = DIVIDE(SUM(ScrappedQty) where Name in('Drill size too small','Drill size too large'), OrderQty)"}
{"sample_id": 7103, "db_id": "works_cycles", "final": {"question": "Calculate the average of the total ordered quantity of products purchased whose shipping method was Cargo Transport 5.", "sql": "SELECT CAST(SUM(IIF(T1.ShipMethodID = 5, T3.OrderQty, 0)) AS REAL) / COUNT(T3.ProductID) FROM ShipMethod AS T1 INNER JOIN PurchaseOrderHeader AS T2 ON T1.ShipMethodID = T2.ShipMethodID INNER JOIN PurchaseOrderDetail AS T3 ON T2.PurchaseOrderID = T3.PurchaseOrderID", "source_tables": ["shipmethod", "purchaseorderheader", "purchaseorderdetail"]}, "evidence": "shipping method was Cargo Transport 5 refers to Name = 'Cargo Transport 5'; average = DIVIDE(SUM(OrderQty where Name = 'Cargo Transport 5'), COUNT(ShipMethodID))"}
{"sample_id": 7104, "db_id": "works_cycles", "final": {"question": "List the name of the rates that apply to the provinces that are in the territory that obtained the greatest increase in sales with respect to the previous year.", "sql": "SELECT T2.Name FROM SalesTerritory AS T1 INNER JOIN StateProvince AS T2 ON T1.CountryRegionCode = T2.CountryRegionCode INNER JOIN SalesTaxRate AS T3 ON T2.StateProvinceID = T3.StateProvinceID ORDER BY (T1.SalesYTD - T1.SalesLastYear) / T1.SalesLastYear DESC LIMIT 1", "source_tables": ["stateprovince", "salestaxrate", "salesterritory"]}, "evidence": "sales of previous year refers to SalesLastYear; SalesYTD refers to year to date sales; increase in sales = DIVIDE(SUBTRACT(SalesYTD, SalesLastYear), SalesLastYear)*100"}
{"sample_id": 7105, "db_id": "works_cycles", "final": {"question": "How many employees earn their salaries on a monthly basis at an hourly rate of more than 50?", "sql": "SELECT COUNT(BusinessEntityID) FROM EmployeePayHistory WHERE rate * PayFrequency > 50", "source_tables": ["employeepayhistory"]}, "evidence": "employee refers to BusinessEntityID; salaries on a monthly basis refers to PayFrequency = 1; hourly rate more than 50 refers to Rate > 50"}
{"sample_id": 7106, "db_id": "works_cycles", "final": {"question": "What is the employee of company number 1's full name?", "sql": "SELECT FirstName, MiddleName, LastName FROM Person WHERE BusinessEntityID = 1 AND PersonType = 'EM'", "source_tables": ["person"]}, "evidence": "company number 1 refers to BusinessEntityId = 1; employee refers to PersonType = 'EM'; full name refers to FirstName + MiddleName + LastName"}
{"sample_id": 7107, "db_id": "works_cycles", "final": {"question": "What is the name of the supplier number 1492?", "sql": "SELECT NAME FROM Vendor WHERE BusinessEntityID = 1492", "source_tables": ["vendor"]}, "evidence": "supplier number 1492 refers to BusinessEntityId = 1492; name of the supplier = name from vendor"}
{"sample_id": 7108, "db_id": "works_cycles", "final": {"question": "How many vendors only consented to move on with the 500 to 15000 piece order in terms of quality?", "sql": "SELECT COUNT(*) FROM ProductVendor WHERE MinOrderQty > 500 AND MaxOrderQty < 15000", "source_tables": ["productvendor"]}, "evidence": "Vendor refers to BusinessEntityId; 500 to 15000 piece order refers to MinOrderQty > 500 and MaxOrderQty < 15000"}
{"sample_id": 7109, "db_id": "works_cycles", "final": {"question": "Please list the departments that are part of the Executive General and Administration group.", "sql": "SELECT Name FROM Department WHERE GroupName = 'Executive General and Administration'", "source_tables": ["department"]}, "evidence": "Department refers to Name where GroupName = 'Executive General and Administration'"}
{"sample_id": 7110, "db_id": "works_cycles", "final": {"question": "Please list the family names of any employees whose middle names begin with C.", "sql": "SELECT LastName FROM Person WHERE PersonType = 'EM' AND MiddleName LIKE 'C%'", "source_tables": ["person"]}, "evidence": "family names refers to Last name; employee refers to PersonType = 'EM'; MiddleName starts with 'C'"}
{"sample_id": 7111, "db_id": "works_cycles", "final": {"question": "How many vendors are having their products ordered with an average delivery time of 25 days?", "sql": "SELECT COUNT(DISTINCT BusinessEntityID) FROM ProductVendor WHERE AverageLeadTime = 25", "source_tables": ["productvendor"]}, "evidence": "vendors refers to distinct BusinessEntityID; average delivery time of 25 days refers to AverageLeadTime = 25 and onOrderQty > 0"}
{"sample_id": 7112, "db_id": "works_cycles", "final": {"question": "Please list any 3 product numbers with the lowest standard cost.", "sql": "SELECT ProductID FROM ProductCostHistory ORDER BY StandardCost ASC LIMIT 3", "source_tables": ["productcosthistory"]}, "evidence": "product number = productID"}
{"sample_id": 7113, "db_id": "works_cycles", "final": {"question": "How many black-colored products are there that cannot be sold?", "sql": "SELECT COUNT(ProductID) FROM Product WHERE FinishedGoodsFlag = 0 AND Color = 'Black'", "source_tables": ["product"]}, "evidence": "cannot be sold means product is not a salable item which refers to FinishedGoodsFlag = 0"}
{"sample_id": 7114, "db_id": "works_cycles", "final": {"question": "Please list the top three employees with the most unused sick leave along with their position titles.", "sql": "SELECT JobTitle FROM Employee ORDER BY SickLeaveHours DESC LIMIT 3", "source_tables": ["employee"]}, "evidence": "employees refers to BusinessEntityID; most unused sick leave refers to MAX(SickLeaveHours); position title refers to JobTitle"}
{"sample_id": 7115, "db_id": "works_cycles", "final": {"question": "What is the full address of address number 11906?", "sql": "SELECT AddressLine1, AddressLine2 FROM Address WHERE AddressID = 11906", "source_tables": ["address"]}, "evidence": "address number refers to AddressID; full address refers to AddressLine1 + AddressLine2"}
{"sample_id": 7116, "db_id": "works_cycles", "final": {"question": "What is business number 1580's net profit?", "sql": "SELECT LastReceiptCost - StandardPrice FROM ProductVendor WHERE BusinessEntityID = 1580", "source_tables": ["productvendor"]}, "evidence": "business number 1580 refers to BusinessEntityID = 1580; Net profit = SUBTRACT(LastReceiptCost,StandardPrice)"}
{"sample_id": 7117, "db_id": "works_cycles", "final": {"question": "What is the sales revenue for item number 740?", "sql": "SELECT ListPrice - StandardCost FROM Product WHERE ProductID = 740", "source_tables": ["product"]}, "evidence": "business number 1580 refers to BusinessEntityID = 1580; Net profit = SUBTRACT(LastReceiptCost,StandardPrice)"}
{"sample_id": 7118, "db_id": "works_cycles", "final": {"question": "How many customers gave a product the best possible rating? Please list their names.", "sql": "SELECT ReviewerName FROM ProductReview WHERE Rating = 5", "source_tables": ["productreview"]}, "evidence": "customers' name refers to ReviewerName; best possible ratings means the highest rating = 5"}
{"sample_id": 7119, "db_id": "works_cycles", "final": {"question": "What are the company that Adventure Works deal with that have poor credit rating? Please provide their business number.", "sql": "SELECT BusinessEntityID FROM Vendor WHERE CreditRating = ( SELECT CreditRating FROM Vendor ORDER BY CreditRating DESC LIMIT 1 )", "source_tables": ["vendor"]}, "evidence": "poor credit rating means bad credit; CreditRating = 5; Business number refers to BusinessEntityID"}
{"sample_id": 7120, "db_id": "works_cycles", "final": {"question": "What is the forename and birthdate of person number 18?", "sql": "SELECT T1.FirstName, T2.BirthDate FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.BusinessEntityID = 18", "source_tables": ["employee", "person"]}, "evidence": "person number 18 refers to BusinessEntityID = 18; forename refers to FirstName"}
{"sample_id": 7121, "db_id": "works_cycles", "final": {"question": "What job is person number 322 currently holding?", "sql": "SELECT T1.Name FROM ContactType AS T1 INNER JOIN BusinessEntityContact AS T2 ON T1.ContactTypeID = T2.ContactTypeID WHERE T2.BusinessEntityID = 332", "source_tables": ["businessentitycontact", "contacttype"]}, "evidence": "person number 322 refers to PersonID = 18; job is the name of contacttype"}
{"sample_id": 7122, "db_id": "works_cycles", "final": {"question": "Please list 3 businesses along with their IDs that use cellphones.", "sql": "SELECT T2.BusinessEntityID FROM PhoneNumberType AS T1 INNER JOIN PersonPhone AS T2 ON T1.PhoneNumberTypeID = T2.PhoneNumberTypeID WHERE T1.Name = 'Cell' LIMIT 3", "source_tables": ["phonenumbertype", "personphone"]}, "evidence": "business along with their IDs = BusinessEntityID; Cellphones refers to PhoneNumberType.name = \u2018cell\u2019"}
{"sample_id": 7123, "db_id": "works_cycles", "final": {"question": "What is the currency of Brazil?", "sql": "SELECT T1.Name FROM Currency AS T1 INNER JOIN CountryRegionCurrency AS T2 ON T1.CurrencyCode = T2.CurrencyCode INNER JOIN CountryRegion AS T3 ON T2.CountryRegionCode = T3.CountryRegionCode WHERE T3.Name = 'Brazil'", "source_tables": ["countryregioncurrency", "countryregion", "currency"]}, "evidence": ""}
{"sample_id": 7124, "db_id": "works_cycles", "final": {"question": "How many people work in the finance department?", "sql": "SELECT COUNT(T2.BusinessEntityID) FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.DepartmentID = T2.DepartmentID WHERE T1.Name = 'Finance'", "source_tables": ["employeedepartmenthistory", "department"]}, "evidence": ""}
{"sample_id": 7125, "db_id": "works_cycles", "final": {"question": "How long does it take for the business to receive the item it has purchased? Who is the vendor for business number 1496?", "sql": "SELECT T1.AverageLeadTime, T2.Name FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 USING (businessentityid) WHERE T2.BusinessEntityID = 1496 GROUP BY T1.AverageLeadTime, T2.Name", "source_tables": ["vendor", "productvendor"]}, "evidence": "business number refers to BusinessEntityID where BusinessEntityID = 1496; how long does it take refers to AverageLeadTime"}
{"sample_id": 7126, "db_id": "works_cycles", "final": {"question": "How many accounts are in Bothell as opposed to Kenmore? What is the name of the State that comprises these two cities?", "sql": "SELECT SUM(IIF(T1.city = 'Bothell', 1, 0)) - SUM(IIF(T1.city = 'Kenmore', 1, 0)) , stateprovincecode FROM Address AS T1 INNER JOIN StateProvince AS T2 ON T1.stateprovinceid = T2.stateprovinceid GROUP BY stateprovincecode", "source_tables": ["stateprovince", "address"]}, "evidence": "SUBTRACT(count(city = 'Bothell'), count(city = 'Kenmore'))"}
{"sample_id": 7127, "db_id": "works_cycles", "final": {"question": "Which chromoly steel product model has AdventureWorks saved in English?", "sql": "SELECT T1.ProductModelID FROM ProductModelProductDescriptionCulture AS T1 INNER JOIN Culture AS T2 USING (cultureid) INNER JOIN ProductDescription AS T3 USING (productdescriptionid) WHERE T3.Description LIKE 'Chromoly steel%' AND T2.Name = 'English'", "source_tables": ["culture", "productdescription", "productmodelproductdescriptionculture"]}, "evidence": "Saved in English refers to product description written in English where Culture.name = 'English'"}
{"sample_id": 7128, "db_id": "works_cycles", "final": {"question": "Please list the total number of companies with a commission percentage of 0.018 or above, along with each company's assigned geographical location.", "sql": "SELECT T1.BusinessEntityID, T2.'Group' FROM SalesPerson AS T1 INNER JOIN SalesTerritory AS T2 USING (territoryid) WHERE T1.CommissionPct >= 0.018", "source_tables": ["salesterritory", "salesperson"]}, "evidence": "geographical location refers to group from SalesPerson; ComissionPct refers to commission percentage where ComissionPct > = 0.018;"}
{"sample_id": 7129, "db_id": "works_cycles", "final": {"question": "Please list the various phone number types in the following order, from most to least common among businesses.", "sql": "SELECT T2.Name FROM PersonPhone AS T1 INNER JOIN PhoneNumberType AS T2 ON T1.PhoneNumberTypeID = T2.PhoneNumberTypeID GROUP BY T2.Name ORDER BY COUNT(T2.Name) DESC", "source_tables": ["phonenumbertype", "personphone"]}, "evidence": ""}
{"sample_id": 7130, "db_id": "works_cycles", "final": {"question": "Which role has the most common contact among businesses?", "sql": "SELECT T1.Name FROM ContactType AS T1 INNER JOIN BusinessEntityContact AS T2 ON T1.ContactTypeID = T2.ContactTypeID GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC LIMIT 1", "source_tables": ["businessentitycontact", "contacttype"]}, "evidence": "Most common contact among businesses refers to BusinessEntityContact with the most name"}
{"sample_id": 7131, "db_id": "works_cycles", "final": {"question": "What are the salespeople's email addresses?", "sql": "SELECT T2.EmailAddress FROM Person AS T1 INNER JOIN EmailAddress AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.PersonType = 'SP'", "source_tables": ["person", "emailaddress"]}, "evidence": "Salespeople refers to PersonType = 'SP'"}
{"sample_id": 7132, "db_id": "works_cycles", "final": {"question": "Which position does Suchitra hold?", "sql": "SELECT T2.JobTitle FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'Suchitra'", "source_tables": ["employee", "person"]}, "evidence": "position refers to JobTitle"}
{"sample_id": 7133, "db_id": "works_cycles", "final": {"question": "How many employees work for AdvertureWorks that is single?", "sql": "SELECT COUNT(T1.BusinessentityID) FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.PersonType = 'EM' AND T2.MaritalStatus = 'S'", "source_tables": ["employee", "person"]}, "evidence": "Employees refer to PersonType = 'EM'; Single refers to MaritalStatus = 's'"}
{"sample_id": 7134, "db_id": "works_cycles", "final": {"question": "How much do the works data saved in English and Arabic differ from one another?", "sql": "SELECT SUM(CASE WHEN T1.Name = 'English' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.Name = 'Arabic' THEN 1 ELSE 0 END) FROM Culture AS T1 INNER JOIN ProductModelProductDescriptionCulture AS T2 ON T1.CultureID = T2.CultureID WHERE T1.Name = 'English' OR T1.Name = 'Arabic'", "source_tables": ["culture", "productmodelproductdescriptionculture"]}, "evidence": "Data saved in English refers to the name of the language where Culture.Name = 'English'; data saved in Arabic refers to the name of the language where Culture.Name = 'Arabic';\u00a0\u00a0 SUBTRACT(count(Name = 'English'), count(Name = 'Bothell'))"}
{"sample_id": 7135, "db_id": "works_cycles", "final": {"question": "What is the location of business number 1?", "sql": "SELECT T1.AddressLine1 FROM Address AS T1 INNER JOIN BusinessEntityAddress AS T2 USING (AddressID) WHERE T2.BusinessEntityID = 1", "source_tables": ["businessentityaddress", "address"]}, "evidence": "Location refers to AddressLine1; business number refers to the BusinessEntityID where BusinessEntityID = 1"}
{"sample_id": 7136, "db_id": "works_cycles", "final": {"question": "Please list the businesses along with their numbers that have their accounts located in Duvall.", "sql": "SELECT T2.BusinessEntityID FROM Address AS T1 INNER JOIN BusinessEntityAddress AS T2 ON T1.AddressID = T2.AddressID WHERE T1.City = 'Duvall'", "source_tables": ["businessentityaddress", "address"]}, "evidence": "Business along with their numbers refers to the BusinessEntityID; located in Duvall refers to City = 'Duvall'"}
{"sample_id": 7137, "db_id": "works_cycles", "final": {"question": "What percentage of the AdventureWorks data is in Thai?", "sql": "SELECT CAST(SUM(CASE WHEN T1.Name = 'Thai' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.CultureID) FROM Culture AS T1 INNER JOIN ProductModelProductDescriptionCulture AS T2 ON T1.CultureID = T2.CultureID", "source_tables": ["culture", "productmodelproductdescriptionculture"]}, "evidence": "percentage = DIVIDE(Culture.Name = 'Thai', count(ALL Culture.Name))*100%"}
{"sample_id": 7138, "db_id": "works_cycles", "final": {"question": "What percentage of AdventureWorks employees are men?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessentityID) FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessentityID = T2.BusinessentityID WHERE T1.PersonType = 'EM'", "source_tables": ["employee", "person"]}, "evidence": "male refers to Gender = 'M'; employee refers to PersonType = 'EM'; percentage = DIVIDE(COUNT(Gender = 'M'), COUNT(PersonType = 'MY'))*100%;"}
{"sample_id": 7139, "db_id": "works_cycles", "final": {"question": "Where is the address 15873 located, in what city and state? Does that city belong to a province where the code exists?", "sql": "SELECT T2.City, T1.Name, T1.IsOnlyStateProvinceFlag FROM StateProvince AS T1 INNER JOIN Address AS T2 ON T1.StateProvinceID = T2.StateProvinceID WHERE T2.AddressID = 15873", "source_tables": ["stateprovince", "address"]}, "evidence": "Address number 15873 refers to AddressID = '15873'; IsOnlyStateProvinceCode = '0' refers to StateProvinceCode exists; IsOnlyStateProvinceCode = '1' refers to StateProvinceCode unavailable;"}
{"sample_id": 7140, "db_id": "works_cycles", "final": {"question": "What is the full address of business number 24?", "sql": "SELECT T1.AddressLine1, T1.AddressLine2 FROM Address AS T1 INNER JOIN BusinessEntityAddress AS T2 ON T1.AddressID = T2.AddressID WHERE T2.BusinessEntityID = 24", "source_tables": ["businessentityaddress", "address"]}, "evidence": "Full address refers to AddressLine1+AddressLine2; business number 24 refers to BusinessEntityID = '24'"}
{"sample_id": 7141, "db_id": "works_cycles", "final": {"question": "Which year is credit card No.9648's Expiration Year?", "sql": "SELECT ExpYear FROM CreditCard WHERE CreditCardID = 9648", "source_tables": ["creditcard"]}, "evidence": "Expiration year refers to ExpYear"}
{"sample_id": 7142, "db_id": "works_cycles", "final": {"question": "What's Emma H Harris's Business Entity ID number?", "sql": "SELECT BusinessEntityID FROM Person WHERE FirstName = 'Emma' AND LastName = 'Harris'", "source_tables": ["person"]}, "evidence": ""}
{"sample_id": 7143, "db_id": "works_cycles", "final": {"question": "What is the location id for Debur and Polish?", "sql": "SELECT LocationID FROM Location WHERE Name = 'Debur and Polish'", "source_tables": ["location"]}, "evidence": "Debur and Polish is name of manufacturing location"}
{"sample_id": 7144, "db_id": "works_cycles", "final": {"question": "What are the Department ids under the Sales and Marketing Group?", "sql": "SELECT DepartmentID FROM Department WHERE GroupName = 'Sales and Marketing'", "source_tables": ["department"]}, "evidence": "Sales and Marketing is group name of a department"}
{"sample_id": 7145, "db_id": "works_cycles", "final": {"question": "Which sales person made the sale of 1635823.3967 last year? Give the Business Entity ID.", "sql": "SELECT BusinessEntityID FROM SalesPerson WHERE SalesLastYear = '1635823.3967'", "source_tables": ["salesperson"]}, "evidence": ""}
{"sample_id": 7146, "db_id": "works_cycles", "final": {"question": "What is the Shift start time for Shift ID No.2?", "sql": "SELECT StartTime FROM Shift WHERE ShiftID = '2'", "source_tables": ["shift"]}, "evidence": ""}
{"sample_id": 7147, "db_id": "works_cycles", "final": {"question": "What is contact Type ID No.16 represent for?", "sql": "SELECT Name FROM ContactType WHERE ContactTypeID = '16'", "source_tables": ["contacttype"]}, "evidence": ""}
{"sample_id": 7148, "db_id": "works_cycles", "final": {"question": "What is the minimum shipping charge for \"OVERSEAS - DELUXE\"?", "sql": "SELECT ShipBase FROM ShipMethod WHERE Name = 'OVERSEAS - DELUXE'", "source_tables": ["shipmethod"]}, "evidence": "Minimum shipping charge refers to ShipBase; OVERSEAS - DELUXE is name of shipping company"}
{"sample_id": 7149, "db_id": "works_cycles", "final": {"question": "Please tell the meaning of CultureID \"fr\".", "sql": "SELECT Name FROM Culture WHERE CultureID = 'fr'", "source_tables": ["culture"]}, "evidence": "tell the meaning is to find the name of culture"}
{"sample_id": 7150, "db_id": "works_cycles", "final": {"question": "Give the Mauritius Rupee's currency code.", "sql": "SELECT CurrencyCode FROM Currency WHERE Name = 'Mauritius Rupee'", "source_tables": ["currency"]}, "evidence": "Mauritius Rupee is name of currency"}
{"sample_id": 7151, "db_id": "works_cycles", "final": {"question": "Name cellphone number's Type ID?", "sql": "SELECT PhoneNumberTypeID FROM PhoneNumberType WHERE Name = 'Cell'", "source_tables": ["phonenumbertype"]}, "evidence": "Cellphone refers to Name = 'Cell'"}
{"sample_id": 7152, "db_id": "works_cycles", "final": {"question": "For the older production technician who was hired in 2008/12/7, what's his/her birthday?", "sql": "SELECT BirthDate FROM Employee WHERE HireDate = '2008-12-07'", "source_tables": ["employee"]}, "evidence": "Oldest production technician refers to MIN(BirthDate) where JobTitle = 'Production Technician'"}
{"sample_id": 7153, "db_id": "works_cycles", "final": {"question": "What is the product ID No.793's model name?", "sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN ProductModel AS T2 ON T1.ProductModelID = T2.ProductModelID WHERE T1.ProductID = 793", "source_tables": ["product", "productmodel"]}, "evidence": ""}
{"sample_id": 7154, "db_id": "works_cycles", "final": {"question": "What are the unit measure codes for product ID No.762?", "sql": "SELECT T2.UnitMeasureCode FROM Product AS T1 INNER JOIN UnitMeasure AS T2 ON T1.SizeUnitMeasureCode = T2.UnitMeasureCode OR T1.WeightUnitMeasureCode = T2.UnitMeasureCode WHERE T1.ProductID = 762 GROUP BY T1.ProductID, T2.UnitMeasureCode", "source_tables": ["product", "unitmeasure"]}, "evidence": ""}
{"sample_id": 7155, "db_id": "works_cycles", "final": {"question": "Where is Business Entity ID No.4 located at? Give the address down to street.", "sql": "SELECT AddressLine1, AddressLine2 FROM Address WHERE AddressID IN ( SELECT AddressID FROM BusinessEntityAddress WHERE BusinessEntityID = 4 )", "source_tables": ["businessentityaddress", "address"]}, "evidence": "Located refers to the total address of the entity that comprises city, addressline1, addressline2"}
{"sample_id": 7156, "db_id": "works_cycles", "final": {"question": "For the on going assembly item Component ID No. 494, what's the Unit measure for it?", "sql": "SELECT T2.Name FROM BillOfMaterials AS T1 INNER JOIN UnitMeasure AS T2 ON T1.UnitMeasureCode = T2.UnitMeasureCode WHERE T1.ComponentID = 494 AND T1.EndDate IS NULL GROUP BY T2.name", "source_tables": ["billofmaterials", "unitmeasure"]}, "evidence": "On going assembly item means the assembly item haven't been finished, therefore EndDate is null"}
{"sample_id": 7157, "db_id": "works_cycles", "final": {"question": "For the document Control Assistant who was born on 1975/12/25, how many private documents did he/she have?", "sql": "SELECT COUNT(T2.BusinessEntityID) FROM Document AS T1 INNER JOIN Employee AS T2 ON T1.Owner = T2.BusinessEntityID WHERE T2.JobTitle = 'Document Control Assistant' AND T2.BirthDate = '1975-12-25' AND T1.DocumentSummary IS NULL", "source_tables": ["employee", "document"]}, "evidence": "Document Control Assistant refers\u00a0to the\u00a0JobTitle = 'Document Control Assistant'; born on 1975/12/25 refers to BirthDate = '1975-12-25'; private documents indicate that DocumentSummary is null"}
{"sample_id": 7158, "db_id": "works_cycles", "final": {"question": "To the products which could make the profit as 21.9037, what were their list price after October of 2012?", "sql": "SELECT T1.ListPrice FROM Product AS T1 INNER JOIN ProductListPriceHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ListPrice - T1.StandardCost > 21.9037 AND STRFTIME('%Y-%m-%d', T2.StartDate) >= '2012-10-01'", "source_tables": ["product", "productlistpricehistory"]}, "evidence": "Profit as 82.41 = SUTRACT(ListPrice, StandardCost); May of 2012 refers to StartDate = '2012-05'"}
{"sample_id": 7159, "db_id": "works_cycles", "final": {"question": "What is the size of the photo of product id No.1?", "sql": "SELECT T1.ThumbNailPhoto FROM ProductPhoto AS T1 INNER JOIN ProductProductPhoto AS T2 ON T1.ProductPhotoID = T2.ProductPhotoID WHERE T2.ProductID = 1", "source_tables": ["productproductphoto", "productphoto"]}, "evidence": ""}
{"sample_id": 7160, "db_id": "works_cycles", "final": {"question": "How many letters are there in Catherine Ward's e-mail account passwords?", "sql": "SELECT LENGTH(T2.PasswordHash) FROM Person AS T1 INNER JOIN Password AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'Catherine' AND T1.LastName = 'Ward'", "source_tables": ["password", "person"]}, "evidence": "Catherine Ward refers to the name of BusinessEntityID; how many letters in password for the e-mail account refers to LENGTH(PasswordHash)"}
{"sample_id": 7161, "db_id": "works_cycles", "final": {"question": "What rating did Jill give for HL Mountain Pedal?", "sql": "SELECT T1.Rating FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ReviewerName = 'Jill' AND T2.Name = 'HL Mountain Pedal'", "source_tables": ["product", "productreview"]}, "evidence": "Jill refers to the name of reviewer; HL Mountain Pedal refers to the name of the product"}
{"sample_id": 7162, "db_id": "works_cycles", "final": {"question": "What's the profit for the Freewheel?", "sql": "SELECT T1.LastReceiptCost - T1.StandardPrice FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Freewheel'", "source_tables": ["product", "productvendor"]}, "evidence": "SUBTRACT(LastReceiptCost, StandardPrice) for ProductID where name = 'Freewheel'"}
{"sample_id": 7163, "db_id": "works_cycles", "final": {"question": "Did Rachel Valdez complete her sales task?", "sql": "SELECT T1.Bonus FROM SalesPerson AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.FirstName = 'Rachel' AND T2.LastName = 'Valdez'", "source_tables": ["person", "salesperson"]}, "evidence": "Complete sales task refers to meeting sales quota; if Bonus = 0, it means this salesperson doesn't meet quota and vice versa"}
{"sample_id": 7164, "db_id": "works_cycles", "final": {"question": "How many types of tax did the sales happen in Quebec have?", "sql": "SELECT COUNT(DISTINCT T1.Name) FROM SalesTaxRate AS T1 INNER JOIN StateProvince AS T2 ON T1.StateProvinceID = T2.StateProvinceID WHERE T2.Name = 'Quebec'", "source_tables": ["salestaxrate", "stateprovince"]}, "evidence": "If Name = \"+\" in the value from SalesTaxRate, it means this sales are charged by multiple types of tax; Quebec refers to the name of State Province"}
{"sample_id": 7165, "db_id": "works_cycles", "final": {"question": "What's Kevin A Wright's email address?", "sql": "SELECT T2.EmailAddress FROM Person AS T1 INNER JOIN EmailAddress AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'Kevin' AND T1.MiddleName = 'A' AND T1.LastName = 'Wright'", "source_tables": ["person", "emailaddress"]}, "evidence": ""}
{"sample_id": 7166, "db_id": "works_cycles", "final": {"question": "What is the number of State Province of France that doesn't have a State Province Code?", "sql": "SELECT T1.CountryRegionCode FROM StateProvince AS T1 INNER JOIN CountryRegion AS T2 ON T1.CountryRegionCode = T2.CountryRegionCode WHERE T2.Name = 'France' AND T1.IsOnlyStateProvinceFlag = 1", "source_tables": ["stateprovince", "countryregion"]}, "evidence": "Doesn't have a State Province Code refers to IsOnlyStateProvinceFlag = 1 where StateProvinceCode is unavailable"}
{"sample_id": 7167, "db_id": "works_cycles", "final": {"question": "What kind of transaction type for the \"HL Road Frame - Black, 48\" order happened in 2012/12/13?", "sql": "SELECT T1.TransactionType FROM TransactionHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'HL Road Frame - Black, 48' AND STRFTIME('%Y-%m-%d',T1.TransactionDate) = '2013-07-31'", "source_tables": ["product", "transactionhistory"]}, "evidence": "Transactiontype = 'w' means 'WorkOrder'; transactiontype = 's' means 'SalesOrder'; transactiontype = 'P' means 'PurchaseOrder'; happened in refers to TransactionDate"}
{"sample_id": 7168, "db_id": "works_cycles", "final": {"question": "Which type of transaction was it for the \"LL Road Handlebars\" order happened in 2012/11/3?", "sql": "SELECT T1.TransactionType FROM TransactionHistoryArchive AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'LL Road Handlebars' AND STRFTIME('%Y-%m-%d',T1.TransactionDate) = '2012-11-03'", "source_tables": ["product", "transactionhistoryarchive"]}, "evidence": "Transactiontype = 'w' means 'WorkOrder'; transactiontype = 's' means 'SalesOrder'; transactiontype = 'P' means 'PurchaseOrder'; happened in refers to TransactionDate"}
{"sample_id": 7169, "db_id": "works_cycles", "final": {"question": "How is the Credit Rating for company whose rowguid is \"33671A4E-DF2B-4879-807B-E3F930DD5C0C\"?", "sql": "SELECT T1.CreditRating FROM Vendor AS T1 INNER JOIN BusinessEntity AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.rowguid = '33671A4E-DF2B-4879-807B-E3F930DD5C0C'", "source_tables": ["vendor", "businessentity"]}, "evidence": "CreditRating = 1 means 'Superior'; CreditRating = 2 means 'Excellent'; CreditRating = 3 means 'Above average'; CreditRating = 4 means 'Superior'; CreditRating = 5 means 'Below average'"}
{"sample_id": 7170, "db_id": "works_cycles", "final": {"question": "What is the PreferredVendorStatus for the company which has the rowguid of \"684F328D-C185-43B9-AF9A-37ACC680D2AF\"?", "sql": "SELECT T1.PreferredVendorStatus FROM Vendor AS T1 INNER JOIN BusinessEntity AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.rowguid = '684F328D-C185-43B9-AF9A-37ACC680D2AF'", "source_tables": ["vendor", "businessentity"]}, "evidence": "PreferredVendorStatus = 1 means 'Do not use if another vendor is available'; CreditRating = 2 means 'Preferred over other vendors supplying the same product'"}
{"sample_id": 7171, "db_id": "works_cycles", "final": {"question": "For person id No.2054, is his/her vendor still active?", "sql": "SELECT T1.ActiveFlag FROM Vendor AS T1 INNER JOIN BusinessEntityContact AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonID = 2054", "source_tables": ["vendor", "businessentitycontact"]}, "evidence": "ActiveFlag = 1 means 'Vendor no longer used'; ActiveFlag = 2 means 'Vendor is actively used"}
{"sample_id": 7172, "db_id": "works_cycles", "final": {"question": "Show me the phone number of Gerald Patel's.", "sql": "SELECT T2.PhoneNumber FROM Person AS T1 INNER JOIN PersonPhone AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'Gerald' AND T1.LastName = 'Patel'", "source_tables": ["personphone", "person"]}, "evidence": ""}
{"sample_id": 7173, "db_id": "works_cycles", "final": {"question": "Which is Business Entity ID No.13626's phone number type?", "sql": "SELECT T2.Name FROM PersonPhone AS T1 INNER JOIN PhoneNumberType AS T2 USING (PhoneNumberTypeID) WHERE T1.BusinessEntityID = 13626", "source_tables": ["phonenumbertype", "personphone"]}, "evidence": ""}
{"sample_id": 7174, "db_id": "works_cycles", "final": {"question": "What's Lynn N Tsoflias's job title?", "sql": "SELECT T2.JobTitle FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'Lynn' AND T1.MiddleName = 'N' AND T1.LastName = 'Tsoflias'", "source_tables": ["employee", "person"]}, "evidence": ""}
{"sample_id": 7175, "db_id": "works_cycles", "final": {"question": "What is the number of the sub categories for bikes?", "sql": "SELECT COUNT(*) FROM ProductCategory AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductCategoryID = T2.ProductCategoryID WHERE T1.Name = 'Bikes'", "source_tables": ["productcategory", "productsubcategory"]}, "evidence": "Bike refers to the name of the product category, therefore ProductCategoryID = 1"}
{"sample_id": 7176, "db_id": "works_cycles", "final": {"question": "For the document Control Assistant who was hired on 2009/1/22, what is the percentage of private documents did he/she have?", "sql": "SELECT CAST(SUM(CASE WHEN T1.DocumentSummary IS NOT NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.DocumentSummary) FROM Document AS T1 INNER JOIN Employee AS T2 ON T1.Owner = T2.BusinessEntityID WHERE T2.JobTitle = 'Document Control Assistant' AND T2.HireDate = '2009-01-22'", "source_tables": ["employee", "document"]}, "evidence": "Document Control Assistant refers\u00a0 to the\u00a0 JobTitle = 'Document Control Assistant'; hired on 2009/1/22 means the person's hiring date is HireDate = '2009-01-22'; private documents indicate that DocumentSummary is null; DIVIDE(COUNT(DocumentSummary is null), COUNT(DocumentSummary))*100"}
{"sample_id": 7177, "db_id": "works_cycles", "final": {"question": "How much is HL Grip Tape's profit ratio?", "sql": "SELECT (T1.LastReceiptCost - T1.StandardPrice) / T1.StandardPrice FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'HL Grip Tape'", "source_tables": ["product", "productvendor"]}, "evidence": "HL Grip Tape refers to the product name; DIVIDE(SUBTRACT(LastReceiptCost, StandardPrice)), (StandardPrice) as profit_ratio"}
{"sample_id": 7178, "db_id": "works_cycles", "final": {"question": "For all phone numbers, what percentage of the total is cell phone?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Name = 'Cell' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Name) FROM PersonPhone AS T1 INNER JOIN PhoneNumberType AS T2 ON T1.PhoneNumberTypeID = T2.PhoneNumberTypeID", "source_tables": ["phonenumbertype", "personphone"]}, "evidence": "Cellphone referes to the name of the phone type, therefore PhoneNumberTypeID = 1; DIVIDE(COUNT(PhoneNumberTypeID = 1), (COUNT(PhoneNumberTypeID)) as percentage"}
{"sample_id": 7179, "db_id": "works_cycles", "final": {"question": "What are the product assembly ID that come with unit measure code EA and BOM level of 2, at the same time have per assembly quantity of more than 10?", "sql": "SELECT ProductAssemblyID FROM BillOfMaterials WHERE UnitMeasureCode = 'EA' AND BOMLevel = 2 AND PerAssemblyQty > 10", "source_tables": ["billofmaterials"]}, "evidence": "Per assembly quantity of more than 10 is expresses as PerAssemblyQty>10"}
{"sample_id": 7180, "db_id": "works_cycles", "final": {"question": "How many location IDs have actual resource hours of 2?", "sql": "SELECT COUNT(LocationID) FROM WorkOrderRouting WHERE ActualResourceHrs = 2", "source_tables": ["workorderrouting"]}, "evidence": "actual resource hours of 2 refers to ActualResourceHrs = 2"}
{"sample_id": 7181, "db_id": "works_cycles", "final": {"question": "What is the stocked quantity of products manufactured from location ID 40?", "sql": "SELECT COUNT(*) FROM WorkOrderRouting AS T1 INNER JOIN BillOfMaterials AS T2 ON T1.LocationID = T2.ProductAssemblyID INNER JOIN WorkOrder AS T3 ON T3.WorkOrderID = T1.WorkOrderID WHERE T1.LocationID = 40", "source_tables": ["workorderrouting", "workorder", "billofmaterials"]}, "evidence": "Stocked quantity refers to StockedQty"}
{"sample_id": 7182, "db_id": "works_cycles", "final": {"question": "What are the total per assembly quantity for unit measure code EA, IN and OZ respectively? What are the name of these 3 code?", "sql": "SELECT SUM(T1.PerAssemblyQty), T2.Name FROM BillOfMaterials AS T1 INNER JOIN UnitMeasure AS T2 ON T1.UnitMeasureCode = T2.UnitMeasureCode WHERE T1.UnitMeasureCode IN ('EA', 'IN', 'OZ') GROUP BY T2.Name", "source_tables": ["billofmaterials", "unitmeasure"]}, "evidence": "Pre assembly quantity refers to PerAssemblyQty"}
{"sample_id": 7183, "db_id": "works_cycles", "final": {"question": "Which product ID do not have any work order ID?", "sql": "SELECT ProductID FROM Product WHERE ProductID NOT IN ( SELECT T1.ProductID FROM Product AS T1 INNER JOIN WorkOrder AS T2 ON T1.ProductID = T2.ProductID )", "source_tables": ["product", "workorder"]}, "evidence": "Do not have any work order ID means WorkOrderID is null"}
{"sample_id": 7184, "db_id": "works_cycles", "final": {"question": "What is the name of product purchased with transaction type P?", "sql": "SELECT ProductID FROM Product WHERE ProductID IN ( SELECT ProductID FROM TransactionHistory WHERE TransactionType = 'P' )", "source_tables": ["product", "transactionhistory"]}, "evidence": ""}
{"sample_id": 7185, "db_id": "works_cycles", "final": {"question": "State the full name of accountants in the company.", "sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle = 'Accountant'", "source_tables": ["employee", "person"]}, "evidence": "Accountants refers to JobTitle = 'Accountant'; full name includes FirstName, LastName, and MiddleName"}
{"sample_id": 7186, "db_id": "works_cycles", "final": {"question": "What is the job position currently occupied by Ken J S\u00c3\u00a1nchez?", "sql": "SELECT T1.JobTitle FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.FirstName = 'Ken' AND T2.MiddleName = 'J' AND T2.LastName = 'S\u00e1nchez'", "source_tables": ["employee", "person"]}, "evidence": "Job position refers to JobTitle"}
{"sample_id": 7187, "db_id": "works_cycles", "final": {"question": "How many male employees do not wish to receive e-mail promotion?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 0 AND T1.Gender = 'M'", "source_tables": ["employee", "person"]}, "evidence": "Male refers to Gender = 'M'; employees do not wish to receive any e-mail promotions are marked as EmailPromotion = 0"}
{"sample_id": 7188, "db_id": "works_cycles", "final": {"question": "Who is the top sales person who achived highest percentage of projected sales quota in 2013?", "sql": "SELECT BusinessEntityID FROM SalesPerson WHERE BusinessEntityID IN ( SELECT BusinessEntityID FROM SalesPersonQuotaHistory WHERE STRFTIME('%Y', QuotaDate) = '2013' ) ORDER BY CAST(SalesLastYear AS REAL) / SalesQuota DESC LIMIT 1", "source_tables": ["salespersonquotahistory", "salesperson"]}, "evidence": "2013 refers to QuotaDate = '2013'; DIVIDE(SalesLastYear), (SUM(SalesQuota where YEAR(QuotaDate) = 2013)) as percentage\n"}
{"sample_id": 7189, "db_id": "works_cycles", "final": {"question": "How many of the non-sales employees are married?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'EM' AND T1.MaritalStatus = 'M'", "source_tables": ["employee", "person"]}, "evidence": "Married refers to MaritalStatus = 'M';\u00a0 non-sales employees refer to PersonType = 'EM'"}
{"sample_id": 7190, "db_id": "works_cycles", "final": {"question": "Among the Production Technicians who are single, how many of them are vendor contact?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle LIKE 'Production Technician%' AND T1.MaritalStatus = 'S' AND T2.PersonType = 'VC'", "source_tables": ["employee", "person"]}, "evidence": "Production Technicians refer to the\u00a0 JobTitle = 'Production Technician%'; single refers to MaritalStatus = 'S'; Vendor contact refers to PersonType = 'VC'"}
{"sample_id": 7191, "db_id": "works_cycles", "final": {"question": "What is the total sick leave hours of employees who do not wish to receive any e-mail promotion?", "sql": "SELECT SUM(T1.SickLeaveHours) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 0", "source_tables": ["employee", "person"]}, "evidence": "Employees who do not wish to receive any e-mail promotions are marked as EmailPromotion = 0"}
{"sample_id": 7192, "db_id": "works_cycles", "final": {"question": "Among the sales people, who are hired prior to 2010?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP' AND SUBSTR(T1.HireDate, 0, 4) < 2010", "source_tables": ["employee", "person"]}, "evidence": "Sales people refer to PersonType = 'SP'; hired prior to 2010 means the person's hiring date was before 2010, therefore year(HireDate)<2010"}
{"sample_id": 7193, "db_id": "works_cycles", "final": {"question": "Which sales person achieved the highest sales YTD? What is the projected yearly sales quota in 2011 for this person?", "sql": "SELECT T1.BusinessEntityID, SUM(T1.SalesQuota) FROM SalesPerson AS T1 INNER JOIN SalesPersonQuotaHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE STRFTIME('%Y', T2.QuotaDate) = '2011' GROUP BY T1.BusinessEntityID ORDER BY SUM(T1.SalesYTD) DESC LIMIT 1", "source_tables": ["salespersonquotahistory", "salesperson"]}, "evidence": "Sales people refer to PersonType = 'SP'; projected yearly sales refers to SalesQuota"}
{"sample_id": 7194, "db_id": "works_cycles", "final": {"question": "How many people with the name Alex are single and occupying organization level of 1?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.FirstName = 'Alex' AND T1.MaritalStatus = 'S' AND T1.OrganizationLevel = 1", "source_tables": ["employee", "person"]}, "evidence": "Alex refers to FirstName = 'Alex'; single refers to MaritalStatus = 'S'"}
{"sample_id": 7195, "db_id": "works_cycles", "final": {"question": "What is the average vacation hours taken by Sales person?", "sql": "SELECT CAST(SUM(T1.VacationHours) AS REAL) / COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP'", "source_tables": ["employee", "person"]}, "evidence": "Store Contact refers PersonType = 'SC'; AVG(VacationHours"}
{"sample_id": 7196, "db_id": "works_cycles", "final": {"question": "State the last name and job title of owner for document \"Crank Arm and Tire Maintenance\".", "sql": "SELECT T1.LastName, T3.JobTitle FROM Person AS T1 INNER JOIN Document AS T2 ON T1.BusinessEntityID = T2.Owner INNER JOIN Employee AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Title = 'Crank Arm and Tire Maintenance'", "source_tables": ["employee", "person", "document"]}, "evidence": "The owner refers to BusinessEntityID"}
{"sample_id": 7197, "db_id": "works_cycles", "final": {"question": "How many employees do not have any suffix and what are their organization level?", "sql": "SELECT COUNT(T3.BusinessEntityID) FROM ( SELECT T1.BusinessEntityID FROM Employee AS T1 INNER JOIN Person AS T2 USING (BusinessEntityID) WHERE T2.Suffix IS NULL GROUP BY T1.BusinessEntityID ) AS T3", "source_tables": ["employee", "person"]}, "evidence": "Do not have any suffix means Suffix is null"}
{"sample_id": 7198, "db_id": "works_cycles", "final": {"question": "Among the sales people who achieved projected sales quota 2013, is there any person from territory ID 1? If yes, state the business entity ID.", "sql": "SELECT DISTINCT T1.BusinessEntityID FROM SalesPerson AS T1 INNER JOIN SalesPersonQuotaHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.TerritoryID = 1 AND STRFTIME('%Y', QuotaDate) = '2013'", "source_tables": ["salespersonquotahistory", "salesperson"]}, "evidence": "projected sales quota refers to SalesQuota; projected sales quota in 2013 refers to year(QuotaDate) = 2013;"}
{"sample_id": 7199, "db_id": "works_cycles", "final": {"question": "Who are the employees that submitted resume to Human Resource Department and got hired? State the last name.", "sql": "SELECT T3.LastName FROM Employee AS T1 INNER JOIN JobCandidate AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Person AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T1.BusinessEntityID IN (212, 274)", "source_tables": ["employee", "person", "jobcandidate"]}, "evidence": "employees that submitted resume to Human Resource Department and got hired refers to BusinessEntittyID NOT null;"}
{"sample_id": 7200, "db_id": "works_cycles", "final": {"question": "List down the email address of female single employees.", "sql": "SELECT T3.EmailAddress FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmailAddress AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.Gender = 'F' AND T1.MaritalStatus = 'S'", "source_tables": ["employee", "person", "emailaddress"]}, "evidence": "female refers to Gender = 'F'; single refers to MaritalStatus = 'S';"}
{"sample_id": 7201, "db_id": "works_cycles", "final": {"question": "What are the color of products that were reviewed?", "sql": "SELECT T1.Color FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID = 709 OR 937 OR 798", "source_tables": ["product", "productreview"]}, "evidence": ""}
{"sample_id": 7202, "db_id": "works_cycles", "final": {"question": "What is the projected sales quota amount in 2013 and sales YTD amount for sales person with business entity ID 275?", "sql": "SELECT SUM(T1.SalesQuota) FROM SalesPerson AS T1 INNER JOIN SalesPersonQuotaHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.BusinessEntityID = 275 AND STRFTIME('%Y', QuotaDate) = '2013'", "source_tables": ["salespersonquotahistory", "salesperson"]}, "evidence": "projected sales quota refers to SalesQuota; projected sales quota in 2013 refers to year(QuotaDate) = 2013; projected sales quota for 2013 = SUM(SalesQuota where year(QuotaDate) = 2013);"}
{"sample_id": 7203, "db_id": "works_cycles", "final": {"question": "Provide the business entity ID who did not achieved projected yearly sales quota in 2013.", "sql": "SELECT DISTINCT T1.BusinessEntityID FROM SalesPerson AS T1 INNER JOIN SalesPersonQuotaHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE STRFTIME('%Y', T2.QuotaDate) = '2013' AND T1.SalesQuota < T1.SalesLastYear", "source_tables": ["salespersonquotahistory", "salesperson"]}, "evidence": "projected yearly sales quota refers to SalesQuota; sales quota in 2013 refers to year(QuotaDate) = 2013; person who did not achieve projected yearly sales quota refers to SalesQuota>SalesYTD;"}
{"sample_id": 7204, "db_id": "works_cycles", "final": {"question": "Among the employees who wish to receive e-mail promotion from AdventureWorks, how many percent of them are female?", "sql": "SELECT CAST(SUM(CASE WHEN T1.Gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 1", "source_tables": ["employee", "person"]}, "evidence": "female refers to Gender = 'F'; employee who wish to receive email promotion refers to EmailPromotion = 1; percentage = DIVIDE(SUM(Gender = 'F')), (sum(Gender = 'F' or Gender = 'M'))) as percentage;"}
{"sample_id": 7205, "db_id": "works_cycles", "final": {"question": "How many times is married non sales employees against single non-sales employees?", "sql": "SELECT CAST(SUM(CASE WHEN T1.MaritalStatus = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.MaritalStatus = 'S' THEN 1 ELSE 0 END) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'EM'", "source_tables": ["employee", "person"]}, "evidence": "non-sales employee refers to PersonType = 'EM'; married refers to MaritalStatus = 'M'; single refers to MaritalStatus = 'S'; percentage = DIVIDE(SUM(MaritalStatus = 'M'), (SUM(MaritalStatus = 'S') as percentage;"}
{"sample_id": 7206, "db_id": "works_cycles", "final": {"question": "How much is the total bonus received by sales person and what is the percentage of it against the projected yearly sales quota in 2013?", "sql": "SELECT SUM(T1.Bonus) , CAST(SUM(T1.Bonus) AS REAL) * 100 / SUM(T1.SalesQuota) FROM SalesPerson AS T1 INNER JOIN SalesPersonQuotaHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE STRFTIME('%Y', T2.QuotaDate) = '2013'", "source_tables": ["salespersonquotahistory", "salesperson"]}, "evidence": "projected yearly sales quota refers to SalesQuota; projected yearly sales quota in 2013 refers to year(QuotaDate) = 2013; percentage = (MULTIPLY(DIVIDE(SUM(Bonus)), (SUM(SalesQuota))) as percentage;"}
{"sample_id": 7207, "db_id": "works_cycles", "final": {"question": "How many types of credit cards are there and how many are vista?", "sql": "SELECT COUNT(CardNumber) FROM CreditCard WHERE CardType = 'vista'", "source_tables": ["creditcard"]}, "evidence": "type of credit card refers to CardType; CardType = 'Vista';"}
{"sample_id": 7208, "db_id": "works_cycles", "final": {"question": "What is the name of the product with the id \"475\"?", "sql": "SELECT Name FROM Product WHERE ProductID = 475", "source_tables": ["product"]}, "evidence": ""}
{"sample_id": 7209, "db_id": "works_cycles", "final": {"question": "Among the employees born before 1980 , how many of them are single?", "sql": "SELECT COUNT(BusinessEntityID) FROM Employee WHERE MaritalStatus = 's' AND BirthDate < '1980-1-1'", "source_tables": ["employee"]}, "evidence": "BirthDate<'1980-01-01'; single refers to MaritalStatus = 'S' or null;"}
{"sample_id": 7210, "db_id": "works_cycles", "final": {"question": "List all the names of the stores assigned to the sales person with the id \"277\".", "sql": "SELECT Name FROM Store WHERE SalesPersonID = 277", "source_tables": ["store"]}, "evidence": ""}
{"sample_id": 7211, "db_id": "works_cycles", "final": {"question": "How many products with the id \"989\" were sold in August 2013?", "sql": "SELECT SUM(Quantity) FROM TransactionHistory WHERE TransactionDate LIKE '2013-08%' AND TransactionType = 'S' AND ProductID = 989", "source_tables": ["transactionhistory"]}, "evidence": "TransactionDate BETWEEN '2013-08-01' AND '2013-08-30'; sold in refers to TransactionType = 'S' which means SalesOrder;"}
{"sample_id": 7212, "db_id": "works_cycles", "final": {"question": "List all of the credit cards that had expired by 2007.", "sql": "SELECT CardNumber FROM CreditCard WHERE ExpYear < 2007", "source_tables": ["creditcard"]}, "evidence": "card that expires in 2007 refers to ExpYear = 2007;"}
{"sample_id": 7213, "db_id": "works_cycles", "final": {"question": "List all the pay rates of all employees that were hired at 20 years of age.", "sql": "SELECT T2.Rate FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE STRFTIME('%Y', T1.HireDate) - STRFTIME('%Y', T1.BirthDate) = 20", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "pay rate refers to Rate; 20 years old at the time of being hired refers to SUBTRACT(year(HireDate)), (year(BirthDate))) = 20;"}
{"sample_id": 7214, "db_id": "works_cycles", "final": {"question": "What is the name of the territory assigned to the sales person with business id \"277\"?", "sql": "SELECT T2.Name FROM SalesPerson AS T1 INNER JOIN SalesTerritory AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T1.BusinessEntityID = 277", "source_tables": ["salesterritory", "salesperson"]}, "evidence": "business id refers to BusinessEntityID"}
{"sample_id": 7215, "db_id": "works_cycles", "final": {"question": "What is the full name of the Vice President of Production?", "sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle = 'Vice President of Production'", "source_tables": ["employee", "person"]}, "evidence": "full name = FirstName+MiddleName+LastName; Vice President of Production is a JobTitle;"}
{"sample_id": 7216, "db_id": "works_cycles", "final": {"question": "How many employees in the Information Service department work the evening shift?", "sql": "SELECT COUNT(T2.BusinessEntityID) FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.DepartmentID = T2.DepartmentID INNER JOIN Shift AS T3 ON T2.ShiftId = T3.ShiftId WHERE T1.Name = 'Information Services' AND T3.Name = 'Evening'", "source_tables": ["employeedepartmenthistory", "shift", "department"]}, "evidence": "Information Service is a name of department;"}
{"sample_id": 7217, "db_id": "works_cycles", "final": {"question": "List all the purchase order ids of the vendor with a below average rating.", "sql": "SELECT T2.PurchaseOrderID FROM Vendor AS T1 INNER JOIN PurchaseOrderHeader AS T2 ON T1.BusinessEntityID = T2.VendorID WHERE T1.CreditRating = 5", "source_tables": ["vendor", "purchaseorderheader"]}, "evidence": "below average rating refers to CreditRating = 5;"}
{"sample_id": 7218, "db_id": "works_cycles", "final": {"question": "Is the phone number \"114-555-0100\" a work number or a home number?", "sql": "SELECT T2.Name FROM PersonPhone AS T1 INNER JOIN PhoneNumberType AS T2 ON T1.PhoneNumberTypeID = T2.PhoneNumberTypeID WHERE T1.PhoneNumber = '114-555-0100'", "source_tables": ["phonenumbertype", "personphone"]}, "evidence": ""}
{"sample_id": 7219, "db_id": "works_cycles", "final": {"question": "What is the total shipment by \"cargo transport 5\" cost of all purchase orders created on 12/14/2011?", "sql": "SELECT SUM(t2.freight) FROM ShipMethod AS t1 INNER JOIN PurchaseOrderHeader AS t2 ON t1.shipmethodid = t2.shipmethodid WHERE t1.name = 'cargo transport 5' AND t2.orderdate = '2011-12-14'", "source_tables": ["shipmethod", "purchaseorderheader"]}, "evidence": "Catgo Transport 5 is a name of shipping method; OrderDate = '2011-12-14'; total shipment cost = SUM(Freight);"}
{"sample_id": 7220, "db_id": "works_cycles", "final": {"question": "How many sales orders did the salesperson David R. Campbell create?", "sql": "SELECT COUNT(T2.TotalDue) FROM Person AS T1 INNER JOIN SalesOrderHeader AS T2 ON T1.ModifiedDate = T2.DueDate WHERE T1.FirstName = 'David' AND T1.MiddleName = 'R' AND T1.LastName = 'Campbell' AND T1.PersonType = 'SP'", "source_tables": ["salesorderheader", "person"]}, "evidence": "SP is an abbreviation for Sales Person; PersonType = 'SP';"}
{"sample_id": 7221, "db_id": "works_cycles", "final": {"question": "What is the email address of the Facilities Manager?", "sql": "SELECT T3.EmailAddress FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmailAddress AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.JobTitle = 'Facilities Manager'", "source_tables": ["employee", "person", "emailaddress"]}, "evidence": "Facilities Manager is a job title"}
{"sample_id": 7222, "db_id": "works_cycles", "final": {"question": "How many customers are there in Canada?", "sql": "SELECT COUNT(T2.CustomerID) FROM SalesTerritory AS T1 INNER JOIN Customer AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T1.Name = 'Canada'", "source_tables": ["salesterritory", "customer"]}, "evidence": "Canada is name of sales territory"}
{"sample_id": 7223, "db_id": "works_cycles", "final": {"question": "What is the shipping address for the sales order \"43873\"?", "sql": "SELECT T1.ShipToAddressID FROM SalesOrderHeader AS T1 INNER JOIN Address AS T2 ON T1.BillToAddressID = T2.AddressID WHERE T1.SalesOrderID = 43873 GROUP BY T1.ShipToAddressID", "source_tables": ["salesorderheader", "address"]}, "evidence": "shipping address = AddressLine1+AddressLine2+City;"}
{"sample_id": 7224, "db_id": "works_cycles", "final": {"question": "List the first names of the people with more than 65 sick leave hours.", "sql": "SELECT T2.FirstName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.SickLeaveHours > 65", "source_tables": ["employee", "person"]}, "evidence": "SickLeaveHours>65;"}
{"sample_id": 7225, "db_id": "works_cycles", "final": {"question": "Among all the production technicians, how many have a below average pay rate for a production technician?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle LIKE 'Production Technician%' AND T2.Rate < ( SELECT AVG(T2.Rate) FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle LIKE 'Production Technician%' )", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "production technician is a job title; below average rate refers to Rate<AVG(Rate);"}
{"sample_id": 7226, "db_id": "works_cycles", "final": {"question": "What proportion of sales orders are made from the United Kingdom?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Name = 'United Kingdom' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.SalesOrderID) FROM SalesOrderHeader AS T1 INNER JOIN SalesTerritory AS T2 ON T1.TerritoryID = T2.TerritoryID", "source_tables": ["salesorderheader", "salesterritory"]}, "evidence": "proportion = DIVIDE(SUM(Name = 'UK')), (COUNT(SalesOrderID))) as count;"}
{"sample_id": 7227, "db_id": "works_cycles", "final": {"question": "When is the modified date of the phone number \"1500 555-0143\"?", "sql": "SELECT ModifiedDate FROM PersonPhone WHERE PhoneNumber = '1 (11) 500 555-0143'", "source_tables": ["personphone"]}, "evidence": ""}
{"sample_id": 7228, "db_id": "works_cycles", "final": {"question": "What is the business ID of the person who has made the most sales total year to date?", "sql": "SELECT BusinessEntityID FROM SalesPerson ORDER BY SalesYTD DESC LIMIT 1", "source_tables": ["salesperson"]}, "evidence": "business ID refers to BusinessEntityID; sales total year to date refers to SalesYTD; most sales total year to date refers to MAX(SalesYTD);"}
{"sample_id": 7229, "db_id": "works_cycles", "final": {"question": "List all active vendors who offer a purchasing web service.", "sql": "SELECT Name FROM Vendor WHERE ActiveFlag = 1", "source_tables": ["vendor"]}, "evidence": "active vendors refers to ActiveFlag = 1; vendor who offer a purchasing web service refers to PurchasingWebServiceURL NOT null;"}
{"sample_id": 7230, "db_id": "works_cycles", "final": {"question": "Which territory has the most customers as of 9/12/2014?", "sql": "SELECT TerritoryID FROM Customer WHERE ModifiedDate < '2014-12-09' GROUP BY TerritoryID ORDER BY COUNT(TerritoryID) DESC LIMIT 1", "source_tables": ["customer"]}, "evidence": "ModifiedDate between'2014-09-12 00:00:00' and '2014-09-12 23:59:59';"}
{"sample_id": 7231, "db_id": "works_cycles", "final": {"question": "What is the total cost for all the orders placed on 5/29/2013?", "sql": "SELECT SUM(TotalDue) FROM PurchaseOrderHeader WHERE OrderDate LIKE '2013-05-29%'", "source_tables": ["purchaseorderheader"]}, "evidence": "total cost = SUM(TotalDue); OrderDate = '2013-05-29';"}
{"sample_id": 7232, "db_id": "works_cycles", "final": {"question": "What is the most common first name among the vendor contact?", "sql": "SELECT FirstName FROM Person WHERE PersonType = 'VC' GROUP BY FirstName ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["person"]}, "evidence": "vendor contact refers to PersonType = 'VC';"}
{"sample_id": 7233, "db_id": "works_cycles", "final": {"question": "List the full name of all the 'Production Technician - WC50'", "sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 USING (BusinessEntityID) WHERE T1.JobTitle = 'Production Technician - WC50' GROUP BY T2.FirstName, T2.MiddleName, T2.LastName", "source_tables": ["employee", "person"]}, "evidence": "full name = FirstName+MiddleName+LastName; Production Technician - WC50 is a job title;"}
{"sample_id": 7234, "db_id": "works_cycles", "final": {"question": "How many Minipumps have been sold?", "sql": "SELECT COUNT(OrderQty) FROM SalesOrderDetail WHERE ProductID IN ( SELECT ProductID FROM Product WHERE Name = 'Minipump' )", "source_tables": ["product", "salesorderdetail"]}, "evidence": "Minipump is name of a product"}
{"sample_id": 7235, "db_id": "works_cycles", "final": {"question": "What is the person's business ID with a vista credit card number \"11113366963373\"?", "sql": "SELECT T2.BusinessEntityID FROM CreditCard AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.CreditCardID = T2.CreditCardID WHERE T1.CardNumber = 11113366963373", "source_tables": ["creditcard", "personcreditcard"]}, "evidence": "business id refers to BusinessEntityID"}
{"sample_id": 7236, "db_id": "works_cycles", "final": {"question": "Where does the person with the BusinessEntityID \"5555\" live?", "sql": "SELECT T3.City, T3.AddressLine1 FROM BusinessEntityAddress AS T1 INNER JOIN AddressType AS T2 ON T1.AddressTypeID = T2.AddressTypeID INNER JOIN Address AS T3 ON T1.AddressID = T3.AddressID WHERE T1.BusinessEntityID = 5555 AND T2.Name = 'Home'", "source_tables": ["businessentityaddress", "address", "addresstype"]}, "evidence": "where the person live refers addresstype.Name = 'Home'"}
{"sample_id": 7237, "db_id": "works_cycles", "final": {"question": "List all the names of products with the special offer \"15\".", "sql": "SELECT T2.Name FROM SpecialOfferProduct AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.SpecialOfferID = 15", "source_tables": ["product", "specialofferproduct"]}, "evidence": ""}
{"sample_id": 7238, "db_id": "works_cycles", "final": {"question": "What is the credit card number for Michelle E Cox?", "sql": "SELECT T3.CreditCardID FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN CreditCard AS T3 ON T2.CreditCardID = T3.CreditCardID WHERE T1.FirstName = 'Michelle' AND T1.MiddleName = 'E' AND T1.LastName = 'Cox'", "source_tables": ["person", "creditcard", "personcreditcard"]}, "evidence": "credit card number refers to CreditCardID"}
{"sample_id": 7239, "db_id": "works_cycles", "final": {"question": "What is the reason for sales order \"51883\"?", "sql": "SELECT T2.Name FROM SalesOrderHeaderSalesReason AS T1 INNER JOIN SalesReason AS T2 ON T1.SalesReasonID = T2.SalesReasonID WHERE T1.SalesOrderID = 51883", "source_tables": ["salesreason", "salesorderheadersalesreason"]}, "evidence": "reason means the category of sales reason which refers to ReasonType"}
{"sample_id": 7240, "db_id": "works_cycles", "final": {"question": "What is the credit card number for the sales order \"45793\"?", "sql": "SELECT T2.CardNumber FROM SalesOrderHeader AS T1 INNER JOIN CreditCard AS T2 ON T1.CreditCardID = T2.CreditCardID WHERE T1.SalesOrderID = 45793", "source_tables": ["salesorderheader", "creditcard"]}, "evidence": ""}
{"sample_id": 7241, "db_id": "works_cycles", "final": {"question": "List all the sales people in the Northwest US.", "sql": "SELECT T2.BusinessEntityID FROM SalesTerritory AS T1 INNER JOIN SalesPerson AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T1.Name = 'Northwest' AND T1.CountryRegionCode = 'US'", "source_tables": ["salesterritory", "salesperson"]}, "evidence": "Northwest is name of SalesTerritory; US is the CountryRegionCode;"}
{"sample_id": 7242, "db_id": "works_cycles", "final": {"question": "Which Production Technician has the highest pay rate?", "sql": "SELECT T1.BusinessEntityID FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle LIKE 'Production Technician%' ORDER BY T2.Rate DESC LIMIT 1", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "highest pay rate refers to MAX(Rate);"}
{"sample_id": 7243, "db_id": "works_cycles", "final": {"question": "Who is the sales person in charge of the territory with the id \"9\"? Provide their full name.", "sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM SalesPerson AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.TerritoryID = 9", "source_tables": ["person", "salesperson"]}, "evidence": "full name = FirstName+MiddleName+LastName;"}
{"sample_id": 7244, "db_id": "works_cycles", "final": {"question": "What is the description of the discount for the product with the id \"762\"?", "sql": "SELECT T2.Description FROM SpecialOfferProduct AS T1 INNER JOIN SpecialOffer AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID WHERE T1.ProductID = 762", "source_tables": ["specialoffer", "specialofferproduct"]}, "evidence": ""}
{"sample_id": 7245, "db_id": "works_cycles", "final": {"question": "Compare the average pay rate of male and female employees.", "sql": "SELECT AVG(T2.Rate) FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID GROUP BY T1.Gender", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "male refers to Gender = 'M'; female refers to Gender = 'F'; difference in average rate = DIVIDE(AVG(Rate where Gender = 'F')), (AVG(Rate where Gender = 'M'))) as diff;"}
{"sample_id": 7246, "db_id": "works_cycles", "final": {"question": "What is the percentage of employees who work the night shift?", "sql": "SELECT CAST(SUM(CASE WHEN T1.Name = 'Night' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.BusinessEntityID) FROM Shift AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.ShiftId = T2.ShiftId", "source_tables": ["shift", "employeedepartmenthistory"]}, "evidence": "percentage = DIVIDE(SUM(Name = 'Night')), (COUNT(ShiftID)) as percentage;"}
{"sample_id": 7247, "db_id": "works_cycles", "final": {"question": "How many married male employees were born before the year 1960?", "sql": "SELECT COUNT(BusinessEntityID) FROM Employee WHERE MaritalStatus = 'M' AND STRFTIME('%Y', BirthDate) < '1960' AND Gender = 'M'", "source_tables": ["employee"]}, "evidence": "married refers to MaritalStatus = 'M'; male refers to Gender = 'M'; BirthDate < = '1959-12-31';"}
{"sample_id": 7248, "db_id": "works_cycles", "final": {"question": "What are the top 5 types of products with the highest selling price? ?", "sql": "SELECT Name FROM Product ORDER BY ListPrice DESC LIMIT 5", "source_tables": ["product"]}, "evidence": "highest selling price refers to MAX(ListPrice);"}
{"sample_id": 7249, "db_id": "works_cycles", "final": {"question": "When did the company hired its first Accountant?", "sql": "SELECT MIN(HireDate) FROM Employee WHERE JobTitle = 'Accountant'", "source_tables": ["employee"]}, "evidence": "Accountant is a job title; first hired = MIN(HireDate)"}
{"sample_id": 7250, "db_id": "works_cycles", "final": {"question": "In 2007, which job position was hired the most?", "sql": "SELECT JobTitle FROM Employee WHERE STRFTIME('%Y', HireDate) = '2007' GROUP BY HireDate ORDER BY COUNT(JobTitle) DESC LIMIT 1", "source_tables": ["employee"]}, "evidence": "Job position and job title are synonyms; job position that was hired the most refers to MAX(COUNT(JobTitle); HireDate BETWEEN '2007-1-1' AND '2007-12-31';"}
{"sample_id": 7251, "db_id": "works_cycles", "final": {"question": "What is the profit on net of the vendor with the highest standard price? If there are two vendors of the same amount, calculate only for one vendor.", "sql": "SELECT LastReceiptCost - StandardPrice FROM ProductVendor ORDER BY StandardPrice DESC LIMIT 1", "source_tables": ["productvendor"]}, "evidence": "profit on net = SUBTRACT(LastReceiptCost, StandardPrice);"}
{"sample_id": 7252, "db_id": "works_cycles", "final": {"question": "How many departments did Sheela Ward work in between 1/1/2011 to 12/31/2012", "sql": "SELECT COUNT(T3.Name) FROM Person AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T1.FirstName = 'Sheela' AND T1.LastName = 'Word' AND STRFTIME('%Y', T3.ModifiedDate) BETWEEN '2011' AND '2012'", "source_tables": ["person", "department", "employeedepartmenthistory"]}, "evidence": "number of departments an employee works for between 2011 and 2012 refers to year(StartDate) BETWEEN 2011 AND 2012 and year(EndDate) BETWEEN 2011 and 2012;"}
{"sample_id": 7253, "db_id": "works_cycles", "final": {"question": "What is the average age of the sales agents in the company by 12/31/2009?", "sql": "SELECT AVG(2009 - STRFTIME('%Y', T2.BirthDate)) FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.PersonType = 'SP'", "source_tables": ["employee", "person"]}, "evidence": "average age as of 12/31/2009 = AVG(SUBTRACT(2009, year(BirthDate));"}
{"sample_id": 7254, "db_id": "works_cycles", "final": {"question": "To which group does the department with the least amount of workers belong to? Indicate the name of the department as well.", "sql": "SELECT T2.GroupName FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID GROUP BY T2.GroupName ORDER BY COUNT(T1.BusinessEntityID) LIMIT 1", "source_tables": ["department", "employeedepartmenthistory"]}, "evidence": "least amount of workers refers to MIN(count(DepartmentID));"}
{"sample_id": 7255, "db_id": "works_cycles", "final": {"question": "What is the age of the oldest Marketing Specialist by 12/31/2015 and what is his/her hourly rate?", "sql": "SELECT 2015 - STRFTIME('%Y', T1.BirthDate), T2.Rate FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle = 'Marketing Specialist' ORDER BY 2015 - STRFTIME('%Y', T1.BirthDate) DESC LIMIT 1", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "age as of 12/31/2015 = SUBTRACT(2015, year(BirthDate)); hourly rate refers to Rate;"}
{"sample_id": 7256, "db_id": "works_cycles", "final": {"question": "What is the total amount due of all the purchases made by the company to the vendor that has the lowest selling price amount of a single product? Indicate the name of the vendor to which the purchases was made.", "sql": "SELECT T1.UnitPrice, T3.Name FROM PurchaseOrderDetail AS T1 INNER JOIN PurchaseOrderHeader AS T2 ON T1.PurchaseOrderID = T2.PurchaseOrderID INNER JOIN Vendor AS T3 ON T2.VendorID = T3.BusinessEntityID ORDER BY T1.UnitPrice LIMIT 1", "source_tables": ["purchaseorderheader", "vendor", "purchaseorderdetail"]}, "evidence": "Vendor's selling price of a single product refers to UnitPrice;"}
{"sample_id": 7257, "db_id": "works_cycles", "final": {"question": "Who made the purchase order with the greatest total due before freight? Indicate her employee ID and calculate for his/her age when he/she was hired.", "sql": "SELECT T2.BusinessEntityID, STRFTIME('%Y', T2.HireDate) - STRFTIME('%Y', T2.BirthDate) FROM PurchaseOrderHeader AS T1 INNER JOIN Employee AS T2 ON T1.EmployeeID = T2.BusinessEntityID ORDER BY T1.TotalDue DESC LIMIT 1", "source_tables": ["employee", "purchaseorderheader"]}, "evidence": "total due before freight = SUBTRACT(TotalDue, Freight); age at the time an employee was hired = SUBTRACT(HireDate, year(BirthDate);"}
{"sample_id": 7258, "db_id": "works_cycles", "final": {"question": "What is the position of the employee with the 10th highest salary? Indicate his/her salary amount and his/her full name.", "sql": "SELECT T2.JobTitle, T1.Rate, T3.FirstName, T3.MiddleName, T3.LastName FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Person AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID ORDER BY T1.Rate DESC LIMIT 9, 1", "source_tables": ["employee", "employeepayhistory", "person"]}, "evidence": "salary and Rate are synonyms; full name = FirstName+MiddleName+LastName;"}
{"sample_id": 7259, "db_id": "works_cycles", "final": {"question": "What is the profit of a single product that received the highest rating from John Smith? List the product/s' names.", "sql": "SELECT T1.ListPrice - T1.StandardCost, T1.Name FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ReviewerName = 'John Smith' ORDER BY T2.Rating DESC LIMIT 1", "source_tables": ["product", "productreview"]}, "evidence": "highest rating refers to Rating = 5; profit = SUBTRACT(ListPrice, StandardCost);"}
{"sample_id": 7260, "db_id": "works_cycles", "final": {"question": "What is the salary rate per hour that the company paid to the first 5 employees that they hired?", "sql": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Person AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID ORDER BY T2.HireDate ASC LIMIT 0, 5", "source_tables": ["employee", "employeepayhistory", "person"]}, "evidence": "salary rate per hour refers to Rate; first 5 employees that were hired refers to 5 oldest HireDate;"}
{"sample_id": 7261, "db_id": "works_cycles", "final": {"question": "Among the vendors with maximum orders betweeen 500 to 750, which vendor has the 10th highest profit on net?", "sql": "SELECT T2.Name FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.MaxOrderQty BETWEEN 500 AND 750 ORDER BY T1.LastReceiptCost - T1.StandardPrice DESC LIMIT 9, 1", "source_tables": ["vendor", "productvendor"]}, "evidence": "maximum orders refers to MaxOrderQty; MaxOrderQty BETWEEN '500' AND '750'; profit on net = SUBTRACT(LastReceiptCost, StandardPrice);"}
{"sample_id": 7262, "db_id": "works_cycles", "final": {"question": "As of 12/31/2011, how long has the employee assigned to all pending for approval papers been working in the company from the date he was hired?", "sql": "SELECT 2011 - STRFTIME('%Y', T2.HireDate) FROM Document AS T1 INNER JOIN Employee AS T2 ON T1.Owner = T2.BusinessEntityID WHERE T1.Status = 1", "source_tables": ["employee", "document"]}, "evidence": "pending for approval papers refer to Status = 1; length of stay in the company as of 12/31/2011 = SUBTRACT(2011, year(HireDate));"}
{"sample_id": 7263, "db_id": "works_cycles", "final": {"question": "Jill ranked which medium-quality class product as the highest, and how long will it take the company to manufacture such a product?", "sql": "SELECT T1.DaysToManufacture FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Rating = 5 AND T1.Class = 'M' ORDER BY T2.Rating LIMIT 1", "source_tables": ["product", "productreview"]}, "evidence": "second-lowest rating refers to Rating = 2; high-quality class product refers to Class = 'H'; length of time it takes the company to manufacture a product refers to DaysToManufacture;"}
{"sample_id": 7264, "db_id": "works_cycles", "final": {"question": "What was the first job position that the company needed, and who was hired? Indicate his/her full name.", "sql": "SELECT T1.JobTitle, T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.HireDate LIMIT 1", "source_tables": ["employee", "person"]}, "evidence": "job position and job title are synonyms; full name = FirstName+MiddleName+LastName;"}
{"sample_id": 7265, "db_id": "works_cycles", "final": {"question": "How many work orders with quantities ranging from 100 to 250 have a reorder point of no more than 375?", "sql": "SELECT COUNT(T1.TransactionID) FROM TransactionHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Quantity BETWEEN 100 AND 250 AND T2.ReorderPoint <= 375", "source_tables": ["product", "transactionhistory"]}, "evidence": "work order refers to TransactionType = 'W'; Quantity BETWEEN 100 AND 250; ReorderPoint< = 375;"}
{"sample_id": 7266, "db_id": "works_cycles", "final": {"question": "How much is the average salary of female employees in comparison to male employees?", "sql": "SELECT AVG(T2.Rate) FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Gender = 'F'", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "female refers to Gender = 'F'; male refers to Gender = 'M'; difference in the average salary of female against male employees = SUBTRACT(AVG(Rate where Gender = 'F')), (AVG(Rate where Gender = 'M')));"}
{"sample_id": 7267, "db_id": "works_cycles", "final": {"question": "What are the names of the vendors to which the company purchased its women's tights products?", "sql": "SELECT DISTINCT T4.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID INNER JOIN ProductSubcategory AS T3 ON T1.ProductSubcategoryID = T3.ProductSubcategoryID INNER JOIN Vendor AS T4 ON T2.BusinessEntityID = T4.BusinessEntityID WHERE T1.MakeFlag = 0 AND T1.Style = 'W' AND T3.Name = 'Tights'", "source_tables": ["product", "vendor", "productvendor", "productsubcategory"]}, "evidence": "product is purchased refers to MakeFlag = 0; women's refers to Style = 'W'; ProductSubcategoryID = 'Tights';"}
{"sample_id": 7268, "db_id": "works_cycles", "final": {"question": "How frequently does the first-ever Scheduling Assistant get paid?", "sql": "SELECT T2.PayFrequency FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle = 'Scheduling Assistant' ORDER BY T1.HireDate LIMIT 1", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "PayFrequency = 1 refers to \u2018Salary received monthly\u2019; PayFrequency = 2 refers to \u2018Salary received biweekly';"}
{"sample_id": 7269, "db_id": "works_cycles", "final": {"question": "What product has the fewest online orders from one customer? List the product's class, line of business, and list price.", "sql": "SELECT T2.Class, T2.ProductLine, T2.ListPrice FROM ShoppingCartItem AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductID ORDER BY SUM(Quantity) LIMIT 1", "source_tables": ["product", "shoppingcartitem"]}, "evidence": "fewest online orders refer to MIN(Quantity);"}
{"sample_id": 7270, "db_id": "works_cycles", "final": {"question": "What is the full name of the sales person who has the the highest commission percent received per sale?", "sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM SalesPerson AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.CommissionPct DESC LIMIT 1", "source_tables": ["person", "salesperson"]}, "evidence": "commision percent received per sale refers to CommissionPct; highest commision percent received per sale refers to MAX(CommissionPcT); full name = FirstName+MiddleName+LastName;"}
{"sample_id": 7271, "db_id": "works_cycles", "final": {"question": "What is the full name of the second oldest person in the company at the time he was hired?", "sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY STRFTIME('%Y', T1.HireDate) - STRFTIME('%Y', T1.BirthDate) DESC LIMIT 1, 1", "source_tables": ["employee", "person"]}, "evidence": "age at the time of being hired = SUBTRACT(HireDate, BirthDate); full name = FirstName+MiddleName+LastName;"}
{"sample_id": 7272, "db_id": "works_cycles", "final": {"question": "What is the total profit gained by the company from the product that has the highest amount of quantity ordered from online customers? Indicate the name of the product.", "sql": "SELECT (T2.ListPrice - T2.StandardCost) * SUM(T1.Quantity), T2.Name FROM ShoppingCartItem AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductID, T2.Name, T2.ListPrice, T2.StandardCost, T1.Quantity ORDER BY SUM(T1.Quantity) DESC LIMIT 1", "source_tables": ["product", "shoppingcartitem"]}, "evidence": "profit = MULTIPLY(SUBTRACT(ListPrice, Standardcost)), (Quantity)));"}
{"sample_id": 7273, "db_id": "works_cycles", "final": {"question": "What is the highest amount of difference between the ordered quantity and actual quantity received in a single purchase order and to which vendor was the purchase order made?", "sql": "SELECT T2.OrderQty - T2.ReceivedQty, VendorID FROM PurchaseOrderHeader AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.PurchaseOrderID = T2.PurchaseOrderID ORDER BY T2.OrderQty - T2.ReceivedQty DESC LIMIT 1", "source_tables": ["purchaseorderheader", "purchaseorderdetail"]}, "evidence": "highest amount of difference between the ordered quantity and actual quantity received in a single purchase order refers to MAX(SUBTRACT(OrderQty, ReceivedQty));"}
{"sample_id": 7274, "db_id": "works_cycles", "final": {"question": "What is the average lead time of product ID 843? Calculate for its profit on net and indicate the full location to which the vendor is located.", "sql": "SELECT T1.AverageLeadTime, T1.LastReceiptCost - T1.StandardPrice, T4.AddressLine1, T4.AddressLine2 , T4.City, T4.PostalCode FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN BusinessEntityAddress AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID INNER JOIN Address AS T4 ON T3.AddressID = T4.AddressID WHERE T1.ProductID = 843", "source_tables": ["vendor", "businessentityaddress", "productvendor", "address"]}, "evidence": "Profit on net = SUBTRACT(LastReceiptCost, StandardPrice); full location = AddressLine1+AddressLine2+City+PostalCode;"}
{"sample_id": 7275, "db_id": "works_cycles", "final": {"question": "How many salespersons haven't met quota?", "sql": "SELECT COUNT(BusinessEntityID) FROM SalesPerson WHERE Bonus = 0", "source_tables": ["salesperson"]}, "evidence": "salesperson that haven't met the quota refers to Bonus = 0;"}
{"sample_id": 7276, "db_id": "works_cycles", "final": {"question": "Among the sales with a tax applied to retail transaction, how many of them are charged by multiple types of taxes?", "sql": "SELECT COUNT(SalesTaxRateID) FROM SalesTaxRate WHERE Name LIKE '%+%'", "source_tables": ["salestaxrate"]}, "evidence": "tax applied to retail transaction refers to Taxtype = 1; sales that are charged with multiple types of tax refers to NAME LIKE '%+%';"}
{"sample_id": 7277, "db_id": "works_cycles", "final": {"question": "Please give the highest product cost of a purchase order.", "sql": "SELECT ActualCost FROM TransactionHistory WHERE TransactionType = 'P' ORDER BY ActualCost DESC LIMIT 1", "source_tables": ["transactionhistory"]}, "evidence": "product cost refers to ActualCost; purchase order refers to TransactionType = 'P';"}
{"sample_id": 7278, "db_id": "works_cycles", "final": {"question": "What is the current status of the order with the highest shipping cost?", "sql": "SELECT Status FROM SalesOrderHeader ORDER BY Freight DESC LIMIT 1", "source_tables": ["salesorderheader"]}, "evidence": "shipping cost and Freight are synonyms; highest shipping cost refers to MAX(Freight);"}
{"sample_id": 7279, "db_id": "works_cycles", "final": {"question": "How many products are out of stock?", "sql": "SELECT COUNT(ProductID) FROM ProductVendor WHERE OnOrderQty = 0", "source_tables": ["productvendor"]}, "evidence": "out of stock product refers to OnOrderQty = 0;"}
{"sample_id": 7280, "db_id": "works_cycles", "final": {"question": "What is the highest profit on net for a product?", "sql": "SELECT LastReceiptCost - StandardPrice FROM ProductVendor ORDER BY LastReceiptCost - StandardPrice DESC LIMIT 1", "source_tables": ["productvendor"]}, "evidence": "profit on net = subtract(LastReceiptCost, StandardPrice)"}
{"sample_id": 7281, "db_id": "works_cycles", "final": {"question": "Which reviewer gives the biggest number of the highest rating?", "sql": "SELECT ReviewerName FROM ProductReview WHERE Rating = ( SELECT Rating FROM ProductReview ORDER BY Rating DESC LIMIT 1 )", "source_tables": ["productreview"]}, "evidence": "highest rating refers to MAX(Rating)"}
{"sample_id": 7282, "db_id": "works_cycles", "final": {"question": "Which product gets the most reviews?", "sql": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductID ORDER BY COUNT(T1.ProductReviewID) DESC LIMIT 1", "source_tables": ["product", "productreview"]}, "evidence": "most reviews refers to MAX(count(ProductID))\n\n"}
{"sample_id": 7473, "db_id": "image_and_language", "final": {"question": "How many object samples are there in image no.1?", "sql": "SELECT COUNT(OBJ_SAMPLE_ID) FROM IMG_OBJ WHERE IMG_ID = 1", "source_tables": ["img_obj"]}, "evidence": "object samples refers to OBJ_SAMPLE_ID; image no.1 refers to IMG_ID = 1"}
{"sample_id": 7474, "db_id": "image_and_language", "final": {"question": "How many images have over 20 object samples?", "sql": "SELECT COUNT(T1.IMG_ID) FROM ( SELECT IMG_ID FROM IMG_OBJ GROUP BY IMG_ID HAVING COUNT(OBJ_SAMPLE_ID) > 20 ) T1", "source_tables": ["img_obj"]}, "evidence": "over 20 object samples refers to COUNT(OBJ_SAMPLE_ID) > 20"}
{"sample_id": 7475, "db_id": "image_and_language", "final": {"question": "What is the ID of the image with the most number of object samples?", "sql": "SELECT IMG_ID FROM IMG_OBJ GROUP BY IMG_ID ORDER BY COUNT(OBJ_SAMPLE_ID) DESC LIMIT 1", "source_tables": ["img_obj"]}, "evidence": "ID of the image refers to IMG_ID; most number of object samples refers to max(count(OBJ_SAMPLE_ID))"}
{"sample_id": 7476, "db_id": "image_and_language", "final": {"question": "Please list the IDs of the object samples in class no. 297 in image no.1.", "sql": "SELECT OBJ_SAMPLE_ID FROM IMG_OBJ WHERE IMG_ID = 1 AND OBJ_CLASS_ID = 297", "source_tables": ["img_obj"]}, "evidence": "IDs of the object samples refers to OBJ_SAMPLE_ID; class no. 297 in image no.1 refers to IMG_ID = 1 and OBJ_CLASS_ID = 297"}
{"sample_id": 7477, "db_id": "image_and_language", "final": {"question": "How many self-relations are there between the object samples in image no.5?", "sql": "SELECT SUM(CASE WHEN IMG_ID = 5 THEN 1 ELSE 0 END) FROM IMG_REL WHERE OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID", "source_tables": ["img_rel"]}, "evidence": "self-relations refers to OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID; image no.5 refers to IMG_ID = 5"}
{"sample_id": 7478, "db_id": "image_and_language", "final": {"question": "What is the bounding box of the object sample in image no.5 that has a self-relation?", "sql": "SELECT T2.X, T2.Y, T2.W, T2.H FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID WHERE T1.IMG_ID = 5 AND T1.OBJ1_SAMPLE_ID = T1.OBJ2_SAMPLE_ID", "source_tables": ["img_rel", "img_obj"]}, "evidence": "bounding box of the object sample refers to (x, y, W, H); image no.5 refers to IMG_ID = 5; has a self-relation refers to OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID"}
{"sample_id": 7479, "db_id": "image_and_language", "final": {"question": "How many object samples in image no.1 are in the class of \"man\"?", "sql": "SELECT SUM(CASE WHEN T1.OBJ_CLASS = 'man' THEN 1 ELSE 0 END) FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 1", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "object samples refers to OBJ_CLASS_ID; image no.1 refers to IMG_ID = 1; in the class of \"man\" refers to OBJ_CLASS = 'man'"}
{"sample_id": 7480, "db_id": "image_and_language", "final": {"question": "How many images have at least one object sample in the class of \"man\"?", "sql": "SELECT COUNT(T.IMG_ID) FROM ( SELECT T2.IMG_ID FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.OBJ_CLASS = 'man' GROUP BY T2.IMG_ID ) T", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "have at least one object sample in the class of \"man\" refers to count(IMG_ID where OBJ_CLASS = 'man') > = 1"}
{"sample_id": 7481, "db_id": "image_and_language", "final": {"question": "Please list the classes of all the object samples in image no.1.", "sql": "SELECT T1.OBJ_CLASS FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 1 GROUP BY T1.OBJ_CLASS", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "classes of all the object samples refers to OBJ_CLASS; image no.1 refers to IMG_ID = 1"}
{"sample_id": 7482, "db_id": "image_and_language", "final": {"question": "What is the relation between object sample no.8 and object sample no.4 in image no.1?", "sql": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 1 AND T2.OBJ1_SAMPLE_ID = 8 AND T2.OBJ2_SAMPLE_ID = 4", "source_tables": ["img_rel", "pred_classes"]}, "evidence": "relation refers to PRED_CLASS; object sample no.8 and object sample no.4 refers to OBJ1_SAMPLE_ID = 8 AND OBJ2_SAMPLE_ID = 4; image no.1 refers to IMG_ID = 1"}
{"sample_id": 7483, "db_id": "image_and_language", "final": {"question": "How many pairs of object samples in image no.1 have the relation of \"parked on\"?", "sql": "SELECT SUM(CASE WHEN T1.PRED_CLASS = 'parked on' THEN 1 ELSE 0 END) FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 1 AND T2.OBJ1_SAMPLE_ID != OBJ2_SAMPLE_ID", "source_tables": ["img_rel", "pred_classes"]}, "evidence": "pairs of object samples refers to OBJ1_SAMPLE_ID and OBJ2_SAMPLE_ID; image no.1 refers to IMG_ID = 1; relation of \"parked on\" refers to PRED_CLASS = 'parked on'"}
{"sample_id": 7484, "db_id": "image_and_language", "final": {"question": "Please list all the predicted relation classes of object sample no.14 in image no.1.", "sql": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.OBJ1_SAMPLE_ID = 14 AND T2.OBJ2_SAMPLE_ID = 14", "source_tables": ["img_rel", "pred_classes"]}, "evidence": "predicted relation classes refers to PRED_CLASS; object sample no.14 in image no.1 refers to OBJ1_SAMPLE_ID = 14 AND OBJ2_SAMPLE_ID = 14 and IMG_ID = 1"}
{"sample_id": 7485, "db_id": "image_and_language", "final": {"question": "How many images have at least one pair of object samples with the relation \"parked on\"?", "sql": "SELECT SUM(CASE WHEN T1.PRED_CLASS = 'parked on' THEN 1 ELSE 0 END) FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.OBJ1_SAMPLE_ID != T2.OBJ2_SAMPLE_ID", "source_tables": ["img_rel", "pred_classes"]}, "evidence": "How many images have at least one pair of object samples with the relation \"parked on\" refers to count(IMG_ID) where OBJ1_SAMPLE_ID ! = OBJ2_SAMPLE_ID and PRED_CLASS = 'parked on'"}
{"sample_id": 7486, "db_id": "image_and_language", "final": {"question": "Please list the IDs of all the images with more than 2 pairs of object samples with the relation \"parked on\".", "sql": "SELECT T2.IMG_ID FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.PRED_CLASS = 'parked on' AND T2.OBJ1_SAMPLE_ID != T2.OBJ2_SAMPLE_ID GROUP BY T2.IMG_ID HAVING COUNT(T2.IMG_ID) > 2", "source_tables": ["img_rel", "pred_classes"]}, "evidence": "IDs of all the images refers to IMG_ID; relation \"parked on\" refers to PRED_CLASS = 'parked on'; more than 2 pairs refers to count(IMG_ID) where OBJ1_SAMPLE_ID ! = OBJ2_SAMPLE_ID"}
{"sample_id": 7487, "db_id": "image_and_language", "final": {"question": "To which predicted relation class does the self-relation of the object sample in image no.5 belong?", "sql": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 5 AND T2.OBJ1_SAMPLE_ID = T2.OBJ2_SAMPLE_ID", "source_tables": ["img_rel", "pred_classes"]}, "evidence": "predicted relation class refers to PRED_CLASS; self-relations refers to OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID; image no.5 refers to IMG_ID = 5"}
{"sample_id": 7488, "db_id": "image_and_language", "final": {"question": "What are the bounding boxes of the object samples with a predicted relation class of \"by\" in image no.1?", "sql": "SELECT T3.X, T3.Y, T3.W, T3.H FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.OBJ1_SAMPLE_ID = T3.OBJ_CLASS_ID WHERE T2.IMG_ID = 1 AND T1.PRED_CLASS = 'by'", "source_tables": ["img_rel", "pred_classes", "img_obj"]}, "evidence": "bounding boxes of the object samples refers to (x, y, W, H); predicted relation class of \"by\" refers to PRED_CLASS = 'by'; image no.1 refers to IMG_ID = 1"}
{"sample_id": 7489, "db_id": "image_and_language", "final": {"question": "What is the average difference in the y coordinate of 2 object samples with the relation \"parked on\" in image no.1?", "sql": "SELECT CAST(SUM(T3.Y) AS REAL) / COUNT(CASE WHEN T1.PRED_CLASS = 'parked on' THEN 1 ELSE NULL END) FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.OBJ1_SAMPLE_ID = T3.OBJ_CLASS_ID WHERE T2.IMG_ID = 1 AND T2.OBJ1_SAMPLE_ID != T2.OBJ2_SAMPLE_ID", "source_tables": ["img_rel", "pred_classes", "img_obj"]}, "evidence": "relation \"parked on\" refers to PRED_CLASS = 'parked on'; image no.1 refers to IMG_ID = 1; average difference in the y coordinate = divide(sum(Y), count(PRED_CLASS)) where OBJ1_SAMPLE_ID ! = OBJ2_SAMPLE_ID"}
{"sample_id": 7490, "db_id": "image_and_language", "final": {"question": "What is the percentage of the object samples in the class of \"man\" in image no.1?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.OBJ_CLASS = 'man' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.OBJ_CLASS_ID) FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 1", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "object samples refers to OBJ_SAMPLE_ID; class of \"man\" refers to OBJ_CLASS = 'man'; image no.1 refers to IMG_ID = 1; percentage = divide(count(OBJ_SAMPLE_ID)when OBJ_CLASS = 'man', count(OBJ_SAMPLE_ID)) as percentage"}
{"sample_id": 7491, "db_id": "image_and_language", "final": {"question": "State the total number of the attribute classes.", "sql": "SELECT COUNT(ATT_CLASS_ID) FROM ATT_CLASSES", "source_tables": ["att_classes"]}, "evidence": "attribute classes refers to ATT_CLASS"}
{"sample_id": 7492, "db_id": "image_and_language", "final": {"question": "How many object classes are there in the database?", "sql": "SELECT COUNT(OBJ_CLASS_ID) FROM OBJ_CLASSES", "source_tables": ["obj_classes"]}, "evidence": "object classes refers to OBJ_CLASS"}
{"sample_id": 7493, "db_id": "image_and_language", "final": {"question": "Provide the number of predicted classes.", "sql": "SELECT COUNT(PRED_CLASS_ID) FROM PRED_CLASSES", "source_tables": ["pred_classes"]}, "evidence": "predicted classes refers to PRED_CLASS"}
{"sample_id": 7494, "db_id": "image_and_language", "final": {"question": "Give the bounding box of the kite in image no.2324765.", "sql": "SELECT T2.X, T2.Y, T2.W, T2.H FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 2324765 AND T1.OBJ_CLASS = 'kite'", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "bounding box refers to (x, y, W, H); kite refers to OBJ_CLASS = 'kite'; image no.2324765 refers to IMG_ID = 2324765"}
{"sample_id": 7495, "db_id": "image_and_language", "final": {"question": "How many white objects are there in image no.2347915?", "sql": "SELECT SUM(CASE WHEN T2.ATT_CLASS = 'white' THEN 1 ELSE 0 END) FROM IMG_OBJ_ATT AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 2347915", "source_tables": ["img_obj_att", "att_classes"]}, "evidence": "white objects refers to ATT_CLASS = 'white'; image no.2347915 refers to IMG_ID = 2347915"}
{"sample_id": 7496, "db_id": "image_and_language", "final": {"question": "Give the number of samples in image no.2377985 whose attribute is electrical.", "sql": "SELECT SUM(CASE WHEN T2.ATT_CLASS = 'white' THEN 1 ELSE 0 END) FROM IMG_OBJ_ATT AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 2347915", "source_tables": ["img_obj_att", "att_classes"]}, "evidence": "number of samples refers to OBJ_SAMPLE_ID; image no.2377985 refers to IMG_ID = 2377985; attribute is electrical refers to ATT_CLASS = 'electrical'"}
{"sample_id": 7497, "db_id": "image_and_language", "final": {"question": "What is the relationship between object sample no.12 and no.8 of image no.2345511?", "sql": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 2345511 AND T2.OBJ1_SAMPLE_ID = 12 AND T2.OBJ2_SAMPLE_ID = 8", "source_tables": ["img_rel", "pred_classes"]}, "evidence": "relationship refers to PRED_CLASS; object sample no.12 and no.8 of image no.2345511 refers to IMG_ID = 2345511 AND OBJ1_SAMPLE_ID = 12 AND OBJ2_SAMPLE_ID = 8"}
{"sample_id": 7498, "db_id": "image_and_language", "final": {"question": "Give the object number of the sample which has the relationship of \"lying on\" with object sample no.1 from image no.2345524.", "sql": "SELECT T2.OBJ1_SAMPLE_ID FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 2345524 AND T1.PRED_CLASS = 'lying on' AND T2.OBJ2_SAMPLE_ID = 1", "source_tables": ["img_rel", "pred_classes"]}, "evidence": "object number of the sample refers to OBJ1_SAMPLE_ID; object sample no.1 from image no.2345524 refers to OBJ2_SAMPLE_ID = 1 and IMG_ID = 2345524"}
{"sample_id": 7499, "db_id": "image_and_language", "final": {"question": "How many samples of food object are there in image no.6?", "sql": "SELECT COUNT(T2.OBJ_SAMPLE_ID) FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 6 AND T1.OBJ_CLASS = 'food'", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "samples of food object refers to OBJ_CLASS = 'food'; image no.6 refers to IMG_ID = 6"}
{"sample_id": 7500, "db_id": "image_and_language", "final": {"question": "Give the number of images containing the object sample of \"suit\".", "sql": "SELECT COUNT(T.IMG_ID) FROM ( SELECT T2.IMG_ID FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.OBJ_CLASS = 'suit' GROUP BY T2.IMG_ID ) T", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "number of images refers to IMG_ID; object sample of \"suit\" refers to OBJ_CLASS = 'suit'"}
{"sample_id": 7501, "db_id": "image_and_language", "final": {"question": "What is the relationship between \"feathers\" and \"onion\" in image no.2345528?", "sql": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.OBJ1_SAMPLE_ID = T3.OBJ_SAMPLE_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE (T4.OBJ_CLASS = 'feathers' OR T4.OBJ_CLASS = 'onion') AND T2.IMG_ID = 2345528 GROUP BY T1.PRED_CLASS", "source_tables": ["obj_classes", "img_rel", "pred_classes", "img_obj"]}, "evidence": "relationship refers to PRED_CLASS; \"feathers\" and \"onion\" in image no.2345528 refers to IMG_ID = 2345528 and OBJ_CLASS = 'feathers' and OBJ_CLASS = 'onion'"}
{"sample_id": 7502, "db_id": "image_and_language", "final": {"question": "Tell the attribute of the weeds in image no.2377988.", "sql": "SELECT T2.ATT_CLASS FROM IMG_OBJ_att AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T4.OBJ_CLASS = 'weeds' AND T1.IMG_ID = 2377988", "source_tables": ["img_obj_att", "att_classes", "obj_classes", "img_obj"]}, "evidence": "attribute of the weeds refers to OBJ_CLASS = 'weeds'; image no.2377988 refers to IMG_ID = 2377988"}
{"sample_id": 7503, "db_id": "image_and_language", "final": {"question": "What is the object whose attribute is blurry in image no.2377993? Give the explanation about the object.", "sql": "SELECT T4.OBJ_CLASS_ID, T4.OBJ_CLASS FROM IMG_OBJ_att AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T2.ATT_CLASS = 'blurry' AND T1.IMG_ID = 22377993", "source_tables": ["img_obj_att", "att_classes", "obj_classes", "img_obj"]}, "evidence": "attribute is blurry refers to ATT_CLASS = 'blurry'; image no.2377993 refers to IMG_ID = 22377993; explanation about the object refers to OBJ_CLASS"}
{"sample_id": 7504, "db_id": "image_and_language", "final": {"question": "How many samples of \"wall\" are there in image no.2353079?", "sql": "SELECT SUM(CASE WHEN T1.OBJ_CLASS = 'wall' THEN 1 ELSE 0 END) FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 2353079", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "samples of \"wall\" refers to OBJ_SAMPLE_ID and OBJ_CLASS = 'wall' ; image no.2353079 refers to IMG_ID = 2353079"}
{"sample_id": 7505, "db_id": "image_and_language", "final": {"question": "State the object class of sample no.10 of image no.2320341.", "sql": "SELECT T1.OBJ_CLASS FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 2320341 AND T2.OBJ_SAMPLE_ID = 10", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "object class refers to OBJ_CLASS; sample no.10 refers to OBJ_SAMPLE_ID = 10; image no.2320341 refers to IMG_ID = 2320341"}
{"sample_id": 7506, "db_id": "image_and_language", "final": {"question": "How many times is the number of images containing \"broccoli\" than \"tomato\"?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.OBJ_CLASS = 'broccoli' THEN T2.OBJ_SAMPLE_ID ELSE NULL END) AS REAL) / COUNT(CASE WHEN T1.OBJ_CLASS = 'tomato' THEN T2.OBJ_SAMPLE_ID ELSE NULL END) times FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "images refers to IMG_ID; \"broccoli\" refers to OBJ_CLASS = 'broccoli'; \"tomato\" refers to OBJ_CLASS = 'tomato' ; How many times = divide(count(OBJ_SAMPLE_ID) when OBJ_CLASS = 'broccoli', count(OBJ_SAMPLE_ID) when OBJ_CLASS = 'tomato')"}
{"sample_id": 7507, "db_id": "image_and_language", "final": {"question": "How many images have at least 25 attributes?", "sql": "SELECT COUNT(*) FROM ( SELECT IMG_ID FROM IMG_OBJ_att GROUP BY IMG_ID HAVING COUNT(ATT_CLASS_ID) > 25 ) T1", "source_tables": ["img_obj_att"]}, "evidence": "images refers to IMG_ID; have at least 25 attributes refers to count(ATT_CLASS_ID) > = 25"}
{"sample_id": 7508, "db_id": "image_and_language", "final": {"question": "List all the ids of the images that have a self-relation relationship.", "sql": "SELECT DISTINCT IMG_ID FROM IMG_REL WHERE OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID", "source_tables": ["img_rel"]}, "evidence": "ids of the images refers to IMG_ID; self-relations refers to OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID"}
{"sample_id": 7509, "db_id": "image_and_language", "final": {"question": "How many objects are there in the attribute class id with the highest number of objects?", "sql": "SELECT COUNT(ATT_CLASS_ID) FROM IMG_OBJ_att GROUP BY IMG_ID ORDER BY COUNT(ATT_CLASS_ID) DESC LIMIT 1", "source_tables": ["img_obj_att"]}, "evidence": "objects refers to OBJ_SAMPLE_ID; attribute class id with the highest number of objects refers to max(COUNT(ATT_CLASS_ID))"}
{"sample_id": 7510, "db_id": "image_and_language", "final": {"question": "What are the id of all the objects belonging to the transportation class?", "sql": "SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS IN ('bus', 'train', 'aeroplane', 'car', 'etc')", "source_tables": ["obj_classes"]}, "evidence": "id of all the objects belonging to the transportation class refers to OBJ_CLASS_ID and OBJ_CLASS IN ('bus', 'train', 'aeroplane', 'car', 'etc.')"}
{"sample_id": 7511, "db_id": "image_and_language", "final": {"question": "What are the corresponding classes for the \"very large bike\" attribute?", "sql": "SELECT ATT_CLASS_ID FROM ATT_CLASSES WHERE ATT_CLASS = 'very large'", "source_tables": ["att_classes"]}, "evidence": "attribute refers to ATT_CLASS"}
{"sample_id": 7512, "db_id": "image_and_language", "final": {"question": "What is the unique id number identifying the onion object class?", "sql": "SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'onion'", "source_tables": ["obj_classes"]}, "evidence": "unique id number identifying refers to OBJ_CLASS_ID; onion object class refers to OBJ_CLASS = 'onion'"}
{"sample_id": 7513, "db_id": "image_and_language", "final": {"question": "List all the corresponding classes for attributes of image id 8.", "sql": "SELECT T2.ATT_CLASS FROM IMG_OBJ_att AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 8", "source_tables": ["img_obj_att", "att_classes"]}, "evidence": "classes for attributes refers to ATT_CLASS; image id 8 refers to IMG_ID = 8"}
{"sample_id": 7514, "db_id": "image_and_language", "final": {"question": "What is the bounding box of the object with image id 4 and a prediction relationship class id of 144?", "sql": "SELECT T2.X, T2.Y, T2.W, T2.H FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID WHERE T1.PRED_CLASS_ID = 144 AND T1.IMG_ID = 3", "source_tables": ["img_rel", "img_obj"]}, "evidence": "bounding box of the object refers to (x, y, W, H); image id refers to IMG_ID; prediction relationship class id of 144 refers to PRED_CLASS_ID = 144"}
{"sample_id": 7515, "db_id": "image_and_language", "final": {"question": "How many images have at least 5 \"black\" classes?", "sql": "SELECT COUNT(IMGID) FROM ( SELECT T1.IMG_ID AS IMGID FROM IMG_OBJ_att AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T2.ATT_CLASS = 'black' GROUP BY T1.IMG_ID HAVING COUNT(T1.ATT_CLASS_ID) >= 5 ) T3", "source_tables": ["img_obj_att", "att_classes"]}, "evidence": "images refers to IMG_ID; have at least 5 \"black\" classes refers to count(ATT_CLASS_ID) where ATT_CLASS = 'black' > = 5"}
{"sample_id": 7516, "db_id": "image_and_language", "final": {"question": "What is the prediction relationship class id of the tallest image?", "sql": "SELECT T1.PRED_CLASS_ID FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID ORDER BY T2.H DESC LIMIT 1", "source_tables": ["img_rel", "img_obj"]}, "evidence": "prediction relationship class id refers to PRED_CLASS_ID; tallest image refers to max(H)"}
{"sample_id": 7517, "db_id": "image_and_language", "final": {"question": "Which image has the highest number of \"white\" class attributes?", "sql": "SELECT T1.IMG_ID AS IMGID FROM IMG_OBJ_att AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T2.ATT_CLASS = 'white' GROUP BY T1.IMG_ID ORDER BY COUNT(T1.ATT_CLASS_ID) DESC LIMIT 1", "source_tables": ["img_obj_att", "att_classes"]}, "evidence": "\"white\" class attributes refers to ATT_CLASS = 'white'; highest number refers to max(count(ATT_CLASS_ID))"}
{"sample_id": 7518, "db_id": "image_and_language", "final": {"question": "What are the x and y coordinates of all the images with a prediction relationship class id of 98?", "sql": "SELECT T2.X, T2.Y FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID WHERE T1.PRED_CLASS_ID = 98", "source_tables": ["img_rel", "img_obj"]}, "evidence": "prediction relationship class id of 98 refers to PRED_CLASS_ID = 98"}
{"sample_id": 7519, "db_id": "image_and_language", "final": {"question": "How many prediction classes with \"has\" captions are there for image id 3050?", "sql": "SELECT COUNT(T2.PRED_CLASS_ID) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.IMG_ID = 3050 AND T2.PRED_CLASS = 'has'", "source_tables": ["img_rel", "pred_classes"]}, "evidence": "prediction classes with \"has\" captions refers to PRED_CLASS = 'has'; image id 3050 refers to IMG_ID = 3050"}
{"sample_id": 7520, "db_id": "image_and_language", "final": {"question": "List all the explanations about object classes of all the images with an x and y coordinate of 0.", "sql": "SELECT T1.OBJ_CLASS FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.X = 0 AND T2.Y = 0 GROUP BY T1.OBJ_CLASS", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "explanations about distinct object classes refers to OBJ_CLASS; images refers to IMG_ID; x and y coordinate of 0 refers to X = 0 AND Y = 0"}
{"sample_id": 7521, "db_id": "image_and_language", "final": {"question": "What are the captions of all the self-relation relationship prediction classes?", "sql": "SELECT T2.PRED_CLASS FROM IMG_REL AS T1 INNER JOIN pred_classes AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.OBJ1_SAMPLE_ID = T1.OBJ2_SAMPLE_ID GROUP BY T2.PRED_CLASS", "source_tables": ["img_rel", "pred_classes"]}, "evidence": "self-relation relationship refers to OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID and PRED_CLASS; captions of prediction classes refers to PRED_CLASS"}
{"sample_id": 7522, "db_id": "image_and_language", "final": {"question": "Give all the bounding boxes for image 2222 whose object classes are feathers.", "sql": "SELECT T2.X, T2.Y, T2.H, T2.W FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 2222 AND T1.OBJ_CLASS = 'feathers'", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "bounding boxes refers to (x, y, W, H); image 2222 refers to IMG_ID = 2222; object classes are feathers refers to OBJ_CLASS = 'feathers'"}
{"sample_id": 7523, "db_id": "image_and_language", "final": {"question": "Among the objects that have multiple relations, how many images whose captions for the prediction class ids are \"on\"?", "sql": "SELECT COUNT(T2.PRED_CLASS_ID) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.OBJ1_SAMPLE_ID != T1.OBJ2_SAMPLE_ID AND T2.PRED_CLASS = 'on'", "source_tables": ["img_rel", "pred_classes"]}, "evidence": "objects that have multiple relations refers to OBJ1_SAMPLE_ID ! = OBJ2_SAMPLE_ID; captions for the prediction class ids are \"on\" refers to PRED_CLASS = 'on'"}
{"sample_id": 7524, "db_id": "image_and_language", "final": {"question": "What is the object class of the image with a bounding box of 0, 0, 135, 212?", "sql": "SELECT T1.OBJ_CLASS FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.X = 0 AND T2.Y = 0 AND T2.W = 135 AND T2.H = 212", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "object class of the image refers to OBJ_CLASS; bounding box of 0, 0, 135, 212 refers to X = 0 AND Y = 0 AND W = 135 AND H = 212"}
{"sample_id": 7525, "db_id": "image_and_language", "final": {"question": "Provide the dimensions of the bounding box that contains the keyboard that was spotted in image no. 3.", "sql": "SELECT T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 3 AND T2.OBJ_CLASS = 'keyboard'", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "dimensions of the bounding box refers to (W, H); keyboard refers to OBJ_CLASS = 'keyboard'; image no. 3 refers to IMG_ID = 3"}
{"sample_id": 7526, "db_id": "image_and_language", "final": {"question": "Identify the border's coordinates on the X and Y axes that enclose a folk in image no. 6.", "sql": "SELECT T1.X, T1.Y FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 6 AND T2.OBJ_CLASS = 'folk'", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "coordinates on the X and Y axes refers to X and Y; folk refers to OBJ_CLASS = 'folk'; image no. 6 refers to IMG_ID = 6"}
{"sample_id": 7527, "db_id": "image_and_language", "final": {"question": "Define the onion's bounding box on image no. 285930.", "sql": "SELECT T1.X, T1.Y, T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 285930 AND T2.OBJ_CLASS = 'onion'", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "bounding box refers to (X, Y, W, H); onion refers to OBJ_CLASS = 'onion'; image no.285930 refers to IMG_ID = 285930"}
{"sample_id": 7528, "db_id": "image_and_language", "final": {"question": "How many objects can you spot in image no. 72? What objects may be identified on the same image and within the bounding box represented as (341, 27, 42, 51)?", "sql": "SELECT SUM(IIF(T1.IMG_ID = 1, 1, 0)), SUM(IIF(T1.X = 341 AND T1.Y = 27 AND T1.W = 42 AND T1.H = 51, 1, 0)) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "How many objects refers to OBJ_CLASS_ID; image no. 72 refers to IMG_ID = 72; What objects refers to OBJ_CLASS; bounding box represented as (341, 27, 42, 51) refers to X = 341 and Y = 27 and W = 42 and H = 51"}
{"sample_id": 7529, "db_id": "image_and_language", "final": {"question": "On image no. 5, name the attributes that are composed of multiple objects.", "sql": "SELECT T2.ATT_CLASS FROM IMG_OBJ_ATT AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 5 GROUP BY T2.ATT_CLASS HAVING COUNT(T2.ATT_CLASS) > 2", "source_tables": ["img_obj_att", "att_classes"]}, "evidence": "image no. 5 refers to IMG_ID = 5; name the attributes refers to ATT_CLASS; multiple objects refers to count(ATT_CLASS) > = 2"}
{"sample_id": 7530, "db_id": "image_and_language", "final": {"question": "What attributes are used to describe the wall on image no. 27.", "sql": "SELECT T4.ATT_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID INNER JOIN IMG_OBJ_ATT AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN ATT_CLASSES AS T4 ON T3.ATT_CLASS_ID = T4.ATT_CLASS_ID WHERE T2.OBJ_CLASS = 'wall' AND T1.IMG_ID = 27 GROUP BY T4.ATT_CLASS", "source_tables": ["obj_classes", "att_classes", "img_obj_att", "img_obj"]}, "evidence": "What attributes refers to ATT_CLASS; wall on image no. 27 refers to OBJ_CLASS = 'wall' and IMG_ID = 27"}
{"sample_id": 7531, "db_id": "image_and_language", "final": {"question": "Name the object element that is described as being scattered on image no. 10.", "sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID INNER JOIN IMG_OBJ_ATT AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN ATT_CLASSES AS T4 ON T3.ATT_CLASS_ID = T4.ATT_CLASS_ID WHERE T4.ATT_CLASS = 'scattered' AND T1.IMG_ID = 10 GROUP BY T2.OBJ_CLASS", "source_tables": ["obj_classes", "att_classes", "img_obj_att", "img_obj"]}, "evidence": "Name the object element refers to OBJ_CLASS; scattered refers to ATT_CLASS = 'scattered'; image no. 10 refers to IMG_ID = 10"}
{"sample_id": 7532, "db_id": "image_and_language", "final": {"question": "How many images contain 'bridge' as an object element?", "sql": "SELECT COUNT(DISTINCT T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'bridge'", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "images refers to IMG_ID; 'bridge' as an object element refers to OBJ_CLASS = 'bridge'"}
{"sample_id": 7533, "db_id": "image_and_language", "final": {"question": "How many object elements are there on average in each image?", "sql": "SELECT CAST(COUNT(OBJ_CLASS_ID) AS REAL) / COUNT(DISTINCT IMG_ID) FROM IMG_OBJ", "source_tables": ["img_obj"]}, "evidence": "object elements refers to OBJ_CLASS_ID; average = divide(count(OBJ_CLASS_ID), count(IMG_ID))"}
{"sample_id": 7534, "db_id": "image_and_language", "final": {"question": "What colour is the van that can be spotted in image no. 1?", "sql": "SELECT T4.ATT_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID INNER JOIN IMG_OBJ_ATT AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN ATT_CLASSES AS T4 ON T3.ATT_CLASS_ID = T4.ATT_CLASS_ID WHERE T2.OBJ_CLASS = 'van' AND T1.IMG_ID = 1 GROUP BY T4.ATT_CLASS", "source_tables": ["obj_classes", "att_classes", "img_obj_att", "img_obj"]}, "evidence": "colour refers to ATT_CLASS; van refers to OBJ_CLASS = 'van'; image no. 1 refers to IMG_ID = 1"}
{"sample_id": 7535, "db_id": "image_and_language", "final": {"question": "Describe the objects, their attributes, and the relationships that comprise the scene on image no. 1 within the bounding box, represented as (388, 369, 48, 128).", "sql": "SELECT DISTINCT T2.OBJ_CLASS, T4.ATT_CLASS, T6.PRED_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID INNER JOIN IMG_OBJ_ATT AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN ATT_CLASSES AS T4 ON T3.ATT_CLASS_ID = T4.ATT_CLASS_ID INNER JOIN IMG_REL AS T5 ON T1.IMG_ID = T5.IMG_ID INNER JOIN PRED_CLASSES AS T6 ON T5.PRED_CLASS_ID = T6.PRED_CLASS_ID WHERE T1.IMG_ID = 1 AND T1.X = 388 AND T1.Y = 369 AND T1.W = 48 AND T1.H = 128", "source_tables": ["att_classes", "obj_classes", "img_obj_att", "pred_classes", "img_obj", "img_rel"]}, "evidence": "objects refers to OBJ_CLASS; attributes refers to ATT_CLASS; relationships refers to PRED_CLASS; image no. 1 refers to IMG_ID = 1; bounding box, represented as (388, 369, 48, 128) refers to X = 388 and Y = 369 and W = 48 and H = 128"}
{"sample_id": 7536, "db_id": "image_and_language", "final": {"question": "What is the relationship between object sample no. 25 and object sample no. 2 on image no. 1?", "sql": "SELECT T2.PRED_CLASS FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.IMG_ID = 1 AND T1.OBJ1_SAMPLE_ID = 25 AND T1.OBJ2_SAMPLE_ID = 2", "source_tables": ["img_rel", "pred_classes"]}, "evidence": "relationship refers to PRED_CLASS; object sample no. 25 and object sample no. 2 refers to OBJ1_SAMPLE_ID = 25 and OBJ2_SAMPLE_ID = 2; image no. 1 refers to IMG_ID = 1"}
{"sample_id": 7537, "db_id": "image_and_language", "final": {"question": "How many attributes are related to the object sample no. 7 on image no. 4?", "sql": "SELECT COUNT(ATT_CLASS_ID) FROM IMG_OBJ_ATT WHERE IMG_ID = 4 AND OBJ_SAMPLE_ID = 7", "source_tables": ["img_obj_att"]}, "evidence": "How many attributes refers to ATT_CLASS_ID; object sample no. 7 on image no. 4 refers to IMG_ID = 4 and OBJ_SAMPLE_ID = 7"}
{"sample_id": 7538, "db_id": "image_and_language", "final": {"question": "How many object elements can be detected on image no. 31?", "sql": "SELECT COUNT(OBJ_CLASS_ID) FROM IMG_OBJ WHERE IMG_ID = 31", "source_tables": ["img_obj"]}, "evidence": "How many object elements refers to OBJ_CLASS_ID; image no. 31 refers to IMG_ID = 31"}
{"sample_id": 7539, "db_id": "image_and_language", "final": {"question": "On image no. 20, identify the attribute ID that is composed of the highest number of objects.", "sql": "SELECT ATT_CLASS_ID FROM IMG_OBJ_ATT WHERE IMG_ID = 20 GROUP BY ATT_CLASS_ID ORDER BY COUNT(ATT_CLASS_ID) DESC LIMIT 1", "source_tables": ["img_obj_att"]}, "evidence": "image no. 20 refers to IMG_ID = 20; attribute ID refers to ATT_CLASS_ID; highest number of objects refers to max(count(ATT_CLASS_ID))"}
{"sample_id": 7540, "db_id": "image_and_language", "final": {"question": "Define the bounding box of the object sample no. 7 on image no. 42.", "sql": "SELECT X, Y, W, H FROM IMG_OBJ WHERE IMG_ID = 42 AND OBJ_SAMPLE_ID = 7", "source_tables": ["img_obj"]}, "evidence": "bounding box of the object refers to (X, Y, W, H); sample no.7 on image no.42 refers to IMG_ID = 42 and OBJ_SAMPLE_ID = 7"}
{"sample_id": 7541, "db_id": "image_and_language", "final": {"question": "On image no. 99 identify the percentage of objects that are described as white.", "sql": "SELECT CAST(SUM(CASE WHEN T2.ATT_CLASS = 'white' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(OBJ_SAMPLE_ID) FROM IMG_OBJ_ATT AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 99", "source_tables": ["img_obj_att", "att_classes"]}, "evidence": "image no. 99 refers to IMG_ID = 99; described as white refers to ATT_CLASS = 'white'; percentage = divide(count(OBJ_SAMPLE_ID) where ATT_CLASS = 'white', count(OBJ_SAMPLE_ID)) as percentage"}
{"sample_id": 7542, "db_id": "image_and_language", "final": {"question": "How many attribute classes are there for image id 5?", "sql": "SELECT COUNT(ATT_CLASS_ID) FROM IMG_OBJ_ATT WHERE IMG_ID = 5", "source_tables": ["img_obj_att"]}, "evidence": "attribute classes refer to ATT_CLASS_ID; image id 5 refers to IMG_ID = 5;"}
{"sample_id": 7543, "db_id": "image_and_language", "final": {"question": "State the explanation about object class 10.", "sql": "SELECT OBJ_CLASS FROM OBJ_CLASSES WHERE OBJ_CLASS_ID = 10", "source_tables": ["obj_classes"]}, "evidence": "explanation about object class 10 refers to OBJ_CLASS where OBJ_CLASS_ID = 10;"}
{"sample_id": 7544, "db_id": "image_and_language", "final": {"question": "Name the object class of the image with a bounding (422, 63, 77, 363).", "sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 422 AND T1.Y = 63 AND T1.W = 77 AND T1.H = 363", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "image with a bounding (422, 63, 77, 363) refers to OBJ_CLASS_ID where X = 422 and Y = 63 and W = 77 and H = 363;"}
{"sample_id": 7545, "db_id": "image_and_language", "final": {"question": "What is the caption for the prediction class id 12?", "sql": "SELECT PRED_CLASS FROM PRED_CLASSES WHERE PRED_CLASS_ID = 12", "source_tables": ["pred_classes"]}, "evidence": "caption for the prediction class id 12 refers to PRED_CLASS where PRED_CLASS_ID = 12;"}
{"sample_id": 7546, "db_id": "image_and_language", "final": {"question": "Indicate the bounding box of the image 8.", "sql": "SELECT X, Y, W, H FROM IMG_OBJ WHERE IMG_ID = 8", "source_tables": ["img_obj"]}, "evidence": "bounding box refers to X, Y, W, H from IMG_OBJ; image 8 refers to IMG_ID = 8;"}
{"sample_id": 7547, "db_id": "image_and_language", "final": {"question": "How many object samples in image no.908 are in the class of tip?", "sql": "SELECT SUM(CASE WHEN T2.OBJ_CLASS = 'tip' THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 908", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "object samples in the class of \"tip\" refer to OBJ_CLASS_ID where OBJ_CLASS = 'tip'; image no.5 refers to IMG_ID = 5;"}
{"sample_id": 7548, "db_id": "image_and_language", "final": {"question": "List out the number of object samples in image no.41 which are in the class of \"kitchen\"?", "sql": "SELECT SUM(CASE WHEN T2.OBJ_CLASS = 'kitchen' THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 41", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "object samples in the class of \"kitchen\" refer to OBJ_CLASS_ID where OBJ_CLASS = 'kitchen'; image no.41 refers to IMG_ID = 41 ;"}
{"sample_id": 7549, "db_id": "image_and_language", "final": {"question": "Count the image numbers that contain the \"paint\" object.", "sql": "SELECT COUNT(DISTINCT T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'paint'", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "image numbers that contain the \"paint\" object refer to IMG_ID where OBJ_CLASS = 'paint';"}
{"sample_id": 7550, "db_id": "image_and_language", "final": {"question": "How many samples of clouds are there in the image no.2315533?", "sql": "SELECT SUM(CASE WHEN T1.IMG_ID = 2315533 THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'clouds'", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "samples of clouds refer to IMG_ID where OBJ_CLASS = 'cloud'; image no.2315533 refers to IMG_ID = 2315533;"}
{"sample_id": 7551, "db_id": "image_and_language", "final": {"question": "Which object classes belong to the onion category?", "sql": "SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'onion'", "source_tables": ["obj_classes"]}, "evidence": "onion category refers to OBJ_CLASS = 'onion';"}
{"sample_id": 7552, "db_id": "image_and_language", "final": {"question": "What is the bounding box of \"spoon\" in image id 1344?", "sql": "SELECT T1.X, T1.Y, T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 1344 AND T2.OBJ_CLASS = 'spoon'", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "the bounding box refers to X, Y, W, H from IMG_OBJ; image id 1344 refers to IMG_ID = 1344; \"spoon\" refers to OBJ_CLASS = 'spoon';"}
{"sample_id": 7553, "db_id": "image_and_language", "final": {"question": "What is the percentage of \"surface\" object samples in image No.2654?", "sql": "SELECT CAST(SUM(CASE WHEN T2.OBJ_CLASS = 'surface' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OBJ_CLASS_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 2654", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "DIVIDE(SUM(OBJ_CLASS_ID where OBJ_CLASS = 'surface'), COUNT(OBJ_CLASS_ID)) as percentage where IMG_ID = 2654;"}
{"sample_id": 7554, "db_id": "image_and_language", "final": {"question": "How many images include the \"wood\" objects?", "sql": "SELECT COUNT(DISTINCT T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'wood'", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "images refer to IMG_ID; \"wood\" objects refer to OBJ_CLASS = 'wood';"}
{"sample_id": 7555, "db_id": "image_and_language", "final": {"question": "State the object class of the image with tallest bounding box.", "sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID ORDER BY T1.H DESC LIMIT 1", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "bounding box refers to X, Y, W, H from IMG_OBJ; tallest relates to the height of the bounding box which refers to MAX(H); object class refers to OBJ_CLASS;"}
{"sample_id": 7612, "db_id": "hockey", "final": {"question": "List the first Name and last name of all players not from USA and who are born in 1990 .", "sql": "SELECT firstName, lastName FROM Master WHERE birthYear = 1990 AND birthCountry != 'USA'", "source_tables": ["master"]}, "evidence": "Not from USA refers to birthCountry! = 'USA'; born in 1990 refers to birthYear = 1990\n"}
{"sample_id": 7613, "db_id": "hockey", "final": {"question": "List all players' given name who are good at both left and right hand and playing the forward position.", "sql": "SELECT nameGiven FROM Master WHERE shootCatch IS NULL AND pos = 'F'", "source_tables": ["master"]}, "evidence": "good at both left and right hand refers to shootCatch IS NULL;\u00a0 playing the forward position refers to pos = 'F'"}
{"sample_id": 7614, "db_id": "hockey", "final": {"question": "Who are the players who were not in the Hall of Fame list.", "sql": "SELECT firstName, lastName FROM Master WHERE hofID IS NULL", "source_tables": ["master"]}, "evidence": "not in the Hall of Fame refers to hofID IS NULL"}
{"sample_id": 7615, "db_id": "hockey", "final": {"question": "Who is the youngest player who is still living. State the given name and date of birth.", "sql": "SELECT nameGiven , nameGiven , birthYear, birthMon, birthDay FROM Master WHERE deathYear IS NULL ORDER BY birthYear DESC, birthMon DESC, birthday DESC LIMIT 1", "source_tables": ["master"]}, "evidence": "still living refers to deathYear IS NULL; youngest refers to MAX(birthYear,birthMon,birthDay)"}
{"sample_id": 7616, "db_id": "hockey", "final": {"question": "For all the deceased players who are good at both left and right hand, list the player's name and the age when he died.", "sql": "SELECT firstName, lastName, deathYear - birthYear FROM Master WHERE shootCatch IS NULL AND deathYear IS NOT NULL", "source_tables": ["master"]}, "evidence": "age when he died refers to SUBTRACT(deathYear,birthYear); deceased refers to deathYear IS NOT NULL; good at both left and right hand refers to shootCatch IS NULL"}
{"sample_id": 7617, "db_id": "hockey", "final": {"question": "Name the goalies who played for more than two teams from Year 2000 to 2005.", "sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year >= 2000 AND T2.year <= 2005 GROUP BY T2.playerID HAVING COUNT(DISTINCT T2.tmID) > 2", "source_tables": ["master", "goalies"]}, "evidence": "goalie who played for more than 2 teams refers to COUNT(DISTINCT(T2.tmID))>2"}
{"sample_id": 7618, "db_id": "hockey", "final": {"question": "What is the average weight of players who have height greater than 72 inches.", "sql": "SELECT AVG(weight) FROM Master WHERE height > 72", "source_tables": ["master"]}, "evidence": "average weight refers to AVG(weight); height greater than 72 inches refers to height>72"}
{"sample_id": 7619, "db_id": "hockey", "final": {"question": "Name the goalies who have played more than total of 5000 minutes in the all the season played. State given name of the player and from which country was he born.", "sql": "SELECT DISTINCT T1.nameGiven, T1.birthCountry FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID GROUP BY T1.nameGiven, T1.birthCountry HAVING SUM(T2.Min) > 5000", "source_tables": ["master", "goalies"]}, "evidence": "played more than total of 5000 minutes refers to SUM(Min)>5000;country he was born refers to birthCountry\n"}
{"sample_id": 7620, "db_id": "hockey", "final": {"question": "Name the goaltenders who had played in both PCHA and NHL league.", "sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.lgID IN ('PCHA', 'NHL') GROUP BY T2.playerID HAVING COUNT(DISTINCT T2.lgID) > 1", "source_tables": ["master", "goalies"]}, "evidence": "PCHA refers to lgID = 'PCHA'; NHL league refers to lgID = 'NHL'"}
{"sample_id": 7621, "db_id": "hockey", "final": {"question": "List all deceased goalies by last name. List the season where he had the most time played.", "sql": "SELECT T1.playerID, T2.year, Min FROM Master AS T1 INNER JOIN Goalies AS T2 ON T2.playerID = T1.playerID WHERE T1.deathYear IS NOT NULL ORDER BY T2.Min DESC LIMIT 1", "source_tables": ["master", "goalies"]}, "evidence": "deceased refers to deathYear; most time played refers to MAX(Min)"}
{"sample_id": 7622, "db_id": "hockey", "final": {"question": "List all goalies from year 2000 to 2010 for team COL. State their given name, height, weight and age of today.", "sql": "SELECT T1.nameGiven, T1.height , T1.weight, STRFTIME('%Y', CURRENT_TIMESTAMP) - birthYear FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'COL' AND T2.year >= 2000 AND T2.year <= 2010 GROUP BY T1.playerID", "source_tables": ["master", "goalies"]}, "evidence": "team COL refers to tmID = 'COL'; age of today refers to SUBTRACT(YEAR(NOW())-birthYear)"}
{"sample_id": 7623, "db_id": "hockey", "final": {"question": "Name all goalies with 10 or more empty net goals. Name the players and season where he played.", "sql": "SELECT T1.firstName, T1.lastName , T2.year FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.ENG >= 10", "source_tables": ["master", "goalies"]}, "evidence": "10 or more empty net goals refers to ENG> = 10; season refers to year"}
{"sample_id": 7624, "db_id": "hockey", "final": {"question": "State the goalie who has the lowest percentage of goals against among all the shots against recorded. Name the players and season where he played.", "sql": "SELECT T1.firstName, T1.lastName, T2.year FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE CAST(T2.GA AS REAL) / T2.SA IS NOT NULL ORDER BY CAST(T2.GA AS REAL) / T2.SA LIMIT 1", "source_tables": ["master", "goalies"]}, "evidence": "goals against refers to GA; shots against refers to SA; lowest percentage of goals against among all the shots against refers to MIN(DIVIDE(GA,SA)*100)"}
{"sample_id": 7625, "db_id": "hockey", "final": {"question": "List all goalies who played in the year 2005 season and shorter than 72 inches. List all the team names he play for.", "sql": "SELECT DISTINCT T1.firstName, T1.lastName, T3.name FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.tmID = T3.tmID WHERE T2.year = 2005 AND T1.height < 72", "source_tables": ["master", "goalies", "teams"]}, "evidence": "shorter than 72 inches refers to height<72"}
{"sample_id": 7626, "db_id": "hockey", "final": {"question": "State the nick name of player ID 'aubinje01'. List all the teams and season he played for.", "sql": "SELECT DISTINCT T1.nameNick, T3.year, T3.name FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.tmID = T3.tmID WHERE T1.playerID = 'aubinje01'", "source_tables": ["master", "goalies", "teams"]}, "evidence": "nick name refers to nameNick; team refers to tmID; season refers to year\n\n"}
{"sample_id": 7627, "db_id": "hockey", "final": {"question": "Name the goalies with the most seasons played. State the average time he played for each season.", "sql": "SELECT T1.firstName, T1.lastName, T2.year, AVG(T2.Min) FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T1.playerID = ( SELECT playerID FROM Goalies GROUP BY playerID ORDER BY COUNT(playerID) DESC LIMIT 1 ) GROUP BY T1.firstName, T1.lastName, T2.year", "source_tables": ["master", "goalies"]}, "evidence": "most seasons played refers to MAX(COUNT(playerID)); average time he played for each season refers to DIVIDE(SUM(T2.Min),COUNT(T2.playerID))"}
{"sample_id": 7628, "db_id": "hockey", "final": {"question": "Name the goalie and the season he played where he had 5% shutouts among the number of goals recorded while the goalie was on the ice.", "sql": "SELECT DISTINCT T1.firstName, T1.lastName, T2.year FROM Master AS T1 INNER JOIN ( SELECT playerID, year FROM Goalies WHERE CAST(SHO AS REAL) / GA > 0.05 ) AS T2 ON T2.playerID = T1.playerID", "source_tables": ["master", "goalies"]}, "evidence": "shutouts refers to SHO; number of goals refers to GA; 5% shutouts among the number of goals refers to DIVIDE(SHO,GA)*100 = 5.00"}
{"sample_id": 7629, "db_id": "hockey", "final": {"question": "Name the deceased players whose death country is different from his birth country order by birth year.", "sql": "SELECT firstName, lastName FROM Master WHERE birthCountry != deathCountry ORDER BY birthYear", "source_tables": ["master"]}, "evidence": "death country is different from his birth country refers to birthCountry! = deathCountry"}
{"sample_id": 7630, "db_id": "hockey", "final": {"question": "Who are the players played both in NHL and WHA. List the given name and first year they were in NHL and first year in WHA.", "sql": "SELECT nameGiven, firstNHL, firstWHA FROM Master WHERE firstNHL IS NOT NULL AND firstWHA IS NOT NULL", "source_tables": ["master"]}, "evidence": "first year they were in NHL refers to firstNHL; first year in WHA refers to firstWHA; play in both refers to firstNHL IS NOT NULL AND firstWHA IS NOT NULL\n"}
{"sample_id": 7631, "db_id": "hockey", "final": {"question": "List the living players who have two positions. State their given name the position they play.", "sql": "SELECT firstName, lastName, pos FROM Master WHERE deathYear IS NULL AND pos LIKE '%/%'", "source_tables": ["master"]}, "evidence": "living players refers to deathYear IS NULL; positions refers to pos"}
{"sample_id": 7632, "db_id": "hockey", "final": {"question": "State the nick name of the tallest player? If the player had left NHL, mention the last season he was with NHL.", "sql": "SELECT nameNick, lastNHL FROM Master ORDER BY height DESC LIMIT 1", "source_tables": ["master"]}, "evidence": "nick name refers to nameNick; tallest player refers to MAX(height); had left NHL refers to lastNHL"}
{"sample_id": 7633, "db_id": "hockey", "final": {"question": "What is the average height of player who were born in 1990 and after? Compare the average height with players who were born before 1990.", "sql": "SELECT AVG(IIF(birthYear < 1990, height, NULL)) - AVG(IIF(birthYear >= 1990, height, NULL)) FROM Master", "source_tables": ["master"]}, "evidence": "average height refers to AVG(height); born in 1990 refers to birthYear = 1990\n"}
{"sample_id": 7634, "db_id": "hockey", "final": {"question": "Name the goalies who are good at left hand and also has become a coach after retirement. Name all teams he had played before.", "sql": "SELECT DISTINCT firstName, lastName, T3.name FROM Goalies AS T1 INNER JOIN Master AS T2 ON T2.playerID = T1.playerID INNER JOIN Teams AS T3 ON T1.lgID = T3.lgID WHERE T1.playerID IS NOT NULL AND T2.coachID IS NOT NULL AND T2.shootCatch = 'L' AND T2.pos = 'G'", "source_tables": ["master", "goalies", "teams"]}, "evidence": "good at left hand refers to shootCatch = 'L'; goalies refers to pos = 'G'"}
{"sample_id": 7635, "db_id": "hockey", "final": {"question": "List all the deceased goalies and the teams he had played whose birth country was in Canada.", "sql": "SELECT DISTINCT firstName, lastName, T3.name FROM Goalies AS T1 INNER JOIN Master AS T2 ON T2.playerID = T1.playerID INNER JOIN Teams AS T3 ON T1.lgID = T3.lgID WHERE T2.birthCountry = 'Canada' AND T2.deathYear IS NOT NULL AND T2.pos = 'G'", "source_tables": ["master", "goalies", "teams"]}, "evidence": "goalies refers to pos = 'G'; deceased goalies refers to deathYear IS NOT NULL\n"}
{"sample_id": 7636, "db_id": "hockey", "final": {"question": "Name the goalies and season they played when Boston Bruins won number 1 in rank.", "sql": "SELECT T1.firstName, T1.lastName, T3.year FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.year = T3.year AND T2.tmID = T3.tmID WHERE T1.deathYear IS NOT NULL AND T3.name = 'Boston Bruins' AND T3.rank = 1 AND T1.pos = 'G'", "source_tables": ["master", "goalies", "teams"]}, "evidence": "goalies refers to pos = 'G'; season refers to year\n"}
{"sample_id": 7637, "db_id": "hockey", "final": {"question": "Among all goalies who are still alive, whose first season in NHL in before 1950. List the team names they were in.", "sql": "SELECT DISTINCT T3.name FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.lgID = T3.lgID AND T2.year = T3.year WHERE T1.deathYear IS NOT NULL AND T1.firstNHL < 1950", "source_tables": ["master", "goalies", "teams"]}, "evidence": "first season in NHL in before 1950 refers to firstNHL<1950; goalies who are still alive refers to deathYear IS NOT NULL"}
{"sample_id": 7638, "db_id": "hockey", "final": {"question": "For all players who becomes coach after retirement, state the given name of coach and which teams and years did they coach?", "sql": "SELECT DISTINCT T2.nameGiven, T3.name, T3.year FROM Coaches AS T1 INNER JOIN Master AS T2 ON T2.coachID = T1.coachID INNER JOIN Teams AS T3 ON T1.lgID = T3.lgID WHERE T2.playerID IS NOT NULL AND T2.coachID IS NOT NULL", "source_tables": ["master", "coaches", "teams"]}, "evidence": ""}
{"sample_id": 7639, "db_id": "hockey", "final": {"question": "Among the coaches who was never a player, who has highest percentage of game winning? Provide the given name of the coach and team he coached.", "sql": "SELECT T2.nameGiven, T3.name FROM Coaches AS T1 INNER JOIN Master AS T2 ON T2.coachID = T1.coachID INNER JOIN Teams AS T3 ON T1.lgID = T3.lgID WHERE T1.coachID IS NOT NULL ORDER BY CAST(T1.w AS REAL) / T1.g DESC LIMIT 1", "source_tables": ["master", "coaches", "teams"]}, "evidence": "highest percentage of game winning refers to MAX(DIVIDE(w,g)*100)"}
{"sample_id": 7640, "db_id": "hockey", "final": {"question": "Which coach has the best performance for team DET in history? What was the winning percentage? Name the coach and the year he coached.", "sql": "SELECT CAST(T2.W AS REAL) / T2.G, T1.firstName, T1.lastName, T2.year FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID INNER JOIN ( SELECT coachID FROM Coaches ORDER BY CAST(w AS REAL) / g DESC LIMIT 1 ) AS T3 ON T2.coachID = T3.coachID", "source_tables": ["master", "coaches"]}, "evidence": "winning percentage refers to DIVIDE(w,g)*100; team DET refers to tmID = 'DET'"}
{"sample_id": 7641, "db_id": "hockey", "final": {"question": "Who is the coach who had coached the the most seasons in MTL? State his given name, date of birth and all teams he had coaches before.", "sql": "SELECT T2.nameGiven , T2.birthYear, T2.birthMon, T2.birthDay, T3.name FROM Goalies AS T1 INNER JOIN Master AS T2 ON T2.playerID = T1.playerID INNER JOIN Teams AS T3 ON T3.lgID = T1.lgID WHERE T3.tmID = 'MTL' GROUP BY T2.nameGiven, T2.birthYear, T2.birthMon, T2.birthDay, T3.name ORDER BY COUNT(T2.coachID) DESC LIMIT 1", "source_tables": ["master", "goalies", "teams"]}, "evidence": "date of birth refers to birthDay + birthMon + birthYear"}
{"sample_id": 7642, "db_id": "hockey", "final": {"question": "List all goalies with more lost than won games for two seasons or more. State the name of the player and team he played.", "sql": "SELECT DISTINCT T1.firstName, T1.lastName, T3.name FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.year = T3.year AND T2.tmID = T3.tmID WHERE T1.pos = 'G' AND T2.L > T2.W GROUP BY T1.firstName, T1.lastName, T3.name HAVING COUNT(T3.year) > 2", "source_tables": ["master", "goalies", "teams"]}, "evidence": "lost refers to L; won refers to W"}
{"sample_id": 7643, "db_id": "hockey", "final": {"question": "For all the goalies born in year 1987, who are good in both right hand and left hand? Calculate his percentage of winning for every season he played.", "sql": "SELECT T1.firstName, T1.lastName, T2.year, CAST(T2.W AS REAL) / T2.GP FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T1.birthYear = 1987 AND T1.shootCatch IS NULL", "source_tables": ["master", "goalies"]}, "evidence": "good in both right hand and left hand refers shootCatch IS NULL; winning refers to W; every season he played refers to GP; percentage of winning for every season he played refers to DIVIDE(W,GP)*100"}
{"sample_id": 7644, "db_id": "hockey", "final": {"question": "What is given name for player 'aebisda01'. Calculate the average time in minutes for the all his games played as goaltender.", "sql": "SELECT T1.nameGiven, CAST(SUM(T2.Min) AS REAL) / SUM(T2.GP) FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T1.playerID = 'aebisda01' GROUP BY T1.nameGiven", "source_tables": ["master", "goalies"]}, "evidence": "played as goaltender refers to pos = 'G'; time in minutes refers to Min; all his games played refers to GP; average time in minutes refers to DIVIDE(SUM(Min)/SUM(GP))"}
{"sample_id": 7645, "db_id": "hockey", "final": {"question": "List all living goalies who have greater than 50% wins among all games played. State their last name and first name.", "sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T1.deathYear IS NOT NULL GROUP BY T1.playerID HAVING CAST(SUM(T2.Min) AS REAL) / SUM(T2.GP) > 0.5", "source_tables": ["master", "goalies"]}, "evidence": "wins refers to W; all games played refers to GP;greater than 50% wins among all games played refers to DIVIDE(SUM(W),GP)*100>50"}
{"sample_id": 7646, "db_id": "hockey", "final": {"question": "How many players and coaches are awarded after death?", "sql": "SELECT COUNT(note) FROM AwardsMisc WHERE note IS NOT NULL", "source_tables": ["awardsmisc"]}, "evidence": "awarded after death refers to note = 'posthumous'"}
{"sample_id": 7647, "db_id": "hockey", "final": {"question": "Among the players who won an award in the year 1983, how many of them play the position of goalie?", "sql": "SELECT COUNT(playerID) FROM AwardsPlayers WHERE pos = 'G' AND year = 1983", "source_tables": ["awardsplayers"]}, "evidence": "position of goalie refers to pos = 'G'"}
{"sample_id": 7648, "db_id": "hockey", "final": {"question": "How many coaches worked a temporary term in the year 2007?", "sql": "SELECT COUNT(coachID) FROM Coaches WHERE year = 2007 AND notes = 'interim'", "source_tables": ["coaches"]}, "evidence": "worked a temporary term refers to notes = 'interim'"}
{"sample_id": 7649, "db_id": "hockey", "final": {"question": "How many shoutouts are there in the regular season of 1977?", "sql": "SELECT COUNT(year) FROM CombinedShutouts WHERE year = 1977 AND 'R/P' = 'R'", "source_tables": ["combinedshutouts"]}, "evidence": "regular season refers to `R/P` = 'R'"}
{"sample_id": 7650, "db_id": "hockey", "final": {"question": "How many teams scored against their opponent who had pulled their goalie in the year 2005?", "sql": "SELECT COUNT(tmID) FROM Goalies WHERE year = 2005 AND ENG IS NULL", "source_tables": ["goalies"]}, "evidence": "teams scored against their opponent who had pulled their goalie refers to ENG is not null"}
{"sample_id": 7651, "db_id": "hockey", "final": {"question": "Please list the years in which the NHL League had shots recorded while the goalie was on the ice.", "sql": "SELECT DISTINCT year FROM Goalies WHERE lgID = 'NHL' AND SA IS NOT NULL", "source_tables": ["goalies"]}, "evidence": "shots recorded while the goalie was on the ice refers to SA IS NOT NULL; NHL League refers to lgID = 'NHL'"}
{"sample_id": 7652, "db_id": "hockey", "final": {"question": "How many teams have the same total number of postseason wins and postseason loses?", "sql": "SELECT DISTINCT COUNT(tmID) FROM Goalies WHERE PostW = PostL", "source_tables": ["goalies"]}, "evidence": "same total number of postseason wins and postseason loses refers to PostW = PostL"}
{"sample_id": 7653, "db_id": "hockey", "final": {"question": "Please list the name of the person who was in the Hall of Fame in the year 1978.", "sql": "SELECT name FROM HOF WHERE year = 1978", "source_tables": ["hof"]}, "evidence": ""}
{"sample_id": 7654, "db_id": "hockey", "final": {"question": "How many people were in the Hall of Fame's Builder category?", "sql": "SELECT COUNT(hofID) FROM HOF WHERE category = 'Builder'", "source_tables": ["hof"]}, "evidence": ""}
{"sample_id": 7655, "db_id": "hockey", "final": {"question": "Among the people who got into the Hall of Fame after the year 1980, how many of them belong to the category of \"Player\"?", "sql": "SELECT COUNT(hofID) FROM HOF WHERE year > 1980 AND category = 'Player'", "source_tables": ["hof"]}, "evidence": "after the year 1980 refers to year>1980"}
{"sample_id": 7656, "db_id": "hockey", "final": {"question": "Please list the Nicknames of the players who got in the Hall of Fame in 2007.", "sql": "SELECT DISTINCT T1.nameNick FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T2.year = 2007", "source_tables": ["master", "hof"]}, "evidence": "nicknames refers to nameNick"}
{"sample_id": 7657, "db_id": "hockey", "final": {"question": "Did the tallest player got in the Hall of Fame? If yes, please list the year when he got in the Hall of Fame.", "sql": "SELECT CASE WHEN T1.hofID IS NULL THEN 'NO' ELSE T2.year END FROM Master AS T1 LEFT JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T1.height = ( SELECT MAX(height) FROM Master )", "source_tables": ["master", "hof"]}, "evidence": "tallest player refers to max(height)"}
{"sample_id": 7658, "db_id": "hockey", "final": {"question": "Please list the awards the coaches who are born in Canada have won.", "sql": "SELECT DISTINCT T2.award FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.birthCountry = 'Canada'", "source_tables": ["master", "awardscoaches"]}, "evidence": "born in Canada refers to birthCountry = 'Canada'"}
{"sample_id": 7659, "db_id": "hockey", "final": {"question": "Among the coaches whose team has over 30 wins in a year, how many of them are born in the USA?", "sql": "SELECT COUNT(T2.coachID) FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.W > 30 AND T1.birthCountry = 'USA'", "source_tables": ["master", "coaches"]}, "evidence": "over 30 wins refers to w>30; born in the USA refers to birthCountry = 'USA'"}
{"sample_id": 7660, "db_id": "hockey", "final": {"question": "Among the coaches who have taught teams from the NHL League, how many of them are from Canada?", "sql": "SELECT COUNT(T2.coachID) FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.lgID = 'NHL' AND T1.birthCountry = 'Canada'", "source_tables": ["master", "coaches"]}, "evidence": "from Canada refers to birthCountry = 'Canada'; NHL league refers to lgID = 'NHL'"}
{"sample_id": 7661, "db_id": "hockey", "final": {"question": "Please list the awards won by coaches who were born in 1952.", "sql": "SELECT T2.award FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.birthYear = 1952", "source_tables": ["master", "awardscoaches"]}, "evidence": "born in 1977 refers to birthYear = '1977'"}
{"sample_id": 7662, "db_id": "hockey", "final": {"question": "Among the coaches who have received an award in 1940, how many of them are born in Toronto?", "sql": "SELECT COUNT(T1.coachID) FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 1940 AND T1.birthCity = 'Toronto'", "source_tables": ["master", "awardscoaches"]}, "evidence": "born in Toronto refers to birthCountry = 'Toronto'"}
{"sample_id": 7663, "db_id": "hockey", "final": {"question": "Among the coaches who have received an award after the year 1940, how many of them have already died?", "sql": "SELECT COUNT(T1.coachID) FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.deathYear IS NOT NULL AND T2.year > 1940", "source_tables": ["master", "awardscoaches"]}, "evidence": "after the year 1940 refers to year>1940; have already died refers to deathYear IS NOT NULL"}
{"sample_id": 7664, "db_id": "hockey", "final": {"question": "Please list the awards won by coaches who taught the NHL League and have already died.", "sql": "SELECT DISTINCT T2.award FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.deathYear IS NOT NULL AND T2.lgID = 'NHL'", "source_tables": ["master", "awardscoaches"]}, "evidence": "have already died refers to deathYear IS NOT NULL; NHL league refers to lgID = 'NHL'"}
{"sample_id": 7665, "db_id": "hockey", "final": {"question": "Among the coaches who have gotten in the Hall of Fame, how many of them have a weight of over 195?", "sql": "SELECT COUNT(DISTINCT T1.coachID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T1.weight > 195", "source_tables": ["master", "hof"]}, "evidence": "weight of over 195 refers to weight>195"}
{"sample_id": 7666, "db_id": "hockey", "final": {"question": "Please list the first name of the players who are good at both left hands and right hands for goalie and have gotten in the Hall of Fame.", "sql": "SELECT DISTINCT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T1.shootCatch IS NULL", "source_tables": ["master", "hof"]}, "evidence": "good at both left hands and right hands for goalie refers to shootCatch IS NULL"}
{"sample_id": 7667, "db_id": "hockey", "final": {"question": "Among the players who became coaches, how many of them have gotten in the Hall of Fame?", "sql": "SELECT COUNT(T1.playerID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T1.playerID IS NOT NULL AND T1.coachID IS NOT NULL", "source_tables": ["master", "hof"]}, "evidence": "players who became coaches refers to playerID IS NOT NULL AND coachID IS NOT NULL"}
{"sample_id": 7668, "db_id": "hockey", "final": {"question": "Please list the birth cities of the players who have won an award in the year 1970.", "sql": "SELECT DISTINCT T1.birthCity FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1970", "source_tables": ["master", "awardsplayers"]}, "evidence": ""}
{"sample_id": 7669, "db_id": "hockey", "final": {"question": "How many players born in Toronto have won the All-Rookie award?", "sql": "SELECT COUNT(T1.playerID) FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'All-Rookie' AND T1.birthCity = 'Toronto'", "source_tables": ["master", "awardsplayers"]}, "evidence": "born in Toronto refers to birthCity = 'Toronto'"}
{"sample_id": 7670, "db_id": "hockey", "final": {"question": "Among the players who have won the All-Rookie award, how many of them have died?", "sql": "SELECT COUNT(T1.playerID) FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'All-Rookie' AND T1.deathYear IS NOT NULL", "source_tables": ["master", "awardsplayers"]}, "evidence": "have died refers to deathYear IS NOT NULL"}
{"sample_id": 7671, "db_id": "hockey", "final": {"question": "Among the players who died in Massachussets, how many of them have won an award?", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.deathState = 'MA'", "source_tables": ["master", "awardsplayers"]}, "evidence": "died in Massachussets refers to deathState = 'Massachussets'"}
{"sample_id": 7672, "db_id": "hockey", "final": {"question": "Please list the awards the players who died in Arlington have won.", "sql": "SELECT T2.award FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.deathCity = 'Kemptville'", "source_tables": ["master", "awardsplayers"]}, "evidence": "died in Arlington refers to deathCity = 'Arlington'"}
{"sample_id": 7673, "db_id": "hockey", "final": {"question": "Please list the nicknames of the players who have won the All-Rookie award and are born in March.", "sql": "SELECT DISTINCT T1.nameNick FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'All-Rookie' AND T1.birthMon = 3", "source_tables": ["master", "awardsplayers"]}, "evidence": "born in March refers to birthMon = '3'; nicknames refers to nameNick"}
{"sample_id": 7674, "db_id": "hockey", "final": {"question": "Among the players who were born in July and August, how many of them got in the Hall of Fame?", "sql": "SELECT COUNT(T1.playerID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T1.birthMon IN (7, 8)", "source_tables": ["master", "hof"]}, "evidence": "born in July and August refers to birthMon IN('7','8')"}
{"sample_id": 7675, "db_id": "hockey", "final": {"question": "In which month was the player who has won the most awards born?", "sql": "SELECT T1.birthMon FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID GROUP BY T2.playerID ORDER BY COUNT(T2.award) DESC LIMIT 1", "source_tables": ["master", "awardsplayers"]}, "evidence": "who has won the most awards refers to max(count(award)); the month player was born refers to birthMon"}
{"sample_id": 7676, "db_id": "hockey", "final": {"question": "Players born in which year have received the most awards in total?", "sql": "SELECT T1.birthYear FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID GROUP BY T1.birthYear ORDER BY COUNT(T2.award) DESC LIMIT 1", "source_tables": ["master", "awardsplayers"]}, "evidence": "received the most awards in total refers to max(count(award))"}
{"sample_id": 7677, "db_id": "hockey", "final": {"question": "Which country is the most award-winning player from?", "sql": "SELECT T1.birthCountry FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID GROUP BY T1.birthCountry ORDER BY COUNT(T2.award) DESC LIMIT 1", "source_tables": ["master", "awardsplayers"]}, "evidence": "most award-winning refers to max(count(award)); country player is from refers to birthCountry"}
{"sample_id": 7678, "db_id": "hockey", "final": {"question": "Which country has the most players in the Hall of Fame?", "sql": "SELECT T1.birthCountry FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID GROUP BY T1.birthCountry ORDER BY COUNT(T1.playerID) DESC LIMIT 1", "source_tables": ["master", "hof"]}, "evidence": "country refers to birthCountry"}
{"sample_id": 7679, "db_id": "hockey", "final": {"question": "Please list the positions of the players who were born in Canada and have won the All-Rookie award.", "sql": "SELECT DISTINCT T1.pos FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCountry = 'Canada' AND T2.award = 'All-Rookie'", "source_tables": ["master", "awardsplayers"]}, "evidence": "born in Canada refers to birthCountry = 'Canada'; pos = 'LW' refers to left winger; pos = 'RW' refers to right winger; pos = 'C' refers to center; pos = 'G' refers to goalie; pos = 'D' refers to defenceman; pos = 'W' refers to winger; pos = 'F' refers to forward"}
{"sample_id": 7680, "db_id": "hockey", "final": {"question": "What is the average BMI of all the coaches who have gotten in the Hall of Fame?", "sql": "SELECT SUM(T1.weight / (T1.height * T1.height)) / COUNT(T1.coachID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID", "source_tables": ["master", "hof"]}, "evidence": "average BMI = divide(sum(divide(weight, multiply(height, height))), count(coachID))"}
{"sample_id": 7681, "db_id": "hockey", "final": {"question": "What is the percentage of American players among all the players who have gotten in the Hall of Fame?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.birthCountry = 'USA' THEN T1.playerID ELSE NULL END) AS REAL) * 100 / COUNT(T1.playerID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID", "source_tables": ["master", "hof"]}, "evidence": "percentage of American players = divide(count(hofID where birthCountry = 'USA'), count(hofID))*100%"}
{"sample_id": 7682, "db_id": "hockey", "final": {"question": "How many years did player Id \"healygl01\" play?", "sql": "SELECT COUNT(year) FROM Goalies WHERE playerID = 'healygl01'", "source_tables": ["goalies"]}, "evidence": "years of playing = MAX(year)-MIN(year)"}
{"sample_id": 7683, "db_id": "hockey", "final": {"question": "Which team did player Id \"roypa01\" play in 1992? Give the team id.", "sql": "SELECT tmID FROM Goalies WHERE playerID = 'roypa01' AND year = 1992", "source_tables": ["goalies"]}, "evidence": "team id refers to tmID"}
{"sample_id": 7684, "db_id": "hockey", "final": {"question": "What was the total number of the games that player Id \"rutlewa01\" played in 1967?", "sql": "SELECT GP FROM Goalies WHERE playerID = 'rutlewa01' AND year = 1967", "source_tables": ["goalies"]}, "evidence": "total number of the games refers to GP"}
{"sample_id": 7685, "db_id": "hockey", "final": {"question": "Show me how many minutes player Id \"valiqst01\" played in the game in 2007 season.", "sql": "SELECT Min FROM Goalies WHERE playerID = 'valiqst01' AND year = 2007", "source_tables": ["goalies"]}, "evidence": "show me how many minutes refers to Min"}
{"sample_id": 7686, "db_id": "hockey", "final": {"question": "How many games did player Id \"vanbijo01\" win in the 1990 season?", "sql": "SELECT W FROM Goalies WHERE playerID = 'vanbijo01' AND year = 1990", "source_tables": ["goalies"]}, "evidence": "the number of wins refers to W"}
{"sample_id": 7687, "db_id": "hockey", "final": {"question": "In how many games did player Id \"vernomi01\" end up with a tie or an overtime loss in the 1998 season?", "sql": "SELECT 'T/OL' FROM Goalies WHERE playerID = 'vernomi01' AND year = 1998", "source_tables": ["goalies"]}, "evidence": "end up with a tie or an overtime loss refers to T/OL"}
{"sample_id": 7688, "db_id": "hockey", "final": {"question": "For the coach who won Second Team All-Star in 1933, how many wins did he have that year?", "sql": "SELECT SUM(T1.W) FROM Coaches AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 1933 AND T2.award = 'Second Team All-Star'", "source_tables": ["coaches", "awardscoaches"]}, "evidence": "the number of wins refers to count(w)"}
{"sample_id": 7689, "db_id": "hockey", "final": {"question": "Did legendsID \"P194502\" personally attend his Hall of Fame dedication?", "sql": "SELECT IIF(T1.note = 'posthumous', 'YES', 'NO') FROM AwardsMisc AS T1 RIGHT JOIN Master AS T2 ON T1.ID = T2.playerID WHERE T2.legendsID = 'P194502'", "source_tables": ["master", "awardsmisc"]}, "evidence": "note = 'posthumous'refers to \"didn't personally attend\""}
{"sample_id": 7690, "db_id": "hockey", "final": {"question": "Which position did Mike Antonovich play?", "sql": "SELECT T1.pos FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.firstName = 'Mike' AND T1.lastName = 'Antonovich'", "source_tables": ["master", "awardsplayers"]}, "evidence": "pos = 'LW' refers to left winger; pos = 'RW' refers to right winger; pos = 'C' refers to center; pos = 'G' refers to goalie; pos = 'D' refers to defenceman; pos = 'W' refers to winger; pos = 'F' refers to forward"}
{"sample_id": 7691, "db_id": "hockey", "final": {"question": "For the coach who co-coached with Dave Lewis in 1998, where was his birth place?", "sql": "SELECT T1.birthCountry FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 1998 AND T2.notes = 'co-coach with Dave Lewis'", "source_tables": ["master", "coaches"]}, "evidence": "co-coached refers to notes = 'co-coach'; birth place refers to 'birthCountry-birthState-birthCity'"}
{"sample_id": 7692, "db_id": "hockey", "final": {"question": "Which player who showed as the third goalie in a game has the biggest weight? Give the full name of the player.", "sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.stint = 3 ORDER BY T1.weight DESC LIMIT 1", "source_tables": ["master", "goalies"]}, "evidence": "the third goalie refers to stint = 3; the biggest weight refers to max(weight)"}
{"sample_id": 7693, "db_id": "hockey", "final": {"question": "Among the players who had 10 empty net goals in their career, who is the tallest? Show his full name.", "sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID GROUP BY T2.playerID, T1.height HAVING SUM(T2.ENG) > 10 ORDER BY T1.height DESC LIMIT 1", "source_tables": ["master", "goalies"]}, "evidence": "10 empty net goals refers to ENG = 10; the tallest refers to max(height)"}
{"sample_id": 7694, "db_id": "hockey", "final": {"question": "For the goalie who had the most shutouts in 2010, what's his catching hand?", "sql": "SELECT T1.shootCatch FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2010 GROUP BY T2.playerID ORDER BY SUM(T2.SHO) DESC LIMIT 1", "source_tables": ["master", "goalies"]}, "evidence": "the most shutouts refers to max(SHO); shootCatch = 'L' refers to lefthand; shootCatch = 'R' refers to righthand; shootCatch = 'null' or 'empty' means this player is good at both left and right hand"}
{"sample_id": 7695, "db_id": "hockey", "final": {"question": "Who is the youngest goalie among those who had more than 150 goal againsts in 2002 season?", "sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2002 AND T2.GA > 150 GROUP BY T2.playerID, T1.birthYear, T1.birthMon, T1.birthMon HAVING SUM(T2.GA) ORDER BY T1.birthYear DESC, T1.birthMon DESC, SUM(T1.birthDay) DESC LIMIT 1", "source_tables": ["master", "goalies"]}, "evidence": "youngest goalie refers to max(birthYear/birthMon/birthDay); more than 150 goal againsts refers to GA>150"}
{"sample_id": 7696, "db_id": "hockey", "final": {"question": "In the history of team id NJD, which goalie saved the most goal attempts? Give his full name.", "sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'NJD' GROUP BY T2.playerID ORDER BY SUM(T2.SA - T2.GA) DESC LIMIT 1", "source_tables": ["master", "goalies"]}, "evidence": "saved the most goal attempts refers to max(subtract(SA, GA)); team id refers to tmID"}
{"sample_id": 7697, "db_id": "hockey", "final": {"question": "Which teams had the most postseason empty net goals in 2010 season? List their team names.", "sql": "SELECT T2.name FROM Goalies AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID WHERE T1.year = 2010 GROUP BY T2.name ORDER BY SUM(PostENG) DESC LIMIT 1", "source_tables": ["goalies", "teams"]}, "evidence": "most postseason empty net goals refers to max(PostENG)"}
{"sample_id": 7698, "db_id": "hockey", "final": {"question": "For the team which had the most postseason shutouts in 1995, how many points did they have that year?", "sql": "SELECT SUM(T2.SHO) FROM Scoring AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1995 GROUP BY T2.tmID ORDER BY SUM(T2.PostSHO) DESC LIMIT 1", "source_tables": ["goalies", "scoring"]}, "evidence": "points refer to Pts; the most postseason shutouts refers to max(PostSHO)"}
{"sample_id": 7699, "db_id": "hockey", "final": {"question": "Which coach had the highest winning rates in the 2009 season? What's coach's nickname.", "sql": "SELECT T2.coachID, T1.nameNick FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 2009 ORDER BY CAST(T2.W AS REAL) / (T2.W + T2.L) DESC LIMIT 1", "source_tables": ["master", "coaches"]}, "evidence": "the highest winning rate refer to divide(W, sum(W, L))"}
{"sample_id": 7700, "db_id": "hockey", "final": {"question": "For the team had the biggest power play percentage in 2011, who was their coach that season? Give the full name.", "sql": "SELECT T1.coachID FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID WHERE T2.year = 2011 ORDER BY CAST(T2.PPG AS REAL) / T2.PPC DESC LIMIT 1", "source_tables": ["coaches", "teams"]}, "evidence": "the biggest power play percentage = max(divide(PPG, PPC))"}
{"sample_id": 7701, "db_id": "hockey", "final": {"question": "In the Stanley Cup finals history, how many games did player id \"broadpu01\" play in 1922?", "sql": "SELECT GP FROM ScoringSC WHERE playerID = 'broadpu01' AND YEAR = 1922", "source_tables": ["scoringsc"]}, "evidence": "the number of games refers to GP"}
{"sample_id": 7702, "db_id": "hockey", "final": {"question": "How many years did player Id \"cleghsp01\" make to the Stanley Cup finals?", "sql": "SELECT COUNT(year) FROM ScoringSC WHERE playerID = 'cleghsp01'", "source_tables": ["scoringsc"]}, "evidence": "the number of years refers to count(year)"}
{"sample_id": 7703, "db_id": "hockey", "final": {"question": "What was the number of goals did player Id \"dyeba01\" make in the 1921 Stanley Cup finals?", "sql": "SELECT G FROM ScoringSC WHERE playerID = 'dyeba01' AND year = 1921", "source_tables": ["scoringsc"]}, "evidence": "the number of goals refers to G"}
{"sample_id": 7704, "db_id": "hockey", "final": {"question": "Who made the most assists in a single game in the Stanley Cup finals ?", "sql": "SELECT playerID FROM ScoringSC ORDER BY A DESC LIMIT 1", "source_tables": ["scoringsc"]}, "evidence": "the most assists refers to max(A)"}
{"sample_id": 7705, "db_id": "hockey", "final": {"question": "Which league did player id\"adamsja01\" play in 1920?", "sql": "SELECT lgID FROM ScoringSC WHERE playerID = 'adamsja01' AND year = 1920", "source_tables": ["scoringsc"]}, "evidence": "which league refers to lgID"}
{"sample_id": 7706, "db_id": "hockey", "final": {"question": "What position did player id \"hartgi01\" play in his Stanley Cup finals performance?", "sql": "SELECT DISTINCT pos FROM ScoringSC WHERE playerID = 'hartgi01'", "source_tables": ["scoringsc"]}, "evidence": "position refers to pos"}
{"sample_id": 7707, "db_id": "hockey", "final": {"question": "For the team which had three different goalies in the 2011 postseason games, how many games did they win in the regular season?", "sql": "SELECT SUM(T2.W) FROM Goalies AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID WHERE T2.year = 2011 GROUP BY T1.tmID HAVING COUNT(DISTINCT T1.playerID) = 3", "source_tables": ["goalies", "teams"]}, "evidence": "three different goalies refer to count(playerID) = 3; game won refers to W"}
{"sample_id": 7708, "db_id": "hockey", "final": {"question": "Which year was the goalie who had the most postseaon shots Against in 2008 born?", "sql": "SELECT T1.birthYear FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2008 ORDER BY T2.PostSA DESC LIMIT 1", "source_tables": ["master", "goalies"]}, "evidence": "the most postseason shots Against refers to max(PostSA); year born refers to birthYear"}
{"sample_id": 7709, "db_id": "hockey", "final": {"question": "How many years were there after Don Waddell retired and became a coach in NHL?", "sql": "SELECT MAX(T2.year) - MIN(T2.year) FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T1.firstName = 'Don' AND T1.lastName = 'Waddell'", "source_tables": ["master", "coaches"]}, "evidence": "after retired and became a coach refers to max(subtract(year, lastNHL))"}
{"sample_id": 7710, "db_id": "hockey", "final": {"question": "Which is the catching hand for the goaltender who had the most shutouts in 1996?", "sql": "SELECT T1.shootCatch FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1996 ORDER BY T2.SHO DESC LIMIT 1", "source_tables": ["master", "goalies"]}, "evidence": "the most shutouts refers to max(SHO); catching hand for the goaltender refers to shootCatch; shootCatch = 'L' refers to lefthand; shootCatch = 'R' refers to righthand; shootCatch = 'null' or 'empty' means this player is good at both left and right hand"}
{"sample_id": 7711, "db_id": "hockey", "final": {"question": "When was the birthday for the goalie who had most goal againsts in 1965 season?", "sql": "SELECT T1.birthYear, T1.birthMon, birthDay FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1965 ORDER BY T2.GA DESC LIMIT 1", "source_tables": ["master", "goalies"]}, "evidence": "Birthday refers to CONCAT(birthYear / birthMon / birthDate);most goal against refers to MAX(GA);1965 season refers to year = '1965'\n\n"}
{"sample_id": 7712, "db_id": "hockey", "final": {"question": "For he who had the highest plus / minus on the court in the 1981 season, what's his full name?", "sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1981 GROUP BY T2.playerID ORDER BY SUM(T2.'+/-') DESC LIMIT 1", "source_tables": ["master", "scoring"]}, "evidence": "highest Plus/minus refers to MAX(+/-); full name refers to firstName, lastName; 1981 season refers to year = '1981'\n\n"}
{"sample_id": 7713, "db_id": "hockey", "final": {"question": "What's the weight of the player who had the most Power Play Goals in the 21st century?", "sql": "SELECT T1.weight FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year > 2000 GROUP BY T1.playerID, T1.weight ORDER BY SUM(T2.PPG) DESC LIMIT 1", "source_tables": ["master", "scoring"]}, "evidence": "21st century refers to year >2000; Power play goals refers to PPG"}
{"sample_id": 7714, "db_id": "hockey", "final": {"question": "For the player who scored 7 shorthanded goals in 1989, what's his dominant hand?", "sql": "SELECT T1.shootCatch FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1989 GROUP BY T2.playerID HAVING SUM(T2.SHG) = 7", "source_tables": ["master", "scoring"]}, "evidence": "1989 refers to the year of scoring; \"dominant hand\" and \"shooting hand\" are synonyms which refers to shootCatch\n\n"}
{"sample_id": 7715, "db_id": "hockey", "final": {"question": "Who was the most clutch player in 1986? Give his full name.", "sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1986 GROUP BY T2.playerID ORDER BY SUM(T2.GWG) DESC LIMIT 1", "source_tables": ["master", "scoring"]}, "evidence": "clutch player' and 'trustworthy player in the critical moment' are synonyms; most clutch player refers to the most trustworthy player which refers to MAX(GWG); 1986 is the year played"}
{"sample_id": 7716, "db_id": "hockey", "final": {"question": "How many shots on goal did Cam Neely had in the year of 1990?", "sql": "SELECT T2.SOG FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T1.firstName = 'Cam' AND T1.lastName = 'Neely' AND T2.year = '1990'", "source_tables": ["master", "scoring"]}, "evidence": "1990 refers to the year played; Shot on goal refers to SOG\n"}
{"sample_id": 7717, "db_id": "hockey", "final": {"question": "Who was the coach for the team which had the most bench minors penalty in 2003\uff1f", "sql": "SELECT DISTINCT T3.firstName, T3.lastName FROM Teams AS T1 INNER JOIN Coaches AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Master AS T3 ON T2.coachID = T3.coachID WHERE T1.year = '2003' GROUP BY T3.firstName, T3.lastName ORDER BY SUM(T1.BenchMinor) DESC LIMIT 1", "source_tables": ["master", "coaches", "teams"]}, "evidence": "Coach of the team refers to firstName+lastName; 2003 refers to the year\n\n"}
{"sample_id": 7718, "db_id": "hockey", "final": {"question": "For the goalies whose weight are above 190, who had most goal againsts in 1978 season?", "sql": "SELECT T1.playerID FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.year = '1978' AND T2.weight > 190 ORDER BY T1.GA DESC LIMIT 1", "source_tables": ["master", "goalies"]}, "evidence": "Weight of above 190 refers to weight >190; 1978 season refers to the year played"}
{"sample_id": 7719, "db_id": "hockey", "final": {"question": "What is the percentage of winning rate of improvement since Alain Vigneault became the coach of Vancouver Canucks in 2006 season?", "sql": "SELECT SUM(CASE WHEN T1.year = 2006 THEN CAST(T1.W AS REAL) * 100 / (T1.W + T1.L) ELSE 0 END) - ( SELECT CAST(W AS REAL) * 100 / (W + L) FROM Teams WHERE year = '2005' AND name = 'Vancouver Canucks' ) FROM Teams AS T1 INNER JOIN Coaches AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Master AS T3 ON T2.coachID = T3.coachID WHERE T1.name = 'Vancouver Canucks' AND T3.firstName = 'Alain' AND T3.lastName = 'Vigneault'", "source_tables": ["master", "coaches", "teams"]}, "evidence": "winning rate refers to DIVIDE (w, SUM(w, l)); Vancouver Canucks is name of team where tmID = 'VAN'\nWinning rate refers to DIVIDE(wins in year = '2005/2006'(ADD(wins+loses); improvement refers to SUBTRACT(DIVIDE(wins in year = '2005'(ADD(wins+loses), DIVIDE(wins in year = '2006'(ADD(wins+loses))\n"}
{"sample_id": 7720, "db_id": "hockey", "final": {"question": "For the goalie who had the highest defensive success rate in the postseason of 2011, what's his legends ID ?", "sql": "SELECT T2.legendsID FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 2011 ORDER BY 1 - CAST(T1.PostGA AS REAL) / T1.PostSA DESC LIMIT 1", "source_tables": ["master", "goalies"]}, "evidence": "Post season of 2011 refers to year = \u20192011\u2019\ndefensive success rate refers to (SUBTRACT(1 (DIVIDE(PostGA/PostSA)), *100%)\n"}
{"sample_id": 7721, "db_id": "hockey", "final": {"question": "How many former athletes go on to become coaches after retiring?", "sql": "SELECT COUNT(playerID) FROM Master WHERE playerID IS NOT NULL AND coachID IS NOT NULL", "source_tables": ["master"]}, "evidence": ""}
{"sample_id": 7722, "db_id": "hockey", "final": {"question": "Among the teams with the most number of ties, how many penalty was committed by a player or coach that is not on the ice? Indicate the name of the team.", "sql": "SELECT BenchMinor, name FROM Teams ORDER BY T DESC LIMIT 1", "source_tables": ["teams"]}, "evidence": "penalty refers to BenchMinor; Ties refer to T"}
{"sample_id": 7723, "db_id": "hockey", "final": {"question": "Which NHL award was most frequently won by the coach with the most wins?", "sql": "SELECT award FROM Teams AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.lgID = T2.lgID WHERE T1.lgID = 'NHL' GROUP BY T2.coachID, T2.award ORDER BY COUNT(T2.award) DESC LIMIT 1", "source_tables": ["awardscoaches", "teams"]}, "evidence": ""}
{"sample_id": 7724, "db_id": "hockey", "final": {"question": "What is the power play percentage of the team with the most number of loses?", "sql": "SELECT CAST(SUM(PPG) AS REAL) * 100 / SUM(PPC) FROM Teams GROUP BY tmID ORDER BY SUM(L) DESC LIMIT 1", "source_tables": ["teams"]}, "evidence": "Power play percentage refers to PPG, most number of loses refers to MAX(L)\n\n"}
{"sample_id": 7725, "db_id": "hockey", "final": {"question": "How many players were included in the Hall of Fame on average between 1950 and 1980?", "sql": "SELECT CAST(COUNT(name) AS REAL) / 30 FROM HOF WHERE year BETWEEN 1950 AND 1980 AND category = 'Player'", "source_tables": ["hof"]}, "evidence": "year BETWEEN 1950 and 1980; average = DIVIDE(COUNT(hofID)), 30)\n\n"}
{"sample_id": 7726, "db_id": "hockey", "final": {"question": "Which country produced the most number of hockey players? Identify which year was most of the hockey players are born.", "sql": "SELECT DISTINCT birthCountry, birthYear FROM Master GROUP BY birthCountry, birthYear ORDER BY COUNT(birthCountry) DESC LIMIT 1", "source_tables": ["master"]}, "evidence": "Year most hockey players were born refers to MAX(birthYear); birthCountry refers to the country where a player was born\n"}
{"sample_id": 7727, "db_id": "hockey", "final": {"question": "How many wins does the team have whose goaltender have the most number of successfully stopping the other team from scoring during the entire game?", "sql": "SELECT SUM(W) FROM Goalies GROUP BY tmID ORDER BY SUM(SHO) DESC LIMIT 1", "source_tables": ["goalies"]}, "evidence": "Number of wins refers to W; Shutout refers to SHO; a shutout is credited to a goaltender who successfully stops the other team from scoring during the entire game.\n"}
{"sample_id": 7728, "db_id": "hockey", "final": {"question": "Which team recorded the most number of road victories in 2005? Indicate the team ID.", "sql": "SELECT tmID FROM TeamSplits WHERE YEAR = '2005' ORDER BY rW DESC LIMIT 1", "source_tables": ["teamsplits"]}, "evidence": "road victories refers to rW; team id refers to tmID; victories and wins are synonyms\n\n"}
{"sample_id": 7729, "db_id": "hockey", "final": {"question": "What is the position of the 9th oldest hockey player?", "sql": "SELECT pos FROM Master WHERE birthYear IS NOT NULL ORDER BY birthYear, birthMon, birthDay LIMIT 8", "source_tables": ["master"]}, "evidence": "position refers to pos; date of birth refers to birthDay + birthMon + birthYear"}
{"sample_id": 7730, "db_id": "hockey", "final": {"question": "How many goals were scored while the goalkeeper was on the ice in the 1924 WCHL by the goalie with the most goals scored?", "sql": "SELECT SUM(PostGA) FROM Goalies WHERE lgID = 'WCHL' AND year = '1924' GROUP BY playerID ORDER BY SUM(PostGA) DESC LIMIT 1", "source_tables": ["goalies"]}, "evidence": "WCHL is the league's abbreviated name which refers to lgID = 'WCHL'; most goals scored referst to MAX(PostGA); GA is abbreviation for Post Against which means number of goals recorded while the goalie is on the ice. Include all goals against during regulation and overtime play."}
{"sample_id": 7731, "db_id": "hockey", "final": {"question": "In 2006, what is the overall number of october defeats for the team with the most October defeats? Indicate the team ID.", "sql": "SELECT OctL, tmID FROM TeamSplits WHERE year = '2006' ORDER BY OctL DESC LIMIT 1", "source_tables": ["teamsplits"]}, "evidence": "team ID refers to tmID; 'defeats' and 'loses' are synonyms; most October defeats refers to max(OctL)"}
{"sample_id": 7732, "db_id": "hockey", "final": {"question": "How many players, whose shooting/catching hand is both left and right, debuted their first NHL in 2011?", "sql": "SELECT COUNT(playerID) FROM Master WHERE shootCatch IS NULL AND firstNHL = '2011'", "source_tables": ["master"]}, "evidence": "shooting/catching hand is both left and right refers to shootCatch is NULL, debuted their first NHL in 2011 refers to firstNHL = 2011"}
{"sample_id": 7733, "db_id": "hockey", "final": {"question": "Which year recorded the most number of goals by a player and how old was the player at the time the most number of goals was achieved by him?", "sql": "SELECT T1.year, T1.year - T2.birthYear FROM Scoring AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID GROUP BY T1.year, T1.year - T2.birthYear ORDER BY SUM(T1.G) DESC LIMIT 1", "source_tables": ["master", "scoring"]}, "evidence": "most number of goals refers to max(G); how old refers to age = subtract(year(max(G)), birthYear)"}
{"sample_id": 7734, "db_id": "hockey", "final": {"question": "What is the average height of all the goalies born in the 70s who's a left shooting/catching dominant and to which team do the tallest player/s play for most recently?", "sql": "SELECT CAST(SUM(T2.height) AS REAL) / COUNT(*) FROM AwardsPlayers AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.height IS NOT NULL AND (T2.pos = 'LW' OR T2.pos = 'L/C')", "source_tables": ["master", "awardsplayers"]}, "evidence": "goalies refers to pos = 'G'; born in the 70s refers to birthYear between '1970' and '1979'; left shooting/catching dominant refers to shootCatch = 'L'; tallest refers to max(height); average height = avg(height(pos = 'G' & birthYear between '1970' and '1979' & shootCatch = 'L')); most recently refers to max(Teams.year)"}
{"sample_id": 7735, "db_id": "hockey", "final": {"question": "What is the total amount of assists of the NHL player with the most assists in history? Please indicate his/her full name.", "sql": "SELECT SUM(T1.A), T2.firstName, T2.lastName FROM Scoring AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.lgID = 'NHL' GROUP BY T2.firstName, T2.lastName ORDER BY SUM(T1.A) DESC LIMIT 1", "source_tables": ["master", "scoring"]}, "evidence": "NHL refers to lgID = 'NHL'; most assists refers to max(A); full name = nameGiven + lastName; total amount of assists = sum(A(playerID(max(A))))"}
{"sample_id": 7819, "db_id": "world", "final": {"question": "Which country has the shortest life expectancy?", "sql": "SELECT Name FROM Country ORDER BY LifeExpectancy LIMIT 1", "source_tables": ["country"]}, "evidence": "shortest life expectancy refers to MIN(LifeExpectancy);"}
{"sample_id": 7820, "db_id": "world", "final": {"question": "List any five countries which use English as an official language.", "sql": "SELECT T1.Name FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' LIMIT 5", "source_tables": ["countrylanguage", "country"]}, "evidence": "English as an official language refers to `Language` = 'English' AND IsOfficial = 'T';"}
{"sample_id": 7821, "db_id": "world", "final": {"question": "Calculate the average population per city in Karnataka district.", "sql": "SELECT AVG(Population) FROM City WHERE District = 'Karnataka' GROUP BY ID", "source_tables": ["city"]}, "evidence": "average population = AVG(Population);"}
{"sample_id": 7822, "db_id": "world", "final": {"question": "List the languages used in the USA.", "sql": "SELECT Language FROM CountryLanguage WHERE CountryCode = 'USA'", "source_tables": ["countrylanguage"]}, "evidence": "USA refers to CountryCode = 'USA';"}
{"sample_id": 7823, "db_id": "world", "final": {"question": "How many countries use Portuguese?", "sql": "SELECT SUM(CASE WHEN Language = 'Portuguese' THEN 1 ELSE 0 END) FROM CountryLanguage", "source_tables": ["countrylanguage"]}, "evidence": "Portuguese refers to `Language` = 'Portuguese';"}
{"sample_id": 7824, "db_id": "world", "final": {"question": "How many cities are there in England?", "sql": "SELECT COUNT(ID) FROM City WHERE District = 'England'", "source_tables": ["city"]}, "evidence": "England refers to District = 'England';"}
{"sample_id": 7825, "db_id": "world", "final": {"question": "How many cities are there in the country with the largest surface area?", "sql": "SELECT T2.ID FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.SurfaceArea = ( SELECT MAX(SurfaceArea) FROM Country )", "source_tables": ["country", "city"]}, "evidence": "largest surface area refers to MAX(SurfaceArea);"}
{"sample_id": 7826, "db_id": "world", "final": {"question": "What is the capital city and population of San Marino?", "sql": "SELECT T1.Capital, T2.Population FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'San Marino'", "source_tables": ["country", "city"]}, "evidence": "capital city refers to Capital; San Marino is a name of country;"}
{"sample_id": 7827, "db_id": "world", "final": {"question": "List the languages used in Turkmenistan.", "sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Turkmenistan'", "source_tables": ["countrylanguage", "country"]}, "evidence": "Turkmenistan is a name of country;"}
{"sample_id": 7828, "db_id": "world", "final": {"question": "Provide the name, capital city and its official language of the country with the highest life expectancy.", "sql": "SELECT T1.Name, T1.Capital, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode INNER JOIN City AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' ORDER BY T1.LifeExpectancy DESC LIMIT 1", "source_tables": ["countrylanguage", "country", "city"]}, "evidence": "capital city refers to Capital; official language refers to IsOfficial = 'T'; highest life expectancy refers to MAX(LifeExpectancy);"}
{"sample_id": 7829, "db_id": "world", "final": {"question": "List the countries and their official languages in Antarctica.", "sql": "SELECT T1.Name, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Antarctica' AND T2.IsOfficial = 'T'", "source_tables": ["countrylanguage", "country"]}, "evidence": "official language refers to IsOfficial = 'T'; Antarctica refers to Continent = 'Antarctica';"}
{"sample_id": 7830, "db_id": "world", "final": {"question": "List any five countries which use English as an official language.", "sql": "SELECT T1.Name FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' LIMIT 5", "source_tables": ["countrylanguage", "country"]}, "evidence": "English as an official language refers to `Language` = 'English' AND IsOfficial = 'T';"}
{"sample_id": 7831, "db_id": "world", "final": {"question": "Among the languages used in Baltic Countries, provide the languages which are used by over 80%.\n\n", "sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Region = 'Baltic Countries' AND T2.Percentage > 80", "source_tables": ["countrylanguage", "country"]}, "evidence": "Baltic Countries refers to Region = 'Baltic Countries'; languages which are used by over 80% refers to Percentage > 80;"}
{"sample_id": 7832, "db_id": "world", "final": {"question": "Among the languages used in Baltic Countries, provide the languages which are used by over 80%.", "sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Region = 'Baltic Countries' AND T2.Percentage > 80", "source_tables": ["countrylanguage", "country"]}, "evidence": "Baltic Countries refers to Region = 'Baltic Countries'; languages which are used by over 80% refers to Percentage > 80;"}
{"sample_id": 7833, "db_id": "world", "final": {"question": "Provide the name, located country, and life expectancy of the most populated city", "sql": "SELECT T2.Name, T1.Code, T1.LifeExpectancy FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode ORDER BY T2.Population DESC LIMIT 1", "source_tables": ["country", "city"]}, "evidence": "most populated city refers to MAX(Population);"}
{"sample_id": 7834, "db_id": "world", "final": {"question": "Describe the capital city and languages used in the country with the shortest life expectancy.", "sql": "SELECT T1.Capital, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode INNER JOIN City AS T3 ON T1.Code = T3.CountryCode ORDER BY T1.LifeExpectancy LIMIT 1", "source_tables": ["countrylanguage", "country", "city"]}, "evidence": "capital city refers to Capital; shortest life expectancy refers to MIN(LifeExpectancy);"}
{"sample_id": 7835, "db_id": "world", "final": {"question": "Provide the country, population, capital city, and official language of the country with the smallest surface area.", "sql": "SELECT T1.Name, T1.Population, T1.Capital, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode INNER JOIN City AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' ORDER BY T1.SurfaceArea LIMIT 1", "source_tables": ["countrylanguage", "country", "city"]}, "evidence": "capital city refers to Capital; official language refers to IsOfficial = 'T'; smallest surface area refers to MIN(SurfaceArea);"}
{"sample_id": 7836, "db_id": "world", "final": {"question": "How many percent of countries in North America use English?", "sql": "SELECT CAST(SUM(IIF(T2.Language = 'English', 1, 0)) AS REAL) * 100 / COUNT(T1.Code) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode", "source_tables": ["countrylanguage", "country"]}, "evidence": "percentage = MULTIPLY(DIVIDE(COUNT(Language = 'English' WHERE Continent = 'North America'), COUNT(Language WHERE Continent = 'North America')), 1.0); North America refers to Continent = 'North America'; use English refers to Language = 'English';"}
{"sample_id": 7837, "db_id": "world", "final": {"question": "List the district name of the city with the smallest population.", "sql": "SELECT District FROM City ORDER BY Population LIMIT 1", "source_tables": ["city"]}, "evidence": "smallest population refers to MIN(Population);"}
{"sample_id": 7838, "db_id": "world", "final": {"question": "In which continent does the country with the smallest surface area belongs?", "sql": "SELECT Continent FROM Country ORDER BY SurfaceArea LIMIT 1", "source_tables": ["country"]}, "evidence": "smallest surface area refers to MIN(smallest surface area);"}
{"sample_id": 7839, "db_id": "world", "final": {"question": "Who is the head of the state where the most crowded city belongs?", "sql": "SELECT T1.HeadOfState FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode ORDER BY T2.Population DESC LIMIT 1", "source_tables": ["country", "city"]}, "evidence": "head of the state refers to HeadOfState; most crowded city refers to MAX(Population);"}
{"sample_id": 7840, "db_id": "world", "final": {"question": "Among the countries that officially use the English language, what country has the highest capital?", "sql": "SELECT T1.Code FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' ORDER BY T1.Capital DESC LIMIT 1", "source_tables": ["countrylanguage", "country"]}, "evidence": "officially use the English language refers to `Language` = 'English' AND IsOfficial = 'T'; highest capital refers to MAX(Capital);"}
{"sample_id": 7841, "db_id": "world", "final": {"question": "List down the cities that belong to the country with a life expectancy of 66.4.", "sql": "SELECT T2.Name FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.LifeExpectancy = 66.4", "source_tables": ["country", "city"]}, "evidence": ""}
{"sample_id": 7842, "db_id": "world", "final": {"question": "Give the head of the state of the country with the lowest percentage use of English as their language.", "sql": "SELECT T1.HeadOfState FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T2.Percentage LIMIT 1", "source_tables": ["countrylanguage", "country"]}, "evidence": "head of the state refers to HeadOfState; lowest percentage use of English as their language refers to MIN(Percentage WHERE `Language` = 'English');"}
{"sample_id": 7843, "db_id": "world", "final": {"question": "What is the surface area of the country where Sutton Coldfield city belongs?", "sql": "SELECT T1.SurfaceArea FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Sutton Coldfield'", "source_tables": ["country", "city"]}, "evidence": ""}
{"sample_id": 7844, "db_id": "world", "final": {"question": "List down the languages of the countries that have population below 8000.", "sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Population < 8000", "source_tables": ["countrylanguage", "country"]}, "evidence": "population below 8000 refers to Population < 8000;"}
{"sample_id": 7845, "db_id": "world", "final": {"question": "What are the official languages used in Belgium?", "sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Belgium' AND T2.IsOfficial = 'T'", "source_tables": ["countrylanguage", "country"]}, "evidence": "official languages refers to IsOfficial = 'T'; Belgium is a name of country;"}
{"sample_id": 7846, "db_id": "world", "final": {"question": "Give the cities and district names that belong to the country with Hajastan as its local name.", "sql": "SELECT T2.Name, T2.District FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.LocalName = 'Hajastan'", "source_tables": ["country", "city"]}, "evidence": ""}
{"sample_id": 7847, "db_id": "world", "final": {"question": "How many languages are used in Cyprus?", "sql": "SELECT SUM(CASE WHEN T1.Name = 'Cyprus' THEN 1 ELSE 0 END) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode", "source_tables": ["countrylanguage", "country"]}, "evidence": "Cyprus is a name of Country;"}
{"sample_id": 7848, "db_id": "world", "final": {"question": "Provide the language used by the people of Belize.", "sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Belize'", "source_tables": ["countrylanguage", "country"]}, "evidence": "Belize is a name of country;"}
{"sample_id": 7849, "db_id": "world", "final": {"question": "List down the districts belong to the country headed by Adolf Ogi.", "sql": "SELECT T2.District FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Adolf Ogi'", "source_tables": ["country", "city"]}, "evidence": "headed by Adolf Ogi refers to HeadOfState = 'Adolf Ogi';"}
{"sample_id": 7850, "db_id": "world", "final": {"question": "Who is the head of the country where Santa Catarina district belongs?", "sql": "SELECT T1.HeadOfState FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.District = 'Santa Catarina'", "source_tables": ["country", "city"]}, "evidence": "head of the country refers to HeadOfState;"}
{"sample_id": 7851, "db_id": "world", "final": {"question": "Among the countries that have GNP greater than 1500, what is the percentage of the countries have English as its language?", "sql": "SELECT CAST(SUM(IIF(T2.Language = 'English', 1, 0)) AS REAL) * 100 / COUNT(T1.Code) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GNP > 1500", "source_tables": ["countrylanguage", "country"]}, "evidence": "GNP greater than 1500 refers to GNP > 1500 ; percentage = MULTIPLY(DIVIDE(SUM(Code WHERE GNP > 1500 AND Language = 'English'), COUNT(Code WHERE GNP > 1500)) 1.0); English as its language refers to Language = 'English';"}
{"sample_id": 7852, "db_id": "world", "final": {"question": "In English speaking countries, provide the difference between the number of countries with republic and constitutional monarchy as its government form.", "sql": "SELECT COUNT(T1.GovernmentForm = 'Republic') - COUNT(T1.GovernmentForm = 'ConstitutionalMonarchy') FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English'", "source_tables": ["countrylanguage", "country"]}, "evidence": "English speaking refers to Language = 'English' ; difference = SUBTRACT(COUNT(Language = 'English' WHERE GovernmentForm = 'Republic'), COUNT(Language = 'English' WHERE GovernmentForm = 'ConstitutionalMonarchy'));"}
{"sample_id": 7853, "db_id": "world", "final": {"question": "What country declared its independence in 1994?", "sql": "SELECT Name FROM Country WHERE IndepYear = 1994", "source_tables": ["country"]}, "evidence": "declared independence in 1994 refers to IndepYear = 1994;"}
{"sample_id": 7854, "db_id": "world", "final": {"question": "List all the countries in Asia.", "sql": "SELECT Name FROM Country WHERE Continent = 'Asia'", "source_tables": ["country"]}, "evidence": "Asia refers to Continent = 'Asia';"}
{"sample_id": 7855, "db_id": "world", "final": {"question": "What country in Asia has the largest gross national product(GNP)?", "sql": "SELECT Name FROM Country WHERE Continent = 'Asia' ORDER BY GNP DESC LIMIT 1", "source_tables": ["country"]}, "evidence": "Asia refers to Continent = 'Asia'; largest gross national product refers to MAX(GNP);"}
{"sample_id": 7856, "db_id": "world", "final": {"question": "How many cities are in the Philippines?", "sql": "SELECT COUNT(ID) FROM City WHERE Name = 'PHL'", "source_tables": ["city"]}, "evidence": "Philippines refers to CountryCode = 'PHL';"}
{"sample_id": 7857, "db_id": "world", "final": {"question": "What is the local name of Ukraine that they are also known for?", "sql": "SELECT LocalName FROM Country WHERE Name = 'Ukraine'", "source_tables": ["country"]}, "evidence": "Ukraine is a name of country;"}
{"sample_id": 7858, "db_id": "world", "final": {"question": "How many countries have Socialistic Republic form of government?", "sql": "SELECT COUNT(Code) FROM Country WHERE GovernmentForm = 'Socialistic Republic'", "source_tables": ["country"]}, "evidence": "Socialistic Republic form of government refers to GovernmentForm = 'Socialistic Republic';"}
{"sample_id": 7859, "db_id": "world", "final": {"question": "What is the official language of China?", "sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'China' AND T2.IsOfficial = 'T'", "source_tables": ["countrylanguage", "country"]}, "evidence": "official language refers to IsOfficial = 'T'; China is a name of country;"}
{"sample_id": 7860, "db_id": "world", "final": {"question": "How many percent of the population of China used Chinese as their language?", "sql": "SELECT T2.Percentage FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'China' AND T2.Language = 'Chinese'", "source_tables": ["countrylanguage", "country"]}, "evidence": "percent refers to Percentage; China is a name of country; use Chinese as their language refers to Language = 'Chinese';"}
{"sample_id": 7861, "db_id": "world", "final": {"question": "What is the form of government that the city of Manila has?", "sql": "SELECT T1.GovernmentForm FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Manila'", "source_tables": ["country", "city"]}, "evidence": "form of government refers to GovernmentForm;"}
{"sample_id": 7862, "db_id": "world", "final": {"question": "What is the capital city of the Philippines?", "sql": "SELECT T1.Capital FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Philipiines'", "source_tables": ["country", "city"]}, "evidence": "capital city refers to Capital; Philippines is a name of country;"}
{"sample_id": 7863, "db_id": "world", "final": {"question": "List all the languages used in Europe.", "sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Europe'", "source_tables": ["countrylanguage", "country"]}, "evidence": "Europe refers to Continent = 'Europe';"}
{"sample_id": 7864, "db_id": "world", "final": {"question": "Who is the head of state of the country where the city of Pyongyang is under?", "sql": "SELECT T1.HeadOfState FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Pyongyang'", "source_tables": ["country", "city"]}, "evidence": ""}
{"sample_id": 7865, "db_id": "world", "final": {"question": "How many unofficial languages are used in Italy?", "sql": "SELECT SUM(CASE WHEN T2.IsOfficial = 'F' THEN 1 ELSE 0 END) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Italy'", "source_tables": ["countrylanguage", "country"]}, "evidence": "unofficial languages refers to IsOfficial = 'F'; Italy is a name of country;"}
{"sample_id": 7866, "db_id": "world", "final": {"question": "What city in Russia has the least population?", "sql": "SELECT T2.Name FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Russian Federation' ORDER BY T2.Population ASC LIMIT 1", "source_tables": ["country", "city"]}, "evidence": "Russia is a name of country; least population refers to MIN(Population);"}
{"sample_id": 7867, "db_id": "world", "final": {"question": "List all the cities in the country where there is high life expectancy at birth.", "sql": "SELECT T2.Name FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode ORDER BY T1.LifeExpectancy DESC LIMIT 1", "source_tables": ["country", "city"]}, "evidence": "high life expectancy at birth refers to MAX(LifeExpectancy);"}
{"sample_id": 7868, "db_id": "world", "final": {"question": "List all the official and unofficial languages used by the country that declared its independence in 1830.", "sql": "SELECT T2.Language, T2.IsOfficial FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.IndepYear = 1830 GROUP BY T2.Language, T2.IsOfficial", "source_tables": ["countrylanguage", "country"]}, "evidence": "official language refers to IsOfficial = 'T'; unofficial language refers to IsOfficial = 'F'; declared independence in 1830 refers to IndepYear = 1830;"}
{"sample_id": 7869, "db_id": "world", "final": {"question": "What is the capital city of the country with largest population?", "sql": "SELECT T1.Capital FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode ORDER BY T1.Population DESC LIMIT 1", "source_tables": ["country", "city"]}, "evidence": "capital city refers to Capital; largest population refers to MAX(Population);"}
{"sample_id": 7870, "db_id": "world", "final": {"question": "List all the countries in the continent of Asia that use English as their unofficial language.", "sql": "SELECT T1.Name FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' AND T2.IsOfficial = 'F' GROUP BY T1.Name", "source_tables": ["countrylanguage", "country"]}, "evidence": "use English as unofficial language refers to Language = 'English' WHERE IsOfficial = 'F';"}
{"sample_id": 7871, "db_id": "world", "final": {"question": "Calculate the average GNP of all countries that use Arabic language.", "sql": "SELECT AVG(T1.GNP) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Arabic'", "source_tables": ["countrylanguage", "country"]}, "evidence": "average GNP = AVG(GNP); use Arabic language refers to Language = 'Arabic';"}
{"sample_id": 7872, "db_id": "world", "final": {"question": "Calculate the percentage of the surface area of all countries that uses Chinese as one of their languages.", "sql": "SELECT CAST(SUM(IIF(T2.Language = 'Chinese', T1.SurfaceArea, 0)) AS REAL) * 100 / SUM(T1.SurfaceArea) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode", "source_tables": ["countrylanguage", "country"]}, "evidence": "percentage = DIVIDE(MULTIPLY(SUM(SurfaceArea WHERE Language = 'Chinese'), SUM(SurfaceArea)), 1.0); Chinese as one of the languages refers to Language = 'Chinese';"}
{"sample_id": 7873, "db_id": "world", "final": {"question": "Which country has the smallest surface area?", "sql": "SELECT Name FROM Country ORDER BY SurfaceArea ASC LIMIT 1", "source_tables": ["country"]}, "evidence": "smallest surface area refers to MIN(smallest surface area);"}
{"sample_id": 7874, "db_id": "world", "final": {"question": "Write down the name of the largest population country.", "sql": "SELECT Name FROM Country ORDER BY Population DESC LIMIT 1", "source_tables": ["country"]}, "evidence": "largest population refers to MAX(Population);"}
{"sample_id": 7875, "db_id": "world", "final": {"question": "What is the language of the smallest population country?", "sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode ORDER BY T1.Population ASC LIMIT 1", "source_tables": ["countrylanguage", "country"]}, "evidence": "smallest population refers to MIN(Population);"}
{"sample_id": 7876, "db_id": "world", "final": {"question": "List down the name of countries whereby English is their official language.", "sql": "SELECT T1.Name FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T'", "source_tables": ["countrylanguage", "country"]}, "evidence": "English is the official language refers to Language = 'English' AND IsOfficial = 'T';"}
{"sample_id": 7877, "db_id": "world", "final": {"question": "List down the official language of the countries which declared independence after 1990,", "sql": "SELECT T1.Name, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.IndepYear > 1990 AND T2.IsOfficial = 'T'", "source_tables": ["countrylanguage", "country"]}, "evidence": "official lanaguage refers to IsOfficial = 'T'; declared independence after 1990 refers to IndepYear > 1990;"}
{"sample_id": 7918, "db_id": "music_platform_2", "final": {"question": "How many podcasts are there in the category which has the most podcasts?", "sql": "SELECT COUNT(podcast_id) FROM categories WHERE category = ( SELECT category FROM categories GROUP BY category ORDER BY COUNT(podcast_id) DESC LIMIT 1 )", "source_tables": ["categories"]}, "evidence": "category which has the most podcast refers to the category with Max(count(podcast_id))"}
{"sample_id": 7919, "db_id": "music_platform_2", "final": {"question": "What is the percentage of the podcast that are categorized in four or more categories?", "sql": "SELECT COUNT(T1.podcast_id) FROM ( SELECT podcast_id FROM categories GROUP BY podcast_id HAVING COUNT(category) >= 4 ) AS T1", "source_tables": ["categories"]}, "evidence": "categorized in 4 or more refers to Count(category) > 4; percentage = Divide(Count(podcast_id(count(category) > 4)), Count(podcast_id)) * 100"}
{"sample_id": 7920, "db_id": "music_platform_2", "final": {"question": "Provide the itunes id and url for podcast titled 'Brown Suga Diaries'.", "sql": "SELECT itunes_id, itunes_url FROM podcasts WHERE title = 'Brown Suga Diaries'", "source_tables": ["podcasts"]}, "evidence": "url refers to itunes_url; 'Brown Suga Diaries' is the title of podcast"}
{"sample_id": 7921, "db_id": "music_platform_2", "final": {"question": "List all podcast with its itunes url for all title containing the word 'Dream'.", "sql": "SELECT itunes_url FROM podcasts WHERE title LIKE '%Dream%' GROUP BY itunes_url", "source_tables": ["podcasts"]}, "evidence": "containing the word 'Dream' refers to title LIKE '%Dream%'"}
{"sample_id": 7922, "db_id": "music_platform_2", "final": {"question": "Name all the categories for podcast titled 'I Heart My Life Show'.", "sql": "SELECT T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'I Heart My Life Show'", "source_tables": ["podcasts", "categories"]}, "evidence": "'I Hearty My Life Show' is the title of podcast"}
{"sample_id": 7923, "db_id": "music_platform_2", "final": {"question": "List all the podcast title and its itunes url under the 'society-culture' category.", "sql": "SELECT T2.title, T2.itunes_url FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'society-culture'", "source_tables": ["podcasts", "categories"]}, "evidence": ""}
{"sample_id": 7924, "db_id": "music_platform_2", "final": {"question": "How many people rated 5 for the podcast which title contains the word 'spoiler' under the 'art' category '?", "sql": "SELECT COUNT(T3.podcast_id) FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T2.title LIKE '%spoilers%' AND T1.category = 'arts' AND T3.rating = 5", "source_tables": ["podcasts", "categories", "reviews"]}, "evidence": "rated 5 refers to rating = 5; contain the word 'spoilers' refers to title like '%spoilers%'; 'art' is the category name;"}
{"sample_id": 7925, "db_id": "music_platform_2", "final": {"question": "List the authors who created review for podcast titled 'Pop Rocket' in 2016 with rating less than 5.", "sql": "SELECT T2.author_id FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Pop Rocket' AND T2.created_at LIKE '2016-%' AND T2.rating < 5", "source_tables": ["podcasts", "reviews"]}, "evidence": "Pop Rocket' is the title of podcast; in 2016 refers to created_at like'2016%'; rating less than 5 refers to rating < 5; author refers to author_id"}
{"sample_id": 7926, "db_id": "music_platform_2", "final": {"question": "Name all the podcast title and its category with average rating of more than 3.0.", "sql": "SELECT T2.title, T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id GROUP BY T3.podcast_id HAVING AVG(T3.rating) > 3", "source_tables": ["podcasts", "categories", "reviews"]}, "evidence": "average rating of more than 3.0 refers to avg(rating) > 3.0"}
{"sample_id": 7927, "db_id": "music_platform_2", "final": {"question": "List all content reviewed for podcast with the best rating under the 'fiction' category. State the podcast title.", "sql": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T3.rating = 5 AND T1.category = 'fiction'", "source_tables": ["podcasts", "categories", "reviews"]}, "evidence": "'fiction' is the category name; best rating refers to rating = 5; content reviewed refers to content"}
{"sample_id": 7928, "db_id": "music_platform_2", "final": {"question": "State the podcast title, content review and rating for all reviews with titled 'Love it!'", "sql": "SELECT DISTINCT T1.title, T2.content, T2.rating FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'Love it!'", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"Love it!\" is the title of review; content reviewed refers to content"}
{"sample_id": 7929, "db_id": "music_platform_2", "final": {"question": "Find the author, rating and review creation date of review for podcast title 'In The Thick'.", "sql": "SELECT T2.author_id, T2.rating, T2.created_at FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'In The Thick' GROUP BY T2.author_id, T2.rating, T2.created_at", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"In The Thick\" is the title of podcast; author refers to author_id; creation date refers to created_at"}
{"sample_id": 7930, "db_id": "music_platform_2", "final": {"question": "Which podcast was reviewed the latest? State the date of creation, podcast tile and rating.", "sql": "SELECT T1.podcast_id, T2.created_at, T2.title, T2.rating FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id ORDER BY T2.created_at DESC LIMIT 1", "source_tables": ["podcasts", "reviews"]}, "evidence": "latest refers to Max(created_at); date of creation refers to created_at"}
{"sample_id": 7931, "db_id": "music_platform_2", "final": {"question": "Name the podcast title, rating and review content created by '76A4C24B6038145'.", "sql": "SELECT T2.title, T2.rating, T2.content FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.author_id = '76A4C24B6038145'", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"76A4C24B6038145\" is author_id; review content refers to content"}
{"sample_id": 7932, "db_id": "music_platform_2", "final": {"question": "For all reviews with the worst rating, state the podcast title as well as the review title and content.", "sql": "SELECT DISTINCT T1.title, T2.title, T2.content FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.rating = 1", "source_tables": ["podcasts", "reviews"]}, "evidence": "worst rating refers to rating = 1"}
{"sample_id": 7933, "db_id": "music_platform_2", "final": {"question": "List all reviews created in May 2019. State the title of podcast and review rating.", "sql": "SELECT DISTINCT T1.title, T2.rating FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.created_at LIKE '2019-05-%'", "source_tables": ["podcasts", "reviews"]}, "evidence": "created in May 2019 refers to created_at like '2019-05%'"}
{"sample_id": 7934, "db_id": "music_platform_2", "final": {"question": "What is the average rating for the podcast that is most reviewed?", "sql": "SELECT AVG(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id GROUP BY T1.podcast_id ORDER BY COUNT(T2.content) DESC LIMIT 1", "source_tables": ["podcasts", "reviews"]}, "evidence": "most reviewed refers to Max(Count(reviews.podcast_id)); average rating refers to AVG (rating)"}
{"sample_id": 7935, "db_id": "music_platform_2", "final": {"question": "Which category does the podcast titled 'SciFi Tech Talk' belong to?", "sql": "SELECT T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'SciFi Tech Talk'", "source_tables": ["podcasts", "categories"]}, "evidence": "podcast titled 'SciFi Tech Talk' refers to title = 'SciFi Tech Talk'"}
{"sample_id": 7936, "db_id": "music_platform_2", "final": {"question": "What is the name of the podcast in which a commentor left a comment with the title 'Long time listener, calling it quits?' Include the URL of the podcast as well.", "sql": "SELECT podcast_id, itunes_url FROM podcasts WHERE podcast_id = ( SELECT podcast_id FROM reviews WHERE title = 'Long time listener, calling it quits' )", "source_tables": ["podcasts", "reviews"]}, "evidence": "comment refers to review; 'Long time listener, calling it quits' is the title of review;\u00a0 name of the podcast refers to title of podcast; URL refers to itunes_url"}
{"sample_id": 7937, "db_id": "music_platform_2", "final": {"question": "List all the names of podcasts under the 'true crime' category.", "sql": "SELECT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'true-crime'", "source_tables": ["podcasts", "categories"]}, "evidence": "name of the podcast refers to title of the podcast"}
{"sample_id": 7938, "db_id": "music_platform_2", "final": {"question": "Write all the review content belonging to StormCast: The Official Warhammer Age of Sigmar Podcast.", "sql": "SELECT content FROM reviews WHERE podcast_id = ( SELECT podcast_id FROM podcasts WHERE title = 'StormCast: The Official Warhammer Age of Sigmar Podcast' )", "source_tables": ["podcasts", "reviews"]}, "evidence": "review content refers to content; 'StormCast: The Official Warhammer Age of Sigmar Podcast' is the title of podcast;"}
{"sample_id": 7939, "db_id": "music_platform_2", "final": {"question": "Write all the review titles and the contents belonging to the podcast 'More Stupider: A 90-Day Fiance Podcast' with a review rating of 1.", "sql": "SELECT title, content FROM reviews WHERE podcast_id = ( SELECT podcast_id FROM podcasts WHERE title = 'More Stupider: A 90-Day Fiance Podcast' ) AND rating = 1", "source_tables": ["podcasts", "reviews"]}, "evidence": "podcast 'More Stupider: A 90-Day Fiance Podcast'\u00a0 refers to title = 'More Stupider: A 90-Day Fiance Podcast'; rating of 1 refers to rating = 1"}
{"sample_id": 7940, "db_id": "music_platform_2", "final": {"question": "How many reviews does 'LifeAfter/The Message' have which were rated below 3?", "sql": "SELECT COUNT(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'LifeAfter/The Message' AND T2.rating <= 3", "source_tables": ["podcasts", "reviews"]}, "evidence": "LifeAfter/The Message' is the title of podcast; rated below 3 refers to rating < 3"}
{"sample_id": 7941, "db_id": "music_platform_2", "final": {"question": "The 'More Stupider: A 90-Day Fiance Podcast' belongs to which category and what is the average rating of the podcast?", "sql": "SELECT AVG(T3.rating) FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T2.title = 'More Stupider: A 90-Day Fiance Podcast'", "source_tables": ["podcasts", "categories", "reviews"]}, "evidence": "More Stupider: A 90-Day Fiance Podcast' is the title of podcast; average rating = Divide (Sum(rating), Count(rating))"}
{"sample_id": 7942, "db_id": "music_platform_2", "final": {"question": "Of the arts-books and arts-design categories, which one has more podcasts and what is the numerical difference between them?", "sql": "SELECT ( SELECT category FROM categories WHERE category = 'arts-books' OR category = 'arts-design' GROUP BY category ORDER BY COUNT(podcast_id) DESC LIMIT 1 ) 'has more podcasts' , ( SELECT SUM(CASE WHEN category = 'arts-books' THEN 1 ELSE 0 END) - SUM(CASE WHEN category = 'arts-design' THEN 1 ELSE 0 END) FROM categories ) 'differenct BETWEEN arts-books and arts-design'", "source_tables": ["categories"]}, "evidence": "arts-books' and 'arts-design' are category; numerical difference = Subtract(Count(podcast_id(category = 'arts-books')), Count(podcast_id(category = 'arts-design'))); one has much more podcast refers to Max(Count(podcast_id))"}
{"sample_id": 7943, "db_id": "music_platform_2", "final": {"question": "How many total reviews runned at in June 2022 were added to the podcasts?", "sql": "SELECT SUM(reviews_added) FROM runs WHERE run_at LIKE '2022-06-%'", "source_tables": ["runs"]}, "evidence": "run at in June 2022 refers to run_at BETWEEN '2022-06-01 00:00:00' and '2022-06-30 23:59:59'; reviews refers to review_added"}
{"sample_id": 7944, "db_id": "music_platform_2", "final": {"question": "How many podcast reviews with a rating of 3 were created during the first quarter of 2015?", "sql": "SELECT COUNT(podcast_id) FROM reviews WHERE rating = 3 AND created_at BETWEEN '2015-01-01T00:00:00-07:00' AND '2015-03-31T23:59:59-07:00'", "source_tables": ["reviews"]}, "evidence": "rating of 3 refers to rating = 3; created during the first quarter of 2015 refers to created_at BETWEEN'2015-01-01T00:00:00-07:00' and '2015-03-31T23:59:59-07:00'"}
{"sample_id": 7945, "db_id": "music_platform_2", "final": {"question": "Calculate the percentage of podcasts in the fiction-science-fiction category.", "sql": "SELECT CAST(SUM(CASE WHEN category = 'fiction-science-fiction' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(podcast_id) OR '%' 'percentage' FROM categories", "source_tables": ["categories"]}, "evidence": "percentage = \u00a0 Divide (Count(podcast_id(category = 'fiction-science-fiction')), Count(podcast_id)) * 100"}
{"sample_id": 7946, "db_id": "music_platform_2", "final": {"question": "What is the average rating of all the podcasts with reviews created in 2019?", "sql": "SELECT AVG(rating) FROM reviews WHERE created_at BETWEEN '2019-01-01T00:00:00-07:00' AND '2019-12-31T23:59:59-07:00'", "source_tables": ["reviews"]}, "evidence": "created in 2019 refers to created_at BETWEEN '2019-01-01T00:00:00' and '2019-12-31T23:59:59'; average rating\u00a0 = Divide (Sum(rating), Count(podcast_id))"}
{"sample_id": 7947, "db_id": "music_platform_2", "final": {"question": "What is the percentage of reviews added each year of the total reviews added?", "sql": "SELECT CAST((SUM(CASE WHEN run_at LIKE '2022-%' THEN reviews_added ELSE 0 END) - SUM(CASE WHEN run_at LIKE '2021-%' THEN reviews_added ELSE 0 END)) AS REAL) * 100 / SUM(reviews_added) OR '%' 'percentage' FROM runs", "source_tables": ["runs"]}, "evidence": "review added each year refers to runs_at like '2021%' and runs_at like '2022%'; percentage for 2021 = Divide (Sum(reviews_added(runs_at like '2021%)), Sum(reviews_added)) * 100; percentage of 2022 = Divide (Sum(reviews_added(runs_at like '2022%')), Sum(reviews_added)) * 100"}
{"sample_id": 7948, "db_id": "music_platform_2", "final": {"question": "Indicates the title of all podcasts in the fiction category.", "sql": "SELECT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'fiction'", "source_tables": ["podcasts", "categories"]}, "evidence": ""}
{"sample_id": 7949, "db_id": "music_platform_2", "final": {"question": "What is the rating and category of the podcast entitled Sitcomadon?", "sql": "SELECT DISTINCT T3.rating, T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T2.title = 'Sitcomadon'", "source_tables": ["podcasts", "categories", "reviews"]}, "evidence": "entitled refers to title; 'Sitcomadon' is the title of podcast"}
{"sample_id": 7950, "db_id": "music_platform_2", "final": {"question": "Indicate the id of the reviewer whose itunes id is 1516665400.", "sql": "SELECT T2.author_id FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.itunes_id = 1516665400", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"151665400\" is itunes_id; id of reviewer refers to author_id"}
{"sample_id": 7951, "db_id": "music_platform_2", "final": {"question": "What are the titles of the podcasts whose reviews were created between 2018-08-22T11:53:16-07:00 and 2018-11-20T11:14:20-07:00?", "sql": "SELECT DISTINCT T1.title FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.created_at BETWEEN '2018-08-22T11:53:16-07:00' AND '2018-11-20T11:14:20-07:00'", "source_tables": ["podcasts", "reviews"]}, "evidence": "created between 2018-08-22T11:53:16-07:00 and 2018-11-20T11:14:20-07:00 refers to created at BETWEEN '2018-08-22T11:53:16-07:00' and '2018-11-20T11:14:20-07:00'"}
{"sample_id": 7952, "db_id": "music_platform_2", "final": {"question": "To which categories do the podcasts of the reviewer whose id is EFB34EAC8E9397C belong?", "sql": "SELECT DISTINCT T1.category FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.author_id = 'EFB34EAC8E9397C'", "source_tables": ["categories", "reviews"]}, "evidence": "reviewer whose id is EFB34EAC8E9397C refers to author_id = 'EFB34EAC8E9397C'"}
{"sample_id": 7953, "db_id": "music_platform_2", "final": {"question": "Indicate the slug and the itunes url of the podcast whose review content was written Can't stop listening.", "sql": "SELECT slug, itunes_url FROM podcasts WHERE podcast_id IN ( SELECT podcast_id FROM reviews WHERE content = 'Can''t stop listening' )", "source_tables": ["podcasts", "reviews"]}, "evidence": "review content was written Can't stop listening refers to content = 'Can't stop listening'"}
{"sample_id": 7954, "db_id": "music_platform_2", "final": {"question": "What dates were the Don't Lie To Your Life Coach podcast reviews created?", "sql": "SELECT created_at FROM reviews WHERE podcast_id = ( SELECT podcast_id FROM podcasts WHERE title = 'Don''t Lie To Your Life Coach' )", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"Don't Lie To Your Life Coach\" refers to title of podcast; date refers to created_at"}
{"sample_id": 7955, "db_id": "music_platform_2", "final": {"question": "In how many categories were podcast reviews created in the last six months of 2016? List them.", "sql": "SELECT COUNT(DISTINCT T1.category) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.created_at BETWEEN '2016-07-01T00:00:00-07:00' AND '2016-12-31T23:59:59-07:00'", "source_tables": ["categories", "reviews"]}, "evidence": "created in last six months of 2016 refers to created_at BETWEEN '2016-07-01T00:00:00-07:00' and '2016-12-31T23:59:59-07:00'"}
{"sample_id": 7956, "db_id": "music_platform_2", "final": {"question": "Calculate the average rating of the true crime category.", "sql": "SELECT AVG(T2.rating) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'true-crime'", "source_tables": ["categories", "reviews"]}, "evidence": "average rating = Divide (Sum(rating(category = 'true-crime')), Count(podcast_id(category = 'true-crime')))"}
{"sample_id": 7957, "db_id": "music_platform_2", "final": {"question": "List the titles of the art category.", "sql": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'arts'", "source_tables": ["categories", "reviews"]}, "evidence": "art category refers to category = 'arts'"}
{"sample_id": 7958, "db_id": "music_platform_2", "final": {"question": "What is the average rating of all the podcasts in category art?", "sql": "SELECT AVG(T2.rating) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'arts'", "source_tables": ["categories", "reviews"]}, "evidence": "category art refers to category = 'arts'; average rating = Divide (Sum (rating), Count (podcast_id))"}
{"sample_id": 7987, "db_id": "university", "final": {"question": "How many universities have at least 80,000 students in the year 2011?", "sql": "SELECT COUNT(*) FROM university_year WHERE num_students > 80000 AND year = 2011", "source_tables": ["university_year"]}, "evidence": "have at least 80,000 students refers to num_students > 8000; year = 2011"}
{"sample_id": 7988, "db_id": "university", "final": {"question": "What is the ranking system ID of the award criteria?", "sql": "SELECT ranking_system_id FROM ranking_criteria WHERE criteria_name = 'Award'", "source_tables": ["ranking_criteria"]}, "evidence": "award criteria refers to criteria_name = 'Award';"}
{"sample_id": 7989, "db_id": "university", "final": {"question": "How many state universities are there?", "sql": "SELECT COUNT(*) FROM university WHERE university_name LIKE '%State%'", "source_tables": ["university"]}, "evidence": "state universities refers to university_name LIKE '%State%';"}
{"sample_id": 7990, "db_id": "university", "final": {"question": "What is the student staff ratio of the university with the highest student staff ratio of all time?", "sql": "SELECT MAX(student_staff_ratio) FROM university_year WHERE student_staff_ratio = ( SELECT MAX(student_staff_ratio) FROM university_year )", "source_tables": ["university_year"]}, "evidence": "highest student staff ratio refers to max(student_staff_ratio)"}
{"sample_id": 7991, "db_id": "university", "final": {"question": "How many criteria belong to ranking system ID 3?", "sql": "SELECT COUNT(id) FROM ranking_criteria WHERE ranking_system_id = 3", "source_tables": ["ranking_criteria"]}, "evidence": ""}
{"sample_id": 7992, "db_id": "university", "final": {"question": "What is the ID of the university that has only 1% of international students between 2011 to 2015?", "sql": "SELECT university_id FROM university_year WHERE pct_international_students = 1 AND year BETWEEN 2011 AND 2015", "source_tables": ["university_year"]}, "evidence": "has only 1% of international students refers to pct_international_students = 1; between 2011 to 2015 refers to year BETWEEN 2011 AND 2015; ID of university refers to university_id"}
{"sample_id": 7993, "db_id": "university", "final": {"question": "Give the name of the country that has the most universities.", "sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id GROUP BY T2.country_name ORDER BY COUNT(T1.university_name) DESC LIMIT 1", "source_tables": ["country", "university"]}, "evidence": "has the most universities refers to MAX(COUNT(id)); name of the country refers to country_name"}
{"sample_id": 7994, "db_id": "university", "final": {"question": "What is the name of the university that had the highest number of international students for 6 consecutive years?", "sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id ORDER BY T1.pct_international_students DESC LIMIT 1", "source_tables": ["university", "university_year"]}, "evidence": "had the highest number of international students refers to max(pct_international_students); for 6 consecutive years refers to count(SUBTRACT(year, rm)) > = 6; name of university refers to university_name;"}
{"sample_id": 7995, "db_id": "university", "final": {"question": "In 2014, what is the name of the university which was considered a leader in the publications rank?", "sql": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Publications Rank' AND T2.year = 2014 AND T1.id = 17 ORDER BY T2.score DESC LIMIT 1", "source_tables": ["university_ranking_year", "university", "ranking_criteria"]}, "evidence": "In 2014 refers to year = 2014; leader refers to MAX(score); in the publications rank refers to criteria_name = 'Publications Rank'; name of university refers to university_name;"}
{"sample_id": 7996, "db_id": "university", "final": {"question": "What is the name of the university that has the lowest number of students of all time?", "sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id ORDER BY T1.num_students LIMIT 1", "source_tables": ["university", "university_year"]}, "evidence": "has the lowest number of students refers to min(num_students); name of the university refers to university_name"}
{"sample_id": 7997, "db_id": "university", "final": {"question": "How many universities are there in the United States of America?", "sql": "SELECT COUNT(*) FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'United States of America'", "source_tables": ["country", "university"]}, "evidence": "in the United States of America refers to country_name = 'United States of America';"}
{"sample_id": 7998, "db_id": "university", "final": {"question": "In 2016, what is the name of the university in Australia with the highest score in Citations criteria?", "sql": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id INNER JOIN country AS T4 ON T4.id = T3.country_id WHERE T1.criteria_name = 'Citations' AND T2.year = 2016 AND T1.id = 4 AND T4.country_name = 'Australia' ORDER BY T2.score DESC LIMIT 1", "source_tables": ["university_ranking_year", "country", "university", "ranking_criteria"]}, "evidence": "In 2016 refers to year = 2016; name of the university refers to university_name; in Australia refers to country_name = 'Australia'; in Citations criteria refers to criteria_name = 'Citations'; highest score refers to MAX(score)"}
{"sample_id": 7999, "db_id": "university", "final": {"question": "How many universities scored 0 in Awards between 2005 to 2015?", "sql": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id WHERE T1.criteria_name = 'Award' AND T2.year BETWEEN 2005 AND 2015 AND T2.score = 0", "source_tables": ["university_ranking_year", "ranking_criteria"]}, "evidence": "between 2005 to 2015 refers to year BETWEEN 2005 AND 2015; scored 0 refers to score = 0; in Awards refers to criteria_name = 'Award'"}
{"sample_id": 8000, "db_id": "university", "final": {"question": "Which country is the University of Oxford located?", "sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE university_name = 'University of Oxford'", "source_tables": ["country", "university"]}, "evidence": "University of Oxford refers to university_name = 'University of Oxford'; which country refers to country_name"}
{"sample_id": 8001, "db_id": "university", "final": {"question": "How many times did the Yale University achieve a score of no less than 10 in the Quality of Education Rank?", "sql": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'Yale University' AND T2.score >= 10 AND T1.criteria_name = 'Quality of Education Rank'", "source_tables": ["university_ranking_year", "university", "ranking_criteria"]}, "evidence": "Yale University refers to university_name = 'Yale University'; a score of no less than 10 refers to score > = 10; in the Quality of Education Rank refers to criteria_name = 'Quality of Education Rank'"}
{"sample_id": 8002, "db_id": "university", "final": {"question": "What are the names of the criteria under Center for World University Rankings?", "sql": "SELECT T2.criteria_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T1.system_name = 'Center for World University Rankings'", "source_tables": ["ranking_system", "ranking_criteria"]}, "evidence": "names of the criteria refers to criteria_name; under Center for World University Rankings refers to system_name = 'Center for World University Rankings';"}
{"sample_id": 8003, "db_id": "university", "final": {"question": "List the names of all the universities that have no less than 50,000 students in the year 2012.", "sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.num_students > 50000 AND T1.year = 2012", "source_tables": ["university", "university_year"]}, "evidence": "have no less than 50,000 students refers to num_students > 50000; name of university refers to university_name;"}
{"sample_id": 8004, "db_id": "university", "final": {"question": "Between 2011 to 2016, in which countries can you find the universities where at least 50% of its students are international students?", "sql": "SELECT DISTINCT T3.country_name FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T2.pct_international_students > 50 AND T2.year BETWEEN 2011 AND 2016", "source_tables": ["country", "university", "university_year"]}, "evidence": "Between 2011 to 2016 refers to year BETWEEN 2011 AND 2016; at least 50% of its students are international students refers to pct_international_students > 50; which country refers to country_name"}
{"sample_id": 8005, "db_id": "university", "final": {"question": "How many universities have no less than 20,000 female students in 2016? Identify how many of the said universities are located in the United States of America.", "sql": "SELECT COUNT(*) , SUM(CASE WHEN T3.country_name = 'United States of America' THEN 1 ELSE 0 END) AS nums_in_usa FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T2.year = 2016 AND T2.num_students * T2.pct_female_students / 100 > 20000", "source_tables": ["country", "university", "university_year"]}, "evidence": "have no less than 20,000 female students refers to DIVIDE(MULTIPLY(pct_female_students, num_students), 100) > 20000; in 2016 refers to year = 2016; located in the United States of America refers to country_name = 'United States of America'"}
{"sample_id": 8006, "db_id": "university", "final": {"question": "What are the names of the top 5 universities with the highest number of international students?", "sql": "SELECT DISTINCT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id ORDER BY (CAST(T1.num_students * T1.pct_international_students AS REAL) / 100) DESC LIMIT 5", "source_tables": ["university", "university_year"]}, "evidence": "highest number of international students refers to MAX(DIVIDE(MULTIPLY(num_students, pct_international_students), 100)); name of university refers to university_name;"}
{"sample_id": 8007, "db_id": "university", "final": {"question": "What is the university ID of the university with the largest student staff ratio?", "sql": "SELECT university_id FROM university_year ORDER BY student_staff_ratio DESC LIMIT 1", "source_tables": ["university_year"]}, "evidence": "the largest student staff ratio refers to max(student_staff_ratio)"}
{"sample_id": 8008, "db_id": "university", "final": {"question": "Give the year where a university had the lowest number of students.", "sql": "SELECT year FROM university_year ORDER BY num_students ASC LIMIT 1", "source_tables": ["university_year"]}, "evidence": "had the lowest number of students refers to MIN(num_students)"}
{"sample_id": 8009, "db_id": "university", "final": {"question": "Compute the average percentage of female students.", "sql": "SELECT AVG(pct_female_students) FROM university_year", "source_tables": ["university_year"]}, "evidence": "average percentage of female students refers to avg(pct_female_students)"}
{"sample_id": 8010, "db_id": "university", "final": {"question": "Provide the number of international students and number of students in 2013 in university ID 20.", "sql": "SELECT pct_international_students * num_students, num_students FROM university_year WHERE year = 2013 AND university_id = 20", "source_tables": ["university_year"]}, "evidence": "number of international students refers to DIVIDE(MULTIPLY(pct_international_students, num_students), 100); in 2013 refers to year = 2013"}
{"sample_id": 8011, "db_id": "university", "final": {"question": "What is the university ID of Harvard University?", "sql": "SELECT id FROM university WHERE university_name = 'Harvard University'", "source_tables": ["university"]}, "evidence": "of Harvard University refers to university_name = 'Harvard University';"}
{"sample_id": 8012, "db_id": "university", "final": {"question": "List the university ID of the university that scored 100 in 2011.", "sql": "SELECT university_id FROM university_ranking_year WHERE score = 100 AND year = 2011", "source_tables": ["university_ranking_year"]}, "evidence": "in 2011 refers to year = 2011; score = 100"}
{"sample_id": 8013, "db_id": "university", "final": {"question": "Provide the ranking system of the ranking criteria named Quality of Education Rank.", "sql": "SELECT T1.system_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T2.criteria_name = 'Quality of Education Rank'", "source_tables": ["ranking_system", "ranking_criteria"]}, "evidence": "criteria named Quality of Education Rank refers to criteria_name = 'Quality of Education Rank'; ranking system refers to system_name;"}
{"sample_id": 8014, "db_id": "university", "final": {"question": "What is the student staff ratio of Harvard University in 2012?", "sql": "SELECT T1.student_staff_ratio FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Harvard University' AND T1.year = 2012", "source_tables": ["university", "university_year"]}, "evidence": "Harvard University refers to university_name = 'Harvard University'; in 2012 refers to year = 2012"}
{"sample_id": 8015, "db_id": "university", "final": {"question": "Give the location of the university ID 112.", "sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.id = 112", "source_tables": ["country", "university"]}, "evidence": "location refers to country_name"}
{"sample_id": 8016, "db_id": "university", "final": {"question": "Calculate the total number of students in universities located in Sweden.", "sql": "SELECT SUM(T2.num_students) FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'Sweden'", "source_tables": ["country", "university", "university_year"]}, "evidence": "located in Sweden refers to country_name = 'Sweden'; number of students refers to num_students"}
{"sample_id": 8017, "db_id": "university", "final": {"question": "What is the ranking criteria ID of Brown University in 2014?", "sql": "SELECT T1.ranking_criteria_id FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Brown University' AND T1.year = 2014", "source_tables": ["university_ranking_year", "university"]}, "evidence": "Brown University refers to university_name = 'Brown University'; in 2014 refers to year = 2014"}
{"sample_id": 8018, "db_id": "university", "final": {"question": "List the name of universities located in Spain.", "sql": "SELECT T1.university_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Spain'", "source_tables": ["country", "university"]}, "evidence": "name of universities refers to university_name; located in Spain refers to country_name = 'Spain';"}
{"sample_id": 8019, "db_id": "university", "final": {"question": "What is the criteria name of the university ID 32 in 2015?", "sql": "SELECT T1.criteria_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id WHERE T2.university_id = 32 AND T2.year = 2015", "source_tables": ["university_ranking_year", "ranking_criteria"]}, "evidence": "in 2015 refers to year = 2015"}
{"sample_id": 8020, "db_id": "university", "final": {"question": "Compute the average score of the university located in Brazil.", "sql": "SELECT AVG(T2.score) FROM university AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'Brazil'", "source_tables": ["university_ranking_year", "country", "university"]}, "evidence": "average score refers to avg(score); located in Brazil refers to country_name = 'Brazil';"}
{"sample_id": 8021, "db_id": "university", "final": {"question": "In which country does the most populated university in 2014 located ?", "sql": "SELECT T2.country_id FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2014 ORDER BY T1.num_students DESC LIMIT 1", "source_tables": ["university", "university_year"]}, "evidence": "the most populated university refers to max(num_students); in 2014 refers to year = 2014"}
{"sample_id": 8022, "db_id": "university", "final": {"question": "Give the score and number of international students in university ID 100 in 2015.", "sql": "SELECT CAST(T1.num_students * T1.pct_international_students AS REAL) / 100, T2.score FROM university_year AS T1 INNER JOIN university_ranking_year AS T2 ON T1.university_id = T2.university_id WHERE T2.year = 2015 AND T1.university_id = 100", "source_tables": ["university_ranking_year", "university_year"]}, "evidence": "number of international students refers to DIVIDE(MULTIPLY(num_students, pct_international_students), 100); in 2015 refers to year = 2015"}
{"sample_id": 8023, "db_id": "university", "final": {"question": "What is the student population of the university that scored 98 in 2013?", "sql": "SELECT SUM(T1.num_students) FROM university_year AS T1 INNER JOIN university_ranking_year AS T2 ON T1.university_id = T2.university_id WHERE T2.score = 98 AND T1.year = 2013", "source_tables": ["university_ranking_year", "university_year"]}, "evidence": "student population refers to num_students; in 2013 refers to year = 2013"}
{"sample_id": 8024, "db_id": "university", "final": {"question": "List the criteria names under the ranking system called Center for World University Ranking.", "sql": "SELECT T2.criteria_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T1.system_name = 'Center for World University Rankings'", "source_tables": ["ranking_system", "ranking_criteria"]}, "evidence": "ranking system called Center for World University Ranking refers to system_name = 'Center for World University Rankings';"}
{"sample_id": 8025, "db_id": "university", "final": {"question": "Provide the country name of universities with the number of students greater than 98% of the average student population of all universities in 2013.", "sql": "SELECT DISTINCT T3.country_name FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T2.year = 2013 AND T2.num_students * 100 > ( SELECT AVG(num_students) FROM university_year ) * 98", "source_tables": ["country", "university", "university_year"]}, "evidence": "number of students greater than 98% of the average student population of all universities refers to num_students >\u00a0 MULTPLY(num_students, 0.98); in 2013 refers to year = 2013"}
{"sample_id": 8026, "db_id": "university", "final": {"question": "Among universities that score below 80 in 2015, what is the percentage of international students?", "sql": "SELECT SUM(CAST(T1.num_students * T1.pct_international_students AS REAL) / 100) / COUNT(*) * 100 FROM university_year AS T1 INNER JOIN university_ranking_year AS T2 ON T1.university_id = T2.university_id WHERE T2.score < 80 AND T1.year = 2015", "source_tables": ["university_ranking_year", "university_year"]}, "evidence": "score below 80 refers to score < 80; in 2015 refers to year 2015; percentage of international students refers to DIVIDE(SUM(DIVIDE(MULTIPLY(num_students, pct_international_students), 100)), SUM(num_students))"}
{"sample_id": 8027, "db_id": "university", "final": {"question": "How many students attended universities were there in 2011?", "sql": "SELECT SUM(num_students) FROM university_year WHERE year = 2011", "source_tables": ["university_year"]}, "evidence": "in 2011 refers to year = 2011;"}
{"sample_id": 8028, "db_id": "university", "final": {"question": "Among all universities, how many female students were there in 2011?", "sql": "SELECT SUM(CAST(num_students * pct_female_students AS REAL) / 100) FROM university_year WHERE year = 2011", "source_tables": ["university_year"]}, "evidence": "in 2011 refers to year = 2011; female students refers to SUM(DIVIDE(MULTIPLY(num_students, pct_female_students), 100))"}
{"sample_id": 8029, "db_id": "university", "final": {"question": "What is the student staff ratio at the university with the greatest student staff ratio of all time?", "sql": "SELECT MAX(student_staff_ratio) FROM university_year ORDER BY student_staff_ratio DESC LIMIT 1", "source_tables": ["university_year"]}, "evidence": "greatest student staff ratio of all time refers to max(student_staff_ratio)"}
{"sample_id": 8030, "db_id": "university", "final": {"question": "What is the university ID with the most students in 2011?", "sql": "SELECT university_id FROM university_year WHERE year = 2011 ORDER BY num_students DESC LIMIT 1", "source_tables": ["university_year"]}, "evidence": "most students refers to MAX(num_students), in 2011 refers to year = 2011"}
{"sample_id": 8031, "db_id": "university", "final": {"question": "How many institutions with over 50,000 students in 2011 had a percentage of oversea students of more than 10%?", "sql": "SELECT COUNT(*) FROM university_year WHERE year = 2011 AND num_students > 50000 AND pct_international_students > 10", "source_tables": ["university_year"]}, "evidence": "institutions with over 50,000 students refers to num_students > 50000; in 2011 refers to year = 2011; percentage of oversea students of more than 10% refers to pct_international_students > 10;"}
{"sample_id": 8032, "db_id": "university", "final": {"question": "Provide the ID of the university with the highest percentage of female students in 2012.", "sql": "SELECT university_id FROM university_year WHERE year = 2012 ORDER BY pct_female_students DESC LIMIT 1", "source_tables": ["university_year"]}, "evidence": "in 2012 refers to year = 2012; highest percentage of female students\u00a0 refers to MAX(pct_female_students); ID of the university refers to university_id"}
{"sample_id": 8033, "db_id": "university", "final": {"question": "Which university had the highest reputation in 2012?", "sql": "SELECT T2.university_name FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2012 ORDER BY T1.score DESC LIMIT 1", "source_tables": ["university_ranking_year", "university"]}, "evidence": "had the highest reputation refers to MAX(score), in 2012 refers to year = 2012; which university refers to university_name;"}
{"sample_id": 8034, "db_id": "university", "final": {"question": "Name the university that had the most students in 2011.", "sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 ORDER BY T1.num_students DESC LIMIT 1", "source_tables": ["university", "university_year"]}, "evidence": "in 2011 refers to year = 2011; had the most students refers to MAX(num_students); name of university refers to university_name;"}
{"sample_id": 8035, "db_id": "university", "final": {"question": "Indicate the university's name with the highest ranking score in Teaching.", "sql": "SELECT T1.university_name FROM university AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.university_id INNER JOIN ranking_criteria AS T3 ON T3.id = T2.ranking_criteria_id WHERE T3.criteria_name = 'Teaching' ORDER BY T2.score DESC LIMIT 1", "source_tables": ["university_ranking_year", "university", "ranking_criteria"]}, "evidence": "university's name refers to university_name; highest ranking score refers to MAX(score); in Teaching refers to criteria_name = 'Teaching'"}
{"sample_id": 8036, "db_id": "university", "final": {"question": "What is the percentage of Harvard university's international students in 2011?", "sql": "SELECT T1.pct_international_students FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T2.university_name = 'Harvard University'", "source_tables": ["university", "university_year"]}, "evidence": "Harvard university's refers to university_name = 'Harvard University'; in 2011 refers to year = 2011; percentage of Harvard university's international students refers to pct_international_students"}
{"sample_id": 8037, "db_id": "university", "final": {"question": "How many female students were there at Stanford University in 2011?", "sql": "SELECT CAST(T1.num_students * T1.pct_female_students AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T2.university_name = 'Stanford University'", "source_tables": ["university", "university_year"]}, "evidence": "in 2011 refers to year 2011; female students refers to DIVIDE(MULTIPLY(pct_female_students, num_students), 100); Stanford University refers to university_name = 'Stanford University';"}
{"sample_id": 8038, "db_id": "university", "final": {"question": "In which nation is Harvard University located?", "sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'Harvard University'", "source_tables": ["country", "university"]}, "evidence": "Harvard University refers to university_name = 'Harvard University'; nation refers to country_name"}
{"sample_id": 8039, "db_id": "university", "final": {"question": "What is the name of the ranking system for Teaching criteria?", "sql": "SELECT T1.system_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T2.criteria_name = 'Teaching'", "source_tables": ["ranking_system", "ranking_criteria"]}, "evidence": "Teaching criteria refers to criteria_name = 'Teaching'; name of the ranking system refers to system_name"}
{"sample_id": 8040, "db_id": "university", "final": {"question": "Name the most famous university in Argentina.", "sql": "SELECT T1.university_name FROM university AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'Argentina' GROUP BY T1.university_name ORDER BY SUM(T2.score) DESC LIMIT 1", "source_tables": ["university_ranking_year", "country", "university"]}, "evidence": "in Argentina refers to country_name = 'Argentina';\u00a0 most famous refers to MAX(SUM(score))"}
{"sample_id": 8041, "db_id": "university", "final": {"question": "In Argentina, how many universities are there?", "sql": "SELECT COUNT(*) FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Argentina'", "source_tables": ["country", "university"]}, "evidence": "In Argentina refers to country_name = 'Argentina';"}
{"sample_id": 8042, "db_id": "university", "final": {"question": "Which universities have more than 100,000 students in 2011?", "sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T1.num_students > 100000", "source_tables": ["university", "university_year"]}, "evidence": "in 2011 refers to year 2011; more than 100,000 students refers to num_students > 100000; which university refers to university_name;"}
{"sample_id": 8043, "db_id": "university", "final": {"question": "How many criteria are associated with ranking system Center for World University Rankings?", "sql": "SELECT COUNT(T2.criteria_name) FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T1.system_name = 'Center for World University Rankings'", "source_tables": ["ranking_system", "ranking_criteria"]}, "evidence": "ranking system Center for World University Rankings refers to system_name = 'Center for World University Rankings';"}
{"sample_id": 8044, "db_id": "university", "final": {"question": "How many students at the university earned a score of 90 in 2011?", "sql": "SELECT COUNT(*) FROM university_year AS T1 INNER JOIN university_ranking_year AS T2 ON T1.university_id = T2.university_id WHERE T2.score = 90 AND T1.year = 2011", "source_tables": ["university_ranking_year", "university_year"]}, "evidence": "in 2011 refers to year 2011; earned a score of 90 refers to score = 90;"}
{"sample_id": 8045, "db_id": "university", "final": {"question": "What are the top three universities with the most international students?", "sql": "SELECT DISTINCT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id GROUP BY T2.university_name ORDER BY SUM(T1.num_students * T1.pct_international_students / 100) DESC LIMIT 3", "source_tables": ["university", "university_year"]}, "evidence": "most international students refers to MAX(SUM(DIVIDE(MULTIPLE(pct_international_students, num_students), 100))); name of university refers to university_name;"}
{"sample_id": 8046, "db_id": "university", "final": {"question": "What is the difference in overall student enrollment and international student enrollment at the Harvard university from 2011 to 2012?", "sql": "SELECT SUM(T1.num_students) - SUM(CAST(T1.num_students * T1.pct_international_students AS REAL) / 100) FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Harvard University' AND T1.year BETWEEN 2011 AND 2012", "source_tables": ["university", "university_year"]}, "evidence": "Harvard University refers to university_name = 'Harvard University'; difference in overall student enrollment and international student refers to SUBTRACT(SUM(num_students), SUM(DIVIDE(MULTIPLY(pct_international_students, num_students), 100))); from 2011 to 2012 refers to year BETWEEN 2011 AND 2012"}
{"sample_id": 8047, "db_id": "university", "final": {"question": "How many universities had over 30000 students in 2011?", "sql": "SELECT COUNT(*) FROM university_year WHERE year = 2011 AND num_students > 30000", "source_tables": ["university_year"]}, "evidence": "in 2011 refers to year 2011; had over 30000 students refers to num_students > 30000;"}
{"sample_id": 8048, "db_id": "university", "final": {"question": "What is the country ID of the University of Tokyo?", "sql": "SELECT country_id FROM university WHERE university_name = 'University of Tokyo'", "source_tables": ["university"]}, "evidence": "University of Tokyo refers to university_name = 'University of Tokyo';"}
{"sample_id": 8049, "db_id": "university", "final": {"question": "Provide the ranking system ID of the Center for World University Rankings.", "sql": "SELECT id FROM ranking_system WHERE system_name = 'Center for World University Rankings'", "source_tables": ["ranking_system"]}, "evidence": "the Center for World University Rankings refers to system_name = 'Center for World University Rankings';"}
{"sample_id": 8050, "db_id": "university", "final": {"question": "What is the ID of the Publications Rank criteria?", "sql": "SELECT id FROM ranking_criteria WHERE criteria_name = 'Publications Rank'", "source_tables": ["ranking_criteria"]}, "evidence": "Publications Rank criteria refers to criteria_name = 'Publications Rank';"}
{"sample_id": 8051, "db_id": "university", "final": {"question": "How many universities had above 30% of international students in 2013?", "sql": "SELECT COUNT(*) FROM university_year WHERE pct_international_students > 30 AND year = 2013", "source_tables": ["university_year"]}, "evidence": "had above 30% of international students refers to pct_international_students > 30; in 2013 refers to year = 2013"}
{"sample_id": 8052, "db_id": "university", "final": {"question": "How many universities got less than 50 scores under ranking criteria ID 6 in 2011?", "sql": "SELECT COUNT(*) FROM university_ranking_year WHERE ranking_criteria_id = 6 AND year = 2011 AND score < 50", "source_tables": ["university_ranking_year"]}, "evidence": "in 2011 refers to year 2011; less than 50 scores refers to score < 50;"}
{"sample_id": 8053, "db_id": "university", "final": {"question": "Provide the number of students at Yale University in 2016.", "sql": "SELECT T1.num_students FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Yale University' AND T1.year = 2016", "source_tables": ["university", "university_year"]}, "evidence": "number of students refers to num_students; Yale University refers to university_name = 'Yale University'; in 2016 refers to year = 2016"}
{"sample_id": 8054, "db_id": "university", "final": {"question": "List the universities in Denmark.", "sql": "SELECT T1.university_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Denmark'", "source_tables": ["country", "university"]}, "evidence": "in Denmark refers to country_name = 'Denmark'; name of university refers to university_name;"}
{"sample_id": 8055, "db_id": "university", "final": {"question": "Provide the number of staff at the University of Auckland in 2015.", "sql": "SELECT CAST(SUM(T1.num_students) AS REAL) / SUM(T1.student_staff_ratio) FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'University of Auckland' AND T1.year = 2015", "source_tables": ["university", "university_year"]}, "evidence": "University of Auckland refers to university_name = 'University of Auckland'; in 2015 refers to year = 2015; number of staff refers to DIVIDE(num_students, student_staff_ratio)"}
{"sample_id": 8056, "db_id": "university", "final": {"question": "Which country has the University of S\u00c3\u00a3o Paulo?", "sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'University of S\u00e3o Paulo'", "source_tables": ["country", "university"]}, "evidence": "the University of S\u00c3\u00a3o Paulo refers to university_name = 'University of S\u00e3o Paulo'; which country refers to country_name;"}
{"sample_id": 8057, "db_id": "university", "final": {"question": "How many international students attended Harvard University in 2012?", "sql": "SELECT CAST(T2.num_students * T2.pct_international_students AS REAL) / 100 FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id WHERE T1.university_name = 'Harvard University' AND T2.year = 2012", "source_tables": ["university", "university_year"]}, "evidence": "Harvard University refers to university_name = 'Harvard University'; international students refers to DIVIDE(MULTIPLY(num_students, pct_international_students), 100); in 2012 refers to year = 2012"}
{"sample_id": 8058, "db_id": "university", "final": {"question": "Calculate the number of female students at Arizona State University in 2014.", "sql": "SELECT CAST(T2.num_students * T2.pct_female_students AS REAL) / 100 FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id WHERE T1.university_name = 'Arizona State University' AND T2.year = 2014", "source_tables": ["university", "university_year"]}, "evidence": "female students refers to DIVIDE(MULTIPLY(pct_female_students, num_students), 100); at Arizona State University refers to university_name = 'Arizona State University'; in 2014 refers to year = 2014"}
{"sample_id": 8059, "db_id": "university", "final": {"question": "Provide the universities which got the highest scores.", "sql": "SELECT T1.university_name FROM university AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.university_id GROUP BY T1.university_name ORDER BY SUM(T2.score) DESC LIMIT 1", "source_tables": ["university_ranking_year", "university"]}, "evidence": "got the highest scores refers to MAX(SUM(score))"}
{"sample_id": 8060, "db_id": "university", "final": {"question": "List the ranking criteria under the Shanghai Ranking system.", "sql": "SELECT T2.criteria_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T1.system_name = 'Shanghai Ranking'", "source_tables": ["ranking_system", "ranking_criteria"]}, "evidence": "Shanghai Ranking system refers to system_name = 'Shanghai Ranking'; ranking criteria refers to criteria_name"}
{"sample_id": 8061, "db_id": "university", "final": {"question": "In 2011, which university got the lowest score in teaching criteria?", "sql": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 ORDER BY T2.score ASC LIMIT 1", "source_tables": ["university_ranking_year", "university", "ranking_criteria"]}, "evidence": "in 2011 refers to year 2011; got the lowest score refers to MIN(score), teaching criteria refers to criteria_name = 'Teaching'"}
{"sample_id": 8062, "db_id": "university", "final": {"question": "Provide the ranking system name for the \"Quality of Education Rank\" criteria.", "sql": "SELECT T1.system_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T2.criteria_name = 'Quality of Education Rank'", "source_tables": ["ranking_system", "ranking_criteria"]}, "evidence": "the \"Quality of Education Rank\" criteria refers to criteria_name = 'Quality of Education Rank'; ranking system refers to system_name"}
{"sample_id": 8063, "db_id": "university", "final": {"question": "How many percent of universities got a score above 80 under International criteria in 2016? Among them, name the university which got the highest score.", "sql": "SELECT CAST(SUM(CASE WHEN T2.score > 80 THEN 1 ELSE 0 END) AS REAL) / COUNT(*), ( SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'International' AND T2.year = 2016 AND T2.score > 80 ORDER BY T2.score DESC LIMIT 1 ) AS max FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'International' AND T2.year = 2016", "source_tables": ["university_ranking_year", "university", "ranking_criteria"]}, "evidence": "got a score above 80 refers to score > 80; under International criteria refers to criteria_name = 'International'; in 2016 refers to year = 2016; highest score refers to MAX(score)"}
{"sample_id": 8064, "db_id": "university", "final": {"question": "Provide the ranking criteria and scores in 2005 that were received by Harvard University.", "sql": "SELECT T1.criteria_name, T2.score FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'Harvard University' AND T2.year = 2005", "source_tables": ["university_ranking_year", "university", "ranking_criteria"]}, "evidence": "Harvard University refers to university_name = 'Harvard University'; in 2005 refers to year = 2005; ranking criteria refers to criteria_name;"}
{"sample_id": 8065, "db_id": "university", "final": {"question": "Calculate the average score per university under Alumni criteria in 2008.", "sql": "SELECT AVG(T2.score) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id WHERE T1.criteria_name = 'Alumni' AND T2.year = 2008", "source_tables": ["university_ranking_year", "ranking_criteria"]}, "evidence": "under Alumni criteria refers to criteria_name = 'Alumni'; in 2008 refers to year = 2008; average score refers to DIVIDE(SUM(score), COUNT(university_id))"}
{"sample_id": 8066, "db_id": "university", "final": {"question": "Name the university and country which had the highest number of international students in 2015.", "sql": "SELECT T1.university_name, T3.country_name FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T2.year = 2015 ORDER BY T2.num_students DESC LIMIT 1", "source_tables": ["country", "university", "university_year"]}, "evidence": "highest number of international students refers to MAX(DIVIDE(MULTIPLY(num_students, pct_international_students), 100)); in 2015 refers to year = 2015; name of university refers to university_name;"}
{"sample_id": 8067, "db_id": "university", "final": {"question": "How many students were there in university ID 1 in 2011?", "sql": "SELECT num_students FROM university_year WHERE year = 2011 AND university_id = 1", "source_tables": ["university_year"]}, "evidence": "in 2011 refers to year 2011;"}
{"sample_id": 8068, "db_id": "university", "final": {"question": "What is the ID of the university with the most students in 2011?", "sql": "SELECT university_id FROM university_year WHERE year = 2011 ORDER BY num_students DESC LIMIT 1", "source_tables": ["university_year"]}, "evidence": "in 2011 refers to year 2011; with the most students refers to MAX(num_students); ID of the university refers to university_id"}
{"sample_id": 8069, "db_id": "university", "final": {"question": "Please list the IDs of the universities with a student staff ratio of over 15 in 2011.", "sql": "SELECT university_id FROM university_year WHERE year = 2011 AND student_staff_ratio > 15", "source_tables": ["university_year"]}, "evidence": "in 2011 refers to year 2011; student staff ratio of over 15 refers to student_staff_ratio > 15; ID of the university refers to university_id"}
{"sample_id": 8070, "db_id": "university", "final": {"question": "Among the universities with over 20000 students in 2011, how many of them have an international students percentage of over 25% in the same year?", "sql": "SELECT COUNT(*) FROM university_year WHERE year = 2011 AND pct_international_students > 25 AND num_students > 20000", "source_tables": ["university_year"]}, "evidence": "in 2011 refers to year 2011; with over 20000 students refers to num_students > 20000; international students percentage of over 25% refers to pct_international_students > 25;"}
{"sample_id": 8071, "db_id": "university", "final": {"question": "Please list the IDs of the universities with the top 3 female students percentage in 2011.", "sql": "SELECT university_id FROM university_year WHERE year = 2011 ORDER BY pct_female_students DESC LIMIT 3", "source_tables": ["university_year"]}, "evidence": "in 2011 refers to year 2011; top 3 female students percentage refers to MAX(pct_female_students) LIMIT 3; ID of the university refers to university_id"}
{"sample_id": 8072, "db_id": "university", "final": {"question": "In which year did university ID 1 have the most students?", "sql": "SELECT year FROM university_year WHERE university_id = 1 ORDER BY num_students DESC LIMIT 1", "source_tables": ["university_year"]}, "evidence": "have the most students refers to MAX(num_students)"}
{"sample_id": 8073, "db_id": "university", "final": {"question": "How many students did Harvard University have in 2011?", "sql": "SELECT T1.num_students FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Harvard University' AND T1.year = 2011", "source_tables": ["university", "university_year"]}, "evidence": "in 2011 refers to year 2011; Harvard University refers to university_name = 'Harvard University';"}
{"sample_id": 8074, "db_id": "university", "final": {"question": "What is the name of the university with the most international students in 2011?", "sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 ORDER BY T1.pct_international_students DESC LIMIT 1", "source_tables": ["university", "university_year"]}, "evidence": "in 2011 refers to year 2011; the most international students refers to MAX(DIVIDE(MULTIPLY(num_students,\u00a0 pct_international_students), 100)); name of university refers to university_id"}
{"sample_id": 8075, "db_id": "university", "final": {"question": "Please list the names of all the universities in Australia.", "sql": "SELECT T1.university_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Australia'", "source_tables": ["country", "university"]}, "evidence": "in Australia refers to country_name = 'Australia'; name of university refers to university_name"}
{"sample_id": 8076, "db_id": "university", "final": {"question": "Among the universities in Australia, how many of them have more than 15000 students in 2011?", "sql": "SELECT COUNT(*) FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'Australia' AND T2.year = 2011 AND T2.num_students > 15000", "source_tables": ["country", "university", "university_year"]}, "evidence": "in 2011 refers to year 2011; have more than 15000 students refers to num_students > 15000; in Australia refers to country_name = 'Australia';"}
{"sample_id": 8137, "db_id": "sales_in_weather", "final": {"question": "How many units of item no.9 were sold in store no.1 on 2012/1/1?", "sql": "SELECT units FROM sales_in_weather WHERE 'date' = '2012-01-01' AND store_nbr = 1 AND item_nbr = 9", "source_tables": ["sales_in_weather"]}, "evidence": "store no. 1 refers to store_nbr = 1; item no. 9 refers to item_nbr = 9; on 2012/1/1 refers to date = '2012-01-01'"}
{"sample_id": 8138, "db_id": "sales_in_weather", "final": {"question": "How many units of item no.9 were sold in store no.1 in total in January, 2012?", "sql": "SELECT SUM(units) FROM sales_in_weather WHERE SUBSTR('date', 6, 2) = '01' AND SUBSTR('date', 1, 4) = '2012' AND item_nbr = 9 AND store_nbr = 1", "source_tables": ["sales_in_weather"]}, "evidence": "store no. 1 refers to store_nbr = 1; item no. 9 refers to item_nbr = 9; in January refers to SUBSTR(date, 1, 4) = '2012' and SUBSTR(date, 6, 2) = '01'"}
{"sample_id": 8139, "db_id": "sales_in_weather", "final": {"question": "What is the ID of the item that sold the best on 2012/1/1 in store no.1?", "sql": "SELECT item_nbr FROM sales_in_weather WHERE 'date' = '2012-01-01' AND store_nbr = 1 ORDER BY units DESC LIMIT 1", "source_tables": ["sales_in_weather"]}, "evidence": "sold on 2012/1/1 refers to date = '2012-01-01'; in store no.1 refers to store_nbr = 1; item sold the best refers to Max(units)"}
{"sample_id": 8140, "db_id": "sales_in_weather", "final": {"question": "What was the temperature range of station no.1 on 2012/1/1?", "sql": "SELECT tmax - tmin AS temrange FROM weather WHERE station_nbr = 1 AND 'date' = '2012-01-01'", "source_tables": ["weather"]}, "evidence": "on 2012/1/1 refers to date = '2012-01-01'; temperature range refers to Subtract (tmax, tmin); station no.1 refers to station_nbr = 1"}
{"sample_id": 8141, "db_id": "sales_in_weather", "final": {"question": "Please list the dates on which the temperature of station no.2 was above the 30-year normal.", "sql": "SELECT 'date' FROM weather WHERE station_nbr = 2 AND depart > 0", "source_tables": ["weather"]}, "evidence": "temperature above the 30-year normal refers to depart > 0; station no.2 refers to station_nbr = 2"}
{"sample_id": 8142, "db_id": "sales_in_weather", "final": {"question": "On which day was the weather more windy in station no.1, 2012/1/1 or 2012/1/2?", "sql": "SELECT CASE WHEN (SUM(CASE WHEN 'date' = '2012-01-01' THEN avgspeed ELSE 0 END) - SUM(CASE WHEN 'date' = '2012-01-02' THEN avgspeed ELSE 0 END)) > 0 THEN '2012-01-01' ELSE '2012-01-02' END FROM weather WHERE station_nbr = 1", "source_tables": ["weather"]}, "evidence": "station no.1 refers to station_nbr = 1; 2012/1/1 refers to date = '2012-01-01'; 2012/1/2 refers to date = '2012-01-02'; more windy refers to Max(avgspeed)"}
{"sample_id": 8143, "db_id": "sales_in_weather", "final": {"question": "What is the total number of units of item no.5 sold in store no.3 in 2012 on days when the temperature was below the 30-year normal?", "sql": "SELECT SUM(CASE WHEN T3.depart < 0 THEN units ELSE 0 END) AS sum FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.'date', 1, 4) = '2012' AND T1.item_nbr = 5", "source_tables": ["sales_in_weather", "weather", "relation"]}, "evidence": "item no.5 refers to item_nbr = 5; store no. 3 refers to store_nbr = 3; when the temperature was below the 30-year normal refers to depart < 0; in 2012 refers to SUBSTR(date, 1, 4) = '2012'; total number of units refers to Sum(units)"}
{"sample_id": 8144, "db_id": "sales_in_weather", "final": {"question": "How many units of item no.5 were sold in store no.3 on the day in 2012 when the max temperature was the highest?", "sql": "SELECT T1.units FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.'date', 1, 4) = '2012' AND T1.item_nbr = 5 ORDER BY tmax DESC LIMIT 1", "source_tables": ["sales_in_weather", "weather", "relation"]}, "evidence": "item no.5 refers to item_nbr = 5; store no. 3 refers to store_nbr = 3; when the max temperature was highest refers to Max(tmax); in 2012 refers to SUBSTR(date, 1, 4) = '2012'"}
{"sample_id": 8145, "db_id": "sales_in_weather", "final": {"question": "What was the dew point on the day the most units of item no.5 were sold in store no.3 in 2012?", "sql": "SELECT dewpoint FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.'date', 1, 4) = '2012' AND T1.item_nbr = 5 ORDER BY units DESC LIMIT 1", "source_tables": ["sales_in_weather", "weather", "relation"]}, "evidence": "item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; in 2012 refers to SUBSTR(date, 1, 4) = '2012': most units sold refers to Max(units)"}
{"sample_id": 8146, "db_id": "sales_in_weather", "final": {"question": "On how many days with the max temperature over 90 did the sale of item no.5 in store no.3 exceed 100?", "sql": "SELECT SUM(CASE WHEN units > 100 THEN 1 ELSE 0 END) AS count FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.'date', 1, 4) = '2012' AND T1.item_nbr = 5 AND tmax > 90", "source_tables": ["sales_in_weather", "weather", "relation"]}, "evidence": "max temperature over 90 refers to tmax > 90; item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; sale exceed 100 refers to units > 100; number of days refers to count (date)"}
{"sample_id": 8147, "db_id": "sales_in_weather", "final": {"question": "How many units of item no.5 were sold in store no.3 on the day the temperature range was the biggest?", "sql": "SELECT t2.units FROM relation AS T1 INNER JOIN sales_in_weather AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T1.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T2.item_nbr = 5 ORDER BY t3.tmax - t3.tmin DESC LIMIT 1", "source_tables": ["sales_in_weather", "weather", "relation"]}, "evidence": "item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; when the temperature range was the biggest refers to Max(Subtract(tmax, tmin))"}
{"sample_id": 8148, "db_id": "sales_in_weather", "final": {"question": "Among the days on which over 100 units of item no.5 were sold in store no.3, on which date was the temperature range the biggest?", "sql": "SELECT T2.'date' FROM relation AS T1 INNER JOIN sales_in_weather AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T1.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T2.item_nbr = 5 AND T2.units > 100 ORDER BY tmax - tmin DESC LIMIT 1", "source_tables": ["sales_in_weather", "weather", "relation"]}, "evidence": "over 100 units refers to units > 100; item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; the temperature range was the biggest refers to Max(Subtract(tmax, tmin))"}
{"sample_id": 8149, "db_id": "sales_in_weather", "final": {"question": "How many units of item no.5 were sold in store no.3 in total on days with a total precipitation of over 0.05?", "sql": "SELECT SUM(CASE WHEN T3.preciptotal > 0.05 THEN units ELSE 0 END) AS sum FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T1.item_nbr = 5", "source_tables": ["sales_in_weather", "weather", "relation"]}, "evidence": "item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; with a total precipitation of over 0.05 refers to preciptotal > 0.05"}
{"sample_id": 8150, "db_id": "sales_in_weather", "final": {"question": "Please list the dates on which the sale of item no.5 in store no.3 exceeded 100 and the average wind speed exceeded 10.", "sql": "SELECT T1.'date' FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T1.item_nbr = 5 AND T1.units > 100 AND T3.avgspeed > 10", "source_tables": ["sales_in_weather", "weather", "relation"]}, "evidence": "item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; exceed 100 refers to units > 100; average wind speed exceeded 10 refers to avgspeed > 10"}
{"sample_id": 8151, "db_id": "sales_in_weather", "final": {"question": "What is the total units of products sold on the day with the highest max temperature in store no.3 in 2012?", "sql": "SELECT SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T1.'date' LIKE '%2012%' GROUP BY T3.tmax ORDER BY T3.tmax DESC LIMIT 1", "source_tables": ["sales_in_weather", "weather", "relation"]}, "evidence": "highest max temperature refers to Max(tmax); store no.3 refers to store_nbr = 3; in 2012 refers to substring (date, 1, 4) = '2012'; total units refers to sum(units)"}
{"sample_id": 8152, "db_id": "sales_in_weather", "final": {"question": "How many more units of item no.16 were sold on the day with the highest max temperature in 2012 in store no.5 than in store no.10?", "sql": "SELECT ( SELECT SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.item_nbr = 16 AND T1.'date' LIKE '%2012%' AND T1.store_nbr = 5 GROUP BY tmax ORDER BY T3.tmax DESC LIMIT 1 ) - ( SELECT SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.item_nbr = 16 AND T1.'date' LIKE '%2012%' AND T1.store_nbr = 6 GROUP BY tmax ORDER BY T3.tmax DESC LIMIT 1 )", "source_tables": ["sales_in_weather", "weather", "relation"]}, "evidence": "store no. 5 refers to store_nbr = 5; store no. 10 refers to store_nbr = 10; item no.16 refers to item_nbr = 16; in 2012 refers to SUBSTR(date, 1, 4) = '2012'; highest max temperature refers to Max(tmax); more units sold refers to Subtract ( Sum(units where store_nbr = 5), Sum(units where store_nbr = 10))"}
{"sample_id": 8153, "db_id": "sales_in_weather", "final": {"question": "What is the ID of the item that sold the best on the day with the highest max temperature in store no.3 in 2012?", "sql": "SELECT T1.item_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.'date' LIKE '%2012%' AND tmax = ( SELECT MAX(tmax) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.'date' LIKE '%2012%' ) GROUP BY T1.item_nbr ORDER BY SUM(units) DESC LIMIT 1", "source_tables": ["sales_in_weather", "weather", "relation"]}, "evidence": "highest max temperature refers to Max(tmax); store no.3 refers to store_nbr = 3; in 2012 refers to substring (date, 1, 4) = '2012'; sold the best refers to Max(units); ID of the item refers to item_nbr"}
{"sample_id": 8154, "db_id": "sales_in_weather", "final": {"question": "On the day with the highest max temperature in 2012, how many items in store no.3 had no sales?", "sql": "SELECT COUNT(DISTINCT T1.item_nbr) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr AND T1.store_nbr = 3 AND SUBSTR(T1.'date', 1, 4) = '2012' AND T1.units = 0 GROUP BY T3.tmax ORDER BY T3.tmax DESC LIMIT 1", "source_tables": ["sales_in_weather", "weather", "relation"]}, "evidence": "highest max temperature refers to Max(tmax); in 2012 refers to SUBSTR(date, 1, 4) = '2012'; store no.3 refers to store_nbr = 3; had no sale refers to units = 0"}
{"sample_id": 8155, "db_id": "sales_in_weather", "final": {"question": "How many units of item no.5 were sold in store no.3 on average on the days when the max temperature exceeded 90?", "sql": "SELECT CAST(SUM(T1.units) AS REAL) / COUNT(T1.'date') FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.item_nbr = 5 AND T3.tmax > 90", "source_tables": ["sales_in_weather", "weather", "relation"]}, "evidence": "item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3;\u00a0 when the maximum temperature exceed 90 refers to tmax > 90; average = Divide (Sum(units), Count(date))"}
{"sample_id": 8156, "db_id": "sales_in_weather", "final": {"question": "What is the percentage of the units of item no.5 sold among all units of items sold in store no.3 on the day with the highest max temperature in 2012?", "sql": "SELECT CAST(SUM(CASE WHEN T1.item_nbr = 5 THEN units * 1 ELSE 0 END) AS REAL) * 100 / SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.'date' LIKE '%2012%' AND T3.tmax = ( SELECT MAX(T3.tmax) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.'date' LIKE '%2012%' )", "source_tables": ["sales_in_weather", "weather", "relation"]}, "evidence": "item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; highest max temperature refers to Max(tmax); in 2012 refers to SUBSTR(date, 1, 4) = '2012';\u00a0 Percentage = Divide (Sum(units where item_nbr = 5), Sum(units)) * 100"}
{"sample_id": 8157, "db_id": "sales_in_weather", "final": {"question": "Give the id of the bestsellers of store no.1 on 2012/1/1.", "sql": "SELECT item_nbr FROM sales_in_weather WHERE 'date' = '2012-01-01' AND store_nbr = 1 ORDER BY units DESC LIMIT 1", "source_tables": ["sales_in_weather"]}, "evidence": "store no. 1 refers to store_nbr = 1; on 2012/1/1 refers to date = '2012-01-01'; best seller refers to Max(units); ID refers to item_nbr"}
{"sample_id": 8158, "db_id": "sales_in_weather", "final": {"question": "How many no.9 items from store no.11 were sold on 2012/12/7?", "sql": "SELECT units FROM sales_in_weather WHERE 'date' = '2012-12-07' AND store_nbr = 11 AND item_nbr = 9", "source_tables": ["sales_in_weather"]}, "evidence": "no. 9 item refers to item_nbr = 9; store no.11 refers to store_nbr = 11; sold on 2012/12/7 refers to date = '2012-12-07'"}
{"sample_id": 8159, "db_id": "sales_in_weather", "final": {"question": "Give the average temperature of station no.20 on 2014/10/17.", "sql": "SELECT tavg FROM weather WHERE 'date' = '2014-10-17' AND station_nbr = 20", "source_tables": ["weather"]}, "evidence": "station no.20 refers to station_nbr = 20; on 2014/10/17 refers to date = '2014-10-17'; average temperature refers to tavg"}
{"sample_id": 8160, "db_id": "sales_in_weather", "final": {"question": "Tell the resultant wind speed of station no.9 on 2014/1/15.", "sql": "SELECT resultspeed FROM weather WHERE 'date' = '2014-01-15' AND station_nbr = 9", "source_tables": ["weather"]}, "evidence": "station no.9 refers to station_nbr = 9; on 2014/1/15 refers to date = '2014/01/15'; result wind speed refers to resultspeed"}
{"sample_id": 8161, "db_id": "sales_in_weather", "final": {"question": "Give the id of the weather station with most stores.", "sql": "SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(station_nbr) DESC LIMIT 1", "source_tables": ["relation"]}, "evidence": "station with more stores refers to Max(Count(store_nbr)); ID of weather station refers to station_nbr"}
{"sample_id": 8162, "db_id": "sales_in_weather", "final": {"question": "Which weather station does store no.20 belong to?", "sql": "SELECT station_nbr FROM relation WHERE store_nbr = 20", "source_tables": ["relation"]}, "evidence": "store no.20 refers to store_nbr = 20; weather station refers to station_nbr"}
{"sample_id": 8163, "db_id": "sales_in_weather", "final": {"question": "Tell the temperature range of the home weather station of store no.7 on 2014/4/28.", "sql": "SELECT T1.tmax - T1.tmin AS temprange FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 7 AND T1.'date' = '2014-04-28'", "source_tables": ["weather", "relation"]}, "evidence": "store no.7 refers to tore_nbr = 7; on 2014/4/28 refers to date = '2014-04-28'; temperature range refers to Subtract (tmax, tmin)"}
{"sample_id": 8164, "db_id": "sales_in_weather", "final": {"question": "For the weather station which recorded the highest temperature above the 30-year normal, how many stores does it have?", "sql": "SELECT store_nbr FROM relation WHERE station_nbr = ( SELECT station_nbr FROM weather ORDER BY depart DESC LIMIT 1 )", "source_tables": ["weather", "relation"]}, "evidence": "highest temperature above the 30-year normal refers to Max(depart)"}
{"sample_id": 8165, "db_id": "sales_in_weather", "final": {"question": "For the home weather station of store no.15, what was the dew point on 2012/2/18?", "sql": "SELECT T1.dewpoint FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 15 AND T1.'date' = '2012-02-18'", "source_tables": ["weather", "relation"]}, "evidence": "store no. 15 refers to store_nbr = 15; on 2012/2/18 refers to date = '2012-02-18'"}
{"sample_id": 8166, "db_id": "sales_in_weather", "final": {"question": "Tell the wet-bulb temperature of the weather station which contained store no.6 on 2012/2/15.", "sql": "SELECT T1.wetbulb FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 14 AND T1.'date' = '2012-02-15'", "source_tables": ["weather", "relation"]}, "evidence": "store no.6 refers to store_nbr = 6; on 2012/2/15 refers to date = '2012-02-15'; wet-bulb temperature refers to wetbulb"}
{"sample_id": 8167, "db_id": "sales_in_weather", "final": {"question": "Give the number of stores which opened on the weather station that recorded the fastest average wind speed.", "sql": "SELECT COUNT(T.store_nbr) FROM ( SELECT DISTINCT store_nbr FROM relation WHERE station_nbr = ( SELECT station_nbr FROM weather ORDER BY avgspeed DESC LIMIT 1 ) ) T", "source_tables": ["weather", "relation"]}, "evidence": "fastest average wind speed refers to Max(avgspeed); number of store refers to count(store_nbr)"}
{"sample_id": 8168, "db_id": "sales_in_weather", "final": {"question": "State the max temperature of the weather station which has the no.21 store on 2012/11/9.", "sql": "SELECT tmax FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 21 AND T1.'date' = '2012-11-09'", "source_tables": ["weather", "relation"]}, "evidence": "no.21 store refers to store_nbr = 21; on 2012/11/9 refers to date = '2012-11-09'; max temperature refers to tmax"}
{"sample_id": 8169, "db_id": "sales_in_weather", "final": {"question": "Provide the sunrise time recorded by the home weather station of store no.30 on 2014/2/21.", "sql": "SELECT T1.sunrise FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.'date' = '2014-02-21' AND store_nbr = 30", "source_tables": ["weather", "relation"]}, "evidence": "store no. 30 refers to store_nbr = 30; on 2014/2/21 refers to date = '2014-02-21'"}
{"sample_id": 8170, "db_id": "sales_in_weather", "final": {"question": "State the number of stores that belongs to the weather station which recorded the deepest snowfall.", "sql": "SELECT T2.store_nbr FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr ORDER BY snowfall DESC LIMIT 1", "source_tables": ["weather", "relation"]}, "evidence": "deepest snowfall refers to Max(snowfall); number of stores refers to store_nbr"}
{"sample_id": 8171, "db_id": "sales_in_weather", "final": {"question": "Provide the code summarization for the weather recorded by the weather station which contained the no.2 store on 2013/2/12.", "sql": "SELECT T1.codesum FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.'date' = '2013-02-12' AND T2.store_nbr = 2", "source_tables": ["weather", "relation"]}, "evidence": "no.2 store refers to store_nbr = 2; on 2013/2/12 refers to date = '2013-02-12'; code summarization refers to codesum"}
{"sample_id": 8172, "db_id": "sales_in_weather", "final": {"question": "Show the sea level status recorded by the weather station of store no.19 on 2013/2/24.", "sql": "SELECT T1.sealevel FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.'date' = '2013-02-24' AND T2.store_nbr = 19", "source_tables": ["weather", "relation"]}, "evidence": "store no.19 refers to store_nbr = 19; on 2013/2/24 refers to date = '2013-02-24'; sea level status refers to sealevel"}
{"sample_id": 8173, "db_id": "sales_in_weather", "final": {"question": "How many inches of total precipitation was recorded by the weather station of store no.2 on 2012/12/25?", "sql": "SELECT T1.preciptotal FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.'date' = '2012-12-25' AND T2.store_nbr = 2", "source_tables": ["weather", "relation"]}, "evidence": "store no.2 refers to store_nbr = 2; on 2012/12/25 refers to date = '2012-12-25'; total precipitation refers to preciptotal"}
{"sample_id": 8174, "db_id": "sales_in_weather", "final": {"question": "Give the station pressure status recorded by the weather station which contained no.12 store on 2012/5/15.", "sql": "SELECT T1.stnpressure FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.'date' = '2012-05-15' AND T2.store_nbr = 12", "source_tables": ["weather", "relation"]}, "evidence": "no.12 store refers to store_nbr = 12; on 2012/5/15 refers to date = '2012-05-15'; station pressure status refers to stnpressure"}
{"sample_id": 8175, "db_id": "sales_in_weather", "final": {"question": "What percentage was the total unit sales of store no.10 to the total sales of its weather station on 2014/10/31?", "sql": "SELECT CAST(SUM(CASE WHEN T2.store_nbr = 10 THEN units * 1 ELSE 0 END) AS REAL) * 100 / SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE T1.'date' = '2014-10-31'", "source_tables": ["sales_in_weather", "relation"]}, "evidence": "store no.10 refers to store_nbr = 10; on 2014/10/31 refers to date = '2014-10-31'; percentage = Divide (Sum(units where store_nbr = 10), Sum(units)) * 100"}
{"sample_id": 8176, "db_id": "sales_in_weather", "final": {"question": "For the weather station has store no.9, what was the increased percentage of the average temperature from 2012/2/2 to 2012/2/3?", "sql": "SELECT CAST((SUM(CASE WHEN T1.'date' = '2012-02-03' THEN T1.tavg * 1 ELSE 0 END) - SUM(CASE WHEN T1.'date' = '2012-02-02' THEN T1.tavg * 1 ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.'date' = '2012-02-02' THEN T1.tavg * 1 ELSE 0 END) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 9", "source_tables": ["weather", "relation"]}, "evidence": "store no.9 refers to store_nbr = 9; 2012/2/2 refers to date = '2012-02-02'; 2012/2/3 refers to date = '2012-02-03'; average temperature refers to tavg; increase percentage = Divide (Subtract (tavg where date = '2012-02-03', tavg where date = '2012-02-02'), tavg where date = '2012-02-02') * 100"}
{"sample_id": 8177, "db_id": "sales_in_weather", "final": {"question": "What is the item number of the product with the highest number of units sold in store number 1 on 1/1/2012?", "sql": "SELECT item_nbr FROM sales_in_weather WHERE 'date' = '2012-01-01' AND store_nbr = 1 ORDER BY units DESC LIMIT 1", "source_tables": ["sales_in_weather"]}, "evidence": "item number refers to item_nbr; highest number of units sold refers to Max(units); store no.1 refers to store_nbr = 1; on 1/1/2012 refers to date = '2012-01-01'"}
{"sample_id": 8178, "db_id": "sales_in_weather", "final": {"question": "How many stores are in weather station 12?", "sql": "SELECT SUM(store_nbr) FROM relation WHERE station_nbr = 12", "source_tables": ["relation"]}, "evidence": "weather station 12 refers to station_nbr = 12; number of stores refers to Count(store_nbr)"}
{"sample_id": 8179, "db_id": "sales_in_weather", "final": {"question": "How many items weren't sold in store 2 on 1/1/2012?", "sql": "SELECT COUNT(item_nbr) FROM sales_in_weather WHERE store_nbr = 2 AND units = 0 AND 'date' = '2012-01-01'", "source_tables": ["sales_in_weather"]}, "evidence": "store no.2 refers to store_nbr = 2; item weren't sold refers to units = 0; on 1/1/2012 refers to date = '2012-01-01'"}
{"sample_id": 8180, "db_id": "sales_in_weather", "final": {"question": "Between 1/1/2012 to 12/31/2014, which date recorded the hottest temperature in weather station 1?", "sql": "SELECT 'date' FROM weather WHERE station_nbr = 1 AND CAST(SUBSTR('date', 1, 4) AS int) BETWEEN 2012 AND 2014 ORDER BY tmax DESC LIMIT 1", "source_tables": ["weather"]}, "evidence": "weather station 1 refers to station_nbr = 1; hottest temperature refers to Max(tmax); between 1/1/2012 to 12/31/2014 refers to SUBSTR(date, 1, 4) between 2012 and 2014"}
{"sample_id": 8181, "db_id": "sales_in_weather", "final": {"question": "Which weather station has the highest number of stores?", "sql": "SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(store_nbr) DESC LIMIT 1", "source_tables": ["relation"]}, "evidence": "number of store refers to store_nbr; highest number of store refers to Max(Count(store_nbr)); weather station refers to station_nbr"}
{"sample_id": 8182, "db_id": "sales_in_weather", "final": {"question": "In March 2014, which weather stations recorded the highest number of days whose temperature is below the 30-year normal?", "sql": "SELECT station_nbr FROM weather WHERE SUBSTR('date', 1, 4) = '2014' AND SUBSTR('date', 6, 2) = '03' AND depart < 0 GROUP BY station_nbr HAVING COUNT(DISTINCT 'date') = ( SELECT COUNT(DISTINCT 'date') FROM weather WHERE SUBSTR('date', 1, 4) = '2014' AND SUBSTR('date', 6, 2) = '03' AND depart < 0 GROUP BY station_nbr ORDER BY COUNT('date') DESC LIMIT 1 )", "source_tables": ["weather"]}, "evidence": "in March 2014 refers to substring (date, 1, 4) = '2014' and substring (date, 6, 2) = '03'; temperature is below the 30-year normal refers to depart < 0; highest number of days refers to Max(Count(date))"}
{"sample_id": 8183, "db_id": "sales_in_weather", "final": {"question": "Which weather station does the store that sold the highest quantity of item 9 belongs to?", "sql": "SELECT station_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE T1.item_nbr = 9 GROUP BY T2.station_nbr ORDER BY SUM(T1.units) DESC LIMIT 1", "source_tables": ["sales_in_weather", "relation"]}, "evidence": "item 9 refers to item_nbr = 9; sold the highest quantity refers to Max(Sum(units)); weather station refers to station_nbr"}
{"sample_id": 8184, "db_id": "sales_in_weather", "final": {"question": "How many stores belong to the most windy station?", "sql": "SELECT COUNT(store_nbr) FROM relation WHERE station_nbr = ( SELECT station_nbr FROM weather ORDER BY avgspeed DESC LIMIT 1 )", "source_tables": ["weather", "relation"]}, "evidence": "most windy station refers to Max(avgspeed)"}
{"sample_id": 8217, "db_id": "mondial_geo", "final": {"question": "In which country does Polish found least in?", "sql": "SELECT T2.Name FROM ethnicGroup AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Name = 'Polish' GROUP BY T2.Name, T1.Percentage ORDER BY T1.Percentage ASC LIMIT 1", "source_tables": ["country", "ethnicgroup"]}, "evidence": ""}
{"sample_id": 8218, "db_id": "mondial_geo", "final": {"question": "Which countries have more than 90% of African? List the name of the country in full.", "sql": "SELECT T2.Name FROM ethnicGroup AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Name = 'African' AND T1.Percentage > 90", "source_tables": ["country", "ethnicgroup"]}, "evidence": "Percentage = 90 means 90% of the population"}
{"sample_id": 8219, "db_id": "mondial_geo", "final": {"question": "State the different ethnic group and percentage of the language in Singapore.", "sql": "SELECT T1.Name, T1.Percentage FROM ethnicGroup AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Singapore' GROUP BY T1.Name, T1.Percentage", "source_tables": ["country", "ethnicgroup"]}, "evidence": ""}
{"sample_id": 8220, "db_id": "mondial_geo", "final": {"question": "Calculate the percentage of country which gained independence as republic after 1970.", "sql": "SELECT CAST(SUM(CASE WHEN Government = 'republic' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Country) FROM politics WHERE STRFTIME('%Y', Independence) > '1970'", "source_tables": ["politics"]}, "evidence": ""}
{"sample_id": 8221, "db_id": "mondial_geo", "final": {"question": "Find the GPD for Bosnia and Herzegovina and the type of government it belongs to.", "sql": "SELECT T1.GDP, T2.Government FROM economy AS T1 INNER JOIN politics AS T2 ON T1.Country = T2.Country INNER JOIN country AS T3 ON T3.Code = T2.Country WHERE T3.Name = 'Bosnia and Herzegovina'", "source_tables": ["economy", "country", "politics"]}, "evidence": ""}
{"sample_id": 8222, "db_id": "mondial_geo", "final": {"question": "State the country and its population with population growth greater than 2% but infant mortality rate less than 5%.", "sql": "SELECT T1.Name, T1.Population FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T2.Population_Growth > 2 AND T2.Infant_Mortality < 5", "source_tables": ["country", "population"]}, "evidence": ""}
{"sample_id": 8223, "db_id": "mondial_geo", "final": {"question": "Which is the majority of the ethnic group in country with great than 10,000,000 population", "sql": "SELECT T2.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Population > 10000000 GROUP BY T2.Name, T2.Percentage ORDER BY T2.Percentage DESC LIMIT 2", "source_tables": ["country", "ethnicgroup"]}, "evidence": ""}
{"sample_id": 8224, "db_id": "mondial_geo", "final": {"question": "Provide the country with its full name which has the most ethnic group? List them all ethnic group together with its percentage.", "sql": "SELECT T1.Name, T2.Name, T2.Percentage FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Name = ( SELECT T1.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY COUNT(T2.Name) DESC LIMIT 1 ) GROUP BY T1.Name, T2.Name, T2.Percentage", "source_tables": ["country", "ethnicgroup"]}, "evidence": ""}
{"sample_id": 8225, "db_id": "mondial_geo", "final": {"question": "What is the full name of the country with 100% Africans?", "sql": "SELECT T1.Name FROM ethnicGroup AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Percentage = 100 AND T1.Name = 'African'", "source_tables": ["country", "ethnicgroup"]}, "evidence": "Percentage = 100 means 100% of the population"}
{"sample_id": 8226, "db_id": "mondial_geo", "final": {"question": "List the infant mortality of country with the least Amerindian.", "sql": "SELECT T1.Infant_Mortality FROM population AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Country = T2.Country WHERE T2.Name = 'Amerindian' ORDER BY T2.Percentage ASC LIMIT 1", "source_tables": ["population", "ethnicgroup"]}, "evidence": ""}
{"sample_id": 8227, "db_id": "mondial_geo", "final": {"question": "For country with area greater than 600000, what is agriculture percentage of GDP the country contributes?", "sql": "SELECT T2.Agriculture FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Area > 600000 AND T2.Agriculture IS NOT NULL", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8228, "db_id": "mondial_geo", "final": {"question": "Provide the country with republic government which has the highest population growth?", "sql": "SELECT T2.Country FROM population AS T1 INNER JOIN politics AS T2 ON T1.Country = T2.Country WHERE T2.Government = 'republic' ORDER BY T1.Population_Growth DESC LIMIT 1", "source_tables": ["population", "politics"]}, "evidence": ""}
{"sample_id": 8229, "db_id": "mondial_geo", "final": {"question": "When did 'Bulgaria' gain independence?", "sql": "SELECT T2.Independence FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Bulgaria'", "source_tables": ["country", "politics"]}, "evidence": ""}
{"sample_id": 8230, "db_id": "mondial_geo", "final": {"question": "Calculate the population of Arab in each country?", "sql": "SELECT T2.Percentage * T1.Population FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Arab'", "source_tables": ["country", "ethnicgroup"]}, "evidence": "Arab is the name of enthic groups in the country; Population of (Arab in each country) = (percentage of Arab) * (population of each country)"}
{"sample_id": 8231, "db_id": "mondial_geo", "final": {"question": "What is the population of African in 'Turks and Caicos Islands'?", "sql": "SELECT T2.Percentage * T1.Population FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'African' AND T1.Name = 'Turks and Caicos Islands'", "source_tables": ["country", "ethnicgroup"]}, "evidence": "African is the name of enthic groups in the country; Population of (African in Turks and Calcos Island) = (percentage of African) * (population of Turks and Calcos Island)"}
{"sample_id": 8232, "db_id": "mondial_geo", "final": {"question": "What is the number of growth population for country with the lowest infant mortality?", "sql": "SELECT T2.Population_Growth * T1.Population FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T2.Infant_Mortality IS NOT NULL ORDER BY T2.Infant_Mortality ASC LIMIT 1", "source_tables": ["country", "population"]}, "evidence": "Growth population = population_growth * population"}
{"sample_id": 8233, "db_id": "mondial_geo", "final": {"question": "Among countries with more than 400,000 GDP, state its capital and population.", "sql": "SELECT T1.Capital, T1.Population FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.GDP > 400000", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8234, "db_id": "mondial_geo", "final": {"question": "Calculate the service of GDP for Brazil.", "sql": "SELECT T2.Service * T2.GDP FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Brazil'", "source_tables": ["economy", "country"]}, "evidence": "The service of GDP can be computed by service * GDP"}
{"sample_id": 8235, "db_id": "mondial_geo", "final": {"question": "Which country has the highest infant mortality? Also state its population growth.", "sql": "SELECT T1.Name, T2.Population_Growth FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country ORDER BY T2.Infant_Mortality DESC LIMIT 1", "source_tables": ["country", "population"]}, "evidence": ""}
{"sample_id": 8236, "db_id": "mondial_geo", "final": {"question": "List all countries with negative growth in population. State the country, population and growth.", "sql": "SELECT T1.Name, T1.Population, T2.Population_Growth FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T2.Population_Growth < 0", "source_tables": ["country", "population"]}, "evidence": "Negative growth in population means population_growth < 0"}
{"sample_id": 8237, "db_id": "mondial_geo", "final": {"question": "For countries with area between 500000 to 1000000, state the country and infant mortality rate.", "sql": "SELECT T1.Name, T2.Infant_Mortality FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T1.Area BETWEEN 500000 AND 1000000", "source_tables": ["country", "population"]}, "evidence": ""}
{"sample_id": 8238, "db_id": "mondial_geo", "final": {"question": "Among the countries with more than 3% population growth rate, state the country name in full along with its GDP.", "sql": "SELECT T1.Name, T3.GDP FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country INNER JOIN economy AS T3 ON T3.Country = T2.Country WHERE T2.Population_Growth > 3", "source_tables": ["economy", "country", "population"]}, "evidence": "Population_growth = 3 means 3% population growth rate"}
{"sample_id": 8239, "db_id": "mondial_geo", "final": {"question": "What is the infant mortality rate for Ethiopia?", "sql": "SELECT T2.Infant_Mortality FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Ethiopia'", "source_tables": ["country", "population"]}, "evidence": "Ethiopia is one of country names"}
{"sample_id": 8240, "db_id": "mondial_geo", "final": {"question": "How much does the gross domestic products goes to the industry sector for Singapore?", "sql": "SELECT T2.GDP * T2.Industry FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Singapore'", "source_tables": ["economy", "country"]}, "evidence": "Singapore is one of country names; GDP refers to gross domestic products; GDP to the industry sector = GDP * Industry"}
{"sample_id": 8241, "db_id": "mondial_geo", "final": {"question": "How much is her GDP in agriculture for the country with the least area?", "sql": "SELECT T2.GDP * T2.Agriculture FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T1.Area ASC LIMIT 1", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8242, "db_id": "mondial_geo", "final": {"question": "Which country has the biggest percentage of the albanian ethnic group?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Albanian' ORDER BY T2.Percentage DESC LIMIT 1", "source_tables": ["country", "ethnicgroup"]}, "evidence": ""}
{"sample_id": 8243, "db_id": "mondial_geo", "final": {"question": "Among the countries with the African ethnic group, how many of them has a population of over 10000000?", "sql": "SELECT COUNT(T1.Name) FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'African' AND T1.Area > 10000000", "source_tables": ["country", "ethnicgroup"]}, "evidence": ""}
{"sample_id": 8244, "db_id": "mondial_geo", "final": {"question": "Please list the name of the countries with over 5 ethnic groups.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country GROUP BY T1.Name HAVING COUNT(T1.Name) > 5", "source_tables": ["country", "ethnicgroup"]}, "evidence": ""}
{"sample_id": 8245, "db_id": "mondial_geo", "final": {"question": "Which country has the highest GDP?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP DESC LIMIT 1", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8246, "db_id": "mondial_geo", "final": {"question": "Among the countries with a population of over 10000000, how many of them have a GDP of over 500000?", "sql": "SELECT COUNT(T1.Name) FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.GDP > 500000 AND T1.Population > 10000000", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8247, "db_id": "mondial_geo", "final": {"question": "Please list the capital cities of the countries with an inflation rate under 2.", "sql": "SELECT T1.Capital FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.Inflation < 2", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8248, "db_id": "mondial_geo", "final": {"question": "Which country has the lowest inflation rate?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.Inflation IS NOT NULL ORDER BY T2.Inflation ASC LIMIT 1", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8249, "db_id": "mondial_geo", "final": {"question": "Among the countries whose agriculture percentage of the GDP is under 50%, how many of them have an area of over 8000000?", "sql": "SELECT COUNT(T1.Name) FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.Agriculture < 50 AND T1.Area > 8000000", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8250, "db_id": "mondial_geo", "final": {"question": "How many cities have a salt lake located in it?", "sql": "SELECT COUNT(T1.City) FROM located AS T1 INNER JOIN lake AS T2 ON T1.Lake = T2.Name WHERE T2.Type = 'salt'", "source_tables": ["lake", "located"]}, "evidence": ""}
{"sample_id": 8251, "db_id": "mondial_geo", "final": {"question": "Please list the depth of the lakes that are located in the Province of Albania.", "sql": "SELECT T2.Depth FROM located AS T1 INNER JOIN lake AS T2 ON T1.Lake = T2.Name WHERE T1.Province = 'Albania'", "source_tables": ["lake", "located"]}, "evidence": ""}
{"sample_id": 8252, "db_id": "mondial_geo", "final": {"question": "The lake with the highest altitude is located in which city?", "sql": "SELECT T2.City FROM lake AS T1 LEFT JOIN located AS T2 ON T2.Lake = T1.Name ORDER BY T1.Altitude DESC LIMIT 1", "source_tables": ["lake", "located"]}, "evidence": ""}
{"sample_id": 8253, "db_id": "mondial_geo", "final": {"question": "How many lakes in the Canary Islands cover an area of over 1000000?", "sql": "SELECT COUNT(T2.Name) FROM located AS T1 INNER JOIN lake AS T2 ON T1.Lake = T2.Name WHERE T1.Province = 'Canary Islands' AND T2.Area > 1000000", "source_tables": ["lake", "located"]}, "evidence": ""}
{"sample_id": 8254, "db_id": "mondial_geo", "final": {"question": "Which country has the most languages spoken?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY COUNT(T2.Name) DESC LIMIT 1", "source_tables": ["country", "language"]}, "evidence": ""}
{"sample_id": 8255, "db_id": "mondial_geo", "final": {"question": "What is the capital city of the country that has the percentage of Armenian speakers over 90%?", "sql": "SELECT T1.Capital FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Armenian' AND T2.Percentage > 90", "source_tables": ["country", "language"]}, "evidence": "Percentage of country > 90% refers to percentage > 90; America is one of country names"}
{"sample_id": 8256, "db_id": "mondial_geo", "final": {"question": "Among the countries with a population of under 1000000, how many of them have over 2 languages?", "sql": "SELECT T2.Country FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country WHERE T1.Population < 1000000 GROUP BY T2.Country HAVING COUNT(T1.Name) > 2", "source_tables": ["country", "language"]}, "evidence": ""}
{"sample_id": 8257, "db_id": "mondial_geo", "final": {"question": "How many organizations are founded in countries with a population of under 1000000?", "sql": "SELECT COUNT(T2.Name) FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country WHERE T1.Population < 1000000", "source_tables": ["country", "organization"]}, "evidence": ""}
{"sample_id": 8258, "db_id": "mondial_geo", "final": {"question": "How many organizations are established after 1999/1/1 in a country whose GDP is under 500000?", "sql": "SELECT T1.Country, COUNT(T1.Country) FROM economy AS T1 INNER JOIN organization AS T2 ON T1.Country = T2.Country WHERE T1.GDP < 500000 AND STRFTIME('%Y', T2.Established) < '1999' GROUP BY T1.Country", "source_tables": ["economy", "organization"]}, "evidence": ""}
{"sample_id": 8259, "db_id": "mondial_geo", "final": {"question": "Among the countries with over 3 organizations, how many of them have an inflation rate of over 5%?", "sql": "SELECT COUNT(T2.Country) FROM economy AS T1 INNER JOIN organization AS T2 ON T1.Country = T2.Country WHERE T2.Country IN ( SELECT Country FROM organization GROUP BY Country HAVING COUNT(Country) > 3 ) AND T1.Inflation > 5", "source_tables": ["economy", "organization"]}, "evidence": ""}
{"sample_id": 8260, "db_id": "mondial_geo", "final": {"question": "How many organizations are established in the country with the most ethnic groups?", "sql": "SELECT COUNT(T2.Province) FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country INNER JOIN ethnicGroup AS T3 ON T3.Country = T2.Country GROUP BY T1.Name ORDER BY COUNT(T3.Name) DESC LIMIT 1", "source_tables": ["country", "organization", "ethnicgroup"]}, "evidence": ""}
{"sample_id": 8261, "db_id": "mondial_geo", "final": {"question": "Please list the organization names established in the countries where Dutch is spoken.", "sql": "SELECT T2.Name FROM language AS T1 INNER JOIN organization AS T2 ON T1.Country = T2.Country WHERE T1.Name = 'Dutch'", "source_tables": ["organization", "language"]}, "evidence": "Dutch is one of language"}
{"sample_id": 8262, "db_id": "mondial_geo", "final": {"question": "How many organizations are established in countries where people speak Bosnian?", "sql": "SELECT COUNT(T2.Name) FROM language AS T1 INNER JOIN organization AS T2 ON T1.Country = T2.Country WHERE T1.Name = 'Bosnian'", "source_tables": ["organization", "language"]}, "evidence": "Bosnian is one of language"}
{"sample_id": 8263, "db_id": "mondial_geo", "final": {"question": "What is the highest infant mortality rate per thousand of the countries whose inflation is under 3?", "sql": "SELECT MAX(T2.Infant_Mortality) FROM economy AS T1 INNER JOIN population AS T2 ON T1.Country = T2.Country WHERE T1.Inflation < 3", "source_tables": ["economy", "population"]}, "evidence": ""}
{"sample_id": 8264, "db_id": "mondial_geo", "final": {"question": "Among the countries whose GDP is over 1000000, how many of them have a population groth rate of over 3%?", "sql": "SELECT COUNT(T1.Country) FROM economy AS T1 INNER JOIN population AS T2 ON T1.Country = T2.Country WHERE T1.GDP > 1000000 AND T2.Population_Growth > 3", "source_tables": ["economy", "population"]}, "evidence": "population growth rate of over 3% means population_growth > 3"}
{"sample_id": 8265, "db_id": "mondial_geo", "final": {"question": "Which country has the highest GDP per capita?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP / T1.Population DESC LIMIT 1", "source_tables": ["economy", "country"]}, "evidence": "GDP per capita = GDP / population"}
{"sample_id": 8266, "db_id": "mondial_geo", "final": {"question": "What is the highest lake area coverage of a country?", "sql": "SELECT T2.Area * 100  / T3.Area FROM located AS T1 INNER JOIN lake AS T2 ON T1.Lake = T2.Name INNER JOIN country AS T3 ON T3.Code = T1.Country ORDER BY T2.Longitude DESC LIMIT 1", "source_tables": ["country", "lake", "located"]}, "evidence": "Lake area coverage = [sum(area of the lakes in the country) / (area of the country)] * 100%"}
{"sample_id": 8267, "db_id": "mondial_geo", "final": {"question": "What is the average population growth rate of countries where more than 3 languages are used?", "sql": "SELECT SUM(T3.Population_Growth) / COUNT(T3.Country) FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country INNER JOIN population AS T3 ON T3.Country = T2.Country WHERE T2.Country IN ( SELECT Country FROM language GROUP BY Country HAVING COUNT(Country) > 3 ) GROUP BY T3.Country", "source_tables": ["country", "population", "language"]}, "evidence": ""}
{"sample_id": 8268, "db_id": "mondial_geo", "final": {"question": "Please list the names of the countries with an inflation rate that's 30% above the average.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country GROUP BY T1.Name, T2.Inflation HAVING T2.Inflation > AVG(T2.Inflation) * 1.3", "source_tables": ["economy", "country"]}, "evidence": "Average inflation rate = [sum(inflation) / count(countries)]; 30% above average implies inflation > 1.3 average inflation rate"}
{"sample_id": 8269, "db_id": "mondial_geo", "final": {"question": "Where country does Baghdad belongs to?", "sql": "SELECT Name FROM country WHERE Province = 'Baghdad'", "source_tables": ["country"]}, "evidence": "Baghdad is one of provinces"}
{"sample_id": 8270, "db_id": "mondial_geo", "final": {"question": "Which religion has the largest population in Martinique?", "sql": "SELECT T2.Name FROM country AS T1 INNER JOIN religion AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Martinique' ORDER BY T1.population DESC LIMIT 1", "source_tables": ["country", "religion"]}, "evidence": ""}
{"sample_id": 8271, "db_id": "mondial_geo", "final": {"question": "Which country is 41% Christian? Give the full name of the country.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN religion AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Christian' AND T2.Percentage = 41", "source_tables": ["country", "religion"]}, "evidence": ""}
{"sample_id": 8272, "db_id": "mondial_geo", "final": {"question": "Which two countries does the Detroit River flow through? Give the full name of the country.", "sql": "SELECT T3.Name FROM located AS T1 INNER JOIN river AS T2 ON T1.River = T2.Name INNER JOIN country AS T3 ON T3.Code = T1.Country WHERE T2.Name = 'Detroit River'", "source_tables": ["river", "country", "located"]}, "evidence": ""}
{"sample_id": 8273, "db_id": "mondial_geo", "final": {"question": "Which two countries have the longest border in the world? Give the full name of the country.", "sql": "SELECT T2.Country1, T2.Country2 FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 ORDER BY T2.Length DESC LIMIT 1", "source_tables": ["country", "borders"]}, "evidence": ""}
{"sample_id": 8274, "db_id": "mondial_geo", "final": {"question": "Which country has the most neighbors? Give the full name of the country.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC LIMIT 1", "source_tables": ["country", "borders"]}, "evidence": ""}
{"sample_id": 8275, "db_id": "mondial_geo", "final": {"question": "Which country is Mountain Cerro Chirripo located in? Give the full name of the country.", "sql": "SELECT DISTINCT T1.Name FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country WHERE T2.Mountain = 'Cerro Chirripo'", "source_tables": ["country", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8276, "db_id": "mondial_geo", "final": {"question": "How many mountains are there in Indonesia?", "sql": "SELECT COUNT(DISTINCT T2.Mountain) FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Indonesia'", "source_tables": ["country", "geo_mountain"]}, "evidence": "Indonesia refers to one of countries"}
{"sample_id": 8277, "db_id": "mondial_geo", "final": {"question": "What is the quantity of the mountains does Japan have?", "sql": "SELECT COUNT(DISTINCT T2.Mountain) FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Japan'", "source_tables": ["country", "geo_mountain"]}, "evidence": "Japan is one of country names"}
{"sample_id": 8278, "db_id": "mondial_geo", "final": {"question": "What is the latitude of the island on which Mount Andrinjitra is located?", "sql": "SELECT T1.Latitude FROM island AS T1 INNER JOIN mountainOnIsland AS T2 ON T1.Name = T2.Island WHERE T2.Mountain = 'Andringitra'", "source_tables": ["mountainonisland", "island"]}, "evidence": ""}
{"sample_id": 8279, "db_id": "mondial_geo", "final": {"question": "Which two countries share the second highest mountain? Give the country code.", "sql": "SELECT T1.Code FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country WHERE T2.Mountain = ( SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1, 1 )", "source_tables": ["country", "mountain", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8280, "db_id": "mondial_geo", "final": {"question": "What is the area of Egypt as a percentage of Asia?", "sql": "SELECT T2.Percentage FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent WHERE T3.Name = 'Asia' AND T1.Name = 'Egypt'", "source_tables": ["country", "continent", "encompasses"]}, "evidence": ""}
{"sample_id": 8281, "db_id": "mondial_geo", "final": {"question": "What is the area of Egypt as a percentage of Asia?", "sql": "SELECT T1.Area * 100 / T3.Area FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent WHERE T3.Name = 'Asia' AND T1.Name = 'Egypt'", "source_tables": ["country", "continent", "encompasses"]}, "evidence": ""}
{"sample_id": 8282, "db_id": "mondial_geo", "final": {"question": "Which city in Japan has the most people in the country?", "sql": "SELECT T2.Name FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Japan' ORDER BY T2.Population DESC LIMIT 1", "source_tables": ["country", "city"]}, "evidence": "most people refers to largest population"}
{"sample_id": 8283, "db_id": "mondial_geo", "final": {"question": "For the country in which Olsztyn is located, where is the capital?", "sql": "SELECT T1.Capital FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Olsztyn'", "source_tables": ["country", "city"]}, "evidence": "Olsztyn is one of country names"}
{"sample_id": 8284, "db_id": "mondial_geo", "final": {"question": "In which province is the highest volcano mountain located in?", "sql": "SELECT T1.Province FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country INNER JOIN mountain AS T3 ON T3.Name = T2.Mountain WHERE T3.Type = 'volcano' ORDER BY T3.Height DESC LIMIT 1", "source_tables": ["country", "mountain", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8285, "db_id": "mondial_geo", "final": {"question": "When did Uganda declare independence?", "sql": "SELECT T2.Independence FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Uganda'", "source_tables": ["country", "politics"]}, "evidence": "Uganda is one of country names"}
{"sample_id": 8286, "db_id": "mondial_geo", "final": {"question": "What kind of government does Iran have?", "sql": "SELECT T2.Government FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Iran'", "source_tables": ["country", "politics"]}, "evidence": "Uganda is one of country names"}
{"sample_id": 8287, "db_id": "mondial_geo", "final": {"question": "Where does Bermuda belong to? Give the full name of the country.", "sql": "SELECT T3.Name FROM locatedOn AS T1 INNER JOIN island AS T2 ON T1.Island = T2.Name INNER JOIN country AS T3 ON T3.Code = T1.Country WHERE T3.Name = 'Bermuda'", "source_tables": ["country", "locatedon", "island"]}, "evidence": "Bermuda is one of countries"}
{"sample_id": 8288, "db_id": "mondial_geo", "final": {"question": "Where is the capital of country which has the largest percentage of Malay people?", "sql": "SELECT T1.Capital FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Malay' ORDER BY T2.Percentage DESC LIMIT 1", "source_tables": ["country", "ethnicgroup"]}, "evidence": "Malay is one of country names"}
{"sample_id": 8289, "db_id": "mondial_geo", "final": {"question": "For the third largest country, which ethinic group has the most population?", "sql": "SELECT T2.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Name = ( SELECT Name FROM country ORDER BY Area DESC LIMIT 2, 1 ) GROUP BY T2.Name ORDER BY T2.Percentage * T1.Population DESC LIMIT 1", "source_tables": ["country", "ethnicgroup"]}, "evidence": ""}
{"sample_id": 8290, "db_id": "mondial_geo", "final": {"question": "Which country has the city of 114339 in population? Give the full name of the country.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.Country WHERE T2.Population = 114339", "source_tables": ["country", "city"]}, "evidence": ""}
{"sample_id": 8291, "db_id": "mondial_geo", "final": {"question": "How many rivers finally flows to the sea of 459m in depth?", "sql": "SELECT COUNT(*) FROM river WHERE Sea IN ( SELECT Name FROM sea WHERE Depth = 459 )", "source_tables": ["river", "sea"]}, "evidence": ""}
{"sample_id": 8292, "db_id": "mondial_geo", "final": {"question": "What is the area of the country which became independent in 1921/3/13?", "sql": "SELECT T1.Area FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T2.Independence = '1921-03-13'", "source_tables": ["country", "politics"]}, "evidence": ""}
{"sample_id": 8293, "db_id": "mondial_geo", "final": {"question": "What is the population density of the Petropavl's home country?", "sql": "SELECT CAST(T1.Population AS REAL) / T1.Area FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Petropavl'", "source_tables": ["country", "city"]}, "evidence": "Population density = Population / area"}
{"sample_id": 8294, "db_id": "mondial_geo", "final": {"question": "How many more people speak English than speak Scottish in United Kingdom?", "sql": "SELECT T3.Population * (T2.Percentage - T1.Percentage) FROM ethnicGroup AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Country = T2.Country INNER JOIN country AS T3 ON T1.Country = T3.Code WHERE T1.Name = 'Scottish' AND T2.Name = 'English' AND T3.Name = 'United Kingdom'", "source_tables": ["country", "ethnicgroup"]}, "evidence": "English and Scottish are two languages; United Kingdom is a country"}
{"sample_id": 8295, "db_id": "mondial_geo", "final": {"question": "What is the most populated city of the 12th highest density country?", "sql": "SELECT T2.Name FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.Country WHERE T1.Name = ( SELECT Name FROM country ORDER BY CAST(Population AS REAL) / Area LIMIT 11, 1 ) ORDER BY T2.Population DESC LIMIT 1", "source_tables": ["country", "city"]}, "evidence": "Population density = Population / area"}
{"sample_id": 8296, "db_id": "mondial_geo", "final": {"question": "How many times longer is the longest border in the United States than the shortest?", "sql": "SELECT MAX(T2.Length) / MIN(T2.Length) FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country2 WHERE T1.Name = 'United States'", "source_tables": ["country", "borders"]}, "evidence": "How many times longer = longest border / shortest border"}
{"sample_id": 8297, "db_id": "mondial_geo", "final": {"question": "Please list the capital cities of the countries that have more than 4 mountains.", "sql": "SELECT T1.Capital FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country GROUP BY T1.Name, T1.Capital HAVING COUNT(T1.Name) > 4", "source_tables": ["country", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8298, "db_id": "mondial_geo", "final": {"question": "How many mountains are there in the country with the greatest population?", "sql": "SELECT COUNT(T2.Mountain) FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY T1.Population DESC LIMIT 1", "source_tables": ["country", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8299, "db_id": "mondial_geo", "final": {"question": "Among the countries whose agriculture takes up more than 40% of its GDP, how many of them have less than 2 mountains?", "sql": "SELECT COUNT(T3.Country) FROM ( SELECT T1.Country FROM economy AS T1 INNER JOIN geo_mountain AS T2 ON T1.Country = T2.Country WHERE T1.Industry < 40 GROUP BY T1.Country HAVING COUNT(T1.Country) < 2 ) AS T3", "source_tables": ["economy", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8300, "db_id": "mondial_geo", "final": {"question": "Please list the mountains in the country with the lowest inflation rate.", "sql": "SELECT Mountain FROM geo_mountain WHERE Country = ( SELECT Country FROM economy ORDER BY Inflation ASC LIMIT 1 )", "source_tables": ["economy", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8301, "db_id": "mondial_geo", "final": {"question": "Among the independent countries whose type of government is republic, what is the biggest number of deserts they have?", "sql": "SELECT COUNT(T3.Desert) FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN geo_desert AS T3 ON T3.Country = T2.Country WHERE T2.Government = 'republic'", "source_tables": ["geo_desert", "country", "politics"]}, "evidence": ""}
{"sample_id": 8302, "db_id": "mondial_geo", "final": {"question": "Please list the deserts in the countries whose population is over 100000 and covers an area of under 500000.", "sql": "SELECT T2.Desert FROM country AS T1 INNER JOIN geo_desert AS T2 ON T1.Code = T2.Country WHERE T1.Area > 100000 AND T1.Population < 500000", "source_tables": ["geo_desert", "country"]}, "evidence": ""}
{"sample_id": 8303, "db_id": "mondial_geo", "final": {"question": "How many deserts are there in a country where over 90% of people speaks Armenian?", "sql": "SELECT COUNT(T2.Desert) FROM country AS T1 INNER JOIN geo_desert AS T2 ON T1.Code = T2.Country INNER JOIN language AS T3 ON T1.Code = T2.Country WHERE T3.Name = 'Armenian' AND T3.Percentage > 90", "source_tables": ["geo_desert", "country", "language"]}, "evidence": ""}
{"sample_id": 8304, "db_id": "mondial_geo", "final": {"question": "Which mountain is the highest in an independent country?", "sql": "SELECT T4.Name FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN geo_mountain AS T3 ON T3.Country = T2.Country INNER JOIN mountain AS T4 ON T4.Name = T3.Mountain WHERE T2.Independence IS NOT NULL ORDER BY T4.Height DESC LIMIT 1", "source_tables": ["country", "mountain", "politics", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8305, "db_id": "mondial_geo", "final": {"question": "How many volcanic mountains are there in countries whose population is no more than 5000000?", "sql": "SELECT COUNT(DISTINCT T3.Name) FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country INNER JOIN mountain AS T3 ON T3.Name = T2.Mountain WHERE T3.Type = 'volcanic' AND T1.Population <= 5000000", "source_tables": ["country", "mountain", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8306, "db_id": "mondial_geo", "final": {"question": "Among the countries with a GDP of over 1000000, how many of them have mountains higher than 1000?", "sql": "SELECT COUNT(DISTINCT T1.Name) FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country INNER JOIN economy AS T3 ON T3.Country = T1.Code INNER JOIN mountain AS T4 ON T4.Name = T2.Mountain WHERE T3.GDP > 1000000 AND T4.Height > 1000", "source_tables": ["economy", "country", "mountain", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8307, "db_id": "mondial_geo", "final": {"question": "What is the greatest length of the border between 2 independent countries?", "sql": "SELECT MAX(T3.Length) FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN borders AS T3 ON T3.Country1 = T2.Country WHERE T2.Independence IS NOT NULL", "source_tables": ["country", "borders", "politics"]}, "evidence": ""}
{"sample_id": 8308, "db_id": "mondial_geo", "final": {"question": "Among the countries whose government type is republic, how many of them shares a border that's longer than 200?", "sql": "SELECT COUNT(DISTINCT T1.Name) FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN borders AS T3 ON T3.Country1 = T2.Country WHERE T2.Government = 'republic' AND T3.Length > 200", "source_tables": ["country", "borders", "politics"]}, "evidence": ""}
{"sample_id": 8309, "db_id": "mondial_geo", "final": {"question": "Please list the countries that share the shortest border.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 ORDER BY T2.Length ASC LIMIT 1", "source_tables": ["country", "borders"]}, "evidence": ""}
{"sample_id": 8310, "db_id": "mondial_geo", "final": {"question": "What is the GDP of the European Continent?", "sql": "SELECT SUM(T4.GDP) FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN economy AS T4 ON T4.Country = T1.Code WHERE T3.Name = 'Europe'", "source_tables": ["economy", "country", "continent", "encompasses"]}, "evidence": ""}
{"sample_id": 8311, "db_id": "mondial_geo", "final": {"question": "How many mountains are there on the African Continent?", "sql": "SELECT COUNT(T3.Name) FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN province AS T4 ON T4.Country = T1.Code INNER JOIN geo_mountain AS T5 ON T5.Province = T4.Name WHERE T3.Name = 'European'", "source_tables": ["province", "continent", "geo_mountain", "country", "encompasses"]}, "evidence": ""}
{"sample_id": 8312, "db_id": "mondial_geo", "final": {"question": "Of the deserts on the America Continent, which one covers the greatest area?", "sql": "SELECT T5.Name FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN geo_desert AS T4 ON T4.Country = T1.Code INNER JOIN desert AS T5 ON T5.Name = T4.Desert WHERE T3.Name = 'America' ORDER BY T5.Area DESC LIMIT 1", "source_tables": ["desert", "geo_desert", "continent", "country", "encompasses"]}, "evidence": ""}
{"sample_id": 8313, "db_id": "mondial_geo", "final": {"question": "Please list the countries on the European Continent that have a population growth of more than 3%.", "sql": "SELECT T2.Country FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN population AS T4 ON T4.Country = T1.Code WHERE T3.Name = 'Europe' AND T4.Population_Growth > 0.03", "source_tables": ["country", "population", "continent", "encompasses"]}, "evidence": ""}
{"sample_id": 8314, "db_id": "mondial_geo", "final": {"question": "How many countries on the European Continent has an infant mortality rate per thousand of over 100?", "sql": "SELECT COUNT(T1.Name) FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN population AS T4 ON T4.Country = T1.Code WHERE T3.Name = 'Europe' AND T4.Infant_Mortality < 100", "source_tables": ["country", "population", "continent", "encompasses"]}, "evidence": ""}
{"sample_id": 8315, "db_id": "mondial_geo", "final": {"question": "Among the countries that use Bosnian as their language, how many of them don't have a positive population growth rate?", "sql": "SELECT COUNT(DISTINCT T1.Name) FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country INNER JOIN population AS T3 ON T3.Country = T2.Country WHERE T2.Name = 'Bosnian' AND T3.Population_Growth < 0", "source_tables": ["country", "population", "language"]}, "evidence": ""}
{"sample_id": 8316, "db_id": "mondial_geo", "final": {"question": "What is the average percentage of agriculture of GDP in countries on the African Continent?", "sql": "SELECT AVG(T4.Agriculture) FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN economy AS T4 ON T4.Country = T3.Code WHERE T1.Name = 'Africa'", "source_tables": ["economy", "country", "continent", "encompasses"]}, "evidence": ""}
{"sample_id": 8317, "db_id": "mondial_geo", "final": {"question": "Among the independent countries, how many of them has a GDP per capita of over 5000?", "sql": "SELECT COUNT(DISTINCT T1.Name) FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN economy AS T3 ON T3.Country = T2.Country WHERE T2.Independence IS NOT NULL AND T3.GDP > 5000", "source_tables": ["economy", "country", "politics"]}, "evidence": ""}
{"sample_id": 8318, "db_id": "mondial_geo", "final": {"question": "What is the average inflation rate of the biggest continent?", "sql": "SELECT AVG(T4.Inflation) FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN economy AS T4 ON T4.Country = T3.Code WHERE T1.Name = ( SELECT Name FROM continent ORDER BY Area DESC LIMIT 1 )", "source_tables": ["economy", "country", "continent", "encompasses"]}, "evidence": ""}
{"sample_id": 8319, "db_id": "mondial_geo", "final": {"question": "Which island is city Balikpapan located on? How big is the island?", "sql": "SELECT T3.Name, T3.Area FROM city AS T1 INNER JOIN locatedOn AS T2 ON T1.Name = T2.City INNER JOIN island AS T3 ON T3.Name = T2.Island WHERE T1.Name = 'Balikpapan'", "source_tables": ["city", "locatedon", "island"]}, "evidence": ""}
{"sample_id": 8320, "db_id": "mondial_geo", "final": {"question": "List all the cities in Sumatra and state the population of each city.", "sql": "SELECT T1.Name, T1.Population FROM city AS T1 INNER JOIN locatedOn AS T2 ON T1.Name = T2.City INNER JOIN island AS T3 ON T3.Name = T2.Island WHERE T3.Name = 'Sumatra'", "source_tables": ["city", "locatedon", "island"]}, "evidence": "Sumatra is an island"}
{"sample_id": 8321, "db_id": "mondial_geo", "final": {"question": "On which island does South Yorkshire situated? State it's longtitude and latitude.", "sql": "SELECT DISTINCT T3.Longitude, T3.Latitude FROM city AS T1 INNER JOIN locatedOn AS T2 ON T1.Name = T2.City INNER JOIN island AS T3 ON T3.Name = T2.Island WHERE T1.Province = 'South Yorkshire'", "source_tables": ["city", "locatedon", "island"]}, "evidence": "'South Yorkshire' is a province"}
{"sample_id": 8322, "db_id": "mondial_geo", "final": {"question": "List all islands that are greater than the island on which Warwickshire is located.", "sql": "SELECT DISTINCT Name FROM island WHERE Area > ( SELECT DISTINCT T3.Area FROM city AS T1 INNER JOIN locatedOn AS T2 ON T1.Name = T2.City INNER JOIN island AS T3 ON T3.Name = T2.Island WHERE T1.Province = 'Warwickshire' )", "source_tables": ["city", "locatedon", "island"]}, "evidence": "Warwickshire is a province"}
{"sample_id": 8323, "db_id": "mondial_geo", "final": {"question": "For island area less than 200, list the island name and city it belongs to.", "sql": "SELECT DISTINCT T3.Name, T1.Name FROM city AS T1 INNER JOIN locatedOn AS T2 ON T1.Name = T2.City INNER JOIN island AS T3 ON T3.Name = T2.Island WHERE T3.Area < 200", "source_tables": ["city", "locatedon", "island"]}, "evidence": ""}
{"sample_id": 8324, "db_id": "mondial_geo", "final": {"question": "In which province is city Glenrothes located? What is the capital of the province?", "sql": "SELECT T2.Province, T1.Capital FROM province AS T1 INNER JOIN city AS T2 ON T1.Name = T2.Province AND T1.Country = T2.Country WHERE T2.Name = 'Glenrothes'", "source_tables": ["city", "province"]}, "evidence": ""}
{"sample_id": 8325, "db_id": "mondial_geo", "final": {"question": "List the all the cities and its city population for provinces with population more than 1000000.", "sql": "SELECT T1.Name, T1.Population FROM city AS T1 INNER JOIN province AS T2 ON T2.Name = T1.Province WHERE T2.Population > 1000000", "source_tables": ["city", "province"]}, "evidence": ""}
{"sample_id": 8326, "db_id": "mondial_geo", "final": {"question": "List all the coral islands along with its city and province.", "sql": "SELECT City, Province FROM locatedOn WHERE Island IN ( SELECT Name FROM island WHERE Type = 'coral' )", "source_tables": ["locatedon", "island"]}, "evidence": "Baltic Sea is a sea located in Northern Europe"}
{"sample_id": 8327, "db_id": "mondial_geo", "final": {"question": "What is the average population for all cities location at Baltic Sea?", "sql": "SELECT AVG(T1.Population) FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN sea AS T3 ON T3.Name = T2.Sea WHERE T3.Name = 'Baltic Sea'", "source_tables": ["city", "sea", "located"]}, "evidence": "Baltic Sea is a sea located in Northern Europe"}
{"sample_id": 8328, "db_id": "mondial_geo", "final": {"question": "Calculate the percentage of population in Edmonton city to the population of its province.", "sql": "SELECT CAST(T1.Population AS REAL) * 100 / T2.Population FROM city AS T1 INNER JOIN province AS T2 ON T1.Province = T2.Name WHERE T1.Name = 'Edmonton'", "source_tables": ["city", "province"]}, "evidence": "Percentage of population in each city = population(city) / population(province) * 100%"}
{"sample_id": 8329, "db_id": "mondial_geo", "final": {"question": "Which are the rivers that flows to Black Sea?", "sql": "SELECT Name FROM river WHERE Sea = 'Black Sea'", "source_tables": ["river"]}, "evidence": "Black Sea is a sea located in Eastern Europe and Western Asia"}
{"sample_id": 8330, "db_id": "mondial_geo", "final": {"question": "State the name of the lake in Albania province and in which city does it located at.", "sql": "SELECT Lake, City FROM located WHERE Province = 'Albania' AND Lake IS NOT NULL", "source_tables": ["located"]}, "evidence": ""}
{"sample_id": 8331, "db_id": "mondial_geo", "final": {"question": "Name the tallest mountain on Himalaya and what is its height.", "sql": "SELECT Name, Height FROM mountain WHERE Mountains = 'Himalaya' ORDER BY Height DESC LIMIT 1", "source_tables": ["mountain"]}, "evidence": "Tallest refers to max(height)"}
{"sample_id": 8332, "db_id": "mondial_geo", "final": {"question": "List all the mountains that are volcanic along with its longitude and latitude.", "sql": "SELECT Name, Latitude, Longitude FROM mountain WHERE Type = 'volcano'", "source_tables": ["mountain"]}, "evidence": ""}
{"sample_id": 8333, "db_id": "mondial_geo", "final": {"question": "Name all the volcano mountains between the height of 2000 to 4000.", "sql": "SELECT Name FROM mountain WHERE Type = 'volcano' AND Height BETWEEN 2000 AND 4000", "source_tables": ["mountain"]}, "evidence": ""}
{"sample_id": 8334, "db_id": "mondial_geo", "final": {"question": "Please state the longest river that flows to the Mediterranean Sea.", "sql": "SELECT Name FROM river WHERE Sea = 'Mediterranean Sea' ORDER BY Length DESC LIMIT 1", "source_tables": ["river"]}, "evidence": ""}
{"sample_id": 8335, "db_id": "mondial_geo", "final": {"question": "How many percent of the mountains on Andes which are non-volcanic?", "sql": "SELECT CAST(SUM(CASE WHEN type != 'volcano' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM mountain WHERE Mountains = 'Andes'", "source_tables": ["mountain"]}, "evidence": "Percent of non-volcanic mountains = count(mountains = 'Andes' & type ! = 'volcano') / count(mountains = 'Andes') * 100%"}
{"sample_id": 8336, "db_id": "mondial_geo", "final": {"question": "List all the cities and provinces located at the rivers that flows to Atlantic Ocean.", "sql": "SELECT T1.Name, T1.Province FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Sea = 'Atlantic Ocean'", "source_tables": ["river", "city", "located"]}, "evidence": "Atlantic Ocean is the second-largest ocean on Earth, after the Pacific Ocean; Ocean and sea share the same meaning"}
{"sample_id": 8337, "db_id": "mondial_geo", "final": {"question": "What is the name and length of rivers located at 'Orleans' city?", "sql": "SELECT T3.Name, T3.Length FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T1.Name = 'Orleans'", "source_tables": ["river", "city", "located"]}, "evidence": "Orleans is a city in north-central France"}
{"sample_id": 8338, "db_id": "mondial_geo", "final": {"question": "What is the height of the mountain on which river 'Lech' is located? Please also provide its longitude and latitude.", "sql": "SELECT T1.Height, T1.Latitude, T1.Longitude FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN located AS T4 ON T4.Province = T3.Name WHERE T4.River = 'Lech'", "source_tables": ["mountain", "located", "province", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8339, "db_id": "mondial_geo", "final": {"question": "Name the river of which Lorraine is on. Please name the mountains where to source flow from?", "sql": "SELECT T1.SourceLongitude, T1.SourceLatitude, T1.SourceAltitude FROM river AS T1 INNER JOIN geo_river AS T2 ON T2.River = T1.Name WHERE T2.Province = 'Lorraine'", "source_tables": ["river", "geo_river"]}, "evidence": "Lorraine is a province"}
{"sample_id": 8340, "db_id": "mondial_geo", "final": {"question": "Which mountain does the river source Blue Nile located? State the height of the mountain.", "sql": "SELECT T1.Name, T1.Height FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN geo_source AS T4 ON T4.Province = T3.Name WHERE T4.River = 'Blue Nile'", "source_tables": ["geo_source", "mountain", "province", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8341, "db_id": "mondial_geo", "final": {"question": "Name the river at Little Rock city. State the length of the river.", "sql": "SELECT T3.Length FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T1.Name = 'Little Rock'", "source_tables": ["river", "city", "located"]}, "evidence": ""}
{"sample_id": 8342, "db_id": "mondial_geo", "final": {"question": "List all rivers and province it is located that is greater than 1000 in length.", "sql": "SELECT T1.Province, T2.Name FROM geo_river AS T1 INNER JOIN river AS T2 ON T1.River = T2.Name WHERE T2.Length > 1000", "source_tables": ["river", "geo_river"]}, "evidence": ""}
{"sample_id": 8343, "db_id": "mondial_geo", "final": {"question": "In which province and country does Moldoveanu located? State its height.", "sql": "SELECT T2.Province, T2.Country, T1.Height FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain WHERE T1.Name = 'Moldoveanu'", "source_tables": ["mountain", "geo_mountain"]}, "evidence": "Moldoveanu is a mountain"}
{"sample_id": 8344, "db_id": "mondial_geo", "final": {"question": "Provide all rivers name and length in USA.", "sql": "SELECT DISTINCT T3.Name, T3.Length FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T2.Country = 'USA'", "source_tables": ["river", "city", "located"]}, "evidence": "USA is a country"}
{"sample_id": 8345, "db_id": "mondial_geo", "final": {"question": "What is the average height of all mountains in Nepal?", "sql": "SELECT AVG(T1.Height) FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain WHERE T2.Province = 'Nepal'", "source_tables": ["mountain", "geo_mountain"]}, "evidence": "Nepal is a province"}
{"sample_id": 8346, "db_id": "mondial_geo", "final": {"question": "For all cities where Seine is located at, which city has the greatest population? Calculate the difference from the city with least population.", "sql": "SELECT MAX(T1.Population) - MIN(T1.population) FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Name = 'Seine'", "source_tables": ["river", "city", "located"]}, "evidence": "Seince is a river; Population disparity refers to difference between cities with greatest and least population; Difference between cities with greatest and least population means max(population) - min(population)"}
{"sample_id": 8347, "db_id": "mondial_geo", "final": {"question": "Which are the 2 rivers located at Belgrade city? Which river is longer and how by much?", "sql": "SELECT T1.Name, T1.Length FROM river AS T1 INNER JOIN located AS T2 ON T1.Name = T2.River INNER JOIN city AS T3 ON T3.Name = T2.City WHERE T3.Name = 'Belgrade'", "source_tables": ["river", "city", "located"]}, "evidence": ""}
{"sample_id": 8348, "db_id": "mondial_geo", "final": {"question": "Which nations have a 100% Spanish-speaking population?", "sql": "SELECT Country FROM language WHERE Name = 'Spanish' AND Percentage = 100", "source_tables": ["language"]}, "evidence": ""}
{"sample_id": 8349, "db_id": "mondial_geo", "final": {"question": "Which countries are dependent on the British Crown?", "sql": "SELECT Country FROM politics WHERE Government = 'British crown dependency'", "source_tables": ["politics"]}, "evidence": ""}
{"sample_id": 8350, "db_id": "mondial_geo", "final": {"question": "What are the names of the rivers in Canada?", "sql": "SELECT DISTINCT T1.River FROM located AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Canada' AND T1.River IS NOT NULL", "source_tables": ["country", "located"]}, "evidence": ""}
{"sample_id": 8351, "db_id": "mondial_geo", "final": {"question": "What is the name of the country whose citizens have the lowest purchasing power?", "sql": "SELECT T2.Name FROM economy AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code ORDER BY T1.Inflation DESC LIMIT 1", "source_tables": ["economy", "country"]}, "evidence": "Inflation can reduce purchasing power over time for recipients and payers."}
{"sample_id": 8352, "db_id": "mondial_geo", "final": {"question": "What province does the 4th most populous city in the United Kingdom belong to, and how many people live there?", "sql": "SELECT T1.Province, T1.Population FROM city AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'United Kingdom' ORDER BY T1.Population DESC LIMIT 3, 1", "source_tables": ["country", "city"]}, "evidence": ""}
{"sample_id": 8353, "db_id": "mondial_geo", "final": {"question": "How many Jewish residents are there in Moldova?", "sql": "SELECT T2.Percentage * T1.Population FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Moldova' AND T2.Name = 'Jewish'", "source_tables": ["country", "ethnicgroup"]}, "evidence": "Moldova is one country located in Eastern Europe; The number of residents can be computed by percentage * population"}
{"sample_id": 8354, "db_id": "mondial_geo", "final": {"question": "What is the average area of Asian countries?", "sql": "SELECT AVG(Area) FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country WHERE T2.Continent = 'Asia'", "source_tables": ["country", "encompasses"]}, "evidence": "Asia is a continent"}
{"sample_id": 8355, "db_id": "mondial_geo", "final": {"question": "Which country is home to the world's tiniest desert, and what are its longitude and latitude?", "sql": "SELECT T2.Country, T1.Latitude, T1.Longitude FROM desert AS T1 INNER JOIN geo_desert AS T2 ON T1.Name = T2.Desert WHERE T1.Name = ( SELECT Name FROM desert ORDER BY Area ASC LIMIT 1 )", "source_tables": ["geo_desert", "desert"]}, "evidence": ""}
{"sample_id": 8356, "db_id": "mondial_geo", "final": {"question": "How many people in Montenegro speaks Serbian?", "sql": "SELECT T1.Percentage * T2.Population FROM language AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Name = 'Serbian' AND T2.Name = 'Montenegro'", "source_tables": ["country", "language"]}, "evidence": "Serbian is one language; Montenegro is a country located in Southeastern Europe"}
{"sample_id": 8357, "db_id": "mondial_geo", "final": {"question": "How many mountains are there in the country with the most land area?", "sql": "SELECT COUNT(Mountain) FROM geo_mountain WHERE Country = ( SELECT Code FROM country ORDER BY Area DESC LIMIT 1 )", "source_tables": ["country", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8358, "db_id": "mondial_geo", "final": {"question": "Which sea is the shallowest and which country surrounds it?", "sql": "SELECT DISTINCT T2.Name FROM located AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE Sea = ( SELECT Name FROM sea ORDER BY Depth ASC LIMIT 1 )", "source_tables": ["country", "sea", "located"]}, "evidence": "Shallow sea refers to the sea with less depth"}
{"sample_id": 8359, "db_id": "mondial_geo", "final": {"question": "Which nation's GDP is the lowest among those that are communist states?", "sql": "SELECT T2.Country FROM politics AS T1 INNER JOIN economy AS T2 ON T1.Country = T2.Country WHERE T1.Government = 'Communist state' ORDER BY T2.GDP ASC LIMIT 1", "source_tables": ["economy", "politics"]}, "evidence": "Communist is a government form"}
{"sample_id": 8360, "db_id": "mondial_geo", "final": {"question": "What kind of political system is in place in the country with the highest inflation rate?", "sql": "SELECT T1.Government FROM politics AS T1 INNER JOIN economy AS T2 ON T1.Country = T2.Country ORDER BY T2.Inflation DESC LIMIT 1", "source_tables": ["economy", "politics"]}, "evidence": "Political system refers to government form"}
{"sample_id": 8361, "db_id": "mondial_geo", "final": {"question": "Which nation has the greatest infant mortality rate among those that attained independence in 1960?", "sql": "SELECT T1.Country FROM politics AS T1 INNER JOIN population AS T2 ON T1.Country = T2.Country WHERE STRFTIME('%Y', T1.Independence) = '1960' ORDER BY T2.Infant_Mortality DESC LIMIT 1", "source_tables": ["population", "politics"]}, "evidence": ""}
{"sample_id": 8362, "db_id": "mondial_geo", "final": {"question": "What is the smallest border's length, and what form of government do the two nations bordering it have?", "sql": "SELECT T1.Government, T3.Government FROM politics AS T1 INNER JOIN borders AS T2 ON T1.Country = T2.Country1 INNER JOIN politics AS T3 ON T3.Country = T2.Country2 ORDER BY T2.Length ASC LIMIT 1", "source_tables": ["borders", "politics"]}, "evidence": ""}
{"sample_id": 8363, "db_id": "mondial_geo", "final": {"question": "Which Arabic-speaking country has the smallest population?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Arabic' AND T2.Percentage = 100 ORDER BY T1.Population ASC LIMIT 1", "source_tables": ["country", "language"]}, "evidence": "Arabic-speaking country = country that speaks 100% Arabic"}
{"sample_id": 8364, "db_id": "mondial_geo", "final": {"question": "What provinces encompass the world's biggest desert in terms of overall area?", "sql": "SELECT Province FROM geo_desert WHERE Desert = ( SELECT Name FROM desert ORDER BY Area DESC LIMIT 1 )", "source_tables": ["geo_desert", "desert"]}, "evidence": ""}
{"sample_id": 8365, "db_id": "mondial_geo", "final": {"question": "How many lakes are there in the 4th most populous African country with a republican form of government?", "sql": "SELECT COUNT(*) FROM geo_lake WHERE Country = ( SELECT T4.Code FROM ( SELECT T2.Code, T2.Population FROM encompasses AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code INNER JOIN politics AS T3 ON T1.Country = T3.Country WHERE T1.Continent = 'Africa' AND T1.Percentage = 100 AND T3.Government = 'republic' ORDER BY Population DESC LIMIT 4 ) AS T4 ORDER BY population ASC LIMIT 1 )", "source_tables": ["geo_lake", "country", "politics", "encompasses"]}, "evidence": ""}
{"sample_id": 8366, "db_id": "mondial_geo", "final": {"question": "Which religion is most prevalent in Asia?", "sql": "SELECT T4.Name FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN religion AS T4 ON T4.Country = T3.Code WHERE T1.Name = 'Asia' GROUP BY T4.Name ORDER BY SUM(T4.Percentage) DESC LIMIT 1", "source_tables": ["country", "continent", "religion", "encompasses"]}, "evidence": "Most prevalent religion refers to the religion with the most population percentage"}
{"sample_id": 8367, "db_id": "mondial_geo", "final": {"question": "What is the difference in population between the two nations where the tallest peak is located?", "sql": "SELECT * FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Country = T2.Country INNER JOIN country AS T4 ON T4.Code = T3.Country WHERE T1.Name = ( SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1 )", "source_tables": ["country", "mountain", "province", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8368, "db_id": "mondial_geo", "final": {"question": "What are the names of the sea that can be found on the island with the biggest area?", "sql": "SELECT T2.Name FROM islandIn AS T1 INNER JOIN sea AS T2 ON T2.Name = T1.Sea WHERE T1.Island = ( SELECT Name FROM island ORDER BY Area DESC LIMIT 1 )", "source_tables": ["islandin", "sea", "island"]}, "evidence": ""}
{"sample_id": 8369, "db_id": "mondial_geo", "final": {"question": "What are the names of the three nations where the longest river that empties into the Atlantic Ocean stretches to?", "sql": "SELECT DISTINCT T1.Country FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Name = ( SELECT Name FROM river WHERE Sea = 'Atlantic Ocean' ORDER BY Length DESC LIMIT 1 )", "source_tables": ["river", "city", "located"]}, "evidence": "Empties into the Atlantic Ocean = flows to the Atlantic Ocean"}
{"sample_id": 8370, "db_id": "mondial_geo", "final": {"question": "How many people reside in the nation's capital city, which is situated in the nation that attained independence on 8/15/1947?", "sql": "SELECT T3.Population FROM politics AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code INNER JOIN city AS T3 ON T3.Name = T2.Capital WHERE T1.Independence = '1947-08-15'", "source_tables": ["country", "city", "politics"]}, "evidence": ""}
{"sample_id": 8371, "db_id": "mondial_geo", "final": {"question": "What is the total number of Afro-Asian people in the most populous Asian country governed by a monarchy?", "sql": "SELECT T5.Percentage * T6.Population FROM ethnicGroup AS T5 INNER JOIN country AS T6 ON T5.Country = T6.Code WHERE Country = ( SELECT T3.Code FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN politics AS T4 ON T4.Country = T3.Code WHERE T4.Government = 'monarchy' AND T1.Name = 'Asia' ORDER BY T3.Population DESC LIMIT 1 ) AND T5.Name = 'Afro-Asian'", "source_tables": ["continent", "ethnicgroup", "country", "politics", "encompasses"]}, "evidence": "Total Number of People = Percentage * Population"}
{"sample_id": 8372, "db_id": "mondial_geo", "final": {"question": "What are the names of the cities along the Euphrat River's course? Indicate the capital city of the nation where the Euphrat River flows.", "sql": "SELECT T2.City, T1.Capital FROM country AS T1 INNER JOIN located AS T2 ON T1.Code = T2.Country INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Name = 'Euphrat'", "source_tables": ["country", "located", "river"]}, "evidence": ""}
{"sample_id": 8373, "db_id": "mondial_geo", "final": {"question": "What is the proportion of English-speaking citizens in the countries that rely on the United States compared to the total number of citizens in those countries?", "sql": "SELECT T2.Percentage * T1.Population FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country INNER JOIN politics AS T3 ON T3.Country = T2.Country WHERE T3.Dependent = 'USA' AND T2.Name = 'English'", "source_tables": ["country", "language", "politics"]}, "evidence": ""}
{"sample_id": 8374, "db_id": "mondial_geo", "final": {"question": "Which federal republic country in Europe has the most provinces, and what proportion of GDP is devoted to services?\nCalculate the population density as well.", "sql": "SELECT T1.Country, T2.Service , SUM(T1.Population) / SUM(T1.Area) FROM province AS T1 INNER JOIN economy AS T2 ON T1.Country = T2.Country WHERE T1.Country IN ( SELECT Country FROM encompasses WHERE Continent = 'Europe' ) GROUP BY T1.Country, T2.Service ORDER BY COUNT(T1.Name) DESC LIMIT 1", "source_tables": ["economy", "province", "encompasses"]}, "evidence": "Republic is on of government forms; Percentage of Services of the GDP was mentioned in economy.Service; Population Density = Population / Area"}
{"sample_id": 8375, "db_id": "mondial_geo", "final": {"question": "What is the capital of the 3rd most populated country in Asia and what is the capital city's ratio in percentage (%) against the overall population of the country?", "sql": "SELECT T4.Capital, CAST(T3.Population AS REAL) * 100 / T4.Population FROM city AS T3 INNER JOIN ( SELECT T1.Capital , T1.Population FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country WHERE T2.Continent = 'Asia' ORDER BY T1.Population DESC LIMIT 2, 1 ) AS T4 ON T3.Name = T4.Capital", "source_tables": ["country", "city", "encompasses"]}, "evidence": ""}
{"sample_id": 8376, "db_id": "mondial_geo", "final": {"question": "What's the name of the second biggest desert?", "sql": "SELECT Name FROM desert ORDER BY Area DESC LIMIT 1, 1", "source_tables": ["desert"]}, "evidence": ""}
{"sample_id": 8377, "db_id": "mondial_geo", "final": {"question": "What is the main spoken language in MNE?", "sql": "SELECT Name FROM language WHERE Country = 'MNE' ORDER BY Percentage DESC LIMIT 1", "source_tables": ["language"]}, "evidence": "MNE is one country"}
{"sample_id": 8378, "db_id": "mondial_geo", "final": {"question": "What's the percentage of people in Cayman Islands speak English?", "sql": "SELECT T1.Percentage FROM language AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Cayman Islands' AND T1.Name = 'English'", "source_tables": ["country", "language"]}, "evidence": "Cayman Islands is a country"}
{"sample_id": 8379, "db_id": "mondial_geo", "final": {"question": "Which country was the source of Pjandsh River? Give the full name of the country.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN located AS T2 ON T1.Code = T2.Country WHERE T2.River = 'Pjandsh'", "source_tables": ["country", "located"]}, "evidence": ""}
{"sample_id": 8380, "db_id": "mondial_geo", "final": {"question": "For the countries have the population north of a billion, which one has the lowest GDP? Give the full name of the country.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Population > 1000000000 ORDER BY T2.GDP ASC LIMIT 1", "source_tables": ["economy", "country"]}, "evidence": "billion = 1000000000"}
{"sample_id": 8381, "db_id": "mondial_geo", "final": {"question": "What is the capital of the country that has the Licancabur Mountain?", "sql": "SELECT T4.Capital FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN country AS T4 ON T4.Province = T3.Name WHERE T1.Name = 'Licancabur'", "source_tables": ["country", "mountain", "province", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8382, "db_id": "mondial_geo", "final": {"question": "How much sea is around the island where Kerinci Mountain is located?", "sql": "SELECT COUNT(T4.Sea) FROM mountain AS T1 INNER JOIN mountainOnIsland AS T2 ON T1.Name = T2.Mountain INNER JOIN island AS T3 ON T3.Name = T2.Island INNER JOIN islandIn AS T4 ON T4.Island = T3.Name WHERE T1.Name = 'Kerinci'", "source_tables": ["mountain", "islandin", "mountainonisland", "island"]}, "evidence": ""}
{"sample_id": 8383, "db_id": "mondial_geo", "final": {"question": "Which three countries does the Amazonas flow through? Give the full name of the countries.", "sql": "SELECT DISTINCT T4.Name FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River INNER JOIN country AS T4 ON T4.Code = T2.Country WHERE T3.Name = 'Amazonas'", "source_tables": ["river", "city", "country", "located"]}, "evidence": "Amazonas flow is a river"}
{"sample_id": 8384, "db_id": "mondial_geo", "final": {"question": "Which country became independent on 1492-01-01? Give the full name of the country.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T2.Independence = '1492-01-01'", "source_tables": ["country", "politics"]}, "evidence": ""}
{"sample_id": 8385, "db_id": "mondial_geo", "final": {"question": "How many cities in France have a population of more than 100,000?", "sql": "SELECT COUNT(T2.Name) FROM country AS T1 INNER JOIN city AS T2 ON T2.Country = T1.Code WHERE T1.Name = 'France' AND T2.Population > 100000", "source_tables": ["country", "city"]}, "evidence": ""}
{"sample_id": 8386, "db_id": "mondial_geo", "final": {"question": "Among all the rivers finally flows to the sea of 540m in depth, which one has the longest length?", "sql": "SELECT T2.Name FROM sea AS T1 INNER JOIN river AS T2 ON T2.Sea = T1.Name WHERE T1.Depth = 540 ORDER BY T2.Length DESC LIMIT 1", "source_tables": ["river", "sea"]}, "evidence": ""}
{"sample_id": 8387, "db_id": "mondial_geo", "final": {"question": "In which Country is the second highest volcanic mountain located in? Give the code of the country.", "sql": "SELECT T3.Country FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province ORDER BY T1.Height DESC LIMIT 1, 1", "source_tables": ["mountain", "province", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8388, "db_id": "mondial_geo", "final": {"question": "What is the longitude of the island on which Mount Olympos is located?", "sql": "SELECT T3.Longitude FROM mountain AS T1 INNER JOIN mountainOnIsland AS T2 ON T1.Name = T2.Mountain INNER JOIN island AS T3 ON T3.Name = T2.Island WHERE T1.Name = 'Olympos'", "source_tables": ["mountain", "mountainonisland", "island"]}, "evidence": ""}
{"sample_id": 8389, "db_id": "mondial_geo", "final": {"question": "For all the countries that is smaller than 100 square kilometres, which one has the most GDP?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Area < 100 ORDER BY T2.GDP DESC LIMIT 1", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8390, "db_id": "mondial_geo", "final": {"question": "What is the total number of cities that Japan have?", "sql": "SELECT COUNT(T3.Name) FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T1.Name = 'Japan'", "source_tables": ["country", "city", "province"]}, "evidence": "Japan is a country"}
{"sample_id": 8391, "db_id": "mondial_geo", "final": {"question": "Which city has most population other than its capital in Bangladesh?", "sql": "SELECT T3.Name FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T1.Name = 'Bangladesh' AND T3.Name <> T1.Capital ORDER BY T3.Population DESC LIMIT 1", "source_tables": ["country", "city", "province"]}, "evidence": "Bangladesh is a country"}
{"sample_id": 8510, "db_id": "software_company", "final": {"question": "How many customers have never married?", "sql": "SELECT COUNT(ID) FROM Customers WHERE MARITAL_STATUS = 'Never-married'", "source_tables": ["customers"]}, "evidence": "MARITAL_STATUS = 'Never-married';"}
{"sample_id": 8511, "db_id": "software_company", "final": {"question": "Among all the customers, how many of them are teenagers?", "sql": "SELECT COUNT(ID) FROM Customers WHERE age >= 13 AND age <= 19", "source_tables": ["customers"]}, "evidence": "teenager is a person aged between 13 and 19 years;"}
{"sample_id": 8512, "db_id": "software_company", "final": {"question": "Please list the occupations of the customers with an education level of 11.", "sql": "SELECT DISTINCT OCCUPATION FROM Customers WHERE EDUCATIONNUM = 11", "source_tables": ["customers"]}, "evidence": "education level of 11 refers to EDUCATIONNUM = 11;"}
{"sample_id": 8513, "db_id": "software_company", "final": {"question": "Of the first 60,000 customers' responses to the incentive mailing sent by the marketing department, how many of them are considered a true response?", "sql": "SELECT COUNT(REFID) custmoer_number FROM Mailings1_2 WHERE RESPONSE = 'true'", "source_tables": ["mailings1_2"]}, "evidence": "RESPONSE = 'true';"}
{"sample_id": 8514, "db_id": "software_company", "final": {"question": "Among the customers over 30, how many of them are Machine-op-inspcts?", "sql": "SELECT COUNT(ID) FROM Customers WHERE OCCUPATION = 'Machine-op-inspct' AND age > 30", "source_tables": ["customers"]}, "evidence": "over 30 refers to age > 30; OCCUPATION = 'Machine-op-inspct';"}
{"sample_id": 8515, "db_id": "software_company", "final": {"question": "How many female customers have an education level of over 11?", "sql": "SELECT COUNT(ID) FROM Customers WHERE EDUCATIONNUM > 11 AND SEX = 'Female'", "source_tables": ["customers"]}, "evidence": "education level of 11 refers to EDUCATIONNUM = 11; SEX = 'Female';"}
{"sample_id": 8516, "db_id": "software_company", "final": {"question": "Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are female?", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.SEX = 'Female' AND T2.RESPONSE = 'true'", "source_tables": ["mailings1_2", "customers"]}, "evidence": "RESPONSE = 'true'; SEX = 'Female';"}
{"sample_id": 8517, "db_id": "software_company", "final": {"question": "Please list the occupations of the customers over 40 and have sent a true response to the incentive mailing sent by the marketing department.", "sql": "SELECT DISTINCT T1.OCCUPATION FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.age > 40 AND T2.RESPONSE = 'true'", "source_tables": ["mailings1_2", "customers"]}, "evidence": "over 40 refers to age > 40; RESPONSE = 'true';"}
{"sample_id": 8518, "db_id": "software_company", "final": {"question": "Among the male customers, how many of them come from a place with over 30,000 inhabitants?", "sql": "SELECT COUNT(T1.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Male' AND T2.INHABITANTS_K > 30", "source_tables": ["demog", "customers"]}, "evidence": "SEX = 'Male', over 30,000 inhabitants refer to NHABITANTS_K > 30; place refers to GEOID;"}
{"sample_id": 8519, "db_id": "software_company", "final": {"question": "How many customers are from the place with the highest average income per month?", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID ORDER BY T2.INCOME_K DESC LIMIT 1", "source_tables": ["demog", "customers"]}, "evidence": "place with the highest average income per month refers to GEOID where MAX(INCOME_K);"}
{"sample_id": 8520, "db_id": "software_company", "final": {"question": "Among the customers from a place with more than 20,000 and less than 30,000 inhabitants, how many of them are Machine-op-inspcts?", "sql": "SELECT COUNT(T1.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.OCCUPATION = 'Machine-op-inspct' AND T2.INHABITANTS_K > 20 AND T2.INHABITANTS_K < 30", "source_tables": ["demog", "customers"]}, "evidence": "place with more than 20,000 and less than 30,000 inhabitants refers to GEOID where INHABITANTS_K BETWEEN 20 AND 30; OCCUPATION = 'Machine-op-inspct';"}
{"sample_id": 8521, "db_id": "software_company", "final": {"question": "Which customer come from a place with more inhabitants, customer no.0 or customer no.1?", "sql": "SELECT T1.ID FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.ID = 0 OR T1.ID = 1 ORDER BY INHABITANTS_K DESC LIMIT 1", "source_tables": ["demog", "customers"]}, "evidence": "place with more inhabitants refers to GEOID where ID = 0 OR ID = 1 and MAX(NHABITANTS_K);"}
{"sample_id": 8522, "db_id": "software_company", "final": {"question": "Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are from a place with more than 30,000 inhabitants?", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T3.INHABITANTS_K > 30 AND T2.RESPONSE = 'true'", "source_tables": ["demog", "mailings1_2", "customers"]}, "evidence": "RESPONSE = 'true'; place with more than 30,000 inhabitants refers to GEOID where INHABITANTS_K > 30;"}
{"sample_id": 8523, "db_id": "software_company", "final": {"question": "Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are divorced males?", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.SEX = 'Male' AND T1.MARITAL_STATUS = 'Divorced' AND T2.RESPONSE = 'true'", "source_tables": ["mailings1_2", "customers"]}, "evidence": "RESPONSE = 'true'; SEX = 'Male'; MARITAL_STATUS = 'Divorced';"}
{"sample_id": 8524, "db_id": "software_company", "final": {"question": "How many of the first 60,000 customers from the place with the highest average income per month have sent a true response to the incentive mailing sent by the marketing department?", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T2.RESPONSE = 'true' ORDER BY T3.INCOME_K DESC LIMIT 1", "source_tables": ["demog", "mailings1_2", "customers"]}, "evidence": "place with the highest average income per month refers to GEOID where MAX(INCOME_K); RESPONSE = 'true';"}
{"sample_id": 8525, "db_id": "software_company", "final": {"question": "What is the number of inhabitants of the place the most customers are from?", "sql": "SELECT DISTINCT T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID ORDER BY T2.INHABITANTS_K DESC", "source_tables": ["demog", "customers"]}, "evidence": "the most customers are from refers to GEOID where MAX(COUNT(ID)); number of inhabitants refers to INHABITANTS_K;"}
{"sample_id": 8526, "db_id": "software_company", "final": {"question": "Among the customers who come from the place with 25746 inhabitants, how many of them are male?", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INHABITANTS_K = 25.746 AND T1.SEX = 'Male'", "source_tables": ["demog", "customers"]}, "evidence": "place with 44114 inhabitants refers to GEOID where INHABITANTS_K = 44.114; SEX = 'Male';"}
{"sample_id": 8527, "db_id": "software_company", "final": {"question": "Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are teenagers?", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.age >= 13 AND T1.age <= 19 AND T2.RESPONSE = 'true'", "source_tables": ["mailings1_2", "customers"]}, "evidence": "RESPONSE = 'true'; teenagers are people aged between 13 and 19 years;"}
{"sample_id": 8528, "db_id": "software_company", "final": {"question": "What is the average education level of customers from the place with the highest average income per month?", "sql": "SELECT AVG(T1.EDUCATIONNUM) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID ORDER BY T2.INCOME_K DESC LIMIT 1", "source_tables": ["demog", "customers"]}, "evidence": "place with the highest average income per month refers to GEOID where MAX(INCOME_K); average education level refers to AVG(EDUCATIONNUM);"}
{"sample_id": 8529, "db_id": "software_company", "final": {"question": "What is the average age of first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department?", "sql": "SELECT AVG(T1.age) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T2.RESPONSE = 'true'", "source_tables": ["mailings1_2", "customers"]}, "evidence": "RESPONSE = 'true'; AVG(age);"}
{"sample_id": 8530, "db_id": "software_company", "final": {"question": "How many of the customers are male?", "sql": "SELECT COUNT(ID) FROM Customers WHERE SEX = 'Male'", "source_tables": ["customers"]}, "evidence": "SEX = 'Male';"}
{"sample_id": 8531, "db_id": "software_company", "final": {"question": "List down the customer's geographic identifier who are handlers or cleaners.", "sql": "SELECT GEOID FROM Customers WHERE OCCUPATION = 'Handlers-cleaners'", "source_tables": ["customers"]}, "evidence": "geographic identifier refers to GEOID; OCCUPATION = 'Handlers-cleaners';"}
{"sample_id": 8532, "db_id": "software_company", "final": {"question": "What is the total number of customers with an age below 30?", "sql": "SELECT COUNT(ID) FROM Customers WHERE age < 30", "source_tables": ["customers"]}, "evidence": "age below 30 refers to age < 30;"}
{"sample_id": 8533, "db_id": "software_company", "final": {"question": "List down the geographic identifier with an income that ranges from 2100 to 2500.", "sql": "SELECT GEOID FROM Demog WHERE INCOME_K >= 2100 AND INCOME_K <= 2500", "source_tables": ["demog"]}, "evidence": "geographic identifier with an income that ranges from 2100 to 2500 refers to GEOID where INCOME_K BETWEEN 2100 AND 2500;"}
{"sample_id": 8534, "db_id": "software_company", "final": {"question": "In geographic identifier from 20 to 50, how many of them has a number of inhabitants below 20?", "sql": "SELECT COUNT(GEOID) FROM Demog WHERE INHABITANTS_K < 20 AND GEOID >= 20 AND GEOID <= 50", "source_tables": ["demog"]}, "evidence": "geographic identifier from 20 to 50 refers to GEOID BETWEEN 20 AND 50; number of inhabitants below 20 refers to INHABITANTS_K < 20;"}
{"sample_id": 8535, "db_id": "software_company", "final": {"question": "What is the number of inhabitants and income of geographic identifier 239?", "sql": "SELECT INHABITANTS_K FROM Demog WHERE GEOID = 239", "source_tables": ["demog"]}, "evidence": "geographic identifier 239 refers to GEOID = 239; number of inhabitants refers to INHABITANTS_K; income refers to INCOME_K;"}
{"sample_id": 8536, "db_id": "software_company", "final": {"question": "Give the level of education and occupation of customers ages from 20 to 35 with an income K of 2000 and below.", "sql": "SELECT T1.EDUCATIONNUM, T1.OCCUPATION FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INCOME_K < 2000 AND T1.age >= 20 AND T1.age <= 35", "source_tables": ["demog", "customers"]}, "evidence": "customers ages from 20 to 35 refer to ID where age BETWEEN 20 AND 35; income K of 2000 and below refers to INCOME_K < 2000; level of education refers to EDUCATIONNUM;"}
{"sample_id": 8537, "db_id": "software_company", "final": {"question": "List down the number of inhabitants of customers with a divorced marital status and older than 50 years old.", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.MARITAL_STATUS = 'Divorced' AND T1.age < 50", "source_tables": ["demog", "customers"]}, "evidence": "number of inhabitants refers to INHABITANTS_K; older than 50 years old refers to age < 50; MARITAL_STATUS = 'Divorced;"}
{"sample_id": 8538, "db_id": "software_company", "final": {"question": "What is the geographic identifier and income of the oldest customer?", "sql": "SELECT T1.GEOID, T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID ORDER BY T1.age DESC LIMIT 1", "source_tables": ["demog", "customers"]}, "evidence": "the oldest customer refers to MAX(age); geographic identifier refers to GEOID; income refers to INCOME_K;"}
{"sample_id": 8539, "db_id": "software_company", "final": {"question": "Among the male customers with an level of education of 4 and below, list their income K.", "sql": "SELECT INCOME_K FROM Demog WHERE GEOID IN ( SELECT GEOID FROM Customers WHERE EDUCATIONNUM < 4 AND SEX = 'Male' )", "source_tables": ["demog", "customers"]}, "evidence": "male customers with an level of education of 4 and below refer to SEX = 'Male' where EDUCATIONNUM < 4;"}
{"sample_id": 8540, "db_id": "software_company", "final": {"question": "List the occupation and income of male customers with an level of education of 4 to 6.", "sql": "SELECT T1.OCCUPATION, T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.EDUCATIONNUM >= 4 AND T1.EDUCATIONNUM <= 6 AND T1.SEX = 'Male'", "source_tables": ["demog", "customers"]}, "evidence": "male customers with an level of education of 4 to 6 refer to SEX = 'Male' where EDUCATIONNUM BETWEEN 4 AND 6; income refers to INCOME_K;"}
{"sample_id": 8541, "db_id": "software_company", "final": {"question": "In widowed male customers ages from 40 to 60, how many of them has an income ranges from 3000 and above?", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.age >= 40 AND T1.age <= 60 AND T1.MARITAL_STATUS = 'Widowed' AND T1.SEX = 'Male' AND T2.INCOME_K >= 2000 AND T2.INCOME_K <= 3000", "source_tables": ["demog", "customers"]}, "evidence": "widowed male customers ages from 40 to 60 refer to SEX = 'Male' where age BETWEEN 40 AND 60 and MARITAL_STATUS = 'Widowed'; income ranges from 3000 and above refers to INCOME_K BETWEEN 2000 AND 3000;"}
{"sample_id": 8542, "db_id": "software_company", "final": {"question": "What is the occupation of customers within number of inhabitants ranges of 30 to 40?", "sql": "SELECT DISTINCT T1.OCCUPATION FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INHABITANTS_K >= 30 AND T2.INHABITANTS_K <= 40", "source_tables": ["demog", "customers"]}, "evidence": "number of inhabitants ranges of 30 to 40 refers to INHABITANTS_K BETWEEN 30 AND 40;"}
{"sample_id": 8543, "db_id": "software_company", "final": {"question": "Among the widowed female customers, give the income of those who has an level of education of 5 and below.", "sql": "SELECT INCOME_K FROM Demog WHERE GEOID IN ( SELECT GEOID FROM Customers WHERE EDUCATIONNUM < 5 AND SEX = 'Female' AND MARITAL_STATUS = 'Widowed' )", "source_tables": ["demog", "customers"]}, "evidence": "widowed female customers refer to SEX = 'Female' where MARITAL_STATUS = 'Widowed'; level of education of 5 and below refers to EDUCATIONNUM \u2264 5;"}
{"sample_id": 8544, "db_id": "software_company", "final": {"question": "List the marital status of customers within the age of 40 to 60 that has the highest income among the group.", "sql": "SELECT T1.MARITAL_STATUS FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.age >= 40 AND T1.age <= 60 ORDER BY T2.INCOME_K DESC LIMIT 1", "source_tables": ["demog", "customers"]}, "evidence": "age of 40 to 60 refers to age BETWEEN 40 AND 60; the highest income refers to MAX(INCOME_K);"}
{"sample_id": 8545, "db_id": "software_company", "final": {"question": "What is the number of inhabitants of male customers ages from 20 to 30 years old who are farming or fishing?", "sql": "SELECT T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.OCCUPATION = 'Farming-fishing' AND T1.SEX = 'Male' AND T1.age >= 20 AND T1.age <= 30", "source_tables": ["demog", "customers"]}, "evidence": "male customers ages from 20 to 30 years old refer to SEX = 'Male' where age BETWEEN 20 AND 30; farming or fishing refers to OCCUPATION; number of inhabitants refers to INHABITANTS_K;"}
{"sample_id": 8546, "db_id": "software_company", "final": {"question": "Among the customers with a marital status of married-civ-spouse, list the number of inhabitants and age of those who are machine-op-inspct.", "sql": "SELECT T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.OCCUPATION = 'Farming-fishing' AND T1.SEX = 'Male' AND T1.age >= 20 AND T1.age <= 30", "source_tables": ["demog", "customers"]}, "evidence": "OCCUPATION = 'Machine-op-inspct'; number of inhabitants refers to INHABITANTS_K;"}
{"sample_id": 8547, "db_id": "software_company", "final": {"question": "In female customers ages from 50 to 60, how many of them has an number of inhabitants ranges from 19 to 24?", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Female' AND T1.age >= 50 AND T1.age <= 60 AND T2.INHABITANTS_K >= 19 AND T2.INHABITANTS_K <= 24", "source_tables": ["demog", "customers"]}, "evidence": "female customers ages from 50 to 60 refer to SEX = 'Female' where age BETWEEN 50 AND 60; number of inhabitants ranges from 19 to 24 refers to INHABITANTS_K BETWEEN 19 AND 24;"}
{"sample_id": 8548, "db_id": "software_company", "final": {"question": "List the income and number of inhabitants of customers with an age greater than the 80% of average age of all customers?", "sql": "SELECT T2.INCOME_K, T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID GROUP BY T2.INCOME_K, T2.INHABITANTS_K HAVING T1.age > 0.8 * AVG(T1.age)", "source_tables": ["demog", "customers"]}, "evidence": "age greater than the 80% of average age refers to age > (AVG(age) * 0.8); income refers to INCOME_K; number of inhabitants refers to INHABITANTS_K;"}
{"sample_id": 8549, "db_id": "software_company", "final": {"question": "In customers with marital status of never married, what is the percentage of customers with income of 2500 and above?", "sql": "SELECT CAST(SUM(CASE WHEN T2.INCOME_K > 2500 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.MARITAL_STATUS = 'Never-married'", "source_tables": ["demog", "customers"]}, "evidence": "DIVIDE(COUNT(INCOME_K \u2265 2500 where MARITAL_STATUS = 'Never-married'), COUNT(INCOME_K where MARITAL_STATUS = 'Never-married')) as percentage;"}
{"sample_id": 8550, "db_id": "software_company", "final": {"question": "Find and list the id and geographic ID of the elderly customers with an education level below 3.", "sql": "SELECT ID, GEOID FROM Customers WHERE EDUCATIONNUM < 3 AND age > 65", "source_tables": ["customers"]}, "evidence": "elderly customers with an education level below 3 refer to age > 65 where EDUCATIONNUM < 3; geographic ID refers to GEOID;"}
{"sample_id": 8551, "db_id": "software_company", "final": {"question": "List the geographic id of places where the income is above average.", "sql": "SELECT AVG(INCOME_K) FROM Demog", "source_tables": ["demog"]}, "evidence": "geographic ID refers to GEOID; income is above average refers to INCOME_K > DIVIDE(SUM(INCOME_K), COUNT(GEOID));"}
{"sample_id": 8552, "db_id": "software_company", "final": {"question": "Calculate the number of customers who did not respond in February of 2007.", "sql": "SELECT COUNT(REFID) custmoer_number FROM Mailings1_2 WHERE RESPONSE = 'false' AND REF_DATE BETWEEN '2007-02-01' AND '2007-02-28'", "source_tables": ["mailings1_2"]}, "evidence": "did not respond refers to RESPONSE = 'false'; February of 2007 refers to REF_DATE BETWEEN '2007-02-01 12:00:00.0'AND '2007-02-28 12:00:00.0';"}
{"sample_id": 8553, "db_id": "software_company", "final": {"question": "How many teenagers are working as Machine-op-inspct?", "sql": "SELECT COUNT(ID) teenager_number FROM Customers WHERE OCCUPATION = 'Machine-op-inspct' AND age >= 13 AND age <= 19", "source_tables": ["customers"]}, "evidence": "teenager is a person aged between 13 and 19 years; OCCUPATION = 'Machine-op-inspct';"}
{"sample_id": 8554, "db_id": "software_company", "final": {"question": "Of customers who provide other services, how many are from places where inhabitants are more than 20000?", "sql": "SELECT COUNT(T2.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.OCCUPATION = 'Other-service' AND T2.INHABITANTS_K > 20", "source_tables": ["demog", "customers"]}, "evidence": "OCCUPATION = 'Other-service'; inhabitants are more than 20000 refer to INHABITANTS_K > 20;"}
{"sample_id": 8585, "db_id": "chicago_crime", "final": {"question": "How many community areas are there in Central Chicago?", "sql": "SELECT COUNT(*) FROM Community_Area WHERE side = 'Central'", "source_tables": ["community_area"]}, "evidence": "Central Chicago refers to side = 'Central'"}
{"sample_id": 8586, "db_id": "chicago_crime", "final": {"question": "Which district is the community area Lincoln Square grouped into?", "sql": "SELECT side FROM Community_Area WHERE community_area_name = 'Lincoln Square'", "source_tables": ["community_area"]}, "evidence": "district refers to side; community area Lincoln Square refers to community_area_name = 'Lincoln Square'"}
{"sample_id": 8587, "db_id": "chicago_crime", "final": {"question": "Which district in Chicago has the most community areas?", "sql": "SELECT side FROM Community_Area GROUP BY side ORDER BY COUNT(side) DESC LIMIT 1", "source_tables": ["community_area"]}, "evidence": "district refers to side; the most community areas refers to max(count(side))"}
{"sample_id": 8588, "db_id": "chicago_crime", "final": {"question": "Which community area has the least population?", "sql": "SELECT community_area_name FROM Community_Area ORDER BY population ASC LIMIT 1", "source_tables": ["community_area"]}, "evidence": "community area refers to community_area_name; the least population refers to min(population)"}
{"sample_id": 8589, "db_id": "chicago_crime", "final": {"question": "Who is the person responsible for the crime cases in Central Chicago?", "sql": "SELECT commander FROM District WHERE district_name = 'Central'", "source_tables": ["district"]}, "evidence": "the person responsible for the crime cases refers to commander; Central Chicago refers to district_name = 'Central'"}
{"sample_id": 8590, "db_id": "chicago_crime", "final": {"question": "What is the email address to contact the administrator of Central Chicago?", "sql": "SELECT email FROM District WHERE district_name = 'Central'", "source_tables": ["district"]}, "evidence": "email address refers to email; Central Chicago refers to district_name = 'Central'"}
{"sample_id": 8591, "db_id": "chicago_crime", "final": {"question": "To which community area does the neighborhood Albany Park belong?", "sql": "SELECT T2.community_area_name FROM Neighborhood AS T1 INNER JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.neighborhood_name = 'Albany Park'", "source_tables": ["community_area", "neighborhood"]}, "evidence": "community area refers to community_area_name; the neighborhood Albany Park refers to neighborhood_name = 'Albany Park'"}
{"sample_id": 8592, "db_id": "chicago_crime", "final": {"question": "How many neighborhoods are there in the community area of Lincoln Square?", "sql": "SELECT COUNT(T3.community_area_no) FROM ( SELECT T1.community_area_no FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no WHERE community_area_name = 'Lincoln Square' GROUP BY T1.community_area_no ) T3", "source_tables": ["community_area", "neighborhood"]}, "evidence": "the community area of Lincoln Square refers to community_area_name = 'Lincoln Square'"}
{"sample_id": 8593, "db_id": "chicago_crime", "final": {"question": "Please list the names of all the neighborhoods in the community area with the most population.", "sql": "SELECT T1.neighborhood_name FROM Neighborhood AS T1 INNER JOIN Community_Area AS T2 ON T2.community_area_no = T2.community_area_no ORDER BY T2.population DESC LIMIT 1", "source_tables": ["community_area", "neighborhood"]}, "evidence": "name of neighborhood refers to neighborhood_name; the most population refers to max(population)"}
{"sample_id": 8594, "db_id": "chicago_crime", "final": {"question": "Please list the names of all the neighborhoods in Central Chicago.", "sql": "SELECT T2.neighborhood_name FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.side = 'Central'", "source_tables": ["community_area", "neighborhood"]}, "evidence": "name of neighborhood refers to neighborhood_name; Central Chicago refers to side = 'Central'"}
{"sample_id": 8595, "db_id": "chicago_crime", "final": {"question": "Please list the precise location coordinates of all the crimes in Central Chicago.", "sql": "SELECT T2.latitude, T2.longitude FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T1.district_name = 'Central'", "source_tables": ["district", "crime"]}, "evidence": "location coordinates refers to latitude, longitude; Central Chicago refers to district_name = 'Central'"}
{"sample_id": 8596, "db_id": "chicago_crime", "final": {"question": "How many crimes had happened in Central Chicago?", "sql": "SELECT COUNT(*) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T2.district_name = 'Central'", "source_tables": ["district", "crime"]}, "evidence": "Central Chicago refers to district_name = 'Central'"}
{"sample_id": 8597, "db_id": "chicago_crime", "final": {"question": "Among all the crimes that had happened in Central Chicago, how many of them were cases of domestic violence?", "sql": "SELECT COUNT(*) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T2.district_name = 'Central' AND T1.domestic = 'TRUE'", "source_tables": ["district", "crime"]}, "evidence": "Central Chicago refers to district_name = 'Central'; case of domestic violence refers to domestic = 'TRUE'"}
{"sample_id": 8598, "db_id": "chicago_crime", "final": {"question": "Please list the case numbers of all the crimes with no arrest made in Central Chicago.", "sql": "SELECT COUNT(*) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T2.district_name = 'Central' AND T1.arrest = 'FALSE'", "source_tables": ["district", "crime"]}, "evidence": "no arrest made refers to arrest = 'FALSE'; Central Chicago refers to district_name = 'Central'"}
{"sample_id": 8599, "db_id": "chicago_crime", "final": {"question": "How many crimes had happened in the community area with the most population?", "sql": "SELECT COUNT(T2.report_no) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no GROUP BY T1.community_area_name ORDER BY T1.population DESC LIMIT 1", "source_tables": ["community_area", "crime"]}, "evidence": "the most population refers to max(population)"}
{"sample_id": 8600, "db_id": "chicago_crime", "final": {"question": "Among the crimes in Woodlawn, how many of them happened in January, 2018?", "sql": "SELECT SUM(CASE WHEN T1.community_area_name = 'Woodlawn' THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.date LIKE '%1/2018%'", "source_tables": ["community_area", "crime"]}, "evidence": "Woodlawn refers to community_area_name = 'Woodlawn'; in January 2018 refers to date like '%1/2018%'"}
{"sample_id": 8601, "db_id": "chicago_crime", "final": {"question": "More crimes happened in which community area in January, 2018, Woodlawn or Lincoln Square?", "sql": "SELECT T1.community_area_name FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.community_area_name IN ('Woodlawn', 'Lincoln Square') AND T2.date LIKE '%1/2018%' GROUP BY T1.community_area_name ORDER BY COUNT(T1.community_area_name) DESC LIMIT 1", "source_tables": ["community_area", "crime"]}, "evidence": "in January 2018 refers to date like '%1/2018%'; Woodlawn or Lincoln Square refers to community_area_name in ('Woodlawn', 'Lincoln Square'); number of crime refers to COUNT(report_no); the higher the report_no, the more crimes happened in the community;"}
{"sample_id": 8602, "db_id": "chicago_crime", "final": {"question": "What is the fax number for the district with the most number of crimes in January, 2018?", "sql": "SELECT T1.fax FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.date LIKE '%1/2018%' GROUP BY T2.district_no ORDER BY COUNT(case_number) DESC LIMIT 1", "source_tables": ["district", "crime"]}, "evidence": "fax number refers to fax; the most number of crimes refers to max(count(case_number)); in January 2018 refers to date like '%1/2018%'"}
{"sample_id": 8603, "db_id": "chicago_crime", "final": {"question": "What is the average number of crimes in a neighborhood in Central Chicago?", "sql": "SELECT CAST(COUNT(T1.report_no) AS REAL) / COUNT(T2.community_area_no) FROM Crime AS T1 INNER JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.side = 'Central'", "source_tables": ["community_area", "crime"]}, "evidence": "Central Chicago refers to side = 'Central'; average number = divide(count(report_no), count(community_area_no))"}
{"sample_id": 8604, "db_id": "chicago_crime", "final": {"question": "Among the crimes in all the districts in Chicago, what is the percentage of them happening in the Central district?", "sql": "SELECT CAST(SUM(CASE WHEN T2.district_name = 'Central' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.case_number) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no", "source_tables": ["district", "crime"]}, "evidence": "the Central district refers to district_name = 'Central'; percentage = divide(count(case_number where district_name = 'Central'), count(case_number)) * 100%"}
{"sample_id": 8605, "db_id": "chicago_crime", "final": {"question": "How many community areas are in the Far North side?", "sql": "SELECT COUNT(*) FROM Community_Area WHERE side = 'Far North '", "source_tables": ["community_area"]}, "evidence": "the Far North side refers to side = 'Far North'"}
{"sample_id": 8606, "db_id": "chicago_crime", "final": {"question": "Who is the commander of Morgan Park district?", "sql": "SELECT commander FROM District WHERE district_name = 'Morgan Park'", "source_tables": ["district"]}, "evidence": "Morgan Park district refers to district_name = 'Morgan Park'"}
{"sample_id": 8607, "db_id": "chicago_crime", "final": {"question": "Where did case No. JB100065 happen? Give the name of the district.", "sql": "SELECT T1.district_name FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.case_number = 'JB100065'", "source_tables": ["district", "crime"]}, "evidence": "case No. JB100065 refers to case_number = 'JB100065'; name of the district refers to district_name"}
{"sample_id": 8608, "db_id": "chicago_crime", "final": {"question": "Where is the coordinate (41.66236555, -87.63470194) located? Give the name of the district.", "sql": "SELECT T2.district_name FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.longitude = '-87.63470194' AND T1.latitude = '41.66236555'", "source_tables": ["district", "crime"]}, "evidence": "coordinate (41.66236555, -87.63470194) refers to latitude = '41.66236555' AND longitude = '-87.63470194'; name of the district refers to district_name"}
{"sample_id": 8609, "db_id": "chicago_crime", "final": {"question": "Give the name of the person who was responsible for case No.JB524952.", "sql": "SELECT T1.commander FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.case_number = 'JB524952'", "source_tables": ["district", "crime"]}, "evidence": "name of the person refers to commander; case No.JB524952 refers to case_number = 'JB524952'"}
{"sample_id": 8610, "db_id": "chicago_crime", "final": {"question": "How many simple assaults happened on 2018/9/8?", "sql": "SELECT SUM(CASE WHEN T2.secondary_description = 'SIMPLE' THEN 1 ELSE 0 END) FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.date LIKE '%9/8/2018%' AND T2.primary_description = 'ASSAULT'", "source_tables": ["iucr", "crime"]}, "evidence": "simple assault refers to primary_description = 'ASSAULT'AND secondary_description = 'SIMPLE'; on 2018/9/8 refers to date like '%9/8/2018%'"}
{"sample_id": 8611, "db_id": "chicago_crime", "final": {"question": "Which district had the most number of first degree murders? Give the district number.", "sql": "SELECT T2.district_no FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.secondary_description = 'FIRST DEGREE MURDER' GROUP BY T2.district_no ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["iucr", "crime"]}, "evidence": "the most number refers to max(count(case_number)); first degree murder refers to secondary_description = 'FIRST DEGREE MURDER'; district number refers to district_no"}
{"sample_id": 8612, "db_id": "chicago_crime", "final": {"question": "How severe was case JB296775? Give the index code for severity.", "sql": "SELECT T2.iucr_no FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.case_number = 'JB296775'", "source_tables": ["iucr", "crime"]}, "evidence": "index code refers to iucr_no; case JB296775 refers to case_number = 'JB296775'"}
{"sample_id": 8613, "db_id": "chicago_crime", "final": {"question": "Give the name of the community area which had the most pocket-picking thefts.", "sql": "SELECT T3.community_area_name FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T1.primary_description = 'THEFT' AND T1.secondary_description = 'POCKET-PICKING' GROUP BY T2.community_area_no ORDER BY T2.case_number DESC LIMIT 1", "source_tables": ["community_area", "iucr", "crime"]}, "evidence": "name of the community area refers to community_area_name; the most refers to max(case_number); pocket-picking theft refers to primary_description = 'THEFT' AND secondary_description = 'POCKET-PICKING'"}
{"sample_id": 8614, "db_id": "chicago_crime", "final": {"question": "Who was the alderman of the legislative district where case No. JB103470 took place? Give the full name.", "sql": "SELECT T1.alderman_first_name, T1.alderman_last_name FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.case_number = 'JB103470'", "source_tables": ["crime", "ward"]}, "evidence": "case No. JB103470 refers to case_number = 'JB103470'; full name refers to alderman_first_name, alderman_last_name"}
{"sample_id": 8615, "db_id": "chicago_crime", "final": {"question": "Give the neighborhood name of West Englewood community.", "sql": "SELECT T1.neighborhood_name FROM Neighborhood AS T1 INNER JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.community_area_name = 'West Englewood'", "source_tables": ["community_area", "neighborhood"]}, "evidence": "West Englewood community refers to community_area_name = 'West Englewood'"}
{"sample_id": 8616, "db_id": "chicago_crime", "final": {"question": "How many different neighborhoods are there in Roseland community?", "sql": "SELECT SUM(CASE WHEN T1.community_area_name = 'Roseland' THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no", "source_tables": ["community_area", "neighborhood"]}, "evidence": "Roseland community refers to community_area_name = 'Roseland'"}
{"sample_id": 8617, "db_id": "chicago_crime", "final": {"question": "Give the FBI code description of case No.JB134191.", "sql": "SELECT description FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.case_number = 'JB134191'", "source_tables": ["fbi_code", "crime"]}, "evidence": "case No.JB134191 refers to case_number = 'JB134191'"}
{"sample_id": 8618, "db_id": "chicago_crime", "final": {"question": "Tell the number of cases with arrests in North Lawndale community.", "sql": "SELECT SUM(CASE WHEN T1.community_area_name = 'North Lawndale' THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.arrest = 'TRUE'", "source_tables": ["community_area", "crime"]}, "evidence": "number of cases refers to count(case_number); arrest refers to arrest = 'TRUE'; North Lawndale community refers to community_area_name = 'North Lawndale'"}
{"sample_id": 8619, "db_id": "chicago_crime", "final": {"question": "What is the percentage of under $500 thefts among all cases that happened in West Englewood?", "sql": "SELECT CAST(SUM(CASE WHEN T2.secondary_description = '$500 AND UNDER' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.case_number) FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no INNER JOIN Community_Area AS T3 ON T1.community_area_no = T3.community_area_no WHERE T2.primary_description = 'THEFT' AND T3.community_area_name = 'West Englewood'", "source_tables": ["community_area", "iucr", "crime"]}, "evidence": "under $500 refers to secondary_description = '$500 AND UNDER'; theft refers to primary_description = 'THEFT'; West Englewood refers to community_area_name = 'West Englewood'; percentage = divide(count(case_number where secondary_description = '$500 AND UNDER'), count(case_number)) where primary_description = 'THEFT' and community_area_name = 'West Englewood' * 100%"}
{"sample_id": 8620, "db_id": "chicago_crime", "final": {"question": "What is the percentage of larceny cases among all cases that happened in Edgewater community?", "sql": "SELECT CAST(SUM(CASE WHEN T3.title = 'Larceny' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.case_number) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no WHERE T1.community_area_name = 'Edgewater'", "source_tables": ["community_area", "fbi_code", "crime"]}, "evidence": "larceny case refers to title = 'Larceny'; Edgewater community refers to community_area_name = 'Edgewater'; percentage = divide(count(case_number where title = 'Larceny'), count(case_number)) where community_area_name = 'Edgewater' * 100%"}
{"sample_id": 8621, "db_id": "chicago_crime", "final": {"question": "How many crimes were committed at 018XX S KOMENSKY AVEin May 2018?", "sql": "SELECT SUM(CASE WHEN date LIKE '5/%/2018%' THEN 1 ELSE 0 END) FROM Crime WHERE block = '018XX S KOMENSKY AVE'", "source_tables": ["crime"]}, "evidence": " in May 2018 refers to date LIKE '5/%/2018%'"}
{"sample_id": 8622, "db_id": "chicago_crime", "final": {"question": "What is the name of the community with the highest population?", "sql": "SELECT community_area_name FROM Community_Area ORDER BY population DESC LIMIT 1", "source_tables": ["community_area"]}, "evidence": "name of the community refers to community_area_name; the highest population refers to max(population)"}
{"sample_id": 8623, "db_id": "chicago_crime", "final": {"question": "How many incidents of domestic violence occurred in an abandoned building in 2018?", "sql": "SELECT SUM(CASE WHEN location_description = 'ABANDONED BUILDING' THEN 1 ELSE 0 END) FROM Crime WHERE date LIKE '%2018%' AND domestic = 'TRUE'", "source_tables": ["crime"]}, "evidence": "domestic violence refers to domestic = 'TRUE'; in an abandoned building refers to location_description = 'ABANDONED BUILDING'; in 2018 refers to date LIKE '%2018%'"}
{"sample_id": 8624, "db_id": "chicago_crime", "final": {"question": "What is the population of the district with the least population?", "sql": "SELECT SUM(population) FROM Community_Area GROUP BY side ORDER BY SUM(population) LIMIT 1", "source_tables": ["community_area"]}, "evidence": "the least population refers = min(sum(population))"}
{"sample_id": 8625, "db_id": "chicago_crime", "final": {"question": "How many arrests were made in 2018 in an animal hospital under FBI code 08B?", "sql": "SELECT SUM(CASE WHEN arrest = 'TRUE' THEN 1 ELSE 0 END) FROM Crime WHERE date LIKE '%2018%' AND location_description = 'ANIMAL HOSPITAL' AND fbi_code_no = '08B'", "source_tables": ["crime"]}, "evidence": "arrest refers to arrest = 'TRUE'; in 2018 refers to date LIKE '%2018%'; in an animal hospital refers to location_description = 'ANIMAL HOSPITAL'; FBI code 08B refers to fbi_code_no = '08B'"}
{"sample_id": 8626, "db_id": "chicago_crime", "final": {"question": "Give the detailed description of all the crimes against society.", "sql": "SELECT description FROM FBI_Code WHERE crime_against = 'Society'", "source_tables": ["fbi_code"]}, "evidence": "crime against society refers to crime_against = 'Society'"}
{"sample_id": 8627, "db_id": "chicago_crime", "final": {"question": "Who is the commanding officer in the district with the highest number of disorderly conduct?", "sql": "SELECT T1.commander FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no WHERE T3.title = 'Disorderly Conduct' AND T2.fbi_code_no = 24 GROUP BY T2.fbi_code_no ORDER BY COUNT(T1.district_no) DESC LIMIT 1", "source_tables": ["fbi_code", "district", "crime"]}, "evidence": "commanding officer refers to commander; the highest number refers to max(count(district_no)); disorderly conduct refers to title = 'Disorderly Conduct'"}
{"sample_id": 8628, "db_id": "chicago_crime", "final": {"question": "Which crime was committed the most by criminals?", "sql": "SELECT T2.title FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no ORDER BY T2.fbi_code_no DESC LIMIT 1", "source_tables": ["fbi_code", "crime"]}, "evidence": "crime refers to title; committed the most refers to max(fbi_code_no)"}
{"sample_id": 8629, "db_id": "chicago_crime", "final": {"question": "In Albany Park, how many arrests were made in an apartment due to criminal sexual abuse?", "sql": "SELECT SUM(CASE WHEN T3.title = 'Criminal Sexual Abuse' THEN 1 ELSE 0 END) FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no WHERE T1.district_name = 'Albany Park' AND T2.arrest = 'TRUE' AND T2.location_description = 'APARTMENT'", "source_tables": ["fbi_code", "district", "crime"]}, "evidence": "Albany Park refers to district_name = 'Albany Park'; in an apartment refers to location_description = 'APARTMENT'; criminal sexual abuse refers to title = 'Criminal Sexual Abuse'"}
{"sample_id": 8630, "db_id": "chicago_crime", "final": {"question": "What is the precise location or coordinate where most of the robberies in Rogers Park occurred?", "sql": "SELECT T2.latitude, T2.longitude FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no WHERE T1.community_area_name = 'Rogers Park' AND T3.title = 'Robbery' AND T3.fbi_code_no = 3", "source_tables": ["community_area", "fbi_code", "crime"]}, "evidence": "precise location or coordinate refers to latitude, longitude; most refers to fbi_code_no = 3; robbery refers to title = 'Robbery'; Rogers Park refers to community_area_name = 'Rogers Park'"}
{"sample_id": 8631, "db_id": "chicago_crime", "final": {"question": "How many solicit on public way prostitution crimes were arrested in West Garfield Park?", "sql": "SELECT SUM(CASE WHEN T2.arrest = 'TRUE' THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN IUCR AS T3 ON T2.iucr_no = T3.iucr_no WHERE T1.community_area_name = 'West Garfield Park' AND T3.secondary_description = 'SOLICIT ON PUBLIC WAY' AND T3.primary_description = 'PROSTITUTION'", "source_tables": ["community_area", "iucr", "crime"]}, "evidence": "solicit on public way prostitution crime refers to secondary_description = 'SOLICIT ON PUBLIC WAY' AND primary_description = 'PROSTITUTION'; arrested refers to arrest = 'TRUE'; West Garfield Park refers to community_area_name = 'West Garfield Park'"}
{"sample_id": 8632, "db_id": "chicago_crime", "final": {"question": "In the most populated ward, how many incidents of domestic violence were reported in a bar or tavern?", "sql": "SELECT COUNT(T2.report_no) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.domestic = 'TRUE' AND T2.location_description = 'BAR OR TAVERN' ORDER BY T1.Population DESC LIMIT 1", "source_tables": ["crime", "ward"]}, "evidence": "the most populated refers to max(population); domestic violence refers to domestic = 'TRUE'; in a bar or tavern refers to location_description = 'BAR OR TAVERN'"}
{"sample_id": 8633, "db_id": "chicago_crime", "final": {"question": "How many neighborhoods are there in Near North Side?", "sql": "SELECT SUM(CASE WHEN T1.community_area_name = 'Near North Side' THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no", "source_tables": ["community_area", "neighborhood"]}, "evidence": "Near North Side refers to community_area_name = 'Near North Side'"}
{"sample_id": 8634, "db_id": "chicago_crime", "final": {"question": "Out of all the incidents of domestic violence reported at the ward represented by alderman Walter Burnett Jr., how many were arrested?", "sql": "SELECT SUM(CASE WHEN T2.arrest = 'TRUE' THEN 1 ELSE 0 END) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T1.alderman_first_name = 'Walter' AND T1.alderman_last_name = 'Burnett' AND alderman_name_suffix = 'Jr.' AND T2.domestic = 'TRUE'", "source_tables": ["crime", "ward"]}, "evidence": "domestic violence refers to domestic = 'TRUE'; arrested refers to arrest = 'TRUE'"}
{"sample_id": 8635, "db_id": "chicago_crime", "final": {"question": "What is the short description of the crime committed the most by criminals in the least populated community?", "sql": "SELECT T3.title FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no GROUP BY T3.title ORDER BY T1.population ASC, T3.fbi_code_no DESC LIMIT 1", "source_tables": ["community_area", "fbi_code", "crime"]}, "evidence": "short description refers to title; committed the most refers to max(fbi_code_no); the least populated community refers to min(population)"}
{"sample_id": 8636, "db_id": "chicago_crime", "final": {"question": "What is the legislative district's office address where 010XX W LAKE ST is located?", "sql": "SELECT T1.ward_office_address FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.block = '010XX W LAKE ST' GROUP BY T1.ward_office_address", "source_tables": ["crime", "ward"]}, "evidence": "the legislative district's office address refers to ward_office_address; 010XX W LAKE ST refers to block = '010XX W LAKE ST'"}
{"sample_id": 8637, "db_id": "chicago_crime", "final": {"question": "What is the name of the community that has the highest number of crimes related to prostitution?", "sql": "SELECT T3.community_area_name FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no INNER JOIN Community_Area AS T3 ON T1.community_area_no = T3.community_area_no WHERE T2.primary_description = 'PROSTITUTION' GROUP BY T1.iucr_no ORDER BY T1.case_number DESC LIMIT 1", "source_tables": ["community_area", "iucr", "crime"]}, "evidence": "name of the community refers to community_area_name; the highest number of crimes refers to max(case_number); prostitution refers to primary_description = 'PROSTITUTION'"}
{"sample_id": 8638, "db_id": "chicago_crime", "final": {"question": "How many vandalisms were arrested in the ward represented by Edward Burke?", "sql": "SELECT SUM(CASE WHEN T1.alderman_last_name = 'Burke' THEN 1 ELSE 0 END) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no WHERE T3.title = 'Vandalism' AND T2.arrest = 'TRUE' AND T1.alderman_first_name = 'Edward'", "source_tables": ["crime", "fbi_code", "ward"]}, "evidence": "vandalism refers to title = 'Vandalism'; arrested refers to arrest = 'TRUE'"}
{"sample_id": 8639, "db_id": "chicago_crime", "final": {"question": "How many domestic violence cases were reported in May 2018?", "sql": "SELECT COUNT(*) FROM Crime WHERE date LIKE '5/%/2018%' AND domestic = 'TRUE'", "source_tables": ["crime"]}, "evidence": "domestic violence refers to domestic = 'TRUE'; in May 2018 refers to date LIKE '5/%/2018%'"}
{"sample_id": 8640, "db_id": "chicago_crime", "final": {"question": "List the IUCR numbers and index status of homicide incidents.", "sql": "SELECT index_code FROM IUCR WHERE primary_description = 'HOMICIDE'", "source_tables": ["iucr"]}, "evidence": "index status refers to index_code; homicide incident refers to primary_description = 'HOMICIDE'"}
{"sample_id": 8641, "db_id": "chicago_crime", "final": {"question": "Provide the responsible person and his/her email address of Chicago Lawn.", "sql": "SELECT commander, email FROM District WHERE district_name = 'Chicago Lawn'", "source_tables": ["district"]}, "evidence": "responsible person refers to commander; email address refers to email; Chicago Lawn refers to district_name = 'Chicago Lawn'"}
{"sample_id": 8642, "db_id": "chicago_crime", "final": {"question": "What is the alderman's full name of the most crowded ward?", "sql": "SELECT alderman_name_suffix, alderman_first_name, alderman_last_name FROM Ward ORDER BY population DESC LIMIT 1", "source_tables": ["ward"]}, "evidence": "alderman's full name refers to alderman_name_suffix, alderman_first_name, alderman_last_name; the most crowded refers to max(population)"}
{"sample_id": 8643, "db_id": "chicago_crime", "final": {"question": "List the community area names in the Northwest.", "sql": "SELECT community_area_name FROM Community_Area WHERE side = 'Northwest'", "source_tables": ["community_area"]}, "evidence": "the Northwest refers to side = 'Northwest'"}
{"sample_id": 8644, "db_id": "chicago_crime", "final": {"question": "List down the titles and descriptions of the crimes cases against persons.", "sql": "SELECT title, description FROM FBI_Code WHERE crime_against = 'Persons'", "source_tables": ["fbi_code"]}, "evidence": "crime case against persons refers to crime_against = 'Persons'"}
{"sample_id": 8645, "db_id": "chicago_crime", "final": {"question": "Describe the specific description and case locations under IUCR 142.", "sql": "SELECT T1.secondary_description, T2.latitude, T2.longitude FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.iucr_no = 142", "source_tables": ["iucr", "crime"]}, "evidence": "specific description refers to secondary_description; location refers to latitude, longitude; IUCR 142 refers to iucr_no = 142"}
{"sample_id": 8646, "db_id": "chicago_crime", "final": {"question": "How many crimes were handled by Brendan Reilly on 7th October 2018?", "sql": "SELECT SUM(CASE WHEN T2.alderman_last_name = 'Reilly' THEN 1 ELSE 0 END) FROM Crime AS T1 INNER JOIN Ward AS T2 ON T1.ward_no = T2.ward_no WHERE T2.alderman_name_suffix IS NULL AND T2.alderman_first_name = 'Brendan' AND date LIKE '10/7/2018%'", "source_tables": ["ward", "crime"]}, "evidence": "7th October 2018 refers to date like '10/7/2018%'"}
{"sample_id": 8647, "db_id": "chicago_crime", "final": {"question": "How many cases have been arrested among the crimes that happened in the restaurant of Englewood?", "sql": "SELECT SUM(CASE WHEN T1.arrest = 'TRUE' THEN 1 ELSE 0 END) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T2.district_name = 'Englewood' AND T1.location_description = 'RESTAURANT'", "source_tables": ["district", "crime"]}, "evidence": "arrested refers to arrest = 'TRUE'; restaurant refers to location_description = 'RESTAURANT'; Englewood refers to district_name = 'Englewood'"}
{"sample_id": 8648, "db_id": "chicago_crime", "final": {"question": "Provide case numbers, aldermen's full names, and district names of the crimes that happened in 0000X N FRANCISCO AVE.", "sql": "SELECT T2.case_number, T3.alderman_first_name, T3.alderman_last_name, T1.district_name FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no INNER JOIN Ward AS T3 ON T2.ward_no = T3.ward_no WHERE T2.block = '0000X N FRANCISCO AVE' GROUP BY T2.case_number, T3.alderman_first_name, T3.alderman_last_name, T1.district_name", "source_tables": ["ward", "district", "crime"]}, "evidence": "aldermen's full name refers to alderman_name_suffix, alderman_first_name, alderman_last_name; 0000X N FRANCISCO AVE refers to block = '0000X N FRANCISCO AVE'"}
{"sample_id": 8649, "db_id": "chicago_crime", "final": {"question": "How many crimes were Misc Non-Index Offense?", "sql": "SELECT SUM(CASE WHEN T1.title = 'Misc Non-Index Offense' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no", "source_tables": ["fbi_code", "crime"]}, "evidence": "Misc Non-Index Offense refers to title = 'Misc Non-Index Offense'"}
{"sample_id": 8650, "db_id": "chicago_crime", "final": {"question": "List down the neighborhood areas of Douglas.", "sql": "SELECT T2.neighborhood_name FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'Douglas'", "source_tables": ["community_area", "neighborhood"]}, "evidence": "neighborhood area refers to neighborhood_name; Douglas refers to community_area_name = 'Douglas'"}
{"sample_id": 8651, "db_id": "chicago_crime", "final": {"question": "Calculate the average crime rate per month in the highest populous area.", "sql": "SELECT CAST(COUNT(T2.report_no) AS REAL) / 12 FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no GROUP BY T1.community_area_no HAVING COUNT(T1.population) ORDER BY COUNT(T1.population) LIMIT 1", "source_tables": ["community_area", "crime"]}, "evidence": "the highest populous refers to max(population); average crime rate per month = divide(count(report_no where population = max(population)), 12)"}
{"sample_id": 8652, "db_id": "chicago_crime", "final": {"question": "Among the crimes in the Central, calculate the percentage of larceny incidents.", "sql": "SELECT CAST(COUNT(CASE WHEN T3.title = 'Larceny' THEN T2.report_no END) AS REAL) * 100 / COUNT(T2.report_no) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no INNER JOIN FBI_Code AS T3 ON T3.fbi_code_no = T2.fbi_code_no WHERE T1.side = 'Central'", "source_tables": ["community_area", "fbi_code", "crime"]}, "evidence": "Central refers to side = 'Central'; larceny refers to title = 'Larceny'; percentage = divide(count(report_no where title = 'Larceny'), count(report_no)) where side = 'Central' * 100%"}
{"sample_id": 8653, "db_id": "chicago_crime", "final": {"question": "List the location descriptions and aldermen's full names of the arson by explosive.", "sql": "SELECT T2.location_description, T1.alderman_first_name, T1.alderman_last_name, T1.alderman_name_suffix FROM Ward AS T1 INNER JOIN Crime AS T2 ON T2.ward_no = T1.ward_no INNER JOIN IUCR AS T3 ON T3.iucr_no = T2.iucr_no WHERE T3.primary_description = 'ARSON' AND T3.secondary_description = 'BY EXPLOSIVE'", "source_tables": ["crime", "iucr", "ward"]}, "evidence": "aldermen's full name refers to alderman_name_suffix, alderman_first_name, alderman_last_name; arson by explosive refers to primary_description = 'ARSON' AND secondary_description = 'BY EXPLOSIVE'"}
{"sample_id": 8654, "db_id": "chicago_crime", "final": {"question": "Provide the occurrence date and location of the deceptive practice due to the unlawful use of recorded sound.", "sql": "SELECT T2.date, T2.latitude, T2.longitude FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no WHERE T1.primary_description = 'DECEPTIVE PRACTICE' AND T1.secondary_description = 'UNLAWFUL USE OF RECORDED SOUND'", "source_tables": ["iucr", "crime"]}, "evidence": "location refers to latitude, longitude; deceptive practice refers to primary_description = 'DECEPTIVE PRACTICE'; unlawful use of recorded sound refers to secondary_description = 'UNLAWFUL USE OF RECORDED SOUND'"}
{"sample_id": 8655, "db_id": "chicago_crime", "final": {"question": "Among the criminal sexual assaults in the district of Adnardo Gutierrez, how many cases happened in the residence?", "sql": "SELECT COUNT(T2.report_no) FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no INNER JOIN FBI_Code AS T3 ON T3.fbi_code_no = T2.fbi_code_no WHERE T3.title = 'Criminal Sexual Assault' AND T1.commander = 'Adnardo Gutierrez' AND T2.location_description = 'RESIDENCE'", "source_tables": ["fbi_code", "district", "crime"]}, "evidence": "criminal sexual assault refers to title = 'Criminal Sexual Assault'; Adnardo Gutierrez refers to commander = 'Adnardo Gutierrez'; in the residence refers to location_description = 'RESIDENCE'"}
{"sample_id": 8656, "db_id": "chicago_crime", "final": {"question": "How many percent of domestic violence cases were arrested in West Pullman?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.arrest = 'TRUE' THEN T2.report_no END) AS REAL) * 100 / COUNT(T2.report_no) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'West Pullman' AND T2.domestic = 'TRUE'", "source_tables": ["community_area", "crime"]}, "evidence": "domestic violence refers to domestic = 'TRUE'; arrested refers to arrest = 'TRUE'; West Pullman refers to community_area_name = 'West Pullman'; percent = divide(count(report_no where arrest = 'TRUE'), count(report_no)) where domestic = 'TRUE' and community_area_name = 'West Pullman' * 100%"}
{"sample_id": 8657, "db_id": "chicago_crime", "final": {"question": "Calculate the percentage of the domestic violence cases handled by Christopher Taliaferro. Among them, list report numbers of cases that happened in the bank.", "sql": "SELECT CAST(COUNT(CASE WHEN T1.domestic = 'TRUE' THEN T1.report_no END) AS REAL) * 100 / COUNT(T1.report_no), COUNT(CASE WHEN T1.domestic = 'TRUE' AND T1.location_description = 'BANK' THEN T1.report_no END) AS 'number' FROM Crime AS T1 INNER JOIN Ward AS T2 ON T2.ward_no = T1.ward_no WHERE T2.alderman_first_name = 'Christopher' AND T2.alderman_last_name = 'Taliaferro'", "source_tables": ["ward", "crime"]}, "evidence": "domestic violence refers to domestic = 'TRUE'; report number refers to report_no; in the bank refers to location_description = 'BANK'; percentage = divide(count(report_no where domestic = 'TRUE'), count(report_no)) * 100%"}
{"sample_id": 8658, "db_id": "chicago_crime", "final": {"question": "How many aldermen have \"James\" as their first name?", "sql": "SELECT COUNT(*) FROM Ward WHERE alderman_first_name = 'James'", "source_tables": ["ward"]}, "evidence": ""}
{"sample_id": 8659, "db_id": "chicago_crime", "final": {"question": "How many crimes are commited on January 1, 2018?", "sql": "SELECT COUNT(*) FROM Crime WHERE date LIKE '1/1/2018%'", "source_tables": ["crime"]}, "evidence": "on January 1 2018 refers to date LIKE '1/1/2018%'"}
{"sample_id": 8660, "db_id": "chicago_crime", "final": {"question": "Calculate the average population of community areas in the West side.", "sql": "SELECT AVG(population) FROM Community_Area WHERE side = 'West '", "source_tables": ["community_area"]}, "evidence": "the West side refers to side = 'West'; average population = avg(population) where side = 'West'"}
{"sample_id": 8661, "db_id": "chicago_crime", "final": {"question": "Among the cases reported in the ward with Edward Burke as the alderman and happened in the community area with the highest population, provide the report number of the crime with the highest beat.", "sql": "SELECT T2.report_no FROM Ward AS T1 INNER JOIN Crime AS T2 ON T2.ward_no = T1.ward_no INNER JOIN Community_Area AS T3 ON T3.community_area_no = T2.community_area_no WHERE T1.alderman_first_name = 'Edward' AND T1.alderman_last_name = 'Burke' ORDER BY T2.beat DESC, T3.population DESC LIMIT 1", "source_tables": ["community_area", "crime", "ward"]}, "evidence": "the highest population refers to max(population); report number refers to report_no; the highest beat refers to max(beat)"}
{"sample_id": 8662, "db_id": "chicago_crime", "final": {"question": "How many of the crimes that happened in the street have FBI title \"Homicide 1st & 2nd Degree\"?", "sql": "SELECT SUM(CASE WHEN T2.location_description = 'STREET' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no WHERE T1.title = 'Homicide 1st & 2nd Degree'", "source_tables": ["fbi_code", "crime"]}, "evidence": "in the street refers to location_description = 'STREET'"}
{"sample_id": 8663, "db_id": "chicago_crime", "final": {"question": "Who is the alderman in the ward associated with the crime with report number 23769?", "sql": "SELECT T2.alderman_first_name, T2.alderman_last_name FROM Crime AS T1 INNER JOIN Ward AS T2 ON T2.ward_no = T1.ward_no WHERE T1.report_no = 23769", "source_tables": ["ward", "crime"]}, "evidence": "alderman refers to alderman_suffix, alderman_first_name, alderman_last_name; report number 23769 refers to report_no = 23769"}
{"sample_id": 8664, "db_id": "chicago_crime", "final": {"question": "List the case numbers of domestic violence crimes reported in Lincoln Square.", "sql": "SELECT T2.case_number FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'Lincoln Square' AND T2.domestic = 'TRUE'", "source_tables": ["community_area", "crime"]}, "evidence": "domestic violence refers to domestic = 'TRUE'; Lincoln Square refers to community_area_name = 'Lincoln Square'"}
{"sample_id": 8665, "db_id": "chicago_crime", "final": {"question": "Among the crimes reported to the ward located at 1958 N. Milwaukee Ave., list down the report number of the crimes happened inside the apartment.", "sql": "SELECT T1.case_number FROM Crime AS T1 INNER JOIN Ward AS T2 ON T2.ward_no = T1.ward_no WHERE T1.location_description = 'APARTMENT' AND T2.ward_office_address = '1958 N. Milwaukee Ave.'", "source_tables": ["ward", "crime"]}, "evidence": "1958 N. Milwaukee Ave. refers to ward_office_address = '1958 N. Milwaukee Ave.'; report number refers to case_number; inside the apartment refers to location_description = 'APARTMENT'"}
{"sample_id": 8666, "db_id": "chicago_crime", "final": {"question": "What is the total number of crimes that happened in Bridgeport with beat less than 1000?", "sql": "SELECT SUM(CASE WHEN T2.beat < 1000 THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'Bridgeport'", "source_tables": ["community_area", "crime"]}, "evidence": "Bridgeport refers to community_area_name = 'Bridgeport'; with beat less than 1000 refers to beat < 1000; total number = count(beat) where community_area_name = 'Bridgeport' and beat < 1000"}
{"sample_id": 8667, "db_id": "chicago_crime", "final": {"question": "List the report number of crimes reported in a community area in the far north side with a population greater than 60,000.", "sql": "SELECT SUM(CASE WHEN T1.population > 60000 THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.side = 'Far North '", "source_tables": ["community_area", "crime"]}, "evidence": "report number refers to report_no; the far north side refers to side = 'Far North'; population greater than 60,000 refers to population > '60000'"}
{"sample_id": 8668, "db_id": "chicago_crime", "final": {"question": "List the report number of crimes against property happened in Riverdale.", "sql": "SELECT SUM(CASE WHEN T1.crime_against = 'Property' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no INNER JOIN Community_Area AS T3 ON T3.community_area_no = T2.community_area_no WHERE T3.community_area_name = 'Riverdale'", "source_tables": ["community_area", "fbi_code", "crime"]}, "evidence": "crime against property refers to crime_against = 'Property'; Riverdale refers to community_area_name = 'Riverdale'"}
{"sample_id": 8669, "db_id": "chicago_crime", "final": {"question": "How many domestic violence cases were brought in the ward that uses \"ward13@cityofchicago.org\"?", "sql": "SELECT SUM(CASE WHEN T2.domestic = 'TRUE' THEN 1 ELSE 0 END) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T2.ward_no = T1.ward_no WHERE T1.ward_email = 'ward13@cityofchicago.org'", "source_tables": ["crime", "ward"]}, "evidence": "domestic violence refers to domestic = 'TRUE'; uses \"ward13@cityofchicago.org\" refers to ward_email = 'ward13@cityofchicago.org'"}
{"sample_id": 8670, "db_id": "chicago_crime", "final": {"question": "What is the district address associated with the case JB107731?", "sql": "SELECT T1.address FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no WHERE T2.case_number = 'JB107731'", "source_tables": ["district", "crime"]}, "evidence": "case JB107731 refers to case_number = 'JB107731'"}
{"sample_id": 8671, "db_id": "chicago_crime", "final": {"question": "Calculate the total beat of the crimes reported in a community area in the central side with population of 50,000 and above.", "sql": "SELECT 1.0 * SUM(CASE WHEN T1.population > 50000 THEN T2.beat ELSE 0 END) AS sum FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.side = 'Central'", "source_tables": ["community_area", "crime"]}, "evidence": "the central side refers to side = 'Central'; population of 50,000 and above refers to population > '50000'; total beat = sum(beat) where side = 'Central' and population > '50000'"}
{"sample_id": 8672, "db_id": "chicago_crime", "final": {"question": "List the case number of crimes against society that happened in June 2018.", "sql": "SELECT T2.case_number FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no WHERE T2.date LIKE '6/%/2018%' AND T1.crime_against = 'Society'", "source_tables": ["fbi_code", "crime"]}, "evidence": "crime against society refers to crime_against = 'Society'; in June 2018 refers to date LIKE '6/%/2018%'"}
{"sample_id": 8673, "db_id": "chicago_crime", "final": {"question": "Among the crimes located in the community area with the highest population, what is the percentage of domestic violence?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.domestic = 'TRUE' THEN T2.domestic END) AS REAL) * 100 / COUNT(T2.domestic) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no GROUP BY T1.community_area_no HAVING COUNT(T1.population) ORDER BY COUNT(T1.population) DESC LIMIT 1", "source_tables": ["community_area", "crime"]}, "evidence": "the highest population refers to max(population); domestic violence refers to domestic = 'TRUE'; percentage = divide(count(domestic = 'TRUE'), count(domestic)) where population = max(population) * 100%"}
{"sample_id": 8674, "db_id": "chicago_crime", "final": {"question": "List the case number of the crimes in wards with population below 52000 that have beat greater than the 90% of the average beat of all crimes.", "sql": "SELECT COUNT(T1.report_no) FROM Crime AS T1 INNER JOIN Ward AS T2 ON T1.ward_no = T2.ward_no WHERE T2.Population < 52000 AND T1.beat > ( SELECT AVG(T1.beat) * 0.9 FROM Crime AS T1 INNER JOIN Ward AS T2 ON T1.ward_no = T2.ward_no WHERE T2.Population < 52000 )", "source_tables": ["ward", "crime"]}, "evidence": "population below 52000 refers to population < 52000; beat greater than the 90% of the average beat refers to beat > multiply(avg(beat), 0.9) where population < 52000"}
{"sample_id": 8675, "db_id": "chicago_crime", "final": {"question": "Please list the area name of the communities in the Far north side, which has a population of more than 50000 but less than 70000.", "sql": "SELECT community_area_name, side FROM Community_Area WHERE side = 'Far North ' AND population BETWEEN 50000 AND 70000", "source_tables": ["community_area"]}, "evidence": "area name refers to community_area_name; the Far north side refers to side = 'Far North'; a population of more than 50000 but less than 70000 refers to population BETWEEN '50000' AND '70000'"}
{"sample_id": 8676, "db_id": "chicago_crime", "final": {"question": "Give the coordinate of the alleys where a crime was reported and an arrest was made.", "sql": "SELECT latitude, longitude FROM Crime WHERE location_description = 'ALLEY' AND arrest = 'TRUE' GROUP BY latitude, longitude", "source_tables": ["crime"]}, "evidence": "coordinate refers to latitude, longitude; alley refers to location_description = 'ALLEY'; an arrest was made refers to arrest = 'TRUE'"}
{"sample_id": 8677, "db_id": "chicago_crime", "final": {"question": "Find the commander's name, email address, and phone number of the Ogden district.", "sql": "SELECT commander, email, phone FROM District WHERE district_name = 'Ogden'", "source_tables": ["district"]}, "evidence": "commander's name refers to commander; email address refers to email; phone number refers to phone"}
{"sample_id": 8678, "db_id": "chicago_crime", "final": {"question": "What is the FBI code and definition of Gambling?", "sql": "SELECT fbi_code_no, description FROM FBI_Code WHERE title = 'Gambling'", "source_tables": ["fbi_code"]}, "evidence": "FBI code refers to fbi_code_no; definition refers to description; Gambling refers to title = 'Gambling'"}
{"sample_id": 8679, "db_id": "chicago_crime", "final": {"question": "Among the crimes, what percentage are severe?", "sql": "SELECT CAST(COUNT(CASE WHEN index_code = 'I' THEN iucr_no ELSE NULL END) AS REAL) * 100 / COUNT(iucr_no) FROM IUCR", "source_tables": ["iucr"]}, "evidence": "severe refers to index_code = 'I'; percentage = divide(count(iucr_no where index_code = 'I'), count(iucr_no)) * 100%"}
{"sample_id": 8680, "db_id": "chicago_crime", "final": {"question": "What kind of location in Austin reported the most number of crimes?", "sql": "SELECT T2.location_description FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no WHERE T1.district_name = 'Austin' GROUP BY T2.location_description ORDER BY COUNT(T2.case_number) DESC LIMIT 1", "source_tables": ["district", "crime"]}, "evidence": "\"Austin\" is the district_name; the most number of crime refers to Max(Count(case_number)); kind of location refers to location_description"}
{"sample_id": 8681, "db_id": "chicago_crime", "final": {"question": "On average, how many community areas are there in a side?", "sql": "SELECT CAST(COUNT(T1.ward_no) AS REAL) / COUNT(DISTINCT T3.side) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T2.ward_no = T1.ward_no INNER JOIN Community_Area AS T3 ON T3.community_area_no = T2.community_area_no", "source_tables": ["community_area", "crime", "ward"]}, "evidence": "average = Divide(Count(ward_no), Count(side))"}
{"sample_id": 8682, "db_id": "chicago_crime", "final": {"question": "Which community area has the highest number of crimes reported on the street?", "sql": "SELECT T1.community_area_no FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T2.location_description = 'STREET' GROUP BY T1.community_area_no ORDER BY COUNT(T2.location_description) DESC LIMIT 1", "source_tables": ["community_area", "crime"]}, "evidence": "reported on the street refers to location_description = 'STREET'; community area with highest number of crime refers to Max(Count(location_description)); community area refers to community_area_no"}
{"sample_id": 8683, "db_id": "chicago_crime", "final": {"question": "What is the average number of reckless homicides that happened in a district?", "sql": "SELECT CAST(COUNT(T2.report_no) AS REAL) / COUNT(DISTINCT T1.district_name) FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no INNER JOIN IUCR AS T3 ON T3.iucr_no = T2.iucr_no WHERE T3.secondary_description = 'RECKLESS HOMICIDE'", "source_tables": ["district", "iucr", "crime"]}, "evidence": "\"RECKLESS HOMICIDE\" is the secondary_description; average = Divide (Count(report_no), Count(district_name))"}
{"sample_id": 8684, "db_id": "chicago_crime", "final": {"question": "Find the ward office's address and phone number of the ward where the most crimes without arrest occurred.", "sql": "SELECT T2.ward_office_address, T2.ward_office_phone FROM Crime AS T1 INNER JOIN Ward AS T2 ON T2.ward_no = T1.ward_no WHERE T1.arrest = 'FALSE' GROUP BY T2.ward_office_address, T2.ward_office_phone ORDER BY COUNT(T1.arrest) DESC LIMIT 1", "source_tables": ["ward", "crime"]}, "evidence": "the most crime without arrest refers to Max(Count(arrest = 'FALSE')); phone number refers to ward_office_phone; address refers to ward_office_address"}
{"sample_id": 8685, "db_id": "chicago_crime", "final": {"question": "Give the case number and coordinates of the places where child abduction is reported.", "sql": "SELECT T1.case_number, T1.latitude, T1.longitude FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T2.iucr_no = T1.iucr_no WHERE T2.secondary_description = 'CHILD ABDUCTION'", "source_tables": ["iucr", "crime"]}, "evidence": "\"CHILD ABDUCTION\" is the secondary_description; coordinates refers to latitude, longitude"}
{"sample_id": 8686, "db_id": "chicago_crime", "final": {"question": "What is the most reported crime in the Northwest side?", "sql": "SELECT T3.secondary_description FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no INNER JOIN IUCR AS T3 ON T3.iucr_no = T2.iucr_no WHERE T1.side = 'Northwest ' GROUP BY T3.secondary_description ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["community_area", "iucr", "crime"]}, "evidence": "most reported crime refers to max(Count(secondary_description))"}
{"sample_id": 8687, "db_id": "chicago_crime", "final": {"question": "Find the community area where the least number of domestic crimes happened.", "sql": "SELECT T2.community_area_no FROM Crime AS T1 INNER JOIN Community_Area AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.domestic = 'TRUE' GROUP BY T2.community_area_no ORDER BY COUNT(T2.community_area_no) ASC LIMIT 1", "source_tables": ["community_area", "crime"]}, "evidence": "least number of domestic crime refers to Min(Count(domestic = \"TRUE\")); community area refers to community_area_no"}
{"sample_id": 8688, "db_id": "chicago_crime", "final": {"question": "In drug abuse crimes, what percentage is related to cannabis?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.secondary_description LIKE '%CANNABIS%' THEN T1.secondary_description END) AS REAL) * 100 / COUNT(T1.secondary_description) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN FBI_Code AS T3 ON T3.fbi_code_no = T2.fbi_code_no WHERE T3.title = 'Drug Abuse'", "source_tables": ["fbi_code", "iucr", "crime"]}, "evidence": "drug abuse crime refer to title = 'Drug Abuse'; percentage = Divide (Count (secondary_description LIKE '%CANNABIS%'), Count (secondary_description)) * 100"}
{"sample_id": 8689, "db_id": "chicago_crime", "final": {"question": "What is the average number of less severe crimes reported a day in February of 2018?", "sql": "SELECT CAST(COUNT(T2.case_number) AS REAL) / 28 FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no WHERE T2.date LIKE '2/%/2018%' AND T1.index_code = 'N'", "source_tables": ["iucr", "crime"]}, "evidence": "day in February of 2018 refers to date LIKE '2/%/2018'; less severe crime refers to index_code = 'N'; average = Divide (Count(case_number), 28)"}
{"sample_id": 8690, "db_id": "chicago_crime", "final": {"question": "List the name and population of the communities where more than average solicit for prostitutes were reported.", "sql": "SELECT T2.community_area_name, T2.population FROM Crime AS T1 INNER JOIN Community_Area AS T2 ON T2.community_area_no = T1.community_area_no INNER JOIN IUCR AS T3 ON T3.iucr_no = T1.iucr_no WHERE T3.iucr_no = ( SELECT iucr_no FROM IUCR WHERE secondary_description = 'SOLICIT FOR PROSTITUTE' GROUP BY iucr_no HAVING COUNT(iucr_no) > ( SELECT SUM(CASE WHEN secondary_description = 'SOLICIT FOR PROSTITUTE' THEN 1.0 ELSE 0 END) / COUNT(iucr_no) AS average FROM IUCR ) )", "source_tables": ["community_area", "iucr", "crime"]}, "evidence": "\"SOLICIT FOR PROSTITUTE\" is the secondary_description; more than average refers to count(iucr_no) > Divide (Count(secondary_description = 'SOLICIT FOR PROSTITUTE'), Count(iucr_no)); name of community refers to community_area_name"}
{"sample_id": 8691, "db_id": "chicago_crime", "final": {"question": "Among the incidents reported in Harrison, what percentage are disorderly conduct?", "sql": "SELECT COUNT(CASE WHEN T3.title = 'Disorderly Conduct' THEN T2.report_no END) * 100.0 / COUNT(T2.report_no) AS per FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no INNER JOIN FBI_Code AS T3 ON T3.fbi_code_no = T2.fbi_code_no WHERE T1.district_name = 'Harrison'", "source_tables": ["fbi_code", "district", "crime"]}, "evidence": "\"Harrison\" is the district_name;\u00a0 'Disorderly Conduct' is the title; percentage = Divide (Count(title = 'Disorderly Conduct'), Count(report_no)) * 100; incident report refers to report_no"}
{"sample_id": 8692, "db_id": "chicago_crime", "final": {"question": "Calculate the difference in the average number of vehicular hijackings and aggravated vehicular hijackings in the districts.", "sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T1.secondary_description = 'VEHICULAR HIJACKING' THEN T1.iucr_no END) AS REAL) / CAST(COUNT(DISTINCT CASE WHEN T1.secondary_description = 'VEHICULAR HIJACKING' THEN T3.district_name END) AS REAL) - CAST(COUNT(CASE WHEN T1.secondary_description = 'AGGRAVATED VEHICULAR HIJACKING' THEN T1.iucr_no END) AS REAL) / CAST(COUNT(DISTINCT CASE WHEN T1.secondary_description = 'AGGRAVATED VEHICULAR HIJACKING' THEN T3.district_name END) AS REAL), 4) AS 'difference' FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no", "source_tables": ["district", "iucr", "crime"]}, "evidence": "\"VEHICULAR HIJACKING\" and \"AGGRAVATED VEHICULAR HIJACKING\" are both secondary_description; difference in average = Subtract (Divide(Count(secondary_description = 'VEHICULAR HIJACKING'), Count(district_name)), Divide(Count(secondary_description = \"AGGRAVATED VEHICULAR HIJACKING\"), Count(district_name)))"}
{"sample_id": 8693, "db_id": "chicago_crime", "final": {"question": "How many crimes happened in longitude -8772658001?", "sql": "SELECT COUNT(*) FROM Crime WHERE longitude = '-87.72658001'", "source_tables": ["crime"]}, "evidence": ""}
{"sample_id": 8694, "db_id": "chicago_crime", "final": {"question": "List all the crimes of the narcotic type that exist.", "sql": "SELECT secondary_description FROM IUCR WHERE primary_description = 'NARCOTICS' GROUP BY secondary_description", "source_tables": ["iucr"]}, "evidence": "narcotic type refers to primary_description = 'NARCOTICS'; crime refers to secondary_description"}
{"sample_id": 8695, "db_id": "chicago_crime", "final": {"question": "What is the first name of the aldermen of wards with more than 50,000 inhabitants?", "sql": "SELECT alderman_first_name FROM Ward WHERE Population > 50000", "source_tables": ["ward"]}, "evidence": "more than 50000 inhabitants refers to Population > 50000; first name of alderman refers to alderman_first_name"}
{"sample_id": 8696, "db_id": "chicago_crime", "final": {"question": "List crimes that the FBI has classified as Drug Abuse by their report number.", "sql": "SELECT T2.report_no FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no WHERE T1.title = 'Drug Abuse'", "source_tables": ["fbi_code", "crime"]}, "evidence": "\"Drug Abuse\" is the title of crime"}
{"sample_id": 8773, "db_id": "food_inspection", "final": {"question": "How many restaurants' owners are in California?", "sql": "SELECT COUNT(owner_state) FROM businesses WHERE owner_state = 'CA'", "source_tables": ["businesses"]}, "evidence": "restaurants' owners in California refer to owner_state = 'CA';"}
{"sample_id": 8774, "db_id": "food_inspection", "final": {"question": "How many restaurants have met all requirements in the inspection?", "sql": "SELECT COUNT(score) FROM inspections WHERE score = 100", "source_tables": ["inspections"]}, "evidence": "met all requirements in the inspection refers to score = 100;"}
{"sample_id": 8775, "db_id": "food_inspection", "final": {"question": "Among the inspections carried out in 2016, how many of them are routine?", "sql": "SELECT COUNT('date') FROM inspections WHERE STRFTIME('%Y', 'date') = '2016' AND type = 'Routine - Unscheduled'", "source_tables": ["inspections"]}, "evidence": "inspections carried out in 2016 refer to YEAR(date) = 2016; routine inspections refer to type = 'Routine - Unscheduled';"}
{"sample_id": 8776, "db_id": "food_inspection", "final": {"question": "Please list the names of all the restaurants that have met all requirements in one inspection.", "sql": "SELECT DISTINCT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = 100", "source_tables": ["businesses", "inspections"]}, "evidence": "met all requirements refers to inspections where score = 100;"}
{"sample_id": 8777, "db_id": "food_inspection", "final": {"question": "Among the restaurants being inspected in 2016, how many of them are in San Francisco?", "sql": "SELECT COUNT(DISTINCT T2.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.'date') = '2016' AND T2.city IN ('San Francisco', 'SAN FRANCISCO', 'SF', 'S.F.')", "source_tables": ["businesses", "inspections"]}, "evidence": "inspected in 2016 refers to YEAR(date) = 2016; San Francisco refers to city in ('San Francisco', 'SF' ,'S.F.', 'SAN FRANCISCO');"}
{"sample_id": 8778, "db_id": "food_inspection", "final": {"question": "What was the type of inspection Tiramisu Kitchen had on 2014/1/14?", "sql": "SELECT T1.type FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.'date' = '2014-01-14' AND T2.name = 'Tiramisu Kitchen'", "source_tables": ["businesses", "inspections"]}, "evidence": "Tiramisu Kitchen is the name of the business; inspection on 2014/1/14 refers to date = '2014-01-14';"}
{"sample_id": 8779, "db_id": "food_inspection", "final": {"question": "How many low risk violations were found in the inspection on 2014/1/14 for Tiramisu Kitchen?", "sql": "SELECT COUNT(T1.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.'date' = '2014-01-14' AND T2.name = 'Tiramisu Kitchen' AND T1.risk_category = 'Low Risk'", "source_tables": ["businesses", "violations"]}, "evidence": "Tiramisu Kitchen is the name of the business; inspection on 2014/1/14 refers to date = '2014-01-14'; low risk violations refer to risk_category = 'Low Risk';"}
{"sample_id": 8780, "db_id": "food_inspection", "final": {"question": "Please list the names of the restaurants that had a low risk violation in inspections in 2014.", "sql": "SELECT DISTINCT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.'date') = '2014' AND T1.risk_category = 'Low Risk'", "source_tables": ["businesses", "violations"]}, "evidence": "inspection in 2014 refers to year(date) = 2014; low risk violations refer to risk_category = 'Low Risk';"}
{"sample_id": 8781, "db_id": "food_inspection", "final": {"question": "What is the description of the low risk violation of Tiramisu Kitchen on 2014/1/14?", "sql": "SELECT T1.description FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.'date' = '2014-01-14' AND T2.name = 'Tiramisu Kitchen' AND T1.risk_category = 'Low Risk'", "source_tables": ["businesses", "violations"]}, "evidence": "Tiramisu Kitchen is the name of the business; 2014/1/14 refers to date = '2014-01-14'; low risk violations refer to risk_category = 'Low Risk';"}
{"sample_id": 8782, "db_id": "food_inspection", "final": {"question": "Please list the descriptions of all the high risk violations of Tiramisu Kitchen.", "sql": "SELECT DISTINCT T1.description FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' AND T2.name = 'Tiramisu Kitchen'", "source_tables": ["businesses", "violations"]}, "evidence": "Tiramisu Kitchen is the name of the business; high risk violations refer to risk_category = 'High Risk';"}
{"sample_id": 8783, "db_id": "food_inspection", "final": {"question": "How many routine inspections did Tiramisu Kitchen have?", "sql": "SELECT COUNT(T1.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.type = 'Routine - Unscheduled' AND T2.name = 'Tiramisu Kitchen'", "source_tables": ["businesses", "inspections"]}, "evidence": "Tiramisu Kitchen is the name of the business; routine inspections refer to type = 'Routine - Unscheduled';"}
{"sample_id": 8784, "db_id": "food_inspection", "final": {"question": "Among the routine inspections of Tiramisu Kitchen, how many of them have a score of over 70?", "sql": "SELECT COUNT(T2.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Tiramisu Kitchen' AND T1.type = 'Routine - Unscheduled' AND T1.score > 70", "source_tables": ["businesses", "inspections"]}, "evidence": "Tiramisu Kitchen is the name of the business; routine inspections refer to type = 'Routine - Unscheduled'; score of over 70 refers to score > 70;"}
{"sample_id": 8785, "db_id": "food_inspection", "final": {"question": "Which restaurant had more low risk violation in inspections, Tiramisu Kitchen or OMNI S.F. Hotel - 2nd Floor Pantry?", "sql": "SELECT CASE WHEN SUM(CASE WHEN T2.name = 'OMNI S.F. Hotel - 2nd Floor Pantry' THEN 1 ELSE 0 END) > SUM(CASE WHEN T2.name = 'Tiramisu Kitchen' THEN 1 ELSE 0 END) THEN 'OMNI S.F. Hotel - 2nd Floor Pantry' ELSE 'Tiramisu Kitchen' END AS result FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'Low Risk'", "source_tables": ["businesses", "violations"]}, "evidence": "Tiramisu Kitchen and OMNI S.F. Hotel - 2nd Floor Pantry are names of the business; more low risk violations refer to MAX(COUNT(risk_category = 'Low Risk'));"}
{"sample_id": 8786, "db_id": "food_inspection", "final": {"question": "How many high risk violations do the restaurants in San Francisco have in total?", "sql": "SELECT COUNT(T2.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.city IN ('San Francisco', 'SF', 'S.F.', 'SAN FRANCISCO') AND T1.risk_category = 'High Risk'", "source_tables": ["businesses", "violations"]}, "evidence": "restaurants in San Francisco refer to business_id where city in ('San Francisco', 'SF', 'S.F.', 'SAN FRANCISCO'); high risk violations refer to risk_category = 'High Risk';"}
{"sample_id": 8787, "db_id": "food_inspection", "final": {"question": "Which restaurant has the highest total number of high risk violations?", "sql": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' GROUP BY T2.name ORDER BY COUNT(T2.name) DESC LIMIT 1", "source_tables": ["businesses", "violations"]}, "evidence": "the highest total number of high risk violations refer to MAX(COUNT(risk_category = 'High Risk'));"}
{"sample_id": 8788, "db_id": "food_inspection", "final": {"question": "What is the average scores of Tiramisu Kitchen in all inspections?", "sql": "SELECT AVG(T1.score) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Tiramisu Kitchen'", "source_tables": ["businesses", "inspections"]}, "evidence": "avg(score);"}
{"sample_id": 8789, "db_id": "food_inspection", "final": {"question": "Which business had the most number of inspections? Give the Id number for that business.", "sql": "SELECT business_id FROM inspections GROUP BY business_id ORDER BY COUNT(business_id) DESC LIMIT 1", "source_tables": ["inspections"]}, "evidence": "the most number of inspections refers to MAX(COUNT(business_id)); Id number for that business refers to business_id;"}
{"sample_id": 8790, "db_id": "food_inspection", "final": {"question": "Tell the Id number of the business with the most number of violations.", "sql": "SELECT business_id FROM violations GROUP BY business_id ORDER BY COUNT(business_id) DESC LIMIT 1", "source_tables": ["violations"]}, "evidence": "Id number for that business refers to business_id; the most number of violations refers to MAX(COUNT(business_id));"}
{"sample_id": 8791, "db_id": "food_inspection", "final": {"question": "Give the name of the business which met all the required standards during the unscheduled routine inspection on 2016/9/28.", "sql": "SELECT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = 100 AND T1.'date' = '2016-09-28' AND T1.type = 'Routine - Unscheduled'", "source_tables": ["businesses", "inspections"]}, "evidence": "met all the required standards refers to score = 100; unscheduled routine inspection on 2016/9/28 refers to type = 'Routine - Unscheduled' where date = '2016-09-28';"}
{"sample_id": 8792, "db_id": "food_inspection", "final": {"question": "Which business had the most number of high risk violations? Give the name of the business.", "sql": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' GROUP BY T2.name ORDER BY COUNT(T2.name) DESC LIMIT 1", "source_tables": ["businesses", "violations"]}, "evidence": "the most number of high risk violations refers to MAX(COUNT(business_id)) where risk_category = 'High';"}
{"sample_id": 8793, "db_id": "food_inspection", "final": {"question": "How many kinds of violations did \"Stacks Restaurant\" have on 2016/10/4?", "sql": "SELECT COUNT(DISTINCT T1.violation_type_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Stacks Restaurant' AND T1.'date' = '2016-10-04'", "source_tables": ["businesses", "violations"]}, "evidence": "\"Stacks Restaurant\" is the name of the business; date = '2016-10-04';"}
{"sample_id": 8794, "db_id": "food_inspection", "final": {"question": "Give the description of the moderate risk violation which \"Chez Fayala, Inc.\" had on 2016/7/1.", "sql": "SELECT T1.description FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Chez Fayala, Inc.' AND T1.'date' = '2016-07-01' AND T1.risk_category = 'Moderate Risk'", "source_tables": ["businesses", "violations"]}, "evidence": "\"Chez Fayala, Inc.\" is the name of the business; moderate risk violation refers to risk_category = 'Moderate Risk'; date = '2016-07-01';"}
{"sample_id": 8795, "db_id": "food_inspection", "final": {"question": "Which business had the lowest score for the unscheduled routine inspection on 2016/9/26? Give the name of the business.", "sql": "SELECT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE score = ( SELECT MIN(score) FROM inspections WHERE 'date' = '2016-09-26' AND type = 'Routine - Unscheduled' ) AND T1.'date' = '2016-09-26' AND T1.type = 'Routine - Unscheduled'", "source_tables": ["businesses", "inspections"]}, "evidence": "the lowest score for unscheduled routine inspection refers to type = 'Routine - Unscheduled' where MIN(score); date = '2016-09-26';"}
{"sample_id": 8796, "db_id": "food_inspection", "final": {"question": "Provide the name of the business which had the most number of inspections because of complaint.", "sql": "SELECT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.type = 'Complaint' GROUP BY T2.name ORDER BY COUNT(T1.business_id) DESC LIMIT 1", "source_tables": ["businesses", "inspections"]}, "evidence": "the most number of inspections because of complaint refers to type = 'Complaint' where MAX(business_id);"}
{"sample_id": 8797, "db_id": "food_inspection", "final": {"question": "How many unscheduled routine inspections did \"Soma Restaurant And Bar\" have?", "sql": "SELECT COUNT(T1.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Soma Restaurant And Bar' AND T1.type = 'Routine - Unscheduled'", "source_tables": ["businesses", "inspections"]}, "evidence": "\"Soma Restaurant And Bar\" is the name of the business; unscheduled routine inspections refer to type = 'Routine - Unscheduled';"}
{"sample_id": 8798, "db_id": "food_inspection", "final": {"question": "Give the address of the business with the most number of the low risk violations.", "sql": "SELECT T2.address FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'Low Risk' GROUP BY T2.address ORDER BY COUNT(T1.business_id) DESC LIMIT 1", "source_tables": ["businesses", "violations"]}, "evidence": "the most number of the low risk violations refers to MAX(COUNT(business_id)) where risk_category = 'Low Risk' ;"}
{"sample_id": 8799, "db_id": "food_inspection", "final": {"question": "Which business was the first one to get a low risk violation because of \"Permit license or inspection report not posted\"? Give the name of the business.", "sql": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.'date' = ( SELECT MIN('date') FROM violations WHERE risk_category = 'Low Risk' AND description = 'Permit license or inspection report not posted' ) AND T1.risk_category = 'Low Risk' AND T1.description = 'Permit license or inspection report not posted'", "source_tables": ["businesses", "violations"]}, "evidence": "low risk violation because of \"Permit license or inspection report not posted\" refers to risk_category = 'Low Risk' where description = 'Permit license or inspection report not posted'; business was the first one refers to name where MIN(date);"}
{"sample_id": 8800, "db_id": "food_inspection", "final": {"question": "For the business which got the most number of violations, how many inspections did it have?", "sql": "SELECT COUNT(T2.business_id) FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id GROUP BY T1.business_id ORDER BY COUNT(T1.business_id) DESC LIMIT 1", "source_tables": ["violations", "inspections"]}, "evidence": ""}
{"sample_id": 8801, "db_id": "food_inspection", "final": {"question": "For the business whose business certificate number is 304977, how many violations did it have on 2013/10/7?", "sql": "SELECT COUNT(T1.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.business_certificate = '304977' AND T1.'date' = '2013-10-07'", "source_tables": ["businesses", "violations"]}, "evidence": "date = '2013-10-07';"}
{"sample_id": 8802, "db_id": "food_inspection", "final": {"question": "What is the average score for \"Chairman Bao\" in all its unscheduled routine inspections?", "sql": "SELECT CAST(SUM(CASE WHEN T2.name = 'Chairman Bao' THEN T1.score ELSE 0 END) AS REAL) / COUNT(CASE WHEN T1.type = 'Routine - Unscheduled' THEN T1.score ELSE 0 END) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id", "source_tables": ["businesses", "inspections"]}, "evidence": "DIVIDE(SUM(score where type = 'Routine - Unscheduled' and name = 'Chairman Bao'), COUNT(type = 'Routine - Unscheduled' where name = 'Chairman Bao'));"}
{"sample_id": 8803, "db_id": "food_inspection", "final": {"question": "What percentage of the violations for \"Melody Lounge\" are moderate risks?", "sql": "SELECT CAST(SUM(CASE WHEN T2.risk_category = 'Moderate Risk' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.business_id) FROM businesses AS T1 INNER JOIN violations AS T2 ON T1.business_id = T2.business_id WHERE T1.name = 'Melody Lounge'", "source_tables": ["businesses", "violations"]}, "evidence": "DIVIDE(COUNT(risk_category = 'Moderate Risk' where name = 'Melody Lounge'), COUNT(business_id where name = 'Melody Lounge')) as percentage;"}
{"sample_id": 8804, "db_id": "food_inspection", "final": {"question": "How many eateries are located in Hayward?", "sql": "SELECT COUNT(business_id) FROM businesses WHERE city = 'HAYWARD'", "source_tables": ["businesses"]}, "evidence": "eateries in Hayward refer city = 'HAYWARD';"}
{"sample_id": 8805, "db_id": "food_inspection", "final": {"question": "How many establishments have an inspection score of no more than 50?", "sql": "SELECT COUNT(DISTINCT business_id) FROM inspections WHERE score < 50", "source_tables": ["inspections"]}, "evidence": "establishments have the same meaning as businesses; inspection score of no more than 50 refers to score < 50;"}
{"sample_id": 8806, "db_id": "food_inspection", "final": {"question": "How many eateries applied in 2012?", "sql": "SELECT COUNT(business_id) FROM businesses WHERE STRFTIME('%Y', application_date) = '2012'", "source_tables": ["businesses"]}, "evidence": "eateries applied in 2012 refer to business_id where application_date between '2012-01-01' and '2012-12-31';"}
{"sample_id": 8807, "db_id": "food_inspection", "final": {"question": "How many foodborne illness investigations were done in 2014?", "sql": "SELECT COUNT(business_id) FROM inspections WHERE STRFTIME('%Y', 'date') = '2014' AND type = 'Foodborne Illness Investigation'", "source_tables": ["inspections"]}, "evidence": "foodborne illness investigations refer to inspections where type = 'Foodborne Illness Investigation'; investigations in 2014 refers to date between '2014-01-01' and '2014-12-31';"}
{"sample_id": 8808, "db_id": "food_inspection", "final": {"question": "How many owners have 5 or more establishments?", "sql": "SELECT COUNT(T1.owner_name) FROM ( SELECT owner_name FROM businesses GROUP BY owner_name HAVING COUNT(owner_name) > 5 ) T1", "source_tables": ["businesses"]}, "evidence": "5 or more establishments COUNT(business_id) > = 5;"}
{"sample_id": 8809, "db_id": "food_inspection", "final": {"question": "What are the names of the establishments that met all of the required standards in 2013?", "sql": "SELECT DISTINCT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.'date') = '2013' AND T1.score = 100", "source_tables": ["businesses", "inspections"]}, "evidence": "establishments have the same meaning as businesses; met all of the required standards refers to score = 100; year(date) = 2013"}
{"sample_id": 8810, "db_id": "food_inspection", "final": {"question": "In 2016, which city has the highest number of establishments with the highest health and safety hazards?", "sql": "SELECT T2.city FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.'date') = '2016' AND T1.risk_category = 'High Risk' GROUP BY T2.city ORDER BY COUNT(T2.city) DESC LIMIT 1", "source_tables": ["businesses", "violations"]}, "evidence": "the highest health and safety hazards refer to risk_category = 'High Risk'; year(date) = 2016; establishments has the same meaning as businesses;"}
{"sample_id": 8811, "db_id": "food_inspection", "final": {"question": "What is the name of the establishment with the lowest inspection score of all time?", "sql": "SELECT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = ( SELECT MIN(score) FROM inspections )", "source_tables": ["businesses", "inspections"]}, "evidence": "the lowest inspection score refers to MIN(score);"}
{"sample_id": 8812, "db_id": "food_inspection", "final": {"question": "How many high risks violations did the Tiramisu Kitchen violate?", "sql": "SELECT COUNT(T1.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Tiramisu Kitchen' AND T1.risk_category = 'High Risk'", "source_tables": ["businesses", "violations"]}, "evidence": "Tiramisu Kitchen is the name of the business; high risks violations refer to risk_category = 'High Risk';"}
{"sample_id": 8813, "db_id": "food_inspection", "final": {"question": "How many establishments with the tax code H24 have complaint inspections of 5 or more?", "sql": "SELECT COUNT(*) FROM ( SELECT T1.business_id FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.tax_code = 'H24' AND T1.type = 'Complaint' GROUP BY T1.business_id HAVING COUNT(T1.business_id) > 5 ) T3", "source_tables": ["businesses", "inspections"]}, "evidence": "establishments with the tax code H24 refer to business_id where tax_code = 'H24'; complaint inspections of 5 or more refer to inspections where type = 'Complaint' and COUNT(business_id) \u2265 5;"}
{"sample_id": 8814, "db_id": "food_inspection", "final": {"question": "In 2013, what are the names of the establishments with contaminated or adulterated food?", "sql": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.'date') = '2013' AND T1.description = 'Contaminated or adulterated food'", "source_tables": ["businesses", "violations"]}, "evidence": "establishments have the same meaning as businesses; contaminated or adulterated food refers to violations where description = 'Contaminated or adulterated food'; date = '2013';"}
{"sample_id": 8815, "db_id": "food_inspection", "final": {"question": "Among the establishments with a postal code of 94102, how many establishments have a score of 90 or more in 2015?", "sql": "SELECT COUNT(DISTINCT T2.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id INNER JOIN inspections AS T3 ON T2.business_id = T3.business_id WHERE STRFTIME('%Y', T1.'date') = '2015' AND T2.postal_code = '94102' AND T3.score > 90", "source_tables": ["businesses", "violations", "inspections"]}, "evidence": "establishment has the same meaning as business; score of 90 or more refers to score \u2265 90; year(date) = 2015;"}
{"sample_id": 8816, "db_id": "food_inspection", "final": {"question": "What are the names of the establishments that met all the required standards for 4 consecutive years?", "sql": "SELECT DISTINCT T4.name FROM ( SELECT T3.name, T3.years, row_number() OVER (PARTITION BY T3.name ORDER BY T3.years) AS rowNumber FROM ( SELECT DISTINCT name, STRFTIME('%Y', 'date') AS years FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = 100 ) AS T3 ) AS T4 GROUP BY T4.name, date(T4.years || '-01-01', '-' || (T4.rowNumber - 1) || ' years') HAVING COUNT(T4.years) = 4", "source_tables": ["businesses", "inspections"]}, "evidence": "establishment has the same meaning as business; score of 90 or more refers to score \u2265 90; year(date) = 2015; ; met all required standards for 4 consecutive years refers to COUNT(year(date)) = 4 where score = 100;"}
{"sample_id": 8817, "db_id": "food_inspection", "final": {"question": "Between 2014 to 2016, what is the average inpsection score of the establishment owned by Yiu Tim Chan in 808 Pacific Ave, San Francisco?", "sql": "SELECT AVG(T1.score) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.'date') BETWEEN '2014' AND '2016' AND T2.owner_name = 'Yiu Tim Chan' AND T2.address = '808 Pacific Ave' AND T2.city = 'San Francisco'", "source_tables": ["businesses", "inspections"]}, "evidence": "average inspection score refers to avg(score); establishment owned by Yiu Tim Chan refers to business_id where owner_name = 'Yiu Tim Chan'; Between 2014 to 2016 refers to year(date) between 2014 and 2016; address = '808 Pacific Ave'; city = 'San Francisco';"}
{"sample_id": 8818, "db_id": "food_inspection", "final": {"question": "What is the average score of the establishments owned by the owner with the highest number of establishments?", "sql": "SELECT AVG(T1.score) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id GROUP BY T2.owner_name ORDER BY COUNT(T2.business_id) DESC LIMIT 1", "source_tables": ["businesses", "inspections"]}, "evidence": "average score refers avg(score); owner with the highest number of establishments refers to owner_name where MAX(COUNT(business_id));"}
{"sample_id": 8819, "db_id": "food_inspection", "final": {"question": "What is the name of the establishment with the highest number of low risk violations in 2014?", "sql": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.'date') = '2014' AND T1.risk_category = 'Low Risk' GROUP BY T2.name ORDER BY COUNT(T2.business_id) DESC LIMIT 1", "source_tables": ["businesses", "violations"]}, "evidence": "establishment with the highest number of low risk violations refers to business_id where MAX(COUNT(risk_category = 'Low Risk')); year(date) = 2014;"}
{"sample_id": 8820, "db_id": "food_inspection", "final": {"question": "Among the top 5 owners with highest number of establishments, which owner has the highest number of high risk violations? Give the name of the owner.", "sql": "SELECT T4.owner_name FROM violations AS T3 INNER JOIN businesses AS T4 ON T3.business_id = T4.business_id INNER JOIN ( SELECT T2.owner_name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id GROUP BY T2.owner_name ORDER BY COUNT(T1.business_id) DESC LIMIT 5 ) AS T5 ON T4.owner_name = T5.owner_name WHERE T3.risk_category = 'High Risk' GROUP BY T4.owner_name ORDER BY COUNT(T3.risk_category) DESC LIMIT 1", "source_tables": ["businesses", "violations"]}, "evidence": "5 owners with highest number of establishments refer to owner_name where MAX(COUNT(business_id)) LIMIT 5; the highest number of high risk violations refers to MAX(COUNT(risk_category = 'High Risk'));"}
{"sample_id": 8821, "db_id": "food_inspection", "final": {"question": "Which establishment has the highest number of inspections done? Give the name of the establishment and calculate for its average score per inspection.", "sql": "SELECT T2.name, AVG(T1.score) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id GROUP BY T2.name ORDER BY COUNT(T2.business_id) DESC LIMIT 1", "source_tables": ["businesses", "inspections"]}, "evidence": "establishment refers to business_id; the highest number of inspections refers to MAX(COUNT(business_id)); avg(score);"}
{"sample_id": 8856, "db_id": "cookbook", "final": {"question": "What is the title of the recipe that is most likely to gain weight?", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat DESC LIMIT 1", "source_tables": ["recipe", "nutrition"]}, "evidence": "most likely to gain weight refers to MAX(total_fat)"}
{"sample_id": 8857, "db_id": "cookbook", "final": {"question": "What is the unsaturated fat content in the recipe \"Raspberry Chiffon Pie\"?", "sql": "SELECT T2.total_fat - T2.sat_fat FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie'", "source_tables": ["recipe", "nutrition"]}, "evidence": "Raspberry Chiffon Pie refers to title; unsaturated fat refers to SUBTRACT(total_fat, sat_fat)"}
{"sample_id": 8858, "db_id": "cookbook", "final": {"question": "Please list the titles of all the recipes that are salt/sodium-free.", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.sodium < 5", "source_tables": ["recipe", "nutrition"]}, "evidence": "salt/sodium-free refers to sodium < 5"}
{"sample_id": 8859, "db_id": "cookbook", "final": {"question": "Please list the titles of all the recipes that may lead to constipation, feeling sick or stomach pain.", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.iron > 20", "source_tables": ["recipe", "nutrition"]}, "evidence": "may lead to constipation, feeling sick or stomach pain refers to iron > 20"}
{"sample_id": 8860, "db_id": "cookbook", "final": {"question": "Which recipe is more beneficial in wound healing, \"Raspberry Chiffon Pie\" or \"Fresh Apricot Bavarian\"?", "sql": "SELECT DISTINCT CASE WHEN CASE WHEN T2.title = 'Raspberry Chiffon Pie' THEN T1.vitamin_c END > CASE WHEN T2.title = 'Fresh Apricot Bavarian' THEN T1.vitamin_c END THEN 'Raspberry Chiffon Pie' ELSE 'Fresh Apricot Bavarian' END AS 'vitamin_c is higher' FROM Nutrition T1 INNER JOIN Recipe T2 ON T2.recipe_id = T1.recipe_id", "source_tables": ["recipe", "nutrition"]}, "evidence": "Raspberry Chiffon Pie and Fresh Apricot Bavarian are title; vitamin_c is higher refers to MAX(vitamin_c)"}
{"sample_id": 8861, "db_id": "cookbook", "final": {"question": "Among the recipes that take more than 10 minutes to prepare, what is the title of the one with the most calories?", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.prep_min > 10 ORDER BY T2.calories DESC LIMIT 1", "source_tables": ["recipe", "nutrition"]}, "evidence": "more than 10 minutes to prepare refers to prep_min > 10; the most calories refers to MAX(calories)"}
{"sample_id": 8862, "db_id": "cookbook", "final": {"question": "How many calories does the recipe \"Raspberry Chiffon Pie\" contain?", "sql": "SELECT T2.calories FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie'", "source_tables": ["recipe", "nutrition"]}, "evidence": "Raspberry Chiffon Pie refers to title"}
{"sample_id": 8863, "db_id": "cookbook", "final": {"question": "Is the ingredient \"graham cracker crumbs\" optional in the recipe \"Raspberry Chiffon Pie\"?", "sql": "SELECT T2.optional FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Raspberry Chiffon Pie' AND T3.name = 'graham cracker crumbs'", "source_tables": ["recipe", "ingredient", "quantity"]}, "evidence": "'graham cracker crumbs' is a name of an ingredient; 'Raspberry Chiffon Pie' refers to title"}
{"sample_id": 8864, "db_id": "cookbook", "final": {"question": "How many ingredients must be rationed in the recipe \"Raspberry Chiffon Pie\"?", "sql": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie' AND T2.max_qty = T2.min_qty", "source_tables": ["recipe", "quantity"]}, "evidence": "Raspberry Chiffon Pie refers to title; ingredient must be rationed refers to max_qty = min_qty"}
{"sample_id": 8865, "db_id": "cookbook", "final": {"question": "Please list the names of all the ingredients needed for the recipe \"Raspberry Chiffon Pie\" that do not need preprocessing.", "sql": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Raspberry Chiffon Pie' AND T2.preparation IS NULL", "source_tables": ["recipe", "ingredient", "quantity"]}, "evidence": "Raspberry Chiffon Pie refers to title; do not need preprocessing refers to preparation IS NULL"}
{"sample_id": 8866, "db_id": "cookbook", "final": {"question": "How many recipes include the ingredient \"graham cracker crumbs\"?", "sql": "SELECT COUNT(*) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T1.name = 'graham cracker crumbs'", "source_tables": ["ingredient", "quantity"]}, "evidence": "'graham cracker crumbs' is a name of an ingredient"}
{"sample_id": 8867, "db_id": "cookbook", "final": {"question": "At least how many cups of graham cracker crumbs does the recipe \"Raspberry Chiffon Pie\" need?", "sql": "SELECT T2.min_qty FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Raspberry Chiffon Pie' AND T3.name = 'graham cracker crumbs'", "source_tables": ["recipe", "ingredient", "quantity"]}, "evidence": "'graham cracker crumbs' is a name of an ingredient; 'Raspberry Chiffon Pie' refers to title"}
{"sample_id": 8868, "db_id": "cookbook", "final": {"question": "How many calories from fat are there in the recipe \"Raspberry Chiffon Pie\"?", "sql": "SELECT T2.calories * T2.pcnt_cal_fat FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie'", "source_tables": ["recipe", "nutrition"]}, "evidence": "calories from fat refers to MULTIPLY(calories, pcnt_cal_fat)||'%; Raspberry Chiffon Pie refers to title"}
{"sample_id": 8869, "db_id": "cookbook", "final": {"question": "How many calories on average does a recipe that comes from \"Produce for Better Health Foundation and 5 a Day\" contain?", "sql": "SELECT AVG(T2.calories) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.source = 'Produce for Better Health Foundation and 5 a Day'", "source_tables": ["recipe", "nutrition"]}, "evidence": "Produce for Better Health Foundation and 5 a Day is a source of recipe; calculation = DIVIDE(SUM(calories), COUNT(recipe_id))"}
{"sample_id": 8870, "db_id": "cookbook", "final": {"question": "How many calories does the turkey tenderloin bundles recipe have?", "sql": "SELECT T2.calories FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Turkey Tenderloin Bundles'", "source_tables": ["recipe", "nutrition"]}, "evidence": "turkey tenderloin refers to title"}
{"sample_id": 8871, "db_id": "cookbook", "final": {"question": "How many cups of 1% lowfat milk should be added to no.1436 recipe?", "sql": "SELECT COUNT(*) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T1.name = '1% lowfat milk' AND T2.unit = 'cup(s)' AND T2.recipe_id = 1436", "source_tables": ["ingredient", "quantity"]}, "evidence": "1% lowfat milk is a name of an ingredient; no.1436 recipe refers to recipe_id = 1436; max_qty = min_qty"}
{"sample_id": 8872, "db_id": "cookbook", "final": {"question": "Which recipe in the database contains the most total fat? Give its title.", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat DESC LIMIT 1", "source_tables": ["recipe", "nutrition"]}, "evidence": "the most total fat refers to MAX(total_fat)"}
{"sample_id": 8873, "db_id": "cookbook", "final": {"question": "How many times do seedless red grapes appear in the recipes?", "sql": "SELECT COUNT(*) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T1.name = 'seedless red grapes'", "source_tables": ["ingredient", "quantity"]}, "evidence": "seedless red grapes is a name of an ingredient"}
{"sample_id": 8874, "db_id": "cookbook", "final": {"question": "State the name of the optional ingredient of no.1397 recipe.", "sql": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T2.recipe_id = 1397 AND T2.optional = 'TRUE'", "source_tables": ["ingredient", "quantity"]}, "evidence": "no.1397 recipe refers to recipe_id = 1397; optional ingredient refers to optional = 'TRUE'"}
{"sample_id": 8875, "db_id": "cookbook", "final": {"question": "Which recipe needs the most frozen raspberries in light syrup? State its title.", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.name = 'frozen raspberries in light syrup' AND T2.max_qty = T2.min_qty", "source_tables": ["recipe", "ingredient", "quantity"]}, "evidence": "frozen raspberries in light syrup is a name of an ingredient; max_qty = min_qty"}
{"sample_id": 8876, "db_id": "cookbook", "final": {"question": "Give the name of the most widely used ingredient.", "sql": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id GROUP BY T1.name ORDER BY COUNT(T1.name) DESC LIMIT 1", "source_tables": ["ingredient", "quantity"]}, "evidence": "the most widely used ingredient refers to MAX(COUNT(ingredient_id))"}
{"sample_id": 8877, "db_id": "cookbook", "final": {"question": "What kind of preparation is needed for apple juice to make a raspberry-pear couscous cake?", "sql": "SELECT T2.preparation FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Raspberry-Pear Couscous Cake' AND T3.name = 'apple juice'", "source_tables": ["recipe", "ingredient", "quantity"]}, "evidence": "apple juice is a name of an ingredient; raspberry-pear couscous cake refers to title"}
{"sample_id": 8878, "db_id": "cookbook", "final": {"question": "How many cups of almonds do you need for a chicken pocket sandwich?", "sql": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Chicken Pocket Sandwich' AND T3.name = 'almonds' AND T2.unit = 'cup(s)'", "source_tables": ["recipe", "ingredient", "quantity"]}, "evidence": "cups is a unit; almonds is a name of an ingredient; chicken pocket sandwich refers to title"}
{"sample_id": 8879, "db_id": "cookbook", "final": {"question": "Name the recipe with the most Vitamin C.", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.vitamin_c DESC LIMIT 1", "source_tables": ["recipe", "nutrition"]}, "evidence": "the most Vitamin C refers to MAX(vitamin_c)"}
{"sample_id": 8880, "db_id": "cookbook", "final": {"question": "How much Vitamin A is in Sherry beef?", "sql": "SELECT T2.vitamin_a FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Sherried Beef'", "source_tables": ["recipe", "nutrition"]}, "evidence": "Sherry beef refers to title = 'Sherried Beef'"}
{"sample_id": 8881, "db_id": "cookbook", "final": {"question": "State the title of the recipe with most kinds of ingredients.", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id GROUP BY T1.title ORDER BY COUNT(title) DESC LIMIT 1", "source_tables": ["recipe", "quantity"]}, "evidence": "the most kinds of ingredients refers to MAX(COUNT(recipe_id))"}
{"sample_id": 8882, "db_id": "cookbook", "final": {"question": "How many times is the sodium content in Lasagne-Spinach Spirals to Beef and Spinach Pita Pockets?", "sql": "SELECT CAST(SUM(CASE WHEN T1.title = 'Lasagne-Spinach Spirals' THEN T2.sodium ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.title = 'Beef and Spinach Pita Pockets' THEN T2.sodium ELSE 0 END) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id", "source_tables": ["recipe", "nutrition"]}, "evidence": "sodium is a name of an ingredient; calculation = DIVIDE(SUM(title = 'Lasagne-Spinach Spirals' THEN sodium), SUM(title = 'Beef and Spinach Pita Pockets' THEN sodium))"}
{"sample_id": 8883, "db_id": "cookbook", "final": {"question": "What is the average calorie count for all recipes using coarsely ground black pepper?", "sql": "SELECT AVG(T3.calories) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T2.ingredient_id = T1.ingredient_id INNER JOIN Nutrition AS T3 ON T3.recipe_id = T2.recipe_id WHERE T1.name = 'coarsely ground black pepper'", "source_tables": ["ingredient", "nutrition", "quantity"]}, "evidence": "coarsely ground black pepper is a name of an ingredient; calculation = AVG(calories)"}
{"sample_id": 8884, "db_id": "cookbook", "final": {"question": "What are the names of the recipes that will cause stomach pain?", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.iron > 20", "source_tables": ["recipe", "nutrition"]}, "evidence": "cause stomach pain refers to iron > 20"}
{"sample_id": 8885, "db_id": "cookbook", "final": {"question": "How many ingredients are there in Apricot Yogurt Parfaits?", "sql": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Apricot Yogurt Parfaits'", "source_tables": ["recipe", "quantity"]}, "evidence": "Apricot Yogurt Parfaits refers to title"}
{"sample_id": 8886, "db_id": "cookbook", "final": {"question": "What are the names of the ingredients that need to be cook in beef broth?", "sql": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T2.preparation = 'cooked in beef broth'", "source_tables": ["ingredient", "quantity"]}, "evidence": "'cook in beef broth' refers to a preparation"}
{"sample_id": 8887, "db_id": "cookbook", "final": {"question": "How many ingredients are there in the recipe that is best in helping your body's natural defence against illness and infection?", "sql": "SELECT COUNT(*) FROM Nutrition AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.vitamin_a > 0", "source_tables": ["quantity", "nutrition"]}, "evidence": "best in helping your body's natural defence against illness and infection refers to MAX(vitamin_a);"}
{"sample_id": 8888, "db_id": "cookbook", "final": {"question": "What are the names of the top 5 recipes that are best for wound healing?", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.vitamin_c DESC LIMIT 5", "source_tables": ["recipe", "nutrition"]}, "evidence": "names of the recipes refers to title; best for wound healing refers to MAX(vitamin_c)"}
{"sample_id": 8889, "db_id": "cookbook", "final": {"question": "Which ingredient appeared the least in recipes?", "sql": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id GROUP BY T2.ingredient_id ORDER BY COUNT(T2.ingredient_id) ASC LIMIT 1", "source_tables": ["ingredient", "quantity"]}, "evidence": "ingredient appeared the least in recipes refers to MIN(ingredient_id)"}
{"sample_id": 8890, "db_id": "cookbook", "final": {"question": "How many baking product ingredients are there in the No-Bake Chocolate Cheesecake?", "sql": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.category = 'baking products' AND T1.title = 'No-Bake Chocolate Cheesecake'", "source_tables": ["recipe", "ingredient", "quantity"]}, "evidence": "baking product is a category; No-Bake Chocolate Cheesecake refers to title;"}
{"sample_id": 8891, "db_id": "cookbook", "final": {"question": "List all the ingredients for Strawberry Sorbet.", "sql": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Strawberry Sorbet'", "source_tables": ["recipe", "ingredient", "quantity"]}, "evidence": "Strawberry Sorbet refers to title"}
{"sample_id": 8892, "db_id": "cookbook", "final": {"question": "What are the optional ingredients for Warm Chinese Chicken Salad?", "sql": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Warm Chinese Chicken Salad' AND T2.optional = 'TRUE'", "source_tables": ["recipe", "ingredient", "quantity"]}, "evidence": "optional refers to optional = 'TRUE'; Warm Chinese Chicken Salad refers to title"}
{"sample_id": 8893, "db_id": "cookbook", "final": {"question": "Among the recipes with alcohol content over 10, which recipe takes the longest to prepare?", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.alcohol > 10 ORDER BY T1.prep_min DESC LIMIT 1", "source_tables": ["recipe", "nutrition"]}, "evidence": "with alcohol content over 10 refers to alcohol > 10; takes the longest to prepare refers to MAX(prep_min)"}
{"sample_id": 8894, "db_id": "cookbook", "final": {"question": "How many servings does the recipe with the highest unsaturated fat have?", "sql": "SELECT COUNT(T1.title) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat - T2.sat_fat DESC LIMIT 1", "source_tables": ["recipe", "nutrition"]}, "evidence": "with the highest unsaturated fat refers MAX(SUBTRACT(total_fat, sat_fat))"}
{"sample_id": 8895, "db_id": "cookbook", "final": {"question": "Among the recipes whose source is the National Potato Board, which recipe has the highest calories?", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.source = 'National Potato Board' ORDER BY T2.calories DESC LIMIT 1", "source_tables": ["recipe", "nutrition"]}, "evidence": "the National Potato Board is a source; the highest calories refers to MAX(calories)"}
{"sample_id": 8896, "db_id": "cookbook", "final": {"question": "Which recipe has the highest number of ingredients? Calculate the said recipe's total time of cooking.", "sql": "SELECT T2.recipe_id, T1.prep_min + T1.cook_min + T1.stnd_min FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id GROUP BY T2.recipe_id ORDER BY COUNT(T2.ingredient_id) DESC LIMIT 1", "source_tables": ["recipe", "quantity"]}, "evidence": "the highest number of ingredients refers to MAX(ingredient_id); total time refers to recipe_id, total time of cooking refers to TOTAL(prep_min, cook_min, stnd_min)"}
{"sample_id": 8925, "db_id": "human_resources", "final": {"question": "Which employee has the highest salary? Please give his or her full name.", "sql": "SELECT firstname, lastname FROM employee ORDER BY salary DESC LIMIT 1", "source_tables": ["employee"]}, "evidence": "the highest salary refers to MAX(salary); full name = firstname, lastname"}
{"sample_id": 8926, "db_id": "human_resources", "final": {"question": "How many emplyees have a good job performance?", "sql": "SELECT COUNT(*) FROM employee WHERE performance = 'Good'", "source_tables": ["employee"]}, "evidence": "good job performance refers to performance = 'Good'"}
{"sample_id": 8927, "db_id": "human_resources", "final": {"question": "Please list the social security numbers of the male employees with a salary of over $70,000 a year.", "sql": "SELECT ssn FROM employee WHERE gender = 'M' AND CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL) > 70000", "source_tables": ["employee"]}, "evidence": "social security numbers refers to ssn; male employees refers to gender = 'M'; salary of over $70,000 a year refers to salary > '70000'"}
{"sample_id": 8928, "db_id": "human_resources", "final": {"question": "What is the required education for the position of regional manager?", "sql": "SELECT educationrequired FROM position WHERE positiontitle = 'Regional Manager'", "source_tables": ["position"]}, "evidence": "required education refers to educationrequired; position of regional manager refers to\u00a0 positiontitle = 'Regional Manager'"}
{"sample_id": 8929, "db_id": "human_resources", "final": {"question": "Which position has a lower minimum salary, Account Representative or Trainee?", "sql": "SELECT positiontitle FROM position WHERE positiontitle = 'Account Representative' OR positiontitle = 'Trainee' ORDER BY minsalary ASC LIMIT 1", "source_tables": ["position"]}, "evidence": "position of Account Representative refers to positiontitle = 'Account Representative'; position of Trainee refers to positiontitle = 'Trainee'; lower minimum salary refers to MIN(minsalary)"}
{"sample_id": 8930, "db_id": "human_resources", "final": {"question": "In which city's office does Sandy Adams work at?", "sql": "SELECT T2.locationcity FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.lastname = 'Adams' AND T1.firstname = 'Sandy'", "source_tables": ["employee", "location"]}, "evidence": "Sandy Adams is the fullname of an employee; full name = firstname, lastname; city refers to locationcity"}
{"sample_id": 8931, "db_id": "human_resources", "final": {"question": "Among the employees working at the office in New York, how many of them have a good job performance?", "sql": "SELECT COUNT(*) FROM employee AS T1 INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.state = 'NY' AND T1.performance = 'Good'", "source_tables": ["employee", "location"]}, "evidence": "Sandy Adams is the fullname of an employee; full name = firstname, lastname; New York refers to state = 'NY'; good job performance refers to performance = 'Good';"}
{"sample_id": 8932, "db_id": "human_resources", "final": {"question": "What is the office phone number of the location at which Sandy Adams works?", "sql": "SELECT T2.officephone FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.lastname = 'Adams' AND T1.firstname = 'Sandy'", "source_tables": ["employee", "location"]}, "evidence": "Sandy Adams is the fullname of an employee; full name = firstname, lastname;"}
{"sample_id": 8933, "db_id": "human_resources", "final": {"question": "How many male employees work at the address 450 Peachtree Rd?", "sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.address = '450 Peachtree Rd' AND T1.gender = 'M'", "source_tables": ["employee", "location"]}, "evidence": "male employees refers to gender = 'M'"}
{"sample_id": 8934, "db_id": "human_resources", "final": {"question": "How many employees work as an Account Representative?", "sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Account Representative'", "source_tables": ["employee", "position"]}, "evidence": "work as an Account Representative refers to positiontitle = 'Account Representative'"}
{"sample_id": 8935, "db_id": "human_resources", "final": {"question": "How much higher is James Johnson's salary from the minimum salary of his title?", "sql": "SELECT CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL) - CAST(REPLACE(SUBSTR(T2.minsalary, 4), ',', '') AS REAL) AS diff FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.lastname = 'Johnson' AND T1.firstname = 'James'", "source_tables": ["employee", "position"]}, "evidence": "James Johnson is the fullname of an employee; full name = firstname, lastname; minimum salary refers to minsalary; calculation = SUBTRACT(salary, minsalary)"}
{"sample_id": 8936, "db_id": "human_resources", "final": {"question": "Among the employees who are Trainees, how many of them work in New York?", "sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Trainee' AND T2.state = 'NY'", "source_tables": ["employee", "position", "location"]}, "evidence": "Trainees is a position title; California refers to state = 'NY'"}
{"sample_id": 8937, "db_id": "human_resources", "final": {"question": "Please list the full names of the employees who are working as a Trainee.", "sql": "SELECT T1.firstname, T1.lastname FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Trainee'", "source_tables": ["employee", "position"]}, "evidence": "full name = firstname, lastname; trainees is a position title"}
{"sample_id": 8938, "db_id": "human_resources", "final": {"question": "Which employee's job position requires a higher education level, Jose Rodriguez or Sandy Adams?", "sql": "SELECT T1.firstname, T1.lastname FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE (T1.lastname = 'Adams' AND T1.firstname = 'Sandy') OR (T1.lastname = 'Rodriguez' AND T1.firstname = 'Jose') ORDER BY T2.educationrequired DESC LIMIT 1", "source_tables": ["employee", "position"]}, "evidence": "Jose Rodriguez AND Sandy Adams are the fullname of employee; full name = firstname, lastname; higher education level refers to MAX(educationrequired)"}
{"sample_id": 8939, "db_id": "human_resources", "final": {"question": "Please list the zip codes of the offices where all the male employees with a good job performance work at.", "sql": "SELECT T2.zipcode FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.gender = 'M' AND T1.performance = 'Good'", "source_tables": ["employee", "location"]}, "evidence": "male employees refers to gender = 'M'; good job performance refers to performance = 'Good'"}
{"sample_id": 8940, "db_id": "human_resources", "final": {"question": "Please list the social security numbers of all the employees who work in California.", "sql": "SELECT T1.ssn FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.state = 'CA'", "source_tables": ["employee", "location"]}, "evidence": "social security numbers refers to ssn; California refers to state = 'CA'"}
{"sample_id": 8941, "db_id": "human_resources", "final": {"question": "Among the employees who work as a Trainee, how many of them have a salary of over &20,000 a year?", "sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL) > 20000 AND T2.positiontitle = 'Trainee'", "source_tables": ["employee", "position"]}, "evidence": "Trainee is a position title; salary of over 20,000 refers to salary > '20000'"}
{"sample_id": 8942, "db_id": "human_resources", "final": {"question": "What is the average salary of the employees who work as a Trainee?", "sql": "SELECT AVG(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) AS avg FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Trainee'", "source_tables": ["employee", "position"]}, "evidence": "average = DIVIDE( SUM(salary), COUNT(positiontitle) where positiontitle = 'Trainee'; Trainee is a position title"}
{"sample_id": 8943, "db_id": "human_resources", "final": {"question": "By what percentage is the average salary of Trainees higher than the minimum salary of this postion?", "sql": "SELECT 100 * (AVG(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) - CAST(REPLACE(SUBSTR(T2.minsalary, 4), ',', '') AS REAL)) / CAST(REPLACE(SUBSTR(T2.minsalary, 4), ',', '') AS REAL) AS per FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Trainee'", "source_tables": ["employee", "position"]}, "evidence": "AVG(salary); Trainee is a position title; minimum salary refers to minsalary; calculation = DIVIDE(SUBTRACT(AVG(salary), minsalary), minsalary) * 100"}
{"sample_id": 8944, "db_id": "human_resources", "final": {"question": "Give the number of female employees.", "sql": "SELECT COUNT(*) FROM employee WHERE gender = 'F'", "source_tables": ["employee"]}, "evidence": "number of female employees means COUNT(gender = 'F')"}
{"sample_id": 8945, "db_id": "human_resources", "final": {"question": "State the name of the city where Jose Rodriguez works.", "sql": "SELECT T2.locationcity FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.firstname = 'Jose' AND T1.lastname = 'Rodriguez'", "source_tables": ["employee", "location"]}, "evidence": "Jose Rodriguez is the fullname of an employee; full name = firstname, lastname; name of city refers to locationcity"}
{"sample_id": 8946, "db_id": "human_resources", "final": {"question": "In which state does Emily Wood work?", "sql": "SELECT T2.state FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.firstname = 'Emily' AND T1.lastname = 'Wood'", "source_tables": ["employee", "location"]}, "evidence": "Emily Wood is the full name of an employee; full name = firstname, lastname;"}
{"sample_id": 8947, "db_id": "human_resources", "final": {"question": "What is the education required for David Whitehead to reach his current position?", "sql": "SELECT T2.educationrequired FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'David' AND T1.lastname = 'Whitehead' AND T1.gender = 'M'", "source_tables": ["employee", "position"]}, "evidence": "David Whitehead is the full name of an employee; full name = firstname, lastname"}
{"sample_id": 8948, "db_id": "human_resources", "final": {"question": "How many employees are there in the \"Miami\" office?", "sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.locationcity = 'Miami'", "source_tables": ["employee", "location"]}, "evidence": "Miami office refers to locationcity = 'Miami'"}
{"sample_id": 8949, "db_id": "human_resources", "final": {"question": "Who is the highest paid employee in \"Boston\"? Give the full name.", "sql": "SELECT T1.firstname, T1.lastname FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.locationcity = 'Boston' ORDER BY T1.salary DESC LIMIT 1", "source_tables": ["employee", "location"]}, "evidence": "Boston refers to locationcity = 'Boston'; the highest paid employee refers to MAX(salary); full name = firstname, lastname"}
{"sample_id": 8950, "db_id": "human_resources", "final": {"question": "Who is the employee in \u201cNew York City\u201d with a good performance? Give the social security number of the employee.", "sql": "SELECT T1.firstname, T1.lastname, T1.ssn FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.locationcity = 'New York City' AND T1.performance = 'Good'", "source_tables": ["employee", "location"]}, "evidence": "New York City refers to locationcity = 'New York City'; good performance refers to performance = 'Good'; social security number refers to ssn"}
{"sample_id": 8951, "db_id": "human_resources", "final": {"question": "How many \"account representatives\" are there in Chicago with a good performance?", "sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Account Representative' AND T2.locationcity = 'Chicago' AND T1.performance = 'Good'", "source_tables": ["employee", "position", "location"]}, "evidence": "account representatives is a position title; Chicago refers to locationcity = 'Chicago'; good performance refers to performance = 'Good'"}
{"sample_id": 8952, "db_id": "human_resources", "final": {"question": "What is Kenneth Charles's position title?", "sql": "SELECT T2.positiontitle FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'Kenneth' AND T1.lastname = 'Charles'", "source_tables": ["employee", "position"]}, "evidence": "Kenneth Charles is the full name of an employee; full name = firstname, lastname"}
{"sample_id": 8953, "db_id": "human_resources", "final": {"question": "Give the full address of the office of the highest paid manager.", "sql": "SELECT T2.address FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Manager' ORDER BY T1.salary DESC LIMIT 1", "source_tables": ["employee", "position", "location"]}, "evidence": "the highest paid refers to MAX(salary); manager is a position title"}
{"sample_id": 8954, "db_id": "human_resources", "final": {"question": "What is the max salary for 'Tracy Coulter' if he/she stays on his/her position?", "sql": "SELECT T2.maxsalary FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'Tracy' AND T1.lastname = 'Coulter'", "source_tables": ["employee", "position"]}, "evidence": "Tracy Coulter is the full name of an employee; full name = firstname, lastname"}
{"sample_id": 8955, "db_id": "human_resources", "final": {"question": "If Jose Rodriguez tried his best, how many percentage can his salary raise without changing his position?", "sql": "SELECT 100 * (CAST(REPLACE(SUBSTR(T2.maxsalary, 4), ',', '') AS REAL) - CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) / CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL) AS per FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'Jose' AND T1.lastname = 'Rodriguez'", "source_tables": ["employee", "position"]}, "evidence": "Jose Rodriguez is the full name of an employee; full name = firstname, lastname; calculation = DIVIDE(SUBTRACT(maxsalary, salary), salary) * 100"}
{"sample_id": 8956, "db_id": "human_resources", "final": {"question": "How many employees whose performance is poor have a salary of over $50,000 per year?", "sql": "SELECT COUNT(*) FROM employee WHERE performance = 'Poor' AND CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL) > 50000", "source_tables": ["employee"]}, "evidence": "performance is poor refers to performance = 'Poor'; salary of over $50,000 refers to salary > '50000'"}
{"sample_id": 8957, "db_id": "human_resources", "final": {"question": "Who is the employee with the highest salary? Specify his/her full name.", "sql": "SELECT firstname, lastname FROM employee WHERE CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL) = ( SELECT MAX(CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL)) FROM employee )", "source_tables": ["employee"]}, "evidence": "the highest salary refers to MAX(salary); full name = firstname, lastname"}
{"sample_id": 8958, "db_id": "human_resources", "final": {"question": "How many positions have a maximum salary of no more than US$1000,000?", "sql": "SELECT COUNT(*) FROM position WHERE CAST(REPLACE(SUBSTR(maxsalary, 4), ',', '') AS REAL) < 100000", "source_tables": ["position"]}, "evidence": "maximum salary of no more than US$1000,000 refers to maxsalary < '100000';"}
{"sample_id": 8959, "db_id": "human_resources", "final": {"question": "How much is the salary of the first ever employee that was hired?", "sql": "SELECT salary FROM employee ORDER BY hiredate ASC LIMIT 1", "source_tables": ["employee"]}, "evidence": "first-ever employee that was hired refers to MIN(hiredate)"}
{"sample_id": 8984, "db_id": "bike_share_1", "final": {"question": "Which trip had the longest duration? State the start and end station.", "sql": "SELECT start_station_name, end_station_name FROM trip WHERE duration = ( SELECT MAX(duration) FROM trip )", "source_tables": ["trip"]}, "evidence": "start station refers to start_station_name; end station refers to end_station_name;"}
{"sample_id": 8985, "db_id": "bike_share_1", "final": {"question": "What is the percentage of the trip were done by a subscriber?", "sql": "SELECT CAST(COUNT(subscription_type) AS REAL) * 100 / ( SELECT COUNT(subscription_type) FROM trip ) FROM trip WHERE subscription_type = 'Subscriber'", "source_tables": ["trip"]}, "evidence": "subscription_type = 'Subscriber'; DIVIDE(COUNT(id where subscription_type = 'Subscriber'), COUNT(id)) as percentage;"}
{"sample_id": 8986, "db_id": "bike_share_1", "final": {"question": "State the final station of bike id 13. Which city was it at?", "sql": "SELECT T2.end_station_id, T1.city FROM station AS T1 INNER JOIN trip AS T2 ON T1.name = T2.end_station_name WHERE T2.bike_id = 13 ORDER BY T2.end_date DESC LIMIT 1", "source_tables": ["station", "trip"]}, "evidence": "final station refers to end_station_name where MAX(end_date);"}
{"sample_id": 8987, "db_id": "bike_share_1", "final": {"question": "Name all the trips where the bike was borrowed and returned on a different day. State the city where the bike was returned.", "sql": "SELECT DISTINCT T1.city FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE SUBSTR(CAST(T2.start_date AS TEXT), INSTR(T2.start_date, '/') + 1) - SUBSTR(CAST(T2.start_date AS TEXT), INSTR(T2.start_date, ' ') - 5) <> SUBSTR(CAST(T2.end_date AS TEXT), INSTR(T2.end_date, '/') + 1) - SUBSTR(CAST(T2.end_date AS TEXT), INSTR(T2.end_date, ' ') - 5)", "source_tables": ["station", "trip"]}, "evidence": "the bike was borrowed and returned on a different day implies that start_date and end_date are not equal to each other; where the bike was returned refers to end_station_name;"}
{"sample_id": 8988, "db_id": "bike_share_1", "final": {"question": "Which is the station where no bike could not be borrowed form on the 2013/11/03 02:01:01? State the location of the station.", "sql": "SELECT T1.name, T1.long FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T2.time = '2013/11/03 02:01:01' AND T2.bikes_available = 0", "source_tables": ["station", "status"]}, "evidence": "Latitude and longitude coordinates can be used to indicate a location, where latitude refers to lat longtitude refer to long; bikes_available = 0 means no bike can be borrowed; 3/11/2013 02:01:01 refers to time;"}
{"sample_id": 8989, "db_id": "bike_share_1", "final": {"question": "Name the station and city with the most borrowed bike.", "sql": "SELECT T2.start_station_name, T1.city FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name GROUP BY T2.start_station_name ORDER BY COUNT(T2.start_station_name) DESC LIMIT 1", "source_tables": ["station", "trip"]}, "evidence": "the station with the most borrowed bikes refers to MAX(start_station);"}
{"sample_id": 8990, "db_id": "bike_share_1", "final": {"question": "What was the hottest temperature on the day of trip ID 4080?", "sql": "SELECT MAX(T2.max_temperature_f) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code AND T2.date = SUBSTR(CAST(T1.start_date AS TEXT), 1, INSTR(T1.start_date, ' ') - 1) WHERE T1.id = 4080", "source_tables": ["weather", "trip"]}, "evidence": "the hottest temperature refers to max_temperature_f;"}
{"sample_id": 8991, "db_id": "bike_share_1", "final": {"question": "At what date and time did San Jose Diridon Caltrain Station have most bikes available.", "sql": "SELECT T2.time FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T1.name = 'San Jose Diridon Caltrain Station' AND T2.bikes_available = ( SELECT MAX(T2.bikes_available) FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T1.name = 'San Jose Diridon Caltrain Station' )", "source_tables": ["station", "status"]}, "evidence": "San Jose Diridon Caltrain Station is the name of the station; most bikes available refers to MAX(bikes_available);"}
{"sample_id": 8992, "db_id": "bike_share_1", "final": {"question": "Name all the trip on the days when it rained. State the duration of the trip", "sql": "SELECT T1.id, T1.duration FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code AND T2.date = SUBSTR(CAST(T1.start_date AS TEXT), 1, INSTR(T1.start_date, ' ') - 1) WHERE T2.events LIKE '%Rain%' OR T2.events LIKE '%rain%'", "source_tables": ["weather", "trip"]}, "evidence": "events = 'Rain';"}
{"sample_id": 8993, "db_id": "bike_share_1", "final": {"question": "List all trips where bikes were returned at location 37.331415, -121.8932. State the date the bike was borrowed.", "sql": "SELECT T2.end_station_name, T2.start_date FROM station AS T1 INNER JOIN trip AS T2 ON T2.end_station_name = T1.name WHERE T1.lat = 37.331415 AND T1.long = -121.8932", "source_tables": ["station", "trip"]}, "evidence": "37.331415 and -121.8932 are latitude (lat) and longitude (long) coordinates indicating location; returned at refers to end_station_name; the date the bike was borrowed refers to start_date;"}
{"sample_id": 8994, "db_id": "bike_share_1", "final": {"question": "Among the trips in August 2013, how many bikes were borrowed from Redwood City.", "sql": "SELECT COUNT(T2.start_date) FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE T2.start_date LIKE '8/%/2013%' AND T1.city = 'Redwood City'", "source_tables": ["station", "trip"]}, "evidence": "Redwood City is the name of the city; trips in August 2013 refers to start_date like '8%2013%';"}
{"sample_id": 8995, "db_id": "bike_share_1", "final": {"question": "For all trips which took less 5 minutes, state the station name where the bike were borrowed and returned. Indicate mean temperature of the day.", "sql": "SELECT T1.start_station_name, T1.end_station_name, T2.mean_temperature_f FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.duration < 300", "source_tables": ["weather", "trip"]}, "evidence": "less than 5 minutes refers to duration<300 in seconds; the station where the bike was borrowed refers to start_station_name; the station where the bike was returned refers to end_station_name; mean temperature refers to min_temperature_f;"}
{"sample_id": 8996, "db_id": "bike_share_1", "final": {"question": "Among all the trips, which day had the most bikes borrowed? What was the average coldest temperature on that day?", "sql": "SELECT T2.date, AVG(T2.min_temperature_f) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code GROUP BY T2.date ORDER BY COUNT(T1.start_date) DESC LIMIT 1", "source_tables": ["weather", "trip"]}, "evidence": "which day had the most bikes borrowed refers to MAX(start_date); the average coldest temperature can be computed as DIVIDE(SUM(min_temperature_f), COUNT(min_temperature_f));"}
{"sample_id": 8997, "db_id": "bike_share_1", "final": {"question": "Calculate the average usage of each bike in the third quarter of year 2013. Find the average wind direction within the same period.", "sql": "SELECT AVG(T1.duration), AVG(T2.wind_dir_degrees) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTR(CAST(T2.date AS TEXT), 1, INSTR(T2.date, '/') - 1) IN ('7', '8', '9') AND SUBSTR(CAST(T2.date AS TEXT), -4) = '2013'", "source_tables": ["weather", "trip"]}, "evidence": "the third quarter of year 2013 implies 3 month interval, including July, August, and September of 2013 and refers to date; the average usage of each bike = DIVIDE(SUM(duration), COUNT(bike_id)); the average wind direction = DIVIDE(SUM(wind_dir_degrees), COUNT(date));"}
{"sample_id": 8998, "db_id": "bike_share_1", "final": {"question": "How many bike stations were installed in San Jose in 2014? Indicate the names of the stations.", "sql": "SELECT SUM(CASE WHEN city = 'San Jose' AND SUBSTR(installation_date, -4) = '2014' THEN 1 ELSE 0 END) FROM station UNION SELECT name FROM station WHERE city = 'San Jose' AND SUBSTR(installation_date, -4) = '2014'", "source_tables": ["station"]}, "evidence": "San Jose is the name of the city; 2014 refers to installation_date between '1/1/2014' and '12/31/2014';"}
{"sample_id": 8999, "db_id": "bike_share_1", "final": {"question": "What is the longest trip duration that started and ended August 29, 2013?", "sql": "SELECT MAX(duration) FROM trip WHERE start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%'", "source_tables": ["trip"]}, "evidence": "started and ended August 29, 2013 refers to start_date = '8/29/2013' and end_date = '8/29/2013';"}
{"sample_id": 9000, "db_id": "bike_share_1", "final": {"question": "How long did it take for bike id 426 to reach 2nd at South Park from Market at 4th on 8/29/2013? Indicate the duration in minutes.", "sql": "SELECT CAST(duration AS REAL) / 60  FROM trip WHERE bike_id = 426 AND end_station_name = '2nd at South Park' AND start_station_name = 'Market at 4th' AND start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%'", "source_tables": ["trip"]}, "evidence": "duration in minutes refers to DIVIDE(duration, 60 seconds); 2nd at South Park refers to end_station_name; Market at 4th refers to start_station_name; start_date = '8/29/2013'; end_date = '8/29/2013';"}
{"sample_id": 9001, "db_id": "bike_share_1", "final": {"question": "On 8/29/2013, who took the longest to arrive in California Ave Caltrain Station from University and Emerson? Indicate the bike id.", "sql": "SELECT bike_id FROM trip WHERE start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%' AND end_station_name = 'California Ave Caltrain Station' AND start_station_name = 'University and Emerson' AND duration = ( SELECT MAX(duration) FROM trip WHERE start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%' AND end_station_name = 'California Ave Caltrain Station' AND start_station_name = 'University and Emerson' )", "source_tables": ["trip"]}, "evidence": "start_date = '8/29/2013'; end_date = '8/29/2013'; end_station_name = 'California Ave Caltrain Station'; start_station_name = 'University and Emerson'; who took the longest to arrive refers to MAX(duration);"}
{"sample_id": 9002, "db_id": "bike_share_1", "final": {"question": "How many stations in San Francico can hold more than 20 bikes?", "sql": "SELECT SUM(CASE WHEN city = 'San Francisco' AND dock_count > 20 THEN 1 ELSE 0 END) FROM station", "source_tables": ["station"]}, "evidence": "San Francico is the name of the city; can hold more than 20 bikes implies dock's capacity and refers to dock_count\u226520;"}
{"sample_id": 9003, "db_id": "bike_share_1", "final": {"question": "When was the hottest temperature recorded? If there are multiple dates with the hottest temperature, indicate all of the dates.", "sql": "SELECT max_temperature_f, date FROM weather WHERE max_temperature_f = ( SELECT MAX(max_temperature_f) FROM weather WHERE max_temperature_f IS NOT NULL AND max_temperature_f IS NOT '' )", "source_tables": ["weather"]}, "evidence": "the hottest temperature refers to max_temperature_f;"}
{"sample_id": 9004, "db_id": "bike_share_1", "final": {"question": "What is the maximum dew point in Fahrenheit degree on 7/15/2014 in the area with a zip code of 94301?", "sql": "SELECT DISTINCT CASE WHEN date = '7/15/2014' AND zip_code = 94301 THEN max_dew_point_f END FROM weather", "source_tables": ["weather"]}, "evidence": "the maximum dew point in Fahrenheit degree refers to max_dew_point_f; date = '7/15/2014';"}
{"sample_id": 9005, "db_id": "bike_share_1", "final": {"question": "Which year experienced the most rain?", "sql": "SELECT SUBSTR(CAST(date AS TEXT), -4) FROM weather GROUP BY SUBSTR(CAST(date AS TEXT), -4) ORDER BY SUM(CASE WHEN events LIKE '%Rain%' OR events LIKE '%rain%' THEN 1 ELSE 0 END) DESC LIMIT 1", "source_tables": ["weather"]}, "evidence": "events = 'Rain'; year refers to YEAR(date);"}
{"sample_id": 9006, "db_id": "bike_share_1", "final": {"question": "On 10/20/2014, what is the duration of the fastest trip which started from the station with latitude and longitudes of 37.789625 and -122.400811, respectively? Indicate the bike id.", "sql": "SELECT MIN(T2.duration), T2.bike_id FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE T2.start_date LIKE '10/20/2014%' AND T1.lat = 37.789625 AND T1.long = -122.400811", "source_tables": ["station", "trip"]}, "evidence": "lat = '37.789625' and long = '-122.400811' are latitude and longitude coordinates indicating location; started from the station refers to start_station_name; start_date = '10/20/2014'; duration of the fastest trip refers to MIN(duration);"}
{"sample_id": 9007, "db_id": "bike_share_1", "final": {"question": "Among the subscribers who rented a bike from South Van Ness at Market on 12/1/2013, whose duration was the shortest and to which station was the bike returned to? Indicate South Van Ness's dock count.", "sql": "SELECT MIN(T2.duration), T2.end_station_name, COUNT(T2.start_station_name) FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE T2.start_date LIKE '12/1/2013%' AND T2.start_station_name = 'South Van Ness at Market' AND T2.subscription_type = 'Subscriber'", "source_tables": ["station", "trip"]}, "evidence": "South Van Ness at Market refers to start_station_name; subscriber refers to subscription_type; start_date = '12/1/2013'; the shortest duration refers to MIN(duration); which station was the bike returned to refers to end_station_name;"}
{"sample_id": 9008, "db_id": "bike_share_1", "final": {"question": "What is the maximum humidity in Powell Street BART when bike 496 was borrowed from the station on 8/29/2013?", "sql": "SELECT T2.max_humidity FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.start_date LIKE '8/29/2013%' AND T1.bike_id = 496 AND T1.start_station_name = 'Powell Street BART'", "source_tables": ["weather", "trip"]}, "evidence": "Powell Street refers to start_station_name; bike 496 refers to bike_id = '496'; start_date = '8/29/2013';"}
{"sample_id": 9009, "db_id": "bike_share_1", "final": {"question": "Which day in the month of November, 2014 have a foggy weather in the zip code 94301 and in total, how many bikes were borrowed by subscribers from all of the stations in the said day?", "sql": "SELECT T2.date, COUNT(T1.start_station_name) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '11/%/2014%' AND T2.zip_code = 94301 AND T2.events = 'Fog' AND T1.subscription_type = 'Subscriber'", "source_tables": ["weather", "trip"]}, "evidence": "day in the month of November, 2014 refers to start_date between '11/1/2014' and '11/30/2014'; foggy weather refers to events = 'Fog'; subscriber refers to subscription_type; all of the stations bikes were borrowed from refer to start_station_name;"}
{"sample_id": 9010, "db_id": "bike_share_1", "final": {"question": "What is the name of the station that is less used by customers who borrow bikes from? Indicate when was the station installed.", "sql": "SELECT T1.start_station_name, T2.installation_date FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.subscription_type = 'Customer' GROUP BY T1.start_station_name ORDER BY COUNT(T1.subscription_type) LIMIT 1", "source_tables": ["station", "trip"]}, "evidence": "less used station where bikes are borrowed from refers to start_station_name which has the least number of customers; subscription_type = 'Customer'; when installed refers to installation_date;"}
{"sample_id": 9011, "db_id": "bike_share_1", "final": {"question": "On 11/3/2013, which stations are often empty? Indicate the names of the stations.", "sql": "SELECT DISTINCT T1.name FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T2.bikes_available = 0 AND T2.time LIKE '2013/11/03%'", "source_tables": ["station", "status"]}, "evidence": "time = '11/3/2013'; which stations are empty refers to bikes_available = '0';"}
{"sample_id": 9012, "db_id": "bike_share_1", "final": {"question": "What is the average duration of bike trips in the city of Palo Alto?", "sql": "SELECT AVG(T1.duration) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'Palo Alto'", "source_tables": ["station", "trip"]}, "evidence": "DIVIDE(SUM(duration where city = 'Palo Alto'), COUNT(start_station_id));"}
{"sample_id": 9013, "db_id": "bike_share_1", "final": {"question": "What is the route that has the longest duration? Indicate the city of where the stations are located.", "sql": "SELECT T1.start_station_name, T1.end_station_name, T2.city FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.duration = ( SELECT MAX(T1.duration) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name )", "source_tables": ["station", "trip"]}, "evidence": "route implies a course taken in getting from start_station_name to end_station_name; the longest duration refers to MAX(duration);"}
{"sample_id": 9014, "db_id": "bike_share_1", "final": {"question": "List the name of stations that were installed from 8/5/2013 to 12/31/2013. Indicate their installation date and city name.", "sql": "SELECT name, installation_date, city FROM station WHERE (SUBSTR(CAST(installation_date AS TEXT), 1, INSTR(installation_date, '/') - 1) = '5' AND SUBSTR(CAST(installation_date AS TEXT), INSTR(installation_date, '/') + 1, -6) >= '8' AND SUBSTR(CAST(installation_date AS TEXT), -4) = '2013') OR (SUBSTR(CAST(installation_date AS TEXT), 1, INSTR(installation_date, '/') - 1) IN ( '6', '7', '8', '9', '10', '11', '12' ) AND SUBSTR(CAST(installation_date AS TEXT), -4) = '2013')", "source_tables": ["station"]}, "evidence": "from 8/5/2013 to 12/31/2013 refers to installation_date between '8/5/2013' and '12/31/2013';"}
{"sample_id": 9015, "db_id": "bike_share_1", "final": {"question": "What is the average duration of trips which are started at Adobe on Almaden station to Ryland Park?", "sql": "SELECT AVG(duration) FROM trip WHERE start_station_name = 'Adobe on Almaden' AND end_station_name = 'Ryland Park'", "source_tables": ["trip"]}, "evidence": "trips refer to id; DIVIDE(SUM(duration where start_station_name = 'Adobe on Almaden', end_station_name = 'Ryland Park'), COUNT(id));"}
{"sample_id": 9016, "db_id": "bike_share_1", "final": {"question": "Write down the times when there is no available bike to borrow in a station. List down the stations name and location coordinate.", "sql": "SELECT T2.time, T1.name, T1.lat, T1.long FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T2.bikes_available = 0", "source_tables": ["station", "status"]}, "evidence": "no available bike to borrow refers to bikes_available = 0; latitude and longitude coordinates can be used to indicate a location;"}
{"sample_id": 9017, "db_id": "bike_share_1", "final": {"question": "List down the trips in which their start and end station are similar. Give me their trip IDs and location coordinates.", "sql": "SELECT T1.id, T2.lat, T2.long FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.start_station_name = T1.end_station_name", "source_tables": ["station", "trip"]}, "evidence": "start and end station are similar refers to start_station_name = end_station_name; latitude and longitude coordinates can be used to indicate a location;"}
{"sample_id": 9018, "db_id": "bike_share_1", "final": {"question": "On 8/29/2013 at 6:14:01 PM, how many bikes were borrowed from San Jose Diridon Caltrain Station?", "sql": "SELECT SUM(T1.dock_count - T2.bikes_available) FROM station AS T1 INNER JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.name = 'San Jose Diridon Caltrain Station' AND T2.time = '2013/08/29 06:14:01'", "source_tables": ["station", "status"]}, "evidence": "How many bikes borrowed can be computed as SUBTRACT(SUM(dock_count), bikes_available where name = 'San Jose Diridon Caltrain Station' and time = '2013/08/29 06:14:01');"}
{"sample_id": 9019, "db_id": "bike_share_1", "final": {"question": "List down the trip IDs when bike no. 10 was used by subscribers and the weather's mean temperature is no less than 62 degress Fahrenheit.", "sql": "SELECT T1.id FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.bike_id = 10 AND T2.mean_temperature_f > 62 AND T1.subscription_type = 'Subscriber'", "source_tables": ["weather", "trip"]}, "evidence": "bike no. 10 refers to bike_id = '10'; subscription_type = 'Subscriber'; the weather's mean temperature is no less than 62 degress Fahrenheit refers to mean_temperature_f>62;"}
{"sample_id": 9020, "db_id": "bike_share_1", "final": {"question": "What were the max gust speed and cloud clover when the customer using bike no. 10 recorded the 386 seconds duration of the trip from MLK Library to San Salvador at 1st?", "sql": "SELECT T2.max_gust_speed_mph, T2.cloud_cover FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code AND T2.date = SUBSTR(CAST(T1.start_date AS TEXT), 1, INSTR(T1.start_date, ' ') - 1) WHERE T1.bike_id = 10 AND T2.mean_temperature_f > 62 AND T1.subscription_type = 'Customer' AND T1.start_station_name = 'MLK Library' AND T1.end_station_name = 'San Salvador at 1st' AND T1.duration = 386", "source_tables": ["weather", "trip"]}, "evidence": "subscription_type = 'Customer'; duration = '364'; bike no. 10 refers to bike_id = 10; start_station_name = 'San Jose Civic Center'; end_station_name = 'San Jose City Hall';"}
{"sample_id": 9021, "db_id": "bike_share_1", "final": {"question": "Among the subscriber, how many of them finished the 2nd at Folsom and Civic Center BART (7th at Market) as their start and end stations respectively for no more than 490 seconds under minimum visibility of 4 miles.", "sql": "SELECT COUNT(T1.id) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.subscription_type = 'Subscriber' AND T2.min_visibility_miles = 4 AND T1.duration < 490 AND T1.start_station_name = '2nd at Folsom' AND T1.end_station_name = 'Civic Center BART (7th at Market)'", "source_tables": ["weather", "trip"]}, "evidence": "subscription_type = 'Subscriber'; no more than 490 seconds refers to duration<490; start_station_name = '2nd at Folsom'; end_station_name = 'Civic Center BART (7th at Market)'; min_visibility_miles = 4;"}
{"sample_id": 9022, "db_id": "bike_share_1", "final": {"question": "How many docks were available at the starting station of trip ID 912900?", "sql": "SELECT SUM(T2.docks_available) FROM trip AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.start_station_id WHERE T1.zip_code = 912900", "source_tables": ["status", "trip"]}, "evidence": ""}
{"sample_id": 9023, "db_id": "bike_share_1", "final": {"question": "Please write down the trip IDs which ended on the days when the minimum temperature is less than 45 degrees Fahrenheit.", "sql": "SELECT T1.id FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.min_temperature_f < 45", "source_tables": ["weather", "trip"]}, "evidence": "the minimum temperature is less than 45 degrees Fahrenheit refers to min_temperature_f<45;"}
{"sample_id": 9024, "db_id": "bike_share_1", "final": {"question": "In 2014, what is the shortest duration of trips by subscribers which started at 2nd at Folsom and ended in the 5th at Howard stations, and by how much shorter than the average? Give me the minimum temperature, maximum gust speed and weather event on that trip.", "sql": "SELECT MIN(T1.duration) , MIN(T1.duration) - AVG(T1.duration), T2.min_temperature_f FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.start_date = '1/1/2014 0:00' AND T1.end_date = '12/31/2014 11:59' AND T1.start_station_name = '2nd at Folsom' AND T1.end_station_name = '5th at Howard' AND T1.subscription_type = 'Subscriber'", "source_tables": ["weather", "trip"]}, "evidence": "the shortest duration refers to MIN(duration); subscription_type = 'Subscriber', start_station_name = '2nd at Folsom', end_station_name = '5th at Howard'; in 2014 refers to time period between start_date = '1/1/2014 0:00' and end_date = '12/31/2014 11:59; Average duration = DIVIDE(SUM(duration), COUNT(id));"}
{"sample_id": 9025, "db_id": "bike_share_1", "final": {"question": "Find the average ride time of the bikes that started at Steuart at Market station and ended at Embarcadero at Sansome station in July 2014.", "sql": "SELECT AVG(duration) FROM trip WHERE start_date = '7/1/2014%' AND end_date = '7/31/2014%' AND start_station_name = 'Steuart at Market' AND end_station_name = 'Embarcadero at Sansome'", "source_tables": ["trip"]}, "evidence": "started at refers to start_station_name; start_station_name = 'Steuart at Market'; ended at refers to end_station_name; end_station_name = 'Embarcadero at Sansome'; rides in July 2004 refers to start_date = '7/1/2014 0:00'AND end_date = '7/31/2014 12:59';average ride time = DIVIDE(SUM(duration), COUNT(id))"}
{"sample_id": 9026, "db_id": "bike_share_1", "final": {"question": "What are the average maximum and minimum temperatures in May 2015 when the mean humidity is between 65 and 75?", "sql": "SELECT AVG(max_temperature_f), AVG(min_temperature_f) FROM weather WHERE date LIKE '5/%/2015' AND mean_humidity BETWEEN 65 AND 75", "source_tables": ["weather"]}, "evidence": "average maximum temperature = DIVIDE(SUM(max_temperature_f), COUNT(date)); average minimum temperature = DIVIDE(SUM(min_temperature_f), COUNT(date)); May 2015 refers to date BETWEEN '5/1/2015'AND '5/31/2015';"}
{"sample_id": 9027, "db_id": "bike_share_1", "final": {"question": "Calculate the difference between the number of customers and the number of subscribers who did the trip in June 2013.", "sql": "SELECT SUM(IIF(subscription_type = 'Subscriber', 1, 0)) - SUM(IIF(subscription_type = 'Customer', 1, 0)) FROM trip WHERE start_date LIKE '6/%/2013%'", "source_tables": ["trip"]}, "evidence": "customer refers to subscription_type = 'Customer'; subscribers refers to subscription_type = 'Subscriber'; difference = SUBTRACT(SUM(subscription_type = 'Subscriber' t), SUM(subscription_type = 'Customer')); trip in June 2013 refers to start_date BETWEEN '6/1/2013 0:00'AND '6/31/2013 12:59';"}
{"sample_id": 9028, "db_id": "bike_share_1", "final": {"question": "List the days in 2013 when rain and fog occurred together and find the id of bikes borrowed on these days.", "sql": "SELECT T2.date, T1.bike_id FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTR(CAST(T2.date AS TEXT), -4) = '2013' AND T2.events = 'Fog-Rain'", "source_tables": ["weather", "trip"]}, "evidence": "in 2013 refers to year(date) = 2013; rain and fog ocurred together refers to events = 'Fog-Rain'; id of bikes refers to biked_id;"}
{"sample_id": 9029, "db_id": "bike_share_1", "final": {"question": "Find the longest ride on foggy day. What were the mean visibility, mean wind speed, and weather event during that ride? Also, list the coordinates and names of the start and end stations.", "sql": "SELECT T3.mean_visibility_miles, T3.mean_wind_speed_mph, T3.events, T1.lat, T1.long , T2.start_station_name, T2.end_station_name FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name INNER JOIN weather AS T3 ON T3.zip_code = T2.zip_code WHERE T3.events = 'Fog' ORDER BY T2.duration DESC LIMIT 1", "source_tables": ["station", "weather", "trip"]}, "evidence": "foggy day refers to events = 'fog'; longest ride on a foggy day refers to MAX(duration) where events = 'fog'; mean visibility refers to mean_visibility_miles; mean wind speed refers to mean_wind_speed_mph; weather event refers to events; coordinates refers to (lat, long); start station refers to start_station_id; end station refers to end_station_id;"}
{"sample_id": 9030, "db_id": "bike_share_1", "final": {"question": "For the rides that started at Market at 10th station and ended at South Van Ness at Market station in August of 2013, which day had the coldest temperature?", "sql": "SELECT T1.start_date FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code AND T2.date = SUBSTR(CAST(T1.start_date AS TEXT), 1, INSTR(T1.start_date, ' ') - 1) WHERE T2.date LIKE '8/%/2013' AND T1.start_station_name = 'Market at 10th' AND T1.end_station_name = 'South Van Ness at Market' AND T2.min_temperature_f = ( SELECT MIN(T2.min_temperature_f) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code AND T2.date = SUBSTR(CAST(T1.start_date AS TEXT), 1, INSTR(T1.start_date, ' ') - 1) WHERE T2.date LIKE '8/%/2013' AND T1.start_station_name = 'Market at 10th' AND T1.end_station_name = 'South Van Ness at Market' )", "source_tables": ["weather", "trip"]}, "evidence": "started at refers to start_station_name; start_station_name = 'Market at 10th'; ended at refers to end_station_name; end_station_name = 'South Van Ness at Market'; in August of 2013 refers to start_date BETWEEN '8/1/2013 0:00' AND '8/31/2013 12:59'; day that had the coldest temperature refers to MIN(min_temperature_f);"}
{"sample_id": 9031, "db_id": "bike_share_1", "final": {"question": "Among the rides during the rainy days, which ride was the longest? List the start station, end station, and duration of this ride.", "sql": "SELECT T1.start_station_name, T1.end_station_name, T1.duration FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.events = 'Rain' OR T2.events = 'rain' ORDER BY T1.duration DESC LIMIT 1", "source_tables": ["weather", "trip"]}, "evidence": "rainy days refers to events = 'rain'; longest ride refers to MAX(duration); start station refers to start_station_name; end station refers to end_station_name; duration of the ride refers to duration;"}
{"sample_id": 9032, "db_id": "bike_share_1", "final": {"question": "Find the average ride duration during the rain of more than 0.8 inches.", "sql": "SELECT AVG(T1.duration) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE (T2.events = 'Rain' AND T2.precipitation_inches > 0.8) OR (T2.events = 'rain' AND T2.precipitation_inches > 0.8)", "source_tables": ["weather", "trip"]}, "evidence": "rain of more than 0.8 inches refers to events = rain where precipitation_inches>0.8; average ride duration = DIVIDE(SUM(duration), COUNT(duration));"}
{"sample_id": 9033, "db_id": "bike_share_1", "final": {"question": "List the name and city of starting stations which has an above-average duration trips.", "sql": "SELECT DISTINCT T1.start_station_name, T2.city FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.duration > ( SELECT AVG(T1.duration) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name )", "source_tables": ["station", "trip"]}, "evidence": "starting stations refers to start_station_name; above average duration trips = DIVIDE(SUM(duration), COUNT(main_trip.id))<duration;"}
{"sample_id": 9034, "db_id": "bike_share_1", "final": {"question": "How many stations in San Francisco are installed in 2014?", "sql": "SELECT SUM(CASE WHEN city = 'San Francisco' AND SUBSTR(installation_date, -4) = '2014' THEN 1 ELSE 0 END) FROM station", "source_tables": ["station"]}, "evidence": "stations refers to name; San Francisco refers to city = 'San Francisco'; installed in 2004 refers to installation_date like'%2014';"}
{"sample_id": 9035, "db_id": "bike_share_1", "final": {"question": "In 2006, how many trips ended at stations in Mountain View?", "sql": "SELECT COUNT(T2.city) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.end_station_name WHERE T2.city = 'Mountain View' AND T1.start_date LIKE '%2006%'", "source_tables": ["station", "trip"]}, "evidence": "in 2006 refers to start_date LIKE'%2006%'; ended at station refers to end_station_name; Mountain View refers to city = 'Mountain View';"}
{"sample_id": 9036, "db_id": "bike_share_1", "final": {"question": "Which trip id had the longest duration and the start station is in Redwood City?", "sql": "SELECT T1.id FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'Redwood City' AND T1.duration = ( SELECT MAX(T1.duration) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'Redwood City' )", "source_tables": ["station", "trip"]}, "evidence": "longest duration refers to MAX(duration); start station refers to start_station_name;"}
{"sample_id": 9037, "db_id": "bike_share_1", "final": {"question": "Please list bikes id were used in trips which start station were installed in 2013.", "sql": "SELECT DISTINCT T1.bike_id FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.installation_date LIKE '%2013'", "source_tables": ["station", "trip"]}, "evidence": "start station refers to start_station_name; installed in 2013 refers to installation_date LIKE '%2013';"}
{"sample_id": 9038, "db_id": "bike_share_1", "final": {"question": "How many trips which subscription types were Subscriber and ended in San Jose city?", "sql": "SELECT COUNT(T1.subscription_type) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.end_station_name WHERE T1.subscription_type = 'Subscriber' AND T2.city = 'San Jose'", "source_tables": ["station", "trip"]}, "evidence": "ended in refers to end_station_name;"}
{"sample_id": 9039, "db_id": "bike_share_1", "final": {"question": "Which trip had the shortest duration and started at the station that can hold 15 bikes?", "sql": "SELECT T1.id FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.dock_count = 15 AND T1.duration = ( SELECT MIN(T1.duration) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.dock_count = 15 )", "source_tables": ["station", "trip"]}, "evidence": "shortest duration refers to MIN(duration); started at the station refers to start_station_name; can hold 15 bikes refers to dock_count = 15;"}
{"sample_id": 9040, "db_id": "bike_share_1", "final": {"question": "Which year had the most number of trips that started at stations in San Francisco?", "sql": "SELECT SUBSTR(CAST(T1.start_date AS TEXT), INSTR(T1.start_date, ' '), -4) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'San Francisco' GROUP BY T1.start_station_name ORDER BY COUNT(T1.id) DESC LIMIT 1", "source_tables": ["station", "trip"]}, "evidence": "started at station refers to start_station_name; San Francisco refers to city = 'San Francisco'; year that had the most number of trips refers to MAX(year(start_date));"}
{"sample_id": 9041, "db_id": "bike_share_1", "final": {"question": "What is the percentage of trips that started in San Jose and durations were longer than 800 seconds?", "sql": "SELECT CAST(SUM(CASE WHEN T1.duration > 800 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'San Jose'", "source_tables": ["station", "trip"]}, "evidence": "percentage of trips = DIVIDE(COUNT(duration>800), COUNT(duration)) as percentage; San Jose refers to city = 'San Jose'; duration>800;"}
{"sample_id": 9042, "db_id": "bike_share_1", "final": {"question": "How many trips in 2013 had durations longer than 1000 seconds?", "sql": "SELECT COUNT(duration) FROM trip WHERE start_date LIKE '%/%/2013%' AND duration > 1000", "source_tables": ["trip"]}, "evidence": "trips in 2013 refers to start_date like'%2013%'; duration>1000;"}
{"sample_id": 9043, "db_id": "bike_share_1", "final": {"question": "Please calculate the average duration of trips started at South Van Ness at Market in 2015.", "sql": "SELECT AVG(duration) FROM trip WHERE start_date LIKE '%2015%' AND start_station_name = 'South Van Ness at Market'", "source_tables": ["trip"]}, "evidence": "started at refers to start_station_name; start_station_name = 'South Van Ness at Market'; average duration = DIVIDE(SUM(duration), COUNT(duration));"}
{"sample_id": 9044, "db_id": "bike_share_1", "final": {"question": "How many trips which start station and end station are the same?", "sql": "SELECT SUM(IIF(start_station_id = end_station_id, 1, 0)) FROM trip", "source_tables": ["trip"]}, "evidence": "start station refers to start_station_id; end station refers to end_station_id; start station and end station are the same refers to start_station_id = end_station_id;"}
{"sample_id": 9045, "db_id": "bike_share_1", "final": {"question": "Please list trips id started on the hottest day.", "sql": "SELECT T1.id FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code ORDER BY T2.max_temperature_f DESC LIMIT 1", "source_tables": ["weather", "trip"]}, "evidence": "started refers to start_date; the hottest day refers to max_temperature_f;"}
{"sample_id": 9046, "db_id": "bike_share_1", "final": {"question": "Which were the trips that started at Mountain View City Hall and ended on a rainy day?", "sql": "SELECT T1.id FROM trip AS T1 INNER JOIN weather AS T2 WHERE T2.events = 'Rain' AND T1.start_station_name = 'Mountain View City Hall'", "source_tables": ["weather", "trip"]}, "evidence": "started at refers to start_station_name; start_station_name = 'Mountain View City Hall'; ended on a rainy day refers to end_date where events = 'rain';"}
{"sample_id": 9047, "db_id": "bike_share_1", "final": {"question": "What is the average duration of trips that ended on a foggy day?", "sql": "SELECT AVG(T1.duration) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.events = 'Fog'", "source_tables": ["weather", "trip"]}, "evidence": "ended on a foggy day refers to end_date where events = 'fog'; average duration = DIVIDE(SUM(duration), COUNT(duration));"}
{"sample_id": 9048, "db_id": "bike_share_1", "final": {"question": "What was duration of the longest trip started on the day that has a maximum wind speed of 30 mph?", "sql": "SELECT T1.duration FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.max_wind_Speed_mph = 30 ORDER BY T1.duration DESC LIMIT 1", "source_tables": ["weather", "trip"]}, "evidence": "longest trip refers to MAX(duration); started on the day refers to start_date; maximum wind speed refers to max_wind_speed_mph; max_wind_speed_mph = 30;"}
{"sample_id": 9049, "db_id": "bike_share_1", "final": {"question": "Please calculate the average temperature of those trips that started at Market at 4th in 2013.", "sql": "SELECT AVG(T2.mean_temperature_f) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTR(CAST(T2.date AS TEXT), -4) = '2013' AND T1.start_station_name = 'Market at 4th'", "source_tables": ["weather", "trip"]}, "evidence": "started at refers to start_station_name; start station_name = 'Market at 4th'; in 2013 refers to start_date like '%2013%'; temperature refers to mean_temperature_f; average temperature = DIVIDE(SUM(mean_temperature_f), COUNT(mean_temperature_f));"}
{"sample_id": 9050, "db_id": "bike_share_1", "final": {"question": "What was the mean humidity of a trip with id 4275?", "sql": "SELECT T2.mean_humidity FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.id = 4275", "source_tables": ["weather", "trip"]}, "evidence": "mean humidity refers to mean_humidity;"}
{"sample_id": 9097, "db_id": "movie_3", "final": {"question": "What is the description of the film ACADEMY DINOSAUR?", "sql": "SELECT description FROM film WHERE title = 'ACADEMY DINOSAUR'", "source_tables": ["film"]}, "evidence": "\"ACADEMY DINOSAUR\" is the title of film"}
{"sample_id": 9098, "db_id": "movie_3", "final": {"question": "How many films have a rental duration of over 6 days?", "sql": "SELECT COUNT(film_id) FROM film WHERE rental_duration > 6", "source_tables": ["film"]}, "evidence": "rental duration of over 6 days refers to rental_duration > 6"}
{"sample_id": 9099, "db_id": "movie_3", "final": {"question": "Please list the titles of the films that are released in 2006 and have a rental rate of $2.99.", "sql": "SELECT title FROM film WHERE release_year = 2006 AND rental_rate = 2.99", "source_tables": ["film"]}, "evidence": "released in 2006 refers to release_year = 2006; rental rate of $2.99 refers to rental_rate = 2.99"}
{"sample_id": 9100, "db_id": "movie_3", "final": {"question": "Which film has the longest duration of film screening? Please give its title.", "sql": "SELECT title FROM film ORDER BY length DESC LIMIT 1", "source_tables": ["film"]}, "evidence": "longest duration of film refers to Max(length)"}
{"sample_id": 9101, "db_id": "movie_3", "final": {"question": "Which film has a higher replacement cost, ACE GOLDFINGER or ACADEMY DINOSAUR?", "sql": "SELECT title FROM film WHERE title IN ('ACE GOLDFINGER', 'ACADEMY DINOSAUR') ORDER BY replacement_cost DESC LIMIT 1", "source_tables": ["film"]}, "evidence": "higher replacement cost refers to Max(replacement_cost); 'ACE GOLDFIINGER' and 'ACADEMY DINOSAUR' are both the title of film"}
{"sample_id": 9102, "db_id": "movie_3", "final": {"question": "Among the films that are released in 2006, how many of them are rated Adults Only in the Motion Picture Association Film Rating?", "sql": "SELECT COUNT(film_id) FROM film WHERE rating = 'NC-17' AND release_year = 2006", "source_tables": ["film"]}, "evidence": "released in 2006 refers to release_year = 2006; rated Adults Only refers to rating = 'NC-17'"}
{"sample_id": 9103, "db_id": "movie_3", "final": {"question": "How many films with the rental rate of $2.99 have the special feature of \"Deleted Scenes\"?", "sql": "SELECT COUNT(film_id) FROM film WHERE rental_rate = 2.99 AND special_features = 'Deleted Scenes'", "source_tables": ["film"]}, "evidence": "rental rate of $2.99 refers to rental_rate = 2.99; film refers to title"}
{"sample_id": 9104, "db_id": "movie_3", "final": {"question": "Please list the titles of all the films that have more than 2 special features.", "sql": "SELECT title FROM ( SELECT title, COUNT(special_features) AS num FROM film GROUP BY title ) AS T ORDER BY T.num > 2", "source_tables": ["film"]}, "evidence": "more than 2 special features refers to Count(special_features) > 2"}
{"sample_id": 9105, "db_id": "movie_3", "final": {"question": "What is the email address of the staff Jon Stephens?", "sql": "SELECT email FROM staff WHERE first_name = 'Jon' AND last_name = 'Stephens'", "source_tables": ["staff"]}, "evidence": ""}
{"sample_id": 9106, "db_id": "movie_3", "final": {"question": "Please give the full names of all the active staff.", "sql": "SELECT first_name, last_name FROM staff WHERE active = 1", "source_tables": ["staff"]}, "evidence": "full name refers to first_name, last_name; active staff refers to active = 1"}
{"sample_id": 9107, "db_id": "movie_3", "final": {"question": "In which year was the film with the highest replacement cost released?", "sql": "SELECT DISTINCT release_year FROM film WHERE replacement_cost = ( SELECT MAX(replacement_cost) FROM film )", "source_tables": ["film"]}, "evidence": "highest replacement_cost refers to Max (replacement_cost); year refers to release_year"}
{"sample_id": 9108, "db_id": "movie_3", "final": {"question": "Please list the titles of the top 3 films with the highest replacement cost.", "sql": "SELECT title FROM film WHERE replacement_cost = ( SELECT MAX(replacement_cost) FROM film ) LIMIT 3", "source_tables": ["film"]}, "evidence": "highest replacement_cost refers to Max (replacement_cost); film refers to title"}
{"sample_id": 9109, "db_id": "movie_3", "final": {"question": "What is the language of the film ACADEMY DINOSAUR?", "sql": "SELECT T2.name FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'ACADEMY DINOSAUR'", "source_tables": ["film", "language"]}, "evidence": "\"ACADEMY DINOSAUR\" is the title of film; language refers to language.name"}
{"sample_id": 9110, "db_id": "movie_3", "final": {"question": "How many films are in English?", "sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T2.name = 'English'", "source_tables": ["film", "language"]}, "evidence": "\"English\" is the name of language"}
{"sample_id": 9111, "db_id": "movie_3", "final": {"question": "Please list the titles of all the films starring the actor PENELOPE GUINESS.", "sql": "SELECT T2.title FROM film_actor AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T3.first_name = 'PENELOPE' AND T3.last_name = 'GUINESS'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": ""}
{"sample_id": 9112, "db_id": "movie_3", "final": {"question": "How many actors have starred in the film ACADEMY DINOSAUR?", "sql": "SELECT COUNT(T1.actor_id) FROM film_actor AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id WHERE T2.title = 'ACADEMY DINOSAUR'", "source_tables": ["film", "film_actor"]}, "evidence": "\"ACADEMY DINOSAUR\" is the title of film"}
{"sample_id": 9113, "db_id": "movie_3", "final": {"question": "Please list the full names of all the actors that have starred in the film ACADEMY DINOSAUR.", "sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'ACADEMY DINOSAUR'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "full name refers to first_name, last_name; \"ACADEMY DINOSAUR\" is the title of film"}
{"sample_id": 9114, "db_id": "movie_3", "final": {"question": "Among the films starring PENELOPE GUINESS, how many of them are released in 2006?", "sql": "SELECT COUNT(T2.film_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.release_year = 2006 AND T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "release in 2006 refers to release_year = 2006;"}
{"sample_id": 9115, "db_id": "movie_3", "final": {"question": "Please give the title of the film starring PENELOPE GUINESS and has the highest replacement cost.", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS' ORDER BY T3.replacement_cost DESC LIMIT 1", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "highest replacement cost refers to Max (replacement_cost)"}
{"sample_id": 9116, "db_id": "movie_3", "final": {"question": "Please list the full names of all the actors that have starred in the film with the highest replacement cost.", "sql": "SELECT first_name, last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id ORDER BY T3.replacement_cost DESC LIMIT 1", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "highest replacement cost refers to Max (replacement_cost); full name refers to first_name, last_name"}
{"sample_id": 9117, "db_id": "movie_3", "final": {"question": "Among the films starring PENELOPE GUINESS, how many of them are in English?", "sql": "SELECT COUNT(T3.film_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN language AS T4 ON T3.language_id = T4.language_id WHERE T4.name = 'English' AND T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS'", "source_tables": ["film", "film_actor", "actor", "language"]}, "evidence": "\"English\" is the name of language"}
{"sample_id": 9118, "db_id": "movie_3", "final": {"question": "What is the title of the film with the longest duration time and stars PENELOPE GUINESS?", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS' ORDER BY T3.length DESC LIMIT 1", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "longest duration of film refers to Max(length)"}
{"sample_id": 9119, "db_id": "movie_3", "final": {"question": "Please list the titles of all the films in the category of \"Horror\".", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Horror'", "source_tables": ["film", "category", "film_category"]}, "evidence": "\"Horror\" is the name of category"}
{"sample_id": 9120, "db_id": "movie_3", "final": {"question": "How many films are there under the category of \"Horror\"?", "sql": "SELECT COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id WHERE T2.name = 'Horror'", "source_tables": ["category", "film_category"]}, "evidence": "\"Horror\" is the name of category"}
{"sample_id": 9121, "db_id": "movie_3", "final": {"question": "Please list the titles of all the films under the category of \"Horror\" and has a rental rate of $2.99.", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Horror' AND T1.rental_rate = 2.99", "source_tables": ["film", "category", "film_category"]}, "evidence": "\"Horror\" is the name of category; rental rate of $2.99 refers to rental_rate = 2.99"}
{"sample_id": 9122, "db_id": "movie_3", "final": {"question": "For how many times has the customer RUTH MARTINEZ rented a film?", "sql": "SELECT COUNT(T2.rental_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ'", "source_tables": ["customer", "rental"]}, "evidence": "times of rented refers to Count(rental_id)"}
{"sample_id": 9123, "db_id": "movie_3", "final": {"question": "Please list the titles of all the films that the customer RUTH MARTINEZ has rented.", "sql": "SELECT T4.title FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ'", "source_tables": ["film", "customer", "rental", "inventory"]}, "evidence": ""}
{"sample_id": 9124, "db_id": "movie_3", "final": {"question": "Among the films that the customer RUTH MARTINEZ has rented, how many of them are released in 2006?", "sql": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T4.release_year = 2006 AND T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ'", "source_tables": ["film", "customer", "rental", "inventory"]}, "evidence": "release in 2006 refers to release_year = 2006"}
{"sample_id": 9125, "db_id": "movie_3", "final": {"question": "Among the films that the customer RUTH MARTINEZ has rented, what is the title of the one with the highest replacement cost?", "sql": "SELECT T4.title FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ' ORDER BY T4.replacement_cost DESC LIMIT 1", "source_tables": ["film", "customer", "rental", "inventory"]}, "evidence": "highest replacement cost refers to Max(replacement_cost)"}
{"sample_id": 9126, "db_id": "movie_3", "final": {"question": "Please list the full names of all the customers who have rented the film with the highest replacement cost.", "sql": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id ORDER BY T4.replacement_cost DESC LIMIT 1", "source_tables": ["film", "customer", "rental", "inventory"]}, "evidence": "full name refers to first_name, last_name; highest replacement cost refers to Max(replacement_cost)"}
{"sample_id": 9127, "db_id": "movie_3", "final": {"question": "How many films rented to the customer RUTH MARTINEZ were returned in August, 2005?", "sql": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ' AND STRFTIME('%m',T2.return_date) = '8' AND STRFTIME('%Y', T2.return_date) = '2005'", "source_tables": ["customer", "rental"]}, "evidence": "returned in August, 2005 refers to year(return_date) = 2005 and month (return_date) = 8"}
{"sample_id": 9128, "db_id": "movie_3", "final": {"question": "Please give the full name of the customer that have rented the most films.", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, COUNT(T2.rental_id) AS num FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["customer", "rental"]}, "evidence": "full name refers to first_name, last_name; customer who rented the most film refers to Max(count(rental_id))"}
{"sample_id": 9129, "db_id": "movie_3", "final": {"question": "Among the customers who have rented the film ACADEMY DINOSAUR, how many of them are active?", "sql": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.active = 1 AND T4.title = 'ACADEMY DINOSAUR'", "source_tables": ["film", "customer", "rental", "inventory"]}, "evidence": "\"ACADEMY DINOSAUR\" is the title of film; customer refers to customer_id; active refers to active = 1"}
{"sample_id": 9130, "db_id": "movie_3", "final": {"question": "Which film is rented for the most times by the customers? Please give its title.", "sql": "SELECT T.title FROM ( SELECT T1.title, COUNT(T3.rental_id) AS num FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T1.title ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["film", "rental", "inventory"]}, "evidence": "film refers to title; film rented the most times refers to title where Max(Count(rental_id))"}
{"sample_id": 9131, "db_id": "movie_3", "final": {"question": "Which customer has rented more movies, RUTH MARTINEZ or LINDA WILLIAMS?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, COUNT(T1.customer_id) AS num FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE (T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ') OR (T1.first_name = 'LINDA' AND T1.last_name = 'WILLIAMS') GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["customer", "rental"]}, "evidence": "rented more movie Max(Count(customer_id)); \"RUTH MARTINEZ\" and \"LINDA WILLIAMS\" are both full name of customer"}
{"sample_id": 9132, "db_id": "movie_3", "final": {"question": "Among all the films starring PENELOPE GUINESS, what is the title of the one with the highest rental price per day?", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS' ORDER BY T3.rental_rate / T3.rental_duration DESC LIMIT 1", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "highest rental price per day refers to Max(Divide(rental_rate, rental_duration))"}
{"sample_id": 9133, "db_id": "movie_3", "final": {"question": "What is the average replacement cost of the films under the category of \"Horror\"?", "sql": "SELECT AVG(T3.replacement_cost) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T2.name = 'Horror'", "source_tables": ["film", "category", "film_category"]}, "evidence": "\"Horror\" is the name of category; average replacement cost = Divide (Sum(replacement_cost), Count(film_id where name = Horror))"}
{"sample_id": 9134, "db_id": "movie_3", "final": {"question": "Among all films that the customer RUTH MARTINEZ has rented, what is the percentage of it being a Music film?", "sql": "SELECT CAST(SUM(IIF(T3.name = 'Music', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id INNER JOIN inventory AS T4 ON T1.film_id = T4.film_id INNER JOIN customer AS T5 ON T4.store_id = T5.store_id INNER JOIN rental AS T6 ON T4.inventory_id = T6.inventory_id WHERE T5.first_name = 'RUTH' AND T5.last_name = 'MARTINEZ'", "source_tables": ["rental", "category", "film", "film_category", "customer", "inventory"]}, "evidence": "music film refers to name = 'Music'; percentage = Divide (Count(film_id where name = 'Music'), Count(film_id)) * 100"}
{"sample_id": 9135, "db_id": "movie_3", "final": {"question": "What is the average duration time of the films starring PENELOPE GUINESS?", "sql": "SELECT AVG(T3.length) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "average duration time = AVG(length)"}
{"sample_id": 9136, "db_id": "movie_3", "final": {"question": "What is Diane Collins' email address?", "sql": "SELECT email FROM customer WHERE first_name = 'DIANE' AND last_name = 'COLLINS'", "source_tables": ["customer"]}, "evidence": ""}
{"sample_id": 9137, "db_id": "movie_3", "final": {"question": "Give the number of inactive customers.", "sql": "SELECT COUNT(customer_id) FROM customer WHERE active = 0", "source_tables": ["customer"]}, "evidence": "inactive refers to active = 0"}
{"sample_id": 9138, "db_id": "movie_3", "final": {"question": "Who is the owner of email address \"JEREMY.HURTADO@sakilacustomer.org\"? Give the full name.", "sql": "SELECT first_name, last_name FROM customer WHERE email = 'JEREMY.HURTADO@sakilacustomer.org'", "source_tables": ["customer"]}, "evidence": "\"JEREMY.HURTADO@sakilacustomer.org\" is the email; owner refers to customer; full name refers to first_name, last_name"}
{"sample_id": 9139, "db_id": "movie_3", "final": {"question": "Give the postal code for the address No.65.", "sql": "SELECT postal_code FROM address WHERE address_id = 65", "source_tables": ["address"]}, "evidence": "address no. 65 refers to address_id = 65"}
{"sample_id": 9140, "db_id": "movie_3", "final": {"question": "State the number of addresses in the Nordrhein-Westfalen district.", "sql": "SELECT COUNT(address_id) FROM address WHERE district = 'Nordrhein-Westfalen'", "source_tables": ["address"]}, "evidence": "number of address refers to address_id"}
{"sample_id": 9141, "db_id": "movie_3", "final": {"question": "What is the phone number of address No.72?", "sql": "SELECT phone FROM address WHERE address_id = '72'", "source_tables": ["address"]}, "evidence": "address no. 72 refers to address_id = 72; phone number refers to phone"}
{"sample_id": 9142, "db_id": "movie_3", "final": {"question": "State the number of films that are 178 minutes long.", "sql": "SELECT COUNT(film_id) FROM film WHERE length = '178'", "source_tables": ["film"]}, "evidence": "178 min long refers to length = '178'"}
{"sample_id": 9143, "db_id": "movie_3", "final": {"question": "Tell the special features of the film Uprising Uptown.", "sql": "SELECT special_features FROM film WHERE title = 'UPRISING UPTOWN'", "source_tables": ["film"]}, "evidence": "\"UPRISING UPTOWN\" is the title of film"}
{"sample_id": 9144, "db_id": "movie_3", "final": {"question": "What is the description of the film Artist Coldblooded?", "sql": "SELECT description FROM film WHERE title = 'ARTIST COLDBLOODED'", "source_tables": ["film"]}, "evidence": "\"ARTIST COLDBLOODED\" is the title of film"}
{"sample_id": 9145, "db_id": "movie_3", "final": {"question": "Give the detailed address for store No.2.", "sql": "SELECT T1.address, T1.address2, T1.district FROM address AS T1 INNER JOIN store AS T2 ON T1.address_id = T2.address_id WHERE T2.store_id = 2", "source_tables": ["store", "address"]}, "evidence": "store no. 22 refers to store_id = 2; detailed address refers to address, address2, district"}
{"sample_id": 9146, "db_id": "movie_3", "final": {"question": "Which continent is the mother country of Clarksville city in?", "sql": "SELECT T1.country FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id WHERE T2.city = 'Clarksville'", "source_tables": ["country", "city"]}, "evidence": "\"Clarksville\" is the city;"}
{"sample_id": 9147, "db_id": "movie_3", "final": {"question": "How many actors played a role in the 2006 film whose rental duration is 7 days, rental rate is 4.99 and is 98 minutes duration?", "sql": "SELECT COUNT(T1.actor_id) FROM film_actor AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id WHERE T2.release_year = 2006 AND T2.rental_duration = 7 AND T2.rental_duration = 4.99 AND T2.length = 98", "source_tables": ["film", "film_actor"]}, "evidence": "in 2006 refers to release_year = 2006; 98 min duration refers to length = 98; number of actors refers to count(actor_id)"}
{"sample_id": 9148, "db_id": "movie_3", "final": {"question": "The actor Dan Harris played in a 77 minute film with replacement cost of 9.99, what was the rating for that film?", "sql": "SELECT T3.rating FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'DAN' AND T1.last_name = 'HARRIS' AND T3.length = 77 AND T3.replacement_cost = '9.99'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "77 min film refers to length = 77"}
{"sample_id": 9149, "db_id": "movie_3", "final": {"question": "How many films did actor Daryl Wahlberg appear in?", "sql": "SELECT COUNT(T1.film_id) FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id WHERE T2.first_name = 'DARYL' AND T2.last_name = 'WAHLBERG'", "source_tables": ["film_actor", "actor"]}, "evidence": ""}
{"sample_id": 9150, "db_id": "movie_3", "final": {"question": "Sherri Rhodes rented a film at 12:27:27 on 2005/7/28, when did she/he return that film?", "sql": "SELECT T2.return_date FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'SHERRI' AND T1.last_name = 'RHODES' AND T2.rental_date = '2005-07-28 12:27:27'", "source_tables": ["customer", "rental"]}, "evidence": "rented at 12:27:27 on 2005/7/28 refers to rental_date = '2005-07-28 12:27:27'"}
{"sample_id": 9151, "db_id": "movie_3", "final": {"question": "Give the name of the manager staff for store No.1.", "sql": "SELECT T1.first_name, T1.last_name FROM staff AS T1 INNER JOIN store AS T2 ON T1.store_id = T2.store_id WHERE T2.store_id = 1", "source_tables": ["staff", "store"]}, "evidence": "store no. 1 refers to store_id = 1; name refers to first_name, last_name"}
{"sample_id": 9152, "db_id": "movie_3", "final": {"question": "State the address location of store No.1.", "sql": "SELECT T1.address, T1.address2, T1.district FROM address AS T1 INNER JOIN store AS T2 ON T1.address_id = T2.address_id WHERE T2.store_id = 1", "source_tables": ["store", "address"]}, "evidence": "store no. 1 refers to store_id = 1; address location refers to address, address2, district"}
{"sample_id": 9153, "db_id": "movie_3", "final": {"question": "Where does the staff Jon Stephens live?", "sql": "SELECT T1.address, T1.address2 FROM address AS T1 INNER JOIN staff AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = 'Jon' AND T2.last_name = 'Stephens'", "source_tables": ["staff", "address"]}, "evidence": "location refers to address, address2, district"}
{"sample_id": 9154, "db_id": "movie_3", "final": {"question": "How many addresses are there in Woodridge city?", "sql": "SELECT COUNT(T1.address_id) FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.city = 'Woodridge'", "source_tables": ["city", "address"]}, "evidence": "\"Woodridge\" is the city"}
{"sample_id": 9155, "db_id": "movie_3", "final": {"question": "How many films are in English?", "sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T2.name = 'English'", "source_tables": ["film", "language"]}, "evidence": "\"English\" is the name of language"}
{"sample_id": 9156, "db_id": "movie_3", "final": {"question": "Give the address location of Heather Morris.", "sql": "SELECT T1.address FROM address AS T1 INNER JOIN customer AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = 'HEATHER' AND T2.last_name = 'MORRIS'", "source_tables": ["customer", "address"]}, "evidence": "address location refers to address"}
{"sample_id": 9157, "db_id": "movie_3", "final": {"question": "Give the email address of the person who lives in \"1411 Lillydale Drive\".", "sql": "SELECT T2.email FROM address AS T1 INNER JOIN staff AS T2 ON T1.address_id = T2.address_id WHERE T1.address = '1411 Lillydale Drive'", "source_tables": ["staff", "address"]}, "evidence": "\"1411 Lillydate Drive\" is the address"}
{"sample_id": 9158, "db_id": "movie_3", "final": {"question": "How much money did the customer No.297 pay for the rental which happened at 12:27:27 on 2005/7/28?", "sql": "SELECT T1.amount FROM payment AS T1 INNER JOIN rental AS T2 ON T1.rental_id = T2.rental_id WHERE T2.rental_date = '2005-07-28 12:27:27' AND T2.customer_id = 297", "source_tables": ["rental", "payment"]}, "evidence": "customer no. 297 refers to customer_id = 297; at 12:27:27 on 2005/7/28 refers to rental_date = '2005-07-28 12:27:27'; money pay for rent refers to amount"}
{"sample_id": 9159, "db_id": "movie_3", "final": {"question": "Which category does the film Working Microcosmos belong to?", "sql": "SELECT T3.name FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T1.title = 'WORKING MICROCOSMOS'", "source_tables": ["film", "category", "film_category"]}, "evidence": "\"WORKING MICROCOSMOS\" is the title of film; category refers to name"}
{"sample_id": 9160, "db_id": "movie_3", "final": {"question": "Give the number of documentary films.", "sql": "SELECT COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id WHERE T2.name = 'Documentary'", "source_tables": ["category", "film_category"]}, "evidence": "\"Documentary\" is the name of category; number of film refers to Count(film_id)"}
{"sample_id": 9161, "db_id": "movie_3", "final": {"question": "State the name of the category which has the most number of films.", "sql": "SELECT T.name FROM ( SELECT T2.name, COUNT(T1.film_id) AS num FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T2.name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["category", "film_category"]}, "evidence": "category refers to name; most number of films refers to Max(Count(film_id))"}
{"sample_id": 9162, "db_id": "movie_3", "final": {"question": "Give the name of the film for inventory No.3479.", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T2.inventory_id = 3479", "source_tables": ["film", "inventory"]}, "evidence": "inventory no. 3479 refers to inventory_id = '3479'; name of film refers to title"}
{"sample_id": 9163, "db_id": "movie_3", "final": {"question": "What is the percentage more for the rental payment for store No.2 than store No.1?", "sql": "SELECT CAST((SUM(IIF(T2.store_id = 2, T1.amount, 0)) - SUM(IIF(T2.store_id = 1, T1.amount, 0))) AS REAL) * 100 / SUM(IIF(T2.store_id = 1, T1.amount, 0)) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id INNER JOIN store AS T3 ON T2.store_id = T3.store_id", "source_tables": ["customer", "store", "payment"]}, "evidence": "store no. 1 refers to store_id = 1; store no.2 refers to store_id = 2; rental payment refers to amount; percent more = Divide (Subtract(amount where store_id = 2, amount where store_id = 1), amount where store_id = 1) *100"}
{"sample_id": 9164, "db_id": "movie_3", "final": {"question": "How many times is the number of Indian cities than Italian cities?", "sql": "SELECT CAST(SUM(IIF(T1.country = 'India', 1, 0)) AS REAL) / SUM(IIF(T1.country = 'Italy', 1, 0)) FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id", "source_tables": ["country", "city"]}, "evidence": "indian refers to country = 'India'; Italian refers to country = 'Italy'; times = Divide(Count(city where country = 'India), Count(city where country = 'Italy'))"}
{"sample_id": 9165, "db_id": "movie_3", "final": {"question": "How many times is the number of films Gina DeGeneres acted in than Penelope Guinness?", "sql": "SELECT CAST(SUM(IIF(T2.first_name = 'GINA' AND T2.last_name = 'DEGENERES', 1, 0)) AS REAL) * 100 / SUM(IIF(T2.first_name = 'PENELOPE' AND T2.last_name = 'GUINESS', 1, 0)) FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id", "source_tables": ["film_actor", "actor"]}, "evidence": "\"Gina DeGeneres\" and \"Penelope Guinness\" are both full name of actor; times number of film = Divide (Count (film_id where first_name = 'GINA' and last_name = 'DEGENERES'), Count(film_id where first_name = 'PENELOPE' and last_name = 'GUINESS'))"}
{"sample_id": 9166, "db_id": "movie_3", "final": {"question": "In 2006, how many restricted films were released?", "sql": "SELECT COUNT(film_id) FROM film WHERE rating = 'R' AND release_year = 2006", "source_tables": ["film"]}, "evidence": "restricted refers to rating = 'R'; release refers to release_year; in 2006 refers to release_year = 2006; film refers to title"}
{"sample_id": 9167, "db_id": "movie_3", "final": {"question": "How many actors starred in the film id 508?", "sql": "SELECT COUNT(actor_id) FROM film_actor WHERE film_id = 508", "source_tables": ["film_actor"]}, "evidence": ""}
{"sample_id": 9168, "db_id": "movie_3", "final": {"question": "What are the special features for the film \"Smoochy Control\"?", "sql": "SELECT special_features FROM film WHERE title = 'SMOOCHY CONTROL'", "source_tables": ["film"]}, "evidence": "\"SMOOCHY CONTROL\" is the title of film"}
{"sample_id": 9169, "db_id": "movie_3", "final": {"question": "How many customers paid over the amount of 10 on August 2005?", "sql": "SELECT COUNT(customer_id) FROM payment WHERE SUBSTR(payment_date, 1, 7) LIKE '2005-08'", "source_tables": ["payment"]}, "evidence": "over the amount of 10 refers to amount > 10; paid on August 2005 refers to payment_date like '2005_08%'; customer refers to customer_id"}
{"sample_id": 9170, "db_id": "movie_3", "final": {"question": "List the names of the films that are more than 180 minutes long.", "sql": "SELECT title FROM film WHERE length > 180", "source_tables": ["film"]}, "evidence": "more than 180 min long refers to length > 180; name of film refers to title"}
{"sample_id": 9171, "db_id": "movie_3", "final": {"question": "How much is the total rental payment for the first 10 rentals?", "sql": "SELECT SUM(amount) FROM payment WHERE rental_id BETWEEN 1 AND 10", "source_tables": ["payment"]}, "evidence": "first 10 rental refers to rental id between 1 and 10; total rental payment refers to sum(amount)"}
{"sample_id": 9172, "db_id": "movie_3", "final": {"question": "What are the full names of all the active employees?", "sql": "SELECT first_name, last_name FROM staff WHERE active = 1", "source_tables": ["staff"]}, "evidence": "active employee refers to active = 1; full name refers to first_name, last_name"}
{"sample_id": 9173, "db_id": "movie_3", "final": {"question": "Who is the staff manager in store id 2?", "sql": "SELECT manager_staff_id FROM store WHERE store_id = 2", "source_tables": ["store"]}, "evidence": "staff manager refers to manager_staff_id"}
{"sample_id": 9174, "db_id": "movie_3", "final": {"question": "How many rentals were returned on 5/27/2005?", "sql": "SELECT COUNT(rental_id) FROM rental WHERE rental_date = '2005-05-27'", "source_tables": ["rental"]}, "evidence": "return on 5/27/2005 refers to return_date = '2005-05-27'; rental refers to rental_id"}
{"sample_id": 9175, "db_id": "movie_3", "final": {"question": "What are the names of the movies which Laura Brody starred in?", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Laura' AND T1.last_name = 'Brody'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "name of movie refers to title"}
{"sample_id": 9176, "db_id": "movie_3", "final": {"question": "List the name of the films that can only be found in store id 2.", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T2.store_id = 2", "source_tables": ["film", "inventory"]}, "evidence": "name of film refers to title"}
{"sample_id": 9177, "db_id": "movie_3", "final": {"question": "What is the full name of the customer who rented movies for 7 consecutive days?", "sql": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN ( SELECT customer_id, COUNT(*) AS num_days FROM ( SELECT *, date(days, '-' || rn || ' day') AS results FROM ( SELECT customer_id, days, row_number() OVER (PARTITION BY customer_id ORDER BY days) AS rn FROM ( SELECT DISTINCT customer_id, date(rental_date) AS days FROM rental ) ) ) GROUP BY customer_id, results HAVING num_days = 7 ) AS T2 ON T1.customer_id = T2.customer_id", "source_tables": ["customer", "rental"]}, "evidence": "rented for 7 consecutive days refers to Subtract(return_date, rental_date) = 7; full name refers to first_name, last_name"}
{"sample_id": 9178, "db_id": "movie_3", "final": {"question": "How many films are categorized as horror?", "sql": "SELECT COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id WHERE T2.name = 'Horror'", "source_tables": ["category", "film_category"]}, "evidence": "\"Horror\" is the name of category"}
{"sample_id": 9179, "db_id": "movie_3", "final": {"question": "What is the name of the most rented movie?", "sql": "SELECT T.title FROM ( SELECT T1.title, COUNT(T3.rental_id) AS num FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T1.title ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["film", "rental", "inventory"]}, "evidence": "most rented movie refers to title where Max(Count(rental_id))"}
{"sample_id": 9180, "db_id": "movie_3", "final": {"question": "What is the most common special features of science-fiction movies?", "sql": "SELECT T1.special_features FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'sci-fi' ORDER BY T1.special_features DESC LIMIT 1", "source_tables": ["film", "category", "film_category"]}, "evidence": "\"science fiction\" is the name of category; most common special features refers to Max(frequency(special_features))"}
{"sample_id": 9181, "db_id": "movie_3", "final": {"question": "What is the full name of the actor who starred in most movies?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, COUNT(T1.film_id) AS num FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.first_name, T2.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["film_actor", "actor"]}, "evidence": "full name refers to first_name, last_name; actor who starred in the most movies refers to actor_id where Max(Count(film_id))"}
{"sample_id": 9182, "db_id": "movie_3", "final": {"question": "Among the films with a rental duration of 7 days, how many are comedies?", "sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T1.rental_duration = 7 AND T3.name = 'Comedy'", "source_tables": ["film", "category", "film_category"]}, "evidence": "rental duration of 7 refers to rental_duration = 7; comedies refers to name = 'Comedy'"}
{"sample_id": 9183, "db_id": "movie_3", "final": {"question": "Who is the staff manager of the store with the most non-active customers?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T3.first_name, T3.last_name, COUNT(T1.customer_id) AS num FROM customer AS T1 INNER JOIN store AS T2 ON T1.store_id = T2.store_id INNER JOIN staff AS T3 ON T2.store_id = T3.store_id WHERE T1.active = 0 GROUP BY T3.first_name, T3.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["staff", "customer", "store"]}, "evidence": "most non-active customer refers to Max(Count(active = 0))"}
{"sample_id": 9184, "db_id": "movie_3", "final": {"question": "What is the rental price per day of the most expensive children's film?", "sql": "SELECT T1.rental_rate FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Children' ORDER BY T1.rental_rate / T1.rental_duration DESC LIMIT 1", "source_tables": ["film", "category", "film_category"]}, "evidence": "children's film refers to name = 'Children'; average price per day of most expensive film = Max(Divide(rental_rate, rental_duration))"}
{"sample_id": 9185, "db_id": "movie_3", "final": {"question": "What is the complete address of store id 1?", "sql": "SELECT T3.address, T3.address2, T3.district FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id INNER JOIN address AS T3 ON T2.city_id = T3.city_id INNER JOIN store AS T4 ON T3.address_id = T4.address_id WHERE T4.store_id = 1", "source_tables": ["country", "city", "store", "address"]}, "evidence": "complete address refers to address, address2, district"}
{"sample_id": 9186, "db_id": "movie_3", "final": {"question": "How many customers are from the city of Lethbridge?", "sql": "SELECT COUNT(T3.customer_id) FROM city AS T1 INNER JOIN address AS T2 ON T1.city_id = T2.city_id INNER JOIN customer AS T3 ON T2.address_id = T3.address_id WHERE T1.city = 'Lethbridge'", "source_tables": ["city", "customer", "address"]}, "evidence": "customer refers to customer_id"}
{"sample_id": 9187, "db_id": "movie_3", "final": {"question": "How many cities are there in the United States?", "sql": "SELECT COUNT(T2.city) FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id WHERE T1.country = 'United States'", "source_tables": ["country", "city"]}, "evidence": "\"United States\" is the country"}
{"sample_id": 9188, "db_id": "movie_3", "final": {"question": "List the names of the customers from India.", "sql": "SELECT T4.first_name, T4.last_name FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id INNER JOIN address AS T3 ON T2.city_id = T3.city_id INNER JOIN customer AS T4 ON T3.address_id = T4.address_id WHERE T1.country = 'India'", "source_tables": ["country", "city", "customer", "address"]}, "evidence": "\"India\" is the country; name refers to first_name, last_name"}
{"sample_id": 9189, "db_id": "movie_3", "final": {"question": "Among the classic movies, how many movies have a rental rate of less than 1?", "sql": "SELECT COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.rental_rate < 1 AND T2.name = 'Classics'", "source_tables": ["film", "category", "film_category"]}, "evidence": "classic movie refers to name = 'Classics'; rental rate of less than 1 refers to rental_rate < 1; movie refers to film_id"}
{"sample_id": 9190, "db_id": "movie_3", "final": {"question": "What is the full name of the customer who rented the highest number of movies of all time?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, COUNT(T1.rental_id) AS num FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.first_name, T2.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["customer", "rental"]}, "evidence": "full name refers to first_name, last_name; customer who rented the most film refers to Max(count(rental_id))"}
{"sample_id": 9191, "db_id": "movie_3", "final": {"question": "How many times was \"Blanket Beverly\" rented?", "sql": "SELECT COUNT(T3.rental_id) FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id WHERE T1.title = 'Blanket Beverly'", "source_tables": ["film", "rental", "inventory"]}, "evidence": "\"BLANKET BEVERLY\" is the title of film; rented times refers to count(rental_id)"}
{"sample_id": 9192, "db_id": "movie_3", "final": {"question": "What is the full name of the actor who has the highest number of restricted films?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, COUNT(T2.film_id) AS num FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.rating = 'R' GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "restricted refers to rating = 'R'; highest number of film refers to Max(Count(film_id)); full name refers to first_name, last_name"}
{"sample_id": 9193, "db_id": "movie_3", "final": {"question": "Who are the top 5 actors with the highest number of films? List their full names and calculate the average number of films for each of the actors.", "sql": "SELECT T.first_name, T.last_name, num FROM ( SELECT T1.first_name, T1.last_name, COUNT(T2.film_id) AS num FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.num DESC LIMIT 5", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "actors with highest number of films refers to actor_id with Max(Count(film_id)); full name refers to first_name, last_name; average number of film = Divide (Count(film_id), 5)"}
{"sample_id": 9194, "db_id": "movie_3", "final": {"question": "List the actors' IDs who have \"KILMER\" as last name.", "sql": "SELECT actor_id FROM actor WHERE last_name = 'KILMER'", "source_tables": ["actor"]}, "evidence": ""}
{"sample_id": 9195, "db_id": "movie_3", "final": {"question": "List down the films titles with the lowest replacement cost under the general audiences rating.", "sql": "SELECT title FROM film WHERE replacement_cost = ( SELECT MIN(replacement_cost) FROM film )", "source_tables": ["film"]}, "evidence": "lowest replacement cost refers to Min(replacement_cost); under general audience rating refers to rating = G"}
{"sample_id": 9196, "db_id": "movie_3", "final": {"question": "Among the films with the longest duration, list any five title with their descriptions and special features.", "sql": "SELECT title, description, special_features FROM film WHERE length = ( SELECT MAX(length) FROM film ) LIMIT 5", "source_tables": ["film"]}, "evidence": "longest duration of film refers to Max(length)"}
{"sample_id": 9197, "db_id": "movie_3", "final": {"question": "How many films rented on 26th May, 2005 were returned on 30th May, 2005?", "sql": "SELECT COUNT(DISTINCT rental_id) FROM rental WHERE date(rental_date) BETWEEN '2005-05-26' AND '2005-05-30'", "source_tables": ["rental"]}, "evidence": "rented on 26th May 2005 refers to rental_date = '2005-05-26'; return on 30th May, 2005 refers to return_date = '2005-05-30'; number of rented film refers to Count (rental_id)"}
{"sample_id": 9198, "db_id": "movie_3", "final": {"question": "Calculate the average payment amount per customer.", "sql": "SELECT AVG(amount) FROM payment GROUP BY customer_id", "source_tables": ["payment"]}, "evidence": "average payment refers to AVG(amount)"}
{"sample_id": 9199, "db_id": "movie_3", "final": {"question": "What is the name and email of the staff in store ID 2?", "sql": "SELECT first_name, last_name, email FROM staff WHERE store_id = 2", "source_tables": ["staff"]}, "evidence": "name refers to first_name, last_name"}
{"sample_id": 9200, "db_id": "movie_3", "final": {"question": "How many percent of customers were inactive?", "sql": "SELECT CAST(SUM(IIF(active = 0, 1, 0)) AS REAL) * 100 / COUNT(customer_id) FROM customer", "source_tables": ["customer"]}, "evidence": "inactive refers to active = 0; percent = Divide (Count (customer_id where active = 0), Count(customer_id)) * 100"}
{"sample_id": 9201, "db_id": "movie_3", "final": {"question": "What is the description and film title of ID 996?", "sql": "SELECT description, title FROM film_text WHERE film_id = 996", "source_tables": ["film_text"]}, "evidence": "ID 996 refers to film_id = 996"}
{"sample_id": 9202, "db_id": "movie_3", "final": {"question": "Calculate customers' total payment amount in August, 2005.", "sql": "SELECT SUM(amount) FROM payment WHERE SUBSTR(payment_date, 1, 7) = '2005-08'", "source_tables": ["payment"]}, "evidence": "in August 2005 refers to payment_date like '2005-08%'; total payment amount refers to Sum(amount)"}
{"sample_id": 9203, "db_id": "movie_3", "final": {"question": "List down the film titles performed by Emily Dee.", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Emily' AND T1.last_name = 'Dee'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": ""}
{"sample_id": 9204, "db_id": "movie_3", "final": {"question": "List down the actors' full names who performed in \"CHOCOLATE DUCK\" film.", "sql": "SELECT T3.first_name, T3.last_name FROM film_actor AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T2.title = 'CHOCOLATE DUCK'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "\"CHOCOLATE DUCK\" is the title of film; full name refers to first_name, last_name"}
{"sample_id": 9205, "db_id": "movie_3", "final": {"question": "How many films in the horror category were included in PG-13-rated?", "sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Horror' AND T1.rating = 'PG-13'", "source_tables": ["film", "category", "film_category"]}, "evidence": "\"Horror\" is the name of category; PG-13 rated refers to rating = 'PG-13'"}
{"sample_id": 9206, "db_id": "movie_3", "final": {"question": "Distinguish the films performed by Judy Dean according to category.", "sql": "SELECT T5.name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN film_category AS T4 ON T2.film_id = T4.film_id INNER JOIN category AS T5 ON T4.category_id = T5.category_id WHERE T1.first_name = 'Judy' AND T1.last_name = 'Dean'", "source_tables": ["category", "actor", "film", "film_actor", "film_category"]}, "evidence": "films performed refers to film"}
{"sample_id": 9207, "db_id": "movie_3", "final": {"question": "Write down any five film names under the documentary category.", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Documentary' LIMIT 5", "source_tables": ["film", "category", "film_category"]}, "evidence": "\"Documentary\" is the name of category; film name refers to title"}
{"sample_id": 9208, "db_id": "movie_3", "final": {"question": "Mention the language of Untouchables Sunrise film and calculate its rental cost per day.", "sql": "SELECT T2.name, T1.replacement_cost / T1.rental_duration AS cost FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'UNTOUCHABLES SUNRISE'", "source_tables": ["film", "language"]}, "evidence": "\"UNTOUCHABLES SUNRISE\" is the title of film; language refers to name; rental cost per day = Divide (rental_cost, rental_duration)"}
{"sample_id": 9209, "db_id": "movie_3", "final": {"question": "List the films' titles which were rented on 24th May,2005.", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id WHERE SUBSTR(T3.rental_date, 1, 10) = '2005-05-24'", "source_tables": ["film", "rental", "inventory"]}, "evidence": "rented on 24th May 2005 refers to rental_date = '2005-05-24%'"}
{"sample_id": 9210, "db_id": "movie_3", "final": {"question": "List the films' titles which were rented by Brian Wyman in July, 2005.", "sql": "SELECT T4.title FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'BRIAN' AND T1.last_name = 'WYMAN' AND STRFTIME('%Y', T2.rental_date) = '2005' AND STRFTIME('%m',T2.rental_date) = '7'", "source_tables": ["film", "customer", "rental", "inventory"]}, "evidence": "rented in July 2005 refers to year (rental_date) = 2005 and month (rental_date) = 7"}
{"sample_id": 9211, "db_id": "movie_3", "final": {"question": "Write down the inventories' IDs and actors' names of \"STREETCAR INTENTIONS\".", "sql": "SELECT T4.inventory_id, T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN inventory AS T4 ON T2.film_id = T4.film_id WHERE T3.title = 'STREETCAR INTENTIONS'", "source_tables": ["film", "film_actor", "actor", "inventory"]}, "evidence": "\"STREETCAR INTENTIONS\" is the title of film; actor's names refers to first_name, last_name"}
{"sample_id": 9212, "db_id": "movie_3", "final": {"question": "Among the films rented by Natalie Meyer, describe the titles and categories of the films which were rented in February 2006.", "sql": "SELECT T3.title, T2.name FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id INNER JOIN inventory AS T4 ON T3.film_id = T4.film_id INNER JOIN customer AS T5 ON T4.store_id = T5.store_id INNER JOIN rental AS T6 ON T4.inventory_id = T6.inventory_id WHERE T5.first_name = 'Natalie' AND T5.last_name = 'Meyer' AND STRFTIME('%Y',T3.rental_rate) = '2006' AND STRFTIME('%m',T3.rental_rate) = '2'", "source_tables": ["rental", "category", "film", "film_category", "customer", "inventory"]}, "evidence": "category refers to name; rented in February 2006 refers to year(rental_date) = 2006 and month (rental_rate) = 2"}
{"sample_id": 9213, "db_id": "movie_3", "final": {"question": "How many rental IDs belong to Eleanor Hunt?", "sql": "SELECT COUNT(T1.rental_id) FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Eleanor' AND T2.last_name = 'Hunt'", "source_tables": ["customer", "rental"]}, "evidence": "'Eleanor Hunt' is the full name of a customer; full name refers to first_name, last_name"}
{"sample_id": 9214, "db_id": "movie_3", "final": {"question": "Describe the full names and cities of the customers who rented \"DREAM PICKUP\".", "sql": "SELECT T4.first_name, T4.last_name, T6.city FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN customer AS T4 ON T3.customer_id = T4.customer_id INNER JOIN address AS T5 ON T4.address_id = T5.address_id INNER JOIN city AS T6 ON T5.city_id = T6.city_id WHERE T1.title = 'DREAM PICKUP'", "source_tables": ["rental", "film", "city", "customer", "address", "inventory"]}, "evidence": "full name refers to first_name, last_name; 'DREAM PICKUP' is a title of film"}
{"sample_id": 9215, "db_id": "movie_3", "final": {"question": "Calculate how many percent of customers were located in India.", "sql": "SELECT CAST(SUM(IIF(T1.country = 'India', 1, 0)) AS REAL) * 100 / COUNT(T4.customer_id) FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id INNER JOIN address AS T3 ON T2.city_id = T3.city_id INNER JOIN customer AS T4 ON T3.address_id = T4.address_id", "source_tables": ["country", "city", "customer", "address"]}, "evidence": "'India' is a country; calculation = DIVIDE(SUM(country = 'India'), COUNT(customer_id)) * 100"}
{"sample_id": 9216, "db_id": "movie_3", "final": {"question": "How much percentage of the film did Mary Keitel perform more than Angela Witherspoon?", "sql": "SELECT CAST((SUM(IIF(T1.first_name = 'ANGELA' AND T1.last_name = 'WITHERSPOON', 1, 0)) - SUM(IIF(T1.first_name = 'MARY' AND T1.last_name = 'KEITEL', 1, 0))) AS REAL) * 100 / SUM(IIF(T1.first_name = 'MARY' AND T1.last_name = 'KEITEL', 1, 0)) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id", "source_tables": ["film_actor", "actor"]}, "evidence": "'Mary Keitel' AND 'Angela Witherspoon' are full name of actors; full name refers to FirstName, LastName; calculation = DIVIDE(SUBTRACT(SUM('Mary Keitel'), SUM('Angela Witherspoon')), SUM('Angela Witherspoon')) * 100"}
{"sample_id": 9217, "db_id": "movie_3", "final": {"question": "Provide the email, address, city, and country of the customer Lillie Kim.", "sql": "SELECT T1.email, T2.address, T3.city, T4.country FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id INNER JOIN city AS T3 ON T2.city_id = T3.city_id INNER JOIN country AS T4 ON T3.country_id = T4.country_id WHERE T1.first_name = 'Lillie' AND T1.last_name = 'Kim'", "source_tables": ["country", "city", "customer", "address"]}, "evidence": "'Lillie Kim' is the full name of a customer; full name refers to first_name, last_name"}
{"sample_id": 9218, "db_id": "movie_3", "final": {"question": "Provide any 5 customers' full names who have rented from Mike Hillyer.", "sql": "SELECT T3.first_name, T3.last_name FROM staff AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id INNER JOIN customer AS T3 ON T2.address_id = T3.address_id WHERE T1.first_name = 'Mike' AND T1.last_name = 'Hillyer' LIMIT 5", "source_tables": ["staff", "customer", "address"]}, "evidence": "full name refers to first_name, last_name; 'Mike Hillyer' is a full name of a staff;"}
{"sample_id": 9219, "db_id": "movie_3", "final": {"question": "Calculate the total payment amount by Diane Collins.", "sql": "SELECT SUM(T2.amount) FROM customer AS T1 INNER JOIN payment AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'Diane' AND T1.last_name = 'Collins'", "source_tables": ["customer", "payment"]}, "evidence": "'Diane Collins' is a full name of a customer; full name refers to first_name, last_name"}
{"sample_id": 9220, "db_id": "movie_3", "final": {"question": "Provide the full names and emails of customers whose payments were greater than 70% of the average.", "sql": "SELECT DISTINCT T2.first_name, T2.last_name, T2.email FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T2.address_id = T3.address_id WHERE T1.amount > ( SELECT AVG(amount) FROM payment ) * 0.7", "source_tables": ["customer", "address", "payment"]}, "evidence": "full name refers to first_name, last_name; average payment refers to AVG(amount); payments were greater than 70% of the average refers to amount > (AVG(amount) MULTIPLY 0.7)"}
{"sample_id": 9221, "db_id": "movie_3", "final": {"question": "How many films have a rental rate of 0.99?", "sql": "SELECT COUNT(film_id) FROM film WHERE rental_rate = 0.99", "source_tables": ["film"]}, "evidence": ""}
{"sample_id": 9222, "db_id": "movie_3", "final": {"question": "Among the customers with customer ID of 100 and below, how many of them have Thomas as their last name?", "sql": "SELECT COUNT(customer_id) FROM customer WHERE last_name = 'Thomas' AND customer_id < 100", "source_tables": ["customer"]}, "evidence": "customer ID of 100 and below refers to customer_id < 100"}
{"sample_id": 9223, "db_id": "movie_3", "final": {"question": "List the actor's last name that starred the film with the description of \"A Thoughtful Drama of a Composer And a Feminist who must Meet a Secret Agent in The Canadian Rockies\".", "sql": "SELECT T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.description = 'A Thoughtful Drama of a Composer And a Feminist who must Meet a Secret Agent in The Canadian Rockies'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": ""}
{"sample_id": 9224, "db_id": "movie_3", "final": {"question": "Give the title of the film starred by Liza Bergman with the highest replacement cost.", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Liza' AND T1.last_name = 'Bergman' ORDER BY replacement_cost DESC LIMIT 1", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "Liza Bergman' is a full name; full name refers to first_name, last_name; highest replacement cost refers to MAX(replacement_cost)"}
{"sample_id": 9225, "db_id": "movie_3", "final": {"question": "Among films with store ID of 2, list the title of films with the highest rental rate.", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T2.store_id = 2 ORDER BY rental_rate DESC LIMIT 1", "source_tables": ["film", "inventory"]}, "evidence": "highest rental rate refers to MAX(rental_rate)"}
{"sample_id": 9226, "db_id": "movie_3", "final": {"question": "Among the films starred by Angelina Astaire, what is the title of the film with a replacement cost of 27.99?", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Angelina' AND T1.last_name = 'Astaire' AND T3.replacement_cost = 27.99", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "Angelina Astaire' is a full name of an actor; full name refers to first_name, last_name"}
{"sample_id": 9227, "db_id": "movie_3", "final": {"question": "List the inventory ID of the film titled \"African Egg\".", "sql": "SELECT T2.inventory_id FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T1.title = 'African Egg'", "source_tables": ["film", "inventory"]}, "evidence": "'African Egg' is a title of a film"}
{"sample_id": 9228, "db_id": "movie_3", "final": {"question": "In films with a length duration of 113 minutes, how many of the films are starred by Kirk Jovovich?", "sql": "SELECT COUNT(T1.actor_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.length = 113 AND T1.first_name = 'Kirk' AND T1.last_name = 'Jovovich'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "length duration of 113 minutes refers to length = 113; 'Kirk Jovovich' is a full name of an actor; full name refers to first_name, last_name"}
{"sample_id": 9229, "db_id": "movie_3", "final": {"question": "In the film with an inventory ID between 20 to 60, how many of the films have a G rating?", "sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T2.inventory_id BETWEEN 20 AND 60 AND T1.rating = 'G'", "source_tables": ["film", "inventory"]}, "evidence": "G rating refers to rating = 'G'"}
{"sample_id": 9230, "db_id": "movie_3", "final": {"question": "Among films with a rental rate of 4.99, what is the total number of films starred by Bob Fawcett?", "sql": "SELECT COUNT(T1.actor_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.rental_rate = 4.99 AND T1.first_name = 'Bob' AND T1.last_name = 'Fawcett'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "Bob Fawcett' is a full name of an actor; full name refers to first_name, last_name"}
{"sample_id": 9231, "db_id": "movie_3", "final": {"question": "What is the inventory ID of the films starred by Russell Close with a duration between 110 to 150 minutes?", "sql": "SELECT T4.inventory_id FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN inventory AS T4 ON T3.film_id = T4.film_id WHERE T3.length BETWEEN 110 AND 150 AND T1.first_name = 'Russell' AND T1.last_name = 'Close'", "source_tables": ["film", "film_actor", "actor", "inventory"]}, "evidence": "'Russell Close' is a full name of an actor; full name refers to first_name, last_name; duration between 110 to 150 minutes refers to length BETWEEN 110 AND 150"}
{"sample_id": 9232, "db_id": "movie_3", "final": {"question": "What is the store and inventory ID of the film with the longest duration?", "sql": "SELECT T2.store_id, T2.inventory_id FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id ORDER BY T1.length DESC LIMIT 1", "source_tables": ["film", "inventory"]}, "evidence": "the longest duration refers to MAX(length)"}
{"sample_id": 9233, "db_id": "movie_3", "final": {"question": "List the titles of the films starred by Elvis Marx.", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.length BETWEEN 110 AND 150 AND T1.first_name = 'Russell' AND T1.last_name = 'Close'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "'Elvis Marx' is a full name of a film; full name refers to first_name, last_name"}
{"sample_id": 9234, "db_id": "movie_3", "final": {"question": "In films with rental rate of 4.99, list down the inventory ID of the films starred by Lucille Dee.", "sql": "SELECT T4.inventory_id FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN inventory AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'Lucille' AND T1.last_name = 'Dee' AND T3.rental_rate = 4.99", "source_tables": ["film", "film_actor", "actor", "inventory"]}, "evidence": "'Lucille Dee' is a full name of an actor; full name refers to first_name, last_name"}
{"sample_id": 9235, "db_id": "movie_3", "final": {"question": "List the store ID of the films with a rental rate greater than the 60% of average rental rate of all listed films.", "sql": "SELECT T2.store_id FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T1.rental_rate > ( SELECT AVG(T1.rental_rate) * 0.6 FROM film AS T1 )", "source_tables": ["film", "inventory"]}, "evidence": "average rental rate of all listed films refers to AVG(rental_rate); rental rate greater than the 60% of average rental rate refers to rental_rate > (AVG(rental_rate)) MULTIPLY 0.6"}
{"sample_id": 9236, "db_id": "movie_3", "final": {"question": "Among the films starred by Nick Wahlberg, what is the percentage of the films with G rating?", "sql": "SELECT CAST(SUM(IIF(T3.rating = 'G', 1, 0)) AS REAL) / COUNT(T3.film_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Elvis' AND T1.last_name = 'Marx'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "'Nick Wahlberg' is a full name of an actor; full name refers to first_name, last_name; G rating refers to rating = 'G'; calculation = DIVIDE(SUM(rating = 'G'), SUM(rating)) * 100"}
{"sample_id": 9237, "db_id": "movie_3", "final": {"question": "List the address in Texas in the ascending order of city id.", "sql": "SELECT address FROM address WHERE district = 'Texas' AND city_id = ( SELECT MIN(city_id) FROM address WHERE district = 'Texas' )", "source_tables": ["address"]}, "evidence": "'Texas' is a district"}
{"sample_id": 9238, "db_id": "movie_3", "final": {"question": "Find the full name and email address of inactive customers whose record was created in 2006.", "sql": "SELECT first_name, last_name, email FROM customer WHERE STRFTIME('%Y',create_date) = '2006' AND active = 0", "source_tables": ["customer"]}, "evidence": "full name refers to first_name, last_name; record created in 2006 refers to create_date = 2006; inactive customers refers to active = 0"}
{"sample_id": 9239, "db_id": "movie_3", "final": {"question": "What percentage of the movies are PG-13?", "sql": "SELECT CAST(SUM(IIF(rating = 'PG-13', 1, 0)) AS REAL) * 100 / COUNT(film_id) FROM film", "source_tables": ["film"]}, "evidence": "PG-13 is a rating; calculation = DIVIDE(SUM(rating = PG-13), SUM(rating)) * 100"}
{"sample_id": 9240, "db_id": "movie_3", "final": {"question": "Please list the top ten movies with the most price per day in descending order of price per day.", "sql": "SELECT title FROM film ORDER BY rental_rate / rental_duration DESC LIMIT 10", "source_tables": ["film"]}, "evidence": "movies with the most price per day refers to MAX(rental_rate)"}
{"sample_id": 9241, "db_id": "movie_3", "final": {"question": "Calculate the average rent amount paid by the customer with customer id 15.", "sql": "SELECT AVG(amount) FROM payment WHERE customer_id = 15", "source_tables": ["payment"]}, "evidence": "average rent amount refers to AVG(amount)"}
{"sample_id": 9242, "db_id": "movie_3", "final": {"question": "How many customers rented for an above-average period?", "sql": "SELECT COUNT(customer_id) FROM rental WHERE return_date - rental_date > ( SELECT AVG(return_date - rental_date) FROM rental )", "source_tables": ["rental"]}, "evidence": "rented period refers to SUBTRACT(return_date, rental_date); calculation = rented period > (AVG(rented period))"}
{"sample_id": 9243, "db_id": "movie_3", "final": {"question": "Among the movies, what percentage are horror?", "sql": "SELECT CAST(SUM(IIF(T2.name = 'horror', 1, 0)) AS REAL) * 100 / COUNT(T2.category_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id", "source_tables": ["category", "film_category"]}, "evidence": "horror is a name of film category; calculation = DIVIDE(COUNT('horror'), COUNT(category_id)) * 100"}
{"sample_id": 9244, "db_id": "movie_3", "final": {"question": "Give the full name of the actor who acted in the most number of movies?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, COUNT(T1.film_id) AS num FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.first_name, T2.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["film_actor", "actor"]}, "evidence": "full name refers to first_name, last_name; acted in the most number of movies refers to MAX(COUNT(film_id))"}
{"sample_id": 9245, "db_id": "movie_3", "final": {"question": "Give the full name of the actor who acted the most in drama movies?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, COUNT(T2.film_id) AS num FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film_category AS T3 ON T2.film_id = T3.film_id WHERE T3.category_id = 7 GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["film_actor", "film_category", "actor"]}, "evidence": "full name refers to first_name, last_name; drama is a category of a film; acted the most in a movies refers to MAX(COUNT(film_id))"}
{"sample_id": 9246, "db_id": "movie_3", "final": {"question": "What is the difference in the average number of films rented each day in Australia and Canada?", "sql": "SELECT AVG(IIF(T4.country = 'Australia', 1, 0)) - AVG(IIF(T4.country = 'Canada', 1, 0)) AS diff FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id INNER JOIN city AS T3 ON T2.city_id = T3.city_id INNER JOIN country AS T4 ON T3.country_id = T4.country_id", "source_tables": ["country", "city", "customer", "address"]}, "evidence": "'Australia' AND 'Canada' are country; average number of films refers to AVG('Australia') AND AVG('Canada'); calculation = SUBTRACT(AVG('Australia'), AVG('Canada'))"}
{"sample_id": 9247, "db_id": "movie_3", "final": {"question": "Of the movies in which Reese Kilmer acted, what percentage are action movies?", "sql": "SELECT CAST(SUM(IIF(T4.name = 'Action', 1, 0)) AS REAL) * 100 / COUNT(T1.actor_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film_category AS T3 ON T2.film_id = T3.film_id INNER JOIN category AS T4 ON T3.category_id = T4.category_id WHERE T1.first_name = 'Reese' AND T1.last_name = 'Kilmer'", "source_tables": ["film_actor", "film_category", "actor", "category"]}, "evidence": "'Reese Kilmer' is a full name of an actor; 'action' is the name of the category; calculation = DIVIDE(COUNT('action'), COUNT(category_id)) * 100"}
{"sample_id": 9248, "db_id": "movie_3", "final": {"question": "Give the total amount of rent for the movie Clockwork Paradice.", "sql": "SELECT SUM(T1.amount) FROM payment AS T1 INNER JOIN rental AS T2 ON T1.rental_id = T2.rental_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T4.title = 'CLOCKWORK PARADICE'", "source_tables": ["film", "rental", "inventory", "payment"]}, "evidence": "'Clockwork Paradice' is a title of a film"}
{"sample_id": 9249, "db_id": "movie_3", "final": {"question": "Find and list the full name of customers who rented more than five types of movies.", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, COUNT(T1.customer_id) AS num FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id INNER JOIN film_category AS T5 ON T4.film_id = T5.film_id GROUP BY T1.first_name, T1.last_name ) AS T WHERE T.num > 5", "source_tables": ["rental", "film", "film_category", "customer", "inventory"]}, "evidence": "full name refers to first_name, last_name; types of movies means category of movies; \nrented more than five types of movies refers to COUNT(film_category) > 5"}
{"sample_id": 9250, "db_id": "movie_3", "final": {"question": "What is the average number of actors acted in comedy movies?", "sql": "SELECT AVG(T1.actor_id) FROM film_actor AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id INNER JOIN actor AS T4 ON T4.actor_id = T1.actor_id WHERE T3.name = 'comedy'", "source_tables": ["film_actor", "film_category", "actor", "category"]}, "evidence": "comedy is the name of a category; average number of actors refers to AVG(actor_id)"}
{"sample_id": 9251, "db_id": "movie_3", "final": {"question": "In children's movies, which was rented the most?", "sql": "SELECT T.title FROM ( SELECT T4.title, COUNT(T4.title) AS num FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id INNER JOIN film_category AS T5 ON T4.film_id = T5.film_id INNER JOIN category AS T6 ON T5.category_id = T6.category_id WHERE T6.name = 'Children' GROUP BY T4.title ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["rental", "category", "film", "film_category", "customer", "inventory"]}, "evidence": "children is the name of the category; rented the most refers to MAX(COUNT(title))"}
{"sample_id": 9252, "db_id": "movie_3", "final": {"question": "Calculate the percentage of customers who paid more than the average rent amount in store 1.", "sql": "SELECT CAST(( SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN payment AS T2 ON T1.customer_id = T2.customer_id WHERE T2.amount > ( SELECT AVG(amount) FROM payment ) ) AS REAL) * 100 / ( SELECT COUNT(customer_id) FROM customer )", "source_tables": ["customer", "payment"]}, "evidence": "store 1 refers to store_id = 1; average rent amount refers to AVG(amount); calculation = DIVIDE(amount > AVG(amount), COUNT(customer_id)) * 100"}
{"sample_id": 9253, "db_id": "movie_3", "final": {"question": "Find and list the full name of customers who rented more family movies than Sci-Fi movies.", "sql": "SELECT DISTINCT IIF(SUM(IIF(T5.name = 'Family', 1, 0)) - SUM(IIF(T5.name = 'Sci-Fi', 1, 0)) > 0, T1.first_name, 0) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film_category AS T4 ON T4.film_id = T3.film_id INNER JOIN category AS T5 ON T4.category_id = T5.category_id GROUP BY T1.customer_id", "source_tables": ["rental", "category", "film_category", "customer", "inventory"]}, "evidence": "full name refers to first_name, last_name; 'family' AND 'Sci-Fi' are names of the category; customers who rented more family movies than Sci-Fi movies refers to count(name = 'Family') > count(name = 'Sci-Fi')"}
{"sample_id": 9254, "db_id": "movie_3", "final": {"question": "Indicate the title of all the films rated as 'Adults Only'.", "sql": "SELECT title FROM film WHERE rating = 'NC-17'", "source_tables": ["film"]}, "evidence": "'Adults Only' refers to rating = 'NC-17'"}
{"sample_id": 9255, "db_id": "movie_3", "final": {"question": "How many actors with the surname Kilmer are there?", "sql": "SELECT COUNT(actor_id) FROM actor WHERE last_name = 'Kilmer'", "source_tables": ["actor"]}, "evidence": "surname means last_name;"}
{"sample_id": 9256, "db_id": "movie_3", "final": {"question": "How many movies have a length longer than 100?", "sql": "SELECT COUNT(film_id) FROM film WHERE length > 100", "source_tables": ["film"]}, "evidence": "length longer than 100 refers to length > 100"}
{"sample_id": 9257, "db_id": "movie_3", "final": {"question": "How many payments were made throughout the month of August 2005?", "sql": "SELECT SUM(amount) FROM payment WHERE payment_date LIKE '2005-08%'", "source_tables": ["payment"]}, "evidence": "payments made refers to amount; throughout the month of August 2005 refers to payment_date like '2005-08%'"}
{"sample_id": 9258, "db_id": "movie_3", "final": {"question": "To which country does the address '1386 Nakhon Sawan Boulevard' belong?", "sql": "SELECT T1.country FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id INNER JOIN address AS T3 ON T2.city_id = T3.city_id WHERE T3.address = '1386 Nakhon Sawan Boulevard'", "source_tables": ["country", "city", "address"]}, "evidence": ""}
{"sample_id": 9259, "db_id": "movie_3", "final": {"question": "What language was the most used in movies released in 2006?", "sql": "SELECT T.language_id FROM ( SELECT T1.language_id, COUNT(T1.language_id) AS num FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE STRFTIME('%Y',T1.release_year) = '2006' GROUP BY T1.language_id ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["film", "language"]}, "evidence": "released in 2006 refers to release_year = 2006; the most used language refers to MAX(COUNT(language_id))"}
{"sample_id": 9260, "db_id": "movie_3", "final": {"question": "Indicate the title of all the films that are in the Classics category.", "sql": "SELECT T2.title FROM film_category AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T1.category_id = T3.category_id WHERE T3.name = 'Classics'", "source_tables": ["film", "category", "film_category"]}, "evidence": "'classics' is the name of category"}
{"sample_id": 9261, "db_id": "movie_3", "final": {"question": "How many rentals did Ella Oliver hire in June 2016?", "sql": "SELECT COUNT(T1.rental_id) FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'ELLA' AND T2.last_name = 'ELLA' AND date(T1.rental_date) BETWEEN '2005-06-01' AND '2005-06-30'", "source_tables": ["customer", "rental"]}, "evidence": "'Ella Oliver' is a full name of a customer; full name refers to first_name, last_name; rental hired in June 2016 refers to rental_date BETWEEN '2005-06-01' AND '2005-06-30'"}
{"sample_id": 9262, "db_id": "movie_3", "final": {"question": "How many different clients have rented materials from Jon Stephens?", "sql": "SELECT COUNT(T1.customer_id) FROM rental AS T1 INNER JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Jon' AND T2.last_name = 'Stephens'", "source_tables": ["staff", "rental"]}, "evidence": "'Jon Stephens' is a full name of a customer; full name refers to first_name, last_name;"}
{"sample_id": 9263, "db_id": "movie_3", "final": {"question": "What is the total amount paid for rentals made on July 29, 2005?", "sql": "SELECT SUM(T2.amount) FROM rental AS T1 INNER JOIN payment AS T2 ON T1.rental_id = T2.rental_id WHERE date(T1.rental_date) = '2005-07-29%'", "source_tables": ["rental", "payment"]}, "evidence": "July 29, 2005 refers to rental_date like '2005-07-29'"}
{"sample_id": 9264, "db_id": "movie_3", "final": {"question": "What is the first name of the customers whose address is in the postal code that begins with 76?", "sql": "SELECT T1.first_name FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id WHERE SUBSTR(T2.postal_code, 1, 2) = '76'", "source_tables": ["customer", "address"]}, "evidence": "postal code that begins with 76 refers to postal_code like '76%'"}
{"sample_id": 9265, "db_id": "movie_3", "final": {"question": "On what date was the rented material for the movie BLOOD ARGONAUTS returned?", "sql": "SELECT T1.rental_date FROM rental AS T1 INNER JOIN inventory AS T2 ON T1.inventory_id = T2.inventory_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'BLOOD ARGONAUTS'", "source_tables": ["film", "rental", "inventory"]}, "evidence": "'BLOOD ARGONAUTS' is a title of a film; date a movie was returned refers to return_date"}
{"sample_id": 9266, "db_id": "movie_3", "final": {"question": "What is the title of the films in which Cuba Allen acted?", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Cuba' AND T1.last_name = 'Allen'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "'Cuba Allen' is a full name of an actor; full name refers to first_name, last_name"}
{"sample_id": 9267, "db_id": "movie_3", "final": {"question": "How many actors acted in movies in the Music category?", "sql": "SELECT COUNT(T1.actor_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN film_category AS T4 ON T3.film_id = T4.film_id INNER JOIN category AS T5 ON T4.category_id = T5.category_id WHERE T5.name = 'Music'", "source_tables": ["category", "actor", "film", "film_actor", "film_category"]}, "evidence": "Music' is a name of a category"}
{"sample_id": 9268, "db_id": "movie_3", "final": {"question": "What is the full name of the actor who has acted the most times in comedy films?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T4.first_name, T4.last_name, COUNT(T2.actor_id) AS num FROM film_category AS T1 INNER JOIN film_actor AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T1.category_id = T3.category_id INNER JOIN actor AS T4 ON T2.actor_id = T4.actor_id WHERE T3.name = 'Comedy' GROUP BY T4.first_name, T4.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["film_actor", "film_category", "actor", "category"]}, "evidence": "full name refers to first_name, last_name; 'comedy' is a name of a category;"}
{"sample_id": 9269, "db_id": "movie_3", "final": {"question": "How many customers did not rent material at Mike's store?", "sql": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN store AS T2 ON T1.store_id = T2.store_id INNER JOIN staff AS T3 ON T2.manager_staff_id = T3.staff_id WHERE T3.first_name != 'Mike'", "source_tables": ["staff", "customer", "store"]}, "evidence": "not at Mike's store refers to staff.first_name ! = 'Mike'"}
{"sample_id": 9270, "db_id": "movie_3", "final": {"question": "Indicate the name of the actors of the films rated as 'Parents Strongly Precautioned' with the highest replacement cost.", "sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.rating = 'PG-13' ORDER BY T3.replacement_cost DESC LIMIT 1", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "name refers to first_name, last_name; Parents Strongly Precautioned' refers to rating = 'PG-13'; \nhighest replacement cost refers to MAX(replacement_cost)"}
{"sample_id": 9271, "db_id": "movie_3", "final": {"question": "What is the name of the client who has the largest quantity of rented material without returning it?", "sql": "SELECT T.first_name FROM ( SELECT T2.first_name, COUNT(T1.rental_date) AS num FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.first_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["customer", "rental"]}, "evidence": "name refers to first_name, last_name; without returning a rented material refers to return_date is null"}
{"sample_id": 9272, "db_id": "movie_3", "final": {"question": "How many customers live in the city of Miyakonojo?", "sql": "SELECT COUNT(T3.customer_id) FROM city AS T1 INNER JOIN address AS T2 ON T1.city_id = T2.city_id INNER JOIN customer AS T3 ON T2.address_id = T3.address_id WHERE T1.city = 'Miyakonojo'", "source_tables": ["city", "customer", "address"]}, "evidence": ""}
{"sample_id": 9273, "db_id": "movie_3", "final": {"question": "How many non-active clients have not returned the rented material?", "sql": "SELECT COUNT(T2.customer_id) FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.active = 0", "source_tables": ["customer", "rental"]}, "evidence": "non-active clients refers to active = 0; not returning a rented material refers to rental_date is null"}
{"sample_id": 9274, "db_id": "movie_3", "final": {"question": "What is the title of the animated films that have the shortest length?", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id ORDER BY T1.length LIMIT 1", "source_tables": ["film", "category", "film_category"]}, "evidence": "animated film means animation; animation is a name of a category"}
{"sample_id": 9275, "db_id": "movie_3", "final": {"question": "In which country is the store where Hector Poinexter rents equipment located?", "sql": "SELECT T5.country FROM customer AS T1 INNER JOIN store AS T2 ON T1.store_id = T2.store_id INNER JOIN address AS T3 ON T2.address_id = T3.address_id INNER JOIN city AS T4 ON T3.city_id = T4.city_id INNER JOIN country AS T5 ON T4.country_id = T5.country_id WHERE T1.first_name = 'HECTOR' AND T1.last_name = 'POINDEXTER'", "source_tables": ["country", "store", "city", "customer", "address"]}, "evidence": "'Hector Poinexter' is a full name of a customer; full name refers to first_name, last_name;"}
{"sample_id": 9276, "db_id": "movie_3", "final": {"question": "What is the average rental payment in Horror movies?", "sql": "SELECT AVG(T5.amount) FROM category AS T1 INNER JOIN film_category AS T2 ON T1.category_id = T2.category_id INNER JOIN inventory AS T3 ON T2.film_id = T3.film_id INNER JOIN rental AS T4 ON T3.inventory_id = T4.inventory_id INNER JOIN payment AS T5 ON T4.rental_id = T5.rental_id WHERE T1.name = 'Horror'", "source_tables": ["rental", "category", "film_category", "payment", "inventory"]}, "evidence": "'Horror' is a name of a category; average rental payment refers to AVG(amount)"}
{"sample_id": 9277, "db_id": "movie_3", "final": {"question": "What is the average amount of rent that Christy Vargas paid?", "sql": "SELECT AVG(T2.amount) FROM customer AS T1 INNER JOIN payment AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'CHRISTY' AND T1.Last_name = 'VARGAS'", "source_tables": ["customer", "payment"]}, "evidence": "'Christy Vargas' is a full name of a customer; full name refers to first_name, last_name; average amount of rent refers to AVG(amount)"}
{"sample_id": 9278, "db_id": "movie_3", "final": {"question": "What percentage of films with a length of less than 100 belong to the Drama category?", "sql": "SELECT CAST(SUM(IIF(T2.length < 100 AND T3.name = 'Drama', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T1.category_id = T3.category_id", "source_tables": ["film", "category", "film_category"]}, "evidence": "Drama' is a name of a category; calculation = DIVIDE(SUM(length < 100 AND name = 'Drama'), COUNT(film_id)) * 100"}
{"sample_id": 9279, "db_id": "movie_3", "final": {"question": "What are the actors that have the same forename as Johnny? Please include in your answer the full names of these actors.", "sql": "SELECT first_name, last_name FROM actor WHERE first_name = 'Johnny'", "source_tables": ["actor"]}, "evidence": "forename means first_name; full name refers to first_name, last_name"}
{"sample_id": 9280, "db_id": "movie_3", "final": {"question": "What are the address numbers that are located in Gansu district?", "sql": "SELECT address_id FROM address WHERE district = 'Gansu'", "source_tables": ["address"]}, "evidence": "address numbers refers to address_id;"}
{"sample_id": 9281, "db_id": "movie_3", "final": {"question": "Please list three types of film along with their IDs and the latest update.", "sql": "SELECT DISTINCT name, category_id, last_update FROM category LIMIT 3", "source_tables": ["category"]}, "evidence": "types of film refers to the name of a category; IDs refers to category_id; latest update refers to last_update."}
{"sample_id": 9282, "db_id": "movie_3", "final": {"question": "Please list the full names of any three inactive customers.", "sql": "SELECT first_name, last_name FROM customer WHERE active = 0 LIMIT 3", "source_tables": ["customer"]}, "evidence": "full name refers to first_name, last_name; inactive customers refers to active = 0"}
{"sample_id": 9283, "db_id": "movie_3", "final": {"question": "What is the rental price per day for Airplane Sierra?", "sql": "SELECT rental_rate / rental_duration AS result FROM film WHERE title = 'AIRPLANE SIERRA'", "source_tables": ["film"]}, "evidence": "rental price per day refers to DIVIDE(rental_price, rental_duration); 'Airplane Sierra' is a title of a film"}
{"sample_id": 9284, "db_id": "movie_3", "final": {"question": "Where is store number 2 located?", "sql": "SELECT T1.address, T1.address2, T1.district FROM address AS T1 INNER JOIN store AS T2 ON T1.address_id = T2.address_id WHERE T2.store_id = 2", "source_tables": ["store", "address"]}, "evidence": "store number 2 refers to store_id = 2; where is a store located refers to address, address2, district"}
{"sample_id": 9285, "db_id": "movie_3", "final": {"question": "Which city does the address 1623 Kingstown Drive belong to?", "sql": "SELECT T1.city FROM city AS T1 INNER JOIN address AS T2 ON T2.city_id = T1.city_id WHERE T2.address = '1623 Kingstown Drive'", "source_tables": ["city", "address"]}, "evidence": ""}
{"sample_id": 9286, "db_id": "movie_3", "final": {"question": "Please name three cities that belong to Algeria.", "sql": "SELECT T2.city FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id WHERE T1.country = 'Algeria'", "source_tables": ["country", "city"]}, "evidence": "Algeria is a country"}
{"sample_id": 9287, "db_id": "movie_3", "final": {"question": "What is the category of the film Agent Truman?", "sql": "SELECT T3.name FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T1.title = 'AGENT TRUMAN'", "source_tables": ["film", "category", "film_category"]}, "evidence": "'Agent Truman' is a title of a film; category refers to name"}
{"sample_id": 9288, "db_id": "movie_3", "final": {"question": "Please list the titles of any three action films.", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Action' LIMIT 3", "source_tables": ["film", "category", "film_category"]}, "evidence": "action is a name of category"}
{"sample_id": 9289, "db_id": "movie_3", "final": {"question": "What is the difference between the number of children's films and action films?", "sql": "SELECT SUM(IIF(T2.name = 'Children', 1, 0)) - SUM(IIF(T2.name = 'Action', 1, 0)) AS diff FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id", "source_tables": ["category", "film_category"]}, "evidence": "'children' AND 'action' are names of a category; Calculation = SUBTRACT(AVG('children'), AVG('action'))"}
{"sample_id": 9290, "db_id": "movie_3", "final": {"question": "Which district does Maria Miller live in?", "sql": "SELECT T2.district FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.first_name = 'Maria' AND T1.last_name = 'Miller'", "source_tables": ["customer", "address"]}, "evidence": "'Maria Miller' is a name of a customer; full name refers to first_name, last_name"}
{"sample_id": 9291, "db_id": "movie_3", "final": {"question": "Who is the customer that is active and lives at 1795 Santiago de Compostela Way, Texas?", "sql": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T2.address = '1795 Santiago de Compostela Way' AND T1.active = 1", "source_tables": ["customer", "address"]}, "evidence": "active refers to active = 1; '1795 Santiago de Compostela Way' is an address; Texas is a district; who refers to first_name, last_name"}
{"sample_id": 9422, "db_id": "california_schools", "final": {"question": "What is the highest eligible free rate for K-12 students in the schools in Alameda County?", "sql": "SELECT 'Free Meal Count (K-12)' / 'Enrollment (K-12)' FROM frpm WHERE 'County Name' = 'Alameda' ORDER BY (CAST('Free Meal Count (K-12)' AS REAL) / 'Enrollment (K-12)') DESC LIMIT 1", "source_tables": ["frpm"]}, "evidence": "Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`"}
{"sample_id": 9423, "db_id": "california_schools", "final": {"question": "Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.", "sql": "SELECT 'Free Meal Count (Ages 5-17)' / 'Enrollment (Ages 5-17)' FROM frpm WHERE 'Educational Option Type' = 'Continuation School' AND 'Free Meal Count (Ages 5-17)' / 'Enrollment (Ages 5-17)' IS NOT NULL ORDER BY 'Free Meal Count (Ages 5-17)' / 'Enrollment (Ages 5-17)' ASC LIMIT 3", "source_tables": ["frpm"]}, "evidence": "Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`"}
{"sample_id": 9424, "db_id": "california_schools", "final": {"question": "Please list the zip code of all the charter schools in Fresno County Office of Education.", "sql": "SELECT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.'District Name' = 'Fresno County Office of Education' AND T1.'Charter School (Y/N)' = 1", "source_tables": ["frpm", "schools"]}, "evidence": "Charter schools refers to `Charter School (Y/N)` = 1 in the table fprm"}
{"sample_id": 9425, "db_id": "california_schools", "final": {"question": "What is the unabbreviated mailing street address of the school with the highest FRPM count for K-12 students?", "sql": "SELECT T2.MailStreet FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.'FRPM Count (K-12)' DESC LIMIT 1", "source_tables": ["frpm", "schools"]}, "evidence": ""}
{"sample_id": 9426, "db_id": "california_schools", "final": {"question": "Please list the phone numbers of the direct charter-funded schools that are opened after 2000/1/1.", "sql": "SELECT T2.Phone FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.'Charter Funding Type' = 'Directly funded' AND T1.'Charter School (Y/N)' = 1 AND T2.OpenDate > '2000-01-01'", "source_tables": ["frpm", "schools"]}, "evidence": "Charter schools refers to `Charter School (Y/N)` = 1 in the frpm"}
{"sample_id": 9427, "db_id": "california_schools", "final": {"question": "How many schools with an average score in Math greater than 400 in the SAT test are exclusively virtual?", "sql": "SELECT COUNT(DISTINCT T2.School) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' AND T1.AvgScrMath > 400", "source_tables": ["satscores", "schools"]}, "evidence": "Exclusively virtual refers to Virtual = 'F'"}
{"sample_id": 9428, "db_id": "california_schools", "final": {"question": "Among the schools with the SAT test takers of over 500, please list the schools that are magnet schools or offer a magnet program.", "sql": "SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Magnet = 1 AND T1.NumTstTakr > 500", "source_tables": ["satscores", "schools"]}, "evidence": "Magnet schools or offer a magnet program means that Magnet = 1"}
{"sample_id": 9429, "db_id": "california_schools", "final": {"question": "What is the phone number of the school that has the highest number of test takers with an SAT score of over 1500?", "sql": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1", "source_tables": ["satscores", "schools"]}, "evidence": ""}
{"sample_id": 9430, "db_id": "california_schools", "final": {"question": "What is the number of SAT test takers of the schools with the highest FRPM count for K-12 students?", "sql": "SELECT NumTstTakr FROM satscores WHERE cds = ( SELECT CDSCode FROM frpm ORDER BY 'FRPM Count (K-12)' DESC LIMIT 1 )", "source_tables": ["satscores", "frpm"]}, "evidence": ""}
{"sample_id": 9431, "db_id": "california_schools", "final": {"question": "Among the schools with the average score in Math over 560 in the SAT test, how many schools are directly charter-funded?", "sql": "SELECT COUNT(T2.'School Code') FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.'Charter Funding Type' = 'Directly funded'", "source_tables": ["satscores", "frpm"]}, "evidence": ""}
{"sample_id": 9432, "db_id": "california_schools", "final": {"question": "For the school with the highest average score in Reading in the SAT test, what is its FRPM count for students aged 5-17?", "sql": "SELECT T2.'FRPM Count (Ages 5-17)' FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrRead DESC LIMIT 1", "source_tables": ["satscores", "frpm"]}, "evidence": ""}
{"sample_id": 9433, "db_id": "california_schools", "final": {"question": "Please list the codes of the schools with a total enrollment of over 500.", "sql": "SELECT T2.CDSCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.'Enrollment (K-12)' + T2.'Enrollment (Ages 5-17)' > 500", "source_tables": ["frpm", "schools"]}, "evidence": "Total enrollment can be represented by `Enrollment (K-12)` + `Enrollment (Ages 5-17)`"}
{"sample_id": 9434, "db_id": "california_schools", "final": {"question": "Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?", "sql": "SELECT MAX(CAST(T1.'Free Meal Count (Ages 5-17)' AS REAL) / T1.'Enrollment (Ages 5-17)') FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.3", "source_tables": ["satscores", "frpm"]}, "evidence": "Excellence rate = NumGE1500 / NumTstTakr; Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`"}
{"sample_id": 9435, "db_id": "california_schools", "final": {"question": "Please list the phone numbers of the schools with the top 3 SAT excellence rate.", "sql": "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC LIMIT 3", "source_tables": ["satscores", "schools"]}, "evidence": "Excellence rate = NumGE1500 / NumTstTakr"}
{"sample_id": 9436, "db_id": "california_schools", "final": {"question": "List the top five schools, by descending order, from the highest to the lowest, the most number of Enrollment (Ages 5-17). Please give their NCES school identification number.", "sql": "SELECT T1.NCESSchool FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.'Enrollment (Ages 5-17)' DESC LIMIT 5", "source_tables": ["frpm", "schools"]}, "evidence": ""}
{"sample_id": 9437, "db_id": "california_schools", "final": {"question": "Which active district has the highest average score in Reading?", "sql": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrRead DESC LIMIT 1", "source_tables": ["satscores", "schools"]}, "evidence": ""}
{"sample_id": 9438, "db_id": "california_schools", "final": {"question": "How many schools in merged Alameda have number of test takers less than 100?", "sql": "SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Merged' AND T2.NumTstTakr < 100 AND T1.County = 'Lake'", "source_tables": ["satscores", "schools"]}, "evidence": ""}
{"sample_id": 9439, "db_id": "california_schools", "final": {"question": "Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers.", "sql": "SELECT CharterNum, AvgScrWrite, RANK() OVER (ORDER BY AvgScrWrite DESC) AS WritingScoreRank FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite > 499 AND CharterNum is not null", "source_tables": ["satscores", "schools"]}, "evidence": "Valid charter number means the number is not null"}
{"sample_id": 9440, "db_id": "california_schools", "final": {"question": "How many schools in Fresno (directly funded) have number of test takers not more than 250?", "sql": "SELECT COUNT(T1.CDSCode) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.'Charter Funding Type' = 'Directly funded' AND T1.'County Name' = 'Fresno' AND T2.NumTstTakr <= 250", "source_tables": ["satscores", "frpm"]}, "evidence": ""}
{"sample_id": 9441, "db_id": "california_schools", "final": {"question": "What is the phone number of the school that has the highest average score in Math?", "sql": "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 1", "source_tables": ["satscores", "schools"]}, "evidence": ""}
{"sample_id": 9442, "db_id": "california_schools", "final": {"question": "How many schools in Amador which the Low Grade is 9 and the High Grade is 12?", "sql": "SELECT COUNT(T1.'School Name') FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Amador' AND T1.'Low Grade' = 9 AND T1.'High Grade' = 12", "source_tables": ["frpm", "schools"]}, "evidence": ""}
{"sample_id": 9443, "db_id": "california_schools", "final": {"question": "In Los Angeles how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12?", "sql": "SELECT COUNT(CDSCode) FROM frpm WHERE 'County Name' = 'Los Angeles' AND 'Free Meal Count (K-12)' > 500 AND 'FRPM Count (K-12)'< 700", "source_tables": ["frpm"]}, "evidence": ""}
{"sample_id": 9444, "db_id": "california_schools", "final": {"question": "Which school in Contra Costa has the highest number of test takers?", "sql": "SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1", "source_tables": ["satscores"]}, "evidence": ""}
{"sample_id": 9445, "db_id": "california_schools", "final": {"question": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.", "sql": "SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.'Enrollment (K-12)' - T2.'Enrollment (Ages 5-17)' > 30", "source_tables": ["frpm", "schools"]}, "evidence": "Diffrence in enrollement = `Enrollment (K-12)` - `Enrollment (Ages 5-17)`"}
{"sample_id": 9446, "db_id": "california_schools", "final": {"question": "Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?", "sql": "SELECT T2.'School Name' FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE CAST(T2.'Free Meal Count (K-12)' AS REAL) / T2.'Enrollment (K-12)' > 0.1 AND T1.NumGE1500 > 0", "source_tables": ["satscores", "frpm"]}, "evidence": "Percent eligible for free meals = Free Meal Count (K-12) / Total (Enrollment (K-12)"}
{"sample_id": 9447, "db_id": "california_schools", "final": {"question": "Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?", "sql": "SELECT T1.sname, T2.'Charter Funding Type' FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.'District Name' LIKE 'Riverside%' GROUP BY T1.sname, T2.'Charter Funding Type' HAVING CAST(SUM(T1.AvgScrMath) AS REAL) / COUNT(T1.cds) > 400", "source_tables": ["satscores", "frpm"]}, "evidence": "Average of average math = sum(average math scores) / count(schools)."}
{"sample_id": 9448, "db_id": "california_schools", "final": {"question": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?", "sql": "SELECT T1.'School Name', T2.Street, T2.City, T2.State, T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.'Free Meal Count (Ages 5-17)' > 800 AND T1.'School Type' = 'High Schools (Public)'", "source_tables": ["frpm", "schools"]}, "evidence": "Full communication address should include Street, City, State and zip code if any."}
{"sample_id": 9449, "db_id": "california_schools", "final": {"question": "What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.", "sql": "SELECT T2.School, T1.AvgScrWrite, T2.Phone FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.CDSCode = T1.cds WHERE strftime('%Y', T2.OpenDate) > '1991' OR strftime('%Y', T2.ClosedDate) < '2000'", "source_tables": ["satscores", "schools"]}, "evidence": "Communication number refers to phone number."}
{"sample_id": 9450, "db_id": "california_schools", "final": {"question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.", "sql": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.'Enrollment (K-12)' - T1.'Enrollment (Ages 5-17)') > (SELECT AVG(T3.'Enrollment (K-12)' - T3.'Enrollment (Ages 5-17)') FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')", "source_tables": ["frpm", "schools"]}, "evidence": "Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`"}
{"sample_id": 9451, "db_id": "california_schools", "final": {"question": "When did the first-through-twelfth-grade school with the largest enrollment open?", "sql": "SELECT T2.OpenDate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.'Enrollment (K-12)' DESC LIMIT 1", "source_tables": ["frpm", "schools"]}, "evidence": "K-12 means First-through-twelfth-grade"}
{"sample_id": 9452, "db_id": "california_schools", "final": {"question": "Which cities have the top 5 lowest enrollment number for students in grades 1 through 12?", "sql": "SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode GROUP BY T2.City ORDER BY SUM(T1.'Enrollment (K-12)') ASC LIMIT 5", "source_tables": ["frpm", "schools"]}, "evidence": "K-12 refers to students in grades 1 through 12."}
{"sample_id": 9453, "db_id": "california_schools", "final": {"question": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?", "sql": "SELECT CAST('Free Meal Count (K-12)' AS REAL) / 'Enrollment (K-12)' FROM frpm ORDER BY 'Enrollment (K-12)' DESC LIMIT 9, 2", "source_tables": ["frpm"]}, "evidence": "K-12 refers to students in grades 1 through 12; Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`"}
{"sample_id": 9454, "db_id": "california_schools", "final": {"question": "What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?", "sql": "SELECT CAST(T1.'FRPM Count (K-12)' AS REAL) / T1.'Enrollment (K-12)' FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.SOC = 66 ORDER BY T1.'FRPM Count (K-12)' DESC LIMIT 5", "source_tables": ["frpm", "schools"]}, "evidence": "grades 1-12 means K-12; Eligible free or reduced price meal rate for K-12 = `FRPM Count (K-12)` / `Enrollment (K-12)`"}
{"sample_id": 9455, "db_id": "california_schools", "final": {"question": "If there are any, what are the websites address of the schools with a free meal count of 1,900-2,000 to students aged 5-17? Include the name of the school.", "sql": "SELECT T2.Website, T1.'School Name' FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.'Free Meal Count (Ages 5-17)' BETWEEN 1900 AND 2000 AND T2.Website IS NOT NULL", "source_tables": ["frpm", "schools"]}, "evidence": ""}
{"sample_id": 9456, "db_id": "california_schools", "final": {"question": "What is the free rate for students between the ages of 5 and 17 at the school run by Kacey Gibson?", "sql": "SELECT CAST(T2.'Free Meal Count (Ages 5-17)' AS REAL) / T2.'Enrollment (Ages 5-17)' FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.AdmFName1 = 'Kacey' AND T1.AdmLName1 = 'Gibson'", "source_tables": ["frpm", "schools"]}, "evidence": "Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`"}
{"sample_id": 9457, "db_id": "california_schools", "final": {"question": "What is the administrator's email address of the chartered school with the fewest students enrolled in grades 1 through 12?", "sql": "SELECT T2.AdmEmail1 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.'Charter School (Y/N)' = 1 ORDER BY T1.'Enrollment (K-12)' ASC LIMIT 1", "source_tables": ["frpm", "schools"]}, "evidence": "Charted school means `Charter School (Y/N)` = 1 in the table frpm; Students enrolled in grades 1 through 12 refers to `Enrollment (K-12)`"}
{"sample_id": 9458, "db_id": "california_schools", "final": {"question": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names.", "sql": "SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1", "source_tables": ["satscores", "schools"]}, "evidence": "full name means first name, last name; There are at most 3 administrators for each school; SAT Scores are greater or equal to 1500 refers to NumGE1500"}
{"sample_id": 9459, "db_id": "california_schools", "final": {"question": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.", "sql": "SELECT T2.Street, T2.City, T2.State, T2.Zip FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr ASC LIMIT 1", "source_tables": ["satscores", "schools"]}, "evidence": "Execellence Rate = NumGE1500 / NumTstTakr; complete address has Street, City, State, Zip code"}
{"sample_id": 9460, "db_id": "california_schools", "final": {"question": "What are the webpages for the Los Angeles County school that has between 2,000 and 3,000 test takers?", "sql": "SELECT T2.Website FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr BETWEEN 2000 AND 3000 AND T2.County = 'Los Angeles'", "source_tables": ["satscores", "schools"]}, "evidence": ""}
{"sample_id": 9461, "db_id": "california_schools", "final": {"question": "What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?", "sql": "SELECT AVG(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE strftime('%Y', T2.OpenDate) = '1980' AND T2.County = 'Fresno'", "source_tables": ["satscores", "schools"]}, "evidence": "between 1/1/1980 and 12/31/1980 means the year = 1980"}
{"sample_id": 9462, "db_id": "california_schools", "final": {"question": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?", "sql": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1", "source_tables": ["satscores", "schools"]}, "evidence": "Fresno Unified is a name of district;"}
{"sample_id": 9463, "db_id": "california_schools", "final": {"question": "List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.", "sql": "SELECT School FROM (SELECT T2.School,T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ) ranked_schools WHERE rnk <= 5", "source_tables": ["satscores", "schools"]}, "evidence": "Exclusively virtual refers to Virtual = 'F'; respective counties means PARTITION BY County"}
{"sample_id": 9464, "db_id": "california_schools", "final": {"question": "What is the type of education offered in the school who scored the highest average in Math?", "sql": "SELECT T2.EdOpsName FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1", "source_tables": ["satscores", "schools"]}, "evidence": ""}
{"sample_id": 9465, "db_id": "california_schools", "final": {"question": "What is the average math score of the school with the lowest average score for all subjects, and in which county is it located?", "sql": "SELECT T1.AvgScrMath, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite ASC LIMIT 1", "source_tables": ["satscores", "schools"]}, "evidence": "Average score for all subjects can be computed by AvgScrMath + AvgScrRead + AvgScrWrite"}
{"sample_id": 9466, "db_id": "california_schools", "final": {"question": "What is the average writing score of the school who has the highest number of test takers whose total SAT sscores are greater or equal to 1500? Indicate the city to where the school is situated.", "sql": "SELECT T1.AvgScrWrite, T2.City FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1", "source_tables": ["satscores", "schools"]}, "evidence": ""}
{"sample_id": 9467, "db_id": "california_schools", "final": {"question": "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores.", "sql": "SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'", "source_tables": ["satscores", "schools"]}, "evidence": "Usually, administrators manage the school stuff."}
{"sample_id": 9468, "db_id": "california_schools", "final": {"question": "Which state special schools have the highest number of enrollees from grades 1 through 12?", "sql": "SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 ORDER BY T1.'Enrollment (K-12)' DESC LIMIT 1", "source_tables": ["frpm", "schools"]}, "evidence": "State Special Schools refers to DOC = 31; Grades 1 through 12 means K-12"}
{"sample_id": 9469, "db_id": "california_schools", "final": {"question": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?", "sql": "SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 52 AND County = 'Alameda' AND strftime('%Y', OpenDate) = '1980'", "source_tables": ["schools"]}, "evidence": "Elementary School District refers to DOC = 52; Monthly average number of schools that opened in 1980 = count(schools that opened in 1980) / 12"}
{"sample_id": 9470, "db_id": "california_schools", "final": {"question": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?", "sql": "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'", "source_tables": ["schools"]}, "evidence": "Elementary School District refers to DOC = 52; Unified School District refers to DOC = 54."}
{"sample_id": 9471, "db_id": "california_schools", "final": {"question": "Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date.", "sql": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL", "source_tables": ["schools"]}, "evidence": "Closure date and closed date are synonyms; 'Closed' was mentioned in schools.StatusType."}
{"sample_id": 9472, "db_id": "california_schools", "final": {"question": "What is the postal street address for the school with the 7th highest Math average? Indicate the school's name.", "sql": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 6, 1", "source_tables": ["satscores", "schools"]}, "evidence": "Postal street and mailing street are synonyms."}
{"sample_id": 9473, "db_id": "california_schools", "final": {"question": "In which mailing street address can you find the school that has the lowest average score in reading? Also give the school's name.", "sql": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1", "source_tables": ["satscores", "schools"]}, "evidence": ""}
{"sample_id": 9474, "db_id": "california_schools", "final": {"question": "What is the total number of schools whose total SAT scores are greater or equal to 1500 whose mailing city is Lakeport?", "sql": "SELECT COUNT(T1.cds) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Lakeport' AND (T1.AvgScrRead + T1.AvgScrMath + T1.AvgScrWrite) >= 1500", "source_tables": ["satscores", "schools"]}, "evidence": "Total SAT scores can be computed by AvgScrRead + AvgScrMath + AvgScrWrite"}
{"sample_id": 9511, "db_id": "financial", "final": {"question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?", "sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'east Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'", "source_tables": ["district", "account"]}, "evidence": "A3 contains the data of region; 'POPLATEK PO OBRATU' represents for 'issuance after transaction'."}
{"sample_id": 9512, "db_id": "financial", "final": {"question": "How many accounts who have region in Prague are eligible for loans?", "sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'Prague'", "source_tables": ["loan", "district", "account"]}, "evidence": "A3 contains the data of region"}
{"sample_id": 9513, "db_id": "financial", "final": {"question": "The average unemployment ratio of 1995 and 1996, which one has higher percentage?", "sql": "SELECT DISTINCT IIF(AVG(A13) > AVG(A12), '1996', '1995') FROM district", "source_tables": ["district"]}, "evidence": "A12 refers to unemploymant rate 1995; A13 refers to unemploymant rate 1996"}
{"sample_id": 9514, "db_id": "financial", "final": {"question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?", "sql": "SELECT COUNT(DISTINCT T2.district_id)  FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A11 BETWEEN 6000 AND 10000", "source_tables": ["district", "client"]}, "evidence": "A11 refers to average salary; Female mapps to gender = 'F'"}
{"sample_id": 9515, "db_id": "financial", "final": {"question": "How many male customers who are living in North Bohemia have average salary greater than 8000?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000", "source_tables": ["district", "client"]}, "evidence": "Male means that gender = 'M'; A3 refers to region; A11 pertains to average salary."}
{"sample_id": 9516, "db_id": "financial", "final": {"question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?", "sql": "SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1", "source_tables": ["disp", "district", "client", "account"]}, "evidence": "Female means gender = 'F'; A11 refers to average salary; Gap = highest average salary - lowest average salary; If the person A's birthdate > B's birthdate, it means that person B is order than person A."}
{"sample_id": 9517, "db_id": "financial", "final": {"question": "List out the account numbers of clients who are youngest and have highest average salary?", "sql": "SELECT T1.account_id  FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 on T4.district_id = T1.district_id WHERE T2.client_id = ( SELECT client_id FROM client ORDER BY birth_date DESC LIMIT 1) GROUP BY T4.A11, T1.account_id", "source_tables": ["disp", "district", "client", "account"]}, "evidence": "If the person A's birthdate < B's birthdate, it means that person B is younger than person A; A11 refers to average salary"}
{"sample_id": 9518, "db_id": "financial", "final": {"question": "How many customers who choose statement of weekly issuance are Owner?", "sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK TYDNE'", "source_tables": ["disp", "account"]}, "evidence": "'POPLATEK TYDNE' stands for weekly issuance"}
{"sample_id": 9519, "db_id": "financial", "final": {"question": "List out the id number of client who choose statement of issuance after transaction are Disponent?", "sql": "SELECT T2.client_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'DISPONENT'", "source_tables": ["disp", "account"]}, "evidence": "'POPLATEK PO OBRATU' stands for issuance after transaction"}
{"sample_id": 9520, "db_id": "financial", "final": {"question": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.", "sql": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1", "source_tables": ["loan", "account"]}, "evidence": "'POPLATEK TYDNE' stands for weekly issuance"}
{"sample_id": 9521, "db_id": "financial", "final": {"question": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.", "sql": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) = '1993' AND T1.duration > 12 ORDER BY T1.amount DESC LIMIT 1", "source_tables": ["loan", "account"]}, "evidence": "Loan validity more than 12 months refers to duration > 12"}
{"sample_id": 9522, "db_id": "financial", "final": {"question": "Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov?", "sql": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND STRFTIME('%Y', T2.birth_date) < '1950' AND T1.A2 = 'Sokolov'", "source_tables": ["district", "client"]}, "evidence": "Customers refer to clients; Female refers to gender = 'F'; Names of districts appear in column A2"}
{"sample_id": 9523, "db_id": "financial", "final": {"question": "List out the accounts who have the earliest trading date in 1995 ?", "sql": "SELECT account_id FROM trans WHERE STRFTIME('%Y', date) = '1995' ORDER BY date ASC LIMIT 1", "source_tables": ["trans"]}, "evidence": ""}
{"sample_id": 9524, "db_id": "financial", "final": {"question": "State different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD", "sql": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) < '1997' AND T1.amount > 3000", "source_tables": ["trans", "account"]}, "evidence": ""}
{"sample_id": 9525, "db_id": "financial", "final": {"question": "Which client issued his/her card in 1994/3/3, give his/her client id.", "sql": "SELECT T2.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'", "source_tables": ["disp", "client", "card"]}, "evidence": ""}
{"sample_id": 9526, "db_id": "financial", "final": {"question": "The transaction of 840 USD happened in 1998/10/14, when was this account opened?", "sql": "SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'", "source_tables": ["trans", "account"]}, "evidence": ""}
{"sample_id": 9527, "db_id": "financial", "final": {"question": "There was a loan approved in 1994/8/25, where was that account opened, give the district Id of the branch.", "sql": "SELECT T1.district_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25'", "source_tables": ["loan", "account"]}, "evidence": ""}
{"sample_id": 9528, "db_id": "financial", "final": {"question": "What is the biggest amount of transaction that the client whose card was opened in 1996/10/21 made?", "sql": "SELECT T4.amount FROM card AS T1 JOIN disp AS T2 ON T1.disp_id = T2.disp_id JOIN account AS T3 on T2.account_id = T3.account_id JOIN trans AS T4 on T3.account_id = T4.account_id WHERE T1.issued = '1996-10-21' ORDER BY T4.amount DESC LIMIT 1", "source_tables": ["disp", "trans", "card", "account"]}, "evidence": ""}
{"sample_id": 9529, "db_id": "financial", "final": {"question": "What is the gender of the oldest client who opened his/her account in the highest average salary branch?", "sql": "SELECT T2.gender FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id ORDER BY T1.A11 DESC, T2.birth_date ASC LIMIT 1", "source_tables": ["district", "client"]}, "evidence": "Earlier birthdate refers to older age; A11 refers to average salary"}
{"sample_id": 9530, "db_id": "financial", "final": {"question": "For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account?", "sql": "SELECT T3.amount FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id ORDER BY T1.amount DESC, T3.date ASC LIMIT 1", "source_tables": ["loan", "trans", "account"]}, "evidence": ""}
{"sample_id": 9531, "db_id": "financial", "final": {"question": "How many clients opened their accounts in Jesenik branch were women?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A2 = 'Jesenik'", "source_tables": ["district", "client"]}, "evidence": "A2 has region names; Woman and female share the same meaning; female refers to gender = 'F'"}
{"sample_id": 9532, "db_id": "financial", "final": {"question": "What is the disposition id of the client who made 5100 USD transaction in 1998/9/2?", "sql": "SELECT T1.disp_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.date='1997-08-20' AND T3.amount = 5100", "source_tables": ["disp", "trans", "account"]}, "evidence": ""}
{"sample_id": 9533, "db_id": "financial", "final": {"question": "How many accounts were opened in Litomerice in 1996?", "sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1996' AND T1.A2 = 'Litomerice'", "source_tables": ["district", "account"]}, "evidence": "A2 refers to district name; Litomerice is one of district names."}
{"sample_id": 9534, "db_id": "financial", "final": {"question": "For the female client who was born in 1976/1/29, which district did she opened her account?", "sql": "SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F'", "source_tables": ["district", "client"]}, "evidence": "Female refers to gender = 'F'; A2 refers to district names"}
{"sample_id": 9535, "db_id": "financial", "final": {"question": "For the client who applied 98832 USD loan in 1996/1/3, when was his/her birthday?", "sql": "SELECT T4.birth_date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832", "source_tables": ["disp", "loan", "client", "account"]}, "evidence": ""}
{"sample_id": 9536, "db_id": "financial", "final": {"question": "For the first client who opened his/her account in Prague, what is his/her account ID?", "sql": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1", "source_tables": ["district", "account"]}, "evidence": "A3 stands for region names"}
{"sample_id": 9537, "db_id": "financial", "final": {"question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?", "sql": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1", "source_tables": ["district", "client"]}, "evidence": "Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants."}
{"sample_id": 9538, "db_id": "financial", "final": {"question": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?", "sql": "SELECT CAST((SUM(IIF(T3.date = '1998-12-27', T3.balance, 0)) - SUM(IIF(T3.date = '1993-03-22', T3.balance, 0))) AS REAL) * 100 / SUM(IIF(T3.date = '1993-03-22', T3.balance, 0)) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'", "source_tables": ["loan", "trans", "account"]}, "evidence": "Increase rate of his/her account balance = [(balance of date A - balance of date B) / balance of Date B] * 100%"}
{"sample_id": 9539, "db_id": "financial", "final": {"question": "What is the percentage of loan amount that has been fully paid with no issue.", "sql": "SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100) / SUM(amount) FROM loan", "source_tables": ["loan"]}, "evidence": "Loan paid with no issue means contract finished, no problems; status = 'A' means contract finished, no problems; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100%"}
{"sample_id": 9540, "db_id": "financial", "final": {"question": "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.", "sql": "SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(account_id) FROM loan WHERE amount < 100000", "source_tables": ["loan"]}, "evidence": "Status = 'C' stands for running contract, ok so far; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100."}
{"sample_id": 9541, "db_id": "financial", "final": {"question": "For accounts in 1993 with statement issued after transaction, list the account ID, district name and district region.", "sql": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND STRFTIME('%Y', T1.date)= '1993'", "source_tables": ["district", "account"]}, "evidence": "Records about district names could be found in A2; A3 contains the information about regions. 'POPLATEK PO OBRATU' stands for issuance after transaction"}
{"sample_id": 9542, "db_id": "financial", "final": {"question": "From Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance.", "sql": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'", "source_tables": ["district", "account"]}, "evidence": "Accounts holder refers to the person who own this account."}
{"sample_id": 9543, "db_id": "financial", "final": {"question": "List account ID and account opening date for accounts from 'Prachatice'.", "sql": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'", "source_tables": ["district", "account"]}, "evidence": "A2 refers to the names of districts."}
{"sample_id": 9544, "db_id": "financial", "final": {"question": "State the district and region for loan ID '4990'.", "sql": "SELECT T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.loan_id = 4990", "source_tables": ["loan", "district", "account"]}, "evidence": "A2, A3 contains the information about district and region respectively."}
{"sample_id": 9545, "db_id": "financial", "final": {"question": "Provide the account ID, district and region for loan amount greater than USD300,000.", "sql": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000", "source_tables": ["loan", "district", "account"]}, "evidence": "A2 contains district names and A3 contains region names."}
{"sample_id": 9546, "db_id": "financial", "final": {"question": "List the loan ID, district and average salary for loan with duration of 60 months.", "sql": "SELECT T3.loan_id, T2.A2, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60", "source_tables": ["loan", "district", "account"]}, "evidence": "A3 refers to regions; A11 refers to average salary"}
{"sample_id": 9547, "db_id": "financial", "final": {"question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.", "sql": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'", "source_tables": ["loan", "district", "account"]}, "evidence": "Unemployment increment rate in percentage = [(unemployment rate 2016 - unemployment rate 2015) / unemployment rate 2015] * 100; unemployment rate 2015 appears in the A12; unemployment rate 2016 appears in the A13; Loan contracts which are still running where client are in debt can be presented as status = 'D'"}
{"sample_id": 9548, "db_id": "financial", "final": {"question": "Calculate the percentage of account from 'Decin' district for all accounts are opened in 1993.", "sql": "SELECT CAST(SUM(T1.A2 = 'Decin') AS REAL) * 100 / COUNT(account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1993'", "source_tables": ["district", "account"]}, "evidence": "A2 contains the information about district."}
{"sample_id": 9549, "db_id": "financial", "final": {"question": "List the account IDs with monthly issuance of statements.", "sql": "SELECT account_id FROM account WHERE Frequency = 'POPLATEK MESICNE'", "source_tables": ["account"]}, "evidence": "'POPLATEK MESICNE' stands for monthly issuance"}
{"sample_id": 9550, "db_id": "financial", "final": {"question": "List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.", "sql": "SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 9", "source_tables": ["district", "client"]}, "evidence": "A2 refers to districts; Female refers to gender = 'F'"}
{"sample_id": 9551, "db_id": "financial", "final": {"question": "Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?", "sql": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date LIKE '1996-01%' ORDER BY A2 ASC LIMIT 10", "source_tables": ["trans", "district", "account"]}, "evidence": "Non-credit card withdraws refers to type = 'VYDAJ'; January 1996 can be found by date LIKE '1996-01%' in the database; A2 means district names"}
{"sample_id": 9552, "db_id": "financial", "final": {"question": "How many of the account holders in South Bohemia still do not own credit cards?", "sql": "SELECT COUNT(T3.account_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id WHERE T1.A3 = 'south Bohemia' AND T3.type != 'OWNER'", "source_tables": ["disp", "district", "client"]}, "evidence": "A3 contains the region names; South Bohemia is one of region names."}
{"sample_id": 9553, "db_id": "financial", "final": {"question": "Which district has highest active loan?", "sql": "SELECT T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status IN ('C', 'D') GROUP BY T2.A3 ORDER BY SUM(T3.amount) DESC LIMIT 1", "source_tables": ["loan", "district", "account"]}, "evidence": "A3 refers to district names; Active loan refers to running contracts; Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt"}
{"sample_id": 9554, "db_id": "financial", "final": {"question": "What is the average loan amount by male borrowers?", "sql": "SELECT AVG(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M'", "source_tables": ["disp", "loan", "client", "account"]}, "evidence": "Male refers to gender = 'M'"}
{"sample_id": 9555, "db_id": "financial", "final": {"question": "In 1996, which districts have the highest unemployment rate? List their branch location and district name.", "sql": "SELECT district_id, A2 FROM district ORDER BY A13 DESC LIMIT 1", "source_tables": ["district"]}, "evidence": "A2 refers to district names; A13 refers to unemploymant rate in 1996"}
{"sample_id": 9556, "db_id": "financial", "final": {"question": "In the branch where the largest number of crimes were committed in 1996, how many accounts were opened?", "sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id GROUP BY T1.A16 ORDER BY T1.A16 DESC LIMIT 1", "source_tables": ["district", "account"]}, "evidence": "A16 stands for no. of committed crimes 1996"}
{"sample_id": 9557, "db_id": "financial", "final": {"question": "After making a credit card withdrawal, how many account/s with monthly issuance has a negative balance?", "sql": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.balance < 0 AND T1.operation = 'VYBER KARTOU' AND T2.frequency = 'POPLATEK MESICNE'", "source_tables": ["trans", "account"]}, "evidence": "Negative balance means balance < 0; Operation = 'VYBER KARTOU' stands for credit card withdraw. Frequency = 'POPLATEK MESICNE' stands for monthly issurance"}
{"sample_id": 9558, "db_id": "financial", "final": {"question": "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?", "sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount >= 250000", "source_tables": ["loan", "account"]}, "evidence": "Frequency = 'POPLATEK MESICNE' stands for monthly issurance"}
{"sample_id": 9559, "db_id": "financial", "final": {"question": "How many accounts have running contracts in Branch location 1?", "sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')", "source_tables": ["loan", "district", "account"]}, "evidence": "Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt"}
{"sample_id": 9560, "db_id": "financial", "final": {"question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)", "source_tables": ["district", "client"]}, "evidence": "Male refers to gender = 'M'; A15 stands for no. of commited crimes 1995"}
{"sample_id": 9561, "db_id": "financial", "final": {"question": "How many high-level credit cards have \"OWNER\" type of disposition?", "sql": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'OWNER'", "source_tables": ["disp", "card"]}, "evidence": "High-level credit cards refers to the cards with the gold type."}
{"sample_id": 9562, "db_id": "financial", "final": {"question": "How many accounts are there in the district of \"Pisek\"?", "sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'", "source_tables": ["district", "account"]}, "evidence": "A2 refers to district name"}
{"sample_id": 9563, "db_id": "financial", "final": {"question": "Which districts have transactions greater than USS$10,000 in 1997?", "sql": "SELECT T1.district_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '1997' GROUP BY T1.district_id HAVING SUM(T3.amount) > 10000", "source_tables": ["trans", "district", "account"]}, "evidence": ""}
{"sample_id": 9564, "db_id": "financial", "final": {"question": "Which accounts placed orders for household payment in Pisek?", "sql": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek'", "source_tables": ["trans", "district", "account"]}, "evidence": "k_symbol = 'SIPO' refers to household payment"}
{"sample_id": 9565, "db_id": "financial", "final": {"question": "What are the accounts that have gold credit cards?", "sql": "SELECT T2.account_id FROM disp AS T2  INNER JOIN card AS T1 ON T1.disp_id = T2.disp_id  WHERE T1.type = 'gold'", "source_tables": ["disp", "card"]}, "evidence": ""}
{"sample_id": 9566, "db_id": "financial", "final": {"question": "How much is the average amount in credit card made by account holders in a month, in year 2021?", "sql": "SELECT AVG(T4.amount) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE STRFTIME('%Y', T4.date) = '1998' AND T4.operation = 'VYBER KARTOU'", "source_tables": ["disp", "trans", "card", "account"]}, "evidence": "Operation = 'VYBER KARTOU' refers to credit card withdrawn"}
{"sample_id": 9567, "db_id": "financial", "final": {"question": "Who are the account holder identification numbers whose who have transactions on the credit card with the amount is less than the average, in 1998?", "sql": "SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1998' AND T1.operation = 'VYBER KARTOU' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE STRFTIME('%Y', date) = '1998')", "source_tables": ["trans", "account"]}, "evidence": "Operation = 'VYBER KARTOU' refers to credit card withdrawal"}
{"sample_id": 9568, "db_id": "financial", "final": {"question": "Who are the female account holders who own credit cards and also have loans?", "sql": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T5 ON T2.account_id = T5.account_id INNER JOIN loan AS T3 ON T5.account_id = T3.account_id INNER JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T1.gender = 'F'", "source_tables": ["disp", "card", "loan", "client", "account"]}, "evidence": "Female refers to gender = 'F'"}
{"sample_id": 9569, "db_id": "financial", "final": {"question": "How many female clients' accounts are in the region of South Bohemia?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 = 'south Bohemia'", "source_tables": ["district", "client"]}, "evidence": "Female refers to gender = 'F'; A3 contains the region 'south Bohemia'"}
{"sample_id": 9570, "db_id": "financial", "final": {"question": "Please list the accounts whose district is Tabor that are eligible for loans.", "sql": "SELECT T2.account_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'OWNER' AND T1.A2 = 'Tabor'", "source_tables": ["disp", "district", "account"]}, "evidence": "District refers to column A2; when the account type = 'OWNER', it's eligible for loans"}
{"sample_id": 9571, "db_id": "financial", "final": {"question": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.", "sql": "SELECT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type != 'OWNER' AND T1.A11 BETWEEN 8000 AND 9000", "source_tables": ["disp", "district", "account"]}, "evidence": "A11 represents the average salary; Salary and income share the similar meanings; when the account type = 'OWNER', it's eligible for loans"}
{"sample_id": 9572, "db_id": "financial", "final": {"question": "How many accounts in North Bohemia has made a transaction with the partner's bank being AB?", "sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.bank = 'AB' AND T1.A3 = 'north Bohemia'", "source_tables": ["trans", "district", "account"]}, "evidence": "A3 contains the region names; North Bohemia is a region."}
{"sample_id": 9573, "db_id": "financial", "final": {"question": "Please list the name of the districts with accounts that made withdrawal transactions.", "sql": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ'", "source_tables": ["trans", "district", "account"]}, "evidence": "A2 refers to district name; type = 'VYDAJ' stands for withdrawal transactions"}
{"sample_id": 9617, "db_id": "toxicology", "final": {"question": "What is the most common bond type?", "sql": "SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T", "source_tables": ["bond"]}, "evidence": "most common bond type refers MAX(COUNT(bond_type))"}
{"sample_id": 9618, "db_id": "toxicology", "final": {"question": "In the non-carcinogenic molecules, how many contain chlorine atoms?", "sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '-'", "source_tables": ["atom", "molecule"]}, "evidence": "non-carcinogenic molecules refers to label = '-'; chlorine atoms refers to element = 'cl'"}
{"sample_id": 9619, "db_id": "toxicology", "final": {"question": "Calculate the average number of oxygen atoms in single-bonded molecules.", "sql": "SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'o'  GROUP BY T1.molecule_id) AS oxygen_counts", "source_tables": ["bond", "atom"]}, "evidence": "single-bonded molecules refers to bond_type = '-' ; average number of oxygen atom = AVG(element = 'o')"}
{"sample_id": 9620, "db_id": "toxicology", "final": {"question": "On average how many carcinogenic molecules are single bonded?", "sql": "SELECT AVG(single_bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS single_bond_count FROM bond AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T3.label = '+' GROUP BY T3.molecule_id) AS subquery", "source_tables": ["bond", "atom", "molecule"]}, "evidence": "carcinogenic molecules refers to label = '+'; single-bonded refers to bond_type = '-'; average = DIVIDE(SUM(bond_type = '-'), COUNT(atom_id))"}
{"sample_id": 9621, "db_id": "toxicology", "final": {"question": "In the molecule containing sodium atoms, how many are non-carcinogenic?", "sql": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'", "source_tables": ["molecule", "atom"]}, "evidence": "non-carcinogenic refers to label = '-'; sodium atoms refers to element = 'na'"}
{"sample_id": 9622, "db_id": "toxicology", "final": {"question": "Find the triple-bonded molecules which are carcinogenic.", "sql": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'", "source_tables": ["bond", "molecule"]}, "evidence": "triple-bonded molecules refers to bond_type = '#'; carcinogenic refers to label = '+'"}
{"sample_id": 9623, "db_id": "toxicology", "final": {"question": "What is the percentage of carbon in double-bond molecules?", "sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='", "source_tables": ["bond", "atom"]}, "evidence": "carbon refers to element = 'c'; double-bond molecules refers to bond_type = '='; percentage = DIVIDE(SUM(element = 'c'), COUNT(atom_id))"}
{"sample_id": 9624, "db_id": "toxicology", "final": {"question": "How many triple type bonds are there?", "sql": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '#'", "source_tables": ["bond"]}, "evidence": "triple type bonds refers to bond_type = '#'"}
{"sample_id": 9625, "db_id": "toxicology", "final": {"question": "In how many atoms is there no bromine?", "sql": "SELECT COUNT(DISTINCT T.atom_id) FROM atom AS T WHERE T.element <> 'br'", "source_tables": ["atom"]}, "evidence": "atoms with no bromine refers to element ! = 'br'"}
{"sample_id": 9626, "db_id": "toxicology", "final": {"question": "Of the first 100 molecules in number order, how many are carcinogenic?", "sql": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND T.label = '+'", "source_tables": ["molecule"]}, "evidence": "first 100 molecules in number order refers to molecule_id between 'TR000' and 'TR099'; label = '+' means molecules are carcinogenic"}
{"sample_id": 9627, "db_id": "toxicology", "final": {"question": "Identify by their ID the molecules in which there is carbon.", "sql": "SELECT T.molecule_id FROM atom AS T WHERE T.element = 'c'", "source_tables": ["atom"]}, "evidence": "carbon refers to element = 'c';"}
{"sample_id": 9628, "db_id": "toxicology", "final": {"question": "What elements are in the TR004_8_9 bond atoms?", "sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'", "source_tables": ["atom", "connected"]}, "evidence": "TR004_8_9 bond atoms refers to bond_id = 'TR004_8_9';"}
{"sample_id": 9629, "db_id": "toxicology", "final": {"question": "What elements are in a double type bond?", "sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='", "source_tables": ["bond", "atom", "connected"]}, "evidence": "double type bond refers to bond_type = '=';"}
{"sample_id": 9630, "db_id": "toxicology", "final": {"question": "Which type of label is the most numerous in atoms with hydrogen?", "sql": "SELECT T.label FROM ( SELECT T2.label, COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1 ) t", "source_tables": ["molecule", "atom"]}, "evidence": "with hydrogen refers to element = 'h'; label most numerous in atoms refers to MAX(COUNT(label)); "}
{"sample_id": 9631, "db_id": "toxicology", "final": {"question": "Chlorine is in what type of bond?", "sql": "SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'cl'", "source_tables": ["bond", "atom", "connected"]}, "evidence": "type of bond refers to bond_type; chlorine refers to element = 'cl'"}
{"sample_id": 9632, "db_id": "toxicology", "final": {"question": "What atoms are connected in single type bonds?", "sql": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'", "source_tables": ["bond", "connected"]}, "evidence": "single type bond refers to bond_type = '-';"}
{"sample_id": 9633, "db_id": "toxicology", "final": {"question": "Indicate which atoms are connected in non-carcinogenic type molecules.", "sql": "SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.label = '-'", "source_tables": ["molecule", "atom", "connected"]}, "evidence": "label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9634, "db_id": "toxicology", "final": {"question": "Which element is the least numerous in non-carcinogenic molecules?", "sql": "SELECT T.element FROM (SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) ASC LIMIT 1) t", "source_tables": ["molecule", "atom"]}, "evidence": "label = '-' means molecules are non-carcinogenic; least numerous refers to MIN(COUNT(element));"}
{"sample_id": 9635, "db_id": "toxicology", "final": {"question": "What type of bond is there between the atoms TR004_8 and TR004_20?", "sql": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'", "source_tables": ["bond", "connected"]}, "evidence": "type of bond refers to bond_type; between the atoms TR004_8 and TR004_20 refers to atom_id = 'TR004_8' AND atom_id2 = 'TR004_20' OR another way around"}
{"sample_id": 9636, "db_id": "toxicology", "final": {"question": "What type of label is not on molecules with atoms with tin?", "sql": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'", "source_tables": ["molecule", "atom"]}, "evidence": "tin refers to element ! = 'sn'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9637, "db_id": "toxicology", "final": {"question": "How many atoms with iodine and with sulfur type elements are there in single bond molecules?", "sql": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'", "source_tables": ["bond", "atom", "connected"]}, "evidence": "with iodine element refer to element = 'i'; with sulfur element refers to element = 's'; single type bond refers to bond_type = '-'; Should consider the distinct atoms when counting;"}
{"sample_id": 9638, "db_id": "toxicology", "final": {"question": "Identify all connected atoms with a triple bond.", "sql": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'", "source_tables": ["bond", "connected"]}, "evidence": "triple bond refers to bond_type = '#';"}
{"sample_id": 9639, "db_id": "toxicology", "final": {"question": "Identify all the atoms that are connected to the atoms of the TR181 molecule.", "sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T1.molecule_id = 'TR181'", "source_tables": ["atom", "connected"]}, "evidence": "TR181 molecule refers to molecule_id = 'TR181'"}
{"sample_id": 9640, "db_id": "toxicology", "final": {"question": "What percentage of carcinogenic-type molecules does not contain fluorine?", "sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'", "source_tables": ["molecule", "atom"]}, "evidence": "label = '+' mean molecules are carcinogenic; contain fluorine refers to element = 'f'; percentage = DIVIDE(SUM(element = 'f') * 100, COUNT(molecule_id)) where label = '+'; Should consider the distinct atoms when counting;"}
{"sample_id": 9641, "db_id": "toxicology", "final": {"question": "What is the percentage of carcinogenic molecules in triple type bonds?", "sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'", "source_tables": ["molecule", "atom", "bond"]}, "evidence": "label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(bond_type = '#') * 100, COUNT(bond_id)) as percent where label = '+'"}
{"sample_id": 9642, "db_id": "toxicology", "final": {"question": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.", "sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3", "source_tables": ["atom"]}, "evidence": "TR000 is the molecule id;"}
{"sample_id": 9643, "db_id": "toxicology", "final": {"question": "What are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_2_6?", "sql": "SELECT SUBSTR(T.bond_id, 1, 7) AS atom_id1 , T.molecule_id || SUBSTR(T.bond_id, 8, 2) AS atom_id2 FROM bond AS T WHERE T.molecule_id = 'TR001' AND T.bond_id = 'TR001_2_6'", "source_tables": ["bond"]}, "evidence": "TR001 is the molecule id; TR001_2_6 is the bond id"}
{"sample_id": 9644, "db_id": "toxicology", "final": {"question": "What is the difference between the number of molecules that are carcinogenic and those that are not?", "sql": "SELECT COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) - COUNT(CASE WHEN T.label = '-' THEN T.molecule_id ELSE NULL END) AS diff_car_notcar FROM molecule t", "source_tables": ["molecule"]}, "evidence": "label = '+' means molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; difference = SUBTRACT(SUM(label = '+'), SUM(label = '-'))"}
{"sample_id": 9645, "db_id": "toxicology", "final": {"question": "What are the atom IDs of the bond TR000_2_5?", "sql": "SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_5'", "source_tables": ["connected"]}, "evidence": "TR000_2_5 is the bond id"}
{"sample_id": 9646, "db_id": "toxicology", "final": {"question": "What are the bond IDs that have the same atom ID 2 of TR000_2?", "sql": "SELECT T.bond_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'", "source_tables": ["connected"]}, "evidence": "TR000_2 is the atom id; atom ID 2 refers to atom_id2"}
{"sample_id": 9647, "db_id": "toxicology", "final": {"question": "Please list top five molecules that have double bonds in alphabetical order.", "sql": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '=' ORDER BY T.molecule_id LIMIT 5", "source_tables": ["bond"]}, "evidence": "double bond refers to bond_type = ' = ';"}
{"sample_id": 9648, "db_id": "toxicology", "final": {"question": "What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places.", "sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5) FROM bond AS T WHERE T.molecule_id = 'TR008'", "source_tables": ["bond"]}, "evidence": "double bond refers to bond_type = '='; TR008 is the molecule id; percentage = DIVIDE(SUM(bond_type = '='), COUNT(bond_id)) as percent where molecule_id = 'TR008'"}
{"sample_id": 9649, "db_id": "toxicology", "final": {"question": "What is the percentage of molecules that are carcinogenic? Please provide your answer as a percentage with three decimal places.", "sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3) FROM molecule t", "source_tables": ["molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) as percent"}
{"sample_id": 9650, "db_id": "toxicology", "final": {"question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places.", "sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4) FROM atom AS T WHERE T.molecule_id = 'TR206'", "source_tables": ["atom"]}, "evidence": "hydrogen refers to element = 'h'; TR206 is the molecule id; percentage = DIVIDE(SUM(element = 'h'), COUNT(atom_id)) as percent where molecule_id = 'TR206'"}
{"sample_id": 9651, "db_id": "toxicology", "final": {"question": "What is the type of bond that molecule TR000 has when involved in any bonds?", "sql": "SELECT DISTINCT T.bond_type FROM bond AS T WHERE T.molecule_id = 'TR000'", "source_tables": ["bond"]}, "evidence": "type of bond refers to bond_type; TR000 is the molecule id"}
{"sample_id": 9652, "db_id": "toxicology", "final": {"question": "What are the elements of the toxicology and label of molecule TR060?", "sql": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'", "source_tables": ["molecule", "atom"]}, "evidence": "TR060 is the molecule id; "}
{"sample_id": 9653, "db_id": "toxicology", "final": {"question": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?", "sql": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T", "source_tables": ["bond"]}, "evidence": "TR010 is the molecule id; majority of the bond found refers to MAX(COUNT(bond_type)); "}
{"sample_id": 9654, "db_id": "toxicology", "final": {"question": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.", "sql": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3", "source_tables": ["bond", "molecule"]}, "evidence": "label = '-' means molecules are not carcinogenic; single type bond refers to bond_type = '-'; list top three molecules refers to return molecule_id and order by molecule_id;"}
{"sample_id": 9655, "db_id": "toxicology", "final": {"question": "Please list top two bonds that happened with the molecule TR006 in alphabetical order.", "sql": "SELECT DISTINCT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR006' ORDER BY T2.bond_id LIMIT 2", "source_tables": ["atom", "connected"]}, "evidence": "TR006 is the molecule id"}
{"sample_id": 9656, "db_id": "toxicology", "final": {"question": "How many bonds which involved atom 12 does molecule TR009 have?", "sql": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' AND T2.atom_id2 = T1.molecule_id || '_2'", "source_tables": ["bond", "connected"]}, "evidence": "TR009 is the molecule id;  involved atom 12 refers to atom_id = 'TR009_12' or atom_id2 = 'TR009_12'"}
{"sample_id": 9657, "db_id": "toxicology", "final": {"question": "How many molecules are carcinogenic and have the bromine element?", "sql": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'br'", "source_tables": ["molecule", "atom"]}, "evidence": "label = '+' mean molecules are carcinogenic; have bromine element refers to element = 'br'"}
{"sample_id": 9658, "db_id": "toxicology", "final": {"question": "What are the bond type and the atoms of the bond ID of TR001_6_9?", "sql": "SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR001_6_9'", "source_tables": ["bond", "connected"]}, "evidence": "atoms refer to atom_id or atom_id2"}
{"sample_id": 9659, "db_id": "toxicology", "final": {"question": "Which molecule does the atom TR001_10 belong to? Please state whether this molecule is carcinogenic or not.", "sql": "SELECT T2.molecule_id , IIF(T2.label = '+', 'YES', 'NO') AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'", "source_tables": ["molecule", "atom"]}, "evidence": "TR001_10 is the atom id; label = '+' mean molecules are carcinogenic"}
{"sample_id": 9660, "db_id": "toxicology", "final": {"question": "How many molecules have a triple bond type?", "sql": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '#'", "source_tables": ["bond"]}, "evidence": "triple bond refers to bond_type = '#';"}
{"sample_id": 9661, "db_id": "toxicology", "final": {"question": "How many connections does the atom 19 have?", "sql": "SELECT COUNT(T.bond_id) FROM connected AS T WHERE SUBSTR(T.atom_id, -2) = '19'", "source_tables": ["connected"]}, "evidence": "connections refers to bond_id; atom 19 refers to atom_id like 'TR%_19';"}
{"sample_id": 9662, "db_id": "toxicology", "final": {"question": "List all the elements of the toxicology of the molecule \"TR004\".", "sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'", "source_tables": ["atom"]}, "evidence": "TR004 is the molecule id;"}
{"sample_id": 9663, "db_id": "toxicology", "final": {"question": "How many of the molecules are not carcinogenic?", "sql": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '-'", "source_tables": ["molecule"]}, "evidence": "label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9664, "db_id": "toxicology", "final": {"question": "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.", "sql": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'", "source_tables": ["molecule", "atom"]}, "evidence": "atoms from 21 to 25 refers to SUBSTR(atom_id, 7, 2) between '21' and '25'; label = '+' mean molecules are carcinogenic"}
{"sample_id": 9665, "db_id": "toxicology", "final": {"question": "What are the bonds that have phosphorus and nitrogen as their atom elements?", "sql": "SELECT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IN ( SELECT T3.bond_id FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'p' ) AND T1.element = 'n'", "source_tables": ["atom", "connected"]}, "evidence": "have phosphorus as atom elements refers to element = 'p'; have nitrogen as atom elements refers to element = 'n'"}
{"sample_id": 9666, "db_id": "toxicology", "final": {"question": "Is the molecule with the most double bonds carcinogenic?", "sql": "SELECT T1.label FROM molecule AS T1 INNER JOIN ( SELECT T.molecule_id, COUNT(T.bond_type) FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id ORDER BY COUNT(T.bond_type) DESC LIMIT 1 ) AS T2 ON T1.molecule_id = T2.molecule_id", "source_tables": ["bond", "molecule"]}, "evidence": "double bond refers to bond_type = ' = '; label = '+' mean molecules are carcinogenic"}
{"sample_id": 9667, "db_id": "toxicology", "final": {"question": "What is the average number of bonds the atoms with the element iodine have?", "sql": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'", "source_tables": ["atom", "connected"]}, "evidence": "atoms with the element iodine refers to element = 'i'; average = DIVIDE(COUND(bond_id), COUNT(atom_id)) where element = 'i'"}
{"sample_id": 9668, "db_id": "toxicology", "final": {"question": "List the bond type and the bond ID of the atom 45.", "sql": "SELECT T1.bond_type, T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T2.atom_id, 7, 2) = '45'", "source_tables": ["bond", "connected"]}, "evidence": "bond ID of atom 45 refers to SUBSTR(atom_id, 7, 2) + 0 = 45; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';"}
{"sample_id": 9669, "db_id": "toxicology", "final": {"question": "List all the elements of atoms that can not bond with any other atoms.", "sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.element NOT IN ( SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id )", "source_tables": ["atom", "connected"]}, "evidence": " atoms cannot bond with other atoms means atom_id NOT in connected table;"}
{"sample_id": 9670, "db_id": "toxicology", "final": {"question": "What are the atoms of the triple bond with the molecule \"TR041\"?", "sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR041'", "source_tables": ["bond", "atom", "connected"]}, "evidence": "TR041 is the molecule id; triple bond refers to bond_type = '#';"}
{"sample_id": 9671, "db_id": "toxicology", "final": {"question": "What are the elements of the atoms of TR144_8_19?", "sql": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19'", "source_tables": ["atom", "connected"]}, "evidence": "TR144_8_19 is the bond id; "}
{"sample_id": 9672, "db_id": "toxicology", "final": {"question": "Of all the carcinogenic molecules, which one has the most double bonds?", "sql": "SELECT T.molecule_id FROM ( SELECT T3.molecule_id, COUNT(T1.bond_type) FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T1.bond_type = '=' GROUP BY T3.molecule_id ORDER BY COUNT(T1.bond_type) DESC LIMIT 1 ) AS T", "source_tables": ["bond", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic; double bond refers to bond_type = ' = ';"}
{"sample_id": 9673, "db_id": "toxicology", "final": {"question": "What is the least common element of all carcinogenic molecules?", "sql": "SELECT T.element FROM ( SELECT T2.element, COUNT(DISTINCT T2.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T2.element ORDER BY COUNT(DISTINCT T2.molecule_id) LIMIT 1 ) t", "source_tables": ["atom", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic"}
{"sample_id": 9674, "db_id": "toxicology", "final": {"question": "What are the atoms that can bond with the atom that has the element lead?", "sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb'", "source_tables": ["atom", "connected"]}, "evidence": "atom that has the element lead refers to atom_id where element = 'pb'"}
{"sample_id": 9675, "db_id": "toxicology", "final": {"question": "List the elements of all the triple bonds.", "sql": "SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '#'", "source_tables": ["bond", "atom", "connected"]}, "evidence": "triple bond refers to bond_type = '#';"}
{"sample_id": 9676, "db_id": "toxicology", "final": {"question": "What percentage of bonds have the most common combination of atoms' elements?", "sql": "SELECT CAST((SELECT COUNT(T1.atom_id) FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id GROUP BY T2.bond_type ORDER BY COUNT(T2.bond_id) DESC LIMIT 1 ) AS REAL) * 100 / ( SELECT COUNT(atom_id) FROM connected )", "source_tables": ["bond", "connected"]}, "evidence": "DIVIDE(COUNT(bond_id), COUNT(atom_id where MAX(COUNT(atom_id)) ))"}
{"sample_id": 9677, "db_id": "toxicology", "final": {"question": "What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places.", "sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T2.label = '+' THEN T1.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bond_id),5) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'", "source_tables": ["bond", "molecule"]}, "evidence": "single bond refers to bond_type = '-'; label = '+' mean molecules are carcinogenic; proportion = DIVIDE(SUM(label = '+') * 100, COUNT(bond_id)) where bond_type = '-'"}
{"sample_id": 9678, "db_id": "toxicology", "final": {"question": "Calculate the total atoms consisting of the element carbon and hydrogen.", "sql": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.element = 'c' OR T.element = 'h'", "source_tables": ["atom"]}, "evidence": "consisting of element carbon and hydrogen refers to element in('c', 'h')"}
{"sample_id": 9679, "db_id": "toxicology", "final": {"question": "List down atom id2 for atoms with element sulfur.", "sql": "SELECT DISTINCT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's'", "source_tables": ["atom", "connected"]}, "evidence": "element sulfur refers to element = 's'"}
{"sample_id": 9680, "db_id": "toxicology", "final": {"question": "What are the bond type for atoms with element Tin?", "sql": "SELECT DISTINCT T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T1.element = 'sn'", "source_tables": ["bond", "atom", "connected"]}, "evidence": "element Tin refers to element = 'sn'; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#'"}
{"sample_id": 9681, "db_id": "toxicology", "final": {"question": "How many elements are there for single bond molecules?", "sql": "SELECT COUNT(DISTINCT T.element) FROM ( SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T", "source_tables": ["molecule", "atom", "bond"]}, "evidence": "single bond refers to bond_type = '-';"}
{"sample_id": 9682, "db_id": "toxicology", "final": {"question": "Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine.", "sql": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element IN ('p', 'br')", "source_tables": ["molecule", "atom", "bond"]}, "evidence": "triple bond refers to bond_type = '#'; phosphorus refers to element = 'p'; bromine refers to element = 'br'"}
{"sample_id": 9683, "db_id": "toxicology", "final": {"question": "Write down bond id for molecules that are carcinogenic.", "sql": "SELECT DISTINCT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'", "source_tables": ["bond", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic"}
{"sample_id": 9684, "db_id": "toxicology", "final": {"question": "Among the single bond molecule id, which molecules are not carcinogenic?", "sql": "SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'", "source_tables": ["bond", "molecule"]}, "evidence": "label = '-' means molecules are non-carcinogenic; single bond refers to bond_type = '-';"}
{"sample_id": 9685, "db_id": "toxicology", "final": {"question": "What is the composition of element chlorine in percentage among the single bond molecules?", "sql": "SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM ( SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T", "source_tables": ["molecule", "atom", "bond"]}, "evidence": "element chlorine refers to element = 'cl'; single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(element = 'cl'), COUNT(atom_id)) as percent where bond_type = '-'"}
{"sample_id": 9686, "db_id": "toxicology", "final": {"question": "What are the labels for TR000, TR001 and TR002?", "sql": "SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR002')", "source_tables": ["molecule"]}, "evidence": "TR000, TR001 and TR002 are molecule id; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9687, "db_id": "toxicology", "final": {"question": "List down the molecule id for non carcinogenic molecules.", "sql": "SELECT T.molecule_id FROM molecule AS T WHERE T.label = '-'", "source_tables": ["molecule"]}, "evidence": "label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9688, "db_id": "toxicology", "final": {"question": "Calculate the total carcinogenic molecules for molecule id from TR000 to TR030.", "sql": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.molecule_id BETWEEN 'TR000' AND 'TR030' AND T.label = '+'", "source_tables": ["molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic"}
{"sample_id": 9689, "db_id": "toxicology", "final": {"question": "List down the bond type for molecules from molecule id TR000 to TR050.", "sql": "SELECT T2.molecule_id, T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR050'", "source_tables": ["bond", "molecule"]}, "evidence": "double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';"}
{"sample_id": 9690, "db_id": "toxicology", "final": {"question": "What are the elements for bond id TR001_10_11?", "sql": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_10_11'", "source_tables": ["atom", "connected"]}, "evidence": "TR001_10_11 is the bond id;"}
{"sample_id": 9691, "db_id": "toxicology", "final": {"question": "How many bond id have element iodine?", "sql": "SELECT COUNT(T3.bond_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element = 'i'", "source_tables": ["molecule", "atom", "bond"]}, "evidence": "iodine refers to element = 'i'"}
{"sample_id": 9692, "db_id": "toxicology", "final": {"question": "Among the molecules with element Calcium, are they mostly carcinogenic or non carcinogenic?", "sql": "SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca' GROUP BY T2.label ORDER BY COUNT(T2.label) DESC LIMIT 1", "source_tables": ["molecule", "atom"]}, "evidence": "calcium refers to element = 'ca'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; MAX(label)"}
{"sample_id": 9693, "db_id": "toxicology", "final": {"question": "Does bond id TR001_1_8 have both element of chlorine and carbon?", "sql": "SELECT T2.bond_id, T2.atom_id2, T1.element AS flag_have_CaCl FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T2.bond_id = 'TR001_1_8' AND (T1.element = 'c1' OR T1.element = 'c')", "source_tables": ["atom", "connected"]}, "evidence": "chlorine refers to element = 'cl'; carbon refers to element = 'c'"}
{"sample_id": 9694, "db_id": "toxicology", "final": {"question": "List down two molecule id of triple bond non carcinogenic molecules with element carbon.", "sql": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element = 'c' AND T2.label = '-'", "source_tables": ["molecule", "atom", "bond"]}, "evidence": "carbon refers to element = 'c'; triple bond refers to bond_type = '#'; label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9695, "db_id": "toxicology", "final": {"question": "What is the percentage of element chlorine in carcinogenic molecules?", "sql": "SELECT CAST(COUNT( CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'", "source_tables": ["molecule", "atom"]}, "evidence": "chlorine refers to element = 'cl'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(element = 'pb'); COUNT(molecule_id)) as percentage where label = '+'"}
{"sample_id": 9696, "db_id": "toxicology", "final": {"question": "List the toxicology elements associated with molecule TR001.", "sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR001'", "source_tables": ["atom"]}, "evidence": "TR001 is the molecule id"}
{"sample_id": 9697, "db_id": "toxicology", "final": {"question": "Give me the molecule ID of the double bond type.", "sql": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '='", "source_tables": ["bond"]}, "evidence": "double bond refers to bond_type = ' = ';"}
{"sample_id": 9698, "db_id": "toxicology", "final": {"question": "Write down the atom IDs of the first and second atoms of triple bond type molecules.", "sql": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'", "source_tables": ["bond", "connected"]}, "evidence": "first atom refers to atom_id; second atom refers to atom_id2; triple bond refers to bond_type = '#';"}
{"sample_id": 9699, "db_id": "toxicology", "final": {"question": "What are the toxicology elements associated with bond ID TR000_1_2?", "sql": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR000_1_2'", "source_tables": ["atom", "connected"]}, "evidence": "TR000_1_2 is the bond id;"}
{"sample_id": 9700, "db_id": "toxicology", "final": {"question": "How many of the single bond type molecules are non-carcinogenic?", "sql": "SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'", "source_tables": ["bond", "molecule"]}, "evidence": "label = '-' means molecules are non-carcinogenic; single bond refers to bond_type = '-';"}
{"sample_id": 9701, "db_id": "toxicology", "final": {"question": "What is the label for bond ID TR001_10_11?", "sql": "SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'", "source_tables": ["bond", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9702, "db_id": "toxicology", "final": {"question": "Enumerate the bond ID of triple bond type molecules and tell me if they are carcinogenic or not.", "sql": "SELECT DISTINCT T1.bond_id, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'", "source_tables": ["bond", "molecule"]}, "evidence": "triple bond refers to bond_type = '#'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9703, "db_id": "toxicology", "final": {"question": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.", "sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7", "source_tables": ["molecule", "atom"]}, "evidence": "label = '+' means molecules are carcinogenic; 4th atom of each molecule refers to substr(atom_id, 7, 1) = '4'; "}
{"sample_id": 9762, "db_id": "card_games", "final": {"question": "Which are the cards that have incredibly powerful foils.", "sql": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL", "source_tables": ["cards"]}, "evidence": "incredibly poweful foils refers to cardKingdomFoilId is not null AND cardKingdomId is not null"}
{"sample_id": 9763, "db_id": "card_games", "final": {"question": "What are the borderless cards available without powerful foils?", "sql": "SELECT id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)", "source_tables": ["cards"]}, "evidence": "borderless' refers to borderColor; poweful foils refers to cardKingdomFoilId paired with cardKingdomId AND cardKingdomId is not null"}
{"sample_id": 9764, "db_id": "card_games", "final": {"question": "List the card names with value that cost more converted mana for the face.", "sql": "SELECT name FROM cards ORDER BY faceConvertedManaCost LIMIT 1", "source_tables": ["cards"]}, "evidence": "more converted mana for the face refers to Max(faceConvertedManaCost);"}
{"sample_id": 9765, "db_id": "card_games", "final": {"question": "Name all cards with 2015 frame style ranking below 100 on EDHRec.", "sql": "SELECT id FROM cards WHERE edhrecRank < 100 AND frameVersion = 2015", "source_tables": ["cards"]}, "evidence": "below 100 on EDHRec refers to EDHRec <100; with 2015 frame style refers to frameVersion = 2015;"}
{"sample_id": 9766, "db_id": "card_games", "final": {"question": "List all the mythic rarity print cards banned in gladiator format.", "sql": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'", "source_tables": ["cards", "legalities"]}, "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';"}
{"sample_id": 9767, "db_id": "card_games", "final": {"question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.", "sql": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL", "source_tables": ["cards", "legalities"]}, "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';"}
{"sample_id": 9768, "db_id": "card_games", "final": {"question": "List all the card id and artist with unknown power which are legal for commander play format.", "sql": "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T2.format = 'commander' AND (T1.power IS NULL OR T1.power = '*')", "source_tables": ["cards", "legalities"]}, "evidence": "unknown power refers to power = '*' or POWER IS NULL; commander play format refers to format = 'commander'; legal for commander play format refers to format = 'commander' where status = 'Legal'"}
{"sample_id": 9769, "db_id": "card_games", "final": {"question": "Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.", "sql": "SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'", "source_tables": ["cards", "rulings"]}, "evidence": "cards have missing or degraded properties and value refers to hasContentWarning = 1; 'Stephen Daniele' is artist; Find all cards refers to return card id"}
{"sample_id": 9770, "db_id": "card_games", "final": {"question": "Describe the information about rulings for card named 'Sublime Epiphany' with number 74s.", "sql": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'", "source_tables": ["cards", "rulings"]}, "evidence": "Sublime Epiphany' is name of cards; number 74s refers to number = '74s'; information refers to text;"}
{"sample_id": 9771, "db_id": "card_games", "final": {"question": "Name the card and artist with the most ruling information. Also state if the card is a promotional printing.", "sql": "SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 AND T1.artist = (SELECT artist FROM cards WHERE isPromo = 1 GROUP BY artist HAVING COUNT(DISTINCT uuid) = (SELECT MAX(count_uuid) FROM ( SELECT COUNT(DISTINCT uuid) AS count_uuid FROM cards WHERE isPromo = 1 GROUP BY artist ))) LIMIT 1", "source_tables": ["cards", "rulings"]}, "evidence": "with the most ruling information refers to Max(count(rulings.uuid)); the card is the promotional printing refers to isPromo = 1;"}
{"sample_id": 9772, "db_id": "card_games", "final": {"question": "State the alternative languages available for card named Annul numbered 29.", "sql": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = 29", "source_tables": ["foreign_data", "cards"]}, "evidence": "annul refers to name = 'annul'; numbered 29 refers to number = '29';"}
{"sample_id": 9773, "db_id": "card_games", "final": {"question": "Name all the cards which have alternative language in Japanese.", "sql": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'", "source_tables": ["foreign_data", "cards"]}, "evidence": "Japanese' is the language;"}
{"sample_id": 9774, "db_id": "card_games", "final": {"question": "Calculate the percentage of the cards availabe in Chinese Simplified.", "sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid", "source_tables": ["foreign_data", "cards"]}, "evidence": "Chinese Simplified' is the language; percentage = Divide(Sum(id where language = 'Chinese Simplified'), Count(id)) *100"}
{"sample_id": 9775, "db_id": "card_games", "final": {"question": "List all the sets available in Italian translation. State the total number of cards per set.", "sql": "SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'", "source_tables": ["sets", "set_translations"]}, "evidence": "Italian translation refers to language = 'Italian'; total number of card per set refers to totalSetSize;"}
{"sample_id": 9776, "db_id": "card_games", "final": {"question": "How many types of cards does the artist Aaron Boyd illustrated about card art?", "sql": "SELECT COUNT(type) FROM cards WHERE artist = 'Aaron Boyd'", "source_tables": ["cards"]}, "evidence": "Aaron Boyd' is artist;"}
{"sample_id": 9777, "db_id": "card_games", "final": {"question": "What is the keyword found on card 'Angel of Mercy'?", "sql": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'", "source_tables": ["cards"]}, "evidence": "Angel of Mercy' is the name of card;"}
{"sample_id": 9778, "db_id": "card_games", "final": {"question": "How many cards have infinite power?", "sql": "SELECT COUNT(*) FROM cards WHERE power = '*'", "source_tables": ["cards"]}, "evidence": "infinite power refers to power = '*';"}
{"sample_id": 9779, "db_id": "card_games", "final": {"question": "What type of promotion is of card 'Duress'?", "sql": "SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL", "source_tables": ["cards"]}, "evidence": "card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;"}
{"sample_id": 9780, "db_id": "card_games", "final": {"question": "What is the border color of card \"Ancestor's Chosen\"?", "sql": "SELECT DISTINCT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'", "source_tables": ["cards"]}, "evidence": "name of card  = 'Ancestor''s Chosen' ;"}
{"sample_id": 9781, "db_id": "card_games", "final": {"question": "What is the type of the card \"Ancestor's Chosen\" as originally printed?", "sql": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND originalType IS NOT NULL", "source_tables": ["cards"]}, "evidence": "Ancestor's Chosen' is the name of card; type of the card as originally printed refers to originaltype;"}
{"sample_id": 9782, "db_id": "card_games", "final": {"question": "cards are not directly linked to language but through table 'set'. you need to add set in covered table & rephrase your question\nWhat are the languages available for the set that card 'Angel of Mercy' is in?", "sql": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM cards WHERE name = 'Angel of Mercy' )", "source_tables": ["cards", "set_translations"]}, "evidence": "Angel of Mercy' is the name of card;"}
{"sample_id": 9783, "db_id": "card_games", "final": {"question": "How many cards of legalities whose status is restricted have text boxes?", "sql": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isTextless = 0", "source_tables": ["cards", "legalities"]}, "evidence": "restricted refers to status = 'restricted'; have text boxes refers to is Textless = 0;"}
{"sample_id": 9784, "db_id": "card_games", "final": {"question": "What is the description about the ruling of card \"Condemn\"?", "sql": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'", "source_tables": ["cards", "rulings"]}, "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;"}
{"sample_id": 9785, "db_id": "card_games", "final": {"question": "How many cards of legalities whose status is restricted are found in a starter deck?", "sql": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isStarter = 1", "source_tables": ["cards", "legalities"]}, "evidence": "restricted refers to status = 'restricted'; found in the starter deck refers to isStarter = 1;"}
{"sample_id": 9786, "db_id": "card_games", "final": {"question": "What is the status of card \"Cloudchaser Eagle\"?", "sql": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'", "source_tables": ["cards", "legalities"]}, "evidence": "Cloudchaser Eagle is the name of card;"}
{"sample_id": 9787, "db_id": "card_games", "final": {"question": "What is the type of card \"Benalish Knight\"?", "sql": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'", "source_tables": ["foreign_data", "cards"]}, "evidence": "Benalish Knight' is the name of card;"}
{"sample_id": 9788, "db_id": "card_games", "final": {"question": "What is the rule of playing card \"Benalish Knight\"?", "sql": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'", "source_tables": ["cards", "legalities"]}, "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;"}
{"sample_id": 9789, "db_id": "card_games", "final": {"question": "Please provide the names of the artists who illustrated the card art in Phyrexian.", "sql": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'", "source_tables": ["foreign_data", "cards"]}, "evidence": "Phyrexian' is the language; name of artists refers to artist;"}
{"sample_id": 9790, "db_id": "card_games", "final": {"question": "What is the percentage of borderless cards?", "sql": "SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards", "source_tables": ["cards"]}, "evidence": "borderless card refers to borderColor = 'borderless'; percentage = Divide(Count (id) where borderColor = 'borderless', Count(id)) *100"}
{"sample_id": 9791, "db_id": "card_games", "final": {"question": "How many cards that illusrtated in German have been reprinted?", "sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.isReprint = 1", "source_tables": ["foreign_data", "cards"]}, "evidence": "German' is the language; reprinted refers to isReprint = 1;"}
{"sample_id": 9792, "db_id": "card_games", "final": {"question": "How many borderless cards are illustrated in Russian?", "sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian'", "source_tables": ["foreign_data", "cards"]}, "evidence": "borderless card refers to borderColor = 'borderless'; 'Russian' is the language;"}
{"sample_id": 9793, "db_id": "card_games", "final": {"question": "What is the percentage of cards whose language is French among the Story Spotlight cards?", "sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1", "source_tables": ["foreign_data", "cards"]}, "evidence": "Story Spotlight card refers to isStorySpotlight = 1; French is the language; Percentage = Divide(Count(id) where language = 'French' and isStorySpotlight = 1, Count(id) where isStorySpotlight = 1)*100"}
{"sample_id": 9794, "db_id": "card_games", "final": {"question": "How many cards are there with toughness of 99?", "sql": "SELECT COUNT(id) FROM cards WHERE toughness = 99", "source_tables": ["cards"]}, "evidence": ""}
{"sample_id": 9795, "db_id": "card_games", "final": {"question": "Name the cards that were illustrated by Aaron Boyd.", "sql": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'", "source_tables": ["cards"]}, "evidence": "Aaron Boyd' is artist;"}
{"sample_id": 9796, "db_id": "card_games", "final": {"question": "How many black border cards are only available on mtgo?", "sql": "SELECT COUNT(id) FROM cards WHERE availability = 'mtgo' AND borderColor = 'black'", "source_tables": ["cards"]}, "evidence": "black border card refers to borderColor = black; available on mtgo refers to availability = mtgo;\n\nadd quotes for string = 'black' and = 'mtgo'"}
{"sample_id": 9797, "db_id": "card_games", "final": {"question": "List down all the card IDs with converted mana cost of 0.", "sql": "SELECT id FROM cards WHERE convertedManaCost = 0", "source_tables": ["cards"]}, "evidence": "converted mana cost of 0 refers to covertedManaCost = 0;"}
{"sample_id": 9798, "db_id": "card_games", "final": {"question": "What are the card layout of cards with keyword of flying?", "sql": "SELECT layout FROM cards WHERE keywords = 'Flying'", "source_tables": ["cards"]}, "evidence": ""}
{"sample_id": 9799, "db_id": "card_games", "final": {"question": "How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"?", "sql": "SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'", "source_tables": ["cards"]}, "evidence": "subtype other than Angel refers to subtypes is not 'Angel';"}
{"sample_id": 9800, "db_id": "card_games", "final": {"question": "What are the foiled cards that are incredibly powerful when paired with non foiled cards? List the IDs.", "sql": "SELECT id FROM cards WHERE cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL", "source_tables": ["cards"]}, "evidence": "Incredibly powerful refers to both cardKingdomFoilId and cardKingdomId IS NOT Null;"}
{"sample_id": 9801, "db_id": "card_games", "final": {"question": "What are the cards belong to duel deck a? List the ID.", "sql": "SELECT id FROM cards WHERE duelDeck = 'a'", "source_tables": ["cards"]}, "evidence": "duel deck a refers to duelDeck = a;"}
{"sample_id": 9802, "db_id": "card_games", "final": {"question": "List the edhrecRank for cards with frame version 2015.", "sql": "SELECT edhrecRank FROM cards WHERE frameVersion = 2015", "source_tables": ["cards"]}, "evidence": ""}
{"sample_id": 9803, "db_id": "card_games", "final": {"question": "List down the name of artists for cards in Chinese Simplified.", "sql": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'", "source_tables": ["foreign_data", "cards"]}, "evidence": "Chinese Simplified' is the language;"}
{"sample_id": 9804, "db_id": "card_games", "final": {"question": "What are the cards that only available in paper and Japanese language?", "sql": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'", "source_tables": ["foreign_data", "cards"]}, "evidence": "available in paper refers to availability = 'paper'; 'Japanese is the language;"}
{"sample_id": 9805, "db_id": "card_games", "final": {"question": "How many of the banned cards are white border?", "sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'", "source_tables": ["cards", "legalities"]}, "evidence": "banned card refers to status = 'Banned'; white border refers to borderColor = 'white';"}
{"sample_id": 9806, "db_id": "card_games", "final": {"question": "List down the uuid for legacy cards and the foreign language of these cards.", "sql": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'", "source_tables": ["foreign_data", "cards", "legalities"]}, "evidence": "legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data"}
{"sample_id": 9807, "db_id": "card_games", "final": {"question": "Write down the ruling of Beacon of Immortality.", "sql": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'", "source_tables": ["cards", "rulings"]}, "evidence": "Beacon of Immortality' is the name of card;"}
{"sample_id": 9808, "db_id": "card_games", "final": {"question": "How many cards are having future frame version and what are the legality status of these cards?", "sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future'", "source_tables": ["cards", "legalities"]}, "evidence": "future frame version refers to frameVersion = 'future'; legility status refers to status = 'legal';"}
{"sample_id": 9809, "db_id": "card_games", "final": {"question": "What are the cards for set OGW? State the colour for these cards.", "sql": "SELECT id, colors FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )", "source_tables": ["cards", "set_translations"]}, "evidence": "set OGW refers to setCode = 'OGW';"}
{"sample_id": 9810, "db_id": "card_games", "final": {"question": "What are the cards in set 10E with converted mana of 5 have translation and what are the languages?", "sql": "SELECT id, language FROM set_translations WHERE id = ( SELECT id FROM cards WHERE convertedManaCost = 5 ) AND setCode = '10E'", "source_tables": ["cards", "set_translations"]}, "evidence": "set 10E refers to setCode = '10E'; converted mana of 5 refers to convertedManaCost = 5;"}
{"sample_id": 9811, "db_id": "card_games", "final": {"question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.", "sql": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'", "source_tables": ["cards", "rulings"]}, "evidence": "Creature - Elf is the originalType;"}
{"sample_id": 9812, "db_id": "card_games", "final": {"question": "What are the colors of cards from ID 1-20? What are the format of these cards?", "sql": "SELECT T1.colors, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20", "source_tables": ["cards", "legalities"]}, "evidence": "ID 1-20 refers to id BETWEEN 1 and 20;"}
{"sample_id": 9813, "db_id": "card_games", "final": {"question": "Among the Artifact cards, which are black color and comes with foreign languague translation?", "sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'", "source_tables": ["foreign_data", "cards"]}, "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data"}
{"sample_id": 9814, "db_id": "card_games", "final": {"question": "Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date.", "sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3", "source_tables": ["cards", "rulings"]}, "evidence": "uncommon refers to rarity = 'uncommon';"}
{"sample_id": 9815, "db_id": "card_games", "final": {"question": "On how many cards designed by John Avon is its foil non-powerful?", "sql": "SELECT COUNT(id) FROM cards WHERE (cardKingdomId IS NULL OR cardKingdomFoilId IS NULL) AND artist = 'John Avon'", "source_tables": ["cards"]}, "evidence": "John Avon refer to artist; foil poweful foils refers to cardKingdomId and cardKingdomFoildId is NOT NULL \n"}
{"sample_id": 9816, "db_id": "card_games", "final": {"question": "How many white bordered cards are powerful?", "sql": "SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL", "source_tables": ["cards"]}, "evidence": "white bordered cards refer to borderColor = 'white'; powerful cards refers to cardKingdomFoilId is not null AND cardKingdomId is not null (replace)"}
{"sample_id": 9817, "db_id": "card_games", "final": {"question": "How many cards designed by UDON and available in mtgo print type has a starting maximum hand size of -1?", "sql": "SELECT COUNT(id) FROM cards WHERE hAND = '-1' AND artist = 'UDON' AND Availability = 'mtgo'", "source_tables": ["cards"]}, "evidence": "UDON refer to artist; availabe in mtgo refers to availability = 'mtgo'; starting maximum hand size of -1 refers to hand = -1"}
{"sample_id": 9818, "db_id": "card_games", "final": {"question": "How many cards with a 1993 frame version and available on paper have a sensitive content warning?", "sql": "SELECT COUNT(id) FROM cards WHERE frameVersion = 1993 AND availability = 'paper' AND hasContentWarning = 1", "source_tables": ["cards"]}, "evidence": "sensitive content warning refer to hasContentWarning = 1; available on paper refer to availability = 'paper' 1993 refer to frameVersion"}
{"sample_id": 9819, "db_id": "card_games", "final": {"question": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo?", "sql": "SELECT manaCost FROM cards WHERE availability = 'mtgo,paper' AND borderColor = 'black' AND frameVersion = 2003 AND layout = 'normal'", "source_tables": ["cards"]}, "evidence": "available in paper and mtgo refers to availability = 'mtgo,paper'; frameVersion = 2003;borderColor = 'black'"}
{"sample_id": 9820, "db_id": "card_games", "final": {"question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?", "sql": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'", "source_tables": ["cards"]}, "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist"}
{"sample_id": 9821, "db_id": "card_games", "final": {"question": "Lists all types of cards available in arena.", "sql": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL", "source_tables": ["cards"]}, "evidence": "all types refer to subtypes and supertypes\n\navailble in arena refers to availability = 'arena'"}
{"sample_id": 9822, "db_id": "card_games", "final": {"question": "Lists the set code of all cards translated into Spanish.", "sql": "SELECT setCode FROM set_translations WHERE language = 'Spanish'", "source_tables": ["set_translations"]}, "evidence": "Spanish refer to language; set code refers to setCode"}
{"sample_id": 9823, "db_id": "card_games", "final": {"question": "What percentage of legendary frame effect cards that are only available in online game variations?", "sql": "SELECT SUM(CASE WHEN isOnlineOnly = 1 THEN 1.0 ELSE 0 END) / COUNT(id) * 100 FROM cards WHERE frameEffects = 'legendary'", "source_tables": ["cards"]}, "evidence": "only available in online game variationsrefer to isOnlineOnly =1 ; legendary frame effect cards refer to frameEffects = 'legendary'; percentage refer to DIVIDE(COUNT(isOnlineOnly=1), COUNT(id)) from cards where frameEffects = 'legendary'"}
{"sample_id": 9824, "db_id": "card_games", "final": {"question": "What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID.", "sql": "SELECT CAST(SUM(CASE WHEN isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE isStorySpotlight = 1", "source_tables": ["cards"]}, "evidence": "Story Spotlight cards that do not have a text box refers to isStorylight = 1 and isTextless = 0; Percentage = DIVIDE(SUM(count(id) where isStorylight = 1 AND isTextless = 0 ), SUM(count(id))) * 100"}
{"sample_id": 9825, "db_id": "card_games", "final": {"question": "Calculate the percentage of cards in Spanish. List them by name.", "sql": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'", "source_tables": ["foreign_data"]}, "evidence": "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100"}
{"sample_id": 9826, "db_id": "card_games", "final": {"question": "Indicates the name of all the languages into which the set whose number of cards is 309 is translated.", "sql": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 309", "source_tables": ["sets", "set_translations"]}, "evidence": "set refer to setCode; number of cards refers to baseSetSize; baseSetsize = 309\n\n"}
{"sample_id": 9827, "db_id": "card_games", "final": {"question": "How many Brazilian Portuguese translated sets are inside the Commander block?", "sql": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T1.block = 'Commander'", "source_tables": ["sets", "set_translations"]}, "evidence": "Commander block refer to block = 'Commander'; sets refer to code = setCode; Portuguese refer to language = 'Portuguese (Brasil)'"}
{"sample_id": 9828, "db_id": "card_games", "final": {"question": "Lists by ID all Creature-type cards with legal status.", "sql": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'", "source_tables": ["cards", "rulings", "legalities"]}, "evidence": "legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature';"}
{"sample_id": 9829, "db_id": "card_games", "final": {"question": "Lists all types of cards in German.", "sql": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL", "source_tables": ["foreign_data", "cards"]}, "evidence": "German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null"}
{"sample_id": 9830, "db_id": "card_games", "final": {"question": "How many unknown power cards contain info about the triggered ability", "sql": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE (T1.power IS NULL OR T1.power = '*') AND T2.text LIKE '%triggered ability%'", "source_tables": ["cards", "rulings"]}, "evidence": "unknown power cards refers to power is null or power = '*';contain info about the triggered ability refers to text contains 'triggered ability'"}
{"sample_id": 9831, "db_id": "card_games", "final": {"question": "Indicates the number of cards with pre-modern format, ruling text \"This is a triggered mana ability.\" that do not have multiple faces.", "sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern' AND T3.text = 'This is a triggered mana ability.' AND T1.Side IS NULL", "source_tables": ["cards", "rulings", "legalities"]}, "evidence": "pre-modern format refers to format = 'premodern' ;do not have multiple faces refers to side IS NULL"}
{"sample_id": 9832, "db_id": "card_games", "final": {"question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.", "sql": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'", "source_tables": ["cards", "legalities"]}, "evidence": "available in paper refers to availability = 'paper'"}
{"sample_id": 9833, "db_id": "card_games", "final": {"question": "To which artist does the card with the text \"Das perfekte Gegenmittel zu einer dichten Formation\" belong?", "sql": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.flavorText LIKE '%DAS perfekte Gegenmittel zu einer dichten Formation%'", "source_tables": ["foreign_data", "cards"]}, "evidence": ""}
{"sample_id": 9834, "db_id": "card_games", "final": {"question": "What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?", "sql": "SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'", "source_tables": ["foreign_data", "cards"]}, "evidence": "in French refers to language = 'French'; black border color refers to borderColor = 'black'"}
{"sample_id": 9835, "db_id": "card_games", "final": {"question": "How many cards with print rarity have ruling text printed on 01/02/2007?", "sql": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2007-02-01'", "source_tables": ["cards", "rulings"]}, "evidence": "with print rarity refers to rarity = 'rare'; on 01/02/2007 refers to date = '2007-02-01'"}
{"sample_id": 9836, "db_id": "card_games", "final": {"question": "What language is the set of 180 cards that belongs to the Ravnica block translated into?", "sql": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180", "source_tables": ["sets", "set_translations"]}, "evidence": "set of 180 cards refers to baseSetSize = 180"}
{"sample_id": 9837, "db_id": "card_games", "final": {"question": "What percentage of cards with format commander and legal status do not have a content warning?", "sql": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'", "source_tables": ["cards", "legalities"]}, "evidence": "do not have a content warning refers to hasContentWarning = 0; percentage refers to DIVIDE(COUNT(hasContentWarning = 0),COUNT(ID))*100 where format = 'commander' AND Status = 'legal';"}
{"sample_id": 9838, "db_id": "card_games", "final": {"question": "What percentage of cards without power are in French?", "sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*'", "source_tables": ["foreign_data", "cards"]}, "evidence": "in French refers to language = 'French'; cards without power refers to power IS NULL OR power = '*'; percentage = DIVIDE(COUNT(language = 'French' and power is NULL or power = '*'), COUNT( power is NULL or power = '*'))*100"}
{"sample_id": 9839, "db_id": "card_games", "final": {"question": "What percentage of Japanese translated sets are expansion sets?", "sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.type = 'expansion'", "source_tables": ["sets", "set_translations"]}, "evidence": "Japanese translated refers to language = 'Japanese'; expansion sets refers to type = 'expansion'; percentage = DIVIDE(COUNT(language = 'Japanese'),COUNT(language))*100"}
{"sample_id": 9840, "db_id": "card_games", "final": {"question": "What kind of printing is on the card that Daren Bader created?", "sql": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'", "source_tables": ["cards"]}, "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'"}
{"sample_id": 9841, "db_id": "card_games", "final": {"question": "How many color cards with no borders have been ranked higher than 12000 on EDHRec?", "sql": "SELECT COUNT(id) FROM cards WHERE edhrecRank > 12000 AND borderColor = 'borderless'", "source_tables": ["cards"]}, "evidence": "color cards with no borders refers to borderColor = 'borderless'; ranked higher than 12000 on EDHRec refers to edhrecRank > 12000"}
{"sample_id": 9842, "db_id": "card_games", "final": {"question": "How many cards are oversized, reprinted, and printed for promotions?", "sql": "SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1", "source_tables": ["cards"]}, "evidence": "are oversized refers to isOversized = 1; reprinted refers to isReprint = 1; printed for promotions refers to isPromo = 1"}
{"sample_id": 9843, "db_id": "card_games", "final": {"question": "Please list top three unknown power cards that have promotional types for arena league in alphabetical order.", "sql": "SELECT name FROM cards WHERE (power IS NULL OR power LIKE '%*%') AND promoTypes = 'arenaleague' ORDER BY name LIMIT 3", "source_tables": ["cards"]}, "evidence": "unknown power cards refers to power is null or power = '*'; promotional types for arena league refers to promoTypes = 'arenaleague'"}
{"sample_id": 9844, "db_id": "card_games", "final": {"question": "What is the language of the card with the multiverse number 149934?", "sql": "SELECT language FROM foreign_data WHERE multiverseid = 149934", "source_tables": ["foreign_data"]}, "evidence": "multiverse number 149934 refers to multiverseid = 149934;"}
{"sample_id": 9845, "db_id": "card_games", "final": {"question": "Please provide the ids of top three powerful pairs of Kingdom Foil and Kingdom Cards sorted by Kingdom Foil id in alphabetical order.", "sql": "SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3", "source_tables": ["cards"]}, "evidence": "poweful refers to cardKingdomFoilId is not null AND cardKingdomId is not null"}
{"sample_id": 9846, "db_id": "card_games", "final": {"question": "What proportion of cards do not have a text box with a normal layout?", "sql": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards", "source_tables": ["cards"]}, "evidence": "do not have a text box refers to isTextless = 1; proportion refers to DIVIDE(COUNT(Textless = 1 and layout = 'normal'),COUNT(Textless))*100"}
{"sample_id": 9847, "db_id": "card_games", "final": {"question": "What are the card numbers that don't have multiple faces on a single card and have the subtypes Angel and Wizard?", "sql": "SELECT id FROM cards WHERE subtypes = 'Angel,Wizard' AND side IS NULL", "source_tables": ["cards"]}, "evidence": "don't have multiple faces on a single card side is null"}
{"sample_id": 9848, "db_id": "card_games", "final": {"question": "Please provide top three sets that don't appear in Magic: The Gathering Online, along with their names in in alphabetical order.", "sql": "SELECT name FROM sets WHERE mtgoCode IS NULL ORDER BY name LIMIT 3", "source_tables": ["sets"]}, "evidence": "don't appear in Magic: The Gathering Online refers to mtgoCode is NULL or mtgoCode = ''"}
{"sample_id": 9849, "db_id": "card_games", "final": {"question": "What languages are available in the set known as Archenemy on the magic card market and having the code ARC?", "sql": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC'", "source_tables": ["sets", "set_translations"]}, "evidence": "known as Archenemy refers to mcmName = 'Archenemy'; having the code ARC refers to setCode = 'ARC'"}
{"sample_id": 9850, "db_id": "card_games", "final": {"question": "What is the name of set number 5 and its translation?", "sql": "SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 5 GROUP BY T1.name, T2.translation", "source_tables": ["sets", "set_translations"]}, "evidence": "set number 5 refers to id = 5"}
{"sample_id": 9851, "db_id": "card_games", "final": {"question": "What is the language and expansion type of set number 206?", "sql": "SELECT T2.language, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 206", "source_tables": ["sets", "set_translations"]}, "evidence": "set number 206 refers to id = 206"}
{"sample_id": 9852, "db_id": "card_games", "final": {"question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.", "sql": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2", "source_tables": ["sets", "set_translations"]}, "evidence": ""}
{"sample_id": 9853, "db_id": "card_games", "final": {"question": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response.", "sql": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND T1.isFoilOnly = 1 AND T1.isForeignOnly = 0", "source_tables": ["sets", "set_translations"]}, "evidence": "available outside of the United States refers to isForeignOnly = 1; has foil cards refers to isFoilOnly = 1; with Japanese writing on them refers to language = 'Japanese'"}
{"sample_id": 9854, "db_id": "card_games", "final": {"question": "Which Russian set of cards contains the most cards overall?", "sql": "SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' GROUP BY T1.baseSetSize ORDER BY T1.baseSetSize DESC LIMIT 1", "source_tables": ["sets", "set_translations"]}, "evidence": "Russian refers to language = 'Russian'; contains the most cards overall refers to MAX(baseSetSize)"}
{"sample_id": 9855, "db_id": "card_games", "final": {"question": "What is the percentage of the set of cards that have Chinese Simplified as the language and are only available for online games?", "sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' AND T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode", "source_tables": ["sets", "set_translations"]}, "evidence": "are only available for online games refers to isOnlineOnly = 1; percentage = DIVIDE(COUNT(isOnlineOnly = 1),COUNT(isOnlineOnly))*100"}
{"sample_id": 9856, "db_id": "card_games", "final": {"question": "How many sets are available just in Japanese and not in Magic: The Gathering Online?", "sql": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.language = 'Japanese'  AND (T1.mtgoCode IS NULL OR T1.mtgoCode = '')", "source_tables": ["sets", "set_translations"]}, "evidence": "Japanese refers to language = 'Japanese'; not in Magic: The Gathering Online refers to mtgoCode is null or mtgoCode = ''"}
{"sample_id": 9857, "db_id": "card_games", "final": {"question": "How many card border with black color ? List out the card id.", "sql": "SELECT id FROM cards WHERE borderColor = 'black' GROUP BY id", "source_tables": ["cards"]}, "evidence": "border with black color refers to borderColor = 'black'"}
{"sample_id": 9858, "db_id": "card_games", "final": {"question": "How many cards have frame effect as extendedart? List out the id of those cards.", "sql": "SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id", "source_tables": ["cards"]}, "evidence": "\nframe effect as extendedart refers to frameEffects = 'extendedart'\n"}
{"sample_id": 9859, "db_id": "card_games", "final": {"question": "Among black card borders, which card has full artwork?", "sql": "SELECT id FROM cards WHERE borderColor = 'black' AND isFullArt = 1", "source_tables": ["cards"]}, "evidence": "white card borders refers to borderColor = 'white'; has full artwork refers to isFullArt = 1"}
{"sample_id": 9860, "db_id": "card_games", "final": {"question": "Point out the language of set id \"174\"?", "sql": "SELECT language FROM set_translations WHERE id = 174", "source_tables": ["set_translations"]}, "evidence": ""}
{"sample_id": 9861, "db_id": "card_games", "final": {"question": "List out the set name of the set code \"ALL\".", "sql": "SELECT name FROM sets WHERE code = 'ALL'", "source_tables": ["sets"]}, "evidence": ""}
{"sample_id": 9862, "db_id": "card_games", "final": {"question": "Which foreign language used by \"A Pedra Fellwar\"?", "sql": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'", "source_tables": ["foreign_data"]}, "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'"}
{"sample_id": 9863, "db_id": "card_games", "final": {"question": "State the set code of the set with release date of 07/13/2007?", "sql": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.releaseDate = '2007-07-13'", "source_tables": ["sets", "set_translations"]}, "evidence": ""}
{"sample_id": 9864, "db_id": "card_games", "final": {"question": "Mention the base set size and set code of the set that was in block named \"Masques\" and \"Mirage\".", "sql": "SELECT DISTINCT T1.baseSetSize, T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block IN ('Masques', 'Mirage')", "source_tables": ["sets", "set_translations"]}, "evidence": ""}
{"sample_id": 9865, "db_id": "card_games", "final": {"question": "Give the code of sets have expansion type of 'expansion'?", "sql": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'expansion' GROUP BY T2.setCode", "source_tables": ["sets", "set_translations"]}, "evidence": "code of sets refers to setCode"}
{"sample_id": 9866, "db_id": "card_games", "final": {"question": "Name the foreign name of the card that has boros watermark? List out the type of this card.", "sql": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'", "source_tables": ["foreign_data", "cards"]}, "evidence": ""}
{"sample_id": 9867, "db_id": "card_games", "final": {"question": "What is the language and flavor text of the card that has colorpie watermark? List out the type of this card.", "sql": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'", "source_tables": ["foreign_data", "cards"]}, "evidence": ""}
{"sample_id": 9868, "db_id": "card_games", "final": {"question": "What is percentage of the cards with a converted Mana Cost of 10 in set of Abyssal Horror?", "sql": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id), T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Abyssal Horror'", "source_tables": ["sets", "cards"]}, "evidence": "set of Abyssal Horror refers to name = 'Abyssal Horror'; percentage refers to DIVIDE(COUNT(convertedManaCost = 16),COUNT(convertedManaCost))*100"}
{"sample_id": 9869, "db_id": "card_games", "final": {"question": "Give the code of sets have expansion commander type?", "sql": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander'", "source_tables": ["sets", "set_translations"]}, "evidence": "code of sets refers to setCode"}
{"sample_id": 9870, "db_id": "card_games", "final": {"question": "Name the foreign name of the card that has abzan watermark? List out the type of this card.", "sql": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'", "source_tables": ["foreign_data", "cards"]}, "evidence": ""}
{"sample_id": 9871, "db_id": "card_games", "final": {"question": "What is the language of the card that has azorius watermark? List out the type of this card.", "sql": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'", "source_tables": ["foreign_data", "cards"]}, "evidence": ""}
{"sample_id": 9872, "db_id": "card_games", "final": {"question": "Of all the cards that are designed by Aaron Miller, how many of them are incredibly powerful?", "sql": "SELECT SUM(CASE WHEN artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) FROM cards", "source_tables": ["cards"]}, "evidence": "designed by Aaron Miller refers to artist = 'Aaron Miller'; are icredibily powerful refers to cardKingdomFoilId is not null AND cardKingdomId is not null"}
{"sample_id": 9873, "db_id": "card_games", "final": {"question": "How many cards available in paper have a positive starting maximum hand size?", "sql": "SELECT SUM(CASE WHEN availability = 'paper' AND hAND = '3' THEN 1 ELSE 0 END) FROM cards", "source_tables": ["cards"]}, "evidence": "available in paper refers to availability like '%paper%'; have a positive starting maximum hand size refers to hand = '3'"}
{"sample_id": 9874, "db_id": "card_games", "final": {"question": "Please list the names of the cards that have a text box.", "sql": "SELECT DISTINCT name FROM cards WHERE isTextless = 0", "source_tables": ["cards"]}, "evidence": "have a text box refers to isTextless = 0"}
{"sample_id": 9875, "db_id": "card_games", "final": {"question": "What's the unconverted mana cost of the card \"Ancestor's Chosen\"?", "sql": "SELECT DISTINCT manaCost FROM cards WHERE name = 'Ancestor''s Chosen'", "source_tables": ["cards"]}, "evidence": "card \"Ancestor's Chosen\" refers to name = 'Ancestor`s Chosen'"}
{"sample_id": 9953, "db_id": "codebase_community", "final": {"question": "Which user has a higher reputation, Harlan or Jarrod Dixon?", "sql": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )", "source_tables": ["users"]}, "evidence": "\"Harlan\" and \"Jarrod Dixon\" are both DisplayName; highest reputation refers to Max(Reputation)"}
{"sample_id": 9954, "db_id": "codebase_community", "final": {"question": "Please list the display names of all the users whose accounts were created in the year 2011.", "sql": "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2011'", "source_tables": ["users"]}, "evidence": "account created in the year 2011 refers to year(CreationDate) = 2011"}
{"sample_id": 9955, "db_id": "codebase_community", "final": {"question": "How many users last accessed the website after 2014/9/1?", "sql": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'", "source_tables": ["users"]}, "evidence": "last accessed after 2014/9/1 refers to LastAccessDate > '2014-09-01'"}
{"sample_id": 9956, "db_id": "codebase_community", "final": {"question": "What is the display name of the user who has the most number of views?", "sql": "SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )", "source_tables": ["users"]}, "evidence": "user who has the most number of view refers to Max(Views)"}
{"sample_id": 9957, "db_id": "codebase_community", "final": {"question": "Among the users who have more than 100 upvotes, how many of them have more then 1 downvotes?", "sql": "SELECT COUNT(Id) FROM users WHERE Upvotes > 100 AND Downvotes > 1", "source_tables": ["users"]}, "evidence": "more than 100 upvotes refers to Upvotes > 100; more than 1 downvotes refers to Downvotes > 1"}
{"sample_id": 9958, "db_id": "codebase_community", "final": {"question": "How many users with more than 10 views created their account after the year 2013?", "sql": "SELECT COUNT(id) FROM users WHERE STRFTIME('%Y', CreationDate) > '2013' AND Views > 10", "source_tables": ["users"]}, "evidence": "more than 10 views refers to Views > 10; created after the year 2013 refers to year (CreationDate) > 2013"}
{"sample_id": 9959, "db_id": "codebase_community", "final": {"question": "How many posts does the user csgillespie own?", "sql": "SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "source_tables": ["users", "posts"]}, "evidence": "\"csgillespie\" is the DisplayName of user"}
{"sample_id": 9960, "db_id": "codebase_community", "final": {"question": "Please list the titles of the posts owned by the user csgillespie?", "sql": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "source_tables": ["users", "posts"]}, "evidence": "\"csgillespie\" is the DisplayName of user"}
{"sample_id": 9961, "db_id": "codebase_community", "final": {"question": "Who is the owner of the post \"Eliciting priors from experts\"?", "sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'", "source_tables": ["users", "posts"]}, "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName"}
{"sample_id": 9962, "db_id": "codebase_community", "final": {"question": "What is the title of the post that is owned by csgillespie and has the highest popularity?", "sql": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1", "source_tables": ["users", "posts"]}, "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)"}
{"sample_id": 9963, "db_id": "codebase_community", "final": {"question": "What is the display name of the user who is the owner of the most valuable post?", "sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.FavoriteCount DESC LIMIT 1", "source_tables": ["users", "posts"]}, "evidence": "most valuable post refers to Max(FavoriteCount)"}
{"sample_id": 9964, "db_id": "codebase_community", "final": {"question": "What is the total number of comments of all the posts owned by csgillespie?", "sql": "SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "source_tables": ["users", "posts"]}, "evidence": "\"csgillespie\" is the DisplayName of user; total number of comments refers to Sum(CommentCount)"}
{"sample_id": 9965, "db_id": "codebase_community", "final": {"question": "For the post that got the most number of answers owned by csgillespie, how many answers did it get?", "sql": "SELECT MAX(T1.AnswerCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "source_tables": ["users", "posts"]}, "evidence": "\"csgillespie\" is the DisplayName of user; the most number of answer refers to Max(AnswerCount)"}
{"sample_id": 9966, "db_id": "codebase_community", "final": {"question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?", "sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'", "source_tables": ["users", "posts"]}, "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId"}
{"sample_id": 9967, "db_id": "codebase_community", "final": {"question": "Among the posts owned by csgillespie, how many of them are root posts?", "sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL", "source_tables": ["users", "posts"]}, "evidence": "\"csgillespie\" is the DisplayName of user; root post refers to ParentId IS Null"}
{"sample_id": 9968, "db_id": "codebase_community", "final": {"question": "Please list the display names of all the users who owns a post that is well-finished.", "sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ClosedDate IS NOT NULL", "source_tables": ["users", "posts"]}, "evidence": "the post that is well-finished refers to ClosedDate IS NOT Null"}
{"sample_id": 9969, "db_id": "codebase_community", "final": {"question": "Among the posts owned by an elder user, how many of them have a score of over 19?", "sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score >= 20 AND T2.Age > 65", "source_tables": ["users", "posts"]}, "evidence": "elder users refers to Age > 65; Score of over 19 refers to Score > = 20"}
{"sample_id": 9970, "db_id": "codebase_community", "final": {"question": "What is the location of the owner of the post \"Eliciting priors from experts\"?", "sql": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'", "source_tables": ["users", "posts"]}, "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post"}
{"sample_id": 9971, "db_id": "codebase_community", "final": {"question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.", "sql": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'", "source_tables": ["tags", "posts"]}, "evidence": "\"bayesian\" is the TagName; excerpt from refers to ExcerptPostId"}
{"sample_id": 9972, "db_id": "codebase_community", "final": {"question": "From which post is the most popular tag excerpted from? Please give the body of the post.", "sql": "SELECT Body FROM posts WHERE id = ( SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1 )", "source_tables": ["tags", "posts"]}, "evidence": "most popular tag refers to Max(Count); excerpt from refer to ExcerptPostId"}
{"sample_id": 9973, "db_id": "codebase_community", "final": {"question": "How many badges has the user csgillespie obtained?", "sql": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "source_tables": ["users", "badges"]}, "evidence": "\"csgillespie\" is the DisplayName of user"}
{"sample_id": 9974, "db_id": "codebase_community", "final": {"question": "Please list the names of the badges obtained by csgillespie.", "sql": "SELECT T1.'Name' FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "source_tables": ["users", "badges"]}, "evidence": "\"csgillespie\" is the DisplayName of user"}
{"sample_id": 9975, "db_id": "codebase_community", "final": {"question": "Among the badges obtained by csgillespie, how many of them were obtained in the year 2011?", "sql": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE STRFTIME('%Y', T1.Date) = '2011' AND T2.DisplayName = 'csgillespie'", "source_tables": ["users", "badges"]}, "evidence": "\"csgillespie\" is the DisplayName of user; obtained in 2011 refers to YEAR (Date) = 2011"}
{"sample_id": 9976, "db_id": "codebase_community", "final": {"question": "What is the display name of the user who has obtained the most number of badges?", "sql": "SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1", "source_tables": ["users", "badges"]}, "evidence": "who obtained the most number of badges refers to UserID with Max(Count(Id))"}
{"sample_id": 9977, "db_id": "codebase_community", "final": {"question": "What is the average score of the posts owned by the user csgillespie?", "sql": "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "source_tables": ["users", "posts"]}, "evidence": "\"csgillespie\" is the DisplayName of user; average score refers to AVG(Score)"}
{"sample_id": 9978, "db_id": "codebase_community", "final": {"question": "What is the average number of badges obtained by a user with over 200 views?", "sql": "SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T2.DisplayName) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Views > 200", "source_tables": ["users", "badges"]}, "evidence": "user with over 200 views refers to Views > 200; average number of badges = Divide (Count(Id), Count(DisplayName))"}
{"sample_id": 9979, "db_id": "codebase_community", "final": {"question": "Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?", "sql": "SELECT CAST(SUM(IIF(T2.Age > 65, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5", "source_tables": ["users", "posts"]}, "evidence": "score of over 5 refers to Score > 5; elder user refers to Age > 65; percentage = Divide (Count(Id where Age>65), Count(Id)) * 100"}
{"sample_id": 9980, "db_id": "codebase_community", "final": {"question": "How many votes did the user No.58 take on 2010/7/19?", "sql": "SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'", "source_tables": ["votes"]}, "evidence": "user no. 58 refers to UserId = 58; on 2010/7/19 refers to CreationDate = '2010-07-19'"}
{"sample_id": 9981, "db_id": "codebase_community", "final": {"question": "Indicate the creation date of the maximum number of votes.", "sql": "SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1", "source_tables": ["votes"]}, "evidence": "the creation date of the maximum number of votes refers to CreationDate where Max(Count(Id))"}
{"sample_id": 9982, "db_id": "codebase_community", "final": {"question": "Give the number of \"Revival\" badges.", "sql": "SELECT COUNT(Id) FROM badges WHERE Name = 'Revival'", "source_tables": ["badges"]}, "evidence": "number refers to Id; 'Revival' is the Name of badge"}
{"sample_id": 9983, "db_id": "codebase_community", "final": {"question": "What is the title for the post which got the highest score comment?", "sql": "SELECT Title FROM posts WHERE Id = ( SELECT PostId FROM comments ORDER BY Score DESC LIMIT 1 )", "source_tables": ["comments", "posts"]}, "evidence": "highest score comment refers to Max(comments.Score)"}
{"sample_id": 9984, "db_id": "codebase_community", "final": {"question": "For the post which got 1910 view counts, how many comments does it get?", "sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910", "source_tables": ["comments", "posts"]}, "evidence": ""}
{"sample_id": 9985, "db_id": "codebase_community", "final": {"question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?", "sql": "SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39.0' AND T2.UserId = 3025", "source_tables": ["comments", "posts"]}, "evidence": "user no. 3025 refers to UserId = '3025'; comment at 20:29:39 on 2014/4/23 refers to CreationDate = '2014/4/23 20:29:39.0'"}
{"sample_id": 9986, "db_id": "codebase_community", "final": {"question": "Give the only one comment text of the post with parent id 107829.", "sql": "SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ParentId = 107829 AND T1.CommentCount = 1", "source_tables": ["comments", "posts"]}, "evidence": "one comment refers to CommentCount = '1'"}
{"sample_id": 9987, "db_id": "codebase_community", "final": {"question": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?", "sql": "SELECT IIF(T2.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'", "source_tables": ["comments", "posts"]}, "evidence": "user no. 23853 refers to UserId = '23853'; at 9:08:18 on 2013/7/12 refers to CreationDate = '2013-07-12 09:08:18.0'; not well-finished refers to ClosedDate IS NULL and vice versa"}
{"sample_id": 9988, "db_id": "codebase_community", "final": {"question": "For the owner user of post No. 65041, what is his/her reputation points?", "sql": "SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041", "source_tables": ["users", "posts"]}, "evidence": "post no. 65041 refers to Id = '65041'; reputation point refers to Reputation"}
{"sample_id": 9989, "db_id": "codebase_community", "final": {"question": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?", "sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini'", "source_tables": ["users", "posts"]}, "evidence": "\"Tiago Pasqualini\" is the DisplayName;"}
{"sample_id": 9990, "db_id": "codebase_community", "final": {"question": "Provide the display name of the user who made the vote No.6347.", "sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 6347", "source_tables": ["votes", "users"]}, "evidence": "vote no. 6347 refers to Id = '6347'"}
{"sample_id": 9991, "db_id": "codebase_community", "final": {"question": "Give the number of votes for the post about data visualization.", "sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data visualization%'", "source_tables": ["votes", "posts"]}, "evidence": "About data visualization is the Title that contains 'data visualization';"}
{"sample_id": 9992, "db_id": "codebase_community", "final": {"question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?", "sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'", "source_tables": ["users", "badges"]}, "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;"}
{"sample_id": 9993, "db_id": "codebase_community", "final": {"question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?", "sql": "SELECT CAST(COUNT(T2.Id) AS REAL) / COUNT(DISTINCT T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24", "source_tables": ["votes", "posts"]}, "evidence": "user no. 24 refers to UserId = OwnerUserId = '24'; times of his/her post than votes = Divide (Count(post.Id), Count(votes.Id))"}
{"sample_id": 9994, "db_id": "codebase_community", "final": {"question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?", "sql": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'", "source_tables": ["posts"]}, "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount"}
{"sample_id": 9995, "db_id": "codebase_community", "final": {"question": "Write the contents of comments with a score of 17.", "sql": "SELECT Text FROM comments WHERE Score = 17", "source_tables": ["comments"]}, "evidence": "score of 17 refers to Score = 17; contents of comments refers to Text"}
{"sample_id": 9996, "db_id": "codebase_community", "final": {"question": "Which user has the website URL listed at 'http://stackoverflow.com'", "sql": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'", "source_tables": ["users"]}, "evidence": "\"http://stackoverflow.com\" is the WebsiteUrl; user refers to DisplayName"}
{"sample_id": 9997, "db_id": "codebase_community", "final": {"question": "What is the badge name that user 'SilentGhost' obtained?", "sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'", "source_tables": ["users", "badges"]}, "evidence": "\"SilentGhost\" is the DisplayName of user;"}
{"sample_id": 9998, "db_id": "codebase_community", "final": {"question": "Name the user that commented 'thank you user93!'", "sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'", "source_tables": ["users", "comments"]}, "evidence": "\"thank you user93\" is the Text of comment; user refers to DisplayName"}
{"sample_id": 9999, "db_id": "codebase_community", "final": {"question": "Write all comments made by user 'A Lion.'", "sql": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'", "source_tables": ["users", "comments"]}, "evidence": "\"A Lion\" is the DisplayName of user; comment refers to Text"}
{"sample_id": 10000, "db_id": "codebase_community", "final": {"question": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?", "sql": "SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'", "source_tables": ["users", "posts"]}, "evidence": "\"Understanding what Dassault iSight is doing?\" is the Title of post; user refers to DisplayName;"}
{"sample_id": 10001, "db_id": "codebase_community", "final": {"question": "Write all comments made on the post titled 'How does gentle boosting differ from AdaBoost?'", "sql": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How does gentle boosting differ from AdaBoost?'", "source_tables": ["comments", "posts"]}, "evidence": "\"How does gentle boosting differ from AdaBoost?\" is the Title of post; comments refers to Text"}
{"sample_id": 10002, "db_id": "codebase_community", "final": {"question": "Name 10 users with the badge name 'Necromancer.'", "sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10", "source_tables": ["users", "badges"]}, "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName"}
{"sample_id": 10003, "db_id": "codebase_community", "final": {"question": "Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?'", "sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?'", "source_tables": ["users", "posts"]}, "evidence": "'Open source tools for visualizing multi-dimensional data' is the Title of Post; editor refers to DisplayName;"}
{"sample_id": 10004, "db_id": "codebase_community", "final": {"question": "List the title of posts which were edited by Vebjorn Ljosa.", "sql": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'", "source_tables": ["users", "posts"]}, "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId"}
{"sample_id": 10005, "db_id": "codebase_community", "final": {"question": "What is the total score of the posts edited by Yevgeny and include the user's website URL.", "sql": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.WebsiteUrl", "source_tables": ["users", "posts"]}, "evidence": "\"Yevgeny\" is the DisplayName; edited refers to LastEditorUserId"}
{"sample_id": 10006, "db_id": "codebase_community", "final": {"question": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'", "sql": "SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'", "source_tables": ["posthistory", "posts"]}, "evidence": "\"Why square the difference instead of taking the absolute value in standard deviation?\" is the Title of post;"}
{"sample_id": 10007, "db_id": "codebase_community", "final": {"question": "How much is the total bounty amount of the post titled about 'data'", "sql": "SELECT SUM(T2.BountyAmount) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data%'", "source_tables": ["votes", "posts"]}, "evidence": "About data means the title contains 'data'; total bounty Amount refers to Sum(BountyAmount)"}
{"sample_id": 10008, "db_id": "codebase_community", "final": {"question": "Which user added a bounty amount of 50 to the post title mentioning variance?", "sql": "SELECT T3.DisplayName, T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title LIKE '%variance%'", "source_tables": ["votes", "users", "posts"]}, "evidence": "bounty amount of 50 refers to BountyAmount = 50; user refers to DisplayName; title mentioning variance refers to Title include 'variance'"}
{"sample_id": 10009, "db_id": "codebase_community", "final": {"question": "Calculate the average view count of each post tagged as 'humor' and list the title and the comment of each post.", "sql": "SELECT AVG(T2.ViewCount), T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.PostId  WHERE T2.Tags = '<humor>' GROUP BY T2.Title, T1.Text", "source_tables": ["comments", "posts"]}, "evidence": "tagged as  'humor' refers to tag = '<humor>'; comment of the post refers to Text; average view count = AVG(ViewCount)"}
{"sample_id": 10010, "db_id": "codebase_community", "final": {"question": "Give the total number of comments posted by user ID 13.", "sql": "SELECT COUNT(Id) FROM comments WHERE UserId = 13", "source_tables": ["comments"]}, "evidence": ""}
{"sample_id": 10011, "db_id": "codebase_community", "final": {"question": "Which user ID has the highest reputation?", "sql": "SELECT Id FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )", "source_tables": ["users"]}, "evidence": "highest reputation refers to Max(Reputation)"}
{"sample_id": 10012, "db_id": "codebase_community", "final": {"question": "Which user ID has the lowest view?", "sql": "SELECT Id FROM users WHERE Views = ( SELECT MIN(Views) FROM users )", "source_tables": ["users"]}, "evidence": "lowest views refers to Min(Views)"}
{"sample_id": 10013, "db_id": "codebase_community", "final": {"question": "How many users are awarded with supporter badge during year 2011?", "sql": "SELECT COUNT(Id) FROM badges WHERE STRFTIME('%Y', Date) = '2011' AND Name = 'Supporter'", "source_tables": ["badges"]}, "evidence": "\"Supporter\" is the Name of badge; in year 2011 refers to year(Date) = 2011"}
{"sample_id": 10014, "db_id": "codebase_community", "final": {"question": "How many users are awarded with more than 5 badges?", "sql": "SELECT COUNT(UserId) FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5", "source_tables": ["badges"]}, "evidence": "more than 5 badges refers to Count (Name) > 5; user refers to UserId"}
{"sample_id": 10015, "db_id": "codebase_community", "final": {"question": "How many users from New York have a teacher and supporter badge?", "sql": "SELECT COUNT(DISTINCT T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teacher') AND T2.Location = 'New York'", "source_tables": ["users", "badges"]}, "evidence": "\"Supporter\" and \"Teachers\" are both Name of badge; 'New York' is the Location; user refers to UserId"}
{"sample_id": 10016, "db_id": "codebase_community", "final": {"question": "Which user created post ID 1 and what is the reputation of this user?", "sql": "SELECT T2.Id, T2.Reputation FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.PostId = 1", "source_tables": ["users", "comments"]}, "evidence": ""}
{"sample_id": 10017, "db_id": "codebase_community", "final": {"question": "Which user have only one post history per post and having at least 1000 views?", "sql": "SELECT T2.UserId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.ViewCount >= 1000 GROUP BY T2.UserId HAVING COUNT(DISTINCT T2.PostHistoryTypeId) = 1", "source_tables": ["users", "posthistory", "posts"]}, "evidence": "having at least 1000 view refers to Views > = 1000; user refers to UserId"}
{"sample_id": 10018, "db_id": "codebase_community", "final": {"question": "Which users have posted the most comments. List out the user's badge?", "sql": "SELECT Name FROM badges AS T1 INNER JOIN comments AS T2 ON T1.UserId = t2.UserId GROUP BY T2.UserId ORDER BY COUNT(T2.UserId) DESC LIMIT 1", "source_tables": ["comments", "badges"]}, "evidence": "user with the most comments refers to UserId where Max(Count(Id)"}
{"sample_id": 10019, "db_id": "codebase_community", "final": {"question": "How many users from India have the teacher badges?", "sql": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'", "source_tables": ["users", "badges"]}, "evidence": "\"India\" is the Location; \"Teacher\" is the Name of badge"}
{"sample_id": 10020, "db_id": "codebase_community", "final": {"question": "What is the percentage difference of student badges given during 2010 and 2011?", "sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Student'", "source_tables": ["badges"]}, "evidence": "student badges refers to badge's name = 'Student'; during 2010 refers to Year(Date) = 2010; during 2011 refers to Year(Date) = 2011; percentage difference = Subtract (Divide(Count(Name where Year(Date) = 2010), Count (Name)) *100, Divide(Count(Name where Year(Date) = 2011), Count(Name)) * 100)"}
{"sample_id": 10021, "db_id": "codebase_community", "final": {"question": "What are the post history type IDs for post ID 3720 and how many unique users have commented on the post?", "sql": "SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS NumberOfUsers FROM postHistory AS T1 WHERE T1.PostId = 3720", "source_tables": ["comments", "posthistory"]}, "evidence": ""}
{"sample_id": 10022, "db_id": "codebase_community", "final": {"question": "List out all post that are related to post ID 61217 and what is the popularity of this post?", "sql": "SELECT T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217", "source_tables": ["postlinks", "posts"]}, "evidence": "post related refers to RelatedPostId; popularity refers to ViewCount"}
{"sample_id": 10023, "db_id": "codebase_community", "final": {"question": "What is the score and the link type ID for post ID 395?", "sql": "SELECT T1.Score, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 395", "source_tables": ["postlinks", "posts"]}, "evidence": ""}
{"sample_id": 10024, "db_id": "codebase_community", "final": {"question": "List out all post ID with score more than 60 and list out all the user ID that created these post.", "sql": "SELECT PostId, UserId FROM postHistory WHERE PostId IN ( SELECT Id FROM posts WHERE Score > 60 )", "source_tables": ["posthistory", "posts"]}, "evidence": "score more than 60 refers to Score > 60"}
{"sample_id": 10025, "db_id": "codebase_community", "final": {"question": "What is the sum of favourite count gained by user ID 686 in 2011?", "sql": "SELECT SUM(DISTINCT FavoriteCount) FROM posts WHERE Id IN ( SELECT PostId FROM postHistory WHERE UserId = 686 AND STRFTIME('%Y', CreationDate) = '2011' )", "source_tables": ["posthistory", "posts"]}, "evidence": "in 2011 refers to year (CreatinDate) = 2011"}
{"sample_id": 10026, "db_id": "codebase_community", "final": {"question": "What is the average of the up votes and the average user age for users creating more than 10 posts?", "sql": "SELECT AVG(T1.UpVotes), AVG(T1.Age) FROM users AS T1 INNER JOIN ( SELECT OwnerUserId, COUNT(*) AS post_count FROM posts GROUP BY OwnerUserId HAVING post_count > 10) AS T2 ON T1.Id = T2.OwnerUserId", "source_tables": ["users", "posts"]}, "evidence": "creating more than 10 post refers to Count (UserId) > 10; average of the up votes = Divide (Sum(UpVotes), Count (UserId)); average age = Divide (Sum(Age), Count(UserId))"}
{"sample_id": 10027, "db_id": "codebase_community", "final": {"question": "How many users obtained the \"Announcer\" badge?", "sql": "SELECT COUNT(id) FROM badges WHERE Name = 'Announcer'", "source_tables": ["badges"]}, "evidence": "\"Announcer\" is the Name of badge; user refers to UserId"}
{"sample_id": 10028, "db_id": "codebase_community", "final": {"question": "List out the name of badges that users obtained on 7/19/2010 7:39:08 PM.", "sql": "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0'", "source_tables": ["badges"]}, "evidence": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'"}
{"sample_id": 10029, "db_id": "codebase_community", "final": {"question": "How many positive comments are there on the list?", "sql": "SELECT COUNT(id) FROM comments WHERE score > 60", "source_tables": ["comments"]}, "evidence": "Positive comment refers to score > 60"}
{"sample_id": 10030, "db_id": "codebase_community", "final": {"question": "State the detailed content of the comment which was created on 7/19/2010 7:25:47 PM.", "sql": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'", "source_tables": ["comments"]}, "evidence": "detailed content of the comment refers to Text; created on 7/19/2010 7:16:14 PM refers to CreationDate = '2010-07-19 19:16:14.0'"}
{"sample_id": 10031, "db_id": "codebase_community", "final": {"question": "How many posts have a score of 10 on the list?", "sql": "SELECT COUNT(id) FROM posts WHERE Score = 10", "source_tables": ["posts"]}, "evidence": "score of 10 refers to Score = 10; post refers to Id"}
{"sample_id": 10032, "db_id": "codebase_community", "final": {"question": "What are the name of badge that users who have the highest reputation obtained?", "sql": "SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId ORDER BY T1.Reputation DESC LIMIT 1", "source_tables": ["users", "badges"]}, "evidence": "highest reputation refers to Max(Reputation); user refers to UserId"}
{"sample_id": 10033, "db_id": "codebase_community", "final": {"question": "Mention the reputation of users who had obtained the badge on 7/19/2010 7:39:08 PM.", "sql": "SELECT T1.Reputation FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0'", "source_tables": ["users", "badges"]}, "evidence": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'"}
{"sample_id": 10034, "db_id": "codebase_community", "final": {"question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?", "sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'", "source_tables": ["users", "badges"]}, "evidence": ""}
{"sample_id": 10035, "db_id": "codebase_community", "final": {"question": "List out the dates that users who are located in Rochester, NY obtained their badges?", "sql": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'", "source_tables": ["users", "badges"]}, "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId"}
{"sample_id": 10036, "db_id": "codebase_community", "final": {"question": "Among the users who obtained the \"Teacher\" badge, calculate their percentage of users", "sql": "SELECT CAST(COUNT(T1.Id) AS REAL) * 100 / (SELECT COUNT(Id) FROM users) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Teacher'", "source_tables": ["users", "badges"]}, "evidence": "\"Teacher\" is the Name of badge;  percentage = Divide (Count(UserId where it's \"Teacher\"), Count(UserId)) * 100"}
{"sample_id": 10037, "db_id": "codebase_community", "final": {"question": "Among the users who obtained the \"Organizer\" badges, calculate the percentage of users who are teenagers.", "sql": "SELECT CAST(SUM(IIF(T2.Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.'Name' = 'Organizer'", "source_tables": ["users", "badges"]}, "evidence": "\"Organizer\" is the Name of badge; teenager refers to Age BETWEEN 13 AND 18; percentage = Divide (Count(UserId where Age BETWEEN 13 AND 18), Count(UserId)) *100"}
{"sample_id": 10038, "db_id": "codebase_community", "final": {"question": "What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM", "sql": "SELECT T1.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:19:56.0'", "source_tables": ["comments", "posts"]}, "evidence": "created on 7/19/2010 7:19:56 PM refers to CreationDate = '2010-07-19 19:19:56.0'"}
{"sample_id": 10039, "db_id": "codebase_community", "final": {"question": "What is the detailed content of the comment of the post which was created on 7/19/2010 7:37:33 PM?", "sql": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:37:33.0'", "source_tables": ["comments", "posts"]}, "evidence": "detailed content of the comment refers to Text; created on 7/19/2010 7:37:33 PM CreationDate = 2010-07-19 19:37:33.0'"}
{"sample_id": 10040, "db_id": "codebase_community", "final": {"question": "List out the age of users who located in Vienna, Austria obtained the badge?", "sql": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'", "source_tables": ["users", "badges"]}, "evidence": "\"Vienna, Austria\" is the Location"}
{"sample_id": 10041, "db_id": "codebase_community", "final": {"question": "How many adults who obtained the badge Supporter?", "sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Supporter' AND T1.Age BETWEEN 19 AND 65", "source_tables": ["users", "badges"]}, "evidence": "Supporter is the Name of badge; adult refers to Age BETWEEN 19 AND 65"}
{"sample_id": 10042, "db_id": "codebase_community", "final": {"question": "State the number of views of users who obtained the badge on 7/19/2010 7:39:08 PM.", "sql": "SELECT T1.Views FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0'", "source_tables": ["users", "badges"]}, "evidence": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'"}
{"sample_id": 10043, "db_id": "codebase_community", "final": {"question": "What are the name of badges that users who have the lowest reputation obtained?", "sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation = (SELECT MIN(Reputation) FROM users)", "source_tables": ["users", "badges"]}, "evidence": "lowest reputation refers to Min(Reputation); user refers to UserId"}
{"sample_id": 10044, "db_id": "codebase_community", "final": {"question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.", "sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'", "source_tables": ["users", "badges"]}, "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId"}
{"sample_id": 10045, "db_id": "codebase_community", "final": {"question": "How many elders obtained the \"Supporter\" badge?", "sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Age > 65 AND T2.Name = 'Supporter'", "source_tables": ["users", "badges"]}, "evidence": "\"Supporter\" is the Name of badge;\u00a0 elders refers to Age > 65"}
{"sample_id": 10046, "db_id": "codebase_community", "final": {"question": "What is the name of user with the ID of 30?", "sql": "SELECT DisplayName FROM users WHERE Id = 30", "source_tables": ["users"]}, "evidence": "name of user refers to DisplayName;"}
{"sample_id": 10047, "db_id": "codebase_community", "final": {"question": "How many users were from New York?", "sql": "SELECT COUNT(Id) FROM users WHERE Location = 'New York'", "source_tables": ["users"]}, "evidence": "New York refers to Location;"}
{"sample_id": 10048, "db_id": "codebase_community", "final": {"question": "How many votes were made in 2010?", "sql": "SELECT COUNT(id) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'", "source_tables": ["votes"]}, "evidence": "YEAR(CreationDate) = 2010;"}
{"sample_id": 10049, "db_id": "codebase_community", "final": {"question": "How many users were adult?", "sql": "SELECT COUNT(id) FROM users WHERE Age BETWEEN 19 AND 65", "source_tables": ["users"]}, "evidence": "adult refers to user where Age BETWEEN 19 and 65;"}
{"sample_id": 10050, "db_id": "codebase_community", "final": {"question": "Which users have the highest number of views?", "sql": "SELECT Id, DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )", "source_tables": ["users"]}, "evidence": "users have the highest number of views refer to DisplayName where MAX(Views);"}
{"sample_id": 10051, "db_id": "codebase_community", "final": {"question": "Calculate the ratio of votes in 2010 and 2011.", "sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = '2010', 1, 0)) AS REAL) / SUM(IIF(STRFTIME('%Y', CreationDate) = '2011', 1, 0)) FROM votes", "source_tables": ["votes"]}, "evidence": "DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010), COUNT(Id where YEAR(CreationDate) = 2011)) FROM votes;"}
{"sample_id": 10052, "db_id": "codebase_community", "final": {"question": "What is the name of tags used by John Salvatier's?", "sql": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'", "source_tables": ["users", "posthistory", "posts"]}, "evidence": "DisplayName = 'John Salvatier';"}
{"sample_id": 10053, "db_id": "codebase_community", "final": {"question": "How many posts were created by Daniel Vassallo?", "sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Daniel Vassallo'", "source_tables": ["users", "posthistory"]}, "evidence": "DisplayName = 'Daniel Vassallo';"}
{"sample_id": 10054, "db_id": "codebase_community", "final": {"question": "How many votes were made by Harlan?", "sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN votes AS T3 ON T3.PostId = T2.PostId WHERE T1.DisplayName = 'Harlan'", "source_tables": ["votes", "users", "posthistory"]}, "evidence": "DisplayName = 'Harlan';"}
{"sample_id": 10055, "db_id": "codebase_community", "final": {"question": "Which post by slashnick has the most answers count? State the post ID.", "sql": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1", "source_tables": ["users", "posthistory", "posts"]}, "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';"}
{"sample_id": 10056, "db_id": "codebase_community", "final": {"question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?", "sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1", "source_tables": ["users", "posthistory", "posts"]}, "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';"}
{"sample_id": 10057, "db_id": "codebase_community", "final": {"question": "How many posts by Matt Parker have more than 4 votes?", "sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4", "source_tables": ["votes", "users", "posthistory", "posts"]}, "evidence": "more than 4 votes refer to PostId > 4; DisplayName = 'Matt Parker';"}
{"sample_id": 10058, "db_id": "codebase_community", "final": {"question": "How many negative comments did Neil McGuigan get in his posts?", "sql": "SELECT COUNT(T3.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T3.Score < 60", "source_tables": ["users", "comments", "posts"]}, "evidence": "Negative comment refers to score < 60; DisplayName = 'Neil McGuigan';"}
{"sample_id": 10059, "db_id": "codebase_community", "final": {"question": "State all the tags used by Mark Meckes in his posts that doesn't have comments.", "sql": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.CommentCount = 0", "source_tables": ["users", "posthistory", "posts"]}, "evidence": "used by Mark Meckes refers to DisplayName = 'Mark Meckes'; Doen't have comments refers to CommentCount = 0;"}
{"sample_id": 10060, "db_id": "codebase_community", "final": {"question": "List all the name of users that obtained the Organizer Badges.", "sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.'Name' = 'Organizer'", "source_tables": ["users", "badges"]}, "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';"}
{"sample_id": 10061, "db_id": "codebase_community", "final": {"question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.", "sql": "SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'", "source_tables": ["users", "posthistory", "tags"]}, "evidence": "DIVIDE(COUNT(PostId WHERE TagName = 'r')), (COUNT(PostId WHERE DisplayName = 'Community')) as percentage; R language refers to tagname = 'r'"}
{"sample_id": 10062, "db_id": "codebase_community", "final": {"question": "Calculate the difference in view count from post posted by Mornington and view count from posts posted by Amos.", "sql": "SELECT SUM(IIF(T1.DisplayName = 'Mornington', T3.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T3.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId", "source_tables": ["users", "posthistory", "posts"]}, "evidence": "calculation = SUBTRACT(SUM(ViewCount where DisplayName = 'Mornington'), SUM(ViewCount where DisplayName = 'Amos'));"}
{"sample_id": 10063, "db_id": "codebase_community", "final": {"question": "How many users received commentator badges in 2014?", "sql": "SELECT COUNT(Id) FROM badges WHERE Name = 'Commentator' AND STRFTIME('%Y', Date) = '2014'", "source_tables": ["badges"]}, "evidence": "Commentator is the name of the badge; year(Date) = 2014;"}
{"sample_id": 10139, "db_id": "superhero", "final": {"question": "Please list all the superpowers of 3-D Man.", "sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'", "source_tables": ["hero_power", "superhero", "superpower"]}, "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name"}
{"sample_id": 10140, "db_id": "superhero", "final": {"question": "How many superheroes have the super power of \"Super Strength\"?", "sql": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength'", "source_tables": ["hero_power", "superpower"]}, "evidence": "super power of \"Super Strength\" refers to power_name = 'Super Strength'"}
{"sample_id": 10141, "db_id": "superhero", "final": {"question": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200", "source_tables": ["hero_power", "superhero", "superpower"]}, "evidence": "super power of \"Super Strength\" refers to power_name = 'Super Strength'; a height of over 200cm refers to height_cm > 200"}
{"sample_id": 10142, "db_id": "superhero", "final": {"question": "Please list the full names of all the superheroes with over 15 super powers.", "sql": "SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15", "source_tables": ["hero_power", "superhero"]}, "evidence": "15 super powers refers to COUNT(full_name) > 15"}
{"sample_id": 10143, "db_id": "superhero", "final": {"question": "How many superheroes have blue eyes?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'", "source_tables": ["colour", "superhero"]}, "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id;"}
{"sample_id": 10144, "db_id": "superhero", "final": {"question": "What is the colour of Apocalypse's skin?", "sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'", "source_tables": ["colour", "superhero"]}, "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id"}
{"sample_id": 10145, "db_id": "superhero", "final": {"question": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'", "source_tables": ["hero_power", "colour", "superhero", "superpower"]}, "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'"}
{"sample_id": 10146, "db_id": "superhero", "final": {"question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'", "source_tables": ["colour", "superhero"]}, "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'"}
{"sample_id": 10147, "db_id": "superhero", "final": {"question": "How many superheroes are published by Marvel Comics?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'", "source_tables": ["publisher", "superhero"]}, "evidence": "published by Marvel Comics refers to publisher_name = 'Marvel Comics'"}
{"sample_id": 10148, "db_id": "superhero", "final": {"question": "Rank heroes published by Marvel Comics by their height in descending order.", "sql": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'", "source_tables": ["publisher", "superhero"]}, "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'"}
{"sample_id": 10149, "db_id": "superhero", "final": {"question": "Who is the publisher of Sauron?", "sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'", "source_tables": ["publisher", "superhero"]}, "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'"}
{"sample_id": 10150, "db_id": "superhero", "final": {"question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.", "sql": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour", "source_tables": ["colour", "publisher", "superhero"]}, "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;"}
{"sample_id": 10151, "db_id": "superhero", "final": {"question": "What is the average height of the superheroes from Marvel Comics?", "sql": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'", "source_tables": ["publisher", "superhero"]}, "evidence": "superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; average height of the superheroes refers to AVG(height_cm)"}
{"sample_id": 10152, "db_id": "superhero", "final": {"question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.", "sql": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)", "source_tables": ["hero_power", "publisher", "superhero", "superpower"]}, "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';"}
{"sample_id": 10153, "db_id": "superhero", "final": {"question": "How many superheroes did DC Comics publish?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'", "source_tables": ["publisher", "superhero"]}, "evidence": "superheroes that DC Comics published refers to publisher_name = 'DC Comics'"}
{"sample_id": 10154, "db_id": "superhero", "final": {"question": "Which publisher published the slowest superhero?", "sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value LIMIT 1", "source_tables": ["attribute", "hero_attribute", "publisher", "superhero"]}, "evidence": "the slowest superhero refers to attribute_name = 'Speed' where MIN(attribute_value); publisher refers to publisher_name"}
{"sample_id": 10155, "db_id": "superhero", "final": {"question": "How many gold-eyed superheroes did Marvel Comics publish?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Gold'", "source_tables": ["colour", "publisher", "superhero"]}, "evidence": "gold-eyed refers to colour = 'Gold' where eye_colour_id = colour.id; superheroes that Marvel Comics published refers to publisher_name = 'Marvel Comics'"}
{"sample_id": 10156, "db_id": "superhero", "final": {"question": "What is the publisher's name of Blue Beetle II?", "sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'", "source_tables": ["publisher", "superhero"]}, "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'"}
{"sample_id": 10157, "db_id": "superhero", "final": {"question": "How many superheroes with blonde hair are there?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond'", "source_tables": ["colour", "superhero"]}, "evidence": "superheroes with blonde hair refers to colour = 'Blond' where hair_colour_id = colour.id"}
{"sample_id": 10158, "db_id": "superhero", "final": {"question": "Who is the dumbest superhero?", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1", "source_tables": ["attribute", "hero_attribute", "superhero"]}, "evidence": "the dumbest superhero refers to MIN(attribute_value) where attribute_name = 'Intelligence'"}
{"sample_id": 10159, "db_id": "superhero", "final": {"question": "What is Copycat's race?", "sql": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'", "source_tables": ["race", "superhero"]}, "evidence": "Copycat is the superhero_name;"}
{"sample_id": 10160, "db_id": "superhero", "final": {"question": "Which superheroes have a durability attribute value of less than 50?", "sql": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)", "source_tables": ["attribute", "hero_attribute", "superhero"]}, "evidence": "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50"}
{"sample_id": 10161, "db_id": "superhero", "final": {"question": "What are the names of the superheroes with the power of death touch?", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'", "source_tables": ["hero_power", "superhero", "superpower"]}, "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'"}
{"sample_id": 10162, "db_id": "superhero", "final": {"question": "How many female superheroes have a strength value of 100?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T4.gender = 'Female'", "source_tables": ["attribute", "gender", "hero_attribute", "superhero"]}, "evidence": "female refers to gender = 'Female'; strength value of 100 refers to attribute_name = 'Strength' AND attribute_value = 100"}
{"sample_id": 10163, "db_id": "superhero", "final": {"question": "What is the name of the superhero that has the most powers?", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.hero_id) DESC LIMIT 1", "source_tables": ["hero_power", "superhero"]}, "evidence": "name of the superhero refers to superhero_name; superhero that has the most powers refers to MAX(COUNT(superhero_name))"}
{"sample_id": 10164, "db_id": "superhero", "final": {"question": "How many vampire superheroes are there?", "sql": "SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'", "source_tables": ["race", "superhero"]}, "evidence": "vampire superheroes refers to race = 'Vampire'"}
{"sample_id": 10165, "db_id": "superhero", "final": {"question": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.", "sql": "SELECT (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM superhero)), CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'", "source_tables": ["alignment", "publisher", "superhero"]}, "evidence": "published by Marvel Comics refers to publisher_name = 'Marvel Comics'; superheroes who act in their own self-interest or make decisions based on their own moral code refers to alignment = 'Bad'; calculation = MULTIPLY(DIVIDE(SUM(alignment = 'Bad); count(id)), 100)"}
{"sample_id": 10166, "db_id": "superhero", "final": {"question": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.", "sql": "SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id", "source_tables": ["publisher", "superhero"]}, "evidence": "DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; calculation = SUBTRACT(SUM(publisher_name = 'Marvel Comics'), SUM(publisher_name = 'DC Comics'))"}
{"sample_id": 10167, "db_id": "superhero", "final": {"question": "Give the publisher ID of Star Trek.", "sql": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'", "source_tables": ["publisher"]}, "evidence": "Star Trek is the publisher_name;"}
{"sample_id": 10168, "db_id": "superhero", "final": {"question": "Calculate the average attribute value of all superheroes.", "sql": "SELECT AVG(attribute_value) FROM hero_attribute", "source_tables": ["hero_attribute"]}, "evidence": "average attribute value of all superheroes refers to AVG(attribute_value)"}
{"sample_id": 10169, "db_id": "superhero", "final": {"question": "What is the total number of superheroes without full name?", "sql": "SELECT COUNT(id) FROM superhero WHERE full_name IS NULL", "source_tables": ["superhero"]}, "evidence": "superheroes without full name refers to full_name IS NULL"}
{"sample_id": 10170, "db_id": "superhero", "final": {"question": "What is the eye colour of superhero with superhero ID 75?", "sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75", "source_tables": ["colour", "superhero"]}, "evidence": "eye colour refers to colour where eye_colour_id = colour.id;"}
{"sample_id": 10171, "db_id": "superhero", "final": {"question": "Provide the superpowers of the superhero called Deathlok.", "sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'", "source_tables": ["hero_power", "superhero", "superpower"]}, "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'"}
{"sample_id": 10172, "db_id": "superhero", "final": {"question": "What is the average weight of all female superheroes?", "sql": "SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'", "source_tables": ["gender", "superhero"]}, "evidence": "female refers to gender = 'Female'; average weight refers to AVG(weight_kg)"}
{"sample_id": 10173, "db_id": "superhero", "final": {"question": "List down at least five superpowers of male superheroes.", "sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5", "source_tables": ["hero_power", "gender", "superhero", "superpower"]}, "evidence": "male refers to gender = 'Male'; superpowers refers to power_name;"}
{"sample_id": 10174, "db_id": "superhero", "final": {"question": "Give the name of the alien superheroes.", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'", "source_tables": ["race", "superhero"]}, "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;"}
{"sample_id": 10175, "db_id": "superhero", "final": {"question": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.", "sql": "SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'No Colour'", "source_tables": ["colour", "superhero"]}, "evidence": "height from 170 to 190 refers to height_cm BETWEEN 170 AND 190; no eye color refers to colour = 'No Colour'"}
{"sample_id": 10176, "db_id": "superhero", "final": {"question": "What is the superpower of hero ID 56?", "sql": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 56", "source_tables": ["hero_power", "superpower"]}, "evidence": "superpower refers to hero_power"}
{"sample_id": 10177, "db_id": "superhero", "final": {"question": "List down at least five full name of Demi-God superheroes.", "sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'", "source_tables": ["race", "superhero"]}, "evidence": "Demi-God superheroes refers to race = 'Demi-God'"}
{"sample_id": 10178, "db_id": "superhero", "final": {"question": "How many bad superheroes are there?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad'", "source_tables": ["alignment", "superhero"]}, "evidence": "bad superheroes refers to alignment_id = Bad"}
{"sample_id": 10179, "db_id": "superhero", "final": {"question": "Identify the race of the superhero who weighed 169 kg.", "sql": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169", "source_tables": ["race", "superhero"]}, "evidence": "weighed 169 kg refers to weight_kg = 169"}
{"sample_id": 10180, "db_id": "superhero", "final": {"question": "Provide the hair colour of the human superhero who is 185 cm tall.", "sql": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'", "source_tables": ["race", "colour", "superhero"]}, "evidence": "185 cm tall refers to height_cm = 185; human superhero refers to race = 'human'; hair colour refers to colour where hair_colour_id = colour.id;"}
{"sample_id": 10181, "db_id": "superhero", "final": {"question": "What is the eye clolour of the heaviest superhero?", "sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1", "source_tables": ["colour", "superhero"]}, "evidence": "the heaviest superhero refers to MAX(weight_kg); eye colour refers to colour where eye_colour_id = colour.id;"}
{"sample_id": 10182, "db_id": "superhero", "final": {"question": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180", "source_tables": ["publisher", "superhero"]}, "evidence": "height between 150 to 180 refers to height_cm BETWEEN 150 AND 180; heroes published by Marvel Comics refers to publisher_name = 'Marvel Comics'; calculation = MULTIPLY(DIVIDE(SUM(publisher.id = 13)), COUNT(publisher.id), 100)"}
{"sample_id": 10183, "db_id": "superhero", "final": {"question": "Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79", "source_tables": ["gender", "superhero"]}, "evidence": "super hero names refers to superhero_name;male superheros refers to gender = 'Male';Calculation = weight_kg > MULTIPLY(AVG(weight_kg), 0.79)"}
{"sample_id": 10184, "db_id": "superhero", "final": {"question": "Which power do superheroes have the most of?", "sql": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T2.power_name ORDER BY COUNT(T1.hero_id) DESC LIMIT 1", "source_tables": ["hero_power", "superpower"]}, "evidence": "power that superheroes have the most refers to MAX(COUNT(power_name))"}
{"sample_id": 10185, "db_id": "superhero", "final": {"question": "Indicate the attribute value of superhero Abomination.", "sql": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'", "source_tables": ["hero_attribute", "superhero"]}, "evidence": "Abomination refers to superhero_name = 'Abomination';"}
{"sample_id": 10186, "db_id": "superhero", "final": {"question": "What are the superpowers of heroes with ID 1?", "sql": "SELECT DISTINCT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1", "source_tables": ["hero_power", "superpower"]}, "evidence": "superpowers refers to power_name; heroes with ID 1 refers to hero_id = 1;"}
{"sample_id": 10187, "db_id": "superhero", "final": {"question": "How many heroes have stealth power?", "sql": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'", "source_tables": ["hero_power", "superpower"]}, "evidence": "stealth power refers to power_name = 'stealth';"}
{"sample_id": 10188, "db_id": "superhero", "final": {"question": "What is the hero's full name with the highest attribute in strength?", "sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1", "source_tables": ["attribute", "hero_attribute", "superhero"]}, "evidence": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';"}
{"sample_id": 10189, "db_id": "superhero", "final": {"question": "What is the average of superheroes with no skin colour?", "sql": "SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id", "source_tables": ["colour", "superhero"]}, "evidence": "average = DIVIDE(COUNT(superhero.id), SUM(skin_colour_id = 1)); no skin colour refers to skin_colour_id WHERE colour.id = 1;"}
{"sample_id": 10190, "db_id": "superhero", "final": {"question": "How many superheroes were published by Dark Horse Comics?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'", "source_tables": ["publisher", "superhero"]}, "evidence": "published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';"}
{"sample_id": 10191, "db_id": "superhero", "final": {"question": "Which superhero has the most durability published by Dark Horse Comics?", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1", "source_tables": ["attribute", "publisher", "hero_attribute", "superhero"]}, "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';"}
{"sample_id": 10192, "db_id": "superhero", "final": {"question": "What is the eyes colour of Abraham Sapien?", "sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'", "source_tables": ["colour", "superhero"]}, "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;"}
{"sample_id": 10193, "db_id": "superhero", "final": {"question": "List the name of superheroes with flight power.", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'", "source_tables": ["hero_power", "superhero", "superpower"]}, "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';"}
{"sample_id": 10194, "db_id": "superhero", "final": {"question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.", "sql": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'", "source_tables": ["gender", "publisher", "superhero"]}, "evidence": "eyes refers to eye_colour_id; hair refers to hair_colour_id; skin colour refers to skin_colour_id; female superheroes refers to gender = 'Female'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';"}
{"sample_id": 10195, "db_id": "superhero", "final": {"question": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero.", "sql": "SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.eye_colour_id = T1.hair_colour_id AND T1.eye_colour_id = T1.skin_colour_id", "source_tables": ["publisher", "superhero"]}, "evidence": "which superhero refers to superhero_name; the same eyes, hair and skin colour refers to hair_colour_id = skin_colour_id AND hair_colour_id = eye_colour_id; publisher refers to publisher_name;"}
{"sample_id": 10196, "db_id": "superhero", "final": {"question": "Which group does superhero A-Bomb belong to?", "sql": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'", "source_tables": ["race", "superhero"]}, "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';"}
{"sample_id": 10197, "db_id": "superhero", "final": {"question": "What is the percentage of blue female superheroes among all female superheroes?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.colour = 'Blue' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female'", "source_tables": ["gender", "colour", "superhero"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(colour = 'Blue' WHERE gender = 'Female'), COUNT(gender = 'Female')), 100); blue refers to the color = 'Blue' WHERE skin_colour_id = colour.id; female refers to gender = 'Female';"}
{"sample_id": 10198, "db_id": "superhero", "final": {"question": "Provide the hero name and race of Charles Chandler.", "sql": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'", "source_tables": ["race", "superhero"]}, "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;"}
{"sample_id": 10199, "db_id": "superhero", "final": {"question": "What is the gender of Agent 13 hero?", "sql": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'", "source_tables": ["gender", "superhero"]}, "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';"}
{"sample_id": 10200, "db_id": "superhero", "final": {"question": "Provide superheroes' names who have the adaptation power.", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'", "source_tables": ["hero_power", "superhero", "superpower"]}, "evidence": "adaptation power refers to power_name = 'Adaptation';"}
{"sample_id": 10201, "db_id": "superhero", "final": {"question": "How many powers does Amazo hero have?", "sql": "SELECT COUNT(T1.power_id) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo'", "source_tables": ["hero_power", "superhero"]}, "evidence": "Amazo hero refers to superhero_name = 'Amazo';"}
{"sample_id": 10202, "db_id": "superhero", "final": {"question": "List the powers of Hunter Zolomon.", "sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'", "source_tables": ["hero_power", "superhero", "superpower"]}, "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;"}
{"sample_id": 10203, "db_id": "superhero", "final": {"question": "Provide the heights of the heroes whose eye colours are amber.", "sql": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'", "source_tables": ["colour", "superhero"]}, "evidence": "heights of the heroes refers to height_cm; eye colours are amber refers to colour.colour = 'Amber' WHERE eye_colour_id = colour.id;"}
{"sample_id": 10204, "db_id": "superhero", "final": {"question": "List the heroes' names whose eyes and hair colours are both black.", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'", "source_tables": ["colour", "superhero"]}, "evidence": "heroes' names refers to superhero_name; eyes and hair colours are both black refers to eye_colour_id AND hair_colour_id WHERE colour.colour = 'Black';"}
{"sample_id": 10205, "db_id": "superhero", "final": {"question": "Provide the eye colours of the heroes whose skin colours are gold.", "sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T3.colour = 'Gold'", "source_tables": ["colour", "superhero"]}, "evidence": "skin colours are gold refers to colour.colour = 'Gold' WHERE skin_colour_id = colour.id;"}
{"sample_id": 10206, "db_id": "superhero", "final": {"question": "Provide the full names of vampire heroes.", "sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'", "source_tables": ["race", "superhero"]}, "evidence": "vampire heroes refers to race = 'Vampire';"}
{"sample_id": 10207, "db_id": "superhero", "final": {"question": "Describe the names of neutral alignment superheroes.", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'", "source_tables": ["alignment", "superhero"]}, "evidence": "names of superheroes refers to superhero_name; neutral alignment refers to alignment = 'Neutral';"}
{"sample_id": 10208, "db_id": "superhero", "final": {"question": "How many heroes have the highest attribute value in strength?", "sql": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute )", "source_tables": ["attribute", "hero_attribute"]}, "evidence": "highest attribute value in strength refers to MAX(attribute_value) WHERE attribute_name = 'Strength';"}
{"sample_id": 10209, "db_id": "superhero", "final": {"question": "What are the race and alignment of Cameron Hicks?", "sql": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'", "source_tables": ["race", "alignment", "superhero"]}, "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';"}
{"sample_id": 10210, "db_id": "superhero", "final": {"question": "How many percent of female heroes were published by Marvel Comics?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female'", "source_tables": ["gender", "publisher", "superhero"]}, "evidence": "percent = MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100); female heroes refers to gender = 'Female'; Marvel Comics refers to publisher_name = 'Marvel Comics';"}
{"sample_id": 10211, "db_id": "superhero", "final": {"question": "Find the average weight of the heroes who are aliens.", "sql": "SELECT CAST(SUM(T1.weight_kg) AS REAL) / COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'", "source_tables": ["race", "superhero"]}, "evidence": "average = AVG(weight_kg); aliens refers to race = 'Alien';"}
{"sample_id": 10212, "db_id": "superhero", "final": {"question": "Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight.", "sql": "SELECT ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Charles Chandler' ) AS CALCULATE", "source_tables": ["superhero"]}, "evidence": "difference = SUBTRACT(SUM(weight_kg WHERE full_name = 'Emil Blonsky'), SUM(weight_kg WHERE full_name = 'Charles Chandler')); Emil Blonsky is the full name of superhero; Charles Chandler is the full name of superhero;"}
{"sample_id": 10213, "db_id": "superhero", "final": {"question": "Calculate the average height for each superhero.", "sql": "SELECT CAST(SUM(height_cm) AS REAL) / COUNT(id) FROM superhero", "source_tables": ["superhero"]}, "evidence": "average = DIVIDE(SUM(height_cm), COUNT(all heros));"}
{"sample_id": 10214, "db_id": "superhero", "final": {"question": "What is Abomination's superpower?", "sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'", "source_tables": ["hero_power", "superhero", "superpower"]}, "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;"}
{"sample_id": 10215, "db_id": "superhero", "final": {"question": "Among the superheroes with the race of god/eternal, how many of them are male", "sql": "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T1.race_id = 21 AND T1.gender_id = 1", "source_tables": ["race", "gender", "superhero"]}, "evidence": "race \"god/eternal\" refers to race_id = 21; male refers to gender.id = 1"}
{"sample_id": 10268, "db_id": "formula_1", "final": {"question": "Please list the reference names of the drivers who are eliminated in the first period in race number 20.", "sql": "SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 20 ORDER BY T1.q1 DESC LIMIT 5", "source_tables": ["qualifying", "drivers"]}, "evidence": "driver reference name refers to driverRef; first qualifying period refers to q1; drivers who are eliminated in the first qualifying period refers to 5 drivers with MAX(q1); race number refers to raceId;"}
{"sample_id": 10269, "db_id": "formula_1", "final": {"question": "What is the surname of the driver with the best lap time in race number 19 in the second qualifying period?", "sql": "SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 19 ORDER BY T1.q2 ASC LIMIT 1", "source_tables": ["qualifying", "drivers"]}, "evidence": "race number refers to raceId; second qualifying period refers to q2; best lap time refers to MIN(q2);"}
{"sample_id": 10270, "db_id": "formula_1", "final": {"question": "Please list the year during which the race is held on circuits in Shanghai.", "sql": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'", "source_tables": ["races", "circuits"]}, "evidence": "Shanghai is a name of location;"}
{"sample_id": 10271, "db_id": "formula_1", "final": {"question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?", "sql": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'", "source_tables": ["races", "circuits"]}, "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;"}
{"sample_id": 10272, "db_id": "formula_1", "final": {"question": "Please give the name of the race held on the circuits in Germany.", "sql": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'", "source_tables": ["races", "circuits"]}, "evidence": "Germany is a name of country;"}
{"sample_id": 10273, "db_id": "formula_1", "final": {"question": "Please list the positions of the circuits built by the constructor Renault.", "sql": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Renault'", "source_tables": ["constructors", "constructorstandings"]}, "evidence": "Renault is a name of constructor;"}
{"sample_id": 10274, "db_id": "formula_1", "final": {"question": "How many races in the year 2010 are held on grand prixs outside Asia and Europe?", "sql": "SELECT COUNT(T3.raceId) FROM circuits AS T1 INNER JOIN races AS T3 ON T3.circuitID = T1.circuitId WHERE T1.country NOT IN ( 'Bahrain', 'China', 'Singapore', 'Japan', 'Korea', 'Turkey', 'UAE', 'Malaysia', 'Spain', 'Monaco', 'Azerbaijan', 'Austria', 'Belgium', 'France', 'Germany', 'Hungary', 'Italy', 'UK' ) AND T3.year = 2010", "source_tables": ["races", "circuits"]}, "evidence": ""}
{"sample_id": 10275, "db_id": "formula_1", "final": {"question": "Please give the names of the races held on the circuits in Spain.", "sql": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Spain'", "source_tables": ["races", "circuits"]}, "evidence": "Spain is a name of country;"}
{"sample_id": 10276, "db_id": "formula_1", "final": {"question": "What is the coordinates location of the circuits for Australian grand prix?", "sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Australian Grand Prix'", "source_tables": ["races", "circuits"]}, "evidence": "coordinate position/location refers to lat, lng; circuits for Australian grand prix refers to races.name = 'Australian Grand Prix'"}
{"sample_id": 10277, "db_id": "formula_1", "final": {"question": "Where can I find the information about the races held on Sepang International Circuit?", "sql": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'", "source_tables": ["races", "circuits"]}, "evidence": "information about races refers to url;"}
{"sample_id": 10278, "db_id": "formula_1", "final": {"question": "Please list the time of the races held on Sepang International Circuit.", "sql": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'", "source_tables": ["races", "circuits"]}, "evidence": ""}
{"sample_id": 10279, "db_id": "formula_1", "final": {"question": "Give the coordinate position for Abu Dhabi Grand Prix.", "sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'", "source_tables": ["races", "circuits"]}, "evidence": "coordinate position/location refers to lat, lng; Abu Dhabi Grand Prix refers to races.name = 'Abu Dhabi Grand Prix'"}
{"sample_id": 10280, "db_id": "formula_1", "final": {"question": "Which country is the constructor which got 1 point in the race No. 24 from?", "sql": "SELECT T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 24 AND T1.points = 1", "source_tables": ["constructors", "constructorresults"]}, "evidence": "race number refers to raceId;"}
{"sample_id": 10281, "db_id": "formula_1", "final": {"question": "What's Bruno Senna's Q1 result in the qualifying race No. 354?", "sql": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'", "source_tables": ["qualifying", "drivers"]}, "evidence": "race number refers to raceId; Bruno Senna refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;"}
{"sample_id": 10282, "db_id": "formula_1", "final": {"question": "For the driver who had the Q2 time as 0:01:40 in the qualifying race No. 355, what is his nationality?", "sql": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 355 AND T1.q2 LIKE '1:40%'", "source_tables": ["qualifying", "drivers"]}, "evidence": "race number refers to raceId;"}
{"sample_id": 10283, "db_id": "formula_1", "final": {"question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?", "sql": "SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'", "source_tables": ["qualifying", "drivers"]}, "evidence": "race number refers to raceId; finished 0:0M:SS in the Q3 refers to q3 LIKE 'M:SS%'"}
{"sample_id": 10284, "db_id": "formula_1", "final": {"question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?", "sql": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL", "source_tables": ["races", "results", "drivers"]}, "evidence": "Bahrain Grand Prix refers to races.name = 'Bahrain Grand Prix'; drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL);"}
{"sample_id": 10285, "db_id": "formula_1", "final": {"question": "Show me the season page of year when the race No. 901 took place.", "sql": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901", "source_tables": ["races", "seasons"]}, "evidence": "race number refers to raceId;"}
{"sample_id": 10286, "db_id": "formula_1", "final": {"question": "For the race happened on 2015/11/29, how many drivers finished the game?", "sql": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NOT NULL", "source_tables": ["races", "results"]}, "evidence": "game and race are synonyms; drivers who finished the race should have record in time;"}
{"sample_id": 10287, "db_id": "formula_1", "final": {"question": "For all the drivers who finished the game in race No. 592, who is the oldest?", "sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC LIMIT 1", "source_tables": ["results", "drivers"]}, "evidence": "drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL); race number refers to raceId; date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;"}
{"sample_id": 10288, "db_id": "formula_1", "final": {"question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.", "sql": "SELECT DISTINCT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'", "source_tables": ["drivers", "laptimes"]}, "evidence": "player and driver are synonyms; the lap time of 0:0M:SS refers to lapTime.time LIKE 'M:SS%';race number refers to raceId; introduction website of the drivers refers to url;"}
{"sample_id": 10289, "db_id": "formula_1", "final": {"question": "For the driver who set the fastest lap speed in race No.933, where does he come from?", "sql": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 933 AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1", "source_tables": ["results", "drivers"]}, "evidence": "fastest lap speed refers to MAX(fastestLapSpeed);"}
{"sample_id": 10290, "db_id": "formula_1", "final": {"question": "Where is Malaysian Grand Prix held? Give the location coordinates.", "sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian Grand Prix'", "source_tables": ["races", "circuits"]}, "evidence": "location coordinates refers to (lat, lng); Malaysian Grand Prix refers to races.name = 'Malaysian Grand Prix'"}
{"sample_id": 10291, "db_id": "formula_1", "final": {"question": "For the constructor which got the highest point in the race No. 9 , what is its introduction website?", "sql": "SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 9 ORDER BY T1.points DESC LIMIT 1", "source_tables": ["constructors", "constructorresults"]}, "evidence": "race number refers to raceId; constructor which got the highest point refers to MAX(constructorResults.points); introduction website of the constructor refers to url;"}
{"sample_id": 10292, "db_id": "formula_1", "final": {"question": "What's Lucas di Grassi's Q1 result in the race No. 345?", "sql": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 345 AND T2.forename = 'Lucas' AND T2.surname = 'di Grassi'", "source_tables": ["qualifying", "drivers"]}, "evidence": "race number refers to raceId;"}
{"sample_id": 10293, "db_id": "formula_1", "final": {"question": "For the driver who had the Q2 time as 0:01:15 in race No. 347, where is he from?", "sql": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 347 AND T1.q2 LIKE '1:15%'", "source_tables": ["qualifying", "drivers"]}, "evidence": "race number refers to raceId;"}
{"sample_id": 10294, "db_id": "formula_1", "final": {"question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?", "sql": "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'", "source_tables": ["qualifying", "drivers"]}, "evidence": "race number refers to raceId; had the Q3 time as 0:0M:SS refers to q3 LIKE 'M:SS%'"}
{"sample_id": 10295, "db_id": "formula_1", "final": {"question": "What is the actual finish time for Bruce McLaren in the race No.743?", "sql": "SELECT T2.time FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 743 AND T1.forename = 'Bruce' AND T1.surname = 'McLaren'", "source_tables": ["results", "drivers"]}, "evidence": "race number refers to raceId;"}
{"sample_id": 10296, "db_id": "formula_1", "final": {"question": "Who finished second in the San Marino Grand Prix in 2006?", "sql": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2006 AND T1.name = 'San Marino Grand Prix' AND T2.position = 2", "source_tables": ["races", "results", "drivers"]}, "evidence": "finished second refers to position = 2;"}
{"sample_id": 10297, "db_id": "formula_1", "final": {"question": "Show me the season page of year when the race No. 901 took place.", "sql": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901", "source_tables": ["races", "seasons"]}, "evidence": "the season page refers to url; race number refers to raceId;"}
{"sample_id": 10298, "db_id": "formula_1", "final": {"question": "For the race happened in 2015/11/29, how many drivers did not finish the game?", "sql": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NULL", "source_tables": ["races", "results"]}, "evidence": "game and race are synonyms; drivers who didn't finish the race should have record in time;"}
{"sample_id": 10299, "db_id": "formula_1", "final": {"question": "For all the drivers who finished the game in race No. 872, who is the youngest?", "sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1", "source_tables": ["results", "drivers"]}, "evidence": "race number refers to raceId; drivers who finished the race refers to time has value; the youngest is a driver where MAX(dob);"}
{"sample_id": 10300, "db_id": "formula_1", "final": {"question": "Who was the driver that got the best lap time in the race No. 348? Give his full name.", "sql": "SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 348 ORDER BY T1.time ASC LIMIT 1", "source_tables": ["drivers", "laptimes"]}, "evidence": "race number refers to raceId; the best lap time refers to MIN(time)"}
{"sample_id": 10301, "db_id": "formula_1", "final": {"question": "For the driver who set the fastest lap speed, what is his nationality?", "sql": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId ORDER BY T2.fastestLapSpeed DESC LIMIT 1", "source_tables": ["results", "drivers"]}, "evidence": "the fastest lap speed refers to (MAX) fastestLapSpeed;"}
{"sample_id": 10302, "db_id": "formula_1", "final": {"question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?", "sql": "SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'", "source_tables": ["results", "drivers"]}, "evidence": "Paul di Resta refers to the full name of the driver; Full name of the driver refers to drivers.forename ='Paul' and drivers.surname = 'di Resta'; race number refers to raceId; percentage = DIVIDE(SUBTRACT(fastestLapSpeed(raceId = 853), (fastestLapSpeed (raceId = 854)) * 100 , (fastestLapSpeed(raceId = 853))"}
{"sample_id": 10303, "db_id": "formula_1", "final": {"question": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.time IS NOT NULL THEN T2.driverId END) AS REAL) * 100 / COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '1983-07-16'", "source_tables": ["races", "results"]}, "evidence": "DIVIDE(COUNT(driverid when time has value ), (COUNT(driverid )) as percentage; in 1983/7/16 refers to when date = '1983-07-16'"}
{"sample_id": 10304, "db_id": "formula_1", "final": {"question": "Which year was the first Singapore Grand Prix?", "sql": "SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year ASC LIMIT 1", "source_tables": ["races"]}, "evidence": "the first race refers to race happened in min(year);"}
{"sample_id": 10305, "db_id": "formula_1", "final": {"question": "How many races were there in 2005? Name all the races in descending order.", "sql": "SELECT name FROM races WHERE year = 2005 ORDER BY name DESC", "source_tables": ["races"]}, "evidence": ""}
{"sample_id": 10306, "db_id": "formula_1", "final": {"question": "List the names of all races that occurred in the earliest recorded year and month.", "sql": "SELECT name FROM races WHERE STRFTIME('%Y', date) = ( SELECT STRFTIME('%Y', date) FROM races ORDER BY date ASC LIMIT 1 ) AND STRFTIME('%m', date) = ( SELECT STRFTIME('%m', date) FROM races ORDER BY date ASC LIMIT 1 )", "source_tables": ["races"]}, "evidence": "earliest recorded year and month refers to year = year(min(date)) and month = month(min(date));"}
{"sample_id": 10307, "db_id": "formula_1", "final": {"question": "State the name and date of the last round of race in year 1999.", "sql": "SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1", "source_tables": ["races"]}, "evidence": "the last round refers to max(round);"}
{"sample_id": 10308, "db_id": "formula_1", "final": {"question": "Which year has the most number of races?", "sql": "SELECT year FROM races GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1", "source_tables": ["races"]}, "evidence": "the most number of races refers to max(round);"}
{"sample_id": 10309, "db_id": "formula_1", "final": {"question": "Name the races in year 2017 that are not hosted in year 2000.", "sql": "SELECT name FROM races WHERE year = 2017 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 )", "source_tables": ["races"]}, "evidence": "not hosted means not in;"}
{"sample_id": 10310, "db_id": "formula_1", "final": {"question": "In which country was the first European Grand Prix hosted? Name the circuit and location.", "sql": "SELECT T1.country, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix' ORDER BY T2.year ASC LIMIT 1", "source_tables": ["races", "circuits"]}, "evidence": "the first refers to min(year);"}
{"sample_id": 10311, "db_id": "formula_1", "final": {"question": "When was the last f1 season whereby Brands Hatch hosted the British Grand Prix?", "sql": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1", "source_tables": ["races", "circuits"]}, "evidence": "the last refers to max(year);"}
{"sample_id": 10312, "db_id": "formula_1", "final": {"question": "How many seasons has Silverstone Circuit hosted the United Kindom grand prix?", "sql": "SELECT COUNT(T2.circuitid) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit' AND T2.name = 'British Grand Prix'", "source_tables": ["races", "circuits"]}, "evidence": "British Grand Prix is the name of race; British refers to the United Kindom"}
{"sample_id": 10313, "db_id": "formula_1", "final": {"question": "Name all drivers in the 2010 Singapore Grand Prix order by their position stands.", "sql": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Singapore Grand Prix' AND T1.year = 2010 ORDER BY T2.position ASC", "source_tables": ["races", "driverstandings", "drivers"]}, "evidence": ""}
{"sample_id": 10314, "db_id": "formula_1", "final": {"question": "State the driver with the most points scored. Find his full name with that points.", "sql": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId ORDER BY T2.points DESC LIMIT 1", "source_tables": ["races", "driverstandings", "drivers"]}, "evidence": "the most points scored refers to max(points); Full name of the driver refers to drivers.forename and drivers.surname;"}
{"sample_id": 10315, "db_id": "formula_1", "final": {"question": "Name the top 3 drivers and the points they scored in the 2017 Chinese Grand Prix.", "sql": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Chinese Grand Prix' AND T1.year = 2017 ORDER BY T2.points DESC LIMIT 3", "source_tables": ["races", "driverstandings", "drivers"]}, "evidence": ""}
{"sample_id": 10316, "db_id": "formula_1", "final": {"question": "What is the best lap time recorded? List the driver and race with such recorded lap time.", "sql": "SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1", "source_tables": ["races", "drivers", "laptimes"]}, "evidence": "the best lap time refers to min(milliseconds); List the driver refers to drivers.forename and drivers.surname; List the race refers to races.name"}
{"sample_id": 10317, "db_id": "formula_1", "final": {"question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?", "sql": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'", "source_tables": ["races", "drivers", "laptimes"]}, "evidence": "average lap time = AVG(milliseconds); 'Lewis Hamilton' refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; 'Malaysian Grand Prix' refers to races.name = 'Malaysian Grand Prix'"}
{"sample_id": 10318, "db_id": "formula_1", "final": {"question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.", "sql": "SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010", "source_tables": ["races", "driverstandings", "drivers"]}, "evidence": "percentage = DIVIDE(COUNT(raceId) where surname = 'Hamilton' and position>1), (COUNT(raceId) where surname = 'Hamilton'); since 2010 refers to year >= 2010"}
{"sample_id": 10319, "db_id": "formula_1", "final": {"question": "Name the driver with the most winning. Mention his nationality and what is his maximum point scores.", "sql": "SELECT T1.forename, T1.surname, T1.nationality, MAX(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId WHERE T2.wins >= 1 GROUP BY T1.forename, T1.surname, T1.nationality ORDER BY COUNT(T2.wins) DESC LIMIT 1", "source_tables": ["driverstandings", "drivers"]}, "evidence": "Full name of the driver refers to drivers.forename and drivers.surname; the most winning refers to MAX(COUNT(wins)); average point scores refers to MAX(points);"}
{"sample_id": 10320, "db_id": "formula_1", "final": {"question": "How old is the youngest Japanese driver? What is his name?", "sql": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1", "source_tables": ["drivers"]}, "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);"}
{"sample_id": 10321, "db_id": "formula_1", "final": {"question": "List circuits which host 4 f1 races from year 1990 to 2000.", "sql": "SELECT DISTINCT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE STRFTIME('%Y', T2.date) BETWEEN '1990' AND '2000' GROUP BY T1.name HAVING COUNT(T2.raceId) = 4", "source_tables": ["races", "circuits"]}, "evidence": "from year 1990 to 2000 refers to year(date) between 1990 and 2000;"}
{"sample_id": 10322, "db_id": "formula_1", "final": {"question": "List circuits in USA which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted.", "sql": "SELECT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'USA' AND T2.year = 2006", "source_tables": ["races", "circuits"]}, "evidence": ""}
{"sample_id": 10323, "db_id": "formula_1", "final": {"question": "Name the races along with its circuit name and location for f1 races hosted in September 2005.", "sql": "SELECT DISTINCT T2.name, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2005 AND STRFTIME('%m', T2.date) = '09'", "source_tables": ["races", "circuits"]}, "evidence": "in September 2005 refers to MONTH(date) = 9 and YEAR(date) = 2005"}
{"sample_id": 10324, "db_id": "formula_1", "final": {"question": "Which race was Alex Yoong in when he was in track number less than 20?", "sql": "SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20", "source_tables": ["races", "driverstandings", "drivers"]}, "evidence": "Alex Yoong refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;track number less than 10 refers to position < 20"}
{"sample_id": 10325, "db_id": "formula_1", "final": {"question": "How many times did Michael Schumacher won from races hosted in Sepang International Circuit?", "sql": "SELECT SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T4.circuitId = T3.circuitId WHERE T1.forename = 'Michael' AND T1.surname = 'Schumacher' AND T4.name = 'Sepang International Circuit'", "source_tables": ["races", "driverstandings", "drivers", "circuits"]}, "evidence": "win from races refers to max(points)"}
{"sample_id": 10326, "db_id": "formula_1", "final": {"question": "State the race and year of race in which Michael Schumacher had his fastest lap.", "sql": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds ASC LIMIT 1", "source_tables": ["races", "drivers", "laptimes"]}, "evidence": "fastest lap refers to min(milliseconds); Alex Yoong refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;"}
{"sample_id": 10327, "db_id": "formula_1", "final": {"question": "What is Eddie Irvine's average points scored in year 2000?", "sql": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T3.year = 2000", "source_tables": ["races", "driverstandings", "drivers"]}, "evidence": "average points = AVG(points where year = 2000)"}
{"sample_id": 10328, "db_id": "formula_1", "final": {"question": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?", "sql": "SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1", "source_tables": ["races", "driverstandings", "drivers"]}, "evidence": "first race refers to min(Year); Lewis Hamiltonrefers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;"}
{"sample_id": 10329, "db_id": "formula_1", "final": {"question": "List all races in 2017 and the hosting country order by date of the event.", "sql": "SELECT DISTINCT T2.name, T1.country FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2017 ORDER BY T2.date ASC", "source_tables": ["races", "circuits"]}, "evidence": ""}
{"sample_id": 10330, "db_id": "formula_1", "final": {"question": "What is the most laps f1 races had? Name the race, year and circuit location where the races with most laps was hosted.", "sql": "SELECT T3.lap, T2.name, T2.year, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN lapTimes AS T3 ON T3.raceId = T2.raceId ORDER BY T3.lap DESC LIMIT 1", "source_tables": ["races", "circuits", "laptimes"]}, "evidence": ""}
{"sample_id": 10331, "db_id": "formula_1", "final": {"question": "Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix'", "source_tables": ["races", "circuits"]}, "evidence": "European Grand Prix races refers to races.name = 'European Grand Prix';percentage = divide(COUNT(races where country = Germany and name = 'Europearn Grand Prix'),COUNT(races where name = 'Europearn Grand Prix'))*100"}
{"sample_id": 10332, "db_id": "formula_1", "final": {"question": "What's the location coordinates of Silverstone Circuit?", "sql": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'", "source_tables": ["circuits"]}, "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'"}
{"sample_id": 10333, "db_id": "formula_1", "final": {"question": "Which of these circuits is located at a higher latitude, Silverstone Circuit, Hockenheimring or Hungaroring?", "sql": "SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1", "source_tables": ["circuits"]}, "evidence": "higher latitude refers to max(lat)"}
{"sample_id": 10334, "db_id": "formula_1", "final": {"question": "What's the reference name of Marina Bay Street Circuit?", "sql": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'", "source_tables": ["circuits"]}, "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'"}
{"sample_id": 10335, "db_id": "formula_1", "final": {"question": "In which country can I find the circuit with the highest altitude?", "sql": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1", "source_tables": ["circuits"]}, "evidence": "highest altitude refers to max(alt)"}
{"sample_id": 10336, "db_id": "formula_1", "final": {"question": "How many drivers don't have a code?", "sql": "SELECT COUNT(driverId) - COUNT(CASE WHEN code IS NOT NULL THEN code END) FROM drivers", "source_tables": ["drivers"]}, "evidence": "don't have a code refers to code is null"}
{"sample_id": 10337, "db_id": "formula_1", "final": {"question": "Which country is the oldest driver from?", "sql": "SELECT nationality FROM drivers WHERE dob IS NOT NULL ORDER BY dob ASC LIMIT 1", "source_tables": ["drivers"]}, "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;"}
{"sample_id": 10338, "db_id": "formula_1", "final": {"question": "Please list the surnames of all the Italian drivers.", "sql": "SELECT surname FROM drivers WHERE nationality = 'Italian'", "source_tables": ["drivers"]}, "evidence": "Italian refers to nationality = 'italian'"}
{"sample_id": 10339, "db_id": "formula_1", "final": {"question": "Which website should I go to if I want to know more about Anthony Davidson?", "sql": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'", "source_tables": ["drivers"]}, "evidence": "website refers to url"}
{"sample_id": 10340, "db_id": "formula_1", "final": {"question": "What's Lewis Hamilton's reference name?", "sql": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'", "source_tables": ["drivers"]}, "evidence": "reference name refers to driverRef"}
{"sample_id": 10341, "db_id": "formula_1", "final": {"question": "Which circuit did the 2009 Spanish Grand Prix use?", "sql": "SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'", "source_tables": ["races", "circuits"]}, "evidence": ""}
{"sample_id": 10342, "db_id": "formula_1", "final": {"question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.", "sql": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'", "source_tables": ["races", "circuits"]}, "evidence": ""}
{"sample_id": 10343, "db_id": "formula_1", "final": {"question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.", "sql": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'", "source_tables": ["races", "circuits"]}, "evidence": "more information refers to url"}
{"sample_id": 10344, "db_id": "formula_1", "final": {"question": "What time did the the 2010's Formula_1 race took place on the Abu Dhabi Circuit?", "sql": "SELECT T2.date, T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2010 AND T2.name = 'Abu Dhabi Grand Prix'", "source_tables": ["races", "circuits"]}, "evidence": ""}
{"sample_id": 10345, "db_id": "formula_1", "final": {"question": "How many Formula_1 races took place on the circuits in Italy?", "sql": "SELECT COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Italy'", "source_tables": ["races", "circuits"]}, "evidence": ""}
{"sample_id": 10346, "db_id": "formula_1", "final": {"question": "Please list the exact dates on which a Formula_1 race took place on the Barcelona-Catalunya circuit.", "sql": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'", "source_tables": ["races", "circuits"]}, "evidence": ""}
{"sample_id": 10347, "db_id": "formula_1", "final": {"question": "Please give the link of the website that shows more information about the circuits the Spanish Grand Prix used in 2009.", "sql": "SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'", "source_tables": ["races", "circuits"]}, "evidence": "link of the website refers to url"}
{"sample_id": 10348, "db_id": "formula_1", "final": {"question": "What's the fastest lap time ever in a race for Lewis Hamilton?", "sql": "SELECT T2.fastestLapTime FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1", "source_tables": ["results", "drivers"]}, "evidence": "fastest lap time ever refers to min(fastestLapTime)"}
{"sample_id": 10349, "db_id": "formula_1", "final": {"question": "Which driver created the fastest lap speed in a Formula_1 race? Please give both his forename and surname.", "sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1", "source_tables": ["results", "drivers"]}, "evidence": ""}
{"sample_id": 10350, "db_id": "formula_1", "final": {"question": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name.", "sql": "SELECT T3.forename, T3.surname, T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Canadian Grand Prix' AND T2.rank = 1 AND T1.year = 2007", "source_tables": ["races", "results", "drivers"]}, "evidence": "reference name refers to driverRef; Canadian Grand Prix refers to races.name = 'Canadian Grand Prix';"}
{"sample_id": 10351, "db_id": "formula_1", "final": {"question": "Please list the Formula_1 races that Lewis Hamilton participated.", "sql": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'", "source_tables": ["races", "results", "drivers"]}, "evidence": ""}
{"sample_id": 10352, "db_id": "formula_1", "final": {"question": "In which Formula_1 race did Lewis Hamilton rank the highest?", "sql": "SELECT name FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )", "source_tables": ["races", "results", "drivers"]}, "evidence": "rank the highest refers to min(rank); Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;"}
{"sample_id": 10353, "db_id": "formula_1", "final": {"question": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?", "sql": "SELECT T2.fastestLapSpeed FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009 AND T2.fastestLapSpeed IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1", "source_tables": ["races", "results"]}, "evidence": "the fastest lap speed among all refers to max(fastestLapSpeed); Spanish Grand Prix refers to races.name = 'Spanish Grand Prix';"}
{"sample_id": 10354, "db_id": "formula_1", "final": {"question": "In which years did Lewis Hamilton participate in a Formula_1 race?", "sql": "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'", "source_tables": ["races", "results", "drivers"]}, "evidence": ""}
{"sample_id": 10355, "db_id": "formula_1", "final": {"question": "What was Lewis Hamilton's final rank in the 2008 Chinese Grand Prix?", "sql": "SELECT T2.positionOrder FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.name = 'Chinese Grand Prix' AND T1.year = 2008", "source_tables": ["races", "results", "drivers"]}, "evidence": "Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; final rank refers to positionOrder; Chinese Grand Prix refers to races.name = 'Chinese Grand Prix';"}
{"sample_id": 10356, "db_id": "formula_1", "final": {"question": "Which driver was in the no. 4 grid formation when starting the race in 1989's Australian Grand Prix? Please give his forename and surname.", "sql": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T2.grid = 4 AND T1.name = 'Australian Grand Prix' AND T1.year = 1989", "source_tables": ["races", "results", "drivers"]}, "evidence": "the no. 4 grid formation refers to grid = 4"}
{"sample_id": 10357, "db_id": "formula_1", "final": {"question": "How many drivers managed to finish the race in the 2008 Australian Grand Prix?", "sql": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.time IS NOT NULL", "source_tables": ["races", "results"]}, "evidence": "managed to finish the race refers to time is not null"}
{"sample_id": 10358, "db_id": "formula_1", "final": {"question": "Which was the fastest lap for Lewis Hamilton in the 2008 Australian Grand Prix?", "sql": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton'", "source_tables": ["results", "drivers", "races"]}, "evidence": ""}
{"sample_id": 10359, "db_id": "formula_1", "final": {"question": "What's the finish time for the driver who ranked second in 2008's AustChineseralian Grand Prix?", "sql": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank = 2 AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008", "source_tables": ["results", "races"]}, "evidence": "finish time refers to time; Chinese Grand Prix refers to races.name = 'Chinese Grand Prix';"}
{"sample_id": 10360, "db_id": "formula_1", "final": {"question": "Who was the champion of 2008's Australian Grand Prix and where can I know more about him?", "sql": "SELECT T1.forename, T1.surname, T1.url FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T2.time LIKE '_:%:__.___' AND T3.year = 2008", "source_tables": ["results", "drivers", "races"]}, "evidence": "only champion's finished time is represented by 'HH:MM:SS.mmm'; where can I know more refers to url"}
{"sample_id": 10361, "db_id": "formula_1", "final": {"question": "How many drivers from the UN participated in the 2008 Australian Grand Prix?", "sql": "SELECT COUNT(*) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T1.nationality = 'British' AND T3.year = 2008", "source_tables": ["results", "drivers", "races"]}, "evidence": "from the UN refers to nationality = 'British'"}
{"sample_id": 10362, "db_id": "formula_1", "final": {"question": "Among the drivers that finished the race in the 2008 Chinese Grand Prix, how many of them have participated in Formula_1 races?", "sql": "SELECT COUNT(*) FROM ( SELECT T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Chinese Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL GROUP BY T1.driverId HAVING COUNT(T2.raceId) > 0 )", "source_tables": ["results", "races"]}, "evidence": "COUNT(raceID) > 0 reveals that this driver participated in races; drivers who finished the race refers to time has value."}
{"sample_id": 10363, "db_id": "formula_1", "final": {"question": "How many points did Lewis Hamilton get in total in all the Formula_1 races he participated?", "sql": "SELECT SUM(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'", "source_tables": ["results", "drivers"]}, "evidence": ""}
{"sample_id": 10364, "db_id": "formula_1", "final": {"question": "What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races?", "sql": "SELECT AVG(CAST(SUBSTR(T2.fastestLapTime, 1, INSTR(T2.fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, ':') + 1) AS REAL)) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.surname = 'Hamilton' AND T1.forename = 'Lewis'", "source_tables": ["results", "drivers"]}, "evidence": "average fastest lap time = avg(fastestLapTime); The time is recorded on 'MM:SS.mmm'"}
{"sample_id": 10365, "db_id": "formula_1", "final": {"question": "What is the rate of drivers completing all the laps in the 2008 Australian Grand Prix?", "sql": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.resultId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008", "source_tables": ["results", "races"]}, "evidence": "completing all the laps refers to time is not null; rate = divide(COUNT(raceID where time is not null), COUNT(raceID))"}
{"sample_id": 10366, "db_id": "formula_1", "final": {"question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?", "sql": "WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)", "source_tables": ["champion_time", "last_driver_incremental", "results", "races", "time_in_seconds"]}, "evidence": "how much faster in percentage = divide(subtract(incremental time, champion time), last_driver time) * 100; last driver finished time = incremental time + champion time; only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null"}
{"sample_id": 10367, "db_id": "formula_1", "final": {"question": "How many circuits are there in Adelaide, Australia?", "sql": "SELECT COUNT(circuitId) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia'", "source_tables": ["circuits"]}, "evidence": "Australia is the country; Melbourne is the location of circuit;"}
{"sample_id": 10368, "db_id": "formula_1", "final": {"question": "Please list the location coordinates of the US circuits.", "sql": "SELECT lat, lng FROM circuits WHERE country = 'USA'", "source_tables": ["circuits"]}, "evidence": "location coordinates refers to (lat, lng); the US refers to country = 'USA';"}
{"sample_id": 10369, "db_id": "formula_1", "final": {"question": "How many British drivers were born after 1980?", "sql": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'", "source_tables": ["drivers"]}, "evidence": "born after 1980 refers to year (dob) >1980;"}
{"sample_id": 10370, "db_id": "formula_1", "final": {"question": "What are the maximum points of British constructors?", "sql": "SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'", "source_tables": ["constructors", "constructorstandings"]}, "evidence": "maximum points = MAX(points); British is a nationality"}
{"sample_id": 10371, "db_id": "formula_1", "final": {"question": "Which constructor has the highest point?", "sql": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId ORDER BY T1.points DESC LIMIT 1", "source_tables": ["constructors", "constructorstandings"]}, "evidence": ""}
{"sample_id": 10442, "db_id": "european_football_2", "final": {"question": "Which player has the highest overall rating? Indicate the player's api id.", "sql": "SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1", "source_tables": ["player_attributes"]}, "evidence": "highest overall rating refers to MAX(overall_rating);"}
{"sample_id": 10443, "db_id": "european_football_2", "final": {"question": "What is the height of the tallest player? Indicate his name.", "sql": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1", "source_tables": ["player"]}, "evidence": "tallest player refers to MAX(height);"}
{"sample_id": 10444, "db_id": "european_football_2", "final": {"question": "What is the preferred foot when attacking of the player with the lowest potential?", "sql": "SELECT preferred_foot FROM Player_Attributes WHERE potential IS NOT NULL ORDER BY potential ASC LIMIT 1", "source_tables": ["player_attributes"]}, "evidence": "preferred foot when attacking refers to preferred_foot; lowest potential refers to MIN(potential);"}
{"sample_id": 10445, "db_id": "european_football_2", "final": {"question": "Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing?", "sql": "SELECT COUNT(id) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low'", "source_tables": ["player_attributes"]}, "evidence": "overall_rating > = 60 AND overall_rating < 65; players whose going to be in all of your attack moves instead of defensing refers to defensive_work_rate = 'low';"}
{"sample_id": 10446, "db_id": "european_football_2", "final": {"question": "Who are the top 5 players who perform better in crossing actions? Indicate their player id.", "sql": "SELECT id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5", "source_tables": ["player_attributes"]}, "evidence": "perform better in crossing actions refers to MAX(crossing)"}
{"sample_id": 10447, "db_id": "european_football_2", "final": {"question": "Give the name of the league had the most goals in the 2016 season?", "sql": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' GROUP BY t2.name ORDER BY SUM(t1.home_team_goal + t1.away_team_goal) DESC LIMIT 1", "source_tables": ["league", "match"]}, "evidence": "league that had the most goals refers to MAX(SUM(home_team_goal, away_team_goal)); 2016 season refers to season = '2015/2016';"}
{"sample_id": 10448, "db_id": "european_football_2", "final": {"question": "Which home team had lost the fewest matches in the 2016 season?", "sql": "SELECT teamDetails.team_long_name FROM Match AS matchData INNER JOIN Team AS teamDetails ON matchData.home_team_api_id = teamDetails.team_api_id WHERE matchData.season = '2015/2016' AND matchData.home_team_goal - matchData.away_team_goal < 0 GROUP BY matchData.home_team_api_id ORDER BY COUNT(*) ASC LIMIT 1", "source_tables": ["team", "match"]}, "evidence": "home team lost the matches refers to SUBTRACT(home_team_goal, away_team_goal) < 0; 2016 season refers to season = '2015/2016';"}
{"sample_id": 10449, "db_id": "european_football_2", "final": {"question": "Indicate the full names of the top 10 players with the highest number of penalties.", "sql": "SELECT t2.player_name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.id = t2.id ORDER BY t1.penalties DESC LIMIT 10", "source_tables": ["player_attributes", "player"]}, "evidence": "full name refers to player_name; players with highest number of penalties refers to MAX(penalties);"}
{"sample_id": 10450, "db_id": "european_football_2", "final": {"question": "In Scotland Premier League, which away team won the most during the 2010 season?", "sql": "SELECT teamInfo.team_long_name FROM League AS leagueData INNER JOIN Match AS matchData ON leagueData.id = matchData.league_id INNER JOIN Team AS teamInfo ON matchData.away_team_api_id = teamInfo.team_api_id WHERE leagueData.name = 'Scotland Premier League' AND matchData.season = '2009/2010' AND matchData.away_team_goal - matchData.home_team_goal > 0 GROUP BY matchData.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["team", "league", "match"]}, "evidence": "Final result should return the Team.team_long_name; Scotland Premier League refers to League.name = 'Scotland Premier League'; away team refers to away_team_api_id; away team that won the most refers to MAX(SUBTRACT(away_team_goal, home_team_goal) > 0); 2010 season refers to season = '2009/2010'; won the most refers to MAX(COUNT(*));"}
{"sample_id": 10451, "db_id": "european_football_2", "final": {"question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?", "sql": "SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.buildUpPlaySpeed ASC LIMIT 4", "source_tables": ["team_attributes", "team"]}, "evidence": "speed in which attacks are put together refers to buildUpPlaySpeed;highest build up play speed refers to MAX(buildUpPlaySpeed)"}
{"sample_id": 10452, "db_id": "european_football_2", "final": {"question": "Give the name of the league had the most matches end as draw in the 2016 season?", "sql": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' AND t1.home_team_goal = t1.away_team_goal GROUP BY t2.name ORDER BY COUNT(t1.id) DESC LIMIT 1", "source_tables": ["league", "match"]}, "evidence": "most matches end as draw refers to MAX(SUM(home_team_goal = away_team_goal)); 2016 season refers to season = '2015/2016';"}
{"sample_id": 10453, "db_id": "european_football_2", "final": {"question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.", "sql": "SELECT DISTINCT DATETIME() - T2.birthday age FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.'date') >= '2013' AND STRFTIME('%Y',t1.'date') <= '2015' AND t1.sprint_speed >= 97", "source_tables": ["player_attributes", "player"]}, "evidence": "players age at present = SUBTRACT((DATETIME(), birthday)); sprint speed of no less than 97 refers to sprint_speed > = 97; between 2013 to 2015 refers to YEAR(date) > = '2013' AND YEAR(date) < = '2015'; "}
{"sample_id": 10454, "db_id": "european_football_2", "final": {"question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.", "sql": "SELECT t2.name, t1.max_count FROM League AS t2 JOIN (SELECT league_id, MAX(cnt) AS max_count FROM (SELECT league_id, COUNT(id) AS cnt FROM Match GROUP BY league_id) AS subquery) AS t1 ON t1.league_id = t2.id", "source_tables": ["league", "match"]}, "evidence": " league with highest matches of all time refers to MAX(COUNT(league_id));"}
{"sample_id": 10455, "db_id": "european_football_2", "final": {"question": "What is the average height of players born between 1990 and 1995?", "sql": "SELECT SUM(height) / COUNT(id) FROM Player WHERE SUBSTR(birthday, 1, 4) BETWEEN '1990' AND '1995'", "source_tables": ["player"]}, "evidence": "average height = DIVIDE(SUM(height), COUNT(id)); players born between 1990 and 1995 refers to birthday > = '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';"}
{"sample_id": 10456, "db_id": "european_football_2", "final": {"question": "List the players' api id who had the highest above average overall ratings in 2010.", "sql": "SELECT player_api_id FROM Player_Attributes WHERE SUBSTR('date', 1, 4) = '2010' ORDER BY overall_rating DESC LIMIT 1", "source_tables": ["player_attributes"]}, "evidence": "highest above average overall ratings refers to MAX(overall_rating); in 2010 refers to substr(date,1,4) = '2010';"}
{"sample_id": 10457, "db_id": "european_football_2", "final": {"question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.", "sql": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60", "source_tables": ["team_attributes"]}, "evidence": "teams with more than 50 but less than 60 build-up play speed refers to buildUpPlaySpeed >50 AND buildUpPlaySpeed <60; "}
{"sample_id": 10458, "db_id": "european_football_2", "final": {"question": "List the long name of teams with above-average build-up play passing in 2012.", "sql": "SELECT DISTINCT t4.team_long_name FROM Team_Attributes AS t3 INNER JOIN Team AS t4 ON t3.team_api_id = t4.team_api_id WHERE SUBSTR(t3.'date', 1, 4) = '2012' AND t3.buildUpPlayPassing > ( SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE STRFTIME('%Y',t2.'date') = '2012')", "source_tables": ["team_attributes", "team"]}, "evidence": "long name of teams refers to team_long_name; build-up play passing refers to buildUpPlayPassing; above-average build-up play passing = buildUpPlayPassing > DIVIDE(SUM(buildUpPlayPassing), COUNT(team_long_name) WHERE buildUpPlayPassing IS NOT NULL); in 2012 refers to strftime('%Y', date) = '2012'; "}
{"sample_id": 10459, "db_id": "european_football_2", "final": {"question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.", "sql": "SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'", "source_tables": ["player_attributes", "player"]}, "evidence": "players who prefer left foot refers to preferred_foot = 'left'; percentage of players who prefer left foot = DIVIDE(MULTIPLY((SUM(preferred_foot = 'left'), 100)), COUNT(player_fifa_api_id)); born between 1987 and 1992 refers to YEAR(birthday) BETWEEN '1987' AND '1992';"}
{"sample_id": 10460, "db_id": "european_football_2", "final": {"question": "List the top 5 leagues in ascending order of the number of goals made in all seasons combined.", "sql": "SELECT t1.name, SUM(t2.home_team_goal) + SUM(t2.away_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id GROUP BY t1.name ORDER BY SUM(t2.home_team_goal) + SUM(t2.away_team_goal) ASC LIMIT 5", "source_tables": ["league", "match"]}, "evidence": "number of goals made in all seasons combine = SUM(home_team_goal, away_team_goal);"}
{"sample_id": 10461, "db_id": "european_football_2", "final": {"question": "Find the average number of long-shot done by Ahmed Samir Farag.", "sql": "SELECT CAST(SUM(t2.long_shots) AS REAL) / COUNT(t2.'date') FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'", "source_tables": ["player_attributes", "player"]}, "evidence": "average number of long shot = DIVIDE(SUM(long_shots), COUNT(player_fifa_api_id));"}
{"sample_id": 10462, "db_id": "european_football_2", "final": {"question": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.", "sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 GROUP BY t1.id ORDER BY CAST(SUM(t2.heading_accuracy) AS REAL) / COUNT(t2.'player_fifa_api_id') DESC LIMIT 10", "source_tables": ["player_attributes", "player"]}, "evidence": "heights are above 180 refers to Player.height > 180; average heading accuracy = DIVIDE(SUM(heading_accuracy), COUNT(player_fifa_api_id));"}
{"sample_id": 10463, "db_id": "european_football_2", "final": {"question": "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing.", "sql": "SELECT t3.team_long_name FROM Team AS t3 INNER JOIN Team_Attributes AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.buildUpPlayDribblingClass = 'Normal' AND t4.chanceCreationPassing < ( SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.'date', 1, 4) = '2014') ORDER BY t4.chanceCreationPassing DESC", "source_tables": ["team_attributes", "team"]}, "evidence": "normal build-up play dribbling class refers to buildUpPlayDribblingClass = 'Normal'; in 2014 refers to date > = '2014-01-01 00:00:00' AND date < = '2014-01-31 00:00:00'; names of the teams refers to team_long_name; less than average chance creation passing = DIVIDE(SUM(chanceCreationPassing), COUNT(id)) > chanceCreationPassing;"}
{"sample_id": 10464, "db_id": "european_football_2", "final": {"question": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.", "sql": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2009/2010' GROUP BY t1.name HAVING (CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) - (CAST(SUM(t2.away_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) > 0", "source_tables": ["league", "match"]}, "evidence": "name of league refers to League.name; average goals by the home team is higher than the away team = AVG(home_team_goal) > AVG(away_team_goal); AVG(xx_goal) = SUM(xx_goal) / COUNT(DISTINCT Match.id); 2009/2010 season refers to season = '2009/2010'"}
{"sample_id": 10465, "db_id": "european_football_2", "final": {"question": "What is the short name of the football team Queens Park Rangers?", "sql": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'", "source_tables": ["team"]}, "evidence": "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';"}
{"sample_id": 10466, "db_id": "european_football_2", "final": {"question": "List the football players with a birthyear of 1970 and a birthmonth of October.", "sql": "SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 7) = '1970-10'", "source_tables": ["player"]}, "evidence": "players with a birthyear of 1970 and a birthmonth of October refers to substr(birthday,1,7) AS 'year-month',WHERE year = '1970' AND month = '10';"}
{"sample_id": 10467, "db_id": "european_football_2", "final": {"question": "What is the attacking work rate of the football playerr Franco Zennaro?", "sql": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'", "source_tables": ["player_attributes", "player"]}, "evidence": ""}
{"sample_id": 10468, "db_id": "european_football_2", "final": {"question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?", "sql": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'", "source_tables": ["team_attributes", "team"]}, "evidence": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;"}
{"sample_id": 10469, "db_id": "european_football_2", "final": {"question": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?", "sql": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.'date', 1, 10) = '2014-09-18'", "source_tables": ["player_attributes", "player"]}, "evidence": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';"}
{"sample_id": 10470, "db_id": "european_football_2", "final": {"question": "What is the overall rating of the football player Gabriel Tamas in year 2011?", "sql": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND strftime('%Y', t2.date) = '2011'", "source_tables": ["player_attributes", "player"]}, "evidence": "in year 2011 refers to strftime('%Y', date) = '2011';"}
{"sample_id": 10471, "db_id": "european_football_2", "final": {"question": "How many matches in the 2015/2016 season were held in Scotland Premier League\n?", "sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' AND t1.name = 'Scotland Premier League'", "source_tables": ["league", "match"]}, "evidence": "Scotland Premier League refers to League.name = 'Scotland Premier League';"}
{"sample_id": 10472, "db_id": "european_football_2", "final": {"question": "What is the preferred foot when attacking of the youngest football player?", "sql": "SELECT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday DESC LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "preferred foot when attacking refers to preferred_foot; youngest football player refers to latest birthday;"}
{"sample_id": 10473, "db_id": "european_football_2", "final": {"question": "List all the football player with the highest potential score.", "sql": "SELECT DISTINCT(t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential = (SELECT MAX(potential) FROM Player_Attributes)", "source_tables": ["player_attributes", "player"]}, "evidence": "potential score refers to potential; highest potential score refers to MAX(potential);"}
{"sample_id": 10474, "db_id": "european_football_2", "final": {"question": "Among all the players whose weight is under 130, how many of them preferred foot in attacking is left?", "sql": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.weight < 130 AND t2.preferred_foot = 'left'", "source_tables": ["player_attributes", "player"]}, "evidence": "weight < 130; preferred foot in attacking refers to preferred_foot; preferred_foot = 'left';"}
{"sample_id": 10475, "db_id": "european_football_2", "final": {"question": "List the football teams that has a chance creation passing class of Risky. Inidcate its short name only.", "sql": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Risky'", "source_tables": ["team_attributes", "team"]}, "evidence": "chance creation passing class refers to chanceCreationPassingClass; chanceCreationPassingClass = 'Risky'; short name refers to team_short_name;"}
{"sample_id": 10476, "db_id": "european_football_2", "final": {"question": "What is the defensive work rate of the football player David Wilson\n?", "sql": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'", "source_tables": ["player_attributes", "player"]}, "evidence": ""}
{"sample_id": 10477, "db_id": "european_football_2", "final": {"question": "When is the birthday of the football player who has the highest overall rating?", "sql": "SELECT t1.birthday FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "football player who has the highest overall rating refers to MAX(overall_rating);"}
{"sample_id": 10478, "db_id": "european_football_2", "final": {"question": "What is the name of the football league in the country of Netherlands?", "sql": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Netherlands'", "source_tables": ["country", "league"]}, "evidence": "name of the football league refers to League.name;"}
{"sample_id": 10479, "db_id": "european_football_2", "final": {"question": "Calculate the average home team goal in the 2010/2011 season in the country of Poland.", "sql": "SELECT CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Poland' AND t2.season = '2010/2011'", "source_tables": ["country", "match"]}, "evidence": "average home team goal = AVG(home_team_goal)= SUM(home_team_goal) / COUNT(DISTINCT Match.id) WHERE name = 'Poland' and season = '2010/2011';"}
{"sample_id": 10480, "db_id": "european_football_2", "final": {"question": "Who has the highest average finishing rate between the highest and shortest football player?", "sql": "SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "finishing rate refers to finishing; highest average finishing rate = MAX(AVG(finishing)); highest football player refers to MAX(height); shortest football player refers to MIN(height);"}
{"sample_id": 10481, "db_id": "european_football_2", "final": {"question": "Please list player names which are higher than 180.", "sql": "SELECT player_name FROM Player WHERE height > 180", "source_tables": ["player"]}, "evidence": "height>180;"}
{"sample_id": 10482, "db_id": "european_football_2", "final": {"question": "How many players were born after 1990?", "sql": "SELECT COUNT(id) FROM Player WHERE STRFTIME('%Y', birthday) > '1990'", "source_tables": ["player"]}, "evidence": "born after 1990 refers to strftime('%Y', birthday) = '1990';"}
{"sample_id": 10483, "db_id": "european_football_2", "final": {"question": "How many players whose first names are Adam and weigh more than 170?", "sql": "SELECT COUNT(id) FROM Player WHERE weight > 170 AND player_name LIKE 'Adam%'", "source_tables": ["player"]}, "evidence": "team names refers to team_long_name; speed class refers to buildUpPlaySpeedClass; buildUpPlaySpeedClass = 'Fast';"}
{"sample_id": 10484, "db_id": "european_football_2", "final": {"question": "Which players had an overall rating of over 80 from 2008 to 2010? Please list player names.", "sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating > 80 AND SUBSTR(t2.'date', 1, 4) BETWEEN '2008' AND '2010'", "source_tables": ["player_attributes", "player"]}, "evidence": "overall_rating > 80; from 2008 to 2010 refers to strftime('%Y', date) BETWEEN '2008' AND '2010';"}
{"sample_id": 10485, "db_id": "european_football_2", "final": {"question": "What is Aaron Doran's potential score?", "sql": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'", "source_tables": ["player_attributes", "player"]}, "evidence": "potential score refers to potential;"}
{"sample_id": 10486, "db_id": "european_football_2", "final": {"question": "List out of players whose preferred foot is left.", "sql": "SELECT DISTINCT t1.id, t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = 'left'", "source_tables": ["player_attributes", "player"]}, "evidence": "preferred_foot = 'left';"}
{"sample_id": 10487, "db_id": "european_football_2", "final": {"question": "Please list all team names which the speed class is fast.", "sql": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Fast'", "source_tables": ["team_attributes", "team"]}, "evidence": "team names refers to team_long_name; speed class refers to buildUpPlaySpeedClass; buildUpPlaySpeedClass = 'Fast';"}
{"sample_id": 10488, "db_id": "european_football_2", "final": {"question": "What is the passing class of CLB team?", "sql": "SELECT DISTINCT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'CLB'", "source_tables": ["team_attributes", "team"]}, "evidence": "passing class refers to buildUpPlayPassingClass; CLB refers to team_short_name = 'CLB';"}
{"sample_id": 10489, "db_id": "european_football_2", "final": {"question": "Which teams have build up play passing more than 70? Please list their short names.", "sql": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayPassing > 70", "source_tables": ["team_attributes", "team"]}, "evidence": "build up play passing refers to buildUpPlayPassing; buildUpPlayPassing > 70; short names refers to team_short_name;"}
{"sample_id": 10490, "db_id": "european_football_2", "final": {"question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?", "sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND STRFTIME('%Y',t2.'date') >= '2010' AND STRFTIME('%Y',t2.'date') <= '2015'", "source_tables": ["player_attributes", "player"]}, "evidence": "from 2010 to 2015 refers to strftime('%Y', date) >= '2010' AND <= '2015'; average overall rating = SUM(t2.overall_rating)/ COUNT(t2.id); higher than 170 refers to Player.height > 170;"}
{"sample_id": 10491, "db_id": "european_football_2", "final": {"question": "Which football player has the shortest height?", "sql": "SELECT player_name FROM player ORDER BY height ASC LIMIT 1", "source_tables": ["player"]}, "evidence": "shortest height refers to MIN(height);"}
{"sample_id": 10492, "db_id": "european_football_2", "final": {"question": "Which country is the league Italy Serie A from?", "sql": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Italy Serie A'", "source_tables": ["country", "league"]}, "evidence": "Italy Serie A from refers to League.name = 'Italy Serie A';"}
{"sample_id": 10493, "db_id": "european_football_2", "final": {"question": "List the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team.", "sql": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeed = 31 AND t2.buildUpPlayDribbling = 53 AND t2.buildUpPlayPassing = 32", "source_tables": ["team_attributes", "team"]}, "evidence": "build up play speed refers to buildUpPlaySpeed; buildUpPlaySpeed = 31; build up play dribbling refers to buildUpPlayDribbling; buildUpPlayDribbling = 53; build up play passing refers to buildUpPlayPassing; buildUpPlayPassing = 32; short name of the team refers to team_short_name;"}
{"sample_id": 10494, "db_id": "european_football_2", "final": {"question": "What is the average overall rating of the football player Aaron Doran?", "sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'", "source_tables": ["player_attributes", "player"]}, "evidence": "average overall rating = AVG(overall_rating);"}
{"sample_id": 10495, "db_id": "european_football_2", "final": {"question": "How many matches were held in the league Germany 1. Bundesliga\nfrom August to October 2008?", "sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Germany 1. Bundesliga' AND SUBSTR(t2.'date', 1, 7) BETWEEN '2008-08' AND '2008-10'", "source_tables": ["league", "match"]}, "evidence": "Germany 1. Bundesliga refers to League.name = 'Germany 1. Bundesliga'; from August to October 2008 refers to strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';"}
{"sample_id": 10496, "db_id": "european_football_2", "final": {"question": "List all the short name of the football team that had a home team goal of 10?", "sql": "SELECT t1.team_short_name FROM Team AS t1 INNER JOIN Match AS t2 ON t1.team_api_id = t2.home_team_api_id WHERE t2.home_team_goal = 10", "source_tables": ["team", "match"]}, "evidence": "short name of the football team refers to team_short_name; home team goal refers to home_team_goal; home_team_goal = 10;"}
{"sample_id": 10497, "db_id": "european_football_2", "final": {"question": "List all the football player with the highest balance score and potential score of 61.", "sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential = '61' ORDER BY t2.balance DESC LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "balance score refers to balance; highest balance score refers to MAX(balance); potential score refers to potential; potential = 61;"}
{"sample_id": 10498, "db_id": "european_football_2", "final": {"question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?", "sql": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id", "source_tables": ["player_attributes", "player"]}, "evidence": "difference of the average ball control = SUBTRACT(AVG(ball_control WHERE player_name = 'Abdou Diallo'), AVG(ball_control WHERE player_name = 'Aaron Appindangoye')); AVG(ball_control WHERE player_name = 'XX XX') = SUM(CASE WHEN player_name = 'XX XX' THEN ball_control ELSE 0 END) / COUNT(CASE WHEN player_name = 'XX XX' THEN id ELSE NULL END)"}
{"sample_id": 10499, "db_id": "european_football_2", "final": {"question": "What's the long name for the team GEN?", "sql": "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'", "source_tables": ["team"]}, "evidence": "long name for the team refers to team_long_name; team_short_name = 'GEN';"}
{"sample_id": 10500, "db_id": "european_football_2", "final": {"question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?", "sql": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1", "source_tables": ["player"]}, "evidence": "The larger the birthday value, the younger the person is, and vice versa;"}
{"sample_id": 10501, "db_id": "european_football_2", "final": {"question": "Which player is the tallest?", "sql": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1", "source_tables": ["player"]}, "evidence": "tallest player refers to MAX(height);"}
{"sample_id": 10502, "db_id": "european_football_2", "final": {"question": "Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?", "sql": "SELECT COUNT(player_api_id) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'", "source_tables": ["player_attributes"]}, "evidence": "preferred foot when attacking was the left refers to preferred_foot = 'left'; players who would remain in his position when the team attacked refers to attacking_work_rate = 'low';"}
{"sample_id": 10503, "db_id": "european_football_2", "final": {"question": "Which country is the Belgium Jupiler League from?", "sql": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Belgium Jupiler League'", "source_tables": ["country", "league"]}, "evidence": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League';"}
{"sample_id": 10504, "db_id": "european_football_2", "final": {"question": "Please list the leagues from Germany.", "sql": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Germany'", "source_tables": ["country", "league"]}, "evidence": "Germany refers to Country.name = 'Germany';"}
{"sample_id": 10505, "db_id": "european_football_2", "final": {"question": "Which player has the strongest overall strength?", "sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "overall strength refers to overall_rating; strongest overall strength refers to MAX(overall_rating);"}
{"sample_id": 10506, "db_id": "european_football_2", "final": {"question": "Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?", "sql": "SELECT COUNT(DISTINCT t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.birthday) < '1986' AND t2.defensive_work_rate = 'high'", "source_tables": ["player_attributes", "player"]}, "evidence": "players born before the year 1986 refers to strftime('%Y', birthday)<'1986'; players who would remain in his position and defense while the team attacked refers to defensive_work_rate = 'high'; Should consider DISTINCT in the final result;"}
{"sample_id": 10507, "db_id": "european_football_2", "final": {"question": "Which of these players performs the best in crossing actions, Alexis, Ariel Borysiuk or Arouna Kone?", "sql": "SELECT t1.player_name, t2.crossing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY t2.crossing DESC LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "player who perform best in crossing actions refers to MAX(crossing);"}
{"sample_id": 10508, "db_id": "european_football_2", "final": {"question": "What's the heading accuracy of Ariel Borysiuk?", "sql": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'", "source_tables": ["player_attributes", "player"]}, "evidence": ""}
{"sample_id": 10509, "db_id": "european_football_2", "final": {"question": "Among the players whose height is over 180, how many of them have a volley score of over 70?", "sql": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 AND t2.volleys > 70", "source_tables": ["player_attributes", "player"]}, "evidence": "height > 180; volley score refers to volleys; volleys > 70;"}
{"sample_id": 10510, "db_id": "european_football_2", "final": {"question": "Please list the names of the players whose volley score and dribbling score are over 70.", "sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.volleys > 70 AND t2.dribbling > 70", "source_tables": ["player_attributes", "player"]}, "evidence": "volley score are over 70 refers to volleys > 70; dribbling score refers to dribbling are over 70 refers to dribbling > 70;"}
{"sample_id": 10511, "db_id": "european_football_2", "final": {"question": "How many matches in the 2008/2009 season were held in Belgium?", "sql": "SELECT COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Belgium' AND t2.season = '2008/2009'", "source_tables": ["country", "match"]}, "evidence": "Belgium refers to Country.name = 'Belgium';"}
{"sample_id": 10512, "db_id": "european_football_2", "final": {"question": "What is the long passing score of the oldest player?", "sql": "SELECT t2.long_passing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday ASC LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "long passing score refers to long_passing; oldest player refers to oldest birthday;"}
{"sample_id": 10513, "db_id": "european_football_2", "final": {"question": "How many matches were held in the Belgium Jupiler League in April, 2009?", "sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND SUBSTR(t2.'date', 1, 7) = '2009-04'", "source_tables": ["league", "match"]}, "evidence": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League'; in April, 2009 refers to SUBSTR(`date`, 1, 7);"}
{"sample_id": 10514, "db_id": "european_football_2", "final": {"question": "Give the name of the league had the most matches in the 2008/2009 season?", "sql": "SELECT t1.name FROM League AS t1 JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2008/2009' GROUP BY t1.name HAVING COUNT(t2.id) = (SELECT MAX(match_count) FROM (SELECT COUNT(t2.id) AS match_count FROM Match AS t2 WHERE t2.season = '2008/2009' GROUP BY t2.league_id))", "source_tables": ["league", "match"]}, "evidence": "league that had the most matches in the 2008/2009 season refers to MAX(league_name WHERE season = '2008/2009');"}
{"sample_id": 10515, "db_id": "european_football_2", "final": {"question": "What is the average overall rating of the players born before the year 1986?", "sql": "SELECT SUM(t2.overall_rating) / COUNT(t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) < '1986'", "source_tables": ["player_attributes", "player"]}, "evidence": "average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); born before the year 1986 refers to strftime('%Y', birthday) < '1986';"}
{"sample_id": 10516, "db_id": "european_football_2", "final": {"question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?", "sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id", "source_tables": ["player_attributes", "player"]}, "evidence": "how much higher in percentage = MULTIPLY(DIVIDE(SUBTRACT(overall_rating WHERE player_name = 'Ariel Borysiuk', overall_rating WHERE player_name = 'Paulin Puel'), overall_rating WHERE player_name = 'Paulin Puel'), 100);"}
{"sample_id": 10517, "db_id": "european_football_2", "final": {"question": "How much is the average build up play speed of the Heart of Midlothian team?", "sql": "SELECT CAST(SUM(t2.buildUpPlaySpeed) AS REAL) / COUNT(t2.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Heart of Midlothian'", "source_tables": ["team_attributes", "team"]}, "evidence": "Heart of Midlothian refers to team_long_name = 'Heart of Midlothian'; average build up play speed refers to\u00a0 AVG(buildUpPlaySpeed)"}
{"sample_id": 10518, "db_id": "european_football_2", "final": {"question": "Calculate the average overall rating of Pietro Marino.", "sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Pietro Marino'", "source_tables": ["player_attributes", "player"]}, "evidence": "Pietro Marino refers to player_name = 'Pietro Marino'; average overall rating AVG(T1.overall_rating)"}
{"sample_id": 10571, "db_id": "thrombosis_prediction", "final": {"question": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?", "sql": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'M'", "source_tables": ["patient"]}, "evidence": "male refers to SEX = 'M'; in-patient refers to Admission = '+'; outpatient refers to Admission = '-'; percentage = DIVIDE(COUNT(ID) where SEX = 'M' and Admission = '+', COUNT(ID) where SEX\u00a0 = 'M' and Admission = '-')"}
{"sample_id": 10572, "db_id": "thrombosis_prediction", "final": {"question": "What is the percentage of female patient were born after 1930?", "sql": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE SEX = 'F'", "source_tables": ["patient"]}, "evidence": "female refers to Sex = 'F'; patient who were born after 1930 refers to year(Birthday) > '1930'; calculation = DIVIDE(COUNT(ID) where year(Birthday) > '1930' and SEX = 'F'), (COUNT(ID) where SEX = 'F')"}
{"sample_id": 10573, "db_id": "thrombosis_prediction", "final": {"question": "For patient born between Year 1930 to 1940, how many percent of them were inpatient?", "sql": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE STRFTIME('%Y', Birthday) BETWEEN '1930' AND '1940'", "source_tables": ["patient"]}, "evidence": "patient born between Year 1930 to 1940 refers to year(Birthday) BETWEEN '1930-01-01' AND '1940-12-31'; inpatient refers to Admission = '+'"}
{"sample_id": 10574, "db_id": "thrombosis_prediction", "final": {"question": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?", "sql": "SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'", "source_tables": ["patient"]}, "evidence": "'SLE' diagnosed patient means Diagnosis = 'SLE'; inpatient refers to Admission = '+'; outpatient refers to Admission = '-'; calculation =  DIVIDE(COUNT(ID) where Diagnosis = 'SLE' and Admission = '+', COUNT(ID) where Diagnosis = 'SLE' and Admission = '-')"}
{"sample_id": 10575, "db_id": "thrombosis_prediction", "final": {"question": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.", "sql": "SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609", "source_tables": ["laboratory", "patient"]}, "evidence": "'30609' is the Patient ID; disease means Diagnosis"}
{"sample_id": 10576, "db_id": "thrombosis_prediction", "final": {"question": "State the sex and birthday of patient ID '163109'. When was the examination taken and what symptom does the patient had.", "sql": "SELECT T1.SEX, T1.Birthday, T2.'Examination Date', T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 163109", "source_tables": ["examination", "patient"]}, "evidence": "When was the examination taken refers to `Examination Date`"}
{"sample_id": 10577, "db_id": "thrombosis_prediction", "final": {"question": "List the patient ID, sex and birthday of patient with LDH beyond normal range.", "sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500", "source_tables": ["laboratory", "patient"]}, "evidence": "LDH beyond normal range refers to LDH > '500';"}
{"sample_id": 10578, "db_id": "thrombosis_prediction", "final": {"question": "State the ID and age of patient with positive degree of coagulation.", "sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'", "source_tables": ["examination", "patient"]}, "evidence": "age refers to SUBTRACT(year(current_timestamp), year(Birthday)); positive degree of coagulation refers to RVVT = '+';"}
{"sample_id": 10579, "db_id": "thrombosis_prediction", "final": {"question": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.", "sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2", "source_tables": ["examination", "patient"]}, "evidence": "severe degree of thrombosis refers to thrombosis = 2; disease refers to diagnosis;"}
{"sample_id": 10580, "db_id": "thrombosis_prediction", "final": {"question": "List all patients who were born in 1937 whose total cholesterol was beyond the normal range.", "sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1937' AND T2.'T-CHO' >= 250", "source_tables": ["laboratory", "patient"]}, "evidence": "who were born in 1937 refers to year(birthday) = '1937'; total cholesterol was beyond the normal range refers to `T-CHO` > = '250'"}
{"sample_id": 10581, "db_id": "thrombosis_prediction", "final": {"question": "For patient with albumin level lower than 3.5, list their ID, sex and diagnosis.", "sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB < 3.5", "source_tables": ["laboratory", "patient"]}, "evidence": "albumin level lower than 3.5 refers to ALB < 3.5;"}
{"sample_id": 10582, "db_id": "thrombosis_prediction", "final": {"question": "What is the percentage of female patient had total protein not within the normal range?", "sql": "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND (T2.TP < 6.0 OR T2.TP > 8.5) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'", "source_tables": ["laboratory", "patient"]}, "evidence": "female refers to sex = 'F'; total protein not within the normal range refers to TP < '6.0' or TP > '8.5'; calculation = DIVIDE((ID where sex = 'F' and TP < '6.0' or TP > '8.5'), COUNT(ID)) * 100"}
{"sample_id": 10583, "db_id": "thrombosis_prediction", "final": {"question": "For in-patient age 50 and above, what is their average anti-cardiolipin antibody (IgG) concentration?", "sql": "SELECT AVG(T2.'aCL IgG') FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50 AND T1.Admission = '+'", "source_tables": ["examination", "patient"]}, "evidence": "in-patient refers to Admission = '+'; age 50 and above refers to SUBTRACT(year(current_timestamp), year(Birthday)) >= '50'; average anti-cardiolipin antibody (IgG) concentration refers to AVG(aCL IgG)"}
{"sample_id": 10584, "db_id": "thrombosis_prediction", "final": {"question": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?", "sql": "SELECT COUNT(*) FROM Patient WHERE STRFTIME('%Y', Description) = '1997' AND SEX = 'F' AND Admission = '-'", "source_tables": ["patient"]}, "evidence": "female refers to sex = 'F'; came at the hospital in 1997 refers to year(Description) = '1997'; immediately followed at the outpatient clinic refers to Admission = '-'"}
{"sample_id": 10585, "db_id": "thrombosis_prediction", "final": {"question": "What was the age of the youngest patient when they initially arrived at the hospital?", "sql": "SELECT MIN(STRFTIME('%Y', 'First Date') - STRFTIME('%Y', Birthday)) FROM Patient", "source_tables": ["patient"]}, "evidence": "age refers to SUBTRACT(YEAR(`First Date`),YEAR(Birthday))"}
{"sample_id": 10586, "db_id": "thrombosis_prediction", "final": {"question": "How many of the patients with the most serious thrombosis cases examined in 1997 are women?", "sql": "SELECT  COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND STRFTIME('%Y', T2.'Examination Date') = '1997' AND T2.Thrombosis = 1", "source_tables": ["examination", "patient"]}, "evidence": "the most serious thrombosis refers to Thrombosis = '1' (the most severe one); women refers to sex = 'F'"}
{"sample_id": 10587, "db_id": "thrombosis_prediction", "final": {"question": "What is the age gap between the youngest and oldest patient with a normal triglyceride recorded?", "sql": "SELECT STRFTIME('%Y', MAX(T1.Birthday)) - STRFTIME('%Y', MIN(T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200", "source_tables": ["laboratory", "patient"]}, "evidence": "age gap refers to SUBTRACT(MAX(year(Birthday)) - MIN(year(Birthday))); normal triglyceride refers to tg > = 200"}
{"sample_id": 10588, "db_id": "thrombosis_prediction", "final": {"question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.", "sql": "SELECT T2.Symptoms, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Symptoms IS NOT NULL ORDER BY T1.Birthday DESC LIMIT 1", "source_tables": ["examination", "patient"]}, "evidence": "The larger the birthday value, the younger the person is, and vice versa; symptoms observed refers to the symptoms is not NULL"}
{"sample_id": 10589, "db_id": "thrombosis_prediction", "final": {"question": "For the year that concluded on December 31, 1998, how many male patients on average were tested in the lab each month?", "sql": "SELECT CAST(COUNT(T1.ID) AS REAL) / 12 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.Date) = '1998' AND T1.SEX = 'M'", "source_tables": ["laboratory", "patient"]}, "evidence": "the year that concluded on December 31, 1998 refers to Date BETWEEN '1998-01-01' AND '1998-12-31'; male refers to SEX = 'M'; calculation = DIVIDE(COUNT(ID), 12)"}
{"sample_id": 10590, "db_id": "thrombosis_prediction", "final": {"question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?", "sql": "SELECT T1.Date, STRFTIME('%Y', T2.'First Date') - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "The larger the birthday value, the younger the person is, and vice versa; 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)"}
{"sample_id": 10591, "db_id": "thrombosis_prediction", "final": {"question": "What is the ratio of male to female patients among all those with abnormal uric acid counts?", "sql": "SELECT CAST(SUM(CASE WHEN T2.UA <= 8.0 AND T1.SEX = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.UA <= 6.5 AND T1.SEX = 'F' THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID", "source_tables": ["laboratory", "patient"]}, "evidence": "male refers to SEX = 'M'; female refers to SEX = 'F'; abnormal uric acid refers to UA < = '8.0' where SEX = 'M', UA < = '6.5' where SEX = 'F'; calculation = DIVIDE(SUM(UA <= '8.0' and SEX = 'M'), SUM(UA <= '6.5 and SEX = 'F'))"}
{"sample_id": 10592, "db_id": "thrombosis_prediction", "final": {"question": "How many patients hadn't undergone a medical examination until at least a year following their initial hospital visit?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND STRFTIME('%Y', T2.'Examination Date') - STRFTIME('%Y', T1.'First Date') >= 1", "source_tables": ["examination", "patient"]}, "evidence": "hadn't undergone a medical examination until at least a year refers to SUBTRACT(year(`Examination Date`), year(`First Date`)) > = 1"}
{"sample_id": 10593, "db_id": "thrombosis_prediction", "final": {"question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.'Examination Date') BETWEEN '1990' AND '1993' AND STRFTIME('%Y', T2.'Examination Date') - STRFTIME('%Y', T1.Birthday) < 18", "source_tables": ["examination", "patient"]}, "evidence": "underage patients refers to year(Birthday) < 18; three-year period from 1990 to 1993 refers to year(`Examination Date`) between '1990' and '1993'"}
{"sample_id": 10594, "db_id": "thrombosis_prediction", "final": {"question": "How many male patients have elevated total bilirubin count?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.'T-BIL' >= 2.0 AND T1.SEX = 'M'", "source_tables": ["laboratory", "patient"]}, "evidence": "male refers to SEX = 'M'; elevated means above the normal range; total bilirubin above the normal range refers to `T-BIL` >= '2.0'"}
{"sample_id": 10595, "db_id": "thrombosis_prediction", "final": {"question": "What is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995?", "sql": "SELECT T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.'Examination Date' BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T2.Diagnosis ORDER BY COUNT(T2.Diagnosis) DESC LIMIT 1", "source_tables": ["examination", "patient"]}, "evidence": "the most common illness refers to MAX(COUNT(Diagnosis)); lab work between 1/1/1985 and 12/31/1995 refers to `Examination Date` between '1985-01-01' and '1995-12-31 '"}
{"sample_id": 10596, "db_id": "thrombosis_prediction", "final": {"question": "What is the average age of patients as of year 1999 examined in the laboratory for the October of the year 1991?", "sql": "SELECT AVG('1999'  - STRFTIME('%Y', T2.Birthday)) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date BETWEEN '1991-10-01' AND '1991-10-30'", "source_tables": ["laboratory", "patient"]}, "evidence": "average age of patients as of year 1999 refers to AVG(SUBTRACT('1999', year(Birthday))); October of 1991 refers to Date BETWEEN '1991-10-01' AND '1991-10-30'"}
{"sample_id": 10597, "db_id": "thrombosis_prediction", "final": {"question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?", "sql": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday), T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.HGB DESC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "How old the patient refers to SUBTRACT(year(`Examination Date`), year(Birthday)); the highest hemoglobin count refers to MAX(HGB)"}
{"sample_id": 10598, "db_id": "thrombosis_prediction", "final": {"question": "What was the anti-nucleus antibody concentration level for the patient id 3605340 on 1996/12/2?", "sql": "SELECT ANA FROM Examination WHERE ID = 3605340 AND 'Examination Date' = '1996-12-02'", "source_tables": ["examination"]}, "evidence": "anti-nucleus antibody refers to ANA; 1996/12/2 refers to `Examination Date` = '1996-12-02'"}
{"sample_id": 10599, "db_id": "thrombosis_prediction", "final": {"question": "Was the total cholesterol status for the patient id 2927464 on 1995-9-4 at the normal level?", "sql": "SELECT CASE WHEN 'T-CHO' < 250 THEN 'Normal' ELSE 'Abnormal' END FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04'", "source_tables": ["laboratory"]}, "evidence": "total cholesterol normal level refers to N < 250"}
{"sample_id": 10600, "db_id": "thrombosis_prediction", "final": {"question": "What was the gender of the first AORTITIS diagnosed patient?", "sql": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' AND 'First Date' IS NOT NULL ORDER BY 'First Date' ASC LIMIT 1", "source_tables": ["patient"]}, "evidence": "gender means SEX; 'AORTITIS' refers to Diagnosis;"}
{"sample_id": 10601, "db_id": "thrombosis_prediction", "final": {"question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?", "sql": "SELECT 'aCL IgA', 'aCL IgG', 'aCL IgM' FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND 'Examination Date' = '1993-11-12'", "source_tables": ["examination", "patient"]}, "evidence": "diagnosed with SLE refers to Diagnosis = 'SLE'; 1994/2/19 refers to Description = '1994-02-19'; anti-Cardiolipin refers to aCL IgM; 1993/11/12 refers to Examination Date = '1993/11/12'"}
{"sample_id": 10602, "db_id": "thrombosis_prediction", "final": {"question": "Was the patient a man or a women whose ALT glutamic pylvic transaminase status got 9 on 1992-6-12?", "sql": "SELECT T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT = 9.0 AND T2.Date = '1992-06-12'", "source_tables": ["laboratory", "patient"]}, "evidence": "man refers to SEX = 'M'; women refers to SEX = 'F'; ALT glutamic pylvic transaminase status got 9 GPT = '9'; 1992/6/12 refers to Date = '1992-06-12'"}
{"sample_id": 10603, "db_id": "thrombosis_prediction", "final": {"question": "For the patient who got the laboratory test of uric acid level as 8.4 on 1991-10-21, how old was he/she at that time?", "sql": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA = 8.4 AND T2.Date = '1991-10-21'", "source_tables": ["laboratory", "patient"]}, "evidence": "how old at that time refers to SUBTRACT(year(test date), year(Birthday)); uric acid level as 8.4 refers to UA = '8.4'; 1991/10/21 refers to Date = '1991-10-21'"}
{"sample_id": 10604, "db_id": "thrombosis_prediction", "final": {"question": "For the patient who first came to the hospital on 1991/6/13 who was diagnosed with SJS, what is the total number of his/her Laboratory tests in 1995?", "sql": "SELECT COUNT(*) FROM Laboratory WHERE ID = ( SELECT ID FROM Patient WHERE 'First Date' = '1991-06-13' AND Diagnosis = 'SJS' ) AND STRFTIME('%Y', Date) = '1995'", "source_tables": ["laboratory", "patient"]}, "evidence": "1991/6/13 refers to `First Date` = '1991-06-13'; 'SJS' refers to Diagnosis; total number of his/her Laboratory tests refers to COUNT(ID); 1995 refers to Date"}
{"sample_id": 10605, "db_id": "thrombosis_prediction", "final": {"question": "For the patient who was diagnosed SLE on 1997/1/27, what was his/her original diagnose when he/she came to the hospital for the first time?", "sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = ( SELECT ID FROM Examination WHERE 'Examination Date' = '1997-01-27' AND Diagnosis = 'SLE' ) AND T2.'Examination Date' = T1.'First Date'", "source_tables": ["examination", "patient"]}, "evidence": "'SLE' AND original diagnose refers to diagnosis; 1997/1/27 refer to `Examination Date` = '1997-01-27'; first came to the hospital refers to patient.`First Date`"}
{"sample_id": 10606, "db_id": "thrombosis_prediction", "final": {"question": "For the patient whose birthday was 1959/3/1, what symptoms did he/she have during the examination on 1993/9/27?", "sql": "SELECT T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-03-01' AND T2.'Examination Date' = '1993-09-27'", "source_tables": ["examination", "patient"]}, "evidence": ""}
{"sample_id": 10607, "db_id": "thrombosis_prediction", "final": {"question": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?", "sql": "SELECT CAST((SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.'T-CHO' ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.'T-CHO' ELSE 0 END)) AS REAL) / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.'T-CHO' ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'", "source_tables": ["laboratory", "patient"]}, "evidence": "born on 1959/2/18 refers to Birthday = '1959-02-18'; calculation = SUBTRACT(SUM(Birthday = '1959-02-18' and Date like '1981-11-%' THEN `T-CHO`), SUM(Birthday = '1959-02-18' and Date like '1981-12-%' THEN `T-CHO`))"}
{"sample_id": 10608, "db_id": "thrombosis_prediction", "final": {"question": "Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.", "sql": "SELECT ID FROM Examination WHERE 'Examination Date' BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'", "source_tables": ["examination"]}, "evidence": "'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'"}
{"sample_id": 10609, "db_id": "thrombosis_prediction", "final": {"question": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.", "sql": "SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4", "source_tables": ["laboratory"]}, "evidence": "examined between 1987/7/6 and 1996/1/31 refers to Date BETWEEN '1987-07-06' AND '1996-01-31'; GPT level greater than 30 refers to GPT > 30; ALB level less than 4 ALB < 4"}
{"sample_id": 10610, "db_id": "thrombosis_prediction", "final": {"question": "How many female patients born in 1964 were admitted to the hospital? List them by ID.", "sql": "SELECT ID FROM Patient WHERE STRFTIME('%Y', Birthday) = '1964' AND SEX = 'F' AND Admission = '+'", "source_tables": ["patient"]}, "evidence": "female refers to SEX = 'F'; born in 1964 refers to YEAR(Birthday) = 1964; admitted to the hospital refers to Admission = '+'"}
{"sample_id": 10611, "db_id": "thrombosis_prediction", "final": {"question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?", "sql": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND 'ANA Pattern' = 'S' AND 'aCL IgM' > (SELECT AVG('aCL IgM') * 1.2 FROM Examination WHERE Thrombosis = 2 AND 'ANA Pattern' = 'S')", "source_tables": ["examination"]}, "evidence": "thrombosis level 2 refers to Thrombosis = 2; ANA pattern of only S refers to ANA = 'S'; average anti-Cardiolip in antibody (IgM) refers to AVG(`aCL IgM`); calculation = MULTIPLY(AVG + AVG, 0.2)"}
{"sample_id": 10612, "db_id": "thrombosis_prediction", "final": {"question": "What percentage of patients with a proteinuria level within the normal range have a uric acid level below the normal range?", "sql": "SELECT CAST(SUM(CASE WHEN UA <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Laboratory WHERE 'U-PRO' > 0 AND 'U-PRO' < 30", "source_tables": ["laboratory"]}, "evidence": "proteinuria level within the normal range refers to `U-PRO` > 0 AND `U-PRO` < 30; uric acid level below the normal range refers to UA < = 6.5; calculation = MULTIPLY(DIVIDE(UA < = 6.5, `U-PRO` > 0 AND `U-PRO` < 30)\uff0c100)"}
{"sample_id": 10613, "db_id": "thrombosis_prediction", "final": {"question": "What percentage of male patients who first presented to the hospital in 1981 were diagnosed with BEHCET?", "sql": "SELECT CAST(SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE STRFTIME('%Y', 'First Date') = '1981' AND SEX = 'M'", "source_tables": ["patient"]}, "evidence": "male refers to SEX = 'M'; first presented to the hospital in 1981 refers to YEAR(`FIRST DATE`) = '1981'; BEHCET refers to diagnosis; calculation = DIVIDE(SUM(DIAGNOSIS = 'BEHCET') where YEAR(`FIRST DATE`) = '1981', MULTIPLY(COUNT(YEAR(`FIRST DATE`) = '1981')), 100)"}
{"sample_id": 10614, "db_id": "thrombosis_prediction", "final": {"question": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.", "sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.'T-BIL' < 2.0 AND T2.Date LIKE '1991-10-%'", "source_tables": ["laboratory", "patient"]}, "evidence": "followed up at the outpatient clinic refers to Admission = '-'; laboratory test in April 1981 refers to Date like '1991-10%'; blood bilirubin level within the normal range refers to T-BIL < 2.0; "}
{"sample_id": 10615, "db_id": "thrombosis_prediction", "final": {"question": "Excluding all P only ANA Pattern patients, how many of the remainder are women born between 1980 and 1989?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.'ANA Pattern' != 'P' AND STRFTIME('%Y', T1.Birthday) BETWEEN '1980' AND '1989' AND T1.SEX = 'F'", "source_tables": ["examination", "patient"]}, "evidence": "Excluding all P only ANA Pattern refers to `ANA Pattern`! = 'P'; women refers to SEX = 'F'; born between 1980 and 1989 refers to BIRTHDAY"}
{"sample_id": 10616, "db_id": "thrombosis_prediction", "final": {"question": "What sex is the patient who in a medical examination was diagnosed with PSS and in a laboratory examination had a blood level of C-reactive protein de 2+, createnine 1 and LDH 123?", "sql": "SELECT T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T3.ID = T2.ID WHERE T2.Diagnosis = 'PSS' AND T3.CRP = '2+' AND T3.CRE = 1.0 AND T3.LDH = 123", "source_tables": ["examination", "laboratory", "patient"]}, "evidence": "PSS' refers to diagnosis; blood level of C-reactive protein de 2+refers to CRP > 2; createnine 1 refers to CRE = 1; LDH 123 refers to LDH = 123"}
{"sample_id": 10617, "db_id": "thrombosis_prediction", "final": {"question": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?", "sql": "SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 400 AND T1.Diagnosis = 'SLE' AND T1.SEX = 'F'", "source_tables": ["laboratory", "patient"]}, "evidence": "average blood albumin level refers to AVG(ALB); female refers to SEX = 'F'; PLT greater than 400 refers to PLT > 400; diagnosed with SLE refers to Diagnosis= 'SLE'"}
{"sample_id": 10618, "db_id": "thrombosis_prediction", "final": {"question": "What is the most common sign of patients with SLE disease?", "sql": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1", "source_tables": ["examination"]}, "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis"}
{"sample_id": 10619, "db_id": "thrombosis_prediction", "final": {"question": "When was the medical information on patient number 48473 first documented, and what disease did she have?", "sql": "SELECT 'First Date', Diagnosis FROM Patient WHERE ID = 48473", "source_tables": ["patient"]}, "evidence": "medical information first documented refers to Description; disease refers to diagnosis; patient number refers to id"}
{"sample_id": 10620, "db_id": "thrombosis_prediction", "final": {"question": "How many female patients were given an APS diagnosis?", "sql": "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'", "source_tables": ["patient"]}, "evidence": "female refers to SEX = 'F'; APS diagnosis refers to Diagnosis='APS'"}
{"sample_id": 10621, "db_id": "thrombosis_prediction", "final": {"question": "How many patients who underwent testing in 1997 had protein levels outside the normal range?", "sql": "SELECT COUNT(ID) FROM Laboratory WHERE (ALB <= 6.0 OR ALB >= 8.5) AND STRFTIME('%Y', Date) = '1997'", "source_tables": ["laboratory"]}, "evidence": "underwent testing in 1997 refers to YEAR(DATE) = '1997'; protein levels within the normal range refers to tp > 6 and tp < 8.5"}
{"sample_id": 10622, "db_id": "thrombosis_prediction", "final": {"question": "What proportion of patients who had signs of thrombocytopenia had SLE diagnosed?", "sql": "SELECT CAST(SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Examination WHERE Symptoms = 'thrombocytopenia'", "source_tables": ["examination"]}, "evidence": "thrombocytopenia' refers to symptoms; 'SLE' refers to diagnosis; calculation =  DIVIDE(SUM(DIAGNOSIS LIKE '%ITP%'), SUM(DIAGNOSIS LIKE '%SLE%')) MULTIPLY 100"}
{"sample_id": 10623, "db_id": "thrombosis_prediction", "final": {"question": "What percentage of patients who were born in 1980 and were diagnosed with RA are women?", "sql": "SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE Diagnosis = 'RA' AND STRFTIME('%Y', Birthday) = '1980'", "source_tables": ["patient"]}, "evidence": "born in 1980 refers to YEAR(BIRTHDAY) = '1980'; 'RA' refers to Diagnosis='RA' ; women refers to SEX = 'F'; calculation = DIVIDE(SUM(SEX = 'F'), COUNT(SEX)) * 100"}
{"sample_id": 10624, "db_id": "thrombosis_prediction", "final": {"question": "How many male patients who underwent testing between 1995 and 1997 and were subsequently diagnosed with Behcet disease did not stay in the hospital for treatment?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'Behcet' AND T1.SEX = 'M' AND STRFTIME('%Y', T2.'Examination Date') BETWEEN '1995' AND '1997' AND T1.Admission = '-'", "source_tables": ["examination", "patient"]}, "evidence": "male refers to SEX = 'M'; underwent testing between 1995 and 1997 refers to `Examination Date` between '1995' and '1997'; Behcet refers to diagnosis; did not stay in the hospital refers to Admission = '-'"}
{"sample_id": 10625, "db_id": "thrombosis_prediction", "final": {"question": "How many patients who were female got white blood cells that were below 3.5?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC < 3.5 AND T1.SEX = 'F'", "source_tables": ["laboratory", "patient"]}, "evidence": "female refers to SEX = 'F'; white blood cells that were below 3.5 refers to WBC < 3.5"}
{"sample_id": 10626, "db_id": "thrombosis_prediction", "final": {"question": "How long did it take after patient number 821298 arrived at the hospital for the first time before her evaluation began?", "sql": "SELECT STRFTIME('%d', T3.'Examination Date') - STRFTIME('%d', T1.'First Date') FROM Patient AS T1 INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T1.ID = 821298", "source_tables": ["examination", "patient"]}, "evidence": "DATEDIFF(`Examination Date`, `First Date`)"}
{"sample_id": 10627, "db_id": "thrombosis_prediction", "final": {"question": "Was the patient with the number 57266's uric acid within a normal range?", "sql": "SELECT CASE WHEN (T1.SEX = 'F' AND T2.UA > 6.5) OR (T1.SEX = 'M' AND T2.UA > 8.0) THEN true ELSE false END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266", "source_tables": ["laboratory", "patient"]}, "evidence": "uric acid within a normal range refers to UA > 8.0 and SEX = 'M'OR UA > 6.5 and SEX = 'F'"}
{"sample_id": 10628, "db_id": "thrombosis_prediction", "final": {"question": "When is the laboratory examination of patient '48473' where his/her AST glutamic oxaloacetic transaminase (GOT) index is above the normal range.", "sql": "SELECT Date FROM Laboratory WHERE ID = 48473 AND GOT >= 60", "source_tables": ["laboratory"]}, "evidence": "AST glutamic oxaloacetic transaminase (GOT) index is above the normal range refers to GOT > = 60; when refers to DATE"}
{"sample_id": 10629, "db_id": "thrombosis_prediction", "final": {"question": "List all patients with their sex and date of birthday, whose AST glutamic oxaloacetic transaminase (GOT) index is within normal range for loboratory examination in 1994.", "sql": "SELECT DISTINCT T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND STRFTIME('%Y', T2.Date) = '1994'", "source_tables": ["laboratory", "patient"]}, "evidence": "AST glutamic oxaloacetic transaminase (GOT) index is within normal range refers to GOT < 60; examination in 1994 refers to year(Date) = 1994"}
{"sample_id": 10630, "db_id": "thrombosis_prediction", "final": {"question": "Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.", "sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60", "source_tables": ["laboratory", "patient"]}, "evidence": "male refers to SEX = 'M'; ALT glutamic pylvic transaminase (GPT) exceed the normal range refers to GPT > = 60"}
{"sample_id": 10631, "db_id": "thrombosis_prediction", "final": {"question": "Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.", "sql": "SELECT DISTINCT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC", "source_tables": ["laboratory", "patient"]}, "evidence": "ALT glutamic pylvic transaminase beyond the normal range refers to GPT > 60; The larger the birthday value, the younger the person is, and vice versa; "}
{"sample_id": 10632, "db_id": "thrombosis_prediction", "final": {"question": "What is the average index of the lactate dehydrogenase (LDH) for all patients with lactate dehydrogenase (LDH) within the normal range.", "sql": "SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500", "source_tables": ["laboratory"]}, "evidence": "average index of the lactate dehydrogenase (LDH) refers to AVG(LDH); (LDH) within the normal range refers to LDH < 500"}
{"sample_id": 10633, "db_id": "thrombosis_prediction", "final": {"question": "Provide the ID and age of patient with lactate dehydrogenase (LDH) between 100-300 index above the normal range.", "sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 600 AND T2.LDH < 800", "source_tables": ["laboratory", "patient"]}, "evidence": "age refers to SUBTRACT(year(current_timestamp), year(Birthday)); lactate dehydrogenase (LDH) between 100-300 index above the normal range refers to LDH between 600 and 800;"}
{"sample_id": 10634, "db_id": "thrombosis_prediction", "final": {"question": "For patients with alkaliphophatase (ALP) within normal range, were they treated as inpatient or outpatient?", "sql": "SELECT T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300", "source_tables": ["laboratory", "patient"]}, "evidence": "alkaliphophatase (ALP) within normal range refers to ALP < 300; inpatient refers to admission = '+'; outpatient refers to admission = '-'"}
{"sample_id": 10635, "db_id": "thrombosis_prediction", "final": {"question": "Name the ID of the patient who is born on the April 1st, 1982. Is his/her alkaliphophatase (ALP) within normal range?", "sql": "SELECT T1.ID , CASE WHEN T2.ALP < 300 THEN 'normal' ELSE 'abNormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01'", "source_tables": ["laboratory", "patient"]}, "evidence": "alkaliphophatase (ALP) within normal range refers to ALP < 300"}
{"sample_id": 10636, "db_id": "thrombosis_prediction", "final": {"question": "List ID, sex and date of birth of patient whose total protein (TP) below the lower range of the normal index.", "sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0", "source_tables": ["laboratory", "patient"]}, "evidence": "total protein (TP) below the lower range of the normal index refers to TP < 6.0"}
{"sample_id": 10637, "db_id": "thrombosis_prediction", "final": {"question": "For all female patient with total protein (TP) beyond the normal index, what is the deviation of their TP idex from the normal.", "sql": "SELECT T2.TP - 8.5 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.TP > 8.5", "source_tables": ["laboratory", "patient"]}, "evidence": "female refers to SEX = 'F'; total protein (TP) beyond the normal index refers to TP > 8.5; deviation of TP index from normal refers to SUBTRACT(TP, 8.5)"}
{"sample_id": 10638, "db_id": "thrombosis_prediction", "final": {"question": "Sort in descending order all patients by birthday for male patient with albumin not within range.", "sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND (T2.ALB <= 3.5 OR T2.ALB >= 5.5) ORDER BY T1.Birthday DESC", "source_tables": ["laboratory", "patient"]}, "evidence": "male = SEX = 'M'; albumin not within range refers to ALB < = 3.5 or ALB > = 5.5"}
{"sample_id": 10639, "db_id": "thrombosis_prediction", "final": {"question": "For all patient born in 1982, state if their albumin is within normal range.", "sql": "SELECT CASE WHEN T2.ALB >= 3.5 AND T2.ALB <= 5.5 THEN 'normal' ELSE 'abnormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1982'", "source_tables": ["laboratory", "patient"]}, "evidence": "Year(Birthday) = '1982'; albumin is within normal range refers to ALB between 3.5 and 5.5"}
{"sample_id": 10640, "db_id": "thrombosis_prediction", "final": {"question": "What is the percentage of the female patient whose uric acid (UA) beyond the normal range?", "sql": "SELECT CAST(SUM(CASE WHEN T2.UA > 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'", "source_tables": ["laboratory", "patient"]}, "evidence": "uric acid (UA) beyond the normal range refers to UA > 8.0 and SEX = 'M' or UA > 6.5 and SEX = 'F'; female refers to Sex = 'F'"}
{"sample_id": 10641, "db_id": "thrombosis_prediction", "final": {"question": "For all patients with normal uric acid (UA), what is the average UA index based on their latest laboratory examination result?", "sql": "SELECT AVG(T2.UA) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.UA < 6.5 AND T1.SEX = 'F') OR (T2.UA < 8.0 AND T1.SEX = 'M') AND T2.Date = ( SELECT MAX(Date) FROM Laboratory )", "source_tables": ["laboratory", "patient"]}, "evidence": "uric acid (UA) with normal range refers to UA < 8.0 and SEX = 'M' or UA < 6.5 and SEX = 'F'; average UA index refers to AVG(UA)"}
{"sample_id": 10642, "db_id": "thrombosis_prediction", "final": {"question": "Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?", "sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29", "source_tables": ["laboratory", "patient"]}, "evidence": "urea nitrogen (UN) just within the borderline of passing refers to UN = 29; "}
{"sample_id": 10643, "db_id": "thrombosis_prediction", "final": {"question": "Provide the ID, sex, birthday of all patients diagnosed with 'RA' that are within the UN normal index.", "sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN < 30 AND T1.Diagnosis = 'RA'", "source_tables": ["laboratory", "patient"]}, "evidence": "within the UN normal index refers to UN < 30; Diagnosis = 'RA'"}
{"sample_id": 10644, "db_id": "thrombosis_prediction", "final": {"question": "How many male patients are are with creatinine index out of the normal range?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND T1.SEX = 'M'", "source_tables": ["laboratory", "patient"]}, "evidence": "creatinine (CRE) out of the normal range refers to CRE > = 1.5; Male refers to Sex = 'M'"}
{"sample_id": 10645, "db_id": "thrombosis_prediction", "final": {"question": "Are there more male patients with creatinine not within the normal range than female? True or False?", "sql": "SELECT CASE WHEN SUM(CASE WHEN T1.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) THEN 'True' ELSE 'False' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5", "source_tables": ["laboratory", "patient"]}, "evidence": "creatinine (CRE) not within the normal range refers to CRE > = 1.5; male refers to Sex = 'M'; female refers to Sex = 'F'; calculation = (SUM(SEX = 'M') > SUM(SEX = 'F')) where CRE > = 1.5"}
{"sample_id": 10646, "db_id": "thrombosis_prediction", "final": {"question": "What is the highest total bilirubin level recorded? List out the patient details with ID, sex and birthday with that index.", "sql": "SELECT T2.'T-BIL', T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.'T-BIL' DESC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "the highest total bilirubin refers to MAX(T-BIL)"}
{"sample_id": 10647, "db_id": "thrombosis_prediction", "final": {"question": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.", "sql": "SELECT T1.ID,T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.'T-BIL' >= 2.0 GROUP BY T1.SEX,T1.ID", "source_tables": ["laboratory", "patient"]}, "evidence": "List refers to GROUP_CONCAT(DISTINCT ID); total bilirubin (T-BIL) not within normal range refers to T-BIL > = 2.0"}
{"sample_id": 10648, "db_id": "thrombosis_prediction", "final": {"question": "Who is the oldest patient with the highest total cholesterol (T-CHO). State the patient ID and T-CHO index.", "sql": "SELECT T1.ID, T2.'T-CHO' FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.'T-CHO' DESC, T1.Birthday ASC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "oldest patient refers to MIN(birthday); highest total cholesterol refers to MAX(T-CHO);"}
{"sample_id": 10649, "db_id": "thrombosis_prediction", "final": {"question": "What is the average age of the male patient with high cholesterol?", "sql": "SELECT AVG(STRFTIME('%Y', date('NOW')) - STRFTIME('%Y', T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.'T-CHO' >= 250 AND T1.SEX = 'M'", "source_tables": ["laboratory", "patient"]}, "evidence": "average age = DIVIDE(SUM(SUBTRACT(YEAR(NOW()), YEAR(birthday))), COUNT(ID)); male patient refers to sex = 'M'; high cholesterol refers to `T-CHO` > = 250;"}
{"sample_id": 10650, "db_id": "thrombosis_prediction", "final": {"question": "Provide list of patients and their diagnosis with triglyceride (TG) index greater than 100 of the normal range?", "sql": "SELECT T1.ID, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG > 300", "source_tables": ["laboratory", "patient"]}, "evidence": "triglyceride (TG) index greater than 100 of the normal range refers to TG > 300;"}
{"sample_id": 10651, "db_id": "thrombosis_prediction", "final": {"question": "For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 50", "source_tables": ["laboratory", "patient"]}, "evidence": "triglyceride (TG) level beyond the normal range refers to TG > = 200; more than 50 years of age = SUBTRACT(year(current_timestamp), year(Birthday)) > 50; Should consider DISTINCT in the final result;"}
{"sample_id": 10652, "db_id": "thrombosis_prediction", "final": {"question": "List all outpatient within normal range of creatinine phosphokinase. Give me the distinct ids.", "sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CPK < 250 AND T1.Admission = '-'", "source_tables": ["laboratory", "patient"]}, "evidence": "outpatient refers to Admission = '-'; normal range of creatinine phosphokinase refers to CPK < 250;"}
{"sample_id": 10653, "db_id": "thrombosis_prediction", "final": {"question": "For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) BETWEEN '1936' AND '1956' AND T1.SEX = 'M' AND T2.CPK >= 250", "source_tables": ["laboratory", "patient"]}, "evidence": "born between 1936-1956 refers to year(Birthday) BETWEEN '1936' AND '1956'; male patients refers to sex = 'M'; creatinine phosphokinase beyond the normal range refers to CPK > = 250; Should consider DISTINCT in the final result;"}
{"sample_id": 10654, "db_id": "thrombosis_prediction", "final": {"question": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.", "sql": "SELECT DISTINCT T1.ID, T1.SEX , STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.'T-CHO' < 250", "source_tables": ["laboratory", "patient"]}, "evidence": "age = SUBTRACT(year(current_timestamp), year(Birthday)); blood glucose (GLU) not within normal range refers to GLU > = 180; total cholesterol(T-CHO) within normal range refers to `T-CHO` < 250; "}
{"sample_id": 10655, "db_id": "thrombosis_prediction", "final": {"question": "List each patient's ID and blood glucose (GLU) index that were within normal range for patient's whose data was first recorded in 1991.", "sql": "SELECT DISTINCT T1.ID, T2.GLU FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.'First Date') = '1991' AND T2.GLU < 180", "source_tables": ["laboratory", "patient"]}, "evidence": "blood glucose (GLU) index that were within normal range refers to GLU < 180; data that was first recorded in 1991 refers to year(Description) = 1991;"}
{"sample_id": 10656, "db_id": "thrombosis_prediction", "final": {"question": "List the patient ID, sex and birthday who has abnormal white blood cell count. Group them by sex and list the patient by age in ascending order.", "sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC <= 3.5 OR T2.WBC >= 9.0 GROUP BY T1.SEX,T1.ID ORDER BY T1.Birthday ASC", "source_tables": ["laboratory", "patient"]}, "evidence": "abnormal white blood cell count refers to WBC < = 3.5 or WBC > = 9.0;"}
{"sample_id": 10657, "db_id": "thrombosis_prediction", "final": {"question": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.", "sql": "SELECT DISTINCT T1.Diagnosis, T1.ID , STRFTIME('%Y', CURRENT_TIMESTAMP) -STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5", "source_tables": ["laboratory", "patient"]}, "evidence": "patient's diagnosis refers to Diagnosis; lower red blood cell refers to RBC < 3.5; age = SUBTRACT(year(current_timestamp), year(Birthday)); "}
{"sample_id": 10658, "db_id": "thrombosis_prediction", "final": {"question": "For all the female patient age 50 and above, who has abnormal red blood cell count. State if they were admitted to hospital.", "sql": "SELECT DISTINCT T1.ID, T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND (T2.RBC <= 3.5 OR T2.RBC >= 6.0) AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50", "source_tables": ["laboratory", "patient"]}, "evidence": "female patient refers to Sex = 'F'; age 50 and above = SUBTRACT(year(current_timestamp), year(Birthday)) > = 50; abnormal red blood cell count refers to RBC < = 3.5 or RBC > = 6.0; Admission = '+' means the patient was admitted to the hospital; Admission = '-' means the patient was not admitted to the hospital;"}
{"sample_id": 10659, "db_id": "thrombosis_prediction", "final": {"question": "Among all outpatients, list out those have low hemoglobin level. State the different IDs and their sex.", "sql": "SELECT DISTINCT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HGB < 10 AND T1.Admission = '-'", "source_tables": ["laboratory", "patient"]}, "evidence": "outpatients refers to Admission = '-'; low hemoglobin level refers to HBG < 10;"}
{"sample_id": 10660, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.", "sql": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "diagnosed with SLE refers to Diagnosis = 'SLE'; The larger the birthday value, the younger the person is, and vice versa; normal hemoglobin level refers to 10 < HGB < 17;"}
{"sample_id": 10661, "db_id": "thrombosis_prediction", "final": {"question": "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.", "sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN ( SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2 )", "source_tables": ["laboratory", "patient"]}, "evidence": "age = SUBTRACT(year(current_timestamp), year(Birthday)); patient with two or more laboratory examinations refers to COUNT(ID) > 2; hematoclit level exceeded the normal range refers to HCT > = 52;"}
{"sample_id": 10662, "db_id": "thrombosis_prediction", "final": {"question": "From laboratory examinations in 1991, what is the average hematoclit level that is lower than the normal range.", "sql": "SELECT AVG(T2.HCT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT < 29 AND STRFTIME('%Y', T2.Date) = '1991'", "source_tables": ["laboratory", "patient"]}, "evidence": "laboratory examinations in 1991 refers to Date like '1991%'; average hematoclit level = AVG(HCT); hematoclit level that is lower than the normal range refers to HCT < 29;"}
{"sample_id": 10663, "db_id": "thrombosis_prediction", "final": {"question": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?", "sql": "SELECT SUM(CASE WHEN T2.PLT <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.PLT >= 400 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID", "source_tables": ["laboratory", "patient"]}, "evidence": "abnormal platelet level refers to PLT <= 100 or PLT >= 400; platelet level lower than normal range refers to PLT < 100; calculation = SUBTRACT(SUM(PLT < 100), SUM(PLT > 400)); platelet level higher than normal range refers to PLT > 400;"}
{"sample_id": 10664, "db_id": "thrombosis_prediction", "final": {"question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.", "sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) < 50 AND STRFTIME('%Y', T2.Date) = '1984'", "source_tables": ["laboratory", "patient"]}, "evidence": "laboratory examinations take in 1984 refers to YEAR(Date) = '1984'; below 50 years old = SUBTRACT(year(current_timestamp), year(Birthday)) < 50; normal platelet level refers to PLT between 100 and 400; "}
{"sample_id": 10665, "db_id": "thrombosis_prediction", "final": {"question": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?", "sql": "SELECT CAST(SUM(CASE WHEN T2.PT >= 14 AND T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 55", "source_tables": ["laboratory", "patient"]}, "evidence": "older than 55 years old = SUBTRACT(year(current_timestamp), year(Birthday)) > 55; abnormal prothrombin time (PT) refers to PT > = 14; percentage = DIVIDE(SUM(PT > = 14 AND SEX = 'F'), SUM(PT > = 14)) * 100; female refers to sex = 'F'; "}
{"sample_id": 10666, "db_id": "thrombosis_prediction", "final": {"question": "List all patients who first came to the hospital after year 1992 with prothrombin time (PT) level that are normal.", "sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.'First Date') > '1992' AND T2.PT < 14", "source_tables": ["laboratory", "patient"]}, "evidence": "first came to the hospital after year 1992 refers to year(`First Date`) > 1992; prothrombin time (PT) level that are normal refers to PT < 14;"}
{"sample_id": 10667, "db_id": "thrombosis_prediction", "final": {"question": "For the examinations done after 1997/1/1, how many of them have the result of an inactivated partial prothrom bin time?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.Date > '1997-01-01' AND T2.APTT >= 45", "source_tables": ["laboratory", "patient"]}, "evidence": "examinations done after 1997/1/1 refers to `Examination Date` > '1997-01-01'; normal activated partial prothrom bin time refesr to APTT < 45;"}
{"sample_id": 10734, "db_id": "student_club", "final": {"question": "What's Angela Sanders's major?", "sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'", "source_tables": ["major", "member"]}, "evidence": "Angela Sanders is the full name; full name refers to first_name, last_name; major refers to major_name."}
{"sample_id": 10735, "db_id": "student_club", "final": {"question": "How many students in the Student_Club are from the College of Engineering?", "sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'", "source_tables": ["major", "member"]}, "evidence": ""}
{"sample_id": 10736, "db_id": "student_club", "final": {"question": "Please list the full names of the students in the Student_Club that come from the Art and Design Department.", "sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'", "source_tables": ["major", "member"]}, "evidence": "full name refers to first_name, last_name;"}
{"sample_id": 10737, "db_id": "student_club", "final": {"question": "How many students of the Student_Club have attended the event \"Women's Soccer\"?", "sql": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'", "source_tables": ["event", "attendance"]}, "evidence": "Women's Soccer is an event name"}
{"sample_id": 10738, "db_id": "student_club", "final": {"question": "Please list the phone numbers of the students from the Student_Club that has attended the event \"Women's Soccer\".", "sql": "SELECT T3.phone FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer'", "source_tables": ["event", "attendance", "member"]}, "evidence": "Women's Soccer is an event name; phone numbers refers to phone"}
{"sample_id": 10739, "db_id": "student_club", "final": {"question": "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?", "sql": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'", "source_tables": ["event", "attendance", "member"]}, "evidence": "Women's Soccer is an event name; T-shirt that is in medium size refers to t_shirt_size = 'Medium'"}
{"sample_id": 10740, "db_id": "student_club", "final": {"question": "What is the event that has the highest attendance of the students from the Student_Club?", "sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1", "source_tables": ["event", "attendance"]}, "evidence": "event with highest attendance refers to MAX(COUNT(link_to_event))"}
{"sample_id": 10741, "db_id": "student_club", "final": {"question": "Which college is the vice president of the Student_Club from?", "sql": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'vice president'", "source_tables": ["major", "member"]}, "evidence": "Vice President is a position of the Student Club"}
{"sample_id": 10742, "db_id": "student_club", "final": {"question": "Please list the event names of all the events attended by Maya Mclean.", "sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'", "source_tables": ["event", "attendance", "member"]}, "evidence": ""}
{"sample_id": 10743, "db_id": "student_club", "final": {"question": "How many events of the Student_Club did Sacha Harrison attend in 2019?", "sql": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND SUBSTR(T1.event_date, 1, 4) = '2019'", "source_tables": ["event", "attendance", "member"]}, "evidence": "events attended in 2019 refers to YEAR(event_date) = 2019"}
{"sample_id": 10744, "db_id": "student_club", "final": {"question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?", "sql": "SELECT T1.event_name FROM event AS T1  INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id  HAVING COUNT(T2.link_to_event) > 10 EXCEPT SELECT T1.event_name  FROM event AS T1  WHERE T1.type = 'Meeting'", "source_tables": ["event", "attendance"]}, "evidence": "meetings events refers to type = 'Meeting'; attended by more than 10 members refers to COUNT(event_id) > 10"}
{"sample_id": 10745, "db_id": "student_club", "final": {"question": "List all the names of events that had an attendance of over 20 students but were not fundraisers.", "sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) > 20 EXCEPT SELECT T1.event_name FROM event AS T1  WHERE T1.type = 'Fundraiser'", "source_tables": ["event", "attendance"]}, "evidence": "name of events refers to event_name; attendance of over 20 students COUNT(event_id) > 20."}
{"sample_id": 10746, "db_id": "student_club", "final": {"question": "What is the average attendance of meetings in 2020?", "sql": "SELECT CAST(COUNT(T2.link_to_event) AS REAL) / COUNT(DISTINCT T2.link_to_event) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE SUBSTR(T1.event_date, 1, 4) = '2020' AND T1.type = 'Meeting'", "source_tables": ["event", "attendance"]}, "evidence": "meetings in 2020 refers to type = 'Meeting' where YEAR(event_date) = 2020; average = DIVIDE(COUNT(event_id), COUNT(DISTINCT event_name))"}
{"sample_id": 10747, "db_id": "student_club", "final": {"question": "What is the most expensive item that was spent in support of club events?", "sql": "SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1", "source_tables": ["expense"]}, "evidence": "item in support of club events refers to expense_description; most expensive refers to MAX(cost)"}
{"sample_id": 10748, "db_id": "student_club", "final": {"question": "How many members of the Student_Club have majored Environmental Engineering?\n", "sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'", "source_tables": ["major", "member"]}, "evidence": "'Environmental Engineering' is the major name"}
{"sample_id": 10749, "db_id": "student_club", "final": {"question": "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event.", "sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'", "source_tables": ["attendance", "event", "member"]}, "evidence": "full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;"}
{"sample_id": 10750, "db_id": "student_club", "final": {"question": "List the last name of all the students who majored Law and Constitutional Studies. \n", "sql": "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'", "source_tables": ["major", "member"]}, "evidence": "'Law and Constitutional Studies' is the major name"}
{"sample_id": 10751, "db_id": "student_club", "final": {"question": "What county did Sherri Ramsey grew up?", "sql": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'", "source_tables": ["zip_code", "member"]}, "evidence": ""}
{"sample_id": 10752, "db_id": "student_club", "final": {"question": "What college offers the major that Tyler Hewitt took?", "sql": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'", "source_tables": ["major", "member"]}, "evidence": ""}
{"sample_id": 10753, "db_id": "student_club", "final": {"question": "What is the amount of the funds that the Vice President received?", "sql": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'", "source_tables": ["income", "member"]}, "evidence": "'Vice President' is a position of Student Club; funds received refers to amount."}
{"sample_id": 10754, "db_id": "student_club", "final": {"question": "How much did the Student_Club members spend on food in September Meeting?", "sql": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Food' AND SUBSTR(T1.event_date, 6, 2) = '09'", "source_tables": ["event", "budget"]}, "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Food' where event_name = 'September Meeting'"}
{"sample_id": 10755, "db_id": "student_club", "final": {"question": "What city and state did the President of the Student_Club grow up?", "sql": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'", "source_tables": ["zip_code", "member"]}, "evidence": "'President' is a position of Student Club;"}
{"sample_id": 10756, "db_id": "student_club", "final": {"question": "List the full name of the Student_Club members that grew up in Illinois state.", "sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'", "source_tables": ["zip_code", "member"]}, "evidence": "full name of member refers to first_name, last_name"}
{"sample_id": 10757, "db_id": "student_club", "final": {"question": "How much did the Student_Club members spend on advertisement in September Meeting?", "sql": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'", "source_tables": ["event", "budget"]}, "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Advertisement' where event_name = 'September Meeting'"}
{"sample_id": 10758, "db_id": "student_club", "final": {"question": "What department offers the major that Pierce and Guidi took?", "sql": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.last_name = 'Pierce' OR T1.last_name = 'Guidi'", "source_tables": ["major", "member"]}, "evidence": ""}
{"sample_id": 10759, "db_id": "student_club", "final": {"question": "What is the total budgeted amount for all category in \"October Speaker\" event?", "sql": "SELECT SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Speaker'", "source_tables": ["event", "budget"]}, "evidence": "total budgeted amount refers to SUM(amount) where event_name = 'October Speaker'"}
{"sample_id": 10760, "db_id": "student_club", "final": {"question": "Was each expense in October Meeting on October 8, 2019 approved?", "sql": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'", "source_tables": ["event", "budget", "expense"]}, "evidence": "event_name = 'October Meeting' where event_date = '2019-10-08'; approved = True means expenses was approved; approved = False means expenses was not approved"}
{"sample_id": 10761, "db_id": "student_club", "final": {"question": "Calculate the total average cost that Elijah Allen spent in the events on September and October.", "sql": "SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.last_name = 'Allen' AND T1.first_name = 'Elijah' AND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')", "source_tables": ["expense", "member"]}, "evidence": "Elijah Allen is the full name; full name refers to first_name, last_name; The 5th and 6th string of the expense_date in the expense table can refer to month; events in September and October refers to month(expense_date) = 9 OR month(expense_date) = 10"}
{"sample_id": 10762, "db_id": "student_club", "final": {"question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.", "sql": "SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event", "source_tables": ["event", "budget"]}, "evidence": "The first 4 strings of the event_date values in the event table can represent year; The difference of the total amount spent = SUBTRACT(spent where YEAR(event_date) = 2019, spent where YEAR(event_date) = 2020)"}
{"sample_id": 10763, "db_id": "student_club", "final": {"question": "Give the location for \"Spring Budget Review\".", "sql": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'", "source_tables": ["event"]}, "evidence": "'Spring Budget Review' is an event name;"}
{"sample_id": 10764, "db_id": "student_club", "final": {"question": "What was the cost for the \"Posters\" on 2019/9/4?", "sql": "SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'", "source_tables": ["expense"]}, "evidence": "'Poster' is an event description; on 2019/9/14 refers to event_date = '2019-09-04'"}
{"sample_id": 10765, "db_id": "student_club", "final": {"question": "With the biggest budget for the \"Food\", what was the remaining of it?", "sql": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )", "source_tables": ["budget"]}, "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'"}
{"sample_id": 10766, "db_id": "student_club", "final": {"question": "What was the notes of the fundraising on 2019/9/14?", "sql": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'", "source_tables": ["income"]}, "evidence": "fundraising on 2019/9/14 refers to source = 'Fundraising' where date_received = '2019-09-14'"}
{"sample_id": 10767, "db_id": "student_club", "final": {"question": "How many majors are there in \"College of Humanities and Social Sciences\"?", "sql": "SELECT COUNT(major_name) FROM major WHERE college = 'College of Humanities and Social Sciences'", "source_tables": ["major"]}, "evidence": ""}
{"sample_id": 10768, "db_id": "student_club", "final": {"question": "Tell the phone number of \"Carlo Jacobs\".", "sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'", "source_tables": ["member"]}, "evidence": "Carlo Jacobs is the full name; full name refers to first_name, last_name;"}
{"sample_id": 10769, "db_id": "student_club", "final": {"question": "Tell the hometown county for \"Adela O'Gallagher\".", "sql": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher'", "source_tables": ["zip_code", "member"]}, "evidence": "hometown county refers to county"}
{"sample_id": 10770, "db_id": "student_club", "final": {"question": "For all the budgets for \"November Meeting\", how many of them had exceeded the budget?", "sql": "SELECT COUNT(T2.event_id) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0", "source_tables": ["event", "budget"]}, "evidence": "'November Meeting' is an event name; remaining < 0 means the cost had exceeded the budget"}
{"sample_id": 10771, "db_id": "student_club", "final": {"question": "Provide the total number of the budget amount for \"September Speaker\" event.", "sql": "SELECT SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'September Speaker'", "source_tables": ["event", "budget"]}, "evidence": "'September Speaker' is an event name; total number of budget amount refers to SUM(amount)"}
{"sample_id": 10772, "db_id": "student_club", "final": {"question": "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?", "sql": "SELECT T1.event_status FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-08-20'", "source_tables": ["budget", "expense"]}, "evidence": "'Post Cards, Posters' is an expense description; on 2019/8/20 refers to expense_date = '2019-8-20'; status of event refers to event_status"}
{"sample_id": 10773, "db_id": "student_club", "final": {"question": "What was Brent Thomason's major?", "sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'", "source_tables": ["major", "member"]}, "evidence": "Brent Thomason is the full name; full name refers to first_name, last_name; major refers to major_name"}
{"sample_id": 10774, "db_id": "student_club", "final": {"question": "For all the club members from \"Business\" major, how many of them wear medium size t-shirt?", "sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'", "source_tables": ["major", "member"]}, "evidence": "'Business' is a major name; wear medium size t-shirt refers to t_shirt_size = 'Medium'"}
{"sample_id": 10775, "db_id": "student_club", "final": {"question": "What's Christof Nielson's zip code type?", "sql": "SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'", "source_tables": ["zip_code", "member"]}, "evidence": ""}
{"sample_id": 10776, "db_id": "student_club", "final": {"question": "State the major name for the Vice President of the club.", "sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'", "source_tables": ["major", "member"]}, "evidence": "'Vice President' is a position of Student Club"}
{"sample_id": 10777, "db_id": "student_club", "final": {"question": "Where is the hometown state for \"Sacha Harrison\"?", "sql": "SELECT T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'", "source_tables": ["zip_code", "member"]}, "evidence": "hometown state refers to state;"}
{"sample_id": 10778, "db_id": "student_club", "final": {"question": "Which department was the President of the club in?", "sql": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'", "source_tables": ["major", "member"]}, "evidence": "'President' is a position of Student Club"}
{"sample_id": 10779, "db_id": "student_club", "final": {"question": "State the date Connor Hilton paid his/her dues.", "sql": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'", "source_tables": ["income", "member"]}, "evidence": "Connor Hilton is the full name; full name refers to first_name, last_name; date the dues was paid refers to date_received where source = 'Dues';"}
{"sample_id": 10780, "db_id": "student_club", "final": {"question": "Who was the first one paid his/her dues? Tell the full name.", "sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Dues' ORDER BY T2.date_received LIMIT 1", "source_tables": ["income", "member"]}, "evidence": "full name refers to first_name, last_name; first paid dues refers to MIN(received_date) where source = 'Dues'"}
{"sample_id": 10781, "db_id": "student_club", "final": {"question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?", "sql": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'", "source_tables": ["event", "budget"]}, "evidence": "budget in Advertisement refer to category = 'Advertisement' in the budget table; DIVIDE(SUM(amount when event_name = 'Yearly Kickoff'), SUM(amount when event_name = 'October Meeting'))"}
{"sample_id": 10782, "db_id": "student_club", "final": {"question": "What percentage was the budget for Parking to the total budget for the \"November Speaker\"?", "sql": "SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'", "source_tables": ["event", "budget"]}, "evidence": "DIVDE(SUM( amount where category = 'Parking' and event_name = 'November Speaker'), COUNT(event_name = 'November Speaker)) * 100"}
{"sample_id": 10783, "db_id": "student_club", "final": {"question": "What is the total cost of the pizzas for all the events?", "sql": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'", "source_tables": ["expense"]}, "evidence": "total cost of the pizzas refers to SUM(cost) where expense_description = 'Pizza'"}
{"sample_id": 10784, "db_id": "student_club", "final": {"question": "How many cities are there in Orange County, Virginia?", "sql": "SELECT COUNT(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'", "source_tables": ["zip_code"]}, "evidence": "Orange County is the county name, Virginia is the state name"}
{"sample_id": 10785, "db_id": "student_club", "final": {"question": "List all of the College of Humanities and Social Sciences' departments.", "sql": "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'", "source_tables": ["major"]}, "evidence": ""}
{"sample_id": 10786, "db_id": "student_club", "final": {"question": "Where is Amy Firth's hometown?", "sql": "SELECT T2.city, T2.county, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'", "source_tables": ["zip_code", "member"]}, "evidence": "hometown refers to city, county, state"}
{"sample_id": 10787, "db_id": "student_club", "final": {"question": "What are the expenses of the budget with the lowest remaining?", "sql": "SELECT T2.expense_description FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget ORDER BY T1.remaining LIMIT 1", "source_tables": ["budget", "expense"]}, "evidence": "expense of budget refers to expense_description; lowest remaining refers to MIN(remaining)"}
{"sample_id": 10788, "db_id": "student_club", "final": {"question": "List all the members who attended the event \"October Meeting\".", "sql": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'", "source_tables": ["event", "attendance", "member"]}, "evidence": "'October Meeting' is an event name;"}
{"sample_id": 10789, "db_id": "student_club", "final": {"question": "Which college do most of the members go to?", "sql": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.major_id ORDER BY COUNT(T2.college) DESC LIMIT 1", "source_tables": ["major", "member"]}, "evidence": "college most members go refers to MAX(COUNT(major.college))"}
{"sample_id": 10790, "db_id": "student_club", "final": {"question": "What does the person with the phone number \"809-555-3360\" major in?", "sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'", "source_tables": ["major", "member"]}, "evidence": "major in refers to major_name"}
{"sample_id": 10791, "db_id": "student_club", "final": {"question": "Which event has the highest budget amount?", "sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id ORDER BY T1.amount DESC LIMIT 1", "source_tables": ["event", "budget"]}, "evidence": "event refers to event_name; highest budget amount refers to MAX(amount)"}
{"sample_id": 10792, "db_id": "student_club", "final": {"question": "List all the expenses incurred by the vice president.", "sql": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'", "source_tables": ["expense", "member"]}, "evidence": "expense refers to expense_description; 'Vice President' is a position of the Student Club"}
{"sample_id": 10793, "db_id": "student_club", "final": {"question": "How many members attended the \"Women's Soccer\" event?", "sql": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'", "source_tables": ["event", "attendance"]}, "evidence": "'Women's Soccer' is the event name;"}
{"sample_id": 10794, "db_id": "student_club", "final": {"question": "When did the member, Casey Mason, received the income?", "sql": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Casey' AND T1.last_name = 'Mason'", "source_tables": ["income", "member"]}, "evidence": "when the income was received refers to date_received"}
{"sample_id": 10795, "db_id": "student_club", "final": {"question": "How many of the members' hometowns are from Maryland state?", "sql": "SELECT COUNT(T2.member_id) FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.state = 'Maryland'", "source_tables": ["member", "zip_code"]}, "evidence": ""}
{"sample_id": 10796, "db_id": "student_club", "final": {"question": "How many events did the member with the phone number \"954-555-6240\" attend?", "sql": "SELECT COUNT(T2.link_to_event) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T1.phone = '954-555-6240'", "source_tables": ["attendance", "member"]}, "evidence": ""}
{"sample_id": 10797, "db_id": "student_club", "final": {"question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.", "sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'", "source_tables": ["major", "member"]}, "evidence": "list all members means to list all the full name; full name refers to first_name, last_name;"}
{"sample_id": 10798, "db_id": "student_club", "final": {"question": "Among all the closed events, which event has the highest spend-to-budget ratio?", "sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / T1.amount DESC LIMIT 1", "source_tables": ["event", "budget"]}, "evidence": "closed events refers to event_name where status = 'Closed'; highest spend-to budget ratio refers to MAX(DIVIDE(spent, amount))"}
{"sample_id": 10799, "db_id": "student_club", "final": {"question": "How many student have the position of president?", "sql": "SELECT COUNT(member_id) FROM member WHERE position = 'President'", "source_tables": ["member"]}, "evidence": "'President' is a position of Student Club"}
{"sample_id": 10800, "db_id": "student_club", "final": {"question": "What is the highest amount of budget spend for an event?", "sql": "SELECT MAX(spent) FROM budget", "source_tables": ["budget"]}, "evidence": "highest amount of budget spend refers to MAX(spent)"}
{"sample_id": 10801, "db_id": "student_club", "final": {"question": "How many meeting events were held in 2020?", "sql": "SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND SUBSTR(event_date, 1, 4) = '2020'", "source_tables": ["event"]}, "evidence": "meeting events refers to type = 'Meeting'; held in 2020 refers to YEAR(event_date) = 2020"}
{"sample_id": 10802, "db_id": "student_club", "final": {"question": "What is the total amount of money spent for food?", "sql": "SELECT SUM(spent) FROM budget WHERE category = 'Food'", "source_tables": ["budget"]}, "evidence": "total amount of money spent refers to SUM(spent); spent for food refers to category = 'Food'"}
{"sample_id": 10803, "db_id": "student_club", "final": {"question": "List the name of students that have attended more than 7 events.", "sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T2.link_to_member HAVING COUNT(T2.link_to_event) > 7", "source_tables": ["attendance", "member"]}, "evidence": "name of students means the full name; full name refers to first_name, last_name; attended more than 7 events refers to COUNT(link_to_event) > 7"}
{"sample_id": 10804, "db_id": "student_club", "final": {"question": "Among the students majored in interior design, who have attended the Community Theater event?", "sql": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater' AND T1.major_name = 'Interior Design'", "source_tables": ["attendance", "event", "major", "member"]}, "evidence": "majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;"}
{"sample_id": 10805, "db_id": "student_club", "final": {"question": "State the name of students from Georgetown, South Carolina.", "sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'", "source_tables": ["zip_code", "member"]}, "evidence": "name of students means the full name; full name refers to first_name, last_name; Georgetown is a city; South Carolina is a state"}
{"sample_id": 10806, "db_id": "student_club", "final": {"question": "How many income generated by Grant Gilmour?", "sql": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Grant' AND T1.last_name = 'Gilmour'", "source_tables": ["income", "member"]}, "evidence": "income generated refers to income.amount"}
{"sample_id": 10807, "db_id": "student_club", "final": {"question": "Which student was able to generate income more than $40?", "sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 40", "source_tables": ["income", "member"]}, "evidence": "name of students means the full name; full name refers to first_name, last_name; generate income more than $50 refers to income.amount > 40"}
{"sample_id": 10808, "db_id": "student_club", "final": {"question": "What is the total expense for the Yearly Kickoff?", "sql": "SELECT SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'Yearly Kickoff'", "source_tables": ["event", "budget", "expense"]}, "evidence": "'Yearly Kickoff' is an event name; total expense refers to SUM(cost)"}
{"sample_id": 10809, "db_id": "student_club", "final": {"question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?", "sql": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'", "source_tables": ["event", "budget", "expense", "member"]}, "evidence": "name of students means the full name; full name refers to first_name, last_name;'Yearly Kickoff' is an event name;"}
{"sample_id": 10810, "db_id": "student_club", "final": {"question": "Which students manage to generate the highest income. State his/her full name along with the income source.", "sql": "SELECT T1.first_name, T1.last_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.first_name, T1.last_name, T2.source ORDER BY SUM(T2.amount) DESC LIMIT 1", "source_tables": ["income", "member"]}, "evidence": "name of students means the full name; full name refers to first_name, last_name; generate the highest income refers to MAX(income.amount);"}
{"sample_id": 10811, "db_id": "student_club", "final": {"question": "Which event has the lowest cost?", "sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1", "source_tables": ["event", "budget", "expense"]}, "evidence": "event refers to event_name; lowest cost means MIN(cost)"}
{"sample_id": 10812, "db_id": "student_club", "final": {"question": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?", "sql": "SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T3.cost ELSE 0 END) AS REAL) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget", "source_tables": ["event", "budget", "expense"]}, "evidence": "percentage = DIVIDE(SUM(cost where event_name = 'Yearly Kickoff'), SUM(cost)) * 100"}
{"sample_id": 10813, "db_id": "student_club", "final": {"question": "What is the ratio between students majored in finance and physics?", "sql": "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major", "source_tables": ["major"]}, "evidence": "DIVDE(SUM(major_name = 'Finance'), SUM(major_name = 'Physics'))"}
{"sample_id": 10814, "db_id": "student_club", "final": {"question": "Indicate the top source of funds received in September 2019 based on their amount.", "sql": "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' and '2019-09-30' ORDER BY source DESC LIMIT 1", "source_tables": ["income"]}, "evidence": "top source funds refers to MAX(source); September 2019 means date_received BETWEEN '2019-09-01' and '2019-09-30'"}
{"sample_id": 10815, "db_id": "student_club", "final": {"question": "Provide the full name and email address of the Student_Club's Secretary.", "sql": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'", "source_tables": ["member"]}, "evidence": "full name refers to first_name, last_name; 'Secretary' is a position of Student Club"}
{"sample_id": 10816, "db_id": "student_club", "final": {"question": "How many members of the Student_Club have major in 'Physics Teaching'?", "sql": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Physics Teaching'", "source_tables": ["major", "member"]}, "evidence": "'Physics Teaching' is the major_name;"}
{"sample_id": 10817, "db_id": "student_club", "final": {"question": "How many members did attend the event 'Community Theater' in 2019?", "sql": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Community Theater' AND SUBSTR(T1.event_date, 1, 4) = '2019'", "source_tables": ["event", "attendance"]}, "evidence": "event 'Community Theater' in 2019 refers to event_name = 'Community Theater' where YEAR(event_date) = 2019"}
{"sample_id": 10818, "db_id": "student_club", "final": {"question": "Provide the number of events attended by Luisa Guidi. What is her major?", "sql": "SELECT COUNT(T3.link_to_event), T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi'", "source_tables": ["attendance", "major", "member"]}, "evidence": "major refers to major_name;"}
{"sample_id": 10819, "db_id": "student_club", "final": {"question": "On average, how much did the Student_Club spend on food for the typical event in the past?", "sql": "SELECT SUM(spent) / COUNT(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed'", "source_tables": ["budget"]}, "evidence": "DIVIDE(SUM(spent), COUNT(spent)) where category = 'Food'; 'event in the past' means event_status = 'Closed'"}
{"sample_id": 10820, "db_id": "student_club", "final": {"question": "Name the event with the highest amount spent on advertisement.", "sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1", "source_tables": ["event", "budget"]}, "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'"}
{"sample_id": 10821, "db_id": "student_club", "final": {"question": "Did Maya Mclean attend the 'Women's Soccer' event?", "sql": "SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'", "source_tables": ["attendance", "event", "member"]}, "evidence": "Maya Mclean is the full name; full name refers to first_name, last_name; 'Women's Soccer' is an event_name"}
{"sample_id": 10822, "db_id": "student_club", "final": {"question": "Among all events hold by the Student_Club in 2019, find the percentage share of events related to 'Community Service'", "sql": "SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(type) FROM event WHERE SUBSTR(event_date, 1, 4) = '2019'", "source_tables": ["event"]}, "evidence": "DIVIDE(SUM(type = 'Community Service'), COUNT(event_id)) * 100 where event_date BETWEEN' 2019-01-01' and '2019-12-31'"}
{"sample_id": 10823, "db_id": "student_club", "final": {"question": "Indicate the cost of posters for 'September Speaker' event.", "sql": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'", "source_tables": ["event", "budget", "expense"]}, "evidence": "'Posters' is the expense description; 'September Speaker' is an event name"}
{"sample_id": 10824, "db_id": "student_club", "final": {"question": "What is the most popular size of t-shirt ordered by the club members?", "sql": "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1", "source_tables": ["member"]}, "evidence": "most popular size of t-shirt ordered refers to MAX(COUNT(t_shirt_size))"}
{"sample_id": 10825, "db_id": "student_club", "final": {"question": "Indicate the name of the closed event whose cost has exceeded the budget the most.", "sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event WHERE T1.event_status = 'Closed' AND T1.remaining < 0 ORDER BY T1.remaining LIMIT 1", "source_tables": ["event", "budget"]}, "evidence": "closed events refers to event_name where status = 'Closed'; exceed the budget the most refers to MIN(remaining) where remaining < 0"}
{"sample_id": 10826, "db_id": "student_club", "final": {"question": "Identify the type of expenses and their total value approved for 'October Meeting' event.", "sql": "SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting'", "source_tables": ["event", "budget", "expense"]}, "evidence": "total value refers to SUM(cost); 'October Meeting' is an event name;"}
{"sample_id": 10827, "db_id": "student_club", "final": {"question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.", "sql": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC", "source_tables": ["event", "budget"]}, "evidence": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category"}
{"sample_id": 10892, "db_id": "debit_card_specializing", "final": {"question": "How many gas stations in CZE has Premium gas?", "sql": "SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'", "source_tables": ["gasstations"]}, "evidence": ""}
{"sample_id": 10893, "db_id": "debit_card_specializing", "final": {"question": "What is the ratio of customers who pay in EUR against customers who pay in CZK?", "sql": "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) AS ratio FROM customers", "source_tables": ["customers"]}, "evidence": "ratio of customers who pay in EUR against customers who pay in CZK = count(Currency = 'EUR') / count(Currency = 'CZK')."}
{"sample_id": 10894, "db_id": "debit_card_specializing", "final": {"question": "In 2012, who had the least consumption in LAM?", "sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year."}
{"sample_id": 10895, "db_id": "debit_card_specializing", "final": {"question": "What was the average monthly consumption of customers in SME for the year 2013?", "sql": "SELECT AVG(T2.Consumption) / 12 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME'", "source_tables": ["yearmonth", "customers"]}, "evidence": "Average Monthly consumption = AVG(Consumption) / 12; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year."}
{"sample_id": 10896, "db_id": "debit_card_specializing", "final": {"question": "Which customers, paying in CZK, consumed the most gas in 2011?", "sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Date BETWEEN 201101 AND 201112 GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": "Year 2011 can be presented as Between 201101 And 201112, which means between January and December in 2011"}
{"sample_id": 10897, "db_id": "debit_card_specializing", "final": {"question": "How many customers in KAM had a consumption of less than 30,000 for the year 2012?", "sql": "SELECT COUNT(*) FROM ( SELECT T2.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND SUBSTRING(T2.Date, 1, 4) = '2012' GROUP BY T2.CustomerID HAVING SUM(T2.Consumption) < 30000 ) AS t1", "source_tables": ["yearmonth", "customers"]}, "evidence": "Year 2012 can be presented as Between 201201 And 201212, which means between January and December in 2012"}
{"sample_id": 10898, "db_id": "debit_card_specializing", "final": {"question": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?", "sql": "SELECT SUM(IIF(T1.Currency = 'CZK', T2.Consumption, 0)) - SUM(IIF(T1.Currency = 'EUR', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2012'", "source_tables": ["yearmonth", "customers"]}, "evidence": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year; Difference in Consumption = CZK customers consumption in 2012 - EUR customers consumption in 2012"}
{"sample_id": 10899, "db_id": "debit_card_specializing", "final": {"question": "Which year recorded the most gas use paid in EUR?", "sql": "SELECT SUBSTRING(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY SUBSTRING(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": ""}
{"sample_id": 10900, "db_id": "debit_card_specializing", "final": {"question": "Which segment had the least consumption?", "sql": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) ASC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": ""}
{"sample_id": 10901, "db_id": "debit_card_specializing", "final": {"question": "Which year recorded the most consumption of gas paid in CZK?", "sql": "SELECT SUBSTR(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTR(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": "The first 4 strings of the Date values in the yearmonth table can represent year."}
{"sample_id": 10902, "db_id": "debit_card_specializing", "final": {"question": "What was the gas consumption peak month for SME customers in 2013?", "sql": "SELECT SUBSTR(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTR(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": "Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month."}
{"sample_id": 10903, "db_id": "debit_card_specializing", "final": {"question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?", "sql": "SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date BETWEEN 201301 AND 201312", "source_tables": ["yearmonth", "customers"]}, "evidence": "annual average consumption of customer with the lowest consumption in each segment = total consumption per year / the number of customer with lowest consumption in each segment; Difference in annual average = SME's annual average - LAM's annual average; Difference in annual average = LAM's annual average - KAM's annual average; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year."}
{"sample_id": 10904, "db_id": "debit_card_specializing", "final": {"question": "Which of the three segments\u2014SME, LAM and KAM\u2014has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?", "sql": "SELECT CAST((SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0)), CAST(SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) , CAST(SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID", "source_tables": ["yearmonth", "customers"]}, "evidence": "Increase or Decrease = consumption for 2013 - consumption for 2012; Percentage of Increase = (Increase or Decrease / consumption for 2013) * 100%; The first 4 strings of the Date values in the yearmonth table can represent year"}
{"sample_id": 10905, "db_id": "debit_card_specializing", "final": {"question": "How much did customer 6 consume in total between August and November 2013?", "sql": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'", "source_tables": ["yearmonth"]}, "evidence": "Between August And November 2013 refers to Between 201308 And 201311; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month."}
{"sample_id": 10906, "db_id": "debit_card_specializing", "final": {"question": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?", "sql": "SELECT SUM(IIF(Country = 'CZE', 1, 0)) - SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations WHERE Segment = 'Discount'", "source_tables": ["gasstations"]}, "evidence": "Czech Republic can be represented as the Country value in gasstations table is 'CZE'; Slovakia can be represented as the Country value in the gasstations table is 'SVK';  Computation of more \"discount\" gas stations= Total no. of discount gas stations in Czech Republic - Total no. of discount gas stations in Slovakia"}
{"sample_id": 10907, "db_id": "debit_card_specializing", "final": {"question": "How much more was customer 7 consuming in April 2013 than customer 5?", "sql": "SELECT SUM(IIF(CustomerID = 7, Consumption, 0)) - SUM(IIF(CustomerID = 5, Consumption, 0)) FROM yearmonth WHERE Date = '201304'", "source_tables": ["yearmonth"]}, "evidence": "April 2013 refers to 201304 in the yearmonth.date"}
{"sample_id": 10908, "db_id": "debit_card_specializing", "final": {"question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?", "sql": "SELECT SUM(Currency = 'CZK') - SUM(Currency = 'EUR') FROM customers WHERE Segment = 'SME'", "source_tables": ["customers"]}, "evidence": "Amount of more SMEs = Total of SMEs pay using Currency CZK - Total of SMEs pay using Currency EUR"}
{"sample_id": 10909, "db_id": "debit_card_specializing", "final": {"question": "Which LAM customer used the Euro as their currency and had the highest consumption in October 2013?", "sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date = '201310' AND T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": "October 2013 refers to 201310 in the yearmonth.date"}
{"sample_id": 10910, "db_id": "debit_card_specializing", "final": {"question": "Who among KAM's customers consumed the most? How much did it consume?", "sql": "SELECT T2.CustomerID, SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T2.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": ""}
{"sample_id": 10911, "db_id": "debit_card_specializing", "final": {"question": "How much did the KAM customers consume in total in May 2013?", "sql": "SELECT SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201305' AND T1.Segment = 'KAM'", "source_tables": ["yearmonth", "customers"]}, "evidence": "May 2013 refers to yearmonth.date = 201305"}
{"sample_id": 10912, "db_id": "debit_card_specializing", "final": {"question": "How many percent of LAM customer consumed more than 46.73?", "sql": "SELECT CAST(SUM(IIF(T2.Consumption > 46.73, 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'", "source_tables": ["yearmonth", "customers"]}, "evidence": "Percentage of LAM customer consumed more than 46.73 = (Total no. of LAM customers who consumed more than 46.73 / Total no. of LAM customers) * 100."}
{"sample_id": 10913, "db_id": "debit_card_specializing", "final": {"question": "Which country has more \"value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country.", "sql": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1", "source_tables": ["gasstations"]}, "evidence": ""}
{"sample_id": 10914, "db_id": "debit_card_specializing", "final": {"question": "What percentage of KAM customers pay in euros?", "sql": "SELECT CAST(SUM(Currency = 'EUR') AS FLOAT) * 100 / COUNT(CustomerID) FROM customers WHERE Segment = 'KAM'", "source_tables": ["customers"]}, "evidence": "Percentage of KAM uses Euro = (Total of KAM uses Euro / Total of KAM) * 100%."}
{"sample_id": 10915, "db_id": "debit_card_specializing", "final": {"question": "In February 2012, what percentage of customers consumed more than 528.3?", "sql": "SELECT CAST(SUM(IIF(Consumption > 528.3, 1, 0)) AS FLOAT) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'", "source_tables": ["yearmonth"]}, "evidence": "February 2012 refers to '201202' in yearmonth.date; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month."}
{"sample_id": 10916, "db_id": "debit_card_specializing", "final": {"question": "What percentage of Slovakian gas stations are premium?", "sql": "SELECT CAST(SUM(IIF(Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / COUNT(GasStationID) FROM gasstations WHERE Country = 'SVK'", "source_tables": ["gasstations"]}, "evidence": "Percentage of premium gas station = (Total of premium gas station in Slovakia / Total of gas station in Slovakia) * 100%."}
{"sample_id": 10917, "db_id": "debit_card_specializing", "final": {"question": "Which client ID consumed the most in September 2013?", "sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": "September 2013 refers to yearmonth.date = '201309'"}
{"sample_id": 10918, "db_id": "debit_card_specializing", "final": {"question": "Which client segment consumed the least in September 2013?", "sql": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": "September 2013 refers to yearmonth.date = '201309'"}
{"sample_id": 10919, "db_id": "debit_card_specializing", "final": {"question": "Which SME customer consumed the least in June 2012?", "sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201206' AND T1.Segment = 'SME' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": "June 2012 refers to yearmonth.date = '201206'"}
{"sample_id": 10920, "db_id": "debit_card_specializing", "final": {"question": "What is the highest monthly consumption in the year 2012?", "sql": "SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1", "source_tables": ["yearmonth"]}, "evidence": "The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month."}
{"sample_id": 10921, "db_id": "debit_card_specializing", "final": {"question": "What is the biggest monthly consumption of the customers who use euro as their currency?", "sql": "SELECT SUM(T2.Consumption) / 12 AS MonthlyConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY MonthlyConsumption DESC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": "Monthly consumption = SUM(consumption) / 12"}
{"sample_id": 10922, "db_id": "debit_card_specializing", "final": {"question": "Please list the product description of the products consumed in September, 2013.", "sql": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Date = '201309'", "source_tables": ["yearmonth", "products", "transactions_1k"]}, "evidence": "September 2013 refers to 201309; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month."}
{"sample_id": 10923, "db_id": "debit_card_specializing", "final": {"question": "Please list the countries of the gas stations with transactions taken place in June, 2013.", "sql": "SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'", "source_tables": ["gasstations", "yearmonth", "transactions_1k"]}, "evidence": "June 2013 refers to '201306'; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month;"}
{"sample_id": 10924, "db_id": "debit_card_specializing", "final": {"question": "Please list the chains of the gas stations with transactions in euro.", "sql": "SELECT DISTINCT T3.ChainID FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T2.Currency = 'EUR'", "source_tables": ["customers", "gasstations", "transactions_1k"]}, "evidence": ""}
{"sample_id": 10925, "db_id": "debit_card_specializing", "final": {"question": "Please list the product description of the products bought in transactions in euro.", "sql": "SELECT DISTINCT T1.ProductID, T3.Description FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Currency = 'EUR'", "source_tables": ["customers", "products", "transactions_1k"]}, "evidence": ""}
{"sample_id": 10926, "db_id": "debit_card_specializing", "final": {"question": "What is the average total price of the transactions taken place in January, 2012?", "sql": "SELECT AVG(Amount) FROM transactions_1k WHERE Date LIKE '2012-01%'", "source_tables": ["transactions_1k"]}, "evidence": "In January, 2012 means Date contains '2012-01'"}
{"sample_id": 10927, "db_id": "debit_card_specializing", "final": {"question": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?", "sql": "SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000.00", "source_tables": ["yearmonth", "customers"]}, "evidence": "Pays in euro = Currency = 'EUR'."}
{"sample_id": 10928, "db_id": "debit_card_specializing", "final": {"question": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.", "sql": "SELECT DISTINCT T3.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE'", "source_tables": ["gasstations", "products", "transactions_1k"]}, "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'; "}
{"sample_id": 10929, "db_id": "debit_card_specializing", "final": {"question": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.", "sql": "SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11", "source_tables": ["gasstations", "transactions_1k"]}, "evidence": ""}
