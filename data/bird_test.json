{"sample_id": 138, "db_id": "movie_platform", "final": {"question": "Name all the list titles created by user 4208563.", "sql": "SELECT list_title FROM lists WHERE user_id LIKE 4208563", "source_tables": ["lists"]}, "evidence": "user 4208563 refers to user_id = 4208563"}
{"sample_id": 152, "db_id": "movie_platform", "final": {"question": "How many movies directed by Felipe Cazals was realeased on 1976?", "sql": "SELECT COUNT(movie_id) FROM movies WHERE movie_release_year = 1976 AND director_name LIKE 'Felipe Cazals'", "source_tables": ["movies"]}, "evidence": "directed by Felipe Cazals refers to director_name = 'Felipe Cazals' ; realeased on 1976 refers to movie_release_year = 1976"}
{"sample_id": 63, "db_id": "movie_platform", "final": {"question": "When did the creator of the list \"250 Favourite Films\" last updated a movie list?", "sql": "SELECT T2.list_update_date_utc FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.list_title = '250 Favourite Films' ORDER BY T2.list_update_date_utc DESC LIMIT 1", "source_tables": ["lists", "lists_users"]}, "evidence": "250 Favourite Films refers to list_title; last update refers to list_update_date_utc;"}
{"sample_id": 54, "db_id": "movie_platform", "final": {"question": "How many movie lists were created by user 83373278 when he or she was a subscriber?", "sql": "SELECT COUNT(*) FROM lists_users WHERE user_id = 83373278 AND user_subscriber = 1", "source_tables": ["lists_users"]}, "evidence": "the user was a subscriber when he created the list refers to user_subscriber = 1; user 83373278 refers to user_id = 83373278;"}
{"sample_id": 107, "db_id": "movie_platform", "final": {"question": "Which film rated by user 59988436 that received 21 comments?", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 59988436 AND T1.critic_comments = 21", "source_tables": ["movies", "ratings"]}, "evidence": "user 59988436 refers to user_id = 59988436; received 21 comments refers to critic_comments = 21; film refers to movie;"}
{"sample_id": 50, "db_id": "movie_platform", "final": {"question": "How many movie lists were still updated 10 years after it was created?", "sql": "SELECT COUNT(*) FROM lists WHERE SUBSTR(list_update_timestamp_utc, 1, 4) - SUBSTR(list_creation_timestamp_utc, 1, 4) > 10", "source_tables": ["lists"]}, "evidence": "updated 10 years after it was created refers to list_update_timestamp_utc > (list_creation_timestamp_utc+10);"}
{"sample_id": 164, "db_id": "movie_platform", "final": {"question": "Who is the director of the most popular movie of all time and when was it released? Indicate the average rating score of the users who were on a trialist when they rated the movie.", "sql": "SELECT T1.director_name, T1.movie_release_year , SUM(T2.rating_score) / COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_trialist = 1 ORDER BY T1.movie_popularity DESC LIMIT 1", "source_tables": ["movies", "ratings"]}, "evidence": "most popular movie of all time refers to MAX(movie_popularity); a trialist refers to user_trialist = 1; average rating score = AVG(rating_score)"}
{"sample_id": 58, "db_id": "movie_platform", "final": {"question": "How many movies registered on Mubi are directed by Hong Sang-soo?", "sql": "SELECT COUNT(movie_id) FROM movies WHERE director_name = 'Hong Sang-soo'", "source_tables": ["movies"]}, "evidence": "Hong Sang-soo is the name of director;"}
{"sample_id": 48, "db_id": "movie_platform", "final": {"question": "What are the names of the movie that was rated by the user between 1/1/2013 to 12/31/2013 by the user who created the list \"100 Greatest Living American Filmmakers\"? Calculate for the average rating score of those movies in 2013.", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists AS T3 ON T3.user_id = T1.user_id WHERE T1.rating_timestamp_utc BETWEEN '2013-01-01' AND '2013-12-31' AND T3.list_title = '100 Greatest Living American Filmmakers'", "source_tables": ["movies", "ratings", "lists"]}, "evidence": "Between 1/1/2013 to 12/31/2013 refer to rating_timestamp_utc; 100 Greatest Living American Filmmakers refer to list_title; average rating score refer to DIVIDE( ADD(rating_score where rating_timestamp_utc = '1/1/2013-12/31/2013'), COUNT(rating_timestamp_utc = '1/1/2013-12/31/2013'))"}
{"sample_id": 88, "db_id": "movie_platform", "final": {"question": "Which of the films directed by \u00c1lex de la Iclesia is the most popular among Mubi users?", "sql": "SELECT movie_title FROM movies WHERE director_name = '\u00c5ke Sandgren' ORDER BY movie_popularity DESC LIMIT 1", "source_tables": ["movies"]}, "evidence": "Alex de la Iclesia is the director name; the most popular refers to Max(movie_popularity); films refers to movies;"}
{"sample_id": 21, "db_id": "movie_platform", "final": {"question": "When was the first movie released and who directed it?", "sql": "SELECT movie_release_year, director_name FROM movies WHERE movie_release_year IS NOT NULL ORDER BY movie_release_year ASC LIMIT 1", "source_tables": ["movies"]}, "evidence": "first movie refers to oldest movie_release_year;"}
{"sample_id": 57, "db_id": "movie_platform", "final": {"question": "Which movie is more popular, \"The General\" or \"Il grido\"?", "sql": "SELECT movie_title FROM movies WHERE movie_title = 'The General' OR movie_title = 'Il grido' ORDER BY movie_popularity DESC LIMIT 1", "source_tables": ["movies"]}, "evidence": "The General and Il grido are movie_title; more popular movie refers to higher (movie_popularity);"}
{"sample_id": 161, "db_id": "movie_platform", "final": {"question": "What is the average number of followers of the lists created by the user who rated the movie \"Pavee Lackeen: The Traveller Girl\" on 3/27/2011 at 2:06:34 AM?", "sql": "SELECT CAST(SUM(T4.list_followers) AS REAL) / COUNT(T2.list_id) FROM ratings AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id INNER JOIN movies AS T3 ON T1.movie_id = T3.movie_id INNER JOIN lists AS T4 ON T2.list_id = T4.list_id WHERE T3.movie_title LIKE 'Pavee Lackeen: The Traveller Girl' AND T1.rating_timestamp_utc LIKE '2011-03-27 02:06:34'", "source_tables": ["movies", "lists_users", "ratings", "lists"]}, "evidence": "average number of followers refers to AVG(list_followers); movie \"Pavee Lackeen: The Traveller Girl\" refers to movie_title = 'Pavee Lackeen: The Traveller Girl'; on 3/27/2011 at 2:06:34 AM refers to rating_timestamp_utc = '2011-03-27 02:06:34'"}
{"sample_id": 129, "db_id": "movie_platform", "final": {"question": "For the 1998 movie which got the highest popularity, how many \"4\" rating did the movie get?", "sql": "SELECT COUNT(T2.movie_title) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 4 AND T2.movie_release_year = 1998 ORDER BY T2.movie_popularity DESC LIMIT 1", "source_tables": ["movies", "ratings"]}, "evidence": "1998 movie refers to movie_release_year = '1998'; the highest popularity refers to MAX(movie_popularity) ; \"4\" rating refers to rating_score = 4"}
{"sample_id": 37, "db_id": "movie_platform", "final": {"question": "How many users rated the movie \"The Magnificent Ambersons\" gave a rating score of no more than 2? List all the URL to the rating on Mubi.", "sql": "SELECT COUNT(T2.user_id), T2.rating_url FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'The Magnificent Ambersons' AND T2.rating_score <= 2", "source_tables": ["movies", "ratings"]}, "evidence": "The Magnificent Ambersons refers to movie_title; rating score of no more than 2 refers to rating_score<2; URL to rating refers to rating_url"}
{"sample_id": 157, "db_id": "movie_platform", "final": {"question": "Who is the director that directed the highest number of movies in the 70s? If there are multiple directors with the same amount of movies, list all of their names and indicate the highest rating score that those movies got from the users.", "sql": "SELECT T2.director_name, T1.rating_score FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year BETWEEN 1970 AND 1979 GROUP BY T2.director_id ORDER BY COUNT(T2.movie_id) DESC LIMIT 1", "source_tables": ["movies", "ratings"]}, "evidence": "highest number of movies COUNT(T1.movie_id); in the 70s refers to movie_release_year between 1970 and 1979"}
{"sample_id": 1, "db_id": "movie_platform", "final": {"question": "State the most popular movie? When was it released and who is the director for the movie?", "sql": "SELECT movie_title, movie_release_year, director_name FROM movies ORDER BY movie_popularity DESC LIMIT 1", "source_tables": ["movies"]}, "evidence": "most popular movie refers to MAX(movie_popularity); when it was released refers to movie_release_year; director for the movie refers to director_name;"}
{"sample_id": 52, "db_id": "movie_platform", "final": {"question": "Where can I find the movie list \"Short and pretty damn sweet\"?", "sql": "SELECT list_url FROM lists WHERE list_title = 'Short and pretty damn sweet'", "source_tables": ["lists"]}, "evidence": "Short and pretty damn sweet is list_title; location of the movie refers to list_url;"}
{"sample_id": 149, "db_id": "movie_platform", "final": {"question": "Among all movies in the list, calculate the percentage of movies that were never been rated?", "sql": "SELECT CAST(SUM(CASE WHEN T2.movie_id IS NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.movie_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id", "source_tables": ["movies", "ratings"]}, "evidence": "percentage of movies that were never been rated refers to DIVIDE(COUNT(main_movies.movie_id ! = main_ratings.movie_id),COUNT(movie_id))"}
{"sample_id": 130, "db_id": "movie_platform", "final": {"question": "From all the movies that got more than 13000 popularity number, which one had the least ratings.", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_popularity > 13000 ORDER BY T1.rating_score LIMIT 1", "source_tables": ["movies", "ratings"]}, "evidence": "more than 13000 popularity number refers to movie_popularity > 13000; least ratings refers to MIN(rating_score)"}
{"sample_id": 151, "db_id": "movie_platform", "final": {"question": "Between 1970 to 1980, how many movies with a popularity of more than 11,000 were released?", "sql": "SELECT COUNT(movie_id) FROM movies WHERE movie_release_year BETWEEN '1970' AND '1980' AND movie_popularity > 11000", "source_tables": ["movies"]}, "evidence": "Between 1970 to 1980 refers to movie_release_year between 1970 and 1980; popularity of more than 11,000 refers movie_popularity >11000"}
{"sample_id": 103, "db_id": "movie_platform", "final": {"question": "Please list the names of the top three movies in the number comments related to the critic made by the user rating the movie.", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.critic_comments DESC LIMIT 3", "source_tables": ["movies", "ratings"]}, "evidence": "number of comments related to the critic made by the user rating the movie refers to critic_comments; top movie refers to Max(critic_comments);"}
{"sample_id": 99, "db_id": "movie_platform", "final": {"question": "Please list the names of the movies that user 94978 scored as 5.", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5 AND T1.user_id = 94978", "source_tables": ["movies", "ratings"]}, "evidence": "user 94978 refers to user_id = 94978; scored as 5 refers to rating_score = 5;"}
{"sample_id": 116, "db_id": "movie_platform", "final": {"question": "Who was the earliest user created a list but didn't get any followers? Give the user ID.", "sql": "SELECT user_id FROM lists_users WHERE user_subscriber = 0 ORDER BY list_creation_date_utc LIMIT 1", "source_tables": ["lists_users"]}, "evidence": "earliest user created a list refers to MIN(list_creation_date_utc); didn't get any followers refers to user_subscriber = 0"}
{"sample_id": 87, "db_id": "movie_platform", "final": {"question": "How many films did \u00c5ke Sandgren direct?", "sql": "SELECT COUNT(movie_title) FROM movies WHERE director_name = '\u00c5ke Sandgren'", "source_tables": ["movies"]}, "evidence": "Ake Sandgren is the director name;\u00a0 film refers to movie"}
{"sample_id": 74, "db_id": "movie_platform", "final": {"question": "Please list all the links to the ratings on the movie \"A Way of Life\" with a critic.", "sql": "SELECT T1.rating_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.critic IS NOT NULL", "source_tables": ["movies", "ratings"]}, "evidence": "A Way of Life' refers to movie_title; with a critic refers to critic is not null, links to the ratings refers to rating_url;"}
{"sample_id": 121, "db_id": "movie_platform", "final": {"question": "Which movie got the most critic comments? Give the name of the movie.", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id GROUP BY T2.movie_title ORDER BY COUNT(T1.critic_comments) DESC LIMIT 1", "source_tables": ["movies", "ratings"]}, "evidence": "name of the movie refers to movie_title; most critic comments refers to MAX(critic_comments)"}
{"sample_id": 166, "db_id": "movie_platform", "final": {"question": "What are the top 10 oldest movies and what are the average rating score for each movie? Indicate the name of the director and when the movies were released.", "sql": "SELECT T2.movie_id, AVG(T1.rating_score), T2.director_name, T2.movie_release_year FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.rating_timestamp_utc ASC LIMIT 10", "source_tables": ["movies", "ratings"]}, "evidence": "the average rating score refers to AVG(T2.rating_score); oldest movies refers to MIN(rating_timestamp_utc)"}
{"sample_id": 20, "db_id": "movie_platform", "final": {"question": "What are the movie popularity of the movies released in 2021 that were directed by Steven Spielberg? List the names of the movies and their corresponding popularity.", "sql": "SELECT movie_title, movie_popularity FROM movies WHERE movie_release_year = 2021 AND director_name = 'Steven Spielberg'", "source_tables": ["movies"]}, "evidence": "movie released in 2021 refers to movie_release_year = 2021; popularity refers to movie_popularity;"}
{"sample_id": 71, "db_id": "movie_platform", "final": {"question": "What's the url of user 39115684's rating on the movie 'When Will I Be Loved'?", "sql": "SELECT T1.rating_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.user_id = 39115684", "source_tables": ["movies", "ratings"]}, "evidence": "A Way of Life refers to movie_title; user 39115684 refers to userid = 39115684;\u00a0 url refers to rating_url;"}
{"sample_id": 106, "db_id": "movie_platform", "final": {"question": "What is the average score for the movie Versailles Rive-Gauche?", "sql": "SELECT AVG(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title LIKE 'Versailles Rive-Gauche'", "source_tables": ["movies", "ratings"]}, "evidence": "Versailles Rive-Gauche' is movie_title; average score refers to Avg(rating_score);"}
{"sample_id": 14, "db_id": "movie_platform", "final": {"question": "What is the percentage of rated movies were released in year 2021?", "sql": "SELECT CAST(SUM(CASE WHEN T1.movie_release_year = 2021 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id", "source_tables": ["movies", "ratings"]}, "evidence": "percentage = DIVIDE(SUM(movie_release_year = 2021), COUNT(rating_id)) as percent; movies released in year 2021 refers to movie_release_year = 2021;"}
{"sample_id": 92, "db_id": "movie_platform", "final": {"question": "Please provide the title of the list with the most comments on the list.", "sql": "SELECT list_title FROM lists GROUP BY list_title ORDER BY COUNT(list_comments) DESC LIMIT 1", "source_tables": ["lists"]}, "evidence": "the most comments refers to Max(list_comments);"}
{"sample_id": 102, "db_id": "movie_platform", "final": {"question": "Which movie has the highest average score in Mubi?", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id GROUP BY T2.movie_title ORDER BY SUM(T1.rating_score) / COUNT(T1.rating_id) DESC LIMIT 1", "source_tables": ["movies", "ratings"]}, "evidence": "Highest average score refers to Max(Avg(rating_score));"}
{"sample_id": 205, "db_id": "book_publishing_company", "final": {"question": "Among the stores that have ordered the book \"Life Without Fear\", how many of them are located in Massachusetts?", "sql": "SELECT COUNT(T1.stor_id) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id INNER JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T2.state = 'Massachusetts'", "source_tables": ["titles", "sales", "stores"]}, "evidence": "Massachusetts is a state"}
{"sample_id": 169, "db_id": "book_publishing_company", "final": {"question": "List the title, price and publication date for all sales with 'ON invoice' payment terms.", "sql": "SELECT T2.title, T2.price, T2.pubdate FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id WHERE T1.payterms = 'ON invoice'", "source_tables": ["titles", "sales"]}, "evidence": "publication date refers to pubdate; payment terms refers to payterms; payterms = 'ON invoice'"}
{"sample_id": 207, "db_id": "book_publishing_company", "final": {"question": "What is the publisher that has published the most expensive book?", "sql": "SELECT T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id ORDER BY T1.price DESC LIMIT 1", "source_tables": ["publishers", "titles"]}, "evidence": "most expensive book refers to MAX(price)"}
{"sample_id": 179, "db_id": "book_publishing_company", "final": {"question": "Name the store with ID 7066 and calculate the percentage of the the quantity ordered that were on 'Net 30' payment terms.", "sql": "SELECT T2.stor_name , CAST(SUM(CASE WHEN payterms = 'Net 30' THEN qty ELSE 0 END) AS REAL) * 100 / SUM(qty) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id WHERE T1.stor_id = '7066' GROUP BY T2.stor_name", "source_tables": ["sales", "stores"]}, "evidence": "store with ID 7066 refers to stor_ID = '7066'; 'Net 60' payment terms refers to payterm = 'Net 60'; qty is abbreviation for quantity; percentage = DIVIDE(payterms = 'Net 60', sum(qty))*100"}
{"sample_id": 218, "db_id": "book_publishing_company", "final": {"question": "Is the author of \"Sushi, Anyone?\" on the contract?", "sql": "SELECT T1.contract FROM authors AS T1 INNER JOIN titleauthor AS T2 ON T1.au_id = T2.au_id INNER JOIN titles AS T3 ON T2.title_id = T3.title_id WHERE T3.title = 'Sushi, Anyone?'", "source_tables": ["titles", "titleauthor", "authors"]}, "evidence": "contract = 1 means on contract; contract = 0 means not on contract"}
{"sample_id": 223, "db_id": "book_publishing_company", "final": {"question": "List the type of the book for the order which was sold on 1993/5/29.", "sql": "SELECT DISTINCT T1.type FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE STRFTIME('%Y-%m-%d', T2.ord_date) = '1993-05-29'", "source_tables": ["titles", "sales"]}, "evidence": "sold on refers to ord_date"}
{"sample_id": 233, "db_id": "book_publishing_company", "final": {"question": "List the title name, type, and price of the titles published by New Moon Books. Arrange the list in ascending order of price.", "sql": "SELECT T1.title, T1.type, T1.price FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.pub_name = 'New Moon Books' ORDER BY T1.price", "source_tables": ["publishers", "titles"]}, "evidence": "Eric the Read Books is a publisher which refers to pub_name;"}
{"sample_id": 193, "db_id": "book_publishing_company", "final": {"question": "List all the titles and year to date sales by author who are not on contract.", "sql": "SELECT T1.title_id, T1.ytd_sales FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T3.contract = 0", "source_tables": ["titles", "authors", "titleauthor"]}, "evidence": "year to date sales refers to ytd_sales; not on contract refers to contract = 0"}
{"sample_id": 167, "db_id": "book_publishing_company", "final": {"question": "Which date has the most ordered quantity? What is the total order quantity on that day?", "sql": "SELECT ord_date, SUM(qty) FROM sales GROUP BY ord_date ORDER BY SUM(qty) DESC LIMIT 1", "source_tables": ["sales"]}, "evidence": "total quantity refers to qty; most ordered quantity refers to order with the highest quantity where MAX(sum(qty))"}
{"sample_id": 234, "db_id": "book_publishing_company", "final": {"question": "In the books published by US publishers, which book has the highest royalty? List these books in the descending order of royalty.", "sql": "SELECT T1.title FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id INNER JOIN roysched AS T3 ON T1.title_id = T3.title_id WHERE T2.country = 'USA' ORDER BY T1.royalty DESC", "source_tables": ["publishers", "titles", "roysched"]}, "evidence": "US publisher refers publisher in the US where country = 'USA';"}
{"sample_id": 228, "db_id": "book_publishing_company", "final": {"question": "For the quantities, what percent more did the store in Fremont sell than the store in Portland in 1993?", "sql": "SELECT CAST(SUM(CASE WHEN T2.city = 'Fremont' THEN qty END) - SUM(CASE WHEN T2.city = 'Portland' THEN qty END) AS REAL) * 100 / SUM(CASE WHEN T2.city = 'Fremont' THEN qty END) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id WHERE STRFTIME('%Y', T1.ord_date) = '1993'", "source_tables": ["sales", "stores"]}, "evidence": "qty is abbreviation for quantity; Fremont and Portland are name of city; sell in 1993 refers to YEAR(ord_date) = 1993; percentage = DIVIDE(\nSUBTRACT(SUM(qty where city = \u2018Fremont\u2019 and year(ord_date = 1993)), \nSUM(qty where city = \u2018Portland\u2019 and year(ord_date = 1993))), SUM(qty where city = \u2018Fremont\u2019 and year(ord_date = 1993)) *100"}
{"sample_id": 196, "db_id": "book_publishing_company", "final": {"question": "Calculate the percentage of the employees who are Editor or Designer?", "sql": "SELECT CAST(SUM(CASE WHEN T2.job_desc IN ('Editor', 'Designer') THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.job_id) FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id", "source_tables": ["employee", "jobs"]}, "evidence": "Editor or Auditor are job description which refers to job_desc; percentage = DIVIDE(count(job_desc = 'Editor' or job_desc = 'Auditor'), count(emp_id))*100"}
{"sample_id": 210, "db_id": "book_publishing_company", "final": {"question": "How many books on business have the bookstores in Massachusetts ordered?", "sql": "SELECT SUM(T1.qty) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id INNER JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T2.state = 'Massachusetts' AND T3.type = 'business'", "source_tables": ["titles", "sales", "stores"]}, "evidence": "Massachusetts is a state; business books refers to type = 'business'"}
{"sample_id": 238, "db_id": "book_publishing_company", "final": {"question": "Of the titles, which title is about the Carefully researched study of the effects of strong emotions on the body, which state-based publisher published this book, and what is the year-to-date sale?", "sql": "SELECT T1.title, T2.pub_name, T1.ytd_sales FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.notes = 'Carefully researched study of the effects of strong emotions on the body. Metabolic charts included.'", "source_tables": ["publishers", "titles"]}, "evidence": "year to date sales refers to ytd_sales; about the title refers to notes"}
{"sample_id": 194, "db_id": "book_publishing_company", "final": {"question": "For all authors from CA who are not on contract, which title of his/hers has the most year to date sales.", "sql": "SELECT T1.title FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T3.contract = 0 AND T3.state = 'CA' ORDER BY T1.ytd_sales DESC LIMIT 1", "source_tables": ["titles", "authors", "titleauthor"]}, "evidence": "year to date sales refers to ytd_sales; on contract refers to contract = 1"}
{"sample_id": 172, "db_id": "book_publishing_company", "final": {"question": "Among the titles with royalty percentage, which title has the greatest royalty percentage. State it's minimum range to enjoy this royalty percentage.", "sql": "SELECT T1.title, T2.lorange FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id ORDER BY T2.royalty DESC LIMIT 1", "source_tables": ["titles", "roysched"]}, "evidence": "minimum range is synonym for low range which refers to lorange"}
{"sample_id": 399, "db_id": "retail_complains", "final": {"question": "In reviews for the Eagle National Bank product, how many of the 5 star reviews where from Nashville, Tennessee?", "sql": "SELECT COUNT(T2.Stars) FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T1.city = 'Nashville' AND T1.state_abbrev = 'TN' AND T2.Product = 'Eagle National Mortgage' AND T2.Stars = 5", "source_tables": ["reviews", "district"]}, "evidence": "5 star refers to Stars = 5; Nashville refers to city = 'Nashville'; Tennessee refers to state_abbrev = 'TN'"}
{"sample_id": 388, "db_id": "retail_complains", "final": {"question": "In 2012, how many complaints about Credit card product came from clients in Omaha?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'Omaha' AND strftime('%Y', T2.\"Date received\") = '2012' AND T2.Product = 'Credit card'", "source_tables": ["client", "events"]}, "evidence": "in 2012 refers to Date received LIKE'2012%'; in Omaha refers to city = 'Omaha'"}
{"sample_id": 314, "db_id": "retail_complains", "final": {"question": "What percentage of clients who sent their complaints by postal mail are age 50 and older?", "sql": "SELECT CAST(SUM(CASE WHEN T1.age > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.\"Submitted via\") FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Submitted via\" = 'Postal mail'", "source_tables": ["client", "events"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(\"Submitted via\" = 'Postal mail'), COUNT(client_id)), 1.0); sent their complaints by refers to \"Submitted via\"; age > 50;"}
{"sample_id": 355, "db_id": "retail_complains", "final": {"question": "What is the product complained by Alexander Bronx Lewis?", "sql": "SELECT DISTINCT T2.Product FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Alexander' AND T1.middle = 'Bronx' AND T1.last = 'Lewis'", "source_tables": ["client", "events"]}, "evidence": ""}
{"sample_id": 359, "db_id": "retail_complains", "final": {"question": "List down the issues for complaint with server time of below 10 minutes.", "sql": "SELECT T2.Issue FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE strftime('%M', T1.ser_time) < '10'", "source_tables": ["callcenterlogs", "events"]}, "evidence": "server time of below 10 minutes refers to ser_time < '00:10:00'"}
{"sample_id": 293, "db_id": "retail_complains", "final": {"question": "List priority 2 complaints by date received.", "sql": "SELECT DISTINCT \"Complaint ID\" FROM callcenterlogs WHERE priority = 2 ORDER BY \"Date received\" DESC", "source_tables": ["callcenterlogs"]}, "evidence": ""}
{"sample_id": 370, "db_id": "retail_complains", "final": {"question": "List the top five cities in terms of the number of 5-star ratings in 2016 reviews, in descending order.", "sql": "SELECT T2.city FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Stars = 5 AND T1.Date LIKE '2016%' ORDER BY T1.Date DESC LIMIT 5", "source_tables": ["reviews", "district"]}, "evidence": "5-star rating refers to Stars = 5; in 2016 refers to Date like '2016%'; most reviews refers to max(count(city))"}
{"sample_id": 385, "db_id": "retail_complains", "final": {"question": "Which state has the most cities?", "sql": "SELECT state_abbrev FROM district GROUP BY state_abbrev ORDER BY COUNT(city) DESC LIMIT 1", "source_tables": ["district"]}, "evidence": "state refers to state_abbrev; most cities refers to max(count(city))"}
{"sample_id": 394, "db_id": "retail_complains", "final": {"question": "Give the client ID of the complaint received on April 16, 2014 and submitted through fax.", "sql": "SELECT T2.Client_ID FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE T2.\"Submitted via\" = 'Fax' AND T1.\"Date received\" = '2014-04-16'", "source_tables": ["callcenterlogs", "events"]}, "evidence": "April 16, 2014 refers to Date received = '2014-04-16'; submitted through fax refers to Submitted via = 'Fax'"}
{"sample_id": 248, "db_id": "retail_complains", "final": {"question": "What is the full name of the client whose complaint on 2017/3/27 was received by MICHAL?", "sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T2.\"Date received\" = '2017-03-27' AND T2.server = 'MICHAL'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "full names = first, middle, last; on 2017/3/27 refers to \"Date received\" = '2017-03-27'; MICHAL refers to server = 'MICHAL';"}
{"sample_id": 276, "db_id": "retail_complains", "final": {"question": "What is the email id of clients whose calls were hung?", "sql": "SELECT T1.email FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T2.outcome = 'HANG'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "email id refers to email; calls were hung refers to outcome = 'Hang';"}
{"sample_id": 379, "db_id": "retail_complains", "final": {"question": "What is the percentage of female clients in the Middle Atlantic?", "sql": "SELECT CAST(SUM(CASE WHEN T1.sex = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.sex) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'South Atlantic'", "source_tables": ["client", "district"]}, "evidence": "female refers to sex = 'Female'; the Middle Atlantic refers to division = 'Middle Atlantic'; percentage = divide(count(client_id where sex = 'Female' and division = 'Middle Atlantic') , count(client_id where division = 'Middle Atlantic')) * 100%"}
{"sample_id": 287, "db_id": "retail_complains", "final": {"question": "Among the calls from California, what percentage are priority 1?", "sql": "SELECT CAST(SUM(CASE WHEN T1.priority = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.priority) FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.\"rand client\" = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id INNER JOIN state AS T4 ON T3.state_abbrev = T4.StateCode WHERE T4.State = 'California'", "source_tables": ["client", "callcenterlogs", "state", "district"]}, "evidence": "California refers to state = 'California'; percentage = MULTIPLY(DIVIDE(SUM(priority = 1), COUNT(\"Complaint ID\"), 1.0));"}
{"sample_id": 398, "db_id": "retail_complains", "final": {"question": "List the product reviewed with 1 star on March 14, 2016 from Newton, Massachusetts.", "sql": "SELECT T2.Product FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T1.city = 'Newton' AND T1.state_abbrev = 'MA' AND T2.Date = '2016-03-14' AND T2.Stars = 1", "source_tables": ["reviews", "district"]}, "evidence": "1 star refers to Stars = 1; on March 14, 2016 refers to Date = '2016-03-14'; Newton refers to city = 'Newton'; Massachusetts refers to state_abbrev = 'MA'"}
{"sample_id": 241, "db_id": "retail_complains", "final": {"question": "When did the earliest complaint start on 2017/3/22?", "sql": "SELECT MIN(ser_time) FROM callcenterlogs WHERE \"Date received\" = '2017-03-22'", "source_tables": ["callcenterlogs"]}, "evidence": "earliest complaint refers to oldest ser_start; on 2017/3/22 refers to \"Date received\" = '2017-03-22';"}
{"sample_id": 352, "db_id": "retail_complains", "final": {"question": "State the full name of clients with server time of 20 minutes and above.", "sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE strftime('%M', T2.ser_time) > '20'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "full name refers to first, middle, last; server time of 20 minutes and above refers to ser_time > '00:20:00'"}
{"sample_id": 299, "db_id": "retail_complains", "final": {"question": "How many male clients are from the state of Massachusetts?", "sql": "SELECT COUNT(T3.sex) FROM state AS T1 INNER JOIN district AS T2 ON T1.StateCode = T2.state_abbrev INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.state = 'Massachusetts' AND T3.sex = 'Male'", "source_tables": ["state", "client", "district"]}, "evidence": "male refers to sex = 'Male';"}
{"sample_id": 351, "db_id": "retail_complains", "final": {"question": "Calculate the percentage of complaints made by Google account client in server ZOHARI.", "sql": "SELECT CAST(SUM(CASE WHEN T1.email LIKE '%@gmail.com' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.email) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T2.server = 'ZOHARI'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "Google account refers to email like '%@gmail.com'; percentage = divide(count(Complaint ID where email like '%@gmail.com') , count(Complaint ID)) * 100%"}
{"sample_id": 329, "db_id": "retail_complains", "final": {"question": "What is the most common issue for the highest priority complaints?", "sql": "SELECT T1.Issue FROM events AS T1 INNER JOIN callcenterlogs AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE T2.priority = 2 GROUP BY T1.Issue ORDER BY COUNT(T1.Issue) DESC LIMIT 1", "source_tables": ["callcenterlogs", "events"]}, "evidence": "most common refers to max(count(issue)); highest priority refers to priority = 2"}
{"sample_id": 383, "db_id": "retail_complains", "final": {"question": "Which city in West North Central has the highest number of customers over the age of 60?", "sql": "SELECT T2.city FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'West North Central' AND T1.age > 60 GROUP BY T2.city ORDER BY COUNT(T2.city) DESC LIMIT 1", "source_tables": ["client", "district"]}, "evidence": "in North Central refers to Region = 'North Central'; highest number of customers refers to max(count(client_id)); over the age of 60 refers to age > 60"}
{"sample_id": 246, "db_id": "retail_complains", "final": {"question": "Was the tag in the complaint filed by Matthew Pierce on 2016/10/28 approved by himself?", "sql": "SELECT CASE WHEN T2.\"Consumer consent provided?\" IN (NULL, 'N/A', 'Empty') THEN 'No' ELSE 'Yes' END FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Matthew' AND T1.last = 'Pierce' AND T2.\"Date received\" = '2016-10-28'", "source_tables": ["client", "events"]}, "evidence": "on 2016/10/28 refers to Date received = '2016-10-28'; \"Consumer consent provided?\" in (null, 'N/A', 'Empty') means that the company didn't get the permission of consent; \"Consumer consent provided?\" not in (null, 'N/A', 'Empty') means that customers provide the consent for this tag;"}
{"sample_id": 338, "db_id": "retail_complains", "final": {"question": "Which region has the second most clients?", "sql": "SELECT T2.division FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id GROUP BY T2.division ORDER BY COUNT(T2.division) DESC LIMIT 1, 1", "source_tables": ["client", "district"]}, "evidence": "region refers to division; second most refers to second max(client_id)"}
{"sample_id": 281, "db_id": "retail_complains", "final": {"question": "What is the number of complaints related to Credit cards came from female clients?", "sql": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Female' AND T2.Product = 'Credit card'", "source_tables": ["client", "events"]}, "evidence": "Credit cards refers to Product = 'Credit card'; female refers to sex = 'female';"}
{"sample_id": 390, "db_id": "retail_complains", "final": {"question": "Please list all clients' phone numbers and complaint IDs which are still in progress.", "sql": "SELECT T1.phone, T2.\"Complaint ID\" FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Company response to consumer\" = 'In progress'", "source_tables": ["client", "events"]}, "evidence": "in progress refers to Company response to consumer = 'In progress'"}
{"sample_id": 250, "db_id": "retail_complains", "final": {"question": "Among all the clients from the New York city, how many of them have filed a complaint on the issue of Deposits and withdrawals?", "sql": "SELECT COUNT(T2.Issue) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Issue = 'Deposits and withdrawals' AND T1.city = 'New York City'", "source_tables": ["client", "events"]}, "evidence": ""}
{"sample_id": 368, "db_id": "retail_complains", "final": {"question": "Among the clients in Middle Atlantic, how many are them are female and no more than 18 years old?", "sql": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'Middle Atlantic' AND T1.sex = 'Female' AND T1.age < 18", "source_tables": ["client", "district"]}, "evidence": "in Middle Atlantic refers to division = 'Middle Atlantic'; female refers to sex = 'Female'; no more than 18 refers to age < 18"}
{"sample_id": 343, "db_id": "retail_complains", "final": {"question": "Among the teenager clients who use Google account and Microsoft account, which group of client is more than the other?", "sql": "SELECT CASE WHEN SUM(CASE WHEN email LIKE '%@gmail.com' THEN 1 ELSE 0 END) > SUM(CASE WHEN email LIKE '%@outlook.com' THEN 1 ELSE 0 END) THEN 'Google account' ELSE 'Microsoft account' END FROM client WHERE age BETWEEN 13 AND 19", "source_tables": ["client"]}, "evidence": "teenager refers to 13 < age < = 19; Google account refers to email like '%@gmail.com'; Microsoft account refers to email like '%@outlook.com'"}
{"sample_id": 321, "db_id": "retail_complains", "final": {"question": "How long was Kendall Allen's complaint about her credit card?", "sql": "SELECT T3.ser_time FROM events AS T1 INNER JOIN client AS T2 ON T1.Client_ID = T2.client_id INNER JOIN callcenterlogs AS T3 ON T1.\"Complaint ID\" = T3.\"Complaint ID\" WHERE T2.first = 'Kendall' AND T2.last = 'Allen' AND T2.sex = 'Female' AND T1.Product = 'Credit card'", "source_tables": ["client", "callcenterlogs", "events"]}, "evidence": "how long refers to ser_time; credit card refers to Product = 'Credit Card';"}
{"sample_id": 278, "db_id": "retail_complains", "final": {"question": "List the full name and phone number of clients who submitted the complaint via fax.", "sql": "SELECT T1.first, T1.middle, T1.last, T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Submitted via\" = 'Fax'", "source_tables": ["client", "events"]}, "evidence": "full name = first, middle, last; submitted the complaint via fax refers to \"Submitted via\" = 'fax';"}
{"sample_id": 367, "db_id": "retail_complains", "final": {"question": "How many times per year does a credit card customer complain about overlimit fees?", "sql": "SELECT strftime('%Y', \"Date received\"), COUNT(\"Date received\") FROM events WHERE product = 'Credit card' AND issue = 'Overlimit fee' GROUP BY strftime('%Y', \"Date received\") HAVING COUNT(\"Date received\")", "source_tables": ["events"]}, "evidence": "credit card customer refers to product = 'Credit card'; about overlimit fees refers to issue = 'Overlimit fee'"}
{"sample_id": 400, "db_id": "retail_complains", "final": {"question": "What are the issues of the complains of male clients and products from age 25 and below?", "sql": "SELECT DISTINCT T2.Issue FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Male' AND T1.age < 25", "source_tables": ["client", "events"]}, "evidence": "male refers to sex = 'Male'; age 25 and below refers to age < 25"}
{"sample_id": 291, "db_id": "retail_complains", "final": {"question": "Identify by their ID all clients who did not give their consent permission.", "sql": "SELECT Client_ID FROM events WHERE \"Consumer consent provided?\" = 'N/A' OR 'Consumer consent provided?' IS NULL OR 'Consumer consent provided?' = ''", "source_tables": ["events"]}, "evidence": "did not give their consent permission refers to Consumer consent provided is null, 'N/A', or empty;"}
{"sample_id": 335, "db_id": "retail_complains", "final": {"question": "List all the server of the phone complaints with a late response from the company.", "sql": "SELECT DISTINCT T2.server FROM events AS T1 INNER JOIN callcenterlogs AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE T1.\"Submitted via\" = 'Phone' AND T1.\"Timely response?\" = 'No'", "source_tables": ["callcenterlogs", "events"]}, "evidence": "phone complaint refers to Submitted via = 'Phone'; late response refers to Timely response? = 'No'"}
{"sample_id": 387, "db_id": "retail_complains", "final": {"question": "Please list the emails of the clients whose complaint date received is 7/3/2014.", "sql": "SELECT T1.email FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Date received\" = '2014-07-03'", "source_tables": ["client", "events"]}, "evidence": "7/3/2014 refers to Date received = '2014-07-03'"}
{"sample_id": 386, "db_id": "retail_complains", "final": {"question": "Please give the first name and phone number of the client whose complaint id is CR0922485.", "sql": "SELECT T1.first, T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Complaint ID\" = 'CR0922485'", "source_tables": ["client", "events"]}, "evidence": "first name refers to first"}
{"sample_id": 516, "db_id": "movies_4", "final": {"question": "What is the average revenue made by Latin movies?", "sql": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Latin'", "source_tables": ["movie", "language", "movie_languages"]}, "evidence": "Latin movies refers to language_name = 'Latin'; average revenue = AVG(revenue)"}
{"sample_id": 511, "db_id": "movies_4", "final": {"question": "Are there any post-production movies in Nederlands?", "sql": "SELECT DISTINCT CASE WHEN T1.movie_status = 'Post Production' THEN 'YES' ELSE 'NO' END AS YORN FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Nederlands'", "source_tables": ["movie", "language", "movie_languages"]}, "evidence": "post-production movies refers to movie_status = 'Post Production'; Nederlands refers to language_name = 'Nederlands';"}
{"sample_id": 496, "db_id": "movies_4", "final": {"question": "Provide the genre of a movie title with a tagline of \"A long time ago in a galaxy far, far away\u2026\".", "sql": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T3.genre_id = T2.genre_id WHERE T1.tagline = 'A long time ago in a galaxy far, far away...'", "source_tables": ["movie", "genre", "movie_genres"]}, "evidence": "genre refers to genre_name; tagline of \"A long time ago in a galaxy far, far away\u2026\" refers to tagline = 'A long time ago in a galaxy far, far away\u2026'"}
{"sample_id": 455, "db_id": "movies_4", "final": {"question": "List the person IDs of the second film editors in Movie No. 12.", "sql": "SELECT person_id FROM movie_crew WHERE movie_id = 12 AND job = 'Second Film Editor'", "source_tables": ["movie_crew"]}, "evidence": "second film editors refers to job = 'Second Film Editor'; Movie No. 12 refers to movie_id = 12"}
{"sample_id": 525, "db_id": "movies_4", "final": {"question": "What is the most common keyword among all the movies released in 2006?", "sql": "SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.release_date LIKE '2006%' GROUP BY T3.keyword_name ORDER BY COUNT(T3.keyword_name) DESC LIMIT 1", "source_tables": ["movie", "keyword", "movie_keywords"]}, "evidence": "most common keyword refers to max(count(keyword_name)); movies released in 2006 refers to release_date LIKE '%2006%'"}
{"sample_id": 533, "db_id": "movies_4", "final": {"question": "What is the title of the movie with the most keywords?", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id GROUP BY T1.title ORDER BY COUNT(T2.keyword_id) DESC LIMIT 1", "source_tables": ["movie", "movie_keywords"]}, "evidence": "most keywords refers to max(count(keyword_id))"}
{"sample_id": 503, "db_id": "movies_4", "final": {"question": "What is the ID of the production company which produced the movie \"Gladiator\"?", "sql": "SELECT T2.company_id FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Gladiator'", "source_tables": ["movie_company", "movie"]}, "evidence": "ID of the production company refers to company_id; movie \"Gladiator\" refers to title = 'Gladiator'"}
{"sample_id": 441, "db_id": "movies_4", "final": {"question": "Provide the title of the movie that is most-liked by a large number of people.", "sql": "SELECT title FROM movie ORDER BY popularity DESC LIMIT 1", "source_tables": ["movie"]}, "evidence": "most-liked by a large number of people refers to max(popularity)"}
{"sample_id": 408, "db_id": "movies_4", "final": {"question": "Please list the names of the production company of the movie \"Four Rooms\".", "sql": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Four Rooms'", "source_tables": ["movie_company", "movie", "production_company"]}, "evidence": "names of the production company refers to movie_company; movie \"Four Rooms\" refers to title = 'Four Rooms'"}
{"sample_id": 529, "db_id": "movies_4", "final": {"question": "Provide the average revenue of all the French movies.", "sql": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'France'", "source_tables": ["country", "movie", "production_country"]}, "evidence": "French movies refers to country_name = 'France'; average revenue = AVG(revenue)"}
{"sample_id": 562, "db_id": "movies_4", "final": {"question": "Which character did Orlando Bloom play in the movie Pirates of the Caribbean: The Curse of the Black Pearl?", "sql": "SELECT T2.character_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Pirates of the Caribbean: The Curse of the Black Pearl' AND T3.person_name = 'Orlando Bloom'", "source_tables": ["movie", "movie_cast", "person"]}, "evidence": "Which character refers to character_name; movie Pirates of the Caribbean: The Curse of the Black Pearl refers to title = 'Pirates of the Caribbean: The Curse of the Black Pearl'"}
{"sample_id": 536, "db_id": "movies_4", "final": {"question": "What is the average ratio between female and male actors in a movie?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Female' THEN T1.person_id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Male' THEN T1.person_id ELSE NULL END) FROM movie_cast AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.gender_id", "source_tables": ["gender", "movie_cast"]}, "evidence": "female refers to gender = 'Female'\uff1bmale refers to gender = 'Male'; average ratio = divide(divide(sum(gender_id) when gender = 'Female', sum(gender_id) when gender = 'Male'), count(movie_id)) as percentage"}
{"sample_id": 544, "db_id": "movies_4", "final": {"question": "Who is the main actor in the \"Pirates of the Caribbean: At World's End\" movie?", "sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' ORDER BY T2.cast_order LIMIT 1", "source_tables": ["movie", "movie_cast", "person"]}, "evidence": "main actor refers to person_name where Min(cast_order); \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'"}
{"sample_id": 534, "db_id": "movies_4", "final": {"question": "Which department has the most people?", "sql": "SELECT T1.department_name FROM department AS T1 INNER JOIN movie_crew AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY COUNT(T2.department_id) DESC LIMIT 1", "source_tables": ["department", "movie_crew"]}, "evidence": "department refers to department_name; most people refers to max(count(department_id))"}
{"sample_id": 430, "db_id": "movies_4", "final": {"question": "How many producers does the movie \"The Amityville Horror\" have?", "sql": "SELECT COUNT(T2.person_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'The Amityville Horror' AND T2.job = 'Producer'", "source_tables": ["movie", "movie_crew"]}, "evidence": "producers refers to job = 'Producer'; \"The Amityville Horror\" refers to title = 'The Amityville Horror'"}
{"sample_id": 469, "db_id": "movies_4", "final": {"question": "List the title of movies in Latin released between 1/01/1990 and 12/31/1995.", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Latin' AND T1.release_date BETWEEN '1990-01-01' AND '1995-12-31'", "source_tables": ["movie", "language", "movie_languages"]}, "evidence": "movies in Latin refers to language_name = 'Latin'; released between 1/01/1990 and 12/31/1995 refers to release_date BETWEEN '1990-01-01' AND '1995-12-31'"}
{"sample_id": 524, "db_id": "movies_4", "final": {"question": "List all the actors who have played characters with \"captain\" in their names.", "sql": "SELECT DISTINCT T1.person_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T2.character_name LIKE '%captain%'", "source_tables": ["movie_cast", "person"]}, "evidence": "List all the actors refers to person_name; characters with \"captain\" in their names refers to character_name LIKE '%captain%';"}
{"sample_id": 497, "db_id": "movies_4", "final": {"question": "What is the country ID of the movie with the title of \"Pirates of the Caribbean: Dead Man's Chest\"?", "sql": "SELECT T2.COUNTry_id FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title LIKE 'Pirates of the Caribbean: Dead Man%s Chest'", "source_tables": ["movie", "production_country"]}, "evidence": "title of \"Pirates of the Caribbean: Dead Man's Chest\" refers to title = 'Pirates of the Caribbean: Dead Man''s Chest'"}
{"sample_id": 465, "db_id": "movies_4", "final": {"question": "Write the titles of horror films with a vote average of more than 7.", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Horror' AND vote_average > 7", "source_tables": ["movie", "genre", "movie_genres"]}, "evidence": "horror films refers to genre_name = 'Horror'; vote average of more than 7 refers to vote_average > 7"}
{"sample_id": 499, "db_id": "movies_4", "final": {"question": "Accumulate the budget of the movie titles with the keyword of \"video game\".", "sql": "SELECT SUM(T1.budget) FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'video game'", "source_tables": ["movie", "keyword", "movie_keywords"]}, "evidence": "keyword of \"video game\" refers to keyword_name = 'video game'"}
{"sample_id": 426, "db_id": "movies_4", "final": {"question": "For the movie \"Land of the Dead\", who is its director?", "sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Land of the Dead' AND T2.job = 'Director'", "source_tables": ["movie", "movie_crew", "person"]}, "evidence": "\"Land of the Dead\" refers to title = 'Land of the Dead'; director refers to person_name where job = 'Director'"}
{"sample_id": 470, "db_id": "movies_4", "final": {"question": "What is the average revenue of American movies in 2006?", "sql": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'United States of America' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2006", "source_tables": ["country", "movie", "production_country"]}, "evidence": "American movies refers to country_name = 'United States of America'; in 2006 refers to release_date LIKE '2006%'; average revenue = AVG(revenue)"}
{"sample_id": 527, "db_id": "movies_4", "final": {"question": "What is the third least common genre?", "sql": "SELECT T2.genre_name FROM movie_genres AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.genre_id GROUP BY T2.genre_id ORDER BY COUNT(T1.movie_id) LIMIT 2, 1", "source_tables": ["genre", "movie_genres"]}, "evidence": "least common genre refers to min(count(genre_name))"}
{"sample_id": 552, "db_id": "movies_4", "final": {"question": "Find the difference in percentage of the movies under keywords of \"woman director\" and \"independent film\".", "sql": "SELECT CAST((SUM(CASE WHEN T1.keyword_name = 'woman director' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.keyword_name = 'independent film' THEN 1 ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.keyword_name = 'independent film' THEN 1 ELSE 0 END) FROM keyword AS T1 INNER JOIN movie_keywords AS T2 ON T1.keyword_id = T2.keyword_id", "source_tables": ["keyword", "movie_keywords"]}, "evidence": "under keywords of \"woman director\" and \"independent film\" refers to keyword_name = 'woman director' and keyword_name = 'independent film'; difference in percentage = divide(subtract(count(movie_id) when keyword_name = 'woman director', count(movie_id) when keyword_name = 'independent film'), count(movie_id)) as percentage"}
{"sample_id": 554, "db_id": "movies_4", "final": {"question": "How many adventure movies are there that were released in 2000?", "sql": "SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Adventure' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2000", "source_tables": ["movie", "genre", "movie_genres"]}, "evidence": "adventure movies refers to genre_name = 'Adventure'; released in 2000 refers to release_date LIKE '2000%'"}
{"sample_id": 513, "db_id": "movies_4", "final": {"question": "Provide the homepage of the Bahasa Indonesia movies.", "sql": "SELECT DISTINCT T1.homepage FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Bahasa indonesia'", "source_tables": ["movie", "language", "movie_languages"]}, "evidence": "Bahasa Indonesia movies refers to language_name = 'Bahasa indonesia'"}
{"sample_id": 531, "db_id": "movies_4", "final": {"question": "What are the top 5 most popular movie directors?", "sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T2.job = 'Director' ORDER BY T1.popularity DESC LIMIT 5", "source_tables": ["movie", "movie_crew", "person"]}, "evidence": "directors refers to job = 'Director'; most popular refers to max(popularity)"}
{"sample_id": 521, "db_id": "movies_4", "final": {"question": "What is the iso code of \"Kyrgyz Republic\"?", "sql": "SELECT COUNTry_iso_code FROM COUNTry WHERE COUNTry_name = 'Kyrgyz Republic'", "source_tables": ["country"]}, "evidence": "iso code refers to country_iso_code; \"Kyrgyz Republic\" refers to country_name = 'Kyrgyz Republic'"}
{"sample_id": 420, "db_id": "movies_4", "final": {"question": "Among the movie in which Dariusz Wolski works as the director of photography, what is the percentage of those movie whose vote average is over 5.0?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.vote_average > 5 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.vote_average) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'", "source_tables": ["movie", "movie_crew", "person"]}, "evidence": "director of photography refers to job = 'Director of Photography'; vote average is over 8.0 refers to vote_average > 5; percentage = divide(sum(movie_id) when vote_average > 5, count(movie_id)) as percentage"}
{"sample_id": 551, "db_id": "movies_4", "final": {"question": "Provide the production companies of the movie that has over 35% average running time per movie in 2016.", "sql": "SELECT T.company_name FROM ( SELECT DISTINCT T3.company_name, T1.runtime FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' ) T WHERE T.runtime * 100 > (0.35 * ( SELECT AVG(T1.runtime) FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' ) + ( SELECT AVG(T1.runtime) FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' )) * 100", "source_tables": ["movie_company", "movie", "production_company"]}, "evidence": "production companies refers to company_name; in 2016 refers to release_date LIKE '2016%'; over 35% average running time per movie refers to divide(subtract(runtime, AVG(runtime)), AVG(runtime)) * 100 as percentage > 35"}
{"sample_id": 459, "db_id": "movies_4", "final": {"question": "How many times did Bob Peterson appear in the movie credits?", "sql": "SELECT COUNT(T2.movie_id) FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Bob Peterson'", "source_tables": ["movie_cast", "person"]}, "evidence": ""}
{"sample_id": 462, "db_id": "movies_4", "final": {"question": "Write me the titles of the movies starring Jim Carrey.", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Jim Carrey'", "source_tables": ["movie", "movie_cast", "person"]}, "evidence": "Jim Carrey is the person_name;"}
{"sample_id": 506, "db_id": "movies_4", "final": {"question": "Among Warner Bros. Pictures' movies, which title made the highest revenue?", "sql": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Warner Bros. Pictures' ORDER BY T3.revenue DESC LIMIT 1", "source_tables": ["movie_company", "movie", "production_company"]}, "evidence": "Warner Bros. Pictures' movies refers to company_name = 'Warner Bros. Pictures'; highest revenue refers to max(revenue)"}
{"sample_id": 570, "db_id": "codebase_comments", "final": {"question": "What is the id of the repository with the highest number of solution path?", "sql": "SELECT RepoId FROM solution GROUP BY RepoId ORDER BY COUNT(Path) DESC LIMIT 1", "source_tables": ["solution"]}, "evidence": "highest number of solution path refers to max(count(Path)); id of the repository refers to RepoId"}
{"sample_id": 687, "db_id": "codebase_comments", "final": {"question": "How many solution path does the repository with 111 stars, 58 forks, and 111 watchers?", "sql": "SELECT COUNT(T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 111 AND T1.Forks = 58 AND T1.Watchers = 111", "source_tables": ["solution", "repo"]}, "evidence": "solution path refers to Path;"}
{"sample_id": 579, "db_id": "codebase_comments", "final": {"question": "How many solution paths are there inside the 2nd most popular repository?", "sql": "SELECT COUNT(DISTINCT T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = ( SELECT Watchers FROM Repo ORDER BY Watchers DESC LIMIT 1, 1 )", "source_tables": ["solution", "repo"]}, "evidence": "more watchers mean that this repository is more popular; most popular repository refers to max(Watchers);"}
{"sample_id": 671, "db_id": "codebase_comments", "final": {"question": "Please state the API calls for method number 10 and its intended course of action.", "sql": "SELECT T2.ApiCalls, T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 10", "source_tables": ["solution", "method"]}, "evidence": "method number refers to Method_100k.Id; Method_100k.Id = 10; intended course of action refers to Path;"}
{"sample_id": 624, "db_id": "codebase_comments", "final": {"question": "For the solution of the most 'sw' methods, what is its path?", "sql": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'sw'", "source_tables": ["solution", "method"]}, "evidence": "solution refers to SolutionId; sw refers to Lang = 'sw'; solution with the most 'sw' methods refers to MAX(COUNT(Lang = 'sw'));"}
{"sample_id": 607, "db_id": "codebase_comments", "final": {"question": "How many stars does the repository of the solution No. 45997 have?", "sql": "SELECT T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 45997", "source_tables": ["solution", "repo"]}, "evidence": "repository of solution no. refers to Id"}
{"sample_id": 675, "db_id": "codebase_comments", "final": {"question": "Provide the tokenized name of the method \"Sky.Excel.ExcelBook.TypeConvert\".", "sql": "SELECT NameTokenized FROM Method WHERE Name = 'Sky.Excel.ExcelBook.TypeConvert'", "source_tables": ["method"]}, "evidence": "tokenized name refers to NameTokenized; NameTokenized = 'Sky.Excel.ExcelBook.TypeConvert';"}
{"sample_id": 604, "db_id": "codebase_comments", "final": {"question": "Show the full Comment of the method \"DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows\".", "sql": "SELECT FullComment FROM Method WHERE Name = 'DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows'", "source_tables": ["method"]}, "evidence": ""}
{"sample_id": 623, "db_id": "codebase_comments", "final": {"question": "Give the number of solutions that the repository which has 3060 Stars contains.", "sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 3060", "source_tables": ["solution", "repo"]}, "evidence": "solutions refers to Solution.Id; repository refers to Repository.Id;"}
{"sample_id": 683, "db_id": "codebase_comments", "final": {"question": "List all the method name of the solution path \"graffen_NLog.Targets.Syslog\\src\\NLog.Targets.Syslog.sln\n\".", "sql": "SELECT DISTINCT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'graffen_NLog.Targets.SyslogsrcNLog.Targets.Syslog.sln'", "source_tables": ["solution", "method"]}, "evidence": "method name refers to Name; solution path refers to Path; Path = 'graffen_NLog.Targets.Syslog\\src\\NLog.Targets.Syslog.sln';"}
{"sample_id": 588, "db_id": "codebase_comments", "final": {"question": "Are the comments for the method \"HtmlSharp.HtmlParser.Feed\" in XML format?", "sql": "SELECT CASE WHEN CommentIsXml = 0 THEN 'No' WHEN CommentIsXml = 1 THEN 'Yes' END isXMLFormat FROM Method WHERE Name = 'HtmlSharp.HtmlParser.Feed'", "source_tables": ["method"]}, "evidence": "the comment for this method is not XML refers to CommentsXML = 0; the comments for this method is XML refers to CommentsXML = 1"}
{"sample_id": 618, "db_id": "codebase_comments", "final": {"question": "For the repository which got '189' Stars, how many solutions which needs to be compiled does it contain?", "sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 189 AND T2.WasCompiled = 0", "source_tables": ["solution", "repo"]}, "evidence": "repository refers to Repository.Id; solution needs to be compiled refers to WasCompiled = 0;"}
{"sample_id": 666, "db_id": "codebase_comments", "final": {"question": "What is the task of the method that is in the Czech language?", "sql": "SELECT DISTINCT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE Lang = 'cs'", "source_tables": ["method"]}, "evidence": "method refers to Name; task of the method refers to the second part of the Name after the \".\"; Czech language refers to Lang = 'cs'"}
{"sample_id": 651, "db_id": "codebase_comments", "final": {"question": "What is the url of solution 1?", "sql": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 1", "source_tables": ["solution", "repo"]}, "evidence": "solution refers to Solution.Id; Solution.Id = 1;"}
{"sample_id": 686, "db_id": "codebase_comments", "final": {"question": "How many liked by people does the solution path \"ninject_Ninject\\Ninject.sln\n\" have?", "sql": "SELECT DISTINCT T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'ninject_NinjectNinject.sln'", "source_tables": ["solution", "repo"]}, "evidence": "how many liked by people refers to Stars; solution path refers to Path; Path = 'ninject_Ninject\\Ninject.sln';"}
{"sample_id": 590, "db_id": "codebase_comments", "final": {"question": "How many solutions contain files found within the repository most people like?", "sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = ( SELECT MAX(Stars) FROM Repo )", "source_tables": ["solution", "repo"]}, "evidence": "more stars mean more people like this repository; most people like refers to max(Stars);"}
{"sample_id": 577, "db_id": "codebase_comments", "final": {"question": "Among the repositories whose number of stars received are between 6,000 to 9,000, which repository has the highest number of solution paths and many of those solution paths needs to be compiled if user wants to implement it?", "sql": "SELECT T2.RepoId, COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars BETWEEN 6000 AND 9000 AND T2.WasCompiled = 0 GROUP BY T2.RepoId ORDER BY COUNT(T2.RepoId) DESC LIMIT 1", "source_tables": ["solution", "repo"]}, "evidence": "Stars between 6,000 to 9,000; highest number of solution paths refers to max(count(Path)); needs to be compiled if user wants to implement it refers to WasCompiled = 0;"}
{"sample_id": 665, "db_id": "codebase_comments", "final": {"question": "Please provide a link to the most well-known repository's Github address.", "sql": "SELECT Url FROM Repo WHERE Watchers = ( SELECT MAX(Watchers) FROM Repo )", "source_tables": ["repo"]}, "evidence": "link refers to Url; well-known repository refers to MAX(Watchers);"}
{"sample_id": 635, "db_id": "codebase_comments", "final": {"question": "List all the ids of repositories for solutions with \"ro\" methods.", "sql": "SELECT DISTINCT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'ro'", "source_tables": ["solution", "method"]}, "evidence": "ids of repositories refers to RepoId; ro refers to lang = 'ro';"}
{"sample_id": 581, "db_id": "codebase_comments", "final": {"question": "What is the full comment on the method whose solution path is \"bmatzelle_nini\\Source\\Nini.sln\" with a tokenized name of \"alias text add alias\"?", "sql": "SELECT T2.FullComment FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'bmatzelle_niniSourceNini.sln' AND T2.NameTokenized = 'alias text add alias'", "source_tables": ["solution", "method"]}, "evidence": ""}
{"sample_id": 677, "db_id": "codebase_comments", "final": {"question": "How many watchers does the path \"maff_se3ue7\\US7.sln\" have?", "sql": "SELECT T1.Watchers FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'maff_se3ue7US7.sln'", "source_tables": ["solution", "repo"]}, "evidence": ""}
{"sample_id": 649, "db_id": "codebase_comments", "final": {"question": "Please list the names of methods with the solution path \"wallerdev_htmlsharp\\HtmlSharp.sln\".", "sql": "SELECT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'wallerdev_htmlsharpHtmlSharp.sln'", "source_tables": ["solution", "method"]}, "evidence": "name of the methods refers to Name; solution path refers to Path; Path = 'wallerdev_htmlsharp\\HtmlSharp.sln';"}
{"sample_id": 617, "db_id": "codebase_comments", "final": {"question": "Give the number of watchers that the repository of the solution No. 338082 have.", "sql": "SELECT T1.Watchers FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 338082", "source_tables": ["solution", "repo"]}, "evidence": "number of watchers refers to Watchers; solution number refers to Solution.Id;"}
{"sample_id": 661, "db_id": "codebase_comments", "final": {"question": "How many more stars in percentage are there for the repository of solution \"1\" than solution \"2\"?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Id = 1 THEN T1.Stars ELSE 0 END) - SUM(CASE WHEN T2.Id = 2 THEN T1.Stars ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 2 THEN T1.Stars ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId", "source_tables": ["solution", "repo"]}, "evidence": "solution refers to Solution.Id; Solution.Id = 1 OR 2; percentage = DIVIDE(MULTIPLY(SUBTRACT(SUM(Solution.Id = 1), SUM(Solution.Id = 2)), 100)), SUM(Solution.Id = 2);"}
{"sample_id": 644, "db_id": "codebase_comments", "final": {"question": "Please provide the number of forks that the repository of the solution 35 have.", "sql": "SELECT T1.Forks FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 35", "source_tables": ["solution", "repo"]}, "evidence": "solution refers to Solution.Id; Solution.Id = 35;"}
{"sample_id": 593, "db_id": "codebase_comments", "final": {"question": "Among the solutions that contain files within the repository followed by over 1000 people, how many of them can be\nimplemented without needs of compilation?", "sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks > 1000 AND T2.WasCompiled = 1", "source_tables": ["solution", "repo"]}, "evidence": "followed by over 1000 people refers to Forks >1000; can be\nimplemented without needs of compilation refers to WasCompiled = 1;"}
{"sample_id": 717, "db_id": "trains", "final": {"question": "Which direction do most of the trains with rectangle-shaped second cars run?", "sql": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 2 AND T1.shape = 'rectangle' GROUP BY T2.direction ORDER BY COUNT(T2.id) DESC LIMIT 1", "source_tables": ["trains", "cars"]}, "evidence": "most of the trains refers to MAX(count(id)); second cars refers to position = 2"}
{"sample_id": 702, "db_id": "trains", "final": {"question": "What is the total number of short cars on all the trains that run in the east direction?", "sql": "SELECT SUM(CASE WHEN T1.len = 'short' then 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'", "source_tables": ["trains", "cars"]}, "evidence": "short cars refers to len = 'short'"}
{"sample_id": 709, "db_id": "trains", "final": {"question": "Among the trains that have at least one non-regular shaped car, what is the percentage of it running in the east direction?", "sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.direction = 'east' THEN T1.train_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.shape IN ('bucket', 'ellipse')", "source_tables": ["trains", "cars"]}, "evidence": "non-regular shaped car refers to shape in ('bucket', 'ellipse'); calculation = MULTIPLY(DIVIDE(count(direction = 'east' then train_id)), count(train_id), 100)"}
{"sample_id": 722, "db_id": "trains", "final": {"question": "How many trains with fully loaded head cars are running east?", "sql": "SELECT COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 1 AND T1.load_num = 3", "source_tables": ["trains", "cars"]}, "evidence": "fully loaded refers to load_num = 3; head cars refers to position = 1"}
{"sample_id": 698, "db_id": "trains", "final": {"question": "Please list the IDs of all the cars with double sides on trains that run in the west direction.", "sql": "SELECT T1.id FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.sides = 'double'", "source_tables": ["trains", "cars"]}, "evidence": "double sides on trains refers to sides = 'double'"}
{"sample_id": 706, "db_id": "trains", "final": {"question": "Trains that run in which direction have more rectangle-shaped cars in total?", "sql": "SELECT T1.direction FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) AS rectCarsNum FROM cars WHERE shape = 'rectangle' GROUP BY train_id ) AS T2 ON T1.id = T2.train_id ORDER BY T2.rectCarsNum DESC", "source_tables": ["trains", "cars"]}, "evidence": "more rectangle-shaped cars refers to MAX(rectCarsNum)"}
{"sample_id": 716, "db_id": "trains", "final": {"question": "Among the trains running east, how many trains have at least 4 cars?", "sql": "SELECT SUM(CASE WHEN T1.direction = 'east' THEN 1 ELSE 0 END)as count FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) AS carsNum FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T2.carsNum >= 4", "source_tables": ["trains", "cars"]}, "evidence": "east is a direction; at least 4 cars refers to carsNum > = 4"}
{"sample_id": 725, "db_id": "trains", "final": {"question": "What is the direction of the train with a diamond-shaped load in its 2nd car?", "sql": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 2 AND T1.shape = 'diamond'", "source_tables": ["trains", "cars"]}, "evidence": "2nd car refers to position = 2"}
{"sample_id": 768, "db_id": "movie", "final": {"question": "What is the MPAA rating and title of the movie starred by Leonardo DiCaprio with highest budget?", "sql": "SELECT T1.\"MPAA Rating\", T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Leonardo DiCaprio' ORDER BY T1.Budget DESC LIMIT 1", "source_tables": ["movie", "characters", "actor"]}, "evidence": "starred by Leonardo DiCaprio refers to Name = 'Leonardo Dicaprio'; highest budget refers to max(Budget)"}
{"sample_id": 760, "db_id": "movie", "final": {"question": "In rated PG movies, how many of them released in June 1990?", "sql": "SELECT COUNT(*) FROM movie WHERE \"MPAA Rating\" = 'PG' AND \"Release Date\" LIKE '1990-06%'", "source_tables": ["movie"]}, "evidence": "rated PG refers to MPAA Rating = 'PG'; released in June 1990 refers to Release Date BETWEEN '1990-06-01' and '1990-06-30'"}
{"sample_id": 734, "db_id": "movie", "final": {"question": "Which movie is the character Dr. Archibald 'Moonlight' Graham from?", "sql": "SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.\"Character Name\" = 'Dr. Archibald ''Moonlight'' Graham'", "source_tables": ["movie", "characters"]}, "evidence": "movie name refers to title; character Dr. Archibald 'Moonlight' Graham refers to character_name = 'Dr. Archibald 'Moonlight' Graham'"}
{"sample_id": 746, "db_id": "movie", "final": {"question": "Give the name of the No.1 character in the credit list from the highest rating thriller movie.", "sql": "SELECT T2.\"Character Name\" FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.creditOrder = '1' AND T1.Genre = 'Thriller' ORDER BY T1.Rating DESC LIMIT 1", "source_tables": ["movie", "characters"]}, "evidence": "No.1 character in the credit list refers to creditOrder = '1'; highest rating refers to max(rating); thriller movie refers to Genre = 'Thriller'"}
{"sample_id": 757, "db_id": "movie", "final": {"question": "What is the percentage of the USA actors that showed up in the credit list of movie \"Mrs. Doubtfire\"?", "sql": "SELECT CAST(SUM(CASE WHEN T3.\"Birth Country\" = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.\"Birth Country\") FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Mrs. Doubtfire'", "source_tables": ["movie", "characters", "actor"]}, "evidence": "USA actors refers to Birth Country = 'USA'; movie \"Mrs. Doubtfire\" refers to Title = 'Mrs. Doubtfire'; percentage = divide(count(ActorID where Birth Country = 'USA'), count(ActorID)) * 100%"}
{"sample_id": 735, "db_id": "movie", "final": {"question": "Please list the names of the movies starring Tom Cruise.", "sql": "SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise'", "source_tables": ["movie", "characters", "actor"]}, "evidence": "movie name refers to title; starring Tom Cruise refers to name = 'Tom Cruise'"}
{"sample_id": 750, "db_id": "movie", "final": {"question": "When is the birthday of the actor who played \"Sully\"?", "sql": "SELECT T2.\"Date of Birth\" FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.\"Character Name\" = 'Sully'", "source_tables": ["characters", "actor"]}, "evidence": "birthday refers to Date of Birth; \"Sully\" refers to Character Name = 'Sully'"}
{"sample_id": 730, "db_id": "movie", "final": {"question": "Please list the names of the characters in the movie Look Who's Talking.", "sql": "SELECT T2.\"Character Name\" FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'Look Who''s Talking'", "source_tables": ["movie", "characters"]}, "evidence": "movie Look Who's Talking refers to title = 'Look Who's Talking'"}
{"sample_id": 764, "db_id": "movie", "final": {"question": "List the height and net worth of actors starred in Three Men and a Little Lady.", "sql": "SELECT T3.\"Height (Inches)\", T3.NetWorth FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Three Men and a Little Lady'", "source_tables": ["movie", "characters", "actor"]}, "evidence": "Three Men and a Little Lady refers to Title = 'Three Men and a Little Lady'"}
{"sample_id": 770, "db_id": "movie", "final": {"question": "List the runtime of movies starred by an African-American actor born on December 28, 1954.", "sql": "SELECT T1.Runtime FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Ethnicity = 'African American' AND T3.\"Date of Birth\" = '1954-12-28'", "source_tables": ["movie", "characters", "actor"]}, "evidence": "African-American refers to Ethnicity = 'African American'; born on December 28 1954 refers to Date of Birth = '1954-12-28'"}
{"sample_id": 853, "db_id": "social_media", "final": {"question": "Tweets posted from which city has a higher number of average likes, Bangkok or Chiang Mai?", "sql": "SELECT SUM(CASE WHEN T2.City = 'Bangkok' THEN Likes ELSE NULL END) / COUNT(CASE WHEN T2.City = 'Bangkok' THEN 1 ELSE 0 END) AS bNum , SUM(CASE WHEN City = 'Chiang Mai' THEN Likes ELSE NULL END) / COUNT(CASE WHEN City = 'Chiang Mai' THEN TweetID ELSE NULL END) AS cNum FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.City IN ('Bangkok', 'Chiang Mai')", "source_tables": ["location", "twitter"]}, "evidence": "\"Bangkok\" and \"Chiang Mai\" are both City; average number of like = Divide (Sum(Likes), Count(TweetID))"}
{"sample_id": 827, "db_id": "social_media", "final": {"question": "Tweet with ID tw-682723090279841798 was posted from which country?", "sql": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.TweetID = 'tw-682723090279841798'", "source_tables": ["location", "twitter"]}, "evidence": "\"tw-682723090279841798\" is the TweetID"}
{"sample_id": 809, "db_id": "social_media", "final": {"question": "For the tweet which got the most likes, state the gender of the user who tweeted it.", "sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Likes DESC LIMIT 1", "source_tables": ["user", "twitter"]}, "evidence": "most likes refers to Max(Likes)"}
{"sample_id": 838, "db_id": "social_media", "final": {"question": "Please list the texts of the top 3 tweets with the most number of unique users seeing the tweet.", "sql": "SELECT text FROM twitter ORDER BY Reach DESC LIMIT 3", "source_tables": ["twitter"]}, "evidence": "the most number of unique users seeing refers to Max(Reach)"}
{"sample_id": 847, "db_id": "social_media", "final": {"question": "From which city were more tweets posted, Bangkok or Chiang Mai?", "sql": "SELECT SUM(CASE WHEN T2.City = 'Bangkok' THEN 1 ELSE 0 END) AS bNum , SUM(CASE WHEN T2.City = 'Chiang Mai' THEN 1 ELSE 0 END) AS cNum FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.City IN ('Bangkok', 'Chiang Mai')", "source_tables": ["location", "twitter"]}, "evidence": "\"Bangkok\" and \"Chiang Mai\" are both City"}
{"sample_id": 805, "db_id": "social_media", "final": {"question": "What is the gender of the user who tweeted `tw-715909161071091712`?", "sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.TweetID = 'tw-715909161071091712'", "source_tables": ["user", "twitter"]}, "evidence": "\"tw-715909161071091712\" is the TweetID"}
{"sample_id": 825, "db_id": "social_media", "final": {"question": "How many female users reshared their tweets?", "sql": "SELECT COUNT(T1.UserID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Female' AND T1.IsReshare = 'TRUE'", "source_tables": ["user", "twitter"]}, "evidence": "female users refers to Gender = 'Female'; reshare refers to IsReshare = 'TRUE'"}
{"sample_id": 846, "db_id": "social_media", "final": {"question": "From which city was the tweet with the most number of retweets posted?", "sql": "SELECT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID ORDER BY T1.RetweetCount DESC LIMIT 1", "source_tables": ["location", "twitter"]}, "evidence": "tweet with most number of retweet post refers to Max(RetweetCount)"}
{"sample_id": 839, "db_id": "social_media", "final": {"question": "How many reshared tweets have over 100 likes?", "sql": "SELECT COUNT(DISTINCT TweetID) FROM twitter WHERE IsReshare = 'TRUE' AND Likes > 100", "source_tables": ["twitter"]}, "evidence": "over 100 likes refers to Likes > 100; reshare tweet refers to IsReshare = 'TRUE'"}
{"sample_id": 813, "db_id": "social_media", "final": {"question": "What is the percentage of the tweets from California are positive?", "sql": "SELECT SUM(CASE WHEN T1.Sentiment > 0 THEN 1.0 ELSE 0 END) / COUNT(T1.TweetID) AS percentage FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE State = 'California'", "source_tables": ["location", "twitter"]}, "evidence": "\"California\" is the State; positive tweet refers to Sentiment > 0; percentage = Divide (Count(TweetID where Sentiment > 0), Count (TweetID)) * 100"}
{"sample_id": 826, "db_id": "social_media", "final": {"question": "Which country's tweets collected the most likes?", "sql": "SELECT T.Country FROM ( SELECT T2.Country, SUM(T1.Likes) AS num FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID GROUP BY T2.Country ) T ORDER BY T.num DESC LIMIT 1", "source_tables": ["location", "twitter"]}, "evidence": "country collected the most likes refers to Country where Max(Sum(Likes))"}
{"sample_id": 841, "db_id": "social_media", "final": {"question": "What is the gender of the user who has posted the tweet that got the most likes?", "sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Likes DESC LIMIT 1", "source_tables": ["user", "twitter"]}, "evidence": "tweet got the most likes refers to Max(Likes)"}
{"sample_id": 789, "db_id": "social_media", "final": {"question": "Among all the users that have posted a tweet with over 1000 likes, how many of them are male?", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Likes > 10 AND T2.Gender = 'Male'", "source_tables": ["user", "twitter"]}, "evidence": "over 1000 likes refers to Likes > 1000; 'Male' is the Gender of user"}
{"sample_id": 798, "db_id": "social_media", "final": {"question": "What is the code of Gwynedd State?", "sql": "SELECT DISTINCT StateCode FROM location WHERE State = 'Gwynedd'", "source_tables": ["location"]}, "evidence": "code refers to StateCode"}
{"sample_id": 822, "db_id": "social_media", "final": {"question": "Calculate the total number of male tweet IDs.", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male'", "source_tables": ["user", "twitter"]}, "evidence": "\"Male\" is the Gender"}
{"sample_id": 792, "db_id": "social_media", "final": {"question": "How many tweets are posted by male users in Argentina?", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T3 ON T1.UserID = T3.UserID WHERE T3.Gender = 'Male' AND T2.Country = 'Argentina'", "source_tables": ["user", "location", "twitter"]}, "evidence": "\"Argentina\" is the Country; male user refers to Gender = 'Male'"}
{"sample_id": 832, "db_id": "social_media", "final": {"question": "Calculate the total likes collected by tweets in `ru` posted by male users.", "sql": "SELECT SUM(T1.Likes) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Lang = 'ru' AND T2.Gender = 'Male'", "source_tables": ["user", "twitter"]}, "evidence": "'ru' refers to Lang = 'ru'; male user refers to Gender = 'Male'"}
{"sample_id": 876, "db_id": "cs_semester", "final": {"question": "Which professor is Oliy Spratling working with? Give the full name.", "sql": "SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Oliy' AND T3.l_name = 'Spratling'", "source_tables": ["ra", "student", "prof"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; full name refers to f_name and l_name;"}
{"sample_id": 856, "db_id": "cs_semester", "final": {"question": "How many professors are more popular than Zhou Zhihua?", "sql": "SELECT COUNT(prof_id) FROM prof WHERE popularity > ( SELECT popularity FROM prof WHERE first_name = 'Zhihua' AND last_name = 'Zhou' )", "source_tables": ["prof"]}, "evidence": "higher popularity means the professor is more popular;"}
{"sample_id": 860, "db_id": "cs_semester", "final": {"question": "Please list the full names of all the students who are research assistants with the highest research capability.", "sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN RA AS T2 ON T1.student_id = T2.student_id WHERE T2.capability = 5", "source_tables": ["student", "ra"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; the highest research capability refers to capability = 5; full name refers to f_name and l_name;"}
{"sample_id": 958, "db_id": "cs_semester", "final": {"question": "What percentage of students are highly satisfied with the Intro to Database 2 course?", "sql": "SELECT CAST(( SELECT COUNT(*) FROM course WHERE name = 'Intro to Database 2' AND course_id IN ( SELECT course_id FROM registration WHERE sat = ( SELECT MAX(sat) FROM registration ) ) ) AS REAL) * 100  / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Intro to Database 2'", "source_tables": ["course", "registration"]}, "evidence": "percentage = MULTIPLY(DIVIDE(COUNT(MAX(sat)), (COUNT(student_id))), 1.0); highly satisfied refers to MAX(sat);"}
{"sample_id": 912, "db_id": "cs_semester", "final": {"question": "Describe the students' full names and GPAs under the supervision of the most popular professor.", "sql": "SELECT T3.f_name, T3.l_name, T3.gpa FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id ORDER BY T1.popularity DESC LIMIT 1", "source_tables": ["ra", "student", "prof"]}, "evidence": "student's full names = f_name, l_name; most popular refers to MAX(popularity);"}
{"sample_id": 956, "db_id": "cs_semester", "final": {"question": "Find the university from which the professor who advised most undergraduate students graduated.", "sql": "SELECT T1.graduate_from FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.type = 'UG' GROUP BY T1.prof_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1", "source_tables": ["ra", "student", "prof"]}, "evidence": "university from which the professor graduated refers to graduate_from; undergraduate students refers to type = 'UG';"}
{"sample_id": 966, "db_id": "cs_semester", "final": {"question": "Among the students with a capability below 3, what is the difference of undergraduate students from research postgraduate students?", "sql": "SELECT SUM(CASE WHEN T2.type = 'UG' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.type = 'RPG' THEN 1 ELSE 0 END) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.capability < 3", "source_tables": ["student", "ra"]}, "evidence": "capability < 3; difference = subtract(count(type = 'UG')), (count(type = 'RPG')); undergraduate students refers to type = 'UG'; research postgraduate students refers to type = 'RPG';"}
{"sample_id": 855, "db_id": "cs_semester", "final": {"question": "Please list the names of the courses that are less important than Machine Learning Theory.", "sql": "SELECT name FROM course WHERE credit < ( SELECT credit FROM course WHERE name = 'Machine Learning Theory' )", "source_tables": ["course"]}, "evidence": "lower credit means less important;"}
{"sample_id": 941, "db_id": "cs_semester", "final": {"question": "Among the professors with a teachability of 3 and below, what is the percentage of their student advisees with a low salary?", "sql": "SELECT CAST(SUM(CASE WHEN T1.salary = 'low' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.salary) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability < 3", "source_tables": ["ra", "prof"]}, "evidence": "teachability < = 3; percentage = MULTIPLY(DIVIDE(COUNT(salary = 'low'), COUNT(salary)), 1.0);"}
{"sample_id": 931, "db_id": "cs_semester", "final": {"question": "Among undergraduate students, list the name of the course with the highest student satisfaction.", "sql": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.type = 'UG' ORDER BY T2.sat DESC LIMIT 1", "source_tables": ["course", "student", "registration"]}, "evidence": "Undergraduate students refers to type = 'UG'; satisfaction refers to sat; highest satisfaction refers to MAX(sat);"}
{"sample_id": 940, "db_id": "cs_semester", "final": {"question": "List the student's email with grade of B in a course with difficulty greater than the 80% of average difficulty of all courses.", "sql": "SELECT T2.email FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T1.course_id = T3.course_id WHERE T1.grade = 'B' GROUP BY T3.diff HAVING T3.diff > AVG(T3.diff) * 0.8", "source_tables": ["course", "student", "registration"]}, "evidence": "difficulty refers to diff; course with difficulty greater than the 80% of average difficulty refers to diff > MULTIPLY(AVG(diff), 80%);"}
{"sample_id": 881, "db_id": "cs_semester", "final": {"question": "How many courses does Alvera McQuillin take?", "sql": "SELECT COUNT(T1.course_id) FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.f_name = 'Alvera' AND T2.l_name = 'McQuillin'", "source_tables": ["student", "registration"]}, "evidence": ""}
{"sample_id": 943, "db_id": "cs_semester", "final": {"question": "What is the average teaching ability of the most popular professors?", "sql": "SELECT CAST(SUM(teachingability) AS REAL) / COUNT(prof_id) FROM prof WHERE popularity = ( SELECT MAX(popularity) FROM prof )", "source_tables": ["prof"]}, "evidence": "average = AVG(teachingability); most popular professor refers to MAX(popularity);"}
{"sample_id": 867, "db_id": "cs_semester", "final": {"question": "Among the professors who have more than 3 research assistants, how many of them are male?", "sql": "SELECT COUNT(*) FROM ( SELECT T2.prof_id FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.gender = 'Male' GROUP BY T1.prof_id HAVING COUNT(T1.student_id) > 3 )", "source_tables": ["ra", "prof"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; more than 3 research assistant refers to COUNT(student_id) > 3;"}
{"sample_id": 939, "db_id": "cs_semester", "final": {"question": "Among students with low salary, how many of them have a gpa of 3.5?", "sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.gpa = 3.5 AND T1.salary = 'low'", "source_tables": ["student", "ra"]}, "evidence": "low salary refers to salary = 'low';"}
{"sample_id": 909, "db_id": "cs_semester", "final": {"question": "List the courses' IDs and students' IDs who failed to pass the course.", "sql": "SELECT course_id, student_id FROM registration WHERE grade IS NULL OR grade = ''", "source_tables": ["registration"]}, "evidence": "If grade is null or empty, it means that this student fails to pass the course;"}
{"sample_id": 900, "db_id": "cs_semester", "final": {"question": "What are the names of the courses that the students with the lowest intelligence are least satisfied with?", "sql": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.sat = 1 AND T1.intelligence = 1", "source_tables": ["course", "student", "registration"]}, "evidence": "lower intelligence refers to intelligence = 1; sat refers to student's satisfaction degree with the course where least satisfaction refers to sat = 1;"}
{"sample_id": 932, "db_id": "cs_semester", "final": {"question": "List the capability of research postgraduate students with an intellegence level of 4 and above.", "sql": "SELECT T1.capability FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.type = 'RPG' AND T2.intelligence >= 4", "source_tables": ["student", "ra"]}, "evidence": "research postgraduate students refers to type = 'RPG'; intelligence level of 4 and above refers to intelligence > = 4;"}
{"sample_id": 905, "db_id": "cs_semester", "final": {"question": "How many students taking a bachelor's degree received an A in all of the courses that they took?", "sql": "SELECT COUNT(T2.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T2.grade = 'A' AND T1.type = 'UG'", "source_tables": ["student", "registration"]}, "evidence": "bachelor's degree is an undergraduate degree in which type = 'UG'; A refers to an excellent grade in which grade = 'A';"}
{"sample_id": 952, "db_id": "cs_semester", "final": {"question": "Of the students with high salaries, how many took the computer vision course?", "sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN registration AS T2 ON T2.student_id = T1.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.salary = 'high' AND T3.name = 'Computer Vision'", "source_tables": ["registration", "course", "ra"]}, "evidence": "high salaries refers to salary = 'High';"}
{"sample_id": 861, "db_id": "cs_semester", "final": {"question": "How many research assistants of Ogdon Zywicki have an average salary?", "sql": "SELECT COUNT(T1.prof_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.first_name = 'Ogdon' AND T1.salary = 'med' AND T2.last_name = 'Zywicki'", "source_tables": ["ra", "prof"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; average salary refers to salary = 'med';"}
{"sample_id": 854, "db_id": "cs_semester", "final": {"question": "Which course is more difficult, Intro to BlockChain or Computer Network?", "sql": "SELECT name FROM course WHERE name = 'Intro to BlockChain' OR name = 'Computer Network' ORDER BY diff DESC LIMIT 1", "source_tables": ["course"]}, "evidence": "diff refers to difficulty; diff is higher means the course is more difficult;"}
{"sample_id": 889, "db_id": "cs_semester", "final": {"question": "What is the full name of the professor who graduated from an Ivy League School?", "sql": "SELECT first_name, last_name FROM prof WHERE graduate_from IN ( 'Brown University',  'Columbia University',  'Cornell University',  'Dartmouth College',  'Harvard University',  'Princeton University',  'University of Pennsylvania',  'Yale University' )", "source_tables": ["prof"]}, "evidence": "Ivy League school is assembled by 8 universities: Brown University, Columbia University, Cornell University, Dartmouth College, Harvard University, Princeton University, University of Pennsylvania and Yale University;"}
{"sample_id": 879, "db_id": "cs_semester", "final": {"question": "For the professors who advise more than 2 students, which professor has a higher teaching ability? Give the full name.", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, T2.teachingability FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id GROUP BY T1.prof_id HAVING COUNT(student_id) > 2 ) T ORDER BY T.teachingability DESC LIMIT 1", "source_tables": ["ra", "prof"]}, "evidence": "professor advising more than 2 students refers to COUNT(student_id) > 2; higher teachability refers to MAX(teachingability); full name refers to f_name and l_name;"}
{"sample_id": 1006, "db_id": "computer_student", "final": {"question": "Describe the year in program and in phase status for the student with most number in advisor.", "sql": "SELECT T2.yearsInProgram, T2.inPhase FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id GROUP BY T1.p_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["advisedby", "person"]}, "evidence": "student refers to advisedBy.p_id; most number in advisor refers to max(count(p_id_dummy))"}
{"sample_id": 979, "db_id": "computer_student", "final": {"question": "Find the ID of advisor of student ID 80 and state the level of courses taught by him/her.", "sql": "SELECT T1.p_id_dummy, T2.courseLevel FROM advisedBy AS T1 INNER JOIN course AS T2 ON T1.p_id = T2.course_id INNER JOIN taughtBy AS T3 ON T2.course_id = T3.course_id WHERE T1.p_id = 80", "source_tables": ["course", "taughtby", "advisedby"]}, "evidence": "ID of advisor refers to p_id_dummy; student ID 80 refers to advisedBy.p_id = 80; level of courses refers to courseLevel"}
{"sample_id": 968, "db_id": "computer_student", "final": {"question": "How many professors are teaching course ID 18?", "sql": "SELECT COUNT(DISTINCT p_id) FROM taughtBy WHERE course_id = 18", "source_tables": ["taughtby"]}, "evidence": "professors refers to taughtBy.p_id; course ID 18 refers to taughtBy.course_id"}
{"sample_id": 1010, "db_id": "computer_student", "final": {"question": "Mention the person ID of faculty professor who taught course ID 104 and the course level.", "sql": "SELECT T1.p_id, T3.courseLevel FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id WHERE T3.course_id = 104 AND T1.hasPosition <> 0", "source_tables": ["course", "taughtby", "person"]}, "evidence": "person ID refers to person.p_id; faculty professor refers to professor = 1 and hasPosition ! = 0"}
{"sample_id": 1031, "db_id": "computer_student", "final": {"question": "What is the average number of professional or master/undergraduate courses being taught by each professor?", "sql": "SELECT CAST(COUNT(T1.course_id) AS REAL) / COUNT(DISTINCT T2.p_id) FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_500'", "source_tables": ["course", "taughtby"]}, "evidence": "professional or master/undergraduate courses refers to courseLevel = 'Level_500'; average number = divide(count(taughtBy.course_id), count(taughtBy.p_id))"}
{"sample_id": 989, "db_id": "computer_student", "final": {"question": "Please list the IDs of all the faculty employees who teaches a basic or medium undergraduate course.", "sql": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id INNER JOIN person AS T3 ON T3.p_id = T2.p_id WHERE T1.courseLevel = 'Level_300' AND T3.hasPosition = 'Faculty_eme'", "source_tables": ["course", "taughtby", "person"]}, "evidence": "faculty employees refers to hasPosition = 'Faculty_eme'; basic or medium undergraduate course refers to courseLevel = 'Level_300'"}
{"sample_id": 971, "db_id": "computer_student", "final": {"question": "List the ID of all professors who are not faculty member along with the courses taught by him/her.", "sql": "SELECT T2.p_id, T2.course_id FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id WHERE T1.professor = 1 AND T1.hasPosition <> 0", "source_tables": ["taughtby", "person"]}, "evidence": "ID of all professors refers to person.p_id where professor = 1; not faculty member refers to hasPosition = 0; courses refers to taughtBy.course_id"}
{"sample_id": 976, "db_id": "computer_student", "final": {"question": "What level is course 165? List the professors who teach the course.", "sql": "SELECT T1.courseLevel, T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.course_id = 165", "source_tables": ["course", "taughtby"]}, "evidence": "course 165 refers to course_id = 165; professors refers to taughtBy.p_id"}
{"sample_id": 1016, "db_id": "computer_student", "final": {"question": "How many professional or master/graduate courses are there?", "sql": "SELECT COUNT(*) FROM course WHERE courseLevel = 'Level_500'", "source_tables": ["course"]}, "evidence": "professional or master/graduate courses refers to courseLevel = 'Level_500'"}
{"sample_id": 972, "db_id": "computer_student", "final": {"question": "Provide the ID of professors who are teaching high-level or harder undergraduate course.", "sql": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_400'", "source_tables": ["course", "taughtby"]}, "evidence": "ID of professors refers to taughtBy.p_id; high-level or harder undergraduate course refers to courseLevel = 'Level_400'"}
{"sample_id": 999, "db_id": "computer_student", "final": {"question": "In total, all the students in the 3rd year of their program are advised by how many professors?", "sql": "SELECT COUNT(DISTINCT T1.p_id_dummy) FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_3'", "source_tables": ["advisedby", "person"]}, "evidence": "3rd year of their program refers to yearsInProgram = 'Year_3'; professors refers to p_id_dummy"}
{"sample_id": 969, "db_id": "computer_student", "final": {"question": "List all the course IDs for professional or master/graduate courses.", "sql": "SELECT course_id FROM course WHERE courseLevel = 'Level_500'", "source_tables": ["course"]}, "evidence": "professional or master/graduate courses refers to courseLevel = 'Level_500'"}
{"sample_id": 977, "db_id": "computer_student", "final": {"question": "List the ID and years in program for students taught by advisor with ID 5.", "sql": "SELECT T1.p_id, T2.yearsInProgram FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T1.p_id_dummy = 5", "source_tables": ["advisedby", "person"]}, "evidence": "advisor with ID 5 refers to p_id_dummy = 5"}
{"sample_id": 1003, "db_id": "computer_student", "final": {"question": "List down all the person IDs who taught course ID of 18.", "sql": "SELECT p_id FROM taughtBy WHERE course_id = 18", "source_tables": ["taughtby"]}, "evidence": "person IDs refers to taughtBy.p_id; course ID of 18\u00a0 refers to taughtBy.course_id = 18"}
{"sample_id": 1004, "db_id": "computer_student", "final": {"question": "Provide the position status and IDs of professor who advised student ID \"303\".", "sql": "SELECT T2.hasPosition, T1.p_id_dummy FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id_dummy = T2.p_id WHERE T1.p_id = 303", "source_tables": ["advisedby", "person"]}, "evidence": "position status refers to hasPosition; IDs of professor refers to p_id_dummy; student ID \"303\" refers to advisedBy.p_id = 303"}
{"sample_id": 1206, "db_id": "talkingdata", "final": {"question": "Identify by their id all the apps that belong to the game-stress reliever category.", "sql": "SELECT T2.app_id FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'game-stress reliever'", "source_tables": ["label_categories", "app_labels"]}, "evidence": "id refers to device_id;"}
{"sample_id": 1240, "db_id": "talkingdata", "final": {"question": "List all females aged 24 to 26 devices' locations.", "sql": "SELECT T2.longitude, T2.latitude FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T1.\"group\" = 'F24-26' AND T1.gender = 'F'", "source_tables": ["gender_age", "events_relevant"]}, "evidence": "females refers to gender = 'F'; aged 24 to 26 refers to `group` = 'F24-26';"}
{"sample_id": 1174, "db_id": "talkingdata", "final": {"question": "Provide the locations and times of the events of app ID \"8715964299802120000\".", "sql": "SELECT T1.longitude, T1.latitude, T1.timestamp FROM events AS T1 INNER JOIN app_events AS T2 ON T1.event_id = T2.event_id WHERE T2.app_id = 8715964299802120000", "source_tables": ["events", "app_events"]}, "evidence": "locations = longitude, latitude; times of the events refers to timestamp;"}
{"sample_id": 1227, "db_id": "talkingdata", "final": {"question": "How many users belong to the same behavior category as comics?", "sql": "SELECT COUNT(T2.app_id) FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'comics'", "source_tables": ["label_categories", "app_labels"]}, "evidence": "behavior category refers to category; category = 'comics';"}
{"sample_id": 1233, "db_id": "talkingdata", "final": {"question": "Please provide the gender of at least one user who owns an HTC Desire 826 device.", "sql": "SELECT T1.gender FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Desire 826' AND T2.phone_brand = 'HTC'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "HTC Desire 826 refers to phone_brand = 'HTC' AND device_model = 'Desire 826';"}
{"sample_id": 1147, "db_id": "talkingdata", "final": {"question": "Please list all the models of the devices used by a female user.", "sql": "SELECT T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T2.gender = 'F'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "models of the devices refers to device_model; female refers to gender = 'F';"}
{"sample_id": 1085, "db_id": "talkingdata", "final": {"question": "How many app users belong to the category of Securities?", "sql": "SELECT COUNT(T1.app_id) FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T2.label_id = T1.label_id WHERE T2.category = 'Securities'", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1197, "db_id": "talkingdata", "final": {"question": "State the number of users who are under 50 and above 20 use device model of Galaxy Premier.", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age BETWEEN 20 AND 50 AND T2.device_model = 'Galaxy Premier'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "under 50 and above 20 refers to age BTWEEEN 20 AND 50;"}
{"sample_id": 1179, "db_id": "talkingdata", "final": {"question": "Among the HTC users, calculate the percentage of female users who are over 80.", "sql": "SELECT SUM(IIF(T1.gender = 'F' AND T1.age > 80, 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'HTC'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "HTC refers to phone_brand = 'HTC'; percentage = DIVIDE(SUM(gender = 'F' AND age > 80), COUNT(device_id)); female refers to gender = 'F'; over 80 refers to age > 80"}
{"sample_id": 1226, "db_id": "talkingdata", "final": {"question": "Which behavior category does user number 5902120154267990000 belong to?", "sql": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = 5902120154267990000", "source_tables": ["label_categories", "app_labels"]}, "evidence": "behavior category refers to category; number refers to app_id; app_id = 5902120154267990000;"}
{"sample_id": 1156, "db_id": "talkingdata", "final": {"question": "Among the devices on which an event happened on 2016/5/1, how many of them are used by a male user?", "sql": "SELECT COUNT(T1.device_id) FROM events AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T1.timestamp = '2016-05-01' AND T2.gender = 'M'", "source_tables": ["gender_age", "events"]}, "evidence": "on 2016/5/1 refers to timestamp = '2016-05-01'; male refers to gender = 'M';"}
{"sample_id": 1224, "db_id": "talkingdata", "final": {"question": "Which gender owned more of the Galaxy Note 2 device model?", "sql": "SELECT IIF(SUM(IIF(T1.gender = 'M', 1, 0)) - SUM(IIF(T1.gender = 'F', 1, 0)) > 0, 'M', 'F') AS gender FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Galaxy Note 2'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "gender that owned more = SUBTRACT(IF(SUM(gender = 'M'), SUM(gender = 'F'),'M','F'));"}
{"sample_id": 1112, "db_id": "talkingdata", "final": {"question": "What is the brand of the youngest user's device?", "sql": "SELECT device_model FROM phone_brand_device_model2 WHERE device_id IN ( SELECT device_id FROM gender_age WHERE age = ( SELECT MIN(age) FROM gender_age ) )", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "brand of the device refers to phone_brand; youngest user refers to MIN(age);"}
{"sample_id": 1161, "db_id": "talkingdata", "final": {"question": "What is the ratio of the number of app users that belong to the Securities category to the number of app users that belong to the Finance category?", "sql": "SELECT SUM(IIF(T2.category = 'Securities', 1, 0)) / SUM(IIF(T2.category = 'Finance', 1, 0)) AS per FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id", "source_tables": ["label_categories", "app_labels"]}, "evidence": "ratio = DIVIDE(SUM(category = 'Securities'), SUM(category = 'Finance'));"}
{"sample_id": 1043, "db_id": "talkingdata", "final": {"question": "How many active users were there in the event id 2?", "sql": "SELECT COUNT(is_active) FROM app_events WHERE event_id = 2 AND is_active = 1", "source_tables": ["app_events"]}, "evidence": "active users refers to is_active = 1;"}
{"sample_id": 1048, "db_id": "talkingdata", "final": {"question": "How many male users are active in the events held on 5/1/2016?", "sql": "SELECT COUNT(T3.gender) FROM app_events AS T1 INNER JOIN events_relevant AS T2 ON T2.event_id = T1.event_id INNER JOIN gender_age AS T3 ON T3.device_id = T2.device_id WHERE T1.is_active = 1 AND T3.gender = 'M' AND T2.timestamp LIKE '2016-05-01%'", "source_tables": ["gender_age", "events_relevant", "app_events"]}, "evidence": "male refers to gender = 'M'; active refers to is_active = 1; on 5/1/2016 refers to timestamp LIKE '2016-05-01%';"}
{"sample_id": 1104, "db_id": "talkingdata", "final": {"question": "What is the age of the youngest female user of the app?", "sql": "SELECT MIN(age) FROM gender_age WHERE gender = 'F'", "source_tables": ["gender_age"]}, "evidence": "youngest user refers to MIN(age); female refers to gender = 'F';"}
{"sample_id": 1124, "db_id": "talkingdata", "final": {"question": "For the event which happened at 23:55:16 on 2016/5/7, in the location coordinate(113, 28), on what device did it happen? Give the name of the device model.", "sql": "SELECT T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.event_id WHERE T2.longitude = '113' AND T2.latitude = '28' AND T2.timestamp = '2016-05-07 23:55:16'", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "at 23:55:16 on 2016/5/7 refers to timestamp = '2016/5/7 23:55:16'; location coordinate (113, 28) refers to longitude = '113' AND latitude = '28';"}
{"sample_id": 1234, "db_id": "talkingdata", "final": {"question": "What is the percentage of users who are in the same behavior category as \"Academic Information\"?", "sql": "SELECT SUM(IIF(T1.category = 'Academic Information', 1.0, 0)) / COUNT(T2.app_id) AS per FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id", "source_tables": ["label_categories", "app_labels"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(category = 'Academic Information'), COUNT(app_id)), 1.0); behavior category refers to category; category = 'Academic Information';"}
{"sample_id": 1221, "db_id": "talkingdata", "final": {"question": "Please list any five app categories that are related to games, along with their label ID.", "sql": "SELECT category, label_id FROM label_categories WHERE category LIKE '%game%' LIMIT 5", "source_tables": ["label_categories"]}, "evidence": "app categories refers to category; related to games refers to category like '%game%';"}
{"sample_id": 1229, "db_id": "talkingdata", "final": {"question": "How many male users have the log of events at the same longitude of 114?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T2.longitude = 114 AND T1.gender = 'M'", "source_tables": ["gender_age", "events_relevant"]}, "evidence": "male refers to gender = 'M';"}
{"sample_id": 1135, "db_id": "talkingdata", "final": {"question": "How many devices are of the brand vivo?", "sql": "SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE phone_brand = 'vivo'", "source_tables": ["phone_brand_device_model2"]}, "evidence": "brand vivo refers to phone_brand = 'vivo';"}
{"sample_id": 1223, "db_id": "talkingdata", "final": {"question": "What is the percentage of users who experienced event number 6 who have the app installed but do not use the app?", "sql": "SELECT SUM(IIF(is_installed = 1 AND is_active = 0, 1, 0)) / COUNT(app_id) AS perrcent FROM app_events WHERE event_id = 6", "source_tables": ["app_events"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(is_installed = 1 and is_active = 0), COUNT(app_id)), 1.0); event number refers to event_id = 6; installed refers to is_installed = 1; do not use refers to is_active = 0;"}
{"sample_id": 1076, "db_id": "talkingdata", "final": {"question": "How many events in total have happened on the devices in 2016?", "sql": "SELECT COUNT(event_id) FROM \"events\" WHERE SUBSTR(\"timestamp\", 1, 4) = '2016'", "source_tables": ["events"]}, "evidence": "in 2016 refers to `timestamp` LIKE '2016%';"}
{"sample_id": 1231, "db_id": "talkingdata", "final": {"question": "What are the behavior categories that user number -9222198347540750000 belongs to?", "sql": "SELECT T3.category FROM app_all AS T1 INNER JOIN app_labels AS T2 ON T1.app_id = T2.app_id INNER JOIN label_categories AS T3 ON T2.label_id = T3.label_id WHERE T1.app_id = -9222198347540750000", "source_tables": ["app_all", "label_categories", "app_labels"]}, "evidence": "behavior categories refers to category; user number refers to app_id; app_id = -9222198347540750000;"}
{"sample_id": 1202, "db_id": "talkingdata", "final": {"question": "How many different models does the HTC brand have?", "sql": "SELECT COUNT(device_model) FROM phone_brand_device_model2 WHERE phone_brand = 'HTC'", "source_tables": ["phone_brand_device_model2"]}, "evidence": "models refers to device_model; HTC brand refers to phone_brand = 'HTC';"}
{"sample_id": 1193, "db_id": "talkingdata", "final": {"question": "State the category of the label that represented the behavior category of app id 4955831798976240000.", "sql": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = 4955831798976240000", "source_tables": ["label_categories", "app_labels"]}, "evidence": "label that represented the behavior category refers to label_id;"}
{"sample_id": 1071, "db_id": "talkingdata", "final": {"question": "How many app IDs were included under science fiction category?", "sql": "SELECT COUNT(T2.app_id) FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T2.label_id = T1.label_id WHERE T1.category = 'science fiction'", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1195, "db_id": "talkingdata", "final": {"question": "Among the male users, how many users use device model of Desire 820?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Desire 820' AND T1.gender = 'M'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "male refers to gender = 'M';"}
{"sample_id": 1149, "db_id": "talkingdata", "final": {"question": "Among the app users who were not active when event no.2 happened, how many of them belong to the category Property Industry 1.0?", "sql": "SELECT COUNT(T2.app_id) FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id INNER JOIN app_events AS T3 ON T2.app_id = T3.app_id WHERE T3.is_active = 0 AND T1.category = 'Property Industry 1.0' AND T3.event_id = 2", "source_tables": ["label_categories", "app_events", "app_labels"]}, "evidence": "not active refers to is_active = 0; event no. refers to event_id; event_id = 2;"}
{"sample_id": 1053, "db_id": "talkingdata", "final": {"question": "What is the gender of the majority of Vivo phone users?", "sql": "SELECT T.gender FROM ( SELECT T2.gender, COUNT(T2.gender) AS num FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'vivo' GROUP BY T2.gender ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "majority of Vivo phone users refers to MAX(COUNT(phone_brand = 'vivo'));"}
{"sample_id": 1230, "db_id": "talkingdata", "final": {"question": "When did event number 7 happen for user number -8022267440849930000?", "sql": "SELECT T1.timestamp FROM events_relevant AS T1 INNER JOIN app_events AS T2 ON T1.event_id = T2.event_id WHERE T2.app_id = -8022267440849930000 AND T1.event_id = 7", "source_tables": ["events_relevant", "app_events"]}, "evidence": "event number refers to event_id; event_id = 7; user number refers to app_id; app_id = -8022267440849930000;"}
{"sample_id": 1080, "db_id": "talkingdata", "final": {"question": "Among the female users of the devices, how many of them are under 30?", "sql": "SELECT COUNT(device_id) FROM gender_age WHERE age < 30 AND gender = 'F'", "source_tables": ["gender_age"]}, "evidence": "female refers to gender = 'F'; under 30 refers to age < 30;"}
{"sample_id": 1241, "db_id": "talkingdata", "final": {"question": "How many male users have a Galaxy Note 3?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Galaxy Note 3' AND T1.gender = 'M'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "male refers to gender = 'M'; Galaxy Note 3 refers to device_model = 'Galaxy Note 3';"}
{"sample_id": 1173, "db_id": "talkingdata", "final": {"question": "Describe the number of app IDs and location of the event ID \"79641\".", "sql": "SELECT COUNT(T1.app_id), T2.longitude, T2.latitude FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE T1.event_id = 79641 GROUP BY T2.longitude, T2.latitude", "source_tables": ["events", "app_events"]}, "evidence": "location = longitude, latitude;"}
{"sample_id": 1105, "db_id": "talkingdata", "final": {"question": "How many models does the VIVO phone brand released?", "sql": "SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE phone_brand = 'vivo'", "source_tables": ["phone_brand_device_model2"]}, "evidence": "models refers to device_model;"}
{"sample_id": 1172, "db_id": "talkingdata", "final": {"question": "What are the label IDs and app IDs of the Chinese Classical Mythology category?", "sql": "SELECT T1.label_id, T2.app_id FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'Chinese Classical Mythology'", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1236, "db_id": "talkingdata", "final": {"question": "How many OPPO devices are there?", "sql": "SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE phone_brand = 'OPPO'", "source_tables": ["phone_brand_device_model2"]}, "evidence": "OPPO devices refers to phone_brand = 'OPPO';"}
{"sample_id": 1243, "db_id": "talkingdata", "final": {"question": "Which brand is most common among people in their twenties?", "sql": "SELECT T.phone_brand FROM ( SELECT T2.phone_brand, COUNT(T2.phone_brand) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age BETWEEN 20 AND 30 GROUP BY T2.phone_brand ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "brand refers to phone_brand; brand that is most common refers to MAX(COUNT(phone_brand)); twenties refers to age BETWEEN 20 AND 30;"}
{"sample_id": 1077, "db_id": "talkingdata", "final": {"question": "How many events have happened on device no.29182687948017100 in 2016?", "sql": "SELECT COUNT(event_id) FROM \"events\" WHERE SUBSTR(\"timestamp\", 1, 4) = '2016' AND device_id = 29182687948017100", "source_tables": ["events"]}, "evidence": "device no. refers to device_id; device_id = 29182687948017100; in 2016 refers to `timestamp` LIKE '2016%';"}
{"sample_id": 1217, "db_id": "talkingdata", "final": {"question": "Please list any three events that happened on the 1st of May 2016 that have the same latitude of 31.", "sql": "SELECT event_id FROM events WHERE timestamp LIKE '2016-05-01%' AND latitude = 31 LIMIT 3", "source_tables": ["events"]}, "evidence": "on the 1st of May 2016 refers to timestamp like '2016-05-01%';"}
{"sample_id": 1142, "db_id": "talkingdata", "final": {"question": "Please list the app IDs of all the users in the Securities category.", "sql": "SELECT T2.app_id FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'Securities'", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1299, "db_id": "law_episode", "final": {"question": "What roles have not been credited at the end of the episodes?", "sql": "SELECT DISTINCT role FROM Credit WHERE credited = 'false'", "source_tables": ["credit"]}, "evidence": "have not been credited refers to credited = ''"}
{"sample_id": 1258, "db_id": "law_episode", "final": {"question": "How many keywords are there in the episode Disciple?", "sql": "SELECT COUNT(T2.keyword) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Disciple'", "source_tables": ["keyword", "episode"]}, "evidence": "episode Disciple refers to title = 'Disciple'"}
{"sample_id": 1329, "db_id": "law_episode", "final": {"question": "List down the titles of the top 3 episodes, from highest to lowest, in terms of their weighted stars.", "sql": "SELECT T2.title FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.stars BETWEEN 1 AND 10 GROUP BY T2.title ORDER BY CAST(SUM(T1.stars * T1.percent) AS REAL) / 100 DESC LIMIT 3", "source_tables": ["episode", "vote"]}, "evidence": "weighted stars = divide(sum(stars, percent), 100)"}
{"sample_id": 1355, "db_id": "law_episode", "final": {"question": "Who are the actors with a height of over 1.80m in an episode that won an award?", "sql": "SELECT T2.name FROM Award AS T1 INNER JOIN Person AS T2 ON T1.person_id = T2.person_id WHERE T1.result = 'Winner' AND T2.height_meters > 1.80", "source_tables": ["award", "person"]}, "evidence": "who refers to name; a height of over 1.80m refers to height_meters > 1.80; won an award refers to result = 'Winner'"}
{"sample_id": 1281, "db_id": "law_episode", "final": {"question": "Among the episodes that were aired in 1998, how many won an International Monitor Awards?", "sql": "SELECT COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE strftime('%Y', T1.air_date) = '1998' AND T2.organization = 'International Monitor Awards' AND T2.result = 'Winner'", "source_tables": ["award", "episode"]}, "evidence": "aired in 1998 refers to air_date like '1998%'; won refers to result = 'Winner'; International Monitor Awards refers to organization = 'International Monitor Awards'"}
{"sample_id": 1312, "db_id": "law_episode", "final": {"question": "What is the title of the episode with the most nominations?", "sql": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.result = 'Nominee' GROUP BY T2.episode_id ORDER BY COUNT(T1.result) DESC LIMIT 1", "source_tables": ["award", "episode"]}, "evidence": "the most nominations refers to max(count(episode_id where result = 'Nominee'))"}
{"sample_id": 1260, "db_id": "law_episode", "final": {"question": "How many nominations did Law and Order season 9, episode 20 get?", "sql": "SELECT COUNT(T2.award_id) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.series = 'Law and Order' AND T1.season = 9 AND T1.episode = 20", "source_tables": ["award", "episode"]}, "evidence": "Law and Order refers to series = 'Law and Order'"}
{"sample_id": 1290, "db_id": "law_episode", "final": {"question": "What is the title of the episode that has the highest number of crews in the Art Department?", "sql": "SELECT T2.title FROM Credit AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.category = 'Art Department' GROUP BY T2.episode_id ORDER BY COUNT(T1.category) DESC LIMIT 1", "source_tables": ["credit", "episode"]}, "evidence": "the highest number of crews refers to max(count(person_id)); in the Art Department refers to category = 'Art Department'"}
{"sample_id": 1276, "db_id": "law_episode", "final": {"question": "How many people, who were born in Canada, won an award in 1999?", "sql": "SELECT COUNT(T1.person_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.year = 1999 AND T1.birth_country = 'Canada'", "source_tables": ["award", "person"]}, "evidence": "born in Canada refers to birth_country = 'Canada'; in 1999 refers to year = 1999"}
{"sample_id": 1322, "db_id": "law_episode", "final": {"question": "Who was the Law and Order series writer who also won the Television Silver Gavel Award at the American Bar Association Silver Gavel Awards for Media and the Arts for two consecutive years?", "sql": "SELECT t3.name FROM ( SELECT DISTINCT T2.year AS years, T1.name, row_number() OVER (PARTITION BY T1.name ORDER BY T2.year) AS rm FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.award = 'Television' AND T2.award_category = 'Silver Gavel Award' AND T2.series = 'Law and Order' AND T2.result = 'Winner' AND T2.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' ) AS T3 GROUP BY t3.name HAVING COUNT(t3.years - t3.rm) >= 2", "source_tables": ["award", "person"]}, "evidence": "who refers to name; writer refers to role = 'writer'; won refers to result = 'Winner'; the Television refers to award = 'Television'; Silver Gavel Award refers to award_category = 'Silver Gavel Award'; the American Bar Association Silver Gavel Awards for Media and the Arts refers to organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'"}
{"sample_id": 1332, "db_id": "law_episode", "final": {"question": "How many episodes are credited to Jerry Orbach?", "sql": "SELECT COUNT(T2.person_id) FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'Jerry Orbach'", "source_tables": ["credit", "person"]}, "evidence": ""}
{"sample_id": 1340, "db_id": "law_episode", "final": {"question": "What is the episode rating with the most award won?", "sql": "SELECT T1.rating FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.result = 'Winner' GROUP BY T1.episode_id ORDER BY COUNT(T2.award_id) DESC LIMIT 1", "source_tables": ["award", "episode"]}, "evidence": "the most award won refers to max(episode_id where result = 'Winner')"}
{"sample_id": 1279, "db_id": "law_episode", "final": {"question": "What is the percentage of people who gave the \"True North\" episode a 1-star rating?", "sql": "SELECT CAST(SUM(CASE WHEN T2.stars = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'True North' AND T1.episode_id = 'tt0629477'", "source_tables": ["episode", "vote"]}, "evidence": "the \"True North\" episode refers to title = 'True North'; 1-star refers to stars = 1; percentage = divide(count(episode_id where stars = 1), count(episode_id)) * 100% where title = 'True North'"}
{"sample_id": 1278, "db_id": "law_episode", "final": {"question": "What are the keywords of the \"Shield\" episode?", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Shield'", "source_tables": ["keyword", "episode"]}, "evidence": "\"Shield\" episode refers to title = 'Shield'"}
{"sample_id": 1252, "db_id": "law_episode", "final": {"question": "Park Dietz was credited in which role in the episode titled \"Cherished\"?", "sql": "SELECT T2.role FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.title = 'Cherished' AND T3.name = 'Park Dietz' AND T2.credited = 'true'", "source_tables": ["credit", "episode", "person"]}, "evidence": "credited refers to credited = 'true'; titled \"Cherished\" refers to title = 'Cherished'"}
{"sample_id": 1336, "db_id": "law_episode", "final": {"question": "List out director names that received an award along with the episode number.", "sql": "SELECT T3.name, T1.episode_id FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T2.person_id = T3.person_id WHERE T2.role = 'director' AND T2.result = 'Winner'", "source_tables": ["award", "episode", "person"]}, "evidence": "director refers to role = 'director'; received an award refers to result = 'Winner'; episode number refers to episode"}
{"sample_id": 1341, "db_id": "law_episode", "final": {"question": "How many credits have been displayed from episode 1 until 10?", "sql": "SELECT COUNT(T1.person_id) FROM Credit AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.credited = 'true' AND T2.episode BETWEEN 1 AND 10", "source_tables": ["credit", "episode"]}, "evidence": "credit displayed refers to credited = 'true'; from episode 1 until 10 refers to episode > = 1 AND episode < = 10"}
{"sample_id": 1295, "db_id": "law_episode", "final": {"question": "List the names of all the cast members in the series.", "sql": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.category = 'Cast'", "source_tables": ["credit", "person"]}, "evidence": "cast member refers to category = 'Cast'"}
{"sample_id": 1311, "db_id": "law_episode", "final": {"question": "What role does the tallest person play?", "sql": "SELECT T2.role FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.person_id = T2.person_id INNER JOIN Award AS T3 ON T2.episode_id = T3.episode_id ORDER BY T1.height_meters DESC LIMIT 1", "source_tables": ["credit", "award", "person"]}, "evidence": "the tallest refers to max(height_meters)"}
{"sample_id": 1345, "db_id": "law_episode", "final": {"question": "How many winners have been awarded a Television award by the \"American Bar Association Silver Gavel Awards for Media and the Arts\"?", "sql": "SELECT COUNT(award_id) FROM Award WHERE result = 'Winner' AND award = 'Television' AND organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'", "source_tables": ["award"]}, "evidence": "winner refers to result = 'Winner'; Television award refers to award = 'Television'; the \"American Bar Association Silver Gavel Awards for Media and the Arts\" refers to organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'"}
{"sample_id": 1298, "db_id": "law_episode", "final": {"question": "How many episodes have not won any Law & Order series awards?", "sql": "SELECT COUNT(award_id) FROM Award WHERE Result = 'Nominee'", "source_tables": ["award"]}, "evidence": "have not won any award refers to Result = 'Nominee'"}
{"sample_id": 1316, "db_id": "law_episode", "final": {"question": "What percentage of people have worked on the True North episode as additional crew?", "sql": "SELECT CAST(SUM(CASE WHEN T2.role = 'Additional Crew' THEN 1 ELSE 0 END) AS REAL ) * 100 / COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'True North'", "source_tables": ["credit", "episode"]}, "evidence": "the True North episode refers to title = 'True North'; additional crew refers to role = 'Additional Crew'; percentage = divide(count(episode_id where role = 'Additional Crew'), count(episode_id)) * 100% where title = 'True North'"}
{"sample_id": 1303, "db_id": "law_episode", "final": {"question": "What is the title of the episodes that were least enjoyed?", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 1", "source_tables": ["episode", "vote"]}, "evidence": "least enjoyed refers to stars = 1"}
{"sample_id": 1331, "db_id": "law_episode", "final": {"question": "How many people from Canada are nominated for an award?", "sql": "SELECT COUNT(T1.person_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T1.birth_country = 'Canada'", "source_tables": ["award", "person"]}, "evidence": "from Canada refers to birth_country = Canada; nominated refers to award is NOT NULL"}
{"sample_id": 1393, "db_id": "synthea", "final": {"question": "What is the most common condition among the female Americans?", "sql": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.gender = 'F' AND T1.ethnicity = 'american' GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1", "source_tables": ["patients", "conditions"]}, "evidence": "the most common condition refers to MAX(COUNT(DESCRIPTION)); among the female Americans refer to PATIENT where gender = 'F' and ethnicity = 'american';"}
{"sample_id": 1531, "db_id": "synthea", "final": {"question": "Indicate the care plan needed for the patient living at 179 Sydni Roads, Taunton, MA 02780 US.", "sql": "SELECT T1.DESCRIPTION FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.address = '179 Sydni Roads Taunton MA 02780 US'", "source_tables": ["careplans", "patients"]}, "evidence": "living at 179 Sydni Roads, Taunton, MA 02780 US refers to address = '179 Sydni Roads Taunton MA 02780 US';"}
{"sample_id": 1383, "db_id": "synthea", "final": {"question": "What kind of condition did Keven Kuhn have from 2016/9/24 to 2016/10/10? Describe the condition.", "sql": "SELECT T2.description FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Keven' AND T1.last = 'Kuhn' AND T2.start = '2016-09-24' AND T2.stop = '2016-10-10'", "source_tables": ["patients", "conditions"]}, "evidence": "kind of condition refers to DESCRIPTION from conditions;\u00a0from 2016/9/24 to 2016/10/10 refers to START = '2016-09-24' and STOP = '2016-10-10';"}
{"sample_id": 1400, "db_id": "synthea", "final": {"question": "What is the most common condition among the patients who received influenza seasonal injectable preservative free immunization?", "sql": "SELECT T2.DESCRIPTION FROM immunizations AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free' GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1", "source_tables": ["immunizations", "conditions"]}, "evidence": "the most common condition refers to MAX(DESCRIPTION) from conditions; patients who received influenza seasonal injectable preservative free immunization refer to PATIENT where DESCRIPTION = 'Influenza seasonal injectable preservative free' from immunizations;"}
{"sample_id": 1462, "db_id": "synthea", "final": {"question": "How many times was Elly Koss given a care plan between 1/11/2009 and 10/23/2010?", "sql": "SELECT COUNT(T2.PATIENT) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.START BETWEEN '2009-01-11' AND '2010-10-23'", "source_tables": ["careplans", "patients"]}, "evidence": "between 1/11/2009 and 10/23/2010 refers to careplans.START between '2009-11-1' and '2010-10-23';"}
{"sample_id": 1419, "db_id": "synthea", "final": {"question": "Provide the number of encounters for Major D'Amore.", "sql": "SELECT COUNT(T2.ID) FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Major' AND T1.last = 'D''Amore'", "source_tables": ["patients", "encounters"]}, "evidence": ""}
{"sample_id": 1487, "db_id": "synthea", "final": {"question": "What is the percentage of the most common conditions for patients age 60 and above?", "sql": "SELECT CAST(SUM(CASE WHEN T5.DESCRIPTION = T3.DESCRIPTION THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.patient) FROM ( SELECT T2.DESCRIPTION, T1.patient FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE ROUND((strftime('%J', T2.START) - strftime('%J', T1.birthdate)) / 365) > 60 GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1 ) AS T3 INNER JOIN patients AS T4 ON T3.patient = T4.patient INNER JOIN conditions AS T5 ON T4.patient = T5.PATIENT WHERE ROUND((strftime('%J', T5.START) - strftime('%J', T4.birthdate)) / 365) > 60", "source_tables": ["patients", "conditions"]}, "evidence": "most common condition refers to MAX(COUNT(conditions.DESCRIPTION)); age 60 and above refers to SUBTRACT(conditions.START, birthdate) > 60; percentage = MULTIPLY(DIVIDE(SUM(patients.patient WHERE MAX(COUNT(conditions.DESCRIPTION)) AND SUBTRACT(conditions.START, birthdate) > 60))), COUNT(patients.patient WHERE MAX(COUNT(conditions.DESCRIPTION)), 10);"}
{"sample_id": 1375, "db_id": "synthea", "final": {"question": "Why did Mrs. Annabelle Pouros take leucovorin 100 mg injection on 1970/12/19? State the reason.", "sql": "SELECT T2.reasondescription FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mrs.' AND T1.first = 'Annabelle' AND T1.last = 'Pouros' AND T2.start = '1970-12-19' AND T2.description = 'Leucovorin 100 MG Injection'", "source_tables": ["medications", "patients"]}, "evidence": "reason why take leucovorin 100 mg injection refers to REASONDESCRIPTION where DESCRIPTION = 'Leucovorin 100 MG Injection'; on 1970/12/19 refers to START = '1970-12-19';"}
{"sample_id": 1535, "db_id": "synthea", "final": {"question": "Provide the social security number of the patient with the highest systolic blood pressure.", "sql": "SELECT T2.ssn FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Systolic Blood Pressure' ORDER BY T1.VALUE DESC LIMIT 1", "source_tables": ["patients", "observations"]}, "evidence": "social security number refers to ssn; highest systolic blood pressure refers to MAX(observations.VALUE WHERE observations.DESCRIPTION = 'Systolic Blood Pressure');"}
{"sample_id": 1431, "db_id": "synthea", "final": {"question": "Among the immunizations in 2017, calculate the percentage of patients who received the Influenza seasonal injectable preservative free. Among them, how many patients are English?", "sql": "SELECT CAST(SUM(CASE WHEN T2.DESCRIPTION = 'Influenza seasonal injectable preservative free' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.patient), SUM(CASE WHEN T1.ethnicity = 'english' THEN 1 ELSE 0 END) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE strftime('%Y', T2.DATE) = '2017'", "source_tables": ["immunizations", "patients"]}, "evidence": "DIVIDE(COUNT(PATIENT when DESCRIPTION = 'Influenza seasonal injectable preservative free'), COUNT(PATIENT)) as percentage where strftime('%Y', 2017); English refers ethnicity = 'english';"}
{"sample_id": 1512, "db_id": "synthea", "final": {"question": "List out the stop date of the care plan of dead patients.", "sql": "SELECT DISTINCT T1.STOP FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.deathdate IS NOT NULL AND T1.STOP IS NOT NULL", "source_tables": ["careplans", "patients"]}, "evidence": "stop date of the care plan refers to careplans.STOP; dead patients refers to deathdate is not null;"}
{"sample_id": 1467, "db_id": "synthea", "final": {"question": "How long did Berry Keebler take the Acetaminophen 160 MG when he was admitted due to acute bronchitis?", "sql": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS takenDays FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Berry' AND T1.last = 'Keebler' AND T2.REASONDESCRIPTION = 'Acute bronchitis (disorder)' AND T2.DESCRIPTION = 'Acetaminophen 160 MG'", "source_tables": ["medications", "patients"]}, "evidence": "how long = SUBTRACT(medications.STOP, medications.START); Acetaminophen 160 MG refers to medications.DESCRIPTION = 'Acetaminophen 160 MG'; acute bronchitis refers to medications.REASONDESCRIPTION = 'Acute bronchitis (disorder)';"}
{"sample_id": 1439, "db_id": "synthea", "final": {"question": "How many of the male patients are allergic to house dust mites?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'House dust mite allergy' AND T1.gender = 'M'", "source_tables": ["allergies", "patients"]}, "evidence": "male patients refer to PATIENT where gender = 'M'; allergic to house dust mites refers to allergies where DESCRIPTION = 'House dust mite allergy';"}
{"sample_id": 1506, "db_id": "synthea", "final": {"question": "State the description of the reason why Angelo Buckridge needs the care plan.", "sql": "SELECT DISTINCT T1.REASONDESCRIPTION FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.first = 'Angelo' AND T2.last = 'Buckridge'", "source_tables": ["careplans", "patients"]}, "evidence": "description of the reason of the care plan refers to careplans.REASONDESCRIPTION;"}
{"sample_id": 1541, "db_id": "synthea", "final": {"question": "Among the male patients, list down 5 birth dates of patients taking the medication \"Penicillin V Potassium 250 MG\".", "sql": "SELECT DISTINCT T2.birthdate FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Penicillin V Potassium 250 MG' AND T2.gender = 'M' LIMIT 5", "source_tables": ["medications", "patients"]}, "evidence": "male patients refers to gender = 'M'; Penicillin V Potassium 250 MG refers to medications.DESCRIPTION = 'Penicillin V Potassium 250 MG';"}
{"sample_id": 1391, "db_id": "synthea", "final": {"question": "What is the most common allergy among patients?", "sql": "SELECT DESCRIPTION FROM allergies GROUP BY DESCRIPTION ORDER BY COUNT(DESCRIPTION) DESC LIMIT 1", "source_tables": ["allergies"]}, "evidence": "the most common allergy refers to MAX(COUNT(DESCRIPTION)) from allergies;"}
{"sample_id": 1414, "db_id": "synthea", "final": {"question": "Among the patients that died, what is the condition of the oldest patient?", "sql": "SELECT T1.DESCRIPTION FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.deathdate IS NOT NULL ORDER BY strftime('%Y', T2.deathdate) - strftime('%Y', T2.birthdate) DESC LIMIT 1", "source_tables": ["patients", "conditions"]}, "evidence": "if deathdate is not null, it means this patient died; condition refers to DESCRIPTION from conditions; the oldest patient refers to MAX(SUBTRACT(strftime('%Y', deathdate), strftime('%Y', birthdate)));"}
{"sample_id": 1427, "db_id": "synthea", "final": {"question": "Provide medications received by patients with an allergy to mould on 6th June 2016.", "sql": "SELECT T2.DESCRIPTION FROM allergies AS T1 INNER JOIN medications AS T2 ON T1.PATIENT = T2.PATIENT WHERE T1.START = '6/6/16' AND T1.DESCRIPTION = 'Allergy to mould'", "source_tables": ["allergies", "medications"]}, "evidence": "medications refers to DESCRIPTION from medications; allergy to mould refers to allergies where DESCRIPTION = 'Allergy to mould'; on 6th June 2016 refers to START = '6/6/16';"}
{"sample_id": 1508, "db_id": "synthea", "final": {"question": "What are the medical encounter ids of patients who were born in Pembroke MA US?", "sql": "SELECT DISTINCT T1.ENCOUNTER FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.birthplace = 'Pembroke MA US'", "source_tables": ["careplans", "patients"]}, "evidence": "medical encounter ids careplans.ID; born in Pembroke MA US refers to birthplace = 'Pembroke MA US';"}
{"sample_id": 1510, "db_id": "synthea", "final": {"question": "How many white patients have the reason code of 10509002?", "sql": "SELECT COUNT(DISTINCT T1.PATIENT) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.race = 'white' AND T1.REASONCODE = '10509002'", "source_tables": ["careplans", "patients"]}, "evidence": "white refers to race = 'white'; reason code of 10509002 refers to careplans.REASONCODE = '10509002';"}
{"sample_id": 1469, "db_id": "synthea", "final": {"question": "Tell me the reason for Lavelle Vandervort's encounter on 11/20/2013?", "sql": "SELECT T2.REASONDESCRIPTION FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T2.DATE = '2013-11-20' AND T1.first = 'Lavelle' AND T1.last = 'Vandervort'", "source_tables": ["patients", "encounters"]}, "evidence": "reason for encounter refers to encounters.REASONDESCRIPTION; on 11/20/2013 refers to encounters.DATE = '2013-11-20';"}
{"sample_id": 1413, "db_id": "synthea", "final": {"question": "Who is the patient involved in the care plan with code 311791003?", "sql": "SELECT T2.first, T2.last FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.CODE = 315043002", "source_tables": ["careplans", "patients"]}, "evidence": ""}
{"sample_id": 1456, "db_id": "synthea", "final": {"question": "How many patients immunized against 'monovalent rotavirus' ceased their care plan on 11/23/2013?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM careplans AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'rotavirus  monovalent' AND T1.STOP = '2013-11-23'", "source_tables": ["immunizations", "careplans"]}, "evidence": "immunized against monovalent rotavirus refers to immunizations.DESCRIPTION = 'rotavirus monovalent'; ceased their care plan on 11/23/2013 refers to careplans.STOP = '2013-11-23';"}
{"sample_id": 1412, "db_id": "synthea", "final": {"question": "Give the social security number of the female Irish patient allergic to grass pollen.", "sql": "SELECT T2.ssn FROM allergies AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Allergy to grass pollen' AND T2.ethnicity = 'irish' AND T2.gender = 'F'", "source_tables": ["allergies", "patients"]}, "evidence": "social security number refers to ssn; female refers to gender = 'F'; Irish refers to ethnicity = 'irish'; allergic to grass pollen refers to allergies where DESCRIPTION = 'Allergy to grass pollen';"}
{"sample_id": 1397, "db_id": "synthea", "final": {"question": "How many Black patients were immunized with DTaP in 2013?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T1.race = 'black' AND T2.DESCRIPTION = 'DTaP' AND strftime('%Y', T2.DATE) = '2013'", "source_tables": ["immunizations", "patients"]}, "evidence": "Black patients refer to patient where race = 'black'; immunized with DTaP refers to DESCRIPTION = 'DTaP' from immunizations; in 2013 refers to DATE like '2013%';"}
{"sample_id": 1471, "db_id": "synthea", "final": {"question": "What is the social security number and address of the patient who encountered viral sinusitis symptoms on 6/13/2008?", "sql": "SELECT T1.ssn, T1.address FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T2.DATE = '2008-06-13' AND T2.REASONDESCRIPTION = 'Viral sinusitis (disorder)' AND T2.DESCRIPTION = 'Encounter for symptom'", "source_tables": ["patients", "encounters"]}, "evidence": "social security number refers to ssn; encountered viral sinusitis refers to encounters.REASONDESCRIPTION = 'Viral sinusitis (disorder)'; on 6/13/2008 refers to encounters.DATE = '2008-06-13';"}
{"sample_id": 1522, "db_id": "synthea", "final": {"question": "Which conditions the patient has when receiving the IPV immunization?", "sql": "SELECT DISTINCT T2.DESCRIPTION FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT INNER JOIN immunizations AS T3 ON T1.patient = T3.PATIENT WHERE T3.DESCRIPTION = 'IPV'", "source_tables": ["immunizations", "patients", "conditions"]}, "evidence": "IPV immunization refers to immunizations.DESCRIPTION = 'IPV';"}
{"sample_id": 1536, "db_id": "synthea", "final": {"question": "What is the care plan description of the prevalent disease with the highest prevalence percentage?", "sql": "SELECT T4.DESCRIPTION FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON T2.DESCRIPTION = T1.ITEM INNER JOIN encounters AS T3 ON T2.ENCOUNTER = T3.ID INNER JOIN careplans AS T4 ON T4.ENCOUNTER = T3.ID ORDER BY T1.\"PREVALENCE PERCENTAGE\" DESC LIMIT 1", "source_tables": ["careplans", "encounters", "all_prevalences", "conditions"]}, "evidence": "highest prevalence percentage refers to MAX(PREVALENCE PERCENTAGE);"}
{"sample_id": 1398, "db_id": "synthea", "final": {"question": "How many immunizations did the patient with the most prevalent condition that started recently get?", "sql": "SELECT COUNT(T2.patient) FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON lower(T1.ITEM) = lower(T2.DESCRIPTION) INNER JOIN immunizations AS T3 ON T2.PATIENT = T3.PATIENT GROUP BY T2.PATIENT ORDER BY T2.START DESC, T1.\"PREVALENCE RATE\" DESC LIMIT 1", "source_tables": ["immunizations", "all_prevalences", "conditions"]}, "evidence": "patient with the most prevalent condition refers to patient where MAX(PREVALENCE RATE); started recently refers to MAX(START);"}
{"sample_id": 1369, "db_id": "synthea", "final": {"question": "What was the condition of Elly Koss on 2009/1/8?", "sql": "SELECT T2.description FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.START = '2009-01-08'", "source_tables": ["patients", "conditions"]}, "evidence": "condition on 2009/1/8 refers to DESCRIPTION from conditions where START = '2009-01-08';"}
{"sample_id": 1507, "db_id": "synthea", "final": {"question": "Mention the description of the care plan of American patients.", "sql": "SELECT DISTINCT T1.DESCRIPTION FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.ethnicity = 'american'", "source_tables": ["careplans", "patients"]}, "evidence": "American refers to ethnicity = 'american';"}
{"sample_id": 1387, "db_id": "synthea", "final": {"question": "What is the id of the patient who has the longest allergy period?", "sql": "SELECT PATIENT FROM allergies WHERE STOP IS NOT NULL GROUP BY PATIENT ORDER BY CASE WHEN SUBSTR(STOP, -2, 1) != '9' THEN SUBSTR(STOP, LENGTH(STOP) - 1) + 2000 END - CASE WHEN SUBSTR(START, -2, 1) = '9' THEN SUBSTR(START, LENGTH(START) - 1) + 1900 ELSE SUBSTR(START, LENGTH(START) - 1) + 2000 END LIMIT 1", "source_tables": ["allergies"]}, "evidence": "id of the patient refers to PATIENT from allergies where STOP is not null; the longest allergy period refers to MAX(SUBTRACT((SUBSTR(STOP, - 2, 1)! = '9' then substr(STOP, length(STOP) - 1) + 2000 end), (SUBSTR(START, - 2, 1) = '9' then substr(START, length(START) - 1) + 1900 else substr(START, length(START) - 1) + 2000 end)));\n"}
{"sample_id": 1384, "db_id": "synthea", "final": {"question": "When did Mrs. Ira Deckow have the standard pregnancy test?", "sql": "SELECT T2.date FROM patients AS T1 INNER JOIN procedures AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mrs.' AND T1.first = 'Ira' AND T1.last = 'Deckow' AND T2.description = 'Standard pregnancy test'", "source_tables": ["patients", "procedures"]}, "evidence": "standard pregnancy test refers to DESCRIPTION = 'Standard pregnancy test' from procedures;"}
{"sample_id": 1473, "db_id": "synthea", "final": {"question": "How many patients with shellfish allergies died when they were under 12 years old? Please give their full names.", "sql": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Shellfish allergy' AND CAST((strftime('%J', T1.deathdate) - strftime('%J', T1.birthdate)) AS REAL) / 365 < 12", "source_tables": ["allergies", "patients"]}, "evidence": "shellfish allergies refers to allergies.DESCRIPTION = 'Shellfish allergy'; died under 12 years old = DIVIDE(SUBTRACT(julianday(patients.deathdate), julianday(patients.birthdate)), 365) < 12; full names = first, last;"}
{"sample_id": 1394, "db_id": "synthea", "final": {"question": "Among the patients that started taking Ibuprofen 200mg Oral Tablet in 2016, how many Dominican patients stopped taking the medicine after exactly one month?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Ibuprofen 200 MG Oral Tablet' AND T1.ethnicity = 'dominican' AND strftime('%Y', T2.START) = '2016' AND strftime('%m', T2.STOP) - strftime('%m', T2.START) = 1", "source_tables": ["medications", "patients"]}, "evidence": "Ibuprofen 200mg Oral Tablet refers to DESCRIPTION = 'Ibuprofen 200 MG Oral Tablet' from medications; started in 2016 refers to START like '2016%'; Dominican patients refer to ethnicity = 'dominican'; stopped taking the medicine after exactly one month refers to SUBTRACT(strftime('%m', STOP), strftime('%m', START)) = 1;"}
{"sample_id": 1539, "db_id": "synthea", "final": {"question": "List 5 patients' name that need medication due to streptococcal sore throat disorder.", "sql": "SELECT DISTINCT T2.first, T2.last FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.REASONDESCRIPTION = 'Streptococcal sore throat (disorder)' LIMIT 5", "source_tables": ["medications", "patients"]}, "evidence": "patients name = first, last; streptococcal sore throat disorder refers to medications.REASONDESCRIPTION = 'Streptococcal sore throat (disorder)';"}
{"sample_id": 1409, "db_id": "synthea", "final": {"question": "What is the total number of Asian patients who are allergic to peanuts?", "sql": "SELECT COUNT(T2.patient) FROM allergies AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Allergy to peanuts' AND T2.race = 'asian'", "source_tables": ["allergies", "patients"]}, "evidence": "Asian refers to race like 'asian%'; allergic to peanuts refers to allergies where DESCRIPTION = 'Allergy to peanuts'; \n"}
{"sample_id": 1625, "db_id": "car_retails", "final": {"question": "Who is the sales representitive of Muscle Machine Inc? Please give the employee's full name.", "sql": "SELECT t2.firstName, t2.lastName FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.customerName = 'Muscle Machine Inc'", "source_tables": ["customers", "employees"]}, "evidence": "Sales representative refers to jobTitle = 'Sales Rep'; Muscle Machine Inc is name of customer;"}
{"sample_id": 1593, "db_id": "car_retails", "final": {"question": "Who is the sales agent of the customer who has made the highest payment? Include the full names of employee and his/her supervisor.", "sql": "SELECT T1.firstName, T1.lastName, T1.reportsTo FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber INNER JOIN payments AS T3 ON T2.customerNumber = T3.customerNumber ORDER BY T3.amount DESC LIMIT 1", "source_tables": ["customers", "payments", "employees"]}, "evidence": "payment refers to amount; full name = firstName+lastName; supervisor refers to reportsTO; 'reportsTO' is the leader of the 'employeeNumber';"}
{"sample_id": 1578, "db_id": "car_retails", "final": {"question": "How many Australian customers who have credit line under 220000?", "sql": "SELECT COUNT(creditLimit) FROM customers WHERE creditLimit < 220000 AND country = 'Australia'", "source_tables": ["customers"]}, "evidence": "Australian is a nationality of country = 'Australia'; credit line refers to creditLimit; creditLimit < 220000;"}
{"sample_id": 1604, "db_id": "car_retails", "final": {"question": "What is the full address of the office where the employee who is a sales representative for the customer whose business is located in the city of New York works?", "sql": "SELECT T2.addressLine1, T2.addressLine2 FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber INNER JOIN offices AS T3 ON T1.officeCode = T3.officeCode WHERE T2.city = 'NYC' AND T1.jobTitle = 'Sales Rep'", "source_tables": ["customers", "employees", "offices"]}, "evidence": "full address = addressLine1 + addressLine2; NYC is a shortname of New York City."}
{"sample_id": 1563, "db_id": "car_retails", "final": {"question": "Please calculate the average total price of orders from Exoto Designs Vendor in 2005.", "sql": "SELECT SUM(T2.quantityOrdered * T2.priceEach) / COUNT(T3.orderNumber) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber WHERE T1.productVendor = 'Exoto Designs' AND STRFTIME('%Y', T3.orderDate) = '2005'", "source_tables": ["products", "orderdetails", "orders"]}, "evidence": "average total price = DIVIDE(SUM(MULTIPLY(quantityOrdered, priceEach))), COUNT(orderNumber)); year(orderDate) = '2005';"}
{"sample_id": 1642, "db_id": "car_retails", "final": {"question": "Which is the most ordered quantity product? What is its expected profit margin per piece?", "sql": "SELECT productName, MSRP - buyPrice FROM products WHERE productCode = ( SELECT productCode FROM orderdetails ORDER BY quantityOrdered DESC LIMIT 1 )", "source_tables": ["products", "orderdetails"]}, "evidence": "The most ordered quantity product refers to productName where Max(quantityOrdered); SUBTRACT(MSRP, buyPrice);"}
{"sample_id": 1552, "db_id": "car_retails", "final": {"question": "How many checks were issued by Euro+ Shopping Channel in the year 2004?", "sql": "SELECT COUNT(T1.checkNumber) FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE customerName = 'Euro+ Shopping Channel' AND STRFTIME('%Y', T1.paymentDate) = '2004'", "source_tables": ["customers", "payments"]}, "evidence": "Euro+ Shopping Channel is a customer name; year(paymentDate) = '2004';"}
{"sample_id": 1592, "db_id": "car_retails", "final": {"question": "What is the total value of shipped vintage car orders from 2003-2004?", "sql": "SELECT SUM(T2.priceEach * T2.quantityOrdered) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber WHERE T3.status = 'Shipped' AND T3.orderDate BETWEEN '2003-01-01' AND '2004-12-31'", "source_tables": ["products", "orderdetails", "orders"]}, "evidence": "total value = SUM(MULTIPLY(quantityOrdered, priceEach)); shipped orders refers to status = 'Shipped'; vintage car is a product line; year(orderDate) between 2003 and 2004;"}
{"sample_id": 1630, "db_id": "car_retails", "final": {"question": "How many sales representitives are based in the offices in the USA?", "sql": "SELECT COUNT(t1.employeeNumber) FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t2.country = 'USA' AND t1.jobTitle = 'Sales Rep'", "source_tables": ["employees", "offices"]}, "evidence": "Sales representative refers to jobTitle = 'Sales Rep'; country = 'USA';"}
{"sample_id": 1590, "db_id": "car_retails", "final": {"question": "Between 8/1/2003 and 8/30/2004, how many checks were issued by Mini Gifts Distributors Ltd.? Please list their check numbers.", "sql": "SELECT T1.checkNumber FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.paymentDate >= '2003-08-01' AND T1.paymentDate <= '2004-08-30' AND T2.customerName = 'Mini Gifts Distributors Ltd.'", "source_tables": ["customers", "payments"]}, "evidence": "paymentDate BETWEEN '2003-08-01' AND '2004-08-30'; Mini Gifts Distributors Ltd. Is a customer name;"}
{"sample_id": 1597, "db_id": "car_retails", "final": {"question": "What is the phone number of all companies where the last name of the contact person starts with the letter M and are not from Germany?", "sql": "SELECT phone FROM customers WHERE contactLastName LIKE 'M%' AND country != 'Germany'", "source_tables": ["customers"]}, "evidence": "last name of contact person starts with M refers to lastName LIKE 'M%'; Germany is a country; not from Germany refers to country<>'Germany';"}
{"sample_id": 1659, "db_id": "car_retails", "final": {"question": "For Which order was the most profitable, please list the customer name of the order and the profit of the order.", "sql": "SELECT t3.customerName, (t1.priceEach - t4.buyPrice) * t1.quantityOrdered FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber INNER JOIN products AS t4 ON t1.productCode = t4.productCode GROUP BY t3.customerName, t1.priceEach, t4.buyPrice, t1.quantityOrdered ORDER BY (t1.priceEach - t4.buyPrice) * t1.quantityOrdered DESC LIMIT 1", "source_tables": ["products", "customers", "orderdetails", "orders"]}, "evidence": "Most profitable order can be computed as MAX(MULTIPLY(quantityOrdered, SUBTRACT(priceEach, buyPrice))."}
{"sample_id": 1548, "db_id": "car_retails", "final": {"question": "How many employees are there in Sydney?", "sql": "SELECT COUNT(employeeNumber) FROM employees WHERE officeCode = ( SELECT officeCode FROM offices WHERE city = 'Sydney' )", "source_tables": ["employees", "offices"]}, "evidence": "sales agent and sales representative are synonyms; Sydney is a city;"}
{"sample_id": 1549, "db_id": "car_retails", "final": {"question": "Which sales representatives in New York city whose leader is Anthony Bow with the employee number is 1143? Indicate their employee numbers.", "sql": "SELECT T1.employeeNumber FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T1.reportsTo = 1143 AND T2.city = 'NYC'", "source_tables": ["employees", "offices"]}, "evidence": "reportsTO' is the leader of the 'employeeNumber';"}
{"sample_id": 1546, "db_id": "car_retails", "final": {"question": "Who is the sales agent of the distinct customer who paid the highest amount in the year 2004?", "sql": "SELECT DISTINCT T3.lastName, T3.firstName FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber INNER JOIN employees AS T3 ON T2.salesRepEmployeeNumber = T3.employeeNumber WHERE STRFTIME('%Y', T1.paymentDate) = '2004' ORDER BY T1.amount DESC LIMIT 1", "source_tables": ["customers", "payments", "employees"]}, "evidence": ""}
{"sample_id": 1656, "db_id": "car_retails", "final": {"question": "When was the product with the highest unit price shipped?", "sql": "SELECT t1.shippedDate FROM orders AS t1 INNER JOIN orderdetails AS t2 ON t1.orderNumber = t2.orderNumber ORDER BY t2.priceEach DESC LIMIT 1", "source_tables": ["orderdetails", "orders"]}, "evidence": "The highest unit price refers to MAX(priceEach); when shipped refers to shippedDate;"}
{"sample_id": 1584, "db_id": "car_retails", "final": {"question": "List out full name and email of employees who are working in Paris?", "sql": "SELECT T1.firstName, T1.lastName, T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Paris'", "source_tables": ["employees", "offices"]}, "evidence": "full name = firstName+LastName; Paris is a city;"}
{"sample_id": 1633, "db_id": "car_retails", "final": {"question": "What is the total price of the order made by Cruz & Sons Co. on 2003/3/3?", "sql": "SELECT SUM(t1.priceEach * t1.quantityOrdered) FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber WHERE t3.customerName = 'Cruz & Sons Co.' AND t2.orderDate = '2003-03-03'", "source_tables": ["customers", "orderdetails", "orders"]}, "evidence": "SUM(MULTIPLY(quantityOrdered, priceEach)) where orderDate = '2003-03-03'; customerName = 'Cruz & Sons Co.'"}
{"sample_id": 1600, "db_id": "car_retails", "final": {"question": "How many customers with a canceled shipment have a credit limit greater than 115,000?", "sql": "SELECT COUNT(T1.customerNumber) FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber WHERE T2.status = 'Cancelled' AND T1.creditLimit > 115000", "source_tables": ["customers", "orders"]}, "evidence": "cancelled shipment refers to status = 'cancelled'; creditLimit > 115000;"}
{"sample_id": 1641, "db_id": "car_retails", "final": {"question": "Find the customer who made the highest payment in 2005.", "sql": "SELECT t2.customerName FROM payments AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE STRFTIME('%Y', t1.paymentDate) = '2005' GROUP BY t2.customerNumber, t2.customerName ORDER BY SUM(t1.amount) DESC LIMIT 1", "source_tables": ["customers", "payments"]}, "evidence": "The highest payment refers to max(amount); 2005 refers to year(paymentDate);"}
{"sample_id": 1650, "db_id": "car_retails", "final": {"question": "Calculate the actual profit for order number 10100.", "sql": "SELECT SUM((t1.priceEach - t2.buyPrice) * t1.quantityOrdered) FROM orderdetails AS t1 INNER JOIN products AS t2 ON t1.productCode = t2.productCode WHERE t1.orderNumber = '10100'", "source_tables": ["products", "orderdetails"]}, "evidence": "SUM(MULTIPLY(quantityOrdered (SUBTRACT (priceEach, buyPrice));"}
{"sample_id": 1617, "db_id": "car_retails", "final": {"question": "Where was the order No. 10383 shipped to? Show me the address.", "sql": "SELECT t2.addressLine1, t2.addressLine2 FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.orderNumber = '10383'", "source_tables": ["customers", "orders"]}, "evidence": "Address comprises addressLine1 and addressLine2;"}
{"sample_id": 1653, "db_id": "car_retails", "final": {"question": "Please list the top three product names with the highest unit price.", "sql": "SELECT t1.productName FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode ORDER BY t2.priceEach DESC LIMIT 3", "source_tables": ["products", "orderdetails"]}, "evidence": "The highest unit price refers to MAX(priceEach)"}
{"sample_id": 1652, "db_id": "car_retails", "final": {"question": "What is the total price of the order 10100?", "sql": "SELECT SUM(t.priceEach * t.quantityOrdered) FROM orderdetails t WHERE t.orderNumber = '10100'", "source_tables": ["orderdetails"]}, "evidence": "SUM(MULTIPLY(quantityOrdered, priceEach)"}
{"sample_id": 1658, "db_id": "car_retails", "final": {"question": "Please list the order number of the customer whose credit card has a limit of 45300.", "sql": "SELECT t1.orderNumber FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.creditLimit = 45300", "source_tables": ["customers", "orders"]}, "evidence": "Credit card does not have a limit refers to creditLimit = 45300;"}
{"sample_id": 1660, "db_id": "car_retails", "final": {"question": "How many transactions payment made by customer that is lower than 10000. Group the result by year.", "sql": "SELECT STRFTIME('%Y', t1.paymentDate), COUNT(t1.customerNumber) FROM payments AS t1 WHERE t1.amount < 10000 GROUP BY STRFTIME('%Y', t1.paymentDate)", "source_tables": ["payments"]}, "evidence": "Transactions payment lower than 10000 refer to COUNT(amount) < 1000; by year refers to YEAR(paymentDate)"}
{"sample_id": 1719, "db_id": "restaurant", "final": {"question": "What is the percentage of restaurants in the Bay Area region that scored over 4 for the review rating?", "sql": "SELECT CAST(SUM(IIF(T2.review > 4, 1, 0)) AS REAL) * 100 / COUNT(T2.id_restaurant) FROM geographic AS T1 RIGHT JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'bay area'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "scored over 4 refers to review > 4; percentage = divide(count(id_restaurant where region = 'bay area' and review > 4), count(id_restaurant where region = 'Bay Area')) * 100%"}
{"sample_id": 1751, "db_id": "restaurant", "final": {"question": "List down the cities with unknown country.", "sql": "SELECT city FROM geographic WHERE county = 'unknown'", "source_tables": ["geographic"]}, "evidence": "unknown county refers to county = 'unknown'"}
{"sample_id": 1759, "db_id": "restaurant", "final": {"question": "Among the listed winery, what is the street number of the winery named \"Tulocay Winery\"?", "sql": "SELECT T1.street_num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'Tulocay winery' AND T2.food_type = 'winery'", "source_tables": ["location", "generalinfo"]}, "evidence": "winery refers to food_type = 'winery'; street number refers to street_num; \"Tulocay Winery\" refers to label = 'Tulocay winery'"}
{"sample_id": 1770, "db_id": "restaurant", "final": {"question": "What is the name of the most popular restaurant serving Asian foods in San Francisco?", "sql": "SELECT label FROM generalinfo WHERE food_type = 'asian' AND city = 'san francisco' AND review = ( SELECT MAX(review) FROM generalinfo WHERE food_type = 'asian' AND city = 'san francisco' )", "source_tables": ["generalinfo"]}, "evidence": "the most popular refers to max(review); Asian food refers to food_type = 'asian'; San Francisco refers to city = 'san francisco'"}
{"sample_id": 1734, "db_id": "restaurant", "final": {"question": "What is the region of 1149 El Camino Real?", "sql": "SELECT T2.region FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.street_num = 1149 AND T1.street_name = 'el camino real'", "source_tables": ["location", "geographic"]}, "evidence": "1149 El Camino Real refers to street_num = 1149 and street_name = 'el camino real'"}
{"sample_id": 1679, "db_id": "restaurant", "final": {"question": "What type of food is there in the restaurants on Adeline Street in Berkeley city?", "sql": "SELECT T1.food_type FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_name = 'adeline st' AND T2.city = 'berkeley'", "source_tables": ["location", "generalinfo"]}, "evidence": "Adeline Street refers to street_name = 'adeline st'; type of food refers to food_type\n\n"}
{"sample_id": 1772, "db_id": "restaurant", "final": {"question": "How many deli in Belmont have a review rating of 2 or more?", "sql": "SELECT COUNT(id_restaurant) FROM generalinfo WHERE city = 'belmont' AND review > 2 AND food_type = 'deli'", "source_tables": ["generalinfo"]}, "evidence": "deli ris a food type; Belmont refers to city = 'belmont'; review rating of 2 or more refers to review > 2"}
{"sample_id": 1780, "db_id": "restaurant", "final": {"question": "In which region can you find the highest number of Baskin Robbins restaurants?", "sql": "SELECT T2.region AS num FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label = 'baskin robbins' GROUP BY T2.region ORDER BY COUNT(T1.city) DESC LIMIT 1", "source_tables": ["geographic", "generalinfo"]}, "evidence": "the highest number refers to max(count(city)); Baskin Robbins restaurant refers to label = 'baskin robbins'"}
{"sample_id": 1681, "db_id": "restaurant", "final": {"question": "In which counties are there A&W Root Beer Restaurants?", "sql": "SELECT DISTINCT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label = 'a & w root beer'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "A&W Root Beer Restaurant refers to label = 'a & w root beer'"}
{"sample_id": 1686, "db_id": "restaurant", "final": {"question": "In how many counties is there a street called Appian Way?", "sql": "SELECT COUNT(DISTINCT T2.county) FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.street_name = 'appian way'", "source_tables": ["location", "geographic"]}, "evidence": "a street called Appian Way refers to street_name = 'appian way'"}
{"sample_id": 1733, "db_id": "restaurant", "final": {"question": "Which street in San Francisco has the most burger restaurants?", "sql": "SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.food_type = 'burgers' GROUP BY T2.street_name ORDER BY COUNT(T2.id_restaurant) DESC LIMIT 1", "source_tables": ["location", "generalinfo"]}, "evidence": "street refers to street_name; San Francisco refers to city = 'san francisco'; burger restaurant refers to food_type = 'burgers'; the most burger restaurants refers to max(count(street_name where food_type = 'burgers' and city = 'san francisco'))"}
{"sample_id": 1760, "db_id": "restaurant", "final": {"question": "List the review and label of the restaurants in Mission Blvd., Hayward.", "sql": "SELECT T2.review, T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.city = 'hayward' AND T1.street_name = 'mission blvd'", "source_tables": ["location", "generalinfo"]}, "evidence": "Mission Blvd. refers to street_name = 'mission blvd'; Hayward refers to city = 'hayward'"}
{"sample_id": 1779, "db_id": "restaurant", "final": {"question": "How many restaurants in Broadway, Oakland received a review of no more than 3?", "sql": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.street_name = 'broadway' AND T2.review < 3 AND T1.city = 'oakland'", "source_tables": ["location", "generalinfo"]}, "evidence": "Broadway refers to street_name = 'broadway';\u00a0 Oakland refers to city = 'oakland'; a review of no more than 3 refers to review < 3"}
{"sample_id": 1769, "db_id": "restaurant", "final": {"question": "Among the restaurants located on the street number ranges from 1000 to 2000, what is the percentage of Afghani restaurants are there?", "sql": "SELECT CAST(SUM(IIF(T2.food_type = 'afghani', 1, 0)) AS REAL) * 100 / COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE 1000 <= T1.street_num <= 2000", "source_tables": ["location", "generalinfo"]}, "evidence": "street number ranges from 1000 to 2000 refers to 1000 < = street_num < = 2000; Afghani restaurant refers to food_type = 'afghani'; percentage = divide(count(id_restaurant where food_type = 'afghani'), count(id_restaurant)) * 100%"}
{"sample_id": 1765, "db_id": "restaurant", "final": {"question": "What is the full address of the restaurant named \"Sanuki Restaurant\"?", "sql": "SELECT T2.city, T1.street_num, T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'sanuki restaurant'", "source_tables": ["location", "generalinfo"]}, "evidence": "full address refers to city, street_num, street_name; restaurant named \"Sanuki Restaurant\" refers to label = 'sanuki restaurant'"}
{"sample_id": 1689, "db_id": "restaurant", "final": {"question": "Identify all the restaurants in Yolo County by their label.", "sql": "SELECT T1.id_restaurant, T1.label FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'yolo county'", "source_tables": ["geographic", "generalinfo"]}, "evidence": ""}
{"sample_id": 1737, "db_id": "restaurant", "final": {"question": "List all of the restaurants on Park St.", "sql": "SELECT T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'park st'", "source_tables": ["location", "generalinfo"]}, "evidence": "restaurant refers to label; Park St refers to street_name = 'park st'"}
{"sample_id": 1691, "db_id": "restaurant", "final": {"question": "On which streets in the city of San Francisco are there restaurants with a review of 1.7?", "sql": "SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.review = 1.7", "source_tables": ["location", "generalinfo"]}, "evidence": "street refers to street_name; review of 1.7 refers to review = 1.7"}
{"sample_id": 1762, "db_id": "restaurant", "final": {"question": "In restaurants with a review of 2, how many restaurants have a street number below 500?", "sql": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.review = 2 AND T1.street_num < 500", "source_tables": ["location", "generalinfo"]}, "evidence": "review of 2 refers to review = 2; street number below 500 refers to street_num < 500"}
{"sample_id": 1706, "db_id": "restaurant", "final": {"question": "What are the most popular restaurants in San Francisco among diners?", "sql": "SELECT id_restaurant, label FROM generalinfo WHERE city = 'San Francisco' AND review = ( SELECT MAX(review) FROM generalinfo WHERE city = 'San Francisco' )", "source_tables": ["generalinfo"]}, "evidence": "the most popular refers to max(review); restaurant refers to label; San Francisco refers to city = 'San Francisco'"}
{"sample_id": 1763, "db_id": "restaurant", "final": {"question": "Among all asian restaurants in N. Milpitas Blvd., Milpitas, how many of them have restaurant ID greater than 385?", "sql": "SELECT COUNT(T1.id_restaurant) AS num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.city = 'milpitas' AND T2.food_type = 'asian' AND T1.street_name = 'n milpitas blvd' AND T1.id_restaurant > 385", "source_tables": ["location", "generalinfo"]}, "evidence": "asian restaurant refers to food_type = 'asian'; N. Milpitas Blvd. refers to street_name = 'n milpitas blvd'; Milpitas refers to city = 'milpitas'; restaurant ID greater than 385 refers to id_restaurant > 385"}
{"sample_id": 1748, "db_id": "restaurant", "final": {"question": "Which country has the most restaurants with Italian food?", "sql": "SELECT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.food_type = 'Italian' GROUP BY T2.county ORDER BY COUNT(T1.id_restaurant) DESC LIMIT 1", "source_tables": ["geographic", "generalinfo"]}, "evidence": "Italian food refers to food_type = 'Italian'"}
{"sample_id": 1729, "db_id": "restaurant", "final": {"question": "What are the regions with Greek restaurants?", "sql": "SELECT DISTINCT T1.region FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'greek'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "Greek restaurant refers to food_type = 'greek'"}
{"sample_id": 1697, "db_id": "restaurant", "final": {"question": "Calculate the average rating of reviews for restaurants in Santa Cruz County.", "sql": "SELECT AVG(T2.review) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.county = 'santa cruz county'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "average rating = divide(sum(review where county = 'santa cruz county'), count(id_restaurant where county = 'santa cruz county'))"}
{"sample_id": 1889, "db_id": "soccer_2016", "final": {"question": "Count the total venues located in Pune City.", "sql": "SELECT SUM(T1.Venue_Name) FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id WHERE T2.City_Name = 'Pune'", "source_tables": ["city", "venue"]}, "evidence": "Pune City refers to City_Name = 'Pune'"}
{"sample_id": 1936, "db_id": "soccer_2016", "final": {"question": "Where was the ID 336005 match held? Please give me the venue and the city.", "sql": "SELECT T2.Venue_Name, T3.City_Name FROM \"Match\" AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id INNER JOIN City AS T3 ON T2.City_Id = T3.City_Id WHERE T1.Match_Id = '336005'", "source_tables": ["city", "match", "venue"]}, "evidence": "ID 336005 match refers to Match_Id = '336005'; venue refers to Venue_Name; city refers to City_Name"}
{"sample_id": 1940, "db_id": "soccer_2016", "final": {"question": "When and for what role did the youngest player appear in his first match?", "sql": "SELECT T1.Match_Date, T4.Role_Desc FROM \"Match\" AS T1 INNER JOIN Player_Match AS T2 ON T1.Match_Id = T2.Match_Id INNER JOIN Player AS T3 ON T2.Player_Id = T3.Player_Id INNER JOIN Rolee AS T4 ON T2.Role_Id = T4.Role_Id ORDER BY T3.DOB DESC LIMIT 1", "source_tables": ["rolee", "match", "player_match", "player"]}, "evidence": "When refers to Match_Date; youngest player refers to max(DOB); first match refers to min(Match_Date)"}
{"sample_id": 1902, "db_id": "soccer_2016", "final": {"question": "In how many venues did team 2 win the toss and lose the match?", "sql": "SELECT SUM(CASE WHEN T1.Team_2 = T1.Match_Winner THEN 1 ELSE 0 END) FROM \"Match\" AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T1.Team_1 = T1.Toss_Winner", "source_tables": ["match", "venue"]}, "evidence": "team 2 win the toss refers to Toss_Winner = Team_2 ; lose the match refers to Match_Winner = Team_1"}
{"sample_id": 1863, "db_id": "soccer_2016", "final": {"question": "How many times did Yuvraj Singh receive the Man of the Match award?", "sql": "SELECT SUM(CASE WHEN T2.Player_Name = 'Yuvraj Singh' THEN 1 ELSE 0 END) FROM Match AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match", "source_tables": ["match", "player"]}, "evidence": "Yuvraj Singh refers to Player_Name = 'Yuvraj Singh'; receive the Man of the Match award refers to Player_Id = Man_of_the_Match"}
{"sample_id": 2006, "db_id": "soccer_2016", "final": {"question": "Provide the country ID of East London.", "sql": "SELECT Country_id FROM City WHERE City_Name = 'East London'", "source_tables": ["city"]}, "evidence": "East London refers to City_Name = 'East London'"}
{"sample_id": 1944, "db_id": "soccer_2016", "final": {"question": "When did the Sunrisers Hyderabad win their first match?", "sql": "SELECT T1.Match_Date FROM \"Match\" AS T1 INNER JOIN Team AS T2 ON T1.Match_Winner = T2.Team_Id WHERE T2.Team_Name = 'Sunrisers Hyderabad'", "source_tables": ["match", "team"]}, "evidence": "Sunrisers Hyderabad refers to Team_Name = 'Sunrisers Hyderabad'; win their first match refers to Match_Winner and min(Match_Date)"}
{"sample_id": 2042, "db_id": "soccer_2016", "final": {"question": "List the player's name who played as a captain.", "sql": "SELECT T2.Player_Name FROM Player_Match AS T1 INNER JOIN Player AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T1.Role_Id = T3.Role_Id WHERE T3.Role_Desc = 'Captain' GROUP BY T2.Player_Name", "source_tables": ["rolee", "player_match", "player"]}, "evidence": "played as a captain refers to Role_Desc = 'captain'; player refers to Player_Name"}
{"sample_id": 2026, "db_id": "soccer_2016", "final": {"question": "What year was R Dravid born and the role he played?", "sql": "SELECT T1.DOB, T3.Role_Desc FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id WHERE T1.Player_Name = 'R Dravid' GROUP BY T1.DOB, T3.Role_Desc", "source_tables": ["rolee", "player_match", "player"]}, "evidence": "R Dravid refers to Player_Name = 'R Dravid'; year born refers to DOB; role refers to Role_Desc"}
{"sample_id": 1788, "db_id": "soccer_2016", "final": {"question": "How many matches were there in May, 2008?", "sql": "SELECT COUNT(Match_Id) FROM \"Match\" WHERE SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 7, 1) = '5'", "source_tables": ["match"]}, "evidence": "in May 2008 refers to SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 7, 1) = '5'"}
{"sample_id": 1883, "db_id": "soccer_2016", "final": {"question": "List down the name of venues in season 2.", "sql": "SELECT T2.Venue_Name FROM Match AS T1 INNER JOIN Venue AS T2 ON T2.Venue_Id = T1.Venue_Id WHERE T1.Season_Id = 2 GROUP BY T2.Venue_Name", "source_tables": ["match", "venue"]}, "evidence": "name of venues refers to Venue_Name; season 2 refers to Season_Id = 2"}
{"sample_id": 2013, "db_id": "soccer_2016", "final": {"question": "What are the names of players that have run scored less than 3?", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Batsman_Scored AS T3 ON T2.Match_ID = T3.Match_ID WHERE T3.Runs_Scored < 3 GROUP BY T1.Player_Name", "source_tables": ["player_match", "player", "batsman_scored"]}, "evidence": "scored less than 3 refers to Runs_Scored < 3; name of player refers to Player_name;"}
{"sample_id": 1954, "db_id": "soccer_2016", "final": {"question": "What is the name of the team that won the first ever match?", "sql": "SELECT T1.Team_Name FROM team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T2.Season_Id = 1 ORDER BY T2.Match_Date LIMIT 1", "source_tables": ["match", "team"]}, "evidence": "name of the team refers to Team_Name; won the first ever match refers to Match_Winner where max(Match_Date)"}
{"sample_id": 1988, "db_id": "soccer_2016", "final": {"question": "What are the teams that played in a match with the point of winning margin of 38 on April 30, 2009?", "sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Team_1 WHERE T2.win_margin = 38 AND match_date = '2009-04-30'", "source_tables": ["match", "team"]}, "evidence": "point of winning margin of 38 refers to win_margin = 38; on April 30, 2009 refers to match_date = '2009-04-30'; team refers to Team_Name;"}
{"sample_id": 1947, "db_id": "soccer_2016", "final": {"question": "Compute the run rate at the end of 16 overs of the match ID 335999. Please include the name of the \"Man of_the Match\".", "sql": "SELECT CAST(COUNT(CASE WHEN T1.Toss_Name = 'bat' THEN T3.Runs_Scored ELSE NULL END) AS REAL) / SUM(CASE WHEN T1.Toss_Name = 'field' THEN 1 ELSE 0 END) FROM Toss_Decision AS T1 INNER JOIN Match AS T2 ON T1.Toss_Id = T2.Toss_Decide INNER JOIN Batsman_Scored AS T3 ON T2.Match_Id = T3.Match_Id WHERE T2.Match_Id = 335987 AND T2.Match_Date = '2008-04-18' GROUP BY T3.Over_Id HAVING COUNT(T1.Toss_Name = 'field') = 16", "source_tables": ["match", "toss_decision", "batsman_scored"]}, "evidence": "end of 16 overs refers to count(Toss_Name = 'field' ) = 16; run rate = divide(count(Runs_Scored) when Toss_Name = 'bat', sum(Over_Id)when Toss_Name = 'field'); name refers to Player_Name"}
{"sample_id": 1934, "db_id": "soccer_2016", "final": {"question": "Give me the match ID and date of the matches that were held in Kingsmead for three consecutive days.", "sql": "SELECT T1.Match_Id, T1.Match_Date FROM \"Match\" AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T2.Venue_Name = 'Kingsmead'", "source_tables": ["match", "venue"]}, "evidence": "date of the matches refers to Match_Date; held in Kingsmead refers to Venue_Name = 'Kingsmead'"}
{"sample_id": 1878, "db_id": "soccer_2016", "final": {"question": "List down the name of teams that won the toss of the coin from matches with ID from 336010 to 336020.", "sql": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Toss_Winner WHERE T1.Match_Id BETWEEN 336010 AND 336020", "source_tables": ["match", "team"]}, "evidence": "name of teams refers to Team_Name; won the toss refers to Toss_Winner; matches with ID from 336010 to 336020\u00a0 refers to Match_Id BETWEEN 336010 AND 336020"}
{"sample_id": 1872, "db_id": "soccer_2016", "final": {"question": "Among the matches held in Mumbai, how many percent of them were held in Wankhede Stadium?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Venue_Name = 'Wankhede Stadium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.Match_Id) FROM City AS T1 INNER JOIN Venue AS T2 ON T2.City_Id = T1.City_Id INNER JOIN Match AS T3 ON T3.Venue_Id = T2.Venue_Id WHERE T1.City_Name = 'Mumbai'", "source_tables": ["city", "match", "venue"]}, "evidence": "Mumbai refers to City_Name = 'Mumbai'; Wankhede Stadium refers to Venue_Name = 'Wankhede Stadium'; percent = divide(count(Match_Id where Venue_Name = 'Wankhede Stadium'), count(Match_Id)) * 100% where City_Name = 'Mumbai'"}
{"sample_id": 1840, "db_id": "soccer_2016", "final": {"question": "How many matches were played by the player with player ID 2?", "sql": "SELECT SUM(CASE WHEN Player_Id = 2 THEN 1 ELSE 0 END) FROM Player_Match", "source_tables": ["player_match"]}, "evidence": "player ID 2 refers to Player_Id = 2"}
{"sample_id": 1866, "db_id": "soccer_2016", "final": {"question": "Calculate the win rate of the team \"Chennai Super Kings\".", "sql": "SELECT CAST(SUM(CASE WHEN T1.Match_Winner = 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Match_Id) FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 INNER JOIN Team AS T3 ON T3.Team_Id = T1.Team_2 WHERE T2.Team_Name = 'Chennai Super Kings' OR T3.Team_Name = 'Chennai Super Kings'", "source_tables": ["match", "team"]}, "evidence": "team \"Chennai Super Kings\" refers to Team_Name = 'Chennai Super Kings'; win rate = divide(count(Match_Id where Match_Winner = 3), count(Match_Id)) * 100%"}
{"sample_id": 1993, "db_id": "soccer_2016", "final": {"question": "How many times did K Goel played as a player only?", "sql": "SELECT COUNT(T1.Match_Id) FROM Player_Match AS T1 INNER JOIN Player AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T1.Role_Id = T3.Role_Id WHERE T2.Player_Name = 'K Goel' AND T3.Role_Id = 3", "source_tables": ["rolee", "player_match", "player"]}, "evidence": "K Goel refers to Player_Name = 'K Goel'; played as a player only refers to Role_Id = 3"}
{"sample_id": 1946, "db_id": "soccer_2016", "final": {"question": "Calculate the run rate at the end of 17 overs of the match ID 335987 on 4/18/2008.", "sql": "SELECT CAST(COUNT(CASE WHEN T1.Toss_Name = 'bat' THEN T3.Runs_Scored ELSE NULL END) AS REAL) / SUM(CASE WHEN T1.Toss_Name = 'field' THEN 1 ELSE 0 END) FROM Toss_Decision AS T1 INNER JOIN Match AS T2 ON T1.Toss_Id = T2.Toss_Decide INNER JOIN Batsman_Scored AS T3 ON T2.Match_Id = T3.Match_Id WHERE T2.Match_Id = 335987 AND T2.Match_Date = '2008-04-18' GROUP BY T3.Over_Id HAVING COUNT(T1.Toss_Name = 'field') = 17", "source_tables": ["match", "toss_decision", "batsman_scored"]}, "evidence": "4/18/2008 refers to Match_Date = 4/18/2008; end of 17 overs refers to count(Toss_Name = 'field' ) = 17; run rate = divide(sum(Runs_Scored) when Toss_Name = 'bat', sum(Over_Id) when Toss_Name = 'field')"}
{"sample_id": 1832, "db_id": "soccer_2016", "final": {"question": "Which venue did Kolkata Knight Riders play most of their matches as a Team 1?", "sql": "SELECT T3.Venue_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Team_1 INNER JOIN Venue AS T3 ON T2.Venue_Id = T3.Venue_Id WHERE T1.Team_Name = 'Kolkata Knight Riders' GROUP BY T3.Venue_Id ORDER BY COUNT(T3.Venue_Id) DESC LIMIT 1", "source_tables": ["match", "team", "venue"]}, "evidence": "venue refers to Venue_Name; Kolkata Knight Riders refers to Team_Name = 'Kolkata Knight Riders'; most of their matches refers to max(count(Venue_Id)); Team 1 refers to Team_Id = Team_1"}
{"sample_id": 1907, "db_id": "soccer_2016", "final": {"question": "List the name and country of the players who got more than average catches in ascending order of the number of catches.", "sql": "SELECT T1.Player_Name, T4.Country_Name FROM Player AS T1 INNER JOIN Wicket_Taken AS T2 ON T1.Player_Id = T2.Fielders INNER JOIN Out_Type AS T3 ON T2.Kind_Out = T3.Out_Id INNER JOIN Country AS T4 ON T1.Country_Name = T4.Country_Id GROUP BY T1.Player_Name ORDER BY COUNT(T3.Out_Name) ASC", "source_tables": ["wicket_taken", "out_type", "country", "player"]}, "evidence": "name and country of the players refers to Player_Name and Country_Name; catches refers to Out_name = 'caught'; average catches refers to divide(count(Player_ID) when Out_name = 'caught', sum(Player_ID))"}
{"sample_id": 1862, "db_id": "soccer_2016", "final": {"question": "How many players got out by being stumped in the second innings of all matches?", "sql": "SELECT SUM(CASE WHEN T1.Innings_No = 2 THEN 1 ELSE 0 END) FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T2.Out_Id = T1.Kind_Out WHERE T2.Out_Name = 'stumped'", "source_tables": ["wicket_taken", "out_type"]}, "evidence": "got out by being stumped refers to Out_Name = 'stumped'; the second innings refers to Innings_No = 2"}
{"sample_id": 1931, "db_id": "soccer_2016", "final": {"question": "Tally the player IDs of \"Man of the Series\" awardees for the seasons from 2011 to 2015.", "sql": "SELECT Man_of_the_Series FROM Season WHERE 2011 < Season_Year < 2015", "source_tables": ["season"]}, "evidence": "seasons from 2011 to 2015 refers to 2011 < Season_Year < 2015"}
{"sample_id": 1827, "db_id": "soccer_2016", "final": {"question": "What is the name of the player with the highest number of outstanding player awards in a particular match?", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match GROUP BY T2.Man_of_the_Match ORDER BY COUNT(T2.Man_of_the_Match) DESC LIMIT 1", "source_tables": ["match", "player"]}, "evidence": "name of the player refers to Player_Name; the highest number of outstanding player awards refers to max(count(Man_of_the_Match))"}
{"sample_id": 1874, "db_id": "soccer_2016", "final": {"question": "How many percent of the toss-winners decided to bowl first on the pitch from 2010 to 2016?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Toss_Name = 'field' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Toss_Id) FROM Match AS T1 INNER JOIN Toss_Decision AS T2 ON T2.Toss_Id = T1.Toss_Decide WHERE T1.Match_Date BETWEEN '2010-01-01' AND '2016-12-31'", "source_tables": ["match", "toss_decision"]}, "evidence": "decide to bowl first refers to Toss_Name = 'field'; from 2010 to 2016 refers to Match_Date BETWEEN '2010-01-01' AND '2016-12-31'; percent = divide(count(Toss_Id where Toss_Name = 'field'), count(Toss_Id)) * 100% where Match_Date BETWEEN '2010-01-01' AND '2016-12-31'"}
{"sample_id": 1965, "db_id": "soccer_2016", "final": {"question": "How many overs were there in each innings of match ID \"336011\"?", "sql": "SELECT SUM(CASE WHEN Innings_No = 1 THEN 1 ELSE 0 END) AS IN1 , SUM(CASE WHEN Innings_No = 2 THEN 1 ELSE 0 END) AS IN2 FROM Ball_by_Ball WHERE Match_Id = 336011", "source_tables": ["ball_by_ball"]}, "evidence": ""}
{"sample_id": 2000, "db_id": "soccer_2016", "final": {"question": "How many players have the bowling skill greater than 2?", "sql": "SELECT COUNT(Player_Name) FROM Player WHERE Bowling_skill > 2", "source_tables": ["player"]}, "evidence": "bowling skill greater than 2 refers to Bowling_skill > 2"}
{"sample_id": 2029, "db_id": "soccer_2016", "final": {"question": "Which team won by wickets in match ID 335993?", "sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Player_Match AS T3 ON T1.Team_Id = T3.Team_Id INNER JOIN Win_By AS T4 ON T2.Win_Type = T4.Win_Id WHERE T2.Match_Id = '335993' GROUP BY T1.Team_Name", "source_tables": ["win_by", "match", "player_match", "team"]}, "evidence": "team refers to Team_Name"}
{"sample_id": 1922, "db_id": "soccer_2016", "final": {"question": "List the name of all New Zealand umpires.", "sql": "SELECT T1.Umpire_Name FROM Umpire AS T1 INNER JOIN Country AS T2 ON T1.Umpire_Country = T2.Country_Id WHERE T2.Country_Name = 'New Zealand'", "source_tables": ["umpire", "country"]}, "evidence": "New Zealand umpires refers to Country_Name = 'New Zealand'; name of umpires refers to Umpire_Name"}
{"sample_id": 1955, "db_id": "soccer_2016", "final": {"question": "How many cities are in U.A.E?", "sql": "SELECT SUM(CASE WHEN T2.Country_Name = 'U.A.E' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN country AS T2 ON T1.Country_id = T2.Country_id", "source_tables": ["city", "country"]}, "evidence": "U.A.E refers to Country_Name = 'U.A.E'"}
{"sample_id": 1888, "db_id": "soccer_2016", "final": {"question": "Calculate the total winning match for Deccan Chargers.", "sql": "SELECT SUM(T2.Match_Winner) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T1.Team_Name = 'Deccan Chargers'", "source_tables": ["match", "team"]}, "evidence": "winning refers to Match_Winner; Deccan Chargers refers to Team_Name = 'Deccan Chargers'"}
{"sample_id": 1819, "db_id": "soccer_2016", "final": {"question": "How many times does M Chinnaswamy Stadium host games than Maharashtra Cricket Association Stadium?", "sql": "SELECT SUM(CASE WHEN T2.Venue_Name = 'M Chinnaswamy Stadium' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.Venue_Name = 'Maharashtra Cricket Association Stadium' THEN 1 ELSE 0 END) FROM \"Match\" AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id", "source_tables": ["match", "venue"]}, "evidence": "M Chinnaswamy Stadium refers to Venue_Name = 'M Chinnaswamy Stadium'; Maharashtra Cricket Association Stadium refers to Venue_Name = 'Maharashtra Cricket Association Stadium'; how many times = divide(count(Match_Id where Venue_Name = 'M Chinnaswamy Stadium'), count(Match_Id where Venue_Name = 'Maharashtra Cricket Association Stadium'))"}
{"sample_id": 2003, "db_id": "soccer_2016", "final": {"question": "How many matches are there in April, 2008?", "sql": "SELECT COUNT(Match_Id) FROM Match WHERE Match_date LIKE '2008-04%'", "source_tables": ["match"]}, "evidence": "in April, 2008 refers to Match_date like '2008-04%'"}
{"sample_id": 1831, "db_id": "soccer_2016", "final": {"question": "What is the name of the team that won the most number of matches in season 1?", "sql": "SELECT Team_Name FROM Team WHERE Team_Id = ( SELECT Match_Winner FROM \"Match\" WHERE season_Id = 1 GROUP BY Match_Winner ORDER BY COUNT(Match_Winner) DESC LIMIT 1 )", "source_tables": ["match", "team"]}, "evidence": "name of the team refers to Team_Name; the most number of matches refers to max(count(Match_Winner)); season 1 refers to season_Id = 1"}
{"sample_id": 1797, "db_id": "soccer_2016", "final": {"question": "Among the players whose bowling skill is \"Legbreak\", when was the oldest one of them born?", "sql": "SELECT MIN(T1.DOB) FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id WHERE T2.Bowling_Skill = 'Legbreak'", "source_tables": ["bowling_style", "player"]}, "evidence": "the oldest refers to min(DOB); date of birth refers to DOB"}
{"sample_id": 1818, "db_id": "soccer_2016", "final": {"question": "In the database, how many times is the number of Indian cities to the South African cities?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Country_Name = 'India' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.Country_Name = 'South Africa' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN Country AS T2 ON T1.Country_Id = T2.Country_Id", "source_tables": ["city", "country"]}, "evidence": "Indian refers to Country_Name = 'India'; South African refers to Country_Name = 'South Africa'; how many times = divide(count(City_Id where Country_Name = 'India'), count(City_Id where Country_Name = 'South Africa'))"}
{"sample_id": 1952, "db_id": "soccer_2016", "final": {"question": "How many players have won at least 5 man of the match awards?", "sql": "SELECT COUNT(Match_Id) FROM \"Match\" GROUP BY Man_of_the_Match HAVING COUNT(Match_Id) >= 5", "source_tables": ["match"]}, "evidence": "won at least 5 man of the match awards refers to COUNT(Match_Id) > = 5"}
{"sample_id": 1881, "db_id": "soccer_2016", "final": {"question": "What is the name of the team that won match ID 336000?", "sql": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Match_Winner WHERE T1.Match_Id = 336000", "source_tables": ["match", "team"]}, "evidence": "name of the team refers to Team_Name; won refers to Match_Winner"}
{"sample_id": 2025, "db_id": "soccer_2016", "final": {"question": "How many seasons did Pune Warriors participate in?", "sql": "SELECT COUNT(T.Season_Year) FROM ( SELECT T4.Season_Year FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Player_Match AS T3 ON T1.Team_Id = T3.Team_Id INNER JOIN Season AS T4 ON T2.Season_Id = T4.Season_Id WHERE T1.Team_Name = 'Pune Warriors' GROUP BY T4.Season_Year ) T", "source_tables": ["season", "match", "player_match", "team"]}, "evidence": "Pune Warriors refers to Team_Name = 'Pune Warriors'"}
{"sample_id": 1896, "db_id": "soccer_2016", "final": {"question": "From which country does the most umpires are from? How many of them are from the mentioned country?\n", "sql": "SELECT T2.Country_Id, COUNT(T1.Umpire_Id) FROM Umpire AS T1 INNER JOIN Country AS T2 ON T2.Country_Id = T1.Umpire_Country GROUP BY T2.Country_Id ORDER BY COUNT(T1.Umpire_Id) DESC LIMIT 1", "source_tables": ["umpire", "country"]}, "evidence": "which country refers to Country_Id; most umpires refers to max(count(Umpire_Id))"}
{"sample_id": 1868, "db_id": "soccer_2016", "final": {"question": "Provide the names and birthdates of players who have left-arm fast skills.", "sql": "SELECT T1.Player_Name, T1.DOB FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T2.Bowling_Id = T1.Bowling_skill WHERE T2.Bowling_skill = 'Left-arm fast'", "source_tables": ["bowling_style", "player"]}, "evidence": "player's name refers to Player_Name; birthdate refers to DOB; have left-arm fast skills refers to Bowling_skill = 'Left-arm fast'"}
{"sample_id": 2043, "db_id": "soccer_2016", "final": {"question": "Give the match's venue and winning team for the match ID 392194.", "sql": "SELECT T1.Venue_Name, T3.Team_Name FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.venue_id = T2.venue_id INNER JOIN Team AS T3 ON T2.match_winner = T3.Team_Id WHERE T2.Match_Id = 392194", "source_tables": ["match", "team", "venue"]}, "evidence": "venue refers to Venue_Name; winning team refers to match_winner"}
{"sample_id": 2008, "db_id": "soccer_2016", "final": {"question": "List the names of players who play by the left hand.", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id WHERE T2.Batting_hand = 'Left-hand bat'", "source_tables": ["batting_style", "player"]}, "evidence": "play by the left hand refers to Batting_hand = \u00a0 'Left-hand bat'"}
{"sample_id": 1804, "db_id": "soccer_2016", "final": {"question": "Among all the players born after the year 1985, what is the percentage of the players who use the right hand as their batting hand?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Batting_Hand = 'Right-hand bat' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id WHERE SUBSTR(T1.DOB, 1, 4) > 1985", "source_tables": ["batting_style", "player"]}, "evidence": "born after the year 1985 refers to SUBSTR(DOB, 1, 4) > 1985; right hand as batting hand refers to Batting_Hand = 'Right-hand bat'; percentage = divide(count(Player_Id where Batting_Hand = 'Right-hand bat'), count(Player_Id)) * 100% where SUBSTR(DOB, 1, 4) > 1985"}
{"sample_id": 1807, "db_id": "soccer_2016", "final": {"question": "Give the name of the striker in the match no. 419169, over no.3, ball no.2, inning no.2.", "sql": "SELECT T2.Player_Name FROM Ball_by_Ball AS T1 INNER JOIN Player AS T2 ON T1.Striker = T2.Player_Id WHERE T1.Match_Id = 419169 AND T1.Over_Id = 3 AND T1.Ball_Id = 2 AND T1.Innings_No = 2", "source_tables": ["ball_by_ball", "player"]}, "evidence": "name of the striker refers to Player_Name; match no. 419169 refers to Match_Id = 419169; over no.3 refers to Over_Id = 3; ball no.2 refers to Ball_Id = 2; inning no.2 refers to Innings_No = 2"}
{"sample_id": 2044, "db_id": "soccer_2016", "final": {"question": "Among the matches of Delhi Daredevils in 2009, what is the percentage of their matches won by wickets?", "sql": "SELECT CAST(SUM(CASE WHEN T3.Win_Type = 'wickets' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.Win_Type) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner INNER JOIN Win_By AS T3 ON T2.Win_Type = T3.Win_Id WHERE T1.Team_Name = 'Delhi Daredevils'", "source_tables": ["win_by", "match", "team"]}, "evidence": "Delhi Daredevils refers to team_name = 'Delhi Daredevils'; in 2009 refers to Match_Date = '2009%'; won by wickets refers to Win_Type = 'wickets'; percentage refers to DIVIDE(COUNT(Win_Type = 'wickets'), COUNT(Win_Type))"}
{"sample_id": 1995, "db_id": "soccer_2016", "final": {"question": "Provide the losing team's name in the match ID 336039.", "sql": "SELECT Team_Name FROM Team WHERE Team_Id = ( SELECT CASE WHEN Team_1 = Match_Winner THEN Team_2 ELSE Team_1 END FROM Match WHERE match_id = 336039 )", "source_tables": ["match", "team"]}, "evidence": "losing team's name refers to Team_Id NOT in \"match_winner\" column"}
{"sample_id": 1991, "db_id": "soccer_2016", "final": {"question": "Among the matches of Delhi Daredevils in 2014, how many won matches are there?", "sql": "SELECT COUNT(T1.Match_Winner) FROM \"Match\" AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 OR T2.Team_Id = T1.Team_2 WHERE T2.team_name = 'Delhi Daredevils' AND T1.Match_Date LIKE '2014%'", "source_tables": ["match", "team"]}, "evidence": "Delhi Daredevils refers to team_name = 'Delhi Daredevils'; in 2014 refers to Match_Date contains '2014';"}
{"sample_id": 1850, "db_id": "soccer_2016", "final": {"question": "How many cities are located in South Africa?", "sql": "SELECT SUM(CASE WHEN T2.Country_Name = 'South Africa' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN Country AS T2 ON T2.Country_Id = T1.Country_id", "source_tables": ["city", "country"]}, "evidence": "South Africa refers to Country_Name = 'South Africa'"}
{"sample_id": 1858, "db_id": "soccer_2016", "final": {"question": "How many players got out in the first inning of match ID \"548335\"?", "sql": "SELECT SUM(CASE WHEN Match_Id = 548335 THEN 1 ELSE 0 END) FROM Wicket_Taken WHERE Innings_No = 1", "source_tables": ["wicket_taken"]}, "evidence": "got out refers to Player_Out; the first inning refers to Innings_No = 1; match ID \"548335\" refers to Match_Id = 548335"}
{"sample_id": 2066, "db_id": "music_tracker", "final": {"question": "An American rapper '2Pac' released his first solo album in 1991, how many years have passed until his next album was released?", "sql": "SELECT ( SELECT groupYear FROM torrents WHERE artist LIKE '2Pac' AND releaseType LIKE 'album' ORDER BY groupYear LIMIT 1, 1 ) - groupYear FROM torrents WHERE artist LIKE '2Pac' AND releaseType LIKE 'album' AND groupYear = 1991", "source_tables": ["torrents"]}, "evidence": "2Pac is an artist; album refers to releaseType; groupYear = 1991; SUBTRACT(groupYear = 1991, groupYear where releaseType = 'album' LIMIT 1 OFFSET 1);"}
{"sample_id": 2049, "db_id": "music_tracker", "final": {"question": "What is the release title of the single under the \"funk\" tag that was released the oldest?", "sql": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag LIKE 'funk' AND T1.releaseType = 'single' ORDER BY T1.groupYear LIMIT 1", "source_tables": ["torrents", "tags"]}, "evidence": "release title of single refers to groupName where releaseType = 'single'; the oldest means coming before all others in time and refers to MIN(groupYear);"}
{"sample_id": 2082, "db_id": "music_tracker", "final": {"question": "In 1980, how many singles were released by sugar daddy?", "sql": "SELECT COUNT(releaseType) FROM torrents WHERE artist LIKE 'sugar daddy' AND releaseType LIKE 'Single' AND groupYear = 1980", "source_tables": ["torrents"]}, "evidence": "sugar daddy is an artist; releaseType = 'single'; groupYear = 1980;"}
{"sample_id": 2076, "db_id": "music_tracker", "final": {"question": "List the group name has the most downloaded that have released jazz genres from 1982 or later.", "sql": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'jazz' AND T1.groupYear >= 1982 ORDER BY T1.totalSnatched DESC LIMIT 1", "source_tables": ["torrents", "tags"]}, "evidence": "the most downloaded refers to MAX(totalSnatched); tag = 'jazz'; from 1982 or later refers to groupYear \u2265 1982;"}
{"sample_id": 2073, "db_id": "music_tracker", "final": {"question": "Provide the name of artists who had no more than 100 downloads and are tagged \"funk\" in 1980.", "sql": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'funk' AND T1.groupYear = 1980 AND T1.totalSnatched <= 100", "source_tables": ["torrents", "tags"]}, "evidence": "no more than 100 downloads refer to totalSnatched \u2264 100; groupYear = 1980; tag = 'funk';"}
{"sample_id": 2089, "db_id": "music_tracker", "final": {"question": "From 1979 to 1982, what was the percentage of united.states albums out of total albums were released?", "sql": "SELECT CAST(SUM(CASE WHEN T2.tag LIKE 'united.states' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.releaseType) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear BETWEEN 1979 AND 1982 AND T1.releaseType LIKE 'album'", "source_tables": ["torrents", "tags"]}, "evidence": "From 1979 to 1982 refers to groupYear between 1979 and 1982; United States refer to tag; albums refer to releaseType; DIVIDE(COUNT(releaseType = 'album' where tag = 'united.states' and groupYear between 1979 and 1982), COUNT(releaseType = 'album' where groupYear between 1979 and 1982)) as percentage;"}
{"sample_id": 2045, "db_id": "music_tracker", "final": {"question": "What is the release title of the single that was released by Ron Hunt in 1979 that was downloaded 239 times?", "sql": "SELECT groupName FROM torrents WHERE artist LIKE 'ron hunt & ronnie g & the sm crew' AND groupYear = 1979 AND releaseType LIKE 'single' AND totalSnatched = 239", "source_tables": ["torrents"]}, "evidence": "release title refers to groupName; Ron Hunt is an artist; groupYear = 1979; releaseType = 'single'; downloaded 239 times refer to totalSnatched = 239;"}
{"sample_id": 2065, "db_id": "music_tracker", "final": {"question": "How many albums and Single-Tables were released by the artist named '50 cent' between 2010 and 2015?", "sql": "SELECT COUNT(id), ( SELECT COUNT(id) FROM torrents WHERE groupYear BETWEEN 2010 AND 2015 AND artist LIKE '50 cent' AND releaseType LIKE 'album' ) FROM torrents WHERE groupYear BETWEEN 2010 AND 2015 AND artist LIKE '50 cent' AND releaseType LIKE 'Single'", "source_tables": ["torrents"]}, "evidence": "albums refer to releaseType = 'album'; releaseType = 'single'; between 2010 and 2015 refers to groupYear between 2010 and 2015;"}
{"sample_id": 2052, "db_id": "music_tracker", "final": {"question": "What is the tag and the artist of the most downloaded single?", "sql": "SELECT T2.tag, T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'single' ORDER BY T1.totalSnatched DESC LIMIT 1", "source_tables": ["torrents", "tags"]}, "evidence": "the most downloaded single refers to MAX(totalSnatched where releaseType = 'single');"}
{"sample_id": 2098, "db_id": "world_development_indicators", "final": {"question": "What is the long name of the country with the description \"Estimates are derived from data on foreign-born population.\" on the series code SM.POP.TOTL?", "sql": "SELECT T1.LongName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Estimates are derived FROM data on foreign-born population.' AND T2.Seriescode = 'SM.POP.TOTL'", "source_tables": ["countrynotes", "country"]}, "evidence": ""}
{"sample_id": 2135, "db_id": "world_development_indicators", "final": {"question": "In 2005, which series codes use the International Monetary Fund, Balance of Payments Statistics Yearbook and data files source?", "sql": "SELECT T1.Seriescode, T2.Source FROM Footnotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode WHERE T1.Year LIKE '%2005%' AND T2.Source LIKE 'International Monetary Fund%'", "source_tables": ["footnotes", "series"]}, "evidence": "Year contains '2005'; series codes contain 'International Monetary Fund'"}
{"sample_id": 2155, "db_id": "world_development_indicators", "final": {"question": "Mention the series code of countries using Australian dollar as their currency unit. Which country belongs to middle income group among them.", "sql": "SELECT T1.CountryCode, T2.SeriesCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.CurrencyUnit = 'Australian dollar' AND T1.IncomeGroup = 'Lower middle income'", "source_tables": ["countrynotes", "country"]}, "evidence": "middle income group refers to IncomeGroup = 'Low middle income';"}
{"sample_id": 2163, "db_id": "world_development_indicators", "final": {"question": "Which countries use Euro as their currency? List down the table name.", "sql": "SELECT TableName FROM Country WHERE CurrencyUnit = 'Euro'", "source_tables": ["country"]}, "evidence": "CurrencyUnit = 'Euro';"}
{"sample_id": 2199, "db_id": "world_development_indicators", "final": {"question": "Which country has had the highest proportion of CO2 emissions from transport?", "sql": "SELECT CountryName FROM Indicators WHERE IndicatorName LIKE 'CO2 emissions FROM transport%' ORDER BY Value DESC LIMIT 1", "source_tables": ["indicators"]}, "evidence": "the highest proportion of CO2 emissions from transport refers to max(value where indicatorname = 'CO2 emissions from transport (% of total fuel combustion)')"}
{"sample_id": 2188, "db_id": "world_development_indicators", "final": {"question": "What country have its data estimated based on regression?", "sql": "SELECT DISTINCT T1.ShortName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Estimates are based on regression.'", "source_tables": ["countrynotes", "country"]}, "evidence": "what country refers to LongName; have its data estimated based on regression refers to description = 'Estimates are based on regression.'"}
{"sample_id": 2100, "db_id": "world_development_indicators", "final": {"question": "On which years did Aruba got a footnote on the series code AG.LND.FRST.K2?", "sql": "SELECT T2.Year FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Seriescode = 'AG.LND.FRST.K2'", "source_tables": ["footnotes", "country"]}, "evidence": "Aruba is the name of country where ShortName = 'Aruba'"}
{"sample_id": 2240, "db_id": "world_development_indicators", "final": {"question": "Which countries have notes on the indicator BX.KLT.DINV.CD.WD?", "sql": "SELECT T1.ShortName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode INNER JOIN Series AS T3 ON T2.Seriescode = T3.SeriesCode WHERE T3.Seriescode = 'BX.KLT.DINV.CD.WD'", "source_tables": ["series", "countrynotes", "country"]}, "evidence": "indicator BX.KLT.DINV.CD.WD refers to Seriescode = 'BX.KLT.DINV.CD.WD'"}
{"sample_id": 2124, "db_id": "world_development_indicators", "final": {"question": "What are the sources for the data of children who finished primary school education in North American countries?", "sql": "SELECT DISTINCT T3.Description FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN CountryNotes AS T3 ON T2.CountryCode = T3.Countrycode WHERE T1.Region = 'North America' AND T2.IndicatorName = 'Out-of-school children of primary school age, both sexes (number)'", "source_tables": ["countrynotes", "country", "indicators"]}, "evidence": "North American is the name of the region; sources refer to Description; children who finished primary school education refer to IndicatorName = 'Out-of-school children of primary school age, both sexes (number)';"}
{"sample_id": 2138, "db_id": "world_development_indicators", "final": {"question": "Please list the indicator names of Arab World whose values are higher than 50 in 1960.", "sql": "SELECT IndicatorName FROM Indicators WHERE CountryName = 'Arab World' AND Year = 1960 AND Value > 50", "source_tables": ["indicators"]}, "evidence": "Arab World refers to CountryName; Year = '1960'; values are higher than 50 refers to Value>50;"}
{"sample_id": 2182, "db_id": "world_development_indicators", "final": {"question": "Which country have completed vital registration? List all the countries.", "sql": "SELECT ShortName FROM Country WHERE VitalRegistrationComplete = 'Yes'", "source_tables": ["country"]}, "evidence": "have completed vital registration refers to VitalRegistrationComplete = Yes; country name refers to ShortName"}
{"sample_id": 2149, "db_id": "world_development_indicators", "final": {"question": "List out the series code of countries using Euro as their currency unit.", "sql": "SELECT DISTINCT T2.SeriesCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.CurrencyUnit = 'Euro'", "source_tables": ["countrynotes", "country"]}, "evidence": ""}
{"sample_id": 2165, "db_id": "world_development_indicators", "final": {"question": "Which high income group countries are from Asia?", "sql": "SELECT CountryCode, Region FROM Country WHERE (IncomeGroup = 'High income: OECD' OR IncomeGroup = 'High income: nonOECD') AND Region LIKE '%Asia%'", "source_tables": ["country"]}, "evidence": "Asia is the name of the region;"}
{"sample_id": 2154, "db_id": "world_development_indicators", "final": {"question": "List out the series code and country code of the poor countries that located in Latin American & Carribbean.", "sql": "SELECT T2.SeriesCode, T2.CountryCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.Region = 'Latin America & Caribbean' AND t1.incomegroup = 'Low income'", "source_tables": ["countrynotes", "country"]}, "evidence": "Latin American & Carribbean is the name of the region; poor countries refers to IncomeGroup = 'Low income';"}
{"sample_id": 2178, "db_id": "world_development_indicators", "final": {"question": "Among the low income countries, which country has the lowest fertility rate?", "sql": "SELECT T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'Low income' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' ORDER BY T2.Value LIMIT 1", "source_tables": ["country", "indicators"]}, "evidence": "fertility rate refers to IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'; lowest refers to MIN(Value); IncomeGroup = 'Low income';"}
{"sample_id": 2143, "db_id": "world_development_indicators", "final": {"question": "Which indicator name uses the Weighted average method and has the lowest value?", "sql": "SELECT T1.IndicatorName, MIN(T1.Value) FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T2.AggregationMethod = 'Weighted average'", "source_tables": ["series", "indicators"]}, "evidence": "AggregationMethod = 'Weighted average'; the lowest value implies MIN(Value);"}
{"sample_id": 2177, "db_id": "world_development_indicators", "final": {"question": "List the series code of country with country notes description as \"Data sources : Eurostat\" and state the Wb2Code of these countries.", "sql": "SELECT T2.seriescode, T1.Wb2Code FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data sources : Eurostat'", "source_tables": ["countrynotes", "country"]}, "evidence": ""}
{"sample_id": 2218, "db_id": "world_development_indicators", "final": {"question": "How many countries in Europe & Central Asia uses Danish krone as its currency? List the full names of those coutnries.", "sql": "SELECT COUNT(longname) FROM country WHERE region = 'Europe & Central Asia' AND currencyunit = 'Danish krone' UNION SELECT longname FROM country WHERE currencyunit = 'Danish krone' AND region = 'Europe & Central Asia'", "source_tables": ["country"]}, "evidence": "countries in Europe & Central Asia refer to region = 'Europe & Central Asia'; uses Danish krone refers to currencyunit = 'Danish krone'; full name refers to longname"}
{"sample_id": 2164, "db_id": "world_development_indicators", "final": {"question": "How many of the countries do not have special notes? List the long name.", "sql": "SELECT COUNT(LongName) FROM Country WHERE SpecialNotes = '' UNION SELECT longname FROM country WHERE specialnotes = ''", "source_tables": ["country"]}, "evidence": "do not have special notes implies SpecialNotes are NULL;"}
{"sample_id": 2198, "db_id": "world_development_indicators", "final": {"question": "Please provide full name of any two countries using special trade system.", "sql": "SELECT LongName FROM Country WHERE SystemOfTrade = 'Special trade system' LIMIT 2", "source_tables": ["country"]}, "evidence": "full name refers to longname; using special trade system refers to systemoftrade = 'Special trade system'"}
{"sample_id": 2172, "db_id": "world_development_indicators", "final": {"question": "List the long name of countries with indicator name in 1980.", "sql": "SELECT DISTINCT T1.LongName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Year = 1980 AND T2.IndicatorName IS NOT NULL", "source_tables": ["country", "indicators"]}, "evidence": "with any indicator name implies IndicatorName is not NULL; Year = '1980';"}
{"sample_id": 2112, "db_id": "world_development_indicators", "final": {"question": "List down the top 3 Latin American & Caribbean countries with the highest average value in \"CO2 emissions (kt)\" indicator since 1965. Give their highest value and in what year.", "sql": "SELECT DISTINCT T1.CountryCode, T1.Year, T1.Value FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Region = 'Latin America & Caribbean' AND T1.IndicatorName = 'CO2 emissions (kt)' AND T1.Year > 1965 AND T1.Year < 1980 ORDER BY T1.Value DESC LIMIT 3", "source_tables": ["country", "indicators"]}, "evidence": "Latin American & Caribbean countries is the name of the region where Region in ('Latin America' , 'Caribbean'); CO2 emissions from gaseous fuel consumption (kt) is the name of indicator where IndicatorName = 'CO2 emissions from gaseous fuel consumption (kt)'; average value in CO2 emissions (kt) = DIVIDE(SUM(Value), SUM(IndicatorName = 'CO2 emissions from gaseous fuel consumption (kt)')); Year > 1965"}
{"sample_id": 2230, "db_id": "world_development_indicators", "final": {"question": "What is the average number of passengers carried via air transport per year by Bulgaria between 1970 to 1980? Indicate the country's system of trade.", "sql": "SELECT AVG(T1.Value), T2.SystemOfTrade FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName = 'Air transport, passengers carried' AND T1.Year >= 1970 AND T1.Year < 1981 AND T1.CountryName = 'Bulgaria'", "source_tables": ["country", "indicators"]}, "evidence": "average number refers to avg(value); passengers carried via air transport per year refers to value where IndicatorName = 'Air transport, passengers carried'; by Bulgaria refers to CountryName = 'Bulgaria'; between 1970 to 1980 refers to Year between 1970 and 1980"}
{"sample_id": 2171, "db_id": "world_development_indicators", "final": {"question": "What are the years when countries have indicator name of \"Air transport, passengers carried\"? List the table name of these countries.", "sql": "SELECT DISTINCT T2.Year, T1.TableName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Air transport, passengers carried'", "source_tables": ["country", "indicators"]}, "evidence": ""}
{"sample_id": 2108, "db_id": "world_development_indicators", "final": {"question": "What is the average value of Adjusted net enrolment rate, primary, both sexes (%) indicator in Algeria from 1975 to 1980?", "sql": "SELECT CAST(SUM(Value) AS REAL) / COUNT(CountryCode) FROM Indicators WHERE CountryName = 'Algeria' AND Year > 1974 AND Year < 1981 AND IndicatorName = 'Adjusted net enrolment rate, primary, both sexes (%)'", "source_tables": ["indicators"]}, "evidence": "the average value of Adjusted net enrolment rate, primary, both sexes (%) is DIVIDE(SUM(Value), SUM(IndicatorName = 'Adjusted net enrolment rate, primary, both sexes (%)')); Year BETWEEN 1975 AND 1980; Algeria is the name of country where CountryName = 'Algeria'"}
{"sample_id": 2242, "db_id": "world_development_indicators", "final": {"question": "How many countries have notes on the indicator Stocks traded, turnover ratio of domestic shares?", "sql": "SELECT COUNT(T1.Countrycode)  FROM CountryNotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode WHERE T2.IndicatorName = 'Stocks traded, turnover ratio of domestic shares (%)'", "source_tables": ["series", "countrynotes"]}, "evidence": "indicator Stocks traded, turnover ratio of domestic shares refers to IndicatorName = 'Stocks traded, turnover ratio of domestic shares (%)'"}
{"sample_id": 2221, "db_id": "world_development_indicators", "final": {"question": "What is the agricultural land area in sq. km of Italy in 1968?", "sql": "SELECT Value FROM Indicators WHERE IndicatorName = 'Agricultural land (sq. km)' AND Year = 1968 AND CountryName = 'Italy'", "source_tables": ["indicators"]}, "evidence": "agricultural land area in sq. km refers value where indicatorname = 'Agricultural land (sq. km)'; Italy refers to countryname = 'Italy'; in 1968 refers to year = '1968'"}
{"sample_id": 2191, "db_id": "world_development_indicators", "final": {"question": "How many countries uses the 1968 System of National Accounts methodology?", "sql": "SELECT COUNT(CountryCode)  FROM Country WHERE SystemOfNationalAccounts = 'Country uses the 1968 System of National Accounts methodology.'", "source_tables": ["country"]}, "evidence": "uses the 1968 System of National Accounts methodology refers to SystemOfNationalAccounts = '1968 System of National Accounts methodology'"}
{"sample_id": 2214, "db_id": "world_development_indicators", "final": {"question": "Which nation completed its external debt reporting in 1980 and had a Land under cereal production value of 3018500?", "sql": "SELECT T2.CountryCode FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName LIKE 'Land under cereal production%' AND T1.Value = 3018500 AND T1.Year = 1980 AND T2.ExternalDebtReportingStatus = 'Actual'", "source_tables": ["country", "indicators"]}, "evidence": "completed its external debt reporting refers to ExternalDebtReportingStatus = 'Actual'; in 1980 refers to year = 1980; Land under cereal production value of 3018500 refers to value = 3018500"}
{"sample_id": 2187, "db_id": "world_development_indicators", "final": {"question": "Which country have data classified as official aid?", "sql": "SELECT DISTINCT T1.CountryCode FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data are classified as official aid.'", "source_tables": ["footnotes", "country"]}, "evidence": "which country refers to ShortName; have data classified as official aid refers to description = 'Data are classified as official aid.'"}
{"sample_id": 2157, "db_id": "world_development_indicators", "final": {"question": "List out the country code and country name of the rich countries using Euro as their currency unit", "sql": "SELECT DISTINCT T1.CountryCode, T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.CurrencyUnit = 'Euro' AND (T1.IncomeGroup = 'High income: OECD' OR T1.IncomeGroup = 'High income: nonOECD')", "source_tables": ["country", "indicators"]}, "evidence": "Non-OECD and OECD countries can be regarded as rich countries for those that are part of the High Income Group;"}
{"sample_id": 2166, "db_id": "world_development_indicators", "final": {"question": "Name the countries' long name with national accounts base year prior to 1980.", "sql": "SELECT LongName FROM Country WHERE NationalAccountsBaseYear < '1980' AND NationalAccountsBaseYear != ''", "source_tables": ["country"]}, "evidence": "national accounts base year prior to 1980 means before 1980 and refers to NationalAccountsBaseYear<1980;"}
{"sample_id": 2292, "db_id": "movielens", "final": {"question": "What is the most distinct rated movie with a running time of 0?", "sql": "SELECT DISTINCT T1.movieid FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.runningtime = 0 AND T2.rating = ( SELECT MAX(rating) FROM u2base )", "source_tables": ["u2base", "movies"]}, "evidence": ""}
{"sample_id": 2306, "db_id": "movielens", "final": {"question": "Which actor has acted in at least 2 French films? Please list their IDs.", "sql": "SELECT T2.actorid FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'France' GROUP BY T2.actorid HAVING COUNT(T1.movieid) > 2", "source_tables": ["movies2actors", "movies"]}, "evidence": "France is a country"}
{"sample_id": 2270, "db_id": "movielens", "final": {"question": "Movies with rating 3 are viewed by audiences in which distinct age group?", "sql": "SELECT DISTINCT T2.age FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 3", "source_tables": ["u2base", "users"]}, "evidence": "The audience and users are the same meaning"}
{"sample_id": 2321, "db_id": "movielens", "final": {"question": "List the user ids and ages who gave the rate 2 to the movie No. 2409051.", "sql": "SELECT T1.userid, T1.age FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T2.movieid = '2409051' AND T2.rating = 2", "source_tables": ["u2base", "users"]}, "evidence": ""}
{"sample_id": 2287, "db_id": "movielens", "final": {"question": "Please list the country of the movie that stars an actress who acts the worse.", "sql": "SELECT T3.country FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T1.a_gender = 'F' AND T1.a_quality = 0", "source_tables": ["movies2actors", "movies", "actors"]}, "evidence": "a_quality = 5 refers to act the best, a_quality = 0 refers to act the worst"}
{"sample_id": 2285, "db_id": "movielens", "final": {"question": "Please list the genre of the movies that are directed by the directors with the highest level of average revenue.", "sql": "SELECT T2.genre FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.avg_revenue = 4", "source_tables": ["movies2directors", "directors"]}, "evidence": ""}
{"sample_id": 2288, "db_id": "movielens", "final": {"question": "What is the highest average rating for action movies made in the USA?", "sql": "SELECT AVG(T2.rating) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid INNER JOIN movies2directors AS T3 ON T1.movieid = T3.movieid WHERE T1.country = 'USA' AND T3.genre = 'Action' GROUP BY T1.movieid ORDER BY AVG(T2.rating) DESC LIMIT 1", "source_tables": ["u2base", "movies", "movies2directors"]}, "evidence": "USA is a country"}
{"sample_id": 2313, "db_id": "movielens", "final": {"question": "How many latest released dramas and action movies?", "sql": "SELECT COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.year = 4 AND T1.genre IN ('Action', 'drama')", "source_tables": ["movies", "movies2directors"]}, "evidence": ""}
{"sample_id": 2264, "db_id": "movielens", "final": {"question": "How many female actors acted in the movies of year 4?", "sql": "SELECT COUNT(T2.actorid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T3.a_gender = 'F' AND T1.year = 4", "source_tables": ["movies2actors", "movies", "actors"]}, "evidence": "Female actors mean that a_gender = 'F'"}
{"sample_id": 2331, "db_id": "movielens", "final": {"question": "Calculate the percentage of female actors and quality 2 who have appeared twice at the casting of the film 1672580.", "sql": "SELECT CAST(SUM(IIF(T2.cast_num = 2 AND T1.a_quality = 2, 1, 0)) AS REAL) * 100 / COUNT(T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid WHERE T2.movieid = 1672580 AND T1.a_gender = 'F'", "source_tables": ["movies2actors", "actors"]}, "evidence": "Female actors mean that a_gender = 'F'; percentage can be computed by [cast_num = 2 AND a_quality = 2 in female) / (all female actors)] * 100%"}
{"sample_id": 2253, "db_id": "movielens", "final": {"question": "List the top 10 USA movies, by descending order, from the highest to the lowest, the user rating.", "sql": "SELECT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA' GROUP BY T1.movieid ORDER BY AVG(T1.rating) DESC LIMIT 10", "source_tables": ["u2base", "movies"]}, "evidence": "USA is a country"}
{"sample_id": 2281, "db_id": "movielens", "final": {"question": "Please list different IDs of movies that are the newest and have gotten the lowest rating.", "sql": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.year = 4 AND T1.rating = 1", "source_tables": ["u2base", "movies"]}, "evidence": "Year contains relative value, higer year value refers to newer date; Year = 4 refers to newest date, Year = 1 refer to oldest date; Lowest rating = 1"}
{"sample_id": 2310, "db_id": "movielens", "final": {"question": "How many directors with average revenue of 4 have made either action or adventure films?", "sql": "SELECT COUNT(T1.directorid) FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.avg_revenue = 4 AND (T2.genre = 'Adventure' OR T2.genre = 'Action')", "source_tables": ["movies2directors", "directors"]}, "evidence": ""}
{"sample_id": 2248, "db_id": "movielens", "final": {"question": "Among the users who gave a rating of 5, how many of them are male?", "sql": "SELECT COUNT(T1.userid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 5 AND T2.u_gender = 'M'", "source_tables": ["u2base", "users"]}, "evidence": "Male users mean that u_gender = 'M'"}
{"sample_id": 2271, "db_id": "movielens", "final": {"question": "Action movies are mostly directed by directors of which country?", "sql": "SELECT T3.country FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.directorid = T2.directorid INNER JOIN movies AS T3 ON T1.movieid = T3.movieid WHERE T1.genre = 'Action' GROUP BY T3.country ORDER BY COUNT(T3.country) DESC LIMIT 1", "source_tables": ["movies", "movies2directors", "directors"]}, "evidence": ""}
{"sample_id": 2303, "db_id": "movielens", "final": {"question": "What is the proportion of action movies directors who are called 'box office success paradox'?", "sql": "SELECT CAST(SUM(IIF(T2.avg_revenue > T2.d_quality, 1, 0)) AS REAL) * 100 / COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.directorid = T2.directorid WHERE T1.genre = 'Action'", "source_tables": ["movies2directors", "directors"]}, "evidence": "'box office success paradox' means average revenue exceeds their quality; The proportion can be computed by [(avg_revenue > d_quality) / ()] * 100%"}
{"sample_id": 2323, "db_id": "movielens", "final": {"question": "Which different movies from France got the least ratings?", "sql": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'France' AND T1.rating = 1", "source_tables": ["u2base", "movies"]}, "evidence": "France is a country"}
{"sample_id": 2324, "db_id": "movielens", "final": {"question": "How many female actors have been played a role in any of French or USA movies?", "sql": "SELECT COUNT(T2.actorid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country IN ('France', 'USA')", "source_tables": ["movies2actors", "movies"]}, "evidence": "French and USA are two countries; Female actors mean that a_gender = 'F'"}
{"sample_id": 2319, "db_id": "movielens", "final": {"question": "List the movie that has been rated most by 25 years old users.", "sql": "SELECT T2.movieid FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T1.age = 25 GROUP BY T2.movieid ORDER BY COUNT(T1.userid) DESC LIMIT 1", "source_tables": ["u2base", "users"]}, "evidence": ""}
{"sample_id": 2256, "db_id": "movielens", "final": {"question": "Among the best actors, how many of them got a rating of 5 to the movies they starred?", "sql": "SELECT COUNT(T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN u2base AS T3 ON T2.movieid = T3.movieid WHERE T1.a_quality = 5 AND T3.rating = 5", "source_tables": ["u2base", "movies2actors", "actors"]}, "evidence": ""}
{"sample_id": 2257, "db_id": "movielens", "final": {"question": "What is the average rating of the newest movies from France?", "sql": "SELECT AVG(T1.rating) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'france' AND T2.year = 4", "source_tables": ["u2base", "movies"]}, "evidence": "France is a country; year = 4 represents the newest date."}
{"sample_id": 2396, "db_id": "superstore", "final": {"question": "List the products that were ordered by Anne McFarland from the Western store.", "sql": "SELECT DISTINCT T3.\"Product Name\" FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T2.\"Customer Name\" = 'Anne McFarland'", "source_tables": ["people", "west_superstore", "product"]}, "evidence": "Anne McFarland' is the \"Customer Name\"; Western store refers to west_superstore; products refers to \"Product Name\""}
{"sample_id": 2411, "db_id": "superstore", "final": {"question": "What product category got the least sales in the west superstore?", "sql": "SELECT T2.Category FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" ORDER BY T1.Sales LIMIT 1", "source_tables": ["west_superstore", "product"]}, "evidence": "least sales refers to Sales = MIN(Sales)"}
{"sample_id": 2419, "db_id": "superstore", "final": {"question": "State the highest profit made by Anna Chung's orders in the Central Superstore.", "sql": "SELECT MAX(T2.Profit) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Anna Chung'", "source_tables": ["people", "central_superstore"]}, "evidence": "highest profit refers to max(Profit)"}
{"sample_id": 2409, "db_id": "superstore", "final": {"question": "What is the total quantity that Cindy Stewart order \"Lexmark X 9575 Professional All-in-One Color Printer\" in the south superstore?", "sql": "SELECT SUM(T1.Quantity) FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T2.\"Customer Name\" = 'Cindy Stewart' AND T3.\"Product Name\" = 'Lexmark X 9575 Professional All-in-One Color Printer'", "source_tables": ["south_superstore", "people", "product"]}, "evidence": "Lexmark X 9575 Professional All-in-One Color Printer' is the \"Product Name\""}
{"sample_id": 2417, "db_id": "superstore", "final": {"question": "Among the orders in Central superstore, which art product were ordered the most?", "sql": "SELECT T2.\"Product Name\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.\"Sub-Category\" = 'Art' GROUP BY T2.\"Product Name\" ORDER BY COUNT(T2.\"Product ID\") DESC LIMIT 1", "source_tables": ["central_superstore", "product"]}, "evidence": "art product refers to Sub-Category = 'Art'; the most refers to max(order_number)"}
{"sample_id": 2435, "db_id": "superstore", "final": {"question": "How many orders purchased by Aaron Bergman have been delivered with the slowest shipping speed?", "sql": "SELECT COUNT(*) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Aaron Bergman' AND T2.\"Ship Mode\" = 'Standard Class'", "source_tables": ["people", "central_superstore"]}, "evidence": "slowest shipping speed refers to \"Ship Mode\" = 'Standard Class'"}
{"sample_id": 2346, "db_id": "superstore", "final": {"question": "Among all the orders made by Aimee Bixby, what was the longest shipment time?", "sql": "SELECT MAX(strftime('%J', \"Ship Date\") - strftime('%J', \"Order Date\")) AS longestTimeDays FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Aimee Bixby'", "source_tables": ["people", "central_superstore"]}, "evidence": "made by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby'; longest shipment time refers to MAX(SUM(SUTRACT(julianday(\"Ship Date\"), julianday(\"Order Date\")), 1))"}
{"sample_id": 2429, "db_id": "superstore", "final": {"question": "How many orders with a quantity greater than 5 have been shipped by the fastest delivery method?", "sql": "SELECT COUNT(DISTINCT \"Order ID\") FROM central_superstore WHERE Quantity > 5 AND \"Ship Mode\" = 'First Class'", "source_tables": ["central_superstore"]}, "evidence": "orders with a quantity greater than 5 refers to Quantity > 5; shipped by the fastest delivery method refers to Ship Mode = 'First Class'"}
{"sample_id": 2410, "db_id": "superstore", "final": {"question": "List the name of all the products with order quantities greater than or equal to 10 in the central superstore that has been shipped by the slowest delivery method.", "sql": "SELECT DISTINCT T2.\"Product Name\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Ship Mode\" = 'Standard Class' AND T1.Quantity >= 10", "source_tables": ["central_superstore", "product"]}, "evidence": "name of all the products refers to Product Name; order quantities greater than or equal to 10 refers to COUNT(\"Order ID\") > = 10; slowest delivery refers to \"Ship Mode\" = 'Standard Class'"}
{"sample_id": 2367, "db_id": "superstore", "final": {"question": "What are the names of the products with a profit of no less than 1,000 in one single order?", "sql": "SELECT DISTINCT T2.\"Product Name\" FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T1.Profit > 1000", "source_tables": ["west_superstore", "product"]}, "evidence": "profit of no less than 1,000 refers to Profit > = 1000; names of the products refers to \"Product Name\""}
{"sample_id": 2441, "db_id": "superstore", "final": {"question": "How many furniture products were ordered at central superstore?", "sql": "SELECT COUNT(*) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.Category = 'Furniture'", "source_tables": ["central_superstore", "product"]}, "evidence": "furniture products refers to Category = 'Furniture'"}
{"sample_id": 2380, "db_id": "superstore", "final": {"question": "Give the customer segment from the West region that orders the order ID CA-2011-108189.", "sql": "SELECT DISTINCT T2.Segment FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.Region = 'West' AND T1.\"Order ID\" = 'CA-2011-108189'", "source_tables": ["people", "west_superstore"]}, "evidence": "Region = 'West'"}
{"sample_id": 2358, "db_id": "superstore", "final": {"question": "What was the total cost of Xerox 1952 ordered by Aimee Bixby on 2014/9/10?", "sql": "SELECT DISTINCT (T2.Sales / (1 - T2.discount)) * T2.Quantity - Profit FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Customer Name\" = 'Aimee Bixby' AND T3.\"Product Name\" = 'Xerox 1952' AND T2.\"Order Date\" = '2014-09-10'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "Xerox 1952 is a \"Product Name\"; ordered by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby'; on 2014/9/10 refers to \"Order Date\" = date('2014-09-10'); total cost refers to SUTRACT(MULTIPLY(DIVIDE(Sales, SUTRACT(1, discount)), Quantity), Profit)"}
{"sample_id": 2442, "db_id": "superstore", "final": {"question": "What are the names of the products that had been shipped in March 2013 at central superstore?", "sql": "SELECT DISTINCT T2.\"Product Name\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE strftime('%Y-%m', T1.\"Ship Date\") = '2013-03'", "source_tables": ["central_superstore", "product"]}, "evidence": "names of the products refers to Product Name; shipped in March 2013 refers to \"Ship Date\" = '2013-03%'"}
{"sample_id": 2382, "db_id": "superstore", "final": {"question": "Provide the order ID of Frank Olsen of the South region.", "sql": "SELECT T1.\"Order ID\" FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T2.Region = 'South' AND T2.\"Customer Name\" = 'Frank Olsen'", "source_tables": ["south_superstore", "people"]}, "evidence": "Frank Olsen' is the \"Customer Name\"; Region = 'South'"}
{"sample_id": 2420, "db_id": "superstore", "final": {"question": "How many orders were made by Corey Roper in 2015?", "sql": "SELECT COUNT(T2.\"Customer ID\") FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Corey Roper' AND STRFTIME('%Y', T2.\"Ship Date\") = '2015'", "source_tables": ["people", "central_superstore"]}, "evidence": ""}
{"sample_id": 2360, "db_id": "superstore", "final": {"question": "Who is the customer who purchased the largest total cost of products in a single order?", "sql": "SELECT T2.\"Customer Name\" FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" GROUP BY T1.\"Order ID\", T2.\"Customer Name\" ORDER BY SUM((T1.Sales / (1 - T1.Discount)) * T1.Quantity - T1.Profit) DESC LIMIT 1", "source_tables": ["people", "east_superstore"]}, "evidence": "largest total cost refers to MAX(SUTRACT(MULTIPLY(DIVIDE(Sales, SUTRACT(1, discount)), Quantity), Profit))"}
{"sample_id": 2377, "db_id": "superstore", "final": {"question": "What category does the item ordered by Katherine Murray on 11/4/2018 in the South region belong to?", "sql": "SELECT DISTINCT T3.Category FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T2.\"Customer Name\" = 'Katherine Murray' AND T1.\"Order Date\" = '2018-11-04' AND T2.Region = 'South'", "source_tables": ["south_superstore", "people", "product"]}, "evidence": "ordered by Katherine Murray refers to \"Customer Name\" = 'Katherine Murray'; on 11/4/2018 refers to \"Order Date\" = Date('2018-11-04');"}
{"sample_id": 2376, "db_id": "superstore", "final": {"question": "Which customer ordered 'Global High-Back Leather Tilter, Burgundy' on 10/13/2013 in the East region?", "sql": "SELECT DISTINCT T2.\"Customer Name\" FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T3.\"Product Name\" = 'Global High-Back Leather Tilter, Burgundy' AND T1.\"Order Date\" = '2013-10-13' AND T1.Region = 'East'", "source_tables": ["people", "product", "east_superstore"]}, "evidence": "'Global High-Back Leather Tilter, Burgundy' is the \"Product Name\"; on 10/13/2013 refers to \"Order Date\" = Date('2013-10-13'); Region = 'East'"}
{"sample_id": 2447, "db_id": "superstore", "final": {"question": "What is the percentage of furniture orders that were shipped through first class in 2013 at the Central superstore?", "sql": "SELECT CAST(SUM(CASE  WHEN T1.\"Ship Mode\" = 'First Class' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.Category = 'Furniture' AND STRFTIME('%Y', T1.\"Ship Date\") = '2013'", "source_tables": ["central_superstore", "product"]}, "evidence": "furniture refers to Category = 'Furniture'; shipped through first class in 2013 refers to ship mode = 'first class' and \"Ship Date\" = '2013%'; percentage = divide(sum(Order ID) when Category = 'Furniture' and \"Ship Date\" = '2013%', sum(Order ID)) as percentage"}
{"sample_id": 2416, "db_id": "superstore", "final": {"question": "What is the ratio between customers who live in Texas and customers who live in Indiana?", "sql": "SELECT CAST(SUM(CASE  WHEN State = 'Texas' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE  WHEN State = 'Indiana' THEN 1 ELSE 0 END) FROM people", "source_tables": ["people"]}, "evidence": "live in Texas refers to State = 'Texas'; live in Indiana refers to State = 'Indiana'; Ratio = divide(sum(State = 'Texas'), sum(State = 'Indiana'))"}
{"sample_id": 2426, "db_id": "superstore", "final": {"question": "Among the orders with sales value of no less than 5,000 in west superstore, how many were bought by the customers in California?", "sql": "SELECT COUNT(DISTINCT T1.\"Order ID\") FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" INNER JOIN people AS T3 ON T3.\"Customer ID\" = T1.\"Customer ID\" WHERE T1.Sales > 5000 AND T3.State = 'California' AND T2.Region = 'West'", "source_tables": ["people", "west_superstore", "product"]}, "evidence": "customers in California refers to State = 'California'; orders with sales value of no less than 5,000 refers to Sales > = 5,000"}
{"sample_id": 2366, "db_id": "superstore", "final": {"question": "How many customers in Chicago ordered at least 10 Cardinal EasyOpen D-Ring Binders in a single order?", "sql": "SELECT COUNT(DISTINCT T1.\"Customer ID\") FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T3.\"Product Name\" = 'Cardinal EasyOpen D-Ring Binders' AND T2.City = 'Chicago' AND T1.Quantity > 10", "source_tables": ["people", "west_superstore", "product"]}, "evidence": "at least 10 goods refers to Quantity > = 14; Cardinal EasyOpen D-Ring Binders refers to \"Product Name\"; customers in Chicago refers to City = 'Chicago'"}
{"sample_id": 2414, "db_id": "superstore", "final": {"question": "Calculate the average sales of \"\"Sharp AL-1530CS Digital Copier in the east and the west superstore.", "sql": "SELECT AVG(T1.Sales) FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T3.\"Product Name\" = 'Sharp AL-1530CS Digital Copier'", "source_tables": ["people", "west_superstore", "product"]}, "evidence": "Sharp AL-1530CS Digital Copier' is the \"Product Name\"; average sales = AVG(Sales)"}
{"sample_id": 2466, "db_id": "shooting", "final": {"question": "Among the 'Handgun' weapon used by subject, how many percent were 'Shoot and Miss'?", "sql": "SELECT CAST(SUM(subject_statuses = 'Shoot and Miss') AS REAL) * 100 / COUNT(case_number) FROM incidents WHERE subject_weapon = 'Handgun'", "source_tables": ["incidents"]}, "evidence": "'Handgun' weapon refers to subject_weapon = 'Handgun'; 'Shoot and Miss' refers to subject_statuses = 'Shoot and Miss'; percent = divide(count(incidents where subject_statuses = 'Shoot and Miss'), count(incidents)) where subject_weapon = 'Handgun' * 100%"}
{"sample_id": 2461, "db_id": "shooting", "final": {"question": "Among all the male officers, what is the percentage of them are White?", "sql": "SELECT CAST(SUM(IIF(race = 'W', 1, 0)) AS REAL) * 100 / COUNT(case_number) FROM officers WHERE gender = 'M'", "source_tables": ["officers"]}, "evidence": "male refers to gender = 'M'; white refers to race = 'W'; percentage = divide(count(officers where race = 'W'), count(officers)) where gender = 'M' * 100%"}
{"sample_id": 2486, "db_id": "shooting", "final": {"question": "Which type of weapon was used to attack the victim in the record number 031347-2015? What is the victim's race and gender?", "sql": "SELECT T1.subject_weapon, T2.race, T2.gender FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T1.case_number = '031347-2015'", "source_tables": ["incidents", "subjects"]}, "evidence": "type of weapon refers to subject_weapon; record number 031347-2015 refers to case_number = '031347-2015'"}
{"sample_id": 2480, "db_id": "shooting", "final": {"question": "How many instances were found in June 2015?", "sql": "SELECT COUNT(case_number) FROM incidents WHERE date BETWEEN '2015-06-01' AND '2015-06-30'", "source_tables": ["incidents"]}, "evidence": "in June 2015 refers to date between '2015-06-01' and '2015-06-30'; record number refers to case_number"}
{"sample_id": 2471, "db_id": "shooting", "final": {"question": "For case number '134472-2015', list the last name of the officers involved and state the subject statuses.", "sql": "SELECT T2.last_name, T1.subject_statuses FROM incidents AS T1 INNER JOIN officers AS T2 ON T1.case_number = T2.case_number WHERE T1.case_number = '134472-2015'", "source_tables": ["incidents", "officers"]}, "evidence": ""}
{"sample_id": 2483, "db_id": "shooting", "final": {"question": "What is the proportion of white males and females in the police force?", "sql": "SELECT CAST(SUM(gender = 'M') AS REAL) / SUM(gender = 'F') FROM officers WHERE race = 'W'", "source_tables": ["officers"]}, "evidence": "white refers to race = 'W'; male refers to gender = 'M'; female refers to gender = 'F'; proportion of white males = divide(count(officers where race = 'W' and gender = 'M'), count(officers)) * 100%; proportion of white females = divide(count(officers where race = 'W' and gender = 'F'), count(officers)) * 100%"}
{"sample_id": 2507, "db_id": "genes", "final": {"question": "List all genes whose interaction is with genes located in the nucleus in which it is positively correlated.", "sql": "SELECT T1.GeneID FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr > 0 AND T1.Localization = 'nucleus'", "source_tables": ["interactions", "genes"]}, "evidence": "If the Expression_Corr value is positive then it's positively correlated"}
{"sample_id": 2493, "db_id": "genes", "final": {"question": "Among the pairs of genes that are both located in the nucleus, what is the highest expression correlation score?", "sql": "SELECT T2.Expression_Corr FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 INNER JOIN Genes AS T3 ON T3.GeneID = T2.GeneID2 WHERE T1.Localization = 'nucleus' AND T3.Localization = 'nucleus' ORDER BY T2.Expression_Corr DESC LIMIT 1", "source_tables": ["interactions", "genes"]}, "evidence": ""}
{"sample_id": 2510, "db_id": "genes", "final": {"question": "Of the genes whose phenotype and motif are nucleic acid metabolism defects, PS00107, what percentage perform positive interaction with another gene?", "sql": "SELECT CAST(SUM(IIF(T2.Expression_Corr > 0, 1, 0)) AS REAL) * 100 / COUNT(T2.GeneID1) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Phenotype = 'Nucleic acid metabolism defects' AND T1.Motif = 'PS00107'", "source_tables": ["interactions", "genes"]}, "evidence": "Percentage of no interaction = [count(nucleic acid metabolism, PS00107, no interaction) / count(nucleic acid metabolism, PS00107) * 100%"}
{"sample_id": 2502, "db_id": "genes", "final": {"question": "Lists all genes by identifier number located in the cytoplasm and whose function is metabolism.", "sql": "SELECT DISTINCT GeneID FROM Genes WHERE Localization = 'cytoplasm' AND Function = 'METABOLISM'", "source_tables": ["genes"]}, "evidence": ""}
{"sample_id": 2495, "db_id": "genes", "final": {"question": "Among the pairs of genes that are not from the class of motorproteins, how many of them are negatively correlated?", "sql": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr < 0 AND T1.Class = 'Motorproteins'", "source_tables": ["interactions", "genes"]}, "evidence": "If Expression_Corr < 0, it means the negatively correlated"}
{"sample_id": 2491, "db_id": "genes", "final": {"question": "Among the genes with nucleic acid metabolism defects, how many of them can be found in the vacuole?", "sql": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Classification AS T2 ON T1.GeneID = T2.GeneID WHERE T2.Localization = 'vacuole' AND T1.Phenotype = 'Nucleic acid metabolism defects'", "source_tables": ["classification", "genes"]}, "evidence": ""}
{"sample_id": 2526, "db_id": "app_store", "final": {"question": "Which apps have multiple genres and what is the total sentiment subjectivity of these apps?", "sql": "SELECT SUM(T2.Sentiment_Subjectivity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Genres > 1", "source_tables": ["playstore", "user_reviews"]}, "evidence": "multiple genres refers to COUNT(Genres>1; total sentiment subjectivity = Sum(Sentiment_Subjectivity);"}
{"sample_id": 2550, "db_id": "app_store", "final": {"question": "Which apps have been reviewed more than 75 000 000 times and the content is suitable for teenagers?", "sql": "SELECT DISTINCT App FROM playstore WHERE Reviews > 75000000 AND \"Content Rating\" = 'Teen'", "source_tables": ["playstore"]}, "evidence": "Reviews>75000000; suitable for teenagers refers to Content Rating = 'Teen';"}
{"sample_id": 2532, "db_id": "app_store", "final": {"question": "How many of the reviews for the app \"Brit + Co\" have a comment?", "sql": "SELECT COUNT(App) FROM user_reviews WHERE App = 'Brit + Co' AND Translated_Review IS NOT NULL", "source_tables": ["user_reviews"]}, "evidence": "Brit + Co refers to App = 'Brit + Co'; comment refers to Translated Review NOT null;"}
{"sample_id": 2551, "db_id": "app_store", "final": {"question": "List out genre that have downloads more than 1000000000.", "sql": "SELECT Genres FROM playstore WHERE Installs = '1,000,000,000+' GROUP BY Genres", "source_tables": ["playstore"]}, "evidence": "downloads and installs are synonyms; Installs = '1,000,000,000+';"}
{"sample_id": 2547, "db_id": "app_store", "final": {"question": "What is the rating and the total Sentiment subjectivity score of \"Onefootball - Soccer Scores\"?", "sql": "SELECT T1.Rating, SUM(T2.Sentiment_Subjectivity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Onefootball - Soccer Scores'", "source_tables": ["playstore", "user_reviews"]}, "evidence": "Onefootball - Soccer Scores refers to App = 'Onefootball - Soccer Scores';"}
{"sample_id": 2573, "db_id": "app_store", "final": {"question": "Among the role playing game genre, how many are targeted to teens and what is their average sentiment polarity score?", "sql": "SELECT COUNT(T1.App), AVG(T2.Sentiment_Polarity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.\"Content Rating\" = 'Teen' AND T1.Genres = 'Role Playing'", "source_tables": ["playstore", "user_reviews"]}, "evidence": "targeted to teen refers to Content Rating = 'Teen'; average = AVG(Sentiment_Polarity);"}
{"sample_id": 2552, "db_id": "app_store", "final": {"question": "What is the average price for a dating application?", "sql": "SELECT AVG(Price) FROM playstore WHERE Genres = 'Dating'", "source_tables": ["playstore"]}, "evidence": "average price = AVG(Price where Genre = 'Dating'); dating application refers to Genre = 'Dating';"}
{"sample_id": 2533, "db_id": "app_store", "final": {"question": "List the top 5 shopping apps with the most reviews.", "sql": "SELECT DISTINCT App FROM playstore WHERE Genres = 'Shopping' GROUP BY App ORDER BY COUNT(App) DESC LIMIT 5", "source_tables": ["playstore"]}, "evidence": "shopping apps refers to Genre = 'Shopping'; most reviews refers to MAX(Reviews);"}
{"sample_id": 2570, "db_id": "app_store", "final": {"question": "What is the rating of Dragon Ball Legends and how many users dislike this App?", "sql": "SELECT T1.Rating, COUNT(T2.Sentiment_Polarity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Dragon Ball Legends' AND CAST(Sentiment_Polarity AS INTEGER) < -0.5", "source_tables": ["playstore", "user_reviews"]}, "evidence": "Dragon Ball Legends is the app; users who dislikes the app refers to Sentiment_Polarity<-0.5;"}
{"sample_id": 2536, "db_id": "app_store", "final": {"question": "List all the negative comments on the \"Dog Run - Pet Dog Simulator\" app.", "sql": "SELECT Translated_Review FROM user_reviews WHERE App = 'Dog Run - Pet Dog Simulator' AND Sentiment = 'Negative'", "source_tables": ["user_reviews"]}, "evidence": "negative comment refers to Sentiment = 'Negative';"}
{"sample_id": 2561, "db_id": "app_store", "final": {"question": "List down the rating for the App Learn C++.", "sql": "SELECT DISTINCT Rating FROM playstore WHERE App = 'Learn C++'", "source_tables": ["playstore"]}, "evidence": "FALSE;"}
{"sample_id": 2566, "db_id": "app_store", "final": {"question": "List the top 5 lowest rated puzzle games and count the number of negative sentiments the games received.", "sql": "SELECT T1.App, COUNT(T1.App) COUNTNUMBER FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Sentiment = 'Negative' GROUP BY T1.App ORDER BY T1.Rating LIMIT 5", "source_tables": ["playstore", "user_reviews"]}, "evidence": "lowest rating refers to MIN(Rating); puzzle is the genre;"}
{"sample_id": 2697, "db_id": "regional_sales", "final": {"question": "What percentage of sell orders on 04/04/2020 were for the state of New York?", "sql": "SELECT CAST(SUM(CASE WHEN T2.State = 'New York' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderDate = '4/4/20'", "source_tables": ["store locations", "sales orders"]}, "evidence": "sales order on 04/04/2020 refers to OrderDate = '4/4/20'; 'New York' is\u00a0 the City Name; percentage = Divide (Sum(OrderNumber where City Name = 'New York'), Count (OrderNumber)) * 100"}
{"sample_id": 2680, "db_id": "regional_sales", "final": {"question": "Indicate the name of the customers who have placed an order of 3 units in February 2018.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.\"Order Quantity\" = 3 AND T2.OrderDate LIKE '2/%/18' THEN T1.\"Customer Names\" END AS T FROM Customers T1 INNER JOIN \"Sales Orders\" T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL", "source_tables": ["customers", "sales orders"]}, "evidence": "name of customer refers to Customer Names; order of 3 unit refers to Order Quantity = 3; in February 2018 refers to OrderDate LIKE '2/%/18'"}
{"sample_id": 2653, "db_id": "regional_sales", "final": {"question": "State the order number where Qualitest ordered the highest product quantity.", "sql": "SELECT T1.OrderNumber FROM \"Sales Orders\" AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.\"Customer Names\" = 'Qualitest ' ORDER BY T1.\"Order Quantity\" DESC LIMIT 1", "source_tables": ["customers", "sales orders"]}, "evidence": "Qualitest ordered the highest product quantity refers to Customer Names where MAX(Order Quantity);"}
{"sample_id": 2642, "db_id": "regional_sales", "final": {"question": "Please list the customer names whose order quantity was more than 5 on 6/1/2018.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN SUM(T1.\"Order Quantity\") > 5 THEN T2.\"Customer Names\" END AS T FROM \"Sales Orders\" T1 INNER JOIN Customers T2 ON T2.CustomerID = T1._CustomerID WHERE T1.OrderDate = '6/1/18' GROUP BY T1._CustomerID ) WHERE T IS NOT NULL", "source_tables": ["customers", "sales orders"]}, "evidence": "order quantity was more than 5 on 6/1/2018 refers to Order Quantity > 5 where OrderDate = 6/1/2018;"}
{"sample_id": 2701, "db_id": "regional_sales", "final": {"question": "Indicate order numbers with an order date after 1/1/2018.", "sql": "SELECT DISTINCT T FROM ( SELECT CASE  WHEN OrderDate > '1/1/18' THEN OrderNumber ELSE NULL END AS T FROM \"Sales Orders\" ) WHERE T IS NOT NULL", "source_tables": ["sales orders"]}, "evidence": "order date after 1/1/2018 refers to OrderDate > '1/1/2018'"}
{"sample_id": 2610, "db_id": "regional_sales", "final": {"question": "List out the product name of order which has unit cost of 781.22.", "sql": "SELECT T FROM ( SELECT DISTINCT IIF(T1.\"Unit Cost\" = 781.22, T2.\"Product Name\", NULL) AS T FROM \"Sales Orders\" T1 INNER JOIN Products T2 ON T2.ProductID = T1._ProductID ) WHERE T IS NOT NULL", "source_tables": ["products", "sales orders"]}, "evidence": ""}
{"sample_id": 2623, "db_id": "regional_sales", "final": {"question": "What is the customer names of orders which have unit cost greater than 4000USD?", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.\"Unit Cost\" > 4000 THEN T1.\"Customer Names\" END AS T FROM Customers T1 INNER JOIN \"Sales Orders\" T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL", "source_tables": ["customers", "sales orders"]}, "evidence": "unit cost greater than 4000USD refers to Unit Cost > 4000;"}
{"sample_id": 2647, "db_id": "regional_sales", "final": {"question": "List all the name of products with the ID of 30 to 40.", "sql": "SELECT T FROM ( SELECT CASE  WHEN ProductID BETWEEN 30 AND 40 THEN \"Product Name\" ELSE NULL END AS T FROM Products ) WHERE T IS NOT NULL", "source_tables": ["products"]}, "evidence": "products with the ID of 30 to 40 refer to Product Name WHERE ProductID BETWEEN 30 AND 40;"}
{"sample_id": 2679, "db_id": "regional_sales", "final": {"question": "What are the top 10 products with the highest net profit?", "sql": "SELECT T2.\"Product Name\" FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID GROUP BY T1._ProductID ORDER BY SUM(REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '')) DESC LIMIT 10", "source_tables": ["products", "sales orders"]}, "evidence": "products refers to Product Name; highest net profit = Max(Subtract(Unit Price, Unit Cost))"}
{"sample_id": 2711, "db_id": "regional_sales", "final": {"question": "Please indicate store id in the state of California that have been applied 20% discount in store.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.State = 'California' AND T1.\"Sales Channel\" = 'In-Store' AND T1.\"Discount Applied\" = 0.2 THEN T2.StoreID END AS T FROM \"Sales Orders\" T1 INNER JOIN \"Store Locations\" T2 ON T2.StoreID = T1._StoreID ) WHERE T IS NOT NULL", "source_tables": ["store locations", "sales orders"]}, "evidence": "\"California\" is the name of State; in store refers to Sales Channel = 'In-Store'; 20% discount refers to Discount Applied = '0.2'"}
{"sample_id": 2656, "db_id": "regional_sales", "final": {"question": "Among the products sold in Maricopa County, which was the least sold?", "sql": "SELECT T1.\"Product Name\" FROM Products AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._ProductID = T1.ProductID INNER JOIN \"Store Locations\" AS T3 ON T3.StoreID = T2._StoreID WHERE T3.County = 'Maricopa County' ORDER BY T2.\"Order Quantity\" ASC LIMIT 1", "source_tables": ["products", "store locations", "sales orders"]}, "evidence": "the least sold product refers to Product Name where MIN(Order Quantity);"}
{"sample_id": 2687, "db_id": "regional_sales", "final": {"question": "List the 5 sales teams that have made sales with the highest net profits.", "sql": "SELECT T2.\"Sales Team\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID ORDER BY REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '') DESC LIMIT 5", "source_tables": ["sales team", "sales orders"]}, "evidence": "highest net profit = Max(Subtract (Unit Price, Unit Cost))"}
{"sample_id": 2686, "db_id": "regional_sales", "final": {"question": "What sales channels are used the most in the 3 places with the highest median income?", "sql": "SELECT \"Sales Channel\" FROM ( SELECT T1.\"Sales Channel\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID ORDER BY T2.\"Median Income\" DESC LIMIT 3 ) GROUP BY \"Sales Channel\" ORDER BY COUNT(\"Sales Channel\") DESC LIMIT 1", "source_tables": ["store locations", "sales orders"]}, "evidence": "highest median income refers to Max(Median Income)"}
{"sample_id": 2612, "db_id": "regional_sales", "final": {"question": "How many furniture cushions orders which have date of order in 2018?", "sql": "SELECT SUM(CASE WHEN T1.OrderDate LIKE '%/%/18' AND T2.\"Product Name\" = 'Furniture Cushions' THEN 1 ELSE 0 END) FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID", "source_tables": ["products", "sales orders"]}, "evidence": "furniture cushions orders refer to OrderNumber where Product Name = 'Furniture Cushions'; date of order in 2018 refers to SUBSTR(OrderDate, -2) = '18'"}
{"sample_id": 2713, "db_id": "regional_sales", "final": {"question": "Please indicate total order quantity of product Candles and calculate the percentage of such product among all the orders.", "sql": "SELECT SUM(CASE WHEN T1.\"Product Name\" = 'Candles' THEN T2.\"Order Quantity\" ELSE 0 END), CAST(SUM(CASE WHEN T1.\"Product Name\" = 'Candles' THEN T2.\"Order Quantity\" ELSE 0 END) AS REAL) * 100 / SUM(T2.\"Order Quantity\") FROM Products AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._ProductID = T1.ProductID INNER JOIN \"Store Locations\" AS T3 ON T3.StoreID = T2._StoreID", "source_tables": ["products", "store locations", "sales orders"]}, "evidence": "total order quantity refers to Sum (Order Quantity); 'Candles' is the Products Name; percentage = Divide (Sum(Order Quantity where Product Name = 'Candles'), Sum(Order Quantity)) * 100"}
{"sample_id": 2638, "db_id": "regional_sales", "final": {"question": "What is the detailed position of the store which has order SO - 000115?", "sql": "SELECT T2.Latitude, T2.Longitude FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderNumber = 'SO - 000115'", "source_tables": ["store locations", "sales orders"]}, "evidence": "Latitude and Longitude coordinates can be used to identify the detailed position of stores; store refers to StoreID WHERE OrderNumber = 'SO - 000115';"}
{"sample_id": 2582, "db_id": "regional_sales", "final": {"question": "Name the most expensive ordered? Who, when was it ordered?", "sql": "SELECT T2.OrderNumber, T1.\"Customer Names\", T2.OrderDate FROM Customers AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID ORDER BY T2.\"Unit Cost\" DESC LIMIT 1", "source_tables": ["customers", "products", "sales orders"]}, "evidence": "the most expensive refers to MAX(Unit Cost); who refers to Customer Names; when refers to OrderDate;"}
{"sample_id": 2671, "db_id": "regional_sales", "final": {"question": "List the order numbers and product names which were ordered on 6th June, 2018.", "sql": "SELECT DISTINCT OrderNumber, \"Product Name\" FROM ( SELECT IIF(T2.OrderDate = '6/6/18', T2.OrderNumber, NULL) AS \"OrderNumber\" , IIF(T2.OrderDate = '6/6/18', T1.\"Product Name\", NULL) AS \"Product Name\" FROM Products T1 INNER JOIN \"Sales Orders\" T2 ON T2._ProductID = T1.ProductID ) WHERE OrderNumber IS NOT NULL AND \"Product Name\" IS NOT NULL", "source_tables": ["products", "sales orders"]}, "evidence": "ordered on 6th June 2018 refers to OrderDate = '6/5/18'"}
{"sample_id": 2669, "db_id": "regional_sales", "final": {"question": "Count the number of orders made from the store in city with population of 3000000 to 4000000.", "sql": "SELECT COUNT(T1.OrderNumber) FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T2.Population BETWEEN 3000000 AND 4000000", "source_tables": ["store locations", "sales orders"]}, "evidence": "number of order refers to OrderNumber; population of 3000000 to 4000000 refers to Population BETWEEN 3000000 AND 4000000"}
{"sample_id": 2725, "db_id": "regional_sales", "final": {"question": "In 2019, how many orders were shipped by the sales team with the highest number of orders in the said year? Provide the name of the sales team.", "sql": "SELECT COUNT(T1.OrderNumber), T2.\"Sales Team\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderDate LIKE '%/%/19' AND T1.ShipDate LIKE '%/%/19' GROUP BY T2.\"Sales Team\" ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1", "source_tables": ["sales team", "sales orders"]}, "evidence": "shipped refers to ShipDate; in 2019 refers to shipped in 2019 refers to SUBSTR(ShipDate, -2) = '19'; order in the said year refers to SUBSTR(OrderDate, -2) = '19'; highest number of order refers to Max(Count(OrderNumber))"}
{"sample_id": 2579, "db_id": "regional_sales", "final": {"question": "List all the order numbers along with its product name for each order under the sales team of 'Douglas Tucker'.", "sql": "SELECT DISTINCT T1.ProductID, T1.\"Product Name\" FROM Products AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._ProductID = T1.ProductID INNER JOIN \"Sales Team\" AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T3.\"Sales Team\" = 'Douglas Tucker'", "source_tables": ["sales team", "products", "sales orders"]}, "evidence": ""}
{"sample_id": 2625, "db_id": "regional_sales", "final": {"question": "Which city has the largest population?", "sql": "SELECT \"City Name\" FROM \"Store Locations\" ORDER BY Population DESC LIMIT 1", "source_tables": ["store locations"]}, "evidence": "city has the largest population refers to City Name where MAX(Population);"}
{"sample_id": 2602, "db_id": "regional_sales", "final": {"question": "Compare the number of orders between \"Platters\" and \"Serveware\" products.", "sql": "SELECT SUM(CASE WHEN T2.\"Product Name\" = 'Platters' THEN 1 ELSE 0 END) AS num1 , SUM(CASE WHEN T2.\"Product Name\" = 'Serveware' THEN 1 ELSE 0 END) AS num2 FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID", "source_tables": ["products", "sales orders"]}, "evidence": "COUNT(OrderNumber where Product Name = 'Platters') > COUNT(OrderNumber where Product Name = 'Serveware');"}
{"sample_id": 2710, "db_id": "regional_sales", "final": {"question": "Among sales teams in Midwest region, which sales team has an order quantity greater than 5?", "sql": "SELECT DISTINCT T2.\"Sales Team\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.Region = 'Midwest' AND T1.\"Order Quantity\" > 5", "source_tables": ["sales team", "sales orders"]}, "evidence": "order quantity greater than 5 refers to Order Quantity > 5"}
{"sample_id": 2718, "db_id": "regional_sales", "final": {"question": "How many online orders were shipped during the month of June 2018?", "sql": "SELECT SUM(IIF(ShipDate LIKE '6/%/18' AND \"Sales Channel\" = 'Online', 1, 0)) FROM \"Sales Orders\"", "source_tables": ["sales orders"]}, "evidence": "online orders refers to Sales Channel = 'Online'; shipped during the month of June 2018 refers to SUBSTR(ShipDate, 1, 1) = '6' AND SUBSTR(ShipDate,-2) = '18'"}
{"sample_id": 2714, "db_id": "regional_sales", "final": {"question": "Which region is Joshua Bennet located in?", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN \"Sales Team\" = 'Joshua Bennett' THEN Region ELSE NULL END AS T FROM \"Sales Team\" ) WHERE T IS NOT NULL", "source_tables": ["sales team"]}, "evidence": "\"Joshua Bennett\" is the name of Sales Team"}
{"sample_id": 2685, "db_id": "regional_sales", "final": {"question": "How many stores procured products on October 27, 2018, in the city of Oregon?", "sql": "SELECT SUM(CASE WHEN T1.ProcuredDate = '10/27/18' AND T2.\"City Name\" = 'Orlando' THEN 1 ELSE 0 END) FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID", "source_tables": ["store locations", "sales orders"]}, "evidence": "October 27, 2018 refers to ProcuredDate = '10/27/18'; 'Oregon' is the State"}
{"sample_id": 2632, "db_id": "regional_sales", "final": {"question": "From 2018 to 2020, which year did the George Lewis group have the highest number of orders?", "sql": "SELECT SUBSTR(T1.OrderDate, -2, 2) FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.\"Sales Team\" = 'George Lewis' GROUP BY SUBSTR(T1.OrderDate, -2, 2) ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1", "source_tables": ["sales team", "sales orders"]}, "evidence": "George Lewis refers to Sales Team; the highest number of orders refers to MAX(COUNT(OrderNumber)); which year from 2018 to 2020 refers to SUBSTR(OrderDate, -2) IN ('18', '19', '20') GROUP BY SUBSTR(OrderDate, -2);"}
{"sample_id": 2595, "db_id": "regional_sales", "final": {"question": "List the ID, city, state and region for the store type which is fewer between borough and CDP.", "sql": "SELECT DISTINCT T2.StoreID, T2.\"City Name\", T1.State, T2.Type FROM Regions AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StateCode = T1.StateCode WHERE T2.Type = 'Borough' OR T2.Type = 'CDP'", "source_tables": ["regions", "store locations"]}, "evidence": "COUNT(StoreID) < COUNT(StoreID where Type = 'Borough') < COUNT(StoreID where Type = 'CDP');"}
{"sample_id": 2723, "db_id": "regional_sales", "final": {"question": "In the West, how many stores are there in the city whose land area is below 20,000,000?", "sql": "SELECT SUM(CASE WHEN T1.Region = 'West' AND T2.\"Land Area\" < 20000000 THEN 1 ELSE 0 END) FROM Regions AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StateCode = T1.StateCode", "source_tables": ["regions", "store locations"]}, "evidence": "\"West\" is the Region; land area is below 20,000,000 refers to Land Area < 20,000,000"}
{"sample_id": 2708, "db_id": "regional_sales", "final": {"question": "Which store in Arizona has the most net profit?", "sql": "SELECT T2.StoreID FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T2.State = 'Arizona' ORDER BY T1.\"Unit Price\" - T1.\"Unit Cost\" DESC LIMIT 1", "source_tables": ["store locations", "sales orders"]}, "evidence": "\"Arizona\" is the name of State; most net profit = Max(Subtract( Unit Price, Unit Cost))"}
{"sample_id": 2591, "db_id": "regional_sales", "final": {"question": "List down the product IDs and names that include the word \"Outdoor\".", "sql": "SELECT ProductID, T FROM ( SELECT ProductID , CASE  WHEN \"Product Name\" LIKE '%Outdoor%' THEN \"Product Name\" ELSE NULL END AS T FROM Products ) WHERE T IS NOT NULL ORDER BY T DESC", "source_tables": ["products"]}, "evidence": "names that include the word \"Outdoor\" refer to Product Name LIKE '%Outdoor%';"}
{"sample_id": 2738, "db_id": "regional_sales", "final": {"question": "What was the best discount applied to sales orders in 2020?", "sql": "SELECT MAX(\"Discount Applied\") FROM \"Sales Orders\" WHERE OrderDate LIKE '%/%/20'", "source_tables": ["sales orders"]}, "evidence": "sales orders in 2020 refers to Substr(OrderDate, -2) = '20'; best discount applied refers to Max(Discount Applied)"}
{"sample_id": 2727, "db_id": "regional_sales", "final": {"question": "What is the detailed coordinates of the store where the product with the 4th highest profit were purchased from?", "sql": "SELECT T2.Latitude, T2.Longitude FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID ORDER BY REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '') DESC LIMIT 3, 1", "source_tables": ["store locations", "sales orders"]}, "evidence": "detailed coordinates refers to Latitude, Longitude; highest net profit = Max(Subtract(Unit Price, Unit Cost))"}
{"sample_id": 2787, "db_id": "european_football_1", "final": {"question": "How many times did the team Werder Bremen win as the away team in matches of the Bundesliga division?", "sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.AwayTeam = 'Werder Bremen' AND T1.FTR = 'A'", "source_tables": ["divisions", "matchs"]}, "evidence": "Bundesliga is the name of division; win as the away team refers to FTR = 'A', where 'A' stands for away victory;"}
{"sample_id": 2777, "db_id": "european_football_1", "final": {"question": "How many Scottish League One games took place on the day that \"Pro Vercelli\" and \"Pescara\"had a 5-2 game?", "sql": "SELECT COUNT(T1.Date) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Scottish League One' AND T1.Date = ( SELECT Date FROM matchs WHERE FTHG = 5 AND FTAG = 2 AND HomeTeam = 'Pro Vercelli' AND AwayTeam = 'Pescara' )", "source_tables": ["divisions", "matchs"]}, "evidence": "Pro Vercelli and Pescara are names of teams; HomeTeam = 'Pro Vercelli'; AwayTeam = 'Pescara'; 5-2 is a score where FTHG = '5' and FTAG = '2'; Scottish League One is a name of division; games refer to Div;"}
{"sample_id": 2778, "db_id": "european_football_1", "final": {"question": "List the number of games that ended up with 5-0 in Greece.", "sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.country = 'Greece' AND T1.FTHG = 5 AND T1.FTAG = 0", "source_tables": ["divisions", "matchs"]}, "evidence": "5-0 is a score where FTHG = '5' and FTAG = '0'; Greece is a name of country; games refer to Div;"}
{"sample_id": 2759, "db_id": "european_football_1", "final": {"question": "In which division was the match between Hibernian, the away team, and Hearts, the home team, played? To which country does this division belong?", "sql": "SELECT DISTINCT T2.division,T2.country FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.HomeTeam = 'Hearts' AND T1.AwayTeam = 'Hibernian'", "source_tables": ["divisions", "matchs"]}, "evidence": "FALSE;"}
{"sample_id": 2776, "db_id": "european_football_1", "final": {"question": "Give the full name of the divison that had the most 0-0 games.", "sql": "SELECT T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.FTAG = 0 AND T1.FTHG = 0 GROUP BY T2.division ORDER BY COUNT(T1.FTAG) DESC LIMIT 1", "source_tables": ["divisions", "matchs"]}, "evidence": "the most 0-0 games means a no-score draw and refers to MAX(COUNT(Div where FTHG = '0' and FTAG = '0'));"}
{"sample_id": 2775, "db_id": "european_football_1", "final": {"question": "Which division had the most games with more than 5 total field goals on 2020/2/22? Give the full name of the division?", "sql": "SELECT T2.division, T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.Date = '2020-02-22' AND T1.FTAG + T1.FTHG > 5 ORDER BY T1.FTAG + T1.FTHG DESC LIMIT 1", "source_tables": ["divisions", "matchs"]}, "evidence": "more than 5 total field goals refers to SUM(FTHG, FTAG)>5, which are short names for Final-time Home-team Goals and Final-time Away-team Goals; 2020/2/22 is a date;"}
{"sample_id": 2764, "db_id": "european_football_1", "final": {"question": "In how many matches in the Seria A division did both teams have equal goals?", "sql": "SELECT COUNT(T1.FTR) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Seria A' AND T1.FTR = 'D'", "source_tables": ["divisions", "matchs"]}, "evidence": "Seria A is a name of division; equal goals refers to FTR = 'D', where D stands for draft;"}
{"sample_id": 2773, "db_id": "european_football_1", "final": {"question": "Which country had the game that Away team made the most goals?", "sql": "SELECT T2.country FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division GROUP BY T2.country ORDER BY SUM(T1.FTAG) DESC LIMIT 1", "source_tables": ["divisions", "matchs"]}, "evidence": "the most goals refer to MAX(FTAG), which is a short name for Final-time Away-team Goals;"}
{"sample_id": 2762, "db_id": "european_football_1", "final": {"question": "What is the name of the division that has had the lowest number of draft matches in the 2019 season?", "sql": "SELECT T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2019 AND T1.FTR = 'D' GROUP BY T2.division ORDER BY COUNT(FTR) LIMIT 1", "source_tables": ["divisions", "matchs"]}, "evidence": "the lowest number of draft matches refers to MIN(COUNT(FTR = 'D'));"}
{"sample_id": 2748, "db_id": "european_football_1", "final": {"question": "How many matches played in the 2019 season of Scottish Championship league were ended with an equal result of 2-2?", "sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2019 AND T2.name = 'Scottish Championship' AND T1.FTAG = 2 AND T1.FTHG = 2", "source_tables": ["divisions", "matchs"]}, "evidence": "matches refer to Div; Scottish Championship is a name of the league; equal result of 2-2 refers to FTAG = 2 AND FTHG = 2;"}
{"sample_id": 2758, "db_id": "european_football_1", "final": {"question": "How many matches were played in the Scottish Premiership division from 2006 to 2008?", "sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Scottish Premiership' AND (T1.season BETWEEN 2006 AND 2008)", "source_tables": ["divisions", "matchs"]}, "evidence": "Scottish Premiership is a name of division; from 2006 to 2008 means seasons between 2006 and 2008;"}
{"sample_id": 2742, "db_id": "european_football_1", "final": {"question": "Of all the teams that played as a team away against Caen in the 2010 season, which one has the highest winning percentage?", "sql": "SELECT AwayTeam FROM matchs WHERE HomeTeam = 'Caen' AND season = 2010 AND FTR = 'A' GROUP BY AwayTeam ORDER BY COUNT(AwayTeam) DESC LIMIT 1", "source_tables": ["matchs"]}, "evidence": "Caen refers to HomeTeam; which one refers to AwayTeam; the highest winning percentage = MAX(DIVIDE(COUNT(FTR = 'A' where HomeTeam = 'Caen', season = '2010')), COUNT(Div where HomeTeam = 'Caen', season = '2010')) as percentage;"}
{"sample_id": 2937, "db_id": "professional_basketball", "final": {"question": "Which team that didn't play in playoffs had the most total rebounds in the year 1997?", "sql": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.PostGP = 0 AND T1.year = 1997 ORDER BY T1.rebounds DESC LIMIT 1", "source_tables": ["players_teams", "teams"]}, "evidence": "didn't play in playoffs refers to PostGP = 0; in the year 1997 refers to year = 1997; the most total rebounds refers to max(o_tmRebound)"}
{"sample_id": 2910, "db_id": "professional_basketball", "final": {"question": "What is the percentage of players who attended Auburn University and won an \"All-Defensive Second Team\" award?", "sql": "SELECT CAST(SUM(CASE WHEN T2.award = 'All-Defensive Second Team' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T1.college = 'Auburn'", "source_tables": ["players", "awards_players"]}, "evidence": "Auburn University refers to college = 'Auburn'; won an \"All-Defensive Second Team\" award refers to award = 'All-Defensive Second Team'; percentage = divide(count(playerID where award = 'All-Defensive Second Team'), count(playerID)) where college = 'Auburn' * 100%"}
{"sample_id": 2821, "db_id": "professional_basketball", "final": {"question": "Please list the name of the coach who has served more than 2 NBA teams.", "sql": "SELECT coachID FROM coaches GROUP BY coachID HAVING COUNT(DISTINCT tmID) > 2", "source_tables": ["coaches"]}, "evidence": "\"NBA\" is the lgID; server more than 2 teams refers to Count(tmID) = 2"}
{"sample_id": 2841, "db_id": "professional_basketball", "final": {"question": "From 1962 to 1975, how many coaches received the award?", "sql": "SELECT COUNT(DISTINCT coachID) FROM awards_coaches WHERE year BETWEEN 1962 AND 1975", "source_tables": ["awards_coaches"]}, "evidence": "from 1960 to 1975 refers to year between 1960 and 1975"}
{"sample_id": 2830, "db_id": "professional_basketball", "final": {"question": "Among the players born in Whitestone, how many of them have won the MVP?", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Most Valuable Player' AND T1.birthCity = 'Houston'", "source_tables": ["players", "awards_players"]}, "evidence": "\"Whitestone\" is the birthCity of the player; won the MVP refers to award = 'Most Valuable Player'"}
{"sample_id": 2846, "db_id": "professional_basketball", "final": {"question": "What is the minimum weight of all-star players coming from UCLA college?", "sql": "SELECT MIN(T1.weight) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.college = 'UCLA'", "source_tables": ["players", "player_allstar"]}, "evidence": "minimum weight refers to Min(weight)"}
{"sample_id": 2904, "db_id": "professional_basketball", "final": {"question": "Percentage of games lost out of total games played by the Houston Mavericks", "sql": "SELECT CAST(SUM(lost) AS REAL) * 100 / SUM(games) FROM teams WHERE name = 'Houston Mavericks'", "source_tables": ["teams"]}, "evidence": "Houston Mavericks refers to name = 'Houston Mavericks'; percentage = divide(sum(lost), sum(games)) * 100%"}
{"sample_id": 2876, "db_id": "professional_basketball", "final": {"question": "From 1950 to 1970, how many coaches who received more than 1 award?", "sql": "SELECT COUNT(coachID) FROM awards_coaches WHERE year BETWEEN 1950 AND 1970 GROUP BY coachID HAVING COUNT(coachID) > 1", "source_tables": ["awards_coaches"]}, "evidence": "from 1950 to 1970 refers to year between 1950 and 1970; more than 3 awards refers to count(award) > 3"}
{"sample_id": 2951, "db_id": "professional_basketball", "final": {"question": "Which team did the all league rebound champion play in 1997? Give the full name of the team.", "sql": "SELECT T1.name FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.year = 1997 GROUP BY T1.name ORDER BY SUM(rebounds + dRebounds) DESC LIMIT 1", "source_tables": ["players_teams", "teams"]}, "evidence": "rebound champion refers to max(rebounds); 1997 refers to 1997; full name refers to teams.name"}
{"sample_id": 2889, "db_id": "professional_basketball", "final": {"question": "List the full name and age of the player when he won the \"Finals MVP\" in 2003.", "sql": "SELECT T1.firstName, T1.middleName, T1.lastName , 2003 - strftime('%Y', T1.birthDate) FROM awards_players AS T2 JOIN players AS T1 ON T2.playerID = T1.playerID WHERE T2.award = 'Finals MVP' AND T2.year = 2003", "source_tables": ["players", "awards_players"]}, "evidence": "full name refers to firstName, middleName, lastName; age = subtract(2003, year(birthDate)); won the \"Finals MVP\" refers to award = 'Finals MVP'; in 2003 refers to year = 2003"}
{"sample_id": 2908, "db_id": "professional_basketball", "final": {"question": "What were the difference of the CHS team's winning rate between 1946 and 1947 in the post-season series games? Please provide your answer in percentages.", "sql": "SELECT CAST(SUM(CASE WHEN year = 1947 AND tmIDWinner = 'CHS' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN year = 1947 THEN 1 ELSE 0 END) - CAST(SUM(CASE WHEN year = 1946 AND tmIDWinner = 'CHS' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN year = 1946 THEN 1 ELSE 0 END) FROM series_post", "source_tables": ["series_post"]}, "evidence": "CHS team refers to tmIDWinner = 'CHS'; difference = subtract(divide(count(series_post where year = 1947 and tmIDWinner = 'CHS'), count(series_post where year = 1947)), divide(count(series_post where year = 1946 and tmIDWinner = 'CHS'), count(series_post where year = 1946)))"}
{"sample_id": 2902, "db_id": "professional_basketball", "final": {"question": "How many All Star players who played in the 1973 season were black?", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id = 1973 AND T1.race = 'B'", "source_tables": ["players", "player_allstar"]}, "evidence": "1973 season refers to season_id = 1973; black refers to race = 'B'"}
{"sample_id": 2798, "db_id": "professional_basketball", "final": {"question": "List the team name and the total wins of the team in year 2005 which has greater winning from the previous year.", "sql": "SELECT T1.name, T1.won FROM teams AS T1 INNER JOIN ( SELECT * FROM teams WHERE year = 2004 ) AS T2 on T1.tmID = T2.tmID WHERE T1.year = 2005 and T1.won > T2.won", "source_tables": ["teams"]}, "evidence": "2005 refers to year = 2005 ; previous year refers to year = 2004; team with greater winning than previous year refers to Won where year = 2005 > Won where year = 2004; team name refers to tmID"}
{"sample_id": 2845, "db_id": "professional_basketball", "final": {"question": "Please list the last names and first names of all-star players who are higher than 75 inch.", "sql": "SELECT DISTINCT T1.lastName, T1.firstName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.height > 75", "source_tables": ["players", "player_allstar"]}, "evidence": "higher than 75 inch refers to height > 75"}
{"sample_id": 2933, "db_id": "professional_basketball", "final": {"question": "Give the player id of the man who had the most turnovers whose team missed the playoffs in year 1988.", "sql": "SELECT T2.playerID FROM players_teams AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.PostGP = 0 AND T1.year = 1988 ORDER BY T1.turnovers DESC LIMIT 1", "source_tables": ["players_teams", "players"]}, "evidence": "the most turnovers refers to max(turnovers); missed the playoffs refers to PostGP = 0; in year 1988 refers to year = 1988"}
{"sample_id": 2856, "db_id": "professional_basketball", "final": {"question": "In 1990, how many players whose teams had the winning rate of more than 75%?", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE CAST(T2.won AS REAL) * 100 / CAST(T2.games AS REAL) > 75 AND T1.year = 1990", "source_tables": ["players_teams", "teams"]}, "evidence": "in 1990 refers to year = 1990; winning rate of more than 75% refers to Divide(won, games) > 0.75"}
{"sample_id": 2864, "db_id": "professional_basketball", "final": {"question": "Among the players who have passed away, who had the most award?", "sql": "SELECT T1.playerID FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE deathDate IS NOT NULL GROUP BY T1.playerID ORDER BY COUNT(award) DESC LIMIT 1", "source_tables": ["players", "awards_players"]}, "evidence": "pass away refers to deathDate ! = 'null'; most award refers to playerID where Max(Count(award))"}
{"sample_id": 2885, "db_id": "professional_basketball", "final": {"question": "Which coach has the most 'won' than 'lost' in year '1988'?", "sql": "SELECT coachID FROM coaches WHERE year = 1988 ORDER BY won - lost DESC LIMIT 1", "source_tables": ["coaches"]}, "evidence": "in year '1988' refers to year = 1988; the most 'won' than 'lost' refers to max(subtract(won, lost))"}
{"sample_id": 2932, "db_id": "professional_basketball", "final": {"question": "What's the name of the player in 1996 who had the most steals that didn't play in the playoffs?", "sql": "SELECT T1.playerID FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1996 AND T2.PostGP = 0 ORDER BY T2.steals DESC LIMIT 1", "source_tables": ["players_teams", "players"]}, "evidence": "name of the player refers to first_name, middle_name, last_name; in 1996 refers to year = 1996; the most steals refers to max(steals); didn't play in the playoffs refers to playoff = null"}
{"sample_id": 2898, "db_id": "professional_basketball", "final": {"question": "List all the coatches of the Oklahoma City Thunder", "sql": "SELECT DISTINCT coachID FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID WHERE name = 'Oklahoma City Thunder'", "source_tables": ["coaches", "teams"]}, "evidence": "coach refers to coachID; Oklahoma City Thunder refers to name = 'Oklahoma City Thunder'"}
{"sample_id": 2870, "db_id": "professional_basketball", "final": {"question": "Among the coaches who won the 'ABA Coach of the Year' award, which is the coach with the highest number of won games?", "sql": "SELECT T1.coachID FROM coaches AS T1 INNER JOIN awards_coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.award = 'ABA Coach of the Year' GROUP BY T1.coachID, T1.won ORDER BY T1.won DESC LIMIT 1", "source_tables": ["awards_coaches", "coaches"]}, "evidence": "\"ABA Coach of the Year\" is the award; highest number of won games refers to Max(Count(won))"}
{"sample_id": 2919, "db_id": "professional_basketball", "final": {"question": "Find the full name of the player born in Atlanta and have the highest number of blocks. Also, in which team did this player perform the most number of blocks?", "sql": "SELECT T1.firstName, T1.lastName, T2.tmID FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCity = 'Atlanta' ORDER BY T2.blocks DESC LIMIT 1", "source_tables": ["players_teams", "players"]}, "evidence": "full name refers to first_name, middle_name, last_name; born in Atlanta refers to birthCity = 'Atlanta'; the highest number of blocks refers to max(blocks); team refers to tmID"}
{"sample_id": 2873, "db_id": "professional_basketball", "final": {"question": "What is the full name of the team that selected Mike Lynn?", "sql": "SELECT T1.name FROM teams AS T1 INNER JOIN draft AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.draftYear WHERE T2.firstName = 'Mike' AND T2.lastName = 'Lynn'", "source_tables": ["teams", "draft"]}, "evidence": "full name refers to teams.name"}
{"sample_id": 2946, "db_id": "professional_basketball", "final": {"question": "In 2000, which team did the player who played the least minutes without missing a single game play in? Give the full name of the team.", "sql": "SELECT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.GP = 82 AND T2.year = 2000 GROUP BY T1.tmID ORDER BY SUM(T2.PostMinutes) ASC LIMIT 1", "source_tables": ["players_teams", "teams"]}, "evidence": "in 2000 refers to year = 2000; played the least minutes refers to min(minutes); without missing a single game refers to GP = 82; full name of the team refers to teams.name"}
{"sample_id": 2938, "db_id": "professional_basketball", "final": {"question": "For the player who was drafted in the 1st round, 6th position in 1976, which team did he play in that year?", "sql": "SELECT T2.tmID FROM draft AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.draftYear = T2.year WHERE T1.draftRound = 1 AND T1.draftSelection = 6 AND T1.draftYear = 1976", "source_tables": ["teams", "draft"]}, "evidence": "drafted in the 1st round refers to draftRound = 1; 6th position refers to draftSelection = 6; in 1976 refers to year = 1976; team refers to tmID"}
{"sample_id": 2842, "db_id": "professional_basketball", "final": {"question": "Please list the coach IDs who received the award twice from 1970 to 1990.", "sql": "SELECT coachID FROM awards_coaches WHERE year BETWEEN 1970 AND 1990 GROUP BY coachID, award HAVING COUNT(award) = 2", "source_tables": ["awards_coaches"]}, "evidence": "from 1970 to 1990 refers to year between 1970 and 1990;\u00a0 received award twice refers to coachID where Count(coachID) = 2"}
{"sample_id": 2943, "db_id": "professional_basketball", "final": {"question": "For the latest passing player who could play all the positions in the court, how many points did he have in his career?", "sql": "SELECT SUM(T2.points) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T1.pos = 'C-F-G' GROUP BY T2.playerID, T2.year ORDER BY T2.year DESC LIMIT 1", "source_tables": ["players_teams", "players"]}, "evidence": "the latest passing refers to max(season_id); play all the positions refers to pos like '%C%' or pos like '%F%' or pos like '%G%'"}
{"sample_id": 2799, "db_id": "professional_basketball", "final": {"question": "For team who has more home won than home lost more than 80%, list the team name and the offense points.", "sql": "SELECT name, o_pts FROM teams WHERE CAST((homeWon - homeLost) AS REAL) * 100 / games > 80", "source_tables": ["teams"]}, "evidence": "home won than home lost more than 80% refers to Divide(Subtract(homeWon, homeLost), games) > 0.8; offense point refers to o_fgm"}
{"sample_id": 2940, "db_id": "professional_basketball", "final": {"question": "For the player who had the most rebounds throughout his allstar appearances, what was his weight and height?", "sql": "SELECT T1.weight, T1.height FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID ORDER BY T2.rebounds DESC LIMIT 1", "source_tables": ["players", "player_allstar"]}, "evidence": "the most rebounds refers to max(rebounds)"}
{"sample_id": 2840, "db_id": "professional_basketball", "final": {"question": "Please list down the last name of players from \"BLB\" team.", "sql": "SELECT T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'BLB'", "source_tables": ["players_teams", "players"]}, "evidence": "\"BLB\" is the tmID"}
{"sample_id": 2913, "db_id": "professional_basketball", "final": {"question": "Among the NBA All-star players in 1996 season , which have more than 70% free throw rate? Please give their player id.", "sql": "SELECT playerID FROM player_allstar WHERE season_id = 1996 AND CAST(ft_made AS REAL) * 100 / ft_attempted > 70", "source_tables": ["player_allstar"]}, "evidence": "NBA refers to lgID = 'NBA'; in 1996 season refers to season_id = 1996; more than 70% free throw rate refers to ft_made > = 0 AND ft_attempted > 0 AND divide(ft_made, ft_attempted) > 0.7"}
{"sample_id": 2852, "db_id": "professional_basketball", "final": {"question": "From 1950 to 1970, what is the maximum point of players whose teams were ranked 1?", "sql": "SELECT MAX(T2.points) FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year BETWEEN 1950 AND 1970 AND T1.rank = 1", "source_tables": ["players_teams", "teams"]}, "evidence": "from 1950 to 1970 refers to year between 1950 and 1970; team with rank 1 refers to rank = 1; maximum point refers to Max(points)"}
{"sample_id": 3018, "db_id": "shakespeare", "final": {"question": "How many paragraphs are there in Act 5 Scene 1 of \"Comedy of Errors\"?", "sql": "SELECT COUNT(T3.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T2.Act = 5 AND T2.Scene = 1 AND T1.Title = 'Comedy of Errors'", "source_tables": ["chapters", "works", "paragraphs"]}, "evidence": "\"Comedy of Errors\" refers to Title = 'Comedy of Errors'"}
{"sample_id": 3015, "db_id": "shakespeare", "final": {"question": "How many scenes are there in Act 5 of work ID 9?", "sql": "SELECT COUNT(Scene) FROM chapters WHERE work_id = 9 AND Act = 5", "source_tables": ["chapters"]}, "evidence": ""}
{"sample_id": 3056, "db_id": "shakespeare", "final": {"question": "In Act 1 Scene 2 of the Twelfth Night, what is the total number of of lines said by Viola?", "sql": "SELECT COUNT(T4.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T2.Act = 1 AND T2.Scene = 2 AND T4.id = 1238 AND T4.CharName = 'Viola' AND T1.Title = 'Twelfth Night'", "source_tables": ["chapters", "works", "characters", "paragraphs"]}, "evidence": "Twelfth Night refers to Title = 'Twelfth Night'; total number of lines said by Viola refers to count(character_id) where CharName = 'Viola'"}
{"sample_id": 2980, "db_id": "shakespeare", "final": {"question": "Give the description for the Act No.2, Scene No.2 of Midsummer Night's Dream.", "sql": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = '2' AND T2.Scene = '2' AND T1.Title = 'Midsummer Night''s Dream'", "source_tables": ["chapters", "works"]}, "evidence": "Act No.2 refers to Act = '2'; Scene No.2\u00a0 refers to Scene = '2'; Midsummer Night's Dream refers to Title = 'Midsummer Night''s Dream'"}
{"sample_id": 3010, "db_id": "shakespeare", "final": {"question": "On average, how many scenes are there in each of the comedy works written by Shakespeare?", "sql": "SELECT CAST(SUM(T2.Scene) AS REAL) / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.GenreType = 'Comedy'", "source_tables": ["chapters", "works"]}, "evidence": "comedy refers to GenreType = 'Comedy'; average = divide(sum(count(Scene)), count(work.id))"}
{"sample_id": 2992, "db_id": "shakespeare", "final": {"question": "What is the long title of the work with the highest number of scenes in act 1?", "sql": "SELECT T2.LongTitle FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T1.Act = 1 ORDER BY T1.Scene DESC LIMIT 1", "source_tables": ["chapters", "works"]}, "evidence": "highest number of scenes refers to max(count(Scene))"}
{"sample_id": 2979, "db_id": "shakespeare", "final": {"question": "Which Shakespeare story with character ID 324 has description of 'this friend of Caesar'?", "sql": "SELECT T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T2.id = '324' AND T2.Description = 'friend to Caesar'", "source_tables": ["chapters", "works", "characters", "paragraphs"]}, "evidence": ""}
{"sample_id": 2966, "db_id": "shakespeare", "final": {"question": "What is the average number of characters in all the works of Shakespeare?", "sql": "SELECT SUM(DISTINCT T4.id) / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id", "source_tables": ["chapters", "works", "characters", "paragraphs"]}, "evidence": "average number = divide(sum(character_id), count(work_id))"}
{"sample_id": 3044, "db_id": "shakespeare", "final": {"question": "What is the percentage of historical works that have not fewer than five scenes in the 1500s?", "sql": "SELECT CAST(( SELECT COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.GenreType = 'History' AND T1.DATE BETWEEN 1500 AND 1599 GROUP BY T1.id HAVING COUNT(T2.Scene) >= 5 ) AS REAL) * 100 / COUNT(id) FROM works WHERE GenreType = 'History' AND DATE BETWEEN 1500 AND 1599", "source_tables": ["chapters", "works"]}, "evidence": "historical works refers to GenreType = 'history'; have not fewer than five scenes in the 1500s refers to count(Scene) > = 5 and DATE > = 1500 AND DATE < = 1599; percentage = divide(count(works.id) where GenreType = 'history' and count(Scene) > = 5, count(works.id) ) as percentage"}
{"sample_id": 3054, "db_id": "shakespeare", "final": {"question": "In Shakespeare's works between 1600 to 1610, how many of these have a character as a \"Third Servingman\"?", "sql": "SELECT COUNT(DISTINCT T2.work_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.DATE BETWEEN 1600 AND 1610 AND T4.CharName = 'Third Servingman'", "source_tables": ["chapters", "works", "characters", "paragraphs"]}, "evidence": "between 1600 to 1610 refers to DATE > = 1600 AND DATE < = 1610; \"Third Servingman\" refers to CharName = 'Third Servingman'"}
{"sample_id": 3031, "db_id": "shakespeare", "final": {"question": "Please name the latest historical work.", "sql": "SELECT LongTitle FROM works WHERE GenreType = 'History' ORDER BY Date DESC LIMIT 1", "source_tables": ["works"]}, "evidence": "name refers to LongTitle; latest historical work refers to GenreType = 'History' and max(Date)"}
{"sample_id": 3037, "db_id": "shakespeare", "final": {"question": "Please list all of the character descriptions in paragraph 20.", "sql": "SELECT T1.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.ParagraphNum = 20", "source_tables": ["characters", "paragraphs"]}, "evidence": "paragraph 20 refers to ParagraphNum = 20"}
{"sample_id": 2967, "db_id": "shakespeare", "final": {"question": "How many scenes are there on average in one act in Twelfth Night?", "sql": "SELECT SUM(T2.Scene) / COUNT(T2.Act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Twelfth Night'", "source_tables": ["chapters", "works"]}, "evidence": "Twelfth Night refers to Title = 'Twelfth Night'; average scene = divide(sum(Scene), count(Act))"}
{"sample_id": 3038, "db_id": "shakespeare", "final": {"question": "How many chapters have the name Gratiano as a character for \"friend to Antonio and Bassiano\"?", "sql": "SELECT COUNT(DISTINCT T2.chapter_id) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Gratiano' AND T1.Description = 'friend to Antonio and Bassiano'", "source_tables": ["characters", "paragraphs"]}, "evidence": "name Gratiano as a character refers to CharName = 'Gratiano'; \"friend to Antonio and Bassiano\" refers to characters.Description = 'friend to Antonio and Bassiano'"}
{"sample_id": 3020, "db_id": "shakespeare", "final": {"question": "What is the title which has character named \"Froth\"?", "sql": "SELECT DISTINCT T1.title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.CharName = 'Froth'", "source_tables": ["chapters", "works", "characters", "paragraphs"]}, "evidence": "character named \"Froth\" refers to CharName = 'Froth'"}
{"sample_id": 2978, "db_id": "shakespeare", "final": {"question": "How many chapters does the character Demetrius show in the story?", "sql": "SELECT COUNT(DISTINCT T2.chapter_id) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Demetrius'", "source_tables": ["characters", "paragraphs"]}, "evidence": "character Demetrius refers to CharName = 'Demetrius'"}
{"sample_id": 2972, "db_id": "shakespeare", "final": {"question": "Which character was mentioned in the paragraph \"Would he do so, I'ld beg your precious mistress, Which he counts but a trifle.\"? Give the character name.", "sql": "SELECT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.PlainText = 'Would he do so, I''ld beg your precious mistress,Which he counts but a trifle.'", "source_tables": ["characters", "paragraphs"]}, "evidence": "paragraph \"Would he do so, I'ld beg your precious mistress, Which he counts but a trifle.\"\u00a0 refers to PlainText = 'Would he do so, I'ld beg your precious mistress, Which he counts but a trifle.'"}
{"sample_id": 2973, "db_id": "shakespeare", "final": {"question": "How many characters are there in Titus Andronicus?", "sql": "SELECT COUNT(DISTINCT T3.character_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T1.Title = 'Titus Andronicus'", "source_tables": ["chapters", "works", "paragraphs"]}, "evidence": "Titus Andronicus refers to Title = 'Titus Andronicus'"}
{"sample_id": 2959, "db_id": "shakespeare", "final": {"question": "How many paragraphs are there in Act 1, Scene 1 in Twelfth Night?", "sql": "SELECT SUM(T3.ParagraphNum) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T2.Act = 1 AND T2.Scene = 1 AND T1.Title = 'Twelfth Night'", "source_tables": ["chapters", "works", "paragraphs"]}, "evidence": "Twelfth Night refers to Title = 'Twelfth Night'"}
{"sample_id": 2984, "db_id": "shakespeare", "final": {"question": "Gives the average number of chapters in Shakespeare's 1599 work.", "sql": "SELECT CAST(COUNT(T1.id) AS REAL) / COUNT(DISTINCT T2.id) FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T2.Date = '1599'", "source_tables": ["chapters", "works"]}, "evidence": "1599 work refers to Date = '1599'; average number refers to divide(count(chapters.id), count(works.id))"}
{"sample_id": 3016, "db_id": "shakespeare", "final": {"question": "List the character names and descriptions of chapter ID 18710.", "sql": "SELECT DISTINCT T1.CharName, T1.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.Chapter_id = 18710", "source_tables": ["characters", "paragraphs"]}, "evidence": "character names refers to CharName"}
{"sample_id": 3001, "db_id": "shakespeare", "final": {"question": "How many characters are there in Hamlet?", "sql": "SELECT COUNT(DISTINCT T3.character_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T1.Title = 'Hamlet'", "source_tables": ["chapters", "works", "paragraphs"]}, "evidence": "Hamlet refers to Title = 'Hamlet'"}
{"sample_id": 3119, "db_id": "cars", "final": {"question": "Among the cars from Asia, list the IDs of cars that were introduced in 1979.", "sql": "SELECT T1.ID FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'Japan' AND T1.model_year = 1979", "source_tables": ["production", "country"]}, "evidence": "from Asia refers to country = 'Japan'; introduced in 1979 refers to model_year = 1979"}
{"sample_id": 3120, "db_id": "cars", "final": {"question": "Which country produced the car with the lowest mileage per gallon?", "sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country ORDER BY T1.mpg ASC LIMIT 1", "source_tables": ["production", "country", "data"]}, "evidence": "the lowest mileage per gallon refers to min(mpg)"}
{"sample_id": 3145, "db_id": "cars", "final": {"question": "Calculate the percentage of American cars among all cars.", "sql": "SELECT CAST(SUM(CASE WHEN T3.country = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country", "source_tables": ["production", "country", "data"]}, "evidence": "American car refers to country = 'USA'; percentage = divide(count(ID where country = 'USA'), count(ID)) * 100%"}
{"sample_id": 3113, "db_id": "cars", "final": {"question": "Among the cars originated from Japan, what is the name of the car with the highest price?", "sql": "SELECT T4.car_name FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T3.country = 'Japan' ORDER BY T1.price DESC LIMIT 1", "source_tables": ["production", "price", "data", "country"]}, "evidence": "from Japan refers to country = 'Japan'; name of the car refers to car_name; the highest price refers to max(price)"}
{"sample_id": 3103, "db_id": "cars", "final": {"question": "Which country produced the highest number of cars? Calculate the annual average number of cars that the said country produced from the very start to the present.", "sql": "SELECT T2.country, CAST(COUNT(T1.ID) AS REAL) / COUNT(DISTINCT T1.model_year) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin GROUP BY T2.country ORDER BY COUNT(T2.country) DESC LIMIT 1", "source_tables": ["production", "country"]}, "evidence": "the highest number of cars refers to max(country); annual average number = divide(count(ID), count(model_year))"}
{"sample_id": 3096, "db_id": "cars", "final": {"question": "Which country produced the most fuel-efficient car?", "sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country ORDER BY T1.mpg DESC LIMIT 1", "source_tables": ["production", "country", "data"]}, "evidence": "the most fuel-efficient refers to max(mpg)"}
{"sample_id": 3114, "db_id": "cars", "final": {"question": "What are the names of the cars worth 20000?", "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = 20000", "source_tables": ["price", "data"]}, "evidence": "name of the car refers to car_name; worth 20000 refers to price = 20000"}
{"sample_id": 3097, "db_id": "cars", "final": {"question": "Which Dodge car is the cheapest?", "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name LIKE 'dodge%' ORDER BY T2.price ASC LIMIT 1", "source_tables": ["price", "data"]}, "evidence": "Dodge car refers to car_name LIKE 'dodge%'; the cheapest refers to min(price); name of the car refers to car_name"}
{"sample_id": 3095, "db_id": "cars", "final": {"question": "How many times was Ford Maverick introduced to the market?", "sql": "SELECT COUNT(T2.model_year) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'ford maverick'", "source_tables": ["production", "data"]}, "evidence": "Ford Maverick refers to car_name = 'ford maverick';"}
{"sample_id": 3124, "db_id": "cars", "final": {"question": "What is the price of a Chevrolet Bel Air?", "sql": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'chevrolet bel air'", "source_tables": ["price", "data"]}, "evidence": "Chevrolet Bel Air refers to car_name = 'chevrolet bel air'"}
{"sample_id": 3090, "db_id": "cars", "final": {"question": "Calculate the swept volume of the $34538.97449 car.", "sql": "SELECT T1.displacement / T1.cylinders FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = 34538.97449", "source_tables": ["price", "data"]}, "evidence": "sweep volume = divide(displacement, cylinders); the $34538.97449 car refers to price = 34538.97449"}
{"sample_id": 3083, "db_id": "cars", "final": {"question": "Provide the engine displacement status of the $37443.85589 car.", "sql": "SELECT T1.displacement FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = '37443.85589'", "source_tables": ["price", "data"]}, "evidence": "engine displacement status refers to displacement; the $37443.85589 car refers to price = 37443.85589"}
{"sample_id": 3092, "db_id": "cars", "final": {"question": "How many cars were released in the USA in 1981?", "sql": "SELECT COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'USA' AND T1.model_year = 1981", "source_tables": ["production", "country"]}, "evidence": "in the USA refers to country = 'USA'; in 1981 refers to model_year = 1981"}
{"sample_id": 3138, "db_id": "cars", "final": {"question": "Which car consumes fuel the most and has the highest price?", "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T1.mpg DESC, T2.price DESC LIMIT 1", "source_tables": ["price", "data"]}, "evidence": "consumes fuel the most refers to min(mpg); has the highest price refers to max(price)"}
{"sample_id": 3065, "db_id": "cars", "final": {"question": "What is the acceleration of the most expensive car?", "sql": "SELECT T1.acceleration FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1", "source_tables": ["price", "data"]}, "evidence": "the most expensive refers to max(price)"}
{"sample_id": 3135, "db_id": "cars", "final": {"question": "Which country does Chevy C20 come from?", "sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.car_name = 'chevy c20'", "source_tables": ["production", "country", "data"]}, "evidence": "Chevy C20 refers to car_name = 'chevy c20'"}
{"sample_id": 3109, "db_id": "cars", "final": {"question": "Among the cars produced in year 1973, how many of the cars have horsepower less than 100?", "sql": "SELECT COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T2.model_year = 1973 AND T1.horsepower < 100", "source_tables": ["production", "data"]}, "evidence": "produced in year 1973 refers to model_year = 1973; have horsepower less than 100 refers to horsepower < 100"}
{"sample_id": 3128, "db_id": "cars", "final": {"question": "Which car is the cheapest? Provide its acceleration, number of cylinders, and producing year.", "sql": "SELECT T1.acceleration, T1.cylinders, T2.model_year FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN price AS T3 ON T3.ID = T2.ID ORDER BY T3.price ASC LIMIT 1", "source_tables": ["production", "price", "data"]}, "evidence": "the cheapest refers to min(price); number of cylinders refers to cylinders; producing year refers to model_year"}
{"sample_id": 3162, "db_id": "donor", "final": {"question": "Name the project that costs the most. How much has been collected from donation and what is the percentage amount still lacking?", "sql": "SELECT T1.title, SUM(T3.donation_to_project), CAST((T2.total_price_excluding_optional_support - SUM(T3.donation_to_project)) AS REAL) * 100 / SUM(T3.donation_to_project) FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid ORDER BY T2.total_price_excluding_optional_support DESC LIMIT 1", "source_tables": ["donations", "essays", "projects"]}, "evidence": "project name refers to title; costs the most refers to max(total_price_excluding_optional_support); amount collected from donation refers to sum(donation_to_project); percentage amount refers to divide(subtract(total_price_excluding_optional_support, sum(donation_to_project)), sum(donation_to_project))*100%"}
{"sample_id": 3273, "db_id": "donor", "final": {"question": "In which cities are Los Angeles County Suburban Metro Schools located?", "sql": "SELECT school_city FROM projects WHERE school_metro = 'suburban' AND school_county = 'Los Angeles'", "source_tables": ["projects"]}, "evidence": "Los Angeles County refers to school_county = 'Los Angeles'"}
{"sample_id": 3290, "db_id": "donor", "final": {"question": "What is the average total donations received by Fresno County colleges?", "sql": "SELECT SUM(T2.donation_optional_support + T2.donation_to_project) / COUNT(donationid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_county = 'Fresno'", "source_tables": ["donations", "projects"]}, "evidence": "Fresno County colleges refers to school_county = 'Fresno'; average refers to DIVIDE(sum(donation_optional_support,donation_to_project),sum(donation_total))"}
{"sample_id": 3232, "db_id": "donor", "final": {"question": "For the teacher who wrote the project 'ABC Read', which city was he/she in?", "sql": "SELECT T2.school_city FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title = 'ABC Read'", "source_tables": ["essays", "projects"]}, "evidence": "ABC Read' is the title; city refers to school_city"}
{"sample_id": 3256, "db_id": "donor", "final": {"question": "Give the coordinates of the buyer of R & A Plant Genetics from Benchmark Education.", "sql": "SELECT T2.school_latitude, T2.school_longitude FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.item_name = 'R & A Plant Genetics' AND T1.vendor_name = 'Benchmark Education'", "source_tables": ["resources", "projects"]}, "evidence": "coordinates refer to (school_latitude, school_longitude); R & A Plant Genetics refer to item_name; Benchmark Education refer to vendor_name"}
{"sample_id": 3271, "db_id": "donor", "final": {"question": "On how many projects where the teacher has ordered between 5 to 10 items are from are from Quill.com?", "sql": "SELECT COUNT(projectid) FROM resources WHERE vendor_name = 'Quill.com' AND item_quantity BETWEEN 5 AND 10", "source_tables": ["resources"]}, "evidence": "ordered between 5 to 10 items refers to item_quantity between 5 and 10; are from Quill.com refers to vendor_name = 'Quill.com'"}
{"sample_id": 3251, "db_id": "donor", "final": {"question": "Which school county in the state of New York has a high number of low poverty levels?", "sql": "SELECT school_county FROM projects WHERE poverty_level = 'low poverty' AND school_state = 'NY' GROUP BY school_state ORDER BY COUNT(poverty_level) DESC LIMIT 1", "source_tables": ["projects"]}, "evidence": "New York refer to school_state = NY; highest number of low poverty level refer to MAX(poverty level = \u2019low poverty\u2019)"}
{"sample_id": 3148, "db_id": "donor", "final": {"question": "When was the highest amount of donated? How much was the amount?", "sql": "SELECT donation_timestamp, donation_total FROM donations WHERE donation_total = ( SELECT donation_total FROM donations ORDER BY donation_total DESC LIMIT 1 )", "source_tables": ["donations"]}, "evidence": "when refers donation_timestamp; the highest amount refers to max(donation_total)"}
{"sample_id": 3154, "db_id": "donor", "final": {"question": "Name the project titles created by teacher who acquired a doctor degree.", "sql": "SELECT T1.title FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_message LIKE 'Donation on behalf of Matt Carpenter because I''m a strong believer in education.'", "source_tables": ["donations", "essays"]}, "evidence": "teacher who acquired a doctor degree refers to teacher_prefix = 'Dr.'"}
{"sample_id": 3214, "db_id": "donor", "final": {"question": "Among the schools' projects whose donation didn't use account credits redemption,how many schools are public magnet schools?", "sql": "SELECT COUNT(T1.schoolid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_magnet = 't' AND T2.payment_included_acct_credit = 'f'", "source_tables": ["donations", "projects"]}, "evidence": "donation didn't use account credits redemption refers to payment_included_acct_credit = 'f'; magnet school refers to school_magnet = 't';"}
{"sample_id": 3187, "db_id": "donor", "final": {"question": "Which projects created by teachers with Doctor Degree where the project have more than 300 students involved. List down the title of the project.", "sql": "SELECT T1.title FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.teacher_prefix LIKE 'Dr.' AND T2.students_reached > 300", "source_tables": ["essays", "projects"]}, "evidence": "eachers with Doctor Degree refers to teacher_prefix = 'Dr.'; more than 300 students involved refers to students_reached > 300"}
{"sample_id": 3224, "db_id": "donor", "final": {"question": "Among the schools whose donators are teachers, what is the percentage of schools that are in Brooklyn?", "sql": "SELECT CAST(SUM(CASE WHEN T1.school_city LIKE 'Brooklyn' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.teacher_acctid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.is_teacher_acct = 't'", "source_tables": ["donations", "projects"]}, "evidence": "donors are teachers refers to is_teacher_acct = 't'; Brooklyn is school_city; percentage = Divide(Count(school_city-'Brooklyn'),Count(school_city))*100"}
{"sample_id": 3199, "db_id": "donor", "final": {"question": "Who is the vendor of the resources needed by the project that had the highest cost of optional tip?", "sql": "SELECT T1.vendor_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid ORDER BY T2.total_price_including_optional_support - T2.total_price_including_optional_support DESC LIMIT 1", "source_tables": ["resources", "projects"]}, "evidence": "Highest cost of the optional tip refers to Max(total_price_including_optional_support - total_price_excluding_optional_support);"}
{"sample_id": 3235, "db_id": "donor", "final": {"question": "What is the title for the project that got the donation message as \"Donation on behalf of Matt Carpenter because I'm a strong believer in education\".", "sql": "SELECT T1.title FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_message LIKE 'Donation on behalf of Matt Carpenter because I''m a strong believer in education.'", "source_tables": ["donations", "essays"]}, "evidence": ""}
{"sample_id": 3198, "db_id": "donor", "final": {"question": "Of the projects whose resources are provided by the vendor Lakeshore Learning Materials, the school of which project has the highest cost of labor fulfillment? Please give its school ID.", "sql": "SELECT T2.schoolid FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.vendor_name = 'Lakeshore Learning Materials' ORDER BY T2.fulfillment_labor_materials DESC LIMIT 1", "source_tables": ["resources", "projects"]}, "evidence": "Lakeshore Learning Materials is vendor_name; highest cost of labor fulfillment refers to Max(fulfillment_labor_materials);"}
{"sample_id": 3295, "db_id": "donor", "final": {"question": "Where is the school that needs a \"Viewscreen LCD from Texas Instruments, TI-84 Plus\"? Provide the latitude and longitude of that school.", "sql": "SELECT T2.school_city, T2.school_latitude, T2.school_longitude FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.item_name = 'Viewscreen LCD FROM Texas Instruments, TI-84 Plus'", "source_tables": ["resources", "projects"]}, "evidence": "needs a \"Viewscreen LCD from Texas Instruments, TI-84 Plus\" refers to item_name = 'Viewscreen LCD from Texas Instruments, TI-84 Plus'; where is the school refers to school_city; latitude refers to school_latitude; longtitude refers to school_longitude"}
{"sample_id": 3210, "db_id": "donor", "final": {"question": "Have the teacher \"42d43fa6f37314365d08692e08680973\" acquired P.h.D or doctor degree?", "sql": "SELECT CASE WHEN teacher_prefix = 'Dr.' THEN 'Yes' ELSE 'NO' END FROM projects WHERE teacher_acctid = '42d43fa6f37314365d08692e08680973'", "source_tables": ["projects"]}, "evidence": "teacher \"42d43fa6f37314365d08692e08680973\" refers to teacher_acctid = '42d43fa6f37314365d08692e08680973';"}
{"sample_id": 3155, "db_id": "donor", "final": {"question": "What is the project in which 320 students will be impacted if the project is funded? Name the project and state the project cost.", "sql": "SELECT T1.title, T2.total_price_excluding_optional_support FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.students_reached = 320", "source_tables": ["essays", "projects"]}, "evidence": "320 students will be impacted refers to students_reached = 320; name the project refers to title; project cost refers tp total_price_excluding_optional_support"}
{"sample_id": 3176, "db_id": "donor", "final": {"question": "When was the project with the highest quantity went live on the site? Indicate the grade level for which the project materials are intended.", "sql": "SELECT T2.date_posted, T2.grade_level FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid ORDER BY T1.item_quantity DESC LIMIT 1", "source_tables": ["resources", "projects"]}, "evidence": "project with the highest quantity refers to max(item_quantity)"}
{"sample_id": 3207, "db_id": "donor", "final": {"question": "What is the average donation amount to a project created by a teacher working in a school in Brooklyn?", "sql": "SELECT SUM(T2.donation_total) / COUNT(donationid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_city = 'Brooklyn'", "source_tables": ["donations", "projects"]}, "evidence": "school in Brooklyn refers to school_city = 'Brooklyn'; Average = AVG(donation_total);"}
{"sample_id": 3266, "db_id": "donor", "final": {"question": "How many donors who donated to the city of Pocatello are not teachers?", "sql": "SELECT COUNT(donationid) FROM donations WHERE donor_city = 'Pocatello' AND is_teacher_acct = 'f'", "source_tables": ["donations"]}, "evidence": "city of Pocatello refers to donor_city = 'Pocatello'; not teachers refers to is_teacher_acct = 'f'"}
{"sample_id": 3288, "db_id": "donor", "final": {"question": "What is the total sum of the donations paid with an optional support in projects that reach more than 300 students?", "sql": "SELECT SUM(T2.dollar_amount) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.students_reached > 300 AND t2.donation_included_optional_support = 't'", "source_tables": ["donations", "projects"]}, "evidence": "with an optional support refers to donation_included_optional_support = 't'; reach more than 300 students refers to students_reached>300"}
{"sample_id": 3305, "db_id": "donor", "final": {"question": "What percentage of donations are given via a giving or campaign page? List the primary area of those donations.", "sql": "SELECT CAST(SUM(CASE WHEN T1.via_giving_page = 't' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(donation_total), ( SELECT T2.primary_focus_area FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.via_giving_page = 't' GROUP BY T2.primary_focus_area ORDER BY SUM(T1.donation_total) DESC LIMIT 1 ) result FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid", "source_tables": ["donations", "projects"]}, "evidence": "given via a giving or campaign page refers to via_giving_page = 't'; percentage refers to DIVIDE(count(case when via_giving_page = 't' then donationid else null end),count(donationid))*100; primary area of donation refers to primary_focus_area"}
{"sample_id": 3267, "db_id": "donor", "final": {"question": "How many schools in Suffolk County have Ph.D. teachers?", "sql": "SELECT COUNT(schoolid) FROM projects WHERE teacher_prefix = 'Dr.' AND school_county = 'Suffolk'", "source_tables": ["projects"]}, "evidence": "Suffolk County refers to School_county = 'Suffolk'; Ph.D. teachers refers to Teacher_prefix = 'Dr.'"}
{"sample_id": 3265, "db_id": "donor", "final": {"question": "Calculate the sum of all the total amount donated to the essay project titled 'Lets Share Ideas' which were paid through paypal and indicate the city and poverty level.", "sql": "SELECT SUM(T3.donation_total), school_city, poverty_level FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T1.title = 'Lets Share Ideas' AND T3.payment_method = 'paypal'", "source_tables": ["donations", "essays", "projects"]}, "evidence": "paypal refer to payment method; Lets Share Ideas refer to title; city refer to school_city; total amount donated refer to SUM(donation_total of paypal where payment_method = \u2019paypal\u2019)"}
{"sample_id": 3270, "db_id": "donor", "final": {"question": "How many resources with a unit price less than 15 are not technology type? List them by vendor id", "sql": "SELECT vendorid FROM resources WHERE project_resource_type = 'Technology' AND item_unit_price <= 15", "source_tables": ["resources"]}, "evidence": "unit price less than 15 refers to item_unit_price< = 15; are not technology type refers to project_resource_type = 'technology'"}
{"sample_id": 3219, "db_id": "donor", "final": {"question": "What is the short description of the project that gives donation to school \u201c301c9bf0a45d159d162b65a93fddd74e\u201d?", "sql": "SELECT T2.short_description FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T1.schoolid = '301c9bf0a45d159d162b65a93fddd74e'", "source_tables": ["essays", "projects"]}, "evidence": "school \u201c301c9bf0a45d159d162b65a93fddd74e\" refers to schoolid = '301c9bf0a45d159d162b65a93fddd74e';"}
{"sample_id": 3209, "db_id": "donor", "final": {"question": "Is donor \u201c22cbc920c9b5fa08dfb331422f5926b5\u201d a teacher?", "sql": "SELECT DISTINCT is_teacher_acct FROM donations WHERE donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5'", "source_tables": ["donations"]}, "evidence": "donor \u201c22cbc920c9b5fa08dfb331422f5926b5\u201d refers to donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5'; is a teacher refers to is_teacher_acct;"}
{"sample_id": 3217, "db_id": "donor", "final": {"question": "In the schools donated by the project of the resources provided by ABC School Supply, how many schools are public magnet schools?", "sql": "SELECT COUNT(T2.schoolid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_magnet = 't' AND T1.vendor_name = 'ABC School Supply'", "source_tables": ["resources", "projects"]}, "evidence": "ABC School Supply is vendor_name;\u00a0 public magnet school refers to school_magnet = 't';"}
{"sample_id": 3174, "db_id": "donor", "final": {"question": "When was the first ever project went live on the site and what were the names of the resources being requested? If there are multiple projects that have the same date, indicate each of them and their items.", "sql": "SELECT T2.date_posted, T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.date_posted = ( SELECT date_posted FROM projects ORDER BY date_posted ASC LIMIT 1 )", "source_tables": ["resources", "projects"]}, "evidence": "first ever project refers to min(date_posted); names of the resources refers to item_name"}
{"sample_id": 3165, "db_id": "donor", "final": {"question": "Which project have the highest total price including optional support? Indicate the project id.", "sql": "SELECT projectid FROM projects ORDER BY total_price_including_optional_support DESC LIMIT 1", "source_tables": ["projects"]}, "evidence": "highest total price including optional support refers to max(total_price_including_optional_support)"}
{"sample_id": 3277, "db_id": "donor", "final": {"question": "What is the percentage of payment methods of donations made in March 2013?", "sql": "SELECT payment_method , CAST(COUNT(donationid) AS REAL) * 100 / 51090 FROM donations WHERE donation_timestamp LIKE '2013-03%' GROUP BY payment_method", "source_tables": ["donations"]}, "evidence": "made in March 2013 refers to substr(donation_timestamp,1,7) = '2013-03'; percentage refers to DIVIDE(SUM(payment_method made in March 2013), SUM(payment_method))*100"}
{"sample_id": 3503, "db_id": "video_games", "final": {"question": "What is the genre of the game titled '999: Nine Hours, Nine Persons, Nine Doors' ?", "sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '999: Nine Hours, Nine Persons, Nine Doors'", "source_tables": ["game", "genre"]}, "evidence": "genre of the game refers to genre_name; '999: Nine Hours, Nine Persons, Nine Doors' refers to game_name = '999: Nine Hours, Nine Persons, Nine Doors';"}
{"sample_id": 3423, "db_id": "video_games", "final": {"question": "What are the names of the games published by American Softworks?", "sql": "SELECT T3.game_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.publisher_name = 'American Softworks'", "source_tables": ["game", "game_publisher", "publisher"]}, "evidence": "names of the games refers to game_name; American Softworks refers to publisher_name = 'American Softworks';"}
{"sample_id": 3461, "db_id": "video_games", "final": {"question": "What is the percentage of games that were released on PS4 in 2014 among all platforms?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.platform_name = 'PS4' THEN T3.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T3.game_id) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id INNER JOIN game_publisher AS T3 ON T1.game_publisher_id = T3.id WHERE T1.release_year = 2014", "source_tables": ["platform", "game_platform", "game_publisher"]}, "evidence": "percentage - MULTIPLY(DIVIDE(SUM(platform_name = 'PS4'), COUNT(game_id)), 100); in 2014 refers to release_year = 2014;"}
{"sample_id": 3490, "db_id": "video_games", "final": {"question": "What is the name of the company that produced the game titled Adventure Time: Explore the Dungeon Because I Don't Know!?", "sql": "SELECT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = 'Adventure Time: Explore the Dungeon Because I Don''t Know!'", "source_tables": ["game", "publisher", "game_publisher"]}, "evidence": "name of the company that produced the game refers to publisher_name; Adventure Time: Explore the Dungeon Because I Don't Know! Refers to game_name = 'Adventure Time: Explore the Dungeon Because I Don''t Know!';"}
{"sample_id": 3309, "db_id": "video_games", "final": {"question": "How many action games are there in total?", "sql": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Action'", "source_tables": ["game", "genre"]}, "evidence": "action game refers to genre_name = 'Action'"}
{"sample_id": 3334, "db_id": "video_games", "final": {"question": "Name of the publisher of the game id 10031.", "sql": "SELECT T2.publisher_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.game_id = 10031", "source_tables": ["publisher", "game_publisher"]}, "evidence": "name of publisher refers to publisher_name; the game id 10031 refers to game_id = '10031'"}
{"sample_id": 3345, "db_id": "video_games", "final": {"question": "How many role-playing games did Microsoft Game Studios publish?", "sql": "SELECT COUNT(T3.id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Role-Playing' AND T1.publisher_name = 'Microsoft Game Studios'", "source_tables": ["game", "genre", "game_publisher", "publisher"]}, "evidence": "role-playing game refers to genre_name = 'Role-Playing'; Microsoft Game Studios refers to publisher_name = 'Microsoft Game Studios'"}
{"sample_id": 3427, "db_id": "video_games", "final": {"question": "What is the number of games sold in Europe for game platform ID 26?", "sql": "SELECT T2.num_sales * 100000 AS nums_eur FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T2.game_platform_id = 26 AND T1.region_name = 'Europe'", "source_tables": ["region", "region_sales"]}, "evidence": "total number of games sold = MULTIPLY(num_sales, 100000); Europe refers to region_name = 'Europe';"}
{"sample_id": 3424, "db_id": "video_games", "final": {"question": "How many strategy games are there?", "sql": "SELECT COUNT(CASE WHEN T1.genre_name = 'Strategy' THEN T2.id ELSE NULL END) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id", "source_tables": ["game", "genre"]}, "evidence": "strategy games refers game_name WHERE genre_name = 'Strategy';"}
{"sample_id": 3507, "db_id": "video_games", "final": {"question": "Among games sold in Europe, list the platform ID of games with sales lesser than 30% of the average number of sales.", "sql": "SELECT DISTINCT T3.platform_id FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id WHERE T1.region_name = 'Europe' AND T2.num_sales * 100 * 100000 < ( SELECT AVG(T2.num_sales * 100000) * 30 FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Europe' )", "source_tables": ["region", "region_sales", "game_platform"]}, "evidence": "Europe refers to region_name = 'Europe'; sales lesser than 30% of the average number of sales refers to SUM(num_sales) < MULTIPLY(AVG(num_sales), 0.3);"}
{"sample_id": 3448, "db_id": "video_games", "final": {"question": "How many FIFA games are there across all platforms?", "sql": "SELECT COUNT(*) FROM ( SELECT T.game_name FROM game AS T WHERE T.game_name LIKE '%FIFA%' )", "source_tables": ["game"]}, "evidence": "FIFA games refers to game_name LIKE '%FIFA%';"}
{"sample_id": 3316, "db_id": "video_games", "final": {"question": "On which platform was Panzer Tactics released in 2007?", "sql": "SELECT T5.platform_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN game AS T3 ON T1.game_id = T3.id INNER JOIN game_platform AS T4 ON T1.id = T4.game_publisher_id INNER JOIN platform AS T5 ON T4.platform_id = T5.id WHERE T3.game_name = 'Panzer Tactics' AND T4.release_year = 2007", "source_tables": ["publisher", "platform", "game_publisher", "game_platform", "game"]}, "evidence": "platform refers to platform_name; Panzer Tactics refers to game_name = 'Panzer Tactics'; released in 2007 refers to release_year = 2007"}
{"sample_id": 3381, "db_id": "video_games", "final": {"question": "When was the \"Adventure Island\" game released?", "sql": "SELECT T3.release_year FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id WHERE T1.game_name = 'Adventure Island'", "source_tables": ["game", "game_platform", "game_publisher"]}, "evidence": "when refers to release_year; the \"Adventure Island\" game refers to game_name = 'Adventure Island'"}
{"sample_id": 3357, "db_id": "video_games", "final": {"question": "Provide the release year of record ID 1 to 10.", "sql": "SELECT T.release_year FROM game_platform AS T WHERE T.id BETWEEN 1 AND 10", "source_tables": ["game_platform"]}, "evidence": "record ID 1 to 10 refers to game.id BETWEEN 1 AND 10"}
{"sample_id": 3411, "db_id": "video_games", "final": {"question": "What percentage of games are sports?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.genre_name = 'Sports' THEN T2.id ELSE NULL END) AS REAL) * 100 / COUNT(T2.id) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id", "source_tables": ["game", "genre"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(genre_name = 'sport'), COUNT(game_name)), 100.0); sports refers to genre_name = 'sport';"}
{"sample_id": 3335, "db_id": "video_games", "final": {"question": "State the name of the publisher with the most games.", "sql": "SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T2.publisher_name ORDER BY COUNT(DISTINCT T1.game_id) DESC LIMIT 1 ) t", "source_tables": ["publisher", "game_publisher"]}, "evidence": "name of publisher refers to publisher_name; the most games refers to max(game_id)"}
{"sample_id": 3308, "db_id": "video_games", "final": {"question": "Please list all the games that have the same game genre as 3D Lemmings.", "sql": "SELECT T1.game_name FROM game AS T1 WHERE T1.genre_id = ( SELECT T.genre_id FROM game AS T WHERE T.game_name = '3D Lemmings' )", "source_tables": ["game"]}, "evidence": "game refers to game_name; 3D Lemmings refers to game_name = '3D Lemmings'"}
{"sample_id": 3473, "db_id": "video_games", "final": {"question": "What are the game IDs of the games published by Bethesda Softworks?", "sql": "SELECT T1.game_id FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Bethesda Softworks'", "source_tables": ["publisher", "game_publisher"]}, "evidence": "Bethesda Softworks refers to publisher_name = 'Bethesda Softworks';"}
{"sample_id": 3347, "db_id": "video_games", "final": {"question": "In 2004, what are the names of the platforms where Codemasters publish its games?", "sql": "SELECT T4.platform_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T3.release_year = 2004 AND T1.publisher_name = 'Codemasters'", "source_tables": ["platform", "game_publisher", "game_platform", "publisher"]}, "evidence": "name of platform refers to platform_name; Codemasters refers to publisher_name = 'Codemasters'; in 2004 refers to release_year = 2004"}
{"sample_id": 3449, "db_id": "video_games", "final": {"question": "Which platform is the most popular in Europe?", "sql": "SELECT T.platform_name FROM ( SELECT T4.platform_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.region_name = 'Europe' ORDER BY T2.num_sales DESC LIMIT 1 ) t", "source_tables": ["platform", "region", "region_sales", "game_platform"]}, "evidence": "platform that is the most popular refers to platform_name WHERE MAX(num_sales); in Europe refers to region_name = 'Europe' ;"}
{"sample_id": 3428, "db_id": "video_games", "final": {"question": "How many games were released in the year 2001?", "sql": "SELECT COUNT(id) FROM game_platform AS T WHERE T.release_year = 2001", "source_tables": ["game_platform"]}, "evidence": "released in the year 2001 refers to release_year = 2001;"}
{"sample_id": 3382, "db_id": "video_games", "final": {"question": "How many games are puzzle genre?", "sql": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Puzzle'", "source_tables": ["game", "genre"]}, "evidence": "puzzle genre refers to genre_name = 'Puzzle'"}
{"sample_id": 3419, "db_id": "video_games", "final": {"question": "Which publisher has published the most number of Action games?", "sql": "SELECT T.publisher_name FROM ( SELECT T4.publisher_name, COUNT(DISTINCT T2.id) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id INNER JOIN game_publisher AS T3 ON T2.id = T3.game_id INNER JOIN publisher AS T4 ON T3.publisher_id = T4.id WHERE T1.genre_name = 'Action' GROUP BY T4.publisher_name ORDER BY COUNT(DISTINCT T2.id) DESC LIMIT 1 ) t", "source_tables": ["publisher", "game", "genre", "game_publisher"]}, "evidence": "which publisher refers to publisher_name; publisher that has published the most number of Action games refers to MAX(COUNT(publisher_name)) WHERE genre_name = 'Action'; Action games refers to game_name WHERE genre_name = 'Action';"}
{"sample_id": 3501, "db_id": "video_games", "final": {"question": "List the platform ID of the game titled Airborne Troops: Countdown to D-Day.", "sql": "SELECT T1.platform_id FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = 'Airborne Troops: Countdown to D-Day'", "source_tables": ["game", "game_platform", "game_publisher"]}, "evidence": "Airborne Troops: Countdown to D-Day refers to game_name = 'Airborne Troops: Countdown to D-Day';"}
{"sample_id": 3474, "db_id": "video_games", "final": {"question": "Calculate the total number of IDs for the game published by Capcom and Sony Computer Entertainment.", "sql": "SELECT COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name IN ('Capcom', 'Sony Computer Entertainment')", "source_tables": ["publisher", "game_publisher"]}, "evidence": "Capcom refers to publisher_name = 'Capcom';\u00a0 Sony Computer Entertainment refers to publisher_name = 'Sony Computer Entertainment';"}
{"sample_id": 3462, "db_id": "video_games", "final": {"question": "How much are the sales of the games in region ID 4?", "sql": "SELECT SUM(T.num_sales) * 100000 FROM region_sales AS T WHERE T.region_id = 4", "source_tables": ["region_sales"]}, "evidence": "how much are the sales = SUM(num_sales);"}
{"sample_id": 3453, "db_id": "video_games", "final": {"question": "Which region has the highest number of games sold on all platforms?", "sql": "SELECT T.region_name FROM ( SELECT T2.region_name, SUM(T1.num_sales) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id INNER JOIN game_platform AS T3 ON T1.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id GROUP BY T4.platform_name ORDER BY SUM(T1.num_sales) DESC LIMIT 1 ) t", "source_tables": ["platform", "region", "region_sales", "game_platform"]}, "evidence": "which region refers to region_name; highest number of games sold on all platforms refers to MAX(SUM(num_sales));"}
{"sample_id": 3500, "db_id": "video_games", "final": {"question": "List down at least five publishers of the games with number of sales less than 10000.", "sql": "SELECT T.publisher_name FROM ( SELECT DISTINCT T5.publisher_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN publisher AS T5 ON T4.publisher_id = T5.id WHERE T1.region_name = 'North America' AND T2.num_sales * 100000 < 10000 LIMIT 5 ) t", "source_tables": ["publisher", "region_sales", "game_publisher", "region", "game_platform"]}, "evidence": "publishers refers to publisher_name; number of sales less than 10000 refers to num_sales < 0.1;"}
{"sample_id": 3470, "db_id": "video_games", "final": {"question": "How many game publisher IDs have published games on the X360 platform?", "sql": "SELECT COUNT(T1.game_publisher_id) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id WHERE T2.platform_name = 'X360'", "source_tables": ["platform", "game_platform"]}, "evidence": "X360 refers to platform_name = 'X360';"}
{"sample_id": 3433, "db_id": "video_games", "final": {"question": "Indicate the name of all adventure games.", "sql": "SELECT T2.game_name FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id WHERE T1.genre_name = 'Adventure'", "source_tables": ["game", "genre"]}, "evidence": "name of games refers to game_name; adventure games refers to game_name WHERE genre_name = 'Adventure';"}
{"sample_id": 3467, "db_id": "video_games", "final": {"question": "Calculate the number of game publisher IDs for games released in 1984.", "sql": "SELECT COUNT(T.game_publisher_id) FROM game_platform AS T WHERE T.release_year = 1984", "source_tables": ["game_platform"]}, "evidence": "released in 1984 refers to release_year = 1984;"}
{"sample_id": 3374, "db_id": "video_games", "final": {"question": "Among the games released in 2004, what is the percentage of games on PSP?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.platform_name = 'PSP' THEN T3.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T2.release_year = 2004", "source_tables": ["game_platform", "platform", "game_publisher"]}, "evidence": "in 2004 refers to release_year = 2004; on PSP refers to platform_name = 'PSP'; percentage = divide(sum(platform_id where platform_name = 'PSP'), count(platform_id)) * 100% where release_year = 2004"}
{"sample_id": 3452, "db_id": "video_games", "final": {"question": "What genre is the game 2010 FIFA World Cup South Africa?", "sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '2010 FIFA World Cup South Africa'", "source_tables": ["game", "genre"]}, "evidence": "genre refers to genre_name; 2010 FIFA World Cup South Africa refers to game_name = '2010 FIFA World Cup South Africa';"}
{"sample_id": 3388, "db_id": "video_games", "final": {"question": "Name the game released in 2011.", "sql": "SELECT T3.game_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.release_year = 2011", "source_tables": ["game", "game_platform", "game_publisher"]}, "evidence": "game refers to game_name; released in 2011 refers to release_year = 2011"}
{"sample_id": 3390, "db_id": "video_games", "final": {"question": "Provide any five games and release year under the sports genre.", "sql": "SELECT T3.game_name, T1.release_year FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Sports' LIMIT 5", "source_tables": ["game", "genre", "game_platform", "game_publisher"]}, "evidence": "game refers to game_name; under the sports genre refers to genre_name = 'Sports'"}
{"sample_id": 3504, "db_id": "video_games", "final": {"question": "When was the game ID 156 released?", "sql": "SELECT T1.release_year FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id WHERE T2.game_id = 156", "source_tables": ["game_platform", "game_publisher"]}, "evidence": "when the game was released refers to release_year;"}
{"sample_id": 3483, "db_id": "video_games", "final": {"question": "Compute the average number of sales in region ID 3.", "sql": "SELECT AVG(T.num_sales * 100000) FROM region_sales AS T WHERE T.region_id = 3", "source_tables": ["region_sales"]}, "evidence": "average = AVG(MULTIPLY(num_sales, 100000));"}
{"sample_id": 3481, "db_id": "video_games", "final": {"question": "Calculate the difference in sales between the games released in 1990 and 2000.", "sql": "SELECT SUM(CASE WHEN T2.release_year = 2000 THEN T1.num_sales ELSE 0 END) - SUM(CASE WHEN T2.release_year = 1990 THEN T1.num_sales ELSE 0 END) FROM region_sales AS T1 INNER JOIN game_platform AS T2 ON T1.game_platform_id = T2.id", "source_tables": ["region_sales", "game_platform"]}, "evidence": "difference = SUBTRACT(SUM(num_sales WHERE release_year = 2000), SUM(num_sales WHERE release_year = 1990));"}
{"sample_id": 3464, "db_id": "video_games", "final": {"question": "Calculate the difference between sales of games from region ID 2 and region ID 3.", "sql": "SELECT SUM(CASE WHEN T.region_id = 2 THEN T.num_sales ELSE 0 END) - SUM(CASE WHEN T.region_id = 3 THEN T.num_sales ELSE 0 END) FROM region_sales t", "source_tables": ["region_sales"]}, "evidence": "difference = SUBTRACT(SUM(num_sales WHERE region_id = 2), SUM(num_sales WHERE region_id = 3));"}
{"sample_id": 3393, "db_id": "video_games", "final": {"question": "Calculate how many percent of sales in North America is higher than the average sale per region for platform ID 9577.", "sql": "SELECT (SUM(CASE WHEN T2.region_name = 'North America' THEN T1.num_sales ELSE 0 END) - AVG(T1.num_sales)) * 100.0 / AVG(T1.num_sales) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id WHERE T1.game_platform_id = 9577", "source_tables": ["region", "region_sales"]}, "evidence": "in North America refers to region_name = 'North America'; platform ID 9577 refers to game_platform_id = 9577; percent = divide(subtract(num_sales where region_name = 'North America' and game_platform_id = 9577, avg(num_sales)), avg(num_sales)) * 100%"}
{"sample_id": 3480, "db_id": "video_games", "final": {"question": "Calculate the total sales made by the games released in 2000.", "sql": "SELECT SUM(T1.num_sales) FROM region_sales AS T1 INNER JOIN game_platform AS T2 ON T1.game_platform_id = T2.id WHERE T2.release_year = 2000", "source_tables": ["region_sales", "game_platform"]}, "evidence": "total sales = SUM(num_sales); released in 2000 refers to release_year = 2000;"}
{"sample_id": 3599, "db_id": "authors", "final": {"question": "List the short name and home page URL of all the international conferences on artificial intelligence.", "sql": "SELECT ShortName, HomePage FROM Conference WHERE FullName LIKE 'International Conference on Artificial Intelligence%'", "source_tables": ["conference"]}, "evidence": "all the international conferences on artificial intelligence refers to FullName LIKE 'International Conference on Artificial Intelligence%'"}
{"sample_id": 3589, "db_id": "authors", "final": {"question": "How many papers were in the journal \"Iet Software/iee Proceedings - Software\"?", "sql": "SELECT COUNT(T1.JournalId) FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T2.FullName = 'Iet Software/iee Proceedings - Software'", "source_tables": ["paper", "journal"]}, "evidence": "journal \"Iet Software/iee Proceedings - Software\" refers to FullName = 'Iet Software/iee Proceedings - Software'; papers refers to COUNT(JournalId)"}
{"sample_id": 3582, "db_id": "authors", "final": {"question": "What percentage of authors of the paper about Charged particle multiplicity are affiliated with INFN?", "sql": "SELECT CAST((SUM(CASE WHEN T1.Affiliation LIKE '%INFN%' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T2.Id) FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title LIKE '%Charged particle multiplicity%'", "source_tables": ["paper", "paperauthor"]}, "evidence": "about Charged particle multiplicity refers to Title which contains 'Charged particle multiplicity'; affiliated with INFN refers to Affiliation LIKE '%INFN%' ; percentage refers to DIVIDE(COUNT(Affiliation LIKE '%INFN%' ), COUNT(AuthorId)) * 100%"}
{"sample_id": 3609, "db_id": "authors", "final": {"question": "What is the full name of the conference in which the paper titled \"Extended Fuzzy Regression Models\" was published?", "sql": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'Extended Fuzzy Regression Models'", "source_tables": ["conference", "paper"]}, "evidence": "'Extended Fuzzy Regression Models' is the title of paper; full name of the conference refers to FullName"}
{"sample_id": 3658, "db_id": "authors", "final": {"question": "How many papers were published in 2005. Calculate the difference between the number of paper published in 2005 and the number of paper published in the previous year.", "sql": "SELECT SUM(CASE WHEN Year = 2005 THEN 1 ELSE 0 END) , SUM(CASE WHEN year = 2005 THEN 1 ELSE 0 END) - SUM(CASE WHEN year = 2004 THEN 1 ELSE 0 END) AS diff FROM Paper", "source_tables": ["paper"]}, "evidence": "published in 2005 refer to Year = 2005; Difference refer to SUBTRACT(SUM(Year = 2005). SUM(Year = 2004))"}
{"sample_id": 3603, "db_id": "authors", "final": {"question": "Give the title and author's name of the papers published between 2000 and 2005 that include the topic optical properties.", "sql": "SELECT T1.Title, T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Keyword LIKE '%optical properties%' AND T1.Year BETWEEN 2000 AND 2005 AND T1.Title <> ''", "source_tables": ["paper", "paperauthor"]}, "evidence": "published between 2000 and 2005 refers to Year BETWEEN 2000 AND 2005; include the topic optical properties refers to Keyword LIKE '%optical properties%'"}
{"sample_id": 3559, "db_id": "authors", "final": {"question": "Write down the name of authors for paper with id from 101 to 105.", "sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Id > 100 AND T1.Id < 106", "source_tables": ["paper", "paperauthor"]}, "evidence": "paper with ID from 101 to 105 refers to Id BETWEEN 100 AND 106"}
{"sample_id": 3615, "db_id": "authors", "final": {"question": "List all the paper that the journal \"Theoretical Computer Science\n\" published in 2003.", "sql": "SELECT DISTINCT T1.Title FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T2.FullName = 'Theoretical Computer Science' AND T1.Year = 2003 AND T1.Title <> ''", "source_tables": ["paper", "journal"]}, "evidence": "'Theoretical Computer Science' is the FullName; paper refers to Title; published in 2003 refers to Year = 2003"}
{"sample_id": 3555, "db_id": "authors", "final": {"question": "Under the conference name of MICRO, calculate how many more paper is needed to published in 1971 to 1980 in average by yearly to get equivalent to the number of paper from 1991 to 2000. Write down the title and author name of the paper that were actually published during 1971 to 1980 with the conference name with MICRO.", "sql": "SELECT T2.title, T3.name, T1.FullName FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.id = T2.ConferenceId INNER JOIN PaperAuthor AS T3 ON T1.id = T3.PaperId WHERE T1.ShortName = 'MICRO' AND T2.Year BETWEEN '1971' AND '1980'", "source_tables": ["conference", "paper", "paperauthor"]}, "evidence": "\"MICRO\" is the ShortName of conference; in 1971 to 1980 refers to Year BETWEEN '1971' AND '1980'; in 1991 to 2000 refers to Year BETWEEN '1991' AND '2000': Average needed paper = Subtract (Count(PaperId(Year BETWEEN '1991' AND '2000')), Count(PaperId(Year BETWEEN '1971' AND '1980')))/10"}
{"sample_id": 3673, "db_id": "authors", "final": {"question": "Among all publications containing keywords 'Turbulent Fluids', what percentage of them was published in the journal named 'Physics of Fluids'?", "sql": "SELECT CAST(SUM(CASE WHEN T1.Keyword = 'Turbulent Fluids' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.FullName = 'Physics of Fluids' THEN 1 ELSE 0 END) FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id", "source_tables": ["paper", "journal"]}, "evidence": "'Physics of Fluids' is the FullName of journal; percentage = DIVIDE(SUM(Keyword = 'Turbulent Fluids'), SUM(FullName = 'Physics of Fluids')) as percentage"}
{"sample_id": 3622, "db_id": "authors", "final": {"question": "What is the short name for \"Software - Concepts and Tools / Structured Programming\"?", "sql": "SELECT ShortName FROM Journal WHERE FullName = 'Software - Concepts and Tools / Structured Programming'", "source_tables": ["journal"]}, "evidence": "'Software - Concepts and Tools / Structured Programming' is the FullName;"}
{"sample_id": 3524, "db_id": "authors", "final": {"question": "How many journals have a word \"computing\" in its full name?", "sql": "SELECT COUNT(Id) FROM Journal WHERE FullName LIKE '%computing%'", "source_tables": ["journal"]}, "evidence": "word computing refers to FullName LIKE '%computing%'"}
{"sample_id": 3577, "db_id": "authors", "final": {"question": "Indicate the name of all the journals published in the paper database in the year 2001.", "sql": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Year = 2001 AND T1.ConferenceId > 0 AND T1.JournalId > 0", "source_tables": ["paper", "journal"]}, "evidence": "name of all the journals refers to FullName"}
{"sample_id": 3519, "db_id": "authors", "final": {"question": "Which author of the paper \"Incremental Extraction of Keyterms for Classifying Multilingual Documents in the Web\" is affiliated with National Taiwan University Department of Computer Science and Information Engineering Taiwan?", "sql": "SELECT T1.Name FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title = 'Incremental Extraction of Keyterms for Classifying Multilingual Documents in the Web' AND T1.Affiliation = 'National Taiwan University Department of Computer Science and Information Engineering Taiwan'", "source_tables": ["paper", "paperauthor"]}, "evidence": "\"Incremental Extraction of Keyterms for Classifying Multilingual Documents in the Web\" is the title of paper; affiliated with refers to Affiliation; \"National Taiwan University Department of Computer Science and Information Engineering Taiwan\" is the Affiliation organization"}
{"sample_id": 3553, "db_id": "authors", "final": {"question": "Calculate the differences of the paper number with the journal name of IWC in 2000 and 2010.", "sql": "SELECT SUM(CASE WHEN T2.Year = 2000 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.Year = 2010 THEN 1 ELSE 0 END) AS DIFF FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.ShortName = 'IWC'", "source_tables": ["paper", "journal"]}, "evidence": "\"IWC\" is the ShortName of journal;\u00a0 '2000' and '2010' are Year;\u00a0 Difference = Subtract(Count(Paper.Id(Year = 2000)), Count(Paper.Id(Year = 2010)))"}
{"sample_id": 3527, "db_id": "authors", "final": {"question": "List down the author ID of authors with a name of \"Peter\".", "sql": "SELECT AuthorId FROM PaperAuthor WHERE Name = 'Peter'", "source_tables": ["paperauthor"]}, "evidence": "\"Peter\" is the name of author"}
{"sample_id": 3678, "db_id": "authors", "final": {"question": "State the year and title of papers written by Barrasa.", "sql": "SELECT T1.Year, T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Barrasa'", "source_tables": ["paper", "paperauthor"]}, "evidence": "'Barassa' is name of paper author"}
{"sample_id": 3646, "db_id": "authors", "final": {"question": "What is the short name for the journal that published the paper \"A Case of Unilateral Ashy Dermatosis\"?", "sql": "SELECT T2.ShortName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Title = 'A Case of Unilateral Ashy Dermatosis'", "source_tables": ["paper", "journal"]}, "evidence": "A Case of Unilateral Ashy Dermatosis refer to Title"}
{"sample_id": 3656, "db_id": "authors", "final": {"question": "How many papers are preprint or not published?", "sql": "SELECT COUNT(Id) FROM Paper WHERE Year = 0 OR (ConferenceId = 0 AND JournalId = 0)", "source_tables": ["paper"]}, "evidence": "preprint or not published refer to Year = 0;"}
{"sample_id": 3647, "db_id": "authors", "final": {"question": "What are the affiliations of the author \"Mark A. Musen\" written on and off paper?", "sql": "SELECT T1.Affiliation FROM PaperAuthor AS T1 INNER JOIN Author AS T2 ON T1.AuthorId = T2.Id WHERE T2.Name = 'Mark A. Musen'", "source_tables": ["author", "paperauthor"]}, "evidence": "Mark A. Musen refer to Author.Name;"}
{"sample_id": 3554, "db_id": "authors", "final": {"question": "Provide any four valid Journal ID along with short name and full name of the papers which were made in 2013.", "sql": "SELECT DISTINCT T2.JournalId, T1.ShortName, T1.FullName FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Year = 2013 AND T2.JournalId != 0 AND T2.JournalId != -1 LIMIT 4", "source_tables": ["paper", "journal"]}, "evidence": "valid journal ID refers to JournalId! = 0 and JournalId! = -1; made in 2013 refers to Year = 2013"}
{"sample_id": 3561, "db_id": "authors", "final": {"question": "Write down homepage URL of journal for paper \"364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results\".", "sql": "SELECT T2.HomePage FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Title = '364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results'", "source_tables": ["paper", "journal"]}, "evidence": "paper \"364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results\" refers to Title = '364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results'"}
{"sample_id": 3518, "db_id": "authors", "final": {"question": "Please list the titles of the paper whose authors include Klaus Zimmermann.", "sql": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Name = 'Klaus Zimmermann'", "source_tables": ["paper", "paperauthor"]}, "evidence": "\"Klaus Zimmermann\" is the name of author"}
{"sample_id": 3605, "db_id": "authors", "final": {"question": "Give the Title and author's name of the books that were preprint in 1997.", "sql": "SELECT DISTINCT T2.Name, T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.ConferenceId = 0 AND T1.JournalId = 0 AND T1.Year = 1997 AND T1.Title <> ''", "source_tables": ["paper", "paperauthor"]}, "evidence": "in 1997 refers to Year = 1997; books that were preprint refers to ConferenceId = 0 AND JournalId = 0"}
{"sample_id": 3624, "db_id": "authors", "final": {"question": "Give the number of papers that were published on \"IEEE Transactions on Nuclear Science\" in 1999.", "sql": "SELECT COUNT(T2.Id) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'IEEE Transactions on Nuclear Science' AND T2.Year = 1999", "source_tables": ["paper", "journal"]}, "evidence": "'IEEE Transactions on Nuclear Science' is the FullName of journal; 1999 refers to Year = '1999'; papers refers to Paper.Id"}
{"sample_id": 3598, "db_id": "authors", "final": {"question": "List the names of authors affiliated with the University of Oxford in alphabetical order.", "sql": "SELECT Name FROM Author WHERE Affiliation = 'University of Oxford' ORDER BY Name ASC", "source_tables": ["author"]}, "evidence": "affiliated with the University of Oxford refers to Affiliation = 'University of Oxford'"}
{"sample_id": 3571, "db_id": "authors", "final": {"question": "List author name for articles that are preprinted but not published.", "sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Year = 0", "source_tables": ["paper", "paperauthor"]}, "evidence": "articles that are preprinted but not published refers to Year = 0"}
{"sample_id": 3654, "db_id": "authors", "final": {"question": "What is the proportion of the papers that have the keyword \"cancer\"? Please provide a list of authors and their affiliations.", "sql": "SELECT CAST(SUM(CASE WHEN T1.Keyword = 'cancer' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.Id), T2.Name, T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId", "source_tables": ["paper", "paperauthor"]}, "evidence": "Proportion refer to DIVIDE(COUNT(Keyword = \u2019cancer\u2019), COUNT(PaperID))"}
{"sample_id": 3625, "db_id": "authors", "final": {"question": "What was the name of the paper that was published on \"IEEE Transactions on Pattern Analysis and Machine Intelligence\" in 2011?", "sql": "SELECT T2.Title FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'IEEE Transactions on Pattern Analysis and Machine Intelligence' AND T2.Year = 2011 AND T2.Title <> ''", "source_tables": ["paper", "journal"]}, "evidence": "'IEEE Transactions on Pattern Analysis and Machine Intelligence' is the FullName of journal; 2011 refers to Year = '2011'; name of the paper refers to Title of paper"}
{"sample_id": 3671, "db_id": "authors", "final": {"question": "Provide the average number of papers that are published in the journal named 'Information Sciences' annually.", "sql": "SELECT CAST(COUNT(T2.JournalId) AS REAL) / COUNT(DISTINCT T2.Year) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Information Sciences'", "source_tables": ["paper", "journal"]}, "evidence": "'Information Sciences' is the FullName of journal; average = DIVIDE(COUNT(JournalId = 48), COUNT(Years))"}
{"sample_id": 3608, "db_id": "authors", "final": {"question": "How many authors drafted the paper \"Subcellular localization of nuclease in barley aleurone\"?", "sql": "SELECT COUNT(DISTINCT T2.Name) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Subcellular localization of nuclease in barley aleurone'", "source_tables": ["paper", "paperauthor"]}, "evidence": "'Subcellular localization of nuclease in barley aleurone' is the title of paper"}
{"sample_id": 3652, "db_id": "authors", "final": {"question": "List all of the conferences where a paper was published in 2008.", "sql": "SELECT DISTINCT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Year = 2008", "source_tables": ["conference", "paper"]}, "evidence": "Published in 2008 refer to Year = 2008\n\n"}
{"sample_id": 3512, "db_id": "authors", "final": {"question": "What is the url of the journal in which the paper \"Area Effects in Cepaea\" was published?", "sql": "SELECT T1.HomePage FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Title = 'Area Effects in Cepaea'", "source_tables": ["paper", "journal"]}, "evidence": "url refers to HomePage; 'Area Effects in Cepaea' is the Title of paper"}
{"sample_id": 3535, "db_id": "authors", "final": {"question": "What is the title and author ID of paper with conference ID less than 100 in year 2006?", "sql": "SELECT DISTINCT T1.Title, T2.AuthorId FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Year = 2006 AND T1.ConferenceId < 100", "source_tables": ["paper", "paperauthor"]}, "evidence": "conference ID less than 100 refers to ConferenceId < 100; in year 2006 refers to Year = 2006"}
{"sample_id": 3515, "db_id": "authors", "final": {"question": "How many authors does the paper \"Equation Solving in Geometrical Theories\" have?", "sql": "SELECT COUNT(T1.AuthorId) FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title = 'Equation Solving in Geometrical Theories'", "source_tables": ["paper", "paperauthor"]}, "evidence": "\"Equation Solving in Geometrical Theories\" is the title of paper"}
{"sample_id": 3592, "db_id": "authors", "final": {"question": "What is the title of the paper that was written by Cheng Huang and affiliated with Microsoft?", "sql": "SELECT T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Cheng Huang' AND T2.Affiliation = 'Microsoft'", "source_tables": ["paper", "paperauthor"]}, "evidence": "paper that was written by Cheng Huang refers to Name = 'Cheng Huang'; affiliated with Microsoft refers to Affiliation LIKE 'Microsoft %'"}
{"sample_id": 3698, "db_id": "college_completion", "final": {"question": "In total, how many Hispanic male students graduated from Amridge University?", "sql": "SELECT SUM(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Amridge University' AND T2.gender = 'M' AND T2.race = 'H'", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "Hispanic refers to race = 'H'; male refers to gender = 'M'; Amridge University refers to chronname = 'Amridge University';"}
{"sample_id": 3719, "db_id": "college_completion", "final": {"question": "Give the web site address for the school in \"PA\" state with the highest latitude.", "sql": "SELECT DISTINCT T1.site FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'PA' AND T1.lat_y = ( SELECT MAX(T1.lat_y) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'PA' )", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "web site address refers to site; PA refers to state_abbr = 'PA'; highest latitude refers to MAX(lat_y);"}
{"sample_id": 3703, "db_id": "college_completion", "final": {"question": "Which institute has the highest percentage of male White students graduating in 2011 within 150 percent of normal/expected time?", "sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.year = 2011 AND T2.gender = 'M' AND T2.race = 'W' AND T2.grad_150 = ( SELECT MAX(T2.grad_150) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.year = 2011 AND T2.gender = 'M' AND T2.race = 'W' )", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "male refers to gender = 'M'; white refers to race = 'w'; in 2011 refers to year = 2011; graduating within 150 percent of normal/expected time refers to grad_150;"}
{"sample_id": 3713, "db_id": "college_completion", "final": {"question": "Which state is \"Mercer University\" located in?", "sql": "SELECT T FROM ( SELECT DISTINCT CASE WHEN chronname = 'Mercer University' THEN state ELSE NULL END AS T FROM institution_details ) WHERE T IS NOT NULL", "source_tables": ["institution_details"]}, "evidence": "Mercer University refers to chronname = 'Mercer University';"}
{"sample_id": 3699, "db_id": "college_completion", "final": {"question": "How many students that graduated from Lincoln College in 2011 belong to the cohort type of Bachelor's/equivalent seeking cohort at 4-year institutions?", "sql": "SELECT COUNT(T1.unitid) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Lincoln College' AND T2.year = 2011 AND T2.cohort = '4y bach'", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "Lincoln College refers to chronname = 'Lincoln College'; in 2011 refers to year = 2011; Bachelor's/equivalent seeking cohort at 4-year institutions refers to cohort = '4y bach';"}
{"sample_id": 3707, "db_id": "college_completion", "final": {"question": "Among the institutes in the state of Alabama whose percent rank for median SAT value within sector is 77, how many of them have over 500 graduates in total in 2011?", "sql": "SELECT COUNT(DISTINCT T1.chronname) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.state = 'Alabama' AND T1.med_sat_percentile = '100' AND T2.year = 2011 AND T2.grad_cohort > 500", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "percent rank for median SAT value within sector refers to med_sat_percentile; over 500 graduates refers to grad_cohort > 500; in 2011 refers to year = 2011;"}
{"sample_id": 3738, "db_id": "college_completion", "final": {"question": "List the site of institution within the student count of 500 to 1000 that has the recent year of data release.", "sql": "SELECT DISTINCT T1.site FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.student_count BETWEEN 500 AND 1000 AND T2.year = ( SELECT MAX(T2.year) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid )", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "recent year of data release refers to newest year;"}
{"sample_id": 3730, "db_id": "college_completion", "final": {"question": "Give the state and name of institutions in year of data release from 2010 to 2012 with black students.", "sql": "SELECT DISTINCT T1.state, T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.race = 'B' AND T2.year BETWEEN 2010 AND 2012", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "name of institutions refers to chronname; year of data release refers to year; from '2010' to '2012' refers to year BETWEEN 2010 AND 2012; Black refers to race = 'B';"}
{"sample_id": 3715, "db_id": "college_completion", "final": {"question": "Tell the abbreviation for \"Delaware\" state.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE WHEN state = 'Delaware' THEN state_abbr ELSE NULL END AS T FROM state_sector_grads ) WHERE T IS NOT NULL", "source_tables": ["state_sector_grads"]}, "evidence": "abbreviation for state refers to state_abbr;"}
{"sample_id": 3712, "db_id": "college_completion", "final": {"question": "Give the web site address for \"Swarthmore College\".", "sql": "SELECT T FROM ( SELECT DISTINCT CASE WHEN chronname = 'Swarthmore College' THEN site ELSE NULL END AS T FROM institution_details ) WHERE T IS NOT NULL", "source_tables": ["institution_details"]}, "evidence": "website address refers to site; Swarthmore College refers to chronname = 'Swarthmore College';"}
{"sample_id": 3693, "db_id": "college_completion", "final": {"question": "Calculate the percentage of Black students in all private for profit institutions.", "sql": "SELECT CAST(SUM(CASE WHEN T2.race = 'B' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.race = 'B' AND T1.control = 'Private for-profit'", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "Black students refers to race = 'B'; private for profit refers to control = 'Private for-profit'; percentage = MULTIPLY(DIVIDE(SUM(race = 'B'), SUM(grad_cohort)), 100.0);"}
{"sample_id": 3689, "db_id": "college_completion", "final": {"question": "Provide the institute name with less than 200 graduate cohort of all races and genders in 2013. Also, please state the total number of full-time equivalent undergraduates for the institute.", "sql": "SELECT T1.chronname, T2.grad_cohort FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.year = 2013 AND T2.gender = 'B' AND T2.race = 'X' AND T2.grad_cohort < 200", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "institute name refers to chronname; less than 200 graduate cohort refers to grad_cohort < 200; all races refers to race = 'X'; all genders refers to gender = 'B'; in 2013 refers to year = 2013; total number of full-time equivalent undergraduates refers to fte_value;"}
{"sample_id": 3740, "db_id": "college_completion", "final": {"question": "Among the black students in 2011, list the institution site and name of those who has 20 t0 30 degree-seeking students in the cohort.", "sql": "SELECT DISTINCT T1.site, T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.year = 2011 AND T2.race = 'B' AND T2.grad_cohort BETWEEN 20 AND 30", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "black refers to race = 'B'; in 2011 refers to year = '2011'; institution name refers to chronname; 20 to 30 degree-seeking students in the cohort refers to grad_cohort BWEEN 20 AND 30;"}
{"sample_id": 3685, "db_id": "college_completion", "final": {"question": "What is the total male graduates in 2012 in the state whereby the institute with the highest average amount of student aid going to undergraduate recipients is located?", "sql": "SELECT COUNT(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2012 AND T2.gender = 'M' ORDER BY T1.aid_value DESC LIMIT 1", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "male refers to gender = 'M'; graduates refers to grad_cohort; in 2012 refers to year = 2012; highest average amount of student aid going to undergraduate recipients refers to MAX(aid_value);"}
{"sample_id": 3744, "db_id": "college_completion", "final": {"question": "In the state of Connecticut, what is the name of the instution with the highest percent rank for freshman retention percentage within the sector?", "sql": "SELECT chronname FROM institution_details WHERE state = 'Connecticut' AND retain_percentile = ( SELECT MAX(retain_percentile) FROM institution_details WHERE state = 'Connecticut' )", "source_tables": ["institution_details"]}, "evidence": "name of the institution refers to chronname;\u00a0 highest percent rank for freshman retention percentage within the sector refers to MAX(retain_percentile);"}
{"sample_id": 3711, "db_id": "college_completion", "final": {"question": "What is the average percentage of students graduating within 100 percent of normal/expected time for Central Alabama Community College?", "sql": "SELECT AVG(T2.grad_100_rate) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Central Alabama Community College'", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "average = DIVIDE(SUM(grad_100_rate), (SUM(grad_100), SUM(grad_150))); percentage of students graduating within 100 percent of normal/expected time refers to grade_100_rate; Central Alabama Community College refers to chronname = 'Central Alabama Community College';"}
{"sample_id": 4029, "db_id": "public_review_platform", "final": {"question": "Calculate the percentage of medium tip length in the list. List out the time when users of medium tip length join Yelp.", "sql": "SELECT CAST(SUM(CASE WHEN T1.tip_length = 'Medium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.tip_length), T2.user_yelping_since_year FROM Tips AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id", "source_tables": ["tips", "users"]}, "evidence": "medium tip length refers to tip_length = 'Medium'; percentage = divide(count(tips where tip_length = 'Medium'), count(tips))*100%; the time when users join Yelp refers to user_yelping_since_year"}
{"sample_id": 3913, "db_id": "public_review_platform", "final": {"question": "Find out which hotel and travel business having the most review? Calculate the standard deviation of the review star for this business.", "sql": "SELECT T2.category_id FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Reviews AS T3 ON T3.business_id = T1.business_id WHERE T2.category_name = 'Hotels & Travel' GROUP BY T2.category_id ORDER BY COUNT(T2.category_id) DESC LIMIT 1", "source_tables": ["business_categories", "reviews", "categories"]}, "evidence": "\"Hotel & Travel\" is the category_name; most review refers to Max(Count(category_id)); Average star per user = Divide (Sum (review_stars), Count(user_id))"}
{"sample_id": 3876, "db_id": "public_review_platform", "final": {"question": "How many stars on average does user no.3 give to Yelp_Business in Arizona?", "sql": "SELECT AVG(T2.review_stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.state LIKE 'AZ' AND T2.user_id = 3", "source_tables": ["reviews", "business"]}, "evidence": "user no.3 refers to user_id = 3; in Arizona refers to state = 'AZ'; stars on average = avg(review_stars(user_id = 3))"}
{"sample_id": 3987, "db_id": "public_review_platform", "final": {"question": "How many 2 stars rated business located in Phoenix, Arizona?", "sql": "SELECT COUNT(business_id) FROM Business WHERE city = 'Phoenix' AND state = 'AZ' AND stars = 2", "source_tables": ["business"]}, "evidence": "located in Phoenix refers to city = 'Phoenix'; Arizona refers to state = 'AZ'"}
{"sample_id": 3945, "db_id": "public_review_platform", "final": {"question": "List the city of the business where they open from 1 pm to 6 pm on Saturday.", "sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time LIKE '6PM' AND T2.opening_time LIKE '1PM' AND T3.day_of_week LIKE 'Saturday'", "source_tables": ["days", "business", "business_hours"]}, "evidence": "1 pm refers to opening_time = '1PM'; 6 pm refers to closing_time = '6PM'; on Saturday refers to day_of_week = 'Saturday'"}
{"sample_id": 3985, "db_id": "public_review_platform", "final": {"question": "Among highest quality user of under ID 100, mention compliment type which got highest compliment number and user's followers.", "sql": "SELECT T1.compliment_type, T3.user_fans FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T2.number_of_compliments = 'Uber' AND T2.user_id < 100", "source_tables": ["compliments", "users_compliments", "users"]}, "evidence": "highest quality user refers to number_of_compliments = 'Uber'; user of under ID 100 refers to user_id < 100 ;"}
{"sample_id": 3928, "db_id": "public_review_platform", "final": {"question": "Among the active businesses located at Mesa, AZ, list the category and attributes of business with a low review count.", "sql": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T1.review_count = 'Low' AND T1.city = 'Mesa' AND T1.active = 'true' AND T1.state = 'AZ'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "active business refers to active = 'true': 'Mesa' is the name of city; 'AZ' is the state; low review count refers to review_count = 'Low'; category refers to category_name"}
{"sample_id": 3786, "db_id": "public_review_platform", "final": {"question": "Tell the number of \"hair removal\" Yelp businesses.", "sql": "SELECT COUNT(T1.category_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.category_name LIKE 'Hair Removal'", "source_tables": ["business_categories", "categories"]}, "evidence": "hair removal refers to category_name = 'Hair Removal';"}
{"sample_id": 3781, "db_id": "public_review_platform", "final": {"question": "Which closed/not running Yelp business in \"Sun City\" has got the most reviews? Give the business id.", "sql": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Sun City' AND T1.active LIKE 'FALSE' GROUP BY T1.business_id ORDER BY COUNT(T2.review_length) DESC LIMIT 1", "source_tables": ["reviews", "business"]}, "evidence": "closed/not running refers to active = 'False'; most reviews refers to MAX(COUNT(user_id));"}
{"sample_id": 3939, "db_id": "public_review_platform", "final": {"question": "How many businesses are opened for 24 hours?", "sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value LIKE 'TRUE' AND T1.attribute_name LIKE 'Open 24 Hours'", "source_tables": ["business_attributes", "attributes"]}, "evidence": "opened for 24 hours refers to attribute_name = 'Open 24 Hours' AND attribute_value = 'true'"}
{"sample_id": 4025, "db_id": "public_review_platform", "final": {"question": "Among the businesses with average rating, how many business has attribute of full_bar.", "sql": "SELECT COUNT(T1.business_id) FROM Business_Attributes AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.attribute_value = 'full_bar'", "source_tables": ["business_attributes", "business"]}, "evidence": "average rating refers to avg(stars); attribute of full_bar refers to attribute_value = 'full_bar'"}
{"sample_id": 3774, "db_id": "public_review_platform", "final": {"question": "Give the percentage of \"Automotive\" businesses among all the Yelp businesses.", "sql": "SELECT CAST(SUM(CASE WHEN T2.category_name LIKE 'Automotive' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) AS \"percentage\" FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id", "source_tables": ["business_categories", "categories"]}, "evidence": "automotive businesses refers to category_name = 'Automotive'; percentage = MULTIPLY(DIVIDE(SUM(category_name = 'Automotive'), COUNT(business_id)), 1.0);"}
{"sample_id": 4080, "db_id": "public_review_platform", "final": {"question": "Among the user ID with number in compliment of uber on profile, list any 5 user ID and the year when they join Yelp.", "sql": "SELECT T3.user_id, T3.user_yelping_since_year FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T1.compliment_type = 'profile' AND T2.number_of_compliments = 'Uber' LIMIT 5", "source_tables": ["compliments", "users_compliments", "users"]}, "evidence": "when join Yelp refers to user_yelping_since_year; compliment_type = 'profile'; number_of_compliments = 'Uber';"}
{"sample_id": 3868, "db_id": "public_review_platform", "final": {"question": "How many \"Good for Kids\" Yelp_Businesses are open everyday of the week?", "sql": "SELECT COUNT(T1.business_id) FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business_Attributes AS T3 ON T1.business_id = T3.business_id INNER JOIN Attributes AS T4 ON T4.attribute_id = T4.attribute_id WHERE T2.day_id IN (1, 2, 3, 4, 5, 6, 7) AND T4.attribute_name = 'Good for Kids' AND T3.attribute_value = 'true'", "source_tables": ["days", "attributes", "business_attributes", "business_hours"]}, "evidence": "Good for Kids refers to attribute_name = 'Good for Kids'and attribute_value = 'true'; open everyday refers to day_id between 1 and 7"}
{"sample_id": 3920, "db_id": "public_review_platform", "final": {"question": "What is the review length of user 60776 to business with business ID 1?", "sql": "SELECT review_length FROM Reviews WHERE user_id = 60776 AND business_id = 1", "source_tables": ["reviews"]}, "evidence": "\"60776\" is the user_id"}
{"sample_id": 4089, "db_id": "public_review_platform", "final": {"question": "For users with average ratings of 3, what kind of tip length they mostly left?", "sql": "SELECT T2.tip_length FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T1.user_average_stars = 3 GROUP BY T2.tip_length ORDER BY COUNT(T2.tip_length) DESC LIMIT 1", "source_tables": ["tips", "users"]}, "evidence": "average ratings of 3 refer to user_average_stars = 3; kind of tip length they mostly left refers to tip_length where MAX(COUNT(user_id));"}
{"sample_id": 4015, "db_id": "public_review_platform", "final": {"question": "Identify the operating hours of businesses in Black Canyon City with review count greater than average.", "sql": "SELECT T2.opening_time, T2.closing_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city = 'Black Canyon City' GROUP BY t2.business_id HAVING T1.review_count > AVG(T1.review_count)", "source_tables": ["days", "business", "business_hours"]}, "evidence": "operating hours refers to opening_time closing_time on day_id; in Black Canyon City refers to city = 'Black Canyon City'; greater than average refers to review_count > AVG(T1.review_count)"}
{"sample_id": 4037, "db_id": "public_review_platform", "final": {"question": "How many users have uber review votes for funny from the fans?", "sql": "SELECT COUNT(DISTINCT user_id) FROM Reviews WHERE review_votes_funny = 'Uber'", "source_tables": ["reviews"]}, "evidence": "users refer to user_id; review_votes_funny = 'uber';"}
{"sample_id": 3859, "db_id": "public_review_platform", "final": {"question": "How many Yelp_Business under the category of \"Food\" are good for kids?", "sql": "SELECT COUNT(T3.stars) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Attributes AS T4 ON T3.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.category_name LIKE 'Food' AND T5.attribute_name LIKE 'Good for Kids' AND T4.attribute_value LIKE 'TRUE'", "source_tables": ["attributes", "business", "business_attributes", "business_categories", "categories"]}, "evidence": "under the category of \"Food\" refers to category_name = 'Food'; are good for kids refers to attribute_name = 'Good for Kids' and attribute_value = 'true'"}
{"sample_id": 3922, "db_id": "public_review_platform", "final": {"question": "In businesses with a category of automotive, how many of them has an star rating below 3?", "sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T3.category_name LIKE 'Automotive' AND T1.stars < 3", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "\"Automotive\" is the category of business; star rating below 3 refers to stars < 3"}
{"sample_id": 4094, "db_id": "public_review_platform", "final": {"question": "List down the category of businesses whose stars ratings are 5.", "sql": "SELECT DISTINCT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T1.stars = 5", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "category of businesses refers to category_name; stars ratings are 5 refers to stars = 5"}
{"sample_id": 3803, "db_id": "public_review_platform", "final": {"question": "Please list the businesses name with a rating less than 5 whose category name is men's clothing.", "sql": "SELECT T2.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name LIKE 'Men''s Clothing' AND T3.stars < 5", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "businesses name refers to business_id; rating refers to stars; stars < 5;"}
{"sample_id": 3831, "db_id": "public_review_platform", "final": {"question": "What are the opening hours of business number 53 on Friday?", "sql": "SELECT T1.closing_time - T1.opening_time AS \"opening hours\" FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week LIKE 'Friday' AND T1.business_id = 53", "source_tables": ["days", "business_hours"]}, "evidence": "opening hours refers to opening_time; business number refers to business_id; Friday refers to day_of_week = 'Friday';"}
{"sample_id": 4088, "db_id": "public_review_platform", "final": {"question": "How many likes did short comment left by users who joined in 2010 get?", "sql": "SELECT SUM(T2.likes) FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2010", "source_tables": ["tips", "users"]}, "evidence": "short comment refers to tip_length = 'Short'; users who joined in 2010 refer to user_id where user_yelping_since_year = 2010;"}
{"sample_id": 4132, "db_id": "public_review_platform", "final": {"question": "Among the active businesses located at Goodyear, AZ, list the category and atrributes of business with a high review count.", "sql": "SELECT T3.category_name, T5.attribute_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id INNER JOIN Business_Attributes AS T4 ON T1.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.review_count = 'High' AND T1.city = 'Goodyear' AND T1.state = 'AZ' AND T1.active = 'true'", "source_tables": ["attributes", "business", "business_attributes", "business_categories", "categories"]}, "evidence": "active business ID refers to active = 'true'; Goodyear is a city; AZ is a state; high review count refers to review_count = 'High'"}
{"sample_id": 3801, "db_id": "public_review_platform", "final": {"question": "How many businesses with the category are open from Monday to Thursday?", "sql": "SELECT COUNT(T2.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id INNER JOIN Days AS T5 ON T4.day_id = T5.day_id WHERE T5.day_of_week LIKE 'Monday' OR T5.day_of_week LIKE 'Tuesday' OR T5.day_of_week LIKE 'Wednesday' OR T5.day_of_week LIKE 'Thursday'", "source_tables": ["business_hours", "business", "days", "business_categories", "categories"]}, "evidence": "open from Monday to Thursday refers to day_of_week BETWEEN Monday AND Thursday and day_id BETWEEN 2 AND 5;"}
{"sample_id": 3810, "db_id": "public_review_platform", "final": {"question": "How many businesses are there in Phoenix city? Find the percentage of businesses in Phoenix city in the total city.", "sql": "SELECT SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS \"num\" , CAST(SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.city) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(city = 'Phoenix' END), COUNT(category_id)), 1.0);"}
{"sample_id": 3895, "db_id": "public_review_platform", "final": {"question": "What is the opening time of the active businesses in Chandler that has a medium review count.", "sql": "SELECT DISTINCT T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Chandler' AND T1.active LIKE 'TRUE' AND T1.review_count LIKE 'Medium'", "source_tables": ["days", "business", "business_hours"]}, "evidence": "active businesses refers to active = 'true'; in Chandler refers to city = 'Chandler'"}
{"sample_id": 3811, "db_id": "public_review_platform", "final": {"question": "How many cities have businesses with active life category? Find the percentage of the city where the review count that is low in total review count.", "sql": "SELECT SUM(CASE WHEN T2.category_name LIKE 'Active Life' THEN 1 ELSE 0 END) AS \"num\" , CAST(SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS REAL) * 100 / ( SELECT COUNT(T3.review_count) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T3.review_count LIKE 'Low' ) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "category refers to category_name; percentage = MULTIPLY(DIVIDE(SUM(category_name = 'Active Life'), SUM(review_count = 'LOW')), 1.0);"}
{"sample_id": 3875, "db_id": "public_review_platform", "final": {"question": "How many stars on average does a Yelp_Business in Anthem get from a user review?", "sql": "SELECT AVG(T2.review_stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Anthem'", "source_tables": ["reviews", "business"]}, "evidence": "in Anthem refers to city = 'Anthem'; stars on average = avg(review_stars)"}
{"sample_id": 3806, "db_id": "public_review_platform", "final": {"question": "Please provide the attribute values \u200b\u200bof the bussinesses with fashion in Scottsdale.", "sql": "SELECT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T1.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T4.category_name LIKE 'Fashion' AND T1.city LIKE 'Scottsdale'", "source_tables": ["business_attributes", "business_categories", "business", "categories"]}, "evidence": "fashion refers to category_name = 'Fashion'; Scottsdale refers to city = 'Scottsdale';"}
{"sample_id": 4070, "db_id": "public_review_platform", "final": {"question": "Calculate the percentage of businesses with the category name food that are open from 7AM to 8PM in the businesses with the same time.", "sql": "SELECT CAST(SUM(CASE WHEN T3.category_name = 'Food' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.category_name) FROM Business_Categories AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T1.category_id = T3.category_id", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "DIVIDE(COUNT(business_id where category_name = 'Food' and opening_time = '7AM' and closing_time = '8PM'), COUNT(business_id where opening_time = '7AM' and closing_time = '8PM')) as percentage;"}
{"sample_id": 4126, "db_id": "public_review_platform", "final": {"question": "In businesses with a category of food, how many of them have a star rating below 3?", "sql": "SELECT COUNT(DISTINCT T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Food' AND T1.stars < 3", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "category of food refers to category_name = 'Food'; star rating below 3 refers to stars < 3"}
{"sample_id": 4129, "db_id": "public_review_platform", "final": {"question": "What is the category of the business with short review length and highest review stars within business ID from 7 to 14?", "sql": "SELECT DISTINCT T3.category_name FROM Reviews AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T2.business_id >= 7 AND T2.business_id < 15 AND T1.review_length = 'Short' AND T1.review_stars = ( SELECT MAX(review_stars) FROM Reviews )", "source_tables": ["business_categories", "reviews", "categories"]}, "evidence": "category of the business refers to category_name; short review length refers to review_length = 'Short'; the highest star rating refers to MAX(stars); business ID from 7 to 14 refers to business_id BETWEEN 7 AND 14"}
{"sample_id": 3992, "db_id": "public_review_platform", "final": {"question": "List all the tires businesses that are opened everyday.", "sql": "SELECT DISTINCT T2.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T1.category_name = 'Tires' GROUP BY T2.business_id HAVING COUNT(day_id) = 7", "source_tables": ["business_categories", "business", "business_hours", "categories"]}, "evidence": "tires businesses refers to category_name = 'Tires'; opened everyday refers to COUNT(distinct opening_time) = 7;"}
{"sample_id": 4009, "db_id": "public_review_platform", "final": {"question": "Among all closed businesses in Avondale, AZ what percent have obtained a 'wonderful experience' rating of the business.", "sql": "SELECT CAST(SUM(CASE WHEN stars > 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(stars) FROM Business WHERE city = 'Avondale' AND active = 'false'", "source_tables": ["business"]}, "evidence": "closed business refers to active = 'false'; in Avondale refers to city = 'Avondale'; 'wonderful experience' rating refers to stars > 3; percentage = divide(count(business_id where stars > 3), count(business_id))*100%"}
{"sample_id": 3778, "db_id": "public_review_platform", "final": {"question": "State the number of actively running Yelp businesses in \"Tolleson\".", "sql": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Tolleson' AND active LIKE 'TRUE'", "source_tables": ["business"]}, "evidence": "actively running refers to active = 'TRUE'; Tolleson refers to city = 'Tolleson';"}
{"sample_id": 3822, "db_id": "public_review_platform", "final": {"question": "How many users who started yelping since 2012 have sent a high number of funny votes?", "sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year = 2012 AND user_votes_funny LIKE 'High'", "source_tables": ["users"]}, "evidence": "users who started yelping in 2012 refers to user_yelping_since_year = '2012'; high number of funny votes refers to user_votes_funny = 'High';"}
{"sample_id": 4117, "db_id": "public_review_platform", "final": {"question": "What is the average number of stars for businesses in the Obstetricians & Gynecologists category?", "sql": "SELECT CAST(SUM(T1.stars) AS REAL) / COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Obstetricians & Gynecologists'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "Obstetricians & Gynecologists category refers to category_name = 'Obstetricians & Gynecologists'; calculation = AVG(stars)"}
{"sample_id": 4104, "db_id": "public_review_platform", "final": {"question": "How many businesses are opened the same number of hours every day of the week?", "sql": "SELECT COUNT(business_id) FROM Business_Hours WHERE opening_time = '8AM' AND closing_time = '6PM'", "source_tables": ["business_hours"]}, "evidence": "how much time does this business open refers to SUBTRACT(closing_time, opening_time); every day of the week refers to day_id BETWEEN 1 AND 7"}
{"sample_id": 3906, "db_id": "public_review_platform", "final": {"question": "List out which business category that are most likely to have average good review in Arizona?", "sql": "SELECT DISTINCT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.state LIKE 'AZ' AND T1.review_stars >= 3", "source_tables": ["business", "business_categories", "reviews", "categories"]}, "evidence": "average good review refers to review_count > = 3; Arizona refers to state = 'AZ'; business category refers to category_name"}
{"sample_id": 4083, "db_id": "public_review_platform", "final": {"question": "Calculate the percentage of business which opened on Sunday from 9AM to 9PM based on the number of business opened on Sunday.", "sql": "SELECT CAST(SUM(CASE WHEN T2.opening_time = '9AM' AND T2.closing_time = '9PM' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.day_id) FROM Days AS T1 INNER JOIN Business_Hours AS T2 ON T1.day_id = T2.day_id WHERE T1.day_of_week = 'Sunday'", "source_tables": ["business_hours", "days"]}, "evidence": "Sunday refers to day_of_week = 'Sunday' where day_id = 1; opened from 9AM to 9PM refers to Business_Hours where opening_time = '9AM' and closing_time = '9PM'; DIVIDE(COUNT(opening_time = '9AM' and closing_time = '9PM' and day_of_week = 'Sunday'), COUNT(opening_time = NOT NULL and closing_time = NOT NULL and day_of_week = 'Sunday')) as percentage;"}
{"sample_id": 4135, "db_id": "public_review_platform", "final": {"question": "What is the attribute value of an active business with a low review count and 3 stars which is located at Goodyear, AZ?", "sql": "SELECT DISTINCT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.state = 'AZ' AND T1.city = 'Goodyear' AND T1.active = 'true' AND T1.stars = 3 AND T1.review_count = 'Low'", "source_tables": ["business_attributes", "attributes", "business"]}, "evidence": "active business ID refers to active = 'true'; low review count refers to review_count = 'Low'; 3 stars refers to stars = 3; Goodyear is a city; AZ is a state"}
{"sample_id": 3760, "db_id": "public_review_platform", "final": {"question": "How many long reviews does user No. 36139 give for the Yelp businesses?", "sql": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 36139 AND review_length LIKE 'long'", "source_tables": ["reviews"]}, "evidence": "long reviews refers to review_length = 'long'; user No. refers to user_id;"}
{"sample_id": 4031, "db_id": "public_review_platform", "final": {"question": "State the state of businesses which have closing time at 12AM.", "sql": "SELECT DISTINCT T1.state FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T2.closing_time = '12AM'", "source_tables": ["business", "business_hours"]}, "evidence": "state refers to city"}
{"sample_id": 4049, "db_id": "public_review_platform", "final": {"question": "How many business are opened for more than 8 hour in Mesa and what is the percentage of the active businesses?", "sql": "SELECT CAST(SUM(CASE WHEN T1.active = 'true' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) AS ACT FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Mesa'", "source_tables": ["business", "business_hours"]}, "evidence": "business are opened for more than 8 hours refer to business_id where SUBTRACT(closing_time, opening_time) > 8; DIVIDE(COUNT(business_id where active = 'true' and city = 'Mesa' and SUBTRACT(closing_time, opening_time) > 8), COUNT(business_id where city = 'Mesa' and SUBTRACT(closing_time, opening_time) > 8)) as percentage;"}
{"sample_id": 4020, "db_id": "public_review_platform", "final": {"question": "What is the closing time of business id 4 on Sunday?", "sql": "SELECT T2.closing_time FROM Days AS T1 INNER JOIN Business_Hours AS T2 ON T1.day_id = T2.day_id WHERE T1.day_of_week = 'Sunday' AND T2.business_id = 4", "source_tables": ["business_hours", "days"]}, "evidence": "on Sunday refers to day_of_week = 'Sunday'"}
{"sample_id": 4021, "db_id": "public_review_platform", "final": {"question": "Among the businesses which have short length of review, which one located in Phoenix?", "sql": "SELECT DISTINCT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Phoenix' AND T2.review_length = 'Short'", "source_tables": ["reviews", "business"]}, "evidence": "short length of review refers to review_length = 'Short'; in Phoenix refers to city = 'Phoenix'"}
{"sample_id": 3973, "db_id": "public_review_platform", "final": {"question": "Based on all user compliments, find the percentage of low number of compliments on all compliments ID.", "sql": "SELECT CAST(SUM(CASE WHEN number_of_compliments = 'Low' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(user_id) FROM Users_compliments", "source_tables": ["users_compliments"]}, "evidence": "low number of compliments refers to number_of_compliments = 'Low'; percentage refers to DIVIDE(COUNT(number_of_compliments = 'Low'), COUNT(user_id)) * 100"}
{"sample_id": 3919, "db_id": "public_review_platform", "final": {"question": "In users yelping since 2010 to 2012, how many of them has an low fans?", "sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year BETWEEN 2010 AND 2012 AND user_fans LIKE 'Low'", "source_tables": ["users"]}, "evidence": "user yelping since 2010 to 2012 refers to user_yelping_since_year > = '2010' AND user_yelping_since_year < '2013'; low fans refers to user_fans = 'Low'"}
{"sample_id": 3994, "db_id": "public_review_platform", "final": {"question": "List the business ID of shopping business that have 4 stars ratings.", "sql": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Shopping' AND T1.stars = 4", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "shopping business refers to category_name = 'Shopping'; 4 stars ratings refers to stars = 4"}
{"sample_id": 3930, "db_id": "public_review_platform", "final": {"question": "Find the location of businesses that has business hours from 9 am to 9 pm every Saturday.", "sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time LIKE '9PM' AND T2.opening_time LIKE '9AM' AND T3.day_of_week LIKE 'Saturday' GROUP BY T1.city", "source_tables": ["days", "business", "business_hours"]}, "evidence": "9 am refers to opening_time = '9AM'; 9 pm refers to closing_time = '9PM'; every Saturday refers to day_of_week = 'Saturday'; location refers to city"}
{"sample_id": 4100, "db_id": "public_review_platform", "final": {"question": "How many businesses are not closed in the city of Mesa?", "sql": "SELECT COUNT(business_id) FROM Business WHERE city = 'Mesa' AND active = 'true'", "source_tables": ["business"]}, "evidence": "businesses are not closed refers to active = 'true'"}
{"sample_id": 3866, "db_id": "public_review_platform", "final": {"question": "Among the Yelp_Business in Arizona, how many of them closes at 12PM on Sundays?", "sql": "SELECT COUNT(T1.business_id) FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.day_of_week LIKE 'Sunday' AND T1.closing_time LIKE '12PM' AND T3.state LIKE 'AZ'", "source_tables": ["days", "business", "business_hours"]}, "evidence": "in Arizona refers to state = 'AZ'; closes at 12PM refers to closing_time = '12PM'; on Sundays refers to day_of_week = 'Sunday'"}
{"sample_id": 4123, "db_id": "public_review_platform", "final": {"question": "In users yelping since 2009 to 2011, how many of them have low count of fans?", "sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year >= 2009 AND user_yelping_since_year < 2012 AND user_fans = 'Low'", "source_tables": ["users"]}, "evidence": "users in yelping since 2009 to 2011 refers to user_yelping_since_year BETWEEN 2009 AND 2011; low count of fans refers to user_fans = 'Low'"}
{"sample_id": 4067, "db_id": "public_review_platform", "final": {"question": "Among the active businesses in Arizona, how many businesses work after 12PM?", "sql": "SELECT COUNT(DISTINCT T2.business_id) FROM Business_Hours AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.active = 'true' AND T2.state = 'AZ' AND T1.opening_time > '12PM'", "source_tables": ["business_categories", "business", "business_hours", "categories"]}, "evidence": "active businesses in Arizona refer to business_id where state = 'Arizona' and active = 'true'; work after 12PM refer to opening_time > '12PM';"}
{"sample_id": 3923, "db_id": "public_review_platform", "final": {"question": "List the active business ID and its stars of the businesses fall under the category of Pets.", "sql": "SELECT T1.business_id, T1.stars FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'TRUE' AND T3.category_name LIKE 'Pets'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "active business refers to active = 'true'; 'Pets' is the category_name"}
{"sample_id": 4086, "db_id": "public_review_platform", "final": {"question": "Which business ID received the review of 4 star and above by 65% of user? Describe their active status and city.", "sql": "SELECT DISTINCT T2.business_id, T2.city FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.review_stars >= 4 AND ( SELECT CAST(( SELECT COUNT(DISTINCT T1.user_id) FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.review_stars >= 4 ) AS REAL) * 100 / ( SELECT COUNT(user_id) FROM Users ) > 65 )", "source_tables": ["business", "reviews", "users"]}, "evidence": "review of 4 star and above refers to stars > 4; DIVIDE(SUM(stars > 4), COUNT(business_id)) = 0.65;"}
{"sample_id": 3894, "db_id": "public_review_platform", "final": {"question": "What is the attribute value of an active business with a high review count and 3 stars which is located at Mesa, AZ?", "sql": "SELECT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.state LIKE 'AZ' AND T1.review_count LIKE 'High' AND T1.active LIKE 'TRUE' AND T1.city LIKE 'Mesa' AND T1.stars = 3", "source_tables": ["business_attributes", "attributes", "business"]}, "evidence": "active business refers to active = 'true'; located at Mesa, AZ refers to city = 'Mesa', state = 'AZ'"}
{"sample_id": 3773, "db_id": "public_review_platform", "final": {"question": "There was only one tip that user No. 69722 gave to the Yelp business, what was the ratings of that business?", "sql": "SELECT T2.stars FROM Tips AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.user_id = 69722", "source_tables": ["tips", "business"]}, "evidence": "short tip refers to tip_lenghth = 'short'; user No. refers to user_id; ratings refers to stars; stars = 5 means great experience; stars = 4 means good experience; stars = 3 means average experience; stars = 2 means bad experience; stars = 1 means terrible experience;\n"}
{"sample_id": 3788, "db_id": "public_review_platform", "final": {"question": "User No.\"63469\" has got \"1\" like for a tip to the Yelp business, which city is that business located in?", "sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Tips AS T2 ON T1.business_id = T2.business_id WHERE T2.likes = 1 AND T2.user_id = 63469", "source_tables": ["tips", "business"]}, "evidence": "user No. refers to user_id;"}
{"sample_id": 3857, "db_id": "public_review_platform", "final": {"question": "How many Yelp_Business in Anthem are under the category of \"Food\"?", "sql": "SELECT COUNT(T3.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name LIKE 'Food' AND T3.city LIKE 'Anthem'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "in Anthem refers to city = 'Anthem'; the category of \"Food\" refers to category_name = 'Food'"}
{"sample_id": 3986, "db_id": "public_review_platform", "final": {"question": "List all the businesses that closed at 8PM.", "sql": "SELECT DISTINCT business_id FROM Business_Hours WHERE closing_time = '8PM'", "source_tables": ["business_hours"]}, "evidence": "closed at 8PM refers to closing_time = '8PM';"}
{"sample_id": 3967, "db_id": "public_review_platform", "final": {"question": "What is the percentage for the Yelp businesses in \"Pets\" category of all businesses?", "sql": "SELECT CAST(SUM(CASE WHEN T2.category_name = 'Pets' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.category_name) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id", "source_tables": ["business_categories", "categories"]}, "evidence": "businesses in \"Pets\" category refers to category_name = 'Pets'; percentage refers to DIVIDE(COUNT(category_name = 'Pets'), COUNT(business_id)) * 100%"}
{"sample_id": 3770, "db_id": "public_review_platform", "final": {"question": "For the Yelp business which had the most number of \"short\" tips, which category does it belong to?", "sql": "SELECT DISTINCT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Tips AS T4 ON T3.business_id = T4.business_id WHERE T4.tip_length LIKE 'short'", "source_tables": ["tips", "business_categories", "business", "categories"]}, "evidence": "short tips refers to tip_length = 'short'; most number of short tips refers to MAX(COUNT(tip_length = 'short')); category refers to category_name;"}
{"sample_id": 4118, "db_id": "public_review_platform", "final": {"question": "Calculate the percentage of users with a high number of fans who were elite in 2011.", "sql": "SELECT CAST(SUM(CASE WHEN T3.user_fans = 'High' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.user_fans) FROM Years AS T1 INNER JOIN Elite AS T2 ON T1.year_id = T2.year_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T1.actual_year = 2011", "source_tables": ["elite", "years", "users"]}, "evidence": "users with a high number of fans refers to user_fans = 'High'; 2011 refers to actual_year = 2011; Calculation = DIVIDE(Elite.user_id where user_fans = 'High' AND actual_year = 2011, Elite.user_id where actual_year = 2011) * 100"}
{"sample_id": 3993, "db_id": "public_review_platform", "final": {"question": "Which users become an elite in 2012?", "sql": "SELECT DISTINCT T1.user_id FROM Elite AS T1 INNER JOIN Years AS T2 ON T1.year_id = T2.year_id WHERE T2.actual_year = 2012", "source_tables": ["elite", "years"]}, "evidence": "in 2012 refers to actual_year = 2012;"}
{"sample_id": 3984, "db_id": "public_review_platform", "final": {"question": "Compare the number of business between the category of \"Men's Clothing\" and \"Women's Clothing\".", "sql": "SELECT SUM(CASE WHEN T1.category_name = 'Men''s Clothing' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.category_name = 'Women''s Clothing' THEN 1 ELSE 0 END) AS diff FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id", "source_tables": ["business_categories", "categories"]}, "evidence": "category of \"Men's Clothing\" refers to category_name = 'Men''s Clothing'; \"Women's Clothing\" refers to category_name = 'Women''s Clothing'"}
{"sample_id": 4013, "db_id": "public_review_platform", "final": {"question": "How many short tips were left for the business with ID no.2?", "sql": "SELECT COUNT(business_id) FROM Tips WHERE business_id = 2 AND tip_length = 'Short'", "source_tables": ["tips"]}, "evidence": "short tip refers to tip_length = 'Short'; business category refers to category_name"}
{"sample_id": 3903, "db_id": "public_review_platform", "final": {"question": "How many businesses in Phoenix, Arizona is attributed to waiter service?", "sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.city LIKE 'Phoenix' AND T3.attribute_name LIKE 'waiter_service' AND T2.attribute_id = 2", "source_tables": ["business_attributes", "attributes", "business"]}, "evidence": "'Phoenix' is the city; waiter service refers to attribute_name = 'waiter_services'"}
{"sample_id": 4060, "db_id": "public_review_platform", "final": {"question": "Among the working days from Monday to Saturday, which businesses with the category names work the most days?", "sql": "SELECT T2.category_name FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T1.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id GROUP BY T2.category_name ORDER BY COUNT(T3.day_id) DESC LIMIT 1", "source_tables": ["days", "business_categories", "business_hours", "categories"]}, "evidence": "days from Monday to Saturday refer to day_id between 2 and 7; work the most days can be computed as MAX(COUNT(category_name where day_id between 2 and 7));"}
{"sample_id": 4112, "db_id": "public_review_platform", "final": {"question": "How many open businesses in the City of Phoenix have users left a long review?", "sql": "SELECT COUNT(DISTINCT T2.business_id) FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.review_length = 'Long' AND T2.active = 'true' AND T2.city = 'Phoenix'", "source_tables": ["business", "reviews"]}, "evidence": "open businesses refers to active = 'true'; long review refers to review_length = 'Long'"}
{"sample_id": 3798, "db_id": "public_review_platform", "final": {"question": "Indicate the opening hours of businesses are with category in fashion.", "sql": "SELECT T4.opening_time FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T1.category_name LIKE 'Fashion'", "source_tables": ["business_categories", "business", "business_hours", "categories"]}, "evidence": "opening hours refers to opening_time; category refers to category_name;"}
{"sample_id": 3785, "db_id": "public_review_platform", "final": {"question": "How many hours does the Yelp business No. \"5734\" open on Saturday?", "sql": "SELECT T1.closing_time - T1.opening_time AS \"hour\" FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week LIKE 'Saturday' AND T1.business_id = 5734", "source_tables": ["days", "business_hours"]}, "evidence": "how many hours = SUBTRACT(closing_time, opening_time); business No. refers to business_id; open on Saturday refers to day_of_week = 'Saturday';"}
{"sample_id": 4116, "db_id": "public_review_platform", "final": {"question": "How many businesses in the city of Scottsdale open on Sunday at 12PM?", "sql": "SELECT COUNT(DISTINCT T2.business_id) FROM Business AS T1 INNER JOIN Business_hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city = 'Scottsdale' AND T3.day_of_week = 'Sunday' AND T2.opening_time = '12PM'", "source_tables": ["days", "business", "business_hours"]}, "evidence": "businesses that opened on Sunday refers to day_of_week = 'Sunday'; businesses that opened at 12PM refers to opening_time = '12PM'"}
{"sample_id": 4061, "db_id": "public_review_platform", "final": {"question": "Please indicate the business id have the closing time with the category of Arts & Entertainment on Sunday.", "sql": "SELECT T1.business_id, T3.closing_time FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T1.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id WHERE T2.category_name = 'Arts & Entertainment' AND T4.day_of_week = 'Sunday'", "source_tables": ["days", "business_categories", "business_hours", "categories"]}, "evidence": "Sunday refers to day_of_week = 'Sunday' where day_id = 1; category of Arts & Entertainment refers to category_name = 'Arts & Entertainment';"}
{"sample_id": 3858, "db_id": "public_review_platform", "final": {"question": "Please list the business ID of the Yelp_Business with the highest Elitestar rating under the category \"Food\".", "sql": "SELECT T2.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name LIKE 'Food' ORDER BY T3.stars DESC LIMIT 1", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "under the category \"Food\" refers to category_name = 'Food'"}
{"sample_id": 4154, "db_id": "citeseer", "final": {"question": "How many papers were cited by schmidt99advanced cited word3555?", "sql": "SELECT COUNT(T2.paper_id) FROM cites AS T1 INNER JOIN content AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T1.citing_paper_id = 'schmidt99advanced' AND T2.word_cited_id = 'word3555'", "source_tables": ["cites", "content"]}, "evidence": "paper cited by refers to citing_paper_id; citing_paper_id = 'schmidt99advanced';"}
{"sample_id": 4150, "db_id": "citeseer", "final": {"question": "List the words that are cited in both AI and IR class label.", "sql": "SELECT DISTINCT T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'AI' OR T1.class_label = 'IR'", "source_tables": ["paper", "content"]}, "evidence": ""}
{"sample_id": 4142, "db_id": "citeseer", "final": {"question": "For all words cited in paper ID 315017, state the other paper ID and class label which also cited those words.", "sql": "SELECT T1.class_label, T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.paper_id = 315017", "source_tables": ["paper", "content"]}, "evidence": ""}
{"sample_id": 4153, "db_id": "citeseer", "final": {"question": "Find the words cited in papers that are cited by sima01computational?", "sql": "SELECT DISTINCT T2.word_cited_id FROM cites AS T1 INNER JOIN content AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T1.citing_paper_id = 'sima01computational'", "source_tables": ["cites", "content"]}, "evidence": "paper cited by refers to citing_paper_id; citing_paper_id = 'sima01computational';"}
{"sample_id": 4157, "db_id": "citeseer", "final": {"question": "In the papers classified as ML, how many cited butz01algorithmic?", "sql": "SELECT COUNT(T1.paper_id) FROM paper AS T1 INNER JOIN cites AS T2 ON T1.paper_id = T2.citing_paper_id WHERE T1.class_label = 'ML' AND T2.cited_paper_id = 'butz01algorithmic'", "source_tables": ["paper", "cites"]}, "evidence": "classification refers to class_label; paper cited by refers to citing_paper_id; citing_paper_id = 'butz01algorithmic';"}
{"sample_id": 4340, "db_id": "simpson_episodes", "final": {"question": "Among the episodes which have star score greater than 5, how many episodes have air date in 2008?", "sql": "SELECT COUNT(DISTINCT T2.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE strftime('%Y', T1.air_date) = '2008' AND T2.stars > 5;", "source_tables": ["episode", "vote"]}, "evidence": "star score greater than 5 refers to stars > 5; have air date in 2008 refers to air_date LIKE '2008%'"}
{"sample_id": 4324, "db_id": "simpson_episodes", "final": {"question": "Write down all the keywords for winner of \"WGA Award (TV)\" award.", "sql": "SELECT T2.keyword FROM Award AS T1 INNER JOIN Keyword AS T2 ON T2.episode_id = T1.episode_id WHERE T1.award_category = 'WGA Award (TV)';", "source_tables": ["award", "keyword"]}, "evidence": "winner of \"WGA Award (TV)\" award refers to award_category = 'WGA Award (TV)' and result = 'Winner'"}
{"sample_id": 4253, "db_id": "simpson_episodes", "final": {"question": "Please indicate the keywords of the title \"Double, Double, Boy in Trouble\".", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Double, Double, Boy in Trouble';", "source_tables": ["keyword", "episode"]}, "evidence": ""}
{"sample_id": 4172, "db_id": "simpson_episodes", "final": {"question": "What's the title of the episode that got the most 7-star votes in star score?", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 7 ORDER BY T2.votes DESC LIMIT 1;", "source_tables": ["episode", "vote"]}, "evidence": "7-stars vote refers to stars = 7;\u00a0 most refers to Max(votes)"}
{"sample_id": 4261, "db_id": "simpson_episodes", "final": {"question": "Which episode did the composer win for Outstanding Music Composition for a Series (Original Dramatic Score) with more than 200 votes?", "sql": "SELECT DISTINCT T1.episode_id FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.role = 'composer' AND T1.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)' AND T2.votes > 200;", "source_tables": ["award", "vote"]}, "evidence": "more than 200 votes refer to votes > 200; composer refers to role = 'composer'; Outstanding Music Composition for a Series (Original Dramatic Score) refers to award = 'Outstanding Music Composition for a Series (Original Dramatic Score)'"}
{"sample_id": 4245, "db_id": "simpson_episodes", "final": {"question": "Who produced The simpson 20s: Season 20?", "sql": "SELECT DISTINCT person FROM Credit WHERE role = 'producer';", "source_tables": ["credit"]}, "evidence": "produced refers to role = 'producer'"}
{"sample_id": 4284, "db_id": "simpson_episodes", "final": {"question": "What are the episodes that have the average rating with more than 20 of 2-star votes?", "sql": "SELECT DISTINCT T1.episode_id FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 2 AND T2.votes > 20 AND T1.rating > 5.0 AND T1.rating <= 7.0;", "source_tables": ["episode", "vote"]}, "evidence": "2-star refers to stars = 2; average rating refers to 5 < rating < = 7; more than 20 of 2-star votes refers to votes > 20"}
{"sample_id": 4238, "db_id": "simpson_episodes", "final": {"question": "List all keywords associated with the episode 'Take My Life, Please'.", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Take My Life, Please';", "source_tables": ["keyword", "episode"]}, "evidence": "episode 'Take My Life, Please' refers to title = \u00a0 'Take My Life, Please'"}
{"sample_id": 4193, "db_id": "simpson_episodes", "final": {"question": "Which episode has the most vote for 10 stars rating?", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 10 ORDER BY T1.votes DESC LIMIT 1;", "source_tables": ["episode", "vote"]}, "evidence": "10 stars rating refers to stars = 10; most vote refers to Max(votes)"}
{"sample_id": 4208, "db_id": "simpson_episodes", "final": {"question": "What is the birth place of the cast or crew member who won the Best Voice-Over Performance in Online Film & Television Association in 2009?", "sql": "SELECT T1.birth_place FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award = 'Best Voice-Over Performance' AND T2.organization = 'Online Film & Television Association' AND T2.year = 2009;", "source_tables": ["award", "person"]}, "evidence": "won refers to result = 'Winner'; 'Best Voice-Over Performance' is the award; ' Online Film & Television Association' is the organization; in 2009 refers to year = 2009"}
{"sample_id": 4222, "db_id": "simpson_episodes", "final": {"question": "List the nominee, keywords and episode ID of the title \"The Good, the Sad and the Drugly\".", "sql": "SELECT T3.person, T1.keyword, T1.episode_id FROM Keyword AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Award AS T3 ON T2.episode_id = T3.episode_id WHERE T2.title = 'The Good, the Sad and the Drugly' AND T3.result = 'Nominee';", "source_tables": ["award", "keyword", "episode"]}, "evidence": "nominee refers to result = 'Nominee'"}
{"sample_id": 4259, "db_id": "simpson_episodes", "final": {"question": "Please indicate which writer has an episode star score greater than 5 in 2009.", "sql": "SELECT T1.person FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2009' AND T1.role = 'writer' AND T2.votes > 5;", "source_tables": ["award", "episode"]}, "evidence": "writer refers to role = 'writer'; star score greater than 5 refers to stars > 5; in 2009 refers to year = 2009"}
{"sample_id": 4258, "db_id": "simpson_episodes", "final": {"question": "Please give the name of the director who achieved the Outstanding Animated Program (For Programming Less Than One Hour) award whose episode title is \"No Loan Again, Naturally\".", "sql": "SELECT T1.person FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.role = 'director' AND T1.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T2.title = 'No Loan Again, Naturally';", "source_tables": ["award", "episode"]}, "evidence": "the director refers to role = 'director'"}
{"sample_id": 4357, "db_id": "simpson_episodes", "final": {"question": "Among the episodes aired in 2008 with votes ranges from 920 to 950, list their percent.", "sql": "SELECT T2.percent FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 4) = '2008' AND T1.votes BETWEEN 950 AND 960;", "source_tables": ["episode", "vote"]}, "evidence": "aired in 2008 refers to air_date LIKE '2008%'; votes ranges from 920 to 950 refers to votes BETWEEN 920 AND 950"}
{"sample_id": 4364, "db_id": "simpson_episodes", "final": {"question": "In episode with the highest votes, list the category of awards it is nominated for.", "sql": "SELECT T1.award_category FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.result = 'Nominee' ORDER BY T2.votes DESC LIMIT 1;", "source_tables": ["award", "episode"]}, "evidence": "highest votes refers to max(votes); nominated refers to result = 'Nominee'"}
{"sample_id": 4310, "db_id": "simpson_episodes", "final": {"question": "How many title's crew members are working from Casting Department?", "sql": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.category = 'Casting Department';", "source_tables": ["credit", "episode"]}, "evidence": "working from Casting Department refers to category = 'Casting Department'"}
{"sample_id": 4268, "db_id": "simpson_episodes", "final": {"question": "How many executive producers are the nominees for the award of \"Outstanding Animated Program (For Programming Less Than One Hour)\"?", "sql": "SELECT COUNT(*) FROM Award WHERE role = 'executive producer' AND result = 'Nominee' AND award = 'Outstanding Animated Program (For Programming Less Than One Hour)';", "source_tables": ["award"]}, "evidence": "the nominees refers to result = 'Nominee'; executive producers refers to role = 'executive producer'"}
{"sample_id": 4337, "db_id": "simpson_episodes", "final": {"question": "Calculate the percentage of the winners who are higher than 1.75 meters.", "sql": "SELECT CAST(SUM(CASE WHEN T1.height_meters > 1.75 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.result = 'Winner';", "source_tables": ["award", "person"]}, "evidence": "winners refers to result = 'Winner'; higher than 1.75 meters refers to height_meters > 1.75; percentage = divide(sum(result = 'Winner' and height_meters > 1.75), count(result = 'Winner' )) * 100%\n"}
{"sample_id": 4205, "db_id": "simpson_episodes", "final": {"question": "How old was the awardee when he/she won the first-ever award for Outstanding Voice-Over Performance in Primetime Emmy Awards?", "sql": "SELECT T2.year - CAST(SUBSTR(T1.birthdate, 1, 4) AS int) AS age FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award = 'Outstanding Voice-Over Performance' AND T2.organization = 'Primetime Emmy Awards' AND T2.result = 'Winner';", "source_tables": ["award", "person"]}, "evidence": "\"Outstanding Voice-Over Performance\" is the award; 'Primetime Emmy Awards' is the organization; awardee refers to result = 'Winner'; first ever award refers to Min(year); age at the time of awarded refers to Subtract(year, SUBSTR(birthdate, 0, 5))"}
{"sample_id": 4225, "db_id": "simpson_episodes", "final": {"question": "Mention the episode ID, title and any three keywords of the episode which get the most number of votes in star classification of worst.", "sql": "SELECT DISTINCT T3.episode_id, T2.title, T1.keyword FROM Keyword AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Vote AS T3 ON T2.episode_id = T3.episode_id WHERE T3.stars = 1 ORDER BY T3.votes DESC LIMIT 3;", "source_tables": ["keyword", "episode", "vote"]}, "evidence": "star classification of worst refers to stars = 1; most number of votes refers to MAX(votes)"}
{"sample_id": 4174, "db_id": "simpson_episodes", "final": {"question": "What is the percentage of Primetime Emmy nominated episodes with a rating over 7 to all the episodes that have a rating over 7?", "sql": "SELECT CAST(SUM(CASE WHEN T1.award_category = 'Primetime Emmy' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.rating > 7 AND T1.result = 'Nominee';", "source_tables": ["award", "episode"]}, "evidence": "\"Primetime Emmy' is the award_category;\u00a0 rating over 7 refers to rating > 7; nominated refers to result = 'Nominee'; percentage = Divide(Count(episode_id(award_category = 'Primetime Emmy')), Count (episode_id)) * 100"}
{"sample_id": 4167, "db_id": "simpson_episodes", "final": {"question": "What's the rating of the episode in which Dan Castellaneta won the Outstanding Voice-Over Performance award in 2009?", "sql": "SELECT T2.rating FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award = 'Outstanding Voice-Over Performance' AND SUBSTR(T1.year, 1, 4) = '2009' AND T1.person = 'Dan Castellaneta';", "source_tables": ["award", "episode"]}, "evidence": "\"Dan Castellaneta\" is the person;\u00a0 2009 is year;\u00a0 won refers result = 'Winner'"}
{"sample_id": 4296, "db_id": "simpson_episodes", "final": {"question": "Who is the writer for the episode with the most 10 star votes?", "sql": "SELECT T1.person FROM Credit AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.role = 'Writer' AND T2.stars = 10 GROUP BY T1.person ORDER BY COUNT(*) DESC LIMIT 1;", "source_tables": ["credit", "vote"]}, "evidence": "writer refers to role = 'Writer'; most 10 star votes refers to max(votes) where stars = 10"}
{"sample_id": 4166, "db_id": "simpson_episodes", "final": {"question": "How many keywords does the episode that was aired on 2008/10/19 have?", "sql": "SELECT COUNT(T2.keyword) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.air_date = '2008-10-19';", "source_tables": ["keyword", "episode"]}, "evidence": "aired on 2008/10/19 refers to air_date = '2008-10-19'"}
{"sample_id": 4319, "db_id": "simpson_episodes", "final": {"question": "List down the keyword and crew member's name for episode id S20-E1.", "sql": "SELECT T1.keyword, T2.person FROM Keyword AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.episode_id = 'S20-E1';", "source_tables": ["credit", "keyword"]}, "evidence": ""}
{"sample_id": 4344, "db_id": "simpson_episodes", "final": {"question": "What is the name of actor who took the role Smithers?", "sql": "SELECT DISTINCT T1.person FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Smithers';", "source_tables": ["award", "character_award"]}, "evidence": "name refers to person; the role Smithers refers to character = 'Smithers'"}
{"sample_id": 4189, "db_id": "simpson_episodes", "final": {"question": "Among the person nominated for the Comedy Series Award in 2009, how many of them were born in California?", "sql": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.year = 2009 AND T2.award = 'Comedy Series' AND T1.birth_region = 'California';", "source_tables": ["award", "person"]}, "evidence": "nominated refers to result = 'Nominee'; born in California refers to birth_place = 'California'; in 2009 refers to year = 2009"}
{"sample_id": 4327, "db_id": "simpson_episodes", "final": {"question": "Calculate the total rating of winners in OFTA Television Award and WGA Award (TV).", "sql": "SELECT SUM(T2.rating) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award_category IN ('Jupiter Award ', 'WGA Award (TV)');", "source_tables": ["award", "episode"]}, "evidence": "winners refers to result = 'Winner'; in OFTA Television Award and WGA Award (TV) refers to award = 'OFTA Television Award' and award = 'WGA Award (TV)'"}
{"sample_id": 4188, "db_id": "simpson_episodes", "final": {"question": "List the name character awarded for the Outstanding Voice-Over Performance award in 2009.", "sql": "SELECT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.year = 2009 AND T1.award = 'Outstanding Voice-Over Performance';", "source_tables": ["award", "character_award"]}, "evidence": "in 2009 refers to year = 2009"}
{"sample_id": 4216, "db_id": "simpson_episodes", "final": {"question": "Among the casts who were born in Los Angeles, describe the name and birth date of who have 1.8 m and above in height.", "sql": "SELECT name, birthdate FROM Person WHERE birth_place = 'Los Angeles' AND height_meters >= 1.8;", "source_tables": ["person"]}, "evidence": "\"Los Angeles\" is the birth_place; 1.8 m and above in height refers to height_meters > = 1.8"}
{"sample_id": 4360, "db_id": "simpson_episodes", "final": {"question": "What is the title of episode nominated for WGA Award (TV) with votes greater than 1000?", "sql": "SELECT DISTINCT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.votes > 1000 AND T1.award_category = 'WGA Award (TV)' AND T1.result = 'Nominee';", "source_tables": ["award", "episode"]}, "evidence": "nominated refers to result = 'Nominee'; WGA Award (TV) refers to award_category = 'WGA Award (TV)'; votes greater than 1000 refers to votes > 1000"}
{"sample_id": 4306, "db_id": "simpson_episodes", "final": {"question": "How many people were not born in Connecticut, USA?", "sql": "SELECT COUNT(name) FROM Person WHERE birth_region != 'Connecticut' AND birth_country != 'USA';", "source_tables": ["person"]}, "evidence": "not born in Connecticut, USA refers to birth_region ! = 'Connecticut' and birth_country ! = 'USA'"}
{"sample_id": 4211, "db_id": "simpson_episodes", "final": {"question": "How many award winners are from the USA?", "sql": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T1.birth_country = 'USA' AND T2.result = 'Winner';", "source_tables": ["award", "person"]}, "evidence": "award winner refers to result = 'Winner'; 'USA' is the birth_country"}
{"sample_id": 4179, "db_id": "simpson_episodes", "final": {"question": "Write the title and all the keywords of the episode that was aired on 3/22/2009.", "sql": "SELECT T1.title, T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.air_date = '2009-03-22';", "source_tables": ["keyword", "episode"]}, "evidence": "aired on 3/22/2009 refers to air_date = '2009-03-22'"}
{"sample_id": 4173, "db_id": "simpson_episodes", "final": {"question": "How many stars on average does the episode Lost Verizon have?", "sql": "SELECT CAST(SUM(T2.votes * T2.stars) AS REAL) / SUM(T2.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lost Verizon';", "source_tables": ["episode", "vote"]}, "evidence": "\"Lost Verizon\" is the title of episode; stars on average = Divide( Sum (Multiply (votes, stars)), Sum(votes))"}
{"sample_id": 4196, "db_id": "simpson_episodes", "final": {"question": "Based on the credits, state how many roles were played in the 5th episode of simpson 20.", "sql": "SELECT COUNT(DISTINCT T2.role) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.episode = 5;", "source_tables": ["credit", "episode"]}, "evidence": "5th episode refers to episode = 5"}
{"sample_id": 4275, "db_id": "simpson_episodes", "final": {"question": "What was the character that Dan Castellaneta did the voice over for and was awarded?", "sql": "SELECT DISTINCT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.award LIKE '%Voice-Over%' AND T1.person = 'Dan Castellaneta';", "source_tables": ["award", "character_award"]}, "evidence": "voice over for and was awarded refers to award like '%Voice-Over%';"}
{"sample_id": 4204, "db_id": "simpson_episodes", "final": {"question": "How many episodes was Dell Hake not included in the credit list?", "sql": "SELECT COUNT(*) FROM Credit WHERE person = 'Dell Hake' AND credited = 'false';", "source_tables": ["credit"]}, "evidence": "\"Dell Hake\" is the person; not included in the credit list refers to credited = ''"}
{"sample_id": 4280, "db_id": "simpson_episodes", "final": {"question": "How many votes of 5-star did the episode \"Lisa the Drama Queen\" receive?", "sql": "SELECT SUM(T2.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lisa the Drama Queen' AND T2.stars = 5;", "source_tables": ["episode", "vote"]}, "evidence": "episode \"Lisa the Drama Queen\" refers to title = 'Lisa the Drama Queen';"}
{"sample_id": 4283, "db_id": "simpson_episodes", "final": {"question": "What are the keywords of the least popular episode?", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id ORDER BY T1.votes LIMIT 1;", "source_tables": ["keyword", "episode"]}, "evidence": "least popular episode refers to MIN(votes)"}
{"sample_id": 4342, "db_id": "simpson_episodes", "final": {"question": "Which are the years that character Mr. Burns won an award?", "sql": "SELECT DISTINCT T1.year FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Mr. Burns';", "source_tables": ["award", "character_award"]}, "evidence": ""}
{"sample_id": 4363, "db_id": "simpson_episodes", "final": {"question": "What is the title of episode with 5 stars and nominated for Prism Award which is aired on April 19, 2009?", "sql": "SELECT T3.title FROM Award AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE T3.air_date = '2009-04-19' AND T1.award_category = 'Prism Award' AND T2.stars = 5 AND T1.result = 'Nominee';", "source_tables": ["award", "episode", "vote"]}, "evidence": "5 stars refers to stars = 5; nominated refers to result = 'Nominee'; Prism Award refers to award_category = 'Prism Award'; on April 19 2009 refers to air_date = '2009-04-19'"}
{"sample_id": 4399, "db_id": "student_loan", "final": {"question": "How many students from SMC are unemployed?", "sql": "SELECT T2.name FROM enrolled AS T1 INNER JOIN unemployed AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.school = 'smc'", "source_tables": ["unemployed", "enrolled"]}, "evidence": "from SMC refers to school = 'smc';"}
{"sample_id": 4527, "db_id": "student_loan", "final": {"question": "List out the number of students who filed for bankruptcy and enlisted in navy.", "sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name WHERE T1.organ = 'navy'", "source_tables": ["enlist", "filed_for_bankrupcy"]}, "evidence": "navy refers to organ = 'navy';"}
{"sample_id": 4473, "db_id": "student_loan", "final": {"question": "How many unemployed students are enlisted in the Army organization?", "sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name WHERE T1.organ = 'army'", "source_tables": ["unemployed", "enlist"]}, "evidence": "organization refers to organ; organ = 'army';"}
{"sample_id": 4413, "db_id": "student_loan", "final": {"question": "What is the employment, disability, gender and school debt status for student180 and student117?", "sql": "SELECT ( SELECT COUNT(name) FROM disabled WHERE name IN ('student180', 'student117') ), ( SELECT COUNT(name) FROM unemployed WHERE name IN ('student180', 'student117') ), ( SELECT COUNT(name) FROM male WHERE name IN ('student180', 'student117') ), ( SELECT COUNT(name) FROM no_payment_due WHERE name IN ('student180', 'student117'))", "source_tables": ["disabled", "male", "unemployed", "no_payment_due"]}, "evidence": "school debt status refers to bool; bool = 'pos' means has payment due; bool = 'neg' means doesn't has payment due; student appear in male.name means he is a male; student does not appear in male.name means she is a female;"}
{"sample_id": 4440, "db_id": "student_loan", "final": {"question": "Mention the name of students who filed for bankruptcy and have never been absent from school.", "sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name WHERE T1.month = 0", "source_tables": ["longest_absense_from_school", "filed_for_bankrupcy"]}, "evidence": "have never been absent refers to month = 0;"}
{"sample_id": 4538, "db_id": "student_loan", "final": {"question": "Provide the names of the students enlisted in the fire department.", "sql": "SELECT name FROM enlist WHERE organ = 'fire_department'", "source_tables": ["enlist"]}, "evidence": "department refers to organ; organ = 'fire_department';"}
{"sample_id": 4505, "db_id": "student_loan", "final": {"question": "Please provide a gender breakdown for each organization.", "sql": "SELECT IIF(T2.name IS NULL, 'female', 'male') AS gender FROM enlist AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name GROUP BY T1.organ", "source_tables": ["male", "enlist"]}, "evidence": "gender breakdown refers to the number of male and female; male are mentioned in male.name; female refers to enlist.name who are NOT in male.name; organization refers to organ;"}
{"sample_id": 4496, "db_id": "student_loan", "final": {"question": "Provide the enlisted organizations of student160 and status of his/her payment due.", "sql": "SELECT T1.organ, T2.bool FROM enlist AS T1 INNER JOIN no_payment_due AS T2 ON T2.name = T1.name WHERE T1.name = 'student160'", "source_tables": ["enlist", "no_payment_due"]}, "evidence": "enlisted organizations refers to organ; student160 is a name of student; status of his or her payment due is mentioned in no_payment_due; bool = 'pos' means the student has payment due; bool = 'neg' means the student has no payment due;"}
{"sample_id": 4561, "db_id": "student_loan", "final": {"question": "Which organization has the least number of male students?", "sql": "SELECT T.organ FROM ( SELECT T2.organ, COUNT(T1.name) AS num FROM male AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name GROUP BY T2.organ ) T ORDER BY T.num LIMIT 1", "source_tables": ["male", "enlist"]}, "evidence": "organization refers to organ; male students are mentioned in male.name; least number of male students refers to MIN(male.name);"}
{"sample_id": 4531, "db_id": "student_loan", "final": {"question": "How many students have been absent less than 4 months?", "sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month < 4", "source_tables": ["longest_absense_from_school"]}, "evidence": "absent less than 4 months refers to month < 4;"}
{"sample_id": 4504, "db_id": "student_loan", "final": {"question": "Please provide a disability breakdown for each school.", "sql": "SELECT COUNT(T1.name) FROM enrolled AS T1 INNER JOIN disabled AS T2 ON T2.name = T1.name GROUP BY T1.school", "source_tables": ["disabled", "enrolled"]}, "evidence": "disability breakdown refers to the number of disabled students;"}
{"sample_id": 4416, "db_id": "student_loan", "final": {"question": "What is the ratio of disable female to male students?", "sql": "SELECT CAST(SUM(IIF(T2.name IS NULL, 1, 0)) AS REAL) * 100 / COUNT(T2.name) FROM disabled AS T1 LEFT JOIN male AS T2 ON T1.\"name\" = T2.\"name\"", "source_tables": ["disabled", "male"]}, "evidence": "ratio refers to DIVIDE(COUNT(name not from male), COUNT(name from male))"}
{"sample_id": 4374, "db_id": "student_loan", "final": {"question": "Among the students from the navy department, how many of them have payment due?", "sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN no_payment_due AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.organ = 'navy' AND T2.bool = 'pos'", "source_tables": ["enlist", "no_payment_due"]}, "evidence": "from the navy department refers to organ = 'navy'; have payment due refers to bool = 'pos';"}
{"sample_id": 4435, "db_id": "student_loan", "final": {"question": "What is the percentage of unemployed students who have been absent for 5 months from school?", "sql": "SELECT CAST(SUM(IIF(T1.month > 5, 1, 0)) AS REAL) * 100 / COUNT(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name", "source_tables": ["longest_absense_from_school", "unemployed"]}, "evidence": "percentage refers to DIVIDE(COUNT(month > 5), COUNT(month))"}
{"sample_id": 4412, "db_id": "student_loan", "final": {"question": "Please check if student 124 is disabled male.", "sql": "SELECT IIF(T2.name IS NULL, 'female', 'male') FROM male AS T1 LEFT JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.name = 'student124'", "source_tables": ["disabled", "male"]}, "evidence": "if student name appear in disabled then student is disabled and vice versa; if student name appear in male then student is male and vice versa"}
{"sample_id": 4480, "db_id": "student_loan", "final": {"question": "How many students enlisted in the navy?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'navy'", "source_tables": ["enlist"]}, "evidence": "navy refers to organ = 'navy';"}
{"sample_id": 4395, "db_id": "student_loan", "final": {"question": "Name all disabled students that are enrolled in SMC.", "sql": "SELECT T2.name FROM enrolled AS T1 INNER JOIN disabled AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.school = 'smc'", "source_tables": ["disabled", "enrolled"]}, "evidence": "enrolled in SMC refers to school = 'smc';"}
{"sample_id": 4392, "db_id": "student_loan", "final": {"question": "List all students in the air force and which school they were enrolled at.", "sql": "SELECT T1.name, T1.school FROM enrolled AS T1 INNER JOIN enlist AS T2 ON T1.\"name\" = T2.\"name\" WHERE T2.organ = 'air_force'", "source_tables": ["enlist", "enrolled"]}, "evidence": "in the air force refers to organ = 'air_force';"}
{"sample_id": 4525, "db_id": "student_loan", "final": {"question": "List out the number of disabled students who enlisted in marines.", "sql": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'marines'", "source_tables": ["disabled", "enlist"]}, "evidence": "marines refers to organ = 'marines';"}
{"sample_id": 4465, "db_id": "student_loan", "final": {"question": "How many students are enlisted in the Navy organization?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'navy'", "source_tables": ["enlist"]}, "evidence": "enlisted in the navy organization refers to organ = 'navy';"}
{"sample_id": 4567, "db_id": "student_loan", "final": {"question": "How many months did a student in the Air Force miss school the most?", "sql": "SELECT T1.month FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name ORDER BY T1.month DESC LIMIT 1", "source_tables": ["longest_absense_from_school", "enlist"]}, "evidence": "Air Force refers to organ = 'air_force'; number of months a student miss school the most refers to MAX(COUNT(month));"}
{"sample_id": 4389, "db_id": "student_loan", "final": {"question": "List all students that have been absent for 6 months.", "sql": "SELECT name FROM longest_absense_from_school WHERE \"month\" = 6", "source_tables": ["longest_absense_from_school"]}, "evidence": "absent for 6 months `month` = 6;"}
{"sample_id": 4490, "db_id": "student_loan", "final": {"question": "Calculate the number of students who are not disabled.", "sql": "SELECT COUNT(CASE  WHEN T2.name IS NULL THEN T1.name END) AS \"number\" FROM person AS T1 LEFT JOIN disabled AS T2 ON T2.name = T1.name", "source_tables": ["disabled", "person"]}, "evidence": "students who are not disabled refers to person.name who are NOT in disabled.name;"}
{"sample_id": 4516, "db_id": "student_loan", "final": {"question": "What is the percentage difference between the attendence of disabled and non-disable students? Do the disable students show better attendance than non-disable students?", "sql": "SELECT CAST((SUM(IIF(T2.name IS NOT NULL AND T1.month = 0, 1, 0)) - SUM(IIF(T2.name IS NULL AND T1.month = 0, 1, 0))) AS REAL) * 100 / COUNT(T1.name), IIF(SUM(IIF(T2.name IS NOT NULL AND T1.month = 0, 1, 0)) - SUM(IIF(T2.name IS NULL AND T1.month = 0, 1, 0)) > 0, 'YES', 'NO') AS isHigh FROM longest_absense_from_school AS T1 LEFT JOIN disabled AS T2 ON T2.name = T1.name", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "difference = MULTIPLY(DIVIDE(SUBTRACT(COUNT(longest_absense_from_school.name that is in disabled.name), COUNT(longest _absense_from_school.name that is NOT in disabled.name), longest _absense_from_school.name), 100)); IF COUNT(longest_absense_from_school.name that is in disabled.name) < COUNT(longest _absense_from_school.name that is NOT in disabled.name), it means, the disabled students have better attendance than non-disabled students; IF COUNT(longest_absense_from_school.name that is in disabled.name) > COUNT(longest _absense_from_school.name that is NOT in disabled.name), it means the disabled students do not have a better attendance than non-disabled students;"}
{"sample_id": 4570, "db_id": "student_loan", "final": {"question": "Which organization has the highest number of male students? Calculate for the percentage of the male students in the said organization.", "sql": "SELECT T.organ, T.per FROM ( SELECT T1.organ, CAST(COUNT(T3.name) AS REAL) / COUNT(T2.name) AS per , COUNT(T3.name) AS num FROM enlist AS T1 INNER JOIN person AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name GROUP BY T1.organ ) T ORDER BY T.num DESC LIMIT 1", "source_tables": ["male", "enlist", "person"]}, "evidence": "organization refers to organ; highest number of male students refers to MAX(COUNT(male.name)); percentage = DIVIDE(COUNT(male.name), COUNT(person.name)), 1.0;"}
{"sample_id": 4546, "db_id": "student_loan", "final": {"question": "What is the school and gender of student34?", "sql": "SELECT T1.school , IIF(T3.name IS NULL, 'female', 'male') AS gender FROM enrolled AS T1 INNER JOIN person AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name WHERE T2.name = 'student34'", "source_tables": ["person", "male", "enrolled"]}, "evidence": "male.name = 'student34' means student34's gender is male; if 'student34' can't be found in 'male.name', it means student34 is female; student34 is a name of student;"}
{"sample_id": 4517, "db_id": "student_loan", "final": {"question": "Calculate the average duration of absense of disabled male students.", "sql": "SELECT AVG(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T2.name = T1.name INNER JOIN male AS T3 ON T3.name = T2.name", "source_tables": ["disabled", "longest_absense_from_school", "male"]}, "evidence": "average duration = DIVIDE(SUM(month), COUNT(month)); duration of absence refers to month; disabled male students refers to disabled.name who are IN male.name;"}
{"sample_id": 4566, "db_id": "student_loan", "final": {"question": "Among the students who filed for bankruptcy, how many students are disabled?", "sql": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name", "source_tables": ["disabled", "filed_for_bankrupcy"]}, "evidence": ""}
{"sample_id": 4446, "db_id": "student_loan", "final": {"question": "How many students are enlisted in the army?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'army'", "source_tables": ["enlist"]}, "evidence": "enlisted in the army refers to organ = 'army';"}
{"sample_id": 4420, "db_id": "student_loan", "final": {"question": "What is the average of absence for an employed students?", "sql": "SELECT AVG(month) FROM longest_absense_from_school WHERE name NOT IN ( SELECT name FROM unemployed )", "source_tables": ["longest_absense_from_school", "unemployed"]}, "evidence": "average refers to DIVIDE(SUM(month), COUNT(name))"}
{"sample_id": 4377, "db_id": "student_loan", "final": {"question": "How many students are unemployed and have payment due?", "sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN no_payment_due AS T2 ON T1.\"name\" = T2.\"name\"", "source_tables": ["unemployed", "no_payment_due"]}, "evidence": "are unemployed and have payment due refers to"}
{"sample_id": 4521, "db_id": "student_loan", "final": {"question": "What is the status of payment of student 124?", "sql": "SELECT \"bool\" FROM no_payment_due WHERE name = 'student124'", "source_tables": ["no_payment_due"]}, "evidence": "status of payment is mentioned in no_payment_due; bool = 'pos' means the student has payment due; bool = 'neg' means the student has no payment due; student124 is a name of student;"}
{"sample_id": 4450, "db_id": "student_loan", "final": {"question": "How many unemployed students still have payment due?", "sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T2.bool = 'pos'", "source_tables": ["unemployed", "no_payment_due"]}, "evidence": "still have payment due refers to bool = 'pos'"}
{"sample_id": 4432, "db_id": "student_loan", "final": {"question": "State name of disabled students who have the longest duration of absense from school.", "sql": "SELECT T1.name FROM disabled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name ORDER BY T2.month DESC LIMIT 1", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "longest duration of absense refers to MAX(month)"}
{"sample_id": 4563, "db_id": "student_loan", "final": {"question": "How many of the unemployed students are disabled?", "sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name", "source_tables": ["disabled", "unemployed"]}, "evidence": ""}
{"sample_id": 4524, "db_id": "student_loan", "final": {"question": "State name of students who have been absent for 5 months from school and do not have payment due.", "sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T1.month = 5 AND T2.bool = 'neg'", "source_tables": ["longest_absense_from_school", "no_payment_due"]}, "evidence": "absent for 5 months refers to month = 5; do not have payment due refers to bool = 'neg';"}
{"sample_id": 4369, "db_id": "student_loan", "final": {"question": "For the students who have been absent from school for the longest time, how many months have they been absent?", "sql": "SELECT MAX(month) FROM longest_absense_from_school", "source_tables": ["longest_absense_from_school"]}, "evidence": "absent from school for the longest time refers to MAX(month)"}
{"sample_id": 4426, "db_id": "student_loan", "final": {"question": "State the number of students do not have payment due.", "sql": "SELECT COUNT(name) FROM no_payment_due WHERE bool = 'neg'", "source_tables": ["no_payment_due"]}, "evidence": "do not have payment due refers to bool = 'neg';"}
{"sample_id": 4467, "db_id": "student_loan", "final": {"question": "How many students are enlisted in the Peace Corps organization are enrolled in UCSD school?", "sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name WHERE T1.organ = 'peace_corps' AND T2.school = 'ucsd'", "source_tables": ["enlist", "enrolled"]}, "evidence": "enlisted in the Peace Corps refers to organ = 'peace_corps'; enrolled in UCSD school refers to school = 'ucsd';"}
{"sample_id": 4554, "db_id": "student_loan", "final": {"question": "What are the names of the students who joined the Marines?", "sql": "SELECT name FROM enlist WHERE organ = 'marines'", "source_tables": ["enlist"]}, "evidence": "Marines refers to organ = 'marines';"}
{"sample_id": 4437, "db_id": "student_loan", "final": {"question": "State name of unemployed students who have the longest duration of absense from school.", "sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name ORDER BY T1.month DESC LIMIT 1", "source_tables": ["longest_absense_from_school", "unemployed"]}, "evidence": "longest duration of absense refers to MAX(month)"}
{"sample_id": 4415, "db_id": "student_loan", "final": {"question": "List out the organization joined and school enrolled by student27, student17 and student101?", "sql": "SELECT T1.school, T2.organ FROM enrolled AS T1 INNER JOIN enlist AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.\"name\" IN ('student27,student17,studetn101')", "source_tables": ["enlist", "enrolled"]}, "evidence": "organization joined refers to organ"}
{"sample_id": 4584, "db_id": "mental_health_survey", "final": {"question": "How many users answered \"No\" to the question \"Would you bring up a mental health issue with a potential employer in an interview?\" in 2014's survey?", "sql": "SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T1.questiontext = 'Would you bring up a mental health issue with a potential employer in an interview?' AND T2.SurveyID = 2014 AND T2.AnswerText LIKE 'NO'", "source_tables": ["answer", "question"]}, "evidence": "2014 refer to SurveyID; Answered No refer to AnswerText = 'No'; Question refer to questiontext\n\n"}
{"sample_id": 4612, "db_id": "mental_health_survey", "final": {"question": "How many times more for the number of users who took the \"mental health survey for 2017\" than \"mental health survey for 2018\"?", "sql": "SELECT CAST(COUNT(T1.UserID) AS REAL) / ( SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2018' ) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2017'", "source_tables": ["answer", "survey"]}, "evidence": "How many times more = subtract(count(UserID(SurveyID = 2017)), count(UserID(SurveyID = 2018)))"}
{"sample_id": 4602, "db_id": "mental_health_survey", "final": {"question": "Provide the number of users who took part in the \"mental health survey for 2016\".", "sql": "SELECT COUNT(DISTINCT T1.UserID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2016'", "source_tables": ["answer", "survey"]}, "evidence": "mental health survey for 2016 refers to SurveyID = 2016"}
{"sample_id": 4613, "db_id": "mental_health_survey", "final": {"question": "Among respondents who participated in the survey in 2016, what percentage had a mental health disorder in the past?", "sql": "SELECT CAST(SUM(CASE  WHEN T1.AnswerText LIKE 'Yes' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.SurveyID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.QuestionID = 32 AND T1.SurveyID = 2016", "source_tables": ["answer", "question"]}, "evidence": "respondents and 'users' are synonyms; percentage = divide(count(SurveyID = 2016& QuestionID = 32 & AnswerText = 'Yes'), count(SurveyID = 2016& QuestionID = 32))*100%"}
{"sample_id": 4587, "db_id": "mental_health_survey", "final": {"question": "Please list all the answers to the question \"Any additional notes or comments\" that are not null in 2014's survey.", "sql": "SELECT T2.AnswerText FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T1.questiontext = 'Any additional notes or comments' AND T2.SurveyID = 2014 AND T2.AnswerText <> -1", "source_tables": ["answer", "question"]}, "evidence": "question refers to questiontext; the answers that are not null refers to AnswerText ! = -1\n"}
{"sample_id": 4619, "db_id": "mental_health_survey", "final": {"question": "How many respondents of the mental health survey were diagnosed with 'Substance Use Disorder'?", "sql": "SELECT COUNT(AnswerText) FROM Answer WHERE AnswerText LIKE 'Substance Use Disorder'", "source_tables": ["answer"]}, "evidence": "respondents' and 'users' are synonyms"}
{"sample_id": 4603, "db_id": "mental_health_survey", "final": {"question": "What was the most common answer for the question \"What country do you work in?\"?", "sql": "SELECT T1.AnswerText FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext = 'What country do you work in?' GROUP BY T1.AnswerText ORDER BY COUNT(T1.AnswerText) DESC LIMIT 1", "source_tables": ["answer", "question"]}, "evidence": "most common answer refers to AnswerText where MAX(COUNT(AnswerText(QuestionID = 3)))"}
{"sample_id": 4592, "db_id": "mental_health_survey", "final": {"question": "How many users answered \"Yes\" to the question \"Have you had a mental health disorder in the past?\" in 3 consecutive years starting from 2016?", "sql": "SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID IN (2016, 2017, 2018) AND T1.questiontext LIKE 'Have you had a mental health disorder in the past?' AND T2.AnswerText = 'Yes'", "source_tables": ["answer", "question"]}, "evidence": "question refers to questiontext; answered 'Yes' to question refers to AnswerText = 'Yes'; 3 consecutive years starting from 2016 refers to SurveyID = 2016 and SurveyID = 2017 and SurveyID = 2018"}
{"sample_id": 4600, "db_id": "mental_health_survey", "final": {"question": "Tell the number of surveys that contained the question \u201cWhat country do you work in?\u201d.", "sql": "SELECT COUNT(DISTINCT T1.QuestionID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid INNER JOIN Survey AS T3 ON T1.SurveyID = T3.SurveyID WHERE T2.questiontext = 'What country do you work in?'", "source_tables": ["answer", "question", "survey"]}, "evidence": "question refers to questiontext"}
{"sample_id": 4588, "db_id": "mental_health_survey", "final": {"question": "Please list all the common questions in 2014's survey and 2016's survey.", "sql": "SELECT T1.questiontext FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID IN (2014, 2016) GROUP BY T1.questiontext", "source_tables": ["answer", "question"]}, "evidence": "question refers to questiontext; all the common questions in 2014's survey and 2016's survey refers to QuestionID(SurveyID(2014)) = QuestionID(SurveyID(2016))\n"}
{"sample_id": 4652, "db_id": "disney", "final": {"question": "What are the names of the characters voiced by Frank Welker?", "sql": "SELECT character FROM \"voice-actors\" WHERE \"voice-actor\" = 'Frank Welker'", "source_tables": ["voice-actors"]}, "evidence": "Frank Welker refers to voice-actor = 'Frank Welker';"}
{"sample_id": 4649, "db_id": "disney", "final": {"question": "How many movies did Wolfgang Reitherman direct?", "sql": "SELECT COUNT(name) FROM director WHERE director = 'Wolfgang Reitherman'", "source_tables": ["director"]}, "evidence": "Wolfgang Reitherman refers director = 'Wolfgang Reitherman';"}
{"sample_id": 4699, "db_id": "disney", "final": {"question": "Name the voice actor of the character Calliope in the movie Hercules.", "sql": "SELECT \"voice-actor\" FROM \"voice-actors\" WHERE movie = 'Hercules' AND character = 'Calliope'", "source_tables": ["voice-actors"]}, "evidence": "Hercules refers to movie = 'Hercules';"}
{"sample_id": 4623, "db_id": "disney", "final": {"question": "Who is the director of the movie Pinocchio?", "sql": "SELECT director FROM director WHERE name = 'Pinocchio'", "source_tables": ["director"]}, "evidence": "Pinocchio is the name of the movie;"}
{"sample_id": 4645, "db_id": "disney", "final": {"question": "Who is the director of the adventure movie which was released on 2007/3/30?", "sql": "SELECT T1.director FROM director AS T1 INNER JOIN movies_total_gross AS T2 ON T2.movie_title = T1.name WHERE T2.genre = 'Adventure' AND T2.release_date = 'Mar 30, 2007'", "source_tables": ["director", "movies_total_gross"]}, "evidence": "released on 2007/3/30 refers to release_date = 'Mar 30, 2007'; adventure movie refers to genre = 'Adventure' ;"}
{"sample_id": 4663, "db_id": "disney", "final": {"question": "List the voice actors from the movie \"Meet the Robinsons\".", "sql": "SELECT \"voice-actor\" FROM \"voice-actors\" WHERE movie = 'Meet the Robinsons'", "source_tables": ["voice-actors"]}, "evidence": "Meet the Robinsons refers to movie_title = 'Meet the Robinsons';"}
{"sample_id": 4732, "db_id": "disney", "final": {"question": "Name the most recent movie directed by Chris Buck. Which of his movies was more successful in terms of grossing? Use the current gross for comparison.", "sql": "SELECT T1.movie_title, MAX(T1.release_date), MAX(T1.inflation_adjusted_gross) FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Chris Buck'", "source_tables": ["movies_total_gross", "director"]}, "evidence": "Chris Buck refers to director = 'Chris Buck'; the most recent movie refers to movie_title where MAX(release_date); current gross refers to inflation_adjusted_gross; more successful movie refers to MAX(inflation_adjusted_gross);"}
{"sample_id": 4682, "db_id": "disney", "final": {"question": "List the movie titles directed by Jack Kinney.", "sql": "SELECT name FROM director WHERE director = 'Jack Kinney'", "source_tables": ["director"]}, "evidence": "Jack Kinney refers to director = 'Jack Kinney';"}
{"sample_id": 4685, "db_id": "disney", "final": {"question": "List the movie titles and character names by Bill Thompson.", "sql": "SELECT movie, character FROM \"voice-actors\" WHERE \"voice-actor\" = 'Bill Thompson'", "source_tables": ["voice-actors"]}, "evidence": "Bill Thompson refers to voice-actor = 'Bill Thompson';"}
{"sample_id": 4673, "db_id": "disney", "final": {"question": "Who directed the movie with the most voice actors?", "sql": "SELECT T2.director, COUNT(DISTINCT T1.\"voice-actor\") FROM \"voice-actors\" AS T1 INNER JOIN director AS T2 ON T1.movie = T2.name GROUP BY T2.director ORDER BY COUNT(DISTINCT T1.\"voice-actor\") DESC LIMIT 1", "source_tables": ["voice-actors", "director"]}, "evidence": "who directed refers director;"}
{"sample_id": 4727, "db_id": "disney", "final": {"question": "Find out what proportion of total revenue Walt Disney Parks and Resorts received in 2010.", "sql": "SELECT SUM(\"Walt Disney Parks and Resorts\") / SUM(Total) * 100 FROM revenue WHERE year = 2010", "source_tables": ["revenue"]}, "evidence": "DIVIDE(Walt Disney Parks and Resorts where year = 2010), SUM(year = 2010) as percentage;"}
{"sample_id": 4678, "db_id": "disney", "final": {"question": "What is the average total gross for the movies featuring Sterling Holloway?", "sql": "SELECT SUM(CAST(REPLACE(trim(T2.total_gross, '$'), ',', '') AS REAL)) / COUNT(T2.movie_title) FROM \"voice-actors\" AS T1 INNER JOIN movies_total_gross AS T2 ON T1.movie = T2.movie_title WHERE T1.\"voice-actor\" = 'Sterling Holloway'", "source_tables": ["voice-actors", "movies_total_gross"]}, "evidence": "DIVIDE(SUM(total_gross where voice-actor = 'Sterling Holloway'); COUNT(movie_title where voice-actor = 'Sterling Holloway'));"}
{"sample_id": 4627, "db_id": "disney", "final": {"question": "Who is the voice actor for the villain of the movie \"Alice in Wonderland\"?", "sql": "SELECT T1.\"voice-actor\" FROM \"voice-actors\" AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title WHERE T1.character LIKE '%' OR T2.villian OR '%' AND T2.movie_title = 'Alice in Wonderland'", "source_tables": ["voice-actors", "characters"]}, "evidence": "Alice in Wonderland refers to movie_title = 'Alice in Wonderland'; villain refers to character like '%'||T1.villian||'%';"}
{"sample_id": 4687, "db_id": "disney", "final": {"question": "Provide the titles, main characters, and associated songs of the movies directed by Wolfgang Reitherman in 1977.", "sql": "SELECT T1.movie_title, T2.hero, T2.song FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title INNER JOIN director AS T3 ON T1.movie_title = T3.name WHERE T3.director = 'Wolfgang Reitherman' AND SUBSTR(T1.release_date, LENGTH(T1.release_date) - 3, LENGTH(T1.release_date)) = '1977'", "source_tables": ["movies_total_gross", "director", "characters"]}, "evidence": "Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; 1997 refers to substr(release_date, length(release_date) - 3, length(release_date)) = '1977'; the titles refer to movie_title; main characters refer to hero;"}
{"sample_id": 4669, "db_id": "disney", "final": {"question": "Who voiced the villain in \"The Rescuers\"?", "sql": "SELECT T1.\"voice-actor\" FROM \"voice-actors\" AS T1 INNER JOIN characters AS T2 ON T2.movie_title = T1.movie WHERE T2.movie_title = 'The Rescuers' AND T1.character = T2.villian", "source_tables": ["voice-actors", "characters"]}, "evidence": "The Rescuers refers to movie_title = 'The Rescuers'; who voiced refers to voice-actor;"}
{"sample_id": 4733, "db_id": "disney", "final": {"question": "Name actors who voiced more than five Disney characters.", "sql": "SELECT \"voice-actor\" FROM \"voice-actors\" GROUP BY \"voice-actor\" HAVING COUNT(movie) > 5", "source_tables": ["voice-actors"]}, "evidence": "Actors who voiced refer to voice-actor;"}
{"sample_id": 4689, "db_id": "disney", "final": {"question": "Describe the hero, director, and the release date of Mulan.", "sql": "SELECT T1.hero, T2.director, T1.release_date FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.movie_title = 'Mulan'", "source_tables": ["director", "characters"]}, "evidence": "Mulan refers to movie_title = 'Mulan';"}
{"sample_id": 4633, "db_id": "disney", "final": {"question": "Which character is the villain of the most popular movie?", "sql": "SELECT T2.villian FROM \"movies_total_gross\" AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title ORDER BY T1.total_gross DESC LIMIT 1", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "the most popular movie refers to movie_title where MAX(total_gross);"}
{"sample_id": 4691, "db_id": "disney", "final": {"question": "Provide the title, director, and release date of the movie voice-acted by Freddie Jones.", "sql": "SELECT T1.movie, T3.director, T2.release_date FROM \"voice-actors\" AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title INNER JOIN director AS T3 ON T3.name = T2.movie_title WHERE T1.\"voice-actor\" = 'Freddie Jones'", "source_tables": ["voice-actors", "director", "characters"]}, "evidence": "Freddie Jones refers to voice-actor = 'Freddie Jones'; title refers to movie_title;"}
{"sample_id": 4637, "db_id": "disney", "final": {"question": "Give the name of the movie which the song \"I Thought I Lost You\" is associated with.", "sql": "SELECT movie_title FROM characters WHERE song = 'I Thought I Lost You'", "source_tables": ["characters"]}, "evidence": "name of the movie refers to movie_title;"}
{"sample_id": 4646, "db_id": "disney", "final": {"question": "Wolfgang Reitherman has directed several Disney movies, which one has the highest grossing after accounting for inflation?", "sql": "SELECT T1.movie_title FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Wolfgang Reitherman' ORDER BY CAST(REPLACE(SUBSTR(inflation_adjusted_gross, 2), ',', '') AS REAL) DESC LIMIT 1", "source_tables": ["movies_total_gross", "director"]}, "evidence": "Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; the highest grossing after accounting for inflation refers to MAX(inflation_adjusted_gross);"}
{"sample_id": 4708, "db_id": "disney", "final": {"question": "Which movies of director Wolfgang Reitherman do not have villain?", "sql": "SELECT T1.movie_title FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Wolfgang Reitherman' AND T1.villian IS NULL", "source_tables": ["director", "characters"]}, "evidence": "which movies do not have villain refer to movie_title where villian is null;"}
{"sample_id": 4659, "db_id": "disney", "final": {"question": "List all the voice actors in the movie directed by Ben Sharpsteen which was released on February 9, 1940.", "sql": "SELECT T2.\"voice-actor\" FROM director AS T1 INNER JOIN \"voice-actors\" AS T2 INNER JOIN movies_total_gross AS T3 ON T1.name = T2.movie AND T2.movie = T3.movie_title WHERE T1.director = 'Ben Sharpsteen' AND T3.release_date = 'Feb 9, 1940' AND T2.\"voice-actor\" != 'None' GROUP BY T2.\"voice-actor\"", "source_tables": ["voice-actors", "director", "movies_total_gross"]}, "evidence": "Ben Sharpsteen refers to director = 'Ben Sharpsteen'; released on February 9, 1940 refers to release_date = 'Feb 9, 1940';"}
{"sample_id": 4910, "db_id": "legislator", "final": {"question": "What is the contact form of the legislator named Rick Crawford?", "sql": "SELECT T2.contact_form FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Rick Crawford'", "source_tables": ["current-terms", "current"]}, "evidence": ""}
{"sample_id": 4863, "db_id": "legislator", "final": {"question": "What is the ratio between famous current legislators and famous historical legislators?", "sql": "SELECT CAST(COUNT(CASE WHEN wikipedia_id IS NOT NULL THEN bioguide_id ELSE 0 END) AS REAL) * 100 / ( SELECT COUNT(CASE WHEN wikipedia_id IS NOT NULL THEN bioguide_id ELSE 0 END) FROM historical ) FROM current", "source_tables": ["historical", "current"]}, "evidence": "ratio = DIVIDE(COUNT(current.bioguide_id WHERE current.wikipedia_id is not null), COUNT(historical.bioguide_id WHERE historical.wikipedia_id is not null)); famous current legislators refers to current.wikipedia_id is not null; famous historical legislators refers to historical.wikipedia_id is not null;"}
{"sample_id": 4848, "db_id": "legislator", "final": {"question": "Which legislators are woman?", "sql": "SELECT first_name, last_name FROM historical WHERE gender_bio = 'F'", "source_tables": ["historical"]}, "evidence": "woman refers to gender_bio = 'F';"}
{"sample_id": 4903, "db_id": "legislator", "final": {"question": "How many of the legislators are female?", "sql": "SELECT COUNT(gender_bio) FROM current WHERE gender_bio = 'F'", "source_tables": ["current"]}, "evidence": "female refers to gender_bio = 'F';"}
{"sample_id": 4758, "db_id": "legislator", "final": {"question": "How many legislators have an Instagram account?", "sql": "SELECT COUNT(*) FROM \"social-media\" WHERE instagram IS NOT NULL AND instagram <> ''", "source_tables": ["social-media"]}, "evidence": "have an Instagram account refers to instagram is NOT null and instagram <>''"}
{"sample_id": 4905, "db_id": "legislator", "final": {"question": "Provide the address of the legislator with the contact form of http://www.carper.senate.gov/contact/.", "sql": "SELECT address FROM \"current-terms\" WHERE contact_form = 'http://www.carper.senate.gov/contact/'", "source_tables": ["current-terms"]}, "evidence": ""}
{"sample_id": 4850, "db_id": "legislator", "final": {"question": "How many legislators are not senator?", "sql": "SELECT COUNT(bioguide) FROM \"current-terms\" WHERE class IS NULL", "source_tables": ["current-terms"]}, "evidence": "not senator refers to class is null;"}
{"sample_id": 4875, "db_id": "legislator", "final": {"question": "List the official full names of all the legislators who have facebook, instagram, twitter and youtube accounts.", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.facebook IS NOT NULL AND T2.instagram IS NOT NULL AND T2.twitter IS NOT NULL AND T2.youtube IS NOT NULL", "source_tables": ["social-media", "current"]}, "evidence": "have facebook, instagram, twitter and youtube accounts refers to 'facebook' is not null AND 'instagram' is not null AND 'twitter' is not null AND 'youtube' is not null;"}
{"sample_id": 4737, "db_id": "legislator", "final": {"question": "Please list the official full names of all the current legislators who do not have an account on C-SPAN's video website.", "sql": "SELECT official_full_name FROM current WHERE cspan_id IS NULL OR cspan_id = ''", "source_tables": ["current"]}, "evidence": "legislators who do not have an account refers to cspan_id IS NULL OR cspan_id = ''"}
{"sample_id": 4816, "db_id": "legislator", "final": {"question": "Calculate the percentage of legislators who are not Senator and were born before 1975.", "sql": "SELECT CAST(COUNT(CASE WHEN T2.class IS NULL THEN T1.bioguide_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bioguide_id) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE CAST(T1.birthday_bio AS DATE) <= 1975", "source_tables": ["current-terms", "current"]}, "evidence": "not Senator refers to class is NULL; born before 1975 refers to birthday_bio < = 1975; calculation = MULTIPLY(DIVIDE(COUNT(class IS NULL THEN bioguide_id), COUNT(bioguide_id)), 1.0)"}
{"sample_id": 4815, "db_id": "legislator", "final": {"question": "Calculate the percentage of legislators who are Senator and were born in 1964.", "sql": "SELECT CAST(SUM(CASE WHEN T2.class IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio LIKE '%1964%'", "source_tables": ["current-terms", "current"]}, "evidence": "are senator refers to class IS NOT NULL; born in 1964 refers to birthday_bio = 1964; calculation = MULTIPLY(DIVIDE(COUNT(class IS NOT NULL THEN bioguide_id), COUNT(bioguide_id)), 1.0)"}
{"sample_id": 4874, "db_id": "legislator", "final": {"question": "Which party has the highest number of legislators who are Baptist?", "sql": "SELECT T2.party FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.religion_bio = 'Baptist' GROUP BY T2.party ORDER BY COUNT(T2.party) DESC LIMIT 1", "source_tables": ["current-terms", "current"]}, "evidence": "party that has the highest number of legislators refers to MAX(COUNT(party)); Baptist refers to religion_bio = 'Baptist';"}
{"sample_id": 4779, "db_id": "legislator", "final": {"question": "Give the official full names of legislators representing Virginia.", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state = 'VA' GROUP BY T1.official_full_name", "source_tables": ["current-terms", "current"]}, "evidence": "Virginia refers to state = 'VA'"}
{"sample_id": 4873, "db_id": "legislator", "final": {"question": "How many Jewish legislators do not have facebook?", "sql": "SELECT COUNT(T3.bioguide_id) FROM ( SELECT T1.bioguide_id FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.facebook IS NULL GROUP BY T1.bioguide_id ) T3", "source_tables": ["social-media", "current"]}, "evidence": "Jewish legislators refers to religion_bio = 'Jewish'; do not have facebook refers to facebook is null;"}
{"sample_id": 4829, "db_id": "legislator", "final": {"question": "List the full name of legislators whose born in 1960.", "sql": "SELECT official_full_name FROM current WHERE birthday_bio LIKE '1960%'", "source_tables": ["current"]}, "evidence": "full name refers to official_full_name; born in 1960 refers to birthday_bio like '1960%';"}
{"sample_id": 4865, "db_id": "legislator", "final": {"question": "How many Catholic legislators do not have an account on ballotpedia.org?", "sql": "SELECT COUNT(bioguide_id) FROM historical WHERE religion_bio = 'Catholic' AND ballotpedia_id IS NULL", "source_tables": ["historical"]}, "evidence": "Catholic refers to religion_bio = 'Catholic'; do not have an account on ballotpedia.org refers to ballotpedia_id is null;"}
{"sample_id": 4775, "db_id": "legislator", "final": {"question": "Give the YouTube ID of the channel 'RepWassermanSchultz.'", "sql": "SELECT youtube_id FROM \"social-media\" WHERE youtube = 'RepWassermanSchultz'", "source_tables": ["social-media"]}, "evidence": "RepWassermanSchultz refers to youtube"}
{"sample_id": 4792, "db_id": "legislator", "final": {"question": "How many percent of senators were from class 1?", "sql": "SELECT CAST(SUM(CASE WHEN class = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM \"historical-terms\" WHERE type = 'sen'", "source_tables": ["historical-terms"]}, "evidence": "senator refers to type = 'sen'; class 1 refers to class = 1; calculation = MULTIPLY(DIVIDE(COUNT(class = 1 then bioguide), COUNT(bioguide)), 1.0)"}
{"sample_id": 4794, "db_id": "legislator", "final": {"question": "How many years had Jr. John Conyers served in total?", "sql": "SELECT SUM(CAST(T2.END - T2.start AS DATE)) AS sum FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'John Conyers, Jr.'", "source_tables": ["current-terms", "current"]}, "evidence": "Jr. John Conyers is an official_full_name; years served refers to SUM(SUBTRACT(END, start))"}
{"sample_id": 4839, "db_id": "legislator", "final": {"question": "What is the party and state of the legislator that has an open secrets ID of N00003689 and thomas ID of 186?", "sql": "SELECT T2.party, T2.state FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.opensecrets_id = 'N00003689' AND T1.thomas_id = 186 GROUP BY T2.party, T2.state", "source_tables": ["current-terms", "current"]}, "evidence": ""}
{"sample_id": 4743, "db_id": "legislator", "final": {"question": "How many current legislators do not have an account on instagram?", "sql": "SELECT COUNT(*) FROM \"social-media\" AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T1.instagram IS NULL", "source_tables": ["social-media", "current"]}, "evidence": "do not have an account on instagram refers to instagram is null"}
{"sample_id": 4751, "db_id": "legislator", "final": {"question": "For which state did current legislator Sherrod Brown serve during his term that started on 1993/1/5?", "sql": "SELECT T1.state FROM \"current-terms\" AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.start = '1993-01-05' AND T2.official_full_name = 'Sherrod Brown'", "source_tables": ["current-terms", "current"]}, "evidence": "Sherrod Brown is an full official name; started on 1993/1/5 refers to start = '1993-01-05';"}
{"sample_id": 4789, "db_id": "legislator", "final": {"question": "What is the ratio of males and females among historical legislators?", "sql": "SELECT CAST(SUM(CASE WHEN gender_bio = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender_bio = 'F' THEN 1 ELSE 0 END) FROM historical", "source_tables": ["historical"]}, "evidence": "male refers to gender_bio = 'M'; female refers to gender_bio = 'F'; calculation = DIVIDE(COUNT(gender_bio = 'M' THEN bioguide_id), COUNT(gender_bio = 'F' THEN bioguide_id))"}
{"sample_id": 4746, "db_id": "legislator", "final": {"question": "What is the username of the current official Facebook presence of the oldest current legislator?", "sql": "SELECT T2.facebook FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T2.bioguide = T1.bioguide_id ORDER BY T1.birthday_bio LIMIT 1", "source_tables": ["social-media", "current"]}, "evidence": "username of the official Facebook refers to facebook; the oldest refers to MAX(birthday_bio)"}
{"sample_id": 4748, "db_id": "legislator", "final": {"question": "Current legislator Roger F. Wicker has not been a representative for how many terms?", "sql": "SELECT SUM(CASE WHEN T1.official_full_name = 'Roger F. Wicker' THEN 1 ELSE 0 END) AS count FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.district IS NULL OR T2.district = ''", "source_tables": ["current-terms", "current"]}, "evidence": "Roger F. Wicker is an official_full_name; not a representative refers to district IS NULL OR district = ''"}
{"sample_id": 4811, "db_id": "legislator", "final": {"question": "What is the title of legislator whose birthday on 2/20/1942?", "sql": "SELECT T2.title FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio = '1942-02-20' GROUP BY T2.title", "source_tables": ["current-terms", "current"]}, "evidence": "birthday on 2/20/1942 refers to birthday_bio = '1942-02-20'"}
{"sample_id": 4797, "db_id": "legislator", "final": {"question": "Among legislators who have an Instagram account, list down their full names and nicknames who have a Thomas ID of less than 1000.", "sql": "SELECT T1.official_full_name, T1.nickname_name FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T2.bioguide = T1.bioguide_id WHERE T2.instagram IS NOT NULL AND T1.thomas_id < 1000", "source_tables": ["social-media", "current"]}, "evidence": "have an Instagram account refers to instagram is not null; full names refers to official_full_name; nicknames refers to nickname_name; Thomas ID of less than 1000 refers to thomas_id < 1000;"}
{"sample_id": 4771, "db_id": "legislator", "final": {"question": "What is the district number that Chris Van Hollen serving?", "sql": "SELECT T2.district FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Chris Van Hollen' AND T2.district IS NOT NULL GROUP BY T2.district", "source_tables": ["current-terms", "current"]}, "evidence": "Chris Van Hollen is an official_full_name"}
{"sample_id": 4825, "db_id": "legislator", "final": {"question": "How many of the legislators are male?", "sql": "SELECT COUNT(*) FROM current WHERE gender_bio = 'M'", "source_tables": ["current"]}, "evidence": "male refers to gender_bio = 'M';"}
{"sample_id": 4799, "db_id": "legislator", "final": {"question": "Among the legislators who have served in the U.S. House, provide the party and the state of the legislators who were born in 1738.", "sql": "SELECT T1.party, T1.state FROM \"historical-terms\" AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.house_history_id IS NOT NULL AND T2.birthday_bio LIKE '%1738%'", "source_tables": ["historical", "historical-terms"]}, "evidence": "have served in the U.S. House refers to house_history_id IS NOT NULL; born in 1738 refers to birthday_bio = 1738"}
{"sample_id": 4756, "db_id": "legislator", "final": {"question": "How many males were members of the current legislators?", "sql": "SELECT COUNT(*) FROM current WHERE gender_bio = 'M'", "source_tables": ["current"]}, "evidence": "male refers to gender_bio = 'M'"}
{"sample_id": 4866, "db_id": "legislator", "final": {"question": "How many class 1 senators belong to the Republican party?", "sql": "SELECT COUNT(bioguide) FROM \"current-terms\" WHERE class = 1 AND party = 'Republican'", "source_tables": ["current-terms"]}, "evidence": "senators refers to type = 'sen';"}
{"sample_id": 4879, "db_id": "legislator", "final": {"question": "How many Federalist representatives are there whose first names are Benjamin?", "sql": "SELECT COUNT(T.bioguide_id) FROM ( SELECT T1.bioguide_id FROM historical AS T1 INNER JOIN \"historical-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Benjamin' AND T2.party = 'Federalist' AND T2.type = 'rep' GROUP BY T1.bioguide_id ) AS T", "source_tables": ["historical", "historical-terms"]}, "evidence": "Federalist refers to party = 'Federalist'; representatives refers to type = 'rep';"}
{"sample_id": 4880, "db_id": "legislator", "final": {"question": "How many female representatives served in the state of California for at least 10 years?", "sql": "SELECT SUM(T3.result) FROM ( SELECT CASE WHEN SUM(CAST(strftime('%Y', T2.\"end\") AS int) - CAST(strftime('%Y', T2.start) AS int)) > 10 THEN 1 ELSE 0 END AS result FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' AND T2.state = 'CA' AND T2.type = 'rep' ) AS T3", "source_tables": ["current-terms", "current"]}, "evidence": "female refers to gender_bio = 'F'; representatives refers to type = 'rep'; served for at least 10 years refers to SUBTRACT(SUM(CAST(strftime('%Y', end)), CAST(strftime('%Y', start)))) > 10;"}
{"sample_id": 4892, "db_id": "legislator", "final": {"question": "For how many terms have the oldest current legislator served?", "sql": "SELECT COUNT(T2.bioguide) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio = ( SELECT MIN(birthday_bio) FROM current )", "source_tables": ["current-terms", "current"]}, "evidence": "oldest legislator refers to MIN(birthday_bio);"}
{"sample_id": 4869, "db_id": "legislator", "final": {"question": "What is the full name of the oldest legislator?", "sql": "SELECT first_name, last_name FROM historical ORDER BY birthday_bio LIMIT 1", "source_tables": ["historical"]}, "evidence": "full name = first_name, last_name; oldest legislator refers to MIN(birthday_bio);"}
{"sample_id": 4985, "db_id": "olympics", "final": {"question": "What is the average height of male athletes playing basketball sport?", "sql": "SELECT AVG(T5.height) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id INNER JOIN competitor_event AS T3 ON T2.id = T3.event_id INNER JOIN games_competitor AS T4 ON T3.competitor_id = T4.id INNER JOIN person AS T5 ON T4.person_id = T5.id WHERE T1.sport_name = 'Basketball' AND T5.gender = 'M'", "source_tables": ["competitor_event", "sport", "games_competitor", "event", "person"]}, "evidence": "AVG(height) where sport_name = 'Basketball' and event_name = 'Basketball Men''s';"}
{"sample_id": 5000, "db_id": "olympics", "final": {"question": "State the name of sport id 19.", "sql": "SELECT sport_name FROM sport WHERE id = 19", "source_tables": ["sport"]}, "evidence": "name of sport refers to sport_name"}
{"sample_id": 4957, "db_id": "olympics", "final": {"question": "In which cities were the 1976 winter and summer games held?", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name IN ('1976 Summer', '1976 Winter')", "source_tables": ["games_city", "city", "games"]}, "evidence": "cities refer to city_name; 1976 winter and summer games refer to games_name IN ('1976 Winter', '1976 Summer');"}
{"sample_id": 4919, "db_id": "olympics", "final": {"question": "What is the NOC code of the region where the tallest male Olympic competitor is from?", "sql": "SELECT T1.noc FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.gender = 'M' ORDER BY T3.height DESC LIMIT 1", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": "NOC code of the region refers to noc; male refers to gender = 'M'; the tallest refers to MAX(height);"}
{"sample_id": 4974, "db_id": "olympics", "final": {"question": "How many athletes from region 151 have won a medal?", "sql": "SELECT COUNT(T3.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN person_region AS T3 ON T2.person_id = T3.person_id WHERE T3.region_id = 151 AND T1.medal_id != 4", "source_tables": ["competitor_event", "person_region", "games_competitor"]}, "evidence": "athletes refer to person_id; region 151 refers to region_id = 151; won a medal refers to medal_id <> 4;"}
{"sample_id": 5028, "db_id": "olympics", "final": {"question": "How many male competitors were there who participated in 1948 Summer?", "sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1948 Summer' AND T3.gender = 'M'", "source_tables": ["games", "person", "games_competitor"]}, "evidence": "male competitors refers to id where gender = 'M'; in 1948 Summer refers to games_name = '1948 Summer';"}
{"sample_id": 4996, "db_id": "olympics", "final": {"question": "Among the Olympic games held in Los Angeles, what is the name of the Olympic game that has the most number of competitors?", "sql": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T4.city_name = 'Los Angeles' GROUP BY T1.id ORDER BY COUNT(T2.person_id) DESC LIMIT 1", "source_tables": ["games", "city", "games_city", "games_competitor"]}, "evidence": "Los Angeles refers to city_name = 'Lost Angeles'; the Olympic game refers to games_name; the most number of competitors refers to MAX(COUNT(games_name));"}
{"sample_id": 5040, "db_id": "olympics", "final": {"question": "List out the name of the game that the people participated in games id 13.", "sql": "SELECT DISTINCT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T2.games_id = 13", "source_tables": ["games", "games_competitor"]}, "evidence": "name of games refers to games_name;"}
{"sample_id": 5078, "db_id": "olympics", "final": {"question": "Provide the age of the tallest competitor.", "sql": "SELECT T2.age FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T1.height DESC LIMIT 1", "source_tables": ["games_competitor", "person"]}, "evidence": "the tallest refers to MAX(height);"}
{"sample_id": 4941, "db_id": "olympics", "final": {"question": "Who is the youngest person who participated in the Olympics?", "sql": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age LIMIT 1", "source_tables": ["games_competitor", "person"]}, "evidence": "Who is the youngest person refers to full_name where MIN(age);"}
{"sample_id": 4920, "db_id": "olympics", "final": {"question": "Among all the Olympic competitors from Finland, how many of them are female?", "sql": "SELECT COUNT(T3.id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Finland' AND T3.gender = 'F'", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": "competitors from Finland refer to id where region_name = 'Finland'; female refers to gender = 'F';"}
{"sample_id": 5075, "db_id": "olympics", "final": {"question": "Provide the names of competitors who received a gold medal.", "sql": "SELECT DISTINCT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T4.medal_name = 'Gold'", "source_tables": ["medal", "competitor_event", "games_competitor", "person"]}, "evidence": "names of competitors refer to full_name; gold medal refers to medal_name = 'Gold';"}
{"sample_id": 5020, "db_id": "olympics", "final": {"question": "From 1900 to 1992, how many games did London host?", "sql": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London' AND T3.games_year BETWEEN 1900 AND 1992", "source_tables": ["games_city", "city", "games"]}, "evidence": "From 1900 to 1992 refers to games_year BETWEEN 1900 AND 1992; London refers to city_name = 'London'; games refer to games_name;"}
{"sample_id": 4987, "db_id": "olympics", "final": {"question": "Which region is Yao Ming from?", "sql": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Yao Ming'", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": "region refers to region_name;"}
{"sample_id": 4938, "db_id": "olympics", "final": {"question": "How many competitor ids does Martina Kohlov have?", "sql": "SELECT COUNT(T2.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Martina Kohlov'", "source_tables": ["games_competitor", "person"]}, "evidence": ""}
{"sample_id": 4948, "db_id": "olympics", "final": {"question": "How many Summer games were held in Stockholm?", "sql": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Stockholm' AND T3.season = 'Summer'", "source_tables": ["games_city", "city", "games"]}, "evidence": "Summer games refer to id where season = 'Summer'; in Stockholm refers to city_name = 'Stockholm';"}
{"sample_id": 5065, "db_id": "olympics", "final": {"question": "List the names of the games held in Paris.", "sql": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Paris'", "source_tables": ["games_city", "city", "games"]}, "evidence": "Paris refers to city_name = 'Paris'; names of games refers to games_name;"}
{"sample_id": 4949, "db_id": "olympics", "final": {"question": "Which region do most of the athletes are from?", "sql": "SELECT T2.region_name FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id GROUP BY T2.region_name ORDER BY COUNT(T1.person_id) DESC LIMIT 1", "source_tables": ["person_region", "noc_region"]}, "evidence": "region refers to region_name; most of the athletes refer to MAX(COUNT(person_id));"}
{"sample_id": 4978, "db_id": "olympics", "final": {"question": "List out all the gold medalist winners in cycling sport.", "sql": "SELECT DISTINCT T5.full_name FROM event AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.event_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN sport AS T4 ON T1.sport_id = T4.id INNER JOIN person AS T5 ON T3.person_id = T5.id WHERE T4.sport_name = 'Cycling' AND T2.medal_id = 1", "source_tables": ["competitor_event", "sport", "games_competitor", "event", "person"]}, "evidence": "gold medalist winners refer to full_name where medal_name = 'Gold'; cycling sport refers to sport_name = 'Cycling';"}
{"sample_id": 4925, "db_id": "olympics", "final": {"question": "What is the average height of the male Olympic competitors from Finland?", "sql": "SELECT AVG(T3.height) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Finland' AND T3.gender = 'M'", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": "DIVIDE(SUM(height), COUNT(id)) where region_name = 'Finland' and gender = 'M';"}
{"sample_id": 5006, "db_id": "olympics", "final": {"question": "How many kinds of events belong to the sport of cycling?", "sql": "SELECT COUNT(T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Cycling'", "source_tables": ["event", "sport"]}, "evidence": "kinds of events refer to event_name; sport of cycling refers to sport_name = 'Cycling';"}
{"sample_id": 5002, "db_id": "olympics", "final": {"question": "Provide hockey's sport id.", "sql": "SELECT id FROM sport WHERE sport_name = 'Hockey'", "source_tables": ["sport"]}, "evidence": "hockey's sport refers to sport_name = 'hockey';"}
{"sample_id": 5068, "db_id": "olympics", "final": {"question": "What is the name of the youngest competitor?", "sql": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age LIMIT 1", "source_tables": ["games_competitor", "person"]}, "evidence": "name refers to full_name; the youngest refers to MIN(age);"}
{"sample_id": 5043, "db_id": "olympics", "final": {"question": "State the event name of Basketball.", "sql": "SELECT T2.event_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Basketball'", "source_tables": ["event", "sport"]}, "evidence": "basketball refers to sport_name = 'Basketball';"}
{"sample_id": 4932, "db_id": "olympics", "final": {"question": "Which game has Jessica Carolina Aguilera Aguilera participated in? Give the id of the game.", "sql": "SELECT T2.games_id FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Jessica Carolina Aguilera Aguilera'", "source_tables": ["games_competitor", "person"]}, "evidence": "id of the game refers to games_id;"}
{"sample_id": 5030, "db_id": "olympics", "final": {"question": "Who is the youngest competitor that participated in 2014 Winter?", "sql": "SELECT T3.full_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2014 Winter' ORDER BY T2.age LIMIT 1", "source_tables": ["games", "person", "games_competitor"]}, "evidence": "the youngest competitor refers to full_name where MIN(age); in 2014 Winter refers to games_name = '2014 Winter';"}
{"sample_id": 4952, "db_id": "olympics", "final": {"question": "How many athletes competed in the 1992 Summer Olympics?", "sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1928 Summer'", "source_tables": ["games", "games_competitor"]}, "evidence": "1992 Summer Olympics refer to games_name = '1928 Summer';"}
{"sample_id": 4924, "db_id": "olympics", "final": {"question": "For how many times has London held the Olympic games?", "sql": "SELECT COUNT(T1.games_id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'London'", "source_tables": ["games_city", "city"]}, "evidence": "London refers to city_name = 'London'; how many times refer to COUNT(games_id);"}
{"sample_id": 4955, "db_id": "olympics", "final": {"question": "What age of the competitors is the most numerous?", "sql": "SELECT age FROM games_competitor GROUP BY age ORDER BY COUNT(person_id) DESC LIMIT 1", "source_tables": ["games_competitor"]}, "evidence": "age is the most numerous refers to age where MAX(COUNT(person_id));"}
{"sample_id": 4971, "db_id": "olympics", "final": {"question": "List out years that only have summer games.", "sql": "SELECT games_year FROM games WHERE season != 'Winter' GROUP BY games_year HAVING COUNT(season) = 1", "source_tables": ["games"]}, "evidence": "years refer to games_year; only have summer games refer to games_year where COUNT(games_name) = 1 and season = 'Summer';"}
{"sample_id": 5031, "db_id": "olympics", "final": {"question": "What is the average age of competitors who participated in 1988 Winter?", "sql": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1988 Winter'", "source_tables": ["games", "person", "games_competitor"]}, "evidence": "AVG(age) where games_name = '1988 Winter';"}
{"sample_id": 5073, "db_id": "olympics", "final": {"question": "In which city the 2004 Summer was held?", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '2004 Summer'", "source_tables": ["games_city", "city", "games"]}, "evidence": "in which city refers to city_name; the 2004 Summer refers to games_name = '2004 Summer';"}
{"sample_id": 5024, "db_id": "olympics", "final": {"question": "What is the game name that was held in Beijing in 2008?", "sql": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Beijing' AND T3.games_year = 2008", "source_tables": ["games_city", "city", "games"]}, "evidence": "Beijing refers to city_name = 'Beijing'; in 2008 refers to games_year = '2008';"}
{"sample_id": 5060, "db_id": "olympics", "final": {"question": "Calculate the percentage of bronze medals won by men's basketball players.", "sql": "SELECT CAST(COUNT(CASE WHEN T4.medal_name = 'Bronze' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN event AS T3 ON T1.event_id = T3.id INNER JOIN medal AS T4 ON T1.medal_id = T4.id WHERE T3.event_name LIKE 'Basketball Men%s Basketball'", "source_tables": ["event", "competitor_event", "medal", "games_competitor"]}, "evidence": "DIVIDE(COUNT(competitor_id where medal_name = 'Bronze'), COUNT(competitor_id)) as percentage where event_name = 'Basketball Men''s Basketball';"}
{"sample_id": 5054, "db_id": "olympics", "final": {"question": "What were the cities in which John Aalberg competed?", "sql": "SELECT T4.city_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T1.full_name = 'John Aalberg'", "source_tables": ["games_city", "city", "games_competitor", "person"]}, "evidence": "cities refer to city_name;"}
{"sample_id": 5184, "db_id": "address", "final": {"question": "What is the code of the area with the largest Asian population?", "sql": "SELECT T1.zip_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.asian_population ORDER BY T2.asian_population DESC LIMIT 1", "source_tables": ["area_code", "zip_data"]}, "evidence": "the code of the area refers to area_code; area with the largest Asian population refers to MAX(asian_population);"}
{"sample_id": 5165, "db_id": "address", "final": {"question": "Among the postal points in the District of Columbia, how many of them have an area with above 20000 black population?", "sql": "SELECT COUNT(T1.zip_code) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'DISTRICT OF COLUMBIA' AND T2.black_population > 20000", "source_tables": ["zip_data", "country"]}, "evidence": "District of Columbia refers to county = 'DISTRICT OF COLUMBIA'; postal points refer to zip_code; area with above 20000 black population refers to black_population > 20000;"}
{"sample_id": 5203, "db_id": "address", "final": {"question": "Among the types of postal points in Saint Croix, what percentage of postal points is the post office?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.type = 'Post Office' THEN T1.zip_code ELSE NULL END) AS REAL) * 100 / COUNT(T1.zip_code) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'SAINT CROIX'", "source_tables": ["zip_data", "country"]}, "evidence": "DIVIDE(COUNT(type = 'Post Office' ), COUNT(type)) as percentage where county = 'SAINT CROIX';"}
{"sample_id": 5166, "db_id": "address", "final": {"question": "Provide the city where zip code 19019 is located and the alias of that city.", "sql": "SELECT T2.city, T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.zip_code = 19019", "source_tables": ["zip_data", "alias"]}, "evidence": ""}
{"sample_id": 5230, "db_id": "address", "final": {"question": "Calculate the average number of beneficiaries per postal point in Guam.", "sql": "SELECT CAST(SUM(T2.total_beneficiaries) AS REAL) / COUNT(T2.zip_code) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Guam'", "source_tables": ["state", "zip_data"]}, "evidence": "DIVIDE(SUM(total_beneficiaries), COUNT(zip_code)) where name = 'Guam';"}
{"sample_id": 5122, "db_id": "address", "final": {"question": "For the county where DeSantis Ron is from, what is the average female median age?", "sql": "SELECT SUM(T4.female_median_age) / COUNT(T1.county) FROM country AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id INNER JOIN zip_data AS T4 ON T1.zip_code = T4.zip_code WHERE T3.first_name = 'DeSantis' AND T3.last_name = 'Ron'", "source_tables": ["zip_congress", "congress", "zip_data", "country"]}, "evidence": "average female median age refers to Divide (Sum(female_median_age), Count(county))"}
{"sample_id": 5208, "db_id": "address", "final": {"question": "Among the cities with alias St Thomas, provide the type of postal point for each city.", "sql": "SELECT DISTINCT T2.type FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'St Thomas'", "source_tables": ["zip_data", "alias"]}, "evidence": ""}
{"sample_id": 5170, "db_id": "address", "final": {"question": "Provide the countries and the zip codes in the Virgin Islands.", "sql": "SELECT T2.county, T2.zip_code FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Virgin Islands'", "source_tables": ["state", "country"]}, "evidence": "the Virgin Islands refer to state where name = 'Virgin Islands';"}
{"sample_id": 5133, "db_id": "address", "final": {"question": "How many states are in the central time zone? Write their full names.", "sql": "SELECT SUM(CASE WHEN T1.time_zone = 'Central' THEN 1 ELSE 0 END) AS count FROM zip_data AS T1 INNER JOIN state AS T2 ON T2.abbreviation = T1.state WHERE T1.time_zone = 'Central'", "source_tables": ["state", "zip_data"]}, "evidence": "central time zone refers to time_zone = 'Central'"}
{"sample_id": 5150, "db_id": "address", "final": {"question": "Among the cities with an area code 939, which city has the highest Asian population?", "sql": "SELECT T2.city FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 939 ORDER BY T2.asian_population DESC LIMIT 1", "source_tables": ["area_code", "zip_data"]}, "evidence": "highest asian population refers to Max(asian_population)"}
{"sample_id": 5174, "db_id": "address", "final": {"question": "Provide the zip codes and their affiliated organization for the postal point under Kingsport-Bristol, TN-VA.", "sql": "SELECT T2.zip_code, T2.organization FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Kingsport-Bristol, TN-VA'", "source_tables": ["cbsa", "zip_data"]}, "evidence": "postal point under Kingsport-Bristol, TN-VA refers to zip_code where CBSA_name = 'Kingsport-Bristol, TN-VA'; affiliated organization refers to organization from CBSA;"}
{"sample_id": 5112, "db_id": "address", "final": {"question": "Show the alias for the county at coordinate (18.090875, -66.867756).", "sql": "SELECT T2.alias FROM zip_data AS T1 INNER JOIN alias AS T2 ON T1.zip_code = T2.zip_code WHERE T1.latitude = 18.090875 AND T1.longitude = -66.867756", "source_tables": ["zip_data", "alias"]}, "evidence": "coordinates refers to latitude, longitude; latitude = '18.090875; longitude = '-66.867756'"}
{"sample_id": 5140, "db_id": "address", "final": {"question": "List all the bad alias for zip codes in Puerto Rico.", "sql": "SELECT T1.bad_alias FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.state = 'PR'", "source_tables": ["avoid", "zip_data"]}, "evidence": "\"Puerto Rico\" refers to state = 'PR'"}
{"sample_id": 5157, "db_id": "address", "final": {"question": "What are the alias of the cities with 0 population in 2010?", "sql": "SELECT DISTINCT T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.population_2010 = 0", "source_tables": ["zip_data", "alias"]}, "evidence": "with 0 population in 2010 refers to population_2010 = 0;"}
{"sample_id": 5223, "db_id": "address", "final": {"question": "How many postal points are there under the congress representative in Puerto Rico?", "sql": "SELECT COUNT(T2.zip_code) FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.state = 'Puerto Rico'", "source_tables": ["congress", "zip_congress"]}, "evidence": "postal points refer to zip_code; Puerto Rico refers to state = 'Puerto Rico';"}
{"sample_id": 5180, "db_id": "address", "final": {"question": "List all the locations of postal points with the area code \"410\".", "sql": "SELECT T2.latitude, T2.longitude FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 410", "source_tables": ["area_code", "zip_data"]}, "evidence": "latitude and longitude coordinates can be used to identify the location; postal points refer to zip_code;"}
{"sample_id": 5113, "db_id": "address", "final": {"question": "For the city with the most elders, what's its area code?", "sql": "SELECT T2.area_code FROM zip_data AS T1 INNER JOIN area_code AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.area_code ORDER BY T1.over_65 DESC LIMIT 1", "source_tables": ["area_code", "zip_data"]}, "evidence": "city with most elders refers to Max(over_65)"}
{"sample_id": 5087, "db_id": "address", "final": {"question": "In which county is the residential area with the highest average income per household located?", "sql": "SELECT T2.county FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO' GROUP BY T2.county ORDER BY T1.avg_income_per_household DESC LIMIT 1", "source_tables": ["zip_data", "country"]}, "evidence": "highest average income per household refers to Max(avg_income_per_household)"}
{"sample_id": 5143, "db_id": "address", "final": {"question": "List all representatives of districts which have more than 30 000 population in 2020.", "sql": "SELECT T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T1.population_2020 > 30000 GROUP BY T3.first_name, T3.last_name", "source_tables": ["congress", "zip_data", "zip_congress"]}, "evidence": "more than 30000 population in 2020 refers to population_2020 > 30000; representative refers to first_name, last_name"}
{"sample_id": 5228, "db_id": "address", "final": {"question": "Who is the CBSA officer of the post point in the area with the highest number of employees?", "sql": "SELECT T1.CBSA_name FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.employees = ( SELECT MAX(employees) FROM zip_data )", "source_tables": ["cbsa", "zip_data"]}, "evidence": "CBSA officer refers to CBSA_name; the highest number of employees refers to MAX(employees);"}
{"sample_id": 5177, "db_id": "address", "final": {"question": "What are the zip code for the Senate house?", "sql": "SELECT T2.zip_code FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.House = 'House of Repsentatives' GROUP BY T2.zip_code", "source_tables": ["congress", "zip_congress"]}, "evidence": "House of Repsentatives can stand for senate house"}
{"sample_id": 5212, "db_id": "address", "final": {"question": "What is the elevation of the city belonging to Hampden, Massachusetts?", "sql": "SELECT T3.elevation FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state INNER JOIN zip_data AS T3 ON T2.zip_code = T3.zip_code WHERE T1.name = 'Massachusetts' AND T2.county = 'HAMPDEN' GROUP BY T3.elevation", "source_tables": ["state", "zip_data", "country"]}, "evidence": "the county of Hampden is located in the state of Massachusetts."}
{"sample_id": 5134, "db_id": "address", "final": {"question": "Name 10 cities with their states that are under the Lexington-Fayette, KY office of the Canada Border Services Agency.", "sql": "SELECT DISTINCT T2.city, T2.state FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Lexington-Fayette, KY' LIMIT 10", "source_tables": ["cbsa", "zip_data"]}, "evidence": "\"Lexington-Fayette, KY\" is the CBSA_name"}
{"sample_id": 5201, "db_id": "address", "final": {"question": "Name the country with the largest number of households in a residential area.", "sql": "SELECT T1.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code GROUP BY T1.county ORDER BY T2.households DESC LIMIT 1", "source_tables": ["zip_data", "country"]}, "evidence": "the largest number of households refers to MAX(households);"}
{"sample_id": 5158, "db_id": "address", "final": {"question": "Among the cities with area code 608, how many cities implement daylight savings?", "sql": "SELECT COUNT(T2.city) FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 608 AND T2.daylight_savings = 'Yes'", "source_tables": ["area_code", "zip_data"]}, "evidence": "implement daylight savings refers to daylight_savings = 'Yes';"}
{"sample_id": 5106, "db_id": "address", "final": {"question": "How many representatives are there in the state with the highest monthly benefit payments for retired workers?", "sql": "SELECT COUNT(T3.cognress_rep_id) FROM zip_data AS T1 INNER JOIN state AS T2 ON T1.state = T2.abbreviation INNER JOIN congress AS T3 ON T2.abbreviation = T3.abbreviation ORDER BY T1.monthly_benefits_retired_workers DESC LIMIT 1", "source_tables": ["state", "congress", "zip_data"]}, "evidence": "state with highest monthly benefits payment for retired workers refers to Max(monthly_benefits_retired_workers)"}
{"sample_id": 5153, "db_id": "address", "final": {"question": "What is the area code of the city with the largest land area?", "sql": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.land_area = ( SELECT MAX(land_area) FROM zip_data )", "source_tables": ["area_code", "zip_data"]}, "evidence": "largest land area refers to Max(land_area)"}
{"sample_id": 5120, "db_id": "address", "final": {"question": "Tell the name of the county which is represented by Hartzler Vicky.", "sql": "SELECT T1.county FROM country AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T3.first_name = 'Hartzler' AND T3.last_name = 'Vicky' GROUP BY T1.county", "source_tables": ["zip_congress", "congress", "country"]}, "evidence": "name of county refers to county"}
{"sample_id": 5213, "db_id": "address", "final": {"question": "List the area code of the city with the highest Hispanic population.", "sql": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.hispanic_population = ( SELECT MAX(hispanic_population) FROM zip_data )", "source_tables": ["area_code", "zip_data"]}, "evidence": "the highest Hispanic population refers to MAX(hispanic_population);"}
{"sample_id": 5135, "db_id": "address", "final": {"question": "What is the percentage ratio between Democrats and Republicans in Indiana? List the zip codes belonging to Democrats.", "sql": "SELECT CAST(COUNT(CASE WHEN T2.party = 'Democrat' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.party = 'Republican' THEN 1 ELSE NULL END)FROM zip_congress AS T1 INNER JOIN congress AS T2 ON T2.cognress_rep_id = T1.district", "source_tables": ["congress", "zip_congress"]}, "evidence": "\"Democrats\" and \"Republicans\" refers to party = 'Democrat\" and party = 'Republican'; percentage ratio = Multiply (Divide (Count(party = 'Democrat\"), Count(party = 'Republican')), 100)"}
{"sample_id": 5307, "db_id": "beer_factory", "final": {"question": "How many Folsom customers prefer to pay with Visa?", "sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.City = 'Folsom' AND T2.CreditCardType = 'Visa'", "source_tables": ["customers", "transaction"]}, "evidence": "Folsom refers to City = 'Folsom'; Visa refers to CreditCardType = 'Visa';"}
{"sample_id": 5294, "db_id": "beer_factory", "final": {"question": "Find the root beer with the most and least amount of profit per unit and list the container types in which these root beers are sold.", "sql": "SELECT * FROM ( SELECT T1.BrandName, T2.ContainerType FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID ORDER BY T1.CurrentRetailPrice - T1.WholesaleCost DESC LIMIT 1 ) UNION ALL SELECT * FROM ( SELECT T3.BrandName, T4.ContainerType FROM rootbeerbrand AS T3 INNER JOIN rootbeer AS T4 ON T3.BrandID = T4.BrandID ORDER BY T3.CurrentRetailPrice - T3.WholesaleCost ASC LIMIT 1 )", "source_tables": ["rootbeerbrand", "rootbeer"]}, "evidence": "most amount of profit per unit refers to MAX(SUBTRACT(CurrentRetailPrice, WholesaleCost)); least amount of profit per unit refers to MIN(SUBTRACT(CurrentRetailPrice, WholesaleCost));"}
{"sample_id": 5328, "db_id": "beer_factory", "final": {"question": "What is the brand name of the root beer that gained a 1-star rating from customer ID 331115 while saying, \"Yuk, more like licorice soda\"?", "sql": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.CustomerID = 331115 AND T2.Review = 'Yuk, more like licorice soda.' AND T2.StarRating = 1", "source_tables": ["rootbeerbrand", "rootbeerreview"]}, "evidence": "1-star rating refers to StarRating = 1; saying, \"Yuk, more like licorice soda\" refers to Review = 'Yuk, more like licorice soda.';"}
{"sample_id": 5271, "db_id": "beer_factory", "final": {"question": "How many transactions were paid through MasterCard in 2014?", "sql": "SELECT COUNT(TransactionID) FROM \"transaction\" WHERE CreditCardType = 'MasterCard' AND TransactionDate LIKE '2014%'", "source_tables": ["transaction"]}, "evidence": "MasterCard refers to CreditCardType = 'MasterCard'; in 2014 refers to TransactionDate > = '2014-01-01' AND TransactionDate < = '2014-12-31';"}
{"sample_id": 5279, "db_id": "beer_factory", "final": {"question": "Among the root beer brands that do not advertise on Facebook and Twitter, which brand has the highest number of purchases?", "sql": "SELECT T2.BreweryName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T2.FacebookPage IS NULL AND T2.Twitter IS NULL GROUP BY T2.BrandID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1", "source_tables": ["rootbeerbrand", "rootbeer"]}, "evidence": "do not advertise on Facebook and Twitter refers to FacebookPage IS NULL AND Twitter IS NULL; highest number of purchases refers to MAX(COUNT(BrandID));"}
{"sample_id": 5313, "db_id": "beer_factory", "final": {"question": "At what latitude is the Thomas Kemper brand beer consumed the most?", "sql": "SELECT T3.Latitude FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID INNER JOIN geolocation AS T3 ON T1.LocationID = T3.LocationID WHERE T2.BrandName = 'Thomas Kemper' GROUP BY T3.Latitude ORDER BY COUNT(T1.BrandID) DESC LIMIT 1", "source_tables": ["rootbeerbrand", "rootbeer", "geolocation"]}, "evidence": "Thomas Kemper refers to BrandName = 'Thomas Kemper';\u00a0 latitude the beer is consumed the most refers to MAX(COUNT(Latitude));"}
{"sample_id": 5273, "db_id": "beer_factory", "final": {"question": "How many sweet bottled root beers that do not contain cane sugar were purchased in 2015 through the selling company located in Sac State American River Courtyard?", "sql": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID INNER JOIN location AS T3 ON T1.LocationID = T3.LocationID WHERE T3.LocationName = 'Sac State American River Courtyard' AND T1.PurchaseDate LIKE '2015%' AND T2.Honey = 'TRUE' AND T2.CaneSugar = 'FALSE' AND T1.ContainerType = 'Bottle'", "source_tables": ["rootbeerbrand", "rootbeer", "location"]}, "evidence": "sweet refers to Honey = 'TRUE'; bottled refers to ContainerType = 'Bottle'; do not contain cane sugar refers to CaneSugar = 'FALSE'; in 2015 refers to PurchaseDate < = '2015-12-31'; Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard';"}
{"sample_id": 5232, "db_id": "beer_factory", "final": {"question": "What is the name of the root beer brand that has the longest history?", "sql": "SELECT BrandName FROM rootbeerbrand WHERE FirstBrewedYear = ( SELECT MIN(FirstBrewedYear) FROM rootbeerbrand )", "source_tables": ["rootbeerbrand"]}, "evidence": "name of the root beer brand refers to BrandName; longest history refers to MIN(FirstBrewedYear);"}
{"sample_id": 5259, "db_id": "beer_factory", "final": {"question": "For the customer who leaves the review content of \"Tastes like Australia.\", when was his/her first purchase date?", "sql": "SELECT T1.FirstPurchaseDate FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Review = 'Tastes like Australia.'", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "review content of \"Tastes like Australia.\" refers to Review = 'Tastes like Australia.';"}
{"sample_id": 5287, "db_id": "beer_factory", "final": {"question": "Among the root beer purchased in 2014, what percentage were sold in cans?", "sql": "SELECT CAST(COUNT(CASE WHEN ContainerType = 'Can' THEN RootBeerID ELSE NULL END) AS REAL) * 100 / COUNT(RootBeerID) FROM rootbeer WHERE PurchaseDate LIKE '2014%'", "source_tables": ["rootbeer"]}, "evidence": "in 2014 refers to PurchaseDate > = '2014-01-01' AND PurchaseDate < = '2014-12-31'; percentage = MULTIPLY(DIVIDE(SUM(ContainerType = 'Can'), COUNT(RootBeerID) WHERE PurchaseDate > = '2014-01-01' AND PurchaseDate < = '2014-12-31'), 1.0); in cans refers to ContainerType = 'Can';"}
{"sample_id": 5335, "db_id": "beer_factory", "final": {"question": "What is the credit card type used by Kenneth Walton?", "sql": "SELECT DISTINCT T2.CreditCardType FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Kenneth' AND T1.Last = 'Walton'", "source_tables": ["customers", "transaction"]}, "evidence": "FALSE;"}
{"sample_id": 5351, "db_id": "beer_factory", "final": {"question": "Which type of card did Dick Ruthven use to pay for all of his transactions?", "sql": "SELECT DISTINCT T2.CreditCardType FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Dick' AND T1.Last = 'Ruthven'", "source_tables": ["customers", "transaction"]}, "evidence": "type of card refers to CreditCardType;"}
{"sample_id": 5330, "db_id": "beer_factory", "final": {"question": "How many transactions were made in Sac State Union using the American Express credit card in 2014?", "sql": "SELECT COUNT(T1.TransactionID) FROM \"transaction\" AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.LocationName = 'Sac State Union' AND T1.CreditCardType = 'American Express' AND T1.TransactionDate BETWEEN '2014-01-01' AND '2014-12-31'", "source_tables": ["location", "transaction"]}, "evidence": "Sac State Union refers to LocationName = 'Sac State Union'; American Express credit card refers to CreditCardType = 'American Express'; in 2014 refers to TransactionDate LIKE '2014%';"}
{"sample_id": 5358, "db_id": "beer_factory", "final": {"question": "What is the email address of the customer who made a purchase in transaction 100016?", "sql": "SELECT T1.Email FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.TransactionID = '100016'", "source_tables": ["customers", "transaction"]}, "evidence": "email address refers to Email; transaction 100016 refers to TransactionID = 100016;"}
{"sample_id": 5314, "db_id": "beer_factory", "final": {"question": "What star rating is the most common for beers containing corn syrup?", "sql": "SELECT T2.StarRating FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T1.CornSyrup = 'TRUE' GROUP BY T2.StarRating ORDER BY COUNT(T2.StarRating) DESC LIMIT 1", "source_tables": ["rootbeerbrand", "rootbeerreview"]}, "evidence": "most common refers to MAX(COUNT(StarRating)); containing corn syrup refers to CornSyrup = 'TRUE';"}
{"sample_id": 5341, "db_id": "beer_factory", "final": {"question": "What is the average review given by a subscriber?", "sql": "SELECT AVG(T2.StarRating) FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.SubscribedToEmailList = 'TRUE'", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "average review = AVG(StarRating); subscriber refers to SubscribedToEmailList = 'TRUE';"}
{"sample_id": 5291, "db_id": "beer_factory", "final": {"question": "How many brands of root beers are available in cans and contain corn syrup and artificial sweeteners?", "sql": "SELECT COUNT(BrandID) FROM rootbeerbrand WHERE CornSyrup = 'TRUE' AND ArtificialSweetener = 'TRUE' AND AvailableInCans = 'TRUE'", "source_tables": ["rootbeerbrand"]}, "evidence": "available in cans refers to AvailableInCans = 'TRUE'; contain corn syrup refers to CornSyrup = 'TRUE'; contain artificial sweeteners refers to ArtificialSweetener = 'TRUE';"}
{"sample_id": 5350, "db_id": "beer_factory", "final": {"question": "What is the percentage of female customers who subscribed to the email list?", "sql": "SELECT CAST(COUNT(CASE WHEN Gender = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(SubscribedToEmailList) FROM customers WHERE SubscribedToEmailList = 'TRUE'", "source_tables": ["customers"]}, "evidence": "percentage = MULTIPLY(DIVIDE(COUNT(CustomerID WHERE Gender = 'F'), COUNT(CustomerID) WHERE SubscribedToEmailList = 'TRUE'), 1.0); female refers to Gender = 'F'; subscribed to the email list refers to SubscribedToEmailList = 'TRUE';"}
{"sample_id": 5331, "db_id": "beer_factory", "final": {"question": "What is the precise coordinate of Sac State Union?", "sql": "SELECT T2.Latitude, T2.Longitude FROM location AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID WHERE T1.LocationName = 'Sac State Union'", "source_tables": ["geolocation", "location"]}, "evidence": "precise coordinate = Latitude, Longitude; Sac State Union refers to LocationName = 'Sac State Union';"}
{"sample_id": 5336, "db_id": "beer_factory", "final": {"question": "What is the container type, brand name and star rating for root beer ID 10054?", "sql": "SELECT T4.ContainerType, T3.BrandName, T1.StarRating FROM rootbeerreview AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID INNER JOIN rootbeer AS T4 ON T2.RootBeerID = T4.RootBeerID WHERE T2.RootBeerID = 100054", "source_tables": ["rootbeerbrand", "rootbeerreview", "transaction", "rootbeer"]}, "evidence": "FALSE;"}
{"sample_id": 5312, "db_id": "beer_factory", "final": {"question": "What is the name of all the customers who have ever given a 5-star review?", "sql": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.StarRating = 5", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "name of the customer = First, Last; 5-star review refers to StarRating = 5;"}
{"sample_id": 5263, "db_id": "beer_factory", "final": {"question": "For the root beer brand which got the review with the content of \"The quintessential dessert root beer. No ice cream required.\", what is the current retail price of the root beer?", "sql": "SELECT T1.CurrentRetailPrice - T1.WholesaleCost AS price FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.Review = 'The quintessential dessert root beer. No ice cream required.'", "source_tables": ["rootbeerbrand", "rootbeerreview"]}, "evidence": "review with the content of \"The quintessential dessert root beer. No ice cream required.\" refers to Review = 'The quintessential dessert root beer. No ice cream required.';"}
{"sample_id": 5361, "db_id": "beer_factory", "final": {"question": "Please name any three root beer brands that have the highest market evaluation and acceptance.", "sql": "SELECT DISTINCT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5 LIMIT 3", "source_tables": ["rootbeerbrand", "rootbeerreview"]}, "evidence": "root beer brands refers to BrandName; highest market evaluation and acceptance refers to MAX(COUNT(StarRating = 5));"}
{"sample_id": 5283, "db_id": "beer_factory", "final": {"question": "What are the brands of the root beers that received 5-star ratings from no less than 5 customers?", "sql": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5 GROUP BY T2.BrandID HAVING COUNT(T2.StarRating) >= 5", "source_tables": ["rootbeerbrand", "rootbeerreview"]}, "evidence": "brand of the root beer refers to BrandName; 5-star ratings\u00a0refers to StarRating = 5; no less than 5 customers refers to COUNT(CustomerID) > = 5;"}
{"sample_id": 5244, "db_id": "beer_factory", "final": {"question": "How many root beers of the Bulldog were purchased in August, 2014?", "sql": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN \"transaction\" AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014-08%' AND T3.BrandName = 'Bulldog'", "source_tables": ["rootbeerbrand", "rootbeer", "transaction"]}, "evidence": "Bulldog refers to BrandName = 'Bulldog'; purchased in August, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08';"}
{"sample_id": 5289, "db_id": "beer_factory", "final": {"question": "Find the brand Id of the root beer which has the most number of customers who gave 1-star ratings.", "sql": "SELECT BrandID FROM rootbeerreview WHERE StarRating = 1 GROUP BY BrandID ORDER BY COUNT(BrandID) DESC LIMIT 1", "source_tables": ["rootbeerreview"]}, "evidence": "most number of customers who gave 1-star ratings refers to MAX(COUNT(StarRating = 1)); 1-star ratings refers to StarRating = 1;"}
{"sample_id": 5274, "db_id": "beer_factory", "final": {"question": "Which brewery does the most purchased root beer in 2016 belong to?", "sql": "SELECT T2.BreweryName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T1.PurchaseDate BETWEEN '2016-01-01' AND '2016-12-31' GROUP BY T2.BrandID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1", "source_tables": ["rootbeerbrand", "rootbeer"]}, "evidence": "most purchased root beer refers to MAX(COUNT(BrandID)); in 2016 refers to PurchaseDate > = '2016-01-01' AND PurchaseDate < = '2016-12-31';"}
{"sample_id": 5402, "db_id": "sales", "final": {"question": "Name the sales person who helped Elizabeth A. White to purchase Road-250 Black, 48.", "sql": "SELECT DISTINCT T3.FirstName, T3.MiddleInitial, T3.LastName FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID INNER JOIN Customers AS T4 ON T2.CustomerID = T4.CustomerID WHERE T4.MiddleInitial = 'A' AND T4.LastName = 'White' AND T1.Name = 'Road-250 Black, 48' AND T4.FirstName = 'Elizabeth'", "source_tables": ["customers", "products", "employees", "sales"]}, "evidence": "name of the sales person = FirstName, MiddleInitial, LastName; 'Road-250 Black, 48' is name of product;"}
{"sample_id": 5384, "db_id": "sales", "final": {"question": "Among customers with the last name of Valdez, who purchased the highest quantity?", "sql": "SELECT T1.FirstName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.LastName = 'Valdez' ORDER BY T2.Quantity DESC LIMIT 1", "source_tables": ["customers", "sales"]}, "evidence": "highest quantity refers to MAX(Quantity);"}
{"sample_id": 5417, "db_id": "sales", "final": {"question": "List the first names of employees with trading quantity for more than 500.", "sql": "SELECT DISTINCT T1.FirstName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID WHERE T2.Quantity > 500", "source_tables": ["employees", "sales"]}, "evidence": "trading quantity for more than 500 refers to Quantity > 500;"}
{"sample_id": 5363, "db_id": "sales", "final": {"question": "How many sales ids are there for customer id 80?", "sql": "SELECT COUNT(SalesID) FROM Sales WHERE CustomerID = 80", "source_tables": ["sales"]}, "evidence": ""}
{"sample_id": 5438, "db_id": "sales", "final": {"question": "What is the price and name of the product bought by Erica Xu?", "sql": "SELECT T3.Price, T3.Name FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.FirstName = 'Erica' AND T2.LastName = 'Xu'", "source_tables": ["customers", "products", "sales"]}, "evidence": ""}
{"sample_id": 5451, "db_id": "sales", "final": {"question": "How much is the total amount of sales handled by Heather McBadden?", "sql": "SELECT SUM(T2.Quantity * T3.Price) FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.FirstName = 'Heather' AND T1.LastName = 'McBadden'", "source_tables": ["products", "employees", "sales"]}, "evidence": "total amount of sales = SUM(MULTIPLY(Quantity, Price));"}
{"sample_id": 5414, "db_id": "sales", "final": {"question": "Give the full name of the employee who has sold the most quantity.", "sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID ORDER BY T2.Quantity DESC LIMIT 1", "source_tables": ["employees", "sales"]}, "evidence": "full name of the employee = FirstName, LastName; most quantity refers to MAX(Quantity);"}
{"sample_id": 5393, "db_id": "sales", "final": {"question": "Write down the name of products whose sale quantity is more than 950.", "sql": "SELECT DISTINCT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Quantity > 950", "source_tables": ["products", "sales"]}, "evidence": "quantity is more than 950 refers to Quantity > 950;"}
{"sample_id": 5396, "db_id": "sales", "final": {"question": "What is the total sales amount for Reflector?", "sql": "SELECT SUM(T1.Price * T2.quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Reflector'", "source_tables": ["products", "sales"]}, "evidence": "total sales amount = SUM(MULTIPLY(Price, Quantity)); 'Reflector' is name of product;"}
{"sample_id": 5418, "db_id": "sales", "final": {"question": "List the first names of customers who have purchased products from sale person id 1.", "sql": "SELECT T1.FirstName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.SalesPersonID = 1", "source_tables": ["customers", "sales"]}, "evidence": ""}
{"sample_id": 5447, "db_id": "sales", "final": {"question": "How many free or gift products are there?", "sql": "SELECT COUNT(ProductID) FROM Products WHERE Price = 0", "source_tables": ["products"]}, "evidence": "free gift refers to Price = 0;"}
{"sample_id": 5420, "db_id": "sales", "final": {"question": "List the full names of customers who have purchased products in quantity over 600.", "sql": "SELECT T1.FirstName, T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Quantity > 600", "source_tables": ["customers", "sales"]}, "evidence": "full names of customers = FirstName, LastName; quantity over 600 refers to quantity > 600;"}
{"sample_id": 5457, "db_id": "sales", "final": {"question": "How many chainring bolts were sold under sales ID 551971?", "sql": "SELECT T1.Quantity FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Chainring Bolts' AND T1.SalesID = 551971", "source_tables": ["products", "sales"]}, "evidence": "Chainring Bolts' is name of product;"}
{"sample_id": 5435, "db_id": "sales", "final": {"question": "In customers with the first name of Erica, how many of them bought a quantity below 200?", "sql": "SELECT COUNT(T1.ProductID) FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Erica' AND T1.Quantity < 200", "source_tables": ["customers", "sales"]}, "evidence": "quantity below 200 refers to quantity < 200;"}
{"sample_id": 5456, "db_id": "sales", "final": {"question": "How many employees sold \"ML Road Frame-W - Yellow, 40\"?", "sql": "SELECT COUNT(T2.SalesPersonID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'ML Road Frame-W - Yellow, 40'", "source_tables": ["products", "sales"]}, "evidence": "ML Road Frame-W - Yellow, 40' is name of product;"}
{"sample_id": 5454, "db_id": "sales", "final": {"question": "What are the full names of the top 3 employees who handled the highest number of sales?", "sql": "SELECT T1.FirstName, T1.MiddleInitial, T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID GROUP BY T2.SalesPersonID, T1.FirstName, T1.MiddleInitial, T1.LastName ORDER BY COUNT(T2.SalesID) DESC LIMIT 3", "source_tables": ["employees", "sales"]}, "evidence": "full names of employees = FirstName, MiddleInitital, LastName; highest number of sales refers to MAX(COUNT(SalesID));"}
{"sample_id": 5416, "db_id": "sales", "final": {"question": "What is the name of the product that is most sold by sale person id 20?", "sql": "SELECT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.SalesPersonID = 20 ORDER BY T2.Quantity DESC LIMIT 1", "source_tables": ["products", "sales"]}, "evidence": "most sold refers to MAX(Quantity);"}
{"sample_id": 5423, "db_id": "sales", "final": {"question": "Identify customer IDs who bought products priced from 1000 to 2000.", "sql": "SELECT DISTINCT T2.CustomerID FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Price BETWEEN 1000 AND 2000", "source_tables": ["products", "sales"]}, "evidence": "priced from 1000 to 2000 refers to Price BETWEEN 1000 AND 2000;"}
{"sample_id": 5426, "db_id": "sales", "final": {"question": "Calculate the percentage of sold blades in the total number of transactions.", "sql": "SELECT CAST(SUM(IIF(T1.Name = 'Blade', T2.Quantity, 0)) AS REAL) * 100 / SUM(T2.Quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID", "source_tables": ["products", "sales"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(Quantity WHERE Name = 'Blade'), SUM(Quantity)), 1.0); 'blades' refers to name of product;"}
{"sample_id": 5425, "db_id": "sales", "final": {"question": "Calculate the quantity percentage of the gift products in the total trading quantity.", "sql": "SELECT CAST(SUM(IIF(T1.Price = 0, T2.Quantity, 0)) AS REAL) * 100 / SUM(T2.Quantity)FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID", "source_tables": ["products", "sales"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(Quantity WHERE Price = 0), SUM(Quantity)), 1.0); gift products refers to Price = 0;"}
{"sample_id": 5434, "db_id": "sales", "final": {"question": "In sales with a quantity of 60, how many of them have a price not greater than 500?", "sql": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.quantity = 60 AND T1.Price <= 500", "source_tables": ["products", "sales"]}, "evidence": ""}
{"sample_id": 5439, "db_id": "sales", "final": {"question": "List the sales ID of the product with a quantity of 590 and named \"External Lock Washer 7\".", "sql": "SELECT T1.SalesID FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'External Lock Washer 7' AND T1.Quantity = 590", "source_tables": ["products", "sales"]}, "evidence": "External Lock Washer 7' is name of product;"}
{"sample_id": 5549, "db_id": "menu", "final": {"question": "Provide the menu page ids of all the menu that includes mashed potatoes.", "sql": "SELECT T2.menu_page_id FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Mashed potatoes'", "source_tables": ["dish", "menuitem"]}, "evidence": "mashed potatoes is a name of dish;"}
{"sample_id": 5526, "db_id": "menu", "final": {"question": "What dishes made their first and last appearances in 1855 and 1900, respectively?", "sql": "SELECT name FROM Dish WHERE first_appeared = 1855 AND last_appeared = 1900", "source_tables": ["dish"]}, "evidence": "first appearance in 1855 refers to first_appeared = 1855; last appearance in 1900 refers to last_appeared = 1900;"}
{"sample_id": 5540, "db_id": "menu", "final": {"question": "Calculate the image area of the page menu for the dish named \"Baked Stuffed Mullet & Sauce Pomard\". Please include the page number and image ID.", "sql": "SELECT T1.full_height * T1.full_width, T1.page_number, T1.image_id FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T3.name = 'Baked Stuffed Mullet & Sauce Pomard'", "source_tables": ["menuitem", "dish", "menupage"]}, "evidence": "image area = MULTIPLY(full_height, full_width);"}
{"sample_id": 5566, "db_id": "menu", "final": {"question": "Which menu page has a bigger width, page 1 of \"Zentral Theater Terrace\" or page 1 of \"Young's Hotel\"?", "sql": "SELECT CASE WHEN SUM(CASE WHEN T1.name = 'Zentral Theater Terrace' THEN T2.full_width ELSE 0 END) - SUM(CASE WHEN T1.name = 'Young''s Hotel' THEN T2.full_width ELSE 0 END) > 0 THEN 'Zentral Theater Terrace' ELSE 'Young''s Hotel' END FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id", "source_tables": ["menu", "menupage"]}, "evidence": "if SUM(full_width where page_number = 1 AND menu.name = 'Zentral Theater Terrace') > SUM(full_width where page_number = 1 AND menu.name = 'Young''s Hotel'), it means Zentral Theater Terrace menu page is bigger than Young's Hotel; if SUM(full_width WHERE page_number = 1 AND menu.name = 'Young''s Hotel') < SUM(full_width WHERE page_number = 1 AND menu.name = 'Zentral Theater Terrace'), it means Young's Hotel menu page is bigger than Zentral Theater Terrace;"}
{"sample_id": 5569, "db_id": "menu", "final": {"question": "How many dishes are there on page 1 of menu ID12882?", "sql": "SELECT SUM(CASE WHEN T1.page_number = 1 THEN 1 ELSE 0 END) FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id WHERE T1.menu_id = 12882", "source_tables": ["menuitem", "menupage"]}, "evidence": "page 1 refers to page_number = 1;"}
{"sample_id": 5573, "db_id": "menu", "final": {"question": "For how many times had the dish \"Chicken gumbo\" appeared on a menu page?", "sql": "SELECT SUM(CASE WHEN T1.name = 'Chicken gumbo' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id", "source_tables": ["dish", "menuitem"]}, "evidence": "Chicken gumbo is a name of dish;"}
{"sample_id": 5542, "db_id": "menu", "final": {"question": "How many menus sponsored by Krogs Fiske Restaurant were created in April 2015?", "sql": "SELECT COUNT(*) FROM Menu WHERE date LIKE '2015-04%' AND sponsor = 'Krogs Fiskerestaurant'", "source_tables": ["menu"]}, "evidence": "sponsored by Krogs Fiske Restaurant refers to sponsor = 'Krogs Fiskerestaurant'; created in April 2015 refers to date like '2015-04%';"}
{"sample_id": 5568, "db_id": "menu", "final": {"question": "Among the menu pages of \"Ritz Carlton\", how many of them have a width of over 1000?", "sql": "SELECT SUM(CASE WHEN T1.name = 'Ritz Carlton' THEN 1 ELSE 0 END) FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T2.full_width > 1000", "source_tables": ["menu", "menupage"]}, "evidence": "Ritz Carlton is a name of menu; width of over 2490 refers to full_width > 1000;"}
{"sample_id": 5512, "db_id": "menu", "final": {"question": "State the full height and width for menu called \"El Fuerte Del Palmar\".", "sql": "SELECT T1.full_height, T1.full_width FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T2.name = 'El Fuerte Del Palmar'", "source_tables": ["menu", "menupage"]}, "evidence": "width refers to full_width; El Fuerte Del Palmar is a name of menu;"}
{"sample_id": 5484, "db_id": "menu", "final": {"question": "How many dishes are there in total in the menus with the name \"Waldorf Astoria\"?", "sql": "SELECT SUM(CASE WHEN T3.name = 'Waldorf Astoria' THEN 1 ELSE 0 END) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id", "source_tables": ["menu", "menuitem", "menupage"]}, "evidence": "FALSE;"}
{"sample_id": 5493, "db_id": "menu", "final": {"question": "How many pages were there on the menu created on 17th November 1898?", "sql": "SELECT SUM(CASE WHEN T1.date = '1898-11-17' THEN 1 ELSE 0 END) FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id", "source_tables": ["menu", "menupage"]}, "evidence": "created on 17th November 1898 refers to date = '1898-11-17';"}
{"sample_id": 5477, "db_id": "menu", "final": {"question": "What is the highest price of the dish \"Clear green turtle\" on a menu page?", "sql": "SELECT T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Clear green turtle' ORDER BY T2.price DESC LIMIT 1", "source_tables": ["dish", "menuitem"]}, "evidence": "highest price refers to MAX(Price); Clear green turtle is a name of dish;"}
{"sample_id": 5472, "db_id": "menu", "final": {"question": "Among all the dishes that were once free, what is the name of the dish that had appeared on most menus?", "sql": "SELECT name FROM Dish WHERE lowest_price = 0 ORDER BY menus_appeared DESC LIMIT 1", "source_tables": ["dish"]}, "evidence": "dishes that were once free refers to lowest_price = 0; appeared on most menus refers to MAX(menus_appeared);"}
{"sample_id": 5500, "db_id": "menu", "final": {"question": "Provide the numbers of the menu item which includes Fresh lobsters in every style and location where that dish was used on a menu.", "sql": "SELECT T2.menu_id, T1.xpos, T1.ypos FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T4.name = 'Fresh lobsters in every style'", "source_tables": ["menu", "menuitem", "dish", "menupage"]}, "evidence": "Fresh lobsters in every style' is a name of dish; location where the dish was used on a menu = (xpos, ypos);"}
{"sample_id": 5535, "db_id": "menu", "final": {"question": "Who are the sponsors of the menu whose image full height is more than 10000 mm?", "sql": "SELECT T2.sponsor FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T1.full_height = 10000", "source_tables": ["menu", "menupage"]}, "evidence": "image full height is more than 10000 mm refers to full_height > 10000;"}
{"sample_id": 5565, "db_id": "menu", "final": {"question": "To which menu does the menu page image ID5189412 belong? Please give its name.", "sql": "SELECT T1.name FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T2.image_id = 5189412", "source_tables": ["menu", "menupage"]}, "evidence": "FALSE;"}
{"sample_id": 5497, "db_id": "menu", "final": {"question": "List the dishes included on page number 30 with the least in full height.", "sql": "SELECT T3.name FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T1.page_number = 30 ORDER BY T1.full_height DESC, T1.full_height ASC LIMIT 1", "source_tables": ["menuitem", "dish", "menupage"]}, "evidence": "least in full height refers to MIN(full_height);"}
{"sample_id": 5559, "db_id": "menu", "final": {"question": "How many menus were created for lunch?", "sql": "SELECT COUNT(*) FROM Menu WHERE event = 'LUNCH'", "source_tables": ["menu"]}, "evidence": "created for lunch refers to event = 'LUNCH';"}
{"sample_id": 5514, "db_id": "menu", "final": {"question": "State the name of menu with the longest full height.", "sql": "SELECT T2.name FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id ORDER BY T1.full_height DESC LIMIT 1", "source_tables": ["menu", "menupage"]}, "evidence": "longest full height refers to MAX(full_height);"}
{"sample_id": 5473, "db_id": "menu", "final": {"question": "How many menus with the name \"Waldorf Astoria\" have 4 pages?", "sql": "SELECT COUNT(*) FROM Menu WHERE name = 'Waldorf Astoria' AND page_count = 4", "source_tables": ["menu"]}, "evidence": "4 pages refers to page_count = 4;"}
{"sample_id": 5531, "db_id": "menu", "final": {"question": "How many dishes have appeared on the menu in less than 5 years?", "sql": "SELECT COUNT(*) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.last_appeared - T1.first_appeared < 5", "source_tables": ["dish", "menuitem"]}, "evidence": "appeared on the menu in less than 5 years = SUBTRACT(last_appeared, first_appeared) < 5;"}
{"sample_id": 5485, "db_id": "menu", "final": {"question": "Please list the IDs of the menus that are DIYs of the restaurant and have the dish \"Clear green turtle\".", "sql": "SELECT T2.menu_id FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T4.name = 'Clear green turtle' AND T3.sponsor IS NULL", "source_tables": ["menu", "menuitem", "dish", "menupage"]}, "evidence": "IDs of the menus refers to menu_id; menus that are DIYs of the restaurant refers to sponsor is null; Clear green turtle is a name of dish;"}
{"sample_id": 5561, "db_id": "menu", "final": {"question": "What is the ID of the menu with the most number of dishes?", "sql": "SELECT id FROM Menu ORDER BY dish_count DESC LIMIT 1", "source_tables": ["menu"]}, "evidence": "most number of dishes refers to MAX(COUNT(dish_count));"}
{"sample_id": 5677, "db_id": "shipping", "final": {"question": "List the ship ID of shipments shipped to the most populated city.", "sql": "SELECT T1.ship_id FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T2.population DESC LIMIT 1", "source_tables": ["shipment", "city"]}, "evidence": "most populated city refers to Max(population)"}
{"sample_id": 5676, "db_id": "shipping", "final": {"question": "What is the name of the customer of ship ID 1147?", "sql": "SELECT T2.cust_name FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T1.ship_id = '1147'", "source_tables": ["shipment", "customer"]}, "evidence": "name of customer refers to cust_name"}
{"sample_id": 5625, "db_id": "shipping", "final": {"question": "Name the customer who sent the shipment to Oak Park.", "sql": "SELECT T2.cust_name FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T1.city_id WHERE T3.city_name = 'Oak Park'", "source_tables": ["shipment", "customer", "city"]}, "evidence": "\"Oak Park\" is the city_name; customer name refers to cust_name"}
{"sample_id": 5624, "db_id": "shipping", "final": {"question": "Identify the full name of the driver who delivered a shipment to the city of New York in February 2016.", "sql": "SELECT T3.first_name, T3.last_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN driver AS T3 ON T3.driver_id = T1.driver_id WHERE T2.city_name = 'New York' AND T1.ship_date LIKE '2016-02%'", "source_tables": ["shipment", "city", "driver"]}, "evidence": "\"New York\" is the city_name; in February 2016 refers to ship_date LIKE '2016-02%'; full name refers to first_name, last_name"}
{"sample_id": 5634, "db_id": "shipping", "final": {"question": "What is the brand of truck used in shipment id 1011?", "sql": "SELECT T1.make FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1011'", "source_tables": ["shipment", "truck"]}, "evidence": "shipment id 1011 refers to ship_id = 1011; brand of truck refers to make"}
{"sample_id": 5583, "db_id": "shipping", "final": {"question": "Among the customers having at least one shipment in 2017, how many of them have an annual revenue of over 30000000?", "sql": "SELECT COUNT(COUNTCUSID) FROM ( SELECT COUNT(T1.cust_id) AS COUNTCUSID FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE STRFTIME('%Y', T2.ship_date) = '2017' AND T1.annual_revenue > 30000000 GROUP BY T1.cust_id HAVING COUNT(T2.ship_id) >= 1 ) T3", "source_tables": ["shipment", "customer"]}, "evidence": "shipment in 2017 refers to Cast(ship_date AS DATE) = 2017; annual revenue of over 30000000 refers to annual_revenue > 30000000"}
{"sample_id": 5672, "db_id": "shipping", "final": {"question": "Give the annual revenue of the customer of ship ID 1047.", "sql": "SELECT T2.annual_revenue FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T1.ship_id = '1047'", "source_tables": ["shipment", "customer"]}, "evidence": ""}
{"sample_id": 5667, "db_id": "shipping", "final": {"question": "What model year of truck delivered the ship ID 1233?", "sql": "SELECT T1.model_year FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1233'", "source_tables": ["shipment", "truck"]}, "evidence": ""}
{"sample_id": 5636, "db_id": "shipping", "final": {"question": "List out the state of driver who transported the shipment id 1055.", "sql": "SELECT T2.state FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = '1055'", "source_tables": ["shipment", "driver"]}, "evidence": "shipment id 1055 refers to ship_id = 1055"}
{"sample_id": 5595, "db_id": "shipping", "final": {"question": "Where was the destination city of shipment no.1701?", "sql": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1701'", "source_tables": ["shipment", "city"]}, "evidence": "shipment no. 1701 refers to ship_id = 1701; destination city refers to city_name"}
{"sample_id": 5593, "db_id": "shipping", "final": {"question": "How many shipments were delivered by the oldest truck model?", "sql": "SELECT COUNT(*) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id GROUP BY T1.model_year ORDER BY T1.model_year ASC LIMIT 1", "source_tables": ["shipment", "truck"]}, "evidence": "oldest truck model refers to Min(model_year)"}
{"sample_id": 5652, "db_id": "shipping", "final": {"question": "What is the brand of the truck that is used to ship by Zachery Hicks?", "sql": "SELECT DISTINCT T1.make FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id INNER JOIN driver AS T3 ON T3.driver_id = T2.driver_id WHERE T3.first_name = 'Zachery' AND T3.last_name = 'Hicks'", "source_tables": ["shipment", "truck", "driver"]}, "evidence": "brand of truck refers to make"}
{"sample_id": 5631, "db_id": "shipping", "final": {"question": "How many cities whose polulation is larger than 50000 pounds have shipment in 2017?", "sql": "SELECT COUNT(*) FROM city AS T1 INNER JOIN shipment AS T2 ON T1.city_id = T2.city_id WHERE T1.population > 50000 AND STRFTIME('%Y', T2.ship_date) = '2017'", "source_tables": ["shipment", "city"]}, "evidence": "population is larger than 50000 refers to population > 50000"}
{"sample_id": 5659, "db_id": "shipping", "final": {"question": "In which city did the heaviest shipment transported?", "sql": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T1.weight DESC LIMIT 1", "source_tables": ["shipment", "city"]}, "evidence": "heaviest shipment refers to Max(weight); city refers to city_name"}
{"sample_id": 5619, "db_id": "shipping", "final": {"question": "Identify the total weight of shipments transported to San Mateo, California, in 2016.", "sql": "SELECT SUM(T1.weight) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.city_name = 'San Mateo' AND STRFTIME('%Y', T1.ship_date) = '2016'", "source_tables": ["shipment", "city"]}, "evidence": "\"San Mateo\" is the city_name; in 2016 refers to Cast(ship_date as DATE) = 2016"}
{"sample_id": 5653, "db_id": "shipping", "final": {"question": "List all the name of the customers that received a shipment in February 2017.", "sql": "SELECT T1.cust_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T2.ship_date LIKE '2017-02%'", "source_tables": ["shipment", "customer"]}, "evidence": "shipment in February 2017 refers to ship_date LIKE '2017-02-%'; name of customer refers to cust_name"}
{"sample_id": 5579, "db_id": "shipping", "final": {"question": "What is the total number of pounds being transported for S K L Enterprises Inc?", "sql": "SELECT SUM(T2.weight) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'S K L Enterprises Inc'", "source_tables": ["shipment", "customer"]}, "evidence": "\"S K L Enterprises Inc\" is the cust_name; total number of pounds refers to Sum(weight)"}
{"sample_id": 5680, "db_id": "shipping", "final": {"question": "What is the customer's address for the shipment with ship ID 1117?", "sql": "SELECT T2.address FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T1.ship_id = '1117'", "source_tables": ["shipment", "customer"]}, "evidence": ""}
{"sample_id": 5641, "db_id": "shipping", "final": {"question": "What is the last name of driver who transported shipment id 1088?", "sql": "SELECT T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = '1088'", "source_tables": ["shipment", "driver"]}, "evidence": "shipment id 1088 refers to ship_id = 1088"}
{"sample_id": 5658, "db_id": "shipping", "final": {"question": "How many shipments were shipped to the least populated city in California?", "sql": "SELECT COUNT(T3.city_name) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id WHERE T3.state = 'California' ORDER BY T3.population ASC LIMIT 1", "source_tables": ["shipment", "customer", "city"]}, "evidence": "\"California\" is the state; least populated city refers to Min(population)"}
{"sample_id": 5584, "db_id": "shipping", "final": {"question": "How many shipments in 2017 were done by Sue Newell?", "sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE STRFTIME('%Y', T1.ship_date) = '2017' AND T2.first_name = 'Sue' AND T2.last_name = 'Newell'", "source_tables": ["shipment", "driver"]}, "evidence": "in 2017 refers to Cast(ship_date AS DATE) = 2017"}
{"sample_id": 5622, "db_id": "shipping", "final": {"question": "Where was shipment no. 1002 headed?", "sql": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1002'", "source_tables": ["shipment", "city"]}, "evidence": "shipment no. 1002 refers to ship_id = 1002; where shipment was headed refers to city_name"}
{"sample_id": 5685, "db_id": "language_corpus", "final": {"question": "List all the Catalan language wikipedia page title with less than 10 number of different words in these pages.", "sql": "SELECT title FROM pages WHERE words < 10", "source_tables": ["pages"]}, "evidence": "less than 10 number of different words refers to words < 10"}
{"sample_id": 5693, "db_id": "language_corpus", "final": {"question": "Show all the title of pages and number of occurences for each page where the word 'quipu' appears.", "sql": "SELECT T1.title, T2.occurrences FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid INNER JOIN words AS T3 ON T2.wid = T3.wid WHERE T3.word = 'quipu'", "source_tables": ["pages_words", "pages", "words"]}, "evidence": "word 'quipu' appears refers to word = 'quipu'"}
{"sample_id": 5742, "db_id": "language_corpus", "final": {"question": "Which Wikipedia page number has the highest number of words in the Catalan language?", "sql": "SELECT page FROM pages WHERE words = ( SELECT MAX(words) FROM pages )", "source_tables": ["pages"]}, "evidence": "Wikipedia page number refers to page;\u00a0 the highest number of words in the Catalan language refers to MAX(lid = 1);"}
{"sample_id": 5749, "db_id": "language_corpus", "final": {"question": "Which word has the most repetitions in the Catalan language?", "sql": "SELECT T2.word FROM langs_words AS T1 INNER JOIN words AS T2 ON T1.wid = T2.wid WHERE T1.occurrences = ( SELECT MAX(occurrences) FROM langs_words )", "source_tables": ["words", "langs_words"]}, "evidence": "the most repetitions refer to MAX(occurrences); Catalan language refers to lid = 1;"}
{"sample_id": 5715, "db_id": "language_corpus", "final": {"question": "State one biword pair with occurence of 4.", "sql": "SELECT T1.word, T3.word FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T2.occurrences = 4 LIMIT 1", "source_tables": ["words", "biwords"]}, "evidence": "biword pair refers to w1st.word w2nd.word; occurrence of 4 refers to occurrences = 4"}
{"sample_id": 5736, "db_id": "language_corpus", "final": {"question": "Please list any three Wikipedia pages with more than 300 words.", "sql": "SELECT page FROM pages WHERE words > 300 LIMIT 3", "source_tables": ["pages"]}, "evidence": "more than 300 words refers to words > 300;\u00a0 list any three means limit 3; Wikipedia pages refers to page;"}
{"sample_id": 5811, "db_id": "language_corpus", "final": {"question": "Please list the titles of the top 3 Wikipedia pages with the most different words on the Catalan language.", "sql": "SELECT title FROM pages WHERE lid = 1 ORDER BY words DESC LIMIT 3", "source_tables": ["pages"]}, "evidence": "lid = 1 means it's Catalan language; with most different words refers to MAX(words)"}
{"sample_id": 5766, "db_id": "language_corpus", "final": {"question": "List out the title of the word have id less than 20.", "sql": "SELECT DISTINCT T1.title FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T2.wid < 20", "source_tables": ["pages_words", "pages"]}, "evidence": "word have id less than 20 refers to wid < 20;"}
{"sample_id": 5805, "db_id": "language_corpus", "final": {"question": "Which word that has 274499 repetitions in the Catalan language?", "sql": "SELECT T1.word FROM words AS T1 INNER JOIN langs_words AS T2 ON T1.wid = T2.wid WHERE T2.occurrences = 274499 AND T2.lid = 1", "source_tables": ["words", "langs_words"]}, "evidence": "lid = 1 menas it's Catalan language; 274499 repetitions refers to occurrences = 274499"}
{"sample_id": 5744, "db_id": "language_corpus", "final": {"question": "How many Catalan-language Wikipedia pages are there overall?", "sql": "SELECT pages FROM langs WHERE lang = 'ca'", "source_tables": ["langs"]}, "evidence": "Catalan-language refers to lang = 'ca';"}
{"sample_id": 5768, "db_id": "language_corpus", "final": {"question": "How many word appeared 8 times? State the language id of the page.", "sql": "SELECT COUNT(T2.wid), T1.lid FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T2.occurrences = 8", "source_tables": ["pages_words", "pages"]}, "evidence": "appeared 8 times refers to occurrences = 8;"}
{"sample_id": 5740, "db_id": "language_corpus", "final": {"question": "What number of words are there on revision page 27457362?", "sql": "SELECT words FROM pages WHERE revision = 27457362", "source_tables": ["pages"]}, "evidence": "This is not;"}
{"sample_id": 5718, "db_id": "language_corpus", "final": {"question": "List down the revision page id of titles where \"fresc\" appears.", "sql": "SELECT T3.revision FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'fresc'", "source_tables": ["pages", "pages_words", "words"]}, "evidence": "page id refers to pid; \"fresc\" refers to word = 'fresc'"}
{"sample_id": 5714, "db_id": "language_corpus", "final": {"question": "What are the occurance of word \"del\" in title \"Any anomal\u00c3\u00adstic\"?", "sql": "SELECT T2.occurrences FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'del' AND T3.title = 'Any anomal\u00c3\u00adstic'", "source_tables": ["pages", "pages_words", "words"]}, "evidence": "This is not"}
{"sample_id": 5777, "db_id": "language_corpus", "final": {"question": "Please list the Catalan words with an occurrence of over 200000.", "sql": "SELECT word FROM words WHERE occurrences > 200000", "source_tables": ["words"]}, "evidence": "occurrence of over 200000 refers to occurrences > 200000;"}
{"sample_id": 5812, "db_id": "language_corpus", "final": {"question": "What is the revision ID for the page on Catalan titled \"Arqueologia\"?", "sql": "SELECT revision FROM pages WHERE lid = 1 AND title = 'Arqueologia'", "source_tables": ["pages"]}, "evidence": "lid = 1 means it's Catalan language; Arqueologia refers to title = 'Arqueologia'; revision ID refers to revision"}
{"sample_id": 5702, "db_id": "language_corpus", "final": {"question": "How many times did the word pair \"i\" and \"a\" appeared in the Cataln language/page?", "sql": "SELECT SUM(occurrences) FROM biwords WHERE w1st = 86 AND w2nd = 109", "source_tables": ["biwords"]}, "evidence": "times appeared refers to occurrences; word pair \"i\" and \"a\" refers to w1st.word = 'i' w2st.word = 'a'"}
{"sample_id": 5817, "db_id": "language_corpus", "final": {"question": "What is the title of the page on which the word \"grec\" has an occurrence of 52 times.", "sql": "SELECT T3.title FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'grec' AND T2.occurrences = 52", "source_tables": ["pages", "pages_words", "words"]}, "evidence": "occurrence of 52 times refers to pages_words.occurrences = 52; grec refers to word = 'grec'"}
{"sample_id": 5690, "db_id": "language_corpus", "final": {"question": "List the page id of wikipedia about Catalan language which have the appearance of the word 'decimal'?", "sql": "SELECT T2.pid FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'decimal'", "source_tables": ["pages_words", "words"]}, "evidence": "have the appearance of 'decimal' refers to word = 'decimal'"}
{"sample_id": 5778, "db_id": "language_corpus", "final": {"question": "What is the locale of the language of the page titled \"Asclepi\"?", "sql": "SELECT T2.locale FROM pages AS T1 INNER JOIN langs AS T2 ON T1.lid = T2.lid WHERE T1.title = 'Asclepi'", "source_tables": ["langs", "pages"]}, "evidence": "page titled \"Asclepi\" refers to title = 'Asclepi' ;"}
{"sample_id": 5789, "db_id": "language_corpus", "final": {"question": "How many pages does the Catalan language have in Wikipedia?", "sql": "SELECT pages FROM langs WHERE lang = 'ca'", "source_tables": ["langs"]}, "evidence": "Catalan language refers to lang = 'ca'"}
{"sample_id": 5725, "db_id": "language_corpus", "final": {"question": "How many total occurrences are there in the three-letter words?", "sql": "SELECT SUM(occurrences) FROM words WHERE LENGTH(word) = 3", "source_tables": ["words"]}, "evidence": "three-letter words are words composed of exactly three letters;"}
{"sample_id": 5760, "db_id": "language_corpus", "final": {"question": "How many times that the word pair of \"barcelona\" and \"precolombina\" occur?", "sql": "SELECT SUM(occurrences) FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'barcelona' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'precolombina' )", "source_tables": ["words", "biwords"]}, "evidence": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; w1st or w2nd = 'barcelona'; w1st or w2nd = 'precolombina';"}
{"sample_id": 5717, "db_id": "language_corpus", "final": {"question": "What are the words that were paired with \"John\", list down 10 of them.", "sql": "SELECT w2nd FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'john' ) LIMIT 10", "source_tables": ["words", "biwords"]}, "evidence": "pair with \"John\" refers to w1st.word = \"John\" or w2nd.word = \"John\""}
{"sample_id": 5727, "db_id": "language_corpus", "final": {"question": "Calculate the average number of repetitions in the pairs of words in which the first word id is number 34.", "sql": "SELECT CAST(SUM(CASE WHEN w1st = 34 THEN 1 ELSE 0 END) AS REAL) / COUNT(w1st) FROM biwords", "source_tables": ["biwords"]}, "evidence": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; the first word id number 34 refers to w1st = 34; repetition refers to occurrences or times this pair appears; DIVIDE(SUM(occurrences where w1st = 34), COUNT(occurrences where w1st = 34));"}
{"sample_id": 5751, "db_id": "language_corpus", "final": {"question": "How many times on page number 16 does the second word in the pair of words 1 and 109 appear?", "sql": "SELECT SUM(T1.occurrences) FROM pages_words AS T1 INNER JOIN biwords AS T2 ON T2.w2nd = T1.wid WHERE T2.w2nd = 109 AND T2.w1st = 1 AND T1.pid = 16", "source_tables": ["pages_words", "biwords"]}, "evidence": "How many times appear refer to occurrences; page number 16 refers to pid = 16; Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; w1st = 1; w2nd = 109;"}
{"sample_id": 5705, "db_id": "language_corpus", "final": {"question": "What is the total word of title \"Adam\" and \"Acampada\"?", "sql": "SELECT SUM(words) FROM pages WHERE title IN ('Adam', 'Acampada')", "source_tables": ["pages"]}, "evidence": "total word refers to sum(words); title \"Adam\" and \"Acampada\" refers to title IN('Adam','Acampada')"}
{"sample_id": 5758, "db_id": "language_corpus", "final": {"question": "List out the title of Catalan language Wikipedia page that has wikipedia revision page id as 106601.", "sql": "SELECT title FROM pages WHERE revision = 106601", "source_tables": ["pages"]}, "evidence": "Wikipedia revision page id as 106601 refers to revision = 106601;"}
{"sample_id": 5878, "db_id": "airline", "final": {"question": "How many flights from Charlotte Douglas International Airport to Austin - Bergstrom International Airport experienced serious reasons that cause flight cancellation?", "sql": "SELECT COUNT(*) FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T1.ORIGIN = T2.Code WHERE T1.ORIGIN = 'CLT' AND T1.DEST = 'AUS' AND T2.Description = 'Charlotte, NC: Charlotte Douglas International' AND T1.CANCELLATION_CODE = 'A'", "source_tables": ["airlines", "airports"]}, "evidence": "from refers to ORIGIN; Charlotte Douglas International Airport refers to Description = 'Charlotte, NC: Charlotte Douglas International'; to refers to DEST; Austin - Bergstrom International Airport refers to Description = 'Austin, TX: Austin - Bergstrom International'; serious reasons refers to CANCELLATION_CODE = 'A';"}
{"sample_id": 5835, "db_id": "airline", "final": {"question": "Which airline operated more flights on 2018/8/1, American Airlines Inc. or Endeavor Air Inc.?", "sql": "SELECT CASE WHEN COUNT(CASE WHEN T3.Description = 'American Airlines Inc.: AA' THEN 1 ELSE NULL END) > COUNT(CASE WHEN T3.Description = 'Endeavor Air Inc.: 9E' THEN 1 ELSE NULL END) THEN 'American Airlines Inc.: AA' ELSE 'Endeavor Air Inc.: 9E' END AS RESULT FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN \"Air Carriers\" AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T2.FL_DATE = '2018/8/1'", "source_tables": ["airlines", "airports", "air carriers"]}, "evidence": "SUM(Description = 'American Airlines Inc.: AA') > SUM(Description = 'Endeavor Air Inc.: 9E') means American Airlines Inc. operated more flights than\u00a0 Endeavor Air Inc; SUM(Description = 'American Airlines Inc.: AA') < SUM(Description = 'Endeavor Air Inc.: 9E') means Endeavor Air Inc. operated more flights than American Airlines Inc.; on 2018/8/1 refers to FL_DATE = '2018/8/1';"}
{"sample_id": 5842, "db_id": "airline", "final": {"question": "Tell the number of fights landed earlier on Miami Airport on 2018/8/12.", "sql": "SELECT COUNT(*) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE = '2018/8/12' AND T2.DEST = 'MIA' AND T2.ARR_DELAY < 0", "source_tables": ["airlines", "airports"]}, "evidence": "landed on refers to DEST; landed earlier refers to ARR_DELAY < 0; Miami Airport refers to DEST = 'MIA'; on 2018/8/12 refers to FL_DATE = '2018/8/12';"}
{"sample_id": 5886, "db_id": "airline", "final": {"question": "List the description of the airports that have code that ends with number 3?", "sql": "SELECT Description FROM Airports WHERE Code LIKE '%3'", "source_tables": ["airports"]}, "evidence": "code that ends with number 3 refers to Code like '%3';"}
{"sample_id": 5857, "db_id": "airline", "final": {"question": "What is the IATA code of the Anita Bay Airport in Anita Bay, Alaska?", "sql": "SELECT Code FROM Airports WHERE Description = 'Anita Bay, AK: Anita Bay Airport'", "source_tables": ["airports"]}, "evidence": "IATA code refers to Code; Anita Bay Airport in Anita Bay, Alaska refers to Description = 'Anita Bay, AK: Anita Bay Airport';"}
{"sample_id": 5837, "db_id": "airline", "final": {"question": "How many flights on average does American Airlines Inc. operate every day in August, 2018?", "sql": "SELECT CAST( SUM(CASE WHEN T2.FL_DATE LIKE '2018/8%' THEN 1 ELSE 0 END) AS REAL) / 31 FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN \"Air Carriers\" AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA'", "source_tables": ["airlines", "airports", "air carriers"]}, "evidence": "flights on average = DIVIDE(COUNT(Code), 31); American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; every day in August, 2018 refers to FL_DATE like '2018/8%';"}
{"sample_id": 5839, "db_id": "airline", "final": {"question": "Give the number of planes that took off from Los Angeles International airport on 2018/8/27.", "sql": "SELECT SUM(CASE WHEN T2.FL_DATE = '2018/8/27' THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T1.Description = 'Los Angeles, CA: Los Angeles International'", "source_tables": ["airlines", "airports"]}, "evidence": "took off from refers to ORIGIN; Los Angeles International airport refers to Description = 'Los Angeles, CA: Los Angeles International'; on 2018/8/27 refers to FL_DATE = '2018/8/27';"}
{"sample_id": 5908, "db_id": "airline", "final": {"question": "Give the air carrier description of the flights that have an earlier arrival and departure.", "sql": "SELECT T1.Description FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.ARR_DELAY < 0 AND T2.DEP_DELAY < 0 GROUP BY T1.Description", "source_tables": ["airlines", "air carriers"]}, "evidence": "earlier arrival and departure refers to ARR_DELAY < 0 AND DEP_DELAY < 0;"}
{"sample_id": 5909, "db_id": "airline", "final": {"question": "Among the flights with air carrier \"Southwest Airlines Co.: WN\", provide the tail number of flights with an actual elapsed time lower than the 80% of the average actual elapsed time of listed flights.", "sql": "SELECT T2.TAIL_NUM FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Southwest Airlines Co.: WN' AND T2.ACTUAL_ELAPSED_TIME < ( SELECT AVG(ACTUAL_ELAPSED_TIME) * 0.8 FROM Airlines )", "source_tables": ["airlines", "air carriers"]}, "evidence": "Southwest Airlines Co.: WN refers to Description = 'Southwest Airlines Co.: WN'; tail number refers to TAIL_NUM; actual elapsed time lower than the 80% of the average actual elapsed time refers to ACTUAL_ELAPSED_TIME < (MULTIPLY AVG(ACTUAL_ELAPSED_TIME), 0.8);"}
{"sample_id": 5852, "db_id": "airline", "final": {"question": "What is the percentage of flights which landed at Pittsburgh were faster than scheduled?", "sql": "SELECT CAST(SUM(CASE WHEN T1.ACTUAL_ELAPSED_TIME < T1.CRS_ELAPSED_TIME THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T2.Code = T1.DEST WHERE T2.Description LIKE '%Pittsburgh%' AND T1.CRS_ELAPSED_TIME IS NOT NULL AND T1.ACTUAL_ELAPSED_TIME IS NOT NULL", "source_tables": ["airlines", "airports"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(ACTUAL_ELAPSED_TIME < T2.CRS_ELAPSED_TIME), COUNT(Code)), 100); landed at refers to DEST; Pittsburgh refers to Description which contains 'Pittsburgh'; faster than scheduled refers to ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME;"}
{"sample_id": 5875, "db_id": "airline", "final": {"question": "How many flights on the 1st of August 2018 were coming from Allentown, Pennsylvania?", "sql": "SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018/8/1' AND ORIGIN = 'ABE'", "source_tables": ["airlines"]}, "evidence": "1st of August 2018 refers to FL_DATE = '2018/8/1'; coming from Allentown, Pennsylvania refers to ORIGIN = 'ABE';"}
{"sample_id": 5880, "db_id": "airline", "final": {"question": "What is the actual departure time of JetBlue Airways with the plane's tail number N903JB to Fort Lauderdale-Hollywood International Airport on the 20th of August 2018?", "sql": "SELECT T1.DEP_TIME FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code INNER JOIN Airports AS T3 ON T1.DEST = T3.Code WHERE T1.FL_DATE = '2018/8/20' AND T1.TAIL_NUM = 'N903JB' AND T2.Description LIKE '%JetBlue Airways%' AND T3.Description LIKE '%Fort Lauderdale-Hollywood%'", "source_tables": ["airports", "airlines", "air carriers"]}, "evidence": "actual departure time refers to DEP_TIME; JetBlue Airways refers to Description like '%JetBlue Airways%'; tail number refers to TAIL_NUM; TAIL_NUM = 'N903JB'; to refers to DEST; Fort Lauderdale-Hollywood International Airport refers to Description like '%Fort Lauderdale-Hollywood%'; on the 20th of August 2018 refers to FL_DATE = '2018/8/20';"}
{"sample_id": 5899, "db_id": "airline", "final": {"question": "Provide the air carrier description of the flight with the highest actual elapsed time.", "sql": "SELECT T1.Description FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID ORDER BY T2.ACTUAL_ELAPSED_TIME DESC LIMIT 1", "source_tables": ["airlines", "air carriers"]}, "evidence": "highest actual elapsed time refers to MAX(ACTUAL_ELAPSED_TIME);"}
{"sample_id": 5897, "db_id": "airline", "final": {"question": "Among the flights with air carrier described as Asap Air Inc.: ASP, what is the tail number of the flight with the longest departure delay?", "sql": "SELECT T2.TAIL_NUM FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Asap Air Inc.: ASP' ORDER BY T2.DEP_DELAY DESC LIMIT 1", "source_tables": ["airlines", "air carriers"]}, "evidence": "Asap Air Inc.: ASP refers to Description = 'Asap Air Inc.: ASP'; tail number refers to TAIL_NUM; longest departure delay refers to MAX(DEP_DELAY);"}
{"sample_id": 5841, "db_id": "airline", "final": {"question": "How many flights of Alaska Airlines were delayed on 2018/8/2?", "sql": "SELECT COUNT(*) FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.FL_DATE = '2018/8/2' AND T2.Description = 'Alaska Airlines Inc.: AS' AND T1.DEP_DELAY > 0", "source_tables": ["airlines", "air carriers"]}, "evidence": "Alaska Airlines refers to Description = 'Alaska Airlines Inc.: AS'; delayed refers to DEP_DELAY > 0; on 2018/8/2 refers to FL_DATE = '2018/8/2';"}
{"sample_id": 5910, "db_id": "airline", "final": {"question": "List the air carrier's description with arrival time lower than the 40% of the average arrival time of flights that flew to Phoenix.", "sql": "SELECT T1.Description FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.DEST = 'PHX' AND T2.ARR_TIME < ( SELECT AVG(ARR_TIME) * 0.4 FROM Airlines ) GROUP BY T1.Description", "source_tables": ["airlines", "air carriers"]}, "evidence": "arrival time lower than the 40% of the average arrival time refers to ARR_TIME < MULTIPLY(AVG(ARR_TIME), 0.4); flew to Phoenix refers to DEST = 'PHX';"}
{"sample_id": 5864, "db_id": "airline", "final": {"question": "What are the names of the top 5 airlines with the highest number of aircraft?", "sql": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code GROUP BY T2.Description ORDER BY T1.TAIL_NUM DESC LIMIT 5", "source_tables": ["airlines", "air carriers"]}, "evidence": "names of the airlines refers to Description; highest number of aircraft refers to MAX(COUNT(TAIL_NUM));"}
{"sample_id": 5855, "db_id": "airline", "final": {"question": "What are the codes of the airport found in Ankara, Turkey?", "sql": "SELECT Code FROM Airports WHERE Description LIKE '%Ankara, Turkey%'", "source_tables": ["airports"]}, "evidence": "airport found in Ankara, Turkey refers to Description like '%Ankara, Turkey%';"}
{"sample_id": 5889, "db_id": "airline", "final": {"question": "List the tail number of flights that flew on August 17, 2018.", "sql": "SELECT TAIL_NUM FROM Airlines WHERE FL_DATE = '2018/8/17' GROUP BY TAIL_NUM", "source_tables": ["airlines"]}, "evidence": "tail number refers to TAIL_NUM; on August 17, 2018 refers to FL_DATE = '2018/8/17';"}
{"sample_id": 5950, "db_id": "books", "final": {"question": "Which shipping method is preferred by customers the most?", "sql": "SELECT T2.method_name FROM cust_order AS T1 INNER JOIN shipping_method AS T2 ON T1.shipping_method_id = T2.method_id GROUP BY T2.method_name ORDER BY COUNT(T2.method_id) DESC LIMIT 1", "source_tables": ["cust_order", "shipping_method"]}, "evidence": "shipping method preferred the most by customers refers to method_id where Max(Count(method_id)); which shipping method refers to method_name"}
{"sample_id": 6095, "db_id": "books", "final": {"question": "What is the price of the book with ISBN 9780763628321?", "sql": "SELECT T2.price FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.isbn13 = 9780763628321", "source_tables": ["book", "order_line"]}, "evidence": "\"9780763628321\" is the isbn13"}
{"sample_id": 6048, "db_id": "books", "final": {"question": "How many books written by Akira Watanabe are available on Gravity?", "sql": "SELECT COUNT(*) FROM author AS T1 INNER JOIN book_author AS T2 ON T1.author_id = T2.author_id WHERE T1.author_name = 'Akira Watanabe'", "source_tables": ["book_author", "author"]}, "evidence": "\"Akira Watanabe\" is the author_name"}
{"sample_id": 6067, "db_id": "books", "final": {"question": "Which country is 9 Green Ridge Point, Arendal located at?", "sql": "SELECT T2.country_name FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T1.street_number = 9 AND T1.street_name = 'Green Ridge Point' AND T1.city = 'Arendal'", "source_tables": ["address", "country"]}, "evidence": "\"9\" is the street_number; 'Green Reidge Point' is the street_name; 'Arendal' is the city"}
{"sample_id": 5988, "db_id": "books", "final": {"question": "How many percent of orders in 2020 used international shipping?", "sql": "SELECT CAST(SUM(CASE WHEN T2.method_name = 'International' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cust_order AS T1 INNER JOIN shipping_method AS T2 ON T1.shipping_method_id = T2.method_id WHERE STRFTIME('%Y', T1.order_date) = '2020'", "source_tables": ["cust_order", "shipping_method"]}, "evidence": "international shipping refers to method_name = 'International'; orders in 2020 refers to order_date = '2020%'; percentage = Divide (Sum(method_name = 'International'), Count(order_id)) * 100"}
{"sample_id": 6080, "db_id": "books", "final": {"question": "Name the title of the book with the most number of pages that was published from 1990 to 2000 by publisher Free Press.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Free Press' AND STRFTIME('%Y', T1.publication_date) BETWEEN '1990' AND '2000' ORDER BY T1.num_pages DESC LIMIT 1", "source_tables": ["book", "publisher"]}, "evidence": "books with the most number of pages refers to Max(num_pages); published from 1990 to 2000 refers to SUBSTR(publication_date, 1, 4) BETWEEN '1990' AND '2000'; 'Free Press' is the publisher_name"}
{"sample_id": 6062, "db_id": "books", "final": {"question": "List all books authored by Tom Clancy.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Tom Clancy'", "source_tables": ["book_author", "book", "author"]}, "evidence": "\"Tom Clancy\" is the author_name; books refers title"}
{"sample_id": 5937, "db_id": "books", "final": {"question": "How many orders does the book \"O Xar\u00e1\" have?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'O Xar\u00e1'", "source_tables": ["book", "order_line"]}, "evidence": "\"O Xar\u00e1\" is the title of the book"}
{"sample_id": 6026, "db_id": "books", "final": {"question": "Indicate the complete address of customers located in Lazaro Cardenas.", "sql": "SELECT street_number, street_name, city, country_id FROM address WHERE city = 'Lazaro Cardenas'", "source_tables": ["address"]}, "evidence": "complete address refers to street_number, street_name, city, country; \"Lazaro Cardenas\" is the city"}
{"sample_id": 6001, "db_id": "books", "final": {"question": "What is the second-least common method of shipping?", "sql": "SELECT T2.method_name FROM cust_order AS T1 INNER JOIN shipping_method AS T2 ON T1.shipping_method_id = T2.method_id GROUP BY T2.method_name ORDER BY COUNT(T2.method_id) ASC LIMIT 1, 1", "source_tables": ["cust_order", "shipping_method"]}, "evidence": "method of shipping refers to method_name; least method refers to Min(Count(method_id))"}
{"sample_id": 5953, "db_id": "books", "final": {"question": "How many books did A.R. Braunmuller write?", "sql": "SELECT COUNT(*) FROM author AS T1 INNER JOIN book_author AS T2 ON T1.author_id = T2.author_id WHERE T1.author_name = 'A.R. Braunmuller'", "source_tables": ["book_author", "author"]}, "evidence": "\"A.R. Braunmuller\" is the author_name"}
{"sample_id": 5954, "db_id": "books", "final": {"question": "What is the name of the publisher who published Agatha Christie's first book?", "sql": "SELECT T4.publisher_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T3.author_name = 'Agatha Christie' ORDER BY T1.publication_date ASC LIMIT 1", "source_tables": ["book_author", "book", "author", "publisher"]}, "evidence": "\"Agatha Christie\" is the author_name; name of publisher refers to publisher_name; first book refers to Min(publication_date)"}
{"sample_id": 6085, "db_id": "books", "final": {"question": "Which country does the customer with the email \"rturbitt2@geocities.jp\" from?", "sql": "SELECT T4.country_name FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id INNER JOIN country AS T4 ON T4.country_id = T3.country_id WHERE T1.email = 'rturbitT2@geocities.jp'", "source_tables": ["address", "customer", "country", "customer_address"]}, "evidence": "\"rturbitt2@geocities.jp\" is the email of customer; country refers to country_name"}
{"sample_id": 6096, "db_id": "books", "final": {"question": "What is the number of pages of the book in the order ID 1167?", "sql": "SELECT T1.num_pages FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T2.order_id = 1167", "source_tables": ["book", "order_line"]}, "evidence": "number of pages refers to num_pages"}
{"sample_id": 6022, "db_id": "books", "final": {"question": "Who published the book \"The Secret Garden\"?", "sql": "SELECT DISTINCT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'The Secret Garden'", "source_tables": ["book", "publisher"]}, "evidence": "\"The Secret Garden\" is the title of the book; who published the book refers to\u00a0publisher_name"}
{"sample_id": 5963, "db_id": "books", "final": {"question": "What is the title of the most expensive book?", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id ORDER BY T2.price DESC LIMIT 1", "source_tables": ["book", "order_line"]}, "evidence": "most expensive book refers to Max(price)"}
{"sample_id": 5997, "db_id": "books", "final": {"question": "How many addresses are from the Philippines?", "sql": "SELECT COUNT(T2.country_id) FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T2.country_name = 'Philippines'", "source_tables": ["address", "country"]}, "evidence": "\"Philippines\" is the country_name"}
{"sample_id": 6087, "db_id": "books", "final": {"question": "What is the title of the first book that was written by A.J. Ayer?", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'A.J. Ayer' ORDER BY T1.publication_date ASC LIMIT 1", "source_tables": ["book_author", "book", "author"]}, "evidence": "\"A.J. Ayer\" is the author_name; first book refers to Min(publication_date)"}
{"sample_id": 6052, "db_id": "books", "final": {"question": "Name the publisher of the oldest book.", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id ORDER BY T1.publication_date ASC LIMIT 1", "source_tables": ["book", "publisher"]}, "evidence": "publisher refers to publisher_name;\u00a0 oldest book refers to Min(publication_date)"}
{"sample_id": 6082, "db_id": "books", "final": {"question": "What is the current address of customer Kandy?", "sql": "SELECT T3.street_number, T3.street_name, T3.city FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id INNER JOIN address_status AS T4 ON T4.status_id = T2.status_id WHERE T1.first_name = 'Kandy'", "source_tables": ["address", "address_status", "customer", "customer_address"]}, "evidence": "current address refers to address_status = 1; address refers to street_number, street_name, city"}
{"sample_id": 6084, "db_id": "books", "final": {"question": "How many orders got returned in 2022?", "sql": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Returned' AND STRFTIME('%Y', T2.status_date) = '2022'", "source_tables": ["order_status", "order_history"]}, "evidence": "orders got returned refers to status_value = 'Returned'; in 2022 refers to SUBSTR(status_date, 1, 4) = '2022'"}
{"sample_id": 6013, "db_id": "books", "final": {"question": "What are the city addresses of the customers located in the United States of America?", "sql": "SELECT DISTINCT T2.city FROM country AS T1 INNER JOIN address AS T2 ON T1.country_id = T2.country_id WHERE T1.country_name = 'United States of America'", "source_tables": ["address", "country"]}, "evidence": "\"United States of America\" is the country_name"}
{"sample_id": 5930, "db_id": "books", "final": {"question": "List the title of the earliest published Japanese book.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'Japanese' ORDER BY T1.publication_date ASC LIMIT 1", "source_tables": ["book", "book_language"]}, "evidence": "Japanese book refers to language_name = 'Japanese'; earliest published refers to Min(publication_date)"}
{"sample_id": 5915, "db_id": "books", "final": {"question": "How many books were published by publisher \"Thomas Nelson\"?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Thomas Nelson'", "source_tables": ["book", "publisher"]}, "evidence": "\"Thomas Nelson\" is the publisher_name"}
{"sample_id": 6078, "db_id": "books", "final": {"question": "The book name \"The Season: A Candid Look at Broadway\" was published by which publisher?", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'The Season: A Candid Look at Broadway'", "source_tables": ["book", "publisher"]}, "evidence": "\"The Season: A Candid Look at Broadway\" is the\u00a0 title of the book; publisher refers to publisher_name"}
{"sample_id": 5984, "db_id": "books", "final": {"question": "Provide the number of orders by Daisey Lamball in 2021.", "sql": "SELECT COUNT(*) FROM cust_order AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Daisey' AND T2.last_name = 'Lamball' AND STRFTIME('%Y', T1.order_date) = '2021'", "source_tables": ["customer", "cust_order"]}, "evidence": "in 2021 refers to order_date LIKE '2021%'"}
{"sample_id": 5931, "db_id": "books", "final": {"question": "For the publisher which published the most books, show its name.", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id GROUP BY T2.publisher_name ORDER BY COUNT(T2.publisher_id) DESC LIMIT 1", "source_tables": ["book", "publisher"]}, "evidence": "published the most books refers to Max(Count(book_id)); publisher refers to publisher_name"}
{"sample_id": 6020, "db_id": "books", "final": {"question": "How many customers ordered Stephen King's first book?", "sql": "SELECT COUNT(T1.publication_date) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN order_line AS T4 ON T4.book_id = T1.book_id WHERE T3.author_name = 'Stephen King' ORDER BY T1.publication_date ASC LIMIT 1", "source_tables": ["book_author", "book", "author", "order_line"]}, "evidence": "\"Stephen King\" is the author_name; first book refers to Min(publication_date)"}
{"sample_id": 6019, "db_id": "books", "final": {"question": "List all the titles of the Spanish books published by Alfaguara.", "sql": "SELECT T2.title FROM book_language AS T1 INNER JOIN book AS T2 ON T2.language_id = T1.language_id INNER JOIN publisher AS T3 ON T3.publisher_id = T2.publisher_id WHERE T1.language_name = 'Spanish' AND T3.publisher_name = 'Alfaguara' GROUP BY T2.title", "source_tables": ["book", "book_language", "publisher"]}, "evidence": "\"Spanish\" is the language_name; 'Alfaguara' is the publisher_name"}
{"sample_id": 6074, "db_id": "books", "final": {"question": "What is the full name of customer with email ckupis4@tamu.edu?", "sql": "SELECT first_name, last_name FROM customer WHERE email = 'ckupis4@tamu.edu'", "source_tables": ["customer"]}, "evidence": "\"ckupis4@tamu.edu\" is the email of customer; full name refers to first_name, last_name"}
{"sample_id": 6042, "db_id": "books", "final": {"question": "How many books have been published in Japanese?", "sql": "SELECT COUNT(*) FROM book_language AS T1 INNER JOIN book AS T2 ON T1.language_id = T2.language_id WHERE T1.language_name = 'Japanese'", "source_tables": ["book", "book_language"]}, "evidence": "in Japanese refers to language_name = 'Japanese"}
{"sample_id": 6072, "db_id": "books", "final": {"question": "What percentage of books written by Hirohiko make up the number of books published by Viz Media?", "sql": "SELECT CAST(SUM(CASE WHEN T1.author_name = 'Hirohiko Araki' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM author AS T1 INNER JOIN book_author AS T2 ON T2.author_id = T1.author_id INNER JOIN book AS T3 ON T3.book_id = T2.book_id INNER JOIN publisher AS T4 ON T4.publisher_id = T3.publisher_id WHERE T4.publisher_name = 'VIZ Media'", "source_tables": ["book_author", "book", "author", "publisher"]}, "evidence": "\"Hirohiko Araki\" is the author_name; 'Viz Media' is the publisher_name; percentage = Divide (Count(author_name = 'Hirohiko Araki'), Count(book_id)) * 100"}
{"sample_id": 6090, "db_id": "books", "final": {"question": "Who ordered the book with the cheapest price?", "sql": "SELECT T3.first_name, T3.last_name FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id ORDER BY T1.price ASC LIMIT 1", "source_tables": ["customer", "cust_order", "order_line"]}, "evidence": "book with cheapest price refers to Min(price); who order means name of customer which refers to first_name, last_name"}
{"sample_id": 6023, "db_id": "books", "final": {"question": "Among the books that were published by Scholastic, how many were written by J.K Rowling?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id INNER JOIN book_author AS T3 ON T3.book_id = T1.book_id INNER JOIN author AS T4 ON T4.author_id = T3.author_id WHERE T2.publisher_name = 'Scholastic' AND T4.author_name = 'J.K. Rowling'", "source_tables": ["book_author", "book", "author", "publisher"]}, "evidence": "\"J.K Rowling\" is the author_name; 'Scholastic' is the publisher_name"}
{"sample_id": 5940, "db_id": "books", "final": {"question": "Which country does \u017dirovnica city belong to?", "sql": "SELECT T1.country_name FROM country AS T1 INNER JOIN address AS T2 ON T1.country_id = T2.country_id WHERE T2.city = '\u017dirovnica'", "source_tables": ["address", "country"]}, "evidence": "\"\u017dirovnica\" is the city; country refers to country_name"}
{"sample_id": 5919, "db_id": "books", "final": {"question": "What is the name of the publisher of the book with the most pages?", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id ORDER BY T1.num_pages DESC LIMIT 1", "source_tables": ["book", "publisher"]}, "evidence": "book with the most pages refers to Max(num_pages); name of publisher refers to publisher_name"}
{"sample_id": 5981, "db_id": "books", "final": {"question": "Which publisher published Barry Eisler's book?", "sql": "SELECT T4.publisher_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T3.author_name = 'Barry Eisler'", "source_tables": ["book_author", "book", "author", "publisher"]}, "evidence": "\"Barry Eisler\" is the author_name; publisher refers to publisher_name"}
{"sample_id": 5995, "db_id": "books", "final": {"question": "Which language is the rarest among all the books?", "sql": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id GROUP BY T2.language_name ORDER BY COUNT(T2.language_name) ASC LIMIT 1", "source_tables": ["book", "book_language"]}, "evidence": "language written in refers to language_name; rarest refers to Min(Count(book_id))"}
{"sample_id": 6068, "db_id": "books", "final": {"question": "List 10 addresses located in Poland.", "sql": "SELECT T1.street_number, T1.street_name, T1.city FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T2.country_name = 'Poland' LIMIT 10", "source_tables": ["address", "country"]}, "evidence": "\"Polan\" is the country_name; address refers to street_number, street_name, city"}
{"sample_id": 6105, "db_id": "books", "final": {"question": "What is the sum of the number of pages of the books ordered by Mick Sever?", "sql": "SELECT SUM(T1.num_pages) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Mick' AND T4.last_name = 'Sever'", "source_tables": ["customer", "book", "cust_order", "order_line"]}, "evidence": "sum of the number of pages refers to Sum(num_pages)"}
{"sample_id": 5992, "db_id": "books", "final": {"question": "List all of the books that were published in 1995.", "sql": "SELECT title FROM book WHERE STRFTIME('%Y', publication_date) = '1995'", "source_tables": ["book"]}, "evidence": "published in 1995 refers to publication_date LIKE '1995%'; ; list of book refers to title"}
{"sample_id": 6164, "db_id": "food_inspection_2", "final": {"question": "How many restaurants with the highest risk level still passed the inspection?", "sql": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = 3 AND T2.results = 'Pass' AND T1.facility_type = 'Restaurant'", "source_tables": ["inspection", "establishment"]}, "evidence": "restaurant refers to facility_type = 'Restaurant'; the highest risk level refers to max(risk_level); pass the inspection refers to results = 'Pass'"}
{"sample_id": 6194, "db_id": "food_inspection_2", "final": {"question": "What is the inspection result for inspection done by Thomas Langley?", "sql": "SELECT DISTINCT T2.results FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.first_name = 'Thomas' AND T1.last_name = 'Langley'", "source_tables": ["employee", "inspection"]}, "evidence": "inspection result refers to results"}
{"sample_id": 6166, "db_id": "food_inspection_2", "final": {"question": "What is the title of the employee involved in inspection ID 60332?", "sql": "SELECT T1.title FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 60332", "source_tables": ["employee", "inspection"]}, "evidence": ""}
{"sample_id": 6134, "db_id": "food_inspection_2", "final": {"question": "For the sanitarian who lives on 5000 N Wolcott Ave, how many establishments did he/she inspect in the May of 2011?", "sql": "SELECT COUNT(T1.inspection_id) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T2.address = '5000 N Wolcott Ave' AND T2.title = 'Sanitarian' AND strftime('%Y-%m', T1.inspection_date) = '2011-05'", "source_tables": ["inspection", "employee"]}, "evidence": "sanitarian refers to title = 'Sanitarian'; 5000 N Wolcott Ave refers to address = '5000 N Wolcott Ave'; in May 2011 refers to inspection_date between '2011-04-30' and '2011-06-01'"}
{"sample_id": 6151, "db_id": "food_inspection_2", "final": {"question": "What is the assumed name of the business that has the highest total fine in 2014?", "sql": "SELECT T.dba_name FROM ( SELECT T1.dba_name, SUM(T3.fine) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE strftime('%Y', T2.inspection_date) = '2014' GROUP BY T1.dba_name ORDER BY SUM(T3.fine) DESC LIMIT 1 ) AS T", "source_tables": ["inspection", "violation", "establishment"]}, "evidence": "assumed name of business refers to dba_name; the highest total fine refers to max(sum(fine)); in 2014 refers to inspection_date like '2014%'"}
{"sample_id": 6115, "db_id": "food_inspection_2", "final": {"question": "Please list the location coordinates of all the facilities that had an inspection on 2010/5/11.", "sql": "SELECT DISTINCT T2.latitude, T2.longitude FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE T1.inspection_date = '2010-05-11'", "source_tables": ["inspection", "establishment"]}, "evidence": "location coordinates refers to latitude, longitude; on 2010/5/11 refers to inspection_date = '2010-05-11'"}
{"sample_id": 6153, "db_id": "food_inspection_2", "final": {"question": "What are the comments of the inspector during the inspection of Taqueria La Fiesta on 1/25/2010?", "sql": "SELECT T3.inspector_comment FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T2.inspection_date = '2010-01-25' AND T1.dba_name = 'TAQUERIA LA FIESTA'", "source_tables": ["inspection", "violation", "establishment"]}, "evidence": "comment of the inspector refers to inspector_comment; Taqueria La Fiesta refers to dba_name = 'TAQUERIA LA FIESTA'; on 1/25/2010 refers to inspection_date = '2010-01-25'"}
{"sample_id": 6175, "db_id": "food_inspection_2", "final": {"question": "How many inspections failed in 2014?", "sql": "SELECT COUNT(inspection_id) FROM inspection WHERE strftime('%Y', inspection_date) = '2014' AND results = 'Fail'", "source_tables": ["inspection"]}, "evidence": "failed refers to results = 'Fail'; in 2014 refers to inspection_date like '2014%'"}
{"sample_id": 6131, "db_id": "food_inspection_2", "final": {"question": "For the grocery store located at \"3635 W DIVERSEY AVE\", how many inspections did it have?", "sql": "SELECT COUNT(T2.inspection_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.address = '3635 W DIVERSEY AVE ' AND T1.facility_type = 'Grocery Store'", "source_tables": ["inspection", "establishment"]}, "evidence": "grocery store refers to facility_type = 'Grocery Store'; \"3635 W DIVERSEY AVE\" refers to address = '3635 W DIVERSEY AVE'"}
{"sample_id": 6197, "db_id": "food_inspection_2", "final": {"question": "What is the job title of employee who did inspection ID 52269?", "sql": "SELECT T1.title FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 52269", "source_tables": ["employee", "inspection"]}, "evidence": "job title refers to title"}
{"sample_id": 6202, "db_id": "food_inspection_2", "final": {"question": "State the name of dbas with verified quality.", "sql": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.results LIKE '%Pass%'", "source_tables": ["inspection", "establishment"]}, "evidence": "name of dba refers to dba_name; with verified quality refers to results = 'Pass' or results = 'Pass w/Conditions'"}
{"sample_id": 6207, "db_id": "food_inspection_2", "final": {"question": "What is the full name of the employee that inspected establishments with license 1334073?", "sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.license_no = 1334073", "source_tables": ["employee", "inspection"]}, "evidence": "full name refers to first_name, last_name; with license 1334073 refers to license_no = 1334073"}
{"sample_id": 6222, "db_id": "food_inspection_2", "final": {"question": "What is the restaurant's name at \"41.9532864854\" latitude and \"-87.7673790701422\" longitude?", "sql": "SELECT dba_name FROM establishment WHERE latitude = 41.9532864854 AND longitude = -87.7673790701422 AND facility_type = 'Restaurant'", "source_tables": ["establishment"]}, "evidence": "restaurant refers to facility_type = 'Restaurant'; name refers to dba_name; \"41.9532864854\" latitude and \"-87.7673790701422\" longitude refers to latitude = 41.9532864854 and longitude = -87.7673790701422"}
{"sample_id": 6236, "db_id": "food_inspection_2", "final": {"question": "Provide the inspection ID of the inspection with the comment \"MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA\" and sanitary operating requirement code of 7-38-030, 015, 010 (A), 005 (A).", "sql": "SELECT T2.inspection_id FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.inspector_comment = 'MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA' AND T1.code = '7-38-030, 015, 010 (A), 005 (A)'", "source_tables": ["violation", "inspection_point"]}, "evidence": "comment \"MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA\" refers to inspector_comment = 'MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA'; sanitary operating requirement code of 7-38-030, 015, 010 (A), 005 (A) refers to code = '7-38-030, 015, 010 (A), 005 (A)'"}
{"sample_id": 6191, "db_id": "food_inspection_2", "final": {"question": "Provide the first name of employee who did inspection ID 48225?", "sql": "SELECT T1.first_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 48225", "source_tables": ["employee", "inspection"]}, "evidence": ""}
{"sample_id": 6232, "db_id": "food_inspection_2", "final": {"question": "What is the result of the February 24, 2010 inspection involving the employee named \"Arnold Holder\"?", "sql": "SELECT DISTINCT T2.results FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_date = '2010-02-24' AND T1.first_name = 'Arnold' AND T1.last_name = 'Holder'", "source_tables": ["employee", "inspection"]}, "evidence": "February 24, 2010 refers to inspection_date = '2010-02-24'"}
{"sample_id": 6177, "db_id": "food_inspection_2", "final": {"question": "List the point IDs and fines of the inspections done on 7th August 2010.", "sql": "SELECT T2.point_id, T2.fine FROM inspection AS T1 INNER JOIN violation AS T2 ON T1.inspection_id = T2.inspection_id WHERE T1.inspection_date = '2010-08-07'", "source_tables": ["inspection", "violation"]}, "evidence": "on 7th August 2010 refers to inspection_date = '2010-08-07'"}
{"sample_id": 6120, "db_id": "food_inspection_2", "final": {"question": "Among the inspections done by sanitarian Joshua Rosa, how many of them have the result of \"pass\"?", "sql": "SELECT COUNT(T2.inspection_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.results = 'Pass' AND T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'", "source_tables": ["employee", "inspection"]}, "evidence": "have the result of \"pass\" refers to results = 'Pass'"}
{"sample_id": 6231, "db_id": "food_inspection_2", "final": {"question": "Provide the facility type and license number of establishments with the lowest risk level but failed the inspection.", "sql": "SELECT DISTINCT T1.facility_type, T1.license_no FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = 1 AND T2.results = 'Fail'", "source_tables": ["inspection", "establishment"]}, "evidence": "license number refers to license_no; the lowest risk level refers to min(risk_level); failed the inspection refers to results = 'Fail'"}
{"sample_id": 6204, "db_id": "food_inspection_2", "final": {"question": "Calculate the average salary for employees who did inspection on License Re-Inspection.", "sql": "SELECT AVG(T2.salary) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T1.inspection_type = 'License Re-Inspection'", "source_tables": ["inspection", "employee"]}, "evidence": "inspection on License Re-Inspection refers to inspection_type = 'License Re-Inspection'; average salary = avg(salary)"}
{"sample_id": 6217, "db_id": "food_inspection_2", "final": {"question": "What is the percentage of restaurants that paid a fine of 250 among all establishments?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.fine = 250 THEN T1.license_no END) AS REAL) * 100 / COUNT(T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T1.facility_type = 'Restaurant'", "source_tables": ["inspection", "violation", "establishment"]}, "evidence": "a fine of 250 refers to fine = 250; percentage = divide(sum(license_no where fine = 250), count(license_no)) * 100%"}
{"sample_id": 6112, "db_id": "food_inspection_2", "final": {"question": "How many inspections were sanitarian Joshua Rosa responsible for in 2010?", "sql": "SELECT COUNT(T2.inspection_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE strftime('%Y', T2.inspection_date) = '2010' AND T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'", "source_tables": ["employee", "inspection"]}, "evidence": "in 2010 refers to inspection_date like '2010%'"}
{"sample_id": 6127, "db_id": "food_inspection_2", "final": {"question": "When did Wing Hung Chop Suey Restaurant have its first inspection?", "sql": "SELECT MIN(T2.inspection_date) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.aka_name = 'WING HUNG CHOP SUEY RESTAURANT'", "source_tables": ["inspection", "establishment"]}, "evidence": "Wing Hung Chop Suey Restaurant refers to aka_name = 'WING HUNG CHOP SUEY RESTAURANT'; first inspection refers to min(inspection_date)"}
{"sample_id": 6246, "db_id": "food_inspection_2", "final": {"question": "What is the difference in the number of restaurants that passed and failed the canvass inspection type?", "sql": "SELECT COUNT(CASE WHEN T2.results = 'Pass' THEN T1.license_no END) - COUNT(CASE WHEN T2.results = 'Fail' THEN T1.license_no END) AS diff FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.inspection_type = 'Canvass' AND T1.facility_type = 'Restaurant'", "source_tables": ["inspection", "establishment"]}, "evidence": "canvass inspection type refers to inspection_type = 'Canvass'; restaurant refers to facility_type = 'Restaurant'; difference = subtract(count(inspection_id where results = 'Pass'), count(inspection_id where results = 'Fail'))"}
{"sample_id": 6111, "db_id": "food_inspection_2", "final": {"question": "Please list the full names of the sanitarians who did at least one inspection in May, 2010.", "sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE strftime('%Y-%m', T2.inspection_date) = '2010-05' AND T1.title = 'Sanitarian'", "source_tables": ["employee", "inspection"]}, "evidence": "full name refers to first_name, last_name; in May 2010 refers to inspection_date like '2010-05%'; sanitarian refers to title = 'Sanitarian'"}
{"sample_id": 6124, "db_id": "food_inspection_2", "final": {"question": "What is the point level of \"Refrigeration and metal stem thermometers provided and conspicuous\"?", "sql": "SELECT point_level FROM inspection_point WHERE Description = 'Refrigeration and metal stem thermometers provided and conspicuous '", "source_tables": ["inspection_point"]}, "evidence": "\"Refrigeration and metal stem thermometers provided and conspicuous\" refers to Description = 'Refrigeration and metal stem thermometers provided and conspicuous '"}
{"sample_id": 6226, "db_id": "food_inspection_2", "final": {"question": "What is the total number of establishments with the highest risk level?", "sql": "SELECT COUNT(license_no) FROM establishment WHERE risk_level = 3", "source_tables": ["establishment"]}, "evidence": "total number of establishments with the highest risk level = count(max(risk_level))"}
{"sample_id": 6138, "db_id": "food_inspection_2", "final": {"question": "State the inspection pass rate of Pockets Restaurant.", "sql": "SELECT CAST(COUNT(CASE WHEN T2.results = 'Pass' THEN T2.inspection_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.inspection_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'POCKETS' AND T1.facility_type = 'Restaurant'", "source_tables": ["inspection", "establishment"]}, "evidence": "Pockets refers to dba_name = 'POCKETS'; Restaurant refers to facility_type = 'Restaurant'; pass refers to results = 'Pass'; the inspection pass rate = divide(sum(inspection_id where results = 'Pass'), count(license_no)) where dba_name = 'POCKETS' and facility_type = 'Restaurant'"}
{"sample_id": 6185, "db_id": "food_inspection_2", "final": {"question": "Who inspected Jean Samocki and what was the result?", "sql": "SELECT T3.first_name, T3.last_name, T2.results FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T1.dba_name = 'JEAN SAMOCKI'", "source_tables": ["inspection", "establishment", "employee"]}, "evidence": "employee's name refers to first_name, last_name; Jean Samocki refers to dba_name = 'JEAN SAMOCKI'"}
{"sample_id": 6274, "db_id": "coinmarketcap", "final": {"question": "How much was a Bitcoin on 2013/4/28?", "sql": "SELECT T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name = 'Bitcoin'", "source_tables": ["historical", "coins"]}, "evidence": "how much refers to price; on 2013/4/28 refers to date = '2013-04-28'"}
{"sample_id": 6287, "db_id": "coinmarketcap", "final": {"question": "Name the coins that were not opened on May 2013.", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE STRFTIME('%Y-%m', T2.date) = '2013-05' AND T2.open IS NULL", "source_tables": ["historical", "coins"]}, "evidence": "not opened refers to open IS NULL; on May 2013 refers to year(date) = 2019 AND month(date) = 5"}
{"sample_id": 6283, "db_id": "coinmarketcap", "final": {"question": "What is the name of the coin with the highest price?", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.price = ( SELECT MAX(price) FROM historical )", "source_tables": ["historical", "coins"]}, "evidence": "the highest price refers to max(price)"}
{"sample_id": 6267, "db_id": "coinmarketcap", "final": {"question": "When did Bitcoin reach its highest price on 2013/4/29?", "sql": "SELECT T2.time_high FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-29' AND T1.name = 'Bitcoin'", "source_tables": ["historical", "coins"]}, "evidence": "time that a coin reaches its highest price refers to time_high; on 2013/4/29 refers to date = '2013-04-29'"}
{"sample_id": 6259, "db_id": "coinmarketcap", "final": {"question": "For all coins with average price more than $1000. State the current status of the coin.", "sql": "SELECT T1.status FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id GROUP BY T1.name HAVING AVG(T2.price) > 1000", "source_tables": ["historical", "coins"]}, "evidence": "average price more than $1000 refers to AVG(price)>1000"}
{"sample_id": 6261, "db_id": "coinmarketcap", "final": {"question": "Name the coin under the token category that gives the highest max profit.", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.category = 'token' ORDER BY T2.high - T2.low DESC LIMIT 1", "source_tables": ["historical", "coins"]}, "evidence": "the highest max profit refers to max(subtract(high, low))"}
{"sample_id": 6260, "db_id": "coinmarketcap", "final": {"question": "Name the coin and date of transactions with the greatest decline in percent change in 1 hour.", "sql": "SELECT T1.name, T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.percent_change_1h = ( SELECT MIN(percent_change_1h) FROM historical )", "source_tables": ["historical", "coins"]}, "evidence": "the greatest decline in percent change in 1 hour refers to max(percent_change_1h)"}
{"sample_id": 6258, "db_id": "coinmarketcap", "final": {"question": "State the transaction date and the price when Bitcoin was bottomed?", "sql": "SELECT T2.date, T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bitcoin' ORDER BY T2.price LIMIT 1", "source_tables": ["historical", "coins"]}, "evidence": "was bottomed refers to min(price)"}
{"sample_id": 6250, "db_id": "coinmarketcap", "final": {"question": "What is the total value of Argentum coined traded in the past 24 hours on 2016/10/11.", "sql": "SELECT T2.volume_24h FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Argentum' AND T2.date = '2016-10-11'", "source_tables": ["historical", "coins"]}, "evidence": "total value in the past 24 hours refers to volume_24h; on 11/10/16 refers to date = '2016-11-10'"}
{"sample_id": 6266, "db_id": "coinmarketcap", "final": {"question": "What was the price of Bitcoin when it closed at the end of the day on 2013/4/29?", "sql": "SELECT T2.close FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-29' AND T1.name = 'Bitcoin'", "source_tables": ["historical", "coins"]}, "evidence": "price when it closed refers to close; on 2013/4/29 refers to date = '2013-04-29'"}
{"sample_id": 6295, "db_id": "coinmarketcap", "final": {"question": "List the names of the coins above the average price on April 28, 2013.", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2018-04-28' AND T2.price > ( SELECT AVG(price) FROM historical WHERE date = '2018-04-28' )", "source_tables": ["historical", "coins"]}, "evidence": "average price = divide(sum(price), count(name)); on April 28, 2013 refers to date = '2013-04-28'"}
{"sample_id": 6644, "db_id": "retail_world", "final": {"question": "How many orders were handled by Michael Suyama. State the order ID.", "sql": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Michael' AND T1.LastName = 'Suyama'", "source_tables": ["employees", "orders"]}, "evidence": ""}
{"sample_id": 6355, "db_id": "retail_world", "final": {"question": "How many customers are there in the country with the highest number of customers?", "sql": "SELECT COUNT(CustomerID) FROM Customers GROUP BY Country ORDER BY COUNT(CustomerID) DESC LIMIT 1", "source_tables": ["customers"]}, "evidence": "highest number refers to max(count(CustomerID))"}
{"sample_id": 6470, "db_id": "retail_world", "final": {"question": "What is the contact name for product Teatime Chocolate Biscuits?", "sql": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Teatime Chocolate Biscuits'", "source_tables": ["products", "suppliers"]}, "evidence": "\"Teatime Chocolate Biscuits\" is the ProductName"}
{"sample_id": 6482, "db_id": "retail_world", "final": {"question": "Among the seafoods, how many of them have an order quantity of more than 50?", "sql": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN \"Order Details\" AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Categories AS T3 ON T1.CategoryID = T3.CategoryID WHERE T3.CategoryName = 'Seafood' AND T2.Quantity > 50", "source_tables": ["products", "order details", "categories"]}, "evidence": "\"Seafood\" is the CategoryName; order quantity of more than 50 refers to Quantity > 50"}
{"sample_id": 6655, "db_id": "retail_world", "final": {"question": "List out the full name of employee who has birth day on \"3/4/1955 12:00:00 AM\".", "sql": "SELECT FirstName, LastName FROM Employees WHERE BirthDate = '1955-03-04 00:00:00'", "source_tables": ["employees"]}, "evidence": "full name refers to FirstName, LastName; brith day refers to BirthDate"}
{"sample_id": 6653, "db_id": "retail_world", "final": {"question": "How many customers are located in London?", "sql": "SELECT COUNT(CustomerID) FROM Customers WHERE City = 'London'", "source_tables": ["customers"]}, "evidence": "London refers to City = 'London'"}
{"sample_id": 6552, "db_id": "retail_world", "final": {"question": "How many orders were made by the customers in Ireland.", "sql": "SELECT COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Country = 'Ireland'", "source_tables": ["customers", "orders"]}, "evidence": "in Ireland refers to Country = 'Ireland';"}
{"sample_id": 6657, "db_id": "retail_world", "final": {"question": "How many orders that the employees who are located in Tacoma handled?", "sql": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.City = 'Tacoma'", "source_tables": ["employees", "orders"]}, "evidence": "located in Tacoma refers to City = 'Tacoma'"}
{"sample_id": 6603, "db_id": "retail_world", "final": {"question": "Please indicate total order quantity of product Geitost and calculate the percentage of such product among all the order quantity.", "sql": "SELECT SUM(IF(T1.ProductName = 'Geitost', 1, 0)) AS sum , CAST(SUM(IF(T1.ProductName = 'Geitost', 1, 0)) AS REAL) / COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN \"Order Details\" AS T2 ON T1.ProductID = T2.ProductID", "source_tables": ["products", "order details"]}, "evidence": "'Geitost' is a ProductName; calculation = DIVIDE(ProductName = 'Geitost', COUNT(ProductID)) * 100"}
{"sample_id": 6429, "db_id": "retail_world", "final": {"question": "What are the products that belong to the beverage category?", "sql": "SELECT T2.ProductName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.CategoryName = 'Beverages'", "source_tables": ["products", "categories"]}, "evidence": "products belong to beverage category refer to ProductName where CategoryName = 'beverage';"}
{"sample_id": 6332, "db_id": "retail_world", "final": {"question": "Give the full name of the youngest employee.", "sql": "SELECT FirstName, LastName FROM Employees WHERE BirthDate = ( SELECT MAX(BirthDate) FROM Employees )", "source_tables": ["employees"]}, "evidence": "full name = FirstName, LastName; youngest refers to latest BirthDate;"}
{"sample_id": 6660, "db_id": "retail_world", "final": {"question": "Give the phone number of the customer who placed the order id 10264.", "sql": "SELECT T1.Phone FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.OrderID = 10264", "source_tables": ["customers", "orders"]}, "evidence": ""}
{"sample_id": 6434, "db_id": "retail_world", "final": {"question": "Who is the person to contact to get Camembert Pierrot?", "sql": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Camembert Pierrot'", "source_tables": ["products", "suppliers"]}, "evidence": "Camembert Pierrot is the name of the product; person to contact refers to ContactName;"}
{"sample_id": 6446, "db_id": "retail_world", "final": {"question": "What is the largest quantity of \"Manjimup Dried Apples\" for an order?", "sql": "SELECT T2.Quantity FROM Products AS T1 INNER JOIN \"Order Details\" AS T2 ON T2.ProductID = T1.ProductID WHERE T1.ProductName = 'Manjimup Dried Apples' ORDER BY T2.Quantity DESC LIMIT 1", "source_tables": ["products", "order details"]}, "evidence": "the largest quantity of \"Manjimup Dried Apples\" refers to MAX(Quantity) where ProductName = 'Manjimup Dried Apples';"}
{"sample_id": 6699, "db_id": "retails", "final": {"question": "Give the name of the customer who made an order with Clerk#000000803 on 1997/12/10.", "sql": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_orderdate = '1997-12-10' AND T1.o_clerk = 'Clerk#000000803'", "source_tables": ["customer", "orders"]}, "evidence": "name of the customer refers to c_name; o_clerk = 'Clerk#000000803'; order on 1997/12/10 refers to o_orderdate = '1997-12-10';"}
{"sample_id": 6679, "db_id": "retails", "final": {"question": "Please list the order keys of all the orders made by a customer whose account is in debt.", "sql": "SELECT T1.o_orderkey FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_acctbal < 0", "source_tables": ["customer", "orders"]}, "evidence": "account is in debt if c_acctbal < 0;"}
{"sample_id": 6700, "db_id": "retails", "final": {"question": "Calculates the profit processed by Supplier No. 7414 on order No. 817154.", "sql": "SELECT T1.l_extendedprice * (1 - T1.l_discount) - T2.ps_supplycost * T1.l_quantity FROM lineitem AS T1 INNER JOIN partsupp AS T2 ON T1.l_suppkey = T2.ps_suppkey WHERE T1.l_suppkey = 7414 AND T1.l_orderkey = 817154", "source_tables": ["partsupp", "lineitem"]}, "evidence": "SUBTRACT(MULTIPLY(l_extendedprice, (SUBTRACT(1, l_discount)), MULTIPLY(ps_supplycost, l_quantity))) WHERE l_suppkey = 7414 AND l_orderkey = 817154;"}
{"sample_id": 6708, "db_id": "retails", "final": {"question": "How many customers are in the automobile market segment?", "sql": "SELECT COUNT(c_custkey) FROM customer WHERE c_mktsegment = 'AUTOMOBILE'", "source_tables": ["customer"]}, "evidence": "automobile market segment refers to c_mktsegment = 'AUTOMOBILE';"}
{"sample_id": 6717, "db_id": "retails", "final": {"question": "What are the countries in the region of Asia?", "sql": "SELECT T1.n_name FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_name = 'ASIA'", "source_tables": ["region", "nation"]}, "evidence": "countries in the region of Asia refer to n_name where r_name = 'ASIA';"}
{"sample_id": 6774, "db_id": "retails", "final": {"question": "List the name of the top ten items with the most quantity available in the descending order of availability.", "sql": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey ORDER BY T2.ps_availqty DESC LIMIT 10", "source_tables": ["partsupp", "part"]}, "evidence": "items with the most quantity available refer to p_name where MAX(ps_availqty);"}
{"sample_id": 6765, "db_id": "retails", "final": {"question": "Calculate the percentage of part supply that costs more than 500.", "sql": "SELECT CAST(SUM(IIF(ps_supplycost > 500, 1, 0)) AS REAL) * 100 / COUNT(ps_suppkey) FROM partsupp", "source_tables": ["partsupp"]}, "evidence": "DIVIDE(COUNT(ps_suppkey where ps_supplycost > 500)), COUNT(ps_suppkey) as percentage;"}
{"sample_id": 6739, "db_id": "retails", "final": {"question": "Among the suppliers from Middle East region, how many suppliers were in debt?", "sql": "SELECT COUNT(T3.s_name) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey INNER JOIN supplier AS T3 ON T2.n_nationkey = T3.s_nationkey WHERE T3.s_acctbal < 0 AND T1.r_name = 'MIDDLE EAST'", "source_tables": ["region", "supplier", "nation"]}, "evidence": "suppliers from Middle East region refer to s_name where r_name = 'MIDDLE EAST'; in debt refers to s_acctbal < 0;"}
{"sample_id": 6791, "db_id": "retails", "final": {"question": "How many clients from Mozambique required orders with a low priority order?", "sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey INNER JOIN orders AS T3 ON T1.c_custkey = T3.o_custkey WHERE T2.n_name = 'MOZAMBIQUE' AND T3.o_orderpriority = '5-LOW'", "source_tables": ["customer", "nation", "orders"]}, "evidence": "Mozambique refers to n_name = 'MOZAMBIQUE'; low priority order refers to o_orderpriority = '5-LOW'"}
{"sample_id": 6690, "db_id": "retails", "final": {"question": "Which country does supplier No.34 come from?", "sql": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_suppkey = 34", "source_tables": ["supplier", "nation"]}, "evidence": "supplier No.34 refers to s_suppkey = 34; country refers to n_name;"}
{"sample_id": 6803, "db_id": "retails", "final": {"question": "What is the total price and the order priority of order number 33?", "sql": "SELECT o_totalprice, o_orderpriority FROM orders WHERE o_orderkey = 33", "source_tables": ["orders"]}, "evidence": "total price refers to o_totalprice; order priority refers to o_orderpriority; order number 33 refers to o_orderkey = 33"}
{"sample_id": 6714, "db_id": "retails", "final": {"question": "How many suppliers are from Japan?", "sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'JAPAN'", "source_tables": ["customer", "nation"]}, "evidence": "suppliers refer to s_nationkey; Japan is the name of the nation which refers to n_name = 'JAPAN';"}
{"sample_id": 6911, "db_id": "retails", "final": {"question": "What are the total quantities of the items ordered by customer 101660 on 10/5/1995?", "sql": "SELECT SUM(T2.l_quantity) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderdate = '1995-10-05' AND T1.o_custkey = 101660", "source_tables": ["lineitem", "orders"]}, "evidence": "total quantity refers to sum(l_quantity); customer 101660 refers to o_custkey = 101660; on 10/5/1995 refers to o_orderdate = '1995-10-05'"}
{"sample_id": 6899, "db_id": "retails", "final": {"question": "Among the items shipped in 1994 via truck, how many items were returned?", "sql": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1994' AND l_returnflag = 'R' AND l_shipmode = 'TRUCK'", "source_tables": ["lineitem"]}, "evidence": "1994 refers to year(l_shipdate) = 1994; via truck refers to l_shipmode = 'TRUCK'; returned refers to l_returnflag = 'R'"}
{"sample_id": 6703, "db_id": "retails", "final": {"question": "Give the percentage of Japanese suppliers whose account is in debt.", "sql": "SELECT CAST(SUM(IIF(T2.n_name = 'JAPAN', 1, 0)) AS REAL) * 100 / COUNT(T1.s_name) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0", "source_tables": ["supplier", "nation"]}, "evidence": "account is in debt if s_acctbal < 0; DIVIDE(COUNT(s_acctbal < 0 where n_name = 'JAPAN'), COUNT(s_name where n_name = 'JAPAN')) as percentage;"}
{"sample_id": 6815, "db_id": "retails", "final": {"question": "What is the name of the customer number 93697 with the total order price of 191918.92?", "sql": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice = 191918.92 AND T1.o_custkey = 93697", "source_tables": ["customer", "orders"]}, "evidence": "customer name refers to c_name; number 93697 refers to o_custkey = 93697; total order price of 191918.92 refers to o_totalprice = 191918.92"}
{"sample_id": 6852, "db_id": "retails", "final": {"question": "Among the providers in Argentina, which supplier has an account that is in debt?", "sql": "SELECT T1.s_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 AND T2.n_name = 'ARGENTINA'", "source_tables": ["supplier", "nation"]}, "evidence": "Argentina refers to n_name = 'ARGENTINA'; supplier refers to s_name; an account in debt refers to s_acctbal < 0"}
{"sample_id": 6773, "db_id": "retails", "final": {"question": "What percentage of customers from the African region is in the household segment?", "sql": "SELECT CAST(SUM(IIF(T2.r_name = 'AFRICA', 1, 0)) AS REAL) * 100 / COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey INNER JOIN customer AS T3 ON T1.n_nationkey = T3.c_nationkey WHERE T3.c_mktsegment = 'HOUSEHOLD'", "source_tables": ["region", "customer", "nation"]}, "evidence": "DIVIDE(COUNT(c_custkey where c_mktsegment = 'HOUSEHOLD' and r_name = 'AFRICA'), COUNT(c_custkey where r_name = 'AFRICA')) as percentage;"}
{"sample_id": 6749, "db_id": "retails", "final": {"question": "Provide the order comments for at least 5 orders made by customers in the furniture segment.", "sql": "SELECT T1.o_comment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'Furniture' LIMIT 5", "source_tables": ["customer", "orders"]}, "evidence": "order comments refer to o_comment; c_mktsegment = 'Furniture';"}
{"sample_id": 6831, "db_id": "retails", "final": {"question": "What is the region with the most customers?", "sql": "SELECT T.r_name FROM ( SELECT T3.r_name, COUNT(T2.c_custkey) AS num FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey GROUP BY T3.r_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["region", "customer", "nation"]}, "evidence": "region refers to r_name; the most customers refers to max(count(c_custkey))"}
{"sample_id": 6905, "db_id": "retails", "final": {"question": "Which country has the least number of suppliers?", "sql": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey GROUP BY T1.s_nationkey ORDER BY COUNT(T1.s_name) LIMIT 1", "source_tables": ["supplier", "nation"]}, "evidence": "country refers to n_name; the least number of suppliers refers to min(count(s_name))"}
{"sample_id": 6711, "db_id": "retails", "final": {"question": "In which country do most of the customers come from?", "sql": "SELECT T.n_name FROM ( SELECT T2.n_name, COUNT(T1.c_custkey) AS num FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey GROUP BY T2.n_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["customer", "nation"]}, "evidence": "country refers to n_name; most of the customers refer to MAX(COUNT(c_custkey));"}
{"sample_id": 6798, "db_id": "retails", "final": {"question": "What percentage of customers engaged in the household segment are from Iran?", "sql": "SELECT CAST(SUM(IIF(T2.n_name = 'IRAN', 1, 0)) AS REAL) * 100 / COUNT(T2.n_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'HOUSEHOLD'", "source_tables": ["customer", "nation"]}, "evidence": "the household segment refers to c_mktsegment = 'HOUSEHOLD'; Iran is nation name which refers to n_name = 'IRAN'; percentage = divide(count(c_custkey where n_name = 'IRAN'), count(c_custkey)) where c_mktsegment = 'HOUSEHOLD' * 100%"}
{"sample_id": 6742, "db_id": "retails", "final": {"question": "How many orders were shipped in 1994?", "sql": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1994'", "source_tables": ["lineitem"]}, "evidence": "orders shipped in 1994 refer to l_orderkey where year(l_shipdate) = 1994;"}
{"sample_id": 6851, "db_id": "retails", "final": {"question": "List the phone numbers of suppliers from Japan.", "sql": "SELECT T1.s_phone FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'JAPAN'", "source_tables": ["supplier", "nation"]}, "evidence": "phone number refers to s_phone; Japan refers to n_name = 'JAPAN'"}
{"sample_id": 6685, "db_id": "retails", "final": {"question": "What is the total price of all the orders made by customers in Germany?", "sql": "SELECT SUM(T3.o_totalprice) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY'", "source_tables": ["customer", "nation", "orders"]}, "evidence": "orders refer to o_orderkey; total price refers to o_totalprice; Germany is the name of the nation which refers to n_name = 'GERMANY';"}
{"sample_id": 6694, "db_id": "retails", "final": {"question": "Give the number of Moroccan customers whose account is in debt.", "sql": "SELECT COUNT(T1.c_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'MOROCCO' AND T1.c_acctbal < 0", "source_tables": ["customer", "nation"]}, "evidence": "account is in debt if c_acctbal < 0; Moroccan customers refer to c_name WHERE n_name = 'MOROCCO';"}
{"sample_id": 6880, "db_id": "retails", "final": {"question": "What is the total quantity of the part \"hot spring dodger dim light\" ordered in all orders?", "sql": "SELECT SUM(T1.p_partkey) FROM part AS T1 INNER JOIN lineitem AS T2 ON T1.p_partkey = T2.l_partkey WHERE T1.p_name = 'hot spring dodger dim light'", "source_tables": ["part", "lineitem"]}, "evidence": "total quantity refers to sum(l_quantity); part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'"}
{"sample_id": 6820, "db_id": "retails", "final": {"question": "List all the dates of the urgent orders.", "sql": "SELECT o_orderdate FROM orders WHERE o_orderpriority = '1-URGENT'", "source_tables": ["orders"]}, "evidence": "date refers to o_orderdate; urgent order refers to o_orderpriority = '1-URGENT'"}
{"sample_id": 6816, "db_id": "retails", "final": {"question": "Which nation and region does the Customer#000000008 come from?", "sql": "SELECT T1.n_name, T3.r_name FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_name = 'Customer#000000008'", "source_tables": ["region", "customer", "nation"]}, "evidence": "nation refers to n_name; region refers to r_name; Customer#000000008 refers to c_name = 'Customer#000000008'"}
{"sample_id": 6890, "db_id": "retails", "final": {"question": "What is the biggest discount among all orders for the part \"burnished seashell gainsboro navajo chocolate\"?", "sql": "SELECT MAX(T1.l_discount) FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name = 'burnished seashell gainsboro navajo chocolate'", "source_tables": ["lineitem", "part"]}, "evidence": "the biggest discount refers to max(l_discount); part \"burnished seashell gainsboro navajo chocolate\" refers to p_name = 'burnished seashell gainsboro navajo chocolate'"}
{"sample_id": 6900, "db_id": "retails", "final": {"question": "How many customers in the machinery segment are in debt?", "sql": "SELECT COUNT(c_custkey) FROM customer WHERE c_acctbal < 0 AND c_mktsegment = 'MACHINERY'", "source_tables": ["customer"]}, "evidence": "machinery segment refers to c_mktsegment = 'MACHINERY'; in debt refers to c_acctbal < 0"}
{"sample_id": 6813, "db_id": "retails", "final": {"question": "Which region has the lowest number of countries?", "sql": "SELECT T.r_name FROM ( SELECT T1.r_name, COUNT(T2.n_name) AS num FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey GROUP BY T1.r_name ) AS T ORDER BY T.num LIMIT 1", "source_tables": ["region", "nation"]}, "evidence": "region refers to has r_name; the lowest number of countries refers to min(count(n_name))"}
{"sample_id": 6758, "db_id": "retails", "final": {"question": "Among all the customers in Brazil, how many of them have an account balance of less than 1000?", "sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'BRAZIL' AND T1.c_acctbal < 1000", "source_tables": ["customer", "nation"]}, "evidence": "customers refer to c_custkey; Brazil is the name of the nation which refers to n_name = 'BRAZIL'; account balance of less than 1000 refers to c_acctbal < 1000;"}
{"sample_id": 6895, "db_id": "retails", "final": {"question": "What is the discounted price of the part \"burnished seashell gainsboro navajo chocolate\" in order no.1?", "sql": "SELECT T1.l_extendedprice * (1 - T1.l_discount) FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name = 'burnished seashell gainsboro navajo chocolate' AND T1.l_orderkey = 1", "source_tables": ["lineitem", "part"]}, "evidence": "part \"burnished seashell gainsboro navajo chocolate\" refers to p_name = 'burnished seashell gainsboro navajo chocolate'; order no.1 refers to l_orderkey = 1; discounted price refers to multiply(l_extendedprice, subtract(1, l_discount))"}
{"sample_id": 6795, "db_id": "retails", "final": {"question": "How many suppliers from Germany have left a comment with 'carefully regular packages'?", "sql": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'GERMANY' AND T1.s_comment LIKE '%carefully regular packages%'", "source_tables": ["supplier", "nation"]}, "evidence": "Germany is nation name which refers to n_name = 'GERMANY'; comment with 'carefully regular packages' refers to s_comment LIKE 'carefully regular packages%'"}
{"sample_id": 6846, "db_id": "retails", "final": {"question": "Name of customer whose order is applied with the highest discount.", "sql": "SELECT T3.c_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN customer AS T3 ON T1.o_custkey = T3.c_custkey ORDER BY T2.l_discount DESC LIMIT 1", "source_tables": ["lineitem", "customer", "orders"]}, "evidence": "customer name refers to c_name; the highest discount refers to max(l_discount)"}
{"sample_id": 6842, "db_id": "retails", "final": {"question": "Which line item with the highest quantity is shipped by air?", "sql": "SELECT l_linenumber FROM lineitem WHERE l_shipmode = 'AIR' ORDER BY l_quantity DESC LIMIT 1", "source_tables": ["lineitem"]}, "evidence": "line item refers to l_linenumber; the highest quantity refers to max(l_quantity); shipped by air refers to l_shipmode = 'AIR'"}
{"sample_id": 6822, "db_id": "retails", "final": {"question": "What is the largest supplier's account balance?", "sql": "SELECT MAX(s_acctbal) FROM supplier", "source_tables": ["supplier"]}, "evidence": "the largest supplier's account balance refers to max(s_acctbal)"}
{"sample_id": 6897, "db_id": "retails", "final": {"question": "In 1997, how many orders were shipped via mail?", "sql": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1997' AND l_shipmode = 'MAIL'", "source_tables": ["lineitem"]}, "evidence": "1997 refers to year(l_shipdate) = 1997; shipped via mail refers to l_shipmode = 'MAIL'"}
{"sample_id": 6670, "db_id": "retails", "final": {"question": "How many kinds of items are returned in order no.5?", "sql": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_orderkey = 5 AND l_returnflag = 'R'", "source_tables": ["lineitem"]}, "evidence": "returned refer to l_returnflag = 'R'; order no.5 refers to l_orderkey = 5; kinds of items refer to l_linenumber;"}
{"sample_id": 6859, "db_id": "retails", "final": {"question": "How many parts have a retail price of over 1900?", "sql": "SELECT COUNT(p_partkey) FROM part WHERE p_retailprice > 1900", "source_tables": ["part"]}, "evidence": "a retail price of over 1900 refers to p_retailprice > 1900"}
{"sample_id": 6704, "db_id": "retails", "final": {"question": "What is the name of the customer with the highest amount of debt?", "sql": "SELECT c_name FROM customer WHERE c_acctbal = ( SELECT MIN(c_acctbal) FROM customer )", "source_tables": ["customer"]}, "evidence": "customer with the highest amount of debt refers to c_name where MIN(c_acctbal);"}
{"sample_id": 6906, "db_id": "retails", "final": {"question": "How much is the part supply cost for the medium metallic grey dodger linen?", "sql": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_name = 'medium metallic grey dodger linen'", "source_tables": ["partsupp", "part"]}, "evidence": "part supply cost refers to ps_supplycost; medium metallic grey dodger linen refers to p_name = 'medium metallic grey dodger linen'"}
{"sample_id": 6757, "db_id": "retails", "final": {"question": "Provide the nation and region of the customer with the address of wH55UnX7 VI?", "sql": "SELECT T1.n_name, T3.r_name FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_address = 'wH55UnX7 VI'", "source_tables": ["region", "customer", "nation"]}, "evidence": "nation refers to n_name; region refers to r_name; address of wH55UnX7 VI refers to c_address = 'wH55UnX7 VI';"}
{"sample_id": 6794, "db_id": "retails", "final": {"question": "Indicate the name of the parts without discount.", "sql": "SELECT T3.p_name FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T2.l_discount = 0.0000", "source_tables": ["partsupp", "lineitem", "part"]}, "evidence": "name of the part refers to p_name; without discount refers to l_discount = 0.0000"}
{"sample_id": 6785, "db_id": "retails", "final": {"question": "How many suppliers from Egypt have a debit balance?", "sql": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 AND T2.n_name = 'EGYPT'", "source_tables": ["supplier", "nation"]}, "evidence": "suppliers refer to s_suppkey; Egypt is the name of the nation which refers to n_name = 'EGYPT'; the balance is in debt if s_acctbal < 0;"}
{"sample_id": 6910, "db_id": "retails", "final": {"question": "Who is the clerk in charge of handling the item with the highest amount of extended price?", "sql": "SELECT T1.o_clerk FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey ORDER BY T2.l_extendedprice DESC LIMIT 1", "source_tables": ["lineitem", "orders"]}, "evidence": "clerk refers to o_clerk; the highest amount of extended price refers to max(l_extendedprice)"}
{"sample_id": 6861, "db_id": "retails", "final": {"question": "Please list all the brands that contain a part under the type \"promo brushed steel\".", "sql": "SELECT p_brand FROM part WHERE p_type = 'PROMO BRUSHED STEEL'", "source_tables": ["part"]}, "evidence": "brand refers to p_brand; type \"promo brushed steel\" refers to p_type = 'PROMO BRUSHED STEEL'"}
{"sample_id": 6990, "db_id": "ice_hockey_draft", "final": {"question": "How many playoffs did Per Mars participate in?", "sql": "SELECT SUM(T2.GP) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.PlayerName = 'Per Mars' AND T2.GAMETYPE = 'Playoffs'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "playoffs refers to GAMETYPE = 'Playoffs';"}
{"sample_id": 6982, "db_id": "ice_hockey_draft", "final": {"question": "How many teams did the heaviest player drafted by Arizona Coyotes have played for?", "sql": "SELECT COUNT(T2.TEAM) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN weight_info AS T3 ON T1.weight = T3.weight_id WHERE T1.overallby = 'Arizona Coyotes' ORDER BY T3.weight_in_lbs DESC LIMIT 1", "source_tables": ["playerinfo", "weight_info", "seasonstatus"]}, "evidence": "heaviest player refers to MAX(weight_in_lb); drafted by Arizona Coyotes refers to overallby = 'Arizona Coyotes';"}
{"sample_id": 6948, "db_id": "ice_hockey_draft", "final": {"question": "Name the player who has the most NHL points in draft year.", "sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.P = ( SELECT MAX(P) FROM SeasonStatus )", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "name of the player refers to PlayerName; most NHL points in draft year refers to MAX(P);"}
{"sample_id": 6992, "db_id": "ice_hockey_draft", "final": {"question": "Which country do most players of team Plymouth Whalers come from?", "sql": "SELECT T.nation FROM ( SELECT T1.nation, COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.TEAM = 'Plymouth Whalers' GROUP BY T1.nation ORDER BY COUNT(T1.ELITEID) DESC LIMIT 1 ) AS T", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "country and nation are synonyms; country where most players come from refers to MAX(COUNT(nation WHERE TEAM = 'Plymouth Whalers')); players refers to PlayerName; team Plymouth Whalers refers to TEAM = 'Plymouth Whalers';"}
{"sample_id": 6951, "db_id": "ice_hockey_draft", "final": {"question": "Name the player and his team who made the playoffs in the 2006-2007 season of SuperElit league with the highest points.", "sql": "SELECT T2.PlayerName, T1.TEAM FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2006-2007' AND T1.GAMETYPE = 'Playoffs' AND T1.LEAGUE = 'SuperElit' ORDER BY T1.P DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "name of the player refers to PlayerName; playoffs refers to GAMETYPE = 'Playoffs'; highest points refers to MAX(P); 2006-2007 season refers to SEASON = '2006-2007'; SuperElit league refers to LEAGUE = 'SuperElit';"}
{"sample_id": 6915, "db_id": "ice_hockey_draft", "final": {"question": "What is the height of David Bornhammar in inches?", "sql": "SELECT T2.height_in_inch FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'David Bornhammar'", "source_tables": ["playerinfo", "height_info"]}, "evidence": "heigh in inches refers to height_in_inch;"}
{"sample_id": 6929, "db_id": "ice_hockey_draft", "final": {"question": "What is the weight in pounds of the heaviest player?", "sql": "SELECT MAX(T2.weight_in_lbs) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "weight in pounds refers to weight_in_lbs; heaviest player refers to MAX(weight_in_lbs);"}
{"sample_id": 6949, "db_id": "ice_hockey_draft", "final": {"question": "Among all players drafted by the Toronto Maple Leafs, identify the percentage who are from Eastern Europe.", "sql": "SELECT CAST(COUNT(CASE WHEN nation IN ('Belarus', 'Czech Rep.', 'Slovakia', 'Ukraine') THEN ELITEID ELSE NULL END) AS REAL) * 100 / COUNT(ELITEID) FROM PlayerInfo WHERE overallby = 'Toronto Maple Leafs'", "source_tables": ["playerinfo"]}, "evidence": "players refers to PlayerName; drafted by the Toronto Maple Leafs refers to overallby = 'Toronto Maple Leafs'; percentage = MULTIPLY(DIVIDE(SUM(nation = 'Eastern Europe'), COUNT(ELITEID) WHERE overallby = 'Toronto Maple Leafs'), 100); from Eastern Europe refers to nation in ('Belarus', 'Bulgaria', 'Czech Republic', 'Hungary', 'Moldova', 'Poland', 'Romania', 'Slovakia', 'Ukraine'); countries in a continent can be identified by referring to https://worldpopulationreview.com/country-rankings/list-of-countries-by-continent;"}
{"sample_id": 6979, "db_id": "ice_hockey_draft", "final": {"question": "List the names of all players from Avangard Omsk who played in the 2000-2001 season of the International league that have no goals in draft year.", "sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.LEAGUE = 'International' AND T1.TEAM = 'Czech Republic (all)' AND T1.G = 0", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "names of the players refers to PlayerName; Avangard Omsk refers to TEAM = 'Avangard Omsk'; International league refers to LEAGUE = 'International'; no goals in draft year refers to G = 0; 2000-2001 season refers to SEASON = '2000-2001';"}
{"sample_id": 6964, "db_id": "ice_hockey_draft", "final": {"question": "List out the nation of players who played for the 1997-1998 season .", "sql": "SELECT DISTINCT T2.nation FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '1997-1998'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "players refers to PlayerName; 1997-1998 season refers to SEASON = '1997-1998';"}
{"sample_id": 6980, "db_id": "ice_hockey_draft", "final": {"question": "Who is the oldest player who played for Avangard Omsk during the regular season in 2000-2001?", "sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.GAMETYPE = 'Regular Season' AND T1.TEAM = 'Avangard Omsk' ORDER BY T2.birthdate ASC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "oldest player refers to MIN(birthdate); Avangard Omsk refers to TEAM = 'Avangard Omsk'; regular season refers to GAMETYPE = 'Regular Season'; 2000-2001 season refers to SEASON = '2000-2001';\n"}
{"sample_id": 6919, "db_id": "ice_hockey_draft", "final": {"question": "How much does David Bornhammar weigh in kilograms?", "sql": "SELECT T2.weight_in_kg FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.PlayerName = 'David Bornhammar'", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "weigh in kilograms refers to weight_in_kg;"}
{"sample_id": 6924, "db_id": "ice_hockey_draft", "final": {"question": "How much taller is David Bornhammar than Pauli Levokari in centimeters?", "sql": "SELECT ( SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'David Bornhammar' ) - ( SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'Pauli Levokari' )", "source_tables": ["playerinfo", "height_info"]}, "evidence": "how much taller = SUBTRACT(SUM(height_in_cm WHERE PlayerName = 'David Bornhammar'), SUM(height_in_cm WHERE PlayerName = 'Pauli Levokari')); height in centimeters refers to height_in_cm;"}
{"sample_id": 6953, "db_id": "ice_hockey_draft", "final": {"question": "How tall is the player from Yale University who picked up 28 penalty minutes in the 2005-2006 season?", "sql": "SELECT T3.height_in_cm FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T2.height = T3.height_id WHERE T1.SEASON = '2005-2006' AND T1.TEAM = 'Yale Univ.' AND T1.PIM = 28", "source_tables": ["playerinfo", "seasonstatus", "height_info"]}, "evidence": "how tall refers to height_in_cm; Yale University refers to TEAM = 'Yale Univ.'; 28 penalty minutes refers to PIM = '28'; 2005-2006 season refers to SEASON = '2005-2006';"}
{"sample_id": 6968, "db_id": "ice_hockey_draft", "final": {"question": "How many players were born in 1982 and have a height above 182cm?", "sql": "SELECT COUNT(T2.ELITEID) FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height WHERE T1.height_in_cm > 182 AND strftime('%Y', T2.birthdate) = '1982'", "source_tables": ["playerinfo", "height_info"]}, "evidence": "born in 1982 refers to birthyear = 1982; height above 182cm refers to height_in_cm > 182 ;"}
{"sample_id": 6932, "db_id": "ice_hockey_draft", "final": {"question": "What is the height in centimeter of the tallest player born in Edmonton, Alberta, Canada?", "sql": "SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.birthplace = 'Edmonton, AB, CAN' ORDER BY T2.height_in_cm DESC LIMIT 1", "source_tables": ["playerinfo", "height_info"]}, "evidence": "height in centimeter refers to height_in_cm; tallest player refers to MAX(height_in_cm); born in Edmonton, Alberta, Canada refers to birthplace = 'Edmonton, AB, CAN';"}
{"sample_id": 6944, "db_id": "ice_hockey_draft", "final": {"question": "Name the Chilliwack Chiefs players who have scored 100 points or more in the NHL.", "sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.TEAM = 'Chilliwack Chiefs' AND T1.P >= 100", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "name of the player refers to PlayerName; Chilliwack Chiefs refers to TEAM = 'Chilliwack Chiefs'; scored 100 points or more in the NHL refers to P > 100;"}
{"sample_id": 7055, "db_id": "works_cycles", "final": {"question": "For the employee who has been hired the latest, what is his or her pay rate?", "sql": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T2.HireDate DESC LIMIT 1", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "hired the latest refers to max(HireDate)"}
{"sample_id": 7455, "db_id": "works_cycles", "final": {"question": "How many days did it take to end the work order \"425\"?", "sql": "SELECT 365 * (STRFTIME('%Y', ActualEndDate) - STRFTIME('%Y', ActualStartDate)) + 30 * (STRFTIME('%m', ActualEndDate) - STRFTIME('%m', ActualStartDate)) + STRFTIME('%d', ActualEndDate) - STRFTIME('%d', ActualStartDate) FROM WorkOrderRouting WHERE WorkOrderID = 425", "source_tables": ["workorderrouting"]}, "evidence": "days to end a work order = SUBTRACT(ActualEndDate, ActualStartDate);"}
{"sample_id": 7279, "db_id": "works_cycles", "final": {"question": "How many products are out of stock?", "sql": "SELECT COUNT(ProductID) FROM ProductVendor WHERE OnOrderQty = 0", "source_tables": ["productvendor"]}, "evidence": "out of stock product refers to OnOrderQty = 0;"}
{"sample_id": 7108, "db_id": "works_cycles", "final": {"question": "How many vendors only consented to move on with the 500 to 15000 piece order in terms of quality?", "sql": "SELECT COUNT(*) FROM ProductVendor WHERE MinOrderQty > 500 AND MaxOrderQty < 15000", "source_tables": ["productvendor"]}, "evidence": "Vendor refers to BusinessEntityId; 500 to 15000 piece order refers to MinOrderQty > 500 and MaxOrderQty < 15000"}
{"sample_id": 7206, "db_id": "works_cycles", "final": {"question": "How much is the total bonus received by sales person and what is the percentage of it against the projected yearly sales quota in 2013?", "sql": "SELECT SUM(T1.Bonus) , CAST(SUM(T1.Bonus) AS REAL) * 100 / SUM(T1.SalesQuota) FROM SalesPerson AS T1 INNER JOIN SalesPersonQuotaHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE STRFTIME('%Y', T2.QuotaDate) = '2013'", "source_tables": ["salespersonquotahistory", "salesperson"]}, "evidence": "projected yearly sales quota refers to SalesQuota; projected yearly sales quota in 2013 refers to year(QuotaDate) = 2013; percentage = (MULTIPLY(DIVIDE(SUM(Bonus)), (SUM(SalesQuota))) as percentage;"}
{"sample_id": 7295, "db_id": "works_cycles", "final": {"question": "Please list the website purchasing links of the vendors from whom the product Hex Nut 5 can be purchased.", "sql": "SELECT T3.PurchasingWebServiceURL FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Name = 'Hex Nut 5'", "source_tables": ["vendor", "productvendor", "product"]}, "evidence": "website purchasing link refers to PurchasingWebServiceURL"}
{"sample_id": 7274, "db_id": "works_cycles", "final": {"question": "What is the average lead time of product ID 843? Calculate for its profit on net and indicate the full location to which the vendor is located.", "sql": "SELECT T1.AverageLeadTime, T1.LastReceiptCost - T1.StandardPrice, T4.AddressLine1, T4.AddressLine2 , T4.City, T4.PostalCode FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN BusinessEntityAddress AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID INNER JOIN Address AS T4 ON T3.AddressID = T4.AddressID WHERE T1.ProductID = 843", "source_tables": ["vendor", "address", "productvendor", "businessentityaddress"]}, "evidence": "Profit on net = SUBTRACT(LastReceiptCost, StandardPrice); full location = AddressLine1+AddressLine2+City+PostalCode;"}
{"sample_id": 7120, "db_id": "works_cycles", "final": {"question": "What is the forename and birthdate of person number 18?", "sql": "SELECT T1.FirstName, T2.BirthDate FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.BusinessEntityID = 18", "source_tables": ["employee", "person"]}, "evidence": "person number 18 refers to BusinessEntityID = 18; forename refers to FirstName"}
{"sample_id": 7248, "db_id": "works_cycles", "final": {"question": "What are the top 5 types of products with the highest selling price? ?", "sql": "SELECT Name FROM Product ORDER BY ListPrice DESC LIMIT 5", "source_tables": ["product"]}, "evidence": "highest selling price refers to MAX(ListPrice);"}
{"sample_id": 7110, "db_id": "works_cycles", "final": {"question": "Please list the family names of any employees whose middle names begin with C.", "sql": "SELECT LastName FROM Person WHERE PersonType = 'EM' AND MiddleName LIKE 'C%'", "source_tables": ["person"]}, "evidence": "family names refers to Last name; employee refers to PersonType = 'EM'; MiddleName starts with 'C'"}
{"sample_id": 7156, "db_id": "works_cycles", "final": {"question": "For the on going assembly item Component ID No. 494, what's the Unit measure for it?", "sql": "SELECT T2.Name FROM BillOfMaterials AS T1 INNER JOIN UnitMeasure AS T2 ON T1.UnitMeasureCode = T2.UnitMeasureCode WHERE T1.ComponentID = 494 AND T1.EndDate IS NULL GROUP BY T2.name", "source_tables": ["billofmaterials", "unitmeasure"]}, "evidence": "On going assembly item means the assembly item haven't been finished, therefore EndDate is null"}
{"sample_id": 7029, "db_id": "works_cycles", "final": {"question": "Which customer has the highest subtotal amount of sales orders whose assigned to the salesperson with the highest bonus?", "sql": "SELECT T1.CustomerID FROM SalesOrderHeader AS T1 INNER JOIN SalesPerson AS T2 ON T1.SalesPersonID = T2.BusinessEntityID ORDER BY T1.SubTotal DESC LIMIT 1", "source_tables": ["salesperson", "salesorderheader"]}, "evidence": "highest subtotal amount of sales order refers to max(SubTotal);"}
{"sample_id": 7096, "db_id": "works_cycles", "final": {"question": "Sum the total number of products rejected for having a trim length that is too long.", "sql": "SELECT SUM(T2.ScrappedQty) FROM ScrapReason AS T1 INNER JOIN WorkOrder AS T2 ON T1.ScrapReasonID = T2.ScrapReasonID WHERE T1.Name = 'Trim length too long'", "source_tables": ["scrapreason", "workorder"]}, "evidence": "number of product rejected refers to ScrapedQty; trim length that is too long refers to scrap reason where Name = 'Trim length too long'"}
{"sample_id": 7040, "db_id": "works_cycles", "final": {"question": "How frequently do the employee with the least number of sick leave hours get paid?", "sql": "SELECT T2.PayFrequency FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.SickLeaveHours ASC LIMIT 1", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "least number of sick leave refers to min(SickLeaveHours); PayFrequency = 1 means \u2018Salary received monthly\u2019; PayFrequency = 2 means \u2018Salary received biweekly';"}
{"sample_id": 7124, "db_id": "works_cycles", "final": {"question": "How many people work in the finance department?", "sql": "SELECT COUNT(T2.BusinessEntityID) FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.DepartmentID = T2.DepartmentID WHERE T1.Name = 'Finance'", "source_tables": ["employeedepartmenthistory", "department"]}, "evidence": ""}
{"sample_id": 7211, "db_id": "works_cycles", "final": {"question": "How many products with the id \"989\" were sold in August 2013?", "sql": "SELECT SUM(Quantity) FROM TransactionHistory WHERE TransactionDate LIKE '2013-08%' AND TransactionType = 'S' AND ProductID = 989", "source_tables": ["transactionhistory"]}, "evidence": "TransactionDate BETWEEN '2013-08-01' AND '2013-08-30'; sold in refers to TransactionType = 'S' which means SalesOrder;"}
{"sample_id": 7020, "db_id": "works_cycles", "final": {"question": "Among the low quality product, which product has the highest line total? List the product name and its line total?", "sql": "SELECT T1.Name, T2.LineTotal FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE Class = 'L' ORDER BY OrderQty * UnitPrice DESC LIMIT 1", "source_tables": ["purchaseorderdetail", "product"]}, "evidence": "Low quality refers to the product's quality class, therefore Class = 'L'"}
{"sample_id": 7439, "db_id": "works_cycles", "final": {"question": "What is the price for the product with the id \"912\"?", "sql": "SELECT ListPrice FROM ProductListPriceHistory WHERE ProductID = 912", "source_tables": ["productlistpricehistory"]}, "evidence": "price refers to ListPrice;"}
{"sample_id": 7060, "db_id": "works_cycles", "final": {"question": "How many employees with a pay rate of over 35 have more than 10 sick leave hours?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.SickLeaveHours > 10 AND T1.Rate > 35", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "more than 10 sick leave hours refers to SickLeaveHours>10; pay rate over 35 refers to Rate>35;"}
{"sample_id": 7097, "db_id": "works_cycles", "final": {"question": "Calculate the total quantity of purchased product that has been prepared by employee number 257 and is in pending shipment status.", "sql": "SELECT SUM(T2.OrderQty) FROM PurchaseOrderHeader AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.PurchaseOrderID = T2.PurchaseOrderID WHERE T1.Status = 1", "source_tables": ["purchaseorderdetail", "purchaseorderheader"]}, "evidence": "employee number 257 refers to EmployeeID = 257; pending shipment status refers to Status = 3"}
{"sample_id": 7317, "db_id": "works_cycles", "final": {"question": "Other than the Chief Executive Officer, who is the employee who has the highest payrate? State the rate.", "sql": "SELECT T2.FirstName, T2.LastName FROM EmployeePayHistory AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Employee AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T3.JobTitle NOT LIKE 'Chief Executive Officer' ORDER BY T1.Rate DESC LIMIT 1", "source_tables": ["employee", "employeepayhistory", "person"]}, "evidence": "other than the Chief Executive Officer refers to JobTitle! = 'Chief Executive Officer'; highest payrate refers to max(Rate)"}
{"sample_id": 7184, "db_id": "works_cycles", "final": {"question": "What is the name of product purchased with transaction type P?", "sql": "SELECT ProductID FROM Product WHERE ProductID IN ( SELECT ProductID FROM TransactionHistory WHERE TransactionType = 'P' )", "source_tables": ["transactionhistory", "product"]}, "evidence": ""}
{"sample_id": 7320, "db_id": "works_cycles", "final": {"question": "Which vendor gives the best profit on net for product ID 342?", "sql": "SELECT T1.Name FROM Vendor AS T1 INNER JOIN ProductVendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.ProductID = 342 ORDER BY T2.LastReceiptCost - T2.StandardPrice DESC LIMIT 1", "source_tables": ["vendor", "productvendor"]}, "evidence": "profit on net = subtract(LastReceiptCost, StandardPrice); best profit on net refers to max(subtract(LastReceiptCost, StandardPrice))"}
{"sample_id": 7081, "db_id": "works_cycles", "final": {"question": "Average cost of purchase orders made during the first six months of 2012.", "sql": "SELECT CAST(SUM(ActualCost) AS REAL) / COUNT(TransactionID) FROM TransactionHistoryArchive WHERE TransactionType = 'P' AND TransactionDate >= '2012-01-01' AND TransactionDate < '2012-07-01'", "source_tables": ["transactionhistoryarchive"]}, "evidence": "purchase orders refers to TransactionType = 'P'; first six months of 2012 refers to TransactionDate bewteen '2012-01-01'and '2012-06-30'; average = DIVIDE(ActualCost where TransactionType = 'P', count(TransactionID))\n"}
{"sample_id": 7386, "db_id": "works_cycles", "final": {"question": "What are the full names of the 10 youngest married male production technicians?", "sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle LIKE 'Production Technician%' AND T1.Gender = 'M' AND T1.MaritalStatus = 'M' ORDER BY T1.BirthDate DESC LIMIT 10", "source_tables": ["employee", "person"]}, "evidence": "youngest refers to latest BirthDate; married refers to MaritalStatus = 'M'; production technician is a JobTitle; full name = FirstName+MiddleName+LastName;"}
{"sample_id": 7022, "db_id": "works_cycles", "final": {"question": "List all products with minimum order quantity of 100 and order them by product name in descending order.", "sql": "SELECT DISTINCT T1.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID WHERE T2.MinOrderQty = 100 ORDER BY T1.Name DESC", "source_tables": ["product", "productvendor"]}, "evidence": "miinimum order quantity refers to MinOrderQty = 100"}
{"sample_id": 7371, "db_id": "works_cycles", "final": {"question": "What time does the company's night shift begin? Indicate the answer in regular form.", "sql": "SELECT StartTime FROM Shift WHERE Name = 'Night'", "source_tables": ["shift"]}, "evidence": "Night shift refers to Name = 'Night';"}
{"sample_id": 7242, "db_id": "works_cycles", "final": {"question": "Which Production Technician has the highest pay rate?", "sql": "SELECT T1.BusinessEntityID FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle LIKE 'Production Technician%' ORDER BY T2.Rate DESC LIMIT 1", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "highest pay rate refers to MAX(Rate);"}
{"sample_id": 7440, "db_id": "works_cycles", "final": {"question": "Is there a work order where the planned cost is different from the actual cost?", "sql": "SELECT CASE WHEN ActualCost = PlannedCost THEN 'No' ELSE 'Yes' END FROM WorkOrderRouting", "source_tables": ["workorderrouting"]}, "evidence": "planned cost is different from actual cost refers to ActualCost ! = PlannedCost;"}
{"sample_id": 7063, "db_id": "works_cycles", "final": {"question": "What is the job position of the oldest employee?", "sql": "SELECT T2.PersonType FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.BirthDate ASC LIMIT 1", "source_tables": ["employee", "person"]}, "evidence": "Oldest employee refers to Max ( Subtract((now())-BirthDate));"}
{"sample_id": 7330, "db_id": "works_cycles", "final": {"question": "Names the Sales Representative with the highest year to date sales.", "sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM SalesPerson AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.SalesYTD DESC LIMIT 1", "source_tables": ["salesperson", "person"]}, "evidence": "Highest year to date sales refers to Max(SalesYTD);"}
{"sample_id": 7018, "db_id": "works_cycles", "final": {"question": "List all product names and its product line for all purchase order with order quantity of 5000 or more.", "sql": "SELECT T1.Name, T1.ProductLine FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderQty > 4999", "source_tables": ["purchaseorderdetail", "product"]}, "evidence": "Purchase order with order quantity of 5000 or more refers to OrderQty> = 5000"}
{"sample_id": 7126, "db_id": "works_cycles", "final": {"question": "How many accounts are in Bothell as opposed to Kenmore? What is the name of the State that comprises these two cities?", "sql": "SELECT SUM(IIF(T1.city = 'Bothell', 1, 0)) - SUM(IIF(T1.city = 'Kenmore', 1, 0)) , stateprovincecode FROM Address AS T1 INNER JOIN StateProvince AS T2 ON T1.stateprovinceid = T2.stateprovinceid GROUP BY stateprovincecode", "source_tables": ["stateprovince", "address"]}, "evidence": "SUBTRACT(count(city = 'Bothell'), count(city = 'Kenmore'))"}
{"sample_id": 7197, "db_id": "works_cycles", "final": {"question": "How many employees do not have any suffix and what are their organization level?", "sql": "SELECT COUNT(T3.BusinessEntityID) FROM ( SELECT T1.BusinessEntityID FROM Employee AS T1 INNER JOIN Person AS T2 USING (BusinessEntityID) WHERE T2.Suffix IS NULL GROUP BY T1.BusinessEntityID ) AS T3", "source_tables": ["employee", "person"]}, "evidence": "Do not have any suffix means Suffix is null"}
{"sample_id": 7178, "db_id": "works_cycles", "final": {"question": "For all phone numbers, what percentage of the total is cell phone?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Name = 'Cell' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Name) FROM PersonPhone AS T1 INNER JOIN PhoneNumberType AS T2 ON T1.PhoneNumberTypeID = T2.PhoneNumberTypeID", "source_tables": ["personphone", "phonenumbertype"]}, "evidence": "Cellphone referes to the name of the phone type, therefore PhoneNumberTypeID = 1; DIVIDE(COUNT(PhoneNumberTypeID = 1), (COUNT(PhoneNumberTypeID)) as percentage"}
{"sample_id": 7183, "db_id": "works_cycles", "final": {"question": "Which product ID do not have any work order ID?", "sql": "SELECT ProductID FROM Product WHERE ProductID NOT IN ( SELECT T1.ProductID FROM Product AS T1 INNER JOIN WorkOrder AS T2 ON T1.ProductID = T2.ProductID )", "source_tables": ["product", "workorder"]}, "evidence": "Do not have any work order ID means WorkOrderID is null"}
{"sample_id": 7299, "db_id": "works_cycles", "final": {"question": "Among the products from the mountain product line, how many of them are sold by over 2 vendors?", "sql": "SELECT SUM(CASE WHEN T1.ProductLine = 'M' THEN 1 ELSE 0 END) FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID GROUP BY T1.ProductID HAVING COUNT(T1.Name) > 2", "source_tables": ["vendor", "product", "productvendor"]}, "evidence": "mountain product line refers to ProductLine = 'M'; sold by over 5 vendors refers to count(Name)>5"}
{"sample_id": 7334, "db_id": "works_cycles", "final": {"question": "Find the vendor with the least average lead time for Product ID 348.", "sql": "SELECT T2.Name FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.ProductID = 348 ORDER BY T1.AverageLeadTime ASC LIMIT 1", "source_tables": ["vendor", "productvendor"]}, "evidence": ""}
{"sample_id": 7252, "db_id": "works_cycles", "final": {"question": "How many departments did Sheela Ward work in between 1/1/2011 to 12/31/2012", "sql": "SELECT COUNT(T3.Name) FROM Person AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T1.FirstName = 'Sheela' AND T1.LastName = 'Word' AND STRFTIME('%Y', T3.ModifiedDate) BETWEEN '2011' AND '2012'", "source_tables": ["employeedepartmenthistory", "department", "person"]}, "evidence": "number of departments an employee works for between 2011 and 2012 refers to year(StartDate) BETWEEN 2011 AND 2012 and year(EndDate) BETWEEN 2011 and 2012;"}
{"sample_id": 7007, "db_id": "works_cycles", "final": {"question": "How many transactions are there for product under the Mountain line?", "sql": "SELECT COUNT(T2.TransactionID) FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductLine = 'M'", "source_tables": ["transactionhistory", "product"]}, "evidence": "The Mountain line refers to the product line, therefore ProductLine = 'M'"}
{"sample_id": 7336, "db_id": "works_cycles", "final": {"question": "Calculate the average age of employee in each department and state which department has the youngest employees.", "sql": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.BirthDate) + 1 , T3.Name FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 USING (BusinessEntityID) INNER JOIN Department AS T3 USING (DepartmentID) ORDER BY T1.BirthDate DESC LIMIT 1", "source_tables": ["department", "employeedepartmenthistory", "employee"]}, "evidence": "Average = Divide(Sum(Substract(year(@today),year(BirthDate))),Count(BusinessEntityID) by each Department ID; youngest employee refers to Min(BirthDate);"}
{"sample_id": 7407, "db_id": "works_cycles", "final": {"question": "Where can I find the Valley Bicycle Specialists store?", "sql": "SELECT T2.AddressLine1, T2.AddressLine2 FROM BusinessEntityAddress AS T1 INNER JOIN Address AS T2 ON T1.AddressID = T2.AddressID INNER JOIN Store AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T3.Name = 'Valley Bicycle Specialists'", "source_tables": ["store", "address", "businessentityaddress"]}, "evidence": "Valley Bicycle Specialists is a name of store; full address = AddressLine1+AddressLine2;"}
{"sample_id": 7286, "db_id": "works_cycles", "final": {"question": "Please list the names of the products that get over 10 reviews and a salable.", "sql": "SELECT T2.NAME FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.FinishedGoodsFlag = 1 GROUP BY T2.NAME ORDER BY COUNT(T1.comments) > 10", "source_tables": ["productreview", "product"]}, "evidence": "salable product refers to FinishedGoodsFlag = 1; over 10 reviews refers to count(comments)>10"}
{"sample_id": 7365, "db_id": "works_cycles", "final": {"question": "What is the difference in percentage between the product descriptions written in Arabic and Thai?", "sql": "SELECT CAST(SUM(CASE WHEN T1.Name = 'Arabic' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.Name = 'Thai' THEN 1 ELSE 0 END) FROM Culture AS T1 INNER JOIN ProductModelProductDescriptionCulture AS T2 ON T1.CultureID = T2.CultureID", "source_tables": ["productmodelproductdescriptionculture", "culture"]}, "evidence": "Arabic and Thai are language names refers to name = 'Arabic'and name = 'Thai'; Differencce in percentage = Subtract(((Count(CultureID(name = 'Arabic'))/Count(CultureID))*100),((Count(CultureID(name = 'Thai'))/Count(CultureID))*100)));"}
{"sample_id": 7457, "db_id": "works_cycles", "final": {"question": "What is the cost for the product \"847\"?", "sql": "SELECT StandardCost FROM ProductCostHistory WHERE ProductID = 847", "source_tables": ["productcosthistory"]}, "evidence": "cost refers to StandardCost;"}
{"sample_id": 7050, "db_id": "works_cycles", "final": {"question": "How many product maintenance documents are private?", "sql": "SELECT COUNT(DocumentNode) FROM Document WHERE DocumentSummary IS NULL", "source_tables": ["document"]}, "evidence": "product maintenance documents are private refers to DocumentSummary = null"}
{"sample_id": 7306, "db_id": "works_cycles", "final": {"question": "What is the product that has the highest average rating from the mountain product line?", "sql": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ProductLine = 'M' GROUP BY T2.Name ORDER BY CAST(SUM(T1.Rating) AS REAL) / COUNT(T1.ProductID) DESC LIMIT 1", "source_tables": ["productreview", "product"]}, "evidence": "mountain product line refers to ProductLine = 'M'; highest average rating = max(divide(sum(Rating), count(ProductReview)))"}
{"sample_id": 7066, "db_id": "works_cycles", "final": {"question": "Among the employees who have more than 10 hours of sick leave, how many of them wish to receive e-mail promotions?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 1 AND T1.SickLeaveHours > 10", "source_tables": ["employee", "person"]}, "evidence": "Contact does wish to receive e-mail promotions refers to EmailPromotion = (1,2); more than 10 hours of sick leave refer to SickLeaveHours >10;"}
{"sample_id": 7192, "db_id": "works_cycles", "final": {"question": "Among the sales people, who are hired prior to 2010?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP' AND SUBSTR(T1.HireDate, 0, 4) < 2010", "source_tables": ["employee", "person"]}, "evidence": "Sales people refer to PersonType = 'SP'; hired prior to 2010 means the person's hiring date was before 2010, therefore year(HireDate)<2010"}
{"sample_id": 7461, "db_id": "works_cycles", "final": {"question": "How many products using \"roadster_black_small.gif\" as the thumbnail photo?", "sql": "SELECT COUNT(DISTINCT T2.ProductID) FROM ProductPhoto AS T1 INNER JOIN ProductProductPhoto AS T2 ON T1.ProductPhotoID = T2.ProductPhotoID WHERE T1.LargePhotoFileName = 'roadster_black_large.gif'", "source_tables": ["productproductphoto", "productphoto"]}, "evidence": "products using roadster_black_small.gif as the thumbnail photo refers to ThumbnailPhotoFileName = 'roadster_black_small.gif';"}
{"sample_id": 7297, "db_id": "works_cycles", "final": {"question": "How many high-class products are sold by preferred vendors?", "sql": "SELECT COUNT(T2.Name) FROM ProductVendor AS T1 INNER JOIN Product AS T2 USING (ProductID) INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T3.PreferredVendorStatus = 1 AND T2.Class = 'M'", "source_tables": ["vendor", "productvendor", "product"]}, "evidence": "preferred vendor refers to PreferredVendorStatus = 1; high class refers to Class = 'H'"}
{"sample_id": 7264, "db_id": "works_cycles", "final": {"question": "What was the first job position that the company needed, and who was hired? Indicate his/her full name.", "sql": "SELECT T1.JobTitle, T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.HireDate LIMIT 1", "source_tables": ["employee", "person"]}, "evidence": "job position and job title are synonyms; full name = FirstName+MiddleName+LastName;"}
{"sample_id": 7466, "db_id": "works_cycles", "final": {"question": "Who owns the email address \"regina7@adventure-works.com\"?", "sql": "SELECT T2.FirstName, T2.LastName FROM EmailAddress AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.EmailAddress = 'regina7@adventure-works.com'", "source_tables": ["emailaddress", "person"]}, "evidence": ""}
{"sample_id": 7442, "db_id": "works_cycles", "final": {"question": "List all the names of the products with the price of more than 1000$.", "sql": "SELECT DISTINCT T2.Name FROM ProductListPriceHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ListPrice > 1000", "source_tables": ["productlistpricehistory", "product"]}, "evidence": "ListPrice>1000;"}
{"sample_id": 7249, "db_id": "works_cycles", "final": {"question": "When did the company hired its first Accountant?", "sql": "SELECT MIN(HireDate) FROM Employee WHERE JobTitle = 'Accountant'", "source_tables": ["employee"]}, "evidence": "Accountant is a job title; first hired = MIN(HireDate)"}
{"sample_id": 7069, "db_id": "works_cycles", "final": {"question": "What is the first name of the male employee who has a western name style?", "sql": "SELECT T2.FirstName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.NameStyle = 0 AND T1.Gender = 'M'", "source_tables": ["employee", "person"]}, "evidence": "western name style refers to NameStyle = 0; Male refers to Gender = 'M';"}
{"sample_id": 7324, "db_id": "works_cycles", "final": {"question": "Among the employees in Adventure Works, calculate the percentage of them working as sales representatives.", "sql": "SELECT CAST(SUM(CASE WHEN JobTitle = 'Sales Representative' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(BusinessEntityID) FROM Employee", "source_tables": ["employee"]}, "evidence": "percentage of sales representatives = divide(count(JobTitle = 'Sales Representative'), count(JobTitle))*100%"}
{"sample_id": 7195, "db_id": "works_cycles", "final": {"question": "What is the average vacation hours taken by Sales person?", "sql": "SELECT CAST(SUM(T1.VacationHours) AS REAL) / COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP'", "source_tables": ["employee", "person"]}, "evidence": "Store Contact refers PersonType = 'SC'; AVG(VacationHours"}
{"sample_id": 7315, "db_id": "works_cycles", "final": {"question": "What is the job title of the oldest employee in the company? In which department is he in?", "sql": "SELECT T2.JobTitle, T4.Name FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeeDepartmentHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID INNER JOIN Department AS T4 ON T3.DepartmentID = T4.DepartmentID ORDER BY T2.HireDate LIMIT 1", "source_tables": ["department", "employeedepartmenthistory", "employee", "person"]}, "evidence": "oldest employee refers to min(BirthDate)"}
{"sample_id": 7356, "db_id": "works_cycles", "final": {"question": "What goods were sold to customers in accordance with sales order number 43660?", "sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN SalesOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.SalesOrderID = 43660", "source_tables": ["product", "salesorderdetail"]}, "evidence": "goods refers to products"}
{"sample_id": 7251, "db_id": "works_cycles", "final": {"question": "What is the profit on net of the vendor with the highest standard price? If there are two vendors of the same amount, calculate only for one vendor.", "sql": "SELECT LastReceiptCost - StandardPrice FROM ProductVendor ORDER BY StandardPrice DESC LIMIT 1", "source_tables": ["productvendor"]}, "evidence": "profit on net = SUBTRACT(LastReceiptCost, StandardPrice);"}
{"sample_id": 7287, "db_id": "works_cycles", "final": {"question": "Please list the reviewers who have given the highest rating for a medium class, women's product.", "sql": "SELECT T1.ReviewerName FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Class = 'M' AND T2.Style = 'W' AND T1.Rating = 5", "source_tables": ["productreview", "product"]}, "evidence": "highest rating refers to Rating = 5; high class refers to Class = 'H'; men's product refers to Style = 'M'"}
{"sample_id": 7450, "db_id": "works_cycles", "final": {"question": "What is the cost for the sports?", "sql": "SELECT T2.StandardCost FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name LIKE '%Sport%'", "source_tables": ["productcosthistory", "product"]}, "evidence": "cost refers to StandardCost;"}
{"sample_id": 7410, "db_id": "works_cycles", "final": {"question": "What is the hashed password of David Bradley?", "sql": "SELECT T2.PasswordHash FROM Person AS T1 INNER JOIN Password AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'", "source_tables": ["password", "person"]}, "evidence": "hashed password refers to PasswordHash;"}
{"sample_id": 7144, "db_id": "works_cycles", "final": {"question": "What are the Department ids under the Sales and Marketing Group?", "sql": "SELECT DepartmentID FROM Department WHERE GroupName = 'Sales and Marketing'", "source_tables": ["department"]}, "evidence": "Sales and Marketing is group name of a department"}
{"sample_id": 7077, "db_id": "works_cycles", "final": {"question": "Among the employees who are married and wish to receive e-mail promotions, how much higher is their highest pay rate from the average pay rate?", "sql": "SELECT MAX(T1.Rate) - SUM(T1.Rate) / COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Employee AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T2.EmailPromotion = 2 AND T3.MaritalStatus = 'M'", "source_tables": ["employee", "employeepayhistory", "person"]}, "evidence": "married refers to MaritalStatus = 'M'; Contact does wish to receive e-mail promotions from Adventure Works refers to EmailPromotion = 1; Average = Divide (Sum(Rate (MaritalStatus = 'M' & EmailPromotion = 1))), Count (BusinessEntityID (MaritalStatus = 'M' & EmailPromotion = 1)); MAX(Rate (MaritalStatus = 'M' & EmailPromotion = 1) - Average;"}
{"sample_id": 7429, "db_id": "works_cycles", "final": {"question": "How many products from the Clothing category were on the LL Road Frame Sale?", "sql": "SELECT COUNT(T2.ProductID) FROM SpecialOffer AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID INNER JOIN Product AS T3 ON T2.ProductID = T3.ProductID INNER JOIN ProductSubcategory AS T4 ON T3.ProductSubcategoryID = T4.ProductSubcategoryID INNER JOIN ProductCategory AS T5 ON T4.ProductCategoryID = T5.ProductCategoryID WHERE T1.Description = 'LL Road Frame Sale' AND T4.Name = 'Clothing'", "source_tables": ["specialofferproduct", "specialoffer", "productsubcategory", "productcategory", "product"]}, "evidence": "LL Road Frame Sale is a description of special offer"}
{"sample_id": 7188, "db_id": "works_cycles", "final": {"question": "Who is the top sales person who achived highest percentage of projected sales quota in 2013?", "sql": "SELECT BusinessEntityID FROM SalesPerson WHERE BusinessEntityID IN ( SELECT BusinessEntityID FROM SalesPersonQuotaHistory WHERE STRFTIME('%Y', QuotaDate) = '2013' ) ORDER BY CAST(SalesLastYear AS REAL) / SalesQuota DESC LIMIT 1", "source_tables": ["salespersonquotahistory", "salesperson"]}, "evidence": "2013 refers to QuotaDate = '2013'; DIVIDE(SalesLastYear), (SUM(SalesQuota where YEAR(QuotaDate) = 2013)) as percentage\n"}
{"sample_id": 7296, "db_id": "works_cycles", "final": {"question": "Which vendor's selling price for Hex Nut 5 is the lowest, please give the vendor's name.", "sql": "SELECT T3.Name FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Name = 'Hex Nut 5' ORDER BY T1.StandardPrice LIMIT 1", "source_tables": ["vendor", "productvendor", "product"]}, "evidence": "vendor's selling price refers to StandardPrice; lowest selling price = MIN(StandardPrice)"}
{"sample_id": 7471, "db_id": "works_cycles", "final": {"question": "What is the the average percentage of profit for the all the product?", "sql": "SELECT AVG((T1.ListPrice - T2.StandardCost) * 100 / T2.StandardCost) FROM ProductListPriceHistory AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID", "source_tables": ["productlistpricehistory", "productcosthistory"]}, "evidence": "average profit percentage = DIVIDE(SUBTRACT(ListPrice, StandardCost)), (StandardCost)));"}
{"sample_id": 7230, "db_id": "works_cycles", "final": {"question": "Which territory has the most customers as of 9/12/2014?", "sql": "SELECT TerritoryID FROM Customer WHERE ModifiedDate < '2014-12-09' GROUP BY TerritoryID ORDER BY COUNT(TerritoryID) DESC LIMIT 1", "source_tables": ["customer"]}, "evidence": "ModifiedDate between'2014-09-12 00:00:00' and '2014-09-12 23:59:59';"}
{"sample_id": 7454, "db_id": "works_cycles", "final": {"question": "How many products with a thumpnail photo?", "sql": "SELECT COUNT(ProductID) FROM ProductProductPhoto WHERE ProductPhotoID != 1", "source_tables": ["productproductphoto"]}, "evidence": "products with a thumbnail photo refers to ProductPhotoID ! = 1 ;"}
{"sample_id": 7181, "db_id": "works_cycles", "final": {"question": "What is the stocked quantity of products manufactured from location ID 40?", "sql": "SELECT COUNT(*) FROM WorkOrderRouting AS T1 INNER JOIN BillOfMaterials AS T2 ON T1.LocationID = T2.ProductAssemblyID INNER JOIN WorkOrder AS T3 ON T3.WorkOrderID = T1.WorkOrderID WHERE T1.LocationID = 40", "source_tables": ["billofmaterials", "workorder", "workorderrouting"]}, "evidence": "Stocked quantity refers to StockedQty"}
{"sample_id": 7016, "db_id": "works_cycles", "final": {"question": "List the purchase order whereby all received quantity were rejected? Name those product.", "sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.RejectedQty = T2.ReceivedQty AND T2.RejectedQty <> 0", "source_tables": ["purchaseorderdetail", "product"]}, "evidence": "Rejected refers rejected product in which to RejectedQty = 1"}
{"sample_id": 7444, "db_id": "works_cycles", "final": {"question": "What is the name of the product stored in location 1 compartment L container 6?", "sql": "SELECT T2.Name FROM ProductInventory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.LocationID = 1 AND T1.Shelf = 'L' AND T1.Bin = 6", "source_tables": ["product", "productinventory"]}, "evidence": "compartment refers to Shelf;"}
{"sample_id": 7011, "db_id": "works_cycles", "final": {"question": "Provide details of review from reviewer whose name begin with letter 'J'. State the product ID, rating and comments.", "sql": "SELECT ProductID, Rating, Comments FROM ProductReview WHERE ReviewerName LIKE 'J%'", "source_tables": ["productreview"]}, "evidence": "reviewer whose name begin with letter 'J' = ReviewerName LIKE 'J%'"}
{"sample_id": 7111, "db_id": "works_cycles", "final": {"question": "How many vendors are having their products ordered with an average delivery time of 25 days?", "sql": "SELECT COUNT(DISTINCT BusinessEntityID) FROM ProductVendor WHERE AverageLeadTime = 25", "source_tables": ["productvendor"]}, "evidence": "vendors refers to distinct BusinessEntityID; average delivery time of 25 days refers to AverageLeadTime = 25 and onOrderQty > 0"}
{"sample_id": 7054, "db_id": "works_cycles", "final": {"question": "Among the employees whose pay frequencies are the highest, how many of them are married?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.MaritalStatus = 'M' AND T1.PayFrequency = ( SELECT PayFrequency FROM EmployeePayHistory ORDER BY PayFrequency DESC LIMIT 1 )", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "married refers to MaritalStatus = M; highest pay frequency refers to PayFrequency = 2"}
{"sample_id": 7364, "db_id": "works_cycles", "final": {"question": "What is the name of the state that Racine belongs to?", "sql": "SELECT T2.Name FROM Address AS T1 INNER JOIN StateProvince AS T2 ON T1.StateProvinceID = T2.StateProvinceID WHERE T1.City = 'Racine'", "source_tables": ["stateprovince", "address"]}, "evidence": "Racine is a city"}
{"sample_id": 7372, "db_id": "works_cycles", "final": {"question": "What is the weight in pounds of the style that is produced the most by the company? If there are multiple products sharing the same weight, indicate the name of each one of them and their corresponding weights.", "sql": "SELECT Weight FROM Product WHERE WeightUnitMeasureCode = 'LB' GROUP BY Weight ORDER BY COUNT(Style) DESC LIMIT 1", "source_tables": ["product"]}, "evidence": "weight in pounds refers to WeightUnitMeasureCode = 'LB';"}
{"sample_id": 7085, "db_id": "works_cycles", "final": {"question": "What is the average total due price of products with approved status?", "sql": "SELECT SUM(TotalDue) / COUNT(TotalDue) FROM PurchaseOrderHeader WHERE Status = 2", "source_tables": ["purchaseorderheader"]}, "evidence": "approved refers to Status = 2 , average total due price = AVG( DIVIDE(TotalDue, SUM(Status = 2 )))"}
{"sample_id": 7291, "db_id": "works_cycles", "final": {"question": "What is the product description of Headset Ball Bearings?", "sql": "SELECT T1.Description FROM ProductDescription AS T1 INNER JOIN Product AS T2 WHERE T2.Name = 'Headset Ball Bearings' AND T1.productDescriptionID = T2.ProductID", "source_tables": ["productdescription", "product"]}, "evidence": "Headset Ball Bearings is name of a product"}
{"sample_id": 7319, "db_id": "works_cycles", "final": {"question": "List all product name from Australia Bike Retailer order by product ID.", "sql": "SELECT T3.Name FROM Vendor AS T1 INNER JOIN ProductVendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Product AS T3 ON T2.ProductID = T3.ProductID WHERE T1.Name = 'Australia Bike Retailer'", "source_tables": ["product", "vendor", "productvendor"]}, "evidence": "Australia Bike Retailer is name of vendor"}
{"sample_id": 7068, "db_id": "works_cycles", "final": {"question": "Please give the additional contact information of the oldest employee with the jod position of sales person.", "sql": "SELECT T2.AdditionalContactInfo FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE PersonType = 'SP' ORDER BY T1.BirthDate ASC LIMIT 1", "source_tables": ["employee", "person"]}, "evidence": "Sales person refers to PersonType = 'SP'; oldest employee refers to Max (Subtract((now())-BirthDate));"}
{"sample_id": 7187, "db_id": "works_cycles", "final": {"question": "How many male employees do not wish to receive e-mail promotion?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 0 AND T1.Gender = 'M'", "source_tables": ["employee", "person"]}, "evidence": "Male refers to Gender = 'M'; employees do not wish to receive any e-mail promotions are marked as EmailPromotion = 0"}
{"sample_id": 7229, "db_id": "works_cycles", "final": {"question": "List all active vendors who offer a purchasing web service.", "sql": "SELECT Name FROM Vendor WHERE ActiveFlag = 1", "source_tables": ["vendor"]}, "evidence": "active vendors refers to ActiveFlag = 1; vendor who offer a purchasing web service refers to PurchasingWebServiceURL NOT null;"}
{"sample_id": 7443, "db_id": "works_cycles", "final": {"question": "What is the product with the most profit?", "sql": "SELECT T1.ProductID FROM ProductListPriceHistory AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.ListPrice - T2.StandardCost DESC LIMIT 1", "source_tables": ["productlistpricehistory", "productcosthistory"]}, "evidence": "profit = SUBTRACT(ListPrice, StandardCost);"}
{"sample_id": 7103, "db_id": "works_cycles", "final": {"question": "Calculate the average of the total ordered quantity of products purchased whose shipping method was Cargo Transport 5.", "sql": "SELECT CAST(SUM(IIF(T1.ShipMethodID = 5, T3.OrderQty, 0)) AS REAL) / COUNT(T3.ProductID) FROM ShipMethod AS T1 INNER JOIN PurchaseOrderHeader AS T2 ON T1.ShipMethodID = T2.ShipMethodID INNER JOIN PurchaseOrderDetail AS T3 ON T2.PurchaseOrderID = T3.PurchaseOrderID", "source_tables": ["purchaseorderdetail", "shipmethod", "purchaseorderheader"]}, "evidence": "shipping method was Cargo Transport 5 refers to Name = 'Cargo Transport 5'; average = DIVIDE(SUM(OrderQty where Name = 'Cargo Transport 5'), COUNT(ShipMethodID))"}
{"sample_id": 7104, "db_id": "works_cycles", "final": {"question": "List the name of the rates that apply to the provinces that are in the territory that obtained the greatest increase in sales with respect to the previous year.", "sql": "SELECT T2.Name FROM SalesTerritory AS T1 INNER JOIN StateProvince AS T2 ON T1.CountryRegionCode = T2.CountryRegionCode INNER JOIN SalesTaxRate AS T3 ON T2.StateProvinceID = T3.StateProvinceID ORDER BY (T1.SalesYTD - T1.SalesLastYear) / T1.SalesLastYear DESC LIMIT 1", "source_tables": ["salesterritory", "stateprovince", "salestaxrate"]}, "evidence": "sales of previous year refers to SalesLastYear; SalesYTD refers to year to date sales; increase in sales = DIVIDE(SUBTRACT(SalesYTD, SalesLastYear), SalesLastYear)*100"}
{"sample_id": 7285, "db_id": "works_cycles", "final": {"question": "Among the products that are both manufactured in house and salable, how many of them get over 10 reviews?", "sql": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 USING (ProductID) WHERE T2.FinishedGoodsFlag = 1 AND T2.MakeFlag = 1 GROUP BY T2.Name ORDER BY COUNT(T1.COMMENTS) > 10", "source_tables": ["productreview", "product"]}, "evidence": "manufactured in house refers to MakeFlag = 1; salable product refers to FinishedGoodsFlag = 1; over 10 reviews refers to count(comments)>10"}
{"sample_id": 7159, "db_id": "works_cycles", "final": {"question": "What is the size of the photo of product id No.1?", "sql": "SELECT T1.ThumbNailPhoto FROM ProductPhoto AS T1 INNER JOIN ProductProductPhoto AS T2 ON T1.ProductPhotoID = T2.ProductPhotoID WHERE T2.ProductID = 1", "source_tables": ["productproductphoto", "productphoto"]}, "evidence": ""}
{"sample_id": 7030, "db_id": "works_cycles", "final": {"question": "What is the total price of Sales Order ID 46625 with Volume Discount 11 to 14 and Product ID 716?", "sql": "SELECT T2.UnitPrice * T2.OrderQty FROM SpecialOffer AS T1 INNER JOIN SalesOrderDetail AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID WHERE T1.Description = 'Volume Discount 11 to 14' AND T1.SpecialOfferID = 2 AND T2.ProductID = 716 AND T2.SalesOrderID = 46625", "source_tables": ["specialoffer", "salesorderdetail"]}, "evidence": "total price = multiply(UnitPrice, OrderQty);"}
{"sample_id": 7057, "db_id": "works_cycles", "final": {"question": "What is the highest pay rate of the employees who are exempt from collective bargaining?", "sql": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.SalariedFlag = 1 ORDER BY T1.Rate DESC LIMIT 1", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "employee exempt from collective bargaining refers to SalariedFlag = 1; highest pay rate refers to max(Rate)"}
{"sample_id": 7169, "db_id": "works_cycles", "final": {"question": "How is the Credit Rating for company whose rowguid is \"33671A4E-DF2B-4879-807B-E3F930DD5C0C\"?", "sql": "SELECT T1.CreditRating FROM Vendor AS T1 INNER JOIN BusinessEntity AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.rowguid = '33671A4E-DF2B-4879-807B-E3F930DD5C0C'", "source_tables": ["vendor", "businessentity"]}, "evidence": "CreditRating = 1 means 'Superior'; CreditRating = 2 means 'Excellent'; CreditRating = 3 means 'Above average'; CreditRating = 4 means 'Superior'; CreditRating = 5 means 'Below average'"}
{"sample_id": 7284, "db_id": "works_cycles", "final": {"question": "What is the biggest amount of reviews a salable product gets?", "sql": "SELECT T1.Comments FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.FinishedGoodsFlag = 1 GROUP BY T1.Comments ORDER BY COUNT(T1.ProductReviewID) DESC LIMIT 1", "source_tables": ["productreview", "product"]}, "evidence": "salable product refers to FinishedGoodsFlag = 1; biggest amount reviews refers to MAX(count(ProductID))"}
{"sample_id": 7493, "db_id": "image_and_language", "final": {"question": "Provide the number of predicted classes.", "sql": "SELECT COUNT(PRED_CLASS_ID) FROM PRED_CLASSES", "source_tables": ["pred_classes"]}, "evidence": "predicted classes refers to PRED_CLASS"}
{"sample_id": 7544, "db_id": "image_and_language", "final": {"question": "Name the object class of the image with a bounding (422, 63, 77, 363).", "sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 422 AND T1.Y = 63 AND T1.W = 77 AND T1.H = 363", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "image with a bounding (422, 63, 77, 363) refers to OBJ_CLASS_ID where X = 422 and Y = 63 and W = 77 and H = 363;"}
{"sample_id": 7482, "db_id": "image_and_language", "final": {"question": "What is the relation between object sample no.8 and object sample no.4 in image no.1?", "sql": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 1 AND T2.OBJ1_SAMPLE_ID = 8 AND T2.OBJ2_SAMPLE_ID = 4", "source_tables": ["pred_classes", "img_rel"]}, "evidence": "relation refers to PRED_CLASS; object sample no.8 and object sample no.4 refers to OBJ1_SAMPLE_ID = 8 AND OBJ2_SAMPLE_ID = 4; image no.1 refers to IMG_ID = 1"}
{"sample_id": 7600, "db_id": "image_and_language", "final": {"question": "List the object classes of image ID 36 with coordinates (0,0).", "sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 36 AND T1.X = 0 AND T1.Y = 0", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "object classes of image ID 36 refers to OBJ_CLASS where IMG_ID = 36; coordinates (0,0) refer to X and Y coordinates of the bounding box where X = 0 and Y = 0;"}
{"sample_id": 7496, "db_id": "image_and_language", "final": {"question": "Give the number of samples in image no.2377985 whose attribute is electrical.", "sql": "SELECT SUM(CASE WHEN T2.ATT_CLASS = 'white' THEN 1 ELSE 0 END) FROM IMG_OBJ_ATT AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 2347915", "source_tables": ["att_classes", "img_obj_att"]}, "evidence": "number of samples refers to OBJ_SAMPLE_ID; image no.2377985 refers to IMG_ID = 2377985; attribute is electrical refers to ATT_CLASS = 'electrical'"}
{"sample_id": 7602, "db_id": "image_and_language", "final": {"question": "What object class is in the X and Y coordinates of 126 and 363?", "sql": "SELECT T1.IMG_ID, T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 126 AND T1.Y = 363", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "object class refers to OBJ_CLASS; X and Y coordinates of 126 and 363 refer to coordinates of the bounding box where X = 126 and Y = 363;"}
{"sample_id": 7586, "db_id": "image_and_language", "final": {"question": "What are the width and height of the bounding box of the object with \"keyboard\" as their object class and (5, 647) as their coordinate?", "sql": "SELECT T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'keyboard' AND T1.X = 5 AND T1.Y = 647", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "The bounding box's W and H abbreviations stand for the object's width and height respectively; \"keyboard\" as object class refers to OBJ_CLASS = 'keyboard'; (5, 647) as coordinate refers to X and Y coordinates of the bounding box where X = 5 and Y = 647;"}
{"sample_id": 7523, "db_id": "image_and_language", "final": {"question": "Among the objects that have multiple relations, how many images whose captions for the prediction class ids are \"on\"?", "sql": "SELECT COUNT(T2.PRED_CLASS_ID) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.OBJ1_SAMPLE_ID != T1.OBJ2_SAMPLE_ID AND T2.PRED_CLASS = 'on'", "source_tables": ["pred_classes", "img_rel"]}, "evidence": "objects that have multiple relations refers to OBJ1_SAMPLE_ID ! = OBJ2_SAMPLE_ID; captions for the prediction class ids are \"on\" refers to PRED_CLASS = 'on'"}
{"sample_id": 7489, "db_id": "image_and_language", "final": {"question": "What is the average difference in the y coordinate of 2 object samples with the relation \"parked on\" in image no.1?", "sql": "SELECT CAST(SUM(T3.Y) AS REAL) / COUNT(CASE WHEN T1.PRED_CLASS = 'parked on' THEN 1 ELSE NULL END) FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.OBJ1_SAMPLE_ID = T3.OBJ_CLASS_ID WHERE T2.IMG_ID = 1 AND T2.OBJ1_SAMPLE_ID != T2.OBJ2_SAMPLE_ID", "source_tables": ["img_obj", "pred_classes", "img_rel"]}, "evidence": "relation \"parked on\" refers to PRED_CLASS = 'parked on'; image no.1 refers to IMG_ID = 1; average difference in the y coordinate = divide(sum(Y), count(PRED_CLASS)) where OBJ1_SAMPLE_ID ! = OBJ2_SAMPLE_ID"}
{"sample_id": 7478, "db_id": "image_and_language", "final": {"question": "What is the bounding box of the object sample in image no.5 that has a self-relation?", "sql": "SELECT T2.X, T2.Y, T2.W, T2.H FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID WHERE T1.IMG_ID = 5 AND T1.OBJ1_SAMPLE_ID = T1.OBJ2_SAMPLE_ID", "source_tables": ["img_obj", "img_rel"]}, "evidence": "bounding box of the object sample refers to (x, y, W, H); image no.5 refers to IMG_ID = 5; has a self-relation refers to OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID"}
{"sample_id": 7534, "db_id": "image_and_language", "final": {"question": "What colour is the van that can be spotted in image no. 1?", "sql": "SELECT T4.ATT_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID INNER JOIN IMG_OBJ_ATT AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN ATT_CLASSES AS T4 ON T3.ATT_CLASS_ID = T4.ATT_CLASS_ID WHERE T2.OBJ_CLASS = 'van' AND T1.IMG_ID = 1 GROUP BY T4.ATT_CLASS", "source_tables": ["img_obj", "obj_classes", "img_obj_att", "att_classes"]}, "evidence": "colour refers to ATT_CLASS; van refers to OBJ_CLASS = 'van'; image no. 1 refers to IMG_ID = 1"}
{"sample_id": 7591, "db_id": "image_and_language", "final": {"question": "How many images have \"picture\" as their attribute class?", "sql": "SELECT COUNT(T2.IMG_ID) FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.ATT_CLASS = 'picture'", "source_tables": ["att_classes", "img_obj_att"]}, "evidence": "images have \"picture\" as their attribute class refer to IMG_ID where ATT_CLASS = 'picture';"}
{"sample_id": 7546, "db_id": "image_and_language", "final": {"question": "Indicate the bounding box of the image 8.", "sql": "SELECT X, Y, W, H FROM IMG_OBJ WHERE IMG_ID = 8", "source_tables": ["img_obj"]}, "evidence": "bounding box refers to X, Y, W, H from IMG_OBJ; image 8 refers to IMG_ID = 8;"}
{"sample_id": 7598, "db_id": "image_and_language", "final": {"question": "In the Y coordinate of image ID 12, how many are 0?", "sql": "SELECT COUNT(IMG_ID) FROM IMG_OBJ WHERE IMG_ID = 12 AND Y = 0", "source_tables": ["img_obj"]}, "evidence": "Y coordinate many are 0 refers to Y coordinates of the bounding box where Y = 0; image ID 12 refers to IMG_ID = 12;"}
{"sample_id": 7606, "db_id": "image_and_language", "final": {"question": "How many 'has' predicate classes does image ID 107 have?", "sql": "SELECT COUNT(T2.PRED_CLASS) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.IMG_ID = 107 AND T2.PRED_CLASS = 'has'", "source_tables": ["pred_classes", "img_rel"]}, "evidence": "has' predicate classes refers to PRED_CLASS = 'has'; image ID 107 refers to IMG_ID = 107;"}
{"sample_id": 7516, "db_id": "image_and_language", "final": {"question": "What is the prediction relationship class id of the tallest image?", "sql": "SELECT T1.PRED_CLASS_ID FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID ORDER BY T2.H DESC LIMIT 1", "source_tables": ["img_obj", "img_rel"]}, "evidence": "prediction relationship class id refers to PRED_CLASS_ID; tallest image refers to max(H)"}
{"sample_id": 7533, "db_id": "image_and_language", "final": {"question": "How many object elements are there on average in each image?", "sql": "SELECT CAST(COUNT(OBJ_CLASS_ID) AS REAL) / COUNT(DISTINCT IMG_ID) FROM IMG_OBJ", "source_tables": ["img_obj"]}, "evidence": "object elements refers to OBJ_CLASS_ID; average = divide(count(OBJ_CLASS_ID), count(IMG_ID))"}
{"sample_id": 7590, "db_id": "image_and_language", "final": {"question": "For those objects that have multiple relations, how many images have a prediction class of \"reading\"?", "sql": "SELECT COUNT(T1.IMG_ID) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.PRED_CLASS = 'reading'", "source_tables": ["pred_classes", "img_rel"]}, "evidence": "prediction class of \"reading\" refers to PRED_CLASS = 'reading'; if two objects (OBJ1_SAMPLE_ID,\nOBJ2_SAMPLE_ID) has\nmultiple PRED_CLASS_ID, it\nmeans these two objects\nhave multiple relations;"}
{"sample_id": 7510, "db_id": "image_and_language", "final": {"question": "What are the id of all the objects belonging to the transportation class?", "sql": "SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS IN ('bus', 'train', 'aeroplane', 'car', 'etc')", "source_tables": ["obj_classes"]}, "evidence": "id of all the objects belonging to the transportation class refers to OBJ_CLASS_ID and OBJ_CLASS IN ('bus', 'train', 'aeroplane', 'car', 'etc.')"}
{"sample_id": 7601, "db_id": "image_and_language", "final": {"question": "Write 10 coordinates with the object class \"pizza.\"", "sql": "SELECT T1.IMG_ID, T1.X, T1.Y FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'pizza' LIMIT 10", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "coordinates for the object refer to X, Y, W and H coordinates of the bounding box; object class \"pizza\" refers to OBJ_CLASS = 'pizza';"}
{"sample_id": 7559, "db_id": "image_and_language", "final": {"question": "Name the object class of the image with lowest bounding box.", "sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID ORDER BY T1.H LIMIT 1", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "bounding box refers to X, Y, W, H from IMG_OBJ; lowest relates to the height of the bounding box which refers to MIN(H);"}
{"sample_id": 7492, "db_id": "image_and_language", "final": {"question": "How many object classes are there in the database?", "sql": "SELECT COUNT(OBJ_CLASS_ID) FROM OBJ_CLASSES", "source_tables": ["obj_classes"]}, "evidence": "object classes refers to OBJ_CLASS"}
{"sample_id": 7522, "db_id": "image_and_language", "final": {"question": "Give all the bounding boxes for image 2222 whose object classes are feathers.", "sql": "SELECT T2.X, T2.Y, T2.H, T2.W FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 2222 AND T1.OBJ_CLASS = 'feathers'", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "bounding boxes refers to (x, y, W, H); image 2222 refers to IMG_ID = 2222; object classes are feathers refers to OBJ_CLASS = 'feathers'"}
{"sample_id": 7558, "db_id": "image_and_language", "final": {"question": "Name number of samples of \"bed\" object are there in the image No.1098?", "sql": "SELECT SUM(CASE WHEN T2.OBJ_CLASS = 'bed' THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 1098", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "samples of \"bed\" object refer to OBJ_SAMPLE_ID where OBJ_CLASS = 'bed'; image No.1098 refers to IMG_ID = 1098;"}
{"sample_id": 7486, "db_id": "image_and_language", "final": {"question": "Please list the IDs of all the images with more than 2 pairs of object samples with the relation \"parked on\".", "sql": "SELECT T2.IMG_ID FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.PRED_CLASS = 'parked on' AND T2.OBJ1_SAMPLE_ID != T2.OBJ2_SAMPLE_ID GROUP BY T2.IMG_ID HAVING COUNT(T2.IMG_ID) > 2", "source_tables": ["pred_classes", "img_rel"]}, "evidence": "IDs of all the images refers to IMG_ID; relation \"parked on\" refers to PRED_CLASS = 'parked on'; more than 2 pairs refers to count(IMG_ID) where OBJ1_SAMPLE_ID ! = OBJ2_SAMPLE_ID"}
{"sample_id": 7578, "db_id": "image_and_language", "final": {"question": "How many images have an x-coordinate of 5 and y-coordinate of 5?", "sql": "SELECT COUNT(IMG_ID) FROM IMG_OBJ WHERE X = 5 AND Y = 5", "source_tables": ["img_obj"]}, "evidence": "X and Y refer to coordinates of the bounding box where X = 5 and Y = 5; images refer to IMG_ID;"}
{"sample_id": 7508, "db_id": "image_and_language", "final": {"question": "List all the ids of the images that have a self-relation relationship.", "sql": "SELECT DISTINCT IMG_ID FROM IMG_REL WHERE OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID", "source_tables": ["img_rel"]}, "evidence": "ids of the images refers to IMG_ID; self-relations refers to OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID"}
{"sample_id": 7480, "db_id": "image_and_language", "final": {"question": "How many images have at least one object sample in the class of \"man\"?", "sql": "SELECT COUNT(T.IMG_ID) FROM ( SELECT T2.IMG_ID FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.OBJ_CLASS = 'man' GROUP BY T2.IMG_ID ) T", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "have at least one object sample in the class of \"man\" refers to count(IMG_ID where OBJ_CLASS = 'man') > = 1"}
{"sample_id": 7584, "db_id": "image_and_language", "final": {"question": "List all the object classes of the images that have a (5,5) coordinate.", "sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 5 AND T1.Y = 5", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "object classes refer to OBJ_CLASS; (5,5) coordinates refer to X and Y coordinates of the bounding box where X = 5 and Y = 5;"}
{"sample_id": 7669, "db_id": "hockey", "final": {"question": "How many players born in Toronto have won the All-Rookie award?", "sql": "SELECT COUNT(T1.playerID) FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'All-Rookie' AND T1.birthCity = 'Toronto'", "source_tables": ["awardsplayers", "master"]}, "evidence": "born in Toronto refers to birthCity = 'Toronto'"}
{"sample_id": 7723, "db_id": "hockey", "final": {"question": "Which NHL award was most frequently won by the coach with the most wins?", "sql": "SELECT award FROM Teams AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.lgID = T2.lgID WHERE T1.lgID = 'NHL' GROUP BY T2.coachID, T2.award ORDER BY COUNT(T2.award) DESC LIMIT 1", "source_tables": ["teams", "awardscoaches"]}, "evidence": ""}
{"sample_id": 7720, "db_id": "hockey", "final": {"question": "For the goalie who had the highest defensive success rate in the postseason of 2011, what's his legends ID ?", "sql": "SELECT T2.legendsID FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 2011 ORDER BY 1 - CAST(T1.PostGA AS REAL) / T1.PostSA DESC LIMIT 1", "source_tables": ["goalies", "master"]}, "evidence": "Post season of 2011 refers to year = \u20192011\u2019\ndefensive success rate refers to (SUBTRACT(1 (DIVIDE(PostGA/PostSA)), *100%)\n"}
{"sample_id": 7796, "db_id": "hockey", "final": {"question": "How many goalies played for Calgary Flames?", "sql": "SELECT COUNT(DISTINCT playerID) FROM Goalies AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.name = 'Calgary Flames'", "source_tables": ["goalies", "teams"]}, "evidence": "Calgary Flames is the name of team;"}
{"sample_id": 7714, "db_id": "hockey", "final": {"question": "For the player who scored 7 shorthanded goals in 1989, what's his dominant hand?", "sql": "SELECT T1.shootCatch FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1989 GROUP BY T2.playerID HAVING SUM(T2.SHG) = 7", "source_tables": ["master", "scoring"]}, "evidence": "1989 refers to the year of scoring; \"dominant hand\" and \"shooting hand\" are synonyms which refers to shootCatch\n\n"}
{"sample_id": 7688, "db_id": "hockey", "final": {"question": "For the coach who won Second Team All-Star in 1933, how many wins did he have that year?", "sql": "SELECT SUM(T1.W) FROM Coaches AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 1933 AND T2.award = 'Second Team All-Star'", "source_tables": ["coaches", "awardscoaches"]}, "evidence": "the number of wins refers to count(w)"}
{"sample_id": 7721, "db_id": "hockey", "final": {"question": "How many former athletes go on to become coaches after retiring?", "sql": "SELECT COUNT(playerID) FROM Master WHERE playerID IS NOT NULL AND coachID IS NOT NULL", "source_tables": ["master"]}, "evidence": ""}
{"sample_id": 7710, "db_id": "hockey", "final": {"question": "Which is the catching hand for the goaltender who had the most shutouts in 1996?", "sql": "SELECT T1.shootCatch FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1996 ORDER BY T2.SHO DESC LIMIT 1", "source_tables": ["goalies", "master"]}, "evidence": "the most shutouts refers to max(SHO); catching hand for the goaltender refers to shootCatch; shootCatch = 'L' refers to lefthand; shootCatch = 'R' refers to righthand; shootCatch = 'null' or 'empty' means this player is good at both left and right hand"}
{"sample_id": 7667, "db_id": "hockey", "final": {"question": "Among the players who became coaches, how many of them have gotten in the Hall of Fame?", "sql": "SELECT COUNT(T1.playerID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T1.playerID IS NOT NULL AND T1.coachID IS NOT NULL", "source_tables": ["hof", "master"]}, "evidence": "players who became coaches refers to playerID IS NOT NULL AND coachID IS NOT NULL"}
{"sample_id": 7639, "db_id": "hockey", "final": {"question": "Among the coaches who was never a player, who has highest percentage of game winning? Provide the given name of the coach and team he coached.", "sql": "SELECT T2.nameGiven, T3.name FROM Coaches AS T1 INNER JOIN Master AS T2 ON T2.coachID = T1.coachID INNER JOIN Teams AS T3 ON T1.lgID = T3.lgID WHERE T1.coachID IS NOT NULL ORDER BY CAST(T1.w AS REAL) / T1.g DESC LIMIT 1", "source_tables": ["coaches", "master", "teams"]}, "evidence": "highest percentage of game winning refers to MAX(DIVIDE(w,g)*100)"}
{"sample_id": 7680, "db_id": "hockey", "final": {"question": "What is the average BMI of all the coaches who have gotten in the Hall of Fame?", "sql": "SELECT SUM(T1.weight / (T1.height * T1.height)) / COUNT(T1.coachID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID", "source_tables": ["hof", "master"]}, "evidence": "average BMI = divide(sum(divide(weight, multiply(height, height))), count(coachID))"}
{"sample_id": 7623, "db_id": "hockey", "final": {"question": "Name all goalies with 10 or more empty net goals. Name the players and season where he played.", "sql": "SELECT T1.firstName, T1.lastName , T2.year FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.ENG >= 10", "source_tables": ["goalies", "master"]}, "evidence": "10 or more empty net goals refers to ENG> = 10; season refers to year"}
{"sample_id": 7620, "db_id": "hockey", "final": {"question": "Name the goaltenders who had played in both PCHA and NHL league.", "sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.lgID IN ('PCHA', 'NHL') GROUP BY T2.playerID HAVING COUNT(DISTINCT T2.lgID) > 1", "source_tables": ["goalies", "master"]}, "evidence": "PCHA refers to lgID = 'PCHA'; NHL league refers to lgID = 'NHL'"}
{"sample_id": 7708, "db_id": "hockey", "final": {"question": "Which year was the goalie who had the most postseaon shots Against in 2008 born?", "sql": "SELECT T1.birthYear FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2008 ORDER BY T2.PostSA DESC LIMIT 1", "source_tables": ["goalies", "master"]}, "evidence": "the most postseason shots Against refers to max(PostSA); year born refers to birthYear"}
{"sample_id": 7712, "db_id": "hockey", "final": {"question": "For he who had the highest plus / minus on the court in the 1981 season, what's his full name?", "sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1981 GROUP BY T2.playerID ORDER BY SUM(T2.\"+/-\") DESC LIMIT 1", "source_tables": ["master", "scoring"]}, "evidence": "highest Plus/minus refers to MAX(+/-); full name refers to firstName, lastName; 1981 season refers to year = '1981'\n\n"}
{"sample_id": 7701, "db_id": "hockey", "final": {"question": "In the Stanley Cup finals history, how many games did player id \"broadpu01\" play in 1922?", "sql": "SELECT GP FROM ScoringSC WHERE playerID = 'broadpu01' AND YEAR = 1922", "source_tables": ["scoringsc"]}, "evidence": "the number of games refers to GP"}
{"sample_id": 7751, "db_id": "hockey", "final": {"question": "How many bench minor penalties did the team St. Louis Blues got in total in all the games?", "sql": "SELECT CAST(SUM(BenchMinor) AS REAL) / 2 FROM Teams WHERE name = 'St. Louis Blues'", "source_tables": ["teams"]}, "evidence": ""}
{"sample_id": 7655, "db_id": "hockey", "final": {"question": "Among the people who got into the Hall of Fame after the year 1980, how many of them belong to the category of \"Player\"?", "sql": "SELECT COUNT(hofID) FROM HOF WHERE year > 1980 AND category = 'Player'", "source_tables": ["hof"]}, "evidence": "after the year 1980 refers to year>1980"}
{"sample_id": 7764, "db_id": "hockey", "final": {"question": "Please list the names of the teams that had a tie in 1909.", "sql": "SELECT T2.name, T3.name FROM TeamVsTeam AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Teams AS T3 ON T1.year = T3.year AND T1.oppID = T3.tmID WHERE T1.year = 1909 AND T1.T = 1", "source_tables": ["teamvsteam", "teams"]}, "evidence": "tie refers to T>0; year = 1909;"}
{"sample_id": 7717, "db_id": "hockey", "final": {"question": "Who was the coach for the team which had the most bench minors penalty in 2003\uff1f", "sql": "SELECT DISTINCT T3.firstName, T3.lastName FROM Teams AS T1 INNER JOIN Coaches AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Master AS T3 ON T2.coachID = T3.coachID WHERE T1.year = '2003' GROUP BY T3.firstName, T3.lastName ORDER BY SUM(T1.BenchMinor) DESC LIMIT 1", "source_tables": ["coaches", "master", "teams"]}, "evidence": "Coach of the team refers to firstName+lastName; 2003 refers to the year\n\n"}
{"sample_id": 7664, "db_id": "hockey", "final": {"question": "Please list the awards won by coaches who taught the NHL League and have already died.", "sql": "SELECT DISTINCT T2.award FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.deathYear IS NOT NULL AND T2.lgID = 'NHL'", "source_tables": ["master", "awardscoaches"]}, "evidence": "have already died refers to deathYear IS NOT NULL; NHL league refers to lgID = 'NHL'"}
{"sample_id": 7770, "db_id": "hockey", "final": {"question": "Among the coaches who are born in the USA, how many of them used to train the Philadelphia Flyers?", "sql": "SELECT COUNT(DISTINCT T3.coachID) FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Philadelphia Flyers' AND T3.birthCountry = 'USA'", "source_tables": ["coaches", "master", "teams"]}, "evidence": "born in the USA refers to birthCountry = 'USA'; Philadelphia Flyers is the name of team;"}
{"sample_id": 7691, "db_id": "hockey", "final": {"question": "For the coach who co-coached with Dave Lewis in 1998, where was his birth place?", "sql": "SELECT T1.birthCountry FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 1998 AND T2.notes = 'co-coach with Dave Lewis'", "source_tables": ["coaches", "master"]}, "evidence": "co-coached refers to notes = 'co-coach'; birth place refers to 'birthCountry-birthState-birthCity'"}
{"sample_id": 7715, "db_id": "hockey", "final": {"question": "Who was the most clutch player in 1986? Give his full name.", "sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1986 GROUP BY T2.playerID ORDER BY SUM(T2.GWG) DESC LIMIT 1", "source_tables": ["master", "scoring"]}, "evidence": "clutch player' and 'trustworthy player in the critical moment' are synonyms; most clutch player refers to the most trustworthy player which refers to MAX(GWG); 1986 is the year played"}
{"sample_id": 7679, "db_id": "hockey", "final": {"question": "Please list the positions of the players who were born in Canada and have won the All-Rookie award.", "sql": "SELECT DISTINCT T1.pos FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCountry = 'Canada' AND T2.award = 'All-Rookie'", "source_tables": ["awardsplayers", "master"]}, "evidence": "born in Canada refers to birthCountry = 'Canada'; pos = 'LW' refers to left winger; pos = 'RW' refers to right winger; pos = 'C' refers to center; pos = 'G' refers to goalie; pos = 'D' refers to defenceman; pos = 'W' refers to winger; pos = 'F' refers to forward"}
{"sample_id": 7810, "db_id": "hockey", "final": {"question": "Which player ID are left winger and weight more than 200?", "sql": "SELECT DISTINCT playerID FROM Master WHERE pos LIKE '%L%' AND weight > 200 AND playerID IS NOT NULL AND pos = 'L'", "source_tables": ["master"]}, "evidence": "left winger refers to pos = 'L'; weight>200"}
{"sample_id": 7755, "db_id": "hockey", "final": {"question": "Which team got the most bench minor penalties in 2006?", "sql": "SELECT name FROM Teams WHERE year = 2006 GROUP BY tmID, name ORDER BY CAST(SUM(BenchMinor) AS REAL) / 2 DESC LIMIT 1", "source_tables": ["teams"]}, "evidence": "team refers to name; year = 2006"}
{"sample_id": 7734, "db_id": "hockey", "final": {"question": "What is the average height of all the goalies born in the 70s who's a left shooting/catching dominant and to which team do the tallest player/s play for most recently?", "sql": "SELECT CAST(SUM(T2.height) AS REAL) / COUNT(*) FROM AwardsPlayers AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.height IS NOT NULL AND (T2.pos = 'LW' OR T2.pos = 'L/C')", "source_tables": ["awardsplayers", "master"]}, "evidence": "goalies refers to pos = 'G'; born in the 70s refers to birthYear between '1970' and '1979'; left shooting/catching dominant refers to shootCatch = 'L'; tallest refers to max(height); average height = avg(height(pos = 'G' & birthYear between '1970' and '1979' & shootCatch = 'L')); most recently refers to max(Teams.year)"}
{"sample_id": 7808, "db_id": "hockey", "final": {"question": "How much is the total goals for player with player ID aaltoan01 and how old is this person?", "sql": "SELECT SUM(T2.G), STRFTIME('%Y', CURRENT_TIMESTAMP) - T1.birthyear FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T1.playerID = 'aaltoan01' GROUP BY T1.birthyear", "source_tables": ["master", "scoring"]}, "evidence": "total goals refer to SUM(G); how old = SUBTRACT(YEAR(CURDATE, birthYear);"}
{"sample_id": 7779, "db_id": "hockey", "final": {"question": "Which coach was the first one to teach the Montreal Canadiens, please give his first name.", "sql": "SELECT T3.firstName FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Montreal Canadiens' ORDER BY T1.year LIMIT 1", "source_tables": ["coaches", "master", "teams"]}, "evidence": "the first one refers to MIN(year);"}
{"sample_id": 7817, "db_id": "hockey", "final": {"question": "Which team has the highest winning rate in year 2000? State the team ID and list down the birth country of it's players.", "sql": "SELECT DISTINCT T3.tmID, T1.birthCountry FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID INNER JOIN ( SELECT year, tmID FROM Teams WHERE year = 2000 ORDER BY W / (W + L) DESC LIMIT 1 ) AS T3 ON T2.tmID = T3.tmID AND T2.year = T3.year", "source_tables": ["teams", "master", "scoring"]}, "evidence": "MAX(DIVIDE(COUNT(W), SUM(COUNT(W), (COUNT (L)) where year = 2000;"}
{"sample_id": 7762, "db_id": "hockey", "final": {"question": "Which team got the most wins in the Stanley Cup finals?", "sql": "SELECT T2.name FROM TeamsSC AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year GROUP BY T2.name ORDER BY SUM(T1.W) DESC LIMIT 1", "source_tables": ["teamssc", "teams"]}, "evidence": "team refers name; most wins = MAX(W);"}
{"sample_id": 7776, "db_id": "hockey", "final": {"question": "How many penalty minutes did the Montreal Canadiens have in the 1918's Stanley Cup Finals?", "sql": "SELECT T2.PIM FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens' AND T1.year = 1918", "source_tables": ["teamssc", "teams"]}, "evidence": "penalty minutes refer to PIM; year = 1918; Montreal Canadiens is name of team;"}
{"sample_id": 7800, "db_id": "hockey", "final": {"question": "What's the decrease rate of the game plays did David Aebischer after he got traded in 2005?", "sql": "SELECT CAST((SUM(CASE WHEN T1.year = 2005 THEN T1.GP ELSE 0 END) - SUM(CASE WHEN T1.year = 2006 THEN T1.GP ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.year = 2005 THEN T1.GP ELSE 0 END) FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.firstName = 'David' AND T2.lastName = 'Aebischer'", "source_tables": ["goalies", "master"]}, "evidence": "DIVIDE(SUBTRACT(SUM(GP(year = 2005), SUM(GP(year = 2006)), SUM(GP(year = 2005)) as percentage;"}
{"sample_id": 7637, "db_id": "hockey", "final": {"question": "Among all goalies who are still alive, whose first season in NHL in before 1950. List the team names they were in.", "sql": "SELECT DISTINCT T3.name FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.lgID = T3.lgID AND T2.year = T3.year WHERE T1.deathYear IS NOT NULL AND T1.firstNHL < 1950", "source_tables": ["goalies", "master", "teams"]}, "evidence": "first season in NHL in before 1950 refers to firstNHL<1950; goalies who are still alive refers to deathYear IS NOT NULL"}
{"sample_id": 7719, "db_id": "hockey", "final": {"question": "What is the percentage of winning rate of improvement since Alain Vigneault became the coach of Vancouver Canucks in 2006 season?", "sql": "SELECT SUM(CASE WHEN T1.year = 2006 THEN CAST(T1.W AS REAL) * 100 / (T1.W + T1.L) ELSE 0 END) - ( SELECT CAST(W AS REAL) * 100 / (W + L) FROM Teams WHERE year = '2005' AND name = 'Vancouver Canucks' ) FROM Teams AS T1 INNER JOIN Coaches AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Master AS T3 ON T2.coachID = T3.coachID WHERE T1.name = 'Vancouver Canucks' AND T3.firstName = 'Alain' AND T3.lastName = 'Vigneault'", "source_tables": ["coaches", "master", "teams"]}, "evidence": "winning rate refers to DIVIDE (w, SUM(w, l)); Vancouver Canucks is name of team where tmID = 'VAN'\nWinning rate refers to DIVIDE(wins in year = '2005/2006'(ADD(wins+loses); improvement refers to SUBTRACT(DIVIDE(wins in year = '2005'(ADD(wins+loses), DIVIDE(wins in year = '2006'(ADD(wins+loses))\n"}
{"sample_id": 7622, "db_id": "hockey", "final": {"question": "List all goalies from year 2000 to 2010 for team COL. State their given name, height, weight and age of today.", "sql": "SELECT T1.nameGiven, T1.height , T1.weight, STRFTIME('%Y', CURRENT_TIMESTAMP) - birthYear FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'COL' AND T2.year >= 2000 AND T2.year <= 2010 GROUP BY T1.playerID", "source_tables": ["goalies", "master"]}, "evidence": "team COL refers to tmID = 'COL'; age of today refers to SUBTRACT(YEAR(NOW())-birthYear)"}
{"sample_id": 7743, "db_id": "hockey", "final": {"question": "How many games did the coach who received the first-ever Second Team All-Star award play before receiving such award?", "sql": "SELECT SUM(T1.g) FROM Coaches AS T1 INNER JOIN ( SELECT coachID, year FROM AwardsCoaches WHERE award = 'Second Team All-Star' ORDER BY year LIMIT 1 ) AS T2 ON T1.coachID = T2.coachID AND T1.year < T2.year", "source_tables": ["coaches", "awardscoaches"]}, "evidence": "first-ever Second Team All-Star award refers to min(year(award = 'Second Team All-Star')); How many games before receiving such award = sum(g(coachID(min(year(award = 'Second Team All-Star')))): g(min(year)))"}
{"sample_id": 7676, "db_id": "hockey", "final": {"question": "Players born in which year have received the most awards in total?", "sql": "SELECT T1.birthYear FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID GROUP BY T1.birthYear ORDER BY COUNT(T2.award) DESC LIMIT 1", "source_tables": ["awardsplayers", "master"]}, "evidence": "received the most awards in total refers to max(count(award))"}
{"sample_id": 7809, "db_id": "hockey", "final": {"question": "Is there any coach who has not been a player before but has won award? State the ID.", "sql": "SELECT DISTINCT T2.coachID FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.playerID IS NULL", "source_tables": ["master", "awardscoaches"]}, "evidence": "coach who has not been a player means playerID is NULL and coachID is not NULL;"}
{"sample_id": 7696, "db_id": "hockey", "final": {"question": "In the history of team id NJD, which goalie saved the most goal attempts? Give his full name.", "sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'NJD' GROUP BY T2.playerID ORDER BY SUM(T2.SA - T2.GA) DESC LIMIT 1", "source_tables": ["goalies", "master"]}, "evidence": "saved the most goal attempts refers to max(subtract(SA, GA)); team id refers to tmID"}
{"sample_id": 7754, "db_id": "hockey", "final": {"question": "Among the teams that had more wins than loses in the year 2006, how many of them have over 100 points?", "sql": "SELECT COUNT(tmID) FROM Teams WHERE year = 2006 AND W > L AND Pts > 100", "source_tables": ["teams"]}, "evidence": "more wins than loses refers to W > L; over 100 points refers to Pts > 100"}
{"sample_id": 7906, "db_id": "world", "final": {"question": "List down the country names of countries that have a GNP lower than 1000 and have Dutch as their language.", "sql": "SELECT T2.Name FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GNP < 1000 AND T1.IsOfficial = 'T' AND T1.Language = 'Dutch'", "source_tables": ["countrylanguage", "country"]}, "evidence": "GNP lower than 1000 refers to GNP < 1000; Dutch as their language refers to `Language` = 'Dutch';"}
{"sample_id": 7860, "db_id": "world", "final": {"question": "How many percent of the population of China used Chinese as their language?", "sql": "SELECT T2.Percentage FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'China' AND T2.Language = 'Chinese'", "source_tables": ["countrylanguage", "country"]}, "evidence": "percent refers to Percentage; China is a name of country; use Chinese as their language refers to Language = 'Chinese';"}
{"sample_id": 7821, "db_id": "world", "final": {"question": "Calculate the average population per city in Karnataka district.", "sql": "SELECT AVG(Population) FROM City WHERE District = 'Karnataka' GROUP BY ID", "source_tables": ["city"]}, "evidence": "average population = AVG(Population);"}
{"sample_id": 7883, "db_id": "world", "final": {"question": "Within the 5 most crowded cities in the world, which country has the most languages used?", "sql": "SELECT Name FROM ( SELECT T1.Name, T2.Language FROM City AS T1 INNER JOIN CountryLanguage AS T2 ON T1.CountryCode = T2.CountryCode GROUP BY T1.Name, T1.Population, T2.Language ORDER BY T1.Population DESC ) AS T3 GROUP BY t3.Name ORDER BY COUNT(Language) DESC LIMIT 1", "source_tables": ["countrylanguage", "city"]}, "evidence": "most crowded cities refers to MAX(Population); has the most languages used refers to MAX(COUNT(Language));"}
{"sample_id": 7837, "db_id": "world", "final": {"question": "List the district name of the city with the smallest population.", "sql": "SELECT District FROM City ORDER BY Population LIMIT 1", "source_tables": ["city"]}, "evidence": "smallest population refers to MIN(Population);"}
{"sample_id": 7875, "db_id": "world", "final": {"question": "What is the language of the smallest population country?", "sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode ORDER BY T1.Population ASC LIMIT 1", "source_tables": ["countrylanguage", "country"]}, "evidence": "smallest population refers to MIN(Population);"}
{"sample_id": 7888, "db_id": "world", "final": {"question": "What is the GNP growth rate by the country of Shanghai?", "sql": "SELECT CAST((T1.GNP - T1.GNPOld) AS REAL) / T1.GNPOld FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Shanghai'", "source_tables": ["city", "country"]}, "evidence": "GNP growth rate = DIVIDE(SUBTRACT(GNP, GNPOld), GNPOld); Shanghai is a name of city;"}
{"sample_id": 7865, "db_id": "world", "final": {"question": "How many unofficial languages are used in Italy?", "sql": "SELECT SUM(CASE WHEN T2.IsOfficial = 'F' THEN 1 ELSE 0 END) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Italy'", "source_tables": ["countrylanguage", "country"]}, "evidence": "unofficial languages refers to IsOfficial = 'F'; Italy is a name of country;"}
{"sample_id": 7836, "db_id": "world", "final": {"question": "How many percent of countries in North America use English?", "sql": "SELECT CAST(SUM(IIF(T2.Language = 'English', 1, 0)) AS REAL) * 100 / COUNT(T1.Code) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode", "source_tables": ["countrylanguage", "country"]}, "evidence": "percentage = MULTIPLY(DIVIDE(COUNT(Language = 'English' WHERE Continent = 'North America'), COUNT(Language WHERE Continent = 'North America')), 1.0); North America refers to Continent = 'North America'; use English refers to Language = 'English';"}
{"sample_id": 7916, "db_id": "world", "final": {"question": "Among the cities with a population between 140000 and 150000, list the country that has life expectancy greater than 80% life expectancy of all countries.", "sql": "SELECT T2.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Population BETWEEN 140000 AND 150000 GROUP BY T2.Name, LifeExpectancy HAVING LifeExpectancy < ( SELECT AVG(LifeExpectancy) FROM Country ) * 0.8", "source_tables": ["city", "country"]}, "evidence": "life expectancy greater than 80% life expectancy of all countries refers to LifeExpectancy < (MULTIPLY(AVG(LifeExpectancy), 0.8));"}
{"sample_id": 7823, "db_id": "world", "final": {"question": "How many countries use Portuguese?", "sql": "SELECT SUM(CASE WHEN Language = 'Portuguese' THEN 1 ELSE 0 END) FROM CountryLanguage", "source_tables": ["countrylanguage"]}, "evidence": "Portuguese refers to `Language` = 'Portuguese';"}
{"sample_id": 7846, "db_id": "world", "final": {"question": "Give the cities and district names that belong to the country with Hajastan as its local name.", "sql": "SELECT T2.Name, T2.District FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.LocalName = 'Hajastan'", "source_tables": ["city", "country"]}, "evidence": ""}
{"sample_id": 7843, "db_id": "world", "final": {"question": "What is the surface area of the country where Sutton Coldfield city belongs?", "sql": "SELECT T1.SurfaceArea FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Sutton Coldfield'", "source_tables": ["city", "country"]}, "evidence": ""}
{"sample_id": 7872, "db_id": "world", "final": {"question": "Calculate the percentage of the surface area of all countries that uses Chinese as one of their languages.", "sql": "SELECT CAST(SUM(IIF(T2.Language = 'Chinese', T1.SurfaceArea, 0)) AS REAL) * 100 / SUM(T1.SurfaceArea) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode", "source_tables": ["countrylanguage", "country"]}, "evidence": "percentage = DIVIDE(MULTIPLY(SUM(SurfaceArea WHERE Language = 'Chinese'), SUM(SurfaceArea)), 1.0); Chinese as one of the languages refers to Language = 'Chinese';"}
{"sample_id": 7838, "db_id": "world", "final": {"question": "In which continent does the country with the smallest surface area belongs?", "sql": "SELECT Continent FROM Country ORDER BY SurfaceArea LIMIT 1", "source_tables": ["country"]}, "evidence": "smallest surface area refers to MIN(smallest surface area);"}
{"sample_id": 7905, "db_id": "world", "final": {"question": "What are the districts that belong to the country with the lowest surface area?", "sql": "SELECT T1.District FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code ORDER BY T2.SurfaceArea ASC LIMIT 1", "source_tables": ["city", "country"]}, "evidence": "lowest surface area refers to MIN(SurfaceArea);"}
{"sample_id": 7874, "db_id": "world", "final": {"question": "Write down the name of the largest population country.", "sql": "SELECT Name FROM Country ORDER BY Population DESC LIMIT 1", "source_tables": ["country"]}, "evidence": "largest population refers to MAX(Population);"}
{"sample_id": 7898, "db_id": "world", "final": {"question": "What are the districts that belong to the country with the largest surface area?", "sql": "SELECT T1.District FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = ( SELECT Name FROM Country ORDER BY SurfaceArea DESC LIMIT 1 )", "source_tables": ["city", "country"]}, "evidence": "largest surface area refers to MAX(SurfaceArea);"}
{"sample_id": 7910, "db_id": "world", "final": {"question": "What is the life expectancy of the countries that uses Japanese as their language?", "sql": "SELECT AVG(T2.LifeExpectancy) FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Japanese'", "source_tables": ["countrylanguage", "country"]}, "evidence": "uses Japanese as their language refers to `Language` = 'Japanese';"}
{"sample_id": 7839, "db_id": "world", "final": {"question": "Who is the head of the state where the most crowded city belongs?", "sql": "SELECT T1.HeadOfState FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode ORDER BY T2.Population DESC LIMIT 1", "source_tables": ["city", "country"]}, "evidence": "head of the state refers to HeadOfState; most crowded city refers to MAX(Population);"}
{"sample_id": 7909, "db_id": "world", "final": {"question": "List down the cities belongs to the country that has surface area greater than 7000000.", "sql": "SELECT T2.Name, T1.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.SurfaceArea > 7000000", "source_tables": ["city", "country"]}, "evidence": "surface area greater than 7000000 refers to SurfaceArea > 7000000;"}
{"sample_id": 7925, "db_id": "music_platform_2", "final": {"question": "List the authors who created review for podcast titled 'Pop Rocket' in 2016 with rating less than 5.", "sql": "SELECT T2.author_id FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Pop Rocket' AND T2.created_at LIKE '2016-%' AND T2.rating < 5", "source_tables": ["podcasts", "reviews"]}, "evidence": "Pop Rocket' is the title of podcast; in 2016 refers to created_at like'2016%'; rating less than 5 refers to rating < 5; author refers to author_id"}
{"sample_id": 7961, "db_id": "music_platform_2", "final": {"question": "Which titles have the content \"love\" but the category is art produced between 2018 and 2019.", "sql": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE (T2.created_at LIKE '2018-%' AND T1.category = 'arts' AND T2.content LIKE '%love%') OR (T2.created_at LIKE '2019-%' AND T1.category = 'arts' AND T2.content LIKE '%love%')", "source_tables": ["reviews", "categories"]}, "evidence": "content love refers to content = 'love'; 'arts' is the category; produced between 2018 and 2019 refers to year (created_at) BETWEEN 2018 and 2019"}
{"sample_id": 7985, "db_id": "music_platform_2", "final": {"question": "How many ratings of 5 have been given to the podcast \"Please Excuse My Dead Aunt Sally\"?", "sql": "SELECT COUNT(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Please Excuse My Dead Aunt Sally' AND T2.rating = 5", "source_tables": ["podcasts", "reviews"]}, "evidence": "rating of 5 refers to rating = 5; 'Please Excuse My Dead Aunt Sally' is the title of podcast"}
{"sample_id": 7946, "db_id": "music_platform_2", "final": {"question": "What is the average rating of all the podcasts with reviews created in 2019?", "sql": "SELECT AVG(rating) FROM reviews WHERE created_at BETWEEN '2019-01-01T00:00:00-07:00' AND '2019-12-31T23:59:59-07:00'", "source_tables": ["reviews"]}, "evidence": "created in 2019 refers to created_at BETWEEN '2019-01-01T00:00:00' and '2019-12-31T23:59:59'; average rating\u00a0 = Divide (Sum(rating), Count(podcast_id))"}
{"sample_id": 7966, "db_id": "music_platform_2", "final": {"question": "What is the review with the title \"Hosts bring the show down\" for?", "sql": "SELECT title FROM podcasts WHERE podcast_id = ( SELECT podcast_id FROM reviews WHERE title = 'Hosts bring the show down' )", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"Hosts bring the show down\" refers to title of review"}
{"sample_id": 7956, "db_id": "music_platform_2", "final": {"question": "Calculate the average rating of the true crime category.", "sql": "SELECT AVG(T2.rating) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'true-crime'", "source_tables": ["reviews", "categories"]}, "evidence": "average rating = Divide (Sum(rating(category = 'true-crime')), Count(podcast_id(category = 'true-crime')))"}
{"sample_id": 7986, "db_id": "music_platform_2", "final": {"question": "What is the average rating of the podcast \"Please Excuse My Dead Aunt Sally\"?", "sql": "SELECT AVG(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Please Excuse My Dead Aunt Sally'", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"Please Excuse My Dead Aunty Sally\" is the title of podcast; Average rating = Divide (Sum(rating), Count(rating))"}
{"sample_id": 7984, "db_id": "music_platform_2", "final": {"question": "Please list the titles of the podcasts for which the author whose ID is F7E5A318989779D has written a review.", "sql": "SELECT T2.title FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.author_id = 'F7E5A318989779D'", "source_tables": ["podcasts", "reviews"]}, "evidence": "author whose ID is F7E5A318989779D refers to author_id = 'F7E5A318989779D'"}
{"sample_id": 7945, "db_id": "music_platform_2", "final": {"question": "Calculate the percentage of podcasts in the fiction-science-fiction category.", "sql": "SELECT CAST(SUM(CASE WHEN category = 'fiction-science-fiction' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(podcast_id) OR '%' \"percentage\" FROM categories", "source_tables": ["categories"]}, "evidence": "percentage = \u00a0 Divide (Count(podcast_id(category = 'fiction-science-fiction')), Count(podcast_id)) * 100"}
{"sample_id": 7944, "db_id": "music_platform_2", "final": {"question": "How many podcast reviews with a rating of 3 were created during the first quarter of 2015?", "sql": "SELECT COUNT(podcast_id) FROM reviews WHERE rating = 3 AND created_at BETWEEN '2015-01-01T00:00:00-07:00' AND '2015-03-31T23:59:59-07:00'", "source_tables": ["reviews"]}, "evidence": "rating of 3 refers to rating = 3; created during the first quarter of 2015 refers to created_at BETWEEN'2015-01-01T00:00:00-07:00' and '2015-03-31T23:59:59-07:00'"}
{"sample_id": 7949, "db_id": "music_platform_2", "final": {"question": "What is the rating and category of the podcast entitled Sitcomadon?", "sql": "SELECT DISTINCT T3.rating, T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T2.title = 'Sitcomadon'", "source_tables": ["podcasts", "reviews", "categories"]}, "evidence": "entitled refers to title; 'Sitcomadon' is the title of podcast"}
{"sample_id": 7963, "db_id": "music_platform_2", "final": {"question": "What is the average rating of podcasts in comedy category?", "sql": "SELECT AVG(T2.rating) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'comedy'", "source_tables": ["reviews", "categories"]}, "evidence": "comedy category refers to category = 'comedy'; average rating = Divide (Sum(rating), Count(podcast_id))"}
{"sample_id": 7935, "db_id": "music_platform_2", "final": {"question": "Which category does the podcast titled 'SciFi Tech Talk' belong to?", "sql": "SELECT T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'SciFi Tech Talk'", "source_tables": ["podcasts", "categories"]}, "evidence": "podcast titled 'SciFi Tech Talk' refers to title = 'SciFi Tech Talk'"}
{"sample_id": 7979, "db_id": "music_platform_2", "final": {"question": "What is the content of the review under the title \"really interesting!\" and is created on 2018-04-24 at 12:05:16?", "sql": "SELECT content FROM reviews WHERE title = 'really interesting!' AND created_at = '2018-04-24T12:05:16-07:00'", "source_tables": ["reviews"]}, "evidence": "\"really interesting\" is the title of review;\u00a0 created on 2018-04-24 at 12:05:16 refers to created_at = '2018-04-24T12:05:16-07:00'"}
{"sample_id": 7976, "db_id": "music_platform_2", "final": {"question": "How many reviews does \"Planet Money\" have?", "sql": "SELECT COUNT(T2.podcast_id) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Planet Money'", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"Planet Money\" is the title of podcast"}
{"sample_id": 7992, "db_id": "university", "final": {"question": "What is the ID of the university that has only 1% of international students between 2011 to 2015?", "sql": "SELECT university_id FROM university_year WHERE pct_international_students = 1 AND year BETWEEN 2011 AND 2015", "source_tables": ["university_year"]}, "evidence": "has only 1% of international students refers to pct_international_students = 1; between 2011 to 2015 refers to year BETWEEN 2011 AND 2015; ID of university refers to university_id"}
{"sample_id": 8038, "db_id": "university", "final": {"question": "In which nation is Harvard University located?", "sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'Harvard University'", "source_tables": ["country", "university"]}, "evidence": "Harvard University refers to university_name = 'Harvard University'; nation refers to country_name"}
{"sample_id": 8003, "db_id": "university", "final": {"question": "List the names of all the universities that have no less than 50,000 students in the year 2012.", "sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.num_students > 50000 AND T1.year = 2012", "source_tables": ["university", "university_year"]}, "evidence": "have no less than 50,000 students refers to num_students > 50000; name of university refers to university_name;"}
{"sample_id": 8074, "db_id": "university", "final": {"question": "What is the name of the university with the most international students in 2011?", "sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 ORDER BY T1.pct_international_students DESC LIMIT 1", "source_tables": ["university", "university_year"]}, "evidence": "in 2011 refers to year 2011; the most international students refers to MAX(DIVIDE(MULTIPLY(num_students,\u00a0 pct_international_students), 100)); name of university refers to university_id"}
{"sample_id": 8089, "db_id": "university", "final": {"question": "What is the id of the criteria \"Citations Rank\"?", "sql": "SELECT id FROM ranking_criteria WHERE criteria_name = 'Citations Rank'", "source_tables": ["ranking_criteria"]}, "evidence": "criteria \"Citations Rank\" refers to criteria_name = 'Citations Rank';"}
{"sample_id": 7996, "db_id": "university", "final": {"question": "What is the name of the university that has the lowest number of students of all time?", "sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id ORDER BY T1.num_students LIMIT 1", "source_tables": ["university", "university_year"]}, "evidence": "has the lowest number of students refers to min(num_students); name of the university refers to university_name"}
{"sample_id": 7990, "db_id": "university", "final": {"question": "What is the student staff ratio of the university with the highest student staff ratio of all time?", "sql": "SELECT MAX(student_staff_ratio) FROM university_year WHERE student_staff_ratio = ( SELECT MAX(student_staff_ratio) FROM university_year )", "source_tables": ["university_year"]}, "evidence": "highest student staff ratio refers to max(student_staff_ratio)"}
{"sample_id": 8052, "db_id": "university", "final": {"question": "How many universities got less than 50 scores under ranking criteria ID 6 in 2011?", "sql": "SELECT COUNT(*) FROM university_ranking_year WHERE ranking_criteria_id = 6 AND year = 2011 AND score < 50", "source_tables": ["university_ranking_year"]}, "evidence": "in 2011 refers to year 2011; less than 50 scores refers to score < 50;"}
{"sample_id": 8106, "db_id": "university", "final": {"question": "Calculate the average number of criterias among \"Times Higher Education World University Ranking\",\"Shanghai Ranking\" and \"Center for World University Rankings\".", "sql": "SELECT (SUM(CASE WHEN T1.system_name = 'Center for World University Rankings' THEN 1 ELSE 0 END) + SUM(CASE WHEN T1.system_name = 'Shanghai Ranking' THEN 1 ELSE 0 END) + SUM(CASE WHEN T1.system_name = 'Times Higher Education World University Ranking' THEN 1 ELSE 0 END)) / 3 FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id", "source_tables": ["ranking_system", "ranking_criteria"]}, "evidence": "average number of criterias refers to DIVIDE(SUM(id), 3); \"Times Higher Education World University Ranking\", \"Shanghai Ranking\" and \"Center for World University Rankings\" refers to system_name IN ('Times Higher Education World University Ranking', 'Shanghai Ranking', 'Center for World University Rankings');"}
{"sample_id": 7999, "db_id": "university", "final": {"question": "How many universities scored 0 in Awards between 2005 to 2015?", "sql": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id WHERE T1.criteria_name = 'Award' AND T2.year BETWEEN 2005 AND 2015 AND T2.score = 0", "source_tables": ["ranking_criteria", "university_ranking_year"]}, "evidence": "between 2005 to 2015 refers to year BETWEEN 2005 AND 2015; scored 0 refers to score = 0; in Awards refers to criteria_name = 'Award'"}
{"sample_id": 7993, "db_id": "university", "final": {"question": "Give the name of the country that has the most universities.", "sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id GROUP BY T2.country_name ORDER BY COUNT(T1.university_name) DESC LIMIT 1", "source_tables": ["country", "university"]}, "evidence": "has the most universities refers to MAX(COUNT(id)); name of the country refers to country_name"}
{"sample_id": 8079, "db_id": "university", "final": {"question": "Please list the names of the universities with a score in teaching of over 90 in 2011.", "sql": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 AND T2.score > 90", "source_tables": ["university", "ranking_criteria", "university_ranking_year"]}, "evidence": "in 2011 refers to year 2011; in teaching refers to\u00a0 criteria_name = 'Teaching'; score in teaching of over 90 refers to score > 90; name of university refers to university_name;"}
{"sample_id": 8062, "db_id": "university", "final": {"question": "Provide the ranking system name for the \"Quality of Education Rank\" criteria.", "sql": "SELECT T1.system_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T2.criteria_name = 'Quality of Education Rank'", "source_tables": ["ranking_system", "ranking_criteria"]}, "evidence": "the \"Quality of Education Rank\" criteria refers to criteria_name = 'Quality of Education Rank'; ranking system refers to system_name"}
{"sample_id": 8053, "db_id": "university", "final": {"question": "Provide the number of students at Yale University in 2016.", "sql": "SELECT T1.num_students FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Yale University' AND T1.year = 2016", "source_tables": ["university", "university_year"]}, "evidence": "number of students refers to num_students; Yale University refers to university_name = 'Yale University'; in 2016 refers to year = 2016"}
{"sample_id": 8037, "db_id": "university", "final": {"question": "How many female students were there at Stanford University in 2011?", "sql": "SELECT CAST(T1.num_students * T1.pct_female_students AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T2.university_name = 'Stanford University'", "source_tables": ["university", "university_year"]}, "evidence": "in 2011 refers to year 2011; female students refers to DIVIDE(MULTIPLY(pct_female_students, num_students), 100); Stanford University refers to university_name = 'Stanford University';"}
{"sample_id": 8060, "db_id": "university", "final": {"question": "List the ranking criteria under the Shanghai Ranking system.", "sql": "SELECT T2.criteria_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T1.system_name = 'Shanghai Ranking'", "source_tables": ["ranking_system", "ranking_criteria"]}, "evidence": "Shanghai Ranking system refers to system_name = 'Shanghai Ranking'; ranking criteria refers to criteria_name"}
{"sample_id": 8072, "db_id": "university", "final": {"question": "In which year did university ID 1 have the most students?", "sql": "SELECT year FROM university_year WHERE university_id = 1 ORDER BY num_students DESC LIMIT 1", "source_tables": ["university_year"]}, "evidence": "have the most students refers to MAX(num_students)"}
{"sample_id": 7989, "db_id": "university", "final": {"question": "How many state universities are there?", "sql": "SELECT COUNT(*) FROM university WHERE university_name LIKE '%State%'", "source_tables": ["university"]}, "evidence": "state universities refers to university_name LIKE '%State%';"}
{"sample_id": 8087, "db_id": "university", "final": {"question": "Give the id of \"Center for World University Rankings\".", "sql": "SELECT id FROM ranking_system WHERE system_name = 'Center for World University Rankings'", "source_tables": ["ranking_system"]}, "evidence": "\"Center for World University Rankings\" refers to system_name = 'Center for World University Rankings';"}
{"sample_id": 8056, "db_id": "university", "final": {"question": "Which country has the University of S\u00c3\u00a3o Paulo?", "sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'University of S\u00e3o Paulo'", "source_tables": ["country", "university"]}, "evidence": "the University of S\u00c3\u00a3o Paulo refers to university_name = 'University of S\u00e3o Paulo'; which country refers to country_name;"}
{"sample_id": 8064, "db_id": "university", "final": {"question": "Provide the ranking criteria and scores in 2005 that were received by Harvard University.", "sql": "SELECT T1.criteria_name, T2.score FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'Harvard University' AND T2.year = 2005", "source_tables": ["university", "ranking_criteria", "university_ranking_year"]}, "evidence": "Harvard University refers to university_name = 'Harvard University'; in 2005 refers to year = 2005; ranking criteria refers to criteria_name;"}
{"sample_id": 8001, "db_id": "university", "final": {"question": "How many times did the Yale University achieve a score of no less than 10 in the Quality of Education Rank?", "sql": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'Yale University' AND T2.score >= 10 AND T1.criteria_name = 'Quality of Education Rank'", "source_tables": ["university", "ranking_criteria", "university_ranking_year"]}, "evidence": "Yale University refers to university_name = 'Yale University'; a score of no less than 10 refers to score > = 10; in the Quality of Education Rank refers to criteria_name = 'Quality of Education Rank'"}
{"sample_id": 8030, "db_id": "university", "final": {"question": "What is the university ID with the most students in 2011?", "sql": "SELECT university_id FROM university_year WHERE year = 2011 ORDER BY num_students DESC LIMIT 1", "source_tables": ["university_year"]}, "evidence": "most students refers to MAX(num_students), in 2011 refers to year = 2011"}
{"sample_id": 8112, "db_id": "university", "final": {"question": "What is the average score of all universities in 2012?", "sql": "SELECT AVG(score) FROM university_ranking_year WHERE year = 2012", "source_tables": ["university_ranking_year"]}, "evidence": "average score refers to avg(score); in 2012 refers to year = 2012"}
{"sample_id": 8044, "db_id": "university", "final": {"question": "How many students at the university earned a score of 90 in 2011?", "sql": "SELECT COUNT(*) FROM university_year AS T1 INNER JOIN university_ranking_year AS T2 ON T1.university_id = T2.university_id WHERE T2.score = 90 AND T1.year = 2011", "source_tables": ["university_ranking_year", "university_year"]}, "evidence": "in 2011 refers to year 2011; earned a score of 90 refers to score = 90;"}
{"sample_id": 8031, "db_id": "university", "final": {"question": "How many institutions with over 50,000 students in 2011 had a percentage of oversea students of more than 10%?", "sql": "SELECT COUNT(*) FROM university_year WHERE year = 2011 AND num_students > 50000 AND pct_international_students > 10", "source_tables": ["university_year"]}, "evidence": "institutions with over 50,000 students refers to num_students > 50000; in 2011 refers to year = 2011; percentage of oversea students of more than 10% refers to pct_international_students > 10;"}
{"sample_id": 8105, "db_id": "university", "final": {"question": "How many times more was the number of students of University of Ottawa than Joseph Fourier University in 2013?", "sql": "SELECT CAST(SUM(CASE WHEN T2.university_name = 'University of Ottawa' THEN T1.num_students ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.university_name = 'Joseph Fourier University' THEN T1.num_students ELSE 0 END) FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2013", "source_tables": ["university", "university_year"]}, "evidence": "Joseph Fourier University refers to university_name = 'Joseph Fourier University'; University of Ottawa refers to university_name = 'University of Ottawa'; in 2013 refers to year = 2013; how many times more refers to DIVIDE(SUM(num_students where university_name = 'University of Ottawa'), SUM(num_students where university_name = 'Joseph Fourier University'))"}
{"sample_id": 8027, "db_id": "university", "final": {"question": "How many students attended universities were there in 2011?", "sql": "SELECT SUM(num_students) FROM university_year WHERE year = 2011", "source_tables": ["university_year"]}, "evidence": "in 2011 refers to year = 2011;"}
{"sample_id": 8048, "db_id": "university", "final": {"question": "What is the country ID of the University of Tokyo?", "sql": "SELECT country_id FROM university WHERE university_name = 'University of Tokyo'", "source_tables": ["university"]}, "evidence": "University of Tokyo refers to university_name = 'University of Tokyo';"}
{"sample_id": 8057, "db_id": "university", "final": {"question": "How many international students attended Harvard University in 2012?", "sql": "SELECT CAST(T2.num_students * T2.pct_international_students AS REAL) / 100 FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id WHERE T1.university_name = 'Harvard University' AND T2.year = 2012", "source_tables": ["university", "university_year"]}, "evidence": "Harvard University refers to university_name = 'Harvard University'; international students refers to DIVIDE(MULTIPLY(num_students, pct_international_students), 100); in 2012 refers to year = 2012"}
{"sample_id": 8156, "db_id": "sales_in_weather", "final": {"question": "What is the percentage of the units of item no.5 sold among all units of items sold in store no.3 on the day with the highest max temperature in 2012?", "sql": "SELECT CAST(SUM(CASE WHEN T1.item_nbr = 5 THEN units * 1 ELSE 0 END) AS REAL) * 100 / SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.\"date\" LIKE '%2012%' AND T3.tmax = ( SELECT MAX(T3.tmax) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.\"date\" LIKE '%2012%' )", "source_tables": ["weather", "relation", "sales_in_weather"]}, "evidence": "item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; highest max temperature refers to Max(tmax); in 2012 refers to SUBSTR(date, 1, 4) = '2012';\u00a0 Percentage = Divide (Sum(units where item_nbr = 5), Sum(units)) * 100"}
{"sample_id": 8181, "db_id": "sales_in_weather", "final": {"question": "Which weather station has the highest number of stores?", "sql": "SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(store_nbr) DESC LIMIT 1", "source_tables": ["relation"]}, "evidence": "number of store refers to store_nbr; highest number of store refers to Max(Count(store_nbr)); weather station refers to station_nbr"}
{"sample_id": 8189, "db_id": "sales_in_weather", "final": {"question": "In weather station 17, which store sold the highest quantity of item 45 in October 2012?", "sql": "SELECT T1.store_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE T1.item_nbr = 45 AND T2.station_nbr = 17 AND T1.\"date\" LIKE '%2012-10%' GROUP BY T1.store_nbr ORDER BY SUM(T1.units) DESC LIMIT 1", "source_tables": ["relation", "sales_in_weather"]}, "evidence": "weather station 17 refers to station_nbr = 17; item 45 refers to item_nbr = 45; in October 2012 refers to SUBSTR(date, 1, 7) = '2012-10': highest quantity refers to Max(Sum(units)); store refers to store_nbr"}
{"sample_id": 8195, "db_id": "sales_in_weather", "final": {"question": "Which station has the highest number of stores? Calculate the said station's average maximum temperature in February 2012.", "sql": "SELECT CAST(SUM(T2.tmax) AS REAL) / 29 FROM ( SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(store_nbr) DESC LIMIT 1 ) AS T1 INNER JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr WHERE SUBSTR(T2.\"date\", 1, 7) = '2012-02'", "source_tables": ["weather", "relation"]}, "evidence": "station with highest number of stores refers to station_nbr where Max(Count(store_nbr)); station refers to station_nbr; in February 2012 refers to substring (date, 1, 7) = '2012-02'; average maximum temperature = Divide(Sum(tmax), 29)"}
{"sample_id": 8177, "db_id": "sales_in_weather", "final": {"question": "What is the item number of the product with the highest number of units sold in store number 1 on 1/1/2012?", "sql": "SELECT item_nbr FROM sales_in_weather WHERE \"date\" = '2012-01-01' AND store_nbr = 1 ORDER BY units DESC LIMIT 1", "source_tables": ["sales_in_weather"]}, "evidence": "item number refers to item_nbr; highest number of units sold refers to Max(units); store no.1 refers to store_nbr = 1; on 1/1/2012 refers to date = '2012-01-01'"}
{"sample_id": 8149, "db_id": "sales_in_weather", "final": {"question": "How many units of item no.5 were sold in store no.3 in total on days with a total precipitation of over 0.05?", "sql": "SELECT SUM(CASE WHEN T3.preciptotal > 0.05 THEN units ELSE 0 END) AS sum FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T1.item_nbr = 5", "source_tables": ["weather", "relation", "sales_in_weather"]}, "evidence": "item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; with a total precipitation of over 0.05 refers to preciptotal > 0.05"}
{"sample_id": 8138, "db_id": "sales_in_weather", "final": {"question": "How many units of item no.9 were sold in store no.1 in total in January, 2012?", "sql": "SELECT SUM(units) FROM sales_in_weather WHERE SUBSTR(\"date\", 6, 2) = '01' AND SUBSTR(\"date\", 1, 4) = '2012' AND item_nbr = 9 AND store_nbr = 1", "source_tables": ["sales_in_weather"]}, "evidence": "store no. 1 refers to store_nbr = 1; item no. 9 refers to item_nbr = 9; in January refers to SUBSTR(date, 1, 4) = '2012' and SUBSTR(date, 6, 2) = '01'"}
{"sample_id": 8164, "db_id": "sales_in_weather", "final": {"question": "For the weather station which recorded the highest temperature above the 30-year normal, how many stores does it have?", "sql": "SELECT store_nbr FROM relation WHERE station_nbr = ( SELECT station_nbr FROM weather ORDER BY depart DESC LIMIT 1 )", "source_tables": ["weather", "relation"]}, "evidence": "highest temperature above the 30-year normal refers to Max(depart)"}
{"sample_id": 8171, "db_id": "sales_in_weather", "final": {"question": "Provide the code summarization for the weather recorded by the weather station which contained the no.2 store on 2013/2/12.", "sql": "SELECT T1.codesum FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.\"date\" = '2013-02-12' AND T2.store_nbr = 2", "source_tables": ["weather", "relation"]}, "evidence": "no.2 store refers to store_nbr = 2; on 2013/2/12 refers to date = '2013-02-12'; code summarization refers to codesum"}
{"sample_id": 8190, "db_id": "sales_in_weather", "final": {"question": "What are the items sold by the store during the day whose station recorded the thickest snowfall?", "sql": "SELECT T1.item_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN ( SELECT station_nbr, \"date\" FROM weather ORDER BY snowfall DESC LIMIT 1 ) AS T3 ON T2.station_nbr = T3.station_nbr", "source_tables": ["weather", "relation", "sales_in_weather"]}, "evidence": "thickest snowfall refers to Max(snowfall); item refers to item_nbr"}
{"sample_id": 8152, "db_id": "sales_in_weather", "final": {"question": "How many more units of item no.16 were sold on the day with the highest max temperature in 2012 in store no.5 than in store no.10?", "sql": "SELECT ( SELECT SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.item_nbr = 16 AND T1.\"date\" LIKE '%2012%' AND T1.store_nbr = 5 GROUP BY tmax ORDER BY T3.tmax DESC LIMIT 1 ) - ( SELECT SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.item_nbr = 16 AND T1.\"date\" LIKE '%2012%' AND T1.store_nbr = 6 GROUP BY tmax ORDER BY T3.tmax DESC LIMIT 1 )", "source_tables": ["weather", "relation", "sales_in_weather"]}, "evidence": "store no. 5 refers to store_nbr = 5; store no. 10 refers to store_nbr = 10; item no.16 refers to item_nbr = 16; in 2012 refers to SUBSTR(date, 1, 4) = '2012'; highest max temperature refers to Max(tmax); more units sold refers to Subtract ( Sum(units where store_nbr = 5), Sum(units where store_nbr = 10))"}
{"sample_id": 8180, "db_id": "sales_in_weather", "final": {"question": "Between 1/1/2012 to 12/31/2014, which date recorded the hottest temperature in weather station 1?", "sql": "SELECT \"date\" FROM weather WHERE station_nbr = 1 AND CAST(SUBSTR(\"date\", 1, 4) AS int) BETWEEN 2012 AND 2014 ORDER BY tmax DESC LIMIT 1", "source_tables": ["weather"]}, "evidence": "weather station 1 refers to station_nbr = 1; hottest temperature refers to Max(tmax); between 1/1/2012 to 12/31/2014 refers to SUBSTR(date, 1, 4) between 2012 and 2014"}
{"sample_id": 8184, "db_id": "sales_in_weather", "final": {"question": "How many stores belong to the most windy station?", "sql": "SELECT COUNT(store_nbr) FROM relation WHERE station_nbr = ( SELECT station_nbr FROM weather ORDER BY avgspeed DESC LIMIT 1 )", "source_tables": ["weather", "relation"]}, "evidence": "most windy station refers to Max(avgspeed)"}
{"sample_id": 8178, "db_id": "sales_in_weather", "final": {"question": "How many stores are in weather station 12?", "sql": "SELECT SUM(store_nbr) FROM relation WHERE station_nbr = 12", "source_tables": ["relation"]}, "evidence": "weather station 12 refers to station_nbr = 12; number of stores refers to Count(store_nbr)"}
{"sample_id": 8146, "db_id": "sales_in_weather", "final": {"question": "On how many days with the max temperature over 90 did the sale of item no.5 in store no.3 exceed 100?", "sql": "SELECT SUM(CASE WHEN units > 100 THEN 1 ELSE 0 END) AS count FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.\"date\", 1, 4) = '2012' AND T1.item_nbr = 5 AND tmax > 90", "source_tables": ["weather", "relation", "sales_in_weather"]}, "evidence": "max temperature over 90 refers to tmax > 90; item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; sale exceed 100 refers to units > 100; number of days refers to count (date)"}
{"sample_id": 8200, "db_id": "sales_in_weather", "final": {"question": "What is the minimum dew point?", "sql": "SELECT MIN(dewpoint) FROM weather", "source_tables": ["weather"]}, "evidence": "minimum dew point refers to Min(dewpoint)"}
{"sample_id": 8252, "db_id": "mondial_geo", "final": {"question": "The lake with the highest altitude is located in which city?", "sql": "SELECT T2.City FROM lake AS T1 LEFT JOIN located AS T2 ON T2.Lake = T1.Name ORDER BY T1.Altitude DESC LIMIT 1", "source_tables": ["located", "lake"]}, "evidence": ""}
{"sample_id": 8296, "db_id": "mondial_geo", "final": {"question": "How many times longer is the longest border in the United States than the shortest?", "sql": "SELECT MAX(T2.Length) / MIN(T2.Length) FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country2 WHERE T1.Name = 'United States'", "source_tables": ["borders", "country"]}, "evidence": "How many times longer = longest border / shortest border"}
{"sample_id": 8245, "db_id": "mondial_geo", "final": {"question": "Which country has the highest GDP?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP DESC LIMIT 1", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8354, "db_id": "mondial_geo", "final": {"question": "What is the average area of Asian countries?", "sql": "SELECT AVG(Area) FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country WHERE T2.Continent = 'Asia'", "source_tables": ["encompasses", "country"]}, "evidence": "Asia is a continent"}
{"sample_id": 8370, "db_id": "mondial_geo", "final": {"question": "How many people reside in the nation's capital city, which is situated in the nation that attained independence on 8/15/1947?", "sql": "SELECT T3.Population FROM politics AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code INNER JOIN city AS T3 ON T3.Name = T2.Capital WHERE T1.Independence = '1947-08-15'", "source_tables": ["city", "politics", "country"]}, "evidence": ""}
{"sample_id": 8310, "db_id": "mondial_geo", "final": {"question": "What is the GDP of the European Continent?", "sql": "SELECT SUM(T4.GDP) FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN economy AS T4 ON T4.Country = T1.Code WHERE T3.Name = 'Europe'", "source_tables": ["economy", "encompasses", "continent", "country"]}, "evidence": ""}
{"sample_id": 8231, "db_id": "mondial_geo", "final": {"question": "What is the population of African in 'Turks and Caicos Islands'?", "sql": "SELECT T2.Percentage * T1.Population FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'African' AND T1.Name = 'Turks and Caicos Islands'", "source_tables": ["country", "ethnicgroup"]}, "evidence": "African is the name of enthic groups in the country; Population of (African in Turks and Calcos Island) = (percentage of African) * (population of Turks and Calcos Island)"}
{"sample_id": 8225, "db_id": "mondial_geo", "final": {"question": "What is the full name of the country with 100% Africans?", "sql": "SELECT T1.Name FROM ethnicGroup AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Percentage = 100 AND T1.Name = 'African'", "source_tables": ["country", "ethnicgroup"]}, "evidence": "Percentage = 100 means 100% of the population"}
{"sample_id": 8456, "db_id": "mondial_geo", "final": {"question": "What kind of mountain is Ampato? Which province and nation does this mountain belong to?", "sql": "SELECT T1.Type, T3.Name, T4.Name FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN country AS T4 ON T3.Country = T4.Code WHERE T1.Name = 'Ampato'", "source_tables": ["mountain", "province", "geo_mountain", "country"]}, "evidence": "Nation refers to country"}
{"sample_id": 8309, "db_id": "mondial_geo", "final": {"question": "Please list the countries that share the shortest border.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 ORDER BY T2.Length ASC LIMIT 1", "source_tables": ["borders", "country"]}, "evidence": ""}
{"sample_id": 8458, "db_id": "mondial_geo", "final": {"question": "What percentage of nations have achieved independence since 1993 and practice parliamentary democracy? Please include any three parliament-based democracies that attained independence after 1993.", "sql": "SELECT SUM(IIF(government = 'parliamentary democracy', 1, 0)) , CAST(SUM(IIF(government = 'parliamentary democracy', 1, 0)) AS REAL) * 100 / COUNT(*) FROM politics AS t1 WHERE STRFTIME('%Y', independence) >= '1993'", "source_tables": ["politics"]}, "evidence": "Percentage of rivers with lengths greater than 3,000 miles = [(Total number of rivers with lengths greater than 3,000 miles) / (Total number of rivers)] * 100%"}
{"sample_id": 8247, "db_id": "mondial_geo", "final": {"question": "Please list the capital cities of the countries with an inflation rate under 2.", "sql": "SELECT T1.Capital FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.Inflation < 2", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8262, "db_id": "mondial_geo", "final": {"question": "How many organizations are established in countries where people speak Bosnian?", "sql": "SELECT COUNT(T2.Name) FROM language AS T1 INNER JOIN organization AS T2 ON T1.Country = T2.Country WHERE T1.Name = 'Bosnian'", "source_tables": ["organization", "language"]}, "evidence": "Bosnian is one of language"}
{"sample_id": 8274, "db_id": "mondial_geo", "final": {"question": "Which country has the most neighbors? Give the full name of the country.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC LIMIT 1", "source_tables": ["borders", "country"]}, "evidence": ""}
{"sample_id": 8224, "db_id": "mondial_geo", "final": {"question": "Provide the country with its full name which has the most ethnic group? List them all ethnic group together with its percentage.", "sql": "SELECT T1.Name, T2.Name, T2.Percentage FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Name = ( SELECT T1.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY COUNT(T2.Name) DESC LIMIT 1 ) GROUP BY T1.Name, T2.Name, T2.Percentage", "source_tables": ["country", "ethnicgroup"]}, "evidence": ""}
{"sample_id": 8236, "db_id": "mondial_geo", "final": {"question": "List all countries with negative growth in population. State the country, population and growth.", "sql": "SELECT T1.Name, T1.Population, T2.Population_Growth FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T2.Population_Growth < 0", "source_tables": ["population", "country"]}, "evidence": "Negative growth in population means population_growth < 0"}
{"sample_id": 8464, "db_id": "mondial_geo", "final": {"question": "Name the first organisation established in the Paris city. State its abbreviation, full name and date of establishment.", "sql": "SELECT Abbreviation, Name, Established FROM organization WHERE City = 'Paris' ORDER BY Established ASC LIMIT 1", "source_tables": ["organization"]}, "evidence": "Paris is a city"}
{"sample_id": 8408, "db_id": "mondial_geo", "final": {"question": "How many rivers belong to more than one country? Name the provinces where we can find them.", "sql": "SELECT River, GROUP_CONCAT(Province) FROM geo_river GROUP BY River HAVING COUNT(DISTINCT Country) > 1", "source_tables": ["geo_river"]}, "evidence": ""}
{"sample_id": 8505, "db_id": "mondial_geo", "final": {"question": "Lists all governments with a parliamentary democracy that achieved their independence between 01/01/1950 and 12/31/1999.", "sql": "SELECT * FROM politics WHERE STRFTIME('%Y', Independence) BETWEEN '1950' AND '1999' AND Government = 'parliamentary democracy'", "source_tables": ["politics"]}, "evidence": "Inhabitants, synonymous with population"}
{"sample_id": 8407, "db_id": "mondial_geo", "final": {"question": "How many deserts are not located in a single country? Name them.", "sql": "SELECT Desert FROM geo_desert GROUP BY Desert HAVING COUNT(DISTINCT Country) > 1", "source_tables": ["geo_desert"]}, "evidence": ""}
{"sample_id": 8462, "db_id": "mondial_geo", "final": {"question": "Provide a list of all organisations with headquarters in London?", "sql": "SELECT Name FROM organization WHERE City = 'London'", "source_tables": ["organization"]}, "evidence": "London is a city"}
{"sample_id": 8331, "db_id": "mondial_geo", "final": {"question": "Name the tallest mountain on Himalaya and what is its height.", "sql": "SELECT Name, Height FROM mountain WHERE Mountains = 'Himalaya' ORDER BY Height DESC LIMIT 1", "source_tables": ["mountain"]}, "evidence": "Tallest refers to max(height)"}
{"sample_id": 8416, "db_id": "mondial_geo", "final": {"question": "Which river with its mouth in the Donau River and a length greater than 500 km is located in Slovenia?", "sql": "SELECT T2.River FROM country AS T1 INNER JOIN geo_river AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Slovenia' AND T2.River IN ( SELECT NAME FROM river WHERE Length > 500 AND River = 'Donau' )", "source_tables": ["geo_river", "river", "country"]}, "evidence": ""}
{"sample_id": 8237, "db_id": "mondial_geo", "final": {"question": "For countries with area between 500000 to 1000000, state the country and infant mortality rate.", "sql": "SELECT T1.Name, T2.Infant_Mortality FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T1.Area BETWEEN 500000 AND 1000000", "source_tables": ["population", "country"]}, "evidence": ""}
{"sample_id": 8415, "db_id": "mondial_geo", "final": {"question": "Which country with a city with a population between 50,000 and 300,000 inhabitants and which is a member of an organization established between 03/01/1991 and 04/30/1991 is also a member of the EBRD?", "sql": "SELECT T2.Country FROM country AS T1 INNER JOIN isMember AS T2 ON T1.Code = T2.Country INNER JOIN organization AS T3 ON T3.Country = T2.Country INNER JOIN city AS T4 ON T4.Country = T3.Country WHERE T3.Abbreviation = 'EBRD' AND T4.Population BETWEEN 50000 AND 300000 AND T3.Established BETWEEN '1991-01-31' AND '1991-04-30'", "source_tables": ["ismember", "organization", "city", "country"]}, "evidence": ""}
{"sample_id": 8333, "db_id": "mondial_geo", "final": {"question": "Name all the volcano mountains between the height of 2000 to 4000.", "sql": "SELECT Name FROM mountain WHERE Type = 'volcano' AND Height BETWEEN 2000 AND 4000", "source_tables": ["mountain"]}, "evidence": ""}
{"sample_id": 8313, "db_id": "mondial_geo", "final": {"question": "Please list the countries on the European Continent that have a population growth of more than 3%.", "sql": "SELECT T2.Country FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN population AS T4 ON T4.Country = T1.Code WHERE T3.Name = 'Europe' AND T4.Population_Growth > 0.03", "source_tables": ["encompasses", "continent", "country", "population"]}, "evidence": ""}
{"sample_id": 8433, "db_id": "mondial_geo", "final": {"question": "What is the population gap between the United Kingdom and Italy?", "sql": "SELECT MAX(Population) - MIN(Population) FROM country WHERE Name = 'United Kingdom' OR Name = 'Italy'", "source_tables": ["country"]}, "evidence": "Population gap = Total population of the United Kingdom - Total population of Italy"}
{"sample_id": 8390, "db_id": "mondial_geo", "final": {"question": "What is the total number of cities that Japan have?", "sql": "SELECT COUNT(T3.Name) FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T1.Name = 'Japan'", "source_tables": ["city", "province", "country"]}, "evidence": "Japan is a country"}
{"sample_id": 8402, "db_id": "mondial_geo", "final": {"question": "What is the GDP per capita in Switzerland?", "sql": "SELECT T2.GDP / T1.Population FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Switzerland'", "source_tables": ["economy", "country"]}, "evidence": "GDP per capita = GDP / Population"}
{"sample_id": 8306, "db_id": "mondial_geo", "final": {"question": "Among the countries with a GDP of over 1000000, how many of them have mountains higher than 1000?", "sql": "SELECT COUNT(DISTINCT T1.Name) FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country INNER JOIN economy AS T3 ON T3.Country = T1.Code INNER JOIN mountain AS T4 ON T4.Name = T2.Mountain WHERE T3.GDP > 1000000 AND T4.Height > 1000", "source_tables": ["economy", "mountain", "geo_mountain", "country"]}, "evidence": ""}
{"sample_id": 8382, "db_id": "mondial_geo", "final": {"question": "How much sea is around the island where Kerinci Mountain is located?", "sql": "SELECT COUNT(T4.Sea) FROM mountain AS T1 INNER JOIN mountainOnIsland AS T2 ON T1.Name = T2.Mountain INNER JOIN island AS T3 ON T3.Name = T2.Island INNER JOIN islandIn AS T4 ON T4.Island = T3.Name WHERE T1.Name = 'Kerinci'", "source_tables": ["mountain", "islandin", "mountainonisland", "island"]}, "evidence": ""}
{"sample_id": 8371, "db_id": "mondial_geo", "final": {"question": "What is the total number of Afro-Asian people in the most populous Asian country governed by a monarchy?", "sql": "SELECT T5.Percentage * T6.Population FROM ethnicGroup AS T5 INNER JOIN country AS T6 ON T5.Country = T6.Code WHERE Country = ( SELECT T3.Code FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN politics AS T4 ON T4.Country = T3.Code WHERE T4.Government = 'monarchy' AND T1.Name = 'Asia' ORDER BY T3.Population DESC LIMIT 1 ) AND T5.Name = 'Afro-Asian'", "source_tables": ["encompasses", "ethnicgroup", "politics", "continent", "country"]}, "evidence": "Total Number of People = Percentage * Population"}
{"sample_id": 8365, "db_id": "mondial_geo", "final": {"question": "How many lakes are there in the 4th most populous African country with a republican form of government?", "sql": "SELECT COUNT(*) FROM geo_lake WHERE Country = ( SELECT T4.Code FROM ( SELECT T2.Code, T2.Population FROM encompasses AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code INNER JOIN politics AS T3 ON T1.Country = T3.Country WHERE T1.Continent = 'Africa' AND T1.Percentage = 100 AND T3.Government = 'republic' ORDER BY Population DESC LIMIT 4 ) AS T4 ORDER BY population ASC LIMIT 1 )", "source_tables": ["geo_lake", "encompasses", "politics", "country"]}, "evidence": ""}
{"sample_id": 8451, "db_id": "mondial_geo", "final": {"question": "Which company falls under the category of an associated member? Please provide the organization's full name.", "sql": "SELECT NAME FROM organization WHERE country IN ( SELECT country FROM politics WHERE dependent != '' )", "source_tables": ["organization", "politics"]}, "evidence": ""}
{"sample_id": 8424, "db_id": "mondial_geo", "final": {"question": "List all the seas with which the deepest sea merges.", "sql": "SELECT T2.Sea2 FROM sea AS T1 INNER JOIN mergesWith AS T2 ON T1.Name = T2.Sea1 WHERE T1.Name = ( SELECT Name FROM sea ORDER BY Depth DESC LIMIT 1 )", "source_tables": ["sea", "mergeswith"]}, "evidence": ""}
{"sample_id": 8229, "db_id": "mondial_geo", "final": {"question": "When did 'Bulgaria' gain independence?", "sql": "SELECT T2.Independence FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Bulgaria'", "source_tables": ["politics", "country"]}, "evidence": ""}
{"sample_id": 8263, "db_id": "mondial_geo", "final": {"question": "What is the highest infant mortality rate per thousand of the countries whose inflation is under 3?", "sql": "SELECT MAX(T2.Infant_Mortality) FROM economy AS T1 INNER JOIN population AS T2 ON T1.Country = T2.Country WHERE T1.Inflation < 3", "source_tables": ["economy", "population"]}, "evidence": ""}
{"sample_id": 8475, "db_id": "mondial_geo", "final": {"question": "Name the organizations with the most members.", "sql": "SELECT T1.Name FROM organization AS T1 INNER JOIN isMember AS T2 ON T2.Country = T1.Country INNER JOIN country AS T3 ON T2.Country = T3.Code GROUP BY T1.Name ORDER BY COUNT(T3.Name) DESC LIMIT 1", "source_tables": ["ismember", "organization", "country"]}, "evidence": ""}
{"sample_id": 8491, "db_id": "mondial_geo", "final": {"question": "What is the name of the most recently founded organization in Saudi Arabia?", "sql": "SELECT T1.Name FROM organization AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Saudi Arabia' ORDER BY T1.Established DESC LIMIT 1", "source_tables": ["organization", "country"]}, "evidence": "Saudi Arabia is a country"}
{"sample_id": 8473, "db_id": "mondial_geo", "final": {"question": "Which country has the least organization membership?", "sql": "SELECT country FROM organization WHERE country IN ( SELECT Code FROM country ) GROUP BY country ORDER BY COUNT(NAME) LIMIT 1", "source_tables": ["organization", "country"]}, "evidence": ""}
{"sample_id": 8360, "db_id": "mondial_geo", "final": {"question": "What kind of political system is in place in the country with the highest inflation rate?", "sql": "SELECT T1.Government FROM politics AS T1 INNER JOIN economy AS T2 ON T1.Country = T2.Country ORDER BY T2.Inflation DESC LIMIT 1", "source_tables": ["economy", "politics"]}, "evidence": "Political system refers to government form"}
{"sample_id": 8339, "db_id": "mondial_geo", "final": {"question": "Name the river of which Lorraine is on. Please name the mountains where to source flow from?", "sql": "SELECT T1.SourceLongitude, T1.SourceLatitude, T1.SourceAltitude FROM river AS T1 INNER JOIN geo_river AS T2 ON T2.River = T1.Name WHERE T2.Province = 'Lorraine'", "source_tables": ["geo_river", "river"]}, "evidence": "Lorraine is a province"}
{"sample_id": 8487, "db_id": "mondial_geo", "final": {"question": "Provide a full list of countries and its population with more than 70% of Chinese.", "sql": "SELECT T1.Name, T1.Population * T2.Percentage FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Chinese' AND T2.Percentage > 70", "source_tables": ["country", "ethnicgroup"]}, "evidence": ""}
{"sample_id": 8470, "db_id": "mondial_geo", "final": {"question": "List all members and member type of the Islamic Development Bank.", "sql": "SELECT T2.Country, T2.Type FROM organization AS T1 INNER JOIN isMember AS T2 ON T1.Abbreviation = T2.Organization INNER JOIN country AS T3 ON T2.Country = T3.Code WHERE T1.Name = 'Islamic Development Bank'", "source_tables": ["ismember", "organization", "country"]}, "evidence": ""}
{"sample_id": 8477, "db_id": "mondial_geo", "final": {"question": "Among the organizations where headquarters are in the 'USA', what is the percentage of the them are in 'Washington'?", "sql": "SELECT CAST(SUM(CASE WHEN T2.City = 'Washington' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.City) FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country WHERE T2.Country = 'USA'", "source_tables": ["organization", "country"]}, "evidence": "percentage can be computed by [count(City = 'Washington') / count(all cities)] * 100%"}
{"sample_id": 8288, "db_id": "mondial_geo", "final": {"question": "Where is the capital of country which has the largest percentage of Malay people?", "sql": "SELECT T1.Capital FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Malay' ORDER BY T2.Percentage DESC LIMIT 1", "source_tables": ["country", "ethnicgroup"]}, "evidence": "Malay is one of country names"}
{"sample_id": 8242, "db_id": "mondial_geo", "final": {"question": "Which country has the biggest percentage of the albanian ethnic group?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Albanian' ORDER BY T2.Percentage DESC LIMIT 1", "source_tables": ["country", "ethnicgroup"]}, "evidence": ""}
{"sample_id": 8452, "db_id": "mondial_geo", "final": {"question": "Which nations have a boundary with the Kalahari Desert?", "sql": "SELECT T3.Name FROM desert AS T1 INNER JOIN geo_desert AS T2 ON T1.Name = T2.Desert INNER JOIN country AS T3 ON T3.Code = T2.Country WHERE T1.Name = 'Kalahari'", "source_tables": ["country", "desert", "geo_desert"]}, "evidence": "Nation refers to country"}
{"sample_id": 8471, "db_id": "mondial_geo", "final": {"question": "State the area and population of the country where Asia Pacific Economic Cooperation headquarter is located.", "sql": "SELECT T2.Name, T2.Population FROM organization AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Name = 'Asia Pacific Economic Cooperation'", "source_tables": ["organization", "country"]}, "evidence": "Asia Pacific Economic Cooperation is an organization name"}
{"sample_id": 8446, "db_id": "mondial_geo", "final": {"question": "Which of the top 3 economies by GDP has the lowest proportion of the economy devoted to agriculture?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP DESC, T2.Agriculture ASC LIMIT 1", "source_tables": ["economy", "country"]}, "evidence": "Economies refers to countries"}
{"sample_id": 8405, "db_id": "mondial_geo", "final": {"question": "What is the population density of Hanoi's home country?", "sql": "SELECT T1.Population / T1.Area FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T3.Name = 'Hanoi'", "source_tables": ["city", "province", "country"]}, "evidence": "population density = Population / Area"}
{"sample_id": 8434, "db_id": "mondial_geo", "final": {"question": "In which city is the European Bank for Reconstruction and Development's headquarters? Please include the city and province where the headquarters are located in your answer.", "sql": "SELECT City, Province FROM organization WHERE Name = 'European Bank for Reconstruction and Development'", "source_tables": ["organization"]}, "evidence": ""}
{"sample_id": 8393, "db_id": "mondial_geo", "final": {"question": "In which country is the city of Grozny? Give the full name of the country.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T3.Name = 'Grozny'", "source_tables": ["city", "province", "country"]}, "evidence": "Grozny is a province"}
{"sample_id": 8265, "db_id": "mondial_geo", "final": {"question": "Which country has the highest GDP per capita?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP / T1.Population DESC LIMIT 1", "source_tables": ["economy", "country"]}, "evidence": "GDP per capita = GDP / population"}
{"sample_id": 8301, "db_id": "mondial_geo", "final": {"question": "Among the independent countries whose type of government is republic, what is the biggest number of deserts they have?", "sql": "SELECT COUNT(T3.Desert) FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN geo_desert AS T3 ON T3.Country = T2.Country WHERE T2.Government = 'republic'", "source_tables": ["politics", "geo_desert", "country"]}, "evidence": ""}
{"sample_id": 8380, "db_id": "mondial_geo", "final": {"question": "For the countries have the population north of a billion, which one has the lowest GDP? Give the full name of the country.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Population > 1000000000 ORDER BY T2.GDP ASC LIMIT 1", "source_tables": ["economy", "country"]}, "evidence": "billion = 1000000000"}
{"sample_id": 8292, "db_id": "mondial_geo", "final": {"question": "What is the area of the country which became independent in 1921/3/13?", "sql": "SELECT T1.Area FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T2.Independence = '1921-03-13'", "source_tables": ["politics", "country"]}, "evidence": ""}
{"sample_id": 8330, "db_id": "mondial_geo", "final": {"question": "State the name of the lake in Albania province and in which city does it located at.", "sql": "SELECT Lake, City FROM located WHERE Province = 'Albania' AND Lake IS NOT NULL", "source_tables": ["located"]}, "evidence": ""}
{"sample_id": 8226, "db_id": "mondial_geo", "final": {"question": "List the infant mortality of country with the least Amerindian.", "sql": "SELECT T1.Infant_Mortality FROM population AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Country = T2.Country WHERE T2.Name = 'Amerindian' ORDER BY T2.Percentage ASC LIMIT 1", "source_tables": ["population", "ethnicgroup"]}, "evidence": ""}
{"sample_id": 8570, "db_id": "software_company", "final": {"question": "What is the income of female customers ages from 30 to 55 years old and has an occupation of machine-op-inspct?", "sql": "SELECT T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Female' AND T1.age >= 30 AND T1.age <= 55 AND T1.OCCUPATION = 'Machine-op-inspct'", "source_tables": ["demog", "customers"]}, "evidence": "female customers ages from 30 to 55 years old refer to SEX = 'Female' where age BETWEEN 30 AND 55; income refers to INCOME_K;"}
{"sample_id": 8566, "db_id": "software_company", "final": {"question": "Among the female customers with an level of education of 3 and below, list their income.", "sql": "SELECT INCOME_K FROM Demog WHERE GEOID IN ( SELECT GEOID FROM Customers WHERE EDUCATIONNUM < 3 AND SEX = 'Female' )", "source_tables": ["demog", "customers"]}, "evidence": "female customers with level of education of 3 and below refer to SEX = 'Female' where EDUCATIONNUM \u2264 3; income refers to INCOME_K;"}
{"sample_id": 8535, "db_id": "software_company", "final": {"question": "What is the number of inhabitants and income of geographic identifier 239?", "sql": "SELECT INHABITANTS_K FROM Demog WHERE GEOID = 239", "source_tables": ["demog"]}, "evidence": "geographic identifier 239 refers to GEOID = 239; number of inhabitants refers to INHABITANTS_K; income refers to INCOME_K;"}
{"sample_id": 8512, "db_id": "software_company", "final": {"question": "Please list the occupations of the customers with an education level of 11.", "sql": "SELECT DISTINCT OCCUPATION FROM Customers WHERE EDUCATIONNUM = 11", "source_tables": ["customers"]}, "evidence": "education level of 11 refers to EDUCATIONNUM = 11;"}
{"sample_id": 8538, "db_id": "software_company", "final": {"question": "What is the geographic identifier and income of the oldest customer?", "sql": "SELECT T1.GEOID, T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID ORDER BY T1.age DESC LIMIT 1", "source_tables": ["demog", "customers"]}, "evidence": "the oldest customer refers to MAX(age); geographic identifier refers to GEOID; income refers to INCOME_K;"}
{"sample_id": 8539, "db_id": "software_company", "final": {"question": "Among the male customers with an level of education of 4 and below, list their income K.", "sql": "SELECT INCOME_K FROM Demog WHERE GEOID IN ( SELECT GEOID FROM Customers WHERE EDUCATIONNUM < 4 AND SEX = 'Male' )", "source_tables": ["demog", "customers"]}, "evidence": "male customers with an level of education of 4 and below refer to SEX = 'Male' where EDUCATIONNUM < 4;"}
{"sample_id": 8576, "db_id": "software_company", "final": {"question": "List the income and number of inhabitants of customers with a reference ID greater than the 50% of average of number of false response?", "sql": "SELECT T2.INCOME_K, T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID INNER JOIN Mailings1_2 AS T3 ON T1.ID = T3.REFID WHERE T3.REFID > ( SELECT 0.5 * COUNT(CASE WHEN RESPONSE = 'false' THEN 1 ELSE NULL END) / COUNT(RESPONSE) FROM Mailings1_2 )", "source_tables": ["demog", "customers", "mailings1_2"]}, "evidence": "reference ID greater than the 50% of average of number of false response refers to REFID > DIVIDE(MULTIPLY(0.5, COUNT(RESPONSE = 'false')), COUNT(RESPONSE)); income refers to INCOME_K; number of inhabitants refer to INHABITANTS_K;"}
{"sample_id": 8542, "db_id": "software_company", "final": {"question": "What is the occupation of customers within number of inhabitants ranges of 30 to 40?", "sql": "SELECT DISTINCT T1.OCCUPATION FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INHABITANTS_K >= 30 AND T2.INHABITANTS_K <= 40", "source_tables": ["demog", "customers"]}, "evidence": "number of inhabitants ranges of 30 to 40 refers to INHABITANTS_K BETWEEN 30 AND 40;"}
{"sample_id": 8541, "db_id": "software_company", "final": {"question": "In widowed male customers ages from 40 to 60, how many of them has an income ranges from 3000 and above?", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.age >= 40 AND T1.age <= 60 AND T1.MARITAL_STATUS = 'Widowed' AND T1.SEX = 'Male' AND T2.INCOME_K >= 2000 AND T2.INCOME_K <= 3000", "source_tables": ["demog", "customers"]}, "evidence": "widowed male customers ages from 40 to 60 refer to SEX = 'Male' where age BETWEEN 40 AND 60 and MARITAL_STATUS = 'Widowed'; income ranges from 3000 and above refers to INCOME_K BETWEEN 2000 AND 3000;"}
{"sample_id": 8518, "db_id": "software_company", "final": {"question": "Among the male customers, how many of them come from a place with over 30,000 inhabitants?", "sql": "SELECT COUNT(T1.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Male' AND T2.INHABITANTS_K > 30", "source_tables": ["demog", "customers"]}, "evidence": "SEX = 'Male', over 30,000 inhabitants refer to NHABITANTS_K > 30; place refers to GEOID;"}
{"sample_id": 8554, "db_id": "software_company", "final": {"question": "Of customers who provide other services, how many are from places where inhabitants are more than 20000?", "sql": "SELECT COUNT(T2.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.OCCUPATION = 'Other-service' AND T2.INHABITANTS_K > 20", "source_tables": ["demog", "customers"]}, "evidence": "OCCUPATION = 'Other-service'; inhabitants are more than 20000 refer to INHABITANTS_K > 20;"}
{"sample_id": 8540, "db_id": "software_company", "final": {"question": "List the occupation and income of male customers with an level of education of 4 to 6.", "sql": "SELECT T1.OCCUPATION, T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.EDUCATIONNUM >= 4 AND T1.EDUCATIONNUM <= 6 AND T1.SEX = 'Male'", "source_tables": ["demog", "customers"]}, "evidence": "male customers with an level of education of 4 to 6 refer to SEX = 'Male' where EDUCATIONNUM BETWEEN 4 AND 6; income refers to INCOME_K;"}
{"sample_id": 8578, "db_id": "software_company", "final": {"question": "What is the geographic ID and total income per year when the average income is above 3300 dollar.", "sql": "SELECT GEOID, INHABITANTS_K * INCOME_K * 12 FROM Demog WHERE INCOME_K > 3300", "source_tables": ["demog"]}, "evidence": "total income per year refers to MULTIPLY(12, INHABITANTS_K, INCOME_K) where INCOME_K > 3300; geographic ID refers to GEOID;"}
{"sample_id": 8514, "db_id": "software_company", "final": {"question": "Among the customers over 30, how many of them are Machine-op-inspcts?", "sql": "SELECT COUNT(ID) FROM Customers WHERE OCCUPATION = 'Machine-op-inspct' AND age > 30", "source_tables": ["customers"]}, "evidence": "over 30 refers to age > 30; OCCUPATION = 'Machine-op-inspct';"}
{"sample_id": 8553, "db_id": "software_company", "final": {"question": "How many teenagers are working as Machine-op-inspct?", "sql": "SELECT COUNT(ID) teenager_number FROM Customers WHERE OCCUPATION = 'Machine-op-inspct' AND age >= 13 AND age <= 19", "source_tables": ["customers"]}, "evidence": "teenager is a person aged between 13 and 19 years; OCCUPATION = 'Machine-op-inspct';"}
{"sample_id": 8738, "db_id": "chicago_crime", "final": {"question": "Please list any three criminal sexual assault cases against persons where the criminals have been arrested.", "sql": "SELECT T2.case_number FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.title = 'Criminal Sexual Assault' AND T2.arrest = 'TRUE' AND T1.crime_against = 'Persons' LIMIT 3", "source_tables": ["crime", "fbi_code"]}, "evidence": "\"Criminal Sexual Assault\" is the title of crime; against person refers to crime_against = 'Persons'; criminals have been arrested refers to arrest = 'TRUE'; cases refers to case_number"}
{"sample_id": 8742, "db_id": "chicago_crime", "final": {"question": "What was the major type of crime that happened in the Rogers Park community area?", "sql": "SELECT T1.fbi_code_no, T1.title FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T3.community_area_name = 'Rogers Park' GROUP BY T1.fbi_code_no, T1.title", "source_tables": ["community_area", "crime", "fbi_code"]}, "evidence": "\"Rogers Park\" is the community_area_name; major type of crime refers to title"}
{"sample_id": 8701, "db_id": "chicago_crime", "final": {"question": "How many crimes against society happened in the Wentworth district according to the FBI?", "sql": "SELECT SUM(CASE WHEN T1.crime_against = 'Society' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T3.district_name = 'Wentworth'", "source_tables": ["crime", "fbi_code", "district"]}, "evidence": "\"Wentworth\" is the district_name; crime against society refers to crime_against = 'Society\""}
{"sample_id": 8690, "db_id": "chicago_crime", "final": {"question": "List the name and population of the communities where more than average solicit for prostitutes were reported.", "sql": "SELECT T2.community_area_name, T2.population FROM Crime AS T1 INNER JOIN Community_Area AS T2 ON T2.community_area_no = T1.community_area_no INNER JOIN IUCR AS T3 ON T3.iucr_no = T1.iucr_no WHERE T3.iucr_no = ( SELECT iucr_no FROM IUCR WHERE secondary_description = 'SOLICIT FOR PROSTITUTE' GROUP BY iucr_no HAVING COUNT(iucr_no) > ( SELECT SUM(CASE WHEN secondary_description = 'SOLICIT FOR PROSTITUTE' THEN 1.0 ELSE 0 END) / COUNT(iucr_no) AS average FROM IUCR ) )", "source_tables": ["iucr", "community_area", "crime"]}, "evidence": "\"SOLICIT FOR PROSTITUTE\" is the secondary_description; more than average refers to count(iucr_no) > Divide (Count(secondary_description = 'SOLICIT FOR PROSTITUTE'), Count(iucr_no)); name of community refers to community_area_name"}
{"sample_id": 8717, "db_id": "chicago_crime", "final": {"question": "What are the general and specific descriptions of the most common crime incidents that happened in an aircraft?", "sql": "SELECT T2.primary_description, T2.secondary_description FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.location_description = 'AIRCRAFT' GROUP BY T1.iucr_no ORDER BY COUNT(T1.iucr_no) DESC LIMIT 1", "source_tables": ["iucr", "crime"]}, "evidence": "in aircraft refers to location_description = 'AIRCRAFT'; general description refers to primary_description; specific description refers to secondary_description; most common crime incidents refers to Max(Count(iucr_no))"}
{"sample_id": 8756, "db_id": "chicago_crime", "final": {"question": "What is the ward ID of the most crowded ward?", "sql": "SELECT ward_no FROM Ward ORDER BY Population DESC LIMIT 1", "source_tables": ["ward"]}, "evidence": "most crowded ward refers to Max(Population)"}
{"sample_id": 8596, "db_id": "chicago_crime", "final": {"question": "How many crimes had happened in Central Chicago?", "sql": "SELECT COUNT(*) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T2.district_name = 'Central'", "source_tables": ["crime", "district"]}, "evidence": "Central Chicago refers to district_name = 'Central'"}
{"sample_id": 8680, "db_id": "chicago_crime", "final": {"question": "What kind of location in Austin reported the most number of crimes?", "sql": "SELECT T2.location_description FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no WHERE T1.district_name = 'Austin' GROUP BY T2.location_description ORDER BY COUNT(T2.case_number) DESC LIMIT 1", "source_tables": ["crime", "district"]}, "evidence": "\"Austin\" is the district_name; the most number of crime refers to Max(Count(case_number)); kind of location refers to location_description"}
{"sample_id": 8753, "db_id": "chicago_crime", "final": {"question": "List down the report number of crimes associated with the district commander named Jill M. Stevens.", "sql": "SELECT SUM(CASE WHEN T1.commander = 'Jill M. Stevens' THEN 1 ELSE 0 END) FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no", "source_tables": ["crime", "district"]}, "evidence": "report number refers report_no; 'Jill M. Stevens\" is the commander"}
{"sample_id": 8719, "db_id": "chicago_crime", "final": {"question": "How many arrests have been made due to forcible entry burglary that took place in a day care center?", "sql": "SELECT SUM(CASE WHEN T2.arrest = 'TRUE' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.location_description = 'DAY CARE CENTER' AND T1.secondary_description = 'FORCIBLE ENTRY' AND T1.primary_description = 'BURGLARY'", "source_tables": ["iucr", "crime"]}, "evidence": "\"BURGLARY\" is the primary_description; 'FORCIBLE ENTRY' is the secondary_description; 'DAY CARE CENTER' is the location_description; arrests have been made refers to arrest = 'TRUE'"}
{"sample_id": 8607, "db_id": "chicago_crime", "final": {"question": "Where did case No. JB100065 happen? Give the name of the district.", "sql": "SELECT T1.district_name FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.case_number = 'JB100065'", "source_tables": ["crime", "district"]}, "evidence": "case No. JB100065 refers to case_number = 'JB100065'; name of the district refers to district_name"}
{"sample_id": 8600, "db_id": "chicago_crime", "final": {"question": "Among the crimes in Woodlawn, how many of them happened in January, 2018?", "sql": "SELECT SUM(CASE WHEN T1.community_area_name = 'Woodlawn' THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.date LIKE '%1/2018%'", "source_tables": ["community_area", "crime"]}, "evidence": "Woodlawn refers to community_area_name = 'Woodlawn'; in January 2018 refers to date like '%1/2018%'"}
{"sample_id": 8765, "db_id": "chicago_crime", "final": {"question": "Among the incidents with the generic description of \"BATTERY\" in the IUCR classification, how many of them do not have arrests made?", "sql": "SELECT SUM(CASE WHEN T2.arrest = 'FALSE' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.primary_description = 'BATTERY'", "source_tables": ["iucr", "crime"]}, "evidence": "general description refers to primary_description; 'BATTERY' is the primary_description; do not have arrest made refers to arrest = 'FALSE'"}
{"sample_id": 8681, "db_id": "chicago_crime", "final": {"question": "On average, how many community areas are there in a side?", "sql": "SELECT CAST(COUNT(T1.ward_no) AS REAL) / COUNT(DISTINCT T3.side) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T2.ward_no = T1.ward_no INNER JOIN Community_Area AS T3 ON T3.community_area_no = T2.community_area_no", "source_tables": ["community_area", "crime", "ward"]}, "evidence": "average = Divide(Count(ward_no), Count(side))"}
{"sample_id": 8617, "db_id": "chicago_crime", "final": {"question": "Give the FBI code description of case No.JB134191.", "sql": "SELECT description FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.case_number = 'JB134191'", "source_tables": ["crime", "fbi_code"]}, "evidence": "case No.JB134191 refers to case_number = 'JB134191'"}
{"sample_id": 8741, "db_id": "chicago_crime", "final": {"question": "Please name three communities that experience the fraud incident.", "sql": "SELECT T3.community_area_name FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T1.title = 'Criminal Sexual Assault' LIMIT 3", "source_tables": ["community_area", "crime", "fbi_code"]}, "evidence": "communities refers to community_area_name; 'Fraud Incident' is the title of crime"}
{"sample_id": 8757, "db_id": "chicago_crime", "final": {"question": "How many incidents have the general description of \"ASSAULT\" in the IUCR classification?", "sql": "SELECT COUNT(*) FROM IUCR WHERE primary_description = 'ASSAULT'", "source_tables": ["iucr"]}, "evidence": "general description refers to primary_description; 'ASSAULT' is the primary_description; incidents refers to iucr_no"}
{"sample_id": 8667, "db_id": "chicago_crime", "final": {"question": "List the report number of crimes reported in a community area in the far north side with a population greater than 60,000.", "sql": "SELECT SUM(CASE WHEN T1.population > 60000 THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.side = 'Far North '", "source_tables": ["community_area", "crime"]}, "evidence": "report number refers to report_no; the far north side refers to side = 'Far North'; population greater than 60,000 refers to population > '60000'"}
{"sample_id": 8611, "db_id": "chicago_crime", "final": {"question": "Which district had the most number of first degree murders? Give the district number.", "sql": "SELECT T2.district_no FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.secondary_description = 'FIRST DEGREE MURDER' GROUP BY T2.district_no ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["iucr", "crime"]}, "evidence": "the most number refers to max(count(case_number)); first degree murder refers to secondary_description = 'FIRST DEGREE MURDER'; district number refers to district_no"}
{"sample_id": 8610, "db_id": "chicago_crime", "final": {"question": "How many simple assaults happened on 2018/9/8?", "sql": "SELECT SUM(CASE WHEN T2.secondary_description = 'SIMPLE' THEN 1 ELSE 0 END) FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.date LIKE '%9/8/2018%' AND T2.primary_description = 'ASSAULT'", "source_tables": ["iucr", "crime"]}, "evidence": "simple assault refers to primary_description = 'ASSAULT'AND secondary_description = 'SIMPLE'; on 2018/9/8 refers to date like '%9/8/2018%'"}
{"sample_id": 8624, "db_id": "chicago_crime", "final": {"question": "What is the population of the district with the least population?", "sql": "SELECT SUM(population) FROM Community_Area GROUP BY side ORDER BY SUM(population) LIMIT 1", "source_tables": ["community_area"]}, "evidence": "the least population refers = min(sum(population))"}
{"sample_id": 8739, "db_id": "chicago_crime", "final": {"question": "Please state the district name where incident number JB106545 took place.", "sql": "SELECT T1.case_number FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T2.title = 'Criminal Sexual Assault' AND T2.crime_against = 'Persons' AND T1.arrest = 'TRUE' LIMIT 3", "source_tables": ["crime", "fbi_code"]}, "evidence": "incident number JB106545 refers to case_number = 'JB106545'"}
{"sample_id": 8656, "db_id": "chicago_crime", "final": {"question": "How many percent of domestic violence cases were arrested in West Pullman?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.arrest = 'TRUE' THEN T2.report_no END) AS REAL) * 100 / COUNT(T2.report_no) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'West Pullman' AND T2.domestic = 'TRUE'", "source_tables": ["community_area", "crime"]}, "evidence": "domestic violence refers to domestic = 'TRUE'; arrested refers to arrest = 'TRUE'; West Pullman refers to community_area_name = 'West Pullman'; percent = divide(count(report_no where arrest = 'TRUE'), count(report_no)) where domestic = 'TRUE' and community_area_name = 'West Pullman' * 100%"}
{"sample_id": 8712, "db_id": "chicago_crime", "final": {"question": "How many districts are there in the police district building with a zip code of 60608?", "sql": "SELECT COUNT(*) AS cnt FROM District WHERE zip_code = 60608", "source_tables": ["district"]}, "evidence": "district refers to district_name"}
{"sample_id": 8659, "db_id": "chicago_crime", "final": {"question": "How many crimes are commited on January 1, 2018?", "sql": "SELECT COUNT(*) FROM Crime WHERE date LIKE '1/1/2018%'", "source_tables": ["crime"]}, "evidence": "on January 1 2018 refers to date LIKE '1/1/2018%'"}
{"sample_id": 8589, "db_id": "chicago_crime", "final": {"question": "Who is the person responsible for the crime cases in Central Chicago?", "sql": "SELECT commander FROM District WHERE district_name = 'Central'", "source_tables": ["district"]}, "evidence": "the person responsible for the crime cases refers to commander; Central Chicago refers to district_name = 'Central'"}
{"sample_id": 8603, "db_id": "chicago_crime", "final": {"question": "What is the average number of crimes in a neighborhood in Central Chicago?", "sql": "SELECT CAST(COUNT(T1.report_no) AS REAL) / COUNT(T2.community_area_no) FROM Crime AS T1 INNER JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.side = 'Central'", "source_tables": ["community_area", "crime"]}, "evidence": "Central Chicago refers to side = 'Central'; average number = divide(count(report_no), count(community_area_no))"}
{"sample_id": 8609, "db_id": "chicago_crime", "final": {"question": "Give the name of the person who was responsible for case No.JB524952.", "sql": "SELECT T1.commander FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.case_number = 'JB524952'", "source_tables": ["crime", "district"]}, "evidence": "name of the person refers to commander; case No.JB524952 refers to case_number = 'JB524952'"}
{"sample_id": 8604, "db_id": "chicago_crime", "final": {"question": "Among the crimes in all the districts in Chicago, what is the percentage of them happening in the Central district?", "sql": "SELECT CAST(SUM(CASE WHEN T2.district_name = 'Central' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.case_number) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no", "source_tables": ["crime", "district"]}, "evidence": "the Central district refers to district_name = 'Central'; percentage = divide(count(case_number where district_name = 'Central'), count(case_number)) * 100%"}
{"sample_id": 8699, "db_id": "chicago_crime", "final": {"question": "How many different types of crimes, according to the primary description, have occurred in the Hermosa neighborhood?", "sql": "SELECT SUM(CASE WHEN T4.neighborhood_name = 'Hermosa' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN Community_Area AS T3 ON T3.community_area_no = T2.community_area_no INNER JOIN Neighborhood AS T4 ON T4.community_area_no = T3.community_area_no", "source_tables": ["iucr", "community_area", "crime", "neighborhood"]}, "evidence": "\"Hermosa\" is the neighborhood_name"}
{"sample_id": 8657, "db_id": "chicago_crime", "final": {"question": "Calculate the percentage of the domestic violence cases handled by Christopher Taliaferro. Among them, list report numbers of cases that happened in the bank.", "sql": "SELECT CAST(COUNT(CASE WHEN T1.domestic = 'TRUE' THEN T1.report_no END) AS REAL) * 100 / COUNT(T1.report_no), COUNT(CASE WHEN T1.domestic = 'TRUE' AND T1.location_description = 'BANK' THEN T1.report_no END) AS \"number\" FROM Crime AS T1 INNER JOIN Ward AS T2 ON T2.ward_no = T1.ward_no WHERE T2.alderman_first_name = 'Christopher' AND T2.alderman_last_name = 'Taliaferro'", "source_tables": ["crime", "ward"]}, "evidence": "domestic violence refers to domestic = 'TRUE'; report number refers to report_no; in the bank refers to location_description = 'BANK'; percentage = divide(count(report_no where domestic = 'TRUE'), count(report_no)) * 100%"}
{"sample_id": 8695, "db_id": "chicago_crime", "final": {"question": "What is the first name of the aldermen of wards with more than 50,000 inhabitants?", "sql": "SELECT alderman_first_name FROM Ward WHERE Population > 50000", "source_tables": ["ward"]}, "evidence": "more than 50000 inhabitants refers to Population > 50000; first name of alderman refers to alderman_first_name"}
{"sample_id": 8641, "db_id": "chicago_crime", "final": {"question": "Provide the responsible person and his/her email address of Chicago Lawn.", "sql": "SELECT commander, email FROM District WHERE district_name = 'Chicago Lawn'", "source_tables": ["district"]}, "evidence": "responsible person refers to commander; email address refers to email; Chicago Lawn refers to district_name = 'Chicago Lawn'"}
{"sample_id": 8682, "db_id": "chicago_crime", "final": {"question": "Which community area has the highest number of crimes reported on the street?", "sql": "SELECT T1.community_area_no FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T2.location_description = 'STREET' GROUP BY T1.community_area_no ORDER BY COUNT(T2.location_description) DESC LIMIT 1", "source_tables": ["community_area", "crime"]}, "evidence": "reported on the street refers to location_description = 'STREET'; community area with highest number of crime refers to Max(Count(location_description)); community area refers to community_area_no"}
{"sample_id": 8592, "db_id": "chicago_crime", "final": {"question": "How many neighborhoods are there in the community area of Lincoln Square?", "sql": "SELECT COUNT(T3.community_area_no) FROM ( SELECT T1.community_area_no FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no WHERE community_area_name = 'Lincoln Square' GROUP BY T1.community_area_no ) T3", "source_tables": ["community_area", "neighborhood"]}, "evidence": "the community area of Lincoln Square refers to community_area_name = 'Lincoln Square'"}
{"sample_id": 8614, "db_id": "chicago_crime", "final": {"question": "Who was the alderman of the legislative district where case No. JB103470 took place? Give the full name.", "sql": "SELECT T1.alderman_first_name, T1.alderman_last_name FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.case_number = 'JB103470'", "source_tables": ["crime", "ward"]}, "evidence": "case No. JB103470 refers to case_number = 'JB103470'; full name refers to alderman_first_name, alderman_last_name"}
{"sample_id": 8708, "db_id": "chicago_crime", "final": {"question": "What percentage of non-domestic crimes have occurred in the Jefferson Park district?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.domestic = 'FALSE' THEN T2.case_number END) AS REAL) * 100 / COUNT(T2.case_number) FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no WHERE T1.district_name = 'Jefferson Park'", "source_tables": ["crime", "district"]}, "evidence": "non domestic crime refers to domestic = 'FALSE'; 'Jefferson Park' is the district_name; percentage = Divide (Count (case_number where domestic = 'FALSE'), Count(case_number)) * 100"}
{"sample_id": 8709, "db_id": "chicago_crime", "final": {"question": "What is the average population of the wards where apartment crimes have been reported without arrests?", "sql": "SELECT AVG(T2.Population) FROM Crime AS T1 INNER JOIN Ward AS T2 ON T2.ward_no = T1.ward_no WHERE T1.location_description = 'APARTMENT' AND T1.arrest = 'FALSE'", "source_tables": ["crime", "ward"]}, "evidence": "apartment crime refers to location_description = 'APARTMENT';\u00a0 without arrest refers to arrest = 'FALSE'; average population = AVG(Population)"}
{"sample_id": 8698, "db_id": "chicago_crime", "final": {"question": "What is the exact location of the crimes that occurred in the Belmont Cragin community?", "sql": "SELECT T2.latitude, T2.longitude FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'Belmont Cragin' GROUP BY T2.latitude, T2.longitude", "source_tables": ["community_area", "crime"]}, "evidence": "Belmont Cragin community refers to community_area_name = 'Belmont Cragin'; exact location refers to latitude, longitude"}
{"sample_id": 8773, "db_id": "food_inspection", "final": {"question": "How many restaurants' owners are in California?", "sql": "SELECT COUNT(owner_state) FROM businesses WHERE owner_state = 'CA'", "source_tables": ["businesses"]}, "evidence": "restaurants' owners in California refer to owner_state = 'CA';"}
{"sample_id": 8813, "db_id": "food_inspection", "final": {"question": "How many establishments with the tax code H24 have complaint inspections of 5 or more?", "sql": "SELECT COUNT(*) FROM ( SELECT T1.business_id FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.tax_code = 'H24' AND T1.type = 'Complaint' GROUP BY T1.business_id HAVING COUNT(T1.business_id) > 5 ) T3", "source_tables": ["businesses", "inspections"]}, "evidence": "establishments with the tax code H24 refer to business_id where tax_code = 'H24'; complaint inspections of 5 or more refer to inspections where type = 'Complaint' and COUNT(business_id) \u2265 5;"}
{"sample_id": 8798, "db_id": "food_inspection", "final": {"question": "Give the address of the business with the most number of the low risk violations.", "sql": "SELECT T2.address FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'Low Risk' GROUP BY T2.address ORDER BY COUNT(T1.business_id) DESC LIMIT 1", "source_tables": ["violations", "businesses"]}, "evidence": "the most number of the low risk violations refers to MAX(COUNT(business_id)) where risk_category = 'Low Risk' ;"}
{"sample_id": 8804, "db_id": "food_inspection", "final": {"question": "How many eateries are located in Hayward?", "sql": "SELECT COUNT(business_id) FROM businesses WHERE city = 'HAYWARD'", "source_tables": ["businesses"]}, "evidence": "eateries in Hayward refer city = 'HAYWARD';"}
{"sample_id": 8853, "db_id": "food_inspection", "final": {"question": "Among the violations in 2016, how many of them have unscheduled inspections?", "sql": "SELECT COUNT(T2.business_id) FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.\"date\") = '2016' AND T2.type = 'Routine - Unscheduled'", "source_tables": ["violations", "inspections"]}, "evidence": "unscheduled inspections refer to type = 'Routine - Unschedule'; year(date) = 2016;"}
{"sample_id": 8797, "db_id": "food_inspection", "final": {"question": "How many unscheduled routine inspections did \"Soma Restaurant And Bar\" have?", "sql": "SELECT COUNT(T1.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Soma Restaurant And Bar' AND T1.type = 'Routine - Unscheduled'", "source_tables": ["businesses", "inspections"]}, "evidence": "\"Soma Restaurant And Bar\" is the name of the business; unscheduled routine inspections refer to type = 'Routine - Unscheduled';"}
{"sample_id": 8847, "db_id": "food_inspection", "final": {"question": "In businesses that violates 103157 on May 27, 2016 , what is the name of the business that has an unscheduled inspection?", "sql": "SELECT DISTINCT T3.name FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN businesses AS T3 ON T2.business_id = T3.business_id WHERE T1.\"date\" = '2016-05-27' AND T1.violation_type_id = 103157 AND T2.type = 'Routine - Unscheduled'", "source_tables": ["violations", "inspections", "businesses"]}, "evidence": "businesses that violates 103157 refer to business_id where violation_type_id = 103157; date = '2016-05-27'; unscheduled inspection refers to type = 'Routine - Unscheduled';"}
{"sample_id": 8810, "db_id": "food_inspection", "final": {"question": "In 2016, which city has the highest number of establishments with the highest health and safety hazards?", "sql": "SELECT T2.city FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.\"date\") = '2016' AND T1.risk_category = 'High Risk' GROUP BY T2.city ORDER BY COUNT(T2.city) DESC LIMIT 1", "source_tables": ["violations", "businesses"]}, "evidence": "the highest health and safety hazards refer to risk_category = 'High Risk'; year(date) = 2016; establishments has the same meaning as businesses;"}
{"sample_id": 8833, "db_id": "food_inspection", "final": {"question": "Among violations on 3rd June, 2014, describe any 5 names, located cities and tax codes of the eateries with high risk category.", "sql": "SELECT DISTINCT T2.name, T2.city, T2.tax_code FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' AND T1.\"date\" = '2014-06-03' LIMIT 5", "source_tables": ["violations", "businesses"]}, "evidence": "eateries with high risk category refer to business_id where risk_category = 'High Risk'; 3rd June, 2014 refers to date = '2014-06-03';"}
{"sample_id": 8792, "db_id": "food_inspection", "final": {"question": "Which business had the most number of high risk violations? Give the name of the business.", "sql": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' GROUP BY T2.name ORDER BY COUNT(T2.name) DESC LIMIT 1", "source_tables": ["violations", "businesses"]}, "evidence": "the most number of high risk violations refers to MAX(COUNT(business_id)) where risk_category = 'High';"}
{"sample_id": 8817, "db_id": "food_inspection", "final": {"question": "Between 2014 to 2016, what is the average inpsection score of the establishment owned by Yiu Tim Chan in 808 Pacific Ave, San Francisco?", "sql": "SELECT AVG(T1.score) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.\"date\") BETWEEN '2014' AND '2016' AND T2.owner_name = 'Yiu Tim Chan' AND T2.address = '808 Pacific Ave' AND T2.city = 'San Francisco'", "source_tables": ["businesses", "inspections"]}, "evidence": "average inspection score refers to avg(score); establishment owned by Yiu Tim Chan refers to business_id where owner_name = 'Yiu Tim Chan'; Between 2014 to 2016 refers to year(date) between 2014 and 2016; address = '808 Pacific Ave'; city = 'San Francisco';"}
{"sample_id": 8824, "db_id": "food_inspection", "final": {"question": "How many eateries had low risk for violation with unpermitted food facility description?", "sql": "SELECT COUNT(DISTINCT business_id) FROM violations WHERE risk_category = 'Low Risk' AND description = 'Unpermitted food facility'", "source_tables": ["violations"]}, "evidence": "eateries represent business; low risk for violation refers to risk_category = 'Low Risk';"}
{"sample_id": 8777, "db_id": "food_inspection", "final": {"question": "Among the restaurants being inspected in 2016, how many of them are in San Francisco?", "sql": "SELECT COUNT(DISTINCT T2.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.\"date\") = '2016' AND T2.city IN ('San Francisco', 'SAN FRANCISCO', 'SF', 'S.F.')", "source_tables": ["businesses", "inspections"]}, "evidence": "inspected in 2016 refers to YEAR(date) = 2016; San Francisco refers to city in ('San Francisco', 'SF' ,'S.F.', 'SAN FRANCISCO');"}
{"sample_id": 8830, "db_id": "food_inspection", "final": {"question": "Provide eateries' IDs, names and addresses which were inspected on 30th July, 2016.", "sql": "SELECT DISTINCT T2.business_id, T2.name, T2.address FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.date = '2016-07-30'", "source_tables": ["businesses", "inspections"]}, "evidence": "eateries' IDs inspected on 30th July, 2016 refer to business_id where business_id is not null and date = '2016-07-30';"}
{"sample_id": 8793, "db_id": "food_inspection", "final": {"question": "How many kinds of violations did \"Stacks Restaurant\" have on 2016/10/4?", "sql": "SELECT COUNT(DISTINCT T1.violation_type_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Stacks Restaurant' AND T1.\"date\" = '2016-10-04'", "source_tables": ["violations", "businesses"]}, "evidence": "\"Stacks Restaurant\" is the name of the business; date = '2016-10-04';"}
{"sample_id": 8855, "db_id": "food_inspection", "final": {"question": "In businesses with a score lower than 95 and located around the postal code of 94110, what is the percentage of businesses with a risk category of low risk?", "sql": "SELECT CAST(SUM(CASE WHEN T1.risk_category = 'Low Risk' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.risk_category) FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN businesses AS T3 ON T2.business_id = T3.business_id WHERE T2.score < 95 AND T3.postal_code = 94110", "source_tables": ["violations", "inspections", "businesses"]}, "evidence": "DIVIDE(COUNT(business_id where risk_category = 'Low Risk', score < 95 and postal_code = 94110), COUNT(business_id where score < 95 and postal_code = 94110)) as percentage;"}
{"sample_id": 8799, "db_id": "food_inspection", "final": {"question": "Which business was the first one to get a low risk violation because of \"Permit license or inspection report not posted\"? Give the name of the business.", "sql": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.\"date\" = ( SELECT MIN(\"date\") FROM violations WHERE risk_category = 'Low Risk' AND description = 'Permit license or inspection report not posted' ) AND T1.risk_category = 'Low Risk' AND T1.description = 'Permit license or inspection report not posted'", "source_tables": ["violations", "businesses"]}, "evidence": "low risk violation because of \"Permit license or inspection report not posted\" refers to risk_category = 'Low Risk' where description = 'Permit license or inspection report not posted'; business was the first one refers to name where MIN(date);"}
{"sample_id": 8774, "db_id": "food_inspection", "final": {"question": "How many restaurants have met all requirements in the inspection?", "sql": "SELECT COUNT(score) FROM inspections WHERE score = 100", "source_tables": ["inspections"]}, "evidence": "met all requirements in the inspection refers to score = 100;"}
{"sample_id": 8875, "db_id": "cookbook", "final": {"question": "Which recipe needs the most frozen raspberries in light syrup? State its title.", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.name = 'frozen raspberries in light syrup' AND T2.max_qty = T2.min_qty", "source_tables": ["quantity", "ingredient", "recipe"]}, "evidence": "frozen raspberries in light syrup is a name of an ingredient; max_qty = min_qty"}
{"sample_id": 8924, "db_id": "cookbook", "final": {"question": "Among all recipes containing cheese, what is the percentage of recipes with calories greater than 200?", "sql": "SELECT CAST(SUM(CASE WHEN T4.calories > 200 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id INNER JOIN Nutrition AS T4 ON T4.recipe_id = T1.recipe_id WHERE T3.category = 'cheese'", "source_tables": ["quantity", "nutrition", "ingredient", "recipe"]}, "evidence": "cheese is a category; calories greater than 200 refers to calories > 200; calculation = MULTIPLY(DIVIDE(COUNT(calories > 200 THEN recipe_id), COUNT(recipe_id)), 100)"}
{"sample_id": 8922, "db_id": "cookbook", "final": {"question": "What ingredients does the longest cooking time recipe have?", "sql": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id ORDER BY T1.cook_min DESC LIMIT 1", "source_tables": ["quantity", "ingredient", "recipe"]}, "evidence": "the longest cooking time refers to MAX(cook_min)"}
{"sample_id": 8917, "db_id": "cookbook", "final": {"question": "List the names of recipes that can lead to constipation.", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.iron > 20", "source_tables": ["nutrition", "recipe"]}, "evidence": "lead to constipation refers to iron > 20"}
{"sample_id": 8898, "db_id": "cookbook", "final": {"question": "Provide the title and total time of the recipe which has the highest possibility of gaining weight.", "sql": "SELECT T1.title, T1.prep_min + T1.cook_min + T1.stnd_min FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat DESC LIMIT 1", "source_tables": ["nutrition", "recipe"]}, "evidence": "the highest possibility of gaining weight refers to MAX(total_fat); total time refers to recipe_id, total time refers to TOTAL(prep_min, cook_min, stnd_min)"}
{"sample_id": 8912, "db_id": "cookbook", "final": {"question": "What is the percentage calories protein of Raspberry Chiffon Pie?", "sql": "SELECT pcnt_cal_prot FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie'", "source_tables": ["nutrition", "recipe"]}, "evidence": "Raspberry Chiffon Pie refers title; percentage calories protein refers to pcnt_cal_prot"}
{"sample_id": 8923, "db_id": "cookbook", "final": {"question": "Calculate the percentage of recipes with no cholesterol included and have a cooking time less than 20 minutes among all recipes.", "sql": "SELECT CAST(SUM(CASE WHEN T1.cook_min < 20 AND T2.cholestrl = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id", "source_tables": ["nutrition", "recipe"]}, "evidence": "no cholesterol refers to cholestrl = 0; cooking time less than 20 minutes refers to cook_min < 20; calculation = MULTIPLY(DIVIDE(COUNT(cholestrl = 0 THEN recipe_id), COUNT(recipe_id)), 100)"}
{"sample_id": 8872, "db_id": "cookbook", "final": {"question": "Which recipe in the database contains the most total fat? Give its title.", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat DESC LIMIT 1", "source_tables": ["nutrition", "recipe"]}, "evidence": "the most total fat refers to MAX(total_fat)"}
{"sample_id": 8876, "db_id": "cookbook", "final": {"question": "Give the name of the most widely used ingredient.", "sql": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id GROUP BY T1.name ORDER BY COUNT(T1.name) DESC LIMIT 1", "source_tables": ["ingredient", "quantity"]}, "evidence": "the most widely used ingredient refers to MAX(COUNT(ingredient_id))"}
{"sample_id": 8880, "db_id": "cookbook", "final": {"question": "How much Vitamin A is in Sherry beef?", "sql": "SELECT T2.vitamin_a FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Sherried Beef'", "source_tables": ["nutrition", "recipe"]}, "evidence": "Sherry beef refers to title = 'Sherried Beef'"}
{"sample_id": 8888, "db_id": "cookbook", "final": {"question": "What are the names of the top 5 recipes that are best for wound healing?", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.vitamin_c DESC LIMIT 5", "source_tables": ["nutrition", "recipe"]}, "evidence": "names of the recipes refers to title; best for wound healing refers to MAX(vitamin_c)"}
{"sample_id": 8904, "db_id": "cookbook", "final": {"question": "Describe the ingredients in the recipe with the highest vitamin that helps vision in dim light.", "sql": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id INNER JOIN Nutrition AS T3 ON T3.recipe_id = T2.recipe_id ORDER BY T3.vitamin_a DESC LIMIT 1", "source_tables": ["ingredient", "quantity", "nutrition"]}, "evidence": "the highest vitamin that helps vision in dim light refers to MAX(vitamin_a)"}
{"sample_id": 8869, "db_id": "cookbook", "final": {"question": "How many calories on average does a recipe that comes from \"Produce for Better Health Foundation and 5 a Day\" contain?", "sql": "SELECT AVG(T2.calories) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.source = 'Produce for Better Health Foundation and 5 a Day'", "source_tables": ["nutrition", "recipe"]}, "evidence": "Produce for Better Health Foundation and 5 a Day is a source of recipe; calculation = DIVIDE(SUM(calories), COUNT(recipe_id))"}
{"sample_id": 8878, "db_id": "cookbook", "final": {"question": "How many cups of almonds do you need for a chicken pocket sandwich?", "sql": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Chicken Pocket Sandwich' AND T3.name = 'almonds' AND T2.unit = 'cup(s)'", "source_tables": ["quantity", "ingredient", "recipe"]}, "evidence": "cups is a unit; almonds is a name of an ingredient; chicken pocket sandwich refers to title"}
{"sample_id": 8884, "db_id": "cookbook", "final": {"question": "What are the names of the recipes that will cause stomach pain?", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.iron > 20", "source_tables": ["nutrition", "recipe"]}, "evidence": "cause stomach pain refers to iron > 20"}
{"sample_id": 8971, "db_id": "human_resources", "final": {"question": "Which city and address has zip code of above 90000?", "sql": "SELECT locationcity, address FROM location WHERE zipcode > 90000", "source_tables": ["location"]}, "evidence": "zip code of above 90000 refers to zipcode > 90000; city refers to locationcity"}
{"sample_id": 8958, "db_id": "human_resources", "final": {"question": "How many positions have a maximum salary of no more than US$1000,000?", "sql": "SELECT COUNT(*) FROM position WHERE CAST(REPLACE(SUBSTR(maxsalary, 4), ',', '') AS REAL) < 100000", "source_tables": ["position"]}, "evidence": "maximum salary of no more than US$1000,000 refers to maxsalary < '100000';"}
{"sample_id": 8969, "db_id": "human_resources", "final": {"question": "Mention the employee's full name and performance status who got the lowest in salary per year.", "sql": "SELECT firstname, lastname, performance FROM employee ORDER BY salary ASC LIMIT 1", "source_tables": ["employee"]}, "evidence": "full name = firstname, lastname; the lowest salary refers to MIN(salary)"}
{"sample_id": 8979, "db_id": "human_resources", "final": {"question": "Among the employees with poor performance, provide the managers' full names, location city, address and its zip code.", "sql": "SELECT T1.firstname, T1.lastname, T2.locationcity, T2.address, T2.zipcode FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Manager' AND T1.performance = 'Poor'", "source_tables": ["location", "employee", "position"]}, "evidence": "poor performance refers to performance = 'Poor'; full name = firstname, lastname; managers is a position title"}
{"sample_id": 8961, "db_id": "human_resources", "final": {"question": "What is the full office location address where most of the employees work at?", "sql": "SELECT T2.address, T2.locationcity, T2.state, T2.zipcode FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID GROUP BY T2.address, T2.locationcity, T2.state, T2.zipcode ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["location", "employee"]}, "evidence": "full office location address = address, locationcity, state, zipcode; location where most employees work at refers to MAX(locationID)"}
{"sample_id": 8925, "db_id": "human_resources", "final": {"question": "Which employee has the highest salary? Please give his or her full name.", "sql": "SELECT firstname, lastname FROM employee ORDER BY salary DESC LIMIT 1", "source_tables": ["employee"]}, "evidence": "the highest salary refers to MAX(salary); full name = firstname, lastname"}
{"sample_id": 8957, "db_id": "human_resources", "final": {"question": "Who is the employee with the highest salary? Specify his/her full name.", "sql": "SELECT firstname, lastname FROM employee WHERE CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL) = ( SELECT MAX(CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL)) FROM employee )", "source_tables": ["employee"]}, "evidence": "the highest salary refers to MAX(salary); full name = firstname, lastname"}
{"sample_id": 8963, "db_id": "human_resources", "final": {"question": "How many male Regional Managers are there?", "sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Regional Manager' AND T1.gender = 'M'", "source_tables": ["employee", "position"]}, "evidence": "male refers to gender = 'M'; Regional Managers is a position title"}
{"sample_id": 8930, "db_id": "human_resources", "final": {"question": "In which city's office does Sandy Adams work at?", "sql": "SELECT T2.locationcity FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.lastname = 'Adams' AND T1.firstname = 'Sandy'", "source_tables": ["location", "employee"]}, "evidence": "Sandy Adams is the fullname of an employee; full name = firstname, lastname; city refers to locationcity"}
{"sample_id": 8944, "db_id": "human_resources", "final": {"question": "Give the number of female employees.", "sql": "SELECT COUNT(*) FROM employee WHERE gender = 'F'", "source_tables": ["employee"]}, "evidence": "number of female employees means COUNT(gender = 'F')"}
{"sample_id": 8927, "db_id": "human_resources", "final": {"question": "Please list the social security numbers of the male employees with a salary of over $70,000 a year.", "sql": "SELECT ssn FROM employee WHERE gender = 'M' AND CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL) > 70000", "source_tables": ["employee"]}, "evidence": "social security numbers refers to ssn; male employees refers to gender = 'M'; salary of over $70,000 a year refers to salary > '70000'"}
{"sample_id": 8962, "db_id": "human_resources", "final": {"question": "What is the average salary of all employees with a 2 year degree position?", "sql": "SELECT AVG(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.educationrequired = '2 year degree'", "source_tables": ["employee", "position"]}, "evidence": "2 year degree refers to educationrequired = '2 year degree'; calculation = DIVIDE(SUM(salary), COUNT(positiontitle))"}
{"sample_id": 8977, "db_id": "human_resources", "final": {"question": "List the full names, gender and positions who's location is in New York city.", "sql": "SELECT T1.firstname, T1.lastname, T1.gender, T3.positiontitle FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T2.locationcity = 'New York City'", "source_tables": ["location", "employee", "position"]}, "evidence": "full name = firstname, lastname; New York city refers to locationcity = 'New York City'"}
{"sample_id": 9060, "db_id": "bike_share_1", "final": {"question": "What is the location coordinates of the bike station from which the bike for the trip that last the longest was borrowed?", "sql": "SELECT T2.lat, T2.long FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.duration = ( SELECT MAX(T1.duration) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name )", "source_tables": ["station", "trip"]}, "evidence": "location coordinates refers to (lat, long); bike that was borrowed the longest refers to MAX(duration);"}
{"sample_id": 9047, "db_id": "bike_share_1", "final": {"question": "What is the average duration of trips that ended on a foggy day?", "sql": "SELECT AVG(T1.duration) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.events = 'Fog'", "source_tables": ["weather", "trip"]}, "evidence": "ended on a foggy day refers to end_date where events = 'fog'; average duration = DIVIDE(SUM(duration), COUNT(duration));"}
{"sample_id": 9083, "db_id": "bike_share_1", "final": {"question": "List the names of the stations within Mountain View that were installed on 12/31/2013.", "sql": "SELECT name FROM station WHERE installation_date = '12/31/2013' AND city = 'Mountain View'", "source_tables": ["station"]}, "evidence": "Mountain View refers to city = 'Mountain View'; installed on 12/31/2013 refers to installation_date = '12/31/2013';"}
{"sample_id": 8992, "db_id": "bike_share_1", "final": {"question": "Name all the trip on the days when it rained. State the duration of the trip", "sql": "SELECT T1.id, T1.duration FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code AND T2.date = SUBSTR(CAST(T1.start_date AS TEXT), 1, INSTR(T1.start_date, ' ') - 1) WHERE T2.events LIKE '%Rain%' OR T2.events LIKE '%rain%'", "source_tables": ["weather", "trip"]}, "evidence": "events = 'Rain';"}
{"sample_id": 9058, "db_id": "bike_share_1", "final": {"question": "Please list the starting stations of the bike trips made on a day with a max humidity over 80 in 2013 in the area where the zip code is 94107.", "sql": "SELECT DISTINCT T1.start_station_name FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTR(CAST(T2.date AS TEXT), -4) = '2013' AND T2.zip_code = 94107 AND T2.max_temperature_f > 80", "source_tables": ["weather", "trip"]}, "evidence": "starting stations refers to start_station_name; day with a max humidity over 80 refers to max_humidity>80; in 2013 refers to date LIKE'%2013';"}
{"sample_id": 8997, "db_id": "bike_share_1", "final": {"question": "Calculate the average usage of each bike in the third quarter of year 2013. Find the average wind direction within the same period.", "sql": "SELECT AVG(T1.duration), AVG(T2.wind_dir_degrees) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTR(CAST(T2.date AS TEXT), 1, INSTR(T2.date, '/') - 1) IN ('7', '8', '9') AND SUBSTR(CAST(T2.date AS TEXT), -4) = '2013'", "source_tables": ["weather", "trip"]}, "evidence": "the third quarter of year 2013 implies 3 month interval, including July, August, and September of 2013 and refers to date; the average usage of each bike = DIVIDE(SUM(duration), COUNT(bike_id)); the average wind direction = DIVIDE(SUM(wind_dir_degrees), COUNT(date));"}
{"sample_id": 9093, "db_id": "bike_share_1", "final": {"question": "Which station did the user who started at Market at 4th station ended their trip at the time of 12:45:00 PM and the date of 8/29/2013 and what is the location coordinates of the ending station?", "sql": "SELECT T1.name, T1.lat, T1.long FROM station AS T1 INNER JOIN trip AS T2 ON T2.end_station_name = T1.name WHERE T2.start_station_name = 'Market at 4th' AND T2.end_date = '8/29/2013 12:45'", "source_tables": ["station", "trip"]}, "evidence": "started at refers to start_station_name; start_station_name = 'Market at 4th'; location coordinates refers to (lat, long);"}
{"sample_id": 9039, "db_id": "bike_share_1", "final": {"question": "Which trip had the shortest duration and started at the station that can hold 15 bikes?", "sql": "SELECT T1.id FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.dock_count = 15 AND T1.duration = ( SELECT MIN(T1.duration) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.dock_count = 15 )", "source_tables": ["station", "trip"]}, "evidence": "shortest duration refers to MIN(duration); started at the station refers to start_station_name; can hold 15 bikes refers to dock_count = 15;"}
{"sample_id": 9001, "db_id": "bike_share_1", "final": {"question": "On 8/29/2013, who took the longest to arrive in California Ave Caltrain Station from University and Emerson? Indicate the bike id.", "sql": "SELECT bike_id FROM trip WHERE start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%' AND end_station_name = 'California Ave Caltrain Station' AND start_station_name = 'University and Emerson' AND duration = ( SELECT MAX(duration) FROM trip WHERE start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%' AND end_station_name = 'California Ave Caltrain Station' AND start_station_name = 'University and Emerson' )", "source_tables": ["trip"]}, "evidence": "start_date = '8/29/2013'; end_date = '8/29/2013'; end_station_name = 'California Ave Caltrain Station'; start_station_name = 'University and Emerson'; who took the longest to arrive refers to MAX(duration);"}
{"sample_id": 8994, "db_id": "bike_share_1", "final": {"question": "Among the trips in August 2013, how many bikes were borrowed from Redwood City.", "sql": "SELECT COUNT(T2.start_date) FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE T2.start_date LIKE '8/%/2013%' AND T1.city = 'Redwood City'", "source_tables": ["station", "trip"]}, "evidence": "Redwood City is the name of the city; trips in August 2013 refers to start_date like '8%2013%';"}
{"sample_id": 9013, "db_id": "bike_share_1", "final": {"question": "What is the route that has the longest duration? Indicate the city of where the stations are located.", "sql": "SELECT T1.start_station_name, T1.end_station_name, T2.city FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.duration = ( SELECT MAX(T1.duration) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name )", "source_tables": ["station", "trip"]}, "evidence": "route implies a course taken in getting from start_station_name to end_station_name; the longest duration refers to MAX(duration);"}
{"sample_id": 8991, "db_id": "bike_share_1", "final": {"question": "At what date and time did San Jose Diridon Caltrain Station have most bikes available.", "sql": "SELECT T2.time FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T1.name = 'San Jose Diridon Caltrain Station' AND T2.bikes_available = ( SELECT MAX(T2.bikes_available) FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T1.name = 'San Jose Diridon Caltrain Station' )", "source_tables": ["station", "status"]}, "evidence": "San Jose Diridon Caltrain Station is the name of the station; most bikes available refers to MAX(bikes_available);"}
{"sample_id": 9050, "db_id": "bike_share_1", "final": {"question": "What was the mean humidity of a trip with id 4275?", "sql": "SELECT T2.mean_humidity FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.id = 4275", "source_tables": ["weather", "trip"]}, "evidence": "mean humidity refers to mean_humidity;"}
{"sample_id": 9012, "db_id": "bike_share_1", "final": {"question": "What is the average duration of bike trips in the city of Palo Alto?", "sql": "SELECT AVG(T1.duration) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'Palo Alto'", "source_tables": ["station", "trip"]}, "evidence": "DIVIDE(SUM(duration where city = 'Palo Alto'), COUNT(start_station_id));"}
{"sample_id": 9059, "db_id": "bike_share_1", "final": {"question": "How many trips made by a subscriber started in August, 2013 from a station that can hold more than 20 bikes?", "sql": "SELECT COUNT(T2.id) FROM station AS T1 INNER JOIN trip AS T2 ON T1.id = T2.start_station_id WHERE T2.subscription_type = 'Subscriber' AND T2.start_date LIKE '8/%/2013%' AND T1.dock_count > 20", "source_tables": ["station", "trip"]}, "evidence": "subscriber refers to subscription_type = 'Subscriber'; in August 2013 refers to start_date LIKE'8%' AND start_date LIKE'%2013%'; station that can hold more than 20 bikes refers to dock_count>20;"}
{"sample_id": 9074, "db_id": "bike_share_1", "final": {"question": "Are all stations with zip code 94107 located in San Francisco city?", "sql": "SELECT DISTINCT T2.city FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.zip_code = 94107", "source_tables": ["station", "trip"]}, "evidence": "station refers to name;"}
{"sample_id": 9043, "db_id": "bike_share_1", "final": {"question": "Please calculate the average duration of trips started at South Van Ness at Market in 2015.", "sql": "SELECT AVG(duration) FROM trip WHERE start_date LIKE '%2015%' AND start_station_name = 'South Van Ness at Market'", "source_tables": ["trip"]}, "evidence": "started at refers to start_station_name; start_station_name = 'South Van Ness at Market'; average duration = DIVIDE(SUM(duration), COUNT(duration));"}
{"sample_id": 9007, "db_id": "bike_share_1", "final": {"question": "Among the subscribers who rented a bike from South Van Ness at Market on 12/1/2013, whose duration was the shortest and to which station was the bike returned to? Indicate South Van Ness's dock count.", "sql": "SELECT MIN(T2.duration), T2.end_station_name, COUNT(T2.start_station_name) FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE T2.start_date LIKE '12/1/2013%' AND T2.start_station_name = 'South Van Ness at Market' AND T2.subscription_type = 'Subscriber'", "source_tables": ["station", "trip"]}, "evidence": "South Van Ness at Market refers to start_station_name; subscriber refers to subscription_type; start_date = '12/1/2013'; the shortest duration refers to MIN(duration); which station was the bike returned to refers to end_station_name;"}
{"sample_id": 9022, "db_id": "bike_share_1", "final": {"question": "How many docks were available at the starting station of trip ID 912900?", "sql": "SELECT SUM(T2.docks_available) FROM trip AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.start_station_id WHERE T1.zip_code = 912900", "source_tables": ["status", "trip"]}, "evidence": ""}
{"sample_id": 9034, "db_id": "bike_share_1", "final": {"question": "How many stations in San Francisco are installed in 2014?", "sql": "SELECT SUM(CASE WHEN city = 'San Francisco' AND SUBSTR(installation_date, -4) = '2014' THEN 1 ELSE 0 END) FROM station", "source_tables": ["station"]}, "evidence": "stations refers to name; San Francisco refers to city = 'San Francisco'; installed in 2004 refers to installation_date like'%2014';"}
{"sample_id": 9070, "db_id": "bike_share_1", "final": {"question": "What is the total number of bikes that can be hold in Redwood City before 2014.", "sql": "SELECT SUM(CASE WHEN city = 'Redwood City' AND SUBSTR(installation_date, -4) < '2014' THEN dock_count ELSE 0 END) NUM FROM station", "source_tables": ["station"]}, "evidence": "total number of bikes that can be hold = MAX(dock_count); before 2014 refers to year(installation_date)<2014;"}
{"sample_id": 8987, "db_id": "bike_share_1", "final": {"question": "Name all the trips where the bike was borrowed and returned on a different day. State the city where the bike was returned.", "sql": "SELECT DISTINCT T1.city FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE SUBSTR(CAST(T2.start_date AS TEXT), INSTR(T2.start_date, '/') + 1) - SUBSTR(CAST(T2.start_date AS TEXT), INSTR(T2.start_date, ' ') - 5) <> SUBSTR(CAST(T2.end_date AS TEXT), INSTR(T2.end_date, '/') + 1) - SUBSTR(CAST(T2.end_date AS TEXT), INSTR(T2.end_date, ' ') - 5)", "source_tables": ["station", "trip"]}, "evidence": "the bike was borrowed and returned on a different day implies that start_date and end_date are not equal to each other; where the bike was returned refers to end_station_name;"}
{"sample_id": 8998, "db_id": "bike_share_1", "final": {"question": "How many bike stations were installed in San Jose in 2014? Indicate the names of the stations.", "sql": "SELECT SUM(CASE WHEN city = 'San Jose' AND SUBSTR(installation_date, -4) = '2014' THEN 1 ELSE 0 END) FROM station UNION SELECT name FROM station WHERE city = 'San Jose' AND SUBSTR(installation_date, -4) = '2014'", "source_tables": ["station"]}, "evidence": "San Jose is the name of the city; 2014 refers to installation_date between '1/1/2014' and '12/31/2014';"}
{"sample_id": 9203, "db_id": "movie_3", "final": {"question": "List down the film titles performed by Emily Dee.", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Emily' AND T1.last_name = 'Dee'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": ""}
{"sample_id": 9300, "db_id": "movie_3", "final": {"question": "What are the ratings of the film featuring behind the scenes?", "sql": "SELECT rating FROM film WHERE special_features LIKE '%Behind the Scenes%'", "source_tables": ["film"]}, "evidence": "film featuring behind the scenes refers to special_features = 'Behind the Scenes'"}
{"sample_id": 9354, "db_id": "movie_3", "final": {"question": "What is the percentage of horror film titles in English film titles?", "sql": "SELECT CAST(SUM(IIF(T3.name = 'Horror', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T1.category_id = T3.category_id INNER JOIN language AS T4 ON T2.language_id = T4.language_id WHERE T4.name = 'English'", "source_tables": ["category", "language", "film_category", "film"]}, "evidence": "horror film refers to category.name = 'Horror'; English film refers to language.name = 'English'; percentage = divide(count(film_id where category.name = 'Horror'), count(film_id)) where language.name = 'English' * 100%"}
{"sample_id": 9201, "db_id": "movie_3", "final": {"question": "What is the description and film title of ID 996?", "sql": "SELECT description, title FROM film_text WHERE film_id = 996", "source_tables": ["film_text"]}, "evidence": "ID 996 refers to film_id = 996"}
{"sample_id": 9355, "db_id": "movie_3", "final": {"question": "Among the adult films, how many of them have a rental duration of fewer than 4 days?", "sql": "SELECT COUNT(film_id) FROM film WHERE rating = 'NC-17' AND rental_duration < 4", "source_tables": ["film"]}, "evidence": "adult film refers to rating = 'NC-17'; rental duration of fewer than 4 days refers to rental_duration < 4"}
{"sample_id": 9118, "db_id": "movie_3", "final": {"question": "What is the title of the film with the longest duration time and stars PENELOPE GUINESS?", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS' ORDER BY T3.length DESC LIMIT 1", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "longest duration of film refers to Max(length)"}
{"sample_id": 9386, "db_id": "movie_3", "final": {"question": "What films did Burt Dukakis got star in?", "sql": "SELECT T3.title FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T2.first_name = 'BURT' AND T2.last_name = 'DUKAKIS'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "film refers to title"}
{"sample_id": 9419, "db_id": "movie_3", "final": {"question": "How much in total had the customers in Italy spent on film rentals?", "sql": "SELECT SUM(T5.amount) FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id INNER JOIN customer AS T4 ON T1.address_id = T4.address_id INNER JOIN payment AS T5 ON T4.customer_id = T5.customer_id WHERE T3.country = 'Italy'", "source_tables": ["city", "address", "payment", "customer", "country"]}, "evidence": "total = sum(amount); Italy refers to country = 'Italy'"}
{"sample_id": 9219, "db_id": "movie_3", "final": {"question": "Calculate the total payment amount by Diane Collins.", "sql": "SELECT SUM(T2.amount) FROM customer AS T1 INNER JOIN payment AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'Diane' AND T1.last_name = 'Collins'", "source_tables": ["payment", "customer"]}, "evidence": "'Diane Collins' is a full name of a customer; full name refers to first_name, last_name"}
{"sample_id": 9309, "db_id": "movie_3", "final": {"question": "List the top 5 most-rented films.", "sql": "SELECT T.title FROM ( SELECT T3.title, COUNT(T2.inventory_id) AS num FROM rental AS T1 INNER JOIN inventory AS T2 ON T1.inventory_id = T2.inventory_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id GROUP BY T3.title ) AS T ORDER BY T.num DESC LIMIT 5", "source_tables": ["inventory", "rental", "film"]}, "evidence": "film refers to title; most rented refers to MAX(inventory_id)"}
{"sample_id": 9351, "db_id": "movie_3", "final": {"question": "Who are the actors of film titled \"BIRD INDEPENDENCE\"?", "sql": "SELECT T3.first_name, T3.last_name FROM film AS T1 INNER JOIN film_actor AS T2 ON T1.film_id = T2.film_id INNER JOIN actor AS T3 ON T2.actor_id = T3.actor_id WHERE T1.title = 'BIRD INDEPENDENCE'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "actor refers to first_name, last_name"}
{"sample_id": 9243, "db_id": "movie_3", "final": {"question": "Among the movies, what percentage are horror?", "sql": "SELECT CAST(SUM(IIF(T2.name = 'horror', 1, 0)) AS REAL) * 100 / COUNT(T2.category_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id", "source_tables": ["category", "film_category"]}, "evidence": "horror is a name of film category; calculation = DIVIDE(COUNT('horror'), COUNT(category_id)) * 100"}
{"sample_id": 9287, "db_id": "movie_3", "final": {"question": "What is the category of the film Agent Truman?", "sql": "SELECT T3.name FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T1.title = 'AGENT TRUMAN'", "source_tables": ["category", "film_category", "film"]}, "evidence": "'Agent Truman' is a title of a film; category refers to name"}
{"sample_id": 9170, "db_id": "movie_3", "final": {"question": "List the names of the films that are more than 180 minutes long.", "sql": "SELECT title FROM film WHERE length > 180", "source_tables": ["film"]}, "evidence": "more than 180 min long refers to length > 180; name of film refers to title"}
{"sample_id": 9200, "db_id": "movie_3", "final": {"question": "How many percent of customers were inactive?", "sql": "SELECT CAST(SUM(IIF(active = 0, 1, 0)) AS REAL) * 100 / COUNT(customer_id) FROM customer", "source_tables": ["customer"]}, "evidence": "inactive refers to active = 0; percent = Divide (Count (customer_id where active = 0), Count(customer_id)) * 100"}
{"sample_id": 9123, "db_id": "movie_3", "final": {"question": "Please list the titles of all the films that the customer RUTH MARTINEZ has rented.", "sql": "SELECT T4.title FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ'", "source_tables": ["inventory", "customer", "rental", "film"]}, "evidence": ""}
{"sample_id": 9215, "db_id": "movie_3", "final": {"question": "Calculate how many percent of customers were located in India.", "sql": "SELECT CAST(SUM(IIF(T1.country = 'India', 1, 0)) AS REAL) * 100 / COUNT(T4.customer_id) FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id INNER JOIN address AS T3 ON T2.city_id = T3.city_id INNER JOIN customer AS T4 ON T3.address_id = T4.address_id", "source_tables": ["city", "customer", "address", "country"]}, "evidence": "'India' is a country; calculation = DIVIDE(SUM(country = 'India'), COUNT(customer_id)) * 100"}
{"sample_id": 9135, "db_id": "movie_3", "final": {"question": "What is the average duration time of the films starring PENELOPE GUINESS?", "sql": "SELECT AVG(T3.length) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "average duration time = AVG(length)"}
{"sample_id": 9204, "db_id": "movie_3", "final": {"question": "List down the actors' full names who performed in \"CHOCOLATE DUCK\" film.", "sql": "SELECT T3.first_name, T3.last_name FROM film_actor AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T2.title = 'CHOCOLATE DUCK'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "\"CHOCOLATE DUCK\" is the title of film; full name refers to first_name, last_name"}
{"sample_id": 9174, "db_id": "movie_3", "final": {"question": "How many rentals were returned on 5/27/2005?", "sql": "SELECT COUNT(rental_id) FROM rental WHERE rental_date = '2005-05-27'", "source_tables": ["rental"]}, "evidence": "return on 5/27/2005 refers to return_date = '2005-05-27'; rental refers to rental_id"}
{"sample_id": 9330, "db_id": "movie_3", "final": {"question": "Calculate the percentage of total payment of MARGARET MOORE customers.", "sql": "SELECT CAST(SUM(IIF(T2.first_name = 'MARGARET' AND T2.last_name = 'MOORE', T1.amount, 0)) AS REAL) * 100 / SUM(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id", "source_tables": ["payment", "customer"]}, "evidence": "percentage = divide(sum(amount where first_name = 'MARGARET' and last_name = 'MOORE'), sum(amount)) * 100%"}
{"sample_id": 9269, "db_id": "movie_3", "final": {"question": "How many customers did not rent material at Mike's store?", "sql": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN store AS T2 ON T1.store_id = T2.store_id INNER JOIN staff AS T3 ON T2.manager_staff_id = T3.staff_id WHERE T3.first_name != 'Mike'", "source_tables": ["store", "customer", "staff"]}, "evidence": "not at Mike's store refers to staff.first_name ! = 'Mike'"}
{"sample_id": 9137, "db_id": "movie_3", "final": {"question": "Give the number of inactive customers.", "sql": "SELECT COUNT(customer_id) FROM customer WHERE active = 0", "source_tables": ["customer"]}, "evidence": "inactive refers to active = 0"}
{"sample_id": 9420, "db_id": "movie_3", "final": {"question": "Among the payments made by Mary Smith, how many of them are over 4.99?", "sql": "SELECT COUNT(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH' AND T1.amount > 4.99", "source_tables": ["payment", "customer"]}, "evidence": "over 4.99 refers to amount > 4.99"}
{"sample_id": 9211, "db_id": "movie_3", "final": {"question": "Write down the inventories' IDs and actors' names of \"STREETCAR INTENTIONS\".", "sql": "SELECT T4.inventory_id, T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN inventory AS T4 ON T2.film_id = T4.film_id WHERE T3.title = 'STREETCAR INTENTIONS'", "source_tables": ["film_actor", "inventory", "actor", "film"]}, "evidence": "\"STREETCAR INTENTIONS\" is the title of film; actor's names refers to first_name, last_name"}
{"sample_id": 9105, "db_id": "movie_3", "final": {"question": "What is the email address of the staff Jon Stephens?", "sql": "SELECT email FROM staff WHERE first_name = 'Jon' AND last_name = 'Stephens'", "source_tables": ["staff"]}, "evidence": ""}
{"sample_id": 9154, "db_id": "movie_3", "final": {"question": "How many addresses are there in Woodridge city?", "sql": "SELECT COUNT(T1.address_id) FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.city = 'Woodridge'", "source_tables": ["city", "address"]}, "evidence": "\"Woodridge\" is the city"}
{"sample_id": 9285, "db_id": "movie_3", "final": {"question": "Which city does the address 1623 Kingstown Drive belong to?", "sql": "SELECT T1.city FROM city AS T1 INNER JOIN address AS T2 ON T2.city_id = T1.city_id WHERE T2.address = '1623 Kingstown Drive'", "source_tables": ["city", "address"]}, "evidence": ""}
{"sample_id": 9359, "db_id": "movie_3", "final": {"question": "From 5/30/2005 at 3:43:54 AM to 7/31/2005 at 10:08:29 PM, how many times did Susan Wilson pay for film rentals?", "sql": "SELECT COUNT(T1.customer_id) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.payment_date BETWEEN '2005-05-30 03:43:54' AND '2005-07-31 10:08:29'", "source_tables": ["payment", "customer"]}, "evidence": "from 5/30/2005 at 3:43:54 AM to 7/31/2005 at 10:08:29 PM refers to payment_date between '2005-05-30 03:43:54' and '2005-07-31 10:08:29'"}
{"sample_id": 9336, "db_id": "movie_3", "final": {"question": "List down all of the film titles that are rated for general audiences.", "sql": "SELECT title FROM film WHERE rating = 'G'", "source_tables": ["film"]}, "evidence": "rated for general audiences means rating = 'G'"}
{"sample_id": 9179, "db_id": "movie_3", "final": {"question": "What is the name of the most rented movie?", "sql": "SELECT T.title FROM ( SELECT T1.title, COUNT(T3.rental_id) AS num FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T1.title ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["inventory", "rental", "film"]}, "evidence": "most rented movie refers to title where Max(Count(rental_id))"}
{"sample_id": 9346, "db_id": "movie_3", "final": {"question": "List down all of the customers' first name who were attended by staff with ID 1.", "sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T2.staff_id = 1", "source_tables": ["customer", "rental"]}, "evidence": ""}
{"sample_id": 9319, "db_id": "movie_3", "final": {"question": "Give the full name of the actor with the highest rental rate.", "sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T3.film_id = T2.film_id ORDER BY T3.rental_rate DESC LIMIT 1", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "full name refers to first_name, last_name; the highest rental rate refers to max(rental_rate)"}
{"sample_id": 9293, "db_id": "movie_3", "final": {"question": "Who are the actors that act in the ACADEMY DINOSAUR film?", "sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'ACADEMY DINOSAUR'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "Who are the actors refers to full name; full name refers to first_name, last_name; 'ACADEMY DINOSAUR' is a title of a film"}
{"sample_id": 9252, "db_id": "movie_3", "final": {"question": "Calculate the percentage of customers who paid more than the average rent amount in store 1.", "sql": "SELECT CAST(( SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN payment AS T2 ON T1.customer_id = T2.customer_id WHERE T2.amount > ( SELECT AVG(amount) FROM payment ) ) AS REAL) * 100 / ( SELECT COUNT(customer_id) FROM customer )", "source_tables": ["payment", "customer"]}, "evidence": "store 1 refers to store_id = 1; average rent amount refers to AVG(amount); calculation = DIVIDE(amount > AVG(amount), COUNT(customer_id)) * 100"}
{"sample_id": 9326, "db_id": "movie_3", "final": {"question": "Which actor acted in ANONYMOUS HUMAN?", "sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T3.film_id = T2.film_id WHERE T3.title = 'ANONYMOUS HUMAN'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "actor refers to first_name, last_name; ANONYMOUS HUMAN refers to title = 'ANONYMOUS HUMAN'"}
{"sample_id": 9409, "db_id": "movie_3", "final": {"question": "Among all the customers of store no.1, how many of them are active?", "sql": "SELECT COUNT(customer_id) FROM customer WHERE active = 1 AND store_id = 1", "source_tables": ["customer"]}, "evidence": "active refers to active = 1"}
{"sample_id": 9208, "db_id": "movie_3", "final": {"question": "Mention the language of Untouchables Sunrise film and calculate its rental cost per day.", "sql": "SELECT T2.name, T1.replacement_cost / T1.rental_duration AS cost FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'UNTOUCHABLES SUNRISE'", "source_tables": ["language", "film"]}, "evidence": "\"UNTOUCHABLES SUNRISE\" is the title of film; language refers to name; rental cost per day = Divide (rental_cost, rental_duration)"}
{"sample_id": 9228, "db_id": "movie_3", "final": {"question": "In films with a length duration of 113 minutes, how many of the films are starred by Kirk Jovovich?", "sql": "SELECT COUNT(T1.actor_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.length = 113 AND T1.first_name = 'Kirk' AND T1.last_name = 'Jovovich'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "length duration of 113 minutes refers to length = 113; 'Kirk Jovovich' is a full name of an actor; full name refers to first_name, last_name"}
{"sample_id": 9338, "db_id": "movie_3", "final": {"question": "What are the last updated date for English film titles that were released in 2006?", "sql": "SELECT DISTINCT T1.last_update FROM film AS T1 INNER JOIN \"language\" AS T2 ON T1.language_id = T2.language_id WHERE T2.\"name\" = 'English' AND T1.release_year = 2006", "source_tables": ["language", "film"]}, "evidence": "the last updated date refers to last_update; English is name of language; released in 2006 refers to release_year = 2006\n\n"}
{"sample_id": 9149, "db_id": "movie_3", "final": {"question": "How many films did actor Daryl Wahlberg appear in?", "sql": "SELECT COUNT(T1.film_id) FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id WHERE T2.first_name = 'DARYL' AND T2.last_name = 'WAHLBERG'", "source_tables": ["film_actor", "actor"]}, "evidence": ""}
{"sample_id": 9286, "db_id": "movie_3", "final": {"question": "Please name three cities that belong to Algeria.", "sql": "SELECT T2.city FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id WHERE T1.country = 'Algeria'", "source_tables": ["city", "country"]}, "evidence": "Algeria is a country"}
{"sample_id": 9188, "db_id": "movie_3", "final": {"question": "List the names of the customers from India.", "sql": "SELECT T4.first_name, T4.last_name FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id INNER JOIN address AS T3 ON T2.city_id = T3.city_id INNER JOIN customer AS T4 ON T3.address_id = T4.address_id WHERE T1.country = 'India'", "source_tables": ["city", "customer", "address", "country"]}, "evidence": "\"India\" is the country; name refers to first_name, last_name"}
{"sample_id": 9223, "db_id": "movie_3", "final": {"question": "List the actor's last name that starred the film with the description of \"A Thoughtful Drama of a Composer And a Feminist who must Meet a Secret Agent in The Canadian Rockies\".", "sql": "SELECT T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.description = 'A Thoughtful Drama of a Composer And a Feminist who must Meet a Secret Agent in The Canadian Rockies'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": ""}
{"sample_id": 9103, "db_id": "movie_3", "final": {"question": "How many films with the rental rate of $2.99 have the special feature of \"Deleted Scenes\"?", "sql": "SELECT COUNT(film_id) FROM film WHERE rental_rate = 2.99 AND special_features = 'Deleted Scenes'", "source_tables": ["film"]}, "evidence": "rental rate of $2.99 refers to rental_rate = 2.99; film refers to title"}
{"sample_id": 9322, "db_id": "movie_3", "final": {"question": "Please provide the address of the customer whose first name is SUSAN with the postal code 77948.", "sql": "SELECT T1.address FROM address AS T1 INNER JOIN customer AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = 'SUSAN' AND T1.postal_code = 77948", "source_tables": ["customer", "address"]}, "evidence": ""}
{"sample_id": 9389, "db_id": "movie_3", "final": {"question": "List all the films that Karl Berr starred in and rated as PG.", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'KARL' AND T1.last_name = 'BERRY' AND T3.rating = 'PG'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "film refers to title; rated as PG refers to rating = 'PG'"}
{"sample_id": 9378, "db_id": "movie_3", "final": {"question": "Provide the list of the longest movies. Arrange these titles in alphabetical order.", "sql": "SELECT title FROM film WHERE length = ( SELECT MAX(length) FROM film )", "source_tables": ["film"]}, "evidence": "the longest refers to max(length)"}
{"sample_id": 9271, "db_id": "movie_3", "final": {"question": "What is the name of the client who has the largest quantity of rented material without returning it?", "sql": "SELECT T.first_name FROM ( SELECT T2.first_name, COUNT(T1.rental_date) AS num FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.first_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["customer", "rental"]}, "evidence": "name refers to first_name, last_name; without returning a rented material refers to return_date is null"}
{"sample_id": 9159, "db_id": "movie_3", "final": {"question": "Which category does the film Working Microcosmos belong to?", "sql": "SELECT T3.name FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T1.title = 'WORKING MICROCOSMOS'", "source_tables": ["category", "film_category", "film"]}, "evidence": "\"WORKING MICROCOSMOS\" is the title of film; category refers to name"}
{"sample_id": 9199, "db_id": "movie_3", "final": {"question": "What is the name and email of the staff in store ID 2?", "sql": "SELECT first_name, last_name, email FROM staff WHERE store_id = 2", "source_tables": ["staff"]}, "evidence": "name refers to first_name, last_name"}
{"sample_id": 9382, "db_id": "movie_3", "final": {"question": "List all the films that are rated as PG-13.", "sql": "SELECT title FROM film WHERE rating = 'PG-13'", "source_tables": ["film"]}, "evidence": "film refers to title; rated as PG-13 refers to rating = 'PG-13'"}
{"sample_id": 9401, "db_id": "movie_3", "final": {"question": "List the store ID of the films starred by Reese West with a duration of 100 minutes and below?", "sql": "SELECT T4.store_id FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN inventory AS T4 ON T3.film_id = T4.film_id WHERE T3.length < 100 AND T1.first_name = 'Reese' AND T1.last_name = 'West'", "source_tables": ["film_actor", "inventory", "actor", "film"]}, "evidence": "a duration of 100 minutes and below refers to length < 100"}
{"sample_id": 9357, "db_id": "movie_3", "final": {"question": "Write down the email addresses of active customers who rented between 5/25/2005 at 7:37:47 PM and 5/26/2005 at 10:06:49 AM.", "sql": "SELECT T2.email FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.rental_date BETWEEN '2005-5-25 07:37:47' AND '2005-5-26 10:06:49' AND T2.active = 1", "source_tables": ["customer", "rental"]}, "evidence": "email address refers to email; active refers to active = 1; between 5/25/2005 at 7:37:47 PM and 5/26/2005 at 10:06:49 AM refers to rental_date between '2005-5-25 07:37:47' and '2005-5-26 10:06:49'"}
{"sample_id": 9196, "db_id": "movie_3", "final": {"question": "Among the films with the longest duration, list any five title with their descriptions and special features.", "sql": "SELECT title, description, special_features FROM film WHERE length = ( SELECT MAX(length) FROM film ) LIMIT 5", "source_tables": ["film"]}, "evidence": "longest duration of film refers to Max(length)"}
{"sample_id": 9405, "db_id": "movie_3", "final": {"question": "In films with a rental rate of 2.99, how many of the films are starred by Nina Soto?", "sql": "SELECT COUNT(T1.film_id) FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.rental_rate = 2.99 AND T2.first_name = 'Nina' AND T2.last_name = 'Soto'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "a rental rate of 2.99 refers to rental_rate = 2.99"}
{"sample_id": 9333, "db_id": "movie_3", "final": {"question": "List down film titles from id 1 to 10.", "sql": "SELECT title FROM film WHERE film_id BETWEEN 1 AND 10", "source_tables": ["film"]}, "evidence": "id 1 to 10 refers to film_id BETWEEN 1 and 10"}
{"sample_id": 9214, "db_id": "movie_3", "final": {"question": "Describe the full names and cities of the customers who rented \"DREAM PICKUP\".", "sql": "SELECT T4.first_name, T4.last_name, T6.city FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN customer AS T4 ON T3.customer_id = T4.customer_id INNER JOIN address AS T5 ON T4.address_id = T5.address_id INNER JOIN city AS T6 ON T5.city_id = T6.city_id WHERE T1.title = 'DREAM PICKUP'", "source_tables": ["city", "address", "rental", "film", "inventory", "customer"]}, "evidence": "full name refers to first_name, last_name; 'DREAM PICKUP' is a title of film"}
{"sample_id": 9202, "db_id": "movie_3", "final": {"question": "Calculate customers' total payment amount in August, 2005.", "sql": "SELECT SUM(amount) FROM payment WHERE SUBSTR(payment_date, 1, 7) = '2005-08'", "source_tables": ["payment"]}, "evidence": "in August 2005 refers to payment_date like '2005-08%'; total payment amount refers to Sum(amount)"}
{"sample_id": 9232, "db_id": "movie_3", "final": {"question": "What is the store and inventory ID of the film with the longest duration?", "sql": "SELECT T2.store_id, T2.inventory_id FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id ORDER BY T1.length DESC LIMIT 1", "source_tables": ["inventory", "film"]}, "evidence": "the longest duration refers to MAX(length)"}
{"sample_id": 9376, "db_id": "movie_3", "final": {"question": "For how long can you rent the movie 'Dirty Ace'?", "sql": "SELECT rental_duration FROM film WHERE title = 'DIRTY ACE'", "source_tables": ["film"]}, "evidence": "length refers to rental_duration; 'Dirty Ace' refers to title = 'DIRTY ACE'"}
{"sample_id": 9316, "db_id": "movie_3", "final": {"question": "Please indicate the full name of actor id 5.", "sql": "SELECT first_name, last_name FROM actor WHERE actor_id = 5", "source_tables": ["actor"]}, "evidence": "full name refers to first_name, last_name"}
{"sample_id": 9302, "db_id": "movie_3", "final": {"question": "List all the films with the word \"Lacklusture\" in their description.", "sql": "SELECT title FROM film_text WHERE description LIKE '%Lacklusture%'", "source_tables": ["film_text"]}, "evidence": "films refers to title"}
{"sample_id": 9306, "db_id": "movie_3", "final": {"question": "Which category is the most common?", "sql": "SELECT T.name FROM ( SELECT T2.name, COUNT(T2.name) AS num FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T2.name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["category", "film_category"]}, "evidence": "most common category refers to MAX(COUNT(category.name))"}
{"sample_id": 9380, "db_id": "movie_3", "final": {"question": "How many titles did Mary Smith rent in 2005? Determine the percentage of titles rented in June 2005.", "sql": "SELECT COUNT(T2.rental_id) , CAST(SUM(IIF(STRFTIME('%m',T2.rental_date) = '7', 1, 0)) AS REAL) * 100 / COUNT(T2.rental_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'Maria' AND T1.last_name = 'Miller' AND STRFTIME('%Y',T2.rental_date) = '2005'", "source_tables": ["customer", "rental"]}, "evidence": "in June 2005 refers to month(rental_date) = 6 and year(rental_date) = 2005; percentage = divide(count(inventory_id where month(rental_date) = 6 and year(rental_date) = 2005), count(inventory_id)) * 100%"}
{"sample_id": 9470, "db_id": "california_schools", "final": {"question": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?", "sql": "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'", "source_tables": ["schools"]}, "evidence": "Elementary School District refers to DOC = 52; Unified School District refers to DOC = 54."}
{"sample_id": 9495, "db_id": "california_schools", "final": {"question": "What is the free or reduced price meal count for ages 5 to 17 in the Youth Authority School with a mailing street address of PO Box 1040?", "sql": "SELECT T1.\"FRPM Count (Ages 5-17)\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.MailStreet = 'PO Box 1040' AND T2.SOCType = 'Youth Authority Facilities'", "source_tables": ["schools", "frpm"]}, "evidence": ""}
{"sample_id": 9483, "db_id": "california_schools", "final": {"question": "How many chartered schools located in the city of Hickman are owned by the Elementary School District?", "sql": "SELECT COUNT(School) FROM schools WHERE DOC = 52 AND Charter = 1 AND City = 'Hickman'", "source_tables": ["schools"]}, "evidence": "Elementary School District refers to DOC = 52; Chartered schools refer to Charter = 1 in the table schools"}
{"sample_id": 9499, "db_id": "california_schools", "final": {"question": "Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?", "sql": "SELECT T2.School, T1.\"FRPM Count (Ages 5-17)\" * 100 / T1.\"Enrollment (Ages 5-17)\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'", "source_tables": ["schools", "frpm"]}, "evidence": "Percent (%) Eligible FRPM (Ages 5-17) can be acquired by `FRPM Count (Ages 5-17)` / `Enrollment (Ages 5-17)` * 100"}
{"sample_id": 9466, "db_id": "california_schools", "final": {"question": "What is the average writing score of the school who has the highest number of test takers whose total SAT sscores are greater or equal to 1500? Indicate the city to where the school is situated.", "sql": "SELECT T1.AvgScrWrite, T2.City FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1", "source_tables": ["schools", "satscores"]}, "evidence": ""}
{"sample_id": 9439, "db_id": "california_schools", "final": {"question": "Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers.", "sql": "SELECT CharterNum, AvgScrWrite, RANK() OVER (ORDER BY AvgScrWrite DESC) AS WritingScoreRank FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite > 499 AND CharterNum is not null", "source_tables": ["schools", "satscores"]}, "evidence": "Valid charter number means the number is not null"}
{"sample_id": 9431, "db_id": "california_schools", "final": {"question": "Among the schools with the average score in Math over 560 in the SAT test, how many schools are directly charter-funded?", "sql": "SELECT COUNT(T2.\"School Code\") FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.\"Charter Funding Type\" = 'Directly funded'", "source_tables": ["satscores", "frpm"]}, "evidence": ""}
{"sample_id": 9480, "db_id": "california_schools", "final": {"question": "What is the phone number and extension number for the school with the zip code 95203-3704? Indicate the school's name.", "sql": "SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'", "source_tables": ["schools"]}, "evidence": ""}
{"sample_id": 9438, "db_id": "california_schools", "final": {"question": "How many schools in merged Alameda have number of test takers less than 100?", "sql": "SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Merged' AND T2.NumTstTakr < 100 AND T1.County = 'Lake'", "source_tables": ["schools", "satscores"]}, "evidence": ""}
{"sample_id": 9451, "db_id": "california_schools", "final": {"question": "When did the first-through-twelfth-grade school with the largest enrollment open?", "sql": "SELECT T2.OpenDate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.\"Enrollment (K-12)\" DESC LIMIT 1", "source_tables": ["schools", "frpm"]}, "evidence": "K-12 means First-through-twelfth-grade"}
{"sample_id": 9465, "db_id": "california_schools", "final": {"question": "What is the average math score of the school with the lowest average score for all subjects, and in which county is it located?", "sql": "SELECT T1.AvgScrMath, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite ASC LIMIT 1", "source_tables": ["schools", "satscores"]}, "evidence": "Average score for all subjects can be computed by AvgScrMath + AvgScrRead + AvgScrWrite"}
{"sample_id": 9455, "db_id": "california_schools", "final": {"question": "If there are any, what are the websites address of the schools with a free meal count of 1,900-2,000 to students aged 5-17? Include the name of the school.", "sql": "SELECT T2.Website, T1.\"School Name\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.\"Free Meal Count (Ages 5-17)\" BETWEEN 1900 AND 2000 AND T2.Website IS NOT NULL", "source_tables": ["schools", "frpm"]}, "evidence": ""}
{"sample_id": 9459, "db_id": "california_schools", "final": {"question": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.", "sql": "SELECT T2.Street, T2.City, T2.State, T2.Zip FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr ASC LIMIT 1", "source_tables": ["schools", "satscores"]}, "evidence": "Execellence Rate = NumGE1500 / NumTstTakr; complete address has Street, City, State, Zip code"}
{"sample_id": 9424, "db_id": "california_schools", "final": {"question": "Please list the zip code of all the charter schools in Fresno County Office of Education.", "sql": "SELECT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.\"District Name\" = 'Fresno County Office of Education' AND T1.\"Charter School (Y/N)\" = 1", "source_tables": ["schools", "frpm"]}, "evidence": "Charter schools refers to `Charter School (Y/N)` = 1 in the table fprm"}
{"sample_id": 9482, "db_id": "california_schools", "final": {"question": "What are the websites for all the partially virtual chartered schools located in San Joaquin?", "sql": "SELECT Website FROM schools WHERE County = 'San Joaquin' AND Virtual = 'P' AND Charter = 1", "source_tables": ["schools"]}, "evidence": "Virtual = 'P' means partially virtual; Charter schools refers to Charter = 1 in the table schools"}
{"sample_id": 9428, "db_id": "california_schools", "final": {"question": "Among the schools with the SAT test takers of over 500, please list the schools that are magnet schools or offer a magnet program.", "sql": "SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Magnet = 1 AND T1.NumTstTakr > 500", "source_tables": ["schools", "satscores"]}, "evidence": "Magnet schools or offer a magnet program means that Magnet = 1"}
{"sample_id": 9477, "db_id": "california_schools", "final": {"question": "Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt?", "sql": "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'", "source_tables": ["schools"]}, "evidence": "Ratio = count(schools in Colusa) / count(schools in Humboldt)"}
{"sample_id": 9467, "db_id": "california_schools", "final": {"question": "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores.", "sql": "SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'", "source_tables": ["schools", "satscores"]}, "evidence": "Usually, administrators manage the school stuff."}
{"sample_id": 9444, "db_id": "california_schools", "final": {"question": "Which school in Contra Costa has the highest number of test takers?", "sql": "SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1", "source_tables": ["satscores"]}, "evidence": ""}
{"sample_id": 9600, "db_id": "financial", "final": {"question": "Which kind of credit card does client number 9 possess?", "sql": "SELECT T3.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.client_id = 9", "source_tables": ["client", "disp", "card"]}, "evidence": ""}
{"sample_id": 9593, "db_id": "financial", "final": {"question": "What was the difference in the number of crimes committed in East and North Bohemia in 1996?", "sql": "SELECT SUM(IIF(A3 = 'east Bohemia', A16, 0)) - SUM(IIF(A3 = 'north Bohemia', A16, 0)) FROM district", "source_tables": ["district"]}, "evidence": "Difference in no. of committed crimes between 2 regions = Total no. of committed crimes in 1996 in north Bohemia - Total no. of committed crimes in 1996 in e ast Bohemia. A3 refers to region. Data about no. of committed crimes 1996 appears in A16"}
{"sample_id": 9607, "db_id": "financial", "final": {"question": "What proportion of customers who have accounts at the Prague branch are female?", "sql": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) / COUNT(T2.client_id) * 100 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'Prague'", "source_tables": ["client", "district"]}, "evidence": "Female refers to gender = 'F'; Percentage of female clients in Prague branch = count[female clients with accounts in Prague branch / count(clients with accounts in Prague branch)] * 100%; A3 may contain information about Prague"}
{"sample_id": 9536, "db_id": "financial", "final": {"question": "For the first client who opened his/her account in Prague, what is his/her account ID?", "sql": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1", "source_tables": ["account", "district"]}, "evidence": "A3 stands for region names"}
{"sample_id": 9571, "db_id": "financial", "final": {"question": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.", "sql": "SELECT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type != 'OWNER' AND T1.A11 BETWEEN 8000 AND 9000", "source_tables": ["account", "disp", "district"]}, "evidence": "A11 represents the average salary; Salary and income share the similar meanings; when the account type = 'OWNER', it's eligible for loans"}
{"sample_id": 9580, "db_id": "financial", "final": {"question": "What is the district Id of the account that placed the order with the id 33333?", "sql": "SELECT T3.district_id FROM \"order\" AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.order_id = 33333", "source_tables": ["order", "account", "district"]}, "evidence": ""}
{"sample_id": 9598, "db_id": "financial", "final": {"question": "What is the amount of debt that client number 992 has, and how is this client doing with payments?", "sql": "SELECT T4.amount, T4.status FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 on T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 992", "source_tables": ["client", "account", "loan", "disp"]}, "evidence": ""}
{"sample_id": 9585, "db_id": "financial", "final": {"question": "Which district has the most accounts with loan contracts finished with no problems?", "sql": "SELECT T1.A2 FROM District AS T1 INNER JOIN Account AS T2 ON T1.District_id = T2.District_id INNER JOIN Loan AS T3 ON T2.Account_id = T3.Account_id WHERE T3.status = 'A' GROUP BY T1.District_id ORDER BY COUNT(T2.Account_id) DESC LIMIT 1", "source_tables": ["account", "loan", "district"]}, "evidence": "status = 'A' refers to loan contracts finished with no problems"}
{"sample_id": 9551, "db_id": "financial", "final": {"question": "Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?", "sql": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date LIKE '1996-01%' ORDER BY A2 ASC LIMIT 10", "source_tables": ["trans", "account", "district"]}, "evidence": "Non-credit card withdraws refers to type = 'VYDAJ'; January 1996 can be found by date LIKE '1996-01%' in the database; A2 means district names"}
{"sample_id": 9616, "db_id": "financial", "final": {"question": "Provide the IDs and age of the client with high level credit card, which is eligible for loans.", "sql": "SELECT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'", "source_tables": ["client", "disp", "card"]}, "evidence": "the credit card is high-level refers to card.type = 'gold'; eligible for loans refers to disp.type = 'OWNER'"}
{"sample_id": 9613, "db_id": "financial", "final": {"question": "How many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement.", "sql": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration = 24 AND T1.frequency = 'POPLATEK TYDNE'", "source_tables": ["account", "loan"]}, "evidence": "Frequency = 'POPLATEK TYDNE' referes to weekly statement"}
{"sample_id": 9518, "db_id": "financial", "final": {"question": "How many customers who choose statement of weekly issuance are Owner?", "sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK TYDNE'", "source_tables": ["account", "disp"]}, "evidence": "'POPLATEK TYDNE' stands for weekly issuance"}
{"sample_id": 9581, "db_id": "financial", "final": {"question": "List all the withdrawals in cash transactions that the client with the id 3356 makes.", "sql": "SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'", "source_tables": ["client", "trans", "account", "disp"]}, "evidence": "operation = 'VYBER' refers to withdrawal in cash"}
{"sample_id": 9529, "db_id": "financial", "final": {"question": "What is the gender of the oldest client who opened his/her account in the highest average salary branch?", "sql": "SELECT T2.gender FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id ORDER BY T1.A11 DESC, T2.birth_date ASC LIMIT 1", "source_tables": ["client", "district"]}, "evidence": "Earlier birthdate refers to older age; A11 refers to average salary"}
{"sample_id": 9554, "db_id": "financial", "final": {"question": "What is the average loan amount by male borrowers?", "sql": "SELECT AVG(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M'", "source_tables": ["client", "account", "loan", "disp"]}, "evidence": "Male refers to gender = 'M'"}
{"sample_id": 9531, "db_id": "financial", "final": {"question": "How many clients opened their accounts in Jesenik branch were women?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A2 = 'Jesenik'", "source_tables": ["client", "district"]}, "evidence": "A2 has region names; Woman and female share the same meaning; female refers to gender = 'F'"}
{"sample_id": 9591, "db_id": "financial", "final": {"question": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?", "sql": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'", "source_tables": ["client", "account", "loan", "disp"]}, "evidence": "Growth rate = (sum of amount_1997 - sum of amount_1996) / (sum of amount_1996) * 100%; Male refers to gender = 'M'"}
{"sample_id": 9547, "db_id": "financial", "final": {"question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.", "sql": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'", "source_tables": ["account", "loan", "district"]}, "evidence": "Unemployment increment rate in percentage = [(unemployment rate 2016 - unemployment rate 2015) / unemployment rate 2015] * 100; unemployment rate 2015 appears in the A12; unemployment rate 2016 appears in the A13; Loan contracts which are still running where client are in debt can be presented as status = 'D'"}
{"sample_id": 9587, "db_id": "financial", "final": {"question": "Please list all the transactions made by accounts from district 5.", "sql": "SELECT T3.trans_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.district_id = 5", "source_tables": ["trans", "account", "district"]}, "evidence": ""}
{"sample_id": 9549, "db_id": "financial", "final": {"question": "List the account IDs with monthly issuance of statements.", "sql": "SELECT account_id FROM account WHERE Frequency = 'POPLATEK MESICNE'", "source_tables": ["account"]}, "evidence": "'POPLATEK MESICNE' stands for monthly issuance"}
{"sample_id": 9526, "db_id": "financial", "final": {"question": "The transaction of 840 USD happened in 1998/10/14, when was this account opened?", "sql": "SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'", "source_tables": ["trans", "account"]}, "evidence": ""}
{"sample_id": 9576, "db_id": "financial", "final": {"question": "How many male clients in 'Hl.m. Praha' district?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'", "source_tables": ["client", "district"]}, "evidence": "District data appears in the A2; Male means that gender = 'M'"}
{"sample_id": 9686, "db_id": "toxicology", "final": {"question": "What are the labels for TR000, TR001 and TR002?", "sql": "SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR002')", "source_tables": ["molecule"]}, "evidence": "TR000, TR001 and TR002 are molecule id; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9718, "db_id": "toxicology", "final": {"question": "Indicate the molecule id is belonging to the TR000_1_2 bond that has the first atom named TR000_1.", "sql": "SELECT T2.molecule_id, T2.bond_id, T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T2.bond_id = 'TR000_1_2'", "source_tables": ["connected", "bond"]}, "evidence": ""}
{"sample_id": 9664, "db_id": "toxicology", "final": {"question": "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.", "sql": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'", "source_tables": ["atom", "molecule"]}, "evidence": "atoms from 21 to 25 refers to SUBSTR(atom_id, 7, 2) between '21' and '25'; label = '+' mean molecules are carcinogenic"}
{"sample_id": 9743, "db_id": "toxicology", "final": {"question": "What is the molecule of atom id \"TR000_2\" and atom id 2 \"TR000_4\"?", "sql": "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'", "source_tables": ["connected", "bond"]}, "evidence": ""}
{"sample_id": 9667, "db_id": "toxicology", "final": {"question": "What is the average number of bonds the atoms with the element iodine have?", "sql": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'", "source_tables": ["connected", "atom"]}, "evidence": "atoms with the element iodine refers to element = 'i'; average = DIVIDE(COUND(bond_id), COUNT(atom_id)) where element = 'i'"}
{"sample_id": 9688, "db_id": "toxicology", "final": {"question": "Calculate the total carcinogenic molecules for molecule id from TR000 to TR030.", "sql": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.molecule_id BETWEEN 'TR000' AND 'TR030' AND T.label = '+'", "source_tables": ["molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic"}
{"sample_id": 9706, "db_id": "toxicology", "final": {"question": "Determine the bond type that is formed in the chemical compound containing element Carbon.", "sql": "SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c'", "source_tables": ["bond", "atom"]}, "evidence": "Carbon refers to element = 'c'; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';"}
{"sample_id": 9695, "db_id": "toxicology", "final": {"question": "What is the percentage of element chlorine in carcinogenic molecules?", "sql": "SELECT CAST(COUNT( CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'", "source_tables": ["atom", "molecule"]}, "evidence": "chlorine refers to element = 'cl'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(element = 'pb'); COUNT(molecule_id)) as percentage where label = '+'"}
{"sample_id": 9741, "db_id": "toxicology", "final": {"question": "How many elements are contained in bond_id TR001_3_4?", "sql": "SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_3_4'", "source_tables": ["connected", "atom"]}, "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"}
{"sample_id": 9641, "db_id": "toxicology", "final": {"question": "What is the percentage of carcinogenic molecules in triple type bonds?", "sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'", "source_tables": ["bond", "atom", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(bond_type = '#') * 100, COUNT(bond_id)) as percent where label = '+'"}
{"sample_id": 9704, "db_id": "toxicology", "final": {"question": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label.", "sql": "WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / (CASE WHEN COUNT(atom_id) = 0 THEN NULL ELSE COUNT(atom_id) END) AS ratio, label FROM SubQuery GROUP BY label", "source_tables": ["subquery", "atom", "molecule"]}, "evidence": "hydrogen refers to element = 'h'; ratio = DIVIDE(SUM(element = 'h'), count(element)) where molecule_id = 'TR006' ; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9721, "db_id": "toxicology", "final": {"question": "Is molecule TR124 carcinogenic?", "sql": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR124'", "source_tables": ["molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic;"}
{"sample_id": 9638, "db_id": "toxicology", "final": {"question": "Identify all connected atoms with a triple bond.", "sql": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'", "source_tables": ["connected", "bond"]}, "evidence": "triple bond refers to bond_type = '#';"}
{"sample_id": 9681, "db_id": "toxicology", "final": {"question": "How many elements are there for single bond molecules?", "sql": "SELECT COUNT(DISTINCT T.element) FROM ( SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T", "source_tables": ["bond", "atom", "molecule"]}, "evidence": "single bond refers to bond_type = '-';"}
{"sample_id": 9653, "db_id": "toxicology", "final": {"question": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?", "sql": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T", "source_tables": ["bond"]}, "evidence": "TR010 is the molecule id; majority of the bond found refers to MAX(COUNT(bond_type)); "}
{"sample_id": 9639, "db_id": "toxicology", "final": {"question": "Identify all the atoms that are connected to the atoms of the TR181 molecule.", "sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T1.molecule_id = 'TR181'", "source_tables": ["connected", "atom"]}, "evidence": "TR181 molecule refers to molecule_id = 'TR181'"}
{"sample_id": 9735, "db_id": "toxicology", "final": {"question": "How many atoms belong to molecule id TR001?", "sql": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR001'", "source_tables": ["atom"]}, "evidence": ""}
{"sample_id": 9659, "db_id": "toxicology", "final": {"question": "Which molecule does the atom TR001_10 belong to? Please state whether this molecule is carcinogenic or not.", "sql": "SELECT T2.molecule_id , IIF(T2.label = '+', 'YES', 'NO') AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'", "source_tables": ["atom", "molecule"]}, "evidence": "TR001_10 is the atom id; label = '+' mean molecules are carcinogenic"}
{"sample_id": 9716, "db_id": "toxicology", "final": {"question": "Which bond ids are double-bond with carcinogenic compound?", "sql": "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '='", "source_tables": ["bond", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic; double bond refers to bond_type = ' = ';"}
{"sample_id": 9740, "db_id": "toxicology", "final": {"question": "What is the molecule id of bond id TR001_1_7?", "sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_1_7'", "source_tables": ["connected", "atom"]}, "evidence": ""}
{"sample_id": 9723, "db_id": "toxicology", "final": {"question": "What is the bond type of TR007_4_19?", "sql": "SELECT T.bond_type FROM bond AS T WHERE T.bond_id = 'TR007_4_19'", "source_tables": ["bond"]}, "evidence": "double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';"}
{"sample_id": 9690, "db_id": "toxicology", "final": {"question": "What are the elements for bond id TR001_10_11?", "sql": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_10_11'", "source_tables": ["connected", "atom"]}, "evidence": "TR001_10_11 is the bond id;"}
{"sample_id": 9737, "db_id": "toxicology", "final": {"question": "Among the molecules which contain \"cl\" element, which of them are carcinogenic?", "sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'", "source_tables": ["atom", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic;"}
{"sample_id": 9700, "db_id": "toxicology", "final": {"question": "How many of the single bond type molecules are non-carcinogenic?", "sql": "SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'", "source_tables": ["bond", "molecule"]}, "evidence": "label = '-' means molecules are non-carcinogenic; single bond refers to bond_type = '-';"}
{"sample_id": 9703, "db_id": "toxicology", "final": {"question": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.", "sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7", "source_tables": ["atom", "molecule"]}, "evidence": "label = '+' means molecules are carcinogenic; 4th atom of each molecule refers to substr(atom_id, 7, 1) = '4'; "}
{"sample_id": 9673, "db_id": "toxicology", "final": {"question": "What is the least common element of all carcinogenic molecules?", "sql": "SELECT T.element FROM ( SELECT T2.element, COUNT(DISTINCT T2.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T2.element ORDER BY COUNT(DISTINCT T2.molecule_id) LIMIT 1 ) t", "source_tables": ["atom", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic"}
{"sample_id": 9701, "db_id": "toxicology", "final": {"question": "What is the label for bond ID TR001_10_11?", "sql": "SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'", "source_tables": ["bond", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9656, "db_id": "toxicology", "final": {"question": "How many bonds which involved atom 12 does molecule TR009 have?", "sql": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' AND T2.atom_id2 = T1.molecule_id || '_2'", "source_tables": ["connected", "bond"]}, "evidence": "TR009 is the molecule id;  involved atom 12 refers to atom_id = 'TR009_12' or atom_id2 = 'TR009_12'"}
{"sample_id": 9628, "db_id": "toxicology", "final": {"question": "What elements are in the TR004_8_9 bond atoms?", "sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'", "source_tables": ["connected", "atom"]}, "evidence": "TR004_8_9 bond atoms refers to bond_id = 'TR004_8_9';"}
{"sample_id": 9777, "db_id": "card_games", "final": {"question": "What is the keyword found on card 'Angel of Mercy'?", "sql": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'", "source_tables": ["cards"]}, "evidence": "Angel of Mercy' is the name of card;"}
{"sample_id": 9768, "db_id": "card_games", "final": {"question": "List all the card id and artist with unknown power which are legal for commander play format.", "sql": "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T2.format = 'commander' AND (T1.power IS NULL OR T1.power = '*')", "source_tables": ["legalities", "cards"]}, "evidence": "unknown power refers to power = '*' or POWER IS NULL; commander play format refers to format = 'commander'; legal for commander play format refers to format = 'commander' where status = 'Legal'"}
{"sample_id": 9887, "db_id": "card_games", "final": {"question": "For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?", "sql": "SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'", "source_tables": ["set_translations", "cards"]}, "evidence": "set of cards with \"Ancestor''s Chosen\" in it refers to name = 'Ancestor''s Chosen'; Korean version refers to language = 'Korean'"}
{"sample_id": 9809, "db_id": "card_games", "final": {"question": "What are the cards for set OGW? State the colour for these cards.", "sql": "SELECT id, colors FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )", "source_tables": ["set_translations", "cards"]}, "evidence": "set OGW refers to setCode = 'OGW';"}
{"sample_id": 9895, "db_id": "card_games", "final": {"question": "Is the set of cards with Adarkar Valkyrie only available outside the United States?", "sql": "SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Adarkar Valkyrie'", "source_tables": ["sets", "cards"]}, "evidence": "card set Adarkar Valkyrie refers to name = 'Adarkar Valkyrie'; isForeignOnly = 1 means only available outside the United States;"}
{"sample_id": 9804, "db_id": "card_games", "final": {"question": "What are the cards that only available in paper and Japanese language?", "sql": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'", "source_tables": ["foreign_data", "cards"]}, "evidence": "available in paper refers to availability = 'paper'; 'Japanese is the language;"}
{"sample_id": 9943, "db_id": "card_games", "final": {"question": "Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in legacy play format that has sensitive content or Wizards of the Coast?", "sql": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.frameVersion = 1997 AND T1.hasContentWarning = 1 AND T1.artist = 'D. Alexander Gregory' AND T2.format = 'legacy'", "source_tables": ["legalities", "cards"]}, "evidence": "version of frame style is 1997 refers to frameVersion = '1997'; illustrated by D. Alexander Gregory refers to artist = 'D. Alexander Gregory'; sensitive content refers to hasContentWarning = 1; legacy play format refers to format = 'legacy'; status of the card refers to status"}
{"sample_id": 9907, "db_id": "card_games", "final": {"question": "When was the ruling for the card 'Reminisce' created?", "sql": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'", "source_tables": ["rulings", "cards"]}, "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date"}
{"sample_id": 9911, "db_id": "card_games", "final": {"question": "List the keyrune code for the set whose code is 'PKHC'.", "sql": "SELECT keyruneCode FROM sets WHERE code = 'PKHC'", "source_tables": ["sets"]}, "evidence": "keyrune code refers to keyruneCode"}
{"sample_id": 9866, "db_id": "card_games", "final": {"question": "Name the foreign name of the card that has boros watermark? List out the type of this card.", "sql": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'", "source_tables": ["foreign_data", "cards"]}, "evidence": ""}
{"sample_id": 9936, "db_id": "card_games", "final": {"question": "In duels, what are the top 10 cards with the highest uncoverted mana cost?", "sql": "SELECT DISTINCT name FROM cards WHERE uuid IN ( SELECT uuid FROM legalities WHERE format = 'duel' ) ORDER BY manaCost DESC LIMIT 0, 10", "source_tables": ["legalities", "cards"]}, "evidence": "duels refer to format = 'duel'; the highest uncoverted mana cost refers to MAX(manaCost)"}
{"sample_id": 9806, "db_id": "card_games", "final": {"question": "List down the uuid for legacy cards and the foreign language of these cards.", "sql": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'", "source_tables": ["legalities", "foreign_data", "cards"]}, "evidence": "legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data"}
{"sample_id": 9885, "db_id": "card_games", "final": {"question": "How many translations are there for the set of cards with \"Angel of Mercy\" in it?", "sql": "SELECT COUNT(DISTINCT translation) FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Angel of Mercy' ) AND translation IS NOT NULL", "source_tables": ["set_translations", "cards"]}, "evidence": "set of cards with \"Angel of Mercy\" in it refers to name = 'Angel of Mercy'"}
{"sample_id": 9861, "db_id": "card_games", "final": {"question": "List out the set name of the set code \"ALL\".", "sql": "SELECT name FROM sets WHERE code = 'ALL'", "source_tables": ["sets"]}, "evidence": ""}
{"sample_id": 9814, "db_id": "card_games", "final": {"question": "Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date.", "sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3", "source_tables": ["rulings", "cards"]}, "evidence": "uncommon refers to rarity = 'uncommon';"}
{"sample_id": 9845, "db_id": "card_games", "final": {"question": "Please provide the ids of top three powerful pairs of Kingdom Foil and Kingdom Cards sorted by Kingdom Foil id in alphabetical order.", "sql": "SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3", "source_tables": ["cards"]}, "evidence": "poweful refers to cardKingdomFoilId is not null AND cardKingdomId is not null"}
{"sample_id": 9834, "db_id": "card_games", "final": {"question": "What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?", "sql": "SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'", "source_tables": ["foreign_data", "cards"]}, "evidence": "in French refers to language = 'French'; black border color refers to borderColor = 'black'"}
{"sample_id": 9946, "db_id": "card_games", "final": {"question": "List the artists who illustrated cards with black borders which are available only in arena.", "sql": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'", "source_tables": ["cards"]}, "evidence": "black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'"}
{"sample_id": 9810, "db_id": "card_games", "final": {"question": "What are the cards in set 10E with converted mana of 5 have translation and what are the languages?", "sql": "SELECT id, language FROM set_translations WHERE id = ( SELECT id FROM cards WHERE convertedManaCost = 5 ) AND setCode = '10E'", "source_tables": ["set_translations", "cards"]}, "evidence": "set 10E refers to setCode = '10E'; converted mana of 5 refers to convertedManaCost = 5;"}
{"sample_id": 9871, "db_id": "card_games", "final": {"question": "What is the language of the card that has azorius watermark? List out the type of this card.", "sql": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'", "source_tables": ["foreign_data", "cards"]}, "evidence": ""}
{"sample_id": 9795, "db_id": "card_games", "final": {"question": "Name the cards that were illustrated by Aaron Boyd.", "sql": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'", "source_tables": ["cards"]}, "evidence": "Aaron Boyd' is artist;"}
{"sample_id": 9783, "db_id": "card_games", "final": {"question": "How many cards of legalities whose status is restricted have text boxes?", "sql": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isTextless = 0", "source_tables": ["legalities", "cards"]}, "evidence": "restricted refers to status = 'restricted'; have text boxes refers to is Textless = 0;"}
{"sample_id": 9898, "db_id": "card_games", "final": {"question": "Please list the name of the cards in the set Coldsnap with the highest converted mana cost.", "sql": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1", "source_tables": ["sets", "cards"]}, "evidence": "card set Coldsnap refers to name = 'Coldsnap'"}
{"sample_id": 9852, "db_id": "card_games", "final": {"question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.", "sql": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2", "source_tables": ["set_translations", "sets"]}, "evidence": ""}
{"sample_id": 9813, "db_id": "card_games", "final": {"question": "Among the Artifact cards, which are black color and comes with foreign languague translation?", "sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'", "source_tables": ["foreign_data", "cards"]}, "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data"}
{"sample_id": 9881, "db_id": "card_games", "final": {"question": "Which card costs more converted mana, \"Serra Angel\" or \"Shrine Keeper\"?", "sql": "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1", "source_tables": ["cards"]}, "evidence": "\"Serra Angel\" refers to name = 'Serra Angel'; \"Shrine Keeper\" refers to name = 'Shrine Keeper'; card costs more converted mana when the value of convertedManaCost is greater"}
{"sample_id": 9919, "db_id": "card_games", "final": {"question": "List the expansion type of the set \"Huiti\u00e8me \u00e9dition\".", "sql": "SELECT type FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE translation = 'Huiti\u00e8me \u00e9dition' )", "source_tables": ["set_translations", "sets"]}, "evidence": "the set \"Huiti\u00e8me \u00e9dition\" refers to translation = 'Huiti\u00e8me \u00e9dition'; expansion type refers to type"}
{"sample_id": 9842, "db_id": "card_games", "final": {"question": "How many cards are oversized, reprinted, and printed for promotions?", "sql": "SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1", "source_tables": ["cards"]}, "evidence": "are oversized refers to isOversized = 1; reprinted refers to isReprint = 1; printed for promotions refers to isPromo = 1"}
{"sample_id": 9891, "db_id": "card_games", "final": {"question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?", "sql": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'", "source_tables": ["sets", "cards"]}, "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa"}
{"sample_id": 9867, "db_id": "card_games", "final": {"question": "What is the language and flavor text of the card that has colorpie watermark? List out the type of this card.", "sql": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'", "source_tables": ["foreign_data", "cards"]}, "evidence": ""}
{"sample_id": 9883, "db_id": "card_games", "final": {"question": "Please list the names of the top 3 cards with the highest converted mana cost and have a 2003 card frame style.", "sql": "SELECT name FROM cards WHERE frameVersion = 2003 ORDER BY convertedManaCost DESC LIMIT 3", "source_tables": ["cards"]}, "evidence": "name of cards refers to name; 2003 card frame style refers to frameVersion = '2003'"}
{"sample_id": 9817, "db_id": "card_games", "final": {"question": "How many cards designed by UDON and available in mtgo print type has a starting maximum hand size of -1?", "sql": "SELECT COUNT(id) FROM cards WHERE hAND = '-1' AND artist = 'UDON' AND Availability = 'mtgo'", "source_tables": ["cards"]}, "evidence": "UDON refer to artist; availabe in mtgo refers to availability = 'mtgo'; starting maximum hand size of -1 refers to hand = -1"}
{"sample_id": 9890, "db_id": "card_games", "final": {"question": "What is the Simplified Chinese translation of the name of the set \"Eighth Edition\"?", "sql": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'", "source_tables": ["set_translations", "sets"]}, "evidence": "Eighth Edition is the name of card set which refers to name = 'Eighth Edition'; Simplified Chinese refers to language = 'Chinese Simplified'; translation of the name refers to translation"}
{"sample_id": 9876, "db_id": "card_games", "final": {"question": "Among the cards with a white border color, how many of them have unknown power?", "sql": "SELECT SUM(CASE WHEN power LIKE '%*%' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE borderColor = 'white'", "source_tables": ["cards"]}, "evidence": "unknown power refers to power = '*' or power is null"}
{"sample_id": 9787, "db_id": "card_games", "final": {"question": "What is the type of card \"Benalish Knight\"?", "sql": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'", "source_tables": ["foreign_data", "cards"]}, "evidence": "Benalish Knight' is the name of card;"}
{"sample_id": 9952, "db_id": "card_games", "final": {"question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.", "sql": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'", "source_tables": ["legalities", "cards"]}, "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'"}
{"sample_id": 9931, "db_id": "card_games", "final": {"question": "What is the unique id of the set that has the highest number of cards?", "sql": "SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1", "source_tables": ["sets"]}, "evidence": "the highest number of cards refers to MAX(baseSetSize); unique id refers to id"}
{"sample_id": 9793, "db_id": "card_games", "final": {"question": "What is the percentage of cards whose language is French among the Story Spotlight cards?", "sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1", "source_tables": ["foreign_data", "cards"]}, "evidence": "Story Spotlight card refers to isStorySpotlight = 1; French is the language; Percentage = Divide(Count(id) where language = 'French' and isStorySpotlight = 1, Count(id) where isStorySpotlight = 1)*100"}
{"sample_id": 9921, "db_id": "card_games", "final": {"question": "How many translations of the name of the set \"Tenth Edition\"?", "sql": "SELECT COUNT(DISTINCT T2.translation) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Tenth Edition' AND T2.translation IS NOT NULL", "source_tables": ["set_translations", "sets"]}, "evidence": "translations of the name refers to translation; translation is not NULL; set \"Salvat 2011\" refers to name = 'Tenth Edition'"}
{"sample_id": 10136, "db_id": "codebase_community", "final": {"question": "List the comments commented by the user with a username of Harvey Motulsky.", "sql": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'", "source_tables": ["users", "comments"]}, "evidence": "comments refer to Text; username of Harvey Motulsky refers to DisplayName = 'Harvey Motulsky';"}
{"sample_id": 10020, "db_id": "codebase_community", "final": {"question": "What is the percentage difference of student badges given during 2010 and 2011?", "sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Student'", "source_tables": ["badges"]}, "evidence": "student badges refers to badge's name = 'Student'; during 2010 refers to Year(Date) = 2010; during 2011 refers to Year(Date) = 2011; percentage difference = Subtract (Divide(Count(Name where Year(Date) = 2010), Count (Name)) *100, Divide(Count(Name where Year(Date) = 2011), Count(Name)) * 100)"}
{"sample_id": 9994, "db_id": "codebase_community", "final": {"question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?", "sql": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'", "source_tables": ["posts"]}, "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount"}
{"sample_id": 10067, "db_id": "codebase_community", "final": {"question": "How many negative comments were given by user ID 13?", "sql": "SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60", "source_tables": ["comments"]}, "evidence": "negative comments refer to Score < 60;"}
{"sample_id": 10062, "db_id": "codebase_community", "final": {"question": "Calculate the difference in view count from post posted by Mornington and view count from posts posted by Amos.", "sql": "SELECT SUM(IIF(T1.DisplayName = 'Mornington', T3.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T3.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId", "source_tables": ["users", "posts", "posthistory"]}, "evidence": "calculation = SUBTRACT(SUM(ViewCount where DisplayName = 'Mornington'), SUM(ViewCount where DisplayName = 'Amos'));"}
{"sample_id": 10106, "db_id": "codebase_community", "final": {"question": "Identify the percentage of teenage users.", "sql": "SELECT CAST(SUM(IIF(Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users", "source_tables": ["users"]}, "evidence": "DIVIDE(COUNT(Id where Age BETWEEN 13 and 18), COUNT(Id)) as percentage;"}
{"sample_id": 10050, "db_id": "codebase_community", "final": {"question": "Which users have the highest number of views?", "sql": "SELECT Id, DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )", "source_tables": ["users"]}, "evidence": "users have the highest number of views refer to DisplayName where MAX(Views);"}
{"sample_id": 10122, "db_id": "codebase_community", "final": {"question": "Identify the number of posts that offer a bounty amount over 30.", "sql": "SELECT COUNT(id) FROM votes WHERE BountyAmount >= 30", "source_tables": ["votes"]}, "evidence": "bounty amount over 30 refers to BountyAmount > = 30;"}
{"sample_id": 10009, "db_id": "codebase_community", "final": {"question": "Calculate the average view count of each post tagged as 'humor' and list the title and the comment of each post.", "sql": "SELECT AVG(T2.ViewCount), T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.PostId  WHERE T2.Tags = '<humor>' GROUP BY T2.Title, T1.Text", "source_tables": ["comments", "posts"]}, "evidence": "tagged as  'humor' refers to tag = '<humor>'; comment of the post refers to Text; average view count = AVG(ViewCount)"}
{"sample_id": 10034, "db_id": "codebase_community", "final": {"question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?", "sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'", "source_tables": ["users", "badges"]}, "evidence": ""}
{"sample_id": 9973, "db_id": "codebase_community", "final": {"question": "How many badges has the user csgillespie obtained?", "sql": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "source_tables": ["users", "badges"]}, "evidence": "\"csgillespie\" is the DisplayName of user"}
{"sample_id": 10100, "db_id": "codebase_community", "final": {"question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.", "sql": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1", "source_tables": ["users", "posts"]}, "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);"}
{"sample_id": 9972, "db_id": "codebase_community", "final": {"question": "From which post is the most popular tag excerpted from? Please give the body of the post.", "sql": "SELECT Body FROM posts WHERE id = ( SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1 )", "source_tables": ["tags", "posts"]}, "evidence": "most popular tag refers to Max(Count); excerpt from refer to ExcerptPostId"}
{"sample_id": 9995, "db_id": "codebase_community", "final": {"question": "Write the contents of comments with a score of 17.", "sql": "SELECT Text FROM comments WHERE Score = 17", "source_tables": ["comments"]}, "evidence": "score of 17 refers to Score = 17; contents of comments refers to Text"}
{"sample_id": 10069, "db_id": "codebase_community", "final": {"question": "Provide the badge names received in 2011 for the user whose location is in the North Pole.", "sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'", "source_tables": ["users", "badges"]}, "evidence": "received in 2011 refers to year(Date) = 2011;"}
{"sample_id": 10091, "db_id": "codebase_community", "final": {"question": "When did 'chl' cast its first vote in a post?", "sql": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1", "source_tables": ["votes", "users"]}, "evidence": "DisplayName = 'chl'; cast its first vote refers to MIN(CreationDate);"}
{"sample_id": 10075, "db_id": "codebase_community", "final": {"question": "What is the owner's display name of the most popular post?", "sql": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1 )", "source_tables": ["users", "posts"]}, "evidence": "Higher view count means the post has higher popularity; the most popular post refers to MAX(ViewCount);"}
{"sample_id": 10099, "db_id": "codebase_community", "final": {"question": "How many posts did Jay Stevens have in 2010?", "sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2010' AND T1.DisplayName = 'Jay Stevens'", "source_tables": ["users", "posts"]}, "evidence": "DisplayName = 'Jay Stevens'; in 2010 refers to YEAR(CreationDate) = 2010;"}
{"sample_id": 10066, "db_id": "codebase_community", "final": {"question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".", "sql": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'", "source_tables": ["posts"]}, "evidence": "Title = 'Detecting a given face in a database of facial images';"}
{"sample_id": 10021, "db_id": "codebase_community", "final": {"question": "What are the post history type IDs for post ID 3720 and how many unique users have commented on the post?", "sql": "SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS NumberOfUsers FROM postHistory AS T1 WHERE T1.PostId = 3720", "source_tables": ["comments", "posthistory"]}, "evidence": ""}
{"sample_id": 9998, "db_id": "codebase_community", "final": {"question": "Name the user that commented 'thank you user93!'", "sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'", "source_tables": ["users", "comments"]}, "evidence": "\"thank you user93\" is the Text of comment; user refers to DisplayName"}
{"sample_id": 10026, "db_id": "codebase_community", "final": {"question": "What is the average of the up votes and the average user age for users creating more than 10 posts?", "sql": "SELECT AVG(T1.UpVotes), AVG(T1.Age) FROM users AS T1 INNER JOIN ( SELECT OwnerUserId, COUNT(*) AS post_count FROM posts GROUP BY OwnerUserId HAVING post_count > 10) AS T2 ON T1.Id = T2.OwnerUserId", "source_tables": ["users", "posts"]}, "evidence": "creating more than 10 post refers to Count (UserId) > 10; average of the up votes = Divide (Sum(UpVotes), Count (UserId)); average age = Divide (Sum(Age), Count(UserId))"}
{"sample_id": 9960, "db_id": "codebase_community", "final": {"question": "Please list the titles of the posts owned by the user csgillespie?", "sql": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "source_tables": ["users", "posts"]}, "evidence": "\"csgillespie\" is the DisplayName of user"}
{"sample_id": 10005, "db_id": "codebase_community", "final": {"question": "What is the total score of the posts edited by Yevgeny and include the user's website URL.", "sql": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.WebsiteUrl", "source_tables": ["users", "posts"]}, "evidence": "\"Yevgeny\" is the DisplayName; edited refers to LastEditorUserId"}
{"sample_id": 9967, "db_id": "codebase_community", "final": {"question": "Among the posts owned by csgillespie, how many of them are root posts?", "sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL", "source_tables": ["users", "posts"]}, "evidence": "\"csgillespie\" is the DisplayName of user; root post refers to ParentId IS Null"}
{"sample_id": 10093, "db_id": "codebase_community", "final": {"question": "What is the display name of the user who acquired the first Autobiographer badge?", "sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.\"Name\" = 'Autobiographer' ORDER BY T2.Date LIMIT 1", "source_tables": ["users", "badges"]}, "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);"}
{"sample_id": 10002, "db_id": "codebase_community", "final": {"question": "Name 10 users with the badge name 'Necromancer.'", "sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10", "source_tables": ["users", "badges"]}, "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName"}
{"sample_id": 10128, "db_id": "codebase_community", "final": {"question": "Give the texts commented on the post about linear regression.", "sql": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%linear regression%'", "source_tables": ["comments", "posts"]}, "evidence": "about linear regression refers to Title contains 'linear regression'"}
{"sample_id": 10024, "db_id": "codebase_community", "final": {"question": "List out all post ID with score more than 60 and list out all the user ID that created these post.", "sql": "SELECT PostId, UserId FROM postHistory WHERE PostId IN ( SELECT Id FROM posts WHERE Score > 60 )", "source_tables": ["posts", "posthistory"]}, "evidence": "score more than 60 refers to Score > 60"}
{"sample_id": 9953, "db_id": "codebase_community", "final": {"question": "Which user has a higher reputation, Harlan or Jarrod Dixon?", "sql": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )", "source_tables": ["users"]}, "evidence": "\"Harlan\" and \"Jarrod Dixon\" are both DisplayName; highest reputation refers to Max(Reputation)"}
{"sample_id": 10096, "db_id": "codebase_community", "final": {"question": "Who has the highest reputation? Please give the display name.", "sql": "SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )", "source_tables": ["users"]}, "evidence": "the highest reputation refers to MAX(Reputation);"}
{"sample_id": 10058, "db_id": "codebase_community", "final": {"question": "How many negative comments did Neil McGuigan get in his posts?", "sql": "SELECT COUNT(T3.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T3.Score < 60", "source_tables": ["users", "comments", "posts"]}, "evidence": "Negative comment refers to score < 60; DisplayName = 'Neil McGuigan';"}
{"sample_id": 9984, "db_id": "codebase_community", "final": {"question": "For the post which got 1910 view counts, how many comments does it get?", "sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910", "source_tables": ["comments", "posts"]}, "evidence": ""}
{"sample_id": 10138, "db_id": "codebase_community", "final": {"question": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes?", "sql": "SELECT CAST(SUM(IIF(T1.UpVotes = 0, 1, 0)) AS REAL) * 100/ COUNT(T1.Id) AS per FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score BETWEEN 5 AND 10", "source_tables": ["users", "comments"]}, "evidence": "percentage = DIVIDE(COUNT(UserId where UpVotes = 0 and Score BETWEEN 5 and 10))*100, (COUNT(UserId where Score BETWEEN 5 and 10));"}
{"sample_id": 10082, "db_id": "codebase_community", "final": {"question": "What is the owner user id of the most valuable post?", "sql": "SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts )", "source_tables": ["posts"]}, "evidence": "the most valuable post refers to MAX(FavoriteCount);"}
{"sample_id": 10022, "db_id": "codebase_community", "final": {"question": "List out all post that are related to post ID 61217 and what is the popularity of this post?", "sql": "SELECT T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217", "source_tables": ["postlinks", "posts"]}, "evidence": "post related refers to RelatedPostId; popularity refers to ViewCount"}
{"sample_id": 9974, "db_id": "codebase_community", "final": {"question": "Please list the names of the badges obtained by csgillespie.", "sql": "SELECT T1.\"Name\" FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "source_tables": ["users", "badges"]}, "evidence": "\"csgillespie\" is the DisplayName of user"}
{"sample_id": 10046, "db_id": "codebase_community", "final": {"question": "What is the name of user with the ID of 30?", "sql": "SELECT DisplayName FROM users WHERE Id = 30", "source_tables": ["users"]}, "evidence": "name of user refers to DisplayName;"}
{"sample_id": 10259, "db_id": "superhero", "final": {"question": "Give the hero ID of superhero with the lowest attribute value.", "sql": "SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute )", "source_tables": ["hero_attribute"]}, "evidence": "lowest attribute value refers to MIN(attribute_value);"}
{"sample_id": 10161, "db_id": "superhero", "final": {"question": "What are the names of the superheroes with the power of death touch?", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'", "source_tables": ["superpower", "hero_power", "superhero"]}, "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'"}
{"sample_id": 10230, "db_id": "superhero", "final": {"question": "Find the race of the superhero who weighs 108kg and is 188cm tall.", "sql": "SELECT DISTINCT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188", "source_tables": ["race", "superhero"]}, "evidence": "weighs 108kg refers to weight_kg = 108; 188cm tall refers to height_cm = 188;"}
{"sample_id": 10220, "db_id": "superhero", "final": {"question": "What is the publisher for Hawkman, Karate Kid and Speedy?", "sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')", "source_tables": ["publisher", "superhero"]}, "evidence": "publisher refers to publisher_name; Hawkman refers to superhero_name = 'Hawkman'; Karate Kid refers to superhero_name = 'Karate Kid'; Speedy refers to superhero_name = 'Speedy';"}
{"sample_id": 10153, "db_id": "superhero", "final": {"question": "How many superheroes did DC Comics publish?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'", "source_tables": ["publisher", "superhero"]}, "evidence": "superheroes that DC Comics published refers to publisher_name = 'DC Comics'"}
{"sample_id": 10214, "db_id": "superhero", "final": {"question": "What is Abomination's superpower?", "sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'", "source_tables": ["superpower", "hero_power", "superhero"]}, "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;"}
{"sample_id": 10257, "db_id": "superhero", "final": {"question": "Among all superheroes in Marvel Comics, identify the percentage of 'good' superheroes.", "sql": "SELECT CAST(COUNT(CASE WHEN T3.alignment = 'Good' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.publisher_name = 'Marvel Comics'", "source_tables": ["alignment", "publisher", "superhero"]}, "evidence": "Marvel Comics refers to publisher_name = 'Marvel Comics'; percentage = MULTIPLY(DIVIDE(SUM(alignment = 'Good' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100.0); good superheroes refers to alignment = 'Good';"}
{"sample_id": 10168, "db_id": "superhero", "final": {"question": "Calculate the average attribute value of all superheroes.", "sql": "SELECT AVG(attribute_value) FROM hero_attribute", "source_tables": ["hero_attribute"]}, "evidence": "average attribute value of all superheroes refers to AVG(attribute_value)"}
{"sample_id": 10171, "db_id": "superhero", "final": {"question": "Provide the superpowers of the superhero called Deathlok.", "sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'", "source_tables": ["superpower", "hero_power", "superhero"]}, "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'"}
{"sample_id": 10189, "db_id": "superhero", "final": {"question": "What is the average of superheroes with no skin colour?", "sql": "SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id", "source_tables": ["colour", "superhero"]}, "evidence": "average = DIVIDE(COUNT(superhero.id), SUM(skin_colour_id = 1)); no skin colour refers to skin_colour_id WHERE colour.id = 1;"}
{"sample_id": 10256, "db_id": "superhero", "final": {"question": "Among all superheroes created by George Lucas, identify the percentage of female superheroes.", "sql": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'George Lucas'", "source_tables": ["publisher", "gender", "superhero"]}, "evidence": "created by George Lucas refers to publisher_name = 'George Lucas'; percentage = MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'George Lucas'), COUNT(publisher_name = 'George Lucas')), 100.0); female refers to gender = 'Female';"}
{"sample_id": 10245, "db_id": "superhero", "final": {"question": "How many female superheroes are in Marvel Comics?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.gender = 'Female'", "source_tables": ["publisher", "gender", "superhero"]}, "evidence": "female refers to gender = 'Female'; Marvel Comics refers to publisher_name = 'Marvel Comics';"}
{"sample_id": 10200, "db_id": "superhero", "final": {"question": "Provide superheroes' names who have the adaptation power.", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'", "source_tables": ["superpower", "hero_power", "superhero"]}, "evidence": "adaptation power refers to power_name = 'Adaptation';"}
{"sample_id": 10201, "db_id": "superhero", "final": {"question": "How many powers does Amazo hero have?", "sql": "SELECT COUNT(T1.power_id) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo'", "source_tables": ["hero_power", "superhero"]}, "evidence": "Amazo hero refers to superhero_name = 'Amazo';"}
{"sample_id": 10187, "db_id": "superhero", "final": {"question": "How many heroes have stealth power?", "sql": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'", "source_tables": ["superpower", "hero_power"]}, "evidence": "stealth power refers to power_name = 'stealth';"}
{"sample_id": 10255, "db_id": "superhero", "final": {"question": "Name the superhero, otherwise known as Charles Chandler.", "sql": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'", "source_tables": ["superhero"]}, "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;"}
{"sample_id": 10197, "db_id": "superhero", "final": {"question": "What is the percentage of blue female superheroes among all female superheroes?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.colour = 'Blue' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female'", "source_tables": ["gender", "colour", "superhero"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(colour = 'Blue' WHERE gender = 'Female'), COUNT(gender = 'Female')), 100); blue refers to the color = 'Blue' WHERE skin_colour_id = colour.id; female refers to gender = 'Female';"}
{"sample_id": 10218, "db_id": "superhero", "final": {"question": "State all of 3-D Man's attributes along with their values.", "sql": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'", "source_tables": ["hero_attribute", "attribute", "superhero"]}, "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;"}
{"sample_id": 10216, "db_id": "superhero", "final": {"question": "Which hero was the fastest?", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1", "source_tables": ["hero_attribute", "attribute", "superhero"]}, "evidence": "which hero refers to superhero_name; fastest refers to MAX(attribute_value) WHERE attribute_name = 'Speed';"}
{"sample_id": 10154, "db_id": "superhero", "final": {"question": "Which publisher published the slowest superhero?", "sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value LIMIT 1", "source_tables": ["hero_attribute", "publisher", "attribute", "superhero"]}, "evidence": "the slowest superhero refers to attribute_name = 'Speed' where MIN(attribute_value); publisher refers to publisher_name"}
{"sample_id": 10222, "db_id": "superhero", "final": {"question": "Calculate the percentage of superheroes with blue eyes.", "sql": "SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id", "source_tables": ["colour", "superhero"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(superhero_name WHERE color = 'Blue'), COUNT(superhero_name)), 100.0); blue eyes refers to color = 'Blue' and color.id =  eye_colour_id = 7;"}
{"sample_id": 10150, "db_id": "superhero", "final": {"question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.", "sql": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour", "source_tables": ["publisher", "colour", "superhero"]}, "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;"}
{"sample_id": 10263, "db_id": "superhero", "final": {"question": "Provide the weight and race of the superhero with superhero ID 40.", "sql": "SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40", "source_tables": ["race", "superhero"]}, "evidence": "weight refers to weight_kg; superhero ID 40 refers to superhero.id = 40;"}
{"sample_id": 10141, "db_id": "superhero", "final": {"question": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200", "source_tables": ["superpower", "hero_power", "superhero"]}, "evidence": "super power of \"Super Strength\" refers to power_name = 'Super Strength'; a height of over 200cm refers to height_cm > 200"}
{"sample_id": 10254, "db_id": "superhero", "final": {"question": "Name the tallest superhero.", "sql": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1", "source_tables": ["superhero"]}, "evidence": "tallest superhero refers to MAX(height_cm);"}
{"sample_id": 10146, "db_id": "superhero", "final": {"question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'", "source_tables": ["colour", "superhero"]}, "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'"}
{"sample_id": 10181, "db_id": "superhero", "final": {"question": "What is the eye clolour of the heaviest superhero?", "sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1", "source_tables": ["colour", "superhero"]}, "evidence": "the heaviest superhero refers to MAX(weight_kg); eye colour refers to colour where eye_colour_id = colour.id;"}
{"sample_id": 10357, "db_id": "formula_1", "final": {"question": "How many drivers managed to finish the race in the 2008 Australian Grand Prix?", "sql": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.time IS NOT NULL", "source_tables": ["results", "races"]}, "evidence": "managed to finish the race refers to time is not null"}
{"sample_id": 10421, "db_id": "formula_1", "final": {"question": "In terms of the fastest lap time, what is the name of the race which recorded the fastest lap speed by a racer?", "sql": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1", "source_tables": ["results", "races"]}, "evidence": "Fastest lap speed refers to MIN(fastestLapTime)\n\n"}
{"sample_id": 10422, "db_id": "formula_1", "final": {"question": "Which racetrack hosted the most recent race? Indicate the full location.", "sql": "SELECT T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.date DESC LIMIT 1", "source_tables": ["circuits", "races"]}, "evidence": "full location refers to location+country; most recent race = MAX(date)\n\n"}
{"sample_id": 10397, "db_id": "formula_1", "final": {"question": "Which year has the lowest speed of lap time?", "sql": "SELECT T2.year FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId ORDER BY T1.time DESC LIMIT 1", "source_tables": ["laptimes", "races"]}, "evidence": "lowest speed of lap time refers to Max(time);"}
{"sample_id": 10300, "db_id": "formula_1", "final": {"question": "Who was the driver that got the best lap time in the race No. 348? Give his full name.", "sql": "SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 348 ORDER BY T1.time ASC LIMIT 1", "source_tables": ["laptimes", "drivers"]}, "evidence": "race number refers to raceId; the best lap time refers to MIN(time)"}
{"sample_id": 10437, "db_id": "formula_1", "final": {"question": "In which Formula_1 race was the lap record for the Austrian Grand Prix Circuit set?", "sql": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T2.name FROM races AS T2 INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN results AS T1 on T2.raceId = T1.raceId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix'", "source_tables": ["results", "circuits", "races", "fastest_lap_times"]}, "evidence": "lap record means the fastest time recorded which refers to time"}
{"sample_id": 10385, "db_id": "formula_1", "final": {"question": "How many French drivers who obtain the laptime less than 02:00.00?", "sql": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120", "source_tables": ["laptimes", "drivers"]}, "evidence": "lap time less than 02:00.00 refers to seconds < 120;"}
{"sample_id": 10276, "db_id": "formula_1", "final": {"question": "What is the coordinates location of the circuits for Australian grand prix?", "sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Australian Grand Prix'", "source_tables": ["circuits", "races"]}, "evidence": "coordinate position/location refers to lat, lng; circuits for Australian grand prix refers to races.name = 'Australian Grand Prix'"}
{"sample_id": 10290, "db_id": "formula_1", "final": {"question": "Where is Malaysian Grand Prix held? Give the location coordinates.", "sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian Grand Prix'", "source_tables": ["circuits", "races"]}, "evidence": "location coordinates refers to (lat, lng); Malaysian Grand Prix refers to races.name = 'Malaysian Grand Prix'"}
{"sample_id": 10414, "db_id": "formula_1", "final": {"question": "Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth.", "sql": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC", "source_tables": ["drivers"]}, "evidence": "FFull name refers to forname+surname; Nationality refers to German; Date of birth refers to dob; year(dob) BETWEEN '1971' AND '1985'"}
{"sample_id": 10372, "db_id": "formula_1", "final": {"question": "Please list the constructor names with 0 points at race 291.", "sql": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T1.raceId = 291", "source_tables": ["constructors", "constructorstandings"]}, "evidence": "race at 291 refers to raceID = 291;"}
{"sample_id": 10400, "db_id": "formula_1", "final": {"question": "How many times the circuits were held in Austria? Please give their location and coordinates.", "sql": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'", "source_tables": ["circuits"]}, "evidence": "location coordinates refers to (lat,lng); Austria refers to country = 'Austria';"}
{"sample_id": 10336, "db_id": "formula_1", "final": {"question": "How many drivers don't have a code?", "sql": "SELECT COUNT(driverId) - COUNT(CASE WHEN code IS NOT NULL THEN code END) FROM drivers", "source_tables": ["drivers"]}, "evidence": "don't have a code refers to code is null"}
{"sample_id": 10339, "db_id": "formula_1", "final": {"question": "Which website should I go to if I want to know more about Anthony Davidson?", "sql": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'", "source_tables": ["drivers"]}, "evidence": "website refers to url"}
{"sample_id": 10431, "db_id": "formula_1", "final": {"question": "Please list the time each driver spent at the pit stop during the 2011 Australian Grand Prix.", "sql": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2011 AND T2.name = 'Australian Grand Prix'", "source_tables": ["pitstops", "races"]}, "evidence": "time spent at pit stop refers to duration"}
{"sample_id": 10268, "db_id": "formula_1", "final": {"question": "Please list the reference names of the drivers who are eliminated in the first period in race number 20.", "sql": "SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 20 ORDER BY T1.q1 DESC LIMIT 5", "source_tables": ["drivers", "qualifying"]}, "evidence": "driver reference name refers to driverRef; first qualifying period refers to q1; drivers who are eliminated in the first qualifying period refers to 5 drivers with MAX(q1); race number refers to raceId;"}
{"sample_id": 10281, "db_id": "formula_1", "final": {"question": "What's Bruno Senna's Q1 result in the qualifying race No. 354?", "sql": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'", "source_tables": ["drivers", "qualifying"]}, "evidence": "race number refers to raceId; Bruno Senna refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;"}
{"sample_id": 10363, "db_id": "formula_1", "final": {"question": "How many points did Lewis Hamilton get in total in all the Formula_1 races he participated?", "sql": "SELECT SUM(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'", "source_tables": ["results", "drivers"]}, "evidence": ""}
{"sample_id": 10383, "db_id": "formula_1", "final": {"question": "Which race has the shortest actual finishing time? Please give the name and year.", "sql": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 on T1.raceId = T2.raceId WHERE T2.milliseconds IS NOT NULL ORDER BY T2.milliseconds LIMIT 1", "source_tables": ["results", "races"]}, "evidence": "shortest actual finishing time refers to Min(milliseconds) except milliseconds = null;"}
{"sample_id": 10366, "db_id": "formula_1", "final": {"question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?", "sql": "WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)", "source_tables": ["champion_time", "results", "time_in_seconds", "races", "last_driver_incremental"]}, "evidence": "how much faster in percentage = divide(subtract(incremental time, champion time), last_driver time) * 100; last driver finished time = incremental time + champion time; only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null"}
{"sample_id": 10356, "db_id": "formula_1", "final": {"question": "Which driver was in the no. 4 grid formation when starting the race in 1989's Australian Grand Prix? Please give his forename and surname.", "sql": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T2.grid = 4 AND T1.name = 'Australian Grand Prix' AND T1.year = 1989", "source_tables": ["results", "drivers", "races"]}, "evidence": "the no. 4 grid formation refers to grid = 4"}
{"sample_id": 10317, "db_id": "formula_1", "final": {"question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?", "sql": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'", "source_tables": ["laptimes", "drivers", "races"]}, "evidence": "average lap time = AVG(milliseconds); 'Lewis Hamilton' refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; 'Malaysian Grand Prix' refers to races.name = 'Malaysian Grand Prix'"}
{"sample_id": 10393, "db_id": "formula_1", "final": {"question": "Please state the reference name of the oldest German driver.", "sql": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1", "source_tables": ["drivers"]}, "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef."}
{"sample_id": 10331, "db_id": "formula_1", "final": {"question": "Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix'", "source_tables": ["circuits", "races"]}, "evidence": "European Grand Prix races refers to races.name = 'European Grand Prix';percentage = divide(COUNT(races where country = Germany and name = 'Europearn Grand Prix'),COUNT(races where name = 'Europearn Grand Prix'))*100"}
{"sample_id": 10278, "db_id": "formula_1", "final": {"question": "Please list the time of the races held on Sepang International Circuit.", "sql": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'", "source_tables": ["circuits", "races"]}, "evidence": ""}
{"sample_id": 10434, "db_id": "formula_1", "final": {"question": "What was the position of the circuits during Lewis Hamilton's fastest lap in a Formula_1 race?", "sql": "SELECT T1.position FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1", "source_tables": ["laptimes", "drivers"]}, "evidence": "fastest lap refers to MIN(time)"}
{"sample_id": 10416, "db_id": "formula_1", "final": {"question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.", "sql": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1", "source_tables": ["constructors", "races", "constructorresults"]}, "evidence": "Monaco Grand Priz refers to the race; race in year between 1980 and 2010"}
{"sample_id": 10279, "db_id": "formula_1", "final": {"question": "Give the coordinate position for Abu Dhabi Grand Prix.", "sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'", "source_tables": ["circuits", "races"]}, "evidence": "coordinate position/location refers to lat, lng; Abu Dhabi Grand Prix refers to races.name = 'Abu Dhabi Grand Prix'"}
{"sample_id": 10292, "db_id": "formula_1", "final": {"question": "What's Lucas di Grassi's Q1 result in the race No. 345?", "sql": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 345 AND T2.forename = 'Lucas' AND T2.surname = 'di Grassi'", "source_tables": ["drivers", "qualifying"]}, "evidence": "race number refers to raceId;"}
{"sample_id": 10351, "db_id": "formula_1", "final": {"question": "Please list the Formula_1 races that Lewis Hamilton participated.", "sql": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'", "source_tables": ["results", "drivers", "races"]}, "evidence": ""}
{"sample_id": 10330, "db_id": "formula_1", "final": {"question": "What is the most laps f1 races had? Name the race, year and circuit location where the races with most laps was hosted.", "sql": "SELECT T3.lap, T2.name, T2.year, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN lapTimes AS T3 ON T3.raceId = T2.raceId ORDER BY T3.lap DESC LIMIT 1", "source_tables": ["laptimes", "circuits", "races"]}, "evidence": ""}
{"sample_id": 10361, "db_id": "formula_1", "final": {"question": "How many drivers from the UN participated in the 2008 Australian Grand Prix?", "sql": "SELECT COUNT(*) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T1.nationality = 'British' AND T3.year = 2008", "source_tables": ["results", "drivers", "races"]}, "evidence": "from the UN refers to nationality = 'British'"}
{"sample_id": 10413, "db_id": "formula_1", "final": {"question": "What is the full name and date of birth of Austrian drivers born between 1981 and 1991?", "sql": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'", "source_tables": ["drivers"]}, "evidence": "Full name refers to forname, surname; Date of birth refers to dob; year(dob) BETWEEN '1981' AND '1991'; Austrian is a nationality"}
{"sample_id": 10407, "db_id": "formula_1", "final": {"question": "Among the drivers who participated in the French Grand Prix, who has the slowest time in the 3rd lap.", "sql": "SELECT T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.time DESC LIMIT 1", "source_tables": ["laptimes", "races"]}, "evidence": "slowest time refers to Max(time);"}
{"sample_id": 10375, "db_id": "formula_1", "final": {"question": "How many French constructors have a lap number of over 50?", "sql": "SELECT COUNT(DISTINCT T2.constructorId) FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.laps > 50 AND T2.nationality = 'French'", "source_tables": ["results", "constructors"]}, "evidence": "lap numbers of over 50 refers to laps > 50;"}
{"sample_id": 10376, "db_id": "formula_1", "final": {"question": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.", "sql": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009", "source_tables": ["results", "drivers", "races"]}, "evidence": "from 2007 to 2009 refers to year between 2007 and 2009; race completion refers to time is not null; percentage = Divide(COUNT(DriverID where time is not null and year between 2007 and 2009),Count (DriverID where year between 2007 and 2009))*100; "}
{"sample_id": 10455, "db_id": "european_football_2", "final": {"question": "What is the average height of players born between 1990 and 1995?", "sql": "SELECT SUM(height) / COUNT(id) FROM Player WHERE SUBSTR(birthday, 1, 4) BETWEEN '1990' AND '1995'", "source_tables": ["player"]}, "evidence": "average height = DIVIDE(SUM(height), COUNT(id)); players born between 1990 and 1995 refers to birthday > = '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';"}
{"sample_id": 10530, "db_id": "european_football_2", "final": {"question": "What was the build up play speed class for \"Willem II\" on 2011/2/22?", "sql": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.\"date\", 1, 10) = '2011-02-22'", "source_tables": ["team_attributes", "team"]}, "evidence": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'"}
{"sample_id": 10500, "db_id": "european_football_2", "final": {"question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?", "sql": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1", "source_tables": ["player"]}, "evidence": "The larger the birthday value, the younger the person is, and vice versa;"}
{"sample_id": 10556, "db_id": "european_football_2", "final": {"question": "What is the difference between players 6 and 23's jumping scores?", "sql": "SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1", "source_tables": ["player_attributes"]}, "evidence": "difference between players 6 and 23's jumping scores refers to SUBTRACT(jumping AND id = 6,jumping AND id = 23)"}
{"sample_id": 10569, "db_id": "european_football_2", "final": {"question": "Please name one player whose overall strength is the greatest.", "sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes)", "source_tables": ["player_attributes", "player"]}, "evidence": "overall strength is the greatest refers to MAX(overall_rating)"}
{"sample_id": 10512, "db_id": "european_football_2", "final": {"question": "What is the long passing score of the oldest player?", "sql": "SELECT t2.long_passing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday ASC LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "long passing score refers to long_passing; oldest player refers to oldest birthday;"}
{"sample_id": 10501, "db_id": "european_football_2", "final": {"question": "Which player is the tallest?", "sql": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1", "source_tables": ["player"]}, "evidence": "tallest player refers to MAX(height);"}
{"sample_id": 10498, "db_id": "european_football_2", "final": {"question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?", "sql": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id", "source_tables": ["player_attributes", "player"]}, "evidence": "difference of the average ball control = SUBTRACT(AVG(ball_control WHERE player_name = 'Abdou Diallo'), AVG(ball_control WHERE player_name = 'Aaron Appindangoye')); AVG(ball_control WHERE player_name = 'XX XX') = SUM(CASE WHEN player_name = 'XX XX' THEN ball_control ELSE 0 END) / COUNT(CASE WHEN player_name = 'XX XX' THEN id ELSE NULL END)"}
{"sample_id": 10495, "db_id": "european_football_2", "final": {"question": "How many matches were held in the league Germany 1. Bundesliga\nfrom August to October 2008?", "sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Germany 1. Bundesliga' AND SUBSTR(t2.\"date\", 1, 7) BETWEEN '2008-08' AND '2008-10'", "source_tables": ["match", "league"]}, "evidence": "Germany 1. Bundesliga refers to League.name = 'Germany 1. Bundesliga'; from August to October 2008 refers to strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';"}
{"sample_id": 10538, "db_id": "european_football_2", "final": {"question": "List down most tallest players' name.", "sql": "SELECT player_name FROM (SELECT player_name, height, DENSE_RANK() OVER (ORDER BY height DESC) as rank FROM Player) WHERE rank = 1", "source_tables": ["player"]}, "evidence": "tallest refers to rank based on the height in descending order; Most tallest players refers to rank = 1 "}
{"sample_id": 10563, "db_id": "european_football_2", "final": {"question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?", "sql": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'", "source_tables": ["team_attributes", "team"]}, "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass"}
{"sample_id": 10493, "db_id": "european_football_2", "final": {"question": "List the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team.", "sql": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeed = 31 AND t2.buildUpPlayDribbling = 53 AND t2.buildUpPlayPassing = 32", "source_tables": ["team_attributes", "team"]}, "evidence": "build up play speed refers to buildUpPlaySpeed; buildUpPlaySpeed = 31; build up play dribbling refers to buildUpPlayDribbling; buildUpPlayDribbling = 53; build up play passing refers to buildUpPlayPassing; buildUpPlayPassing = 32; short name of the team refers to team_short_name;"}
{"sample_id": 10534, "db_id": "european_football_2", "final": {"question": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?", "sql": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.\"date\", 1, 10) = '2010-02-22'", "source_tables": ["team_attributes", "team"]}, "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'"}
{"sample_id": 10524, "db_id": "european_football_2", "final": {"question": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.", "sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.\"date\", 1, 10) = '2016-06-23' AND t2.overall_rating = 77 ORDER BY t1.birthday ASC LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "77 points overall rating refers to overall_rating = 77; on 2016/6/23 refers to date LIKE '2016-06-23%'; The larger the birthday value, the younger the person is, and vice versa;"}
{"sample_id": 10468, "db_id": "european_football_2", "final": {"question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?", "sql": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'", "source_tables": ["team_attributes", "team"]}, "evidence": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;"}
{"sample_id": 10480, "db_id": "european_football_2", "final": {"question": "Who has the highest average finishing rate between the highest and shortest football player?", "sql": "SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "finishing rate refers to finishing; highest average finishing rate = MAX(AVG(finishing)); highest football player refers to MAX(height); shortest football player refers to MIN(height);"}
{"sample_id": 10540, "db_id": "european_football_2", "final": {"question": "List down the name of players who are 35 years old and above.", "sql": "SELECT player_name FROM Player WHERE CAST((JULIANDAY('now') - JULIANDAY(birthday)) AS REAL) / 365 >= 35", "source_tables": ["player"]}, "evidence": "35 years old and above refers to datetime(CURRENT_TIMESTAMP,'localtime') - datetime(birthday) > 34"}
{"sample_id": 10526, "db_id": "european_football_2", "final": {"question": "What was the potiential for Francesco Parravicini on 2010/8/30?", "sql": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.\"date\", 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'", "source_tables": ["player_attributes", "player"]}, "evidence": "Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'"}
{"sample_id": 10543, "db_id": "european_football_2", "final": {"question": "Calculate the total home team goal scored by players whose age are 30 years old and below.", "sql": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_1 WHERE datetime(CURRENT_TIMESTAMP, 'localtime') - datetime(T1.birthday) < 31", "source_tables": ["match", "player"]}, "evidence": "age are 30 years old and below refers to SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'), datetime(birthday) < 31)"}
{"sample_id": 10515, "db_id": "european_football_2", "final": {"question": "What is the average overall rating of the players born before the year 1986?", "sql": "SELECT SUM(t2.overall_rating) / COUNT(t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) < '1986'", "source_tables": ["player_attributes", "player"]}, "evidence": "average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); born before the year 1986 refers to strftime('%Y', birthday) < '1986';"}
{"sample_id": 10558, "db_id": "european_football_2", "final": {"question": "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?", "sql": "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes)", "source_tables": ["player_attributes"]}, "evidence": "highest potential score for crossing refers to MAX(crossing); preferred to use their left foots while attacking refers to preferred_foot = 'left'"}
{"sample_id": 10447, "db_id": "european_football_2", "final": {"question": "Give the name of the league had the most goals in the 2016 season?", "sql": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' GROUP BY t2.name ORDER BY SUM(t1.home_team_goal + t1.away_team_goal) DESC LIMIT 1", "source_tables": ["match", "league"]}, "evidence": "league that had the most goals refers to MAX(SUM(home_team_goal, away_team_goal)); 2016 season refers to season = '2015/2016';"}
{"sample_id": 10457, "db_id": "european_football_2", "final": {"question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.", "sql": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60", "source_tables": ["team_attributes"]}, "evidence": "teams with more than 50 but less than 60 build-up play speed refers to buildUpPlaySpeed >50 AND buildUpPlaySpeed <60; "}
{"sample_id": 10549, "db_id": "european_football_2", "final": {"question": "Locate players with vision scores of 90 and above, state the country of these players.", "sql": "SELECT DISTINCT t4.name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id INNER JOIN Match AS t3 ON t2.player_api_id = t3.home_player_8 INNER JOIN Country AS t4 ON t3.country_id = t4.id WHERE t1.vision > 89", "source_tables": ["player_attributes", "country", "match", "player"]}, "evidence": "vision scores of 90 and above refers to vision > 89"}
{"sample_id": 10461, "db_id": "european_football_2", "final": {"question": "Find the average number of long-shot done by Ahmed Samir Farag.", "sql": "SELECT CAST(SUM(t2.long_shots) AS REAL) / COUNT(t2.\"date\") FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'", "source_tables": ["player_attributes", "player"]}, "evidence": "average number of long shot = DIVIDE(SUM(long_shots), COUNT(player_fifa_api_id));"}
{"sample_id": 10520, "db_id": "european_football_2", "final": {"question": "What is Ajax's highest chance creation passing score and what is it classified as?", "sql": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1", "source_tables": ["team_attributes", "team"]}, "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass"}
{"sample_id": 10521, "db_id": "european_football_2", "final": {"question": "Which foot is preferred by Abdou Diallo?", "sql": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'", "source_tables": ["player_attributes", "player"]}, "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot"}
{"sample_id": 10692, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = 'negative' OR T2.SC170 = '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL", "source_tables": ["laboratory", "examination", "patient"]}, "evidence": "normal anti-scl70 refers to SC170 IN('negative', '0'); female refers to Sex = 'F'; does not have any symptom refers to symptoms IS NULL; Should consider DISTINCT in the final result;"}
{"sample_id": 10698, "db_id": "thrombosis_prediction", "final": {"question": "For the patients who have an abnormal level of anti-DNA, please list the diseases they are diagnosed with.", "sql": "SELECT DISTINCT(T1.Diagnosis) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA >= 8", "source_tables": ["laboratory", "patient"]}, "evidence": "abnormal level of anti-DNA refers to DNA > = 8; diseases refers to Diagnosis;"}
{"sample_id": 10730, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients who have a normal platelet level, how many of them have other symptoms observed?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 100 AND T2.PLT < 400 AND T1.Diagnosis IS NOT NULL", "source_tables": ["laboratory", "patient"]}, "evidence": "normal platelet level refers to PLT > 100 and PLT < 400; have other symptoms refers to Diagnosis is not null;"}
{"sample_id": 10727, "db_id": "thrombosis_prediction", "final": {"question": "How many patients accepted to the hospital have a normal level of white blood cells?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC BETWEEN 3.5 AND 9 AND T1.Admission = '+'", "source_tables": ["laboratory", "patient"]}, "evidence": "accepted to the hospital refers to Admission = '+'; normal level of white blood cells refers to WBC between 3.5 and 9.0;"}
{"sample_id": 10607, "db_id": "thrombosis_prediction", "final": {"question": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?", "sql": "SELECT CAST((SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.\"T-CHO\" ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.\"T-CHO\" ELSE 0 END)) AS REAL) / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.\"T-CHO\" ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'", "source_tables": ["laboratory", "patient"]}, "evidence": "born on 1959/2/18 refers to Birthday = '1959-02-18'; calculation = SUBTRACT(SUM(Birthday = '1959-02-18' and Date like '1981-11-%' THEN `T-CHO`), SUM(Birthday = '1959-02-18' and Date like '1981-12-%' THEN `T-CHO`))"}
{"sample_id": 10601, "db_id": "thrombosis_prediction", "final": {"question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?", "sql": "SELECT \"aCL IgA\", \"aCL IgG\", \"aCL IgM\" FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND \"Examination Date\" = '1993-11-12'", "source_tables": ["examination", "patient"]}, "evidence": "diagnosed with SLE refers to Diagnosis = 'SLE'; 1994/2/19 refers to Description = '1994-02-19'; anti-Cardiolipin refers to aCL IgM; 1993/11/12 refers to Examination Date = '1993/11/12'"}
{"sample_id": 10715, "db_id": "thrombosis_prediction", "final": {"question": "What is the highest anti-nucleus antibody concentration level of a patient with a normal creatinine level?", "sql": "SELECT T2.ANA FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.CRE < 1.5 ORDER BY T2.ANA DESC LIMIT 1", "source_tables": ["laboratory", "examination", "patient"]}, "evidence": "highest anti-nucleus antibody concentration level refers to MAX(ANA); normal creatinine level refers to CRE < 1.5;"}
{"sample_id": 10688, "db_id": "thrombosis_prediction", "final": {"question": "Which is the youngest patient with an abnormal anti-ribonuclear protein level? Please list his or her date of birth.", "sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP != '-' OR '+-' ORDER BY T1.Birthday DESC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "youngest patient refers to MAX(Birthday); abnormal anti-ribonuclear protein level refers to RNP NOT IN('-', '+-'); date of birth refers to Birthday;"}
{"sample_id": 10699, "db_id": "thrombosis_prediction", "final": {"question": "How many patients have a normal anti-DNA level, yet their data are not recorded.", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA < 8 AND T1.Description IS NULL", "source_tables": ["laboratory", "patient"]}, "evidence": "normal anti-DNA level refers to DNA < 8; data are not recorded refers to Description IS NULL; Should compute the number of unique ones"}
{"sample_id": 10640, "db_id": "thrombosis_prediction", "final": {"question": "What is the percentage of the female patient whose uric acid (UA) beyond the normal range?", "sql": "SELECT CAST(SUM(CASE WHEN T2.UA > 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'", "source_tables": ["laboratory", "patient"]}, "evidence": "uric acid (UA) beyond the normal range refers to UA > 8.0 and SEX = 'M' or UA > 6.5 and SEX = 'F'; female refers to Sex = 'F'"}
{"sample_id": 10719, "db_id": "thrombosis_prediction", "final": {"question": "For the patients whose total cholesterol is higher than normal, how many of them have a negative measure of degree of coagulation?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.\"T-CHO\" >= 250 AND T3.KCT = '-'", "source_tables": ["laboratory", "examination", "patient"]}, "evidence": "total cholesterol is higher than normal refers to `T-CHO` > = 250; negative measure of degree of coagulation refers to KCT = '-' ;"}
{"sample_id": 10579, "db_id": "thrombosis_prediction", "final": {"question": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.", "sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2", "source_tables": ["examination", "patient"]}, "evidence": "severe degree of thrombosis refers to thrombosis = 2; disease refers to diagnosis;"}
{"sample_id": 10711, "db_id": "thrombosis_prediction", "final": {"question": "For the patients who are diagnosed with SJS, how many of them have a normal level of total protein?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5", "source_tables": ["laboratory", "patient"]}, "evidence": "diagnosed with SJS refers to Diagnosis = 'SJS'; normal level of total protein refers to TP > 6.0 and TP < 8.5;"}
{"sample_id": 10591, "db_id": "thrombosis_prediction", "final": {"question": "What is the ratio of male to female patients among all those with abnormal uric acid counts?", "sql": "SELECT CAST(SUM(CASE WHEN T2.UA <= 8.0 AND T1.SEX = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.UA <= 6.5 AND T1.SEX = 'F' THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID", "source_tables": ["laboratory", "patient"]}, "evidence": "male refers to SEX = 'M'; female refers to SEX = 'F'; abnormal uric acid refers to UA < = '8.0' where SEX = 'M', UA < = '6.5' where SEX = 'F'; calculation = DIVIDE(SUM(UA <= '8.0' and SEX = 'M'), SUM(UA <= '6.5 and SEX = 'F'))"}
{"sample_id": 10681, "db_id": "thrombosis_prediction", "final": {"question": "Please list the diseases of the patients born after 1985-1-1 and have a normal Rhuematoid Factor.", "sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T1.Birthday > '1985-01-01'", "source_tables": ["laboratory", "patient"]}, "evidence": "diseases refers to Diagnosis; born after 1985/1/1 refers to YEAR(Birthday) > = 1985; normal Rhuematoid Factor refers to RA IN('-', '+-');"}
{"sample_id": 10626, "db_id": "thrombosis_prediction", "final": {"question": "How long did it take after patient number 821298 arrived at the hospital for the first time before her evaluation began?", "sql": "SELECT STRFTIME('%d', T3.\"Examination Date\") - STRFTIME('%d', T1.\"First Date\") FROM Patient AS T1 INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T1.ID = 821298", "source_tables": ["examination", "patient"]}, "evidence": "DATEDIFF(`Examination Date`, `First Date`)"}
{"sample_id": 10651, "db_id": "thrombosis_prediction", "final": {"question": "For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 50", "source_tables": ["laboratory", "patient"]}, "evidence": "triglyceride (TG) level beyond the normal range refers to TG > = 200; more than 50 years of age = SUBTRACT(year(current_timestamp), year(Birthday)) > 50; Should consider DISTINCT in the final result;"}
{"sample_id": 10632, "db_id": "thrombosis_prediction", "final": {"question": "What is the average index of the lactate dehydrogenase (LDH) for all patients with lactate dehydrogenase (LDH) within the normal range.", "sql": "SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500", "source_tables": ["laboratory"]}, "evidence": "average index of the lactate dehydrogenase (LDH) refers to AVG(LDH); (LDH) within the normal range refers to LDH < 500"}
{"sample_id": 10644, "db_id": "thrombosis_prediction", "final": {"question": "How many male patients are are with creatinine index out of the normal range?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND T1.SEX = 'M'", "source_tables": ["laboratory", "patient"]}, "evidence": "creatinine (CRE) out of the normal range refers to CRE > = 1.5; Male refers to Sex = 'M'"}
{"sample_id": 10709, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients followed at the outpatient clinic, how many of them have a normal level of alkaliphophatase?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300 AND T1.Admission = '-'", "source_tables": ["laboratory", "patient"]}, "evidence": "followed at the outpatient clinic refers to Admission = '-'; normal level of alkaliphophatase refers to ALP < 300;"}
{"sample_id": 10680, "db_id": "thrombosis_prediction", "final": {"question": "How many patients with a normal Rhuematoid Factor has a positive measure of degree of coagulation?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T3.KCT = '+'", "source_tables": ["laboratory", "examination", "patient"]}, "evidence": "normal Rhuematoid Factor refers TO RA IN('-', '+-'); positive measure of degree of coagulation refers to KCT = '+'; Should compute the number of distinct ones"}
{"sample_id": 10620, "db_id": "thrombosis_prediction", "final": {"question": "How many female patients were given an APS diagnosis?", "sql": "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'", "source_tables": ["patient"]}, "evidence": "female refers to SEX = 'F'; APS diagnosis refers to Diagnosis='APS'"}
{"sample_id": 10571, "db_id": "thrombosis_prediction", "final": {"question": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?", "sql": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'M'", "source_tables": ["patient"]}, "evidence": "male refers to SEX = 'M'; in-patient refers to Admission = '+'; outpatient refers to Admission = '-'; percentage = DIVIDE(COUNT(ID) where SEX = 'M' and Admission = '+', COUNT(ID) where SEX\u00a0 = 'M' and Admission = '-')"}
{"sample_id": 10574, "db_id": "thrombosis_prediction", "final": {"question": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?", "sql": "SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'", "source_tables": ["patient"]}, "evidence": "'SLE' diagnosed patient means Diagnosis = 'SLE'; inpatient refers to Admission = '+'; outpatient refers to Admission = '-'; calculation =  DIVIDE(COUNT(ID) where Diagnosis = 'SLE' and Admission = '+', COUNT(ID) where Diagnosis = 'SLE' and Admission = '-')"}
{"sample_id": 10690, "db_id": "thrombosis_prediction", "final": {"question": "For the patients with an abnormal anti-SM, please list the IDs of the three youngest ones.", "sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM NOT IN ('negative','0') ORDER BY T1.Birthday DESC LIMIT 3", "source_tables": ["laboratory", "patient"]}, "evidence": "abnormal anti-SM refers to SM NOT IN ('negative', '0'); youngest refers to MAX(Birthday);"}
{"sample_id": 10635, "db_id": "thrombosis_prediction", "final": {"question": "Name the ID of the patient who is born on the April 1st, 1982. Is his/her alkaliphophatase (ALP) within normal range?", "sql": "SELECT T1.ID , CASE WHEN T2.ALP < 300 THEN 'normal' ELSE 'abNormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01'", "source_tables": ["laboratory", "patient"]}, "evidence": "alkaliphophatase (ALP) within normal range refers to ALP < 300"}
{"sample_id": 10596, "db_id": "thrombosis_prediction", "final": {"question": "What is the average age of patients as of year 1999 examined in the laboratory for the October of the year 1991?", "sql": "SELECT AVG('1999'  - STRFTIME('%Y', T2.Birthday)) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date BETWEEN '1991-10-01' AND '1991-10-30'", "source_tables": ["laboratory", "patient"]}, "evidence": "average age of patients as of year 1999 refers to AVG(SUBTRACT('1999', year(Birthday))); October of 1991 refers to Date BETWEEN '1991-10-01' AND '1991-10-30'"}
{"sample_id": 10661, "db_id": "thrombosis_prediction", "final": {"question": "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.", "sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN ( SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2 )", "source_tables": ["laboratory", "patient"]}, "evidence": "age = SUBTRACT(year(current_timestamp), year(Birthday)); patient with two or more laboratory examinations refers to COUNT(ID) > 2; hematoclit level exceeded the normal range refers to HCT > = 52;"}
{"sample_id": 10725, "db_id": "thrombosis_prediction", "final": {"question": "When is the birthday of the oldest patient whose blood glucose is abnormal?", "sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU > 180 ORDER BY T1.Birthday ASC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "oldest patient refers to MIN(Birthday); blood glucose is abnormal refers to GLU > 180;"}
{"sample_id": 10733, "db_id": "thrombosis_prediction", "final": {"question": "How many patients with severe thrombosis have a normal prothrombin time?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.PT < 14 AND T3.Thrombosis < 3 AND T3.Thrombosis > 0", "source_tables": ["laboratory", "examination", "patient"]}, "evidence": "severe thrombosis refers to Thrombosis = 2 or 1; normal prothrombin time refers to PT < 14;"}
{"sample_id": 10684, "db_id": "thrombosis_prediction", "final": {"question": "How many patients with a normal level of complement 3 have a P pattern observed in the sheet of ANA examination?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C3 > 35 AND T1.\"ANA Pattern\" = 'P'", "source_tables": ["laboratory", "examination"]}, "evidence": "normal level of complement 3 refers to C3 > 35; have a P pattern observed in the sheet of ANA examination refers to ANA Pattern = 'P'; Should compute the number of distinct ones"}
{"sample_id": 10670, "db_id": "thrombosis_prediction", "final": {"question": "How many patients born after 1980/1/1 have an abnormal fibrinogen level?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T1.Birthday > '1980-01-01'", "source_tables": ["laboratory", "patient"]}, "evidence": "born after 1980/1/1 refers to Birthday > '1980-01-01'; normal fibrinogen level refers to FG between 150 and 450; Should return the number of distinct patients."}
{"sample_id": 10634, "db_id": "thrombosis_prediction", "final": {"question": "For patients with alkaliphophatase (ALP) within normal range, were they treated as inpatient or outpatient?", "sql": "SELECT T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300", "source_tables": ["laboratory", "patient"]}, "evidence": "alkaliphophatase (ALP) within normal range refers to ALP < 300; inpatient refers to admission = '+'; outpatient refers to admission = '-'"}
{"sample_id": 10594, "db_id": "thrombosis_prediction", "final": {"question": "How many male patients have elevated total bilirubin count?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.\"T-BIL\" >= 2.0 AND T1.SEX = 'M'", "source_tables": ["laboratory", "patient"]}, "evidence": "male refers to SEX = 'M'; elevated means above the normal range; total bilirubin above the normal range refers to `T-BIL` >= '2.0'"}
{"sample_id": 10821, "db_id": "student_club", "final": {"question": "Did Maya Mclean attend the 'Women's Soccer' event?", "sql": "SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'", "source_tables": ["event", "member", "attendance"]}, "evidence": "Maya Mclean is the full name; full name refers to first_name, last_name; 'Women's Soccer' is an event_name"}
{"sample_id": 10836, "db_id": "student_club", "final": {"question": "State the name of major that Phillip Cullen has joined.", "sql": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Phillip' AND T2.last_name = 'Cullen'", "source_tables": ["major", "member"]}, "evidence": "name of major refers to major_name"}
{"sample_id": 10875, "db_id": "student_club", "final": {"question": "List the name of events with less than average parking cost.", "sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)", "source_tables": ["event", "expense", "budget"]}, "evidence": "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'"}
{"sample_id": 10790, "db_id": "student_club", "final": {"question": "What does the person with the phone number \"809-555-3360\" major in?", "sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'", "source_tables": ["major", "member"]}, "evidence": "major in refers to major_name"}
{"sample_id": 10859, "db_id": "student_club", "final": {"question": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event.", "sql": "SELECT DISTINCT T1.link_to_member, T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'", "source_tables": ["expense", "member", "attendance"]}, "evidence": "approved from 1/10/2019 to 11/19/2019 refers to approved = 'true' and expense_date BETWEEN '2019-01-10' and '2019-11-19'"}
{"sample_id": 10805, "db_id": "student_club", "final": {"question": "State the name of students from Georgetown, South Carolina.", "sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'", "source_tables": ["member", "zip_code"]}, "evidence": "name of students means the full name; full name refers to first_name, last_name; Georgetown is a city; South Carolina is a state"}
{"sample_id": 10841, "db_id": "student_club", "final": {"question": "What is the category of event which was taken place in 2020-03-24T12:00:00?", "sql": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_date = '2020-03-24T12:00:00'", "source_tables": ["event", "budget"]}, "evidence": "taken place in 2020-03-24T12:00:00 refers to event_date = '2020-03-24T12:00:00'"}
{"sample_id": 10839, "db_id": "student_club", "final": {"question": "List out the type of events which have remaining budget more than 30 USD.", "sql": "SELECT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 30", "source_tables": ["event", "budget"]}, "evidence": "remaining budget more than 30 USD refers to remaining > 30"}
{"sample_id": 10735, "db_id": "student_club", "final": {"question": "How many students in the Student_Club are from the College of Engineering?", "sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'", "source_tables": ["major", "member"]}, "evidence": ""}
{"sample_id": 10856, "db_id": "student_club", "final": {"question": "What are the zip codes that have post office boxes in the country of the country of San Juan Municipio whose state is Puerto Rico?", "sql": "SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico'", "source_tables": ["zip_code"]}, "evidence": "zip codes that have post office boxes refers to type = 'PO Box'"}
{"sample_id": 10818, "db_id": "student_club", "final": {"question": "Provide the number of events attended by Luisa Guidi. What is her major?", "sql": "SELECT COUNT(T3.link_to_event), T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi'", "source_tables": ["major", "member", "attendance"]}, "evidence": "major refers to major_name;"}
{"sample_id": 10799, "db_id": "student_club", "final": {"question": "How many student have the position of president?", "sql": "SELECT COUNT(member_id) FROM member WHERE position = 'President'", "source_tables": ["member"]}, "evidence": "'President' is a position of Student Club"}
{"sample_id": 10833, "db_id": "student_club", "final": {"question": "State what kind of expenses that Sacha Harrison incurred?", "sql": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'", "source_tables": ["expense", "member"]}, "evidence": "kind of expenses refers to expense_description; Sacha Harrison is the full name; full name refers to first_name, last_name;"}
{"sample_id": 10796, "db_id": "student_club", "final": {"question": "How many events did the member with the phone number \"954-555-6240\" attend?", "sql": "SELECT COUNT(T2.link_to_event) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T1.phone = '954-555-6240'", "source_tables": ["member", "attendance"]}, "evidence": ""}
{"sample_id": 10791, "db_id": "student_club", "final": {"question": "Which event has the highest budget amount?", "sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id ORDER BY T1.amount DESC LIMIT 1", "source_tables": ["event", "budget"]}, "evidence": "event refers to event_name; highest budget amount refers to MAX(amount)"}
{"sample_id": 10852, "db_id": "student_club", "final": {"question": "What is the last name and position of the student that bought pizza on 09/10/2019?", "sql": "SELECT T1.last_name, T1.position FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_date = '2019-09-10' AND T2.expense_description = 'Pizza'", "source_tables": ["expense", "member"]}, "evidence": "bought pizza on 09/10/2019 refers to expense_description = 'Pizza' where expense_date = '2019-09-10'"}
{"sample_id": 10814, "db_id": "student_club", "final": {"question": "Indicate the top source of funds received in September 2019 based on their amount.", "sql": "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' and '2019-09-30' ORDER BY source DESC LIMIT 1", "source_tables": ["income"]}, "evidence": "top source funds refers to MAX(source); September 2019 means date_received BETWEEN '2019-09-01' and '2019-09-30'"}
{"sample_id": 10855, "db_id": "student_club", "final": {"question": "Which countries have zip codes with post office boxes?", "sql": "SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box' AND county IS NOT NULL", "source_tables": ["zip_code"]}, "evidence": "zip codes that have post office boxes refers to type = 'PO Box'"}
{"sample_id": 10854, "db_id": "student_club", "final": {"question": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?", "sql": "SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.income_id) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member' AND T1.t_shirt_size = 'Medium'", "source_tables": ["income", "member"]}, "evidence": "t_shirt_size = 'Medium' where position = 'Member'; percentage = DIVIDE(COUNT(amount = 50), COUNT(member_id)) * 100"}
{"sample_id": 10879, "db_id": "student_club", "final": {"question": "Give the full name and contact number of members who had to spend more than average on each expense.", "sql": "SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > ( SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member )", "source_tables": ["expense", "member", "budget"]}, "evidence": "full name refers to first_name, last_name; contact number refers to phone; had spent more than average on each expense refers to cost > AVG(cost)"}
{"sample_id": 10813, "db_id": "student_club", "final": {"question": "What is the ratio between students majored in finance and physics?", "sql": "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major", "source_tables": ["major"]}, "evidence": "DIVDE(SUM(major_name = 'Finance'), SUM(major_name = 'Physics'))"}
{"sample_id": 10865, "db_id": "student_club", "final": {"question": "Give the event ID, location, and status of events conducted from November 2019 to March 2020.", "sql": "SELECT event_id, location, status FROM event WHERE date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-11-01' AND '2020-03-31'", "source_tables": ["event"]}, "evidence": "event_date BETWEEN '2019-11-01' and '2020-03-31'"}
{"sample_id": 10768, "db_id": "student_club", "final": {"question": "Tell the phone number of \"Carlo Jacobs\".", "sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'", "source_tables": ["member"]}, "evidence": "Carlo Jacobs is the full name; full name refers to first_name, last_name;"}
{"sample_id": 10846, "db_id": "student_club", "final": {"question": "Among the members, how many of them have an extra large t-shirt size?", "sql": "SELECT COUNT(member_id) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'", "source_tables": ["member"]}, "evidence": "among the members refers to position = 'Member'; extra large t-shirt size refers to t_shirt_size = 'X-Large'"}
{"sample_id": 10779, "db_id": "student_club", "final": {"question": "State the date Connor Hilton paid his/her dues.", "sql": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'", "source_tables": ["income", "member"]}, "evidence": "Connor Hilton is the full name; full name refers to first_name, last_name; date the dues was paid refers to date_received where source = 'Dues';"}
{"sample_id": 10770, "db_id": "student_club", "final": {"question": "For all the budgets for \"November Meeting\", how many of them had exceeded the budget?", "sql": "SELECT COUNT(T2.event_id) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0", "source_tables": ["event", "budget"]}, "evidence": "'November Meeting' is an event name; remaining < 0 means the cost had exceeded the budget"}
{"sample_id": 10760, "db_id": "student_club", "final": {"question": "Was each expense in October Meeting on October 8, 2019 approved?", "sql": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'", "source_tables": ["event", "expense", "budget"]}, "evidence": "event_name = 'October Meeting' where event_date = '2019-10-08'; approved = True means expenses was approved; approved = False means expenses was not approved"}
{"sample_id": 10848, "db_id": "student_club", "final": {"question": "List the last name of members with a major in environmental engineering and include its department and college name.", "sql": "SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'", "source_tables": ["major", "member"]}, "evidence": "'Environmental Engineering' is the major_name;"}
{"sample_id": 10845, "db_id": "student_club", "final": {"question": "How many income are received with an amount of 50?", "sql": "SELECT COUNT(income_id) FROM income WHERE amount = 50", "source_tables": ["income"]}, "evidence": "amount of 50 refers to amount = 50"}
{"sample_id": 10776, "db_id": "student_club", "final": {"question": "State the major name for the Vice President of the club.", "sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'", "source_tables": ["major", "member"]}, "evidence": "'Vice President' is a position of Student Club"}
{"sample_id": 10850, "db_id": "student_club", "final": {"question": "List the city and state of members enrolled under electrical and computer engineering department.", "sql": "SELECT city, state FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN zip_code AS T3 ON T3.zip_code = T1.zip WHERE department = 'Electrical and Computer Engineering Department' AND position = 'Member'", "source_tables": ["major", "member", "zip_code"]}, "evidence": "'Electrical and Computer Engineering Department' is the department; members enrolled refers to position = 'Member'"}
{"sample_id": 10883, "db_id": "student_club", "final": {"question": "List the last names of students under the Elementary Education major and include their phone numbers.", "sql": "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Elementary Education'", "source_tables": ["major", "member"]}, "evidence": "'Elementary Education' is the major name; phone numbers refers to phone"}
{"sample_id": 10838, "db_id": "student_club", "final": {"question": "How many members of Business have the Medium size of tee shirt?", "sql": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business' AND T2.t_shirt_size = 'Medium'", "source_tables": ["major", "member"]}, "evidence": "members of Economics refers to major_name = 'Business'; t_shirt_size = 'Medium'"}
{"sample_id": 10907, "db_id": "debit_card_specializing", "final": {"question": "How much more was customer 7 consuming in April 2013 than customer 5?", "sql": "SELECT SUM(IIF(CustomerID = 7, Consumption, 0)) - SUM(IIF(CustomerID = 5, Consumption, 0)) FROM yearmonth WHERE Date = '201304'", "source_tables": ["yearmonth"]}, "evidence": "April 2013 refers to 201304 in the yearmonth.date"}
{"sample_id": 10935, "db_id": "debit_card_specializing", "final": {"question": "Which country's gas station had the first paid cusomer in 2012/8/25?", "sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' ORDER BY T1.Time DESC LIMIT 1", "source_tables": ["transactions_1k", "gasstations"]}, "evidence": "'2012/8/25' can be represented by '2012-08-25'"}
{"sample_id": 10946, "db_id": "debit_card_specializing", "final": {"question": "What's the nationality of the customer who spent 548.4 in 2012/8/24?", "sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4", "source_tables": ["transactions_1k", "gasstations"]}, "evidence": "'2012/8/24' can be represented by '2012-08-24'"}
{"sample_id": 10948, "db_id": "debit_card_specializing", "final": {"question": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?", "sql": "SELECT CAST(SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTR(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price = 634.8 )", "source_tables": ["yearmonth", "transactions_1k", "gasstations"]}, "evidence": "'2012/8/24' can be represented by '2012-08-24'; Consumption decrease rate = (consumption_2012 - consumption_2013) / consumption_2012"}
{"sample_id": 10905, "db_id": "debit_card_specializing", "final": {"question": "How much did customer 6 consume in total between August and November 2013?", "sql": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'", "source_tables": ["yearmonth"]}, "evidence": "Between August And November 2013 refers to Between 201308 And 201311; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month."}
{"sample_id": 10913, "db_id": "debit_card_specializing", "final": {"question": "Which country has more \"value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country.", "sql": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1", "source_tables": ["gasstations"]}, "evidence": ""}
{"sample_id": 10940, "db_id": "debit_card_specializing", "final": {"question": "For the deal happened at 2012/8/24 12:42:00, which country was it?", "sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'", "source_tables": ["transactions_1k", "gasstations"]}, "evidence": "'2012/8/24 12:42:00' can refer to date = '2012-08-24' AND T1.time = '12:42:00' in the database"}
{"sample_id": 10937, "db_id": "debit_card_specializing", "final": {"question": "What segment did the customer have at 2012/8/23 21:20:00?", "sql": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'", "source_tables": ["customers", "transactions_1k"]}, "evidence": "'2012/8/23' can be represented by '2012-08-23'"}
{"sample_id": 10910, "db_id": "debit_card_specializing", "final": {"question": "Who among KAM's customers consumed the most? How much did it consume?", "sql": "SELECT T2.CustomerID, SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T2.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": ""}
{"sample_id": 10945, "db_id": "debit_card_specializing", "final": {"question": "Which country was the card owner of No.667467 in?", "sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = '667467'", "source_tables": ["transactions_1k", "gasstations"]}, "evidence": ""}
{"sample_id": 10952, "db_id": "debit_card_specializing", "final": {"question": "Which are the top five best selling products? Please state the full name of them.", "sql": "SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Amount DESC LIMIT 5", "source_tables": ["transactions_1k", "products"]}, "evidence": "Description of products contains full name"}
{"sample_id": 10943, "db_id": "debit_card_specializing", "final": {"question": "For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?", "sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'", "source_tables": ["transactions_1k", "gasstations"]}, "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'; '2012/8/26' can be represented by '2012-08-26'; during 8:00-9:00 can be represented as Time BETWEEN '08:00:00' AND '09:00:00'"}
{"sample_id": 10892, "db_id": "debit_card_specializing", "final": {"question": "How many gas stations in CZE has Premium gas?", "sql": "SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'", "source_tables": ["gasstations"]}, "evidence": ""}
{"sample_id": 10894, "db_id": "debit_card_specializing", "final": {"question": "In 2012, who had the least consumption in LAM?", "sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year."}
