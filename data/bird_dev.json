{"sample_id": 100, "db_id": "movie_platform", "final": {"question": "Please list the names of the films released in 2003 among the films scored by user 2941 .", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year = 2003 AND T1.user_id = 2941", "source_tables": ["ratings", "movies"]}, "evidence": "released in 2003 refers to movie_release_year = 2003; user 2941 refers to user_id = 2941; film refers to movie;"}
{"sample_id": 101, "db_id": "movie_platform", "final": {"question": "How many users were not trialists when they rated the movie \"Patti Smith: Dream of Life\"?", "sql": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Patti Smith: Dream of Life' AND T1.user_trialist = 0", "source_tables": ["ratings", "movies"]}, "evidence": "Patti Smith: Dream of Life' is movie_title; the user was not a trialist when he created the list refers to user_trialist = 0;"}
{"sample_id": 102, "db_id": "movie_platform", "final": {"question": "Which movie has the highest average score in Mubi?", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id GROUP BY T2.movie_title ORDER BY SUM(T1.rating_score) / COUNT(T1.rating_id) DESC LIMIT 1", "source_tables": ["ratings", "movies"]}, "evidence": "Highest average score refers to Max(Avg(rating_score));"}
{"sample_id": 103, "db_id": "movie_platform", "final": {"question": "Please list the names of the top three movies in the number comments related to the critic made by the user rating the movie.", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.critic_comments DESC LIMIT 3", "source_tables": ["ratings", "movies"]}, "evidence": "number of comments related to the critic made by the user rating the movie refers to critic_comments; top movie refers to Max(critic_comments);"}
{"sample_id": 104, "db_id": "movie_platform", "final": {"question": "What was the title of the first list created by a user 85981819? And please provide the user_avatar_image_url.", "sql": "SELECT T2.list_title, T1.user_avatar_image_url FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T1.user_id = 85981819 ORDER BY T2.list_creation_timestamp_utc LIMIT 1", "source_tables": ["lists", "lists_users"]}, "evidence": "user 85981819 refers to user_id = 85981819;\u00a0 first list created refers to Min (list_creation_date_utc);"}
{"sample_id": 105, "db_id": "movie_platform", "final": {"question": "Please list the names of the movies that have been rated the most times in 2020.", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_timestamp_utc LIKE '2020%' GROUP BY T2.movie_title ORDER BY COUNT(T2.movie_title) DESC LIMIT 1", "source_tables": ["ratings", "movies"]}, "evidence": "in 2020 refers to rating_timestamp_utc = '2020%'; rated the most times refers to Max(Count(movie_title));"}
{"sample_id": 106, "db_id": "movie_platform", "final": {"question": "What is the average score for the movie Versailles Rive-Gauche?", "sql": "SELECT AVG(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title LIKE 'Versailles Rive-Gauche'", "source_tables": ["ratings", "movies"]}, "evidence": "Versailles Rive-Gauche' is movie_title; average score refers to Avg(rating_score);"}
{"sample_id": 107, "db_id": "movie_platform", "final": {"question": "Which film rated by user 59988436 that received 21 comments?", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 59988436 AND T1.critic_comments = 21", "source_tables": ["ratings", "movies"]}, "evidence": "user 59988436 refers to user_id = 59988436; received 21 comments refers to critic_comments = 21; film refers to movie;"}
{"sample_id": 108, "db_id": "movie_platform", "final": {"question": "Please list the names of the movies that received more than 20 likes?", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.critic_likes > 20", "source_tables": ["ratings", "movies"]}, "evidence": "received more than 20 likes refers to critic_likes>20;"}
{"sample_id": 109, "db_id": "movie_platform", "final": {"question": "What is the average score of the movie \"The Fall of Berlin\" in 2019?", "sql": "SELECT SUM(T1.rating_score) / COUNT(T1.rating_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_timestamp_utc LIKE '2019%' AND T2.movie_title LIKE 'The Fall of Berlin'", "source_tables": ["ratings", "movies"]}, "evidence": "The Fall of Berlin' is movie_title; in 2019 refers to rating_timestamp_utc = 2019; Average score refers to Avg(rating_score);"}
{"sample_id": 110, "db_id": "movie_platform", "final": {"question": "What percentage of users rated the movie \"Patti Smith: Dream of Life\" by more than 3?", "sql": "SELECT CAST(SUM(CASE WHEN T1.rating_score > 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title LIKE 'Patti Smith: Dream of Life'", "source_tables": ["ratings", "movies"]}, "evidence": "Patti Smith: Dream of Life' is movie_title; more than 3 refers to rating_score >3; percentage = Divide(Count(rating_score where rating_score >3), Count(rating_score))*100"}
{"sample_id": 111, "db_id": "movie_platform", "final": {"question": "Which of the film directed by director Abbas Kiarostami has the highest average score?", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.director_name = 'Abbas Kiarostami' GROUP BY T2.movie_title ORDER BY SUM(T1.rating_score) / COUNT(T1.rating_id) DESC LIMIT 1", "source_tables": ["ratings", "movies"]}, "evidence": "Abbas Kiarostami' is director_name; the highest Average score refers to Max(Avg(rating_score));"}
{"sample_id": 112, "db_id": "movie_platform", "final": {"question": "Which year had the most released films?", "sql": "SELECT movie_release_year FROM movies GROUP BY movie_release_year ORDER BY COUNT(movie_id) DESC LIMIT 1", "source_tables": ["movies"]}, "evidence": "year refers to movie_release_year; most release films refers to MAX(COUNT(movie_id))\n\n"}
{"sample_id": 113, "db_id": "movie_platform", "final": {"question": "Who is the director that made the most movies? Give the director's id.", "sql": "SELECT director_id FROM movies GROUP BY director_id ORDER BY COUNT(movie_id) DESC LIMIT 1", "source_tables": ["movies"]}, "evidence": "director that made the most movies refers to MAX(COUNT(movie_id))"}
{"sample_id": 114, "db_id": "movie_platform", "final": {"question": "How many movies did the director of the highest movie popularity make?", "sql": "SELECT COUNT(movie_id) FROM movies WHERE director_id = ( SELECT director_id FROM movies ORDER BY movie_popularity DESC LIMIT 1 )", "source_tables": ["movies"]}, "evidence": "highest movie popularity refers to MAX(movie_popularity)"}
{"sample_id": 115, "db_id": "movie_platform", "final": {"question": "What's the number of the paying subscribers when rating a movie after the year 2014?", "sql": "SELECT COUNT(user_subscriber) FROM ratings_users WHERE user_has_payment_method = 1 AND rating_date_utc > '2014%'", "source_tables": ["ratings_users"]}, "evidence": "paying subscribers refers to user_has_payment_method = 1; rating a movie after the year 2014 refers to rating_date_utc>'2014%'"}
{"sample_id": 116, "db_id": "movie_platform", "final": {"question": "Who was the earliest user created a list but didn't get any followers? Give the user ID.", "sql": "SELECT user_id FROM lists_users WHERE user_subscriber = 0 ORDER BY list_creation_date_utc LIMIT 1", "source_tables": ["lists_users"]}, "evidence": "earliest user created a list refers to MIN(list_creation_date_utc); didn't get any followers refers to user_subscriber = 0"}
{"sample_id": 117, "db_id": "movie_platform", "final": {"question": "Give the number of followers for the user who posted the most lists.", "sql": "SELECT SUM(T1.list_followers) FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id GROUP BY T1.user_id ORDER BY COUNT(T1.list_id) DESC LIMIT 1", "source_tables": ["lists", "lists_users"]}, "evidence": "number of followers refers to user_subscriber; posted the most lists refers to MAX(COUNT(list_id))"}
{"sample_id": 118, "db_id": "movie_platform", "final": {"question": "How many followers did the user who posted the list \"Non-American Films about World War II\" have?", "sql": "SELECT SUM(T2.list_followers) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_title LIKE 'Non-American Films about World War II'", "source_tables": ["lists", "lists_users"]}, "evidence": "the list \"Non-American Films about World War II\" refers to list_title = 'Non-American Films about World War II'"}
{"sample_id": 119, "db_id": "movie_platform", "final": {"question": "What's the number of users gave the movie \"Downfall\" a rating of \"4\"?", "sql": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Downfall' AND T1.rating_score = 4", "source_tables": ["ratings", "movies"]}, "evidence": "movie \"Downfall\" refers to movie_title = 'Downfall'; rating of \"4\" refers to rating_score = 4"}
{"sample_id": 120, "db_id": "movie_platform", "final": {"question": "Give the name of the movie that got the most \"5\" ratings.", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5", "source_tables": ["ratings", "movies"]}, "evidence": "5 ratings refers to rating_score = 5; name of the movie refers to movie_title"}
{"sample_id": 121, "db_id": "movie_platform", "final": {"question": "Which movie got the most critic comments? Give the name of the movie.", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id GROUP BY T2.movie_title ORDER BY COUNT(T1.critic_comments) DESC LIMIT 1", "source_tables": ["ratings", "movies"]}, "evidence": "name of the movie refers to movie_title; most critic comments refers to MAX(critic_comments)"}
{"sample_id": 122, "db_id": "movie_platform", "final": {"question": "Show the avatar of the user who gave the rating at 2019/10/17 1:36:36.", "sql": "SELECT T2.user_avatar_image_url FROM ratings AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id WHERE T1.rating_timestamp_utc LIKE '2019-10-17 01:36:36'", "source_tables": ["ratings", "lists_users"]}, "evidence": "at 2019/10/17 1:36:36 refers to rating_timestamp_utc = '2019/10/17 1:36:36'; avatar of the user refers to user_avatar_image_url\n\n"}
{"sample_id": 123, "db_id": "movie_platform", "final": {"question": "Show the portrait picture of the user who created the list \"Vladimir Vladimirovich Nabokov\".", "sql": "SELECT T1.user_avatar_image_url FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_title LIKE 'Vladimir Vladimirovich Nabokov'", "source_tables": ["lists", "lists_users"]}, "evidence": "the list \"Vladimir Vladimirovich Nabokov\" refers to list_title = 'Vladimir Vladimirovich Nabokov'; portrait picture refers to user_avatar_image_url"}
{"sample_id": 124, "db_id": "movie_platform", "final": {"question": "For the user who post the list that contained the most number of the movies, is he/she a paying subscriber when creating that list?", "sql": "SELECT T1.user_has_payment_method FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_movie_number = ( SELECT MAX(list_movie_number) FROM lists )", "source_tables": ["lists", "lists_users"]}, "evidence": "the list that contained the most number of the movies refers to MAX(list_movie_number); user_has_payment_method = 1 means the user was a paying subscriber when he created the list ; \nuser_has_payment_method = 0 means the user was not a paying subscriber when he created the list \n\n"}
{"sample_id": 125, "db_id": "movie_platform", "final": {"question": "Show the head portrait of the user who gave the most \"5\" ratings.", "sql": "SELECT T2.user_avatar_image_url FROM ratings AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id WHERE T1.rating_score = 5", "source_tables": ["ratings", "lists_users"]}, "evidence": "head portrait refers to user_avatar_image_url; \"5\" ratings refers to rating_score = 5"}
{"sample_id": 126, "db_id": "movie_platform", "final": {"question": "How many critics were given to the movie that got the most movie popularity number.", "sql": "SELECT COUNT(T1.critic) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_popularity = ( SELECT MAX(movie_popularity) FROM movies )", "source_tables": ["ratings", "movies"]}, "evidence": "most movie popularity number refers to MAX(movie_popularity)"}
{"sample_id": 127, "db_id": "movie_platform", "final": {"question": "Who gave a \"4\" rating to the movie \"Freaks\" at 2013/5/4 6:33:32? Give his/her user id.", "sql": "SELECT T1.user_id FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE rating_score = 4 AND rating_timestamp_utc LIKE '2013-05-04 06:33:32' AND T2.movie_title LIKE 'Freaks'", "source_tables": ["ratings", "movies"]}, "evidence": "4 rating refers to rating_score = 4; the movie \"Freaks\" refers to movie_title = 'Freaks' ; at 2013/5/4 6:33:32 refers to rating_timestamp_utc = '2013-05-04 06:33:32'"}
{"sample_id": 128, "db_id": "movie_platform", "final": {"question": "Give the url of movie which was rated 5 on 2013/5/3 5:11:17.", "sql": "SELECT T2.movie_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE rating_score = 5 AND rating_timestamp_utc LIKE '2013-05-03 05:11:17'", "source_tables": ["ratings", "movies"]}, "evidence": "rated 5 refers to rating_score = 5; on 2013/5/3 5:11:17 refers to rating_timestamp_utc = '2013-05-03 05:11:17'"}
{"sample_id": 129, "db_id": "movie_platform", "final": {"question": "For the 1998 movie which got the highest popularity, how many \"4\" rating did the movie get?", "sql": "SELECT COUNT(T2.movie_title) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 4 AND T2.movie_release_year = 1998 ORDER BY T2.movie_popularity DESC LIMIT 1", "source_tables": ["ratings", "movies"]}, "evidence": "1998 movie refers to movie_release_year = '1998'; the highest popularity refers to MAX(movie_popularity) ; \"4\" rating refers to rating_score = 4"}
{"sample_id": 130, "db_id": "movie_platform", "final": {"question": "From all the movies that got more than 13000 popularity number, which one had the least ratings.", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_popularity > 13000 ORDER BY T1.rating_score LIMIT 1", "source_tables": ["ratings", "movies"]}, "evidence": "more than 13000 popularity number refers to movie_popularity > 13000; least ratings refers to MIN(rating_score)"}
{"sample_id": 131, "db_id": "movie_platform", "final": {"question": "How many paying subscribers gave a rating to the movie \"One Flew Over the Cuckoo's Nest\"?", "sql": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN ratings_users AS T3 ON T1.user_id = T3.user_id WHERE T2.movie_title = 'One Flew Over the Cuckoo''s Nest' AND T3.user_has_payment_method = 1", "source_tables": ["ratings_users", "ratings", "movies"]}, "evidence": "paying subscribers refer to user_has_payment_method = 1; movie \"One Flew Over the Cuckoo's Nest\" refers to movie_id = 'One Flew Over the Cuckoo''s Nest'"}
{"sample_id": 132, "db_id": "movie_platform", "final": {"question": "For the lists that got more than 3000 followers, how many did the users who created those lists are paying subscribers?", "sql": "SELECT COUNT(T1.user_id) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_followers > 3000 AND T1.user_has_payment_method = 1", "source_tables": ["lists", "lists_users"]}, "evidence": "got more than 3000 followers refers to list_followers > 3000; paying subscribers refer to user_has_payment_method = 1"}
{"sample_id": 210, "db_id": "book_publishing_company", "final": {"question": "How many books on business have the bookstores in Massachusetts ordered?", "sql": "SELECT SUM(T1.qty) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id INNER JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T2.state = 'Massachusetts' AND T3.type = 'business'", "source_tables": ["titles", "sales", "stores"]}, "evidence": "Massachusetts is a state; business books refers to type = 'business'"}
{"sample_id": 211, "db_id": "book_publishing_company", "final": {"question": "What is the average quantity of each order for the book \"Life Without Fear\"?", "sql": "SELECT CAST(SUM(T2.qty) AS REAL) / COUNT(T1.title_id) FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE T1.title = 'Life Without Fear'", "source_tables": ["sales", "titles"]}, "evidence": "qty is abbreviation for quantity; average quantity order = AVG(qty)"}
{"sample_id": 212, "db_id": "book_publishing_company", "final": {"question": "What is the average level employees working as Managing Editor are at? How many levels are there between the average level and the highest level?", "sql": "SELECT AVG(T2.job_lvl), T1.max_lvl - AVG(T2.job_lvl) FROM jobs AS T1 INNER JOIN employee AS T2 ON T1.job_id = T2.job_id WHERE T1.job_desc = 'Managing Editor' GROUP BY T2.job_id, T1.max_lvl", "source_tables": ["jobs", "employee"]}, "evidence": "Managing Editor is a job description which refers to job_desc; job level refers to job_lvl; highest level job refers to max_lvl; levels between the average level and the highest level = SUBTRACT(max_lvl; AVG(job_lvl))"}
{"sample_id": 213, "db_id": "book_publishing_company", "final": {"question": "Which one is the cheapest business book?", "sql": "SELECT title FROM titles WHERE type = 'business' ORDER BY price LIMIT 1", "source_tables": ["titles"]}, "evidence": "business books refers to type = 'business'; cheapest book refers to MIN(price)"}
{"sample_id": 214, "db_id": "book_publishing_company", "final": {"question": "Which type of book had the most pre-paid amount?", "sql": "SELECT type FROM titles ORDER BY advance DESC LIMIT 1", "source_tables": ["titles"]}, "evidence": "most pre-paid amount refers to MAX(advance)"}
{"sample_id": 215, "db_id": "book_publishing_company", "final": {"question": "What's the royalty for the bestseller book?", "sql": "SELECT royalty FROM titles ORDER BY ytd_sales DESC LIMIT 1", "source_tables": ["titles"]}, "evidence": "qty is abbreviation for quantity; bestseller means with the most sales quantity; MAX(qty)"}
{"sample_id": 216, "db_id": "book_publishing_company", "final": {"question": "Which job level is O'Rourke at?", "sql": "SELECT job_lvl FROM employee WHERE lname = 'O''Rourke'", "source_tables": ["employee"]}, "evidence": "job level refers to job_lvl"}
{"sample_id": 217, "db_id": "book_publishing_company", "final": {"question": "Show me the employ id of the highest employee who doesn't have a middle name.", "sql": "SELECT emp_id FROM employee WHERE minit = '' ORDER BY job_lvl DESC LIMIT 1", "source_tables": ["employee"]}, "evidence": "highest employee refers to employee with the highest job level; MAX(job_lvl)"}
{"sample_id": 218, "db_id": "book_publishing_company", "final": {"question": "Is the author of \"Sushi, Anyone?\" on the contract?", "sql": "SELECT T1.contract FROM authors AS T1 INNER JOIN titleauthor AS T2 ON T1.au_id = T2.au_id INNER JOIN titles AS T3 ON T2.title_id = T3.title_id WHERE T3.title = 'Sushi, Anyone?'", "source_tables": ["titleauthor", "titles", "authors"]}, "evidence": "contract = 1 means on contract; contract = 0 means not on contract"}
{"sample_id": 219, "db_id": "book_publishing_company", "final": {"question": "Which publisher had the highest job level? Give his/her full name.", "sql": "SELECT T1.fname, T1.minit, T1.lname FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id ORDER BY T1.job_lvl DESC LIMIT 1", "source_tables": ["employee", "jobs"]}, "evidence": "highest job level refers to MAX(job_lvl)"}
{"sample_id": 220, "db_id": "book_publishing_company", "final": {"question": "What's Pedro S Afonso's job title?", "sql": "SELECT T2.job_desc FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.fname = 'Pedro' AND T1.minit = 'S' AND T1.lname = 'Afonso'", "source_tables": ["employee", "jobs"]}, "evidence": "job title means job description which refers to job_desc"}
{"sample_id": 221, "db_id": "book_publishing_company", "final": {"question": "How many levels are there left for Diego W Roel to reach if he/she could go to the max level for his/her position?", "sql": "SELECT T2.max_lvl - T1.job_lvl FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.fname = 'Diego' AND T1.minit = 'W' AND T1.lname = 'Roel'", "source_tables": ["employee", "jobs"]}, "evidence": "max level for his position refers to max_lvl; job level refers to job_lvl; level left to reach the max = SUBTRACT(max_lvl, job_lvl)"}
{"sample_id": 222, "db_id": "book_publishing_company", "final": {"question": "What's on the notes for the order happened on 1994/9/14?", "sql": "SELECT T1.notes FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE STRFTIME('%Y-%m-%d', T2.ord_date) = '1994-09-14'", "source_tables": ["sales", "titles"]}, "evidence": "order happened on refers to ord_date"}
{"sample_id": 223, "db_id": "book_publishing_company", "final": {"question": "List the type of the book for the order which was sold on 1993/5/29.", "sql": "SELECT DISTINCT T1.type FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE STRFTIME('%Y-%m-%d', T2.ord_date) = '1993-05-29'", "source_tables": ["sales", "titles"]}, "evidence": "sold on refers to ord_date"}
{"sample_id": 340, "db_id": "retail_complains", "final": {"question": "Compute the average time in minute for each age group", "sql": "SELECT CAST(SUM(CASE WHEN T1.age > 13 AND T1.age <= 19 THEN 60 * strftime('%H', ser_time) + strftime('%M', ser_time) + strftime('%S', ser_time) / 60 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age > 13 AND T1.age <= 19 THEN 1 ELSE 0 END) AS teenagerAverageMins, CAST(SUM(CASE WHEN T1.age > 19 AND T1.age <= 65 THEN 60 * strftime('%H', ser_time) + strftime('%M', ser_time) + strftime('%S', ser_time) / 60 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age > 19 AND T1.age <= 65 THEN 1 ELSE 0 END) AS adultAverageMins , CAST(SUM(CASE WHEN T1.age > 65 THEN 60 * strftime('%H', ser_time) + strftime('%M', ser_time) + strftime('%S', ser_time) / 60 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age > 65 THEN 1 ELSE 0 END) AS elderAverageMins FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.'rand client'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "teenager refers to 13 < age < = 19; adult refers to 19 < age < = 65; elder refers to age < = 65; highest average time per complaint = max(divide(sum(ser_time), count(ser_time)))"}
{"sample_id": 341, "db_id": "retail_complains", "final": {"question": "What percentage of complaints are from the elderly?", "sql": "SELECT CAST(SUM(CASE WHEN T1.age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.age) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID", "source_tables": ["events", "client"]}, "evidence": "elder refers to age < = 65; percentage refers to divide(sum(age < = 65) , count(client_id)) * 100%"}
{"sample_id": 342, "db_id": "retail_complains", "final": {"question": "Calculate the percentage of male clients from Indianapolis City.", "sql": "SELECT CAST(SUM(CASE WHEN sex = 'Male' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(client_id) FROM client WHERE city = 'Indianapolis'", "source_tables": ["client"]}, "evidence": "male refers to sex = 'Male'; Indianapolis City refers to city = 'Indianapolis'; percentage = divide(count(client_id where sex = 'Male' and city = 'Indianapolis') , count(client_id where city = 'Indianapolis')) * 100%"}
{"sample_id": 343, "db_id": "retail_complains", "final": {"question": "Among the teenager clients who use Google account and Microsoft account, which group of client is more than the other?", "sql": "SELECT CASE WHEN SUM(CASE WHEN email LIKE '%@gmail.com' THEN 1 ELSE 0 END) > SUM(CASE WHEN email LIKE '%@outlook.com' THEN 1 ELSE 0 END) THEN 'Google account' ELSE 'Microsoft account' END FROM client WHERE age BETWEEN 13 AND 19", "source_tables": ["client"]}, "evidence": "teenager refers to 13 < age < = 19; Google account refers to email like '%@gmail.com'; Microsoft account refers to email like '%@outlook.com'"}
{"sample_id": 344, "db_id": "retail_complains", "final": {"question": "What is the full name of client whose email address is emily.garcia43@outlook.com?", "sql": "SELECT first, middle, last FROM client WHERE email = 'emily.garcia43@outlook.com'", "source_tables": ["client"]}, "evidence": "full name refers to first middle last"}
{"sample_id": 345, "db_id": "retail_complains", "final": {"question": "What is the first name of clients who have the highest priority?", "sql": "SELECT T1.first FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.'rand client' WHERE T2.priority = ( SELECT MAX(priority) FROM callcenterlogs )", "source_tables": ["client", "callcenterlogs"]}, "evidence": "first name refers to first; highest priority refers to priority = 2"}
{"sample_id": 346, "db_id": "retail_complains", "final": {"question": "List down the email of client whose complaint is type \"PS\".", "sql": "SELECT T1.email FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.'rand client' WHERE T2.type = 'PS'", "source_tables": ["client", "callcenterlogs"]}, "evidence": ""}
{"sample_id": 347, "db_id": "retail_complains", "final": {"question": "Among the elderlies, state the last name of whose complaint is handled in server YIFAT?", "sql": "SELECT T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.'rand client' WHERE T1.age > 65 AND T2.server = 'YIFAT'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "elder refers to age < = 65; last name refers to last"}
{"sample_id": 348, "db_id": "retail_complains", "final": {"question": "How many clients who live in New York City have the complaint outcome as \"AGENT\"?", "sql": "SELECT COUNT(T2.'rand client') FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.'rand client' WHERE T1.city = 'New York City' AND T2.outcome = 'AGENT'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "New York City refers to city = 'New York City'"}
{"sample_id": 349, "db_id": "retail_complains", "final": {"question": "List down the full name of clients who have disputed the response from company.", "sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.'Consumer disputed?' = 'Yes'", "source_tables": ["events", "client"]}, "evidence": "full name refers to first, middle, last; disputed the response refers to Consumer disputed? = 'Yes'"}
{"sample_id": 350, "db_id": "retail_complains", "final": {"question": "What are the complaint id of client who were born in 1931?", "sql": "SELECT T2.'Complaint ID' FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.'rand client' WHERE T1.year = 1931", "source_tables": ["client", "callcenterlogs"]}, "evidence": "in 1931 refers to year = 1931"}
{"sample_id": 351, "db_id": "retail_complains", "final": {"question": "Calculate the percentage of complaints made by Google account client in server ZOHARI.", "sql": "SELECT CAST(SUM(CASE WHEN T1.email LIKE '%@gmail.com' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.email) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.'rand client' WHERE T2.server = 'ZOHARI'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "Google account refers to email like '%@gmail.com'; percentage = divide(count(Complaint ID where email like '%@gmail.com') , count(Complaint ID)) * 100%"}
{"sample_id": 352, "db_id": "retail_complains", "final": {"question": "State the full name of clients with server time of 20 minutes and above.", "sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.'rand client' WHERE strftime('%M', T2.ser_time) > '20'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "full name refers to first, middle, last; server time of 20 minutes and above refers to ser_time > '00:20:00'"}
{"sample_id": 353, "db_id": "retail_complains", "final": {"question": "Pick 5 clients with 0 priority and write down their last name.", "sql": "SELECT T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.'rand client' WHERE T2.priority = 0 LIMIT 5", "source_tables": ["client", "callcenterlogs"]}, "evidence": "0 priority refers to priority = 0; last name refers to last"}
{"sample_id": 354, "db_id": "retail_complains", "final": {"question": "Write down the call id of clients whose first name start with alphabet \"B\".", "sql": "SELECT T2.call_id FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.'rand client' WHERE T1.first LIKE 'B%'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "first name start with alphabet \"B\" refers to first like 'B%'"}
{"sample_id": 355, "db_id": "retail_complains", "final": {"question": "What is the product complained by Alexander Bronx Lewis?", "sql": "SELECT DISTINCT T2.Product FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Alexander' AND T1.middle = 'Bronx' AND T1.last = 'Lewis'", "source_tables": ["events", "client"]}, "evidence": ""}
{"sample_id": 356, "db_id": "retail_complains", "final": {"question": "State the first name of male clients who did not receive timely response from the call center.", "sql": "SELECT T1.first FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.'Timely response?' = 'No' AND T1.sex = 'Male'", "source_tables": ["events", "client"]}, "evidence": "first name refers to first; male refers to sex = 'Male'; did not receive timely response refers to Timely response? = 'No'"}
{"sample_id": 357, "db_id": "retail_complains", "final": {"question": "Which product received the most complaints from elder clients?", "sql": "SELECT T2.Product FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.age > 65 ORDER BY T1.client_id DESC LIMIT 1", "source_tables": ["events", "client"]}, "evidence": "most complaints refers to max(client_id); elder client refers to age > 65"}
{"sample_id": 358, "db_id": "retail_complains", "final": {"question": "Complaint about Credit Card mostly came from clients of which age group?", "sql": "SELECT SUM(CASE WHEN T1.age > 13 AND T1.age <= 19 THEN 1 ELSE 0 END), SUM(CASE WHEN T1.age > 19 AND T1.age <= 65 THEN 1 ELSE 0 END) AS adult , SUM(CASE WHEN T1.age > 65 THEN 1 ELSE 0 END) AS elder FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Product = 'Credit card'", "source_tables": ["events", "client"]}, "evidence": "about Credit Card refers to Product = 'Credit Card'; teenager refers to 13 < age < = 19; adult refers to 19 < age < = 65; elder refers to age < = 65"}
{"sample_id": 359, "db_id": "retail_complains", "final": {"question": "List down the issues for complaint with server time of below 10 minutes.", "sql": "SELECT T2.Issue FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.'Complaint ID' = T2.'Complaint ID' WHERE strftime('%M', T1.ser_time) < '10'", "source_tables": ["events", "callcenterlogs"]}, "evidence": "server time of below 10 minutes refers to ser_time < '00:10:00'"}
{"sample_id": 360, "db_id": "retail_complains", "final": {"question": "Write down the date received of complaints sent via Fax.", "sql": "SELECT T1.'Date received' FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.'Complaint ID' = T2.'Complaint ID' WHERE T2.'Submitted via' = 'Fax'", "source_tables": ["events", "callcenterlogs"]}, "evidence": "sent via Fax refers to Submitted via = 'Fax'"}
{"sample_id": 361, "db_id": "retail_complains", "final": {"question": "What is the full name of clients who have issue about balance transfer?", "sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Issue = 'Balance transfer'", "source_tables": ["events", "client"]}, "evidence": "full name refers to first, middle, last; issue about balance transfer refers to Issue = 'Balance transfer'"}
{"sample_id": 362, "db_id": "retail_complains", "final": {"question": "What is the email address of clients who submitted their complaints via postal mail?", "sql": "SELECT T1.email FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.'Submitted via' = 'Postal mail'", "source_tables": ["events", "client"]}, "evidence": "via postal mail refers to Submitted via = 'Postal mail'"}
{"sample_id": 363, "db_id": "retail_complains", "final": {"question": "Calculate the average age of clients whose response is \"Closed with relief\".", "sql": "SELECT AVG(T1.age) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.'Company response to consumer' = 'Closed with relief'", "source_tables": ["events", "client"]}, "evidence": "average age = avg(age where Company response to consumer = 'Closed with relief'); response \"Closed with relief\" refers to Company response to consumer = 'Closed with relief'"}
{"sample_id": 364, "db_id": "retail_complains", "final": {"question": "What is the average age of clients whose complaint type is \"TT\"?", "sql": "SELECT AVG(T1.age) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.'rand client' WHERE T2.type = 'TT'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "average age = avg(age where type = 'TT')"}
{"sample_id": 365, "db_id": "retail_complains", "final": {"question": "Write the complaint ID, call ID, and final phone number of complaints through AVIDAN server from 1/1/2014 to 12/30/2014.", "sql": "SELECT 'Complaint ID', call_id, phonefinal FROM callcenterlogs WHERE strftime('%Y', 'Date received') = '2014' AND server = 'AVIDAN'", "source_tables": ["callcenterlogs"]}, "evidence": "final phone number refers to phonefinal; from 1/1/2014 to 12/30/2014 refers to Date received between '2014-01-01' and '2014-12-30'"}
{"sample_id": 366, "db_id": "retail_complains", "final": {"question": "Between 1/1/2017 and 4/1/2017, what is the average server time of calls under the server DARMON?", "sql": "SELECT AVG(CAST(SUBSTR(ser_time, 4, 2) AS REAL)) FROM callcenterlogs WHERE 'Date received' BETWEEN '2017-01-01' AND '2017-04-01'", "source_tables": ["callcenterlogs"]}, "evidence": "between 1/1/2017 and 4/1/2017 refers to Date received between '2017-01-01' and '2017-04-01'; average server time refers to avg(ser_time)"}
{"sample_id": 367, "db_id": "retail_complains", "final": {"question": "How many times per year does a credit card customer complain about overlimit fees?", "sql": "SELECT strftime('%Y', 'Date received'), COUNT('Date received') FROM events WHERE product = 'Credit card' AND issue = 'Overlimit fee' GROUP BY strftime('%Y', 'Date received') HAVING COUNT('Date received')", "source_tables": ["events"]}, "evidence": "credit card customer refers to product = 'Credit card'; about overlimit fees refers to issue = 'Overlimit fee'"}
{"sample_id": 368, "db_id": "retail_complains", "final": {"question": "Among the clients in Middle Atlantic, how many are them are female and no more than 18 years old?", "sql": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'Middle Atlantic' AND T1.sex = 'Female' AND T1.age < 18", "source_tables": ["district", "client"]}, "evidence": "in Middle Atlantic refers to division = 'Middle Atlantic'; female refers to sex = 'Female'; no more than 18 refers to age < 18"}
{"sample_id": 369, "db_id": "retail_complains", "final": {"question": "Give me the full birthdate, email and phone number of the youngest client in Indianapolis .", "sql": "SELECT T1.year, T1.month, T1.day, T1.email, T1.phone FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Indianapolis' ORDER BY T1.year DESC, T1.month DESC, T1.day DESC LIMIT 1", "source_tables": ["district", "client"]}, "evidence": "full birthdate = year, month, day; youngest refers to max(year, month, day); in Indianapolis refers to city = 'Indianapolis'"}
{"sample_id": 370, "db_id": "retail_complains", "final": {"question": "List the top five cities in terms of the number of 5-star ratings in 2016 reviews, in descending order.", "sql": "SELECT T2.city FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Stars = 5 AND T1.Date LIKE '2016%' ORDER BY T1.Date DESC LIMIT 5", "source_tables": ["district", "reviews"]}, "evidence": "5-star rating refers to Stars = 5; in 2016 refers to Date like '2016%'; most reviews refers to max(count(city))"}
{"sample_id": 371, "db_id": "retail_complains", "final": {"question": "What is the longest server time when the call is about the issue of arbitration?", "sql": "SELECT MAX(T1.ser_time) FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.'Complaint ID' = T2.'Complaint ID' WHERE T2.issue = 'Arbitration'", "source_tables": ["events", "callcenterlogs"]}, "evidence": "longest server time refers to max(ser_time)"}
{"sample_id": 372, "db_id": "retail_complains", "final": {"question": "Give me the social number and state of the client whose phone number is 100-121-8371.", "sql": "SELECT T1.social, T1.state FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T1.phone = '100-121-8371'", "source_tables": ["state", "district", "client"]}, "evidence": "social number refers to social"}
{"sample_id": 502, "db_id": "movies_4", "final": {"question": "Among the zero-budget movie titles, which one has made the highest revenue?", "sql": "SELECT title FROM movie WHERE budget = 0 ORDER BY revenue DESC LIMIT 1", "source_tables": ["movie"]}, "evidence": "zero-budget refers to budget = 0; highest revenue refers to max(revenue)"}
{"sample_id": 503, "db_id": "movies_4", "final": {"question": "What is the ID of the production company which produced the movie \"Gladiator\"?", "sql": "SELECT T2.company_id FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Gladiator'", "source_tables": ["movie_company", "movie"]}, "evidence": "ID of the production company refers to company_id; movie \"Gladiator\" refers to title = 'Gladiator'"}
{"sample_id": 504, "db_id": "movies_4", "final": {"question": "List down the IDs of the production companies that released the movies in 1916.", "sql": "SELECT T2.company_id FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id WHERE CAST(STRFTIME('%Y', T1.release_date) AS INT) = 1916", "source_tables": ["movie_company", "movie"]}, "evidence": "IDs of the production companies refers to company_id; movies in 1916 refers to release_date LIKE '1916%'"}
{"sample_id": 505, "db_id": "movies_4", "final": {"question": "List down the movies produced by Lucasfilm.", "sql": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Lucasfilm'", "source_tables": ["movie_company", "production_company", "movie"]}, "evidence": "movies refers to title; produced by Lucasfil refers to company_name = 'Lucasfilm'"}
{"sample_id": 506, "db_id": "movies_4", "final": {"question": "Among Warner Bros. Pictures' movies, which title made the highest revenue?", "sql": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Warner Bros. Pictures' ORDER BY T3.revenue DESC LIMIT 1", "source_tables": ["movie_company", "production_company", "movie"]}, "evidence": "Warner Bros. Pictures' movies refers to company_name = 'Warner Bros. Pictures'; highest revenue refers to max(revenue)"}
{"sample_id": 507, "db_id": "movies_4", "final": {"question": "Write down the release date of the movies produced by Twentieth Century Fox Film Corporation.", "sql": "SELECT T3.release_date FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Twentieth Century Fox Film Corporation'", "source_tables": ["movie_company", "production_company", "movie"]}, "evidence": "produced by Twentieth Century Fox Film Corporation refers to company_name = 'Twentieth Century Fox Film Corporation'"}
{"sample_id": 508, "db_id": "movies_4", "final": {"question": "What is the language ID of the movie \"Walk the Line\"?", "sql": "SELECT T2.language_id FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Walk the Line'", "source_tables": ["movie_languages", "movie"]}, "evidence": "movie \"Walk the Line\" refers to title = 'Walk the Line'"}
{"sample_id": 509, "db_id": "movies_4", "final": {"question": "Find out the language ID of the movie with the highest popularity.", "sql": "SELECT T2.language_id FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.popularity DESC LIMIT 1", "source_tables": ["movie_languages", "movie"]}, "evidence": "highest popularity refers to max(popularity)"}
{"sample_id": 510, "db_id": "movies_4", "final": {"question": "Tell the language of the movie \"C'era una volta il West\".", "sql": "SELECT T3.language_name FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T1.title LIKE 'C%era una volta il West'", "source_tables": ["movie_languages", "language", "movie"]}, "evidence": "language refers to language_name; movie \"C'era una volta il West\" refers to title = 'C''era una volta il West'"}
{"sample_id": 511, "db_id": "movies_4", "final": {"question": "Are there any post-production movies in Nederlands?", "sql": "SELECT DISTINCT CASE WHEN T1.movie_status = 'Post Production' THEN 'YES' ELSE 'NO' END AS YORN FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Nederlands'", "source_tables": ["movie_languages", "language", "movie"]}, "evidence": "post-production movies refers to movie_status = 'Post Production'; Nederlands refers to language_name = 'Nederlands';"}
{"sample_id": 512, "db_id": "movies_4", "final": {"question": "List down the tagline of the Polski movies.", "sql": "SELECT DISTINCT T1.tagline FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Polski'", "source_tables": ["movie_languages", "language", "movie"]}, "evidence": "Polski movies refers to language_name = 'Polski'"}
{"sample_id": 513, "db_id": "movies_4", "final": {"question": "Provide the homepage of the Bahasa Indonesia movies.", "sql": "SELECT DISTINCT T1.homepage FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Bahasa indonesia'", "source_tables": ["movie_languages", "language", "movie"]}, "evidence": "Bahasa Indonesia movies refers to language_name = 'Bahasa indonesia'"}
{"sample_id": 514, "db_id": "movies_4", "final": {"question": "Work out the difference in revenues made between the English and Latin movies.", "sql": "SELECT SUM(CASE WHEN T3.language_name = 'English' THEN T1.revenue ELSE 0 END) - SUM(CASE WHEN T3.language_name = 'Latin' THEN T1.revenue ELSE 0 END) AS DIFFERENCE FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id", "source_tables": ["movie_languages", "language", "movie"]}, "evidence": "English refers to language_name = 'English'; Latin refers to language_name = 'Latin'; difference in revenues = subtract(sum(movie_id) when language_name = 'English', sum(movie_id) when language_name = 'Latin')"}
{"sample_id": 515, "db_id": "movies_4", "final": {"question": "Calculate the revenues made by Fantasy Films and Live Entertainment.", "sql": "SELECT SUM(T3.revenue) FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name IN ('Fantasy Films', 'Live Entertainment')", "source_tables": ["movie_company", "production_company", "movie"]}, "evidence": "made by Fantasy Films refers to company_name = 'Fantasy Films'; Live Entertainment refers to company_name = 'Live Entertainment'"}
{"sample_id": 516, "db_id": "movies_4", "final": {"question": "What is the average revenue made by Latin movies?", "sql": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Latin'", "source_tables": ["movie_languages", "language", "movie"]}, "evidence": "Latin movies refers to language_name = 'Latin'; average revenue = AVG(revenue)"}
{"sample_id": 517, "db_id": "movies_4", "final": {"question": "What is the most common first name?", "sql": "SELECT person_name FROM person GROUP BY person_name ORDER BY COUNT(person_name) DESC LIMIT 1", "source_tables": ["person"]}, "evidence": "most common first name refers to max(count(person_name))"}
{"sample_id": 518, "db_id": "movies_4", "final": {"question": "What is the average number of crews for a movie?", "sql": "SELECT CAST(SUM(CD) AS REAL) / COUNT(movie_id) FROM ( SELECT movie_id, COUNT(person_id) AS CD FROM movie_crew GROUP BY movie_id )", "source_tables": ["movie_crew"]}, "evidence": "average number of crews = divide(count(person_id), COUNT(movie_id))"}
{"sample_id": 519, "db_id": "movies_4", "final": {"question": "List all the keywords with \"christmas\" in them.", "sql": "SELECT keyword_name FROM keyword WHERE keyword_name LIKE '%christmas%'", "source_tables": ["keyword"]}, "evidence": "keywords with \"christmas\" in them refers to keyword_name LIKE '%christmas%'"}
{"sample_id": 520, "db_id": "movies_4", "final": {"question": "What is the longest runtime of all movies?", "sql": "SELECT MAX(runtime) FROM movie", "source_tables": ["movie"]}, "evidence": "longest runtime refers to max(runtime)"}
{"sample_id": 521, "db_id": "movies_4", "final": {"question": "What is the iso code of \"Kyrgyz Republic\"?", "sql": "SELECT COUNTry_iso_code FROM COUNTry WHERE COUNTry_name = 'Kyrgyz Republic'", "source_tables": ["country"]}, "evidence": "iso code refers to country_iso_code; \"Kyrgyz Republic\" refers to country_name = 'Kyrgyz Republic'"}
{"sample_id": 522, "db_id": "movies_4", "final": {"question": "Provide the overview for the movie \"The Pacifier\".", "sql": "SELECT overview FROM movie WHERE title = 'The Pacifier'", "source_tables": ["movie"]}, "evidence": "movie \"The Pacifier\" refers to title = 'The Pacifier'"}
{"sample_id": 523, "db_id": "movies_4", "final": {"question": "How many movies were produced by \"Eddie Murphy Productions\"?", "sql": "SELECT COUNT(T1.movie_id) FROM movie_company AS T1 INNER JOIN production_company AS T2 ON T1.company_id = T2.company_id WHERE T2.company_name = 'Eddie Murphy Productions'", "source_tables": ["movie_company", "production_company"]}, "evidence": "produced by \"Eddie Murphy Productions\" refers to company_name = 'Eddie Murphy Productions'"}
{"sample_id": 524, "db_id": "movies_4", "final": {"question": "List all the actors who have played characters with \"captain\" in their names.", "sql": "SELECT DISTINCT T1.person_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T2.character_name LIKE '%captain%'", "source_tables": ["person", "movie_cast"]}, "evidence": "List all the actors refers to person_name; characters with \"captain\" in their names refers to character_name LIKE '%captain%';"}
{"sample_id": 525, "db_id": "movies_4", "final": {"question": "What is the most common keyword among all the movies released in 2006?", "sql": "SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.release_date LIKE '2006%' GROUP BY T3.keyword_name ORDER BY COUNT(T3.keyword_name) DESC LIMIT 1", "source_tables": ["movie_keywords", "keyword", "movie"]}, "evidence": "most common keyword refers to max(count(keyword_name)); movies released in 2006 refers to release_date LIKE '%2006%'"}
{"sample_id": 526, "db_id": "movies_4", "final": {"question": "How many movies have \"vi\" as their language code?", "sql": "SELECT COUNT(T1.movie_id) FROM movie_languages AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_code = 'vi'", "source_tables": ["movie_languages", "language"]}, "evidence": "\"vi\" as their language code refers to language_code = 'vi'"}
{"sample_id": 527, "db_id": "movies_4", "final": {"question": "What is the third least common genre?", "sql": "SELECT T2.genre_name FROM movie_genres AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.genre_id GROUP BY T2.genre_id ORDER BY COUNT(T1.movie_id) LIMIT 2, 1", "source_tables": ["genre", "movie_genres"]}, "evidence": "least common genre refers to min(count(genre_name))"}
{"sample_id": 528, "db_id": "movies_4", "final": {"question": "What is the original language of the movie with the tagline \"An offer you can't refuse.\"?", "sql": "SELECT T3.language_name FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id INNER JOIN language_role AS T4 ON T2.language_role_id = T4.role_id WHERE T4.language_role = 'Original' AND T1.tagline LIKE 'An offer you can%t refuse.'", "source_tables": ["movie_languages", "language_role", "language", "movie"]}, "evidence": "language refers to language_name; original language refers to language_role = 'Original'"}
{"sample_id": 529, "db_id": "movies_4", "final": {"question": "Provide the average revenue of all the French movies.", "sql": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'France'", "source_tables": ["country", "production_country", "movie"]}, "evidence": "French movies refers to country_name = 'France'; average revenue = AVG(revenue)"}
{"sample_id": 530, "db_id": "movies_4", "final": {"question": "List all the unspecified gender characters.", "sql": "SELECT T1.character_name FROM movie_cast AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.gender_id WHERE T2.gender = 'Unspecified'", "source_tables": ["gender", "movie_cast"]}, "evidence": "characters refers to character_name; gender = 'Unspecified'"}
{"sample_id": 531, "db_id": "movies_4", "final": {"question": "What are the top 5 most popular movie directors?", "sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T2.job = 'Director' ORDER BY T1.popularity DESC LIMIT 5", "source_tables": ["person", "movie_crew", "movie"]}, "evidence": "directors refers to job = 'Director'; most popular refers to max(popularity)"}
{"sample_id": 532, "db_id": "movies_4", "final": {"question": "List the film with the highest budget in each genre.", "sql": "SELECT T3.genre_name, MAX(T1.budget) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id GROUP BY T3.genre_name", "source_tables": ["genre", "movie_genres", "movie"]}, "evidence": "highest budget refers to max(budget); each genre refers to genre_name; film also means movie; list the film refers to title of movie"}
{"sample_id": 640, "db_id": "codebase_comments", "final": {"question": "List all the solutions of repositories with the Forks higher than half of the watchers.", "sql": "SELECT DISTINCT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks > T1.Watchers / 2", "source_tables": ["solution", "repo"]}, "evidence": "solutions refers to Solution.Id; forks higher than half of the watchers refers tto Forks>(Watchers/2);;"}
{"sample_id": 641, "db_id": "codebase_comments", "final": {"question": "What is the percentage of Forks to Stars of repository for solution \"104086\"?", "sql": "SELECT CAST(T1.Forks AS REAL) * 100 / T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 104086", "source_tables": ["solution", "repo"]}, "evidence": "solution refers to Solution.Id; Solution.Id = 104086; percentage = MULTIPLY(DIVIDE(Forkk, Stars), 100);"}
{"sample_id": 642, "db_id": "codebase_comments", "final": {"question": "Please provide the id of the respository that the most people like.", "sql": "SELECT Id FROM Repo WHERE Stars = ( SELECT MAX(Stars) FROM Repo )", "source_tables": ["repo"]}, "evidence": "repository that the most people like refers to MAX(Stars);"}
{"sample_id": 643, "db_id": "codebase_comments", "final": {"question": "What is the solution's path of method \"HtmlSharp.HtmlParser.Feed\"?", "sql": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'HtmlSharp.HtmlParser.Feed'", "source_tables": ["solution", "method"]}, "evidence": "solution's path refers to Path; method refers to Name; Name = 'HtmlSharp.HtmlParser.Feed';"}
{"sample_id": 644, "db_id": "codebase_comments", "final": {"question": "Please provide the number of forks that the repository of the solution 35 have.", "sql": "SELECT T1.Forks FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 35", "source_tables": ["solution", "repo"]}, "evidence": "solution refers to Solution.Id; Solution.Id = 35;"}
{"sample_id": 645, "db_id": "codebase_comments", "final": {"question": "Please provide the id of the solution whose repository has the most watchers.", "sql": "SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = ( SELECT MAX(Watchers) FROM Repo )", "source_tables": ["solution", "repo"]}, "evidence": "id of the solution refers to Solution.Id; repository has the most watchers refers to MAX(Watchers);"}
{"sample_id": 646, "db_id": "codebase_comments", "final": {"question": "Please provide the number of stars that the repository of the solution 20 have.", "sql": "SELECT T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 20", "source_tables": ["solution", "repo"]}, "evidence": "solution refers to Solution.ID; Solution.Id = 20;"}
{"sample_id": 647, "db_id": "codebase_comments", "final": {"question": "How many methods does solution 1 have? And please tell me if solution 1 needs to be compiled.", "sql": "SELECT COUNT(T2.SolutionId) , CASE WHEN T1.WasCompiled = 0 THEN 'Needs' ELSE 'NoNeeds' END needToCompile FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.SolutionId = 1", "source_tables": ["solution", "method"]}, "evidence": "method refers to Name; solution refers to Solution.Id; Solution.Id = 1; solution needs to be compiled refers to WasCompiled = 0;"}
{"sample_id": 648, "db_id": "codebase_comments", "final": {"question": "What is the percentage of the methods' solutions that need to be compiled among the methods whose comments is XML format?", "sql": "SELECT CAST(SUM(CASE WHEN T1.WasCompiled = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.CommentIsXml = 1", "source_tables": ["solution", "method"]}, "evidence": "comment is XML format refers to CommentIsXml = 1; solution needs to be compiled refesr to WasCompiled = 0; percentage = MULTIPLY(DIVIDE(SUM(WasCompiled = 0), COUNT(Solution.Id)), 100);"}
{"sample_id": 649, "db_id": "codebase_comments", "final": {"question": "Please list the names of methods with the solution path \"wallerdev_htmlsharp\\HtmlSharp.sln\".", "sql": "SELECT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'wallerdev_htmlsharpHtmlSharp.sln'", "source_tables": ["solution", "method"]}, "evidence": "name of the methods refers to Name; solution path refers to Path; Path = 'wallerdev_htmlsharp\\HtmlSharp.sln';"}
{"sample_id": 650, "db_id": "codebase_comments", "final": {"question": "What is the percentage of respositories that receive more than 2,000 stars?", "sql": "SELECT CAST(SUM(CASE WHEN Stars > 2000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Stars) FROM Repo", "source_tables": ["repo"]}, "evidence": "stars>2000; percentage = DIVIDE(MULTIPLY(COUNT(Stars>2000), 100), COUNT(Id));"}
{"sample_id": 651, "db_id": "codebase_comments", "final": {"question": "What is the url of solution 1?", "sql": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 1", "source_tables": ["solution", "repo"]}, "evidence": "solution refers to Solution.Id; Solution.Id = 1;"}
{"sample_id": 652, "db_id": "codebase_comments", "final": {"question": "Please provide the id of the respository that received the most forks among the respositories that receive 21 stars.", "sql": "SELECT Id FROM Repo WHERE Stars = 21 AND Forks = ( SELECT MAX(Forks) FROM Repo WHERE Stars = 21 )", "source_tables": ["repo"]}, "evidence": "repository that received the most forks refers to MAX(Forks);"}
{"sample_id": 653, "db_id": "codebase_comments", "final": {"question": "What the percentage of the english methods among the methods whose comments is XML format?", "sql": "SELECT CAST(SUM(CASE WHEN Lang = 'en' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Name) FROM Method WHERE CommentIsXml = 1", "source_tables": ["method"]}, "evidence": "english methods refers to lang = 'en'; comment is XML format refers to CommentIsXml = 1;"}
{"sample_id": 654, "db_id": "codebase_comments", "final": {"question": "Please provide the path of solution of method whose tokenized name is html parser feed.", "sql": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'html parser feed'", "source_tables": ["solution", "method"]}, "evidence": "path of solution refers to Path; method refers to Name; tokenized name refers to NameTokenized; Name = ''html parser feed';"}
{"sample_id": 655, "db_id": "codebase_comments", "final": {"question": "Please provide the solution id of the respository among the respository that receive 238 forks.", "sql": "SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks = 238", "source_tables": ["solution", "repo"]}, "evidence": "solution id of the repository refers to solution.Id;"}
{"sample_id": 656, "db_id": "codebase_comments", "final": {"question": "Among the english methods,please list the tokenized names of methods whose solutions need to be compiled.", "sql": "SELECT NameTokenized FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE Lang = 'en' AND WasCompiled = 0", "source_tables": ["solution", "method"]}, "evidence": "english methods refers to lang = 'en'; tokenized name refers to NameTokenized; methods refers to Name; solution needs to be compiled refers to WasCompiled = 0;"}
{"sample_id": 657, "db_id": "codebase_comments", "final": {"question": "How many solutions whose repository's stars are a third more than forks?", "sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks < T1.Stars * 1 / 3", "source_tables": ["solution", "repo"]}, "evidence": "solutions refers to Solution.Id; repository stars are a third more than forks = (MULTIPLY(Stars, 1/3))>Forks;"}
{"sample_id": 658, "db_id": "codebase_comments", "final": {"question": "Please provide the path of solution of method whose full comment is Feeds data into the parser.", "sql": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.FullComment = 'Feeds data into the parser'", "source_tables": ["solution", "method"]}, "evidence": "path of solution refers to Path; method refers to name; full comment = 'Feeds data into the parser';"}
{"sample_id": 659, "db_id": "codebase_comments", "final": {"question": "Among the repository \"3\", how many methods whose comments is XML format?", "sql": "SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.RepoId = 3 AND T2.CommentIsXml = 1", "source_tables": ["solution", "method"]}, "evidence": "repository refers to RepoId; RepoId = 3; method refers to Name; method whose comment is XML format refers to CommentIsXml = 1;"}
{"sample_id": 660, "db_id": "codebase_comments", "final": {"question": "What is the percentage of solutions for the method that needs to be compiled in the English methods?", "sql": "SELECT CAST(SUM(CASE WHEN T1.WasCompiled = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Lang) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'en'", "source_tables": ["solution", "method"]}, "evidence": "method that needs to be compiled refers to WasCompiled = 0; English method refers to Lang = 'en'; percentage of solutions = MULTIPLY(DIVIDE(SUM(WasCompiled = 0), COUNT(Solution.Id)), 100);"}
{"sample_id": 661, "db_id": "codebase_comments", "final": {"question": "How many more stars in percentage are there for the repository of solution \"1\" than solution \"2\"?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Id = 1 THEN T1.Stars ELSE 0 END) - SUM(CASE WHEN T2.Id = 2 THEN T1.Stars ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 2 THEN T1.Stars ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId", "source_tables": ["solution", "repo"]}, "evidence": "solution refers to Solution.Id; Solution.Id = 1 OR 2; percentage = DIVIDE(MULTIPLY(SUBTRACT(SUM(Solution.Id = 1), SUM(Solution.Id = 2)), 100)), SUM(Solution.Id = 2);"}
{"sample_id": 662, "db_id": "codebase_comments", "final": {"question": "How many solutions are there whose respositories received the number of stars more than one third of the number of forks?", "sql": "SELECT COUNT(DISTINCT T1.Id) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars > CAST(T1.Forks AS REAL) / 3", "source_tables": ["solution", "repo"]}, "evidence": "number of solutions are there whose repositories received the number of stars more than one third of the number of forks refers to Stars>DIVIDE(Forks, 3);"}
{"sample_id": 663, "db_id": "codebase_comments", "final": {"question": "What is the task of method number 2?", "sql": "SELECT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE Id = 2", "source_tables": ["method"]}, "evidence": "task of the method refers to the second part of the Name after the \".\"; method number refers to Method_100k.Id; Method_100k.Id = 2;"}
{"sample_id": 714, "db_id": "trains", "final": {"question": "How many wheels do the long cars have?", "sql": "SELECT SUM(wheels) FROM cars WHERE len = 'long'", "source_tables": ["cars"]}, "evidence": "long cars refers to len = 'long'"}
{"sample_id": 715, "db_id": "trains", "final": {"question": "Which direction do the majority of the trains are running?", "sql": "SELECT direction FROM trains GROUP BY direction ORDER BY COUNT(id) DESC", "source_tables": ["trains"]}, "evidence": "majority of train refers to MAX(count(id))"}
{"sample_id": 716, "db_id": "trains", "final": {"question": "Among the trains running east, how many trains have at least 4 cars?", "sql": "SELECT SUM(CASE WHEN T1.direction = 'east' THEN 1 ELSE 0 END)as count FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) AS carsNum FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T2.carsNum >= 4", "source_tables": ["trains", "cars"]}, "evidence": "east is a direction; at least 4 cars refers to carsNum > = 4"}
{"sample_id": 717, "db_id": "trains", "final": {"question": "Which direction do most of the trains with rectangle-shaped second cars run?", "sql": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 2 AND T1.shape = 'rectangle' GROUP BY T2.direction ORDER BY COUNT(T2.id) DESC LIMIT 1", "source_tables": ["trains", "cars"]}, "evidence": "most of the trains refers to MAX(count(id)); second cars refers to position = 2"}
{"sample_id": 718, "db_id": "trains", "final": {"question": "How many trains running west have double sided cars in 3rd position?", "sql": "SELECT COUNT(T.train_id) FROM (SELECT T1.train_id FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 3 AND T2.direction = 'west' AND T1.sides = 'double' GROUP BY T1.train_id)as T", "source_tables": ["trains", "cars"]}, "evidence": "west is a direction; double sided cars refers to sides = 'double'; 3rd position refers to position = 3"}
{"sample_id": 719, "db_id": "trains", "final": {"question": "How many eastbound trains have rectangular-shaped head cars?", "sql": "SELECT COUNT(T.train_id) FROM (SELECT T1.train_id FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 1 AND T2.direction = 'east' AND T1.shape = 'rectangle' GROUP BY T1.train_id)as T", "source_tables": ["trains", "cars"]}, "evidence": "eastbound refers to direction = 'east'; head cars refers to position = 1"}
{"sample_id": 720, "db_id": "trains", "final": {"question": "Among the trains running west, how many trains have no more than one car with an open roof?", "sql": "SELECT SUM(CASE WHEN T1.direction = 'west' THEN 1 ELSE 0 END)as count FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) FROM cars WHERE roof = 'none' GROUP BY train_id HAVING COUNT(id) = 1 ) AS T2 ON T1.id = T2.train_id", "source_tables": ["trains", "cars"]}, "evidence": "running west refers to direction = 'west'; open roof refers to roof = 'none'"}
{"sample_id": 721, "db_id": "trains", "final": {"question": "Which direction does the majority of the trains that have 3 cars are running?", "sql": "SELECT T1.direction FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) AS carsNum FROM cars GROUP BY train_id HAVING carsNum = 3 ) AS T2 ON T1.id = T2.train_id GROUP BY T1.direction", "source_tables": ["trains", "cars"]}, "evidence": "3 cars refers to carsNum = 3"}
{"sample_id": 757, "db_id": "movie", "final": {"question": "What is the percentage of the USA actors that showed up in the credit list of movie \"Mrs. Doubtfire\"?", "sql": "SELECT CAST(SUM(CASE WHEN T3.'Birth Country' = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.'Birth Country') FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Mrs. Doubtfire'", "source_tables": ["characters", "actor", "movie"]}, "evidence": "USA actors refers to Birth Country = 'USA'; movie \"Mrs. Doubtfire\" refers to Title = 'Mrs. Doubtfire'; percentage = divide(count(ActorID where Birth Country = 'USA'), count(ActorID)) * 100%"}
{"sample_id": 758, "db_id": "movie", "final": {"question": "What is the percentage of the actors that showed up in the credit list of movie \"Dawn of the Planet of the Apes\" that were born after \"1970/1/1\"?", "sql": "SELECT CAST(SUM(CASE WHEN T3.'Date of Birth' > '1970-01-01' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.'Date of Birth') FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Dawn of the Planet of the Apes'", "source_tables": ["characters", "actor", "movie"]}, "evidence": "movie \"Dawn of the Planet of the Apes\" refers to Title = 'Dawn of the Planet of the Apes'; born after \"1970/1/1\" refers to Date of Birth > '1970/1/1'; percentage = divide(count(ActorID where Date of Birth > '1970/1/1'), count(ActorID))*100%"}
{"sample_id": 759, "db_id": "movie", "final": {"question": "List down the movie ID of movie with a budget of 15000000 and a rating between 7 to 8.", "sql": "SELECT MovieID FROM movie WHERE Rating BETWEEN 7 AND 8 AND Budget = 15000000", "source_tables": ["movie"]}, "evidence": "a budget of 15000000 refers to Budget = 15000000; rating between 7 to 8 refers to Rating BETWEEN 7 and 8"}
{"sample_id": 760, "db_id": "movie", "final": {"question": "In rated PG movies, how many of them released in June 1990?", "sql": "SELECT COUNT(*) FROM movie WHERE 'MPAA Rating' = 'PG' AND 'Release Date' LIKE '1990-06%'", "source_tables": ["movie"]}, "evidence": "rated PG refers to MPAA Rating = 'PG'; released in June 1990 refers to Release Date BETWEEN '1990-06-01' and '1990-06-30'"}
{"sample_id": 761, "db_id": "movie", "final": {"question": "What is the name of male and white actor with actor ID 439?", "sql": "SELECT Name FROM actor WHERE ActorID = 439 AND Gender = 'Male' AND Ethnicity = 'White'", "source_tables": ["actor"]}, "evidence": "male refers to Gender = 'Male'; white refers to Ethnicity = 'White'"}
{"sample_id": 762, "db_id": "movie", "final": {"question": "Among the actors born in New York City, list the genre of their movie with a rating greater than 5.", "sql": "SELECT T1.Genre FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.'Birth City' = 'New York City' AND T1.Rating > 5", "source_tables": ["characters", "actor", "movie"]}, "evidence": "born in New York City refers to Birth City = 'New York City'; rating greater than 5 refers to Rating > 5"}
{"sample_id": 763, "db_id": "movie", "final": {"question": "In romantic movies, how many of them starred by John Travolta?", "sql": "SELECT COUNT(*) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Genre = 'Romance' AND T3.Name = 'John Travolta'", "source_tables": ["characters", "actor", "movie"]}, "evidence": "romantic movies refers to Genre = 'Romance'; starred by John Travolta refers to Name = 'John Travolta'"}
{"sample_id": 764, "db_id": "movie", "final": {"question": "List the height and net worth of actors starred in Three Men and a Little Lady.", "sql": "SELECT T3.'Height (Inches)', T3.NetWorth FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Three Men and a Little Lady'", "source_tables": ["characters", "actor", "movie"]}, "evidence": "Three Men and a Little Lady refers to Title = 'Three Men and a Little Lady'"}
{"sample_id": 765, "db_id": "movie", "final": {"question": "What is the genre of PG rated movie starred by the actor with highest net worth?", "sql": "SELECT T1.Genre FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.'MPAA Rating' = 'PG' ORDER BY CAST(REPLACE(REPLACE(T3.NetWorth, ',', ''), '$', '') AS REAL) DESC LIMIT 1", "source_tables": ["characters", "actor", "movie"]}, "evidence": "PG rated refers to MPAA Rating = 'PG';\u00a0 highest net worth refers to max(NetWorth)"}
{"sample_id": 822, "db_id": "social_media", "final": {"question": "Calculate the total number of male tweet IDs.", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male'", "source_tables": ["user", "twitter"]}, "evidence": "\"Male\" is the Gender"}
{"sample_id": 823, "db_id": "social_media", "final": {"question": "What gender of users posted the most tweets in `en`?", "sql": "SELECT T.Gender FROM ( SELECT T2.Gender, COUNT( text) AS num FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Lang = 'en' GROUP BY T2.Gender ) T ORDER BY T.num DESC LIMIT 1", "source_tables": ["user", "twitter"]}, "evidence": "\"en\" is the language and refers to Lang = 'en'; most tweet in 'en' refers to Max(Count(text where Lang = 'en'))"}
{"sample_id": 824, "db_id": "social_media", "final": {"question": "What gender of users retweet more than 30 times?", "sql": "SELECT DISTINCT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.RetweetCount > 30", "source_tables": ["user", "twitter"]}, "evidence": "retweet more than 30 times refers to RetweetCount > 30"}
{"sample_id": 825, "db_id": "social_media", "final": {"question": "How many female users reshared their tweets?", "sql": "SELECT COUNT(T1.UserID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Female' AND T1.IsReshare = 'TRUE'", "source_tables": ["user", "twitter"]}, "evidence": "female users refers to Gender = 'Female'; reshare refers to IsReshare = 'TRUE'"}
{"sample_id": 826, "db_id": "social_media", "final": {"question": "Which country's tweets collected the most likes?", "sql": "SELECT T.Country FROM ( SELECT T2.Country, SUM(T1.Likes) AS num FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID GROUP BY T2.Country ) T ORDER BY T.num DESC LIMIT 1", "source_tables": ["location", "twitter"]}, "evidence": "country collected the most likes refers to Country where Max(Sum(Likes))"}
{"sample_id": 827, "db_id": "social_media", "final": {"question": "Tweet with ID tw-682723090279841798 was posted from which country?", "sql": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.TweetID = 'tw-682723090279841798'", "source_tables": ["location", "twitter"]}, "evidence": "\"tw-682723090279841798\" is the TweetID"}
{"sample_id": 828, "db_id": "social_media", "final": {"question": "List down all the tweet text posted from Australia.", "sql": "SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.Country = 'Australia'", "source_tables": ["location", "twitter"]}, "evidence": "\"Australia\" is the Country"}
{"sample_id": 829, "db_id": "social_media", "final": {"question": "Write down the tweet text posted from Rawang, Selangor, Malaysia.", "sql": "SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.City = 'Rawang' AND T2.State = 'Selangor' AND T2.Country = 'Malaysia'", "source_tables": ["location", "twitter"]}, "evidence": "\"Rawang\" is the City; \"Selangor\" is the State; \"Malaysia\" is the Country"}
{"sample_id": 830, "db_id": "social_media", "final": {"question": "Tweets that were posted from Brazil are in what languague?", "sql": "SELECT DISTINCT T1.Lang FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.Country = 'Brazil'", "source_tables": ["location", "twitter"]}, "evidence": "\"Brazil\" is the Country; language refers to Lang"}
{"sample_id": 831, "db_id": "social_media", "final": {"question": "State the country where the most positive sentiment tweets were posted.", "sql": "SELECT T.Country FROM ( SELECT T2.Country, SUM(T1.Sentiment) AS num FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.Sentiment > 0 GROUP BY T2.Country ) T ORDER BY T.num DESC LIMIT 1", "source_tables": ["location", "twitter"]}, "evidence": "country with the most positive sentiment tweet refers to Country where Max(Count(Sentiment > 0))"}
{"sample_id": 832, "db_id": "social_media", "final": {"question": "Calculate the total likes collected by tweets in `ru` posted by male users.", "sql": "SELECT SUM(T1.Likes) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Lang = 'ru' AND T2.Gender = 'Male'", "source_tables": ["user", "twitter"]}, "evidence": "'ru' refers to Lang = 'ru'; male user refers to Gender = 'Male'"}
{"sample_id": 833, "db_id": "social_media", "final": {"question": "Calculate the average number of male users who posted tweets in a week.", "sql": "SELECT COUNT(DISTINCT T1.TweetID) / COUNT(DISTINCT T1.UserID) / 7 AS avg FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Day BETWEEN 1 AND 31", "source_tables": ["user", "twitter"]}, "evidence": "male user refers to Gender = 'Male'; average tweet in a week per user refers to Divide ( Divide(Count(TweetID), Count (UserID)), Divide(31, 7))"}
{"sample_id": 834, "db_id": "social_media", "final": {"question": "How many tweets have a klout of over 50?", "sql": "SELECT COUNT(DISTINCT TweetID) FROM twitter WHERE Klout > 50", "source_tables": ["twitter"]}, "evidence": "klout of over 50 refers to Klout > 50"}
{"sample_id": 835, "db_id": "social_media", "final": {"question": "Please list the texts of all the tweets that are not in English.", "sql": "SELECT text FROM twitter WHERE Lang != 'en'", "source_tables": ["twitter"]}, "evidence": "not in English refers to Lang <> en'"}
{"sample_id": 836, "db_id": "social_media", "final": {"question": "Please give the user ID of the user who has posted the most tweets.", "sql": "SELECT UserID FROM twitter GROUP BY UserID ORDER BY COUNT(DISTINCT TweetID) DESC LIMIT 1", "source_tables": ["twitter"]}, "evidence": "users with the most tweet refers to UserID where Max(Count (TweetID))"}
{"sample_id": 921, "db_id": "cs_semester", "final": {"question": "Describe the names and capability of the students who were advised by professors from the University of Washington.", "sql": "SELECT T3.f_name, T3.l_name, T2.capability FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T1.graduate_from = 'University of Washington'", "source_tables": ["prof", "student", "ra"]}, "evidence": "names of the students = f_name, l_name;"}
{"sample_id": 922, "db_id": "cs_semester", "final": {"question": "Describe the full names, emails and intelligence of the students with the highest capability and salary.", "sql": "SELECT f_name, l_name, email, intelligence FROM student WHERE student_id IN ( SELECT student_id FROM RA WHERE salary = 'high' AND capability = ( SELECT MAX(capability) FROM RA ) )", "source_tables": ["student", "ra"]}, "evidence": "full names of the students = f_name; l_name; highest capability refers to MAX(capability); highest salary refers to salary = 'high';"}
{"sample_id": 923, "db_id": "cs_semester", "final": {"question": "Mention the names and credits of course registered by the students who were under the supervision of female professor with the highest teaching ability.", "sql": "SELECT T5.name, T5.credit FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T1.student_id = T3.student_id INNER JOIN registration AS T4 ON T3.student_id = T4.student_id INNER JOIN course AS T5 ON T4.course_id = T5.course_id WHERE T2.gender = 'Female' ORDER BY T2.teachingability DESC LIMIT 1", "source_tables": ["student", "ra", "registration", "prof", "course"]}, "evidence": "female refers to gender = 'Female'; highest teaching ability refers to MAX(teachingability);"}
{"sample_id": 924, "db_id": "cs_semester", "final": {"question": "How many of the professors are female?", "sql": "SELECT COUNT(prof_id) FROM prof WHERE gender = 'Female'", "source_tables": ["prof"]}, "evidence": "female refers to gender = 'Female';"}
{"sample_id": 925, "db_id": "cs_semester", "final": {"question": "What is the name of the most difficult course?", "sql": "SELECT name FROM course WHERE diff = ( SELECT MAX(diff) FROM course )", "source_tables": ["course"]}, "evidence": "difficulty of a course refers to diff; most difficult course refers to MAX(diff);"}
{"sample_id": 926, "db_id": "cs_semester", "final": {"question": "Among the students with a gpa of 3.1 to 3.7, how many of them are undergraduate students?", "sql": "SELECT COUNT(student_id) FROM student WHERE gpa BETWEEN 3.1 AND 3.7 AND type = 'UG'", "source_tables": ["student"]}, "evidence": "gpa of 3.1 to 3.7 refers to gpa BETWEEN 3.1 AND 3.7; undergraduate students refers to type = 'UG';"}
{"sample_id": 927, "db_id": "cs_semester", "final": {"question": "What is the credit of the course named \"Computer Vision\"?", "sql": "SELECT credit FROM course WHERE name = 'Computer Vision'", "source_tables": ["course"]}, "evidence": ""}
{"sample_id": 928, "db_id": "cs_semester", "final": {"question": "Give the student's ID of students with 2.5 GPA and enrolled in C for Programmers.", "sql": "SELECT T2.student_id FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'C for Programmers' AND T1.gpa = 2.5", "source_tables": ["student", "course", "registration"]}, "evidence": ""}
{"sample_id": 929, "db_id": "cs_semester", "final": {"question": "Give the student's last name that gave the highest student satisfaction for the course \"Intro to Database 2\".", "sql": "SELECT T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Intro to Database 2' ORDER BY T2.sat DESC LIMIT 1", "source_tables": ["student", "course", "registration"]}, "evidence": "student's last name refers to l_name; satisfaction refers to sat; highest satisfaction refers to MAX(sat);"}
{"sample_id": 930, "db_id": "cs_semester", "final": {"question": "Among the students with high salary, what is total number of students with a GPA higher than 3?", "sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'high' AND T2.gpa > 3", "source_tables": ["student", "ra"]}, "evidence": "high salary refers to salary = 'high'; GPA higher than 3 refers to gpa > 3;"}
{"sample_id": 931, "db_id": "cs_semester", "final": {"question": "Among undergraduate students, list the name of the course with the highest student satisfaction.", "sql": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.type = 'UG' ORDER BY T2.sat DESC LIMIT 1", "source_tables": ["student", "course", "registration"]}, "evidence": "Undergraduate students refers to type = 'UG'; satisfaction refers to sat; highest satisfaction refers to MAX(sat);"}
{"sample_id": 932, "db_id": "cs_semester", "final": {"question": "List the capability of research postgraduate students with an intellegence level of 4 and above.", "sql": "SELECT T1.capability FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.type = 'RPG' AND T2.intelligence >= 4", "source_tables": ["student", "ra"]}, "evidence": "research postgraduate students refers to type = 'RPG'; intelligence level of 4 and above refers to intelligence > = 4;"}
{"sample_id": 933, "db_id": "cs_semester", "final": {"question": "In students with a grade of B, how many of them have an intellegence level of 3?", "sql": "SELECT COUNT(T1.student_id) FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.grade = 'B' AND T2.intelligence = 3", "source_tables": ["student", "registration"]}, "evidence": ""}
{"sample_id": 934, "db_id": "cs_semester", "final": {"question": "What is the difficulty of the course in which a student with level of intellengence of 5 got an A grade?", "sql": "SELECT T3.diff FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.grade = 'A' AND T1.intelligence = 5", "source_tables": ["student", "course", "registration"]}, "evidence": "difficulty of the course refers to diff;"}
{"sample_id": 935, "db_id": "cs_semester", "final": {"question": "Among professors with the highest popularity, how many of their students have research capability of 5?", "sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T1.capability = 5 ORDER BY T2.popularity DESC LIMIT 1", "source_tables": ["prof", "ra"]}, "evidence": "highest popularity refers to MAX(popularity); research capability refers to capability; capability = 5;"}
{"sample_id": 936, "db_id": "cs_semester", "final": {"question": "List the course's name where students acquired a grade of D.", "sql": "SELECT T1.name FROM course AS T1 INNER JOIN registration AS T2 ON T1.course_id = T2.course_id WHERE T2.grade = 'D'", "source_tables": ["course", "registration"]}, "evidence": ""}
{"sample_id": 937, "db_id": "cs_semester", "final": {"question": "What is the capability on research of the student named Alvera McQuillin?", "sql": "SELECT T2.capability FROM student AS T1 INNER JOIN RA AS T2 ON T1.student_id = T2.student_id WHERE T1.f_name = 'Alvera' AND T1.l_name = 'McQuillin'", "source_tables": ["student", "ra"]}, "evidence": "capability on research refers to capability;"}
{"sample_id": 938, "db_id": "cs_semester", "final": {"question": "Of courses with 3 credit, how many students have GPA of 3.2?", "sql": "SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.credit = 3 AND T1.gpa = 3.2", "source_tables": ["student", "course", "registration"]}, "evidence": ""}
{"sample_id": 939, "db_id": "cs_semester", "final": {"question": "Among students with low salary, how many of them have a gpa of 3.5?", "sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.gpa = 3.5 AND T1.salary = 'low'", "source_tables": ["student", "ra"]}, "evidence": "low salary refers to salary = 'low';"}
{"sample_id": 940, "db_id": "cs_semester", "final": {"question": "List the student's email with grade of B in a course with difficulty greater than the 80% of average difficulty of all courses.", "sql": "SELECT T2.email FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T1.course_id = T3.course_id WHERE T1.grade = 'B' GROUP BY T3.diff HAVING T3.diff > AVG(T3.diff) * 0.8", "source_tables": ["student", "course", "registration"]}, "evidence": "difficulty refers to diff; course with difficulty greater than the 80% of average difficulty refers to diff > MULTIPLY(AVG(diff), 80%);"}
{"sample_id": 941, "db_id": "cs_semester", "final": {"question": "Among the professors with a teachability of 3 and below, what is the percentage of their student advisees with a low salary?", "sql": "SELECT CAST(SUM(CASE WHEN T1.salary = 'low' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.salary) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability < 3", "source_tables": ["prof", "ra"]}, "evidence": "teachability < = 3; percentage = MULTIPLY(DIVIDE(COUNT(salary = 'low'), COUNT(salary)), 1.0);"}
{"sample_id": 942, "db_id": "cs_semester", "final": {"question": "Find the most important and most difficult courses.", "sql": "SELECT name FROM course WHERE credit = ( SELECT MAX(credit) FROM course ) AND diff = ( SELECT MAX(diff) FROM course )", "source_tables": ["course"]}, "evidence": "most important refers to MAX(credit); most difficult refers to MAX(diff);"}
{"sample_id": 1010, "db_id": "computer_student", "final": {"question": "Mention the person ID of faculty professor who taught course ID 104 and the course level.", "sql": "SELECT T1.p_id, T3.courseLevel FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id WHERE T3.course_id = 104 AND T1.hasPosition <> 0", "source_tables": ["course", "person", "taughtby"]}, "evidence": "person ID refers to person.p_id; faculty professor refers to professor = 1 and hasPosition ! = 0"}
{"sample_id": 1011, "db_id": "computer_student", "final": {"question": "Find the professor ID and position in faculty who taught high-level undergraduate course of less than 10 in ID.", "sql": "SELECT T1.p_id, T1.hasPosition FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id WHERE T3.courseLevel = 'Level_400' AND T2.course_id < 10", "source_tables": ["course", "person", "taughtby"]}, "evidence": "professor ID refers to person.p_id when professor = 1; position in faculty refers to hasPosition; high-level undergraduate course refers to courseLevel = 'Level_400'; less than 10 in ID refers to course.course_id < 10"}
{"sample_id": 1012, "db_id": "computer_student", "final": {"question": "List the professor ID who taught the course ID from 121 to 130 of basic undergraduate courses.", "sql": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_300' AND T1.course_id > 121 AND T1.course_id < 130", "source_tables": ["course", "taughtby"]}, "evidence": "professor ID refers to taughtBy.p_id; course ID from 121 to 130 of basic undergraduate courses refers to courseLevel = 'Level_300' and course.course_id between 121 and 130"}
{"sample_id": 1013, "db_id": "computer_student", "final": {"question": "List the advisor IDs for students with eighth year of program and position status in faculty of those professors.", "sql": "SELECT T1.p_id_dummy, T2.hasPosition FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_8'", "source_tables": ["person", "advisedby"]}, "evidence": "advisor IDs refers to p_id_dummy and person.p_id where professor = 1; eighth year of program refers to yearsInprogram = 'Year_8'; position status in faculty of those professors refers to hasPosition"}
{"sample_id": 1014, "db_id": "computer_student", "final": {"question": "List any five of course IDs with professor IDs who taught master courses.", "sql": "SELECT T1.course_id, T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_500' LIMIT 5", "source_tables": ["course", "taughtby"]}, "evidence": "professor IDs refers to taughtBy.p_id; master course refers to courseLevel = 'Level_500'"}
{"sample_id": 1015, "db_id": "computer_student", "final": {"question": "How many students are under advisor 415?", "sql": "SELECT COUNT(*) FROM advisedBy WHERE p_id_dummy = 415", "source_tables": ["advisedby"]}, "evidence": "advisor 415 refers to p_id_dummy = 415"}
{"sample_id": 1016, "db_id": "computer_student", "final": {"question": "How many professional or master/graduate courses are there?", "sql": "SELECT COUNT(*) FROM course WHERE courseLevel = 'Level_500'", "source_tables": ["course"]}, "evidence": "professional or master/graduate courses refers to courseLevel = 'Level_500'"}
{"sample_id": 1017, "db_id": "computer_student", "final": {"question": "How many non-faculty members are not undergoing the phase of qualifications?", "sql": "SELECT COUNT(*) FROM person WHERE hasPosition = 0 AND inPhase = 0", "source_tables": ["person"]}, "evidence": "non-faculty members refers to hasPosition = 0; are not undergoing the phase of qualifications refers to inPhase = 0"}
{"sample_id": 1018, "db_id": "computer_student", "final": {"question": "Which professor taught the least amount of courses?", "sql": "SELECT p_id FROM taughtBy GROUP BY p_id ORDER BY COUNT(course_id) ASC LIMIT 1", "source_tables": ["taughtby"]}, "evidence": "professor refers to taughtBy.p_id; least amount of courses refers to min(count(course_id))"}
{"sample_id": 1019, "db_id": "computer_student", "final": {"question": "Among the students being advised by Advisor 5, how many students are in the 5th year?", "sql": "SELECT COUNT(*) FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T1.p_id_dummy = 5 AND T2.student = 1 AND T2.yearsInProgram = 'Year_5'", "source_tables": ["person", "advisedby"]}, "evidence": "Advisor 5 refers to p_id_dummy = 5; are in the 5th year refers to yearsInProgram = 'Year_5'"}
{"sample_id": 1020, "db_id": "computer_student", "final": {"question": "Which professor teaches the highest number of professional or master/graduate courses?", "sql": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_500' GROUP BY T2.p_id ORDER BY COUNT(T2.course_id) DESC LIMIT 1", "source_tables": ["course", "taughtby"]}, "evidence": "professor refers to taughtBy.p_id; highest number of professional or master/graduate courses refers to max(count(taughtBy.course_id)) where courseLevel = 'Level_500'"}
{"sample_id": 1021, "db_id": "computer_student", "final": {"question": "Among the faculty affiliated professor, how many professors teaches professional or master/undergraduate courses?", "sql": "SELECT COUNT(*) FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id WHERE T1.hasPosition = 'Faculty_aff' AND T1.professor = 1 AND T3.courseLevel = 'Level_500'", "source_tables": ["course", "person", "taughtby"]}, "evidence": "faculty affiliated professor refers to professor = 1 and hasPosition = 'Faculty_aff'; professional or master/undergraduate courses refers to courseLevel = 'Level_500'"}
{"sample_id": 1022, "db_id": "computer_student", "final": {"question": "Who are the top 5 professors who teaches the highest number of professional or master/undergraduate courses?", "sql": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_500' GROUP BY T2.p_id ORDER BY COUNT(T2.p_id) DESC LIMIT 5", "source_tables": ["course", "taughtby"]}, "evidence": "professors refers to course.p_id; highest number of professional or master/undergraduate courses refers to max(count(course.course_id)) where courseLevel = 'Level_500'"}
{"sample_id": 1023, "db_id": "computer_student", "final": {"question": "How many advisors are in charge of advising all the students in 1st year?", "sql": "SELECT COUNT(T1.p_id_dummy) FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_1' AND T2.student = 1", "source_tables": ["person", "advisedby"]}, "evidence": "advisors refers to p_id_dummy; students in 1st year refers to student = 1 and yearsInProgram = 'Year_1'"}
{"sample_id": 1162, "db_id": "talkingdata", "final": {"question": "What is the label ID of \"Third-party card management\" category?", "sql": "SELECT label_id FROM label_categories WHERE category = 'Third-party card management'", "source_tables": ["label_categories"]}, "evidence": ""}
{"sample_id": 1163, "db_id": "talkingdata", "final": {"question": "What is the ratio of active and inactive app users of the event ID \"58\"?", "sql": "SELECT SUM(IIF(is_active = 1, 1, 0)) / SUM(IIF(is_active = 0, 1, 0)) AS per FROM app_events WHERE event_id = 58", "source_tables": ["app_events"]}, "evidence": "ratio = DIVIDE(SUM(is_active = 1), SUM(is_active = 0)); active refers to is_active = 1; inactive refers to is_active = 0;"}
{"sample_id": 1164, "db_id": "talkingdata", "final": {"question": "How many events did the device ID \"3915082290673130000\" join?", "sql": "SELECT COUNT(event_id) FROM events WHERE device_id = 3915082290673130000", "source_tables": ["events"]}, "evidence": ""}
{"sample_id": 1165, "db_id": "talkingdata", "final": {"question": "Calculate the percentage of male users among all device users.", "sql": "SELECT SUM(IIF(gender = 'M', 1, 0)) / COUNT(device_id) AS per FROM gender_age", "source_tables": ["gender_age"]}, "evidence": "percentage = DVIDE(SUM(gender = 'M'), COUNT(device_id)); male refers to gender = 'M';"}
{"sample_id": 1166, "db_id": "talkingdata", "final": {"question": "How many events were participated by the users at longitude of \"-156\"?", "sql": "SELECT COUNT(event_id) FROM events WHERE longitude = -156", "source_tables": ["events"]}, "evidence": ""}
{"sample_id": 1167, "db_id": "talkingdata", "final": {"question": "How many app users belong to label ID of \"48\"?", "sql": "SELECT COUNT(app_id) FROM app_labels WHERE label_id = 48", "source_tables": ["app_labels"]}, "evidence": ""}
{"sample_id": 1168, "db_id": "talkingdata", "final": {"question": "How many category names start with the word \"game\"?", "sql": "SELECT COUNT(label_id) FROM label_categories WHERE category LIKE 'game%'", "source_tables": ["label_categories"]}, "evidence": "category names refers to category; start with the word game refers to category like 'game%';"}
{"sample_id": 1169, "db_id": "talkingdata", "final": {"question": "Provide the number of events participated by the device users at coordinates of (80,37).", "sql": "SELECT COUNT(event_id) FROM events WHERE longitude = 80 AND latitude = 37", "source_tables": ["events"]}, "evidence": "coordinates of (80,37) refers to longitude = 80 and latitude = 37;"}
{"sample_id": 1170, "db_id": "talkingdata", "final": {"question": "List down the labels' IDs and categories of the app ID \"5758400314709850000\".", "sql": "SELECT T1.label_id, T2.category FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id WHERE T1.app_id = 5758400314709850000", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1171, "db_id": "talkingdata", "final": {"question": "List down the app IDs under the category of game-Rowing .", "sql": "SELECT T2.app_id FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'game-Rowing'", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1172, "db_id": "talkingdata", "final": {"question": "What are the label IDs and app IDs of the Chinese Classical Mythology category?", "sql": "SELECT T1.label_id, T2.app_id FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'Chinese Classical Mythology'", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1173, "db_id": "talkingdata", "final": {"question": "Describe the number of app IDs and location of the event ID \"79641\".", "sql": "SELECT COUNT(T1.app_id), T2.longitude, T2.latitude FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE T1.event_id = 79641 GROUP BY T2.longitude, T2.latitude", "source_tables": ["events", "app_events"]}, "evidence": "location = longitude, latitude;"}
{"sample_id": 1174, "db_id": "talkingdata", "final": {"question": "Provide the locations and times of the events of app ID \"8715964299802120000\".", "sql": "SELECT T1.longitude, T1.latitude, T1.timestamp FROM events AS T1 INNER JOIN app_events AS T2 ON T1.event_id = T2.event_id WHERE T2.app_id = 8715964299802120000", "source_tables": ["events", "app_events"]}, "evidence": "locations = longitude, latitude; times of the events refers to timestamp;"}
{"sample_id": 1175, "db_id": "talkingdata", "final": {"question": "How many OPPO users participated in events which were held around 12 AM on 1st May,2016?", "sql": "SELECT COUNT(T1.device_id) FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'OPPO' AND STRFTIME('%Y-%m-%d', T1.'timestamp') = '2016-05-01'", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "OPPO refers to phone_brand = 'OPPO'; around 12 AM on 1st May, 2016 refers to timestamp is '2016-05-01'"}
{"sample_id": 1176, "db_id": "talkingdata", "final": {"question": "What is the ratio of male and female users of vivo X5pro model?", "sql": "SELECT SUM(IIF(T1.gender = 'M', 1, 0)) / SUM(IIF(T1.gender = 'F', 1, 0)) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo' AND T2.device_model = 'X5Pro'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "ratio = DIVIDE(SUM(gender = 'M' WHERE device_model = 'X5Pro'), SUM(gender = 'F' WHERE device_model = 'X5Pro')); male refers to gender = 'M'; female refers to gender = 'F'; vivo X5pro model refers to phone_brand = 'vivo' AND device_model = 'X5Pro';"}
{"sample_id": 1177, "db_id": "talkingdata", "final": {"question": "How many females use ZUK Z1 phones in the age group under 23?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'F' AND T2.device_model = 'Z1' AND T1.'group' = 'F23-' AND T2.phone_brand = 'ZUK'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "females refers to gender = 'F'; ZUK Z1 refers to phone_brand = 'ZUK' AND device_model = 'Z1'; under 23 refers to `group` = 'F23-' ;"}
{"sample_id": 1178, "db_id": "talkingdata", "final": {"question": "List the phone brands and models of the users under 10 years of age.", "sql": "SELECT T2.phone_brand, T2.device_model FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age < 10", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "models refers to device_model; under 10 years of age refers to age < 10;"}
{"sample_id": 1179, "db_id": "talkingdata", "final": {"question": "Among the HTC users, calculate the percentage of female users who are over 80.", "sql": "SELECT SUM(IIF(T1.gender = 'F' AND T1.age > 80, 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'HTC'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "HTC refers to phone_brand = 'HTC'; percentage = DIVIDE(SUM(gender = 'F' AND age > 80), COUNT(device_id)); female refers to gender = 'F'; over 80 refers to age > 80"}
{"sample_id": 1180, "db_id": "talkingdata", "final": {"question": "Which phone brand and model was used for event ID \"6701\"?", "sql": "SELECT T2.phone_brand, T2.device_model FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.event_id = 6701", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "model refers to device_model;"}
{"sample_id": 1181, "db_id": "talkingdata", "final": {"question": "Between device ID of \"-9215352913819630000\" and \"-9222956879900150000\", mention the age and gender of device user who participated more events.", "sql": "SELECT T.age, T.gender FROM ( SELECT T2.age, T2.gender, COUNT(T1.device_id) AS num FROM events AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T1.device_id BETWEEN -9215352913819630000 AND -9222956879900150000 GROUP BY T2.age, T2.gender ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["events", "gender_age"]}, "evidence": "more events refers to MAX(COUNT(event_id));"}
{"sample_id": 1182, "db_id": "talkingdata", "final": {"question": "List out the time of the event id 12.", "sql": "SELECT timestamp FROM events WHERE event_id = 12", "source_tables": ["events"]}, "evidence": "time refers to timestamp;"}
{"sample_id": 1183, "db_id": "talkingdata", "final": {"question": "How many active users are there in the event?", "sql": "SELECT COUNT(app_id) FROM app_events WHERE is_active = 1", "source_tables": ["app_events"]}, "evidence": "active refers to is_active = 1;"}
{"sample_id": 1184, "db_id": "talkingdata", "final": {"question": "How many devices belong to model \"A51\"?", "sql": "SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE device_model = 'A51'", "source_tables": ["phone_brand_device_model2"]}, "evidence": "model refers to device_model; device_model = 'A51';"}
{"sample_id": 1185, "db_id": "talkingdata", "final": {"question": "State the gender of users who use the device \"-9222956879900150000\".", "sql": "SELECT gender FROM gender_age WHERE device_id = -9222956879900150000", "source_tables": ["gender_age"]}, "evidence": "device refers to device_id; device_id = -9222956879900150000;"}
{"sample_id": 1186, "db_id": "talkingdata", "final": {"question": "How many labels belong to the game-card category?", "sql": "SELECT COUNT(label_id) FROM label_categories WHERE category = 'game-card'", "source_tables": ["label_categories"]}, "evidence": "labels refers to label_id;"}
{"sample_id": 1187, "db_id": "talkingdata", "final": {"question": "What is the age group of users who use phone brand of vivo?", "sql": "SELECT T1.'group' FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "age group refers to group;"}
{"sample_id": 1188, "db_id": "talkingdata", "final": {"question": "How many users who are under 30 years old use device model of Galaxy Note 2?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Galaxy Note 2' AND T1.age < 30", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "under 30 refers to age < 30;"}
{"sample_id": 1189, "db_id": "talkingdata", "final": {"question": "Among the users who use OPPO, calculate the percentage of those who are under 50 years old.", "sql": "SELECT SUM(IIF(T1.age < 50, 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'OPPO'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "OPPO refers to phone_brand = 'OPPO'; percentage = MULTIPLY(DIVIDE(SUM(age < 50), COUNT(device_id)), 1.0); under 50 years old refers to age < 50;"}
{"sample_id": 1190, "db_id": "talkingdata", "final": {"question": "What is the average age of the users who use model device of R7?", "sql": "SELECT SUM(T1.age) / COUNT(T1.device_id) AS avg FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'R7'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "average age = AVG(age);"}
{"sample_id": 1191, "db_id": "talkingdata", "final": {"question": "What is the category of the label that represented the behavior category of app id 5902120154267990000?", "sql": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = 5902120154267990000", "source_tables": ["label_categories", "app_labels"]}, "evidence": "label that represented the behavior category refers to label_id;"}
{"sample_id": 1192, "db_id": "talkingdata", "final": {"question": "Mention the group of age of users who use phone brand of LG.", "sql": "SELECT T1.'group' FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'LG'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "group of age refers to group;"}
{"sample_id": 1193, "db_id": "talkingdata", "final": {"question": "State the category of the label that represented the behavior category of app id 4955831798976240000.", "sql": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = 4955831798976240000", "source_tables": ["label_categories", "app_labels"]}, "evidence": "label that represented the behavior category refers to label_id;"}
{"sample_id": 1194, "db_id": "talkingdata", "final": {"question": "How many female users use device model of MI 3?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'F' AND T2.device_model = 'MI 3'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "female refers to gender = 'F';"}
{"sample_id": 1195, "db_id": "talkingdata", "final": {"question": "Among the male users, how many users use device model of Desire 820?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Desire 820' AND T1.gender = 'M'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "male refers to gender = 'M';"}
{"sample_id": 1196, "db_id": "talkingdata", "final": {"question": "Among the users who are above 20, how many users use device model of ELIFE E7 Mini?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'ELIFE E7 Mini' AND T1.age > 20", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "above 20 refers to age > 20;"}
{"sample_id": 1197, "db_id": "talkingdata", "final": {"question": "State the number of users who are under 50 and above 20 use device model of Galaxy Premier.", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age BETWEEN 20 AND 50 AND T2.device_model = 'Galaxy Premier'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "under 50 and above 20 refers to age BTWEEEN 20 AND 50;"}
{"sample_id": 1198, "db_id": "talkingdata", "final": {"question": "Give the number of male users who use phone branded HTC.", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'M' AND T2.phone_brand = 'HTC'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "male refers to gender = 'M';"}
{"sample_id": 1199, "db_id": "talkingdata", "final": {"question": "How many users who are between 20 and 60 use phone brand of TCL?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age BETWEEN 20 AND 60 AND T2.phone_brand = 'TCL'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": ""}
{"sample_id": 1200, "db_id": "talkingdata", "final": {"question": "Among the users who use SUGAR, calculate the percentage of those who are above 20 years old.", "sql": "SELECT SUM(IIF(T1.age > 20, 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'SUGAR'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "SUGAR refers to phone_brand = 'SUGAR'; percentage = MULTIPLY(DIVIDE(SUM(age > 20), COUNT(device_id)) 1.0); above 20 years old refers to age > 20;"}
{"sample_id": 1201, "db_id": "talkingdata", "final": {"question": "Indicate the location of all the events that occurred on April 30, 2016.", "sql": "SELECT longitude, latitude FROM events WHERE date(timestamp) = '2016-04-30'", "source_tables": ["events"]}, "evidence": "location = longitude, latitude; on April 30, 2016 refers timestamp BETWEEN '2016-04-30 00:00:00' AND '2016-04-30 23:59:59';"}
{"sample_id": 1202, "db_id": "talkingdata", "final": {"question": "How many different models does the HTC brand have?", "sql": "SELECT COUNT(device_model) FROM phone_brand_device_model2 WHERE phone_brand = 'HTC'", "source_tables": ["phone_brand_device_model2"]}, "evidence": "models refers to device_model; HTC brand refers to phone_brand = 'HTC';"}
{"sample_id": 1313, "db_id": "law_episode", "final": {"question": "What was the rating of the episodes that Jace Alexander worked on?", "sql": "SELECT T1.rating FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T3.name = 'Jace Alexander'", "source_tables": ["episode", "person", "credit"]}, "evidence": ""}
{"sample_id": 1314, "db_id": "law_episode", "final": {"question": "What are the names of all the people who worked on episode 19 of season 9?", "sql": "SELECT T3.name FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.episode = 19 AND T1.season = 9", "source_tables": ["episode", "person", "credit"]}, "evidence": ""}
{"sample_id": 1315, "db_id": "law_episode", "final": {"question": "What is the average star rating of the episodes Jim Bracchitta has worked on?", "sql": "SELECT CAST(SUM(T3.stars) AS REAL) / COUNT(T2.episode_id) FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.person_id = T2.person_id INNER JOIN Vote AS T3 ON T2.episode_id = T3.episode_id WHERE T3.stars = 1 AND T1.name = 'Jim Bracchitta'", "source_tables": ["vote", "person", "credit"]}, "evidence": "average star rating = divide(sum(stars), count(episode_id)) where name = 'Jim Bracchitta'"}
{"sample_id": 1316, "db_id": "law_episode", "final": {"question": "What percentage of people have worked on the True North episode as additional crew?", "sql": "SELECT CAST(SUM(CASE WHEN T2.role = 'Additional Crew' THEN 1 ELSE 0 END) AS REAL ) * 100 / COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'True North'", "source_tables": ["episode", "credit"]}, "evidence": "the True North episode refers to title = 'True North'; additional crew refers to role = 'Additional Crew'; percentage = divide(count(episode_id where role = 'Additional Crew'), count(episode_id)) * 100% where title = 'True North'"}
{"sample_id": 1317, "db_id": "law_episode", "final": {"question": "Write down the title, summary, and air date of the episode that garnered 72 10-star votes.", "sql": "SELECT T2.title, T2.summary, T2.air_date FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.stars = 10 AND T1.votes = 72", "source_tables": ["vote", "episode"]}, "evidence": "72 10-star votes refers to stars = 10 and votes = 72"}
{"sample_id": 1318, "db_id": "law_episode", "final": {"question": "How many 6-star votes did episode 12 get? Please include the air date and rating.", "sql": "SELECT T2.air_date, T2.rating FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.stars = 6 AND T2.episode = 12", "source_tables": ["vote", "episode"]}, "evidence": "6-star vote refers to stars = 6"}
{"sample_id": 1319, "db_id": "law_episode", "final": {"question": "Who is the winner of the Best Television Episode award for the Edgar category in 2000? Include his or her name and role.", "sql": "SELECT T1.name, T2.role FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.year = 2000 AND T2.award_category = 'Edgar' AND T2.award = 'Best Television Episode'", "source_tables": ["person", "award"]}, "evidence": "the Best Television Episode award refers to award = 'Best Television Episode'; the Edgar category refers to award_category = 'Edgar'; in 2000 refers to year = 2000"}
{"sample_id": 1320, "db_id": "law_episode", "final": {"question": "Write down the organization, year, award, and award category in which Rene Balcer is the winner.", "sql": "SELECT T2.organization, T2.year, T2.award, T2.award_category FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T1.name = 'Rene Balcer' AND T2.result = 'Winner'", "source_tables": ["person", "award"]}, "evidence": "Rene Balcer refers to name = 'Rene Balcer'; the winner refers to result = 'Winner'"}
{"sample_id": 1321, "db_id": "law_episode", "final": {"question": "Give me the years and episode IDs in which Constantine Makris was the winner of the Television Silver Gavel Award at the American Bar Association Silver Gavel Awards for Media and the Arts for two consecutive years.", "sql": "SELECT t3.years, t3.episode_id FROM ( SELECT DISTINCT T2.year AS years, T2.episode_id, row_number() OVER (PARTITION BY T2.episode_id ORDER BY T2.year) AS rm FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.award = 'Television' AND T2.award_category = 'Silver Gavel Award' AND T1.name = 'Constantine Makris' AND T2.result = 'Winner' AND T2.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' ) AS T3 GROUP BY t3.episode_id HAVING COUNT(t3.years - t3.rm) >= 2", "source_tables": ["person", "award"]}, "evidence": "the winner refers to result = 'Winner'; the Television refers to award = 'Television'; Silver Gavel Award refers to award_category = 'Silver Gavel Award'; the American Bar Association Silver Gavel Awards for Media and the Arts refers to organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'"}
{"sample_id": 1322, "db_id": "law_episode", "final": {"question": "Who was the Law and Order series writer who also won the Television Silver Gavel Award at the American Bar Association Silver Gavel Awards for Media and the Arts for two consecutive years?", "sql": "SELECT t3.name FROM ( SELECT DISTINCT T2.year AS years, T1.name, row_number() OVER (PARTITION BY T1.name ORDER BY T2.year) AS rm FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.award = 'Television' AND T2.award_category = 'Silver Gavel Award' AND T2.series = 'Law and Order' AND T2.result = 'Winner' AND T2.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' ) AS T3 GROUP BY t3.name HAVING COUNT(t3.years - t3.rm) >= 2", "source_tables": ["person", "award"]}, "evidence": "who refers to name; writer refers to role = 'writer'; won refers to result = 'Winner'; the Television refers to award = 'Television'; Silver Gavel Award refers to award_category = 'Silver Gavel Award'; the American Bar Association Silver Gavel Awards for Media and the Arts refers to organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'"}
{"sample_id": 1323, "db_id": "law_episode", "final": {"question": "How many times was episode 20 of the Law and Order series nominated for the Primetime Emmy Awards in 1999?", "sql": "SELECT COUNT(T2.award_id) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.year = 1999 AND T2.result = 'Nominee' AND T1.episode = 20 AND T2.organization = 'Primetime Emmy Awards' AND T1.series = 'Law and Order'", "source_tables": ["episode", "award"]}, "evidence": "nominated refers to result = 'nominee'; the Law and Order series refers to series = 'Law and Order'; the Primetime Emmy Awards refers to organization = 'Primetime Emmy Awards'; in 1999 refers to year = 1999"}
{"sample_id": 1324, "db_id": "law_episode", "final": {"question": "On what episode did Julia Roberts win the \"Outstanding Guest Actress in a Drama Series\" award during the 1999 Primetime Emmy Awards? Tell me her role.", "sql": "SELECT T3.episode_id, T2.role FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id INNER JOIN Episode AS T3 ON T2.episode_id = T3.episode_id WHERE T2.year = 1999 AND T2.award = 'Outstanding Guest Actress in a Drama Series' AND T2.organization = 'Primetime Emmy Awards' AND T1.name = 'Julia Roberts' AND T2.result = 'Nominee'", "source_tables": ["episode", "person", "award"]}, "evidence": "win refers to result = 'Winner'; the \"Outstanding Guest Actress in a Drama Series\" award refers to award = 'Outstanding Guest Actress in a Drama Series'; the 1999 refers to year = 1999; Primetime Emmy Awards refers to organization = 'Primetime Emmy Awards'"}
{"sample_id": 1325, "db_id": "law_episode", "final": {"question": "List the titles and air dates of episodes that were produced by Billy Fox.", "sql": "SELECT T1.title, T1.air_date FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T2.category = 'Produced by' AND T2.role = 'producer' AND T3.name = 'Billy Fox'", "source_tables": ["episode", "person", "credit"]}, "evidence": "produced refers to role = 'producer'"}
{"sample_id": 1326, "db_id": "law_episode", "final": {"question": "Among the American casts, how many were uncredited on episode ID tt0629228?", "sql": "SELECT COUNT(T1.person_id) FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.episode_id = 'tt0629228' AND T1.category = 'Cast' AND T1.credited = 'false' AND T2.birth_country = 'USA'", "source_tables": ["person", "credit"]}, "evidence": "American refers to birth_country = 'USA'; cast refers to category = 'Cast'; uncredited refers to credited = ''"}
{"sample_id": 1327, "db_id": "law_episode", "final": {"question": "What was the role of Jason Kuschner in episode 9?", "sql": "SELECT T1.role FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE T3.episode = 9 AND T2.name = 'Jason Kuschner'", "source_tables": ["episode", "person", "credit"]}, "evidence": ""}
{"sample_id": 1328, "db_id": "law_episode", "final": {"question": "Who played the role of the \"president of NBC West Coast\" in the first episode?", "sql": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE T3.episode = 1 AND T1.role = 'president of NBC West Coast'", "source_tables": ["episode", "person", "credit"]}, "evidence": "who refers to name; the role of the \"president of NBC West Coast\" refers to role = 'president of NBC West Coast'; the first episode refers to episode = 1"}
{"sample_id": 1329, "db_id": "law_episode", "final": {"question": "List down the titles of the top 3 episodes, from highest to lowest, in terms of their weighted stars.", "sql": "SELECT T2.title FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.stars BETWEEN 1 AND 10 GROUP BY T2.title ORDER BY CAST(SUM(T1.stars * T1.percent) AS REAL) / 100 DESC LIMIT 3", "source_tables": ["vote", "episode"]}, "evidence": "weighted stars = divide(sum(stars, percent), 100)"}
{"sample_id": 1330, "db_id": "law_episode", "final": {"question": "What is the ratio of American casts on episode 2 of the series? Please include their roles.", "sql": "SELECT CAST(SUM(CASE WHEN T2.category = 'Cast' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.category), T1.role FROM Award AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Episode AS T3 ON T2.episode_id = T3.episode_id INNER JOIN Person AS T4 ON T2.person_id = T4.person_id WHERE T3.episode = 2 AND T4.birth_country = 'USA'", "source_tables": ["episode", "person", "credit", "award"]}, "evidence": "American refers to birth_country = 'USA'; cast refers to category = 'Cast'; ratio = divide(count(person_id where birth_country = 'USA'), total(category)) where category = 'Cast'"}
{"sample_id": 1331, "db_id": "law_episode", "final": {"question": "How many people from Canada are nominated for an award?", "sql": "SELECT COUNT(T1.person_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T1.birth_country = 'Canada'", "source_tables": ["person", "award"]}, "evidence": "from Canada refers to birth_country = Canada; nominated refers to award is NOT NULL"}
{"sample_id": 1332, "db_id": "law_episode", "final": {"question": "How many episodes are credited to Jerry Orbach?", "sql": "SELECT COUNT(T2.person_id) FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'Jerry Orbach'", "source_tables": ["person", "credit"]}, "evidence": ""}
{"sample_id": 1333, "db_id": "law_episode", "final": {"question": "List out all the credit names for episode 9.", "sql": "SELECT T3.name FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.episode = 9", "source_tables": ["episode", "person", "credit"]}, "evidence": "credit name refers to name"}
{"sample_id": 1334, "db_id": "law_episode", "final": {"question": "List out all award titles nominated for episode 20.", "sql": "SELECT T2.award FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T1.episode = 20 AND T2.result IN ('Winner', 'Nominee')", "source_tables": ["episode", "award"]}, "evidence": "award title refers to title; nominated refers to result = 'Winner' or result = 'Nominee'"}
{"sample_id": 1470, "db_id": "synthea", "final": {"question": "From 1/9/2011 to 8/29/2012, how many German patients have their outpatient encounters?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.ethnicity = 'german' AND T2.DATE BETWEEN '2011-01-09' AND '2012-08-29' AND T2.DESCRIPTION = 'Outpatient Encounter'", "source_tables": ["encounters", "patients"]}, "evidence": "From 1/9/2011 to 8/29/2012 refers to encounters.DATE between '2011-09-01' and '2012-08-29'; German patients refers to ethnicity = 'german'; outpatient encounters refers to encounters.DESCRIPTION = 'Outpatient Encounter';"}
{"sample_id": 1471, "db_id": "synthea", "final": {"question": "What is the social security number and address of the patient who encountered viral sinusitis symptoms on 6/13/2008?", "sql": "SELECT T1.ssn, T1.address FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T2.DATE = '2008-06-13' AND T2.REASONDESCRIPTION = 'Viral sinusitis (disorder)' AND T2.DESCRIPTION = 'Encounter for symptom'", "source_tables": ["encounters", "patients"]}, "evidence": "social security number refers to ssn; encountered viral sinusitis refers to encounters.REASONDESCRIPTION = 'Viral sinusitis (disorder)'; on 6/13/2008 refers to encounters.DATE = '2008-06-13';"}
{"sample_id": 1472, "db_id": "synthea", "final": {"question": "Give me the reason, name of the drug, and duration of medication under encounter ID 23c293ec-dbae-4a22-896e-f12cf3c8bac3. Tell me if the patient is still alive.", "sql": "SELECT T2.REASONDESCRIPTION, T2.DESCRIPTION , strftime('%J', T2.STOP) - strftime('%J', T2.START) AS days , CASE WHEN T1.deathdate IS NULL THEN 'alive' ELSE 'dead' END FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.ENCOUNTER = '23c293ec-dbae-4a22-896e-f12cf3c8bac3'", "source_tables": ["medications", "patients"]}, "evidence": "reason refers to medications.REASONDESCRIPTION; name of the drug refers to medications.DESCRIPTION; duration of medication = SUBTRACT(julianday(medications.STOP, julianday(medications.START))); ecounter ID refers to encounters.ID; encounters.ID = '23c293ec-dbae-4a22-896e-f12cf3c8bac3'; if patients.deathdate is null then the patient is alive; if patients.deathdate is not null then the patient is not alive;"}
{"sample_id": 1473, "db_id": "synthea", "final": {"question": "How many patients with shellfish allergies died when they were under 12 years old? Please give their full names.", "sql": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Shellfish allergy' AND CAST((strftime('%J', T1.deathdate) - strftime('%J', T1.birthdate)) AS REAL) / 365 < 12", "source_tables": ["allergies", "patients"]}, "evidence": "shellfish allergies refers to allergies.DESCRIPTION = 'Shellfish allergy'; died under 12 years old = DIVIDE(SUBTRACT(julianday(patients.deathdate), julianday(patients.birthdate)), 365) < 12; full names = first, last;"}
{"sample_id": 1474, "db_id": "synthea", "final": {"question": "How long was Mr. Major D'Amore prescribed with Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin]?", "sql": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS days FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = ' Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin]' AND T1.first = 'Major' AND T1.last = 'D''Amore'", "source_tables": ["medications", "patients"]}, "evidence": "how long = SUBTRACT(julianday(medications.STOP, julianday(medications.START))); Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin] refers to medications.DESCRIPTION = 'Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin]';"}
{"sample_id": 1475, "db_id": "synthea", "final": {"question": "How many types of medication have been prescribed to Mr. Major D'Amore since his visit to the hospital?", "sql": "SELECT COUNT(DISTINCT T2.DESCRIPTION) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Major' AND T1.last = 'D''Amore'", "source_tables": ["medications", "patients"]}, "evidence": "types of medications refers to medications.DESCRIPTION;"}
{"sample_id": 1476, "db_id": "synthea", "final": {"question": "List out all the observation information collected for the patient named Bella Rolfson.", "sql": "SELECT DISTINCT T2.DESCRIPTION, T2.VALUE, T2.UNITS FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Bella' AND T1.last = 'Rolfson'", "source_tables": ["patients", "observations"]}, "evidence": "observation information refers to observations.DESCRIPTION AND observations.VALUE AND observations.UNITS;"}
{"sample_id": 1477, "db_id": "synthea", "final": {"question": "List out patient names with calcium deficiency.", "sql": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Calcium' AND T2.VALUE < 8.6", "source_tables": ["patients", "observations"]}, "evidence": "patient names = first, last; calcium deficiency refers to observations.DESCRIPTION = 'Calcium' and observations.VALUE < 8.6;"}
{"sample_id": 1478, "db_id": "synthea", "final": {"question": "List out 5 most common conditions for underweight patient.", "sql": "SELECT DISTINCT T2.DESCRIPTION, T2.VALUE, T2.UNITS FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Body Mass Index' GROUP BY T2.VALUE ORDER BY COUNT(T2.VALUE) LIMIT 5", "source_tables": ["patients", "observations"]}, "evidence": "most common condition refers to MAX(COUNT(conditions.DESCRIPTION)); underweight patient refers to MIN(observations.VALUE WHERE observations.DESCRIPTION = 'Body Mass Index');"}
{"sample_id": 1479, "db_id": "synthea", "final": {"question": "How many mothers have taken immunization during prenatal visit?", "sql": "SELECT COUNT(DISTINCT T2.PATIENT) FROM encounters AS T1 INNER JOIN immunizations AS T2 ON T1.PATIENT = T2.PATIENT WHERE T1.REASONDESCRIPTION = 'Normal pregnancy' AND T1.DATE = T2.DATE", "source_tables": ["encounters", "immunizations"]}, "evidence": "expecting mothers can be attributed to encounters.REASONDESCRIPTION = 'Normal pregnancy';"}
{"sample_id": 1480, "db_id": "synthea", "final": {"question": "What care plans have been received by Mrs. Elly Koss during year 1970?", "sql": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND strftime('%Y', T2.START) = '2013'", "source_tables": ["patients", "careplans"]}, "evidence": "during year 1970 refers to substr(careplans.START, 1, 4) = '1970' and substr(careplans.STOP, 1, 4) = '1970';"}
{"sample_id": 1481, "db_id": "synthea", "final": {"question": "What is the care plan, procedure, medication and the patient's full name for encounter 6f2e3935-b203-493e-a9c0-f23e847b9798?", "sql": "SELECT DISTINCT T3.DESCRIPTION, T4.DESCRIPTION, T5.DESCRIPTION, T1.first, T1.last FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT INNER JOIN careplans AS T3 ON T1.patient = T3.PATIENT INNER JOIN procedures AS T4 ON T1.patient = T4.PATIENT INNER JOIN medications AS T5 ON T1.patient = T5.PATIENT WHERE T2.ID = '6f2e3935-b203-493e-a9c0-f23e847b9798'", "source_tables": ["patients", "encounters", "careplans", "medications", "procedures"]}, "evidence": "car plan refers to careplans.DESCRIPTION; procedure refers to procedures.DESCRIPTION; medication refers to medications.DESCRIPTION; full name = first, last; encounter refers to encounters.ID; encounters.ID = '6f2e3935-b203-493e-a9c0-f23e847b9798';"}
{"sample_id": 1482, "db_id": "synthea", "final": {"question": "How many male patients are diagnosed with hypertension as compared to female patients?", "sql": "SELECT COUNT(DISTINCT CASE WHEN T2.gender = 'M' THEN T2.patient END) AS Male , COUNT(DISTINCT CASE WHEN T2.gender = 'F' THEN T2.patient END) AS Female FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Hypertension'", "source_tables": ["patients", "conditions"]}, "evidence": "male refers to gender = 'M'; diagnosed with hypertension refers to conditions.DESCRIPTION = 'Hypertension'; female refers to gender = 'F'; number of male patients with hypertension = count(patient WHERE gender = 'M' AND conditions.DESCRIPTION = 'Hypertension'); number of female patients with hypertension = count(patient WHERE gender = 'F' AND conditions.DESCRIPTION = 'Hypertension');"}
{"sample_id": 1483, "db_id": "synthea", "final": {"question": "How many unmarried women were checked for normal pregnancy?", "sql": "SELECT COUNT(DISTINCT T2.patient) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Normal pregnancy' AND T2.gender = 'F' AND T2.marital = 'S'", "source_tables": ["patients", "conditions"]}, "evidence": "unmarried refers to marital = 'S'; women refers to gender = 'F'; normal pregnancy refers to conditions.DESCRIPTION = 'normal pregnancy';"}
{"sample_id": 1484, "db_id": "synthea", "final": {"question": "List out the procedure and medicine prescribed for drug overdose patients.", "sql": "SELECT DISTINCT T2.DESCRIPTION, T3.DESCRIPTION FROM encounters AS T1 INNER JOIN procedures AS T2 ON T1.PATIENT = T2.PATIENT INNER JOIN medications AS T3 ON T1.PATIENT = T3.PATIENT WHERE T1.REASONDESCRIPTION = 'Drug overdose'", "source_tables": ["medications", "encounters", "procedures"]}, "evidence": "procedure refers to procedures.DESCRIPTION; medicine prescribed refers to medications.DESCRIPTION; drug overdose refers to encounters.REASONDESCRIPTION = 'Drug overdose';"}
{"sample_id": 1485, "db_id": "synthea", "final": {"question": "What is the average body mass index for patients with higher total cholesterol?", "sql": "SELECT SUM(T1.VALUE) / COUNT(T1.PATIENT) FROM observations AS T1 INNER JOIN ( SELECT DISTINCT PATIENT FROM observations WHERE DESCRIPTION = 'Total Cholesterol' AND VALUE > 200 ) AS T2 ON T1.PATIENT = T2.PATIENT WHERE T1.DESCRIPTION = 'Body Mass Index'", "source_tables": ["observations"]}, "evidence": "average body mass index = DIVIDE(SUM(observations.VALUE), COUNT(PATIENT) WHERE observations.DESCRIPTION = 'Body Mass Index'); body mass index refers to observations.DESCRIPTION = 'Body Mass Index'; higher total cholesterol refers to observations.DESCRIPTION = 'Total Cholesterol' and observations.VALUE > = 200;"}
{"sample_id": 1486, "db_id": "synthea", "final": {"question": "What is the difference between average glucose reading for patients in the 20s and 50s?", "sql": "SELECT SUM(CASE WHEN ROUND((strftime('%J', T2.DATE) - strftime('%J', T1.birthdate)) / 365) BETWEEN 20 AND 30 THEN T2.VALUE ELSE 0 END) / COUNT(CASE WHEN ROUND((strftime('%J', T2.DATE) - strftime('%J', T1.birthdate)) / 365) BETWEEN 20 AND 30 THEN T2.PATIENT END) - SUM(CASE WHEN ROUND((strftime('%J', T2.DATE) - strftime('%J', T1.birthdate)) / 365) BETWEEN 50 AND 60 THEN T2.VALUE ELSE 0 END) / COUNT(CASE WHEN ROUND((strftime('%J', T2.DATE) - strftime('%J', T1.birthdate)) / 365) BETWEEN 50 AND 60 THEN T2.PATIENT END) AS difference FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Glucose'", "source_tables": ["patients", "observations"]}, "evidence": "sum(case when t2.DATE-t1.birthdate between 20 and 29 then t2.VALUE else 0 end)/count(case when t2.DATE-t1.birthdate between 20 and 29 then t2.PATIENT else null end)-sum(case when t2.DATE-t1.birthdate between 50 and 59 then t2.VALUE else 0 end)/count(case when t2.DATE-t1.birthdate between 50 and 59 then t2.PATIENT else null end)"}
{"sample_id": 1487, "db_id": "synthea", "final": {"question": "What is the percentage of the most common conditions for patients age 60 and above?", "sql": "SELECT CAST(SUM(CASE WHEN T5.DESCRIPTION = T3.DESCRIPTION THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.patient) FROM ( SELECT T2.DESCRIPTION, T1.patient FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE ROUND((strftime('%J', T2.START) - strftime('%J', T1.birthdate)) / 365) > 60 GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1 ) AS T3 INNER JOIN patients AS T4 ON T3.patient = T4.patient INNER JOIN conditions AS T5 ON T4.patient = T5.PATIENT WHERE ROUND((strftime('%J', T5.START) - strftime('%J', T4.birthdate)) / 365) > 60", "source_tables": ["patients", "conditions"]}, "evidence": "most common condition refers to MAX(COUNT(conditions.DESCRIPTION)); age 60 and above refers to SUBTRACT(conditions.START, birthdate) > 60; percentage = MULTIPLY(DIVIDE(SUM(patients.patient WHERE MAX(COUNT(conditions.DESCRIPTION)) AND SUBTRACT(conditions.START, birthdate) > 60))), COUNT(patients.patient WHERE MAX(COUNT(conditions.DESCRIPTION)), 10);"}
{"sample_id": 1488, "db_id": "synthea", "final": {"question": "Name the reason Walter Bahringer visited medical professionals in July 2009.", "sql": "SELECT T2.REASONDESCRIPTION FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Walter' AND T1.last = 'Bahringer' AND T2.DATE LIKE '2009-07%'", "source_tables": ["encounters", "patients"]}, "evidence": "reason for visiting medical professionals refers to encounters.REASONDESCRIPTION;\u00a0 in July 2009 refers to\u00a0 substr(encounters.DATE, 1, 7) = '2009-07' ;"}
{"sample_id": 1489, "db_id": "synthea", "final": {"question": "How old was Mr. Stacy Morar at the time of his first emergency room admission due to a drug overdose?", "sql": "SELECT T2.DATE - T1.birthdate AS age FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Stacy' AND T1.last = 'Morar' AND T2.DESCRIPTION = 'Emergency Room Admission' AND T2.REASONDESCRIPTION = 'Drug overdose' ORDER BY T2.DATE LIMIT 1", "source_tables": ["encounters", "patients"]}, "evidence": "how old = SUBTRACT(MIN(encounters.DATE), patients.birthdate); his first emergency room admission refers to MIN(encounters.DATE); drug overdose refers to encounters.REASONDESCRIPTION = 'Drug overdose' ;"}
{"sample_id": 1490, "db_id": "synthea", "final": {"question": "What drug is administered more often to treat child attention deficit disorder?", "sql": "SELECT DESCRIPTION FROM medications WHERE REASONDESCRIPTION = 'Child attention deficit disorder' GROUP BY DESCRIPTION ORDER BY COUNT(DESCRIPTION) DESC LIMIT 1", "source_tables": ["medications"]}, "evidence": "drug that was administered refers to medications.DESCRIPTION; child attention deficit disorder refers to medications.REASONDESCRIPTION = 'Child attention deficit disorder';"}
{"sample_id": 1491, "db_id": "synthea", "final": {"question": "Please include the full name of the patient who received a lung transplant.", "sql": "SELECT T2.first, T2.last FROM procedures AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Transplant of lung (procedure)'", "source_tables": ["patients", "procedures"]}, "evidence": "full name = first, last; lung transplant refers to procedures.DESCRIPTION = 'Transplant of lung (procedure)';"}
{"sample_id": 1492, "db_id": "synthea", "final": {"question": "How many patients on average receive combined chemotherapy and radiation therapy procedures each year?", "sql": "SELECT CAST(COUNT(PATIENT) AS REAL) / COUNT(DISTINCT strftime('%Y', DATE)) FROM procedures WHERE DESCRIPTION = 'Combined chemotherapy and radiation therapy (procedure)'", "source_tables": ["procedures"]}, "evidence": "average = DIVIDE(COUNT(procedures.PATIENT), COUNT(substr(procedures.DATE, 1, 4))); combined chemotherapy and radiation therapy refers to procedures.DESCRIPTION = 'Combined chemotherapy and radiation therapy (procedure)';"}
{"sample_id": 1493, "db_id": "synthea", "final": {"question": "Indicate the time frame and details of the most recent care plan suggested to Jacquelyn Shanahan.", "sql": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS timeFrame , T2.DESCRIPTION FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Jacquelyn' AND T1.last = 'Shanahan' ORDER BY T2.START DESC LIMIT 1", "source_tables": ["patients", "careplans"]}, "evidence": "time frame = SUBTRACT(JULIANDAY(careplans.STOP), JULIANDAY(careplans.START)); details of care plan refers to careplans.DESCRIPTION; most recent care plan refers to MIN(careplans.STAR);"}
{"sample_id": 1494, "db_id": "synthea", "final": {"question": "Identify the allergy period for Isadora Moen and what triggered it.", "sql": "SELECT T2.START, T2.STOP, T2.DESCRIPTION FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Isadora' AND T1.last = 'Moen'", "source_tables": ["allergies", "patients"]}, "evidence": "allergy period = SUBTRACT(allergies.START, allergies.STOP); what triggered the allergy refers to allergies.DESCRIPTION;"}
{"sample_id": 1495, "db_id": "synthea", "final": {"question": "How old was Mrs. Laronda Bernier at the time of her most recent medical encounter?", "sql": "SELECT T2.DATE - T1.birthdate AS age FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Laronda' AND T1.last = 'Bernier' ORDER BY T2.DATE DESC LIMIT 1", "source_tables": ["encounters", "patients"]}, "evidence": "how old = SUBTRACT(MIN(encounters.DATE), patients.birthdate); most recent medical encounter refers to MIN(encounters.DATE);"}
{"sample_id": 1496, "db_id": "synthea", "final": {"question": "What condition forced Mrs. Joye Homenick to seek medical attention in 2017?", "sql": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Joye' AND T1.last = 'Homenick' AND strftime('%Y', T2.START) = '2017'", "source_tables": ["patients", "conditions"]}, "evidence": "condition refers to conditions.DESCRIPTION; in 2017 refers to substr(conditions.START, 1, 4) = '2017';"}
{"sample_id": 1497, "db_id": "synthea", "final": {"question": "When did Mrs. Joye Homenick receive her most recent influenza seasonal vaccine?", "sql": "SELECT T2.DATE FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free' AND T1.first = 'Joye' AND T1.last = 'Homenick' ORDER BY T2.DATE DESC LIMIT 1", "source_tables": ["immunizations", "patients"]}, "evidence": "when a patient received her most recent vaccine refers to MAX(immunications.DATE); influenza seasonal vaccine refers to immunizations.DESCRIPTION = 'Influenza seasonal injectable preservative free';"}
{"sample_id": 1498, "db_id": "synthea", "final": {"question": "How long did Elly Koss have to take Acetaminophen 160 MG?", "sql": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS days FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND last = 'Koss' AND T2.DESCRIPTION = 'Acetaminophen 160 MG'", "source_tables": ["medications", "patients"]}, "evidence": "how long = SUBTRACT(julianday(medications.stop), julianday(medications.START)); Acetaminophen 160 MG refers to medications.DESCRIPTION = 'Acetaminophen 160 MG';"}
{"sample_id": 1499, "db_id": "synthea", "final": {"question": "How many patients sought medical attention due to a second-degree burn? Describe the care plan recommended to them.", "sql": "SELECT COUNT(DISTINCT T2.PATIENT), T2.DESCRIPTION FROM encounters AS T1 INNER JOIN careplans AS T2 ON T1.PATIENT = T2.PATIENT WHERE T2.REASONDESCRIPTION = 'Second degree burn'", "source_tables": ["encounters", "careplans"]}, "evidence": "second-degree burn refers to encounters.REASONDESCRIPTION = 'Second degree burn'; ;"}
{"sample_id": 1500, "db_id": "synthea", "final": {"question": "Among all patients who sought medical attention in 2010 due to contact dermatitis, identify the percentage of females.", "sql": "SELECT CAST(SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.PATIENT) FROM encounters AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE strftime('%Y', T1.DATE) = '2010' AND T1.REASONDESCRIPTION = 'Contact dermatitis'", "source_tables": ["encounters", "patients"]}, "evidence": "in 2010 refers to substr(encounters.DATE, 1, 4) = '2010'; contact dermatitis refers to encounters.REASONDESCRIPTION = 'Contact dermatitis'; percentage = MULTIPLY(DIVIDE(COUNT(encounters.PATIENT WHERE gender = 'F'), count(encounters.PATIENT) WHERE encounters.REASONDESCRIPTION = 'Contact dermatitis'), 1.0) females refers to gender = 'F';"}
{"sample_id": 1501, "db_id": "synthea", "final": {"question": "How many interactions did Lorri Simons have with medical professionals between 2010 and 2017? What percentage of encounters are attributed to prenatal visits?", "sql": "SELECT COUNT(T1.patient) , CAST(SUM(CASE WHEN T2.DESCRIPTION = 'Prenatal visit' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.patient) FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Lorri' AND T1.last = 'Simonis' AND strftime('%Y', T2.DATE) BETWEEN '2010' AND '2017'", "source_tables": ["encounters", "patients"]}, "evidence": "between 2010 and 2017 refers to substr(encounters.DATE, 1, 4) between '2010' and '2017'; percentage = MULTIPLY(DIVIDE(COUNT(encounters.ID WHERE DESCRIPTION = 'Prenatal visit'), count(encounters.ID)), 1.0); prenatal visits refers to encounters.DESCRIPTION = 'Prenatal visit';"}
{"sample_id": 1502, "db_id": "synthea", "final": {"question": "State description of medication taken by Joe Homenick.", "sql": "SELECT T1.DESCRIPTION FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.first = 'Joye' AND T2.last = 'Homenick'", "source_tables": ["medications", "patients"]}, "evidence": "description of medication refers to medications.DESCRIPTION;"}
{"sample_id": 1503, "db_id": "synthea", "final": {"question": "What is the start date of the care plan of the patient whose maiden name is Adams?", "sql": "SELECT DISTINCT T1.START FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.maiden = 'Adams'", "source_tables": ["patients", "careplans"]}, "evidence": "start date of the care plan refers to careplans.START;"}
{"sample_id": 1504, "db_id": "synthea", "final": {"question": "Among the male patients, who has the earliest starting date of the care plan?", "sql": "SELECT T2.first, T2.last FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.gender = 'M' ORDER BY T1.START LIMIT 1", "source_tables": ["patients", "careplans"]}, "evidence": "male patients refers to gender = 'M'; earliest starting date of the care plan refers to MIN(careplans.START);"}
{"sample_id": 1505, "db_id": "synthea", "final": {"question": "What is the percentage of Hispanic patients who stopped their care plan in 2011?", "sql": "SELECT CAST(SUM(CASE WHEN T2.race = 'hispanic' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.PATIENT) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE strftime('%Y', T1.stop) = '2011'", "source_tables": ["patients", "careplans"]}, "evidence": "Hispanic patients refers to ethnicity = 'hispanic'; percentage = MULTIPLY(DIVIDE(COUNT(careplans.PATIENT WHERE ethnicity = 'hispanic'), COUNT(careplans.PATIENT)), 1.0); stopped their care plan in 2011 refers to substr(careplans.stop, 1, 4) = '2011';"}
{"sample_id": 1506, "db_id": "synthea", "final": {"question": "State the description of the reason why Angelo Buckridge needs the care plan.", "sql": "SELECT DISTINCT T1.REASONDESCRIPTION FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.first = 'Angelo' AND T2.last = 'Buckridge'", "source_tables": ["patients", "careplans"]}, "evidence": "description of the reason of the care plan refers to careplans.REASONDESCRIPTION;"}
{"sample_id": 1619, "db_id": "car_retails", "final": {"question": "If Dragon Souveniers, Ltd. aren't satisfied with their order and want to send a complain e-mail, which e-mail address should they send to?", "sql": "SELECT t2.email FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.customerName = 'Dragon Souveniers, Ltd.'", "source_tables": ["employees", "customers"]}, "evidence": "E-mail address belongs to employee; customerName = 'Dragon Souveniers, Ltd.';"}
{"sample_id": 1620, "db_id": "car_retails", "final": {"question": "How many French customers does Gerard Hernandez take care of?", "sql": "SELECT COUNT(t1.customerNumber) FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.country = 'France' AND t2.firstName = 'Gerard' AND t2.lastName = 'Hernandez'", "source_tables": ["employees", "customers"]}, "evidence": "Gerakd Hermandez is an employee; French customer refers to customer from France where country = 'France'"}
{"sample_id": 1621, "db_id": "car_retails", "final": {"question": "What was the latest order that customer No.114 made? Give the name of the product.", "sql": "SELECT t3.productName FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN products AS t3 ON t1.productCode = t3.productCode WHERE t2.customerNumber = '114' ORDER BY t2.orderDate DESC LIMIT 1", "source_tables": ["orderdetails", "orders", "products"]}, "evidence": "The latest refers to the most recent orderDate;"}
{"sample_id": 1622, "db_id": "car_retails", "final": {"question": "For the product No. S18_3482 in the Order No.10108, how much discount did the customer have?", "sql": "SELECT (t1.MSRP - t2.priceEach) / t1.MSRP FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode WHERE t1.productCode = 'S18_3482' AND t2.orderNumber = '10108'", "source_tables": ["orderdetails", "products"]}, "evidence": "DIVIDE(SUBTRACT(MSRP, priceEach)), MSRP); product No. S18_3482 refers to productCode = 'S18_3482'"}
{"sample_id": 1623, "db_id": "car_retails", "final": {"question": "To whom does Steve Patterson report? Please give his or her full name.", "sql": "SELECT t2.firstName, t2.lastName FROM employees AS t1 INNER JOIN employees AS t2 ON t2.employeeNumber = t1.reportsTo WHERE t1.firstName = 'Steve' AND t1.lastName = 'Patterson'", "source_tables": ["employees"]}, "evidence": "reportsTO' is the leader of the 'employeeNumber';"}
{"sample_id": 1624, "db_id": "car_retails", "final": {"question": "How do I contact the President of the company?", "sql": "SELECT t.email FROM employees t WHERE t.jobTitle = 'President'", "source_tables": ["employees"]}, "evidence": "President refers to the jobTitle;"}
{"sample_id": 1625, "db_id": "car_retails", "final": {"question": "Who is the sales representitive of Muscle Machine Inc? Please give the employee's full name.", "sql": "SELECT t2.firstName, t2.lastName FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.customerName = 'Muscle Machine Inc'", "source_tables": ["employees", "customers"]}, "evidence": "Sales representative refers to jobTitle = 'Sales Rep'; Muscle Machine Inc is name of customer;"}
{"sample_id": 1626, "db_id": "car_retails", "final": {"question": "If I'm from the Muscle Machine Inc, to which e-mail adress should I write a letter if I want to reach the superior of my sales representitive?", "sql": "SELECT t2.email FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.customerName = 'Muscle Machine Inc'", "source_tables": ["employees", "customers"]}, "evidence": "Muscle Machine Inc is name of customer; superior refers to 'reportsTO', who is the leader of the 'employeeNumber'"}
{"sample_id": 1627, "db_id": "car_retails", "final": {"question": "Please list all the customers that have Steve Patterson as their sales representitive.", "sql": "SELECT t1.customerName FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t2.firstName = 'Steve' AND t2.lastName = 'Patterson'", "source_tables": ["employees", "customers"]}, "evidence": "Steve Patterson is an employee;"}
{"sample_id": 1628, "db_id": "car_retails", "final": {"question": "How many customers have an employee who reports to William Patterson as their sales representitive?", "sql": "SELECT COUNT(t1.customerNumber) FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t2.firstName = 'William' AND t2.lastName = 'Patterson'", "source_tables": ["employees", "customers"]}, "evidence": "reportsTO' is the leader of the 'employeeNumber';"}
{"sample_id": 1629, "db_id": "car_retails", "final": {"question": "Please list the phone numbers of the top 3 customers that have the highest credit limit and have Leslie Jennings as their sales representitive.", "sql": "SELECT t1.phone FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t2.firstName = 'Leslie' AND t2.lastName = 'Jennings' ORDER BY t1.creditLimit DESC LIMIT 3", "source_tables": ["employees", "customers"]}, "evidence": ""}
{"sample_id": 1630, "db_id": "car_retails", "final": {"question": "How many sales representitives are based in the offices in the USA?", "sql": "SELECT COUNT(t1.employeeNumber) FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t2.country = 'USA' AND t1.jobTitle = 'Sales Rep'", "source_tables": ["employees", "offices"]}, "evidence": "Sales representative refers to jobTitle = 'Sales Rep'; country = 'USA';"}
{"sample_id": 1631, "db_id": "car_retails", "final": {"question": "Where can I find the office of the President of the company?", "sql": "SELECT t2.addressLine1, t2.addressLine2 FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t1.jobTitle = 'President'", "source_tables": ["employees", "offices"]}, "evidence": "Where can I find the office refers to address, comprising of addressLine1 and addressLine2; President is a jobTitle"}
{"sample_id": 1632, "db_id": "car_retails", "final": {"question": "What's the postal code of the office the VP Sales is at?", "sql": "SELECT t2.postalCode FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t1.jobTitle = 'VP Sales'", "source_tables": ["employees", "offices"]}, "evidence": "VP Sales refers to jobTitle"}
{"sample_id": 1633, "db_id": "car_retails", "final": {"question": "What is the total price of the order made by Cruz & Sons Co. on 2003/3/3?", "sql": "SELECT SUM(t1.priceEach * t1.quantityOrdered) FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber WHERE t3.customerName = 'Cruz & Sons Co.' AND t2.orderDate = '2003-03-03'", "source_tables": ["orderdetails", "orders", "customers"]}, "evidence": "SUM(MULTIPLY(quantityOrdered, priceEach)) where orderDate = '2003-03-03'; customerName = 'Cruz & Sons Co.'"}
{"sample_id": 1634, "db_id": "car_retails", "final": {"question": "Which product did Cruz & Sons Co. order on 2003/3/3?", "sql": "SELECT t4.productName FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber INNER JOIN products AS t4 ON t1.productCode = t4.productCode WHERE t3.customerName = 'Cruz & Sons Co.' AND t2.orderDate = '2003-03-03'", "source_tables": ["orderdetails", "orders", "products", "customers"]}, "evidence": "Cruz & Sons Co. is name of customer; 2003/3/3 refers to orderDate;"}
{"sample_id": 1635, "db_id": "car_retails", "final": {"question": "Which product did Cruz & Sons Co. ask for the biggest amount in a single order?", "sql": "SELECT t4.productName FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber INNER JOIN products AS t4 ON t1.productCode = t4.productCode WHERE t3.customerName = 'Cruz & Sons Co.' ORDER BY t1.priceEach * t1.quantityOrdered DESC LIMIT 1", "source_tables": ["orderdetails", "orders", "products", "customers"]}, "evidence": "Cruz & Sons Co. is name of customer; the biggest amount refers to MAX(quantityOrdered)."}
{"sample_id": 1636, "db_id": "car_retails", "final": {"question": "When were the products ordered by Cruz & Sons Co. on 2003-03-03 shipped?", "sql": "SELECT t1.shippedDate FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.customerName = 'Cruz & Sons Co.' AND t1.orderDate = '2003-03-03'", "source_tables": ["orders", "customers"]}, "evidence": "Cruz & Sons Co. is name of customer; ordered on 2003-03-03 refers to orderDate;"}
{"sample_id": 1637, "db_id": "car_retails", "final": {"question": "What is the amount of customers of 1957 Chevy Pickup by customers in a month?", "sql": "SELECT COUNT(T2.customerNumber) FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE T1.productCode IN ( SELECT productCode FROM products WHERE productName = '1957 Chevy Pickup' )", "source_tables": ["orderdetails", "orders", "products"]}, "evidence": ""}
{"sample_id": 1638, "db_id": "car_retails", "final": {"question": "Name the product from the 'Classic Cars' production line that has the greatest expected profit.", "sql": "SELECT t.productName, t.MSRP - t.buyPrice FROM products AS t WHERE t.productLine = 'Classic Cars' ORDER BY t.MSRP - t.buyPrice DESC LIMIT 1", "source_tables": ["products"]}, "evidence": "The greatest expected profit refers to MAX(SUBTRACT(MSRP, buyPrice);"}
{"sample_id": 1639, "db_id": "car_retails", "final": {"question": "List all the name of customers who have orders that are still processing.", "sql": "SELECT t2.customerName FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.status = 'In Process'", "source_tables": ["orders", "customers"]}, "evidence": "Still processing refers to status = 'In Process';"}
{"sample_id": 1640, "db_id": "car_retails", "final": {"question": "Among all orders shipped, calculate the percentage of orders shipped at least 3 days before the required date.", "sql": "SELECT COUNT(CASE WHEN JULIANDAY(t1.shippeddate) - JULIANDAY(t1.requireddate) > 3 THEN T1.customerNumber ELSE NULL END) FROM orders AS T1 INNER JOIN orderdetails AS T2 ON T1.orderNumber = T2.orderNumber WHERE T1.status = 'Shipped'", "source_tables": ["orderdetails", "orders"]}, "evidence": "Orders shipped refer to status = 'Shipped'; at least 3 days before the required date refers to SUBTRACT(shippedDate, requiredDate)>3; DIVIDE(COUNT(orderNumber where SUBTRACT(shippedDate, requiredDate)>3), (COUNT(orderNumber) as percentage;"}
{"sample_id": 1641, "db_id": "car_retails", "final": {"question": "Find the customer who made the highest payment in 2005.", "sql": "SELECT t2.customerName FROM payments AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE STRFTIME('%Y', t1.paymentDate) = '2005' GROUP BY t2.customerNumber, t2.customerName ORDER BY SUM(t1.amount) DESC LIMIT 1", "source_tables": ["payments", "customers"]}, "evidence": "The highest payment refers to max(amount); 2005 refers to year(paymentDate);"}
{"sample_id": 1642, "db_id": "car_retails", "final": {"question": "Which is the most ordered quantity product? What is its expected profit margin per piece?", "sql": "SELECT productName, MSRP - buyPrice FROM products WHERE productCode = ( SELECT productCode FROM orderdetails ORDER BY quantityOrdered DESC LIMIT 1 )", "source_tables": ["orderdetails", "products"]}, "evidence": "The most ordered quantity product refers to productName where Max(quantityOrdered); SUBTRACT(MSRP, buyPrice);"}
{"sample_id": 1643, "db_id": "car_retails", "final": {"question": "For the order has the most product ordered, name the customer who placed the order.", "sql": "SELECT T2.firstName, T2.lastName FROM offices AS T1 INNER JOIN employees AS T2 ON T1.officeCode = T2.officeCode WHERE T2.employeeNumber = ( SELECT MAX(employeeNumber) FROM employees )", "source_tables": ["employees", "offices"]}, "evidence": "The largest order in terms of total price refers to MAX(SUM(MULTIPLY(quantityOrdered, priceEach))."}
{"sample_id": 1740, "db_id": "restaurant", "final": {"question": "List street names in San Francisco city.", "sql": "SELECT street_name FROM location WHERE city = 'San Francisco'", "source_tables": ["location"]}, "evidence": ""}
{"sample_id": 1741, "db_id": "restaurant", "final": {"question": "List restaurant ids located in Danville city.", "sql": "SELECT id_restaurant FROM location WHERE city = 'Danville'", "source_tables": ["location"]}, "evidence": ""}
{"sample_id": 1742, "db_id": "restaurant", "final": {"question": "How many cities are located in the Bay Area?", "sql": "SELECT COUNT(city) FROM geographic WHERE region = 'bay area'", "source_tables": ["geographic"]}, "evidence": "the Bay Area refers to region = 'bay area'"}
{"sample_id": 1743, "db_id": "restaurant", "final": {"question": "How many labels of the restaurant have an unknown country?", "sql": "SELECT COUNT(T1.label) FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'unknown'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "unknown county refers to county = 'unknown'"}
{"sample_id": 1744, "db_id": "restaurant", "final": {"question": "Please indicate the street names of restaurants with food type is American.", "sql": "SELECT T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'American'", "source_tables": ["generalinfo", "location"]}, "evidence": ""}
{"sample_id": 1745, "db_id": "restaurant", "final": {"question": "Please indicate which labels have the city located in Santa Cruz.", "sql": "SELECT T1.label FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'Santa Cruz county'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "Santa Cruz refers to county = 'Santa Cruz county'"}
{"sample_id": 1746, "db_id": "restaurant", "final": {"question": "Give the review of the restaurant at 430, Broadway.", "sql": "SELECT T1.review FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_name = 'Broadway' AND T2.street_num = 430", "source_tables": ["generalinfo", "location"]}, "evidence": "430 Broadway refers to street_num = 430 and street_name = 'Broadway'"}
{"sample_id": 1747, "db_id": "restaurant", "final": {"question": "Indicate the address of the restaurant with the most popular reviews.", "sql": "SELECT T2.street_num, T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant ORDER BY T1.review DESC LIMIT 1", "source_tables": ["generalinfo", "location"]}, "evidence": "address refers to street_num, street_name; the most popular review refers to max(review)"}
{"sample_id": 1748, "db_id": "restaurant", "final": {"question": "Which country has the most restaurants with Italian food?", "sql": "SELECT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.food_type = 'Italian' GROUP BY T2.county ORDER BY COUNT(T1.id_restaurant) DESC LIMIT 1", "source_tables": ["geographic", "generalinfo"]}, "evidence": "Italian food refers to food_type = 'Italian'"}
{"sample_id": 1749, "db_id": "restaurant", "final": {"question": "Find the percentage of restaurant in Napa Valley.", "sql": "SELECT CAST(SUM(IIF(region = 'Napa Valley', 1, 0)) AS REAL) * 100 / COUNT(region) FROM geographic", "source_tables": ["geographic"]}, "evidence": "Napa Valley refers to region = 'Napa Valley'; percentage = divide(count(id_restaurant where region = 'Napa Valley'), count(id_restaurant)) * 100%"}
{"sample_id": 1750, "db_id": "restaurant", "final": {"question": "How many of the cities are in a Bay Area?", "sql": "SELECT COUNT(city) FROM geographic WHERE region = 'bay area'", "source_tables": ["geographic"]}, "evidence": "Bay Area refers to region = 'bay area'"}
{"sample_id": 1751, "db_id": "restaurant", "final": {"question": "List down the cities with unknown country.", "sql": "SELECT city FROM geographic WHERE county = 'unknown'", "source_tables": ["geographic"]}, "evidence": "unknown county refers to county = 'unknown'"}
{"sample_id": 1752, "db_id": "restaurant", "final": {"question": "What is the city located in Bay Area of Santa Clara?", "sql": "SELECT city FROM geographic WHERE region = 'bay area' AND county = 'santa clara county'", "source_tables": ["geographic"]}, "evidence": "Bay Area refers to region = 'bay area'; Santa Clara refers to county = 'santa clara county'"}
{"sample_id": 1753, "db_id": "restaurant", "final": {"question": "List down the restaurant ID of restaurants located in Sunnyvale.", "sql": "SELECT id_restaurant FROM location WHERE city = 'sunnyvale'", "source_tables": ["location"]}, "evidence": "Sunnyvale refers to city = 'sunnyvale'"}
{"sample_id": 1754, "db_id": "restaurant", "final": {"question": "Among the restaurants on street number below 1000, how many of them are in Railroad St.?", "sql": "SELECT COUNT(city) FROM location WHERE street_name = 'railroad' AND street_num < 1000", "source_tables": ["location"]}, "evidence": "street number below 1000 refers to street_num < 1000; Railroad St. refers to street_name = 'railroad'"}
{"sample_id": 1755, "db_id": "restaurant", "final": {"question": "What is the name of the 24 hour diner at San Francisco?", "sql": "SELECT label FROM generalinfo WHERE food_type = '24 hour diner' AND city = 'san francisco'", "source_tables": ["generalinfo"]}, "evidence": "name refers to label; 24 hour diner refers to food_type = '24 hour diner'; San Francisco refers to city = 'san francisco'"}
{"sample_id": 1756, "db_id": "restaurant", "final": {"question": "Give the review of the restaurant located in Ocean St., Santa Cruz.", "sql": "SELECT T2.review FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.city = 'santa cruz' AND T1.street_name = 'ocean st'", "source_tables": ["generalinfo", "location"]}, "evidence": "Ocean St. refers to street_name = 'ocean st'; Santa Cruz refers to city = 'santa cruz'"}
{"sample_id": 1757, "db_id": "restaurant", "final": {"question": "Give the street number of a bar in Oakland with a 2.7 review.", "sql": "SELECT T2.street_num FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.review = 2.7 AND T2.city = 'oakland' AND T1.food_type = 'bar'", "source_tables": ["generalinfo", "location"]}, "evidence": "street number refers to street_num; bar refers to food_type = 'bar'; Oakland refers to city = 'oakland'; 2.7 review refers to review = 2.7"}
{"sample_id": 1758, "db_id": "restaurant", "final": {"question": "Among the bakeries, what is total number of bakery located at University Avenue, Palo Alto?", "sql": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.food_type = 'bakery' AND T2.city = 'palo alto' AND T1.street_name = 'university ave.'", "source_tables": ["generalinfo", "location"]}, "evidence": "bakery refers to food_type = 'bakery'; University Avenue refers to street_name = 'university ave.'; Palo Alto refers to city = 'palo alto'"}
{"sample_id": 1759, "db_id": "restaurant", "final": {"question": "Among the listed winery, what is the street number of the winery named \"Tulocay Winery\"?", "sql": "SELECT T1.street_num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'Tulocay winery' AND T2.food_type = 'winery'", "source_tables": ["generalinfo", "location"]}, "evidence": "winery refers to food_type = 'winery'; street number refers to street_num; \"Tulocay Winery\" refers to label = 'Tulocay winery'"}
{"sample_id": 1760, "db_id": "restaurant", "final": {"question": "List the review and label of the restaurants in Mission Blvd., Hayward.", "sql": "SELECT T2.review, T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.city = 'hayward' AND T1.street_name = 'mission blvd'", "source_tables": ["generalinfo", "location"]}, "evidence": "Mission Blvd. refers to street_name = 'mission blvd'; Hayward refers to city = 'hayward'"}
{"sample_id": 1761, "db_id": "restaurant", "final": {"question": "Among all indian restaurants in Castro St., Mountainview, how many of them is about cookhouse in their label?", "sql": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'castro st' AND T1.city = 'mountain view' AND T2.food_type = 'indian' AND T2.label LIKE '%cookhouse%'", "source_tables": ["generalinfo", "location"]}, "evidence": "indian restaurant refers to food_type = 'indian'; Castro St. refers to street_name = 'castro st'; Mountainview refers to city = 'mountainview'; have the word \"Indian\" in label refers to label = 'indian'"}
{"sample_id": 1762, "db_id": "restaurant", "final": {"question": "In restaurants with a review of 2, how many restaurants have a street number below 500?", "sql": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.review = 2 AND T1.street_num < 500", "source_tables": ["generalinfo", "location"]}, "evidence": "review of 2 refers to review = 2; street number below 500 refers to street_num < 500"}
{"sample_id": 1941, "db_id": "soccer_2016", "final": {"question": "Tally the match IDs in which V Kohli is the \"Man of the Match\".", "sql": "SELECT T1.Match_Id FROM 'Match' AS T1 INNER JOIN Player AS T2 ON T1.Man_of_the_Match = T2.Player_Id WHERE T2.Player_Name = 'V Kohli'", "source_tables": ["player", "match"]}, "evidence": ""}
{"sample_id": 1942, "db_id": "soccer_2016", "final": {"question": "From 2011 to 2012, how many Australian players became the \"Man of the Match\"?", "sql": "SELECT SUM(CASE WHEN T1.Match_Date BETWEEN '2011%' AND '2012%' THEN 1 ELSE 0 END) FROM 'Match' AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match INNER JOIN Country AS T3 ON T3.Country_Id = T2.Country_Name WHERE T3.Country_Name = 'Australia'", "source_tables": ["country", "player", "match"]}, "evidence": "From 2011 to 2012 refers to Match_Date between '2011%' and '2012%'; Australian players refers to Country_Name = 'Australia'"}
{"sample_id": 1943, "db_id": "soccer_2016", "final": {"question": "Who among the players won both \"Man of the Series\" and \"Orange Cap\" in the same season?", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Season AS T2 ON T1.Player_Id = T2.Man_of_the_Series = T2.Orange_Cap", "source_tables": ["season", "player"]}, "evidence": "Who refers to Player_Name;"}
{"sample_id": 1944, "db_id": "soccer_2016", "final": {"question": "When did the Sunrisers Hyderabad win their first match?", "sql": "SELECT T1.Match_Date FROM 'Match' AS T1 INNER JOIN Team AS T2 ON T1.Match_Winner = T2.Team_Id WHERE T2.Team_Name = 'Sunrisers Hyderabad'", "source_tables": ["team", "match"]}, "evidence": "Sunrisers Hyderabad refers to Team_Name = 'Sunrisers Hyderabad'; win their first match refers to Match_Winner and min(Match_Date)"}
{"sample_id": 1945, "db_id": "soccer_2016", "final": {"question": "Write down the player names and IDs of the English umpires.", "sql": "SELECT T1.Umpire_Name, T1.Umpire_Id FROM Umpire AS T1 INNER JOIN Country AS T2 ON T1.Umpire_Country = T2.Country_Id WHERE T2.Country_Name = 'England'", "source_tables": ["country", "umpire"]}, "evidence": "English umpires refers to Country_Name = 'England'"}
{"sample_id": 1946, "db_id": "soccer_2016", "final": {"question": "Calculate the run rate at the end of 17 overs of the match ID 335987 on 4/18/2008.", "sql": "SELECT CAST(COUNT(CASE WHEN T1.Toss_Name = 'bat' THEN T3.Runs_Scored ELSE NULL END) AS REAL) / SUM(CASE WHEN T1.Toss_Name = 'field' THEN 1 ELSE 0 END) FROM Toss_Decision AS T1 INNER JOIN Match AS T2 ON T1.Toss_Id = T2.Toss_Decide INNER JOIN Batsman_Scored AS T3 ON T2.Match_Id = T3.Match_Id WHERE T2.Match_Id = 335987 AND T2.Match_Date = '2008-04-18' GROUP BY T3.Over_Id HAVING COUNT(T1.Toss_Name = 'field') = 17", "source_tables": ["match", "batsman_scored", "toss_decision"]}, "evidence": "4/18/2008 refers to Match_Date = 4/18/2008; end of 17 overs refers to count(Toss_Name = 'field' ) = 17; run rate = divide(sum(Runs_Scored) when Toss_Name = 'bat', sum(Over_Id) when Toss_Name = 'field')"}
{"sample_id": 1947, "db_id": "soccer_2016", "final": {"question": "Compute the run rate at the end of 16 overs of the match ID 335999. Please include the name of the \"Man of_the Match\".", "sql": "SELECT CAST(COUNT(CASE WHEN T1.Toss_Name = 'bat' THEN T3.Runs_Scored ELSE NULL END) AS REAL) / SUM(CASE WHEN T1.Toss_Name = 'field' THEN 1 ELSE 0 END) FROM Toss_Decision AS T1 INNER JOIN Match AS T2 ON T1.Toss_Id = T2.Toss_Decide INNER JOIN Batsman_Scored AS T3 ON T2.Match_Id = T3.Match_Id WHERE T2.Match_Id = 335987 AND T2.Match_Date = '2008-04-18' GROUP BY T3.Over_Id HAVING COUNT(T1.Toss_Name = 'field') = 16", "source_tables": ["match", "batsman_scored", "toss_decision"]}, "evidence": "end of 16 overs refers to count(Toss_Name = 'field' ) = 16; run rate = divide(count(Runs_Scored) when Toss_Name = 'bat', sum(Over_Id)when Toss_Name = 'field'); name refers to Player_Name"}
{"sample_id": 1948, "db_id": "soccer_2016", "final": {"question": "What is the id of the team with the highest number of matches won?", "sql": "SELECT Match_Id FROM 'Match' ORDER BY Match_Winner DESC LIMIT 1", "source_tables": ["match"]}, "evidence": "id of the team refers to Team_Id; highest number of matches won refers to max(count(Match_Winner))"}
{"sample_id": 1949, "db_id": "soccer_2016", "final": {"question": "Which year do the majority of the players were born?", "sql": "SELECT DOB FROM Player GROUP BY DOB ORDER BY COUNT(DOB) DESC LIMIT 1", "source_tables": ["player"]}, "evidence": "year refers to DOB; majority of the players refers to max(count(Player_Id))"}
{"sample_id": 1950, "db_id": "soccer_2016", "final": {"question": "What is the date of the match that has the highest wager on the final result of a game?", "sql": "SELECT Match_Date FROM 'Match' ORDER BY Win_Margin DESC LIMIT 1", "source_tables": ["match"]}, "evidence": "date of the match refers to Match_Date; highest wager refers to max(Win_Margin)"}
{"sample_id": 1951, "db_id": "soccer_2016", "final": {"question": "Which season has the fewest number of matches?", "sql": "SELECT Season_Id FROM 'Match' GROUP BY Season_Id ORDER BY COUNT(Match_Id) LIMIT 1", "source_tables": ["match"]}, "evidence": "fewest number of matches refers to min(count(Match_Id))"}
{"sample_id": 1952, "db_id": "soccer_2016", "final": {"question": "How many players have won at least 5 man of the match awards?", "sql": "SELECT COUNT(Match_Id) FROM 'Match' GROUP BY Man_of_the_Match HAVING COUNT(Match_Id) >= 5", "source_tables": ["match"]}, "evidence": "won at least 5 man of the match awards refers to COUNT(Match_Id) > = 5"}
{"sample_id": 1953, "db_id": "soccer_2016", "final": {"question": "Who is the player who received the man of the match award during the last match of Season 9?", "sql": "SELECT T1.Player_name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match WHERE T2.Season_Id = 9 ORDER BY T2.Match_Date DESC LIMIT 1", "source_tables": ["player", "match"]}, "evidence": "Who refers to Player_Name; last match of Season 9 refers to max(Match_Date) where Season_Id = 9"}
{"sample_id": 1954, "db_id": "soccer_2016", "final": {"question": "What is the name of the team that won the first ever match?", "sql": "SELECT T1.Team_Name FROM team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T2.Season_Id = 1 ORDER BY T2.Match_Date LIMIT 1", "source_tables": ["team", "match"]}, "evidence": "name of the team refers to Team_Name; won the first ever match refers to Match_Winner where max(Match_Date)"}
{"sample_id": 1955, "db_id": "soccer_2016", "final": {"question": "How many cities are in U.A.E?", "sql": "SELECT SUM(CASE WHEN T2.Country_Name = 'U.A.E' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN country AS T2 ON T1.Country_id = T2.Country_id", "source_tables": ["country", "city"]}, "evidence": "U.A.E refers to Country_Name = 'U.A.E'"}
{"sample_id": 1956, "db_id": "soccer_2016", "final": {"question": "List the names of all the umpires from England.", "sql": "SELECT T1.Umpire_Name FROM Umpire AS T1 INNER JOIN country AS T2 ON T2.Country_Id = T1.Umpire_Country WHERE T2.Country_Name = 'England'", "source_tables": ["country", "umpire"]}, "evidence": "from England refers to Country_Name = 'England'"}
{"sample_id": 1957, "db_id": "soccer_2016", "final": {"question": "How many players bowl in the legbreak style?", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id WHERE T2.Bowling_skill = 'Legbreak'", "source_tables": ["player", "bowling_style"]}, "evidence": "legbreak style refers to Bowling_skill = 'Legbreak'"}
{"sample_id": 1958, "db_id": "soccer_2016", "final": {"question": "How many matches did Rajasthan Royals play in Season 8?", "sql": "SELECT SUM(CASE WHEN T1.Season_Id = 8 THEN 1 ELSE 0 END) FROM 'Match' AS T1 INNER JOIN Team AS T2 ON T1.Team_1 = T2.Team_Id OR T1.Team_2 = T2.Team_Id WHERE T2.Team_Name = 'Rajasthan Royals'", "source_tables": ["team", "match"]}, "evidence": " Season 8 refers to Season_Id = 8"}
{"sample_id": 1959, "db_id": "soccer_2016", "final": {"question": "Which country is umpire TH Wijewardene from?", "sql": "SELECT T2.Country_Name FROM Umpire AS T1 INNER JOIN country AS T2 ON T2.Country_Id = T1.Umpire_Country WHERE T1.Umpire_Name = 'TH Wijewardene'", "source_tables": ["country", "umpire"]}, "evidence": "country refers to Country_Name"}
{"sample_id": 1960, "db_id": "soccer_2016", "final": {"question": "What are the names of the venues in Abu Dhabi?", "sql": "SELECT T1.Venue_Name FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id WHERE T2.City_Name = 'Abu Dhabi'", "source_tables": ["city", "venue"]}, "evidence": "names of the venues refers to Venue_Name; Abu Dhabi refers to City_Name = 'Abu Dhabi'"}
{"sample_id": 1961, "db_id": "soccer_2016", "final": {"question": "Which country is the youngest player from?", "sql": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN Player AS T2 ON T1.Country_Id = T2.Country_Name ORDER BY T2.DOB DESC LIMIT 1", "source_tables": ["country", "player"]}, "evidence": "country refers to Country_Name; youngest player refers to max(DOB)"}
{"sample_id": 1962, "db_id": "soccer_2016", "final": {"question": "List all the names of the winning team's players in the first match of season 1.", "sql": "SELECT T3.Player_Name FROM 'Match' AS T1 INNER JOIN Player_Match AS T2 ON T1.Match_Winner = T2.Team_Id INNER JOIN Player AS T3 ON T2.Player_Id = T3.Player_Id WHERE T1.Season_Id = 1 ORDER BY T1.Match_Date LIMIT 1", "source_tables": ["player", "player_match", "match"]}, "evidence": "names refers to Player_Name; winning team's refers to Match_Winner; first match of season 1 refers to Season_Id = 1 and min(Match_Date)"}
{"sample_id": 1963, "db_id": "soccer_2016", "final": {"question": "Who is the youngest player to have won the Purple Cap?", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Season AS T2 ON T1.Player_Id = T2.Purple_Cap ORDER BY T2.Season_Year - SUBSTR(T1.DOB, 1, 4) LIMIT 1", "source_tables": ["season", "player"]}, "evidence": "Who refers to Player_Name; youngest player to have won the Purple Cap refers to min(subtract(Season_Year, DOB))"}
{"sample_id": 1964, "db_id": "soccer_2016", "final": {"question": "Provide the complete name of the venue, city and country where the last match was held.", "sql": "SELECT T1.Venue_Name, T2.City_Name, T3.Country_Name FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id INNER JOIN Country AS T3 ON T2.Country_Id = T3.Country_Id INNER JOIN Match AS T4 ON T1.Venue_Id = T4.Venue_Id ORDER BY T4.Match_Date DESC LIMIT 1", "source_tables": ["country", "city", "venue", "match"]}, "evidence": "name of the venue, city and country refers to Venue_Name and City_Name and Country_Name; last match refers to max(Match_Date)"}
{"sample_id": 1965, "db_id": "soccer_2016", "final": {"question": "How many overs were there in each innings of match ID \"336011\"?", "sql": "SELECT SUM(CASE WHEN Innings_No = 1 THEN 1 ELSE 0 END) AS IN1 , SUM(CASE WHEN Innings_No = 2 THEN 1 ELSE 0 END) AS IN2 FROM Ball_by_Ball WHERE Match_Id = 336011", "source_tables": ["ball_by_ball"]}, "evidence": ""}
{"sample_id": 1966, "db_id": "soccer_2016", "final": {"question": "List the ball IDs, scores, and innings numbers in the over ID 20 of match ID \"335988\".", "sql": "SELECT Ball_Id, Runs_Scored, Innings_No FROM Batsman_Scored WHERE Match_Id = 335988 AND Over_Id = 20", "source_tables": ["batsman_scored"]}, "evidence": "innings numbers refers to Innings_No"}
{"sample_id": 1967, "db_id": "soccer_2016", "final": {"question": "How many matches were held in 2011?", "sql": "SELECT COUNT(Match_Id) FROM 'Match' WHERE Match_Date LIKE '2011%'", "source_tables": ["match"]}, "evidence": "held in 2011 refers to Match_Date like '2011%';"}
{"sample_id": 1968, "db_id": "soccer_2016", "final": {"question": "How old is Ishan Kishan in 2022?", "sql": "SELECT 2022 - SUBSTR(DOB, 1, 4) FROM Player WHERE Player_Name = 'Ishan Kishan'", "source_tables": ["player"]}, "evidence": "old refers to SUBTRACT(2022, SUBSTR(DOB, 1, 4)); Ishan Kishan refers to Player_Name = 'Ishan Kishan';"}
{"sample_id": 1969, "db_id": "soccer_2016", "final": {"question": "Calculate the win rate of the toss-winners in 2012.", "sql": "SELECT CAST(SUM(CASE WHEN Toss_Winner = Match_Winner THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Match_Date LIKE '2012%' THEN 1 ELSE 0 END) FROM 'Match'", "source_tables": ["match"]}, "evidence": "in 2012 refers to Match_Date like '2012%'; win rate refers to DIVIDE(COUNT(Toss_Winner = Match_Winner), COUNT(Match_Date like '2012%'))"}
{"sample_id": 1970, "db_id": "soccer_2016", "final": {"question": "How many matches in 2009 had win margins of less than 10?", "sql": "SELECT COUNT(Match_Id) FROM 'Match' WHERE Match_Date LIKE '2009%' AND Win_Margin < 10", "source_tables": ["match"]}, "evidence": "in 2009 refers to Match_Date like '2009%'; win margins of less than 10 refers to Win_Margin < 10;"}
{"sample_id": 1971, "db_id": "soccer_2016", "final": {"question": "Provide the players' names in both teams of the match that was held in June 2014.", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id WHERE SUBSTR(T3.Match_Date, 1, 4) = '2014' AND SUBSTR(T3.Match_Date, 7, 1) = '6' LIMIT 2", "source_tables": ["player", "player_match", "match"]}, "evidence": "held in June 2014 refers to SUBSTR(Match_Date, 7, 1) = 6 and SUBSTR(Match_Date, 1, 4) = 2014"}
{"sample_id": 1972, "db_id": "soccer_2016", "final": {"question": "How many matches did Mohammad Hafeez play?", "sql": "SELECT SUM(CASE WHEN T2.Player_Name = 'Mohammad Hafeez' THEN 1 ELSE 0 END) FROM Player_Match AS T1 INNER JOIN Player AS T2 ON T1.Player_Id = T2.Player_Id", "source_tables": ["player", "player_match"]}, "evidence": "Mohammad Hafeez refers to Player_Name = 'Mohammad Hafeez';"}
{"sample_id": 1973, "db_id": "soccer_2016", "final": {"question": "Among the players from South Africa, provide the players' names who were born in 1984.", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_Id WHERE T2.Country_Name = 'South Africa' AND T1.DOB LIKE '1984%'", "source_tables": ["country", "player"]}, "evidence": "from South Africa refers to Country_Name = 'South Africa'; born in 1984 refers to DOB like '1984%';"}
{"sample_id": 1974, "db_id": "soccer_2016", "final": {"question": "Among the\" Mumbai Indians\" team that played in 2009, how many percent of the matches did they win?", "sql": "SELECT CAST(SUM(CASE WHEN T1.Match_Winner = T2.Team_Id THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Match_Id) FROM 'Match' AS T1 INNER JOIN Team AS T2 ON T1.Team_1 = T2.Team_Id OR T1.Team_2 = T2.Team_Id WHERE T2.Team_Name = 'Mumbai Indians' AND T1.Match_Date LIKE '2009%'", "source_tables": ["team", "match"]}, "evidence": "played in 2009 Match_Date like '2009%'; Mumbai Indians\" team refers to Team_Name = 'Mumbai Indians'; percent of the matches did they win refers to DIVIDE(COUNT(Match_Winner = Team_Id), COUNT(Match_Id))"}
{"sample_id": 1975, "db_id": "soccer_2016", "final": {"question": "What is the ratio of players with batting hands of left and right?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Batting_hand = 'Left-hand bat' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.Batting_hand = 'Right-hand bat' THEN 1 ELSE 0 END) FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id", "source_tables": ["player", "batting_style"]}, "evidence": "batting hands of left refers to Batting_hand = 'Left-hand bat'; right refers to Batting_hand = 2; ratio refers to DIVIDE(COUNT(Batting_hand = 'Right-hand bat'), COUNT(Batting_hand = 2))"}
{"sample_id": 1976, "db_id": "soccer_2016", "final": {"question": "Who is the eldest player and where did he/she come from?", "sql": "SELECT T1.Player_Name, T2.Country_Name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_Id ORDER BY T1.DOB LIMIT 1", "source_tables": ["country", "player"]}, "evidence": "eldest player refers to MIN(DOB); where he/she come from refers to Country_Name"}
{"sample_id": 1977, "db_id": "soccer_2016", "final": {"question": "Which bowling skills did the players from Zimbabwea have?", "sql": "SELECT T1.Bowling_skill FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T1.Bowling_Id = T2.Bowling_skill INNER JOIN Country AS T3 ON T2.Country_Name = T3.Country_Id WHERE T3.Country_Name = 'Zimbabwea'", "source_tables": ["country", "player", "bowling_style"]}, "evidence": "Zimbabwea refers to Country_Name = 'Zimbabwea';"}
{"sample_id": 1978, "db_id": "soccer_2016", "final": {"question": "List the IDs and names of the umpires from New Zealand.", "sql": "SELECT T1.Umpire_Id, T1.Umpire_Name FROM Umpire AS T1 INNER JOIN Country AS T2 ON T1.Umpire_Country = T2.Country_Id WHERE T2.Country_Name = 'New Zealand'", "source_tables": ["country", "umpire"]}, "evidence": "New Zealand refers to Country_Name = 'New Zealand'; ID of the umpire refers to Umpire_Id; name of the umpire refers to Umpire_Name"}
{"sample_id": 1979, "db_id": "soccer_2016", "final": {"question": "Who was the captain-keeper of Rising Pune Supergiants?", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Team AS T3 ON T2.Team_Id = T3.Team_Id INNER JOIN Rolee AS T4 ON T2.Role_Id = T4.Role_Id WHERE T3.Team_Name = 'Rising Pune Supergiants' AND T4.Role_Desc = 'CaptainKeeper' GROUP BY T1.Player_Name", "source_tables": ["player", "player_match", "team", "rolee"]}, "evidence": "captain-keeper refers to Role_Desc = 'CaptainKeeper'; Rising Pune Supergiants refers to Role_Desc = 'CaptainKeeper'"}
{"sample_id": 1980, "db_id": "soccer_2016", "final": {"question": "How many matches did the Sunrisers Hyderabad team win in 2013?", "sql": "SELECT SUM(CASE WHEN Match_Date LIKE '2013%' THEN 1 ELSE 0 END) FROM 'Match' AS T1 INNER JOIN Team AS T2 ON T1.Match_Winner = T2.Team_Id WHERE T2.Team_Name = 'Sunrisers Hyderabad'", "source_tables": ["team", "match"]}, "evidence": "Sunrisers Hyderabad team refers to Team_Name = 'Sunrisers Hyderabad'; in 2013 refers to Match_Date like '2013%';"}
{"sample_id": 1981, "db_id": "soccer_2016", "final": {"question": "Provide match ID which had the extra type of penalty.", "sql": "SELECT T1.Match_Id FROM Extra_Runs AS T1 INNER JOIN Extra_Type AS T2 ON T1.Extra_Type_Id = T2.Extra_Id WHERE T2.Extra_Name = 'penalty'", "source_tables": ["extra_type", "extra_runs"]}, "evidence": "extra type of penalty refers to Extra_Name = 'penalty';"}
{"sample_id": 1982, "db_id": "soccer_2016", "final": {"question": "Name the teams played in a match which resulted in a tie in 2015.", "sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Team_1 OR T1.Team_Id = T2.Team_2 INNER JOIN Win_By AS T3 ON T2.Win_Type = T3.Win_Id WHERE SUBSTR(T2.Match_Date, 1, 4) = '2015' AND T3.Win_Type = 'Tie' LIMIT 1", "source_tables": ["team", "match", "win_by"]}, "evidence": "resulted in a tie refers to Win_Type = 'Tie'; in 2015 refers to SUBSTR(Match_Date, 1, 4) = 2015"}
{"sample_id": 1983, "db_id": "soccer_2016", "final": {"question": "Calculate the average players out in the first innings per match. How many of them were out by the leg before wicket?", "sql": "SELECT CAST(COUNT(T1.Player_Out) AS REAL) / COUNT(T1.Match_Id), SUM(CASE WHEN T2.Out_Name = 'lbw' THEN 1 ELSE 0 END) FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T1.Kind_Out = T2.Out_Id WHERE T1.Innings_No = 2", "source_tables": ["wicket_taken", "out_type"]}, "evidence": "out by the leg refers to Out_Name = 'lbw'; out in the first innings refers to Innings_No = 2;"}
{"sample_id": 1984, "db_id": "soccer_2016", "final": {"question": "How many matches are there in 2008?", "sql": "SELECT COUNT(Match_Id) FROM 'Match' WHERE Match_Date LIKE '2008%'", "source_tables": ["match"]}, "evidence": "in 2008 refers to Match_Date like '2008%'"}
{"sample_id": 1985, "db_id": "soccer_2016", "final": {"question": "Count the matches with a total of two innings.", "sql": "SELECT COUNT(Match_Id) FROM Wicket_Taken WHERE innings_no = 2", "source_tables": ["wicket_taken"]}, "evidence": "total of two innings refers to innings_no = 2;"}
{"sample_id": 1986, "db_id": "soccer_2016", "final": {"question": "Which is the country of the city named \"Rajkot\"?", "sql": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN city AS T2 ON T1.Country_Id = T2.Country_Id WHERE city_name = 'Rajkot'", "source_tables": ["country", "city"]}, "evidence": "city named \"Rajkot\" refers to city_name = 'Rajkot';"}
{"sample_id": 1987, "db_id": "soccer_2016", "final": {"question": "How many of the matches are Superover?", "sql": "SELECT SUM(CASE WHEN T2.win_type = 'wickets' THEN 1 ELSE 0 END) FROM 'Match' AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id", "source_tables": ["match", "win_by"]}, "evidence": "are Superover refers to win_type = 'wickets';"}
{"sample_id": 1988, "db_id": "soccer_2016", "final": {"question": "What are the teams that played in a match with the point of winning margin of 38 on April 30, 2009?", "sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Team_1 WHERE T2.win_margin = 38 AND match_date = '2009-04-30'", "source_tables": ["team", "match"]}, "evidence": "point of winning margin of 38 refers to win_margin = 38; on April 30, 2009 refers to match_date = '2009-04-30'; team refers to Team_Name;"}
{"sample_id": 1989, "db_id": "soccer_2016", "final": {"question": "Give the name of the team of T Kohli in the match ID 335989.", "sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Player_Match AS T2 ON T1.Team_Id = T2.Team_Id INNER JOIN Player AS T3 ON T2.Player_Id = T3.Player_Id WHERE T2.match_id = 335989 AND T3.player_name = 'T Kohli'", "source_tables": ["player", "player_match", "team"]}, "evidence": "team of T Kohli refers to player_name = 'T Kohli';"}
{"sample_id": 1990, "db_id": "soccer_2016", "final": {"question": "How many venues are located at Centurion, South Africa?", "sql": "SELECT COUNT(T1.Venue_name) FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id INNER JOIN Country AS T3 ON T2.Country_Id = T3.Country_Id WHERE T3.country_name = 'South Africa' AND T2.city_name = 'Centurion'", "source_tables": ["country", "city", "venue"]}, "evidence": "venues are located at Centurion refers to city_name = 'Centurion'; South Africa refers to country_name = 'South Africa'"}
{"sample_id": 1991, "db_id": "soccer_2016", "final": {"question": "Among the matches of Delhi Daredevils in 2014, how many won matches are there?", "sql": "SELECT COUNT(T1.Match_Winner) FROM 'Match' AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 OR T2.Team_Id = T1.Team_2 WHERE T2.team_name = 'Delhi Daredevils' AND T1.Match_Date LIKE '2014%'", "source_tables": ["team", "match"]}, "evidence": "Delhi Daredevils refers to team_name = 'Delhi Daredevils'; in 2014 refers to Match_Date contains '2014';"}
{"sample_id": 2072, "db_id": "music_tracker", "final": {"question": "Among the artists from 1980 to 1982. Which artist was tagged as \"disco\"?", "sql": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'disco' AND T1.groupYear BETWEEN 1980 AND 1982", "source_tables": ["torrents", "tags"]}, "evidence": "from 1980 to 1982 refers to groupYear between 1980 and 1982; tag = 'disco';"}
{"sample_id": 2073, "db_id": "music_tracker", "final": {"question": "Provide the name of artists who had no more than 100 downloads and are tagged \"funk\" in 1980.", "sql": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'funk' AND T1.groupYear = 1980 AND T1.totalSnatched <= 100", "source_tables": ["torrents", "tags"]}, "evidence": "no more than 100 downloads refer to totalSnatched \u2264 100; groupYear = 1980; tag = 'funk';"}
{"sample_id": 2074, "db_id": "music_tracker", "final": {"question": "Which artist has released the most singles with the tag \"soul\"?", "sql": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'soul' AND T1.releaseType = 'single' GROUP BY T1.artist ORDER BY COUNT(T1.releaseType) DESC LIMIT 1", "source_tables": ["torrents", "tags"]}, "evidence": "the most singles refer to MAX(COUNT(releaseType = 'single'));"}
{"sample_id": 2075, "db_id": "music_tracker", "final": {"question": "Among the artists with the id from 10 to 30. Which artist released the product with the tag \"funk\" in 1980?", "sql": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'funk' AND T1.groupYear = 1980 AND T1.id BETWEEN 10 AND 30", "source_tables": ["torrents", "tags"]}, "evidence": "id from 10 to 30 refers to id between 10 and 30; groupYear = 1980;"}
{"sample_id": 2076, "db_id": "music_tracker", "final": {"question": "List the group name has the most downloaded that have released jazz genres from 1982 or later.", "sql": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'jazz' AND T1.groupYear >= 1982 ORDER BY T1.totalSnatched DESC LIMIT 1", "source_tables": ["torrents", "tags"]}, "evidence": "the most downloaded refers to MAX(totalSnatched); tag = 'jazz'; from 1982 or later refers to groupYear \u2265 1982;"}
{"sample_id": 2077, "db_id": "music_tracker", "final": {"question": "Which artist has id \"16\"? Provide her or his tag genre.", "sql": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.id = 16", "source_tables": ["torrents", "tags"]}, "evidence": "FALSE;"}
{"sample_id": 2078, "db_id": "music_tracker", "final": {"question": "Among id from 10 to 50. Which artist tagged as \"new.york\" has the most downloads?", "sql": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.id BETWEEN 10 AND 50 AND T2.tag LIKE 'new.york' ORDER BY T1.totalSnatched DESC LIMIT 1", "source_tables": ["torrents", "tags"]}, "evidence": "Among id from 10 to 50 refers to id between 10 and 50; tag = 'new.york'; the most downloads refer to MAX(totalSnatched);"}
{"sample_id": 2079, "db_id": "music_tracker", "final": {"question": "List the name of artists who have released albums and mixtape from 1980 to 1985 in \"dance\" genre.", "sql": "SELECT COUNT(T1.artist) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'dance' AND T1.groupYear BETWEEN 1980 AND 1985 AND T1.releaseType LIKE 'album' OR T1.releaseType LIKE 'mixtape'", "source_tables": ["torrents", "tags"]}, "evidence": "albums and mixtape refer to releaseType; from 1980 to 1985 refers to groupYear between 1980 and 1985; tag = 'dance';"}
{"sample_id": 2080, "db_id": "music_tracker", "final": {"question": "How many singles were released between 1979 and 1981 labeled as \"soul\"?", "sql": "SELECT COUNT(T2.tag) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'soul' AND T1.groupYear BETWEEN 1979 AND 1981 AND T1.releaseType LIKE 'single'", "source_tables": ["torrents", "tags"]}, "evidence": "releaseType = 'single'; between 1979 and 1981 refers to groupYear between 1979 and 1981; tag = 'soul';"}
{"sample_id": 2184, "db_id": "world_development_indicators", "final": {"question": "Which country have the highest CO2 emissions in 1960?", "sql": "SELECT CountryName FROM Indicators WHERE Year = 1960 AND IndicatorName = 'CO2 emissions (metric tons per capita)' ORDER BY Value DESC LIMIT 1", "source_tables": ["indicators"]}, "evidence": "which country refers to countryname; the highest CO2 emissions refers to max(value where indicatorname = 'CO2 emissions (metric tons per capita)'); in 1960 refers to year = '1970'"}
{"sample_id": 2185, "db_id": "world_development_indicators", "final": {"question": "What is the ratio between country with the highest number of infant deaths in 1971 and the lowest number of infant deaths in 1971? List the country with the highest number of infant deaths in 1971 and the lowest number of infant deaths in 1971.", "sql": "SELECT CAST(MAX(value) AS REAL) / MIN(value) FROM indicators WHERE indicatorname = 'Number of infant deaths' AND year = '1971' UNION ALL SELECT countryname FROM ( SELECT countryname, MAX(value) FROM indicators WHERE indicatorname = 'Number of infant deaths' AND year = '1971' ) UNION SELECT countryname FROM ( SELECT countryname, MIN(value) FROM indicators WHERE indicatorname = 'Number of infant deaths' AND year = '1971' )", "source_tables": ["indicators"]}, "evidence": "ratio = divide(max(value where indicatorname = 'Number of infant deaths' and year = '1971'), min(value where indicatorname = 'Number of infant deaths' and year = '1971')); the highest number of infant deaths in 1971 refers to max(value where indicatorname = 'Number of infant deaths' and year = '1971'); the lowest number of infant deaths in 1971 refers to min(value where indicatorname = 'Number of infant deaths' and year = '1971')"}
{"sample_id": 2186, "db_id": "world_development_indicators", "final": {"question": "What country have the series code of SP.DYN.CBRT.IN?", "sql": "SELECT T1.ShortName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.SeriesCode = 'SP.DYN.CBRT.IN'", "source_tables": ["countrynotes", "country"]}, "evidence": "what country refers to ShortName"}
{"sample_id": 2187, "db_id": "world_development_indicators", "final": {"question": "Which country have data classified as official aid?", "sql": "SELECT DISTINCT T1.CountryCode FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data are classified as official aid.'", "source_tables": ["country", "footnotes"]}, "evidence": "which country refers to ShortName; have data classified as official aid refers to description = 'Data are classified as official aid.'"}
{"sample_id": 2188, "db_id": "world_development_indicators", "final": {"question": "What country have its data estimated based on regression?", "sql": "SELECT DISTINCT T1.ShortName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Estimates are based on regression.'", "source_tables": ["countrynotes", "country"]}, "evidence": "what country refers to LongName; have its data estimated based on regression refers to description = 'Estimates are based on regression.'"}
{"sample_id": 2189, "db_id": "world_development_indicators", "final": {"question": "List all the country in East Asia & Pacific region that have more than 2000000 urban population in 1970.", "sql": "SELECT DISTINCT T1.CountryCode FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Year = 1970 AND T1.Region = 'East Asia & Pacific' AND T2.Value > 2000000 AND t2.indicatorname = 'Urban population'", "source_tables": ["country", "indicators"]}, "evidence": "country refers to LongName; have more than 2000000 urban population refers to value where indicatorname = 'Urban population'>2000000; in 1970 refers to year = '1970'"}
{"sample_id": 2190, "db_id": "world_development_indicators", "final": {"question": "In 1960, what is largest population for country with upper middle income?", "sql": "SELECT MAX(T2.Value) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'Upper middle income' AND T2.Year = 1960 AND T2.IndicatorName = 'Population, total'", "source_tables": ["country", "indicators"]}, "evidence": "in 1960 refers to year = '1960'; the largest population refers to max(value where IndicatorName = 'Population, total'); country with upper middle income refers to incomegroup = 'Upper middle income'"}
{"sample_id": 2191, "db_id": "world_development_indicators", "final": {"question": "How many countries uses the 1968 System of National Accounts methodology?", "sql": "SELECT COUNT(CountryCode)  FROM Country WHERE SystemOfNationalAccounts = 'Country uses the 1968 System of National Accounts methodology.'", "source_tables": ["country"]}, "evidence": "uses the 1968 System of National Accounts methodology refers to SystemOfNationalAccounts = '1968 System of National Accounts methodology'"}
{"sample_id": 2192, "db_id": "world_development_indicators", "final": {"question": "What upper middle income country under East Asia & Pacific region which covers the topic about Social Protection & Labor: Migration\n? Indicate the short name of the said country.", "sql": "SELECT DISTINCT T1.ShortName FROM Country AS T1 INNER JOIN footnotes AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN Series AS T3 ON T2.Seriescode = T3.SeriesCode WHERE T1.IncomeGroup = 'Upper middle income' AND T1.Region = 'East Asia & Pacific' AND T3.Topic = 'Social Protection & Labor: Migration'", "source_tables": ["country", "footnotes", "series"]}, "evidence": "upper middle income country refers to incomegroup = 'Upper middle income'"}
{"sample_id": 2193, "db_id": "world_development_indicators", "final": {"question": "Name the country in which the topic is about Poverty: Shared Prosperity. Indicate the long name of the country.", "sql": "SELECT DISTINCT T1.LongName FROM Country AS T1 INNER JOIN footnotes AS T2 ON T1.CountryCode = T2.Countrycode INNER JOIN Series AS T3 ON T2.Seriescode = T3.SeriesCode WHERE T3.Topic = 'Poverty: Shared prosperity'", "source_tables": ["country", "footnotes", "series"]}, "evidence": ""}
{"sample_id": 2194, "db_id": "world_development_indicators", "final": {"question": "What country has the latest trade data with a series code of \"SP.DYN.CDRT.IN\n\"? List the table name of the country.", "sql": "SELECT DISTINCT T1.TableName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.LatestTradeData = 2013 AND T2.IndicatorCode = 'SP.DYN.CDRT.IN'", "source_tables": ["country", "indicators"]}, "evidence": "the latest trade data refers to LatestTradeData = '2013'; with a series code of \"SP.DYN.CDRT.IN\n\" refers to indicatorcode = 'SP.DYN.CDRT.IN'"}
{"sample_id": 2195, "db_id": "world_development_indicators", "final": {"question": "What country in the region of Sub-Saharan Africa has a series code of \"SP.DYN.AMRT.FE\"? Indicate the long name of the country", "sql": "SELECT DISTINCT T3.LongName FROM SeriesNotes AS T1 INNER JOIN CountryNotes AS T2 ON T1.SeriesCode = T2.Seriescode INNER JOIN Country AS T3 ON T2.Countrycode = T3.CountryCode WHERE T3.Region = 'Sub-Saharan Africa' AND T1.SeriesCode = 'SP.DYN.AMRT.FE'", "source_tables": ["countrynotes", "country", "seriesnotes"]}, "evidence": ""}
{"sample_id": 2196, "db_id": "world_development_indicators", "final": {"question": "How many countries are using the same type of currency? Please list the short names of any 3 countries.", "sql": "SELECT ShortName FROM country WHERE currencyunit = 'U.S. dollar' LIMIT 3", "source_tables": ["country"]}, "evidence": "any 3 countries refers to count(shortname)>3"}
{"sample_id": 2197, "db_id": "world_development_indicators", "final": {"question": "What South Asian nations have low incomes? Please include the entire names of the nations in your answer.", "sql": "SELECT LongName FROM Country WHERE IncomeGroup = 'Low income' AND Region = 'South Asia'", "source_tables": ["country"]}, "evidence": "South Asian nations refers to region = 'South Asia'; have low incomes refers to incomegroup = 'Low income'; the entire names refers to longname"}
{"sample_id": 2198, "db_id": "world_development_indicators", "final": {"question": "Please provide full name of any two countries using special trade system.", "sql": "SELECT LongName FROM Country WHERE SystemOfTrade = 'Special trade system' LIMIT 2", "source_tables": ["country"]}, "evidence": "full name refers to longname; using special trade system refers to systemoftrade = 'Special trade system'"}
{"sample_id": 2199, "db_id": "world_development_indicators", "final": {"question": "Which country has had the highest proportion of CO2 emissions from transport?", "sql": "SELECT CountryName FROM Indicators WHERE IndicatorName LIKE 'CO2 emissions FROM transport%' ORDER BY Value DESC LIMIT 1", "source_tables": ["indicators"]}, "evidence": "the highest proportion of CO2 emissions from transport refers to max(value where indicatorname = 'CO2 emissions from transport (% of total fuel combustion)')"}
{"sample_id": 2200, "db_id": "world_development_indicators", "final": {"question": "Which country has the lowest percentage of arable land?", "sql": "SELECT CountryName FROM Indicators WHERE IndicatorName LIKE 'Arable land (% of land area)' ORDER BY Value DESC LIMIT 1", "source_tables": ["indicators"]}, "evidence": "which country refers to countryname; the lowest percentage of arable land refers to min(value where indicatorname = 'Arable land (% of land area)')"}
{"sample_id": 2201, "db_id": "world_development_indicators", "final": {"question": "What are the subjects of series that have a restricted type of license?", "sql": "SELECT DISTINCT Topic FROM Series WHERE LicenseType = 'Restricted'", "source_tables": ["series"]}, "evidence": "subjects refers to topic; a restricted type of license refers to\u00a0 licenseType = 'Restricted'"}
{"sample_id": 2202, "db_id": "world_development_indicators", "final": {"question": "Which countries in the upper middle income category still have unfinished external debt reporting? Please provide the country codes in your answer.", "sql": "SELECT CountryCode FROM Country WHERE IncomeGroup = 'Upper middle income' AND ExternalDebtReportingStatus = 'Preliminary'", "source_tables": ["country"]}, "evidence": "in the upper middle income category refers to incomegroup = 'Upper middle income'; still have unfinished external debt reporting refers to ExternalDebtReportingStatus = 'Preliminary'"}
{"sample_id": 2203, "db_id": "world_development_indicators", "final": {"question": "What is the percentage of countries in the Middle East and North Africa that have finished reporting on their real external debt?", "sql": "SELECT CAST(SUM(CASE WHEN ExternalDebtReportingStatus = 'Actual' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CountryCode) FROM Country WHERE region = 'Middle East & North Africa'", "source_tables": ["country"]}, "evidence": "percentage = divide(count(countrycode where\u00a0 ExternalDebtReportingStatus = 'Actual' ), count(countrycode))*100%; in the Middle East and North Africa refers to region = 'Middle East & North Africa'; have finished reporting on their real external debt refers to ExternalDebtReportingStatus = 'Actual'"}
{"sample_id": 2204, "db_id": "world_development_indicators", "final": {"question": "Which form of government has more countries that have completed the actual external debt reporting between the two types of government accounting concepts, budgetary central government vs. consolidated central government?", "sql": "SELECT SUM(CASE WHEN GovernmentAccountingConcept = 'Budgetary central government' THEN 1 ELSE 0 END), SUM(CASE WHEN GovernmentAccountingConcept = 'Consolidated central government' THEN 1 ELSE 0 END) central_nums FROM country WHERE ExternalDebtReportingStatus = 'Actual'", "source_tables": ["country"]}, "evidence": "have completed the actual external debt reporting refers to ExternalDebtReportingStatus = 'Actual'"}
{"sample_id": 2205, "db_id": "world_development_indicators", "final": {"question": "How many nations in East Asia and the Pacific have completed their external debt reporting on time?", "sql": "SELECT COUNT(CountryCode)  FROM Country WHERE Region = 'East Asia & Pacific' AND ExternalDebtReportingStatus = 'Estimate'", "source_tables": ["country"]}, "evidence": "in East Asia and the Pacific refers to region = 'East Asia & Pacific'; have completed their external debt reporting on time refers to ExternalDebtReportingStatus = 'Estimate'"}
{"sample_id": 2206, "db_id": "world_development_indicators", "final": {"question": "What proportion of Sub-Saharan Africa's countries have lower middle incomes?", "sql": "SELECT SUM(CASE WHEN IncomeGroup = 'Lower middle income' THEN 1 ELSE 0 END) * 100.0 / COUNT(CountryCode) persentage FROM Country WHERE Region = 'Sub-Saharan Africa'", "source_tables": ["country"]}, "evidence": "proportion = divide(count(countrycode where incomegroup = 'Low income'), count(countrycode))*100%; Sub-Saharan Africa's countries refers to region = 'Sub-Saharan Africa'; have lower middle incomes refers to incomegroup = 'Low income'"}
{"sample_id": 2207, "db_id": "world_development_indicators", "final": {"question": "From 1961 to 1980, what was the highest percentage of land used for agriculture in the Republic of Benin?", "sql": "SELECT MAX(T1.Value) FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Year >= 1961 AND T1.Year < 1981 AND T1.IndicatorName LIKE 'Agricultural land (% of land area)' AND T2.LongName = 'Republic of Benin'", "source_tables": ["country", "indicators"]}, "evidence": "from 1961 to 1980 refers to year between '1961' and '1980'; the highest percentage of land used for agriculture refers to max(value where IndicatorName = 'Agricultural land (% of land area)'); in the Republic of Benin refers to longname = 'Republic of Benin'"}
{"sample_id": 2208, "db_id": "world_development_indicators", "final": {"question": "Please list the full names of any three countries that have their series code with a description of UN Energy Statistics (2014).", "sql": "SELECT DISTINCT T2.LongName FROM CountryNotes AS T1 INNER JOIN Country AS T2 ON T1.Countrycode = T2.CountryCode WHERE T1.Description = 'Sources: UN Energy Statistics (2014)' LIMIT 3", "source_tables": ["countrynotes", "country"]}, "evidence": "full name refers to longname"}
{"sample_id": 2209, "db_id": "world_development_indicators", "final": {"question": "What was the deposit interest rate in the Commonwealth of Australia in 1979 in percentage?", "sql": "SELECT T1.Value FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.LongName = 'Commonwealth of Australia' AND T1.IndicatorName = 'Deposit interest rate (%)' AND T1.Year = 1979", "source_tables": ["country", "indicators"]}, "evidence": "deposit interest rate refers to value where IndicatorName = 'Deposit interest rate (%)'; in the Commonwealth of Australia refers to\u00a0 LongName = 'Commonwealth of Australia'; in 1979 refers to Year = '1979'"}
{"sample_id": 2210, "db_id": "world_development_indicators", "final": {"question": "What is the series code for Germany and what is its description?", "sql": "SELECT T1.Seriescode, T1.Description FROM CountryNotes AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.ShortName = 'Germany'", "source_tables": ["countrynotes", "country"]}, "evidence": "Germany refers to shortname = 'Germany'"}
{"sample_id": 2211, "db_id": "world_development_indicators", "final": {"question": "Please provide the subject of series of Austria.", "sql": "SELECT DISTINCT T3.Topic FROM CountryNotes AS T1 INNER JOIN Country AS T2 ON T1.Countrycode = T2.CountryCode INNER JOIN Series AS T3 ON T1.Seriescode = T3.SeriesCode WHERE T2.ShortName = 'Austria'", "source_tables": ["countrynotes", "country", "series"]}, "evidence": "subject refers to topic; Austria refers to shortname = 'Austria'"}
{"sample_id": 2212, "db_id": "world_development_indicators", "final": {"question": "What is the subject of the series SP.DYN.AMRT.MA and what does it pertain to?", "sql": "SELECT DISTINCT T1.Topic, T2.Description FROM Series AS T1 INNER JOIN SeriesNotes AS T2 ON T1.SeriesCode = T2.Seriescode WHERE T1.SeriesCode = 'SP.DYN.AMRT.MA'", "source_tables": ["series", "seriesnotes"]}, "evidence": "subject refers to topic; pertain to refers to Description"}
{"sample_id": 2213, "db_id": "world_development_indicators", "final": {"question": "How many countries are having their country's footnotes described as \"unspecified\"? Please provide the full names of any three of those countries.", "sql": "SELECT COUNT(DISTINCT T1.CountryCode)  FROM Country AS T1 INNER JOIN Footnotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Unspecified' OR T2.Description = 'Not specified' UNION SELECT T1.LongName FROM Country AS T1 INNER JOIN Footnotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Unspecified' OR T2.Description = 'Not specified' LIMIT 4", "source_tables": ["country", "footnotes"]}, "evidence": "described as \"unspecified\" refers to Description = 'Not specified'; full names refers to LongName"}
{"sample_id": 2214, "db_id": "world_development_indicators", "final": {"question": "Which nation completed its external debt reporting in 1980 and had a Land under cereal production value of 3018500?", "sql": "SELECT T2.CountryCode FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName LIKE 'Land under cereal production%' AND T1.Value = 3018500 AND T1.Year = 1980 AND T2.ExternalDebtReportingStatus = 'Actual'", "source_tables": ["country", "indicators"]}, "evidence": "completed its external debt reporting refers to ExternalDebtReportingStatus = 'Actual'; in 1980 refers to year = 1980; Land under cereal production value of 3018500 refers to value = 3018500"}
{"sample_id": 2305, "db_id": "movielens", "final": {"question": "Who are cast members in an English movie which has a running time equal to 2? Please list their IDs.", "sql": "SELECT T2.actorid FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.runningtime = 2 AND T1.isEnglish = 'T'", "source_tables": ["movies2actors", "movies"]}, "evidence": "isEnglish = 'T' means English movie"}
{"sample_id": 2306, "db_id": "movielens", "final": {"question": "Which actor has acted in at least 2 French films? Please list their IDs.", "sql": "SELECT T2.actorid FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'France' GROUP BY T2.actorid HAVING COUNT(T1.movieid) > 2", "source_tables": ["movies2actors", "movies"]}, "evidence": "France is a country"}
{"sample_id": 2307, "db_id": "movielens", "final": {"question": "How many American movies have cast number more than 1?", "sql": "SELECT COUNT(T2.actorid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'USA' AND T2.cast_num > 1", "source_tables": ["movies2actors", "movies"]}, "evidence": "USA is a country"}
{"sample_id": 2308, "db_id": "movielens", "final": {"question": "Please list movie IDs which has the oldest publication date and the cast numbers are zero.", "sql": "SELECT DISTINCT T1.movieid FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.year = 1 AND T2.cast_num = 0", "source_tables": ["movies2actors", "movies"]}, "evidence": "Year contains relative value, higher year value refers to newer date; Year = 1 refer to oldest date"}
{"sample_id": 2309, "db_id": "movielens", "final": {"question": "How many actors have acted in both US or UK films?", "sql": "SELECT COUNT(T1.actorid) FROM movies2actors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA' OR T2.country = 'UK'", "source_tables": ["movies2actors", "movies"]}, "evidence": "US and UK are 2 countries"}
{"sample_id": 2310, "db_id": "movielens", "final": {"question": "How many directors with average revenue of 4 have made either action or adventure films?", "sql": "SELECT COUNT(T1.directorid) FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.avg_revenue = 4 AND (T2.genre = 'Adventure' OR T2.genre = 'Action')", "source_tables": ["directors", "movies2directors"]}, "evidence": ""}
{"sample_id": 2311, "db_id": "movielens", "final": {"question": "Please list director IDs who have the quality of at least 3 and have made at least 2 different genres of movies.", "sql": "SELECT T1.directorid FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality >= 3 GROUP BY T1.directorid HAVING COUNT(T2.movieid) >= 2", "source_tables": ["directors", "movies2directors"]}, "evidence": ""}
{"sample_id": 2312, "db_id": "movielens", "final": {"question": "How many American comedies are there?", "sql": "SELECT COUNT(T1.movieid) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'USA' AND T2.genre = 'comedy'", "source_tables": ["movies2directors", "movies"]}, "evidence": "USA is a country"}
{"sample_id": 2313, "db_id": "movielens", "final": {"question": "How many latest released dramas and action movies?", "sql": "SELECT COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.year = 4 AND T1.genre IN ('Action', 'drama')", "source_tables": ["movies2directors", "movies"]}, "evidence": ""}
{"sample_id": 2314, "db_id": "movielens", "final": {"question": "What horror movies have a running time of at least 2? Please list movie IDs.", "sql": "SELECT T1.movieid FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.runningtime >= 2 AND T1.genre = 'Horror'", "source_tables": ["movies2directors", "movies"]}, "evidence": "Higher value of running time means running time is longer"}
{"sample_id": 2315, "db_id": "movielens", "final": {"question": "Please calculate negative critical reception of American movies", "sql": "SELECT CAST(SUM(IIF(T1.rating = 1, 1, 0)) AS REAL) * 100 / COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA'", "source_tables": ["u2base", "movies"]}, "evidence": "'negative critical reception' refers to percentage of movies with a rating of 1, which = [count(rating = 1) / count(all movies)] * 100% "}
{"sample_id": 2316, "db_id": "movielens", "final": {"question": "What is the disparate number of the comedy films that got the 1 rating?", "sql": "SELECT COUNT(DISTINCT T1.movieid) FROM movies2directors AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T2.rating = 1 AND T1.genre = 'comedy'", "source_tables": ["movies2directors", "u2base"]}, "evidence": ""}
{"sample_id": 2317, "db_id": "movielens", "final": {"question": "What's different average revenue status for director who directed the movie that got the most 1 ratings?", "sql": "SELECT DISTINCT T1.avg_revenue FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality = 5", "source_tables": ["directors", "movies2directors"]}, "evidence": ""}
{"sample_id": 2318, "db_id": "movielens", "final": {"question": "How many French movies got the highest ranking?", "sql": "SELECT COUNT(movieid) FROM movies WHERE country = 'France' AND movieid IN ( SELECT movieid FROM u2base WHERE rating = ( SELECT MAX(rating) FROM u2base ) )", "source_tables": ["u2base", "movies"]}, "evidence": "France is a country"}
{"sample_id": 2319, "db_id": "movielens", "final": {"question": "List the movie that has been rated most by 25 years old users.", "sql": "SELECT T2.movieid FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T1.age = 25 GROUP BY T2.movieid ORDER BY COUNT(T1.userid) DESC LIMIT 1", "source_tables": ["u2base", "users"]}, "evidence": ""}
{"sample_id": 2320, "db_id": "movielens", "final": {"question": "How many separate 35 year-old uesers have rated the movie from UK?", "sql": "SELECT COUNT(DISTINCT T2.userid) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid INNER JOIN users AS T3 ON T2.userid = T3.userid WHERE T1.country = 'UK' AND T3.age = 35", "source_tables": ["users", "u2base", "movies"]}, "evidence": "UK is a country"}
{"sample_id": 2321, "db_id": "movielens", "final": {"question": "List the user ids and ages who gave the rate 2 to the movie No. 2409051.", "sql": "SELECT T1.userid, T1.age FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T2.movieid = '2409051' AND T2.rating = 2", "source_tables": ["u2base", "users"]}, "evidence": ""}
{"sample_id": 2322, "db_id": "movielens", "final": {"question": "Please give the ids of the oldest films that got the most ratings.", "sql": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T1.rating = 5 AND T2.year = 1", "source_tables": ["u2base", "movies"]}, "evidence": "Films and movies share the same meaning; oldest film refers to the movie with year = 1"}
{"sample_id": 2323, "db_id": "movielens", "final": {"question": "Which different movies from France got the least ratings?", "sql": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'France' AND T1.rating = 1", "source_tables": ["u2base", "movies"]}, "evidence": "France is a country"}
{"sample_id": 2414, "db_id": "superstore", "final": {"question": "Calculate the average sales of \"\"Sharp AL-1530CS Digital Copier in the east and the west superstore.", "sql": "SELECT AVG(T1.Sales) FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T1.'Product ID' WHERE T3.'Product Name' = 'Sharp AL-1530CS Digital Copier'", "source_tables": ["people", "west_superstore", "product"]}, "evidence": "Sharp AL-1530CS Digital Copier' is the \"Product Name\"; average sales = AVG(Sales)"}
{"sample_id": 2415, "db_id": "superstore", "final": {"question": "Calculate the percentage of ordered office supplies products in the central and the south superstore.", "sql": "SELECT CAST(SUM(CASE  WHEN T3.Category = 'Office Supplies' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.Category) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T2.'Product ID'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "office supplies products refers to Category = 'Office Supplies'; central refers to Region = 'Central'; south superstore refers to Region = 'South'; percentage = divide(SUM(Product ID where Category = 'Office Supplies'), count(Product ID)) * 100 where Region = 'Central' OR Region = 'South'"}
{"sample_id": 2416, "db_id": "superstore", "final": {"question": "What is the ratio between customers who live in Texas and customers who live in Indiana?", "sql": "SELECT CAST(SUM(CASE  WHEN State = 'Texas' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE  WHEN State = 'Indiana' THEN 1 ELSE 0 END) FROM people", "source_tables": ["people"]}, "evidence": "live in Texas refers to State = 'Texas'; live in Indiana refers to State = 'Indiana'; Ratio = divide(sum(State = 'Texas'), sum(State = 'Indiana'))"}
{"sample_id": 2417, "db_id": "superstore", "final": {"question": "Among the orders in Central superstore, which art product were ordered the most?", "sql": "SELECT T2.'Product Name' FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T2.'Sub-Category' = 'Art' GROUP BY T2.'Product Name' ORDER BY COUNT(T2.'Product ID') DESC LIMIT 1", "source_tables": ["product", "central_superstore"]}, "evidence": "art product refers to Sub-Category = 'Art'; the most refers to max(order_number)"}
{"sample_id": 2418, "db_id": "superstore", "final": {"question": "Among the customers in South superstore, which customers ordered more than 3 times in 2015? State the name of the customers.", "sql": "SELECT DISTINCT T2.'Customer Name' FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE STRFTIME('%Y', T1.'Order Date') = '2015' GROUP BY T2.'Customer Name' HAVING COUNT(T2.'Customer Name') > 3", "source_tables": ["south_superstore", "people"]}, "evidence": "name of the customers refers to Customer_Name; in 2015 refers to \"Order Date\" BETWEEN '2015-01-01' AND '2015-12-31'; more than 3 times refers to count(Order_ID) > 3"}
{"sample_id": 2419, "db_id": "superstore", "final": {"question": "State the highest profit made by Anna Chung's orders in the Central Superstore.", "sql": "SELECT MAX(T2.Profit) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T1.'Customer Name' = 'Anna Chung'", "source_tables": ["people", "central_superstore"]}, "evidence": "highest profit refers to max(Profit)"}
{"sample_id": 2420, "db_id": "superstore", "final": {"question": "How many orders were made by Corey Roper in 2015?", "sql": "SELECT COUNT(T2.'Customer ID') FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T1.'Customer Name' = 'Corey Roper' AND STRFTIME('%Y', T2.'Ship Date') = '2015'", "source_tables": ["people", "central_superstore"]}, "evidence": ""}
{"sample_id": 2421, "db_id": "superstore", "final": {"question": "Calculate the difference between the total sales in the East superstore and the total sales in the West superstore.", "sql": "SELECT SUM(T1.Sales) - SUM(T2.Sales) AS difference FROM east_superstore AS T1 INNER JOIN west_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID'", "source_tables": ["east_superstore", "west_superstore"]}, "evidence": "East superstore refers to Region = 'East'; West superstore refers to Region = 'West'; difference = subtract(sum(Sales) when Region = 'East', sum(Sales) when Region = 'West')"}
{"sample_id": 2422, "db_id": "superstore", "final": {"question": "What are the names of the ordered products that have profit deficiency in central superstore?", "sql": "SELECT DISTINCT T2.'Product Name' FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T2.Region = 'Central' AND T1.Profit < 0", "source_tables": ["product", "central_superstore"]}, "evidence": "names of the ordered products refers to Product Name; deficiency refers to profit value is negative; profit > 0"}
{"sample_id": 2423, "db_id": "superstore", "final": {"question": "In west superstore, what is the name and the shipping mode of the product that was ordered with the shortest shipment time?", "sql": "SELECT DISTINCT T2.'Product Name', T1.'Ship Mode' FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T2.Region = 'West' ORDER BY T1.'Ship Date' - T1.'Order Date' LIMIT 1", "source_tables": ["product", "west_superstore"]}, "evidence": "name refers to \"Product Name\"; shipping mode refers to Ship Mode; shortest shipment time refers to min(subtract(Ship Date, Order Date))"}
{"sample_id": 2424, "db_id": "superstore", "final": {"question": "How many orders of O'Sullivan Plantations 2-Door Library in Landvery Oak in central superstore were shipped through the shipping mode with the fastest delivery speed?", "sql": "SELECT COUNT(DISTINCT T1.'Order ID') FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T2.'Product Name' = 'O''Sullivan Plantations 2-Door Library in Landvery Oak' AND T2.Region = 'Central' AND T1.'Ship Mode' = 'First Class'", "source_tables": ["product", "central_superstore"]}, "evidence": "'O'Sullivan Cherrywood Estates Traditional Bookcase' is the \"Product Name\"; shipping mode with the fastest delivery speed refers to \"Ship Mode\" = 'First Class'"}
{"sample_id": 2425, "db_id": "superstore", "final": {"question": "What is the name of the corporate customer from Rhode Island who had the highest number of orders in 2016 from the east superstore?", "sql": "SELECT T2.'Customer Name' FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T2.Segment = 'Corporate' AND T2.State = 'Rhode Island' AND T2.Region = 'East' AND STRFTIME('%Y', T1.'Order Date') = '2016' GROUP BY T2.'Customer Name' ORDER BY COUNT(T2.'Customer Name') DESC LIMIT 1", "source_tables": ["people", "east_superstore"]}, "evidence": "corporate customer refers to Segment = 'Corporate'; Rhode Island refers to State = 'Rhode Island'; in 2016 refers to \"Order Date\" BETWEEN '2016-01-01' AND '2016-12-31'; east superstore refers to Region = 'East'; highest number of orders refers to max(order_number); name of corporate customer refers to \"Customer Name\""}
{"sample_id": 2426, "db_id": "superstore", "final": {"question": "Among the orders with sales value of no less than 5,000 in west superstore, how many were bought by the customers in California?", "sql": "SELECT COUNT(DISTINCT T1.'Order ID') FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' INNER JOIN people AS T3 ON T3.'Customer ID' = T1.'Customer ID' WHERE T1.Sales > 5000 AND T3.State = 'California' AND T2.Region = 'West'", "source_tables": ["product", "west_superstore", "people"]}, "evidence": "customers in California refers to State = 'California'; orders with sales value of no less than 5,000 refers to Sales > = 5,000"}
{"sample_id": 2427, "db_id": "superstore", "final": {"question": "In which segment does the customer who purchased the product from the east superstore with the highest original price belong?", "sql": "SELECT T2.Segment FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T1.'Product ID' WHERE T1.Region = 'East' ORDER BY (T1.Sales / (1 - T1.Discount)) DESC LIMIT 1", "source_tables": ["people", "east_superstore", "product"]}, "evidence": "highest original price refers to max(divide(Sales, subtract(1, Discount)))"}
{"sample_id": 2428, "db_id": "superstore", "final": {"question": "What is the shipment duration for order number CA-2011-134103?", "sql": "SELECT DISTINCT strftime('%J', 'Ship Date') - strftime('%J', 'Order Date') AS duration FROM central_superstore WHERE 'Order ID' = 'CA-2011-134103'", "source_tables": ["central_superstore"]}, "evidence": "shipment duration = subtract(\"Ship Date\", \"Order Date\"); order number CA-2011-134103 refers to \"Order ID\" = 'CA-2011-134103'"}
{"sample_id": 2429, "db_id": "superstore", "final": {"question": "How many orders with a quantity greater than 5 have been shipped by the fastest delivery method?", "sql": "SELECT COUNT(DISTINCT 'Order ID') FROM central_superstore WHERE Quantity > 5 AND 'Ship Mode' = 'First Class'", "source_tables": ["central_superstore"]}, "evidence": "orders with a quantity greater than 5 refers to Quantity > 5; shipped by the fastest delivery method refers to Ship Mode = 'First Class'"}
{"sample_id": 2430, "db_id": "superstore", "final": {"question": "Please list any three orders that caused a loss to the company.", "sql": "SELECT 'Order ID' FROM central_superstore WHERE Profit < 0 LIMIT 3", "source_tables": ["central_superstore"]}, "evidence": "caused a loss to the company refers to Profit < 0"}
{"sample_id": 2431, "db_id": "superstore", "final": {"question": "Which product did Phillina Ober buy?", "sql": "SELECT DISTINCT T3.'Product Name' FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T2.'Product ID' WHERE T1.'Customer Name' = 'Phillina Ober'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "product refers to \"Product Name\""}
{"sample_id": 2432, "db_id": "superstore", "final": {"question": "Who was the customer in the South Region superstore who bought the most \u201cHon Multipurpose Stacking Arm Chairs\"?", "sql": "SELECT T2.'Customer Name' FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T1.'Product ID' WHERE T3.'Product Name' = 'Hon Multipurpose Stacking Arm Chairs' GROUP BY T2.'Customer Name' ORDER BY COUNT(T2.'Customer Name') DESC LIMIT 1", "source_tables": ["south_superstore", "people", "product"]}, "evidence": "customer refers to \"Customer Name\"; \u201cHon Multipurpose Stacking Arm Chairs\" is the \"Product Name\";"}
{"sample_id": 2433, "db_id": "superstore", "final": {"question": "What is the profit from selling the \"O'Sullivan Living Dimensions 2-Shelf Bookcases\"?", "sql": "SELECT DISTINCT T1.Profit FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T2.'Product Name' = 'O''Sullivan Living Dimensions 2-Shelf Bookcases'", "source_tables": ["product", "central_superstore"]}, "evidence": "\"O'Sullivan Living Dimensions 2-Shelf Bookcases\" refers to \"Product Name\""}
{"sample_id": 2434, "db_id": "superstore", "final": {"question": "How many of the \"Hon Pagoda Stacking Chairs\" have been sold in total in the west superstore?", "sql": "SELECT SUM(T1.Quantity) FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T2.'Product Name' = 'Hon Pagoda Stacking Chairs'", "source_tables": ["product", "west_superstore"]}, "evidence": "Hon Pagoda Stacking Chairs' is the \"Product Name\"; west superstore refers to Region = 'West'"}
{"sample_id": 2435, "db_id": "superstore", "final": {"question": "How many orders purchased by Aaron Bergman have been delivered with the slowest shipping speed?", "sql": "SELECT COUNT(*) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T1.'Customer Name' = 'Aaron Bergman' AND T2.'Ship Mode' = 'Standard Class'", "source_tables": ["people", "central_superstore"]}, "evidence": "slowest shipping speed refers to \"Ship Mode\" = 'Standard Class'"}
{"sample_id": 2436, "db_id": "superstore", "final": {"question": "What is the original price of the \"Black Avery Flip-Chart Easel Binder\"?", "sql": "SELECT T1.Sales / (1 - T1.Discount) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T2.'Product Name' = 'Blackstonian Pencils'", "source_tables": ["product", "central_superstore"]}, "evidence": "\"Black Avery Flip-Chart Easel Binder\" is the \"Product Name\"; original price = divide(Sales, subtract(1, Discount))"}
{"sample_id": 2477, "db_id": "shooting", "final": {"question": "How many incidents in which the subject's weapon was a vehicle were investigated by a female officer?", "sql": "SELECT COUNT(T1.case_number) FROM incidents AS T1 INNER JOIN officers AS T2 ON T1.case_number = T2.case_number WHERE T1.subject_weapon = 'Vehicle' AND T2.gender = 'F'", "source_tables": ["incidents", "officers"]}, "evidence": "subject's weapon was a vehicle refers to subject_weapon = 'Vehicle'; female refers to gender = 'F'"}
{"sample_id": 2478, "db_id": "shooting", "final": {"question": "In how many cases where the subject was a female was the subject's status listed as Deceased?", "sql": "SELECT COUNT(T1.case_number) FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T2.gender = 'F' AND T1.subject_statuses = 'Deceased'", "source_tables": ["incidents", "subjects"]}, "evidence": " female refers to gender = 'F'; subject's status listed as Deceased refers to subject_statuses = 'Deceased'"}
{"sample_id": 2479, "db_id": "shooting", "final": {"question": "Of the black officers, how many of them investigated cases between the years 2010 and 2015?", "sql": "SELECT COUNT(T1.case_number) FROM officers AS T1 INNER JOIN incidents AS T2 ON T2.case_number = T1.case_number WHERE T1.race = 'B' AND T2.date BETWEEN '2010-01-01' AND '2015-12-31'", "source_tables": ["incidents", "officers"]}, "evidence": "black refers to race = 'B'; between the years 2010 and 2015 refers to date between '2010-01-01' and '2015-12-31'; case refers to case_number"}
{"sample_id": 2480, "db_id": "shooting", "final": {"question": "How many instances were found in June 2015?", "sql": "SELECT COUNT(case_number) FROM incidents WHERE date BETWEEN '2015-06-01' AND '2015-06-30'", "source_tables": ["incidents"]}, "evidence": "in June 2015 refers to date between '2015-06-01' and '2015-06-30'; record number refers to case_number"}
{"sample_id": 2481, "db_id": "shooting", "final": {"question": "How many people were injured between 2006 and 2014 as a result of a handgun?", "sql": "SELECT COUNT(location) FROM incidents WHERE subject_weapon = 'Handgun' AND subject_statuses = 'Injured' AND date BETWEEN '2006-01-01' AND '2013-12-31'", "source_tables": ["incidents"]}, "evidence": "injured refers to subject_statuses = 'injured'; between 2006 and 2014 refers to date between '2006-01-01' and '2013-12-31'; handgun refers to subject_weapon = 'handgun'; where the incidents took place refers to location"}
{"sample_id": 2502, "db_id": "genes", "final": {"question": "Lists all genes by identifier number located in the cytoplasm and whose function is metabolism.", "sql": "SELECT DISTINCT GeneID FROM Genes WHERE Localization = 'cytoplasm' AND Function = 'METABOLISM'", "source_tables": ["genes"]}, "evidence": ""}
{"sample_id": 2503, "db_id": "genes", "final": {"question": "How many different genes do we have if we add those located in the plasma and in the nucleus?", "sql": "SELECT COUNT(GeneID) FROM Classification WHERE Localization IN ('plasma', 'nucleus')", "source_tables": ["classification"]}, "evidence": ""}
{"sample_id": 2504, "db_id": "genes", "final": {"question": "What kind of expression correlation occurs in physical type interacting gene pairs and what percentage of these are negatively correlated?", "sql": "SELECT Expression_Corr FROM Interactions WHERE Type = 'Physical' UNION ALL SELECT CAST(SUM(Expression_Corr < 0) AS REAL) * 100 / COUNT(*) FROM Interactions WHERE Type = 'Physical'", "source_tables": ["interactions"]}, "evidence": "If the Expression_Corr value is negative then it's negatively correlated. Percentage of Negative Correlation = count(negative Expression_Corr physical type) / count(Expression_Corr physical type) * 100%"}
{"sample_id": 2505, "db_id": "genes", "final": {"question": "What percentage of genes located in the cytoskeleton are of unknown class? And of these, how many are not conditional phenotypes?", "sql": "SELECT SUM(Localization = 'cytoskeleton' AND Phenotype = 'Conditional phenotypes') , CAST(SUM(Localization = 'cytoskeleton') AS REAL) * 100 / COUNT(GeneID) FROM Genes;", "source_tables": ["genes"]}, "evidence": "Percentage = count(genes located in the cytoskeleton unknown class) / count(genes located in the cytoskeleton) * 100%"}
{"sample_id": 2549, "db_id": "app_store", "final": {"question": "Which apps have 5 rating? List out then application name.", "sql": "SELECT DISTINCT App FROM playstore WHERE Rating = 5", "source_tables": ["playstore"]}, "evidence": "application name refers to App;"}
{"sample_id": 2550, "db_id": "app_store", "final": {"question": "Which apps have been reviewed more than 75 000 000 times and the content is suitable for teenagers?", "sql": "SELECT DISTINCT App FROM playstore WHERE Reviews > 75000000 AND 'Content Rating' = 'Teen'", "source_tables": ["playstore"]}, "evidence": "Reviews>75000000; suitable for teenagers refers to Content Rating = 'Teen';"}
{"sample_id": 2551, "db_id": "app_store", "final": {"question": "List out genre that have downloads more than 1000000000.", "sql": "SELECT Genres FROM playstore WHERE Installs = '1,000,000,000+' GROUP BY Genres", "source_tables": ["playstore"]}, "evidence": "downloads and installs are synonyms; Installs = '1,000,000,000+';"}
{"sample_id": 2552, "db_id": "app_store", "final": {"question": "What is the average price for a dating application?", "sql": "SELECT AVG(Price) FROM playstore WHERE Genres = 'Dating'", "source_tables": ["playstore"]}, "evidence": "average price = AVG(Price where Genre = 'Dating'); dating application refers to Genre = 'Dating';"}
{"sample_id": 2553, "db_id": "app_store", "final": {"question": "What is the average download for entertainment apps with size no more than 1.0 M?", "sql": "SELECT AVG(CAST(REPLACE(REPLACE(Installs, ',', ''), '+', '') AS INTEGER)) FROM playstore WHERE Category = 'ENTERTAINMENT' AND Size < '1.0M'", "source_tables": ["playstore"]}, "evidence": "downloads and installs are synonyms; entertainment apps refers to Category = 'ENTERTAINMENT';"}
{"sample_id": 2554, "db_id": "app_store", "final": {"question": "What is the average review number for application with 5 rating?", "sql": "SELECT AVG(Reviews) FROM playstore WHERE Rating = 5", "source_tables": ["playstore"]}, "evidence": "average review = AVG(Review); application refers to app; Rating = 5;"}
{"sample_id": 2555, "db_id": "app_store", "final": {"question": "List out the top 3 genre for application with a sentiment review greater than 0.5.", "sql": "SELECT Genres FROM playstore WHERE App IN ( SELECT App FROM user_reviews WHERE Sentiment = 'Positive' AND Sentiment_Polarity > 0.5 ORDER BY Sentiment_Polarity DESC LIMIT 3 )", "source_tables": ["user_reviews", "playstore"]}, "evidence": "sentiment review refers to Sentiment_Polarity; Sentiment_Polarity>0.5;"}
{"sample_id": 2556, "db_id": "app_store", "final": {"question": "What is the percentage of application with 4.7 rating having more positives sentiment than negative sentiment?", "sql": "SELECT CAST(COUNT(CASE WHEN ( SELECT COUNT(CASE WHEN Sentiment = 'Positive' THEN 1 ELSE NULL END) - COUNT(CASE WHEN Sentiment = 'Negative' THEN 1 ELSE NULL END) FROM user_reviews GROUP BY App ) > 0 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.Sentiment) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Rating = 4.7", "source_tables": ["user_reviews", "playstore"]}, "evidence": "percentage = DIVIDE(SUBTRACT(SUM(Sentiment = 'Positive')), (SUM(Sentiment = 'Negative')), SUM(Sentiment = 'Negative')) as percentage; having more positive sentiment than negative sentiment refers to Sentiment = 'Positive'>Sentiment = 'Negative';"}
{"sample_id": 2557, "db_id": "app_store", "final": {"question": "List down app that does not have negative sentiment and give their average rating?", "sql": "SELECT T1.App, AVG(T2.Sentiment_Polarity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Sentiment != 'Negative' GROUP BY T1.App", "source_tables": ["user_reviews", "playstore"]}, "evidence": "doest not have negative sentiment refers to Sentiment! = 'Negative'; average = AVG(Sentiment_Polarity);"}
{"sample_id": 2558, "db_id": "app_store", "final": {"question": "List down application that have not been updated since 2015. What is the percentage of this application having more negative sentiment than positive sentiment?", "sql": "SELECT CAST((( SELECT COUNT(*) Po FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE SUBSTR(T1.'Last Updated', -4, 4) > '2015' AND T2.Sentiment = 'Positive' ) - ( SELECT COUNT(*) Ne FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE SUBSTR(T1.'Last Updated', -4, 4) > '2015' AND T2.Sentiment = 'Negative' )) AS REAL) * 100 / ( SELECT COUNT(*) NUM FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE SUBSTR(T1.'Last Updated', -4, 4) > '2015' )", "source_tables": ["user_reviews", "playstore"]}, "evidence": "percentage = DIVIDE(SUBTRACT(SUM(Sentiment = 'Positive')), (SUM(Sentiment = 'Negative'))), (SUM(Sentiment = 'Negative')) as percent; Last Updated>'2015';"}
{"sample_id": 2559, "db_id": "app_store", "final": {"question": "What is the percentage for free application with a rating 4.5 and above have not been updated since 2018?", "sql": "SELECT CAST(SUM(CASE WHEN SUBSTR('Last Updated', -4) > '2018' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(App) PER FROM playstore WHERE Type = 'Free' AND Rating >= 4.5", "source_tables": ["playstore"]}, "evidence": "paid refers to Type = 'Paid'; application refers to App; Rating>4.5; Last Updated>'2018; percentage = DIVIDE(SUM(Genres = 'Mature 17+' and Rating>4.5 and\u00a0substr(\"Last Updated\",-4,4)>'2018' )), (COUNT(App)) as percent;"}
{"sample_id": 2560, "db_id": "app_store", "final": {"question": "What genre does Honkai Impact 3rd belong to?", "sql": "SELECT DISTINCT Genres FROM playstore WHERE App = 'Honkai Impact 3rd'", "source_tables": ["playstore"]}, "evidence": "Honkai Impact 3rd is the App;"}
{"sample_id": 2673, "db_id": "regional_sales", "final": {"question": "Calculate the average monthly order and percentage of warehouse \"WARE-NMK1003\" in 2019. Among them, mention number of orders for floor lamps.", "sql": "SELECT CAST(SUM(CASE WHEN T2.WarehouseCode = 'WARE-NMK1003' THEN 1 ELSE 0 END) AS REAL) / 12 , CAST(SUM(CASE WHEN T2.WarehouseCode = 'WARE-NMK1003' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.OrderNumber), COUNT(CASE WHEN T1.'Product Name' = 'Floor Lamps' AND T2.WarehouseCode = 'WARE-NMK1003' THEN T2.'Order Quantity' ELSE NULL END) FROM Products AS T1 INNER JOIN 'Sales Orders' AS T2 ON T2._ProductID = T1.ProductID WHERE T2.OrderDate LIKE '%/%/19'", "source_tables": ["sales orders", "products"]}, "evidence": "\"WARE-NMK1003\" is the WarehouseCode; in 2019 refers to SUBSTR(OrderDate, -2) = '19'; average = Divide (Count (OrderNumber where SUBSTR(OrderDate, -2) = '19'), 12); Percentage = Divide (Count(OrderNumber where WarehouseCode = 'WARE-NMK1003'), Count(OrderNumber)) * 100; 'Floor Lamps' is the Product Name; number of orders refers to Count(OrderNumber)"}
{"sample_id": 2674, "db_id": "regional_sales", "final": {"question": "Indicate the procured dates for the customer whose ID is 11.", "sql": "SELECT DISTINCT T FROM ( SELECT IIF(_CustomerID = 11, ProcuredDate, NULL) AS T FROM 'Sales Orders' ) WHERE T IS NOT NULL", "source_tables": ["sales orders"]}, "evidence": "ID is 11 refers to _CustomerID = 11;"}
{"sample_id": 2675, "db_id": "regional_sales", "final": {"question": "How many orders through distributor were for the minimum quantity?", "sql": "SELECT SUM(CASE WHEN 'Order Quantity' = 1 AND 'Sales Channel' = 'Distributor' THEN 1 ELSE 0 END) FROM 'Sales Orders'", "source_tables": ["sales orders"]}, "evidence": "\"Distributor\" is the Sales Channel; minimum quantity refers to Min(Order Quantity)"}
{"sample_id": 2676, "db_id": "regional_sales", "final": {"question": "List by ID all sales teams that have sold products at a 10% discount in store.", "sql": "SELECT DISTINCT T FROM ( SELECT CASE  WHEN 'Discount Applied' = '0.1' AND 'Sales Channel' = 'In-Store' THEN _SalesTeamID ELSE NULL END AS T FROM 'Sales Orders' ) WHERE T IS NOT NULL", "source_tables": ["sales orders"]}, "evidence": "ID refers to _SalesTeamID; 10% discount refers to Discount Applied = 0.1; 'In-Store' is the Sales Channel"}
{"sample_id": 2677, "db_id": "regional_sales", "final": {"question": "How many Borough-type stores located in the city of Brooklyn have a population of less than 3 million?", "sql": "SELECT SUM(CASE WHEN Population < 3000000 AND Type = 'Borough' AND 'City Name' = 'Brooklyn' THEN 1 ELSE 0 END) FROM 'Store Locations'", "source_tables": ["store locations"]}, "evidence": "\"Brooklyn\" is the CityName; population of less than 3 million refers to Population < 3000000"}
{"sample_id": 2678, "db_id": "regional_sales", "final": {"question": "How many states are in the Midwest region?", "sql": "SELECT COUNT(DISTINCT T) FROM ( SELECT CASE  WHEN Region = 'Midwest' THEN State ELSE NULL END AS T FROM Regions ) WHERE T IS NOT NULL", "source_tables": ["regions"]}, "evidence": ""}
{"sample_id": 2679, "db_id": "regional_sales", "final": {"question": "What are the top 10 products with the highest net profit?", "sql": "SELECT T2.'Product Name' FROM 'Sales Orders' AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID GROUP BY T1._ProductID ORDER BY SUM(REPLACE(T1.'Unit Price', ',', '') - REPLACE(T1.'Unit Cost', ',', '')) DESC LIMIT 10", "source_tables": ["sales orders", "products"]}, "evidence": "products refers to Product Name; highest net profit = Max(Subtract(Unit Price, Unit Cost))"}
{"sample_id": 2680, "db_id": "regional_sales", "final": {"question": "Indicate the name of the customers who have placed an order of 3 units in February 2018.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.'Order Quantity' = 3 AND T2.OrderDate LIKE '2/%/18' THEN T1.'Customer Names' END AS T FROM Customers T1 INNER JOIN 'Sales Orders' T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL", "source_tables": ["sales orders", "customers"]}, "evidence": "name of customer refers to Customer Names; order of 3 unit refers to Order Quantity = 3; in February 2018 refers to OrderDate LIKE '2/%/18'"}
{"sample_id": 2681, "db_id": "regional_sales", "final": {"question": "What are the names of the sales teams that have served to customer Apotheca, Ltd?", "sql": "SELECT DISTINCT T3.'Sales Team' FROM Customers AS T1 INNER JOIN 'Sales Orders' AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN 'Sales Team' AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T1.'Customer Names' = 'Apotheca, Ltd'", "source_tables": ["sales orders", "sales team", "customers"]}, "evidence": "name of sales team refers to Sales Team; 'Apotheca, Ltd' is the Customer Names"}
{"sample_id": 2682, "db_id": "regional_sales", "final": {"question": "In which regions are the stores that have shipped products through the WARE-UHY1004 warehouse?", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T3.WarehouseCode = 'WARE-UHY1004' THEN T1.Region END AS T FROM Regions T1 INNER JOIN 'Store Locations' T2 ON T2.StateCode = T1.StateCode INNER JOIN 'Sales Orders' T3 ON T3._StoreID = T2.StoreID ) WHERE T IS NOT NULL", "source_tables": ["regions", "sales orders", "store locations"]}, "evidence": "\"WARE-UHY1004\" is the WarehouseCode"}
{"sample_id": 2683, "db_id": "regional_sales", "final": {"question": "List all the cities where Shawn Torres sells Audio products.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T4.'Product Name' = 'Audio' AND T3.'Sales Team' = 'Shawn Torres' THEN T1.'City Name' ELSE NULL END AS T FROM 'Store Locations' T1 INNER JOIN 'Sales Orders' T2 ON T2._StoreID = T1.StoreID INNER JOIN 'Sales Team' T3 ON T3.SalesTeamID = T2._SalesTeamID INNER JOIN Products T4 ON T4.ProductID = T2._ProductID ) WHERE T IS NOT NULL", "source_tables": ["sales orders", "sales team", "products", "store locations"]}, "evidence": "\"Shawn Torres\" is the name of Sales Team; Audio product refers to Product Name = 'Audio'"}
{"sample_id": 2684, "db_id": "regional_sales", "final": {"question": "Lists the name of the product and customer who placed an order on 10/21/18 and it was delivered on 11/21/19.", "sql": "SELECT T3.'Product Name', T1.'Customer Names' FROM Customers AS T1 INNER JOIN 'Sales Orders' AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID WHERE T2.OrderDate = '10/21/18' AND T2.DeliveryDate = '11/21/19'", "source_tables": ["sales orders", "products", "customers"]}, "evidence": "ordered on 10/21/18 refers to OrderDate = '10/21/18'; delivered on 11/21/19 refers to DeliveryDate = '11/21/19'; name of product refers to Product Name"}
{"sample_id": 2685, "db_id": "regional_sales", "final": {"question": "How many stores procured products on October 27, 2018, in the city of Oregon?", "sql": "SELECT SUM(CASE WHEN T1.ProcuredDate = '10/27/18' AND T2.'City Name' = 'Orlando' THEN 1 ELSE 0 END) FROM 'Sales Orders' AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StoreID = T1._StoreID", "source_tables": ["sales orders", "store locations"]}, "evidence": "October 27, 2018 refers to ProcuredDate = '10/27/18'; 'Oregon' is the State"}
{"sample_id": 2686, "db_id": "regional_sales", "final": {"question": "What sales channels are used the most in the 3 places with the highest median income?", "sql": "SELECT 'Sales Channel' FROM ( SELECT T1.'Sales Channel' FROM 'Sales Orders' AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StoreID = T1._StoreID ORDER BY T2.'Median Income' DESC LIMIT 3 ) GROUP BY 'Sales Channel' ORDER BY COUNT('Sales Channel') DESC LIMIT 1", "source_tables": ["sales orders", "store locations"]}, "evidence": "highest median income refers to Max(Median Income)"}
{"sample_id": 2687, "db_id": "regional_sales", "final": {"question": "List the 5 sales teams that have made sales with the highest net profits.", "sql": "SELECT T2.'Sales Team' FROM 'Sales Orders' AS T1 INNER JOIN 'Sales Team' AS T2 ON T2.SalesTeamID = T1._SalesTeamID ORDER BY REPLACE(T1.'Unit Price', ',', '') - REPLACE(T1.'Unit Cost', ',', '') DESC LIMIT 5", "source_tables": ["sales orders", "sales team"]}, "evidence": "highest net profit = Max(Subtract (Unit Price, Unit Cost))"}
{"sample_id": 2688, "db_id": "regional_sales", "final": {"question": "What is the highest discount applied by the store located in a city of the state of Colorado whose land area is 111039036.", "sql": "SELECT MAX(T1.'Discount Applied') FROM 'Sales Orders' AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StoreID = T1._StoreID WHERE T2.State = 'Colorado' AND T2.'Land Area' = 111039036", "source_tables": ["sales orders", "store locations"]}, "evidence": "highest discount applied refers to Max(Discount Applied)"}
{"sample_id": 2689, "db_id": "regional_sales", "final": {"question": "How many different time zones are there in the Northeast region?", "sql": "SELECT COUNT(DISTINCT T2.'Time Zone') FROM Regions AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StateCode = T1.StateCode WHERE T1.Region = 'Northeast'", "source_tables": ["regions", "store locations"]}, "evidence": ""}
{"sample_id": 2690, "db_id": "regional_sales", "final": {"question": "What type of store is most popular in the South?", "sql": "SELECT DISTINCT CASE WHEN MAX(T2.Population) THEN T2.Type END FROM Regions AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StateCode = T1.StateCode", "source_tables": ["regions", "store locations"]}, "evidence": "in the South refers to Region = 'South'; type of store that is most popular refers to Max(Count(Type))"}
{"sample_id": 2691, "db_id": "regional_sales", "final": {"question": "To which region does the sales team that has used the WARE-MKL1006 warehouse the most times for its shipments belong?", "sql": "SELECT T2.Region FROM 'Sales Orders' AS T1 INNER JOIN 'Sales Team' AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.WarehouseCode = 'WARE-MKL1006' GROUP BY T2.Region ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1", "source_tables": ["sales orders", "sales team"]}, "evidence": "\"WARE-MKL1006\" is the WarehouseCode; most shipment to region refers to Max(Count(Region))"}
{"sample_id": 2692, "db_id": "regional_sales", "final": {"question": "In which city is the store with the highest sales order unit price located?", "sql": "SELECT T2.'City Name' FROM 'Sales Orders' AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StoreID = T1._StoreID WHERE REPLACE(T1.'Unit Price', ',', '') = ( SELECT REPLACE(T1.'Unit Price', ',', '') FROM 'Sales Orders' AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StoreID = T1._StoreID ORDER BY REPLACE(T1.'Unit Price', ',', '') DESC LIMIT 1 ) ORDER BY REPLACE(T1.'Unit Price', ',', '') DESC LIMIT 1", "source_tables": ["sales orders", "store locations"]}, "evidence": "highest sales order unit price refers to Max(Unit Price)"}
{"sample_id": 2693, "db_id": "regional_sales", "final": {"question": "How many online purchases did Ole Group make in May 2019?", "sql": "SELECT SUM(CASE WHEN T1.'Sales Channel' = 'Online' AND T2.'Customer Names' = 'Ole Group' AND T1.OrderDate LIKE '5/%/19' THEN 1 ELSE 0 END) FROM 'Sales Orders' AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID", "source_tables": ["sales orders", "customers"]}, "evidence": "\"Ole Group\" is the Customer Names; online purchase refers to Sales Channel = 'Online'; made in May 2019 refers to OrderDate LIKE '5/%/19'"}
{"sample_id": 2694, "db_id": "regional_sales", "final": {"question": "How many stores with less need for products, and purchased through a distributor, are located in Washtenaw County?", "sql": "SELECT SUM(CASE WHEN T1.'Order Quantity' = 1 AND T1.'Sales Channel' = 'Distributor' AND T2.County = 'Washtenaw County' THEN 1 ELSE 0 END) FROM 'Sales Orders' AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StoreID = T1._StoreID", "source_tables": ["sales orders", "store locations"]}, "evidence": "less need for products refers to Order Quantity = 1; purchased through a distributor refers to Sales Channel = 'Distributor'; 'Harri County' is the County"}
{"sample_id": 2695, "db_id": "regional_sales", "final": {"question": "What is the least purchased product by stores in the city of Santa Clarita?", "sql": "SELECT T1.'Product Name' FROM Products AS T1 INNER JOIN 'Sales Orders' AS T2 ON T2._ProductID = T1.ProductID INNER JOIN 'Store Locations' AS T3 ON T3.StoreID = T2._StoreID WHERE T3.'City Name' = 'Santa Clarita' GROUP BY T1.'Product Name' ORDER BY COUNT(T1.'Product Name') ASC LIMIT 1", "source_tables": ["sales orders", "products", "store locations"]}, "evidence": "least purchased product refers to Min(Count(Product Name)); 'Santa Clarita' is the City"}
{"sample_id": 2696, "db_id": "regional_sales", "final": {"question": "At what Latitude and Longitude is the store that has used the WARE-PUJ1005 warehouse the fewest times?", "sql": "SELECT T2.Latitude, T2.Longitude FROM 'Sales Orders' AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StoreID = T1._StoreID WHERE T1.WarehouseCode = 'WARE-PUJ1005' GROUP BY T2.StoreID ORDER BY COUNT(T1.WarehouseCode) ASC LIMIT 1", "source_tables": ["sales orders", "store locations"]}, "evidence": "WARE-PUJ1005 is the WarehouseCode; fewest times refers to Min (Count(WarehouseCode))"}
{"sample_id": 2697, "db_id": "regional_sales", "final": {"question": "What percentage of sell orders on 04/04/2020 were for the state of New York?", "sql": "SELECT CAST(SUM(CASE WHEN T2.State = 'New York' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM 'Sales Orders' AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderDate = '4/4/20'", "source_tables": ["sales orders", "store locations"]}, "evidence": "sales order on 04/04/2020 refers to OrderDate = '4/4/20'; 'New York' is\u00a0 the City Name; percentage = Divide (Sum(OrderNumber where City Name = 'New York'), Count (OrderNumber)) * 100"}
{"sample_id": 2698, "db_id": "regional_sales", "final": {"question": "What is the average land area of \u200b\u200bthe cities in which stores that purchased products for a unit price of 998.30 are located?", "sql": "SELECT AVG(T2.'Land Area') FROM 'Sales Orders' AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StoreID = T1._StoreID WHERE T1.'Unit Price' = '998.30'", "source_tables": ["sales orders", "store locations"]}, "evidence": "average land area = Divide (Sum(Land Area), Count(Land Area))"}
{"sample_id": 2699, "db_id": "regional_sales", "final": {"question": "What is the average household income in cities in the state of New Hampshire where there are stores of the type city?", "sql": "SELECT AVG(T2.'Household Income') FROM Regions AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StateCode = T1.StateCode WHERE T2.State = 'New Hampshire' AND T2.Type = 'City'", "source_tables": ["regions", "store locations"]}, "evidence": "\"New Hampshire\" is the State; average household income = AVG(Household Income)"}
{"sample_id": 2700, "db_id": "regional_sales", "final": {"question": "How many sales teams are there in the Midwest?", "sql": "SELECT SUM(CASE WHEN Region = 'Midwest' THEN 1 ELSE 0 END) FROM 'Sales Team'", "source_tables": ["sales team"]}, "evidence": "\"Midwest\" is the Region"}
{"sample_id": 2701, "db_id": "regional_sales", "final": {"question": "Indicate order numbers with an order date after 1/1/2018.", "sql": "SELECT DISTINCT T FROM ( SELECT CASE  WHEN OrderDate > '1/1/18' THEN OrderNumber ELSE NULL END AS T FROM 'Sales Orders' ) WHERE T IS NOT NULL", "source_tables": ["sales orders"]}, "evidence": "order date after 1/1/2018 refers to OrderDate > '1/1/2018'"}
{"sample_id": 2702, "db_id": "regional_sales", "final": {"question": "How many sales channels does the sales team have in the Midwest?", "sql": "SELECT COUNT(T1.'Sales Channel') FROM 'Sales Orders' AS T1 INNER JOIN 'Sales Team' AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.Region = 'Midwest'", "source_tables": ["sales orders", "sales team"]}, "evidence": "\"Midwest\" is the Region"}
{"sample_id": 2703, "db_id": "regional_sales", "final": {"question": "Which sales team has the other with the highest unit price?", "sql": "SELECT T2.'Sales Team' FROM 'Sales Orders' AS T1 INNER JOIN 'Sales Team' AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE REPLACE(T1.'Unit Price', ',', '') = ( SELECT REPLACE(T1.'Unit Price', ',', '') FROM 'Sales Orders' AS T1 INNER JOIN 'Sales Team' AS T2 ON T2.SalesTeamID = T1._SalesTeamID ORDER BY REPLACE(T1.'Unit Price', ',', '') DESC LIMIT 1 ) ORDER BY REPLACE(T1.'Unit Price', ',', '') DESC LIMIT 1", "source_tables": ["sales orders", "sales team"]}, "evidence": "highest unit price refers to Max(Unit Price)"}
{"sample_id": 2704, "db_id": "regional_sales", "final": {"question": "Which regions have online sales channels that have the most discounts?", "sql": "SELECT T2.Region FROM 'Sales Orders' AS T1 INNER JOIN 'Sales Team' AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.'Sales Channel' = 'Online' ORDER BY T1.'Discount Applied' DESC LIMIT 1", "source_tables": ["sales orders", "sales team"]}, "evidence": "most discount refers to Max(Discount Applied)"}
{"sample_id": 2773, "db_id": "european_football_1", "final": {"question": "Which country had the game that Away team made the most goals?", "sql": "SELECT T2.country FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division GROUP BY T2.country ORDER BY SUM(T1.FTAG) DESC LIMIT 1", "source_tables": ["matchs", "divisions"]}, "evidence": "the most goals refer to MAX(FTAG), which is a short name for Final-time Away-team Goals;"}
{"sample_id": 2774, "db_id": "european_football_1", "final": {"question": "For a game had a score of 1-8 in the year of 2011, what division was that game in? Give the full name of the division.", "sql": "SELECT T2.division, T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2011 AND T1.FTHG = 1 AND T1.FTAG = 8", "source_tables": ["matchs", "divisions"]}, "evidence": "2011 refers to season; a score of 1-8 refers to FTHG = '1' and FTAG = '8';"}
{"sample_id": 2775, "db_id": "european_football_1", "final": {"question": "Which division had the most games with more than 5 total field goals on 2020/2/22? Give the full name of the division?", "sql": "SELECT T2.division, T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.Date = '2020-02-22' AND T1.FTAG + T1.FTHG > 5 ORDER BY T1.FTAG + T1.FTHG DESC LIMIT 1", "source_tables": ["matchs", "divisions"]}, "evidence": "more than 5 total field goals refers to SUM(FTHG, FTAG)>5, which are short names for Final-time Home-team Goals and Final-time Away-team Goals; 2020/2/22 is a date;"}
{"sample_id": 2776, "db_id": "european_football_1", "final": {"question": "Give the full name of the divison that had the most 0-0 games.", "sql": "SELECT T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.FTAG = 0 AND T1.FTHG = 0 GROUP BY T2.division ORDER BY COUNT(T1.FTAG) DESC LIMIT 1", "source_tables": ["matchs", "divisions"]}, "evidence": "the most 0-0 games means a no-score draw and refers to MAX(COUNT(Div where FTHG = '0' and FTAG = '0'));"}
{"sample_id": 2777, "db_id": "european_football_1", "final": {"question": "How many Scottish League One games took place on the day that \"Pro Vercelli\" and \"Pescara\"had a 5-2 game?", "sql": "SELECT COUNT(T1.Date) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Scottish League One' AND T1.Date = ( SELECT Date FROM matchs WHERE FTHG = 5 AND FTAG = 2 AND HomeTeam = 'Pro Vercelli' AND AwayTeam = 'Pescara' )", "source_tables": ["matchs", "divisions"]}, "evidence": "Pro Vercelli and Pescara are names of teams; HomeTeam = 'Pro Vercelli'; AwayTeam = 'Pescara'; 5-2 is a score where FTHG = '5' and FTAG = '2'; Scottish League One is a name of division; games refer to Div;"}
{"sample_id": 2778, "db_id": "european_football_1", "final": {"question": "List the number of games that ended up with 5-0 in Greece.", "sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.country = 'Greece' AND T1.FTHG = 5 AND T1.FTAG = 0", "source_tables": ["matchs", "divisions"]}, "evidence": "5-0 is a score where FTHG = '5' and FTAG = '0'; Greece is a name of country; games refer to Div;"}
{"sample_id": 2779, "db_id": "european_football_1", "final": {"question": "Which country did Bradford Team belongs to?", "sql": "SELECT DISTINCT T2.country FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.HomeTeam = 'Bradford' OR T1.AwayTeam = 'Bradford'", "source_tables": ["matchs", "divisions"]}, "evidence": "Bradford team refers to HomeTeam = 'Bradford' or AwayTeam = 'Bradford';"}
{"sample_id": 2780, "db_id": "european_football_1", "final": {"question": "How many Eredivisie teams have played in 2008?", "sql": "SELECT COUNT(DISTINCT T1.HomeTeam) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Eredivisie' AND T1.season = 2008", "source_tables": ["matchs", "divisions"]}, "evidence": "Eredivisie is the name of division; 2008 refers to season; teams refer to HomeTeam;"}
{"sample_id": 2781, "db_id": "european_football_1", "final": {"question": "What's the home win ratio of the Bundesliga division in 2021?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.FTR = 'H' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.FTR) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T2.name = 'Bundesliga'", "source_tables": ["matchs", "divisions"]}, "evidence": "home win refers to FTR = 'H', where H stands for home victory; season = '2021'; Bundesliga is a name of division; DIVIDE(COUNT(Div where FTR = 'H, season = '2021' and name = 'Bundesliga'), COUNT(Div where season = '2021' and name = 'Bundesliga')) as percentage;"}
{"sample_id": 2782, "db_id": "european_football_1", "final": {"question": "For all the games ended up with 1-1, what percentage of them are from Liga NOS division?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.name = 'Liga NOS' THEN T1.Div ELSE NULL END) AS REAL) * 100 / COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.FTHG = 1 AND FTAG = 1", "source_tables": ["matchs", "divisions"]}, "evidence": "1-1 is a score where FTHG = '1' and FTAG = '1'; Liga NOS is the name of division; DIVIDE(COUNT(Div where FTHG = '1', FTAG = '1', name = 'Liga NOS'), COUNT(Div where FTHG = '1' and FTAG = '1')) as percentage;"}
{"sample_id": 2783, "db_id": "european_football_1", "final": {"question": "How many matches were held during the 2021 season's Premier League?", "sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T2.name = 'Premier League'", "source_tables": ["matchs", "divisions"]}, "evidence": "Premier League is the name of division;"}
{"sample_id": 2890, "db_id": "professional_basketball", "final": {"question": "List the champion (team name) and year from year 1950 to 1960.", "sql": "SELECT DISTINCT T1.name, T2.year FROM teams AS T1 JOIN series_post AS T2 ON T1.tmID = T2.tmIDWinner WHERE T2.round = 'F' AND T2.year BETWEEN 1950 AND 1960", "source_tables": ["series_post", "teams"]}, "evidence": "champion refers to round = 'F'; team name refers to teams.name; from year 1950 to 1960 refers to year between 1950 and 1960"}
{"sample_id": 2891, "db_id": "professional_basketball", "final": {"question": "Name the teams along with the coaches that went to 'Quarter Final' round in 1946.", "sql": "SELECT DISTINCT T1.coachID, T3.name FROM coaches AS T1 JOIN series_post AS T2 ON T1.tmID = T2.tmIDWinner JOIN teams AS T3 ON T3.tmID = T1.tmID WHERE T2.round = 'QF' AND T2.year = 1946", "source_tables": ["series_post", "coaches", "teams"]}, "evidence": "team name refers to teams.name; coach refers to coachID; 'Quarter Final' round refers to round = 'QF'; in 1946 refers to year = 1946"}
{"sample_id": 2892, "db_id": "professional_basketball", "final": {"question": "List out all the players fullname who won the championship in 1970.", "sql": "SELECT DISTINCT T3.firstName, T3.middleName, T3.lastName FROM series_post AS T1 INNER JOIN players_teams AS T2 ON T1.tmIDWinner = T2.tmID INNER JOIN players AS T3 ON T3.playerID = T2.playerID WHERE T1.year = 1970 AND T1.round = 'F'", "source_tables": ["series_post", "players_teams", "players"]}, "evidence": "full name refers to firstName, middleName, lastName; won the championship refers to round = 'F'; in 1970 refers to year = 1970"}
{"sample_id": 2893, "db_id": "professional_basketball", "final": {"question": "From which college was the player who won the most award in 1970.", "sql": "SELECT college FROM players WHERE playerID = ( SELECT playerID FROM awards_players WHERE year = 1970 GROUP BY playerID ORDER BY COUNT(award) DESC LIMIT 1 )", "source_tables": ["players", "awards_players"]}, "evidence": "college refers to highSchool; won the most award refers to max(count(award)); in 1970 refers to year = 1970"}
{"sample_id": 2894, "db_id": "professional_basketball", "final": {"question": "Name the youngest player who ever won \"Rookie of the Year\".", "sql": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Rookie of the Year' ORDER BY T1.birthDate DESC LIMIT 1", "source_tables": ["players", "awards_players"]}, "evidence": "player name refers to playerID; the youngest refers to max(birthDate); won \"Rookie of the Year\" refers to award = 'Rookie of the Year'"}
{"sample_id": 2895, "db_id": "professional_basketball", "final": {"question": "List the full name of players who are drafted from round 1 in 1973 but not born in USA.", "sql": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN draft AS T2 ON T1.playerID = T2.playerID WHERE T2.draftRound = 1 AND T1.birthCountry != 'USA' AND T2.draftYear = 1973", "source_tables": ["players", "draft"]}, "evidence": "full name refers to firstName, middleName, lastName; in 1973 refers to year = 1973; not born in USA refers to birthCountry <> 'USA'"}
{"sample_id": 2896, "db_id": "professional_basketball", "final": {"question": "What is the percentage of offense rebounds from the total rebounds of the players in year 2000.", "sql": "SELECT CAST(SUM(T2.o_rebounds) AS REAL) * 100 / SUM(T2.rebounds) FROM players_teams AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 2000", "source_tables": ["player_allstar", "players_teams"]}, "evidence": "in year 2000 refers to year = 2000; percentage = divide(sum(o_rebounds), sum(rebounds)) * 100%"}
{"sample_id": 2897, "db_id": "professional_basketball", "final": {"question": "List the year, team and coach that with winning rate of above 75%.", "sql": "SELECT DISTINCT T1.year, T2.name, T1.coachID FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID WHERE CAST(T1.won AS REAL) / CAST((T1.won + T1.lost) AS REAL) > 0.75", "source_tables": ["coaches", "teams"]}, "evidence": "team refers to teams.name; coach refers to coachID; winning rate of above 75% refers to divide(won, add(won, lost)) > 0.75"}
{"sample_id": 2898, "db_id": "professional_basketball", "final": {"question": "List all the coatches of the Oklahoma City Thunder", "sql": "SELECT DISTINCT coachID FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID WHERE name = 'Oklahoma City Thunder'", "source_tables": ["coaches", "teams"]}, "evidence": "coach refers to coachID; Oklahoma City Thunder refers to name = 'Oklahoma City Thunder'"}
{"sample_id": 2899, "db_id": "professional_basketball", "final": {"question": "How many players, in games played in 1990, achieved 50% or less of oRebounds than dRebounds.", "sql": "SELECT COUNT(playerID) FROM players_teams WHERE CAST(oRebounds AS REAL) * 100 / dRebounds <= 50 AND year = 1990", "source_tables": ["players_teams"]}, "evidence": "in 1990 refers to season_id = 1990; 50% or less of oRebounds than dRebounds refers to o_rebounds < = multiply(d_rebounds, 0.5)"}
{"sample_id": 2900, "db_id": "professional_basketball", "final": {"question": "How many players did not get more than 10 steals between the years 2000 and 2005?", "sql": "SELECT COUNT(DISTINCT playerID) FROM player_allstar WHERE season_id BETWEEN 2000 AND 2005 AND steals <= 10", "source_tables": ["player_allstar"]}, "evidence": "did not get more than 10 steals refers to count(steals) < = 10; between the years 2000 and 2005 refers to season_id between 2000 and 2005"}
{"sample_id": 2901, "db_id": "professional_basketball", "final": {"question": "Which player selected by Portland in 2nd draftRound won Rookie of the Year in 1971?", "sql": "SELECT T1.playerID FROM draft AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Rookie of the Year' AND T1.draftYear = 1971 AND T1.draftRound = 2", "source_tables": ["draft", "awards_players"]}, "evidence": "2nd draftRound refers to draftRound = 2; won Rookie of the Year refers to award = 'Rookie of the Year'; in 1971 refers to draftYear = 1971"}
{"sample_id": 2902, "db_id": "professional_basketball", "final": {"question": "How many All Star players who played in the 1973 season were black?", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id = 1973 AND T1.race = 'B'", "source_tables": ["player_allstar", "players"]}, "evidence": "1973 season refers to season_id = 1973; black refers to race = 'B'"}
{"sample_id": 2903, "db_id": "professional_basketball", "final": {"question": "Which winning team in the 1947 playoff quarterfinals managed to score 3,513 defensive points that same year?", "sql": "SELECT T2.tmID FROM series_post AS T1 INNER JOIN teams AS T2 ON T1.tmIDWinner = T2.tmID WHERE T1.year = 1947 AND T1.round = 'QF' AND T2.d_pts = 3513", "source_tables": ["series_post", "teams"]}, "evidence": "team refers to tmID; quarterfinal refers to round = 'QF'; score 3,513 defensive points refers to d_pts > = 3513"}
{"sample_id": 2904, "db_id": "professional_basketball", "final": {"question": "Percentage of games lost out of total games played by the Houston Mavericks", "sql": "SELECT CAST(SUM(lost) AS REAL) * 100 / SUM(games) FROM teams WHERE name = 'Houston Mavericks'", "source_tables": ["teams"]}, "evidence": "Houston Mavericks refers to name = 'Houston Mavericks'; percentage = divide(sum(lost), sum(games)) * 100%"}
{"sample_id": 2905, "db_id": "professional_basketball", "final": {"question": "Please list the players who received the \"Most Valuable Player\" award in the NBA league after the year of 1990, along with their IDs.", "sql": "SELECT playerID FROM awards_players WHERE year > 1990 AND award = 'Most Valuable Player' AND lgID = 'NBA'", "source_tables": ["awards_players"]}, "evidence": "player refers to playerID; \"Most Valuable Player\" award refers to award = 'Most Valuable Player'; after the year of 1990 refers to year > 1990; ID refers to playerID"}
{"sample_id": 2906, "db_id": "professional_basketball", "final": {"question": "How many times between 1975 and 1980 did the player abdulka01 play for LAL?", "sql": "SELECT COUNT(DISTINCT T2.year) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'LAL' AND T2.year BETWEEN 1975 AND 1980 AND T1.playerID = 'abdulka01'", "source_tables": ["players", "players_teams"]}, "evidence": "between 1975 and 1980 refers to year between 1975 and 1980; player abdulka01 refers to playerID = 'abdulka01'; play for LAL refers to tmID = 'LAL'"}
{"sample_id": 2907, "db_id": "professional_basketball", "final": {"question": "What is the percentage of coaches in 1969 who were awarded \"NBA Coach of the Year\"?", "sql": "SELECT CAST(SUM(CASE WHEN award = 'NBA Coach of the Year' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM awards_coaches WHERE year = 1969", "source_tables": ["awards_coaches"]}, "evidence": "in 1969 refers to year = 1969; awarded \"NBA Coach of the Year\" refers to award = 'NBA Coach of the Year'; percentage = divide(count(coachID where year = 1969 and award = 'NBA Coach of the Year'), count(coachID)) * 100%"}
{"sample_id": 2908, "db_id": "professional_basketball", "final": {"question": "What were the difference of the CHS team's winning rate between 1946 and 1947 in the post-season series games? Please provide your answer in percentages.", "sql": "SELECT CAST(SUM(CASE WHEN year = 1947 AND tmIDWinner = 'CHS' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN year = 1947 THEN 1 ELSE 0 END) - CAST(SUM(CASE WHEN year = 1946 AND tmIDWinner = 'CHS' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN year = 1946 THEN 1 ELSE 0 END) FROM series_post", "source_tables": ["series_post"]}, "evidence": "CHS team refers to tmIDWinner = 'CHS'; difference = subtract(divide(count(series_post where year = 1947 and tmIDWinner = 'CHS'), count(series_post where year = 1947)), divide(count(series_post where year = 1946 and tmIDWinner = 'CHS'), count(series_post where year = 1946)))"}
{"sample_id": 2909, "db_id": "professional_basketball", "final": {"question": "How many awards were given out in 2010 to players who attended high school in Chicago?", "sql": "SELECT COUNT(T1.award) FROM awards_players AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 2010 AND T2.hsCity = 'Chicago'", "source_tables": ["players", "awards_players"]}, "evidence": "in 2010 refers to year = 2010; attended high school in Chicago refers to college = 'Chicago'"}
{"sample_id": 2910, "db_id": "professional_basketball", "final": {"question": "What is the percentage of players who attended Auburn University and won an \"All-Defensive Second Team\" award?", "sql": "SELECT CAST(SUM(CASE WHEN T2.award = 'All-Defensive Second Team' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T1.college = 'Auburn'", "source_tables": ["players", "awards_players"]}, "evidence": "Auburn University refers to college = 'Auburn'; won an \"All-Defensive Second Team\" award refers to award = 'All-Defensive Second Team'; percentage = divide(count(playerID where award = 'All-Defensive Second Team'), count(playerID)) where college = 'Auburn' * 100%"}
{"sample_id": 2911, "db_id": "professional_basketball", "final": {"question": "Please list the top five players with the most steals in the year 1997. Please give their full name.", "sql": "SELECT DISTINCT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id = 1997 ORDER BY T2.steals DESC LIMIT 5", "source_tables": ["player_allstar", "players"]}, "evidence": "full name refers to firstName, middleName, lastName; in the year 1997 refers to year = 1997; the most steals refers to max(steals)"}
{"sample_id": 2912, "db_id": "professional_basketball", "final": {"question": "What is the name of the university that was drafted from the player who won the NBA Finals MVP in 1990?", "sql": "SELECT T1.college FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1990 AND T2.award = 'Finals MVP'", "source_tables": ["players", "awards_players"]}, "evidence": "name of the university refers to highSchool; NBA refers to lgID = 'NBA'; Finals MVP refers to award = 'Finals MVP'; in 1990 refers to year = 1990"}
{"sample_id": 2913, "db_id": "professional_basketball", "final": {"question": "Among the NBA All-star players in 1996 season , which have more than 70% free throw rate? Please give their player id.", "sql": "SELECT playerID FROM player_allstar WHERE season_id = 1996 AND CAST(ft_made AS REAL) * 100 / ft_attempted > 70", "source_tables": ["player_allstar"]}, "evidence": "NBA refers to lgID = 'NBA'; in 1996 season refers to season_id = 1996; more than 70% free throw rate refers to ft_made > = 0 AND ft_attempted > 0 AND divide(ft_made, ft_attempted) > 0.7"}
{"sample_id": 2914, "db_id": "professional_basketball", "final": {"question": "From 1980 to 1983, how many of the NBA All-Star players have more than 60% three point rate?", "sql": "SELECT DISTINCT T2.playerID FROM player_allstar AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.year BETWEEN 1980 AND 1983 AND T1.three_made / T1.three_attempted > 0.6", "source_tables": ["player_allstar", "players_teams"]}, "evidence": "from 1980 to 1983 refers to year BETWEEN 1980 and 1983; NBA refers to lgID = 'NBA'; more than 60% three point rate refers to divide(threeMade, threeAttempted) > 0.6"}
{"sample_id": 2915, "db_id": "professional_basketball", "final": {"question": "Among the NBA winning coaches, which are from STL team? Please list their coach id.", "sql": "SELECT DISTINCT T2.coachID FROM coaches AS T1 INNER JOIN awards_coaches AS T2 ON T1.coachID = T2.coachID WHERE T1.tmID = 'STL' AND T1.lgID = 'NBA'", "source_tables": ["coaches", "awards_coaches"]}, "evidence": "NBA refers to lgID = 'NBA'; STL team refers to tmID = 'STL'"}
{"sample_id": 2916, "db_id": "professional_basketball", "final": {"question": "How many times have coaches who were from CHI been awarded as NBA Coach of the Year?", "sql": "SELECT COUNT(DISTINCT T2.coachID) FROM coaches AS T1 INNER JOIN awards_coaches AS T2 ON T1.coachID = T2.coachID WHERE T1.tmID = 'CHI' AND T2.award = 'NBA Coach of the Year'", "source_tables": ["coaches", "awards_coaches"]}, "evidence": "CHI refers to tmID = 'CHI'; awarded Coach of the Year refers to award = 'Coach of the Year'; NBA refers to lgID = 'NBA'"}
{"sample_id": 2917, "db_id": "professional_basketball", "final": {"question": "Of the players drafted in NBA between 1990 and 2000, who has the most points in all-star? List the player's first name and last name.", "sql": "SELECT T3.firstname, T3.lastname FROM player_allstar AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID INNER JOIN draft AS T3 ON T1.playerID = T3.playerID WHERE T2.year BETWEEN 1990 AND 2000 ORDER BY T1.points DESC LIMIT 1", "source_tables": ["player_allstar", "draft", "awards_players"]}, "evidence": "NBA refers to lgID = 'NBA'; between 1990 and 2000 refers to year between 1990 and 2000; the most points refers to max(points)"}
{"sample_id": 2918, "db_id": "professional_basketball", "final": {"question": "Which player from Wake Forest college did the most offensive rebounds than defensive rebounds in the all-star? Please mention the full name of the player including the middle name if have any.", "sql": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.college = 'Wake Forest' AND T2.o_rebounds > T2.d_rebounds", "source_tables": ["player_allstar", "players"]}, "evidence": "Wake Forest college refers to highSchool = 'Wake Forest college'; did the most offensive rebounds than defensive rebounds refers to max(subtract(sum(oRebounds), sum(dRebounds))); full name refers to first_name, middle_name, last_name"}
{"sample_id": 2919, "db_id": "professional_basketball", "final": {"question": "Find the full name of the player born in Atlanta and have the highest number of blocks. Also, in which team did this player perform the most number of blocks?", "sql": "SELECT T1.firstName, T1.lastName, T2.tmID FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCity = 'Atlanta' ORDER BY T2.blocks DESC LIMIT 1", "source_tables": ["players", "players_teams"]}, "evidence": "full name refers to first_name, middle_name, last_name; born in Atlanta refers to birthCity = 'Atlanta'; the highest number of blocks refers to max(blocks); team refers to tmID"}
{"sample_id": 2920, "db_id": "professional_basketball", "final": {"question": "State the name of teams ranked first five or more times and lost a league two or more times between 1980 and 2000?", "sql": "SELECT T1.name FROM teams AS T1 INNER JOIN series_post AS T2 ON T1.tmID = T2.tmIDLoser AND T1.year = T2.year WHERE T1.rank < 5 AND T2.lgIDLoser > 2 AND T2.year BETWEEN 1980 AND 2000", "source_tables": ["series_post", "teams"]}, "evidence": "name of team refers to teams.name; between 1980 and 2000 refers to year between 1980 and 2000; ranked first five or more times refers to count(rank = 1) > = 5; lost a league two or more times refers to lost > 2"}
{"sample_id": 3019, "db_id": "shakespeare", "final": {"question": "What are the character names and descriptions of characters in \"Venus and Adonis\"?", "sql": "SELECT DISTINCT T4.CharName, T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.Title = 'Venus and Adonis'", "source_tables": ["characters", "paragraphs", "chapters", "works"]}, "evidence": "character names refers to CharName; \"Venus and Adonis\" refers to Title = 'Venus and Adonis'"}
{"sample_id": 3020, "db_id": "shakespeare", "final": {"question": "What is the title which has character named \"Froth\"?", "sql": "SELECT DISTINCT T1.title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.CharName = 'Froth'", "source_tables": ["characters", "paragraphs", "chapters", "works"]}, "evidence": "character named \"Froth\" refers to CharName = 'Froth'"}
{"sample_id": 3021, "db_id": "shakespeare", "final": {"question": "How many chapters include the character name \"First Witch\"?", "sql": "SELECT COUNT(T2.chapter_id) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'First Witch'", "source_tables": ["characters", "paragraphs"]}, "evidence": "character name \"First Witch\" refers to CharName = 'First Witch'"}
{"sample_id": 3022, "db_id": "shakespeare", "final": {"question": "List the scenes and descriptions in Act 1 of \" Pericles, Prince of Tyre\".", "sql": "SELECT T2.Scene, T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.LongTitle = 'Pericles, Prince of Tyre' AND T2.Act = 1", "source_tables": ["chapters", "works"]}, "evidence": "\" Pericles, Prince of Tyre\" refers to LongTitle = 'Pericles, Prince of Tyre'"}
{"sample_id": 3023, "db_id": "shakespeare", "final": {"question": "Describe the full title which had the character named Servant to Montague.", "sql": "SELECT DISTINCT T1.LongTitle FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.Description = 'Servant to Montague'", "source_tables": ["characters", "paragraphs", "chapters", "works"]}, "evidence": "full title refers to LongTitle; character named Servant to Montague refers to characters.Description = 'Servant to Montague'"}
{"sample_id": 3024, "db_id": "shakespeare", "final": {"question": "Describe the scene number, act, and title of work which had the description of \"The house of ANTIPHOLUS of Ephesus\" in chapter.", "sql": "SELECT T2.Act, T2.Scene, T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Description = 'The house of ANTIPHOLUS of Ephesus.'", "source_tables": ["chapters", "works"]}, "evidence": ""}
{"sample_id": 3025, "db_id": "shakespeare", "final": {"question": "Provide the character name, paragraph number, and plain text of \"cousin to the king\" description.", "sql": "SELECT T1.CharName, T2.ParagraphNum, T2.PlainText FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.Description = 'cousin to the king'", "source_tables": ["characters", "paragraphs"]}, "evidence": "character name refers to CharName; paragraph number refers to ParagraphNum"}
{"sample_id": 3026, "db_id": "shakespeare", "final": {"question": "Calculate average scene per act in Antony and Cleopatra.", "sql": "SELECT CAST(SUM(T2.Scene) AS REAL) / COUNT(T2.act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Antony and Cleopatra'", "source_tables": ["chapters", "works"]}, "evidence": "Antony and Cleopatra refers to Title = 'Antony and Cleopatra'; average scene per act = divide(sum(Scene), count(act))\n"}
{"sample_id": 3027, "db_id": "shakespeare", "final": {"question": "Calculate the percentage of paragraphs in all chapters of \"All's Well That Ends Well\".", "sql": "SELECT CAST(SUM(IIF(T1.Title = 'All''s Well That Ends Well', 1, 0)) AS REAL) * 100 / COUNT(T3.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id", "source_tables": ["paragraphs", "chapters", "works"]}, "evidence": "\"All's Well That Ends Well\" refers to Title = 'All's Well That Ends Well'; percentage = divide(sum(paragraphs.id) when Title = 'All's Well That Ends Well', count(paragraphs.id)) as percentage"}
{"sample_id": 3028, "db_id": "shakespeare", "final": {"question": "How many \"all\" character names have the \"all\" abbreviation?", "sql": "SELECT COUNT(id) FROM characters WHERE Abbrev = 'All'", "source_tables": ["characters"]}, "evidence": "character names refers to CharName\uff1b\"all\" abbreviation refers to Abbrev = 'all'"}
{"sample_id": 3029, "db_id": "shakespeare", "final": {"question": "Please name any three comedic works.", "sql": "SELECT Title FROM works WHERE GenreType = 'comedy' LIMIT 3", "source_tables": ["works"]}, "evidence": "comedic works refers to GenreType = 'comedy'"}
{"sample_id": 3030, "db_id": "shakespeare", "final": {"question": "From 1593 onwards, what is the difference between the number of comedy works and history works?", "sql": "SELECT SUM(IIF(GenreType = 'Comedy', 1, 0)) - SUM(IIF(GenreType = 'History', 1, 0)) FROM works WHERE Date > 1593", "source_tables": ["works"]}, "evidence": "From 1593 onwards refers to Date > 1593; comedy works and history works refers to GenreType = 'comedy' and GenreType = 'History'"}
{"sample_id": 3031, "db_id": "shakespeare", "final": {"question": "Please name the latest historical work.", "sql": "SELECT LongTitle FROM works WHERE GenreType = 'History' ORDER BY Date DESC LIMIT 1", "source_tables": ["works"]}, "evidence": "name refers to LongTitle; latest historical work refers to GenreType = 'History' and max(Date)"}
{"sample_id": 3032, "db_id": "shakespeare", "final": {"question": "What are the work numbers that are related to King Henry?", "sql": "SELECT id FROM works WHERE Title LIKE '%Henry%'", "source_tables": ["works"]}, "evidence": "work numbers refers to works.id; related to King Henry refers to Title = '%Henry%'"}
{"sample_id": 3033, "db_id": "shakespeare", "final": {"question": "What are the character names for a senator of Venice?", "sql": "SELECT CharName FROM characters WHERE Description = 'a senator of Venice'", "source_tables": ["characters"]}, "evidence": "character names refers to CharName; a senator of Venice refers to characters.Description = 'a senator of Venice'"}
{"sample_id": 3034, "db_id": "shakespeare", "final": {"question": "What is the name of the character that can be found in paragraph 8 of chapter 18820?", "sql": "SELECT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.ParagraphNum = 8 AND T2.chapter_id = 18820", "source_tables": ["characters", "paragraphs"]}, "evidence": "name of the character refers to CharName; paragraph 8 refers to ParagraphNum = 8; chapter 18820 refers to chapter_id = 18820"}
{"sample_id": 3035, "db_id": "shakespeare", "final": {"question": "What is the description of chapter 18704, where there is a character called Orsino?", "sql": "SELECT DISTINCT T3.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id INNER JOIN chapters AS T3 ON T2.chapter_id = T3.id WHERE T1.CharName = 'Orsino' AND T3.ID = 18704", "source_tables": ["characters", "paragraphs", "chapters"]}, "evidence": "chapter 18704 refers to chapters.id = 18704; character called Orsino refers to CharName = 'Orsino'"}
{"sample_id": 3036, "db_id": "shakespeare", "final": {"question": "How many scenes can be found in \"Twelfth Night, Or What You Will\"?", "sql": "SELECT COUNT(T2.Scene) AS cnt FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.LongTitle = 'Cymbeline, King of Britain'", "source_tables": ["chapters", "works"]}, "evidence": "\"Twelfth Night, Or What You Will\" refers to LongTitle"}
{"sample_id": 3037, "db_id": "shakespeare", "final": {"question": "Please list all of the character descriptions in paragraph 20.", "sql": "SELECT T1.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.ParagraphNum = 20", "source_tables": ["characters", "paragraphs"]}, "evidence": "paragraph 20 refers to ParagraphNum = 20"}
{"sample_id": 3038, "db_id": "shakespeare", "final": {"question": "How many chapters have the name Gratiano as a character for \"friend to Antonio and Bassiano\"?", "sql": "SELECT COUNT(DISTINCT T2.chapter_id) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Gratiano' AND T1.Description = 'friend to Antonio and Bassiano'", "source_tables": ["characters", "paragraphs"]}, "evidence": "name Gratiano as a character refers to CharName = 'Gratiano'; \"friend to Antonio and Bassiano\" refers to characters.Description = 'friend to Antonio and Bassiano'"}
{"sample_id": 3039, "db_id": "shakespeare", "final": {"question": "What is the description of chapter 18706 in \"All's Well That Ends Well\"?", "sql": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.id = 18706 AND T1.Title = 'All''s Well That Ends Well'", "source_tables": ["chapters", "works"]}, "evidence": "chapter 18706 refers to chapters.id; \"All's Well That Ends Well\" refers to Title = 'All's Well That Ends Well'"}
{"sample_id": 3040, "db_id": "shakespeare", "final": {"question": "What are the character names in paragraph 3?", "sql": "SELECT DISTINCT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.ParagraphNum = 3", "source_tables": ["characters", "paragraphs"]}, "evidence": "character names refers to CharName; paragraph 3 refers to ParagraphNum = 3"}
{"sample_id": 3113, "db_id": "cars", "final": {"question": "Among the cars originated from Japan, what is the name of the car with the highest price?", "sql": "SELECT T4.car_name FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T3.country = 'Japan' ORDER BY T1.price DESC LIMIT 1", "source_tables": ["price", "country", "production", "data"]}, "evidence": "from Japan refers to country = 'Japan'; name of the car refers to car_name; the highest price refers to max(price)"}
{"sample_id": 3114, "db_id": "cars", "final": {"question": "What are the names of the cars worth 20000?", "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = 20000", "source_tables": ["price", "data"]}, "evidence": "name of the car refers to car_name; worth 20000 refers to price = 20000"}
{"sample_id": 3115, "db_id": "cars", "final": {"question": "How many cars worth greater than 40000 were from the USA?", "sql": "SELECT COUNT(*) FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T3.country = 'USA' AND T1.price > 40000", "source_tables": ["price", "country", "production"]}, "evidence": "worth greater than 40000 refers to price > 40000; from the USA refers to country = 'USA'"}
{"sample_id": 3116, "db_id": "cars", "final": {"question": "Provide the price and country origin of the car named Ford Maverick.", "sql": "SELECT DISTINCT T1.price, T3.country FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T4.car_name = 'ford maverick'", "source_tables": ["price", "country", "production", "data"]}, "evidence": "country origin refers to country; Ford Maverick refers to car_name = 'ford maverick'"}
{"sample_id": 3117, "db_id": "cars", "final": {"question": "List the car's name with a price worth greater than 85% of the average price of all cars.", "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price * 100 > ( SELECT AVG(price) * 85 FROM price )", "source_tables": ["price", "data"]}, "evidence": "car's name refers to car_name; a price worth greater than 85% of the average price of all cars refers to price > multiply(avg(price), 0.85)"}
{"sample_id": 3118, "db_id": "cars", "final": {"question": "Calculate the difference between the number of cars that has a horsepower of 130 with the model year 1970 and model year 1976", "sql": "SELECT SUM(CASE WHEN T2.model_year = 1970 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.model_year = 1976 THEN 1 ELSE 0 END) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.horsepower = 130", "source_tables": ["production", "data"]}, "evidence": "a horsepower of 130 refers to horsepower = 130; difference = subtract(count(ID where model_year = 1970), count(ID where model_year = 1976)) where horsepower = 130"}
{"sample_id": 3119, "db_id": "cars", "final": {"question": "Among the cars from Asia, list the IDs of cars that were introduced in 1979.", "sql": "SELECT T1.ID FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'Japan' AND T1.model_year = 1979", "source_tables": ["country", "production"]}, "evidence": "from Asia refers to country = 'Japan'; introduced in 1979 refers to model_year = 1979"}
{"sample_id": 3120, "db_id": "cars", "final": {"question": "Which country produced the car with the lowest mileage per gallon?", "sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country ORDER BY T1.mpg ASC LIMIT 1", "source_tables": ["country", "production", "data"]}, "evidence": "the lowest mileage per gallon refers to min(mpg)"}
{"sample_id": 3121, "db_id": "cars", "final": {"question": "Provide the name, model, sweep volume, and introduced year of the car with the best crash protection.", "sql": "SELECT T1.car_name, T1.model, T1.displacement / T1.cylinders, T2.model_year FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID ORDER BY T1.weight DESC LIMIT 1", "source_tables": ["production", "data"]}, "evidence": "car's name refers to car_name; sweep volume = divide(displacement, cylinders); introduced year refers to model_year; the best crash protection refers to max(weight)"}
{"sample_id": 3122, "db_id": "cars", "final": {"question": "Among the cars introduced in 1977, provide the names and the horse powers of cars from Europe.", "sql": "SELECT T1.car_name, T1.horsepower FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T2.model_year = 1977 AND T3.country = 'Europe'", "source_tables": ["country", "production", "data"]}, "evidence": "introduced in 1977 refers to model_year = 1977; car's name refers to car_name; from Europe refers to country = 'Europe'"}
{"sample_id": 3123, "db_id": "cars", "final": {"question": "Provide the name and model of the car with the highest price.", "sql": "SELECT T1.car_name, T1.model FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1", "source_tables": ["price", "data"]}, "evidence": "car's name refers to car_name; the highest price refers to max(price)"}
{"sample_id": 3124, "db_id": "cars", "final": {"question": "What is the price of a Chevrolet Bel Air?", "sql": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'chevrolet bel air'", "source_tables": ["price", "data"]}, "evidence": "Chevrolet Bel Air refers to car_name = 'chevrolet bel air'"}
{"sample_id": 3125, "db_id": "cars", "final": {"question": "What is the average price per car produced in Japan?", "sql": "SELECT AVG(T1.price) FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T3.country = 'Japan'", "source_tables": ["price", "country", "production"]}, "evidence": "produced in Japan refers to country = 'Japan'; average price per car = avg(price) where country = 'Japan'"}
{"sample_id": 3126, "db_id": "cars", "final": {"question": "Which country produced the car with the lowest price?", "sql": "SELECT T3.country FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country ORDER BY T1.price ASC LIMIT 1", "source_tables": ["price", "country", "production"]}, "evidence": "the lowest price refers to min(price)"}
{"sample_id": 3127, "db_id": "cars", "final": {"question": "Among the cars produced in 1975, provide IDs, names, and producing countries of the cars with the maximum number of cylinders.", "sql": "SELECT T1.ID, T1.car_name, T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T2.model_year = 1975 ORDER BY T1.cylinders DESC LIMIT 1", "source_tables": ["country", "production", "data"]}, "evidence": "produced in 1975 refers to model_year = 1975; names refers to car_name; producing countries refers to country; the maximum number of cylinders refers to max(cylinders)"}
{"sample_id": 3128, "db_id": "cars", "final": {"question": "Which car is the cheapest? Provide its acceleration, number of cylinders, and producing year.", "sql": "SELECT T1.acceleration, T1.cylinders, T2.model_year FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN price AS T3 ON T3.ID = T2.ID ORDER BY T3.price ASC LIMIT 1", "source_tables": ["price", "production", "data"]}, "evidence": "the cheapest refers to min(price); number of cylinders refers to cylinders; producing year refers to model_year"}
{"sample_id": 3243, "db_id": "donor", "final": {"question": "What was the title for the project which got the biggest donation?", "sql": "SELECT T1.title FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_total = ( SELECT MAX(donation_total) FROM donations )", "source_tables": ["essays", "donations"]}, "evidence": "biggest donation refers to donation_total = 'max';"}
{"sample_id": 3244, "db_id": "donor", "final": {"question": "For the donation of the project 'Awesome Audiobooks Make Avid Readers', what was the percentage of the tip in the total amount?", "sql": "SELECT CAST(SUM(T2.donation_optional_support) AS REAL) * 100 / SUM(T2.donation_total) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Awesome Audiobooks Make Avid Readers'", "source_tables": ["essays", "donations"]}, "evidence": "Awesome Audiobooks Make Avid Readers' is the title; percentage = Divie(donation_optional_support, donation_total)*100;"}
{"sample_id": 3245, "db_id": "donor", "final": {"question": "For the all donations to the project 'Bringing Drama to Life', what is the percentage of the donation is paid by credit card?", "sql": "SELECT CAST(SUM(CASE WHEN T2.payment_method LIKE 'creditcard' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(donationid) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Bringing Drama to Life'", "source_tables": ["essays", "donations"]}, "evidence": "Bringing Drama to Life' is the title; Percentage = Divide(Count(payment_method = 'creditcard'), Count(projectid))*100;"}
{"sample_id": 3246, "db_id": "donor", "final": {"question": "What is the short description for the title Future Einsteins Of America?", "sql": "SELECT short_description FROM essays WHERE title = 'Future Einsteins Of America'", "source_tables": ["essays"]}, "evidence": ""}
{"sample_id": 3247, "db_id": "donor", "final": {"question": "Write down the need statement of Family History Project.", "sql": "SELECT need_statement FROM essays WHERE title = 'Family History Project'", "source_tables": ["essays"]}, "evidence": "Family History Project refer to title, need statement refer to need_statement"}
{"sample_id": 3248, "db_id": "donor", "final": {"question": "How many suburban metros are there in Livingston Parish School District?", "sql": "SELECT COUNT(projectid) FROM projects WHERE school_district = 'Livingston Parish School Dist' AND school_metro = 'suburban'", "source_tables": ["projects"]}, "evidence": "suburban metros refer to metro = 'suburban'; Livingston Parish School District refer to school_district"}
{"sample_id": 3249, "db_id": "donor", "final": {"question": "Name the vendors that sell the item Classroom Keepers Management Center.", "sql": "SELECT DISTINCT vendor_name FROM resources WHERE item_name = 'Classroom Keepers Management Center'", "source_tables": ["resources"]}, "evidence": "vendor refer to vendor_name; Classroom Keepers Management Center refer to item_name"}
{"sample_id": 3250, "db_id": "donor", "final": {"question": "List the resource types available at Sax Arts & Crafts.", "sql": "SELECT DISTINCT project_resource_type FROM resources WHERE vendor_name = 'Sax Arts & Crafts'", "source_tables": ["resources"]}, "evidence": "Sax Arts & Crafts refer to vendor_name; resource type available refer to project_resource_type\n"}
{"sample_id": 3251, "db_id": "donor", "final": {"question": "Which school county in the state of New York has a high number of low poverty levels?", "sql": "SELECT school_county FROM projects WHERE poverty_level = 'low poverty' AND school_state = 'NY' GROUP BY school_state ORDER BY COUNT(poverty_level) DESC LIMIT 1", "source_tables": ["projects"]}, "evidence": "New York refer to school_state = NY; highest number of low poverty level refer to MAX(poverty level = \u2019low poverty\u2019)"}
{"sample_id": 3252, "db_id": "donor", "final": {"question": "Which school district was Future Einsteins Of America project located at?", "sql": "SELECT T1.school_district FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title LIKE 'Future Einsteins Of America'", "source_tables": ["essays", "projects"]}, "evidence": "Future Einsteins of America refer to title"}
{"sample_id": 3253, "db_id": "donor", "final": {"question": "What payment method was used for Needed Resource Materials For My Students?", "sql": "SELECT T3.payment_method FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T1.title = 'Needed Resource Materials For My Students'", "source_tables": ["essays", "projects", "donations"]}, "evidence": "Needed Resource Materials For My Students refer to title"}
{"sample_id": 3254, "db_id": "donor", "final": {"question": "How many donations were paid via credit card to Memphis City School District?", "sql": "SELECT COUNT(T1.projectid) FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.payment_method = 'creditcard' AND T2.school_district = 'Memphis City School District'", "source_tables": ["donations", "projects"]}, "evidence": "paid via credit card refer to payment method = creditcard; Memphis City School District refer to school_district"}
{"sample_id": 3255, "db_id": "donor", "final": {"question": "List the school districts that have bought resources from Barnes and Noble.", "sql": "SELECT T2.school_district FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.vendor_name = 'Barnes and Noble'", "source_tables": ["resources", "projects"]}, "evidence": "Barnes and Noble refer to vendor_name"}
{"sample_id": 3256, "db_id": "donor", "final": {"question": "Give the coordinates of the buyer of R & A Plant Genetics from Benchmark Education.", "sql": "SELECT T2.school_latitude, T2.school_longitude FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.item_name = 'R & A Plant Genetics' AND T1.vendor_name = 'Benchmark Education'", "source_tables": ["resources", "projects"]}, "evidence": "coordinates refer to (school_latitude, school_longitude); R & A Plant Genetics refer to item_name; Benchmark Education refer to vendor_name"}
{"sample_id": 3257, "db_id": "donor", "final": {"question": "Which payment method is most comonly used by the schools in the state of Georgia for the payment of donations?", "sql": "SELECT T1.payment_method FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_state = 'GA' GROUP BY T2.school_state ORDER BY COUNT(T1.payment_method) DESC LIMIT 1", "source_tables": ["donations", "projects"]}, "evidence": "Georgia refer to school_state = 'GA'\n"}
{"sample_id": 3258, "db_id": "donor", "final": {"question": "What are the coordinates of the school where project 'Look, Look, We Need a Nook!' Was donated to and what resource type is it?", "sql": "SELECT T2.school_latitude, T2.school_longitude, T2.resource_type FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Look, Look, We Need a Nook!'", "source_tables": ["essays", "projects"]}, "evidence": "Coordinates of the school refer to school_latitude, school_longitude); Look, Look, We Need a Nook! Refer to title;"}
{"sample_id": 3259, "db_id": "donor", "final": {"question": "Write the messages of those who donated to the Newark School District in the coordinates of 40.735332, -74.196014.", "sql": "SELECT T1.donation_message FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_latitude = 40.735332 AND T2.school_longitude = -74.196014 AND T2.school_district = 'Newark School District'", "source_tables": ["donations", "projects"]}, "evidence": "message refer to donation_message; Newark School District refer to school_district; 40.735332, -74.196014 refer to (school latitude, school_longitude)"}
{"sample_id": 3260, "db_id": "donor", "final": {"question": "What date did the project with he 'Lets Share Ideas essay' went live?", "sql": "SELECT T1.date_posted FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title LIKE 'Lets Share Ideas'", "source_tables": ["essays", "projects"]}, "evidence": "date refer to date_posted; Lets Share Ideas refer to title"}
{"sample_id": 3261, "db_id": "donor", "final": {"question": "Write the message of the donor of the project with the title of Lets Share Ideas who paid with a credit card.", "sql": "SELECT T3.donation_message FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T1.title = 'Lets Share Ideas' AND T3.payment_method = 'creditcard'", "source_tables": ["essays", "projects", "donations"]}, "evidence": "message of the donor refer to donation_message; Lets Share Ideas refer to title; paid with a credit card refer to payment_method"}
{"sample_id": 3262, "db_id": "donor", "final": {"question": "Which resource type is commonly bought by the Los Angeles Unified School District?", "sql": "SELECT T1.project_resource_type FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_district = 'Los Angeles Unif Sch Dist' GROUP BY T2.school_district ORDER BY COUNT(T1.project_resource_type) DESC LIMIT 1", "source_tables": ["resources", "projects"]}, "evidence": "resource type refer to project_resource_type; most commonly bought refer to COUNT(project_resource_type where school_district = \u2019Los Angeles Unif Sch Dist\u2019); Los Angeles Unified School District refer to school_district = \u2019Los Angeles Unif Sch Dist\u2019"}
{"sample_id": 3263, "db_id": "donor", "final": {"question": "Which cities in the Los Angeles Unified School District has bought supplies from Quill.com?", "sql": "SELECT T2.school_city FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_district = 'Los Angeles Unif Sch Dist' AND T1.vendor_name = 'Quill.com'", "source_tables": ["resources", "projects"]}, "evidence": "cities refer to school_city; Los Angeles Unified School District refer to school_district = 'Los Angeles Unified School District'; supplies refer to project_resource_type; Quill.com refer to vendor_name"}
{"sample_id": 3264, "db_id": "donor", "final": {"question": "What is the total price of items brought from ABC School Supply with a listed type of Other? Also include the list of the buyers' coordinates and school districts they belong to.", "sql": "SELECT T2.item_unit_price * T2.item_quantity price, T1.school_latitude, T1.school_longitude FROM projects AS T1 INNER JOIN resources AS T2 ON T1.projectid = T2.projectid WHERE T2.vendor_name = 'ABC School Supply' AND T2.project_resource_type = 'Other' AND T1.school_district = 'Hillsborough Co Pub Sch Dist'", "source_tables": ["resources", "projects"]}, "evidence": "ABC School Supply refer to vendor_name; listed type as Other refer to project_resource_type = 'Other'; coordinates refer to coordinates(school_latitude, school_longitude); total price of items refer to SUM(MULTIPLY(item_unit_price, item_quantity where vendor_name = \u2019ABC School Supply\u2019))\n\n"}
{"sample_id": 3265, "db_id": "donor", "final": {"question": "Calculate the sum of all the total amount donated to the essay project titled 'Lets Share Ideas' which were paid through paypal and indicate the city and poverty level.", "sql": "SELECT SUM(T3.donation_total), school_city, poverty_level FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T1.title = 'Lets Share Ideas' AND T3.payment_method = 'paypal'", "source_tables": ["essays", "projects", "donations"]}, "evidence": "paypal refer to payment method; Lets Share Ideas refer to title; city refer to school_city; total amount donated refer to SUM(donation_total of paypal where payment_method = \u2019paypal\u2019)"}
{"sample_id": 3266, "db_id": "donor", "final": {"question": "How many donors who donated to the city of Pocatello are not teachers?", "sql": "SELECT COUNT(donationid) FROM donations WHERE donor_city = 'Pocatello' AND is_teacher_acct = 'f'", "source_tables": ["donations"]}, "evidence": "city of Pocatello refers to donor_city = 'Pocatello'; not teachers refers to is_teacher_acct = 'f'"}
{"sample_id": 3267, "db_id": "donor", "final": {"question": "How many schools in Suffolk County have Ph.D. teachers?", "sql": "SELECT COUNT(schoolid) FROM projects WHERE teacher_prefix = 'Dr.' AND school_county = 'Suffolk'", "source_tables": ["projects"]}, "evidence": "Suffolk County refers to School_county = 'Suffolk'; Ph.D. teachers refers to Teacher_prefix = 'Dr.'"}
{"sample_id": 3268, "db_id": "donor", "final": {"question": "What is the sum of the total donated amounts paid through Amazon?", "sql": "SELECT SUM(donation_to_project) + SUM(donation_optional_support) FROM donations WHERE payment_method = 'amazon'", "source_tables": ["donations"]}, "evidence": "paid through Amazon refers to payment_method = 'Amazon'; sum of the total donated amounts refers to SUM(donation_to_project,donation_optional_support)"}
{"sample_id": 3269, "db_id": "donor", "final": {"question": "How many donations of more than $100 were made for an honoree?", "sql": "SELECT COUNT(donationid) FROM donations WHERE dollar_amount = '100_and_up' AND for_honoree = 't'", "source_tables": ["donations"]}, "evidence": "an honoree refers to for_honoree = 't'; more than $100 refers to dollar_amount = '100_and_up'"}
{"sample_id": 3270, "db_id": "donor", "final": {"question": "How many resources with a unit price less than 15 are not technology type? List them by vendor id", "sql": "SELECT vendorid FROM resources WHERE project_resource_type = 'Technology' AND item_unit_price <= 15", "source_tables": ["resources"]}, "evidence": "unit price less than 15 refers to item_unit_price< = 15; are not technology type refers to project_resource_type = 'technology'"}
{"sample_id": 3271, "db_id": "donor", "final": {"question": "On how many projects where the teacher has ordered between 5 to 10 items are from are from Quill.com?", "sql": "SELECT COUNT(projectid) FROM resources WHERE vendor_name = 'Quill.com' AND item_quantity BETWEEN 5 AND 10", "source_tables": ["resources"]}, "evidence": "ordered between 5 to 10 items refers to item_quantity between 5 and 10; are from Quill.com refers to vendor_name = 'Quill.com'"}
{"sample_id": 3272, "db_id": "donor", "final": {"question": "List by school id projects from schools located in the Union Pub School District I-9 that have a New York teaching fellow", "sql": "SELECT schoolid FROM projects WHERE school_district = 'Union Pub School District I-9' AND teacher_ny_teaching_fellow = 't'", "source_tables": ["projects"]}, "evidence": "located in the Union Pub School District I-9 refers to school_district = 'Union Pub School District I-9'; New York teaching fellow refers to teacher_ny_teaching_fellow = 't'"}
{"sample_id": 3273, "db_id": "donor", "final": {"question": "In which cities are Los Angeles County Suburban Metro Schools located?", "sql": "SELECT school_city FROM projects WHERE school_metro = 'suburban' AND school_county = 'Los Angeles'", "source_tables": ["projects"]}, "evidence": "Los Angeles County refers to school_county = 'Los Angeles'"}
{"sample_id": 3274, "db_id": "donor", "final": {"question": "What are the vendors of the book-type projects? List them with the project ID.", "sql": "SELECT DISTINCT vendorid, projectid FROM resources WHERE project_resource_type = 'Books'", "source_tables": ["resources"]}, "evidence": "book-type projects refers to project_resource_type = 'Books'"}
{"sample_id": 3427, "db_id": "video_games", "final": {"question": "What is the number of games sold in Europe for game platform ID 26?", "sql": "SELECT T2.num_sales * 100000 AS nums_eur FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T2.game_platform_id = 26 AND T1.region_name = 'Europe'", "source_tables": ["region_sales", "region"]}, "evidence": "total number of games sold = MULTIPLY(num_sales, 100000); Europe refers to region_name = 'Europe';"}
{"sample_id": 3428, "db_id": "video_games", "final": {"question": "How many games were released in the year 2001?", "sql": "SELECT COUNT(id) FROM game_platform AS T WHERE T.release_year = 2001", "source_tables": ["game_platform"]}, "evidence": "released in the year 2001 refers to release_year = 2001;"}
{"sample_id": 3429, "db_id": "video_games", "final": {"question": "How many games include the word 'Box' in their name?", "sql": "SELECT COUNT(*) FROM ( SELECT T.game_name FROM game AS T WHERE T.game_name LIKE '%Box%' )", "source_tables": ["game"]}, "evidence": "games include the word 'Box' in their name refers to game_name = '%Box%';"}
{"sample_id": 3430, "db_id": "video_games", "final": {"question": "What are the three largest numbers of games sold?", "sql": "SELECT T.game_platform_id, SUM(T.num_sales) * 100000 FROM region_sales AS T GROUP BY game_platform_id ORDER BY SUM(T.num_sales) * 100000 DESC LIMIT 3", "source_tables": ["region_sales"]}, "evidence": "3 largest numbers of games sold refers to game_name where MAX(num_sales) LIMIT 3;"}
{"sample_id": 3431, "db_id": "video_games", "final": {"question": "What year were the first game released?", "sql": "SELECT T.release_year FROM game_platform AS T ORDER BY T.release_year ASC LIMIT 1", "source_tables": ["game_platform"]}, "evidence": "year the first game was released refers to MIN(release_year);"}
{"sample_id": 3432, "db_id": "video_games", "final": {"question": "What publishers have the word 'Entertainment' in their name?", "sql": "SELECT T.publisher_name FROM publisher AS T WHERE T.publisher_name LIKE '%Entertainment%'", "source_tables": ["publisher"]}, "evidence": "publishers that have the word 'Entertainment' in their name refers to publisher_name LIKE '%Entertainment%';"}
{"sample_id": 3433, "db_id": "video_games", "final": {"question": "Indicate the name of all adventure games.", "sql": "SELECT T2.game_name FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id WHERE T1.genre_name = 'Adventure'", "source_tables": ["game", "genre"]}, "evidence": "name of games refers to game_name; adventure games refers to game_name WHERE genre_name = 'Adventure';"}
{"sample_id": 3434, "db_id": "video_games", "final": {"question": "List the name of all games published by 'Pioneer LDC'.", "sql": "SELECT T3.game_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.publisher_name = 'Pioneer LDC'", "source_tables": ["game_publisher", "publisher", "game"]}, "evidence": "name of games refers to game_name; 'Pioneer LDC' refers to publisher_name = 'Pioneer LDC';"}
{"sample_id": 3435, "db_id": "video_games", "final": {"question": "Indicate the name of all the games published for the 'SCD' platform.", "sql": "SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T4.platform_name = 'SCD'", "source_tables": ["game", "game_platform", "platform", "game_publisher"]}, "evidence": "name of games refers to game_name;\u00a0 'SCD' platform refers to platform_name = 'SCD';"}
{"sample_id": 3436, "db_id": "video_games", "final": {"question": "List the name of all games published in Japan.", "sql": "SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN region_sales AS T4 ON T3.id = T4.game_platform_id INNER JOIN region AS T5 ON T4.region_id = T5.id WHERE T5.region_name = 'Japan'", "source_tables": ["game_publisher", "game", "game_platform", "region_sales", "region"]}, "evidence": "name of games refers to game_name; Japan refers to region_name = 'Japan';"}
{"sample_id": 3437, "db_id": "video_games", "final": {"question": "What genres are the games published by 'Agatsuma Entertainment'?", "sql": "SELECT T4.genre_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T1.publisher_name = 'Agatsuma Entertainment'", "source_tables": ["game_publisher", "genre", "publisher", "game"]}, "evidence": "genres refers to genre_name; 'Agatsuma Entertainment' refers to publisher_name = 'Agatsuma Entertainment';"}
{"sample_id": 3438, "db_id": "video_games", "final": {"question": "How many games are not of the genres 'Role-Playing', 'Shooter' and 'Simulation'?", "sql": "SELECT COUNT(T2.id) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id WHERE T1.genre_name NOT IN ('Role-Playing', 'Shooter', 'Simulation')", "source_tables": ["game", "genre"]}, "evidence": "not of the genres 'Role-Playing', 'Shooter' and 'Simulation' refers to genre_name NOT IN ('Role-Playing', 'Shooter', 'Simulation');"}
{"sample_id": 3439, "db_id": "video_games", "final": {"question": "Indicate, by region, which platform has sold the most games.", "sql": "SELECT T.region_name FROM ( SELECT T1.platform_name, T4.region_name, SUM(T3.num_sales) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN region_sales AS T3 ON T1.id = T3.game_platform_id INNER JOIN region AS T4 ON T3.region_id = T4.id GROUP BY T1.platform_name, T4.region_name ORDER BY SUM(T3.num_sales) DESC LIMIT 1 ) t", "source_tables": ["region", "platform", "region_sales", "game_platform"]}, "evidence": "region refers to region_name; platform refers to game_platform; sold the most games refers to MAX(SUM(num_sales));"}
{"sample_id": 3440, "db_id": "video_games", "final": {"question": "Which publisher has published the most games in the 'Puzzle' genre?", "sql": "SELECT T.publisher_name FROM ( SELECT T1.publisher_name, COUNT(T3.id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Puzzle' GROUP BY T1.publisher_name ORDER BY COUNT(T3.id) DESC LIMIT 1 ) t", "source_tables": ["game_publisher", "genre", "publisher", "game"]}, "evidence": "which publisher refers to publisher_name; publisher that has published the most games refers to MAX(COUNT(publisher_name)); puzzle genre refers to genre_name = 'Puzzle';"}
{"sample_id": 3441, "db_id": "video_games", "final": {"question": "Which game has sold the fewest units?", "sql": "SELECT T.game_name FROM ( SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN region_sales AS T4 ON T3.id = T4.game_platform_id ORDER BY T4.num_sales LIMIT 1 ) t", "source_tables": ["game", "game_platform", "game_publisher", "region_sales"]}, "evidence": "which game refers to game_name; sold the fewest units refers to MIN(num_sales);"}
{"sample_id": 3442, "db_id": "video_games", "final": {"question": "Which publisher has published the game 'Pachi-Slot Kanzen Kouryaku 3: Universal Koushiki Gaido Volume 3'?", "sql": "SELECT T1.publisher_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = 'Pachi-Slot Kanzen Kouryaku 3: Universal Koushiki Gaido Volume 3'", "source_tables": ["game_publisher", "publisher", "game"]}, "evidence": "which publisher refers to publisher_name; 'Pachi-Slot Kanzen Kouryaku 3: Universal Koushiki Gaido Volume 3' refers to game_name = 'Pachi-Slot Kanzen Kouryaku 3: Universal Koushiki Gaido Volume 3';"}
{"sample_id": 3443, "db_id": "video_games", "final": {"question": "In which regions has the game 'Pengo' been sold?", "sql": "SELECT T5.region_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN region_sales AS T4 ON T3.id = T4.game_platform_id INNER JOIN region AS T5 ON T4.region_id = T5.id WHERE T1.game_name = 'Pengo'", "source_tables": ["game_publisher", "game", "game_platform", "region_sales", "region"]}, "evidence": "which regions refers to region_name; 'Pengo' refers to game_name = 'Pengo';"}
{"sample_id": 3444, "db_id": "video_games", "final": {"question": "List by name all the games released in the year 2010.", "sql": "SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id WHERE T3.release_year = '2010'", "source_tables": ["game", "game_platform", "game_publisher"]}, "evidence": "name of the games refers to game_name; released in the year 2010 refers to release_year = 2010;"}
{"sample_id": 3445, "db_id": "video_games", "final": {"question": "Calculate the average game sales for the PS2 platform.", "sql": "SELECT SUM(T3.num_sales * 100000) / COUNT(T1.id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN region_sales AS T3 ON T2.id = T3.game_platform_id WHERE T1.platform_name = 'PS2'", "source_tables": ["platform", "region_sales", "game_platform"]}, "evidence": "average = AVG(MULTIPLY(num_sales), 100000); PS2 refers to platform_name = 'PS2';"}
{"sample_id": 3446, "db_id": "video_games", "final": {"question": "Calculate the percentage of games published by 'Brash Entertainment'?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.publisher_name = 'Brash Entertainment' THEN T2.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.game_id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id", "source_tables": ["game_publisher", "publisher"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(publisher_name = 'Brash Entertainment'), COUNT(game_id)), 100.0); 'Brash Entertainment' refers to publisher_name = 'Brash Entertainment';"}
{"sample_id": 3447, "db_id": "video_games", "final": {"question": "What is the total number of games sold in region ID 1?", "sql": "SELECT SUM(T.num_sales * 100000) FROM region_sales AS T WHERE T.region_id = 1", "source_tables": ["region_sales"]}, "evidence": "total number of games sold = MULTIPLY(SUM(num_sales), 100000);"}
{"sample_id": 3448, "db_id": "video_games", "final": {"question": "How many FIFA games are there across all platforms?", "sql": "SELECT COUNT(*) FROM ( SELECT T.game_name FROM game AS T WHERE T.game_name LIKE '%FIFA%' )", "source_tables": ["game"]}, "evidence": "FIFA games refers to game_name LIKE '%FIFA%';"}
{"sample_id": 3449, "db_id": "video_games", "final": {"question": "Which platform is the most popular in Europe?", "sql": "SELECT T.platform_name FROM ( SELECT T4.platform_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.region_name = 'Europe' ORDER BY T2.num_sales DESC LIMIT 1 ) t", "source_tables": ["region_sales", "game_platform", "platform", "region"]}, "evidence": "platform that is the most popular refers to platform_name WHERE MAX(num_sales); in Europe refers to region_name = 'Europe' ;"}
{"sample_id": 3450, "db_id": "video_games", "final": {"question": "Who is the publisher of the game 2002 FIFA World Cup?", "sql": "SELECT T2.publisher_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN game AS T3 ON T1.game_id = T3.id WHERE T3.game_name = '2002 FIFA World Cup'", "source_tables": ["game", "publisher", "game_publisher"]}, "evidence": "who is the publisher refers to publisher_name; 2002 FIFA World Cup refers to game_name = '2002 FIFA World Cup';"}
{"sample_id": 3451, "db_id": "video_games", "final": {"question": "What platform is the game 3Xtreme available on?", "sql": "SELECT T2.platform_name FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id INNER JOIN game_publisher AS T3 ON T1.game_publisher_id = T3.id INNER JOIN game AS T4 ON T3.game_id = T4.id WHERE T4.game_name = '3Xtreme'", "source_tables": ["game_publisher", "game_platform", "platform", "game"]}, "evidence": "what platform refers to platform_name; 3Xtreme refers to game_name = '3Xtreme';"}
{"sample_id": 3452, "db_id": "video_games", "final": {"question": "What genre is the game 2010 FIFA World Cup South Africa?", "sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '2010 FIFA World Cup South Africa'", "source_tables": ["game", "genre"]}, "evidence": "genre refers to genre_name; 2010 FIFA World Cup South Africa refers to game_name = '2010 FIFA World Cup South Africa';"}
{"sample_id": 3453, "db_id": "video_games", "final": {"question": "Which region has the highest number of games sold on all platforms?", "sql": "SELECT T.region_name FROM ( SELECT T2.region_name, SUM(T1.num_sales) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id INNER JOIN game_platform AS T3 ON T1.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id GROUP BY T4.platform_name ORDER BY SUM(T1.num_sales) DESC LIMIT 1 ) t", "source_tables": ["region", "game_platform", "platform", "region_sales"]}, "evidence": "which region refers to region_name; highest number of games sold on all platforms refers to MAX(SUM(num_sales));"}
{"sample_id": 3454, "db_id": "video_games", "final": {"question": "How many games were sold on PS3 platform in Japan?", "sql": "SELECT SUM(T1.num_sales * 100000) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id INNER JOIN game_platform AS T3 ON T1.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T2.region_name = 'Japan' AND T4.platform_name = 'PS3'", "source_tables": ["region", "game_platform", "platform", "region_sales"]}, "evidence": "how many games = MULTIPLY(SUM(num_sales), 100000); PS3 refers to platform_name = 'PS3'; Japan refers to region_name = 'Japan';"}
{"sample_id": 3455, "db_id": "video_games", "final": {"question": "What are the names of games that were released in 2007?", "sql": "SELECT T3.game_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.release_year = 2007", "source_tables": ["game", "game_platform", "game_publisher"]}, "evidence": "names of games refers to game_name; released in 2007 refers to release_year = 2007;"}
{"sample_id": 3456, "db_id": "video_games", "final": {"question": "How many games were published by Activision?", "sql": "SELECT COUNT(DISTINCT T3.id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN game AS T3 ON T1.game_id = T3.id WHERE T2.publisher_name = 'Activision'", "source_tables": ["game", "publisher", "game_publisher"]}, "evidence": "Activision refers to publisher_name = 'Activision';"}
{"sample_id": 3457, "db_id": "video_games", "final": {"question": "Indicate the release year of the game with more than 200000 sales in Japan.", "sql": "SELECT DISTINCT T3.release_year FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id WHERE T2.num_sales * 100000 > 200000 AND T1.region_name = 'Japan'", "source_tables": ["region_sales", "game_platform", "region"]}, "evidence": "more than 200000 sales refers to SUM(num_sales) > 2; Japan refers to region_name = 'Japan';"}
{"sample_id": 3458, "db_id": "video_games", "final": {"question": "In 2010, how many PS3 games were released?", "sql": "SELECT COUNT(T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T1.platform_name = 'PS3' AND T2.release_year = 2010", "source_tables": ["platform", "game_publisher", "game_platform"]}, "evidence": "in 2010 refers to release_year = 2010; PS3 refers to platform_name = 'PS3';"}
{"sample_id": 3459, "db_id": "video_games", "final": {"question": "Indicate the publisher who has published the most games of all time.", "sql": "SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T2.publisher_name ORDER BY COUNT(DISTINCT T1.game_id) DESC LIMIT 1 ) t", "source_tables": ["publisher", "game_publisher"]}, "evidence": "publisher refers to publisher_name; publisher who has published the most games of all time refers to MAX(COUNT(publisher_name));"}
{"sample_id": 3460, "db_id": "video_games", "final": {"question": "How many shooter games are there?", "sql": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Shooter'", "source_tables": ["game", "genre"]}, "evidence": "shooter games refers to game_name WHERE genre_name = 'shooter';"}
{"sample_id": 3461, "db_id": "video_games", "final": {"question": "What is the percentage of games that were released on PS4 in 2014 among all platforms?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.platform_name = 'PS4' THEN T3.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T3.game_id) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id INNER JOIN game_publisher AS T3 ON T1.game_publisher_id = T3.id WHERE T1.release_year = 2014", "source_tables": ["game_publisher", "game_platform", "platform"]}, "evidence": "percentage - MULTIPLY(DIVIDE(SUM(platform_name = 'PS4'), COUNT(game_id)), 100); in 2014 refers to release_year = 2014;"}
{"sample_id": 3462, "db_id": "video_games", "final": {"question": "How much are the sales of the games in region ID 4?", "sql": "SELECT SUM(T.num_sales) * 100000 FROM region_sales AS T WHERE T.region_id = 4", "source_tables": ["region_sales"]}, "evidence": "how much are the sales = SUM(num_sales);"}
{"sample_id": 3463, "db_id": "video_games", "final": {"question": "List down the game platform IDs of games with a region ID of 1.", "sql": "SELECT T.game_platform_id FROM region_sales AS T WHERE T.region_id = 1", "source_tables": ["region_sales"]}, "evidence": ""}
{"sample_id": 3464, "db_id": "video_games", "final": {"question": "Calculate the difference between sales of games from region ID 2 and region ID 3.", "sql": "SELECT SUM(CASE WHEN T.region_id = 2 THEN T.num_sales ELSE 0 END) - SUM(CASE WHEN T.region_id = 3 THEN T.num_sales ELSE 0 END) FROM region_sales t", "source_tables": ["region_sales"]}, "evidence": "difference = SUBTRACT(SUM(num_sales WHERE region_id = 2), SUM(num_sales WHERE region_id = 3));"}
{"sample_id": 3465, "db_id": "video_games", "final": {"question": "List down the platform IDs of the games released in 2007.", "sql": "SELECT DISTINCT T.platform_id FROM game_platform AS T WHERE T.release_year = 2007", "source_tables": ["game_platform"]}, "evidence": "released in 2007 refers to release_year = 2007;"}
{"sample_id": 3466, "db_id": "video_games", "final": {"question": "State the game publisher IDs of the games with a platform ID of 16.", "sql": "SELECT T.game_publisher_id FROM game_platform AS T WHERE T.platform_id = 16", "source_tables": ["game_platform"]}, "evidence": ""}
{"sample_id": 3612, "db_id": "authors", "final": {"question": "List all the title of the paper that Jianli Hua published.", "sql": "SELECT T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Jianli Hua'", "source_tables": ["paper", "paperauthor"]}, "evidence": "Jianli Hua is the author of a paper"}
{"sample_id": 3613, "db_id": "authors", "final": {"question": "Who authored the paper titled \"Testing timed automata\n\"?", "sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Testing timed automata'", "source_tables": ["paper", "paperauthor"]}, "evidence": "'Testing timed automata' is a title of a paper; Who authored refers to PaperAuthor.Name"}
{"sample_id": 3614, "db_id": "authors", "final": {"question": "How many papers are published in year 2000 under the conference \"SSPR\"?", "sql": "SELECT COUNT(T1.Id) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Year = 2000 AND T2.ShortName = 'SSPR'", "source_tables": ["paper", "conference"]}, "evidence": "SSPR is a ShortName; papers refers to Paper.Id"}
{"sample_id": 3615, "db_id": "authors", "final": {"question": "List all the paper that the journal \"Theoretical Computer Science\n\" published in 2003.", "sql": "SELECT DISTINCT T1.Title FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T2.FullName = 'Theoretical Computer Science' AND T1.Year = 2003 AND T1.Title <> ''", "source_tables": ["paper", "journal"]}, "evidence": "'Theoretical Computer Science' is the FullName; paper refers to Title; published in 2003 refers to Year = 2003"}
{"sample_id": 3616, "db_id": "authors", "final": {"question": "What is the conference homepage URL of the paper titled \"Quality evaluation of long duration audiovisual content\"?", "sql": "SELECT T2.HomePage FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'Quality evaluation of long duration audiovisual content'", "source_tables": ["paper", "conference"]}, "evidence": "homepage URL refers to HomePage; 'Quality evaluation of long duration audiovisual content' is the Title"}
{"sample_id": 3617, "db_id": "authors", "final": {"question": "Among the author who drafted the paper \"A Randomized Comparison of Sirolimus- Versus Paclitaxel-Eluting Stent Implantation in Patients With Diabetes Mellitus\", which of them is/are affiliated with the Asan Medical Center, University of Ulsan College of Medicine, Seoul, Korea\n?", "sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Affiliation = 'Asan Medical Center, University of Ulsan College of Medicine, Seoul, Korea' AND T1.Title = 'A Randomized Comparison of Sirolimus- Versus Paclitaxel-Eluting Stent Implantation in Patients With Diabetes Mellitus'", "source_tables": ["paper", "paperauthor"]}, "evidence": "author refers to PaperAuthor.Name; 'A Randomized Comparison of Sirolimus- Versus Paclitaxel-Eluting Stent Implantation in Patients With Diabetes Mellitus' is the title; 'Asan Medical Center, University of Ulsan College of Medicine, Seoul, Korea' is an Affiliation"}
{"sample_id": 3618, "db_id": "authors", "final": {"question": "How many papers are published under the journal \"Software - Practice and Experience\"?", "sql": "SELECT COUNT(T1.Id) FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T2.FullName = 'Software - Practice and Experience'", "source_tables": ["paper", "journal"]}, "evidence": "papers refers to Paper.Id; 'Software - Practice and Experience' is the FullName of a journal;"}
{"sample_id": 3619, "db_id": "authors", "final": {"question": "List all the paper that were under the conference homepage URL \"http://www.irma-international.org/\".", "sql": "SELECT T1.Title FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.HomePage = 'http://www.irma-international.org/'", "source_tables": ["paper", "conference"]}, "evidence": "paper refers to Paper.Title; http://www.irma-international.org/ is the HomePage"}
{"sample_id": 3620, "db_id": "authors", "final": {"question": "Calculate the total average number of papers published from 2002 to 2010 under the conference \"Information and Knowledge Engineering\".", "sql": "SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T1.Year) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'Information and Knowledge Engineering' AND T1.Year >= 2002 AND T1.Year <= 2010", "source_tables": ["paper", "conference"]}, "evidence": "average number of papers refers to DIVIDE(count(id), 9); published from 2002 to 2010 refers to Year BETWEEN 2002 AND 2010; 'Information and Knowledge Engineering' is the FullName of conference;"}
{"sample_id": 3621, "db_id": "authors", "final": {"question": "From year 1991 to 2000, calculate the difference betweeen the total number of papers published under the conference \"International Conference on Supercomputing \" and \"Informatik & Schule\"?", "sql": "SELECT SUM(CASE WHEN T2.FullName = 'Informatik & Schule' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.FullName = 'International Conference on Supercomputing' THEN 1 ELSE 0 END) AS DIFF FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Year > 1990 AND T1.Year < 2001", "source_tables": ["paper", "conference"]}, "evidence": "From year 1991 to 2000 refers to Year BETWEEN 1991 AND 2000; papers refers to Paper.Id; 'International Conference on Supercomputing' AND 'Informatik & Schule' are the FullName of conference; calculate the difference between the total number of papers of these two conferences refers to SUBTRACT(SUM(Paper.Id where FullName = 'International Conference on Supercomputing'), SUM(Paper.Id where FullName = 'Informatik & Schule'))"}
{"sample_id": 3622, "db_id": "authors", "final": {"question": "What is the short name for \"Software - Concepts and Tools / Structured Programming\"?", "sql": "SELECT ShortName FROM Journal WHERE FullName = 'Software - Concepts and Tools / Structured Programming'", "source_tables": ["journal"]}, "evidence": "'Software - Concepts and Tools / Structured Programming' is the FullName;"}
{"sample_id": 3623, "db_id": "authors", "final": {"question": "Which journal was the paper \"Education, democracy and growth\" published on? Give the full name of the journal.", "sql": "SELECT T1.FullName FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Title = 'Education, democracy and growth'", "source_tables": ["paper", "journal"]}, "evidence": "'Education, democracy and growth' is the title of a paper"}
{"sample_id": 3624, "db_id": "authors", "final": {"question": "Give the number of papers that were published on \"IEEE Transactions on Nuclear Science\" in 1999.", "sql": "SELECT COUNT(T2.Id) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'IEEE Transactions on Nuclear Science' AND T2.Year = 1999", "source_tables": ["paper", "journal"]}, "evidence": "'IEEE Transactions on Nuclear Science' is the FullName of journal; 1999 refers to Year = '1999'; papers refers to Paper.Id"}
{"sample_id": 3625, "db_id": "authors", "final": {"question": "What was the name of the paper that was published on \"IEEE Transactions on Pattern Analysis and Machine Intelligence\" in 2011?", "sql": "SELECT T2.Title FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'IEEE Transactions on Pattern Analysis and Machine Intelligence' AND T2.Year = 2011 AND T2.Title <> ''", "source_tables": ["paper", "journal"]}, "evidence": "'IEEE Transactions on Pattern Analysis and Machine Intelligence' is the FullName of journal; 2011 refers to Year = '2011'; name of the paper refers to Title of paper"}
{"sample_id": 3626, "db_id": "authors", "final": {"question": "What are the keywords for the paper which was published on \"Modeling Identification and Control\" in 1994?", "sql": "SELECT T2.Keyword FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Modeling Identification and Control' AND T2.Year = 1994", "source_tables": ["paper", "journal"]}, "evidence": "'Modeling Identification and Control' is the FullName of the journal; 1994 refers to Year = '1994'; if the year is \"0\", it means this paper is preprint, or not published"}
{"sample_id": 3627, "db_id": "authors", "final": {"question": "For the paper which was presented by \"Zvezdan Proti\u0107\", was it preprinted?", "sql": "SELECT CASE WHEN T1.Year = 0 THEN 'TRUE' ELSE 'FALSE' END FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Zvezdan Proti\u0107' AND T1.ConferenceId = 0 AND T1.JournalId = 0", "source_tables": ["paper", "paperauthor"]}, "evidence": "Year = 0 means this paper is preprint, or not published"}
{"sample_id": 3628, "db_id": "authors", "final": {"question": "At which conference was the paper \"Skew-Circulant Preconditioners for Systems of LMF-Based ODE Codes\" presented?", "sql": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'Skew-Circulant Preconditioners for Systems of LMF-Based ODE Codes'", "source_tables": ["paper", "conference"]}, "evidence": "'Skew-Circulant Preconditioners for Systems of LMF-Based ODE Codes' is the Title of the paper; conference refers to Conference.FullName"}
{"sample_id": 3629, "db_id": "authors", "final": {"question": "Tell the number of papers that were presented at \"International Symposium on Software Testing and Analysis\" conference.", "sql": "SELECT COUNT(T1.Id) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'International Symposium on Software Testing and Analysis'", "source_tables": ["paper", "conference"]}, "evidence": "'International Symposium on Software Testing and Analysis' is the FullName of the conference; papers refers to Paper.Id"}
{"sample_id": 3630, "db_id": "authors", "final": {"question": "Gives the home page of the conference where the paper \"Increasing the Concurrency in Estelle\" is presented.", "sql": "SELECT DISTINCT T2.HomePage FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'Increasing the Concurrency in Estelle'", "source_tables": ["paper", "conference"]}, "evidence": "'Increasing the Concurrency in Estelle' is the Title of the paper; home page of the conference refers to HomePage;"}
{"sample_id": 3631, "db_id": "authors", "final": {"question": "How many authors finished the paper \"An Improved Active Suspension Model for Attitude Control of Electric Vehicles\" together?", "sql": "SELECT COUNT(T2.AuthorId) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'An Improved Active Suspension Model for Attitude Control of Electric Vehicles'", "source_tables": ["paper", "paperauthor"]}, "evidence": "authors refers to AuthorId; 'An Improved Active Suspension Model for Attitude Control of Electric Vehicles' is the Title of a paper; A paper can have more than one author. Co-authorship can be derived from (paper ID, author ID) pair."}
{"sample_id": 3632, "db_id": "authors", "final": {"question": "In the year 2012, which conference had the most papers presented? Give the short name of the conference.", "sql": "SELECT T2.ShortName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Year = '2012' GROUP BY T1.ConferenceId ORDER BY COUNT(T1.Id) DESC LIMIT 1", "source_tables": ["paper", "conference"]}, "evidence": "Papers refers to Paper.Id; short name of the conference refers to Conference.ShortName"}
{"sample_id": 3633, "db_id": "authors", "final": {"question": "How many papers were presented at 'ECSQARU' in 2003?", "sql": "SELECT COUNT(T1.Id) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.ShortName = 'ECSQARU' AND T1.Year = '2003'", "source_tables": ["paper", "conference"]}, "evidence": "Papers refers to Paper.Id; ECSQARU is the ShortName of the conference; 2003 refers to Year = '2003'"}
{"sample_id": 3634, "db_id": "authors", "final": {"question": "Show the keywords of the paper that was presented at \"International Radar Symposium\" in 2012.", "sql": "SELECT T1.Keyword FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'International Radar Symposium' AND T1.Year = 2012", "source_tables": ["paper", "conference"]}, "evidence": "'International Radar Symposium' is the FullName of the conference; 2012 refers to Year = '2012'"}
{"sample_id": 3635, "db_id": "authors", "final": {"question": "How many times more for the papers that were presented at the \"International Conference on Thermoelectrics\" conference than \"International Conference on Wireless Networks, Communications and Mobile Computing\u201c conference?", "sql": "SELECT CAST(SUM(CASE WHEN T2.FullName = 'International Conference on Thermoelectrics' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.FullName = 'International Conference on Wireless Networks, Communications and Mobile Computing' THEN 1 ELSE 0 END) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id", "source_tables": ["paper", "conference"]}, "evidence": "'International Conference on Thermoelectrics' AND 'International Conference on Wireless Networks, Communications and Mobile Computing' are the FullName of the conference; Papers refers to Paper.Id; Calculation = SUBTRACT(SUM(Paper.Id where FullName = 'International Conference on Thermoelectrics'), SUM(Paper.Id where FullName = 'International Conference on Wireless Networks, Communications and Mobile Computing'))"}
{"sample_id": 3636, "db_id": "authors", "final": {"question": "What is the percentage of preprints of John Van Reenen's papers?", "sql": "SELECT CAST(SUM(CASE WHEN T1.ConferenceId = 0 AND T1.JournalId = 0 THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.Id) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'John Van Reenen'", "source_tables": ["paper", "paperauthor"]}, "evidence": "year = 0 means this paper is preprint; John Van Reenen is the author's name; papers refers to paper.Id; calculation = DIVIDE(SUM(paper.Id where Name = 'John Van Reenen' AND ConferenceID = 0 AND\u00a0 JournalId = 0), SUM(paper.Id where Name = 'John Van Reenen'))"}
{"sample_id": 3637, "db_id": "authors", "final": {"question": "What is the oldest published book?", "sql": "SELECT Title FROM Paper WHERE Year > 0 ORDER BY Year ASC LIMIT 1", "source_tables": ["paper"]}, "evidence": "published book refers to Title; the oldest book refers to MIN(Year)"}
{"sample_id": 3638, "db_id": "authors", "final": {"question": "Which conference has the longest name?", "sql": "SELECT FullName FROM Conference ORDER BY LENGTH(FullName) DESC LIMIT 1", "source_tables": ["conference"]}, "evidence": "the longest name refers to MAX(length(FullName))"}
{"sample_id": 3639, "db_id": "authors", "final": {"question": "How many authors are affiliated with NASA Langley Research Center?", "sql": "SELECT COUNT(Name) FROM Author WHERE Affiliation = 'NASA Langley Research Center'", "source_tables": ["author"]}, "evidence": "NASA Langley Research Center is the Affiliation"}
{"sample_id": 3640, "db_id": "authors", "final": {"question": "How many journals don\u2019t have a short name?", "sql": "SELECT COUNT(ShortName) FROM Journal WHERE ShortName = ''", "source_tables": ["journal"]}, "evidence": "don\u2019t have a short name means ShortName is null"}
{"sample_id": 3641, "db_id": "authors", "final": {"question": "How many of the papers are preprinted?", "sql": "SELECT COUNT(Id) FROM Paper WHERE ConferenceId = 0 AND JournalId = 0", "source_tables": ["paper"]}, "evidence": "year = 0 means this paper is preprint; papers refers to Paper.Id"}
{"sample_id": 3642, "db_id": "authors", "final": {"question": "What is the title of the paper with the most authors?", "sql": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id GROUP BY T1.PaperId ORDER BY COUNT(T1.PaperId) DESC LIMIT 1", "source_tables": ["paper", "paperauthor"]}, "evidence": "paper refers to paper.Id; paper with the most authors refers to MAX(PaperAuthor.PaperId)"}
{"sample_id": 3643, "db_id": "authors", "final": {"question": "Which paper published by the \"TUBERCLE LUNG DIS\" journal is the oldest?", "sql": "SELECT T2.Title FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.ShortName = 'TUBERCLE LUNG DIS' ORDER BY T2.Year ASC LIMIT 1", "source_tables": ["paper", "journal"]}, "evidence": "paper refers to Title; TUBERCLE LUNG DIS is the ShortName of journal; the oldest refers to MIN(Year)"}
{"sample_id": 3644, "db_id": "authors", "final": {"question": "List all of the papers written by the author \"Karin Rengefors.\"", "sql": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Name = 'Karin Rengefors'", "source_tables": ["paper", "paperauthor"]}, "evidence": "all the papers refers to Title; Karin Rengefors is the Name of the author"}
{"sample_id": 3645, "db_id": "authors", "final": {"question": "How many papers were published by the \"Virtual Reality, IEEE Annual International Symposium\" conference in 2012?", "sql": "SELECT COUNT(T2.Id) FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T1.FullName = 'Virtual Reality, IEEE Annual International Symposium' AND T2.Year = 2012", "source_tables": ["paper", "conference"]}, "evidence": "'Virtual Reality, IEEE Annual International Symposium' is the FullName of conference; in 2012 refers to Year = 2012;"}
{"sample_id": 3727, "db_id": "college_completion", "final": {"question": "Give the total number of all graduated students from a 2-year public schools in Alabama in 2011.", "sql": "SELECT SUM(T2.grad_cohort) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T1.state = 'Alabama' AND T2.year = 2011 AND T1.level = '2-year' AND T1.control = 'Public' AND T2.race = 'X'", "source_tables": ["state_sector_grads", "state_sector_details"]}, "evidence": "number of graduated students refers to grad_cohort; 2-year refers to level = '2-year'; public refers to control = 'Public'; Alabama refers to state = 'Alabama'; in 2011 refers to year = '2011'; reace = 'X' means all students."}
{"sample_id": 3728, "db_id": "college_completion", "final": {"question": "For the state which has the 113 2-year public schools, tell the number of graduated Asian students who seeks another type of degree or certificate at a 2-year institution in 2013.", "sql": "SELECT COUNT(T2.grad_cohort) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.level = '2-year' AND T2.control = 'Public' AND T2.gender = 'B' AND T2.race = 'A' AND T2.cohort = '2y all' AND T1.schools_count = 113", "source_tables": ["state_sector_grads", "state_sector_details"]}, "evidence": "schools_count = 113; 2-year refers to level = '2-year'; public refers to control = 'public'; Asian refers to race = 'A'; seeks another type of degree or certificate at a 2-year institution refers to cohort = '2y all'; in 2013 refers to year = 2013;"}
{"sample_id": 3729, "db_id": "college_completion", "final": {"question": "What is the percentage of the number of 4-year public schools from Madison Area Technical College's home state in the Alabama?", "sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.state = ( SELECT T1.state FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state WHERE T1.chronname = 'Madison Area Technical College' ) AND T1.level = '4-year' AND T1.control = 'Public' THEN T1.chronname ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT CASE WHEN T2.state = 'Alabama' THEN T1.chronname ELSE NULL END) FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state", "source_tables": ["institution_details", "state_sector_details"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(chronname = 'Madison Area Technical College'), SUM(state = 'Alabama')), 100); 4-year refers to level = '4-year'; public refers to control = 'Public'; Madison Area Technical College refers to chronname = 'Madison Area Technical College'; home state in the United States refers to state;"}
{"sample_id": 3730, "db_id": "college_completion", "final": {"question": "Give the state and name of institutions in year of data release from 2010 to 2012 with black students.", "sql": "SELECT DISTINCT T1.state, T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.race = 'B' AND T2.year BETWEEN 2010 AND 2012", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "name of institutions refers to chronname; year of data release refers to year; from '2010' to '2012' refers to year BETWEEN 2010 AND 2012; Black refers to race = 'B';"}
{"sample_id": 3731, "db_id": "college_completion", "final": {"question": "List down the states in 2011 with a national sector average of 20 and below.", "sql": "SELECT DISTINCT T1.state FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.year = 2011 AND T1.awards_per_natl_value <= 20", "source_tables": ["state_sector_grads", "state_sector_details"]}, "evidence": "in 2011 refers to year = '2011'; national sector average of 20 and below refers to awards_per_natl_value < 20;"}
{"sample_id": 3732, "db_id": "college_completion", "final": {"question": "Among the race of all students, what is the control of institution and level of institution with highest number of students?", "sql": "SELECT DISTINCT T1.control, T1.level FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.race = 'X' AND T1.student_count = ( SELECT MAX(T1.student_count) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.race = 'X' )", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "highest number of students refers to student_count; all students refer to race = 'X'."}
{"sample_id": 3733, "db_id": "college_completion", "final": {"question": "Among the states with a public school count of 20 and below, list their race.", "sql": "SELECT DISTINCT T2.race FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T1.schools_count <= 20 AND T1.control = 'Public'", "source_tables": ["state_sector_grads", "state_sector_details"]}, "evidence": "public refers to control = 'Public'; school_count < 20;"}
{"sample_id": 3734, "db_id": "college_completion", "final": {"question": "List the basic of the institution in 2012 with race of all male students.", "sql": "SELECT DISTINCT T1.basic, T2.race FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.year = 2012 AND T2.gender = 'M' AND t2.race = 'X'", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "in 2012 refers to year = '2012'; male refers to gender = 'M'; all students refer to race = 'X'."}
{"sample_id": 3735, "db_id": "college_completion", "final": {"question": "In Alaska with school count of 1 from year 2011 to 2013, how many of the students are white?", "sql": "SELECT COUNT(T2.race) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T1.schools_count = 1 AND T2.year BETWEEN 2011 AND 2013 AND T2.race = 'W' AND T1.state = 'Alaska'", "source_tables": ["state_sector_grads", "state_sector_details"]}, "evidence": "Alaska refers to state = 'Alaska'; from year 2011 to 2013 refers to year BETWEEN '2011' AND '2013'; white refers to race = 'W';"}
{"sample_id": 3736, "db_id": "college_completion", "final": {"question": "What is the institution's name of american students within the number of degree-seeking students in the cohort that ranges from 1 to 3?", "sql": "SELECT DISTINCT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.grad_cohort BETWEEN 1 AND 3 AND T2.race = 'Ai'", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "institution's name refers to chronname; american refers to race = 'Ai'; number of degree-seeking students in the cohort refers to grad_cohort; grad_cohort < = 3;"}
{"sample_id": 3737, "db_id": "college_completion", "final": {"question": "Among the states that start with letter A and attained a national sector average of 16.5, give the number of degree-seeking students in the cohort of those students in 2012 .", "sql": "SELECT SUM(T2.grad_cohort) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.state LIKE 'A%' AND T1.awards_per_natl_value = 16.5 AND T2.year = 2012", "source_tables": ["state_sector_grads", "state_sector_details"]}, "evidence": "state that starts with letter A refers to state LIKE 'A%'; national sector average of 16.5 refers to awards_per_natl_value = 16.5; number of degree-seeking students in the cohort refers to grad_cohort; in 2012 refers to year = '2012';"}
{"sample_id": 3738, "db_id": "college_completion", "final": {"question": "List the site of institution within the student count of 500 to 1000 that has the recent year of data release.", "sql": "SELECT DISTINCT T1.site FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.student_count BETWEEN 500 AND 1000 AND T2.year = ( SELECT MAX(T2.year) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid )", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "recent year of data release refers to newest year;"}
{"sample_id": 3739, "db_id": "college_completion", "final": {"question": "What is the state name of male graduate in 2011 from a private for profit institution with black students?", "sql": "SELECT DISTINCT T1.state FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.gender = 'M' AND T2.race = 'B' AND T1.control = 'Private for-profit' AND T2.year = 2011", "source_tables": ["state_sector_grads", "state_sector_details"]}, "evidence": "male refers to gender = 'M'; in 2011 refers to year = '2011'; private for profit refers to control = 'Private for-profit'; black refers to race = 'B';"}
{"sample_id": 3740, "db_id": "college_completion", "final": {"question": "Among the black students in 2011, list the institution site and name of those who has 20 t0 30 degree-seeking students in the cohort.", "sql": "SELECT DISTINCT T1.site, T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.year = 2011 AND T2.race = 'B' AND T2.grad_cohort BETWEEN 20 AND 30", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "black refers to race = 'B'; in 2011 refers to year = '2011'; institution name refers to chronname; 20 to 30 degree-seeking students in the cohort refers to grad_cohort BWEEN 20 AND 30;"}
{"sample_id": 3741, "db_id": "college_completion", "final": {"question": "In female students in year 2012, how many of them from a state with number of schools ranges from 10 to 20?", "sql": "SELECT COUNT(T2.race) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.gender = 'F' AND schools_count BETWEEN 10 AND 20 AND T2.year = 2012", "source_tables": ["state_sector_grads", "state_sector_details"]}, "evidence": "female refers to gender = 'F'; number of schools refers to schools_count; schools_count BETWEEN 10 AND 20;"}
{"sample_id": 3986, "db_id": "public_review_platform", "final": {"question": "List all the businesses that closed at 8PM.", "sql": "SELECT DISTINCT business_id FROM Business_Hours WHERE closing_time = '8PM'", "source_tables": ["business_hours"]}, "evidence": "closed at 8PM refers to closing_time = '8PM';"}
{"sample_id": 3987, "db_id": "public_review_platform", "final": {"question": "How many 2 stars rated business located in Phoenix, Arizona?", "sql": "SELECT COUNT(business_id) FROM Business WHERE city = 'Phoenix' AND state = 'AZ' AND stars = 2", "source_tables": ["business"]}, "evidence": "located in Phoenix refers to city = 'Phoenix'; Arizona refers to state = 'AZ'"}
{"sample_id": 3988, "db_id": "public_review_platform", "final": {"question": "How many businesses in Tempe are rated as 'Wonderful experience?", "sql": "SELECT COUNT(business_id) FROM Business WHERE city = 'Phoenix' AND stars > 3", "source_tables": ["business"]}, "evidence": "in Tempe refers to city = 'Tempe'; rated as 'Wonderful experience refers to stars > 3"}
{"sample_id": 3989, "db_id": "public_review_platform", "final": {"question": "List all the users with average star less than 3 stars in 2012", "sql": "SELECT user_id FROM Users WHERE user_yelping_since_year = 2012 AND user_average_stars < 3", "source_tables": ["users"]}, "evidence": "average star less than 3 stars refers to user_average_stars < 3; in 2012 refers to user_yelping_since_year = 2012"}
{"sample_id": 3990, "db_id": "public_review_platform", "final": {"question": "Find the percentage of 5 stars rated business.", "sql": "SELECT CAST(SUM(CASE WHEN stars = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(stars) FROM Business", "source_tables": ["business"]}, "evidence": "percentage refers to DIVIDE(COUNT(stars = 5), COUNT(business_id)) * 100%"}
{"sample_id": 3991, "db_id": "public_review_platform", "final": {"question": "Calculate difference between business that have the highest number of reviews and business that have the lowest number of reviews.", "sql": "SELECT ( SELECT COUNT(business_id) FROM Reviews GROUP BY business_id ORDER BY COUNT(business_id) DESC LIMIT 1 ) - ( SELECT COUNT(business_id) FROM Reviews GROUP BY business_id ORDER BY COUNT(business_id) ASC LIMIT 1 ) AS DIFF", "source_tables": ["reviews"]}, "evidence": "highest number of reviews refers to SUBTRACT(MAX(COUNT(business_id), MIN(COUNT(business_id))))"}
{"sample_id": 3992, "db_id": "public_review_platform", "final": {"question": "List all the tires businesses that are opened everyday.", "sql": "SELECT DISTINCT T2.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T1.category_name = 'Tires' GROUP BY T2.business_id HAVING COUNT(day_id) = 7", "source_tables": ["categories", "business_categories", "business_hours", "business"]}, "evidence": "tires businesses refers to category_name = 'Tires'; opened everyday refers to COUNT(distinct opening_time) = 7;"}
{"sample_id": 3993, "db_id": "public_review_platform", "final": {"question": "Which users become an elite in 2012?", "sql": "SELECT DISTINCT T1.user_id FROM Elite AS T1 INNER JOIN Years AS T2 ON T1.year_id = T2.year_id WHERE T2.actual_year = 2012", "source_tables": ["elite", "years"]}, "evidence": "in 2012 refers to actual_year = 2012;"}
{"sample_id": 3994, "db_id": "public_review_platform", "final": {"question": "List the business ID of shopping business that have 4 stars ratings.", "sql": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Shopping' AND T1.stars = 4", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "shopping business refers to category_name = 'Shopping'; 4 stars ratings refers to stars = 4"}
{"sample_id": 3995, "db_id": "public_review_platform", "final": {"question": "How many business have low check-in on Sunday at 10AM?", "sql": "SELECT COUNT(T2.business_id) FROM Days AS T1 INNER JOIN Checkins AS T2 ON T1.day_id = T2.day_id WHERE T1.day_of_week = 'Sunday' AND T2.label_time_10 = 'Low'", "source_tables": ["checkins", "days"]}, "evidence": "on Sunday refers to day_of_week = 'Sunday'; low check-in at 10AM refers to label_time_10 = 'Low'"}
{"sample_id": 3996, "db_id": "public_review_platform", "final": {"question": "How many businesses in Glendale are reviewed by user with the ID of 20241?", "sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Glendale' AND T2.user_id = 20241", "source_tables": ["reviews", "business"]}, "evidence": "in Glendale refers to city = 'Glendale'"}
{"sample_id": 3997, "db_id": "public_review_platform", "final": {"question": "State the locations of all Pet Services business.", "sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Pet Services'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "location refers to city; Pet Services business refers to category_name = 'Pet Services'"}
{"sample_id": 3998, "db_id": "public_review_platform", "final": {"question": "How many photos type compliment given from users with high cool votes?", "sql": "SELECT COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id INNER JOIN Compliments AS T3 ON T2.compliment_id = T3.compliment_id INNER JOIN Reviews AS T4 ON T1.user_id = T4.user_id WHERE T3.compliment_type = 'photos' AND T4.review_votes_cool = 'High'", "source_tables": ["compliments", "users", "users_compliments", "reviews"]}, "evidence": "photos type compliment refers to compliment_type = 'photos'; high cool votes refers to review_votes_cool = 'High'"}
{"sample_id": 3999, "db_id": "public_review_platform", "final": {"question": "How many closed businesses that have more than 10 attributes?", "sql": "SELECT COUNT(*) FROM Business WHERE business_id IN ( SELECT T1.business_id FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id WHERE T1.active = 'false' GROUP BY T1.business_id HAVING COUNT(DISTINCT T2.attribute_id) > 10 )", "source_tables": ["business_attributes", "business"]}, "evidence": "closed refers to active = 'false'; more than 10 attributes refers to count(attribute_id) > 10"}
{"sample_id": 4000, "db_id": "public_review_platform", "final": {"question": "List the business located in Mesa that have alcohol attribute.", "sql": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.city = 'Mesa' AND T3.attribute_name = 'Alcohol'", "source_tables": ["attributes", "business_attributes", "business"]}, "evidence": "in Mesa refers to city = 'Mesa'; alcohol attribute refers to attribute_name = 'Alcohol'"}
{"sample_id": 4001, "db_id": "public_review_platform", "final": {"question": "Based on business in Phoenix, calculate the percentage of business with low funny votes.", "sql": "SELECT CAST(SUM(CASE WHEN T2.review_votes_funny = 'Low' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Phoenix'", "source_tables": ["reviews", "business"]}, "evidence": "in Chandelier refers to city = 'Chandelier'; percentage = divide(count(business_id where review_votes_funny = 'Low'), count(business_id)); business with low funny votes refers to review_votes_funny = 'Low'"}
{"sample_id": 4002, "db_id": "public_review_platform", "final": {"question": "What is the ratio between business in shopping category and business in pets category?", "sql": "SELECT CAST(SUM(CASE WHEN T2.category_name = 'Shopping' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.category_name = 'Pets' THEN 1 ELSE 0 END) AS radio FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id", "source_tables": ["categories", "business_categories"]}, "evidence": "ratio = divide(count(business_id where category_name = 'Shopping'), count(business_id where category_name = 'Pets'))"}
{"sample_id": 4003, "db_id": "public_review_platform", "final": {"question": "How many businesses are registered in the database under 'Banks & Credit Unions' category?", "sql": "SELECT COUNT(T2.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.category_name = 'Banks & Credit Unions'", "source_tables": ["categories", "business_categories"]}, "evidence": "category refers to category_name"}
{"sample_id": 4004, "db_id": "public_review_platform", "final": {"question": "How many active businesses from Casa Grande are registered in the database?", "sql": "SELECT COUNT(business_id) FROM Business WHERE active = 'true' AND city = 'Casa Grande'", "source_tables": ["business"]}, "evidence": "active business refers to active = 'true'; Casa Grande refers to city = 'Casa Grande'"}
{"sample_id": 4005, "db_id": "public_review_platform", "final": {"question": "What time does the business with ID no.12 open on Monday?", "sql": "SELECT T1.opening_time FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T1.business_id = 12 AND T2.day_of_week = 'Monday'", "source_tables": ["business_hours", "days"]}, "evidence": "open time refers to opening_time; on Monday refers to day_of_week = 'Monday'; business with ID no. refers to business_id \n\n"}
{"sample_id": 4006, "db_id": "public_review_platform", "final": {"question": "How many businesses that are registered in the database can be attributed to 'Good for Kids'?", "sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name = 'Good for Kids' AND T2.attribute_value = 'true'", "source_tables": ["attributes", "business_attributes"]}, "evidence": "can be attributed to 'Good for Kids' refers to attribute_name = 'Good for Kids' and attribute_value = 'true'"}
{"sample_id": 4007, "db_id": "public_review_platform", "final": {"question": "Identify the most popular and appealing active business in Gilbert based on users' reviews.", "sql": "SELECT business_id FROM Business WHERE city = 'Gilbert' AND active = 'true' AND review_count = 'High' ORDER BY stars DESC LIMIT 1", "source_tables": ["business"]}, "evidence": "most popular and appealing refers to review_count = 'High' and max(stars); active business refers to active = 'true'; in Gilbert refers to city = 'Gilbert'"}
{"sample_id": 4008, "db_id": "public_review_platform", "final": {"question": "Find the 5-star business in Ahwatukee, AZ and identify it's business category.", "sql": "SELECT T1.business_id, T3.category_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T1.city = 'Ahwatukee' AND T1.stars = 5", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "5-star refers to stars = 5; in Ahwatukee refers to city = 'Ahwatukee'; business category refers to category_name"}
{"sample_id": 4009, "db_id": "public_review_platform", "final": {"question": "Among all closed businesses in Avondale, AZ what percent have obtained a 'wonderful experience' rating of the business.", "sql": "SELECT CAST(SUM(CASE WHEN stars > 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(stars) FROM Business WHERE city = 'Avondale' AND active = 'false'", "source_tables": ["business"]}, "evidence": "closed business refers to active = 'false'; in Avondale refers to city = 'Avondale'; 'wonderful experience' rating refers to stars > 3; percentage = divide(count(business_id where stars > 3), count(business_id))*100%"}
{"sample_id": 4010, "db_id": "public_review_platform", "final": {"question": "Identify the user who has been yelping since 2004. Is he or she an Yelp Elite member?", "sql": "SELECT DISTINCT T2.user_id FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2004", "source_tables": ["users", "elite"]}, "evidence": "has been yelping since 2004 refers to user_yelping_since_year = 2004"}
{"sample_id": 4011, "db_id": "public_review_platform", "final": {"question": "Identify the percent of long reviews among all 5-star reviews given to businesses by the Yelp users.", "sql": "SELECT CAST(SUM(CASE WHEN review_length = 'Long' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(review_length) FROM Reviews WHERE review_stars = 5", "source_tables": ["reviews"]}, "evidence": "percentage = divide(count(business_id where review_length = 'Long' and review_stars = 5), count(business_id)) * 100%; long reviews refers to review_length = 'Long'; 5-star review refers to review_stars = 5"}
{"sample_id": 4012, "db_id": "public_review_platform", "final": {"question": "Among all the users with the average ratings of at least 4 and above of all reviews, calculate the percent that have no fans or followers.", "sql": "SELECT CAST(SUM(CASE WHEN user_fans = 'None' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(user_id) FROM Users WHERE user_average_stars >= 4", "source_tables": ["users"]}, "evidence": "average ratings of at least 4 refers to user_average_stars > = 4; no fans or followers refers to user_fans = 'None'; percentage = divide(count(user_id where user_average_stars > = 4 and user_fans = 'None'), sum(user_id where user_average_stars > = 4))*100%"}
{"sample_id": 4013, "db_id": "public_review_platform", "final": {"question": "How many short tips were left for the business with ID no.2?", "sql": "SELECT COUNT(business_id) FROM Tips WHERE business_id = 2 AND tip_length = 'Short'", "source_tables": ["tips"]}, "evidence": "short tip refers to tip_length = 'Short'; business category refers to category_name"}
{"sample_id": 4014, "db_id": "public_review_platform", "final": {"question": "Find the Yelp user with the average 5-star rating of all reviews who has been yelping the longest.", "sql": "SELECT user_id FROM Users WHERE user_average_stars = 5 ORDER BY user_yelping_since_year ASC LIMIT 1", "source_tables": ["users"]}, "evidence": "Yelp user refers to user_id; average 5-star rating refers to user_average_stars = 5; yelping the longest refers to min(user_yelping_since_year)"}
{"sample_id": 4015, "db_id": "public_review_platform", "final": {"question": "Identify the operating hours of businesses in Black Canyon City with review count greater than average.", "sql": "SELECT T2.opening_time, T2.closing_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city = 'Black Canyon City' GROUP BY t2.business_id HAVING T1.review_count > AVG(T1.review_count)", "source_tables": ["business_hours", "days", "business"]}, "evidence": "operating hours refers to opening_time closing_time on day_id; in Black Canyon City refers to city = 'Black Canyon City'; greater than average refers to review_count > AVG(T1.review_count)"}
{"sample_id": 4016, "db_id": "public_review_platform", "final": {"question": "Among all the users who received the high number of compliments, what percent received the 'cute' type of compliment.", "sql": "SELECT CAST(SUM(CASE WHEN T1.compliment_type = 'cute' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.user_id) FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T2.number_of_compliments = 'High'", "source_tables": ["compliments", "users_compliments"]}, "evidence": "high number of compliments refers to number_of_compliments = 'High'; percentage = divide(count(user_id where compliment_type = 'cute'), count(user_id))*100%"}
{"sample_id": 4017, "db_id": "public_review_platform", "final": {"question": "Mention the number of businesses that have no any attribute.", "sql": "SELECT COUNT(business_id) FROM Business_Attributes WHERE attribute_value IN ('none', 'no', 'false')", "source_tables": ["business_attributes"]}, "evidence": "have no attribute refers to attribute_value in( 'none', 'no', 'false')"}
{"sample_id": 4018, "db_id": "public_review_platform", "final": {"question": "What are the opening and closing time of business id 1 for day id 2?", "sql": "SELECT opening_time, closing_time FROM Business_Hours WHERE business_id = 1 AND day_id = 2", "source_tables": ["business_hours"]}, "evidence": "false"}
{"sample_id": 4019, "db_id": "public_review_platform", "final": {"question": "List out city name of businesses which have medium length of review.", "sql": "SELECT DISTINCT T1.city FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T2.review_length = 'Medium'", "source_tables": ["reviews", "business"]}, "evidence": "medium length of review refers to review_length = 'Medium'"}
{"sample_id": 4020, "db_id": "public_review_platform", "final": {"question": "What is the closing time of business id 4 on Sunday?", "sql": "SELECT T2.closing_time FROM Days AS T1 INNER JOIN Business_Hours AS T2 ON T1.day_id = T2.day_id WHERE T1.day_of_week = 'Sunday' AND T2.business_id = 4", "source_tables": ["business_hours", "days"]}, "evidence": "on Sunday refers to day_of_week = 'Sunday'"}
{"sample_id": 4021, "db_id": "public_review_platform", "final": {"question": "Among the businesses which have short length of review, which one located in Phoenix?", "sql": "SELECT DISTINCT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Phoenix' AND T2.review_length = 'Short'", "source_tables": ["reviews", "business"]}, "evidence": "short length of review refers to review_length = 'Short'; in Phoenix refers to city = 'Phoenix'"}
{"sample_id": 4022, "db_id": "public_review_platform", "final": {"question": "Among the users whose fan is medium, how many users received high compliments from other users.", "sql": "SELECT COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id WHERE T2.number_of_compliments = 'High' AND T1.user_fans = 'Medium'", "source_tables": ["users", "users_compliments"]}, "evidence": "is medium refers to user_fans = 'Medium'; high compliments refers to number_of_compliments = 'High'"}
{"sample_id": 4023, "db_id": "public_review_platform", "final": {"question": "Among the users who received low compliments from other users, which users joined Yelp in 2012?", "sql": "SELECT DISTINCT T2.user_id FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2012 AND T2.number_of_compliments = 'Low'", "source_tables": ["users", "users_compliments"]}, "evidence": "low compliments refers to number_of_compliments = 'Low'; joined Yelp in 2012 refers to user_yelping_since_year = 2012"}
{"sample_id": 4024, "db_id": "public_review_platform", "final": {"question": "Among the businesses without attribute, how many businesses located in Gilbert?", "sql": "SELECT COUNT(T2.business_id) FROM Business_Attributes AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T2.city = 'Gilbert' AND T1.attribute_value IN ('None', 'no', 'false')", "source_tables": ["business_attributes", "business"]}, "evidence": "without attribute refers to attribute_value = 'None'; in Gilbert refers to city = 'Gilbert'"}
{"sample_id": 4025, "db_id": "public_review_platform", "final": {"question": "Among the businesses with average rating, how many business has attribute of full_bar.", "sql": "SELECT COUNT(T1.business_id) FROM Business_Attributes AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.attribute_value = 'full_bar'", "source_tables": ["business_attributes", "business"]}, "evidence": "average rating refers to avg(stars); attribute of full_bar refers to attribute_value = 'full_bar'"}
{"sample_id": 4026, "db_id": "public_review_platform", "final": {"question": "List out the state of businesses which have opening time at 1AM.", "sql": "SELECT DISTINCT T1.state FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T2.opening_time = '1AM'", "source_tables": ["business_hours", "business"]}, "evidence": "state refers to city"}
{"sample_id": 4027, "db_id": "public_review_platform", "final": {"question": "List out the category name of business id 5.", "sql": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T2.business_id = 5", "source_tables": ["categories", "business_categories"]}, "evidence": ""}
{"sample_id": 4028, "db_id": "public_review_platform", "final": {"question": "List out the user id that has compliment type of photos.", "sql": "SELECT T2.user_id FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.compliment_type = 'photos'", "source_tables": ["compliments", "users_compliments"]}, "evidence": "compliment type of photos refers to compliment_type = 'photos'"}
{"sample_id": 4029, "db_id": "public_review_platform", "final": {"question": "Calculate the percentage of medium tip length in the list. List out the time when users of medium tip length join Yelp.", "sql": "SELECT CAST(SUM(CASE WHEN T1.tip_length = 'Medium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.tip_length), T2.user_yelping_since_year FROM Tips AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id", "source_tables": ["users", "tips"]}, "evidence": "medium tip length refers to tip_length = 'Medium'; percentage = divide(count(tips where tip_length = 'Medium'), count(tips))*100%; the time when users join Yelp refers to user_yelping_since_year"}
{"sample_id": 4030, "db_id": "public_review_platform", "final": {"question": "Calculate the percentage of businesses who located in Mesa. What is attribute value of these businesses.", "sql": "SELECT CAST(COUNT(T1.city) AS REAL) * 100 / ( SELECT COUNT(business_id) FROM Business ), T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Mesa'", "source_tables": ["business_attributes", "business"]}, "evidence": "percentage = divide(count(business where city = 'Mesa'), count(business)) * 100%"}
{"sample_id": 4031, "db_id": "public_review_platform", "final": {"question": "State the state of businesses which have closing time at 12AM.", "sql": "SELECT DISTINCT T1.state FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T2.closing_time = '12AM'", "source_tables": ["business_hours", "business"]}, "evidence": "state refers to city"}
{"sample_id": 4032, "db_id": "public_review_platform", "final": {"question": "Among the businesses which have attribute of beer_and_wine, how many business located in Peoria?", "sql": "SELECT COUNT(T1.business_id) FROM Business_Attributes AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T2.city = 'Peoria' AND T1.attribute_value = 'beer_and_wine'", "source_tables": ["business_attributes", "business"]}, "evidence": "attribute of beer_and_wine refers to attribute_value = 'beer_and_wine'; in Peoria refers to city = 'Peoria'"}
{"sample_id": 4033, "db_id": "public_review_platform", "final": {"question": "Among the users who received high compliments from other users, which users joined Yelp earliest?", "sql": "SELECT T2.user_id FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id WHERE T2.number_of_compliments = 'High' AND T1.user_yelping_since_year = ( SELECT MIN(user_yelping_since_year) FROM Users )", "source_tables": ["users", "users_compliments"]}, "evidence": "high compliments refers to number_of_compliments = ' High'; joined Yelp earliest refers to min(user_yelping_since_year)"}
{"sample_id": 4034, "db_id": "public_review_platform", "final": {"question": "Which business ID has the most reviews?", "sql": "SELECT business_id FROM Reviews GROUP BY business_id ORDER BY COUNT(user_id) DESC LIMIT 1", "source_tables": ["reviews"]}, "evidence": "the most reviews refer to MAX(user_id);"}
{"sample_id": 4035, "db_id": "public_review_platform", "final": {"question": "Which year has the most elite users?", "sql": "SELECT year_id FROM Elite GROUP BY year_id ORDER BY COUNT(user_id) DESC LIMIT 1", "source_tables": ["elite"]}, "evidence": "year has the most elite users refers to year_id with MAX(user_id);"}
{"sample_id": 4036, "db_id": "public_review_platform", "final": {"question": "How many 5 star businesses have uber review votes for funny?", "sql": "SELECT COUNT(business_id) FROM Reviews WHERE review_stars = 5 AND review_votes_funny = 'Uber'", "source_tables": ["reviews"]}, "evidence": "businesses refer to business_id; review_stars = 5.0; review_votes_funny = 'uber';"}
{"sample_id": 4037, "db_id": "public_review_platform", "final": {"question": "How many users have uber review votes for funny from the fans?", "sql": "SELECT COUNT(DISTINCT user_id) FROM Reviews WHERE review_votes_funny = 'Uber'", "source_tables": ["reviews"]}, "evidence": "users refer to user_id; review_votes_funny = 'uber';"}
{"sample_id": 4038, "db_id": "public_review_platform", "final": {"question": "Which business ID have the shortest business operating hours?", "sql": "SELECT business_id FROM Business_Hours ORDER BY closing_time - opening_time LIMIT 1", "source_tables": ["business_hours"]}, "evidence": "the shortest business operating hours refer to MIN(SUBTRACT(closing_time, opening_time));"}
{"sample_id": 4039, "db_id": "public_review_platform", "final": {"question": "Find out which business ID are opened all the time.", "sql": "SELECT DISTINCT business_id FROM Business_Hours WHERE day_id >= 1 AND day_id < 8 AND opening_time = closing_time", "source_tables": ["business_hours"]}, "evidence": "opened all the time refers to Business_Hours where day_id BETWEEN 1 and 7 and opening_time = closing_time;"}
{"sample_id": 4040, "db_id": "public_review_platform", "final": {"question": "Does the length of the tip influence the number of likes for hotel and travel business category?", "sql": "SELECT T3.tip_length, SUM(T3.likes) AS likes FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Tips AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Hotels & Travel' GROUP BY T3.tip_length", "source_tables": ["categories", "business_categories", "tips"]}, "evidence": "the longer the tip_length, the lesser the likes OR the longer the tip length the higher the likes; hotel and travel business category refers to category_name = 'Hotels & Travel';"}
{"sample_id": 4041, "db_id": "public_review_platform", "final": {"question": "How many users manage to get uber votes for all of the review category? Find out what are the user average star.", "sql": "SELECT COUNT(T2.user_id) AS USER_IDS, T2.user_average_stars FROM Reviews AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.review_votes_funny = 'Uber' AND T1.review_votes_useful = 'Uber' AND T1.review_votes_cool = 'Uber'", "source_tables": ["users", "reviews"]}, "evidence": "users refer to user_id; uber votes for all of the review category refer to review_votes_funny = 'uber' AND review_votes_useful = 'uber' AND review_votes_cool = 'uber';"}
{"sample_id": 4042, "db_id": "public_review_platform", "final": {"question": "What is the ratio of good to bad business star for a businesses that are opened all the time?", "sql": "SELECT CAST(SUM(CASE WHEN T1.stars BETWEEN 3.5 AND 5 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.stars BETWEEN 1 AND 2.5 THEN 1 ELSE 0 END) AS ratio FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id", "source_tables": ["business_hours", "business"]}, "evidence": "opened all the time refers to Business_Hours where day_id BETWEEN 1 and 7 and opening_time = closing_time; ratio can be computed as DIVIDE(COUNT(stars BETWEEN 3.5 and 5), COUNT(stars BETWEEN 1 and 2.5));"}
{"sample_id": 4043, "db_id": "public_review_platform", "final": {"question": "List out 10 business ID that are being reviewed the most by users and list out what are top 3 business categories.", "sql": "SELECT T2.business_id, T3.category_name FROM Reviews AS T1 INNER JOIN Business_categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id GROUP BY T2.business_id ORDER BY COUNT(T1.user_id) DESC LIMIT 10", "source_tables": ["categories", "business_categories", "reviews"]}, "evidence": "being reviewed the most refers to MAX(user_id); business categories refer to category_name;"}
{"sample_id": 4044, "db_id": "public_review_platform", "final": {"question": "How many businesses in Arizona having an average review less than 3 stars?", "sql": "SELECT COUNT(business_id) FROM Business WHERE business_id IN ( SELECT DISTINCT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.state = 'AZ' GROUP BY T1.business_id HAVING SUM(T2.review_stars) / COUNT(T2.user_id) < 3 )", "source_tables": ["reviews", "business"]}, "evidence": "businesses in Arizona refer to business_id where state = 'Arizona'; average review less than 3 stars refers to AVG(review_stars) < 3.0;"}
{"sample_id": 4045, "db_id": "public_review_platform", "final": {"question": "What is the percentage of user not becoming an elite user?", "sql": "SELECT CAST((( SELECT COUNT(user_id) FROM Users ) - ( SELECT COUNT(DISTINCT user_id) FROM Elite )) AS REAL) * 100 / ( SELECT COUNT(user_id) FROM Users )", "source_tables": ["users", "elite"]}, "evidence": "DIVIDE(SUBTRACT(COUNT(user_id), COUNT(Elite.user_id)), COUNT(user_id)) as percentage;"}
{"sample_id": 4046, "db_id": "public_review_platform", "final": {"question": "What are the most common compliments types received by user with uber number of fans?", "sql": "SELECT DISTINCT T3.compliment_type FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id INNER JOIN Compliments AS T3 ON T2.compliment_id = T3.compliment_id WHERE T1.user_fans = 'Uber'", "source_tables": ["compliments", "users", "users_compliments"]}, "evidence": "the most common compliments types refer to MAX(COUNT(compliment_id)); user_fans = 'uber';"}
{"sample_id": 4047, "db_id": "public_review_platform", "final": {"question": "What is the average year needed by a user with uber fans to become an elite user?", "sql": "SELECT CAST(SUM(T2.year_id - T1.user_yelping_since_year) AS REAL) / COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id WHERE T1.user_fans = 'Uber'", "source_tables": ["users", "elite"]}, "evidence": "AVG(user_yelping_since_year) where user_fans = 'uber';"}
{"sample_id": 4048, "db_id": "public_review_platform", "final": {"question": "What is the average year for a user to be upgraded to elite user?", "sql": "SELECT CAST(SUM(T2.year_id - T1.user_yelping_since_year) AS REAL) / COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id", "source_tables": ["users", "elite"]}, "evidence": "AVG(user_yelping_since_year) where user_id from Elite;"}
{"sample_id": 4049, "db_id": "public_review_platform", "final": {"question": "How many business are opened for more than 8 hour in Mesa and what is the percentage of the active businesses?", "sql": "SELECT CAST(SUM(CASE WHEN T1.active = 'true' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) AS ACT FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Mesa'", "source_tables": ["business_hours", "business"]}, "evidence": "business are opened for more than 8 hours refer to business_id where SUBTRACT(closing_time, opening_time) > 8; DIVIDE(COUNT(business_id where active = 'true' and city = 'Mesa' and SUBTRACT(closing_time, opening_time) > 8), COUNT(business_id where city = 'Mesa' and SUBTRACT(closing_time, opening_time) > 8)) as percentage;"}
{"sample_id": 4050, "db_id": "public_review_platform", "final": {"question": "How many active businesses are opened during late afternoon in the Phoenix city? List out the top 3 categories name for these businesses.", "sql": "SELECT DISTINCT T4.category_name FROM Business_Hours AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.active = 'true' AND T2.city = 'Phoenix' AND T1.opening_time >= '5PM' LIMIT 3", "source_tables": ["categories", "business_categories", "business_hours", "business"]}, "evidence": "opened during late afternoon refers to Business_Hours where opening_time \u2265 '5PM'; active businesses refer to business_id where active = 'true';"}
{"sample_id": 4051, "db_id": "public_review_platform", "final": {"question": "Which user has done the most review on a business attributed to delivery?", "sql": "SELECT T3.user_id FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Reviews AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name = 'Delivery' GROUP BY T3.user_id ORDER BY COUNT(T2.business_id) DESC LIMIT 1", "source_tables": ["attributes", "reviews", "business_attributes"]}, "evidence": "the most reviews refer to MAX(business_id) where attribute_name = 'Delivery';"}
{"sample_id": 4052, "db_id": "public_review_platform", "final": {"question": "What is the average number of reviews written for active businesses that operate not more than 30 hours a week?", "sql": "SELECT AVG(T3.user_id) FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Reviews AS T3 ON T1.business_id = T3.business_id WHERE T1.active = 'true' GROUP BY T2.closing_time - T2.opening_time HAVING SUM(T2.closing_time - T2.opening_time) < 30", "source_tables": ["business_hours", "reviews", "business"]}, "evidence": "avg(user_id) where active = 'true' and SUM(SUBTRACT(closing_time, opening_time)) < 30;"}
{"sample_id": 4053, "db_id": "public_review_platform", "final": {"question": "How many business ids have opening hours from 8AM to 6PM?", "sql": "SELECT DISTINCT business_id FROM Business_Hours WHERE opening_time = '8AM' AND closing_time = '6PM'", "source_tables": ["business_hours"]}, "evidence": "opening hours from 8AM to 6PM refer to Business_Hours where opening_time = '8AM' and closing_time = '6PM';"}
{"sample_id": 4054, "db_id": "public_review_platform", "final": {"question": "Provide business ids with opening hours 10AM on Saturday.", "sql": "SELECT DISTINCT business_id FROM Business_Hours WHERE day_id = 6 AND opening_time = '10AM'", "source_tables": ["business_hours"]}, "evidence": "opening hours 10AM on Saturday refer to Business_Hours where opening_time = '10AM' and day_id = 6;"}
{"sample_id": 4055, "db_id": "public_review_platform", "final": {"question": "Indicate the business id and days which are opened from 8AM to 6PM.", "sql": "SELECT DISTINCT day_id FROM Business_Hours WHERE opening_time = '8AM' AND closing_time = '6PM'", "source_tables": ["business_hours"]}, "evidence": "opened from 8AM to 6PM refers to Business_Hours where opening_time = '8AM' and closing_time = '6PM'; days refer to day_id;"}
{"sample_id": 4056, "db_id": "public_review_platform", "final": {"question": "How many businesses id are rated more than 4?", "sql": "SELECT COUNT(business_id) FROM Business WHERE stars > 4", "source_tables": ["business"]}, "evidence": "rated more than 4 refers to stars > 4;"}
{"sample_id": 4057, "db_id": "public_review_platform", "final": {"question": "What are the categories of businesses that have opening time on Sunday?", "sql": "SELECT DISTINCT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T2.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id WHERE T4.day_of_week = 'Sunday' AND T3.opening_time <> ''", "source_tables": ["categories", "business_categories", "business_hours", "days"]}, "evidence": "categories of businesses refer to category_name; Sunday refers to day_of_week where day_id = 1;"}
{"sample_id": 4058, "db_id": "public_review_platform", "final": {"question": "Please indicate the opening day of businesses whose category is pets.", "sql": "SELECT DISTINCT T4.day_of_week FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T1.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id WHERE T2.category_name = 'Pets'", "source_tables": ["categories", "business_categories", "business_hours", "days"]}, "evidence": "category is pets refers to category_name = 'Pets'; opening day refers to day_id from Business_Hours and opening_time;"}
{"sample_id": 4059, "db_id": "public_review_platform", "final": {"question": "Please indicate the closing hours and business days of the businesses with the category named Doctors.", "sql": "SELECT DISTINCT T3.opening_time, T3.day_id FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T1.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id WHERE T2.category_name = 'Doctors'", "source_tables": ["categories", "business_categories", "business_hours", "days"]}, "evidence": "closing hours refer to closing_time; business days refer to day_id from Business_Hours;"}
{"sample_id": 4060, "db_id": "public_review_platform", "final": {"question": "Among the working days from Monday to Saturday, which businesses with the category names work the most days?", "sql": "SELECT T2.category_name FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T1.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id GROUP BY T2.category_name ORDER BY COUNT(T3.day_id) DESC LIMIT 1", "source_tables": ["categories", "business_categories", "business_hours", "days"]}, "evidence": "days from Monday to Saturday refer to day_id between 2 and 7; work the most days can be computed as MAX(COUNT(category_name where day_id between 2 and 7));"}
{"sample_id": 4061, "db_id": "public_review_platform", "final": {"question": "Please indicate the business id have the closing time with the category of Arts & Entertainment on Sunday.", "sql": "SELECT T1.business_id, T3.closing_time FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T1.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id WHERE T2.category_name = 'Arts & Entertainment' AND T4.day_of_week = 'Sunday'", "source_tables": ["categories", "business_categories", "business_hours", "days"]}, "evidence": "Sunday refers to day_of_week = 'Sunday' where day_id = 1; category of Arts & Entertainment refers to category_name = 'Arts & Entertainment';"}
{"sample_id": 4150, "db_id": "citeseer", "final": {"question": "List the words that are cited in both AI and IR class label.", "sql": "SELECT DISTINCT T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'AI' OR T1.class_label = 'IR'", "source_tables": ["paper", "content"]}, "evidence": ""}
{"sample_id": 4151, "db_id": "citeseer", "final": {"question": "Name the paper which is cited most times and the paper which is cited least times? Also, find the number of times each one is cited.", "sql": "SELECT cited_paper_id, COUNT(cited_paper_id), ( SELECT cited_paper_id FROM cites GROUP BY cited_paper_id ORDER BY COUNT(cited_paper_id) ASC LIMIT 1 ), ( SELECT COUNT(cited_paper_id) FROM cites GROUP BY cited_paper_id ORDER BY COUNT(cited_paper_id) ASC LIMIT 1 ) FROM cites GROUP BY cited_paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1", "source_tables": ["cites"]}, "evidence": ""}
{"sample_id": 4152, "db_id": "citeseer", "final": {"question": "On average, how many papers are under the ML class?", "sql": "SELECT CAST(COUNT(CASE WHEN class_label = 'ML' THEN paper_id ELSE NULL END) AS REAL) / COUNT(paper_id) FROM paper", "source_tables": ["paper"]}, "evidence": "class refers to class_label; average = divide(count(paper_id where class_label = 'M')), (count(paper_id)));"}
{"sample_id": 4284, "db_id": "simpson_episodes", "final": {"question": "What are the episodes that have the average rating with more than 20 of 2-star votes?", "sql": "SELECT DISTINCT T1.episode_id FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 2 AND T2.votes > 20 AND T1.rating > 5.0 AND T1.rating <= 7.0;", "source_tables": ["episode", "vote"]}, "evidence": "2-star refers to stars = 2; average rating refers to 5 < rating < = 7; more than 20 of 2-star votes refers to votes > 20"}
{"sample_id": 4285, "db_id": "simpson_episodes", "final": {"question": "Which episode has the largest number of votes?", "sql": "SELECT episode FROM Episode WHERE votes = ( SELECT MAX(votes) FROM Episode );", "source_tables": ["episode"]}, "evidence": "largest number of votes refers to MAX(votes)"}
{"sample_id": 4286, "db_id": "simpson_episodes", "final": {"question": "Who is the oldest among all the casts and crews?", "sql": "SELECT name FROM Person ORDER BY birthdate ASC LIMIT 1;", "source_tables": ["person"]}, "evidence": "oldest refers to MIN(birthdate)"}
{"sample_id": 4287, "db_id": "simpson_episodes", "final": {"question": "What are the episodes Oscar Cervantes is credited with?", "sql": "SELECT episode_id FROM Credit WHERE person = 'Oscar Cervantes' AND credited = 'true';", "source_tables": ["credit"]}, "evidence": "is credited refers to credited = 'true';"}
{"sample_id": 4288, "db_id": "simpson_episodes", "final": {"question": "What are the roles of the cast and crew from countries other than the USA?", "sql": "SELECT T2.role FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T1.birth_country != 'USA';", "source_tables": ["person", "credit"]}, "evidence": "from countries other than the USA refers to birth_country ! = 'USA'"}
{"sample_id": 4289, "db_id": "simpson_episodes", "final": {"question": "How many 1 star ratings are there in the worst rated episode of the season?", "sql": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 1 ORDER BY T1.rating LIMIT 1;", "source_tables": ["episode", "vote"]}, "evidence": "worst rated episode refers to MIN(rating)"}
{"sample_id": 4290, "db_id": "simpson_episodes", "final": {"question": "Which character did the \"Outstanding Voice-Over Performance\" winner voice?", "sql": "SELECT DISTINCT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.award = 'Outstanding Voice-Over Performance' AND T1.result = 'Winner';", "source_tables": ["character_award", "award"]}, "evidence": "the \"Outstanding Voice-Over Performance\" refers to award = 'Outstanding Voice-Over Performance'; winner refers to result = 'Winner';"}
{"sample_id": 4291, "db_id": "simpson_episodes", "final": {"question": "What is the summary of the episode in which Emily Blunt is featured in?", "sql": "SELECT T1.summary FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.person = 'Emily Blunt';", "source_tables": ["episode", "credit"]}, "evidence": ""}
{"sample_id": 4292, "db_id": "simpson_episodes", "final": {"question": "Who did \"The Tiny Canadian\" play as in the show?", "sql": "SELECT T2.role FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T1.nickname = 'The Tiny Canadian';", "source_tables": ["person", "credit"]}, "evidence": "\"The Tiny Canadian\" refers to nickname = 'The Tiny Canadian'; play as in the show refers to role\n"}
{"sample_id": 4293, "db_id": "simpson_episodes", "final": {"question": "Among the episodes with an award nominee or winner, which has the highest percent of 5 star votes?", "sql": "SELECT T1.episode_id FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 5 ORDER BY T2.percent DESC LIMIT 1;", "source_tables": ["vote", "award"]}, "evidence": "highest percent of 5 star votes refers to max(percent) where star = 5"}
{"sample_id": 4294, "db_id": "simpson_episodes", "final": {"question": "What is the credited cast for the episode \"In the Name of the Grandfather\"?", "sql": "SELECT DISTINCT T2.person FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'In the Name of the Grandfather' AND T2.category = 'Cast' AND T2.credited = 'true';", "source_tables": ["episode", "credit"]}, "evidence": "credited cast refers to category = 'Cast' and\u00a0 credited = 'true'; episode \"In the Name of the Grandfather\" refers to title = 'In the Name of the Grandfather'"}
{"sample_id": 4295, "db_id": "simpson_episodes", "final": {"question": "List all of the award winners' birth dates.", "sql": "SELECT T1.birthdate FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.result = 'Winner';", "source_tables": ["person", "award"]}, "evidence": "award winner refers to result = 'Winner'"}
{"sample_id": 4296, "db_id": "simpson_episodes", "final": {"question": "Who is the writer for the episode with the most 10 star votes?", "sql": "SELECT T1.person FROM Credit AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.role = 'Writer' AND T2.stars = 10 GROUP BY T1.person ORDER BY COUNT(*) DESC LIMIT 1;", "source_tables": ["vote", "credit"]}, "evidence": "writer refers to role = 'Writer'; most 10 star votes refers to max(votes) where stars = 10"}
{"sample_id": 4297, "db_id": "simpson_episodes", "final": {"question": "What award did the episode that aired on 11/30/2008 win?", "sql": "SELECT T1.award FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.result = 'Winner' AND T2.air_date = '2008-11-30';", "source_tables": ["episode", "award"]}, "evidence": "aired on 11/30/2008 refers to air_date = '11/30/2008'; win refers to result = 'Winner'"}
{"sample_id": 4298, "db_id": "simpson_episodes", "final": {"question": "List all of the information about the music department's casts and crews.", "sql": "SELECT DISTINCT person, name, birthdate, birth_name, birth_place , birth_region, birth_country, height_meters, nickname FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T2.category = 'Music Department';", "source_tables": ["person", "credit"]}, "evidence": "information about the music department refers to category = 'Music Department'"}
{"sample_id": 4299, "db_id": "simpson_episodes", "final": {"question": "What are the keywords for episode 426 of the series?", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.number_in_series = 426;", "source_tables": ["episode", "keyword"]}, "evidence": "episode 426 refers to number_in_series = 426"}
{"sample_id": 4300, "db_id": "simpson_episodes", "final": {"question": "What are the titles of the episodes that have received more 7-star votes than the season average?", "sql": "SELECT DISTINCT T1.episode_id FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 7 AND T2.votes > 0.7 * ( SELECT CAST(COUNT(votes) AS REAL) / COUNT(CASE WHEN stars = 7 THEN 1 ELSE 0 END) FROM Vote );", "source_tables": ["episode", "vote"]}, "evidence": "episodes that have received more 7-star votes than the season average refers to votes > DIVIDE(SUM(votes), COUNT(stars = 7))"}
{"sample_id": 4301, "db_id": "simpson_episodes", "final": {"question": "What percentage of votes are from the nominated episodes?", "sql": "SELECT CAST(SUM(CASE WHEN T1.result = 'Nominee' THEN T2.votes ELSE 0 END) AS REAL) * 100 / SUM(T2.votes) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id;", "source_tables": ["episode", "award"]}, "evidence": "nominated episodes refers to result = 'Nominee'; percentage of votes = DIVIDE(SUM(result = 'Nominee), SUM(Votes)) as percentage"}
{"sample_id": 4302, "db_id": "simpson_episodes", "final": {"question": "List down person's name who has nickname.", "sql": "SELECT name FROM Person WHERE nickname IS NOT NULL;", "source_tables": ["person"]}, "evidence": "has nickname refers to nickname is NOT NULL"}
{"sample_id": 4303, "db_id": "simpson_episodes", "final": {"question": "Which country has the tallest person in the crew?", "sql": "SELECT birth_country FROM Person ORDER BY height_meters DESC LIMIT 1;", "source_tables": ["person"]}, "evidence": "country refers to birth_country; tallest person refers to max(height_meters)"}
{"sample_id": 4304, "db_id": "simpson_episodes", "final": {"question": "What is the average height of people from USA?", "sql": "SELECT AVG(height_meters) FROM Person WHERE birth_country = 'USA';", "source_tables": ["person"]}, "evidence": "people from USA refers to birth_country = 'USA'; average height = AVG(height_meters)"}
{"sample_id": 4305, "db_id": "simpson_episodes", "final": {"question": "Calculate the percentage of people who were born after 1970 and from California.", "sql": "SELECT CAST(SUM(CASE WHEN birth_region = 'California' AND SUBSTR(birthdate, 1, 4) > '1970' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(birthdate) FROM Person;", "source_tables": ["person"]}, "evidence": "born after 1970 refers to birthdate > 1970; from California refers to birth_region = 'California'; percentage = divide(count(birthdate > 1970 and birth_region = 'California'), total(birthdate)) * 100%"}
{"sample_id": 4306, "db_id": "simpson_episodes", "final": {"question": "How many people were not born in Connecticut, USA?", "sql": "SELECT COUNT(name) FROM Person WHERE birth_region != 'Connecticut' AND birth_country != 'USA';", "source_tables": ["person"]}, "evidence": "not born in Connecticut, USA refers to birth_region ! = 'Connecticut' and birth_country ! = 'USA'"}
{"sample_id": 4307, "db_id": "simpson_episodes", "final": {"question": "List down the title of episode S20-E1, S20-E2 & S20-E3.", "sql": "SELECT title FROM Episode WHERE episode_id IN ('S20-E1', 'S20-E2', 'S20-E3');", "source_tables": ["episode"]}, "evidence": "episode S20-E1, S20-E2 & S20-E3 refers to episode_id = 'S20-E1' and episode_id = 'S20-E2' and episode_id = 'S20-E3'"}
{"sample_id": 4308, "db_id": "simpson_episodes", "final": {"question": "Write down the website address which stores the episode image of episode 5.", "sql": "SELECT episode_image FROM Episode WHERE episode = 5;", "source_tables": ["episode"]}, "evidence": "website address refers to episode_image"}
{"sample_id": 4309, "db_id": "simpson_episodes", "final": {"question": "State the number of votes for episode with rating of 7 and above.", "sql": "SELECT votes FROM Episode WHERE rating > 7;", "source_tables": ["episode"]}, "evidence": "rating of 7 and above refers to rating > 7.0"}
{"sample_id": 4310, "db_id": "simpson_episodes", "final": {"question": "How many title's crew members are working from Casting Department?", "sql": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.category = 'Casting Department';", "source_tables": ["episode", "credit"]}, "evidence": "working from Casting Department refers to category = 'Casting Department'"}
{"sample_id": 4311, "db_id": "simpson_episodes", "final": {"question": "How many additional timers were born in USA?", "sql": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T2.role = 'additional timer' AND T1.birth_country = 'USA';", "source_tables": ["person", "credit"]}, "evidence": "additional timers refers to role = 'additional timer'; born in USA refers to birth_country = 'USA'"}
{"sample_id": 4312, "db_id": "simpson_episodes", "final": {"question": "How many people who were born after 1970 are animation executive producer?", "sql": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE STRFTIME(T1.birthdate) > '1970' AND T2.role = 'animation executive producer';", "source_tables": ["person", "credit"]}, "evidence": "born after 1980 refers to birthdate > 1970; assistant to the producers refers to role = 'animation executive producer'"}
{"sample_id": 4313, "db_id": "simpson_episodes", "final": {"question": "Write down the summary of episode whereby it has crew members that are not included in the credit list.", "sql": "SELECT T1.summary FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.credited = 'false';", "source_tables": ["episode", "credit"]}, "evidence": "are not included in the credit list refers to credited = ''"}
{"sample_id": 4314, "db_id": "simpson_episodes", "final": {"question": "List down the rating of episodes that were produced by Jason Bikowski.", "sql": "SELECT T1.rating FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.person = 'Jason Bikowski';", "source_tables": ["episode", "credit"]}, "evidence": "produced by Jason Bikowski refers to person = 'Jason Bikowski'"}
{"sample_id": 4315, "db_id": "simpson_episodes", "final": {"question": "What is the average heights of crew members from Animation Department?", "sql": "SELECT AVG(T1.height_meters) FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T2.category = 'Animation Department';", "source_tables": ["person", "credit"]}, "evidence": "from Animation Department refers to category = 'Animation Department';\u00a0AVG(height_meters) where category = 'Animation Department'"}
{"sample_id": 4316, "db_id": "simpson_episodes", "final": {"question": "What is the character that won the award in Primetime Emmy 2009?", "sql": "SELECT DISTINCT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.award_category = 'Primetime Emmy' AND T1.year = 2009 AND T1.result = 'Winner';", "source_tables": ["character_award", "award"]}, "evidence": "won the award in Primetime Emmy 2009 refers to award_category = 'Primetime Emmy' and year = 2009"}
{"sample_id": 4317, "db_id": "simpson_episodes", "final": {"question": "What are the characters that were nominated for Primetime Emmy Award from 2009 to 2010 but did not win?", "sql": "SELECT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.award_category = 'Primetime Emmy' AND T1.year BETWEEN 2009 AND 2010 AND T1.result != 'Winner';", "source_tables": ["character_award", "award"]}, "evidence": "nominated for Primetime Emmy Award but did not win refers to award_category = 'Primetime Emmy' and result = 'Nominee';\u00a0 from 2009 to 2010 refers to year > = '2009' and\u00a0 year < = '2010'"}
{"sample_id": 4318, "db_id": "simpson_episodes", "final": {"question": "Calculate the total votes of episodes that Adam Kuhlman had involved.", "sql": "SELECT SUM(T1.votes) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.person = 'Adam Kuhlman';", "source_tables": ["episode", "credit"]}, "evidence": "Adam Kuhlman had involved refers to person = 'Adam Kuhlman'"}
{"sample_id": 4319, "db_id": "simpson_episodes", "final": {"question": "List down the keyword and crew member's name for episode id S20-E1.", "sql": "SELECT T1.keyword, T2.person FROM Keyword AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.episode_id = 'S20-E1';", "source_tables": ["keyword", "credit"]}, "evidence": ""}
{"sample_id": 4320, "db_id": "simpson_episodes", "final": {"question": "What is the keyword for episodes with stars score of 10 at 30% and above?", "sql": "SELECT T1.keyword FROM Keyword AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10 AND T2.percent > 29;", "source_tables": ["vote", "keyword"]}, "evidence": "stars score of 10 at 30% and above refers to stars = 10 and percent > 29"}
{"sample_id": 4321, "db_id": "simpson_episodes", "final": {"question": "What is the percentage of star score 5 that was collected by title \"Sex, Pies and Idiot Scrapes\"?", "sql": "SELECT CAST(SUM(CASE WHEN T2.stars = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Sex, Pies and Idiot Scrapes';", "source_tables": ["episode", "vote"]}, "evidence": "percentage = DIVIDE(SUM(stars = 5), COUNT(stars)) as percentage"}
{"sample_id": 4322, "db_id": "simpson_episodes", "final": {"question": "Please check is \"limbo dancing\" the keyword for title \"Dangerous Curves\"?", "sql": "SELECT CASE WHEN T2.Keyword = 'limbo dancing' THEN 'Yes' ELSE 'No' END AS result FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Dangerous Curves';", "source_tables": ["episode", "keyword"]}, "evidence": ""}
{"sample_id": 4323, "db_id": "simpson_episodes", "final": {"question": "Which title is the winner of Best International TV Series in 2017?", "sql": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award = 'Best International TV Series' AND SUBSTR(T1.year, 1, 4) = '2017';", "source_tables": ["episode", "award"]}, "evidence": "winner refers to result = 'Winner'; Best International TV Series in 2017 refers to award = 'Best International TV Series' and year = '2017'\n\n"}
{"sample_id": 4324, "db_id": "simpson_episodes", "final": {"question": "Write down all the keywords for winner of \"WGA Award (TV)\" award.", "sql": "SELECT T2.keyword FROM Award AS T1 INNER JOIN Keyword AS T2 ON T2.episode_id = T1.episode_id WHERE T1.award_category = 'WGA Award (TV)';", "source_tables": ["keyword", "award"]}, "evidence": "winner of \"WGA Award (TV)\" award refers to award_category = 'WGA Award (TV)' and result = 'Winner'"}
{"sample_id": 4325, "db_id": "simpson_episodes", "final": {"question": "State the birth place of co-executive producer for nominee of \"Outstanding Animated Program (For Programming Less Than One Hour)\" award.", "sql": "SELECT T1.birth_place FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T2.role = 'co-executive producer';", "source_tables": ["person", "award"]}, "evidence": "co-executive producer refers to role = 'co-executive producer'; nominee of \"Outstanding Animated Program (For Programming Less Than One Hour)\" award refers to award = 'Outstanding Animated Program (For Programming Less Than One Hour)' and result = 'Nominee'"}
{"sample_id": 4489, "db_id": "student_loan", "final": {"question": "List any five female students' names who enlisted for the air force.", "sql": "SELECT T1.name FROM enlist AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name WHERE T2.name IS NULL AND T1.organ = 'air_force' LIMIT 5", "source_tables": ["male", "enlist"]}, "evidence": "female students refers to enlist.name who are NOT in male.name; air force refers to organ = 'air_force';"}
{"sample_id": 4490, "db_id": "student_loan", "final": {"question": "Calculate the number of students who are not disabled.", "sql": "SELECT COUNT(CASE  WHEN T2.name IS NULL THEN T1.name END) AS 'number' FROM person AS T1 LEFT JOIN disabled AS T2 ON T2.name = T1.name", "source_tables": ["disabled", "person"]}, "evidence": "students who are not disabled refers to person.name who are NOT in disabled.name;"}
{"sample_id": 4491, "db_id": "student_loan", "final": {"question": "Define the gender of \"student995\" and his/her enrolled schools.", "sql": "SELECT IIF(T2.name IS NULL, 'female', 'male') AS gen , T1.school FROM enrolled AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name WHERE T1.name = 'student995'", "source_tables": ["enrolled", "male"]}, "evidence": "male.name = 'student995' means student995's gender is male; if 'student995' can not be found in 'male.name', it means student995 is female;"}
{"sample_id": 4492, "db_id": "student_loan", "final": {"question": "Among the students with disabilities, list any five students' names who are unemployed.", "sql": "SELECT T1.name FROM disabled AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name LIMIT 5", "source_tables": ["unemployed", "disabled"]}, "evidence": "students with disabilities who are unemployed refers to disabled.name who are IN unemployed.name;"}
{"sample_id": 4493, "db_id": "student_loan", "final": {"question": "How many unemployed students filed for bankruptcy?", "sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T2.name = T1.name", "source_tables": ["unemployed", "filed_for_bankrupcy"]}, "evidence": "unemployed students who filed for bankruptcy refers to unemployed.name who are IN filed_for_bankrupcy.name;"}
{"sample_id": 4494, "db_id": "student_loan", "final": {"question": "Among the students who have been absent for four months, provide any five students' names and enlisted organizations.", "sql": "SELECT T2.name, T2.organ FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T2.name = T1.name WHERE T1.month = 4 LIMIT 5", "source_tables": ["longest_absense_from_school", "enlist"]}, "evidence": "absent for four months refers to month = 4; enlisted organizations refers to organ;"}
{"sample_id": 4495, "db_id": "student_loan", "final": {"question": "Among the students with payment due, how many of them are unemployed?", "sql": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name WHERE T1.bool = 'pos'", "source_tables": ["unemployed", "no_payment_due"]}, "evidence": "with payment due refers to bool = 'pos';"}
{"sample_id": 4496, "db_id": "student_loan", "final": {"question": "Provide the enlisted organizations of student160 and status of his/her payment due.", "sql": "SELECT T1.organ, T2.bool FROM enlist AS T1 INNER JOIN no_payment_due AS T2 ON T2.name = T1.name WHERE T1.name = 'student160'", "source_tables": ["no_payment_due", "enlist"]}, "evidence": "enlisted organizations refers to organ; student160 is a name of student; status of his or her payment due is mentioned in no_payment_due; bool = 'pos' means the student has payment due; bool = 'neg' means the student has no payment due;"}
{"sample_id": 4497, "db_id": "student_loan", "final": {"question": "List any ten male students who enlisted for foreign legion.", "sql": "SELECT T1.name FROM enlist AS T1 INNER JOIN male AS T2 ON T2.name = T1.name WHERE T1.organ = 'foreign_legion' LIMIT 10", "source_tables": ["male", "enlist"]}, "evidence": "male students are mentioned in male.name; foreign legion refers to organ = 'foreign_legion';"}
{"sample_id": 4498, "db_id": "student_loan", "final": {"question": "Calculate the percentage of female students.", "sql": "SELECT CAST(SUM(IIF(T2.name IS NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.name) FROM person AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name", "source_tables": ["person", "male"]}, "evidence": "percentage = CONCAT(DIVIDE(MULTIPLY(COUNT(person.name which is not in male.name)), 100), COUNT(person.name that is IN male.name),'%'); female students refers to person.name who are NOT in male.name;"}
{"sample_id": 4499, "db_id": "student_loan", "final": {"question": "How many students are filed for bankruptcy?", "sql": "SELECT COUNT(name) FROM filed_for_bankrupcy", "source_tables": ["filed_for_bankrupcy"]}, "evidence": ""}
{"sample_id": 4500, "db_id": "student_loan", "final": {"question": "How many students are enrolled in smc during month 1?", "sql": "SELECT COUNT(name) FROM enrolled WHERE school = 'smc' AND month = 1", "source_tables": ["enrolled"]}, "evidence": "smc refers to school = 'smc';"}
{"sample_id": 4501, "db_id": "student_loan", "final": {"question": "How many students enlist in the air force organization?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'air_force'", "source_tables": ["enlist"]}, "evidence": "organization refers to organ; organ = 'air_force';"}
{"sample_id": 4502, "db_id": "student_loan", "final": {"question": "What is the organization enlisted by student168?", "sql": "SELECT organ FROM enlist WHERE name = 'student168'", "source_tables": ["enlist"]}, "evidence": "organization refers to organ; student168 is a name of student;"}
{"sample_id": 4503, "db_id": "student_loan", "final": {"question": "How many disabled male students joined an organization?", "sql": "SELECT COUNT(T1.name) FROM disabled AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name INNER JOIN enlist AS T3 ON T3.name = T2.name", "source_tables": ["disabled", "male", "enlist"]}, "evidence": "organization refers to organ; disabled male students refers to disabled.name who are IN male.name;"}
{"sample_id": 4504, "db_id": "student_loan", "final": {"question": "Please provide a disability breakdown for each school.", "sql": "SELECT COUNT(T1.name) FROM enrolled AS T1 INNER JOIN disabled AS T2 ON T2.name = T1.name GROUP BY T1.school", "source_tables": ["enrolled", "disabled"]}, "evidence": "disability breakdown refers to the number of disabled students;"}
{"sample_id": 4505, "db_id": "student_loan", "final": {"question": "Please provide a gender breakdown for each organization.", "sql": "SELECT IIF(T2.name IS NULL, 'female', 'male') AS gender FROM enlist AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name GROUP BY T1.organ", "source_tables": ["male", "enlist"]}, "evidence": "gender breakdown refers to the number of male and female; male are mentioned in male.name; female refers to enlist.name who are NOT in male.name; organization refers to organ;"}
{"sample_id": 4506, "db_id": "student_loan", "final": {"question": "List out student names that enrolled in two schools and two organizations?", "sql": "SELECT T.name FROM ( SELECT T1.name, COUNT(T1.organ) AS num FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name GROUP BY T1.name ) T WHERE T.num = 2", "source_tables": ["enrolled", "enlist"]}, "evidence": "enrolled in two schools refers to COUNT(school) = 2; two organizations refers to COUNT(organ) = 2;"}
{"sample_id": 4507, "db_id": "student_loan", "final": {"question": "What is the percentage difference between month 0 absence and month 9 absence?", "sql": "SELECT CAST(((SUM(IIF(month = 0, 1, 0)) - SUM(IIF(month = 9, 1, 0)))) AS REAL) * 100 / SUM(IIF(month = 0, 1, 0)) FROM longest_absense_from_school", "source_tables": ["longest_absense_from_school"]}, "evidence": "percentage difference = CONCAT(DIVIDE(MULTIPLY(SUBTRACT(COUNT(name WHERE month = 0), COUNT(name WHERE month = 9)), 100), COUNT(name WHERE month = 0)),'%');"}
{"sample_id": 4508, "db_id": "student_loan", "final": {"question": "Which school have the highest student enrollment? How many of those students are filed for bankruptcy?", "sql": "SELECT T.school, num FROM ( SELECT T1.school, COUNT(T2.name) AS num FROM enrolled AS T1 LEFT JOIN filed_for_bankrupcy AS T2 ON T2.name = T1.name GROUP BY T1.school ) T ORDER BY T.num DESC LIMIT 1", "source_tables": ["enrolled", "filed_for_bankrupcy"]}, "evidence": "highest student enrollment refers to MAX(COUNT(school));"}
{"sample_id": 4509, "db_id": "student_loan", "final": {"question": "How many students is disabled and unemployed at the same time?", "sql": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name", "source_tables": ["unemployed", "disabled"]}, "evidence": "students who are disabled and unemployed at the same time refers to disabled.name = unemployed.name;"}
{"sample_id": 4510, "db_id": "student_loan", "final": {"question": "List out students that enrolled in occ school and enlisted in a fire department.", "sql": "SELECT T1.name FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T2.name = T1.name WHERE T2.school = 'occ' AND T1.organ = 'fire_department'", "source_tables": ["enrolled", "enlist"]}, "evidence": "occ school refers to school = 'occ'; department refers to organ; organ = 'fire_department';"}
{"sample_id": 4511, "db_id": "student_loan", "final": {"question": "Which male students are unemployed, disable and were absent for 5 month?", "sql": "SELECT T1.name FROM unemployed AS T1 INNER JOIN disabled AS T2 ON T2.name = T1.name INNER JOIN longest_absense_from_school AS T3 ON T3.name = T2.name WHERE T3.month = 5", "source_tables": ["unemployed", "disabled", "longest_absense_from_school"]}, "evidence": "male students are mentioned in male.name; unemployed and disabled refers to unemployed.name = disabled.name; absent for 5 month refers to month = 5;"}
{"sample_id": 4512, "db_id": "student_loan", "final": {"question": "List out female students that enrolled in occ school and ulca?", "sql": "SELECT name FROM enrolled WHERE school IN ('occ', 'ulca') AND name NOT IN ( SELECT name FROM male )", "source_tables": ["enrolled", "male"]}, "evidence": "female students refers to enrolled.name who are NOT in male.name; occ school and ulca refers to school IN('occ', 'ulca');"}
{"sample_id": 4513, "db_id": "student_loan", "final": {"question": "What is the school and organization enrolled by student211?", "sql": "SELECT T2.school, T1.organ FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T2.name = T1.name WHERE T1.name = 'student211'", "source_tables": ["enrolled", "enlist"]}, "evidence": "organization refers to organ; student211 is a name of student;"}
{"sample_id": 4514, "db_id": "student_loan", "final": {"question": "How many male students filed for bankruptcy as compare to female students?", "sql": "SELECT COUNT(T2.name) - SUM(IIF(T2.name IS NULL, 1, 0)) AS num FROM filed_for_bankrupcy AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name", "source_tables": ["filed_for_bankrupcy", "male"]}, "evidence": "difference = SUBTRACT(COUNT(filed_for_bankrupcy.name who are In male.name), COUNT(filed_for_bankrupcy.name who are NOT in male.name)); male students are mentioned in male.name; female students refers to filed_for_bankrupy.name who are NOT in male.name;"}
{"sample_id": 4515, "db_id": "student_loan", "final": {"question": "What is the average absent month for a unemployed male students?", "sql": "SELECT AVG(T2.month) AS avg FROM unemployed AS T1 INNER JOIN longest_absense_from_school AS T2 ON T2.name = T1.name INNER JOIN male AS T3 ON T3.name = T2.name", "source_tables": ["unemployed", "male", "longest_absense_from_school"]}, "evidence": "average = DIVIDE(SUM(month), COUNT(unemployed.name who are in male.name)); unemployed male students refers to unemployed.name who are IN male.name;"}
{"sample_id": 4516, "db_id": "student_loan", "final": {"question": "What is the percentage difference between the attendence of disabled and non-disable students? Do the disable students show better attendance than non-disable students?", "sql": "SELECT CAST((SUM(IIF(T2.name IS NOT NULL AND T1.month = 0, 1, 0)) - SUM(IIF(T2.name IS NULL AND T1.month = 0, 1, 0))) AS REAL) * 100 / COUNT(T1.name), IIF(SUM(IIF(T2.name IS NOT NULL AND T1.month = 0, 1, 0)) - SUM(IIF(T2.name IS NULL AND T1.month = 0, 1, 0)) > 0, 'YES', 'NO') AS isHigh FROM longest_absense_from_school AS T1 LEFT JOIN disabled AS T2 ON T2.name = T1.name", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "difference = MULTIPLY(DIVIDE(SUBTRACT(COUNT(longest_absense_from_school.name that is in disabled.name), COUNT(longest _absense_from_school.name that is NOT in disabled.name), longest _absense_from_school.name), 100)); IF COUNT(longest_absense_from_school.name that is in disabled.name) < COUNT(longest _absense_from_school.name that is NOT in disabled.name), it means, the disabled students have better attendance than non-disabled students; IF COUNT(longest_absense_from_school.name that is in disabled.name) > COUNT(longest _absense_from_school.name that is NOT in disabled.name), it means the disabled students do not have a better attendance than non-disabled students;"}
{"sample_id": 4517, "db_id": "student_loan", "final": {"question": "Calculate the average duration of absense of disabled male students.", "sql": "SELECT AVG(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T2.name = T1.name INNER JOIN male AS T3 ON T3.name = T2.name", "source_tables": ["disabled", "male", "longest_absense_from_school"]}, "evidence": "average duration = DIVIDE(SUM(month), COUNT(month)); duration of absence refers to month; disabled male students refers to disabled.name who are IN male.name;"}
{"sample_id": 4518, "db_id": "student_loan", "final": {"question": "Calculate the ratio of unemployed students who have never been absent from school.", "sql": "SELECT CAST(SUM(IIF(T2.month = 0, 1, 0)) AS REAL) * 100 / COUNT(T1.name) FROM unemployed AS T1 INNER JOIN longest_absense_from_school AS T2 ON T2.name = T1.name", "source_tables": ["unemployed", "longest_absense_from_school"]}, "evidence": "ratio = CONCAT(DIVIDE(MULTIPLY(COUNT(unemployed.name WHERE month = 0), 100), COUNT(month)),'%'); unemployed students who have never been absent from school refers to (unemployed.name WHERE month = 0);"}
{"sample_id": 4519, "db_id": "student_loan", "final": {"question": "State the number of male students who do not have payment due.", "sql": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN male AS T2 ON T2.name = T1.name WHERE T1.bool = 'pos'", "source_tables": ["male", "no_payment_due"]}, "evidence": "do not have payment due refers to bool = 'neg';"}
{"sample_id": 4520, "db_id": "student_loan", "final": {"question": "State the number of students who filed for bankruptcy and have payment due.", "sql": "SELECT COUNT(T1.name) FROM filed_for_bankrupcy AS T1 INNER JOIN no_payment_due AS T2 ON T2.name = T1.name WHERE T2.bool = 'pos'", "source_tables": ["filed_for_bankrupcy", "no_payment_due"]}, "evidence": "have payment due refers to bool = 'pos';"}
{"sample_id": 4521, "db_id": "student_loan", "final": {"question": "What is the status of payment of student 124?", "sql": "SELECT 'bool' FROM no_payment_due WHERE name = 'student124'", "source_tables": ["no_payment_due"]}, "evidence": "status of payment is mentioned in no_payment_due; bool = 'pos' means the student has payment due; bool = 'neg' means the student has no payment due; student124 is a name of student;"}
{"sample_id": 4522, "db_id": "student_loan", "final": {"question": "State the number of disabled students who have payment due.", "sql": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.bool = 'neg'", "source_tables": ["disabled", "no_payment_due"]}, "evidence": "have payment due refers to bool = 'pos';"}
{"sample_id": 4523, "db_id": "student_loan", "final": {"question": "State name of students who have the longest duration of absense from school and do not have payment due.", "sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T2.bool = 'neg' ORDER BY T1.month DESC LIMIT 1", "source_tables": ["longest_absense_from_school", "no_payment_due"]}, "evidence": "longest duration of absence from school refers to MAX(month); do not have payment due refers to bool = 'neg';"}
{"sample_id": 4524, "db_id": "student_loan", "final": {"question": "State name of students who have been absent for 5 months from school and do not have payment due.", "sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T1.month = 5 AND T2.bool = 'neg'", "source_tables": ["longest_absense_from_school", "no_payment_due"]}, "evidence": "absent for 5 months refers to month = 5; do not have payment due refers to bool = 'neg';"}
{"sample_id": 4525, "db_id": "student_loan", "final": {"question": "List out the number of disabled students who enlisted in marines.", "sql": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'marines'", "source_tables": ["disabled", "enlist"]}, "evidence": "marines refers to organ = 'marines';"}
{"sample_id": 4526, "db_id": "student_loan", "final": {"question": "List out the number of students who have the longest duration of absense from school and enlisted in the peace corps.", "sql": "SELECT COUNT(T1.NAME) FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'peace_corps' ORDER BY T1.month DESC LIMIT 1", "source_tables": ["longest_absense_from_school", "enlist"]}, "evidence": "longest duration of absence refers to MAX(month); peace corps refers to organ = 'peace_corps';"}
{"sample_id": 4527, "db_id": "student_loan", "final": {"question": "List out the number of students who filed for bankruptcy and enlisted in navy.", "sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name WHERE T1.organ = 'navy'", "source_tables": ["filed_for_bankrupcy", "enlist"]}, "evidence": "navy refers to organ = 'navy';"}
{"sample_id": 4528, "db_id": "student_loan", "final": {"question": "Give the number of students who enlisted in marines and have payment due.", "sql": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T1.bool = 'pos' AND T2.organ = 'marines'", "source_tables": ["no_payment_due", "enlist"]}, "evidence": "marines refers to organ = 'marines'; have payment due refers to bool = 'pos';"}
{"sample_id": 4601, "db_id": "mental_health_survey", "final": {"question": "What answer did user No. 2681 give to the question \"Do you currently have a mental health disorder?\"?", "sql": "SELECT T1.AnswerText FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext = 'Do you currently have a mental health disorder?' AND T1.UserID = 2681", "source_tables": ["answer", "question"]}, "evidence": "question refers to questiontext; user No. 2681 refers to UserID = 2681\n\n"}
{"sample_id": 4602, "db_id": "mental_health_survey", "final": {"question": "Provide the number of users who took part in the \"mental health survey for 2016\".", "sql": "SELECT COUNT(DISTINCT T1.UserID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2016'", "source_tables": ["answer", "survey"]}, "evidence": "mental health survey for 2016 refers to SurveyID = 2016"}
{"sample_id": 4603, "db_id": "mental_health_survey", "final": {"question": "What was the most common answer for the question \"What country do you work in?\"?", "sql": "SELECT T1.AnswerText FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext = 'What country do you work in?' GROUP BY T1.AnswerText ORDER BY COUNT(T1.AnswerText) DESC LIMIT 1", "source_tables": ["answer", "question"]}, "evidence": "most common answer refers to AnswerText where MAX(COUNT(AnswerText(QuestionID = 3)))"}
{"sample_id": 4604, "db_id": "mental_health_survey", "final": {"question": "How many different answers did the question \"Describe the conversation you had with your previous employer about your mental health, including their reactions and actions taken to address your mental health issue/questions.\" get?", "sql": "SELECT COUNT(DISTINCT T1.AnswerText) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'Describe the conversation you had with your previous employer about your mental health, including their reactions and actions taken to address your mental health issue/questions.'", "source_tables": ["answer", "question"]}, "evidence": ""}
{"sample_id": 4605, "db_id": "mental_health_survey", "final": {"question": "For the question \u201cWhat US state or territory do you work in?\u201d, how many people gave \"Kansas\" as the answer?", "sql": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'What US state or territory do you work in?' AND T1.AnswerText = 'Kansas'", "source_tables": ["answer", "question"]}, "evidence": "question refers to questiontext; AnswerText = 'Kansas'"}
{"sample_id": 4606, "db_id": "mental_health_survey", "final": {"question": "How many people wrote comments for the question \"Any additional notes or comments.\"?", "sql": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'Any additional notes or comments' AND T1.AnswerText IS NOT NULL", "source_tables": ["answer", "question"]}, "evidence": "question refers to questiontext; wrote comments refers to AnswerText(QuestionID = 103) ! = -1"}
{"sample_id": 4607, "db_id": "mental_health_survey", "final": {"question": "For all the users who have been asked \"Have you ever been diagnosed with a mental health disorder?\", how many of them said \"Yes\"?", "sql": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'Have you ever been diagnosed with a mental health disorder?' AND T1.AnswerText = 'Yes'", "source_tables": ["answer", "question"]}, "evidence": "have asked refers to questiontext; said 'Yes' refers to AnswerText = 'Yes'"}
{"sample_id": 4608, "db_id": "mental_health_survey", "final": {"question": "Give the number of users who took the \"mental health survey for 2018\".", "sql": "SELECT COUNT(DISTINCT T1.UserID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2018'", "source_tables": ["answer", "survey"]}, "evidence": "mental health survey for 2018 refers to SurveyID = 2018"}
{"sample_id": 4609, "db_id": "mental_health_survey", "final": {"question": "How many users answered the question \"Overall, how much importance does your employer place on physical health?\"?", "sql": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'Overall, how much importance does your employer place on physical health?'", "source_tables": ["answer", "question"]}, "evidence": "question refers to questiontext"}
{"sample_id": 4610, "db_id": "mental_health_survey", "final": {"question": "For which question did the user No.2183 gave the answer \"Mood Disorder (Depression, Bipolar Disorder, etc)\"?", "sql": "SELECT T1.AnswerText FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 2183 AND T1.AnswerText = 'Mood Disorder (Depression, Bipolar Disorder, etc)'", "source_tables": ["answer", "question"]}, "evidence": "question refers to questiontext; user No.2183 refers to userID = 2183"}
{"sample_id": 4690, "db_id": "disney", "final": {"question": "Provide the title, total gross, and MPAA rating of the movie which has a hero named Elsa.", "sql": "SELECT T1.movie_title, T1.total_gross, T1.MPAA_rating FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title INNER JOIN director AS T3 ON T3.name = T1.movie_title WHERE T2.hero = 'Elsa'", "source_tables": ["director", "movies_total_gross", "characters"]}, "evidence": "Elsa is the main character of the movie which refers to hero = 'Elsa'; title refers to movie_title;"}
{"sample_id": 4691, "db_id": "disney", "final": {"question": "Provide the title, director, and release date of the movie voice-acted by Freddie Jones.", "sql": "SELECT T1.movie, T3.director, T2.release_date FROM 'voice-actors' AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title INNER JOIN director AS T3 ON T3.name = T2.movie_title WHERE T1.'voice-actor' = 'Freddie Jones'", "source_tables": ["voice-actors", "characters", "director"]}, "evidence": "Freddie Jones refers to voice-actor = 'Freddie Jones'; title refers to movie_title;"}
{"sample_id": 4692, "db_id": "disney", "final": {"question": "Among Frank Welker's voice-acted movies, list the movie titles and the total gross when the estimated inflation rate was less than 2.", "sql": "SELECT T1.movie_title, T1.total_gross FROM movies_total_gross AS T1 INNER JOIN 'voice-actors' AS T2 ON T1.movie_title = T2.movie WHERE T2.'voice-actor' = 'Frank Welker' AND CAST(REPLACE(trim(T1.inflation_adjusted_gross, '$'), ',', '') AS REAL) * 1.0 / CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) * 1.0 < 2", "source_tables": ["voice-actors", "movies_total_gross"]}, "evidence": "Frank Welker refers to voice-actor = 'Frank Welker'; estimated inflation rate was less than 2 can be computed as follows DIVIDE(inflation_adjusted_gross, total_gross) as percentage < 2;"}
{"sample_id": 4693, "db_id": "disney", "final": {"question": "Who directed the most popular movie?", "sql": "SELECT T2.director FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name ORDER BY CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1", "source_tables": ["director", "movies_total_gross"]}, "evidence": "The most popular movie refers MAX(total_gross); who directed refers to director;"}
{"sample_id": 4694, "db_id": "disney", "final": {"question": "Describe the voice actors and villains in Cinderella.", "sql": "SELECT T1.'voice-actor', T2.villian FROM 'voice-actors' AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title WHERE T2.movie_title = 'Cinderella'", "source_tables": ["voice-actors", "characters"]}, "evidence": "Cinderella refers to movie_title = ' Cinderella';"}
{"sample_id": 4695, "db_id": "disney", "final": {"question": "Who is the voice actor of the hero in Lion King?", "sql": "SELECT T1.'voice-actor' FROM 'voice-actors' AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title WHERE T2.movie_title = 'Lion King' AND T1.character = 'Lion King'", "source_tables": ["voice-actors", "characters"]}, "evidence": "Lion King refers to movie_title = 'Lion King';"}
{"sample_id": 4696, "db_id": "disney", "final": {"question": "Provide the directors and MPAA ratings of the musical movies released in 1993.", "sql": "SELECT T2.director, T1.MPAA_rating FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.genre = 'Musical' AND SUBSTR(T1.release_date, LENGTH(T1.release_date) - 3, LENGTH(T1.release_date)) = '1993'", "source_tables": ["director", "movies_total_gross"]}, "evidence": "Musical movies refer to genre = 'Musical'; released in 1993 refers to substr(release_date, length(release_date) - 3, length(release_date)) = '1993';"}
{"sample_id": 4697, "db_id": "disney", "final": {"question": "Among the movies released from 1991 to 2000, calculate the percentage of comedy movies. Provide any five movie titles and directors.", "sql": "SELECT CAST(COUNT(CASE WHEN T1.genre = 'Comedy' THEN T1.movie_title ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_title), group_concat(T1.movie_title), group_concat(T2.director) FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE SUBSTR(T1.release_date, LENGTH(T1.release_date) - 3, LENGTH(T1.release_date)) BETWEEN '1991' AND '2000'", "source_tables": ["director", "movies_total_gross"]}, "evidence": "DIVIDE(COUNT(movie_title where genre = 'Comedy'), COUNT(movie_title)) as percentage where substr(release_date, length(release_date) - 3, length(release_date)) between '1991' and '2000';"}
{"sample_id": 4698, "db_id": "disney", "final": {"question": "Among the movies released from 2001 to 2005, list down the titles and directors of the movies which had a total gross of more than 100% above the average.", "sql": "SELECT T2.name, T2.director FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE SUBSTR(T1.release_date, LENGTH(T1.release_date) - 3, LENGTH(T1.release_date)) BETWEEN '2001' AND '2005' AND CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) / ( SELECT SUM(CAST(REPLACE(trim(T3.total_gross, '$'), ',', '') AS REAL)) / COUNT(T3.movie_title) AS avg_gross FROM movies_total_gross AS T3 INNER JOIN director AS T4 ON T3.movie_title = T4.name WHERE SUBSTR(T3.release_date, LENGTH(T3.release_date) - 3, LENGTH(T3.release_date)) BETWEEN '2001' AND '2005' ) - 1 > 1", "source_tables": ["director", "movies_total_gross"]}, "evidence": "Released from 2001 to 2005 refers to substr(release_date, length(release_date) - 3, length(release_date)) between '2001' and '2005'; DIVIDE(SUM(total_gross), COUNT(movie_title));"}
{"sample_id": 4699, "db_id": "disney", "final": {"question": "Name the voice actor of the character Calliope in the movie Hercules.", "sql": "SELECT 'voice-actor' FROM 'voice-actors' WHERE movie = 'Hercules' AND character = 'Calliope'", "source_tables": ["voice-actors"]}, "evidence": "Hercules refers to movie = 'Hercules';"}
{"sample_id": 4700, "db_id": "disney", "final": {"question": "How many voice actors for the movie Aladdin?", "sql": "SELECT COUNT('voice-actor') FROM 'voice-actors' WHERE movie = 'Aladdin'", "source_tables": ["voice-actors"]}, "evidence": "Aladdin is the name of the movie which refers to movie = 'Aladdin';"}
{"sample_id": 4701, "db_id": "disney", "final": {"question": "List the movie titles with the voice actor Jeff Bennet", "sql": "SELECT movie FROM 'voice-actors' WHERE 'voice-actor' = 'Jeff Bennett'", "source_tables": ["voice-actors"]}, "evidence": "Jeff Bennett refers to voice-actor = 'Jeff Bennett';"}
{"sample_id": 4702, "db_id": "disney", "final": {"question": "Provide the director's name of Wreck-It Ralph movie.", "sql": "SELECT director FROM director WHERE name = 'Wreck-It Ralph'", "source_tables": ["director"]}, "evidence": "Wreck-It Ralph is the name of the movies which refers to name = 'Wreck-It Ralph';"}
{"sample_id": 4703, "db_id": "disney", "final": {"question": "What movies did director Jack Kinney direct?", "sql": "SELECT name FROM director WHERE director = 'Jack Kinney'", "source_tables": ["director"]}, "evidence": "FALSE;"}
{"sample_id": 4704, "db_id": "disney", "final": {"question": "How many movies were released between 1937 and 1950?", "sql": "SELECT COUNT(movie_title) FROM characters WHERE SUBSTR(release_date, LENGTH(release_date) - 1, LENGTH(release_date)) BETWEEN '37' AND '50'", "source_tables": ["characters"]}, "evidence": "released between 1937 and 1950 refers to substr(release_date, length(release_date) - 1,length(release_date)) between '37' and '50';"}
{"sample_id": 4705, "db_id": "disney", "final": {"question": "Provide the name of the song from the movie directed by Ben Sharpsteen.", "sql": "SELECT T1.song FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Ben Sharpsteen'", "source_tables": ["director", "characters"]}, "evidence": "Ben Sharpsteen refers to director = 'Ben Sharpsteen';"}
{"sample_id": 4706, "db_id": "disney", "final": {"question": "Indicate the release date of the film The Lion King directed by Roger Allers.", "sql": "SELECT T1.release_date FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Roger Allers' AND T1.movie_title = 'The Lion King'", "source_tables": ["director", "characters"]}, "evidence": "The Lion King refers to movie_title = 'The Lion King'; Roger Allers refers to director = 'Roger Allers';"}
{"sample_id": 4707, "db_id": "disney", "final": {"question": "Name the villain of the movie with Scott Weinger and Brad Kane as voice actors.", "sql": "SELECT T1.villian FROM characters AS T1 INNER JOIN 'voice-actors' AS T2 ON T1.movie_title = T2.movie WHERE T2.'voice-actor' = 'Scott Weinger Brad Kane'", "source_tables": ["voice-actors", "characters"]}, "evidence": "FALSE;"}
{"sample_id": 4708, "db_id": "disney", "final": {"question": "Which movies of director Wolfgang Reitherman do not have villain?", "sql": "SELECT T1.movie_title FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Wolfgang Reitherman' AND T1.villian IS NULL", "source_tables": ["director", "characters"]}, "evidence": "which movies do not have villain refer to movie_title where villian is null;"}
{"sample_id": 4709, "db_id": "disney", "final": {"question": "List the titles of movies directed by Jack Kinney that were released before 1947.", "sql": "SELECT T1.movie_title FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Jack Kinney' AND SUBSTR(T1.release_date, LENGTH(T1.release_date) - 1, LENGTH(T1.release_date)) < '47'", "source_tables": ["director", "characters"]}, "evidence": "Jack Kinney refers to director = 'Jack Kinney'; released before 1947 refers to substr(release_date, length(release_date) - 1, length(release_date)) < '47';"}
{"sample_id": 4710, "db_id": "disney", "final": {"question": "List the names of the directors whose films grossed over $100 million.", "sql": "SELECT DISTINCT T2.director FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name INNER JOIN movies_total_gross AS T3 ON T1.movie_title = T3.movie_title WHERE CAST(REPLACE(trim(T3.total_gross, '$'), ',', '') AS REAL) > 100000000", "source_tables": ["director", "characters", "movies_total_gross"]}, "evidence": "films grossed over $100 million refer to movie_title where total_gross > 100000000;"}
{"sample_id": 4711, "db_id": "disney", "final": {"question": "Which movie's song title has the highest total gross?", "sql": "SELECT T2.song FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title ORDER BY CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "The highest total gross refers to MAX(total_gross);"}
{"sample_id": 4712, "db_id": "disney", "final": {"question": "Which director had the most popular film from 1937 to 1990?", "sql": "SELECT T2.director FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name INNER JOIN movies_total_gross AS T3 ON T3.movie_title = T1.movie_title WHERE SUBSTR(T3.release_date, LENGTH(T3.release_date) - 3, LENGTH(T3.release_date)) BETWEEN '1937' AND '1990' ORDER BY CAST(REPLACE(trim(T3.total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1", "source_tables": ["director", "characters", "movies_total_gross"]}, "evidence": "from 1937 to 1990 refers to substr(release_date, length(release_date) - 3, length(release_date)) between '1937' and '1990'; the most popular film refers to movie_title where MAX(total_gross);"}
{"sample_id": 4842, "db_id": "legislator", "final": {"question": "Provide the type and end date of the term of the legislator named John Vining.", "sql": "SELECT T2.type, T2.end FROM historical AS T1 INNER JOIN 'historical-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'John' AND T1.last_name = 'Vining'", "source_tables": ["historical-terms", "historical"]}, "evidence": "end date of the term refers to end;"}
{"sample_id": 4843, "db_id": "legislator", "final": {"question": "Find the difference between the number of female senators and representatives born between 1930 to 1970.", "sql": "SELECT SUM(CASE WHEN T2.type = 'sen' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.type = 'rep' THEN 1 ELSE 0 END) FROM historical AS T1 INNER JOIN 'historical-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' AND strftime('%Y', T1.birthday_bio) BETWEEN '1930' AND '1970'", "source_tables": ["historical-terms", "historical"]}, "evidence": "difference = SUBTRACT(SUM(type = 'sen' WHERE gender_bio = 'F' AND strftime('%Y', birthday_bio) between '1930' and '1970'), SUM(type = 'rep' WHERE gender_bio = 'F' AND strftime('%Y', birthday_bio) between '1930' and '1970')); female refers to gender_bio = 'F'; senators refers to type = 'sen'; representatives refers to type = 'rep'; born between 1930 to 1970 strftime('%Y', birthday_bio) between '1930' and '1970';"}
{"sample_id": 4844, "db_id": "legislator", "final": {"question": "Among the male legislators born between 1955 to 1965, what is the percentage of the legislators with an independent party?", "sql": "SELECT CAST(SUM(CASE WHEN T2.party = 'Independent' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.party) FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'M' AND strftime('%Y', T1.birthday_bio) BETWEEN '1955' AND '1965'", "source_tables": ["current-terms", "current"]}, "evidence": "male refers to gender_bio = 'M'; born between 1955 to 1965 refers to strftime('%Y', birthday_bio) between '1955' and '1965'; percentage = MULTIPLY(DIVIDE(SUM(party = 'Independent' WHERE gender_bio = 'M' AND strftime('%Y', birthday_bio) between '1955' and '1965'), COUNT(party WHERE gender_bio = 'M' AND strftime('%Y', birthday_bio) between '1955' and '1965')), 100.0);"}
{"sample_id": 4845, "db_id": "legislator", "final": {"question": "What is the name of the legislator with the ID of W000059?", "sql": "SELECT first_name, last_name FROM historical WHERE bioguide_id = 'W000059'", "source_tables": ["historical"]}, "evidence": "name of the legislator = first_name, last_name; ID of W000059 refers to bioguide_id = 'W000059';"}
{"sample_id": 4846, "db_id": "legislator", "final": {"question": "Does Thomas Carnes have an account on ballotpedia.org?", "sql": "SELECT CASE WHEN ballotpedia_id IS NULL THEN 'doesn''t have' ELSE 'have' END AS HaveorNot FROM historical WHERE first_name = 'Thomas' AND last_name = 'Carnes'", "source_tables": ["historical"]}, "evidence": "if first_name = 'Thomas' and last_name = 'Carnes' AND ballotpedia_id is null then Thomas Carnes doesn't have an account on ballotpedia.org; if first_name = 'Thomas' and last_name = 'Carnes' AND ballotpedia_id is NOT null then Thomas Carnes have an account on ballotpedia.org;"}
{"sample_id": 4847, "db_id": "legislator", "final": {"question": "How many legislators were born in 1736?", "sql": "SELECT COUNT(bioguide_id) FROM historical WHERE birthday_bio LIKE '1736%'", "source_tables": ["historical"]}, "evidence": "born in 1736 refers to birthday_bio like '1736%';"}
{"sample_id": 4848, "db_id": "legislator", "final": {"question": "Which legislators are woman?", "sql": "SELECT first_name, last_name FROM historical WHERE gender_bio = 'F'", "source_tables": ["historical"]}, "evidence": "woman refers to gender_bio = 'F';"}
{"sample_id": 4849, "db_id": "legislator", "final": {"question": "How many districts are in Idaho?", "sql": "SELECT COUNT(district) FROM 'current-terms' WHERE state = 'ID'", "source_tables": ["current-terms"]}, "evidence": "Idaho refers to state = 'ID';"}
{"sample_id": 4850, "db_id": "legislator", "final": {"question": "How many legislators are not senator?", "sql": "SELECT COUNT(bioguide) FROM 'current-terms' WHERE class IS NULL", "source_tables": ["current-terms"]}, "evidence": "not senator refers to class is null;"}
{"sample_id": 4851, "db_id": "legislator", "final": {"question": "What is the ratio between male and female legislators?", "sql": "SELECT CAST(SUM(CASE WHEN gender_bio = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender_bio = 'F' THEN 1 ELSE 0 END) FROM historical", "source_tables": ["historical"]}, "evidence": "ratio = DIVIDE(SUM(gender_bio = 'M'),\u00a0 SUM(gender_bio = 'F')); male refers to gender_bio = 'M'; female refers to gender_bio = 'F'"}
{"sample_id": 4852, "db_id": "legislator", "final": {"question": "Calculate the percentage of famous_legislatorss.", "sql": "SELECT CAST(SUM(CASE WHEN wikipedia_id IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(bioguide_id) FROM historical", "source_tables": ["historical"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(wikipedia_id is not null), (bioguide_id)), 100.0); famous legislators refers to wikipedia_id is not null;"}
{"sample_id": 4853, "db_id": "legislator", "final": {"question": "Which legislators do not have instagram account?", "sql": "SELECT T1.first_name, T1.last_name FROM current AS T1 INNER JOIN 'social-media' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.instagram IS NULL", "source_tables": ["current", "social-media"]}, "evidence": "do not have instagram account refers to instagram is null;"}
{"sample_id": 4854, "db_id": "legislator", "final": {"question": "List all the representatives in 1789 along with the districts and state.", "sql": "SELECT T2.district, T2.state FROM historical AS T1 INNER JOIN 'historical-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.start LIKE '1789%'", "source_tables": ["historical-terms", "historical"]}, "evidence": "representatives refers to type = 'rep'; in 1789 refers to start like '1789%';"}
{"sample_id": 4855, "db_id": "legislator", "final": {"question": "State all the district that Benjamin Contee has served before.", "sql": "SELECT T2.district FROM historical AS T1 INNER JOIN 'historical-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Benjamin' AND T1.last_name = 'Contee'", "source_tables": ["historical-terms", "historical"]}, "evidence": ""}
{"sample_id": 4856, "db_id": "legislator", "final": {"question": "State the address of Amy Klobuchar at the term of 4th of January 2001.", "sql": "SELECT T2.address FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Amy' AND T1.last_name = 'Klobuchar' AND T2.start = '2001-04-01'", "source_tables": ["current-terms", "current"]}, "evidence": "at the term of 4th of January 2001 refers to start = '2001-04-01';"}
{"sample_id": 4857, "db_id": "legislator", "final": {"question": "List all the junior senators in 1997.", "sql": "SELECT T1.first_name, T1.last_name FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.start LIKE '1997%' AND T2.state_rank = 'junior'", "source_tables": ["current-terms", "current"]}, "evidence": "junior senators refers to state_rank = 'junior'; in 1997 refers to start like '1997%';"}
{"sample_id": 4858, "db_id": "legislator", "final": {"question": "How many female legislators become representatives for California in 2015?", "sql": "SELECT COUNT(*) FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE STRFTIME('%Y', T2.start) = '2015' AND T2.state = 'CA' AND T1.gender_bio = 'F'", "source_tables": ["current-terms", "current"]}, "evidence": "female legislators refers to gender_bio = 'F'; representatives refers to type = 'rep'; for California refers to state = 'CA'; in 2015 refers to the year of start date is '2015';"}
{"sample_id": 4859, "db_id": "legislator", "final": {"question": "What is the Twitter ID of Emanuel Cleaver?", "sql": "SELECT T1.twitter_id FROM 'social-media' AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.first_name = 'Emanuel' AND T2.last_name = 'Cleaver'", "source_tables": ["current", "social-media"]}, "evidence": ""}
{"sample_id": 4860, "db_id": "legislator", "final": {"question": "State all the Facebook ID for current legislators under the democrat party.", "sql": "SELECT T2.facebook_id FROM 'current-terms' AS T1 INNER JOIN 'social-media' AS T2 ON T1.bioguide = T2.bioguide WHERE T1.party = 'Democrat' GROUP BY T2.facebook_id", "source_tables": ["current-terms", "social-media"]}, "evidence": ""}
{"sample_id": 4861, "db_id": "legislator", "final": {"question": "Which historical female legislator that have their term ended on the 3rd of March 1791?", "sql": "SELECT T1.first_name, T1.last_name FROM historical AS T1 INNER JOIN 'historical-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.end = '1791-03-03' AND T1.gender_bio = 'F'", "source_tables": ["historical-terms", "historical"]}, "evidence": "female legislator refers to gender_bio = 'F'; term ended on the 3rd of March 1791 refers to end = '1791-03-03';"}
{"sample_id": 4862, "db_id": "legislator", "final": {"question": "List all the Jewish current legislators that had served in Florida.", "sql": "SELECT T1.first_name, T1.last_name FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.religion_bio = 'Jewish' AND T2.state = 'FL' GROUP BY T1.first_name, T1.last_name", "source_tables": ["current-terms", "current"]}, "evidence": "Jewish refers to religion_bio = 'Jewish'; in Florida refers to state = 'FL';"}
{"sample_id": 4863, "db_id": "legislator", "final": {"question": "What is the ratio between famous current legislators and famous historical legislators?", "sql": "SELECT CAST(COUNT(CASE WHEN wikipedia_id IS NOT NULL THEN bioguide_id ELSE 0 END) AS REAL) * 100 / ( SELECT COUNT(CASE WHEN wikipedia_id IS NOT NULL THEN bioguide_id ELSE 0 END) FROM historical ) FROM current", "source_tables": ["current", "historical"]}, "evidence": "ratio = DIVIDE(COUNT(current.bioguide_id WHERE current.wikipedia_id is not null), COUNT(historical.bioguide_id WHERE historical.wikipedia_id is not null)); famous current legislators refers to current.wikipedia_id is not null; famous historical legislators refers to historical.wikipedia_id is not null;"}
{"sample_id": 4864, "db_id": "legislator", "final": {"question": "Based on the number of current legislators, calculate the percentage of legislators that served in 21st-Century.", "sql": "SELECT CAST(SUM(CASE WHEN strftime('%Y', T2.start) BETWEEN '2000' AND '2017' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bioguide_id) FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide", "source_tables": ["current-terms", "current"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(strftime('%Y', start) between '2000' and '2017'), COUNT(bioguide_id)), 100.0); 1st-Century refers to strftime('%Y', T2.start) between '2000' and '2017';"}
{"sample_id": 4865, "db_id": "legislator", "final": {"question": "How many Catholic legislators do not have an account on ballotpedia.org?", "sql": "SELECT COUNT(bioguide_id) FROM historical WHERE religion_bio = 'Catholic' AND ballotpedia_id IS NULL", "source_tables": ["historical"]}, "evidence": "Catholic refers to religion_bio = 'Catholic'; do not have an account on ballotpedia.org refers to ballotpedia_id is null;"}
{"sample_id": 4866, "db_id": "legislator", "final": {"question": "How many class 1 senators belong to the Republican party?", "sql": "SELECT COUNT(bioguide) FROM 'current-terms' WHERE class = 1 AND party = 'Republican'", "source_tables": ["current-terms"]}, "evidence": "senators refers to type = 'sen';"}
{"sample_id": 4867, "db_id": "legislator", "final": {"question": "What are the full names of the non-google female entity legislators that have not been registered in Federal Election Commission data?", "sql": "SELECT first_name, last_name FROM historical WHERE gender_bio = 'F' AND google_entity_id_id IS NULL AND fec_id IS NULL", "source_tables": ["historical"]}, "evidence": "full names = first_name, last_name; non-google entity refers to google_entity_id_id is null; female refers to gender_bio = 'F'; have not been registered in Federal Election Commission data refers to fec_id is null;"}
{"sample_id": 4868, "db_id": "legislator", "final": {"question": "In California, how many representatives ended their term in 1995?", "sql": "SELECT COUNT(*) FROM 'current-terms' WHERE state = 'CA' AND type = 'rep' AND end LIKE '1995%'", "source_tables": ["current-terms"]}, "evidence": "California refers to state = 'CA'; representatives refers to type = 'rep'; ended the term in 1995 refers to end like '1995%';"}
{"sample_id": 4869, "db_id": "legislator", "final": {"question": "What is the full name of the oldest legislator?", "sql": "SELECT first_name, last_name FROM historical ORDER BY birthday_bio LIMIT 1", "source_tables": ["historical"]}, "evidence": "full name = first_name, last_name; oldest legislator refers to MIN(birthday_bio);"}
{"sample_id": 4870, "db_id": "legislator", "final": {"question": "List all of the ids of the representatives belonging to the Democrat party in district 13 that ended their term on 1/3/2019?", "sql": "SELECT bioguide FROM 'current-terms' WHERE type = 'rep' AND party = 'Democrat' AND end = '2019-01-03' AND district = 13", "source_tables": ["current-terms"]}, "evidence": "ids refers to bioguide; representatives refers to type = 'rep'; ended the term on 1/3/2019 refers to end = '2019-01-03';"}
{"sample_id": 4871, "db_id": "legislator", "final": {"question": "What is the official Twitter handle of Jason Lewis?", "sql": "SELECT T2.twitter FROM current AS T1 INNER JOIN 'social-media' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Jason Lewis'", "source_tables": ["current", "social-media"]}, "evidence": "official Twitter handle refers to twitter;"}
{"sample_id": 4872, "db_id": "legislator", "final": {"question": "Among the Independent senators that started their term in 2011 and onwards, what are the official full names of the senators that caucused with the Democrat?", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Independent' AND strftime('%Y', T2.start) >= '2011' AND T2.type = 'sen' AND T2.caucus = 'Democrat'", "source_tables": ["current-terms", "current"]}, "evidence": "Independent refers to party = 'Independent'; senators refers to type = 'sen'; started the term in 2011 and onwards refers to strftime('%Y', start) > = '2011'; caucused with the Democrat refers to caucus = 'Democrat';"}
{"sample_id": 4873, "db_id": "legislator", "final": {"question": "How many Jewish legislators do not have facebook?", "sql": "SELECT COUNT(T3.bioguide_id) FROM ( SELECT T1.bioguide_id FROM current AS T1 INNER JOIN 'social-media' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.facebook IS NULL GROUP BY T1.bioguide_id ) T3", "source_tables": ["current", "social-media"]}, "evidence": "Jewish legislators refers to religion_bio = 'Jewish'; do not have facebook refers to facebook is null;"}
{"sample_id": 4874, "db_id": "legislator", "final": {"question": "Which party has the highest number of legislators who are Baptist?", "sql": "SELECT T2.party FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.religion_bio = 'Baptist' GROUP BY T2.party ORDER BY COUNT(T2.party) DESC LIMIT 1", "source_tables": ["current-terms", "current"]}, "evidence": "party that has the highest number of legislators refers to MAX(COUNT(party)); Baptist refers to religion_bio = 'Baptist';"}
{"sample_id": 4875, "db_id": "legislator", "final": {"question": "List the official full names of all the legislators who have facebook, instagram, twitter and youtube accounts.", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN 'social-media' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.facebook IS NOT NULL AND T2.instagram IS NOT NULL AND T2.twitter IS NOT NULL AND T2.youtube IS NOT NULL", "source_tables": ["current", "social-media"]}, "evidence": "have facebook, instagram, twitter and youtube accounts refers to 'facebook' is not null AND 'instagram' is not null AND 'twitter' is not null AND 'youtube' is not null;"}
{"sample_id": 4876, "db_id": "legislator", "final": {"question": "How many districts did John Conyers, Jr. serve in total?", "sql": "SELECT COUNT(T3.district) FROM ( SELECT T2.district FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'John Conyers, Jr.' GROUP BY T2.district ) T3", "source_tables": ["current-terms", "current"]}, "evidence": ""}
{"sample_id": 5014, "db_id": "olympics", "final": {"question": "Give the height of the tallest athlete from Portugal.", "sql": "SELECT T3.height FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Portugal' ORDER BY T3.height DESC LIMIT 1", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": "the tallest athlete refers to id where MAX(height); from Portugal refers to region_name = 'Portugal';"}
{"sample_id": 5015, "db_id": "olympics", "final": {"question": "Tell the host city of the 1968 Winter Olympic Games.", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1968 Winter'", "source_tables": ["city", "games", "games_city"]}, "evidence": "host city refers to city_name; the 1968 Winter Olympic Games refer to games_name = '1968 Winter';"}
{"sample_id": 5016, "db_id": "olympics", "final": {"question": "Which region has the most athletes?", "sql": "SELECT T2.region_name FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id GROUP BY T2.region_name ORDER BY COUNT(T1.person_id) DESC LIMIT 1", "source_tables": ["person_region", "noc_region"]}, "evidence": "region refers to region_name; the most athletes refer to MAX(COUNT(region_name));"}
{"sample_id": 5017, "db_id": "olympics", "final": {"question": "What is the percentage of athletes from Vanuatu who are taller than 175?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.height > 175 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Vanuatu'", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": "DIVIDE(COUNT(id where height > 175), COUNT(id)) as percentage where region_name = 'Vanuatu';"}
{"sample_id": 5018, "db_id": "olympics", "final": {"question": "Calculate the average weight of male athletes from Tonga.", "sql": "SELECT AVG(T3.weight) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Tonga' AND T3.gender = 'M'", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": "AVG(weight) where region_name = 'Tonga' and gender = 'M';"}
{"sample_id": 5019, "db_id": "olympics", "final": {"question": "Where was the 1920 Summer held?", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1920 Summer'", "source_tables": ["city", "games", "games_city"]}, "evidence": "where it was held refers to city_name; the 1920 Summer refers to games_name = '1920 Summer';"}
{"sample_id": 5020, "db_id": "olympics", "final": {"question": "From 1900 to 1992, how many games did London host?", "sql": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London' AND T3.games_year BETWEEN 1900 AND 1992", "source_tables": ["city", "games", "games_city"]}, "evidence": "From 1900 to 1992 refers to games_year BETWEEN 1900 AND 1992; London refers to city_name = 'London'; games refer to games_name;"}
{"sample_id": 5021, "db_id": "olympics", "final": {"question": "How many Summer games are there that were held in Paris?", "sql": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Paris' AND T3.season = 'Summer'", "source_tables": ["city", "games", "games_city"]}, "evidence": "Summer games refer to games_id where season = 'Summer'; Paris refers to city_name = 'Paris';"}
{"sample_id": 5022, "db_id": "olympics", "final": {"question": "Please list all game names that were held in Los Angeles.", "sql": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Los Angeles'", "source_tables": ["city", "games", "games_city"]}, "evidence": "Los Angeles refers to city_name = 'Los Angeles';"}
{"sample_id": 5023, "db_id": "olympics", "final": {"question": "Which city hosted the most games?", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id GROUP BY T2.city_name ORDER BY COUNT(T2.city_name) DESC LIMIT 1", "source_tables": ["city", "games_city"]}, "evidence": "Which city refers to city_name; the most games refer to MAX(COUNT(city_name));"}
{"sample_id": 5024, "db_id": "olympics", "final": {"question": "What is the game name that was held in Beijing in 2008?", "sql": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Beijing' AND T3.games_year = 2008", "source_tables": ["city", "games", "games_city"]}, "evidence": "Beijing refers to city_name = 'Beijing'; in 2008 refers to games_year = '2008';"}
{"sample_id": 5025, "db_id": "olympics", "final": {"question": "What is the percentage of champions at the age of over 30?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.age > 30 THEN 1 END) AS REAL) * 100 / COUNT(T2.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id WHERE T1.medal_id = 1", "source_tables": ["games_competitor", "competitor_event"]}, "evidence": "DIVIDE(COUNT(competitor_id where age > 30), COUNT(competitor_id))as percentage where medal_id = 1;"}
{"sample_id": 5026, "db_id": "olympics", "final": {"question": "At which age did A Lamusi participate in 2012 Summer?", "sql": "SELECT T2.age FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2012 Summer' AND T3.full_name = 'A Lamusi'", "source_tables": ["games_competitor", "games", "person"]}, "evidence": "2012 Summer refers to games_name = '2012 Summer';"}
{"sample_id": 5027, "db_id": "olympics", "final": {"question": "How many competitors were there who participated in 2000 Summer with age 31?", "sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '2000 Summer' AND T2.age = 31", "source_tables": ["games_competitor", "games"]}, "evidence": "in 2000 Summer refers to games_name = '2000 Summer'; age = 31"}
{"sample_id": 5028, "db_id": "olympics", "final": {"question": "How many male competitors were there who participated in 1948 Summer?", "sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1948 Summer' AND T3.gender = 'M'", "source_tables": ["games_competitor", "games", "person"]}, "evidence": "male competitors refers to id where gender = 'M'; in 1948 Summer refers to games_name = '1948 Summer';"}
{"sample_id": 5029, "db_id": "olympics", "final": {"question": "Please list all competitors' names who participated in 1936 Summer.", "sql": "SELECT T3.full_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1936 Summer'", "source_tables": ["games_competitor", "games", "person"]}, "evidence": "competitors' names refer to full_name; in 1936 Summer refers to games_name = '1936 Summer';"}
{"sample_id": 5030, "db_id": "olympics", "final": {"question": "Who is the youngest competitor that participated in 2014 Winter?", "sql": "SELECT T3.full_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2014 Winter' ORDER BY T2.age LIMIT 1", "source_tables": ["games_competitor", "games", "person"]}, "evidence": "the youngest competitor refers to full_name where MIN(age); in 2014 Winter refers to games_name = '2014 Winter';"}
{"sample_id": 5031, "db_id": "olympics", "final": {"question": "What is the average age of competitors who participated in 1988 Winter?", "sql": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1988 Winter'", "source_tables": ["games_competitor", "games", "person"]}, "evidence": "AVG(age) where games_name = '1988 Winter';"}
{"sample_id": 5032, "db_id": "olympics", "final": {"question": "What is the percentage of female competitors whose heights are over 170 that participated in the game in 1988?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'F' AND T3.height > 170 THEN 1 END) AS REAL) * 100 / COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_year = 1988", "source_tables": ["games_competitor", "games", "person"]}, "evidence": "DIVIDE(COUNT(person_id where gender = 'F' and height > 170), COUNT(person_id)) as percentage where games_year = 1988;"}
{"sample_id": 5033, "db_id": "olympics", "final": {"question": "What is the sport name of \"Cross Country Skiing Men's 10/15 kilometres Pursuit\" event?", "sql": "SELECT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T2.event_name LIKE 'Cross Country Skiing Men%s 10/15 kilometres Pursuit'", "source_tables": ["event", "sport"]}, "evidence": "\"Cross Country Skiing Men's 10/15 kilometres Pursuit\" refers to event_name = 'Cross Country Skiing Men''s 10/15 kilometres Pursuit';"}
{"sample_id": 5034, "db_id": "olympics", "final": {"question": "What is the percentage of people whose age greater than 24 and participate in winter season?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.age > 24 AND T1.season = 'Winter' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.games_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id", "source_tables": ["games_competitor", "games"]}, "evidence": "DIVIDE(COUNT(season = 'Winter' and age > 24), COUNT(person_id)) as percentage;"}
{"sample_id": 5035, "db_id": "olympics", "final": {"question": "What is the region id of Christine Jacoba Aaftink?", "sql": "SELECT T1.region_id FROM person_region AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.id WHERE T2.full_name = 'Christine Jacoba Aaftink'", "source_tables": ["person_region", "person"]}, "evidence": ""}
{"sample_id": 5036, "db_id": "olympics", "final": {"question": "Mention the height of people who belong to region id 7.", "sql": "SELECT T2.height FROM person_region AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.id WHERE T1.region_id = 7", "source_tables": ["person_region", "person"]}, "evidence": ""}
{"sample_id": 5037, "db_id": "olympics", "final": {"question": "State the name of the city that held game id 3.", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T1.games_id = 3", "source_tables": ["city", "games_city"]}, "evidence": "name of city refers to city_name"}
{"sample_id": 5038, "db_id": "olympics", "final": {"question": "What are the id of the games held in London?", "sql": "SELECT T1.games_id FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'London'", "source_tables": ["city", "games_city"]}, "evidence": "London refers to city_name = 'London';"}
{"sample_id": 5039, "db_id": "olympics", "final": {"question": "How many people who are below 30 and participated in the summer season?", "sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.season = 'Summer' AND T2.age < 30", "source_tables": ["games_competitor", "games"]}, "evidence": "people who are below 30 refer to person_id where age < 30; the summer season refers to season = 'Summer';"}
{"sample_id": 5040, "db_id": "olympics", "final": {"question": "List out the name of the game that the people participated in games id 13.", "sql": "SELECT DISTINCT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T2.games_id = 13", "source_tables": ["games_competitor", "games"]}, "evidence": "name of games refers to games_name;"}
{"sample_id": 5041, "db_id": "olympics", "final": {"question": "What is the average age of the people who participated in the winter season?", "sql": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.season = 'Winter'", "source_tables": ["games_competitor", "games"]}, "evidence": "AVG(age) where season = 'Winter';"}
{"sample_id": 5042, "db_id": "olympics", "final": {"question": "What is the percentage of the people who are under 35 and participated in the summer season?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.age < 35 THEN 1 END) AS REAL) * 100 / COUNT(T2.games_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.season = 'Summer'", "source_tables": ["games_competitor", "games"]}, "evidence": "DIVIDE(COUNT(age < 35) / COUNT(person_id)) as percentage where season = 'Summer';"}
{"sample_id": 5043, "db_id": "olympics", "final": {"question": "State the event name of Basketball.", "sql": "SELECT T2.event_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Basketball'", "source_tables": ["event", "sport"]}, "evidence": "basketball refers to sport_name = 'Basketball';"}
{"sample_id": 5044, "db_id": "olympics", "final": {"question": "What is the name of medal that competitor id 9 obtained?", "sql": "SELECT DISTINCT T1.medal_name FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id WHERE T2.competitor_id = 9", "source_tables": ["medal", "competitor_event"]}, "evidence": "name of medal refers to medal_name;"}
{"sample_id": 5045, "db_id": "olympics", "final": {"question": "List out the id of event that achieve the gold medal.", "sql": "SELECT T2.event_id FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id WHERE T1.medal_name = 'Gold'", "source_tables": ["medal", "competitor_event"]}, "evidence": "the gold medal refers to medal_name = 'Gold';"}
{"sample_id": 5046, "db_id": "olympics", "final": {"question": "Who is the heaviest athlete?", "sql": "SELECT full_name FROM person ORDER BY weight DESC LIMIT 1", "source_tables": ["person"]}, "evidence": "Who refers to full_name; the heaviest refers to MAX(weight);"}
{"sample_id": 5172, "db_id": "address", "final": {"question": "Compare the numbers of postal points under Smith Adrian and Heck Joe.", "sql": "SELECT CASE WHEN COUNT(CASE WHEN T1.first_name = 'Smith' AND T1.last_name = 'Adrian' THEN T2.zip_code ELSE NULL END) > COUNT(CASE WHEN T1.first_name = 'Heck' AND T1.last_name = 'Joe' THEN T2.zip_code ELSE NULL END) THEN 'Smith Adrian>Heck Joe' ELSE 'Smith Adrian<=Heck Joe' END AS COMPARE FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district", "source_tables": ["congress", "zip_congress"]}, "evidence": "COUNT(zip_code where first_name = 'Smith' and last_name = 'Adrian') > COUNT(zip_code where first_name = 'Heck' and last_name = 'Joe');"}
{"sample_id": 5173, "db_id": "address", "final": {"question": "Provide the zip codes and CBSA officers of the postal point in Oxford.", "sql": "SELECT T2.zip_code, T1.CBSA_name FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.city = 'Oxford'", "source_tables": ["cbsa", "zip_data"]}, "evidence": "CBSA officers refer to CBSA_name; postal point refers to zip_code; Oxford is the city;"}
{"sample_id": 5174, "db_id": "address", "final": {"question": "Provide the zip codes and their affiliated organization for the postal point under Kingsport-Bristol, TN-VA.", "sql": "SELECT T2.zip_code, T2.organization FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Kingsport-Bristol, TN-VA'", "source_tables": ["cbsa", "zip_data"]}, "evidence": "postal point under Kingsport-Bristol, TN-VA refers to zip_code where CBSA_name = 'Kingsport-Bristol, TN-VA'; affiliated organization refers to organization from CBSA;"}
{"sample_id": 5175, "db_id": "address", "final": {"question": "Provide the zip codes and the congress representatives' names of the postal points which are affiliated with Readers Digest.", "sql": "SELECT T1.zip_code, T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T1.organization = 'Readers Digest'", "source_tables": ["zip_congress", "congress", "zip_data"]}, "evidence": "representative's full names refer to first_name, last_name; postal points affiliated with Readers Digest refer to zip_code where organization = 'Readers Digest';"}
{"sample_id": 5176, "db_id": "address", "final": {"question": "Among the postal points in California, calculate the percentage of them in post office types.", "sql": "SELECT CAST(COUNT(CASE WHEN T2.type = 'Post Office' THEN T2.zip_code ELSE NULL END) AS REAL) * 100 / COUNT(T2.zip_code) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'California'", "source_tables": ["state", "zip_data"]}, "evidence": "DIVIDE(COUNT(zip_code where type = 'Post Office'), COUNT(zip_code)) as percentage where name = 'California';"}
{"sample_id": 5177, "db_id": "address", "final": {"question": "What are the zip code for the Senate house?", "sql": "SELECT T2.zip_code FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.House = 'House of Repsentatives' GROUP BY T2.zip_code", "source_tables": ["congress", "zip_congress"]}, "evidence": "House of Repsentatives can stand for senate house"}
{"sample_id": 5178, "db_id": "address", "final": {"question": "Which city has the most bad aliases?", "sql": "SELECT T2.city FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code GROUP BY T1.bad_alias ORDER BY COUNT(T1.zip_code) DESC LIMIT 1", "source_tables": ["zip_data", "avoid"]}, "evidence": "the most bad aliases refer to MAX(COUNT(bad_alias));"}
{"sample_id": 5179, "db_id": "address", "final": {"question": "List all the counties in Georgia.", "sql": "SELECT T2.county FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Georgia' GROUP BY T2.county", "source_tables": ["state", "country"]}, "evidence": "Georgia is the name of the state, in which name = 'Georgia';"}
{"sample_id": 5180, "db_id": "address", "final": {"question": "List all the locations of postal points with the area code \"410\".", "sql": "SELECT T2.latitude, T2.longitude FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 410", "source_tables": ["area_code", "zip_data"]}, "evidence": "latitude and longitude coordinates can be used to identify the location; postal points refer to zip_code;"}
{"sample_id": 5181, "db_id": "address", "final": {"question": "What is the name of the CBSA of the city with the highest average house value?", "sql": "SELECT DISTINCT T1.CBSA_name FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.avg_house_value = ( SELECT MAX(avg_house_value) FROM zip_data ) LIMIT 1", "source_tables": ["cbsa", "zip_data"]}, "evidence": "the highest average house value refers to avg_house_value;"}
{"sample_id": 5182, "db_id": "address", "final": {"question": "What are the bad aliases of the postal points from East Setauket?", "sql": "SELECT T1.bad_alias FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'East Setauket'", "source_tables": ["zip_data", "avoid"]}, "evidence": "East Setauket is the city;"}
{"sample_id": 5183, "db_id": "address", "final": {"question": "What was the population of Wilcox County in 2010?", "sql": "SELECT SUM(T2.population_2010) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'WILCOX'", "source_tables": ["country", "zip_data"]}, "evidence": "population of Wilcox County in 2010 refers to SUM(population_2010) where county = 'WILCOX';"}
{"sample_id": 5184, "db_id": "address", "final": {"question": "What is the code of the area with the largest Asian population?", "sql": "SELECT T1.zip_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.asian_population ORDER BY T2.asian_population DESC LIMIT 1", "source_tables": ["area_code", "zip_data"]}, "evidence": "the code of the area refers to area_code; area with the largest Asian population refers to MAX(asian_population);"}
{"sample_id": 5185, "db_id": "address", "final": {"question": "List all the cities with micro CBSA.", "sql": "SELECT T2.city FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_type = 'Micro'", "source_tables": ["cbsa", "zip_data"]}, "evidence": "micro CBSA refers to CBSA_type = 'Micro';"}
{"sample_id": 5186, "db_id": "address", "final": {"question": "What is the name of the state with the most counties?", "sql": "SELECT T1.name FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state GROUP BY T2.state ORDER BY COUNT(T2.county) DESC LIMIT 1", "source_tables": ["state", "country"]}, "evidence": "the most counties refer to MAX(COUNT(county));"}
{"sample_id": 5187, "db_id": "address", "final": {"question": "What is the number of households in the \"FL-10\" district?", "sql": "SELECT SUM(CASE WHEN T2.district = 'FL-10' THEN 1 ELSE 0 END) FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code", "source_tables": ["zip_congress", "zip_data"]}, "evidence": ""}
{"sample_id": 5188, "db_id": "address", "final": {"question": "What is the average household income in the city known as \"Danzig\"?", "sql": "SELECT T2.avg_income_per_household FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.bad_alias = 'Danzig'", "source_tables": ["zip_data", "avoid"]}, "evidence": "average household income refers to avg_income_per_household; city known as \"Danzig\" refers to bad_alias = 'Danzig';"}
{"sample_id": 5189, "db_id": "address", "final": {"question": "What are the states with an above-average female population?", "sql": "SELECT DISTINCT T2.state FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T2.female_population > ( SELECT AVG(female_population) FROM zip_data )", "source_tables": ["state", "zip_data"]}, "evidence": "above-average female population refers to female_population > DIVIDE(SUM(female_population), COUNT(state));"}
{"sample_id": 5190, "db_id": "address", "final": {"question": "What percentage of households are in \"Coroyell\" out of its state?", "sql": "SELECT CAST(SUM(CASE WHEN T1.county = 'CORYELL' THEN T2.households ELSE 0 END) AS REAL) * 100 / SUM(T2.households) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code", "source_tables": ["country", "zip_data"]}, "evidence": "DIVIDE(SUM(households where county = 'CORYELL'), SUM(households)) as percentage;"}
{"sample_id": 5191, "db_id": "address", "final": {"question": "What is the name and the position of the CBSA officer in the city of Cabo Rojo?", "sql": "SELECT T1.CBSA_name, T1.CBSA_type FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.city = 'Cabo Rojo' GROUP BY T1.CBSA_name, T1.CBSA_type", "source_tables": ["cbsa", "zip_data"]}, "evidence": "name of the CBSA officer refers to CBSA_name; position of the CBSA officer refers to CBSA_type;"}
{"sample_id": 5192, "db_id": "address", "final": {"question": "Indicate the country name of the city Las Marias.", "sql": "SELECT T1.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Las Marias'", "source_tables": ["country", "zip_data"]}, "evidence": ""}
{"sample_id": 5193, "db_id": "address", "final": {"question": "How many cities does congressman Pierluisi Pedro represent?", "sql": "SELECT COUNT(DISTINCT T1.city) FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T3.first_name = 'Pierluisi' AND T3.last_name = 'Pedro'", "source_tables": ["zip_congress", "congress", "zip_data"]}, "evidence": ""}
{"sample_id": 5194, "db_id": "address", "final": {"question": "Provide the names of bad aliases in the city of Aguadilla.", "sql": "SELECT T1.bad_alias FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Aguadilla'", "source_tables": ["zip_data", "avoid"]}, "evidence": ""}
{"sample_id": 5195, "db_id": "address", "final": {"question": "Indicate the name of the congressman represent in Guanica.", "sql": "SELECT T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T1.city = 'Guanica'", "source_tables": ["zip_congress", "congress", "zip_data"]}, "evidence": "name of congressman implies full name which refers to first_name, last_name; Guanica is the city;"}
{"sample_id": 5196, "db_id": "address", "final": {"question": "Which state has the most bad aliases?", "sql": "SELECT T2.state FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.state ORDER BY COUNT(T1.bad_alias) DESC LIMIT 1", "source_tables": ["zip_data", "avoid"]}, "evidence": "the most bad aliases refer to MAX(COUNT(bad_alias));"}
{"sample_id": 5197, "db_id": "address", "final": {"question": "What is the difference in the number of bad alias between Aguada city and Aguadilla city?", "sql": "SELECT COUNT(CASE WHEN T2.city = 'Aguada' THEN T1.bad_alias ELSE NULL END) - COUNT(CASE WHEN T2.city = 'Aguadilla' THEN T1.bad_alias ELSE NULL END) AS DIFFERENCE FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code", "source_tables": ["zip_data", "avoid"]}, "evidence": "SUBTRACT(COUNT(bad_alias where city = 'Aguada'), COUNT(bad_alias where city = 'Aguadilla'));"}
{"sample_id": 5198, "db_id": "address", "final": {"question": "Which state has greater than 50 CBSA officers of metro type?", "sql": "SELECT T2.state FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_type = 'Metro' GROUP BY T2.state HAVING COUNT(T1.CBSA_type) > 50", "source_tables": ["cbsa", "zip_data"]}, "evidence": "greater than 50 CBSA officers of metro type refers to COUNT(CBSA_type = 'Metro') > 50;"}
{"sample_id": 5199, "db_id": "address", "final": {"question": "Provide the population of Arecibo in 2020.", "sql": "SELECT SUM(T2.population_2020) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'ARECIBO'", "source_tables": ["country", "zip_data"]}, "evidence": "population of Arecibo in 2020 refers to SUM(population_2020) where county = 'ARECIBO';"}
{"sample_id": 5200, "db_id": "address", "final": {"question": "Indicate the name of the country with a population greater than 10000 in 2010.", "sql": "SELECT DISTINCT T1.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.population_2010 > 10000", "source_tables": ["country", "zip_data"]}, "evidence": "population greater than 10000 in 2010 refers to population_2010 > 10000;"}
{"sample_id": 5201, "db_id": "address", "final": {"question": "Name the country with the largest number of households in a residential area.", "sql": "SELECT T1.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code GROUP BY T1.county ORDER BY T2.households DESC LIMIT 1", "source_tables": ["country", "zip_data"]}, "evidence": "the largest number of households refers to MAX(households);"}
{"sample_id": 5310, "db_id": "beer_factory", "final": {"question": "What brand of beer has been the worst rated most times?", "sql": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T2.BrandID = T1.BrandID WHERE T2.StarRating = 1 GROUP BY T1.BrandName ORDER BY COUNT(T1.BrandName) DESC LIMIT 1", "source_tables": ["rootbeerreview", "rootbeerbrand"]}, "evidence": "brand of beer refers to BrandName; worst rated most times refers to MAX(COUNT(StarRating = 1));"}
{"sample_id": 5311, "db_id": "beer_factory", "final": {"question": "What credit card is the most used in the purchase of non-alcoholic beer?", "sql": "SELECT T2.CreditCardType FROM rootbeer AS T1 INNER JOIN 'transaction' AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T3.Alcoholic = 'FALSE' GROUP BY T2.CreditCardType ORDER BY COUNT(T2.CreditCardType) DESC LIMIT 1", "source_tables": ["rootbeer", "rootbeerbrand", "transaction"]}, "evidence": "credit card that is the most used refers to MAX(COUNT(CreditCardType)); non-alcoholic beer refers to Alcoholic = 'FALSE';"}
{"sample_id": 5312, "db_id": "beer_factory", "final": {"question": "What is the name of all the customers who have ever given a 5-star review?", "sql": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.StarRating = 5", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "name of the customer = First, Last; 5-star review refers to StarRating = 5;"}
{"sample_id": 5313, "db_id": "beer_factory", "final": {"question": "At what latitude is the Thomas Kemper brand beer consumed the most?", "sql": "SELECT T3.Latitude FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID INNER JOIN geolocation AS T3 ON T1.LocationID = T3.LocationID WHERE T2.BrandName = 'Thomas Kemper' GROUP BY T3.Latitude ORDER BY COUNT(T1.BrandID) DESC LIMIT 1", "source_tables": ["rootbeer", "rootbeerbrand", "geolocation"]}, "evidence": "Thomas Kemper refers to BrandName = 'Thomas Kemper';\u00a0 latitude the beer is consumed the most refers to MAX(COUNT(Latitude));"}
{"sample_id": 5314, "db_id": "beer_factory", "final": {"question": "What star rating is the most common for beers containing corn syrup?", "sql": "SELECT T2.StarRating FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T1.CornSyrup = 'TRUE' GROUP BY T2.StarRating ORDER BY COUNT(T2.StarRating) DESC LIMIT 1", "source_tables": ["rootbeerreview", "rootbeerbrand"]}, "evidence": "most common refers to MAX(COUNT(StarRating)); containing corn syrup refers to CornSyrup = 'TRUE';"}
{"sample_id": 5315, "db_id": "beer_factory", "final": {"question": "What is the precise location of zip code 95819?", "sql": "SELECT T2.Latitude, T2.Longitude FROM location AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID WHERE T1.ZipCode = 95819", "source_tables": ["geolocation", "location"]}, "evidence": "precise location = Latitude, Longitude;"}
{"sample_id": 5316, "db_id": "beer_factory", "final": {"question": "What brands of beers are manufactured at coordinates 38,566,129, -121,426,432?", "sql": "SELECT DISTINCT T2.BrandName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID INNER JOIN geolocation AS T3 ON T1.LocationID = T3.LocationID WHERE T3.Latitude = '38.566129' AND T3.Longitude = '-121.426432'", "source_tables": ["rootbeer", "rootbeerbrand", "geolocation"]}, "evidence": "coordinates 38,566,129, -121,426,432 refers to Latitude = 38.566129 AND Longitude = -121.426432;"}
{"sample_id": 5317, "db_id": "beer_factory", "final": {"question": "What is the average unit profit for wholesalers of canned beers?", "sql": "SELECT AVG(T2.CurrentRetailPrice - T2.WholesaleCost) FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T1.ContainerType = 'Can'", "source_tables": ["rootbeer", "rootbeerbrand"]}, "evidence": "average unit profit = DIVIDE(SUM(SUBTRACT(CurrentRetailPrice, WholesaleCost)), COUNT(ContainerType = 'Can')); canned beers refers to ContainerType = 'Can';"}
{"sample_id": 5318, "db_id": "beer_factory", "final": {"question": "What percentage of customers who paid with a Discover Credit Card gave a 3-star rating?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.StarRating = 3 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.CustomerID) FROM rootbeerreview AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CreditCardType = 'Discover'", "source_tables": ["rootbeerreview", "transaction"]}, "evidence": "percentage = MULTIPLY(DIVIDE(COUNT(CustomerID WHERE StarRating = 3), COUNT(CustomerID) WHERE CreditCardType = 'Discover'), 100); Discover Credit Card refers to CreditCardType = 'Discover'; 3-star rating refers to StarRating = 3;"}
{"sample_id": 5319, "db_id": "beer_factory", "final": {"question": "List the brand IDs of the beers whose star rating is more than 3.", "sql": "SELECT BrandID FROM rootbeerreview WHERE StarRating > 3", "source_tables": ["rootbeerreview"]}, "evidence": "star rating is more than 3 refers to StarRating > 3;"}
{"sample_id": 5320, "db_id": "beer_factory", "final": {"question": "How many brands of bottle root beer were purchased between 4/3/2015 and 10/26/2015?", "sql": "SELECT COUNT(BrandID) FROM rootbeer WHERE ContainerType = 'Bottle' AND PurchaseDate BETWEEN '2015-04-03' AND '2015-10-26'", "source_tables": ["rootbeer"]}, "evidence": "bottle root beer refers to ContainerType = 'Bottle'; purchased between 4/3/2015 and 10/26/2015 refers to PurchaseDate BETWEEN '2015-04-23' AND '2015-10-26';"}
{"sample_id": 5321, "db_id": "beer_factory", "final": {"question": "What is the full name of the customer who gave a 5-star rating and commented \"The quintessential dessert root beer. No ice cream required\" on his review?", "sql": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.StarRating = 5 AND T2.Review = 'The quintessential dessert root beer. No ice cream required.'", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "full name = First, Last; 5-star rating refers to StarRating = 5; commented \"The quintessential dessert root beer. No ice cream required\" refers to Review = 'The quintessential dessert root beer. No ice cream required.';"}
{"sample_id": 5322, "db_id": "beer_factory", "final": {"question": "Tally the email addresses and phone numbers of customers from Sacramento who gave a star rating of more than 3 in 2014.", "sql": "SELECT DISTINCT T1.Email, T1.PhoneNumber FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.StarRating > 3 AND T1.City = 'Sacramento' AND T2.ReviewDate BETWEEN '2014-01-01' AND '2014-12-31'", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "email addresses refers to Email; Sacramento refers to City = 'Sacramento'; star rating of more than 3 refers to StarRating > 3; in 2014 refers to ReviewDate LIKE '2014%';"}
{"sample_id": 5323, "db_id": "beer_factory", "final": {"question": "How many female mailing list subscribers from Sacramento gave a 4-star rating between 1/3/2016 and 10/26/2016?", "sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.StarRating = 4 AND T1.City = 'Sacramento' AND T1.Gender = 'F' AND T1.SubscribedToEmailList = 'TRUE' AND T2.ReviewDate BETWEEN '2013-01-03' AND '2013-10-26'", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "female refers to Gender = 'F'; mailing list subscribers refers to SubscribedToEmailList = 'TRUE'; Elk Grove refers to City = 'Sacramento'; 4-star rating refers to StarRating = 4; between 1/3/2016 and 10/26/2016 refers to ReviewDate BETWEEN '2016-01-03' AND '2016-10-26';"}
{"sample_id": 5324, "db_id": "beer_factory", "final": {"question": "Give me the brewery and brand names of canned root beer that were purchased before 6/6/2015.", "sql": "SELECT DISTINCT T2.BreweryName, T2.BrandName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T1.PurchaseDate < '2015-06-06' AND T1.ContainerType = 'Can'", "source_tables": ["rootbeer", "rootbeerbrand"]}, "evidence": "canned root beer refers to ContainerType = 'Can'; purchased before 6/6/2015 refers to PurchaseDate < '2015-06-06';"}
{"sample_id": 5325, "db_id": "beer_factory", "final": {"question": "List the brand names of bottled root beer whose first brewing year is no later than 1930.", "sql": "SELECT T2.BrandName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T2.FirstBrewedYear < '1930-01-01' AND T1.ContainerType = 'Bottle' ORDER BY T2.FirstBrewedYear LIMIT 1", "source_tables": ["rootbeer", "rootbeerbrand"]}, "evidence": "bottled root beer refers to ContainerType = 'Bottle'; first brewing year is no later than 1930 refers to FirstBrewedYear < 1930;"}
{"sample_id": 5326, "db_id": "beer_factory", "final": {"question": "How many times did Anna Himes use her Mastercard when paying between 12/25/2014 and 5/20/2016 ?", "sql": "SELECT COUNT(T2.CustomerID) FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Anna' AND T1.Last = 'Himes' AND T2.CreditCardType = 'MasterCard' AND T2.TransactionDate BETWEEN '2014-12-25' AND '2016-05-20'", "source_tables": ["transaction", "customers"]}, "evidence": "Mastercard refers to CreditCardType = 'MasterCard'; between 12/25/2014 and 5/20/2016 refers to TransactionDate BETWEEN '2014-12-25' AND '2016-05-20';"}
{"sample_id": 5327, "db_id": "beer_factory", "final": {"question": "What is the average star rating given by female customers to brand ID 10018 from 1/25/2015 to 3/10/2015?", "sql": "SELECT AVG(T2.StarRating) FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.BrandID = 10018 AND T1.Gender = 'F' AND T2.ReviewDate BETWEEN '2013-01-25' AND '2015-03-10'", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "average star rating = AVG(StarRating); female customers refers to Gender = 'F; from 1/25/2015 to 3/10/2015 refers to ReviewDate BETWEEN '2015-01-25' AND '2015-03-10';"}
{"sample_id": 5328, "db_id": "beer_factory", "final": {"question": "What is the brand name of the root beer that gained a 1-star rating from customer ID 331115 while saying, \"Yuk, more like licorice soda\"?", "sql": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.CustomerID = 331115 AND T2.Review = 'Yuk, more like licorice soda.' AND T2.StarRating = 1", "source_tables": ["rootbeerreview", "rootbeerbrand"]}, "evidence": "1-star rating refers to StarRating = 1; saying, \"Yuk, more like licorice soda\" refers to Review = 'Yuk, more like licorice soda.';"}
{"sample_id": 5329, "db_id": "beer_factory", "final": {"question": "Calculate the total purchases made by customers using their Visa credit cards in the Sac State American River Courtyard between 6/3/2014 and 11/27/2015.", "sql": "SELECT SUM(T1.PurchasePrice) FROM 'transaction' AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.LocationName = 'Sac State American River Courtyard' AND T1.CreditCardType = 'Visa' AND T1.TransactionDate BETWEEN '2014-06-03' AND '2015-11-27'", "source_tables": ["location", "transaction"]}, "evidence": "total purchases = SUM(PurchasePrice); Visa credit card refers to CreditCardType = 'Visa'; Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard'; between 6/3/2014 and 11/27/2015 refers to TransactionDate BETWEEN '2014-06-03' AND '2015-11-27';"}
{"sample_id": 5330, "db_id": "beer_factory", "final": {"question": "How many transactions were made in Sac State Union using the American Express credit card in 2014?", "sql": "SELECT COUNT(T1.TransactionID) FROM 'transaction' AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.LocationName = 'Sac State Union' AND T1.CreditCardType = 'American Express' AND T1.TransactionDate BETWEEN '2014-01-01' AND '2014-12-31'", "source_tables": ["location", "transaction"]}, "evidence": "Sac State Union refers to LocationName = 'Sac State Union'; American Express credit card refers to CreditCardType = 'American Express'; in 2014 refers to TransactionDate LIKE '2014%';"}
{"sample_id": 5331, "db_id": "beer_factory", "final": {"question": "What is the precise coordinate of Sac State Union?", "sql": "SELECT T2.Latitude, T2.Longitude FROM location AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID WHERE T1.LocationName = 'Sac State Union'", "source_tables": ["geolocation", "location"]}, "evidence": "precise coordinate = Latitude, Longitude; Sac State Union refers to LocationName = 'Sac State Union';"}
{"sample_id": 5332, "db_id": "beer_factory", "final": {"question": "What did the customer say in his or her review of Bulldog root beer on 7/26/2013?", "sql": "SELECT T2.Review FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T1.BrandName = 'Bulldog' AND T2.ReviewDate = '2013-07-26'", "source_tables": ["rootbeerreview", "rootbeerbrand"]}, "evidence": "Bulldog refers to BrandName = 'Bulldog'; on 7/26/2013 refers to ReviewDate = '2013-07-26';"}
{"sample_id": 5333, "db_id": "beer_factory", "final": {"question": "List down the brand names of root beer that gained a 5-star rating from a customer's review in 2013. Calculate the unit profit available to wholesalers for each brand.", "sql": "SELECT T1.BrandName, T1.CurrentRetailPrice - T1.WholesaleCost AS result FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5 AND T2.ReviewDate BETWEEN '2013-01-01' AND '2013-12-31'", "source_tables": ["rootbeerreview", "rootbeerbrand"]}, "evidence": "5-star rating refers to StarRating = 5; in 2013 refers to ReviewDate LIKE '2013%'; unit profit available to wholesalers = SUBTRACT(CurrentRetailPrice, WholesaleCost);"}
{"sample_id": 5334, "db_id": "beer_factory", "final": {"question": "Give me the full name of the first customer, and tell me how long ago he or she wrote his or her first review since making his or her first purchase.", "sql": "SELECT T1.First, T1.Last , strftime('%J', ReviewDate) - strftime('%J', FirstPurchaseDate) AS TIMEAGO FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID LIMIT 1", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "full name = First, Last; how long ago = SUBTRACT(ReviewDate, FirstPurchaseDate);"}
{"sample_id": 5335, "db_id": "beer_factory", "final": {"question": "What is the credit card type used by Kenneth Walton?", "sql": "SELECT DISTINCT T2.CreditCardType FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Kenneth' AND T1.Last = 'Walton'", "source_tables": ["transaction", "customers"]}, "evidence": "FALSE;"}
{"sample_id": 5427, "db_id": "sales", "final": {"question": "How many of the employees have the last name \"Ringer\" ?", "sql": "SELECT COUNT(LastName) FROM Employees WHERE LastName = 'Ringer'", "source_tables": ["employees"]}, "evidence": ""}
{"sample_id": 5428, "db_id": "sales", "final": {"question": "Among the products with product ID lower than 15, how many of them costs 10 and below?", "sql": "SELECT COUNT(ProductID) FROM Products WHERE ProductID < 15 AND Price <= 10", "source_tables": ["products"]}, "evidence": "product ID lower than 15 refers to ProductID < 15; costs 10 and below refers to Price; Price < = 10;"}
{"sample_id": 5429, "db_id": "sales", "final": {"question": "Give the product's name brought by Aaron Alexander.", "sql": "SELECT DISTINCT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.FirstName = 'Aaron' AND T3.LastName = 'Alexander'", "source_tables": ["sales", "products", "customers"]}, "evidence": ""}
{"sample_id": 5430, "db_id": "sales", "final": {"question": "Give the product ID and name of the product with the highest prices among the quantity ranges from 400 to 500.", "sql": "SELECT T1.ProductID, T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.quantity BETWEEN 400 AND 500 ORDER BY T1.Price DESC LIMIT 1", "source_tables": ["sales", "products"]}, "evidence": "highest prices refers to MAX(Price); quantity ranges from 400 to 500 refers to Quantity BETWEEN 400 AND 500;"}
{"sample_id": 5431, "db_id": "sales", "final": {"question": "Among customers named Kate, who has the highest quantity?", "sql": "SELECT T2.FirstName, T2.LastName FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Kate' ORDER BY T1.Quantity DESC LIMIT 1", "source_tables": ["sales", "customers"]}, "evidence": "highest quantity refers to MAX(Quantity);"}
{"sample_id": 5432, "db_id": "sales", "final": {"question": "Among the products that have price ranges from 100 to 150, what is the customer ID and sales ID of the product with a quantity lower than 25?", "sql": "SELECT T2.CustomerID, T2.SalesID FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Price BETWEEN 100 AND 150 AND T2.Quantity < 25", "source_tables": ["sales", "products"]}, "evidence": "price ranges from 100 to 150 refers to Price BETWEEN 100 AND 150; quantity lower than 25 refers to Quantity < 25;"}
{"sample_id": 5433, "db_id": "sales", "final": {"question": "List the quantity and price of the product bought by Abigail Henderson.", "sql": "SELECT T2.Quantity, T1.Price FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.FirstName = 'Abigail' AND T3.LastName = 'Henderson'", "source_tables": ["sales", "products", "customers"]}, "evidence": ""}
{"sample_id": 5434, "db_id": "sales", "final": {"question": "In sales with a quantity of 60, how many of them have a price not greater than 500?", "sql": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.quantity = 60 AND T1.Price <= 500", "source_tables": ["sales", "products"]}, "evidence": ""}
{"sample_id": 5435, "db_id": "sales", "final": {"question": "In customers with the first name of Erica, how many of them bought a quantity below 200?", "sql": "SELECT COUNT(T1.ProductID) FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Erica' AND T1.Quantity < 200", "source_tables": ["sales", "customers"]}, "evidence": "quantity below 200 refers to quantity < 200;"}
{"sample_id": 5436, "db_id": "sales", "final": {"question": "Among products bought by Kathryn Ashe, what is the name of the product with the highest quantity?", "sql": "SELECT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.FirstName = 'Kathryn' AND T3.LastName = 'Ashe' ORDER BY T2.Quantity DESC LIMIT 1", "source_tables": ["sales", "products", "customers"]}, "evidence": "highest quantity refers to MAX(Quantity);"}
{"sample_id": 5437, "db_id": "sales", "final": {"question": "What is the price and quantity of the product named Seat Tube?", "sql": "SELECT DISTINCT T2.Price, T1.Quantity FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Seat Tube'", "source_tables": ["sales", "products"]}, "evidence": ""}
{"sample_id": 5438, "db_id": "sales", "final": {"question": "What is the price and name of the product bought by Erica Xu?", "sql": "SELECT T3.Price, T3.Name FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.FirstName = 'Erica' AND T2.LastName = 'Xu'", "source_tables": ["sales", "products", "customers"]}, "evidence": ""}
{"sample_id": 5439, "db_id": "sales", "final": {"question": "List the sales ID of the product with a quantity of 590 and named \"External Lock Washer 7\".", "sql": "SELECT T1.SalesID FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'External Lock Washer 7' AND T1.Quantity = 590", "source_tables": ["sales", "products"]}, "evidence": "External Lock Washer 7' is name of product;"}
{"sample_id": 5440, "db_id": "sales", "final": {"question": "In sales ID between 30 and 40, who is the customer that bought a total quantity of 403?", "sql": "SELECT T2.FirstName, T2.LastName FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Quantity = 403 AND T1.SalesID BETWEEN 30 AND 40", "source_tables": ["sales", "customers"]}, "evidence": "who refers to FirstName, LastName;"}
{"sample_id": 5441, "db_id": "sales", "final": {"question": "List the customer's ID and last name of the customer that purchased a product with a quantity greater than 90% of the average quantity of all listed products.", "sql": "SELECT T2.CustomerID, T2.LastName FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Quantity > ( SELECT AVG(Quantity) FROM Sales ) * 0.9", "source_tables": ["sales", "customers"]}, "evidence": "quantity greater than 90% of the average quantity = Quantity > MULTIPLY(AVG(Quantity), 0.9);"}
{"sample_id": 5442, "db_id": "sales", "final": {"question": "Among the sales ID ranges from 1 to 200, what is the percentage of the products with a price ranging from 200 to 300?", "sql": "SELECT CAST(SUM(IIF(T2.Price BETWEEN 200 AND 300, 1, 0)) AS REAL) * 100 / COUNT(T2.Price) FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T1.SalesID BETWEEN 1 AND 200", "source_tables": ["sales", "products"]}, "evidence": "sales ID ranges from 1 to 200 refers to SalesID between 1 and 200; percentage = MULTIPLY(DIVIDE(SUM(Price between 200 and 300), COUNT(Price)), 1.0);"}
{"sample_id": 5443, "db_id": "sales", "final": {"question": "What is the name of the most expensive product?", "sql": "SELECT Name FROM Products WHERE Price = ( SELECT MAX(Price) FROM Products )", "source_tables": ["products"]}, "evidence": "most expensive product refers to MAX(Price);"}
{"sample_id": 5444, "db_id": "sales", "final": {"question": "How many customers are named Madison?", "sql": "SELECT COUNT(CustomerID) FROM Customers WHERE FirstName = 'Madison'", "source_tables": ["customers"]}, "evidence": ""}
{"sample_id": 5445, "db_id": "sales", "final": {"question": "How many types of \"HL Touring Frames\" are there?", "sql": "SELECT COUNT(ProductID) FROM Products WHERE Name LIKE '%HL Touring Frame%'", "source_tables": ["products"]}, "evidence": "types of HL Touring Frames refers to Name like '%HL Touring Frame%';"}
{"sample_id": 5446, "db_id": "sales", "final": {"question": "How many customers share the most common last name?", "sql": "SELECT COUNT(CustomerID) FROM Customers GROUP BY LastName ORDER BY COUNT(LastName) DESC LIMIT 1", "source_tables": ["customers"]}, "evidence": "most common last name refers to MAX(COUNT(LastName));"}
{"sample_id": 5447, "db_id": "sales", "final": {"question": "How many free or gift products are there?", "sql": "SELECT COUNT(ProductID) FROM Products WHERE Price = 0", "source_tables": ["products"]}, "evidence": "free gift refers to Price = 0;"}
{"sample_id": 5534, "db_id": "menu", "final": {"question": "Among the dishes, how many of them were created between 2011-03-31 at 20:24:46 UTC and 2011-04-15 at 23:09:51 UTC.", "sql": "SELECT SUM(CASE WHEN T2.created_at BETWEEN '2011-03-31 20:24:46 UTC' AND '2011-04-15 23:09:51 UTC' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id", "source_tables": ["dish", "menuitem"]}, "evidence": "created between 2011-03-31 at 20:24:46 UTC and 2011-04-15 at 23:09:51 UTC refers to created_at between '2011-03-31 20:24:46 UTC' AND '2011-04-15 23:09:51 UTC';"}
{"sample_id": 5535, "db_id": "menu", "final": {"question": "Who are the sponsors of the menu whose image full height is more than 10000 mm?", "sql": "SELECT T2.sponsor FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T1.full_height = 10000", "source_tables": ["menupage", "menu"]}, "evidence": "image full height is more than 10000 mm refers to full_height > 10000;"}
{"sample_id": 5536, "db_id": "menu", "final": {"question": "Write down the image ID, full height, and full width of the menu that were used in the \"100TH ANNIVERSARY OF BIRTH OF DANIEL WEBSTER\" event.", "sql": "SELECT T1.image_id, T1.full_height, T1.full_width FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T2.event = '100TH ANNIVERSARY OF BIRTH OF DANIEL WEBSTER'", "source_tables": ["menupage", "menu"]}, "evidence": "FALSE;"}
{"sample_id": 5537, "db_id": "menu", "final": {"question": "Under what events was the menu page's full width less than 2000 mm?", "sql": "SELECT T1.event FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T2.full_width = 2000", "source_tables": ["menupage", "menu"]}, "evidence": "full width less than 2000 mm refers to full_width < 2000;"}
{"sample_id": 5538, "db_id": "menu", "final": {"question": "Name the dishes that cost 180,000.", "sql": "SELECT T1.name FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T2.price = 180000", "source_tables": ["dish", "menuitem"]}, "evidence": "cost 180,000 refers to price = 180000;"}
{"sample_id": 5539, "db_id": "menu", "final": {"question": "What is the position coordinate on the page menu of the \"Small Hominy\" dish and how long did it appear?", "sql": "SELECT T2.xpos, T2.ypos, T1.last_appeared - T1.first_appeared FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Small Hominy'", "source_tables": ["dish", "menuitem"]}, "evidence": "position coordinate = xpos, ypos; Small Hominy is a name of dish; how long it appear = SUBTRACT(last_appeared, first_appeared);"}
{"sample_id": 5540, "db_id": "menu", "final": {"question": "Calculate the image area of the page menu for the dish named \"Baked Stuffed Mullet & Sauce Pomard\". Please include the page number and image ID.", "sql": "SELECT T1.full_height * T1.full_width, T1.page_number, T1.image_id FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T3.name = 'Baked Stuffed Mullet & Sauce Pomard'", "source_tables": ["menupage", "dish", "menuitem"]}, "evidence": "image area = MULTIPLY(full_height, full_width);"}
{"sample_id": 5541, "db_id": "menu", "final": {"question": "How many dishes appeared more than once on a menu?", "sql": "SELECT COUNT(*) FROM Dish WHERE times_appeared > Dish.menus_appeared", "source_tables": ["dish"]}, "evidence": "appeared more than once on a menu refers to times_appeared > menus_appeared;"}
{"sample_id": 5542, "db_id": "menu", "final": {"question": "How many menus sponsored by Krogs Fiske Restaurant were created in April 2015?", "sql": "SELECT COUNT(*) FROM Menu WHERE date LIKE '2015-04%' AND sponsor = 'Krogs Fiskerestaurant'", "source_tables": ["menu"]}, "evidence": "sponsored by Krogs Fiske Restaurant refers to sponsor = 'Krogs Fiskerestaurant'; created in April 2015 refers to date like '2015-04%';"}
{"sample_id": 5543, "db_id": "menu", "final": {"question": "Which dish has the longest history?", "sql": "SELECT name FROM Dish ORDER BY last_appeared - Dish.first_appeared DESC LIMIT 1", "source_tables": ["dish"]}, "evidence": "longest history refers to MAX(SUBTRACT(last_appeared, first_appeared));"}
{"sample_id": 5544, "db_id": "menu", "final": {"question": "On 1887-07-21, what was the event that lead to the creation of menu id 21380?", "sql": "SELECT event FROM Menu WHERE date = '1887-07-21' AND id = 21380", "source_tables": ["menu"]}, "evidence": "On 1887-07-21 refers to date = '1887-07-21';"}
{"sample_id": 5545, "db_id": "menu", "final": {"question": "How many pages are there in the \"Emil Kuehn\" menu?", "sql": "SELECT SUM(CASE WHEN T1.name = 'Emil Kuehn' THEN 1 ELSE 0 END) FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id", "source_tables": ["menupage", "menu"]}, "evidence": "Emil Kuehn is a name of menu;"}
{"sample_id": 5546, "db_id": "menu", "final": {"question": "How many menus include puree of split peas aux croutons?", "sql": "SELECT SUM(CASE WHEN T1.name = 'Puree of split peas aux croutons' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id", "source_tables": ["dish", "menuitem"]}, "evidence": "puree of split peas aux croutons is a name of dish;"}
{"sample_id": 5547, "db_id": "menu", "final": {"question": "What are the names of the dishes with a stable price that were created in April of 2011?", "sql": "SELECT T1.name FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE SUBSTR(T2.created_at, 1, 4) = '2011' AND SUBSTR(T2.created_at, 7, 1) = '4' AND T1.highest_price IS NULL", "source_tables": ["dish", "menuitem"]}, "evidence": "dishes with a stable price refers to highest_price is null; created in April of 2011 refers to SUBSTR(created_at,1,4) = '2011' and SUBSTR(created_at, 7, 1) = '4';"}
{"sample_id": 5548, "db_id": "menu", "final": {"question": "What is the name of the menu with the highest number of pages?", "sql": "SELECT T1.name FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id GROUP BY T2.menu_id ORDER BY COUNT(T2.page_number) DESC LIMIT 1", "source_tables": ["menupage", "menu"]}, "evidence": "highest number of pages refers to MAX(COUNT(page_number));"}
{"sample_id": 5549, "db_id": "menu", "final": {"question": "Provide the menu page ids of all the menu that includes mashed potatoes.", "sql": "SELECT T2.menu_page_id FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Mashed potatoes'", "source_tables": ["dish", "menuitem"]}, "evidence": "mashed potatoes is a name of dish;"}
{"sample_id": 5550, "db_id": "menu", "final": {"question": "Among the menus sponsored by Pacific Mail Steamship Company, how many menus have no more than 2 pages?", "sql": "SELECT COUNT(*) FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.sponsor = 'PACIFIC MAIL STEAMSHIP COMPANY' GROUP BY T2.menu_id HAVING COUNT(T2.page_number) <= 2", "source_tables": ["menupage", "menu"]}, "evidence": "sponsored by Pacific Mail Steamship Company refers to sponsor = 'PACIFIC MAIL STEAMSHIP COMPANY'; no more than 2 pages refers to COUNT(page_number) < = 2;"}
{"sample_id": 5551, "db_id": "menu", "final": {"question": "Among the menus that include milk, what is the menu page id of the menu that has the highest price?", "sql": "SELECT T1.menu_page_id FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T2.name = 'Milk' ORDER BY T1.price DESC LIMIT 1", "source_tables": ["dish", "menuitem"]}, "evidence": "milk is a name of dish; highest price refers to MAX(price);"}
{"sample_id": 5552, "db_id": "menu", "final": {"question": "What is the menu id of the menu sponsored by Occidental and Oriental Steamship Company with the highest number of pages?", "sql": "SELECT T2.menu_id FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.sponsor = 'OCCIDENTAL & ORIENTAL STEAMSHIP COMPANY' GROUP BY T2.menu_id ORDER BY COUNT(T2.page_number) DESC LIMIT 1", "source_tables": ["menupage", "menu"]}, "evidence": "sponsored by Occidental and Oriental Steamship Company refers to sponsor = 'OCCIDENTAL & ORIENTAL STEAMSHIP COMPANY'; highest number of pages refers to MAX(COUNT(page_number));"}
{"sample_id": 5553, "db_id": "menu", "final": {"question": "List the positions of the dish \"breaded veal cutlet with peas\" on every menu where it appeared.", "sql": "SELECT T2.xpos, T2.ypos FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'breaded veal cutlet with peas'", "source_tables": ["dish", "menuitem"]}, "evidence": "positions = xpos, ypos; breaded veal cutlet with peas is a name of dish;"}
{"sample_id": 5554, "db_id": "menu", "final": {"question": "What are the names of the dishes shown in the lower right corner of menu page 48706?", "sql": "SELECT T2.name FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T1.xpos > 0.75 AND T1.ypos > 0.75 AND T1.menu_page_id = 48706", "source_tables": ["dish", "menuitem"]}, "evidence": "shown in the lower right corner refers to xpos > 0.75 AND ypos > 0.75;"}
{"sample_id": 5641, "db_id": "shipping", "final": {"question": "What is the last name of driver who transported shipment id 1088?", "sql": "SELECT T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = '1088'", "source_tables": ["driver", "shipment"]}, "evidence": "shipment id 1088 refers to ship_id = 1088"}
{"sample_id": 5642, "db_id": "shipping", "final": {"question": "Give the phone of drivers who transported shipment weight of greater than 20000 pounds.", "sql": "SELECT T2.phone FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id GROUP BY T2.driver_id HAVING SUM(T1.weight) > 20000", "source_tables": ["driver", "shipment"]}, "evidence": "shipment weight of greater than 20000 pounds refers to Sum(weight) > 20000"}
{"sample_id": 5643, "db_id": "shipping", "final": {"question": "What is the brand and model of truck used in shipment id 1055?", "sql": "SELECT T1.make, T1.model_year FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1055'", "source_tables": ["truck", "shipment"]}, "evidence": "shipment id 1055 refers to ship_id = 1055; brand refers to make; model refers to model_year"}
{"sample_id": 5644, "db_id": "shipping", "final": {"question": "How many trucks were manufactured in year 2009?", "sql": "SELECT COUNT(truck_id) FROM truck WHERE model_year = 2009", "source_tables": ["truck"]}, "evidence": "manufactured in year 2009 refers to model_year = 2009"}
{"sample_id": 5645, "db_id": "shipping", "final": {"question": "How many customers are manufacturer?", "sql": "SELECT COUNT(*) FROM customer WHERE cust_type = 'manufacturer'", "source_tables": ["customer"]}, "evidence": "\"manufacturer\" is the cust_type"}
{"sample_id": 5646, "db_id": "shipping", "final": {"question": "How many customers who live in California that are retailers?", "sql": "SELECT COUNT(*) FROM customer WHERE cust_type = 'retailer' AND state = 'CA'", "source_tables": ["customer"]}, "evidence": "\"retailer\" is the cust_type; live in California refers to state = 'CA'"}
{"sample_id": 5647, "db_id": "shipping", "final": {"question": "How many cities are in Connecticut?", "sql": "SELECT COUNT(*) FROM city WHERE state = 'Connecticut'", "source_tables": ["city"]}, "evidence": "\"Connecticut\" is the state"}
{"sample_id": 5648, "db_id": "shipping", "final": {"question": "What is the most populated city in California?", "sql": "SELECT city_name FROM city WHERE state = 'California' AND population = ( SELECT MAX(population) FROM city WHERE state = 'California' )", "source_tables": ["city"]}, "evidence": "in California refers to state = 'CA'; most populated city refers to Max(population)"}
{"sample_id": 5649, "db_id": "shipping", "final": {"question": "What is the annual revenue of Klett & Sons Repair?", "sql": "SELECT annual_revenue FROM customer WHERE cust_name = 'Klett & Sons Repair'", "source_tables": ["customer"]}, "evidence": "\"Klett & Sons Repair\" is the cust_name"}
{"sample_id": 5650, "db_id": "shipping", "final": {"question": "Who is the driver that transported the lightest weight of shipment? Provide the full name of the driver.", "sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id ORDER BY T1.weight ASC LIMIT 1", "source_tables": ["driver", "shipment"]}, "evidence": "lightest weight refers to Min(weight); full name refers to first_name, last_name"}
{"sample_id": 5651, "db_id": "shipping", "final": {"question": "How many shipments were shipped to customers living in California in year 2016?", "sql": "SELECT COUNT(*) AS per FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE STRFTIME('%Y', T2.ship_date) = '2016' AND T1.state = 'CA'", "source_tables": ["customer", "shipment"]}, "evidence": "living in California refers to state = 'CA'; in year 2016 refers to CAST(ship_date AS DATE) = 2016"}
{"sample_id": 5652, "db_id": "shipping", "final": {"question": "What is the brand of the truck that is used to ship by Zachery Hicks?", "sql": "SELECT DISTINCT T1.make FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id INNER JOIN driver AS T3 ON T3.driver_id = T2.driver_id WHERE T3.first_name = 'Zachery' AND T3.last_name = 'Hicks'", "source_tables": ["truck", "driver", "shipment"]}, "evidence": "brand of truck refers to make"}
{"sample_id": 5653, "db_id": "shipping", "final": {"question": "List all the name of the customers that received a shipment in February 2017.", "sql": "SELECT T1.cust_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T2.ship_date LIKE '2017-02%'", "source_tables": ["customer", "shipment"]}, "evidence": "shipment in February 2017 refers to ship_date LIKE '2017-02-%'; name of customer refers to cust_name"}
{"sample_id": 5654, "db_id": "shipping", "final": {"question": "Provide the brand of the truck and the name of the driver that transported goods in Klett & Sons Repair.", "sql": "SELECT T3.make, T4.first_name, T4.last_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN truck AS T3 ON T3.truck_id = T2.truck_id INNER JOIN driver AS T4 ON T4.driver_id = T2.driver_id WHERE T1.cust_name = 'Klett & Sons Repair'", "source_tables": ["truck", "customer", "driver", "shipment"]}, "evidence": "\"Klett & Sons Repair\" is the cust_name; brand of truck refers to make; name of driver refers to first_name, last_name"}
{"sample_id": 5655, "db_id": "shipping", "final": {"question": "What is the shipment ID of the heaviest shipment that Zachery Hicks transported?", "sql": "SELECT T1.ship_id FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.first_name = 'Zachery' AND T2.last_name = 'Hicks' ORDER BY T1.weight DESC LIMIT 1", "source_tables": ["driver", "shipment"]}, "evidence": "shipment ID refers to ship_id; heaviest shipment refers to Max(weight)"}
{"sample_id": 5656, "db_id": "shipping", "final": {"question": "How many shipments did Zachery Hicks transport goods to New York in the year 2016?", "sql": "SELECT COUNT(*) FROM city AS T1 INNER JOIN shipment AS T2 ON T1.city_id = T2.city_id INNER JOIN driver AS T3 ON T3.driver_id = T2.driver_id WHERE T3.first_name = 'Zachery' AND T3.last_name = 'Hicks' AND T1.city_name = 'New York' AND STRFTIME('%Y', T2.ship_date) = '2016'", "source_tables": ["city", "driver", "shipment"]}, "evidence": "\"New York\" is the city_name; in 2016 refers to CAST(ship_date AS DATE) = 2016"}
{"sample_id": 5657, "db_id": "shipping", "final": {"question": "Which headquarter's truck has the highest shipments in year 2016?", "sql": "SELECT CASE WHEN T2.make = 'Peterbilt' THEN 'Texas (TX)' WHEN T2.make = 'Mack' THEN 'North Carolina (NC)' WHEN T2.make = 'Kenworth' THEN 'Washington (WA)' END AS 'result' FROM shipment AS T1 INNER JOIN truck AS T2 ON T1.truck_id = T2.truck_id WHERE CAST(T1.ship_date AS DATE) = 2016 GROUP BY T2.make ORDER BY COUNT(T1.ship_id) DESC LIMIT 1", "source_tables": ["truck", "shipment"]}, "evidence": "in 2016 refers to CAST(ship_date AS DATE) = 2016; make = 'Peterbilt' means headquarter is 'Texas (TX)', make = 'Mack' means headquarter is 'North Carolina (NC)', make = 'Kenworth' means headquarter is 'Washington (WA)'; highest shipment refers to MAX(COUNT(ship_id))"}
{"sample_id": 5658, "db_id": "shipping", "final": {"question": "How many shipments were shipped to the least populated city in California?", "sql": "SELECT COUNT(T3.city_name) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id WHERE T3.state = 'California' ORDER BY T3.population ASC LIMIT 1", "source_tables": ["city", "customer", "shipment"]}, "evidence": "\"California\" is the state; least populated city refers to Min(population)"}
{"sample_id": 5659, "db_id": "shipping", "final": {"question": "In which city did the heaviest shipment transported?", "sql": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T1.weight DESC LIMIT 1", "source_tables": ["city", "shipment"]}, "evidence": "heaviest shipment refers to Max(weight); city refers to city_name"}
{"sample_id": 5660, "db_id": "shipping", "final": {"question": "List all the cities where Zachery Hicks transported goods.", "sql": "SELECT DISTINCT T3.city_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id INNER JOIN city AS T3 ON T1.city_id = T3.city_id WHERE T2.first_name = 'Zachery' AND T2.last_name = 'Hicks'", "source_tables": ["city", "driver", "shipment"]}, "evidence": "city refers to city_name"}
{"sample_id": 5661, "db_id": "shipping", "final": {"question": "Calculate the average number of shipments that Zachery Hicks shipped in year 2017.", "sql": "SELECT CAST(SUM(CASE WHEN T2.first_name = 'Zachery' AND T2.last_name = 'Hicks' THEN T1.ship_id ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE STRFTIME('%Y', T1.ship_date) = '2017'", "source_tables": ["driver", "shipment"]}, "evidence": "in year 2017 refers to CAST(ship_date AS DATE) = 2017; percentage = Divide (Count(ship_id where first_name = 'Zachery' AND last_name = 'Hicks'), Count(ship_id)) * 100"}
{"sample_id": 5765, "db_id": "language_corpus", "final": {"question": "State the total pages of the words that has repeated times of 2593.", "sql": "SELECT COUNT(T1.pages) FROM langs AS T1 INNER JOIN langs_words AS T2 ON T1.lid = T2.lid WHERE T2.occurrences = 2593", "source_tables": ["langs_words", "langs"]}, "evidence": "repeated times of 2593 refers to occurrences = 2593;"}
{"sample_id": 5766, "db_id": "language_corpus", "final": {"question": "List out the title of the word have id less than 20.", "sql": "SELECT DISTINCT T1.title FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T2.wid < 20", "source_tables": ["pages_words", "pages"]}, "evidence": "word have id less than 20 refers to wid < 20;"}
{"sample_id": 5767, "db_id": "language_corpus", "final": {"question": "How many word that has number of different words equal to 3?", "sql": "SELECT COUNT(T2.wid) FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.words = 3", "source_tables": ["pages_words", "pages"]}, "evidence": "This is not;"}
{"sample_id": 5768, "db_id": "language_corpus", "final": {"question": "How many word appeared 8 times? State the language id of the page.", "sql": "SELECT COUNT(T2.wid), T1.lid FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T2.occurrences = 8", "source_tables": ["pages_words", "pages"]}, "evidence": "appeared 8 times refers to occurrences = 8;"}
{"sample_id": 5769, "db_id": "language_corpus", "final": {"question": "Calculate the average percentage of word appearance in the page that have revision page id smaller than 106680.", "sql": "SELECT CAST(SUM(T1.words) AS REAL) * 100 / SUM(T2.occurrences) FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.revision < 106680", "source_tables": ["pages_words", "pages"]}, "evidence": "revision page id smaller than 106680 refers to revision < 106680; word appearance refers to occurrences; DIVIDE(SUM(occurrences where revision < 106680), COUNT(occurrences)) as percentage;"}
{"sample_id": 5770, "db_id": "language_corpus", "final": {"question": "List out the total pages of the words that has repeated times more than 3000.", "sql": "SELECT T1.pages FROM langs AS T1 INNER JOIN langs_words AS T2 ON T1.lid = T2.lid WHERE T2.occurrences > 3000 GROUP BY T1.pages", "source_tables": ["langs_words", "langs"]}, "evidence": "repeated more than 3000 times refers to occurrences > 3000;"}
{"sample_id": 5771, "db_id": "language_corpus", "final": {"question": "State the name of the pair of word that have id of 20 and 50?", "sql": "SELECT T1.word, T3.word FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T2.w1st = 20 AND T2.w2nd = 50", "source_tables": ["biwords", "words"]}, "evidence": "word that have id of 20 refers to wid = 20; word that have id of 50 refers to wid = 50;"}
{"sample_id": 5772, "db_id": "language_corpus", "final": {"question": "How many pages of Wikipedia are there in total on the Catalan language?", "sql": "SELECT pages FROM langs WHERE lang = 'ca'", "source_tables": ["langs"]}, "evidence": "Catalan language refers to lang = 'ca';"}
{"sample_id": 5773, "db_id": "language_corpus", "final": {"question": "Please list the titles of the Wikipedia pages on the Catalan language with more than 4000 words.", "sql": "SELECT title FROM pages WHERE lid = 1 AND words > 4000", "source_tables": ["pages"]}, "evidence": "Catalan language refers to lid = 1; more than 4000 words refers to words > 4000;"}
{"sample_id": 5774, "db_id": "language_corpus", "final": {"question": "How many words are there on the page titled \"Asclepi\"?", "sql": "SELECT words FROM pages WHERE title = 'Asclepi'", "source_tables": ["pages"]}, "evidence": "page titled \"Asclepi\" refers to title = 'Asclepi' ;"}
{"sample_id": 5775, "db_id": "language_corpus", "final": {"question": "Which of these pages have more words, the page titled \"Afluent\" or \"Asclepi\"?", "sql": "SELECT CASE WHEN ( SELECT words FROM pages WHERE title = 'Asclepi' ) > ( SELECT words FROM pages WHERE title = 'Afluent' ) THEN 'Asclepi' ELSE 'Afluent' END", "source_tables": ["pages"]}, "evidence": "COUNT(words where title = 'Afluent')> COUNT(words where title = 'Asclepi')"}
{"sample_id": 5776, "db_id": "language_corpus", "final": {"question": "What is the occurrence of the word \"nombre\"?", "sql": "SELECT occurrences FROM words WHERE word = 'nombre'", "source_tables": ["words"]}, "evidence": "This is not;"}
{"sample_id": 5777, "db_id": "language_corpus", "final": {"question": "Please list the Catalan words with an occurrence of over 200000.", "sql": "SELECT word FROM words WHERE occurrences > 200000", "source_tables": ["words"]}, "evidence": "occurrence of over 200000 refers to occurrences > 200000;"}
{"sample_id": 5778, "db_id": "language_corpus", "final": {"question": "What is the locale of the language of the page titled \"Asclepi\"?", "sql": "SELECT T2.locale FROM pages AS T1 INNER JOIN langs AS T2 ON T1.lid = T2.lid WHERE T1.title = 'Asclepi'", "source_tables": ["pages", "langs"]}, "evidence": "page titled \"Asclepi\" refers to title = 'Asclepi' ;"}
{"sample_id": 5779, "db_id": "language_corpus", "final": {"question": "How many times did the word \"grec\" occur on the page titled \"\u00c0bac\"?", "sql": "SELECT T2.occurrences FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T3.title = '\u00c0bac' AND T1.word = 'grec'", "source_tables": ["pages_words", "pages", "words"]}, "evidence": "how many times occur refers to occurrences; page titled \"\u00c0bac\" refers to title = '\u00c0bac' ;"}
{"sample_id": 5780, "db_id": "language_corpus", "final": {"question": "Please list the title of the pages on which the word \"grec\" occurred for over 20 times.", "sql": "SELECT T3.title FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'grec' AND T2.occurrences > 20", "source_tables": ["pages_words", "pages", "words"]}, "evidence": "occurred for over 20 times refers to occurrences > 20;"}
{"sample_id": 5781, "db_id": "language_corpus", "final": {"question": "How many words are there on the page that the word \"grec\" has occurred for 52 times?", "sql": "SELECT SUM(T3.words) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'grec' AND T2.occurrences = 52", "source_tables": ["pages_words", "pages", "words"]}, "evidence": "the word \"grec\" refers to word = 'grec'; occurred for 52 times refers to occurrences = 52"}
{"sample_id": 5782, "db_id": "language_corpus", "final": {"question": "What's the occurrence of the biwords pair whose first word is \"\u00e0bac\" and second word is \"xin\u00e8s\"?", "sql": "SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = '\u00e0bac' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'xin\u00e8s' )", "source_tables": ["biwords", "words"]}, "evidence": "\u00e0bac refers to word = '\u00e0bac'; xin\u00e8s refers to word = 'xin\u00e8s'; occurrence refers to occurrences"}
{"sample_id": 5783, "db_id": "language_corpus", "final": {"question": "Which biwords pair has a higher occurrence, \"\u00e0bac-xin\u00e8s\" or \"\u00e0bac-grec\"?", "sql": "SELECT CASE WHEN ( SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = '\u00e0bac' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'xin\u00e8s' ) ) > ( SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = '\u00e0bac' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'grec' ) ) THEN '\u00e0bac-xin\u00e8s' ELSE '\u00e0bac-grec' END AS CALUS FROM words LIMIT 1", "source_tables": ["biwords", "words"]}, "evidence": "higher occurrence is MAX(occurrences); \u00e0bac refers to word = '\u00e0bac'; xin\u00e8s refers to word = 'xin\u00e8s'; grec refers to word = 'grec'"}
{"sample_id": 5784, "db_id": "language_corpus", "final": {"question": "How many more times does the first word in the biwords pair \"\u00e0bac-xin\u00e8s\" occur than the biwords pair itself?", "sql": "SELECT occurrences - ( SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = '\u00e0bac' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'xin\u00e8s' ) ) AS CALUS FROM words WHERE word = '\u00e0bac'", "source_tables": ["biwords", "words"]}, "evidence": "\u00e0bac refers to word = '\u00e0bac'; xin\u00e8s refers to word = 'xin\u00e8s'; How many more times the first word in the biwords occur than the biwords pair itself means SUBTRACT(words.occurrence, biwords.occurrences)"}
{"sample_id": 5785, "db_id": "language_corpus", "final": {"question": "Please list all the biwords pairs with \"\u00e0bac\" as its first word.", "sql": "SELECT T1.word AS W1, T3.word AS W2 FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T1.word = '\u00e0bac'", "source_tables": ["biwords", "words"]}, "evidence": "\u00e0bac refers to word = '\u00e0bac'; first word refers to w1st"}
{"sample_id": 5786, "db_id": "language_corpus", "final": {"question": "What is the total occurrence of the biwords pairs with \"\u00e0bac\" as its first word?", "sql": "SELECT COUNT(T2.w1st) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T1.word = '\u00e0bac'", "source_tables": ["biwords", "words"]}, "evidence": "occurrence refers to occurrences; \u00e0bac refers to word = '\u00e0bac'; first word refers to w1st"}
{"sample_id": 5787, "db_id": "language_corpus", "final": {"question": "How many Wikipedia pages are there on the language of the biwords pair \"\u00e0bac-xin\u00e8s\"?", "sql": "SELECT COUNT(T1.pages) FROM langs AS T1 INNER JOIN biwords AS T2 ON T1.lid = T2.lid WHERE T2.w1st = ( SELECT wid FROM words WHERE word = '\u00e0bac' ) AND T2.w2nd = ( SELECT wid FROM words WHERE word = 'xin\u00e8s' )", "source_tables": ["biwords", "langs", "words"]}, "evidence": "\u00e0bac refers to word = '\u00e0bac'; xin\u00e8s refers to word = 'xin\u00e8s'; Wikipedia pages refer to pages"}
{"sample_id": 5788, "db_id": "language_corpus", "final": {"question": "How much higher in percentage does the word \"grec\" occur on the page titled \"\u00c0bac\" than on the page titled \"Astronomia\"?", "sql": "SELECT CAST((SUM(CASE WHEN T3.title = '\u00c0bac' THEN T2.occurrences END) - SUM(CASE WHEN T3.title = 'Astronomia' THEN T2.occurrences END)) AS REAL) * 100 / SUM(CASE WHEN T3.title = 'Astronomia' THEN T2.occurrences END) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'grec'", "source_tables": ["pages_words", "pages", "words"]}, "evidence": "grec refers to word = 'grec'; \u00c0bac refers to title = '\u00c0bac'; Astronomia refers to title = 'Astronomia'; percentage = DIVIDE(SUBTRACT(occurrences where title = '\u00c0bac' AND word = 'grec', occurrences where title = 'Astronomia' AND word = 'grec'), occurrences where title = 'Astronomia' AND word = 'grec')"}
{"sample_id": 5789, "db_id": "language_corpus", "final": {"question": "How many pages does the Catalan language have in Wikipedia?", "sql": "SELECT pages FROM langs WHERE lang = 'ca'", "source_tables": ["langs"]}, "evidence": "Catalan language refers to lang = 'ca'"}
{"sample_id": 5790, "db_id": "language_corpus", "final": {"question": "Which word has the most repetitions in the Catalan language? Give the ID of the word.", "sql": "SELECT wid FROM langs_words WHERE occurrences = ( SELECT MAX(occurrences) FROM langs_words )", "source_tables": ["langs_words"]}, "evidence": "word with the most repetitions refers to MAX(occurrences); ID of the word refers to wid"}
{"sample_id": 5791, "db_id": "language_corpus", "final": {"question": "What is the word ID for the second word for the biwords pair with most repetitions?", "sql": "SELECT w2nd FROM biwords WHERE occurrences = ( SELECT MAX(occurrences) FROM biwords )", "source_tables": ["biwords"]}, "evidence": "second word refers to w2nd; biwords pair with most repetitions refers to MAX(biwords.occurrences)"}
{"sample_id": 5875, "db_id": "airline", "final": {"question": "How many flights on the 1st of August 2018 were coming from Allentown, Pennsylvania?", "sql": "SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018/8/1' AND ORIGIN = 'ABE'", "source_tables": ["airlines"]}, "evidence": "1st of August 2018 refers to FL_DATE = '2018/8/1'; coming from Allentown, Pennsylvania refers to ORIGIN = 'ABE';"}
{"sample_id": 5876, "db_id": "airline", "final": {"question": "What is the only flight destination for flights from Albany?", "sql": "SELECT DEST FROM Airlines WHERE ORIGIN = 'ABY' GROUP BY DEST", "source_tables": ["airlines"]}, "evidence": "flight destination refers to DEST; from Albany refers to ORIGIN = 'ABY';"}
{"sample_id": 5877, "db_id": "airline", "final": {"question": "How many flights from Dallas to Santa Ana departed on time?", "sql": "SELECT COUNT(*) FROM Airlines WHERE DEST = 'SNA' AND ORIGIN = 'DFW' AND DEP_DELAY = 0", "source_tables": ["airlines"]}, "evidence": "from Dallas refers to ORIGIN = 'DFW'; to Santa Ana refers to DEST = 'SNA'; departed on time refers to DEP_DELAY = 0;"}
{"sample_id": 5878, "db_id": "airline", "final": {"question": "How many flights from Charlotte Douglas International Airport to Austin - Bergstrom International Airport experienced serious reasons that cause flight cancellation?", "sql": "SELECT COUNT(*) FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T1.ORIGIN = T2.Code WHERE T1.ORIGIN = 'CLT' AND T1.DEST = 'AUS' AND T2.Description = 'Charlotte, NC: Charlotte Douglas International' AND T1.CANCELLATION_CODE = 'A'", "source_tables": ["airlines", "airports"]}, "evidence": "from refers to ORIGIN; Charlotte Douglas International Airport refers to Description = 'Charlotte, NC: Charlotte Douglas International'; to refers to DEST; Austin - Bergstrom International Airport refers to Description = 'Austin, TX: Austin - Bergstrom International'; serious reasons refers to CANCELLATION_CODE = 'A';"}
{"sample_id": 5879, "db_id": "airline", "final": {"question": "Which flight carrier operator has the most cancelled flights?", "sql": "SELECT T1.Description FROM 'Air Carriers' AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID ORDER BY T2.CANCELLED DESC LIMIT 1", "source_tables": ["airlines", "air carriers"]}, "evidence": "flight carrier operator refers to OP_CARRIER_AIRLINE_ID; most cancelled flights refers to MAX(COUNT(CANCELLED = 1));"}
{"sample_id": 5880, "db_id": "airline", "final": {"question": "What is the actual departure time of JetBlue Airways with the plane's tail number N903JB to Fort Lauderdale-Hollywood International Airport on the 20th of August 2018?", "sql": "SELECT T1.DEP_TIME FROM Airlines AS T1 INNER JOIN 'Air Carriers' AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code INNER JOIN Airports AS T3 ON T1.DEST = T3.Code WHERE T1.FL_DATE = '2018/8/20' AND T1.TAIL_NUM = 'N903JB' AND T2.Description LIKE '%JetBlue Airways%' AND T3.Description LIKE '%Fort Lauderdale-Hollywood%'", "source_tables": ["airlines", "air carriers", "airports"]}, "evidence": "actual departure time refers to DEP_TIME; JetBlue Airways refers to Description like '%JetBlue Airways%'; tail number refers to TAIL_NUM; TAIL_NUM = 'N903JB'; to refers to DEST; Fort Lauderdale-Hollywood International Airport refers to Description like '%Fort Lauderdale-Hollywood%'; on the 20th of August 2018 refers to FL_DATE = '2018/8/20';"}
{"sample_id": 5881, "db_id": "airline", "final": {"question": "Which flight carrier operator flies from Atlantic City to Fort Lauderdale?", "sql": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN 'Air Carriers' AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.ORIGIN = 'ACY' AND T1.DEST = 'FLL' GROUP BY T2.Description", "source_tables": ["airlines", "air carriers"]}, "evidence": "flight carrier operator refers to OP_CARRIER_AIRLINE_ID; from Atlantic City refers to ORIGIN = 'ACY'; to Fort Lauderdale refers to DEST = 'FLL';"}
{"sample_id": 5882, "db_id": "airline", "final": {"question": "What is the airport description of the airport code A11?", "sql": "SELECT Description FROM Airports WHERE Code = 'A11'", "source_tables": ["airports"]}, "evidence": ""}
{"sample_id": 5883, "db_id": "airline", "final": {"question": "What is the total number of flights that have Oklahoma as their origin?", "sql": "SELECT COUNT(*) AS num FROM Airlines WHERE Origin = 'OKC'", "source_tables": ["airlines"]}, "evidence": "Oklahoma as origin refers to Origin = 'OKC';"}
{"sample_id": 5884, "db_id": "airline", "final": {"question": "How many airports have a code starting with the letter C?", "sql": "SELECT COUNT(*) FROM Airports WHERE Code LIKE 'C%'", "source_tables": ["airports"]}, "evidence": "code starting with the letter C refers to Code like 'C%';"}
{"sample_id": 5885, "db_id": "airline", "final": {"question": "Provide the destinations of flight number 1596.", "sql": "SELECT DEST FROM Airlines WHERE OP_CARRIER_FL_NUM = 1596", "source_tables": ["airlines"]}, "evidence": "destination refers to DEST; flight number refers to OP_CARRIER_FL_NUM; OP_CARRIER_FL_NUM = 1596;"}
{"sample_id": 5886, "db_id": "airline", "final": {"question": "List the description of the airports that have code that ends with number 3?", "sql": "SELECT Description FROM Airports WHERE Code LIKE '%3'", "source_tables": ["airports"]}, "evidence": "code that ends with number 3 refers to Code like '%3';"}
{"sample_id": 5887, "db_id": "airline", "final": {"question": "Give the code of the airport described as Driftwood Bay, AK: Driftwood Bay Airport.", "sql": "SELECT Code FROM Airports WHERE Description = 'Driftwood Bay, AK: Driftwood Bay Airport'", "source_tables": ["airports"]}, "evidence": "Driftwood Bay, AK: Driftwood Bay Airport refers to Description = 'Driftwood Bay, AK: Driftwood Bay Airport';"}
{"sample_id": 5888, "db_id": "airline", "final": {"question": "How many cancelled flights are there?", "sql": "SELECT COUNT(*) FROM Airlines WHERE CANCELLED = 1", "source_tables": ["airlines"]}, "evidence": "cancelled flights refers to CANCELLED = 1;"}
{"sample_id": 5889, "db_id": "airline", "final": {"question": "List the tail number of flights that flew on August 17, 2018.", "sql": "SELECT TAIL_NUM FROM Airlines WHERE FL_DATE = '2018/8/17' GROUP BY TAIL_NUM", "source_tables": ["airlines"]}, "evidence": "tail number refers to TAIL_NUM; on August 17, 2018 refers to FL_DATE = '2018/8/17';"}
{"sample_id": 5890, "db_id": "airline", "final": {"question": "Provide the origin of the flight that has the shortest actual elapsed time.", "sql": "SELECT ORIGIN FROM Airlines ORDER BY ACTUAL_ELAPSED_TIME ASC LIMIT 1", "source_tables": ["airlines"]}, "evidence": "shortest actual elapsed time refers to MIN(ACTUAL_ELAPSED_TIME);"}
{"sample_id": 5891, "db_id": "airline", "final": {"question": "Provide the date and tail number of flight with air carrier \"Ross Aviation Inc.: GWE\".", "sql": "SELECT T1.FL_DATE, T1.TAIL_NUM FROM Airlines AS T1 INNER JOIN 'Air Carriers' AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T2.Description = 'Ross Aviation Inc.: GWE'", "source_tables": ["airlines", "air carriers"]}, "evidence": "date of flight refers to FL_DATE; tail number of flight refers to TAIL_NUM; Ross Aviation Inc.: GWE refers to Description = 'Ross Aviation Inc.: GWE';"}
{"sample_id": 5892, "db_id": "airline", "final": {"question": "List the air carrier description and code of the flight with the shortest arrival time.", "sql": "SELECT T1.Description, T1.Code FROM 'Air Carriers' AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID ORDER BY T2.ARR_TIME ASC LIMIT 1", "source_tables": ["airlines", "air carriers"]}, "evidence": "shortest arrival time refers to MIN(ARR_TIME);"}
{"sample_id": 6030, "db_id": "books", "final": {"question": "Indicate the full name of all customers whose last name begins with the letter K.", "sql": "SELECT first_name, last_name FROM customer WHERE last_name LIKE 'K%'", "source_tables": ["customer"]}, "evidence": "full name refers to first_name, last_name; last name begin with the letter 'K' refers to last_name LIKE 'K%'"}
{"sample_id": 6031, "db_id": "books", "final": {"question": "In which cities are the customers of Costa Rica located?", "sql": "SELECT T1.city FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T2.country_name = 'Costa Rica'", "source_tables": ["country", "address"]}, "evidence": "\"Costa Rica\" is the country_name"}
{"sample_id": 6032, "db_id": "books", "final": {"question": "Which customer addresses are no longer active?", "sql": "SELECT DISTINCT T1.street_name FROM address AS T1 INNER JOIN customer_address AS T2 ON T1.address_id = T2.address_id INNER JOIN address_status AS T3 ON T3.status_id = T2.status_id WHERE T3.address_status = 'Inactive'", "source_tables": ["customer_address", "address_status", "address"]}, "evidence": "no longer active refers to address_status = 'Inactive'; customer address refers to street_number, street_name, city"}
{"sample_id": 6033, "db_id": "books", "final": {"question": "What is the full name of the customers who live in Baiyin city?", "sql": "SELECT T3.first_name, T3.last_name FROM address AS T1 INNER JOIN customer_address AS T2 ON T1.address_id = T2.address_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T1.city = 'Baiyin'", "source_tables": ["customer_address", "customer", "address"]}, "evidence": "full name refers to first_name, last_name; 'Baiyin' is the city"}
{"sample_id": 6034, "db_id": "books", "final": {"question": "What is the email of the customers who place their orders with priority method?", "sql": "SELECT T1.email FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T2.shipping_method_id WHERE T3.method_name = 'Priority'", "source_tables": ["cust_order", "customer", "shipping_method"]}, "evidence": "priority method refers to method_name = 'Priority'"}
{"sample_id": 6035, "db_id": "books", "final": {"question": "On what date did the customers who live at number 460 of their respective streets place their orders?", "sql": "SELECT T1.order_date FROM cust_order AS T1 INNER JOIN address AS T2 ON T1.dest_address_id = T2.address_id WHERE T2.street_number = 460", "source_tables": ["cust_order", "address"]}, "evidence": "live at number 460 refers to street_number = '460'; date the customers placed their orders refers to order_date"}
{"sample_id": 6036, "db_id": "books", "final": {"question": "Identify by their id all the orders that have been cancelled.", "sql": "SELECT T2.order_id FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Cancelled'", "source_tables": ["order_history", "order_status"]}, "evidence": "have been cancelled refers to status_value = 'cancelled'; id refers to order_id"}
{"sample_id": 6037, "db_id": "books", "final": {"question": "What is the status of the orders placed on 04/10/2022?", "sql": "SELECT DISTINCT T1.status_value FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id WHERE T3.order_date LIKE '2022-04-10%'", "source_tables": ["order_history", "order_status", "cust_order"]}, "evidence": "placed on 04/10/2022 refers to SUBSTR(order_date, 1, 10) = '2022-04-10'; status of order refers to status_value"}
{"sample_id": 6038, "db_id": "books", "final": {"question": "What is the highest price at which a customer bought the book 'The Prophet'?", "sql": "SELECT MAX(T2.price) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'The Prophet'", "source_tables": ["order_line", "book"]}, "evidence": "\"The Prophet\" is the title of the book; highest price refers to Max(price)"}
{"sample_id": 6039, "db_id": "books", "final": {"question": "On what dates were books ordered at a price of 16.54?", "sql": "SELECT T1.order_date FROM cust_order AS T1 INNER JOIN order_line AS T2 ON T1.order_id = T2.order_id WHERE T2.price = 16.54", "source_tables": ["cust_order", "order_line"]}, "evidence": "price of 16.54 refers to price = 16.54; dates the book ordered refers to order_date"}
{"sample_id": 6040, "db_id": "books", "final": {"question": "List the titles of all the books that Peter H. Smith wrote.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Peter H. Smith'", "source_tables": ["author", "book_author", "book"]}, "evidence": "\"Peter H.Smit\" is the author_name"}
{"sample_id": 6041, "db_id": "books", "final": {"question": "How many books under 300 pages has HarperCollins Publishers published?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'HarperCollins Publishers' AND T1.num_pages < 300", "source_tables": ["publisher", "book"]}, "evidence": "under 300 pages refers to num_pages < 300; 'HarperCollins Publishers\" is the publisher_name"}
{"sample_id": 6042, "db_id": "books", "final": {"question": "How many books have been published in Japanese?", "sql": "SELECT COUNT(*) FROM book_language AS T1 INNER JOIN book AS T2 ON T1.language_id = T2.language_id WHERE T1.language_name = 'Japanese'", "source_tables": ["book_language", "book"]}, "evidence": "in Japanese refers to language_name = 'Japanese"}
{"sample_id": 6043, "db_id": "books", "final": {"question": "What is the average number of pages in the books written by Jennifer Crusie?", "sql": "SELECT AVG(T1.num_pages) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Jennifer Crusie'", "source_tables": ["author", "book_author", "book"]}, "evidence": "\"Jennifer Crusie\" is the author_name; average number of pages refers to AVG(num_pages)"}
{"sample_id": 6044, "db_id": "books", "final": {"question": "What percentage of the orders placed by Kaleena were shipped by the international method?", "sql": "SELECT CAST(SUM(CASE WHEN T3.method_name = 'International' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T2.shipping_method_id WHERE T1.first_name = 'Kaleena'", "source_tables": ["cust_order", "customer", "shipping_method"]}, "evidence": "shipped by international method refers to method_name = 'International'; percentage = Divide (Sum(method_name = 'International'), Count(method_name)) * 100"}
{"sample_id": 6045, "db_id": "books", "final": {"question": "Provide the full name of the customers who have ordered the book The Sorrows of Young Werther.", "sql": "SELECT T4.first_name, T4.last_name FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T1.title = 'The Sorrows of Young Werther'", "source_tables": ["order_line", "cust_order", "customer", "book"]}, "evidence": "full name refers to first_name, last_name; 'The Sorrows of Young Werther' is the title of the book"}
{"sample_id": 6046, "db_id": "books", "final": {"question": "List every book that Ursola Purdy has ordered.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Ursola' AND T4.last_name = 'Purdy'", "source_tables": ["order_line", "cust_order", "customer", "book"]}, "evidence": "book refers to title"}
{"sample_id": 6047, "db_id": "books", "final": {"question": "Who is the author of the book with the biggest page count?", "sql": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id ORDER BY T1.num_pages DESC LIMIT 1", "source_tables": ["author", "book_author", "book"]}, "evidence": "author refers to author_name, biggest page count refers to Max(num_pages)"}
{"sample_id": 6048, "db_id": "books", "final": {"question": "How many books written by Akira Watanabe are available on Gravity?", "sql": "SELECT COUNT(*) FROM author AS T1 INNER JOIN book_author AS T2 ON T1.author_id = T2.author_id WHERE T1.author_name = 'Akira Watanabe'", "source_tables": ["book_author", "author"]}, "evidence": "\"Akira Watanabe\" is the author_name"}
{"sample_id": 6049, "db_id": "books", "final": {"question": "Provide the full address of Ursola Purdy.", "sql": "SELECT T3.street_number, T3.street_name, T3.city FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id INNER JOIN country AS T4 ON T4.country_id = T3.country_id WHERE T1.first_name = 'Ursola' AND T1.last_name = 'Purdy'", "source_tables": ["country", "customer", "customer_address", "address"]}, "evidence": "full address refers to street_number, street_name, city, country_name"}
{"sample_id": 6050, "db_id": "books", "final": {"question": "Who is the author of the book The Mystery in the Rocky Mountains?", "sql": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T1.title = 'The Mystery in the Rocky Mountains'", "source_tables": ["author", "book_author", "book"]}, "evidence": "author refers to author_name; 'The Mystery in the Rocky Mountains' is the title of the book"}
{"sample_id": 6051, "db_id": "books", "final": {"question": "Identify the publisher of the book Girls' Night In.", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'Girls'' Night In'", "source_tables": ["publisher", "book"]}, "evidence": "\"Girls' Night In\" is the title of the book; publisher is the publisher_name"}
{"sample_id": 6052, "db_id": "books", "final": {"question": "Name the publisher of the oldest book.", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id ORDER BY T1.publication_date ASC LIMIT 1", "source_tables": ["publisher", "book"]}, "evidence": "publisher refers to publisher_name;\u00a0 oldest book refers to Min(publication_date)"}
{"sample_id": 6053, "db_id": "books", "final": {"question": "Identify the cost difference between Priority and Express shipping methods.", "sql": "SELECT SUM(CASE WHEN method_name = 'Priority' THEN cost ELSE 0 END) - SUM(CASE WHEN method_name = 'Express' THEN cost ELSE 0 END) FROM shipping_method", "source_tables": ["shipping_method"]}, "evidence": "\"Priority\" and \"Express\" are both method_name; cost difference = Subtract (Sum(cost where method_name = 'Express'), Sum(cost where method_name 'Priority'))"}
{"sample_id": 6054, "db_id": "books", "final": {"question": "How many orders have been cancelled in 2022?", "sql": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Cancelled' AND STRFTIME('%Y', T2.status_date) = '2022'", "source_tables": ["order_history", "order_status"]}, "evidence": "cancelled refers to status_value = 'Cancelled'; in 2022 refers to SUBSTR(status_date, 1, 4) = '2022'"}
{"sample_id": 6055, "db_id": "books", "final": {"question": "List all the books published by BBC Audiobooks.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'BBC Audiobooks'", "source_tables": ["publisher", "book"]}, "evidence": "\"BBC Audiobooks\" refers to publisher_name; books refers to title"}
{"sample_id": 6056, "db_id": "books", "final": {"question": "How many books were published in 2017?", "sql": "SELECT COUNT(*) FROM book WHERE STRFTIME('%Y', publication_date) = '2017'", "source_tables": ["book"]}, "evidence": "published in 2017 refers to Substr(publication_date,1, 4) = '2017'"}
{"sample_id": 6057, "db_id": "books", "final": {"question": "Provide the International Standard Book Number of the book The Mystery in the Rocky Mountains.", "sql": "SELECT isbn13 FROM book WHERE title = 'The Mystery in the Rocky Mountains'", "source_tables": ["book"]}, "evidence": "International Standard Book Number refers to isbn13; 'The Mystery in the Rocky Mountains' is the title of the book"}
{"sample_id": 6058, "db_id": "books", "final": {"question": "Among all orders updated in 2022, identify the percentage that has been returned.", "sql": "SELECT CAST(SUM(CASE WHEN T1.status_value = 'Returned' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE STRFTIME('%Y', T2.status_date) = '2022'", "source_tables": ["order_history", "order_status"]}, "evidence": "order updated in 2022 refers to SUBSTR(status_date, 1, 4) = '2022'; has been returned refers to status_value = 'Returned'; percentage = Divide (Count(status_value = 'Returned'), Count(status_value)) * 100"}
{"sample_id": 6059, "db_id": "books", "final": {"question": "Among all addresses provided by customers, identify the percentage that are not in use anymore.", "sql": "SELECT CAST(SUM(CASE WHEN T2.address_status = 'Inactive' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customer_address AS T1 INNER JOIN address_status AS T2 ON T2.status_id = T1.status_id", "source_tables": ["address_status", "customer_address"]}, "evidence": "address not in use refers to address_status = 'Inactive'; percentage = Divide (Count(address_status = 'Inactive'), Count(address_status)) * 100"}
{"sample_id": 6060, "db_id": "books", "final": {"question": "How many pages does 'Seaward' have?", "sql": "SELECT num_pages FROM book WHERE title = 'Seaward'", "source_tables": ["book"]}, "evidence": "\"Seaward\" is the title of the book; pages refers to num_pages"}
{"sample_id": 6061, "db_id": "books", "final": {"question": "Who is the author of First Things First?", "sql": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T1.title = 'First Things First'", "source_tables": ["author", "book_author", "book"]}, "evidence": "\"First Things First\" is the title of the book; author refers to author_name"}
{"sample_id": 6062, "db_id": "books", "final": {"question": "List all books authored by Tom Clancy.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Tom Clancy'", "source_tables": ["author", "book_author", "book"]}, "evidence": "\"Tom Clancy\" is the author_name; books refers title"}
{"sample_id": 6063, "db_id": "books", "final": {"question": "Which book by Hirohiko Araki was published on 6/6/2006?", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Hirohiko Araki' AND T1.publication_date = '2006-06-06'", "source_tables": ["author", "book_author", "book"]}, "evidence": "\"Hirohiko Araki\" is the author_name; on 6/6/2006 refers to publication_date = '2006-06-06'; which book refers to title"}
{"sample_id": 6064, "db_id": "books", "final": {"question": "Who is the publisher of Hitchhiker's Guide To The Galaxy: The Filming of the Douglas Adams classic?", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'Hitchhiker''s Guide To The Galaxy: The Filming of the Douglas Adams classic'", "source_tables": ["publisher", "book"]}, "evidence": "\"Hitchhiker's Guide To The Galaxy: The Filming of the Douglas Adams classic\" is the title of the book; publisher refers to publisher_name"}
{"sample_id": 6065, "db_id": "books", "final": {"question": "List all books published by ADV Manga.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'ADV Manga'", "source_tables": ["publisher", "book"]}, "evidence": "\"ADV Manga\" is the publisher_name; books refers to title"}
{"sample_id": 6066, "db_id": "books", "final": {"question": "Write the full name of the customers whose address is at 55 Dorton Pass, Huangqiao.", "sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id WHERE T3.street_number = 55 AND T3.street_name = 'Dorton Pass' AND T3.city = 'Huangqiao'", "source_tables": ["customer", "customer_address", "address"]}, "evidence": "full name refers to first_name, last_name; '55' is the street_number, 'Dorton Pass' is the street_name; 'Huangqiao' is the city"}
{"sample_id": 6067, "db_id": "books", "final": {"question": "Which country is 9 Green Ridge Point, Arendal located at?", "sql": "SELECT T2.country_name FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T1.street_number = 9 AND T1.street_name = 'Green Ridge Point' AND T1.city = 'Arendal'", "source_tables": ["country", "address"]}, "evidence": "\"9\" is the street_number; 'Green Reidge Point' is the street_name; 'Arendal' is the city"}
{"sample_id": 6068, "db_id": "books", "final": {"question": "List 10 addresses located in Poland.", "sql": "SELECT T1.street_number, T1.street_name, T1.city FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T2.country_name = 'Poland' LIMIT 10", "source_tables": ["country", "address"]}, "evidence": "\"Polan\" is the country_name; address refers to street_number, street_name, city"}
{"sample_id": 6193, "db_id": "food_inspection_2", "final": {"question": "Write down the last name of employee who did inspection ID 52238?", "sql": "SELECT T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 52238", "source_tables": ["employee", "inspection"]}, "evidence": ""}
{"sample_id": 6194, "db_id": "food_inspection_2", "final": {"question": "What is the inspection result for inspection done by Thomas Langley?", "sql": "SELECT DISTINCT T2.results FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.first_name = 'Thomas' AND T1.last_name = 'Langley'", "source_tables": ["employee", "inspection"]}, "evidence": "inspection result refers to results"}
{"sample_id": 6195, "db_id": "food_inspection_2", "final": {"question": "List down the address of employees who did inspection dated 11/5/2010.", "sql": "SELECT DISTINCT T1.address FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_date = '2010-11-05'", "source_tables": ["employee", "inspection"]}, "evidence": "dated 11/5/2010 refers to inspection_date = '2010-11-05'"}
{"sample_id": 6196, "db_id": "food_inspection_2", "final": {"question": "List down the phone numbers of employees who did Canvass inspection.", "sql": "SELECT DISTINCT T1.phone FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_type = 'Canvass'", "source_tables": ["employee", "inspection"]}, "evidence": "phone number refers to phone; Canvass inspection refers to inspection_type = 'Canvass'"}
{"sample_id": 6197, "db_id": "food_inspection_2", "final": {"question": "What is the job title of employee who did inspection ID 52269?", "sql": "SELECT T1.title FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 52269", "source_tables": ["employee", "inspection"]}, "evidence": "job title refers to title"}
{"sample_id": 6198, "db_id": "food_inspection_2", "final": {"question": "What are the inspection results for Xando Coffee & Bar / Cosi Sandwich Bar?", "sql": "SELECT DISTINCT T2.results FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'XANDO COFFEE & BAR / COSI SANDWICH BAR'", "source_tables": ["establishment", "inspection"]}, "evidence": "Xando Coffee & Bar / Cosi Sandwich Bar refers to dba_name = 'XANDO COFFEE & BAR / COSI SANDWICH BAR'"}
{"sample_id": 6199, "db_id": "food_inspection_2", "final": {"question": "What type of inspection was done at John Schaller?", "sql": "SELECT DISTINCT T2.inspection_type FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'JOHN SCHALLER'", "source_tables": ["establishment", "inspection"]}, "evidence": "type of inspection refers to inspection_type; John Schaller refers to dba_name = 'JOHN SCHALLER'"}
{"sample_id": 6200, "db_id": "food_inspection_2", "final": {"question": "List down the dba name of restaurants that were inspected due to license.", "sql": "SELECT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.inspection_type = 'License'", "source_tables": ["establishment", "inspection"]}, "evidence": "inspected due to license refers to inspection_type = 'License'"}
{"sample_id": 6201, "db_id": "food_inspection_2", "final": {"question": "How many inspections done in 2010 had serious food safety issue?", "sql": "SELECT COUNT(T2.inspection_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y', T2.inspection_date) = '2010' AND T1.risk_level = 3", "source_tables": ["establishment", "inspection"]}, "evidence": "in 2010 refers to inspection_date like '2010%'; had serious food safety issue refers to risk_level = 3"}
{"sample_id": 6202, "db_id": "food_inspection_2", "final": {"question": "State the name of dbas with verified quality.", "sql": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.results LIKE '%Pass%'", "source_tables": ["establishment", "inspection"]}, "evidence": "name of dba refers to dba_name; with verified quality refers to results = 'Pass' or results = 'Pass w/Conditions'"}
{"sample_id": 6203, "db_id": "food_inspection_2", "final": {"question": "Calculate the total salary for employees who did inspection from ID 52270 to 52272.", "sql": "SELECT SUM(T2.salary) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T1.inspection_id BETWEEN 52270 AND 52272", "source_tables": ["employee", "inspection"]}, "evidence": "inspection from ID 52270 to 52272 refers to inspection_id between 52270 and 52272"}
{"sample_id": 6204, "db_id": "food_inspection_2", "final": {"question": "Calculate the average salary for employees who did inspection on License Re-Inspection.", "sql": "SELECT AVG(T2.salary) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T1.inspection_type = 'License Re-Inspection'", "source_tables": ["employee", "inspection"]}, "evidence": "inspection on License Re-Inspection refers to inspection_type = 'License Re-Inspection'; average salary = avg(salary)"}
{"sample_id": 6205, "db_id": "food_inspection_2", "final": {"question": "Did license number 1222441 pass the inspection and what is the zip code number of it?", "sql": "SELECT DISTINCT T2.results, T1.zip FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.license_no = 1222441", "source_tables": ["establishment", "inspection"]}, "evidence": "license number 1222441 refers to license_no = 1222441; result of the inspection refers to results; zip code number refers to zip"}
{"sample_id": 6206, "db_id": "food_inspection_2", "final": {"question": "When did restaurant John Schaller has its first inspection in 2010?", "sql": "SELECT MIN(T2.inspection_date) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'JOHN SCHALLER' AND strftime('%Y', T2.inspection_date) = '2010'", "source_tables": ["establishment", "inspection"]}, "evidence": "John Schaller refers to dba_name = 'JOHN SCHALLER'; first inspection refers to min(inspection_date); in 2010 refers to inspection_date like '2010%'"}
{"sample_id": 6207, "db_id": "food_inspection_2", "final": {"question": "What is the full name of the employee that inspected establishments with license 1334073?", "sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.license_no = 1334073", "source_tables": ["employee", "inspection"]}, "evidence": "full name refers to first_name, last_name; with license 1334073 refers to license_no = 1334073"}
{"sample_id": 6208, "db_id": "food_inspection_2", "final": {"question": "Which establishments did Joshua Rosa inspect?", "sql": "SELECT DISTINCT T3.dba_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'", "source_tables": ["employee", "inspection", "establishment"]}, "evidence": "establishment name refers to dba_name"}
{"sample_id": 6209, "db_id": "food_inspection_2", "final": {"question": "How many employees have salary greater than 70000 but fail the inspection?", "sql": "SELECT COUNT(DISTINCT T1.employee_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.results = 'Fail' AND T1.salary > 70000", "source_tables": ["employee", "inspection"]}, "evidence": "salary greater than 70000 refers to salary > 70000; fail the inspection refers to results = 'Fail'"}
{"sample_id": 6210, "db_id": "food_inspection_2", "final": {"question": "Name the food businesses that passed the inspection in 2010.", "sql": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y', T2.inspection_date) = '2010' AND T2.results = 'Pass' AND T1.facility_type = 'Liquor'", "source_tables": ["establishment", "inspection"]}, "evidence": "business name refers to dba_name; food business refers to restaurant; pass the inspection refers to results = 'Pass'; in 2010 refers to inspection_date like '2010%'"}
{"sample_id": 6211, "db_id": "food_inspection_2", "final": {"question": "What is the name of the establishment that Joshua Rosa inspected?", "sql": "SELECT DISTINCT T3.dba_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'", "source_tables": ["employee", "inspection", "establishment"]}, "evidence": "name of the establishment refers to dba_name"}
{"sample_id": 6212, "db_id": "food_inspection_2", "final": {"question": "How many taverns failed in July 2010?", "sql": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y-%m', T2.inspection_date) = '2010-07' AND T2.results = 'Fail' AND T1.facility_type = 'Restaurant'", "source_tables": ["establishment", "inspection"]}, "evidence": "tavern refers to facility_type = 'Tavern'; failed refers to results = 'Fail'; in July 2010 refers to inspection_date like '2010-07%'"}
{"sample_id": 6213, "db_id": "food_inspection_2", "final": {"question": "What is the risk level of the establishment that Bob Benson inspected?", "sql": "SELECT DISTINCT T3.risk_level FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T1.first_name = 'Bob' AND T1.last_name = 'Benson'", "source_tables": ["employee", "inspection", "establishment"]}, "evidence": ""}
{"sample_id": 6214, "db_id": "food_inspection_2", "final": {"question": "Which establishments did Bob Benson inspect in 2010 and what was the results?", "sql": "SELECT DISTINCT T3.dba_name, T2.results FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T1.first_name = 'Bob' AND T1.last_name = 'Benson' AND strftime('%Y', T2.inspection_date) = '2010'", "source_tables": ["employee", "inspection", "establishment"]}, "evidence": "establishment name refers to dba_name; in 2010 refers to inspection_date like '2010%'"}
{"sample_id": 6215, "db_id": "food_inspection_2", "final": {"question": "What is the title of the employee that inspected the establishment with license number 1576687?", "sql": "SELECT DISTINCT T1.title FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.license_no = 1576687", "source_tables": ["employee", "inspection"]}, "evidence": "license number 1576687 refers to license_no = 1576687"}
{"sample_id": 6216, "db_id": "food_inspection_2", "final": {"question": "How many inspection points with serious point level that have no fine?", "sql": "SELECT COUNT(DISTINCT T2.point_id) FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.point_level = 'Serious ' AND T2.fine = 0", "source_tables": ["inspection_point", "violation"]}, "evidence": "serious point level refers to point_level = 'Serious '; have no fine refers to fine = 0"}
{"sample_id": 6217, "db_id": "food_inspection_2", "final": {"question": "What is the percentage of restaurants that paid a fine of 250 among all establishments?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.fine = 250 THEN T1.license_no END) AS REAL) * 100 / COUNT(T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T1.facility_type = 'Restaurant'", "source_tables": ["establishment", "inspection", "violation"]}, "evidence": "a fine of 250 refers to fine = 250; percentage = divide(sum(license_no where fine = 250), count(license_no)) * 100%"}
{"sample_id": 6218, "db_id": "food_inspection_2", "final": {"question": "What is the percentage of establishments with a risk level of 1 among all of the establishments that passed the inspection?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.risk_level = 1 THEN T1.license_no END) AS REAL) * 100 / COUNT(T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.results = 'Pass'", "source_tables": ["establishment", "inspection"]}, "evidence": "a risk level of 1 refers to risk_level = 1; pass the inspection refers to results = 'Pass'; percentage = divide(sum(license_no where risk_level = 1), count(license_no)) * 100% where results = 'Pass'"}
{"sample_id": 6219, "db_id": "food_inspection_2", "final": {"question": "Where does the employee named \"Standard Murray\" live?", "sql": "SELECT address, city, state FROM employee WHERE first_name = 'Standard' AND last_name = 'Murray'", "source_tables": ["employee"]}, "evidence": "address refers to address, city, state"}
{"sample_id": 6277, "db_id": "coinmarketcap", "final": {"question": "Please list the names of coins that has been disappeared.", "sql": "SELECT name FROM coins WHERE status = 'extinct'", "source_tables": ["coins"]}, "evidence": "has disappeared refers to status = 'extinct'"}
{"sample_id": 6278, "db_id": "coinmarketcap", "final": {"question": "What's the descripition of BitBar?", "sql": "SELECT description FROM coins WHERE name = 'BitBar'", "source_tables": ["coins"]}, "evidence": ""}
{"sample_id": 6279, "db_id": "coinmarketcap", "final": {"question": "How many coins were added in May 2013? Please list the names of coins.", "sql": "SELECT COUNT(id) num FROM coins WHERE STRFTIME('%Y-%m', date_added) = '2013-05' UNION ALL SELECT name FROM coins WHERE STRFTIME('%Y-%m', date_added) = '2013-05'", "source_tables": ["coins"]}, "evidence": "in May 2013 refers to year(date_added) = 2013 and month(date_added) = 5"}
{"sample_id": 6280, "db_id": "coinmarketcap", "final": {"question": "List the names and symbols of the coins that were added on June 14, 2013.", "sql": "SELECT name, symbol FROM coins WHERE date_added LIKE '2013-06-14%'", "source_tables": ["coins"]}, "evidence": "added on June 14, 2013 refers to date_added like '2013-06-14%'"}
{"sample_id": 6281, "db_id": "coinmarketcap", "final": {"question": "List the names of coins that cannot be traded in 2014.", "sql": "SELECT name FROM coins WHERE date_added LIKE '2014%' AND status = 'untracked'", "source_tables": ["coins"]}, "evidence": "cannot be tracked refers to status = 'untracked'; in 2014 refers to year(date_added) = '2014'"}
{"sample_id": 6282, "db_id": "coinmarketcap", "final": {"question": "Name the coins that have three tags.", "sql": "SELECT name FROM coins WHERE LENGTH(tag_names) - LENGTH(replace(tag_names, ',', '')) = 2", "source_tables": ["coins"]}, "evidence": "have three tags refers to length(tag_names)-length(replace(tag_names,',','')) = 2"}
{"sample_id": 6283, "db_id": "coinmarketcap", "final": {"question": "What is the name of the coin with the highest price?", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.price = ( SELECT MAX(price) FROM historical )", "source_tables": ["historical", "coins"]}, "evidence": "the highest price refers to max(price)"}
{"sample_id": 6284, "db_id": "coinmarketcap", "final": {"question": "Please name the coin that ranked first among the coins traded on April 29, 2013.", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-29' AND T2.cmc_rank = 1", "source_tables": ["historical", "coins"]}, "evidence": "ranked first refers to cmc_rank = 1; on April 29, 2013 refers to date = '2013-04-29'"}
{"sample_id": 6285, "db_id": "coinmarketcap", "final": {"question": "When is the best time to purchase Bitcoin?", "sql": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bitcoin' ORDER BY T2.low LIMIT 1", "source_tables": ["historical", "coins"]}, "evidence": "lowest price refers to low; best time refers to date with the low;"}
{"sample_id": 6520, "db_id": "retail_world", "final": {"question": "What is the category of the product that has the highest number of discontinued products?", "sql": "SELECT T2.CategoryName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.Discontinued = 1 GROUP BY T2.CategoryName ORDER BY COUNT(T1.ProductID) DESC LIMIT 1", "source_tables": ["categories", "products"]}, "evidence": "discontinued products refers to Discontinued = 1; highest number of discontinued products refers to MAX(Discontinued = 1)"}
{"sample_id": 6521, "db_id": "retail_world", "final": {"question": "How many condiments were sold in 1997?", "sql": "SELECT COUNT(T2.ProductID) FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID INNER JOIN 'Order Details' AS T3 ON T2.ProductID = T3.ProductID INNER JOIN Orders AS T4 ON T3.OrderID = T4.OrderID WHERE T1.CategoryName = 'Condiments' AND T1.CategoryID = 2 AND T4.OrderDate LIKE '1997%'", "source_tables": ["categories", "orders", "products", "order details"]}, "evidence": "\"Condiments\" is the CategoryName; in 1997 refers to year(OrderDate) = 1997;"}
{"sample_id": 6522, "db_id": "retail_world", "final": {"question": "Who is the customer who purchased the highest number of products in a single order?", "sql": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN 'Order Details' AS T3 ON T2.OrderID = T3.OrderID GROUP BY T1.CompanyName ORDER BY COUNT(T3.ProductID) DESC LIMIT 1", "source_tables": ["order details", "orders", "customers"]}, "evidence": "highest number of products refers to MAX(COUNT(ProductID))"}
{"sample_id": 6523, "db_id": "retail_world", "final": {"question": "What is the monthly average number of products shipped via Federal Shipping for the year 1996?", "sql": "SELECT CAST(SUM(T1.ShipVia) AS REAL) / 12 FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Federal Shipping' AND T1.ShippedDate LIKE '1996%'", "source_tables": ["shippers", "orders"]}, "evidence": "monthly average number of products refers to DIVIDE(SUM(OrderID), 12); shipped via Federal Shipping refers to CompanyName = 'Federal Shipping'; for the year 1996 refers to year(ShippedDate) = 1996"}
{"sample_id": 6524, "db_id": "retail_world", "final": {"question": "Which products are being supplied by \"G'day, Mate\"? List all of their names.", "sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName LIKE 'G%day, Mate'", "source_tables": ["suppliers", "products"]}, "evidence": "supplied by \"G'day, Mate\" refers to CompanyName = 'G''day, Mate';"}
{"sample_id": 6525, "db_id": "retail_world", "final": {"question": "How many territories are there in the region with the highest number of territories?", "sql": "SELECT COUNT(T2.RegionDescription), T1.TerritoryDescription, COUNT(*) AS num FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID GROUP BY T1.TerritoryDescription ORDER BY num DESC LIMIT 1", "source_tables": ["territories", "region"]}, "evidence": "highest number of territories refers to max(TerritoryID)"}
{"sample_id": 6526, "db_id": "retail_world", "final": {"question": "What is the company name of the supplier who supplies the product with the highest unit price?", "sql": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice = ( SELECT MAX(UnitPrice) FROM Products )", "source_tables": ["suppliers", "products"]}, "evidence": "the highest unit price refers to MAX(UnitPrice);"}
{"sample_id": 6527, "db_id": "retail_world", "final": {"question": "How many female employees are in charge of 3 or more territories?", "sql": "SELECT COUNT(EID) FROM ( SELECT T1.EmployeeID AS EID FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.TitleOfCourtesy IN ('Ms.' OR 'Mrs.') GROUP BY T1.EmployeeID HAVING COUNT(T2.TerritoryID) >= 3 ) T1", "source_tables": ["employeeterritories", "employees"]}, "evidence": "female employees refers to TitleOfCourtesy = 'Mrs.' or TitleOfCourtesy = 'Ms.'; in charge of 3 or more territories refers to TerritoryID > = 3;"}
{"sample_id": 6528, "db_id": "retail_world", "final": {"question": "Who are the top 8 suppliers supplying the products with the highest user satisfaction?", "sql": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID ORDER BY T1.ReorderLevel DESC LIMIT 8", "source_tables": ["suppliers", "products"]}, "evidence": "highest user satisfaction refers to max(ReorderLevel);"}
{"sample_id": 6529, "db_id": "retail_world", "final": {"question": "What is the company name of the customer who made the biggest amount of purchase in a single order before discount?", "sql": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN 'Order Details' AS T3 ON T2.OrderID = T3.OrderID WHERE T3.Discount = 0 GROUP BY T1.CompanyName ORDER BY SUM(T3.UnitPrice * T3.Quantity) DESC LIMIT 1", "source_tables": ["order details", "orders", "customers"]}, "evidence": "biggest amount of purchase in a single order refers to MAX(MULTIPLY(UnitPrice, Quantity)); before discount refers to Discount = 0"}
{"sample_id": 6530, "db_id": "retail_world", "final": {"question": "What was the total amount of sales handled by Nancy Davolio in December 1996, excluding discounts?", "sql": "SELECT SUM(T3.UnitPrice * T3.Quantity) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN 'Order Details' AS T3 ON T2.OrderID = T3.OrderID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio' AND T2.OrderDate LIKE '1996-12%' AND T3.Discount = 0", "source_tables": ["employees", "orders", "order details"]}, "evidence": "in December 1996 refers to year(OrderDate) = 1996 AND month(OrderDate) = 12; excluding discounts refers to Discount = 0; total amount of sales refers to MULTIPLY((UnitPrice, Quantity))"}
{"sample_id": 6531, "db_id": "retail_world", "final": {"question": "What is the total amount of sales made in the year 1997?", "sql": "SELECT SUM(T2.UnitPrice * T2.Quantity * (1 - T2.Discount)) FROM Orders AS T1 INNER JOIN 'Order Details' AS T2 ON T1.OrderID = T2.OrderID WHERE T1.OrderDate LIKE '1997%'", "source_tables": ["orders", "order details"]}, "evidence": "year 1997 refers to year(OrderDate) = 1997; total amount of sales refers to (UnitPrice * Quantity)"}
{"sample_id": 6532, "db_id": "retail_world", "final": {"question": "What is the average annual amount of shipped sales from 1997 to 1998?", "sql": "SELECT SUM(T2.UnitPrice * T2.Quantity * (1 - T2.Discount)) / 3 FROM Orders AS T1 INNER JOIN 'Order Details' AS T2 ON T1.OrderID = T2.OrderID WHERE T1.ShippedDate BETWEEN '1996-01-01 00:00:00' AND '1998-12-31 23:59:59'", "source_tables": ["orders", "order details"]}, "evidence": "from 1997 to 1998 refers to ShippedDate > '1996-1-1' and ShippedDate < '1998-12-31'; average annual amount refers to SUM(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1, Discount)))"}
{"sample_id": 6533, "db_id": "retail_world", "final": {"question": "How many orders were shipped to Venezuela in 1996?", "sql": "SELECT COUNT(OrderID) FROM Orders WHERE ShipCountry = 'Venezuela' AND STRFTIME('%Y', ShippedDate) = '1996'", "source_tables": ["orders"]}, "evidence": "shipped to Venezuela refers to ShipCountry = 'Venezuela'; in 1996 refers to year(ShippedDate) = '1996';"}
{"sample_id": 6534, "db_id": "retail_world", "final": {"question": "What are the ID and description of the condiments category?", "sql": "SELECT CategoryID, Description FROM Categories WHERE CategoryName = 'Condiments'", "source_tables": ["categories"]}, "evidence": "condiments category refers to CategoryName = 'Condiments'; the ID refers to CategoryID"}
{"sample_id": 6535, "db_id": "retail_world", "final": {"question": "List the order IDs, product IDs and unit price of orders which total payment is greater than 15000.", "sql": "SELECT ProductID, OrderID, UnitPrice FROM 'Order Details' WHERE UnitPrice * Quantity * (1 - Discount) > 15000", "source_tables": ["order details"]}, "evidence": "total payment is greater than 15000 refers to MULTIPLY((Quantity * UnitPrice * (1 - Discount))) > 15000\n"}
{"sample_id": 6536, "db_id": "retail_world", "final": {"question": "Provide the territory IDs under employee ID of 7.", "sql": "SELECT TerritoryID FROM EmployeeTerritories WHERE EmployeeID = 7", "source_tables": ["employeeterritories"]}, "evidence": ""}
{"sample_id": 6537, "db_id": "retail_world", "final": {"question": "Provide the supplier company name in Sydney and its homepage address if available.", "sql": "SELECT CompanyName, HomePage FROM Suppliers WHERE City = 'Sydney'", "source_tables": ["suppliers"]}, "evidence": "in Sydney refers to City = 'Sydney';"}
{"sample_id": 6538, "db_id": "retail_world", "final": {"question": "Write down the full name of Vie President of Sales and his age when he was hired.", "sql": "SELECT FirstName, LastName , TIMESTAMPDIFF(YEAR, BirthDate, HireDate) AS AGE FROM Employees WHERE Title = 'Vice President, Sales'", "source_tables": ["employees"]}, "evidence": "Vice President of Sales refers to Title = 'Vice President, Sales';"}
{"sample_id": 6539, "db_id": "retail_world", "final": {"question": "List the supplier company names located in Germany.", "sql": "SELECT CompanyName FROM Suppliers WHERE Country = 'Germany'", "source_tables": ["suppliers"]}, "evidence": "located in Germany refers to Country = 'Germany';"}
{"sample_id": 6540, "db_id": "retail_world", "final": {"question": "List the employees' full names and ages in 2022 who lived in London.", "sql": "SELECT TitleOfCourtesy, FirstName, LastName , TIMESTAMPDIFF(YEAR, BirthDate, NOW()) AS ages FROM Employees WHERE City = 'London'", "source_tables": ["employees"]}, "evidence": "in London refers to City = 'London'; ages in 2022 refers to SUBTRACT(2022, year(BirthDate)); full names refers to FirstName, LastName"}
{"sample_id": 6541, "db_id": "retail_world", "final": {"question": "List down the customer company names, addresses, phones and faxes which are located in London.", "sql": "SELECT CompanyName, Address, Phone, Fax FROM Customers WHERE City = 'London'", "source_tables": ["customers"]}, "evidence": "in London refers to City = 'London'"}
{"sample_id": 6542, "db_id": "retail_world", "final": {"question": "List the full name of employees and titles who have to report to Sales Manager.", "sql": "SELECT FirstName, LastName, Title FROM Employees WHERE ReportsTo = ( SELECT EmployeeID FROM Employees WHERE Title = 'Sales Manager' )", "source_tables": ["employees"]}, "evidence": "Sales Manager refers to Title = 'Sales Manager'; full name refers to FirstName, LastName"}
{"sample_id": 6543, "db_id": "retail_world", "final": {"question": "List all the customer company names and cities located in Canada.", "sql": "SELECT CompanyName, City FROM Customers WHERE Country = 'Canada'", "source_tables": ["customers"]}, "evidence": "located in Canada refers to Country = 'Canada'"}
{"sample_id": 6544, "db_id": "retail_world", "final": {"question": "Find the total production amount and product names which had \"10 - 500 g pkgs.\" as quantity per unit.", "sql": "SELECT UnitsInStock + UnitsOnOrder, ProductName FROM Products WHERE QuantityPerUnit = '10 - 500 g pkgs.'", "source_tables": ["products"]}, "evidence": "total production amount refers to ADD(UnitsInstock, UnitsOnOrder)"}
{"sample_id": 6545, "db_id": "retail_world", "final": {"question": "List all the product names and categories of the highest reorder level.", "sql": "SELECT T2.ProductName, T1.CategoryName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID ORDER BY T2.ReorderLevel DESC LIMIT 1", "source_tables": ["categories", "products"]}, "evidence": "Highest reorder level refers to Max(ReorderLevel)"}
{"sample_id": 6546, "db_id": "retail_world", "final": {"question": "Describe the supplier companies, cities and products which total production amount is more than 120.", "sql": "SELECT T2.CompanyName, T2.City, T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitsInStock + UnitsOnOrder > 120", "source_tables": ["suppliers", "products"]}, "evidence": "total production amount is more than 120 refers to ADD(UnitsInstock, UnitsOnOrder) > 120"}
{"sample_id": 6547, "db_id": "retail_world", "final": {"question": "Provide the contact person name, title and supplied products by \"Escargots Nouveaux\" company.", "sql": "SELECT T2.ContactName, T2.ContactTitle, T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Escargots Nouveaux'", "source_tables": ["suppliers", "products"]}, "evidence": "\"Escargots Nouveaux\" company refers to CompanyName = 'Escargots Nouveaux';"}
{"sample_id": 6548, "db_id": "retail_world", "final": {"question": "List the territory IDs, description and region description under the in-charge of Mrs. Margaret Peacock.", "sql": "SELECT T3.TerritoryID, T3.TerritoryDescription, T4.RegionDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T1.TitleOfCourtesy = 'Mrs.' AND T1.LastName = 'Peacock' AND T1.FirstName = 'Margaret'", "source_tables": ["employeeterritories", "employees", "territories", "region"]}, "evidence": ""}
{"sample_id": 6549, "db_id": "retail_world", "final": {"question": "What were the products supplied by the company in Spain?", "sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Spain'", "source_tables": ["suppliers", "products"]}, "evidence": "company in Spain refers to Country = 'Spain'; product supplied refers to ProductName"}
{"sample_id": 6550, "db_id": "retail_world", "final": {"question": "What products were ordered by the customer ID \"WILMK\" which were required on 3/26/1998?", "sql": "SELECT T3.ProductName FROM Orders AS T1 INNER JOIN 'Order Details' AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.RequiredDate LIKE '1998-03-26%' AND T1.CustomerID = 'WILMK'", "source_tables": ["orders", "products", "order details"]}, "evidence": "required on 3/26/1998 refers to RequiredDate = '1998-03-26 00:00:00'; products ordered refers to ProductName"}
{"sample_id": 6551, "db_id": "retail_world", "final": {"question": "Provide the list of product IDs and names under the meat/poultry category.", "sql": "SELECT T2.ProductName, T1.CategoryName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.ReorderLevel = ( SELECT MAX(ReorderLevel) FROM Products )", "source_tables": ["categories", "products"]}, "evidence": "meat/poultry category refers to CategoryName = 'Meat/Poultry';"}
{"sample_id": 6552, "db_id": "retail_world", "final": {"question": "How many orders were made by the customers in Ireland.", "sql": "SELECT COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Country = 'Ireland'", "source_tables": ["orders", "customers"]}, "evidence": "in Ireland refers to Country = 'Ireland';"}
{"sample_id": 6553, "db_id": "retail_world", "final": {"question": "Provide the products list which were ordered in 1996 by the company in Norway.", "sql": "SELECT T4.ProductName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN 'Order Details' AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID WHERE T1.Country = 'Norway' AND STRFTIME('%Y', T2.OrderDate) = '1996'", "source_tables": ["order details", "orders", "products", "customers"]}, "evidence": "ordered in 1996 refers to year(OrderDate) = 1996; in Norway refers to Country = 'Norway'"}
{"sample_id": 6554, "db_id": "retail_world", "final": {"question": "Among orders shipping to Brazil, mention the supplier company of the order which was done by employee Anne Dodsworth in December, 1996 .", "sql": "SELECT T5.CompanyName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN 'Order Details' AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID INNER JOIN Suppliers AS T5 ON T4.SupplierID = T5.SupplierID WHERE T1.FirstName = 'Anne' AND T1.LastName = 'Dodsworth' AND T2.ShipCountry = 'Brazil' AND T2.OrderDate LIKE '1996-12%'", "source_tables": ["employees", "orders", "products", "suppliers", "order details"]}, "evidence": "shipping to Brazil refers to ShipCountry = 'Brazil'; in December, 1996\u00a0 refers to year(OrderDate) = 1996 and month(OrderDate) = 12;"}
{"sample_id": 6555, "db_id": "retail_world", "final": {"question": "Mention the oldest empoyee's full name, title, salary and number of orders which were shipped to USA by him.", "sql": "SELECT T1.FirstName, T1.LastName, T1.Title, T1.Salary , COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE ShipCountry = 'USA' GROUP BY T1.FirstName, T1.LastName, T1.Title, T1.Salary, T1.BirthDate ORDER BY T1.BirthDate LIMIT 1", "source_tables": ["employees", "orders"]}, "evidence": "full name refers to FirstName, LastName; shipped to USA refers to ShipCountry = 'USA'"}
{"sample_id": 6556, "db_id": "retail_world", "final": {"question": "List down the territory IDs and descriptions existed in Southern region.", "sql": "SELECT T1.TerritoryID, T1.TerritoryDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Southern'", "source_tables": ["territories", "region"]}, "evidence": "in Southern region refers to RegionDescription = 'Southern';"}
{"sample_id": 6557, "db_id": "retail_world", "final": {"question": "Calculate the average payment per product under confections category.", "sql": "SELECT SUM(T2.UnitPrice * T2.Quantity * (1 - T2.Discount)) / COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Categories AS T3 ON T1.CategoryID = T3.CategoryID WHERE T3.CategoryName = 'Confections'", "source_tables": ["categories", "products", "order details"]}, "evidence": "under confections category refers to CategoryName = 'Confections';"}
{"sample_id": 6558, "db_id": "retail_world", "final": {"question": "Find the total payment of the orders by customers from San Francisco.", "sql": "SELECT SUM(T3.UnitPrice * T3.Quantity * (1 - T3.Discount)) AS TOTALPAYMENT FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN 'Order Details' AS T3 ON T2.OrderID = T3.OrderID WHERE T1.City = 'San Francisco'", "source_tables": ["order details", "orders", "customers"]}, "evidence": "from San Francisco refers to City = 'San Francisco'; total payment refers to sum(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1, Discount)))"}
{"sample_id": 6559, "db_id": "retail_world", "final": {"question": "Calculate the total production for each product which were supplied from Japan", "sql": "SELECT SUM(T1.UnitsInStock + T1.UnitsOnOrder) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Japan'", "source_tables": ["suppliers", "products"]}, "evidence": "from Japan refers to Country = 'Japan'; total production refers to ADD(UnitsInstock, UnitsOnOrder)"}
{"sample_id": 6560, "db_id": "retail_world", "final": {"question": "Among the supplied products from Australia, describe the discontinued products and the category.", "sql": "SELECT T2.ProductName, T3.CategoryName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID WHERE T1.Country = 'Australia' AND T2.Discontinued = 1", "source_tables": ["categories", "suppliers", "products"]}, "evidence": "from Australia refers to Country = 'Australia'; discontinued products refers to Discontinued = 1;"}
{"sample_id": 6561, "db_id": "retail_world", "final": {"question": "Mention the supplier country of Ipoh Coffee and the order ID which had maximum in total payment.", "sql": "SELECT T3.Country, T1.OrderID FROM 'Order Details' AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Suppliers AS T3 ON T2.SupplierID = T3.SupplierID WHERE T2.ProductName = 'Ipoh Coffee' ORDER BY T1.UnitPrice * T1.Quantity * (1 - T1.Discount) DESC LIMIT 1", "source_tables": ["suppliers", "products", "order details"]}, "evidence": "Ipoh Coffee refers to ProductName = 'Ipoh Coffee'; maximum in total payment refers to MAX(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1, Discount)))"}
{"sample_id": 6562, "db_id": "retail_world", "final": {"question": "Provide the list of products ordered by ID 10979 and calculate its total payment.", "sql": "SELECT T1.ProductName , SUM(T2.UnitPrice * T2.Quantity * (1 - T2.Discount)) FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10979 GROUP BY T1.ProductName", "source_tables": ["products", "order details"]}, "evidence": "ordered by ID 10979 refers to OrderID = '10979'; total payment refers to SUM(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1, Discount)))"}
{"sample_id": 6563, "db_id": "retail_world", "final": {"question": "Among the products under grains/cereals category, provide the contact person and title of the supplier with one digit ID.", "sql": "SELECT DISTINCT T1.ContactName, T1.ContactTitle FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID WHERE T3.CategoryName = 'Grains/Cereals' AND T1.SupplierID BETWEEN 1 AND 10 LIMIT 1", "source_tables": ["categories", "suppliers", "products"]}, "evidence": "grains/cereals category refers to CategoryName = 'Grains/Cereals'; supplier with one digit ID refers to SupplierID between 1 and 10;"}
{"sample_id": 6564, "db_id": "retail_world", "final": {"question": "Provide Speedy Express's phone number and number of shipped orders on 30th January, 1998.", "sql": "SELECT T2.Phone, COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Speedy Express' AND T1.ShippedDate LIKE '1998-01-30%' GROUP BY T2.Phone", "source_tables": ["shippers", "orders"]}, "evidence": "Speedy Express's refers to CompanyName = 'Speedy Express'; orders on 30th January, 1998 refers to ShippedDate = '1998-01-30 00:00:00'"}
{"sample_id": 6565, "db_id": "retail_world", "final": {"question": "Describe the ordered products which were the most overdue from required date.", "sql": "SELECT DISTINCT T3.ProductName FROM Orders AS T1 INNER JOIN 'Order Details' AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE DATEDIFF(T1.ShippedDate, T1.RequiredDate) < 0", "source_tables": ["orders", "products", "order details"]}, "evidence": "the most overdue from required date refers to MIN(SUBTRACT(ShippedDate, RequiredDate) < 0)"}
{"sample_id": 6566, "db_id": "retail_world", "final": {"question": "Under the in-charge of inside sales coordinator, provide the product lists which were shipped to Mexico in 1996.", "sql": "SELECT T4.ProductName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN 'Order Details' AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID WHERE T1.Title = 'Inside Sales Coordinator' AND T2.ShippedDate LIKE '1996%' AND T2.ShipCountry = 'Mexico'", "source_tables": ["employees", "orders", "products", "order details"]}, "evidence": "shipped to Mexico refers to ShipCountry = 'Mexico'; in 1996 refers to year(ShippedDate) = 1996; charge of inside sales coordinator refers to Title = 'Inside Sales Coordinator'"}
{"sample_id": 6567, "db_id": "retail_world", "final": {"question": "Identify the name of the most popular dairy product in terms of reorder quantity.", "sql": "SELECT T2.ProductName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.CategoryName = 'Dairy Products' AND T2.ReorderLevel = ( SELECT MAX(ReorderLevel) FROM Products )", "source_tables": ["categories", "products"]}, "evidence": "'dairy product' refers to CategoryName; most popular reorder quantity refers to MAX(ReorderLevel)"}
{"sample_id": 6568, "db_id": "retail_world", "final": {"question": "Calculate the production volume of the dairy product 'Mascarpone Fabioli'.", "sql": "SELECT SUM(UnitsInStock + UnitsOnOrder) FROM Products WHERE ProductName = 'Mascarpone Fabioli'", "source_tables": ["products"]}, "evidence": "'Mascarpone Fabioli' is a ProductName; calculation = SUM(UnitsInStock, UnitsOnOrder)"}
{"sample_id": 6569, "db_id": "retail_world", "final": {"question": "Identify the name and product category for the most expensive and the least expensive products.", "sql": "SELECT T2.ProductName, T1.CategoryName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.UnitPrice IN (( SELECT MIN(UnitPrice) FROM Products ), ( SELECT MAX(UnitPrice) FROM Products ))", "source_tables": ["categories", "products"]}, "evidence": "name of product refers to ProductName; category of product refers to CategoryName; the most expensive products refers to MAX(UnitPrice); the least expensive products refers to MIN(UnitPrice);"}
{"sample_id": 6570, "db_id": "retail_world", "final": {"question": "Identify the customer, which placed the largest order in terms of value.", "sql": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN 'Order Details' AS T3 ON T2.OrderID = T3.OrderID GROUP BY T2.CustomerID ORDER BY SUM(T3.UnitPrice * T3.Quantity * (1 - T3.Discount)) DESC LIMIT 1", "source_tables": ["order details", "orders", "customers"]}, "evidence": "value refers to SUM(UnitPrice * Quantity * SUBTRACT(1, Discount)); the largest order in value refers to MAX(value)"}
{"sample_id": 6571, "db_id": "retail_world", "final": {"question": "Identify the number of employees in Northern sales region.", "sql": "SELECT COUNT(T2.EmployeeID) FROM Territories AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.TerritoryID = T2.TerritoryID INNER JOIN Region AS T3 ON T1.RegionID = T3.RegionID WHERE T3.RegionDescription = 'Northern'", "source_tables": ["territories", "employeeterritories", "region"]}, "evidence": "Northern sales region refers to RegionDescription = 'Northern'"}
{"sample_id": 6572, "db_id": "retail_world", "final": {"question": "What is the average value of the sales order?", "sql": "SELECT SUM(UnitPrice * Quantity * (1 - Discount)) / COUNT(OrderID) FROM 'Order Details'", "source_tables": ["order details"]}, "evidence": "calculation = DIVIDE(SUM(UnitPrice * Quantity * SUBTRACT(1, Discount)), COUNT(OrderID))"}
{"sample_id": 6573, "db_id": "retail_world", "final": {"question": "Find the percentage of discontinued products in Northwind's portfolio of products.", "sql": "SELECT CAST(COUNT(CASE WHEN Discontinued = 1 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(ProductID) FROM Products", "source_tables": ["products"]}, "evidence": "discontinued products refers to Discontinued = 1; calculation = DIVIDE(SUM(Discontinued = 1), COUNT(ProductID)) * 100"}
{"sample_id": 6574, "db_id": "retail_world", "final": {"question": "Provide the full name of the employee who processed the sales order with ID 10274.", "sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10274", "source_tables": ["employees", "orders"]}, "evidence": "full name refers to FirstName, LastName; sales order with ID 10274 refers to OrderID = 10274"}
{"sample_id": 6575, "db_id": "retail_world", "final": {"question": "Calculate the total number of orders placed by the company 'GROSELLA-Restaurante'.", "sql": "SELECT COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CompanyName = 'GROSELLA-Restaurante'", "source_tables": ["orders", "customers"]}, "evidence": "'GROSELLA-Restaurante' refers to CompanyName;"}
{"sample_id": 6576, "db_id": "retail_world", "final": {"question": "Name products and their quantity ordered by the company 'GROSELLA-Restaurante' in the sales order that was processed by Nancy Davolio.", "sql": "SELECT T4.ProductName, T3.Quantity FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN 'Order Details' AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID INNER JOIN Customers AS T5 ON T2.CustomerID = T5.CustomerID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio' AND T5.CompanyName = 'GROSELLA-Restaurante'", "source_tables": ["employees", "orders", "order details", "products", "customers"]}, "evidence": "name products refers to ProductName; 'GROSELLA-Restaurante' refers to CompanyName; 'Nancy Davolio' is the full name of an employee; full name refers to FirstName, LastName;"}
{"sample_id": 6577, "db_id": "retail_world", "final": {"question": "Identify the total number of orders placed by the customer 'Laughing Bacchus Wine Cellars' and it's average value.", "sql": "SELECT COUNT(T2.OrderID) , SUM(T3.UnitPrice * T3.Quantity * (1 - T3.Discount)) / COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN 'Order Details' AS T3 ON T2.OrderID = T3.OrderID WHERE T1.CompanyName = 'Laughing Bacchus Wine Cellars'", "source_tables": ["order details", "orders", "customers"]}, "evidence": "'Laughing Bacchus Wine Cellars' refers to CompanyName; calculation = DIVIDE(SUM(UnitPrice * Quantity * SUBTRACT(1, Discount)), COUNT(OrderID))"}
{"sample_id": 6578, "db_id": "retail_world", "final": {"question": "How many boxes of 'Pavlova' did Northwind sell?", "sql": "SELECT COUNT(T2.Quantity) FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName = 'Pavlova'", "source_tables": ["products", "order details"]}, "evidence": "'Pavlova' is a ProductName"}
{"sample_id": 6579, "db_id": "retail_world", "final": {"question": "What is the salary range for sales representative in Northwind?", "sql": "SELECT ( SELECT MIN(Salary) FROM Employees WHERE Title = 'Sales Representative' ) AS MIN , ( SELECT MAX(Salary) FROM Employees WHERE Title = 'Sales Representative' ) AS MAX", "source_tables": ["employees"]}, "evidence": "salary range is BETWEEN max(Salary) AND min(Salary); sales representative is a title"}
{"sample_id": 6580, "db_id": "retail_world", "final": {"question": "How many suppliers does Northwind have in USA?", "sql": "SELECT COUNT(SupplierID) FROM Suppliers WHERE Country = 'USA'", "source_tables": ["suppliers"]}, "evidence": "'USA' is a country; supplier refers to CompanyName"}
{"sample_id": 6581, "db_id": "retail_world", "final": {"question": "What products are no longer sold by Northwind?", "sql": "SELECT ProductName FROM Products WHERE Discontinued = 1", "source_tables": ["products"]}, "evidence": "no longer sold refers to Discontinued = 1; products refers to ProductName"}
{"sample_id": 6582, "db_id": "retail_world", "final": {"question": "Who is the Sales Agent for the company 'Eastern Connection'?", "sql": "SELECT ContactName FROM Customers WHERE CompanyName = 'Eastern Connection' AND ContactTitle = 'Sales Agent'", "source_tables": ["customers"]}, "evidence": "'Eastern Connection' is a CompanyName; 'Sales Agent' is a ContactTitle"}
{"sample_id": 6583, "db_id": "retail_world", "final": {"question": "How many companies do ship Northwind's orders?", "sql": "SELECT COUNT(ShipperID) FROM Shippers", "source_tables": ["shippers"]}, "evidence": "companies refers to ShipperID"}
{"sample_id": 6584, "db_id": "retail_world", "final": {"question": "Identify the total number of orders processed by Northwind employee named Andrew Fuller. What percent of those orders was shipped to Austria?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.ShipCountry = 'Austria' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Andrew' AND T1.LastName = 'Fuller'", "source_tables": ["employees", "orders"]}, "evidence": "'Andrew Fuller' is the full name of an employee; full name refers to FistName, LastName; Austria refers to ShipCountry; calculation = DIVIDE(SUM(ShipCountry = 'Austria'), COUNT(OrderID)) * 100"}
{"sample_id": 6585, "db_id": "retail_world", "final": {"question": "Indicate category name of soft drinks, coffees, teas, beers, and ales in description list.", "sql": "SELECT CategoryName FROM Categories WHERE Description = 'Soft drinks, coffees, teas, beers, and ales'", "source_tables": ["categories"]}, "evidence": "Soft drinks, coffees, teas, beers, and ales' is Description of CategoryName"}
{"sample_id": 6586, "db_id": "retail_world", "final": {"question": "List the phone number of company named Around the Horn.", "sql": "SELECT Phone FROM Customers WHERE CompanyName = 'Around the Horn'", "source_tables": ["customers"]}, "evidence": "phone number refers to Phone; 'Around the Horn' is a CompanyName"}
{"sample_id": 6587, "db_id": "retail_world", "final": {"question": "Indicate the fax of the company Blondesddsl pre et fils in Strasbourg city.", "sql": "SELECT Fax FROM Customers WHERE CompanyName = 'Blondesddsl pre et fils' AND City = 'Strasbourg'", "source_tables": ["customers"]}, "evidence": "'Blondesddsl pre et fils' is a CompanyName"}
{"sample_id": 6588, "db_id": "retail_world", "final": {"question": "How many companies are there in the city of London?", "sql": "SELECT COUNT(CompanyName) FROM Customers WHERE City = 'London'", "source_tables": ["customers"]}, "evidence": "companies refers to CompanyName;"}
{"sample_id": 6589, "db_id": "retail_world", "final": {"question": "Indicate the address of the company Eastern Connection whose contact name is Ann Devon.", "sql": "SELECT Address FROM Customers WHERE CompanyName = 'Eastern Connection' AND ContactName = 'Ann Devon'", "source_tables": ["customers"]}, "evidence": "'Eastern Connection' is a CompanyName; 'Ann Devon' is the full name of an employee; full name refers to FirstName, LastName"}
{"sample_id": 6590, "db_id": "retail_world", "final": {"question": "Indicate which company is located in France?", "sql": "SELECT CompanyName FROM Customers WHERE Country = 'France'", "source_tables": ["customers"]}, "evidence": "company refers to CompanyName; France is a country"}
{"sample_id": 6591, "db_id": "retail_world", "final": {"question": "How many product names does the supplier Exotic Liquids have?", "sql": "SELECT COUNT(T1.ProductName) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Exotic Liquids'", "source_tables": ["suppliers", "products"]}, "evidence": "'Exotic Liquids' is a CompanyName"}
{"sample_id": 6592, "db_id": "retail_world", "final": {"question": "What is the name of the company that has the product with the highest unit price?", "sql": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice = ( SELECT MAX(UnitPrice) FROM Products )", "source_tables": ["suppliers", "products"]}, "evidence": "name of the company refers to CompanyName; the highest unit price refers to MAX(UnitPrice)"}
{"sample_id": 6593, "db_id": "retail_world", "final": {"question": "Which company name in London city has the most stocked products?", "sql": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.City = 'London' ORDER BY T1.UnitsInStock DESC LIMIT 1", "source_tables": ["suppliers", "products"]}, "evidence": "the most stocked products refers to MAX(UnitsInStock)"}
{"sample_id": 6817, "db_id": "retails", "final": {"question": "What is the delivery time and the clerk of order number 6?", "sql": "SELECT JULIANDAY(T2.l_receiptdate) - JULIANDAY(T2.l_commitdate), T1.o_clerk FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderkey = 6", "source_tables": ["lineitem", "orders"]}, "evidence": "delivery time = subtract(l_receiptdate, l_commitdate); clerk refers to o_clerk; order number 6 refers to o_orderkey = 6"}
{"sample_id": 6818, "db_id": "retails", "final": {"question": "How many Japanese suppliers have their accounts in debt?", "sql": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 AND T2.n_name = 'JAPAN'", "source_tables": ["supplier", "nation"]}, "evidence": "Japanese refers to n_name = 'Japan'; have accounts in debt refers to s_acctbal < 0"}
{"sample_id": 6819, "db_id": "retails", "final": {"question": "Which customer is the most in debt?", "sql": "SELECT c_name FROM customer WHERE c_acctbal = ( SELECT MIN(c_acctbal) FROM customer )", "source_tables": ["customer"]}, "evidence": "customer refers to c_name; the most in debt refers to max(c_acctbal)"}
{"sample_id": 6820, "db_id": "retails", "final": {"question": "List all the dates of the urgent orders.", "sql": "SELECT o_orderdate FROM orders WHERE o_orderpriority = '1-URGENT'", "source_tables": ["orders"]}, "evidence": "date refers to o_orderdate; urgent order refers to o_orderpriority = '1-URGENT'"}
{"sample_id": 6821, "db_id": "retails", "final": {"question": "How many of the items are instructed to be delivered in person?", "sql": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_shipinstruct = 'DELIVER IN PERSON'", "source_tables": ["lineitem"]}, "evidence": "instructed to be delivered in person refers to l_shipinstruct = 'DELIVER IN PERSON'"}
{"sample_id": 6822, "db_id": "retails", "final": {"question": "What is the largest supplier's account balance?", "sql": "SELECT MAX(s_acctbal) FROM supplier", "source_tables": ["supplier"]}, "evidence": "the largest supplier's account balance refers to max(s_acctbal)"}
{"sample_id": 6823, "db_id": "retails", "final": {"question": "How many part supplies are close to being out of stock?", "sql": "SELECT COUNT(ps_suppkey) FROM partsupp WHERE ps_availqty < 10", "source_tables": ["partsupp"]}, "evidence": "close to being out of stock refers to ps_availqty < 10"}
{"sample_id": 6824, "db_id": "retails", "final": {"question": "List all the nations in Europe.", "sql": "SELECT T2.n_name FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey WHERE T1.r_name = 'EUROPE'", "source_tables": ["nation", "region"]}, "evidence": "nation refers to n_name; Europe refers to r_name = 'EUROPE'"}
{"sample_id": 6825, "db_id": "retails", "final": {"question": "What is the supply cost for the part \"violet olive rose ivory sandy\"?", "sql": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_name = 'violet olive rose ivory sandy'", "source_tables": ["part", "partsupp"]}, "evidence": "supply cost refers to ps_supplycost; part \"violet olive rose ivory sandy\" refers to p_name = 'violet olive rose ivory sandy'"}
{"sample_id": 6826, "db_id": "retails", "final": {"question": "List all the customers' phone numbers from Ethiopia.", "sql": "SELECT T1.c_phone FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'Ethiopia'", "source_tables": ["nation", "customer"]}, "evidence": "phone number refers to c_phone; Ethiopia refers to n_name = 'Ethiopia'"}
{"sample_id": 6827, "db_id": "retails", "final": {"question": "What is the total price of all orders from the customer with the phone number \"627-220-3983\"?", "sql": "SELECT SUM(T1.o_totalprice) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_phone = '627-220-3983'", "source_tables": ["customer", "orders"]}, "evidence": "total price = sum(o_totalprice); phone number \"627-220-3983\" refers to c_phone = '627-220-3983'"}
{"sample_id": 6828, "db_id": "retails", "final": {"question": "What are the shipping methods for the orders on 12/31/1994?", "sql": "SELECT DISTINCT T2.l_shipmode FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderdate = '1994-12-31'", "source_tables": ["lineitem", "orders"]}, "evidence": "shipping method refers to l_shipmode; order on 12/31/1994 refers to o_orderdate = '1994-12-31'"}
{"sample_id": 6829, "db_id": "retails", "final": {"question": "What is the account balance of the supplier with the most parts?", "sql": "SELECT T.s_acctbal FROM ( SELECT T1.s_acctbal, COUNT(T2.ps_suppkey) AS num FROM supplier AS T1 INNER JOIN partsupp AS T2 ON T1.s_suppkey = T2.ps_suppkey GROUP BY T1.s_suppkey ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["supplier", "partsupp"]}, "evidence": "account balance refers to s_acctbal; the most parts refers to max(count(ps_suppkey))"}
{"sample_id": 6830, "db_id": "retails", "final": {"question": "Which nation does the supplier with the account balance of \"4393.04\" belong to?", "sql": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal = 4393.04", "source_tables": ["supplier", "nation"]}, "evidence": "nation refers to n_name; account balance of \"4393.04\" refers to s_acctbal = 4393.04"}
{"sample_id": 6831, "db_id": "retails", "final": {"question": "What is the region with the most customers?", "sql": "SELECT T.r_name FROM ( SELECT T3.r_name, COUNT(T2.c_custkey) AS num FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey GROUP BY T3.r_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["customer", "nation", "region"]}, "evidence": "region refers to r_name; the most customers refers to max(count(c_custkey))"}
{"sample_id": 6832, "db_id": "retails", "final": {"question": "List the phone number of the customer who placed orders with a total price of more than $300,000.", "sql": "SELECT T2.c_phone FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice > 300000", "source_tables": ["customer", "orders"]}, "evidence": "phone number refers to c_phone; a total price of more than $300,000 refers to o_totalprice > 300000"}
{"sample_id": 6833, "db_id": "retails", "final": {"question": "What are the clerks of orders with line items shipped by mail?", "sql": "SELECT T1.o_clerk FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'MAIL'", "source_tables": ["lineitem", "orders"]}, "evidence": "clerk refers to o_clerk; shipped by mail refers to l_shipmode = 'MAIL'"}
{"sample_id": 6834, "db_id": "retails", "final": {"question": "What are the top 5 nations of suppliers with the lowest account balance?", "sql": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey ORDER BY T1.s_acctbal LIMIT 1", "source_tables": ["supplier", "nation"]}, "evidence": "nation refers to n_name; the lowest account balance refers to min(s_acctbal)"}
{"sample_id": 6835, "db_id": "retails", "final": {"question": "List all the addresses for the suppliers of the biggest parts.", "sql": "SELECT T2.s_address FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey ORDER BY T3.p_size DESC LIMIT 1", "source_tables": ["part", "partsupp", "supplier"]}, "evidence": "addresses refers to s_address; the biggest part refers to max(p_size)"}
{"sample_id": 6836, "db_id": "retails", "final": {"question": "Which part and supplier have the most profit?", "sql": "SELECT T3.p_name, T4.s_name FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey INNER JOIN supplier AS T4 ON T1.ps_suppkey = T4.s_suppkey ORDER BY T2.l_extendedprice * (1 - T2.l_discount) - T1.ps_supplycost * T2.l_quantity DESC LIMIT 1", "source_tables": ["part", "partsupp", "lineitem", "supplier"]}, "evidence": "part refers to p_name; supplier refers to s_name; the most profit refers to max(subtract(multiply(l_extendedprice, subtract(1, l_discount)), multiply(ps_supplycost, l_quantity)))"}
{"sample_id": 6837, "db_id": "retails", "final": {"question": "What proportion of suppliers are from Asia?", "sql": "SELECT CAST(SUM(IIF(T1.r_name = 'ASIA', 1, 0)) AS REAL) * 100 / COUNT(T1.r_regionkey) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey INNER JOIN supplier AS T3 ON T2.n_nationkey = T3.s_nationkey", "source_tables": ["supplier", "nation", "region"]}, "evidence": "Asia refers to r_name = 'ASIA'; proportion = divide(count(s_name where r_name = 'ASIA'), count(s_name)) * 100%"}
{"sample_id": 6838, "db_id": "retails", "final": {"question": "Please indicate the total price of order key 32.", "sql": "SELECT o_totalprice FROM orders WHERE o_orderkey = 32", "source_tables": ["orders"]}, "evidence": "total price refers to o_totalprice; order key 32 refers to o_orderkey = 32"}
{"sample_id": 6839, "db_id": "retails", "final": {"question": "How many order keys are not applied for the discount?", "sql": "SELECT COUNT(l_orderkey) FROM lineitem WHERE l_discount = 0", "source_tables": ["lineitem"]}, "evidence": "order key refers to l_orderkey; not applied for the discount refers to l_discount = 0"}
{"sample_id": 6840, "db_id": "retails", "final": {"question": "List line items shipped by truck with delivery time before 1997.", "sql": "SELECT l_linenumber FROM lineitem WHERE STRFTIME('%Y', l_shipdate) < 1997 AND l_shipmode = 'truck'", "source_tables": ["lineitem"]}, "evidence": "line item refers to l_linenumber; shipped by truck refers to l_shipmode = 'truck'; delivery time before 1997 refers to year(l_shipdate) < 1997"}
{"sample_id": 6841, "db_id": "retails", "final": {"question": "How many line items were returned in 1998?", "sql": "SELECT l_linenumber FROM lineitem WHERE STRFTIME('%Y', l_shipdate) < 1997 AND l_shipmode = 'TRUCK'", "source_tables": ["lineitem"]}, "evidence": "line item refers to l_linenumber; returned refers to returnflag = 'R'; in 1998 refers to year(l_shipdate) = 1998"}
{"sample_id": 6842, "db_id": "retails", "final": {"question": "Which line item with the highest quantity is shipped by air?", "sql": "SELECT l_linenumber FROM lineitem WHERE l_shipmode = 'AIR' ORDER BY l_quantity DESC LIMIT 1", "source_tables": ["lineitem"]}, "evidence": "line item refers to l_linenumber; the highest quantity refers to max(l_quantity); shipped by air refers to l_shipmode = 'AIR'"}
{"sample_id": 6843, "db_id": "retails", "final": {"question": "List the names of customers whose accounts are in debt.", "sql": "SELECT c_name FROM customer WHERE c_acctbal < 0", "source_tables": ["customer"]}, "evidence": "name of customer refers to c_name; account in debt refers to c_acctbal < 0"}
{"sample_id": 6844, "db_id": "retails", "final": {"question": "How many customers belong to the household segment in Germany?", "sql": "SELECT COUNT(T1.c_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'HOUSEHOLD' AND T2.n_name = 'GERMANY'", "source_tables": ["nation", "customer"]}, "evidence": "household segment refers to c_mktsegment = 'household'; Germany refers to n_name = 'Germany'"}
{"sample_id": 6845, "db_id": "retails", "final": {"question": "List the phone numbers of customers whose order priority is urgent.", "sql": "SELECT T2.c_phone FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_orderpriority = '1-URGENT'", "source_tables": ["customer", "orders"]}, "evidence": "phone number refers to c_phone; order priority is urgent refers to o_orderpriority = '1-URGENT'"}
{"sample_id": 6846, "db_id": "retails", "final": {"question": "Name of customer whose order is applied with the highest discount.", "sql": "SELECT T3.c_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN customer AS T3 ON T1.o_custkey = T3.c_custkey ORDER BY T2.l_discount DESC LIMIT 1", "source_tables": ["customer", "lineitem", "orders"]}, "evidence": "customer name refers to c_name; the highest discount refers to max(l_discount)"}
{"sample_id": 6847, "db_id": "retails", "final": {"question": "List the 5 orders with the highest total price, indicating the delivery date.", "sql": "SELECT T1.o_orderkey, T2.l_shipdate FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey ORDER BY T1.o_totalprice DESC LIMIT 5", "source_tables": ["lineitem", "orders"]}, "evidence": "order refers to o_orderkey; the highest total price refers to max(o_totalprice); delivery date refers to l_shipdate"}
{"sample_id": 6848, "db_id": "retails", "final": {"question": "List the comments describing orders from customers in the furniture segment.", "sql": "SELECT T1.o_comment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'FURNITURE'", "source_tables": ["customer", "orders"]}, "evidence": "comment refers to o_comment; furniture segment refers to c_mktsegment = 'FURNITURE'"}
{"sample_id": 6849, "db_id": "retails", "final": {"question": "Please indicate the names of the customers whose order with a total price over $300000.", "sql": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice > 300000", "source_tables": ["customer", "orders"]}, "evidence": "customer name refers to c_name; a total price over $300000 refers to o_totalprice > 300000"}
{"sample_id": 6850, "db_id": "retails", "final": {"question": "Name customers in India with account balances over $5000.", "sql": "SELECT T1.c_name FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal > 5000 AND T2.n_name = 'INDIA'", "source_tables": ["nation", "customer"]}, "evidence": "customer name refers to c_name; India refers to n_name = 'INDIA'; account balance over $5000 refers to c_acctbal > 5000"}
{"sample_id": 6851, "db_id": "retails", "final": {"question": "List the phone numbers of suppliers from Japan.", "sql": "SELECT T1.s_phone FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'JAPAN'", "source_tables": ["supplier", "nation"]}, "evidence": "phone number refers to s_phone; Japan refers to n_name = 'JAPAN'"}
{"sample_id": 6852, "db_id": "retails", "final": {"question": "Among the providers in Argentina, which supplier has an account that is in debt?", "sql": "SELECT T1.s_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 AND T2.n_name = 'ARGENTINA'", "source_tables": ["supplier", "nation"]}, "evidence": "Argentina refers to n_name = 'ARGENTINA'; supplier refers to s_name; an account in debt refers to s_acctbal < 0"}
{"sample_id": 6853, "db_id": "retails", "final": {"question": "How many countries belong to the Algeria region?", "sql": "SELECT COUNT(T1.r_name) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey WHERE T2.n_name = 'ALGERIA'", "source_tables": ["nation", "region"]}, "evidence": "the algeria region refers to r_name = 'ALGERIA'"}
{"sample_id": 6854, "db_id": "retails", "final": {"question": "Please indicate the names of customers whose orders are eligible for 10% discount with order dates between 1/1/1994 and 1/1/1995.", "sql": "SELECT T3.c_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN customer AS T3 ON T1.o_custkey = T3.c_custkey WHERE T2.l_discount = 0.1 AND STRFTIME('%Y', T1.o_orderdate) BETWEEN 1994 AND 1995", "source_tables": ["customer", "lineitem", "orders"]}, "evidence": "customer name refers to c_name; 10% discount refers to l_discount = 0.1; order dates between 1/1/1994 and 1/1/1995 refers to year(o_orderdate) = 1994 OR o_orderdate = '1995-01-01'"}
{"sample_id": 6855, "db_id": "retails", "final": {"question": "Calculate the percentage of countries that belong to the American region.", "sql": "SELECT CAST(SUM(IIF(T1.r_name = 'America', 1, 0)) AS REAL) * 100 / COUNT(T2.n_name) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey", "source_tables": ["nation", "region"]}, "evidence": "the American region refers to r_name = 'America'; percentage = divide(count(n_name where r_name = 'America'), count(n_name)) * 100%"}
{"sample_id": 6856, "db_id": "retails", "final": {"question": "Calculate percentage of household segment in Indonesia.", "sql": "SELECT CAST(SUM(IIF(T1.c_mktsegment = 'HOUSEHOLD', 1, 0)) AS REAL) * 100 / COUNT(T1.c_mktsegment) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'INDONESIA'", "source_tables": ["nation", "customer"]}, "evidence": "household segment refers to c_mktsegment = 'HOUSEHOLD'; Indonesia refers to n_name = 'Indonesia'; percentage = divide(count(c_mktsegment = 'HOUSEHOLD'), count(c_mktsegment)) where n_name = 'Indonesia' * 100%"}
{"sample_id": 6857, "db_id": "retails", "final": {"question": "Please list the names of all the products under the type \"promo brushed steel\".", "sql": "SELECT p_name FROM part WHERE p_type = 'PROMO BRUSHED STEEL'", "source_tables": ["part"]}, "evidence": "product name refers to p_name; type \"promo brushed steel\" refers to p_type = 'PROMO BRUSHED STEEL'"}
{"sample_id": 6858, "db_id": "retails", "final": {"question": "What is the comment of the product \"burlywood plum powder puff mint\"?", "sql": "SELECT p_comment FROM part WHERE p_name = 'burlywood plum powder puff mint'", "source_tables": ["part"]}, "evidence": "comment refers to p_comment; product \"burlywood plum powder puff mint\" refers to p_name = 'burlywood plum powder puff mint'"}
{"sample_id": 6859, "db_id": "retails", "final": {"question": "How many parts have a retail price of over 1900?", "sql": "SELECT COUNT(p_partkey) FROM part WHERE p_retailprice > 1900", "source_tables": ["part"]}, "evidence": "a retail price of over 1900 refers to p_retailprice > 1900"}
{"sample_id": 6860, "db_id": "retails", "final": {"question": "Among the products under the type \"promo brushed steel\", how many of them are manufactured by Manufacturer#5?", "sql": "SELECT COUNT(p_partkey) FROM part WHERE p_type = 'PROMO BRUSHED STEEL' AND p_mfgr = 'Manufacturer#5'", "source_tables": ["part"]}, "evidence": "type \"promo brushed steel\" refers to p_type = 'PROMO BRUSHED STEEL'; Manufacturer#5 refers to p_mfgr = 'Manufacturer#5'"}
{"sample_id": 6861, "db_id": "retails", "final": {"question": "Please list all the brands that contain a part under the type \"promo brushed steel\".", "sql": "SELECT p_brand FROM part WHERE p_type = 'PROMO BRUSHED STEEL'", "source_tables": ["part"]}, "evidence": "brand refers to p_brand; type \"promo brushed steel\" refers to p_type = 'PROMO BRUSHED STEEL'"}
{"sample_id": 6862, "db_id": "retails", "final": {"question": "What is the name of the product with the highest retail price?", "sql": "SELECT p_name FROM part WHERE p_retailprice = ( SELECT MAX(p_retailprice) FROM part )", "source_tables": ["part"]}, "evidence": "name of the product refers to p_name; the highest retail price refers to p_retailprice"}
{"sample_id": 6863, "db_id": "retails", "final": {"question": "Which part has a bigger size, \"pink powder drab lawn cyan\" or \"cornflower sky burlywood green beige\"?", "sql": "SELECT T.p_name FROM ( SELECT p_name, p_size FROM part WHERE p_name IN ('pink powder drab lawn cyan', 'cornflower sky burlywood green beige') ) AS T ORDER BY p_size DESC LIMIT 1", "source_tables": ["part"]}, "evidence": "size refers to p_size; \"pink powder drab lawn cyan\" or \"cornflower sky burlywood green beige\" refers to p_name in ('pink powder drab lawn cyan', 'cornflower sky burlywood green beige')"}
{"sample_id": 6864, "db_id": "retails", "final": {"question": "How many parts have a jumbo case container?", "sql": "SELECT COUNT(p_partkey) FROM part WHERE p_container = 'JUMBO CASE'", "source_tables": ["part"]}, "evidence": "jumbo case container refers to p_container = 'JUMBO CASE'"}
{"sample_id": 6865, "db_id": "retails", "final": {"question": "What is the size of the smallest part in a jumbo case container?", "sql": "SELECT MIN(p_size) FROM part WHERE p_container = 'JUMBO CASE'", "source_tables": ["part"]}, "evidence": "size refers to p_size; the smallest part refers to min(p_size); jumbo case container refers to p_container = 'JUMBO CASE'"}
{"sample_id": 6965, "db_id": "ice_hockey_draft", "final": {"question": "What is the highest point highest point of Per Mars in the draft year?", "sql": "SELECT T1.P FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Per Mars' ORDER BY T1.P DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "highest point in the draft year refers to MAX(P);"}
{"sample_id": 6966, "db_id": "ice_hockey_draft", "final": {"question": "Among the Italian players, who has the shortest height?", "sql": "SELECT T2.PlayerName FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height WHERE T2.nation = 'Italy' ORDER BY T1.height_in_cm ASC LIMIT 1", "source_tables": ["playerinfo", "height_info"]}, "evidence": "Italian refers to nation = 'Italy'; players refers to PlayerName; shortest height refers to MIN(height_in_cm);"}
{"sample_id": 6968, "db_id": "ice_hockey_draft", "final": {"question": "How many players were born in 1982 and have a height above 182cm?", "sql": "SELECT COUNT(T2.ELITEID) FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height WHERE T1.height_in_cm > 182 AND strftime('%Y', T2.birthdate) = '1982'", "source_tables": ["playerinfo", "height_info"]}, "evidence": "born in 1982 refers to birthyear = 1982; height above 182cm refers to height_in_cm > 182 ;"}
{"sample_id": 6969, "db_id": "ice_hockey_draft", "final": {"question": "What is the percentage of Russian players who have a height of under 200 inch?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.height_in_cm < 200 AND T2.nation = 'Russia' THEN T2.ELITEID ELSE NULL END) AS REAL) * 100 / COUNT(T2.ELITEID) FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height", "source_tables": ["playerinfo", "height_info"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(nation = 'Russia' WHERE height_in_cm < 200), COUNT(ELITEID)), 100); Russian refers to nation = 'Russia'; players refers to PlayerName; height of under 200 inch refers to height_in_cm < 200;"}
{"sample_id": 6970, "db_id": "ice_hockey_draft", "final": {"question": "Among the USA players, who has the lightest weight?", "sql": "SELECT T2.PlayerName FROM weight_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.weight_id = T2.weight WHERE T2.nation = 'USA' ORDER BY T1.weight_in_lbs ASC LIMIT 1", "source_tables": ["weight_info", "playerinfo"]}, "evidence": "USA refers to nation = 'USA' ; players refers to PlayerName; lightest weight refers to MIN(weight_in_lbs);\n"}
{"sample_id": 6971, "db_id": "ice_hockey_draft", "final": {"question": "Who among the players in season 2000-2001 has committed the highest rule violations or penalty minutes?", "sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' ORDER BY T1.PIM DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "committed the highest rule violations or penalty minutes refers to MAX(PIM); 2000-2001 season refers to SEASON = '2000-2001'"}
{"sample_id": 6972, "db_id": "ice_hockey_draft", "final": {"question": "List the names of all players in team Avangard Omsk in season 2000-2001.", "sql": "SELECT DISTINCT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.TEAM = 'Avangard Omsk'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "names of the players refers to PlayerName; team Avangard Omsk refers to TEAM = 'Avangard Omsk'; 2000-2001 season refers to SEASON = '2000-2001';"}
{"sample_id": 6973, "db_id": "ice_hockey_draft", "final": {"question": "Who among the players drafted by Arizona Coyotes in 2000 has committed the highest rule violations?", "sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.overallby = 'Arizona Coyotes' AND T2.draftyear = 2000 ORDER BY T1.PIM DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "who refers to PlayerName; drafted by Arizona Coyotes refers to overallby = 'Arizona Coyotes'; committed the highest rule violations refers to MAX(PIM); in 2000 refers to draftyear = 2000;"}
{"sample_id": 6974, "db_id": "ice_hockey_draft", "final": {"question": "How many players were drafted by Arizona Coyotes whose height reaches 195 centimeters?", "sql": "SELECT COUNT(T2.ELITEID) FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height WHERE T2.overallby = 'Arizona Coyotes' AND T1.height_in_cm = 195", "source_tables": ["playerinfo", "height_info"]}, "evidence": "drafted by Arizona Coyotes refers to overallby = 'Arizona Coyotes'; height reaches 195 centimeters refers to height_in_cm = 195;"}
{"sample_id": 6975, "db_id": "ice_hockey_draft", "final": {"question": "List the names of all players from Avangard Omsk that have played for playoffs in season 2000-2001.", "sql": "SELECT DISTINCT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.TEAM = 'Avangard Omsk' AND T1.GAMETYPE = 'Playoffs'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "names of the players refers to PlayerName; Avangard Omsk refers to TEAM = 'Avangard Omsk'; playoffs refers to GAMETYPE = 'Playoffs'; 2000-2001 season refers to SEASON = '2000-2001';"}
{"sample_id": 6976, "db_id": "ice_hockey_draft", "final": {"question": "Who is the most valuable player who played in the 2000-2001 season of the International league?", "sql": "SELECT DISTINCT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.LEAGUE = 'International' ORDER BY T1.P DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "most valuable player refers to MAX(P); 2000-2001 season refers to SEASON = '2000-2001'; International league refers to LEAGUE = 'International';"}
{"sample_id": 6977, "db_id": "ice_hockey_draft", "final": {"question": "How many players who were born in 1980 weigh 185 in pounds?", "sql": "SELECT COUNT(T2.ELITEID) FROM weight_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.weight_id = T2.weight WHERE T1.weight_in_lbs = 185 AND strftime('%Y', T2.birthdate) = '1980'", "source_tables": ["weight_info", "playerinfo"]}, "evidence": "born in 1980 refers to birthyear = 1980; weigh 185 in pounds refers to weight_in_lbs = 185;"}
{"sample_id": 6978, "db_id": "ice_hockey_draft", "final": {"question": "Who has played the most game plays in the 2000-2001 season of the International league?", "sql": "SELECT DISTINCT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.LEAGUE = 'International' ORDER BY T1.GP DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "played the most game plays refers to MAX(GP); 2000-2001 season refers to SEASON = '2000-2001'; International league refers to LEAGUE = 'International';"}
{"sample_id": 6979, "db_id": "ice_hockey_draft", "final": {"question": "List the names of all players from Avangard Omsk who played in the 2000-2001 season of the International league that have no goals in draft year.", "sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.LEAGUE = 'International' AND T1.TEAM = 'Czech Republic (all)' AND T1.G = 0", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "names of the players refers to PlayerName; Avangard Omsk refers to TEAM = 'Avangard Omsk'; International league refers to LEAGUE = 'International'; no goals in draft year refers to G = 0; 2000-2001 season refers to SEASON = '2000-2001';"}
{"sample_id": 6980, "db_id": "ice_hockey_draft", "final": {"question": "Who is the oldest player who played for Avangard Omsk during the regular season in 2000-2001?", "sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.GAMETYPE = 'Regular Season' AND T1.TEAM = 'Avangard Omsk' ORDER BY T2.birthdate ASC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "oldest player refers to MIN(birthdate); Avangard Omsk refers to TEAM = 'Avangard Omsk'; regular season refers to GAMETYPE = 'Regular Season'; 2000-2001 season refers to SEASON = '2000-2001';\n"}
{"sample_id": 7283, "db_id": "works_cycles", "final": {"question": "Among the products that are purchased, how many of them have never received the highest rating?", "sql": "SELECT COUNT(T1.ProductID) FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.MakeFlag = 0 AND T1.Rating != 5", "source_tables": ["product", "productreview"]}, "evidence": "product that are purchased refers to MakeFlag = 0; never received highest rating refers to Rating! = 5\n\n"}
{"sample_id": 7284, "db_id": "works_cycles", "final": {"question": "What is the biggest amount of reviews a salable product gets?", "sql": "SELECT T1.Comments FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.FinishedGoodsFlag = 1 GROUP BY T1.Comments ORDER BY COUNT(T1.ProductReviewID) DESC LIMIT 1", "source_tables": ["product", "productreview"]}, "evidence": "salable product refers to FinishedGoodsFlag = 1; biggest amount reviews refers to MAX(count(ProductID))"}
{"sample_id": 7285, "db_id": "works_cycles", "final": {"question": "Among the products that are both manufactured in house and salable, how many of them get over 10 reviews?", "sql": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 USING (ProductID) WHERE T2.FinishedGoodsFlag = 1 AND T2.MakeFlag = 1 GROUP BY T2.Name ORDER BY COUNT(T1.COMMENTS) > 10", "source_tables": ["product", "productreview"]}, "evidence": "manufactured in house refers to MakeFlag = 1; salable product refers to FinishedGoodsFlag = 1; over 10 reviews refers to count(comments)>10"}
{"sample_id": 7286, "db_id": "works_cycles", "final": {"question": "Please list the names of the products that get over 10 reviews and a salable.", "sql": "SELECT T2.NAME FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.FinishedGoodsFlag = 1 GROUP BY T2.NAME ORDER BY COUNT(T1.comments) > 10", "source_tables": ["product", "productreview"]}, "evidence": "salable product refers to FinishedGoodsFlag = 1; over 10 reviews refers to count(comments)>10"}
{"sample_id": 7287, "db_id": "works_cycles", "final": {"question": "Please list the reviewers who have given the highest rating for a medium class, women's product.", "sql": "SELECT T1.ReviewerName FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Class = 'M' AND T2.Style = 'W' AND T1.Rating = 5", "source_tables": ["product", "productreview"]}, "evidence": "highest rating refers to Rating = 5; high class refers to Class = 'H'; men's product refers to Style = 'M'"}
{"sample_id": 7288, "db_id": "works_cycles", "final": {"question": "What is the class of the product with the most reviews?", "sql": "SELECT T2.Class FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID GROUP BY T2.Class ORDER BY COUNT(T1.ProductReviewID) DESC LIMIT 1", "source_tables": ["product", "productreview"]}, "evidence": "most review refers to MAX(count(comments)); high class refers to Class = 'H'; medium class refers to Class = 'M'; low class refers to Class = 'L'"}
{"sample_id": 7289, "db_id": "works_cycles", "final": {"question": "Please list the e-mails of the reviewers who have reviewed high class.", "sql": "SELECT T1.EmailAddress FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Class = 'H'", "source_tables": ["product", "productreview"]}, "evidence": "high class refers to Class = 'H'; men's product refers to Style = 'M'"}
{"sample_id": 7290, "db_id": "works_cycles", "final": {"question": "Please list the names of the products that have over 3 price changes.", "sql": "SELECT T2.Name FROM ProductListPriceHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID GROUP BY T2.Name ORDER BY COUNT(T1.ListPrice) > 3", "source_tables": ["product", "productlistpricehistory"]}, "evidence": "over 3 price changes refers to count(ListPrice)>3"}
{"sample_id": 7291, "db_id": "works_cycles", "final": {"question": "What is the product description of Headset Ball Bearings?", "sql": "SELECT T1.Description FROM ProductDescription AS T1 INNER JOIN Product AS T2 WHERE T2.Name = 'Headset Ball Bearings' AND T1.productDescriptionID = T2.ProductID", "source_tables": ["product", "productdescription"]}, "evidence": "Headset Ball Bearings is name of a product"}
{"sample_id": 7292, "db_id": "works_cycles", "final": {"question": "What is the highest vendor's selling price for Hex Nut 5?", "sql": "SELECT T1.StandardPrice FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Hex Nut 5' ORDER BY T1.StandardPrice DESC LIMIT 1", "source_tables": ["product", "productvendor"]}, "evidence": "vendor's selling price refers to StandardPrice"}
{"sample_id": 7293, "db_id": "works_cycles", "final": {"question": "Please list all the vendors' usual selling prices of the product Hex Nut 5.", "sql": "SELECT T1.StandardPrice FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Hex Nut 5' GROUP BY T1.StandardPrice ORDER BY COUNT(T1.StandardPrice) DESC LIMIT 1", "source_tables": ["product", "productvendor"]}, "evidence": "vendor's selling price refers to StandardPrice"}
{"sample_id": 7294, "db_id": "works_cycles", "final": {"question": "Among the vendors that sell the product Hex Nut 5, how many of them have a good credit rating?", "sql": "SELECT COUNT(DISTINCT T3.Name) FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Name = 'Hex Nut 5' AND T3.CreditRating = 1 AND 3", "source_tables": ["product", "vendor", "productvendor"]}, "evidence": "good credit rating refers to CreditRating between 1 and 3"}
{"sample_id": 7295, "db_id": "works_cycles", "final": {"question": "Please list the website purchasing links of the vendors from whom the product Hex Nut 5 can be purchased.", "sql": "SELECT T3.PurchasingWebServiceURL FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Name = 'Hex Nut 5'", "source_tables": ["product", "vendor", "productvendor"]}, "evidence": "website purchasing link refers to PurchasingWebServiceURL"}
{"sample_id": 7296, "db_id": "works_cycles", "final": {"question": "Which vendor's selling price for Hex Nut 5 is the lowest, please give the vendor's name.", "sql": "SELECT T3.Name FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Name = 'Hex Nut 5' ORDER BY T1.StandardPrice LIMIT 1", "source_tables": ["product", "vendor", "productvendor"]}, "evidence": "vendor's selling price refers to StandardPrice; lowest selling price = MIN(StandardPrice)"}
{"sample_id": 7297, "db_id": "works_cycles", "final": {"question": "How many high-class products are sold by preferred vendors?", "sql": "SELECT COUNT(T2.Name) FROM ProductVendor AS T1 INNER JOIN Product AS T2 USING (ProductID) INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T3.PreferredVendorStatus = 1 AND T2.Class = 'M'", "source_tables": ["product", "vendor", "productvendor"]}, "evidence": "preferred vendor refers to PreferredVendorStatus = 1; high class refers to Class = 'H'"}
{"sample_id": 7298, "db_id": "works_cycles", "final": {"question": "Please give all the list prices of the product LL Fork.", "sql": "SELECT T2.ListPrice FROM Product AS T1 INNER JOIN ProductListPriceHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'LL Fork'", "source_tables": ["product", "productlistpricehistory"]}, "evidence": "Hex Nut 5 is name of a product"}
{"sample_id": 7299, "db_id": "works_cycles", "final": {"question": "Among the products from the mountain product line, how many of them are sold by over 2 vendors?", "sql": "SELECT SUM(CASE WHEN T1.ProductLine = 'M' THEN 1 ELSE 0 END) FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID GROUP BY T1.ProductID HAVING COUNT(T1.Name) > 2", "source_tables": ["product", "vendor", "productvendor"]}, "evidence": "mountain product line refers to ProductLine = 'M'; sold by over 5 vendors refers to count(Name)>5"}
{"sample_id": 7300, "db_id": "works_cycles", "final": {"question": "Among the products that get over at least 1 review, how many of them are from the mountain product line?", "sql": "SELECT SUM(CASE WHEN T2.ProductLine = 'M' THEN 1 ELSE 0 END) FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductID HAVING COUNT(T1.ProductReviewID) > 1", "source_tables": ["product", "productreview"]}, "evidence": "mountain product line refers to ProductLine = 'M'"}
{"sample_id": 7301, "db_id": "works_cycles", "final": {"question": "Please list the email adresses of the reviewers who have given the lowest rating to the product HL Mountain Pedal.", "sql": "SELECT T1.EmailAddress FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'HL Mountain Pedal' ORDER BY T1.Rating LIMIT 1", "source_tables": ["product", "productreview"]}, "evidence": "lowest rating refers to Rating = 1"}
{"sample_id": 7302, "db_id": "works_cycles", "final": {"question": "How many products that take more than 2 days to make are out of stock?", "sql": "SELECT COUNT(T2.ProductID) FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.OnOrderQty IS NULL OR T1.OnOrderQty = 0", "source_tables": ["product", "productvendor"]}, "evidence": "take more than 2 days to make refers to DaysToManufacture>2; out of stock refers to OnOrderQty = 0 or OnOrderQty is null"}
{"sample_id": 7303, "db_id": "works_cycles", "final": {"question": "Please list the products that are out of stock and purchased in house.", "sql": "SELECT T2.Name FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.MakeFlag = 0 AND (T1.OnOrderQty IS NULL OR T1.OnOrderQty = 0)", "source_tables": ["product", "productvendor"]}, "evidence": "take more than 2 days to make refers to DaysToManufacture>2; out of stock refers to OnOrderQty = 0 or OnOrderQty is null; manufactured in house refers to MakeFlag = 1"}
{"sample_id": 7304, "db_id": "works_cycles", "final": {"question": "Among the salable products from the mountain product line, how many of them have the most reviews?", "sql": "SELECT SUM(CASE WHEN T2.ProductLine = 'M' THEN 1 ELSE 0 END) FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.FinishedGoodsFlag = 1 GROUP BY T1.ProductID ORDER BY COUNT(T1.ProductReviewID) DESC LIMIT 1", "source_tables": ["product", "productreview"]}, "evidence": "salable product refers to FinishedGoodsFlag = 1; mountain product line refers to ProductLine = 'M'"}
{"sample_id": 7305, "db_id": "works_cycles", "final": {"question": "What is the average selling price of different vendors of the product Hex Nut 5?", "sql": "SELECT SUM(T1.StandardPrice) / COUNT(T1.BusinessEntityID) FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Hex Nut 5'", "source_tables": ["product", "productvendor"]}, "evidence": "average selling price = divide(sum(StandardPrice), count(BusinessEntityID))"}
{"sample_id": 7306, "db_id": "works_cycles", "final": {"question": "What is the product that has the highest average rating from the mountain product line?", "sql": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ProductLine = 'M' GROUP BY T2.Name ORDER BY CAST(SUM(T1.Rating) AS REAL) / COUNT(T1.ProductID) DESC LIMIT 1", "source_tables": ["product", "productreview"]}, "evidence": "mountain product line refers to ProductLine = 'M'; highest average rating = max(divide(sum(Rating), count(ProductReview)))"}
{"sample_id": 7307, "db_id": "works_cycles", "final": {"question": "Please list the top 3 house-manufactured products with the highest average rating.", "sql": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.MakeFlag = 1 GROUP BY T2.Name ORDER BY SUM(T1.Rating) DESC LIMIT 1", "source_tables": ["product", "productreview"]}, "evidence": "home manufactured refers to MakeFlag = 1; average rating = divide(sum(Rating), count(ProductReview))"}
{"sample_id": 7308, "db_id": "works_cycles", "final": {"question": "List all the non-sales employees in ascending order of its business entitty ID.", "sql": "SELECT FirstName, LastName FROM Person WHERE PersonType = 'EM' ORDER BY BusinessEntityID", "source_tables": ["person"]}, "evidence": "non-sales employee refers to PersonType = 'EM'"}
{"sample_id": 7309, "db_id": "works_cycles", "final": {"question": "Name all person in the individual retail whose last name is 'Anderson'.", "sql": "SELECT FirstName, MiddleName, LastName FROM Person WHERE LastName = 'Anderson' AND PersonType = 'IN'", "source_tables": ["person"]}, "evidence": "person in the individual retail refers to PersonType = 'IN'"}
{"sample_id": 7310, "db_id": "works_cycles", "final": {"question": "List the name of employees who had left the company? When were they hired?", "sql": "SELECT T1.FirstName, T1.LastName, T2.HireDate FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeeDepartmentHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T3.EndDate IS NOT NULL", "source_tables": ["employee", "person", "employeedepartmenthistory"]}, "evidence": "employee that has left the company refers to EndDate is not null"}
{"sample_id": 7311, "db_id": "works_cycles", "final": {"question": "Name all salaried employee who are hired in 2007 and later.", "sql": "SELECT T1.FirstName, T1.LastName FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE STRFTIME('%Y', T2.HireDate) >= '2007' AND T2.SalariedFlag = 1", "source_tables": ["employee", "person"]}, "evidence": "salaried employee refers to SalariedFlag = 1; hired in 2007 and later refers to year(HireDate)> = 2007"}
{"sample_id": 7312, "db_id": "works_cycles", "final": {"question": "List the name of married employees with less than 20 vacation hours.", "sql": "SELECT T1.FirstName, T1.LastName FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.MaritalStatus = 'M' AND T2.VacationHours < 20", "source_tables": ["employee", "person"]}, "evidence": "married employee refers to MaritalStatus = 'M'; less than 20 vacation hours refers to VacationHours<20"}
{"sample_id": 7313, "db_id": "works_cycles", "final": {"question": "Name the oldest employee who is working on night shift. How old is the employee?", "sql": "SELECT T1.FirstName, T1.LastName , STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', BirthDate) FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeeDepartmentHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T3.ShiftId = 3 ORDER BY STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', BirthDate) DESC LIMIT 1", "source_tables": ["employee", "person", "employeedepartmenthistory"]}, "evidence": "working on night shift refers to ShiftID = 3; oldest employee refers to min(BirthDate); age = 2022-year(BirthDate)+1"}
{"sample_id": 7314, "db_id": "works_cycles", "final": {"question": "List all staff in the Shipping and Receiving department who are hired in 2009.", "sql": "SELECT T1.FirstName, T1.LastName FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeeDepartmentHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID INNER JOIN Department AS T4 ON T3.DepartmentID = T4.DepartmentID WHERE STRFTIME('%Y', T2.HireDate) = '2009' AND T4.Name = 'Shipping and Receiving'", "source_tables": ["employee", "person", "department", "employeedepartmenthistory"]}, "evidence": "hired in 2009 refers to year(HireDate) = 2009"}
{"sample_id": 7315, "db_id": "works_cycles", "final": {"question": "What is the job title of the oldest employee in the company? In which department is he in?", "sql": "SELECT T2.JobTitle, T4.Name FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeeDepartmentHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID INNER JOIN Department AS T4 ON T3.DepartmentID = T4.DepartmentID ORDER BY T2.HireDate LIMIT 1", "source_tables": ["employee", "person", "department", "employeedepartmenthistory"]}, "evidence": "oldest employee refers to min(BirthDate)"}
{"sample_id": 7316, "db_id": "works_cycles", "final": {"question": "Based on the lastet payrate of each employee, calculate the average hourly payrate for each department.", "sql": "SELECT AVG(T1.Rate) FROM EmployeePayHistory AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T1.RateChangeDate = ( SELECT MAX(T1.RateChangeDate) FROM EmployeePayHistory AS T1 INNER JOIN Department AS T2 ON T1.BusinessEntityID = T2.DepartmentID )", "source_tables": ["employeepayhistory", "department", "employeedepartmenthistory"]}, "evidence": "latest payrate refers to max(RateChangeDate); average hourly payrate = divide(sum(Rate), count(BusinessEntityID)) for each DepartmentID"}
{"sample_id": 7317, "db_id": "works_cycles", "final": {"question": "Other than the Chief Executive Officer, who is the employee who has the highest payrate? State the rate.", "sql": "SELECT T2.FirstName, T2.LastName FROM EmployeePayHistory AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Employee AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T3.JobTitle NOT LIKE 'Chief Executive Officer' ORDER BY T1.Rate DESC LIMIT 1", "source_tables": ["employee", "employeepayhistory", "person"]}, "evidence": "other than the Chief Executive Officer refers to JobTitle! = 'Chief Executive Officer'; highest payrate refers to max(Rate)"}
{"sample_id": 7318, "db_id": "works_cycles", "final": {"question": "Name the vendor who has the shortest average lead time for Product ID 319.", "sql": "SELECT T1.Name FROM Vendor AS T1 INNER JOIN ProductVendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.ProductID = 319 ORDER BY T2.AverageLeadTime LIMIT 1", "source_tables": ["vendor", "productvendor"]}, "evidence": ""}
{"sample_id": 7319, "db_id": "works_cycles", "final": {"question": "List all product name from Australia Bike Retailer order by product ID.", "sql": "SELECT T3.Name FROM Vendor AS T1 INNER JOIN ProductVendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Product AS T3 ON T2.ProductID = T3.ProductID WHERE T1.Name = 'Australia Bike Retailer'", "source_tables": ["product", "vendor", "productvendor"]}, "evidence": "Australia Bike Retailer is name of vendor"}
{"sample_id": 7320, "db_id": "works_cycles", "final": {"question": "Which vendor gives the best profit on net for product ID 342?", "sql": "SELECT T1.Name FROM Vendor AS T1 INNER JOIN ProductVendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.ProductID = 342 ORDER BY T2.LastReceiptCost - T2.StandardPrice DESC LIMIT 1", "source_tables": ["vendor", "productvendor"]}, "evidence": "profit on net = subtract(LastReceiptCost, StandardPrice); best profit on net refers to max(subtract(LastReceiptCost, StandardPrice))"}
{"sample_id": 7321, "db_id": "works_cycles", "final": {"question": "What is the current payrate of Rob Walters? Calculate the percentage increment from his previous payrate.", "sql": "SELECT T2.Rate , (MAX(T2.Rate) - MIN(T2.Rate)) * 100 / MAX(T2.Rate) FROM Person AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'Rob' AND T1.LastName = 'Walters'", "source_tables": ["employeepayhistory", "person"]}, "evidence": "current payrate refers to max(Rate); percentage increment = divide(subtract(max(Rate), min(Rate)), min(Rate))*100%"}
{"sample_id": 7322, "db_id": "works_cycles", "final": {"question": "Calculate the average length of employment for employee working in the Research and Development deparment.", "sql": "SELECT AVG(STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.HireDate)) FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T3.Name = 'Research and Development'", "source_tables": ["employee", "department", "employeedepartmenthistory"]}, "evidence": "average length of employment = AVG(subtract(2022, year(HireDate)))"}
{"sample_id": 7323, "db_id": "works_cycles", "final": {"question": "What is the average age of employee in Adventure Works?", "sql": "SELECT AVG(STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', BirthDate)) FROM Employee", "source_tables": ["employee"]}, "evidence": "average age = AVG(subtract(year(now), year(HireDate)))"}
{"sample_id": 7324, "db_id": "works_cycles", "final": {"question": "Among the employees in Adventure Works, calculate the percentage of them working as sales representatives.", "sql": "SELECT CAST(SUM(CASE WHEN JobTitle = 'Sales Representative' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(BusinessEntityID) FROM Employee", "source_tables": ["employee"]}, "evidence": "percentage of sales representatives = divide(count(JobTitle = 'Sales Representative'), count(JobTitle))*100%"}
{"sample_id": 7325, "db_id": "works_cycles", "final": {"question": "Please provide contact details of all Marketing Managers. State their name and phone number.", "sql": "SELECT T1.FirstName, T1.LastName, T2.PhoneNumber FROM Person AS T1 INNER JOIN PersonPhone AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Employee AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T3.JobTitle = 'Marketing Manager'", "source_tables": ["employee", "personphone", "person"]}, "evidence": "Marketing Manager is a job title"}
{"sample_id": 7326, "db_id": "works_cycles", "final": {"question": "List the person who owns a distinguish credt card.", "sql": "SELECT T3.FirstName, T3.LastName FROM CreditCard AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.CreditCardID = T2.CreditCardID INNER JOIN Person AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.CardType = 'Distinguish'", "source_tables": ["person", "creditcard", "personcreditcard"]}, "evidence": "distinguish credt card refers to cardType = 'Distinguish'"}
{"sample_id": 7327, "db_id": "works_cycles", "final": {"question": "Name the sales person for store Area Bike Accessories. Which territory is he / she in?", "sql": "SELECT T4.Name FROM Store AS T1 INNER JOIN SalesPerson AS T2 ON T1.SalesPersonID = T2.BusinessEntityID INNER JOIN Person AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID INNER JOIN SalesTerritory AS T4 ON T2.TerritoryID = T4.TerritoryID WHERE T1.Name = 'Area Bike Accessories'", "source_tables": ["salesterritory", "person", "store", "salesperson"]}, "evidence": ""}
{"sample_id": 7328, "db_id": "works_cycles", "final": {"question": "Name all stores and its sales representative in France territory.", "sql": "SELECT T3.Name, T4.FirstName, T4.LastName FROM SalesTerritory AS T1 INNER JOIN Customer AS T2 ON T1.TerritoryID = T2.TerritoryID INNER JOIN Store AS T3 ON T2.StoreID = T3.BusinessEntityID INNER JOIN Person AS T4 ON T2.PersonID = T4.BusinessEntityID WHERE T1.Name = 'France'", "source_tables": ["salesterritory", "customer", "store", "person"]}, "evidence": "France territory refers to SalesTerritory.Name = 'France';"}
{"sample_id": 7329, "db_id": "works_cycles", "final": {"question": "Name all products that started selling in 2013. State its respective vendor's name.", "sql": "SELECT T1.Name, T3.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE STRFTIME('%Y', T1.SellStartDate) = '2013'", "source_tables": ["product", "vendor", "productvendor"]}, "evidence": "Started selling in 2013 refers to year(SellStartDate) = 2013;"}
{"sample_id": 7330, "db_id": "works_cycles", "final": {"question": "Names the Sales Representative with the highest year to date sales.", "sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM SalesPerson AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.SalesYTD DESC LIMIT 1", "source_tables": ["person", "salesperson"]}, "evidence": "Highest year to date sales refers to Max(SalesYTD);"}
{"sample_id": 7331, "db_id": "works_cycles", "final": {"question": "List all product only MOQ of 1,000 and with standard cost more than 17.", "sql": "SELECT T2.Name FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T1.MaxOrderQty = 1000 AND T2.StandardCost > 17", "source_tables": ["product", "vendor", "productvendor"]}, "evidence": "MOQ refers to minimum order quantity; MOQ of 1 refers to MinOrderQty = 1; standard cost more than 48 refers to StandardCost > 48;"}
{"sample_id": 7332, "db_id": "works_cycles", "final": {"question": "Who is the oldest married male? State his job title.", "sql": "SELECT T2.FirstName, T2.LastName, T1.JobTitle FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Gender = 'M' AND T1.MaritalStatus = 'M' ORDER BY T1.BirthDate LIMIT 1", "source_tables": ["employee", "person"]}, "evidence": "Male refers to Gender = 'M'; married refers to MaritalStatus = 'M'; oldest refers to Min(BirthDate);"}
{"sample_id": 7333, "db_id": "works_cycles", "final": {"question": "State the vendor for product number WB-H098.", "sql": "SELECT T3.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.ProductNumber = 'WB-H098'", "source_tables": ["product", "vendor", "productvendor"]}, "evidence": ""}
{"sample_id": 7334, "db_id": "works_cycles", "final": {"question": "Find the vendor with the least average lead time for Product ID 348.", "sql": "SELECT T2.Name FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.ProductID = 348 ORDER BY T1.AverageLeadTime ASC LIMIT 1", "source_tables": ["vendor", "productvendor"]}, "evidence": ""}
{"sample_id": 7335, "db_id": "works_cycles", "final": {"question": "State the employee who are born in or after 1970 and with the least sick leave hour.", "sql": "SELECT T2.FirstName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE STRFTIME('%Y', T1.BirthDate) > '1970' ORDER BY T1.SickLeaveHours LIMIT 1", "source_tables": ["employee", "person"]}, "evidence": "born in or after 1970 refers to year(BirthDate) > = 1970;"}
{"sample_id": 7336, "db_id": "works_cycles", "final": {"question": "Calculate the average age of employee in each department and state which department has the youngest employees.", "sql": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.BirthDate) + 1 , T3.Name FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 USING (BusinessEntityID) INNER JOIN Department AS T3 USING (DepartmentID) ORDER BY T1.BirthDate DESC LIMIT 1", "source_tables": ["employee", "department", "employeedepartmenthistory"]}, "evidence": "Average = Divide(Sum(Substract(year(@today),year(BirthDate))),Count(BusinessEntityID) by each Department ID; youngest employee refers to Min(BirthDate);"}
{"sample_id": 7337, "db_id": "works_cycles", "final": {"question": "Please provide the IDs of any three AdventureWorks product subcategories.", "sql": "SELECT DISTINCT ProductCategoryID FROM ProductSubcategory LIMIT 3", "source_tables": ["productsubcategory"]}, "evidence": ""}
{"sample_id": 7338, "db_id": "works_cycles", "final": {"question": "What are the differences between the 288th salesperson's predicted annual sales and his or her actual sales thus far?", "sql": "SELECT SalesYTD - SalesQuota FROM SalesPerson WHERE BusinessEntityID = 288", "source_tables": ["salesperson"]}, "evidence": "288th sales person refers to BusinessEntityID = 288; predited annual sales refers to SalesQuota; actual sales refers to SalesYTD; difference = Substract(SalesQuota(BusinessEntityID(288))), (SalesYTD(BusinessEntityID(288)));"}
{"sample_id": 7339, "db_id": "works_cycles", "final": {"question": "Please list three businesses with the lowest total sales from last year.", "sql": "SELECT BusinessEntityID FROM SalesPerson ORDER BY SalesLastYear LIMIT 3", "source_tables": ["salesperson"]}, "evidence": "lowest total sales in last year refers to Min(SalesLastYear);"}
{"sample_id": 7340, "db_id": "works_cycles", "final": {"question": "Which three sales regions have generated the most revenue thus far?", "sql": "SELECT TerritoryID FROM SalesTerritory ORDER BY SalesYTD DESC LIMIT 3", "source_tables": ["salesterritory"]}, "evidence": "revenue refers to SalesYTD; the most revenue refers to Max(SalesYTD);"}
{"sample_id": 7341, "db_id": "works_cycles", "final": {"question": "What categories of offers qualify for group discounts for resellers?", "sql": "SELECT Type FROM SpecialOffer WHERE Category = 'Reseller'", "source_tables": ["specialoffer"]}, "evidence": "resellers refers to Category = 'Reseller';"}
{"sample_id": 7342, "db_id": "works_cycles", "final": {"question": "What is the highest possible discount rate for 'Excess Inventory'?", "sql": "SELECT DiscountPct FROM SpecialOffer WHERE Type = 'Excess Inventory' ORDER BY DiscountPct DESC LIMIT 1", "source_tables": ["specialoffer"]}, "evidence": "excess inventory refers to Type = 'Excess Inventory'; highest possible discount refers to Max(DiscountPct);"}
{"sample_id": 7343, "db_id": "works_cycles", "final": {"question": "What is the difference between the actual manufacturing cost of product number 818 and the estimated manufacturing cost?", "sql": "SELECT PlannedCost - ActualCost FROM WorkOrderRouting WHERE ProductID = 818", "source_tables": ["workorderrouting"]}, "evidence": "product number 818 refers to ProductID = 818; estimated manufacturing cost refers PlannedCost; actual manufacturing cost refers to ActualCost; difference = Substract(PlannedCost(ProductID(818))),(ActualCost(ProductID(818)));"}
{"sample_id": 7344, "db_id": "works_cycles", "final": {"question": "How many materials still need to be assembled and have a depth of 2 between each component and their parent product?", "sql": "SELECT COUNT(*) FROM BillOfMaterials WHERE BOMLevel = 2 AND EndDate IS NULL", "source_tables": ["billofmaterials"]}, "evidence": "still need to be assembled means the assembly doesn't finish or still going on which refers to EndDate IS NULL; a depth of 2 refers to BOMLevel = 2;"}
{"sample_id": 7345, "db_id": "works_cycles", "final": {"question": "How many of the approved documents are confidential?", "sql": "SELECT COUNT(DocumentNode) FROM Document WHERE Status = 2 AND DocumentSummary IS NULL", "source_tables": ["document"]}, "evidence": "approved refers to Status = 2; confidential document refers to DocumentSummary is null;"}
{"sample_id": 7346, "db_id": "works_cycles", "final": {"question": "What are the sales tax records charged by multiple types of tax?", "sql": "SELECT SalesTaxRateID FROM SalesTaxRate WHERE Name LIKE '%+%'", "source_tables": ["salestaxrate"]}, "evidence": "multiple types of tax refers to Name like '%+%';\n"}
{"sample_id": 7347, "db_id": "works_cycles", "final": {"question": "Which work order transaction number has the highest product quantity?", "sql": "SELECT TransactionID FROM TransactionHistory WHERE TransactionType = 'W' ORDER BY Quantity DESC LIMIT 1", "source_tables": ["transactionhistory"]}, "evidence": "work order transaction refers to TransactionType = 'W';"}
{"sample_id": 7348, "db_id": "works_cycles", "final": {"question": "Please list any 3 vendors that are not recommended by Adventure Works.", "sql": "SELECT Name FROM Vendor WHERE PreferredVendorStatus = 0 LIMIT 3", "source_tables": ["vendor"]}, "evidence": "not recommended refers to PreferredVendorStatus = 0;"}
{"sample_id": 7349, "db_id": "works_cycles", "final": {"question": "How many vendors does Adventure Works still work with but are not preferable?", "sql": "SELECT COUNT(BusinessEntityID) FROM Vendor WHERE PreferredVendorStatus = 0 AND ActiveFlag = 1", "source_tables": ["vendor"]}, "evidence": "not preferable refers to PreferredVendorStatus = 0; still work refers to ActiveFlag = 1;"}
{"sample_id": 7350, "db_id": "works_cycles", "final": {"question": "How many employees who began working in 2009 or later had night shifts?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Shift AS T2 ON T1.ShiftId = T2.ShiftId WHERE T2.ShiftId = 3 AND STRFTIME('%Y', T2.StartTime) >= '2009'", "source_tables": ["shift", "employeedepartmenthistory"]}, "evidence": "began work in 2009 or later refers to StartDate> = 2009;"}
{"sample_id": 7351, "db_id": "works_cycles", "final": {"question": "Which department, altogether, has the most personnel who work the evening shift?", "sql": "SELECT T3.Name FROM EmployeeDepartmentHistory AS T1 INNER JOIN Shift AS T2 ON T1.ShiftId = T2.ShiftId INNER JOIN Department AS T3 ON T1.DepartmentID = T3.DepartmentID WHERE T2.Name = 'Night' GROUP BY T3.Name ORDER BY COUNT(T1.BusinessEntityID) DESC LIMIT 1", "source_tables": ["department", "shift", "employeedepartmenthistory"]}, "evidence": "evening shift also means night shift where Name = 'Night';most personnel in evening shift refers to Max(Count(Shift.ShiftID(Name = 'Night')));"}
{"sample_id": 7352, "db_id": "works_cycles", "final": {"question": "How many shipments by truck were made?", "sql": "SELECT COUNT(*) FROM ShipMethod AS T1 INNER JOIN SalesOrderHeader AS T2 USING (ShipMethodID) WHERE T1.Name = 'XRQ - TRUCK GROUND'", "source_tables": ["shipmethod", "salesorderheader"]}, "evidence": "shipment by truck refers to Name = 'XRQ - TRUCK GROUND';"}
{"sample_id": 7353, "db_id": "works_cycles", "final": {"question": "What are the sales reasons for order 43718?", "sql": "SELECT T2.Name FROM SalesOrderHeaderSalesReason AS T1 INNER JOIN SalesReason AS T2 ON T1.SalesReasonID = T2.SalesReasonID WHERE T1.SalesOrderID = 43718", "source_tables": ["salesreason", "salesorderheadersalesreason"]}, "evidence": "order refers to SalesOrderID"}
{"sample_id": 7354, "db_id": "works_cycles", "final": {"question": "What bike subcategories are there?", "sql": "SELECT T1.Name FROM ProductSubcategory AS T1 INNER JOIN ProductCategory AS T2 ON T1.ProductCategoryID = T2.ProductCategoryID WHERE T2.name = 'Bikes'", "source_tables": ["productsubcategory", "productcategory"]}, "evidence": "bikes is product category"}
{"sample_id": 7355, "db_id": "works_cycles", "final": {"question": "Which sales areas are expected to have the highest yearly sales quota?", "sql": "SELECT T2.Name FROM SalesPerson AS T1 INNER JOIN SalesTerritory AS T2 ON T1.TerritoryID = T2.TerritoryID GROUP BY T1.TerritoryID ORDER BY SUM(T1.SalesQuota) DESC LIMIT 1", "source_tables": ["salesterritory", "salesperson"]}, "evidence": "highest yearly sales quota refers to Max(SalesQuota);"}
{"sample_id": 7356, "db_id": "works_cycles", "final": {"question": "What goods were sold to customers in accordance with sales order number 43660?", "sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN SalesOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.SalesOrderID = 43660", "source_tables": ["product", "salesorderdetail"]}, "evidence": "goods refers to products"}
{"sample_id": 7357, "db_id": "works_cycles", "final": {"question": "Please list the top 5 products with the most orders.", "sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN SalesOrderDetail AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.Name ORDER BY SUM(T2.OrderQty) DESC LIMIT 0, 5", "source_tables": ["product", "salesorderdetail"]}, "evidence": "most order refers to Max(OrderQty);"}
{"sample_id": 7358, "db_id": "works_cycles", "final": {"question": "Where are the shelves where the down tube product was stored?", "sql": "SELECT T2.Shelf FROM Product AS T1 INNER JOIN ProductInventory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Down Tube'", "source_tables": ["product", "productinventory"]}, "evidence": "shelves refer to shelf; down tube is a product"}
{"sample_id": 7359, "db_id": "works_cycles", "final": {"question": "Which address type does \"Fun Toys and Bikes\" fall under?", "sql": "SELECT T2.Name FROM BusinessEntityAddress AS T1 INNER JOIN AddressType AS T2 ON T1.AddressTypeID = T2.AddressTypeID INNER JOIN Store AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T3.Name = 'Fun Toys and Bikes'", "source_tables": ["businessentityaddress", "store", "addresstype"]}, "evidence": "Fun Toys and Bikes is name of a store"}
{"sample_id": 7360, "db_id": "works_cycles", "final": {"question": "Who is the \"Next-Door Bike Store\" point of contact?", "sql": "SELECT T1.Name FROM ContactType AS T1 INNER JOIN BusinessEntityContact AS T2 ON T1.ContactTypeID = T2.ContactTypeID INNER JOIN Store AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T3.Name = 'Next-Door Bike Store'", "source_tables": ["store", "businessentitycontact", "contacttype"]}, "evidence": "Next-Door Bike Store is name of a store"}
{"sample_id": 7361, "db_id": "works_cycles", "final": {"question": "What is the order reference number for the \"Mountain End Caps\" product?", "sql": "SELECT T2.ReferenceOrderID FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Mountain End Caps'", "source_tables": ["product", "transactionhistory"]}, "evidence": "Order Reference Number refers to ReferenceOrderID"}
{"sample_id": 7362, "db_id": "works_cycles", "final": {"question": "What is the 12th business's first line address?", "sql": "SELECT T1.AddressLine1 FROM Address AS T1 INNER JOIN BusinessEntityAddress AS T2 ON T1.AddressID = T2.AddressID WHERE T2.BusinessEntityID = 12", "source_tables": ["businessentityaddress", "address"]}, "evidence": "12th business refers to BusinessEntityID = 12;"}
{"sample_id": 7363, "db_id": "works_cycles", "final": {"question": "Please list any three businesses with their IDs that are located in Dallas City.", "sql": "SELECT T2.BusinessEntityID FROM Address AS T1 INNER JOIN BusinessEntityAddress AS T2 ON T1.AddressID = T2.AddressID WHERE T1.City = 'Dallas' LIMIT 3", "source_tables": ["businessentityaddress", "address"]}, "evidence": "business with ther ID refers to BusinessEntityID"}
{"sample_id": 7364, "db_id": "works_cycles", "final": {"question": "What is the name of the state that Racine belongs to?", "sql": "SELECT T2.Name FROM Address AS T1 INNER JOIN StateProvince AS T2 ON T1.StateProvinceID = T2.StateProvinceID WHERE T1.City = 'Racine'", "source_tables": ["stateprovince", "address"]}, "evidence": "Racine is a city"}
{"sample_id": 7365, "db_id": "works_cycles", "final": {"question": "What is the difference in percentage between the product descriptions written in Arabic and Thai?", "sql": "SELECT CAST(SUM(CASE WHEN T1.Name = 'Arabic' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.Name = 'Thai' THEN 1 ELSE 0 END) FROM Culture AS T1 INNER JOIN ProductModelProductDescriptionCulture AS T2 ON T1.CultureID = T2.CultureID", "source_tables": ["culture", "productmodelproductdescriptionculture"]}, "evidence": "Arabic and Thai are language names refers to name = 'Arabic'and name = 'Thai'; Differencce in percentage = Subtract(((Count(CultureID(name = 'Arabic'))/Count(CultureID))*100),((Count(CultureID(name = 'Thai'))/Count(CultureID))*100)));"}
{"sample_id": 7366, "db_id": "works_cycles", "final": {"question": "What percentage of businesses in the Northwest US have forecasted annual sales of above 300,000?", "sql": "SELECT CAST(SUM(CASE WHEN T1.SalesQuota > 300000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessEntityID) FROM SalesPerson AS T1 INNER JOIN SalesTerritory AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T2.CountryRegionCode = 'US' AND T2.Name = 'Northwest'", "source_tables": ["salesterritory", "salesperson"]}, "evidence": "Northwest refers to Name = 'Northwest'; US refers to CountryRegionCode = 'US'; forecasted annual sales of above 300,000 refers to SalesQuota >300000; Percentage = Divide(Count(TerritoryID(SalesQuota >300000)),Count(TerritoryID))*100"}
{"sample_id": 7367, "db_id": "works_cycles", "final": {"question": "What is the Crankarm product's net profit?", "sql": "SELECT T2.LastReceiptCost - T2.StandardPrice FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name LIKE '%Crankarm%'", "source_tables": ["product", "productvendor"]}, "evidence": "net profit = Subtract(LastReceiptCost, StandardPrice);"}
{"sample_id": 7368, "db_id": "works_cycles", "final": {"question": "What is the name of the product with the almost highest review score?", "sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Rating = ( SELECT Rating FROM ProductReview ORDER BY Rating DESC LIMIT 1 )", "source_tables": ["product", "productreview"]}, "evidence": "highest review score refers to Rating = 5;"}
{"sample_id": 7369, "db_id": "works_cycles", "final": {"question": "What is the company's second highest salary per hour for employees who are paid monthly?", "sql": "SELECT Rate FROM EmployeePayHistory WHERE PayFrequency = 1 ORDER BY Rate DESC LIMIT 1, 1", "source_tables": ["employeepayhistory"]}, "evidence": "salary received monthly refers to PayFrequency = 1; highest salary per hour refers to Max(Rate);"}
{"sample_id": 7370, "db_id": "works_cycles", "final": {"question": "How many Vista cards expired before the year 2007?", "sql": "SELECT COUNT(CreditCardID) FROM CreditCard WHERE CardType = 'Vista' AND ExpYear < 2007", "source_tables": ["creditcard"]}, "evidence": "Vista Card refers to CardType = 'Vista'; expire before the year 2007 refers to ExpYear< = 2006;\n\n"}
{"sample_id": 7371, "db_id": "works_cycles", "final": {"question": "What time does the company's night shift begin? Indicate the answer in regular form.", "sql": "SELECT StartTime FROM Shift WHERE Name = 'Night'", "source_tables": ["shift"]}, "evidence": "Night shift refers to Name = 'Night';"}
{"sample_id": 7372, "db_id": "works_cycles", "final": {"question": "What is the weight in pounds of the style that is produced the most by the company? If there are multiple products sharing the same weight, indicate the name of each one of them and their corresponding weights.", "sql": "SELECT Weight FROM Product WHERE WeightUnitMeasureCode = 'LB' GROUP BY Weight ORDER BY COUNT(Style) DESC LIMIT 1", "source_tables": ["product"]}, "evidence": "weight in pounds refers to WeightUnitMeasureCode = 'LB';"}
{"sample_id": 7373, "db_id": "works_cycles", "final": {"question": "Which territory has the greatest difference in sales from previous year to this year? Indicate the difference, as well as the name and country of the region.", "sql": "SELECT SalesLastYear - SalesYTD, Name, CountryRegionCode FROM SalesTerritory ORDER BY SalesLastYear - SalesYTD DESC LIMIT 1", "source_tables": ["salesterritory"]}, "evidence": "greatest difference in sales from previous year to this year refers to Max(Subtract(SalesLastYear,SalesYTD));"}
{"sample_id": 7374, "db_id": "works_cycles", "final": {"question": "What are the names of the top 6 products that has the biggest size in centimeter and what are its reorder point?", "sql": "SELECT Name, ReorderPoint FROM Product WHERE SizeUnitMeasureCode = 'CM' ORDER BY Size DESC LIMIT 6", "source_tables": ["product"]}, "evidence": "in centimeter refers to SizeUnitMeasureCode = 'CM';"}
{"sample_id": 7375, "db_id": "works_cycles", "final": {"question": "How much is the amount to be paid by the company for the purchase order with the third highest freight amount?", "sql": "SELECT TotalDue FROM PurchaseOrderHeader ORDER BY Freight DESC LIMIT 2, 1", "source_tables": ["purchaseorderheader"]}, "evidence": "amount to be paid refers to TotalDue;"}
{"sample_id": 7376, "db_id": "works_cycles", "final": {"question": "What profit will the company gain if they sell 10 items of the product that has the lightest weight?", "sql": "SELECT 10 * (ListPrice - StandardCost) FROM Product WHERE Weight IS NOT NULL ORDER BY Weight LIMIT 1", "source_tables": ["product"]}, "evidence": "Lightest product refers to Min(Weight); profit if they sell 10 items refers to Subtract (ListPrice , StandardCost) *10;"}
{"sample_id": 7556, "db_id": "image_and_language", "final": {"question": "Calculate the percentage of \"airplane\" object class in the table.", "sql": "SELECT CAST(SUM(CASE WHEN T2.OBJ_CLASS = 'airplane' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.OBJ_CLASS) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "DIVIDE(SUM(OBJ_SAMPLE_ID where OBJ_CLASS = 'airplane'), COUNT(OBJ_CLASS)) as percentage;"}
{"sample_id": 7557, "db_id": "image_and_language", "final": {"question": "How many samples of animal objects are there in image no.660?", "sql": "SELECT COUNT(T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'animal' AND T1.IMG_ID = 660", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "samples of animal objects refer to OBJ_SAMPLE_ID where OBJ_CLASS = 'animal'; image no.660 refers to IMG_ID = 660;"}
{"sample_id": 7558, "db_id": "image_and_language", "final": {"question": "Name number of samples of \"bed\" object are there in the image No.1098?", "sql": "SELECT SUM(CASE WHEN T2.OBJ_CLASS = 'bed' THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 1098", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "samples of \"bed\" object refer to OBJ_SAMPLE_ID where OBJ_CLASS = 'bed'; image No.1098 refers to IMG_ID = 1098;"}
{"sample_id": 7559, "db_id": "image_and_language", "final": {"question": "Name the object class of the image with lowest bounding box.", "sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID ORDER BY T1.H LIMIT 1", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "bounding box refers to X, Y, W, H from IMG_OBJ; lowest relates to the height of the bounding box which refers to MIN(H);"}
{"sample_id": 7560, "db_id": "image_and_language", "final": {"question": "Indicating the bounding box of \"kitchen\" in image id 250.", "sql": "SELECT T1.X, T1.Y, T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 250 AND T2.OBJ_CLASS = 'kitchen'", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "bounding box refers to X, Y, W, H from IMG_OBJ; \"kitchen\" in image id 250 refers to OBJ_CLASS = 'kitchen' where IMG_ID = 250;"}
{"sample_id": 7561, "db_id": "image_and_language", "final": {"question": "Which images have more than 20 object samples?", "sql": "SELECT IMG_ID FROM IMG_OBJ GROUP BY IMG_ID HAVING COUNT(IMG_ID) > 20", "source_tables": ["img_obj"]}, "evidence": "images have more than 20 object samples refer to IMG_ID where COUNT(OBJ_SAMPLE_ID) > 20;"}
{"sample_id": 7562, "db_id": "image_and_language", "final": {"question": "Which object in image 8 is the widest? State its object sample ID.", "sql": "SELECT OBJ_SAMPLE_ID FROM IMG_OBJ WHERE IMG_ID = 8 ORDER BY W DESC LIMIT 1", "source_tables": ["img_obj"]}, "evidence": "widest relates to the width of the bounding\nbox of the object which refers to MAX(W); object in image 8 refers to OBJ_SAMPLE_ID where IMG_ID = 8;"}
{"sample_id": 7563, "db_id": "image_and_language", "final": {"question": "Find the object in image 5 where the object with the coordinate of (634, 468).", "sql": "SELECT OBJ_SAMPLE_ID FROM IMG_OBJ WHERE IMG_ID = 5 AND X = 634 AND Y = 468", "source_tables": ["img_obj"]}, "evidence": "object in image 5 refers to OBJ_SAMPLE_ID where IMG_ID = 5; coordinates of (634, 468) refer to X and Y coordinates of the bounding box in which X = 634 and Y = 468;"}
{"sample_id": 7564, "db_id": "image_and_language", "final": {"question": "Which object has the highest attribute classes?", "sql": "SELECT OBJ_SAMPLE_ID FROM IMG_OBJ_ATT GROUP BY OBJ_SAMPLE_ID ORDER BY COUNT(OBJ_SAMPLE_ID) DESC LIMIT 1", "source_tables": ["img_obj_att"]}, "evidence": "object has the highest attribute classes refers to OBJ_SAMPLE_ID where MAX(COUNT(OBJ_SAMPLE_ID));"}
{"sample_id": 7565, "db_id": "image_and_language", "final": {"question": "What is the ratio between the number of object samples in image 1 and the number of object samples in image 6?", "sql": "SELECT CAST(SUM(CASE WHEN IMG_ID = 1 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN IMG_ID = 6 THEN 1 ELSE 0 END) FROM IMG_OBJ", "source_tables": ["img_obj"]}, "evidence": "DIVIDE(SUM(OBJ_SAMPLE_ID where IMG_ID = 1), SUM(OBJ_SAMPLE_ID where IMG_ID = 6));"}
{"sample_id": 7566, "db_id": "image_and_language", "final": {"question": "Calculate the average of object samples for the image.", "sql": "SELECT CAST(COUNT(OBJ_SAMPLE_ID) AS REAL) / COUNT(DISTINCT IMG_ID) FROM IMG_OBJ", "source_tables": ["img_obj"]}, "evidence": "DIVIDE(COUNT(OBJ_SAMPLE_ID), COUNT(IMG_ID));"}
{"sample_id": 7567, "db_id": "image_and_language", "final": {"question": "List all the IDs of images that have objects with the attributes of 'wired'.", "sql": "SELECT DISTINCT T2.IMG_ID FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.ATT_CLASS = 'wired'", "source_tables": ["img_obj_att", "att_classes"]}, "evidence": "IDs of images refer to IMG_ID; objects with the attributes of 'wired' refer to ATT_CLASS = 'wired';"}
{"sample_id": 7568, "db_id": "image_and_language", "final": {"question": "List all the object classes in image 10.", "sql": "SELECT DISTINCT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 10", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "object classes refer to OBJ_CLASS; image 10 refers to IMG_ID = 10;"}
{"sample_id": 7569, "db_id": "image_and_language", "final": {"question": "List attributes for object class 'tip' In image 1314.", "sql": "SELECT T1.ATT_CLASS FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T3.IMG_ID = 1314 AND T4.OBJ_CLASS = 'tip'", "source_tables": ["img_obj_att", "att_classes", "obj_classes", "img_obj"]}, "evidence": "attributes for object refer to ATT_CLASS; class 'tip' in image 1314 refers to OBJ_CLASS = 'tip' where IMG_ID = 1314;"}
{"sample_id": 7570, "db_id": "image_and_language", "final": {"question": "What is the prediction class between object class 'chain' and 'label' in image 2360078?", "sql": "SELECT DISTINCT T2.PRED_CLASS FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T2.PRED_CLASS_ID = T1.PRED_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T1.IMG_ID = T3.IMG_ID AND T1.OBJ1_SAMPLE_ID = T3.OBJ_SAMPLE_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T1.IMG_ID = 2360078 AND T1.OBJ1_SAMPLE_ID = 15 OR T1.OBJ2_SAMPLE_ID = 18", "source_tables": ["obj_classes", "img_rel", "pred_classes", "img_obj"]}, "evidence": "prediction class refers to PRED_CLASS; object class 'chain' refers to OBJ_CLASS = 'chain'; object class 'label' refers to OBJ_CLASS = 'label'; image 2360078 refers to IMG_ID = 2360078;"}
{"sample_id": 7571, "db_id": "image_and_language", "final": {"question": "How many images have objects with the attributes of polka dot?", "sql": "SELECT COUNT(T2.OBJ_SAMPLE_ID) FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.ATT_CLASS = 'polka dot'", "source_tables": ["img_obj_att", "att_classes"]}, "evidence": "attributes of polka dot refer to ATT_CLASS = 'polka dot'; images refer to IMG_ID;"}
{"sample_id": 7572, "db_id": "image_and_language", "final": {"question": "What are the attributes of the widest object in image 400?", "sql": "SELECT T1.ATT_CLASS FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID WHERE T2.IMG_ID = 400 ORDER BY T3.W DESC LIMIT 1", "source_tables": ["img_obj_att", "att_classes", "img_obj"]}, "evidence": "attributes refer to ATT_CLASS; the widest relates to the width of the bounding\nbox of the object which refers to MAX(W); image 400 refers to IMG_ID = 400;"}
{"sample_id": 7573, "db_id": "image_and_language", "final": {"question": "State the name of the object class that has in most images.", "sql": "SELECT OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID GROUP BY T2.OBJ_CLASS ORDER BY COUNT(T1.OBJ_CLASS_ID) DESC LIMIT 1", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "object class that has in most images refers to OBJ_CLASS where MAX(COUNT(OBJ_CLASS_ID));"}
{"sample_id": 7574, "db_id": "image_and_language", "final": {"question": "State the width and height of the object with the class of 'van' in image 1.", "sql": "SELECT T1.H, T1.W FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 1 AND T2.OBJ_CLASS = 'van'", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "The bounding box's W and H abbreviations stand for the object's width and height respectively; class of 'van' in image 1 refers to OBJ_CLASS = 'van' where IMG_ID = 1;"}
{"sample_id": 7575, "db_id": "image_and_language", "final": {"question": "State the coordinate of X and Y for the object with the attribute of 'sparse' in image 1.", "sql": "SELECT T3.OBJ_SAMPLE_ID, T3.X, T3.Y FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID WHERE T3.IMG_ID = 1 AND T1.ATT_CLASS = 'sparse'", "source_tables": ["img_obj_att", "att_classes", "img_obj"]}, "evidence": "coordinates of X and Y for the object refer to X and Y coordinates of the bounding box; attribute of 'sparse' in image 1 refers to IMG_ID = 1 where ATT_CLASS = 'sparse';"}
{"sample_id": 7576, "db_id": "image_and_language", "final": {"question": "Calculate the percentage of object samples that are related to street lights.", "sql": "SELECT CAST(SUM(CASE WHEN T2.OBJ_CLASS = 'street lights' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OBJ_SAMPLE_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "DIVIDE(COUNT(OBJ_SAMPLE_ID where OBJ_CLASS = 'street lights'), COUNT(OBJ_SAMPLE_ID)) as percentage;"}
{"sample_id": 7577, "db_id": "image_and_language", "final": {"question": "Based on image 5, what is the percentage of images that belong windows object class?", "sql": "SELECT CAST(COUNT(T1.OBJ_SAMPLE_ID) AS REAL) * 100 / COUNT(CASE WHEN T1.IMG_ID = 5 THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'windows'", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "DIVIDE(COUNT(OBJ_SAMPLE_ID where OBJ_CLASS = 'windows' and IMG_ID = 5), COUNT(OBJ_SAMPLE_ID where IMG_ID = 5)) as percentage;"}
{"sample_id": 7578, "db_id": "image_and_language", "final": {"question": "How many images have an x-coordinate of 5 and y-coordinate of 5?", "sql": "SELECT COUNT(IMG_ID) FROM IMG_OBJ WHERE X = 5 AND Y = 5", "source_tables": ["img_obj"]}, "evidence": "X and Y refer to coordinates of the bounding box where X = 5 and Y = 5; images refer to IMG_ID;"}
{"sample_id": 7579, "db_id": "image_and_language", "final": {"question": "How many images have less than 15 object samples?", "sql": "SELECT COUNT(IMG_ID) FROM IMG_OBJ WHERE OBJ_SAMPLE_ID < 15", "source_tables": ["img_obj"]}, "evidence": "images refer to IMG_ID; less than 15 object samples refer to COUNT(OBJ_SAMPLE_ID) < 15;"}
{"sample_id": 7580, "db_id": "image_and_language", "final": {"question": "How many images have a total of 10 attribute classes?", "sql": "SELECT COUNT(IMG_ID) FROM IMG_OBJ WHERE OBJ_CLASS_ID = 10", "source_tables": ["img_obj"]}, "evidence": "images refer to IMG_ID; total of 10 attribute classes refers to COUNT(OBJ_CLASS_ID) = 10;"}
{"sample_id": 7581, "db_id": "image_and_language", "final": {"question": "List the ID of all images with objects that have multiple relations.", "sql": "SELECT IMG_ID FROM IMG_REL GROUP BY PRED_CLASS_ID HAVING COUNT(DISTINCT OBJ1_SAMPLE_ID) != 0 AND COUNT(DISTINCT OBJ2_SAMPLE_ID) != 0", "source_tables": ["img_rel"]}, "evidence": "ID of all images refer to IMG_ID; if two objects (OBJ1_SAMPLE_ID,\nOBJ2_SAMPLE_ID) has\nmultiple PRED_CLASS_ID, it\nmeans these two objects\nhave multiple relations;"}
{"sample_id": 7582, "db_id": "image_and_language", "final": {"question": "How many images have \"vegetable\" and \"fruits\" as their object classes?", "sql": "SELECT COUNT(T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'vegetables' OR T2.OBJ_CLASS = 'fruits'", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "images refer to IMG_ID; \"vegetables\" and \"fruits\" as object classes refer to OBJ_CLASS = 'vegetables' and OBJ_CLASS = 'fruits';"}
{"sample_id": 7736, "db_id": "hockey", "final": {"question": "What is the power play percentage of the team with the least number of penalty kill chances and to which team were they playing against? Indicate whether the team lost or victorious.", "sql": "SELECT SUM(T1.A), T2.firstName, T2.lastName FROM Scoring AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.lgID = 'NHL' GROUP BY T2.firstName, T2.lastName ORDER BY SUM(T1.A) DESC LIMIT 1", "source_tables": ["master", "scoring"]}, "evidence": "least number of penalty kill chances refers to min(PKC); power play percentage refers to (PP%) = divide(PPG, PPC); team playing refers to tmID; victorious team refers to tmIDWinner; team victorious refers to tmID = tmIDWinner and vice versa"}
{"sample_id": 7737, "db_id": "hockey", "final": {"question": "What are the awards won by the coach who coached the team with the most number of victories of all time? Indicate the choach ID.", "sql": "SELECT DISTINCT T2.coachID, T1.award FROM AwardsCoaches AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID GROUP BY T2.coachID, T1.award ORDER BY SUM(T2.w) DESC LIMIT 1", "source_tables": ["coaches", "awardscoaches"]}, "evidence": "victories' and 'wins' are synonyms; most number of victories refers to max(w)"}
{"sample_id": 7738, "db_id": "hockey", "final": {"question": "What is the name of the losing team during an exhibition game in 1912?", "sql": "SELECT T2.name FROM SeriesPost AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND tmIDLoser = tmID WHERE T1.note = 'EX' AND T2.year = '1912'", "source_tables": ["seriespost", "teams"]}, "evidence": "exhibition game refers to note = 'EX'; team of losing team refers to tmIDLoser"}
{"sample_id": 7739, "db_id": "hockey", "final": {"question": "How long has the NHL player been playing during the year when he recorded the least number of times being on the ice when a goal is scored for the team versus against the team? Indicate his full name.", "sql": "SELECT DISTINCT T3.firstNHL - T1.year, T3.nameGiven , T3.firstName, T3.lastName FROM Scoring AS T1 INNER JOIN Teams AS T2 ON T2.tmID = T1.tmID INNER JOIN Master AS T3 ON T1.playerID = T3.playerID GROUP BY T3.firstName, T3.lastName, T3.nameGiven, T3.firstNHL - T1.year, T3.firstName, T3.lastName ORDER BY SUM(T1.'+/-') ASC LIMIT 1", "source_tables": ["master", "scoring", "teams"]}, "evidence": "NHL refers to lgID = 'NHL'; least number of times being on the ice when a goal is scored for the team versus against the team refers to min(+/-); duration the player's been playing = subtract(year(playerID(min(+/-))), firstNHL(playerID(min(+/-)))); full name = nameGiven + lastName"}
{"sample_id": 7740, "db_id": "hockey", "final": {"question": "Between 2003 to 2005, what are the given names of the players with the most number of games played whose Penalty minutes is between 200 to 250?", "sql": "SELECT T2.nameGiven FROM Scoring AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID AND T1.PIM BETWEEN 200 AND 250 AND T1.year BETWEEN 2003 AND 2005 ORDER BY T1.GP DESC LIMIT 1", "source_tables": ["master", "scoring"]}, "evidence": "penalty minutes refers to PIM; year of scoring BETWEEN 2003 AND 2005; most number of games played refers to max(GP)"}
{"sample_id": 7741, "db_id": "hockey", "final": {"question": "How old was the goaltender who scored the fewest goals while on the ice when he retired from the NHL?", "sql": "SELECT T2.lastNHL - T2.birthYear FROM GoaliesSC AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.lastNHL IS NOT NULL GROUP BY T2.lastNHL, T2.birthYear ORDER BY SUM(GA) LIMIT 1", "source_tables": ["master", "goaliessc"]}, "evidence": "goaltender' and 'goalie' are synonyms; fewest goals while on the ice refers to min(GA); How old = subtract(lastNHL(playerID(min(GA))), birthYear(playerID(min(GA)))))"}
{"sample_id": 7742, "db_id": "hockey", "final": {"question": "Which position has won the most awards and who is the most recent player that was awarded with an award in that position? Indicate the name of the award and the full name of the player.", "sql": "SELECT T1.pos, T2.award, T1.nameGiven, T1.lastName FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T2.coachID = T1.coachID GROUP BY T1.pos, T2.award, T1.nameGiven, T1.lastName ORDER BY COUNT(T2.award) LIMIT 1", "source_tables": ["master", "awardscoaches"]}, "evidence": "position has won the most awards refers to pos(max(count(award))); most recent player refers to playerID(pos(max(count(award)))& max(year)); full name = nameGiven + lastName"}
{"sample_id": 7743, "db_id": "hockey", "final": {"question": "How many games did the coach who received the first-ever Second Team All-Star award play before receiving such award?", "sql": "SELECT SUM(T1.g) FROM Coaches AS T1 INNER JOIN ( SELECT coachID, year FROM AwardsCoaches WHERE award = 'Second Team All-Star' ORDER BY year LIMIT 1 ) AS T2 ON T1.coachID = T2.coachID AND T1.year < T2.year", "source_tables": ["coaches", "awardscoaches"]}, "evidence": "first-ever Second Team All-Star award refers to min(year(award = 'Second Team All-Star')); How many games before receiving such award = sum(g(coachID(min(year(award = 'Second Team All-Star')))): g(min(year)))"}
{"sample_id": 7744, "db_id": "hockey", "final": {"question": "How many teams did the team with the most victories in 1915 play against?\nIndicate the name of the team who won the most games in 1915, as well as the names of the opposing team.", "sql": "SELECT COUNT(DISTINCT oppID), T2.tmID, T2.oppID FROM Teams AS T1 INNER JOIN TeamVsTeam AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID WHERE T2.year = 1915 GROUP BY T2.tmID, T2.oppID ORDER BY SUM(T2.W) DESC LIMIT 1", "source_tables": ["teamvsteam", "teams"]}, "evidence": "team playing refers to tmID; oppositng team refers to oppID; victories' and 'wins' are synonyms; most victories refers to max(w)"}
{"sample_id": 7745, "db_id": "hockey", "final": {"question": "Among the teams whose shorthanded goals are between 1 to 5, which player is the most trustworthy in the critical moment?", "sql": "SELECT T2.nameGiven, T2.lastName FROM Scoring AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.SHG BETWEEN 1 AND 5 ORDER BY T1.GWG DESC LIMIT 1", "source_tables": ["master", "scoring"]}, "evidence": "shorthanded goals refers to SHG; SHG BETWEEN 1 AND 5; most trustworthy in the critical moment refers to max(GWG)"}
{"sample_id": 7746, "db_id": "hockey", "final": {"question": "In 1997, how many loss did the coach have who temporary coached Tampa Bay Lightning? Indicate his/her coach ID.", "sql": "SELECT SUM(T1.l), T1.coachID FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.notes = 'interim' AND T1.year = '1997' AND T2.name = 'Tampa Bay Lightning' GROUP BY T1.coachID", "source_tables": ["coaches", "teams"]}, "evidence": "temporary coached refers to notes = 'interim'; number of loss refers to L (to add)"}
{"sample_id": 7747, "db_id": "hockey", "final": {"question": "Among the players whose short handed assists are greater or equal to 7, what is the final standing of the team with the most number of assists? Indicate the year to which the most number of assists was achieved and the name of the team.", "sql": "SELECT T2.rank, T2.year, T2.name FROM Scoring AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.SHA >= 7 ORDER BY T1.A DESC LIMIT 1", "source_tables": ["scoring", "teams"]}, "evidence": "short handed assists refers to SHA; SHA> = 7; final standing refers to rank; the final standing of the team with the most number of assists refers to max(A)\n"}
{"sample_id": 7748, "db_id": "hockey", "final": {"question": "What is the name of the coach whose team placed 4th in the 1969 game? Indicate their coachID.", "sql": "SELECT T1.coachID FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 1969 AND T2.rank = 4", "source_tables": ["coaches", "teams"]}, "evidence": "name of coach refers to coachID; placed 4th refers to rank = 4; 1969 game refers to year = 1969"}
{"sample_id": 7749, "db_id": "hockey", "final": {"question": "Between 1917 to 1920, what are the names of the team who ranked first in the first half of the season each year?", "sql": "SELECT DISTINCT T2.name FROM TeamsHalf AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.half = 1 AND T1.rank = 1 AND T1.year BETWEEN 1917 AND 1920", "source_tables": ["teamshalf", "teams"]}, "evidence": "year BETWEEN 1917 AND 1920; first half of season refers to half = 1"}
{"sample_id": 7750, "db_id": "hockey", "final": {"question": "How many Canadian players, between the ages of 18 and 24 when they initially played their first NHL, had a cumulative goal total of no more than 5? Indicate their complete names, the year, and the team for which they scored the specified amount of goals.", "sql": "SELECT T2.nameGiven, T2.lastName, T2.birthYear, birthMon, birthDay , T3.tmID FROM Scoring AS T1 INNER JOIN Master AS T2 ON T2.playerID = T1.playerID INNER JOIN Teams AS T3 ON T3.tmID = T1.tmID WHERE (T2.firstNHL - T2.birthYear) BETWEEN 18 AND 24 AND T3.G < 5", "source_tables": ["master", "scoring", "teams"]}, "evidence": "Canadian players mean player whose birthCountry = Canada; ages of 18 and 24 refers to SUBTRACT(firstNHL, birthYear) BETWEEN 18 AND 24; cumulative goal total of no more than 5 refers to G < 5; complete name = nameGiven + lastName"}
{"sample_id": 7751, "db_id": "hockey", "final": {"question": "How many bench minor penalties did the team St. Louis Blues got in total in all the games?", "sql": "SELECT CAST(SUM(BenchMinor) AS REAL) / 2 FROM Teams WHERE name = 'St. Louis Blues'", "source_tables": ["teams"]}, "evidence": ""}
{"sample_id": 7752, "db_id": "hockey", "final": {"question": "What is the power play chances of New York Rangers in 2009?", "sql": "SELECT CAST(PPG AS REAL) / PPC FROM Teams WHERE year = 2009 AND name = 'New York Rangers'", "source_tables": ["teams"]}, "evidence": "power play chanses = DIVIDE (PPG, PPC); name = New York Rangers; year = 2009"}
{"sample_id": 7753, "db_id": "hockey", "final": {"question": "What is the highest total points a team got in a year?", "sql": "SELECT SUM(Pts), year FROM Teams GROUP BY year, tmID ORDER BY SUM(Pts) DESC LIMIT 1", "source_tables": ["teams"]}, "evidence": "the highest total points = MAX(Pts)"}
{"sample_id": 7754, "db_id": "hockey", "final": {"question": "Among the teams that had more wins than loses in the year 2006, how many of them have over 100 points?", "sql": "SELECT COUNT(tmID) FROM Teams WHERE year = 2006 AND W > L AND Pts > 100", "source_tables": ["teams"]}, "evidence": "more wins than loses refers to W > L; over 100 points refers to Pts > 100"}
{"sample_id": 7755, "db_id": "hockey", "final": {"question": "Which team got the most bench minor penalties in 2006?", "sql": "SELECT name FROM Teams WHERE year = 2006 GROUP BY tmID, name ORDER BY CAST(SUM(BenchMinor) AS REAL) / 2 DESC LIMIT 1", "source_tables": ["teams"]}, "evidence": "team refers to name; year = 2006"}
{"sample_id": 7756, "db_id": "hockey", "final": {"question": "Please list the first 3 teams that got the most penalty minutes in 2006.", "sql": "SELECT name FROM Teams WHERE year = 2006 GROUP BY tmID, name ORDER BY SUM(PIM) DESC LIMIT 3", "source_tables": ["teams"]}, "evidence": "the first 3 teams that got the most penalty minutes refer to name where MAX(PIM) limit to 3; year = 2006;"}
{"sample_id": 7757, "db_id": "hockey", "final": {"question": "Which team had the highest penalty kill chances in 1995, Florida Panthers, Edmonton Oilers or Los Angeles Kings?", "sql": "SELECT name FROM Teams WHERE year = 1995 AND name IN ('Florida Panthers', 'Edmonton Oilers', 'Los Angeles Kings') ORDER BY PKC DESC LIMIT 1", "source_tables": ["teams"]}, "evidence": "the highest penalty kill chances refer to MAX(PKC); year = 1995;"}
{"sample_id": 7758, "db_id": "hockey", "final": {"question": "What is the name of the team that got more wins than loses in the Stanley Cup finals in 1917?", "sql": "SELECT T2.name FROM TeamsSC AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = '1917' AND T1.W > T1.L", "source_tables": ["teamssc", "teams"]}, "evidence": "more wins than loses refers to W>L; year = 1917;"}
{"sample_id": 7759, "db_id": "hockey", "final": {"question": "Please list the teams that have played in 1922's Stanley Cup finals.", "sql": "SELECT T2.name FROM TeamsSC AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = '1922'", "source_tables": ["teamssc", "teams"]}, "evidence": "teams refer to tmID; year = 1922;"}
{"sample_id": 7760, "db_id": "hockey", "final": {"question": "Among the teams that played in 1922's Stanley Cup finals, how many of them had over 20 points in that year?", "sql": "SELECT COUNT(T1.tmID) FROM TeamsSC AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = '1922' AND T2.Pts > 20", "source_tables": ["teamssc", "teams"]}, "evidence": "how many teams refer to COUNT(tmID); over 20 points refer to Pts>20; year = 1922;"}
{"sample_id": 7761, "db_id": "hockey", "final": {"question": "What were the penalty minutes in 1923's Stanley Cup finals of the team that ranked second in that year?", "sql": "SELECT T1.PIM FROM TeamsSC AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = '1923' AND T2.rank = 2", "source_tables": ["teamssc", "teams"]}, "evidence": "teams refer to tmID; year = 1922; ranked second refers to rank = 2; penalty minutes refer to PIM;"}
{"sample_id": 7762, "db_id": "hockey", "final": {"question": "Which team got the most wins in the Stanley Cup finals?", "sql": "SELECT T2.name FROM TeamsSC AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year GROUP BY T2.name ORDER BY SUM(T1.W) DESC LIMIT 1", "source_tables": ["teamssc", "teams"]}, "evidence": "team refers name; most wins = MAX(W);"}
{"sample_id": 7763, "db_id": "hockey", "final": {"question": "How many wins did the Philadelphia Flyers have over the Boston Bruins in 1985?", "sql": "SELECT T1.W FROM TeamVsTeam AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 1985 AND T1.tmID = ( SELECT DISTINCT tmID FROM Teams WHERE name = 'Philadelphia Flyers' ) AND T1.oppID = ( SELECT DISTINCT tmID FROM Teams WHERE name = 'Boston Bruins' )", "source_tables": ["teamvsteam", "teams"]}, "evidence": "Philadelphia Flyers is name of team playing; Boston Bruins is name of opposing team where oppID = 'BOS'; year = 1985; wins refer to W;"}
{"sample_id": 7764, "db_id": "hockey", "final": {"question": "Please list the names of the teams that had a tie in 1909.", "sql": "SELECT T2.name, T3.name FROM TeamVsTeam AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Teams AS T3 ON T1.year = T3.year AND T1.oppID = T3.tmID WHERE T1.year = 1909 AND T1.T = 1", "source_tables": ["teamvsteam", "teams"]}, "evidence": "tie refers to T>0; year = 1909;"}
{"sample_id": 7765, "db_id": "hockey", "final": {"question": "Please list the first names of the coaches who have taught the Montreal Canadiens.", "sql": "SELECT DISTINCT T3.firstName FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Montreal Canadiens'", "source_tables": ["master", "coaches", "teams"]}, "evidence": "Montreal Canadiens is the name of team."}
{"sample_id": 7766, "db_id": "hockey", "final": {"question": "How many coaches of the Montreal Canadiens have gotten in the Hall of Fame?", "sql": "SELECT COUNT(DISTINCT hofID) FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Montreal Canadiens'", "source_tables": ["master", "coaches", "teams"]}, "evidence": "have gotten in the Hall of Fame means hofID is not NULL;\n\nMontreal Canadiens is the name of team."}
{"sample_id": 7767, "db_id": "hockey", "final": {"question": "Please give the height of the tallest coach of the Montreal Canadiens.", "sql": "SELECT T3.height FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Montreal Canadiens' AND T3.coachID IS NOT NULL ORDER BY T3.height DESC LIMIT 1", "source_tables": ["master", "coaches", "teams"]}, "evidence": "the tallest refers to MAX(height); Montreal Canadiens is the name of team;"}
{"sample_id": 7768, "db_id": "hockey", "final": {"question": "Please list the first names of the coaches whose team played in 1922's Stanley Cup finals.", "sql": "SELECT T3.firstName FROM Coaches AS T1 INNER JOIN TeamsSC AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.year = 1922", "source_tables": ["master", "teamssc", "coaches"]}, "evidence": "teams refer to tmID; year = 1922;"}
{"sample_id": 7769, "db_id": "hockey", "final": {"question": "Among the coaches who have taught the Philadelphia Flyers, how many of them are born in March?", "sql": "SELECT COUNT(DISTINCT T3.coachID) FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Philadelphia Flyers' AND T3.birthMon = 3", "source_tables": ["master", "coaches", "teams"]}, "evidence": "born in March refers to birthMon = 3; Philadelphia Flyers is the name of team;"}
{"sample_id": 7770, "db_id": "hockey", "final": {"question": "Among the coaches who are born in the USA, how many of them used to train the Philadelphia Flyers?", "sql": "SELECT COUNT(DISTINCT T3.coachID) FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Philadelphia Flyers' AND T3.birthCountry = 'USA'", "source_tables": ["master", "coaches", "teams"]}, "evidence": "born in the USA refers to birthCountry = 'USA'; Philadelphia Flyers is the name of team;"}
{"sample_id": 7771, "db_id": "hockey", "final": {"question": "How many coaches who have taught the Buffalo Sabres have died?", "sql": "SELECT COUNT(DISTINCT T3.coachID) FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Buffalo Sabres' AND T3.deathYear IS NOT NULL", "source_tables": ["master", "coaches", "teams"]}, "evidence": "have died means deathYear is not NULL; Buffalo Sabres is the name of team;"}
{"sample_id": 7772, "db_id": "hockey", "final": {"question": "Please list the nick names of the coaches who are from the USA and have taught the Buffalo Sabres.", "sql": "SELECT DISTINCT nameNick FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Buffalo Sabres' AND T3.birthCountry = 'USA'", "source_tables": ["master", "coaches", "teams"]}, "evidence": "from the USA refers to birthCountry = 'USA'; nick names of the coaches refer to nameNick where coachID is not NULL ; Buffalo Sabres is the name of team;"}
{"sample_id": 7773, "db_id": "hockey", "final": {"question": "Among the coaches who taught the teams in 1922's Stanley Cup finals, how many of them are from the USA?", "sql": "SELECT COUNT(DISTINCT T3.coachID) FROM Coaches AS T1 INNER JOIN TeamsSC AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.year = 1922 AND T3.birthCountry = 'USA'", "source_tables": ["master", "teamssc", "coaches"]}, "evidence": "from the USA refers to birthCountry = 'USA'; year = 1922;"}
{"sample_id": 7774, "db_id": "hockey", "final": {"question": "In the year 2000, which team has played the most games against the Buffalo Sabres?", "sql": "SELECT T3.name FROM TeamVsTeam AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.oppID = T2.tmID INNER JOIN Teams AS T3 ON T1.year = T3.year AND T1.tmID = T3.tmID WHERE T1.year = 2000 AND T2.name = 'Buffalo Sabres' GROUP BY T3.name ORDER BY SUM(T2.G) DESC LIMIT 1", "source_tables": ["teamvsteam", "teams"]}, "evidence": "which team played the most games against refers to oppID where MAX(SUM(G); Buffalo Sabres is the name of team;"}
{"sample_id": 7775, "db_id": "hockey", "final": {"question": "Please list the names of all the teams that have played against the Buffalo Sabres.", "sql": "SELECT DISTINCT T3.name FROM TeamVsTeam AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.oppID = T2.tmID INNER JOIN Teams AS T3 ON T1.year = T3.year AND T1.tmID = T3.tmID WHERE T2.name = 'Buffalo Sabres'", "source_tables": ["teamvsteam", "teams"]}, "evidence": "teams that have played against refer to oppID; Buffalo Sabres is the name of team;"}
{"sample_id": 7776, "db_id": "hockey", "final": {"question": "How many penalty minutes did the Montreal Canadiens have in the 1918's Stanley Cup Finals?", "sql": "SELECT T2.PIM FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens' AND T1.year = 1918", "source_tables": ["teamssc", "teams"]}, "evidence": "penalty minutes refer to PIM; year = 1918; Montreal Canadiens is name of team;"}
{"sample_id": 7878, "db_id": "world", "final": {"question": "What is the percentage of English used in Australia?", "sql": "SELECT T2.Percentage FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Australia' AND T2.Language = 'English'", "source_tables": ["countrylanguage", "country"]}, "evidence": "English refers to Language = 'English'; Australia is a name of country;"}
{"sample_id": 7879, "db_id": "world", "final": {"question": "List down languages used in Malaysia.", "sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Malaysia'", "source_tables": ["countrylanguage", "country"]}, "evidence": "Malaysia is a name of country;"}
{"sample_id": 7880, "db_id": "world", "final": {"question": "Which country has the most crowded city in the world?", "sql": "SELECT T1.Name FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode ORDER BY T2.Population DESC LIMIT 1", "source_tables": ["country", "city"]}, "evidence": "most crowded city refers to MAX(Population);"}
{"sample_id": 7881, "db_id": "world", "final": {"question": "What is the life expectancy of residents in the most crowded city?", "sql": "SELECT T2.LifeExpectancy FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population DESC LIMIT 1", "source_tables": ["country", "city"]}, "evidence": "most crowded city refers to MAX(Population);"}
{"sample_id": 7882, "db_id": "world", "final": {"question": "What is the GNP of the least crowded city in the world?", "sql": "SELECT T2.GNP FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population ASC LIMIT 1", "source_tables": ["country", "city"]}, "evidence": "least crowded city refers to MIN(Population);"}
{"sample_id": 7883, "db_id": "world", "final": {"question": "Within the 5 most crowded cities in the world, which country has the most languages used?", "sql": "SELECT Name FROM ( SELECT T1.Name, T2.Language FROM City AS T1 INNER JOIN CountryLanguage AS T2 ON T1.CountryCode = T2.CountryCode GROUP BY T1.Name, T1.Population, T2.Language ORDER BY T1.Population DESC ) AS T3 GROUP BY t3.Name ORDER BY COUNT(Language) DESC LIMIT 1", "source_tables": ["countrylanguage", "city"]}, "evidence": "most crowded cities refers to MAX(Population); has the most languages used refers to MAX(COUNT(Language));"}
{"sample_id": 7884, "db_id": "world", "final": {"question": "Which country has the smallest surface area and the most crowded city?", "sql": "SELECT T2.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population DESC, T2.SurfaceArea DESC LIMIT 1", "source_tables": ["country", "city"]}, "evidence": "smallest surface area refers to MIN(smallest surface area); most crowded city refers to MAX(Population);"}
{"sample_id": 7885, "db_id": "world", "final": {"question": "List down all cities of China.", "sql": "SELECT T1.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'China'", "source_tables": ["country", "city"]}, "evidence": "China is a name of country;"}
{"sample_id": 7886, "db_id": "world", "final": {"question": "What are the cities for country called \"\u00c2\u00b4Uman\" in local name.", "sql": "SELECT T1.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.LocalName = '\u00c2\u00b4Uman'", "source_tables": ["country", "city"]}, "evidence": ""}
{"sample_id": 7887, "db_id": "world", "final": {"question": "What is the average life expentancy of countries that speak Arabic?", "sql": "SELECT AVG(T1.LifeExpectancy) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Arabic'", "source_tables": ["countrylanguage", "country"]}, "evidence": "average life expectancy = AVG(LifeExpectancy); speak Arabic refers to `Language` = 'Arabic';"}
{"sample_id": 7888, "db_id": "world", "final": {"question": "What is the GNP growth rate by the country of Shanghai?", "sql": "SELECT CAST((T1.GNP - T1.GNPOld) AS REAL) / T1.GNPOld FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Shanghai'", "source_tables": ["country", "city"]}, "evidence": "GNP growth rate = DIVIDE(SUBTRACT(GNP, GNPOld), GNPOld); Shanghai is a name of city;"}
{"sample_id": 7889, "db_id": "world", "final": {"question": "What is the district of Zaanstad?", "sql": "SELECT District FROM City WHERE name = 'Zaanstad'", "source_tables": ["city"]}, "evidence": "Zaanstad is a name of city;"}
{"sample_id": 7890, "db_id": "world", "final": {"question": "What city has the highest population?", "sql": "SELECT Name FROM City ORDER BY Population DESC LIMIT 1", "source_tables": ["city"]}, "evidence": "highest population refers to MAX(Population);"}
{"sample_id": 7891, "db_id": "world", "final": {"question": "Provide the district of the city with a population of 201843.", "sql": "SELECT District FROM City WHERE population = 201843", "source_tables": ["city"]}, "evidence": ""}
{"sample_id": 7892, "db_id": "world", "final": {"question": "What country has the largest surface area?", "sql": "SELECT Name FROM Country ORDER BY SurfaceArea DESC LIMIT 1", "source_tables": ["country"]}, "evidence": "largest surface area refers to MAX(SurfaceArea);"}
{"sample_id": 7893, "db_id": "world", "final": {"question": "How many countries have a life expectancy of 75.1?", "sql": "SELECT COUNT(*) FROM Country WHERE LifeExpectancy = 75.1", "source_tables": ["country"]}, "evidence": ""}
{"sample_id": 7894, "db_id": "world", "final": {"question": "What is the year of independence of Brunei?", "sql": "SELECT IndepYear FROM Country WHERE Name = 'Brunei'", "source_tables": ["country"]}, "evidence": "year of independence refers to IndepYear; Brunei is a name of country;"}
{"sample_id": 7895, "db_id": "world", "final": {"question": "How many countries have no GNP?", "sql": "SELECT COUNT(*) FROM Country WHERE GNP = 0", "source_tables": ["country"]}, "evidence": "no GNP refers to GNP = 0;"}
{"sample_id": 7896, "db_id": "world", "final": {"question": "What is the average surface area of all countries?", "sql": "SELECT AVG(SurfaceArea) FROM Country", "source_tables": ["country"]}, "evidence": "average surface area = AVG(SurfaceArea);"}
{"sample_id": 7959, "db_id": "music_platform_2", "final": {"question": "Provide the names of podcasts in the art category in 2018.", "sql": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'arts' AND T2.created_at LIKE '2018-%'", "source_tables": ["categories", "reviews"]}, "evidence": "art category refers to category = 'arts'; in 2018 refers to created_at like '2018%'; name of podcast refers to title"}
{"sample_id": 7960, "db_id": "music_platform_2", "final": {"question": "Write the names of the podcasts in the music category that have a rating greater than 3.", "sql": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'music' AND T2.rating > 3", "source_tables": ["categories", "reviews"]}, "evidence": "music category refers to category = 'music'; rating greater than 3 refers to rating > 3; name of the podcast refers to title"}
{"sample_id": 7961, "db_id": "music_platform_2", "final": {"question": "Which titles have the content \"love\" but the category is art produced between 2018 and 2019.", "sql": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE (T2.created_at LIKE '2018-%' AND T1.category = 'arts' AND T2.content LIKE '%love%') OR (T2.created_at LIKE '2019-%' AND T1.category = 'arts' AND T2.content LIKE '%love%')", "source_tables": ["categories", "reviews"]}, "evidence": "content love refers to content = 'love'; 'arts' is the category; produced between 2018 and 2019 refers to year (created_at) BETWEEN 2018 and 2019"}
{"sample_id": 7962, "db_id": "music_platform_2", "final": {"question": "What is the category and itune url of the title \"Scaling Global\"?", "sql": "SELECT T1.category, T2.itunes_url FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'Scaling Global'", "source_tables": ["podcasts", "categories"]}, "evidence": ""}
{"sample_id": 7963, "db_id": "music_platform_2", "final": {"question": "What is the average rating of podcasts in comedy category?", "sql": "SELECT AVG(T2.rating) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'comedy'", "source_tables": ["categories", "reviews"]}, "evidence": "comedy category refers to category = 'comedy'; average rating = Divide (Sum(rating), Count(podcast_id))"}
{"sample_id": 7964, "db_id": "music_platform_2", "final": {"question": "What is the least common category?", "sql": "SELECT category FROM categories GROUP BY category ORDER BY COUNT(podcast_id) ASC LIMIT 1", "source_tables": ["categories"]}, "evidence": "least common category refers to Min(Count(category))"}
{"sample_id": 7965, "db_id": "music_platform_2", "final": {"question": "What is the longest review?", "sql": "SELECT title FROM reviews ORDER BY LENGTH(content) DESC LIMIT 1", "source_tables": ["reviews"]}, "evidence": "review refers to content; longest review refers to Max(content)"}
{"sample_id": 7966, "db_id": "music_platform_2", "final": {"question": "What is the review with the title \"Hosts bring the show down\" for?", "sql": "SELECT title FROM podcasts WHERE podcast_id = ( SELECT podcast_id FROM reviews WHERE title = 'Hosts bring the show down' )", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"Hosts bring the show down\" refers to title of review"}
{"sample_id": 7967, "db_id": "music_platform_2", "final": {"question": "Which \"music\" podcast has the longest title?", "sql": "SELECT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'music' ORDER BY LENGTH(T2.title) DESC LIMIT 1", "source_tables": ["podcasts", "categories"]}, "evidence": "music podcasts refers to category = 'music'; longest title refers to title = Max(length(title))"}
{"sample_id": 7968, "db_id": "music_platform_2", "final": {"question": "List all the cagetories for all the podcasts with \"jessica\" in the title.", "sql": "SELECT category FROM categories WHERE podcast_id IN ( SELECT podcast_id FROM podcasts WHERE title LIKE '%jessica%' )", "source_tables": ["podcasts", "categories"]}, "evidence": "podcast with 'jessica' in title refers to title like '%jessica%'"}
{"sample_id": 7969, "db_id": "music_platform_2", "final": {"question": "What is the category for the \"Moist Boys\" podcast?", "sql": "SELECT category FROM categories WHERE podcast_id IN ( SELECT podcast_id FROM podcasts WHERE title = 'Moist Boys' )", "source_tables": ["podcasts", "categories"]}, "evidence": "\"Moist Boys\" refers to title of podcast"}
{"sample_id": 7970, "db_id": "music_platform_2", "final": {"question": "List all of the two-star reviews and their categories.", "sql": "SELECT T1.category FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.rating = 2", "source_tables": ["categories", "reviews"]}, "evidence": "two-stars review refers to rating = 2"}
{"sample_id": 7971, "db_id": "music_platform_2", "final": {"question": "List all the podcasts reviewed by a reviewer who has a review titled \"Inspired & On Fire!\".", "sql": "SELECT T1.title FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'Inspired & On Fire!'", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"Inspired & On Fire\" refers to title of review"}
{"sample_id": 8077, "db_id": "university", "final": {"question": "Which country is Harvard University in?", "sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'Harvard University'", "source_tables": ["country", "university"]}, "evidence": "Harvard University refers to university_name = 'Harvard University'; which country refers to country_name"}
{"sample_id": 8078, "db_id": "university", "final": {"question": "What is the name of the university with the highest score in teaching in the year 2011?", "sql": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 ORDER BY T2.score DESC LIMIT 1", "source_tables": ["university_ranking_year", "university", "ranking_criteria"]}, "evidence": "with the highest score refers to MAX(score); in teaching refers to criteria_name = 'Teaching'; name of university refers to university_name;"}
{"sample_id": 8079, "db_id": "university", "final": {"question": "Please list the names of the universities with a score in teaching of over 90 in 2011.", "sql": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 AND T2.score > 90", "source_tables": ["university_ranking_year", "university", "ranking_criteria"]}, "evidence": "in 2011 refers to year 2011; in teaching refers to\u00a0 criteria_name = 'Teaching'; score in teaching of over 90 refers to score > 90; name of university refers to university_name;"}
{"sample_id": 8080, "db_id": "university", "final": {"question": "Among the universities with a score in teaching of over 90 in 2011, how many of them are in the United States of America?", "sql": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 AND T2.score > 90", "source_tables": ["university_ranking_year", "university", "ranking_criteria"]}, "evidence": "in 2011 refers to year 2011; in teaching refers to\u00a0 criteria_name = 'Teaching'; score in teaching of over 90 refers to score > 90; in the United States of America refers to country_name = 'United States of America';"}
{"sample_id": 8081, "db_id": "university", "final": {"question": "Please list the names of all the ranking criteria of Harvard University in 2011.", "sql": "SELECT T1.criteria_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'Harvard University' AND T2.year = 2011", "source_tables": ["university_ranking_year", "university", "ranking_criteria"]}, "evidence": "in 2011 refers to year 2011; Harvard University refers to university_name = 'Harvard University'; names of all the ranking criteria refers to criteria_name"}
{"sample_id": 8082, "db_id": "university", "final": {"question": "What are the names of the universities that got 98 in teaching in 2011?", "sql": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 AND T2.score = 98", "source_tables": ["university_ranking_year", "university", "ranking_criteria"]}, "evidence": "in 2011 refers to year 2011; that got 98 refers to score = 98; in teaching refers to criteria_name = 'Teaching'; name of university refers to university_name"}
{"sample_id": 8083, "db_id": "university", "final": {"question": "Please list the names of all the universities that scored under 60 in teaching in 2011 and are in the United States of America.", "sql": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id INNER JOIN country AS T4 ON T4.id = T3.country_id WHERE T4.country_name = 'United States of America' AND T2.year = 2011 AND T2.score < 60 AND T1.criteria_name = 'Teaching'", "source_tables": ["university_ranking_year", "country", "university", "ranking_criteria"]}, "evidence": "scored under 60 refers to score < 60; in 2011 refers to year 2011; in teaching refers to criteria_name = 'Teaching'; in the United States of America refers to country_name = 'United States of America';"}
{"sample_id": 8084, "db_id": "university", "final": {"question": "Among the universities in Australia, how many of them have a student staff ratio of over 15 in 2011?", "sql": "SELECT COUNT(*) FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'Australia' AND T2.student_staff_ratio > 15 AND T2.year = 2011", "source_tables": ["country", "university", "university_year"]}, "evidence": "in 2011 refers to year 2011; in Australia refers to country_name = 'Australia'; student staff ratio of over 15 refers to student_staff_ratio > 15"}
{"sample_id": 8085, "db_id": "university", "final": {"question": "How many female students did Stanford University have in 2011?", "sql": "SELECT CAST(T1.num_students * T1.pct_female_students AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T2.university_name = 'Stanford University'", "source_tables": ["university", "university_year"]}, "evidence": "in 2011 refers to year 2011; female students refers to DIVIDE(MULTIPLY(pct_female_students, num_students), 100); Stanford University refers to university_name = 'Stanford University';"}
{"sample_id": 8086, "db_id": "university", "final": {"question": "Among the universities with a score in teaching of over 90 in 2011, what is the percentage of those in the United States of America?", "sql": "SELECT CAST(SUM(CASE WHEN T4.country_name = 'United States of America' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS per FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id INNER JOIN country AS T4 ON T4.id = T3.country_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 AND T2.score > 90", "source_tables": ["university_ranking_year", "country", "university", "ranking_criteria"]}, "evidence": "in 2011 refers to year 2011; in teaching refers to\u00a0 criteria_name = 'Teaching'; score in teaching of over 90 refers to score > 90; in the United States of America refers to country_name = 'United States of America'; percentage refers to DIVIDE(COUNT(country_name = 'United States of America'), COUNT(id))"}
{"sample_id": 8087, "db_id": "university", "final": {"question": "Give the id of \"Center for World University Rankings\".", "sql": "SELECT id FROM ranking_system WHERE system_name = 'Center for World University Rankings'", "source_tables": ["ranking_system"]}, "evidence": "\"Center for World University Rankings\" refers to system_name = 'Center for World University Rankings';"}
{"sample_id": 8088, "db_id": "university", "final": {"question": "Which country is University of Veterinary Medicine Vienna located in? Give its country id.", "sql": "SELECT country_id FROM university WHERE university_name = 'University of Veterinary Medicine Vienna'", "source_tables": ["university"]}, "evidence": "University of Veterinary Medicine Vienna refers to university_name = 'University of Veterinary Medicine Vienna';"}
{"sample_id": 8089, "db_id": "university", "final": {"question": "What is the id of the criteria \"Citations Rank\"?", "sql": "SELECT id FROM ranking_criteria WHERE criteria_name = 'Citations Rank'", "source_tables": ["ranking_criteria"]}, "evidence": "criteria \"Citations Rank\" refers to criteria_name = 'Citations Rank';"}
{"sample_id": 8090, "db_id": "university", "final": {"question": "Show the id of University of Orl\u00e9ans.", "sql": "SELECT id FROM university WHERE university_name = 'University of Orl\u00e9ans'", "source_tables": ["university"]}, "evidence": "University of Orl\u00e9ans refers to university_name = 'University of Orl\u00e9ans';"}
{"sample_id": 8091, "db_id": "university", "final": {"question": "For the university id 268, show its number of students in 2013.", "sql": "SELECT num_students FROM university_year WHERE university_id = 268 AND year = 2013", "source_tables": ["university_year"]}, "evidence": "number of students refers to num_students; in 2013 refers to year = 2013"}
{"sample_id": 8092, "db_id": "university", "final": {"question": "Show the name of country id 66.", "sql": "SELECT country_name FROM country WHERE id = 66", "source_tables": ["country"]}, "evidence": "name of country refers to country_name"}
{"sample_id": 8093, "db_id": "university", "final": {"question": "Which country is McMaster University located in?", "sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'McMaster University'", "source_tables": ["country", "university"]}, "evidence": "McMaster University refers to university_name = 'McMaster University'; which country refers to country_name"}
{"sample_id": 8094, "db_id": "university", "final": {"question": "How many Turkish universities are there in the database?", "sql": "SELECT COUNT(*) FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Turkey'", "source_tables": ["country", "university"]}, "evidence": "Turkish universities refers to country_name = 'Turkey';"}
{"sample_id": 8095, "db_id": "university", "final": {"question": "Which university had the most students in 2011? Show its name.", "sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 ORDER BY T1.num_students DESC LIMIT 1", "source_tables": ["university", "university_year"]}, "evidence": "in 2011 refers to year 2011; the most students refers to MAX(num_students); which university refers to university_name;"}
{"sample_id": 8096, "db_id": "university", "final": {"question": "How many students were there in University of Michigan in 2011?", "sql": "SELECT COUNT(*) FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id WHERE T1.university_name = 'University of Michigan' AND T2.year = 2011", "source_tables": ["university", "university_year"]}, "evidence": "in 2011 refers to year 2011; in University of Michigan refers to university_name = 'University of Michigan';"}
{"sample_id": 8097, "db_id": "university", "final": {"question": "For Chosun University, what was its score on \"Influence Rank\" in 2015?", "sql": "SELECT T2.score FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'Chosun University' AND T1.criteria_name = 'Influence Rank' AND T2.year = 2015", "source_tables": ["university_ranking_year", "university", "ranking_criteria"]}, "evidence": "Chosun University refers to university_name = 'Chosun University'; in 2015 refers to year = 2015; on \"Influence Rank\" refers to criteria_name = 'Influence Rank';"}
{"sample_id": 8098, "db_id": "university", "final": {"question": "What is the percentage of the international students in University of Oslo in 2015?", "sql": "SELECT T2.pct_international_students FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id WHERE T1.university_name = 'University of Oslo' AND T2.year = 2015", "source_tables": ["university", "university_year"]}, "evidence": "percentage of the international students refers to pct_international_students; in 2015 refers to year = 2015; in University of Oslo refers to university_name = 'University of Oslo';"}
{"sample_id": 8099, "db_id": "university", "final": {"question": "For the University of Southampton in 2015, on which criteria did it score the best?", "sql": "SELECT T1.criteria_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'University of Southampton' AND T2.year = 2015 ORDER BY T2.score DESC LIMIT 1", "source_tables": ["university_ranking_year", "university", "ranking_criteria"]}, "evidence": "University of Southampton refers to university_name = 'University of Southampton'; in 2015 refers to year = 2015; score the best refers to MAX(score); which criteria refers to criteria_name"}
{"sample_id": 8100, "db_id": "university", "final": {"question": "Which ranking system is criteria \"Total Shanghai\" in?", "sql": "SELECT T1.system_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T2.criteria_name = 'Total Shanghai'", "source_tables": ["ranking_system", "ranking_criteria"]}, "evidence": "criteria \"Total Shanghai\" refers to criteria_name = 'Total Shanghai'; which ranking system refers to system_name"}
{"sample_id": 8101, "db_id": "university", "final": {"question": "How many female students were there in Pierre and Marie Curie University in 2015?", "sql": "SELECT CAST(T1.num_students * T1.pct_female_students AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2015 AND T2.university_name = 'Pierre and Marie Curie University'", "source_tables": ["university", "university_year"]}, "evidence": "female students refers to DIVIDE(MULTIPLY(pct_female_students, num_students), 100); in Pierre and Marie Curie University refers to university_name = 'Pierre and Marie Curie University'; in 2015 refers to year = 2015"}
{"sample_id": 8102, "db_id": "university", "final": {"question": "What was the score for University of Florida in \"N and S\" in 2014?", "sql": "SELECT T2.score FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'University of Florida' AND T2.year = 2014 AND T1.criteria_name = 'N and S'", "source_tables": ["university_ranking_year", "university", "ranking_criteria"]}, "evidence": "University of Florida refers to university_name = 'University of Florida'; in 2014 refers to year = 2014; in \"N and S\" refers to criteria_name = 'N and S'"}
{"sample_id": 8103, "db_id": "university", "final": {"question": "Calculate the number of international students of University of Wisconsin-Madison in 2013.", "sql": "SELECT CAST(T1.num_students * T1.pct_international_students AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2013 AND T2.university_name = 'University of Wisconsin-Madison'", "source_tables": ["university", "university_year"]}, "evidence": "international students refers to DIVIDE(MULTIPLY(num_students, pct_international_students), 100); University of Wisconsin-Madison refers to university_name = 'University of Wisconsin-Madison'; in 2013 refers to year = 2013"}
{"sample_id": 8104, "db_id": "university", "final": {"question": "Show the name of the university with the lowest number of students in 2015.", "sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2015 ORDER BY T1.num_students ASC LIMIT 1", "source_tables": ["university", "university_year"]}, "evidence": "lowest number of students refers to MIN(num_students); in 2015 refers to year = 2015; name of university refers to university_name;"}
{"sample_id": 8105, "db_id": "university", "final": {"question": "How many times more was the number of students of University of Ottawa than Joseph Fourier University in 2013?", "sql": "SELECT CAST(SUM(CASE WHEN T2.university_name = 'University of Ottawa' THEN T1.num_students ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.university_name = 'Joseph Fourier University' THEN T1.num_students ELSE 0 END) FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2013", "source_tables": ["university", "university_year"]}, "evidence": "Joseph Fourier University refers to university_name = 'Joseph Fourier University'; University of Ottawa refers to university_name = 'University of Ottawa'; in 2013 refers to year = 2013; how many times more refers to DIVIDE(SUM(num_students where university_name = 'University of Ottawa'), SUM(num_students where university_name = 'Joseph Fourier University'))"}
{"sample_id": 8106, "db_id": "university", "final": {"question": "Calculate the average number of criterias among \"Times Higher Education World University Ranking\",\"Shanghai Ranking\" and \"Center for World University Rankings\".", "sql": "SELECT (SUM(CASE WHEN T1.system_name = 'Center for World University Rankings' THEN 1 ELSE 0 END) + SUM(CASE WHEN T1.system_name = 'Shanghai Ranking' THEN 1 ELSE 0 END) + SUM(CASE WHEN T1.system_name = 'Times Higher Education World University Ranking' THEN 1 ELSE 0 END)) / 3 FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id", "source_tables": ["ranking_system", "ranking_criteria"]}, "evidence": "average number of criterias refers to DIVIDE(SUM(id), 3); \"Times Higher Education World University Ranking\", \"Shanghai Ranking\" and \"Center for World University Rankings\" refers to system_name IN ('Times Higher Education World University Ranking', 'Shanghai Ranking', 'Center for World University Rankings');"}
{"sample_id": 8185, "db_id": "sales_in_weather", "final": {"question": "Among the stores in weather station 14 in February 2014, which store had sold no less than 300 quantities for item number 44 in a single day?", "sql": "SELECT T1.store_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE T2.station_nbr = 14 AND T1.'date' LIKE '%2014-02%' AND T1.item_nbr = 44 AND units >= 300", "source_tables": ["sales_in_weather", "relation"]}, "evidence": "weather station 14 refers to station_nbr = 14; February 2014 refers to substring (date, 1, 7) = '2014-02' ; sold no less than 300 quantities refers to units > = 300; item no.44 refers to item_nbr = 44; store refers to store_nbr"}
{"sample_id": 8186, "db_id": "sales_in_weather", "final": {"question": "What is the most purchased products during the rainy days in June 2013 in weather station 9?", "sql": "SELECT T1.item_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T3.station_nbr = 9 AND T1.'date' LIKE '%2013-06%' AND codesum = 'RA' ORDER BY T1.units DESC LIMIT 1", "source_tables": ["sales_in_weather", "weather", "relation"]}, "evidence": "most purchased product refers to Max(units); during the rainy day refers to codesum = RA; in June 2013 refers to SUBSTR(date, 1, 7) = '2013-06'; weather station 9 refers to station_nbr = 9; product refers to item_nbr"}
{"sample_id": 8187, "db_id": "sales_in_weather", "final": {"question": "Which station sold the highest quantity of item number 5 overall?", "sql": "SELECT T2.station_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE T1.item_nbr = 5 GROUP BY T2.station_nbr ORDER BY SUM(T1.units) DESC LIMIT 1", "source_tables": ["sales_in_weather", "relation"]}, "evidence": "item number 5 refers to item_nbr = 5; sold highest quantity refers to Max(Sum(units)); station refers to station_nbr"}
{"sample_id": 8188, "db_id": "sales_in_weather", "final": {"question": "What is the earliest sunrise recorded in the stations with no more than 1 store in February 2012?", "sql": "SELECT T1.station_nbr FROM relation AS T1 INNER JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr WHERE sunrise IS NOT NULL AND T2.'date' LIKE '%2012-02%' AND T1.station_nbr IN ( SELECT station_nbr FROM relation GROUP BY station_nbr HAVING COUNT(store_nbr) = 1 ) ORDER BY sunrise LIMIT 1", "source_tables": ["weather", "relation"]}, "evidence": "in February 2012 refers to SUBSTR(date, 1, 7) = '2012-02'; earliest sunrise Min(sunrise);\u00a0 station with no more than 1 store refers to station_nbr where Count(store_nbr) = 1"}
{"sample_id": 8189, "db_id": "sales_in_weather", "final": {"question": "In weather station 17, which store sold the highest quantity of item 45 in October 2012?", "sql": "SELECT T1.store_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE T1.item_nbr = 45 AND T2.station_nbr = 17 AND T1.'date' LIKE '%2012-10%' GROUP BY T1.store_nbr ORDER BY SUM(T1.units) DESC LIMIT 1", "source_tables": ["sales_in_weather", "relation"]}, "evidence": "weather station 17 refers to station_nbr = 17; item 45 refers to item_nbr = 45; in October 2012 refers to SUBSTR(date, 1, 7) = '2012-10': highest quantity refers to Max(Sum(units)); store refers to store_nbr"}
{"sample_id": 8190, "db_id": "sales_in_weather", "final": {"question": "What are the items sold by the store during the day whose station recorded the thickest snowfall?", "sql": "SELECT T1.item_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN ( SELECT station_nbr, 'date' FROM weather ORDER BY snowfall DESC LIMIT 1 ) AS T3 ON T2.station_nbr = T3.station_nbr", "source_tables": ["sales_in_weather", "weather", "relation"]}, "evidence": "thickest snowfall refers to Max(snowfall); item refers to item_nbr"}
{"sample_id": 8191, "db_id": "sales_in_weather", "final": {"question": "What are the top 3 stations that have sold the highest quantities for an item in a single day?", "sql": "SELECT T2.station_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr ORDER BY T1.units DESC LIMIT 3", "source_tables": ["sales_in_weather", "relation"]}, "evidence": "highest quantity refers to Max(units); station refers to station_nbr"}
{"sample_id": 8192, "db_id": "sales_in_weather", "final": {"question": "How many stores belong to the station with the highest recorded heat of all time?", "sql": "SELECT COUNT(T2.store_nbr) FROM ( SELECT station_nbr FROM weather ORDER BY heat DESC LIMIT 1 ) AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr", "source_tables": ["weather", "relation"]}, "evidence": "highest recorded heat refers to Max(heat); station refers to station_nbr"}
{"sample_id": 8193, "db_id": "sales_in_weather", "final": {"question": "On February 8, 2014, what is the minimum temperature in the station where store 29 belongs?", "sql": "SELECT tmin FROM relation AS T1 INNER JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.store_nbr = 29 AND T2.'date' = '2014-02-08'", "source_tables": ["weather", "relation"]}, "evidence": "On February 8, 2014 refers to date = '2014-02-08'; store 29 refers to store_nbr = 29; minimum temperature refers to tmin; station refers to station_nbr"}
{"sample_id": 8194, "db_id": "sales_in_weather", "final": {"question": "Among the stations with 3 stores, how many stations have a station pressure of no more than 30 on February 18, 2014?", "sql": "SELECT COUNT(station_nbr) FROM weather WHERE 'date' = '2014-02-18' AND stnpressure < 30 AND station_nbr IN ( SELECT station_nbr FROM relation GROUP BY station_nbr HAVING COUNT(store_nbr) = 3 )", "source_tables": ["weather", "relation"]}, "evidence": "station with 3 stores refers to station_nbr where Count(store_nbr) = 3; station pressure of no more than 30 refers to stnpressure < 30; On February 18, 2014 refers to date = '2014-02-18'"}
{"sample_id": 8195, "db_id": "sales_in_weather", "final": {"question": "Which station has the highest number of stores? Calculate the said station's average maximum temperature in February 2012.", "sql": "SELECT CAST(SUM(T2.tmax) AS REAL) / 29 FROM ( SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(store_nbr) DESC LIMIT 1 ) AS T1 INNER JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr WHERE SUBSTR(T2.'date', 1, 7) = '2012-02'", "source_tables": ["weather", "relation"]}, "evidence": "station with highest number of stores refers to station_nbr where Max(Count(store_nbr)); station refers to station_nbr; in February 2012 refers to substring (date, 1, 7) = '2012-02'; average maximum temperature = Divide(Sum(tmax), 29)"}
{"sample_id": 8196, "db_id": "sales_in_weather", "final": {"question": "Between the stores under weather station 12, what is the percentage of item 5 sold in store 10 in 2014?", "sql": "SELECT CAST(SUM(CASE WHEN T2.store_nbr = 10 THEN units * 1 ELSE 0 END) AS REAL) * 100 / SUM(units) FROM relation AS T1 INNER JOIN sales_in_weather AS T2 ON T1.store_nbr = T2.store_nbr WHERE station_nbr = 12 AND item_nbr = 5 AND T2.'date' LIKE '%2014%'", "source_tables": ["sales_in_weather", "relation"]}, "evidence": "weather station 12 refers to station_nbr = 12; item 5 refers to item_nbr = 5; 10 store refers to store_nbr = 10; in 2014 refers to SUBSTR(date, 1, 4) = '2014'; percentage = Divide (Sum(units where store_nbr = 10), Sum(units)) * 100"}
{"sample_id": 8197, "db_id": "sales_in_weather", "final": {"question": "What is the maximum average speed?", "sql": "SELECT MAX(avgspeed) FROM weather", "source_tables": ["weather"]}, "evidence": "maximum average speed refers to Max(avgspeed)"}
{"sample_id": 8198, "db_id": "sales_in_weather", "final": {"question": "How many days did the show fell more than 5 inches?", "sql": "SELECT COUNT(DISTINCT 'date') FROM weather WHERE snowfall > 5", "source_tables": ["weather"]}, "evidence": "snow fell more than 5 inches refers to snowfall > 5"}
{"sample_id": 8199, "db_id": "sales_in_weather", "final": {"question": "How many days did the sun rise before 5 AM?", "sql": "SELECT COUNT(DISTINCT 'date') AS days FROM weather WHERE sunrise < time('05:00:00')", "source_tables": ["weather"]}, "evidence": "sunrise before 5 Am refers to sunrise < time ('5:00:00')"}
{"sample_id": 8200, "db_id": "sales_in_weather", "final": {"question": "What is the minimum dew point?", "sql": "SELECT MIN(dewpoint) FROM weather", "source_tables": ["weather"]}, "evidence": "minimum dew point refers to Min(dewpoint)"}
{"sample_id": 8392, "db_id": "mondial_geo", "final": {"question": "Which non capital city has the most people of all?", "sql": "SELECT T3.Name FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T3.Name <> T1.Capital ORDER BY T3.Population DESC LIMIT 1", "source_tables": ["country", "city", "province"]}, "evidence": ""}
{"sample_id": 8393, "db_id": "mondial_geo", "final": {"question": "In which country is the city of Grozny? Give the full name of the country.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T3.Name = 'Grozny'", "source_tables": ["country", "city", "province"]}, "evidence": "Grozny is a province"}
{"sample_id": 8394, "db_id": "mondial_geo", "final": {"question": "Which religion has the majority of the people in Japan?", "sql": "SELECT T2.Name FROM country AS T1 INNER JOIN religion AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Japan' ORDER BY T2.Percentage DESC LIMIT 1", "source_tables": ["country", "religion"]}, "evidence": "Japan is a country"}
{"sample_id": 8395, "db_id": "mondial_geo", "final": {"question": "Which two countries have the border in length of 803 km? Give the full names of the countries.", "sql": "SELECT T1.Name, T3.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 INNER JOIN country AS T3 ON T3.Code = T2.Country2 WHERE T2.Length = 803", "source_tables": ["country", "borders"]}, "evidence": ""}
{"sample_id": 8396, "db_id": "mondial_geo", "final": {"question": "How many percent of the total area of Russia is in Europe?", "sql": "SELECT T2.Percentage FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country WHERE T3.Name = 'Russia' AND T1.Name = 'Europe'", "source_tables": ["country", "continent", "encompasses"]}, "evidence": ""}
{"sample_id": 8397, "db_id": "mondial_geo", "final": {"question": "Give the full names of the countries that are located in more than one continent.", "sql": "SELECT T3.Name FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country GROUP BY T3.Name HAVING COUNT(T3.Name) > 1", "source_tables": ["country", "continent", "encompasses"]}, "evidence": ""}
{"sample_id": 8398, "db_id": "mondial_geo", "final": {"question": "How many people are there in Fareham's mother country?", "sql": "SELECT T1.Population FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T3.Name = 'Fareham'", "source_tables": ["country", "city", "province"]}, "evidence": "Mother country refers to home country"}
{"sample_id": 8399, "db_id": "mondial_geo", "final": {"question": "What's the number of infant mortality in Switzerland in a year?", "sql": "SELECT T2.Infant_Mortality * T1.Population * T2.Population_Growth FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Switzerland'", "source_tables": ["country", "population"]}, "evidence": "Number can be calculated = Infant_Mortality * Population * Population_Growth"}
{"sample_id": 8400, "db_id": "mondial_geo", "final": {"question": "How many mountains are there in the United States?", "sql": "SELECT COUNT(T1.Name) FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN country AS T4 ON T4.Province = T3.Name WHERE T4.Name = 'United States'", "source_tables": ["country", "mountain", "province", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8401, "db_id": "mondial_geo", "final": {"question": "When did Equatorial Guinea become independent?", "sql": "SELECT T2.Independence FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Equatorial Guinea'", "source_tables": ["country", "politics"]}, "evidence": "Equatorial Guinea is a country"}
{"sample_id": 8402, "db_id": "mondial_geo", "final": {"question": "What is the GDP per capita in Switzerland?", "sql": "SELECT T2.GDP / T1.Population FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Switzerland'", "source_tables": ["economy", "country"]}, "evidence": "GDP per capita = GDP / Population"}
{"sample_id": 8403, "db_id": "mondial_geo", "final": {"question": "What is the GDP for Service of the country with Fuenlabrada as its city.", "sql": "SELECT T4.Service * T4.GDP FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name INNER JOIN economy AS T4 ON T4.Country = T2.Country WHERE T3.Name = 'Fuenlabrada'", "source_tables": ["economy", "country", "city", "province"]}, "evidence": ""}
{"sample_id": 8404, "db_id": "mondial_geo", "final": {"question": "How many times longer is the longest river in Tajikistan than the shortest river?", "sql": "SELECT MAX(T2.Length) / MIN(T2.Length) FROM located AS T1 INNER JOIN river AS T2 ON T1.River = T2.Name WHERE T1.Country = 'TJ'", "source_tables": ["river", "located"]}, "evidence": "TJ is an abbreviated country code of Tajikistan"}
{"sample_id": 8405, "db_id": "mondial_geo", "final": {"question": "What is the population density of Hanoi's home country?", "sql": "SELECT T1.Population / T1.Area FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T3.Name = 'Hanoi'", "source_tables": ["country", "city", "province"]}, "evidence": "population density = Population / Area"}
{"sample_id": 8406, "db_id": "mondial_geo", "final": {"question": "In countries where there is more than one ethnic group, name the ethnic group with the greatest presence in each country and the country to which it corresponds.", "sql": "SELECT Country, Name FROM ethnicGroup AS T1 WHERE Percentage < 100 AND Percentage = ( SELECT MAX(Percentage) FROM ethnicGroup AS T2 WHERE T1.Country = T2.Country )", "source_tables": ["ethnicgroup"]}, "evidence": "greatest presence can be represented by largest percentage."}
{"sample_id": 8407, "db_id": "mondial_geo", "final": {"question": "How many deserts are not located in a single country? Name them.", "sql": "SELECT Desert FROM geo_desert GROUP BY Desert HAVING COUNT(DISTINCT Country) > 1", "source_tables": ["geo_desert"]}, "evidence": ""}
{"sample_id": 8408, "db_id": "mondial_geo", "final": {"question": "How many rivers belong to more than one country? Name the provinces where we can find them.", "sql": "SELECT River, GROUP_CONCAT(Province) FROM geo_river GROUP BY River HAVING COUNT(DISTINCT Country) > 1", "source_tables": ["geo_river"]}, "evidence": ""}
{"sample_id": 8409, "db_id": "mondial_geo", "final": {"question": "What percentage of the border does Angola share with each of the countries with which it borders?", "sql": "SELECT SUM(CASE WHEN T2.Name = 'Angola' THEN T1.Length ELSE 0 END) * 100 / SUM(T1.Length) FROM borders AS T1 LEFT JOIN country AS T2 ON T1.Country1 = T2.Code", "source_tables": ["country", "borders"]}, "evidence": ""}
{"sample_id": 8410, "db_id": "mondial_geo", "final": {"question": "What percent of the non volcanic islands in the Lesser Antilles group of islands have an area of no more than 300 square kilometers?", "sql": "SELECT SUM(CASE WHEN Area <= 300 THEN 1 ELSE 0 END) * 100 / COUNT(*) FROM island WHERE Islands = 'Lesser Antilles' AND (Type != 'volcanic' OR Type IS NULL)", "source_tables": ["island"]}, "evidence": "Percent = [count(non volcanic islands Lesser Antilles area 300 or less) / count(non volcanic islands Lesser Antilles)] * 100%"}
{"sample_id": 8411, "db_id": "mondial_geo", "final": {"question": "Of all the countries in which English is spoken, what percentage has English as their only language?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Percentage = 100 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Name) FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'English'", "source_tables": ["country", "language"]}, "evidence": "Percentage = [count(countries 100% English) / count(countries English)] * 100%"}
{"sample_id": 8412, "db_id": "mondial_geo", "final": {"question": "Name of the capitals of the countries that have less than 99.95% less population than the country that has the most population.", "sql": "SELECT Capital FROM country WHERE Population <= ( SELECT MAX(Population) - MAX(Population) * 0.9995 FROM country )", "source_tables": ["country"]}, "evidence": ""}
{"sample_id": 8413, "db_id": "mondial_geo", "final": {"question": "Average length of the rivers flowing into the Donau River.", "sql": "SELECT * FROM river WHERE Name = 'Donau'", "source_tables": ["river"]}, "evidence": ""}
{"sample_id": 8414, "db_id": "mondial_geo", "final": {"question": "Based on the data shown at Target, what percentage of countries are non-Christian?", "sql": "SELECT 100 - (CAST(SUM(CASE WHEN Target = 'Christian' THEN 1 ELSE 0 END) AS REAL)) * 100 / COUNT(Country) FROM target", "source_tables": ["target"]}, "evidence": "percentage of countries are non-Christian = [count(non-Christian) / count(non-Christian + Christian)] * 100%"}
{"sample_id": 8415, "db_id": "mondial_geo", "final": {"question": "Which country with a city with a population between 50,000 and 300,000 inhabitants and which is a member of an organization established between 03/01/1991 and 04/30/1991 is also a member of the EBRD?", "sql": "SELECT T2.Country FROM country AS T1 INNER JOIN isMember AS T2 ON T1.Code = T2.Country INNER JOIN organization AS T3 ON T3.Country = T2.Country INNER JOIN city AS T4 ON T4.Country = T3.Country WHERE T3.Abbreviation = 'EBRD' AND T4.Population BETWEEN 50000 AND 300000 AND T3.Established BETWEEN '1991-01-31' AND '1991-04-30'", "source_tables": ["city", "country", "organization", "ismember"]}, "evidence": ""}
{"sample_id": 8416, "db_id": "mondial_geo", "final": {"question": "Which river with its mouth in the Donau River and a length greater than 500 km is located in Slovenia?", "sql": "SELECT T2.River FROM country AS T1 INNER JOIN geo_river AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Slovenia' AND T2.River IN ( SELECT NAME FROM river WHERE Length > 500 AND River = 'Donau' )", "source_tables": ["country", "geo_river", "river"]}, "evidence": ""}
{"sample_id": 8417, "db_id": "mondial_geo", "final": {"question": "In which city is the sea whose depth is 4232 meters less than that of the Bay of Bengal?", "sql": "SELECT T2.City FROM sea AS T1 INNER JOIN located AS T2 ON T1.Name = T2.Sea INNER JOIN city AS T3 ON T3.Name = T2.City WHERE ( SELECT Depth FROM sea WHERE Name LIKE '%Bengal%' ) - T1.Depth = 4235", "source_tables": ["city", "sea", "located"]}, "evidence": ""}
{"sample_id": 8418, "db_id": "mondial_geo", "final": {"question": "In which city is the lake located at coordinates longitude -85.35 and latitude 11.6?", "sql": "SELECT T2.City FROM lake AS T1 INNER JOIN located AS T2 ON T1.Name = T2.Lake INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN city AS T4 ON T4.Province = T3.Name WHERE T1.Longitude = -85.35 AND T1.Latitude = 11.6", "source_tables": ["city", "province", "lake", "located"]}, "evidence": ""}
{"sample_id": 8419, "db_id": "mondial_geo", "final": {"question": "On which continent is the country with the most erosion of real income?", "sql": "SELECT T1.Name FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN economy AS T4 ON T4.Country = T3.Code ORDER BY T4.Inflation DESC LIMIT 1", "source_tables": ["economy", "country", "continent", "encompasses"]}, "evidence": "highest inflation rate results in the most erosion of real income"}
{"sample_id": 8420, "db_id": "mondial_geo", "final": {"question": "Which two Asian countries share a border that is 1,782 kilometers long?", "sql": "SELECT T4.Country1, T4.Country2 FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN borders AS T4 ON T4.Country1 = T3.Code WHERE T1.Name = 'Asia' AND T4.Length = 1782", "source_tables": ["country", "continent", "borders", "encompasses"]}, "evidence": ""}
{"sample_id": 8421, "db_id": "mondial_geo", "final": {"question": "Of all the lakes in Bolivia, which is the deepest?", "sql": "SELECT T1.Name FROM lake AS T1 INNER JOIN geo_lake AS T2 ON T1.Name = T2.Lake INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN country AS T4 ON T4.Code = T3.Country WHERE T4.Name = 'Bolivia' ORDER BY T1.Depth DESC LIMIT 1", "source_tables": ["geo_lake", "country", "lake", "province"]}, "evidence": "Bolivia is the country"}
{"sample_id": 8422, "db_id": "mondial_geo", "final": {"question": "In which lake flows the river that is, in turn, the mouth of the Manicouagan River?", "sql": "SELECT NAME FROM lake WHERE river = ( SELECT river FROM river WHERE NAME = 'Manicouagan' )", "source_tables": ["river", "lake"]}, "evidence": ""}
{"sample_id": 8423, "db_id": "mondial_geo", "final": {"question": "In which group of islands is Rinjani Mountain located?", "sql": "SELECT T1.Islands FROM island AS T1 INNER JOIN mountainOnIsland AS T2 ON T1.Name = T2.Island INNER JOIN mountain AS T3 ON T3.Name = T2.Mountain WHERE T3.Name = 'Rinjani'", "source_tables": ["mountain", "mountainonisland", "island"]}, "evidence": ""}
{"sample_id": 8424, "db_id": "mondial_geo", "final": {"question": "List all the seas with which the deepest sea merges.", "sql": "SELECT T2.Sea2 FROM sea AS T1 INNER JOIN mergesWith AS T2 ON T1.Name = T2.Sea1 WHERE T1.Name = ( SELECT Name FROM sea ORDER BY Depth DESC LIMIT 1 )", "source_tables": ["sea", "mergeswith"]}, "evidence": ""}
{"sample_id": 8425, "db_id": "mondial_geo", "final": {"question": "Of all the countries that share territory with more than one continent, in which of them does the average population not exceed 10 inhabitants per square kilometer?", "sql": "SELECT NAME FROM country WHERE CODE IN ( SELECT country FROM encompasses GROUP BY country HAVING COUNT(continent) > 1 ) AND population / Area <= 10", "source_tables": ["country", "encompasses"]}, "evidence": ""}
{"sample_id": 8426, "db_id": "mondial_geo", "final": {"question": "Of all the countries of the Hindu religion, which has the lowest ratio of people per square meter of surface?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN religion AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Hindu' ORDER BY T1.Population / T1.Area ASC LIMIT 1", "source_tables": ["country", "religion"]}, "evidence": "ratio of people per square meter of surface = Population / Area"}
{"sample_id": 8427, "db_id": "mondial_geo", "final": {"question": "On what date did the country have a gross domestic product 400% higher than Saint Kitts and Nevis become independent?", "sql": "SELECT Independence FROM politics WHERE country = ( SELECT country FROM economy WHERE GDP = 1100 )", "source_tables": ["economy", "politics"]}, "evidence": "GDP refers to gross domestic product"}
{"sample_id": 8428, "db_id": "mondial_geo", "final": {"question": "What is the average population ratio of the countries in which organizations were established in 1947?", "sql": "SELECT T1.Population / T1.Area FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country WHERE STRFTIME('%Y', T2.Established) = '1947'", "source_tables": ["country", "organization"]}, "evidence": "Average population ratio = Population / Area"}
{"sample_id": 8429, "db_id": "mondial_geo", "final": {"question": "What is the name of Anguilla's capital, and where is it located?", "sql": "SELECT Capital, Province FROM country WHERE Name = 'Anguilla'", "source_tables": ["country"]}, "evidence": "Anguilla is a country"}
{"sample_id": 8430, "db_id": "mondial_geo", "final": {"question": "Which nation has the smallest population, and where is its capital located?", "sql": "SELECT Name, Capital FROM country ORDER BY Population ASC LIMIT 1", "source_tables": ["country"]}, "evidence": ""}
{"sample_id": 8431, "db_id": "mondial_geo", "final": {"question": "How much more space does Asia have than Europe?", "sql": "SELECT MAX(Area) - MIN(Area) FROM continent WHERE Name = 'Asia' OR Name = 'Europe'", "source_tables": ["continent"]}, "evidence": "Asia and Europe are two continents."}
{"sample_id": 8432, "db_id": "mondial_geo", "final": {"question": "What is the geographic location of Aarhus city? Please provide the answer with the coordinates of the location.", "sql": "SELECT Longitude, Latitude FROM city WHERE Name = 'Aarhus'", "source_tables": ["city"]}, "evidence": "Longitude, Latitude = coordinates of the location"}
{"sample_id": 8433, "db_id": "mondial_geo", "final": {"question": "What is the population gap between the United Kingdom and Italy?", "sql": "SELECT MAX(Population) - MIN(Population) FROM country WHERE Name = 'United Kingdom' OR Name = 'Italy'", "source_tables": ["country"]}, "evidence": "Population gap = Total population of the United Kingdom - Total population of Italy"}
{"sample_id": 8434, "db_id": "mondial_geo", "final": {"question": "In which city is the European Bank for Reconstruction and Development's headquarters? Please include the city and province where the headquarters are located in your answer.", "sql": "SELECT City, Province FROM organization WHERE Name = 'European Bank for Reconstruction and Development'", "source_tables": ["organization"]}, "evidence": ""}
{"sample_id": 8435, "db_id": "mondial_geo", "final": {"question": "Which lake is the largest in terms of both surface area and depth?", "sql": "SELECT Name FROM lake ORDER BY Area * Depth DESC LIMIT 1", "source_tables": ["lake"]}, "evidence": "Area * Depth can represents the metric in terms of both surface area and depth"}
{"sample_id": 8436, "db_id": "mondial_geo", "final": {"question": "Which two nations are separated from one another by the longest border? Please include the entire names of the nations in your answer.", "sql": "SELECT Country1, Country2 FROM borders ORDER BY Length DESC LIMIT 1", "source_tables": ["borders"]}, "evidence": ""}
{"sample_id": 8437, "db_id": "mondial_geo", "final": {"question": "Which nation has the highest GDP? Please give the nation's full name.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP DESC LIMIT 1", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8438, "db_id": "mondial_geo", "final": {"question": "Which nation has the lowest proportion of people who speak an African language? Please state the nation's full name.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'African' ORDER BY T2.Percentage ASC LIMIT 1", "source_tables": ["country", "ethnicgroup"]}, "evidence": "Nation and country share the same meaning. Proportion refers to percentage"}
{"sample_id": 8439, "db_id": "mondial_geo", "final": {"question": "Which country has three different religions-Anglicanism, Christianity, and Roman Catholicism and uses 100% English?", "sql": "SELECT T2.Country FROM country AS T1 INNER JOIN religion AS T2 ON T1.Code = T2.Country INNER JOIN language AS T3 ON T3.Country = T2.Country WHERE (T2.Name = 'Anglican' OR T2.Name = 'Christian' OR T2.Name = 'Roman Catholic') AND T3.Name = 'English' AND T3.Percentage = 100 GROUP BY T1.Name HAVING COUNT(T1.Name) = 3", "source_tables": ["country", "religion", "language"]}, "evidence": ""}
{"sample_id": 8440, "db_id": "mondial_geo", "final": {"question": "Please list the top 3 countries with the highest inflation rate.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.Inflation DESC LIMIT 3", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8441, "db_id": "mondial_geo", "final": {"question": "Please provide a list of every nation where English is spoken and utilized entirely.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'English' AND T2.Percentage = 100", "source_tables": ["country", "language"]}, "evidence": "Utilizition entirely means Percentage = 100% uses"}
{"sample_id": 8442, "db_id": "mondial_geo", "final": {"question": "How many businesses were founded after 1960 in a nation that wasn't independent?", "sql": "SELECT COUNT(T3.Name) FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN organization AS T3 ON T3.Country = T2.Country WHERE T2.Independence = NULL AND STRFTIME('%Y', T3.Established) > '1960'", "source_tables": ["country", "organization", "politics"]}, "evidence": "Established means founded; Country means nation; Organization means businesses"}
{"sample_id": 8443, "db_id": "mondial_geo", "final": {"question": "What province did the river Klaeaelv travel through and how long is the river?", "sql": "SELECT T1.Province FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Name = 'Klaraelv'", "source_tables": ["river", "city", "located"]}, "evidence": ""}
{"sample_id": 8444, "db_id": "mondial_geo", "final": {"question": "How many Italian regions are bordered by the Mediterranean Sea? How deep is the Mediterranean Sea?", "sql": "SELECT COUNT(DISTINCT T2.province), T3.Depth FROM country AS T1 INNER JOIN located AS T2 ON T1.Code = T2.Country INNER JOIN sea AS T3 ON T3.Name = T2.Sea WHERE T1.Code = 'I' AND T3.Name = 'Mediterranean Sea' GROUP BY T3.Depth", "source_tables": ["country", "sea", "located"]}, "evidence": "Reigion refers to province"}
{"sample_id": 8445, "db_id": "mondial_geo", "final": {"question": "What nations are considered British Overseas Territories?", "sql": "SELECT name FROM country WHERE CODE IN ( SELECT country FROM politics WHERE government = 'British Overseas Territories' )", "source_tables": ["country", "politics"]}, "evidence": "British Overseas Territories is one government form; Nation and country share the same meaning"}
{"sample_id": 8446, "db_id": "mondial_geo", "final": {"question": "Which of the top 3 economies by GDP has the lowest proportion of the economy devoted to agriculture?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP DESC, T2.Agriculture ASC LIMIT 1", "source_tables": ["economy", "country"]}, "evidence": "Economies refers to countries"}
{"sample_id": 8447, "db_id": "mondial_geo", "final": {"question": "How big is Africa, and how many nations make up the continent?", "sql": "SELECT T1.Area, COUNT(T3.Name) FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country WHERE T1.Name = 'Asia' GROUP BY T1.Name, T1.Area", "source_tables": ["country", "continent", "encompasses"]}, "evidence": "Area can measure the size of countries; Country and nation share the same meaning"}
{"sample_id": 8448, "db_id": "mondial_geo", "final": {"question": "Which United States province is home to the greatest number of corporations' corporate headquarters?", "sql": "SELECT T1.Province FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'United States' GROUP BY T1.Province ORDER BY COUNT(T1.Name) DESC LIMIT 1", "source_tables": ["country", "organization"]}, "evidence": "Organization refers to corporation"}
{"sample_id": 8449, "db_id": "mondial_geo", "final": {"question": "What are the most recent three independent nations?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country ORDER BY T2.Independence DESC LIMIT 3", "source_tables": ["country", "politics"]}, "evidence": "Larger date of indepedence refers to more recent indepdence; Nation refers to country"}
{"sample_id": 8555, "db_id": "software_company", "final": {"question": "Among the male customer in their twenties, how many are from places where the average income is more than 3000?", "sql": "SELECT COUNT(T2.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Male' AND T2.INCOME_K > 3000 AND T1.age >= 20 AND T1.age <= 29", "source_tables": ["demog", "customers"]}, "evidence": "male customer in their twenties refer to SEX = 'Male' where age BETWEEN 20 AND 29; average income is more than 3000 refers to INCOME_K > 3000;"}
{"sample_id": 8556, "db_id": "software_company", "final": {"question": "What percentage of elderly customers who are never married in the place with geographic ID 24?", "sql": "SELECT CAST(SUM(CASE WHEN T1.MARITAL_STATUS = 'never married' THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.GEOID = 24", "source_tables": ["demog", "customers"]}, "evidence": "elderly customers refer to age > 65; DIVIDE(COUNT(ID where age > 65, MARITAL_STATUS = 'never married' and GEOID = 24), COUNT(ID where GEOID = 24)) as percentage;"}
{"sample_id": 8557, "db_id": "software_company", "final": {"question": "Among the customers with an average income per inhabitant above 3000, what percentage are in their eighties?", "sql": "SELECT CAST(SUM(CASE WHEN T1.age BETWEEN 80 AND 89 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INCOME_K > 3000", "source_tables": ["demog", "customers"]}, "evidence": "average income per inhabitant above 3000 refers to INCOME_K > 3000; eighties refer to age BETWEEN 80 AND 89; DIVIDE(COUNT(INCOME_K > 3000 and age BETWEEN 80 AND 89), COUNT(INCOME_K > 3000 )) as percentage;"}
{"sample_id": 8558, "db_id": "software_company", "final": {"question": "How many of the customer's reference ID that has a TRUE response?", "sql": "SELECT COUNT(REFID) FROM Mailings1_2 WHERE RESPONSE = 'true'", "source_tables": ["mailings1_2"]}, "evidence": "reference ID refers to REFID;"}
{"sample_id": 8559, "db_id": "software_company", "final": {"question": "List down the customer's reference ID with true response.", "sql": "SELECT REFID FROM Mailings1_2 WHERE RESPONSE = 'true'", "source_tables": ["mailings1_2"]}, "evidence": "reference ID refers to REFID;"}
{"sample_id": 8560, "db_id": "software_company", "final": {"question": "What is the total number of widowed customers with an age below 50?", "sql": "SELECT COUNT(ID) FROM Customers WHERE MARITAL_STATUS = 'Widowed' AND age < 50", "source_tables": ["customers"]}, "evidence": "widowed customers with an age below 50 refer to MARITAL_STATUS = 'Widowed' where age < 50;"}
{"sample_id": 8561, "db_id": "software_company", "final": {"question": "List down the geographic identifier with an number of inhabitants less than 30.", "sql": "SELECT GEOID FROM Demog WHERE INHABITANTS_K < 30", "source_tables": ["demog"]}, "evidence": "geographic identifier with an number of inhabitants less than 30 refers to GEOID where INHABITANTS_K < 30;"}
{"sample_id": 8562, "db_id": "software_company", "final": {"question": "In geographic identifier from 10 to 30, how many of them has an income below 2000?", "sql": "SELECT COUNT(GEOID) FROM Demog WHERE INCOME_K < 2000 AND GEOID >= 10 AND GEOID <= 30", "source_tables": ["demog"]}, "evidence": "GEOID BETWEEN 10 AND 30; INCOME_K < 2000;"}
{"sample_id": 8563, "db_id": "software_company", "final": {"question": "What is the marital status of the customer ages 62 with an level of education of 7?", "sql": "SELECT DISTINCT MARITAL_STATUS FROM Customers WHERE EDUCATIONNUM = 7 AND age = 62", "source_tables": ["customers"]}, "evidence": "customer ages 62 with an level of education of 7 refer age = 62 where EDUCATIONNUM = 7;"}
{"sample_id": 8564, "db_id": "software_company", "final": {"question": "List down the number of inhabitants of customers with a widowed marital status and false response .", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.MARITAL_STATUS = 'Widowed' AND T2.RESPONSE = 'true'", "source_tables": ["demog", "mailings1_2", "customers"]}, "evidence": "number of inhabitants refers to INHABITANTS_K; RESPONSE = 'false';"}
{"sample_id": 8565, "db_id": "software_company", "final": {"question": "What is the response and number of inhabitants of the oldest female customer?", "sql": "SELECT T2.RESPONSE, T3.INHABITANTS_K FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.SEX = 'Female' ORDER BY T1.age DESC LIMIT 1", "source_tables": ["demog", "mailings1_2", "customers"]}, "evidence": "number of inhabitants refers to INHABITANTS_K; oldest female customer refers to SEX = 'Female' where MAX(age);"}
{"sample_id": 8566, "db_id": "software_company", "final": {"question": "Among the female customers with an level of education of 3 and below, list their income.", "sql": "SELECT INCOME_K FROM Demog WHERE GEOID IN ( SELECT GEOID FROM Customers WHERE EDUCATIONNUM < 3 AND SEX = 'Female' )", "source_tables": ["demog", "customers"]}, "evidence": "female customers with level of education of 3 and below refer to SEX = 'Female' where EDUCATIONNUM \u2264 3; income refers to INCOME_K;"}
{"sample_id": 8567, "db_id": "software_company", "final": {"question": "List the level of education and income of customers ages from 30 to 55 with a true response.", "sql": "SELECT T1.EDUCATIONNUM, T3.INCOME_K FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.age >= 30 AND T1.age <= 55 AND T2.RESPONSE = 'true'", "source_tables": ["demog", "mailings1_2", "customers"]}, "evidence": "ages from 30 to 55 refer to age BETWEEN 30 AND 55; RESPONSE = 'true'; income refers to INCOME_K; education level refers to EDUCATIONNUM;"}
{"sample_id": 8568, "db_id": "software_company", "final": {"question": "In male customers ages from 30 to 50, how many of them has an income ranges from 2000 to 2300?", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Male' AND T1.age >= 30 AND T1.age <= 50 AND T2.INCOME_K >= 2000 AND T2.INCOME_K <= 2300", "source_tables": ["demog", "customers"]}, "evidence": "male customers ages from 30 to 50 refer to SEX = 'Male' where age BETWEEN 30 AND 50; income ranges from 2000 to 2300 refers to INCOME_K BETWEEN 2000 AND 3000;"}
{"sample_id": 8569, "db_id": "software_company", "final": {"question": "List the educationnum and response of customers within the age of 20 to 30 that has the highest number of inhabitants among the group.", "sql": "SELECT T1.EDUCATIONNUM, T2.RESPONSE FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.age >= 20 AND T1.age <= 30 ORDER BY T3.INHABITANTS_K DESC LIMIT 1", "source_tables": ["demog", "mailings1_2", "customers"]}, "evidence": "age of 20 to 30 refers to age BETWEEN 20 AND 30; the highest number of inhabitants refers to MAX(INHABITANTS_K);"}
{"sample_id": 8697, "db_id": "chicago_crime", "final": {"question": "How many weapons violation crimes have occurred in the Calumet district?", "sql": "SELECT SUM(CASE WHEN T3.district_name = 'Calumet' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T1.primary_description = 'WEAPONS VIOLATION'", "source_tables": ["district", "iucr", "crime"]}, "evidence": "\"Calumet\" is the district_name; 'WEAPON VIOLATION' is the primary_description of crime"}
{"sample_id": 8698, "db_id": "chicago_crime", "final": {"question": "What is the exact location of the crimes that occurred in the Belmont Cragin community?", "sql": "SELECT T2.latitude, T2.longitude FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'Belmont Cragin' GROUP BY T2.latitude, T2.longitude", "source_tables": ["community_area", "crime"]}, "evidence": "Belmont Cragin community refers to community_area_name = 'Belmont Cragin'; exact location refers to latitude, longitude"}
{"sample_id": 8699, "db_id": "chicago_crime", "final": {"question": "How many different types of crimes, according to the primary description, have occurred in the Hermosa neighborhood?", "sql": "SELECT SUM(CASE WHEN T4.neighborhood_name = 'Hermosa' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN Community_Area AS T3 ON T3.community_area_no = T2.community_area_no INNER JOIN Neighborhood AS T4 ON T4.community_area_no = T3.community_area_no", "source_tables": ["community_area", "neighborhood", "iucr", "crime"]}, "evidence": "\"Hermosa\" is the neighborhood_name"}
{"sample_id": 8700, "db_id": "chicago_crime", "final": {"question": "How many domestic crime cases has Commander Ronald A. Pontecore Jr. been responsible for investigating?", "sql": "SELECT SUM(CASE WHEN T2.domestic = 'TRUE' THEN 1 ELSE 0 END) FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no WHERE T1.commander = 'Ronald A. Pontecore Jr.'", "source_tables": ["district", "crime"]}, "evidence": "domestic crime refers to domestic = 'TRUE'; person responsible for investigating refers to commander"}
{"sample_id": 8701, "db_id": "chicago_crime", "final": {"question": "How many crimes against society happened in the Wentworth district according to the FBI?", "sql": "SELECT SUM(CASE WHEN T1.crime_against = 'Society' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T3.district_name = 'Wentworth'", "source_tables": ["fbi_code", "crime", "district"]}, "evidence": "\"Wentworth\" is the district_name; crime against society refers to crime_against = 'Society\""}
{"sample_id": 8702, "db_id": "chicago_crime", "final": {"question": "What phone number does alderman Emma Mitts have to call if she wants to speak to the commander in charge of the investigation of the crimes that have occurred in her ward?", "sql": "SELECT T3.phone FROM Ward AS T1 INNER JOIN Crime AS T2 ON T2.ward_no = T1.ward_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T1.alderman_first_name = 'Emma' AND T1.alderman_last_name = 'Mitts'", "source_tables": ["crime", "district", "ward"]}, "evidence": ""}
{"sample_id": 8703, "db_id": "chicago_crime", "final": {"question": "How many crimes described as 'The theft of a motor vehicle' by the FBI have taken place in the Lake View community?", "sql": "SELECT SUM(CASE WHEN T3.community_area_name = 'Lake View' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no INNER JOIN Community_Area AS T3 ON T3.community_area_no = T2.community_area_no WHERE T1.description = 'The theft of a motor vehicle.'", "source_tables": ["community_area", "fbi_code", "crime"]}, "evidence": "lake view community refers to community_area_name = 'Lake View'; 'The theft of a motor vehicle' is the description"}
{"sample_id": 8704, "db_id": "chicago_crime", "final": {"question": "In which district have there been more intimidation-type crimes?", "sql": "SELECT T3.district_name FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T1.primary_description = 'INTIMIDATION' GROUP BY T3.district_name ORDER BY COUNT(T1.primary_description) DESC LIMIT 1", "source_tables": ["district", "iucr", "crime"]}, "evidence": "more intimidation-type crime refers to Max(Count(primary_description = 'INTIMIDATION')); district refers to district_name"}
{"sample_id": 8705, "db_id": "chicago_crime", "final": {"question": "What types of domestic crimes have occurred the most in the North Lawndale community?", "sql": "SELECT T2.domestic FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'North Lawndale' AND T2.domestic = 'TRUE' GROUP BY T2.domestic ORDER BY COUNT(T2.domestic) DESC LIMIT 1", "source_tables": ["community_area", "crime"]}, "evidence": "\"North Lawndale' is the community_area_name; occur the most domestic crime refers to Max(Count(domestic = 'TRUE'))"}
{"sample_id": 8706, "db_id": "chicago_crime", "final": {"question": "In which ward of more than 55,000 inhabitants are there more crimes of intimidation with extortion?", "sql": "SELECT T3.ward_no FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN Ward AS T3 ON T3.ward_no = T2.ward_no WHERE T1.primary_description = 'INTIMIDATION' AND T1.secondary_description = 'EXTORTION' AND T3.Population > 55000 GROUP BY T3.ward_no ORDER BY COUNT(T3.ward_no) DESC LIMIT 1", "source_tables": ["ward", "iucr", "crime"]}, "evidence": "more than 55000 inhabitants refers to Population > 55000; 'INTIMIDATION' is the primary_description; 'EXTORTION' refers to secondary_description; more crime refers to Count(ward_no)"}
{"sample_id": 8707, "db_id": "chicago_crime", "final": {"question": "Which commander has had to deal with more cases of criminal sexual abuse?", "sql": "SELECT T3.commander FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T1.secondary_description = 'CRIMINAL SEXUAL ABUSE' GROUP BY T3.commander ORDER BY COUNT(T1.secondary_description) DESC LIMIT 1", "source_tables": ["district", "iucr", "crime"]}, "evidence": "more cases of criminal sexual abuse refers to Max(Count(secondary_description = 'CRIMINAL SEXUAL ABUSE'))"}
{"sample_id": 8708, "db_id": "chicago_crime", "final": {"question": "What percentage of non-domestic crimes have occurred in the Jefferson Park district?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.domestic = 'FALSE' THEN T2.case_number END) AS REAL) * 100 / COUNT(T2.case_number) FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no WHERE T1.district_name = 'Jefferson Park'", "source_tables": ["district", "crime"]}, "evidence": "non domestic crime refers to domestic = 'FALSE'; 'Jefferson Park' is the district_name; percentage = Divide (Count (case_number where domestic = 'FALSE'), Count(case_number)) * 100"}
{"sample_id": 8709, "db_id": "chicago_crime", "final": {"question": "What is the average population of the wards where apartment crimes have been reported without arrests?", "sql": "SELECT AVG(T2.Population) FROM Crime AS T1 INNER JOIN Ward AS T2 ON T2.ward_no = T1.ward_no WHERE T1.location_description = 'APARTMENT' AND T1.arrest = 'FALSE'", "source_tables": ["ward", "crime"]}, "evidence": "apartment crime refers to location_description = 'APARTMENT';\u00a0 without arrest refers to arrest = 'FALSE'; average population = AVG(Population)"}
{"sample_id": 8710, "db_id": "chicago_crime", "final": {"question": "What are the full names of the top 5 most crowded ward aldermen?", "sql": "SELECT alderman_first_name, alderman_last_name FROM Ward ORDER BY Population DESC LIMIT 5", "source_tables": ["ward"]}, "evidence": "most crowded ward refers to Max(Population); full name of alderman refers to alderman_first_name, alderman_last_name"}
{"sample_id": 8711, "db_id": "chicago_crime", "final": {"question": "How many crime against property are there?", "sql": "SELECT COUNT(*) AS cnt FROM FBI_Code WHERE crime_against = 'Property'", "source_tables": ["fbi_code"]}, "evidence": ""}
{"sample_id": 8712, "db_id": "chicago_crime", "final": {"question": "How many districts are there in the police district building with a zip code of 60608?", "sql": "SELECT COUNT(*) AS cnt FROM District WHERE zip_code = 60608", "source_tables": ["district"]}, "evidence": "district refers to district_name"}
{"sample_id": 8713, "db_id": "chicago_crime", "final": {"question": "Who is the crime against criminal sexual abuse?", "sql": "SELECT crime_against FROM FBI_Code WHERE title = 'Criminal Sexual Abuse'", "source_tables": ["fbi_code"]}, "evidence": "\"Criminal Sexual Abuse\" is the title of crime"}
{"sample_id": 8714, "db_id": "chicago_crime", "final": {"question": "Which community has the highest number of neighborhoods?", "sql": "SELECT T1.community_area_name FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no ORDER BY T2.community_area_no DESC LIMIT 1", "source_tables": ["community_area", "neighborhood"]}, "evidence": "community with highest number of neighborhoods refers to Max(Count(community_area_no)); community refers to community_area_name"}
{"sample_id": 8715, "db_id": "chicago_crime", "final": {"question": "How many severe crime incidents were reported at coordinate 41.64820151, -87.54430496?", "sql": "SELECT SUM(CASE WHEN T1.longitude = '-87.54430496' THEN 1 ELSE 0 END) FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.report_no = T2.iucr_no WHERE T2.index_code = 'I' AND T1.latitude = '41.64820251'", "source_tables": ["iucr", "crime"]}, "evidence": "coordinates refers to latitude, longitude; severe crime refers to index_code = 'I'"}
{"sample_id": 8716, "db_id": "chicago_crime", "final": {"question": "Who is the commanding officer in the district with the highest number of reported crimes where no arrest has been made?", "sql": "SELECT T2.commander FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.arrest = 'FALSE' GROUP BY T2.commander ORDER BY COUNT(T1.report_no) DESC LIMIT 1", "source_tables": ["district", "crime"]}, "evidence": "where no arrest refers to arrest = 'FALSE'; highest number of crime refers to Max(Count(report_no)); commanding officer refers to commander"}
{"sample_id": 8717, "db_id": "chicago_crime", "final": {"question": "What are the general and specific descriptions of the most common crime incidents that happened in an aircraft?", "sql": "SELECT T2.primary_description, T2.secondary_description FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.location_description = 'AIRCRAFT' GROUP BY T1.iucr_no ORDER BY COUNT(T1.iucr_no) DESC LIMIT 1", "source_tables": ["iucr", "crime"]}, "evidence": "in aircraft refers to location_description = 'AIRCRAFT'; general description refers to primary_description; specific description refers to secondary_description; most common crime incidents refers to Max(Count(iucr_no))"}
{"sample_id": 8718, "db_id": "chicago_crime", "final": {"question": "Between Deering and Near West districts, which district reported the most number of crime incidents that happened in a library?", "sql": "SELECT T1.district_name FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T1.district_name IN ('Deering', 'Near West') AND T2.location_description = 'LIBRARY' GROUP BY T1.district_name ORDER BY COUNT(T2.district_no) DESC LIMIT 1", "source_tables": ["district", "crime"]}, "evidence": "\"Deering\" and \"Near West\" are both district_name; 'LIBRARY' is the location_description; district with the most number of crime Max(Count(district_no))"}
{"sample_id": 8719, "db_id": "chicago_crime", "final": {"question": "How many arrests have been made due to forcible entry burglary that took place in a day care center?", "sql": "SELECT SUM(CASE WHEN T2.arrest = 'TRUE' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.location_description = 'DAY CARE CENTER' AND T1.secondary_description = 'FORCIBLE ENTRY' AND T1.primary_description = 'BURGLARY'", "source_tables": ["iucr", "crime"]}, "evidence": "\"BURGLARY\" is the primary_description; 'FORCIBLE ENTRY' is the secondary_description; 'DAY CARE CENTER' is the location_description; arrests have been made refers to arrest = 'TRUE'"}
{"sample_id": 8720, "db_id": "chicago_crime", "final": {"question": "What is the name of the district with the highest number of domestic violence cases?", "sql": "SELECT T2.district_name FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.domestic = 'TRUE' GROUP BY T2.district_name ORDER BY COUNT(T1.district_no) DESC LIMIT 1", "source_tables": ["district", "crime"]}, "evidence": "domestic violence refers to domestic = 'TRUE'; highest number of case refers to Max(Count(district_no)); name of district refers to distric_name"}
{"sample_id": 8721, "db_id": "chicago_crime", "final": {"question": "In the least populated community, what is the most common location of all the reported crime incidents?", "sql": "SELECT T2.location_description FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.population = ( SELECT MIN(population) FROM Community_Area ) AND T2.location_description IS NOT NULL GROUP BY T2.location_description", "source_tables": ["community_area", "crime"]}, "evidence": "least populated refers to Min(Population); community refers to community_area_no; most common location refers to Max(Count(location_description))"}
{"sample_id": 8722, "db_id": "chicago_crime", "final": {"question": "How many violation of laws are there where no arrest has been made?", "sql": "SELECT SUM(CASE WHEN T1.description LIKE '%The violation of laws%' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T2.Arrest = 'FALSE'", "source_tables": ["fbi_code", "crime"]}, "evidence": "\"The violation of laws \" is the description of incidents; no arrest has been made refers to arrest = 'FALSE'"}
{"sample_id": 8723, "db_id": "chicago_crime", "final": {"question": "What is the precise coordinate of the location where simple assault incidents happened the most in Chatham?", "sql": "SELECT T2.latitude, T2.longitude FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T1.title = 'Simple Assault' AND T3.community_area_name = 'Chatham' AND T3.community_area_no = 44 ORDER BY T2.latitude DESC, T2.longitude DESC LIMIT 1", "source_tables": ["community_area", "fbi_code", "crime"]}, "evidence": "precise coordinates refers to latitude, longitude; 'Simple Assault' is the title of incident; 'Chatham' is the community_area_name; most incident happened refers to Max(Count(latitude, longitude))"}
{"sample_id": 8724, "db_id": "chicago_crime", "final": {"question": "In the South side community, what is the name of the community with the most reported incidents of unlawful taking, carrying, leading, or riding away of property from the possession or constructive possession of another person?", "sql": "SELECT T3.community_area_name FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T3.side = 'South' AND T1.description = 'The unlawful taking, carrying, leading, or riding away of property FROM the possession or constructive possession of another person.' GROUP BY T3.community_area_name ORDER BY COUNT(T1.fbi_code_no) DESC LIMIT 1", "source_tables": ["community_area", "fbi_code", "crime"]}, "evidence": "\"unlawful taking, carrying, leading, or riding away of property from the possession or constructive possession of another person\" is the description; name of community refer to community_area_name; most reported incidents refers to Max(Count(fbi_code_no))"}
{"sample_id": 8725, "db_id": "chicago_crime", "final": {"question": "How many crime against society were reported in Englewood?", "sql": "SELECT SUM(CASE WHEN T3.community_area_name = 'Englewood' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T1.crime_against = 'Society'", "source_tables": ["community_area", "fbi_code", "crime"]}, "evidence": "\"Englewood\" is the community_area_name; 'Society' is the crime_against"}
{"sample_id": 8726, "db_id": "chicago_crime", "final": {"question": "What is the weekly average number of fraud incidents that were reported in January 2018? Provide the description of the location where the majority of fraud incidents occurred in the said month.", "sql": "SELECT CAST(COUNT(T1.fbi_code_no) AS REAL) / 4 FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE SUBSTR(T2.date, 1, 1) = '1' AND SUBSTR(T2.date, 5, 4) = '2018'", "source_tables": ["fbi_code", "crime"]}, "evidence": "fraud incident refers to title = 'Fraud'; reported in January 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'; description of location refers to location_description; weekly average refers to Divide (Count(report_no), 4); majority of incidents occurred refers to Max(Count(location_description))"}
{"sample_id": 8727, "db_id": "chicago_crime", "final": {"question": "Please list any three community areas with a population of more than 50,000.", "sql": "SELECT community_area_name FROM Community_Area WHERE population > 50000 LIMIT 3", "source_tables": ["community_area"]}, "evidence": "population of more than 50000 refers to Population > 50000; community area refers to community_area_name"}
{"sample_id": 8728, "db_id": "chicago_crime", "final": {"question": "What are the communities that are grouped together on the central side?", "sql": "SELECT community_area_name FROM Community_Area WHERE side = 'Central'", "source_tables": ["community_area"]}, "evidence": "central side refers to side = 'Central'; community refers to community_area_name"}
{"sample_id": 8729, "db_id": "chicago_crime", "final": {"question": "What is the difference between the number of communities that are located on the north and south sides with a population of more than 30,000?", "sql": "SELECT SUM(CASE WHEN side = 'South ' THEN 1 ELSE 0 END) - SUM(CASE WHEN side = 'North' THEN 1 ELSE 0 END) AS DIFF FROM Community_Area WHERE population > 300000", "source_tables": ["community_area"]}, "evidence": "population of more than 30000 refers to Population > 30000; 'North' and 'South' both are the side; different number of community refers to Subtract(Count(Community_area_no where side = 'South'), Count(Community_area_no where side = 'North'))"}
{"sample_id": 8730, "db_id": "chicago_crime", "final": {"question": "Please list all of the contact information for the police district Near West.", "sql": "SELECT phone, fax, tty, twitter FROM District WHERE district_name = 'Near West'", "source_tables": ["district"]}, "evidence": "\"Near West\" is the district_name; all contact information refers to phone, fax, tty, twitter"}
{"sample_id": 8731, "db_id": "chicago_crime", "final": {"question": "Who is responsible for crime cases in district Lincoln?", "sql": "SELECT commander FROM District WHERE district_name = 'Lincoln'", "source_tables": ["district"]}, "evidence": "\"Lincoln\" is the district_name; responsible for crime case refers to commander"}
{"sample_id": 8732, "db_id": "chicago_crime", "final": {"question": "What is the general and specific description of incident 275?", "sql": "SELECT primary_description, secondary_description FROM IUCR WHERE iucr_no = 275", "source_tables": ["iucr"]}, "evidence": "incident 275 refers to iucr_no = 275; general description refers to primary_description; specific description refers to secondary_description"}
{"sample_id": 8733, "db_id": "chicago_crime", "final": {"question": "What is the percentage of severe cases that are related to sexual assault?", "sql": "SELECT CAST(SUM(CASE WHEN primary_description = 'CRIM SEXUAL ASSAULT' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM IUCR WHERE index_code = 'I'", "source_tables": ["iucr"]}, "evidence": "related to sexual assault refers to primary_description = 'CRIME SEXUAL ASSAULT'; severe case refers to index_code = 'I'; percentage = Divide (Count (iucr_no where primary_description = 'CRIME SEXUAL ASSAULT'), Count (iucr_no)) * 100"}
{"sample_id": 8822, "db_id": "food_inspection", "final": {"question": "How many eateries got highest inspection in 2013?", "sql": "SELECT COUNT(DISTINCT business_id) FROM inspections WHERE STRFTIME('%Y', 'date') = '2013' AND score = ( SELECT MAX(score) FROM inspections WHERE STRFTIME('%Y', 'date') = '2013' )", "source_tables": ["inspections"]}, "evidence": "eateries got highest inspection score in 2013 refer to business_id from inspections where score = 100 and year(date) = 2013;"}
{"sample_id": 8823, "db_id": "food_inspection", "final": {"question": "List down the eateries' IDs with structural inspection type in February 2016.", "sql": "SELECT business_id FROM inspections WHERE type = 'Structural Inspection' AND 'date' LIKE '2016-02%'", "source_tables": ["inspections"]}, "evidence": "eateries' IDs refer to business_id; structural inspection type refers to inspections WHERE type = 'Structural Inspection'; in February 2016 refers to year(date) = 2016 and month(date) = 2;"}
{"sample_id": 8824, "db_id": "food_inspection", "final": {"question": "How many eateries had low risk for violation with unpermitted food facility description?", "sql": "SELECT COUNT(DISTINCT business_id) FROM violations WHERE risk_category = 'Low Risk' AND description = 'Unpermitted food facility'", "source_tables": ["violations"]}, "evidence": "eateries represent business; low risk for violation refers to risk_category = 'Low Risk';"}
{"sample_id": 8825, "db_id": "food_inspection", "final": {"question": "Provide eateries' IDs, risk categories and descriptions with violation ID of 103101.", "sql": "SELECT business_id, risk_category, description FROM violations WHERE violation_type_id = '103101'", "source_tables": ["violations"]}, "evidence": "eateries' IDs refer to business_id; violation ID of 103101 refers to violation_type_id = '103101';"}
{"sample_id": 8826, "db_id": "food_inspection", "final": {"question": "When did eateries from San Bruno city get highest score in inspection?", "sql": "SELECT T1.'date' FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.city = 'SAN BRUNO' ORDER BY T1.score DESC LIMIT 1", "source_tables": ["businesses", "inspections"]}, "evidence": "eateries represent business; highest score in inspection refers to score = 100;"}
{"sample_id": 8827, "db_id": "food_inspection", "final": {"question": "Describe the inspection types and violation descriptions under moderate risk category for ART's CAF\u00c9.", "sql": "SELECT DISTINCT T2.type, T1.description FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN businesses AS T3 ON T2.business_id = T3.business_id WHERE T3.name = 'ART''S CAF\u00c9' AND T1.risk_category = 'Moderate Risk'", "source_tables": ["businesses", "violations", "inspections"]}, "evidence": "ART's CAF\u00c9 is the name of the business; moderate risk category refers to risk_category = 'Moderate Risk';"}
{"sample_id": 8828, "db_id": "food_inspection", "final": {"question": "Mention the violation type ID and description of high risk category for STARBUCKS.", "sql": "SELECT DISTINCT T1.violation_type_id, T1.description FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'STARBUCKS' AND T1.risk_category = 'High Risk'", "source_tables": ["businesses", "violations"]}, "evidence": "STARBUCKS is the name of the business; high risk category refers to risk_category = 'High Risk';"}
{"sample_id": 8829, "db_id": "food_inspection", "final": {"question": "List the inspection dates, scores and inspection types for the eateries with tax code AA.", "sql": "SELECT T1.'date', T1.score, T1.type FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.tax_code = 'AA'", "source_tables": ["businesses", "inspections"]}, "evidence": "eateries with tax code AA refer to business_id where tax_code = 'AA';"}
{"sample_id": 8830, "db_id": "food_inspection", "final": {"question": "Provide eateries' IDs, names and addresses which were inspected on 30th July, 2016.", "sql": "SELECT DISTINCT T2.business_id, T2.name, T2.address FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.date = '2016-07-30'", "source_tables": ["businesses", "inspections"]}, "evidence": "eateries' IDs inspected on 30th July, 2016 refer to business_id where business_id is not null and date = '2016-07-30';"}
{"sample_id": 8831, "db_id": "food_inspection", "final": {"question": "Describe the violation dates, risk categories, descriptions and names of the eateries under Jade Chocolates LLC.", "sql": "SELECT T1.'date', T1.risk_category, T1.description, T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.owner_name = 'Jade Chocolates LLC'", "source_tables": ["businesses", "violations"]}, "evidence": "eateries under Jade Chocolates LLC refer to business_id where owner_name = 'Jade Chocolates LLC';"}
{"sample_id": 8832, "db_id": "food_inspection", "final": {"question": "Provide the names, risk categories and descriptions for the eateries with violation type ID of 103111.", "sql": "SELECT T2.name, T1.risk_category, T1.description FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.violation_type_id = '103111'", "source_tables": ["businesses", "violations"]}, "evidence": "eateries refer to business_id;"}
{"sample_id": 8833, "db_id": "food_inspection", "final": {"question": "Among violations on 3rd June, 2014, describe any 5 names, located cities and tax codes of the eateries with high risk category.", "sql": "SELECT DISTINCT T2.name, T2.city, T2.tax_code FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' AND T1.'date' = '2014-06-03' LIMIT 5", "source_tables": ["businesses", "violations"]}, "evidence": "eateries with high risk category refer to business_id where risk_category = 'High Risk'; 3rd June, 2014 refers to date = '2014-06-03';"}
{"sample_id": 8834, "db_id": "food_inspection", "final": {"question": "What was the inspection type when El Aji Peruvian Restaurant got highest inspection score?", "sql": "SELECT T1.type FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'El Aji Peruvian Restaurant' ORDER BY T1.score DESC LIMIT 1", "source_tables": ["businesses", "inspections"]}, "evidence": "El Aji Peruvian Restaurant is the name of the business; highest inspection score refers to MAX(score);"}
{"sample_id": 8835, "db_id": "food_inspection", "final": {"question": "Who were the owners of eateries which had highest health hazard by improper cooking time or temperatures?", "sql": "SELECT T2.owner_name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' AND T1.description = 'Improper cooking time or temperatures'", "source_tables": ["businesses", "violations"]}, "evidence": "owners of eateries refer to owner_name; highest health hazard by improper cooking time or temperatures refers to risk_category = 'High Risk' and description = 'Improper cooking time or temperatures';"}
{"sample_id": 8836, "db_id": "food_inspection", "final": {"question": "List the eateries' names and addresses which had reinspection on 2nd February, 2015.", "sql": "SELECT T2.name, T2.address FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.'date' = '2015-02-02' AND T1.type = 'Reinspection/Followup'", "source_tables": ["businesses", "inspections"]}, "evidence": "eateries which had reinspection on 2nd February, 2015 refer to business_id where date = '2015-02-02' and type = 'Reinspection/Followup';"}
{"sample_id": 8837, "db_id": "food_inspection", "final": {"question": "List the names and business certificates of the eateries which got inspection score under 50.", "sql": "SELECT T2.name, T2.business_id FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score < 50", "source_tables": ["businesses", "inspections"]}, "evidence": "eateries which got inspection score under 50 refer to business_id where score < 50;"}
{"sample_id": 8897, "db_id": "cookbook", "final": {"question": "Which ingredient appeared the most in recipes? Calculate its amount of appearance in percentage.", "sql": "SELECT T1.name, CAST(COUNT(T2.ingredient_id) AS FLOAT) * 100 / ( SELECT COUNT(T2.ingredient_id) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T2.ingredient_id = T1.ingredient_id ) AS 'percentage' FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T2.ingredient_id = T1.ingredient_id GROUP BY T2.ingredient_id ORDER BY COUNT(T2.ingredient_id) DESC LIMIT 1", "source_tables": ["ingredient", "quantity"]}, "evidence": "ingredient appeared the most in recipes refers to MAX(COUNT(ingredient_id)); calculation = MULTIPLY(DIVIDE(COUNT(MAX(ingredient_id)), COUNT(ingredient_id)), 100)"}
{"sample_id": 8898, "db_id": "cookbook", "final": {"question": "Provide the title and total time of the recipe which has the highest possibility of gaining weight.", "sql": "SELECT T1.title, T1.prep_min + T1.cook_min + T1.stnd_min FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat DESC LIMIT 1", "source_tables": ["recipe", "nutrition"]}, "evidence": "the highest possibility of gaining weight refers to MAX(total_fat); total time refers to recipe_id, total time refers to TOTAL(prep_min, cook_min, stnd_min)"}
{"sample_id": 8899, "db_id": "cookbook", "final": {"question": "Which recipes contain almond extract?", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.name = 'almond extract'", "source_tables": ["recipe", "ingredient", "quantity"]}, "evidence": "almond extract is a name of an ingredient"}
{"sample_id": 8900, "db_id": "cookbook", "final": {"question": "List the ingredients in Tomato-Cucumber Relish.", "sql": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Tomato-Cucumber Relish'", "source_tables": ["recipe", "ingredient", "quantity"]}, "evidence": "Tomato-Cucumber Relish refers to title"}
{"sample_id": 8901, "db_id": "cookbook", "final": {"question": "How many ingredients are needed to prepare Idaho Potato Supreme?", "sql": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Idaho Potato Supreme'", "source_tables": ["recipe", "quantity"]}, "evidence": "Idaho Potato Supreme refers to title"}
{"sample_id": 8902, "db_id": "cookbook", "final": {"question": "Provide the ingredients that are rationed in the recipe with the highest carbohydrate content.", "sql": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id INNER JOIN Nutrition AS T3 ON T3.recipe_id = T2.recipe_id WHERE T2.max_qty = T2.min_qty ORDER BY T3.carbo DESC LIMIT 1", "source_tables": ["ingredient", "nutrition", "quantity"]}, "evidence": "the highest carbohydrate content refers to MAX(carbo)"}
{"sample_id": 8903, "db_id": "cookbook", "final": {"question": "Name the recipes which can lead to constipation.", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.iron > 20", "source_tables": ["recipe", "nutrition"]}, "evidence": "can lead to constipation refers to iron > 20"}
{"sample_id": 8904, "db_id": "cookbook", "final": {"question": "Describe the ingredients in the recipe with the highest vitamin that helps vision in dim light.", "sql": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id INNER JOIN Nutrition AS T3 ON T3.recipe_id = T2.recipe_id ORDER BY T3.vitamin_a DESC LIMIT 1", "source_tables": ["ingredient", "nutrition", "quantity"]}, "evidence": "the highest vitamin that helps vision in dim light refers to MAX(vitamin_a)"}
{"sample_id": 8905, "db_id": "cookbook", "final": {"question": "Provide the ingredients and maximum quantities of the recipe which can serve 7 people.", "sql": "SELECT T3.name, T2.max_qty FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.servings = 7", "source_tables": ["recipe", "ingredient", "quantity"]}, "evidence": "can serve 7 people refers to servings = 7"}
{"sample_id": 8906, "db_id": "cookbook", "final": {"question": "Among the recipes from The California Tree Fruit Agreement, calculate the percentage of sodium-free recipes.", "sql": "SELECT CAST(SUM(CASE WHEN T2.sodium < 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.source = 'The California Tree Fruit Agreement'", "source_tables": ["recipe", "nutrition"]}, "evidence": "The California Tree Fruit Agreement is a source; calculation = MULTIPLY(DIVIDE(COUNT(sodium BETWEEN 0 AND 5 THEN recipe_id), COUNT(recipe_id)), 100)"}
{"sample_id": 8907, "db_id": "cookbook", "final": {"question": "List the ingredients which measure in slices.", "sql": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T2.unit = 'slice(s)'", "source_tables": ["ingredient", "quantity"]}, "evidence": "slices refers to unit = 'slice(s)'"}
{"sample_id": 8908, "db_id": "cookbook", "final": {"question": "How many recipes can be made with canned dairy?", "sql": "SELECT COUNT(*) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T1.category = 'canned dairy'", "source_tables": ["ingredient", "quantity"]}, "evidence": "canned dairy is a category"}
{"sample_id": 8909, "db_id": "cookbook", "final": {"question": "Provide the title and total time of the recipe which can be made with only lima beans.", "sql": "SELECT T1.title, T1.prep_min + T1.cook_min + T1.stnd_min FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.name = 'lima beans'", "source_tables": ["recipe", "ingredient", "quantity"]}, "evidence": "total time refers to total time refers to TOTAL(prep_min, cook_min, stnd_min); lima beans is a name of an ingredient"}
{"sample_id": 8960, "db_id": "human_resources", "final": {"question": "How much is the minimum salary given to the position with the most complex work?", "sql": "SELECT minsalary FROM position ORDER BY educationrequired DESC LIMIT 1", "source_tables": ["position"]}, "evidence": "most complex work refers to MAX(educationrequired); minimum salary refers to minsalary"}
{"sample_id": 8961, "db_id": "human_resources", "final": {"question": "What is the full office location address where most of the employees work at?", "sql": "SELECT T2.address, T2.locationcity, T2.state, T2.zipcode FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID GROUP BY T2.address, T2.locationcity, T2.state, T2.zipcode ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["employee", "location"]}, "evidence": "full office location address = address, locationcity, state, zipcode; location where most employees work at refers to MAX(locationID)"}
{"sample_id": 8962, "db_id": "human_resources", "final": {"question": "What is the average salary of all employees with a 2 year degree position?", "sql": "SELECT AVG(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.educationrequired = '2 year degree'", "source_tables": ["employee", "position"]}, "evidence": "2 year degree refers to educationrequired = '2 year degree'; calculation = DIVIDE(SUM(salary), COUNT(positiontitle))"}
{"sample_id": 8963, "db_id": "human_resources", "final": {"question": "How many male Regional Managers are there?", "sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Regional Manager' AND T1.gender = 'M'", "source_tables": ["employee", "position"]}, "evidence": "male refers to gender = 'M'; Regional Managers is a position title"}
{"sample_id": 8964, "db_id": "human_resources", "final": {"question": "Which position has the highest amount of poor performing employees?", "sql": "SELECT T2.positiontitle FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.performance = 'Poor' GROUP BY T2.positiontitle ORDER BY COUNT(T2.positiontitle) DESC LIMIT 1", "source_tables": ["employee", "position"]}, "evidence": "poor performing employees refers to performance = 'Poor'; the highest amount of employees refers to MAX(positiontitle)"}
{"sample_id": 8965, "db_id": "human_resources", "final": {"question": "Which position has the highest number of female employees with a 2 year degree?", "sql": "SELECT T2.positiontitle FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.educationrequired = '2 year degree' AND T1.gender = 'F' GROUP BY T2.positiontitle ORDER BY COUNT(T2.positiontitle) DESC LIMIT 1", "source_tables": ["employee", "position"]}, "evidence": "2 year degree refers to educationrequired = '2 year degree'; female refers to gender = 'F'; the highest number of employees refers to MAX(positionID)"}
{"sample_id": 8966, "db_id": "human_resources", "final": {"question": "How many Account Representatives are there in Illinois with satisfying performance?", "sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Account Representative' AND T1.performance = 'Good' AND T2.state = 'IL'", "source_tables": ["employee", "position", "location"]}, "evidence": "Account Representatives is a position title; satisfying performance mostly refers togood performance"}
{"sample_id": 8967, "db_id": "human_resources", "final": {"question": "What is the average salary of the worst performing managers?", "sql": "SELECT AVG(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) FROM employee AS T1 INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.performance = 'Poor' AND T2.positiontitle = 'Manager'", "source_tables": ["employee", "position"]}, "evidence": "the worst performing refers to performance = 'Poor'; manager is a positiontitle; average salary refers to AVG(salary)"}
{"sample_id": 8968, "db_id": "human_resources", "final": {"question": "In which state can you find the highest amount of good performing Account Representatives?", "sql": "SELECT T2.state FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Account Representative' AND T1.performance = 'Good' GROUP BY T2.state ORDER BY COUNT(T2.state) DESC LIMIT 1", "source_tables": ["employee", "position", "location"]}, "evidence": "good performing refers to performance = 'Good'; Account Representatives is a positiontitle; highest amount of employee refers to MAX(positionID);"}
{"sample_id": 8969, "db_id": "human_resources", "final": {"question": "Mention the employee's full name and performance status who got the lowest in salary per year.", "sql": "SELECT firstname, lastname, performance FROM employee ORDER BY salary ASC LIMIT 1", "source_tables": ["employee"]}, "evidence": "full name = firstname, lastname; the lowest salary refers to MIN(salary)"}
{"sample_id": 8970, "db_id": "human_resources", "final": {"question": "List the location cities in the Western states.", "sql": "SELECT locationcity FROM location WHERE state IN ('CO', 'UT', 'CA')", "source_tables": ["location"]}, "evidence": "Western states refers to state = 'CO' OR state = 'UT' OR state = 'CA'; location cities refers to locationcity"}
{"sample_id": 9051, "db_id": "bike_share_1", "final": {"question": "In 2015, what percentage of trips that had the subscription type was Customer and ended on a rainy day?", "sql": "SELECT CAST(SUM(CASE WHEN T2.events = 'Rain' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTR(CAST(T2.date AS TEXT), -4) = '2015' AND T1.subscription_type = 'Customer'", "source_tables": ["weather", "trip"]}, "evidence": "in 2015 refers to end_date like '%2015%'; percentage = DIVIDE(COUNT(events = 'Rain'), COUNT(events));"}
{"sample_id": 9052, "db_id": "bike_share_1", "final": {"question": "How many bike stations are installed after August, 2013 in San Jose?", "sql": "SELECT COUNT(installation_date) FROM station WHERE city = 'San Jose' AND (SUBSTR(CAST(installation_date AS TEXT), 1, INSTR(installation_date, '/') - 1) IN ('8', '9', '10', '11', '12') AND SUBSTR(CAST(installation_date AS TEXT), -4) = '2013') OR SUBSTR(CAST(installation_date AS TEXT), -4) > '2013'", "source_tables": ["station"]}, "evidence": "installed after August, 2013 refers to year(installation_date)>2013; in San Jose refers to city = 'San Jose';"}
{"sample_id": 9053, "db_id": "bike_share_1", "final": {"question": "What is the mean temperature in Fahrenheit on 8/29/2013 for the area where the zip code is 94107?", "sql": "SELECT SUM(IIF(zip_code = 94107 AND date = '8/29/2013', mean_temperature_f, 0)) FROM weather", "source_tables": ["weather"]}, "evidence": "mean temperature in Fahrenheit refers to mean_temperature_f; on 8/29/2013 refers to date = '8/29/2013';"}
{"sample_id": 9054, "db_id": "bike_share_1", "final": {"question": "What is the difference between the hottest temperature and the coldest temperature in in Fahrenheit on 8/29/2013 for the area where the zip code is 94107?", "sql": "SELECT SUM(IIF(zip_code = 94107 AND date = '8/29/2013', max_temperature_f - min_temperature_f, 0)) FROM weather", "source_tables": ["weather"]}, "evidence": "hottest temperature refers to max_temperatutre_f; coldest temperature refers to min_temperature_f; difference = SUBTRACT(max_temperature_f, min_temperature_f); date = '8/29/2013'"}
{"sample_id": 9055, "db_id": "bike_share_1", "final": {"question": "How many bikes can be borrowed in San Jose Diridon Caltrain Station at 12:06:01 on 2013/8/29?", "sql": "SELECT T2.bikes_available FROM station AS T1 INNER JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.name = 'San Jose Diridon Caltrain Station' AND T2.time = '2013/08/29 12:06:01'", "source_tables": ["station", "status"]}, "evidence": "number of bikes that can be borrowed refers to bikes_available; San Jose Diridon Caltrain Station refers to name = 'San Jose Diridon Caltrain Station'; time = '2013/8/29 12:06:01'"}
{"sample_id": 9056, "db_id": "bike_share_1", "final": {"question": "In which city's station is a bike borrowed on trip ID4069?", "sql": "SELECT T2.city FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.id = 4069", "source_tables": ["station", "trip"]}, "evidence": "bike is borrowed from refers to start_station_id;"}
{"sample_id": 9057, "db_id": "bike_share_1", "final": {"question": "How many bike trips started on the days in September, 2013 with the hottest temperature over 70 degrees Fahrenheit in the area where the zip code is 94107?", "sql": "SELECT COUNT(T1.id) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '9/%/2013' AND T2.zip_code = 94107 AND T2.max_temperature_f > 70", "source_tables": ["weather", "trip"]}, "evidence": "started on the days in September, 2013 refers to date LIKE'9%'AND date LIKE'%2013' hottest temperature over 70 degrees Fahrenheit refers to max_temperature_f>70;"}
{"sample_id": 9058, "db_id": "bike_share_1", "final": {"question": "Please list the starting stations of the bike trips made on a day with a max humidity over 80 in 2013 in the area where the zip code is 94107.", "sql": "SELECT DISTINCT T1.start_station_name FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTR(CAST(T2.date AS TEXT), -4) = '2013' AND T2.zip_code = 94107 AND T2.max_temperature_f > 80", "source_tables": ["weather", "trip"]}, "evidence": "starting stations refers to start_station_name; day with a max humidity over 80 refers to max_humidity>80; in 2013 refers to date LIKE'%2013';"}
{"sample_id": 9059, "db_id": "bike_share_1", "final": {"question": "How many trips made by a subscriber started in August, 2013 from a station that can hold more than 20 bikes?", "sql": "SELECT COUNT(T2.id) FROM station AS T1 INNER JOIN trip AS T2 ON T1.id = T2.start_station_id WHERE T2.subscription_type = 'Subscriber' AND T2.start_date LIKE '8/%/2013%' AND T1.dock_count > 20", "source_tables": ["station", "trip"]}, "evidence": "subscriber refers to subscription_type = 'Subscriber'; in August 2013 refers to start_date LIKE'8%' AND start_date LIKE'%2013%'; station that can hold more than 20 bikes refers to dock_count>20;"}
{"sample_id": 9060, "db_id": "bike_share_1", "final": {"question": "What is the location coordinates of the bike station from which the bike for the trip that last the longest was borrowed?", "sql": "SELECT T2.lat, T2.long FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.duration = ( SELECT MAX(T1.duration) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name )", "source_tables": ["station", "trip"]}, "evidence": "location coordinates refers to (lat, long); bike that was borrowed the longest refers to MAX(duration);"}
{"sample_id": 9061, "db_id": "bike_share_1", "final": {"question": "How many docks were left at the end station for trip ID4069?", "sql": "SELECT SUM(T2.docks_available) FROM trip AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.end_station_id WHERE T1.ID = 4069", "source_tables": ["status", "trip"]}, "evidence": "end station refers to end_station_id; docks that were left refers to docks_available;"}
{"sample_id": 9062, "db_id": "bike_share_1", "final": {"question": "Among the bike trips started on the days with a fog in 2013, how many of those trips started from the station \"2nd at Townsend\"?", "sql": "SELECT COUNT(T1.start_station_name) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '%2013%' AND T2.events = 'Fog' AND T1.start_station_name = '2nd at Townsend' AND T2.zip_code = 94107", "source_tables": ["weather", "trip"]}, "evidence": "started on the days with a fog refers to start_date where events = 'fog'; in 2013 refers to date LIKE '%2013'; started from station refers to start_station_name; start_station_name = '2nd at Townsend';"}
{"sample_id": 9063, "db_id": "bike_share_1", "final": {"question": "What is the longest duration for a bike trip starting on a day with a fog in 2013?", "sql": "SELECT MAX(T1.duration) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '%2013%' AND T2.events = 'Fog' AND T2.zip_code = 94107", "source_tables": ["weather", "trip"]}, "evidence": "longest duration refers to MAX(duration); starting on a day with a fog refers to start_date where events = 'fog'; in 2013 refers to date LIKE '%2013';"}
{"sample_id": 9064, "db_id": "bike_share_1", "final": {"question": "When was the bike station from which the bike was borrowed on trip ID4069 installed?", "sql": "SELECT T2.installation_date FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.id = 4069", "source_tables": ["station", "trip"]}, "evidence": "bike was borrowed from refers to start_station_id; when the bike station was installed refers to installation_date;"}
{"sample_id": 9065, "db_id": "bike_share_1", "final": {"question": "How many trips with a bike borrowed from the stations in San Francisco were made by a subscriber?", "sql": "SELECT COUNT(T1.id) FROM trip AS T1 INNER JOIN station AS T2 ON T2.ID = T1.start_station_id WHERE T2.city = 'San Francisco' AND T1.subscription_type = 'Subscriber'", "source_tables": ["station", "trip"]}, "evidence": "bike was borrowed from refers to start_station_id; San Francisco refers to city = 'San Francisco'; subscriber refers to subscription_type = 'Subscriber';"}
{"sample_id": 9066, "db_id": "bike_share_1", "final": {"question": "On the day with the hottest temperature ever in 2014, how many bike trips started from the station 2nd at Folsom?", "sql": "SELECT COUNT(T1.start_station_name) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '%2014%' AND T2.zip_code = 94107 AND T1.start_station_name = '2nd at Folsom' ORDER BY T2.max_temperature_f DESC LIMIT 1", "source_tables": ["weather", "trip"]}, "evidence": "hottest temperature refers to max_temperatutre_f; in 2014 refers to date LIKE '%2014'; started from station refers to start_station_name; start_station_name = '2nd at Folsom';"}
{"sample_id": 9067, "db_id": "bike_share_1", "final": {"question": "What is the average duration of a bike trip made on the day with the hottest temperature ever in 2014?", "sql": "SELECT AVG(T1.duration) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '%2014%' AND T1.start_station_name = '2nd at Folsom' AND T2.max_temperature_f = ( SELECT max_temperature_f FROM weather ORDER BY max_temperature_f DESC LIMIT 1 )", "source_tables": ["weather", "trip"]}, "evidence": "average duration = DIVIDE(SUM(duration), COUNT(id)); hottest temperature refers to max_temperature_f; in 2014 refers to date LIKE '%2014';"}
{"sample_id": 9068, "db_id": "bike_share_1", "final": {"question": "List out all end stations for a bicycle that were making a trip starting from 2nd at South Park station? Only retain the unique value.", "sql": "SELECT DISTINCT end_station_name FROM trip WHERE start_station_name = '2nd at South Park'", "source_tables": ["trip"]}, "evidence": "end station refers to end_station_name; starting from refers to start_station_name; start_station_name = '2nd at South Park';"}
{"sample_id": 9069, "db_id": "bike_share_1", "final": {"question": "How many rainy days were recorded in Mountain View?", "sql": "SELECT SUM(IIF(zip_code = 94041 AND events = 'Rain', 1, 0)) FROM weather", "source_tables": ["weather"]}, "evidence": "rainy days refers to events = 'rain'; Mountain View refers to zip_code = 94041;"}
{"sample_id": 9070, "db_id": "bike_share_1", "final": {"question": "What is the total number of bikes that can be hold in Redwood City before 2014.", "sql": "SELECT SUM(CASE WHEN city = 'Redwood City' AND SUBSTR(installation_date, -4) < '2014' THEN dock_count ELSE 0 END) NUM FROM station", "source_tables": ["station"]}, "evidence": "total number of bikes that can be hold = MAX(dock_count); before 2014 refers to year(installation_date)<2014;"}
{"sample_id": 9071, "db_id": "bike_share_1", "final": {"question": "What is the longest trip duration according? Convert the it to number of days.", "sql": "SELECT MAX(duration), CAST(MAX(duration) AS REAL) / 86400 FROM trip", "source_tables": ["trip"]}, "evidence": "longest trip duration refers to MAX(duration); days conversion = DIVIDE(duration, 86400);"}
{"sample_id": 9072, "db_id": "bike_share_1", "final": {"question": "Convert all temperature recorded at San Francisco city during August 2013 into degree Celsius.", "sql": "SELECT (max_temperature_f - 32) / 1.8000 , (mean_temperature_f - 32) / 1.8000 , (min_temperature_f - 32) / 1.8000 FROM weather WHERE SUBSTR(CAST(date AS TEXT), 1, INSTR(date, '/') - 1) = '8' AND SUBSTR(CAST(date AS TEXT), -4) = '2013' AND zip_code = 94107", "source_tables": ["weather"]}, "evidence": "temperature refers to max_temperature_f; March 2013 refers to date like '3/%/2013'; conversion to Celcius = DIVIDE(SUBTRACT(max_temperature_f, 32), 1.800) as Celsius1; DIVIDE(SUBTRACT(mean_temperature_f, 32), 1.800) as Celsius2; DIVIDE(SUBTRACT(min_temperature_f, 32), 1.800) as Celcius3;"}
{"sample_id": 9292, "db_id": "movie_3", "final": {"question": "How many English films have a duration of over 50 minutes and the cost of replacement are under 10.99?", "sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T2.name = 'English' AND T1.length > 50 AND T1.replacement_cost < 10.99", "source_tables": ["film", "language"]}, "evidence": "English is a name of a language; duration of over 50 minutes refers to length > 50; cost of replacement are under 10.99 refers to replacement_cost < 10.99"}
{"sample_id": 9293, "db_id": "movie_3", "final": {"question": "Who are the actors that act in the ACADEMY DINOSAUR film?", "sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'ACADEMY DINOSAUR'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "Who are the actors refers to full name; full name refers to first_name, last_name; 'ACADEMY DINOSAUR' is a title of a film"}
{"sample_id": 9294, "db_id": "movie_3", "final": {"question": "Please list any two films that Penelope Guiness acted in.", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Penelope' AND T1.last_name = 'Guiness' LIMIT 2", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "film refers to title of the film; 'Penelope Guiness' is a full name of an actor; full name refers to first_name, last_name"}
{"sample_id": 9295, "db_id": "movie_3", "final": {"question": "What is the percentage of documentary films?", "sql": "SELECT CAST(SUM(IIF(T2.name = 'Documentary', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id", "source_tables": ["category", "film_category"]}, "evidence": "documentary' is a name of a category; calculation = DIVIDE(SUM(name = 'Documentary'), COUNT(film_id)) * 100"}
{"sample_id": 9296, "db_id": "movie_3", "final": {"question": "How many films in English are for adults only?", "sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T2.name = 'English' AND T1.rating = 'NC-17'", "source_tables": ["film", "language"]}, "evidence": "English is a name of a language; for adults only refers to rating = 'NC-17'"}
{"sample_id": 9297, "db_id": "movie_3", "final": {"question": "Which film has the longest duration?", "sql": "SELECT title FROM film WHERE length = ( SELECT MAX(length) FROM film )", "source_tables": ["film"]}, "evidence": "film refers to the title; the longest duration refers to MAX(length)"}
{"sample_id": 9298, "db_id": "movie_3", "final": {"question": "How many of the actors are named \"Dan\"?", "sql": "SELECT COUNT(actor_id) FROM actor WHERE first_name = 'Dan'", "source_tables": ["actor"]}, "evidence": "'Dan' is a first_name of an actor"}
{"sample_id": 9299, "db_id": "movie_3", "final": {"question": "What is the most common first name among the customers?", "sql": "SELECT first_name FROM customer GROUP BY first_name ORDER BY COUNT(first_name) DESC LIMIT 1", "source_tables": ["customer"]}, "evidence": "the most common first name refers to MAX(COUNT(first_name))"}
{"sample_id": 9300, "db_id": "movie_3", "final": {"question": "What are the ratings of the film featuring behind the scenes?", "sql": "SELECT rating FROM film WHERE special_features LIKE '%Behind the Scenes%'", "source_tables": ["film"]}, "evidence": "film featuring behind the scenes refers to special_features = 'Behind the Scenes'"}
{"sample_id": 9301, "db_id": "movie_3", "final": {"question": "What is the largest number of films rented per customer?", "sql": "SELECT COUNT(rental_id) FROM rental GROUP BY customer_id ORDER BY COUNT(rental_id) DESC LIMIT 1", "source_tables": ["rental"]}, "evidence": "the largest number of films refers to MAX(rental_id)"}
{"sample_id": 9302, "db_id": "movie_3", "final": {"question": "List all the films with the word \"Lacklusture\" in their description.", "sql": "SELECT title FROM film_text WHERE description LIKE '%Lacklusture%'", "source_tables": ["film_text"]}, "evidence": "films refers to title"}
{"sample_id": 9303, "db_id": "movie_3", "final": {"question": "How many films did a customer named Francis Sikes rent?", "sql": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'FRANCIS' AND T1.last_name = 'SIKES'", "source_tables": ["customer", "rental"]}, "evidence": "'Francis Sikes' is a full name of a customer; full name refers to first_name, last_name;"}
{"sample_id": 9304, "db_id": "movie_3", "final": {"question": "Who is the manager of the store with the largest collection of films?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T3.first_name, T3.last_name, COUNT(T1.film_id) AS num FROM inventory AS T1 INNER JOIN store AS T2 ON T1.store_id = T2.store_id INNER JOIN staff AS T3 ON T2.manager_staff_id = T3.staff_id GROUP BY T3.first_name, T3.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["staff", "store", "inventory"]}, "evidence": "Who refers to first_name, last_name; the largest collection of films refers to MAX(film_id)"}
{"sample_id": 9305, "db_id": "movie_3", "final": {"question": "What are the addresses of the inactive customers?", "sql": "SELECT T2.address FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.active = 0", "source_tables": ["customer", "address"]}, "evidence": "inactive customers refers to active = 0;"}
{"sample_id": 9306, "db_id": "movie_3", "final": {"question": "Which category is the most common?", "sql": "SELECT T.name FROM ( SELECT T2.name, COUNT(T2.name) AS num FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T2.name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["category", "film_category"]}, "evidence": "most common category refers to MAX(COUNT(category.name))"}
{"sample_id": 9307, "db_id": "movie_3", "final": {"question": "Provide the cast for the film \"Jason trap\".", "sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'JASON TRAP'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "'Jason trap' is a title of a film; cast means actor; actor refers to first_name, last_name"}
{"sample_id": 9308, "db_id": "movie_3", "final": {"question": "Who is the customer with the largest payment for rental films?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, SUM(T2.amount) AS num FROM customer AS T1 INNER JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["customer", "payment"]}, "evidence": "Who refers to first_name, last_name; the largest payment for rental refers to MAX(SUM(amount))"}
{"sample_id": 9309, "db_id": "movie_3", "final": {"question": "List the top 5 most-rented films.", "sql": "SELECT T.title FROM ( SELECT T3.title, COUNT(T2.inventory_id) AS num FROM rental AS T1 INNER JOIN inventory AS T2 ON T1.inventory_id = T2.inventory_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id GROUP BY T3.title ) AS T ORDER BY T.num DESC LIMIT 5", "source_tables": ["film", "rental", "inventory"]}, "evidence": "film refers to title; most rented refers to MAX(inventory_id)"}
{"sample_id": 9310, "db_id": "movie_3", "final": {"question": "Which country does Sasebo belong to?", "sql": "SELECT T1.country FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id WHERE T2.city = 'Sasebo'", "source_tables": ["country", "city"]}, "evidence": "'Sasebo' is a city"}
{"sample_id": 9311, "db_id": "movie_3", "final": {"question": "What are the addresses for the stores?", "sql": "SELECT T2.address FROM store AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id", "source_tables": ["store", "address"]}, "evidence": ""}
{"sample_id": 9312, "db_id": "movie_3", "final": {"question": "List all the animation titles.", "sql": "SELECT T3.title AS per FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T2.name = 'Animation'", "source_tables": ["film", "category", "film_category"]}, "evidence": "'animation' is a name of a category"}
{"sample_id": 9313, "db_id": "movie_3", "final": {"question": "What is the city with the most customers?", "sql": "SELECT T.city FROM ( SELECT T1.city, COUNT(T3.customer_id) AS num FROM city AS T1 INNER JOIN address AS T2 ON T2.city_id = T1.city_id INNER JOIN customer AS T3 ON T2.address_id = T3.address_id GROUP BY T1.city ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["city", "customer", "address"]}, "evidence": "the most customers refers to MAX(COUNT(customer_id))"}
{"sample_id": 9314, "db_id": "movie_3", "final": {"question": "Which actor acted in the most films?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, SUM(T1.film_id) AS num FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.first_name, T2.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["film_actor", "actor"]}, "evidence": "actor refers to first_name, last_name; the most film refers to MAX(SUM(film_id))"}
{"sample_id": 9315, "db_id": "movie_3", "final": {"question": "What percentage of films are horror films?", "sql": "SELECT CAST(SUM(IIF(T2.name = 'Horror', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id", "source_tables": ["film", "category", "film_category"]}, "evidence": "horror' is a name of a category; calculation = DIVIDE(SUM(name = 'Horror'), COUNT(film_id)) * 100"}
{"sample_id": 9316, "db_id": "movie_3", "final": {"question": "Please indicate the full name of actor id 5.", "sql": "SELECT first_name, last_name FROM actor WHERE actor_id = 5", "source_tables": ["actor"]}, "evidence": "full name refers to first_name, last_name"}
{"sample_id": 9317, "db_id": "movie_3", "final": {"question": "How many id movies have category id 11?", "sql": "SELECT COUNT(film_id) FROM film_category WHERE category_id = 11", "source_tables": ["film_category"]}, "evidence": "id movies refers to film_id"}
{"sample_id": 9318, "db_id": "movie_3", "final": {"question": "Which category does BABY HALL film belong to?", "sql": "SELECT T3.'name' FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T1.title = 'BABY HALL'", "source_tables": ["film", "category", "film_category"]}, "evidence": "category refers to name; BABY HALL film refers to title = 'BABY HALL'"}
{"sample_id": 9319, "db_id": "movie_3", "final": {"question": "Give the full name of the actor with the highest rental rate.", "sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T3.film_id = T2.film_id ORDER BY T3.rental_rate DESC LIMIT 1", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "full name refers to first_name, last_name; the highest rental rate refers to max(rental_rate)"}
{"sample_id": 9320, "db_id": "movie_3", "final": {"question": "Please give the description of the movie starring JENNIFER DAVIS.", "sql": "SELECT T3.description FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T3.film_id = T2.film_id WHERE T1.first_name = 'JOHNNY' AND T1.last_name = 'DAVIS'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": ""}
{"sample_id": 9321, "db_id": "movie_3", "final": {"question": "List the full names of customers who have paid more than 10$.", "sql": "SELECT T2.first_name, T2.last_name FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.amount > 10", "source_tables": ["customer", "payment"]}, "evidence": "full name refers to first_name, last_name; more than 10$ refers to amount > 10"}
{"sample_id": 9322, "db_id": "movie_3", "final": {"question": "Please provide the address of the customer whose first name is SUSAN with the postal code 77948.", "sql": "SELECT T1.address FROM address AS T1 INNER JOIN customer AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = 'SUSAN' AND T1.postal_code = 77948", "source_tables": ["customer", "address"]}, "evidence": ""}
{"sample_id": 9323, "db_id": "movie_3", "final": {"question": "How many customers have an address in Abu Dhabi city? List those customer names.", "sql": "SELECT COUNT(T1.city_id) FROM city AS T1 INNER JOIN address AS T2 ON T1.city_id = T2.city_id INNER JOIN customer AS T3 ON T2.address_id = T3.address_id WHERE T1.city = 'Abu Dhabi'", "source_tables": ["city", "customer", "address"]}, "evidence": "name refers to first_name, last_name"}
{"sample_id": 9324, "db_id": "movie_3", "final": {"question": "Please provide the full name of the customer at 692 Joliet Street.", "sql": "SELECT T2.first_name, T2.last_name FROM address AS T1 INNER JOIN customer AS T2 ON T1.address_id = T2.address_id WHERE T1.address = '692 Joliet Street'", "source_tables": ["customer", "address"]}, "evidence": "full name refers to first_name, last_name; 692 Joliet Street refers to address = '692 Joliet Street'"}
{"sample_id": 9325, "db_id": "movie_3", "final": {"question": "List movie titles with duration over 120 minutes that are in the action category.", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T3.'name' = 'action' AND T1.length > 120", "source_tables": ["film", "category", "film_category"]}, "evidence": "duration over 120 minutes refers to length > 120; action category refers to category.name = 'action'"}
{"sample_id": 9326, "db_id": "movie_3", "final": {"question": "Which actor acted in ANONYMOUS HUMAN?", "sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T3.film_id = T2.film_id WHERE T3.title = 'ANONYMOUS HUMAN'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "actor refers to first_name, last_name; ANONYMOUS HUMAN refers to title = 'ANONYMOUS HUMAN'"}
{"sample_id": 9327, "db_id": "movie_3", "final": {"question": "Which movie title has the lowest movie rental in the horror category?", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.'name' = 'Horror' ORDER BY T1.rental_rate LIMIT 1", "source_tables": ["film", "category", "film_category"]}, "evidence": "the lowest movie rental refers to min(rental_rate); the horror category refers to category.name = 'Horror'"}
{"sample_id": 9328, "db_id": "movie_3", "final": {"question": "List the descriptions of movies under the category Travel.", "sql": "SELECT T1.description FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.'name' = 'Travel'", "source_tables": ["film", "category", "film_category"]}, "evidence": "the category Travel refers to category.name = 'Travel'"}
{"sample_id": 9329, "db_id": "movie_3", "final": {"question": "Calculate the total payment amount of customers in Nagasaki district.", "sql": "SELECT SUM(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id WHERE T3.district = 'Nagasaki'", "source_tables": ["customer", "address", "payment"]}, "evidence": "the total payment amount refers to sum(amount)"}
{"sample_id": 9330, "db_id": "movie_3", "final": {"question": "Calculate the percentage of total payment of MARGARET MOORE customers.", "sql": "SELECT CAST(SUM(IIF(T2.first_name = 'MARGARET' AND T2.last_name = 'MOORE', T1.amount, 0)) AS REAL) * 100 / SUM(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id", "source_tables": ["customer", "payment"]}, "evidence": "percentage = divide(sum(amount where first_name = 'MARGARET' and last_name = 'MOORE'), sum(amount)) * 100%"}
{"sample_id": 9331, "db_id": "movie_3", "final": {"question": "Calculate the percentage of movie titles with a screen length of more than 120 minutes that have a category of horror movies.", "sql": "SELECT CAST(SUM(IIF(T3.'name' = 'Horror', 1, 0)) * 100 / COUNT(T1.film_id) AS REAL) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T1.length > 120", "source_tables": ["film", "category", "film_category"]}, "evidence": "screen length of more than 120 minutes refers to length > 120; category of horror refers to category.name = 'Horror'; percentage = divide(count(title where length > 120 and category.name = 'Horror'), count(title)) * 100%"}
{"sample_id": 9332, "db_id": "movie_3", "final": {"question": "How many film titles were released in 2006?", "sql": "SELECT COUNT(film_id) FROM film WHERE release_year = 2006", "source_tables": ["film"]}, "evidence": "released in 2006 refers to release_year = 2006"}
{"sample_id": 9333, "db_id": "movie_3", "final": {"question": "List down film titles from id 1 to 10.", "sql": "SELECT title FROM film WHERE film_id BETWEEN 1 AND 10", "source_tables": ["film"]}, "evidence": "id 1 to 10 refers to film_id BETWEEN 1 and 10"}
{"sample_id": 9334, "db_id": "movie_3", "final": {"question": "List down all of the film IDs with highest rental duration.", "sql": "SELECT film_id FROM film WHERE rental_duration = ( SELECT MAX(rental_duration) FROM film )", "source_tables": ["film"]}, "evidence": "highest rental duration refers to max(rental_duration)"}
{"sample_id": 9335, "db_id": "movie_3", "final": {"question": "Which film titles have the most expensive rental rate?", "sql": "SELECT title FROM film WHERE rental_rate = ( SELECT MAX(rental_rate) FROM film )", "source_tables": ["film"]}, "evidence": "the most expensive rental rate refers to max(rental_rate)"}
{"sample_id": 9336, "db_id": "movie_3", "final": {"question": "List down all of the film titles that are rated for general audiences.", "sql": "SELECT title FROM film WHERE rating = 'G'", "source_tables": ["film"]}, "evidence": "rated for general audiences means rating = 'G'"}
{"sample_id": 9337, "db_id": "movie_3", "final": {"question": "What is the language for film titled \"CHILL LUCK\"?", "sql": "SELECT T2.'name' FROM film AS T1 INNER JOIN 'language' AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'CHILL LUCK'", "source_tables": ["film", "language"]}, "evidence": ""}
{"sample_id": 9338, "db_id": "movie_3", "final": {"question": "What are the last updated date for English film titles that were released in 2006?", "sql": "SELECT DISTINCT T1.last_update FROM film AS T1 INNER JOIN 'language' AS T2 ON T1.language_id = T2.language_id WHERE T2.'name' = 'English' AND T1.release_year = 2006", "source_tables": ["film", "language"]}, "evidence": "the last updated date refers to last_update; English is name of language; released in 2006 refers to release_year = 2006\n\n"}
{"sample_id": 9339, "db_id": "movie_3", "final": {"question": "How many Italian film titles were special featured with deleted scenes?", "sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN 'language' AS T2 ON T1.language_id = T2.language_id WHERE T2.'name' = 'Italian' AND T1.special_features = 'deleted scenes'", "source_tables": ["film", "language"]}, "evidence": "Italian is name of language; special featured with deleted scenes refers to special_features = 'deleted scenes'"}
{"sample_id": 9340, "db_id": "movie_3", "final": {"question": "How many animation film titles are rated for adults only?", "sql": "SELECT COUNT(T1.title) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'animation' AND T1.rating = 'NC-17'", "source_tables": ["film", "category", "film_category"]}, "evidence": "animation film refers to category.name = 'animation'; for adults only means rating = 'NC-17'"}
{"sample_id": 9341, "db_id": "movie_3", "final": {"question": "List down all ratings of action film titles.", "sql": "SELECT T1.description FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'action'", "source_tables": ["film", "category", "film_category"]}, "evidence": "for General Audiences means rating = 'G'; Parental Guidance Suggested means rating = 'PG'; Parents Strongly Cautioned means rating = 'PG-13'; Restricted means rating = 'R'; Adults Only means rating = 'NC-17'; action film refers to category.name = 'action'"}
{"sample_id": 9342, "db_id": "movie_3", "final": {"question": "List down all film IDs of comedy film titles.", "sql": "SELECT T1.film_id FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T3.name = 'comedy'", "source_tables": ["film", "category", "film_category"]}, "evidence": "comedy is name of category"}
{"sample_id": 9343, "db_id": "movie_3", "final": {"question": "State the documentary film titles with longest length.", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T3.name = 'documentary' ORDER BY T1.length DESC LIMIT 1", "source_tables": ["film", "category", "film_category"]}, "evidence": "documentary film refers to name = 'documentary'; longest length refers to max(length)"}
{"sample_id": 9344, "db_id": "movie_3", "final": {"question": "What is the category of film titled \"BLADE POLISH\"?", "sql": "SELECT T3.name FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T1.title = 'BLADE POLISH'", "source_tables": ["film", "category", "film_category"]}, "evidence": ""}
{"sample_id": 9345, "db_id": "movie_3", "final": {"question": "What is Mary Smith's rental ID?", "sql": "SELECT T2.rental_id FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'MARY' AND T1.last_name = 'SMITH'", "source_tables": ["customer", "rental"]}, "evidence": ""}
{"sample_id": 9346, "db_id": "movie_3", "final": {"question": "List down all of the customers' first name who were attended by staff with ID 1.", "sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T2.staff_id = 1", "source_tables": ["customer", "rental"]}, "evidence": ""}
{"sample_id": 9347, "db_id": "movie_3", "final": {"question": "List down email address of customers who were attended by staff with ID 2.", "sql": "SELECT DISTINCT T1.email FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T2.staff_id = 2", "source_tables": ["customer", "rental"]}, "evidence": "email address refers to email"}
{"sample_id": 9348, "db_id": "movie_3", "final": {"question": "List down the actor IDs of film titled \"BOUND CHEAPER\".", "sql": "SELECT T2.actor_id FROM film AS T1 INNER JOIN film_actor AS T2 ON T1.film_id = T2.film_id WHERE T1.title = 'BOUND CHEAPER'", "source_tables": ["film", "film_actor"]}, "evidence": ""}
{"sample_id": 9349, "db_id": "movie_3", "final": {"question": "What is the inventory ID of Karen Jackson?", "sql": "SELECT T2.inventory_id FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'KAREN' AND T1.last_name = 'JACKSON'", "source_tables": ["customer", "rental"]}, "evidence": ""}
{"sample_id": 9350, "db_id": "movie_3", "final": {"question": "List down all film titles starred by Jane Jackman.", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN film_actor AS T2 ON T1.film_id = T2.film_id INNER JOIN actor AS T3 ON T2.actor_id = T3.actor_id WHERE T3.first_name = 'JANE' AND T3.last_name = 'JACKMAN'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": ""}
{"sample_id": 9351, "db_id": "movie_3", "final": {"question": "Who are the actors of film titled \"BIRD INDEPENDENCE\"?", "sql": "SELECT T3.first_name, T3.last_name FROM film AS T1 INNER JOIN film_actor AS T2 ON T1.film_id = T2.film_id INNER JOIN actor AS T3 ON T2.actor_id = T3.actor_id WHERE T1.title = 'BIRD INDEPENDENCE'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "actor refers to first_name, last_name"}
{"sample_id": 9352, "db_id": "movie_3", "final": {"question": "Calculate the total rental rate for animation film titles.", "sql": "SELECT SUM(T1.rental_rate) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.'name' = 'Animation'", "source_tables": ["film", "category", "film_category"]}, "evidence": "animation film refers to category.name = 'Animation'; total rental rate = sum(rental_rate)"}
{"sample_id": 9353, "db_id": "movie_3", "final": {"question": "What is the average rental rate of sci-fi film titles?", "sql": "SELECT AVG(T1.rental_rate) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T3.'name' = 'Sci-Fi'", "source_tables": ["film", "category", "film_category"]}, "evidence": "sci-fi film refers to category.name = 'Sci-Fi'; average rental rate = avg(rental_rate)"}
{"sample_id": 9354, "db_id": "movie_3", "final": {"question": "What is the percentage of horror film titles in English film titles?", "sql": "SELECT CAST(SUM(IIF(T3.name = 'Horror', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T1.category_id = T3.category_id INNER JOIN language AS T4 ON T2.language_id = T4.language_id WHERE T4.name = 'English'", "source_tables": ["film", "category", "film_category", "language"]}, "evidence": "horror film refers to category.name = 'Horror'; English film refers to language.name = 'English'; percentage = divide(count(film_id where category.name = 'Horror'), count(film_id)) where language.name = 'English' * 100%"}
{"sample_id": 9355, "db_id": "movie_3", "final": {"question": "Among the adult films, how many of them have a rental duration of fewer than 4 days?", "sql": "SELECT COUNT(film_id) FROM film WHERE rating = 'NC-17' AND rental_duration < 4", "source_tables": ["film"]}, "evidence": "adult film refers to rating = 'NC-17'; rental duration of fewer than 4 days refers to rental_duration < 4"}
{"sample_id": 9356, "db_id": "movie_3", "final": {"question": "What is the title of the restricted film, whose length is 71 minutes and whose replacement cost is $29.99?", "sql": "SELECT title FROM film WHERE replacement_cost = 29.99 AND rating = 'R' AND length = 71", "source_tables": ["film"]}, "evidence": "restricted means rating = 'R'; length is 71 minutes refers to length = 71; replacement cost is $29.99 refers to replacement_cost = 29.99"}
{"sample_id": 9475, "db_id": "california_schools", "final": {"question": "How many test takers are there at the school/s whose mailing city address is in Fresno?", "sql": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'", "source_tables": ["satscores", "schools"]}, "evidence": ""}
{"sample_id": 9476, "db_id": "california_schools", "final": {"question": "Please specify all of the schools and their related mailing zip codes that are under Avetik Atoian's administration.", "sql": "SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'", "source_tables": ["schools"]}, "evidence": ""}
{"sample_id": 9477, "db_id": "california_schools", "final": {"question": "Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt?", "sql": "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'", "source_tables": ["schools"]}, "evidence": "Ratio = count(schools in Colusa) / count(schools in Humboldt)"}
{"sample_id": 9478, "db_id": "california_schools", "final": {"question": "Of all the schools with a mailing state address in California, how many are active in San Joaquin city?", "sql": "SELECT COUNT(CDSCode) FROM schools WHERE City = 'San Joaquin' AND MailState = 'CA' AND StatusType = 'Active'", "source_tables": ["schools"]}, "evidence": ""}
{"sample_id": 9479, "db_id": "california_schools", "final": {"question": "What is the phone number and extension number for the school that had the 333rd highest average writing score?", "sql": "SELECT T2.Phone, T2.Ext FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrWrite DESC LIMIT 332, 1", "source_tables": ["satscores", "schools"]}, "evidence": ""}
{"sample_id": 9480, "db_id": "california_schools", "final": {"question": "What is the phone number and extension number for the school with the zip code 95203-3704? Indicate the school's name.", "sql": "SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'", "source_tables": ["schools"]}, "evidence": ""}
{"sample_id": 9481, "db_id": "california_schools", "final": {"question": "What is the website for the schools under the administrations of Mike Larson and Dante Alvarez?", "sql": "SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez')", "source_tables": ["schools"]}, "evidence": ""}
{"sample_id": 9482, "db_id": "california_schools", "final": {"question": "What are the websites for all the partially virtual chartered schools located in San Joaquin?", "sql": "SELECT Website FROM schools WHERE County = 'San Joaquin' AND Virtual = 'P' AND Charter = 1", "source_tables": ["schools"]}, "evidence": "Virtual = 'P' means partially virtual; Charter schools refers to Charter = 1 in the table schools"}
{"sample_id": 9483, "db_id": "california_schools", "final": {"question": "How many chartered schools located in the city of Hickman are owned by the Elementary School District?", "sql": "SELECT COUNT(School) FROM schools WHERE DOC = 52 AND Charter = 1 AND City = 'Hickman'", "source_tables": ["schools"]}, "evidence": "Elementary School District refers to DOC = 52; Chartered schools refer to Charter = 1 in the table schools"}
{"sample_id": 9484, "db_id": "california_schools", "final": {"question": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%?", "sql": "SELECT COUNT(T2.School) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.Charter = 0 AND CAST(T1.'Free Meal Count (K-12)' AS REAL) * 100 / T1.'Enrollment (K-12)' < 0.18", "source_tables": ["frpm", "schools"]}, "evidence": "non-chartered schools refer to schools whose Charter = 0; K-12 means grades 1 through 12; percent of eligible free rate for K-12 = `Free Meal Count (K-12)` * 100 / `Enrollment (K-12)`"}
{"sample_id": 9485, "db_id": "california_schools", "final": {"question": "In chartered schools with charter number 00D2, what are the names of all the administrators? Include the name of the school and the city to which it belongs", "sql": "SELECT AdmFName1, AdmLName1, School, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2'", "source_tables": ["schools"]}, "evidence": "Chartered schools refer to Charter = 1 in the table schools; Full name refers to first name, last name"}
{"sample_id": 9486, "db_id": "california_schools", "final": {"question": "What is the total number of schools with a mailing city in Hickman belonging to the charter number 00D4?", "sql": "SELECT COUNT(*) FROM schools WHERE CharterNum = '00D4' AND MailCity = 'Hickman'", "source_tables": ["schools"]}, "evidence": ""}
{"sample_id": 9487, "db_id": "california_schools", "final": {"question": "What is the ratio in percentage of Santa Clara County schools that are locally funded compared to all other types of charter school funding?", "sql": "SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN FundingType != 'Locally funded' THEN 1 ELSE 0 END) FROM schools WHERE County = 'Santa Clara' AND Charter = 1", "source_tables": ["schools"]}, "evidence": "Ratio in percentage = (count(locally funded schools in Santa Clara) / count(all funding type schools in Santa Clara) * 100%"}
{"sample_id": 9488, "db_id": "california_schools", "final": {"question": "Between 1/1/2000 to 12/31/2005, how many directly funded schools opened in the county of Stanislaus?", "sql": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', OpenDate) BETWEEN '2000' AND '2005' AND County = 'Stanislaus' AND FundingType = 'Directly funded'", "source_tables": ["schools"]}, "evidence": "Directly funded schools refers to FundingType = 'Directly Funded'"}
{"sample_id": 9489, "db_id": "california_schools", "final": {"question": "What is the total amount of Community College District closure in 1989 in the city of San Francisco?", "sql": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', ClosedDate) = '1989' AND City = 'San Francisco' AND DOCType = 'Community College District'", "source_tables": ["schools"]}, "evidence": ""}
{"sample_id": 9490, "db_id": "california_schools", "final": {"question": "Which county reported the most number of school closure in the 1980s with school wonership code belonging to Youth Authority Facilities (CEA)?", "sql": "SELECT County FROM schools WHERE strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989' AND StatusType = 'Closed' AND SOC = 11 GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1", "source_tables": ["schools"]}, "evidence": "Youth Authority Facilities (CEA) refers to SOC = 11; 1980s = years between 1980 and 1989"}
{"sample_id": 9491, "db_id": "california_schools", "final": {"question": "Please provide the National Center for Educational Statistics school district identification number for all schools with a School Ownership Code that are part of the State Special Schools.", "sql": "SELECT NCESDist FROM schools WHERE SOC = 31", "source_tables": ["schools"]}, "evidence": "State Special Schools means that SOC = 31."}
{"sample_id": 9574, "db_id": "financial", "final": {"question": "What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?", "sql": "SELECT AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) >= '1997' AND T1.A15 > 4000", "source_tables": ["district", "account"]}, "evidence": "A3 refers to region names; A15 stands for the average number of crimes commited in 1995."}
{"sample_id": 9575, "db_id": "financial", "final": {"question": "How many 'classic' cards are eligible for loan?", "sql": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'classic' AND T2.type = 'OWNER'", "source_tables": ["disp", "card"]}, "evidence": "when the account type = 'OWNER', it's eligible for loan"}
{"sample_id": 9576, "db_id": "financial", "final": {"question": "How many male clients in 'Hl.m. Praha' district?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'", "source_tables": ["district", "client"]}, "evidence": "District data appears in the A2; Male means that gender = 'M'"}
{"sample_id": 9577, "db_id": "financial", "final": {"question": "How many percent of 'Gold' cards were issued prior to 1998?", "sql": "SELECT CAST(SUM(type = 'gold' AND STRFTIME('%Y', issued) < '1998') AS REAL) * 100 / COUNT(card_id) FROM card", "source_tables": ["card"]}, "evidence": "Percent of Gold = [ count(type = 'gold' and issued date < 1998) / count(all cards)] * 100%"}
{"sample_id": 9578, "db_id": "financial", "final": {"question": "Who is the owner of the account with the largest loan amount?", "sql": "SELECT T1.client_id FROM disp AS T1 INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN loan AS T2 ON T3.account_id = T2.account_id WHERE T1.type = 'OWNER' ORDER BY T2.amount DESC LIMIT 1", "source_tables": ["disp", "loan", "account"]}, "evidence": ""}
{"sample_id": 9579, "db_id": "financial", "final": {"question": "What is the number of committed crimes in 1995 in the district of the account with the id 532?", "sql": "SELECT T1.A15 FROM district AS T1 INNER JOIN 'account' AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 532", "source_tables": ["district", "account"]}, "evidence": "A15 contains information about number of committed crimes in 1995"}
{"sample_id": 9580, "db_id": "financial", "final": {"question": "What is the district Id of the account that placed the order with the id 33333?", "sql": "SELECT T3.district_id FROM 'order' AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.order_id = 33333", "source_tables": ["order", "district", "account"]}, "evidence": ""}
{"sample_id": 9581, "db_id": "financial", "final": {"question": "List all the withdrawals in cash transactions that the client with the id 3356 makes.", "sql": "SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'", "source_tables": ["disp", "trans", "client", "account"]}, "evidence": "operation = 'VYBER' refers to withdrawal in cash"}
{"sample_id": 9582, "db_id": "financial", "final": {"question": "Among the weekly issuance accounts, how many have a loan of under 200000?", "sql": "SELECT COUNT(T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.amount < 200000", "source_tables": ["loan", "account"]}, "evidence": "frequency = 'POPLATEK TYDNE' stands for weekly issuance"}
{"sample_id": 9583, "db_id": "financial", "final": {"question": "What type of credit card does the client with the id 13539 own?", "sql": "SELECT T3.type FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T1.disp_id = T3.disp_id WHERE T2.client_id = 13539", "source_tables": ["disp", "client", "card"]}, "evidence": ""}
{"sample_id": 9584, "db_id": "financial", "final": {"question": "What is the region of the client with the id 3541 from?", "sql": "SELECT T1.A3 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 3541", "source_tables": ["district", "client"]}, "evidence": "A3 refers to region"}
{"sample_id": 9585, "db_id": "financial", "final": {"question": "Which district has the most accounts with loan contracts finished with no problems?", "sql": "SELECT T1.A2 FROM District AS T1 INNER JOIN Account AS T2 ON T1.District_id = T2.District_id INNER JOIN Loan AS T3 ON T2.Account_id = T3.Account_id WHERE T3.status = 'A' GROUP BY T1.District_id ORDER BY COUNT(T2.Account_id) DESC LIMIT 1", "source_tables": ["loan", "district", "account"]}, "evidence": "status = 'A' refers to loan contracts finished with no problems"}
{"sample_id": 9586, "db_id": "financial", "final": {"question": "Who placed the order with the id 32423?", "sql": "SELECT T3.client_id FROM 'order' AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T4.account_id = T2.account_id  INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE T1.order_id = 32423", "source_tables": ["disp", "order", "client", "account"]}, "evidence": ""}
{"sample_id": 9587, "db_id": "financial", "final": {"question": "Please list all the transactions made by accounts from district 5.", "sql": "SELECT T3.trans_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.district_id = 5", "source_tables": ["trans", "district", "account"]}, "evidence": ""}
{"sample_id": 9588, "db_id": "financial", "final": {"question": "How many of the accounts are from Jesenik district?", "sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Jesenik'", "source_tables": ["district", "account"]}, "evidence": ""}
{"sample_id": 9589, "db_id": "financial", "final": {"question": "List all the clients' IDs whose junior credit cards were issued after 1996.", "sql": "SELECT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'junior' AND T1.issued >= '1997-01-01'", "source_tables": ["disp", "card"]}, "evidence": "After 1996 means date > = '1997-01-01"}
{"sample_id": 9590, "db_id": "financial", "final": {"question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?", "sql": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000", "source_tables": ["district", "client"]}, "evidence": "Female refers to gender = 'F'; Woman and female are closed; Average salary can be found in A11"}
{"sample_id": 9591, "db_id": "financial", "final": {"question": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?", "sql": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'", "source_tables": ["disp", "loan", "client", "account"]}, "evidence": "Growth rate = (sum of amount_1997 - sum of amount_1996) / (sum of amount_1996) * 100%; Male refers to gender = 'M'"}
{"sample_id": 9592, "db_id": "financial", "final": {"question": "How many credit card withdrawals were recorded after 1995?", "sql": "SELECT COUNT(account_id) FROM trans WHERE STRFTIME('%Y', date) > '1995' AND operation = 'VYBER KARTOU'", "source_tables": ["trans"]}, "evidence": "Operation = 'VYBER KARTOU' means credit card withdrawals"}
{"sample_id": 9593, "db_id": "financial", "final": {"question": "What was the difference in the number of crimes committed in East and North Bohemia in 1996?", "sql": "SELECT SUM(IIF(A3 = 'east Bohemia', A16, 0)) - SUM(IIF(A3 = 'north Bohemia', A16, 0)) FROM district", "source_tables": ["district"]}, "evidence": "Difference in no. of committed crimes between 2 regions = Total no. of committed crimes in 1996 in north Bohemia - Total no. of committed crimes in 1996 in e ast Bohemia. A3 refers to region. Data about no. of committed crimes 1996 appears in A16"}
{"sample_id": 9594, "db_id": "financial", "final": {"question": "How many owner and disponent dispositions are there from account number 1 to account number 10?", "sql": "SELECT SUM(type = 'OWNER') , SUM(type = 'DISPONENT') FROM disp WHERE account_id BETWEEN 1 AND 10", "source_tables": ["disp"]}, "evidence": ""}
{"sample_id": 9704, "db_id": "toxicology", "final": {"question": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label.", "sql": "WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / (CASE WHEN COUNT(atom_id) = 0 THEN NULL ELSE COUNT(atom_id) END) AS ratio, label FROM SubQuery GROUP BY label", "source_tables": ["molecule", "atom", "subquery"]}, "evidence": "hydrogen refers to element = 'h'; ratio = DIVIDE(SUM(element = 'h'), count(element)) where molecule_id = 'TR006' ; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9705, "db_id": "toxicology", "final": {"question": "Identify whether the chemical compound that contains Calcium is carcinogenic.", "sql": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca'", "source_tables": ["molecule", "atom"]}, "evidence": "calcium refers to element = 'ca'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic;"}
{"sample_id": 9706, "db_id": "toxicology", "final": {"question": "Determine the bond type that is formed in the chemical compound containing element Carbon.", "sql": "SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c'", "source_tables": ["bond", "atom"]}, "evidence": "Carbon refers to element = 'c'; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';"}
{"sample_id": 9707, "db_id": "toxicology", "final": {"question": "Name chemical elements that form a bond TR001_10_11.", "sql": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'", "source_tables": ["bond", "atom", "connected"]}, "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; TR001_10_11 is the bond id; molecule id refers to SUBSTR(bond_id, 1, 5); atom 1 refers to SUBSTR(bond_id, 7, 2); atom 2 refers to SUBSTR(bond_id, 10, 2)"}
{"sample_id": 9708, "db_id": "toxicology", "final": {"question": "Among all chemical compounds identified in the database, what percent of compounds form a triple-bond.", "sql": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '#' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T", "source_tables": ["bond"]}, "evidence": "triple bond refers to bond_type = '#';"}
{"sample_id": 9709, "db_id": "toxicology", "final": {"question": "Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond.", "sql": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR047'", "source_tables": ["bond"]}, "evidence": "TR047 is the molecule id; double bond refers to bond_type = ' = '; percentage = DIVIDE(SUM(bond_type = ' = '), COUNT(all bond_id)) as percent where molecule_id = 'TR047'"}
{"sample_id": 9710, "db_id": "toxicology", "final": {"question": "Identify whether the molecule that contains atom TR001_1 is carcinogenic.", "sql": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'", "source_tables": ["molecule", "atom"]}, "evidence": "label = '+' mean molecules are carcinogenic;"}
{"sample_id": 9711, "db_id": "toxicology", "final": {"question": "Is molecule TR151 carcinogenic?", "sql": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR151'", "source_tables": ["molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic;"}
{"sample_id": 9712, "db_id": "toxicology", "final": {"question": "Which toxic element can be found in the molecule TR151?", "sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR151'", "source_tables": ["atom"]}, "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"}
{"sample_id": 9713, "db_id": "toxicology", "final": {"question": "How many chemical compounds in the database are identified as carcinogenic.", "sql": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'", "source_tables": ["molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic;"}
{"sample_id": 9714, "db_id": "toxicology", "final": {"question": "Identify the atoms belong to the molecule with ID between TR010 to TR050 that contain the element carbon.", "sql": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id BETWEEN 'TR010' AND 'TR050' AND T.element = 'c'", "source_tables": ["atom"]}, "evidence": "carbon refers to element = 'c'; between TR010 to TR050 refers to substr(molecule_id, 3, 3)>=10 AND substr(molecule_id, 3, 3) <= 50"}
{"sample_id": 9715, "db_id": "toxicology", "final": {"question": "How many atoms belong to the molecule labeled with carcinogenic compounds?", "sql": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'", "source_tables": ["molecule", "atom"]}, "evidence": "label = '+' mean molecules are carcinogenic;"}
{"sample_id": 9716, "db_id": "toxicology", "final": {"question": "Which bond ids are double-bond with carcinogenic compound?", "sql": "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '='", "source_tables": ["bond", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic; double bond refers to bond_type = ' = ';"}
{"sample_id": 9717, "db_id": "toxicology", "final": {"question": "How many atoms belong to the molecule that element is hydrogen and labeled with carcinogenic compound?", "sql": "SELECT COUNT(T1.atom_id) AS atomnums_h FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'h'", "source_tables": ["molecule", "atom"]}, "evidence": "label = '+' mean molecules are carcinogenic; hydrogen refers to element = h'"}
{"sample_id": 9718, "db_id": "toxicology", "final": {"question": "Indicate the molecule id is belonging to the TR000_1_2 bond that has the first atom named TR000_1.", "sql": "SELECT T2.molecule_id, T2.bond_id, T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T2.bond_id = 'TR000_1_2'", "source_tables": ["bond", "connected"]}, "evidence": ""}
{"sample_id": 9719, "db_id": "toxicology", "final": {"question": "Among the atoms that contain element carbon, which one does not contain compound carcinogenic?", "sql": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'", "source_tables": ["molecule", "atom"]}, "evidence": "label = '-' means molecules are non-carcinogenic; carbon refers to element = 'c'"}
{"sample_id": 9720, "db_id": "toxicology", "final": {"question": "Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen.", "sql": "SELECT CAST(COUNT(CASE WHEN T1.element = 'h' AND T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id", "source_tables": ["molecule", "atom"]}, "evidence": "hydrogen refers to element = 'h'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+' and element = 'h'), COUNT(molecule_id)) * 100.0"}
{"sample_id": 9721, "db_id": "toxicology", "final": {"question": "Is molecule TR124 carcinogenic?", "sql": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR124'", "source_tables": ["molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic;"}
{"sample_id": 9722, "db_id": "toxicology", "final": {"question": "What atoms comprise TR186?", "sql": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id = 'TR186'", "source_tables": ["atom"]}, "evidence": "TR186 is a molecule id"}
{"sample_id": 9723, "db_id": "toxicology", "final": {"question": "What is the bond type of TR007_4_19?", "sql": "SELECT T.bond_type FROM bond AS T WHERE T.bond_id = 'TR007_4_19'", "source_tables": ["bond"]}, "evidence": "double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';"}
{"sample_id": 9724, "db_id": "toxicology", "final": {"question": "Name the elements that comprise the atoms of bond TR001_2_4.", "sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4'", "source_tables": ["atom", "connected"]}, "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"}
{"sample_id": 9725, "db_id": "toxicology", "final": {"question": "How many double bonds does TR006 have and is it carcinogenic?", "sql": "SELECT COUNT(T1.bond_id), T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.molecule_id = 'TR006' GROUP BY T2.label", "source_tables": ["bond", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; double bond refers to bond_type = ' = ';"}
{"sample_id": 9726, "db_id": "toxicology", "final": {"question": "List all carcinogenic molecules and their elements.", "sql": "SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'", "source_tables": ["molecule", "atom"]}, "evidence": "label = '+' mean molecules are carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"}
{"sample_id": 9727, "db_id": "toxicology", "final": {"question": "Name all bonds with single bond types and what atoms are connected to the molecules.", "sql": "SELECT T1.bond_id, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'", "source_tables": ["bond", "connected"]}, "evidence": "single bond refers to bond_type = '-';"}
{"sample_id": 9728, "db_id": "toxicology", "final": {"question": "Which molecules have triple bonds and list all the elements they contain.", "sql": "SELECT DISTINCT T1.molecule_id, T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'", "source_tables": ["bond", "atom"]}, "evidence": "triple bond refers to bond_type = '#'; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"}
{"sample_id": 9729, "db_id": "toxicology", "final": {"question": "Name the atoms' elements that form bond TR000_2_3.", "sql": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR000_2_3'", "source_tables": ["atom", "connected"]}, "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"}
{"sample_id": 9730, "db_id": "toxicology", "final": {"question": "How many bonds are created by bonding atoms with chlorine element?", "sql": "SELECT COUNT(T1.bond_id) FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'cl'", "source_tables": ["atom", "connected"]}, "evidence": "chlorine refers to element = 'cl'"}
{"sample_id": 9731, "db_id": "toxicology", "final": {"question": "List out the atom id that belongs to the TR346 molecule and how many bond type can be created by this molecule?", "sql": "SELECT T1.atom_id, COUNT(DISTINCT T2.bond_type),T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR000' GROUP BY T1.atom_id, T2.bond_type", "source_tables": ["bond", "atom"]}, "evidence": ""}
{"sample_id": 9732, "db_id": "toxicology", "final": {"question": "How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound?", "sql": "SELECT COUNT(DISTINCT T2.molecule_id), SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '='", "source_tables": ["bond", "molecule"]}, "evidence": "double bond refers to bond_type = ' = '; label = '+' mean molecules are carcinogenic;"}
{"sample_id": 9876, "db_id": "card_games", "final": {"question": "Among the cards with a white border color, how many of them have unknown power?", "sql": "SELECT SUM(CASE WHEN power LIKE '%*%' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE borderColor = 'white'", "source_tables": ["cards"]}, "evidence": "unknown power refers to power = '*' or power is null"}
{"sample_id": 9877, "db_id": "card_games", "final": {"question": "Which of the cards that are a promotional painting have multiple faces on the same card? Please list their names.", "sql": "SELECT DISTINCT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL", "source_tables": ["cards"]}, "evidence": "are a promotional painting refers to isPromo = 1; have multiple faces on the same card refers to side is not Null"}
{"sample_id": 9878, "db_id": "card_games", "final": {"question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?", "sql": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'", "source_tables": ["cards"]}, "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes"}
{"sample_id": 9879, "db_id": "card_games", "final": {"question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".", "sql": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'", "source_tables": ["cards"]}, "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls"}
{"sample_id": 9880, "db_id": "card_games", "final": {"question": "How many artists have designed a card with a black border color and is available in both \"arena\" and \"mtgo\" printing type?", "sql": "SELECT COUNT(CASE WHEN availability LIKE '%arena,mtgo%' AND borderColor = 'black' THEN 1 ELSE NULL END) FROM cards", "source_tables": ["cards"]}, "evidence": "available in both \"arena\" and \"mtgo\" refers to availability like '%arena,mtgo%'"}
{"sample_id": 9881, "db_id": "card_games", "final": {"question": "Which card costs more converted mana, \"Serra Angel\" or \"Shrine Keeper\"?", "sql": "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1", "source_tables": ["cards"]}, "evidence": "\"Serra Angel\" refers to name = 'Serra Angel'; \"Shrine Keeper\" refers to name = 'Shrine Keeper'; card costs more converted mana when the value of convertedManaCost is greater"}
{"sample_id": 9882, "db_id": "card_games", "final": {"question": "Which artist designed the card whose promotional name is \"Battra, Dark Destroyer\"?", "sql": "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'", "source_tables": ["cards"]}, "evidence": "promotional name is \"Battra, Dark Destroyer\" refers to flavorName = 'Battra, Dark Destroyer'"}
{"sample_id": 9883, "db_id": "card_games", "final": {"question": "Please list the names of the top 3 cards with the highest converted mana cost and have a 2003 card frame style.", "sql": "SELECT name FROM cards WHERE frameVersion = 2003 ORDER BY convertedManaCost DESC LIMIT 3", "source_tables": ["cards"]}, "evidence": "name of cards refers to name; 2003 card frame style refers to frameVersion = '2003'"}
{"sample_id": 9884, "db_id": "card_games", "final": {"question": "What's the Italian name of the set of cards with \"Ancestor's Chosen\" is in?", "sql": "SELECT translation FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen' ) AND language = 'Italian'", "source_tables": ["cards", "set_translations"]}, "evidence": "Italian is a language which refers to language = 'Italian'; with \"Ancestor's Chosen\" in the card set refers to name = 'Ancestor''s Chosen'"}
{"sample_id": 9885, "db_id": "card_games", "final": {"question": "How many translations are there for the set of cards with \"Angel of Mercy\" in it?", "sql": "SELECT COUNT(DISTINCT translation) FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Angel of Mercy' ) AND translation IS NOT NULL", "source_tables": ["cards", "set_translations"]}, "evidence": "set of cards with \"Angel of Mercy\" in it refers to name = 'Angel of Mercy'"}
{"sample_id": 9886, "db_id": "card_games", "final": {"question": "Please list the names of the cards in the set \"Hauptset Zehnte Edition\".", "sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'", "source_tables": ["cards", "set_translations"]}, "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'"}
{"sample_id": 9887, "db_id": "card_games", "final": {"question": "For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?", "sql": "SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'", "source_tables": ["cards", "set_translations"]}, "evidence": "set of cards with \"Ancestor''s Chosen\" in it refers to name = 'Ancestor''s Chosen'; Korean version refers to language = 'Korean'"}
{"sample_id": 9888, "db_id": "card_games", "final": {"question": "Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex?", "sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'", "source_tables": ["cards", "set_translations"]}, "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; designed by Adam refers to artist = 'Adam Rex'"}
{"sample_id": 9889, "db_id": "card_games", "final": {"question": "How many cards are there in the base set of \"Hauptset Zehnte Edition\"?", "sql": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'", "source_tables": ["sets", "set_translations"]}, "evidence": "\"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; number of cards refers to baseSetSize"}
{"sample_id": 9890, "db_id": "card_games", "final": {"question": "What is the Simplified Chinese translation of the name of the set \"Eighth Edition\"?", "sql": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'", "source_tables": ["sets", "set_translations"]}, "evidence": "Eighth Edition is the name of card set which refers to name = 'Eighth Edition'; Simplified Chinese refers to language = 'Chinese Simplified'; translation of the name refers to translation"}
{"sample_id": 9891, "db_id": "card_games", "final": {"question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?", "sql": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'", "source_tables": ["sets", "cards"]}, "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa"}
{"sample_id": 9892, "db_id": "card_games", "final": {"question": "When was the set of cards with \"Ancestor's Chosen\" released?", "sql": "SELECT DISTINCT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'", "source_tables": ["sets", "cards"]}, "evidence": "card set \"Ancestor's Chosen\" refers to name = 'Ancestor''s Chosen'; when released refers to releaseDate"}
{"sample_id": 9893, "db_id": "card_games", "final": {"question": "What is the expansion type of the set \"Hauptset Zehnte Edition\"?", "sql": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'", "source_tables": ["sets", "set_translations"]}, "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = ' Hauptset Zehnte Edition'; expansion type refers to type"}
{"sample_id": 9894, "db_id": "card_games", "final": {"question": "Among the sets in the block \"Ice Age\", how many of them have an Italian translation?", "sql": "SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL", "source_tables": ["sets", "set_translations"]}, "evidence": "sets in the block \"Ice Age\" refers to block = 'Ice Age'; Italian translation refers to language = 'Italian' and translation is not null"}
{"sample_id": 9895, "db_id": "card_games", "final": {"question": "Is the set of cards with Adarkar Valkyrie only available outside the United States?", "sql": "SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Adarkar Valkyrie'", "source_tables": ["sets", "cards"]}, "evidence": "card set Adarkar Valkyrie refers to name = 'Adarkar Valkyrie'; isForeignOnly = 1 means only available outside the United States;"}
{"sample_id": 9896, "db_id": "card_games", "final": {"question": "Among the sets of cards that have an Italian translation, how many of them have a base set number of under 100?", "sql": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation IS NOT NULL AND T1.baseSetSize < 100 AND T2.language = 'Italian'", "source_tables": ["sets", "set_translations"]}, "evidence": "Italian translation refers to language = 'Italian'; have a translation means translation is not null; base set number of under 100 refers to baseSetSize < 10"}
{"sample_id": 9897, "db_id": "card_games", "final": {"question": "How many cards in the set Coldsnap have a black border color?", "sql": "SELECT SUM(CASE WHEN T1.borderColor = 'black' THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'", "source_tables": ["sets", "cards"]}, "evidence": "card set Coldsnap refers to name = 'Coldsnap'; black border color refers to borderColor = 'black'"}
{"sample_id": 9898, "db_id": "card_games", "final": {"question": "Please list the name of the cards in the set Coldsnap with the highest converted mana cost.", "sql": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1", "source_tables": ["sets", "cards"]}, "evidence": "card set Coldsnap refers to name = 'Coldsnap'"}
{"sample_id": 9899, "db_id": "card_games", "final": {"question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?", "sql": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist", "source_tables": ["sets", "cards"]}, "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Jeremy Jarvis, Aaron Miller or Chippy are the name of artists which refers to artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');"}
{"sample_id": 9900, "db_id": "card_games", "final": {"question": "What is card number 4 in the set Coldsnap?", "sql": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = 4", "source_tables": ["sets", "cards"]}, "evidence": "card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4"}
{"sample_id": 9901, "db_id": "card_games", "final": {"question": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power?", "sql": "SELECT SUM(CASE WHEN T1.power LIKE '*' OR T1.power IS NULL THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5", "source_tables": ["sets", "cards"]}, "evidence": "card set Coldsnap refers to name = 'Coldsnap'; converted mana cost higher than 5 refers to convertedManaCost > 5; unknown power refers to power = '*' or T1.power is null"}
{"sample_id": 9902, "db_id": "card_games", "final": {"question": "What is the Italian flavor text of the card \"Ancestor's Chosen\"?", "sql": "SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'", "source_tables": ["foreign_data", "cards"]}, "evidence": "Italian refers to language = 'Italian'; flavor text refers to flavorText; \"Ancestor''s Chosen\" refers to name = 'Ancestor''s Chosen'"}
{"sample_id": 9903, "db_id": "card_games", "final": {"question": "Please list all the foreign languages in which the card \"Ancestor's Chosen\" has a flavor text.", "sql": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.flavorText IS NOT NULL", "source_tables": ["foreign_data", "cards"]}, "evidence": "\"Ancestor''s Chosen\" refers to name = 'Ancestor''s Chosen'; has a flavor text refers to flavorText is not null"}
{"sample_id": 9904, "db_id": "card_games", "final": {"question": "What's the German type of the card \"Ancestor's Chosen\"?", "sql": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German'", "source_tables": ["foreign_data", "cards"]}, "evidence": "German refers to language = 'German'; \"Ancestor's Chosen\" refers to name = 'Ancestor''s Chosen'"}
{"sample_id": 9905, "db_id": "card_games", "final": {"question": "Please list the Italian text ruling of all the cards in the set Coldsnap.", "sql": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'", "source_tables": ["foreign_data", "sets", "cards"]}, "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'"}
{"sample_id": 9906, "db_id": "card_games", "final": {"question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.", "sql": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC", "source_tables": ["foreign_data", "sets", "cards"]}, "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)"}
{"sample_id": 9907, "db_id": "card_games", "final": {"question": "When was the ruling for the card 'Reminisce' created?", "sql": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'", "source_tables": ["cards", "rulings"]}, "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date"}
{"sample_id": 9908, "db_id": "card_games", "final": {"question": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap?", "sql": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'", "source_tables": ["sets", "cards"]}, "evidence": "converted mana cost of 7 refers to convertedManaCost = 7; card set Coldsnap refers to name = 'Coldsnap'; percentage = DIVIDE(SUM(convertedManaCost = 7), SUM(convertedManaCost))*100"}
{"sample_id": 9909, "db_id": "card_games", "final": {"question": "What is the percentage of incredibly powerful cards in the set Coldsnap?", "sql": "SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'", "source_tables": ["sets", "cards"]}, "evidence": "card set Coldsnap refers to name = 'Coldsnap'; foil is incredibly powerful refers to cardKingdomFoilId is not null AND cardKingdomId is not null; the percentage of incredibly powerful cards in the set refers to DIVIDE(SUM(incredibly powerful), SUM(name = 'Coldsnap'))*100"}
{"sample_id": 9910, "db_id": "card_games", "final": {"question": "What's the code for the set which was released on 2017/7/14?", "sql": "SELECT code FROM sets WHERE releaseDate = '2017-07-14' GROUP BY releaseDate, code", "source_tables": ["sets"]}, "evidence": "released on 2017/7/14 refers to releaseDate = '2017-07-14'"}
{"sample_id": 9911, "db_id": "card_games", "final": {"question": "List the keyrune code for the set whose code is 'PKHC'.", "sql": "SELECT keyruneCode FROM sets WHERE code = 'PKHC'", "source_tables": ["sets"]}, "evidence": "keyrune code refers to keyruneCode"}
{"sample_id": 9912, "db_id": "card_games", "final": {"question": "For the set which had 'SS2' as the code, what is its magic card market id?", "sql": "SELECT mcmId FROM sets WHERE code = 'SS2'", "source_tables": ["sets"]}, "evidence": "magic card market id refers to mcmId"}
{"sample_id": 9913, "db_id": "card_games", "final": {"question": "What's the magic card market name for the set which was released on 2017/6/9?", "sql": "SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'", "source_tables": ["sets"]}, "evidence": "magic card market name refers to mcmName"}
{"sample_id": 10064, "db_id": "codebase_community", "final": {"question": "How many posts were created on 21st July, 2010?", "sql": "SELECT COUNT(id) FROM postHistory WHERE date(CreationDate) = '2010-07-21'", "source_tables": ["posthistory"]}, "evidence": "created on 21st July, 2010 refers to CreationDate BETWEEN '2010-07-21 00:00:00' and '2012-07-21 23:59:59';"}
{"sample_id": 10065, "db_id": "codebase_community", "final": {"question": "What are the display names and ages of user who got the highest in views?", "sql": "SELECT DisplayName, Age FROM users WHERE Views = ( SELECT MAX(Views) FROM users )", "source_tables": ["users"]}, "evidence": "the highest in views refers to MAX(Views);"}
{"sample_id": 10066, "db_id": "codebase_community", "final": {"question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".", "sql": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'", "source_tables": ["posts"]}, "evidence": "Title = 'Detecting a given face in a database of facial images';"}
{"sample_id": 10067, "db_id": "codebase_community", "final": {"question": "How many negative comments were given by user ID 13?", "sql": "SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60", "source_tables": ["comments"]}, "evidence": "negative comments refer to Score < 60;"}
{"sample_id": 10068, "db_id": "codebase_community", "final": {"question": "Describe the post title which got positive comments and display names of the users who posted those comments.", "sql": "SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T2.PostId = T2.Id WHERE T1.Score > 60", "source_tables": ["comments", "posts"]}, "evidence": "positive comments refer to Score > 60;"}
{"sample_id": 10069, "db_id": "codebase_community", "final": {"question": "Provide the badge names received in 2011 for the user whose location is in the North Pole.", "sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'", "source_tables": ["users", "badges"]}, "evidence": "received in 2011 refers to year(Date) = 2011;"}
{"sample_id": 10070, "db_id": "codebase_community", "final": {"question": "Provide the users' display names and available website URLs of the post with favorite count of more than 150.", "sql": "SELECT T1.DisplayName, T1.WebsiteUrl FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.FavoriteCount > 150", "source_tables": ["users", "posts"]}, "evidence": "favorite count of more than 150 refers to FavoriteCount > 150;"}
{"sample_id": 10071, "db_id": "codebase_community", "final": {"question": "Describe the post history counts and last edit date of the post title \"What is the best introductory Bayesian statistics textbook?\"", "sql": "SELECT T1.Id, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'", "source_tables": ["posthistory", "posts"]}, "evidence": ""}
{"sample_id": 10072, "db_id": "codebase_community", "final": {"question": "Describe the last accessed date and location of the users who received the outliers badge.", "sql": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'", "source_tables": ["users", "badges"]}, "evidence": "Outliers is the name of the badge;"}
{"sample_id": 10073, "db_id": "codebase_community", "final": {"question": "Provide the related post title of \"How to tell if something happened in a data set which monitors a value over time\".", "sql": "SELECT T3.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN posts AS T3 ON T1.RelatedPostId = T3.Id WHERE T2.Title = 'How to tell if something happened in a data set which monitors a value over time'", "source_tables": ["postlinks", "posts"]}, "evidence": ""}
{"sample_id": 10074, "db_id": "codebase_community", "final": {"question": "List the post IDs and badge names of the user Samuel in 2013.", "sql": "SELECT T1.PostId, T2.Name FROM postHistory AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId WHERE T1.UserDisplayName = 'Samuel' AND STRFTIME('%Y', T1.CreationDate) = '2013' AND STRFTIME('%Y', T2.Date) = '2013'", "source_tables": ["posthistory", "badges"]}, "evidence": "Samuel refers to UserDisplayName; YEAR(CreationDate) = 2013 relates to PostId; YEAR(Date) = 2013 relates to the badge;"}
{"sample_id": 10075, "db_id": "codebase_community", "final": {"question": "What is the owner's display name of the most popular post?", "sql": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1 )", "source_tables": ["users", "posts"]}, "evidence": "Higher view count means the post has higher popularity; the most popular post refers to MAX(ViewCount);"}
{"sample_id": 10076, "db_id": "codebase_community", "final": {"question": "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag.", "sql": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'", "source_tables": ["users", "tags", "posts"]}, "evidence": "user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';"}
{"sample_id": 10077, "db_id": "codebase_community", "final": {"question": "Write down the related posts titles and link type IDs of the post \"What are principal component scores?\".", "sql": "SELECT T3.Title, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId INNER JOIN posts AS T3 ON T2.RelatedPostId = T3.Id WHERE T1.Title = 'What are principal component scores?'", "source_tables": ["postlinks", "posts"]}, "evidence": "Title = 'What are principal component scores?';"}
{"sample_id": 10078, "db_id": "codebase_community", "final": {"question": "Describe the display name of the parent ID for child post with the highest score.", "sql": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1 )", "source_tables": ["users", "posts"]}, "evidence": "If the parent id is not null, the post is the child post; the highest score refers to MAX(Score);"}
{"sample_id": 10079, "db_id": "codebase_community", "final": {"question": "Under the vote type of 8, provide the display names and websites URLs of the user who got the highest bounty amount.", "sql": "SELECT DisplayName, WebsiteUrl FROM users WHERE Id = ( SELECT UserId FROM votes WHERE VoteTypeId = 8 ORDER BY BountyAmount DESC LIMIT 1 )", "source_tables": ["votes", "users"]}, "evidence": "vote type of 8 refers to VoteTypeId = 8; the highest bounty amount refers to MAX(BountyAmount);"}
{"sample_id": 10080, "db_id": "codebase_community", "final": {"question": "What are the titles of the top 5 posts with the highest popularity?", "sql": "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5", "source_tables": ["posts"]}, "evidence": "Higher view count means the post has higher popularity; the highest popularity refers to MAX(ViewCount);"}
{"sample_id": 10081, "db_id": "codebase_community", "final": {"question": "How many tags have post count between 5,000 to 7,000?", "sql": "SELECT COUNT(Id) FROM tags WHERE Count BETWEEN 5000 AND 7000", "source_tables": ["tags"]}, "evidence": "post count between 5,000 to 7,000 refers to Count BETWEEN 5000 and 7000;"}
{"sample_id": 10082, "db_id": "codebase_community", "final": {"question": "What is the owner user id of the most valuable post?", "sql": "SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts )", "source_tables": ["posts"]}, "evidence": "the most valuable post refers to MAX(FavoriteCount);"}
{"sample_id": 10083, "db_id": "codebase_community", "final": {"question": "How old is the most influential user?", "sql": "SELECT Age FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )", "source_tables": ["users"]}, "evidence": "How old describes age; the most influential refers to user where MAX(Reputation);"}
{"sample_id": 10084, "db_id": "codebase_community", "final": {"question": "How many posts with votes that were created in 2011 have a bounty of 50?", "sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.BountyAmount = 50 AND STRFTIME('%Y', T2.CreationDate) = '2011'", "source_tables": ["votes", "posts"]}, "evidence": "created in 2012 refers YEAR(CreationDate) = 2011; BountyAmount = 50;"}
{"sample_id": 10085, "db_id": "codebase_community", "final": {"question": "What is the id of the youngest user?", "sql": "SELECT Id FROM users WHERE Age = ( SELECT MIN(Age) FROM users )", "source_tables": ["users"]}, "evidence": "the youngest user refers to MIN(Age);"}
{"sample_id": 10086, "db_id": "codebase_community", "final": {"question": "What is the sum of score of the post on 2010-07-19?", "sql": "SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%'", "source_tables": ["posts"]}, "evidence": "on 2010-07-19 refers to LasActivityDate LIKE '2010-07-19%';"}
{"sample_id": 10087, "db_id": "codebase_community", "final": {"question": "What is the average monthly number of links created in 2010 for posts that have no more than 2 answers?", "sql": "SELECT CAST(COUNT(T1.Id) AS REAL) / 12 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.AnswerCount <= 2 AND STRFTIME('%Y', T1.CreationDate) = '2010'", "source_tables": ["postlinks", "posts"]}, "evidence": "calculation = DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010 and AnswerCount < = 2), 12)"}
{"sample_id": 10088, "db_id": "codebase_community", "final": {"question": "Among the posts that were voted by user 1465, what is the id of the most valuable post?", "sql": "SELECT T2.Id FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 1465 ORDER BY T2.FavoriteCount DESC LIMIT 1", "source_tables": ["votes", "posts"]}, "evidence": "user 1465 refers to UserId = 1465; the most valuable post refers to MAX(FavoriteCount);"}
{"sample_id": 10089, "db_id": "codebase_community", "final": {"question": "What is the title of the post with the oldest post link?", "sql": "SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T2.PostId = T1.Id ORDER BY T1.CreaionDate LIMIT 1", "source_tables": ["postlinks", "posts"]}, "evidence": "the oldest post link refers to MIN(CreaionDate);"}
{"sample_id": 10090, "db_id": "codebase_community", "final": {"question": "What is the display name of the user who acquired the highest amount of badges?", "sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1", "source_tables": ["users", "badges"]}, "evidence": "highest amount of badges refers to MAX(COUNT(Name));"}
{"sample_id": 10091, "db_id": "codebase_community", "final": {"question": "When did 'chl' cast its first vote in a post?", "sql": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1", "source_tables": ["votes", "users"]}, "evidence": "DisplayName = 'chl'; cast its first vote refers to MIN(CreationDate);"}
{"sample_id": 10092, "db_id": "codebase_community", "final": {"question": "What is the date when the youngest user made his or her first post?", "sql": "SELECT T2.CreaionDate FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Age IS NOT NULL ORDER BY T1.Age, T2.CreaionDate LIMIT 1", "source_tables": ["users", "posts"]}, "evidence": "the youngest user refers to MIN(Age); first post refers to MIN(CreaionDate);"}
{"sample_id": 10093, "db_id": "codebase_community", "final": {"question": "What is the display name of the user who acquired the first Autobiographer badge?", "sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.'Name' = 'Autobiographer' ORDER BY T2.Date LIMIT 1", "source_tables": ["users", "badges"]}, "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);"}
{"sample_id": 10094, "db_id": "codebase_community", "final": {"question": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?", "sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4", "source_tables": ["users", "posts"]}, "evidence": "favorite amount of 4 or more refers to FavoriteCount > = 4; Location = 'United Kingdom';"}
{"sample_id": 10095, "db_id": "codebase_community", "final": {"question": "What is the average number of posts voted by the oldest users?", "sql": "SELECT AVG(PostId) FROM votes WHERE UserId IN ( SELECT Id FROM users WHERE Age = ( SELECT MAX(Age) FROM users ) )", "source_tables": ["votes", "users"]}, "evidence": "average number of posts voted refers to AVG(PostId) FROM votes; the oldest users refer to MAX(Age);"}
{"sample_id": 10096, "db_id": "codebase_community", "final": {"question": "Who has the highest reputation? Please give the display name.", "sql": "SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )", "source_tables": ["users"]}, "evidence": "the highest reputation refers to MAX(Reputation);"}
{"sample_id": 10097, "db_id": "codebase_community", "final": {"question": "How many users whose reputations are higher than 2000 and the number of views is higher than 1000?", "sql": "SELECT COUNT(id) FROM users WHERE Reputation > 2000 AND Views > 1000", "source_tables": ["users"]}, "evidence": "reputations are higher than 2000 refer to Reputation > 2000; number of views is higher than 1000 refers to Views > 1000;"}
{"sample_id": 10098, "db_id": "codebase_community", "final": {"question": "Please list all display names of users who are adults.", "sql": "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65", "source_tables": ["users"]}, "evidence": "adults refer to users where Age BETWEEN 19 and 65;"}
{"sample_id": 10099, "db_id": "codebase_community", "final": {"question": "How many posts did Jay Stevens have in 2010?", "sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2010' AND T1.DisplayName = 'Jay Stevens'", "source_tables": ["users", "posts"]}, "evidence": "DisplayName = 'Jay Stevens'; in 2010 refers to YEAR(CreationDate) = 2010;"}
{"sample_id": 10100, "db_id": "codebase_community", "final": {"question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.", "sql": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1", "source_tables": ["users", "posts"]}, "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);"}
{"sample_id": 10216, "db_id": "superhero", "final": {"question": "Which hero was the fastest?", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1", "source_tables": ["attribute", "hero_attribute", "superhero"]}, "evidence": "which hero refers to superhero_name; fastest refers to MAX(attribute_value) WHERE attribute_name = 'Speed';"}
{"sample_id": 10217, "db_id": "superhero", "final": {"question": "How many superheroes have a neutral alignment?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'", "source_tables": ["alignment", "superhero"]}, "evidence": "neutral alignment refers to alignment_id = 3;"}
{"sample_id": 10218, "db_id": "superhero", "final": {"question": "State all of 3-D Man's attributes along with their values.", "sql": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'", "source_tables": ["attribute", "hero_attribute", "superhero"]}, "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;"}
{"sample_id": 10219, "db_id": "superhero", "final": {"question": "Which superheroes have blue eyes with brown hair?", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'", "source_tables": ["colour", "superhero"]}, "evidence": "which superheroes refers to superhero_name; blue eyes refers to color = 'Blue' and color.id = eye_colour_id; brown hair refers to color = 'Brown' and color.id = hair_colour_id;"}
{"sample_id": 10220, "db_id": "superhero", "final": {"question": "What is the publisher for Hawkman, Karate Kid and Speedy?", "sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')", "source_tables": ["publisher", "superhero"]}, "evidence": "publisher refers to publisher_name; Hawkman refers to superhero_name = 'Hawkman'; Karate Kid refers to superhero_name = 'Karate Kid'; Speedy refers to superhero_name = 'Speedy';"}
{"sample_id": 10221, "db_id": "superhero", "final": {"question": "How many superheroes didn't have any publisher?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.id = 1", "source_tables": ["publisher", "superhero"]}, "evidence": "didn't have any publisher refers to publisher.id = 1;"}
{"sample_id": 10222, "db_id": "superhero", "final": {"question": "Calculate the percentage of superheroes with blue eyes.", "sql": "SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id", "source_tables": ["colour", "superhero"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(superhero_name WHERE color = 'Blue'), COUNT(superhero_name)), 100.0); blue eyes refers to color = 'Blue' and color.id =  eye_colour_id = 7;"}
{"sample_id": 10223, "db_id": "superhero", "final": {"question": "Find the ratio between male superheroes and female superheroes.", "sql": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Male' THEN T1.id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Female' THEN T1.id ELSE NULL END) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id", "source_tables": ["gender", "superhero"]}, "evidence": "ratio = DIVIDE(SUM(gender_id = 1) / SUM(gender_id = 2)); male superheroes refers to gender = 'Female'; female superheroes refers to gender = 'Male';"}
{"sample_id": 10224, "db_id": "superhero", "final": {"question": "Who is the tallest superhero?", "sql": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1", "source_tables": ["superhero"]}, "evidence": "who refers to superhero_name; tallest superhero refers to MAX(height_cm);"}
{"sample_id": 10225, "db_id": "superhero", "final": {"question": "What is the power ID of cryokinesis?", "sql": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'", "source_tables": ["superpower"]}, "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';"}
{"sample_id": 10226, "db_id": "superhero", "final": {"question": "Provide the name of superhero with superhero ID 294.", "sql": "SELECT superhero_name FROM superhero WHERE id = 294", "source_tables": ["superhero"]}, "evidence": "name of superhero refers to superhero_name; superhero ID 294 refers to superhero.id = 294;"}
{"sample_id": 10227, "db_id": "superhero", "final": {"question": "List the full names of superheroes with missing weight.", "sql": "SELECT DISTINCT full_name FROM superhero WHERE full_name IS NOT NULL AND (weight_kg IS NULL OR weight_kg = 0)", "source_tables": ["superhero"]}, "evidence": "missing weight refers to weight_kg = 0 OR weight_kg = NULL;"}
{"sample_id": 10228, "db_id": "superhero", "final": {"question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.", "sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'", "source_tables": ["colour", "superhero"]}, "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;"}
{"sample_id": 10229, "db_id": "superhero", "final": {"question": "What is the superpowers of the superhero has Helen Parr as their full name?", "sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'", "source_tables": ["hero_power", "superhero", "superpower"]}, "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;"}
{"sample_id": 10230, "db_id": "superhero", "final": {"question": "Find the race of the superhero who weighs 108kg and is 188cm tall.", "sql": "SELECT DISTINCT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188", "source_tables": ["race", "superhero"]}, "evidence": "weighs 108kg refers to weight_kg = 108; 188cm tall refers to height_cm = 188;"}
{"sample_id": 10231, "db_id": "superhero", "final": {"question": "What is the publisher name of the superhero ID 38?", "sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38", "source_tables": ["publisher", "superhero"]}, "evidence": "superhero ID 38 refers to superhero.id = 38;"}
{"sample_id": 10232, "db_id": "superhero", "final": {"question": "What is the race of the superhero with maximum attribute value?", "sql": "SELECT T3.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN race AS T3 ON T1.race_id = T3.id ORDER BY T2.attribute_value DESC LIMIT 1", "source_tables": ["race", "hero_attribute", "superhero"]}, "evidence": "maximum attribute value refers to MAX(attribute_value);"}
{"sample_id": 10233, "db_id": "superhero", "final": {"question": "Give the alignment and superpowers of the superhero named Atom IV.", "sql": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Atom IV'", "source_tables": ["hero_power", "alignment", "superhero", "superpower"]}, "evidence": "superpowers refers to power_name;"}
{"sample_id": 10234, "db_id": "superhero", "final": {"question": "List down at least five full names of superheroes with blue eyes.", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5", "source_tables": ["colour", "superhero"]}, "evidence": "blue eyes refers to colour.colour = 'Blue' WHERE eye_colour_id = colour.id; Name of superheroes refers to superhero_name;"}
{"sample_id": 10235, "db_id": "superhero", "final": {"question": "Calculate the average attribute value of all neutral superheroes.", "sql": "SELECT AVG(T1.attribute_value) FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN alignment AS T3 ON T2.alignment_id = T3.id WHERE T3.alignment = 'Neutral'", "source_tables": ["alignment", "hero_attribute", "superhero"]}, "evidence": "average = AVG(attribute_value); neutral superheroes refers to alignment_id = 3;"}
{"sample_id": 10236, "db_id": "superhero", "final": {"question": "List the skin colour of the superheroes with 100 attribute value.", "sql": "SELECT DISTINCT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id WHERE T3.attribute_value = 100", "source_tables": ["colour", "hero_attribute", "superhero"]}, "evidence": "skin colour refers to colour.colour where skin_colour_id = colour.id; 100 attribute value refers to attribute_value = 100;"}
{"sample_id": 10237, "db_id": "superhero", "final": {"question": "Count the good female superheroes.", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Good' AND T3.gender = 'Female'", "source_tables": ["alignment", "gender", "superhero"]}, "evidence": "good refers to alignment.id = 1; female refers to gender.id = 2;"}
{"sample_id": 10238, "db_id": "superhero", "final": {"question": "Provide the names of superheroes with attribute value between 75 to 80.", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value BETWEEN 75 AND 80", "source_tables": ["hero_attribute", "superhero"]}, "evidence": "names of superheroes refers to superhero_name; attribute value between 75 to 80 refers to attribute_value BETWEEN 75 AND 80;"}
{"sample_id": 10239, "db_id": "superhero", "final": {"question": "Give the race of the blue-haired male superhero.", "sql": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'", "source_tables": ["race", "gender", "colour", "superhero"]}, "evidence": "blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';"}
{"sample_id": 10240, "db_id": "superhero", "final": {"question": "Among the bad superheroes, what is the percentage of female superheroes?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Bad'", "source_tables": ["alignment", "gender", "superhero"]}, "evidence": "bad superheroes refers to alignment.id = 2; percentage = MULTIPLY(DIVIDE(SUM(gender.id = 2 WHERE alignment.id = 2), COUNT(alignment.id = 2)), 100.0); female refers to gender.id = 2;"}
{"sample_id": 10372, "db_id": "formula_1", "final": {"question": "Please list the constructor names with 0 points at race 291.", "sql": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T1.raceId = 291", "source_tables": ["constructors", "constructorstandings"]}, "evidence": "race at 291 refers to raceID = 291;"}
{"sample_id": 10373, "db_id": "formula_1", "final": {"question": "How many Japanese constructors have 0 points in 2 races?", "sql": "SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2", "source_tables": ["constructors", "constructorstandings"]}, "evidence": "2 races refers to COUNT(raceID) = 2; Japanese refers to constructors.nationality = 'Japanese';"}
{"sample_id": 10374, "db_id": "formula_1", "final": {"question": "Which constructors have been ranked 1?", "sql": "SELECT DISTINCT T2.name FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.rank = 1", "source_tables": ["constructors", "results"]}, "evidence": ""}
{"sample_id": 10375, "db_id": "formula_1", "final": {"question": "How many French constructors have a lap number of over 50?", "sql": "SELECT COUNT(DISTINCT T2.constructorId) FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.laps > 50 AND T2.nationality = 'French'", "source_tables": ["constructors", "results"]}, "evidence": "lap numbers of over 50 refers to laps > 50;"}
{"sample_id": 10376, "db_id": "formula_1", "final": {"question": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.", "sql": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009", "source_tables": ["results", "drivers", "races"]}, "evidence": "from 2007 to 2009 refers to year between 2007 and 2009; race completion refers to time is not null; percentage = Divide(COUNT(DriverID where time is not null and year between 2007 and 2009),Count (DriverID where year between 2007 and 2009))*100; "}
{"sample_id": 10377, "db_id": "formula_1", "final": {"question": "What is the average time in seconds of champion for each year, before year 1975?", "sql": "WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL )   + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL", "source_tables": ["results", "champion_time", "time_in_seconds", "races"]}, "evidence": "only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null; before year 1975 refers to year < 1975;"}
{"sample_id": 10378, "db_id": "formula_1", "final": {"question": "Which drivers born after 1975 have been ranked 2? Please give their forenames and surnames.", "sql": "SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) > '1975' AND T1.rank = 2", "source_tables": ["results", "drivers"]}, "evidence": "born after 1975 refers to year(dob) >1975;"}
{"sample_id": 10379, "db_id": "formula_1", "final": {"question": "How many Italian drivers haven't finished the race?", "sql": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Italian' AND T1.time IS NULL", "source_tables": ["results", "drivers"]}, "evidence": "haven't finished the race refers to time is null;"}
{"sample_id": 10380, "db_id": "formula_1", "final": {"question": "Which driver has the fastest lap time? Please give their forenames and surnames.", "sql": "SELECT T2.forename, T2.surname, T1.fastestLapTime FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1", "source_tables": ["results", "drivers"]}, "evidence": ""}
{"sample_id": 10381, "db_id": "formula_1", "final": {"question": "What is the fastest lap number of the champion in 2009?", "sql": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.time LIKE '_:%:__.___'", "source_tables": ["results", "races"]}, "evidence": "in 2009 refers to year = 2009; Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\""}
{"sample_id": 10382, "db_id": "formula_1", "final": {"question": "What is the average of fastest lap speed in the 2009 Spanish Grand Prix race?", "sql": "SELECT AVG(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'", "source_tables": ["results", "races"]}, "evidence": "Spanish Grand Prix is the name of race refers to name = 'Spanish Grand Prix'; average fastest lap speed refers to avg(fastestLapSpeed);"}
{"sample_id": 10383, "db_id": "formula_1", "final": {"question": "Which race has the shortest actual finishing time? Please give the name and year.", "sql": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 on T1.raceId = T2.raceId WHERE T2.milliseconds IS NOT NULL ORDER BY T2.milliseconds LIMIT 1", "source_tables": ["races", "results"]}, "evidence": "shortest actual finishing time refers to Min(milliseconds) except milliseconds = null;"}
{"sample_id": 10384, "db_id": "formula_1", "final": {"question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?", "sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005", "source_tables": ["results", "drivers", "races"]}, "evidence": "born before 1985 refers to year(dob)<1985; in 2000 to 2005 refers to year between 2000 and 2005; percentage = Divide(COUNT(driverId where year (dob) <1985 and laps >50),COUNT(DriverID where year between 2000 and 2005) *100;"}
{"sample_id": 10385, "db_id": "formula_1", "final": {"question": "How many French drivers who obtain the laptime less than 02:00.00?", "sql": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120", "source_tables": ["drivers", "laptimes"]}, "evidence": "lap time less than 02:00.00 refers to seconds < 120;"}
{"sample_id": 10386, "db_id": "formula_1", "final": {"question": "List out the code for drivers who have nationality in America.", "sql": "SELECT code FROM drivers WHERE Nationality = 'American'", "source_tables": ["drivers"]}, "evidence": "nationality = 'America'"}
{"sample_id": 10387, "db_id": "formula_1", "final": {"question": "List out the Id number of races which were hold in 2009.", "sql": "SELECT raceId FROM races WHERE year = 2009", "source_tables": ["races"]}, "evidence": ""}
{"sample_id": 10388, "db_id": "formula_1", "final": {"question": "How many driver participated in race ID number 18?", "sql": "SELECT COUNT(driverId) FROM driverStandings WHERE raceId = 18", "source_tables": ["driverstandings"]}, "evidence": ""}
{"sample_id": 10389, "db_id": "formula_1", "final": {"question": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?", "sql": "SELECT COUNT(*) FROM ( SELECT T1.nationality FROM drivers AS T1 ORDER BY JULIANDAY(T1.dob) DESC LIMIT 3) AS T3 WHERE T3.nationality = 'Dutch'", "source_tables": ["drivers"]}, "evidence": "youngest driver refers to Max (year(dob)); Netherlandic and Dutch refer to the same country"}
{"sample_id": 10390, "db_id": "formula_1", "final": {"question": "What is reference name of Robert Kubica?", "sql": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'", "source_tables": ["drivers"]}, "evidence": "reference name refers to driverRef;"}
{"sample_id": 10391, "db_id": "formula_1", "final": {"question": "How many British drivers who were born in 1980?", "sql": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) = '1980'", "source_tables": ["drivers"]}, "evidence": "born in 1980 refers to year(dob) = 1980;"}
{"sample_id": 10392, "db_id": "formula_1", "final": {"question": "List out top 3 German drivers who were born from 1980-1990 and have the earliest lap time.", "sql": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1990' ORDER BY T1.time LIMIT 3", "source_tables": ["pitstops", "drivers"]}, "evidence": "born from 1980-1990 refers to year(dob) between 1980 and 1990; earliest lap time refers to Min(time);"}
{"sample_id": 10393, "db_id": "formula_1", "final": {"question": "Please state the reference name of the oldest German driver.", "sql": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1", "source_tables": ["drivers"]}, "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef."}
{"sample_id": 10394, "db_id": "formula_1", "final": {"question": "Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers.", "sql": "SELECT T2.driverId, T2.code FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) = '1971' AND T1.fastestLapTime IS NOT NULL", "source_tables": ["results", "drivers"]}, "evidence": "born in 1971 refers to year(dob) = 1971; has the fastest lap time refers to fastestLapTime has values"}
{"sample_id": 10395, "db_id": "formula_1", "final": {"question": "List out top 10 Spanish drivers who were born before 1982 and have the latest lap time.", "sql": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Spanish' AND STRFTIME('%Y', T2.dob) < '1982' ORDER BY T1.time DESC LIMIT 10", "source_tables": ["pitstops", "drivers"]}, "evidence": "born before 1982 refers to year(dob) < 1982; latest lap time refers to Max(time);"}
{"sample_id": 10396, "db_id": "formula_1", "final": {"question": "State the racing year which has the fastest lap time?", "sql": "SELECT T2.year FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.fastestLapTime IS NOT NULL", "source_tables": ["results", "races"]}, "evidence": "'has the fastest lap time?' refers to fastestLapTime has values"}
{"sample_id": 10397, "db_id": "formula_1", "final": {"question": "Which year has the lowest speed of lap time?", "sql": "SELECT T2.year FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId ORDER BY T1.time DESC LIMIT 1", "source_tables": ["races", "laptimes"]}, "evidence": "lowest speed of lap time refers to Max(time);"}
{"sample_id": 10398, "db_id": "formula_1", "final": {"question": "List the driver's ID of the top five driver, by descending order, the fastest time during the first lap of the race.", "sql": "SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time LIMIT 5", "source_tables": ["laptimes"]}, "evidence": "fastest time refers to Min(time);"}
{"sample_id": 10399, "db_id": "formula_1", "final": {"question": "From race no. 50 to 100, how many finishers have been disqualified?", "sql": "SELECT SUM(IIF(time IS NOT NULL, 1, 0)) FROM results WHERE statusId = 2 AND raceID < 100 AND raceId > 50", "source_tables": ["results"]}, "evidence": "disqualified refers to statusID = 2, finisher refers to time! = null; race no. refers to raceId; raceId > 50 and raceId < 100;"}
{"sample_id": 10400, "db_id": "formula_1", "final": {"question": "How many times the circuits were held in Austria? Please give their location and coordinates.", "sql": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'", "source_tables": ["circuits"]}, "evidence": "location coordinates refers to (lat,lng); Austria refers to country = 'Austria';"}
{"sample_id": 10401, "db_id": "formula_1", "final": {"question": "What race number has the most finishers?", "sql": "SELECT raceId FROM results GROUP BY raceId ORDER BY COUNT(time IS NOT NULL) DESC LIMIT 1", "source_tables": ["results"]}, "evidence": "finisher refers to time is not null;"}
{"sample_id": 10402, "db_id": "formula_1", "final": {"question": "List the reference name of the drivers who passed the second qualifying lap during race no. 23. Indicate their nationality and birthday.", "sql": "SELECT T2.driverRef, T2.nationality, T2.dob FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.raceId = 23 AND T1.q2 IS NOT NULL", "source_tables": ["qualifying", "drivers"]}, "evidence": "passed the second qualifying lap refers to q2 is not null; birthday refers to dob; reference name of drivers refers to driverRef; race no. refers to raceId;"}
{"sample_id": 10403, "db_id": "formula_1", "final": {"question": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race.", "sql": "SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1", "source_tables": ["races", "qualifying", "drivers"]}, "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; first qualifying race refers to MIN(races.date);"}
{"sample_id": 10404, "db_id": "formula_1", "final": {"question": "How many American drivers have puncture status.", "sql": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 on T1.driverId = T2.driverId INNER JOIN status AS T3 on T2.statusId = T3.statusId WHERE T3.status = 'Puncture' AND T1.nationality = 'American'", "source_tables": ["status", "results", "drivers"]}, "evidence": "puncture status refers to status = Puncture;"}
{"sample_id": 10405, "db_id": "formula_1", "final": {"question": "Which of the Italian constructor got the highest point to date? Give its introduction website?", "sql": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1", "source_tables": ["constructors", "constructorstandings"]}, "evidence": "introduction website refers to url; Italian is a nationality"}
{"sample_id": 10519, "db_id": "european_football_2", "final": {"question": "What is Aaron Lennox's total crossing score?", "sql": "SELECT SUM(t2.crossing) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Lennox'", "source_tables": ["player_attributes", "player"]}, "evidence": "Aaron Lennox's refers to T2.player_name = 'Aaron Lennox'; total crossing score refers to SUM(crossing)"}
{"sample_id": 10520, "db_id": "european_football_2", "final": {"question": "What is Ajax's highest chance creation passing score and what is it classified as?", "sql": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1", "source_tables": ["team_attributes", "team"]}, "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass"}
{"sample_id": 10521, "db_id": "european_football_2", "final": {"question": "Which foot is preferred by Abdou Diallo?", "sql": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'", "source_tables": ["player_attributes", "player"]}, "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot"}
{"sample_id": 10522, "db_id": "european_football_2", "final": {"question": "What is the highest overall rating received by Dorlan Pabon?", "sql": "SELECT MAX(t2.overall_rating) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Dorlan Pabon'", "source_tables": ["player_attributes", "player"]}, "evidence": "Dorlan Pabon refers to T2.player_name = 'Dorlan Pabon'; highest overall rating refers to MAX(overall_rating)"}
{"sample_id": 10523, "db_id": "european_football_2", "final": {"question": "What is the average number of goals made by Parma as the away team while playing in Italy?", "sql": "SELECT CAST(SUM(T1.away_team_goal) AS REAL) / COUNT(T1.id) FROM 'Match' AS T1 INNER JOIN TEAM AS T2 ON T1.away_team_api_id = T2.team_api_id INNER JOIN Country AS T3 ON T1.country_id = T3.id WHERE T2.team_long_name = 'Parma' AND T3.name = 'Italy'", "source_tables": ["country", "team", "match"]}, "evidence": "Parma refers to team_long_name = 'Parma'; average number of goals refers to AVG(away_team_goal)"}
{"sample_id": 10524, "db_id": "european_football_2", "final": {"question": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.", "sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.'date', 1, 10) = '2016-06-23' AND t2.overall_rating = 77 ORDER BY t1.birthday ASC LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "77 points overall rating refers to overall_rating = 77; on 2016/6/23 refers to date LIKE '2016-06-23%'; The larger the birthday value, the younger the person is, and vice versa;"}
{"sample_id": 10525, "db_id": "european_football_2", "final": {"question": "What was the overall rating for Aaron Mooy on 2016/2/4?", "sql": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.'date', 1, 10) = '2016-02-04' AND t1.player_name = 'Aaron Mooy'", "source_tables": ["player_attributes", "player"]}, "evidence": "Aaron Mooy refers to player_name = 'Aaron Mooy'; on 2016/2/4 refers to date LIKE '2016-02-04%';"}
{"sample_id": 10526, "db_id": "european_football_2", "final": {"question": "What was the potiential for Francesco Parravicini on 2010/8/30?", "sql": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.'date', 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'", "source_tables": ["player_attributes", "player"]}, "evidence": "Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'"}
{"sample_id": 10527, "db_id": "european_football_2", "final": {"question": "How was Francesco Migliore's attacking work rate on 2015/5/1?", "sql": "SELECT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.'date' LIKE '2015-05-01%' AND t1.player_name = 'Francesco Migliore'", "source_tables": ["player_attributes", "player"]}, "evidence": "Francesco Migliore refers to player_name = 'Francesco Migliore'; on 2015/5/1 refers to date LIKE '2015-05-01%';"}
{"sample_id": 10528, "db_id": "european_football_2", "final": {"question": "Tell the defensive work rate for Kevin Berigaud on 2013/2/22.", "sql": "SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.'date', 1, 10) = '2013-02-22' AND t1.player_name = 'Kevin Berigaud'", "source_tables": ["player_attributes", "player"]}, "evidence": "Kevin Berigaud refers to player_name = 'Kevin Berigaud'; on 2013/2/22 refers to date = '2013-02-22 00:00:00'"}
{"sample_id": 10529, "db_id": "european_football_2", "final": {"question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.", "sql": "SELECT 'date' FROM ( SELECT t2.crossing, t2.'date' FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)"}
{"sample_id": 10530, "db_id": "european_football_2", "final": {"question": "What was the build up play speed class for \"Willem II\" on 2011/2/22?", "sql": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.'date', 1, 10) = '2011-02-22'", "source_tables": ["team_attributes", "team"]}, "evidence": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'"}
{"sample_id": 10531, "db_id": "european_football_2", "final": {"question": "How was the build up play dribbling class for \"LEI\" on 2015/9/10?", "sql": "SELECT t2.buildUpPlayDribblingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'LEI' AND SUBSTR(t2.'date', 1, 10) = '2015-09-10'", "source_tables": ["team_attributes", "team"]}, "evidence": "\"LEI\" refers to team_short_name = 'LEI'; on 2015/9/10 refers to\u00a0 date = '2015-09-10 00:00:00'"}
{"sample_id": 10532, "db_id": "european_football_2", "final": {"question": "Tell the build Up play passing class for \"FC Lorient\" on 2010/2/22.", "sql": "SELECT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'FC Lorient' AND t2.'date' LIKE '2010-02-22%'", "source_tables": ["team_attributes", "team"]}, "evidence": "\"FC Lorient\" refers to team_long_name = 'FC Lorient'; on 2010/2/22 refers to date LIKE '2010-02-22%';"}
{"sample_id": 10533, "db_id": "european_football_2", "final": {"question": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.", "sql": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.'date', 1, 10) = '2013-09-20'", "source_tables": ["team_attributes", "team"]}, "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'"}
{"sample_id": 10534, "db_id": "european_football_2", "final": {"question": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?", "sql": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.'date', 1, 10) = '2010-02-22'", "source_tables": ["team_attributes", "team"]}, "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'"}
{"sample_id": 10535, "db_id": "european_football_2", "final": {"question": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10?", "sql": "SELECT t2.chanceCreationShootingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hannover 96' AND t2.'date' LIKE '2015-09-10%'", "source_tables": ["team_attributes", "team"]}, "evidence": "\"Hannover 96\" refers to team_long_name = 'Hannover 96'; on 2015/9/10 refers to date LIKE '2015-09-10%';"}
{"sample_id": 10536, "db_id": "european_football_2", "final": {"question": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?", "sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Marko Arnautovic' AND SUBSTR(t2.'date', 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'", "source_tables": ["player_attributes", "player"]}, "evidence": "average overall rating refers to avg(overall_rating); Marko Arnautovic refers to player_name = 'Marko Arnautovic'; from 2007/2/22 to 2016/4/21 refers to the first 10 characters of date BETWEEN '2007-02-22' and '2016-04-21'"}
{"sample_id": 10537, "db_id": "european_football_2", "final": {"question": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?", "sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.'date', 1, 10) = '2013-07-12'", "source_tables": ["player_attributes", "player"]}, "evidence": "Landon Donovan's refers to player_name = 'Landon Donovan'; Jordan Bowery refers to player_name = 'Jordan Bowery'; percentage refers to DIVIDE(SUBTRACT(player_name = 'Landon Donovan' overall_rating; player_name = 'Jordan Bowery' overall_rating), player_name = 'Landon Donovan' overall_rating)*100"}
{"sample_id": 10538, "db_id": "european_football_2", "final": {"question": "List down most tallest players' name.", "sql": "SELECT player_name FROM (SELECT player_name, height, DENSE_RANK() OVER (ORDER BY height DESC) as rank FROM Player) WHERE rank = 1", "source_tables": ["player"]}, "evidence": "tallest refers to rank based on the height in descending order; Most tallest players refers to rank = 1 "}
{"sample_id": 10539, "db_id": "european_football_2", "final": {"question": "What are the player api id of 10 heaviest players?", "sql": "SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10", "source_tables": ["player"]}, "evidence": "heaviest refers to MAX(weight)"}
{"sample_id": 10540, "db_id": "european_football_2", "final": {"question": "List down the name of players who are 35 years old and above.", "sql": "SELECT player_name FROM Player WHERE CAST((JULIANDAY('now') - JULIANDAY(birthday)) AS REAL) / 365 >= 35", "source_tables": ["player"]}, "evidence": "35 years old and above refers to datetime(CURRENT_TIMESTAMP,'localtime') - datetime(birthday) > 34"}
{"sample_id": 10541, "db_id": "european_football_2", "final": {"question": "How many home team goal have been scored by Aaron Lennon?", "sql": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_9 WHERE t1.player_name = 'Aaron Lennon'", "source_tables": ["player", "match"]}, "evidence": "Aaron Lennon refers to player_name = 'Aaron Lennon'"}
{"sample_id": 10542, "db_id": "european_football_2", "final": {"question": "Sum up the away team goal scored by both Daan Smith and Filipe Ferreira.", "sql": "SELECT SUM(t2.away_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_5 WHERE t1.player_name IN ('Daan Smith', 'Filipe Ferreira')", "source_tables": ["player", "match"]}, "evidence": "Daan Smith refers to player_name = 'Daan Smith'; Filipe Ferreira refers to player_name = 'Filipe Ferreira'"}
{"sample_id": 10543, "db_id": "european_football_2", "final": {"question": "Calculate the total home team goal scored by players whose age are 30 years old and below.", "sql": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_1 WHERE datetime(CURRENT_TIMESTAMP, 'localtime') - datetime(T1.birthday) < 31", "source_tables": ["player", "match"]}, "evidence": "age are 30 years old and below refers to SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'), datetime(birthday) < 31)"}
{"sample_id": 10668, "db_id": "thrombosis_prediction", "final": {"question": "For the patients with an abnormal activated partial prothrom bin time, how many of them does not have thrombosis?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T3.Thrombosis = 0 AND T2.APTT > 45", "source_tables": ["examination", "laboratory", "patient"]}, "evidence": "abnormal activated partial prothrom bin time refers to APTT > 45; does not have thrombosis refers to Thrombosis = 0; Only count ones without repetitive."}
{"sample_id": 10669, "db_id": "thrombosis_prediction", "final": {"question": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND T1.SEX = 'M'", "source_tables": ["laboratory", "patient"]}, "evidence": "male patients refers to Sex = 'M'; normal level of white blood cells refers to WBC > 3.5 and WBC <9.0; abnormal fibrinogen level refers to FG < = 150 or FG > = 450; Don't compute repetitive ones."}
{"sample_id": 10670, "db_id": "thrombosis_prediction", "final": {"question": "How many patients born after 1980/1/1 have an abnormal fibrinogen level?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T1.Birthday > '1980-01-01'", "source_tables": ["laboratory", "patient"]}, "evidence": "born after 1980/1/1 refers to Birthday > '1980-01-01'; normal fibrinogen level refers to FG between 150 and 450; Should return the number of distinct patients."}
{"sample_id": 10671, "db_id": "thrombosis_prediction", "final": {"question": "Please list the disease names of the patients that have a proteinuria level higher than normal.", "sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.'U-PRO' >= 30", "source_tables": ["laboratory", "patient"]}, "evidence": "disease names refers to Diagnosis; proteinuria level higher than normal refers to `U-PRO` > = 30;"}
{"sample_id": 10672, "db_id": "thrombosis_prediction", "final": {"question": "Which patient has a normal proteinuria level and is diagnosed with SLE? Please give his or her patient ID.", "sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.'U-PRO' > 0 AND T2.'U-PRO' < 30 AND T1.Diagnosis = 'SLE'", "source_tables": ["laboratory", "patient"]}, "evidence": "normal proteinuria level refers to 0 < `U-PRO` < 30; diagnosed with SLE refers to Diagnosis = 'SLE';"}
{"sample_id": 10673, "db_id": "thrombosis_prediction", "final": {"question": "How many patients with an Ig G higher than normal?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG >= 2000", "source_tables": ["examination", "laboratory", "patient"]}, "evidence": "Ig G higher than normal refers to IGG >= 2000; Should consider DISTINCT in the final result;"}
{"sample_id": 10674, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients with a normal Ig G level, how many of them have symptoms?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND T3.Symptoms IS NOT NULL", "source_tables": ["examination", "laboratory", "patient"]}, "evidence": "normal Ig G level refers to IGG > 900 and IGG < 2000; have symptoms refers to Symptoms IS NOT NULL;"}
{"sample_id": 10675, "db_id": "thrombosis_prediction", "final": {"question": "For the patient who has the highest Ig A within the normal range, what is his or her diagnosis?", "sql": "SELECT patientData.Diagnosis FROM Patient AS patientData INNER JOIN Laboratory AS labData ON patientData.ID = labData.ID WHERE labData.IGA BETWEEN 80 AND 500 ORDER BY labData.IGA DESC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "highest Ig A within the normal range refers to MAX(IGA BETWEEN 80 AND 500);"}
{"sample_id": 10676, "db_id": "thrombosis_prediction", "final": {"question": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND  strftime('%Y',  T1.'First Date') > '1990'", "source_tables": ["laboratory", "patient"]}, "evidence": "normal Ig A level refers to IGA > 80 AND IGA < 500; came to the hospital after 1990/1/1 refers to YEAR(`First Date`) > = 1990;"}
{"sample_id": 10677, "db_id": "thrombosis_prediction", "final": {"question": "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?", "sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM NOT BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "abnormal Ig M level refers to IGM <=40 OR IGM >= 400; most common disease refers to MAX(COUNT(Diagnosis));"}
{"sample_id": 10678, "db_id": "thrombosis_prediction", "final": {"question": "How many patients with a abnormal C-reactive protein don't have their data recorded?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+' ) AND T1.Description IS NULL", "source_tables": ["laboratory", "patient"]}, "evidence": "abnormal C-reactive protein refers to CRP ='+'; don't have data recorded refers to Description IS NULL;"}
{"sample_id": 10679, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND STRFTIME('%Y', Date('now')) - STRFTIME('%Y', T1.Birthday) < 70", "source_tables": ["laboratory", "patient"]}, "evidence": "creatinine level is abnormal refers to CRE >= 1.5; aren't 70 yet refers to SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) < 70; "}
{"sample_id": 10680, "db_id": "thrombosis_prediction", "final": {"question": "How many patients with a normal Rhuematoid Factor has a positive measure of degree of coagulation?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T3.KCT = '+'", "source_tables": ["examination", "laboratory", "patient"]}, "evidence": "normal Rhuematoid Factor refers TO RA IN('-', '+-'); positive measure of degree of coagulation refers to KCT = '+'; Should compute the number of distinct ones"}
{"sample_id": 10681, "db_id": "thrombosis_prediction", "final": {"question": "Please list the diseases of the patients born after 1985-1-1 and have a normal Rhuematoid Factor.", "sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T1.Birthday > '1985-01-01'", "source_tables": ["laboratory", "patient"]}, "evidence": "diseases refers to Diagnosis; born after 1985/1/1 refers to YEAR(Birthday) > = 1985; normal Rhuematoid Factor refers to RA IN('-', '+-');"}
{"sample_id": 10682, "db_id": "thrombosis_prediction", "final": {"question": "Please list the ID of the patient whose RF is normal and who is older than 60.", "sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND STRFTIME('%Y', DATE('now')) - STRFTIME('%Y', T1.Birthday) > 60", "source_tables": ["laboratory", "patient"]}, "evidence": "RF is normal refers to RF < 20; older than 60 = SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) > 60;"}
{"sample_id": 10683, "db_id": "thrombosis_prediction", "final": {"question": "How many patients with a normal RF don't have thrombosis?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND T1.Thrombosis = 0", "source_tables": ["examination", "laboratory"]}, "evidence": "normal RF refers to RF < 20; don't have thrombosis refers to Thrombosis = '0';"}
{"sample_id": 10684, "db_id": "thrombosis_prediction", "final": {"question": "How many patients with a normal level of complement 3 have a P pattern observed in the sheet of ANA examination?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C3 > 35 AND T1.'ANA Pattern' = 'P'", "source_tables": ["examination", "laboratory"]}, "evidence": "normal level of complement 3 refers to C3 > 35; have a P pattern observed in the sheet of ANA examination refers to ANA Pattern = 'P'; Should compute the number of distinct ones"}
{"sample_id": 10685, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients whose level of Hematoclit isn't normal, which patient has the highest anti-Cardiolipin antibody concentration? Please list his or her ID.", "sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 on T1.ID = T3.ID WHERE (T3.HCT >= 52 OR T3.HCT <= 29) ORDER BY T2.'aCL IgA' DESC LIMIT 1", "source_tables": ["examination", "laboratory", "patient"]}, "evidence": "Hematoclit is normal refers to 29 < N < 52; highest anti-Cardiolipin antibody concentration refers to MAX(`aCL IgA`);"}
{"sample_id": 10686, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients have blood clots in veins, how many of them have a normal level of complement 4?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C4 > 10 AND T1.Diagnosis = 'APS'", "source_tables": ["laboratory", "patient"]}, "evidence": "APS will result in Blood Clots in veins; normal level of complement 4 refers to C4 > 10; Should compute the number of different ones"}
{"sample_id": 10687, "db_id": "thrombosis_prediction", "final": {"question": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = 'negative' OR T2.RNP = '0' AND T1.Admission = '+'", "source_tables": ["laboratory", "patient"]}, "evidence": "normal level of anti-ribonuclear protein refers to RNP = '-', '+-'; And'-' means 'negative'; '+-' refers to '0'; admitted to the hospital refers to Admission = '+'; Should consider DISTINCT in the final result;"}
{"sample_id": 10688, "db_id": "thrombosis_prediction", "final": {"question": "Which is the youngest patient with an abnormal anti-ribonuclear protein level? Please list his or her date of birth.", "sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP != '-' OR '+-' ORDER BY T1.Birthday DESC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "youngest patient refers to MAX(Birthday); abnormal anti-ribonuclear protein level refers to RNP NOT IN('-', '+-'); date of birth refers to Birthday;"}
{"sample_id": 10689, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients with normal anti-SM, how many of them does not have thrombosis?", "sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative','0') AND T1.Thrombosis = 0", "source_tables": ["examination", "laboratory"]}, "evidence": "normal anti-SM refers to SM IN('-', '+-'); SM = 'negative' means '-'; SM = '0' means '+-'; SM = '1' means '+'; does not have thrombosis refers to Thrombosis = 0;"}
{"sample_id": 10690, "db_id": "thrombosis_prediction", "final": {"question": "For the patients with an abnormal anti-SM, please list the IDs of the three youngest ones.", "sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM NOT IN ('negative','0') ORDER BY T1.Birthday DESC LIMIT 3", "source_tables": ["laboratory", "patient"]}, "evidence": "abnormal anti-SM refers to SM NOT IN ('negative', '0'); youngest refers to MAX(Birthday);"}
{"sample_id": 10691, "db_id": "thrombosis_prediction", "final": {"question": "Please list the IDs of the patients who had the examination done after 1997/1/1 and had a normal anti-scl70.", "sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SC170 IN ('negative','0') AND T2.Date > 1997-01-01", "source_tables": ["laboratory", "patient"]}, "evidence": "examination done after 1997/1/1 refers to `Examination Date` >  1997-01-01; normal anti-scl70 refers to SC170 IN('negative','0');"}
{"sample_id": 10692, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = 'negative' OR T2.SC170 = '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL", "source_tables": ["examination", "laboratory", "patient"]}, "evidence": "normal anti-scl70 refers to SC170 IN('negative', '0'); female refers to Sex = 'F'; does not have any symptom refers to symptoms IS NULL; Should consider DISTINCT in the final result;"}
{"sample_id": 10693, "db_id": "thrombosis_prediction", "final": {"question": "How many patients with a normal anti-SSA came to the hospital before 2000?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('negative', '0') AND STRFTIME('%Y', T2.Date) < '2000'", "source_tables": ["laboratory", "patient"]}, "evidence": "normal anti-SSA refers to SSA IN('-','+-'); came to the hospital before 2000 refers to YEAR(`First Date`) < 2000; Should compute the number of distinct ones"}
{"sample_id": 10694, "db_id": "thrombosis_prediction", "final": {"question": "Which patient is the first patient with an abnormal anti-SSA to come to the hospital? Please give his or her ID.", "sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.'First Date' IS NOT NULL AND T2.SSA NOT IN ('negative', '0') ORDER BY T1.'First Date' ASC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "first patient refers to ID with MIN(`First Date`); abnormal anti-SSA refers to SSA NOT IN('negative', '0');"}
{"sample_id": 10695, "db_id": "thrombosis_prediction", "final": {"question": "How many patients have a normal anti-SSB and are diagnosed with SLE in the examination?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Diagnosis = 'SLE'", "source_tables": ["laboratory", "patient"]}, "evidence": "normal anti-SSB refers to SSB IN('-', '+-'); '-' is expressed as 'negative' and '+-' is expressed as '0' in the database ; diagnosed with SLE refers to Diagnosis = 'SLE'; Should compute the number of distinct ones"}
{"sample_id": 10696, "db_id": "thrombosis_prediction", "final": {"question": "For the patients whose anti-SSB are normal, how many of them have other symptoms observed in their examination?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Symptoms IS NOT NULL", "source_tables": ["examination", "laboratory"]}, "evidence": "anti-SSB are normal refers to SSB IN ('negative', '0'); have other symptoms refers to Symptoms IS NOT NULL; Should compute the number of distinct ones"}
{"sample_id": 10697, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('negative', '0') AND T2.SSB IN ('negative', '0') AND T1.SEX = 'M'", "source_tables": ["laboratory", "patient"]}, "evidence": "normal level of anti-centromere refers to CENTROMEA IN('-', '+-'); normal level of anti-SSB refers to SSB IN('-', '+-'); male refers to Sex = 'M'; Should consider DISTINCT in the final result;"}
{"sample_id": 10698, "db_id": "thrombosis_prediction", "final": {"question": "For the patients who have an abnormal level of anti-DNA, please list the diseases they are diagnosed with.", "sql": "SELECT DISTINCT(T1.Diagnosis) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA >= 8", "source_tables": ["laboratory", "patient"]}, "evidence": "abnormal level of anti-DNA refers to DNA > = 8; diseases refers to Diagnosis;"}
{"sample_id": 10699, "db_id": "thrombosis_prediction", "final": {"question": "How many patients have a normal anti-DNA level, yet their data are not recorded.", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA < 8 AND T1.Description IS NULL", "source_tables": ["laboratory", "patient"]}, "evidence": "normal anti-DNA level refers to DNA < 8; data are not recorded refers to Description IS NULL; Should compute the number of unique ones"}
{"sample_id": 10828, "db_id": "student_club", "final": {"question": "Among the budgets for Food, which one has the highest budgeted amount?", "sql": "SELECT budget_id FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget )", "source_tables": ["budget"]}, "evidence": "MAX(amount) where category = 'Food'"}
{"sample_id": 10829, "db_id": "student_club", "final": {"question": "Among the budgets for Advertising, list out top three which have the most budgeted amount?", "sql": "SELECT budget_id FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3", "source_tables": ["budget"]}, "evidence": "MAX(amount) where category = 'Advertisement'"}
{"sample_id": 10830, "db_id": "student_club", "final": {"question": "Calculate the total cost spent for Parking in the list.", "sql": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'", "source_tables": ["expense"]}, "evidence": "total cost spent for Parking refers to SUM(cost) where expense_description = 'Parking'"}
{"sample_id": 10831, "db_id": "student_club", "final": {"question": "Mention the total expense used on 8/20/2019.", "sql": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'", "source_tables": ["expense"]}, "evidence": "total expense refers SUM(cost) where expense_date = '2019-08-20'"}
{"sample_id": 10832, "db_id": "student_club", "final": {"question": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?", "sql": "SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'", "source_tables": ["expense", "member"]}, "evidence": "full name refers to first_name, last name"}
{"sample_id": 10833, "db_id": "student_club", "final": {"question": "State what kind of expenses that Sacha Harrison incurred?", "sql": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'", "source_tables": ["expense", "member"]}, "evidence": "kind of expenses refers to expense_description; Sacha Harrison is the full name; full name refers to first_name, last_name;"}
{"sample_id": 10834, "db_id": "student_club", "final": {"question": "What kind of expenses incurred by members who have X-Large in size of tee shirt?", "sql": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'", "source_tables": ["expense", "member"]}, "evidence": "kind of expenses refers to expense_description; t_shirt_size = 'X-Large'"}
{"sample_id": 10835, "db_id": "student_club", "final": {"question": "Mention the zip code of member who incurred less than 50USD.", "sql": "SELECT T1.zip FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost < 50", "source_tables": ["expense", "member"]}, "evidence": "incurred less than 50USD refers to cost < 50"}
{"sample_id": 10836, "db_id": "student_club", "final": {"question": "State the name of major that Phillip Cullen has joined.", "sql": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Phillip' AND T2.last_name = 'Cullen'", "source_tables": ["major", "member"]}, "evidence": "name of major refers to major_name"}
{"sample_id": 10837, "db_id": "student_club", "final": {"question": "List out the position of members who joined major of Business.", "sql": "SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business'", "source_tables": ["major", "member"]}, "evidence": "'Business' is the major name"}
{"sample_id": 10838, "db_id": "student_club", "final": {"question": "How many members of Business have the Medium size of tee shirt?", "sql": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business' AND T2.t_shirt_size = 'Medium'", "source_tables": ["major", "member"]}, "evidence": "members of Economics refers to major_name = 'Business'; t_shirt_size = 'Medium'"}
{"sample_id": 10839, "db_id": "student_club", "final": {"question": "List out the type of events which have remaining budget more than 30 USD.", "sql": "SELECT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 30", "source_tables": ["event", "budget"]}, "evidence": "remaining budget more than 30 USD refers to remaining > 30"}
{"sample_id": 10840, "db_id": "student_club", "final": {"question": "Mention the category of events which were held at MU 215.", "sql": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'", "source_tables": ["event", "budget"]}, "evidence": "held at MU 215 refers to location = 'MU 215'"}
{"sample_id": 10841, "db_id": "student_club", "final": {"question": "What is the category of event which was taken place in 2020-03-24T12:00:00?", "sql": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_date = '2020-03-24T12:00:00'", "source_tables": ["event", "budget"]}, "evidence": "taken place in 2020-03-24T12:00:00 refers to event_date = '2020-03-24T12:00:00'"}
{"sample_id": 10842, "db_id": "student_club", "final": {"question": "State the name of major that Vice President has joined.", "sql": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'", "source_tables": ["major", "member"]}, "evidence": "name of major refers to major_name; 'Vice President' is position of Student Club"}
{"sample_id": 10843, "db_id": "student_club", "final": {"question": "Calculate the percentage of members who are major Business in the list?", "sql": "SELECT CAST(SUM(CASE WHEN T2.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member'", "source_tables": ["major", "member"]}, "evidence": "DIVIDE(SUM(position = 'Member' and major_name = 'Business'), COUNT(member_id)) * 100"}
{"sample_id": 10844, "db_id": "student_club", "final": {"question": "State the category of events were held at MU 215.", "sql": "SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'", "source_tables": ["event", "budget"]}, "evidence": "'MU 215' is the location of event; "}
{"sample_id": 10845, "db_id": "student_club", "final": {"question": "How many income are received with an amount of 50?", "sql": "SELECT COUNT(income_id) FROM income WHERE amount = 50", "source_tables": ["income"]}, "evidence": "amount of 50 refers to amount = 50"}
{"sample_id": 10846, "db_id": "student_club", "final": {"question": "Among the members, how many of them have an extra large t-shirt size?", "sql": "SELECT COUNT(member_id) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'", "source_tables": ["member"]}, "evidence": "among the members refers to position = 'Member'; extra large t-shirt size refers to t_shirt_size = 'X-Large'"}
{"sample_id": 10847, "db_id": "student_club", "final": {"question": "In the College of Agriculture and Applied Sciences, how many majors are under the department of School of Applied Sciences, Technology and Education?", "sql": "SELECT COUNT(major_id) FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences'", "source_tables": ["major"]}, "evidence": ""}
{"sample_id": 10848, "db_id": "student_club", "final": {"question": "List the last name of members with a major in environmental engineering and include its department and college name.", "sql": "SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'", "source_tables": ["major", "member"]}, "evidence": "'Environmental Engineering' is the major_name;"}
{"sample_id": 10849, "db_id": "student_club", "final": {"question": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?", "sql": "SELECT DISTINCT T2.category, T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker'", "source_tables": ["event", "budget"]}, "evidence": "budget category refers to category; events located at refers to location; type = 'Guest Speaker'; 0 budget spent refers to spent = 0; "}
{"sample_id": 10850, "db_id": "student_club", "final": {"question": "List the city and state of members enrolled under electrical and computer engineering department.", "sql": "SELECT city, state FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN zip_code AS T3 ON T3.zip_code = T1.zip WHERE department = 'Electrical and Computer Engineering Department' AND position = 'Member'", "source_tables": ["major", "zip_code", "member"]}, "evidence": "'Electrical and Computer Engineering Department' is the department; members enrolled refers to position = 'Member'"}
{"sample_id": 10851, "db_id": "student_club", "final": {"question": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.?", "sql": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'", "source_tables": ["attendance", "event", "member"]}, "evidence": "name of social event refers to event_name where type = 'Social'; 'Vice President' is position; located at refers to location"}
{"sample_id": 10852, "db_id": "student_club", "final": {"question": "What is the last name and position of the student that bought pizza on 09/10/2019?", "sql": "SELECT T1.last_name, T1.position FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_date = '2019-09-10' AND T2.expense_description = 'Pizza'", "source_tables": ["expense", "member"]}, "evidence": "bought pizza on 09/10/2019 refers to expense_description = 'Pizza' where expense_date = '2019-09-10'"}
{"sample_id": 10853, "db_id": "student_club", "final": {"question": "List the last name of the members of the club that attended the women's soccer event.", "sql": "SELECT T3.last_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women''s Soccer' AND T3.position = 'Member'", "source_tables": ["attendance", "event", "member"]}, "evidence": "members of the club refers to position = 'Member'; 'Women's Soccer' is event name;"}
{"sample_id": 10854, "db_id": "student_club", "final": {"question": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?", "sql": "SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.income_id) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member' AND T1.t_shirt_size = 'Medium'", "source_tables": ["income", "member"]}, "evidence": "t_shirt_size = 'Medium' where position = 'Member'; percentage = DIVIDE(COUNT(amount = 50), COUNT(member_id)) * 100"}
{"sample_id": 10855, "db_id": "student_club", "final": {"question": "Which countries have zip codes with post office boxes?", "sql": "SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box' AND county IS NOT NULL", "source_tables": ["zip_code"]}, "evidence": "zip codes that have post office boxes refers to type = 'PO Box'"}
{"sample_id": 10856, "db_id": "student_club", "final": {"question": "What are the zip codes that have post office boxes in the country of the country of San Juan Municipio whose state is Puerto Rico?", "sql": "SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico'", "source_tables": ["zip_code"]}, "evidence": "zip codes that have post office boxes refers to type = 'PO Box'"}
{"sample_id": 10857, "db_id": "student_club", "final": {"question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.", "sql": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'", "source_tables": ["event"]}, "evidence": "name of events refers event_name; game event that was closed refers to type = 'Game' where status = 'Closed'; event_date BETWEEN '2019-03-15' and '2020-03-20'; "}
{"sample_id": 10858, "db_id": "student_club", "final": {"question": "Please provide links to events for members who have paid more than 50 dollar.", "sql": "SELECT DISTINCT T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T1.cost > 50", "source_tables": ["attendance", "expense", "member"]}, "evidence": "have paid more than 50 dollar refers to cost > 50"}
{"sample_id": 10930, "db_id": "debit_card_specializing", "final": {"question": "How many transactions taken place in the gas station in the Czech Republic are with a price of over 1000?", "sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000", "source_tables": ["gasstations", "transactions_1k"]}, "evidence": "Gas station in the Czech Republic implies that Country = 'CZE'"}
{"sample_id": 10931, "db_id": "debit_card_specializing", "final": {"question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?", "sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND STRFTIME('%Y', T1.Date) >= '2012'", "source_tables": ["gasstations", "transactions_1k"]}, "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'"}
{"sample_id": 10932, "db_id": "debit_card_specializing", "final": {"question": "What is the average total price of the transactions taken place in gas stations in the Czech Republic?", "sql": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'", "source_tables": ["gasstations", "transactions_1k"]}, "evidence": "Gas station in the Czech Republic implies that Country = 'CZE'"}
{"sample_id": 10933, "db_id": "debit_card_specializing", "final": {"question": "For the customers who paid in the euro, what is their average total price of the transactions?", "sql": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR'", "source_tables": ["customers", "gasstations", "transactions_1k"]}, "evidence": ""}
{"sample_id": 10934, "db_id": "debit_card_specializing", "final": {"question": "Which customer paid the most in 2012/8/25?", "sql": "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1", "source_tables": ["transactions_1k"]}, "evidence": "'2012/8/25' can be represented by '2012-08-25'"}
{"sample_id": 10935, "db_id": "debit_card_specializing", "final": {"question": "Which country's gas station had the first paid cusomer in 2012/8/25?", "sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' ORDER BY T1.Time DESC LIMIT 1", "source_tables": ["gasstations", "transactions_1k"]}, "evidence": "'2012/8/25' can be represented by '2012-08-25'"}
{"sample_id": 10936, "db_id": "debit_card_specializing", "final": {"question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?", "sql": "SELECT DISTINCT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'", "source_tables": ["customers", "gasstations", "transactions_1k"]}, "evidence": "'2012/8/24' can be represented by '2012-08-24'; "}
{"sample_id": 10937, "db_id": "debit_card_specializing", "final": {"question": "What segment did the customer have at 2012/8/23 21:20:00?", "sql": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'", "source_tables": ["customers", "transactions_1k"]}, "evidence": "'2012/8/23' can be represented by '2012-08-23'"}
{"sample_id": 10938, "db_id": "debit_card_specializing", "final": {"question": "How many transactions were paid in CZK in the morning of 2012/8/26?", "sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-26' AND T1.Time < '13:00:00' AND T2.Currency = 'CZK'", "source_tables": ["customers", "transactions_1k"]}, "evidence": "'2012/8/26' can be represented by '2012-08-26'; The morning refers to the time before '13:00:00'"}
{"sample_id": 10939, "db_id": "debit_card_specializing", "final": {"question": "For the earliest customer, what segment did he/she have?", "sql": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY Date ASC LIMIT 1", "source_tables": ["customers", "transactions_1k"]}, "evidence": ""}
{"sample_id": 10940, "db_id": "debit_card_specializing", "final": {"question": "For the deal happened at 2012/8/24 12:42:00, which country was it?", "sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'", "source_tables": ["gasstations", "transactions_1k"]}, "evidence": "'2012/8/24 12:42:00' can refer to date = '2012-08-24' AND T1.time = '12:42:00' in the database"}
{"sample_id": 10941, "db_id": "debit_card_specializing", "final": {"question": "What was the product id of the transaction happened at 2012/8/23 21:20:00?", "sql": "SELECT T1.ProductID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'", "source_tables": ["gasstations", "transactions_1k"]}, "evidence": "'2012/8/23 21:20:00' can refer to date = '2012-08-23' AND T1.time = '21:20:00' in the database"}
{"sample_id": 133, "db_id": "movie_platform", "final": {"question": "Which 1988 movie got the most ratings?", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year = 1988 ORDER BY T1.rating_score DESC LIMIT 1", "source_tables": ["ratings", "movies"]}, "evidence": "1988 movie refers to movie_release_year = '1998'; most ratings refers to MAX(rating_score)"}
{"sample_id": 134, "db_id": "movie_platform", "final": {"question": "For all the movies that were released in 1995, how many lower than 3 ratings did the most popularity movie had?", "sql": "SELECT COUNT(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score < 3 AND T2.movie_release_year = 1995 AND T2.movie_popularity = ( SELECT MAX(movie_popularity) FROM movies WHERE movie_release_year = 1995 )", "source_tables": ["ratings", "movies"]}, "evidence": "released in 1995 refers to movie_release_year = '1995'; lower than 3 ratings refers to rating_score <3; most popularity movie refers to MAX(movie_popularity)"}
{"sample_id": 135, "db_id": "movie_platform", "final": {"question": "What is the percentage of users gave \"5\" to the movie \"Go Go Tales\"?", "sql": "SELECT CAST(SUM(CASE WHEN T1.rating_score = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Go Go Tales'", "source_tables": ["ratings", "movies"]}, "evidence": "movie \"Go Go Tales\" refers to movie_title = 'Go Go Tales'; gave \"5\" refers to rating_score = 5; percentage refers to DIVIDE(COUNT(rating_score = 5),COUNT(rating_score))*100"}
{"sample_id": 136, "db_id": "movie_platform", "final": {"question": "Give the percentage of subscribers who rated who rated the movie \"G.I. Jane\".", "sql": "SELECT CAST(SUM(CASE WHEN T3.user_subscriber = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists_users AS T3 ON T1.user_id = T3.user_id WHERE T2.movie_title = 'G.I. Jane'", "source_tables": ["ratings", "movies", "lists_users"]}, "evidence": "movie \"G.I. Jane\" refers to movie_title = 'G.I. Jane'; subscribers refers to user_subscriber = 1; percentage refers to DIVIDE(COUNT(user_subscriber = 1),COUNT(user_subscriber))*100"}
{"sample_id": 137, "db_id": "movie_platform", "final": {"question": "For all the users who gave \"A Shot in the Dark\" a rating, how many percent of them is a paying subscriber?", "sql": "SELECT CAST(SUM(CASE WHEN T1.user_has_payment_method = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists_users AS T3 ON T1.user_id = T3.user_id WHERE T2.movie_title = 'A Shot in the Dark'", "source_tables": ["ratings", "movies", "lists_users"]}, "evidence": "\"A Shot in the Dark\" refers to movie_title = 'A Shot in the Dark'; paying subscriber refers to user_has_payment_method = 1; percentage refers to DIVIDE(COUNT(user_has_payment_method = 1),COUNT(user_has_payment_method))*100"}
{"sample_id": 138, "db_id": "movie_platform", "final": {"question": "Name all the list titles created by user 4208563.", "sql": "SELECT list_title FROM lists WHERE user_id LIKE 4208563", "source_tables": ["lists"]}, "evidence": "user 4208563 refers to user_id = 4208563"}
{"sample_id": 139, "db_id": "movie_platform", "final": {"question": "Among the lists created in 2016, which is the list that was updated most recently.", "sql": "SELECT list_title FROM lists WHERE strftime('%Y', list_update_timestamp_utc) = '2016' ORDER BY list_update_timestamp_utc DESC LIMIT 1", "source_tables": ["lists"]}, "evidence": "created in 2016 refers to list_creation_timestamp_utc like '2016%'; updated most recently refers to MAX(list_update_timestamp_utc)"}
{"sample_id": 140, "db_id": "movie_platform", "final": {"question": "What is the percentage of list created by user who was a subscriber when he created the list?", "sql": "SELECT CAST(SUM(CASE WHEN user_subscriber = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(list_id) FROM lists_users", "source_tables": ["lists_users"]}, "evidence": "was a subscriber refers to user_subscriber = 1; percentage refers to DIVIDE(COUNT(user_subscriber = 1),COUNT(list_id))"}
{"sample_id": 141, "db_id": "movie_platform", "final": {"question": "Name all lists created by a user who was a subcriber when created the list.", "sql": "SELECT DISTINCT T2.list_id FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T1.user_subscriber = 1", "source_tables": ["lists", "lists_users"]}, "evidence": "was a subscriber refers to user_subscriber = 1"}
{"sample_id": 142, "db_id": "movie_platform", "final": {"question": "Provide list titles created by user who are eligible for trial when he created the list.", "sql": "SELECT DISTINCT T2.list_title FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T1.user_eligible_for_trial = 1", "source_tables": ["lists", "lists_users"]}, "evidence": "eligible for trial refers to user_eligible_for_trial = 1"}
{"sample_id": 143, "db_id": "movie_platform", "final": {"question": "Among the lists with at least one follower, how many were created by user who was subscriber when created the list?", "sql": "SELECT COUNT(T1.list_id) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_followers >= 1 AND T1.user_subscriber = 1", "source_tables": ["lists", "lists_users"]}, "evidence": "lists with at least one follower refers to list_followers > = 1; was a subscriber refers to user_subscriber = 1"}
{"sample_id": 144, "db_id": "movie_platform", "final": {"question": "For all list titles with at least 200 movies in the list, what is their average number of followers?", "sql": "SELECT AVG(list_followers) FROM lists WHERE list_movie_number > 200", "source_tables": ["lists"]}, "evidence": "at least 200 movies in the list refers to list_movie_number > 200; average number of followers refers to avg(list_followers)"}
{"sample_id": 145, "db_id": "movie_platform", "final": {"question": "List all the titles created by user who was a subsriber when he created the list and have less than 50 movies in the list.", "sql": "SELECT DISTINCT T2.list_title FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_movie_number < 50 AND T1.user_subscriber = 1", "source_tables": ["lists", "lists_users"]}, "evidence": "have less than 50 movies in the list refers to list_movie_number <50; was a subscriber refers to user_subscriber = 1"}
{"sample_id": 146, "db_id": "movie_platform", "final": {"question": "Which title list has not been updated for the longest period of time? State how long it has not been updated?", "sql": "SELECT list_title , datetime(CURRENT_TIMESTAMP, 'localtime') - datetime(list_update_timestamp_utc) FROM lists ORDER BY list_update_timestamp_utc LIMIT 1", "source_tables": ["lists"]}, "evidence": "not been updated for the longest period of time refers to MIN(list_update_timestamp_utc); how long it has not been updated refers to SUBTRACT(CURRENT_TIMESTAMP, list_update_timestamp_utc)"}
{"sample_id": 147, "db_id": "movie_platform", "final": {"question": "Who is the user who created the list titled 'Sound and Vision'? Was he a subcriber when he created the list?", "sql": "SELECT T1.user_id, T1.user_subscriber FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_title LIKE 'Sound and Vision'", "source_tables": ["lists", "lists_users"]}, "evidence": "list titled 'Sound and Vision' refers to list_title = 'Sound and Vision'; user_subscriber = 1 means the user was a subscriber when he rated the movie; user_subscriber = 0 means the user was not a subscriber when he rated the movie\n\n\n\n"}
{"sample_id": 148, "db_id": "movie_platform", "final": {"question": "For the list with more than 200 followers, state the title and how long the list has been created?", "sql": "SELECT list_title , 365 * (strftime('%Y', 'now') - strftime('%Y', list_creation_timestamp_utc)) + 30 * (strftime('%m', 'now') - strftime('%m', list_creation_timestamp_utc)) + strftime('%d', 'now') - strftime('%d', list_creation_timestamp_utc) FROM lists WHERE list_followers > 200", "source_tables": ["lists"]}, "evidence": "more than 200 followers refers to list_followers >200; how long the list has been created refers to SUBTRACT(CURRENT_TIMESTAMP,list_creation_timestamp_utc)"}
{"sample_id": 149, "db_id": "movie_platform", "final": {"question": "Among all movies in the list, calculate the percentage of movies that were never been rated?", "sql": "SELECT CAST(SUM(CASE WHEN T2.movie_id IS NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.movie_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id", "source_tables": ["ratings", "movies"]}, "evidence": "percentage of movies that were never been rated refers to DIVIDE(COUNT(main_movies.movie_id ! = main_ratings.movie_id),COUNT(movie_id))"}
{"sample_id": 150, "db_id": "movie_platform", "final": {"question": "List all movies rated by user 39115684. State the title, rating date and rating score.", "sql": "SELECT T2.movie_title, T1.rating_timestamp_utc, T1.rating_score FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 39115684", "source_tables": ["ratings", "movies"]}, "evidence": "user 39115684 refers to user_id = 39115684; title refers to movie_title; rating date refers to rating_timestamp_utc\n"}
{"sample_id": 151, "db_id": "movie_platform", "final": {"question": "Between 1970 to 1980, how many movies with a popularity of more than 11,000 were released?", "sql": "SELECT COUNT(movie_id) FROM movies WHERE movie_release_year BETWEEN '1970' AND '1980' AND movie_popularity > 11000", "source_tables": ["movies"]}, "evidence": "Between 1970 to 1980 refers to movie_release_year between 1970 and 1980; popularity of more than 11,000 refers movie_popularity >11000"}
{"sample_id": 152, "db_id": "movie_platform", "final": {"question": "How many movies directed by Felipe Cazals was realeased on 1976?", "sql": "SELECT COUNT(movie_id) FROM movies WHERE movie_release_year = 1976 AND director_name LIKE 'Felipe Cazals'", "source_tables": ["movies"]}, "evidence": "directed by Felipe Cazals refers to director_name = 'Felipe Cazals' ; realeased on 1976 refers to movie_release_year = 1976"}
{"sample_id": 153, "db_id": "movie_platform", "final": {"question": "What is the URL to the movie director page on Mubi of the movie titled \"Red Blooded American Girl\"", "sql": "SELECT director_url FROM movies WHERE movie_title LIKE 'Red Blooded American Girl'", "source_tables": ["movies"]}, "evidence": "movie titled \"Red Blooded American Girl\" refers to movie_title = 'Red Blooded American Girl'"}
{"sample_id": 154, "db_id": "movie_platform", "final": {"question": "What is the name of the list that was updated most recently?", "sql": "SELECT list_title FROM lists WHERE list_update_timestamp_utc = ( SELECT list_update_timestamp_utc FROM lists ORDER BY list_update_timestamp_utc DESC LIMIT 1 )", "source_tables": ["lists"]}, "evidence": "updated most recently refers to MAX(list_update_date_utc)"}
{"sample_id": 155, "db_id": "movie_platform", "final": {"question": "Who created the list that has 142 comments? Indicate the user id of the user, if there are multiple lists with 142 comments, list the user id of the person who created the list", "sql": "SELECT user_id FROM lists WHERE list_comments = 142", "source_tables": ["lists"]}, "evidence": "list that has 142 comments refers to list_comments = 142"}
{"sample_id": 156, "db_id": "movie_platform", "final": {"question": "What is Jeannot Szwarc's most popular movie and what is its average rating score?", "sql": "SELECT T2.movie_title, AVG(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.director_name = 'Jeannot Szwarc' ORDER BY T2.movie_popularity DESC LIMIT 1", "source_tables": ["ratings", "movies"]}, "evidence": "Jeannot Szwarc's refers to director_name = 'Jeannot Szwarc'; most popular movie refers to MAX(movie_popularity); average rating score refers to avg(rating_score)"}
{"sample_id": 157, "db_id": "movie_platform", "final": {"question": "Who is the director that directed the highest number of movies in the 70s? If there are multiple directors with the same amount of movies, list all of their names and indicate the highest rating score that those movies got from the users.", "sql": "SELECT T2.director_name, T1.rating_score FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year BETWEEN 1970 AND 1979 GROUP BY T2.director_id ORDER BY COUNT(T2.movie_id) DESC LIMIT 1", "source_tables": ["ratings", "movies"]}, "evidence": "highest number of movies COUNT(T1.movie_id); in the 70s refers to movie_release_year between 1970 and 1979"}
{"sample_id": 158, "db_id": "movie_platform", "final": {"question": "Between 1/1/2010 to 12/31/2020, how many users, who were a trialist when they created the list, gave the movie \"The Secret Life of Words\" a rating score of 3?", "sql": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'The Secret Life of Words' AND T1.rating_score = 3 AND T1.user_trialist = 0 AND T1.rating_timestamp_utc BETWEEN '2010%' AND '2020%'", "source_tables": ["ratings", "movies"]}, "evidence": "Between 1/1/2010 to 12/31/2020 refers to rating_timestamp_utc between '2010-01-01%' and '2020-12-31%'; a trialist refers to user_trialist = 1; movie \"The Secret Life of Words\" refers to movie_title = 'The Secret Life of Words'; rating score of 3 refers to rating_score = 3"}
{"sample_id": 159, "db_id": "movie_platform", "final": {"question": "What is the name of the movie whose critic received the highest amount of likes? Indicate the URL to the rating on Mubi.", "sql": "SELECT T2.movie_title, T1.rating_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.critic_likes DESC LIMIT 1", "source_tables": ["ratings", "movies"]}, "evidence": "critic received the highest amount of likes refers to MAX(critic_likes);"}
{"sample_id": 160, "db_id": "movie_platform", "final": {"question": "What are the top 5 most popular movies of the 21st century? Indicate how many users gave it a rating score of 5.", "sql": "SELECT DISTINCT T2.movie_id, SUM(T1.rating_score = 5) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T2.movie_popularity DESC LIMIT 5", "source_tables": ["ratings", "movies"]}, "evidence": "most popular movies refers to MAX(movie_popularity); rating score of 5 refers to rating_score = 5; movies of the 21st century refers to movie_release_year> = 2000"}
{"sample_id": 161, "db_id": "movie_platform", "final": {"question": "What is the average number of followers of the lists created by the user who rated the movie \"Pavee Lackeen: The Traveller Girl\" on 3/27/2011 at 2:06:34 AM?", "sql": "SELECT CAST(SUM(T4.list_followers) AS REAL) / COUNT(T2.list_id) FROM ratings AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id INNER JOIN movies AS T3 ON T1.movie_id = T3.movie_id INNER JOIN lists AS T4 ON T2.list_id = T4.list_id WHERE T3.movie_title LIKE 'Pavee Lackeen: The Traveller Girl' AND T1.rating_timestamp_utc LIKE '2011-03-27 02:06:34'", "source_tables": ["lists", "ratings", "movies", "lists_users"]}, "evidence": "average number of followers refers to AVG(list_followers); movie \"Pavee Lackeen: The Traveller Girl\" refers to movie_title = 'Pavee Lackeen: The Traveller Girl'; on 3/27/2011 at 2:06:34 AM refers to rating_timestamp_utc = '2011-03-27 02:06:34'"}
{"sample_id": 162, "db_id": "movie_platform", "final": {"question": "Between 1/1/2017 to 12/31/2017, how many users who were eligible for trial when they rated the movie \"Patti Smith: Dream of Life\"and what is the image URL to the movie on Mubi?", "sql": "SELECT COUNT(T1.user_id), T2.movie_image_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE datetime(T1.rating_timestamp_utc) BETWEEN '2017-01-01 00:00:00' AND '2017-12-31 00:00:00'", "source_tables": ["ratings", "movies"]}, "evidence": "Between 1/1/2017 to 12/31/2017 refers to rating_timestamp_utc between '2017-01-01 00:00:00' and '2017-12-31 00:00:00'; eligible for trial refers to user_eligible_for_trial = 1; movie \"Patti Smith: Dream of Life\" refers to movie_title = 'Patti Smith: Dream of Life'"}
{"sample_id": 163, "db_id": "movie_platform", "final": {"question": "What is the average number of number of movies added to the lists of user 8516503? Indicate how many movies did he/she give a rating score of 5.", "sql": "SELECT AVG(T3.list_movie_number) , SUM(CASE WHEN T1.rating_score = 5 THEN 1 ELSE 0 END) FROM ratings AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id INNER JOIN lists AS T3 ON T2.user_id = T3.user_id WHERE T1.user_id = 8516503", "source_tables": ["lists", "ratings", "lists_users"]}, "evidence": "average number of number of movies refers to AVG(list_movie_number); user 8516503 refers to user_id = 8516503; rating score of 5 refers to rating_score = 5"}
{"sample_id": 164, "db_id": "movie_platform", "final": {"question": "Who is the director of the most popular movie of all time and when was it released? Indicate the average rating score of the users who were on a trialist when they rated the movie.", "sql": "SELECT T1.director_name, T1.movie_release_year , SUM(T2.rating_score) / COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_trialist = 1 ORDER BY T1.movie_popularity DESC LIMIT 1", "source_tables": ["ratings", "movies"]}, "evidence": "most popular movie of all time refers to MAX(movie_popularity); a trialist refers to user_trialist = 1; average rating score = AVG(rating_score)"}
{"sample_id": 165, "db_id": "movie_platform", "final": {"question": "What is the name of the movie that was rated recently by user 57756708?", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 57756708 ORDER BY T1.rating_timestamp_utc DESC LIMIT 1", "source_tables": ["ratings", "movies"]}, "evidence": "user 57756708 refers to user_id = 57756708; rated recently refers to MAX(rating_timestamp_utc)"}
{"sample_id": 166, "db_id": "movie_platform", "final": {"question": "What are the top 10 oldest movies and what are the average rating score for each movie? Indicate the name of the director and when the movies were released.", "sql": "SELECT T2.movie_id, AVG(T1.rating_score), T2.director_name, T2.movie_release_year FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.rating_timestamp_utc ASC LIMIT 10", "source_tables": ["ratings", "movies"]}, "evidence": "the average rating score refers to AVG(T2.rating_score); oldest movies refers to MIN(rating_timestamp_utc)"}
{"sample_id": 224, "db_id": "book_publishing_company", "final": {"question": "Tell me about the information of the French publisher.", "sql": "SELECT T1.pr_info FROM pub_info AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.country = 'France'", "source_tables": ["pub_info", "publishers"]}, "evidence": "French publisher means publisher in France where country = 'France'"}
{"sample_id": 225, "db_id": "book_publishing_company", "final": {"question": "What's the publisher of the book \"Silicon Valley Gastronomic Treats\"? Give the publisher's name.", "sql": "SELECT T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.title = 'Silicon Valley Gastronomic Treats'", "source_tables": ["titles", "publishers"]}, "evidence": "publisher name refers to pub_name; Silicon Valley Gastronomic Treats is the title of a book"}
{"sample_id": 226, "db_id": "book_publishing_company", "final": {"question": "Which city did Victoria P Ashworth work in?", "sql": "SELECT T2.city FROM employee AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.fname = 'Victoria' AND T1.minit = 'P' AND T1.lname = 'Ashworth'", "source_tables": ["employee", "publishers"]}, "evidence": ""}
{"sample_id": 227, "db_id": "book_publishing_company", "final": {"question": "How many sales did the store in Remulade make?", "sql": "SELECT COUNT(T1.ord_num) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id WHERE T2.city = 'Remulade'", "source_tables": ["sales", "stores"]}, "evidence": "Remulade is a city; sales in the store refers to ord_num"}
{"sample_id": 228, "db_id": "book_publishing_company", "final": {"question": "For the quantities, what percent more did the store in Fremont sell than the store in Portland in 1993?", "sql": "SELECT CAST(SUM(CASE WHEN T2.city = 'Fremont' THEN qty END) - SUM(CASE WHEN T2.city = 'Portland' THEN qty END) AS REAL) * 100 / SUM(CASE WHEN T2.city = 'Fremont' THEN qty END) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id WHERE STRFTIME('%Y', T1.ord_date) = '1993'", "source_tables": ["sales", "stores"]}, "evidence": "qty is abbreviation for quantity; Fremont and Portland are name of city; sell in 1993 refers to YEAR(ord_date) = 1993; percentage = DIVIDE(\nSUBTRACT(SUM(qty where city = \u2018Fremont\u2019 and year(ord_date = 1993)), \nSUM(qty where city = \u2018Portland\u2019 and year(ord_date = 1993))), SUM(qty where city = \u2018Fremont\u2019 and year(ord_date = 1993)) *100"}
{"sample_id": 229, "db_id": "book_publishing_company", "final": {"question": "Among all the employees, how many percent more for the publishers than designers?", "sql": "SELECT CAST(SUM(CASE WHEN T2.job_desc = 'publisher' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.job_desc = 'designer' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.job_id) FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id", "source_tables": ["employee", "jobs"]}, "evidence": "publisher and designer are job descriptions which refers to job_desc; percentage more = 100*(SUBTRACT(SUM(CASE WHERE job_desc = 'publisher), SUM(CASE WHERE job_desc = 'designer'))"}
{"sample_id": 230, "db_id": "book_publishing_company", "final": {"question": "Find and list the full name of employees who were hired between 1990 and 1995. Also, arrange them in the descending order of job level.", "sql": "SELECT fname, minit, lname FROM employee WHERE STRFTIME('%Y', hire_date) BETWEEN '1990' AND '1995' ORDER BY job_lvl DESC", "source_tables": ["employee"]}, "evidence": "job level refers to job_lvl; YEAR(hire_date) between 1990 and 1995"}
{"sample_id": 231, "db_id": "book_publishing_company", "final": {"question": "Which titles has above average royalty rate? Give those title's name, type and price?", "sql": "SELECT DISTINCT T1.title, T1.type, T1.price FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.royalty > ( SELECT CAST(SUM(royalty) AS REAL) / COUNT(title_id) FROM roysched )", "source_tables": ["roysched", "titles"]}, "evidence": "average royalty rate = DIVIDE(SUM(royalty), COUNT(title_id))"}
{"sample_id": 232, "db_id": "book_publishing_company", "final": {"question": "In 1994 which title had less order quanty than the average order quantity? Find the title name, type and price.", "sql": "SELECT DISTINCT T1.title, T1.type, T1.price FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE T2.ord_date LIKE '1994%' AND T2.Qty < ( SELECT CAST(SUM(T4.qty) AS REAL) / COUNT(T3.title_id) FROM titles AS T3 INNER JOIN sales AS T4 ON T3.title_id = T4.title_id )", "source_tables": ["sales", "titles"]}, "evidence": "orders in 1994 refers to YEAR(ord_date) = 1994; order quantity refers to number of order expressed by ord_num; average order quantity = DIVIDE(SUM(ord_num), COUNT(title_id))"}
{"sample_id": 233, "db_id": "book_publishing_company", "final": {"question": "List the title name, type, and price of the titles published by New Moon Books. Arrange the list in ascending order of price.", "sql": "SELECT T1.title, T1.type, T1.price FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.pub_name = 'New Moon Books' ORDER BY T1.price", "source_tables": ["titles", "publishers"]}, "evidence": "Eric the Read Books is a publisher which refers to pub_name;"}
{"sample_id": 234, "db_id": "book_publishing_company", "final": {"question": "In the books published by US publishers, which book has the highest royalty? List these books in the descending order of royalty.", "sql": "SELECT T1.title FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id INNER JOIN roysched AS T3 ON T1.title_id = T3.title_id WHERE T2.country = 'USA' ORDER BY T1.royalty DESC", "source_tables": ["roysched", "titles", "publishers"]}, "evidence": "US publisher refers publisher in the US where country = 'USA';"}
{"sample_id": 235, "db_id": "book_publishing_company", "final": {"question": "Find the difference between the average royalty of titles published by US and non US publishers?", "sql": "SELECT (CAST(SUM(CASE WHEN T2.country = 'USA' THEN T1.royalty ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.country = 'USA' THEN 1 ELSE 0 END)) - (CAST(SUM(CASE WHEN T2.country != 'USA' THEN T1.royalty ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.country != 'USA' THEN 1 ELSE 0 END)) FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id INNER JOIN roysched AS T3 ON T1.title_id = T3.title_id", "source_tables": ["roysched", "titles", "publishers"]}, "evidence": "US publisher refers publisher in the US where country = 'USA'; non-US publishers refers publisher not in the US where country! = 'USA'; difference = SUBTRACT(AVG(royalty) where country = 'USA', AVG(royalty) where country! = 'USA'))"}
{"sample_id": 236, "db_id": "book_publishing_company", "final": {"question": "Calculate the average level difference between the Marketing editors hired by the US and non-US publishers?", "sql": "SELECT (CAST(SUM(CASE WHEN T1.country = 'USA' THEN job_lvl ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.country = 'USA' THEN 1 ELSE 0 END)) - (CAST(SUM(CASE WHEN T1.country != 'USA' THEN job_lvl ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.country != 'USA' THEN 1 ELSE 0 END)) FROM publishers AS T1 INNER JOIN employee AS T2 ON T1.pub_id = T2.pub_id INNER JOIN jobs AS T3 ON T2.job_id = T3.job_id WHERE T3.job_desc = 'Managing Editor'", "source_tables": ["employee", "jobs", "publishers"]}, "evidence": "Marketing manager is a job description which refers to job_desc; US publisher refers publisher in the US where country = 'USA'; non-US publishers refers publisher not in the US where country! = 'USA'; job level refers to job_lvl; average level = AVG(job_lvl)"}
{"sample_id": 237, "db_id": "book_publishing_company", "final": {"question": "Which title is about helpful hints on how to use your electronic resources, which publisher published it and what is the price of this book?", "sql": "SELECT T1.title, T2.pub_name, T1.price FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.notes = 'Helpful hints on how to use your electronic resources to the best advantage.'", "source_tables": ["titles", "publishers"]}, "evidence": "publisher refers to pub_name; about the title refers to notes"}
{"sample_id": 238, "db_id": "book_publishing_company", "final": {"question": "Of the titles, which title is about the Carefully researched study of the effects of strong emotions on the body, which state-based publisher published this book, and what is the year-to-date sale?", "sql": "SELECT T1.title, T2.pub_name, T1.ytd_sales FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.notes = 'Carefully researched study of the effects of strong emotions on the body. Metabolic charts included.'", "source_tables": ["titles", "publishers"]}, "evidence": "year to date sales refers to ytd_sales; about the title refers to notes"}
{"sample_id": 239, "db_id": "book_publishing_company", "final": {"question": "Name the top five titles that sold more than average and list them in descending order of the number of sales in California stores?", "sql": "SELECT T1.title FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id INNER JOIN publishers AS T3 ON T1.pub_id = T3.pub_id WHERE T2.qty > ( SELECT CAST(SUM(qty) AS REAL) / COUNT(title_id) FROM sales ) AND T3.state = 'CA' ORDER BY T2.qty DESC LIMIT 5", "source_tables": ["sales", "titles", "publishers"]}, "evidence": "qty is abbreviation for quantity; sold more than average refers to qty > AVG(qty); california refers to state = 'CA\""}
{"sample_id": 373, "db_id": "retail_complains", "final": {"question": "List the full names and phone numbers of clients that were from the Pacific.", "sql": "SELECT T1.first, T1.middle, T1.last, T1.phone FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'Pacific'", "source_tables": ["district", "client"]}, "evidence": "full name refers to first, middle, last; the Pacific refers to division = 'Pacific'"}
{"sample_id": 374, "db_id": "retail_complains", "final": {"question": "What is the social number of the client who has the longest delay in his/her complaint? Calculate the days of delay and state the company's response to the consumer.", "sql": "SELECT T1.social , 365 * (strftime('%Y', T2.'Date sent to company') - strftime('%Y', T2.'Date received')) + 30 * (strftime('%M', T2.'Date sent to company') - strftime('%M', T2.'Date received')) + (strftime('%d', T2.'Date sent to company') - strftime('%d', T2.'Date received')), T2.'Company response to consumer' FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID ORDER BY 365 * (strftime('%Y', T2.'Date sent to company') - strftime('%Y', T2.'Date received')) + 30 * (strftime('%M', T2.'Date sent to company') - strftime('%M', T2.'Date received')) + (strftime('%d', T2.'Date sent to company') - strftime('%d', T2.'Date received')) DESC LIMIT 1", "source_tables": ["events", "client"]}, "evidence": "social number refers to social; longest delay = max(subtract(Date sent to company, Date received)); days of delay = subtract(Date sent to company, Date received); company's response refers to 'Company response to consumer'"}
{"sample_id": 375, "db_id": "retail_complains", "final": {"question": "How many female clients are there older than 30?", "sql": "SELECT COUNT(sex) FROM client WHERE sex = 'Female' AND age > 30", "source_tables": ["client"]}, "evidence": "female refers to sex = 'Female'; older than 30 refers to age > 30"}
{"sample_id": 376, "db_id": "retail_complains", "final": {"question": "Please list all first and last names of clients who live in New York city.", "sql": "SELECT first, last FROM client WHERE city = 'New York City'", "source_tables": ["client"]}, "evidence": "New York City refers to city = 'New York City'"}
{"sample_id": 377, "db_id": "retail_complains", "final": {"question": "What is the oldest age of male clients?", "sql": "SELECT MAX(age) FROM client WHERE sex = 'Male'", "source_tables": ["client"]}, "evidence": "oldest age refers to max(age); male refers to sex = 'Male'"}
{"sample_id": 378, "db_id": "retail_complains", "final": {"question": "Please calculate the number of clients by each division.", "sql": "SELECT T2.division, COUNT(T2.division) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id GROUP BY T2.division", "source_tables": ["district", "client"]}, "evidence": ""}
{"sample_id": 379, "db_id": "retail_complains", "final": {"question": "What is the percentage of female clients in the Middle Atlantic?", "sql": "SELECT CAST(SUM(CASE WHEN T1.sex = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.sex) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'South Atlantic'", "source_tables": ["district", "client"]}, "evidence": "female refers to sex = 'Female'; the Middle Atlantic refers to division = 'Middle Atlantic'; percentage = divide(count(client_id where sex = 'Female' and division = 'Middle Atlantic') , count(client_id where division = 'Middle Atlantic')) * 100%"}
{"sample_id": 380, "db_id": "retail_complains", "final": {"question": "What is the average age of clients in South Atlantic?", "sql": "SELECT AVG(T1.age) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'South Atlantic'", "source_tables": ["district", "client"]}, "evidence": "in South Atlantic refers to division = 'South Atlantic'; average age refers to avg(age)"}
{"sample_id": 381, "db_id": "retail_complains", "final": {"question": "Which city in the Midwest region has the least number of clients?", "sql": "SELECT T2.city FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T3.Region = 'Midwest' GROUP BY T2.city ORDER BY COUNT(T2.city) LIMIT 1", "source_tables": ["state", "district", "client"]}, "evidence": "least number of clients refers to min(count(client_id))"}
{"sample_id": 382, "db_id": "retail_complains", "final": {"question": "How many customers in the Northeast use Microsoft email?", "sql": "SELECT COUNT(T1.email) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T3.Region = 'Northeast' AND T1.email LIKE '%@outlook.com'", "source_tables": ["state", "district", "client"]}, "evidence": "the Northeast refers to Region = 'Northeast'; Microsoft email refers to email like '%@outlook.com'"}
{"sample_id": 383, "db_id": "retail_complains", "final": {"question": "Which city in West North Central has the highest number of customers over the age of 60?", "sql": "SELECT T2.city FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'West North Central' AND T1.age > 60 GROUP BY T2.city ORDER BY COUNT(T2.city) DESC LIMIT 1", "source_tables": ["district", "client"]}, "evidence": "in North Central refers to Region = 'North Central'; highest number of customers refers to max(count(client_id)); over the age of 60 refers to age > 60"}
{"sample_id": 384, "db_id": "retail_complains", "final": {"question": "What is the percentage of complaints about the late fee issue whose priority is 2 in 2017?", "sql": "SELECT CAST(SUM(CASE WHEN T1.priority = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.'Complaint ID') FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.'Complaint ID' = T2.'Complaint ID' WHERE strftime('%Y', T1.'Date received') = '2017'", "source_tables": ["events", "callcenterlogs"]}, "evidence": "percentage = divide(count(Complaint ID where priority = 2) , count(Complaint ID)) * 100%; in 2017 refers to year(Date received) = 2017"}
{"sample_id": 385, "db_id": "retail_complains", "final": {"question": "Which state has the most cities?", "sql": "SELECT state_abbrev FROM district GROUP BY state_abbrev ORDER BY COUNT(city) DESC LIMIT 1", "source_tables": ["district"]}, "evidence": "state refers to state_abbrev; most cities refers to max(count(city))"}
{"sample_id": 386, "db_id": "retail_complains", "final": {"question": "Please give the first name and phone number of the client whose complaint id is CR0922485.", "sql": "SELECT T1.first, T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.'Complaint ID' = 'CR0922485'", "source_tables": ["events", "client"]}, "evidence": "first name refers to first"}
{"sample_id": 387, "db_id": "retail_complains", "final": {"question": "Please list the emails of the clients whose complaint date received is 7/3/2014.", "sql": "SELECT T1.email FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.'Date received' = '2014-07-03'", "source_tables": ["events", "client"]}, "evidence": "7/3/2014 refers to Date received = '2014-07-03'"}
{"sample_id": 388, "db_id": "retail_complains", "final": {"question": "In 2012, how many complaints about Credit card product came from clients in Omaha?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'Omaha' AND strftime('%Y', T2.'Date received') = '2012' AND T2.Product = 'Credit card'", "source_tables": ["events", "client"]}, "evidence": "in 2012 refers to Date received LIKE'2012%'; in Omaha refers to city = 'Omaha'"}
{"sample_id": 389, "db_id": "retail_complains", "final": {"question": "From 2012 to 2015, how many complaints were submitted via email from female clients?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE strftime('%Y', T2.'Date received') BETWEEN '2012' AND '2015' AND T2.'Submitted via' = 'Email' AND T1.sex = 'Male'", "source_tables": ["events", "client"]}, "evidence": "from 2012 to 2015 refers to Date received BETWEEN 2012 AND 2015; submitted via email refers to Submitted via = 'Email'; female refers to sex = 'Female'"}
{"sample_id": 390, "db_id": "retail_complains", "final": {"question": "Please list all clients' phone numbers and complaint IDs which are still in progress.", "sql": "SELECT T1.phone, T2.'Complaint ID' FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.'Company response to consumer' = 'In progress'", "source_tables": ["events", "client"]}, "evidence": "in progress refers to Company response to consumer = 'In progress'"}
{"sample_id": 391, "db_id": "retail_complains", "final": {"question": "In 2015, how many complaints about Billing disputes were sent by clients in Portland?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'Portland' AND T2.'Date received' LIKE '2015%' AND T2.Issue = 'Billing disputes'", "source_tables": ["events", "client"]}, "evidence": "in 2015 refers to Date received LIKE'2015%'; about Billing disputes refers to Issue = 'Billing disputes'; Portland refers to city = 'Portland'"}
{"sample_id": 392, "db_id": "retail_complains", "final": {"question": "In 2014, what is the percentage of complaints from consumers in Houston that the delay was over 5 days?", "sql": "SELECT CAST((SUM(CASE WHEN strftime('%J', T2.'Date sent to company') - strftime('%J', T2.'Date received') > 5 THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'Houston' AND strftime('%Y', T2.'Date received') = '2014'", "source_tables": ["events", "client"]}, "evidence": "in 2014 refers to Date received LIKE'2014%'; Houston refers to city = 'Houston'; delay over 5 days refers to subtract(Date sent to company, Date received) > 5; percentage = divide(count(Complaint ID where subtract(Date sent to company , Date received) > 5) , count(Complaint ID)) * 100%"}
{"sample_id": 393, "db_id": "retail_complains", "final": {"question": "In the complains received in 2012, how many of them are submitted through email?", "sql": "SELECT COUNT('Submitted via') FROM events WHERE strftime('%Y', 'Date received') = '2012' AND 'Submitted via' = 'Email'", "source_tables": ["events"]}, "evidence": "received in 2012 refers to Date received LIKE '2012%'; submitted through email refers to Submitted via = 'Email'"}
{"sample_id": 394, "db_id": "retail_complains", "final": {"question": "Give the client ID of the complaint received on April 16, 2014 and submitted through fax.", "sql": "SELECT T2.Client_ID FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.'Complaint ID' = T2.'Complaint ID' WHERE T2.'Submitted via' = 'Fax' AND T1.'Date received' = '2014-04-16'", "source_tables": ["events", "callcenterlogs"]}, "evidence": "April 16, 2014 refers to Date received = '2014-04-16'; submitted through fax refers to Submitted via = 'Fax'"}
{"sample_id": 395, "db_id": "retail_complains", "final": {"question": "List date of the review of the Eagle Capital from Indianapolis, Indiana.", "sql": "SELECT T2.Date FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T2.Product = 'Eagle Capital' AND T1.city = 'Indianapolis' AND T1.state_abbrev = 'IN'", "source_tables": ["district", "reviews"]}, "evidence": "Eagle Capital refers to Product = 'Eagle Capital'; Indianapolis refers to city = 'Indianapolis'; Indiana refers to state_abbrev = 'IN'"}
{"sample_id": 396, "db_id": "retail_complains", "final": {"question": "Among the complaints received in year 2015, what is total number of complaints timely response and closed with an explanation?", "sql": "SELECT COUNT(T1.'Complaint ID') FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.'Complaint ID' = T2.'Complaint ID' WHERE strftime('%Y', T1.'Date received') = '2015' AND T2.'Timely response?' = 'Yes' AND T2.'Company response to consumer' = 'Closed with explanation'", "source_tables": ["events", "callcenterlogs"]}, "evidence": "in year 2015 refers to Date received LIKE '2015%'; timely response refers to Timely response?\" = 'Yes'; closed with an explanation refers to Company response to consumer = 'Closed with explanation'"}
{"sample_id": 397, "db_id": "retail_complains", "final": {"question": "Among the female clients that age between 20 to 40, list the date when their complaints were received.", "sql": "SELECT DISTINCT T3.'Date received' FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID INNER JOIN callcenterlogs AS T3 ON T2.'Complaint ID' = T3.'Complaint ID' WHERE T1.age BETWEEN 20 AND 40 AND T1.sex = 'Female'", "source_tables": ["events", "client", "callcenterlogs"]}, "evidence": "female refers to sex = 'Female'"}
{"sample_id": 398, "db_id": "retail_complains", "final": {"question": "List the product reviewed with 1 star on March 14, 2016 from Newton, Massachusetts.", "sql": "SELECT T2.Product FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T1.city = 'Newton' AND T1.state_abbrev = 'MA' AND T2.Date = '2016-03-14' AND T2.Stars = 1", "source_tables": ["district", "reviews"]}, "evidence": "1 star refers to Stars = 1; on March 14, 2016 refers to Date = '2016-03-14'; Newton refers to city = 'Newton'; Massachusetts refers to state_abbrev = 'MA'"}
{"sample_id": 399, "db_id": "retail_complains", "final": {"question": "In reviews for the Eagle National Bank product, how many of the 5 star reviews where from Nashville, Tennessee?", "sql": "SELECT COUNT(T2.Stars) FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T1.city = 'Nashville' AND T1.state_abbrev = 'TN' AND T2.Product = 'Eagle National Mortgage' AND T2.Stars = 5", "source_tables": ["district", "reviews"]}, "evidence": "5 star refers to Stars = 5; Nashville refers to city = 'Nashville'; Tennessee refers to state_abbrev = 'TN'"}
{"sample_id": 400, "db_id": "retail_complains", "final": {"question": "What are the issues of the complains of male clients and products from age 25 and below?", "sql": "SELECT DISTINCT T2.Issue FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Male' AND T1.age < 25", "source_tables": ["events", "client"]}, "evidence": "male refers to sex = 'Male'; age 25 and below refers to age < 25"}
{"sample_id": 401, "db_id": "retail_complains", "final": {"question": "Among the reviews from midwest region, what are the products that received 1 star?", "sql": "SELECT DISTINCT T3.Product FROM state AS T1 INNER JOIN district AS T2 ON T1.StateCode = T2.state_abbrev INNER JOIN reviews AS T3 ON T2.district_id = T3.district_id WHERE T1.Region = 'Midwest' AND T3.Stars = 1", "source_tables": ["state", "district", "reviews"]}, "evidence": "1 star refers to Stars = 1"}
{"sample_id": 402, "db_id": "retail_complains", "final": {"question": "List the products involved in the complaints received on March 2017 via TOVA server.", "sql": "SELECT DISTINCT T2.Product FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.'Complaint ID' = T2.'Complaint ID' WHERE T1.server = 'TOVA' AND T2.'Date received' LIKE '2017-03%'", "source_tables": ["events", "callcenterlogs"]}, "evidence": "on March 2017 refers to Date received LIKE '%03%' AND Date received LIKE '2017%'"}
{"sample_id": 403, "db_id": "retail_complains", "final": {"question": "What is the division of the review of 5 stars received on December 17, 2017 for the product Eagle National Mortgage?", "sql": "SELECT T1.division FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T2.Stars = 5 AND T2.Date = '2017-12-17' AND T2.Product = 'Eagle National Mortgage'", "source_tables": ["district", "reviews"]}, "evidence": "5 stars refers to Stars = 5; on December 17 2017 refers to Date = '2017-12-17'"}
{"sample_id": 404, "db_id": "retail_complains", "final": {"question": "In complaints about the credit card product, list the phone number of the oldest client.", "sql": "SELECT T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Product = 'Credit card' ORDER BY T1.age DESC LIMIT 1", "source_tables": ["events", "client"]}, "evidence": "oldest refers to max(age)"}
{"sample_id": 405, "db_id": "retail_complains", "final": {"question": "In complaints received in 2014, how many of them were submitted via call?", "sql": "SELECT COUNT(T2.'Complaint ID') FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.'Complaint ID' = T2.'Complaint ID' WHERE T2.'Submitted via' = 'Phone' AND strftime('%Y', T1.'Date received') = '2014'", "source_tables": ["events", "callcenterlogs"]}, "evidence": "in 2014 refers to Date received LIKE '2014%'; submitted via call refers to Submitted via = 'Phone'"}
{"sample_id": 406, "db_id": "retail_complains", "final": {"question": "List the product and its issues of the complains of clients with age greater than the 60% of average age of all clients.", "sql": "SELECT DISTINCT T2.Product, T2.Issue FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.age * 100 > ( SELECT AVG(age) * 60 FROM client )", "source_tables": ["events", "client"]}, "evidence": "age greater than the 60% of average age refers to age > multiply(avg(age) , 0.6)"}
{"sample_id": 407, "db_id": "retail_complains", "final": {"question": "In reviews of product with 5 stars, what is the percentage of the reviews coming from the division of East North Central?", "sql": "SELECT CAST(SUM(CASE WHEN T1.division = 'East North Central' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.division) FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T2.Stars = 5", "source_tables": ["district", "reviews"]}, "evidence": "5 stars refers to Stars = 5; percentage = divide(count(division = 'East North Central', count(division)) * 100%"}
{"sample_id": 533, "db_id": "movies_4", "final": {"question": "What is the title of the movie with the most keywords?", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id GROUP BY T1.title ORDER BY COUNT(T2.keyword_id) DESC LIMIT 1", "source_tables": ["movie_keywords", "movie"]}, "evidence": "most keywords refers to max(count(keyword_id))"}
{"sample_id": 534, "db_id": "movies_4", "final": {"question": "Which department has the most people?", "sql": "SELECT T1.department_name FROM department AS T1 INNER JOIN movie_crew AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY COUNT(T2.department_id) DESC LIMIT 1", "source_tables": ["movie_crew", "department"]}, "evidence": "department refers to department_name; most people refers to max(count(department_id))"}
{"sample_id": 535, "db_id": "movies_4", "final": {"question": "What percentage of films are made in the US?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.COUNTry_iso_code = 'US' THEN T1.movie_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id", "source_tables": ["country", "production_country", "movie"]}, "evidence": "films' and 'movies' are synonyms; made in the US refers to country_iso_code = 'US'; percentage = divide(sum(country_id) when country_iso_code = 'US', count(country_id)) * 100 as percentage"}
{"sample_id": 536, "db_id": "movies_4", "final": {"question": "What is the average ratio between female and male actors in a movie?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Female' THEN T1.person_id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Male' THEN T1.person_id ELSE NULL END) FROM movie_cast AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.gender_id", "source_tables": ["gender", "movie_cast"]}, "evidence": "female refers to gender = 'Female'\uff1bmale refers to gender = 'Male'; average ratio = divide(divide(sum(gender_id) when gender = 'Female', sum(gender_id) when gender = 'Male'), count(movie_id)) as percentage"}
{"sample_id": 537, "db_id": "movies_4", "final": {"question": "List the movies released in 1945.", "sql": "SELECT title FROM movie WHERE CAST(STRFTIME('%Y', release_date) AS INT) = 1945", "source_tables": ["movie"]}, "evidence": "List the movies refers to title; released in 1945 refers to release_date LIKE '1945%'"}
{"sample_id": 538, "db_id": "movies_4", "final": {"question": "Provide the ID and ISO code of Belgium.", "sql": "SELECT COUNTry_id, COUNTry_iso_code FROM COUNTry WHERE COUNTry_name = 'Belgium'", "source_tables": ["country"]}, "evidence": "ID refers to country_id; ISO code refers to country_iso_code; Belgium refers to country_name = 'Belgium'"}
{"sample_id": 539, "db_id": "movies_4", "final": {"question": "List the character names played by Catherine Deneuve.", "sql": "SELECT T2.character_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Catherine Deneuve'", "source_tables": ["person", "movie_cast"]}, "evidence": ""}
{"sample_id": 540, "db_id": "movies_4", "final": {"question": "List the movies in the Somali language.", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Somali'", "source_tables": ["movie_languages", "language", "movie"]}, "evidence": "List the movies refers to title; Somali language refers to language_name = 'Somali'"}
{"sample_id": 541, "db_id": "movies_4", "final": {"question": "Provide the release date and language of the most popular movie.", "sql": "SELECT T1.release_date, T3.language_name FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id ORDER BY T1.popularity DESC LIMIT 1", "source_tables": ["movie_languages", "language", "movie"]}, "evidence": "language refers to langauge_name; most popular movie refers to max(popularity)"}
{"sample_id": 542, "db_id": "movies_4", "final": {"question": "What is the original language of the \"Four Rooms\" movie?", "sql": "SELECT T3.language_name FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id INNER JOIN language_role AS T4 ON T2.language_role_id = T4.role_id WHERE T4.language_role = 'Original' AND T1.title = 'Four Rooms'", "source_tables": ["movie_languages", "language_role", "language", "movie"]}, "evidence": "language refers to language_name; original language refers to language_role = 'Original'; \"Four Rooms\" refers to title = 'Four Rooms'"}
{"sample_id": 543, "db_id": "movies_4", "final": {"question": "List the character names in the \"Open Water\" movie.", "sql": "SELECT T2.character_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Open Water'", "source_tables": ["movie_cast", "movie"]}, "evidence": "\"Open Water\" movie refers to title = 'Open Water'"}
{"sample_id": 544, "db_id": "movies_4", "final": {"question": "Who is the main actor in the \"Pirates of the Caribbean: At World's End\" movie?", "sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' ORDER BY T2.cast_order LIMIT 1", "source_tables": ["movie_cast", "person", "movie"]}, "evidence": "main actor refers to person_name where Min(cast_order); \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'"}
{"sample_id": 545, "db_id": "movies_4", "final": {"question": "List the names of camera supervisors in the crew.", "sql": "SELECT T1.person_name FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T2.job = 'Camera Supervisor'", "source_tables": ["person", "movie_crew"]}, "evidence": "names refers to person_name; camera supervisors refers to job = 'Camera Supervisor';"}
{"sample_id": 546, "db_id": "movies_4", "final": {"question": "List the job titles of Sally Menke in the crew.", "sql": "SELECT DISTINCT T2.job FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Sally Menke'", "source_tables": ["person", "movie_crew"]}, "evidence": "job titles refers to job"}
{"sample_id": 547, "db_id": "movies_4", "final": {"question": "Provide the names and departments of the person who worked as a music editor in the \"Pirates of the Caribbean: At World's End\" movie.", "sql": "SELECT T3.person_name, T4.department_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id INNER JOIN department AS T4 ON T2.department_id = T4.department_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Music Editor'", "source_tables": ["person", "movie_crew", "department", "movie"]}, "evidence": "names refers to person_name; departments refers to department_name; worked as a music editor refers to job = 'Music Editor'; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'"}
{"sample_id": 548, "db_id": "movies_4", "final": {"question": "Provide the titles and revenues of the movies produced by the DreamWorks company.", "sql": "SELECT T1.title, T1.revenue FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T2.company_id = T3.company_id WHERE T3.company_name = 'DreamWorks'", "source_tables": ["movie_company", "production_company", "movie"]}, "evidence": "produced by the DreamWorks company refers to company_name = 'DreamWorks'"}
{"sample_id": 549, "db_id": "movies_4", "final": {"question": "How many movies were produced in Canada?", "sql": "SELECT COUNT(T2.movie_id) FROM COUNTry AS T1 INNER JOIN production_COUNTry AS T2 ON T1.COUNTry_id = T2.COUNTry_id WHERE T1.COUNTry_name = 'Canada'", "source_tables": ["country", "production_country"]}, "evidence": "produced in Canada refers to country_name = 'Canada'"}
{"sample_id": 550, "db_id": "movies_4", "final": {"question": "List the genres of Forrest Gump movie.", "sql": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.title = 'Forrest Gump'", "source_tables": ["genre", "movie_genres", "movie"]}, "evidence": "genres refers to genre_name; Forrest Gump movie refers to title = 'Forrest Gump'"}
{"sample_id": 551, "db_id": "movies_4", "final": {"question": "Provide the production companies of the movie that has over 35% average running time per movie in 2016.", "sql": "SELECT T.company_name FROM ( SELECT DISTINCT T3.company_name, T1.runtime FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' ) T WHERE T.runtime * 100 > (0.35 * ( SELECT AVG(T1.runtime) FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' ) + ( SELECT AVG(T1.runtime) FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' )) * 100", "source_tables": ["movie_company", "production_company", "movie"]}, "evidence": "production companies refers to company_name; in 2016 refers to release_date LIKE '2016%'; over 35% average running time per movie refers to divide(subtract(runtime, AVG(runtime)), AVG(runtime)) * 100 as percentage > 35"}
{"sample_id": 552, "db_id": "movies_4", "final": {"question": "Find the difference in percentage of the movies under keywords of \"woman director\" and \"independent film\".", "sql": "SELECT CAST((SUM(CASE WHEN T1.keyword_name = 'woman director' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.keyword_name = 'independent film' THEN 1 ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.keyword_name = 'independent film' THEN 1 ELSE 0 END) FROM keyword AS T1 INNER JOIN movie_keywords AS T2 ON T1.keyword_id = T2.keyword_id", "source_tables": ["movie_keywords", "keyword"]}, "evidence": "under keywords of \"woman director\" and \"independent film\" refers to keyword_name = 'woman director' and keyword_name = 'independent film'; difference in percentage = divide(subtract(count(movie_id) when keyword_name = 'woman director', count(movie_id) when keyword_name = 'independent film'), count(movie_id)) as percentage"}
{"sample_id": 553, "db_id": "movies_4", "final": {"question": "Which genre does the movie Dancer in the Dark belong to?", "sql": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.title = 'Dancer in the Dark'", "source_tables": ["genre", "movie_genres", "movie"]}, "evidence": "genre refers to genre_name; movie Dancer in the Dark refers to title = 'Dancer in the Dark'"}
{"sample_id": 554, "db_id": "movies_4", "final": {"question": "How many adventure movies are there that were released in 2000?", "sql": "SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Adventure' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2000", "source_tables": ["genre", "movie_genres", "movie"]}, "evidence": "adventure movies refers to genre_name = 'Adventure'; released in 2000 refers to release_date LIKE '2000%'"}
{"sample_id": 555, "db_id": "movies_4", "final": {"question": "Which movies did the company Paramount Pictures produce in 2000?", "sql": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Paramount Pictures' AND CAST(STRFTIME('%Y', T3.release_date) AS INT) = 2000", "source_tables": ["movie_company", "production_company", "movie"]}, "evidence": "Which movies refers to title; company Paramount Pictures refers to company_name = 'Paramount Pictures'; in 2000 refers to release_date LIKE '2000%'"}
{"sample_id": 556, "db_id": "movies_4", "final": {"question": "What keyword can the user use to search for the movie Finding Nemo?", "sql": "SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.title = 'Finding Nemo'", "source_tables": ["movie_keywords", "keyword", "movie"]}, "evidence": "What keyword refers to keyword_name; Finding Nemo refers to title = 'Finding Nemo'"}
{"sample_id": 557, "db_id": "movies_4", "final": {"question": "Name the horror movies with positive ratings greater than 7.", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Horror' AND T1.vote_average > 7", "source_tables": ["genre", "movie_genres", "movie"]}, "evidence": "Name the horror movies refers to title where genre_name = 'horror'; positive ratings greater than 7 refers to vote_average > 7"}
{"sample_id": 558, "db_id": "movies_4", "final": {"question": "How many production companies made more than 150 movies?", "sql": "SELECT COUNT(*) FROM ( SELECT T1.company_name AS CNAME FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING COUNT(T1.company_name) > 150 )", "source_tables": ["movie_company", "production_company"]}, "evidence": "more than 150 movies refers to COUNT(company_name) > 150"}
{"sample_id": 559, "db_id": "movies_4", "final": {"question": "What is the role of Mark Hammel?", "sql": "SELECT T2.job FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Mark Hammel'", "source_tables": ["person", "movie_crew"]}, "evidence": "role refers to job"}
{"sample_id": 560, "db_id": "movies_4", "final": {"question": "How many main actors are there in the movie Pirates of the Caribbean: At World's End?", "sql": "SELECT COUNT(T2.cast_order) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T3.gender_id = T2.gender_id WHERE T3.gender = 'Male' OR T3.gender = 'Female' AND T1.title = 'Pirates of the Caribbean: At World''s End' AND T2.cast_order = ( SELECT MIN(T2.cast_order) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T3.gender_id = T2.gender_id WHERE T3.gender = 'Male' OR T3.gender = 'Female' AND T1.title = 'Pirates of the Caribbean: At World''s End' )", "source_tables": ["movie_cast", "gender", "movie"]}, "evidence": "main actors refers to gender = 'male' and min(cast_order); Pirates of the Caribbean: At World's End refers to title = 'Pirates of the Caribbean: At World''s End'"}
{"sample_id": 561, "db_id": "movies_4", "final": {"question": "Which movies have the participation of actor Harrison Ford?", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Harrison Ford'", "source_tables": ["movie_cast", "person", "movie"]}, "evidence": "Which movies refers to title; actor refers to person_name"}
{"sample_id": 562, "db_id": "movies_4", "final": {"question": "Which character did Orlando Bloom play in the movie Pirates of the Caribbean: The Curse of the Black Pearl?", "sql": "SELECT T2.character_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Pirates of the Caribbean: The Curse of the Black Pearl' AND T3.person_name = 'Orlando Bloom'", "source_tables": ["movie_cast", "person", "movie"]}, "evidence": "Which character refers to character_name; movie Pirates of the Caribbean: The Curse of the Black Pearl refers to title = 'Pirates of the Caribbean: The Curse of the Black Pearl'"}
{"sample_id": 563, "db_id": "movies_4", "final": {"question": "What is the average number of horror movies among all movies genre?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.genre_name = 'Horror' THEN T1.movie_id ELSE NULL END) AS REAL) / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id", "source_tables": ["genre", "movie_genres", "movie"]}, "evidence": "horror movies refers to genre_name = 'horror'; average number = divide(sum(movie_id) when genre_name = 'horror', count(movie_id))"}
{"sample_id": 564, "db_id": "movies_4", "final": {"question": "List the names of all the producers in the movie \"Pirates of the Caribbean: At World's End\".", "sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Pirates of the Caribbean: The Curse of the Black Pearl' AND T2.job = 'Producer'", "source_tables": ["person", "movie_crew", "movie"]}, "evidence": "List the names refers to person_name; producers refers to job = 'Producer'; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: The Curse of the Black Pearl'"}
{"sample_id": 565, "db_id": "movies_4", "final": {"question": "Calculate the average income made by movies using the keyword \"paris\". List the title of the movies.", "sql": "SELECT AVG(T1.revenue), T1.title FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'paris'", "source_tables": ["movie_keywords", "keyword", "movie"]}, "evidence": "income refers to revenue; keyword \"paris\" refers to keyword_name = 'paris'; average income = AVG(revenue)"}
{"sample_id": 664, "db_id": "codebase_comments", "final": {"question": "What format does the method number 8's comment have?", "sql": "SELECT CASE WHEN CommentIsXml = 0 THEN 'isNotXMLFormat' WHEN CommentIsXml = 1 THEN 'isXMLFormat' END format FROM Method WHERE Id = 8", "source_tables": ["method"]}, "evidence": "format refers CommentIsXml; method number refers to Method_100k.Id; Method_100k.Id = 8;"}
{"sample_id": 665, "db_id": "codebase_comments", "final": {"question": "Please provide a link to the most well-known repository's Github address.", "sql": "SELECT Url FROM Repo WHERE Watchers = ( SELECT MAX(Watchers) FROM Repo )", "source_tables": ["repo"]}, "evidence": "link refers to Url; well-known repository refers to MAX(Watchers);"}
{"sample_id": 666, "db_id": "codebase_comments", "final": {"question": "What is the task of the method that is in the Czech language?", "sql": "SELECT DISTINCT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE Lang = 'cs'", "source_tables": ["method"]}, "evidence": "method refers to Name; task of the method refers to the second part of the Name after the \".\"; Czech language refers to Lang = 'cs'"}
{"sample_id": 667, "db_id": "codebase_comments", "final": {"question": "What is the solution path for method number 3?", "sql": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 3", "source_tables": ["solution", "method"]}, "evidence": "solution path refers to Path; method number refers to Method_100k.Id; Method_100k.Id = 3;"}
{"sample_id": 668, "db_id": "codebase_comments", "final": {"question": "What is the language of method number 28 that can be found in the repository number 3?", "sql": "SELECT T2.Lang FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 28 AND T1.RepoId = 3", "source_tables": ["solution", "method"]}, "evidence": "language of method refers to Lang; method number refers to Method_100k.Id; Method_100k.Id = 28; repository number refers to RepoId; RepoID = 3;"}
{"sample_id": 669, "db_id": "codebase_comments", "final": {"question": "What is solution 1's processing time and how many methods have been using this solution?", "sql": "SELECT T1.ProcessedTime, COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.SolutionId = 1", "source_tables": ["solution", "method"]}, "evidence": "solution refers to Solution.Id and SolutionId; Solution.Id = 1; SolutionId = 1; processing time refers to ProcessedTime; methods refers to Name;"}
{"sample_id": 670, "db_id": "codebase_comments", "final": {"question": "How many methods in the same repository share a tokenized name that begins with \"query language...\"?", "sql": "SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized LIKE 'query language%'", "source_tables": ["solution", "method"]}, "evidence": "methods refers to Name; tokenized name refers to NameTokenized; NameTokenized LIKE 'query language%';"}
{"sample_id": 671, "db_id": "codebase_comments", "final": {"question": "Please state the API calls for method number 10 and its intended course of action.", "sql": "SELECT T2.ApiCalls, T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 10", "source_tables": ["solution", "method"]}, "evidence": "method number refers to Method_100k.Id; Method_100k.Id = 10; intended course of action refers to Path;"}
{"sample_id": 672, "db_id": "codebase_comments", "final": {"question": "How many methods in repository 150 did not have a comment and a summary?", "sql": "SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.RepoId = 150 AND T2.FullComment IS NULL AND T2.Summary IS NULL", "source_tables": ["solution", "method"]}, "evidence": "methods refers to Name; repository that did not have a comment and a summary refers to FullComment IS NULL AND Summary IS NULL;"}
{"sample_id": 673, "db_id": "codebase_comments", "final": {"question": "What is the comment format of method number 50 with the solution path \"managedfusion_managedfusion\\ManagedFusion.sln\"?", "sql": "SELECT CASE WHEN T2.CommentIsXml = 0 THEN 'isNotXMLFormat' WHEN T2.CommentIsXml = 1 THEN 'isXMLFormat' END format FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 50 AND T1.Path = 'managedfusion_managedfusionManagedFusion.sln'", "source_tables": ["solution", "method"]}, "evidence": "comment format refers to CommentIsXml; method number refers to Method_100k.Id; Method_100k.Id = 50; solution path refers to Path; Path = 'managedfusion_managedfusion\\ManagedFusion.sln';"}
{"sample_id": 674, "db_id": "codebase_comments", "final": {"question": "What is the task method of the tokenized name \"string extensions to pascal case\n\"?", "sql": "SELECT DISTINCT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE NameTokenized = 'string extensions to pascal case'", "source_tables": ["method"]}, "evidence": "method refers to Name; task of the method refers to the second part of the Name after the \".\"; tokenized name refers to NameTokenized; NameTokenized = 'string extensions to pascal case';"}
{"sample_id": 675, "db_id": "codebase_comments", "final": {"question": "Provide the tokenized name of the method \"Sky.Excel.ExcelBook.TypeConvert\".", "sql": "SELECT NameTokenized FROM Method WHERE Name = 'Sky.Excel.ExcelBook.TypeConvert'", "source_tables": ["method"]}, "evidence": "tokenized name refers to NameTokenized; NameTokenized = 'Sky.Excel.ExcelBook.TypeConvert';"}
{"sample_id": 676, "db_id": "codebase_comments", "final": {"question": "How many path does the github address \"https://github.com/jeffdik/tachy.git\" have?", "sql": "SELECT COUNT(DISTINCT T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/jeffdik/tachy.git'", "source_tables": ["solution", "repo"]}, "evidence": "github address refers to Url; Url = 'https://github.com/jeffdik/tachy.git';"}
{"sample_id": 677, "db_id": "codebase_comments", "final": {"question": "How many watchers does the path \"maff_se3ue7\\US7.sln\" have?", "sql": "SELECT T1.Watchers FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'maff_se3ue7US7.sln'", "source_tables": ["solution", "repo"]}, "evidence": ""}
{"sample_id": 678, "db_id": "codebase_comments", "final": {"question": "List 5 github address that the solutions can be implemented without the need of compilation.", "sql": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.WasCompiled = 1 LIMIT 5", "source_tables": ["solution", "repo"]}, "evidence": "github address refers to Url; solution can be implemented without the need of compliation refers to WasCompiled = 1;"}
{"sample_id": 679, "db_id": "codebase_comments", "final": {"question": "What are the solution path of the tokenized name \"matrix multiply\"?", "sql": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'matrix multiply'", "source_tables": ["solution", "method"]}, "evidence": "solution path refers to Path; tokenized name refers to NameTokenized; NameTokenized = 'matrix multiply';"}
{"sample_id": 680, "db_id": "codebase_comments", "final": {"question": "How many XML format does the github address \"https://github.com/dogeth/vss2git.git\" have?", "sql": "SELECT COUNT(T3.CommentIsXml) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T1.Url = 'https://github.com/dogeth/vss2git.git' AND T3.CommentIsXml = 1", "source_tables": ["solution", "method", "repo"]}, "evidence": "Xml format refers to CommentisXml, github address refers to Url; Url = 'https://github.com/dogeth/vss2git.git';"}
{"sample_id": 681, "db_id": "codebase_comments", "final": {"question": "List 5 solution path that has sampling time of 636431758961741000.", "sql": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.SampledAt = 636431758961741000 LIMIT 5", "source_tables": ["solution", "method"]}, "evidence": "solution path refers to Path; sampling time refers to SampledAt; SampledAt = '636431758961741000';"}
{"sample_id": 682, "db_id": "codebase_comments", "final": {"question": "What is the github address of the solution path \"joeyrobert_bloomfilter\\DataTypes.BloomFilter.sln\"?", "sql": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'joeyrobert_bloomfilterDataTypes.BloomFilter.sln'", "source_tables": ["solution", "repo"]}, "evidence": "github address refers to Url; solution path refers to Path; Path = 'joeyrobert_bloomfilter\\DataTypes.BloomFilter.sln';"}
{"sample_id": 683, "db_id": "codebase_comments", "final": {"question": "List all the method name of the solution path \"graffen_NLog.Targets.Syslog\\src\\NLog.Targets.Syslog.sln\n\".", "sql": "SELECT DISTINCT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'graffen_NLog.Targets.SyslogsrcNLog.Targets.Syslog.sln'", "source_tables": ["solution", "method"]}, "evidence": "method name refers to Name; solution path refers to Path; Path = 'graffen_NLog.Targets.Syslog\\src\\NLog.Targets.Syslog.sln';"}
{"sample_id": 684, "db_id": "codebase_comments", "final": {"question": "List all the tokenized name of the solution path \"jurney_P4Backup\\P4Backup\\P4Backup.sln\n\".", "sql": "SELECT DISTINCT T2.NameTokenized FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'jurney_P4BackupP4BackupP4Backup.sln'", "source_tables": ["solution", "method"]}, "evidence": "tokenized name refers to NameTokenized; solution path refers to Path; Path = 'jurney_P4Backup\\P4Backup\\P4Backup.sln';"}
{"sample_id": 685, "db_id": "codebase_comments", "final": {"question": "Provide the github address with the summary of method \"A test for Decompose\n\".", "sql": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T3.Summary = 'A test for Decompose'", "source_tables": ["solution", "method", "repo"]}, "evidence": "github address refers to Url; summary of method refers to Summary; Summary = 'A test for Decompose';"}
{"sample_id": 686, "db_id": "codebase_comments", "final": {"question": "How many liked by people does the solution path \"ninject_Ninject\\Ninject.sln\n\" have?", "sql": "SELECT DISTINCT T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'ninject_NinjectNinject.sln'", "source_tables": ["solution", "repo"]}, "evidence": "how many liked by people refers to Stars; solution path refers to Path; Path = 'ninject_Ninject\\Ninject.sln';"}
{"sample_id": 687, "db_id": "codebase_comments", "final": {"question": "How many solution path does the repository with 111 stars, 58 forks, and 111 watchers?", "sql": "SELECT COUNT(T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 111 AND T1.Forks = 58 AND T1.Watchers = 111", "source_tables": ["solution", "repo"]}, "evidence": "solution path refers to Path;"}
{"sample_id": 688, "db_id": "codebase_comments", "final": {"question": "What is the average processed time of the solution with a repository of 254 likes, 88 followers, and 254 watchers?", "sql": "SELECT CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.ProcessedTime) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 254 AND T1.Forks = 88 AND T1.Watchers = 254", "source_tables": ["solution", "repo"]}, "evidence": "average processed time = AVG(ProcessedTime);"}
{"sample_id": 689, "db_id": "codebase_comments", "final": {"question": "How many language code of method is used for the github address \"https://github.com/managedfusion/managedfusion.git\n\"?", "sql": "SELECT COUNT(DISTINCT T3.Lang) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T1.Url = 'https://github.com/managedfusion/managedfusion.git'", "source_tables": ["solution", "method", "repo"]}, "evidence": "language code of method refers to Lang; github address refers to Url; Url = 'https://github.com/managedfusion/managedfusion.git';"}
{"sample_id": 722, "db_id": "trains", "final": {"question": "How many trains with fully loaded head cars are running east?", "sql": "SELECT COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 1 AND T1.load_num = 3", "source_tables": ["trains", "cars"]}, "evidence": "fully loaded refers to load_num = 3; head cars refers to position = 1"}
{"sample_id": 723, "db_id": "trains", "final": {"question": "How many cars running east have double-sided tail cars?", "sql": "SELECT COUNT(T1.id) FROM trains AS T1 INNER JOIN cars AS T2 ON T1.id = T2.train_id INNER JOIN ( SELECT train_id, MAX(position) AS trailPosi FROM cars GROUP BY train_id ) AS T3 ON T1.id = T3.train_id WHERE T1.direction = 'east' AND T2.position = T3.trailPosi AND T2.sides = 'double'", "source_tables": ["trains", "cars"]}, "evidence": "east is an direction; double-sided refers to sides = 'double'; tail refers to carsposition = trailPosi"}
{"sample_id": 724, "db_id": "trains", "final": {"question": "List all the directions of the trains that have empty cars.", "sql": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.load_num = 0", "source_tables": ["trains", "cars"]}, "evidence": "empty cars refers to load_num = 0"}
{"sample_id": 725, "db_id": "trains", "final": {"question": "What is the direction of the train with a diamond-shaped load in its 2nd car?", "sql": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 2 AND T1.shape = 'diamond'", "source_tables": ["trains", "cars"]}, "evidence": "2nd car refers to position = 2"}
{"sample_id": 726, "db_id": "trains", "final": {"question": "Among the trains running west, how many trains have three-wheeled, jagged roof cars?", "sql": "SELECT SUM(CASE WHEN T2.direction = 'west' THEN 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.wheels = 3 AND T1.roof = 'jagged'", "source_tables": ["trains", "cars"]}, "evidence": "west is an direction; three-wheeled refers to wheels = 3; jagged roof refers to roof = 'jagged'"}
{"sample_id": 727, "db_id": "trains", "final": {"question": "Provide the directions for all the trains that have 2 or less cars.", "sql": "SELECT T1.direction FROM trains AS T1 INNER JOIN ( SELECT train_id, MAX(position) AS trailPosi FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T2.trailPosi <= 2", "source_tables": ["trains", "cars"]}, "evidence": "2 or less cars refers to trailPosi < = 2"}
{"sample_id": 728, "db_id": "trains", "final": {"question": "What is the percentage of all the trains with at least 4 cars? List the directions of the said trains.", "sql": "SELECT CAST(COUNT(CASE WHEN T2.trailPosi >= 4 THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM trains AS T1 INNER JOIN ( SELECT train_id, MAX(position) AS trailPosi FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id UNION ALL SELECT T1.direction FROM trains AS T1 INNER JOIN ( SELECT train_id, MAX(position) AS trailPosi FROM cars t GROUP BY train_id ) AS T2 ON T1.id = T2.train_id AND T2.trailPosi >= 4", "source_tables": ["trains", "cars"]}, "evidence": "at least 4 cars refers to trailPosi > = 4; calculation = MULTIPLY(DIVIDE(count(trailPosi > = 4 then id), count(id)), 100)"}
{"sample_id": 729, "db_id": "trains", "final": {"question": "List all the load shapes of all head cars of each train and identify which load shape has the highest number. Calculate the percentage of the trains with the said head car that are running eas", "sql": "SELECT DISTINCT T3.load_shape FROM ( SELECT load_shape, train_id FROM cars WHERE position = 1 ORDER BY train_id DESC ) AS T3 UNION ALL SELECT T4.load_shape FROM ( SELECT load_shape, train_id FROM cars WHERE position = 1 ORDER BY train_id DESC LIMIT 1 ) AS T4 UNION ALL SELECT (CAST(COUNT(DISTINCT CASE WHEN T2.direction = 'east' THEN T2.id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.id)) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 1 AND T1.load_shape = ( SELECT T4.load_shape FROM ( SELECT load_shape, train_id FROM cars AS T WHERE position = 1 ORDER BY train_id DESC LIMIT 1 ) AS T4 )", "source_tables": ["trains", "cars"]}, "evidence": "which load shape has the highest number refers to MAX(load_shape); head car refers to position = 1; east is a direction; calculation = MULTIPLY(DIVIDE(count(direction = 'east' where MAX(load_shape) where position = 1 then id), count(id)), 100)"}
{"sample_id": 766, "db_id": "movie", "final": {"question": "What is the net worth of the actor starred in Misery who has a height ranging from 60 to 70 inches tall?", "sql": "SELECT T3.NetWorth FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Misery' AND T3.'Height (Inches)' BETWEEN 60 AND 70 AND T3.Gender = 'Male'", "source_tables": ["characters", "actor", "movie"]}, "evidence": "Misery refers to Title = 'Misery'; height ranging from 60 to 70 inches refers to Height (Inches) BETWEEN 60 and 70"}
{"sample_id": 767, "db_id": "movie", "final": {"question": "Count the male actors born in USA that starred in Ghost.", "sql": "SELECT COUNT(*) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Ghost' AND T3.Gender = 'Male' AND T3.'Birth Country' = 'USA'", "source_tables": ["characters", "actor", "movie"]}, "evidence": "male refers to Gender = 'Male'; born in USA refers to Birth Country = 'USA'; Ghost refers to Title = 'Ghost'"}
{"sample_id": 768, "db_id": "movie", "final": {"question": "What is the MPAA rating and title of the movie starred by Leonardo DiCaprio with highest budget?", "sql": "SELECT T1.'MPAA Rating', T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Leonardo DiCaprio' ORDER BY T1.Budget DESC LIMIT 1", "source_tables": ["characters", "actor", "movie"]}, "evidence": "starred by Leonardo DiCaprio refers to Name = 'Leonardo Dicaprio'; highest budget refers to max(Budget)"}
{"sample_id": 769, "db_id": "movie", "final": {"question": "Among the actors starred in Die Hard 2, list their net worth and birth date of actors with a height between 60 to 65.", "sql": "SELECT T3.NetWorth, T3.'Date of Birth' FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Die Hard 2' AND T3.'Height (Inches)' BETWEEN 60 AND 65", "source_tables": ["characters", "actor", "movie"]}, "evidence": "Die Hard 2 refers to Title = 'Die Hard 2'; height between 60 to 65 refers to Height (Inches) BETWEEN 60 AND 65"}
{"sample_id": 770, "db_id": "movie", "final": {"question": "List the runtime of movies starred by an African-American actor born on December 28, 1954.", "sql": "SELECT T1.Runtime FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Ethnicity = 'African American' AND T3.'Date of Birth' = '1954-12-28'", "source_tables": ["characters", "actor", "movie"]}, "evidence": "African-American refers to Ethnicity = 'African American'; born on December 28 1954 refers to Date of Birth = '1954-12-28'"}
{"sample_id": 771, "db_id": "movie", "final": {"question": "Find the actor's name that played as Don Altobello in a drama movie that has a gross of 136766062.", "sql": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Gross = 136766062 AND T2.'Character Name' = 'Don Altobello' AND T1.Genre = 'Drama'", "source_tables": ["characters", "actor", "movie"]}, "evidence": "actor's name refers to Name; as Don Altobello refers to Character Name = 'Don Altobello'; drama movie refers to Genre = 'Drama'"}
{"sample_id": 772, "db_id": "movie", "final": {"question": "What is the gross of a comedy movie with a rating lower than 7 and starred by an actor with a net worth greater than $375,000,000.00?", "sql": "SELECT SUM(T1.Gross) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE CAST(REPLACE(REPLACE(T3.NetWorth, ',', ''), '$', '') AS REAL) > 375000000 AND T1.Rating < 7 AND T1.Genre = 'Comedy'", "source_tables": ["characters", "actor", "movie"]}, "evidence": "comedy movie refers to Genre = 'Comedy'; rating lower than 7 refers to Rating < 7; net worth greater than $375,000,000.00 refers to NetWorth > '$375,000,000.00'"}
{"sample_id": 773, "db_id": "movie", "final": {"question": "What is the runtime of the movie starred by Jackie Chan with a rating greater than 7?", "sql": "SELECT T1.Runtime FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Jackie Chan' AND T1.Rating > 7", "source_tables": ["characters", "actor", "movie"]}, "evidence": "starred by Jackie Chan refers to Name = 'Jackie Chan'; rating greater than 7 refers to Rating > 7"}
{"sample_id": 774, "db_id": "movie", "final": {"question": "Among the movies with drama genre, what is the percentage of the actors with net worth greater than $400,000,000.00?", "sql": "SELECT SUM(CASE WHEN CAST(REPLACE(REPLACE(T3.NetWorth, ',', ''), '$', '') AS REAL) > 400000000 THEN 1 ELSE 0 END) - SUM(CASE WHEN CAST(REPLACE(REPLACE(T3.NetWorth, ',', ''), '$', '') AS REAL) < 400000000 THEN 1 ELSE 0 END) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Genre = 'Drama'", "source_tables": ["characters", "actor", "movie"]}, "evidence": "drama genre refers to Genre = 'Drama'; net worth greater than $400,000,000.00 refers to NetWorth > '$400,000,000.00'; percentage = divide(count(ActorID where NetWorth > '$400,000,000.00'), COUNT(ActorID))*100%"}
{"sample_id": 775, "db_id": "movie", "final": {"question": "List the character's name of actress born in Sherman Oaks and starred in the movie Bruce Almighty with height greater than the 50% of average height of all actors listed.", "sql": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Gender = 'Female' AND T1.Title = 'Godzilla' AND T3.'Birth City' = 'Sherman Oaks' AND T3.'Height (Inches)' * 100 > ( SELECT AVG('Height (Inches)') FROM actor ) * 50", "source_tables": ["characters", "actor", "movie"]}, "evidence": "actress refers to Gender = 'Female'; born in Sherman Oaks refers to Birth City = 'Sherman Oaks'; movie Bruce Almighty refers to Title = 'Bruce Almighty'; height greater than the 50% of average height refers to Height (Inches) > multiply(avg(Height (Inches)), 0.5)"}
{"sample_id": 837, "db_id": "social_media", "final": {"question": "Among all the tweets posted on Mondays, how many of them are reshared?", "sql": "SELECT COUNT(DISTINCT TweetID) FROM twitter WHERE Weekday = 'Monday' AND IsReshare = 'TRUE'", "source_tables": ["twitter"]}, "evidence": "\"Monday\" is the Weekday; reshare refers to IsReshare = 'TRUE'"}
{"sample_id": 838, "db_id": "social_media", "final": {"question": "Please list the texts of the top 3 tweets with the most number of unique users seeing the tweet.", "sql": "SELECT text FROM twitter ORDER BY Reach DESC LIMIT 3", "source_tables": ["twitter"]}, "evidence": "the most number of unique users seeing refers to Max(Reach)"}
{"sample_id": 839, "db_id": "social_media", "final": {"question": "How many reshared tweets have over 100 likes?", "sql": "SELECT COUNT(DISTINCT TweetID) FROM twitter WHERE IsReshare = 'TRUE' AND Likes > 100", "source_tables": ["twitter"]}, "evidence": "over 100 likes refers to Likes > 100; reshare tweet refers to IsReshare = 'TRUE'"}
{"sample_id": 840, "db_id": "social_media", "final": {"question": "What is the total number of tweets sent by male users on Mondays?", "sql": "SELECT COUNT(DISTINCT T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Weekday = 'Monday'", "source_tables": ["user", "twitter"]}, "evidence": "male user refers to Gender = 'Male; 'Monday' is the Weekday; total number of tweet refers to Count (TweetID)"}
{"sample_id": 841, "db_id": "social_media", "final": {"question": "What is the gender of the user who has posted the tweet that got the most likes?", "sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Likes DESC LIMIT 1", "source_tables": ["user", "twitter"]}, "evidence": "tweet got the most likes refers to Max(Likes)"}
{"sample_id": 842, "db_id": "social_media", "final": {"question": "Please list the texts of all the tweets in French posted by male users.", "sql": "SELECT T1.text FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Lang = 'fr'", "source_tables": ["user", "twitter"]}, "evidence": "\"French\" is the language and refers to Lang = 'fr'; male user refers to Gender = 'Male'"}
{"sample_id": 843, "db_id": "social_media", "final": {"question": "How many tweets in French were posted from Australia?", "sql": "SELECT COUNT(DISTINCT T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.Lang = 'fr' AND T2.Country = 'Australia'", "source_tables": ["location", "twitter"]}, "evidence": "\"French\" is the language and refers to Lang = 'fr'; 'Australia' is the Country"}
{"sample_id": 844, "db_id": "social_media", "final": {"question": "Among all the tweets with a positive sentiment, how many of them were posted by male users in Australia?", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T3 ON T3.UserID = T1.UserID WHERE T2.Country = 'Australia' AND T3.Gender = 'Male' AND T1.Sentiment > 0", "source_tables": ["user", "location", "twitter"]}, "evidence": "tweet with positive sentiment refers to Sentiment > 0; male user refers to Gender = 'Male'; 'Australia' is the Country"}
{"sample_id": 845, "db_id": "social_media", "final": {"question": "How many more tweets with a positive sentiment than the tweets with a neutral sentiment were posted by male users?", "sql": "SELECT SUM(CASE WHEN T1.Sentiment > 0 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.Sentiment = 0 THEN 1 ELSE 0 END) AS diff FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male'", "source_tables": ["user", "twitter"]}, "evidence": "positive sentiment tweet refers to Sentiment > 0; neutral sentiment refers to Sentiment = 0; male user refers to Gender = 'Male'; difference = Subtract (Count (TweetID where Sentiment > 0), Count (TweetID where Sentiment = 0))"}
{"sample_id": 846, "db_id": "social_media", "final": {"question": "From which city was the tweet with the most number of retweets posted?", "sql": "SELECT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID ORDER BY T1.RetweetCount DESC LIMIT 1", "source_tables": ["location", "twitter"]}, "evidence": "tweet with most number of retweet post refers to Max(RetweetCount)"}
{"sample_id": 847, "db_id": "social_media", "final": {"question": "From which city were more tweets posted, Bangkok or Chiang Mai?", "sql": "SELECT SUM(CASE WHEN T2.City = 'Bangkok' THEN 1 ELSE 0 END) AS bNum , SUM(CASE WHEN T2.City = 'Chiang Mai' THEN 1 ELSE 0 END) AS cNum FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.City IN ('Bangkok', 'Chiang Mai')", "source_tables": ["location", "twitter"]}, "evidence": "\"Bangkok\" and \"Chiang Mai\" are both City"}
{"sample_id": 848, "db_id": "social_media", "final": {"question": "Among the tweets posted from Santa Fe state in Argentina, how many of them were posted on 31st?", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.Day = 31 AND T2.State = 'Santa' AND T2.Country = 'Argentina'", "source_tables": ["location", "twitter"]}, "evidence": "\"Sante Fe\" is the State; \"Argentina\" is the Country; posted on 31st refers to Day = 31"}
{"sample_id": 849, "db_id": "social_media", "final": {"question": "Please list the top 3 cities with the most number of tweets posted in Canada.", "sql": "SELECT T.City FROM ( SELECT T2.City, COUNT(T1.TweetID) AS num FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.Country = 'Canada' GROUP BY T2.City ) T ORDER BY T.num DESC LIMIT 3", "source_tables": ["location", "twitter"]}, "evidence": "\"Canada\" is the Country; city with most number of tweets refers to City where Max(Count(TweetID))"}
{"sample_id": 850, "db_id": "social_media", "final": {"question": "Please list all the cities from where tweets with neutral sentiments were posted.", "sql": "SELECT DISTINCT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE Sentiment = 0", "source_tables": ["location", "twitter"]}, "evidence": "neutral sentiment refers to Sentiment = 0"}
{"sample_id": 851, "db_id": "social_media", "final": {"question": "Among all the tweets sent by male users in Argentina, what is the text of the one with the most number of likes?", "sql": "SELECT T2.text FROM user AS T1 INNER JOIN twitter AS T2 ON T1.UserID = T2.UserID INNER JOIN location AS T3 ON T2.LocationID = T3.LocationID WHERE T3.Country = 'Argentina' AND T1.Gender = 'Male' ORDER BY T2.Likes DESC LIMIT 1", "source_tables": ["user", "location", "twitter"]}, "evidence": "male user refers to Gender = 'Male'; 'Argentina' is the Country; most number of likes refers to Max(Likes)"}
{"sample_id": 852, "db_id": "social_media", "final": {"question": "What is the average number of likes for a tweet posted by a male user on Mondays?", "sql": "SELECT SUM(T1.Likes) / COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Weekday = 'Monday'", "source_tables": ["user", "twitter"]}, "evidence": "male user refers to Gender = 'Male'; 'Monday' is the Weekday; average number of likes = Divide (Sum(Likes), Count(TweetID))"}
{"sample_id": 853, "db_id": "social_media", "final": {"question": "Tweets posted from which city has a higher number of average likes, Bangkok or Chiang Mai?", "sql": "SELECT SUM(CASE WHEN T2.City = 'Bangkok' THEN Likes ELSE NULL END) / COUNT(CASE WHEN T2.City = 'Bangkok' THEN 1 ELSE 0 END) AS bNum , SUM(CASE WHEN City = 'Chiang Mai' THEN Likes ELSE NULL END) / COUNT(CASE WHEN City = 'Chiang Mai' THEN TweetID ELSE NULL END) AS cNum FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.City IN ('Bangkok', 'Chiang Mai')", "source_tables": ["location", "twitter"]}, "evidence": "\"Bangkok\" and \"Chiang Mai\" are both City; average number of like = Divide (Sum(Likes), Count(TweetID))"}
{"sample_id": 943, "db_id": "cs_semester", "final": {"question": "What is the average teaching ability of the most popular professors?", "sql": "SELECT CAST(SUM(teachingability) AS REAL) / COUNT(prof_id) FROM prof WHERE popularity = ( SELECT MAX(popularity) FROM prof )", "source_tables": ["prof"]}, "evidence": "average = AVG(teachingability); most popular professor refers to MAX(popularity);"}
{"sample_id": 944, "db_id": "cs_semester", "final": {"question": "Calculate the average satisfaction of the good students with their courses.", "sql": "SELECT CAST(SUM(sat) AS REAL) / COUNT(course_id) FROM registration WHERE grade = 'B'", "source_tables": ["registration"]}, "evidence": "average satisfaction = DIVIDE(SUM(sat), COUNT(course_id)); satisfaction refers to sat; good student refers to grade = 'B';"}
{"sample_id": 945, "db_id": "cs_semester", "final": {"question": "Among the students with less than four intelligence, list the full name and phone number of students with a greater than 3 GPA.", "sql": "SELECT f_name, l_name, phone_number FROM student WHERE gpa > 3 AND intelligence < 4", "source_tables": ["student"]}, "evidence": "intelligence < 4; full name = f_name, l_name; gpa > 3;"}
{"sample_id": 946, "db_id": "cs_semester", "final": {"question": "Name the students with above-average capability.", "sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN RA AS T2 ON T1.student_id = T2.student_id WHERE T2.capability > ( SELECT AVG(capability) FROM RA )", "source_tables": ["student", "ra"]}, "evidence": "name of the students = f_name, l_name; above average-capability refers to capability > AVG(capability);"}
{"sample_id": 947, "db_id": "cs_semester", "final": {"question": "For the students with an intelligence of 5, list the full name and courses taken by them who have less than a 3 GPA.", "sql": "SELECT T1.f_name, T1.l_name, T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.intelligence = 5 AND T1.gpa < 3", "source_tables": ["student", "course", "registration"]}, "evidence": "full name of the students = f_name, l_name; gpa < 3;"}
{"sample_id": 948, "db_id": "cs_semester", "final": {"question": "What is the average capability of students with less than a 2.5 GPA?", "sql": "SELECT CAST(SUM(T1.capability) AS REAL) / COUNT(T1.student_id) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.gpa < 2.5", "source_tables": ["student", "ra"]}, "evidence": "average capability = AVG(capability); gpa < 2.5;"}
{"sample_id": 949, "db_id": "cs_semester", "final": {"question": "List the full name of the professors who advised students with intelligence 1.", "sql": "SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.intelligence = 1", "source_tables": ["prof", "student", "ra"]}, "evidence": "full name of the professors = first_name, last_name;"}
{"sample_id": 950, "db_id": "cs_semester", "final": {"question": "What is the difference in the average GPA of students who took the hardest and easiest courses?", "sql": "SELECT AVG(T1.gpa) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.diff IN (2, 1) GROUP BY T3.diff", "source_tables": ["student", "course", "registration"]}, "evidence": "difference in the average gpa = SUBTRACT(AVG(gpa WHERE MAX(diff)), AVG(gpa where min(diff))); difficulty of the course refers to diff; hardest course refers to MAX(diff); easiest course refers to MIN(diff);"}
{"sample_id": 951, "db_id": "cs_semester", "final": {"question": "Give the full name and capability of students who failed in any courses.", "sql": "SELECT T2.f_name, T2.l_name, T1.capability FROM RA AS T1 INNER JOIN student AS T2 ON T2.student_id = T1.student_id INNER JOIN registration AS T3 ON T2.student_id = T3.student_id WHERE T3.grade IS NULL OR T3.grade = ''", "source_tables": ["student", "ra", "registration"]}, "evidence": "full name of students = f_name, l_name; failed refers to grade IS NULL;"}
{"sample_id": 952, "db_id": "cs_semester", "final": {"question": "Of the students with high salaries, how many took the computer vision course?", "sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN registration AS T2 ON T2.student_id = T1.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.salary = 'high' AND T3.name = 'Computer Vision'", "source_tables": ["course", "ra", "registration"]}, "evidence": "high salaries refers to salary = 'High';"}
{"sample_id": 953, "db_id": "cs_semester", "final": {"question": "Find the full name and popularity of the professor who advises the most number of students.", "sql": "SELECT T1.first_name, T1.last_name, T1.popularity FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id GROUP BY T1.prof_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1", "source_tables": ["prof", "ra"]}, "evidence": "full name of the professor = first_name, last_name; most number of students refers to MAX(COUNT(student_id));"}
{"sample_id": 954, "db_id": "cs_semester", "final": {"question": "Please give the name of the course in which most numbers of the students got an A. Also, list the full name of the students who got an A in this course.", "sql": "SELECT T3.name, T2.f_name, T2.l_name FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T1.course_id = T3.course_id WHERE T1.grade = 'A' GROUP BY T3.name ORDER BY COUNT(T1.student_id) DESC LIMIT 1", "source_tables": ["student", "course", "registration"]}, "evidence": "most number of students got an A refers MAX(COUNT(student_id WHERE grade = 'A')); full name = f_name, l_name; got an A refers to grade = 'A';"}
{"sample_id": 955, "db_id": "cs_semester", "final": {"question": "Calculate the difference between the average satisfaction of the students with high salaries and no salary.", "sql": "SELECT AVG(T2.sat) - ( SELECT AVG(T2.sat) FROM RA AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'free' ) AS diff FROM RA AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'high'", "source_tables": ["ra", "registration"]}, "evidence": "average satisfaction difference = SUBTRACT(AVG(sat where salary = 'high')), (AVG(sat where salary = 'free')); satisfaction refers to sat; no salary refers to salary = 'free';"}
{"sample_id": 956, "db_id": "cs_semester", "final": {"question": "Find the university from which the professor who advised most undergraduate students graduated.", "sql": "SELECT T1.graduate_from FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.type = 'UG' GROUP BY T1.prof_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1", "source_tables": ["prof", "student", "ra"]}, "evidence": "university from which the professor graduated refers to graduate_from; undergraduate students refers to type = 'UG';"}
{"sample_id": 957, "db_id": "cs_semester", "final": {"question": "Among the professors with more than average teaching ability, list the full name and email address of the professors who advise two or more students.", "sql": "SELECT T2.first_name, T2.last_name, T2.email FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability > ( SELECT AVG(teachingability) FROM prof ) GROUP BY T2.prof_id HAVING COUNT(T1.student_id) >= 2", "source_tables": ["prof", "ra"]}, "evidence": "more than average teaching ability refers to teachingability > AVG(teachingability); full_name of the professor = first_name, last_name; email address of the professor refers to email; advises two or more students refers to COUNT(student_id) > = 2;\n"}
{"sample_id": 958, "db_id": "cs_semester", "final": {"question": "What percentage of students are highly satisfied with the Intro to Database 2 course?", "sql": "SELECT CAST(( SELECT COUNT(*) FROM course WHERE name = 'Intro to Database 2' AND course_id IN ( SELECT course_id FROM registration WHERE sat = ( SELECT MAX(sat) FROM registration ) ) ) AS REAL) * 100  / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Intro to Database 2'", "source_tables": ["course", "registration"]}, "evidence": "percentage = MULTIPLY(DIVIDE(COUNT(MAX(sat)), (COUNT(student_id))), 1.0); highly satisfied refers to MAX(sat);"}
{"sample_id": 959, "db_id": "cs_semester", "final": {"question": "What is the first and last name of students with highest gpa?", "sql": "SELECT f_name, l_name FROM student WHERE gpa = ( SELECT MAX(gpa) FROM student )", "source_tables": ["student"]}, "evidence": "first name refers of students refers to f_name; last name of students refers to l_name; highest gpa refers to MAX(gpa);"}
{"sample_id": 960, "db_id": "cs_semester", "final": {"question": "Among professors with the highest teachability, how many of their students have high salary?", "sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T1.salary = 'high' ORDER BY T2.teachingability DESC LIMIT 1", "source_tables": ["prof", "ra"]}, "evidence": "highest teachability refers to MAX(teachability); high salary refers to salary = 'high';"}
{"sample_id": 961, "db_id": "cs_semester", "final": {"question": "What is the salary range of the student with an email of grosellg@hku.hk?", "sql": "SELECT T1.salary FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.email = 'grosellg@hku.hk'", "source_tables": ["student", "ra"]}, "evidence": "salary range refers to salary;"}
{"sample_id": 962, "db_id": "cs_semester", "final": {"question": "Among students that gave satisfaction of value 4 for the course named \"Statistical Learning\", how many of them have a gpa of 3.8?", "sql": "SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Statistical learning' AND T2.sat = 4 AND T1.gpa = 3.8", "source_tables": ["student", "course", "registration"]}, "evidence": "satisfaction refers to sat;\n\nsat = 4; gpa = 3.8 "}
{"sample_id": 963, "db_id": "cs_semester", "final": {"question": "Among courses with difficulty of 3, how many students have intellegence level of 2?", "sql": "SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.diff = 3 AND T1.intelligence = 2", "source_tables": ["student", "course", "registration"]}, "evidence": "difficulty of 3 refers to diff = 3; intelligence = 2"}
{"sample_id": 964, "db_id": "cs_semester", "final": {"question": "List the student's first and last name that got a C in the course named \"Applied Deep Learning\".", "sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Applied Deep Learning ' AND T2.grade = 'C'", "source_tables": ["student", "course", "registration"]}, "evidence": "student's first name refers to f_name; student's last name refers to l_name; got a C refers to grade = 'C';"}
{"sample_id": 965, "db_id": "cs_semester", "final": {"question": "Among research postgraduate students, give the name of the course with the student satisfaction value of 1.", "sql": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.sat = 1 AND T1.type = 'RPG'", "source_tables": ["student", "course", "registration"]}, "evidence": "research postgraduate students refers to type = 'RPG'; name of the course refers to name; satisfaction refers to sat; sat = 1;"}
{"sample_id": 966, "db_id": "cs_semester", "final": {"question": "Among the students with a capability below 3, what is the difference of undergraduate students from research postgraduate students?", "sql": "SELECT SUM(CASE WHEN T2.type = 'UG' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.type = 'RPG' THEN 1 ELSE 0 END) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.capability < 3", "source_tables": ["student", "ra"]}, "evidence": "capability < 3; difference = subtract(count(type = 'UG')), (count(type = 'RPG')); undergraduate students refers to type = 'UG'; research postgraduate students refers to type = 'RPG';"}
{"sample_id": 1024, "db_id": "computer_student", "final": {"question": "How many professors teaches no more than two high-level or harder undergraduate courses?", "sql": "SELECT COUNT(*) FROM ( SELECT COUNT(T2.p_id) FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_400' GROUP BY T2.p_id HAVING COUNT(DISTINCT T1.course_id) <= 2 )", "source_tables": ["course", "taughtby"]}, "evidence": "professors refers to taughtBy.p_id; high-level or harder undergraduate courses\u00a0 refers to courseLevel = 'Level_400' ; no more than two refers to count(taughtBy.course_id) < = 2"}
{"sample_id": 1025, "db_id": "computer_student", "final": {"question": "Between the faculty employee professors, how many teaches high-level or harder undergraduate courses? Indicate each of the professors unique identifying number.", "sql": "SELECT COUNT(*) FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id WHERE T1.hasPosition = 'Faculty_eme' AND T1.professor = 1 AND T3.courseLevel = 'Level_400'", "source_tables": ["course", "person", "taughtby"]}, "evidence": "faculty employee professors refers to hasPosition = 'Faculty_eme' and professor = 1; high-level or harder undergraduate courses refers to courseLevel = 'Level_400'; professors unique identifying number refers to person.p_id"}
{"sample_id": 1026, "db_id": "computer_student", "final": {"question": "What is the position in the faculty of the professor who teaches the highest number of courses?", "sql": "SELECT T1.hasPosition FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id WHERE T1.professor = 1 GROUP BY T1.p_id ORDER BY COUNT(T2.course_id) DESC LIMIT 1", "source_tables": ["person", "taughtby"]}, "evidence": "position in the faculty refers to hasPosition; professor refers to professor = 1; teaches the highest number of courses refers to max(count(taughtBy.course_id))"}
{"sample_id": 1027, "db_id": "computer_student", "final": {"question": "What year in the program do the students with more than 2 advisors are in?", "sql": "SELECT T2.yearsInProgram FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.student = 1 GROUP BY T2.p_id HAVING COUNT(T2.p_id) > 2", "source_tables": ["person", "advisedby"]}, "evidence": "students refers to student = 1; more than 2 advisors refers to count(p_id_dummy) > 2"}
{"sample_id": 1028, "db_id": "computer_student", "final": {"question": "How many professors teaches basic or medium undergraduate courses?", "sql": "SELECT COUNT(*) FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_300'", "source_tables": ["course", "taughtby"]}, "evidence": "professors refers to taughtBy.p_id; basic or medium undergraduate courses refers to couresLevel = 'Level_300'"}
{"sample_id": 1029, "db_id": "computer_student", "final": {"question": "Among the students being advised by advisors, which students' year in the program do the advisors advise the majority of?", "sql": "SELECT T2.yearsInProgram FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.student = 1 GROUP BY T2.yearsInProgram ORDER BY COUNT(T1.p_id_dummy) DESC LIMIT 1", "source_tables": ["person", "advisedby"]}, "evidence": "students refers to student = 1; students' year in the program do the advisors advise the majority of refers to max(count(yearsInProgram))"}
{"sample_id": 1030, "db_id": "computer_student", "final": {"question": "How many students that are undergoing the pre-phase of qualification have advisors?", "sql": "SELECT COUNT(T1.p_id_dummy) FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.inPhase = 'Pre_Quals' AND T2.student = 1", "source_tables": ["person", "advisedby"]}, "evidence": "students refers to student = 1 and ; undergoing the phase of pre-qualification refers to inPhase = 'Pre-Quals'; have advisors refers to advisedBy.p_id"}
{"sample_id": 1031, "db_id": "computer_student", "final": {"question": "What is the average number of professional or master/undergraduate courses being taught by each professor?", "sql": "SELECT CAST(COUNT(T1.course_id) AS REAL) / COUNT(DISTINCT T2.p_id) FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_500'", "source_tables": ["course", "taughtby"]}, "evidence": "professional or master/undergraduate courses refers to courseLevel = 'Level_500'; average number = divide(count(taughtBy.course_id), count(taughtBy.p_id))"}
{"sample_id": 1032, "db_id": "computer_student", "final": {"question": "How many courses were taught by more than 4 people?", "sql": "SELECT COUNT(*) FROM ( SELECT COUNT(course_id) FROM taughtBy GROUP BY course_id HAVING COUNT(course_id) > 4 )", "source_tables": ["taughtby"]}, "evidence": "courses refers to taughtBy.course_id; more than 4 people refers to count(taughtBy.p_id) > 4"}
{"sample_id": 1033, "db_id": "computer_student", "final": {"question": "What is the total of professional courses available at the university? List out all the course id.", "sql": "SELECT COUNT(course_id) FROM course WHERE courseLevel = 'Level_500'", "source_tables": ["course"]}, "evidence": "professional courses refers to courseLevel = 'Level_500'; course id refers to course.course_id"}
{"sample_id": 1034, "db_id": "computer_student", "final": {"question": "What is the sum of year 1 and year 2 students?", "sql": "SELECT COUNT(*) FROM person WHERE yearsInProgram = 'Year_1' OR yearsInProgram = 'Year_2'", "source_tables": ["person"]}, "evidence": "year 1 and year 2 students refers to yearsInProgram = 'Year_1' and yearsInProgram = 'Year_2' and student = 1"}
{"sample_id": 1035, "db_id": "computer_student", "final": {"question": "How many courses were taught by a professor who is currently the member of faculty?", "sql": "SELECT COUNT(*) FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id WHERE T1.professor = 1 AND T1.hasPosition <> 0", "source_tables": ["person", "taughtby"]}, "evidence": "professor refers to professor = 1;\u00a0 member of faculty refers to hasPosition <> 0"}
{"sample_id": 1036, "db_id": "computer_student", "final": {"question": "Which professor taught the most courses and what is the position of this person in the university?", "sql": "SELECT T1.p_id, T1.hasPosition FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id GROUP BY T1.p_id ORDER BY COUNT(T2.course_id) DESC LIMIT 1", "source_tables": ["person", "taughtby"]}, "evidence": "professor refers to taughtBy.p_id; most courses refers to max(taughtBy.p_id); position refers to hasPosition"}
{"sample_id": 1037, "db_id": "computer_student", "final": {"question": "Which courses were taught by a professor who is not a faculty member?", "sql": "SELECT DISTINCT T2.course_id FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id WHERE T1.professor = 1 AND T1.hasPosition = 0", "source_tables": ["person", "taughtby"]}, "evidence": "courses refers to taughtBy.course_id; professor refers to professor = 1; is not a faculty member refers to hasPosition = 0"}
{"sample_id": 1038, "db_id": "computer_student", "final": {"question": "Which member of the faculty are teaching the most courses and what is his/her general course level?", "sql": "SELECT T1.p_id, T3.courseLevel FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id GROUP BY T1.p_id ORDER BY COUNT(T2.course_id) DESC LIMIT 1", "source_tables": ["course", "person", "taughtby"]}, "evidence": "member of the faculty refers to hasPosition <> 0, most courses refers to max(count(course.course_id))"}
{"sample_id": 1203, "db_id": "talkingdata", "final": {"question": "Identify all installed and activated apps by their id.", "sql": "SELECT app_id FROM app_events WHERE is_active = 1 AND is_installed = 1", "source_tables": ["app_events"]}, "evidence": "installed refers to is_installed = 1; activated refers to is_active = 1; id refers to app_id;"}
{"sample_id": 1204, "db_id": "talkingdata", "final": {"question": "How many apps are labeled 7?", "sql": "SELECT COUNT(app_id) FROM app_labels WHERE label_id = 7", "source_tables": ["app_labels"]}, "evidence": "labeled 7 refers to label_id = 7;"}
{"sample_id": 1205, "db_id": "talkingdata", "final": {"question": "Identify by their id all the devices that are used by women who are in the age range of 29 to 31 years.", "sql": "SELECT device_id FROM gender_age_train WHERE age BETWEEN 29 AND 31 AND gender = 'F'", "source_tables": ["gender_age_train"]}, "evidence": "id refers to device_id; women refers to gender = 'F'; age range of 29 to 31 years refers to age between 29 and 31;"}
{"sample_id": 1206, "db_id": "talkingdata", "final": {"question": "Identify by their id all the apps that belong to the game-stress reliever category.", "sql": "SELECT T2.app_id FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'game-stress reliever'", "source_tables": ["label_categories", "app_labels"]}, "evidence": "id refers to device_id;"}
{"sample_id": 1207, "db_id": "talkingdata", "final": {"question": "On what date were the most events logged on devices for 40-year-old male users?", "sql": "SELECT T.timestamp FROM ( SELECT T2.timestamp, COUNT(T2.event_id) AS num FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'M' AND T1.age = 40 GROUP BY T2.timestamp ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["gender_age", "events_relevant"]}, "evidence": "date refers to timestamp; most events refers to MAX(COUNT(event_id)); 40-year-old\u00a0 refers to age = 40; male refers to gender = 'M';"}
{"sample_id": 1208, "db_id": "talkingdata", "final": {"question": "On which brand of phone are the most applications installed?", "sql": "SELECT T.phone_brand FROM ( SELECT T1.phone_brand, COUNT(T4.is_active) AS num FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id INNER JOIN events_relevant AS T3 ON T2.device_id = T3.device_id INNER JOIN app_events_relevant AS T4 ON T3.event_id = T4.event_id WHERE T4.is_active = 1 GROUP BY T1.phone_brand ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["app_events_relevant", "phone_brand_device_model2", "gender_age", "events_relevant"]}, "evidence": "brand of phone refers to phone_brand; most applications are installed refers to MAX(COUNT(is_installed = 1));"}
{"sample_id": 1209, "db_id": "talkingdata", "final": {"question": "How many men under the age of 23 have apps installed but are not active on their devices?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id INNER JOIN app_events_relevant AS T3 ON T2.event_id = T3.event_id WHERE T1.gender = 'M' AND T3.is_active = 0 AND T1.age < 23", "source_tables": ["app_events_relevant", "gender_age", "events_relevant"]}, "evidence": "men refers to gender = 'M'; under the age of 23 refers to age < 23; installed refers to is_installed = 1; not active refers to is_active = 0;"}
{"sample_id": 1210, "db_id": "talkingdata", "final": {"question": "How many women have apps from the game-Finding fault category installed on their device?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id INNER JOIN app_events_relevant AS T3 ON T2.event_id = T3.event_id WHERE T1.age < 23 AND T1.gender = 'F' AND T3.is_active = 0 AND T3.is_installed = 1", "source_tables": ["app_events_relevant", "gender_age", "events_relevant"]}, "evidence": "women refers to gender = 'F'; installed refers to is_installed = 1;"}
{"sample_id": 1211, "db_id": "talkingdata", "final": {"question": "Which gender logged in the most to an event in the first 10 days of May 2016?", "sql": "SELECT T.gender FROM ( SELECT T1.gender, COUNT(T1.device_id) AS num FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE date(T2.timestamp) BETWEEN '2016-05-01' AND '2016-05-10' GROUP BY T1.gender ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["gender_age", "events_relevant"]}, "evidence": "gender that logged in the most refers to MAX(COUNT(gender)); first 10 days of May 2016 refers to timestamp BETWEEN '2016-05-01 00:00:00' AND '2016-05-10 23:59:59';"}
{"sample_id": 1212, "db_id": "talkingdata", "final": {"question": "What age group is the most using SM-T2558 model phones?", "sql": "SELECT T.'group' FROM ( SELECT T1.'group', COUNT(T1.device_id) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'SM-T2558' GROUP BY T1.'group' ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "age group using SM-T2558 model phones the most refers to MAX(COUNT(group WHERE device_model = 'SM-T2558')); SM-T2558 model phones refers to device_model = 'SM-T2558';"}
{"sample_id": 1213, "db_id": "talkingdata", "final": {"question": "How many people over the age of 50 do not have HTC One M8 Eye phones?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age > 50 AND T2.device_model != 'One M8 Eye' AND T2.phone_brand != 'HTC'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "over the age of 50 refers to age > 50; do not have HTC One M8 Eye phones refers to phone_brand ! = 'HTC' AND device_model ! = 'One M8 Eye';"}
{"sample_id": 1214, "db_id": "talkingdata", "final": {"question": "Locate all events on devices of women under 30 years old.", "sql": "SELECT T1.device_id FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'F' AND T1.age < 30", "source_tables": ["gender_age", "events_relevant"]}, "evidence": "locate = longitude, latitude; women refers to gender = 'F'; under 30 years old refers to age < 30;"}
{"sample_id": 1215, "db_id": "talkingdata", "final": {"question": "What percentage of women do not have applications installed on their mobile with respect to men?", "sql": "SELECT SUM(IIF(T1.gender = 'F', 1, 0)) / SUM(IIF(T1.gender = 'M', 1, 0)) AS per FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id INNER JOIN app_events_relevant AS T3 ON T2.event_id = T3.event_id WHERE T3.is_installed = 0", "source_tables": ["app_events_relevant", "gender_age", "events_relevant"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(gender = 'F'), SUM(gender = 'M')), 1.0); women refers to gender = 'F'; not installed refers to is_installed = 0; men refers to gender = 'M';"}
{"sample_id": 1216, "db_id": "talkingdata", "final": {"question": "Calculate the average age of people who have apps installed but are not active on their devices.", "sql": "SELECT AVG(T1.age) FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id INNER JOIN app_events_relevant AS T3 ON T2.event_id = T3.event_id WHERE T3.is_installed = 1 AND T3.is_active = 0", "source_tables": ["app_events_relevant", "gender_age", "events_relevant"]}, "evidence": "average age = AVG(age); installed refers to is_installed = 1; not active refers to is_active = 0;"}
{"sample_id": 1217, "db_id": "talkingdata", "final": {"question": "Please list any three events that happened on the 1st of May 2016 that have the same latitude of 31.", "sql": "SELECT event_id FROM events WHERE timestamp LIKE '2016-05-01%' AND latitude = 31 LIMIT 3", "source_tables": ["events"]}, "evidence": "on the 1st of May 2016 refers to timestamp like '2016-05-01%';"}
{"sample_id": 1218, "db_id": "talkingdata", "final": {"question": "Please list any three events that have the longitude and latitude of 0.", "sql": "SELECT event_id FROM events WHERE longitude = 0 AND latitude = 0 LIMIT 3", "source_tables": ["events"]}, "evidence": ""}
{"sample_id": 1219, "db_id": "talkingdata", "final": {"question": "What is the difference between the events of device number -9222956879900150000 that can be located and those that are unable to be located?", "sql": "SELECT SUM(IIF(latitude != 0 AND longitude != 0, 1, 0)) - SUM(IIF(latitude = 0 AND longitude = 0, 1, 0)) AS diff FROM events WHERE device_id = '-922956879900150000'", "source_tables": ["events"]}, "evidence": "difference = SUBTRACT(SUM(latitude! = 0 and longitude! = 0), SUM(latitude = 0 and longitude = 0)); device number refers to device_id; device_id = -922956879900150000; can be location refers to latitude ! = 0 and longitude ! = 0; unable to be location refers to latitude = 0 and longitude = 0;"}
{"sample_id": 1220, "db_id": "talkingdata", "final": {"question": "Please list any three devices that are owned by female users.", "sql": "SELECT device_id FROM gender_age WHERE gender = 'F' LIMIT 3", "source_tables": ["gender_age"]}, "evidence": "female refers to gender = 'F';"}
{"sample_id": 1221, "db_id": "talkingdata", "final": {"question": "Please list any five app categories that are related to games, along with their label ID.", "sql": "SELECT category, label_id FROM label_categories WHERE category LIKE '%game%' LIMIT 5", "source_tables": ["label_categories"]}, "evidence": "app categories refers to category; related to games refers to category like '%game%';"}
{"sample_id": 1222, "db_id": "talkingdata", "final": {"question": "Please list any three OPPO device models.", "sql": "SELECT device_model FROM phone_brand_device_model2 WHERE phone_brand = 'OPPO' LIMIT 3", "source_tables": ["phone_brand_device_model2"]}, "evidence": "OPPO refers to phone_brand = 'OPPO';"}
{"sample_id": 1223, "db_id": "talkingdata", "final": {"question": "What is the percentage of users who experienced event number 6 who have the app installed but do not use the app?", "sql": "SELECT SUM(IIF(is_installed = 1 AND is_active = 0, 1, 0)) / COUNT(app_id) AS perrcent FROM app_events WHERE event_id = 6", "source_tables": ["app_events"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(is_installed = 1 and is_active = 0), COUNT(app_id)), 1.0); event number refers to event_id = 6; installed refers to is_installed = 1; do not use refers to is_active = 0;"}
{"sample_id": 1224, "db_id": "talkingdata", "final": {"question": "Which gender owned more of the Galaxy Note 2 device model?", "sql": "SELECT IIF(SUM(IIF(T1.gender = 'M', 1, 0)) - SUM(IIF(T1.gender = 'F', 1, 0)) > 0, 'M', 'F') AS gender FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Galaxy Note 2'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "gender that owned more = SUBTRACT(IF(SUM(gender = 'M'), SUM(gender = 'F'),'M','F'));"}
{"sample_id": 1225, "db_id": "talkingdata", "final": {"question": "When did event number 2 happen and how many users were active?", "sql": "SELECT COUNT(T1.app_id) AS num FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE T1.event_id = 2 AND T1.is_active = 1 GROUP BY T2.timestamp", "source_tables": ["events", "app_events"]}, "evidence": "event number refers to event_id; event_id = 2; active refers to is_active = 1;"}
{"sample_id": 1226, "db_id": "talkingdata", "final": {"question": "Which behavior category does user number 5902120154267990000 belong to?", "sql": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = 5902120154267990000", "source_tables": ["label_categories", "app_labels"]}, "evidence": "behavior category refers to category; number refers to app_id; app_id = 5902120154267990000;"}
{"sample_id": 1227, "db_id": "talkingdata", "final": {"question": "How many users belong to the same behavior category as comics?", "sql": "SELECT COUNT(T2.app_id) FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'comics'", "source_tables": ["label_categories", "app_labels"]}, "evidence": "behavior category refers to category; category = 'comics';"}
{"sample_id": 1228, "db_id": "talkingdata", "final": {"question": "What is the age and gender of the person who uses the device number 29182687948017100 on event number 1?", "sql": "SELECT T1.age, T1.gender FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T1.device_id = 29182687948017100 AND T2.event_id = 1", "source_tables": ["gender_age", "events_relevant"]}, "evidence": "device number refers to device_id; device_id = 29182687948017100; event number refers to event_id; and event_id = 1;"}
{"sample_id": 1229, "db_id": "talkingdata", "final": {"question": "How many male users have the log of events at the same longitude of 114?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T2.longitude = 114 AND T1.gender = 'M'", "source_tables": ["gender_age", "events_relevant"]}, "evidence": "male refers to gender = 'M';"}
{"sample_id": 1230, "db_id": "talkingdata", "final": {"question": "When did event number 7 happen for user number -8022267440849930000?", "sql": "SELECT T1.timestamp FROM events_relevant AS T1 INNER JOIN app_events AS T2 ON T1.event_id = T2.event_id WHERE T2.app_id = -8022267440849930000 AND T1.event_id = 7", "source_tables": ["app_events", "events_relevant"]}, "evidence": "event number refers to event_id; event_id = 7; user number refers to app_id; app_id = -8022267440849930000;"}
{"sample_id": 1231, "db_id": "talkingdata", "final": {"question": "What are the behavior categories that user number -9222198347540750000 belongs to?", "sql": "SELECT T3.category FROM app_all AS T1 INNER JOIN app_labels AS T2 ON T1.app_id = T2.app_id INNER JOIN label_categories AS T3 ON T2.label_id = T3.label_id WHERE T1.app_id = -9222198347540750000", "source_tables": ["label_categories", "app_labels", "app_all"]}, "evidence": "behavior categories refers to category; user number refers to app_id; app_id = -9222198347540750000;"}
{"sample_id": 1232, "db_id": "talkingdata", "final": {"question": "Please provide the age group of any LG Nexus 4 device users.", "sql": "SELECT T1.'group' FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'LG' AND T2.device_model = 'Nexus 4'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "age group refers to `group`; LG Nexus 4 refers to phone_brand = 'LG' AND device_model = 'Nexus 4';"}
{"sample_id": 1233, "db_id": "talkingdata", "final": {"question": "Please provide the gender of at least one user who owns an HTC Desire 826 device.", "sql": "SELECT T1.gender FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Desire 826' AND T2.phone_brand = 'HTC'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "HTC Desire 826 refers to phone_brand = 'HTC' AND device_model = 'Desire 826';"}
{"sample_id": 1234, "db_id": "talkingdata", "final": {"question": "What is the percentage of users who are in the same behavior category as \"Academic Information\"?", "sql": "SELECT SUM(IIF(T1.category = 'Academic Information', 1.0, 0)) / COUNT(T2.app_id) AS per FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id", "source_tables": ["label_categories", "app_labels"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(category = 'Academic Information'), COUNT(app_id)), 1.0); behavior category refers to category; category = 'Academic Information';"}
{"sample_id": 1235, "db_id": "talkingdata", "final": {"question": "What is the percentage of device users in the F27-28 age group who experienced an event on the 3rd of May 2016?", "sql": "SELECT SUM(IIF(T1.'group' = 'F27-28', 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE SUBSTR(T2.timestamp, 1, 10) = '2016-05-03'", "source_tables": ["gender_age", "events_relevant"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(`group` = 'F27-28'), COUNT(device_id)), 1.0); on the 3rd of May 2016 refers to timestamp = '2016-05-03%';"}
{"sample_id": 1236, "db_id": "talkingdata", "final": {"question": "How many OPPO devices are there?", "sql": "SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE phone_brand = 'OPPO'", "source_tables": ["phone_brand_device_model2"]}, "evidence": "OPPO devices refers to phone_brand = 'OPPO';"}
{"sample_id": 1237, "db_id": "talkingdata", "final": {"question": "What is the most common age group among all device users?", "sql": "SELECT T.num FROM ( SELECT 'group', COUNT('group') AS num FROM gender_age GROUP BY 'group' ) T", "source_tables": ["gender_age"]}, "evidence": "most common age group refers to MAX(COUNT(`group`));"}
{"sample_id": 1238, "db_id": "talkingdata", "final": {"question": "How many events does the device \"4069764298338760000\" have?", "sql": "SELECT COUNT(event_id) FROM events WHERE device_id = 4069764298338760000", "source_tables": ["events"]}, "evidence": ""}
{"sample_id": 1239, "db_id": "talkingdata", "final": {"question": "How many of the apps belong in the \"Equity Fund\" category?", "sql": "SELECT COUNT(T1.app_id) FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id WHERE T2.category = 'Equity Fund'", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1240, "db_id": "talkingdata", "final": {"question": "List all females aged 24 to 26 devices' locations.", "sql": "SELECT T2.longitude, T2.latitude FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T1.'group' = 'F24-26' AND T1.gender = 'F'", "source_tables": ["gender_age", "events_relevant"]}, "evidence": "females refers to gender = 'F'; aged 24 to 26 refers to `group` = 'F24-26';"}
{"sample_id": 1241, "db_id": "talkingdata", "final": {"question": "How many male users have a Galaxy Note 3?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Galaxy Note 3' AND T1.gender = 'M'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "male refers to gender = 'M'; Galaxy Note 3 refers to device_model = 'Galaxy Note 3';"}
{"sample_id": 1242, "db_id": "talkingdata", "final": {"question": "List all the devices' brands and models of events on 5/7/2016 at 6:03:22 AM.", "sql": "SELECT T1.phone_brand, T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T2.timestamp = '2016-05-07 06:03:22'", "source_tables": ["phone_brand_device_model2", "events_relevant"]}, "evidence": "devices' brands refers to phone_brand; models refers to device_model; on 5/7/2016 at 6:03:22 AM refers to timestamp = '2016-05-07 06:03:22';"}
{"sample_id": 1243, "db_id": "talkingdata", "final": {"question": "Which brand is most common among people in their twenties?", "sql": "SELECT T.phone_brand FROM ( SELECT T2.phone_brand, COUNT(T2.phone_brand) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age BETWEEN 20 AND 30 GROUP BY T2.phone_brand ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "brand refers to phone_brand; brand that is most common refers to MAX(COUNT(phone_brand)); twenties refers to age BETWEEN 20 AND 30;"}
{"sample_id": 1244, "db_id": "talkingdata", "final": {"question": "What percentage of vivo devices belong to users with no information?", "sql": "SELECT SUM(IIF(T1.gender IS NULL AND T1.age IS NULL AND T1.'group' IS NULL, 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'", "source_tables": ["phone_brand_device_model2", "gender_age"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(gender = NULL and age = NULL and `group` = NULL), COUNT(device_id)), 1.0); vivo devices refers to phone_brand = 'vivo'; no information refers to gender = NULL AND age = NULL AND `group` = NULL;"}
{"sample_id": 1335, "db_id": "law_episode", "final": {"question": "Which role have won at least two awards for the entire season and list out the name?", "sql": "SELECT T1.name FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id GROUP BY T2.role HAVING COUNT(T2.award_id) > 1", "source_tables": ["person", "award"]}, "evidence": "at least two awards refers to count(role) >1"}
{"sample_id": 1336, "db_id": "law_episode", "final": {"question": "List out director names that received an award along with the episode number.", "sql": "SELECT T3.name, T1.episode_id FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T2.person_id = T3.person_id WHERE T2.role = 'director' AND T2.result = 'Winner'", "source_tables": ["episode", "person", "award"]}, "evidence": "director refers to role = 'director'; received an award refers to result = 'Winner'; episode number refers to episode"}
{"sample_id": 1337, "db_id": "law_episode", "final": {"question": "Which episodes are nominated for an awards but not win?", "sql": "SELECT T1.episode FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.result = 'Nominee'", "source_tables": ["episode", "award"]}, "evidence": "nominated for an award but not win refers to result = 'Nominee'"}
{"sample_id": 1338, "db_id": "law_episode", "final": {"question": "What is the average rating for each episode in season 9?", "sql": "SELECT SUM(rating) / COUNT(episode_id) FROM Episode WHERE season = 9", "source_tables": ["episode"]}, "evidence": "average rating = divide(sum(rating), count(episode_id))"}
{"sample_id": 1339, "db_id": "law_episode", "final": {"question": "What is the difference of 10 stars votes between the first episode and the last episode?", "sql": "SELECT SUM(CASE WHEN T2.episode = 24 THEN T1.votes ELSE 0 END) - SUM(CASE WHEN T2.episode = 1 THEN T1.votes ELSE 0 END) FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.stars = 10", "source_tables": ["vote", "episode"]}, "evidence": "the first episode refers to episode = 1; the last episode refers to episode = 24; 10 stars vote refers to stars = 10; the difference = subtract(votes where episode = 1, votes where episode = 24) where stars = 10"}
{"sample_id": 1340, "db_id": "law_episode", "final": {"question": "What is the episode rating with the most award won?", "sql": "SELECT T1.rating FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.result = 'Winner' GROUP BY T1.episode_id ORDER BY COUNT(T2.award_id) DESC LIMIT 1", "source_tables": ["episode", "award"]}, "evidence": "the most award won refers to max(episode_id where result = 'Winner')"}
{"sample_id": 1341, "db_id": "law_episode", "final": {"question": "How many credits have been displayed from episode 1 until 10?", "sql": "SELECT COUNT(T1.person_id) FROM Credit AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.credited = 'true' AND T2.episode BETWEEN 1 AND 10", "source_tables": ["episode", "credit"]}, "evidence": "credit displayed refers to credited = 'true'; from episode 1 until 10 refers to episode > = 1 AND episode < = 10"}
{"sample_id": 1342, "db_id": "law_episode", "final": {"question": "What is the episode that has mafia keyword?", "sql": "SELECT T1.episode FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T2.Keyword = 'mafia'", "source_tables": ["episode", "keyword"]}, "evidence": "mafia keyword refers to Keyword = 'mafia'"}
{"sample_id": 1343, "db_id": "law_episode", "final": {"question": "What is the average star with highest percentage for episodes that have received award?", "sql": "SELECT T2.person_id FROM Vote AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id ORDER BY T1.percent DESC LIMIT 1", "source_tables": ["vote", "award"]}, "evidence": "received award refers to result = 'Winner'; the highest percentage refers to max(percent); average star = divide(sum(stars), count(episode_id))"}
{"sample_id": 1344, "db_id": "law_episode", "final": {"question": "What is the average ranking episodes that are nominated for an award?", "sql": "SELECT SUM(T1.rating) / COUNT(T1.episode) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id", "source_tables": ["episode", "award"]}, "evidence": "average ranking = divide(sum(rating), sum(episode_id))"}
{"sample_id": 1345, "db_id": "law_episode", "final": {"question": "How many winners have been awarded a Television award by the \"American Bar Association Silver Gavel Awards for Media and the Arts\"?", "sql": "SELECT COUNT(award_id) FROM Award WHERE result = 'Winner' AND award = 'Television' AND organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'", "source_tables": ["award"]}, "evidence": "winner refers to result = 'Winner'; Television award refers to award = 'Television'; the \"American Bar Association Silver Gavel Awards for Media and the Arts\" refers to organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'"}
{"sample_id": 1346, "db_id": "law_episode", "final": {"question": "Which continent was Michael Preston born on?", "sql": "SELECT birth_country FROM Person WHERE name = 'Michael Preston'", "source_tables": ["person"]}, "evidence": "continent refers to birth_country"}
{"sample_id": 1347, "db_id": "law_episode", "final": {"question": "Who was the nominee playing the role of Katrina Ludlow in the Law & Order series?", "sql": "SELECT T2.name FROM Award AS T1 INNER JOIN Person AS T2 ON T1.person_id = T2.person_id WHERE T1.result = 'Nominee' AND T1.role = 'Katrina Ludlow' AND T1.series = 'Law and Order'", "source_tables": ["person", "award"]}, "evidence": "nominee refers to result = 'Nominee'; the role of Katrina Ludlow refers to role = 'Katrina Ludlow'"}
{"sample_id": 1348, "db_id": "law_episode", "final": {"question": "Who played the role of a teleplay in the episode that won \"Best Television Episode\"?", "sql": "SELECT T2.name FROM Award AS T1 INNER JOIN Person AS T2 ON T1.person_id = T2.person_id WHERE T1.result = 'Winner' AND T1.award = 'Best Television Episode'", "source_tables": ["person", "award"]}, "evidence": "the role of a teleplay refers to role = 'teleplay'; won refers to result = 'Winner'; \"Best Television Episode\" refers to award = 'Best Television Episode'"}
{"sample_id": 1349, "db_id": "law_episode", "final": {"question": "What is the date of birth of the actor who played the role of a \"writer\"?", "sql": "SELECT T2.birthdate FROM Award AS T1 INNER JOIN Person AS T2 ON T1.person_id = T2.person_id WHERE T1.role = 'writer'", "source_tables": ["person", "award"]}, "evidence": "date of birth refers to birthdate"}
{"sample_id": 1350, "db_id": "law_episode", "final": {"question": "Which episode was nominated for the award for \"Outstanding Costume Design for a Series\"?", "sql": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award = 'Outstanding Costume Design for a Series'", "source_tables": ["episode", "award"]}, "evidence": "episode refers to title; \"Outstanding Costume Design for a Series\" refers to award = 'Outstanding Costume Design for a Series'"}
{"sample_id": 1351, "db_id": "law_episode", "final": {"question": "Which episode has the highest total number of viewer votes?", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id GROUP BY T1.title ORDER BY SUM(T1.votes) DESC LIMIT 1", "source_tables": ["episode", "vote"]}, "evidence": "episode refers to title; the highest total number of viewer votes refers to max(sum(votes))"}
{"sample_id": 1352, "db_id": "law_episode", "final": {"question": "Who was the actor who was portraying \"Alex Brown\" and has been credited?", "sql": "SELECT T1.name FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.person_id = T2.person_id WHERE T2.role = 'Alex Brown' AND T2.credited = 'true'", "source_tables": ["person", "credit"]}, "evidence": "who refers to name; portraying \"Alex Brown\" refers to role = 'Alex Brown'; has been credited refers to credited = 'true'"}
{"sample_id": 1353, "db_id": "law_episode", "final": {"question": "Where is the place of birth of the actor with the number nm0007064 who has not been credited for playing the role of a \"Narrator\"?", "sql": "SELECT DISTINCT T1.birth_place FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.person_id = T2.person_id WHERE T1.person_id = 'nm0007064' AND T2.role = 'Narrator' AND T2.credited = 'false'", "source_tables": ["person", "credit"]}, "evidence": "place of birth refers to birth_place; actor with the number nm0007064 refers to person_id = 'nm007064'; has not been credited refers to credited = ''; the role of a \"Narrator\" refers to role = 'narrator'"}
{"sample_id": 1354, "db_id": "law_episode", "final": {"question": "What are the keywords of the episode \"Shield\"?", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Shield'", "source_tables": ["episode", "keyword"]}, "evidence": "the episode \"Shield\" refers to title = 'Shield'"}
{"sample_id": 1355, "db_id": "law_episode", "final": {"question": "Who are the actors with a height of over 1.80m in an episode that won an award?", "sql": "SELECT T2.name FROM Award AS T1 INNER JOIN Person AS T2 ON T1.person_id = T2.person_id WHERE T1.result = 'Winner' AND T2.height_meters > 1.80", "source_tables": ["person", "award"]}, "evidence": "who refers to name; a height of over 1.80m refers to height_meters > 1.80; won an award refers to result = 'Winner'"}
{"sample_id": 1356, "db_id": "law_episode", "final": {"question": "Which episode has the two keywords \"nun\" and \"priest\"?", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T2.keyword IN ('nun', 'priest')", "source_tables": ["episode", "keyword"]}, "evidence": "episode refers to title; the two keywords \"nun\" and \"priest\" refers to keyword = 'nun' or keyword = 'priest';"}
{"sample_id": 1357, "db_id": "law_episode", "final": {"question": "Which episode number has the second highest positive viewer comments and has been awarded \"Best Television Episode\"?", "sql": "SELECT T2.episode_id FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award = 'Best Television Episode' AND T1.result = 'Winner' ORDER BY T2.rating DESC LIMIT 2", "source_tables": ["episode", "award"]}, "evidence": "episode number refers to episode_id; awarded \"Best Television Episode\" refers to award = 'Best Television Episode' and result = 'Winner'; the second highest positive viewer comments refers to rating = 8.5"}
{"sample_id": 1358, "db_id": "law_episode", "final": {"question": "Please list any three episodes that were most enjoyed by the viewers.", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10 LIMIT 3", "source_tables": ["episode", "vote"]}, "evidence": "episode refers to title; most enjoyed by the viewers refers to stars = 10"}
{"sample_id": 1507, "db_id": "synthea", "final": {"question": "Mention the description of the care plan of American patients.", "sql": "SELECT DISTINCT T1.DESCRIPTION FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.ethnicity = 'american'", "source_tables": ["patients", "careplans"]}, "evidence": "American refers to ethnicity = 'american';"}
{"sample_id": 1508, "db_id": "synthea", "final": {"question": "What are the medical encounter ids of patients who were born in Pembroke MA US?", "sql": "SELECT DISTINCT T1.ENCOUNTER FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.birthplace = 'Pembroke MA US'", "source_tables": ["patients", "careplans"]}, "evidence": "medical encounter ids careplans.ID; born in Pembroke MA US refers to birthplace = 'Pembroke MA US';"}
{"sample_id": 1509, "db_id": "synthea", "final": {"question": "List out the start date of the care plan of alive patients.", "sql": "SELECT DISTINCT T1.START FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.deathdate IS NULL", "source_tables": ["patients", "careplans"]}, "evidence": "start of the care plan refers to careplans.START; alive patients refers to deathdate is null;"}
{"sample_id": 1510, "db_id": "synthea", "final": {"question": "How many white patients have the reason code of 10509002?", "sql": "SELECT COUNT(DISTINCT T1.PATIENT) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.race = 'white' AND T1.REASONCODE = '10509002'", "source_tables": ["patients", "careplans"]}, "evidence": "white refers to race = 'white'; reason code of 10509002 refers to careplans.REASONCODE = '10509002';"}
{"sample_id": 1511, "db_id": "synthea", "final": {"question": "List out full name of patients who have \"Diabetic diet\" in the description of the care plan.", "sql": "SELECT DISTINCT T2.first, T2.last FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Diabetic diet'", "source_tables": ["patients", "careplans"]}, "evidence": "full name = first, last; Diabetic diet refers to careplans.DESCRIPTION = 'Diabetic diet';"}
{"sample_id": 1512, "db_id": "synthea", "final": {"question": "List out the stop date of the care plan of dead patients.", "sql": "SELECT DISTINCT T1.STOP FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.deathdate IS NOT NULL AND T1.STOP IS NOT NULL", "source_tables": ["patients", "careplans"]}, "evidence": "stop date of the care plan refers to careplans.STOP; dead patients refers to deathdate is not null;"}
{"sample_id": 1513, "db_id": "synthea", "final": {"question": "How many Italian patients have the care plan code of 304510005?", "sql": "SELECT COUNT(DISTINCT T2.patient) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.ethnicity = 'italian' AND T1.CODE = '304510005'", "source_tables": ["patients", "careplans"]}, "evidence": "Italian patients refers to ethnicity = 'italian';"}
{"sample_id": 1514, "db_id": "synthea", "final": {"question": "What is the percentage of female patients who started the care plan in 2010?", "sql": "SELECT CAST(SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.PATIENT) AS percentage FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE strftime('%Y', T1.START) = '2010'", "source_tables": ["patients", "careplans"]}, "evidence": "female patients refers to gender = 'F'; started the care plan in 2010 refers to substr(careplans.START, 1, 4) = '2010'; percentage = MULTIPLY(DIVIDE(COUNT(patients.patient WHERE patients.gender = 'F'), COUNT(patients.patient) WHERE substr(careplans.START, 1, 4) = '2010'), 100);"}
{"sample_id": 1515, "db_id": "synthea", "final": {"question": "How many black patients stopped their care plan in 2017?", "sql": "SELECT COUNT(DISTINCT T2.patient) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.race = 'black' AND strftime('%Y', T1.STOP) = '2017'", "source_tables": ["patients", "careplans"]}, "evidence": "black refers to race = 'black'; stopped their care plan in 2017 refers to substr(careplans.STOP, 1, 4) = '2017';"}
{"sample_id": 1516, "db_id": "synthea", "final": {"question": "How many male patients have prediabetes condition?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 WHERE T2.DESCRIPTION = 'Prediabetes' AND T1.gender = 'M'", "source_tables": ["patients", "conditions"]}, "evidence": "male refers to gender = 'M'; prediabetes condition refers to conditions.DESCRIPTION = 'Prediabetes';"}
{"sample_id": 1517, "db_id": "synthea", "final": {"question": "List the full names of patients with nut allergy.", "sql": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Allergy to nut'", "source_tables": ["allergies", "patients"]}, "evidence": "full names = first, last; nut allergy refers to allergies.DESCRIPTION = 'Allergy to nut';"}
{"sample_id": 1518, "db_id": "synthea", "final": {"question": "Describe the condition of patient Wilmer Koepp.", "sql": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Wilmer' AND T1.last = 'Koepp'", "source_tables": ["patients", "conditions"]}, "evidence": ""}
{"sample_id": 1519, "db_id": "synthea", "final": {"question": "Among the patients with viral sinusitis condition, which patient's gender is most affected? Provide the number for each respectively.", "sql": "SELECT SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END), SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Viral sinusitis (disorder)'", "source_tables": ["patients", "conditions"]}, "evidence": "viral sinusitis condition refers to conditions.DESCRIPTION = 'Viral sinusitis (disorder)'; gender that is most affected refers to MAX(COUNT(gender WHERE conditions.DESCRIPTION = 'Viral sinusitis (disorder)'));"}
{"sample_id": 1520, "db_id": "synthea", "final": {"question": "Provide the full names of patients who have been taking Penicillin V Potassium 250 MG since 1948.", "sql": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Penicillin V Potassium 250 MG' AND strftime('%Y', T2.START) >= '1948'", "source_tables": ["medications", "patients"]}, "evidence": "full names = first, last; Penicillin V Potassium 250 MG refers to medications.DESCRIPTION = 'Penicillin V Potassium 250 MG'; since 1948 refers to substr(medications.START, 1, 4) > = '1948';"}
{"sample_id": 1521, "db_id": "synthea", "final": {"question": "How many white patients whose birth year is 1935 have a stroke?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.patient WHERE strftime('%Y', T1.birthdate) = '1935' AND T1.race = 'white' AND T2.DESCRIPTION = 'Stroke'", "source_tables": ["patients", "conditions"]}, "evidence": "white refers to race = 'white'; birth year is 1935 refers to substr(birthdate, 1, 4) = '1935'; stroke refers to conditions.DESCRIPTION = 'Stroke';"}
{"sample_id": 1522, "db_id": "synthea", "final": {"question": "Which conditions the patient has when receiving the IPV immunization?", "sql": "SELECT DISTINCT T2.DESCRIPTION FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT INNER JOIN immunizations AS T3 ON T1.patient = T3.PATIENT WHERE T3.DESCRIPTION = 'IPV'", "source_tables": ["immunizations", "patients", "conditions"]}, "evidence": "IPV immunization refers to immunizations.DESCRIPTION = 'IPV';"}
{"sample_id": 1523, "db_id": "synthea", "final": {"question": "List the patient ids whose disease has the most occurrences.", "sql": "SELECT T1.patient FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT INNER JOIN all_prevalences AS T3 ON T3.ITEM = T2.DESCRIPTION ORDER BY T3.OCCURRENCES DESC LIMIT 1", "source_tables": ["patients", "conditions", "all_prevalences"]}, "evidence": "patient ids refers to patients.patient; disease with the most occurrence refers to MAX(all_prevalences.OCCURENCES);"}
{"sample_id": 1524, "db_id": "synthea", "final": {"question": "List all the full names of patients with a condition described as cystitis.", "sql": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.patient WHERE T2.DESCRIPTION = 'Cystitis'", "source_tables": ["patients", "conditions"]}, "evidence": "full names = first, last; condition described as cystitis refers to conditions.DESCRIPTION = ''Cystitis';"}
{"sample_id": 1525, "db_id": "synthea", "final": {"question": "How many male patients have been described as immune to quadrivalent HPV?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'HPV  quadrivalent' AND T1.gender = 'M'", "source_tables": ["immunizations", "patients"]}, "evidence": "male refers to gender = 'M'; immune to quadrivalent HPV refers to immunizations.DESCRIPTION = 'HPV quadrivalent';"}
{"sample_id": 1526, "db_id": "synthea", "final": {"question": "Indicate the start date of patient Walter Bahringer's care plan.", "sql": "SELECT DISTINCT T2.start FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Walter' AND T1.last = 'Bahringer'", "source_tables": ["patients", "careplans"]}, "evidence": "start date of the care plan refers to careplans.START;"}
{"sample_id": 1527, "db_id": "synthea", "final": {"question": "Describe the care plans of patient Major D'Amore's plan of care.", "sql": "SELECT DISTINCT T2.DESCRIPTION FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Major' AND T1.last = 'D''Amore'", "source_tables": ["patients", "careplans"]}, "evidence": ""}
{"sample_id": 1528, "db_id": "synthea", "final": {"question": "Calculate the percentage of male patients with viral sinusitis condition.", "sql": "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Viral sinusitis (disorder)'", "source_tables": ["patients", "conditions"]}, "evidence": "percentage = MULTIPLY(DIVIDE(COUNT(patients.patient WHERE gender = 'M'), COUNT(patients.patient) WHERE conditions.DESCRIPTION = 'Viral sinusitis (disorder))), 100); male patients refers to gender = 'M'; viral sinusitis condition refers to conditions.DESCRIPTION = 'Viral sinusitis (disorder)';"}
{"sample_id": 1529, "db_id": "synthea", "final": {"question": "Among the patients who have been using Penicillin V Potassium 250 MG, what percentage of patients are female?", "sql": "SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.patient) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Penicillin V Potassium 250 MG'", "source_tables": ["medications", "patients"]}, "evidence": "Penicillin V Potassium 250 MG refers to medications.DESCRIPTION = 'Penicillin V Potassium 250 MG'; percentage = MULTIPLY(DIVIDE(patients.patient WHERE gender = 'F'), COUNT(patients.patient) WHERE medications.DESCRIPTION = 'Penicillin V Potassium 250 MG'), 100) female refers to gender = 'F';"}
{"sample_id": 1530, "db_id": "synthea", "final": {"question": "Among the white patients, what is the average body height of the patients?", "sql": "SELECT AVG(T1.VALUE) FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.race = 'white' AND T1.DESCRIPTION = 'Body Height'", "source_tables": ["patients", "observations"]}, "evidence": "white refers to race = 'white'; average body height = AVG(observations.VALUE WHERE observations.DESCRIPTION = 'Body Height'); body height refers to observations.DESCRIPTION = 'Body Height';"}
{"sample_id": 1531, "db_id": "synthea", "final": {"question": "Indicate the care plan needed for the patient living at 179 Sydni Roads, Taunton, MA 02780 US.", "sql": "SELECT T1.DESCRIPTION FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.address = '179 Sydni Roads Taunton MA 02780 US'", "source_tables": ["patients", "careplans"]}, "evidence": "living at 179 Sydni Roads, Taunton, MA 02780 US refers to address = '179 Sydni Roads Taunton MA 02780 US';"}
{"sample_id": 1532, "db_id": "synthea", "final": {"question": "Provide the allergen of the Dominican patient named Dirk Languish.", "sql": "SELECT T1.DESCRIPTION FROM allergies AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.first = 'Dirk' AND T2.last = 'Langosh' AND T2.ethnicity = 'dominican'", "source_tables": ["allergies", "patients"]}, "evidence": "allergen refers to allergies.DESCRIPTION;"}
{"sample_id": 1533, "db_id": "synthea", "final": {"question": "How many patients who are allergic to peanuts have asthma?", "sql": "SELECT COUNT(DISTINCT T2.patient) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient INNER JOIN allergies AS T3 ON T2.patient = T3.PATIENT WHERE T1.DESCRIPTION = 'Asthma' AND T3.DESCRIPTION = 'Allergy to peanuts'", "source_tables": ["allergies", "patients", "conditions"]}, "evidence": "allergic to peanuts refers to allergies.DESCRIPTION = 'Allergy to peanuts'; asthma refers to conditions.DESCRIPTION = 'Asthma';"}
{"sample_id": 1534, "db_id": "synthea", "final": {"question": "Who is the 44-year-old patient diagnosed with drug overdose?", "sql": "SELECT T2.first, T2.last FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Drug overdose' AND ROUND((strftime('%J', T2.deathdate) - strftime('%J', T2.birthdate)) / 365) = 44", "source_tables": ["patients", "conditions"]}, "evidence": "44-year-old = DIVIDE(SUBTRACT(julianday(conditions.START), julianday(patients.birthdate)), 365, 0) = 44;"}
{"sample_id": 1535, "db_id": "synthea", "final": {"question": "Provide the social security number of the patient with the highest systolic blood pressure.", "sql": "SELECT T2.ssn FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Systolic Blood Pressure' ORDER BY T1.VALUE DESC LIMIT 1", "source_tables": ["patients", "observations"]}, "evidence": "social security number refers to ssn; highest systolic blood pressure refers to MAX(observations.VALUE WHERE observations.DESCRIPTION = 'Systolic Blood Pressure');"}
{"sample_id": 1536, "db_id": "synthea", "final": {"question": "What is the care plan description of the prevalent disease with the highest prevalence percentage?", "sql": "SELECT T4.DESCRIPTION FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON T2.DESCRIPTION = T1.ITEM INNER JOIN encounters AS T3 ON T2.ENCOUNTER = T3.ID INNER JOIN careplans AS T4 ON T4.ENCOUNTER = T3.ID ORDER BY T1.'PREVALENCE PERCENTAGE' DESC LIMIT 1", "source_tables": ["encounters", "careplans", "conditions", "all_prevalences"]}, "evidence": "highest prevalence percentage refers to MAX(PREVALENCE PERCENTAGE);"}
{"sample_id": 1537, "db_id": "synthea", "final": {"question": "What is the care plan for the patient with social security number 999-15-3685?", "sql": "SELECT DISTINCT T1.DESCRIPTION FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.ssn = '999-15-3685'", "source_tables": ["patients", "careplans"]}, "evidence": "social security number refers to ssn; ssn = '999-15-3685';"}
{"sample_id": 1538, "db_id": "synthea", "final": {"question": "Calculate the average age of the male patients that have hypertension.", "sql": "SELECT SUM(CASE WHEN T2.deathdate IS NULL THEN ROUND((strftime('%J', date('now')) - strftime('%J', T2.birthdate)) / 365) ELSE ROUND((strftime('%J', T2.deathdate) - strftime('%J', T2.birthdate)) / 365) END) / COUNT(T2.patient) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Hypertension' AND T2.gender = 'M'", "source_tables": ["patients", "conditions"]}, "evidence": "average age = AVG(DIVIDE(SUBTRACT(deathdate is null WHERE (julianday(substr(datetime('now'), 1, 10)))), julianday(patients.birthdate)), 365); male refers to gender = 'M'; hypertension refers to conditions.DESCRIPTION = 'Hypertension'"}
{"sample_id": 1539, "db_id": "synthea", "final": {"question": "List 5 patients' name that need medication due to streptococcal sore throat disorder.", "sql": "SELECT DISTINCT T2.first, T2.last FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.REASONDESCRIPTION = 'Streptococcal sore throat (disorder)' LIMIT 5", "source_tables": ["medications", "patients"]}, "evidence": "patients name = first, last; streptococcal sore throat disorder refers to medications.REASONDESCRIPTION = 'Streptococcal sore throat (disorder)';"}
{"sample_id": 1540, "db_id": "synthea", "final": {"question": "Who is the patient with a body weight of 61.97 kg?", "sql": "SELECT T2.first, T2.last FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Body Weight' AND T1.UNITS = 'kg' AND T1.VALUE = 61.97", "source_tables": ["patients", "observations"]}, "evidence": "body weight of 61.97 kg refers to observations.DESCRIPTION = 'Body Weight' AND observations.VALUE = 61.97; observations.UNITS = 'kg'"}
{"sample_id": 1541, "db_id": "synthea", "final": {"question": "Among the male patients, list down 5 birth dates of patients taking the medication \"Penicillin V Potassium 250 MG\".", "sql": "SELECT DISTINCT T2.birthdate FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Penicillin V Potassium 250 MG' AND T2.gender = 'M' LIMIT 5", "source_tables": ["medications", "patients"]}, "evidence": "male patients refers to gender = 'M'; Penicillin V Potassium 250 MG refers to medications.DESCRIPTION = 'Penicillin V Potassium 250 MG';"}
{"sample_id": 1542, "db_id": "synthea", "final": {"question": "List down the full name of Irish patients diagnosed with the prevalent diseases that have an occurrence greater than the 96% of the average occurrences of all conditions.", "sql": "SELECT DISTINCT T2.first, T2.last FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient INNER JOIN all_prevalences AS T3 ON T1.DESCRIPTION = T3.ITEM WHERE T2.ethnicity = 'irish' AND 100 * CAST(T3.OCCURRENCES AS REAL) / ( SELECT AVG(OCCURRENCES) FROM all_prevalences ) > 96", "source_tables": ["patients", "conditions", "all_prevalences"]}, "evidence": "full name = first, last; Irish refers to ethnicity = 'irish'; prevalent diseases that have an occurrence greater than the 96% of the average occurrences of all conditions = OCCURRENCES > (AVG(MULTIPLY(all_prevalences.OCCURRENCES, 0.96)));"}
{"sample_id": 1543, "db_id": "synthea", "final": {"question": "What is the difference between the number of married patients and the number of single patients with diabetes?", "sql": "SELECT SUM(CASE WHEN T2.marital = 'M' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.marital = 'S' THEN 1 ELSE 0 END) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Diabetes'", "source_tables": ["patients", "conditions"]}, "evidence": "difference = SUBTRACT(patients.patient WHERE marital = 'M'), COUNT(patients.patient WHERE marital = 'S') WHERE conditions.DESCRIPTION = 'Diabetes'); married patients refers to marital = 'M'; single patients refers to marital = 'S'; diabetes refers to conditions.DESCRIPTION = 'Diabetes';"}
{"sample_id": 1644, "db_id": "car_retails", "final": {"question": "List all customer names with orders that are disputed.", "sql": "SELECT t3.firstName, t3.lastName FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber INNER JOIN employees AS t3 ON t2.salesRepEmployeeNumber = t3.employeeNumber WHERE t1.status = 'Disputed'", "source_tables": ["employees", "orders", "customers"]}, "evidence": "Orders that are disputed refer to status = 'Disputed'; the sales representative means employees; names refers to firstName, lastName."}
{"sample_id": 1645, "db_id": "car_retails", "final": {"question": "What is the percentage of employees are in Paris office?", "sql": "SELECT CAST(COUNT(CASE WHEN t1.city = 'Paris' THEN t2.employeeNumber ELSE NULL END) AS REAL) * 100 / COUNT(t2.employeeNumber) FROM offices AS t1 INNER JOIN employees AS t2 ON t1.officeCode = t2.officeCode", "source_tables": ["employees", "offices"]}, "evidence": "DIVIDE(COUNT(employeeNumber) when city = 'Paris'), (COUNT(employeeNumber)) as percentage;"}
{"sample_id": 1646, "db_id": "car_retails", "final": {"question": "Name the Sales Manager of Europe, Middle East, and Africa region. In which office does he/she report to?", "sql": "SELECT t2.firstName, t2.lastName FROM offices AS t1 INNER JOIN employees AS t2 ON t1.officeCode = t2.officeCode WHERE t2.jobTitle = 'Sale Manager (EMEA)'", "source_tables": ["employees", "offices"]}, "evidence": "Sales Manager refers to jobTitle; Europe, Middle East, and Africa region refers to territory = 'EMEA';"}
{"sample_id": 1647, "db_id": "car_retails", "final": {"question": "List the name of employees in Japan office and who are they reporting to.", "sql": "SELECT t2.firstName, t2.lastName, t2.reportsTo FROM offices AS t1 INNER JOIN employees AS t2 ON t1.officeCode = t2.officeCode WHERE t1.country = 'Japan'", "source_tables": ["employees", "offices"]}, "evidence": "Japan is the name of the country; 'reportsTO' is the leader of the 'employeeNumber';"}
{"sample_id": 1648, "db_id": "car_retails", "final": {"question": "Which customer ordered 1939 'Chevrolet Deluxe Coupe' at the highest price?", "sql": "SELECT t4.customerName FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode INNER JOIN orders AS t3 ON t2.orderNumber = t3.orderNumber INNER JOIN customers AS t4 ON t3.customerNumber = t4.customerNumber WHERE t1.productName = '1939 Chevrolet Deluxe Coupe' ORDER BY t2.priceEach DESC LIMIT 1", "source_tables": ["orderdetails", "orders", "products", "customers"]}, "evidence": "1939 'Chevrolet Deluxe Coupe' refers to productName; the highest price refers to MAX(priceEach)"}
{"sample_id": 1649, "db_id": "car_retails", "final": {"question": "What is the percentage of the payment amount in 2004 was made by Atelier graphique?", "sql": "SELECT SUM(CASE WHEN t1.customerName = 'Atelier graphique' THEN t2.amount ELSE 0 END) * 100 / SUM(t2.amount) FROM customers AS t1 INNER JOIN payments AS t2 ON t1.customerNumber = t2.customerNumber WHERE STRFTIME('%Y', t2.paymentDate) = '2004'", "source_tables": ["payments", "customers"]}, "evidence": "DIVIDE(SUM(amount) where customerName = 'Atelier graphique'), (SUM(amount)) as percentage where year(paymentDate) = 2004;"}
{"sample_id": 1650, "db_id": "car_retails", "final": {"question": "Calculate the actual profit for order number 10100.", "sql": "SELECT SUM((t1.priceEach - t2.buyPrice) * t1.quantityOrdered) FROM orderdetails AS t1 INNER JOIN products AS t2 ON t1.productCode = t2.productCode WHERE t1.orderNumber = '10100'", "source_tables": ["orderdetails", "products"]}, "evidence": "SUM(MULTIPLY(quantityOrdered (SUBTRACT (priceEach, buyPrice));"}
{"sample_id": 1651, "db_id": "car_retails", "final": {"question": "How much did customer 103 pay in total?", "sql": "SELECT SUM(t.amount) FROM payments t WHERE t.customerNumber = '103'", "source_tables": ["payments"]}, "evidence": "Pay in total refers to SUM(amount);"}
{"sample_id": 1652, "db_id": "car_retails", "final": {"question": "What is the total price of the order 10100?", "sql": "SELECT SUM(t.priceEach * t.quantityOrdered) FROM orderdetails t WHERE t.orderNumber = '10100'", "source_tables": ["orderdetails"]}, "evidence": "SUM(MULTIPLY(quantityOrdered, priceEach)"}
{"sample_id": 1653, "db_id": "car_retails", "final": {"question": "Please list the top three product names with the highest unit price.", "sql": "SELECT t1.productName FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode ORDER BY t2.priceEach DESC LIMIT 3", "source_tables": ["orderdetails", "products"]}, "evidence": "The highest unit price refers to MAX(priceEach)"}
{"sample_id": 1654, "db_id": "car_retails", "final": {"question": "Among the customers of empolyee 1370, who has the highest credit limit?Please list the full name of the contact person.", "sql": "SELECT t2.contactFirstName, t2.contactLastName FROM employees AS t1 INNER JOIN customers AS t2 ON t1.employeeNumber = t2.salesRepEmployeeNumber WHERE t1.employeeNumber = '1370' ORDER BY t2.creditLimit DESC LIMIT 1", "source_tables": ["employees", "customers"]}, "evidence": "Employee 1370 refers to employeeNumber = '1370';"}
{"sample_id": 1655, "db_id": "car_retails", "final": {"question": "How many 2003 Harley-Davidson Eagle Drag Bikes were ordered?", "sql": "SELECT SUM(t2.quantityOrdered) FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode WHERE t1.productName = '2003 Harley-Davidson Eagle Drag Bike'", "source_tables": ["orderdetails", "products"]}, "evidence": "2003 Harley-Davidson Eagle Drag Bikes refers to productName; how many ordered refers to COUNT(quantityOrdered);"}
{"sample_id": 1656, "db_id": "car_retails", "final": {"question": "When was the product with the highest unit price shipped?", "sql": "SELECT t1.shippedDate FROM orders AS t1 INNER JOIN orderdetails AS t2 ON t1.orderNumber = t2.orderNumber ORDER BY t2.priceEach DESC LIMIT 1", "source_tables": ["orderdetails", "orders"]}, "evidence": "The highest unit price refers to MAX(priceEach); when shipped refers to shippedDate;"}
{"sample_id": 1657, "db_id": "car_retails", "final": {"question": "How many motorcycles have been ordered in 2004?", "sql": "SELECT SUM(t2.quantityOrdered) FROM orders AS t1 INNER JOIN orderdetails AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN products AS t3 ON t2.productCode = t3.productCode WHERE t3.productLine = 'motorcycles' AND STRFTIME('%Y', t1.orderDate) = '2004'", "source_tables": ["orderdetails", "orders", "products"]}, "evidence": "Motorcycles refer to productLine = 'motorcycles'; ordered in 2004 refers to year(orderDate) = 2004;"}
{"sample_id": 1658, "db_id": "car_retails", "final": {"question": "Please list the order number of the customer whose credit card has a limit of 45300.", "sql": "SELECT t1.orderNumber FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.creditLimit = 45300", "source_tables": ["orders", "customers"]}, "evidence": "Credit card does not have a limit refers to creditLimit = 45300;"}
{"sample_id": 1659, "db_id": "car_retails", "final": {"question": "For Which order was the most profitable, please list the customer name of the order and the profit of the order.", "sql": "SELECT t3.customerName, (t1.priceEach - t4.buyPrice) * t1.quantityOrdered FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber INNER JOIN products AS t4 ON t1.productCode = t4.productCode GROUP BY t3.customerName, t1.priceEach, t4.buyPrice, t1.quantityOrdered ORDER BY (t1.priceEach - t4.buyPrice) * t1.quantityOrdered DESC LIMIT 1", "source_tables": ["orderdetails", "orders", "products", "customers"]}, "evidence": "Most profitable order can be computed as MAX(MULTIPLY(quantityOrdered, SUBTRACT(priceEach, buyPrice))."}
{"sample_id": 1660, "db_id": "car_retails", "final": {"question": "How many transactions payment made by customer that is lower than 10000. Group the result by year.", "sql": "SELECT STRFTIME('%Y', t1.paymentDate), COUNT(t1.customerNumber) FROM payments AS t1 WHERE t1.amount < 10000 GROUP BY STRFTIME('%Y', t1.paymentDate)", "source_tables": ["payments"]}, "evidence": "Transactions payment lower than 10000 refer to COUNT(amount) < 1000; by year refers to YEAR(paymentDate)"}
{"sample_id": 1661, "db_id": "car_retails", "final": {"question": "List out 3 best seller products during year 2003 with their total quantity sold during 2003.", "sql": "SELECT t3.productName, SUM(t2.quantityOrdered) FROM orders AS t1 INNER JOIN orderdetails AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN products AS t3 ON t2.productCode = t3.productCode WHERE STRFTIME('%Y', t1.orderDate) = '2003' GROUP BY t3.productName ORDER BY SUM(t2.quantityOrdered) DESC LIMIT 3", "source_tables": ["orderdetails", "orders", "products"]}, "evidence": "Best selling products refer to products with MAX(quantityOrdered); 2003 refers to year(orderDate) = 2003;"}
{"sample_id": 1662, "db_id": "car_retails", "final": {"question": "List out sale rep that has sold 1969 Harley Davidson Ultimate Chopper. List out their names and quantity sold throughout the year.", "sql": "SELECT t5.firstName, t5.lastName, SUM(t2.quantityOrdered) FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode INNER JOIN orders AS t3 ON t2.orderNumber = t3.orderNumber INNER JOIN customers AS t4 ON t3.customerNumber = t4.customerNumber INNER JOIN employees AS t5 ON t4.salesRepEmployeeNumber = t5.employeeNumber WHERE t1.productName = '1969 Harley Davidson Ultimate Chopper' GROUP BY t5.lastName, t5.firstName", "source_tables": ["employees", "orders", "products", "orderdetails", "customers"]}, "evidence": "1969 Harley Davidson Ultimate Chopper refers to the name of the product; sale rep refers to employee; 2003 refers to year(orderDate) = 2003; quantity sold refers to quantityOrdered; their names refer to the name of customers; "}
{"sample_id": 1663, "db_id": "car_retails", "final": {"question": "Who are the sales representatives in New York City? List their full names.", "sql": "SELECT t1.lastName, t1.firstName FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t2.city = 'NYC' AND t1.jobTitle = 'Sales Rep'", "source_tables": ["employees", "offices"]}, "evidence": "New York City refers to city = 'NYC'; sales representative refers to jobTitle = 'Sales Rep';"}
{"sample_id": 1664, "db_id": "car_retails", "final": {"question": "Identify the customer and list down the country with the check number GG31455.", "sql": "SELECT t2.customerName, t2.country FROM payments AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.checkNumber = 'GG31455'", "source_tables": ["payments", "customers"]}, "evidence": ""}
{"sample_id": 1665, "db_id": "car_retails", "final": {"question": "How many 2001 Ferrari Enzo were ordered?", "sql": "SELECT SUM(t1.orderNumber) FROM orderdetails AS t1 INNER JOIN products AS t2 ON t1.productCode = t2.productCode WHERE t2.productName = '2001 Ferrari Enzo'", "source_tables": ["orderdetails", "products"]}, "evidence": "2001 Ferrari Enzo refers to productName;"}
{"sample_id": 1666, "db_id": "car_retails", "final": {"question": "Which 5 products has the lowest amount of orders? List the product names.", "sql": "SELECT t2.productName FROM orderdetails AS t1 INNER JOIN products AS t2 ON t1.productCode = t2.productCode GROUP BY t2.productName ORDER BY SUM(t1.quantityOrdered) ASC LIMIT 5", "source_tables": ["orderdetails", "products"]}, "evidence": "The lowest amount of orders refers to MIN(quantityOrdered);"}
{"sample_id": 1667, "db_id": "car_retails", "final": {"question": "List down the customer names with a disputed order status.", "sql": "SELECT t1.customerName FROM customers AS t1 INNER JOIN orders AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.status = 'Disputed'", "source_tables": ["orders", "customers"]}, "evidence": ""}
{"sample_id": 1668, "db_id": "car_retails", "final": {"question": "How many countries from the USA have an In Process order status?", "sql": "SELECT COUNT(t2.orderNumber) FROM customers AS t1 INNER JOIN orders AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.status = 'On Hold' AND t1.country = 'USA'", "source_tables": ["orders", "customers"]}, "evidence": "country = 'USA'"}
{"sample_id": 1669, "db_id": "car_retails", "final": {"question": "Calculate the total price of shipped orders belonging to Land of Toys Inc. under the classic car line of products.", "sql": "SELECT SUM(t3.priceEach * t3.quantityOrdered) FROM customers AS t1 INNER JOIN orders AS t2 ON t1.customerNumber = t2.customerNumber INNER JOIN orderdetails AS t3 ON t2.orderNumber = t3.orderNumber INNER JOIN products AS t4 ON t3.productCode = t4.productCode WHERE t4.productLine = 'Classic Cars' AND t1.customerName = 'Land of Toys Inc.' AND t2.status = 'Shipped'", "source_tables": ["orderdetails", "orders", "products", "customers"]}, "evidence": "SUM(MULTIPLY(quantityOrdered, priceEach)) where productLine = 'Classic Cars'; status = 'Shipped'; customername = 'Land of Toys Inc';"}
{"sample_id": 1763, "db_id": "restaurant", "final": {"question": "Among all asian restaurants in N. Milpitas Blvd., Milpitas, how many of them have restaurant ID greater than 385?", "sql": "SELECT COUNT(T1.id_restaurant) AS num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.city = 'milpitas' AND T2.food_type = 'asian' AND T1.street_name = 'n milpitas blvd' AND T1.id_restaurant > 385", "source_tables": ["generalinfo", "location"]}, "evidence": "asian restaurant refers to food_type = 'asian'; N. Milpitas Blvd. refers to street_name = 'n milpitas blvd'; Milpitas refers to city = 'milpitas'; restaurant ID greater than 385 refers to id_restaurant > 385"}
{"sample_id": 1764, "db_id": "restaurant", "final": {"question": "What is the restaurant's name and ID located at Ocean Avenue, San Francisco?", "sql": "SELECT T2.label, T1.id_restaurant FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.street_name = 'ocean avenue'", "source_tables": ["generalinfo", "location"]}, "evidence": "restaurant's name refers to label; Ocean Avenue refers to street_name = 'ocean avenue'; San Francisco refers to city = 'san francisco'"}
{"sample_id": 1765, "db_id": "restaurant", "final": {"question": "What is the full address of the restaurant named \"Sanuki Restaurant\"?", "sql": "SELECT T2.city, T1.street_num, T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'sanuki restaurant'", "source_tables": ["generalinfo", "location"]}, "evidence": "full address refers to city, street_num, street_name; restaurant named \"Sanuki Restaurant\" refers to label = 'sanuki restaurant'"}
{"sample_id": 1766, "db_id": "restaurant", "final": {"question": "List the food type of the restaurant located in 22779 6th St., Hayward City.", "sql": "SELECT T2.food_type FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_num = 22779 AND T1.street_name = '6th St' AND T2.city = 'hayward'", "source_tables": ["generalinfo", "location"]}, "evidence": "22779 refers to street_num = 22779; 6th St. refers to street_name = '6th St'"}
{"sample_id": 1767, "db_id": "restaurant", "final": {"question": "How many American restaurants are located in Front, San Francisco?", "sql": "SELECT COUNT(T2.food_type = 'american') FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.street_name = 'front'", "source_tables": ["generalinfo", "location"]}, "evidence": "American restaurant refers to food_type = 'american'; Front refers to street_name = 'front'; San Francisco refers to city = 'san francisco'"}
{"sample_id": 1768, "db_id": "restaurant", "final": {"question": "List the restaurant's ID that has a review greater than the 70% of average review of all American restaurants with street number greater than 2000.", "sql": "SELECT T1.id_restaurant FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.food_type = 'american' AND T1.street_num > 2000 GROUP BY T1.id_restaurant ORDER BY AVG(T2.review) * 0.7 DESC", "source_tables": ["generalinfo", "location"]}, "evidence": "American restaurant refers to food_type = 'american'; street number greater than 2000 refers to street_num > 2000; review greater than the 70% of average review refers to review > multiply(avg(review), 0.7)"}
{"sample_id": 1769, "db_id": "restaurant", "final": {"question": "Among the restaurants located on the street number ranges from 1000 to 2000, what is the percentage of Afghani restaurants are there?", "sql": "SELECT CAST(SUM(IIF(T2.food_type = 'afghani', 1, 0)) AS REAL) * 100 / COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE 1000 <= T1.street_num <= 2000", "source_tables": ["generalinfo", "location"]}, "evidence": "street number ranges from 1000 to 2000 refers to 1000 < = street_num < = 2000; Afghani restaurant refers to food_type = 'afghani'; percentage = divide(count(id_restaurant where food_type = 'afghani'), count(id_restaurant)) * 100%"}
{"sample_id": 1770, "db_id": "restaurant", "final": {"question": "What is the name of the most popular restaurant serving Asian foods in San Francisco?", "sql": "SELECT label FROM generalinfo WHERE food_type = 'asian' AND city = 'san francisco' AND review = ( SELECT MAX(review) FROM generalinfo WHERE food_type = 'asian' AND city = 'san francisco' )", "source_tables": ["generalinfo"]}, "evidence": "the most popular refers to max(review); Asian food refers to food_type = 'asian'; San Francisco refers to city = 'san francisco'"}
{"sample_id": 1771, "db_id": "restaurant", "final": {"question": "How many cities are there in Monterey?", "sql": "SELECT COUNT(DISTINCT city) FROM geographic WHERE region = 'monterey'", "source_tables": ["geographic"]}, "evidence": "Monterey refers to region = 'monterey'"}
{"sample_id": 1772, "db_id": "restaurant", "final": {"question": "How many deli in Belmont have a review rating of 2 or more?", "sql": "SELECT COUNT(id_restaurant) FROM generalinfo WHERE city = 'belmont' AND review > 2 AND food_type = 'deli'", "source_tables": ["generalinfo"]}, "evidence": "deli ris a food type; Belmont refers to city = 'belmont'; review rating of 2 or more refers to review > 2"}
{"sample_id": 1773, "db_id": "restaurant", "final": {"question": "Which county in northern California has the highest number of cities?", "sql": "SELECT county FROM geographic WHERE region = 'northern california' GROUP BY county ORDER BY COUNT(city) DESC LIMIT 1", "source_tables": ["geographic"]}, "evidence": "northern California refers to region = 'northern california'; the highest number of cities refers to max(count(city))"}
{"sample_id": 1774, "db_id": "restaurant", "final": {"question": "How many restaurants can you find in Concord?", "sql": "SELECT COUNT(id_restaurant) FROM location WHERE city = 'concord'", "source_tables": ["location"]}, "evidence": "Concord refers to city = 'concord'"}
{"sample_id": 1775, "db_id": "restaurant", "final": {"question": "In which region can you find the top 4 most popular restaurants?", "sql": "SELECT T2.region FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city ORDER BY T1.review DESC LIMIT 4", "source_tables": ["geographic", "generalinfo"]}, "evidence": "the top 4 most popular restaurant refers to top 4 max(review)"}
{"sample_id": 1776, "db_id": "restaurant", "final": {"question": "How many Chinese restaurants are there on 1st st, Livermore?", "sql": "SELECT COUNT(T1.id_restaurant) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'livermore' AND T1.food_type = 'chinese' AND T2.street_name = '1st st'", "source_tables": ["generalinfo", "location"]}, "evidence": "Chinese restaurant refers to food_type = 'chinese'; 1st st refers to street_name = '1st st'; Livermore refers to city = 'livermore'"}
{"sample_id": 1777, "db_id": "restaurant", "final": {"question": "How many Indian restaurants are there in the Los Angeles area?", "sql": "SELECT COUNT(T1.city) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'indian' AND T1.region = 'los angeles area'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "Indian restaurant refers to food_type = 'indian'; the Los Angeles area refers to region = 'los angeles area'"}
{"sample_id": 1778, "db_id": "restaurant", "final": {"question": "In the Bay Area, what is the most common type of food served by restaurants?", "sql": "SELECT T2.food_type FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'bay area' GROUP BY T2.food_type ORDER BY COUNT(T2.food_type) DESC LIMIT 1", "source_tables": ["geographic", "generalinfo"]}, "evidence": "the Bay Area refers to region = 'bay area'; the most common type of food refers to max(count(food_type))"}
{"sample_id": 1779, "db_id": "restaurant", "final": {"question": "How many restaurants in Broadway, Oakland received a review of no more than 3?", "sql": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.street_name = 'broadway' AND T2.review < 3 AND T1.city = 'oakland'", "source_tables": ["generalinfo", "location"]}, "evidence": "Broadway refers to street_name = 'broadway';\u00a0 Oakland refers to city = 'oakland'; a review of no more than 3 refers to review < 3"}
{"sample_id": 1780, "db_id": "restaurant", "final": {"question": "In which region can you find the highest number of Baskin Robbins restaurants?", "sql": "SELECT T2.region AS num FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label = 'baskin robbins' GROUP BY T2.region ORDER BY COUNT(T1.city) DESC LIMIT 1", "source_tables": ["geographic", "generalinfo"]}, "evidence": "the highest number refers to max(count(city)); Baskin Robbins restaurant refers to label = 'baskin robbins'"}
{"sample_id": 1781, "db_id": "restaurant", "final": {"question": "List all the streets where pizza-serving restaurants are found in San Jose.", "sql": "SELECT T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'pizza' AND T1.city = 'san jose'", "source_tables": ["generalinfo", "location"]}, "evidence": "street refers to street_name; pizza-serving restaurant refers to food_type = 'pizza'; San Jose refers to city = 'san jose'"}
{"sample_id": 1782, "db_id": "restaurant", "final": {"question": "How many types of restaurants are there in the Yosemite and Mono Lake area?", "sql": "SELECT COUNT(T2.food_type) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'yosemite and mono lake area'", "source_tables": ["geographic", "generalinfo"]}, "evidence": ""}
{"sample_id": 1783, "db_id": "restaurant", "final": {"question": "What is the full address of the most popular restaurant among the diners?", "sql": "SELECT T2.street_name, T2.street_num, T2.city FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant ORDER BY T1.review DESC LIMIT 1", "source_tables": ["generalinfo", "location"]}, "evidence": "full address refers to street_num, street_name, city; the most popular refers to max(review)"}
{"sample_id": 1784, "db_id": "restaurant", "final": {"question": "In which counties can you find the restaurant with the highest number of branches?", "sql": "SELECT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city GROUP BY T2.county ORDER BY COUNT(T1.label) DESC LIMIT 1", "source_tables": ["geographic", "generalinfo"]}, "evidence": "restaurant refers to label; the highest number of branches refers to max(count(city))"}
{"sample_id": 1785, "db_id": "restaurant", "final": {"question": "Which region has the highest number of restaurants?", "sql": "SELECT T1.region FROM geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city GROUP BY T1.region ORDER BY COUNT(T2.id_restaurant) DESC LIMIT 1", "source_tables": ["geographic", "location"]}, "evidence": "the highest number refers to max(count(id_restaurant))"}
{"sample_id": 1786, "db_id": "restaurant", "final": {"question": "List the full address of all the American restaurants with a review of 4 or more?", "sql": "SELECT T1.street_num, T1.street_name, T1.city FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.review >= 4", "source_tables": ["generalinfo", "location"]}, "evidence": "full address refers to street_num, street_name, city; American restaurant refers to food_type = 'american'; a review of 4 or more refers to review > 4"}
{"sample_id": 1992, "db_id": "soccer_2016", "final": {"question": "Among the matches played by Royal Challengers Bangalore, what is the match ID of the match with the highest winning margin?", "sql": "SELECT T2.match_id FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner WHERE T1.team_name = 'Royal Challengers Bangalore' AND T2.match_date LIKE '2012%' ORDER BY T2.win_margin DESC LIMIT 1", "source_tables": ["team", "match"]}, "evidence": "Royal Challengers Bangalore refers to team_name = 'Royal Challengers Bangalore'; highest winning margin refers to MAX(win_margin)"}
{"sample_id": 1993, "db_id": "soccer_2016", "final": {"question": "How many times did K Goel played as a player only?", "sql": "SELECT COUNT(T1.Match_Id) FROM Player_Match AS T1 INNER JOIN Player AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T1.Role_Id = T3.Role_Id WHERE T2.Player_Name = 'K Goel' AND T3.Role_Id = 3", "source_tables": ["player", "player_match", "rolee"]}, "evidence": "K Goel refers to Player_Name = 'K Goel'; played as a player only refers to Role_Id = 3"}
{"sample_id": 1994, "db_id": "soccer_2016", "final": {"question": "What is the average winning margin of the matches held in Newlands?", "sql": "SELECT AVG(T1.win_margin) FROM Match AS T1 INNER JOIN Venue AS T2 ON T1.venue_id = T2.venue_id WHERE T2.venue_name = 'Newlands'", "source_tables": ["venue", "match"]}, "evidence": "average winning margin refers to avg(win_margin); held in Newlands refers to venue_name = 'Newlands'"}
{"sample_id": 1995, "db_id": "soccer_2016", "final": {"question": "Provide the losing team's name in the match ID 336039.", "sql": "SELECT Team_Name FROM Team WHERE Team_Id = ( SELECT CASE WHEN Team_1 = Match_Winner THEN Team_2 ELSE Team_1 END FROM Match WHERE match_id = 336039 )", "source_tables": ["team", "match"]}, "evidence": "losing team's name refers to Team_Id NOT in \"match_winner\" column"}
{"sample_id": 1996, "db_id": "soccer_2016", "final": {"question": "What is the venue for the match ID 829768?", "sql": "SELECT T1.Venue_Name FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.venue_id = T2.venue_id WHERE T2.match_id = 829768", "source_tables": ["venue", "match"]}, "evidence": "\nvenue refers to Venue_Name"}
{"sample_id": 1997, "db_id": "soccer_2016", "final": {"question": "What is the second team's name in the match with the lowest winning margin?", "sql": "SELECT T1.team_name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.team_2 ORDER BY T2.win_margin LIMIT 1", "source_tables": ["team", "match"]}, "evidence": "lowest winning margin refers to MIN(win_margin); team name refers to team_name; second team refers to team_2"}
{"sample_id": 1998, "db_id": "soccer_2016", "final": {"question": "Among the matches in 2013, what is the percentage of winning of the team \"Mumbai Indians\"?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Match_Winner = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Match_Winner) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T2.Match_Date LIKE '2013%'", "source_tables": ["team", "match"]}, "evidence": "in 2013 refers to Match_Date like '2013%'; winning of the team \"Mumbai Indians\" refers to Match_Winner = 7; percentage refers to DIVIDE(COUNT(Match_Winner = 7), COUNT(Match_Winner))"}
{"sample_id": 1999, "db_id": "soccer_2016", "final": {"question": "What is the difference between the number of matches where SC Ganguly played as a Captain and those matches where he played other roles?", "sql": "SELECT SUM(CASE WHEN T3.Role_Id = 1 THEN 1 ELSE 0 END) - SUM(CASE WHEN T3.Role_Id > 1 THEN 1 ELSE 0 END) FROM Player_Match AS T1 INNER JOIN Player AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T1.Role_Id = T3.Role_Id WHERE T2.Player_Name = 'SC Ganguly'", "source_tables": ["player", "player_match", "rolee"]}, "evidence": "SC Ganguly refers to Player_Name = 'SC Ganguly'; played as a Captain refers to Role_Id = 1; played other roles refers to Role_Id > 1; difference refers to SUBTRACT(COUNT(Role_Id = 1), COUNT(Role_Id > 1))"}
{"sample_id": 2000, "db_id": "soccer_2016", "final": {"question": "How many players have the bowling skill greater than 2?", "sql": "SELECT COUNT(Player_Name) FROM Player WHERE Bowling_skill > 2", "source_tables": ["player"]}, "evidence": "bowling skill greater than 2 refers to Bowling_skill > 2"}
{"sample_id": 2001, "db_id": "soccer_2016", "final": {"question": "How many players were born in 1970?", "sql": "SELECT COUNT(Player_Name) FROM Player WHERE DOB LIKE '1970%'", "source_tables": ["player"]}, "evidence": "born in 1970 refers to DOB like '1970%';"}
{"sample_id": 2002, "db_id": "soccer_2016", "final": {"question": "How many players were born in the 80s and have bowling skill of 2?", "sql": "SELECT COUNT(Player_Name) FROM Player WHERE DOB LIKE '198%' AND Bowling_skill = 2", "source_tables": ["player"]}, "evidence": "born in the 80s refers to DOB like '198%'; have bowling skill of 2 refers to Bowling_skill = 2;"}
{"sample_id": 2003, "db_id": "soccer_2016", "final": {"question": "How many matches are there in April, 2008?", "sql": "SELECT COUNT(Match_Id) FROM Match WHERE Match_date LIKE '2008-04%'", "source_tables": ["match"]}, "evidence": "in April, 2008 refers to Match_date like '2008-04%'"}
{"sample_id": 2004, "db_id": "soccer_2016", "final": {"question": "What is the city name of country ID 3?", "sql": "SELECT City_Name FROM City WHERE Country_ID = 3", "source_tables": ["city"]}, "evidence": ""}
{"sample_id": 2005, "db_id": "soccer_2016", "final": {"question": "How many victory matches were there in 2008?", "sql": "SELECT COUNT(Match_Id) FROM Match WHERE Match_Date LIKE '2008%' AND Match_Winner IS NOT NULL", "source_tables": ["match"]}, "evidence": "in 2008 refers to Match_Date like '2008%'"}
{"sample_id": 2006, "db_id": "soccer_2016", "final": {"question": "Provide the country ID of East London.", "sql": "SELECT Country_id FROM City WHERE City_Name = 'East London'", "source_tables": ["city"]}, "evidence": "East London refers to City_Name = 'East London'"}
{"sample_id": 2007, "db_id": "soccer_2016", "final": {"question": "How old is SC Ganguly in 2008?", "sql": "SELECT 2008 - strftime('%Y', DOB) FROM Player WHERE Player_Name = 'SC Ganguly'", "source_tables": ["player"]}, "evidence": "SC Ganguly refers to Player_Name = 'SC Ganguly'; old refers to SUBTRACT(2008, strftime('%Y',DOB))"}
{"sample_id": 2008, "db_id": "soccer_2016", "final": {"question": "List the names of players who play by the left hand.", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id WHERE T2.Batting_hand = 'Left-hand bat'", "source_tables": ["player", "batting_style"]}, "evidence": "play by the left hand refers to Batting_hand = \u00a0 'Left-hand bat'"}
{"sample_id": 2009, "db_id": "soccer_2016", "final": {"question": "How many players are Indians?", "sql": "SELECT COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_ID WHERE T2.Country_Name = 'India'", "source_tables": ["country", "player"]}, "evidence": "are Indians refers to Country_Name = 'India'"}
{"sample_id": 2010, "db_id": "soccer_2016", "final": {"question": "List the name of England players.", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_ID WHERE T2.Country_Name = 'England'", "source_tables": ["country", "player"]}, "evidence": "England players refers to Country_Name = 'England'"}
{"sample_id": 2011, "db_id": "soccer_2016", "final": {"question": "What is the venue name of Bandladore?", "sql": "SELECT T1.Venue_Name FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_ID = T2.City_ID WHERE T2.City_Name = 'Bangalore'", "source_tables": ["city", "venue"]}, "evidence": "Bandladore refers to City_Name = 'Bangalore'"}
{"sample_id": 2012, "db_id": "soccer_2016", "final": {"question": "What are the names of players who participated in season year 2008?", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match INNER JOIN Player_Match AS T3 ON T3.Player_Id = T1.Player_Id INNER JOIN Season AS T4 ON T2.Season_Id = T4.Season_Id WHERE T4.Season_Year = 2008 GROUP BY T1.Player_Name", "source_tables": ["season", "player", "player_match", "match"]}, "evidence": "season year 2008 refers to Season_Year = 2008"}
{"sample_id": 2013, "db_id": "soccer_2016", "final": {"question": "What are the names of players that have run scored less than 3?", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Batsman_Scored AS T3 ON T2.Match_ID = T3.Match_ID WHERE T3.Runs_Scored < 3 GROUP BY T1.Player_Name", "source_tables": ["batsman_scored", "player", "player_match"]}, "evidence": "scored less than 3 refers to Runs_Scored < 3; name of player refers to Player_name;"}
{"sample_id": 2014, "db_id": "soccer_2016", "final": {"question": "What is the role of SC Ganguly?", "sql": "SELECT T3.Role_Desc FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id WHERE T1.Player_Name = 'SC Ganguly' GROUP BY T3.Role_Desc", "source_tables": ["player", "player_match", "rolee"]}, "evidence": "SC Ganguly refers to Player_Name = 'SC Ganguly'; role refers to Role_Desc"}
{"sample_id": 2015, "db_id": "soccer_2016", "final": {"question": "List the names of players who played as a keeper.", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id WHERE T3.Role_Desc = 'Keeper' GROUP BY T1.Player_Name", "source_tables": ["player", "player_match", "rolee"]}, "evidence": "played as a keeper refers to Role_Desc = 'Keeper'; name of player refers to Player_Name;"}
{"sample_id": 2016, "db_id": "soccer_2016", "final": {"question": "What are the names of players in team 1?", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Team AS T3 ON T2.Team_Id = T3.Team_Id WHERE T3.Team_Id = 1 GROUP BY T1.Player_Name", "source_tables": ["player", "player_match", "team"]}, "evidence": "in team 1 refers to Team_Id = 1; name of player refers to Player_Name;"}
{"sample_id": 2017, "db_id": "soccer_2016", "final": {"question": "How many players played as a captain in season year 2008?", "sql": "SELECT COUNT(T1.Player_Id) FROM Player_Match AS T1 INNER JOIN Match AS T2 ON T1.Match_Id = T2.Match_Id INNER JOIN Rolee AS T3 ON T1.Role_Id = T3.Role_Id WHERE T3.Role_Desc = 'Captain' AND T2.Match_Date LIKE '2008%'", "source_tables": ["player_match", "match", "rolee"]}, "evidence": "played as a captain refers to Role_Desc = 'Captain'; in season year 2008 refers Match_Date like '2008%'"}
{"sample_id": 2018, "db_id": "soccer_2016", "final": {"question": "Which teams did SC Ganguly join in season year 2008?", "sql": "SELECT T5.Team_Name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match INNER JOIN Player_Match AS T3 ON T3.Player_Id = T1.Player_Id INNER JOIN Season AS T4 ON T2.Season_Id = T4.Season_Id INNER JOIN Team AS T5 ON T3.Team_Id = T5.Team_Id WHERE T4.Season_Year = 2008 AND T1.Player_Name = 'SC Ganguly' GROUP BY T5.Team_Name", "source_tables": ["season", "player", "player_match", "team", "match"]}, "evidence": "SC Ganguly refers to Player_Name = 'SC Ganguly'; in season year 2008 refers to Season_Year = 2008"}
{"sample_id": 2019, "db_id": "soccer_2016", "final": {"question": "What type did match ID 336000 win?", "sql": "SELECT T2.Win_Type FROM Match AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id WHERE T1.Match_Id = 336000", "source_tables": ["match", "win_by"]}, "evidence": "type of match won refers to Win_Type"}
{"sample_id": 2020, "db_id": "soccer_2016", "final": {"question": "Where did SB Joshi come from?", "sql": "SELECT T2.Country_Name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_ID WHERE T1.Player_Name = 'SB Joshi'", "source_tables": ["country", "player"]}, "evidence": "SB Joshi refers to Player_Name = 'SB Joshi'; where the player come from refers to Country_Name"}
{"sample_id": 2021, "db_id": "soccer_2016", "final": {"question": "How many players have left arm fast in bowling skill?", "sql": "SELECT COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id WHERE T2.Bowling_skill = 'Left-arm fast'", "source_tables": ["player", "bowling_style"]}, "evidence": "have left arm fast in bowling skill refers to Bowling_skill = 'Left-arm fast';"}
{"sample_id": 2022, "db_id": "soccer_2016", "final": {"question": "What is the outcome type of match ID 392195?", "sql": "SELECT T2.Outcome_Type FROM Match AS T1 INNER JOIN Outcome AS T2 ON T1.Outcome_type = T2.Outcome_Id WHERE T1.Match_Id = '392195'", "source_tables": ["outcome", "match"]}, "evidence": ""}
{"sample_id": 2023, "db_id": "soccer_2016", "final": {"question": "Who is the youngest player and which city did he/she come from?", "sql": "SELECT T3.City_Name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_Id INNER JOIN City AS T3 ON T2.Country_Id = T3.Country_Id ORDER BY T1.DOB LIMIT 1", "source_tables": ["city", "country", "player"]}, "evidence": "youngest player refers to MIN(DOB); city refers to City_Name"}
{"sample_id": 2024, "db_id": "soccer_2016", "final": {"question": "How many matches did team Kings XI Punjab win in season year 2008?", "sql": "SELECT COUNT(DISTINCT T2.Match_Id) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Player_Match AS T3 ON T1.Team_Id = T3.Team_Id INNER JOIN Season AS T4 ON T2.Season_Id = T4.Season_Id WHERE T1.Team_Name = 'Kings XI Punjab' AND T4.Season_Year = 2008", "source_tables": ["season", "player_match", "team", "match"]}, "evidence": "in season year 2008 refers to Season_Year = 2008; team Kings XI Punjab refers to Team_Name = 'Kings XI Punjab'"}
{"sample_id": 2025, "db_id": "soccer_2016", "final": {"question": "How many seasons did Pune Warriors participate in?", "sql": "SELECT COUNT(T.Season_Year) FROM ( SELECT T4.Season_Year FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Player_Match AS T3 ON T1.Team_Id = T3.Team_Id INNER JOIN Season AS T4 ON T2.Season_Id = T4.Season_Id WHERE T1.Team_Name = 'Pune Warriors' GROUP BY T4.Season_Year ) T", "source_tables": ["season", "player_match", "team", "match"]}, "evidence": "Pune Warriors refers to Team_Name = 'Pune Warriors'"}
{"sample_id": 2026, "db_id": "soccer_2016", "final": {"question": "What year was R Dravid born and the role he played?", "sql": "SELECT T1.DOB, T3.Role_Desc FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id WHERE T1.Player_Name = 'R Dravid' GROUP BY T1.DOB, T3.Role_Desc", "source_tables": ["player", "player_match", "rolee"]}, "evidence": "R Dravid refers to Player_Name = 'R Dravid'; year born refers to DOB; role refers to Role_Desc"}
{"sample_id": 2027, "db_id": "soccer_2016", "final": {"question": "How many times did SC Ganguly be the man of the match?", "sql": "SELECT COUNT(T2.Man_of_the_Match) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match INNER JOIN Player_Match AS T3 ON T3.Player_Id = T1.Player_Id WHERE T1.Player_Name = 'SC Ganguly'", "source_tables": ["player", "player_match", "match"]}, "evidence": "SC Ganguly refers to Player_Name = 'SC Ganguly'"}
{"sample_id": 2028, "db_id": "soccer_2016", "final": {"question": "How many matches did team Mumbai Indians win in 2008?", "sql": "SELECT COUNT(T.Match_Id) FROM ( SELECT T2.Match_Id FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Player_Match AS T3 ON T1.Team_Id = T3.Team_Id WHERE T1.Team_Name = 'Mumbai Indians' AND T2.Match_Date LIKE '2008%' GROUP BY T2.Match_Id ) T", "source_tables": ["player_match", "team", "match"]}, "evidence": "team Mumbai Indians refers to Team_Name = 'Mumbai Indians'; in 2008 refers to Match_Date like '2008%'"}
{"sample_id": 2029, "db_id": "soccer_2016", "final": {"question": "Which team won by wickets in match ID 335993?", "sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Player_Match AS T3 ON T1.Team_Id = T3.Team_Id INNER JOIN Win_By AS T4 ON T2.Win_Type = T4.Win_Id WHERE T2.Match_Id = '335993' GROUP BY T1.Team_Name", "source_tables": ["player_match", "team", "match", "win_by"]}, "evidence": "team refers to Team_Name"}
{"sample_id": 2030, "db_id": "soccer_2016", "final": {"question": "Count the matches that were won by wickets in all season.", "sql": "SELECT COUNT(T1.Match_Id) FROM Match AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id WHERE T2.Win_type = 'wickets'", "source_tables": ["match", "win_by"]}, "evidence": "won by wickets refers to Win_type = 'wickets';"}
{"sample_id": 2031, "db_id": "soccer_2016", "final": {"question": "What is the role of W Jaffer in season year 2012?", "sql": "SELECT T4.Role_Desc FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id INNER JOIN Rolee AS T4 ON T2.Role_Id = T4.Role_Id INNER JOIN Season AS T5 ON T3.Season_Id = T5.Season_Id WHERE T1.Player_name = 'W Jaffer' AND T5.Season_Year = 2012", "source_tables": ["season", "player", "player_match", "rolee", "match"]}, "evidence": "W Jaffer refers to Player_name = 'W Jaffer'; in season year 2012 refers to Season_Year = 2012; role refers to Role_Desc"}
{"sample_id": 2032, "db_id": "soccer_2016", "final": {"question": "What are the names of players who had been man of the match more than 5 times in season year 2008?", "sql": "SELECT CASE WHEN COUNT(T2.Man_of_the_Match) > 5 THEN T1.Player_Name ELSE 0 END FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match INNER JOIN Player_Match AS T3 ON T3.Player_Id = T1.Player_Id INNER JOIN Season AS T4 ON T2.Season_Id = T4.Season_Id WHERE T4.Season_Year = 2008", "source_tables": ["season", "player", "player_match", "match"]}, "evidence": "man of the match more than 5 times refers to COUNT(Man_of_the_Match) > 5; in season year 2008 refers to Season_Year = 2008; name of player refers to Player_Name;"}
{"sample_id": 2033, "db_id": "soccer_2016", "final": {"question": "What is the average of Indian players that were born between 1975 and 1985 among all players?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Country_Name = 'India' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_ID WHERE strftime('%Y', T1.DOB) BETWEEN '1975' AND '1985'", "source_tables": ["country", "player"]}, "evidence": "Indian players refers to Country_Name = 'India'; born between 1975 and 1985 refers to strftime('%Y',T1.DOB) between '1975' and '1985'; average refers to DIVIDE(COUNT(Country_Name = 'India'), COUNT(Player_Id))"}
{"sample_id": 2034, "db_id": "soccer_2016", "final": {"question": "Calculate the percentage of left hand batting style players among all players.", "sql": "SELECT CAST(SUM(CASE WHEN T2.Batting_hand = 'Left-hand bat' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id", "source_tables": ["player", "batting_style"]}, "evidence": "left hand batting style players refers to Batting_hand = 'Left-hand bat'; percentage refers to DIVIDE(COUNT(Batting_hand = 'Left-hand bat'), COUNT(Player_Id)) * 100.0"}
{"sample_id": 2035, "db_id": "soccer_2016", "final": {"question": "What is the percentage of matches that are won by runs?", "sql": "SELECT CAST(SUM(CASE WHEN T1.win_type = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Win_Type) FROM Match AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id", "source_tables": ["match", "win_by"]}, "evidence": "won by runs refers to win_type = 1; percentage refers to DIVIDE(COUNT(win_type = 1), COUNT(Win_Type)) * 100"}
{"sample_id": 2036, "db_id": "soccer_2016", "final": {"question": "How many matches have 7 points of winning margin?", "sql": "SELECT COUNT(Match_Id) FROM Match WHERE win_margin = 7", "source_tables": ["match"]}, "evidence": "have 7 points of winning margin refers to win_margin = 7;"}
{"sample_id": 2037, "db_id": "soccer_2016", "final": {"question": "What is the total number of players born between 1970 to 1975?", "sql": "SELECT COUNT(Player_Id) FROM Player WHERE strftime('%Y', DOB) BETWEEN '1970' AND '1975'", "source_tables": ["player"]}, "evidence": "born between 1970 to 1975 refers to strftime('%Y',DOB) between '1970' and '1975'"}
{"sample_id": 2038, "db_id": "soccer_2016", "final": {"question": "Who is the winning team in a match held on April 26, 2009 with a winning margin of 6 points?", "sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner WHERE T2.Win_Margin = 6 AND T2.Match_Date = '2009-04-26'", "source_tables": ["team", "match"]}, "evidence": "winning margin of 6 points refers to Win_Margin = 6; held on April 26, 2009 refers to Match_Date = '2009-04-26'"}
{"sample_id": 2039, "db_id": "soccer_2016", "final": {"question": "In the match ID 419135, who won by runs?", "sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Win_By AS T3 ON T2.win_type = T3.win_id WHERE T2.Match_Id = 419135", "source_tables": ["team", "match", "win_by"]}, "evidence": "who refers to Team_Name"}
{"sample_id": 2040, "db_id": "soccer_2016", "final": {"question": "Among the matches held in St. George's Park, give the match ID of the match with the highest winning margin points.", "sql": "SELECT T2.Match_Id FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.venue_id = T2.venue_id WHERE T1.Venue_Name = 'St George''s Park' ORDER BY T2.Win_Margin DESC LIMIT 1", "source_tables": ["venue", "match"]}, "evidence": "held in St. George's Park refers to Venue_Name = 'St George''s Park'; highest winning margin points refers to MAX(Win_Margin)"}
{"sample_id": 2041, "db_id": "soccer_2016", "final": {"question": "How many of the players are from Sri Lanka?", "sql": "SELECT COUNT(*) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_ID WHERE T2.Country_Name = 'Sri Lanka'", "source_tables": ["country", "player"]}, "evidence": "from Sri Lanka refers to Country_Name = 'Sri Lanka';"}
{"sample_id": 2042, "db_id": "soccer_2016", "final": {"question": "List the player's name who played as a captain.", "sql": "SELECT T2.Player_Name FROM Player_Match AS T1 INNER JOIN Player AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T1.Role_Id = T3.Role_Id WHERE T3.Role_Desc = 'Captain' GROUP BY T2.Player_Name", "source_tables": ["player", "player_match", "rolee"]}, "evidence": "played as a captain refers to Role_Desc = 'captain'; player refers to Player_Name"}
{"sample_id": 2043, "db_id": "soccer_2016", "final": {"question": "Give the match's venue and winning team for the match ID 392194.", "sql": "SELECT T1.Venue_Name, T3.Team_Name FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.venue_id = T2.venue_id INNER JOIN Team AS T3 ON T2.match_winner = T3.Team_Id WHERE T2.Match_Id = 392194", "source_tables": ["venue", "match", "team"]}, "evidence": "venue refers to Venue_Name; winning team refers to match_winner"}
{"sample_id": 2044, "db_id": "soccer_2016", "final": {"question": "Among the matches of Delhi Daredevils in 2009, what is the percentage of their matches won by wickets?", "sql": "SELECT CAST(SUM(CASE WHEN T3.Win_Type = 'wickets' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.Win_Type) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner INNER JOIN Win_By AS T3 ON T2.Win_Type = T3.Win_Id WHERE T1.Team_Name = 'Delhi Daredevils'", "source_tables": ["team", "match", "win_by"]}, "evidence": "Delhi Daredevils refers to team_name = 'Delhi Daredevils'; in 2009 refers to Match_Date = '2009%'; won by wickets refers to Win_Type = 'wickets'; percentage refers to DIVIDE(COUNT(Win_Type = 'wickets'), COUNT(Win_Type))"}
{"sample_id": 2081, "db_id": "music_tracker", "final": {"question": "How many singles were released in 1979?", "sql": "SELECT COUNT(releaseType) FROM torrents WHERE releaseType LIKE 'single' AND groupYear = 1979", "source_tables": ["torrents"]}, "evidence": "releaseType = 'single'; groupYear = 1979;"}
{"sample_id": 2082, "db_id": "music_tracker", "final": {"question": "In 1980, how many singles were released by sugar daddy?", "sql": "SELECT COUNT(releaseType) FROM torrents WHERE artist LIKE 'sugar daddy' AND releaseType LIKE 'Single' AND groupYear = 1980", "source_tables": ["torrents"]}, "evidence": "sugar daddy is an artist; releaseType = 'single'; groupYear = 1980;"}
{"sample_id": 2083, "db_id": "music_tracker", "final": {"question": "How many christmas albums were released in 2004?", "sql": "SELECT COUNT(T1.id) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'christmas' AND T1.groupYear = 2004 AND T1.releaseType LIKE 'album'", "source_tables": ["torrents", "tags"]}, "evidence": "album refers to releaseType; groupYear = 2004; tag = 'christmas';"}
{"sample_id": 2084, "db_id": "music_tracker", "final": {"question": "Please list all tags of kurtis blow from 2000 to 2010.", "sql": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear BETWEEN 2000 AND 2010 AND T1.artist LIKE 'kurtis blow'", "source_tables": ["torrents", "tags"]}, "evidence": "kurtis blow is an artist; from 2000 to 2010 refers to groupYear between 2000 and 2010;"}
{"sample_id": 2085, "db_id": "music_tracker", "final": {"question": "Which album title and tag that millie jackson released in 1980?", "sql": "SELECT T1.groupName, T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear = 1980 AND T1.artist LIKE 'millie jackson' AND T1.releaseType LIKE 'album'", "source_tables": ["torrents", "tags"]}, "evidence": "millie jackson is an artist; album title refers to groupName where releaseType = 'album'; groupYear = 1980;"}
{"sample_id": 2086, "db_id": "music_tracker", "final": {"question": "Please list all release titles whose tag is jazz in 2005.", "sql": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear = 2005 AND T2.tag LIKE 'jazz'", "source_tables": ["torrents", "tags"]}, "evidence": "release titles refer to groupName; groupYear = 2005;"}
{"sample_id": 2087, "db_id": "music_tracker", "final": {"question": "From 1980 to 2000, which artist had the most disco releases?", "sql": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear BETWEEN 1980 AND 2000 AND T2.tag LIKE 'disco' GROUP BY T1.artist ORDER BY COUNT(T2.tag) DESC LIMIT 1", "source_tables": ["torrents", "tags"]}, "evidence": "From 1980 to 2000 refers to groupYear between 1980 and 2000; tag = 'disco'; the most releases refer to MAX(COUNT(id));"}
{"sample_id": 2088, "db_id": "music_tracker", "final": {"question": "Which artists have released singles with the tag 1970s?", "sql": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'single' AND T2.tag LIKE '1970s'", "source_tables": ["torrents", "tags"]}, "evidence": "releaseType = 'single';"}
{"sample_id": 2089, "db_id": "music_tracker", "final": {"question": "From 1979 to 1982, what was the percentage of united.states albums out of total albums were released?", "sql": "SELECT CAST(SUM(CASE WHEN T2.tag LIKE 'united.states' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.releaseType) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear BETWEEN 1979 AND 1982 AND T1.releaseType LIKE 'album'", "source_tables": ["torrents", "tags"]}, "evidence": "From 1979 to 1982 refers to groupYear between 1979 and 1982; United States refer to tag; albums refer to releaseType; DIVIDE(COUNT(releaseType = 'album' where tag = 'united.states' and groupYear between 1979 and 1982), COUNT(releaseType = 'album' where groupYear between 1979 and 1982)) as percentage;"}
{"sample_id": 2215, "db_id": "world_development_indicators", "final": {"question": "What portion of the nations in Latin America and the Caribbean had more than 50% of their land used for agriculture in 1961?", "sql": "SELECT CAST(SUM(CASE WHEN T1.Value > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.CountryCode) FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Year = 1961 AND T2.Region = 'Latin America & Caribbean' AND indicatorname = 'Agricultural land (% of land area)'", "source_tables": ["country", "indicators"]}, "evidence": "portion = divide(count(CountryName where Year = '1961' and Value>50), count(CountryName))*100%; nations in Latin America and the Caribbean refers to region = 'Latin America & Caribbean';\u00a0 more than 50% of their land used for agriculture refers to value where indicatorname = 'Agricultural land (% of land area)'>50; in 1961 refers to Year = '1961'"}
{"sample_id": 2216, "db_id": "world_development_indicators", "final": {"question": "What are the full names of the countries in South Asia that belongs to the low income group?", "sql": "SELECT LongName FROM Country WHERE IncomeGroup = 'Low income' AND Region = 'South Asia'", "source_tables": ["country"]}, "evidence": "full name refers to longname; the countries in South Asia refer to region = 'South Asia'; belongs to the low income group refers to incomegroup = 'Low income'"}
{"sample_id": 2217, "db_id": "world_development_indicators", "final": {"question": "What is the indicator code for Mobile Cellular Subscriptions of Brazil?", "sql": "SELECT DISTINCT IndicatorCode FROM Indicators WHERE CountryName = 'Brazil' AND IndicatorName = 'Mobile cellular subscriptions'", "source_tables": ["indicators"]}, "evidence": "Mobile Cellular Subscriptions refers to indicatorname = 'Mobile cellular subscriptions'; Brazil refers to CountryName = 'Brazil'"}
{"sample_id": 2218, "db_id": "world_development_indicators", "final": {"question": "How many countries in Europe & Central Asia uses Danish krone as its currency? List the full names of those coutnries.", "sql": "SELECT COUNT(longname) FROM country WHERE region = 'Europe & Central Asia' AND currencyunit = 'Danish krone' UNION SELECT longname FROM country WHERE currencyunit = 'Danish krone' AND region = 'Europe & Central Asia'", "source_tables": ["country"]}, "evidence": "countries in Europe & Central Asia refer to region = 'Europe & Central Asia'; uses Danish krone refers to currencyunit = 'Danish krone'; full name refers to longname"}
{"sample_id": 2219, "db_id": "world_development_indicators", "final": {"question": "What is the name of the country with the highest percentage of rural population in the overall total population? Indicate the rural population percentage of total population.", "sql": "SELECT countryname, MAX(value) FROM indicators WHERE indicatorname = 'Rural population (% of total population)'", "source_tables": ["indicators"]}, "evidence": "the highest percentage of rural population in the overall total population refers to max(value where indicatorname = 'Rural population (% of total population)')"}
{"sample_id": 2220, "db_id": "world_development_indicators", "final": {"question": "How many countries have a latest population census in 2011? Indicate their full names.", "sql": "SELECT COUNT(LongName) FROM country WHERE LatestPopulationCensus = '2011' UNION ALL SELECT LongName FROM country WHERE LatestPopulationCensus = '2011'", "source_tables": ["country"]}, "evidence": "have a latest population census in 2011 refers to LatestPopulationCensus = '2011'; full name refers to LongName"}
{"sample_id": 2221, "db_id": "world_development_indicators", "final": {"question": "What is the agricultural land area in sq. km of Italy in 1968?", "sql": "SELECT Value FROM Indicators WHERE IndicatorName = 'Agricultural land (sq. km)' AND Year = 1968 AND CountryName = 'Italy'", "source_tables": ["indicators"]}, "evidence": "agricultural land area in sq. km refers value where indicatorname = 'Agricultural land (sq. km)'; Italy refers to countryname = 'Italy'; in 1968 refers to year = '1968'"}
{"sample_id": 2222, "db_id": "world_development_indicators", "final": {"question": "In Sub-Saharan Africa, how many female out-of-school children of primary school age are there in the country with the higest number of female out-of-school children of primary school age? Indicate the year of when it was recorded.", "sql": "SELECT MAX(T1.value), T1.year FROM indicators AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Region = 'Sub-Saharan Africa' AND T1.IndicatorName = 'Out-of-school children of primary school age, female (number)'", "source_tables": ["country", "indicators"]}, "evidence": "in Sub-Saharan Africa refers to Region = 'Sub-Saharan Africa'; the higest number of female out-of-school children of primary school age refers to max(value where IndicatorName = 'Out-of-school children of primary school age, female (number)')"}
{"sample_id": 2223, "db_id": "world_development_indicators", "final": {"question": "What is the series code for number of infant deaths in year 1965 for the country whose full name is Islamic State of Afghanistan?", "sql": "SELECT DISTINCT T3.Seriescode FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN CountryNotes AS T3 ON T2.CountryCode = T3.Countrycode WHERE T2.IndicatorName = 'Number of infant deaths' AND T1.LongName = 'Islamic State of Afghanistan' AND T2.Year = 1965", "source_tables": ["countrynotes", "country", "indicators"]}, "evidence": "number of infant deaths refers to IndicatorName = 'Number of infant deaths'; in year 1965 refers to Year = '1965'; full name is Islamic State of Afghanistan refers to LongName = 'Islamic State of Afghanistan'"}
{"sample_id": 2224, "db_id": "world_development_indicators", "final": {"question": "Among the countries who uses the 1968 System of National Accounts methodology, how many are in the Middle East & North Africa? Name the country with the highest CO2 emissions from solid fuel consumption in kiloton.", "sql": "SELECT COUNT(DISTINCT T1.CountryCode) FROM indicators AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Region = 'Middle East & North Africa' AND T2.SystemOfNationalAccounts = 'Country uses the 1968 System of National Accounts methodology.' AND T1.IndicatorName = 'CO2 emissions FROM solid fuel consumption (kt)' UNION SELECT * FROM ( SELECT T1.CountryName FROM indicators AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Region = 'Middle East & North Africa' AND T2.SystemOfNationalAccounts = 'Country uses the 1968 System of National Accounts methodology.' AND T1.IndicatorName = 'CO2 emissions FROM solid fuel consumption (kt)' GROUP BY T1.CountryName ORDER BY SUM(T1.value) DESC LIMIT 1 )", "source_tables": ["country", "indicators"]}, "evidence": "uses the 1968 System of National Accounts methodology refers to SystemOfNationalAccounts = '1968 System of National Accounts methodology'; in the Middle East & North Africa refers to Region = 'Middle East & North Africa'; the highest CO2 emissions from solid fuel consumption in kiloton refers to max(value where IndicatorName = 'CO2 emissions from solid fuel consumption (kt)')"}
{"sample_id": 2225, "db_id": "world_development_indicators", "final": {"question": "What are the indicator codes for the Republic of Albania in the year 1960?", "sql": "SELECT DISTINCT T1.IndicatorCode FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Year = 1960 AND T2.LongName = 'Republic of Albania'", "source_tables": ["country", "indicators"]}, "evidence": "the Republic of Albania refers to LongName = 'Republic of Albania'; in the year 1960 refers to Year = '1960'"}
{"sample_id": 2226, "db_id": "world_development_indicators", "final": {"question": "What is the lending category of the country with a cereal production of 6140000 metric tons for the year 1966?", "sql": "SELECT T1.LendingCategory FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Cereal production (metric tons)' AND T2.Value = 6140000 AND T2.Year = 1966", "source_tables": ["country", "indicators"]}, "evidence": "cereal production of 6140000 metric tons refers value where IndicatorName = 'Cereal production (metric tons)'> 6140000; the year 1966 refers to Year = '1966'"}
{"sample_id": 2227, "db_id": "world_development_indicators", "final": {"question": "Which country has the highest population in largest city for 19 consecutive years starting from 1960? Indicate the region to which the country is located.", "sql": "SELECT T2.CountryCode, T2.Region FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName = 'Population in largest city' AND T1.Year >= 1960 AND T1.Year < 1980 ORDER BY T2.Region DESC LIMIT 1", "source_tables": ["country", "indicators"]}, "evidence": "the highest population in largest city refers to max(value where IndicatorName = 'Population in largest city'); for 19 consecutive years starting from 1960 refers to Year BETWEEN'1960' and '1979'"}
{"sample_id": 2228, "db_id": "world_development_indicators", "final": {"question": "From 1975 to 1980, how much is the total amount CO2 emmission in kiloton of the the world? Indicate which year the world recorded its highest CO2 emmissions.", "sql": "SELECT SUM(T1.Value), T1.Year FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName = 'CO2 emissions (kt)' AND T1.Year >= 1975 AND T1.Year < 1981 AND T1.CountryCode = 'WLD' AND T2.SpecialNotes = 'World aggregate.'", "source_tables": ["country", "indicators"]}, "evidence": "from 1975 to 1980 refers to Year between 1975 and 1980; the total amount CO2 emmission in kiloton of the the world refers to sum(value where IndicatorName like 'CO2%'); the world recorded its highest CO2 emmissions refers to max(value where IndicatorName like 'CO2%')"}
{"sample_id": 2229, "db_id": "world_development_indicators", "final": {"question": "Which country has the smallest land area in square kilometers for 19 consecutive years starting from year 1961? Indicate how much is its land area in square kilometers in those years and the income group of the country.", "sql": "SELECT T1.CountryName, SUM(T1.Value) area, T2.IncomeGroup FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName = 'Land area (sq. km)' AND T1.Year >= 1961 AND T1.Year < 1980 GROUP BY T1.CountryCode ORDER BY SUM(T1.Value) ASC LIMIT 1", "source_tables": ["country", "indicators"]}, "evidence": "the smallest land area in square kilometers refers to min(value where IndicatorName like 'Land area (sq. km)'); for 19 consecutive years starting from year 1961 refers to Year between 1961 and 1979"}
{"sample_id": 2230, "db_id": "world_development_indicators", "final": {"question": "What is the average number of passengers carried via air transport per year by Bulgaria between 1970 to 1980? Indicate the country's system of trade.", "sql": "SELECT AVG(T1.Value), T2.SystemOfTrade FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName = 'Air transport, passengers carried' AND T1.Year >= 1970 AND T1.Year < 1981 AND T1.CountryName = 'Bulgaria'", "source_tables": ["country", "indicators"]}, "evidence": "average number refers to avg(value); passengers carried via air transport per year refers to value where IndicatorName = 'Air transport, passengers carried'; by Bulgaria refers to CountryName = 'Bulgaria'; between 1970 to 1980 refers to Year between 1970 and 1980"}
{"sample_id": 2231, "db_id": "world_development_indicators", "final": {"question": "What's the lastest household survey in Angola and when did it take place?", "sql": "SELECT LatestHouseholdSurvey, PppSurveyYear FROM Country WHERE ShortName = 'Angola'", "source_tables": ["country"]}, "evidence": "in Angola refers to ShortName = 'Angola'; when refers to PppSurveyYear"}
{"sample_id": 2232, "db_id": "world_development_indicators", "final": {"question": "How many countries in the North America Region has completed the vital registration?", "sql": "SELECT COUNT(CountryCode) FROM Country WHERE VitalRegistrationComplete = 'Yes' AND Region = 'North America'", "source_tables": ["country"]}, "evidence": "has completed the vital registration refers to VitalRegistrationComplete = 'Yes'"}
{"sample_id": 2233, "db_id": "world_development_indicators", "final": {"question": "In which years does the country whose Alpha2Code is 1A have a result of the indicator Adolescent fertility rate?", "sql": "SELECT T2.Year FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'", "source_tables": ["country", "indicators"]}, "evidence": "indicator Adolescent fertility rate refers to IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'\n\n"}
{"sample_id": 2234, "db_id": "world_development_indicators", "final": {"question": "What's the long name of the country that got 3000000 on the indicator Arms exports in 1960?", "sql": "SELECT T1.LongName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Arms exports (SIPRI trend indicator values)' AND T2.Year = 1960 AND T2.Value = 3000000", "source_tables": ["country", "indicators"]}, "evidence": "long name refers to CountryName; got 3000000 on the indicator Arms exports refers to value where IndicatorName = 'Arms exports (SIPRI trend indicator values)' = 3000000; in 1960 refers to Year = 1960"}
{"sample_id": 2235, "db_id": "world_development_indicators", "final": {"question": "Please list the Alpha2Codes of all the countries that have an indicator on Rural population in 1960.", "sql": "SELECT T1.Alpha2Code FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Rural population' AND T2.Year = 1960", "source_tables": ["country", "indicators"]}, "evidence": "in 1960 refers to year = '1960'"}
{"sample_id": 2236, "db_id": "world_development_indicators", "final": {"question": "Which country's indicator for Adolescent fertility rate is the highest in 1960, please give its special notes.", "sql": "SELECT DISTINCT T1.CountryCode, T1.SpecialNotes FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Value = ( SELECT Value FROM Indicators WHERE IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND Year = 1960 ORDER BY Value DESC LIMIT 1 )", "source_tables": ["country", "indicators"]}, "evidence": "indicator for Adolescent fertility rate is the highest refers to max(value where IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'); in 1960 refers to year = '1960'"}
{"sample_id": 2237, "db_id": "world_development_indicators", "final": {"question": "By how much did the indicator on Adolescent fertility rate increase from 1960 to 1961 in the country whose Alpha2Code is 1A?", "sql": "SELECT ( SELECT T2.Value FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND T2.Year = 1961 ) - ( SELECT T2.Value FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND T2.Year = 1960 ) DIFF", "source_tables": ["country", "indicators"]}, "evidence": "by how much = subtract(sum(value where Year = 1961), sum(value where Year = 1960)); indicator on Adolescent fertility rate refers to IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)%'"}
{"sample_id": 2238, "db_id": "world_development_indicators", "final": {"question": "What is the note for Australia on the indicator SP.ADO.TFRT?", "sql": "SELECT T2.Description FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Seriescode = 'SP.ADO.TFRT' AND T1.ShortName = 'Australia'", "source_tables": ["countrynotes", "country"]}, "evidence": "note refers to Description; for Australia refers to ShortName = 'Australia'; indicator SP.ADO.TFRT refers to Seriescode = 'SP.ADO.TFRT'"}
{"sample_id": 2239, "db_id": "world_development_indicators", "final": {"question": "Please list the notes for Aruba on the indicators under the topic of Environment: Energy production & use.", "sql": "SELECT T2.Description FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode INNER JOIN Series AS T3 ON T2.Seriescode = T3.SeriesCode WHERE T1.ShortName = 'Aruba' AND T3.Topic = 'Environment: Energy production & use'", "source_tables": ["countrynotes", "country", "series"]}, "evidence": "note refers to Description; for Aruba refers to ShortName = 'Aruba'"}
{"sample_id": 2240, "db_id": "world_development_indicators", "final": {"question": "Which countries have notes on the indicator BX.KLT.DINV.CD.WD?", "sql": "SELECT T1.ShortName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode INNER JOIN Series AS T3 ON T2.Seriescode = T3.SeriesCode WHERE T3.Seriescode = 'BX.KLT.DINV.CD.WD'", "source_tables": ["countrynotes", "country", "series"]}, "evidence": "indicator BX.KLT.DINV.CD.WD refers to Seriescode = 'BX.KLT.DINV.CD.WD'"}
{"sample_id": 2241, "db_id": "world_development_indicators", "final": {"question": "For the country that has notes on the indicator Inflation, consumer prices, in which region is it in?", "sql": "SELECT T1.Region FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode INNER JOIN Series AS T3 ON T2.Seriescode = T3.SeriesCode WHERE T3.IndicatorName = 'Inflation, consumer prices (annual %)'", "source_tables": ["countrynotes", "country", "series"]}, "evidence": "indicator Inflation, consumer prices refers to IndicatorName = 'Inflation, consumer prices (annual %)'"}
{"sample_id": 2242, "db_id": "world_development_indicators", "final": {"question": "How many countries have notes on the indicator Stocks traded, turnover ratio of domestic shares?", "sql": "SELECT COUNT(T1.Countrycode)  FROM CountryNotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode WHERE T2.IndicatorName = 'Stocks traded, turnover ratio of domestic shares (%)'", "source_tables": ["countrynotes", "series"]}, "evidence": "indicator Stocks traded, turnover ratio of domestic shares refers to IndicatorName = 'Stocks traded, turnover ratio of domestic shares (%)'"}
{"sample_id": 2243, "db_id": "world_development_indicators", "final": {"question": "What's the agregation method for the indicator whose value is 133 in 1960 for the Arab World?", "sql": "SELECT T2.AggregationMethod FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName INNER JOIN Country AS T3 ON T1.CountryCode = T3.CountryCode WHERE T3.ShortName = 'Arab World' AND T1.Value = 133 AND T1.Year = 1960", "source_tables": ["country", "indicators", "series"]}, "evidence": "in 1960 refers to Year = 1960; for the Arab World refers to CountryName = 'Arab World'"}
{"sample_id": 2244, "db_id": "world_development_indicators", "final": {"question": "What's the value of the indicator whose long definition is \"Adolescent fertility rate is the number of births per 1,000 women ages 15-19.\" for the Arab World in 1960?", "sql": "SELECT T1.Value FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName INNER JOIN Country AS T3 ON T1.CountryCode = T3.CountryCode WHERE T2.LongDefinition = 'Adolescent fertility rate is the number of births per 1,000 women ages 15-19.' AND T3.ShortName = 'Arab World' AND T1.Year = 1960", "source_tables": ["country", "indicators", "series"]}, "evidence": "in 1960 refers to Year = 1960; for the Arab World refers to CountryName = 'Arab World'"}
{"sample_id": 2245, "db_id": "world_development_indicators", "final": {"question": "What is the percentage of increase of the indicator on Adolescent fertility rate from 1960 to 1961 in the country whose Alpha2Code is 1A?", "sql": "SELECT (( SELECT T2.Value FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND T2.Year = 1961 ) - ( SELECT T2.Value FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND T2.Year = 1960 )) * 1.0 / ( SELECT SUM(T2.Value) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND T2.Year = 1960 )", "source_tables": ["country", "indicators"]}, "evidence": "the percentage of increase from 1960 to 1961 = divide(subtract(sum(value where Year = 1961), sum(Value where Year = 1960)), sum(Value where Year = 1960)) *100%; indicator on Adolescent fertility rate refers to IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)%'\n\n"}
{"sample_id": 2246, "db_id": "world_development_indicators", "final": {"question": "What is the average value of Adolescent fertility rate in the country whose Alpha2Code is 1A?", "sql": "SELECT CAST(SUM(T2.Value) AS REAL) * 100 / COUNT(T2.Year) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'", "source_tables": ["country", "indicators"]}, "evidence": "average value = AVG(Value) where IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'"}
{"sample_id": 2324, "db_id": "movielens", "final": {"question": "How many female actors have been played a role in any of French or USA movies?", "sql": "SELECT COUNT(T2.actorid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country IN ('France', 'USA')", "source_tables": ["movies2actors", "movies"]}, "evidence": "French and USA are two countries; Female actors mean that a_gender = 'F'"}
{"sample_id": 2325, "db_id": "movielens", "final": {"question": "How many different actors have played a role in the highest rating movie?", "sql": "SELECT COUNT(DISTINCT T2.actorid) FROM u2base AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.rating = 5", "source_tables": ["u2base", "movies2actors"]}, "evidence": "highest rating of a movie is 5"}
{"sample_id": 2326, "db_id": "movielens", "final": {"question": "Which Crime film got the lowest average rating?", "sql": "SELECT T2.movieid FROM u2base AS T2 INNER JOIN movies2directors AS T3 ON T2.movieid = T3.movieid WHERE T3.genre = 'Crime' GROUP BY T2.movieid ORDER BY AVG(T2.rating) LIMIT 1", "source_tables": ["movies2directors", "u2base"]}, "evidence": ""}
{"sample_id": 2327, "db_id": "movielens", "final": {"question": "What's the ratio of gender in actors to actress in all the UK movies?", "sql": "SELECT CAST(SUM(IIF(T3.a_gender = 'M', 1, 0)) AS REAL) / SUM(IIF(T3.a_gender = 'F', 1, 0)) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T1.country = 'UK'", "source_tables": ["actors", "movies2actors", "movies"]}, "evidence": "UK is a country; Male actors mean that a_gender = 'M'; Female actors mean that a_gender = 'F'; ratio; ratio of gender in actors = count(a_gender = 'M') / a_gender = 'F'"}
{"sample_id": 2328, "db_id": "movielens", "final": {"question": "How many 35-year-old female users gave the movie 1711133 a rating of 3?", "sql": "SELECT COUNT(T1.userid) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T2.rating = 3 AND T2.movieid = '1711133' AND T1.age = 35 AND T1.u_gender = 'F'", "source_tables": ["u2base", "users"]}, "evidence": "Female users mean that u_gender = 'F'"}
{"sample_id": 2329, "db_id": "movielens", "final": {"question": "How many users have rated 1 each for the UK's second newest movies with a running time of 2?", "sql": "SELECT COUNT(T2.userid) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'UK' AND T1.runningtime = 2 AND T2.rating = 1 AND T1.year = 2", "source_tables": ["u2base", "movies"]}, "evidence": "second newest movies refers to year = 2 since year in this database is a relative value, less is the newer"}
{"sample_id": 2330, "db_id": "movielens", "final": {"question": "How many unique directors with an average earnings of 2 and a quality of 3 have not made comedy films? List them.", "sql": "SELECT DISTINCT T1.directorid FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality = 3 AND T1.avg_revenue = 2 AND T2.genre != 'Comedy'", "source_tables": ["directors", "movies2directors"]}, "evidence": ""}
{"sample_id": 2331, "db_id": "movielens", "final": {"question": "Calculate the percentage of female actors and quality 2 who have appeared twice at the casting of the film 1672580.", "sql": "SELECT CAST(SUM(IIF(T2.cast_num = 2 AND T1.a_quality = 2, 1, 0)) AS REAL) * 100 / COUNT(T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid WHERE T2.movieid = 1672580 AND T1.a_gender = 'F'", "source_tables": ["actors", "movies2actors"]}, "evidence": "Female actors mean that a_gender = 'F'; percentage can be computed by [cast_num = 2 AND a_quality = 2 in female) / (all female actors)] * 100%"}
{"sample_id": 2332, "db_id": "movielens", "final": {"question": "How many of the worst actors are men and how many of the worst actors are women? Indicate your answer in ratio form.", "sql": "SELECT CAST(SUM(IIF(a_gender = 'M', 1, 0)) AS REAL) / SUM(IIF(a_gender = 'F', 1, 0)) FROM actors WHERE a_quality = 0", "source_tables": ["actors"]}, "evidence": "The worst actors means a_quality = 0; Men and male share the same meaning; men actors refers to a_gender = 'M'"}
{"sample_id": 2333, "db_id": "movielens", "final": {"question": "Which actor has appeared in the most films?", "sql": "SELECT actorid FROM movies2actors GROUP BY actorid ORDER BY COUNT(movieid) DESC LIMIT 1", "source_tables": ["movies2actors"]}, "evidence": ""}
{"sample_id": 2334, "db_id": "movielens", "final": {"question": "What is the most popular genre of film directed by directors?", "sql": "SELECT genre FROM movies2directors GROUP BY genre ORDER BY COUNT(movieid) DESC LIMIT 1", "source_tables": ["movies2directors"]}, "evidence": "Most popular genre indicates that the genre has the most number of movies"}
{"sample_id": 2335, "db_id": "movielens", "final": {"question": "What are the most common film genres made by the worst directors?", "sql": "SELECT T2.genre FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality = 0 GROUP BY T2.genre ORDER BY COUNT(T2.movieid) DESC LIMIT 1", "source_tables": ["directors", "movies2directors"]}, "evidence": "d_quality = 5 refers to the best directors, d_quality = 0 refers to the worst directors"}
{"sample_id": 2336, "db_id": "movielens", "final": {"question": "What non-English American film/s has received the lowest user ratings? Mention the movie's I.D.", "sql": "SELECT T2.movieid FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.isEnglish = 'F' AND T1.country = 'USA' ORDER BY T2.rating LIMIT 1", "source_tables": ["u2base", "movies"]}, "evidence": "USA is a country; non-English means isEnglish = 'F'"}
{"sample_id": 2337, "db_id": "movielens", "final": {"question": "What is the total average movie directed by the directors who's quality and revenue is 4?", "sql": "SELECT CAST(SUM(CASE WHEN T1.d_quality = 4 AND T1.avg_revenue = 4 THEN 1 ELSE 0 END) AS REAL) / COUNT(T2.movieid) FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid", "source_tables": ["directors", "movies2directors"]}, "evidence": ""}
{"sample_id": 2338, "db_id": "movielens", "final": {"question": "Which movies have received the greatest ratings from female users whose occupations fall within the category of 3?", "sql": "SELECT T2.movieid FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T1.u_gender = 'F' AND T1.occupation = 3 AND T2.rating = 5", "source_tables": ["u2base", "users", "movies"]}, "evidence": "Female users mean that u_gender = 'F'"}
{"sample_id": 2339, "db_id": "movielens", "final": {"question": "How many female actresses appeared in the movie 2312852, what country was it in, and what was it's running time?", "sql": "SELECT SUM(IIF(T1.a_gender = 'F', 1, 0)) , T3.country, T3.runningtime FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T2.movieid = 2312852 GROUP BY T3.country, T3.runningtime", "source_tables": ["actors", "movies", "movies2actors"]}, "evidence": "female actresses mean that a_gender = 'F'"}
{"sample_id": 2340, "db_id": "movielens", "final": {"question": "How many horror movies were made by the worst directors?", "sql": "SELECT COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid INNER JOIN directors AS T3 ON T1.directorid = T3.directorid WHERE T1.genre = 'horror' AND T3.d_quality = 0", "source_tables": ["movies2directors", "directors", "movies"]}, "evidence": "d_quality = 5 refers to direct the best, d_quality = 0 refers to direct the worst"}
{"sample_id": 2341, "db_id": "movielens", "final": {"question": "What are the genres of all the English-language foreign films having a runtime of two hours or less? List each one.", "sql": "SELECT T2.genre FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.runningtime <= 2 AND T1.isEnglish = 'T' AND T1.country = 'other'", "source_tables": ["movies2directors", "movies"]}, "evidence": "isEnglish = 'T' means films in English; Film and movie share the same meaning"}
{"sample_id": 2342, "db_id": "movielens", "final": {"question": "Among the English comedy movies produced in the UK, how many movies with a running time of 3 was rated the highest by users between the age 45-50? Indicate the movie names.", "sql": "SELECT DISTINCT T1.movieid FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid INNER JOIN u2base AS T3 ON T1.movieid = T3.movieid INNER JOIN users AS T4 ON T3.userid = T4.userid WHERE T1.country = 'UK' AND T2.genre = 'Comedy' AND T1.runningtime = 3 AND T3.rating = 5 AND T4.age BETWEEN 45 AND 50 AND T1.isEnglish = 'T'", "source_tables": ["movies2directors", "u2base", "users", "movies"]}, "evidence": "UK is a country"}
{"sample_id": 2343, "db_id": "movielens", "final": {"question": "What is the percentage difference of English and non-English-language crime movies in other countries in year 3?", "sql": "SELECT CAST(SUM(IIF(T1.isEnglish = 'T', 1, 0)) - SUM(IIF(T1.isEnglish = 'F', 1, 0)) AS REAL) * 100 / COUNT(T1.movieid) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'other' AND T1.year = 3", "source_tables": ["movies2directors", "movies"]}, "evidence": "non-English-language refers to isEnglish = 'F'; The percentage difference can be computed by [count(isEnglish = 'T' in movies) - count(isEnglish = 'F' in movies) / (all movies)] * 100%"}
{"sample_id": 2344, "db_id": "movielens", "final": {"question": "What is the total amount male and female actors who were casted in movie ID 1684910 and what is the proportion between the highest quality actors against the worst quality of actors? Indicate your answer in percentage. List the the director as well as the genre.", "sql": "SELECT SUM(IIF(a_gender = 'M', 1, 0)) , SUM(IIF(a_gender = 'F', 1, 0)) , CAST(SUM(IIF(a_quality = 5, 1, 0)) AS REAL) * 100 / COUNT(*) , CAST(SUM(IIF(a_quality = 0, 1, 0)) AS REAL) * 100 / COUNT(*), ( SELECT directorid FROM movies2directors WHERE movieid = 1684910 ) , ( SELECT genre FROM movies2directors WHERE movieid = 1684910 ) FROM actors WHERE actorid IN ( SELECT actorid FROM movies2actors WHERE movieid = 1684910 )", "source_tables": ["movies2directors", "actors", "movies2actors"]}, "evidence": "Female actors mean that a_gender = 'F'; Male actors mean that a_gender = 'M'; a_quality = 5 refers to act the best, a_quality = 0 refers to act the worst"}
{"sample_id": 2437, "db_id": "superstore", "final": {"question": "What is the name of the product that Aimee Bixby bought?", "sql": "SELECT DISTINCT T3.'Product Name' FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T1.'Product ID' WHERE T2.'Customer Name' = 'Aimee Bixby'", "source_tables": ["people", "east_superstore", "product"]}, "evidence": "name of the product refers to \"Product Name\""}
{"sample_id": 2438, "db_id": "superstore", "final": {"question": "Indicate the profit of product Sauder Camden County Barrister Bookcase, Planked Cherry Finish.", "sql": "SELECT DISTINCT T1.Profit FROM south_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T2.'Product Name' = 'Sauder Camden County Barrister Bookcase, Planked Cherry Finish'", "source_tables": ["south_superstore", "product"]}, "evidence": "Sauder Camden County Barrister Bookcase, Planked Cherry Finish' refers to \"Product Name\""}
{"sample_id": 2439, "db_id": "superstore", "final": {"question": "How many furniture products had been shipped by standard class in the East superstore?", "sql": "SELECT COUNT(T2.Category) FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T1.'Ship Mode' = 'Standard Class'", "source_tables": ["product", "east_superstore"]}, "evidence": "furniture products refers to Category = 'Furniture'; shipped by standard class refers to \"Ship Mode\" = 'Standard Class'"}
{"sample_id": 2440, "db_id": "superstore", "final": {"question": "What is the highest profit order in the East superstore of customers from Houston, Texas?", "sql": "SELECT T1.'Order ID' FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T2.City = 'Houston' AND T2.State = 'Texas' ORDER BY T1.Profit DESC LIMIT 1", "source_tables": ["people", "east_superstore"]}, "evidence": "highest profit refers to max(Profit); Houston, Texas refers to City = 'Houston' and State = 'Texas'"}
{"sample_id": 2441, "db_id": "superstore", "final": {"question": "How many furniture products were ordered at central superstore?", "sql": "SELECT COUNT(*) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T2.Category = 'Furniture'", "source_tables": ["product", "central_superstore"]}, "evidence": "furniture products refers to Category = 'Furniture'"}
{"sample_id": 2442, "db_id": "superstore", "final": {"question": "What are the names of the products that had been shipped in March 2013 at central superstore?", "sql": "SELECT DISTINCT T2.'Product Name' FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE strftime('%Y-%m', T1.'Ship Date') = '2013-03'", "source_tables": ["product", "central_superstore"]}, "evidence": "names of the products refers to Product Name; shipped in March 2013 refers to \"Ship Date\" = '2013-03%'"}
{"sample_id": 2443, "db_id": "superstore", "final": {"question": "How many orders were made by customers who live in Texas at the Central superstore?", "sql": "SELECT COUNT(DISTINCT T2.'Order ID') FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T1.State = 'Texas'", "source_tables": ["people", "central_superstore"]}, "evidence": "customer live in Texas refers to State = 'Texas'"}
{"sample_id": 2444, "db_id": "superstore", "final": {"question": "How many orders were made by Alan Barnes in 2015 at the Central superstore?", "sql": "SELECT COUNT(DISTINCT T2.'Order ID') FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T1.'Customer Name' = 'Alan Barnes' AND STRFTIME('%Y', T2.'Order Date') = '2015'", "source_tables": ["people", "central_superstore"]}, "evidence": "in 2015 refers to \"Order Date\" = '2015%'"}
{"sample_id": 2445, "db_id": "superstore", "final": {"question": "What is the product name of order CA-2011-115791 in the East superstore?", "sql": "SELECT DISTINCT T2.'Product Name' FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T1.'Order ID' = 'CA-2011-141817'", "source_tables": ["product", "east_superstore"]}, "evidence": "order CA-2011-115791 refers to \"Order ID\" = 'CA-2011-115791'"}
{"sample_id": 2446, "db_id": "superstore", "final": {"question": "What is the percentage of orders with 0.2 discount in the Central superstore were purchased by customers who live in Texas?", "sql": "SELECT CAST(SUM(CASE  WHEN T2.Discount = 0.2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T1.State = 'Texas'", "source_tables": ["people", "central_superstore"]}, "evidence": "live in Texas refers to State = 'Texas'; percentage = divide(sum(Order ID) when Discount = 0.2, sum(Order ID)) as percentage"}
{"sample_id": 2447, "db_id": "superstore", "final": {"question": "What is the percentage of furniture orders that were shipped through first class in 2013 at the Central superstore?", "sql": "SELECT CAST(SUM(CASE  WHEN T1.'Ship Mode' = 'First Class' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T2.Category = 'Furniture' AND STRFTIME('%Y', T1.'Ship Date') = '2013'", "source_tables": ["product", "central_superstore"]}, "evidence": "furniture refers to Category = 'Furniture'; shipped through first class in 2013 refers to ship mode = 'first class' and \"Ship Date\" = '2013%'; percentage = divide(sum(Order ID) when Category = 'Furniture' and \"Ship Date\" = '2013%', sum(Order ID)) as percentage"}
{"sample_id": 2448, "db_id": "superstore", "final": {"question": "Who order from the west region on August 12, 2013, and received a discount of 0.2?", "sql": "SELECT DISTINCT T2.'Customer Name' FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T1.'Order Date' = '2013-08-12' AND T1.Discount = 0.2 AND T1.Region = 'West'", "source_tables": ["people", "west_superstore"]}, "evidence": "Who refers to \"Customer Name\"; on August 12, 2013 refers to \"Order Date\" = '2013-08-12'; discount of 0.2 refers to discount = 0.2"}
{"sample_id": 2449, "db_id": "superstore", "final": {"question": "What is the order ID of the security-Tint Envelopes product ordered on June 3, 2013, in the Central region?", "sql": "SELECT DISTINCT T1.'Order ID' FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T2.'Product Name' = 'Security-Tint Envelopes' AND T1.'Order Date' = '2013-06-03'", "source_tables": ["product", "central_superstore"]}, "evidence": "Security-Tint Envelopes' refers to \"Product Name\"; ordered on June 3, 2013 refers to \"Order Date\" = '2013-06-03'"}
{"sample_id": 2450, "db_id": "superstore", "final": {"question": "List the product's name bought by the customer named Bill Shonely from the Central region.", "sql": "SELECT DISTINCT T3.'Product Name' FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T2.'Product ID' WHERE T1.'Customer Name' = 'Bill Shonely' AND T2.Region = 'Central'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": ""}
{"sample_id": 2451, "db_id": "superstore", "final": {"question": "Please give the name of customers from the West region that bought exactly 8 items in their purchase.", "sql": "SELECT DISTINCT T2.'Customer Name' FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T1.Quantity = 8 AND T1.Region = 'West'", "source_tables": ["people", "west_superstore"]}, "evidence": "name of customers refers to \"Customer Name\"; bought exactly 8 items refers to Quantity = 8"}
{"sample_id": 2452, "db_id": "superstore", "final": {"question": "Among the customers from Houston, Texas, what is the total profit of their orders in the Central region?", "sql": "SELECT SUM(T2.Profit) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' INNER JOIN product AS T3 ON T3.'Product ID' = T2.'Product ID' WHERE T1.City = 'Houston' AND T1.State = 'Texas' AND T2.Region = 'Central'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "customers from Houston, Texas refers to State = 'Texas' and City = 'Houston'; total profit = sum(Profit)"}
{"sample_id": 2453, "db_id": "superstore", "final": {"question": "Who is the customer with an order shipped on March 5, 2013, in the eastern region?", "sql": "SELECT DISTINCT T2.'Customer Name' FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T1.'Ship Date' = '2013-03-05'", "source_tables": ["people", "east_superstore"]}, "evidence": "Who is the customer refers to Customer Name; shipped on March 5, 2013 refers to \"Ship Date\" = '2013-03-05'; eastern region refers to Region = 'East'"}
{"sample_id": 2454, "db_id": "superstore", "final": {"question": "Among the orders from 2016 in the Central region, what is the product with the lowest profit?", "sql": "SELECT T2.'Product Name' FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T2.Region = 'Central' AND STRFTIME('%Y', T1.'Order Date') = '2016' ORDER BY T1.Profit ASC LIMIT 1", "source_tables": ["product", "central_superstore"]}, "evidence": "orders from 2016 refers to \"Order Date\" = '2016%'; product refers to \"Product Name\"; lowest profit refers to min(Profit)"}
{"sample_id": 2455, "db_id": "superstore", "final": {"question": "Who ordered the order ID CA-2011-118976 from the East region?", "sql": "SELECT DISTINCT T2.'Customer Name' FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T1.'Order ID' = 'CA-2011-118976' AND T2.Region = 'East'", "source_tables": ["people", "east_superstore"]}, "evidence": "Who refers to \"Customer Name\""}
{"sample_id": 2456, "db_id": "superstore", "final": {"question": "Provide the product's name of the product with the highest sales in the South region.", "sql": "SELECT T2.'Product Name' FROM south_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T2.Region = 'South' ORDER BY T1.Sales DESC LIMIT 1", "source_tables": ["south_superstore", "product"]}, "evidence": "highest sales refers to max(Sales)"}
{"sample_id": 2457, "db_id": "superstore", "final": {"question": "List down the sales, profit, and subcategories of the product ordered in the order ID US-2011-126571 in the East region.", "sql": "SELECT T1.Sales, T1.Profit, T2.'Sub-Category' FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T1.'Order ID' = 'US-2011-126571' AND T2.Region = 'East'", "source_tables": ["product", "east_superstore"]}, "evidence": ""}
{"sample_id": 2458, "db_id": "superstore", "final": {"question": "What is the product's name in the highest quantity in a single purchase?", "sql": "SELECT T2.'Product Name' FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.'Product ID' = T2.'Product ID' WHERE T2.Region = 'East' ORDER BY T1.Quantity DESC LIMIT 1", "source_tables": ["product", "east_superstore"]}, "evidence": "highest quantity refers to max(Quantity)"}
{"sample_id": 2459, "db_id": "superstore", "final": {"question": "List the customer's name from the South region with a standard class ship mode and sales greater than the 88% of the average sales of all orders.", "sql": "SELECT DISTINCT T2.'Customer Name' FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T2.Region = 'South' AND T1.'Ship Mode' = 'Standard Class' AND 100 * T1.Sales / ( SELECT AVG(Sales) FROM south_superstore ) > 88", "source_tables": ["south_superstore", "people"]}, "evidence": "sales greater than the 88% of the average sales of all orders refers to Sales > avg(Sales) * 0.88; South region refers to south_superstore"}
{"sample_id": 2460, "db_id": "superstore", "final": {"question": "Among the customers from Indiana, what is the percentage of their purchased orders in the Central region with no discount?", "sql": "SELECT CAST(SUM(CASE  WHEN T2.Discount = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.'Customer ID' = T2.'Customer ID' WHERE T2.Region = 'Central' AND T1.State = 'Indiana'", "source_tables": ["people", "central_superstore"]}, "evidence": "Indiana refers to State = 'Indiana'; no discount refers to Discount = 0; percentage = divide(sum(Discount) when Discount = 0, count(Discount)) as percentage"}
{"sample_id": 2482, "db_id": "shooting", "final": {"question": "What is the most common type of weapon that causes death?", "sql": "SELECT subject_weapon FROM incidents WHERE subject_statuses = 'Deceased' GROUP BY subject_weapon ORDER BY COUNT(case_number) DESC LIMIT 1", "source_tables": ["incidents"]}, "evidence": "the most common type of weapon refers to max(count(subject_weapon)); causes death refers to subject_statuses = 'Deceased'"}
{"sample_id": 2483, "db_id": "shooting", "final": {"question": "What is the proportion of white males and females in the police force?", "sql": "SELECT CAST(SUM(gender = 'M') AS REAL) / SUM(gender = 'F') FROM officers WHERE race = 'W'", "source_tables": ["officers"]}, "evidence": "white refers to race = 'W'; male refers to gender = 'M'; female refers to gender = 'F'; proportion of white males = divide(count(officers where race = 'W' and gender = 'M'), count(officers)) * 100%; proportion of white females = divide(count(officers where race = 'W' and gender = 'F'), count(officers)) * 100%"}
{"sample_id": 2484, "db_id": "shooting", "final": {"question": "How many more black female victims than white female victims were discovered?", "sql": "SELECT SUM(race = 'B') - SUM(race = 'W') FROM subjects WHERE gender = 'F'", "source_tables": ["subjects"]}, "evidence": "black refers to race = 'B'; female refers to gender = 'F'; white refers to race = 'W'; result = subtract(count(victims where race = 'B'), count(victims where race = 'W')) where gender = 'F'"}
{"sample_id": 2485, "db_id": "shooting", "final": {"question": "What percentage of deaths were caused by rifles?", "sql": "SELECT CAST(SUM(subject_statuses = 'Deceased') AS REAL) * 100 / COUNT(case_number) FROM incidents WHERE subject_weapon = 'Rifle'", "source_tables": ["incidents"]}, "evidence": "rifle refers to subject_weapon = 'rifles'; death refers to subject_statuses = 'Deceased'; percentage = divide(count(incidents where subject_weapon = 'rifles'), count(incidents)) where subject_statuses = 'Deceased' * 100%"}
{"sample_id": 2486, "db_id": "shooting", "final": {"question": "Which type of weapon was used to attack the victim in the record number 031347-2015? What is the victim's race and gender?", "sql": "SELECT T1.subject_weapon, T2.race, T2.gender FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T1.case_number = '031347-2015'", "source_tables": ["incidents", "subjects"]}, "evidence": "type of weapon refers to subject_weapon; record number 031347-2015 refers to case_number = '031347-2015'"}
{"sample_id": 2487, "db_id": "shooting", "final": {"question": "Which near-death incident did a policeman by the name of Ruben Fredirick look into? What is the victim in this incident's race and gender?", "sql": "SELECT T1.case_number, T3.race, T3.gender FROM incidents AS T1 INNER JOIN officers AS T2 ON T1.case_number = T2.case_number INNER JOIN subjects AS T3 ON T1.case_number = T3.case_number WHERE T2.first_name = 'Fredirick' AND T2.last_name = 'Ruben'", "source_tables": ["incidents", "subjects", "officers"]}, "evidence": "near-death refers to subject_statuses = 'Deceased Injured'; incident refers to case_number; Ruben Fredirick refers to full_name = 'Ruben Fredirick'"}
{"sample_id": 2488, "db_id": "shooting", "final": {"question": "What proportion of male police officers looked into events where people were injured?", "sql": "SELECT CAST(SUM(T2.gender = 'M') AS REAL) * 100 / COUNT(T1.case_number) FROM incidents T1 INNER JOIN officers T2 ON T1.case_number = T2.case_number WHERE T1.subject_statuses = 'Injured'", "source_tables": ["incidents", "officers"]}, "evidence": "male refers to gender = 'M'; people were injured refers to subject_statuses = 'Injured'; proportion = divide(count(case_number where gender = 'M'), count(case_number)) where subject_statuses = 'Injured' * 100%"}
{"sample_id": 2506, "db_id": "genes", "final": {"question": "What type of interactions occurs in genes whose function is cellular transport and transport medicine and are classified as non-essential?", "sql": "SELECT T2.Type FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Function = 'TRANSCRIPTION' AND T1.Essential = 'Non-Essential'", "source_tables": ["interactions", "genes"]}, "evidence": ""}
{"sample_id": 2507, "db_id": "genes", "final": {"question": "List all genes whose interaction is with genes located in the nucleus in which it is positively correlated.", "sql": "SELECT T1.GeneID FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr > 0 AND T1.Localization = 'nucleus'", "source_tables": ["interactions", "genes"]}, "evidence": "If the Expression_Corr value is positive then it's positively correlated"}
{"sample_id": 2508, "db_id": "genes", "final": {"question": "Taking all the essential genes of the transcription factors class located in the nucleus as a reference, how many of them carry out a genetic-type interaction with another gene? List them.", "sql": "SELECT T2.GeneID1 FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Localization = 'nucleus' AND T1.Class = 'Transcription factors' AND T1.Essential = 'Essential' AND T2.Expression_Corr != 0", "source_tables": ["interactions", "genes"]}, "evidence": ""}
{"sample_id": 2509, "db_id": "genes", "final": {"question": "Of all the nonessential genes that are not of the motorprotein class and whose phenotype is cell cycle defects, how many do not have a physical type of interaction?", "sql": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Type != 'Physical' AND T1.Phenotype = 'Cell cycle defects' AND T1.Class != 'Motorproteins' AND T1.Essential = 'Non-Essential'", "source_tables": ["interactions", "genes"]}, "evidence": ""}
{"sample_id": 2510, "db_id": "genes", "final": {"question": "Of the genes whose phenotype and motif are nucleic acid metabolism defects, PS00107, what percentage perform positive interaction with another gene?", "sql": "SELECT CAST(SUM(IIF(T2.Expression_Corr > 0, 1, 0)) AS REAL) * 100 / COUNT(T2.GeneID1) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Phenotype = 'Nucleic acid metabolism defects' AND T1.Motif = 'PS00107'", "source_tables": ["interactions", "genes"]}, "evidence": "Percentage of no interaction = [count(nucleic acid metabolism, PS00107, no interaction) / count(nucleic acid metabolism, PS00107) * 100%"}
{"sample_id": 2511, "db_id": "genes", "final": {"question": "Which negatively correlated, genetically interacting genes are non-essential? What percentage do they represent with respect to those that are essential?", "sql": "SELECT CAST(COUNT(T1.GeneID) AS REAL) * 100 / ( SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr < 0 ) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr < 0 AND T1.Essential = 'Non-Essential'", "source_tables": ["interactions", "genes"]}, "evidence": "If the Expression_Corr value is negative then it's negatively correlated; Percentage of Essensity = [count(negatively correlated, genetical interaction, non-essential) / count(negatively correlated, genetical interaction, non-essential+negatively correlated, genetical interaction, essential)] * 100%"}
{"sample_id": 2561, "db_id": "app_store", "final": {"question": "List down the rating for the App Learn C++.", "sql": "SELECT DISTINCT Rating FROM playstore WHERE App = 'Learn C++'", "source_tables": ["playstore"]}, "evidence": "FALSE;"}
{"sample_id": 2562, "db_id": "app_store", "final": {"question": "What is the average price of games belonging in the arcade genre which has a content rating of Everyone 10+?", "sql": "SELECT AVG(Price) FROM playstore WHERE 'Content Rating' = 'Everyone 10+' AND Genres = 'Arcade'", "source_tables": ["playstore"]}, "evidence": "average price = AVG(Price);"}
{"sample_id": 2563, "db_id": "app_store", "final": {"question": "How much is the size of Browser 4G and how many users have a pretty positive favorability on it?", "sql": "SELECT T1.Size, COUNT(T1.App) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Browser 4G' AND T2.Sentiment_Polarity >= 0.5", "source_tables": ["user_reviews", "playstore"]}, "evidence": "Browser 4G is the App; pretty positive favorability refers to Sentiment_Polarity score = 0.5"}
{"sample_id": 2564, "db_id": "app_store", "final": {"question": "Name the Apps with a sentiment objectivity of 0.3 and include their number of installs.", "sql": "SELECT DISTINCT T1.App, T1.Installs FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Sentiment_Polarity = 0.3", "source_tables": ["user_reviews", "playstore"]}, "evidence": "FALSE;"}
{"sample_id": 2565, "db_id": "app_store", "final": {"question": "How much is the average sentiment polarity score of Golf GPS Rangefinder: Golf Pad and what is it's rating in the Google Play Store?", "sql": "SELECT AVG(T2.Sentiment_Polarity), T1.Rating FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Golf GPS Rangefinder: Golf Pad'", "source_tables": ["user_reviews", "playstore"]}, "evidence": "average sentiment polarity score = AVG(Sentiment_Polarity); Golf GPS Rangefinder: Golf Pad\u00a0 is the App;"}
{"sample_id": 2566, "db_id": "app_store", "final": {"question": "List the top 5 lowest rated puzzle games and count the number of negative sentiments the games received.", "sql": "SELECT T1.App, COUNT(T1.App) COUNTNUMBER FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Sentiment = 'Negative' GROUP BY T1.App ORDER BY T1.Rating LIMIT 5", "source_tables": ["user_reviews", "playstore"]}, "evidence": "lowest rating refers to MIN(Rating); puzzle is the genre;"}
{"sample_id": 2567, "db_id": "app_store", "final": {"question": "What is the percentage ratio between positive sentiments and negative sentiments that are in Fate/Grand Order? Also indicate the current version.", "sql": "SELECT CAST(SUM(CASE WHEN T2.Sentiment = 'Positive' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Sentiment = 'Negative' THEN 1 ELSE 0 END), T1.'Current Ver' FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Fate/Grand Order (English)' AND T1.'Current Ver' = '1.18.0'", "source_tables": ["user_reviews", "playstore"]}, "evidence": "Fate/Grand Order is the App; percentage ratio = MULTIPLY(DIVIDE((SUM(Sentiment = 'Positive')), (SUM(Sentiment = 'Negative'))), 100);"}
{"sample_id": 2568, "db_id": "app_store", "final": {"question": "Indicate the number of installs and include the percentage of positive sentiments of FREEDOME VPN Unlimited anonymous Wifi Security.", "sql": "SELECT T1.Installs , CAST(SUM(CASE WHEN T2.Sentiment = 'Positive' THEN 1 ELSE 0 END) * 100 / SUM(CASE WHEN T2.Sentiment IS NOT NULL THEN 1.0 ELSE 0 END) AS REAL) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'FREEDOME VPN Unlimited anonymous Wifi Security'", "source_tables": ["user_reviews", "playstore"]}, "evidence": "FREEDOME VPN Unlimited anonymous Wifi Security is the App; percentage = MULTIPLY(DIVIDE((SUM(Sentiment = 'Positive')), (COUNT(*))), 100)"}
{"sample_id": 2569, "db_id": "app_store", "final": {"question": "For the Honkai Impact 3rd App, what is the highest sentiment polarity score and what genre does it belong to?", "sql": "SELECT MAX(T2.Sentiment_Polarity), T1.Genres FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Honkai Impact 3rd' AND T2.Sentiment_Polarity > 0.5 GROUP BY T1.Genres", "source_tables": ["user_reviews", "playstore"]}, "evidence": "highest sentiment polarity score refers to MAX(Sentiment_Polarity);"}
{"sample_id": 2570, "db_id": "app_store", "final": {"question": "What is the rating of Dragon Ball Legends and how many users dislike this App?", "sql": "SELECT T1.Rating, COUNT(T2.Sentiment_Polarity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Dragon Ball Legends' AND CAST(Sentiment_Polarity AS INTEGER) < -0.5", "source_tables": ["user_reviews", "playstore"]}, "evidence": "Dragon Ball Legends is the app; users who dislikes the app refers to Sentiment_Polarity<-0.5;"}
{"sample_id": 2571, "db_id": "app_store", "final": {"question": "Which education App has the worst rating and state the translated review if available.", "sql": "SELECT T1.App, T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Category = 'EDUCATION' GROUP BY T1.App, T2.Translated_Review ORDER BY T1.Rating ASC LIMIT 1", "source_tables": ["user_reviews", "playstore"]}, "evidence": "education App refers to Category = 'EDUCATION'; worst rated app refers to Rating = 1;"}
{"sample_id": 2572, "db_id": "app_store", "final": {"question": "List all free sports Apps and their translated review.", "sql": "SELECT T1.App, T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Type = 'Free' AND T1.Category = 'SPORTS'", "source_tables": ["user_reviews", "playstore"]}, "evidence": "paid sports Apps refers to type = 'Paid' and Category = 'SPORTS';"}
{"sample_id": 2573, "db_id": "app_store", "final": {"question": "Among the role playing game genre, how many are targeted to teens and what is their average sentiment polarity score?", "sql": "SELECT COUNT(T1.App), AVG(T2.Sentiment_Polarity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.'Content Rating' = 'Teen' AND T1.Genres = 'Role Playing'", "source_tables": ["user_reviews", "playstore"]}, "evidence": "targeted to teen refers to Content Rating = 'Teen'; average = AVG(Sentiment_Polarity);"}
{"sample_id": 2574, "db_id": "app_store", "final": {"question": "What is the average rating of Apps falling under the racing genre and what is the percentage ratio of positive sentiment reviews?", "sql": "SELECT AVG(T1.Rating), CAST(COUNT(CASE WHEN T2.Sentiment = 'Positive' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.Sentiment) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Genres = 'Racing'", "source_tables": ["user_reviews", "playstore"]}, "evidence": "average rating = AVG(Rating); percentage = MULTIPLY(DIVIDE((SUM(Sentiment = 'Positive')), (COUNT(*)), 100));"}
{"sample_id": 2705, "db_id": "regional_sales", "final": {"question": "Which Apollo Ltd customer's order number has the most expensive unit price, indicating the order date?", "sql": "SELECT T1.OrderNumber, T1.OrderDate FROM 'Sales Orders' AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.'Customer Names' = 'Apollo Ltd' ORDER BY T1.'Unit Price' DESC LIMIT 1", "source_tables": ["sales orders", "customers"]}, "evidence": "\"Apollo Ltd\" is the Customer Names; most expensive unit price refers to max(Unit Price)"}
{"sample_id": 2706, "db_id": "regional_sales", "final": {"question": "Provide order number, warehouse code of customers Elorac, Corp.", "sql": "SELECT DISTINCT T1.OrderNumber, T1.WarehouseCode FROM 'Sales Orders' AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.'Customer Names' = 'Elorac, Corp'", "source_tables": ["sales orders", "customers"]}, "evidence": "\"Elorac, Corp\" is the Customer Names"}
{"sample_id": 2707, "db_id": "regional_sales", "final": {"question": "Name of customers who have ordered Cocktail Glasses by online sales channel.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T3.'Product Name' = 'Cocktail Glasses' AND T2.'Sales Channel' = 'Online' THEN T1.'Customer Names' END AS T FROM Customers T1 INNER JOIN 'Sales Orders' T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products T3 ON T3.ProductID = T2._ProductID ) WHERE T IS NOT NULL", "source_tables": ["sales orders", "products", "customers"]}, "evidence": "\"Cocktail Glasses\" is the Product Name; customer refers to Customer Names"}
{"sample_id": 2708, "db_id": "regional_sales", "final": {"question": "Which store in Arizona has the most net profit?", "sql": "SELECT T2.StoreID FROM 'Sales Orders' AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StoreID = T1._StoreID WHERE T2.State = 'Arizona' ORDER BY T1.'Unit Price' - T1.'Unit Cost' DESC LIMIT 1", "source_tables": ["sales orders", "store locations"]}, "evidence": "\"Arizona\" is the name of State; most net profit = Max(Subtract( Unit Price, Unit Cost))"}
{"sample_id": 2709, "db_id": "regional_sales", "final": {"question": "How much more is the Florida store's computer product unit price than the Texas store?", "sql": "SELECT SUM(CASE WHEN T3.State = 'Florida' THEN T2.'Unit Price' ELSE 0 END) - SUM(CASE WHEN T3.State = 'Texas' THEN T2.'Unit Price' ELSE 0 END) FROM Products AS T1 INNER JOIN 'Sales Orders' AS T2 ON T2._ProductID = T1.ProductID INNER JOIN 'Store Locations' AS T3 ON T3.StoreID = T2._StoreID WHERE T1.'Product Name' = 'Computers'", "source_tables": ["sales orders", "products", "store locations"]}, "evidence": "\"Florida\" and \"Texas\" are both the name of State; Computer product refers to Product Name = 'Computers; difference in unit price = Subtract (Unit Price where State = 'Florida', Unit Price where State = 'Texas')"}
{"sample_id": 2710, "db_id": "regional_sales", "final": {"question": "Among sales teams in Midwest region, which sales team has an order quantity greater than 5?", "sql": "SELECT DISTINCT T2.'Sales Team' FROM 'Sales Orders' AS T1 INNER JOIN 'Sales Team' AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.Region = 'Midwest' AND T1.'Order Quantity' > 5", "source_tables": ["sales orders", "sales team"]}, "evidence": "order quantity greater than 5 refers to Order Quantity > 5"}
{"sample_id": 2711, "db_id": "regional_sales", "final": {"question": "Please indicate store id in the state of California that have been applied 20% discount in store.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.State = 'California' AND T1.'Sales Channel' = 'In-Store' AND T1.'Discount Applied' = 0.2 THEN T2.StoreID END AS T FROM 'Sales Orders' T1 INNER JOIN 'Store Locations' T2 ON T2.StoreID = T1._StoreID ) WHERE T IS NOT NULL", "source_tables": ["sales orders", "store locations"]}, "evidence": "\"California\" is the name of State; in store refers to Sales Channel = 'In-Store'; 20% discount refers to Discount Applied = '0.2'"}
{"sample_id": 2712, "db_id": "regional_sales", "final": {"question": "List the name of the customer with the most number of order quantity from 2018 to 2020.", "sql": "SELECT T1.'Customer Names' FROM Customers AS T1 INNER JOIN 'Sales Orders' AS T2 ON T2._CustomerID = T1.CustomerID WHERE T2.OrderDate LIKE '%/%/18' OR T2.OrderDate LIKE '%/%/19' OR T2.OrderDate LIKE '%/%/20' ORDER BY T2.'Order Quantity' DESC LIMIT 1", "source_tables": ["sales orders", "customers"]}, "evidence": "name of customer refers to Customer Names; from 2018 to 2020 refers to OrderDate between '1/1/2018' and '31/12/2020'; most number of order quantity refers to Order Quantity = 8"}
{"sample_id": 2713, "db_id": "regional_sales", "final": {"question": "Please indicate total order quantity of product Candles and calculate the percentage of such product among all the orders.", "sql": "SELECT SUM(CASE WHEN T1.'Product Name' = 'Candles' THEN T2.'Order Quantity' ELSE 0 END), CAST(SUM(CASE WHEN T1.'Product Name' = 'Candles' THEN T2.'Order Quantity' ELSE 0 END) AS REAL) * 100 / SUM(T2.'Order Quantity') FROM Products AS T1 INNER JOIN 'Sales Orders' AS T2 ON T2._ProductID = T1.ProductID INNER JOIN 'Store Locations' AS T3 ON T3.StoreID = T2._StoreID", "source_tables": ["sales orders", "products", "store locations"]}, "evidence": "total order quantity refers to Sum (Order Quantity); 'Candles' is the Products Name; percentage = Divide (Sum(Order Quantity where Product Name = 'Candles'), Sum(Order Quantity)) * 100"}
{"sample_id": 2714, "db_id": "regional_sales", "final": {"question": "Which region is Joshua Bennet located in?", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN 'Sales Team' = 'Joshua Bennett' THEN Region ELSE NULL END AS T FROM 'Sales Team' ) WHERE T IS NOT NULL", "source_tables": ["sales team"]}, "evidence": "\"Joshua Bennett\" is the name of Sales Team"}
{"sample_id": 2715, "db_id": "regional_sales", "final": {"question": "What is the store id of the store located in the most populous county?", "sql": "SELECT CASE WHEN MAX(Population) THEN StoreID END FROM 'Store Locations'", "source_tables": ["store locations"]}, "evidence": "most populous country refers to Max(Population)"}
{"sample_id": 2716, "db_id": "regional_sales", "final": {"question": "How many sales teams are there in the Midwest?", "sql": "SELECT SUM(CASE WHEN Region = 'Midwest' THEN 1 ELSE 0 END) FROM 'Sales Team'", "source_tables": ["sales team"]}, "evidence": "\"Midwest\" is the Region"}
{"sample_id": 2717, "db_id": "regional_sales", "final": {"question": "What is the type of store located in the city with the highest amount of water area?", "sql": "SELECT CASE WHEN MAX('Water Area') THEN Type END FROM 'Store Locations'", "source_tables": ["store locations"]}, "evidence": "type of store in City refers to Type = 'City'; highest amount of water area refers to Max(Water Area)"}
{"sample_id": 2718, "db_id": "regional_sales", "final": {"question": "How many online orders were shipped during the month of June 2018?", "sql": "SELECT SUM(IIF(ShipDate LIKE '6/%/18' AND 'Sales Channel' = 'Online', 1, 0)) FROM 'Sales Orders'", "source_tables": ["sales orders"]}, "evidence": "online orders refers to Sales Channel = 'Online'; shipped during the month of June 2018 refers to SUBSTR(ShipDate, 1, 1) = '6' AND SUBSTR(ShipDate,-2) = '18'"}
{"sample_id": 2719, "db_id": "regional_sales", "final": {"question": "How much is the discount applied to the order with the highest unit price?", "sql": "SELECT 'Discount Applied' FROM 'Sales Orders' WHERE REPLACE('Unit Price', ',', '') = ( SELECT REPLACE('Unit Price', ',', '') FROM 'Sales Orders' ORDER BY REPLACE('Unit Price', ',', '') DESC LIMIT 1 ) ORDER BY REPLACE('Unit Price', ',', '') DESC LIMIT 1", "source_tables": ["sales orders"]}, "evidence": "highest unit price refers to Max(Unit Price)"}
{"sample_id": 2720, "db_id": "regional_sales", "final": {"question": "What is the name of the product with the highest net profit?", "sql": "SELECT T2.'Product Name' FROM 'Sales Orders' AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID ORDER BY REPLACE(T1.'Unit Price', ',', '') - REPLACE(T1.'Unit Cost', ',', '') DESC LIMIT 1", "source_tables": ["sales orders", "products"]}, "evidence": "highest net profit = Max(Subtract (Unit Price, Unit Cost)); name of product refers to Product Name"}
{"sample_id": 2721, "db_id": "regional_sales", "final": {"question": "In the Northeast region, what is the average household income for each city located in the state with the highest number of stores?", "sql": "SELECT AVG(T2.'Household Income') FROM Regions AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StateCode = T1.StateCode WHERE T1.Region = 'Northeast' GROUP BY T2.State ORDER BY COUNT(T2.StoreID) DESC LIMIT 1", "source_tables": ["regions", "store locations"]}, "evidence": "average household income = Divide (Sum(Household Income), Count(City Name)); highest number of store refers to Max(Count(StoreID))"}
{"sample_id": 2722, "db_id": "regional_sales", "final": {"question": "In which region can you find the stores located in the state whose median income is no more than 30,000?", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.'Median Income' < 30000 THEN T1.Region END AS T FROM Regions T1 INNER JOIN 'Store Locations' T2 ON T2.StateCode = T1.StateCode ) WHERE T IS NOT NULL", "source_tables": ["regions", "store locations"]}, "evidence": "median income no more than 30,000 refers to Median Income < 30,000"}
{"sample_id": 2723, "db_id": "regional_sales", "final": {"question": "In the West, how many stores are there in the city whose land area is below 20,000,000?", "sql": "SELECT SUM(CASE WHEN T1.Region = 'West' AND T2.'Land Area' < 20000000 THEN 1 ELSE 0 END) FROM Regions AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StateCode = T1.StateCode", "source_tables": ["regions", "store locations"]}, "evidence": "\"West\" is the Region; land area is below 20,000,000 refers to Land Area < 20,000,000"}
{"sample_id": 2724, "db_id": "regional_sales", "final": {"question": "What is the name of the customer who purchased the product with the highest net profiit?", "sql": "SELECT 'Customer Names' FROM ( SELECT T1.'Customer Names', T2.'Unit Price' - T2.'Unit Cost' AS 'net profit' FROM Customers T1 INNER JOIN 'Sales Orders' T2 ON T2._CustomerID = T1.CustomerID ) ORDER BY 'net profit' DESC LIMIT 1", "source_tables": ["sales orders", "customers"]}, "evidence": "highest net profit = Max(Subtract (Unit Price, Unit Cost)); name of customer refers to Customer Names"}
{"sample_id": 2725, "db_id": "regional_sales", "final": {"question": "In 2019, how many orders were shipped by the sales team with the highest number of orders in the said year? Provide the name of the sales team.", "sql": "SELECT COUNT(T1.OrderNumber), T2.'Sales Team' FROM 'Sales Orders' AS T1 INNER JOIN 'Sales Team' AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderDate LIKE '%/%/19' AND T1.ShipDate LIKE '%/%/19' GROUP BY T2.'Sales Team' ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1", "source_tables": ["sales orders", "sales team"]}, "evidence": "shipped refers to ShipDate; in 2019 refers to shipped in 2019 refers to SUBSTR(ShipDate, -2) = '19'; order in the said year refers to SUBSTR(OrderDate, -2) = '19'; highest number of order refers to Max(Count(OrderNumber))"}
{"sample_id": 2726, "db_id": "regional_sales", "final": {"question": "Among the products with an order quantity of no less than 5 that was shipped in the month of May 2019, what is the name of the product with the lowest net profit?", "sql": "SELECT T2.'Product Name' FROM 'Sales Orders' AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.'Order Quantity' > 5 AND ShipDate LIKE '5/%/19' ORDER BY REPLACE(T1.'Unit Price', ',', '') - REPLACE(T1.'Unit Cost', ',', '') ASC LIMIT 1", "source_tables": ["sales orders", "products"]}, "evidence": "order quantity of no less than 5 refers to Order Quantity > 5; shipped in the month of May 2019 refers to ShipDate LIKE '5/%/19'; lowest net profit = Min(Subtract(Unit Price, Unit Cost)); name of product refers to Products Name"}
{"sample_id": 2727, "db_id": "regional_sales", "final": {"question": "What is the detailed coordinates of the store where the product with the 4th highest profit were purchased from?", "sql": "SELECT T2.Latitude, T2.Longitude FROM 'Sales Orders' AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StoreID = T1._StoreID ORDER BY REPLACE(T1.'Unit Price', ',', '') - REPLACE(T1.'Unit Cost', ',', '') DESC LIMIT 3, 1", "source_tables": ["sales orders", "store locations"]}, "evidence": "detailed coordinates refers to Latitude, Longitude; highest net profit = Max(Subtract(Unit Price, Unit Cost))"}
{"sample_id": 2728, "db_id": "regional_sales", "final": {"question": "How many orders were shipped by the sales team with the highest amount of shipped orders in 2020? Give the name of the said sales team.", "sql": "SELECT COUNT(T1.OrderNumber), T2.'Sales Team' FROM 'Sales Orders' AS T1 INNER JOIN 'Sales Team' AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.ShipDate LIKE '%/%/20' GROUP BY T2.'Sales Team' ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1", "source_tables": ["sales orders", "sales team"]}, "evidence": "shipped refers to ShipDate; in 2020 refers to SUBSTR(ShipDate, -2) = '20'; highest amount of shipped orders refers to Max(Count(OrderNumber))"}
{"sample_id": 2729, "db_id": "regional_sales", "final": {"question": "Between 2018 to 2020, what is the average amount of shipped orders per year under Carl Nguyen?", "sql": "SELECT CAST(COUNT(T1.OrderNumber) AS REAL) / 3 FROM 'Sales Orders' AS T1 INNER JOIN 'Sales Team' AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE (T2.'Sales Team' = 'Carl Nguyen' AND ShipDate LIKE '%/%/18') OR (T2.'Sales Team' = 'Carl Nguyen' AND ShipDate LIKE '%/%/19') OR (T2.'Sales Team' = 'Carl Nguyen' AND ShipDate LIKE '%/%/20')", "source_tables": ["sales orders", "sales team"]}, "evidence": "shipped refers to ShipDate; between 2018 and 2020 refers to SUBSTR(ShipDate, -2) IN ('18', '19', '20'); 'Carl Nguyen' is the name of Sales Team; average shipped orders per year = Divide (Count(OrderNumber), 3)"}
{"sample_id": 2730, "db_id": "regional_sales", "final": {"question": "What is the amount of discount applied to the product with the highest net profit and what is the name of the said product?", "sql": "SELECT T1.'Unit Price' * T1.'Discount Applied', T2.'Product Name' FROM 'Sales Orders' AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID ORDER BY REPLACE(T1.'Unit Price', ',', '') - REPLACE(T1.'Unit Cost', ',', '') DESC LIMIT 1", "source_tables": ["sales orders", "products"]}, "evidence": "highest net profit refers to Max(Subtract(Unit Price, Unit Cost)); name of product refers to Product Name"}
{"sample_id": 2731, "db_id": "regional_sales", "final": {"question": "What are the names of the top 3 customers who paid the highest amount of price per order after discount?", "sql": "SELECT 'Customer Names' FROM ( SELECT T1.'Customer Names' , REPLACE(T2.'Unit Price', ',', '') * T2.'Order Quantity' - REPLACE(T2.'Unit Price', ',', '') * T2.'Discount Applied' AS T FROM Customers T1 INNER JOIN 'Sales Orders' T2 ON T2._CustomerID = T1.CustomerID ) ORDER BY T DESC LIMIT 3", "source_tables": ["sales orders", "customers"]}, "evidence": "highest price per order after discount refers to Max(Subtract(Multiply (Unit Price, Order Quantity), Discount Applied)); name of customer refers to Customer Names"}
{"sample_id": 2732, "db_id": "regional_sales", "final": {"question": "Which sales channel was most preferred in commercializing products in January 2020 based on the number of orders placed?", "sql": "SELECT 'Sales Channel' FROM 'Sales Orders' WHERE OrderDate LIKE '1/%/20' GROUP BY 'Sales Channel' ORDER BY COUNT('Sales Channel') DESC LIMIT 1", "source_tables": ["sales orders"]}, "evidence": "order refers to OrderDate; in 2020 refers to Substr(OrderDate, -2) = '20'; January refers to Substr(OrderDate, 1, 1) = '1';\u00a0 most preferred sales channel refers to Sales Channel where Max(Count(OrderNumber))"}
{"sample_id": 2733, "db_id": "regional_sales", "final": {"question": "Name the product that was registered in the sales order 'SO - 0005951'.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.OrderNumber = 'SO - 0005951' THEN T1.'Product Name' ELSE NULL END AS T FROM Products T1 INNER JOIN 'Sales Orders' T2 ON T2._ProductID = T1.ProductID ) WHERE T IS NOT NULL", "source_tables": ["sales orders", "products"]}, "evidence": "sales order 'SO - 0005951' refers to OrderNumber = 'SO - 0005951'; product refers to Product Name"}
{"sample_id": 2734, "db_id": "regional_sales", "final": {"question": "Identify the store location and sales team who processed the sales order 'SO - 0001004'.", "sql": "SELECT T3.'Sales Team', T1.'City Name' FROM 'Store Locations' AS T1 INNER JOIN 'Sales Orders' AS T2 ON T2._StoreID = T1.StoreID INNER JOIN 'Sales Team' AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T2.OrderNumber = 'SO - 0001004'", "source_tables": ["sales orders", "sales team", "store locations"]}, "evidence": "sales order 'SO - 0001004' refers to OrderNumber = 'SO - 0001004'; store location refers to City Name"}
{"sample_id": 2735, "db_id": "regional_sales", "final": {"question": "Identify the top customer of the store located in Gilbert, Arizona based on net profit associated with the customer relationship in 2019.", "sql": "SELECT T1.'Customer Names' FROM Customers AS T1 INNER JOIN 'Sales Orders' AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN 'Store Locations' AS T3 ON T3.StoreID = T2._StoreID WHERE T3.'City Name' = 'Gilbert' AND T2.ProcuredDate LIKE '%/%/19' ORDER BY REPLACE(T2.'Unit Price', ',', '') - REPLACE(T2.'Unit Cost', ',', '') DESC LIMIT 1", "source_tables": ["store locations", "sales orders", "customers"]}, "evidence": "\"Gilbert\" is the City Name; 'Arizona' is the name of State; customer relationship in 2019 refers to ProcuredDate LIKE '%/19'; top net profit refers to Max(Subtract(Unit Price, Unit Cost))"}
{"sample_id": 2736, "db_id": "regional_sales", "final": {"question": "How many sales orders were processed by the store located in Chandler in 2020?", "sql": "SELECT SUM(CASE WHEN T2.'City Name' = 'Chandler' AND T1.OrderDate LIKE '%/%/20' THEN 1 ELSE 0 END) FROM 'Sales Orders' AS T1 INNER JOIN 'Store Locations' AS T2 ON T2.StoreID = T1._StoreID", "source_tables": ["sales orders", "store locations"]}, "evidence": "\"Chandler\" is the City Name; orders refers to OrderDate; in 2020 refers to Substr(OrderDate, -2) = '20'"}
{"sample_id": 2737, "db_id": "regional_sales", "final": {"question": "What is the average household income of Glendale?", "sql": "SELECT AVG('Household Income') FROM 'Store Locations' WHERE 'City Name' = 'Glendale'", "source_tables": ["store locations"]}, "evidence": "\"Glendale\" is the City Name; Average household income refers to avg(Household Income)"}
{"sample_id": 2738, "db_id": "regional_sales", "final": {"question": "What was the best discount applied to sales orders in 2020?", "sql": "SELECT MAX('Discount Applied') FROM 'Sales Orders' WHERE OrderDate LIKE '%/%/20'", "source_tables": ["sales orders"]}, "evidence": "sales orders in 2020 refers to Substr(OrderDate, -2) = '20'; best discount applied refers to Max(Discount Applied)"}
{"sample_id": 2784, "db_id": "european_football_1", "final": {"question": "Which team was the home team in the match of the Bundesliga division on 2020/10/2?", "sql": "SELECT T1.HomeTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.Date = '2020-10-02' AND T2.name = 'Bundesliga'", "source_tables": ["matchs", "divisions"]}, "evidence": "Bundesliga is the name of division; Date = '2020/10/2';"}
{"sample_id": 2785, "db_id": "european_football_1", "final": {"question": "Which team won the match of the Bundesliga division on 2020/10/2?", "sql": "SELECT CASE WHEN T1.FTR = 'H' THEN T1.HomeTeam WHEN T1.FTR = 'A' THEN T1.AwayTeam END WINNER FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.Date = '2020-10-02' AND T2.name = 'Bundesliga'", "source_tables": ["matchs", "divisions"]}, "evidence": "Bundesliga is the name of division; Date = '2020/10/2'; won the match refers to FTR = 'H';"}
{"sample_id": 2786, "db_id": "european_football_1", "final": {"question": "Which team has the most victories as the home team in matches of the Bundesliga division?", "sql": "SELECT T1.HomeTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.FTR = 'H' GROUP BY T1.HomeTeam ORDER BY COUNT(T1.FTR) DESC LIMIT 1", "source_tables": ["matchs", "divisions"]}, "evidence": "Bundesliga is the name of division; the most victories as the home team refers to MAX(COUNT(FTR = 'H'));"}
{"sample_id": 2787, "db_id": "european_football_1", "final": {"question": "How many times did the team Werder Bremen win as the away team in matches of the Bundesliga division?", "sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.AwayTeam = 'Werder Bremen' AND T1.FTR = 'A'", "source_tables": ["matchs", "divisions"]}, "evidence": "Bundesliga is the name of division; win as the away team refers to FTR = 'A', where 'A' stands for away victory;"}
{"sample_id": 2788, "db_id": "european_football_1", "final": {"question": "How many matches of the Bundesliga division ended with an away victory in the 2021 season?", "sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.FTR = 'A' AND T1.season = 2021", "source_tables": ["matchs", "divisions"]}, "evidence": "Bundesliga is the name of division; away victory refers to FTR = 'A', where 'A' stands for away victory;"}
{"sample_id": 2789, "db_id": "european_football_1", "final": {"question": "Of the matches in all seasons of the Bundesliga division, how many of them ended with a tie?", "sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.FTR = 'D'", "source_tables": ["matchs", "divisions"]}, "evidence": "Bundesliga is the name of division; tie refers to FTR = 'D', where D stands for draft;"}
{"sample_id": 2790, "db_id": "european_football_1", "final": {"question": "How many home victories does the Bundesliga division have in more or less than the Premier League division in the 2021 season?", "sql": "SELECT COUNT(CASE WHEN T2.name = 'Bundesliga' THEN 1 ELSE NULL END) - COUNT(CASE WHEN T2.name = 'Premier League' THEN 1 ELSE NULL END) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T1.FTR = 'H'", "source_tables": ["matchs", "divisions"]}, "evidence": "Bundesliga and the Premier League are names of division; home victories refer to FTR = 'H', where H stands for home victory; SUBTRACT(COUNT(FTR = 'H' where season = 2021, name = 'Bundesliga'), COUNT(FTR = 'H' where season = 2021, name = 'Premier League'));"}
{"sample_id": 2791, "db_id": "european_football_1", "final": {"question": "Please list the home teams in the matches of the Bundesliga division that ended with a home victory in the 2021 season.", "sql": "SELECT DISTINCT T1.HomeTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T1.FTR = 'H' AND T2.name = 'Bundesliga'", "source_tables": ["matchs", "divisions"]}, "evidence": "Bundesliga is the name of division; home victory refers to refer to FTR = 'H', where H stands for home victory;"}
{"sample_id": 2792, "db_id": "european_football_1", "final": {"question": "Which team had more home victories in the 2021 season's matches of the Bundesliga division, Augsburg or Mainz?", "sql": "SELECT CASE WHEN COUNT(CASE WHEN T1.HomeTeam = 'Augsburg' THEN 1 ELSE NULL END) - COUNT(CASE WHEN T1.HomeTeam = ' Mainz' THEN 1 ELSE NULL END) > 0 THEN 'Augsburg' ELSE 'Mainz' END FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T1.FTR = 'H'", "source_tables": ["matchs", "divisions"]}, "evidence": "Bundesliga is the name of division; more home victories refer to MAX(FTR = 'H)'; Augsburg and Mainz are names of teams and refer to HomeTeam;"}
{"sample_id": 2793, "db_id": "european_football_1", "final": {"question": "Which team had the most final-time home-team goals in the 2021 season's matches of the Bundesliga division?", "sql": "SELECT T1.HomeTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.season = 2021 ORDER BY T1.FTHG DESC LIMIT 1", "source_tables": ["matchs", "divisions"]}, "evidence": "Bundesliga is the name of division; the most final-time home-team goals refers to MAX(FTHG);"}
{"sample_id": 2794, "db_id": "european_football_1", "final": {"question": "How many final-time home-team goals were there in total in all the matches of the Bundesliga division in the 2021 season?", "sql": "SELECT SUM(T1.FTHG) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.season = 2021", "source_tables": ["matchs", "divisions"]}, "evidence": "Bundesliga is the name of division; final-time home-team goals refers to FTHG;"}
{"sample_id": 2795, "db_id": "european_football_1", "final": {"question": "What's the winning rate of Club Brugge in the 2021 Premier League?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.FTR = 'H' THEN 1 ELSE NULL END) + COUNT(CASE WHEN T1.FTR = 'A' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(t1.FTR) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T1.AwayTeam = 'Club Brugge' OR T1.HomeTeam = 'Club Brugge'", "source_tables": ["matchs", "divisions"]}, "evidence": "Premier League is name of division; season = 2021; Club Brugge is name of team; Club Brugge wins implies HomeTeam = 'Club Brugge' and FTR = 'H' and AwayTeam = 'Club Brugge' and FTR = 'A'; DIVIDE(SUM(COUNT(FTR = 'H' where HomeTeam = 'Club Brugge', name = 'Premier League', season = 2021), COUNT(FTR = 'A'where AwayTeam = 'Club Brugge', name = 'Premier League', season = 2021)), COUNT(Div where name = 'Premier League', season = 2021));"}
{"sample_id": 2921, "db_id": "professional_basketball", "final": {"question": "Player from which team has the highest point per minute in NBA from 1991 to 2000?", "sql": "SELECT tmID FROM players_teams WHERE year BETWEEN 1991 AND 2000 ORDER BY CAST(points AS REAL) / minutes DESC LIMIT 1", "source_tables": ["players_teams"]}, "evidence": "team refers to tmID; the highest point per minute refers to max(divide(points, minutes)); NBA refers to lgID = 'NBA'; from 1991 to 2000 refers to year BETWEEN 1991 AND 2000"}
{"sample_id": 2922, "db_id": "professional_basketball", "final": {"question": "What is the difference in the average age of players when they are drafted in the ABA vs when they are drafted in the NBA between the years 1970 and 1970?", "sql": "SELECT CAST(SUM(IIF(T2.lgID = 'ABA', 1970 - strftime('%Y', T3.birthDate), 0)) AS REAL) / COUNT(IIF(T2.lgID = 'ABA', 1, 0)) - CAST(SUM(IIF(T2.lgID = 'NBA', 1970 - strftime('%Y', T3.birthDate), 0)) AS REAL) / COUNT(IIF(T2.lgID = 'NBA', 1, 0)) FROM draft AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID INNER JOIN players AS T3 ON T2.playerID = T3.playerID WHERE T1.draftYear BETWEEN 1970 AND 1970", "source_tables": ["draft", "players", "players_teams"]}, "evidence": "ABA refers to lgID = 'ABA'; NBA refers to lgID = 'NBA'; between the years 1970 and 1970 refers to draftYear between 1970 and 1970; difference = subtract(avg(subtract(1970, year(birthDate)) where lgID = 'ABA'), avg(subtract(1970, year(birthDate)) where lgID = 'NBA'))"}
{"sample_id": 2923, "db_id": "professional_basketball", "final": {"question": "Which player had the most game presentatons in 2011 NBA season.", "sql": "SELECT playerID FROM players_teams WHERE year = 2011 ORDER BY GP DESC LIMIT 1", "source_tables": ["players_teams"]}, "evidence": "player refers to playerID; the most game presentations refers to max(GP); in 2020 refers to year = 2020; NBA season refers to lgID = 'NBA'"}
{"sample_id": 2924, "db_id": "professional_basketball", "final": {"question": "How many first round draft player in 1996 NBA draft became an All-Star?", "sql": "SELECT COUNT(T2.playerID) FROM draft AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.draftYear = 1996 AND T1.draftRound = 1", "source_tables": ["player_allstar", "draft"]}, "evidence": "first round refers to round = 1; in 1996 refers to year = 1996; NBA refers to lgID = 'NBA'"}
{"sample_id": 2925, "db_id": "professional_basketball", "final": {"question": "Which team did the MVP of 1997 NBA season play in?", "sql": "SELECT DISTINCT T3.tmID FROM players_teams AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T1.tmID = T3.tmID AND T1.year = T3.year WHERE T2.year = 1997 AND T2.award = 'Finals MVP' LIMIT 1", "source_tables": ["players_teams", "teams", "awards_players"]}, "evidence": "team refers to tmID; MVP refers to award like '%MVP'; 1997 refers to year = 1997; NBA refers to lgID = 'NBA'"}
{"sample_id": 2926, "db_id": "professional_basketball", "final": {"question": "How many games did team of the scoring champion win in 2001 NBA season?", "sql": "SELECT T2.W FROM teams AS T1 INNER JOIN series_post AS T2 ON T1.tmID = T2.tmIDLoser AND T1.year = T2.year WHERE T2.year = 2001 ORDER BY T1.o_fgm DESC LIMIT 1", "source_tables": ["series_post", "teams"]}, "evidence": "the scoring champion refers to max(won); 2001 refers to year = 2001; NBA refers to lgID = 'NBA'"}
{"sample_id": 2927, "db_id": "professional_basketball", "final": {"question": "How many turnovers per game did the assist champion had in the 2003 NBA season?", "sql": "SELECT AVG(T2.turnovers) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2003 GROUP BY T1.playerID, T2.assists ORDER BY T2.assists DESC LIMIT 1", "source_tables": ["players", "players_teams"]}, "evidence": "turnovers per game = avg(turnovers); 2003 refers to year = 2003; NBA refers to lgID = 'NBA'"}
{"sample_id": 2928, "db_id": "professional_basketball", "final": {"question": "What is the number of NBA titles that Ray Allen has won throughout his NBA career?", "sql": "SELECT COUNT(T1.playerID) FROM player_allstar AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE first_name = 'Ray' AND last_name = 'Allen'", "source_tables": ["player_allstar", "awards_players"]}, "evidence": "NBA refers to lgID = 'NBA'"}
{"sample_id": 2929, "db_id": "professional_basketball", "final": {"question": "How much did the win rate increase for the team after getting the No.1 NBA draft pick in the 2003 season than previous season?", "sql": "SELECT (CAST(SUM(CASE WHEN T1.year = 2004 THEN T1.won ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.year = 2004 THEN T1.won + T1.lost ELSE 0 END)) - (CAST(SUM(CASE WHEN T1.year = 2003 THEN T1.won ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.year = 2003 THEN T1.won + T1.lost ELSE 0 END)) FROM teams AS T1 INNER JOIN draft AS T2 ON T1.tmID = T2.tmID WHERE T2.draftRound = 1 AND T2.draftYear = 2003", "source_tables": ["draft", "teams"]}, "evidence": "No.1 draft pick refers to draftRound = 1; in the 2003 season refers to draftyear = 2003; increase = subtract(divide(sum(won), add(sum(won), sum(lost))) where draftyear = 2004, divide(sum(won), add(sum(won), sum(lost))) where draftyear = 2003)"}
{"sample_id": 2930, "db_id": "professional_basketball", "final": {"question": "Among the coaches who won the 'NBA coach of the year' award from 1971 - 1975, how many of them were in 'POR' team?", "sql": "SELECT COUNT(T1.id) FROM awards_coaches AS T1 INNER JOIN teams AS T2 ON T1.year = T2.year WHERE T1.year BETWEEN 1971 AND 1975 AND T1.award = 'NBA Coach of the Year' AND T2.tmID = 'POR'", "source_tables": ["awards_coaches", "teams"]}, "evidence": "the 'NBA coach of the year' award refers to award = 'NBA coach of the year'; from 1971 - 1975 refers to year between 1971 and 1975; 'POR' team refers to tmID = 'POR'"}
{"sample_id": 2931, "db_id": "professional_basketball", "final": {"question": "How many percent of points were scored by NBA players who belonged to 'LAL' team and had performed steals movement.", "sql": "SELECT CAST(SUM(IIF(T2.steals IS NOT NULL AND T1.tmID = 'LAL', 1, 0)) AS REAL) * 100 / COUNT(T1.tmID) FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year", "source_tables": ["players_teams", "teams"]}, "evidence": "NBA refers to lgID = 'NBA'; 'LAL' team refers to tmID = 'LAL'; performed steals movement refers to steals > 0; percent = divide(count(playerID where steals > 0), count(playerID)) where lgID = 'NBA' and tmID = 'LAL' * 100%"}
{"sample_id": 2932, "db_id": "professional_basketball", "final": {"question": "What's the name of the player in 1996 who had the most steals that didn't play in the playoffs?", "sql": "SELECT T1.playerID FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1996 AND T2.PostGP = 0 ORDER BY T2.steals DESC LIMIT 1", "source_tables": ["players", "players_teams"]}, "evidence": "name of the player refers to first_name, middle_name, last_name; in 1996 refers to year = 1996; the most steals refers to max(steals); didn't play in the playoffs refers to playoff = null"}
{"sample_id": 2933, "db_id": "professional_basketball", "final": {"question": "Give the player id of the man who had the most turnovers whose team missed the playoffs in year 1988.", "sql": "SELECT T2.playerID FROM players_teams AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.PostGP = 0 AND T1.year = 1988 ORDER BY T1.turnovers DESC LIMIT 1", "source_tables": ["players_teams", "players"]}, "evidence": "the most turnovers refers to max(turnovers); missed the playoffs refers to PostGP = 0; in year 1988 refers to year = 1988"}
{"sample_id": 2934, "db_id": "professional_basketball", "final": {"question": "Which NBA team that didn't play in playoffs had the most winning rate in the 2000 NBA regular season?", "sql": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.PostGP = 0 AND T1.year = 2000 ORDER BY CAST(T2.won AS REAL) / (T2.won + T2.lost) DESC LIMIT 1", "source_tables": ["players_teams", "teams"]}, "evidence": "NBA refers to lgID = 'NBA'; didn't play in the playoffs refers to PostGP = 0; 2000 refers to year = 2000; the most winning rate refers to max(divide(won, add(won, lost)))"}
{"sample_id": 2935, "db_id": "professional_basketball", "final": {"question": "Which non-playoffs team had the most points in the regular season in the year 1998?", "sql": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 1998 AND T1.PostGP = 0 ORDER BY T1.points DESC LIMIT 1", "source_tables": ["players_teams", "teams"]}, "evidence": "non-playoff refers to PostGP = 0; in the year 1998 refers to year = 1998; the most points refers to max(o_pts)"}
{"sample_id": 2936, "db_id": "professional_basketball", "final": {"question": "What's the full name of the team that won the most games in 2001 but didn't make the playoffs?", "sql": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.PostGP = 0 ORDER BY T2.won DESC LIMIT 1", "source_tables": ["players_teams", "teams"]}, "evidence": "full name of the team refers to teams.name; in 2001 refers to year = 2001; didn't make the playoffs refers to PostGP = 0; won the most games refers to max(won)"}
{"sample_id": 2937, "db_id": "professional_basketball", "final": {"question": "Which team that didn't play in playoffs had the most total rebounds in the year 1997?", "sql": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.PostGP = 0 AND T1.year = 1997 ORDER BY T1.rebounds DESC LIMIT 1", "source_tables": ["players_teams", "teams"]}, "evidence": "didn't play in playoffs refers to PostGP = 0; in the year 1997 refers to year = 1997; the most total rebounds refers to max(o_tmRebound)"}
{"sample_id": 2938, "db_id": "professional_basketball", "final": {"question": "For the player who was drafted in the 1st round, 6th position in 1976, which team did he play in that year?", "sql": "SELECT T2.tmID FROM draft AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.draftYear = T2.year WHERE T1.draftRound = 1 AND T1.draftSelection = 6 AND T1.draftYear = 1976", "source_tables": ["draft", "teams"]}, "evidence": "drafted in the 1st round refers to draftRound = 1; 6th position refers to draftSelection = 6; in 1976 refers to year = 1976; team refers to tmID"}
{"sample_id": 2939, "db_id": "professional_basketball", "final": {"question": "In the year 1998, how many home wins did the team which had the 1st round, 12th pick have that year?", "sql": "SELECT T2.homeWon FROM draft AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.draftYear = T2.year WHERE T1.draftRound = 1 AND T1.draftSelection = 12 AND T1.draftYear = 1998", "source_tables": ["draft", "teams"]}, "evidence": "in 1998 refers to year = 1998; 1st round refers to draftRound = 1; 12th pick refers to draftSelection = 12; home win refers to homeWon"}
{"sample_id": 2940, "db_id": "professional_basketball", "final": {"question": "For the player who had the most rebounds throughout his allstar appearances, what was his weight and height?", "sql": "SELECT T1.weight, T1.height FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID ORDER BY T2.rebounds DESC LIMIT 1", "source_tables": ["player_allstar", "players"]}, "evidence": "the most rebounds refers to max(rebounds)"}
{"sample_id": 2941, "db_id": "professional_basketball", "final": {"question": "Where was the high school of the player who had the most rebounds in the NBA allstar history?", "sql": "SELECT T2.highSchool FROM player_allstar AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID ORDER BY T1.rebounds DESC LIMIT 1", "source_tables": ["player_allstar", "players"]}, "evidence": "the most rebounds refers to max(rebounds)"}
{"sample_id": 2942, "db_id": "professional_basketball", "final": {"question": "In the year 1997 allstar game, which teams did the players had the most rebounds play in? List their team ids.", "sql": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN player_allstar AS T3 ON T3.playerID = T1.playerID WHERE T3.season_id = 1997 ORDER BY T1.rebounds DESC LIMIT 1", "source_tables": ["player_allstar", "players_teams", "teams"]}, "evidence": "in 1997 refers to year = 1997; the most rebounds refers to max(rebounds); team id refers to tmID"}
{"sample_id": 2943, "db_id": "professional_basketball", "final": {"question": "For the latest passing player who could play all the positions in the court, how many points did he have in his career?", "sql": "SELECT SUM(T2.points) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T1.pos = 'C-F-G' GROUP BY T2.playerID, T2.year ORDER BY T2.year DESC LIMIT 1", "source_tables": ["players", "players_teams"]}, "evidence": "the latest passing refers to max(season_id); play all the positions refers to pos like '%C%' or pos like '%F%' or pos like '%G%'"}
{"sample_id": 2944, "db_id": "professional_basketball", "final": {"question": "Which team did the youngest player who could be in F-G position play in the NBA?", "sql": "SELECT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN players AS T3 ON T2.playerID = T3.playerID WHERE T3.pos = 'F-G' AND T2.lgID = 'NBA' ORDER BY T3.birthDate DESC LIMIT 1", "source_tables": ["players_teams", "players", "teams"]}, "evidence": "team refers to tmID; the youngest refers to max(year); F-G position refers to pos like '%F'; NBA refers to lgID = 'NBA'"}
{"sample_id": 2945, "db_id": "professional_basketball", "final": {"question": "For the players who played the most PBLA games, who was graduated from Central Missouri State college?", "sql": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.lgID = 'PBLA' AND T2.GP = 10 AND T1.college = 'Central Missouri State' GROUP BY T1.firstName, T1.middleName, T1.lastName ORDER BY COUNT(T2.id) DESC LIMIT 1", "source_tables": ["players", "players_teams"]}, "evidence": "the most PBLA games refers to max(games_played); Central Missouri State college refers to college = 'Central Missouri State'"}
{"sample_id": 2946, "db_id": "professional_basketball", "final": {"question": "In 2000, which team did the player who played the least minutes without missing a single game play in? Give the full name of the team.", "sql": "SELECT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.GP = 82 AND T2.year = 2000 GROUP BY T1.tmID ORDER BY SUM(T2.PostMinutes) ASC LIMIT 1", "source_tables": ["players_teams", "teams"]}, "evidence": "in 2000 refers to year = 2000; played the least minutes refers to min(minutes); without missing a single game refers to GP = 82; full name of the team refers to teams.name"}
{"sample_id": 2947, "db_id": "professional_basketball", "final": {"question": "For all the full attendence players in 1995, which player had most turnovers? Give the full name of the player.", "sql": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.GP = 82 AND T2.year = 1995 ORDER BY T2.turnovers DESC LIMIT 1", "source_tables": ["players", "players_teams"]}, "evidence": "full attendance refers to GP = 82; in 1995 refers to year = 1995; the most turnovers refers to max(turnovers); full name refers to first_name, last_name"}
{"sample_id": 2948, "db_id": "professional_basketball", "final": {"question": "For the player in 2011 who started every game he played, which team had the player who had the most steals?", "sql": "SELECT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 2011 AND T2.GP = T2.GS GROUP BY T1.tmID, T2.steals ORDER BY T2.steals DESC LIMIT 1", "source_tables": ["players_teams", "teams"]}, "evidence": "in 2011 refers to year = 2011; started every game refers to GP = GS; the most steals refers to max(steals); team refers to tmID"}
{"sample_id": 2949, "db_id": "professional_basketball", "final": {"question": "Which team had the most same starting players througout the season? Give the full name of the team.", "sql": "SELECT DISTINCT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.GP = T2.GS", "source_tables": ["players_teams", "teams"]}, "evidence": "the same starting player refers to GP = GS; full name of the team refers to teams.name"}
{"sample_id": 2950, "db_id": "professional_basketball", "final": {"question": "For the 2001 rebounds leader in the league, when was his birthday?", "sql": "SELECT birthDate FROM players WHERE playerID = ( SELECT playerID FROM players_teams WHERE year = 2001 GROUP BY playerID ORDER BY SUM(rebounds + dRebounds) DESC LIMIT 1 )", "source_tables": ["players", "players_teams"]}, "evidence": "2001 refers to year = 2001; rebounds leader refers to max(rebounds); birthday refers to birthDate"}
{"sample_id": 2951, "db_id": "professional_basketball", "final": {"question": "Which team did the all league rebound champion play in 1997? Give the full name of the team.", "sql": "SELECT T1.name FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.year = 1997 GROUP BY T1.name ORDER BY SUM(rebounds + dRebounds) DESC LIMIT 1", "source_tables": ["players_teams", "teams"]}, "evidence": "rebound champion refers to max(rebounds); 1997 refers to 1997; full name refers to teams.name"}
{"sample_id": 2952, "db_id": "professional_basketball", "final": {"question": "Which team had more than one player who grabbed more than 600 rebounds in 2011? Give the full name of the team.", "sql": "SELECT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 2011 AND T2.rebounds > 600", "source_tables": ["players_teams", "teams"]}, "evidence": "more than one player refers to count(playerID) > 1; grabbed more than 600 rebounds refers to rebounds > 600; in 2011 refers to 2011; full name refers to teams.name"}
{"sample_id": 3041, "db_id": "shakespeare", "final": {"question": "Please list all of the paragraphs that have the character name Aedile.", "sql": "SELECT T2.ParagraphNum FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Aedile'", "source_tables": ["characters", "paragraphs"]}, "evidence": "paragraphs\u00a0 refers to ParagraphNum; character name Aedile refers to CharName = 'Aedile'"}
{"sample_id": 3042, "db_id": "shakespeare", "final": {"question": "Please list any two character names in chapter 18708.", "sql": "SELECT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.chapter_id = 18708 LIMIT 2", "source_tables": ["characters", "paragraphs"]}, "evidence": "character names refers to CharName; chapter 18708 refers to chapter_id = 18708"}
{"sample_id": 3043, "db_id": "shakespeare", "final": {"question": "How many acts can be found in the comedy \"Two Gentlemen of Verona\"?", "sql": "SELECT COUNT(T1.ACT) FROM chapters AS T1 LEFT JOIN works AS T2 ON T1.work_id = T2.id WHERE T2.GenreType = 'Comedy' AND T2.Title = 'Two Gentlemen of Verona'", "source_tables": ["chapters", "works"]}, "evidence": "comedy refers to GenreType = 'comedy'; \"Two Gentlemen of Verona\" refers to Title = 'Two Gentlemen of Verona'"}
{"sample_id": 3044, "db_id": "shakespeare", "final": {"question": "What is the percentage of historical works that have not fewer than five scenes in the 1500s?", "sql": "SELECT CAST(( SELECT COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.GenreType = 'History' AND T1.DATE BETWEEN 1500 AND 1599 GROUP BY T1.id HAVING COUNT(T2.Scene) >= 5 ) AS REAL) * 100 / COUNT(id) FROM works WHERE GenreType = 'History' AND DATE BETWEEN 1500 AND 1599", "source_tables": ["chapters", "works"]}, "evidence": "historical works refers to GenreType = 'history'; have not fewer than five scenes in the 1500s refers to count(Scene) > = 5 and DATE > = 1500 AND DATE < = 1599; percentage = divide(count(works.id) where GenreType = 'history' and count(Scene) > = 5, count(works.id) ) as percentage"}
{"sample_id": 3045, "db_id": "shakespeare", "final": {"question": "What is the percentage of act number 5 in Titus Andronicus?", "sql": "SELECT CAST(SUM(IIF(T2.act = 5, 1, 0)) AS REAL) * 100 / COUNT(T2.act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Titus Andronicus'", "source_tables": ["chapters", "works"]}, "evidence": "act number 5 refers to Act = 5; Titus Andronicus refers to Title = 'Titus Andronicus'; percentage = divide(sum(Act = 5), count(Act)) as percentage"}
{"sample_id": 3046, "db_id": "shakespeare", "final": {"question": "How many of the works of Shakespeare are Tragedy?", "sql": "SELECT COUNT(id) FROM works WHERE GenreType = 'Tragedy'", "source_tables": ["works"]}, "evidence": "Tragedy refers to GenreType = 'Tragedy'"}
{"sample_id": 3047, "db_id": "shakespeare", "final": {"question": "Among the works of Shakespeare, how many of them have the word \"Henry\" on its title?", "sql": "SELECT COUNT(id) FROM works WHERE Title LIKE '%Henry%'", "source_tables": ["works"]}, "evidence": "works refers to Title; have the word \"Henry\" on its title refers to Title = '%Henry%'"}
{"sample_id": 3048, "db_id": "shakespeare", "final": {"question": "Give the character's ID of the character that said the paragraph \"O my poor brother! and so perchance may he be.\"", "sql": "SELECT character_id FROM paragraphs WHERE PlainText = 'O my poor brother! and so perchance may he be.'", "source_tables": ["paragraphs"]}, "evidence": "\"O my poor brother! and so perchance may he be.\" refers to\u00a0 PlainText = 'O my poor brother! and so perchance may he be.'"}
{"sample_id": 3049, "db_id": "shakespeare", "final": {"question": "List the paragraph number and paragraphs said by the character named \"Sir Andrew Aguecheek\".", "sql": "SELECT T2.ParagraphNum, T2.id FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Sir Andrew Aguecheek'", "source_tables": ["characters", "paragraphs"]}, "evidence": "paragraph number refers to ParagraphNum; character named \"Sir Andrew Aguecheek\" refers to CharName = 'Sir Andrew Aguecheek'"}
{"sample_id": 3050, "db_id": "shakespeare", "final": {"question": "Give the title and the characters name of the most recent work of Shakespeare.", "sql": "SELECT T1.Title, T4.CharName FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id ORDER BY T1.Date DESC LIMIT 1", "source_tables": ["characters", "paragraphs", "chapters", "works"]}, "evidence": "characters name refers to CharName; most recent work refers to max(Date)"}
{"sample_id": 3051, "db_id": "shakespeare", "final": {"question": "Among paragraphs with paragraph number between 1900 to 1950, list the texts said by a character described as a sea captain, friend to Sebatian.", "sql": "SELECT T1.description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.PlainText = 'a sea captain, friend to Sebastian' AND T2.ParagraphNum BETWEEN 1500 AND 1950", "source_tables": ["characters", "paragraphs"]}, "evidence": "paragraph number between 1900 to 1950 refers to ParagraphNum > = 1500 AND ParagraphNum < = 1950; texts refers to PlainText; a character described as a sea captain, friend to Sebatian refers to characters.Description = 'a sea captain, friend to Sebastian'"}
{"sample_id": 3052, "db_id": "shakespeare", "final": {"question": "What is the long title of the Shakespeare's work with Act 4 Scene 5 described as \"Mytilene. A street before the brothel.\"?", "sql": "SELECT T1.LongTitle FROM works AS T1 RIGHT JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Description = 'Mytilene. A street before the brothel.'", "source_tables": ["chapters", "works"]}, "evidence": "described as \"Mytilene. A street before the brothel.\" refers to chapters.Description = 'Mytilene. A street before the brothel.'"}
{"sample_id": 3053, "db_id": "shakespeare", "final": {"question": "Who is the character that said \"This is Illyria, lady.\"?", "sql": "SELECT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.PlainText = 'This is Illyria, lady.'", "source_tables": ["characters", "paragraphs"]}, "evidence": "character refers to CharName; \"This is Illyria, lady.\" refers to PlainText = 'This is Illyria, lady.'"}
{"sample_id": 3054, "db_id": "shakespeare", "final": {"question": "In Shakespeare's works between 1600 to 1610, how many of these have a character as a \"Third Servingman\"?", "sql": "SELECT COUNT(DISTINCT T2.work_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.DATE BETWEEN 1600 AND 1610 AND T4.CharName = 'Third Servingman'", "source_tables": ["characters", "paragraphs", "chapters", "works"]}, "evidence": "between 1600 to 1610 refers to DATE > = 1600 AND DATE < = 1610; \"Third Servingman\" refers to CharName = 'Third Servingman'"}
{"sample_id": 3055, "db_id": "shakespeare", "final": {"question": "In the Venus and Adonis, what is the description of the last scene listed?", "sql": "SELECT T2.Description FROM works AS T1 RIGHT JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Venus and Adonis' ORDER BY T2.Scene DESC LIMIT 1", "source_tables": ["chapters", "works"]}, "evidence": "Venus and Adonis refers to Title = 'Venus and Adonis'; last scene refers to max(Scene)"}
{"sample_id": 3056, "db_id": "shakespeare", "final": {"question": "In Act 1 Scene 2 of the Twelfth Night, what is the total number of of lines said by Viola?", "sql": "SELECT COUNT(T4.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T2.Act = 1 AND T2.Scene = 2 AND T4.id = 1238 AND T4.CharName = 'Viola' AND T1.Title = 'Twelfth Night'", "source_tables": ["characters", "paragraphs", "chapters", "works"]}, "evidence": "Twelfth Night refers to Title = 'Twelfth Night'; total number of lines said by Viola refers to count(character_id) where CharName = 'Viola'"}
{"sample_id": 3057, "db_id": "shakespeare", "final": {"question": "What is the character and work ID of the text \"Fear not thou, man, thou shalt lose nothing here.\"?", "sql": "SELECT T2.character_id, T1.work_id FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.chapter_id WHERE T2.PlainText = 'Fear not thou, man, thou shalt lose nothing here.'", "source_tables": ["paragraphs", "chapters"]}, "evidence": "character refers to chapter_id; text \"Fear not thou, man, thou shalt lose nothing here.\"\u00a0 refers to PlainText = 'Fear not thou, man, thou shalt lose nothing here.'"}
{"sample_id": 3058, "db_id": "shakespeare", "final": {"question": "What is the chapter description where the paragraph \"What, wilt thou hear some music, my sweet love?\" belongs?", "sql": "SELECT T1.id, T1.Description FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.chapter_id WHERE T2.PlainText = 'What, wilt thou hear some music, my sweet love?'", "source_tables": ["paragraphs", "chapters"]}, "evidence": "paragraph \"What, wilt thou hear some music, my sweet love?\" refers to\u00a0 PlainText = 'What, wilt thou hear some music, my sweet love?'"}
{"sample_id": 3059, "db_id": "shakespeare", "final": {"question": "List the scene numbers involving the character named Sir Toby Belch in the Twelfth Night.", "sql": "SELECT DISTINCT T2.Scene FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.Title = 'Twelfth Night' AND T4.CharName = 'Sir Toby Belch'", "source_tables": ["characters", "paragraphs", "chapters", "works"]}, "evidence": "scene numbers refers to Scene; character named Sir Toby Belch refers to CharName = 'Sir Toby Belch'; in the Twelfth Night refers to Title = 'Twelfth Night'"}
{"sample_id": 3060, "db_id": "shakespeare", "final": {"question": "In Shakespeare's works before 1600, list down the title of the tragic story he had written that involved a character named \"Tybalt\".", "sql": "SELECT DISTINCT T1.title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.DATE < 1600 AND T1.GenreType = 'Tragedy' AND T4.CharName = 'Tybalt'", "source_tables": ["characters", "paragraphs", "chapters", "works"]}, "evidence": "works before 1600 refers to DATE < 1600; tragic story refers to GenreType = 'Tragedy'; character named \"Tybalt\" refers to CharName = 'Tybalt'"}
{"sample_id": 3061, "db_id": "shakespeare", "final": {"question": "List the chapter ID of the works with a year greater than the 89% of average year of all listed works of Shakespeare.", "sql": "SELECT T2.id FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.DATE > ( SELECT AVG(DATE) FROM works ) * 0.89", "source_tables": ["chapters", "works"]}, "evidence": "a year greater than the 89% of average year refers to DATE > multiply(divide(SUM(DATE) , COUNT(DATE)), 0.89)"}
{"sample_id": 3062, "db_id": "shakespeare", "final": {"question": "Among the comedy works of Shakespeare, what is the percentage of his works with a character named \"antonio\"?", "sql": "SELECT CAST(SUM(IIF(T4.CharName = 'antonio', 1, 0)) AS REAL) * 100 / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.GenreType = 'Comedy'", "source_tables": ["characters", "paragraphs", "chapters", "works"]}, "evidence": "comedy works refers to GenreType = 'Comedy'; a character named \"antonio\" refers to CharName = 'antonio'; percentage = divide(sum(CharName = 'Antonio'), count(CharName)) as percentage"}
{"sample_id": 3129, "db_id": "cars", "final": {"question": "List the names and prices of the cars with model 82 and mileage per gallon of greater than 30.", "sql": "SELECT T2.car_name, T1.price FROM price AS T1 INNER JOIN data AS T2 ON T1.ID = T2.ID WHERE T2.model = 82 AND T2.mpg > 30", "source_tables": ["price", "data"]}, "evidence": "car's name refers to car_name; model 82 refers to model = 82; mileage per gallon of greater than 30 refers to mpg > 30"}
{"sample_id": 3130, "db_id": "cars", "final": {"question": "How many models of Ford Maverick were produced?", "sql": "SELECT COUNT(DISTINCT T2.model_year) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'ford maverick'", "source_tables": ["production", "data"]}, "evidence": "Ford Maverick refers to car_name = 'ford maverick'"}
{"sample_id": 3131, "db_id": "cars", "final": {"question": "Calculate the percentage of cars that belong to the USA.", "sql": "SELECT CAST(SUM(CASE WHEN T2.country = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin", "source_tables": ["country", "production"]}, "evidence": "belong to the USA refers to country = 'USA'; percentage = divide(count(ID where country = 'USA'), count(ID)) * 100%"}
{"sample_id": 3132, "db_id": "cars", "final": {"question": "Calculate the average production rate per year from 1971 to 1980. Among them, name the cars with a weight of fewer than 1800 lbs.", "sql": "SELECT CAST(COUNT(T1.ID) AS REAL) / 9 FROM production AS T1 INNER JOIN data AS T2 ON T2.ID = T1.ID WHERE T1.model_year BETWEEN 1971 AND 1980 UNION ALL SELECT DISTINCT T2.car_name FROM production AS T1 INNER JOIN data AS T2 ON T2.ID = T1.ID WHERE T1.model_year BETWEEN 1971 AND 1980 AND T2.weight < 1800", "source_tables": ["production", "data"]}, "evidence": "from 1971 to 1980 refers to model_year between 1971 and 1980; average production rate per year = divide(count(ID where model_year between 1971 and 1980), 9); car's name refers to car_name; a weight of fewer than 1800 lbs refers to weight < 1800"}
{"sample_id": 3133, "db_id": "cars", "final": {"question": "What is the average price of model 70 cars?", "sql": "SELECT AVG(T2.price) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.model = 70", "source_tables": ["price", "data"]}, "evidence": "model 70 refers to model = 70; average price = avg(price) where model = 70"}
{"sample_id": 3134, "db_id": "cars", "final": {"question": "What is the price of Chevrolet Vega 2300?", "sql": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'chevrolet vega 2300'", "source_tables": ["price", "data"]}, "evidence": "Chevrolet Vega 2300 refers to car_name = 'chevrolet vega 2300'"}
{"sample_id": 3135, "db_id": "cars", "final": {"question": "Which country does Chevy C20 come from?", "sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.car_name = 'chevy c20'", "source_tables": ["country", "production", "data"]}, "evidence": "Chevy C20 refers to car_name = 'chevy c20'"}
{"sample_id": 3136, "db_id": "cars", "final": {"question": "List the price of Ford cars from model 1970 to 1980.", "sql": "SELECT DISTINCT T3.price FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN price AS T3 ON T3.ID = T2.ID WHERE T1.car_name LIKE 'ford%' AND T2.model_year BETWEEN 1970 AND 1980", "source_tables": ["price", "production", "data"]}, "evidence": "Ford cars refers to car_name LIKE 'ford%'; from model 1970 to 1980 refers to model_year BETWEEN 1970 AND 1980"}
{"sample_id": 3137, "db_id": "cars", "final": {"question": "Which is the most fuel efficient car in 1975?", "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T2.model_year = '1975' ORDER BY T1.mpg DESC LIMIT 1", "source_tables": ["production", "data"]}, "evidence": "car's name refers to car_name; the most fuel efficient refers to max(mpg); in 1975 refers to model_year = 1975"}
{"sample_id": 3138, "db_id": "cars", "final": {"question": "Which car consumes fuel the most and has the highest price?", "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T1.mpg DESC, T2.price DESC LIMIT 1", "source_tables": ["price", "data"]}, "evidence": "consumes fuel the most refers to min(mpg); has the highest price refers to max(price)"}
{"sample_id": 3139, "db_id": "cars", "final": {"question": "How many American cars have an acceleration time of less than 12 seconds?", "sql": "SELECT COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T3.country = 'USA' AND T1.acceleration < 12", "source_tables": ["country", "production", "data"]}, "evidence": "American car refers to country = 'USA'; an acceleration time of less than 12 seconds refers to acceleration < 12"}
{"sample_id": 3140, "db_id": "cars", "final": {"question": "How many Japanese cars weigh more than 2000 lbs?", "sql": "SELECT COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T3.country = 'Japan' AND T1.weight > 2000", "source_tables": ["country", "production", "data"]}, "evidence": "Japanese car refers to country = 'Japan'; weigh more than 2000 lbs refers to weight > 2000"}
{"sample_id": 3141, "db_id": "cars", "final": {"question": "List the name of the most expensive car.", "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1", "source_tables": ["price", "data"]}, "evidence": "car's name refers to car_name; the most expensive refers to max(price)"}
{"sample_id": 3142, "db_id": "cars", "final": {"question": "What years did the Buick Skylark 320 get in production?", "sql": "SELECT T2.model_year FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'buick skylark 320'", "source_tables": ["production", "data"]}, "evidence": "year refers to model_year; Buick Skylark 320 refers to car_name = 'buick skylark 320'"}
{"sample_id": 3143, "db_id": "cars", "final": {"question": "Which country produced the most expensive car in 1970?", "sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN price AS T4 ON T4.ID = T1.ID WHERE T2.model_year = 1970 ORDER BY T4.price DESC LIMIT 1", "source_tables": ["country", "production", "price", "data"]}, "evidence": "the most expensive refers to max(price); in 1970 refers to model_year = 1970"}
{"sample_id": 3144, "db_id": "cars", "final": {"question": "How many cars with horsepower greater than 200 were produced in 1975?", "sql": "SELECT COUNT(T2.model_year) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.horsepower > 200 AND T2.model_year = 1975", "source_tables": ["production", "data"]}, "evidence": "horsepower greater than 200 refers to horsepower > 200; in 1975 refers to model_year = 1975"}
{"sample_id": 3145, "db_id": "cars", "final": {"question": "Calculate the percentage of American cars among all cars.", "sql": "SELECT CAST(SUM(CASE WHEN T3.country = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country", "source_tables": ["country", "production", "data"]}, "evidence": "American car refers to country = 'USA'; percentage = divide(count(ID where country = 'USA'), count(ID)) * 100%"}
{"sample_id": 3146, "db_id": "cars", "final": {"question": "What is the average weight of Japanese cars with 4 cylinders that were produced from 1975 to 1980?", "sql": "SELECT AVG(T1.weight) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T2.model_year BETWEEN 1975 AND 1980 AND T1.cylinders = 4 AND T3.country = 'Japan'", "source_tables": ["country", "production", "data"]}, "evidence": "Japanese car refers to country = 'Japan'; with 4 cylinders refers to cylinders = 4; produced from 1975 to 1980 refers to model_year BETWEEN 1975 AND 1980; average weight = avg(weight)"}
{"sample_id": 3275, "db_id": "donor", "final": {"question": "What percentage of projects that have not received a cash donation have received a portion of a donation included corporate sponsored giftcard?", "sql": "SELECT CAST(SUM(CASE WHEN payment_included_campaign_gift_card = 't' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(donationid) FROM donations WHERE payment_method = 'no_cash_received'", "source_tables": ["donations"]}, "evidence": "have not received a cash donation refers to payment_method = 'no_cash_received'; received a portion of a donation included corporate sponsored giftcard payment_included_campaign_gift_card = 't'; percentage refers to DIVIDE(payment_included_campaign_gift_card = 't',payment_included_campaign_gift_card)*100"}
{"sample_id": 3276, "db_id": "donor", "final": {"question": "What percentage of projects in the City of Santa Barbara are in suburban metro?", "sql": "SELECT CAST(SUM(CASE WHEN school_metro = 'suburban' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(projectid) FROM projects WHERE school_city = 'Santa Barbara'", "source_tables": ["projects"]}, "evidence": "City of Santa Barbara refers to school_city = 'Santa Barbara'; percentage refers to DIVIDE(school_metro = 'suburban'; school_metro)*100"}
{"sample_id": 3277, "db_id": "donor", "final": {"question": "What is the percentage of payment methods of donations made in March 2013?", "sql": "SELECT payment_method , CAST(COUNT(donationid) AS REAL) * 100 / 51090 FROM donations WHERE donation_timestamp LIKE '2013-03%' GROUP BY payment_method", "source_tables": ["donations"]}, "evidence": "made in March 2013 refers to substr(donation_timestamp,1,7) = '2013-03'; percentage refers to DIVIDE(SUM(payment_method made in March 2013), SUM(payment_method))*100"}
{"sample_id": 3278, "db_id": "donor", "final": {"question": "What is the average unit price of AKJ Books items?", "sql": "SELECT SUM(item_unit_price) / SUM(item_quantity) FROM resources WHERE vendor_name = 'AKJ Books'", "source_tables": ["resources"]}, "evidence": "AKJ Books items refers to vendor_name = 'AKJ Books'; average unit price refers to DIVIDE(sum(item_unit_price),count(resourceid))"}
{"sample_id": 3279, "db_id": "donor", "final": {"question": "How many schools in Brooklyn with urban metro and donations for an honoree have requested TT992 - Refill Pack for Safety Name Tags as a resource?", "sql": "SELECT COUNT(T2.schoolid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T2.school_city = 'Brooklyn' AND T2.school_metro = 'urban' AND T3.for_honoree = 't' AND T1.item_name = 'TT992 - Refill Pack for Safety Name Tags'", "source_tables": ["donations", "resources", "projects"]}, "evidence": "in Brooklyn refers to school_city = 'Brooklyn'; urban metro refers to school_metro = 'urban'; donations for an honoree refers to for_honoree = 't'; requested TT992 - Refill Pack for Safety Name Tags refers to item_name = 'TT992 - Refill Pack for Safety Name Tags'"}
{"sample_id": 3280, "db_id": "donor", "final": {"question": "How many schools with the highest level of poverty have received a portion of a donation included corporate sponsored gift card?", "sql": "SELECT COUNT(T1.schoolid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.payment_included_campaign_gift_card = 't' AND T1.poverty_level = 'highest poverty'", "source_tables": ["donations", "projects"]}, "evidence": "highest level of poverty refers to poverty_level = 'highest'; received a portion of a donation included corporate sponsored gift card refers to payment_included_campaign_gift_card = 't'"}
{"sample_id": 3281, "db_id": "donor", "final": {"question": "In which city is there a greater number of schools that have received donations of less than 10 dollars?", "sql": "SELECT T2.school_city FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.dollar_amount = 'under_10' GROUP BY T2.school_city ORDER BY COUNT(T2.schoolid) DESC LIMIT 1", "source_tables": ["donations", "projects"]}, "evidence": "received donations of less than 10 dollars refers to dollar_amount = 'under_10'; city refers to school_city\n\n"}
{"sample_id": 3282, "db_id": "donor", "final": {"question": "What is the project title of the school located at latitude 42003718 and longitude -87668289?", "sql": "SELECT T1.title FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_latitude = 42003718 AND T2.school_longitude = -87668289", "source_tables": ["essays", "projects"]}, "evidence": "latitude 42003718 refers to school_latitude = 42003718; longitude -87668289 refers to school_longitude = -87668289"}
{"sample_id": 3283, "db_id": "donor", "final": {"question": "Find out if the project with the title Team More Books! has a New York teaching fellow.", "sql": "SELECT T2.teacher_ny_teaching_fellow FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Team More Books!'", "source_tables": ["essays", "projects"]}, "evidence": "title Team More Books! Refers to title = 'Team More Books!'; as a New York teaching fellow refers to teacher_ny_teaching_fellow = 't'"}
{"sample_id": 3284, "db_id": "donor", "final": {"question": "What is the name of the vendors that serve resources to schools whose primary focus area is Literature?", "sql": "SELECT T1.vendor_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_area LIKE 'Literacy%' GROUP BY T1.vendor_name ORDER BY COUNT(T2.primary_focus_area) DESC LIMIT 1", "source_tables": ["resources", "projects"]}, "evidence": "primary focus area is Literature refers to primary_focus_area = 'Literature'"}
{"sample_id": 3285, "db_id": "donor", "final": {"question": "What is the name of the vendors serving material for projects for grades 9-12?", "sql": "SELECT DISTINCT T1.vendor_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.grade_level = 'Grades 9-12'", "source_tables": ["resources", "projects"]}, "evidence": "for grades 9-12 refers to grade_level = 'Grades 9-12'"}
{"sample_id": 3286, "db_id": "donor", "final": {"question": "How many teachers have made some type of donation for projects in Chicago?", "sql": "SELECT COUNT(DISTINCT T2.teacher_acctid) FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.is_teacher_acct = 't' AND T2.school_city = 'Chicago'", "source_tables": ["donations", "projects"]}, "evidence": "in Chicago refers to school_city = 'Chicago'; teachers refers to is_teacher_acct = 't'"}
{"sample_id": 3287, "db_id": "donor", "final": {"question": "How many Rock Hill City School projects have teacher donors?", "sql": "SELECT COUNT(DISTINCT T1.teacher_acctid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_city = 'Rock Hill' AND is_teacher_acct = 't'", "source_tables": ["donations", "projects"]}, "evidence": "Rock Hill City School refers to school_city = 'Rock Hill'; teacher donors refers to is_teacher_acct = 't'"}
{"sample_id": 3288, "db_id": "donor", "final": {"question": "What is the total sum of the donations paid with an optional support in projects that reach more than 300 students?", "sql": "SELECT SUM(T2.dollar_amount) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.students_reached > 300 AND t2.donation_included_optional_support = 't'", "source_tables": ["donations", "projects"]}, "evidence": "with an optional support refers to donation_included_optional_support = 't'; reach more than 300 students refers to students_reached>300"}
{"sample_id": 3289, "db_id": "donor", "final": {"question": "How many total items were requested for the Onslow Co School District urban metro school projects?", "sql": "SELECT SUM(T1.item_quantity) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_metro = 'urban' AND T2.school_district = 'Onslow Co School District'", "source_tables": ["resources", "projects"]}, "evidence": "Onslow Co School District refers to school_district = 'Onslow Co School District';"}
{"sample_id": 3290, "db_id": "donor", "final": {"question": "What is the average total donations received by Fresno County colleges?", "sql": "SELECT SUM(T2.donation_optional_support + T2.donation_to_project) / COUNT(donationid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_county = 'Fresno'", "source_tables": ["donations", "projects"]}, "evidence": "Fresno County colleges refers to school_county = 'Fresno'; average refers to DIVIDE(sum(donation_optional_support,donation_to_project),sum(donation_total))"}
{"sample_id": 3291, "db_id": "donor", "final": {"question": "In what percentage of counties has the ABC Read project been launched?", "sql": "SELECT CAST(SUM(CASE WHEN T2.title LIKE 'ABC Read' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.school_county) FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid", "source_tables": ["essays", "projects"]}, "evidence": "ABC Read project been launched refers to title = 'ABC Read'; percentage refers to DIVIDE(count(case when title = 'ABC Read' then school_county else null end),count(school_county))*100"}
{"sample_id": 3292, "db_id": "donor", "final": {"question": "What is the average amount of resources from projects that have received donations per honoree?", "sql": "SELECT AVG(T1.item_quantity) FROM resources AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.for_honoree = 't'", "source_tables": ["donations", "resources"]}, "evidence": "donations per honoree refers to for_honoree = 't'; average refers to DIVIDE(sum(item_quantity), count(donationid))"}
{"sample_id": 3293, "db_id": "donor", "final": {"question": "When did the project \"Photojournalists Want to Exhibit Their Best Works\" go live?", "sql": "SELECT T1.date_posted FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title LIKE 'Photojournalists Want to Exhibit Their Best Works'", "source_tables": ["essays", "projects"]}, "evidence": "project \"Photojournalists Want to Exhibit Their Best Works\" refers to title = 'Photojournalists Want to Exhibit Their Best Works'; when project go live refers to datePosted"}
{"sample_id": 3294, "db_id": "donor", "final": {"question": "Which item provided for projects with Mathematics as a primary subject is the most expensive?", "sql": "SELECT T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_subject = 'Mathematics' ORDER BY T1.item_unit_price DESC LIMIT 1", "source_tables": ["resources", "projects"]}, "evidence": "Mathematics as a primary subject refers to primary_focus_subject = 'Mathematics'; most expensive refers to max(item_unit_price)"}
{"sample_id": 3295, "db_id": "donor", "final": {"question": "Where is the school that needs a \"Viewscreen LCD from Texas Instruments, TI-84 Plus\"? Provide the latitude and longitude of that school.", "sql": "SELECT T2.school_city, T2.school_latitude, T2.school_longitude FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.item_name = 'Viewscreen LCD FROM Texas Instruments, TI-84 Plus'", "source_tables": ["resources", "projects"]}, "evidence": "needs a \"Viewscreen LCD from Texas Instruments, TI-84 Plus\" refers to item_name = 'Viewscreen LCD from Texas Instruments, TI-84 Plus'; where is the school refers to school_city; latitude refers to school_latitude; longtitude refers to school_longitude"}
{"sample_id": 3296, "db_id": "donor", "final": {"question": "How many donations does the project \"Look, Look, We Need a Nook!\" have?", "sql": "SELECT SUM(T3.donation_total) FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T1.title = 'Look, Look, We Need a Nook!'", "source_tables": ["essays", "projects", "donations"]}, "evidence": "project \"Look, Look, We Need a Nook!\" refers to title = 'Look, Look, We Need a Nook!'"}
{"sample_id": 3297, "db_id": "donor", "final": {"question": "List the poverty level of all the schools that received donations with the zip code \"7079\".", "sql": "SELECT DISTINCT T2.poverty_level FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.donor_zip = 7079", "source_tables": ["donations", "projects"]}, "evidence": "zip code \"7079\" refers to donor_zip = '7079'"}
{"sample_id": 3298, "db_id": "donor", "final": {"question": "What is the name of the vendor that the project \"Bloody Times\" uses for their resources?", "sql": "SELECT T3.vendor_name FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN resources AS T3 ON T2.projectid = T3.projectid WHERE T1.title = 'Bloody Times'", "source_tables": ["essays", "resources", "projects"]}, "evidence": "project \"Bloody Times\" refers to title = 'Bloody Times'"}
{"sample_id": 3299, "db_id": "donor", "final": {"question": "List all the items from \"Sax Arts & Crafts\" and the zip code of the schools that received them.", "sql": "SELECT T2.school_zip, T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.vendor_name = 'Sax Arts & Crafts'", "source_tables": ["resources", "projects"]}, "evidence": "from \"Sax Arts & Crafts\" refers to vendor_name = 'Sax Arts & Crafts'; zip code of the schools refers school_zip"}
{"sample_id": 3300, "db_id": "donor", "final": {"question": "What are the coordinates of the school with the project \"Wiping Away Bad Grades\"?", "sql": "SELECT T1.school_longitude, T1.school_latitude FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title LIKE 'Wiping Away Bad Grades'", "source_tables": ["essays", "projects"]}, "evidence": "project \"Wiping Away Bad Grades\" title = 'Wiping Away Bad Grades'; coordinates refers to school_longitude, school_latitude"}
{"sample_id": 3301, "db_id": "donor", "final": {"question": "List the primary subject of all the donations with a corporate sponsored giftcard.", "sql": "SELECT DISTINCT T2.primary_focus_subject FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.payment_included_campaign_gift_card = 't'", "source_tables": ["donations", "projects"]}, "evidence": "corporate sponsored giftcard refers to payment_included_campaign_gift_card = 't'; primary subject refers to primary_focus_subject"}
{"sample_id": 3302, "db_id": "donor", "final": {"question": "What is the most expensive book item? Please provide a short description of projects related to those.", "sql": "SELECT T1.item_name, T2.short_description FROM resources AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T1.project_resource_type = 'Books' ORDER BY T1.item_unit_price DESC LIMIT 1", "source_tables": ["essays", "resources"]}, "evidence": "book item refers to project_resource_type = 'Books'; most expensive refers to MAX(item_unit_price)"}
{"sample_id": 3303, "db_id": "donor", "final": {"question": "For what grade was the project \"Too Close for Comfort\" for?", "sql": "SELECT T1.grade_level FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title LIKE 'Too Close for Comfort'", "source_tables": ["essays", "projects"]}, "evidence": "project \"Too Close for Comfort\" refers to title = 'Too Close for Comfort'; grade refers to grade_level"}
{"sample_id": 3304, "db_id": "donor", "final": {"question": "What is the total number of students impacted by the projects with a donation from a donor with zip code \"22205\"?", "sql": "SELECT SUM(T2.students_reached) FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.donor_zip = 22205", "source_tables": ["donations", "projects"]}, "evidence": "zip code \"22205\" refers to donor_zip = '22205'; students impacted refers to students_reached"}
{"sample_id": 3305, "db_id": "donor", "final": {"question": "What percentage of donations are given via a giving or campaign page? List the primary area of those donations.", "sql": "SELECT CAST(SUM(CASE WHEN T1.via_giving_page = 't' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(donation_total), ( SELECT T2.primary_focus_area FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.via_giving_page = 't' GROUP BY T2.primary_focus_area ORDER BY SUM(T1.donation_total) DESC LIMIT 1 ) result FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid", "source_tables": ["donations", "projects"]}, "evidence": "given via a giving or campaign page refers to via_giving_page = 't'; percentage refers to DIVIDE(count(case when via_giving_page = 't' then donationid else null end),count(donationid))*100; primary area of donation refers to primary_focus_area"}
{"sample_id": 3306, "db_id": "donor", "final": {"question": "Among the technology items, what percentage of them are from Best Buy for Business? Provide the date of the project related to those items.", "sql": "SELECT CAST(SUM(CASE WHEN T1.vendor_name = 'Best Buy for Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.projectid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.project_resource_type = 'Technology' UNION ALL SELECT DISTINCT T1.date_posted FROM projects AS T1 INNER JOIN resources AS T2 ON T1.projectid = T2.projectid WHERE T2.vendor_name = 'Best Buy for Business' AND T2.project_resource_type = 'Technology'", "source_tables": ["resources", "projects"]}, "evidence": "technology items refers to project_resource_type = 'Technology'; from Best Buy for Business refers to vendor_name = 'Best Buy for Business'; percentage refers to DIVIDE(count(case when vendor_name = 'Best Buy for Business'),count(projectid))"}
{"sample_id": 3467, "db_id": "video_games", "final": {"question": "Calculate the number of game publisher IDs for games released in 1984.", "sql": "SELECT COUNT(T.game_publisher_id) FROM game_platform AS T WHERE T.release_year = 1984", "source_tables": ["game_platform"]}, "evidence": "released in 1984 refers to release_year = 1984;"}
{"sample_id": 3468, "db_id": "video_games", "final": {"question": "List down the platform IDs of the games with a region ID of 3.", "sql": "SELECT T2.id FROM region_sales AS T1 INNER JOIN game_platform AS T2 ON T1.game_platform_id = T2.id WHERE T1.region_id = 3", "source_tables": ["game_platform", "region_sales"]}, "evidence": ""}
{"sample_id": 3469, "db_id": "video_games", "final": {"question": "What are the sales made by the games in Japan region?", "sql": "SELECT SUM(CASE WHEN T2.region_name = 'Japan' THEN T1.num_sales ELSE 0 END) AS nums FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id", "source_tables": ["region", "region_sales"]}, "evidence": "sales = SUM(num_sales); Japan region refers to region_name = 'Japan';"}
{"sample_id": 3470, "db_id": "video_games", "final": {"question": "How many game publisher IDs have published games on the X360 platform?", "sql": "SELECT COUNT(T1.game_publisher_id) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id WHERE T2.platform_name = 'X360'", "source_tables": ["game_platform", "platform"]}, "evidence": "X360 refers to platform_name = 'X360';"}
{"sample_id": 3471, "db_id": "video_games", "final": {"question": "State the name of the platforms for games released in 2000.", "sql": "SELECT DISTINCT T2.platform_name FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id WHERE T1.release_year = 2000", "source_tables": ["game_platform", "platform"]}, "evidence": "name of the platforms refers to platform_name; released in 2000 refers to release_year = 2000;"}
{"sample_id": 3472, "db_id": "video_games", "final": {"question": "Find out the difference between the number of publishers who released the games on the PS3 and X360.", "sql": "SELECT COUNT(CASE WHEN T2.platform_name = 'PS3' THEN T1.game_publisher_id ELSE NULL END) - COUNT(CASE WHEN T2.platform_name = 'X360' THEN T1.game_publisher_id ELSE NULL END) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id", "source_tables": ["game_platform", "platform"]}, "evidence": "difference = SUBTRACT(SUM(platform_name = 'PS3'), SUM(platform_name = 'X360')); PS3 refers to platform_name = 'PS3'; X360 refers to platform_name = 'X360';"}
{"sample_id": 3473, "db_id": "video_games", "final": {"question": "What are the game IDs of the games published by Bethesda Softworks?", "sql": "SELECT T1.game_id FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Bethesda Softworks'", "source_tables": ["publisher", "game_publisher"]}, "evidence": "Bethesda Softworks refers to publisher_name = 'Bethesda Softworks';"}
{"sample_id": 3474, "db_id": "video_games", "final": {"question": "Calculate the total number of IDs for the game published by Capcom and Sony Computer Entertainment.", "sql": "SELECT COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name IN ('Capcom', 'Sony Computer Entertainment')", "source_tables": ["publisher", "game_publisher"]}, "evidence": "Capcom refers to publisher_name = 'Capcom';\u00a0 Sony Computer Entertainment refers to publisher_name = 'Sony Computer Entertainment';"}
{"sample_id": 3475, "db_id": "video_games", "final": {"question": "What is the genre of the game \"Grand Theft Auto V\"?", "sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = 'Grand Theft Auto V'", "source_tables": ["game", "genre"]}, "evidence": "genre refers to genre_name; \"Grand Theft Auto V\" refers to game_name = 'Grand Theft Auto V';"}
{"sample_id": 3476, "db_id": "video_games", "final": {"question": "List down the names of the games in the racing genre.", "sql": "SELECT T1.game_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Racing'", "source_tables": ["game", "genre"]}, "evidence": "name of games refers to game_name; racing genre refers to genre_name = 'Racing';"}
{"sample_id": 3477, "db_id": "video_games", "final": {"question": "Calculate the number of games in the fighting genre.", "sql": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Fighting'", "source_tables": ["game", "genre"]}, "evidence": "fighting genre refers to genre_name = 'Fighting';"}
{"sample_id": 3478, "db_id": "video_games", "final": {"question": "What are the genres of games published by the publisher with an ID of 464?", "sql": "SELECT DISTINCT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id INNER JOIN game_publisher AS T3 ON T1.id = T3.game_id WHERE T3.publisher_id = 464", "source_tables": ["game", "genre", "game_publisher"]}, "evidence": "genres of games refers to genre_name; publisher with an ID of 464 refers to publisher_id = 464;"}
{"sample_id": 3479, "db_id": "video_games", "final": {"question": "Find out the platform of the game \"Final Fantasy XIII-2\".", "sql": "SELECT T4.platform_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.game_name = 'Final Fantasy XIII-2'", "source_tables": ["game", "game_platform", "platform", "game_publisher"]}, "evidence": "platform of the game refers to platform_name; \"Final Fantasy XIII-2\" refers to game_name = 'Final Fantasy XIII-2';"}
{"sample_id": 3480, "db_id": "video_games", "final": {"question": "Calculate the total sales made by the games released in 2000.", "sql": "SELECT SUM(T1.num_sales) FROM region_sales AS T1 INNER JOIN game_platform AS T2 ON T1.game_platform_id = T2.id WHERE T2.release_year = 2000", "source_tables": ["game_platform", "region_sales"]}, "evidence": "total sales = SUM(num_sales); released in 2000 refers to release_year = 2000;"}
{"sample_id": 3481, "db_id": "video_games", "final": {"question": "Calculate the difference in sales between the games released in 1990 and 2000.", "sql": "SELECT SUM(CASE WHEN T2.release_year = 2000 THEN T1.num_sales ELSE 0 END) - SUM(CASE WHEN T2.release_year = 1990 THEN T1.num_sales ELSE 0 END) FROM region_sales AS T1 INNER JOIN game_platform AS T2 ON T1.game_platform_id = T2.id", "source_tables": ["game_platform", "region_sales"]}, "evidence": "difference = SUBTRACT(SUM(num_sales WHERE release_year = 2000), SUM(num_sales WHERE release_year = 1990));"}
{"sample_id": 3482, "db_id": "video_games", "final": {"question": "What are the platform IDs of records released in 2006?", "sql": "SELECT DISTINCT T.platform_id FROM game_platform AS T WHERE T.release_year = 2006", "source_tables": ["game_platform"]}, "evidence": "released in 1990 refers to release_year = 1990; 2000 refers to release_year = 2000;"}
{"sample_id": 3483, "db_id": "video_games", "final": {"question": "Compute the average number of sales in region ID 3.", "sql": "SELECT AVG(T.num_sales * 100000) FROM region_sales AS T WHERE T.region_id = 3", "source_tables": ["region_sales"]}, "evidence": "average = AVG(MULTIPLY(num_sales, 100000));"}
{"sample_id": 3484, "db_id": "video_games", "final": {"question": "In which year did the record ID 19 with game publisher ID 6657 released?", "sql": "SELECT T.release_year FROM game_platform AS T WHERE T.game_publisher_id = 6657 AND T.id = 19", "source_tables": ["game_platform"]}, "evidence": "which year refers to release_year; record ID 19 refers to game platform.id; id = 19"}
{"sample_id": 3485, "db_id": "video_games", "final": {"question": "Calculate the total sales in all regions with game platform ID 66.", "sql": "SELECT SUM(T.num_sales) * 100000 FROM region_sales AS T WHERE T.game_platform_id = 66", "source_tables": ["region_sales"]}, "evidence": "total sales in all regions = MULTIPLY(SUM(num_sales), 100000);"}
{"sample_id": 3486, "db_id": "video_games", "final": {"question": "Give the game name of the game ID 44.", "sql": "SELECT T.game_name FROM game AS T WHERE T.id = 44", "source_tables": ["game"]}, "evidence": ""}
{"sample_id": 3487, "db_id": "video_games", "final": {"question": "List the games available on Wii.", "sql": "SELECT T4.game_name FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id INNER JOIN game AS T4 ON T3.game_id = T4.id WHERE T1.platform_name = 'Wii'", "source_tables": ["game", "platform", "game_publisher", "game_platform"]}, "evidence": "games available refers to game_name; Wii refers to platform_name = 'Wii';"}
{"sample_id": 3488, "db_id": "video_games", "final": {"question": "Provide the name of games released in 2015.", "sql": "SELECT T3.game_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.release_year = 2015", "source_tables": ["game", "game_platform", "game_publisher"]}, "evidence": "names of games refers to game_name; released in 2015 refers to release_year = 2015;"}
{"sample_id": 3489, "db_id": "video_games", "final": {"question": "What is the total number of adventure games released in 2005?", "sql": "SELECT COUNT(DISTINCT T3.id) FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Adventure' AND T1.release_year = 2005", "source_tables": ["game", "genre", "game_platform", "game_publisher"]}, "evidence": "adventure games refers to game_name WHERE genre_name = 'Adventure'; released in 2005 refers to release_year = 2005;"}
{"sample_id": 3490, "db_id": "video_games", "final": {"question": "What is the name of the company that produced the game titled Adventure Time: Explore the Dungeon Because I Don't Know!?", "sql": "SELECT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = 'Adventure Time: Explore the Dungeon Because I Don''t Know!'", "source_tables": ["game", "publisher", "game_publisher"]}, "evidence": "name of the company that produced the game refers to publisher_name; Adventure Time: Explore the Dungeon Because I Don't Know! Refers to game_name = 'Adventure Time: Explore the Dungeon Because I Don''t Know!';"}
{"sample_id": 3491, "db_id": "video_games", "final": {"question": "List down the game platform ID and region name where the games achieved 20000 sales and below.", "sql": "SELECT T2.game_platform_id, T1.region_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T2.num_sales * 100000 <= 20000", "source_tables": ["region_sales", "region"]}, "evidence": "20000 sales and below refers to num_sales < 0.2;"}
{"sample_id": 3492, "db_id": "video_games", "final": {"question": "Provide the name of game produced by 505 Games in 2006.", "sql": "SELECT T3.game_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN publisher AS T4 ON T2.publisher_id = T4.id WHERE T4.publisher_name = '505 Games' AND T1.release_year = 2006", "source_tables": ["game", "publisher", "game_platform", "game_publisher"]}, "evidence": "name of game refers to game_name; 505 Games refers to publisher_name = '505 Games'; in 2006 refers to release_year = 2006;"}
{"sample_id": 3493, "db_id": "video_games", "final": {"question": "What is the genre of the game ID 119?", "sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.id = 119", "source_tables": ["game", "genre"]}, "evidence": "genre of the game refers to genre_name; game ID 119 refers to game.id = 119;"}
{"sample_id": 3494, "db_id": "video_games", "final": {"question": "List the game IDs of the games produced by Abylight.", "sql": "SELECT T1.game_id FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Abylight'", "source_tables": ["publisher", "game_publisher"]}, "evidence": "Abylight refers to publisher_name = 'Abylight';"}
{"sample_id": 3495, "db_id": "video_games", "final": {"question": "In which region where a game had the lowest number of sales?", "sql": "SELECT DISTINCT T1.region_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id ORDER BY T2.num_sales LIMIT 1", "source_tables": ["region_sales", "region"]}, "evidence": "which region refers to region_name; lowest number of sales refers to MIN(num_sales);"}
{"sample_id": 3496, "db_id": "video_games", "final": {"question": "List down the name of strategy games.", "sql": "SELECT T1.game_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Strategy'", "source_tables": ["game", "genre"]}, "evidence": "strategy games refers to game_name WHERE genre_name = 'Strategy';"}
{"sample_id": 3497, "db_id": "video_games", "final": {"question": "In what platform does the game ID 178 available?", "sql": "SELECT T3.platform_name FROM game_publisher AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.game_publisher_id INNER JOIN platform AS T3 ON T2.platform_id = T3.id WHERE T1.game_id = 178", "source_tables": ["platform", "game_platform", "game_publisher"]}, "evidence": "platform refers to platform_name;"}
{"sample_id": 3498, "db_id": "video_games", "final": {"question": "Give the genre of the following game titled 'Airlock' , 'Airline Tycoon' , and 'Airblade', respectively.", "sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name IN ('Airlock', 'Airline Tycoon', 'Airblade')", "source_tables": ["game", "genre"]}, "evidence": "genre refers to genre_name; 'Airlock', 'Airline Tycoon' , and 'Airblade' refers to game_name IN ('Airlock', 'Airline Tycoon', 'Airblade');"}
{"sample_id": 3499, "db_id": "video_games", "final": {"question": "Calculate the total number of sales in North America.", "sql": "SELECT SUM(T2.num_sales) * 100000 AS nums FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'North America'", "source_tables": ["region_sales", "region"]}, "evidence": "total number of sales = MULTIPLY(SUM(num_sales), 100000); North America refers to region_name = 'North America';"}
{"sample_id": 3500, "db_id": "video_games", "final": {"question": "List down at least five publishers of the games with number of sales less than 10000.", "sql": "SELECT T.publisher_name FROM ( SELECT DISTINCT T5.publisher_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN publisher AS T5 ON T4.publisher_id = T5.id WHERE T1.region_name = 'North America' AND T2.num_sales * 100000 < 10000 LIMIT 5 ) t", "source_tables": ["game_publisher", "game_platform", "region_sales", "region", "publisher"]}, "evidence": "publishers refers to publisher_name; number of sales less than 10000 refers to num_sales < 0.1;"}
{"sample_id": 3501, "db_id": "video_games", "final": {"question": "List the platform ID of the game titled Airborne Troops: Countdown to D-Day.", "sql": "SELECT T1.platform_id FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = 'Airborne Troops: Countdown to D-Day'", "source_tables": ["game", "game_platform", "game_publisher"]}, "evidence": "Airborne Troops: Countdown to D-Day refers to game_name = 'Airborne Troops: Countdown to D-Day';"}
{"sample_id": 3502, "db_id": "video_games", "final": {"question": "How many games available on PSP were released in 2004?", "sql": "SELECT COUNT(T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T1.platform_name = 'PSP' AND T2.release_year = 2004", "source_tables": ["platform", "game_publisher", "game_platform"]}, "evidence": "PSP refers to platform_name = 'PSP'; released in 2004 refers to release_year = 2004;"}
{"sample_id": 3503, "db_id": "video_games", "final": {"question": "What is the genre of the game titled '999: Nine Hours, Nine Persons, Nine Doors' ?", "sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '999: Nine Hours, Nine Persons, Nine Doors'", "source_tables": ["game", "genre"]}, "evidence": "genre of the game refers to genre_name; '999: Nine Hours, Nine Persons, Nine Doors' refers to game_name = '999: Nine Hours, Nine Persons, Nine Doors';"}
{"sample_id": 3504, "db_id": "video_games", "final": {"question": "When was the game ID 156 released?", "sql": "SELECT T1.release_year FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id WHERE T2.game_id = 156", "source_tables": ["game_platform", "game_publisher"]}, "evidence": "when the game was released refers to release_year;"}
{"sample_id": 3505, "db_id": "video_games", "final": {"question": "What is the diffrence between the number of games produced by Culture Brain that can be played on SNES and DS?", "sql": "SELECT COUNT(CASE WHEN T1.platform_name = 'SNES' THEN T3.game_id ELSE NULL END) - COUNT(CASE WHEN T1.platform_name = 'DS' THEN T3.game_id ELSE NULL END) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id INNER JOIN publisher AS T4 ON T3.publisher_id = T4.id WHERE T4.publisher_name = 'Culture Brain'", "source_tables": ["publisher", "platform", "game_publisher", "game_platform"]}, "evidence": "difference = SUBTRACT(SUM(platform_name = 'SNES'), SUM(platform_name = 'DS')); SNES refers to platform_name = SNES ; DS refers to platform_name = 'DS' ;"}
{"sample_id": 3506, "db_id": "video_games", "final": {"question": "In games that can be played on Wii, what is the percentage of games released in 2007?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.release_year = 2007 THEN T3.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T1.platform_name = 'Wii'", "source_tables": ["platform", "game_publisher", "game_platform"]}, "evidence": "Wii refers to platform_name = 'Wii'; percentage = MULTIPLY(DIVIDE(SUM(release_year = 2007), COUNT(release_year)), 100.0); released in 2007 refers to release_year = 2007;"}
{"sample_id": 3507, "db_id": "video_games", "final": {"question": "Among games sold in Europe, list the platform ID of games with sales lesser than 30% of the average number of sales.", "sql": "SELECT DISTINCT T3.platform_id FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id WHERE T1.region_name = 'Europe' AND T2.num_sales * 100 * 100000 < ( SELECT AVG(T2.num_sales * 100000) * 30 FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Europe' )", "source_tables": ["region_sales", "game_platform", "region"]}, "evidence": "Europe refers to region_name = 'Europe'; sales lesser than 30% of the average number of sales refers to SUM(num_sales) < MULTIPLY(AVG(num_sales), 0.3);"}
{"sample_id": 3646, "db_id": "authors", "final": {"question": "What is the short name for the journal that published the paper \"A Case of Unilateral Ashy Dermatosis\"?", "sql": "SELECT T2.ShortName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Title = 'A Case of Unilateral Ashy Dermatosis'", "source_tables": ["paper", "journal"]}, "evidence": "A Case of Unilateral Ashy Dermatosis refer to Title"}
{"sample_id": 3647, "db_id": "authors", "final": {"question": "What are the affiliations of the author \"Mark A. Musen\" written on and off paper?", "sql": "SELECT T1.Affiliation FROM PaperAuthor AS T1 INNER JOIN Author AS T2 ON T1.AuthorId = T2.Id WHERE T2.Name = 'Mark A. Musen'", "source_tables": ["paperauthor", "author"]}, "evidence": "Mark A. Musen refer to Author.Name;"}
{"sample_id": 3648, "db_id": "authors", "final": {"question": "Who are the authors of the paper \"Determination of Planetary Meteorology from Aerobot Flight Sensors\"?", "sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Determination of Planetary Meteorology FROM Aerobot Flight Sensors'", "source_tables": ["paper", "paperauthor"]}, "evidence": "'Determination of Planetary Meteorology from Aerobot Flight Sensors' refer to title of the paper"}
{"sample_id": 3649, "db_id": "authors", "final": {"question": "List all the titles and their publishing journals from the 60's.", "sql": "SELECT T1.Title, T1.JournalId FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Year >= 1960 AND T1.Year <= 1970", "source_tables": ["paper", "journal"]}, "evidence": "from the 60\u2019s refer to Year 1960 BETWEEN 1970\n\n"}
{"sample_id": 3650, "db_id": "authors", "final": {"question": "Which year did the \"Internet, Multimedia Systems and Applications\" conference publish the most papers?", "sql": "SELECT T2.Year FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T1.FullName = 'Internet, Multimedia Systems and Applications' GROUP BY T2.Year ORDER BY COUNT(T2.Id) DESC LIMIT 1", "source_tables": ["paper", "conference"]}, "evidence": "'Internet, Multimedia Systems and Applications' is the FullName of paper; published the most papers refers to MAX(COUNT(year))"}
{"sample_id": 3651, "db_id": "authors", "final": {"question": "What are the different ways the name of the author, Randall Davis, is written on their papers?", "sql": "SELECT DISTINCT T1.Name FROM PaperAuthor AS T1 INNER JOIN Author AS T2 ON T1.AuthorId = T2.Id WHERE T2.Name = 'Randall Davis' AND T1.Name != 'Randall Davis'", "source_tables": ["paperauthor", "author"]}, "evidence": "Randall Davis refer to Author.Name"}
{"sample_id": 3652, "db_id": "authors", "final": {"question": "List all of the conferences where a paper was published in 2008.", "sql": "SELECT DISTINCT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Year = 2008", "source_tables": ["paper", "conference"]}, "evidence": "Published in 2008 refer to Year = 2008\n\n"}
{"sample_id": 3653, "db_id": "authors", "final": {"question": "What is the homepage URL for the journal that published the most papers?", "sql": "SELECT T2.HomePage FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id GROUP BY T1.JournalId ORDER BY COUNT(T1.JournalId) DESC LIMIT 1", "source_tables": ["paper", "journal"]}, "evidence": "published the most papers refer to MAX(JournalId); homepage URL refers to HomePage"}
{"sample_id": 3654, "db_id": "authors", "final": {"question": "What is the proportion of the papers that have the keyword \"cancer\"? Please provide a list of authors and their affiliations.", "sql": "SELECT CAST(SUM(CASE WHEN T1.Keyword = 'cancer' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.Id), T2.Name, T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId", "source_tables": ["paper", "paperauthor"]}, "evidence": "Proportion refer to DIVIDE(COUNT(Keyword = \u2019cancer\u2019), COUNT(PaperID))"}
{"sample_id": 3655, "db_id": "authors", "final": {"question": "What is the name of author with the ID of 1722?", "sql": "SELECT Name FROM Author WHERE Id = 1722", "source_tables": ["author"]}, "evidence": ""}
{"sample_id": 3656, "db_id": "authors", "final": {"question": "How many papers are preprint or not published?", "sql": "SELECT COUNT(Id) FROM Paper WHERE Year = 0 OR (ConferenceId = 0 AND JournalId = 0)", "source_tables": ["paper"]}, "evidence": "preprint or not published refer to Year = 0;"}
{"sample_id": 3657, "db_id": "authors", "final": {"question": "List the name of the author that affiliated with University of Illinois Chicago?", "sql": "SELECT Name FROM Author WHERE Affiliation = 'University of Illinois Chicago'", "source_tables": ["author"]}, "evidence": "'University of Illinois Chicago' is an affiliation"}
{"sample_id": 3658, "db_id": "authors", "final": {"question": "How many papers were published in 2005. Calculate the difference between the number of paper published in 2005 and the number of paper published in the previous year.", "sql": "SELECT SUM(CASE WHEN Year = 2005 THEN 1 ELSE 0 END) , SUM(CASE WHEN year = 2005 THEN 1 ELSE 0 END) - SUM(CASE WHEN year = 2004 THEN 1 ELSE 0 END) AS diff FROM Paper", "source_tables": ["paper"]}, "evidence": "published in 2005 refer to Year = 2005; Difference refer to SUBTRACT(SUM(Year = 2005). SUM(Year = 2004))"}
{"sample_id": 3659, "db_id": "authors", "final": {"question": "State the title of papers published in the Ibm Journal of Research and Development.", "sql": "SELECT T2.Title FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Ibm Journal of Research and Development'", "source_tables": ["paper", "journal"]}, "evidence": "Ibm Journal of Research and Development refer to FullName\n\n'Ibm Journal of Research and Development' is the full name of paper"}
{"sample_id": 3660, "db_id": "authors", "final": {"question": "State the name and affiliation of author for the 'Education, democracy and growth' paper?", "sql": "SELECT T2.Name, T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Education, democracy and growth'", "source_tables": ["paper", "paperauthor"]}, "evidence": "Education, democracy and growth' refer to title of paper\n"}
{"sample_id": 3661, "db_id": "authors", "final": {"question": "How many author published papers in the 'IEEE Computer' journal?", "sql": "SELECT COUNT(T2.Name) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T3.FullName = 'IEEE Computer'", "source_tables": ["paper", "paperauthor", "journal"]}, "evidence": "IEEE Computer refer to FullName; How many author published papers refer to COUNT(PaperAuthor.Name) where FullName = \u2019IEEE Computer\u2019"}
{"sample_id": 3662, "db_id": "authors", "final": {"question": "Where was the 'A context-based navigation paradigm for accessing Web data' paper published? State the name of the conference.", "sql": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'A context-based navigation paradigm for accessing Web data'", "source_tables": ["paper", "conference"]}, "evidence": "A context-based navigation paradigm for accessing Web data' is the title of paper; name of conference refer to FullName\n"}
{"sample_id": 3663, "db_id": "authors", "final": {"question": "How many papers were published in International Workshop on Inductive Logic Programming from 2001 to 2009?", "sql": "SELECT COUNT(T1.Id) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'International Workshop on Inductive Logic Programming' AND T1.Year BETWEEN 2001 AND 2009", "source_tables": ["paper", "conference"]}, "evidence": "From 2001 to 2009 refer to Year 2001 BETWEEN 2009; 'International Workshop on Inductive Logic Programming' refer to Conference.FullName\n"}
{"sample_id": 3664, "db_id": "authors", "final": {"question": "Calculate the average of authors for each paper from the year of 1990 to 2000.", "sql": "SELECT CAST(COUNT(DISTINCT T2.AuthorId) AS REAL) / COUNT(DISTINCT T1.Title) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Year BETWEEN 1990 AND 2000", "source_tables": ["paper", "paperauthor"]}, "evidence": "Average refer to DIVIDE(COUNT(AuthorID where Year = 1990 BETWEEN 2000), COUNT(Title where Year = 1990 BETWEEN 2000))"}
{"sample_id": 3665, "db_id": "authors", "final": {"question": "Indicate the year and a full name of the journal in which the publication named 'Area Effects in Cepaea' was published.", "sql": "SELECT T1.Year, T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Title = 'Area Effects in Cepaea'", "source_tables": ["paper", "journal"]}, "evidence": "'Area Effects in Cepaea' is the title of paper"}
{"sample_id": 3666, "db_id": "authors", "final": {"question": "Who is the author of the publication named 'Real-Time Automata'?", "sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Real-Time Automata'", "source_tables": ["paper", "paperauthor"]}, "evidence": "'Real-Time Automata' is the title of paper; publication refers to title;"}
{"sample_id": 3667, "db_id": "authors", "final": {"question": "Provide the name of the author who is affiliated with the organization named 'ABB Electrical Machines'.", "sql": "SELECT Name FROM Author WHERE Affiliation = 'ABB Electrical Machines'", "source_tables": ["author"]}, "evidence": "'ABB Electrical Machines' is an affiliation"}
{"sample_id": 3668, "db_id": "authors", "final": {"question": "Provide the number of publications published in the journal named 'Academic Medicine' between 2005 and 2010.", "sql": "SELECT COUNT(T2.JournalId) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Academic Medicine' AND T2.Year BETWEEN 2005 AND 2010", "source_tables": ["paper", "journal"]}, "evidence": "'Academic Medicine' is the FullName of journal; between 2005 and 2010 refer to Year 2005 BETWEEN 2010"}
{"sample_id": 3669, "db_id": "authors", "final": {"question": "Provide the title of the latest publication published by it's author 'Zuliang Du'.", "sql": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Name = 'Zuliang Du' ORDER BY T2.Year DESC LIMIT 1", "source_tables": ["paper", "paperauthor"]}, "evidence": "'Zuliang Du' is the name of paper author; latest publication refers to MAX(Year)"}
{"sample_id": 3670, "db_id": "authors", "final": {"question": "How many publications were published in relation to the conference 'Adaptive Multimedia Retrieval' in 2007?", "sql": "SELECT COUNT(T2.ConferenceId) FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T1.FullName = 'Adaptive Multimedia Retrieval' AND T2.Year = 2007", "source_tables": ["paper", "conference"]}, "evidence": "'Adaptive Multimedia Retrieval is the FullName of paper; in 2007 refer to Year = 2007"}
{"sample_id": 3671, "db_id": "authors", "final": {"question": "Provide the average number of papers that are published in the journal named 'Information Sciences' annually.", "sql": "SELECT CAST(COUNT(T2.JournalId) AS REAL) / COUNT(DISTINCT T2.Year) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Information Sciences'", "source_tables": ["paper", "journal"]}, "evidence": "'Information Sciences' is the FullName of journal; average = DIVIDE(COUNT(JournalId = 48), COUNT(Years))"}
{"sample_id": 3672, "db_id": "authors", "final": {"question": "How many publications were published by author named 'Howard F. Lipson'?", "sql": "SELECT COUNT(PaperId) FROM PaperAuthor WHERE Name = 'Howard F. Lipson'", "source_tables": ["paperauthor"]}, "evidence": "'Howard F. Lipson' is the name of author"}
{"sample_id": 3673, "db_id": "authors", "final": {"question": "Among all publications containing keywords 'Turbulent Fluids', what percentage of them was published in the journal named 'Physics of Fluids'?", "sql": "SELECT CAST(SUM(CASE WHEN T1.Keyword = 'Turbulent Fluids' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.FullName = 'Physics of Fluids' THEN 1 ELSE 0 END) FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id", "source_tables": ["paper", "journal"]}, "evidence": "'Physics of Fluids' is the FullName of journal; percentage = DIVIDE(SUM(Keyword = 'Turbulent Fluids'), SUM(FullName = 'Physics of Fluids')) as percentage"}
{"sample_id": 3674, "db_id": "authors", "final": {"question": "Indicate the number of authors affiliated with the organization named 'Arizona State University'.", "sql": "SELECT COUNT(Name) FROM Author WHERE Affiliation = 'Arizona State University'", "source_tables": ["author"]}, "evidence": "'Arizona State University' is an affiliation"}
{"sample_id": 3675, "db_id": "authors", "final": {"question": "List out the full name and URL link of ICCI?", "sql": "SELECT FullName, HomePage FROM Conference WHERE ShortName = 'ICCI'", "source_tables": ["conference"]}, "evidence": "'ICCI' is the ShortName of conference; URL refer to HomePage"}
{"sample_id": 3676, "db_id": "authors", "final": {"question": "Mention the titile of paper writen by Joe Lograsso.", "sql": "SELECT T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Joe Lograsso'", "source_tables": ["paper", "paperauthor"]}, "evidence": "'Joe Lograsso' is name of paper author"}
{"sample_id": 3677, "db_id": "authors", "final": {"question": "How many papers were written by authors who cooperated with University of Hong Kong?", "sql": "SELECT COUNT(T2.PaperId) FROM Author AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.AuthorId WHERE T1.Affiliation = 'University of Hong Kong'", "source_tables": ["paperauthor", "author"]}, "evidence": "University of Hong Kong' is an affiliation"}
{"sample_id": 3678, "db_id": "authors", "final": {"question": "State the year and title of papers written by Barrasa.", "sql": "SELECT T1.Year, T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Barrasa'", "source_tables": ["paper", "paperauthor"]}, "evidence": "'Barassa' is name of paper author"}
{"sample_id": 3679, "db_id": "authors", "final": {"question": "Sate the author name and published year for paper id 2?", "sql": "SELECT T1.Name, T3.Year FROM Author AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.AuthorId INNER JOIN Paper AS T3 ON T2.PaperId = T3.Id WHERE T2.PaperId = 2", "source_tables": ["paper", "paperauthor", "author"]}, "evidence": "published year refers to year"}
{"sample_id": 3680, "db_id": "authors", "final": {"question": "Mention the name of author for paper id 5 and state the keyword of this page.", "sql": "SELECT T1.Name, T3.Keyword FROM Author AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.AuthorId INNER JOIN Paper AS T3 ON T2.PaperId = T3.Id WHERE T2.PaperId = 5", "source_tables": ["paper", "paperauthor", "author"]}, "evidence": ""}
{"sample_id": 3681, "db_id": "authors", "final": {"question": "What is the full name of the conference in which the paper \"2004 YD5\" was published?", "sql": "SELECT T1.FullName FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T2.Title = '2004 YD5'", "source_tables": ["paper", "conference"]}, "evidence": "'2004 YD5' is the title of paper"}
{"sample_id": 3742, "db_id": "college_completion", "final": {"question": "List the race of institutions in Alabama with number of students greater than the 90% of average number of students of all institutions?", "sql": "SELECT DISTINCT T2.race FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.student_count > ( SELECT AVG(T1.student_count) * 0.9 FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.state = 'Alabama' ) AND T1.state = 'Alabama'", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "Alabama refers to state = 'Alabama'; number of students greater than the 90% of average = MULTIPLY(AVG(student_count), 90%) < student_count;"}
{"sample_id": 3743, "db_id": "college_completion", "final": {"question": "In year 2010 at schools located in Hawaii, what is the percentage of schools offers an associate's degree?", "sql": "SELECT CAST(SUM(CASE WHEN T2.level = '2-year' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.level) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.state = 'Hawaii' AND T2.year = 2010", "source_tables": ["state_sector_grads", "state_sector_details"]}, "evidence": "Hawaii refers to state = 'Hawaii'; associate's degree refers to level = '2-year'; percentage = MULTIPLY(DIVIDE(SUM(level = '2-year' ), count(level)), 1.0);"}
{"sample_id": 3744, "db_id": "college_completion", "final": {"question": "In the state of Connecticut, what is the name of the instution with the highest percent rank for freshman retention percentage within the sector?", "sql": "SELECT chronname FROM institution_details WHERE state = 'Connecticut' AND retain_percentile = ( SELECT MAX(retain_percentile) FROM institution_details WHERE state = 'Connecticut' )", "source_tables": ["institution_details"]}, "evidence": "name of the institution refers to chronname;\u00a0 highest percent rank for freshman retention percentage within the sector refers to MAX(retain_percentile);"}
{"sample_id": 3745, "db_id": "college_completion", "final": {"question": "What is the website address of the institution with the highest number of White degree-seeking students at 2-year institutions in 2008?", "sql": "SELECT T1.site FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.race = 'W' AND T2.cohort = '2y all' AND T2.year = 2008 ORDER BY T2.grad_cohort DESC LIMIT 1", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "website address refers to site; White refers to race = 'W'; degree-seeking students at 2-year institutions refers to cohort = '2y all'; in 2008 refers to year = '2008';"}
{"sample_id": 3746, "db_id": "college_completion", "final": {"question": "In Harvard University, which year recorded the highest number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions?", "sql": "SELECT T2.year FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Harvard University' GROUP BY T2.year ORDER BY SUM(T2.grad_cohort) DESC LIMIT 1", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "Harvard University refers to chronname = 'Harvard University'; highest number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions refers to MAX(grad_cohort);"}
{"sample_id": 3747, "db_id": "college_completion", "final": {"question": "In the state with the highest state appropriations to higher education in fiscal year 2011 per resident, which institution has the lowest number of undergraduates in 2010?", "sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state INNER JOIN institution_grads AS T3 ON T3.unitid = T1.unitid WHERE T1.student_count = ( SELECT MIN(T1.student_count) FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state INNER JOIN institution_grads AS T3 ON T3.unitid = T1.unitid WHERE T3.year = 2010 ) AND T3.year = 2010 GROUP BY T1.state ORDER BY SUM(T2.state_appr_value) DESC LIMIT 1", "source_tables": ["institution_grads", "institution_details", "state_sector_details"]}, "evidence": "highest state appropriations to higher education in fiscal year 2011 per resident refers to MAX(state_appr_value); lowest number of undergraduates refers to MIN(student_count); in 2010 refers to year = 2010;"}
{"sample_id": 3748, "db_id": "college_completion", "final": {"question": "In Yale University, what is the average number of Black students per year who were bachelor's/equivalent-seeking cohort at 4-year institutions between 2002 to 2005?", "sql": "SELECT AVG(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Yale University' AND T2.year BETWEEN 2002 AND 2005 AND T2.race = 'B' AND T2.cohort = '4y bach'", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "Yale University refers to chronname = 'Yale University'; average = DIVIDE(COUNT(race = 'B' WHERE cohort = '4y bach AND year BETWEEN 2002 AND 2005), 3); Black refers to race = 'B'; bachelor's/equivalent-seeking cohort at 4-year institutions refers to cohort = '4y bach'; between 2002 to 2005 refers to year BETWEEN '2002' AND '2005';"}
{"sample_id": 3749, "db_id": "college_completion", "final": {"question": "Among the Ivy League Schools, which school have the highest number of Hispanic graduates of all time?", "sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname IN ( 'Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University' ) AND T2.race = 'H' GROUP BY T1.chronname ORDER BY SUM(T2.grad_cohort) DESC LIMIT 1", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "Ivy League Schools refers to chronname = 'Brown University' or chronname = 'Columbia University' or chronname = 'Cornell University' or chronname = 'Dartmouth College' or chronname = 'Harvard University' or chronname = 'Princeton University' or chronname = 'University of Pennsylvania' or chronname = 'Yale University'; highest number of hispanic graduates refers to MAX(grad_cohort WHERE race = 'H');"}
{"sample_id": 3750, "db_id": "college_completion", "final": {"question": "How many 4-year public institutions are there in the state of Florida? Give all of their names.", "sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 WHERE T2.level = '4-year' AND T2.control = 'Public' AND T2.state = 'Florida'", "source_tables": ["institution_details", "state_sector_details"]}, "evidence": "4-year refers to level = '4-year'; public refers to control = 'Public'; names refers to chronname;"}
{"sample_id": 3751, "db_id": "college_completion", "final": {"question": "Between the Ivy League Schools, which school's state have the lowest sate appropriations to higher education in fiscal year 2011 per resident?", "sql": "SELECT T1.state FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state WHERE T1.chronname IN ( 'Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University' ) GROUP BY T1.state ORDER BY SUM(T2.state_appr_value) ASC LIMIT 1", "source_tables": ["institution_details", "state_sector_details"]}, "evidence": "Ivy League Schools refers to chronname = 'Brown University' or chronname = 'Columbia University' or chronname = 'Cornell University' or chronname = 'Dartmouth College' or chronname = 'Harvard University' or chronname = 'Princeton University' or chronname = 'University of Pennsylvania' or chronname = 'Yale University'; lowest state appropriations to higher education in fiscal year 2011 per resident refers to MIN(state_appr_value);"}
{"sample_id": 3752, "db_id": "college_completion", "final": {"question": "In the state with the highest number of schools, how many institutions have a percentage of no less than 90 of undergraduates who attend full-time? List all of the institutions' names.", "sql": "SELECT COUNT(t1.unitid), t1.chronname FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON t1.state = t2.state WHERE t1.ft_pct > 90 ORDER BY t2.schools_count DESC LIMIT 1", "source_tables": ["institution_details", "state_sector_details"]}, "evidence": "highest number of schools refers to MAX(schools_count); percentage of no less than 90 of undergraduates who attend full-time refers to ft_pct > 90; institutions' names refers to chronname;"}
{"sample_id": 3753, "db_id": "college_completion", "final": {"question": "What is the average SAT value for incoming students in all of the schools located in the state with the lowest state appropriations to higher education in fiscal year 2011 per resident?", "sql": "SELECT AVG(t1.med_sat_value) FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON t1.state = t2.state ORDER BY t2.state_appr_value LIMIT 1", "source_tables": ["institution_details", "state_sector_details"]}, "evidence": "average = DIVIDE(SUM(med_sat_value), SUM(chronname)); SAT value for incoming students refers to med_sat_value; lowest state appropriations to higher education in fiscal year 2011 per resident refers to MIN(state_appr_value);"}
{"sample_id": 3754, "db_id": "college_completion", "final": {"question": "What is the name of the school with the highest number of first-time, full-time, degree-seeking female students in the cohort being tracked, minus any exclusions who were seeking another type of degree or certificate at a 4-year institution?", "sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.gender = 'F' AND T2.cohort = '4y other' ORDER BY T2.grad_cohort DESC LIMIT 1", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "name of the school refers to chronname; highest number of first-time, full-time, degree-seeking female students in the cohort being tracked, minus any exclusions refers to MAX(grad_cohort WHERE gender = 'F'); seeking another type of degree or certificate at a 4-year institution refers to cohort = '4y other';"}
{"sample_id": 3755, "db_id": "college_completion", "final": {"question": "Among the Ivy League Schools in 2013, which schools have the highest number of Black students who graduated within 150 percent of normal/expected time who were seeking a bachelor's/equivalent cohort at 4-year institutions?", "sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname IN ( 'Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University' ) AND T2.year = 2013 AND T2.race = 'B' AND T2.cohort = '4y bach' ORDER BY T2.grad_cohort DESC LIMIT 1", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "Ivy League Schools refers to chronname = 'Brown University' or chronname = 'Columbia University' or chronname = 'Cornell University' or chronname = 'Dartmouth College' or chronname = 'Harvard University' or chronname = 'Princeton University' or chronname = 'University of Pennsylvania' or chronname = 'Yale University'; in 2013 refers to year = '2013'; highest number of Black students who graduated within 150 percent of normal/expected time refers to MAX(grad_150 WHERE race = 'B'); seeking a bachelor's/equivalent cohort at 4-year institutions refers to cohort = '4y bach';"}
{"sample_id": 3756, "db_id": "college_completion", "final": {"question": "Between 2011 to 2013, what is the average number of male Hispanic degree-seeking students at 2-year institutions who graduated within 150 percent of normal/expected time in United Education Institute-Huntington Park Campus?", "sql": "SELECT AVG(T2.grad_150) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'United Education Institute-Huntington Park Campus' AND T2.year BETWEEN 2011 AND 2013 AND T2.gender = 'M' AND T2.race = 'H'", "source_tables": ["institution_grads", "institution_details"]}, "evidence": "between 2011 to 2013 refers to year BETWEEN '2011' AND '2013'; male refers to gender = 'M'; Hispanic refers to race = 'H'; number of degree-seeking students at 2-year institutions who graduated within 150 percent of normal/expected time refers to grad_150; United Education Institute-Huntington Park Campus refers to chronname = 'United Education Institute-Huntington Park Campus';"}
{"sample_id": 3757, "db_id": "college_completion", "final": {"question": "What is the name of the school with the highest difference in the average completion rate for the national in which it belongs? Indicate the state appropriations to higher education in fiscal year 2011 per resident to which the school belongs.", "sql": "SELECT T1.chronname, T2.state_appr_value FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state ORDER BY T1.awards_per_value - T2.awards_per_natl_value DESC LIMIT 1", "source_tables": ["institution_details", "state_sector_details"]}, "evidence": "name of the school refers to chronname; highest difference in the average completion rate for the national in which it belongs = MAX(SUBTRACT(awards_per_value, awards_per_natl_value)); state appropriations to higher education in fiscal year 2011 per resident to which the school belongs refers to state_appr_value;"}
{"sample_id": 4062, "db_id": "public_review_platform", "final": {"question": "In businesses with a category of \"DJs\", how many businesses are rated less than 5?", "sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'DJs' AND T1.stars < 5", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "category of \"DJs\" refers to category_name = 'DJs'; rated less than 5 refers to stars < 5; businesses refer to business_id;"}
{"sample_id": 4063, "db_id": "public_review_platform", "final": {"question": "List active business ids with opening times of 7AM and closing times of 8PM.", "sql": "SELECT DISTINCT T4.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T2.business_id = T3.business_id INNER JOIN Business AS T4 ON T3.business_id = T4.business_id WHERE T4.active = 'true' AND T3.opening_time = '7AM' AND T3.closing_time = '8PM'", "source_tables": ["categories", "business_categories", "business_hours", "business"]}, "evidence": "opening times of 7AM and closing times of 8PM refer to Business_Hours where opening_time = '7AM' and closing_time = '8PM'; active business refers to business_id where active = 'true';"}
{"sample_id": 4064, "db_id": "public_review_platform", "final": {"question": "How many businesses with the category named Stadiums & Arenas are rated highest?", "sql": "SELECT COUNT(T1.business_id) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.category_name = 'Stadiums & Arenas' AND T3.stars = ( SELECT MAX(stars) FROM Business )", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "rated highest refers to MAX(stars); category_name = 'Stadiums & Arenas';"}
{"sample_id": 4065, "db_id": "public_review_platform", "final": {"question": "How many category id have low review count and rating more than 2?", "sql": "SELECT COUNT(DISTINCT T1.category_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.review_count = 'Low' AND T3.stars > 2", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "rating more than 2 refers to stars > 2;"}
{"sample_id": 4066, "db_id": "public_review_platform", "final": {"question": "Which businesses with the category name Accessories have opening hours before 7AM?", "sql": "SELECT T1.business_id FROM Business_Hours AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Accessories' AND SUBSTR(T1.opening_time, -4, 2) * 1 < 7 AND T1.opening_time LIKE '%AM'", "source_tables": ["categories", "business_categories", "business_hours"]}, "evidence": "opening hours before 7AM refer to opening_time < '7AM'; businesses refer to business_id;"}
{"sample_id": 4067, "db_id": "public_review_platform", "final": {"question": "Among the active businesses in Arizona, how many businesses work after 12PM?", "sql": "SELECT COUNT(DISTINCT T2.business_id) FROM Business_Hours AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.active = 'true' AND T2.state = 'AZ' AND T1.opening_time > '12PM'", "source_tables": ["categories", "business_categories", "business_hours", "business"]}, "evidence": "active businesses in Arizona refer to business_id where state = 'Arizona' and active = 'true'; work after 12PM refer to opening_time > '12PM';"}
{"sample_id": 4068, "db_id": "public_review_platform", "final": {"question": "Please provide the name of businesses with user id \"16328\".", "sql": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Tips AS T3 ON T2.business_id = T3.business_id WHERE T3.user_id = 16328", "source_tables": ["categories", "business_categories", "tips"]}, "evidence": "name of business refers to category_name;"}
{"sample_id": 4069, "db_id": "public_review_platform", "final": {"question": "How many businesses have the category named food? List those businesses and find the percentage of businesses with less than 2 stars.", "sql": "SELECT T3.business_id, CAST((( SELECT COUNT(business_id) FROM Business WHERE stars < 2 ) - ( SELECT COUNT(business_id) FROM Business WHERE stars > 2 )) AS REAL) * 100 / ( SELECT COUNT(stars) FROM Business ) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.category_name = 'Food'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "businesses have the category named food refer to business_id where category_name = 'Food'; DIVIDE(COUNT(business_id where category_name = 'Food' and stars < 2), COUNT(business_id where category_name = 'Food')) as percentage;"}
{"sample_id": 4070, "db_id": "public_review_platform", "final": {"question": "Calculate the percentage of businesses with the category name food that are open from 7AM to 8PM in the businesses with the same time.", "sql": "SELECT CAST(SUM(CASE WHEN T3.category_name = 'Food' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.category_name) FROM Business_Categories AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T1.category_id = T3.category_id", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "DIVIDE(COUNT(business_id where category_name = 'Food' and opening_time = '7AM' and closing_time = '8PM'), COUNT(business_id where opening_time = '7AM' and closing_time = '8PM')) as percentage;"}
{"sample_id": 4071, "db_id": "public_review_platform", "final": {"question": "Write down the number of running business with each review count in Cave Creek city.", "sql": "SELECT SUM(CASE WHEN review_count = 'High' THEN 1 ELSE 0 END) AS high , SUM(CASE WHEN review_count = 'Medium' THEN 1 ELSE 0 END) AS Medium , SUM(CASE WHEN review_count = 'Low' THEN 1 ELSE 0 END) AS low FROM Business WHERE city = 'Cave Creek' AND active = 'true'", "source_tables": ["business"]}, "evidence": "number of running business refers to COUNT(business_id) where active = 'true'; each review count includes review_count = 'High', review_count = 'Medium', review_count = 'Low';"}
{"sample_id": 4072, "db_id": "public_review_platform", "final": {"question": "Calculate the yearly average user who started using Yelp from the year of 2005 to 2014.", "sql": "SELECT AVG(user_id) FROM Users WHERE user_yelping_since_year >= 2005 AND user_yelping_since_year <= 2015", "source_tables": ["users"]}, "evidence": "avg(user_id) where user_yelping_since_year BETWEEN '2005' AND '2014';"}
{"sample_id": 4073, "db_id": "public_review_platform", "final": {"question": "What is the active and inactive ratio of the business with the review count of low.", "sql": "SELECT CAST(SUM(CASE WHEN active = 'true' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN active = 'false' THEN 1 ELSE 0 END) AS radio FROM Business WHERE review_count = 'Low'", "source_tables": ["business"]}, "evidence": "DIVIDE(COUNT(business_id where review_count = 'Low' and active = 'true'), COUNT(business_id where review_count = 'Low' and active = 'false'));"}
{"sample_id": 4074, "db_id": "public_review_platform", "final": {"question": "List any five of user ID who became elite user in 2006.", "sql": "SELECT user_id FROM Elite WHERE year_id = 2006 LIMIT 5", "source_tables": ["elite"]}, "evidence": "year_id = '2006';"}
{"sample_id": 4075, "db_id": "public_review_platform", "final": {"question": "Write down the any five of ID and name of category that starts with alphabet \"P\".", "sql": "SELECT category_id, category_name FROM Categories WHERE category_name LIKE 'P%' LIMIT 5", "source_tables": ["categories"]}, "evidence": "category that starts with alphabet \"P\" refers to category_name like 'P%';"}
{"sample_id": 4076, "db_id": "public_review_platform", "final": {"question": "Provide the list of user ID along with review star of which has the review length of medium with business ID of 35.", "sql": "SELECT user_id, review_stars FROM Reviews WHERE business_id = 15 AND review_length = 'Medium'", "source_tables": ["reviews"]}, "evidence": ";"}
{"sample_id": 4077, "db_id": "public_review_platform", "final": {"question": "List down the business ID and attribute value of the attribute name of \"payment_types_visa\".", "sql": "SELECT T2.business_id, T2.attribute_value FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name = 'payment_types_visa'", "source_tables": ["attributes", "business_attributes"]}, "evidence": ""}
{"sample_id": 4078, "db_id": "public_review_platform", "final": {"question": "Describe ID and active status of the business under category of \"Diagnostic Imaging\".", "sql": "SELECT T2.business_id, T3.active FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Diagnostic Imaging'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "ID refers to business_id; category of \"Diagnostic Imaging\" refers to category_name = 'Diagnostic Imaging';"}
{"sample_id": 4079, "db_id": "public_review_platform", "final": {"question": "Mention the user ID and their year of joining Yelp who had great experience on business ID 143.", "sql": "SELECT T2.user_id, T2.user_yelping_since_year FROM Reviews AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.business_id = 143 AND T1.review_stars = 5", "source_tables": ["users", "reviews"]}, "evidence": "year of joining Yelp refers to user_yelping_since_year; great experience refers to Reviews where review_stars = 5;"}
{"sample_id": 4080, "db_id": "public_review_platform", "final": {"question": "Among the user ID with number in compliment of uber on profile, list any 5 user ID and the year when they join Yelp.", "sql": "SELECT T3.user_id, T3.user_yelping_since_year FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T1.compliment_type = 'profile' AND T2.number_of_compliments = 'Uber' LIMIT 5", "source_tables": ["compliments", "users", "users_compliments"]}, "evidence": "when join Yelp refers to user_yelping_since_year; compliment_type = 'profile'; number_of_compliments = 'Uber';"}
{"sample_id": 4081, "db_id": "public_review_platform", "final": {"question": "List the user ID, business ID with review length of the business which received the most likes in tips.", "sql": "SELECT T1.user_id, T1.business_id, T2.review_length FROM Tips AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id ORDER BY T1.likes DESC LIMIT 1", "source_tables": ["reviews", "tips"]}, "evidence": "business which received the most likes refers to business_id where MAX(likes);"}
{"sample_id": 4082, "db_id": "public_review_platform", "final": {"question": "Among the elite users of 10 consecutive year from 2005 to 2014, list down the user ID and their number of compliment on photos.", "sql": "SELECT T2.user_id, T2.number_of_compliments FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id INNER JOIN Elite AS T3 ON T2.user_id = T3.user_id WHERE T3.year_id BETWEEN 2005 AND 2014 AND T1.compliment_type = 'photos'", "source_tables": ["compliments", "users_compliments", "elite"]}, "evidence": "from 2005 to 2014 refers to year_id BETWEEN 2005 AND 2014; compliment_type = 'photos';"}
{"sample_id": 4083, "db_id": "public_review_platform", "final": {"question": "Calculate the percentage of business which opened on Sunday from 9AM to 9PM based on the number of business opened on Sunday.", "sql": "SELECT CAST(SUM(CASE WHEN T2.opening_time = '9AM' AND T2.closing_time = '9PM' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.day_id) FROM Days AS T1 INNER JOIN Business_Hours AS T2 ON T1.day_id = T2.day_id WHERE T1.day_of_week = 'Sunday'", "source_tables": ["business_hours", "days"]}, "evidence": "Sunday refers to day_of_week = 'Sunday' where day_id = 1; opened from 9AM to 9PM refers to Business_Hours where opening_time = '9AM' and closing_time = '9PM'; DIVIDE(COUNT(opening_time = '9AM' and closing_time = '9PM' and day_of_week = 'Sunday'), COUNT(opening_time = NOT NULL and closing_time = NOT NULL and day_of_week = 'Sunday')) as percentage;"}
{"sample_id": 4084, "db_id": "public_review_platform", "final": {"question": "Write down the ID and opening day of a week for the business which are running in Black Canyon City.", "sql": "SELECT T2.business_id, T3.day_of_week FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city = 'Black Canyon City' AND T1.active = 'true'", "source_tables": ["business_hours", "days", "business"]}, "evidence": "running refers to active = 'true'; opening day of a week means days of the week when business is open;"}
{"sample_id": 4085, "db_id": "public_review_platform", "final": {"question": "Within the user who joined Yelp in 2004, explore the user ID with average star of 5 and it's review length on the business.", "sql": "SELECT T2.user_id, T2.review_length FROM Users AS T1 INNER JOIN Reviews AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2004 AND T1.user_average_stars = 5", "source_tables": ["users", "reviews"]}, "evidence": "user who joined Yelp in 2004 refers to user_id where user_yelping_since_year = 2014; user_average_stars = 5;"}
{"sample_id": 4086, "db_id": "public_review_platform", "final": {"question": "Which business ID received the review of 4 star and above by 65% of user? Describe their active status and city.", "sql": "SELECT DISTINCT T2.business_id, T2.city FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.review_stars >= 4 AND ( SELECT CAST(( SELECT COUNT(DISTINCT T1.user_id) FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.review_stars >= 4 ) AS REAL) * 100 / ( SELECT COUNT(user_id) FROM Users ) > 65 )", "source_tables": ["users", "reviews", "business"]}, "evidence": "review of 4 star and above refers to stars > 4; DIVIDE(SUM(stars > 4), COUNT(business_id)) = 0.65;"}
{"sample_id": 4087, "db_id": "public_review_platform", "final": {"question": "Calculate the difference between running business in Glendale City and Mesa City.", "sql": "SELECT SUM(CASE WHEN city = 'Glendale' THEN 1 ELSE 0 END) - SUM(CASE WHEN city = 'Mesa' THEN 1 ELSE 0 END) AS diff FROM Business WHERE active = 'true'", "source_tables": ["business"]}, "evidence": "running business refers to business where active = 'true';"}
{"sample_id": 4088, "db_id": "public_review_platform", "final": {"question": "How many likes did short comment left by users who joined in 2010 get?", "sql": "SELECT SUM(T2.likes) FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2010", "source_tables": ["users", "tips"]}, "evidence": "short comment refers to tip_length = 'Short'; users who joined in 2010 refer to user_id where user_yelping_since_year = 2010;"}
{"sample_id": 4089, "db_id": "public_review_platform", "final": {"question": "For users with average ratings of 3, what kind of tip length they mostly left?", "sql": "SELECT T2.tip_length FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T1.user_average_stars = 3 GROUP BY T2.tip_length ORDER BY COUNT(T2.tip_length) DESC LIMIT 1", "source_tables": ["users", "tips"]}, "evidence": "average ratings of 3 refer to user_average_stars = 3; kind of tip length they mostly left refers to tip_length where MAX(COUNT(user_id));"}
{"sample_id": 4090, "db_id": "public_review_platform", "final": {"question": "Sum up the likes get by short reviews on businesses located in City Goodyear.", "sql": "SELECT SUM(T2.likes) AS likes FROM Business AS T1 INNER JOIN Tips AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Goodyear'", "source_tables": ["tips", "business"]}, "evidence": "short reviews refer to tip_length = 'Short';"}
{"sample_id": 4091, "db_id": "public_review_platform", "final": {"question": "For businesses with long length reviews, which state are they located?", "sql": "SELECT DISTINCT T1.state FROM Business AS T1 INNER JOIN Tips AS T2 ON T1.business_id = T2.business_id WHERE T2.tip_length = 'Long'", "source_tables": ["tips", "business"]}, "evidence": "businesses with long length tips refer to business_id where tip_length = 'Long';"}
{"sample_id": 4092, "db_id": "public_review_platform", "final": {"question": "How much time do businesses in El Mirage City, AZ State operate in average daily?", "sql": "SELECT SUM(T2.closing_time - T2.opening_time) FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'El Mirage' AND T1.state = 'AZ'", "source_tables": ["business_hours", "business"]}, "evidence": "how much time does this business open refers to SUBTRACT(closing_time, opening_time); DIVIDE(SUM(SUBTRACT(closing_time, opening_time)), SUM(Business.business_id))"}
{"sample_id": 4093, "db_id": "public_review_platform", "final": {"question": "List down the closing day of businesses located at SC State.", "sql": "SELECT T3.day_id - T2.day_id FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.state = 'SC'", "source_tables": ["business_hours", "days", "business"]}, "evidence": "closing day refers to SUBTRACT(days.day_id, business_Hours.day_id)"}
{"sample_id": 4094, "db_id": "public_review_platform", "final": {"question": "List down the category of businesses whose stars ratings are 5.", "sql": "SELECT DISTINCT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T1.stars = 5", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "category of businesses refers to category_name; stars ratings are 5 refers to stars = 5"}
{"sample_id": 4095, "db_id": "public_review_platform", "final": {"question": "What are the states of businesses with attribute of beer and wine located?", "sql": "SELECT DISTINCT T2.state FROM Business_Attributes AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.attribute_value = 'beer_and_wine'", "source_tables": ["business_attributes", "business"]}, "evidence": "with attribute of beer and wine refers to attribute_value = 'beer_and_wine';"}
{"sample_id": 4096, "db_id": "public_review_platform", "final": {"question": "How many user's compliment in photo has medium in number?", "sql": "SELECT COUNT(T2.user_id) FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.compliment_type = 'photos' AND T2.number_of_compliments = 'Medium'", "source_tables": ["compliments", "users_compliments"]}, "evidence": "user's compliment in photo refers to compliment_type = 'photo'; photo has medium in number refers to number_of_compliments = 'Medium'"}
{"sample_id": 4097, "db_id": "public_review_platform", "final": {"question": "Among businesses with \"Wi-Fi\" attribute, which businesses id are located at SC State?", "sql": "SELECT T3.business_id FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name = 'Wi-Fi' AND T2.attribute_value = 'true' AND T3.state = 'SC'", "source_tables": ["attributes", "business_attributes", "business"]}, "evidence": "\"Wi-Fi\" attribute refers to attribute_name = 'Wi-Fi' AND attribute_value = 'true'"}
{"sample_id": 4098, "db_id": "public_review_platform", "final": {"question": "Sum up the number of business with \"ambience_romantic\" attribute.", "sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name = 'ambience_romantic' AND T2.attribute_value = 'true'", "source_tables": ["attributes", "business_attributes"]}, "evidence": "\"ambience_romantic\" attribute refers to attribute_name = 'ambience_romantic' AND attribute_value = 'true'"}
{"sample_id": 4099, "db_id": "public_review_platform", "final": {"question": "What is the percentage of businesses with \"Good for Kids\" attribute over the other attributes?", "sql": "SELECT CAST(SUM(CASE WHEN attribute_name = 'Good for Kids' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value = 'true'", "source_tables": ["attributes", "business_attributes"]}, "evidence": "\"Good for Kids\" attribute refers to attribute_name = 'Good for Kids' AND attribute_value = 'true'; Calculation = DIVIDE(SUM(attribute_name = 'Good for Kids' AND attribute_value = 'true')), SUM(business_id) * 100"}
{"sample_id": 4100, "db_id": "public_review_platform", "final": {"question": "How many businesses are not closed in the city of Mesa?", "sql": "SELECT COUNT(business_id) FROM Business WHERE city = 'Mesa' AND active = 'true'", "source_tables": ["business"]}, "evidence": "businesses are not closed refers to active = 'true'"}
{"sample_id": 4101, "db_id": "public_review_platform", "final": {"question": "In how many businesses have customers had a bad or terrible experience?", "sql": "SELECT COUNT(business_id) FROM Business WHERE stars IN (1, 2)", "source_tables": ["business"]}, "evidence": "stars = 2 means bad experience; stars = 1 means terrible experience; customers had a bad or terrible experience refers to stars = 2 OR stars = 1"}
{"sample_id": 4102, "db_id": "public_review_platform", "final": {"question": "List by ID the businesses with the reviews with the lowest veracity of Paradise Valley.", "sql": "SELECT business_id FROM Business WHERE stars > 3 AND city = 'Paradise Valley' AND review_count = 'Low'", "source_tables": ["business"]}, "evidence": "ID of businesses refers to business_id; reviews with the lowest veracity refers to review_count = 'Low' AND stars > 3; Paradise Valley is a city"}
{"sample_id": 4103, "db_id": "public_review_platform", "final": {"question": "How many businesses have more than 1 attribute?", "sql": "SELECT COUNT(business_id) FROM Business_Attributes WHERE attribute_value > 1", "source_tables": ["business_attributes"]}, "evidence": "businesses have more than 1 attribute refers to COUNT(attribute_value) > 1"}
{"sample_id": 4104, "db_id": "public_review_platform", "final": {"question": "How many businesses are opened the same number of hours every day of the week?", "sql": "SELECT COUNT(business_id) FROM Business_Hours WHERE opening_time = '8AM' AND closing_time = '6PM'", "source_tables": ["business_hours"]}, "evidence": "how much time does this business open refers to SUBTRACT(closing_time, opening_time); every day of the week refers to day_id BETWEEN 1 AND 7"}
{"sample_id": 4105, "db_id": "public_review_platform", "final": {"question": "How many reviews of businesses that are still open received an uber rating on the funny vote?", "sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T2.review_votes_funny = 'Uber' AND T1.active = 'true'", "source_tables": ["reviews", "business"]}, "evidence": "businesses that still open refers to active = 'true'; business received an uber rating on the funny vote refers to review_votes_funny = 'Uber'"}
{"sample_id": 4106, "db_id": "public_review_platform", "final": {"question": "How many of the users who use a high number of compliments do not have any fans?", "sql": "SELECT COUNT(T2.user_id) FROM Users_Compliments AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.number_of_compliments = 'High' AND T2.user_fans = 'None'", "source_tables": ["users", "users_compliments"]}, "evidence": "do not have fans refers to user_fans = 'None'; high number of compliment refers to number_of_compliments = 'High'"}
{"sample_id": 4107, "db_id": "public_review_platform", "final": {"question": "What is the most common type of compliments that a user has received from other users?", "sql": "SELECT T2.compliment_type FROM Users_Compliments AS T1 INNER JOIN Compliments AS T2 ON T1.compliment_id = T2.compliment_id GROUP BY T2.compliment_type ORDER BY COUNT(T2.compliment_type) DESC LIMIT 1", "source_tables": ["compliments", "users_compliments"]}, "evidence": "the most common type of compliments refers to MAX(COUNT(compliment_type))"}
{"sample_id": 4108, "db_id": "public_review_platform", "final": {"question": "How many stars does each of the 3 top users with the most likes in their reviews have?", "sql": "SELECT T2.user_average_stars FROM Tips AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id GROUP BY T2.user_id ORDER BY SUM(T1.likes) DESC LIMIT 3", "source_tables": ["users", "tips"]}, "evidence": "more likes mean this tip is more valuable; the most likes refers to MAX(likes); stars refers to users_average_stars"}
{"sample_id": 4109, "db_id": "public_review_platform", "final": {"question": "In which categories does the only business located in the city of Arcadia appear?", "sql": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.city = 'Arcadia'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "categories refers to category_name"}
{"sample_id": 4110, "db_id": "public_review_platform", "final": {"question": "List by their id all businesses that are open on Sunday.", "sql": "SELECT T1.business_id FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T1.day_id = 1", "source_tables": ["business_hours", "days"]}, "evidence": "day_of_week = 'Sunday'; open on Sunday refers to day_id = 1"}
{"sample_id": 4111, "db_id": "public_review_platform", "final": {"question": "How many businesses with music_karaoke attribute are closed?", "sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name = 'music_karaoke' AND T3.active = 'false' AND T2.attribute_value IN ('none', 'no', 'false')", "source_tables": ["attributes", "business_attributes", "business"]}, "evidence": "music_karaoke attribute refers to attribute_name = 'music_karaoke' AND attribute_value = 'true'; businesses are closed refers to active = 'false'"}
{"sample_id": 4112, "db_id": "public_review_platform", "final": {"question": "How many open businesses in the City of Phoenix have users left a long review?", "sql": "SELECT COUNT(DISTINCT T2.business_id) FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.review_length = 'Long' AND T2.active = 'true' AND T2.city = 'Phoenix'", "source_tables": ["reviews", "business"]}, "evidence": "open businesses refers to active = 'true'; long review refers to review_length = 'Long'"}
{"sample_id": 4113, "db_id": "public_review_platform", "final": {"question": "How many users who have received a low cool vote have also received at least 1 low cool vote for some of their reviews?", "sql": "SELECT COUNT(DISTINCT T1.user_id) FROM Users AS T1 INNER JOIN Reviews AS T2 ON T1.user_id = T2.user_id WHERE T1.user_votes_cool = 'Low' AND T2.review_votes_cool = 'Low'", "source_tables": ["users", "reviews"]}, "evidence": "low cool vote for user refers to user_votes_cool = 'Low';\u00a0 low cool vote for review refers to review_votes_cool = 'Low'"}
{"sample_id": 4114, "db_id": "public_review_platform", "final": {"question": "How many users with a long tip and 2 likes for their tip have a high number of fans?", "sql": "SELECT COUNT(DISTINCT T1.user_id) FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T2.tip_length = 'Long' AND T2.likes = 2 AND T1.user_fans = 'High'", "source_tables": ["users", "tips"]}, "evidence": "long tip refers to tip_length = 'Long'; 2 likes refers to likes = 2; high number of fans refers to user_fans = 'High'"}
{"sample_id": 4115, "db_id": "public_review_platform", "final": {"question": "In how many businesses with the ambience_trendy attribute?", "sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name = 'ambience_trendy' AND T2.attribute_value IN ('none', 'no', 'false')", "source_tables": ["attributes", "business_attributes"]}, "evidence": "ambience_trendy attribute refers to attribute_name = 'ambience_trendy' AND attribute_value = 'false'"}
{"sample_id": 4116, "db_id": "public_review_platform", "final": {"question": "How many businesses in the city of Scottsdale open on Sunday at 12PM?", "sql": "SELECT COUNT(DISTINCT T2.business_id) FROM Business AS T1 INNER JOIN Business_hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city = 'Scottsdale' AND T3.day_of_week = 'Sunday' AND T2.opening_time = '12PM'", "source_tables": ["business_hours", "days", "business"]}, "evidence": "businesses that opened on Sunday refers to day_of_week = 'Sunday'; businesses that opened at 12PM refers to opening_time = '12PM'"}
{"sample_id": 4117, "db_id": "public_review_platform", "final": {"question": "What is the average number of stars for businesses in the Obstetricians & Gynecologists category?", "sql": "SELECT CAST(SUM(T1.stars) AS REAL) / COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Obstetricians & Gynecologists'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "Obstetricians & Gynecologists category refers to category_name = 'Obstetricians & Gynecologists'; calculation = AVG(stars)"}
{"sample_id": 4118, "db_id": "public_review_platform", "final": {"question": "Calculate the percentage of users with a high number of fans who were elite in 2011.", "sql": "SELECT CAST(SUM(CASE WHEN T3.user_fans = 'High' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.user_fans) FROM Years AS T1 INNER JOIN Elite AS T2 ON T1.year_id = T2.year_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T1.actual_year = 2011", "source_tables": ["users", "elite", "years"]}, "evidence": "users with a high number of fans refers to user_fans = 'High'; 2011 refers to actual_year = 2011; Calculation = DIVIDE(Elite.user_id where user_fans = 'High' AND actual_year = 2011, Elite.user_id where actual_year = 2011) * 100"}
{"sample_id": 4119, "db_id": "public_review_platform", "final": {"question": "How many of the businesses are in Surprise?", "sql": "SELECT COUNT(business_id) FROM Business WHERE city = 'Surprise'", "source_tables": ["business"]}, "evidence": "Surprise is a city"}
{"sample_id": 4120, "db_id": "public_review_platform", "final": {"question": "List down the business ID with a high review count in Tempe.", "sql": "SELECT business_id FROM Business WHERE review_count = 'High' AND city = 'Tempe'", "source_tables": ["business"]}, "evidence": "Tempe is a city; high review count refers to review_count = 'High'"}
{"sample_id": 4121, "db_id": "public_review_platform", "final": {"question": "What is the total number of active businesses in AZ with a medium review count?", "sql": "SELECT COUNT(business_id) FROM Business WHERE review_count = 'Medium' AND state = 'AZ' AND active = 'true'", "source_tables": ["business"]}, "evidence": "active businesses refers to active = 'true'; AZ is a state; medium review count refers to review_count = 'Medium'"}
{"sample_id": 4122, "db_id": "public_review_platform", "final": {"question": "List down the business ID with a star range from 3 to 5, located at Chandler.", "sql": "SELECT business_id FROM Business WHERE stars >= 3 AND stars < 6 AND city = 'Chandler'", "source_tables": ["business"]}, "evidence": "businesses with a star range from 3 to 5 refers to stars BETWEEN 3 AND 5; Chandler is a city"}
{"sample_id": 4123, "db_id": "public_review_platform", "final": {"question": "In users yelping since 2009 to 2011, how many of them have low count of fans?", "sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year >= 2009 AND user_yelping_since_year < 2012 AND user_fans = 'Low'", "source_tables": ["users"]}, "evidence": "users in yelping since 2009 to 2011 refers to user_yelping_since_year BETWEEN 2009 AND 2011; low count of fans refers to user_fans = 'Low'"}
{"sample_id": 4124, "db_id": "public_review_platform", "final": {"question": "What is the review length of user 11021 to business with business ID 3?", "sql": "SELECT review_length FROM Reviews WHERE user_id = 11021 AND business_id = 3", "source_tables": ["reviews"]}, "evidence": "review length refers to review_length; user 11021 refers to user_id = 11021; business ID 3 refers to business_id = 3"}
{"sample_id": 4125, "db_id": "public_review_platform", "final": {"question": "Among the businesses in Tempe, list the attribute of the business with a medium review count.", "sql": "SELECT DISTINCT T3.attribute_name FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.city = 'Tempe' AND T1.review_count = 'Medium'", "source_tables": ["attributes", "business_attributes", "business"]}, "evidence": "Tempe is a city; high review count refers to review_count = 'High'"}
{"sample_id": 4126, "db_id": "public_review_platform", "final": {"question": "In businesses with a category of food, how many of them have a star rating below 3?", "sql": "SELECT COUNT(DISTINCT T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Food' AND T1.stars < 3", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "category of food refers to category_name = 'Food'; star rating below 3 refers to stars < 3"}
{"sample_id": 4127, "db_id": "public_review_platform", "final": {"question": "List the active business ID and its stars of the businesses fall under the category of Food.", "sql": "SELECT DISTINCT T1.business_id, T1.stars FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Food' AND T1.active = 'true'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "active business ID refers to active = 'true'; category of Food refers to category_name = 'Food'"}
{"sample_id": 4128, "db_id": "public_review_platform", "final": {"question": "What is the category and attributes of businesses with highest star rating?", "sql": "SELECT DISTINCT T3.category_name, T5.attribute_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id INNER JOIN Business_Attributes AS T4 ON T2.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.stars = ( SELECT MAX(stars) FROM Business )", "source_tables": ["attributes", "categories", "business_categories", "business_attributes", "business"]}, "evidence": "category of the business refers to category_name; attributes of the business refers to attribute_name; the highest star rating refers to MAX(stars)"}
{"sample_id": 4129, "db_id": "public_review_platform", "final": {"question": "What is the category of the business with short review length and highest review stars within business ID from 7 to 14?", "sql": "SELECT DISTINCT T3.category_name FROM Reviews AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T2.business_id >= 7 AND T2.business_id < 15 AND T1.review_length = 'Short' AND T1.review_stars = ( SELECT MAX(review_stars) FROM Reviews )", "source_tables": ["categories", "business_categories", "reviews"]}, "evidence": "category of the business refers to category_name; short review length refers to review_length = 'Short'; the highest star rating refers to MAX(stars); business ID from 7 to 14 refers to business_id BETWEEN 7 AND 14"}
{"sample_id": 4130, "db_id": "public_review_platform", "final": {"question": "Count the active businesses that has an attribute of BYOB with high review count.", "sql": "SELECT COUNT(DISTINCT T1.business_id) FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T3.attribute_name = 'BYOB' AND T1.review_count = 'High' AND T1.active = 'true'", "source_tables": ["attributes", "business_attributes", "business"]}, "evidence": "active business ID refers to active = 'true'; category of Food refers to category_name = 'Food'; attribute of BYOB refers to attribute_name = 'BYOB'; high review count refers to review_count = 'High'"}
{"sample_id": 4131, "db_id": "public_review_platform", "final": {"question": "What is the closing and opening time of businesses located at Glendale with highest star rating?", "sql": "SELECT T2.opening_time, T2.closing_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Glendale' ORDER BY T1.stars DESC LIMIT 1", "source_tables": ["business_hours", "business"]}, "evidence": "Glendale is a city; the highest star rating refers to MAX(stars)"}
{"sample_id": 4132, "db_id": "public_review_platform", "final": {"question": "Among the active businesses located at Goodyear, AZ, list the category and atrributes of business with a high review count.", "sql": "SELECT T3.category_name, T5.attribute_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id INNER JOIN Business_Attributes AS T4 ON T1.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.review_count = 'High' AND T1.city = 'Goodyear' AND T1.state = 'AZ' AND T1.active = 'true'", "source_tables": ["attributes", "categories", "business_categories", "business_attributes", "business"]}, "evidence": "active business ID refers to active = 'true'; Goodyear is a city; AZ is a state; high review count refers to review_count = 'High'"}
{"sample_id": 4133, "db_id": "public_review_platform", "final": {"question": "List the categories of active businesses in Glendale, AZ.", "sql": "SELECT DISTINCT T3.category_name FROM Business_Categories AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T1.category_id = T3.category_id WHERE T2.active = 'true' AND T2.state = 'AZ' AND T2.city = 'Glendale'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "active business ID refers to active = 'true'; categories refers to category_name; Glendale is a city; AZ is a state"}
{"sample_id": 4134, "db_id": "public_review_platform", "final": {"question": "Find the location of businesses that has business hours from 7 am to 7 pm every Wednesday.", "sql": "SELECT DISTINCT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.opening_time = '7AM' AND T2.closing_time = '7PM' AND T3.day_of_week = 'Wednesday'", "source_tables": ["business_hours", "days", "business"]}, "evidence": "location of business refers to city; business hours from 7am to 7pm refers to opening_time = '7AM' AND closing_time = '7PM'; Wednesday refers to day_of_week = 'Wednesday'"}
{"sample_id": 4135, "db_id": "public_review_platform", "final": {"question": "What is the attribute value of an active business with a low review count and 3 stars which is located at Goodyear, AZ?", "sql": "SELECT DISTINCT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.state = 'AZ' AND T1.city = 'Goodyear' AND T1.active = 'true' AND T1.stars = 3 AND T1.review_count = 'Low'", "source_tables": ["attributes", "business_attributes", "business"]}, "evidence": "active business ID refers to active = 'true'; low review count refers to review_count = 'Low'; 3 stars refers to stars = 3; Goodyear is a city; AZ is a state"}
{"sample_id": 4136, "db_id": "public_review_platform", "final": {"question": "What is the opening time of the active businesses in Glendale that have a medium review count.", "sql": "SELECT DISTINCT T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city = 'Glendale' AND T1.review_count = 'Medium' AND T1.active = 'true'", "source_tables": ["business_hours", "days", "business"]}, "evidence": "active business ID refers to active = 'true'; Glendale is a city; medium review count refers to review_count = 'Medium'"}
{"sample_id": 4137, "db_id": "public_review_platform", "final": {"question": "Among the businesses with a category of Food, what is the percentage of the business with greater than 3 stars?", "sql": "SELECT CAST(SUM(CASE WHEN T1.stars > 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.stars) FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Food'", "source_tables": ["categories", "business_categories", "business"]}, "evidence": "category of food refers to category_name = 'Food'; calculation = DIVIDE(COUNT(stars > 3), SUM(stars))"}
{"sample_id": 4138, "db_id": "public_review_platform", "final": {"question": "List the closing time and day of week of active businesses in Goodyear with stars greater than the 80% of average age of star rating.", "sql": "SELECT DISTINCT T2.closing_time, T3.day_of_week FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.active = 'true' AND T1.city = 'Goodyear' AND T1.stars > ( SELECT AVG(stars) * 0.8 FROM Business WHERE active = 'true' AND city = 'Goodyear' )", "source_tables": ["business_hours", "days", "business"]}, "evidence": "active business ID refers to active = 'true'; Goodyear is a city; Calculation = AVG(stars) * 0.8; businesses with stars greater than 80% of average star rating refers to stars > AVG(stars) * 0.8"}
{"sample_id": 4153, "db_id": "citeseer", "final": {"question": "Find the words cited in papers that are cited by sima01computational?", "sql": "SELECT DISTINCT T2.word_cited_id FROM cites AS T1 INNER JOIN content AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T1.citing_paper_id = 'sima01computational'", "source_tables": ["content", "cites"]}, "evidence": "paper cited by refers to citing_paper_id; citing_paper_id = 'sima01computational';"}
{"sample_id": 4154, "db_id": "citeseer", "final": {"question": "How many papers were cited by schmidt99advanced cited word3555?", "sql": "SELECT COUNT(T2.paper_id) FROM cites AS T1 INNER JOIN content AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T1.citing_paper_id = 'schmidt99advanced' AND T2.word_cited_id = 'word3555'", "source_tables": ["content", "cites"]}, "evidence": "paper cited by refers to citing_paper_id; citing_paper_id = 'schmidt99advanced';"}
{"sample_id": 4155, "db_id": "citeseer", "final": {"question": "Under what classification do the papers that cited word1163 belong?", "sql": "SELECT DISTINCT T1.class_label FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T2.word_cited_id = 'word1163'", "source_tables": ["paper", "content"]}, "evidence": ""}
{"sample_id": 4156, "db_id": "citeseer", "final": {"question": "Among the papers under DB classification, which paper has the highest number of words cited?", "sql": "SELECT T1.paper_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'DB' GROUP BY T1.paper_id ORDER BY COUNT(T2.word_cited_id) DESC LIMIT 1", "source_tables": ["paper", "content"]}, "evidence": "classification refers to class_label; class_label = 'DB';"}
{"sample_id": 4157, "db_id": "citeseer", "final": {"question": "In the papers classified as ML, how many cited butz01algorithmic?", "sql": "SELECT COUNT(T1.paper_id) FROM paper AS T1 INNER JOIN cites AS T2 ON T1.paper_id = T2.citing_paper_id WHERE T1.class_label = 'ML' AND T2.cited_paper_id = 'butz01algorithmic'", "source_tables": ["paper", "cites"]}, "evidence": "classification refers to class_label; paper cited by refers to citing_paper_id; citing_paper_id = 'butz01algorithmic';"}
{"sample_id": 4326, "db_id": "simpson_episodes", "final": {"question": "Sum up the votes from star 1 to 5 for all of the contestants in Blimp Award.", "sql": "SELECT T2.stars, SUM(T2.stars) FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.award_category = 'Blimp Award' AND T2.stars BETWEEN 1 AND 5 GROUP BY T2.stars;", "source_tables": ["vote", "award"]}, "evidence": "contestants refers to result = 'Winner' and result = 'Nominee'; in Blimp Award refers to award = 'Blimp Award'; star 1 to 5 refers to 1 < stars < 5"}
{"sample_id": 4327, "db_id": "simpson_episodes", "final": {"question": "Calculate the total rating of winners in OFTA Television Award and WGA Award (TV).", "sql": "SELECT SUM(T2.rating) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award_category IN ('Jupiter Award ', 'WGA Award (TV)');", "source_tables": ["episode", "award"]}, "evidence": "winners refers to result = 'Winner'; in OFTA Television Award and WGA Award (TV) refers to award = 'OFTA Television Award' and award = 'WGA Award (TV)'"}
{"sample_id": 4328, "db_id": "simpson_episodes", "final": {"question": "Out of the rating of 6.8 scored by title \"No Loan Again, Naturally\", how many percent of it consists of scores 5 to 10?", "sql": "SELECT SUM(T2.percent) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'No Loan Again, Naturally' AND T1.rating = 6.8 AND T2.stars BETWEEN 5 AND 10;", "source_tables": ["episode", "vote"]}, "evidence": "scores 5 to 10 refers to TOTAL(percent) where 1 < = stars < 5"}
{"sample_id": 4329, "db_id": "simpson_episodes", "final": {"question": "How many episodes have the star score greater than 8?", "sql": "SELECT COUNT(DISTINCT episode_id) FROM Vote WHERE stars > 8;", "source_tables": ["vote"]}, "evidence": "star score greater than 8 refers to stars > 8"}
{"sample_id": 4330, "db_id": "simpson_episodes", "final": {"question": "Which episode has the highest number of vote of the star score?", "sql": "SELECT episode_id FROM Vote ORDER BY votes DESC LIMIT 1;", "source_tables": ["vote"]}, "evidence": "highest number of vote of the star score refers to max(votes)"}
{"sample_id": 4331, "db_id": "simpson_episodes", "final": {"question": "How many episodes have the keyword \"2d animation\"?", "sql": "SELECT COUNT(episode_id) FROM Keyword WHERE keyword = '2d animation';", "source_tables": ["keyword"]}, "evidence": ""}
{"sample_id": 4332, "db_id": "simpson_episodes", "final": {"question": "Name the organization which hold the award id 328.", "sql": "SELECT organization FROM Award WHERE award_id = 328;", "source_tables": ["award"]}, "evidence": ""}
{"sample_id": 4333, "db_id": "simpson_episodes", "final": {"question": "How many awards had been held in 2009?", "sql": "SELECT COUNT(award_id) FROM Award WHERE SUBSTR(year, 1, 4) = '2009';", "source_tables": ["award"]}, "evidence": "had been held in 2009 refers to year = 2009"}
{"sample_id": 4334, "db_id": "simpson_episodes", "final": {"question": "How many awards classified as \"Primetime Emmy\" category?", "sql": "SELECT COUNT(award_id) FROM Award WHERE award_category = 'Primetime Emmy';", "source_tables": ["award"]}, "evidence": "category refers to award_category"}
{"sample_id": 4335, "db_id": "simpson_episodes", "final": {"question": "List out the birth name of crews who are co-executive producer and higher than 1.60 meters.", "sql": "SELECT T1.birth_name FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.role = 'co-executive producer' AND T1.height_meters > 1.60;", "source_tables": ["person", "award"]}, "evidence": "co-executive producer refers to role = 'co-executive producer'; higher than 1.60 meters refers to height_meters > 1.60"}
{"sample_id": 4336, "db_id": "simpson_episodes", "final": {"question": "Calculate the percentage of the nominees who were born in USA.", "sql": "SELECT CAST(SUM(CASE WHEN T1.birth_country = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.result = 'Nominee';", "source_tables": ["person", "award"]}, "evidence": "nominees refers to result = 'Nominee'; born in USA refers to birth_country = 'USA'; percentage = divide(sum(result = 'Nominee' and birth_country = 'USA'), count(Person.name)) * 100%"}
{"sample_id": 4337, "db_id": "simpson_episodes", "final": {"question": "Calculate the percentage of the winners who are higher than 1.75 meters.", "sql": "SELECT CAST(SUM(CASE WHEN T1.height_meters > 1.75 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.result = 'Winner';", "source_tables": ["person", "award"]}, "evidence": "winners refers to result = 'Winner'; higher than 1.75 meters refers to height_meters > 1.75; percentage = divide(sum(result = 'Winner' and height_meters > 1.75), count(result = 'Winner' )) * 100%\n"}
{"sample_id": 4338, "db_id": "simpson_episodes", "final": {"question": "List out the title of episodes which have star score of 2.", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 2;", "source_tables": ["episode", "vote"]}, "evidence": "star score of 2 refers to stars = 2"}
{"sample_id": 4339, "db_id": "simpson_episodes", "final": {"question": "List out the star scores of episode which has title of \"How the Test Was Won\".", "sql": "SELECT T2.stars FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'How the Test Was Won';", "source_tables": ["episode", "vote"]}, "evidence": "star scores refers to stars"}
{"sample_id": 4340, "db_id": "simpson_episodes", "final": {"question": "Among the episodes which have star score greater than 5, how many episodes have air date in 2008?", "sql": "SELECT COUNT(DISTINCT T2.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE strftime('%Y', T1.air_date) = '2008' AND T2.stars > 5;", "source_tables": ["episode", "vote"]}, "evidence": "star score greater than 5 refers to stars > 5; have air date in 2008 refers to air_date LIKE '2008%'"}
{"sample_id": 4341, "db_id": "simpson_episodes", "final": {"question": "List out the names of the awarded character in the awards held in 2009.", "sql": "SELECT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.year = 2009;", "source_tables": ["character_award", "award"]}, "evidence": "in 2009 refers to year = 2009; name of awarded character refers to character\n\n"}
{"sample_id": 4342, "db_id": "simpson_episodes", "final": {"question": "Which are the years that character Mr. Burns won an award?", "sql": "SELECT DISTINCT T1.year FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Mr. Burns';", "source_tables": ["character_award", "award"]}, "evidence": ""}
{"sample_id": 4343, "db_id": "simpson_episodes", "final": {"question": "What is the awarded category that the awarded character Lenny won?", "sql": "SELECT DISTINCT T1.award_category FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Lenny';", "source_tables": ["character_award", "award"]}, "evidence": "\n\nawarded category refers to award_category"}
{"sample_id": 4344, "db_id": "simpson_episodes", "final": {"question": "What is the name of actor who took the role Smithers?", "sql": "SELECT DISTINCT T1.person FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Smithers';", "source_tables": ["character_award", "award"]}, "evidence": "name refers to person; the role Smithers refers to character = 'Smithers'"}
{"sample_id": 4345, "db_id": "simpson_episodes", "final": {"question": "What are the keywords of the episode which has title as Dangerous Curves?", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Dangerous Curves';", "source_tables": ["episode", "keyword"]}, "evidence": ""}
{"sample_id": 4346, "db_id": "simpson_episodes", "final": {"question": "What are the keywords of the episodes which have the air date in 2008?", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.air_date, 1, 4) = '2008';", "source_tables": ["episode", "keyword"]}, "evidence": "have air date in 2008 refers to air_date LIKE '2008%'"}
{"sample_id": 4347, "db_id": "simpson_episodes", "final": {"question": "Among the episodes which have star score less than 8, how many episodes were aired in 2009?", "sql": "SELECT COUNT(DISTINCT T2.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE strftime('%Y', T1.air_date) = '2009' AND T2.stars < 8;", "source_tables": ["episode", "vote"]}, "evidence": "star score less than 8 refers to stars < 8; aired in 2009 refers to air_date LIKE '2009%'"}
{"sample_id": 4348, "db_id": "simpson_episodes", "final": {"question": "State the birth name of crews who are director and have birth country in South Korea.", "sql": "SELECT T1.birth_name FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.role = 'director' AND T1.birth_country = 'South Korea';", "source_tables": ["person", "award"]}, "evidence": "director refers to role = 'director'"}
{"sample_id": 4349, "db_id": "simpson_episodes", "final": {"question": "How many awards did simpson 20 won in 2009?", "sql": "SELECT COUNT(award_id) FROM Award WHERE SUBSTR(year, 1, 4) = '2009' AND result = 'Winner';", "source_tables": ["award"]}, "evidence": "won refers to result = 'Winner'; in 2009 refers to year = 2009"}
{"sample_id": 4350, "db_id": "simpson_episodes", "final": {"question": "What is the total number of episode with a rating below 7?", "sql": "SELECT COUNT(episode_id) FROM Episode WHERE rating < 7;", "source_tables": ["episode"]}, "evidence": "rating below 7 refers to rating < 7"}
{"sample_id": 4351, "db_id": "simpson_episodes", "final": {"question": "List down the names of person born in California, USA.", "sql": "SELECT name FROM Person WHERE birth_region = 'California' AND birth_country = 'USA';", "source_tables": ["person"]}, "evidence": "California refers to birth_region = 'California'; USA refers to birth_country = 'USA'"}
{"sample_id": 4352, "db_id": "simpson_episodes", "final": {"question": "In between the episode 5 and10 of season 2, how many of them are credited for casting?", "sql": "SELECT COUNT(credited) FROM Credit WHERE episode_id IN ( 'S20-E5',  'S20-E6',  'S20-E7',  'S20-E8',  'S20-E9',  'S20-E10' ) AND credited = 'true' AND role = 'casting';", "source_tables": ["credit"]}, "evidence": "between the episode 5 and 10 of season 20 refers to episode_id IN('S20-E5', 'S20-E6', 'S20-E7', 'S20-E8', 'S20-E9', 'S20-E10'); credited refers to credited = 'true'; for casting refers to role = 'casting'"}
{"sample_id": 4353, "db_id": "simpson_episodes", "final": {"question": "What is the episode ID that received 2 stars and 9 votes?", "sql": "SELECT episode_id FROM Vote WHERE stars = 2 AND votes = 9;", "source_tables": ["vote"]}, "evidence": "2 stars refers to stars = 2; 9 votes refers to votes = 9"}
{"sample_id": 4354, "db_id": "simpson_episodes", "final": {"question": "Give the title of the episode won in Primetime Emmy Awards 2009.", "sql": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.organization = 'Primetime Emmy Awards' AND T1.year = 2009 AND T1.result = 'Winner';", "source_tables": ["episode", "award"]}, "evidence": "won refers to result = 'Winner'; in Primetime Emmy Awards refers to organization = 'Primetime Emmy Awards'; 2009 refers to year = 2009"}
{"sample_id": 4355, "db_id": "simpson_episodes", "final": {"question": "List down the episode ID of episodes aired in 2008 with 5 stars and below.", "sql": "SELECT DISTINCT T1.episode_id FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 4) = '2008' AND T2.stars < 5;", "source_tables": ["episode", "vote"]}, "evidence": "aired in 2008 refers to air_date LIKE '2008%'; 5 stars and below refers to stars < 5"}
{"sample_id": 4356, "db_id": "simpson_episodes", "final": {"question": "Among the episode with highest votes, what is the category credited to Carlton Batten?", "sql": "SELECT T2.category FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.person = 'Carlton Batten' AND T2.credited = 'true' ORDER BY T1.votes DESC LIMIT 1;", "source_tables": ["episode", "credit"]}, "evidence": "highest votes refers to max(votes); to Carlton Batten refers to person = 'Carlton Batten'"}
{"sample_id": 4357, "db_id": "simpson_episodes", "final": {"question": "Among the episodes aired in 2008 with votes ranges from 920 to 950, list their percent.", "sql": "SELECT T2.percent FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 4) = '2008' AND T1.votes BETWEEN 950 AND 960;", "source_tables": ["episode", "vote"]}, "evidence": "aired in 2008 refers to air_date LIKE '2008%'; votes ranges from 920 to 950 refers to votes BETWEEN 920 AND 950"}
{"sample_id": 4358, "db_id": "simpson_episodes", "final": {"question": "List the episode ID and title of episode where casting was credited to Bonita Pietila.", "sql": "SELECT T1.episode_id, T1.title FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.credited = 'true' AND T2.person = 'Bonita Pietila' AND T2.role = 'casting';", "source_tables": ["episode", "credit"]}, "evidence": "was credited refers to credited = 'true'; to Bonita Pietila refers to person = 'Bonita Pietila'"}
{"sample_id": 4359, "db_id": "simpson_episodes", "final": {"question": "In episode nominated in Annie Awards, how many of the episodes have a percent greater than 6?", "sql": "SELECT COUNT(*) FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.organization = 'Annie Awards' AND T1.result = 'Nominee' AND T2.percent > 6;", "source_tables": ["vote", "award"]}, "evidence": "nominated refers to result = 'Nominee'; Annie Awards refers to organization = 'Annie Awards'; percent greater than 6 refers to percent > 6"}
{"sample_id": 4360, "db_id": "simpson_episodes", "final": {"question": "What is the title of episode nominated for WGA Award (TV) with votes greater than 1000?", "sql": "SELECT DISTINCT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.votes > 1000 AND T1.award_category = 'WGA Award (TV)' AND T1.result = 'Nominee';", "source_tables": ["episode", "award"]}, "evidence": "nominated refers to result = 'Nominee'; WGA Award (TV) refers to award_category = 'WGA Award (TV)'; votes greater than 1000 refers to votes > 1000"}
{"sample_id": 4361, "db_id": "simpson_episodes", "final": {"question": "Among the people in Animation Department, who are credited for additional time in the episode titled by \"How the Test Was Won\"?", "sql": "SELECT T2.person FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'How the Test Was Won' AND T2.role = 'additional timer' AND T2.credited = 'true' AND T2.category = 'Animation Department';", "source_tables": ["episode", "credit"]}, "evidence": "Animation Department refers to category = 'Animation Department'; credited refers to credited = 'true'; for additional timer refers to role = 'additional timer'"}
{"sample_id": 4362, "db_id": "simpson_episodes", "final": {"question": "List the stars of episodes aired in November 2008.", "sql": "SELECT T2.stars FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 7) = '2008-11';", "source_tables": ["episode", "vote"]}, "evidence": "in November 2008 refers to air_date LIKE '2008-11%'"}
{"sample_id": 4363, "db_id": "simpson_episodes", "final": {"question": "What is the title of episode with 5 stars and nominated for Prism Award which is aired on April 19, 2009?", "sql": "SELECT T3.title FROM Award AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE T3.air_date = '2009-04-19' AND T1.award_category = 'Prism Award' AND T2.stars = 5 AND T1.result = 'Nominee';", "source_tables": ["vote", "episode", "award"]}, "evidence": "5 stars refers to stars = 5; nominated refers to result = 'Nominee'; Prism Award refers to award_category = 'Prism Award'; on April 19 2009 refers to air_date = '2009-04-19'"}
{"sample_id": 4364, "db_id": "simpson_episodes", "final": {"question": "In episode with the highest votes, list the category of awards it is nominated for.", "sql": "SELECT T1.award_category FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.result = 'Nominee' ORDER BY T2.votes DESC LIMIT 1;", "source_tables": ["episode", "award"]}, "evidence": "highest votes refers to max(votes); nominated refers to result = 'Nominee'"}
{"sample_id": 4365, "db_id": "simpson_episodes", "final": {"question": "In episodes aired in 2009, how many of them are credited to Sam Im for additional timer?", "sql": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.credited = 'true' AND T2.person = 'Sam Im' AND SUBSTR(T1.air_date, 1, 4) = '2009' AND T2.role = 'additional timer';", "source_tables": ["episode", "credit"]}, "evidence": "in 2009 refers to air_date LIKE '2009%'; credited refers to credited = 'true'; Sam Im refers to person = 'Sam Im'; for additional timer refers to role = 'additional timer'"}
{"sample_id": 4366, "db_id": "simpson_episodes", "final": {"question": "List the title of the episode with stars greater than the 70% of average stars of all episodes.", "sql": "SELECT DISTINCT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars > 0.7 * ( SELECT AVG(stars) FROM Vote );", "source_tables": ["episode", "vote"]}, "evidence": "stars greater than the 70% of average stars refers to stars > multiply(avg(stars), 0.7)"}
{"sample_id": 4367, "db_id": "simpson_episodes", "final": {"question": "In year 2009, what is the percentage of the episode titled by \"Gone Maggie Gone\" being nominated?", "sql": "SELECT CAST((SUM(CASE WHEN T1.result = 'Nominee' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.result = 'Winner' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.result) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.title = 'Gone Maggie Gone' AND T1.year = 2009;", "source_tables": ["episode", "award"]}, "evidence": "being nominated refers to result = 'Nominee'; percentage = divide(count(result = 'Nominee'), count(result)) * 100%"}
{"sample_id": 4529, "db_id": "student_loan", "final": {"question": "Calculate the ratio of disabled students who have never been absent from school.", "sql": "SELECT 100 * SUM(IIF(T2.month = 0, 1, 0)) AS num FROM disabled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "ratio = MULTIPLY(DIVIDE(SUM(month = 0), COUNT(disabled.name)), 100); never been absent from school refers to month = 0;"}
{"sample_id": 4530, "db_id": "student_loan", "final": {"question": "How many students in the Air Force?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'air_force'", "source_tables": ["enlist"]}, "evidence": "Air Force refers to organ = 'air_force';"}
{"sample_id": 4531, "db_id": "student_loan", "final": {"question": "How many students have been absent less than 4 months?", "sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month < 4", "source_tables": ["longest_absense_from_school"]}, "evidence": "absent less than 4 months refers to month < 4;"}
{"sample_id": 4532, "db_id": "student_loan", "final": {"question": "Count the number of female students who belong to marines organization.", "sql": "SELECT COUNT(*) FROM person AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T1.name = T3.name WHERE T2.organ = 'marines' AND T3.name IS NULL", "source_tables": ["person", "male", "enlist"]}, "evidence": "female students refers to enlist.name who are NOT in male.name; organization refers to organ; organ = 'marines';"}
{"sample_id": 4533, "db_id": "student_loan", "final": {"question": "Calculate the average duration of absense of female students.", "sql": "SELECT AVG(T2.month) FROM person AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T1.name = T3.name WHERE T3.name IS NULL", "source_tables": ["person", "male", "longest_absense_from_school"]}, "evidence": "average duration = DIVIDE(SUM(month), COUNT(longest_absence_from_school.name which are NOT in male.name)); female students refers to longest_absence_from_school.name who are NOT in male.name;"}
{"sample_id": 4534, "db_id": "student_loan", "final": {"question": "State name of female students who filed for bankruptcy.", "sql": "SELECT T1.name FROM person AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T1.name = T3.name WHERE T3.name IS NULL", "source_tables": ["filed_for_bankrupcy", "person", "male"]}, "evidence": "female students refers to filed_for_bankrupcy.name who are NOT in male.name;"}
{"sample_id": 4535, "db_id": "student_loan", "final": {"question": "Mention the status of payment of student 299.", "sql": "SELECT bool FROM no_payment_due WHERE name = 'student299'", "source_tables": ["no_payment_due"]}, "evidence": "status of payment is mentioned in no_payment_due; bool = 'pos' means the student has payment due; bool = 'neg' means the student has no payment due; student299 is a name of student;"}
{"sample_id": 4536, "db_id": "student_loan", "final": {"question": "How many students are enlisted to the air force?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'air_force'", "source_tables": ["enlist"]}, "evidence": "Air Force refers to organ = 'air_force';"}
{"sample_id": 4537, "db_id": "student_loan", "final": {"question": "How many students have absent from school?", "sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month > 1", "source_tables": ["longest_absense_from_school"]}, "evidence": "have absent from school refers to month > 1;"}
{"sample_id": 4538, "db_id": "student_loan", "final": {"question": "Provide the names of the students enlisted in the fire department.", "sql": "SELECT name FROM enlist WHERE organ = 'fire_department'", "source_tables": ["enlist"]}, "evidence": "department refers to organ; organ = 'fire_department';"}
{"sample_id": 4539, "db_id": "student_loan", "final": {"question": "How many disabled students have payment due?", "sql": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.bool = 'pos'", "source_tables": ["disabled", "no_payment_due"]}, "evidence": "payment due refers to bool = 'pos';"}
{"sample_id": 4540, "db_id": "student_loan", "final": {"question": "Among the students that filed for bankruptcy, how many of them have been enrolled in OCC?", "sql": "SELECT COUNT(T1.name) FROM filed_for_bankrupcy AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name WHERE T2.school = 'occ'", "source_tables": ["filed_for_bankrupcy", "enrolled"]}, "evidence": "OCC refers to school = 'occ';"}
{"sample_id": 4541, "db_id": "student_loan", "final": {"question": "How many disabled students are male?", "sql": "SELECT COUNT(T1.name) FROM male AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name", "source_tables": ["disabled", "male"]}, "evidence": "male students are mentioned in male.name;"}
{"sample_id": 4542, "db_id": "student_loan", "final": {"question": "List the names of disabled students enlisted in the navy.", "sql": "SELECT T1.name FROM enlist AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.organ = 'navy'", "source_tables": ["disabled", "enlist"]}, "evidence": "navy refers to organ = 'navy';"}
{"sample_id": 4543, "db_id": "student_loan", "final": {"question": "Among the male students, list down the names of students with payment due.", "sql": "SELECT T1.name FROM male AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T2.bool = 'pos'", "source_tables": ["male", "no_payment_due"]}, "evidence": "male students are mentioned in male.name; with payment due refers to bool = 'pos';"}
{"sample_id": 4544, "db_id": "student_loan", "final": {"question": "What is the employment and payment status of student110?", "sql": "SELECT T1.bool FROM no_payment_due AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name WHERE T1.name = 'student110'", "source_tables": ["unemployed", "no_payment_due"]}, "evidence": "employment status is mentioned in unemployment; unemployed.name = 'student110' means the student is unemployed; if 'student110' can not be found in unemployed.name, it means the student is employed; payment status is mentioned in no_payment_due; bool = 'pos' means the student has payment due; bool = 'neg' means the student has no payment due; student110 is a name of student;"}
{"sample_id": 4545, "db_id": "student_loan", "final": {"question": "Among all students, calculate the percentage of male students.", "sql": "SELECT CAST(COUNT(T2.name) AS REAL) * 100 / COUNT(T1.name) FROM person AS T1 LEFT JOIN male AS T2 ON T1.name = T2.name", "source_tables": ["person", "male"]}, "evidence": "percentage = MULTIPLY(DIVIDE(COUNT(male.name), COUNT(person.name)), 100); male students are mentioned in male.name;"}
{"sample_id": 4546, "db_id": "student_loan", "final": {"question": "What is the school and gender of student34?", "sql": "SELECT T1.school , IIF(T3.name IS NULL, 'female', 'male') AS gender FROM enrolled AS T1 INNER JOIN person AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name WHERE T2.name = 'student34'", "source_tables": ["enrolled", "person", "male"]}, "evidence": "male.name = 'student34' means student34's gender is male; if 'student34' can't be found in 'male.name', it means student34 is female; student34 is a name of student;"}
{"sample_id": 4547, "db_id": "student_loan", "final": {"question": "List the longest duration of absense for a student enlisted in the fire department.", "sql": "SELECT T1.month FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'fire_department' ORDER BY T1.month DESC LIMIT 1", "source_tables": ["longest_absense_from_school", "enlist"]}, "evidence": "longest duration of absence refers to MAX(month); department refers to organ; organ = 'fire_department';"}
{"sample_id": 4548, "db_id": "student_loan", "final": {"question": "Among students with 1 month of absenses, how many of them are enlisted in the air force department?", "sql": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T1.month = 1 AND T2.organ = 'air_force'", "source_tables": ["longest_absense_from_school", "enlist"]}, "evidence": "1 month of absences refers to month = 1; department refers to organ; organ = 'air_force';"}
{"sample_id": 4549, "db_id": "student_loan", "final": {"question": "Provide the name of disabled male students that are unemployed.", "sql": "SELECT T2.NAME FROM unemployed AS T1 INNER JOIN male AS T2 ON T1.name = T2.name INNER JOIN disabled AS T3 ON T3.name = T2.name", "source_tables": ["unemployed", "disabled", "male"]}, "evidence": "disabled male students that are unemployed refers to unemployed.name = male.name = disabled.name;"}
{"sample_id": 4550, "db_id": "student_loan", "final": {"question": "How many male students are enrolled at OCC?", "sql": "SELECT COUNT(T1.name) FROM enrolled AS T1 INNER JOIN male AS T2 ON T1.name = T2.name WHERE T1.school = 'occ'", "source_tables": ["enrolled", "male"]}, "evidence": "male students are mentioned in male.name; OCC refers to school = 'occ';"}
{"sample_id": 4551, "db_id": "student_loan", "final": {"question": "Among the students enrolled in UCLA, what is the percentage of male students in the air force department?", "sql": "SELECT CAST(COUNT(T4.name) AS REAL) * 100 / COUNT(T2.name) FROM enlist AS T1 INNER JOIN person AS T2 ON T1.name = T2.name INNER JOIN enrolled AS T3 ON T3.name = T2.name LEFT JOIN male AS T4 ON T2.name = T4.name WHERE T3.school = 'ucla' AND T1.organ = 'air_force'", "source_tables": ["enrolled", "person", "male", "enlist"]}, "evidence": "UCLA refers to school = 'ucla'; percentage = MULTIPLY(DIVIDE(COUNT(male.name), COUNT(person.name)), 100); male students are mentioned in male.name; department refers to organ; organ = 'air_force';"}
{"sample_id": 4552, "db_id": "student_loan", "final": {"question": "Calculate the average number of disabled female students enrolled in UCI.", "sql": "SELECT CAST(SUM(IIF(T1.school = 'uci' AND T4.name IS NULL, 1, 0)) AS REAL) / COUNT(T1.name) FROM enrolled AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name INNER JOIN person AS T3 ON T1.name = T3.name LEFT JOIN male AS T4 ON T3.name = T4.name", "source_tables": ["enrolled", "disabled", "male", "person"]}, "evidence": "average = DIVIDE(SUM(disabled.name who are not in male.name WHERE school = 'uci'), COUNT(enrolled.name)); female students refers to disabled.name who are NOT in male.name; UCI refers to school = 'uci';"}
{"sample_id": 4553, "db_id": "student_loan", "final": {"question": "How many students have never been absent in school?", "sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 0", "source_tables": ["longest_absense_from_school"]}, "evidence": "never been absent in school refers to month = 0;"}
{"sample_id": 4554, "db_id": "student_loan", "final": {"question": "What are the names of the students who joined the Marines?", "sql": "SELECT name FROM enlist WHERE organ = 'marines'", "source_tables": ["enlist"]}, "evidence": "Marines refers to organ = 'marines';"}
{"sample_id": 4555, "db_id": "student_loan", "final": {"question": "How many students enlisted in the Navy?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'navy'", "source_tables": ["enlist"]}, "evidence": "Navy refers to organ = 'navy';"}
{"sample_id": 4556, "db_id": "student_loan", "final": {"question": "What is the name of the student with the longest duration of absence?", "sql": "SELECT name FROM longest_absense_from_school WHERE month = ( SELECT MAX(month) FROM longest_absense_from_school )", "source_tables": ["longest_absense_from_school"]}, "evidence": "longest duration of absence refers to MAX(month);"}
{"sample_id": 4557, "db_id": "student_loan", "final": {"question": "What is the name of the organization which most of the students are enlisted in?", "sql": "SELECT organ FROM ( SELECT organ, COUNT(organ) AS num FROM enlist GROUP BY organ ) T ORDER BY T.num DESC LIMIT 1", "source_tables": ["enlist"]}, "evidence": "name of the organization refers to organ; organization which most of the students are enlisted in refers to MAX(COUNT(organ));"}
{"sample_id": 4558, "db_id": "student_loan", "final": {"question": "How many students have absences of no more than 3 months?", "sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month < 3", "source_tables": ["longest_absense_from_school"]}, "evidence": "absences of no more than 3 months refers to month < 3;"}
{"sample_id": 4559, "db_id": "student_loan", "final": {"question": "Among the students that have a payment due, how many students are unemployed?", "sql": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name WHERE T1.bool = 'pos'", "source_tables": ["unemployed", "no_payment_due"]}, "evidence": "students that have a payment due refers to bool = 'pos';"}
{"sample_id": 4560, "db_id": "student_loan", "final": {"question": "How many female students have enlisted for the Army?", "sql": "SELECT SUM(IIF(T3.name IS NULL, 1, 0)) AS 'result' FROM enlist AS T1 INNER JOIN person AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name WHERE T1.organ = 'army'", "source_tables": ["person", "male", "enlist"]}, "evidence": "female students refers to enlist.name who are NOT in male.name; Army refers to organ = 'army';"}
{"sample_id": 4561, "db_id": "student_loan", "final": {"question": "Which organization has the least number of male students?", "sql": "SELECT T.organ FROM ( SELECT T2.organ, COUNT(T1.name) AS num FROM male AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name GROUP BY T2.organ ) T ORDER BY T.num LIMIT 1", "source_tables": ["male", "enlist"]}, "evidence": "organization refers to organ; male students are mentioned in male.name; least number of male students refers to MIN(male.name);"}
{"sample_id": 4562, "db_id": "student_loan", "final": {"question": "How many disabled students have zero absences?", "sql": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name WHERE T2.month = 0", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "zero absences refers to month = 0;"}
{"sample_id": 4563, "db_id": "student_loan", "final": {"question": "How many of the unemployed students are disabled?", "sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name", "source_tables": ["unemployed", "disabled"]}, "evidence": ""}
{"sample_id": 4564, "db_id": "student_loan", "final": {"question": "List the names of the disabled students who were absent from school for more than 5 months.", "sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.month > 5", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "absent for more than 5 months refers to month > 5;"}
{"sample_id": 4565, "db_id": "student_loan", "final": {"question": "How many bankrupt students are there in the Marines?", "sql": "SELECT COUNT(T1.name) FROM filed_for_bankrupcy AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'marines'", "source_tables": ["filed_for_bankrupcy", "enlist"]}, "evidence": "Marines refers to organ = 'marines';"}
{"sample_id": 4566, "db_id": "student_loan", "final": {"question": "Among the students who filed for bankruptcy, how many students are disabled?", "sql": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name", "source_tables": ["filed_for_bankrupcy", "disabled"]}, "evidence": ""}
{"sample_id": 4567, "db_id": "student_loan", "final": {"question": "How many months did a student in the Air Force miss school the most?", "sql": "SELECT T1.month FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name ORDER BY T1.month DESC LIMIT 1", "source_tables": ["longest_absense_from_school", "enlist"]}, "evidence": "Air Force refers to organ = 'air_force'; number of months a student miss school the most refers to MAX(COUNT(month));"}
{"sample_id": 4568, "db_id": "student_loan", "final": {"question": "Among the students who filed for bankruptcy with an absence in school of no more than 6 months, how many students enlisted for the fire department?", "sql": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name INNER JOIN enlist AS T3 ON T3.name = T2.name WHERE T3.organ = 'fire_department'", "source_tables": ["filed_for_bankrupcy", "longest_absense_from_school", "enlist"]}, "evidence": "absence of no more than 6 months refers to month < 6; department refers to organ; organ = 'fire_department';"}
{"sample_id": 4569, "db_id": "student_loan", "final": {"question": "How many employed disabled students have zero absences?", "sql": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name INNER JOIN unemployed AS T3 ON T3.name = T2.name WHERE T1.month = 0", "source_tables": ["unemployed", "disabled", "longest_absense_from_school"]}, "evidence": "employed students refers to disabled.name who are NOT in unemployed.name; zero absences refers to month = 0;"}
{"sample_id": 4570, "db_id": "student_loan", "final": {"question": "Which organization has the highest number of male students? Calculate for the percentage of the male students in the said organization.", "sql": "SELECT T.organ, T.per FROM ( SELECT T1.organ, CAST(COUNT(T3.name) AS REAL) / COUNT(T2.name) AS per , COUNT(T3.name) AS num FROM enlist AS T1 INNER JOIN person AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name GROUP BY T1.organ ) T ORDER BY T.num DESC LIMIT 1", "source_tables": ["person", "male", "enlist"]}, "evidence": "organization refers to organ; highest number of male students refers to MAX(COUNT(male.name)); percentage = DIVIDE(COUNT(male.name), COUNT(person.name)), 1.0;"}
{"sample_id": 4611, "db_id": "mental_health_survey", "final": {"question": "What was the percentage for the answer of \"Yes\" was given to the question \"Has your employer ever formally discussed mental health (for example, as part of a wellness campaign or other official communication)?\"?", "sql": "SELECT CAST(SUM(CASE  WHEN T1.AnswerText LIKE 'Yes' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'Has your employer ever formally discussed mental health (for example, as part of a wellness campaign or other official communication)?'", "source_tables": ["answer", "question"]}, "evidence": "percentage = divide(count(QuestionID = 15& AnswerText = 'Yes'), count(QuestionID = 15))*100%"}
{"sample_id": 4612, "db_id": "mental_health_survey", "final": {"question": "How many times more for the number of users who took the \"mental health survey for 2017\" than \"mental health survey for 2018\"?", "sql": "SELECT CAST(COUNT(T1.UserID) AS REAL) / ( SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2018' ) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2017'", "source_tables": ["answer", "survey"]}, "evidence": "How many times more = subtract(count(UserID(SurveyID = 2017)), count(UserID(SurveyID = 2018)))"}
{"sample_id": 4613, "db_id": "mental_health_survey", "final": {"question": "Among respondents who participated in the survey in 2016, what percentage had a mental health disorder in the past?", "sql": "SELECT CAST(SUM(CASE  WHEN T1.AnswerText LIKE 'Yes' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.SurveyID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.QuestionID = 32 AND T1.SurveyID = 2016", "source_tables": ["answer", "question"]}, "evidence": "respondents and 'users' are synonyms; percentage = divide(count(SurveyID = 2016& QuestionID = 32 & AnswerText = 'Yes'), count(SurveyID = 2016& QuestionID = 32))*100%"}
{"sample_id": 4614, "db_id": "mental_health_survey", "final": {"question": "How many respondents younger than 25 years old did participate in the survey in 2016?", "sql": "SELECT COUNT(DISTINCT T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.QuestionID = 1 AND T1.SurveyID = 2016 AND T1.AnswerText <= 25", "source_tables": ["answer", "question"]}, "evidence": "respondents' and 'users' are synonyms; younger than 25 years old refers to AnswerText(SurveyID = 2016& QuestionID = 1)< 25"}
{"sample_id": 4615, "db_id": "mental_health_survey", "final": {"question": "What is the average number of respondents per survey between 2014 and 2019?", "sql": "SELECT CAST(COUNT(SurveyID) AS REAL) / 5 FROM Answer WHERE SurveyID BETWEEN 2014 AND 2019", "source_tables": ["answer"]}, "evidence": "respondents and 'users' are synonyms; average number = avg(count(userID(SurveyID = 2014)), count(userID(SurveyID = 2019)))"}
{"sample_id": 4616, "db_id": "mental_health_survey", "final": {"question": "How many respondents who participated in the survey in 2019 have ever sought treatment for a mental health disorder from a mental health professional?", "sql": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.QuestionID = 7 AND T1.SurveyID = 2019 AND T1.AnswerText = 1", "source_tables": ["answer", "question"]}, "evidence": "respondents' and 'users' are synonyms, have ever sought treatment for a mental health disorder from a mental health professional refers to AnswerText(SurveyID = 2019& QuestionID = 7) = 1"}
{"sample_id": 4617, "db_id": "mental_health_survey", "final": {"question": "How many respondents who participated in the survey in 2014 work remotely at least 50% of the time?", "sql": "SELECT COUNT(T1.AnswerText) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.QuestionID = 93 AND T1.SurveyID = 2014 AND T1.AnswerText = 'Yes'", "source_tables": ["answer", "question"]}, "evidence": "respondents' and 'users' are synonyms; work remotely at least 50% of the time refers to AnswerText(SurveyID = 2014& QuestionID = 93) = 'Yes'"}
{"sample_id": 4618, "db_id": "mental_health_survey", "final": {"question": "How many questions were asked in the questionary for the mental health survey?", "sql": "SELECT COUNT(questiontext) FROM Question", "source_tables": ["question"]}, "evidence": ""}
{"sample_id": 4619, "db_id": "mental_health_survey", "final": {"question": "How many respondents of the mental health survey were diagnosed with 'Substance Use Disorder'?", "sql": "SELECT COUNT(AnswerText) FROM Answer WHERE AnswerText LIKE 'Substance Use Disorder'", "source_tables": ["answer"]}, "evidence": "respondents' and 'users' are synonyms"}
{"sample_id": 4620, "db_id": "mental_health_survey", "final": {"question": "List the top three popular responses to the question of the survey in 2017 with the question ID no.85.", "sql": "SELECT AnswerText FROM Answer WHERE QuestionID = 85 AND SurveyID = 2017 GROUP BY AnswerText ORDER BY COUNT(AnswerText) DESC LIMIT 3", "source_tables": ["answer"]}, "evidence": "\n\nsurvey in 2017 refers to SurveyID = 2017; questionID = 85; MAX(COUNT(AnswerText))"}
{"sample_id": 4713, "db_id": "disney", "final": {"question": "List all the main characters of the movie that are comedy genre.", "sql": "SELECT T2.hero FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title WHERE T1.genre = 'Comedy'", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "Comedy refers to genre = 'Comedy'; the main character of the movie refers to hero;"}
{"sample_id": 4714, "db_id": "disney", "final": {"question": "Provide the names of voice actors for the characters of films directed by Wolfgang Reitherman.", "sql": "SELECT T2.hero, T1.'voice-actor' FROM 'voice-actors' AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title INNER JOIN director AS T3 ON T3.name = T2.movie_title WHERE T3.director = 'Wolfgang Reitherman'", "source_tables": ["voice-actors", "characters", "director"]}, "evidence": "Wolfgang Reitherman refers to director = 'Wolfgang Reitherman';"}
{"sample_id": 4715, "db_id": "disney", "final": {"question": "What genre of movie has Taran as the main character?", "sql": "SELECT T1.genre FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title WHERE T2.hero = 'Taran'", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "Taran is the main character of the movie which refers to hero = 'Taran';"}
{"sample_id": 4716, "db_id": "disney", "final": {"question": "The main character Elsa is voiced by which actor and who is the director of the movie?", "sql": "SELECT T1.'voice-actor', T3.director FROM 'voice-actors' AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title INNER JOIN director AS T3 ON T2.movie_title = T3.name WHERE T2.hero = 'Elsa'", "source_tables": ["voice-actors", "characters", "director"]}, "evidence": "Elsa is the main character of the movie which refers to hero = 'Elsa'; voiced by which actor refers to voice-actor;"}
{"sample_id": 4717, "db_id": "disney", "final": {"question": "Calculate the percentage of directors whose films grossed over $100 million.", "sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) > 100000000 THEN T3.director ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T3.director) FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title INNER JOIN director AS T3 ON T1.movie_title = T3.name", "source_tables": ["director", "movies_total_gross", "characters"]}, "evidence": "DIVIDE(COUNT(director where total_gross > 100000000), COUNT(director)) as percentage;"}
{"sample_id": 4718, "db_id": "disney", "final": {"question": "Calculate the percentage of voice actors whose main character in the movie is in the Drama genre.", "sql": "SELECT CAST(COUNT(CASE WHEN T1.genre = 'Drama' THEN T3.'voice-actor' ELSE NULL END) AS REAL) * 100 / COUNT(T3.'voice-actor') FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title INNER JOIN 'voice-actors' AS T3 ON T3.movie = T1.movie_title", "source_tables": ["voice-actors", "movies_total_gross", "characters"]}, "evidence": "DIVIDE(COUNT(voice-actor where genre = 'Drama'), COUNT(voice-actor)) as percentage;"}
{"sample_id": 4719, "db_id": "disney", "final": {"question": "Name the first movie released by Disney.", "sql": "SELECT movie_title FROM characters ORDER BY SUBSTR(release_date, LENGTH(release_date) - 1, LENGTH(release_date)) ASC LIMIT 1", "source_tables": ["characters"]}, "evidence": "The first movie released refers to movie_title where substr(release_date, length(release_date) - 1, length(release_date)) asc limit 1;"}
{"sample_id": 4720, "db_id": "disney", "final": {"question": "How many movies were released by Disney between 2010 and 2016?", "sql": "SELECT COUNT(movie_title) FROM characters WHERE SUBSTR(release_date, LENGTH(release_date) - 1, LENGTH(release_date)) BETWEEN '10' AND '16'", "source_tables": ["characters"]}, "evidence": "Movies refer to movie_title; released between 2010 and 2016 refers to substr(release_date, length(release_date) - 1, length(release_date)) between '10' and '16';"}
{"sample_id": 4721, "db_id": "disney", "final": {"question": "Who was the first ever Disney villain?", "sql": "SELECT villian FROM characters ORDER BY SUBSTR(release_date, LENGTH(release_date) - 1, LENGTH(release_date)) DESC LIMIT 1", "source_tables": ["characters"]}, "evidence": "the first ever villian is villian that was released before all others in time which refers to substr(release_date, length(release_date) - 1, length(release_date)) desc limit 1;"}
{"sample_id": 4722, "db_id": "disney", "final": {"question": "What is Disney's highest grossing action movie?", "sql": "SELECT movie_title FROM movies_total_gross WHERE genre = 'Action' ORDER BY CAST(REPLACE(trim(total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1", "source_tables": ["movies_total_gross"]}, "evidence": "action movie refers to movie_title where genre = 'Action'; highest grossing movie refers to MAX(total_gross)"}
{"sample_id": 4723, "db_id": "disney", "final": {"question": "Which actor voices Akela from The Jungle Book?", "sql": "SELECT 'voice-actor' FROM 'voice-actors' WHERE character = 'Akela'", "source_tables": ["voice-actors"]}, "evidence": "Akela refers character = 'Akela'; which actor voices refers to voice-actor;"}
{"sample_id": 4724, "db_id": "disney", "final": {"question": "Determine Disney's total box office gross between 2010 and 2016.", "sql": "SELECT SUM(Total) FROM revenue WHERE 'Year' BETWEEN 2010 AND 2016", "source_tables": ["revenue"]}, "evidence": "between 2010 and 2016 refers to Year between 2010 and 2016;"}
{"sample_id": 4725, "db_id": "disney", "final": {"question": "Name the main character of Disney's most popular adventure movie based on its inflation-adjusted gross.", "sql": "SELECT T2.hero FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title WHERE T1.genre = 'Adventure' ORDER BY CAST(REPLACE(trim(T1.inflation_adjusted_gross, '$'), ',', '') AS REAL) DESC LIMIT 1", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "adventure movie refers to genre = 'Adventure'; the main character of the movie refers to hero; most popular movie based on its inflation-adjusted gross refers to where MAX(inflation_adjusted_gross);"}
{"sample_id": 4726, "db_id": "disney", "final": {"question": "Name the director of Disney's lowest grossing movie.", "sql": "SELECT T2.director FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name ORDER BY CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) ASC LIMIT 1", "source_tables": ["director", "movies_total_gross"]}, "evidence": "lowest grossing movie refers to movie_title where MIN(total_gross);"}
{"sample_id": 4727, "db_id": "disney", "final": {"question": "Find out what proportion of total revenue Walt Disney Parks and Resorts received in 2010.", "sql": "SELECT SUM('Walt Disney Parks and Resorts') / SUM(Total) * 100 FROM revenue WHERE year = 2010", "source_tables": ["revenue"]}, "evidence": "DIVIDE(Walt Disney Parks and Resorts where year = 2010), SUM(year = 2010) as percentage;"}
{"sample_id": 4728, "db_id": "disney", "final": {"question": "Determine the average gross for Disney's PG-13-rated action movies.", "sql": "SELECT SUM(CAST(REPLACE(trim(total_gross, '$'), ',', '') AS REAL)) / COUNT(movie_title) FROM movies_total_gross WHERE MPAA_rating = 'PG-13'", "source_tables": ["movies_total_gross"]}, "evidence": "DIVIDE(SUM(total_gross where genre = 'Action' and MPAA_rating = 'PG-13'), COUNT(movie_title where genre = 'Action' and MPAA_rating = 'PG-13'));"}
{"sample_id": 4729, "db_id": "disney", "final": {"question": "How many voice-actors were involved in the Bambi movie?", "sql": "SELECT COUNT(DISTINCT 'voice-actor') FROM 'voice-actors' WHERE movie = 'Bambi'", "source_tables": ["voice-actors"]}, "evidence": "Bambi is the name of the movie which refers to movie = 'Bambi';"}
{"sample_id": 4730, "db_id": "disney", "final": {"question": "Find the estimated inflation rate that was used to adjust the 1995 box office revenue for Disney's films.", "sql": "SELECT SUM(CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL)) / SUM(CAST(REPLACE(trim(total_gross, '$'), ',', '') AS REAL)) FROM movies_total_gross WHERE SUBSTR(release_date, LENGTH(release_date) - 3, LENGTH(release_date)) = '1995' GROUP BY SUBSTR(release_date, LENGTH(release_date) - 3, LENGTH(release_date)) = '1995'", "source_tables": ["movies_total_gross"]}, "evidence": "DIVIDE(inflation_adjusted_gross, total_gross) as percentage where substr(release_date, length(release_date) - 3, length(release_date)) = '1995';"}
{"sample_id": 4731, "db_id": "disney", "final": {"question": "What is the difference in the current gross of Cars and its sequel, Cars 2? Which movie is more popular?", "sql": "SELECT SUM(CASE WHEN movie_title = 'Cars' THEN CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL) ELSE 0 END), SUM(CASE WHEN movie_title = 'Cars 2' THEN CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL) ELSE 0 END) FROM movies_total_gross", "source_tables": ["movies_total_gross"]}, "evidence": "SUBTRACT(inflation_adjusted_gross where movie_title = 'Cars', inflation_adjusted_gross where movie_title = 'Cars 2'); more popular movie refers to movie_title where MAX(inflation_adjusted_gross);"}
{"sample_id": 4732, "db_id": "disney", "final": {"question": "Name the most recent movie directed by Chris Buck. Which of his movies was more successful in terms of grossing? Use the current gross for comparison.", "sql": "SELECT T1.movie_title, MAX(T1.release_date), MAX(T1.inflation_adjusted_gross) FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Chris Buck'", "source_tables": ["director", "movies_total_gross"]}, "evidence": "Chris Buck refers to director = 'Chris Buck'; the most recent movie refers to movie_title where MAX(release_date); current gross refers to inflation_adjusted_gross; more successful movie refers to MAX(inflation_adjusted_gross);"}
{"sample_id": 4733, "db_id": "disney", "final": {"question": "Name actors who voiced more than five Disney characters.", "sql": "SELECT 'voice-actor' FROM 'voice-actors' GROUP BY 'voice-actor' HAVING COUNT(movie) > 5", "source_tables": ["voice-actors"]}, "evidence": "Actors who voiced refer to voice-actor;"}
{"sample_id": 4734, "db_id": "disney", "final": {"question": "Name the top 5 highest-grossing Disney movies adjusted for inflation. Identify the percentage they contributed to the total of Disney's current gross.", "sql": "SELECT SUM(CASE WHEN CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL) > 1236035515 THEN CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL) ELSE 0 END) * 100 / SUM(CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL)) FROM movies_total_gross", "source_tables": ["movies_total_gross"]}, "evidence": "The top 5 highest-grossing movies adjusted for inflation refer to MAX(inflation_adjusted_gross)LIMIT 5; DIVIDE(SUM(MAX(inflation_adjusted_gross LIMIT 5)), SUM(inflation_adjusted_gross)) as percentage;"}
{"sample_id": 4735, "db_id": "disney", "final": {"question": "Among all Disney movies directed by Gary Trousdale, determine the percentage that earned over USD100m based on actual grossing.", "sql": "SELECT CAST(COUNT(CASE WHEN CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) > 100000000 THEN T1.movie_title ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_title) FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Gary Trousdale'", "source_tables": ["director", "movies_total_gross"]}, "evidence": "DIVIDE(COUNT(movie_title where director = 'Gary Trousdale' and total_gross > 100000000), COUNT(movie_title where director = 'Gary Trousdale')) as percentage;"}
{"sample_id": 4877, "db_id": "legislator", "final": {"question": "What are the Wikipedia page names of all the anti-administration senators?", "sql": "SELECT T1.wikipedia_id FROM historical AS T1 INNER JOIN 'historical-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.type = 'sen' AND T2.party = 'Anti-Administration'", "source_tables": ["historical-terms", "historical"]}, "evidence": "Wikipedia page names refers to wikipedia_id; anti-administration refers to party = 'Anti-Administration'; senators refers to type = 'sen';"}
{"sample_id": 4878, "db_id": "legislator", "final": {"question": "List the official full names of all the legislators that served 13 district for 26 consecutive years.", "sql": "SELECT DISTINCT CASE WHEN SUM(CAST(strftime('%Y', T2.end) AS int) - CAST(strftime('%Y', T2.start) AS int)) = 26 THEN T1.official_full_name END FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide GROUP BY T1.official_full_name, T2.district HAVING COUNT(T1.official_full_name) = 13", "source_tables": ["current-terms", "current"]}, "evidence": "served only one district for 26 consecutive years refers to SUBTRACT(SUM(cast(strftime('%Y', end)), CAST(strftime('%Y', start)))) = 26"}
{"sample_id": 4879, "db_id": "legislator", "final": {"question": "How many Federalist representatives are there whose first names are Benjamin?", "sql": "SELECT COUNT(T.bioguide_id) FROM ( SELECT T1.bioguide_id FROM historical AS T1 INNER JOIN 'historical-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Benjamin' AND T2.party = 'Federalist' AND T2.type = 'rep' GROUP BY T1.bioguide_id ) AS T", "source_tables": ["historical-terms", "historical"]}, "evidence": "Federalist refers to party = 'Federalist'; representatives refers to type = 'rep';"}
{"sample_id": 4880, "db_id": "legislator", "final": {"question": "How many female representatives served in the state of California for at least 10 years?", "sql": "SELECT SUM(T3.result) FROM ( SELECT CASE WHEN SUM(CAST(strftime('%Y', T2.'end') AS int) - CAST(strftime('%Y', T2.start) AS int)) > 10 THEN 1 ELSE 0 END AS result FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' AND T2.state = 'CA' AND T2.type = 'rep' ) AS T3", "source_tables": ["current-terms", "current"]}, "evidence": "female refers to gender_bio = 'F'; representatives refers to type = 'rep'; served for at least 10 years refers to SUBTRACT(SUM(CAST(strftime('%Y', end)), CAST(strftime('%Y', start)))) > 10;"}
{"sample_id": 4881, "db_id": "legislator", "final": {"question": "What is the party of the oldest legislator?", "sql": "SELECT T1.party FROM 'historical-terms' AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide ORDER BY T2.birthday_bio LIMIT 1", "source_tables": ["historical-terms", "historical"]}, "evidence": "oldest legislator refers to MIN(birthday_bio);"}
{"sample_id": 4882, "db_id": "legislator", "final": {"question": "Who is the Lutheran representative that served in the state of Ohio for 14 years before becoming a senator?", "sql": "SELECT CASE WHEN SUM(CAST(strftime('%Y', T2.end) AS int) - CAST(strftime('%Y', T2.start) AS int)) = 14 THEN official_full_name END FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.religion_bio = 'Lutheran' AND T2.state = 'OH' AND T2.type = 'rep'", "source_tables": ["current-terms", "current"]}, "evidence": "Lutheran refers to religion_bio = 'Lutheran'; representative refers to type = 'rep'; served for 14 years refers to SUBTRACT(SUM(CAST(strftime('%Y', end)), CAST(strftime('%Y', start)))) = 14;"}
{"sample_id": 4883, "db_id": "legislator", "final": {"question": "Among all the current legislators born after the year 1960, how many of them are not google entities?", "sql": "SELECT COUNT(*) FROM current WHERE strftime('%Y', birthday_bio) > '1960' AND google_entity_id_id IS NULL", "source_tables": ["current"]}, "evidence": "born after the year 1960 refers to strftime('%Y', birthday_bio) > '1960'; not google entities refers to google_entity_id_id is null;"}
{"sample_id": 4884, "db_id": "legislator", "final": {"question": "Please list the official full names of all the current legislators who have served in the U.S. House.", "sql": "SELECT official_full_name FROM current WHERE house_history_id IS NOT NULL", "source_tables": ["current"]}, "evidence": "have served in the U.S. House refers to house_history_id is not null;"}
{"sample_id": 4885, "db_id": "legislator", "final": {"question": "How many current legislators have both accounts on both VoteView.com and maplight.org?", "sql": "SELECT COUNT(*) FROM current WHERE icpsr_id IS NOT NULL AND maplight_id IS NOT NULL", "source_tables": ["current"]}, "evidence": "have both accounts on both VoteView.com and maplight.org refers to icpsr_id is not null AND maplight_id is not null;"}
{"sample_id": 4886, "db_id": "legislator", "final": {"question": "Among all the current female legislators, how many of them have attended in Senate roll call votes?", "sql": "SELECT COUNT(lis_id) FROM current WHERE gender_bio = 'F' AND lis_id IS NOT NULL", "source_tables": ["current"]}, "evidence": "female refers to gender_bio = 'F'; have attended in Senate roll call votes refers to lis_id is not null;"}
{"sample_id": 4887, "db_id": "legislator", "final": {"question": "What is the religion of current legislator Sherrod Brown?", "sql": "SELECT religion_bio FROM current WHERE official_full_name = 'Sherrod Brown'", "source_tables": ["current"]}, "evidence": "religion refers to religion_bio;"}
{"sample_id": 4888, "db_id": "legislator", "final": {"question": "What is the religion with the most occurrrence of the current legislators?", "sql": "SELECT religion_bio FROM current GROUP BY religion_bio ORDER BY COUNT(religion_bio) DESC LIMIT 1", "source_tables": ["current"]}, "evidence": "religion with the most occurrrence of the current legislators refers to MAX(count(religion_bio));"}
{"sample_id": 4889, "db_id": "legislator", "final": {"question": "What is the current official Instagram handle of current legislator Bob Corker?", "sql": "SELECT T2.instagram FROM current AS T1 INNER JOIN 'social-media' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Bob Corker'", "source_tables": ["current", "social-media"]}, "evidence": "official Instagram handle refers to instagram;"}
{"sample_id": 4890, "db_id": "legislator", "final": {"question": "Among the current legislators who have accounts on both http://thomas.gov, how many of them have accounts on instagram?", "sql": "SELECT COUNT(DISTINCT T1.bioguide_id) FROM current AS T1 INNER JOIN 'social-media' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.thomas_id IS NOT NULL AND T2.instagram IS NOT NULL", "source_tables": ["current", "social-media"]}, "evidence": "have accounts on both http://thomas.gov refers to thomas_id is NOT null; have accounts on instagram refers to instagram is not null;"}
{"sample_id": 4891, "db_id": "legislator", "final": {"question": "Please list the username of the current official Facebook presence of all the current legislators that are famous or impact.", "sql": "SELECT T2.facebook FROM current AS T1 INNER JOIN 'social-media' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.wikipedia_id IS NOT NULL GROUP BY T2.facebook", "source_tables": ["current", "social-media"]}, "evidence": "username of the current official Facebook presence of the legislators refers to facebook; legislators that are famous or impact refers to wikipedia_id is not null;"}
{"sample_id": 4892, "db_id": "legislator", "final": {"question": "For how many terms have the oldest current legislator served?", "sql": "SELECT COUNT(T2.bioguide) FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio = ( SELECT MIN(birthday_bio) FROM current )", "source_tables": ["current-terms", "current"]}, "evidence": "oldest legislator refers to MIN(birthday_bio);"}
{"sample_id": 4893, "db_id": "legislator", "final": {"question": "What was current legislator Sherrod Brown's Washington, D.C. office phone number during his term starting on 2013/1/3?", "sql": "SELECT T1.phone FROM 'current-terms' AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.official_full_name = 'Sherrod Brown' AND T1.start = '2013-01-03'", "source_tables": ["current-terms", "current"]}, "evidence": "Washington, DC office phone number refers to phone; terms starting on 2013/1/3 refers to start = '2013-01-03';"}
{"sample_id": 4894, "db_id": "legislator", "final": {"question": "Current legislator Sherrod Brown has been in the Democrat party during how many terms that he has served?", "sql": "SELECT COUNT(*) FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Sherrod Brown' AND T2.party = 'Democrat'", "source_tables": ["current-terms", "current"]}, "evidence": ""}
{"sample_id": 4895, "db_id": "legislator", "final": {"question": "Please list the full official names of all the current legislators who served the term that started on 2013/1/3.", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.start = '2013-01-03'", "source_tables": ["current-terms", "current"]}, "evidence": "term that started on 2013/1/3 refers to start = '2013-01-03';"}
{"sample_id": 4896, "db_id": "legislator", "final": {"question": "Among the current legislators who served the term starting on 2013/1/3, how many of them are female?", "sql": "SELECT COUNT(*) FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.start = '2013-01-03' AND T1.gender_bio = 'F'", "source_tables": ["current-terms", "current"]}, "evidence": "term starting on 2013/1/3 refers to start = '2013-01-03; female refers to gender_bio = 'F';"}
{"sample_id": 4897, "db_id": "legislator", "final": {"question": "What is the full official name of the current legislator that has served for the most number of terms?", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide GROUP BY T1.official_full_name, T2.bioguide ORDER BY COUNT(T2.bioguide) DESC LIMIT 1", "source_tables": ["current-terms", "current"]}, "evidence": "served for the most number of terms refers to MAX(COUNT(bioguide));"}
{"sample_id": 4898, "db_id": "legislator", "final": {"question": "For how many terms has current legislator Sherrod Brown served as a representative for district no.13?", "sql": "SELECT COUNT(*) FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Sherrod Brown' AND T2.district = 13", "source_tables": ["current-terms", "current"]}, "evidence": "district no. 13 refers to district = 13;"}
{"sample_id": 4899, "db_id": "legislator", "final": {"question": "What is the official full name of the current legislator whose current official Facebook presence is \"senjoniernst\"?", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN 'social-media' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.facebook = 'senjoniernst'", "source_tables": ["current", "social-media"]}, "evidence": "current official Facebook presence is \"senjoniernst\" refers to facebook = 'senjoniernst';"}
{"sample_id": 4900, "db_id": "legislator", "final": {"question": "Which current legislator has served for more terms, Sherrod Brown or Maria Cantwell?", "sql": "SELECT CASE WHEN SUM(CASE WHEN T1.official_full_name = 'Maria Cantwell' THEN 1 ELSE 0 END) > SUM(CASE WHEN T1.official_full_name = 'Sherrod Brown' THEN 1 ELSE 0 END) THEN 'Maria Cantwell' ELSE 'Sherrod Brown' END FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide", "source_tables": ["current-terms", "current"]}, "evidence": "if sum(official_full_name = 'Maria Cantwell') > sum(official_full_name = 'Sherrod Brown') then Maria Cantwell has served for more term than Sherrod Brown; if sum(official_full_name = 'Sherrod Brown') > sum(official_full_name = 'Maria Cantwell'), then Sherrod Brown has served for more terms than Maria Cantwell;"}
{"sample_id": 4901, "db_id": "legislator", "final": {"question": "Among all the current legislators who have served for more than 4 terms, what is the percentage of them being female?", "sql": "SELECT CAST(SUM(CASE WHEN gender_bio = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.bioguide) FROM ( SELECT T2.bioguide, T1.gender_bio FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide GROUP BY T2.bioguide HAVING COUNT(T2.bioguide) > 4 ) T3", "source_tables": ["current-terms", "current"]}, "evidence": "have served for more than 4 years refers to count(bioguide) > 4; percentage = MULTIPLY(DIVIDE(SUM(gender_bio = 'F'), count(bioguide)), 100.0); female refers to gender_bio = 'F'"}
{"sample_id": 4902, "db_id": "legislator", "final": {"question": "What is the average number of terms served for a current legislator that's famous or impact?", "sql": "SELECT CAST(COUNT(T2.bioguide) AS REAL) / COUNT(DISTINCT T1.bioguide_id) FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.wikipedia_id IS NOT NULL", "source_tables": ["current-terms", "current"]}, "evidence": "average = DIVIDE(COUNT(bioguide), COUNT(bioguide_id)); legislator that's famous or impact refers to wikipedia_id is not null;"}
{"sample_id": 4903, "db_id": "legislator", "final": {"question": "How many of the legislators are female?", "sql": "SELECT COUNT(gender_bio) FROM current WHERE gender_bio = 'F'", "source_tables": ["current"]}, "evidence": "female refers to gender_bio = 'F';"}
{"sample_id": 4904, "db_id": "legislator", "final": {"question": "What is the total number of senators New Jersey have?", "sql": "SELECT COUNT(type) FROM 'historical-terms' WHERE state = 'NJ' AND type = 'rep'", "source_tables": ["historical-terms"]}, "evidence": "senators refers to type = 'rep'; New Jersey refers to state = 'NJ';"}
{"sample_id": 4905, "db_id": "legislator", "final": {"question": "Provide the address of the legislator with the contact form of http://www.carper.senate.gov/contact/.", "sql": "SELECT address FROM 'current-terms' WHERE contact_form = 'http://www.carper.senate.gov/contact/'", "source_tables": ["current-terms"]}, "evidence": ""}
{"sample_id": 4906, "db_id": "legislator", "final": {"question": "Provide the Instagram username of the legislator named Benjamin Hawkins.", "sql": "SELECT T1.instagram FROM 'social-media' AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.first_name = 'Benjamin' AND T2.last_name = 'Hawkins'", "source_tables": ["current", "social-media"]}, "evidence": "Instagram username refers to instagram;"}
{"sample_id": 4907, "db_id": "legislator", "final": {"question": "Give the alphanumeric ID of the Catholic legislators in Nebraska.", "sql": "SELECT T1.bioguide FROM 'current-terms' AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.religion_bio = 'Catholic' AND T1.state = 'NE'", "source_tables": ["current-terms", "current"]}, "evidence": "alphanumeric ID refers to bioguide; Catholic legislators refers to religion_bio = 'Catholic'; Nebraska refers to state = 'NE';"}
{"sample_id": 4908, "db_id": "legislator", "final": {"question": "List down the MapLight ID of the representatives in Maine.", "sql": "SELECT T1.maplight_id FROM historical AS T1 INNER JOIN 'historical-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.type = 'rep' AND T2.state = 'ME' GROUP BY T1.maplight_id", "source_tables": ["historical-terms", "historical"]}, "evidence": "representatives refers to type = 'rep'; Maine refers to state = 'ME';"}
{"sample_id": 4909, "db_id": "legislator", "final": {"question": "Give the type and start date of the term of the legislator born on November 26, 1727.", "sql": "SELECT T2.type, T2.start FROM historical AS T1 INNER JOIN 'historical-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio = '1727-11-26'", "source_tables": ["historical-terms", "historical"]}, "evidence": "start date of the term refers to start; born on November 26, 1727 refers to birthday_bio = '1727-11-26';"}
{"sample_id": 4910, "db_id": "legislator", "final": {"question": "What is the contact form of the legislator named Rick Crawford?", "sql": "SELECT T2.contact_form FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Rick Crawford'", "source_tables": ["current-terms", "current"]}, "evidence": ""}
{"sample_id": 4911, "db_id": "legislator", "final": {"question": "How many female representatives are there in Michigan?", "sql": "SELECT COUNT(T.bioguide_id) FROM ( SELECT T1.bioguide_id FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.type = 'rep' AND T2.state = 'MI' AND T1.gender_bio = 'F' GROUP BY T1.bioguide_id ) T", "source_tables": ["current-terms", "current"]}, "evidence": "female refers to gender_bio = 'F'; representatives refers to type = 'rep'; Michigan refers to state = 'MI';"}
{"sample_id": 4912, "db_id": "legislator", "final": {"question": "Among the female legislators, what is the percentage of the senators in Maine?", "sql": "SELECT CAST(SUM(CASE WHEN T2.type = 'sen' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.type) FROM current AS T1 INNER JOIN 'current-terms' AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state = 'ME' AND T1.gender_bio = 'F'", "source_tables": ["current-terms", "current"]}, "evidence": "female refers to gender_bio = 'F'; percentage = MULTIPLY(DIVIDE(SUM(type = 'sen'), COUNT(type)), 100.0); senators refers to type = 'sen'; Maine refers to state = 'ME';"}
{"sample_id": 5047, "db_id": "olympics", "final": {"question": "Which city were the Olympic games held in 1992?", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_year = 1992", "source_tables": ["city", "games", "games_city"]}, "evidence": "city refers to city_name; in 1992 refers to games_year = 1992;"}
{"sample_id": 5048, "db_id": "olympics", "final": {"question": "Which region is the majority of the athletes from?", "sql": "SELECT T2.region_name FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id GROUP BY T2.region_name ORDER BY COUNT(T1.person_id) DESC LIMIT 1", "source_tables": ["person_region", "noc_region"]}, "evidence": "region refers to region_name; the majority of the athletes from refer to MAX(COUNT(region_name));"}
{"sample_id": 5049, "db_id": "olympics", "final": {"question": "What is the name of the oldest competitor?", "sql": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age DESC LIMIT 1", "source_tables": ["games_competitor", "person"]}, "evidence": "name refers to full_name; the oldest refers to MAX(age);"}
{"sample_id": 5050, "db_id": "olympics", "final": {"question": "Which sport did John Aalberg participate in?", "sql": "SELECT DISTINCT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id INNER JOIN competitor_event AS T3 ON T2.id = T3.event_id INNER JOIN games_competitor AS T4 ON T3.competitor_id = T4.id INNER JOIN person AS T5 ON T4.person_id = T5.id WHERE T5.full_name = 'John Aalberg'", "source_tables": ["person", "games_competitor", "sport", "competitor_event", "event"]}, "evidence": "sport refers to sport_name;"}
{"sample_id": 5051, "db_id": "olympics", "final": {"question": "How many Belgian men have competed in an Olympic Games?", "sql": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Belgium' AND T3.gender = 'M'", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": "Belgian men refer to gender = 'M' where region_name = 'Belgium';"}
{"sample_id": 5052, "db_id": "olympics", "final": {"question": "How many athletes took part in the Olympic games held in Barcelona?", "sql": "SELECT COUNT(T1.person_id) FROM games_competitor AS T1 INNER JOIN games_city AS T2 ON T1.games_id = T2.games_id INNER JOIN city AS T3 ON T2.city_id = T3.id WHERE T3.city_name = 'Barcelona'", "source_tables": ["city", "games_competitor", "games_city"]}, "evidence": "Barcelona refers to city_name = 'Barcelona';"}
{"sample_id": 5053, "db_id": "olympics", "final": {"question": "How many different football events are there?", "sql": "SELECT COUNT(T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Football'", "source_tables": ["event", "sport"]}, "evidence": "events refer to event_name; football refers to sport_name = 'Football';"}
{"sample_id": 5054, "db_id": "olympics", "final": {"question": "What were the cities in which John Aalberg competed?", "sql": "SELECT T4.city_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T1.full_name = 'John Aalberg'", "source_tables": ["games_competitor", "city", "person", "games_city"]}, "evidence": "cities refer to city_name;"}
{"sample_id": 5055, "db_id": "olympics", "final": {"question": "In Barcelona, how many Olympic games were held?", "sql": "SELECT COUNT(T1.games_id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'Barcelona'", "source_tables": ["city", "games_city"]}, "evidence": "Barcelona refers to city_name = 'Barcelona';"}
{"sample_id": 5056, "db_id": "olympics", "final": {"question": "How many competitors over the age of 30 participated in the 1992 Winter Olympics?", "sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1992 Winter' AND T2.age > 30", "source_tables": ["games_competitor", "games"]}, "evidence": "competitors over the age of 30 refer to person_id where age > 30; the 1992 Winter Olympics refers to games_name = '1992 Winter';"}
{"sample_id": 5057, "db_id": "olympics", "final": {"question": "What is the name of the Olympic game with the most competitors held in Barcelona?", "sql": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T4.city_name = 'Barcelona' GROUP BY T1.id ORDER BY COUNT(T2.person_id) DESC LIMIT 1", "source_tables": ["city", "games_competitor", "games", "games_city"]}, "evidence": "Barcelona refers to city_name = 'Barcelona'; the most competitors refer to MAX(COUNT(games_name)); name of game refers to games_name;"}
{"sample_id": 5058, "db_id": "olympics", "final": {"question": "List the name of competitors from Argentina.", "sql": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Argentina'", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": "name refers to full_name; Argentina refers to region_name = 'Argentina';"}
{"sample_id": 5059, "db_id": "olympics", "final": {"question": "What is the average age of Argentina's athletes who participated in the Summer Olympics in 2012?", "sql": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person_region AS T3 ON T2.person_id = T3.person_id INNER JOIN noc_region AS T4 ON T3.region_id = T4.id WHERE T1.games_name = '2012 Summer' AND T4.region_name = 'Argentina'", "source_tables": ["person_region", "noc_region", "games_competitor", "games"]}, "evidence": "AVG(age) where games_name = '2012 Summer' and region_name = 'Argentina';"}
{"sample_id": 5060, "db_id": "olympics", "final": {"question": "Calculate the percentage of bronze medals won by men's basketball players.", "sql": "SELECT CAST(COUNT(CASE WHEN T4.medal_name = 'Bronze' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN event AS T3 ON T1.event_id = T3.id INNER JOIN medal AS T4 ON T1.medal_id = T4.id WHERE T3.event_name LIKE 'Basketball Men%s Basketball'", "source_tables": ["event", "games_competitor", "medal", "competitor_event"]}, "evidence": "DIVIDE(COUNT(competitor_id where medal_name = 'Bronze'), COUNT(competitor_id)) as percentage where event_name = 'Basketball Men''s Basketball';"}
{"sample_id": 5061, "db_id": "olympics", "final": {"question": "List the name of the games that Georgios Abaris participated.", "sql": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Georgios Abaris'", "source_tables": ["games_competitor", "games", "person"]}, "evidence": "name of games refers to games_name;"}
{"sample_id": 5062, "db_id": "olympics", "final": {"question": "Provide the name of competitors from Greece.", "sql": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Greece'", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": "name refers to full_name; Greece refers to region_name = 'Greece';"}
{"sample_id": 5063, "db_id": "olympics", "final": {"question": "Calculate the average age of the competitors who participated in the 1924 Winter.", "sql": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1924 Winter'", "source_tables": ["games_competitor", "games"]}, "evidence": "AVG(age) where games_name = '1924 Winter';"}
{"sample_id": 5064, "db_id": "olympics", "final": {"question": "What is the NOC code of the region of the competitors weighted 77 kg?", "sql": "SELECT T1.noc FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.weight = 77", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": "NOC code refers to noc; competitors weighted 77 kg refer to person_id where weight = 77;"}
{"sample_id": 5065, "db_id": "olympics", "final": {"question": "List the names of the games held in Paris.", "sql": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Paris'", "source_tables": ["city", "games", "games_city"]}, "evidence": "Paris refers to city_name = 'Paris'; names of games refers to games_name;"}
{"sample_id": 5066, "db_id": "olympics", "final": {"question": "Provide the competitors' names who joined the 2000 Summer.", "sql": "SELECT T3.full_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2000 Summer'", "source_tables": ["games_competitor", "games", "person"]}, "evidence": "the competitors' names refer to full_name; the 2000 Summer refers to games_name = '2000 Summer';"}
{"sample_id": 5067, "db_id": "olympics", "final": {"question": "In which city was the game held where the oldest competitor participated?", "sql": "SELECT T4.city_name FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.games_id = T2.id INNER JOIN games_city AS T3 ON T1.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id ORDER BY T1.age DESC LIMIT 1", "source_tables": ["city", "games_competitor", "games", "games_city"]}, "evidence": "in which city refers to city_name; the oldest refers to MAX(age);"}
{"sample_id": 5068, "db_id": "olympics", "final": {"question": "What is the name of the youngest competitor?", "sql": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age LIMIT 1", "source_tables": ["games_competitor", "person"]}, "evidence": "name refers to full_name; the youngest refers to MIN(age);"}
{"sample_id": 5069, "db_id": "olympics", "final": {"question": "List down the games ID of games held in Tokyo.", "sql": "SELECT T1.games_id FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'Tokyo'", "source_tables": ["city", "games_city"]}, "evidence": "Tokyo refers to city_name = 'Tokyo';"}
{"sample_id": 5070, "db_id": "olympics", "final": {"question": "Give the NOC code and region name of the heaviest competitor.", "sql": "SELECT T1.noc, T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id ORDER BY T3.weight DESC LIMIT 1", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": "NOC code refers to noc; the heaviest refers to MAX(weight);"}
{"sample_id": 5071, "db_id": "olympics", "final": {"question": "In what year and season did Sohail Abbas compete?", "sql": "SELECT T1.games_year, T1.season FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Sohail Abbas'", "source_tables": ["games_competitor", "games", "person"]}, "evidence": "year refers to games_year;"}
{"sample_id": 5072, "db_id": "olympics", "final": {"question": "What is the average weight of the competitors who won a silver medal?", "sql": "SELECT AVG(T1.weight) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T4.medal_name = 'Silver'", "source_tables": ["games_competitor", "person", "medal", "competitor_event"]}, "evidence": "AVG(weight) where medal_name = 'Silver';"}
{"sample_id": 5073, "db_id": "olympics", "final": {"question": "In which city the 2004 Summer was held?", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '2004 Summer'", "source_tables": ["city", "games", "games_city"]}, "evidence": "in which city refers to city_name; the 2004 Summer refers to games_name = '2004 Summer';"}
{"sample_id": 5074, "db_id": "olympics", "final": {"question": "What is the season of the game where a competitor who weighted 73 kg and 180 cm tall, participated?", "sql": "SELECT DISTINCT T1.season FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.height = 180 AND T3.weight = 73", "source_tables": ["games_competitor", "games", "person"]}, "evidence": "competitor who weighted 73 kg and 180 cm tall refers to person_id where height = 180 and weight = 73;"}
{"sample_id": 5075, "db_id": "olympics", "final": {"question": "Provide the names of competitors who received a gold medal.", "sql": "SELECT DISTINCT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T4.medal_name = 'Gold'", "source_tables": ["games_competitor", "person", "medal", "competitor_event"]}, "evidence": "names of competitors refer to full_name; gold medal refers to medal_name = 'Gold';"}
{"sample_id": 5076, "db_id": "olympics", "final": {"question": "Compute the average height of competitors whose age ranges from 22 to 28.", "sql": "SELECT AVG(T1.height) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T2.age BETWEEN 22 AND 28", "source_tables": ["games_competitor", "person"]}, "evidence": "AVG(height) where age BETWEEN 22 AND 28;"}
{"sample_id": 5077, "db_id": "olympics", "final": {"question": "How many female competitors were from Iran?", "sql": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Iran' AND T3.gender = 'F'", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": "female competitors refer to person_id where gender = 'F'; from Iran refers to region_name = 'Iran';"}
{"sample_id": 5078, "db_id": "olympics", "final": {"question": "Provide the age of the tallest competitor.", "sql": "SELECT T2.age FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T1.height DESC LIMIT 1", "source_tables": ["games_competitor", "person"]}, "evidence": "the tallest refers to MAX(height);"}
{"sample_id": 5079, "db_id": "olympics", "final": {"question": "Among the competitors with age ranges 24 and below, calculate the difference between the number of competitors who weighed greater than 70 kg and competitors who weighted less than 70 kg.", "sql": "SELECT COUNT(CASE WHEN T1.weight > 70 THEN 1 ELSE NULL END) - COUNT(CASE WHEN T1.weight < 70 THEN 1 ELSE NULL END) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T2.age < 24", "source_tables": ["games_competitor", "person"]}, "evidence": "SUBTRACT(COUNT(weight > 70), COUNT(weight < 70)) where age < 24;"}
{"sample_id": 5080, "db_id": "olympics", "final": {"question": "In the 2014 Winter game, what is the percentage of competitors who age 28 years old?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.age = 28 THEN 1 END) AS REAL) * 100 / COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '2014 Winter'", "source_tables": ["games_competitor", "games"]}, "evidence": "DIVIDE(COUNT(age = 28), COUNT(id)) as percentage where games_name = '2014 Winter';"}
{"sample_id": 5081, "db_id": "olympics", "final": {"question": "Among the males, list the region name of people with height greater than 87% of the average height of all people listed.", "sql": "SELECT DISTINCT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.gender = 'M' AND T3.height * 100 > ( SELECT AVG(height) FROM person WHERE gender = 'M' ) * 87", "source_tables": ["person_region", "noc_region", "person"]}, "evidence": "males refer to gender = 'M'; height greater than 87% of the average height refers to height > MULTIPLY(AVG(height), 0.87);"}
{"sample_id": 5202, "db_id": "address", "final": {"question": "Calculate the percentage of households in residential areas of countries over 10000.", "sql": "SELECT CAST(COUNT(CASE WHEN T2.households > 10000 THEN T1.zip_code ELSE NULL END) AS REAL) * 100 / COUNT(T1.zip_code) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code", "source_tables": ["country", "zip_data"]}, "evidence": "DIVIDE(SUM(households > 10000), SUM(households)) as percentage;"}
{"sample_id": 5203, "db_id": "address", "final": {"question": "Among the types of postal points in Saint Croix, what percentage of postal points is the post office?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.type = 'Post Office' THEN T1.zip_code ELSE NULL END) AS REAL) * 100 / COUNT(T1.zip_code) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'SAINT CROIX'", "source_tables": ["country", "zip_data"]}, "evidence": "DIVIDE(COUNT(type = 'Post Office' ), COUNT(type)) as percentage where county = 'SAINT CROIX';"}
{"sample_id": 5204, "db_id": "address", "final": {"question": "Among the area code 787, list the country of the cities with a postal point type of unique postal office.", "sql": "SELECT DISTINCT T2.county FROM area_code AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code INNER JOIN zip_data AS T3 ON T1.zip_code = T3.zip_code WHERE T1.area_code = '787' AND T3.type = 'Unique Post Office'", "source_tables": ["country", "area_code", "zip_data"]}, "evidence": "postal point type of unique postal office refers to type = 'Unique Post Office';"}
{"sample_id": 5205, "db_id": "address", "final": {"question": "What is the elevation of the city with the alias East Longmeadow?", "sql": "SELECT T2.elevation FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'East Longmeadow'", "source_tables": ["alias", "zip_data"]}, "evidence": ""}
{"sample_id": 5206, "db_id": "address", "final": {"question": "In cities that do not implement daylight savings, what is the total number of cities?", "sql": "SELECT COUNT(T1.area_code) FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.daylight_savings = 'No'", "source_tables": ["area_code", "zip_data"]}, "evidence": "do not implement daylight savings refers to daylight_savings = 'No';"}
{"sample_id": 5207, "db_id": "address", "final": {"question": "Give the country and area code of the city with zip code 1116.", "sql": "SELECT T2.county, T1.area_code FROM area_code AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T1.zip_code = 1116", "source_tables": ["country", "area_code"]}, "evidence": ""}
{"sample_id": 5208, "db_id": "address", "final": {"question": "Among the cities with alias St Thomas, provide the type of postal point for each city.", "sql": "SELECT DISTINCT T2.type FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'St Thomas'", "source_tables": ["alias", "zip_data"]}, "evidence": ""}
{"sample_id": 5209, "db_id": "address", "final": {"question": "List down the names of the cities belonging to Noble, Oklahoma.", "sql": "SELECT T3.city FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state INNER JOIN zip_data AS T3 ON T2.zip_code = T3.zip_code WHERE T1.name = 'Oklahoma' AND T2.county = 'NOBLE'", "source_tables": ["state", "country", "zip_data"]}, "evidence": "the county of Noble is located in the state of Oklahoma;"}
{"sample_id": 5210, "db_id": "address", "final": {"question": "Among the listed cities, provide the area code of the city with the largest water area.", "sql": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.water_area = ( SELECT MAX(water_area) FROM zip_data )", "source_tables": ["area_code", "zip_data"]}, "evidence": "the largest water area refers to MAX(water_area);"}
{"sample_id": 5211, "db_id": "address", "final": {"question": "Provide the alias of the city with the highest population in year 2020.", "sql": "SELECT T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.population_2020 = ( SELECT MAX(population_2020) FROM zip_data )", "source_tables": ["alias", "zip_data"]}, "evidence": "the highest population in year 2020 refers to MAX(population_2020);"}
{"sample_id": 5212, "db_id": "address", "final": {"question": "What is the elevation of the city belonging to Hampden, Massachusetts?", "sql": "SELECT T3.elevation FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state INNER JOIN zip_data AS T3 ON T2.zip_code = T3.zip_code WHERE T1.name = 'Massachusetts' AND T2.county = 'HAMPDEN' GROUP BY T3.elevation", "source_tables": ["state", "country", "zip_data"]}, "evidence": "the county of Hampden is located in the state of Massachusetts."}
{"sample_id": 5213, "db_id": "address", "final": {"question": "List the area code of the city with the highest Hispanic population.", "sql": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.hispanic_population = ( SELECT MAX(hispanic_population) FROM zip_data )", "source_tables": ["area_code", "zip_data"]}, "evidence": "the highest Hispanic population refers to MAX(hispanic_population);"}
{"sample_id": 5214, "db_id": "address", "final": {"question": "Give the alias of the cities with an Asian population of 7.", "sql": "SELECT T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.asian_population = 7", "source_tables": ["alias", "zip_data"]}, "evidence": "Asian population of 7 refers to asian_population = 7;"}
{"sample_id": 5215, "db_id": "address", "final": {"question": "What is the average of the white population in the cities with area code 920?", "sql": "SELECT AVG(T2.white_population) FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 920", "source_tables": ["area_code", "zip_data"]}, "evidence": "AVG(white_population) where area_code = 920;"}
{"sample_id": 5216, "db_id": "address", "final": {"question": "Among the cities with alias Ponce, what is the percentage of cities with a country level FIPS code of less than 20?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.county_fips < 20 THEN T2.zip_code ELSE NULL END) AS REAL) * 100 / COUNT(T2.zip_code) FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'Ponce'", "source_tables": ["alias", "zip_data"]}, "evidence": "DIVIDE(COUNT(county_fips < 20), COUNT(county_fips)) as percentage where alias = 'Ponce';"}
{"sample_id": 5217, "db_id": "address", "final": {"question": "List down the country of the cities with a population greater than 97% of the average population of all countries in 2020.", "sql": "SELECT T1.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.population_2020 > 0.97 * ( SELECT AVG(population_2020) FROM zip_data )", "source_tables": ["country", "zip_data"]}, "evidence": "population_2020 > MULTIPLY(0.97, AVG(population_2020));"}
{"sample_id": 5218, "db_id": "address", "final": {"question": "Count the number of postal points in the district represented by Kirkpatrick Ann.", "sql": "SELECT COUNT(T2.zip_code) FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.first_name = 'Kirkpatrick' AND T1.last_name = 'Ann'", "source_tables": ["congress", "zip_congress"]}, "evidence": "postal points refer to zip_code;"}
{"sample_id": 5219, "db_id": "address", "final": {"question": "Provide the zip codes and coordinates of the postal points under Allentown-Bethlehem-Easton, PA-NJ.", "sql": "SELECT T2.zip_code, T2.latitude, T2.longitude FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Allentown-Bethlehem-Easton, PA-NJ'", "source_tables": ["cbsa", "zip_data"]}, "evidence": "coordinates refer to latitude and longitude; under Allentown-Bethlehem-Easton, PA-NJ refers to CBSA_name = 'Allentown-Bethlehem-Easton, PA-NJ';"}
{"sample_id": 5220, "db_id": "address", "final": {"question": "Provide the zip codes, cities, and locations of the postal points that have Shared Reshipper as a bad alias.", "sql": "SELECT T1.zip_code, T2.city, T2.latitude, T2.longitude FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.bad_alias = 'Shared Reshipper'", "source_tables": ["zip_data", "avoid"]}, "evidence": "latitude and longitude coordinates can be used to identify the location;"}
{"sample_id": 5221, "db_id": "address", "final": {"question": "Who are the congress representatives of the postal points in Garfield?", "sql": "SELECT T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T1.city = 'Garfield'", "source_tables": ["zip_congress", "congress", "zip_data"]}, "evidence": "Who are the congress representatives refer to first_name, last_name; Garfield is the city;"}
{"sample_id": 5222, "db_id": "address", "final": {"question": "Count the number of postal points under New York-Newark-Jersey City, NY-NJ-PA.", "sql": "SELECT COUNT(T2.zip_code) FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'New York-Newark-Jersey City, NY-NJ-PA'", "source_tables": ["cbsa", "zip_data"]}, "evidence": "postal points refer to zip_code; under New York-Newark-Jersey City, NY-NJ-PA refers to CBSA_name = 'New York-Newark-Jersey City, NY-NJ-PA';"}
{"sample_id": 5223, "db_id": "address", "final": {"question": "How many postal points are there under the congress representative in Puerto Rico?", "sql": "SELECT COUNT(T2.zip_code) FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.state = 'Puerto Rico'", "source_tables": ["congress", "zip_congress"]}, "evidence": "postal points refer to zip_code; Puerto Rico refers to state = 'Puerto Rico';"}
{"sample_id": 5224, "db_id": "address", "final": {"question": "Describe the number of postal points and the countries in West Virginia.", "sql": "SELECT COUNT(DISTINCT T2.zip_code), COUNT(DISTINCT T2.county) FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'West Virginia'", "source_tables": ["state", "country"]}, "evidence": "postal points refer to zip_code; West Virginia is the name of the state, in which name = 'West Virginia';"}
{"sample_id": 5225, "db_id": "address", "final": {"question": "Provide the zip codes and area codes of the postal points with the community post office type at the elevation above 6000.", "sql": "SELECT T1.zip_code, T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.type = 'Community Post Office ' AND T2.elevation > 6000", "source_tables": ["area_code", "zip_data"]}, "evidence": "community post office type refers to type = 'Community Post Office'; elevation above 6000 refers to elevation > 6000;"}
{"sample_id": 5226, "db_id": "address", "final": {"question": "How many postal points are there under the congress representative from the House of Representatives in Mississippi?", "sql": "SELECT COUNT(T2.zip_code) FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.state = 'Mississippi'", "source_tables": ["congress", "zip_congress"]}, "evidence": "postal points refer to zip_code; Mississippi is the name of the state, in which name = 'Mississippi';"}
{"sample_id": 5227, "db_id": "address", "final": {"question": "Provide the congress representatives' IDs of the postal points in East Springfield.", "sql": "SELECT T2.district FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code WHERE T1.city = 'East Springfield'", "source_tables": ["zip_congress", "zip_data"]}, "evidence": "congress representatives' IDs refer to CID; East Springfield is the city;"}
{"sample_id": 5228, "db_id": "address", "final": {"question": "Who is the CBSA officer of the post point in the area with the highest number of employees?", "sql": "SELECT T1.CBSA_name FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.employees = ( SELECT MAX(employees) FROM zip_data )", "source_tables": ["cbsa", "zip_data"]}, "evidence": "CBSA officer refers to CBSA_name; the highest number of employees refers to MAX(employees);"}
{"sample_id": 5229, "db_id": "address", "final": {"question": "How many postal points with unique post office types are there in Ohio?", "sql": "SELECT COUNT(T2.zip_code) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Ohio' AND T2.type = 'Unique Post Office'", "source_tables": ["state", "zip_data"]}, "evidence": "postal points refer to zip_code; unique post office types refer to type = 'Unique Post Office'; Ohio is the name of the state, in which name = 'Ohio';"}
{"sample_id": 5230, "db_id": "address", "final": {"question": "Calculate the average number of beneficiaries per postal point in Guam.", "sql": "SELECT CAST(SUM(T2.total_beneficiaries) AS REAL) / COUNT(T2.zip_code) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Guam'", "source_tables": ["state", "zip_data"]}, "evidence": "DIVIDE(SUM(total_beneficiaries), COUNT(zip_code)) where name = 'Guam';"}
{"sample_id": 5231, "db_id": "address", "final": {"question": "Calculate the percentage of congress representatives from the Democrat party. Among them, how many postal points are in the Hawaii state?", "sql": "SELECT CAST(SUM(CASE WHEN T1.party = 'Democrat' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*), SUM(CASE WHEN T1.state = 'Hawaii' THEN 1 ELSE 0 END) FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district", "source_tables": ["congress", "zip_congress"]}, "evidence": "DIVIDE(COUNT(party = 'Democrat'), COUNT(congress_rep_id)) as percentage; postal points refer to zip_code; state = 'Hawaii';"}
{"sample_id": 5336, "db_id": "beer_factory", "final": {"question": "What is the container type, brand name and star rating for root beer ID 10054?", "sql": "SELECT T4.ContainerType, T3.BrandName, T1.StarRating FROM rootbeerreview AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID INNER JOIN rootbeer AS T4 ON T2.RootBeerID = T4.RootBeerID WHERE T2.RootBeerID = 100054", "source_tables": ["rootbeer", "rootbeerreview", "rootbeerbrand", "transaction"]}, "evidence": "FALSE;"}
{"sample_id": 5337, "db_id": "beer_factory", "final": {"question": "List out the root beers bought by Tim Ocel and Dawn Childress.", "sql": "SELECT T2.RootBeerID FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T2.CustomerID = T1.CustomerID WHERE (T1.First = 'Tim' AND T1.Last = 'Ocel') OR (T1.First = 'Dawn' AND T1.Last = 'Childress')", "source_tables": ["transaction", "customers"]}, "evidence": "FALSE;"}
{"sample_id": 5338, "db_id": "beer_factory", "final": {"question": "List out the root beer ID for the brand Bulldog, Bundaberg, Dad's, Dog n Suds and Virgil's.", "sql": "SELECT T1.RootBeerID FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T2.BrandID = T1.BrandID WHERE T2.BrandName IN ('Bulldog', 'Bundaberg', 'Dad''s', 'Dog n Suds', 'Virgil''s')", "source_tables": ["rootbeer", "rootbeerbrand"]}, "evidence": "Bulldog, Bundaberg, Dad's, Dog n Suds and Virgil's refers to BrandName IN('Bulldog', 'Bundaberg', 'Dad''s', 'Dog n Suds', 'Virgil''s');"}
{"sample_id": 5339, "db_id": "beer_factory", "final": {"question": "How many bottles of beer have been bought by Jim Breech?", "sql": "SELECT COUNT(T3.ContainerType) FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T2.CustomerID = T1.CustomerID INNER JOIN rootbeer AS T3 ON T3.RootBeerID = T2.RootBeerID WHERE T3.ContainerType = 'Bottle' AND T1.First = 'Jim' AND T1.Last = 'Breech'", "source_tables": ["transaction", "rootbeer", "customers"]}, "evidence": "bottles refers to ContainerType = 'Bottle';"}
{"sample_id": 5340, "db_id": "beer_factory", "final": {"question": "How many transactions have been made to purchase a root beer brand from California?", "sql": "SELECT COUNT(T3.RootBeerID) FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID INNER JOIN 'transaction' AS T3 ON T2.RootBeerID = T3.RootBeerID WHERE T1.State = 'CA'", "source_tables": ["rootbeer", "rootbeerbrand", "transaction"]}, "evidence": "California refers to State = 'CA';"}
{"sample_id": 5341, "db_id": "beer_factory", "final": {"question": "What is the average review given by a subscriber?", "sql": "SELECT AVG(T2.StarRating) FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.SubscribedToEmailList = 'TRUE'", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "average review = AVG(StarRating); subscriber refers to SubscribedToEmailList = 'TRUE';"}
{"sample_id": 5342, "db_id": "beer_factory", "final": {"question": "What is the amount difference between the bottles of root beer sold from Louisiana and Missouri?", "sql": "SELECT ( SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T2.State = 'LA' AND T1.ContainerType = 'Bottle' ) - ( SELECT COUNT(T3.BrandID) FROM rootbeer AS T3 INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T4.State = 'MO' AND T3.ContainerType = 'Bottle' ) AS DIFFERENCE", "source_tables": ["rootbeer", "rootbeerbrand"]}, "evidence": "difference = SUBTRACT(COUNT(ContainerType = 'Bottle' WHERE State = 'LA'), COUNT(ContainerType = 'Bottle' State = 'MO')); bottles refers to ContainerType = 'Bottle'; Louisiana refers to State = 'LA'; Missouri refers to State = 'MO';"}
{"sample_id": 5343, "db_id": "beer_factory", "final": {"question": "What is the transaction ratio being made at Sac State American River Courtyard and Sac State Union?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.LocationName = 'Sac State American River Courtyard' THEN T1.TransactionID ELSE NULL END) AS REAL) * 100 / COUNT(CASE WHEN T2.LocationName = 'Sac State Union' THEN T1.TransactionID ELSE NULL END) FROM 'transaction' AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID", "source_tables": ["location", "transaction"]}, "evidence": "transaction ratio = DIVIDE(SUM(TransactionID WHERE LocationName = 'Sac State American River Courtyard'), SUM(TransactionID WHERE LocationName = 'Sac State Union')); Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard'; Sac State Union refers to LocationName = 'Sac State Union';"}
{"sample_id": 5344, "db_id": "beer_factory", "final": {"question": "List out the name of the top 10 spenders and what credit card type are they using.", "sql": "SELECT T1.First, T1.Last, T2.CreditCardType FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.CustomerID ORDER BY SUM(T2.PurchasePrice) DESC LIMIT 10", "source_tables": ["transaction", "customers"]}, "evidence": "top 10 spenders refers to MAX(PurchasePrice) LIMIT 10;"}
{"sample_id": 5345, "db_id": "beer_factory", "final": {"question": "List out root beer brand that is not caffeinated and not containing cane sugar. What is the total amount sold for this products?", "sql": "SELECT T1.BrandName, SUM(T3.PurchasePrice) FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID INNER JOIN 'transaction' AS T3 ON T2.RootBeerID = T3.RootBeerID WHERE T1.CaneSugar = 'FALSE' AND T1.Caffeinated = 'FALSE' GROUP BY T1.BrandName", "source_tables": ["rootbeer", "rootbeerbrand", "transaction"]}, "evidence": "root beer brand refers to BrandName; not caffeinated refers to Caffeinated = 'FALSE'; not containing cane sugar refers to CaneSugar = 'FALSE'; total amount sold = SUM(PurchasePrice);"}
{"sample_id": 5346, "db_id": "beer_factory", "final": {"question": "Which of the root beer brand have the lowest purchase?", "sql": "SELECT T2.BrandName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID GROUP BY T2.BrandID ORDER BY COUNT(T1.BrandID) LIMIT 1", "source_tables": ["rootbeer", "rootbeerbrand"]}, "evidence": "root beer brand refers to BrandName; lowest purchase refers to MIN(COUNT(BrandID));"}
{"sample_id": 5347, "db_id": "beer_factory", "final": {"question": "What is the best seller root beer brand and what is the average star rating for this root beer?", "sql": "SELECT T1.BrandID, AVG(T1.StarRating) FROM rootbeerreview AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID GROUP BY T3.BrandID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1", "source_tables": ["rootbeerreview", "rootbeerbrand", "transaction"]}, "evidence": "best seller root beer refers to MAX(COUNT(BrandID)); average star rating = AVG(StarRating);"}
{"sample_id": 5348, "db_id": "beer_factory", "final": {"question": "What is the percentage difference of River City sale compare to Frostie?", "sql": "SELECT CAST((SUM(CASE WHEN T3.BrandName = 'River City' THEN T2.PurchasePrice ELSE 0 END) - SUM(CASE WHEN T3.BrandName = 'Frostie' THEN T2.PurchasePrice ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T3.BrandName = 'Frostie' THEN T2.PurchasePrice ELSE 0 END) FROM rootbeer AS T1 INNER JOIN 'transaction' AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID", "source_tables": ["rootbeer", "rootbeerbrand", "transaction"]}, "evidence": "percentage difference = (DIVIDE(MULTIPLY(SUBTRACT(SUM(PurchasePrice WHERE BrandName = 'River City'), SUM(PurchasePrice WHERE BrandName = 'Frostie')), 100), SUM(PurchasePrice WHERE BrandName = 'Frostie'))); River City refers to BrandName = 'River City'; Frostie refers to BrandName = 'Frostie';"}
{"sample_id": 5349, "db_id": "beer_factory", "final": {"question": "Please name all of the cities in California.", "sql": "SELECT DISTINCT City FROM customers WHERE State = 'CA'", "source_tables": ["customers"]}, "evidence": "California refers to State = 'CA';"}
{"sample_id": 5350, "db_id": "beer_factory", "final": {"question": "What is the percentage of female customers who subscribed to the email list?", "sql": "SELECT CAST(COUNT(CASE WHEN Gender = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(SubscribedToEmailList) FROM customers WHERE SubscribedToEmailList = 'TRUE'", "source_tables": ["customers"]}, "evidence": "percentage = MULTIPLY(DIVIDE(COUNT(CustomerID WHERE Gender = 'F'), COUNT(CustomerID) WHERE SubscribedToEmailList = 'TRUE'), 1.0); female refers to Gender = 'F'; subscribed to the email list refers to SubscribedToEmailList = 'TRUE';"}
{"sample_id": 5351, "db_id": "beer_factory", "final": {"question": "Which type of card did Dick Ruthven use to pay for all of his transactions?", "sql": "SELECT DISTINCT T2.CreditCardType FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Dick' AND T1.Last = 'Ruthven'", "source_tables": ["transaction", "customers"]}, "evidence": "type of card refers to CreditCardType;"}
{"sample_id": 5352, "db_id": "beer_factory", "final": {"question": "How many transactions were made at Sac State Union?", "sql": "SELECT COUNT(T1.TransactionID) FROM 'transaction' AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.LocationName = 'Sac State Union'", "source_tables": ["location", "transaction"]}, "evidence": "Sac State Union refers to LocationName = 'Sac State Union';"}
{"sample_id": 5353, "db_id": "beer_factory", "final": {"question": "How many stars did Urijah Faber rate for Frostie?", "sql": "SELECT T2.StarRating FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T2.BrandID = T3.BrandID WHERE T1.First = 'Urijah' AND T1.Last = 'Faber' AND T3.BrandName = 'Frostie'", "source_tables": ["rootbeerreview", "rootbeerbrand", "customers"]}, "evidence": "stars refers to StarRating; Frostie refers to BrandName = 'Frostie';"}
{"sample_id": 5354, "db_id": "beer_factory", "final": {"question": "Which brand has the lowest star rating with a \"Too spicy!\" review?", "sql": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T2.BrandID = T1.BrandID WHERE T2.StarRating = 1 AND T2.Review = 'Too Spicy!'", "source_tables": ["rootbeerreview", "rootbeerbrand"]}, "evidence": "lowest star rating refers to MIN(StarRating); \"Too spicy!\" review refers to Review = 'Too Spicy!';"}
{"sample_id": 5355, "db_id": "beer_factory", "final": {"question": "How many purchases were made at Sac State American River Courtyard using Master Card?", "sql": "SELECT COUNT(T1.TransactionID) FROM 'transaction' AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.LocationName = 'Sac State American River Courtyard' AND T1.CreditCardType = 'MasterCard'", "source_tables": ["location", "transaction"]}, "evidence": "Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard'; Master Card refers to CreditCardType = 'MasterCard';"}
{"sample_id": 5356, "db_id": "beer_factory", "final": {"question": "Which brand in 2012 has the lowest star rating and contains cane sugar as well as honey?", "sql": "SELECT DISTINCT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T1.CaneSugar = 'TRUE' AND T1.Honey = 'TRUE' AND T2.StarRating = 1 AND T2.ReviewDate LIKE '2012%'", "source_tables": ["rootbeerreview", "rootbeerbrand"]}, "evidence": "brand refers to BrandName; in 2012 refers to ReviewDate LIKE '2012%'; lowest star rating refers to MIN(StarRating); contains cane sugar as well as honey refers to CaneSugar = 'TRUE' AND Honey = 'TRUE';"}
{"sample_id": 5357, "db_id": "beer_factory", "final": {"question": "What is the precise location of the place where Tommy Kono made a purchase in 2014?", "sql": "SELECT DISTINCT T1.Latitude, T1.Longitude FROM geolocation AS T1 INNER JOIN 'transaction' AS T2 ON T2.LocationID = T1.LocationID INNER JOIN customers AS T3 ON T3.CustomerID = T2.CustomerID WHERE T3.First = 'Tommy' AND T3.Last = 'Kono' AND T2.TransactionDate LIKE '2014%'", "source_tables": ["customers", "geolocation", "transaction"]}, "evidence": "precise location = Latitude, Longitude; in 2014 refers to TransactionDate LIKE '2014%';"}
{"sample_id": 5358, "db_id": "beer_factory", "final": {"question": "What is the email address of the customer who made a purchase in transaction 100016?", "sql": "SELECT T1.Email FROM customers AS T1 INNER JOIN 'transaction' AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.TransactionID = '100016'", "source_tables": ["transaction", "customers"]}, "evidence": "email address refers to Email; transaction 100016 refers to TransactionID = 100016;"}
{"sample_id": 5359, "db_id": "beer_factory", "final": {"question": "How many transactions were made to purchase a bottle of beer using American Express?", "sql": "SELECT COUNT(T1.RootBeerID) FROM rootbeer AS T1 INNER JOIN 'transaction' AS T2 ON T1.RootBeerID = T2.RootBeerID WHERE T1.ContainerType = 'Bottle' AND T2.CreditCardType = 'American Express'", "source_tables": ["rootbeer", "transaction"]}, "evidence": "bottle of beer refers to ContainerType = 'Bottle'; American Express refers to CreditCardType = 'American Express';"}
{"sample_id": 5360, "db_id": "beer_factory", "final": {"question": "Which location sold more bottles of beer?", "sql": "SELECT T2.LocationName FROM rootbeer AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.ContainerType = 'Bottle' GROUP BY T2.LocationID ORDER BY COUNT(T1.LocationID) DESC LIMIT 1", "source_tables": ["rootbeer", "location"]}, "evidence": "location refers to LocationName; bottle of beer refers to ContainerType = 'Bottle'; location that sold more bottles of beer refers to MAX(COUNT(LocationID WHERE ContainerType = 'Bottle'));"}
{"sample_id": 5361, "db_id": "beer_factory", "final": {"question": "Please name any three root beer brands that have the highest market evaluation and acceptance.", "sql": "SELECT DISTINCT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5 LIMIT 3", "source_tables": ["rootbeerreview", "rootbeerbrand"]}, "evidence": "root beer brands refers to BrandName; highest market evaluation and acceptance refers to MAX(COUNT(StarRating = 5));"}
{"sample_id": 5362, "db_id": "beer_factory", "final": {"question": "What is the precise location of the Sac State American River Courtyard?", "sql": "SELECT T2.Latitude, T2.Longitude FROM location AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID WHERE T1.LocationName = 'Sac State American River Courtyard'", "source_tables": ["geolocation", "location"]}, "evidence": "precise location = Latitude, Longitude; Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard';"}
{"sample_id": 5448, "db_id": "sales", "final": {"question": "What is the name of the sales person who handled the highest number of sales?", "sql": "SELECT T1.FirstName, T1.MiddleInitial, T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T2.SalesPersonID = T1.EmployeeID GROUP BY T2.SalesPersonID, T1.FirstName, T1.MiddleInitial, T1.LastName ORDER BY COUNT(T2.SalesID) DESC LIMIT 1", "source_tables": ["employees", "sales"]}, "evidence": "name of the sales person = FirstName, MiddleInitial, LastName; highest number of sales refers to MAX(COUNT(SalesID));"}
{"sample_id": 5449, "db_id": "sales", "final": {"question": "What is the full name of the customer who purchased the highest amount of total price in a single purchase?", "sql": "SELECT T2.FirstName, T2.MiddleInitial, T2.LastName FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T1.ProductID = T3.ProductID GROUP BY T1.SalesID, T1.Quantity, T3.Price, FirstName, MiddleInitial, LastName ORDER BY T1.Quantity * T3.Price DESC LIMIT 1", "source_tables": ["sales", "products", "customers"]}, "evidence": "full name of the customer = FirstName, MiddleInitial, LastName; highest amount of total price refers to MAX(MULTIPLY(Quantity, Price));"}
{"sample_id": 5450, "db_id": "sales", "final": {"question": "How many \"Mountain-500 Black 42\" were sold in total?", "sql": "SELECT SUM(T2.Quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Mountain-500 Black, 42'", "source_tables": ["sales", "products"]}, "evidence": "Mountain-500 Black 42' is name of product; sold in total = SUM(Quantity);"}
{"sample_id": 5451, "db_id": "sales", "final": {"question": "How much is the total amount of sales handled by Heather McBadden?", "sql": "SELECT SUM(T2.Quantity * T3.Price) FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.FirstName = 'Heather' AND T1.LastName = 'McBadden'", "source_tables": ["employees", "sales", "products"]}, "evidence": "total amount of sales = SUM(MULTIPLY(Quantity, Price));"}
{"sample_id": 5452, "db_id": "sales", "final": {"question": "How many \"Mountain-100 Silver, 38\" were sold by Stearns MacFeather?", "sql": "SELECT SUM(T2.Quantity) FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.FirstName = 'Stearns' AND T1.LastName = 'MacFeather' AND T3.Name = 'Mountain-100 Silver, 38'", "source_tables": ["employees", "sales", "products"]}, "evidence": "Mountain-100 Silver, 38' is name of product;"}
{"sample_id": 5453, "db_id": "sales", "final": {"question": "How many type of products did Dalton M. Coleman purchase?", "sql": "SELECT COUNT(T2.ProductID) FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.FirstName = 'Dalton' AND T1.MiddleInitial = 'M' AND T1.LastName = 'Coleman'", "source_tables": ["sales", "customers"]}, "evidence": ""}
{"sample_id": 5454, "db_id": "sales", "final": {"question": "What are the full names of the top 3 employees who handled the highest number of sales?", "sql": "SELECT T1.FirstName, T1.MiddleInitial, T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID GROUP BY T2.SalesPersonID, T1.FirstName, T1.MiddleInitial, T1.LastName ORDER BY COUNT(T2.SalesID) DESC LIMIT 3", "source_tables": ["employees", "sales"]}, "evidence": "full names of employees = FirstName, MiddleInitital, LastName; highest number of sales refers to MAX(COUNT(SalesID));"}
{"sample_id": 5455, "db_id": "sales", "final": {"question": "Among the \"Mountain-500 Black\" product types, which type was purchased the most?", "sql": "SELECT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name LIKE 'Mountain-500 Black%' GROUP BY T2.Quantity, T1.Name ORDER BY SUM(T2.Quantity) DESC LIMIT 1", "source_tables": ["sales", "products"]}, "evidence": "Mountain-500 Black product types refers to Name like 'Mountain-500 Black%'; purchased the most refers to MAX(SUM(Quantity));"}
{"sample_id": 5456, "db_id": "sales", "final": {"question": "How many employees sold \"ML Road Frame-W - Yellow, 40\"?", "sql": "SELECT COUNT(T2.SalesPersonID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'ML Road Frame-W - Yellow, 40'", "source_tables": ["sales", "products"]}, "evidence": "ML Road Frame-W - Yellow, 40' is name of product;"}
{"sample_id": 5457, "db_id": "sales", "final": {"question": "How many chainring bolts were sold under sales ID 551971?", "sql": "SELECT T1.Quantity FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Chainring Bolts' AND T1.SalesID = 551971", "source_tables": ["sales", "products"]}, "evidence": "Chainring Bolts' is name of product;"}
{"sample_id": 5458, "db_id": "sales", "final": {"question": "How many employees sold over 20,000 quantities of \"Touring-2000 Blue, 50\"?", "sql": "SELECT COUNT(*) FROM ( SELECT SUM(Quantity) FROM Sales WHERE ProductID IN ( SELECT ProductID FROM Products WHERE Name = 'Touring-2000 Blue, 50' ) GROUP BY Quantity, SalesPersonID HAVING SUM(Quantity) > 20000 )", "source_tables": ["sales", "products"]}, "evidence": "over 20,000 quantities refers to Quantity > 20000; 'Touring-2000 Blue, 50' is name of product;"}
{"sample_id": 5459, "db_id": "sales", "final": {"question": "What is the total cost of all the \"Road-650, Red, 60\" products that Abraham E. Bennet sold?", "sql": "SELECT SUM(T2.Quantity * T3.Price) FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.FirstName = 'Abraham' AND T1.MiddleInitial = 'e' AND T1.LastName = 'Bennet' AND T3.Name = 'Road-650 Red, 60'", "source_tables": ["employees", "sales", "products"]}, "evidence": "total cost = SUM(MULTIPLY(Quantity, Price)); 'Road-650, Red, 60' is name of product;"}
{"sample_id": 5460, "db_id": "sales", "final": {"question": "Which product has the highest total amount of quantity sold? Calculate its overall total price.", "sql": "SELECT T1.Name, SUM(T2.Quantity * T1.Price) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductID, T1.Name ORDER BY SUM(T2.Quantity) DESC LIMIT 1", "source_tables": ["sales", "products"]}, "evidence": "highest total amount of quantity refers to MAX(Quantity); overall total price = SUM(MULTIPLY(Quantity, Price));"}
{"sample_id": 5461, "db_id": "sales", "final": {"question": "List the first name of all the customers whose last name is Chen.", "sql": "SELECT FirstName, LastName FROM Customers WHERE LastName = 'Chen'", "source_tables": ["customers"]}, "evidence": ""}
{"sample_id": 5462, "db_id": "sales", "final": {"question": "Among the employee names, what is the most common middle initial?", "sql": "SELECT MiddleInitial FROM Employees GROUP BY MiddleInitial ORDER BY COUNT(MiddleInitial) DESC LIMIT 1", "source_tables": ["employees"]}, "evidence": "most common middle initial refers to MAX(COUNT(MiddleInitial));"}
{"sample_id": 5463, "db_id": "sales", "final": {"question": "What is the average price of products that cost between 100 and 200?", "sql": "SELECT AVG(Price) FROM Products WHERE Price BETWEEN 100 AND 200", "source_tables": ["products"]}, "evidence": "average price = DIVIDE(SUM(Price, COUNT(Price))); cost refers to Price; Price BETWEEN 100 AND 200;"}
{"sample_id": 5464, "db_id": "sales", "final": {"question": "Find and list the full name of customers who bought products above-average quantity.", "sql": "SELECT T2.FirstName, T2.MiddleInitial, T2.LastName FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Quantity HAVING T1.Quantity > ( SELECT AVG(Quantity) FROM Sales )", "source_tables": ["sales", "customers"]}, "evidence": "full name of the customer = FirstName, MiddleInitial, LastName; above-average quantity = Quantity > AVG(Quantity);"}
{"sample_id": 5465, "db_id": "sales", "final": {"question": "Give the full name of the customer who bought the most amount of products.", "sql": "SELECT T3.FirstName, T3.MiddleInitial, T3.LastName FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID ORDER BY T2.Quantity * T1.Price DESC LIMIT 1", "source_tables": ["sales", "products", "customers"]}, "evidence": "full name of the customer = FirstName, MiddleInitial, LastName; most amount of products refers to MAX(MULTIPLY(Quantity, Price));"}
{"sample_id": 5466, "db_id": "sales", "final": {"question": "Of the employees who sold Blade, who has the most amount of sales?", "sql": "SELECT T1.FirstName, T1.MiddleInitial, T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID ORDER BY T2.Quantity * T3.Price DESC LIMIT 1", "source_tables": ["employees", "sales", "products"]}, "evidence": "Blade' is name of product; most amount of sales refers to MAX(MULTIPLY(Quantity, Price));"}
{"sample_id": 5467, "db_id": "sales", "final": {"question": "List the full name of customers who spend more than 50,000 in descending order the amount spend.", "sql": "SELECT DISTINCT T3.FirstName, T3.MiddleInitial, T3.LastName FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T2.Quantity * T1.Price > 50000", "source_tables": ["sales", "products", "customers"]}, "evidence": "full name of the customer = FirstName, MiddleInitial, LastName; more than 50,000 in the amount refers to MULTIPLY(Quantity, Price) > 50000;"}
{"sample_id": 5468, "db_id": "sales", "final": {"question": "Name the product that sold the most quantity.", "sql": "SELECT T2.Name FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Quantity DESC LIMIT 1", "source_tables": ["sales", "products"]}, "evidence": "most quantity refers to MAX(Quantity);"}
{"sample_id": 5469, "db_id": "sales", "final": {"question": "Find and list the products that sold below the average quantity.", "sql": "SELECT DISTINCT T2.Name FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Quantity < ( SELECT AVG(Quantity) FROM Sales )", "source_tables": ["sales", "products"]}, "evidence": "below the average quantity refers to Quantity < AVG(Quantity);"}
{"sample_id": 5555, "db_id": "menu", "final": {"question": "What are the names of the dishes in the menu sponsored by The Society of Cumberland that was created for the 19th reunion at Grand Pacific Hotel in Chicago, Illinois?", "sql": "SELECT T4.name FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id INNER JOIN MenuItem AS T3 ON T2.id = T3.menu_page_id INNER JOIN Dish AS T4 ON T3.dish_id = T4.id WHERE T1.sponsor = 'THE SOCIETY OF THE CUMBERLAND' AND T1.event = '19NTH REUNION' AND T1.place = 'GRAND PACIFIC HOTEL,CHICAGO,ILL'", "source_tables": ["menupage", "menuitem", "dish", "menu"]}, "evidence": "sponsored by The Society of Cumberland refers to sponsor = 'THE SOCIETY OF THE CUMBERLAND'; created for the 19th reunion refers to event = '19NTH REUNION'; Grand Pacific Hotel in Chicago, Illinois refers to place = 'GRAND PACIFIC HOTEL, CHICAGO, ILL';"}
{"sample_id": 5556, "db_id": "menu", "final": {"question": "Among the menus that include baked apples with cream, who is the sponsor of the menu with the highest price?", "sql": "SELECT T4.sponsor FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id INNER JOIN Menu AS T4 ON T4.id = T1.menu_id WHERE T3.name = 'Baked apples with cream' AND T3.id = 107 ORDER BY T2.price DESC LIMIT 1", "source_tables": ["menupage", "dish", "menu", "menuitem"]}, "evidence": "baked apples with cream is a name of dish; highest price refers to MAX(price);"}
{"sample_id": 5557, "db_id": "menu", "final": {"question": "What is the average number of dishes per menu in the Souper de Luxe menus? Identify what is the name of the dish that appeared the most in all of its menus.", "sql": "SELECT COUNT(*), T1.dish_id FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T3.name = 'Souper de Luxe' GROUP BY T3.id ORDER BY COUNT(T1.dish_id) DESC LIMIT 1", "source_tables": ["menupage", "dish", "menu", "menuitem"]}, "evidence": "average number of dishes per menu = DIVIDE(COUNT(dish_id), COUNT(menu_page_id)); Souper de Luxe is a name of menu; dish that appeared the most in all of its menus refers to MAX(COUNT(dish_id));"}
{"sample_id": 5558, "db_id": "menu", "final": {"question": "Please list the IDs of all the menus that are DIYs of the restaurant.", "sql": "SELECT id FROM Menu WHERE sponsor IS NULL", "source_tables": ["menu"]}, "evidence": "menus that are DIYs of the restaurant refers to sponsor is null;"}
{"sample_id": 5559, "db_id": "menu", "final": {"question": "How many menus were created for lunch?", "sql": "SELECT COUNT(*) FROM Menu WHERE event = 'LUNCH'", "source_tables": ["menu"]}, "evidence": "created for lunch refers to event = 'LUNCH';"}
{"sample_id": 5560, "db_id": "menu", "final": {"question": "Among the menus with over 10 pages, how many of them have over 20 dishes?", "sql": "SELECT COUNT(*) FROM Menu WHERE page_count > 10 AND dish_count > 20", "source_tables": ["menu"]}, "evidence": "menus with over 10 pages refers to page_count > 10; over 20 dishes refers to dish_count > 20;"}
{"sample_id": 5561, "db_id": "menu", "final": {"question": "What is the ID of the menu with the most number of dishes?", "sql": "SELECT id FROM Menu ORDER BY dish_count DESC LIMIT 1", "source_tables": ["menu"]}, "evidence": "most number of dishes refers to MAX(COUNT(dish_count));"}
{"sample_id": 5562, "db_id": "menu", "final": {"question": "How many dishes are there on the menu \"Zentral Theater Terrace\"?", "sql": "SELECT COUNT(*) FROM Menu WHERE name = 'Zentral Theater Terrace'", "source_tables": ["menu"]}, "evidence": "Zentral Theater Terrace is a name of menu;"}
{"sample_id": 5563, "db_id": "menu", "final": {"question": "Among the menus that did not support taking out or booking in advance, how many of them were created before 1950?", "sql": "SELECT COUNT(*) FROM Menu WHERE call_number IS NULL AND strftime('%Y', date) < '1950'", "source_tables": ["menu"]}, "evidence": "did not support taking out or booking in advance refers to call_number is null; created before 1950 refers to strftime('%Y', date) < '1950';"}
{"sample_id": 5564, "db_id": "menu", "final": {"question": "What is the image ID of page 1 of the menu \"Zentral Theater Terrace\"?", "sql": "SELECT T2.image_id FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.name = 'Zentral Theater Terrace' AND T2.page_number = 1", "source_tables": ["menupage", "menu"]}, "evidence": "page 1 refers to page_number = 1; Zentral Theater Terrace is a name of menu;"}
{"sample_id": 5565, "db_id": "menu", "final": {"question": "To which menu does the menu page image ID5189412 belong? Please give its name.", "sql": "SELECT T1.name FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T2.image_id = 5189412", "source_tables": ["menupage", "menu"]}, "evidence": "FALSE;"}
{"sample_id": 5566, "db_id": "menu", "final": {"question": "Which menu page has a bigger width, page 1 of \"Zentral Theater Terrace\" or page 1 of \"Young's Hotel\"?", "sql": "SELECT CASE WHEN SUM(CASE WHEN T1.name = 'Zentral Theater Terrace' THEN T2.full_width ELSE 0 END) - SUM(CASE WHEN T1.name = 'Young''s Hotel' THEN T2.full_width ELSE 0 END) > 0 THEN 'Zentral Theater Terrace' ELSE 'Young''s Hotel' END FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id", "source_tables": ["menupage", "menu"]}, "evidence": "if SUM(full_width where page_number = 1 AND menu.name = 'Zentral Theater Terrace') > SUM(full_width where page_number = 1 AND menu.name = 'Young''s Hotel'), it means Zentral Theater Terrace menu page is bigger than Young's Hotel; if SUM(full_width WHERE page_number = 1 AND menu.name = 'Young''s Hotel') < SUM(full_width WHERE page_number = 1 AND menu.name = 'Zentral Theater Terrace'), it means Young's Hotel menu page is bigger than Zentral Theater Terrace;"}
{"sample_id": 5567, "db_id": "menu", "final": {"question": "Which menu page of \"Ritz Carlton\" has the biggest height?", "sql": "SELECT T1.page_number FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T2.name = 'Ritz Carlton' ORDER BY T1.full_height DESC LIMIT 1", "source_tables": ["menupage", "menu"]}, "evidence": "Ritz Carlton is a name of menu; biggest height refers to MAX(full_height);"}
{"sample_id": 5568, "db_id": "menu", "final": {"question": "Among the menu pages of \"Ritz Carlton\", how many of them have a width of over 1000?", "sql": "SELECT SUM(CASE WHEN T1.name = 'Ritz Carlton' THEN 1 ELSE 0 END) FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T2.full_width > 1000", "source_tables": ["menupage", "menu"]}, "evidence": "Ritz Carlton is a name of menu; width of over 2490 refers to full_width > 1000;"}
{"sample_id": 5569, "db_id": "menu", "final": {"question": "How many dishes are there on page 1 of menu ID12882?", "sql": "SELECT SUM(CASE WHEN T1.page_number = 1 THEN 1 ELSE 0 END) FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id WHERE T1.menu_id = 12882", "source_tables": ["menupage", "menuitem"]}, "evidence": "page 1 refers to page_number = 1;"}
{"sample_id": 5570, "db_id": "menu", "final": {"question": "Please list the names of all the dishes on page 1 of menu ID12882.", "sql": "SELECT T3.name FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T1.menu_id = 12882 AND T1.page_number = 1", "source_tables": ["menupage", "dish", "menuitem"]}, "evidence": "page 1 refers to page_number = 1;"}
{"sample_id": 5571, "db_id": "menu", "final": {"question": "Please list the page numbers of all the menu pages on which the dish \"Chicken gumbo\" had appeared.", "sql": "SELECT T1.page_number FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T3.name = 'Chicken gumbo'", "source_tables": ["menupage", "dish", "menuitem"]}, "evidence": "Chicken gumbo is a name of dish;"}
{"sample_id": 5572, "db_id": "menu", "final": {"question": "Among the menu pages on which the dish \"Chicken gumbo\" had appeared, what is the menu ID of the one with the biggest width?", "sql": "SELECT T1.id FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T3.name = 'Chicken gumbo' ORDER BY T1.full_width DESC LIMIT 1", "source_tables": ["menupage", "dish", "menuitem"]}, "evidence": "Chicken gumbo is a name of dish; biggest width refers to MAX(full_width);"}
{"sample_id": 5573, "db_id": "menu", "final": {"question": "For how many times had the dish \"Chicken gumbo\" appeared on a menu page?", "sql": "SELECT SUM(CASE WHEN T1.name = 'Chicken gumbo' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id", "source_tables": ["dish", "menuitem"]}, "evidence": "Chicken gumbo is a name of dish;"}
{"sample_id": 5574, "db_id": "menu", "final": {"question": "Among the menu pages on which the dish \"Paysanne Soup\" had appeared, how many of them had a stable price for the dish?", "sql": "SELECT SUM(CASE WHEN T1.name = 'Paysanne Soup' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.highest_price IS NULL", "source_tables": ["dish", "menuitem"]}, "evidence": "Paysanne Soup is a name of dish; stable price refers to highest_price is null;"}
{"sample_id": 5575, "db_id": "menu", "final": {"question": "What is the highest price of the dish \"Chicken gumbo\" on a menu page?", "sql": "SELECT T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Chicken gumbo' ORDER BY T2.price DESC LIMIT 1", "source_tables": ["dish", "menuitem"]}, "evidence": "highest price refers to MAX(price); Chicken gumbo is a name of dish;"}
{"sample_id": 5576, "db_id": "menu", "final": {"question": "How much space does page 1 of the menu \"Zentral Theater Terrace\" cover?", "sql": "SELECT T2.full_height * T2.full_width FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.name = 'Zentral Theater Terrace' AND T2.page_number = 1", "source_tables": ["menupage", "menu"]}, "evidence": "how much space = MULTIPLY(full_height, full_width); Zentral Theater Terrace is a name of menu;"}
{"sample_id": 5577, "db_id": "menu", "final": {"question": "What is the average number of dishes per menu page of menu ID12882?", "sql": "SELECT CAST(COUNT(dish_id) AS REAL) / COUNT(T3.page_count) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id WHERE T2.menu_id = 12882", "source_tables": ["menupage", "menu", "menuitem"]}, "evidence": "average number of dishes per menu = DIVIDE(COUNT(dish_id), COUNT(page_count));"}
{"sample_id": 5662, "db_id": "shipping", "final": {"question": "Calculate the percentage of the weight of goods being transported by Zachery Hicks to California in year 2016.", "sql": "SELECT CAST(SUM(CASE WHEN T2.first_name = 'Zachery' AND T2.last_name = 'Hicks' THEN T1.weight ELSE 0 END) AS REAL) * 100 / SUM(T1.weight) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE STRFTIME('%Y', T1.ship_date) = '2016'", "source_tables": ["driver", "shipment"]}, "evidence": "\"California\" is the state; in 2016 refers to CAST (ship_date AS DATE) = 2016; percentage = Divide (Sum(weight where first_name = 'Zachery' AND last_name = 'Hicks'), Sum(weight)) * 100"}
{"sample_id": 5663, "db_id": "shipping", "final": {"question": "How many shipments were shipped by the driver named Zachary Hicks?", "sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.driver_id = 23", "source_tables": ["driver", "shipment"]}, "evidence": ""}
{"sample_id": 5664, "db_id": "shipping", "final": {"question": "What is the ship ID of shipments shipped to the city with the largest area?", "sql": "SELECT T1.ship_id FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T2.area DESC LIMIT 1", "source_tables": ["city", "shipment"]}, "evidence": "city with largest area refers to Max(area)"}
{"sample_id": 5665, "db_id": "shipping", "final": {"question": "List the drivers who shipped the shipments to the least populated city.", "sql": "SELECT T3.first_name, T3.last_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN driver AS T3 ON T3.driver_id = T1.driver_id ORDER BY T2.population ASC LIMIT 1", "source_tables": ["city", "driver", "shipment"]}, "evidence": "least populated city refers to Min(population); name refers to first_name, last_name"}
{"sample_id": 5666, "db_id": "shipping", "final": {"question": "Among the shipments shipped to Cicero, Illinois, how many shipments weighed between 9,000 to 15,000?", "sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.city_name = 'Cicero' AND T2.state = 'Illinois' AND T1.weight BETWEEN 9000 AND 15000", "source_tables": ["city", "shipment"]}, "evidence": "\"Cicero\" is the city; 'Illinois' is the state"}
{"sample_id": 5667, "db_id": "shipping", "final": {"question": "What model year of truck delivered the ship ID 1233?", "sql": "SELECT T1.model_year FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1233'", "source_tables": ["truck", "shipment"]}, "evidence": ""}
{"sample_id": 5668, "db_id": "shipping", "final": {"question": "What is the address of the driver that delivers the shipment for the customer lives at 7052 Carroll Road, San Diego, California?", "sql": "SELECT T3.address FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id INNER JOIN driver AS T3 ON T3.driver_id = T1.driver_id WHERE T2.address = '7052 Carroll Road' AND T2.city = 'San Diego' AND T2.state = 'CA'", "source_tables": ["customer", "driver", "shipment"]}, "evidence": "\"7052 Carroll Road\" is the address of customer; 'San Diego' is the city; 'California' is the state"}
{"sample_id": 5669, "db_id": "shipping", "final": {"question": "Among the shipments delivered by Maria Craft, how many shipments were delivered in 2017?", "sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.first_name = 'Maria' AND T2.last_name = 'Craft' AND STRFTIME('%Y', T1.ship_date) = '2017'", "source_tables": ["driver", "shipment"]}, "evidence": "delivered in 2017 refers to Cast(ship_date AS DATE) = 2017"}
{"sample_id": 5670, "db_id": "shipping", "final": {"question": "What is the truck's model year used to ship the ship ID 1245?", "sql": "SELECT T1.model_year FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1245'", "source_tables": ["truck", "shipment"]}, "evidence": ""}
{"sample_id": 5671, "db_id": "shipping", "final": {"question": "Where does the driver of ship ID 1127 live?", "sql": "SELECT T2.address FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = '1127'", "source_tables": ["driver", "shipment"]}, "evidence": "live refers to address"}
{"sample_id": 5672, "db_id": "shipping", "final": {"question": "Give the annual revenue of the customer of ship ID 1047.", "sql": "SELECT T2.annual_revenue FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T1.ship_id = '1047'", "source_tables": ["customer", "shipment"]}, "evidence": ""}
{"sample_id": 5673, "db_id": "shipping", "final": {"question": "What is the weight of the shipment delivered by Andrea Simons on March 7, 2016?", "sql": "SELECT T1.weight FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.first_name = 'Andrea' AND T2.last_name = 'Simons' AND T1.ship_date = '2016-03-07'", "source_tables": ["driver", "shipment"]}, "evidence": "on March 7, 2016 refers to ship_date = '2016-03-07'"}
{"sample_id": 5674, "db_id": "shipping", "final": {"question": "Provide the destination city of the shipment shipped by January 16, 2017.", "sql": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_date = '2017-01-16'", "source_tables": ["city", "shipment"]}, "evidence": "January 16, 2017 refers to ship_date = '2017-01-16'; city refers to city_name"}
{"sample_id": 5675, "db_id": "shipping", "final": {"question": "How many shipments were delivered to a customer from New York?", "sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.state = 'NY'", "source_tables": ["customer", "shipment"]}, "evidence": "\"New York\" refers to state = 'NY'"}
{"sample_id": 5676, "db_id": "shipping", "final": {"question": "What is the name of the customer of ship ID 1147?", "sql": "SELECT T2.cust_name FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T1.ship_id = '1147'", "source_tables": ["customer", "shipment"]}, "evidence": "name of customer refers to cust_name"}
{"sample_id": 5677, "db_id": "shipping", "final": {"question": "List the ship ID of shipments shipped to the most populated city.", "sql": "SELECT T1.ship_id FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T2.population DESC LIMIT 1", "source_tables": ["city", "shipment"]}, "evidence": "most populated city refers to Max(population)"}
{"sample_id": 5678, "db_id": "shipping", "final": {"question": "List the driver's name of the shipment shipped on February 22, 2016.", "sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_date = '2016-02-22'", "source_tables": ["driver", "shipment"]}, "evidence": "on February 22, 2016 refers to ship_date = '2016-02-22'; driver's name refers to first_name, last_name"}
{"sample_id": 5679, "db_id": "shipping", "final": {"question": "List the weight of the customer's shipment with annual revenue of 39448581.", "sql": "SELECT T1.weight FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.annual_revenue = 39448581", "source_tables": ["customer", "shipment"]}, "evidence": ""}
{"sample_id": 5680, "db_id": "shipping", "final": {"question": "What is the customer's address for the shipment with ship ID 1117?", "sql": "SELECT T2.address FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T1.ship_id = '1117'", "source_tables": ["customer", "shipment"]}, "evidence": ""}
{"sample_id": 5681, "db_id": "shipping", "final": {"question": "Among the shipments to a customer from Texas, what percentage of the shipments shipped in 2017?", "sql": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', T1.ship_date) = '2017' THEN 1 ELSE 0 END) AS REAL ) * 100 / COUNT(*) FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.state = 'TX'", "source_tables": ["customer", "shipment"]}, "evidence": "\"Texas\" refers to state = 'TX'; shipped in 2017 refers to CAST(ship_date AS DATE) = 2017; percentage = Divide (Count (ship_id where CAST(ship_date AS DATE) = 2017), Count (ship_id)) * 100"}
{"sample_id": 5682, "db_id": "shipping", "final": {"question": "Calculate the difference between the number of shipments shipped by the truck with the model year 2005 and model year 2006.", "sql": "SELECT SUM(CASE WHEN T1.model_year = '2005' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.model_year = '2006' THEN 1 ELSE 0 END) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id", "source_tables": ["truck", "shipment"]}, "evidence": "\"2005\" and \"2006\" are both model_year of truck; difference = Subtract (Count (ship_id where model_year = 2005), Count(ship_id where model_year = 2006))"}
{"sample_id": 5683, "db_id": "shipping", "final": {"question": "List the driver's name of the shipment with a weight greater than 95% of the average weight of all shipments.", "sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.weight * 100 > ( SELECT 95 * AVG(weight) FROM shipment )", "source_tables": ["driver", "shipment"]}, "evidence": "weight greater than 95% of average weight refers to weight > Multiply (AVG(weight), 0.95); driver name refers to first_name, last_name"}
{"sample_id": 5792, "db_id": "language_corpus", "final": {"question": "How many occurrences does the word \"panajot\" have?", "sql": "SELECT occurrences FROM words WHERE word = 'panajot'", "source_tables": ["words"]}, "evidence": "panajot refers to word = 'panajot'"}
{"sample_id": 5793, "db_id": "language_corpus", "final": {"question": "Which word has the time of occurrences as 340691?", "sql": "SELECT word FROM words WHERE occurrences = 340691", "source_tables": ["words"]}, "evidence": "occurrences of 340691 refers to occurrences = 340691"}
{"sample_id": 5794, "db_id": "language_corpus", "final": {"question": "State the word ID for \"periodograma\".", "sql": "SELECT wid FROM words WHERE word = 'periodograma'", "source_tables": ["words"]}, "evidence": "word ID refers to wid; periodograma refers to word = 'periodograma'"}
{"sample_id": 5795, "db_id": "language_corpus", "final": {"question": "For the biwords pair that appears \"116430\" times, what is the second word of the pair?", "sql": "SELECT T1.word FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w2nd WHERE T2.occurrences = 116430", "source_tables": ["biwords", "words"]}, "evidence": "the biwords pair that appears \"116430\" times refers to occurrences = 116430; second word of the pair refers to w2nd"}
{"sample_id": 5796, "db_id": "language_corpus", "final": {"question": "How many times does the word \"riu\" appears in the biwords pair?", "sql": "SELECT COUNT(T1.wid) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T1.word = 'riu'", "source_tables": ["biwords", "words"]}, "evidence": "riu refers to word = 'riu'; SUM(w1st where wid is word = 'riu' AND w2nd where wid is word = 'riu')"}
{"sample_id": 5797, "db_id": "language_corpus", "final": {"question": "Which word has the most appearances in the Wikipedia page with the title of \"Agricultura\"? Give the word ID.", "sql": "SELECT T2.wid FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.title = 'Agricultura' ORDER BY T2.occurrences DESC LIMIT 1", "source_tables": ["pages_words", "pages"]}, "evidence": "Agricultura refers to title = 'Agricultura'; the most appearances is MAX(pages_words_sampling.occurrences)"}
{"sample_id": 5798, "db_id": "language_corpus", "final": {"question": "How many appearances does the word ID No. 2823 have in the Wikipedia page \"Astre\"?", "sql": "SELECT SUM(T2.occurrences) FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.title = 'Astre' AND T2.wid = 2823", "source_tables": ["pages_words", "pages"]}, "evidence": "Astre refers to title = 'Astre'; word ID No. 2823 refers to wid = 2823; appearances refers to pages_words_sampling.occurrences"}
{"sample_id": 5799, "db_id": "language_corpus", "final": {"question": "In which Wikipedia page does the word ID No. 174 have the most appearances? Give the title.", "sql": "SELECT title FROM pages WHERE pid = ( SELECT pid FROM pages_words WHERE wid = 174 ORDER BY occurrences DESC LIMIT 1 )", "source_tables": ["pages_words", "pages"]}, "evidence": "word ID No. 174 refers to wid = 174; appearances refers to pages_words_sampling.occurrences"}
{"sample_id": 5800, "db_id": "language_corpus", "final": {"question": "How many times does the word \"her\u00f2dot\" appear in the Wikipedia page?", "sql": "SELECT COUNT(T2.occurrences) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'her\u00f2dot'", "source_tables": ["pages_words", "words"]}, "evidence": "her\u00f2dot refers to word = 'her\u00f2dot'; times appear refers to SUM(pid)"}
{"sample_id": 5801, "db_id": "language_corpus", "final": {"question": "Which word has the most appearances in the Wikipedia page revision ID No. 28278070? Give the word ID.", "sql": "SELECT pid FROM pages_words WHERE pid = ( SELECT pid FROM pages WHERE revision = 28278070 ) ORDER BY occurrences DESC LIMIT 1", "source_tables": ["pages_words", "pages"]}, "evidence": "the most appearances refers to MAX(occurrences); revision ID No. 28278070 refers to revision = 28278070; word ID refers to wid"}
{"sample_id": 5802, "db_id": "language_corpus", "final": {"question": "How many times does the biwords \"que gregorio\" appear in the language?", "sql": "SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'que' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'gregorio' )", "source_tables": ["biwords", "words"]}, "evidence": "que gregorio refers to w1st = wid where word = 'que' AND w2nd = wid where word = 'gregorio'; appear refers to biwords.occurrences"}
{"sample_id": 5803, "db_id": "language_corpus", "final": {"question": "How many biword pairs contain the word \"base\" as the second word?", "sql": "SELECT COUNT(w1st) FROM biwords WHERE w2nd = ( SELECT wid FROM words WHERE word = 'base' )", "source_tables": ["biwords", "words"]}, "evidence": "base refers to word = 'base'; SUM(w2nd) where w2nd = wid for word = 'base'"}
{"sample_id": 5804, "db_id": "language_corpus", "final": {"question": "How many times of repetition does the word \"exemple\" show in the Catalan language?", "sql": "SELECT T2.occurrences FROM words AS T1 INNER JOIN langs_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'exemple' AND T2.lid = 1", "source_tables": ["langs_words", "words"]}, "evidence": "exemple refers to word = 'exemple'; repetition refers to langs_words.occurrences; lid = 1 menas it's Catalan language"}
{"sample_id": 5805, "db_id": "language_corpus", "final": {"question": "Which word that has 274499 repetitions in the Catalan language?", "sql": "SELECT T1.word FROM words AS T1 INNER JOIN langs_words AS T2 ON T1.wid = T2.wid WHERE T2.occurrences = 274499 AND T2.lid = 1", "source_tables": ["langs_words", "words"]}, "evidence": "lid = 1 menas it's Catalan language; 274499 repetitions refers to occurrences = 274499"}
{"sample_id": 5806, "db_id": "language_corpus", "final": {"question": "How many times greater is the appearances of the biword pair \"a base\" than \"a decimal\"?", "sql": "SELECT CAST(occurrences AS REAL) / ( SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'a' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'decimal' ) ) FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'a' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'base' )", "source_tables": ["biwords", "words"]}, "evidence": "a, base AND decimal are words; wid is the ID of word; w1st is the first word of a biword pair; w2nd is the second word of a biword pair; appearances refers to biwords.occurrences; biword pair 'a base' refers to word = 'a' as w1st AND word = 'base' as w2nd; biword pair 'a decimal' refers to word = 'a' as w1st AND word = 'decimal' as w2nd; appearances of 'a base' greater than 'a decimal' refers to DIVIDE(SUBTRACT(biwords.occurrences'a base', biwords.occurrences'a decimal'), biwords.occurrences'a decimal')"}
{"sample_id": 5807, "db_id": "language_corpus", "final": {"question": "For the word \"grec\", what is the percentage of the appearances in the \"Art\" Wikipedia page have among all the appearances?", "sql": "SELECT CAST(SUM(CASE WHEN T3.title = 'Art' THEN T2.occurrences ELSE 0 END) AS REAL) * 100 / SUM(T2.occurrences) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'grec'", "source_tables": ["pages_words", "pages", "words"]}, "evidence": "grec refers to word = 'grec'; Art refers to title = 'Art'; percentage is DIVIDE(occurrences(grec), occurences(Art))*100"}
{"sample_id": 5808, "db_id": "language_corpus", "final": {"question": "How many Wikipedia pages with over 4000 different words are there on the Catalan language?", "sql": "SELECT COUNT(lid) FROM pages WHERE lid = 1 AND words > 4000", "source_tables": ["pages"]}, "evidence": "lid = 1 means it's Catalan language; over 4000 different words means words > 4000; Wikipedia pages refers to pid"}
{"sample_id": 5809, "db_id": "language_corpus", "final": {"question": "Please list the titles of all the Wikipedia pages on the Catalan language with 10 different words.", "sql": "SELECT title FROM pages WHERE lid = 1 AND words = 10 LIMIT 10", "source_tables": ["pages"]}, "evidence": "lid = 1 means it's Catalan language; 10 different words refers to words = 10; titles refers to title"}
{"sample_id": 5810, "db_id": "language_corpus", "final": {"question": "What is the word that occurs the most in the Catalan language?", "sql": "SELECT word FROM words WHERE occurrences = ( SELECT MAX(occurrences) FROM words )", "source_tables": ["words"]}, "evidence": "MAX(occurrences)"}
{"sample_id": 5811, "db_id": "language_corpus", "final": {"question": "Please list the titles of the top 3 Wikipedia pages with the most different words on the Catalan language.", "sql": "SELECT title FROM pages WHERE lid = 1 ORDER BY words DESC LIMIT 3", "source_tables": ["pages"]}, "evidence": "lid = 1 means it's Catalan language; with most different words refers to MAX(words)"}
{"sample_id": 5812, "db_id": "language_corpus", "final": {"question": "What is the revision ID for the page on Catalan titled \"Arqueologia\"?", "sql": "SELECT revision FROM pages WHERE lid = 1 AND title = 'Arqueologia'", "source_tables": ["pages"]}, "evidence": "lid = 1 means it's Catalan language; Arqueologia refers to title = 'Arqueologia'; revision ID refers to revision"}
{"sample_id": 5813, "db_id": "language_corpus", "final": {"question": "Among the wikipedia pages on Catalan with more than 300 different words, how many of them have a revision ID of over 28330000?", "sql": "SELECT COUNT(lid) FROM pages WHERE lid = 1 AND words > 300 AND revision > 28330000", "source_tables": ["pages"]}, "evidence": "lid = 1 means it's Catalan language; more than 300 different words refers to words > 300; revision ID of over 28330000 refers to revision > 28330000"}
{"sample_id": 5814, "db_id": "language_corpus", "final": {"question": "Please list the page IDs of all the Wikipedia pages that have the word \"nombre\" appeared on it.", "sql": "SELECT T2.pid FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'nombre'", "source_tables": ["pages_words", "words"]}, "evidence": "nombre refers to word = 'nombre'; page IDs refers to pid"}
{"sample_id": 5815, "db_id": "language_corpus", "final": {"question": "How many Wikipedia pages on Catalan are there with the word \"nombre\" appearing for more than 5 times?", "sql": "SELECT COUNT(T2.pid) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'nombre' AND T2.occurrences > 5", "source_tables": ["pages_words", "words"]}, "evidence": "nombre refers to word = 'nombre'; appear for more than 5 times refers to\u00a0 pages_words.occurrences > 5"}
{"sample_id": 5816, "db_id": "language_corpus", "final": {"question": "How many biwords pairs are there whose second word is \"grec\"?", "sql": "SELECT COUNT(T2.w1st) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w2nd WHERE T1.word = 'grec'", "source_tables": ["biwords", "words"]}, "evidence": "grec refers to word = 'grec'; wid where word = 'grec' AS w2nd"}
{"sample_id": 5817, "db_id": "language_corpus", "final": {"question": "What is the title of the page on which the word \"grec\" has an occurrence of 52 times.", "sql": "SELECT T3.title FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'grec' AND T2.occurrences = 52", "source_tables": ["pages_words", "pages", "words"]}, "evidence": "occurrence of 52 times refers to pages_words.occurrences = 52; grec refers to word = 'grec'"}
{"sample_id": 5818, "db_id": "language_corpus", "final": {"question": "Among the biwords pairs with \"\u00e0bac\" as its first word, how many of them have an occurrence of over 10?", "sql": "SELECT COUNT(T2.w2nd) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st WHERE T1.word = '\u00e0bac' AND T2.occurrences > 10", "source_tables": ["biwords", "words"]}, "evidence": "\u00e0bac refers to word = '\u00e0bac'; as first word refers to w1st; occurrence of over 10 refers to occurrences > 10"}
{"sample_id": 5819, "db_id": "language_corpus", "final": {"question": "What is the average occurrence of the word \"grec\" on each Wikipedia page that has this word?", "sql": "SELECT CAST(SUM(T2.occurrences) AS REAL) / COUNT(T1.wid) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'grec'", "source_tables": ["pages_words", "words"]}, "evidence": "grec refers to word = 'grec'; AVG(occurrences where word = 'grec')"}
{"sample_id": 5893, "db_id": "airline", "final": {"question": "How many flights of air carrier called JetBlue Airways: B6 have 0 new arrival delay?", "sql": "SELECT COUNT(*) FROM 'Air Carriers' AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description LIKE '%JetBlue Airways: B6%' AND T2.ARR_DELAY_NEW = 0", "source_tables": ["airlines", "air carriers"]}, "evidence": "JetBlue Airways refers to Description = '%JetBlue Airway%'; 0 new arrival delay refers to ARR_DELAY_NEW = 0;"}
{"sample_id": 5894, "db_id": "airline", "final": {"question": "Provide the air carrier description of all flights arriving at Miami.", "sql": "SELECT T1.Description FROM 'Air Carriers' AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.DEST = 'MIA'", "source_tables": ["airlines", "air carriers"]}, "evidence": "arriving at Miami refers to DEST = 'MIA';"}
{"sample_id": 5895, "db_id": "airline", "final": {"question": "What is the air carrier's description of the cancelled flights?", "sql": "SELECT T1.Description FROM 'Air Carriers' AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.CANCELLED = 1 GROUP BY T1.Description", "source_tables": ["airlines", "air carriers"]}, "evidence": "cancelled flights refers to CANCELLED = 1;"}
{"sample_id": 5896, "db_id": "airline", "final": {"question": "Give the actual elapsed time of the flights with air carrier named Semo Aviation Inc.: SEM.", "sql": "SELECT T2.ACTUAL_ELAPSED_TIME FROM 'Air Carriers' AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Semo Aviation Inc.: SEM'", "source_tables": ["airlines", "air carriers"]}, "evidence": "actual elapsed time refers to ACTUAL_ELAPSED_TIME; Semo Aviation Inc.: SEM. Refers to Description = 'Semo Aviation Inc.: SEM';"}
{"sample_id": 5897, "db_id": "airline", "final": {"question": "Among the flights with air carrier described as Asap Air Inc.: ASP, what is the tail number of the flight with the longest departure delay?", "sql": "SELECT T2.TAIL_NUM FROM 'Air Carriers' AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Asap Air Inc.: ASP' ORDER BY T2.DEP_DELAY DESC LIMIT 1", "source_tables": ["airlines", "air carriers"]}, "evidence": "Asap Air Inc.: ASP refers to Description = 'Asap Air Inc.: ASP'; tail number refers to TAIL_NUM; longest departure delay refers to MAX(DEP_DELAY);"}
{"sample_id": 5898, "db_id": "airline", "final": {"question": "List the air carrier's description of the flights with 0 departure delay.", "sql": "SELECT T1.Description FROM 'Air Carriers' AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.DEP_DELAY = 0 GROUP BY T1.Description", "source_tables": ["airlines", "air carriers"]}, "evidence": "0 departure delay refers to DEP_DELAY = 0;"}
{"sample_id": 5899, "db_id": "airline", "final": {"question": "Provide the air carrier description of the flight with the highest actual elapsed time.", "sql": "SELECT T1.Description FROM 'Air Carriers' AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID ORDER BY T2.ACTUAL_ELAPSED_TIME DESC LIMIT 1", "source_tables": ["airlines", "air carriers"]}, "evidence": "highest actual elapsed time refers to MAX(ACTUAL_ELAPSED_TIME);"}
{"sample_id": 5900, "db_id": "airline", "final": {"question": "What are the destinations of the flights with air carrier description \"Southeast Alaska Airlines: WEB\"?", "sql": "SELECT T2.DEST FROM 'Air Carriers' AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Southeast Alaska Airlines: WEB'", "source_tables": ["airlines", "air carriers"]}, "evidence": "destinations refers to DEST; Southeast Alaska Airlines: WEB refers to Description = 'Southeast Alaska Airlines: WEB';"}
{"sample_id": 5901, "db_id": "airline", "final": {"question": "From August 10 to August 20, 2018, how many cancelled flights of air carrier named Spirit Air Lines: NK are there?", "sql": "SELECT COUNT(*) FROM 'Air Carriers' AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Spirit Air Lines: NK' AND T2.CANCELLED = 0 AND T2.FL_DATE BETWEEN '2018/8/10' AND '2018/8/20'", "source_tables": ["airlines", "air carriers"]}, "evidence": "From August 10 to August 20, 2018 refers to FL_DATE BETWEEN '2018/8/10' AND '2018/8/20'; cancelled flights refers to CANCELLED = 1; Trans Southern Airways: 'Spirit Air Lines: NK' refers to Description = 'Spirit Air Lines: NK';"}
{"sample_id": 5902, "db_id": "airline", "final": {"question": "What is the total number of flights that flew on August 2, 2018 with air carrier described as Horizon Air?", "sql": "SELECT COUNT(*) FROM 'Air Carriers' AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description LIKE '%Horizon Air%' AND T2.FL_DATE = '2018/8/2'", "source_tables": ["airlines", "air carriers"]}, "evidence": "on August 2, 2018 refers to FL_DATE = '2018/8/2'; Horizon Air refers to Description which includs 'Horizon Air';"}
{"sample_id": 5903, "db_id": "airline", "final": {"question": "What is the tail number of the flight with air carrier named Iscargo Hf: ICQ and arrival time of 1000 and below?", "sql": "SELECT T2.TAIL_NUM FROM 'Air Carriers' AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.ARR_TIME <= 1000 AND T1.Description = 'Iscargo Hf: ICQ'", "source_tables": ["airlines", "air carriers"]}, "evidence": "tail number refers to TAIL_NUM; Iscargo Hf: ICQ refers to Description = 'Iscargo Hf: ICQ'; arrival time of 1000 and below refers to ARR_TIME < = 1000;"}
{"sample_id": 5904, "db_id": "airline", "final": {"question": "List the flight date of flights with air carrier described as Profit Airlines Inc.: XBH which have an actual elapsed time below 100.", "sql": "SELECT T2.FL_DATE FROM 'Air Carriers' AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.ACTUAL_ELAPSED_TIME < 100 AND T1.Description = 'Profit Airlines Inc.: XBH'", "source_tables": ["airlines", "air carriers"]}, "evidence": "flight date refers to FL_DATE; Profit Airlines Inc.: XBH refers to Description = 'Profit Airlines Inc.: XBH'; actual elapsed time below 100 refers to ACTUAL_ELAPSED_TIME < 100;"}
{"sample_id": 5905, "db_id": "airline", "final": {"question": "Among the flights with air carrier named Republic Airline, how many of the flights have departure delay of 30 minutes and above?", "sql": "SELECT COUNT(*) FROM 'Air Carriers' AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description LIKE '%Republic Airline%' AND T2.DEP_DELAY > 30", "source_tables": ["airlines", "air carriers"]}, "evidence": "Republic Airline refers to Description which contains 'Republic Airline'; departure delay of 30 minutes and above refers to DEP_DELAY > 30;"}
{"sample_id": 5906, "db_id": "airline", "final": {"question": "What are the air carriers of the flights that flew on August 25, 2018 that have departure delay of -5?", "sql": "SELECT T1.Description FROM 'Air Carriers' AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.FL_DATE = '2018/8/25' GROUP BY T1.Description", "source_tables": ["airlines", "air carriers"]}, "evidence": "on August 25, 2018 refers to FL_DATE = '2018/8/25'; departure delay of -5 refers to DEP_DELAY = -5;"}
{"sample_id": 5907, "db_id": "airline", "final": {"question": "Provide the air carrier description of the flight with a tail number N922US from Phoenix.", "sql": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN 'Air Carriers' AS T2 ON T2.Code = T1.OP_CARRIER_AIRLINE_ID WHERE T1.TAIL_NUM = 'N922US' AND T1.ORIGIN = 'PHX' GROUP BY T2.Description", "source_tables": ["airlines", "air carriers"]}, "evidence": "tail number refers to TAIL_NUM; TAIL_NUM = 'N922US'; from Phoenix refers to ORIGIN = 'PHX';"}
{"sample_id": 5908, "db_id": "airline", "final": {"question": "Give the air carrier description of the flights that have an earlier arrival and departure.", "sql": "SELECT T1.Description FROM 'Air Carriers' AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.ARR_DELAY < 0 AND T2.DEP_DELAY < 0 GROUP BY T1.Description", "source_tables": ["airlines", "air carriers"]}, "evidence": "earlier arrival and departure refers to ARR_DELAY < 0 AND DEP_DELAY < 0;"}
{"sample_id": 5909, "db_id": "airline", "final": {"question": "Among the flights with air carrier \"Southwest Airlines Co.: WN\", provide the tail number of flights with an actual elapsed time lower than the 80% of the average actual elapsed time of listed flights.", "sql": "SELECT T2.TAIL_NUM FROM 'Air Carriers' AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Southwest Airlines Co.: WN' AND T2.ACTUAL_ELAPSED_TIME < ( SELECT AVG(ACTUAL_ELAPSED_TIME) * 0.8 FROM Airlines )", "source_tables": ["airlines", "air carriers"]}, "evidence": "Southwest Airlines Co.: WN refers to Description = 'Southwest Airlines Co.: WN'; tail number refers to TAIL_NUM; actual elapsed time lower than the 80% of the average actual elapsed time refers to ACTUAL_ELAPSED_TIME < (MULTIPLY AVG(ACTUAL_ELAPSED_TIME), 0.8);"}
{"sample_id": 5910, "db_id": "airline", "final": {"question": "List the air carrier's description with arrival time lower than the 40% of the average arrival time of flights that flew to Phoenix.", "sql": "SELECT T1.Description FROM 'Air Carriers' AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.DEST = 'PHX' AND T2.ARR_TIME < ( SELECT AVG(ARR_TIME) * 0.4 FROM Airlines ) GROUP BY T1.Description", "source_tables": ["airlines", "air carriers"]}, "evidence": "arrival time lower than the 40% of the average arrival time refers to ARR_TIME < MULTIPLY(AVG(ARR_TIME), 0.4); flew to Phoenix refers to DEST = 'PHX';"}
{"sample_id": 5911, "db_id": "airline", "final": {"question": "Among the flights of the air carrier described as American Airlines, what is the percentage of the flights with earlier departure?", "sql": "SELECT CAST(SUM(CASE WHEN T2.DEP_DELAY < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM 'Air Carriers' AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description LIKE '%American Airlines%'", "source_tables": ["airlines", "air carriers"]}, "evidence": "American Airlines can be found in Description which contains 'American Airlines'; percentage = MULTIPLY(DIVIDE(SUM(DEP_DELAY < 0), COUNT(DEP_DELAY)), 1.0); earlier departure refers to DEP_DELAY < 0;"}
{"sample_id": 6069, "db_id": "books", "final": {"question": "What is the shipping method ordered by Nicolette Sadler at 6/29/2020 7:40:07 PM?", "sql": "SELECT T3.method_name FROM cust_order AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T1.shipping_method_id WHERE T2.first_name = 'Nicolette' AND T2.last_name = 'Sadler' AND T1.order_date = '2020-06-29 19:40:07'", "source_tables": ["cust_order", "customer", "shipping_method"]}, "evidence": "ordered at 6/29/2020 7:40:07 PM refers to order_date = '2020-06-29 19:40:07'; shipping method refers to method_name"}
{"sample_id": 6070, "db_id": "books", "final": {"question": "List all books written in Arabic.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'Arabic'", "source_tables": ["book_language", "book"]}, "evidence": "\"Arabic\" is the language_name; book refers to title"}
{"sample_id": 6071, "db_id": "books", "final": {"question": "Which language is 'El plan infinito' written in?", "sql": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'El plan infinito'", "source_tables": ["book_language", "book"]}, "evidence": "\"El plan infinito\" is the title of the book; language refers to language_name"}
{"sample_id": 6072, "db_id": "books", "final": {"question": "What percentage of books written by Hirohiko make up the number of books published by Viz Media?", "sql": "SELECT CAST(SUM(CASE WHEN T1.author_name = 'Hirohiko Araki' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM author AS T1 INNER JOIN book_author AS T2 ON T2.author_id = T1.author_id INNER JOIN book AS T3 ON T3.book_id = T2.book_id INNER JOIN publisher AS T4 ON T4.publisher_id = T3.publisher_id WHERE T4.publisher_name = 'VIZ Media'", "source_tables": ["book_author", "publisher", "author", "book"]}, "evidence": "\"Hirohiko Araki\" is the author_name; 'Viz Media' is the publisher_name; percentage = Divide (Count(author_name = 'Hirohiko Araki'), Count(book_id)) * 100"}
{"sample_id": 6073, "db_id": "books", "final": {"question": "What is the average number of book pages written by Zilpha Keatley Snyder?", "sql": "SELECT AVG(T3.num_pages) FROM book_author AS T1 INNER JOIN author AS T2 ON T1.author_id = T2.author_id INNER JOIN book AS T3 ON T3.book_id = T1.book_id WHERE T2.author_name = 'Zilpha Keatley Snyder'", "source_tables": ["author", "book_author", "book"]}, "evidence": "\"Zilpha Keatley Snyder\" is the author_name; average number of book pages refers to AVG(num_pages)"}
{"sample_id": 6074, "db_id": "books", "final": {"question": "What is the full name of customer with email ckupis4@tamu.edu?", "sql": "SELECT first_name, last_name FROM customer WHERE email = 'ckupis4@tamu.edu'", "source_tables": ["customer"]}, "evidence": "\"ckupis4@tamu.edu\" is the email of customer; full name refers to first_name, last_name"}
{"sample_id": 6075, "db_id": "books", "final": {"question": "Which book has the most number of pages?", "sql": "SELECT title FROM book ORDER BY num_pages DESC LIMIT 1", "source_tables": ["book"]}, "evidence": "books with the most number of pages refers to Max(num_pages)"}
{"sample_id": 6076, "db_id": "books", "final": {"question": "How many books were written by author A.J. Ayer?", "sql": "SELECT COUNT(*) FROM book_author AS T1 INNER JOIN author AS T2 ON T1.author_id = T2.author_id WHERE T2.author_name = 'A.J. Ayer'", "source_tables": ["author", "book_author"]}, "evidence": "\"A.J. Ayer\" is the author_name;"}
{"sample_id": 6077, "db_id": "books", "final": {"question": "Name the title of books written by author A.J.Ayer.", "sql": "SELECT T3.title FROM book_author AS T1 INNER JOIN author AS T2 ON T1.author_id = T2.author_id INNER JOIN book AS T3 ON T3.book_id = T1.book_id WHERE T2.author_name = 'A.J. Ayer'", "source_tables": ["author", "book_author", "book"]}, "evidence": "\"A.J. Ayer\" is the author_name;"}
{"sample_id": 6078, "db_id": "books", "final": {"question": "The book name \"The Season: A Candid Look at Broadway\" was published by which publisher?", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'The Season: A Candid Look at Broadway'", "source_tables": ["publisher", "book"]}, "evidence": "\"The Season: A Candid Look at Broadway\" is the\u00a0 title of the book; publisher refers to publisher_name"}
{"sample_id": 6079, "db_id": "books", "final": {"question": "What is the average of English books among all books published by Carole Marsh Mysteries?", "sql": "SELECT CAST(SUM(CASE WHEN T1.language_name = 'English' THEN 1 ELSE 0 END) AS REAL) / COUNT(*) FROM book_language AS T1 INNER JOIN book AS T2 ON T1.language_id = T2.language_id INNER JOIN publisher AS T3 ON T3.publisher_id = T2.publisher_id WHERE T3.publisher_name = 'Carole Marsh Mysteries'", "source_tables": ["book_language", "publisher", "book"]}, "evidence": "English book refers to language_name = 'English'; 'Carole Marsh Mysteries' is the publisher_name; average = Divide (Count(language_name = 'English'), Count(book_id))"}
{"sample_id": 6080, "db_id": "books", "final": {"question": "Name the title of the book with the most number of pages that was published from 1990 to 2000 by publisher Free Press.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Free Press' AND STRFTIME('%Y', T1.publication_date) BETWEEN '1990' AND '2000' ORDER BY T1.num_pages DESC LIMIT 1", "source_tables": ["publisher", "book"]}, "evidence": "books with the most number of pages refers to Max(num_pages); published from 1990 to 2000 refers to SUBSTR(publication_date, 1, 4) BETWEEN '1990' AND '2000'; 'Free Press' is the publisher_name"}
{"sample_id": 6081, "db_id": "books", "final": {"question": "What is the order price of the book \"The Servant Leader\" in 2003?", "sql": "SELECT T2.price FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'The Servant Leader' AND STRFTIME('%Y', T1.publication_date) = '2003'", "source_tables": ["order_line", "book"]}, "evidence": "\"The Servant Leader\" is the title of the book; book in 2003 refers to SUBSTR(publication_date, 1, 4) = '2003'"}
{"sample_id": 6082, "db_id": "books", "final": {"question": "What is the current address of customer Kandy?", "sql": "SELECT T3.street_number, T3.street_name, T3.city FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id INNER JOIN address_status AS T4 ON T4.status_id = T2.status_id WHERE T1.first_name = 'Kandy'", "source_tables": ["address_status", "customer", "customer_address", "address"]}, "evidence": "current address refers to address_status = 1; address refers to street_number, street_name, city"}
{"sample_id": 6083, "db_id": "books", "final": {"question": "How many books were ordered by customer Kandy Adamec?", "sql": "SELECT COUNT(*) FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T3.first_name = 'Kandy' AND T3.last_name = 'Adamec'", "source_tables": ["order_line", "cust_order", "customer"]}, "evidence": ""}
{"sample_id": 6084, "db_id": "books", "final": {"question": "How many orders got returned in 2022?", "sql": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Returned' AND STRFTIME('%Y', T2.status_date) = '2022'", "source_tables": ["order_history", "order_status"]}, "evidence": "orders got returned refers to status_value = 'Returned'; in 2022 refers to SUBSTR(status_date, 1, 4) = '2022'"}
{"sample_id": 6085, "db_id": "books", "final": {"question": "Which country does the customer with the email \"rturbitt2@geocities.jp\" from?", "sql": "SELECT T4.country_name FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id INNER JOIN country AS T4 ON T4.country_id = T3.country_id WHERE T1.email = 'rturbitT2@geocities.jp'", "source_tables": ["country", "customer", "customer_address", "address"]}, "evidence": "\"rturbitt2@geocities.jp\" is the email of customer; country refers to country_name"}
{"sample_id": 6086, "db_id": "books", "final": {"question": "Name the publisher who published the most books.", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id GROUP BY T2.publisher_name ORDER BY COUNT(T2.publisher_id) DESC LIMIT 1", "source_tables": ["publisher", "book"]}, "evidence": "published the most books refers to Max(Count(book_id)); publisher refers to publisher_name"}
{"sample_id": 6087, "db_id": "books", "final": {"question": "What is the title of the first book that was written by A.J. Ayer?", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'A.J. Ayer' ORDER BY T1.publication_date ASC LIMIT 1", "source_tables": ["author", "book_author", "book"]}, "evidence": "\"A.J. Ayer\" is the author_name; first book refers to Min(publication_date)"}
{"sample_id": 6088, "db_id": "books", "final": {"question": "What is the percentage of books that cost greater than $10 and were ordered by customer Ruthanne Vatini?", "sql": "SELECT CAST(SUM(CASE WHEN T1.price > 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T3.first_name = 'Ruthanne' AND T3.last_name = 'Vatini'", "source_tables": ["order_line", "cust_order", "customer"]}, "evidence": "cost greater than $10 refers to price > 10; percentage = Divide (Count(book_id where price >10), Count(book_id)) * 100; full name refers to the composition of first name, lastname"}
{"sample_id": 6089, "db_id": "books", "final": {"question": "List the title of books published by AK Press.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'AK Press'", "source_tables": ["publisher", "book"]}, "evidence": "\"AK Press\" is the publisher_name"}
{"sample_id": 6090, "db_id": "books", "final": {"question": "Who ordered the book with the cheapest price?", "sql": "SELECT T3.first_name, T3.last_name FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id ORDER BY T1.price ASC LIMIT 1", "source_tables": ["order_line", "cust_order", "customer"]}, "evidence": "book with cheapest price refers to Min(price); who order means name of customer which refers to first_name, last_name"}
{"sample_id": 6091, "db_id": "books", "final": {"question": "List down the ISBN of the books purchased by the customer with an email of fsier3e@ihg.com.", "sql": "SELECT T1.isbn13 FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.email = 'fsier3e@ihg.com'", "source_tables": ["order_line", "cust_order", "customer", "book"]}, "evidence": "\"fsier3e@ihg.com\" is the email of customer; ISBN refers to isbn13"}
{"sample_id": 6092, "db_id": "books", "final": {"question": "Give the author's name of the books that cost 19 dollars and above.", "sql": "SELECT DISTINCT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN order_line AS T4 ON T4.book_id = T1.book_id WHERE T4.price > 19", "source_tables": ["order_line", "author", "book_author", "book"]}, "evidence": "books cost 19 dollars and above refers to price > = 19"}
{"sample_id": 6093, "db_id": "books", "final": {"question": "Provide the publisher name of the book with ISBN 76092025986.", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.isbn13 = 76092025986", "source_tables": ["publisher", "book"]}, "evidence": "\"76092025986\" is the isbn13"}
{"sample_id": 6094, "db_id": "books", "final": {"question": "Among the books published by Birlinn in 2008, how many books have pages around 600 to 700?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Birlinn' AND STRFTIME('%Y', T1.publication_date) = '2008' AND T1.num_pages BETWEEN 600 AND 700", "source_tables": ["publisher", "book"]}, "evidence": "\"Birlinn\" is the publisher_name; books have pages around 600 to 700 refers to num_pages BETWEEN 600 AND 700; in 2008 refers to SUBSTR(publication_date, 1, 4) = '2008'"}
{"sample_id": 6095, "db_id": "books", "final": {"question": "What is the price of the book with ISBN 9780763628321?", "sql": "SELECT T2.price FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.isbn13 = 9780763628321", "source_tables": ["order_line", "book"]}, "evidence": "\"9780763628321\" is the isbn13"}
{"sample_id": 6096, "db_id": "books", "final": {"question": "What is the number of pages of the book in the order ID 1167?", "sql": "SELECT T1.num_pages FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T2.order_id = 1167", "source_tables": ["order_line", "book"]}, "evidence": "number of pages refers to num_pages"}
{"sample_id": 6097, "db_id": "books", "final": {"question": "Provide the title of the books published in British-English.", "sql": "SELECT DISTINCT T1.title FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'British English'", "source_tables": ["book_language", "book"]}, "evidence": "\"British English\" is the language_name of the book"}
{"sample_id": 6098, "db_id": "books", "final": {"question": "How many books were published by Brava in 2006?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Brava' AND STRFTIME('%Y', T1.publication_date) = '2006'", "source_tables": ["publisher", "book"]}, "evidence": "\"Brava\" is the publisher_name; in 2006 refers to SUBSTR(publication_date, 1, 4) = '2006'"}
{"sample_id": 6099, "db_id": "books", "final": {"question": "Provide the ISBN and price of the book with book ID 7160.", "sql": "SELECT T1.isbn13, T2.price FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T2.book_id = 6503", "source_tables": ["order_line", "book"]}, "evidence": "ISBN refers to isbn13;"}
{"sample_id": 6100, "db_id": "books", "final": {"question": "What is the title of the book in the order ID 931?", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T2.order_id = 931", "source_tables": ["order_line", "book"]}, "evidence": ""}
{"sample_id": 6101, "db_id": "books", "final": {"question": "What is the language of the book titled Zorro?", "sql": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'Zorro'", "source_tables": ["book_language", "book"]}, "evidence": "\"Zorro\" is the title of the book; langauge refers to language_name"}
{"sample_id": 6102, "db_id": "books", "final": {"question": "Provide the email of the customers that purchased books with a price range of 3 to 5 dollars.", "sql": "SELECT DISTINCT T3.email FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T1.price BETWEEN 3 AND 5", "source_tables": ["order_line", "cust_order", "customer"]}, "evidence": "books with a price range of 3 to 5 dollars refers to price BETWEEN 3 AND 5"}
{"sample_id": 6103, "db_id": "books", "final": {"question": "List the ISBN of the books that cost 7.5 dollars.", "sql": "SELECT T1.isbn13 FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T2.price = 7.5", "source_tables": ["order_line", "book"]}, "evidence": "ISBN refers to isbn13; books cost 7.5 dollars refers to price = 7.5"}
{"sample_id": 6104, "db_id": "books", "final": {"question": "Give the publisher's name of the books authored by Alan Lee.", "sql": "SELECT T4.publisher_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T3.author_name = 'Alan Lee' GROUP BY T4.publisher_name", "source_tables": ["author", "publisher", "book_author", "book"]}, "evidence": "\"Alan Lee\" is the author_name; publisher's name refers to publisher_name"}
{"sample_id": 6105, "db_id": "books", "final": {"question": "What is the sum of the number of pages of the books ordered by Mick Sever?", "sql": "SELECT SUM(T1.num_pages) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Mick' AND T4.last_name = 'Sever'", "source_tables": ["order_line", "cust_order", "customer", "book"]}, "evidence": "sum of the number of pages refers to Sum(num_pages)"}
{"sample_id": 6106, "db_id": "books", "final": {"question": "Write down the author's name of the book most recently published.", "sql": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id ORDER BY T1.publication_date DESC LIMIT 1", "source_tables": ["author", "book_author", "book"]}, "evidence": "author's name refers to author_name; book most recently published refers to Max(publication_date)"}
{"sample_id": 6107, "db_id": "books", "final": {"question": "In books published by Ace Book, what is the percentage of English books published?", "sql": "SELECT CAST(SUM(CASE WHEN T1.language_name = 'English' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM book_language AS T1 INNER JOIN book AS T2 ON T1.language_id = T2.language_id INNER JOIN publisher AS T3 ON T3.publisher_id = T2.publisher_id WHERE T3.publisher_name = 'Ace Book'", "source_tables": ["book_language", "publisher", "book"]}, "evidence": "\"Ace Book\" is the publisher_name; English book refers to language_name = 'English'; percentage = Divide (Count(book_id where language_name = 'English'), Count(book_id)) * 100"}
{"sample_id": 6108, "db_id": "books", "final": {"question": "Among the books purchased by less than 1 dollar, what is the difference between the number of books with less than 500 pages and books with greater than 500 pages?", "sql": "SELECT SUM(CASE WHEN T1.num_pages < 500 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.num_pages > 500 THEN 1 ELSE 0 END) AS dif FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T2.price < 1", "source_tables": ["order_line", "book"]}, "evidence": "book purchased by less than 1 dollar refers to price < 1; books with less than 500 pages refers to num_pages < 500; greater than 500 pages refers to num_pages > 500; Difference = Subtract (Count(book_id where num_pages < 500), Count(book_id where num_pages > 500))"}
{"sample_id": 6109, "db_id": "books", "final": {"question": "What are the language and title of the ordered books with price less than 20% of the average price of all ordered books?", "sql": "SELECT DISTINCT T3.language_name, T2.title FROM order_line AS T1 INNER JOIN book AS T2 ON T1.book_id = T2.book_id INNER JOIN book_language AS T3 ON T3.language_id = T2.language_id WHERE T1.price * 100 < ( SELECT AVG(price) FROM order_line ) * 20", "source_tables": ["order_line", "book_language", "book"]}, "evidence": "language refers to language_name; books with price less than 20% of the average price refers to price < Multiply (AVG(price), 0.2)"}
{"sample_id": 6220, "db_id": "food_inspection_2", "final": {"question": "What is the facility type of the establishment named \"Kinetic Playground\"?", "sql": "SELECT facility_type FROM establishment WHERE dba_name = 'Kinetic Playground'", "source_tables": ["establishment"]}, "evidence": "the establishment named \"Kinetic Playground\" refers to dba_name = 'Kinetic Playground'"}
{"sample_id": 6221, "db_id": "food_inspection_2", "final": {"question": "How much salary does Jessica Anthony receive?", "sql": "SELECT salary FROM employee WHERE first_name = 'Jessica' AND last_name = 'Anthony'", "source_tables": ["employee"]}, "evidence": ""}
{"sample_id": 6222, "db_id": "food_inspection_2", "final": {"question": "What is the restaurant's name at \"41.9532864854\" latitude and \"-87.7673790701422\" longitude?", "sql": "SELECT dba_name FROM establishment WHERE latitude = 41.9532864854 AND longitude = -87.7673790701422 AND facility_type = 'Restaurant'", "source_tables": ["establishment"]}, "evidence": "restaurant refers to facility_type = 'Restaurant'; name refers to dba_name; \"41.9532864854\" latitude and \"-87.7673790701422\" longitude refers to latitude = 41.9532864854 and longitude = -87.7673790701422"}
{"sample_id": 6223, "db_id": "food_inspection_2", "final": {"question": "Among the list of employees, what is the total number of supervisors?", "sql": "SELECT COUNT(employee_id) FROM employee WHERE title = 'Supervisor'", "source_tables": ["employee"]}, "evidence": "supervisor refers to title = 'Supervisor'"}
{"sample_id": 6224, "db_id": "food_inspection_2", "final": {"question": "Where in Chicago does the restaurant named \"Old Timers Rest & Lounge\" located?", "sql": "SELECT address FROM establishment WHERE city = 'CHICAGO' AND dba_name = 'OLD TIMERS REST & LOUNGE' AND facility_type = 'Restaurant'", "source_tables": ["establishment"]}, "evidence": "in Chicago refers to city = 'CHICAGO'; restaurant refers to facility_type = 'Restaurant'; \"Old Timers Rest & Lounge\" refers to dba_name = 'OLD TIMERS REST & LOUNGE'; location refers to address"}
{"sample_id": 6225, "db_id": "food_inspection_2", "final": {"question": "How many employees are living in Hoffman Estates, IL?", "sql": "SELECT COUNT(employee_id) FROM employee WHERE state = 'IL' AND city = 'Hoffman Estates'", "source_tables": ["employee"]}, "evidence": "in Hoffman Estates refers to city = 'Hoffman Estates'; IL refers to state = 'IL'"}
{"sample_id": 6226, "db_id": "food_inspection_2", "final": {"question": "What is the total number of establishments with the highest risk level?", "sql": "SELECT COUNT(license_no) FROM establishment WHERE risk_level = 3", "source_tables": ["establishment"]}, "evidence": "total number of establishments with the highest risk level = count(max(risk_level))"}
{"sample_id": 6227, "db_id": "food_inspection_2", "final": {"question": "Who is the employee that receives 82700 as their salary?", "sql": "SELECT first_name, last_name FROM employee WHERE salary = 82700", "source_tables": ["employee"]}, "evidence": "employee name refers to first_name, last_name; receives 82700 as salary refers to salary = 82700"}
{"sample_id": 6228, "db_id": "food_inspection_2", "final": {"question": "Provide the last name of the employee involved in the inspection ID 52256.", "sql": "SELECT DISTINCT T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 52256", "source_tables": ["employee", "inspection"]}, "evidence": ""}
{"sample_id": 6229, "db_id": "food_inspection_2", "final": {"question": "Please list the names of taverns that paid a $100 fine upon inspection.", "sql": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T1.facility_type = 'Tavern' AND T3.fine = 100", "source_tables": ["establishment", "inspection", "violation"]}, "evidence": "name refers to dba_name; tavern refers to facility_type = 'Tavern'; a $100 fine refers to fine = 100"}
{"sample_id": 6230, "db_id": "food_inspection_2", "final": {"question": "List point level of inspections with no fine.", "sql": "SELECT DISTINCT T1.point_level FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.fine = 0", "source_tables": ["inspection_point", "violation"]}, "evidence": "no fine refers to fine = 0"}
{"sample_id": 6231, "db_id": "food_inspection_2", "final": {"question": "Provide the facility type and license number of establishments with the lowest risk level but failed the inspection.", "sql": "SELECT DISTINCT T1.facility_type, T1.license_no FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = 1 AND T2.results = 'Fail'", "source_tables": ["establishment", "inspection"]}, "evidence": "license number refers to license_no; the lowest risk level refers to min(risk_level); failed the inspection refers to results = 'Fail'"}
{"sample_id": 6232, "db_id": "food_inspection_2", "final": {"question": "What is the result of the February 24, 2010 inspection involving the employee named \"Arnold Holder\"?", "sql": "SELECT DISTINCT T2.results FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_date = '2010-02-24' AND T1.first_name = 'Arnold' AND T1.last_name = 'Holder'", "source_tables": ["employee", "inspection"]}, "evidence": "February 24, 2010 refers to inspection_date = '2010-02-24'"}
{"sample_id": 6233, "db_id": "food_inspection_2", "final": {"question": "How many restaurants failed the inspection in April 2010?", "sql": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y-%m', T2.inspection_date) = '2010-04' AND T1.facility_type = 'Restaurant' AND T2.results = 'Fail'", "source_tables": ["establishment", "inspection"]}, "evidence": "restaurant refers to facility_type = 'Restaurant'; failed the inspection refers to results = 'Fail'; in April 2010 refers to inspection_date like '2010-04%'"}
{"sample_id": 6234, "db_id": "food_inspection_2", "final": {"question": "List all inspection IDs where the employee named \"Rosemary Kennedy\" was involved.", "sql": "SELECT DISTINCT T2.inspection_id FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.first_name = 'Rosemary' AND T1.last_name = 'Kennedy'", "source_tables": ["employee", "inspection"]}, "evidence": ""}
{"sample_id": 6235, "db_id": "food_inspection_2", "final": {"question": "What type of inspection was done on July 07, 2010, involving the employee named \"Lisa Tillman\"?", "sql": "SELECT DISTINCT T2.inspection_type FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.first_name = 'Lisa' AND T1.last_name = 'Tillman' AND T2.inspection_date = '2010-07-07'", "source_tables": ["employee", "inspection"]}, "evidence": "type of inspection refers to inspection_type; on July 07, 2010 refers to inspection_date = '2010-07-07'"}
{"sample_id": 6236, "db_id": "food_inspection_2", "final": {"question": "Provide the inspection ID of the inspection with the comment \"MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA\" and sanitary operating requirement code of 7-38-030, 015, 010 (A), 005 (A).", "sql": "SELECT T2.inspection_id FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.inspector_comment = 'MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA' AND T1.code = '7-38-030, 015, 010 (A), 005 (A)'", "source_tables": ["inspection_point", "violation"]}, "evidence": "comment \"MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA\" refers to inspector_comment = 'MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA'; sanitary operating requirement code of 7-38-030, 015, 010 (A), 005 (A) refers to code = '7-38-030, 015, 010 (A), 005 (A)'"}
{"sample_id": 6237, "db_id": "food_inspection_2", "final": {"question": "List down the names of the establishments with the highest risk level and failed the inspection.", "sql": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = 3 AND T2.results = 'Fail'", "source_tables": ["establishment", "inspection"]}, "evidence": "name of establishment refers to dba_name; the highest risk level refers to max(risk_level); failed the inspection refers to results = 'Fail'"}
{"sample_id": 6238, "db_id": "food_inspection_2", "final": {"question": "What is the inspection ID where the employee named \"David Hodges\" is currently employed in the \"Kamayan Express\" establishment?", "sql": "SELECT T2.inspection_id FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T3.first_name = 'David' AND T3.last_name = 'Hodges' AND T1.dba_name = 'KAMAYAN EXPRESS'", "source_tables": ["establishment", "employee", "inspection"]}, "evidence": "the \"Kamayan Express\" establishment refers to dba_name = 'KAMAYAN EXPRESS'"}
{"sample_id": 6239, "db_id": "food_inspection_2", "final": {"question": "Provide the salary range of the employee involved in the inspection ID 58424.", "sql": "SELECT T1.salary, T3.salary FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN employee AS T3 WHERE T2.inspection_id = 58424 ORDER BY T1.salary, T3.salary DESC LIMIT 1", "source_tables": ["employee", "inspection"]}, "evidence": ""}
{"sample_id": 6240, "db_id": "food_inspection_2", "final": {"question": "List down the inspection ID with the inspector's comment \"A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served. NO CERTIFIED FOOD MANAGER ON DUTY AT THIS TIME FOODS ARE COOKED AND SERVED SERIOUS CITATION ISSUED\" and inspection category of Personnel.", "sql": "SELECT T2.inspection_id FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.category = 'Personnel' AND T2.inspector_comment = 'A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served.FOUND NO CITY OF CHICAGO SANITATION CERTIFICATE POSTED OR VALID DOCUMENTATION DURING THIS INSPECTION.'", "source_tables": ["inspection_point", "violation"]}, "evidence": "inspector's comment \"A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served. NO CERTIFIED FOOD MANAGER ON DUTY AT THIS TIME FOODS ARE COOKED AND SERVED SERIOUS CITATION ISSUED\" refers to inspector_comment = 'A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served.FOUND NO CITY OF CHICAGO SANITATION CERTIFICATE POSTED OR VALID DOCUMENTATION DURING THIS INSPECTION.'; inspection category of Personnel refers to category = 'Personnel'"}
{"sample_id": 6241, "db_id": "food_inspection_2", "final": {"question": "How many grocery stores paid $250 fine upon their inspection?", "sql": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T1.facility_type = 'Grocery Store' AND T3.fine = 250", "source_tables": ["establishment", "inspection", "violation"]}, "evidence": "grocery store refers to facility_type = 'Grocery Store'; $250 fine refers to fine = 250"}
{"sample_id": 6242, "db_id": "food_inspection_2", "final": {"question": "What is the category of the inspection of the establishment named \"J & J FOOD\"?", "sql": "SELECT DISTINCT T4.category FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id INNER JOIN inspection_point AS T4 ON T3.point_id = T4.point_id WHERE T1.dba_name = 'J & J FOOD'", "source_tables": ["establishment", "inspection", "inspection_point", "violation"]}, "evidence": "the establishment named \"J & J FOOD\" refers to dba_name = 'J & J FOOD'"}
{"sample_id": 6243, "db_id": "food_inspection_2", "final": {"question": "Name the taverns that failed the inspection in January 2010.", "sql": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE strftime('%Y-%m', T2.inspection_date) = '2010-01' AND T2.results = 'Fail' AND T1.facility_type = 'TAVERN'", "source_tables": ["establishment", "inspection", "violation"]}, "evidence": "tavern refers to facility_type = 'Tavern'; failed the inspection refers to results = 'Fail'; in January 2010 refers to inspection_date like '2010-01%'"}
{"sample_id": 6244, "db_id": "food_inspection_2", "final": {"question": "How many of the inspections with serious point levels have no fines?", "sql": "SELECT COUNT(DISTINCT T2.inspection_id) FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.point_level = 'Serious ' AND T2.fine = 0", "source_tables": ["inspection_point", "violation"]}, "evidence": "serious point level refers to point_level = 'Serious'; no fines refers to fine = 0"}
{"sample_id": 6245, "db_id": "food_inspection_2", "final": {"question": "What is the establishment's name with an inspection category of No Smoking Regulations?", "sql": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id INNER JOIN inspection_point AS T4 ON T3.point_id = T4.point_id WHERE T4.category = 'No Smoking Regulations'", "source_tables": ["establishment", "inspection", "inspection_point", "violation"]}, "evidence": "establishment's name refers to dba_name; an inspection category of No Smoking Regulations refers to category = 'No Smoking Regulations'"}
{"sample_id": 6246, "db_id": "food_inspection_2", "final": {"question": "What is the difference in the number of restaurants that passed and failed the canvass inspection type?", "sql": "SELECT COUNT(CASE WHEN T2.results = 'Pass' THEN T1.license_no END) - COUNT(CASE WHEN T2.results = 'Fail' THEN T1.license_no END) AS diff FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.inspection_type = 'Canvass' AND T1.facility_type = 'Restaurant'", "source_tables": ["establishment", "inspection"]}, "evidence": "canvass inspection type refers to inspection_type = 'Canvass'; restaurant refers to facility_type = 'Restaurant'; difference = subtract(count(inspection_id where results = 'Pass'), count(inspection_id where results = 'Fail'))"}
{"sample_id": 6247, "db_id": "food_inspection_2", "final": {"question": "Among the establishments that failed the inspection in February 2010, list the names of the employees with a salary greater than 70% of the average salary of all employees.", "sql": "SELECT DISTINCT T1.employee_id FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.results = 'Fail' AND strftime('%Y-%m', T2.inspection_date) = '2010-02' AND T1.salary > 0.7 * ( SELECT AVG(salary) FROM employee )", "source_tables": ["employee", "inspection"]}, "evidence": "failed the inspection refers to results = 'Fail'; in January 2010 refers to inspection_date like '2010-01%'; name of employee refers to first_name, last_name; a salary greater than 70% of the average salary refers to salary > multiply(avg(salary), 0.7)"}
{"sample_id": 6248, "db_id": "food_inspection_2", "final": {"question": "Among the establishments that paid a 500 fine, what is the percentage of restaurants?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.facility_type = 'Restaurant' THEN T1.license_no END) AS REAL) * 100 / COUNT(T1.facility_type) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T3.fine = 500", "source_tables": ["establishment", "inspection", "violation"]}, "evidence": "a 500 fine refers to fine = 500; restaurant refers to facility_type = 'Restaurant'; percentage = divide(count(license_no where facility_type = 'Restaurant'), count(license_no)) * 100% where fine = 500"}
{"sample_id": 6286, "db_id": "coinmarketcap", "final": {"question": "What is the name of the coin that creates the most total value in the past 24 hours?", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.volume_24h = ( SELECT MAX(volume_24h) FROM historical )", "source_tables": ["historical", "coins"]}, "evidence": "creates the most total value in the past 24 hours refers to max(volume_24h)"}
{"sample_id": 6287, "db_id": "coinmarketcap", "final": {"question": "Name the coins that were not opened on May 2013.", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE STRFTIME('%Y-%m', T2.date) = '2013-05' AND T2.open IS NULL", "source_tables": ["historical", "coins"]}, "evidence": "not opened refers to open IS NULL; on May 2013 refers to year(date) = 2019 AND month(date) = 5"}
{"sample_id": 6288, "db_id": "coinmarketcap", "final": {"question": "When is the highest closed price of CHNCoin?", "sql": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'CHNCoin' ORDER BY T2.close DESC LIMIT 1", "source_tables": ["historical", "coins"]}, "evidence": "the highest closed price refers to max(close)"}
{"sample_id": 6289, "db_id": "coinmarketcap", "final": {"question": "When did Peercoin rank fifth?", "sql": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Peercoin' AND T2.cmc_rank = 5", "source_tables": ["historical", "coins"]}, "evidence": "when refers to date; rank fifth refers to cmc_rank = 5"}
{"sample_id": 6290, "db_id": "coinmarketcap", "final": {"question": "When is Devcoin most valuable in the market?", "sql": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Devcoin' ORDER BY T2.market_cap DESC LIMIT 1", "source_tables": ["historical", "coins"]}, "evidence": "when refers to date; most valuable refers to max(market_cap)"}
{"sample_id": 6291, "db_id": "coinmarketcap", "final": {"question": "List the names of the top five coins traded on January 1, 2014.", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2014-01-01' AND T2.cmc_rank <= 5", "source_tables": ["historical", "coins"]}, "evidence": "the top five coins refers to cmc_rank< = 5; on January 1, 2014 refers to date = '2014-01-01'"}
{"sample_id": 6292, "db_id": "coinmarketcap", "final": {"question": "When was Lebowskis not opened?", "sql": "SELECT DISTINCT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Lebowskis' AND (T2.open IS NULL OR T2.open = 0)", "source_tables": ["historical", "coins"]}, "evidence": "when refers to date; not opened refers to open IS NULL"}
{"sample_id": 6293, "db_id": "coinmarketcap", "final": {"question": "When is the highest price of Terracoin?", "sql": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Terracoin' ORDER BY T2.price DESC LIMIT 1", "source_tables": ["historical", "coins"]}, "evidence": "when refers to date; the highest price refers to max(price)"}
{"sample_id": 6294, "db_id": "coinmarketcap", "final": {"question": "How many times was Bytecoin traded in June 2013?", "sql": "SELECT COUNT(T2.coin_id) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bytecoin' AND STRFTIME('%Y-%m', T2.date) = '2013-06'", "source_tables": ["historical", "coins"]}, "evidence": "in June 2013 refers to year(date) = 2013 AND month(date) = 6"}
{"sample_id": 6295, "db_id": "coinmarketcap", "final": {"question": "List the names of the coins above the average price on April 28, 2013.", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2018-04-28' AND T2.price > ( SELECT AVG(price) FROM historical WHERE date = '2018-04-28' )", "source_tables": ["historical", "coins"]}, "evidence": "average price = divide(sum(price), count(name)); on April 28, 2013 refers to date = '2013-04-28'"}
{"sample_id": 6296, "db_id": "coinmarketcap", "final": {"question": "What's the percentage of coins that is higher than the price 1 hour ago in May 29,2013? List the names of these coins.", "sql": "SELECT T1.NAME FROM coins AS T1 INNER JOIN historical AS T2 ON T1.ID = T2.coin_id WHERE T2.DATE = '2013-05-29' AND T2.percent_change_1h > 0", "source_tables": ["historical", "coins"]}, "evidence": "percentage that is higher than the price 1 hour ago refers to percent_change_1h>0; in May 29,2013 refers to date = '2013-05-29'"}
{"sample_id": 6594, "db_id": "retail_world", "final": {"question": "Which product of Exotic Liquids company that have the highest reorder levels?", "sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Exotic Liquids' ORDER BY T1.ReorderLevel DESC LIMIT 1", "source_tables": ["suppliers", "products"]}, "evidence": "'Exotic Liquids' is a CompanyName; the highest reorder levels refers to MAX(ReorderLevel)"}
{"sample_id": 6595, "db_id": "retail_world", "final": {"question": "Provide the category name of the Chef Anton's Gumbo Mix product that New Orleans Cajun Delights company has.", "sql": "SELECT T3.CategoryName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID WHERE T1.CompanyName = 'New Orleans Cajun Delights' AND T2.ProductName LIKE 'Chef Anton%s Gumbo Mix'", "source_tables": ["categories", "suppliers", "products"]}, "evidence": "'Chef Anton's Gumbo Mix' is a ProductName; 'New Orleans Cajun Delights' is a CompanyName;"}
{"sample_id": 6596, "db_id": "retail_world", "final": {"question": "Indicate the name of the country where Leka Trading supplies Ipoh Coffee product.", "sql": "SELECT T2.Country FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Ipoh Coffee' AND T2.CompanyName = 'Leka Trading'", "source_tables": ["suppliers", "products"]}, "evidence": "'Leka Trading' is a CompanyName; 'Ipoh Coffee' is a ProductName"}
{"sample_id": 6597, "db_id": "retail_world", "final": {"question": "Indicate the category name of the product name with the highest units on order.", "sql": "SELECT T2.CategoryName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.UnitsOnOrder = ( SELECT MAX(T1.UnitsOnOrder) FROM Products )", "source_tables": ["categories", "products"]}, "evidence": ""}
{"sample_id": 6598, "db_id": "retail_world", "final": {"question": "What is the difference in number of unit price from Chef Anton's Cajun Seasoning product and Chef Anton's Gumbo Mix product of New Orleans Cajun Delights company.", "sql": "SELECT ( SELECT T1.UnitPrice FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'New Orleans Cajun Delights' AND T1.ProductName LIKE 'Chef Anton%s Cajun Seasoning' ) - ( SELECT T1.UnitPrice FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'New Orleans Cajun Delights' AND T1.ProductName LIKE 'Chef Anton%s Gumbo Mix' ) AS calu", "source_tables": ["suppliers", "products"]}, "evidence": "Chef Anton's Cajun Seasoning' AND 'Chef Anton''s Gumbo Mix' are ProductName; 'New Orleans Cajun Delights' is a CompanyName; calculation = SUBTRACT(UnitPrice where ProductName = 'Chef Anton's Cajun Seasoning', UnitPrice where ProductName = 'Chef Anton''s Gumbo Mix')"}
{"sample_id": 6599, "db_id": "retail_world", "final": {"question": "Which of Cooperativa de Quesos 'Las Cabras' products have a unit price greater than 20?", "sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName LIKE 'Cooperativa de Quesos%' AND T1.UnitPrice > 20", "source_tables": ["suppliers", "products"]}, "evidence": "Cooperativa de Quesos 'Las Cabras'' is a CompanyName; unit price greater than 20 refers to UnitPrice > 20"}
{"sample_id": 6600, "db_id": "retail_world", "final": {"question": "Please indicate the product name of Tokyo Traders company with order quantity greater than 40.", "sql": "SELECT DISTINCT T2.ProductName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN 'Order Details' AS T3 ON T2.ProductID = T3.ProductID WHERE T1.CompanyName = 'Tokyo Traders' AND T3.Quantity > 40", "source_tables": ["suppliers", "products", "order details"]}, "evidence": "'Tokyo Traders' is a CompanyName; order quantity greater than 40 refers to Quantity > 40"}
{"sample_id": 6601, "db_id": "retail_world", "final": {"question": "List all category name of Exotic Liquids 's product with units in stock over 100.", "sql": "SELECT T3.CategoryName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID WHERE T2.UnitsInStock > 100 AND T1.CompanyName = 'Exotic Liquids'", "source_tables": ["categories", "suppliers", "products"]}, "evidence": "'Exotic Liquids' is a CompanyName; units in stock over 100 refers to UnitsInStock > 100"}
{"sample_id": 6602, "db_id": "retail_world", "final": {"question": "How many product names have order quantity less than 50? Calculate the percentage of orders less than 50 out of total order quantity.", "sql": "SELECT SUM(CASE WHEN T2.Quantity < 50 THEN 1 ELSE 0 END) , CAST(SUM(IF(T2.Quantity < 50, 1, 0)) AS REAL) / COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID", "source_tables": ["products", "order details"]}, "evidence": "order quantity less than 50 refers to Quantity < 50; Calculation = DIVIDE(SUM(Quantity < 50), SUM(ProductID)) * 100"}
{"sample_id": 6603, "db_id": "retail_world", "final": {"question": "Please indicate total order quantity of product Geitost and calculate the percentage of such product among all the order quantity.", "sql": "SELECT SUM(IF(T1.ProductName = 'Geitost', 1, 0)) AS sum , CAST(SUM(IF(T1.ProductName = 'Geitost', 1, 0)) AS REAL) / COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID", "source_tables": ["products", "order details"]}, "evidence": "'Geitost' is a ProductName; calculation = DIVIDE(ProductName = 'Geitost', COUNT(ProductID)) * 100"}
{"sample_id": 6604, "db_id": "retail_world", "final": {"question": "What is the position of Robert King?", "sql": "SELECT Title FROM Employees WHERE FirstName = 'Robert' AND LastName = 'King'", "source_tables": ["employees"]}, "evidence": "'Robert King' is the full name of an employee; full name refers to FirstName, LastName; position refers to Title"}
{"sample_id": 6605, "db_id": "retail_world", "final": {"question": "Write the shipping company name with the telephone number of (503) 555-9931.", "sql": "SELECT CompanyName FROM Shippers WHERE Phone = '(503) 555-9931'", "source_tables": ["shippers"]}, "evidence": "telephone number of (503) 555-9931 refers to Phone = '(503) 555-9931'"}
{"sample_id": 6606, "db_id": "retail_world", "final": {"question": "Write the address and phone number of Margaret Peacock.", "sql": "SELECT Address, HomePhone FROM Employees WHERE FirstName = 'Margaret' AND LastName = 'Peacock'", "source_tables": ["employees"]}, "evidence": "Margaret Peacock is the full name of an employee; full name refers to FirstName, LastName; phone number refers to HomePhone"}
{"sample_id": 6607, "db_id": "retail_world", "final": {"question": "What is the full address of Rattlesnake Canyon Grocery?", "sql": "SELECT DISTINCT ShipAddress, ShipCity, ShipRegion, ShipPostalCode, ShipCountry FROM Orders WHERE ShipName = 'Rattlesnake Canyon Grocery'", "source_tables": ["orders"]}, "evidence": "full address refers to ShipAddress, ShipCity, ShipRegion,ShipPostalCode, ShipCountry; 'Rattlesnake Canyon Grocery' is a ShipName;"}
{"sample_id": 6608, "db_id": "retail_world", "final": {"question": "List all product names under Confections.", "sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.CategoryName = 'Confections'", "source_tables": ["categories", "products"]}, "evidence": "'Confections' is a CompanyName;"}
{"sample_id": 6609, "db_id": "retail_world", "final": {"question": "Sir Rodney's Marmalade is supplied by which company and who is the contact for this company?", "sql": "SELECT T2.CompanyName, T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName LIKE 'Sir Rodney%s Marmalade'", "source_tables": ["suppliers", "products"]}, "evidence": "'Sir Rodney's Marmalade' is a ProductName; company refers to CompanyName; contact for a company refers to ContactName"}
{"sample_id": 6610, "db_id": "retail_world", "final": {"question": "What is the full name of the employee who is in charge of the territory of Denver?", "sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Denver'", "source_tables": ["employeeterritories", "employees", "territories"]}, "evidence": "full name refers to FirstName, LastName; Denver is a TerritoryDescription"}
{"sample_id": 6611, "db_id": "retail_world", "final": {"question": "List all the territories where Laura Callahan is in charge.", "sql": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.FirstName = 'Laura' AND T1.LastName = 'Callahan'", "source_tables": ["employeeterritories", "employees", "territories"]}, "evidence": "territories refers to TerritoryDescription; Laura Callahan is the full name of an employee; full name refers to FirstName, LastName"}
{"sample_id": 6612, "db_id": "retail_world", "final": {"question": "How many orders were shipped via Federal Shipping?", "sql": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Federal Shipping' AND T1.ShipVia = 3", "source_tables": ["shippers", "orders"]}, "evidence": "'Federal Shipping' is a CompanyName; orders refers to OrderID"}
{"sample_id": 6613, "db_id": "retail_world", "final": {"question": "Name the products where the suppliers come from Finland.", "sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Finland'", "source_tables": ["suppliers", "products"]}, "evidence": "'Finland' is a Country; product refers to ProductName; suppliers refers to SupplierID"}
{"sample_id": 6614, "db_id": "retail_world", "final": {"question": "The product 'Mozzarella di Giovanni' belongs in which category? Include the category's description as well.", "sql": "SELECT T2.CategoryName, T2.Description FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.ProductName = 'Mozzarella di Giovanni'", "source_tables": ["categories", "products"]}, "evidence": "Mozzarella di Giovanni' is a ProductName; category refers to CategoryName;"}
{"sample_id": 6615, "db_id": "retail_world", "final": {"question": "Name the suppliers that supply products under the category 'cheeses.'", "sql": "SELECT DISTINCT T1.CompanyName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID WHERE T3.Description = 'Cheeses'", "source_tables": ["categories", "suppliers", "products"]}, "evidence": "suppliers refers to CompanyName; 'cheeses' is a Description"}
{"sample_id": 6616, "db_id": "retail_world", "final": {"question": "Name all products supplied by Zaanse Snoepfabriek.", "sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Zaanse Snoepfabriek'", "source_tables": ["suppliers", "products"]}, "evidence": "products refers to ProductName; 'Zaanse Snoepfabriek' is a CompanyName"}
{"sample_id": 6617, "db_id": "retail_world", "final": {"question": "Which products by Plutzer Lebensmittelgromrkte AG were discontinued and what are their price?", "sql": "SELECT T1.UnitPrice FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Plutzer Lebensmittelgromrkte AG' AND T1.Discontinued = 1", "source_tables": ["suppliers", "products"]}, "evidence": "products refers to ProductName; 'Plutzer Lebensmittelgromrkte AG' is a CompanyName; price refers to UnitPrice; \ndiscontinued products refers to discontinued = 1"}
{"sample_id": 6618, "db_id": "retail_world", "final": {"question": "List the cities where the product 'Mishi Kobe Niku' were shipped to.", "sql": "SELECT T1.ShipCity FROM Orders AS T1 INNER JOIN 'Order Details' AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T3.ProductName = 'Mishi Kobe Niku'", "source_tables": ["orders", "products", "order details"]}, "evidence": "cities refers to ShipCity; 'Mishi Kobe Niku' is a ProductName"}
{"sample_id": 6619, "db_id": "retail_world", "final": {"question": "What percentage does the shipment of products by Speedy Express to Sweden make up to the shipping company's total?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.ShipCountry = 'Sweden' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Speedy Express'", "source_tables": ["shippers", "orders"]}, "evidence": "Speedy Express is a company; Sweden is a ShipCountry; calculation = DIVIDE(SUM(ShipCountry = 'Sweden'), SEM(ShipCountry)) * 100"}
{"sample_id": 6620, "db_id": "retail_world", "final": {"question": "How many territory fall into region 1?", "sql": "SELECT COUNT(TerritoryID) FROM Territories WHERE RegionID = 1", "source_tables": ["territories"]}, "evidence": "region 1 refers to RegionID = 1\n\n"}
{"sample_id": 6621, "db_id": "retail_world", "final": {"question": "What are the the total number of territory in each region?", "sql": "SELECT COUNT(TerritoryDescription) FROM Territories WHERE RegionID IN (1, 2, 3, 4) GROUP BY RegionID", "source_tables": ["territories"]}, "evidence": ""}
{"sample_id": 6622, "db_id": "retail_world", "final": {"question": "How many suppliers are from UK?", "sql": "SELECT COUNT(SupplierID) FROM Suppliers WHERE Country = 'UK'", "source_tables": ["suppliers"]}, "evidence": "from UK refers to Country = 'UK'"}
{"sample_id": 6623, "db_id": "retail_world", "final": {"question": "Please give the contact name for Tokyo Traders.", "sql": "SELECT ContactName FROM Suppliers WHERE CompanyName = 'Tokyo Traders'", "source_tables": ["suppliers"]}, "evidence": "Tokyo Traders refers to CompanyName = 'Tokyo Traders'"}
{"sample_id": 6624, "db_id": "retail_world", "final": {"question": "How many employees from USA with Sales Representative title?", "sql": "SELECT COUNT(Country) FROM Employees WHERE Country = 'USA' AND Title = 'Sales Representative'", "source_tables": ["employees"]}, "evidence": "from USA refers to Country = 'USA'"}
{"sample_id": 6625, "db_id": "retail_world", "final": {"question": "What are the highest salary earn by the the employee and what is his/her position in the company?", "sql": "SELECT Salary, Title FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )", "source_tables": ["employees"]}, "evidence": "highest salary refers to max(salary); position refers to Title"}
{"sample_id": 6626, "db_id": "retail_world", "final": {"question": "How many products supplied by Plutzer Lebensmittelgromrkte AG that is currently out of stock and on order?", "sql": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Plutzer Lebensmittelgromrkte AG' AND T1.UnitsInStock = 0 AND T1.UnitsOnOrder = 0", "source_tables": ["suppliers", "products"]}, "evidence": "Plutzer Lebensmittelgromrkte AG refers to CompanyName; is currently out of stock and on order refers to UnitsInStock = 0 and UnitsOnOrder > 0"}
{"sample_id": 6627, "db_id": "retail_world", "final": {"question": "What product have the highest unit price and how many quantity have been being sold?", "sql": "SELECT T1.ProductName, T2.Quantity FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.UnitPrice DESC LIMIT 1", "source_tables": ["products", "order details"]}, "evidence": "product refers to ProductID; highest unit price refers to Max(UnitPrice)"}
{"sample_id": 6628, "db_id": "retail_world", "final": {"question": "Which employee has created the least order and please indicates the employee's title?", "sql": "SELECT T1.Title FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID GROUP BY T1.Title ORDER BY COUNT(T2.OrderID) LIMIT 1", "source_tables": ["employees", "orders"]}, "evidence": "least order refers to Min(OrderID)"}
{"sample_id": 6629, "db_id": "retail_world", "final": {"question": "What is the most common product ordered by a customer from Germany?", "sql": "SELECT T2.ProductID FROM Customers AS T1 INNER JOIN 'Order Details' AS T2 WHERE T1.Country = 'Germany' GROUP BY T2.ProductID ORDER BY COUNT(T2.ProductID) DESC LIMIT 1", "source_tables": ["order details", "customers"]}, "evidence": "most common product refers to max(count(ProductID)); customer from Germany\u00a0refers to Country = 'Germany'"}
{"sample_id": 6630, "db_id": "retail_world", "final": {"question": "What are the total products value shipped to Brazil by Speedy Express Company?", "sql": "SELECT SUM(T2.Quantity * T2.UnitPrice) FROM Orders AS T1 INNER JOIN 'Order Details' AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Shippers AS T3 ON T1.ShipVia = T3.ShipperID WHERE T3.CompanyName = 'Speedy Express' AND T1.ShipCountry = 'Brazil'", "source_tables": ["shippers", "orders", "order details"]}, "evidence": "shipped to Brazil refers to ShipCountry = 'Brazil'; by Speedy Express Company refers to CompanyName = 'Speedy Express'; total products value refers to sum(MULTIPLY(UnitPrice, Quantity))"}
{"sample_id": 6631, "db_id": "retail_world", "final": {"question": "How many subordinates does employee ID 2 have and what is the biggest order in terms of value that his/her subordinates have created?", "sql": "SELECT COUNT(T1.EmployeeID), SUM(T3.Quantity * T3.UnitPrice) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN 'Order Details' AS T3 ON T2.OrderID = T3.OrderID WHERE T1.ReportsTo = 2 ORDER BY SUM(T3.UnitPrice * T3.Quantity) DESC LIMIT 1", "source_tables": ["employees", "orders", "order details"]}, "evidence": "subordinates of employee ID 2 refers to EmployeeID where ReportsTo = 2;\u00a0 biggest order in terms of value refers to max(MULTIPLY(Quantity, UnitPrice))"}
{"sample_id": 6632, "db_id": "retail_world", "final": {"question": "How many sales values have been created by sales representative and which sales representative have the highest sales?", "sql": "SELECT SUM(T3.UnitPrice * T3.Quantity) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN 'Order Details' AS T3 ON T2.OrderID = T3.OrderID WHERE T1.Title = 'Sales Representative' ORDER BY SUM(T3.UnitPrice * T3.Quantity)", "source_tables": ["employees", "orders", "order details"]}, "evidence": "sales representative refers to Title = 'Sales Representative'; sales values refers to MULTIPLY(Quantity, UnitPrice); the highest sales refers to max(MULTIPLY(Quantity, UnitPrice))"}
{"sample_id": 6633, "db_id": "retail_world", "final": {"question": "How many employees is a UK citizen and are they all covering the same region?", "sql": "SELECT COUNT(T1.EmployeeID), T3.RegionID FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.Country = 'UK' GROUP BY T3.RegionID", "source_tables": ["employeeterritories", "employees", "territories"]}, "evidence": "is a UK citizen refers to Country = 'UK'"}
{"sample_id": 6634, "db_id": "retail_world", "final": {"question": "Which customer have the biggest purchase in one order and where does this order being ship to?", "sql": "SELECT T1.CompanyName, T2.ShipCountry FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN 'Order Details' AS T3 ON T2.OrderID = T3.OrderID GROUP BY T1.CompanyName, T2.ShipCountry ORDER BY COUNT(T3.ProductID) DESC LIMIT 1", "source_tables": ["order details", "orders", "customers"]}, "evidence": "biggest purchase refers to max(ProductID.Order_Details); ship to refers to ShipCountry"}
{"sample_id": 6635, "db_id": "retail_world", "final": {"question": "Which customer is a regular customer in this shop and what are the products category that he mostly buy?", "sql": "SELECT T1.CustomerID, T4.CategoryName FROM Orders AS T1 INNER JOIN 'Order Details' AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID INNER JOIN Categories AS T4 ON T3.CategoryID = T4.CategoryID ORDER BY T1.CustomerID DESC, T4.CategoryName DESC", "source_tables": ["categories", "orders", "products", "order details"]}, "evidence": "regular customer refers to max(count(CustomerID)); products category refers to CategoryName; mostly buy refers to max(count(CategoryID))"}
{"sample_id": 6636, "db_id": "retail_world", "final": {"question": "What are the most popular confections product and calculate the total sales generated by this product?", "sql": "SELECT COUNT(T1.UnitPrice * T3.Quantity) FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID INNER JOIN 'Order Details' AS T3 ON T1.ProductID = T3.ProductID WHERE T2.CategoryName = 'Confections' GROUP BY T3.Quantity ORDER BY T3.Quantity DESC LIMIT 1", "source_tables": ["categories", "products", "order details"]}, "evidence": "most popular confections product refers to ProductID = max(count(MULTIPLY(Quantity, UnitPrice))) from CategoryName = 'Confections' ;\u00a0 total sales refers to sum(MULTIPLY(Quantity, UnitPrice))"}
{"sample_id": 6637, "db_id": "retail_world", "final": {"question": "What is the name of product with the ID of 77?", "sql": "SELECT ProductName FROM Products WHERE ProductID = 77", "source_tables": ["products"]}, "evidence": "name of product refers to ProductName; ID refers to ProductID"}
{"sample_id": 6638, "db_id": "retail_world", "final": {"question": "State the company name of all suppliers in USA.", "sql": "SELECT CompanyName FROM Suppliers WHERE Country = 'USA'", "source_tables": ["suppliers"]}, "evidence": "in USA refers to Country = 'USA'"}
{"sample_id": 6639, "db_id": "retail_world", "final": {"question": "What is the position title for Laura Callahan?", "sql": "SELECT Title FROM Employees WHERE FirstName = 'Laura' AND LastName = 'Callahan'", "source_tables": ["employees"]}, "evidence": ""}
{"sample_id": 6640, "db_id": "retail_world", "final": {"question": "State the name of employee that manages the order from Victuailles en stock?", "sql": "SELECT DISTINCT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.CompanyName = 'Victuailles en stock'", "source_tables": ["employees", "orders", "customers"]}, "evidence": "name of employee refers to FirstName; from Victuailles en stock refers to CompanyName = 'Victuailles en stock'"}
{"sample_id": 6641, "db_id": "retail_world", "final": {"question": "How many orders were shipped by Federal Shipping?", "sql": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Federal Shipping'", "source_tables": ["shippers", "orders"]}, "evidence": "Federal Shipping refers to CompanyName = 'Federal Shipping'"}
{"sample_id": 6642, "db_id": "retail_world", "final": {"question": "Who was taking charge of orders from Morristown?", "sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Morristown'", "source_tables": ["employeeterritories", "employees", "territories"]}, "evidence": "Morristown refers to TerritoryDescription = 'Morristown'"}
{"sample_id": 6643, "db_id": "retail_world", "final": {"question": "State the name of all territories in Northern region.", "sql": "SELECT DISTINCT T1.TerritoryDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Northern'", "source_tables": ["territories", "region"]}, "evidence": "name of all territories refers to TerritoryDescription; Northern region refers to RegionDescription = 'Northern'"}
{"sample_id": 6644, "db_id": "retail_world", "final": {"question": "How many orders were handled by Michael Suyama. State the order ID.", "sql": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Michael' AND T1.LastName = 'Suyama'", "source_tables": ["employees", "orders"]}, "evidence": ""}
{"sample_id": 6645, "db_id": "retail_world", "final": {"question": "What is the ratio number of territories in Northern region and number territories in Western region?", "sql": "SELECT CAST(( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Northern' ) AS REAL) * 100 / ( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Westerns' ) AS Calu", "source_tables": ["territories", "region"]}, "evidence": "Northern region refers to RegionID = 3; Western region refers to RegionID = 2 ; ratio = divide((TerritoryDescription where RegionID = 3), (TerritoryDescription where RegionID = 2))"}
{"sample_id": 6646, "db_id": "retail_world", "final": {"question": "Provide employees' ID who are in-charge of territory ID from 1000 to 2000.", "sql": "SELECT EmployeeID FROM EmployeeTerritories WHERE TerritoryID BETWEEN 1000 AND 2000", "source_tables": ["employeeterritories"]}, "evidence": "territory ID from 1000 to 2000 refers to TerritoryID BETWEEN 1000 and 2000"}
{"sample_id": 6647, "db_id": "retail_world", "final": {"question": "List down the territory IDs, descriptions and region description which are under the in-charge of Nancy Davolio,", "sql": "SELECT T3.RegionID, T3.TerritoryDescription, T4.RegionDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T1.LastName = 'Davolio' AND T1.FirstName = 'Nancy'", "source_tables": ["employeeterritories", "employees", "territories", "region"]}, "evidence": "descriptions refers to TerritoryDescription; region refers to RegionDescription"}
{"sample_id": 6648, "db_id": "retail_world", "final": {"question": "Describe Sales Representative names who were hired in 1992 and compare the number of orders among them.", "sql": "SELECT T1.FirstName, T1.LastName, COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.Title = 'Sales Representative' AND STRFTIME('%Y', T1.HireDate) = '1992' GROUP BY T1.EmployeeID, T1.FirstName, T1.LastName", "source_tables": ["employees", "orders"]}, "evidence": "Sales Representative refers to Title = 'Sales Representative'\uff1bwere hired in 1992 refers to HireDate = '1992'"}
{"sample_id": 6649, "db_id": "retail_world", "final": {"question": "Calculate the total payment of orders for Vegie-spread product.", "sql": "SELECT SUM(T2.UnitPrice * T2.Quantity * (1 - T2.Discount)) AS sum FROM Products AS T1 INNER JOIN 'Order Details' AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName = 'Vegie-spread'", "source_tables": ["products", "order details"]}, "evidence": "Vegie-spread product refers to ProductName = 'Vegie-spread'\uff1btotal payment = MULTIPLY(UnitPrice, Quantity, (1-Discount))"}
{"sample_id": 6650, "db_id": "retail_world", "final": {"question": "List down the company names which supplied products for the order on 14th August, 1996.", "sql": "SELECT T1.CompanyName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN 'Order Details' AS T3 ON T2.ProductID = T3.ProductID INNER JOIN Orders AS T4 ON T3.OrderID = T4.OrderID WHERE date(T4.OrderDate) = '1996-08-14'", "source_tables": ["suppliers", "orders", "products", "order details"]}, "evidence": "products refers to Order_Details.ProductID; on 14th August, 1996 refers to OrderDate = '8/14/1996'"}
{"sample_id": 6651, "db_id": "retail_world", "final": {"question": "Among the product lists in order ID 10337, write down the product names and suppliers which had the highest in reorder level.", "sql": "SELECT T2.ProductName, T1.CompanyName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN 'Order Details' AS T3 ON T2.ProductID = T3.ProductID WHERE T3.OrderID = 10337 ORDER BY T2.ReorderLevel DESC LIMIT 1", "source_tables": ["suppliers", "products", "order details"]}, "evidence": "suppliers refers to CompanyName; highest in reorder level refers to Max(ReorderLevel)"}
{"sample_id": 6652, "db_id": "retail_world", "final": {"question": "Name the shipper which had the most shipments in first quarter of 1998.", "sql": "SELECT T1.CompanyName FROM Shippers AS T1 INNER JOIN Orders AS T2 ON T1.ShipperID = T2.ShipVia WHERE STRFTIME('%Y', T2.ShippedDate) = '1998' GROUP BY T1.CompanyName ORDER BY COUNT(T2.OrderID) DESC LIMIT 1", "source_tables": ["shippers", "orders"]}, "evidence": "Name the shipper refers to CompanyName; most shipments refers to max(count(OrderID)); first quarter of 1998 refers to ShippedDate = 1998/1 and ShippedDate = 1998/2 and ShippedDate = 1998/3 and ShippedDate = 1998/4"}
{"sample_id": 6653, "db_id": "retail_world", "final": {"question": "How many customers are located in London?", "sql": "SELECT COUNT(CustomerID) FROM Customers WHERE City = 'London'", "source_tables": ["customers"]}, "evidence": "London refers to City = 'London'"}
{"sample_id": 6654, "db_id": "retail_world", "final": {"question": "What is the title of Michael Suyama?", "sql": "SELECT Title FROM Employees WHERE FirstName = 'Michael' AND LastName = 'Suyama'", "source_tables": ["employees"]}, "evidence": ""}
{"sample_id": 6655, "db_id": "retail_world", "final": {"question": "List out the full name of employee who has birth day on \"3/4/1955 12:00:00 AM\".", "sql": "SELECT FirstName, LastName FROM Employees WHERE BirthDate = '1955-03-04 00:00:00'", "source_tables": ["employees"]}, "evidence": "full name refers to FirstName, LastName; brith day refers to BirthDate"}
{"sample_id": 6656, "db_id": "retail_world", "final": {"question": "Mention the first name of employee who took care the order id 10250.", "sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10250", "source_tables": ["employees", "orders"]}, "evidence": ""}
{"sample_id": 6657, "db_id": "retail_world", "final": {"question": "How many orders that the employees who are located in Tacoma handled?", "sql": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.City = 'Tacoma'", "source_tables": ["employees", "orders"]}, "evidence": "located in Tacoma refers to City = 'Tacoma'"}
{"sample_id": 6658, "db_id": "retail_world", "final": {"question": "What is the country location of the employee who handled order id 10257?", "sql": "SELECT T1.Country FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10257", "source_tables": ["employees", "orders"]}, "evidence": ""}
{"sample_id": 6659, "db_id": "retail_world", "final": {"question": "What is the title of the employee who handled order id 10270?", "sql": "SELECT T1.Title FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10257", "source_tables": ["employees", "orders"]}, "evidence": ""}
{"sample_id": 6660, "db_id": "retail_world", "final": {"question": "Give the phone number of the customer who placed the order id 10264.", "sql": "SELECT T1.Phone FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.OrderID = 10264", "source_tables": ["orders", "customers"]}, "evidence": ""}
{"sample_id": 6661, "db_id": "retail_world", "final": {"question": "What is the region where the customer who placed the order id 10276 located?", "sql": "SELECT T1.Region FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.OrderID = 10276", "source_tables": ["orders", "customers"]}, "evidence": ""}
{"sample_id": 6662, "db_id": "retail_world", "final": {"question": "Among the employees who handled orders to Brazil, who has the highest salary and calculate the average salary of them.", "sql": "SELECT T1.FirstName, T1.LastName, AVG(T1.Salary) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.ShipCountry = 'Brazil' GROUP BY T1.FirstName, T1.LastName ORDER BY SUM(T1.Salary) DESC LIMIT 1", "source_tables": ["employees", "orders"]}, "evidence": "orders to Brazil refers to ShipCountry = 'Brazil'; highest salary refers to max(salary); average salary = AVG(Salary)"}
{"sample_id": 6663, "db_id": "retail_world", "final": {"question": "Calculate the percentage salary of employees who handled orders shipped in 1996.", "sql": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', T2.ShippedDate) = '1996' THEN T1.Salary ELSE 0 END) AS REAL) * 100 / SUM(T1.Salary) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID", "source_tables": ["employees", "orders"]}, "evidence": "shipped in 1996 refers to ShippedDate = 1996; percentage salary = divide(sum(Salary when ShippedDate = 1996), sum(Salary)) as percentage"}
{"sample_id": 6664, "db_id": "retail_world", "final": {"question": "When was the employee who handled order id 10281 hired?", "sql": "SELECT T1.HireDate FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10281", "source_tables": ["employees", "orders"]}, "evidence": "When was hired refers to HireDate"}
{"sample_id": 6665, "db_id": "retail_world", "final": {"question": "How many orders was handled by employees who reported to employee id 5?", "sql": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.ReportsTo = 5", "source_tables": ["employees", "orders"]}, "evidence": "reported to employee id 5 refers to ReportsTo = 5"}
{"sample_id": 6666, "db_id": "retail_world", "final": {"question": "Give the full name of employee who handled the order id 10280.", "sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10280", "source_tables": ["employees", "orders"]}, "evidence": "full name refers to FirstName, LastName"}
{"sample_id": 6667, "db_id": "retail_world", "final": {"question": "State the shipping company of order id 10260.", "sql": "SELECT T2.CompanyName FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.OrderID = 10260", "source_tables": ["shippers", "orders"]}, "evidence": "shipping company refers to CompanyName"}
{"sample_id": 6668, "db_id": "retail_world", "final": {"question": "How many orders have been shipped through United Package?", "sql": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'United Package'", "source_tables": ["shippers", "orders"]}, "evidence": "shipped through refers to ShipVia; United Package refers to CompanyName = 'United Package'"}
{"sample_id": 6669, "db_id": "retail_world", "final": {"question": "List out the phone number of the shipping company of order id 10296.", "sql": "SELECT T2.Phone FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.OrderID = 10260", "source_tables": ["shippers", "orders"]}, "evidence": "shipping company refers to Shippers; phone number refers to Phone"}
{"sample_id": 6866, "db_id": "retails", "final": {"question": "How many suppliers have their accounts in debt?", "sql": "SELECT COUNT(s_suppkey) FROM supplier WHERE s_acctbal < 0", "source_tables": ["supplier"]}, "evidence": "account in debt refers to s_acctbal < 0"}
{"sample_id": 6867, "db_id": "retails", "final": {"question": "Please list the names of the top 3 suppliers with the most amount of money in their accounts.", "sql": "SELECT s_name FROM supplier ORDER BY s_acctbal DESC LIMIT 3", "source_tables": ["supplier"]}, "evidence": "supplier name refers to s_name; the most amount of money refers to max(s_acctbal)"}
{"sample_id": 6868, "db_id": "retails", "final": {"question": "Please list the phone numbers of all the suppliers in Germany.", "sql": "SELECT T1.s_phone FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'Germany'", "source_tables": ["supplier", "nation"]}, "evidence": "phone number refers to s_phone; Germany refers to n_name = 'Germany'"}
{"sample_id": 6869, "db_id": "retails", "final": {"question": "Please list the names of all the suppliers for the part \"hot spring dodger dim light\".", "sql": "SELECT T2.s_name FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_name = 'hot spring dodger dim light'", "source_tables": ["part", "partsupp", "supplier"]}, "evidence": "supplier name refers to s_name; part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'"}
{"sample_id": 6870, "db_id": "retails", "final": {"question": "What is the lowest supply cost for the part \"hot spring dodger dim light\"?", "sql": "SELECT MIN(T1.ps_supplycost) FROM partsupp AS T1 INNER JOIN part AS T2 ON T1.ps_partkey = T2.p_partkey WHERE T2.p_name = 'hot spring dodger dim light'", "source_tables": ["part", "partsupp"]}, "evidence": "the lowest supply cost refers to min(ps_supplycost); part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'"}
{"sample_id": 6871, "db_id": "retails", "final": {"question": "What is the name of the supplier that provides the part \"hot spring dodger dim light\" with the lowest supply cost?", "sql": "SELECT T2.s_name FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_name = 'hot spring dodger dim light' ORDER BY T1.ps_supplycost LIMIT 1", "source_tables": ["part", "partsupp", "supplier"]}, "evidence": "supplier name refers to s_name; part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'; the lowest supply cost refers to min(ps_supplycost)"}
{"sample_id": 6872, "db_id": "retails", "final": {"question": "What is the total quantity available by all suppliers for the part \"hot spring dodger dim light\"?", "sql": "SELECT SUM(T1.ps_availqty) FROM partsupp AS T1 INNER JOIN part AS T2 ON T1.ps_partkey = T2.p_partkey WHERE T2.p_name = 'hot spring dodger dim light'", "source_tables": ["part", "partsupp"]}, "evidence": "total quantity available refers to sum(ps_availqty); part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'"}
{"sample_id": 6873, "db_id": "retails", "final": {"question": "Which supplier can provide the most number of \"hot spring dodger dim light\"? Please give the supplier's phone number.", "sql": "SELECT T3.s_phone FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_name = 'hot spring dodger dim light' ORDER BY T2.ps_availqty DESC LIMIT 1", "source_tables": ["part", "partsupp", "supplier"]}, "evidence": "the most number refers to max(ps_availqty); \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'; phone number refers to s_phone"}
{"sample_id": 6874, "db_id": "retails", "final": {"question": "Please list the names of all the suppliers for the part with the highest retail price.", "sql": "SELECT T3.s_phone FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_name = 'hot spring dodger dim light' ORDER BY T1.p_size DESC LIMIT 1", "source_tables": ["part", "partsupp", "supplier"]}, "evidence": "supplier name refers to s_name; the highest retail price refers to max(p_retailprice)"}
{"sample_id": 6875, "db_id": "retails", "final": {"question": "How many suppliers for the part \"hot spring dodger dim light\" are in Vietnam?", "sql": "SELECT COUNT(T3.s_name) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey INNER JOIN nation AS T4 ON T3.s_nationkey = T4.n_nationkey WHERE T1.p_name = 'hot spring dodger dim light' AND T4.n_name = 'VIETNAM'", "source_tables": ["part", "partsupp", "nation", "supplier"]}, "evidence": "part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'; Vietnam refers to n_name = 'VIETNAM'"}
{"sample_id": 6876, "db_id": "retails", "final": {"question": "Among the suppliers providing parts under the type \"promo brushed steel\", how many of them are in debt?", "sql": "SELECT COUNT(T3.s_name) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T3.s_acctbal < 0 AND T1.p_type = 'PROMO BRUSHED STEEL'", "source_tables": ["part", "partsupp", "supplier"]}, "evidence": "type \"promo brushed steel\" refers to p_type = 'PROMO BRUSHED STEEL'; in debt refers to s_acctbal < 0"}
{"sample_id": 6877, "db_id": "retails", "final": {"question": "Please list the names of all the suppliers for parts under Brand#55.", "sql": "SELECT T3.s_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_brand = 'Brand#55'", "source_tables": ["part", "partsupp", "supplier"]}, "evidence": "supplier name refers to s_name; Brand#55 refers to p_brand = 'Brand#55'"}
{"sample_id": 6878, "db_id": "retails", "final": {"question": "Among all the parts under the type \"promo brushed steel\", how many of them have a total available quantity from all suppliers of under 5000?", "sql": "SELECT SUM(num) FROM ( SELECT COUNT(T3.s_name) AS num FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_type = 'PROMO BRUSHED STEEL' GROUP BY T2.ps_partkey HAVING SUM(T2.ps_availqty) < 5000 ) T", "source_tables": ["part", "partsupp", "supplier"]}, "evidence": "type \"promo brushed steel\" refers to p_type = 'PROMO BRUSHED STEEL'; a total available quantity of under 5000 refers to sum(ps_availqty) < 5000"}
{"sample_id": 6879, "db_id": "retails", "final": {"question": "The part \"hot spring dodger dim light\" is ordered in how many orders?", "sql": "SELECT COUNT(T1.p_partkey) FROM part AS T1 INNER JOIN lineitem AS T2 ON T1.p_partkey = T2.l_partkey WHERE T1.p_name = 'hot spring dodger dim light'", "source_tables": ["part", "lineitem"]}, "evidence": "part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'"}
{"sample_id": 6880, "db_id": "retails", "final": {"question": "What is the total quantity of the part \"hot spring dodger dim light\" ordered in all orders?", "sql": "SELECT SUM(T1.p_partkey) FROM part AS T1 INNER JOIN lineitem AS T2 ON T1.p_partkey = T2.l_partkey WHERE T1.p_name = 'hot spring dodger dim light'", "source_tables": ["part", "lineitem"]}, "evidence": "total quantity refers to sum(l_quantity); part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'"}
{"sample_id": 6881, "db_id": "retails", "final": {"question": "Please list the order keys of all the orders that have more than 2 parts with a jumbo case container.", "sql": "SELECT T.l_orderkey FROM ( SELECT T2.l_orderkey, COUNT(T2.l_partkey) AS num FROM part AS T1 INNER JOIN lineitem AS T2 ON T1.p_partkey = T2.l_partkey WHERE T1.p_container = 'JUMBO CASE' GROUP BY T2.l_orderkey ) AS T WHERE T.num > 2", "source_tables": ["part", "lineitem"]}, "evidence": "order key refers to l_orderkey; jumbo case container refers to p_container = 'JUMBO CASE'; more than 2 parts refers to count(l_partkey) > 2"}
{"sample_id": 6882, "db_id": "retails", "final": {"question": "Among all the suppliers in debt, how many of them are in Europe?", "sql": "SELECT COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey INNER JOIN supplier AS T3 ON T1.n_nationkey = T3.s_nationkey WHERE T2.r_name = 'EUROPE' AND T3.s_acctbal < 0", "source_tables": ["supplier", "nation", "region"]}, "evidence": "in debt refers to s_acctbal < 0; Europe refers to r_name = 'EUROPE'"}
{"sample_id": 6883, "db_id": "retails", "final": {"question": "Among all the suppliers providing the part \"hot spring dodger dim light\", how many of them are in Europe?", "sql": "SELECT COUNT(T1.r_regionkey) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey INNER JOIN supplier AS T3 ON T2.n_nationkey = T3.s_nationkey WHERE T1.r_name = 'EUROPE'", "source_tables": ["supplier", "nation", "region"]}, "evidence": "part \"hot spring dodger dim light\" refers to p_name = hot spring dodger dim light; Europe refers to r_name = 'EUROPE'"}
{"sample_id": 6884, "db_id": "retails", "final": {"question": "Please list the phone numbers of all the suppliers for the parts ordered in order no.1.", "sql": "SELECT T2.s_phone FROM lineitem AS T1 INNER JOIN supplier AS T2 ON T1.l_suppkey = T2.s_suppkey WHERE T1.l_orderkey = 1", "source_tables": ["supplier", "lineitem"]}, "evidence": "phone number refers to s_phone; order no.1 refers to l_orderkey = 1"}
{"sample_id": 6885, "db_id": "retails", "final": {"question": "Among the suppliers for the parts ordered in order no.4, how many of them are in debt?", "sql": "SELECT COUNT(T1.l_linenumber) FROM lineitem AS T1 INNER JOIN supplier AS T2 ON T1.l_suppkey = T2.s_suppkey WHERE T1.l_orderkey = 4 AND T2.s_acctbal < 0", "source_tables": ["supplier", "lineitem"]}, "evidence": "order no.4 refers to l_orderkey = 4; in debt refers to s_acctbal < 0"}
{"sample_id": 6886, "db_id": "retails", "final": {"question": "Among the parts that are returned, how many of them are provided by a supplier in debt?", "sql": "SELECT COUNT(T1.l_partkey) FROM lineitem AS T1 INNER JOIN supplier AS T2 ON T1.l_suppkey = T2.s_suppkey WHERE T1.l_returnflag = 'R' AND T2.s_acctbal < 0", "source_tables": ["supplier", "lineitem"]}, "evidence": "returned refers to l_returnflag = 'R'; in debt refers to s_acctbal < 0"}
{"sample_id": 6887, "db_id": "retails", "final": {"question": "On which date was the part \"burnished seashell gainsboro navajo chocolate\" in order no.1 shipped?", "sql": "SELECT T1.l_shipdate FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T1.l_orderkey = 1 AND T2.p_name = 'burnished seashell gainsboro navajo chocolate'", "source_tables": ["part", "lineitem"]}, "evidence": "date refers to l_shipdate; part \"burnished seashell gainsboro navajo chocolate\" refers to p_name = 'burnished seashell gainsboro navajo chocolate'; order no.1 refers to l_orderkey = 1"}
{"sample_id": 6888, "db_id": "retails", "final": {"question": "What is the quantity of the part \"burnished seashell gainsboro navajo chocolate\" ordered in order no.1?", "sql": "SELECT T1.l_quantity FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T1.l_orderkey = 1 AND T2.p_name = 'burnished seashell gainsboro navajo chocolate'", "source_tables": ["part", "lineitem"]}, "evidence": "quantity refers to l_quantity; part \"burnished seashell gainsboro navajo chocolate\" refers to p_name = 'burnished seashell gainsboro navajo chocolate'; order no.1 refers to l_orderkey = 1"}
{"sample_id": 6889, "db_id": "retails", "final": {"question": "Which part is ordered in a bigger amount in order no.1, \"burnished seashell gainsboro navajo chocolate\" or \"salmon white grey tan navy\"?", "sql": "SELECT T.p_name FROM ( SELECT T2.p_name, SUM(T1.l_quantity) AS num FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name IN ('salmon white grey tan navy', 'burnished seashell gainsboro navajo chocolate') GROUP BY T1.l_partkey ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["part", "lineitem"]}, "evidence": "amount refers to sum(l_quantity); order no.1 refers to l_orderkey = 1; \"burnished seashell gainsboro navajo chocolate\" or \"salmon white grey tan navy\" refers to p_name IN ('salmon white grey tan navy', 'burnished seashell gainsboro navajo chocolate')"}
{"sample_id": 6890, "db_id": "retails", "final": {"question": "What is the biggest discount among all orders for the part \"burnished seashell gainsboro navajo chocolate\"?", "sql": "SELECT MAX(T1.l_discount) FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name = 'burnished seashell gainsboro navajo chocolate'", "source_tables": ["part", "lineitem"]}, "evidence": "the biggest discount refers to max(l_discount); part \"burnished seashell gainsboro navajo chocolate\" refers to p_name = 'burnished seashell gainsboro navajo chocolate'"}
{"sample_id": 6891, "db_id": "retails", "final": {"question": "Please list all the modes of shipping for the part \"burnished seashell gainsboro navajo chocolate\".", "sql": "SELECT DISTINCT T1.l_shipmode FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name = 'burnished seashell gainsboro navajo chocolate'", "source_tables": ["part", "lineitem"]}, "evidence": "mode of shipping refers to l_shipmode; part \"burnished seashell gainsboro navajo chocolate\" refers to p_name = 'burnished seashell gainsboro navajo chocolate'"}
{"sample_id": 6892, "db_id": "retails", "final": {"question": "What is the average supply cost for the part \"hot spring dodger dim light\"?", "sql": "SELECT AVG(T1.ps_supplycost) FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_name = 'hot spring dodger dim light'", "source_tables": ["part", "partsupp", "supplier"]}, "evidence": "average supply cost refers to avg(ps_supplycost); part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'"}
{"sample_id": 6893, "db_id": "retails", "final": {"question": "How much higher in percentage is the highest supply cost of the part \"hot spring dodger dim light\" than the lowest supply cost?", "sql": "SELECT CAST((MAX(T1.ps_supplycost) - MIN(T1.ps_supplycost)) AS REAL) * 100 / MIN(T1.ps_supplycost) FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_name = 'hot spring dodger dim light'", "source_tables": ["part", "partsupp", "supplier"]}, "evidence": "part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'; percentage = divide(subtract(max(ps_supplycost), min(ps_supplycost)), min(ps_supplycost)) * 100%"}
{"sample_id": 6894, "db_id": "retails", "final": {"question": "What is the profit for part no.98768 in order no.1?", "sql": "SELECT T1.l_extendedprice * (1 - T1.l_discount) - T2.ps_supplycost * T1.l_quantity FROM lineitem AS T1 INNER JOIN partsupp AS T2 ON T1.l_suppkey = T2.ps_suppkey WHERE T1.l_orderkey = 1 AND T1.l_partkey = 98768", "source_tables": ["partsupp", "lineitem"]}, "evidence": "part no.98768 refers to l_partkey = 98768; order no.1 refers to l_orderkey = 1; profit = subtract(multiply(l_extendedprice, subtract(1, l_discount)), multiply(ps_supplycost, l_quantity))"}
{"sample_id": 6895, "db_id": "retails", "final": {"question": "What is the discounted price of the part \"burnished seashell gainsboro navajo chocolate\" in order no.1?", "sql": "SELECT T1.l_extendedprice * (1 - T1.l_discount) FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name = 'burnished seashell gainsboro navajo chocolate' AND T1.l_orderkey = 1", "source_tables": ["part", "lineitem"]}, "evidence": "part \"burnished seashell gainsboro navajo chocolate\" refers to p_name = 'burnished seashell gainsboro navajo chocolate'; order no.1 refers to l_orderkey = 1; discounted price refers to multiply(l_extendedprice, subtract(1, l_discount))"}
{"sample_id": 6896, "db_id": "retails", "final": {"question": "Which market segment does the customer with the highest amount of debt belongs to?", "sql": "SELECT c_mktsegment FROM customer WHERE c_acctbal = ( SELECT MIN(c_acctbal) FROM customer )", "source_tables": ["customer"]}, "evidence": "market segment refers to c_mktsegment; the highest amount of debt refers to max(c_acctbal)"}
{"sample_id": 6897, "db_id": "retails", "final": {"question": "In 1997, how many orders were shipped via mail?", "sql": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1997' AND l_shipmode = 'MAIL'", "source_tables": ["lineitem"]}, "evidence": "1997 refers to year(l_shipdate) = 1997; shipped via mail refers to l_shipmode = 'MAIL'"}
{"sample_id": 6898, "db_id": "retails", "final": {"question": "How many customers are in the furniture segment?", "sql": "SELECT COUNT(c_custkey) FROM customer WHERE c_mktsegment = 'FURNITURE'", "source_tables": ["customer"]}, "evidence": "furniture segment refers to c_mktsegment = 'FURNITURE'"}
{"sample_id": 6899, "db_id": "retails", "final": {"question": "Among the items shipped in 1994 via truck, how many items were returned?", "sql": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1994' AND l_returnflag = 'R' AND l_shipmode = 'TRUCK'", "source_tables": ["lineitem"]}, "evidence": "1994 refers to year(l_shipdate) = 1994; via truck refers to l_shipmode = 'TRUCK'; returned refers to l_returnflag = 'R'"}
{"sample_id": 6900, "db_id": "retails", "final": {"question": "How many customers in the machinery segment are in debt?", "sql": "SELECT COUNT(c_custkey) FROM customer WHERE c_acctbal < 0 AND c_mktsegment = 'MACHINERY'", "source_tables": ["customer"]}, "evidence": "machinery segment refers to c_mktsegment = 'MACHINERY'; in debt refers to c_acctbal < 0"}
{"sample_id": 6901, "db_id": "retails", "final": {"question": "How many urgent orders did Clerk#000000001 handle in 1997?", "sql": "SELECT COUNT(o_orderkey) FROM orders WHERE STRFTIME('%Y', o_orderdate) = '1997' AND o_clerk = 'Clerk#000000001' AND o_orderpriority = '1-URGENT'", "source_tables": ["orders"]}, "evidence": "urgent order refers to o_orderpriority = '1-URGENT'; Clerk#000000001 refers to o_clerk = 'Clerk#000000001'; 1997 refers to year(o_orderdate) = 1997"}
{"sample_id": 6902, "db_id": "retails", "final": {"question": "What is the name of the customer whose order was delivered the longest?", "sql": "SELECT T3.c_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN customer AS T3 ON T1.o_custkey = T3.c_custkey ORDER BY (JULIANDAY(T2.l_receiptdate) - JULIANDAY(T2.l_commitdate)) DESC LIMIT 1", "source_tables": ["customer", "lineitem", "orders"]}, "evidence": "name of the customer refers to c_name; delivered the longest refers to max(subtract(l_receiptdate, l_commitdate))"}
{"sample_id": 6903, "db_id": "retails", "final": {"question": "How much is the total price of all the orders shipped to customers in Argentina?", "sql": "SELECT SUM(T3.o_totalprice) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey INNER JOIN orders AS T3 ON T1.c_custkey = T3.o_custkey WHERE T2.n_name = 'ARGENTINA'", "source_tables": ["nation", "customer", "orders"]}, "evidence": "total price = sum(o_totalprice); Argentina refers to n_name = 'Argentina'"}
{"sample_id": 6904, "db_id": "retails", "final": {"question": "How many customers in the building segments have orders with a total price of no less than 50,000?", "sql": "SELECT COUNT(T2.c_name) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'BUILDING' AND T1.o_totalprice > 50000", "source_tables": ["customer", "orders"]}, "evidence": "building segment refers to c_mktsegment = 'BUILDING'; a total price of no less than 50,000 refers to o_totalprice > 50000"}
{"sample_id": 6905, "db_id": "retails", "final": {"question": "Which country has the least number of suppliers?", "sql": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey GROUP BY T1.s_nationkey ORDER BY COUNT(T1.s_name) LIMIT 1", "source_tables": ["supplier", "nation"]}, "evidence": "country refers to n_name; the least number of suppliers refers to min(count(s_name))"}
{"sample_id": 6906, "db_id": "retails", "final": {"question": "How much is the part supply cost for the medium metallic grey dodger linen?", "sql": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_name = 'medium metallic grey dodger linen'", "source_tables": ["part", "partsupp"]}, "evidence": "part supply cost refers to ps_supplycost; medium metallic grey dodger linen refers to p_name = 'medium metallic grey dodger linen'"}
{"sample_id": 6907, "db_id": "retails", "final": {"question": "What are the top 2 countries with the highest number of indebted suppliers?", "sql": "SELECT T.n_name FROM ( SELECT T2.n_name, SUM(T1.s_acctbal) AS num FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 GROUP BY T1.s_nationkey ) AS T ORDER BY T.num LIMIT 2", "source_tables": ["supplier", "nation"]}, "evidence": "country refers to c_name; highest number of indebted refers to max(sum(acctbal)) where s_acctbal < 0"}
{"sample_id": 6908, "db_id": "retails", "final": {"question": "What are the names of the parts that have a part supply cost of at least 1,000?", "sql": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T2.ps_supplycost > 1000", "source_tables": ["part", "partsupp"]}, "evidence": "name of the part refers to p_name; part supply cost of at least 1,000 refers to ps_supplycost > 1000"}
{"sample_id": 6909, "db_id": "retails", "final": {"question": "What is the name of the country of the supplier with the highest debt?", "sql": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey ORDER BY T1.s_suppkey DESC LIMIT 1", "source_tables": ["supplier", "nation"]}, "evidence": "name of the country refers to n_name; the highest debt refers to min(s_acctbal)"}
{"sample_id": 6910, "db_id": "retails", "final": {"question": "Who is the clerk in charge of handling the item with the highest amount of extended price?", "sql": "SELECT T1.o_clerk FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey ORDER BY T2.l_extendedprice DESC LIMIT 1", "source_tables": ["lineitem", "orders"]}, "evidence": "clerk refers to o_clerk; the highest amount of extended price refers to max(l_extendedprice)"}
{"sample_id": 6911, "db_id": "retails", "final": {"question": "What are the total quantities of the items ordered by customer 101660 on 10/5/1995?", "sql": "SELECT SUM(T2.l_quantity) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderdate = '1995-10-05' AND T1.o_custkey = 101660", "source_tables": ["lineitem", "orders"]}, "evidence": "total quantity refers to sum(l_quantity); customer 101660 refers to o_custkey = 101660; on 10/5/1995 refers to o_orderdate = '1995-10-05'"}
{"sample_id": 6912, "db_id": "retails", "final": {"question": "What is the total amount of tax charged for the order placed by customer 88931 on 7/13/994?", "sql": "SELECT SUM(T2.l_extendedprice * (1 - T2.l_discount) * (1 + T2.l_tax)) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_custkey = 88931 AND T1.o_orderdate = '1994-07-13'", "source_tables": ["lineitem", "orders"]}, "evidence": "total amount of tax refers to sum(multiply(multiply(l_extendedprice, subtract(1, l_discount)), add(1, l_tax))); customer 88931 refers to o_custkey = 88931; on 7/13/1994 refers to o_orderdate = '1994-07-13'"}
{"sample_id": 6913, "db_id": "retails", "final": {"question": "What are the names of the parts that were ordered by customer 110942?", "sql": "SELECT T3.p_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN part AS T3 ON T2.l_partkey = T3.p_partkey WHERE T1.o_custkey = 110942", "source_tables": ["part", "lineitem", "orders"]}, "evidence": "name of the part refers to p_name; customer 110942 refers to o_custkey = 110942"}
{"sample_id": 6914, "db_id": "retails", "final": {"question": "How much is the discounted price of every item that customer 111511 ordered in order 53159? List the names of the parts of every item.", "sql": "SELECT T2.l_extendedprice * (1 - T2.l_discount), T3.p_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN part AS T3 ON T2.l_partkey = T3.p_partkey WHERE T1.o_custkey = 111511 AND T1.o_orderkey = 53159", "source_tables": ["part", "lineitem", "orders"]}, "evidence": "discounted price refers to multiply(l_extendedprice, subtract(1, l_discount)); customer 111511 refers to o_custkey = 111511; order 53159 refers to o_orderkey = 53159; name of the part refers to p_name"}
{"sample_id": 6981, "db_id": "ice_hockey_draft", "final": {"question": "Among the players who played in OHL league during the regular season in 2007-2008, who is the player that attained the most number of assist?", "sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2007-2008' AND T1.LEAGUE = 'OHL' AND T1.GAMETYPE = 'Regular Season' ORDER BY T1.A DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "OHL league refers to LEAGUE = 'OHL'; who refers to PlayerName; regular season refers to GAMETYPE = 'Regular Season'; most number of assist refers to MAX(A); 2007-2008 season refers to SEASON = '2007-2008';"}
{"sample_id": 6982, "db_id": "ice_hockey_draft", "final": {"question": "How many teams did the heaviest player drafted by Arizona Coyotes have played for?", "sql": "SELECT COUNT(T2.TEAM) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN weight_info AS T3 ON T1.weight = T3.weight_id WHERE T1.overallby = 'Arizona Coyotes' ORDER BY T3.weight_in_lbs DESC LIMIT 1", "source_tables": ["playerinfo", "weight_info", "seasonstatus"]}, "evidence": "heaviest player refers to MAX(weight_in_lb); drafted by Arizona Coyotes refers to overallby = 'Arizona Coyotes';"}
{"sample_id": 6983, "db_id": "ice_hockey_draft", "final": {"question": "Calculate the average weight in pounds of all players drafted by Arizona Coyotes.", "sql": "SELECT CAST(SUM(T1.weight_in_lbs) AS REAL) / COUNT(T2.ELITEID) FROM weight_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.weight_id = T2.weight WHERE T2.overallby = 'Arizona Coyotes'", "source_tables": ["weight_info", "playerinfo"]}, "evidence": "average weight in pounds = AVG(weight_in_lbs); weight in pounds refers to weight_in_lbs; players refers to PlayerName; drafted by Arizona Coyotes refers to overallby = 'Arizona Coyotes';"}
{"sample_id": 6984, "db_id": "ice_hockey_draft", "final": {"question": "Calculate the average height in centimeter of all players who played in Acadie-Bathurst Titan during regular season.", "sql": "SELECT CAST(SUM(T1.height_in_cm) AS REAL) / COUNT(T2.ELITEID) FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height INNER JOIN SeasonStatus AS T3 ON T2.ELITEID = T3.ELITEID WHERE T3.TEAM = 'Acadie-Bathurst Titan' AND T3.GAMETYPE = 'Regular Season'", "source_tables": ["playerinfo", "height_info", "seasonstatus"]}, "evidence": "average height in centimeter = AVG(height_in_cm); height in centimeter refers to height_in_cm; players refers to PlayerName; Acadie-Bathurst Titan refers to TEAM = 'Acadie-Bathurst Titan'; regular season refers to GAMETYPE = 'Regular Season';"}
{"sample_id": 6985, "db_id": "ice_hockey_draft", "final": {"question": "How many games did Per Mars play in the 1997-1998 season?", "sql": "SELECT T2.GP FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.SEASON = '1997-1998' AND T1.PlayerName = 'Pavel Patera'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "1997-1998 season refers to SEASON = '1997-1998';"}
{"sample_id": 6986, "db_id": "ice_hockey_draft", "final": {"question": "How heavy is Matthias Trattnig in kilograms?", "sql": "SELECT T2.weight_in_kg FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.PlayerName = 'Pavel Patera'", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "how heavy in kilograms refers to weight_in_kg;"}
{"sample_id": 6988, "db_id": "ice_hockey_draft", "final": {"question": "What team did Niklas Eckerblom play in the 1997-1998 season?", "sql": "SELECT T2.TEAM FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.SEASON = '1997-1998' AND T1.PlayerName = 'Niko Kapanen'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "1997-1998 season refers to SEASON = '1997-1998';"}
{"sample_id": 6989, "db_id": "ice_hockey_draft", "final": {"question": "Which team has the most Swedish?", "sql": "SELECT T.TEAM FROM ( SELECT T2.TEAM, COUNT(DISTINCT T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.nation = 'Sweden' GROUP BY T2.TEAM ORDER BY COUNT(DISTINCT T1.ELITEID) DESC LIMIT 1 ) AS T", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "Swedish refers to nation = 'Sweden'; team with the most Swedish refers to MAX(TEAM WHERE nation = 'Sweden');"}
{"sample_id": 6990, "db_id": "ice_hockey_draft", "final": {"question": "How many playoffs did Per Mars participate in?", "sql": "SELECT SUM(T2.GP) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.PlayerName = 'Per Mars' AND T2.GAMETYPE = 'Playoffs'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "playoffs refers to GAMETYPE = 'Playoffs';"}
{"sample_id": 6991, "db_id": "ice_hockey_draft", "final": {"question": "Name the player who had the most goals for team Rimouski Oceanic in playoff.", "sql": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.TEAM = 'Rimouski Oceanic' AND T2.GAMETYPE = 'Playoffs' ORDER BY T2.G DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "name of the player refers to PlayerName; most goals refers to MAX(G); team Rimouski Oceanic refers to TEAM = 'Rimouski Oceanic'; playoff refers to GAMETYPE = 'Playoffs';"}
{"sample_id": 6992, "db_id": "ice_hockey_draft", "final": {"question": "Which country do most players of team Plymouth Whalers come from?", "sql": "SELECT T.nation FROM ( SELECT T1.nation, COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.TEAM = 'Plymouth Whalers' GROUP BY T1.nation ORDER BY COUNT(T1.ELITEID) DESC LIMIT 1 ) AS T", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "country and nation are synonyms; country where most players come from refers to MAX(COUNT(nation WHERE TEAM = 'Plymouth Whalers')); players refers to PlayerName; team Plymouth Whalers refers to TEAM = 'Plymouth Whalers';"}
{"sample_id": 6993, "db_id": "ice_hockey_draft", "final": {"question": "Who had the most assists of team Plymouth Whalers in the 1999-2000 season?", "sql": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.TEAM = 'Plymouth Whalers' AND T2.SEASON = '1999-2000' ORDER BY T2.A DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "who refers to PlayerName; most assists refers to MAX(A); team Plymouth Whalers refers to TEAM = 'Plymouth Whalers'; 1999-2000 season refers to SEASON = '1999-2000';"}
{"sample_id": 6994, "db_id": "ice_hockey_draft", "final": {"question": "Indicate the height of all players from team Oshawa Generals in inches.", "sql": "SELECT T3.height_in_inch FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T2.TEAM = 'Oshawa Generals'", "source_tables": ["playerinfo", "height_info", "seasonstatus"]}, "evidence": "height in inches refers to height_in_inch; players refers to PlayerName; team Oshawa Generals refers to TEAM = 'Oshawa Generals';"}
{"sample_id": 6995, "db_id": "ice_hockey_draft", "final": {"question": "Who is the oldest player that participated in OHL league in the 1997 - 2000 season?", "sql": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.LEAGUE = 'OHL' AND T2.SEASON = '1999-2000' ORDER BY T1.birthdate LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "oldest player refers to MIN(birthdate); OHL league refers to LEAGUE = 'OHL'; 1997-2000 season refers to SEASON = '1997-2000';"}
{"sample_id": 6996, "db_id": "ice_hockey_draft", "final": {"question": "Who is the tallest player in team USA U20?", "sql": "SELECT T.PlayerName FROM ( SELECT T1.PlayerName, T3.height_in_cm FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T2.TEAM = 'USA U20' ORDER BY T3.height_in_cm DESC ) AS T WHERE T.height_in_cm = ( SELECT MAX(T3.height_in_cm) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T2.TEAM = 'USA U20' )", "source_tables": ["playerinfo", "height_info", "seasonstatus"]}, "evidence": "tallest refers to MAX(height_in_cm); \nplayer refers to PlayerName; team USA U20 refers to TEAM = 'USA U20';"}
{"sample_id": 6997, "db_id": "ice_hockey_draft", "final": {"question": "What is the percentage of Swedish players in playoffs games in the 1997 - 2000 season?", "sql": "SELECT DISTINCT CAST(COUNT(CASE WHEN T1.nation = 'Sweden' THEN T1.ELITEID ELSE NULL END) OVER (PARTITION BY T2.SEASON) AS REAL) * 100 / COUNT(T1.ELITEID) OVER (PARTITION BY T2.SEASON) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.SEASON IN ('1997-1998', '1998-1999', '1999-2000')", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(nation = 'Sweden'), COUNT(ELITEID) WHERE SEASON = '1997-2000'), 100); Swedish refers to nation = 'Sweden'; players refers to PlayerName; playoffs games refers to GAMETYPE = 'Playoffs'; 1997-2000 season refers to 3 consecutive SEASONs : '1997-1998', '1998-1999', '1999-2000';"}
{"sample_id": 6998, "db_id": "ice_hockey_draft", "final": {"question": "Calculate the percentage of penalty minutes of Swedish players in OHL league among all players.", "sql": "SELECT CAST(COUNT(CASE WHEN T1.nation = 'Sweden' THEN T2.PIM ELSE NULL END) AS REAL) * 100 / COUNT(*) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.LEAGUE = 'OHL'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(PIM WHERE nation = 'Sweden'), COUNT(ELITEID) WHERE LEAGUE = 'OHL'), 100); Swedish refers to nation = 'Sweden'; players refers to PlayerName; OHL league refers to LEAGUE = 'OHL';"}
{"sample_id": 7377, "db_id": "works_cycles", "final": {"question": "How much is the tax amount of the purchase order with the biggest tax amount? Indicate the purchase order ID.", "sql": "SELECT TaxAmt, PurchaseOrderID FROM PurchaseOrderHeader ORDER BY TaxAmt DESC LIMIT 1", "source_tables": ["purchaseorderheader"]}, "evidence": "tax amount refers to TaxAmt; biggest tax amount refers to MAX(TaxAmt);"}
{"sample_id": 7378, "db_id": "works_cycles", "final": {"question": "How many person have a projected yearly sales of no more than 50,000?", "sql": "SELECT COUNT(BusinessEntityID) FROM SalesPersonQuotaHistory WHERE SalesQuota < 500000", "source_tables": ["salespersonquotahistory"]}, "evidence": "projected yearly sales refers to SalesQuota; SalesQuota< = 50000;"}
{"sample_id": 7379, "db_id": "works_cycles", "final": {"question": "Among the employees who were born before 1969, what is the work shift of the 6th oldest employee?", "sql": "SELECT T3.StartTime, T3.EndTime FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Shift AS T3 ON T2.ShiftId = T3.ShiftId WHERE STRFTIME('%Y', T1.BirthDate) < '1969' ORDER BY T1.BirthDate LIMIT 5, 1", "source_tables": ["employee", "shift", "employeedepartmenthistory"]}, "evidence": "oldest employee born before 1969 refers to year(BirthDate)<'1969';"}
{"sample_id": 7380, "db_id": "works_cycles", "final": {"question": "Which product allows the company to make the highest profit on a single item among those that are the fastest to manufacture? Indicate the rating of the product if there any.", "sql": "SELECT T1.Name, T2.Rating FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T1.DaysToManufacture = ( SELECT DaysToManufacture FROM Product ORDER BY DaysToManufacture LIMIT 1 ) ORDER BY T1.ListPrice - T1.StandardCost DESC LIMIT 1", "source_tables": ["product", "productreview"]}, "evidence": "profit on a single item = SUBTRACT(ListPrice, StandardCost); length of time to manufacture refers to DaysToManufacture; fastest to manucature refers to MIN(DaysToManufacture);"}
{"sample_id": 7381, "db_id": "works_cycles", "final": {"question": "What are the full names of the sales person whose bonuses are less than 1,000?", "sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM SalesPerson AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Bonus < 1000", "source_tables": ["person", "salesperson"]}, "evidence": "full name = FirstName+MiddleName+LastName; Bonus<1000;"}
{"sample_id": 7382, "db_id": "works_cycles", "final": {"question": "When did the Senior Tool Designer, who was 33 years old at the time he was hired, stopped working in the Engineering department?", "sql": "SELECT T2.EndDate FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T1.JobTitle = 'Senior Tool Designer' AND STRFTIME('%Y', T1.HireDate) - STRFTIME('%Y', T1.BirthDate) = 33 AND T2.EndDate IS NOT NULL", "source_tables": ["employee", "department", "employeedepartmenthistory"]}, "evidence": "Senior Tool Designer is a JobTitle; 33 years old at the time of hiring refers to SUBTRACT(year(HireDate)), (year(BirthDate)) = 33;"}
{"sample_id": 7383, "db_id": "works_cycles", "final": {"question": "Among the vendors with an average credit rating, what is the overall total due amount of purchases made by the company to the vendor that isn't preferrerd if another vendor is available?", "sql": "SELECT SUM(T2.TotalDue) FROM Vendor AS T1 INNER JOIN PurchaseOrderHeader AS T2 ON T1.BusinessEntityID = T2.VendorID WHERE T1.CreditRating = 4 AND T1.PreferredVendorStatus = 0", "source_tables": ["vendor", "purchaseorderheader"]}, "evidence": "average credit rating refers to CreditRating = 4;\u00a0 vendor that isn't preferrerd if another vendor is available refers to PreferredVendorStatus = 0; SUM(TotalDue);"}
{"sample_id": 7384, "db_id": "works_cycles", "final": {"question": "Which department has the most number of night shifts?", "sql": "SELECT T3.Name FROM Shift AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.ShiftId = T2.ShiftId INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID GROUP BY T2.DepartmentID ORDER BY COUNT(T1.Name = 'Night') DESC LIMIT 1", "source_tables": ["department", "shift", "employeedepartmenthistory"]}, "evidence": "most number of night shift = MAX(count(shift.Name = 'Night'))"}
{"sample_id": 7385, "db_id": "works_cycles", "final": {"question": "How much profit can the company gained from selling two high class black Road Bikes with a size of 58?", "sql": "SELECT 2 * (T1.ListPrice - T1.StandardCost) FROM Product AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID WHERE T1.Class = 'H' AND T1.Color = 'Black' AND T1.Size = 58 AND T2.Name = 'Road Bikes'", "source_tables": ["product", "productsubcategory"]}, "evidence": "high class refers to Class = 'H\"; road bikes is a name of product subcategory; profit = (MULTIPLY(SUBTRACT(ListPrice, StandardCost)), (2)));"}
{"sample_id": 7386, "db_id": "works_cycles", "final": {"question": "What are the full names of the 10 youngest married male production technicians?", "sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle LIKE 'Production Technician%' AND T1.Gender = 'M' AND T1.MaritalStatus = 'M' ORDER BY T1.BirthDate DESC LIMIT 10", "source_tables": ["employee", "person"]}, "evidence": "youngest refers to latest BirthDate; married refers to MaritalStatus = 'M'; production technician is a JobTitle; full name = FirstName+MiddleName+LastName;"}
{"sample_id": 7387, "db_id": "works_cycles", "final": {"question": "Among the products with an average lead time of 60, which vendor has the highest profit on net? Indicate the credit rating of such vendor.", "sql": "SELECT T2.Name, T2.CreditRating FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.AverageLeadTime = 60 ORDER BY T1.LastReceiptCost - T1.StandardPrice DESC LIMIT 1", "source_tables": ["vendor", "productvendor"]}, "evidence": "profit on net = SUBTRACT(LastReceiptCost, StandardPrice);"}
{"sample_id": 7388, "db_id": "works_cycles", "final": {"question": "What is the profit on net of the products that have exactly 200 maximum order quantity? Indicate the name of the vendors to which these products were purchased from.", "sql": "SELECT T1.LastReceiptCost - T1.StandardPrice, T2.Name FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.MaxOrderQty = 200", "source_tables": ["vendor", "productvendor"]}, "evidence": "maximum orders refers to MaxOrderQty; MaxOrderQty = 200; profit on net = SUBTRACT(LastReceiptCost, StandardPrice);"}
{"sample_id": 7389, "db_id": "works_cycles", "final": {"question": "What is the full name of the non-sales employee who made the most number of rejected purchase orders?", "sql": "SELECT T2.FirstName, T2.LastName FROM PurchaseOrderHeader AS T1 INNER JOIN Person AS T2 ON T1.EmployeeID = T2.BusinessEntityID WHERE T2.PersonType = 'EM' AND T1.Status = 3 GROUP BY T2.FirstName, T2.LastName ORDER BY COUNT(T1.PurchaseOrderID) DESC LIMIT 1", "source_tables": ["purchaseorderheader", "person"]}, "evidence": "non-sales employee refers to PersonType = 'EM'; rejected purchase order refers to Status = 3;"}
{"sample_id": 7390, "db_id": "works_cycles", "final": {"question": "What are the names of the vendor with the second lowest minimum order quantity?", "sql": "SELECT T2.Name FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.MaxOrderQty ASC LIMIT 1, 1", "source_tables": ["vendor", "productvendor"]}, "evidence": "minimum order quantity refers to MinOrderQty;"}
{"sample_id": 7391, "db_id": "works_cycles", "final": {"question": "How much are the minimum orders of the vendors that are no longer used by the company?", "sql": "SELECT T2.MinOrderQty FROM Vendor AS T1 INNER JOIN ProductVendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.ActiveFlag = 0 ORDER BY T2.MinOrderQty LIMIT 1", "source_tables": ["vendor", "productvendor"]}, "evidence": "vendors that are no longer used by the company refers to ActiveFlag = 0;"}
{"sample_id": 7392, "db_id": "works_cycles", "final": {"question": "Of the employees whose vacation hours are no more than 10, what is the age of the oldest employee at the time he/she was hired? Indicate his/her full name.", "sql": "SELECT STRFTIME('%Y', T1.HireDate) - STRFTIME('%Y', T1.BirthDate), T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.VacationHours <= 10 ORDER BY STRFTIME('%Y', T1.HireDate) - STRFTIME('%Y', T1.BirthDate) DESC LIMIT 1", "source_tables": ["employee", "person"]}, "evidence": "VacationHours<10; age at the time of being hired = SUBTRACT(year(HireDate), year(BirthDate)); full name = FirstName+MiddleName+LastName;"}
{"sample_id": 7393, "db_id": "works_cycles", "final": {"question": "What is the primary type of all single female employees hired between 1/1/2008 to 12/31/2008?", "sql": "SELECT T2.PersonType FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Gender = 'F' AND T1.MaritalStatus = 'S' AND STRFTIME('%Y-%m-%d', T1.HireDate) BETWEEN '2008-1-1' AND '2008-12-31' GROUP BY T2.PersonType ORDER BY COUNT(T2.PersonType) DESC LIMIT 1", "source_tables": ["employee", "person"]}, "evidence": "primary type refers to PersonType; single refers to MaritalStatus = 'S\"; female refers to Gender = 'F'; HireDate BETWEEN '2010-1-1'AND '2010-12-31';"}
{"sample_id": 7394, "db_id": "works_cycles", "final": {"question": "What is the company's profit on the product that was rated second-highest by David?", "sql": "SELECT T2.ListPrice - T2.StandardCost FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ReviewerName = 'David' ORDER BY T1.Rating DESC LIMIT 1", "source_tables": ["product", "productreview"]}, "evidence": "profit on net on a single product = SUBTRACT(ListPrice, StandardCost); second highest rating refers to Rating = 4; David is the ReviewerName;"}
{"sample_id": 7395, "db_id": "works_cycles", "final": {"question": "Which geographic area does the city with the second lowest tax rate belongs to? Indicate the name of the state or province as well.", "sql": "SELECT T3.'Group', T2.Name FROM SalesTaxRate AS T1 INNER JOIN StateProvince AS T2 ON T1.StateProvinceID = T2.StateProvinceID INNER JOIN SalesTerritory AS T3 ON T2.TerritoryID = T3.TerritoryID ORDER BY T1.TaxRate LIMIT 1, 1", "source_tables": ["salestaxrate", "stateprovince", "salesterritory"]}, "evidence": "geographic area to which the city belong refers to Group;"}
{"sample_id": 7396, "db_id": "works_cycles", "final": {"question": "What is the average profit of all the low class universal road frames? Indicate how many variety of sizes are there and the available colors.", "sql": "SELECT AVG(T1.ListPrice - T1.StandardCost), COUNT(DISTINCT T1.Size) , COUNT(DISTINCT T1.Style) FROM Product AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID WHERE T1.Class = 'L' AND T2.Name = 'Road Frames' GROUP BY T1.Class, T1.Color", "source_tables": ["product", "productsubcategory"]}, "evidence": "low class refers to Class = 'L'; universal refers to Style = 'U'; road frame is a name of product subcategory; average profit = AVG(SUBTRACT(ListPrice, StandardCost);"}
{"sample_id": 7397, "db_id": "works_cycles", "final": {"question": "What is the discount percentage of \"LL Road Frame Sale\"?", "sql": "SELECT DiscountPct FROM SpecialOffer WHERE Description = 'LL Road Frame Sale'", "source_tables": ["specialoffer"]}, "evidence": "discount percentage refers to DiscountPct; LL Road Frame Sale is a description of special offer;"}
{"sample_id": 7398, "db_id": "works_cycles", "final": {"question": "How many discount are of the type \"Excess Inventory\"?", "sql": "SELECT COUNT(SpecialOfferID) FROM SpecialOffer WHERE Type = 'Excess Inventory'", "source_tables": ["specialoffer"]}, "evidence": "discount refers to DiscountPct; Excess Inventory is a type of special offer;"}
{"sample_id": 7399, "db_id": "works_cycles", "final": {"question": "Which seasonal discount had the highest discount percentage?", "sql": "SELECT Description FROM SpecialOffer WHERE Type = 'Seasonal Discount' ORDER BY DiscountPct DESC LIMIT 1", "source_tables": ["specialoffer"]}, "evidence": "seasonal discount is a type of special offer; discount percentage refers to DiscountPct; highest discount percentage refers to MAX(DiscountPct);"}
{"sample_id": 7400, "db_id": "works_cycles", "final": {"question": "Please list the top 3 discounts with the highest discount percentage and fall under the reseller category.", "sql": "SELECT Description, DiscountPct FROM SpecialOffer WHERE Category = 'Reseller' ORDER BY DiscountPct DESC LIMIT 0, 3", "source_tables": ["specialoffer"]}, "evidence": "discount percentage refers to DiscountPct; highest discount percentage refers to MAX(DiscountPct);"}
{"sample_id": 7401, "db_id": "works_cycles", "final": {"question": "Where can I get the demographic information about the Valley Bicycle Specialists store?", "sql": "SELECT Demographics FROM Store WHERE Name = 'Valley Bicycle Specialists'", "source_tables": ["store"]}, "evidence": "Valley Bicycle Specialists is a name of a store;"}
{"sample_id": 7402, "db_id": "works_cycles", "final": {"question": "Among all the products that are manufactured in-house, how many of them are salable?", "sql": "SELECT SUM(FinishedGoodsFlag) FROM Product WHERE MakeFlag = 1", "source_tables": ["product"]}, "evidence": "product is mnanufactured in-house refers to MakeFlag = 1; salable product refers to FinishedGoodsFlag = 1;"}
{"sample_id": 7403, "db_id": "works_cycles", "final": {"question": "What is the minimum inventory quantity of Chainring Bolts?", "sql": "SELECT SafetyStockLevel FROM Product WHERE Name = 'Chainring Bolts'", "source_tables": ["product"]}, "evidence": "minimum inventory quantity refers to SafetyStockLevel; chainring bolts is a name of product;"}
{"sample_id": 7404, "db_id": "works_cycles", "final": {"question": "Which product has the highest standard cost?", "sql": "SELECT Name FROM Product ORDER BY StandardCost DESC LIMIT 1", "source_tables": ["product"]}, "evidence": ""}
{"sample_id": 7405, "db_id": "works_cycles", "final": {"question": "What type of employee is David Bradley?", "sql": "SELECT PersonType FROM Person WHERE FirstName = 'David' AND LastName = 'Bradley'", "source_tables": ["person"]}, "evidence": "type of employee refers to PersonType;"}
{"sample_id": 7406, "db_id": "works_cycles", "final": {"question": "Among the employees who are store contacts, how many of them have a title of \"Mr.\"?", "sql": "SELECT COUNT(BusinessEntityID) FROM Person WHERE PersonType = 'SC' AND Title = 'Mr.'", "source_tables": ["person"]}, "evidence": "store contact refers to PersonType = 'SC';"}
{"sample_id": 7407, "db_id": "works_cycles", "final": {"question": "Where can I find the Valley Bicycle Specialists store?", "sql": "SELECT T2.AddressLine1, T2.AddressLine2 FROM BusinessEntityAddress AS T1 INNER JOIN Address AS T2 ON T1.AddressID = T2.AddressID INNER JOIN Store AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T3.Name = 'Valley Bicycle Specialists'", "source_tables": ["businessentityaddress", "store", "address"]}, "evidence": "Valley Bicycle Specialists is a name of store; full address = AddressLine1+AddressLine2;"}
{"sample_id": 7408, "db_id": "works_cycles", "final": {"question": "To which e-mail address should I write if I want to contact David Bradley?", "sql": "SELECT T2.EmailAddress FROM Person AS T1 INNER JOIN EmailAddress AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'", "source_tables": ["person", "emailaddress"]}, "evidence": ""}
{"sample_id": 7409, "db_id": "works_cycles", "final": {"question": "Please list the phone numbers of all the store contacts.", "sql": "SELECT T2.PhoneNumber FROM Person AS T1 INNER JOIN PersonPhone AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.PersonType = 'SC'", "source_tables": ["personphone", "person"]}, "evidence": "store contact refers to PersonType = 'SC';"}
{"sample_id": 7410, "db_id": "works_cycles", "final": {"question": "What is the hashed password of David Bradley?", "sql": "SELECT T2.PasswordHash FROM Person AS T1 INNER JOIN Password AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'", "source_tables": ["password", "person"]}, "evidence": "hashed password refers to PasswordHash;"}
{"sample_id": 7411, "db_id": "works_cycles", "final": {"question": "Please list the e-mail addresses of all the employees who wish to receive e-mail promotions from Adventureworks and selected partners.", "sql": "SELECT T2.EmailAddress FROM Person AS T1 INNER JOIN EmailAddress AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.EmailPromotion = 2", "source_tables": ["person", "emailaddress"]}, "evidence": "employees who wish to receive e-mail promotions from AdventureWorks and selected partners refers to EmailPromotion = 2;"}
{"sample_id": 7412, "db_id": "works_cycles", "final": {"question": "Please show the credit card number of David Bradley.", "sql": "SELECT T3.CardNumber FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN CreditCard AS T3 ON T2.CreditCardID = T3.CreditCardID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'", "source_tables": ["person", "creditcard", "personcreditcard"]}, "evidence": "credit card number refers to CardNumber;"}
{"sample_id": 7413, "db_id": "works_cycles", "final": {"question": "In which year will the David Bradley's credit card expire?", "sql": "SELECT T3.ExpYear FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN CreditCard AS T3 ON T2.CreditCardID = T3.CreditCardID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'", "source_tables": ["person", "creditcard", "personcreditcard"]}, "evidence": "year of credit card expiration refers to ExpYear;"}
{"sample_id": 7414, "db_id": "works_cycles", "final": {"question": "Please list the names of all the store contact employees whose credit cards expired in 2007.", "sql": "SELECT T1.FirstName, T1.LastName FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN CreditCard AS T3 ON T2.CreditCardID = T3.CreditCardID WHERE T3.ExpYear = 2007 AND T1.PersonType = 'SC'", "source_tables": ["person", "creditcard", "personcreditcard"]}, "evidence": "year of credit card expiration refers to ExpYear; ExpYear = 2007; store contact refers to PersonType = 'SC';"}
{"sample_id": 7415, "db_id": "works_cycles", "final": {"question": "Among the store contact employees, how many of them have a Vista credit card?", "sql": "SELECT COUNT(T1.FirstName) FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN CreditCard AS T3 ON T2.CreditCardID = T3.CreditCardID WHERE T3.CardType = 'Vista' AND T1.PersonType = 'SC'", "source_tables": ["person", "creditcard", "personcreditcard"]}, "evidence": "store contact refers to PersonType = 'SC'; type of credit card refers to CardType; CardType = 'vista';"}
{"sample_id": 7416, "db_id": "works_cycles", "final": {"question": "How many departments have David Bradley been in?", "sql": "SELECT COUNT(T3.DepartmentID) FROM Person AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'", "source_tables": ["person", "department", "employeedepartmenthistory"]}, "evidence": ""}
{"sample_id": 7417, "db_id": "works_cycles", "final": {"question": "Please list the departments that David Bradley used to belong to.", "sql": "SELECT T2.DepartmentID FROM Person AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'", "source_tables": ["person", "department", "employeedepartmenthistory"]}, "evidence": ""}
{"sample_id": 7418, "db_id": "works_cycles", "final": {"question": "How many people were there in the Engineering Department in the year 2009?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Person AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T3.Name = 'Engineering' AND STRFTIME('%Y', T2.EndDate) > '2009' AND STRFTIME('%Y', T2.StartDate) < '2009'", "source_tables": ["person", "department", "employeedepartmenthistory"]}, "evidence": "year(EndDate)>2009 and year(StartDate)<2009;"}
{"sample_id": 7419, "db_id": "works_cycles", "final": {"question": "Which employee has been in the Engineering Department the longest? Please give his or her firstname and lastname.", "sql": "SELECT T1.FirstName, T1.LastName FROM Person AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T3.Name = 'Engineering' ORDER BY T2.EndDate - T2.StartDate DESC LIMIT 1", "source_tables": ["person", "department", "employeedepartmenthistory"]}, "evidence": "length of stay in a department = SUBTRACT(EndDate, StartDate);"}
{"sample_id": 7420, "db_id": "works_cycles", "final": {"question": "Among the employees in the Manufacturing group in 2007, how many of them are store contacts?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID INNER JOIN Person AS T3 ON T1.BusinessEntityID WHERE T3.PersonType = 'SC' AND T2.GroupName = 'Manufacturing' AND STRFTIME('%Y', T1.EndDate) >= '2007' AND STRFTIME('%Y', T1.StartDate) <= '2007'", "source_tables": ["person", "department", "employeedepartmenthistory"]}, "evidence": "store contact refers to PersonType = 'SC'; year(EndDate)>2007 and year(StartDate)<2007;"}
{"sample_id": 7421, "db_id": "works_cycles", "final": {"question": "Please list the credit card numbers of all the employees who have left the Finance Department.", "sql": "SELECT T3.CardNumber FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID INNER JOIN CreditCard AS T3 ON T1.ModifiedDate = T3.ModifiedDate INNER JOIN PersonCreditCard AS T4 ON T3.CreditCardID = T4.CreditCardID WHERE T2.Name = 'Finance' AND T1.EndDate IS NOT NULL", "source_tables": ["personcreditcard", "department", "employeedepartmenthistory", "creditcard"]}, "evidence": "credit card number refers to CardNumber; employees who left the department refers to EndDate NOT null; Engineering Department is a name of department;"}
{"sample_id": 7422, "db_id": "works_cycles", "final": {"question": "How many employees working in the Engineering Department in 2007 would have their credit cards expired in the same year?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID INNER JOIN PersonCreditCard AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID INNER JOIN CreditCard AS T4 ON T3.CreditCardID = T4.CreditCardID WHERE T4.ExpYear = 2007 AND T2.Name = 'Engineering'", "source_tables": ["personcreditcard", "department", "employeedepartmenthistory", "creditcard"]}, "evidence": "year(StartDate) 2007; year of credit card expiration refers to ExpYear; ExpYear = 2007;"}
{"sample_id": 7423, "db_id": "works_cycles", "final": {"question": "What is the e-mail address of the employee who switched departments for the most times?", "sql": "SELECT T2.EmailAddress FROM EmployeeDepartmentHistory AS T1 INNER JOIN EmailAddress AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID GROUP BY T2.BusinessEntityID ORDER BY COUNT(T1.DepartmentID) DESC LIMIT 1", "source_tables": ["employeedepartmenthistory", "emailaddress"]}, "evidence": "switched department the most refers to MAX(count(DepartmentID));"}
{"sample_id": 7424, "db_id": "works_cycles", "final": {"question": "Among all the employees who don't wish to receive promotion e-mails, how many of them belong to or once belonged to the Engineering Department?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T1.DepartmentID = T3.DepartmentID WHERE T3.Name = 'Engineering' AND T2.EmailPromotion = 0", "source_tables": ["person", "department", "employeedepartmenthistory"]}, "evidence": "Employees who don't wish to receive e-mail promotions refers to EmailPromotion = 0;"}
{"sample_id": 7425, "db_id": "works_cycles", "final": {"question": "How many employees came into the Quality Assurance Group in the year 2007?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID WHERE T2.GroupName = 'Quality Assurance' AND STRFTIME('%Y', T1.StartDate) = '2007'", "source_tables": ["department", "employeedepartmenthistory"]}, "evidence": "Quality Assurance Group is a group name of department; came in 2007 refers to year(StartDate) = 2007;"}
{"sample_id": 7426, "db_id": "works_cycles", "final": {"question": "Please list the product names of all the products on the LL Road Frame Sale.", "sql": "SELECT T3.Name FROM SpecialOffer AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID INNER JOIN Product AS T3 ON T2.ProductID = T3.ProductID WHERE T1.Description = 'LL Road Frame Sale'", "source_tables": ["product", "specialoffer", "specialofferproduct"]}, "evidence": "LL Road Frame Sale is a description of special offer"}
{"sample_id": 7427, "db_id": "works_cycles", "final": {"question": "How many products were on the LL Road Frame Sale?", "sql": "SELECT COUNT(DISTINCT ProductID) FROM SpecialOffer AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID WHERE T1.Description = 'LL Road Frame Sale'", "source_tables": ["specialoffer", "specialofferproduct"]}, "evidence": "LL Road Frame Sale is a description of special offer"}
{"sample_id": 7428, "db_id": "works_cycles", "final": {"question": "Has the product Chainring Bolts been on any of the sales?", "sql": "SELECT CASE WHEN COUNT(T1.Description) >= 1 THEN 'Yes' ELSE 'No' END FROM SpecialOffer AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID INNER JOIN Product AS T3 ON T2.ProductID = T3.ProductID WHERE T3.Name = 'Chainring Bolts'", "source_tables": ["product", "specialoffer", "specialofferproduct"]}, "evidence": "a product that's been on sale refers to SellStartDate NOT null and vice versa;"}
{"sample_id": 7429, "db_id": "works_cycles", "final": {"question": "How many products from the Clothing category were on the LL Road Frame Sale?", "sql": "SELECT COUNT(T2.ProductID) FROM SpecialOffer AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID INNER JOIN Product AS T3 ON T2.ProductID = T3.ProductID INNER JOIN ProductSubcategory AS T4 ON T3.ProductSubcategoryID = T4.ProductSubcategoryID INNER JOIN ProductCategory AS T5 ON T4.ProductCategoryID = T5.ProductCategoryID WHERE T1.Description = 'LL Road Frame Sale' AND T4.Name = 'Clothing'", "source_tables": ["product", "specialofferproduct", "productsubcategory", "productcategory", "specialoffer"]}, "evidence": "LL Road Frame Sale is a description of special offer"}
{"sample_id": 7430, "db_id": "works_cycles", "final": {"question": "Please list the products that are under the Clothing category that are manufactured in-house and salable.", "sql": "SELECT CASE WHEN T1.MakeFlag = 1 THEN T1.Name END FROM Product AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID INNER JOIN ProductCategory AS T3 ON T2.ProductCategoryID = T3.ProductCategoryID WHERE T2.ProductSubcategoryID = 3", "source_tables": ["product", "productcategory", "productsubcategory"]}, "evidence": "product is manufactured in-house refers to MakeFlag = 1; salable product refers to FinishedGoodsFlag = 1;"}
{"sample_id": 7431, "db_id": "works_cycles", "final": {"question": "For all the employees that have left the Engineering Department, what is the average time of their stay?", "sql": "SELECT CAST(SUM(365 * (STRFTIME('%Y', T1.EndDate) - STRFTIME('%Y', T1.StartDate)) + 30 * (STRFTIME('%m', T1.EndDate) - STRFTIME('%m', T1.StartDate)) + STRFTIME('%d', T1.EndDate) - STRFTIME('%d', T1.StartDate)) AS REAL) / COUNT(T1.BusinessEntityID) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID WHERE T2.Name = 'Engineering' AND T1.EndDate IS NOT NULL", "source_tables": ["department", "employeedepartmenthistory"]}, "evidence": "employees who left a department refers to EndDate NOT null; average stay = AVG(SUBTRACT(year(EndDate)), (year(T1.StartDate)));"}
{"sample_id": 7432, "db_id": "works_cycles", "final": {"question": "What is the average pay rate of the employees who worked in the Engineering Departmentin 2007?", "sql": "SELECT AVG(T3.Rate) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID INNER JOIN EmployeePayHistory AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Name = 'Engineering' AND STRFTIME('%Y', EndDate) > '2007' AND STRFTIME('%Y', T1.StartDate) < '2007'", "source_tables": ["employeepayhistory", "department", "employeedepartmenthistory"]}, "evidence": "average pay rate = AVG(Rate); work in 2007 refers to year(StartDate)<2007 AND year(EndDate)>2007;"}
{"sample_id": 7433, "db_id": "works_cycles", "final": {"question": "How much more expensive in percentage is the product with the highest selling price from the product with the lowest selling price in the Clothing category?", "sql": "SELECT (MAX(T1.ListPrice) - MIN(T1.ListPrice)) * 100 / MIN(T1.ListPrice) FROM Product AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID INNER JOIN ProductCategory AS T3 ON T2.ProductCategoryID = T3.ProductCategoryID WHERE T3.Name = 'Clothing'", "source_tables": ["product", "productcategory", "productsubcategory"]}, "evidence": "selling price refers to ListPrice; highest selling price refers to MAX(ListPrice); lowest selling price refers to MIN(ListPrice);"}
{"sample_id": 7434, "db_id": "works_cycles", "final": {"question": "What is the average profit of all the products from the Clothing category?", "sql": "SELECT SUM(T1.ListPrice - T1.StandardCost) / COUNT(T1.ProductID) FROM Product AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID INNER JOIN ProductCategory AS T3 ON T2.ProductCategoryID = T3.ProductCategoryID WHERE T3.Name = 'Clothing'", "source_tables": ["product", "productcategory", "productsubcategory"]}, "evidence": "average profit = DIVIDE(SUM(SUBTRACT(ListPrice, StandardCost))), (COUNT(ProductSubcategoryID))));"}
{"sample_id": 7435, "db_id": "works_cycles", "final": {"question": "Which product cost the least in 2013?", "sql": "SELECT ProductID FROM ProductCostHistory WHERE StartDate LIKE '2013%' ORDER BY StandardCost LIMIT 1", "source_tables": ["productcosthistory"]}, "evidence": "cost refers to StandardCost; cost the least refers to MIN(StandardCost);"}
{"sample_id": 7436, "db_id": "works_cycles", "final": {"question": "List all products with the color yellow.", "sql": "SELECT ProductID FROM Product WHERE Color = 'Yellow'", "source_tables": ["product"]}, "evidence": ""}
{"sample_id": 7437, "db_id": "works_cycles", "final": {"question": "What is the bussiness id for Mr. Hung-Fu Ting?", "sql": "SELECT BusinessEntityID FROM Person WHERE Title = 'Mr.' AND FirstName = 'Hung-Fu' AND LastName = 'Ting'", "source_tables": ["person"]}, "evidence": "business id refers to BusinessEntityID;"}
{"sample_id": 7438, "db_id": "works_cycles", "final": {"question": "What is the phone number of the person with id \"12597\"?", "sql": "SELECT PhoneNumber FROM PersonPhone WHERE BusinessEntityID = 12597", "source_tables": ["personphone"]}, "evidence": "person with id refers to BusinessEntityID;"}
{"sample_id": 7439, "db_id": "works_cycles", "final": {"question": "What is the price for the product with the id \"912\"?", "sql": "SELECT ListPrice FROM ProductListPriceHistory WHERE ProductID = 912", "source_tables": ["productlistpricehistory"]}, "evidence": "price refers to ListPrice;"}
{"sample_id": 7440, "db_id": "works_cycles", "final": {"question": "Is there a work order where the planned cost is different from the actual cost?", "sql": "SELECT CASE WHEN ActualCost = PlannedCost THEN 'No' ELSE 'Yes' END FROM WorkOrderRouting", "source_tables": ["workorderrouting"]}, "evidence": "planned cost is different from actual cost refers to ActualCost ! = PlannedCost;"}
{"sample_id": 7441, "db_id": "works_cycles", "final": {"question": "What is the thumbnail photo file for the product with the id \"979\"?", "sql": "SELECT T2.ThumbnailPhotoFileName FROM ProductProductPhoto AS T1 INNER JOIN ProductPhoto AS T2 ON T1.ProductPhotoID = T2.ProductPhotoID WHERE T1.ProductID = 979", "source_tables": ["productphoto", "productproductphoto"]}, "evidence": "thumbnail photo file refers to ThumbnailPhotoFileName;"}
{"sample_id": 7442, "db_id": "works_cycles", "final": {"question": "List all the names of the products with the price of more than 1000$.", "sql": "SELECT DISTINCT T2.Name FROM ProductListPriceHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ListPrice > 1000", "source_tables": ["product", "productlistpricehistory"]}, "evidence": "ListPrice>1000;"}
{"sample_id": 7443, "db_id": "works_cycles", "final": {"question": "What is the product with the most profit?", "sql": "SELECT T1.ProductID FROM ProductListPriceHistory AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.ListPrice - T2.StandardCost DESC LIMIT 1", "source_tables": ["productcosthistory", "productlistpricehistory"]}, "evidence": "profit = SUBTRACT(ListPrice, StandardCost);"}
{"sample_id": 7444, "db_id": "works_cycles", "final": {"question": "What is the name of the product stored in location 1 compartment L container 6?", "sql": "SELECT T2.Name FROM ProductInventory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.LocationID = 1 AND T1.Shelf = 'L' AND T1.Bin = 6", "source_tables": ["productinventory", "product"]}, "evidence": "compartment refers to Shelf;"}
{"sample_id": 7445, "db_id": "works_cycles", "final": {"question": "What are locations of the work order \"35493\"?", "sql": "SELECT T2.Name FROM WorkOrderRouting AS T1 INNER JOIN Location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.WorkOrderID = 35493", "source_tables": ["workorderrouting", "location"]}, "evidence": ""}
{"sample_id": 7446, "db_id": "works_cycles", "final": {"question": "What are the products with a large photo?", "sql": "SELECT T2.ProductID FROM ProductPhoto AS T1 INNER JOIN ProductProductPhoto AS T2 ON T1.ProductPhotoID = T2.ProductPhotoID WHERE T1.LargePhotoFileName LIKE '%large.gif'", "source_tables": ["productproductphoto", "productphoto"]}, "evidence": "product with large photo refers to LargePhoto NOT null;"}
{"sample_id": 7447, "db_id": "works_cycles", "final": {"question": "List all the socks products.", "sql": "SELECT T2.ProductID FROM ProductSubcategory AS T1 INNER JOIN Product AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID WHERE T1.Name = 'Socks'", "source_tables": ["productsubcategory", "product"]}, "evidence": "Socks is a name of product subcategory"}
{"sample_id": 7448, "db_id": "works_cycles", "final": {"question": "With 100$, how many Cable Lock can you buy?", "sql": "SELECT 100 / T2.ListPrice FROM Product AS T1 INNER JOIN ProductListPriceHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Cable Lock'", "source_tables": ["product", "productlistpricehistory"]}, "evidence": "number of products a $100 can buy = DIVIDE(100, ListPrice);"}
{"sample_id": 7449, "db_id": "works_cycles", "final": {"question": "What is the scrap reason for work order \"57788\"?", "sql": "SELECT T2.Name FROM WorkOrder AS T1 INNER JOIN ScrapReason AS T2 ON T1.ScrapReasonID = T2.ScrapReasonID WHERE T1.WorkOrderID = 57788", "source_tables": ["scrapreason", "workorder"]}, "evidence": ""}
{"sample_id": 7450, "db_id": "works_cycles", "final": {"question": "What is the cost for the sports?", "sql": "SELECT T2.StandardCost FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name LIKE '%Sport%'", "source_tables": ["product", "productcosthistory"]}, "evidence": "cost refers to StandardCost;"}
{"sample_id": 7451, "db_id": "works_cycles", "final": {"question": "How many products with the id \"476\" are stored in Metal Storage?", "sql": "SELECT T2.Quantity FROM Location AS T1 INNER JOIN ProductInventory AS T2 ON T1.LocationID = T2.LocationID WHERE T2.ProductID = 476 AND T1.Name = 'Metal Storage'", "source_tables": ["productinventory", "location"]}, "evidence": "Metal Storage is name of location"}
{"sample_id": 7452, "db_id": "works_cycles", "final": {"question": "List all the products with lower than average cost.", "sql": "SELECT DISTINCT T2.ProductID FROM ProductCostHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.StandardCost < ( SELECT SUM(StandardCost) / COUNT(ProductID) FROM Product )", "source_tables": ["product", "productcosthistory"]}, "evidence": "cost refers to StandardCost; lower than average cost = StandardCost<(AVG(StandardCost));"}
{"sample_id": 7453, "db_id": "works_cycles", "final": {"question": "What is the the percentage of profit for the product \"858\"?", "sql": "SELECT (T1.ListPrice - T2.StandardCost) * 100 / T2.StandardCost FROM ProductListPriceHistory AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID = 858", "source_tables": ["productcosthistory", "productlistpricehistory"]}, "evidence": "percentage of profit = DIVIDE(SUBTRACT(ListPrice, StandardCost), (StandardCost)) as percentage;"}
{"sample_id": 7454, "db_id": "works_cycles", "final": {"question": "How many products with a thumpnail photo?", "sql": "SELECT COUNT(ProductID) FROM ProductProductPhoto WHERE ProductPhotoID != 1", "source_tables": ["productproductphoto"]}, "evidence": "products with a thumbnail photo refers to ProductPhotoID ! = 1 ;"}
{"sample_id": 7455, "db_id": "works_cycles", "final": {"question": "How many days did it take to end the work order \"425\"?", "sql": "SELECT 365 * (STRFTIME('%Y', ActualEndDate) - STRFTIME('%Y', ActualStartDate)) + 30 * (STRFTIME('%m', ActualEndDate) - STRFTIME('%m', ActualStartDate)) + STRFTIME('%d', ActualEndDate) - STRFTIME('%d', ActualStartDate) FROM WorkOrderRouting WHERE WorkOrderID = 425", "source_tables": ["workorderrouting"]}, "evidence": "days to end a work order = SUBTRACT(ActualEndDate, ActualStartDate);"}
{"sample_id": 7456, "db_id": "works_cycles", "final": {"question": "Which product has the highest price in 2012?", "sql": "SELECT ProductID FROM ProductListPriceHistory WHERE StartDate LIKE '2012%' ORDER BY ListPrice DESC LIMIT 1", "source_tables": ["productlistpricehistory"]}, "evidence": "price refers to ListPrice; highest price refers to MAX(ListPrice);"}
{"sample_id": 7457, "db_id": "works_cycles", "final": {"question": "What is the cost for the product \"847\"?", "sql": "SELECT StandardCost FROM ProductCostHistory WHERE ProductID = 847", "source_tables": ["productcosthistory"]}, "evidence": "cost refers to StandardCost;"}
{"sample_id": 7458, "db_id": "works_cycles", "final": {"question": "What is the organization level for Human Resources Manager?", "sql": "SELECT OrganizationLevel FROM Employee WHERE JobTitle = 'Human Resources Manager'", "source_tables": ["employee"]}, "evidence": "Human Resources Manager is a job title"}
{"sample_id": 7459, "db_id": "works_cycles", "final": {"question": "How many of the work orders didn\u2019t meet the due date?", "sql": "SELECT COUNT(WorkOrderID) FROM WorkOrder WHERE EndDate > DueDate", "source_tables": ["workorder"]}, "evidence": "workers who did not meet the due date refers to EndDate>DueDate;"}
{"sample_id": 7460, "db_id": "works_cycles", "final": {"question": "What is the cost and the product number of product with the id \"888\"?", "sql": "SELECT T2.StandardCost, T2.ProductNumber FROM ProductCostHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID = 888", "source_tables": ["product", "productcosthistory"]}, "evidence": "cost refers to StandardCost;"}
{"sample_id": 7461, "db_id": "works_cycles", "final": {"question": "How many products using \"roadster_black_small.gif\" as the thumbnail photo?", "sql": "SELECT COUNT(DISTINCT T2.ProductID) FROM ProductPhoto AS T1 INNER JOIN ProductProductPhoto AS T2 ON T1.ProductPhotoID = T2.ProductPhotoID WHERE T1.LargePhotoFileName = 'roadster_black_large.gif'", "source_tables": ["productproductphoto", "productphoto"]}, "evidence": "products using roadster_black_small.gif as the thumbnail photo refers to ThumbnailPhotoFileName = 'roadster_black_small.gif';"}
{"sample_id": 7462, "db_id": "works_cycles", "final": {"question": "List the locations ids, compartments and containers for the Lock Ring", "sql": "SELECT T2.LocationID, T2.Shelf, T2.Bin FROM Product AS T1 INNER JOIN ProductInventory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name LIKE 'Lock Ring'", "source_tables": ["product", "productinventory"]}, "evidence": "compartment refers to Shelf; container refers to Bin; Lock Ring is a name of product"}
{"sample_id": 7463, "db_id": "works_cycles", "final": {"question": "What category do Road Frames fall into?", "sql": "SELECT T2.Name FROM ProductSubcategory AS T1 INNER JOIN ProductCategory AS T2 ON T1.ProductCategoryID = T2.ProductCategoryID WHERE T1.Name = 'Road Frames'", "source_tables": ["productsubcategory", "productcategory"]}, "evidence": "Road Frames is a name of product subcategory"}
{"sample_id": 7464, "db_id": "works_cycles", "final": {"question": "List all the scraped work orders for handling damage reason.", "sql": "SELECT T2.WorkOrderID FROM ScrapReason AS T1 INNER JOIN WorkOrder AS T2 ON T1.ScrapReasonID = T2.ScrapReasonID WHERE T1.Name = 'Handling damage'", "source_tables": ["scrapreason", "workorder"]}, "evidence": "handling damage is descrription of manufacturing failure which refers to ScrapReason.Name"}
{"sample_id": 7465, "db_id": "works_cycles", "final": {"question": "What is the profit for the product \"792\"?", "sql": "SELECT T1.ListPrice - T2.StandardCost FROM ProductListPriceHistory AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID = 792", "source_tables": ["productcosthistory", "productlistpricehistory"]}, "evidence": "profit = SUBTRACT(ListPrice, StandardCost);"}
{"sample_id": 7466, "db_id": "works_cycles", "final": {"question": "Who owns the email address \"regina7@adventure-works.com\"?", "sql": "SELECT T2.FirstName, T2.LastName FROM EmailAddress AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.EmailAddress = 'regina7@adventure-works.com'", "source_tables": ["person", "emailaddress"]}, "evidence": ""}
{"sample_id": 7467, "db_id": "works_cycles", "final": {"question": "Where are the locations where the product \"810\" is stored?", "sql": "SELECT T2.Name FROM ProductInventory AS T1 INNER JOIN Location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.ProductID = 810", "source_tables": ["productinventory", "location"]}, "evidence": ""}
{"sample_id": 7468, "db_id": "works_cycles", "final": {"question": "What is the name of the product the work order \"2540\" was making?", "sql": "SELECT T2.Name FROM WorkOrder AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.WorkOrderID = 2540", "source_tables": ["product", "workorder"]}, "evidence": ""}
{"sample_id": 7469, "db_id": "works_cycles", "final": {"question": "What is the price for the AWC Logo Cap?", "sql": "SELECT T2.ListPrice FROM Product AS T1 INNER JOIN ProductListPriceHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'AWC Logo Cap'", "source_tables": ["product", "productlistpricehistory"]}, "evidence": "price refers to ListPrice; price of 3 products = MULTIPLY(ListPrice, 3); Lock Washer 6 is a name of a product;"}
{"sample_id": 7470, "db_id": "works_cycles", "final": {"question": "List all the work orders that is related to the Down Tube.", "sql": "SELECT T2.WorkOrderID FROM Product AS T1 INNER JOIN WorkOrder AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Down Tube'", "source_tables": ["product", "workorder"]}, "evidence": "Down Tube is a name of a product;"}
{"sample_id": 7471, "db_id": "works_cycles", "final": {"question": "What is the the average percentage of profit for the all the product?", "sql": "SELECT AVG((T1.ListPrice - T2.StandardCost) * 100 / T2.StandardCost) FROM ProductListPriceHistory AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID", "source_tables": ["productcosthistory", "productlistpricehistory"]}, "evidence": "average profit percentage = DIVIDE(SUBTRACT(ListPrice, StandardCost)), (StandardCost)));"}
{"sample_id": 7472, "db_id": "works_cycles", "final": {"question": "What proportion of work order is in Subassembly?", "sql": "SELECT 100.0 * SUM(CASE WHEN T1.Name = 'Subassembly' THEN 1 ELSE 0 END) / COUNT(T2.WorkOrderID) FROM Location AS T1 INNER JOIN WorkOrderRouting AS T2 ON T1.LocationID = T2.LocationID", "source_tables": ["workorderrouting", "location"]}, "evidence": "proportion = DIVIDE(SUM(Name = 'Subassembly'). (COUNT(WorkOrderID)));"}
{"sample_id": 7583, "db_id": "image_and_language", "final": {"question": "What is the image ID with a predicted class of \"parked on\"?", "sql": "SELECT DISTINCT T1.IMG_ID FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.PRED_CLASS = 'parked on'", "source_tables": ["img_rel", "pred_classes"]}, "evidence": "predicted class of \"parked on\" refers to PRED_CLASS = 'parked on';"}
{"sample_id": 7584, "db_id": "image_and_language", "final": {"question": "List all the object classes of the images that have a (5,5) coordinate.", "sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 5 AND T1.Y = 5", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "object classes refer to OBJ_CLASS; (5,5) coordinates refer to X and Y coordinates of the bounding box where X = 5 and Y = 5;"}
{"sample_id": 7585, "db_id": "image_and_language", "final": {"question": "How many images have \"keyboard\" as their object class?", "sql": "SELECT COUNT(T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'keyboard'", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "images refer to IMG_ID; \"keyboard\" as object class refers to OBJ_CLASS = 'keyboard';"}
{"sample_id": 7586, "db_id": "image_and_language", "final": {"question": "What are the width and height of the bounding box of the object with \"keyboard\" as their object class and (5, 647) as their coordinate?", "sql": "SELECT T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'keyboard' AND T1.X = 5 AND T1.Y = 647", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "The bounding box's W and H abbreviations stand for the object's width and height respectively; \"keyboard\" as object class refers to OBJ_CLASS = 'keyboard'; (5, 647) as coordinate refers to X and Y coordinates of the bounding box where X = 5 and Y = 647;"}
{"sample_id": 7587, "db_id": "image_and_language", "final": {"question": "List all the ID of the images that have an attribute class of \"horse\".", "sql": "SELECT T2.IMG_ID FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.ATT_CLASS = 'horse'", "source_tables": ["img_obj_att", "att_classes"]}, "evidence": "ID of all images refer to IMG_ID; attribute class of \"horse\" refers to ATT_CLASS = 'horse';"}
{"sample_id": 7588, "db_id": "image_and_language", "final": {"question": "Provide the x-coordinate and y-coordinate of the image with an attribute class of ''horse\" and an object class of \"fur\".", "sql": "SELECT T3.X, T3.Y FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T1.ATT_CLASS = 'horse' AND T4.OBJ_CLASS = 'fur'", "source_tables": ["img_obj_att", "att_classes", "obj_classes", "img_obj"]}, "evidence": "attribute class of \"horse\" refers to ATT_CLASS = 'horse'; object class of \"fur\" refers to OBJ_CLASS = 'fur';"}
{"sample_id": 7589, "db_id": "image_and_language", "final": {"question": "List all the attribute classes of the image ID \"15\".", "sql": "SELECT T1.ATT_CLASS FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T2.IMG_ID = 15", "source_tables": ["img_obj_att", "att_classes"]}, "evidence": "attribute classes of the image ID \"15\" refer to ATT_CLASS where IMG_ID = 15;"}
{"sample_id": 7590, "db_id": "image_and_language", "final": {"question": "For those objects that have multiple relations, how many images have a prediction class of \"reading\"?", "sql": "SELECT COUNT(T1.IMG_ID) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.PRED_CLASS = 'reading'", "source_tables": ["img_rel", "pred_classes"]}, "evidence": "prediction class of \"reading\" refers to PRED_CLASS = 'reading'; if two objects (OBJ1_SAMPLE_ID,\nOBJ2_SAMPLE_ID) has\nmultiple PRED_CLASS_ID, it\nmeans these two objects\nhave multiple relations;"}
{"sample_id": 7591, "db_id": "image_and_language", "final": {"question": "How many images have \"picture\" as their attribute class?", "sql": "SELECT COUNT(T2.IMG_ID) FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.ATT_CLASS = 'picture'", "source_tables": ["img_obj_att", "att_classes"]}, "evidence": "images have \"picture\" as their attribute class refer to IMG_ID where ATT_CLASS = 'picture';"}
{"sample_id": 7592, "db_id": "image_and_language", "final": {"question": "How many images have \"picture\" as their attribute class and \"bear\" as their object class?", "sql": "SELECT COUNT(T2.IMG_ID) FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T1.ATT_CLASS = 'picture' AND T4.OBJ_CLASS = 'bear'", "source_tables": ["img_obj_att", "att_classes", "obj_classes", "img_obj"]}, "evidence": "\"picture\" as attribute class refers to ATT_CLASS = 'picture'; \"bear\" as object class refers to OBJ_CLASS = 'bear'; images refer to IMG_ID;"}
{"sample_id": 7593, "db_id": "image_and_language", "final": {"question": "List all the attribute classes of the images that have a (5,5) coordinate.", "sql": "SELECT T1.ATT_CLASS FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID WHERE T3.X = 5 AND T3.Y = 5", "source_tables": ["img_obj_att", "att_classes", "img_obj"]}, "evidence": "attribute classes refer to ATT_CLASS; (5,5) coordinate refers to X and Y coordinates of the bounding box where X = 5 and Y = 5;"}
{"sample_id": 7594, "db_id": "image_and_language", "final": {"question": "Calculate the average number of images with an attribute class of \"keyboard\".", "sql": "SELECT AVG(T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'keyboard'", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "AVG(IMG_ID) where OBJ_CLASS = 'keyboard';"}
{"sample_id": 7595, "db_id": "image_and_language", "final": {"question": "Calculate the ratio of the total number of images with an object class of \"man\" and \"person\".", "sql": "SELECT CAST(COUNT(CASE WHEN T2.OBJ_CLASS = 'man' THEN 1 ELSE 0 END) AS REAL) / COUNT(CASE WHEN T2.OBJ_CLASS = 'person' THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "DIVIDE(COUNT(IMG_ID where OBJ_CLASS = 'man'), COUNT(IMG_ID where OBJ_CLASS = 'person'));"}
{"sample_id": 7596, "db_id": "image_and_language", "final": {"question": "List the object sample IDs of image ID 17 with coordinates (0,0).", "sql": "SELECT OBJ_SAMPLE_ID FROM IMG_OBJ WHERE IMG_ID = 17 AND X = 0 AND Y = 0", "source_tables": ["img_obj"]}, "evidence": "object sample ID refers to OBJ_SAMPLE_ID; image ID 17 refers to IMG_ID = 17; coordinates (0,0) refer to X and Y coordinates of the bounding box where X = 0 and Y = 0;"}
{"sample_id": 7597, "db_id": "image_and_language", "final": {"question": "List all bounding box widths and heights of object sample ID 2.", "sql": "SELECT W, H FROM IMG_OBJ WHERE OBJ_SAMPLE_ID = 2", "source_tables": ["img_obj"]}, "evidence": "The bounding box's W and H abbreviations stand for the object's width and height respectively; object sample ID 2 refers to OBJ_SAMPLE_ID = 2;"}
{"sample_id": 7598, "db_id": "image_and_language", "final": {"question": "In the Y coordinate of image ID 12, how many are 0?", "sql": "SELECT COUNT(IMG_ID) FROM IMG_OBJ WHERE IMG_ID = 12 AND Y = 0", "source_tables": ["img_obj"]}, "evidence": "Y coordinate many are 0 refers to Y coordinates of the bounding box where Y = 0; image ID 12 refers to IMG_ID = 12;"}
{"sample_id": 7599, "db_id": "image_and_language", "final": {"question": "List all the attribute classes of image ID 22.", "sql": "SELECT T1.ATT_CLASS FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T2.IMG_ID = 22", "source_tables": ["img_obj_att", "att_classes"]}, "evidence": "attribute classes of image ID 22 refer to ATT_CLASS where MG_ID = 22;"}
{"sample_id": 7600, "db_id": "image_and_language", "final": {"question": "List the object classes of image ID 36 with coordinates (0,0).", "sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 36 AND T1.X = 0 AND T1.Y = 0", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "object classes of image ID 36 refers to OBJ_CLASS where IMG_ID = 36; coordinates (0,0) refer to X and Y coordinates of the bounding box where X = 0 and Y = 0;"}
{"sample_id": 7601, "db_id": "image_and_language", "final": {"question": "Write 10 coordinates with the object class \"pizza.\"", "sql": "SELECT T1.IMG_ID, T1.X, T1.Y FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'pizza' LIMIT 10", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "coordinates for the object refer to X, Y, W and H coordinates of the bounding box; object class \"pizza\" refers to OBJ_CLASS = 'pizza';"}
{"sample_id": 7602, "db_id": "image_and_language", "final": {"question": "What object class is in the X and Y coordinates of 126 and 363?", "sql": "SELECT T1.IMG_ID, T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 126 AND T1.Y = 363", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "object class refers to OBJ_CLASS; X and Y coordinates of 126 and 363 refer to coordinates of the bounding box where X = 126 and Y = 363;"}
{"sample_id": 7603, "db_id": "image_and_language", "final": {"question": "What is the most common object class of image ID 56?", "sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 56 GROUP BY T2.OBJ_CLASS ORDER BY COUNT(T2.OBJ_CLASS_ID) DESC LIMIT 1", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "the most common object class of image ID 56 refers to MAX(COUNT(OBJ_CLASS_ID)) where IMG_ID = 56;"}
{"sample_id": 7604, "db_id": "image_and_language", "final": {"question": "Write the object classes of image ID 22 alongside the object's width and height.", "sql": "SELECT T1.W, T1.H, T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 22", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "object classes of image ID 22 refers to OBJ_CLASS where IMG_ID = 22; the object's width and heigh refer to W and H coordinates of the bounding box respectively;"}
{"sample_id": 7605, "db_id": "image_and_language", "final": {"question": "What is the predicate class of image ID 68?", "sql": "SELECT T2.PRED_CLASS FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.IMG_ID = 68", "source_tables": ["img_rel", "pred_classes"]}, "evidence": "predicate class of image ID 68 refers to PRED_CLASS where IMG_ID = 68;"}
{"sample_id": 7606, "db_id": "image_and_language", "final": {"question": "How many 'has' predicate classes does image ID 107 have?", "sql": "SELECT COUNT(T2.PRED_CLASS) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.IMG_ID = 107 AND T2.PRED_CLASS = 'has'", "source_tables": ["img_rel", "pred_classes"]}, "evidence": "has' predicate classes refers to PRED_CLASS = 'has'; image ID 107 refers to IMG_ID = 107;"}
{"sample_id": 7607, "db_id": "image_and_language", "final": {"question": "Name the most common predicate class of image ID 4434.", "sql": "SELECT T2.PRED_CLASS FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.IMG_ID = 4434 ORDER BY T2.PRED_CLASS DESC LIMIT 1", "source_tables": ["img_rel", "pred_classes"]}, "evidence": "the most common predicate class of image ID 4434 MAX(PRED_CLASS) where IMG_ID = 4434;"}
{"sample_id": 7608, "db_id": "image_and_language", "final": {"question": "Count the number of 'dress' object classes and include their X and Y coordinates in image ID 1764.", "sql": "SELECT T1.X, T1.Y FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 1764 AND T2.OBJ_CLASS = 'dress'", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "dress' object classes refer to OBJ_CLASS = 'dress'; image ID 1764 refers to IMG_ID = 1764; X and Y refer to coordinates of the bounding box;"}
{"sample_id": 7609, "db_id": "image_and_language", "final": {"question": "Give the X and Y coordinates of the sample object of image ID 23 that has the 'cast' attribute class.", "sql": "SELECT T3.OBJ_SAMPLE_ID, T3.X, T3.Y FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID WHERE T3.IMG_ID = 23 AND T1.ATT_CLASS = 'cast'", "source_tables": ["img_obj_att", "att_classes", "img_obj"]}, "evidence": "X and Y refer to coordinates of the bounding box; image ID 23 refers to IMG_ID = 23; 'cast' attribute class refers to ATT_CLASS = 'cast';"}
{"sample_id": 7610, "db_id": "image_and_language", "final": {"question": "How many 'blue' attribute classes are there on image ID 2355735?", "sql": "SELECT COUNT(T1.ATT_CLASS) FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T2.IMG_ID = 2355735 AND T1.ATT_CLASS = 'blue'", "source_tables": ["img_obj_att", "att_classes"]}, "evidence": "blue' attribute classes on image ID 2355735 refer to ATT_CLASS = 'blue' where IMG_ID = 2355735;"}
{"sample_id": 7611, "db_id": "image_and_language", "final": {"question": "What is the average width and height of the objects in image ID 47? List their object classes as well.", "sql": "SELECT T2.OBJ_CLASS, AVG(T1.W), AVG(T1.H) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 47 GROUP BY T2.OBJ_CLASS", "source_tables": ["obj_classes", "img_obj"]}, "evidence": "The bounding box's W and H abbreviations stand for the object's width and height in which average width and height refer to AVG(W) and AVG(H) respectively; image ID 47 refers to IMG_ID = 47; object classes refer to OBJ_CLASS;"}
{"sample_id": 7777, "db_id": "hockey", "final": {"question": "In the year that the Montreal Canadiens had 24 penalty minutes in the Stanley Cup finals, how many wins did the team had in total?", "sql": "SELECT T2.W FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens' AND T2.PIM = 24", "source_tables": ["teamssc", "teams"]}, "evidence": "penalty minutes refer to PIM = 24; wins refer to W;"}
{"sample_id": 7778, "db_id": "hockey", "final": {"question": "In which year did the Montreal Canadiens have 49 penalty minutes in the Stanley Cup finals? Was it 1924, 1923 or 1918?", "sql": "SELECT T1.year FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens' AND T2.PIM = 49", "source_tables": ["teamssc", "teams"]}, "evidence": "penalty minutes refer to PIM = 49;"}
{"sample_id": 7779, "db_id": "hockey", "final": {"question": "Which coach was the first one to teach the Montreal Canadiens, please give his first name.", "sql": "SELECT T3.firstName FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Montreal Canadiens' ORDER BY T1.year LIMIT 1", "source_tables": ["master", "coaches", "teams"]}, "evidence": "the first one refers to MIN(year);"}
{"sample_id": 7780, "db_id": "hockey", "final": {"question": "What is the average winning rate of the Buffalo Sabres in 2000?", "sql": "SELECT SUM(CAST(T2.W AS REAL) / T2.G) / COUNT(T1.oppID) FROM TeamVsTeam AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID WHERE T2.name = 'Buffalo Sabres' AND T1.year = 2000", "source_tables": ["teamvsteam", "teams"]}, "evidence": "DIVIDE(SUM(DIVIDE(W,G), COUNT(oppID) where year = 2000; Montreal Canadiens is name of team;"}
{"sample_id": 7781, "db_id": "hockey", "final": {"question": "How many penalty minutes did the Montreal Canadiens have on average in the Stanley Cup Finals?", "sql": "SELECT CAST(SUM(T2.PIM) AS REAL) / COUNT(T2.PIM) FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens'", "source_tables": ["teamssc", "teams"]}, "evidence": "AVG(PIM) = DIVIDE(SUM(PIM), COUNT(G)); Montreal Canadiens is name of team;"}
{"sample_id": 7782, "db_id": "hockey", "final": {"question": "What is the average winning rate of the Montreal Canadiens in the Stanley Cup finals?", "sql": "SELECT SUM(T2.W / T2.G) / SUM(T2.G + T2.W) FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens'", "source_tables": ["teamssc", "teams"]}, "evidence": "DIVIDE(SUM(DIVIDE(W,G), COUNT(oppID);"}
{"sample_id": 7783, "db_id": "hockey", "final": {"question": "What is the percentage of American coaches among all the coaches who taught the Montreal Canadiens?", "sql": "SELECT SUM(CAST(T2.W AS REAL) / T2.G) / SUM(T2.G + T2.W) FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens'", "source_tables": ["teamssc", "teams"]}, "evidence": "American refers to birthCountry = 'USA'; DIVIDE(COUNT(coachID where birthCountry = 'USA', name` = 'Montreal Canadiens'), COUNT(coachID where name` = 'Montreal Canadiens')) as percentage;"}
{"sample_id": 7784, "db_id": "hockey", "final": {"question": "Who was the latest non player/builder to become the hall of famer? Give the full name.", "sql": "SELECT name FROM HOF WHERE category IN ('Player', 'Builder') ORDER BY year DESC LIMIT 1", "source_tables": ["hof"]}, "evidence": "latest refers to MAX(year); non player/builder refers to category = NOT IN ('player', 'builder');"}
{"sample_id": 7785, "db_id": "hockey", "final": {"question": "For all the referees, who became a hall of famer in the 1970s? What's his hofID?", "sql": "SELECT name, hofID FROM HOF WHERE category = 'Builder' AND year BETWEEN 1970 AND 1979", "source_tables": ["hof"]}, "evidence": "1970s refers to year between 1970 and 1979; referees stand for category;"}
{"sample_id": 7786, "db_id": "hockey", "final": {"question": "In the year 1958, what is the total number of players that became hall of famers?", "sql": "SELECT COUNT(hofID) FROM HOF WHERE category = 'Player' AND year = 1958", "source_tables": ["hof"]}, "evidence": "hall of famers refers to hofID; players stand for category;"}
{"sample_id": 7787, "db_id": "hockey", "final": {"question": "How many hall of famers both played and coached in the league?", "sql": "SELECT COUNT(playerID) FROM Master WHERE hofID IS NOT NULL AND playerID IS NOT NULL AND coachID IS NOT NULL", "source_tables": ["master"]}, "evidence": "hall of famers refers to hofID; both played and coached means playerID is not NULL and coachID is not NULL;"}
{"sample_id": 7788, "db_id": "hockey", "final": {"question": "What is the number of players whose last name is Green that played in the league but not coached?", "sql": "SELECT COUNT(playerID) FROM Master WHERE lastName = 'Green' AND coachID IS NULL", "source_tables": ["master"]}, "evidence": "played in the league but not coached means playerID is not NULL and coachID is NULL;"}
{"sample_id": 7789, "db_id": "hockey", "final": {"question": "For the team that Scotty Bowman coached in 1982, how many bench minor penalties did they have that year?", "sql": "SELECT T2.BenchMinor FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T3.firstName = 'Scotty' AND T3.lastName = 'Bowman' AND T1.year = 1982", "source_tables": ["master", "coaches", "teams"]}, "evidence": "bench minor penalties refer to BenchMinor; Scotty Bowman is a coach; year = 1982;"}
{"sample_id": 7790, "db_id": "hockey", "final": {"question": "Among the players who had 10 empty net goals in their career, who is the tallest? Show his full name.", "sql": "SELECT T2.firstName, T2.lastName FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.ENG = 10 ORDER BY T2.height DESC LIMIT 1", "source_tables": ["master", "goalies"]}, "evidence": "10 empty net goals refer to ENG = 10; tallest refers to MAX(height);"}
{"sample_id": 7791, "db_id": "hockey", "final": {"question": "Which was the dominant hand for the goaltender who played 32 games for QUN in 1973? Give the full name.", "sql": "SELECT T2.shootCatch, T2.firstName, T2.lastName FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID AND T1.year = 1973 WHERE T1.tmID = 'QUN' AND T1.GP = 32", "source_tables": ["master", "goalies"]}, "evidence": "the dominant hand refers to shootCatch; year = 1973; tmID = 'QUN'; played 32 games refers to GP = 32;"}
{"sample_id": 7792, "db_id": "hockey", "final": {"question": "For the goalie whose last name is \"Young\", how many teams did he play in?", "sql": "SELECT COUNT(DISTINCT T1.tmID) FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.lastName = 'Young'", "source_tables": ["master", "goalies"]}, "evidence": "goalie is a players; teams refer to tmID;"}
{"sample_id": 7793, "db_id": "hockey", "final": {"question": "For the goalkeeper that became a coach than a Hall of Famer, who played for BOS in 1972?", "sql": "SELECT T2.firstName, T2.lastName , IIF(T1.tmID = 'BOS', 'YES', 'NO') FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 1972 AND T1.tmID = 'BOS' AND T2.coachID IS NOT NULL AND T2.hofID IS NULL", "source_tables": ["master", "goalies"]}, "evidence": "BOS refers to tmID = 'BOS'; year = 1972; became a coach than a Hall of Famer means coachID is not NULL and hofID is NULL;"}
{"sample_id": 7794, "db_id": "hockey", "final": {"question": "For the goalie whose legendsID is \"P196402\" , how many games did he play in the league?", "sql": "SELECT SUM(T1.GP) FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.legendsID = 'P196402'", "source_tables": ["master", "goalies"]}, "evidence": ""}
{"sample_id": 7795, "db_id": "hockey", "final": {"question": "In the history of all the Quebec Bulldogs, which goalie had the most play minutes for the team? Give the full name.", "sql": "SELECT T2.firstName, T2.lastName FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T1.tmID = T3.tmID AND T1.year = T3.year WHERE T3.name = 'Quebec Bulldogs' AND T2.pos = 'D' GROUP BY T1.playerID, T2.firstName, T2.lastName ORDER BY SUM(T1.Min) DESC LIMIT 1", "source_tables": ["master", "goalies", "teams"]}, "evidence": "the most play minutes refer to MAX(Min); goalie refers to pos = 'G'; New York Islanders is the nameof team;"}
{"sample_id": 7796, "db_id": "hockey", "final": {"question": "How many goalies played for Calgary Flames?", "sql": "SELECT COUNT(DISTINCT playerID) FROM Goalies AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.name = 'Calgary Flames'", "source_tables": ["goalies", "teams"]}, "evidence": "Calgary Flames is the name of team;"}
{"sample_id": 7797, "db_id": "hockey", "final": {"question": "Which Minnesota North Stars' goalkeeper had the most Goal Againsts in his play time?", "sql": "SELECT playerID FROM Goalies AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.name = 'Minnesota North Stars' GROUP BY T1.playerID ORDER BY SUM(T1.GA) DESC LIMIT 1", "source_tables": ["goalies", "teams"]}, "evidence": "Goals Against are the number of goals recorded while the goalie is on the ice; the most Goal Againsts refers to MAX(GA); Minnesota North Stars is name of team;"}
{"sample_id": 7798, "db_id": "hockey", "final": {"question": "How many Haileybury Hockey Club goalies became a hall of famer?", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T1.tmID = T3.tmID AND T1.year = T3.year WHERE T3.name = 'Haileybury Hockey Club' AND T2.hofID IS NOT NULL", "source_tables": ["master", "goalies", "teams"]}, "evidence": "hall of famers refers to hofID where playerID is not NULL;"}
{"sample_id": 7799, "db_id": "hockey", "final": {"question": "For the goalie who had the most shutouts in 2010, what's his catching hand?", "sql": "SELECT T2.shootCatch FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 2010 GROUP BY T2.shootCatch ORDER BY SUM(T1.SHO) DESC LIMIT 1", "source_tables": ["master", "goalies"]}, "evidence": "the most shutouts refer to MAX(SHO); catching hand refers to shootCatch; year = 2010;"}
{"sample_id": 7800, "db_id": "hockey", "final": {"question": "What's the decrease rate of the game plays did David Aebischer after he got traded in 2005?", "sql": "SELECT CAST((SUM(CASE WHEN T1.year = 2005 THEN T1.GP ELSE 0 END) - SUM(CASE WHEN T1.year = 2006 THEN T1.GP ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.year = 2005 THEN T1.GP ELSE 0 END) FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.firstName = 'David' AND T2.lastName = 'Aebischer'", "source_tables": ["master", "goalies"]}, "evidence": "DIVIDE(SUBTRACT(SUM(GP(year = 2005), SUM(GP(year = 2006)), SUM(GP(year = 2005)) as percentage;"}
{"sample_id": 7801, "db_id": "hockey", "final": {"question": "State the player ID and coach ID of person who have become coach after retirement.", "sql": "SELECT playerID, coachID FROM Master WHERE playerID IS NOT NULL AND coachID IS NOT NULL", "source_tables": ["master"]}, "evidence": "after retirement means playerID Iis not NULL and coachID is not NULL;"}
{"sample_id": 7802, "db_id": "hockey", "final": {"question": "State the player ID of player with average height of 75.", "sql": "SELECT DISTINCT playerID FROM Master GROUP BY playerID HAVING AVG(height) = 75", "source_tables": ["master"]}, "evidence": "average height of 75 refers to AVG(height) = 75;"}
{"sample_id": 7803, "db_id": "hockey", "final": {"question": "Who is the heaviest player? State player ID of 5 heaviest players.", "sql": "SELECT playerID FROM Master ORDER BY weight DESC LIMIT 5", "source_tables": ["master"]}, "evidence": "5 heaviest players refer to MAX(weight) limit to 5 playerID;"}
{"sample_id": 7804, "db_id": "hockey", "final": {"question": "What is the full name of players origin from Finland?", "sql": "SELECT DISTINCT firstName, lastName FROM Master WHERE birthCountry = 'Finland'", "source_tables": ["master"]}, "evidence": "origin from Finland refers to birthCountry = 'Finland';"}
{"sample_id": 7805, "db_id": "hockey", "final": {"question": "List down player ID of players who have passed away.", "sql": "SELECT DISTINCT playerID FROM Master WHERE deathYear IS NOT NULL AND playerID IS NOT NULL", "source_tables": ["master"]}, "evidence": "passed away means deathYear is not NULL;"}
{"sample_id": 7806, "db_id": "hockey", "final": {"question": "List down the first name of coaches who still coach after year 2000.", "sql": "SELECT DISTINCT T1.firstName FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year > 2000", "source_tables": ["master", "coaches"]}, "evidence": "after year 2000 refers to year>2000;"}
{"sample_id": 7807, "db_id": "hockey", "final": {"question": "What is the height and weight for coaches who have won awards in 1930?", "sql": "SELECT T1.height, T1.weight FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = '1930'", "source_tables": ["master", "awardscoaches"]}, "evidence": "year = 1930;"}
{"sample_id": 7808, "db_id": "hockey", "final": {"question": "How much is the total goals for player with player ID aaltoan01 and how old is this person?", "sql": "SELECT SUM(T2.G), STRFTIME('%Y', CURRENT_TIMESTAMP) - T1.birthyear FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T1.playerID = 'aaltoan01' GROUP BY T1.birthyear", "source_tables": ["master", "scoring"]}, "evidence": "total goals refer to SUM(G); how old = SUBTRACT(YEAR(CURDATE, birthYear);"}
{"sample_id": 7809, "db_id": "hockey", "final": {"question": "Is there any coach who has not been a player before but has won award? State the ID.", "sql": "SELECT DISTINCT T2.coachID FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.playerID IS NULL", "source_tables": ["master", "awardscoaches"]}, "evidence": "coach who has not been a player means playerID is NULL and coachID is not NULL;"}
{"sample_id": 7810, "db_id": "hockey", "final": {"question": "Which player ID are left winger and weight more than 200?", "sql": "SELECT DISTINCT playerID FROM Master WHERE pos LIKE '%L%' AND weight > 200 AND playerID IS NOT NULL AND pos = 'L'", "source_tables": ["master"]}, "evidence": "left winger refers to pos = 'L'; weight>200"}
{"sample_id": 7811, "db_id": "hockey", "final": {"question": "What is the total number of game played for players from USA?", "sql": "SELECT COUNT(T2.GP) FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCountry = 'USA'", "source_tables": ["master", "scoring"]}, "evidence": "game played refers to GP; from USA refers to birthCountry = 'USA';"}
{"sample_id": 7812, "db_id": "hockey", "final": {"question": "Calculate the total points scored by team ID ANA and list down the coashes of the team.", "sql": "SELECT SUM(T2.Pts), T1.coachID FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T2.tmID = T1.tmID WHERE T2.tmID = 'ANA' GROUP BY T1.coachID", "source_tables": ["coaches", "teams"]}, "evidence": "points scored refers to Pts; team ID refers to tmID;"}
{"sample_id": 7813, "db_id": "hockey", "final": {"question": "In 1976, how many goals achieved by team 'BIR' in Division 'EW'?", "sql": "SELECT SUM(T2.G) FROM Teams AS T1 INNER JOIN Scoring AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.divID = 'EW' AND T1.tmID = 'BIR' AND T1.year = 1976", "source_tables": ["scoring", "teams"]}, "evidence": "year = 1976; BIR refers to tmID; Division 'EW' refers to divID = 'EW'; goals = G;"}
{"sample_id": 7814, "db_id": "hockey", "final": {"question": "In 2010, how many loses made by team 'BOS' and how many assists were made by the players?", "sql": "SELECT SUM(T1.L), SUM(T2.A) FROM Teams AS T1 INNER JOIN Scoring AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.tmID = 'BOS' AND T1.year = 2010", "source_tables": ["scoring", "teams"]}, "evidence": "year = 2010; BOS refers to tmID; loses refer to L; assists refer to A;"}
{"sample_id": 7815, "db_id": "hockey", "final": {"question": "What are the total weights of players for team 'ANA' as per year 1997?", "sql": "SELECT SUM(T1.weight) FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1997 AND T2.tmID = 'ANA'", "source_tables": ["master", "scoring"]}, "evidence": "ANA refers to tmID;"}
{"sample_id": 7816, "db_id": "hockey", "final": {"question": "Who is the shortest player and state the team ID of that player from 1925 to 1936.", "sql": "SELECT T2.playerID, T2.tmID FROM ( SELECT playerID FROM Master WHERE height IS NOT NULL ORDER BY height ASC LIMIT 1 ) AS T1 INNER JOIN ( SELECT DISTINCT playerID, tmID FROM Scoring WHERE year BETWEEN 1925 AND 1936 ) AS T2 ON T1.playerID = T2.playerID", "source_tables": ["master", "scoring"]}, "evidence": "Shortest refers to MIN(height); from 1925 to 1936 refers to year between 1925 and 1936;"}
{"sample_id": 7817, "db_id": "hockey", "final": {"question": "Which team has the highest winning rate in year 2000? State the team ID and list down the birth country of it's players.", "sql": "SELECT DISTINCT T3.tmID, T1.birthCountry FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID INNER JOIN ( SELECT year, tmID FROM Teams WHERE year = 2000 ORDER BY W / (W + L) DESC LIMIT 1 ) AS T3 ON T2.tmID = T3.tmID AND T2.year = T3.year", "source_tables": ["master", "scoring", "teams"]}, "evidence": "MAX(DIVIDE(COUNT(W), SUM(COUNT(W), (COUNT (L)) where year = 2000;"}
{"sample_id": 7818, "db_id": "hockey", "final": {"question": "In 1998, How many wins were made by team 'CAR' per game played? Who contributed the most goals? State the player ID.", "sql": "SELECT CAST(T1.W AS REAL) / T1.G, T2.playerID FROM Teams AS T1 INNER JOIN Scoring AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.tmID = 'CAR' AND T1.year = 1998 GROUP BY T1.W / T1.G, T2.playerID ORDER BY SUM(T2.G) DESC LIMIT 1", "source_tables": ["scoring", "teams"]}, "evidence": "year = 1998; wins per game played = DIVIDE(W, G); CAR refers to tmID; contributed the most goals refers to MAX(G);"}
{"sample_id": 7897, "db_id": "world", "final": {"question": "How many languages are there in the country where Tocantins district belongs?", "sql": "SELECT COUNT(DISTINCT T2.Language) FROM City AS T1 INNER JOIN CountryLanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.District = 'Tocantins'", "source_tables": ["countrylanguage", "city"]}, "evidence": ""}
{"sample_id": 7898, "db_id": "world", "final": {"question": "What are the districts that belong to the country with the largest surface area?", "sql": "SELECT T1.District FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = ( SELECT Name FROM Country ORDER BY SurfaceArea DESC LIMIT 1 )", "source_tables": ["country", "city"]}, "evidence": "largest surface area refers to MAX(SurfaceArea);"}
{"sample_id": 7899, "db_id": "world", "final": {"question": "How many cities are there in the country ruled by Kostis Stefanopoulos?", "sql": "SELECT COUNT(DISTINCT T1.Name) FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.HeadOfState = 'Kostis Stefanopoulos'", "source_tables": ["country", "city"]}, "evidence": "ruled by Kostis Stefanopoulos refers to HeadOfState = 'Kostis Stefanopoulos';"}
{"sample_id": 7900, "db_id": "world", "final": {"question": "What are the official languages used in Greece?", "sql": "SELECT T1.Language FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.IsOfficial = 'T' AND T2.name = 'Greece'", "source_tables": ["countrylanguage", "country"]}, "evidence": "official language refers to IsOfficial = 'T'; Greece is a name of country;"}
{"sample_id": 7901, "db_id": "world", "final": {"question": "Give the population of the country where Queimados city belongs.", "sql": "SELECT T2.Population FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Queimados'", "source_tables": ["country", "city"]}, "evidence": ""}
{"sample_id": 7902, "db_id": "world", "final": {"question": "What are the official languages of the country where you can find the city with the least population?", "sql": "SELECT T2.Language FROM City AS T1 INNER JOIN CountryLanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IsOfficial = 'T' ORDER BY T1.Population ASC LIMIT 1", "source_tables": ["countrylanguage", "city"]}, "evidence": "official language refers to IsOfficial = 'T'; least population refers to MIN(Population);"}
{"sample_id": 7903, "db_id": "world", "final": {"question": "What is the surface area and GNP of the country where Namibe district belongs?", "sql": "SELECT T2.SurfaceArea, T2.GNP FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = 'Namibe'", "source_tables": ["country", "city"]}, "evidence": ""}
{"sample_id": 7904, "db_id": "world", "final": {"question": "List the names of the country that officially uses English as their language.", "sql": "SELECT T2.Name FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.IsOfficial = 'T' AND T1.Language = 'English'", "source_tables": ["countrylanguage", "country"]}, "evidence": "officially uses English as their language refers to `Language` = 'English' AND IsOfficial = 'T';"}
{"sample_id": 7905, "db_id": "world", "final": {"question": "What are the districts that belong to the country with the lowest surface area?", "sql": "SELECT T1.District FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code ORDER BY T2.SurfaceArea ASC LIMIT 1", "source_tables": ["country", "city"]}, "evidence": "lowest surface area refers to MIN(SurfaceArea);"}
{"sample_id": 7906, "db_id": "world", "final": {"question": "List down the country names of countries that have a GNP lower than 1000 and have Dutch as their language.", "sql": "SELECT T2.Name FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GNP < 1000 AND T1.IsOfficial = 'T' AND T1.Language = 'Dutch'", "source_tables": ["countrylanguage", "country"]}, "evidence": "GNP lower than 1000 refers to GNP < 1000; Dutch as their language refers to `Language` = 'Dutch';"}
{"sample_id": 7907, "db_id": "world", "final": {"question": "What is the GNP of the country where district \"Entre Rios\" belongs?", "sql": "SELECT T2.GNP FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = 'Entre Rios' LIMIT 1", "source_tables": ["country", "city"]}, "evidence": ""}
{"sample_id": 7908, "db_id": "world", "final": {"question": "What is the local name of the country where \"The Valley\" city belongs?", "sql": "SELECT T2.LocalName FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'The Valley'", "source_tables": ["country", "city"]}, "evidence": ""}
{"sample_id": 7909, "db_id": "world", "final": {"question": "List down the cities belongs to the country that has surface area greater than 7000000.", "sql": "SELECT T2.Name, T1.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.SurfaceArea > 7000000", "source_tables": ["country", "city"]}, "evidence": "surface area greater than 7000000 refers to SurfaceArea > 7000000;"}
{"sample_id": 7910, "db_id": "world", "final": {"question": "What is the life expectancy of the countries that uses Japanese as their language?", "sql": "SELECT AVG(T2.LifeExpectancy) FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Japanese'", "source_tables": ["countrylanguage", "country"]}, "evidence": "uses Japanese as their language refers to `Language` = 'Japanese';"}
{"sample_id": 7911, "db_id": "world", "final": {"question": "How many cities are there in the country with the surface area of 652090?", "sql": "SELECT T2.Name, COUNT(T1.Name) FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.SurfaceArea = 652090 GROUP BY T2.Name", "source_tables": ["country", "city"]}, "evidence": ""}
{"sample_id": 7912, "db_id": "world", "final": {"question": "List down the languages of countries with an independence year between 1980 to 1995.", "sql": "SELECT T2.Name, T1.Language FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.IndepYear BETWEEN 1980 AND 1995", "source_tables": ["countrylanguage", "country"]}, "evidence": "independence year between 1980 to 1995 refers to IndepYear BETWEEN 1980 AND 1995;"}
{"sample_id": 7913, "db_id": "world", "final": {"question": "What is the life expectancy of the people living in Calama city?", "sql": "SELECT T2.LifeExpectancy FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Calama'", "source_tables": ["country", "city"]}, "evidence": ""}
{"sample_id": 7914, "db_id": "world", "final": {"question": "Provide the language used in the country ruled by Pierre Buyoya.", "sql": "SELECT T1.Language FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.HeadOfState = 'Pierre Buyoya'", "source_tables": ["countrylanguage", "country"]}, "evidence": "ruled by Pierre Buyoya refers to HeadOfState = 'Pierre Buyoya';"}
{"sample_id": 7915, "db_id": "world", "final": {"question": "In countries with constitutional monarchy, what is the percentage of cities located in the district of England?", "sql": "SELECT CAST(SUM(CASE WHEN T1.District = 'England' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm = 'Constitutional Monarchy'", "source_tables": ["country", "city"]}, "evidence": "constitutional monarchy refers to GovernmentForm = 'Constitutional Monarchy'; percentage = MULTIPLY(DIVIDE(SUM(GovernmentForm = 'Constitutional Monarchy' WHERE District = 'England'), COUNT(GovernmentForm = 'Constitutional Monarchy')), 100)"}
{"sample_id": 7916, "db_id": "world", "final": {"question": "Among the cities with a population between 140000 and 150000, list the country that has life expectancy greater than 80% life expectancy of all countries.", "sql": "SELECT T2.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Population BETWEEN 140000 AND 150000 GROUP BY T2.Name, LifeExpectancy HAVING LifeExpectancy < ( SELECT AVG(LifeExpectancy) FROM Country ) * 0.8", "source_tables": ["country", "city"]}, "evidence": "life expectancy greater than 80% life expectancy of all countries refers to LifeExpectancy < (MULTIPLY(AVG(LifeExpectancy), 0.8));"}
{"sample_id": 7917, "db_id": "world", "final": {"question": "Among the countries that use Italian as their language, what is the percentage of republic countries?", "sql": "SELECT CAST(SUM(CASE WHEN T2.GovernmentForm = 'Republic' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Italian'", "source_tables": ["countrylanguage", "country"]}, "evidence": "use Italian as their language refers to `Language` = 'Italian'; percentage = MULTIPLY(DIVIDE(SUM(`Language` = 'Italian' WHERE GovernmentForm = 'Republic'), COUNT(`Language` = 'Italian')), 100); use Italian as their language refers to `Language` = 'Italian'; republic countries refers to GovernmentForm = 'Republic';"}
{"sample_id": 7972, "db_id": "music_platform_2", "final": {"question": "What are the titles and categories of all the podcasts with a review that has \"Absolutely fantastic\" in it?", "sql": "SELECT T2.title, T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T3.content LIKE '%Absolutely fantastic%'", "source_tables": ["podcasts", "categories", "reviews"]}, "evidence": "review refers to content; 'Absolutely fantastic' in it refers to content like '%Absolutely fantastic%'"}
{"sample_id": 7973, "db_id": "music_platform_2", "final": {"question": "Which category has the most reviews?", "sql": "SELECT T1.category FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id GROUP BY T1.category ORDER BY COUNT(T2.podcast_id) DESC LIMIT 1", "source_tables": ["categories", "reviews"]}, "evidence": "Most review refers to Max(Count(reviews.podcast_id))"}
{"sample_id": 7974, "db_id": "music_platform_2", "final": {"question": "List the urls for all the \"fiction-science-fiction\" podcasts.", "sql": "SELECT itunes_url FROM podcasts WHERE podcast_id IN ( SELECT podcast_id FROM categories WHERE category = 'fiction-science-fiction' )", "source_tables": ["podcasts", "categories"]}, "evidence": "fiction-science-fiction podcasts refers to category = 'fiction-science-fiction'; urls refers to itunes_url"}
{"sample_id": 7975, "db_id": "music_platform_2", "final": {"question": "What is the content of the earliest review for the \"Stuff You Should Know\" podcast?", "sql": "SELECT T2.content FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Stuff You Should Know' ORDER BY T2.created_at ASC LIMIT 1", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"Stuff You Should Know\" is the title of podcast; earliest refers to Min(created_at)"}
{"sample_id": 7976, "db_id": "music_platform_2", "final": {"question": "How many reviews does \"Planet Money\" have?", "sql": "SELECT COUNT(T2.podcast_id) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Planet Money'", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"Planet Money\" is the title of podcast"}
{"sample_id": 7977, "db_id": "music_platform_2", "final": {"question": "What is the average rating for the \"crime-junkie\" podcast?", "sql": "SELECT AVG(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Crime Junkie'", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"crime-junkie\" podcast refers to title = 'crime-junkie'; average rating = Divide (Sum(rating), Count(rating))"}
{"sample_id": 7978, "db_id": "music_platform_2", "final": {"question": "What percentage of podcasts are \"technology\" podcasts? List all of them.", "sql": "SELECT CAST(SUM(CASE WHEN T1.category = 'technology' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.title) OR '%' 'percentage' FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id", "source_tables": ["podcasts", "categories"]}, "evidence": "\"technology\" podcast refers to category = 'technology'; percentage = Divide (Count (podcast_id (category = 'technology')), Count (podcast_id)) * 100"}
{"sample_id": 7979, "db_id": "music_platform_2", "final": {"question": "What is the content of the review under the title \"really interesting!\" and is created on 2018-04-24 at 12:05:16?", "sql": "SELECT content FROM reviews WHERE title = 'really interesting!' AND created_at = '2018-04-24T12:05:16-07:00'", "source_tables": ["reviews"]}, "evidence": "\"really interesting\" is the title of review;\u00a0 created on 2018-04-24 at 12:05:16 refers to created_at = '2018-04-24T12:05:16-07:00'"}
{"sample_id": 7980, "db_id": "music_platform_2", "final": {"question": "Which category is the podcast \"Scaling Global\" under?", "sql": "SELECT category FROM categories WHERE podcast_id IN ( SELECT podcast_id FROM podcasts WHERE title = 'Scaling Global' )", "source_tables": ["podcasts", "categories"]}, "evidence": "\"Scaling Global\" is the title of podcast"}
{"sample_id": 7981, "db_id": "music_platform_2", "final": {"question": "Please list the titles of all the podcasts under the category \"arts-performing-arts\".", "sql": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'arts-performing-arts'", "source_tables": ["podcasts", "categories"]}, "evidence": "category 'arts-performing-arts' refers to category = 'arts-performing-arts';"}
{"sample_id": 7982, "db_id": "music_platform_2", "final": {"question": "How many reviews are created for the podcast \"Scaling Global\" under?", "sql": "SELECT COUNT(T2.content) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Scaling Global'", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"Scaling Global\" is the title of podcast"}
{"sample_id": 7983, "db_id": "music_platform_2", "final": {"question": "Among the reviews for the podcast \"Please Excuse My Dead Aunt Sally\", how many of them are made in the year 2019?", "sql": "SELECT COUNT(T2.created_at) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Please Excuse My Dead Aunt Sally' AND T2.created_at LIKE '2019-%'", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"Please Excuse My Dead Aunt Sally\" is the title of podcast; made in the year 2019 refers to created_at like '2019%'"}
{"sample_id": 7984, "db_id": "music_platform_2", "final": {"question": "Please list the titles of the podcasts for which the author whose ID is F7E5A318989779D has written a review.", "sql": "SELECT T2.title FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.author_id = 'F7E5A318989779D'", "source_tables": ["podcasts", "reviews"]}, "evidence": "author whose ID is F7E5A318989779D refers to author_id = 'F7E5A318989779D'"}
{"sample_id": 7985, "db_id": "music_platform_2", "final": {"question": "How many ratings of 5 have been given to the podcast \"Please Excuse My Dead Aunt Sally\"?", "sql": "SELECT COUNT(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Please Excuse My Dead Aunt Sally' AND T2.rating = 5", "source_tables": ["podcasts", "reviews"]}, "evidence": "rating of 5 refers to rating = 5; 'Please Excuse My Dead Aunt Sally' is the title of podcast"}
{"sample_id": 7986, "db_id": "music_platform_2", "final": {"question": "What is the average rating of the podcast \"Please Excuse My Dead Aunt Sally\"?", "sql": "SELECT AVG(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Please Excuse My Dead Aunt Sally'", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"Please Excuse My Dead Aunty Sally\" is the title of podcast; Average rating = Divide (Sum(rating), Count(rating))"}
{"sample_id": 8107, "db_id": "university", "final": {"question": "Calculate the average number of students of all universities in 2012.", "sql": "SELECT AVG(num_students) FROM university_year WHERE year = 2012", "source_tables": ["university_year"]}, "evidence": "average number of students refers to avg(num_students); in 2012 refers to year = 2012"}
{"sample_id": 8108, "db_id": "university", "final": {"question": "What is the score of university ID 68 in 2015?", "sql": "SELECT score FROM university_ranking_year WHERE year = 2015 AND university_id = 68", "source_tables": ["university_ranking_year"]}, "evidence": "in 2015 refers to year = 2015"}
{"sample_id": 8109, "db_id": "university", "final": {"question": "Provide the country ID of Cyprus.", "sql": "SELECT id FROM country WHERE country_name = 'Cyprus'", "source_tables": ["country"]}, "evidence": "Cyprus refers to country_name = 'Cyprus';"}
{"sample_id": 8110, "db_id": "university", "final": {"question": "What is the ID of university with the largest percentage of international students?", "sql": "SELECT university_id FROM university_year ORDER BY pct_international_students DESC LIMIT 1", "source_tables": ["university_year"]}, "evidence": "largest percentage of international students refers to MAX(pct_international_students); ID of university refers to university_id"}
{"sample_id": 8111, "db_id": "university", "final": {"question": "Provide the criteria name of the ranking criteria ID 13.", "sql": "SELECT criteria_name FROM ranking_criteria WHERE id = 13", "source_tables": ["ranking_criteria"]}, "evidence": ""}
{"sample_id": 8112, "db_id": "university", "final": {"question": "What is the average score of all universities in 2012?", "sql": "SELECT AVG(score) FROM university_ranking_year WHERE year = 2012", "source_tables": ["university_ranking_year"]}, "evidence": "average score refers to avg(score); in 2012 refers to year = 2012"}
{"sample_id": 8113, "db_id": "university", "final": {"question": "In years 2011 to 2013, what is the total number of female students in university ID 40?", "sql": "SELECT SUM(CAST(num_students * pct_female_students AS REAL) / 100) FROM university_year WHERE year BETWEEN 2011 AND 2013 AND university_id = 40", "source_tables": ["university_year"]}, "evidence": "total number of female students refers to SUM(DIVIDE(MULTIPLY(pct_female_students, num_students), 100)); In years 2011 to 2013 refers to year BETWEEN 2011 AND 2013"}
{"sample_id": 8114, "db_id": "university", "final": {"question": "Calculate the average score of university ID 79 between year 2013 to 2015.", "sql": "SELECT AVG(score) FROM university_ranking_year WHERE year BETWEEN 2013 AND 2015 AND university_id = 79", "source_tables": ["university_ranking_year"]}, "evidence": "average score refers to avg(score); between year 2013 to 2015 refers to year BETWEEN 2013 AND 2015"}
{"sample_id": 8115, "db_id": "university", "final": {"question": "Give the student staff ratio of university ID 35.", "sql": "SELECT student_staff_ratio FROM university_year WHERE university_id = 35", "source_tables": ["university_year"]}, "evidence": ""}
{"sample_id": 8116, "db_id": "university", "final": {"question": "Provide the score of the most populated university in 2011.", "sql": "SELECT T2.score FROM university_year AS T1 INNER JOIN university_ranking_year AS T2 ON T1.university_id = T2.university_id WHERE T1.year = 2011 ORDER BY T1.num_students DESC LIMIT 1", "source_tables": ["university_ranking_year", "university_year"]}, "evidence": "most populated university refers to MAX(num_students); in 2011 refers to year = 2011;"}
{"sample_id": 8117, "db_id": "university", "final": {"question": "Give the criteria name where Harvard University scored 100.", "sql": "SELECT DISTINCT T3.criteria_name FROM university AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.university_id INNER JOIN ranking_criteria AS T3 ON T3.id = T2.ranking_criteria_id WHERE T1.university_name = 'Harvard University' AND T2.score = 100", "source_tables": ["university_ranking_year", "university", "ranking_criteria"]}, "evidence": "Harvard University refers to university_name = 'Harvard University'; scored 100 refers to score = 100"}
{"sample_id": 8118, "db_id": "university", "final": {"question": "Provide the university name and ID of the university found in Turkey.", "sql": "SELECT T1.university_name, T1.id FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Turkey'", "source_tables": ["country", "university"]}, "evidence": "found in Turkey refers to country_name = 'Turkey';"}
{"sample_id": 8119, "db_id": "university", "final": {"question": "What is the total number of ranking criteria under the ranking system called Shanghai Ranking?", "sql": "SELECT COUNT(*) FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T1.system_name = 'Shanghai Ranking'", "source_tables": ["ranking_system", "ranking_criteria"]}, "evidence": "ranking system called Shanghai Ranking refers to system_name = 'Shanghai Ranking';"}
{"sample_id": 8120, "db_id": "university", "final": {"question": "Give the name and score of the university ID 124.", "sql": "SELECT T2.university_name, T1.score FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.id = 124", "source_tables": ["university_ranking_year", "university"]}, "evidence": "name of university refers to university_name;"}
{"sample_id": 8121, "db_id": "university", "final": {"question": "How many female students are there in University of Pennsylvania in 2011?", "sql": "SELECT CAST(T1.num_students * T1.pct_female_students AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T2.university_name = 'University of Pennsylvania'", "source_tables": ["university", "university_year"]}, "evidence": "in 2011 refers to year 2011; female students refers to DIVIDE(MULTIPLY(num_students, pct_female_students), 100); University of Pennsylvania refers to a university name;"}
{"sample_id": 8122, "db_id": "university", "final": {"question": "List down all universities that scored below 50.", "sql": "SELECT DISTINCT T2.university_name FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.score < 50", "source_tables": ["university_ranking_year", "university"]}, "evidence": "scored below 50 refers to score < 50; all universities refers to university_name;"}
{"sample_id": 8123, "db_id": "university", "final": {"question": "How many universities are located in Japan?", "sql": "SELECT COUNT(*) FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Japan'", "source_tables": ["country", "university"]}, "evidence": "located in Japan refers to country_name = 'Japan';"}
{"sample_id": 8124, "db_id": "university", "final": {"question": "Provide the name of the university with the highest number of male students.", "sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id ORDER BY T1.num_students * T1.pct_female_students / 100 - T1.num_students DESC LIMIT 1", "source_tables": ["university", "university_year"]}, "evidence": "highest number of female students refers to MAX(SUBTRACT(num_students, DIVIDE(MULTIPLY(num_students, pct_female_students), 100))); name of university refers to university_name"}
{"sample_id": 8125, "db_id": "university", "final": {"question": "List the countries of universities that scored 70 and below in 2016.", "sql": "SELECT DISTINCT T3.country_name FROM university AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T2.score < 70 AND T2.year = 2016", "source_tables": ["university_ranking_year", "country", "university"]}, "evidence": "scored 70 and below refers to score < 70; in 2016 refers to year = 2016"}
{"sample_id": 8126, "db_id": "university", "final": {"question": "Calculate number of male students in Emory University in 2011.", "sql": "SELECT CAST((T1.num_students - (T1.num_students * T1.pct_female_students)) AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Emory University' AND T1.year = 2011", "source_tables": ["university", "university_year"]}, "evidence": "in 2011 refers to year 2011; number of male students refers to SUBTRACT(num_students, DIVIDE(MULTIPLY(num_students, pct_male_students), 100)); in Emory University refers to university_name = 'Emory University'"}
{"sample_id": 8127, "db_id": "university", "final": {"question": "In which country does Johns Hopkins University located?", "sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'Johns Hopkins University'", "source_tables": ["country", "university"]}, "evidence": "Johns Hopkins University refers to university_name = 'Johns Hopkins University'; which country refers to country_name"}
{"sample_id": 8128, "db_id": "university", "final": {"question": "Give the names of universities with number of students ranges from 400 to 1000.", "sql": "SELECT DISTINCT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.num_students BETWEEN 400 AND 1000", "source_tables": ["university", "university_year"]}, "evidence": "number of students ranges from 400 to 1000 refers to num_students BETWEEN 400 AND 1000; name of university refers to university_name"}
{"sample_id": 8129, "db_id": "university", "final": {"question": "In what year does the Brown University score the highest?", "sql": "SELECT T1.year FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Brown University' ORDER BY T1.score DESC LIMIT 1", "source_tables": ["university_ranking_year", "university"]}, "evidence": "Brown University refers to university_name = 'Brown University'; score the highest refers to MAX(score)"}
{"sample_id": 8130, "db_id": "university", "final": {"question": "Calculate the average score of Emory University from 2011 to 2016.", "sql": "SELECT AVG(T1.score) FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Emory University' AND T1.year BETWEEN 2011 AND 2016", "source_tables": ["university_ranking_year", "university"]}, "evidence": "average score refers to avg(score); Emory University refers to university_name = 'Emory University'; from 2011 to 2016 refers to year BETWEEN 2011 AND 2016;"}
{"sample_id": 8131, "db_id": "university", "final": {"question": "Give the name of the university with the most number of students in 2015.", "sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2015 ORDER BY T1.num_students DESC LIMIT 1", "source_tables": ["university", "university_year"]}, "evidence": "most number of students refers to MAX(num_students); in 2015 refers to year = 2015; name of university refers to university_name;"}
{"sample_id": 8132, "db_id": "university", "final": {"question": "What is the location and number of female students in university ID 23 in 2011?", "sql": "SELECT T3.country_name, CAST(T2.num_students * T2.pct_female_students AS REAL) / 100 FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T2.year = 2011 AND T1.id = 23", "source_tables": ["country", "university", "university_year"]}, "evidence": "in 2011 refers to year 2011; female students refers to DIVIDE(MULTIPLY(num_students, pct_female_students), 100); location refers to country_name"}
{"sample_id": 8133, "db_id": "university", "final": {"question": "How many universities scored 40 in teaching criteria?", "sql": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id WHERE T2.score = 40 AND T1.criteria_name = 'Teaching' AND T2.score = 40", "source_tables": ["university_ranking_year", "ranking_criteria"]}, "evidence": "scored 40 refers to score = 40; in teaching refers to criteria_name = 'Teaching'"}
{"sample_id": 8134, "db_id": "university", "final": {"question": "Among the universities in United States of America, what is the percentage of female students in year 2016?", "sql": "SELECT SUM(CAST(T2.pct_female_students * T2.num_students AS REAL) / 100) * 100 / SUM(T2.num_students) FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'United States of America' AND T2.year = 2016", "source_tables": ["country", "university", "university_year"]}, "evidence": "female students refers to DIVIDE(MULTIPLY(num_students, pct_female_students), 100); in United States of America refers to country_name = 'United States of America'; percentage refers to DIVIDE(SUM(DIVIDE(MULTIPLY(num_students, pct_female_students), 100)), SUM(num_students))"}
{"sample_id": 8135, "db_id": "university", "final": {"question": "Calculate the difference between the total number of students and the number of international international students in Univeristy of Tokyo from 2011 to 2014.", "sql": "SELECT SUM(T1.num_students) - SUM(CAST(T1.num_students * T1.pct_international_students AS REAL) / 100) FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year BETWEEN 2011 AND 2014 AND T2.university_name = 'University of Tokyo'", "source_tables": ["university", "university_year"]}, "evidence": "international students refers to DIVIDE(MULTIPLY(num_students, pct_international_students), 100); difference refers to SUBTRACT(SUM(num_students), SUM(DIVIDE(MULTIPLY(num_students, pct_international_students), 100))); in University of Tokyo refers to university_name = 'University of Tokyo'; from 2011 to 2014 refers to year BETWEEN 2011 AND 2014"}
{"sample_id": 8136, "db_id": "university", "final": {"question": "List the names of universities with a score less than 28% of the average score of all universities in 2015.", "sql": "SELECT T2.university_name FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2015 AND T1.score * 100 < ( SELECT AVG(score) * 28 FROM university_ranking_year WHERE year = 2015 )", "source_tables": ["university_ranking_year", "university"]}, "evidence": "in 2015 refers to year = 2015; score less than 28% refers to score < MULTIPLY(avg(score), 0.28) where year = 2015; names of universities refers to university_name"}
{"sample_id": 8201, "db_id": "sales_in_weather", "final": {"question": "What is the maximum and minimum temperature for station number 1 on 15 January 2012?", "sql": "SELECT tmax, tmin FROM weather WHERE station_nbr = 1 AND 'date' = '2012-01-15'", "source_tables": ["weather"]}, "evidence": "station number 1 refers to station_nbr = 1 ; minimum temperature = tmin; maximum temperature = tmax; on 15 January 2012 refers to date = '2012-01-15'"}
{"sample_id": 8202, "db_id": "sales_in_weather", "final": {"question": "How many stations were able to sell item 5 on January 2014?", "sql": "SELECT COUNT(DISTINCT T2.station_nbr) AS number FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE SUBSTR('date', 1, 7) = '2014-01' AND item_nbr = 5", "source_tables": ["sales_in_weather", "relation"]}, "evidence": "item 5 refers to item_nbr = 5; on January 2014 refers to Substring (date, 1, 7) = '2014-01'"}
{"sample_id": 8203, "db_id": "sales_in_weather", "final": {"question": "What is the lowest minimum temperature recorded in store 16 on January 2012?", "sql": "SELECT MIN(tmin) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 16 AND T1.'date' LIKE '%2012-01%'", "source_tables": ["weather", "relation"]}, "evidence": "lowest minimum temperature refers to Min(tmin); store 16 refers to store_nbr = 16; on January 2012 refers to Substring (date, 1, 7) = '2012-01'"}
{"sample_id": 8204, "db_id": "sales_in_weather", "final": {"question": "How many units of item 7 have been sold by store 7 when the snow is less than 5 inches?", "sql": "SELECT SUM(units) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr INNER JOIN sales_in_weather AS T3 ON T2.store_nbr = T3.store_nbr WHERE T2.store_nbr = 7 AND T3.item_nbr = 7 AND T1.snowfall < 5", "source_tables": ["sales_in_weather", "weather", "relation"]}, "evidence": "item 7 refers to item_nbr = 7; store 7 refers to store_nbr = 7; snow is less than 5 inches refers to snowfall < 5"}
{"sample_id": 8205, "db_id": "sales_in_weather", "final": {"question": "How many items were sold by store 9 during a snowy day?", "sql": "SELECT COUNT(DISTINCT item_nbr) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr INNER JOIN sales_in_weather AS T3 ON T2.store_nbr = T3.store_nbr WHERE T3.store_nbr = 9 AND T1.snowfall <> 0 AND T1.snowfall IS NOT NULL", "source_tables": ["sales_in_weather", "weather", "relation"]}, "evidence": "store 9 refers to store_nbr = 9; snowy day refers to snowfall < > 0 and snowfall is not null; item refers to item_nbr"}
{"sample_id": 8206, "db_id": "sales_in_weather", "final": {"question": "List out stations number and items sold by store 17.", "sql": "SELECT T1.station_nbr, T2.item_nbr FROM relation AS T1 INNER JOIN sales_in_weather AS T2 ON T1.store_nbr = T2.store_nbr WHERE T1.store_nbr = 17 GROUP BY T1.station_nbr, T2.item_nbr", "source_tables": ["sales_in_weather", "relation"]}, "evidence": "station number refers to station_nbr; store 17 refers to store_nbr = 17"}
{"sample_id": 8207, "db_id": "sales_in_weather", "final": {"question": "List out dates when haze is recorded in store 35.", "sql": "SELECT T1.'date' FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 35 AND T1.codesum LIKE '%' OR 'HZ' OR '%'", "source_tables": ["weather", "relation"]}, "evidence": "store 35 refers to store_nbr = 35; haze is recorded refers to codesum like '%'||'HZ'||'%'"}
{"sample_id": 8208, "db_id": "sales_in_weather", "final": {"question": "What is the sea level and average speed for store number 3 and store number 4?", "sql": "SELECT T1.sealevel, T1.avgspeed FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 3 OR T2.store_nbr = 4", "source_tables": ["weather", "relation"]}, "evidence": "store number 3 refers to store_nbr = 3; average speed refers to avgspeed; store number 4 refers to store_nbr = 4"}
{"sample_id": 8209, "db_id": "sales_in_weather", "final": {"question": "Which items from store 1 have the highest units sold during rainy day?", "sql": "SELECT T2.item_nbr FROM weather AS T1 INNER JOIN sales_in_weather AS T2 ON T1.'date' = T2.'date' INNER JOIN relation AS T3 ON T2.store_nbr = T3.store_nbr AND T1.station_nbr = T3.station_nbr WHERE T2.store_nbr = 1 AND T1.codesum LIKE '%' OR 'RA' OR '%' GROUP BY T2.item_nbr ORDER BY T2.units DESC LIMIT 1", "source_tables": ["sales_in_weather", "weather", "relation"]}, "evidence": "store 1 refers to store_nbr = 1; highest unit sold refers to Max(units); during rainy day refers to codesum like '%'||'RA'||'%'; item refers to item_nbr"}
{"sample_id": 8210, "db_id": "sales_in_weather", "final": {"question": "What is the ratio of the highest and lowest temperature in store 11?", "sql": "SELECT CAST((MAX(T1.tmax) - MIN(T1.tmin)) AS REAL) / MIN(T1.tmin) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 11", "source_tables": ["weather", "relation"]}, "evidence": "store 11 refers to store_nbr = 11; highest temperature refers to Max(tmax); lowest temperature refers to Min(tmin); ration = Divide (Max(tmax), Min(tmin))"}
{"sample_id": 8211, "db_id": "sales_in_weather", "final": {"question": "What was the difference of number of units sold in station number 1 and number 2 on year 2012?", "sql": "SELECT SUM(CASE WHEN T1.station_nbr = 1 THEN units ELSE 0 END) - SUM(CASE WHEN T1.station_nbr = 2 THEN units ELSE 0 END) FROM relation AS T1 INNER JOIN sales_in_weather AS T2 ON T1.store_nbr = T2.store_nbr WHERE T2.'date' LIKE '%2012%'", "source_tables": ["sales_in_weather", "relation"]}, "evidence": "station 1 refers to station_nbr = 1; station 2 refers to station_nbr = 2; on year 2012 refers to substring (date, 1, 4) = '2012'; difference = Subtract (Sum(units where station_nbr = 1), Sum(units where station_nbr = 2))"}
{"sample_id": 8212, "db_id": "sales_in_weather", "final": {"question": "What was the average temperature difference between store number 18 and 19 on 16 September 2022?", "sql": "SELECT SUM(CASE WHEN T1.store_nbr = 18 THEN T2.tavg ELSE 0 END) - SUM(CASE WHEN T1.store_nbr = 19 THEN T2.tavg ELSE 0 END) FROM relation AS T1 INNER JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.'date' = '2012-09-16'", "source_tables": ["weather", "relation"]}, "evidence": "store number 18 refers to store_nbr = 18; store number 19 refers to store_nbr = 19; on 16 September 2022 refers to date = '2022-09-16'; average temperature difference = Subtract(tavg where store_nbr = 18, tavg where store_nbr = 19)"}
{"sample_id": 8213, "db_id": "sales_in_weather", "final": {"question": "How many units are being sold for item 1 when the average temperature is 83?", "sql": "SELECT SUM(units) FROM weather AS T1 INNER JOIN sales_in_weather AS T2 ON T1.'date' = T2.'date' INNER JOIN relation AS T3 ON T2.store_nbr = T3.store_nbr WHERE T2.item_nbr = 1 AND T1.tavg = 83", "source_tables": ["sales_in_weather", "weather", "relation"]}, "evidence": "item 1 refers to item_nbr = 1; when the average temperature is 83 refers to tavg = 83"}
{"sample_id": 8214, "db_id": "sales_in_weather", "final": {"question": "What is the difference between the units sold for item 1 when the sunset was the earliest and the latest?", "sql": "SELECT ( SELECT SUM(T2.units) AS sumunit FROM weather AS T1 INNER JOIN sales_in_weather AS T2 ON T1.'date' = T2.'date' INNER JOIN relation AS T3 ON T2.store_nbr = T3.store_nbr WHERE T2.item_nbr = 5 AND sunset IS NOT NULL GROUP BY T1.sunset ORDER BY T1.sunset LIMIT 1 ) - ( SELECT SUM(T2.units) AS sumunit FROM weather AS T1 INNER JOIN sales_in_weather AS T2 ON T1.'date' = T2.'date' INNER JOIN relation AS T3 ON T2.store_nbr = T3.store_nbr WHERE T2.item_nbr = 5 AND sunset IS NOT NULL GROUP BY T1.sunset ORDER BY T1.sunset DESC LIMIT 1 )", "source_tables": ["sales_in_weather", "weather", "relation"]}, "evidence": "item 1 refers to item_nbr = 1; when the sunset earliest refers to Min(sunset); latest sunset refers to Max(sunset); difference unit sold refers to Subtract(Sum(units where Min(sunset)), Sum(units where Max(sunset)))"}
{"sample_id": 8215, "db_id": "sales_in_weather", "final": {"question": "What was the total unit sold for item 10 when the average temperature was below the median temperature?", "sql": "SELECT SUM(T5.units) FROM weather AS T4 INNER JOIN sales_in_weather AS T5 ON T4.'date' = T5.'date' INNER JOIN relation AS T6 ON T5.store_nbr = T6.store_nbr WHERE T5.item_nbr = 10 AND T4.tavg < ( SELECT AVG(T1.tavg) FROM weather AS T1 INNER JOIN sales_in_weather AS T2 ON T1.'date' = T2.'date' INNER JOIN relation AS T3 ON T2.store_nbr = T3.store_nbr WHERE T2.item_nbr = 10 )", "source_tables": ["sales_in_weather", "weather", "relation"]}, "evidence": "item 10 refers to item_nbr = 10; average temperature below median temperature refers to tavg < avg(tavg); total units refers to Sum(units)"}
{"sample_id": 8216, "db_id": "sales_in_weather", "final": {"question": "What was the average temperature differences during May 2012 for store number 6 and 7?", "sql": "SELECT ( SELECT CAST(SUM(tavg) AS REAL) / COUNT('date') FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr AND T1.'date' LIKE '%2012-05%' AND T2.store_nbr = 6 ) - ( SELECT CAST(SUM(tavg) AS REAL) / COUNT('date') FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.'date' LIKE '%2012-05%' AND T2.store_nbr = 7 )", "source_tables": ["weather", "relation"]}, "evidence": "during May 2012 refers to SUBSTR(date, 1, 7) = '2012-05'; store number 6 refers to store_nbr = 6; store number 7 refers to store_nbr = 7; average temperature difference = Subtract (Divide (Sum(tavg), Count (date) where the store_nbr = 6), Divide (Sum(tavg), Count(date) where store_nbr = 7))"}
{"sample_id": 8450, "db_id": "mondial_geo", "final": {"question": "Please name any three sovereign nations that have been governed by the republic since 1991.", "sql": "SELECT country FROM politics WHERE government = 'republic' AND STRFTIME('%Y', independence) >= '1991' AND country IN ( SELECT country FROM country ) ORDER BY independence LIMIT 3", "source_tables": ["country", "politics"]}, "evidence": "Nation refers to country"}
{"sample_id": 8451, "db_id": "mondial_geo", "final": {"question": "Which company falls under the category of an associated member? Please provide the organization's full name.", "sql": "SELECT NAME FROM organization WHERE country IN ( SELECT country FROM politics WHERE dependent != '' )", "source_tables": ["organization", "politics"]}, "evidence": ""}
{"sample_id": 8452, "db_id": "mondial_geo", "final": {"question": "Which nations have a boundary with the Kalahari Desert?", "sql": "SELECT T3.Name FROM desert AS T1 INNER JOIN geo_desert AS T2 ON T1.Name = T2.Desert INNER JOIN country AS T3 ON T3.Code = T2.Country WHERE T1.Name = 'Kalahari'", "source_tables": ["geo_desert", "country", "desert"]}, "evidence": "Nation refers to country"}
{"sample_id": 8453, "db_id": "mondial_geo", "final": {"question": "Which desert in Kazakhstan is the largest?", "sql": "SELECT T1.Name FROM desert AS T1 INNER JOIN geo_desert AS T2 ON T1.Name = T2.Desert INNER JOIN country AS T3 ON T3.Code = T2.Country WHERE T3.Name = 'Kazakstan' ORDER BY T1.Area DESC LIMIT 1", "source_tables": ["geo_desert", "country", "desert"]}, "evidence": ""}
{"sample_id": 8454, "db_id": "mondial_geo", "final": {"question": "What sea does the Baltic Sea converge with, and how deep is the Baltic Sea?", "sql": "SELECT T2.Sea2, T1.Depth FROM sea AS T1 INNER JOIN mergesWith AS T2 ON T1.Name = T2.Sea1 WHERE T1.Name = 'Baltic Sea'", "source_tables": ["sea", "mergeswith"]}, "evidence": "Coverage refers to mergesWith"}
{"sample_id": 8455, "db_id": "mondial_geo", "final": {"question": "Which constitutional monarchy nations saw the greatest growth in the number of organizations after 1907?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country INNER JOIN politics AS T3 ON T3.Country = T2.Country WHERE STRFTIME('%Y', T2.Established) > '1907' AND T3.Government = 'constitutional monarchy' GROUP BY T1.Name ORDER BY COUNT(DISTINCT T2.Name) DESC LIMIT 1", "source_tables": ["country", "organization", "politics"]}, "evidence": "Nation refers to country; Information of growth appears in the column Established"}
{"sample_id": 8456, "db_id": "mondial_geo", "final": {"question": "What kind of mountain is Ampato? Which province and nation does this mountain belong to?", "sql": "SELECT T1.Type, T3.Name, T4.Name FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN country AS T4 ON T3.Country = T4.Code WHERE T1.Name = 'Ampato'", "source_tables": ["country", "mountain", "province", "geo_mountain"]}, "evidence": "Nation refers to country"}
{"sample_id": 8457, "db_id": "mondial_geo", "final": {"question": "Please provide a list of every volcano mountain in the province of Ecuador.", "sql": "SELECT T1.Name FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province WHERE T3.Name = 'Ecuador' AND T1.Type = 'volcano'", "source_tables": ["mountain", "province", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8458, "db_id": "mondial_geo", "final": {"question": "What percentage of nations have achieved independence since 1993 and practice parliamentary democracy? Please include any three parliament-based democracies that attained independence after 1993.", "sql": "SELECT SUM(IIF(government = 'parliamentary democracy', 1, 0)) , CAST(SUM(IIF(government = 'parliamentary democracy', 1, 0)) AS REAL) * 100 / COUNT(*) FROM politics AS t1 WHERE STRFTIME('%Y', independence) >= '1993'", "source_tables": ["politics"]}, "evidence": "Percentage of rivers with lengths greater than 3,000 miles = [(Total number of rivers with lengths greater than 3,000 miles) / (Total number of rivers)] * 100%"}
{"sample_id": 8459, "db_id": "mondial_geo", "final": {"question": "What proportion of rivers have a length of more than 3,000 miles? Please provide the name of a Russian river that is more than 3,000 miles long.", "sql": "SELECT CAST(SUM(CASE WHEN T1.Length > 3000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Name) FROM river AS T1 INNER JOIN located AS T2 ON T1.Name = T2.River INNER JOIN country AS T3 ON T3.Code = T2.Country", "source_tables": ["river", "country", "located"]}, "evidence": "Proportion of rivers with lengths greater than 3,000 miles = [(Total number of rivers with lengths greater than 3,000 miles) / (Total number of rivers)] * 100%"}
{"sample_id": 8460, "db_id": "mondial_geo", "final": {"question": "What is the full name of ABEDA and when was it established?", "sql": "SELECT Name, Established FROM organization WHERE Abbreviation = 'ABEDA'", "source_tables": ["organization"]}, "evidence": ""}
{"sample_id": 8461, "db_id": "mondial_geo", "final": {"question": "Name all the organisations that were established from 1970 to 1980.", "sql": "SELECT Name FROM organization WHERE STRFTIME('%Y', Established) BETWEEN '1970' AND '1980'", "source_tables": ["organization"]}, "evidence": ""}
{"sample_id": 8462, "db_id": "mondial_geo", "final": {"question": "Provide a list of all organisations with headquarters in London?", "sql": "SELECT Name FROM organization WHERE City = 'London'", "source_tables": ["organization"]}, "evidence": "London is a city"}
{"sample_id": 8463, "db_id": "mondial_geo", "final": {"question": "For each organisations with headquarters in the USA, provide the its full name and the city where the headquarter is located at.", "sql": "SELECT Name, City FROM organization WHERE Country = 'USA'", "source_tables": ["organization"]}, "evidence": ""}
{"sample_id": 8464, "db_id": "mondial_geo", "final": {"question": "Name the first organisation established in the Paris city. State its abbreviation, full name and date of establishment.", "sql": "SELECT Abbreviation, Name, Established FROM organization WHERE City = 'Paris' ORDER BY Established ASC LIMIT 1", "source_tables": ["organization"]}, "evidence": "Paris is a city"}
{"sample_id": 8465, "db_id": "mondial_geo", "final": {"question": "List all the organisations that where its name contains 'United Nation'. State its full name and its headquarter city.", "sql": "SELECT Name, City FROM organization WHERE Name LIKE '%United Nation%'", "source_tables": ["organization"]}, "evidence": ""}
{"sample_id": 8466, "db_id": "mondial_geo", "final": {"question": "Which 2 countries' border span across the longest length? Provide the country's full name.", "sql": "SELECT T1.Name, T3.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 INNER JOIN country AS T3 ON T3.Code = T2.Country2 ORDER BY T2.Length DESC LIMIT 1", "source_tables": ["country", "borders"]}, "evidence": ""}
{"sample_id": 8467, "db_id": "mondial_geo", "final": {"question": "Name all countries in which have border with Bulgaria.", "sql": "SELECT T3.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 INNER JOIN country AS T3 ON T3.Code = T2.Country2 WHERE T1.Name = 'Bulgaria'", "source_tables": ["country", "borders"]}, "evidence": "Bulgaria is a country name"}
{"sample_id": 8468, "db_id": "mondial_geo", "final": {"question": "State all countries with border greater than 4,000. List the full country name.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 WHERE T2.Length > 4000", "source_tables": ["country", "borders"]}, "evidence": ""}
{"sample_id": 8469, "db_id": "mondial_geo", "final": {"question": "Among the country member of 'IOC' organization, which country has the most population?", "sql": "SELECT T2.Name FROM isMember AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Organization = 'IOC' ORDER BY T2.Population DESC LIMIT 1", "source_tables": ["country", "ismember"]}, "evidence": ""}
{"sample_id": 8470, "db_id": "mondial_geo", "final": {"question": "List all members and member type of the Islamic Development Bank.", "sql": "SELECT T2.Country, T2.Type FROM organization AS T1 INNER JOIN isMember AS T2 ON T1.Abbreviation = T2.Organization INNER JOIN country AS T3 ON T2.Country = T3.Code WHERE T1.Name = 'Islamic Development Bank'", "source_tables": ["country", "organization", "ismember"]}, "evidence": ""}
{"sample_id": 8471, "db_id": "mondial_geo", "final": {"question": "State the area and population of the country where Asia Pacific Economic Cooperation headquarter is located.", "sql": "SELECT T2.Name, T2.Population FROM organization AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Name = 'Asia Pacific Economic Cooperation'", "source_tables": ["country", "organization"]}, "evidence": "Asia Pacific Economic Cooperation is an organization name"}
{"sample_id": 8472, "db_id": "mondial_geo", "final": {"question": "What is the organization(s) that has 'National Society' as member type.", "sql": "SELECT T1.Name FROM organization AS T1 INNER JOIN isMember AS T2 ON T2.Country = T1.Country INNER JOIN country AS T3 ON T2.Country = T3.Code WHERE T2.Type = 'National Society'", "source_tables": ["country", "organization", "ismember"]}, "evidence": ""}
{"sample_id": 8473, "db_id": "mondial_geo", "final": {"question": "Which country has the least organization membership?", "sql": "SELECT country FROM organization WHERE country IN ( SELECT Code FROM country ) GROUP BY country ORDER BY COUNT(NAME) LIMIT 1", "source_tables": ["country", "organization"]}, "evidence": ""}
{"sample_id": 8474, "db_id": "mondial_geo", "final": {"question": "List all countries with 'Category III' membership in 'IFAD' organization. Please also provide the capital of the country.", "sql": "SELECT Name, Capital FROM country WHERE Code IN ( SELECT Country FROM isMember WHERE type = 'Category III' AND Organization = 'IFAD' )", "source_tables": ["country", "ismember"]}, "evidence": ""}
{"sample_id": 8475, "db_id": "mondial_geo", "final": {"question": "Name the organizations with the most members.", "sql": "SELECT T1.Name FROM organization AS T1 INNER JOIN isMember AS T2 ON T2.Country = T1.Country INNER JOIN country AS T3 ON T2.Country = T3.Code GROUP BY T1.Name ORDER BY COUNT(T3.Name) DESC LIMIT 1", "source_tables": ["country", "organization", "ismember"]}, "evidence": ""}
{"sample_id": 8476, "db_id": "mondial_geo", "final": {"question": "What is the capital of Australia? Is the capital a headquarter to any organization? Name the organization(s).", "sql": "SELECT T2.Capital, T1.Name FROM organization AS T1 INNER JOIN country AS T2 ON T1.City = T2.Capital WHERE T2.Name = 'Australia'", "source_tables": ["country", "organization"]}, "evidence": ""}
{"sample_id": 8477, "db_id": "mondial_geo", "final": {"question": "Among the organizations where headquarters are in the 'USA', what is the percentage of the them are in 'Washington'?", "sql": "SELECT CAST(SUM(CASE WHEN T2.City = 'Washington' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.City) FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country WHERE T2.Country = 'USA'", "source_tables": ["country", "organization"]}, "evidence": "percentage can be computed by [count(City = 'Washington') / count(all cities)] * 100%"}
{"sample_id": 8478, "db_id": "mondial_geo", "final": {"question": "What is the border length between 'USA' and 'MEX'", "sql": "SELECT Length FROM borders WHERE Country1 = 'MEX' AND Country2 = 'USA'", "source_tables": ["borders"]}, "evidence": ""}
{"sample_id": 8479, "db_id": "mondial_geo", "final": {"question": "What is the newest established organization where Singapore is a member of?", "sql": "SELECT T3.Name FROM country AS T1 INNER JOIN isMember AS T2 ON T1.Code = T2.Country INNER JOIN organization AS T3 ON T3.Country = T2.Country WHERE T1.Name = 'Singapore' ORDER BY T3.Established DESC LIMIT 1", "source_tables": ["country", "organization", "ismember"]}, "evidence": ""}
{"sample_id": 8480, "db_id": "mondial_geo", "final": {"question": "Provide the population of the city of the 'World Tourism Organization' headquarter.", "sql": "SELECT T2.Population FROM organization AS T1 INNER JOIN city AS T2 ON T1.City = T2.Name WHERE T1.Name = 'World Tourism Organization'", "source_tables": ["city", "organization"]}, "evidence": ""}
{"sample_id": 8481, "db_id": "mondial_geo", "final": {"question": "What is the height of mountain Dhaulagiri located and in which province is it located?", "sql": "SELECT T1.Height, T2.Province FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain WHERE T1.Name = 'Dhaulagiri'", "source_tables": ["mountain", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8482, "db_id": "mondial_geo", "final": {"question": "List all the name and height of all mountains in Alaska", "sql": "SELECT T1.Name, T1.Height FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain WHERE T2.Province = 'Alaska'", "source_tables": ["mountain", "geo_mountain"]}, "evidence": "Alaska is a province"}
{"sample_id": 8483, "db_id": "mondial_geo", "final": {"question": "What is the population of the country with the highest infant mortality rate?", "sql": "SELECT T1.Population FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country ORDER BY T2.Infant_Mortality DESC LIMIT 1", "source_tables": ["country", "population"]}, "evidence": ""}
{"sample_id": 8484, "db_id": "mondial_geo", "final": {"question": "State the inflation rate of Greece.", "sql": "SELECT T2.Inflation FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Greece'", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8485, "db_id": "mondial_geo", "final": {"question": "Find the government type for the country with the highest percentage GDP in Agriculture.", "sql": "SELECT T3.Government FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country INNER JOIN politics AS T3 ON T3.Country = T2.Country ORDER BY T2.Agriculture DESC LIMIT 1", "source_tables": ["economy", "country", "politics"]}, "evidence": ""}
{"sample_id": 8486, "db_id": "mondial_geo", "final": {"question": "List the full name its capital of all the countries with parliamentary democracy government.", "sql": "SELECT T1.Capital FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T2.Government = 'parliamentary democracy'", "source_tables": ["country", "politics"]}, "evidence": "Parliamentary democracy is a government form"}
{"sample_id": 8487, "db_id": "mondial_geo", "final": {"question": "Provide a full list of countries and its population with more than 70% of Chinese.", "sql": "SELECT T1.Name, T1.Population * T2.Percentage FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Chinese' AND T2.Percentage > 70", "source_tables": ["country", "ethnicgroup"]}, "evidence": ""}
{"sample_id": 8488, "db_id": "mondial_geo", "final": {"question": "In which city has the greatest population, what is its percentage to its country population?", "sql": "SELECT T3.Name, CAST(T3.Population AS REAL) * 100 / T1.Population FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Country = T2.Country ORDER BY T3.Population DESC LIMIT 1", "source_tables": ["country", "city", "province"]}, "evidence": ""}
{"sample_id": 8489, "db_id": "mondial_geo", "final": {"question": "When did the United States of America attained it's Independence?", "sql": "SELECT T1.Independence FROM politics AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'United States'", "source_tables": ["country", "politics"]}, "evidence": ""}
{"sample_id": 8490, "db_id": "mondial_geo", "final": {"question": "What is the peak height of the highest volcanic type of mountain? Give it's name.", "sql": "SELECT Height, Name FROM mountain WHERE Type = 'volcanic' ORDER BY Height DESC LIMIT 1", "source_tables": ["mountain"]}, "evidence": "peak means the highest"}
{"sample_id": 8491, "db_id": "mondial_geo", "final": {"question": "What is the name of the most recently founded organization in Saudi Arabia?", "sql": "SELECT T1.Name FROM organization AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Saudi Arabia' ORDER BY T1.Established DESC LIMIT 1", "source_tables": ["country", "organization"]}, "evidence": "Saudi Arabia is a country"}
{"sample_id": 8492, "db_id": "mondial_geo", "final": {"question": "Which country has the 5th highest infant mortality rate?", "sql": "SELECT T2.Name FROM population AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code ORDER BY T1.Infant_Mortality DESC LIMIT 4, 1", "source_tables": ["country", "population"]}, "evidence": ""}
{"sample_id": 8493, "db_id": "mondial_geo", "final": {"question": "Which country has the widest range of religious practices?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN religion AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY COUNT(DISTINCT T2.Name) DESC LIMIT 1", "source_tables": ["country", "religion"]}, "evidence": ""}
{"sample_id": 8494, "db_id": "mondial_geo", "final": {"question": "What river has the 17th-longest length overall? Specify it's length.", "sql": "SELECT Name, Length FROM river ORDER BY Length DESC LIMIT 16, 1", "source_tables": ["river"]}, "evidence": ""}
{"sample_id": 8495, "db_id": "mondial_geo", "final": {"question": "When did the country whose capital is Nouakchott attained it's independence?", "sql": "SELECT T2.Independence FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Capital = 'Nouakchott'", "source_tables": ["country", "politics"]}, "evidence": ""}
{"sample_id": 8496, "db_id": "mondial_geo", "final": {"question": "What is the name of the country with the smallest population, and what is its gross domestic product?", "sql": "SELECT T1.Name, T2.GDP FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T1.Population ASC LIMIT 1", "source_tables": ["economy", "country"]}, "evidence": "GDP refers to gross domestic product"}
{"sample_id": 8497, "db_id": "mondial_geo", "final": {"question": "Which Zaire region is home to the country's deepest lake's Name it and list its depth.", "sql": "SELECT T3.Name, T1.Name, T1.Depth FROM lake AS T1 INNER JOIN located AS T2 ON T1.Name = T2.Lake INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN country AS T4 ON T4.Code = T3.Country WHERE T4.Name = 'Zaire'", "source_tables": ["country", "province", "lake", "located"]}, "evidence": ""}
{"sample_id": 8498, "db_id": "mondial_geo", "final": {"question": "What is the maximal elevation of the summit of the shortest mountain that can be found in the island of Madagaskar? Indicate what type of mountain it is.", "sql": "SELECT T3.Height, T3.Type FROM island AS T1 INNER JOIN mountainOnIsland AS T2 ON T1.Name = T2.Island INNER JOIN mountain AS T3 ON T3.Name = T2.Mountain WHERE T1.Name = 'Madagaskar' ORDER BY T3.Height DESC LIMIT 1", "source_tables": ["mountain", "mountainonisland", "island"]}, "evidence": "The elevation of the summit refers to height"}
{"sample_id": 8499, "db_id": "mondial_geo", "final": {"question": "Which nation, with a population ranging from 60,000,000 to 99,000,000, has the greatest gross domestic product?", "sql": "SELECT T1.Name, T2.GDP FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Population BETWEEN 60000000 AND 90000000 ORDER BY T2.GDP DESC LIMIT 1", "source_tables": ["economy", "country"]}, "evidence": "GDP refers to gross domestic product; Nation and country are synonyms"}
{"sample_id": 8500, "db_id": "mondial_geo", "final": {"question": "Which Asian country gave its agricultural sector the largest share of its gross domestic product?", "sql": "SELECT T2.Country FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T2.Country = T3.Code INNER JOIN economy AS T4 ON T4.Country = T3.Code WHERE T1.Name = 'Asia' ORDER BY T4.Agriculture DESC LIMIT 1", "source_tables": ["economy", "country", "continent", "encompasses"]}, "evidence": "Gross domestic product = GDP; Largest share of GDP in agricultural sector was mentioned in economy.Agriculture"}
{"sample_id": 8501, "db_id": "mondial_geo", "final": {"question": "What form of governance does the least prosperous nation in the world have?", "sql": "SELECT T3.Government FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country INNER JOIN politics AS T3 ON T3.Country = T2.Country WHERE T2.GDP IS NOT NULL ORDER BY T2.GDP ASC LIMIT 1", "source_tables": ["economy", "country", "politics"]}, "evidence": "Nation and country are synonyms; Form of governance was mentioned in politics.Government; Least prosperous means lowest GDP"}
{"sample_id": 8502, "db_id": "mondial_geo", "final": {"question": "What year saw the greatest number of organizations created on the European continent?", "sql": "SELECT STRFTIME('%Y', T4.Established) FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T2.Country = T3.Code INNER JOIN organization AS T4 ON T4.Country = T3.Code WHERE T1.Name = 'Europe' GROUP BY STRFTIME('%Y', T4.Established) ORDER BY COUNT(T4.Name) DESC LIMIT 1", "source_tables": ["country", "organization", "continent", "encompasses"]}, "evidence": ""}
{"sample_id": 8503, "db_id": "mondial_geo", "final": {"question": "What other country does the most populated nation in the world share a border with and how long is the border between the two nations?", "sql": "SELECT T2.Country2, T2.Length FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 INNER JOIN country AS T3 ON T3.Code = T2.Country2 WHERE T1.Name = ( SELECT Name FROM country ORDER BY Population DESC LIMIT 1 )", "source_tables": ["country", "borders"]}, "evidence": "Nation and country are synonyms"}
{"sample_id": 8504, "db_id": "mondial_geo", "final": {"question": "What is the population density of the nation whose capital city is in the Distrito Federal province, and what portion of its gross domestic product is devoted to its industries?", "sql": "SELECT T1.Population / T1.Area, T2.Industry FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Province = 'Distrito Federal'", "source_tables": ["economy", "country"]}, "evidence": "ation and country are synonyms; Gross domestic product = GDP; Portion of GDP devoted to industries appears in economy.Industry; Population Density = Population / Area"}
{"sample_id": 8505, "db_id": "mondial_geo", "final": {"question": "Lists all governments with a parliamentary democracy that achieved their independence between 01/01/1950 and 12/31/1999.", "sql": "SELECT * FROM politics WHERE STRFTIME('%Y', Independence) BETWEEN '1950' AND '1999' AND Government = 'parliamentary democracy'", "source_tables": ["politics"]}, "evidence": "Inhabitants, synonymous with population"}
{"sample_id": 8506, "db_id": "mondial_geo", "final": {"question": "What percentage of countries became independent during the year 1960?", "sql": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Independence) = '1960' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Country) FROM politics", "source_tables": ["politics"]}, "evidence": "Percentage = count(countries independent 1960) / total num of countries"}
{"sample_id": 8507, "db_id": "mondial_geo", "final": {"question": "List all deserts that are not between latitudes 30 and 40.", "sql": "SELECT Name FROM desert WHERE Latitude < 30 OR Latitude > 40", "source_tables": ["desert"]}, "evidence": ""}
{"sample_id": 8508, "db_id": "mondial_geo", "final": {"question": "Indicate the coordinates of all the deserts whose area is in more than one country.", "sql": "SELECT T1.Latitude, T1.Longitude FROM desert AS T1 INNER JOIN geo_desert AS T2 ON T1.Name = T2.Desert GROUP BY T1.Name, T1.Latitude, T1.Longitude HAVING COUNT(T1.Name) > 1", "source_tables": ["geo_desert", "desert"]}, "evidence": "coordinates consists of Latitude, Longitude"}
{"sample_id": 8509, "db_id": "mondial_geo", "final": {"question": "What is the provincial capital of the province with a population of less than 80,000 that has the highest average population per area?", "sql": "SELECT CapProv FROM province WHERE Population < 80000 ORDER BY Population / Area DESC LIMIT 1", "source_tables": ["province"]}, "evidence": "Average population per area = population / area"}
{"sample_id": 8570, "db_id": "software_company", "final": {"question": "What is the income of female customers ages from 30 to 55 years old and has an occupation of machine-op-inspct?", "sql": "SELECT T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Female' AND T1.age >= 30 AND T1.age <= 55 AND T1.OCCUPATION = 'Machine-op-inspct'", "source_tables": ["demog", "customers"]}, "evidence": "female customers ages from 30 to 55 years old refer to SEX = 'Female' where age BETWEEN 30 AND 55; income refers to INCOME_K;"}
{"sample_id": 8571, "db_id": "software_company", "final": {"question": "List the marital status and response of female customers with an level of education of 8 and above.", "sql": "SELECT DISTINCT T1.MARITAL_STATUS, T2.RESPONSE FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.EDUCATIONNUM > 8 AND T1.SEX = 'Female'", "source_tables": ["mailings1_2", "customers"]}, "evidence": "female customers with an level of education of 8 and above refer to SEX = 'Female' where EDUCATIONNUM \u2265 8;"}
{"sample_id": 8572, "db_id": "software_company", "final": {"question": "What is the age of female customers within the number of inhabitants below 30?", "sql": "SELECT age FROM Customers WHERE GEOID IN ( SELECT GEOID FROM Demog WHERE INHABITANTS_K < 30 ) AND SEX = 'Female'", "source_tables": ["demog", "customers"]}, "evidence": "female customers within the number of inhabitants below 30 refer to SEX = 'Female' where INHABITANTS_K < 30;"}
{"sample_id": 8573, "db_id": "software_company", "final": {"question": "Among the divorced male customers, give the income and response of those who has an level of education of 6 and above.", "sql": "SELECT DISTINCT T3.INCOME_K, T2.RESPONSE FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.EDUCATIONNUM > 6 AND T1.SEX = 'Male' AND T1.MARITAL_STATUS = 'Divorced'", "source_tables": ["demog", "mailings1_2", "customers"]}, "evidence": "divorced male customers refer to SEX = 'Male' where MARITAL_STATUS = 'Divorced';"}
{"sample_id": 8574, "db_id": "software_company", "final": {"question": "What is the occupation and response of female customers within the number of inhabitants range of 20 to 25?", "sql": "SELECT DISTINCT T1.OCCUPATION, T2.RESPONSE FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.SEX = 'Female' AND T3.INHABITANTS_K >= 20 AND T3.INHABITANTS_K <= 25", "source_tables": ["demog", "mailings1_2", "customers"]}, "evidence": "female customers within the number of inhabitants range of 20 to 25 refer to SEX = 'Female' where INHABITANTS_K BETWEEN 20 AND 25;"}
{"sample_id": 8575, "db_id": "software_company", "final": {"question": "In male customers with an occupation handlers or cleaners, what is the percentage of customers with a true response?", "sql": "SELECT CAST(SUM(CASE WHEN T2.RESPONSE = 'true' THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.REFID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.OCCUPATION = 'Handlers-cleaners' AND T1.SEX = 'Male'", "source_tables": ["mailings1_2", "customers"]}, "evidence": "DIVIDE(COUNT(OCCUPATION = 'Handlers-cleaners', SEX = 'Male' and RESPONSE = 'true'), COUNT(OCCUPATION = 'Handlers-cleaners' and SEX = 'Male')) as percentage;"}
{"sample_id": 8576, "db_id": "software_company", "final": {"question": "List the income and number of inhabitants of customers with a reference ID greater than the 50% of average of number of false response?", "sql": "SELECT T2.INCOME_K, T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID INNER JOIN Mailings1_2 AS T3 ON T1.ID = T3.REFID WHERE T3.REFID > ( SELECT 0.5 * COUNT(CASE WHEN RESPONSE = 'false' THEN 1 ELSE NULL END) / COUNT(RESPONSE) FROM Mailings1_2 )", "source_tables": ["demog", "mailings1_2", "customers"]}, "evidence": "reference ID greater than the 50% of average of number of false response refers to REFID > DIVIDE(MULTIPLY(0.5, COUNT(RESPONSE = 'false')), COUNT(RESPONSE)); income refers to INCOME_K; number of inhabitants refer to INHABITANTS_K;"}
{"sample_id": 8577, "db_id": "software_company", "final": {"question": "What is the ratio of male and female among the age of teenager when the education is above 10?", "sql": "SELECT CAST(SUM(CASE WHEN SEX = 'Male' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN SEX = 'Female' THEN 1 ELSE 0 END) FROM Customers WHERE age BETWEEN 13 AND 19 AND EDUCATIONNUM > 10", "source_tables": ["customers"]}, "evidence": "ratio = DIVIDE(COUNT(SEX = 'Male' where age BETWEEN 13 AND 19 and EDUCATIONNUM > 10),COUNT(SEX = 'Female' where age BETWEEN 13 AND 19 and EDUCATIONNUM > 10));"}
{"sample_id": 8578, "db_id": "software_company", "final": {"question": "What is the geographic ID and total income per year when the average income is above 3300 dollar.", "sql": "SELECT GEOID, INHABITANTS_K * INCOME_K * 12 FROM Demog WHERE INCOME_K > 3300", "source_tables": ["demog"]}, "evidence": "total income per year refers to MULTIPLY(12, INHABITANTS_K, INCOME_K) where INCOME_K > 3300; geographic ID refers to GEOID;"}
{"sample_id": 8579, "db_id": "software_company", "final": {"question": "Point out the greater one between the number of actual responding and not responding to mailing.", "sql": "SELECT RESPONSE FROM Mailings1_2 GROUP BY RESPONSE ORDER BY COUNT(RESPONSE) DESC LIMIT 1", "source_tables": ["mailings1_2"]}, "evidence": "COUNT(REFID where RESPONSE = 'true')>or<COUNT(REFID where RESPONSE = 'false');"}
{"sample_id": 8580, "db_id": "software_company", "final": {"question": "Find out the yearly income of geographic ID when the customer is female and occupation as sales.", "sql": "SELECT T2.INHABITANTS_K * T2.INCOME_K * 12 FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Female' AND T1.OCCUPATION = 'Sales'", "source_tables": ["demog", "customers"]}, "evidence": "yearly income of geographic ID refers to GEOID where MULTIPLY(INHABITANTS_K, INCOME_K, 12); SEX = 'Female';"}
{"sample_id": 8581, "db_id": "software_company", "final": {"question": "Among the geographic ID which has 33.658K of inhabitants, describe the education, occupation and age of female widow.", "sql": "SELECT T1.EDUCATIONNUM, T1.OCCUPATION, T1.age FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INHABITANTS_K = 33.658 AND T1.SEX = 'Female' AND T1.MARITAL_STATUS = 'Widowed'", "source_tables": ["demog", "customers"]}, "evidence": "geographic ID which has 33.658K of inhabitants refers to GEOID where INHABITANTS_K = 33.658; education refers to EDUCATIONNUM; female widow refers to SEX = 'Female' where MARITAL_STATUS = 'Widowed';"}
{"sample_id": 8582, "db_id": "software_company", "final": {"question": "Find the response status to customer whose geographic ID of 134.", "sql": "SELECT T2.RESPONSE FROM Customers AS T1 INNER JOIN mailings3 AS T2 ON T1.ID = T2.REFID WHERE T1.GEOID = 134", "source_tables": ["mailings3", "customers"]}, "evidence": "GEOID = 134;"}
{"sample_id": 8583, "db_id": "software_company", "final": {"question": "Describe the average income per month and yearly income of the geographic ID in which customer of ID \"209556\" and \"290135\".", "sql": "SELECT T2.INCOME_K, T2.INHABITANTS_K * T2.INCOME_K * 12 FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.ID = 209556 OR T1.ID = 290135", "source_tables": ["demog", "customers"]}, "evidence": "the average income per month refers to INCOME_K; yearly income of geographic ID refers to GEOID where MULTIPLY(INHABITANTS_K, INCOME_K, 12);"}
{"sample_id": 8584, "db_id": "software_company", "final": {"question": "Among the reference ID of under 10 who got response by marketing department, compare their education status.", "sql": "SELECT T1.EDUCATIONNUM FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T2.REFID < 10 AND T2.RESPONSE = 'true'", "source_tables": ["mailings1_2", "customers"]}, "evidence": "reference ID of under 10 refers to REFID < 10; got response refers to RESPONSE = 'true'; education status refers to EDUCATIONNUM;"}
{"sample_id": 8734, "db_id": "chicago_crime", "final": {"question": "What are the neighborhoods that are located in the North Center community area?", "sql": "SELECT T2.neighborhood_name FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.community_area_name = 'North Center'", "source_tables": ["community_area", "neighborhood"]}, "evidence": "\"North Center\" is the community_area_name; neighborhoods refers to neighborhood_name"}
{"sample_id": 8735, "db_id": "chicago_crime", "final": {"question": "How many neighborhoods can be found in the Forest Glen community area?", "sql": "SELECT SUM(CASE WHEN T2.community_area_name = 'Forest Glen' THEN 1 ELSE 0 END) FROM Neighborhood AS T1 INNER JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no", "source_tables": ["community_area", "neighborhood"]}, "evidence": "\"Forest Glen\" is the community_area_name; neighborhoods refers to neighborhood_name"}
{"sample_id": 8736, "db_id": "chicago_crime", "final": {"question": "What is the total population of the neighborhoods Avondale Gardens, Irving Park, Kilbourn Park, Merchant Park, Old Irving Park, and The Villa?", "sql": "SELECT SUM(T2.population) AS sum FROM Neighborhood AS T1 INNER JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.neighborhood_name = 'Avondale Gardens' OR T1.neighborhood_name = 'Irving Park' OR T1.neighborhood_name = 'Kilbourn Park' OR T1.neighborhood_name = 'Merchant Park' OR T1.neighborhood_name = 'Old Irving Park' OR T1.neighborhood_name = 'The Villa'", "source_tables": ["community_area", "neighborhood"]}, "evidence": "\"Avoladale Gardens\", \"Irving Park\", \"Kilbourn Park\", \"Merchant Park\", \"Old Irving Park\", \"The Villa\" are neighborhood_name; total population refers to Sum(Population)"}
{"sample_id": 8737, "db_id": "chicago_crime", "final": {"question": "How many crime cases have been classified as \"Weapons Violation\" by the FBI?", "sql": "SELECT SUM(CASE WHEN T2.title = 'Weapons Violation' THEN 1 ELSE 0 END) FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no", "source_tables": ["fbi_code", "crime"]}, "evidence": "\"Weapons Violation\" is the title of crime; crime cases refers to report_no;"}
{"sample_id": 8738, "db_id": "chicago_crime", "final": {"question": "Please list any three criminal sexual assault cases against persons where the criminals have been arrested.", "sql": "SELECT T2.case_number FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.title = 'Criminal Sexual Assault' AND T2.arrest = 'TRUE' AND T1.crime_against = 'Persons' LIMIT 3", "source_tables": ["fbi_code", "crime"]}, "evidence": "\"Criminal Sexual Assault\" is the title of crime; against person refers to crime_against = 'Persons'; criminals have been arrested refers to arrest = 'TRUE'; cases refers to case_number"}
{"sample_id": 8739, "db_id": "chicago_crime", "final": {"question": "Please state the district name where incident number JB106545 took place.", "sql": "SELECT T1.case_number FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T2.title = 'Criminal Sexual Assault' AND T2.crime_against = 'Persons' AND T1.arrest = 'TRUE' LIMIT 3", "source_tables": ["fbi_code", "crime"]}, "evidence": "incident number JB106545 refers to case_number = 'JB106545'"}
{"sample_id": 8740, "db_id": "chicago_crime", "final": {"question": "What is the general description for case number JB106010?", "sql": "SELECT T1.primary_description FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.case_number = 'JB106010'", "source_tables": ["iucr", "crime"]}, "evidence": "general description refers to primary_description"}
{"sample_id": 8741, "db_id": "chicago_crime", "final": {"question": "Please name three communities that experience the fraud incident.", "sql": "SELECT T3.community_area_name FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T1.title = 'Criminal Sexual Assault' LIMIT 3", "source_tables": ["community_area", "fbi_code", "crime"]}, "evidence": "communities refers to community_area_name; 'Fraud Incident' is the title of crime"}
{"sample_id": 8742, "db_id": "chicago_crime", "final": {"question": "What was the major type of crime that happened in the Rogers Park community area?", "sql": "SELECT T1.fbi_code_no, T1.title FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T3.community_area_name = 'Rogers Park' GROUP BY T1.fbi_code_no, T1.title", "source_tables": ["community_area", "fbi_code", "crime"]}, "evidence": "\"Rogers Park\" is the community_area_name; major type of crime refers to title"}
{"sample_id": 8743, "db_id": "chicago_crime", "final": {"question": "At which district did the multiple homicide case number JB120039 occurred?", "sql": "SELECT T1.district_no, T1.district_name FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.case_number = 'JB120039' GROUP BY T1.district_no, T1.district_name", "source_tables": ["district", "crime"]}, "evidence": "multiple homicide refers to Count(case_number) > 1; district refers to district_name"}
{"sample_id": 8744, "db_id": "chicago_crime", "final": {"question": "What is the percentage of crime cases that have been classified as \"drug abuse\" by the FBI and happened on the street?", "sql": "SELECT CAST(SUM(CASE WHEN T2.title = 'Drug Abuse' AND T1.location_description = 'STREET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.fbi_code_no) FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no", "source_tables": ["fbi_code", "crime"]}, "evidence": "\"Drug Abuse\" is the title of crime; happened on the street refers to location_description = 'STREET';\u00a0 percentage = Divide (Count(fbi_code_no where location_description = 'STREET'), Count(fbi_code_no)) * 100"}
{"sample_id": 8745, "db_id": "chicago_crime", "final": {"question": "Provide the ward number with the highest population.", "sql": "SELECT ward_no FROM Ward ORDER BY Population DESC LIMIT 1", "source_tables": ["ward"]}, "evidence": "highest population refers to Max(Population); ward number refers to ward_no"}
{"sample_id": 8746, "db_id": "chicago_crime", "final": {"question": "What is the beat and location description of the case JB112212?", "sql": "SELECT beat, location_description FROM Crime WHERE case_number = 'JB112212'", "source_tables": ["crime"]}, "evidence": "case JB112212 refers to case_number = 'JB112212'"}
{"sample_id": 8747, "db_id": "chicago_crime", "final": {"question": "Give the FBI code for the crime described by \"The killing of one human being by another.\"", "sql": "SELECT fbi_code_no FROM FBI_Code WHERE description = 'The killing of one human being by another.'", "source_tables": ["fbi_code"]}, "evidence": "\"The killing of one human being by another\" is the description; FBI code refers to fbi_code_no"}
{"sample_id": 8748, "db_id": "chicago_crime", "final": {"question": "Provide at least 5 ward office addresses associated with the crimes that happened in the community of Montclare.", "sql": "SELECT T3.ward_office_address FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN Ward AS T3 ON T2.ward_no = T3.ward_no WHERE T1.community_area_name = 'Montclare' GROUP BY T3.ward_office_address LIMIT 5", "source_tables": ["community_area", "crime", "ward"]}, "evidence": "\"Montclare\" is the community_area_name"}
{"sample_id": 8749, "db_id": "chicago_crime", "final": {"question": "List down the district's commander associated with the crime that happened at the yard and has a beat of 532.", "sql": "SELECT T2.address, T2.commander FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.location_description = 'YARD' AND T1.beat = 532", "source_tables": ["district", "crime"]}, "evidence": "beat of 532 refers to beat = 532; happened in the Yard refers to location_description = 'YARD'; district commander refers to commander"}
{"sample_id": 8750, "db_id": "chicago_crime", "final": {"question": "What is the neighborhood name in the community area of Lake View?", "sql": "SELECT T2.neighborhood_name FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.community_area_name = 'Lake View'", "source_tables": ["community_area", "neighborhood"]}, "evidence": "\"Lake View\" is the community_area_name"}
{"sample_id": 8751, "db_id": "chicago_crime", "final": {"question": "Name the neighborhood of the community area in crime with report number 23843?", "sql": "SELECT T3.neighborhood_name FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN Neighborhood AS T3 ON T2.community_area_no = T3.community_area_no WHERE T2.report_no = 23778", "source_tables": ["community_area", "neighborhood", "crime"]}, "evidence": "neighborhood refers to neighborhood_name; '23778' is the report_no"}
{"sample_id": 8752, "db_id": "chicago_crime", "final": {"question": "What is the FBI description of the crime for report number 23778?", "sql": "SELECT T1.description FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T2.report_no = 23843", "source_tables": ["fbi_code", "crime"]}, "evidence": "\"23778\" is the report_no; FBI description refers to description"}
{"sample_id": 8753, "db_id": "chicago_crime", "final": {"question": "List down the report number of crimes associated with the district commander named Jill M. Stevens.", "sql": "SELECT SUM(CASE WHEN T1.commander = 'Jill M. Stevens' THEN 1 ELSE 0 END) FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no", "source_tables": ["district", "crime"]}, "evidence": "report number refers report_no; 'Jill M. Stevens\" is the commander"}
{"sample_id": 8754, "db_id": "chicago_crime", "final": {"question": "Among the crimes happened in the neighborhood called \"Avalon Park\", what is the percentage of crimes that happened inside the house?", "sql": "SELECT CAST(SUM(CASE WHEN T2.location_description = 'HOUSE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.location_description) AS persent FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN Neighborhood AS T3 ON T2.community_area_no = T3.community_area_no WHERE T3.neighborhood_name = 'Avalon Park'", "source_tables": ["community_area", "neighborhood", "crime"]}, "evidence": "\"Avalon Park\" is the neghborhood_name; happened inside the house refers to location_description = 'HOUSE'; percentage = Divide (Count(location_description = 'HOUSE'), Count(location_description)) * 100"}
{"sample_id": 8755, "db_id": "chicago_crime", "final": {"question": "What is the full name of the alderman of ward no.21?", "sql": "SELECT alderman_first_name, alderman_last_name, alderman_name_suffix FROM Ward WHERE ward_no = 21", "source_tables": ["ward"]}, "evidence": "full name of alderman refers to alderman_first_name, alderman_last_name, alderman_name_suffix"}
{"sample_id": 8756, "db_id": "chicago_crime", "final": {"question": "What is the ward ID of the most crowded ward?", "sql": "SELECT ward_no FROM Ward ORDER BY Population DESC LIMIT 1", "source_tables": ["ward"]}, "evidence": "most crowded ward refers to Max(Population)"}
{"sample_id": 8757, "db_id": "chicago_crime", "final": {"question": "How many incidents have the general description of \"ASSAULT\" in the IUCR classification?", "sql": "SELECT COUNT(*) FROM IUCR WHERE primary_description = 'ASSAULT'", "source_tables": ["iucr"]}, "evidence": "general description refers to primary_description; 'ASSAULT' is the primary_description; incidents refers to iucr_no"}
{"sample_id": 8758, "db_id": "chicago_crime", "final": {"question": "How many incidents are considered \"severe\" in the IUCR classification?", "sql": "SELECT COUNT(*) FROM IUCR WHERE index_code = 'I'", "source_tables": ["iucr"]}, "evidence": "severe refers to index_code = 'I'; incidents refers to iucr_no"}
{"sample_id": 8759, "db_id": "chicago_crime", "final": {"question": "Among the crimes with no arrest made, how many of them happened in the ward represented by alderman Pat Dowell?", "sql": "SELECT SUM(CASE WHEN T1.alderman_last_name = 'Dowell' THEN 1 ELSE 0 END) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.arrest = 'FALSE' AND T1.alderman_first_name = 'Pat'", "source_tables": ["crime", "ward"]}, "evidence": "no arrest has been made refers to arrest = 'FALSE'"}
{"sample_id": 8760, "db_id": "chicago_crime", "final": {"question": "Which alderman represents the ward with the most number of crimes in January, 2018? Please give his or her full name.", "sql": "SELECT T1.ward_no, T1.alderman_first_name, T1.alderman_last_name, T1.alderman_name_suffix FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE SUBSTR(T2.date, 1, 1) = '1' AND SUBSTR(T2.date, 5, 4) = '2018' GROUP BY T1.ward_no ORDER BY COUNT(T1.ward_no) DESC LIMIT 1", "source_tables": ["crime", "ward"]}, "evidence": "in January 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'; ward with the most number of crime refers to Max (Count(ward_no)); full name refers to alderman_first_name, alderman_last_name, alderman_name_suffix"}
{"sample_id": 8761, "db_id": "chicago_crime", "final": {"question": "Among the crimes in the ward with the most population, how many of them are cases of domestic violence?", "sql": "SELECT COUNT(T1.ward_no) AS num FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.domestic = 'TRUE' ORDER BY T1.Population = ( SELECT Population FROM Ward ORDER BY Population DESC LIMIT 1 )", "source_tables": ["crime", "ward"]}, "evidence": "most population refers to Max(Population); domestic violence refers to domestic = 'TRUE'"}
{"sample_id": 8762, "db_id": "chicago_crime", "final": {"question": "Please list the location coordinates of all the incidents that had happened in the ward represented by alderman Pat Dowell.", "sql": "SELECT T2.latitude, T2.longitude FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T1.alderman_first_name = 'Pat' AND T1.alderman_last_name = 'Dowell' AND T2.latitude IS NOT NULL AND T2.longitude IS NOT NULL", "source_tables": ["crime", "ward"]}, "evidence": "location coordinates refers to latitude, longitude"}
{"sample_id": 8763, "db_id": "chicago_crime", "final": {"question": "The ward represented by which alderman had more incidents in January, 2018, Pat Dowell or Sophia King?", "sql": "SELECT T1.alderman_first_name, T1.alderman_last_name, COUNT(T1.ward_no) AS num FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE (SUBSTR(T2.date, 1, 1) = '1' AND SUBSTR(T2.date, 5, 4) = '2018' AND T1.alderman_first_name = 'Pat' AND T1.alderman_last_name = 'Dowell') OR (T1.alderman_first_name = 'Sophia' AND T1.alderman_last_name = 'King') GROUP BY T1.ward_no", "source_tables": ["crime", "ward"]}, "evidence": "January, 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'; had more incidents refers to Max(Count(ward_no))"}
{"sample_id": 8764, "db_id": "chicago_crime", "final": {"question": "Please list the case numbers of all the incidents with the generic description of \"BATTERY\" in the IUCR classification.", "sql": "SELECT T2.case_number FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.primary_description = 'BATTERY'", "source_tables": ["iucr", "crime"]}, "evidence": "general description refers to primary_description; 'BATTERY' is the primary_description"}
{"sample_id": 8765, "db_id": "chicago_crime", "final": {"question": "Among the incidents with the generic description of \"BATTERY\" in the IUCR classification, how many of them do not have arrests made?", "sql": "SELECT SUM(CASE WHEN T2.arrest = 'FALSE' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.primary_description = 'BATTERY'", "source_tables": ["iucr", "crime"]}, "evidence": "general description refers to primary_description; 'BATTERY' is the primary_description; do not have arrest made refers to arrest = 'FALSE'"}
{"sample_id": 8766, "db_id": "chicago_crime", "final": {"question": "Please list the case numbers of all the crimes whose short description of the kind of crime is \"Homicide 1st & 2nd Degree\" in the FBI classification.", "sql": "SELECT T2.case_number FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.title = 'Homicide 1st & 2nd Degree'", "source_tables": ["fbi_code", "crime"]}, "evidence": "\"Homicide 1st & 2nd Degree\" is the title"}
{"sample_id": 8767, "db_id": "chicago_crime", "final": {"question": "Among the incidents in January, 2018, how many of them were stated \"against Property\" in the FBI classification?", "sql": "SELECT SUM(CASE WHEN SUBSTR(T2.date, 5, 4) = '2018' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.crime_against = 'Property' AND SUBSTR(T2.date, 1, 1) = '1'", "source_tables": ["fbi_code", "crime"]}, "evidence": "in January 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'; against property refers to crime_against = 'Property'"}
{"sample_id": 8768, "db_id": "chicago_crime", "final": {"question": "District commander Robert A. Rubio was responsible for how many incidents in January, 2018?", "sql": "SELECT SUM(CASE WHEN SUBSTR(T2.date, 5, 4) = '2018' THEN 1 ELSE 0 END) FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T1.commander = 'Robert A. Rubio' AND SUBSTR(T2.date, 1, 1) = '1'", "source_tables": ["district", "crime"]}, "evidence": "in January 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'"}
{"sample_id": 8769, "db_id": "chicago_crime", "final": {"question": "Which district commander was responsible for more incidents in January, 2018, Robert A. Rubio or Glenn White?", "sql": "SELECT T1.commander FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T1.commander IN ('Robert A. Rubio', 'Glenn White') AND SUBSTR(T2.date, 1, 1) = '1' AND SUBSTR(T2.date, 5, 4) = '2018' GROUP BY T1.commander", "source_tables": ["district", "crime"]}, "evidence": "in January 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'; 'Robert A. Rubio' and 'Glenn White' are both commander; responsible for more incident refers to Max(count(ward_no))"}
{"sample_id": 8770, "db_id": "chicago_crime", "final": {"question": "Please list the blocks where all the incidents in the district commanded by Robert A. Rubio took place.", "sql": "SELECT T2.block FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T1.commander = 'Robert A. Rubio'", "source_tables": ["district", "crime"]}, "evidence": "\"Robert A. Rubio\" is the commander"}
{"sample_id": 8771, "db_id": "chicago_crime", "final": {"question": "What is the average number of incidents per month in 2018 in the ward with the most population?", "sql": "SELECT COUNT(T1.ward_no) / 12 AS average FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.date LIKE '%2018%' AND T1.Population = ( SELECT MAX(T1.Population) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.date LIKE '%2018%' )", "source_tables": ["crime", "ward"]}, "evidence": "in 2018 refers to date like '%2018%'; ward with most population refers to Max(Population); average number of incident per month refers to Divide(Count(ward_no), 12)"}
{"sample_id": 8772, "db_id": "chicago_crime", "final": {"question": "Among all the incidents with no arrest made, what is the percentage of them having a generic description of \"BATTERY\" in the IUCR classification?", "sql": "SELECT CAST(SUM(CASE WHEN T1.primary_description = 'BATTERY' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.arrest = 'FALSE'", "source_tables": ["iucr", "crime"]}, "evidence": "incident with no arrest made refers to arrest = 'FALSE'; general description refers to primary_description; \"BATTERY\" is the primary_description; percentage = Divide (Count(iucr_no where primary_description = 'BATTERY'), Count(iucr_no)) * 100"}
{"sample_id": 8838, "db_id": "food_inspection", "final": {"question": "How many of the businesses are located at 1825 POST St #223, San Francisco?", "sql": "SELECT COUNT(business_id) FROM businesses WHERE address = '1825 POST St #223' AND city = 'SAN FRANCISCO'", "source_tables": ["businesses"]}, "evidence": "1825 POST St #223 refers to address = '1825 POST St #223', San Francisco is the name of the city;"}
{"sample_id": 8839, "db_id": "food_inspection", "final": {"question": "List down the owner's name with a zip code 94104.", "sql": "SELECT DISTINCT owner_name FROM businesses WHERE owner_zip = '94104'", "source_tables": ["businesses"]}, "evidence": "zip code 94104 refers to owner_zip = '94104';"}
{"sample_id": 8840, "db_id": "food_inspection", "final": {"question": "What is the total number of businesses with a tax code H25?", "sql": "SELECT COUNT(tax_code) FROM businesses WHERE tax_code = 'H25'", "source_tables": ["businesses"]}, "evidence": ""}
{"sample_id": 8841, "db_id": "food_inspection", "final": {"question": "In the violations in 2014, how many of them have a low risk category?", "sql": "SELECT COUNT(risk_category) FROM violations WHERE STRFTIME('%Y', 'date') = '2014' AND risk_category = 'Low Risk'", "source_tables": ["violations"]}, "evidence": "in 2014 refers to year(date) = 2014; risk_category = 'Low Risk';"}
{"sample_id": 8842, "db_id": "food_inspection", "final": {"question": "Give the business ID and risk category of the business owned by San Francisco Madeleine, Inc.", "sql": "SELECT DISTINCT T2.business_id, T1.risk_category FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.owner_name = 'San Francisco Madeleine, Inc.'", "source_tables": ["businesses", "violations"]}, "evidence": "business owned by San Francisco Madeleine, Inc. refers to business_id where owner_name = 'San Francisco Madeleine, Inc.';"}
{"sample_id": 8843, "db_id": "food_inspection", "final": {"question": "List owner's name of businesses with a 100 score.", "sql": "SELECT DISTINCT T2.owner_name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = 100", "source_tables": ["businesses", "inspections"]}, "evidence": "owner's name of businesses refers to owner_name;"}
{"sample_id": 8844, "db_id": "food_inspection", "final": {"question": "Among the businesses within the postal code 94117, what is total number of businesses with a high risk category?", "sql": "SELECT COUNT(DISTINCT T2.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.postal_code = 94117 AND T1.risk_category = 'High Risk'", "source_tables": ["businesses", "violations"]}, "evidence": "businesses with a high risk category refer to business_id where risk_category = 'High Risk';"}
{"sample_id": 8845, "db_id": "food_inspection", "final": {"question": "Among the businesses with score that ranges from 70 to 80, list their violation type ID and risk category.", "sql": "SELECT DISTINCT T1.violation_type_id, T1.risk_category FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id INNER JOIN inspections AS T3 ON T2.business_id = T3.business_id WHERE T3.score BETWEEN 70 AND 80", "source_tables": ["businesses", "violations", "inspections"]}, "evidence": "businesses with score that ranges from 70 to 80 refer to business_id where score between 80 and 90;"}
{"sample_id": 8846, "db_id": "food_inspection", "final": {"question": "List the tax code and inspection type of the business named \"Rue Lepic\".", "sql": "SELECT DISTINCT T3.tax_code, T2.type FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN businesses AS T3 ON T2.business_id = T3.business_id WHERE T3.name = 'Rue Lepic'", "source_tables": ["businesses", "violations", "inspections"]}, "evidence": "\"Rue Lepic\" is the name of the business;"}
{"sample_id": 8847, "db_id": "food_inspection", "final": {"question": "In businesses that violates 103157 on May 27, 2016 , what is the name of the business that has an unscheduled inspection?", "sql": "SELECT DISTINCT T3.name FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN businesses AS T3 ON T2.business_id = T3.business_id WHERE T1.'date' = '2016-05-27' AND T1.violation_type_id = 103157 AND T2.type = 'Routine - Unscheduled'", "source_tables": ["businesses", "violations", "inspections"]}, "evidence": "businesses that violates 103157 refer to business_id where violation_type_id = 103157; date = '2016-05-27'; unscheduled inspection refers to type = 'Routine - Unscheduled';"}
{"sample_id": 8848, "db_id": "food_inspection", "final": {"question": "Who is the owner of the business that has a high risk violation of 103109 and described as unclean or unsanitary food contact surfaces?", "sql": "SELECT DISTINCT T2.owner_name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' AND T1.violation_type_id = 103109 AND T1.description = 'Unclean or unsanitary food contact surfaces'", "source_tables": ["businesses", "violations"]}, "evidence": "owner refers to owner_name; high risk violation of 103109 and described as unclean or unsanitary food contact surfaces refers to risk_category = 'High Risk' where violation_type_id = 103109 and description = 'Unclean or unsanitary food contact surfaces';"}
{"sample_id": 8849, "db_id": "food_inspection", "final": {"question": "Among the owners from Cameron Park, what is the business name of the business with a score of 100?", "sql": "SELECT DISTINCT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.owner_city = 'Cameron Park' AND T1.score = 100", "source_tables": ["businesses", "inspections"]}, "evidence": "Cameron Park is a name of city;"}
{"sample_id": 8850, "db_id": "food_inspection", "final": {"question": "List the violation type ID of business with business ID from 30 to 50 and located at 747 IRVING St, San Francisco.", "sql": "SELECT DISTINCT T1.violation_type_id FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.business_id BETWEEN 30 AND 50 AND T2.address = '747 IRVING St' AND T2.city = 'San Francisco'", "source_tables": ["businesses", "violations"]}, "evidence": "business ID from 30 to 50 refers to business_id between 30 and 50; address = '747 IRVING St'; city = 'San Francisco';"}
{"sample_id": 8851, "db_id": "food_inspection", "final": {"question": "What is the owner's name of the of the business that violates 103156 on June 12, 2014?", "sql": "SELECT DISTINCT T2.owner_name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.violation_type_id = 103156 AND T1.'date' = '2014-06-12'", "source_tables": ["businesses", "violations"]}, "evidence": "business that violates 103156 on June 12, 2014 refers to business_id where violation_type_id = 103156 and date = '2014-06-12';"}
{"sample_id": 8852, "db_id": "food_inspection", "final": {"question": "In businesses with an owner address 500 California St, 2nd Floor of Silicon Valley, list the type of inspection of the business with the highest score.", "sql": "SELECT T1.type FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.owner_address = '500 California St, 2nd Floor' AND T2.owner_city = 'SAN FRANCISCO' ORDER BY T1.score DESC LIMIT 1", "source_tables": ["businesses", "inspections"]}, "evidence": "the highest score MAX(score); Silicon Valley is located in 'SAN FRANCISCO';"}
{"sample_id": 8853, "db_id": "food_inspection", "final": {"question": "Among the violations in 2016, how many of them have unscheduled inspections?", "sql": "SELECT COUNT(T2.business_id) FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.'date') = '2016' AND T2.type = 'Routine - Unscheduled'", "source_tables": ["violations", "inspections"]}, "evidence": "unscheduled inspections refer to type = 'Routine - Unschedule'; year(date) = 2016;"}
{"sample_id": 8854, "db_id": "food_inspection", "final": {"question": "List the business' name and risk category of businesses with a score greater than the 80% of average score of all businesses.", "sql": "SELECT DISTINCT T1.name, T3.risk_category FROM businesses AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN violations AS T3 ON T1.business_id = T3.business_id WHERE T2.score > 0.8 * ( SELECT AVG(score) FROM inspections )", "source_tables": ["businesses", "inspections", "violations"]}, "evidence": "score greater than the 80% of average score of all businesses refers to score > MULTIPLY(0.8, avg(score) from inspections);"}
{"sample_id": 8855, "db_id": "food_inspection", "final": {"question": "In businesses with a score lower than 95 and located around the postal code of 94110, what is the percentage of businesses with a risk category of low risk?", "sql": "SELECT CAST(SUM(CASE WHEN T1.risk_category = 'Low Risk' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.risk_category) FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN businesses AS T3 ON T2.business_id = T3.business_id WHERE T2.score < 95 AND T3.postal_code = 94110", "source_tables": ["businesses", "violations", "inspections"]}, "evidence": "DIVIDE(COUNT(business_id where risk_category = 'Low Risk', score < 95 and postal_code = 94110), COUNT(business_id where score < 95 and postal_code = 94110)) as percentage;"}
{"sample_id": 8910, "db_id": "cookbook", "final": {"question": "Among the recipes with sea bass, how many percent of recipes can serve 10 people and above?", "sql": "SELECT CAST(SUM(CASE WHEN T1.servings >= 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.name = 'sea bass steak'", "source_tables": ["recipe", "ingredient", "quantity"]}, "evidence": "sea bass is a name of an ingredient; can serve 10 people and above refers to servings > = 10; calculation = MULTIPLY(DIVIDE(COUNT(servings > = 10 THEN recipe_id)), COUNT(recipe_id), 100)"}
{"sample_id": 8911, "db_id": "cookbook", "final": {"question": "How much fat does the Raspberry Chiffon Pie have?", "sql": "SELECT T2.total_fat FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie'", "source_tables": ["recipe", "nutrition"]}, "evidence": "Raspberry Chiffon Pie refers to title"}
{"sample_id": 8912, "db_id": "cookbook", "final": {"question": "What is the percentage calories protein of Raspberry Chiffon Pie?", "sql": "SELECT pcnt_cal_prot FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie'", "source_tables": ["recipe", "nutrition"]}, "evidence": "Raspberry Chiffon Pie refers title; percentage calories protein refers to pcnt_cal_prot"}
{"sample_id": 8913, "db_id": "cookbook", "final": {"question": "How many ingredients are required to make the Raspberry Chiffon Pie?", "sql": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Raspberry Chiffon Pie'", "source_tables": ["recipe", "ingredient", "quantity"]}, "evidence": "Raspberry Chiffon Pie refer to title"}
{"sample_id": 8914, "db_id": "cookbook", "final": {"question": "List the names of alcohol free recipes.", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.alcohol = 0", "source_tables": ["recipe", "nutrition"]}, "evidence": "alcohol free refers to alcohol = 0"}
{"sample_id": 8915, "db_id": "cookbook", "final": {"question": "What is the average vitamin C amount of all cakes?", "sql": "SELECT AVG(T1.vitamin_c) FROM Nutrition AS T1 INNER JOIN Recipe AS T2 ON T2.recipe_id = T1.recipe_id WHERE T2.title LIKE '%cake%'", "source_tables": ["recipe", "nutrition"]}, "evidence": "average vitamin C refers to AVG(vitamin_c); all cakes refers to title LIKE '%cake%'"}
{"sample_id": 8916, "db_id": "cookbook", "final": {"question": "How many dairy recipes can serve more than 10 people?", "sql": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.category = 'dairy' AND T1.servings > 10", "source_tables": ["recipe", "ingredient", "quantity"]}, "evidence": "dairy recipes refers to category = 'dairy'; serve more than 10 people refers to servings > 10"}
{"sample_id": 8917, "db_id": "cookbook", "final": {"question": "List the names of recipes that can lead to constipation.", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.iron > 20", "source_tables": ["recipe", "nutrition"]}, "evidence": "lead to constipation refers to iron > 20"}
{"sample_id": 8918, "db_id": "cookbook", "final": {"question": "Which recipe has the highest calories?", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.calories DESC LIMIT 1", "source_tables": ["recipe", "nutrition"]}, "evidence": "the highest calories refers to MAX(calories)"}
{"sample_id": 8919, "db_id": "cookbook", "final": {"question": "How many recipes are non-dairy?", "sql": "SELECT COUNT(T2.recipe_id) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T2.ingredient_id = T1.ingredient_id INNER JOIN Nutrition AS T3 ON T3.recipe_id = T2.recipe_id WHERE T1.category NOT LIKE '%dairy%'", "source_tables": ["ingredient", "nutrition", "quantity"]}, "evidence": "non-dairy refers to category NOT LIKE '%dairy\""}
{"sample_id": 8920, "db_id": "cookbook", "final": {"question": "List all the ingredients of Apricot Yogurt Parfaits.", "sql": "SELECT T3.name, T3.category FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Apricot Yogurt Parfaits'", "source_tables": ["recipe", "ingredient", "quantity"]}, "evidence": "Apricot Yogurt Parfaits refers to title"}
{"sample_id": 8921, "db_id": "cookbook", "final": {"question": "Identify recipes with different maximum and minimum quantities.", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.max_qty <> T2.min_qty", "source_tables": ["recipe", "quantity"]}, "evidence": "maximum quantities refers to max_qty; minimum quantities refers to max_qty <> min_qty"}
{"sample_id": 8922, "db_id": "cookbook", "final": {"question": "What ingredients does the longest cooking time recipe have?", "sql": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id ORDER BY T1.cook_min DESC LIMIT 1", "source_tables": ["recipe", "ingredient", "quantity"]}, "evidence": "the longest cooking time refers to MAX(cook_min)"}
{"sample_id": 8923, "db_id": "cookbook", "final": {"question": "Calculate the percentage of recipes with no cholesterol included and have a cooking time less than 20 minutes among all recipes.", "sql": "SELECT CAST(SUM(CASE WHEN T1.cook_min < 20 AND T2.cholestrl = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id", "source_tables": ["recipe", "nutrition"]}, "evidence": "no cholesterol refers to cholestrl = 0; cooking time less than 20 minutes refers to cook_min < 20; calculation = MULTIPLY(DIVIDE(COUNT(cholestrl = 0 THEN recipe_id), COUNT(recipe_id)), 100)"}
{"sample_id": 8924, "db_id": "cookbook", "final": {"question": "Among all recipes containing cheese, what is the percentage of recipes with calories greater than 200?", "sql": "SELECT CAST(SUM(CASE WHEN T4.calories > 200 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id INNER JOIN Nutrition AS T4 ON T4.recipe_id = T1.recipe_id WHERE T3.category = 'cheese'", "source_tables": ["recipe", "ingredient", "nutrition", "quantity"]}, "evidence": "cheese is a category; calories greater than 200 refers to calories > 200; calculation = MULTIPLY(DIVIDE(COUNT(calories > 200 THEN recipe_id), COUNT(recipe_id)), 100)"}
{"sample_id": 8971, "db_id": "human_resources", "final": {"question": "Which city and address has zip code of above 90000?", "sql": "SELECT locationcity, address FROM location WHERE zipcode > 90000", "source_tables": ["location"]}, "evidence": "zip code of above 90000 refers to zipcode > 90000; city refers to locationcity"}
{"sample_id": 8972, "db_id": "human_resources", "final": {"question": "Which positions are suitable with 4 years degree education?", "sql": "SELECT positiontitle FROM position WHERE educationrequired = '4 year degree'", "source_tables": ["position"]}, "evidence": "4 years degree education refers to educationrequired = '4 year degree'; positions refers to positiontitle"}
{"sample_id": 8973, "db_id": "human_resources", "final": {"question": "What is the maximum salary of position \"Trainer\"?", "sql": "SELECT maxsalary FROM position WHERE positiontitle = 'Trainee'", "source_tables": ["position"]}, "evidence": "maximum salary refers to maxsalary; Trainee is a positiontitle"}
{"sample_id": 8974, "db_id": "human_resources", "final": {"question": "List the full name and social security number of the account representative with average performance.", "sql": "SELECT T1.firstname, T1.lastname, T1.ssn FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.performance = 'Average'", "source_tables": ["employee", "position"]}, "evidence": "full name = firstname, lastname; social security number refers to ssn; account representative is a position title; average performance refers to performance = 'Average'"}
{"sample_id": 8975, "db_id": "human_resources", "final": {"question": "When was Emily Wood hired? Mention her position and salary.", "sql": "SELECT T1.hiredate, T2.positiontitle, T1.salary FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'Emily' AND T1.lastname = 'Wood'", "source_tables": ["employee", "position"]}, "evidence": "Emily Wood is the full name of an employee; full name = firstname, lastname; when was she hired refers to hiredate"}
{"sample_id": 8976, "db_id": "human_resources", "final": {"question": "What are the maximum and minimum salary range and position title of Bill Marlin?", "sql": "SELECT T2.maxsalary, T2.minsalary, T2.positiontitle FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'Bill' AND T1.lastname = 'Marlin'", "source_tables": ["employee", "position"]}, "evidence": "Bill Marlin is the full name of an employee; full name = firstname, lastname; maximum salary refers to maxsalary; minimum salary refers to minsalary"}
{"sample_id": 8977, "db_id": "human_resources", "final": {"question": "List the full names, gender and positions who's location is in New York city.", "sql": "SELECT T1.firstname, T1.lastname, T1.gender, T3.positiontitle FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T2.locationcity = 'New York City'", "source_tables": ["employee", "position", "location"]}, "evidence": "full name = firstname, lastname; New York city refers to locationcity = 'New York City'"}
{"sample_id": 8978, "db_id": "human_resources", "final": {"question": "Mention the full name, hired date and performance status of the employee whose location is in Utah state.", "sql": "SELECT T1.firstname, T1.lastname, T1.hiredate, T1.performance FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.state = 'UT'", "source_tables": ["employee", "location"]}, "evidence": "full name = firstname, lastname; Utah refers to state = 'UT'"}
{"sample_id": 8979, "db_id": "human_resources", "final": {"question": "Among the employees with poor performance, provide the managers' full names, location city, address and its zip code.", "sql": "SELECT T1.firstname, T1.lastname, T2.locationcity, T2.address, T2.zipcode FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Manager' AND T1.performance = 'Poor'", "source_tables": ["employee", "position", "location"]}, "evidence": "poor performance refers to performance = 'Poor'; full name = firstname, lastname; managers is a position title"}
{"sample_id": 8980, "db_id": "human_resources", "final": {"question": "What is the education required to be account representative? Mention account representative full name and salary who got poor in performance status.", "sql": "SELECT T2.educationrequired, T1.firstname, T1.lastname, T1.salary FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.performance = 'Poor' AND T2.positiontitle = 'Account Representative'", "source_tables": ["employee", "position"]}, "evidence": "account representative is a position title; full name = firstname, lastname; poor performance refers to performance = 'Poor'"}
{"sample_id": 8981, "db_id": "human_resources", "final": {"question": "Write down the full name, performance status and located city of the employee who's social security number is \"767-74-7373\".", "sql": "SELECT T1.firstname, T1.lastname, T2.state, T2.locationcity FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.ssn = '767-74-7373'", "source_tables": ["employee", "location"]}, "evidence": "full name = firstname, lastname; ssn = '767-74-7373'"}
{"sample_id": 8982, "db_id": "human_resources", "final": {"question": "Describe the employees' full name, positions, located city and office phone number within Colorado state.", "sql": "SELECT T1.firstname, T1.lastname, T3.positiontitle, T2.locationcity, T2.officephone FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T2.state = 'CO'", "source_tables": ["employee", "position", "location"]}, "evidence": "full name = firstname, lastname; Colorado state refers to state = 'CO'; positions refers to positiontitle; located city refers to locationcity; office phone number refers to officephone;"}
{"sample_id": 8983, "db_id": "human_resources", "final": {"question": "Calculate the monthly average salary of the employee with highest salary. Mention his name, position title and location city.", "sql": "SELECT SUM(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) / 12 AS avg, T1.firstname, T1.lastname , T2.positiontitle, T3.locationcity FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID INNER JOIN location AS T3  ON T1.locationID = T3.locationID WHERE CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL) = ( SELECT MAX(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID INNER JOIN location AS T3  ON T1.locationID = T3.locationID )", "source_tables": ["employee", "position", "location"]}, "evidence": "highest salary refers to MAX(salary); name = firstname, lastname; calculation = DIVIDE(MAX(salary), 12)"}
{"sample_id": 9073, "db_id": "bike_share_1", "final": {"question": "What is the ratio for subscriber to customer given that the starting and the ending stations is 2nd at South Park?", "sql": "SELECT CAST(SUM(IIF(subscription_type = 'Subscriber', 1, 0)) AS REAL) / SUM(IIF(subscription_type = 'Customer', 1, 0)) FROM trip WHERE start_station_name = '2nd at South Park' AND end_station_name = '2nd at South Park'", "source_tables": ["trip"]}, "evidence": "subscriber refers to subscription_type = 'Subscriber'; customer refers to subscription_type = 'customer';starting station refers to start_station_name; ending station refers to end_statio_name; start_station_name = '2nd at South Park' AND end_station_name = '2nd at South Park'"}
{"sample_id": 9074, "db_id": "bike_share_1", "final": {"question": "Are all stations with zip code 94107 located in San Francisco city?", "sql": "SELECT DISTINCT T2.city FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.zip_code = 94107", "source_tables": ["station", "trip"]}, "evidence": "station refers to name;"}
{"sample_id": 9075, "db_id": "bike_share_1", "final": {"question": "List out all stations name that having a mean temperature 20 degree Celsius in year 2014.", "sql": "SELECT DISTINCT T2.start_station_name, T2.end_station_name FROM weather AS T1 INNER JOIN trip AS T2 ON T1.zip_code = T2.zip_code WHERE T1.date LIKE '%2014' AND T1.mean_temperature_f = 20 * 1.8 + 32", "source_tables": ["weather", "trip"]}, "evidence": "mean temperature refers to mean_temperature_f;\u00a0mean temperature of 20 degree Celsius refers to DIVIDE(SUBTRACT(mean_temperature_f, 32), 1.8) = 20; in 2014 refers to date LIKE'%2015%';"}
{"sample_id": 9076, "db_id": "bike_share_1", "final": {"question": "How many bicycle trip were made within San Jose city during August 2013?", "sql": "SELECT COUNT(T2.id) FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE T1.city = 'San Jose' AND T2.start_date LIKE '8/%/2013%' AND T2.start_station_name LIKE 'San Jose%' AND T2.end_station_name LIKE 'San Jose%'", "source_tables": ["station", "trip"]}, "evidence": "during August 2013 refers to start_date like '8/%/2013%';"}
{"sample_id": 9077, "db_id": "bike_share_1", "final": {"question": "Is there any intercity trip were made during 2014? If yes, list out the city name for the start and end station.", "sql": "SELECT T1.start_station_name, T1.end_station_name FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.start_date LIKE '%/%/2014%' AND T1.start_station_name != T1.end_station_name", "source_tables": ["station", "trip"]}, "evidence": "intercity trip refers to start_station_name! = end_station_name; during 2014 refers to start_date like '%2014%'; start station refers to start_station_name; end station refers to end_station_name;"}
{"sample_id": 9078, "db_id": "bike_share_1", "final": {"question": "Does the bike with Id number 16 making any intercity trip? If yes, calculate the total travel duration during all the intercity trip. Convert the duration to hour.", "sql": "SELECT T1.end_station_name, T2.city, CAST(SUM(T1.duration) AS REAL) / 3600 FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.bike_id = 16 AND T1.start_station_name != T1.end_station_name", "source_tables": ["station", "trip"]}, "evidence": "intercity trip refers to start_station_name! = end_station_name; total travel duration to hour = DIVIDE(SUM(duration), 3600) AS hour;"}
{"sample_id": 9079, "db_id": "bike_share_1", "final": {"question": "What is the ratio of customer to subscriber that making a trip inside Mountain View city?", "sql": "SELECT CAST(SUM(CASE WHEN T1.subscription_type = 'Customer' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.subscription_type = 'Subscriber' THEN 1 ELSE 0 END) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'Mountain View'", "source_tables": ["station", "trip"]}, "evidence": "customer refers to subscription_type = 'customer'; subscriber refers to subscription_type = 'subscriber'; ratio = MULTIPLY(DIVIDE(COUNT(subscription_type = 'Customer'), COUNT(subscription_type = 'Subscriber'). 1.0)) AS ratio;"}
{"sample_id": 9080, "db_id": "bike_share_1", "final": {"question": "What is the total trip duration made within Palo Alto city? Convert the duration to hour.", "sql": "SELECT CAST(SUM(T1.duration) AS REAL) / 3600 FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'Palo Alto'", "source_tables": ["station", "trip"]}, "evidence": "total trip duration to hour = DIVIDE(SUM(duration), 3600);"}
{"sample_id": 9081, "db_id": "bike_share_1", "final": {"question": "Which bicycle is the least used bike. Check if the start and end station are from the same city and calculate the total duration travelled by the bicycle in hours for a trip made within the same city.", "sql": "SELECT T2.bike_id, T2.start_station_name, T2.end_station_name, T1.city , CAST(T2.duration AS REAL) / 3600 FROM station AS T1 INNER JOIN trip AS T2 ON T1.name = T2.start_station_name GROUP BY T2.bike_id ORDER BY COUNT(T2.id) DESC LIMIT 1", "source_tables": ["station", "trip"]}, "evidence": "least used bike refers to bike_id with MIN(COUNT(main_trip.id)); start station refers to start_station_name; end station refers to end_station_name; total duration in hour = DIVIDE(duration, 3600) AS hour;"}
{"sample_id": 9082, "db_id": "bike_share_1", "final": {"question": "Count the number of subscribers who started their trips in Market at 4th.", "sql": "SELECT COUNT(CASE WHEN subscription_type = 'Subscriber' AND start_station_name = 'Market at 4th' THEN id END) FROM trip", "source_tables": ["trip"]}, "evidence": "subsscriber refers to subscription_type = subscriber; started their trips in refers to start_station_name; start_station_name = 'Market at 4th';"}
{"sample_id": 9083, "db_id": "bike_share_1", "final": {"question": "List the names of the stations within Mountain View that were installed on 12/31/2013.", "sql": "SELECT name FROM station WHERE installation_date = '12/31/2013' AND city = 'Mountain View'", "source_tables": ["station"]}, "evidence": "Mountain View refers to city = 'Mountain View'; installed on 12/31/2013 refers to installation_date = '12/31/2013';"}
{"sample_id": 9084, "db_id": "bike_share_1", "final": {"question": "Which city is Townsend at 7th Station located and how many bikes could it hold?", "sql": "SELECT city, SUM(dock_count) FROM station WHERE name = 'Townsend at 7th'", "source_tables": ["station"]}, "evidence": "Townsend at 7th Station refers to city = 'Townsend at 7th Station'; number of bikes a station can hold refers to SUM(dock_count);"}
{"sample_id": 9085, "db_id": "bike_share_1", "final": {"question": "How many bikes could Evelyn Park and Ride hold and how many users who started on that station are subscribers?", "sql": "SELECT SUM(T2.dock_count), COUNT(T1.subscription_type) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.name = 'Evelyn Park and Ride' AND T1.start_station_name = T2.name AND T1.subscription_type = 'Subscriber'", "source_tables": ["station", "trip"]}, "evidence": "number of bikes a station can hold refers to SUM(dock_count); Evelyn Park and Ride refers to name = 'Evelyn Park and Ride'; started on the station refers to start_station_name; subscribers refers to subscription_type = 'subscriber';"}
{"sample_id": 9086, "db_id": "bike_share_1", "final": {"question": "How many subscribers are in the zip code of 94301 and what is the hottest temperature recorded on that zip code?", "sql": "SELECT COUNT(T3.zip_code), T3.max_temperature_f FROM trip AS T2 INNER JOIN weather AS T3 ON T3.zip_code = T2.zip_code WHERE T3.zip_code = 94301 AND T2.subscription_type = 'Subscriber' ORDER BY T3.max_temperature_f DESC LIMIT 1", "source_tables": ["weather", "trip"]}, "evidence": "hottest temperature refers to MAX(max_temperature_f);"}
{"sample_id": 9087, "db_id": "bike_share_1", "final": {"question": "What is the percentage ration of customers to subscribers that started their trips within the city of San Francisco?", "sql": "SELECT CAST(SUM(CASE WHEN T1.subscription_type = 'Customer' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.subscription_type = 'Subscriber' THEN 1 ELSE 0 END) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'San Francisco'", "source_tables": ["station", "trip"]}, "evidence": "customer refers to subscription_type = 'customer'; subscriber refers to subscription_type = 'subscriber'; started their trips within refers to start_station_id; percentage ratio = DIVIDE(SUM(subscription_type = 'Customer'), SUM(subscription_type = 'Subscriber')) as percentage;"}
{"sample_id": 9088, "db_id": "bike_share_1", "final": {"question": "What is the average duration of trips for the starting station of Santa Clara at Almaden and what is the latitude and longitude of this station?", "sql": "SELECT AVG(T1.duration), T2.lat, T2.long FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name LEFT JOIN station AS T3 ON T3.name = T1.end_station_name WHERE T1.start_station_name = 'Santa Clara at Almaden'", "source_tables": ["station", "trip"]}, "evidence": "average duration = DIVIDE(SUM(duration), COUNT(id)); starting station refers to start_station_name; start_station_name = 'Santa Clara at Almaden'; latitude refers to lat; longitude refers to long;"}
{"sample_id": 9089, "db_id": "bike_share_1", "final": {"question": "What is the shortest trip made starting from Franklin at Maple and what is the maximum wind speed at that date?", "sql": "SELECT MIN(T1.duration), MAX(T2.max_wind_Speed_mph) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.start_station_name = 'Franklin at Maple' AND T2.date = '9/4/2013'", "source_tables": ["weather", "trip"]}, "evidence": "shortest trip refers to MIN(duration); starting from refers to start_station_name; start_station_name = 'Franklin at Maple'; maximum wind speed refers to max_wind_Speed_mph;"}
{"sample_id": 9090, "db_id": "bike_share_1", "final": {"question": "How many bikes have been borrowed at San Jose Diridon Caltrain Station on the date and time of 10/20/2013 8:11:01 AM and indicate the station's coordinates.", "sql": "SELECT SUM(T2.bikes_available), T1.long, T1.lat FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T2.time = '2013/10/20 8:11:01' AND T1.name = 'San Jose Diridon Caltrain Station'", "source_tables": ["station", "status"]}, "evidence": "number of bikes that have been borrowed refers to SUM(bikes_available); San Jose Diridon Caltrain Station refers to name = 'San Jose Diridon Caltrain Station'; station's coordinates refers to (lat, long);"}
{"sample_id": 9091, "db_id": "bike_share_1", "final": {"question": "Name the city of the station that trip ID 585842 borrowed a bike and indicate when that station was first installed.", "sql": "SELECT T2.city, T2.installation_date FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.id = 585842", "source_tables": ["station", "trip"]}, "evidence": "when the station was first installed refers to installation_date;"}
{"sample_id": 9092, "db_id": "bike_share_1", "final": {"question": "How many stations were installed on the date of 8/16/2013 and how many users on those stations are classified as a customer?", "sql": "SELECT COUNT(T1.name) , SUM(CASE WHEN T2.subscription_type = 'Customer' THEN 1 ELSE 0 END) FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE T1.installation_date = '8/16/2013' AND T2.subscription_type = 'Customer'", "source_tables": ["station", "trip"]}, "evidence": "installed on refers to installation_date; installation_date = '8/16/2013'; customers refers to subscription_type = customers;"}
{"sample_id": 9093, "db_id": "bike_share_1", "final": {"question": "Which station did the user who started at Market at 4th station ended their trip at the time of 12:45:00 PM and the date of 8/29/2013 and what is the location coordinates of the ending station?", "sql": "SELECT T1.name, T1.lat, T1.long FROM station AS T1 INNER JOIN trip AS T2 ON T2.end_station_name = T1.name WHERE T2.start_station_name = 'Market at 4th' AND T2.end_date = '8/29/2013 12:45'", "source_tables": ["station", "trip"]}, "evidence": "started at refers to start_station_name; start_station_name = 'Market at 4th'; location coordinates refers to (lat, long);"}
{"sample_id": 9094, "db_id": "bike_share_1", "final": {"question": "How many subscribers have ended their trip at MLK Library and how many docks does that station have?", "sql": "SELECT COUNT(T1.id), T2.dock_count FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.end_station_name = 'MLK Library' AND T1.subscription_type = 'Subscriber' AND T2.dock_count = 19", "source_tables": ["station", "trip"]}, "evidence": "subscribers refers to subscription_type = 'subscribers'; ended their trip at refers to end_station_name; end_station_name = 'MLK Library'; number of docks a station have refers to dock_count;"}
{"sample_id": 9095, "db_id": "bike_share_1", "final": {"question": "What is the average coldest temperature for the zip code of 94301 and what stations are within the zip code? Include the latitude and longitude as well.", "sql": "SELECT AVG(T3.min_temperature_f), T1.long, T1.lat FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name INNER JOIN weather AS T3 ON T3.zip_code = T2.zip_code WHERE T3.zip_code = 94301", "source_tables": ["station", "weather", "trip"]}, "evidence": "coldest temperature refers to min_temperature_f; average coldest temperature refers = AVG(min_temperature_f); stations refers to name; latitude refers to lat; longitude refers to long;"}
{"sample_id": 9096, "db_id": "bike_share_1", "final": {"question": "Calculate the average duration travelled by subscribers that both started and ended their trip in Mountain View City Hall and indicate the date when the station was first installed.", "sql": "SELECT AVG(T1.duration), T2.installation_date FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.start_station_name = 'Mountain View City Hall' AND T1.subscription_type = 'Subscriber' AND T1.end_station_name = 'Mountain View City Hall'", "source_tables": ["station", "trip"]}, "evidence": "average duration = DIVIDE(SUM(duration), COUNT(id)); subscribers refers to subscription_type = 'subscriptions'; started and ended their trip at Mountain View City Hall refers to start_station_name = 'Mountain View City Hall' and end_station_name = 'Mountain View City Hall'; when the station was first installed refers to installation_date;"}
{"sample_id": 9357, "db_id": "movie_3", "final": {"question": "Write down the email addresses of active customers who rented between 5/25/2005 at 7:37:47 PM and 5/26/2005 at 10:06:49 AM.", "sql": "SELECT T2.email FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.rental_date BETWEEN '2005-5-25 07:37:47' AND '2005-5-26 10:06:49' AND T2.active = 1", "source_tables": ["customer", "rental"]}, "evidence": "email address refers to email; active refers to active = 1; between 5/25/2005 at 7:37:47 PM and 5/26/2005 at 10:06:49 AM refers to rental_date between '2005-5-25 07:37:47' and '2005-5-26 10:06:49'"}
{"sample_id": 9358, "db_id": "movie_3", "final": {"question": "Compute the total payment made by Sarah Lewis for film rentals so far.", "sql": "SELECT SUM(T3.amount) FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id INNER JOIN payment AS T3 ON T1.rental_id = T3.rental_id WHERE T2.first_name = 'SARAH' AND T2.last_name = 'LEWIS'", "source_tables": ["customer", "rental", "payment"]}, "evidence": "total payment = sum(amount)"}
{"sample_id": 9359, "db_id": "movie_3", "final": {"question": "From 5/30/2005 at 3:43:54 AM to 7/31/2005 at 10:08:29 PM, how many times did Susan Wilson pay for film rentals?", "sql": "SELECT COUNT(T1.customer_id) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.payment_date BETWEEN '2005-05-30 03:43:54' AND '2005-07-31 10:08:29'", "source_tables": ["customer", "payment"]}, "evidence": "from 5/30/2005 at 3:43:54 AM to 7/31/2005 at 10:08:29 PM refers to payment_date between '2005-05-30 03:43:54' and '2005-07-31 10:08:29'"}
{"sample_id": 9360, "db_id": "movie_3", "final": {"question": "Tally the full names of actors in the film \"Alabama Devil.\"", "sql": "SELECT T2.first_name, T2.last_name FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.title = 'ALABAMA DEVIL'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "full name refers to first_name, last_name; \"Alabama Devil\" refers to title = 'ALABAMA DEVIL'"}
{"sample_id": 9361, "db_id": "movie_3", "final": {"question": "Tell me the title of the film in which Sandra Kilmer is one of the actors.", "sql": "SELECT T3.title FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T2.first_name = 'SANDRA' AND T2.last_name = 'KILMER'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": ""}
{"sample_id": 9362, "db_id": "movie_3", "final": {"question": "How many documentary films are rated PG-13?", "sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Documentary' AND T1.rating = 'PG-13'", "source_tables": ["film", "category", "film_category"]}, "evidence": "documentary film refers to category.name = 'documentary'; rated PG-13 refers to rating = 'PG-13'"}
{"sample_id": 9363, "db_id": "movie_3", "final": {"question": "Give me the title and category name of films whose price per day is more than $30. Please include their special features.", "sql": "SELECT T1.title, T3.name, T1.special_features FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T1.rental_duration * T1.rental_rate > 30", "source_tables": ["film", "category", "film_category"]}, "evidence": "category name refers to category.name; price per day is more than $30 refers to multiply(rental_duration, rental_rate) > 30"}
{"sample_id": 9364, "db_id": "movie_3", "final": {"question": "Name the cast members of the movie 'African Egg'.", "sql": "SELECT T2.first_name, T2.last_name FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.title = 'AFRICAN EGG'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "cast member name refers to first_name, last_name; 'African Egg' refers to title = 'AFRICAN EGG'"}
{"sample_id": 9365, "db_id": "movie_3", "final": {"question": "Identify the number of movies rented by Maria Miller.", "sql": "SELECT COUNT(T2.rental_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'Maria' AND T1.last_name = 'Miller'", "source_tables": ["customer", "rental"]}, "evidence": ""}
{"sample_id": 9366, "db_id": "movie_3", "final": {"question": "Name the most recent movie rented by Dorothy Taylor.", "sql": "SELECT T4.title FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'DOROTHY' AND T1.last_name = 'TAYLOR' ORDER BY T2.rental_date DESC LIMIT 1", "source_tables": ["film", "customer", "rental", "inventory"]}, "evidence": "movie name refers to title; the most recent refers to max(rental_date)"}
{"sample_id": 9367, "db_id": "movie_3", "final": {"question": "Determine the number of action movies available for rent.", "sql": "SELECT COUNT(T2.film_id) FROM category AS T1 INNER JOIN film_category AS T2 ON T1.category_id = T2.category_id WHERE T1.name = 'Action'", "source_tables": ["category", "film_category"]}, "evidence": "action movie refers to category.name = 'Action'"}
{"sample_id": 9368, "db_id": "movie_3", "final": {"question": "Where can you rent the movie 'Wyoming Storm'? Identify the address of the rental store and the rental rate.", "sql": "SELECT T2.store_id, T1.address, T4.rental_rate FROM address AS T1 INNER JOIN store AS T2 ON T1.address_id = T2.address_id INNER JOIN inventory AS T3 ON T2.store_id = T3.store_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T4.title = 'WYOMING STORM'", "source_tables": ["film", "store", "address", "inventory"]}, "evidence": "'Wyoming Storm' refers to title = 'WYOMING STORM'"}
{"sample_id": 9369, "db_id": "movie_3", "final": {"question": "How long did Austin Cintron take to return the movie 'Destiny Saturday'?", "sql": "SELECT T2.rental_date - T2.return_date FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'AUSTIN' AND T4.title = 'DESTINY SATURDAY'", "source_tables": ["film", "customer", "rental", "inventory"]}, "evidence": "'Destiny Saturday' refers to title = 'DESTINY SATURDAY'; length = subtract(return_date, rental_date)"}
{"sample_id": 9370, "db_id": "movie_3", "final": {"question": "Identify the number of movies that starred Nick Stallone.", "sql": "SELECT COUNT(T1.film_id) FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id AND T2.first_name = 'NICK' AND T2.last_name = 'STALLONE'", "source_tables": ["film_actor", "actor"]}, "evidence": ""}
{"sample_id": 9371, "db_id": "movie_3", "final": {"question": "Name the movie with the highest rental revenue among the shortest films.", "sql": "SELECT title FROM film WHERE length = ( SELECT MIN(length) FROM film ) ORDER BY rental_duration * rental_rate DESC LIMIT 1", "source_tables": ["film"]}, "evidence": "movie name refers to title; the highest rental revenue refers to max(multiply(rental_duration, rental_rate)); the shortest film refers to min(length)"}
{"sample_id": 9372, "db_id": "movie_3", "final": {"question": "Calculate the total amount paid by Stephanie Mitchell for film rentals in June 2005.", "sql": "SELECT SUM(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'STEPHANIE' AND T2.last_name = 'MITCHELL' AND SUBSTR(T1.payment_date, 1, 7) = '2005-06'", "source_tables": ["customer", "payment"]}, "evidence": "the total amount = sum(amount); in June 2005 refers to payment_date like '2005-06%'"}
{"sample_id": 9373, "db_id": "movie_3", "final": {"question": "What is the average replacement cost for the movies with a rental rate of 4.99?", "sql": "SELECT AVG(replacement_cost) FROM film WHERE rental_rate = 4.99", "source_tables": ["film"]}, "evidence": "a rental rate of 4.99 refers to rental_rate = 4.99; average replacement cost = avg(replacement_cost)"}
{"sample_id": 9374, "db_id": "movie_3", "final": {"question": "What is the average rental rate for PG-13 rated movies?", "sql": "SELECT AVG(rental_rate) FROM film WHERE rating = 'PG-13'", "source_tables": ["film"]}, "evidence": "PG-13 rated movie refers to rating = 'PG-13'; average rental rate = avg(rental_rate)"}
{"sample_id": 9375, "db_id": "movie_3", "final": {"question": "Indicate the percentage of inactive customers at store no.1.", "sql": "SELECT CAST(SUM(CASE WHEN active = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(customer_id) FROM customer WHERE store_id = 1", "source_tables": ["customer"]}, "evidence": "inactive refers to active = 0; store no.1 refers to store_id = 1; percentage = divide(count(customer_id where active = 0), count(customer_id)) * 100% where store_id = 1"}
{"sample_id": 9376, "db_id": "movie_3", "final": {"question": "For how long can you rent the movie 'Dirty Ace'?", "sql": "SELECT rental_duration FROM film WHERE title = 'DIRTY ACE'", "source_tables": ["film"]}, "evidence": "length refers to rental_duration; 'Dirty Ace' refers to title = 'DIRTY ACE'"}
{"sample_id": 9377, "db_id": "movie_3", "final": {"question": "Identify the full name of the customer, who has the following email address: SHEILA.WELLS@sakilacustomer.org.", "sql": "SELECT first_name, last_name FROM customer WHERE email = 'SHEILA.WELLS@sakilacustomer.org'", "source_tables": ["customer"]}, "evidence": "full name refers to first_name, last_name"}
{"sample_id": 9378, "db_id": "movie_3", "final": {"question": "Provide the list of the longest movies. Arrange these titles in alphabetical order.", "sql": "SELECT title FROM film WHERE length = ( SELECT MAX(length) FROM film )", "source_tables": ["film"]}, "evidence": "the longest refers to max(length)"}
{"sample_id": 9379, "db_id": "movie_3", "final": {"question": "How many film categories are there?", "sql": "SELECT COUNT(DISTINCT category_id) FROM category", "source_tables": ["category"]}, "evidence": ""}
{"sample_id": 9380, "db_id": "movie_3", "final": {"question": "How many titles did Mary Smith rent in 2005? Determine the percentage of titles rented in June 2005.", "sql": "SELECT COUNT(T2.rental_id) , CAST(SUM(IIF(STRFTIME('%m',T2.rental_date) = '7', 1, 0)) AS REAL) * 100 / COUNT(T2.rental_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'Maria' AND T1.last_name = 'Miller' AND STRFTIME('%Y',T2.rental_date) = '2005'", "source_tables": ["customer", "rental"]}, "evidence": "in June 2005 refers to month(rental_date) = 6 and year(rental_date) = 2005; percentage = divide(count(inventory_id where month(rental_date) = 6 and year(rental_date) = 2005), count(inventory_id)) * 100%"}
{"sample_id": 9381, "db_id": "movie_3", "final": {"question": "How many customers are still active?", "sql": "SELECT COUNT(customer_id) FROM customer WHERE active = 1", "source_tables": ["customer"]}, "evidence": "active refers to active = 1"}
{"sample_id": 9382, "db_id": "movie_3", "final": {"question": "List all the films that are rated as PG-13.", "sql": "SELECT title FROM film WHERE rating = 'PG-13'", "source_tables": ["film"]}, "evidence": "film refers to title; rated as PG-13 refers to rating = 'PG-13'"}
{"sample_id": 9383, "db_id": "movie_3", "final": {"question": "List at least 10 films that the customers can rent for more than 5 days.", "sql": "SELECT T.title FROM ( SELECT T1.title, COUNT(T3.customer_id) AS num FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id WHERE T1.rental_duration > 5 GROUP BY T1.title ) AS T WHERE T.num > 10", "source_tables": ["film", "rental", "inventory"]}, "evidence": "film refers to title; rent for more than 5 days refers to rental_duration > 5"}
{"sample_id": 9384, "db_id": "movie_3", "final": {"question": "List all the cities that belong to United Arab Emirates.", "sql": "SELECT T1.city FROM city AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE country = 'United Arab Emirates'", "source_tables": ["country", "city"]}, "evidence": "United Arab Emirates refers to country = 'United Arab Emirates'"}
{"sample_id": 9385, "db_id": "movie_3", "final": {"question": "List at least 5 customers who paid greater than $10. Provide the full name of the customers.", "sql": "SELECT T2.first_name, T2.last_name FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.amount > 10", "source_tables": ["customer", "payment"]}, "evidence": "full name refers to first_name, last_name; greater than $10 refers to amount > 10"}
{"sample_id": 9386, "db_id": "movie_3", "final": {"question": "What films did Burt Dukakis got star in?", "sql": "SELECT T3.title FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T2.first_name = 'BURT' AND T2.last_name = 'DUKAKIS'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "film refers to title"}
{"sample_id": 9387, "db_id": "movie_3", "final": {"question": "Provide the full name of all the actors of the film \"Ending Crowds\".", "sql": "SELECT T2.first_name, T2.last_name FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.title = 'ENDING CROWDS'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "full name refers to first_name, last_name; film \"Ending Crowds\" refers to title = 'ENDING CROWDS'"}
{"sample_id": 9388, "db_id": "movie_3", "final": {"question": "Who are the actors starred in the film \"Bound Cheaper\"?", "sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'BOUND CHEAPER'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "actor refers to first_name, last_name; film \"Bound Cheaper\" refers to title = 'BOUND CHEAPER'"}
{"sample_id": 9389, "db_id": "movie_3", "final": {"question": "List all the films that Karl Berr starred in and rated as PG.", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'KARL' AND T1.last_name = 'BERRY' AND T3.rating = 'PG'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "film refers to title; rated as PG refers to rating = 'PG'"}
{"sample_id": 9390, "db_id": "movie_3", "final": {"question": "List at least 3 cities under the country of Philippines.", "sql": "SELECT T1.city FROM city AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE country = 'Philippines'", "source_tables": ["country", "city"]}, "evidence": ""}
{"sample_id": 9391, "db_id": "movie_3", "final": {"question": "What are the films that are least rented by the customers?", "sql": "SELECT T.title FROM ( SELECT T3.title, COUNT(T1.customer_id) AS num FROM rental AS T1 INNER JOIN inventory AS T2 ON T1.inventory_id = T2.inventory_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id GROUP BY T3.title ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["film", "rental", "inventory"]}, "evidence": "film refers to title; least rented refers to count(min(customer_id))"}
{"sample_id": 9392, "db_id": "movie_3", "final": {"question": "List all the description of the films starring Lucille Tracy?", "sql": "SELECT T1.film_id FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id WHERE T2.first_name = 'LUCILLE' AND T2.last_name = 'TRACY'", "source_tables": ["film_actor", "actor"]}, "evidence": ""}
{"sample_id": 9393, "db_id": "movie_3", "final": {"question": "Which category is the film \"Beach Heartbreakers\" falls into?", "sql": "SELECT T3.name FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T1.title = 'BEACH HEARTBREAKERS'", "source_tables": ["film", "category", "film_category"]}, "evidence": "category refers to name; film \"Beach Heartbreakers\" refers to title = 'BEACH HEARTBREAKERS'"}
{"sample_id": 9394, "db_id": "movie_3", "final": {"question": "List at least 10 films that falls into the Horror category.", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Horror'", "source_tables": ["film", "category", "film_category"]}, "evidence": "film refers to title; Horror category refers to category.name = 'Horror'"}
{"sample_id": 9395, "db_id": "movie_3", "final": {"question": "Who among the actors starred in a NC-17 rated film? Provide only the last name of the actors.", "sql": "SELECT T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.rating = 'NC-17'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "NC-17 rated refers to rating = 'NC-17'"}
{"sample_id": 9396, "db_id": "movie_3", "final": {"question": "Calculate the average rate of renting the film that Lucille Tracy got starred.", "sql": "SELECT AVG(T3.rental_rate) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'LUCILLE' AND T1.last_name = 'TRACY'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "average rate = divide(sum(rental_rate), count(film_id))"}
{"sample_id": 9397, "db_id": "movie_3", "final": {"question": "How many films have a duration between 100 to 110 minutes?", "sql": "SELECT COUNT(film_id) FROM film WHERE length BETWEEN 100 AND 110", "source_tables": ["film"]}, "evidence": "duration between 100 to 110 minutes refers to length between 100 and 110"}
{"sample_id": 9398, "db_id": "movie_3", "final": {"question": "List down the actor ID of actors with Dee as their last name.", "sql": "SELECT actor_id FROM actor WHERE last_name = 'Dee'", "source_tables": ["actor"]}, "evidence": ""}
{"sample_id": 9399, "db_id": "movie_3", "final": {"question": "Among the active customers, how many of them have Nina as their first name?", "sql": "SELECT COUNT(customer_id) FROM customer WHERE first_name = 'Nina' AND active = 1", "source_tables": ["customer"]}, "evidence": "active refers to active = 1"}
{"sample_id": 9400, "db_id": "movie_3", "final": {"question": "In store ID 2, how many of the films are R rating?\n", "sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T2.store_id = 2 AND T1.rating = 'R'", "source_tables": ["film", "inventory"]}, "evidence": "R rating refers to rating = 'R'"}
{"sample_id": 9401, "db_id": "movie_3", "final": {"question": "List the store ID of the films starred by Reese West with a duration of 100 minutes and below?", "sql": "SELECT T4.store_id FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN inventory AS T4 ON T3.film_id = T4.film_id WHERE T3.length < 100 AND T1.first_name = 'Reese' AND T1.last_name = 'West'", "source_tables": ["film", "film_actor", "actor", "inventory"]}, "evidence": "a duration of 100 minutes and below refers to length < 100"}
{"sample_id": 9402, "db_id": "movie_3", "final": {"question": "Give the duration of the film starred by Nick Wahlberg with the highest rental rate.", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Nick' AND T1.last_name = 'Wahlberg' ORDER BY T3.rental_rate DESC LIMIT 1", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "duration refers to length; the highest rental rate refers to max(rental_rate)"}
{"sample_id": 9403, "db_id": "movie_3", "final": {"question": "What are the titles of the films starred by Russell Close?", "sql": "SELECT T3.title FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T2.first_name = 'Russell' AND T2.last_name = 'Close'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": ""}
{"sample_id": 9404, "db_id": "movie_3", "final": {"question": "List the store ID of the film titled \"Amadeus Holy\".", "sql": "SELECT T2.store_id FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T1.title = 'Amadeus Holy'", "source_tables": ["film", "inventory"]}, "evidence": ""}
{"sample_id": 9405, "db_id": "movie_3", "final": {"question": "In films with a rental rate of 2.99, how many of the films are starred by Nina Soto?", "sql": "SELECT COUNT(T1.film_id) FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.rental_rate = 2.99 AND T2.first_name = 'Nina' AND T2.last_name = 'Soto'", "source_tables": ["film", "film_actor", "actor"]}, "evidence": "a rental rate of 2.99 refers to rental_rate = 2.99"}
{"sample_id": 9406, "db_id": "movie_3", "final": {"question": "Among the films starred by Reese West, what is the difference between the films that have store ID of 1 and store ID of 2?", "sql": "SELECT SUM(IIF(T4.film_id = 1, 1, 0)) - SUM(IIF(T4.film_id = 2, 1, 0)) AS diff FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id INNER JOIN inventory AS T4 ON T3.film_id = T4.film_id WHERE T2.first_name = 'Reese' AND T2.last_name = 'West'", "source_tables": ["film", "film_actor", "actor", "inventory"]}, "evidence": "result = subtract(count(film_id where store_id = 1), count(film_id where store_id = 2))"}
{"sample_id": 9407, "db_id": "movie_3", "final": {"question": "What is the postal code of the address 692 Joliet Street?", "sql": "SELECT postal_code FROM address WHERE address = '692 Joliet Street'", "source_tables": ["address"]}, "evidence": ""}
{"sample_id": 9408, "db_id": "movie_3", "final": {"question": "How many customers are active?", "sql": "SELECT COUNT(customer_id) FROM customer WHERE active = 1", "source_tables": ["customer"]}, "evidence": "active refers to active = 1"}
{"sample_id": 9409, "db_id": "movie_3", "final": {"question": "Among all the customers of store no.1, how many of them are active?", "sql": "SELECT COUNT(customer_id) FROM customer WHERE active = 1 AND store_id = 1", "source_tables": ["customer"]}, "evidence": "active refers to active = 1"}
{"sample_id": 9410, "db_id": "movie_3", "final": {"question": "What is the address of Mary Smith?", "sql": "SELECT T1.address FROM address AS T1 INNER JOIN customer AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH'", "source_tables": ["customer", "address"]}, "evidence": ""}
{"sample_id": 9411, "db_id": "movie_3", "final": {"question": "Among all the active customers, how many of them live in Arlington?", "sql": "SELECT COUNT(T2.customer_id) FROM address AS T1 INNER JOIN customer AS T2 ON T1.address_id = T2.address_id INNER JOIN city AS T3 ON T1.city_id = T3.city_id WHERE T2.active = 1 AND T3.city = 'Arlington'", "source_tables": ["city", "customer", "address"]}, "evidence": "active refers to active = 1; Arlington refers to city = 'Arlington'"}
{"sample_id": 9412, "db_id": "movie_3", "final": {"question": "Please list the full names of all the customers who live in Italy.", "sql": "SELECT T4.first_name, T4.last_name FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id INNER JOIN customer AS T4 ON T1.address_id = T4.address_id WHERE T3.country = 'Italy'", "source_tables": ["country", "city", "customer", "address"]}, "evidence": "full name refers to first_name, last_name; Italy refers to country = 'Italy'"}
{"sample_id": 9413, "db_id": "movie_3", "final": {"question": "Which country does Mary Smith live in?", "sql": "SELECT T3.country FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id INNER JOIN customer AS T4 ON T1.address_id = T4.address_id WHERE T4.first_name = 'MARY' AND T4.last_name = 'SMITH'", "source_tables": ["country", "city", "customer", "address"]}, "evidence": ""}
{"sample_id": 9414, "db_id": "movie_3", "final": {"question": "What is the biggest amount of payment for a rental made by Mary Smith?", "sql": "SELECT T1.amount FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH' ORDER BY T1.amount DESC LIMIT 1", "source_tables": ["customer", "payment"]}, "evidence": "the biggest amount refers to max(amount)"}
{"sample_id": 9415, "db_id": "movie_3", "final": {"question": "How many times has Mary Smith rented a film?", "sql": "SELECT COUNT(T1.customer_id) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH'", "source_tables": ["customer", "payment"]}, "evidence": ""}
{"sample_id": 9416, "db_id": "movie_3", "final": {"question": "What is the total amount of money Mary Smith has spent on film rentals?", "sql": "SELECT SUM(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH'", "source_tables": ["customer", "payment"]}, "evidence": "the total amount = sum(amount)"}
{"sample_id": 9417, "db_id": "movie_3", "final": {"question": "Among the times Mary Smith had rented a movie, how many of them happened in June, 2005?", "sql": "SELECT COUNT(T1.customer_id) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH' AND STRFTIME('%Y',T1.payment_date) = '2005' AND STRFTIME('%Y', T1.payment_date) = '6'", "source_tables": ["customer", "payment"]}, "evidence": "in June 2005 refers to year(payment_date) = 2005 and month(payment_date) = 6"}
{"sample_id": 9418, "db_id": "movie_3", "final": {"question": "Please give the full name of the customer who had made the biggest amount of payment in one single film rental.", "sql": "SELECT T2.first_name, T2.last_name FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.amount DESC LIMIT 1", "source_tables": ["customer", "payment"]}, "evidence": "full name refers to first_name, last_name; the biggest amount refers to max(amount)"}
{"sample_id": 9419, "db_id": "movie_3", "final": {"question": "How much in total had the customers in Italy spent on film rentals?", "sql": "SELECT SUM(T5.amount) FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id INNER JOIN customer AS T4 ON T1.address_id = T4.address_id INNER JOIN payment AS T5 ON T4.customer_id = T5.customer_id WHERE T3.country = 'Italy'", "source_tables": ["country", "payment", "city", "customer", "address"]}, "evidence": "total = sum(amount); Italy refers to country = 'Italy'"}
{"sample_id": 9420, "db_id": "movie_3", "final": {"question": "Among the payments made by Mary Smith, how many of them are over 4.99?", "sql": "SELECT COUNT(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH' AND T1.amount > 4.99", "source_tables": ["customer", "payment"]}, "evidence": "over 4.99 refers to amount > 4.99"}
{"sample_id": 9421, "db_id": "movie_3", "final": {"question": "What is the average amount of money spent by a customer in Italy on a single film rental?", "sql": "SELECT AVG(T5.amount) FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id INNER JOIN customer AS T4 ON T1.address_id = T4.address_id INNER JOIN payment AS T5 ON T4.customer_id = T5.customer_id WHERE T3.country = 'Italy'", "source_tables": ["country", "payment", "city", "customer", "address"]}, "evidence": "Italy refers to country = 'Italy'; average amount = divide(sum(amount), count(customer_id)) where country = 'Italy'"}
{"sample_id": 9492, "db_id": "california_schools", "final": {"question": "How many active and closed District Community Day Schools are there in the county of Alpine?", "sql": "SELECT COUNT(School) FROM schools WHERE (StatusType = 'Closed' OR StatusType = 'Active') AND SOC = 69 AND County = 'Alpine'", "source_tables": ["schools"]}, "evidence": ""}
{"sample_id": 9493, "db_id": "california_schools", "final": {"question": "What is the district code for the School that does not offer a magnet program in the city of Fresno?", "sql": "SELECT T1.'District Code' FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = 'Fresno' AND T2.Magnet = 0", "source_tables": ["frpm", "schools"]}, "evidence": "When magent is equal to 0 in the database, it means ths school doesn't offer a magnet program."}
{"sample_id": 9494, "db_id": "california_schools", "final": {"question": "How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?", "sql": "SELECT T1.'Enrollment (Ages 5-17)' FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T2.City = 'Fremont' AND T1.'Academic Year' BETWEEN 2014 AND 2015", "source_tables": ["frpm", "schools"]}, "evidence": "State Special School means EdOpsCode = 'SSS'"}
{"sample_id": 9495, "db_id": "california_schools", "final": {"question": "What is the free or reduced price meal count for ages 5 to 17 in the Youth Authority School with a mailing street address of PO Box 1040?", "sql": "SELECT T1.'FRPM Count (Ages 5-17)' FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.MailStreet = 'PO Box 1040' AND T2.SOCType = 'Youth Authority Facilities'", "source_tables": ["frpm", "schools"]}, "evidence": ""}
{"sample_id": 9496, "db_id": "california_schools", "final": {"question": "What is the lowest grade for the District Special Education Consortia School with National Center for Educational Statistics school district identification number of 0613360?", "sql": "SELECT MIN(T1.'Low Grade') FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.NCESDist = '0613360' AND T2.EdOpsCode = 'SPECON'", "source_tables": ["frpm", "schools"]}, "evidence": "District Special Education Consortia School refers to EdOpsCode = 'SPECON'."}
{"sample_id": 9497, "db_id": "california_schools", "final": {"question": "What is the educational level name for the schools with Breakfast Provision 2 in county code 37? Indicate the name of the school.", "sql": "SELECT T2.EILName, T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.'NSLP Provision Status' = 'Breakfast Provision 2' AND T1.'County Code' = 37", "source_tables": ["frpm", "schools"]}, "evidence": ""}
{"sample_id": 9498, "db_id": "california_schools", "final": {"question": "What is the city location of the high school level school with Lunch Provision 2 whose lowest grade is 9 and the highest grade is 12 in the county of Merced?", "sql": "SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.'NSLP Provision Status' = 'Lunch Provision 2' AND T2.County = 'Merced' AND T1.'Low Grade' = 9 AND T1.'High Grade' = 12 AND T2.EILCode = 'HS'", "source_tables": ["frpm", "schools"]}, "evidence": "High school can be represented as EILCode = 'HS'"}
{"sample_id": 9499, "db_id": "california_schools", "final": {"question": "Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?", "sql": "SELECT T2.School, T1.'FRPM Count (Ages 5-17)' * 100 / T1.'Enrollment (Ages 5-17)' FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'", "source_tables": ["frpm", "schools"]}, "evidence": "Percent (%) Eligible FRPM (Ages 5-17) can be acquired by `FRPM Count (Ages 5-17)` / `Enrollment (Ages 5-17)` * 100"}
{"sample_id": 9500, "db_id": "california_schools", "final": {"question": "What is the most common type of grade span served in the city of Adelanto?", "sql": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1", "source_tables": ["schools"]}, "evidence": ""}
{"sample_id": 9501, "db_id": "california_schools", "final": {"question": "Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount.", "sql": "SELECT County, COUNT(Virtual) FROM schools WHERE (County = 'San Diego' OR County = 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY COUNT(Virtual) DESC LIMIT 1", "source_tables": ["schools"]}, "evidence": "'Does not offer physical building' means Virtual = F in the database."}
{"sample_id": 9502, "db_id": "california_schools", "final": {"question": "What is the school type of the school with the highest latitude? Indicate the name of the school as well as the latitude coordinates.", "sql": "SELECT T1.'School Type', T1.'School Name', T2.Latitude FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.Latitude DESC LIMIT 1", "source_tables": ["frpm", "schools"]}, "evidence": ""}
{"sample_id": 9503, "db_id": "california_schools", "final": {"question": "In which city can you find the school in the state of California with the lowest latitude coordinates and what is its lowest grade? Indicate the school name.", "sql": "SELECT T2.City, T1.'Low Grade', T1.'School Name' FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.State = 'CA' ORDER BY T2.Latitude ASC LIMIT 1", "source_tables": ["frpm", "schools"]}, "evidence": "State of California refers to state = 'CA'"}
{"sample_id": 9504, "db_id": "california_schools", "final": {"question": "What is the grade span offered in the school with the highest longitude?", "sql": "SELECT GSoffered FROM schools ORDER BY ABS(longitude) DESC LIMIT 1", "source_tables": ["schools"]}, "evidence": "the highest longitude refers to the school with the maximum absolute longitude value."}
{"sample_id": 9505, "db_id": "california_schools", "final": {"question": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.", "sql": "SELECT T2.City, COUNT(T2.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Magnet = 1 AND T2.GSoffered = 'K-8' AND T1.'NSLP Provision Status' = 'Multiple Provision Types' GROUP BY T2.City", "source_tables": ["frpm", "schools"]}, "evidence": "Kindergarten to 8th grade refers to K-8; 'Offers a magnet program' means Magnet = 1; Multiple Provision Types refers to `NSLP Provision Status` = 'Multiple Provision Types'"}
{"sample_id": 9506, "db_id": "california_schools", "final": {"question": "What are the two most common first names among the school administrators? Indicate the district to which they administer.", "sql": "SELECT DISTINCT T1.AdmFName1, T1.District FROM schools AS T1 INNER JOIN ( SELECT admfname1 FROM schools GROUP BY admfname1 ORDER BY COUNT(admfname1) DESC LIMIT 2 ) AS T2 ON T1.AdmFName1 = T2.admfname1", "source_tables": ["schools"]}, "evidence": ""}
{"sample_id": 9507, "db_id": "california_schools", "final": {"question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.", "sql": "SELECT T1.'Free Meal Count (K-12)' * 100 / T1.'Enrollment (K-12)', T1.'District Code' FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'", "source_tables": ["frpm", "schools"]}, "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%"}
{"sample_id": 9508, "db_id": "california_schools", "final": {"question": "What is the administrator's last name that oversees the school with Charter number 40? Indicate the district, the county where the school is situated, and the name of the school.", "sql": "SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '0040'", "source_tables": ["schools"]}, "evidence": ""}
{"sample_id": 9509, "db_id": "california_schools", "final": {"question": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools?", "sql": "SELECT T2.AdmEmail1, T2.AdmEmail2 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'San Bernardino' AND T2.City = 'San Bernardino' AND T2.DOC = 54 AND strftime('%Y', T2.OpenDate) BETWEEN '2009' AND '2010' AND T2.SOC = 62", "source_tables": ["frpm", "schools"]}, "evidence": "Intermediate/Middle Schools refers to SOC = 62; Unified School refers to DOC = 54; years between 2009 and 2010 can refer to 'between 1/1/2009 to 12/31/2010'"}
{"sample_id": 9510, "db_id": "california_schools", "final": {"question": "What is the administrator's email address for the school with the highest number of test takers who received SAT scores of at least 1500?Provide the name of the school.", "sql": "SELECT T2.AdmEmail1, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1", "source_tables": ["satscores", "schools"]}, "evidence": ""}
{"sample_id": 9595, "db_id": "financial", "final": {"question": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?", "sql": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM 'order' GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539", "source_tables": ["order", "account"]}, "evidence": "k_symbol refers to the purpose of payments"}
{"sample_id": 9596, "db_id": "financial", "final": {"question": "What year was account owner number 130 born?", "sql": "SELECT STRFTIME('%Y', T1.birth_date) FROM client AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id INNER JOIN account AS T2 ON T3.account_id = T2.account_id WHERE T2.account_id = 130", "source_tables": ["disp", "client", "account"]}, "evidence": ""}
{"sample_id": 9597, "db_id": "financial", "final": {"question": "How many accounts have an owner disposition and request for a statement to be generated upon a transaction?", "sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU'", "source_tables": ["disp", "account"]}, "evidence": "Frequency = 'POPLATEK PO OBRATU' stands for issuance after transaction"}
{"sample_id": 9598, "db_id": "financial", "final": {"question": "What is the amount of debt that client number 992 has, and how is this client doing with payments?", "sql": "SELECT T4.amount, T4.status FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 on T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 992", "source_tables": ["disp", "loan", "client", "account"]}, "evidence": ""}
{"sample_id": 9599, "db_id": "financial", "final": {"question": "What is the sum that client number 4's account has following transaction 851? Who owns this account, a man or a woman?", "sql": "SELECT T4.balance, T1.gender FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id =T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 4 AND T4.trans_id = 851", "source_tables": ["disp", "trans", "client", "account"]}, "evidence": ""}
{"sample_id": 9600, "db_id": "financial", "final": {"question": "Which kind of credit card does client number 9 possess?", "sql": "SELECT T3.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.client_id = 9", "source_tables": ["disp", "client", "card"]}, "evidence": ""}
{"sample_id": 9601, "db_id": "financial", "final": {"question": "How much, in total, did client number 617 pay for all of the transactions in 1998?", "sql": "SELECT SUM(T3.amount) FROM client AS T1 INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date)= '1998' AND T1.client_id = 617", "source_tables": ["disp", "trans", "client", "account"]}, "evidence": ""}
{"sample_id": 9602, "db_id": "financial", "final": {"question": "Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in East Bohemia, along with their IDs.", "sql": "SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id and T4.account_id = T3.account_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'", "source_tables": ["disp", "district", "client", "account"]}, "evidence": ""}
{"sample_id": 9603, "db_id": "financial", "final": {"question": "Please provide the IDs of the 3 female clients with the largest loans.", "sql": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T4 on T1.client_id= T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id  INNER JOIN loan AS T3 ON T2.account_id = T3.account_id and T4.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3", "source_tables": ["disp", "loan", "client", "account"]}, "evidence": "Female refers to gender = 'F'"}
{"sample_id": 9604, "db_id": "financial", "final": {"question": "How many male customers who were born between 1974 and 1976 have made a payment on their home in excess of $4000?", "sql": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T2.account_id = T4.account_id INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE STRFTIME('%Y', T3.birth_date) BETWEEN '1974' AND '1976' AND T3.gender = 'M' AND T1.amount > 4000 AND T1.k_symbol = 'SIPO'", "source_tables": ["disp", "trans", "client", "account"]}, "evidence": "Man and male refers to gender = 'M'; 'SIPO' stands for household payment"}
{"sample_id": 9605, "db_id": "financial", "final": {"question": "How many accounts in Beroun were opened after 1996?", "sql": "SELECT COUNT(account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) > '1996' AND T2.A2 = 'Beroun'", "source_tables": ["district", "account"]}, "evidence": ""}
{"sample_id": 9606, "db_id": "financial", "final": {"question": "How many female customers have a junior credit card?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior'", "source_tables": ["disp", "client", "card"]}, "evidence": "Female refers to gender = 'F'"}
{"sample_id": 9607, "db_id": "financial", "final": {"question": "What proportion of customers who have accounts at the Prague branch are female?", "sql": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) / COUNT(T2.client_id) * 100 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'Prague'", "source_tables": ["district", "client"]}, "evidence": "Female refers to gender = 'F'; Percentage of female clients in Prague branch = count[female clients with accounts in Prague branch / count(clients with accounts in Prague branch)] * 100%; A3 may contain information about Prague"}
{"sample_id": 9608, "db_id": "financial", "final": {"question": "What percentage of male clients request for weekly statements to be issued?", "sql": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T3 ON T1.district_id = T3.district_id INNER JOIN account AS T2 ON T2.district_id = T3.district_id INNER JOIN disp as T4 on T1.client_id = T4.client_id AND T2.account_id = T4.account_id WHERE T2.frequency = 'POPLATEK TYDNE'", "source_tables": ["disp", "district", "client", "account"]}, "evidence": "Percentage of male clients = [count(male clients who requested weekly statements / count(clients who requested weekly statements)] * 100%; Male means gender = 'M'; 'POPLATEK TYDNE' stands for weekly issuance"}
{"sample_id": 9609, "db_id": "financial", "final": {"question": "How many clients who choose statement of weekly issuance are Owner?", "sql": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T2.account_id = T1.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.type = 'OWNER'", "source_tables": ["disp", "account"]}, "evidence": "Frequency = 'POPLATEK TYDNE' refers to weekly issuance"}
{"sample_id": 9610, "db_id": "financial", "final": {"question": "Among the accounts who have loan validity more than 24 months, list out the accounts that have the lowest approved amount and have account opening date before 1997.", "sql": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 24 AND STRFTIME('%Y', T2.date) < '1997' ORDER BY T1.amount ASC LIMIT 1", "source_tables": ["loan", "account"]}, "evidence": ""}
{"sample_id": 9611, "db_id": "financial", "final": {"question": "Name the account numbers of female clients who are oldest and have lowest average salary?", "sql": "SELECT T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id AND T4.account_id = T3.account_id  WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC, T2.A11 ASC LIMIT 1", "source_tables": ["disp", "district", "client", "account"]}, "evidence": "Female refers to 'F' in the gender; A11 contains information about average salary"}
{"sample_id": 9612, "db_id": "financial", "final": {"question": "How many clients who were born in 1920 stay in east Bohemia?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia'", "source_tables": ["district", "client"]}, "evidence": "East Bohemia appears in the column A3, which refers to the region."}
{"sample_id": 9613, "db_id": "financial", "final": {"question": "How many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement.", "sql": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration = 24 AND T1.frequency = 'POPLATEK TYDNE'", "source_tables": ["loan", "account"]}, "evidence": "Frequency = 'POPLATEK TYDNE' referes to weekly statement"}
{"sample_id": 9614, "db_id": "financial", "final": {"question": "What is the average amount of loan which are still on running contract with statement issuance after each transaction?", "sql": "SELECT AVG(T2.amount) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.frequency = 'POPLATEK PO OBRATU'", "source_tables": ["loan", "account"]}, "evidence": "status = 'C' stands for running contract, OK so far; status = 'D' stands for running contract, client in debt. 'POPLATEK PO OBRATU' stands for issuance after transaction"}
{"sample_id": 9615, "db_id": "financial", "final": {"question": "List all ID and district for clients that can only have the right to issue permanent orders or apply for loans.", "sql": "SELECT T3.client_id, T2.district_id, T2.A2 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T3.type = 'OWNER'", "source_tables": ["disp", "district", "account"]}, "evidence": "Only the owner accounts have the right to issue permanent orders or apply for loans"}
{"sample_id": 9616, "db_id": "financial", "final": {"question": "Provide the IDs and age of the client with high level credit card, which is eligible for loans.", "sql": "SELECT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'", "source_tables": ["disp", "client", "card"]}, "evidence": "the credit card is high-level refers to card.type = 'gold'; eligible for loans refers to disp.type = 'OWNER'"}
{"sample_id": 9733, "db_id": "toxicology", "final": {"question": "How many molecules without sulphur element is not having double bond?", "sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element <> 's' AND T2.bond_type <> '='", "source_tables": ["bond", "atom"]}, "evidence": "double bond refers to bond_type = ' = '; bond_type ! = ' = '; sulphur refers to element = 's'"}
{"sample_id": 9734, "db_id": "toxicology", "final": {"question": "What is the carcinogenic label for bond TR001_2_4?", "sql": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_id = 'TR001_2_4'", "source_tables": ["molecule", "atom", "bond"]}, "evidence": "label = '+' mean molecules are carcinogenic"}
{"sample_id": 9735, "db_id": "toxicology", "final": {"question": "How many atoms belong to molecule id TR001?", "sql": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR001'", "source_tables": ["atom"]}, "evidence": ""}
{"sample_id": 9736, "db_id": "toxicology", "final": {"question": "How many single bonds are there in the list?", "sql": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '-'", "source_tables": ["bond"]}, "evidence": "single bond refers to bond_type = '-';"}
{"sample_id": 9737, "db_id": "toxicology", "final": {"question": "Among the molecules which contain \"cl\" element, which of them are carcinogenic?", "sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'", "source_tables": ["molecule", "atom"]}, "evidence": "label = '+' mean molecules are carcinogenic;"}
{"sample_id": 9738, "db_id": "toxicology", "final": {"question": "Among the molecules which contain \"c\" element, which of them are not carcinogenic?", "sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'", "source_tables": ["molecule", "atom"]}, "evidence": "label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9739, "db_id": "toxicology", "final": {"question": "Calculate the percentage of carcinogenic molecules which contain the Chlorine element.", "sql": "SELECT COUNT(CASE WHEN T2.label = '+' AND T1.element = 'cl' THEN T2.molecule_id ELSE NULL END) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id", "source_tables": ["molecule", "atom"]}, "evidence": "label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+' and element = 'cl'), COUNT(molecule_id)) as percentage"}
{"sample_id": 9740, "db_id": "toxicology", "final": {"question": "What is the molecule id of bond id TR001_1_7?", "sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_1_7'", "source_tables": ["atom", "connected"]}, "evidence": ""}
{"sample_id": 9741, "db_id": "toxicology", "final": {"question": "How many elements are contained in bond_id TR001_3_4?", "sql": "SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_3_4'", "source_tables": ["atom", "connected"]}, "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"}
{"sample_id": 9742, "db_id": "toxicology", "final": {"question": "What is the type of the bond which is presenting the connection between two atoms TR000_1 and TR000_2?", "sql": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_1' AND T2.atom_id2 = 'TR000_2'", "source_tables": ["bond", "connected"]}, "evidence": "type of bond refers to bond_type; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';"}
{"sample_id": 9743, "db_id": "toxicology", "final": {"question": "What is the molecule of atom id \"TR000_2\" and atom id 2 \"TR000_4\"?", "sql": "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'", "source_tables": ["bond", "connected"]}, "evidence": ""}
{"sample_id": 9744, "db_id": "toxicology", "final": {"question": "What is the element of toxicology for the atom with the ID of TR000_1?", "sql": "SELECT T.element FROM atom AS T WHERE T.atom_id = 'TR000_1'", "source_tables": ["atom"]}, "evidence": "atom with ID refers to atom_id; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"}
{"sample_id": 9745, "db_id": "toxicology", "final": {"question": "Is molecule TR000 is carcinogenic or not?", "sql": "SELECT label FROM molecule AS T WHERE T.molecule_id = 'TR000'", "source_tables": ["molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9746, "db_id": "toxicology", "final": {"question": "Find the percentage of atoms with single bond.", "sql": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond t", "source_tables": ["bond"]}, "evidence": "single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(bond_type = '-'), COUNT(bond_id)) as percentage"}
{"sample_id": 9747, "db_id": "toxicology", "final": {"question": "How many carcinogenic molecules that consisted of Nitrogen?", "sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'n' AND T1.label = '+'", "source_tables": ["atom", "molecule"]}, "evidence": "nitrogen refers to element = 'n'; label = '+' mean molecules are carcinogenic;"}
{"sample_id": 9748, "db_id": "toxicology", "final": {"question": "Which molecule consisted of Sulphur atom with double bond?", "sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 's' AND T2.bond_type = '='", "source_tables": ["bond", "atom"]}, "evidence": "sulphur refers to element - 's'; double bond refers to bond_type = ' = ';"}
{"sample_id": 9749, "db_id": "toxicology", "final": {"question": "Which non-carcinogenic molecules consisted more than 5 atoms?", "sql": "SELECT T.molecule_id FROM ( SELECT T1.molecule_id, COUNT(T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5 ) t", "source_tables": ["atom", "molecule"]}, "evidence": "label = '-' means molecules are non-carcinogenic; molecules consisted more than 5 atoms refers to COUNT(molecule_id) > 5"}
{"sample_id": 9750, "db_id": "toxicology", "final": {"question": "List all the elements with double bond, consisted in molecule TR024.", "sql": "SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR024' AND T2.bond_type = '='", "source_tables": ["bond", "atom"]}, "evidence": "double bond refers to bond_type = '='; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"}
{"sample_id": 9751, "db_id": "toxicology", "final": {"question": "Which carcinogenic molecule have the highest number of atoms consisted in it?", "sql": "SELECT T.molecule_id FROM ( SELECT T2.molecule_id, COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T2.molecule_id ORDER BY COUNT(T1.atom_id) DESC LIMIT 1 ) t", "source_tables": ["molecule", "atom"]}, "evidence": "label = '+' mean molecules are carcinogenic; molecule that have the highest number of atoms consisted in in refers to MAX(COUNT(atom.molecule_id))"}
{"sample_id": 9752, "db_id": "toxicology", "final": {"question": "Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms.", "sql": "SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T2.element = 'h'", "source_tables": ["atom", "molecule", "bond"]}, "evidence": "hydrogen refers to element = 'h'; label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) * 100.0 where element = 'h' AND bond_type = '#';"}
{"sample_id": 9753, "db_id": "toxicology", "final": {"question": "How many of the molecules are carcinogenic?", "sql": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'", "source_tables": ["molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic;"}
{"sample_id": 9754, "db_id": "toxicology", "final": {"question": "Among the molecules between TR004 to TR010, how many of them has single bonds?", "sql": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.molecule_id BETWEEN 'TR004' AND 'TR010' AND T.bond_type = '-'", "source_tables": ["bond"]}, "evidence": "single bond refers to bond_type = '-'; molecules between TR004 to TR010 refers molecule_id BETWEEN 'TR004' and 'TR010';"}
{"sample_id": 9755, "db_id": "toxicology", "final": {"question": "In the molecule TR008, how many carbons are present?", "sql": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR008' AND T.element = 'c'", "source_tables": ["atom"]}, "evidence": "carbon refers to element = 'c'"}
{"sample_id": 9756, "db_id": "toxicology", "final": {"question": "What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic?", "sql": "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'", "source_tables": ["molecule", "atom"]}, "evidence": "label = '-' means molecules are non-carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"}
{"sample_id": 9757, "db_id": "toxicology", "final": {"question": "What is the total number of molecules with double bonded oxygen?", "sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' AND T1.element = 'o'", "source_tables": ["bond", "atom"]}, "evidence": "oxygen refers to element = 'o'; double bond refers to bond_type = ' = ';"}
{"sample_id": 9758, "db_id": "toxicology", "final": {"question": "in molecules with triple bonds, how many of them are not carcinogenic?", "sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '-'", "source_tables": ["bond", "molecule"]}, "evidence": "triple bond refers to bond_type = '#'; label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9759, "db_id": "toxicology", "final": {"question": "List the element and bond type included in the molecule with molecule ID of TR002.", "sql": "SELECT DISTINCT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR002'", "source_tables": ["bond", "atom"]}, "evidence": "TR002 is the molecule id"}
{"sample_id": 9760, "db_id": "toxicology", "final": {"question": "What is the atom ID of double bonded carbon in TR012 molecule?", "sql": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.molecule_id = 'TR012' AND T3.bond_type = '=' AND T1.element = 'c'", "source_tables": ["molecule", "atom", "bond"]}, "evidence": "carbon refers to element = 'c'; double bond refers to bond_type = ' = ';"}
{"sample_id": 9761, "db_id": "toxicology", "final": {"question": "List the atom ID of the carcinogenic molecule that contains oxygen?", "sql": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.label = '+'", "source_tables": ["molecule", "atom"]}, "evidence": "label = '+' mean molecules are carcinogenic; oxygen refers to element = 'o'"}
{"sample_id": 9914, "db_id": "card_games", "final": {"question": "For the set \"From the Vault: Lore\", what is its expansion type?", "sql": "SELECT type FROM sets WHERE name LIKE '%FROM the Vault: Lore%'", "source_tables": ["sets"]}, "evidence": "set \"From the Vault refers to name which contains 'From the Vault: Lore'; expansion type refers to type"}
{"sample_id": 9915, "db_id": "card_games", "final": {"question": "For the set \"Commander 2014 Oversized\" , give its parent code.", "sql": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'", "source_tables": ["sets"]}, "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';"}
{"sample_id": 9916, "db_id": "card_games", "final": {"question": "For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values.", "sql": "SELECT T2.text , CASE WHEN T1.hasContentWarning = 1 THEN 'YES' ELSE 'NO' END FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Jim Pavelec'", "source_tables": ["cards", "rulings"]}, "evidence": "all cards illustrated by Jim Pavelec refers to artist = 'Jim Pavelec'; the text of the ruling refers to text; cards have missing or degraded properties and values if hasContentWarning = 1 else it doesn't have;"}
{"sample_id": 9917, "db_id": "card_games", "final": {"question": "What was the release date for the set which card \"Evacuation\" in it?", "sql": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'", "source_tables": ["sets", "cards"]}, "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate"}
{"sample_id": 9918, "db_id": "card_games", "final": {"question": "What is the number of cards are there in the set of \"Rinascita di Alara\"?", "sql": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Rinascita di Alara'", "source_tables": ["sets", "set_translations"]}, "evidence": "number of cards refers to baseSetSize; set of \"Rinascita di Alara\" refers to translation = 'Rinascita di Alara'"}
{"sample_id": 9919, "db_id": "card_games", "final": {"question": "List the expansion type of the set \"Huiti\u00e8me \u00e9dition\".", "sql": "SELECT type FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE translation = 'Huiti\u00e8me \u00e9dition' )", "source_tables": ["sets", "set_translations"]}, "evidence": "the set \"Huiti\u00e8me \u00e9dition\" refers to translation = 'Huiti\u00e8me \u00e9dition'; expansion type refers to type"}
{"sample_id": 9920, "db_id": "card_games", "final": {"question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?", "sql": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL", "source_tables": ["cards", "set_translations"]}, "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation"}
{"sample_id": 9921, "db_id": "card_games", "final": {"question": "How many translations of the name of the set \"Tenth Edition\"?", "sql": "SELECT COUNT(DISTINCT T2.translation) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Tenth Edition' AND T2.translation IS NOT NULL", "source_tables": ["sets", "set_translations"]}, "evidence": "translations of the name refers to translation; translation is not NULL; set \"Salvat 2011\" refers to name = 'Tenth Edition'"}
{"sample_id": 9922, "db_id": "card_games", "final": {"question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.", "sql": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL", "source_tables": ["cards", "set_translations"]}, "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'"}
{"sample_id": 9923, "db_id": "card_games", "final": {"question": "Which card name in the set 'Journey into Nyx Hero's Path' has the highest converted mana cost.", "sql": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Journey into Nyx Hero''s Path' ORDER BY T1.convertedManaCost DESC LIMIT 1", "source_tables": ["sets", "cards"]}, "evidence": "set 'Journey into Nyx Hero's Path' refers to name = 'Journey into Nyx Hero''s Path'"}
{"sample_id": 9924, "db_id": "card_games", "final": {"question": "What is the release date for the set \"Ola de fr\u00edo\"?", "sql": "SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Ola de fr\u00edo'", "source_tables": ["sets", "set_translations"]}, "evidence": "release date is the date of card set being released; set \"Ola de fr\u00edo\" refers to translation = 'Ola de fr\u00edo'"}
{"sample_id": 9925, "db_id": "card_games", "final": {"question": "What was the expansion type for the set which card \"Samite Pilgrim\" in it?", "sql": "SELECT type FROM sets WHERE code IN ( SELECT setCode FROM cards WHERE name = 'Samite Pilgrim' )", "source_tables": ["sets", "cards"]}, "evidence": "expansion type refers to type; card \"Samite Pilgrim\" refers to name = 'Samite Pilgrim'"}
{"sample_id": 9926, "db_id": "card_games", "final": {"question": "How many cards are there in the set 'World Championship Decks 2004' with the converted mana cost as '3'.", "sql": "SELECT COUNT(id) FROM cards WHERE setCode IN ( SELECT code FROM sets WHERE name = 'World Championship Decks 2004' ) AND convertedManaCost = 3", "source_tables": ["sets", "cards"]}, "evidence": "the set 'World Championship Decks 2004' refers to name = 'World Championship Decks 2004'"}
{"sample_id": 9927, "db_id": "card_games", "final": {"question": "Show the Simplified Chinese translation of the name of the set \"Mirrodin\"?", "sql": "SELECT translation FROM set_translations WHERE setCode IN ( SELECT code FROM sets WHERE name = 'Mirrodin' ) AND language = 'Chinese Simplified'", "source_tables": ["sets", "set_translations"]}, "evidence": "Simplified Chinese translation refers to language = 'Chinese Simplified'; name of the set \"Mirrodin\" refers to name = 'Mirrodin'"}
{"sample_id": 9928, "db_id": "card_games", "final": {"question": "For all the set of cards that has Japanese translation, what is the percentage of them are only available in non-foil?", "sql": "SELECT CAST(SUM(CASE WHEN isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Japanese' )", "source_tables": ["sets", "set_translations"]}, "evidence": "Japanese translation refers to language = 'Japanese'; in non-foil refers to isNonFoilOnly = 1; percentage of Japanese non foil in Japanese cards refers to DIVIDE(SUM(isNonFoilOnly = 1), SUM(language = 'Japanese'))*100"}
{"sample_id": 9929, "db_id": "card_games", "final": {"question": "For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online?", "sql": "SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Portuguese (Brazil)' )", "source_tables": ["sets", "set_translations"]}, "evidence": "Brazil Portuguese translation refers to language = 'Portuguese (Brazil)'; only available online refers to isOnlineOnly = 1; percentage of online only Brazil Portuguese in all Brazil Portuguese cards refers to DIVIDE(SUM(isOnlineOnly = 1), SUM(language = 'Portuguese (Brazil)))*100"}
{"sample_id": 9930, "db_id": "card_games", "final": {"question": "What are the available printing types of the cards that doesn't have a text box created by Aleksi Briclot?", "sql": "SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1", "source_tables": ["cards"]}, "evidence": "created by Aleksi Briclot refers to artist = 'Aleksi Briclot'; doesn't have a text box refers to isTextless = 1; available printing types refers to availability"}
{"sample_id": 9931, "db_id": "card_games", "final": {"question": "What is the unique id of the set that has the highest number of cards?", "sql": "SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1", "source_tables": ["sets"]}, "evidence": "the highest number of cards refers to MAX(baseSetSize); unique id refers to id"}
{"sample_id": 9932, "db_id": "card_games", "final": {"question": "Among the cards that doesn't have multiple faces on the same card, who is the illustrator of the card art that has the highest cost of converted mana?", "sql": "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1", "source_tables": ["cards"]}, "evidence": "doesn't have multiple faces refers to side IS NULL; illustrator refers to artist"}
{"sample_id": 9933, "db_id": "card_games", "final": {"question": "What is the most common visual frame effects among the incredibly powerful foils?", "sql": "SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(frameEffects) DESC LIMIT 1", "source_tables": ["cards"]}, "evidence": "when both cardKingdomFoilId and cardKingdomId are not null, this foil is incredibly powerful; most common visual frame effects refers to MAX(frameEffects)"}
{"sample_id": 9934, "db_id": "card_games", "final": {"question": "How many cards with unknown power that can't be found in foil is in duel deck A?", "sql": "SELECT SUM(CASE WHEN power = '*' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE hasFoil = 0 AND duelDeck = 'a'", "source_tables": ["cards"]}, "evidence": "unknown power refers to power IS NULL or power = '*'; can't be found in foil refers to hasFoil = 0; duel deck A refers to duelDeck = 'a'"}
{"sample_id": 9935, "db_id": "card_games", "final": {"question": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.", "sql": "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1", "source_tables": ["sets"]}, "evidence": "expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize)"}
{"sample_id": 9936, "db_id": "card_games", "final": {"question": "In duels, what are the top 10 cards with the highest uncoverted mana cost?", "sql": "SELECT DISTINCT name FROM cards WHERE uuid IN ( SELECT uuid FROM legalities WHERE format = 'duel' ) ORDER BY manaCost DESC LIMIT 0, 10", "source_tables": ["cards", "legalities"]}, "evidence": "duels refer to format = 'duel'; the highest uncoverted mana cost refers to MAX(manaCost)"}
{"sample_id": 9937, "db_id": "card_games", "final": {"question": "When was the oldest mythic card released and what are its legal play formats?", "sql": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1", "source_tables": ["cards", "legalities"]}, "evidence": "the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format"}
{"sample_id": 9938, "db_id": "card_games", "final": {"question": "How many cards did Volkan Ba\u00c7\u00b5a illustrated whose foreign language is in French?", "sql": "SELECT COUNT(T3.id) FROM ( SELECT T1.id FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Volkan Ba\u01f5a' AND T2.language = 'French' GROUP BY T1.id ) AS T3", "source_tables": ["foreign_data", "cards"]}, "evidence": "Volkan Ba\u00c7\u00b5a refers to artist = 'Volkan Ba\u01f5a'; foreign language is in French refers to language = 'French'"}
{"sample_id": 9939, "db_id": "card_games", "final": {"question": "How many rare enchantment Abundance cards are there whose play format status are all legal?", "sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.rarity = 'rare' AND T1.types = 'Enchantment' AND T1.name = 'Abundance' AND T2.status = 'Legal'", "source_tables": ["cards", "legalities"]}, "evidence": "rare refers to rarity = 'rare'; enchantment card refers to types = 'Enchantment'; Abundance cards refers to name = 'Abundance'; format status are all legal refers to status = 'Legal'"}
{"sample_id": 9940, "db_id": "card_games", "final": {"question": "Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.", "sql": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'", "source_tables": ["cards", "maxbanned", "legalities"]}, "evidence": "play format refers to format; banned status refers to status = 'Banned'; the highest number of banned status refers to MAX(COUNT(status = 'Banned'))"}
{"sample_id": 9941, "db_id": "card_games", "final": {"question": "What is the language of the \"Battlebond\" set?", "sql": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM sets WHERE name = 'Battlebond' )", "source_tables": ["sets", "set_translations"]}, "evidence": "\"Battlebond\" set refers to name = 'Battlebond'"}
{"sample_id": 9942, "db_id": "card_games", "final": {"question": "Who is the illustrator that illustrated the least amount of cards? List the format of play of the cards that he/she illustrated.", "sql": "SELECT T1.artist, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid GROUP BY T1.artist ORDER BY COUNT(T1.id) ASC LIMIT 1", "source_tables": ["cards", "legalities"]}, "evidence": "format of the cards refers to format; illustrator refers to artist; the least amount of cards refers to MIN(artist)"}
{"sample_id": 9943, "db_id": "card_games", "final": {"question": "Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in legacy play format that has sensitive content or Wizards of the Coast?", "sql": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.frameVersion = 1997 AND T1.hasContentWarning = 1 AND T1.artist = 'D. Alexander Gregory' AND T2.format = 'legacy'", "source_tables": ["cards", "legalities"]}, "evidence": "version of frame style is 1997 refers to frameVersion = '1997'; illustrated by D. Alexander Gregory refers to artist = 'D. Alexander Gregory'; sensitive content refers to hasContentWarning = 1; legacy play format refers to format = 'legacy'; status of the card refers to status"}
{"sample_id": 9944, "db_id": "card_games", "final": {"question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.", "sql": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format", "source_tables": ["cards", "legalities"]}, "evidence": "ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'Banned'; play format refers to format; cards name refers to name"}
{"sample_id": 9945, "db_id": "card_games", "final": {"question": "What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card.", "sql": "SELECT (CAST(SUM(T1.id) AS REAL) / COUNT(T1.id)) / 4, T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.id = T2.id WHERE T1.releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY T1.releaseDate ORDER BY COUNT(T2.language) DESC LIMIT 1", "source_tables": ["sets", "set_translations"]}, "evidence": "AVG(id); releaseDate BETWEEN 1/1/2012 AND 12/31/2015; the common language refers to MAX(COUNT(language))"}
{"sample_id": 9946, "db_id": "card_games", "final": {"question": "List the artists who illustrated cards with black borders which are available only in arena.", "sql": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'", "source_tables": ["cards"]}, "evidence": "black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'"}
{"sample_id": 9947, "db_id": "card_games", "final": {"question": "Find the uuid of cards in which the old school format is restricted or banned.", "sql": "SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Banned' OR status = 'Restricted')", "source_tables": ["legalities"]}, "evidence": "old school format refers to format = 'oldschool'; restricted or banned refers to status = 'banned' or 'restricted'"}
{"sample_id": 9948, "db_id": "card_games", "final": {"question": "Among the card designed by Matthew D. Wilson, how many are available only in the paper?", "sql": "SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'", "source_tables": ["cards"]}, "evidence": "card designed by Matthew D. Wilson refers to artist = 'Matthew D. Wilson'; available only in the paper refers to availability = 'paper'"}
{"sample_id": 9949, "db_id": "card_games", "final": {"question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.", "sql": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC", "source_tables": ["cards", "rulings"]}, "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);"}
{"sample_id": 9950, "db_id": "card_games", "final": {"question": "List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal.", "sql": "SELECT DISTINCT T2.name , CASE WHEN T1.status = 'Legal' THEN T1.format ELSE NULL END FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.setCode IN ( SELECT code FROM sets WHERE name = 'Hour of Devastation' )", "source_tables": ["sets", "cards", "legalities"]}, "evidence": "the set Hour of Devastation refers to set.name = 'Hour of Devastation'; names of all the cards in the set refers to cards.name; legal cards refers to status = 'Legal'; the formats refers to format"}
{"sample_id": 9951, "db_id": "card_games", "final": {"question": "Find and list the names of sets which doesn't have Japanese translation but have Korean translation.", "sql": "SELECT name FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Korean' AND language NOT LIKE '%Japanese%' )", "source_tables": ["sets", "set_translations"]}, "evidence": "names of sets refers to name; doesn't have Japanese translation refers to language not like '%Japanese%'; have Korean translation refers to language = 'Korean'"}
{"sample_id": 9952, "db_id": "card_games", "final": {"question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.", "sql": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'", "source_tables": ["cards", "legalities"]}, "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'"}
{"sample_id": 10101, "db_id": "codebase_community", "final": {"question": "Which post has the highest score? Please give its id and title's name.", "sql": "SELECT T1.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T2.Score DESC LIMIT 1", "source_tables": ["users", "posts"]}, "evidence": "the highest score refers to MAX(Score); owner's name refers to DisplayName;"}
{"sample_id": 10102, "db_id": "codebase_community", "final": {"question": "What is the average score of Stephen Turner's posts?", "sql": "SELECT AVG(T2.Score) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Stephen Turner'", "source_tables": ["users", "posts"]}, "evidence": "DisplayName = 'Stephen Turner'; average score refers to AVG(Score);"}
{"sample_id": 10103, "db_id": "codebase_community", "final": {"question": "Please list the users' display names whose posts had over 20000 views in 2011.", "sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2011' AND T2.ViewCount > 20000", "source_tables": ["users", "posts"]}, "evidence": "had over 20000 views in 2011 refers to ViewCount > 20000 where YEAR(CreationDate) = 2011;"}
{"sample_id": 10104, "db_id": "codebase_community", "final": {"question": "Which is the most valuable post in 2010? Please give its id and the owner's display name.", "sql": "SELECT T2.OwnerUserId, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' ORDER BY T2.FavoriteCount DESC LIMIT 1", "source_tables": ["users", "posts"]}, "evidence": "the most valuable post in 2015 refers to MAX(FavoriteCount) where year(CreationDate) = 2010;"}
{"sample_id": 10105, "db_id": "codebase_community", "final": {"question": "What is the percentage of posts whose owners had a reputation of over 1000 in 2011?", "sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T2.CreaionDate) = '2011' AND T1.Reputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId", "source_tables": ["users", "posts"]}, "evidence": "percentage = DIVIDE(COUNT(Id where YEAR(CreationDate) = 2011 and Reputation > 1000), COUNT(Id) ) * 100;"}
{"sample_id": 10106, "db_id": "codebase_community", "final": {"question": "Identify the percentage of teenage users.", "sql": "SELECT CAST(SUM(IIF(Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users", "source_tables": ["users"]}, "evidence": "DIVIDE(COUNT(Id where Age BETWEEN 13 and 18), COUNT(Id)) as percentage;"}
{"sample_id": 10107, "db_id": "codebase_community", "final": {"question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.", "sql": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'", "source_tables": ["users", "posthistory", "posts"]}, "evidence": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';"}
{"sample_id": 10108, "db_id": "codebase_community", "final": {"question": "Identify the total number of posts with views above average.", "sql": "SELECT Id FROM posts WHERE ViewCount > ( SELECT AVG(ViewCount) FROM posts )", "source_tables": ["posts"]}, "evidence": "views above average refer to ViewCount > AVG(ViewCount);"}
{"sample_id": 10109, "db_id": "codebase_community", "final": {"question": "How many comments were added to the post with the highest score?", "sql": "SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T1.Id ORDER BY SUM(T1.Score) DESC LIMIT 1", "source_tables": ["comments", "posts"]}, "evidence": "the highest score refers to MAX(Score);"}
{"sample_id": 10110, "db_id": "codebase_community", "final": {"question": "Identify the number of posts that have been viewed over 35000 times but have received no comments from other users.", "sql": "SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0", "source_tables": ["posts"]}, "evidence": "have been viewed over 35000 times refers to ViewCount > 35000; received no comments refers to CommentCount = 0;"}
{"sample_id": 10111, "db_id": "codebase_community", "final": {"question": "Identify the display name and location of the user, who was the last to edit the post with ID 183.", "sql": "SELECT T2.DisplayName, T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 183 ORDER BY T1.LastEditDate DESC LIMIT 1", "source_tables": ["users", "posts"]}, "evidence": "last to edit refers to MAX(LastEditDate);"}
{"sample_id": 10112, "db_id": "codebase_community", "final": {"question": "Identify the latest badge awarded to the user with the display name Emmett.", "sql": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1", "source_tables": ["users", "badges"]}, "evidence": "the latest badge refers to Name FROM badges where MAX(Date);"}
{"sample_id": 10113, "db_id": "codebase_community", "final": {"question": "Identify the number of adult users who have cast over 5000 upvotes.", "sql": "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000", "source_tables": ["users"]}, "evidence": "adult users refer to Age BETWEEN 19 and 65; over 5000 upvotes refer to UpVotes > 5000;"}
{"sample_id": 10114, "db_id": "codebase_community", "final": {"question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.", "sql": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'", "source_tables": ["users", "badges"]}, "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';"}
{"sample_id": 10115, "db_id": "codebase_community", "final": {"question": "Identify the number of posts and comments left by the user, who has the latest created user account.", "sql": "SELECT COUNT(T2.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T3.PostId = T2.Id ORDER BY T1.CreationDate DESC LIMIT 1", "source_tables": ["users", "comments", "posts"]}, "evidence": "the latest created user account refers to MAX(CreationDate);"}
{"sample_id": 10116, "db_id": "codebase_community", "final": {"question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.", "sql": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10", "source_tables": ["users", "comments", "posts"]}, "evidence": "the latest comment refers to MAX(CreationDate);"}
{"sample_id": 10117, "db_id": "codebase_community", "final": {"question": "How many users were awarded with 'Citizen Patrol' badge?", "sql": "SELECT COUNT(id) FROM badges WHERE 'Name' = 'Citizen Patrol'", "source_tables": ["badges"]}, "evidence": "Citizen Patrol' is the name of the badge;"}
{"sample_id": 10118, "db_id": "codebase_community", "final": {"question": "Count the number of posts with a tag specified as 'careers'.", "sql": "SELECT COUNT(Id) FROM tags WHERE TagName = 'careers'", "source_tables": ["tags"]}, "evidence": "tag specified as 'careers' refers to TagName = 'careers';"}
{"sample_id": 10119, "db_id": "codebase_community", "final": {"question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?", "sql": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'", "source_tables": ["users"]}, "evidence": ""}
{"sample_id": 10120, "db_id": "codebase_community", "final": {"question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?", "sql": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'", "source_tables": ["posts"]}, "evidence": ""}
{"sample_id": 10121, "db_id": "codebase_community", "final": {"question": "When did the user known as 'IrishStat' create his or her account?", "sql": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'", "source_tables": ["users"]}, "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;"}
{"sample_id": 10122, "db_id": "codebase_community", "final": {"question": "Identify the number of posts that offer a bounty amount over 30.", "sql": "SELECT COUNT(id) FROM votes WHERE BountyAmount >= 30", "source_tables": ["votes"]}, "evidence": "bounty amount over 30 refers to BountyAmount > = 30;"}
{"sample_id": 10123, "db_id": "codebase_community", "final": {"question": "Among all the posts posted by the most influential user, identify the percentage with a score above 50.", "sql": "SELECT CAST(SUM(CASE WHEN T2.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users ) T3 ON T1.Reputation = T3.max_reputation", "source_tables": ["users", "posts"]}, "evidence": "The higher reputation the user has the more influence; percentage = DIVIDE(COUNT(stats_posts.Id where Score > 50 and MAX(Reputation))), COUNT(stats_posts.Id where MAX(Reputation));"}
{"sample_id": 10124, "db_id": "codebase_community", "final": {"question": "How many posts have a score less than 20?", "sql": "SELECT COUNT(id) FROM posts WHERE Score < 20", "source_tables": ["posts"]}, "evidence": "score less than 20 refers to Score < 20;"}
{"sample_id": 10125, "db_id": "codebase_community", "final": {"question": "Among the tags with tag ID below 15, how many of them have 20 count of posts and below?", "sql": "SELECT COUNT(id) FROM tags WHERE Count <= 20 AND Id < 15", "source_tables": ["tags"]}, "evidence": "ID below 15 refers to Id < 15; have 20 count of posts and below refers to Count < = 20;"}
{"sample_id": 10126, "db_id": "codebase_community", "final": {"question": "What is the excerpt post ID and wiki post ID of the tag named sample?", "sql": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'", "source_tables": ["tags"]}, "evidence": "tag named sample refers to TagName = 'sample';"}
{"sample_id": 10127, "db_id": "codebase_community", "final": {"question": "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\".", "sql": "SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'", "source_tables": ["users", "comments"]}, "evidence": "Text = 'fine, you win :)';"}
{"sample_id": 10128, "db_id": "codebase_community", "final": {"question": "Give the texts commented on the post about linear regression.", "sql": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%linear regression%'", "source_tables": ["comments", "posts"]}, "evidence": "about linear regression refers to Title contains 'linear regression'"}
{"sample_id": 10129, "db_id": "codebase_community", "final": {"question": "Among the posts with views ranging from 100 to 150, what is the comment with the highest score?", "sql": "SELECT Text FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) ORDER BY Score DESC LIMIT 1", "source_tables": ["comments", "posts"]}, "evidence": "views ranging from 100 to 150 refers to ViewCount BETWEEN 100 and 150; comment with the highest score refers to Text where MAX(Score);"}
{"sample_id": 10130, "db_id": "codebase_community", "final": {"question": "List the creation date and age of the user that commented with webiste.", "sql": "SELECT T2.CreationDate, T2.Age FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.text LIKE '%http://%'", "source_tables": ["users", "comments"]}, "evidence": "commented with webiste refers to the value contains 'http://'"}
{"sample_id": 10131, "db_id": "codebase_community", "final": {"question": "In comments with 0 score, how many of the posts have view count lower than 5?", "sql": "SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount < 5 AND T2.Score = 0", "source_tables": ["comments", "posts"]}, "evidence": "view count lower than 5 refers to ViewCount < 5;"}
{"sample_id": 10132, "db_id": "codebase_community", "final": {"question": "In posts with 1 comment, how many of the comments have 0 score?", "sql": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0", "source_tables": ["comments", "posts"]}, "evidence": "in posts with 1 comment refers to CommentCount = 1;"}
{"sample_id": 10133, "db_id": "codebase_community", "final": {"question": "Among products comments with 0 score, what is the total number of users ages 40 years old?", "sql": "SELECT COUNT(DISTINCT T1.id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40", "source_tables": ["users", "comments"]}, "evidence": ""}
{"sample_id": 10134, "db_id": "codebase_community", "final": {"question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?", "sql": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'", "source_tables": ["comments", "posts"]}, "evidence": "Title = 'Group differences on a five point Likert item';"}
{"sample_id": 10135, "db_id": "codebase_community", "final": {"question": "What is the up vote number of the user that commented \"R is also lazy evaluated.\"?", "sql": "SELECT T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'R is also lazy evaluated.'", "source_tables": ["users", "comments"]}, "evidence": "commented \"R is also lazy evaluated.\" refers to Text of the comment;"}
{"sample_id": 10136, "db_id": "codebase_community", "final": {"question": "List the comments commented by the user with a username of Harvey Motulsky.", "sql": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'", "source_tables": ["users", "comments"]}, "evidence": "comments refer to Text; username of Harvey Motulsky refers to DisplayName = 'Harvey Motulsky';"}
{"sample_id": 10137, "db_id": "codebase_community", "final": {"question": "In comments with score between 1 to 5, list down the display names of the users with 0 down votes.", "sql": "SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0", "source_tables": ["users", "comments"]}, "evidence": "DownVotes = 0; Score BETWEEN 1 and 5"}
{"sample_id": 10138, "db_id": "codebase_community", "final": {"question": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes?", "sql": "SELECT CAST(SUM(IIF(T1.UpVotes = 0, 1, 0)) AS REAL) * 100/ COUNT(T1.Id) AS per FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score BETWEEN 5 AND 10", "source_tables": ["users", "comments"]}, "evidence": "percentage = DIVIDE(COUNT(UserId where UpVotes = 0 and Score BETWEEN 5 and 10))*100, (COUNT(UserId where Score BETWEEN 5 and 10));"}
{"sample_id": 10241, "db_id": "superhero", "final": {"question": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.", "sql": "SELECT SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg is NULL", "source_tables": ["colour", "superhero"]}, "evidence": "missing weight data refers to weight_kg = 0 OR T1.weight_kg = NULL; difference = SUBTRACT(SUM(colour.id = 7), SUM(colour.id = 1)); blue eyes refers to eye_colour_id WHERE colour.id = 7; no eye color refers to eye_colour_id WHERE colour.id = 1;"}
{"sample_id": 10242, "db_id": "superhero", "final": {"question": "How strong is the Hulk?", "sql": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength'", "source_tables": ["attribute", "hero_attribute", "superhero"]}, "evidence": "how strong refers to attribute_value WHERE attribute_name = 'Strength'; the Hulk refers to superhero_name = 'Hulk';"}
{"sample_id": 10243, "db_id": "superhero", "final": {"question": "List down Ajax's superpowers.", "sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'", "source_tables": ["hero_power", "superhero", "superpower"]}, "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;"}
{"sample_id": 10244, "db_id": "superhero", "final": {"question": "How many green-skinned villains are there in the superhero universe?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.alignment = 'Bad' AND T3.colour = 'Green'", "source_tables": ["alignment", "colour", "superhero"]}, "evidence": "green-skinned refers to colour.colour = 'Green' WHERE skin_colour_id = colour.id; villains refers to alignment = 'Bad';"}
{"sample_id": 10245, "db_id": "superhero", "final": {"question": "How many female superheroes are in Marvel Comics?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.gender = 'Female'", "source_tables": ["gender", "publisher", "superhero"]}, "evidence": "female refers to gender = 'Female'; Marvel Comics refers to publisher_name = 'Marvel Comics';"}
{"sample_id": 10246, "db_id": "superhero", "final": {"question": "Identify superheroes who can control wind and list their names in alphabetical order.", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name", "source_tables": ["hero_power", "superhero", "superpower"]}, "evidence": "superheroes refers to superhero_name; can control wind refers to power_name = 'Wind Control';"}
{"sample_id": 10247, "db_id": "superhero", "final": {"question": "Identify the gender of the superhero who has the ability of Phoenix Force.", "sql": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'", "source_tables": ["hero_power", "gender", "superhero", "superpower"]}, "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';"}
{"sample_id": 10248, "db_id": "superhero", "final": {"question": "Identify the heaviest superhero in DC Comics.", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1", "source_tables": ["publisher", "superhero"]}, "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;"}
{"sample_id": 10249, "db_id": "superhero", "final": {"question": "What is the average height of a non-human superhero in Dark Horse Comics?", "sql": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.race != 'Human'", "source_tables": ["race", "publisher", "superhero"]}, "evidence": "average = AVG(height_cm); non-human superhero refers to race <> 'Human'; Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';"}
{"sample_id": 10250, "db_id": "superhero", "final": {"question": "Count the fastest superheroes.", "sql": "SELECT COUNT(T3.superhero_name) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T2.attribute_name = 'Speed' AND T1.attribute_value = 100", "source_tables": ["attribute", "hero_attribute", "superhero"]}, "evidence": "fastest refers to attribute_value = 100 WHERE attribute_name = 'Speed';"}
{"sample_id": 10251, "db_id": "superhero", "final": {"question": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.", "sql": "SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id", "source_tables": ["publisher", "superhero"]}, "evidence": "DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; difference = SUBTRACT(SUM(publisher_name = 'DC Comics'), SUM(publisher_name = 'Marvel Comics'));"}
{"sample_id": 10252, "db_id": "superhero", "final": {"question": "Identify the weakest attribute of the Black Panther.", "sql": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1", "source_tables": ["attribute", "hero_attribute", "superhero"]}, "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';"}
{"sample_id": 10253, "db_id": "superhero", "final": {"question": "What is Abomination's eye colour?", "sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'", "source_tables": ["colour", "superhero"]}, "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;"}
{"sample_id": 10254, "db_id": "superhero", "final": {"question": "Name the tallest superhero.", "sql": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1", "source_tables": ["superhero"]}, "evidence": "tallest superhero refers to MAX(height_cm);"}
{"sample_id": 10255, "db_id": "superhero", "final": {"question": "Name the superhero, otherwise known as Charles Chandler.", "sql": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'", "source_tables": ["superhero"]}, "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;"}
{"sample_id": 10256, "db_id": "superhero", "final": {"question": "Among all superheroes created by George Lucas, identify the percentage of female superheroes.", "sql": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'George Lucas'", "source_tables": ["gender", "publisher", "superhero"]}, "evidence": "created by George Lucas refers to publisher_name = 'George Lucas'; percentage = MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'George Lucas'), COUNT(publisher_name = 'George Lucas')), 100.0); female refers to gender = 'Female';"}
{"sample_id": 10257, "db_id": "superhero", "final": {"question": "Among all superheroes in Marvel Comics, identify the percentage of 'good' superheroes.", "sql": "SELECT CAST(COUNT(CASE WHEN T3.alignment = 'Good' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.publisher_name = 'Marvel Comics'", "source_tables": ["alignment", "publisher", "superhero"]}, "evidence": "Marvel Comics refers to publisher_name = 'Marvel Comics'; percentage = MULTIPLY(DIVIDE(SUM(alignment = 'Good' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100.0); good superheroes refers to alignment = 'Good';"}
{"sample_id": 10258, "db_id": "superhero", "final": {"question": "What is the total number of superheroes that have John as their first name?", "sql": "SELECT COUNT(id) FROM superhero WHERE full_name LIKE 'John%'", "source_tables": ["superhero"]}, "evidence": "have John as their first name refers to full_name LIKE 'John%';"}
{"sample_id": 10259, "db_id": "superhero", "final": {"question": "Give the hero ID of superhero with the lowest attribute value.", "sql": "SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute )", "source_tables": ["hero_attribute"]}, "evidence": "lowest attribute value refers to MIN(attribute_value);"}
{"sample_id": 10260, "db_id": "superhero", "final": {"question": "Provide the full name of the superhero named Alien.", "sql": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'", "source_tables": ["superhero"]}, "evidence": ""}
{"sample_id": 10261, "db_id": "superhero", "final": {"question": "In superheroes with weight less than 100, list the full name of the superheroes with brown eyes.", "sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'", "source_tables": ["colour", "superhero"]}, "evidence": "weight less than 100 refers to weight_kg < 100"}
{"sample_id": 10262, "db_id": "superhero", "final": {"question": "List the attribute value of the superhero named Aquababy.", "sql": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'", "source_tables": ["hero_attribute", "superhero"]}, "evidence": ""}
{"sample_id": 10263, "db_id": "superhero", "final": {"question": "Provide the weight and race of the superhero with superhero ID 40.", "sql": "SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40", "source_tables": ["race", "superhero"]}, "evidence": "weight refers to weight_kg; superhero ID 40 refers to superhero.id = 40;"}
{"sample_id": 10264, "db_id": "superhero", "final": {"question": "Calculate the average height of all neutral superheroes.", "sql": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'", "source_tables": ["alignment", "superhero"]}, "evidence": ""}
{"sample_id": 10265, "db_id": "superhero", "final": {"question": "List the hero ID of superheroes have intellegence as their power.", "sql": "SELECT T1.hero_id FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Intelligence'", "source_tables": ["hero_power", "superpower"]}, "evidence": "hero ID refers to superhero.id; have intelligence as their power refers to power_name = 'Intelligence';"}
{"sample_id": 10266, "db_id": "superhero", "final": {"question": "Give the eye colour of Blackwulf.", "sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'", "source_tables": ["colour", "superhero"]}, "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';"}
{"sample_id": 10267, "db_id": "superhero", "final": {"question": "List the power of superheroes with height greater than 80% of the average height of all superheroes.", "sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.height_cm * 100 > ( SELECT AVG(height_cm) FROM superhero ) * 80", "source_tables": ["hero_power", "superhero", "superpower"]}, "evidence": "power of superheroes refers to power_name; height greater than 80% of the average height of all superheroes = height_cm > MULTIPLY(AVG(height_cm), 0.8);"}
{"sample_id": 10406, "db_id": "formula_1", "final": {"question": "What is the website of the constructor who tallied the most total wins.", "sql": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId ORDER BY T2.wins DESC LIMIT 1", "source_tables": ["constructors", "constructorstandings"]}, "evidence": "introduction website refers to url;"}
{"sample_id": 10407, "db_id": "formula_1", "final": {"question": "Among the drivers who participated in the French Grand Prix, who has the slowest time in the 3rd lap.", "sql": "SELECT T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.time DESC LIMIT 1", "source_tables": ["races", "laptimes"]}, "evidence": "slowest time refers to Max(time);"}
{"sample_id": 10408, "db_id": "formula_1", "final": {"question": "In which race did the fastest 1st lap time was recorded? Please indicate the time in milliseconds.", "sql": "SELECT T1.milliseconds FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.lap = 1 ORDER BY T1.time LIMIT 1", "source_tables": ["races", "laptimes"]}, "evidence": "fastest refers to Min(time);"}
{"sample_id": 10409, "db_id": "formula_1", "final": {"question": "What is the average fastest lap time of the top 10 drivers in the 2006 United States Grand Prix?", "sql": "SELECT AVG(T1.fastestLapTime) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank < 11 AND T2.year = 2006 AND T2.name = 'United States Grand Prix'", "source_tables": ["results", "races"]}, "evidence": "top 10 refers to rank <11; AVG(fastestLapTime);"}
{"sample_id": 10410, "db_id": "formula_1", "final": {"question": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.", "sql": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 3", "source_tables": ["pitstops", "drivers"]}, "evidence": "Full name of the driver refers to drivers.forename and drivers.surname; born between 1980-1985 refers to 1980< year(dob)>1985; Average pitstop duration refers to Divide(SUM(duration),COUNT(duration)); shortest average refers to Min(avg(duration));"}
{"sample_id": 10411, "db_id": "formula_1", "final": {"question": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.", "sql": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.time LIKE '_:%:__.___'", "source_tables": ["results", "races"]}, "evidence": "Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\";"}
{"sample_id": 10412, "db_id": "formula_1", "final": {"question": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.", "sql": "SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN constructors AS T3 on T1.constructorId = T3.constructorId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T1.time LIKE '_:%:__.___'", "source_tables": ["constructors", "results", "races"]}, "evidence": "the time of the champion shows in the format of \"minutes: seconds.millionsecond\" in which Max(time); constructor reference name refers to constructorRef; website refers to url"}
{"sample_id": 10413, "db_id": "formula_1", "final": {"question": "What is the full name and date of birth of Austrian drivers born between 1981 and 1991?", "sql": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'", "source_tables": ["drivers"]}, "evidence": "Full name refers to forname, surname; Date of birth refers to dob; year(dob) BETWEEN '1981' AND '1991'; Austrian is a nationality"}
{"sample_id": 10414, "db_id": "formula_1", "final": {"question": "Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth.", "sql": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC", "source_tables": ["drivers"]}, "evidence": "FFull name refers to forname+surname; Nationality refers to German; Date of birth refers to dob; year(dob) BETWEEN '1971' AND '1985'"}
{"sample_id": 10415, "db_id": "formula_1", "final": {"question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?", "sql": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'", "source_tables": ["circuits"]}, "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)"}
{"sample_id": 10416, "db_id": "formula_1", "final": {"question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.", "sql": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1", "source_tables": ["constructors", "races", "constructorresults"]}, "evidence": "Monaco Grand Priz refers to the race; race in year between 1980 and 2010"}
{"sample_id": 10417, "db_id": "formula_1", "final": {"question": "What is the average score of Lewis Hamilton among all the Turkish Grand Prix?", "sql": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'", "source_tables": ["races", "driverstandings", "drivers"]}, "evidence": "Average score = AVG(points)"}
{"sample_id": 10418, "db_id": "formula_1", "final": {"question": "What is the annual average number of races held during the first 10 years of the 21st century?", "sql": "SELECT CAST(SUM(CASE WHEN year BETWEEN 2000 AND 2010 THEN 1 ELSE 0 END) AS REAL) / 10 FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'", "source_tables": ["races"]}, "evidence": "races in date between '2000-01-01' and '2010-12-31'"}
{"sample_id": 10419, "db_id": "formula_1", "final": {"question": "Which citizenship do the vast majority of the drivers hold?", "sql": "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(driverId) DESC LIMIT 1", "source_tables": ["drivers"]}, "evidence": "Citizenship of majority of drivers = MAX(nationality); citizenship and nationality are synonyms\n\n"}
{"sample_id": 10420, "db_id": "formula_1", "final": {"question": "In terms of number of points acquired, how many victories did the driver who ranked 91st acquired?", "sql": "SELECT SUM(CASE WHEN points = 91 THEN wins ELSE 0 END) FROM driverStandings", "source_tables": ["driverstandings"]}, "evidence": "victories refer to wins; 91st refers to points\n\n"}
{"sample_id": 10421, "db_id": "formula_1", "final": {"question": "In terms of the fastest lap time, what is the name of the race which recorded the fastest lap speed by a racer?", "sql": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1", "source_tables": ["races", "results"]}, "evidence": "Fastest lap speed refers to MIN(fastestLapTime)\n\n"}
{"sample_id": 10422, "db_id": "formula_1", "final": {"question": "Which racetrack hosted the most recent race? Indicate the full location.", "sql": "SELECT T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.date DESC LIMIT 1", "source_tables": ["races", "circuits"]}, "evidence": "full location refers to location+country; most recent race = MAX(date)\n\n"}
{"sample_id": 10423, "db_id": "formula_1", "final": {"question": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?", "sql": "SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1", "source_tables": ["circuits", "races", "qualifying", "drivers"]}, "evidence": "Ranked 1st in the 3rd qualifying race refer to MIN(q3); 2008 is the year of race; full name of racer = forename, surname"}
{"sample_id": 10424, "db_id": "formula_1", "final": {"question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.", "sql": "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1", "source_tables": ["races", "driverstandings", "drivers"]}, "evidence": "full name refers to forename+surname; Youngest racer = MAX(dob)"}
{"sample_id": 10425, "db_id": "formula_1", "final": {"question": "How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?", "sql": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId WHERE T3.statusId = 3 AND T2.name = 'Canadian Grand Prix' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1", "source_tables": ["status", "results", "races"]}, "evidence": "number of accidents refers to the number where statusid = 3; Canadian Grand Prix refers to the race of name\n"}
{"sample_id": 10426, "db_id": "formula_1", "final": {"question": "How many wins was achieved by the oldest racer? Indicate his/her full name.", "sql": "SELECT SUM(T1.wins),T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId ORDER BY T2.dob ASC LIMIT 1", "source_tables": ["driverstandings", "drivers"]}, "evidence": "oldest racer refers to MIN(dob); full name refers to forename, surname."}
{"sample_id": 10427, "db_id": "formula_1", "final": {"question": "What was the longest time a driver had ever spent at a pit stop?", "sql": "SELECT duration FROM pitStops ORDER BY duration DESC LIMIT 1", "source_tables": ["pitstops"]}, "evidence": "longest time spent at pitstop refers to MAX(duration)"}
{"sample_id": 10428, "db_id": "formula_1", "final": {"question": "Among all the lap records set on various circuits, what is the time for the fastest one?", "sql": "SELECT time FROM lapTimes ORDER BY (CASE WHEN INSTR(time, ':') <> INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':') THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 3600 ELSE 0 END) + (CAST(SUBSTR(time, INSTR(time, ':') - 2 * (INSTR(time, ':') = INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':')), INSTR(time, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL)) + (CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000) ASC LIMIT 1", "source_tables": ["laptimes"]}, "evidence": ""}
{"sample_id": 10429, "db_id": "formula_1", "final": {"question": "What was the longest time that Lewis Hamilton had spent at a pit stop?", "sql": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.duration DESC LIMIT 1", "source_tables": ["pitstops", "drivers"]}, "evidence": "longest time refes to MAX(duration);"}
{"sample_id": 10430, "db_id": "formula_1", "final": {"question": "During which lap did Lewis Hamilton take a pit stop during the 2011 Australian Grand Prix?", "sql": "SELECT T1.lap FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.year = 2011 AND T3.name = 'Australian Grand Prix'", "source_tables": ["pitstops", "races", "drivers"]}, "evidence": ""}
{"sample_id": 10431, "db_id": "formula_1", "final": {"question": "Please list the time each driver spent at the pit stop during the 2011 Australian Grand Prix.", "sql": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2011 AND T2.name = 'Australian Grand Prix'", "source_tables": ["pitstops", "races"]}, "evidence": "time spent at pit stop refers to duration"}
{"sample_id": 10432, "db_id": "formula_1", "final": {"question": "What is the lap record set by Lewis Hamilton in a Formula_1 race?", "sql": "SELECT T1.time FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'", "source_tables": ["drivers", "laptimes"]}, "evidence": "lap recod means the fastest time recorded which refers to time"}
{"sample_id": 10433, "db_id": "formula_1", "final": {"question": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.", "sql": "WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SUBSTR(time, 1, INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 60 ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL) ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, '.') + 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000 ELSE 0 END) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 20", "source_tables": ["lap_times_in_seconds", "drivers", "laptimes"]}, "evidence": "shortest lap time refers to MIN(time); the time format for the shortest lap time is 'MM:SS.mmm' or 'M:SS.mmm'; full name of the driver refers to forename, surname"}
{"sample_id": 10434, "db_id": "formula_1", "final": {"question": "What was the position of the circuits during Lewis Hamilton's fastest lap in a Formula_1 race?", "sql": "SELECT T1.position FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1", "source_tables": ["drivers", "laptimes"]}, "evidence": "fastest lap refers to MIN(time)"}
{"sample_id": 10435, "db_id": "formula_1", "final": {"question": "What is the lap record for the Austrian Grand Prix Circuit?", "sql": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.fastestLapTime FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL) SELECT MIN(fastest_lap_times.fastestLapTime) as lap_record FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix'", "source_tables": ["fastest_lap_times", "races", "results", "circuits"]}, "evidence": "lap record means the fastest time recorded which refers to time"}
{"sample_id": 10436, "db_id": "formula_1", "final": {"question": "Please list the lap records for the circuits in Italy.", "sql": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1", "source_tables": ["fastest_lap_times", "results", "circuits", "races"]}, "evidence": "lap record means the fastest time recorded which refers to time"}
{"sample_id": 10437, "db_id": "formula_1", "final": {"question": "In which Formula_1 race was the lap record for the Austrian Grand Prix Circuit set?", "sql": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T2.name FROM races AS T2 INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN results AS T1 on T2.raceId = T1.raceId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix'", "source_tables": ["fastest_lap_times", "races", "results", "circuits"]}, "evidence": "lap record means the fastest time recorded which refers to time"}
{"sample_id": 10438, "db_id": "formula_1", "final": {"question": "In the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race?", "sql": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.driverId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL), lap_record_race AS ( SELECT T1.raceId, T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix') SELECT T4.duration FROM lap_record_race INNER JOIN pitStops AS T4 on lap_record_race.raceId = T4.raceId AND lap_record_race.driverId = T4.driverId", "source_tables": ["circuits", "pitstops", "results", "races", "lap_record_race", "fastest_lap_times"]}, "evidence": "lap record means the fastest time recorded which refers to time, how long spent at pitstop refers to duration"}
{"sample_id": 10439, "db_id": "formula_1", "final": {"question": "Please list the location coordinates of the circuits whose lap record is 1:29.488.", "sql": "SELECT T3.lat, T3.lng FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T1.time = '1:29.488'", "source_tables": ["races", "circuits", "laptimes"]}, "evidence": "lap records means the fastest time recorded which refers to time; coordinates are expressed as latitude and longitude which refers to (lat, lng)"}
{"sample_id": 10440, "db_id": "formula_1", "final": {"question": "What was the average time in milliseconds Lewis Hamilton spent at a pit stop during Formula_1 races?", "sql": "SELECT AVG(milliseconds) FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'", "source_tables": ["pitstops", "drivers"]}, "evidence": "average time in milliseconds spent at pit stop refers to AVG(milliseconds)"}
{"sample_id": 10441, "db_id": "formula_1", "final": {"question": "What is the average lap time in milliseconds of all the lap records set on the various circuits in Italy?", "sql": "SELECT CAST(SUM(T1.milliseconds) AS REAL) / COUNT(T1.lap) FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy'", "source_tables": ["races", "circuits", "laptimes"]}, "evidence": "average = AVG(milliseconds)"}
{"sample_id": 10544, "db_id": "european_football_2", "final": {"question": "State the name of the most strongest player.", "sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)", "source_tables": ["player_attributes", "player"]}, "evidence": "strongest players refers to player has MAX(overall_rating)"}
{"sample_id": 10545, "db_id": "european_football_2", "final": {"question": "What is the name of players with the highest potential?", "sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.potential DESC LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "highest potential refers to MAX(potential)"}
{"sample_id": 10546, "db_id": "european_football_2", "final": {"question": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.", "sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.attacking_work_rate = 'high'", "source_tables": ["player_attributes", "player"]}, "evidence": "tend to be attacking when their mates were doing attack moves refers to attacking_work_rate = 'high';"}
{"sample_id": 10547, "db_id": "european_football_2", "final": {"question": "Among the players with finishing rate of 1, pick the eldest player and state the player's name.", "sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.finishing = 1 ORDER BY t1.birthday ASC LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "eldest player refers to MAX(SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'),datetime(birthday))); finishing rate of 1 refers to finishing = 1"}
{"sample_id": 10548, "db_id": "european_football_2", "final": {"question": "State the name of players who came from Belgium.", "sql": "SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'", "source_tables": ["country", "player", "match"]}, "evidence": "name of players refers to player_name; Belgium is name of country"}
{"sample_id": 10549, "db_id": "european_football_2", "final": {"question": "Locate players with vision scores of 90 and above, state the country of these players.", "sql": "SELECT DISTINCT t4.name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id INNER JOIN Match AS t3 ON t2.player_api_id = t3.home_player_8 INNER JOIN Country AS t4 ON t3.country_id = t4.id WHERE t1.vision > 89", "source_tables": ["player_attributes", "country", "player", "match"]}, "evidence": "vision scores of 90 and above refers to vision > 89"}
{"sample_id": 10550, "db_id": "european_football_2", "final": {"question": "Which country's players have the heaviest average weights?", "sql": "SELECT t1.name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id GROUP BY t1.name ORDER BY AVG(t3.weight) DESC LIMIT 1", "source_tables": ["country", "player", "match"]}, "evidence": "heaviest average weights refers to MAX(AVG(weight))"}
{"sample_id": 10551, "db_id": "european_football_2", "final": {"question": "List down the long name for slow speed class team.", "sql": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Slow'", "source_tables": ["team_attributes", "team"]}, "evidence": "slow speed class refers to buildUpPlaySpeedClass = 'Slow'; long name refers to team_long_name"}
{"sample_id": 10552, "db_id": "european_football_2", "final": {"question": "What are the short name of team who played safe while creating chance of passing?", "sql": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Safe'", "source_tables": ["team_attributes", "team"]}, "evidence": "played safe while creating chance of passing refers to chanceCreationPassingClass = 'Safe'; short name of team refers to team_short_name"}
{"sample_id": 10553, "db_id": "european_football_2", "final": {"question": "What is the average heights of Italy players?", "sql": "SELECT CAST(SUM(T1.height) AS REAL) / COUNT(T1.id) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.id = T2.id INNER JOIN Country AS T3 ON T2.country_id = T3.ID WHERE T3.NAME = 'Italy'", "source_tables": ["country", "player", "match"]}, "evidence": "average heights refers to Avg(height); Italy is name of country"}
{"sample_id": 10554, "db_id": "european_football_2", "final": {"question": "Please provide the names of top three football players who are over 180 cm tall in alphabetical order.", "sql": "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3", "source_tables": ["player"]}, "evidence": "over 180 cm tall refers to height > 180; name of football player refers to player_name"}
{"sample_id": 10555, "db_id": "european_football_2", "final": {"question": "How many football players born after the 1990s have the first name \"Aaron\"?", "sql": "SELECT COUNT(id) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%'", "source_tables": ["player"]}, "evidence": "first name \"Aaron\" refers to player_name LIKE 'Aaron%'; born after the 1990s refers to birthday > '1990'"}
{"sample_id": 10556, "db_id": "european_football_2", "final": {"question": "What is the difference between players 6 and 23's jumping scores?", "sql": "SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1", "source_tables": ["player_attributes"]}, "evidence": "difference between players 6 and 23's jumping scores refers to SUBTRACT(jumping AND id = 6,jumping AND id = 23)"}
{"sample_id": 10557, "db_id": "european_football_2", "final": {"question": "Please provide top five football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.", "sql": "SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential DESC LIMIT 5", "source_tables": ["player_attributes"]}, "evidence": "lowest potential players refers to MIN(potential); prefer to use the right foot when attacking refers to preferred_foot = 'right'"}
{"sample_id": 10558, "db_id": "european_football_2", "final": {"question": "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?", "sql": "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes)", "source_tables": ["player_attributes"]}, "evidence": "highest potential score for crossing refers to MAX(crossing); preferred to use their left foots while attacking refers to preferred_foot = 'left'"}
{"sample_id": 10559, "db_id": "european_football_2", "final": {"question": "What percentage of players have a strength and stamina score of more than 80?", "sql": "SELECT CAST(COUNT(CASE WHEN strength > 80 AND stamina > 80 THEN id ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM Player_Attributes t", "source_tables": ["player_attributes"]}, "evidence": "strength and stamina score of more than 80 refers to stamina > 80 and strength > 80"}
{"sample_id": 10560, "db_id": "european_football_2", "final": {"question": "In what country did the Poland Ekstraklasa take place?", "sql": "SELECT name FROM Country WHERE id IN ( SELECT country_id FROM League WHERE name = 'Poland Ekstraklasa' )", "source_tables": ["country", "league"]}, "evidence": ""}
{"sample_id": 10561, "db_id": "european_football_2", "final": {"question": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?", "sql": "SELECT t2.home_team_goal, t2.away_team_goal FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND t2.'date' LIKE '2008-09-24%'", "source_tables": ["league", "match"]}, "evidence": "September 24, 2008 refers to date like '2008-09-24%'; in the Belgian Jupiler League refers to League.name = 'Belgium Jupiler League'; final score for home team refers to home_team_goal; final score for away team refers to away_team_goal"}
{"sample_id": 10562, "db_id": "european_football_2", "final": {"question": "What are Alexis Blin's sprint speed, agility, and acceleration scores?", "sql": "SELECT sprint_speed, agility, acceleration FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin' )", "source_tables": ["player_attributes", "player"]}, "evidence": "Alexis Blin's refers to player_name = 'Alexis Blin'"}
{"sample_id": 10563, "db_id": "european_football_2", "final": {"question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?", "sql": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'", "source_tables": ["team_attributes", "team"]}, "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass"}
{"sample_id": 10564, "db_id": "european_football_2", "final": {"question": "In the 2015\u20132016 season, how many games were played in the Italian Serie A league?", "sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Italy Serie A' AND t2.season = '2015/2016'", "source_tables": ["league", "match"]}, "evidence": "In the 2015\u20132016 season refers to season = '2015/2016'"}
{"sample_id": 10565, "db_id": "european_football_2", "final": {"question": "What was the highest score of the home team in the Netherlands Eredivisie league?", "sql": "SELECT MAX(t2.home_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Netherlands Eredivisie'", "source_tables": ["league", "match"]}, "evidence": "highest score of the home team refers to MAX(home_team_goal)"}
{"sample_id": 10566, "db_id": "european_football_2", "final": {"question": "Please state the finishing rate and curve score of the player who has the heaviest weight.", "sql": "SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 1 ) LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "finishing rate refer to finishing; curve score refer to curve; heaviest weight refers to MAX(weight)"}
{"sample_id": 10567, "db_id": "european_football_2", "final": {"question": "Which top 4 leagues had the most games in the 2015-2016 season?", "sql": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC LIMIT 4", "source_tables": ["league", "match"]}, "evidence": "in the 2015-2016 season refers to season = '2015/2016'; league with most games refers to League.name where MAX(COUNT(id))"}
{"sample_id": 10568, "db_id": "european_football_2", "final": {"question": "Please provide the full name of the away team that scored the most goals.", "sql": "SELECT t2.team_long_name FROM Match AS t1 INNER JOIN Team AS t2 ON t1.away_team_api_id = t2.team_api_id ORDER BY t1.away_team_goal DESC LIMIT 1", "source_tables": ["team", "match"]}, "evidence": "full name refers to team_long_name; away team refers to away_team_api_id; scored the most goals refers to MAX(away_team_goal)"}
{"sample_id": 10569, "db_id": "european_football_2", "final": {"question": "Please name one player whose overall strength is the greatest.", "sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes)", "source_tables": ["player_attributes", "player"]}, "evidence": "overall strength is the greatest refers to MAX(overall_rating)"}
{"sample_id": 10570, "db_id": "european_football_2", "final": {"question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?", "sql": "SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70 THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height < 180", "source_tables": ["player_attributes", "player"]}, "evidence": "percentage refers to DIVIDE(COUNT(height < 180 AND overall_rating > 70),COUNT(id)) * 100"}
{"sample_id": 10700, "db_id": "thrombosis_prediction", "final": {"question": "Of the patients with an normal level of IGG, how many of them admitted to the hospital?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGG > 900 AND T2.IGG <2000 AND  T1.Admission = '+'", "source_tables": ["laboratory", "patient"]}, "evidence": "normal level of IGG refers to 900 < IGG < 2000; admitted to the hospital refers to Admission = '+';"}
{"sample_id": 10701, "db_id": "thrombosis_prediction", "final": {"question": "What is the percentage of patient who has a abnormal level of glutamic oxaloacetic transaminase level, yet he or she is diagnosed with SLE?", "sql": "SELECT COUNT(CASE WHEN T1.Diagnosis LIKE '%SLE%' THEN T1.ID ELSE 0 END) / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.'GOT' >= 60", "source_tables": ["laboratory", "patient"]}, "evidence": "abnormal level of glutamic oxaloacetic transaminase refers to GOT > = 60; percentage = MULTIPLY(DIVIDE(COUNT(ID WHERE GOT > = 60 AND Diagnosis = 'SLE'), COUNT(ID WHERE GOT > = 60)), 1.0);"}
{"sample_id": 10702, "db_id": "thrombosis_prediction", "final": {"question": "How many male patients have their glutamic oxaloacetic transaminase in the normal range?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'", "source_tables": ["laboratory", "patient"]}, "evidence": "male refers to Sex = 'M'; glutamic oxaloacetic transaminase in the normal range refers to GOT < 60;"}
{"sample_id": 10703, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?", "sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60 ORDER BY T1.Birthday DESC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "abnormal level of glutamic oxaloacetic transaminase refers to GOT > = 60; The larger the birthday value, the younger the person is, and vice versa;"}
{"sample_id": 10704, "db_id": "thrombosis_prediction", "final": {"question": "Please list the top three patients' birthdays with the highest glutamic pylvic transaminase in the normal range.", "sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT < 60 ORDER BY T2.GPT DESC LIMIT 3", "source_tables": ["laboratory", "patient"]}, "evidence": "highest glutamic pylvic transaminase in the normal range refers to MAX(GPT < 60);"}
{"sample_id": 10705, "db_id": "thrombosis_prediction", "final": {"question": "For the patients with the normal glutamic pylvic transaminase level, how many of them are male?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'", "source_tables": ["laboratory", "patient"]}, "evidence": "normal glutamic pylvic transaminase level refers to GOT < 60; male refers to Sex = 'M';"}
{"sample_id": 10706, "db_id": "thrombosis_prediction", "final": {"question": "For the patient with the highest lactate dehydrogenase in the normal range, when was his or her data first recorded?", "sql": "SELECT T1.'First Date' FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH < 500 ORDER BY T2.LDH ASC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "highest lactate dehydrogenase in the normal range refers to MAX(LDH < 500); when the data first recorded refers to MIN(First Date);"}
{"sample_id": 10707, "db_id": "thrombosis_prediction", "final": {"question": "When is the latest patient's medical data recorded? This patient should have an abnormal level of lactate dehydrogenase.", "sql": "SELECT T1.'First Date' FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH >= 500 ORDER BY T1.'First Date' DESC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "latest patient refers to ID with MAX('First Date'); abnormal level of lactate dehydrogenase refers to LDH > = 500;"}
{"sample_id": 10708, "db_id": "thrombosis_prediction", "final": {"question": "For the patient with an abnormal alkaliphophatase level, how many of them are admitted to the hospital?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP >= 300 AND T1.Admission = '+'", "source_tables": ["laboratory", "patient"]}, "evidence": "abnormal alkaliphophatase level refers to ALP > = 300; admitted to the hospital refers to Admission = '+';"}
{"sample_id": 10709, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients followed at the outpatient clinic, how many of them have a normal level of alkaliphophatase?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300 AND T1.Admission = '-'", "source_tables": ["laboratory", "patient"]}, "evidence": "followed at the outpatient clinic refers to Admission = '-'; normal level of alkaliphophatase refers to ALP < 300;"}
{"sample_id": 10710, "db_id": "thrombosis_prediction", "final": {"question": "Please list the diagnosis of the patients whose total protein is lower than normal.", "sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0", "source_tables": ["laboratory", "patient"]}, "evidence": "total protein is lower than normal refers to TP < 6.0;"}
{"sample_id": 10711, "db_id": "thrombosis_prediction", "final": {"question": "For the patients who are diagnosed with SJS, how many of them have a normal level of total protein?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5", "source_tables": ["laboratory", "patient"]}, "evidence": "diagnosed with SJS refers to Diagnosis = 'SJS'; normal level of total protein refers to TP > 6.0 and TP < 8.5;"}
{"sample_id": 10712, "db_id": "thrombosis_prediction", "final": {"question": "What is the examination date of the patient whose albumin is the highest in the normal range?", "sql": "SELECT Date FROM Laboratory WHERE ALB > 3.5 AND ALB < 5.5 ORDER BY ALB DESC LIMIT 1", "source_tables": ["laboratory"]}, "evidence": "examination date refers to Date; albumin is the highest in the normal range refers to MAX(ALB > 3.5 and ALB < 5.5);"}
{"sample_id": 10713, "db_id": "thrombosis_prediction", "final": {"question": "How many male patients have a normal level of both albumin and total protein?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M'  AND T2.ALB > 3.5 AND T2.ALB < 5.5 AND T2.TP BETWEEN 6.0 AND 8.5", "source_tables": ["laboratory", "patient"]}, "evidence": "male refers to Sex = 'M'; normal level of both albumin and total protein refers to ALB > 3.5 and ALB < 5.5 AND TP between 6.0 and 8.5;"}
{"sample_id": 10714, "db_id": "thrombosis_prediction", "final": {"question": "What is the anti Cardiolipin antibody concentration of the female patient with the highest uric acid level in the normal range?", "sql": "SELECT T3.'aCL IgG', T3.'aCL IgM', T3.'aCL IgA' FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T1.SEX = 'F' AND T2.UA > 6.5 ORDER BY T2.UA DESC LIMIT 1", "source_tables": ["examination", "laboratory", "patient"]}, "evidence": "anti Cardiolipin antibody concentration refers to `aCL IgG`, `aCL IgM`, `aCL IgA`; female patient refers to Sex = F'; highest uric acid level in the normal range refers to MAX(UA > 6.50);"}
{"sample_id": 10715, "db_id": "thrombosis_prediction", "final": {"question": "What is the highest anti-nucleus antibody concentration level of a patient with a normal creatinine level?", "sql": "SELECT T2.ANA FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.CRE < 1.5 ORDER BY T2.ANA DESC LIMIT 1", "source_tables": ["examination", "laboratory", "patient"]}, "evidence": "highest anti-nucleus antibody concentration level refers to MAX(ANA); normal creatinine level refers to CRE < 1.5;"}
{"sample_id": 10716, "db_id": "thrombosis_prediction", "final": {"question": "Please list the patient's ID whose creatinine level is normal and whose anti Cardiolipin antibody concentration level is the highest.", "sql": "SELECT T2.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.CRE < 1.5 ORDER BY T2.'aCL IgA' DESC LIMIT 1", "source_tables": ["examination", "laboratory"]}, "evidence": "creatinine level is normal refers to CRE < 1.5; anti Cardiolipin antibody concentration level is the highest refers to MAX(aCL IgA);"}
{"sample_id": 10717, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients whose total bilirubin is over the normal range, how many of them have a peripheral pattern observed in the sheet of ANA examination?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.'T-BIL' >= 2 AND T3.'ANA Pattern' LIKE '%P%'", "source_tables": ["examination", "laboratory", "patient"]}, "evidence": "total bilirubin is over the normal range refers to `T-BIL` > = 2.0; peripheral pattern is observed in the sheet of ANA examination refers to that ANA Pattern contains 'P';"}
{"sample_id": 10718, "db_id": "thrombosis_prediction", "final": {"question": "What is the anti-nucleus antibody concentration of the patient whose total bilirubin is the highest in the normal range?", "sql": "SELECT T3.ANA FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.'T-BIL' < 2.0 ORDER BY T2.'T-BIL' DESC LIMIT 1", "source_tables": ["examination", "laboratory", "patient"]}, "evidence": "anti-nucleus antibody concentration refers to ANA; total bilirubin is the highest in the normal range refers to MAX(`T-BIL` < 2.0);"}
{"sample_id": 10719, "db_id": "thrombosis_prediction", "final": {"question": "For the patients whose total cholesterol is higher than normal, how many of them have a negative measure of degree of coagulation?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.'T-CHO' >= 250 AND T3.KCT = '-'", "source_tables": ["examination", "laboratory", "patient"]}, "evidence": "total cholesterol is higher than normal refers to `T-CHO` > = 250; negative measure of degree of coagulation refers to KCT = '-' ;"}
{"sample_id": 10720, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients whose total cholesterol is within the normal range, how many of them have a P pattern observed in the sheet of ANA examination?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T3.'ANA Pattern' = 'P' AND T2.'T-CHO' < 250", "source_tables": ["examination", "laboratory", "patient"]}, "evidence": "total cholesterol is within the normal range refers to `T-CHO` < 250; P pattern observed in the sheet of ANA examination refers to ANA Pattern = 'P';"}
{"sample_id": 10721, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients with the normal level of triglyceride, how many of them have other symptoms observed?", "sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 AND T1.Symptoms IS NOT NULL", "source_tables": ["examination", "laboratory"]}, "evidence": "normal level of triglyceride refers to TG < 200; have other symptoms refers to Symptoms is not null;"}
{"sample_id": 10722, "db_id": "thrombosis_prediction", "final": {"question": "What is the disease name of the patient who has the highest level of triglyceride within the normal range?", "sql": "SELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 ORDER BY T2.TG DESC LIMIT 1", "source_tables": ["examination", "laboratory"]}, "evidence": "disease name referse to Diagnosis; highest level of triglyceride within the normal range refers to MAX(TG < 200);"}
{"sample_id": 10723, "db_id": "thrombosis_prediction", "final": {"question": "Please list the IDs of the patients with no thrombosis and an abnormal level of creatinine phosphokinase.", "sql": "SELECT DISTINCT T1.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 0 AND T1.CPK < 250", "source_tables": ["examination", "laboratory"]}, "evidence": "no thrombosis refers to Thrombosis = 0 ; abnormal level of creatinine phosphokinase refers to CPK < 250;"}
{"sample_id": 10724, "db_id": "thrombosis_prediction", "final": {"question": "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.CPK < 250 AND (T3.KCT = '+' OR T3.RVVT = '+' OR T3.LAC = '+')", "source_tables": ["examination", "laboratory", "patient"]}, "evidence": "normal range of creatinine phosphokinase refers to CPK < 250; positive measure of degree of coagulation refers to KCT = '+' or RVVT = '+' or LAC = '+' ;"}
{"sample_id": 10725, "db_id": "thrombosis_prediction", "final": {"question": "When is the birthday of the oldest patient whose blood glucose is abnormal?", "sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU > 180 ORDER BY T1.Birthday ASC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "oldest patient refers to MIN(Birthday); blood glucose is abnormal refers to GLU > 180;"}
{"sample_id": 10726, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients with a normal blood glucose, how many of them don't have thrombosis?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.GLU < 180 AND T3.Thrombosis = 0", "source_tables": ["examination", "laboratory", "patient"]}, "evidence": "normal blood glucose refers to GLU < 180; don't have thrombosis refers to Thrombosis = 0;"}
{"sample_id": 10727, "db_id": "thrombosis_prediction", "final": {"question": "How many patients accepted to the hospital have a normal level of white blood cells?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC BETWEEN 3.5 AND 9 AND T1.Admission = '+'", "source_tables": ["laboratory", "patient"]}, "evidence": "accepted to the hospital refers to Admission = '+'; normal level of white blood cells refers to WBC between 3.5 and 9.0;"}
{"sample_id": 10728, "db_id": "thrombosis_prediction", "final": {"question": "How many patients diagnosed with SLE have a normal white blood cell level?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9", "source_tables": ["laboratory", "patient"]}, "evidence": "diagnosed with SLE refers to Diagnosis = 'SLE'; normal white blood cell level refers to WBC between 3.5 and 9.0;"}
{"sample_id": 10729, "db_id": "thrombosis_prediction", "final": {"question": "Please list the patient's ID if he or she has an abnormal level of red blood cell and is followed at the outpatient clinic.", "sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RBC <= 3.5 OR T2.RBC >= 6) AND T1.Admission = '-'", "source_tables": ["laboratory", "patient"]}, "evidence": "RBC < = 3.5 or RBC > = 6.0 means the patient has an abnormal level of red blood cell; 3.5 < RBC < 6.0 means the patient has a normal level of red blood cell; followed at the outpatient clinic refers to Admission = '-';"}
{"sample_id": 10730, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients who have a normal platelet level, how many of them have other symptoms observed?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 100 AND T2.PLT < 400 AND T1.Diagnosis IS NOT NULL", "source_tables": ["laboratory", "patient"]}, "evidence": "normal platelet level refers to PLT > 100 and PLT < 400; have other symptoms refers to Diagnosis is not null;"}
{"sample_id": 10731, "db_id": "thrombosis_prediction", "final": {"question": "Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with MCTD.", "sql": "SELECT T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'MCTD' AND T2.PLT BETWEEN 100 AND 400", "source_tables": ["laboratory", "patient"]}, "evidence": "PLT > 100 and PLT < 400 means platelet level is within the normal range; PLT < 100 and PLT > 400 means platelet level is not within the normal range; diagnosed with MCTD refers to Diagnosis = 'MCTD';"}
{"sample_id": 10732, "db_id": "thrombosis_prediction", "final": {"question": "For the male patients that have a normal prothrombin time, what is their average prothrombin time?", "sql": "SELECT AVG(T2.PT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PT < 14 AND T1.SEX = 'M'", "source_tables": ["laboratory", "patient"]}, "evidence": "male refers to Sex = 'M'; normal prothrombin time refer to PT < 14; average prothrombin time = AVG(PT);"}
{"sample_id": 10733, "db_id": "thrombosis_prediction", "final": {"question": "How many patients with severe thrombosis have a normal prothrombin time?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.PT < 14 AND T3.Thrombosis < 3 AND T3.Thrombosis > 0", "source_tables": ["examination", "laboratory", "patient"]}, "evidence": "severe thrombosis refers to Thrombosis = 2 or 1; normal prothrombin time refers to PT < 14;"}
{"sample_id": 10859, "db_id": "student_club", "final": {"question": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event.", "sql": "SELECT DISTINCT T1.link_to_member, T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'", "source_tables": ["attendance", "expense", "member"]}, "evidence": "approved from 1/10/2019 to 11/19/2019 refers to approved = 'true' and expense_date BETWEEN '2019-01-10' and '2019-11-19'"}
{"sample_id": 10860, "db_id": "student_club", "final": {"question": "Please indicate the college of the person whose first name is Katy with the link to the major \"rec1N0upiVLy5esTO\".", "sql": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.link_to_major = 'rec1N0upiVLy5esTO' AND T1.first_name = 'Katy'", "source_tables": ["major", "member"]}, "evidence": ""}
{"sample_id": 10861, "db_id": "student_club", "final": {"question": "Please list the phone numbers of the members who majored in business at the College of Agriculture and Applied Sciences.", "sql": "SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'", "source_tables": ["major", "member"]}, "evidence": "'College of Agriculture and Applied Sciences' is the college; majored in business refers to major_name = 'Business'; phone numbers refers to phone"}
{"sample_id": 10862, "db_id": "student_club", "final": {"question": "List emails of people who paid more than 20 dollars from 9/10/2019 to 11/19/2019.", "sql": "SELECT DISTINCT T1.email FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE date(SUBSTR(T2.expense_date, 1, 10)) BETWEEN '2019-09-10' AND '2019-11-19' AND T2.cost > 20", "source_tables": ["expense", "member"]}, "evidence": "expense_date BETWEEN '2019-09-10' and '2019-11-19'; cost > 20"}
{"sample_id": 10863, "db_id": "student_club", "final": {"question": "How many members have education major in the College of Education & Human Services?", "sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member' AND T2.major_name LIKE '%Education%' AND T2.college = 'College of Education & Human Services'", "source_tables": ["major", "member"]}, "evidence": "'education' is the major name; 'Member' is a position of club;"}
{"sample_id": 10864, "db_id": "student_club", "final": {"question": "What is the percentage of the events that went over budget?", "sql": "SELECT CAST(SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(budget_id) FROM budget", "source_tables": ["budget"]}, "evidence": "went over budget refers to remaining < 0; percentage = DIVIDE(SUM(remaining < 0), COUNT(event_id)) * 100"}
{"sample_id": 10865, "db_id": "student_club", "final": {"question": "Give the event ID, location, and status of events conducted from November 2019 to March 2020.", "sql": "SELECT event_id, location, status FROM event WHERE date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-11-01' AND '2020-03-31'", "source_tables": ["event"]}, "evidence": "event_date BETWEEN '2019-11-01' and '2020-03-31'"}
{"sample_id": 10866, "db_id": "student_club", "final": {"question": "List the expenses that spend more than fifty dollars on average.", "sql": "SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50", "source_tables": ["expense"]}, "evidence": "expense refers to expense_description; spend more than fifty dollars on average refers to DIVIDE( SUM(cost), COUNT(expense_id) ) > 50"}
{"sample_id": 10867, "db_id": "student_club", "final": {"question": "Find the full name of members whose t-shirt size is extra large.", "sql": "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'", "source_tables": ["member"]}, "evidence": "full name refers to first_name, last_name; t_shirt_size = 'X-Large'"}
{"sample_id": 10868, "db_id": "student_club", "final": {"question": "Calculate the percentage of zip codes that are PO boxes.", "sql": "SELECT CAST(SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) FROM zip_code", "source_tables": ["zip_code"]}, "evidence": "DIVIDE(SUM(type = 'PO Box'), COUNT(zip_code)) * 100"}
{"sample_id": 10869, "db_id": "student_club", "final": {"question": "List the name and location of events that underspend its budget.", "sql": "SELECT DISTINCT T1.event_name, T1.location FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 0", "source_tables": ["event", "budget"]}, "evidence": "name of event refers to event_name; underspend its budget refers to remaining > 0"}
{"sample_id": 10870, "db_id": "student_club", "final": {"question": "Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars.", "sql": "SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.expense_description = 'Pizza' AND T3.cost > 50 AND T3.cost < 100", "source_tables": ["event", "budget", "expense"]}, "evidence": "name of event refers to event_name; date of event refers to event_date; expenses for pizza refers to expense_description = 'Pizza' where cost > 50 and cost < 100"}
{"sample_id": 10871, "db_id": "student_club", "final": {"question": "What is the name and major of members who had to spend more than a hundred dollars on an expense?", "sql": "SELECT DISTINCT T1.first_name, T1.last_name, T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member WHERE T3.cost > 100", "source_tables": ["major", "expense", "member"]}, "evidence": "full name refers to first_name, last_name; major of members refers to major_name; spend more than a hundred dollars on an expense refers to cost > 100"}
{"sample_id": 10872, "db_id": "student_club", "final": {"question": "In the events with more than forty incomes, list the city and country in which the event is happening.", "sql": "SELECT DISTINCT T3.city, T3.county FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN zip_code AS T3 ON T3.zip_code = T2.zip WHERE T1.amount > 40", "source_tables": ["income", "zip_code", "member"]}, "evidence": "more than fifty incomes refers to income > 40"}
{"sample_id": 10873, "db_id": "student_club", "final": {"question": "Among the members who incurred expenses in more than one event, who paid the most amount?", "sql": "SELECT T2.member_id FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 ON T1.link_to_budget = T3.budget_id INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id GROUP BY T2.member_id HAVING COUNT(DISTINCT T4.event_id) > 1 ORDER BY SUM(T1.cost) DESC LIMIT 1", "source_tables": ["event", "budget", "expense", "member"]}, "evidence": "paid the most amount refers to for expense incurred in more than one event refers to MAX(cost where COUNT(event_id) > 1)"}
{"sample_id": 10874, "db_id": "student_club", "final": {"question": "What is the average amount paid by students in a position other than a member?", "sql": "SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN member as T2 ON T1.link_to_member = T2.member_id WHERE T2.position != 'Member'", "source_tables": ["expense", "member"]}, "evidence": "position other than a member refers to position ! = 'Member'; average amount paid = DIVIDE( SUM(cost), COUNT(event_id))"}
{"sample_id": 10875, "db_id": "student_club", "final": {"question": "List the name of events with less than average parking cost.", "sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)", "source_tables": ["event", "budget", "expense"]}, "evidence": "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'"}
{"sample_id": 10876, "db_id": "student_club", "final": {"question": "What is the percentage of the cost for the meeting events?", "sql": "SELECT SUM(CASE WHEN T1.type = 'Meeting' THEN T3.cost ELSE 0 END) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget", "source_tables": ["event", "budget", "expense"]}, "evidence": "meeting events refers to type = 'Meeting'; percentage = DIVIDE( SUM(cost), COUNT(event_id)) * 100"}
{"sample_id": 10877, "db_id": "student_club", "final": {"question": "Which budget allowed the most money for water, chips, and cookies?", "sql": "SELECT T2.budget_id FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Water, chips, cookies' ORDER BY T1.cost DESC LIMIT 1", "source_tables": ["budget", "expense"]}, "evidence": "budget allowed refers to expense_description; expense_description = 'Water, chips, cookies'; most money refers to MAX(cost)"}
{"sample_id": 10878, "db_id": "student_club", "final": {"question": "List the full name of the top five members who spend the most money in the descending order of spending.", "sql": "SELECT T3.first_name, T3.last_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id ORDER BY T2.spent DESC LIMIT 5", "source_tables": ["budget", "expense", "member"]}, "evidence": "full name refers to first_name, last_name; spend the most money refers to MAX(expense.cost)"}
{"sample_id": 10879, "db_id": "student_club", "final": {"question": "Give the full name and contact number of members who had to spend more than average on each expense.", "sql": "SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > ( SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member )", "source_tables": ["budget", "expense", "member"]}, "evidence": "full name refers to first_name, last_name; contact number refers to phone; had spent more than average on each expense refers to cost > AVG(cost)"}
{"sample_id": 10880, "db_id": "student_club", "final": {"question": "Calculate the difference in the percentage of members in New Jersey and Vermont.", "sql": "SELECT CAST((SUM(CASE WHEN T2.state = 'New Jersey' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.member_id) AS diff FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip", "source_tables": ["zip_code", "member"]}, "evidence": "SUBTRACT( DIVIDE( SUM(state = 'New Jersey'), COUNT(position = 'Member')), DIVIDE( SUM(state = 'Vermont'), COUNT(position = 'Member')) )"}
{"sample_id": 10881, "db_id": "student_club", "final": {"question": "What is the major of Garrett Gerke and which department does it belong to?", "sql": "SELECT T2.major_name, T2.department FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'", "source_tables": ["major", "member"]}, "evidence": "major refers to major name;"}
{"sample_id": 10882, "db_id": "student_club", "final": {"question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.", "sql": "SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'", "source_tables": ["expense", "member"]}, "evidence": "full name refers to first_name, last name; spent money for refers expense description; expense_description = 'Water, Veggie tray, supplies'"}
{"sample_id": 10883, "db_id": "student_club", "final": {"question": "List the last names of students under the Elementary Education major and include their phone numbers.", "sql": "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Elementary Education'", "source_tables": ["major", "member"]}, "evidence": "'Elementary Education' is the major name; phone numbers refers to phone"}
{"sample_id": 10884, "db_id": "student_club", "final": {"question": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?", "sql": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'", "source_tables": ["event", "budget"]}, "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;"}
{"sample_id": 10885, "db_id": "student_club", "final": {"question": "List the event names which were budgeted for the food.", "sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'", "source_tables": ["event", "budget"]}, "evidence": "budgeted for food refers to category = 'Food'"}
{"sample_id": 10886, "db_id": "student_club", "final": {"question": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.", "sql": "SELECT DISTINCT T3.first_name, T3.last_name, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'", "source_tables": ["event", "attendance", "income", "member"]}, "evidence": "full name refers to first_name, last_name, amount of funds received refers to amount, received funds on date refers to date_received"}
{"sample_id": 10887, "db_id": "student_club", "final": {"question": "Which budget category does the expense 'Posters' fall to?", "sql": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'", "source_tables": ["budget", "expense"]}, "evidence": "'Posters' refers to expense description"}
{"sample_id": 10888, "db_id": "student_club", "final": {"question": "Write the full name of the club member with the position of 'Secretary' and list which college the club member belongs to.", "sql": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'", "source_tables": ["major", "member"]}, "evidence": "full name refers to first_name, last name"}
{"sample_id": 10889, "db_id": "student_club", "final": {"question": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.", "sql": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name", "source_tables": ["event", "budget"]}, "evidence": "total amount spent = SUM(spent) where category = 'Speaker Gifts'"}
{"sample_id": 10890, "db_id": "student_club", "final": {"question": "Where is the hometown of Garrett Gerke?", "sql": "SELECT T2.city FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'", "source_tables": ["zip_code", "member"]}, "evidence": "hometown refers to city"}
{"sample_id": 10891, "db_id": "student_club", "final": {"question": "Which student has the hometown of Lincolnton, North Carolina with the zip code of 28092? List their full name and position.", "sql": "SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T2.zip_code = 28092", "source_tables": ["zip_code", "member"]}, "evidence": "full name refers to first_name, last_name, hometown of Lincolnton, North Carolina refers to city = 'Lincolnton' AND state = 'North Carolina'"}
{"sample_id": 10942, "db_id": "debit_card_specializing", "final": {"question": "For the customer who paid 124.05 in 2012/8/24, how much did he/she spend during the January of 2012? And what is the date and expenses exactly?", "sql": "SELECT T1.CustomerID, T2.Date, T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Price = 124.05 AND T2.Date = '201201'", "source_tables": ["yearmonth", "transactions_1k"]}, "evidence": "'2012/8/24' can be represented by '2012-08-24'; expense and the consumption has the similar meaning."}
{"sample_id": 10943, "db_id": "debit_card_specializing", "final": {"question": "For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?", "sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'", "source_tables": ["gasstations", "transactions_1k"]}, "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'; '2012/8/26' can be represented by '2012-08-26'; during 8:00-9:00 can be represented as Time BETWEEN '08:00:00' AND '09:00:00'"}
{"sample_id": 10944, "db_id": "debit_card_specializing", "final": {"question": "There's one customer spent 214582.17 in the June of 2013, which currency did he/she use?", "sql": "SELECT T2.Currency FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201306' AND T1.Consumption = 214582.17", "source_tables": ["yearmonth", "customers"]}, "evidence": "June of 2013 means Date contains '201306' in the yearmonth.date of the database"}
{"sample_id": 10945, "db_id": "debit_card_specializing", "final": {"question": "Which country was the card owner of No.667467 in?", "sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = '667467'", "source_tables": ["gasstations", "transactions_1k"]}, "evidence": ""}
{"sample_id": 10946, "db_id": "debit_card_specializing", "final": {"question": "What's the nationality of the customer who spent 548.4 in 2012/8/24?", "sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4", "source_tables": ["gasstations", "transactions_1k"]}, "evidence": "'2012/8/24' can be represented by '2012-08-24'"}
{"sample_id": 10947, "db_id": "debit_card_specializing", "final": {"question": "What is the percentage of the customers who used EUR in 2012/8/25?", "sql": "SELECT CAST(SUM(IIF(T2.Currency = 'EUR', 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'", "source_tables": ["customers", "transactions_1k"]}, "evidence": "'2012/8/25' can be represented by '2012-08-25'"}
{"sample_id": 10948, "db_id": "debit_card_specializing", "final": {"question": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?", "sql": "SELECT CAST(SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTR(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price = 634.8 )", "source_tables": ["gasstations", "yearmonth", "transactions_1k"]}, "evidence": "'2012/8/24' can be represented by '2012-08-24'; Consumption decrease rate = (consumption_2012 - consumption_2013) / consumption_2012"}
{"sample_id": 10949, "db_id": "debit_card_specializing", "final": {"question": "Which gas station has the highest amount of revenue?", "sql": "SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Price) DESC LIMIT 1", "source_tables": ["transactions_1k"]}, "evidence": ""}
{"sample_id": 10950, "db_id": "debit_card_specializing", "final": {"question": "What is the percentage of \"premium\" against the overall segment in Country = \"SVK\"?", "sql": "SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations", "source_tables": ["gasstations"]}, "evidence": ""}
{"sample_id": 10951, "db_id": "debit_card_specializing", "final": {"question": "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?", "sql": "SELECT SUM(T1.Price) , SUM(IIF(T3.Date = '201201', T1.Price, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '38508'", "source_tables": ["gasstations", "yearmonth", "transactions_1k"]}, "evidence": "January 2012 refers to the Date value = '201201'"}
{"sample_id": 10952, "db_id": "debit_card_specializing", "final": {"question": "Which are the top five best selling products? Please state the full name of them.", "sql": "SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Amount DESC LIMIT 5", "source_tables": ["products", "transactions_1k"]}, "evidence": "Description of products contains full name"}
{"sample_id": 10953, "db_id": "debit_card_specializing", "final": {"question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?", "sql": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency", "source_tables": ["yearmonth", "transactions_1k", "customers"]}, "evidence": "average price per single item = Total(price) / Total(amount)"}
{"sample_id": 10954, "db_id": "debit_card_specializing", "final": {"question": "Which country had the gas station that sold the most expensive product id No.2 for one unit?", "sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ProductID = 2 ORDER BY T1.Price DESC LIMIT 1", "source_tables": ["gasstations", "transactions_1k"]}, "evidence": ""}
{"sample_id": 10955, "db_id": "debit_card_specializing", "final": {"question": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.", "sql": "SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price / T1.Amount > 29.00 AND T1.ProductID = 5 AND T2.Date = '201208'", "source_tables": ["yearmonth", "transactions_1k"]}, "evidence": "August of 2012 refers to the Date value = '201208' ; Price per unit of product = Price / Amount;"}
