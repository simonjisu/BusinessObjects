{"sample_id": 165, "db_id": "movie_platform", "final": {"question": "What is the name of the movie that was rated recently by user 57756708?", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 57756708 ORDER BY T1.rating_timestamp_utc DESC LIMIT 1", "source_tables": ["movies", "ratings"]}, "evidence": "user 57756708 refers to user_id = 57756708; rated recently refers to MAX(rating_timestamp_utc)"}
{"sample_id": 137, "db_id": "movie_platform", "final": {"question": "For all the users who gave \"A Shot in the Dark\" a rating, how many percent of them is a paying subscriber?", "sql": "SELECT CAST(SUM(CASE WHEN T1.user_has_payment_method = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists_users AS T3 ON T1.user_id = T3.user_id WHERE T2.movie_title = 'A Shot in the Dark'", "source_tables": ["movies", "ratings", "lists_users"]}, "evidence": "\"A Shot in the Dark\" refers to movie_title = 'A Shot in the Dark'; paying subscriber refers to user_has_payment_method = 1; percentage refers to DIVIDE(COUNT(user_has_payment_method = 1),COUNT(user_has_payment_method))*100"}
{"sample_id": 163, "db_id": "movie_platform", "final": {"question": "What is the average number of number of movies added to the lists of user 8516503? Indicate how many movies did he/she give a rating score of 5.", "sql": "SELECT AVG(T3.list_movie_number) , SUM(CASE WHEN T1.rating_score = 5 THEN 1 ELSE 0 END) FROM ratings AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id INNER JOIN lists AS T3 ON T2.user_id = T3.user_id WHERE T1.user_id = 8516503", "source_tables": ["lists_users", "ratings", "lists"]}, "evidence": "average number of number of movies refers to AVG(list_movie_number); user 8516503 refers to user_id = 8516503; rating score of 5 refers to rating_score = 5"}
{"sample_id": 53, "db_id": "movie_platform", "final": {"question": "Among the movie lists created after 2010/1/1, how many of them have over 200 followers?", "sql": "SELECT COUNT(*) FROM lists WHERE list_followers > 200 AND list_update_timestamp_utc > '2010-01-01'", "source_tables": ["lists"]}, "evidence": "created after 2010/1/1 refers to list_update_timestamp_utc>'2010/1/1'; over 200 followers refers to list_followers>200;"}
{"sample_id": 5, "db_id": "movie_platform", "final": {"question": "What is the average rating for movie titled 'When Will I Be Loved'?", "sql": "SELECT AVG(T2.rating_score) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'When Will I Be Loved'", "source_tables": ["movies", "ratings"]}, "evidence": "average rating = DIVIDE((SUM(rating_score where movie_title = 'When Will I Be Loved')), COUNT(rating_score));"}
{"sample_id": 125, "db_id": "movie_platform", "final": {"question": "Show the head portrait of the user who gave the most \"5\" ratings.", "sql": "SELECT T2.user_avatar_image_url FROM ratings AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id WHERE T1.rating_score = 5", "source_tables": ["lists_users", "ratings"]}, "evidence": "head portrait refers to user_avatar_image_url; \"5\" ratings refers to rating_score = 5"}
{"sample_id": 3, "db_id": "movie_platform", "final": {"question": "Name the movie with the most ratings.", "sql": "SELECT movie_title FROM movies GROUP BY movie_title ORDER BY COUNT(movie_title) DESC LIMIT 1", "source_tables": ["movies"]}, "evidence": "movie with the most rating refers to MAX(SUM(rating_score));"}
{"sample_id": 154, "db_id": "movie_platform", "final": {"question": "What is the name of the list that was updated most recently?", "sql": "SELECT list_title FROM lists WHERE list_update_timestamp_utc = ( SELECT list_update_timestamp_utc FROM lists ORDER BY list_update_timestamp_utc DESC LIMIT 1 )", "source_tables": ["lists"]}, "evidence": "updated most recently refers to MAX(list_update_date_utc)"}
{"sample_id": 49, "db_id": "movie_platform", "final": {"question": "What is the average rating score of the 'Pavee Lackeen: The Traveller Girl' movie and what year was it released?", "sql": "SELECT AVG(T1.rating_score), T2.movie_release_year FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Pavee Lackeen: The Traveller Girl'", "source_tables": ["movies", "ratings"]}, "evidence": "year it was released refers to movie_release_year; average rating score refers to AVG(rating_score where movie_title = 'Final Destination 6'); Final Destination 6 refers to movie_title"}
{"sample_id": 35, "db_id": "movie_platform", "final": {"question": "How many users, who were a paying subscriber when they rated the movie, gave the movie that was released in 1924 and directed by Erich von Stroheim a rating score of 5?", "sql": "SELECT COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_release_year = 1924 AND T1.director_name = 'Erich von Stroheim' AND T2.rating_score = 5 AND T2.user_has_payment_method = 1", "source_tables": ["movies", "ratings"]}, "evidence": "Directed by Buster Keaton refers to director_name; released in 1924 refers to movie_release_year = 1924; paying subscriber refers to user_has_payment_method = 1\n\n"}
{"sample_id": 80, "db_id": "movie_platform", "final": {"question": "Please list the movies rated by the user who created the movie list \"250 Favourite Films\".", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists AS T3 ON T3.user_id = T1.user_id WHERE T3.list_title = '250 Favourite Films'", "source_tables": ["movies", "ratings", "lists"]}, "evidence": "250 Favourite Films' is list_title; movies refers to movie_title;"}
{"sample_id": 77, "db_id": "movie_platform", "final": {"question": "Among the users who are trailists when rating the movie \"When Will I Be Loved\", how many of them have rated \"1\" on the movie?", "sql": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved' AND T1.rating_score = 1 AND T1.user_trialist = 1", "source_tables": ["movies", "ratings"]}, "evidence": "When Will I Be Loved refers to movie_title; the user was a trialist when he rated the movie refers to user_trialist = 1;rated 1 on the movie refers to rating_score = 1;"}
{"sample_id": 34, "db_id": "movie_platform", "final": {"question": "Which year has the least number of movies that was released and what is the title of the movie in that year that has the highest number of rating score of 1?", "sql": "SELECT DISTINCT T1.movie_release_year, T1.movie_title FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_release_year = ( SELECT movie_release_year FROM movies GROUP BY movie_release_year ORDER BY COUNT(movie_id) DESC LIMIT 1 ) AND T2.rating_score = 1", "source_tables": ["movies", "ratings"]}, "evidence": "least number of movies refers to MIN(movie_release_year); highest rating score refers to MAX(SUM(movie_id) where rating_score = '1')\n\n"}
{"sample_id": 46, "db_id": "movie_platform", "final": {"question": "What is the URL to the rating on Mubi made by user 45579900 for the movie \"The Vertical Ray of the Sun\" that received 20 likes?", "sql": "SELECT T2.rating_url FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_id = 45579900 AND T1.movie_title = 'The Vertical Ray of the Sun' AND T2.critic_likes = 20", "source_tables": ["movies", "ratings"]}, "evidence": "URL refer to rating_url; 20 likes refer to critic_likes = \u201920\u2019; user 45579900 refer to user_id"}
{"sample_id": 7, "db_id": "movie_platform", "final": {"question": "What is the percentage of the ratings were rated by user who was a subcriber?", "sql": "SELECT CAST(SUM(CASE WHEN user_subscriber = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM ratings", "source_tables": ["ratings"]}, "evidence": "user is a subscriber refers to user_subscriber = 1; percentage of ratings = DIVIDE(SUM(user_subscriber = 1), SUM(rating_score)) as percent;"}
{"sample_id": 43, "db_id": "movie_platform", "final": {"question": "What is the average rating score of the movie \"The Crowd\" and who was its director?", "sql": "SELECT AVG(T2.rating_score), T1.director_name FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'The Crowd'", "source_tables": ["movies", "ratings"]}, "evidence": "director refer to director_name; The Crowd refer to movie_title; Average refer to AVG(rating_score)"}
{"sample_id": 70, "db_id": "movie_platform", "final": {"question": "When did user 39115684 rate the movie \"A Way of Life\"?", "sql": "SELECT T1.rating_score FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.user_id = 39115684", "source_tables": ["movies", "ratings"]}, "evidence": "A Way of Life' refers to movie_title; user 39115684 refers to userid = 39115684;\u00a0 when the user rate refers to rating_timestamp_utc;"}
{"sample_id": 128, "db_id": "movie_platform", "final": {"question": "Give the url of movie which was rated 5 on 2013/5/3 5:11:17.", "sql": "SELECT T2.movie_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE rating_score = 5 AND rating_timestamp_utc LIKE '2013-05-03 05:11:17'", "source_tables": ["movies", "ratings"]}, "evidence": "rated 5 refers to rating_score = 5; on 2013/5/3 5:11:17 refers to rating_timestamp_utc = '2013-05-03 05:11:17'"}
{"sample_id": 110, "db_id": "movie_platform", "final": {"question": "What percentage of users rated the movie \"Patti Smith: Dream of Life\" by more than 3?", "sql": "SELECT CAST(SUM(CASE WHEN T1.rating_score > 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title LIKE 'Patti Smith: Dream of Life'", "source_tables": ["movies", "ratings"]}, "evidence": "Patti Smith: Dream of Life' is movie_title; more than 3 refers to rating_score >3; percentage = Divide(Count(rating_score where rating_score >3), Count(rating_score))*100"}
{"sample_id": 91, "db_id": "movie_platform", "final": {"question": "Please provide the ID of the user with the most followers on the list.", "sql": "SELECT user_id FROM lists ORDER BY list_followers DESC LIMIT 1", "source_tables": ["lists"]}, "evidence": "most followers refers to Max(list_followers);"}
{"sample_id": 83, "db_id": "movie_platform", "final": {"question": "How much higher is the average rating score of the movie \"Innocence Unprotected\" than the movie \"When Will I Be Loved\"?", "sql": "SELECT SUM(CASE WHEN T2.movie_title = 'Innocence Unprotected' THEN T1.rating_score ELSE 0 END) / SUM(CASE WHEN T2.movie_title = 'Innocence Unprotected' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.movie_title = 'When Will I Be Loved' THEN T1.rating_score ELSE 0 END) / SUM(CASE WHEN T2.movie_title = 'When Will I Be Loved' THEN 1 ELSE 0 END) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id", "source_tables": ["movies", "ratings"]}, "evidence": "Innocence Unprotected' and 'When Will I Be Loved' are movie_title; Average rating score = Divide(Sum(rating_score), Count(rating_id));"}
{"sample_id": 153, "db_id": "movie_platform", "final": {"question": "What is the URL to the movie director page on Mubi of the movie titled \"Red Blooded American Girl\"", "sql": "SELECT director_url FROM movies WHERE movie_title LIKE 'Red Blooded American Girl'", "source_tables": ["movies"]}, "evidence": "movie titled \"Red Blooded American Girl\" refers to movie_title = 'Red Blooded American Girl'"}
{"sample_id": 150, "db_id": "movie_platform", "final": {"question": "List all movies rated by user 39115684. State the title, rating date and rating score.", "sql": "SELECT T2.movie_title, T1.rating_timestamp_utc, T1.rating_score FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 39115684", "source_tables": ["movies", "ratings"]}, "evidence": "user 39115684 refers to user_id = 39115684; title refers to movie_title; rating date refers to rating_timestamp_utc\n"}
{"sample_id": 89, "db_id": "movie_platform", "final": {"question": "When was the movie Cops released?", "sql": "SELECT movie_release_year FROM movies WHERE movie_title = 'Cops'", "source_tables": ["movies"]}, "evidence": "Cops' is movie_title; released refers to movie_release_year;"}
{"sample_id": 8, "db_id": "movie_platform", "final": {"question": "List all movie title rated in April 2020 from user who was a trialist.", "sql": "SELECT T1.movie_title FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_trialist = 1 AND T2.rating_timestamp_utc LIKE '2020-04%'", "source_tables": ["movies", "ratings"]}, "evidence": "movie title rated in April 2020 refers to rating_timestamp_utc LIKE '%2020-04-%'; user is a trial list refers to user_trialist = 1;"}
{"sample_id": 159, "db_id": "movie_platform", "final": {"question": "What is the name of the movie whose critic received the highest amount of likes? Indicate the URL to the rating on Mubi.", "sql": "SELECT T2.movie_title, T1.rating_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.critic_likes DESC LIMIT 1", "source_tables": ["movies", "ratings"]}, "evidence": "critic received the highest amount of likes refers to MAX(critic_likes);"}
{"sample_id": 113, "db_id": "movie_platform", "final": {"question": "Who is the director that made the most movies? Give the director's id.", "sql": "SELECT director_id FROM movies GROUP BY director_id ORDER BY COUNT(movie_id) DESC LIMIT 1", "source_tables": ["movies"]}, "evidence": "director that made the most movies refers to MAX(COUNT(movie_id))"}
{"sample_id": 13, "db_id": "movie_platform", "final": {"question": "For movie titled 'Welcome to the Dollhouse', how many percentage of the ratings were rated with highest score.", "sql": "SELECT CAST(SUM(CASE WHEN T2.rating_score = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'Welcome to the Dollhouse'", "source_tables": ["movies", "ratings"]}, "evidence": "rated with highest score refers to rating_score = 5; percentage = MULTIPLY(DIVIDE(SUM(rating_score = 5), COUNT(rating_score)), 100)"}
{"sample_id": 59, "db_id": "movie_platform", "final": {"question": "Was the user who created the list \"250 Favourite Films\" a trialist when he or she created the list?", "sql": "SELECT T2.user_trialist FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.list_title = '250 Favourite Films'", "source_tables": ["lists", "lists_users"]}, "evidence": "the user was a trialist when he created the list refers to user_trailist = 1; 250 Favourite Films is list_title;"}
{"sample_id": 142, "db_id": "movie_platform", "final": {"question": "Provide list titles created by user who are eligible for trial when he created the list.", "sql": "SELECT DISTINCT T2.list_title FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T1.user_eligible_for_trial = 1", "source_tables": ["lists_users", "lists"]}, "evidence": "eligible for trial refers to user_eligible_for_trial = 1"}
{"sample_id": 17, "db_id": "movie_platform", "final": {"question": "What are the URL to the list page on Mubi of the lists with followers between 1-2 and whose last update timestamp was on 2012?", "sql": "SELECT list_url FROM lists WHERE list_update_timestamp_utc LIKE '2012%' AND list_followers BETWEEN 1 AND 2 ORDER BY list_update_timestamp_utc DESC LIMIT 1", "source_tables": ["lists"]}, "evidence": "URL to the list page on Mubi refers to list_url; list_followers = 1 OR list_followers = 2; last update timestamp was on 2012 refers to list_update_timestamp_utc BETWEEN '2012-1-1' AND '2012-12-31';"}
{"sample_id": 72, "db_id": "movie_platform", "final": {"question": "Was user 39115684 a trialist when he or she rated the movie \"A Way of Life\"?", "sql": "SELECT T1.user_trialist FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.user_id = 39115684", "source_tables": ["movies", "ratings"]}, "evidence": "A Way of Life' refers to movie_title; user 39115684 refers to userid = 39115684;\u00a0 the user was a trialist when he rated the movie refers to user_trialist = 1;"}
{"sample_id": 145, "db_id": "movie_platform", "final": {"question": "List all the titles created by user who was a subsriber when he created the list and have less than 50 movies in the list.", "sql": "SELECT DISTINCT T2.list_title FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_movie_number < 50 AND T1.user_subscriber = 1", "source_tables": ["lists_users", "lists"]}, "evidence": "have less than 50 movies in the list refers to list_movie_number <50; was a subscriber refers to user_subscriber = 1"}
{"sample_id": 214, "db_id": "book_publishing_company", "final": {"question": "Which type of book had the most pre-paid amount?", "sql": "SELECT type FROM titles ORDER BY advance DESC LIMIT 1", "source_tables": ["titles"]}, "evidence": "most pre-paid amount refers to MAX(advance)"}
{"sample_id": 212, "db_id": "book_publishing_company", "final": {"question": "What is the average level employees working as Managing Editor are at? How many levels are there between the average level and the highest level?", "sql": "SELECT AVG(T2.job_lvl), T1.max_lvl - AVG(T2.job_lvl) FROM jobs AS T1 INNER JOIN employee AS T2 ON T1.job_id = T2.job_id WHERE T1.job_desc = 'Managing Editor' GROUP BY T2.job_id, T1.max_lvl", "source_tables": ["employee", "jobs"]}, "evidence": "Managing Editor is a job description which refers to job_desc; job level refers to job_lvl; highest level job refers to max_lvl; levels between the average level and the highest level = SUBTRACT(max_lvl; AVG(job_lvl))"}
{"sample_id": 198, "db_id": "book_publishing_company", "final": {"question": "How many publishers are in the USA?", "sql": "SELECT COUNT(pub_id) FROM publishers WHERE country = 'USA'", "source_tables": ["publishers"]}, "evidence": ""}
{"sample_id": 181, "db_id": "book_publishing_company", "final": {"question": "Name all employees who were hired before year 1990.", "sql": "SELECT fname, lname FROM employee WHERE STRFTIME('%Y', hire_date) < '1990'", "source_tables": ["employee"]}, "evidence": "hired before year 1990 refers to YEAR(hire_date)<1990"}
{"sample_id": 190, "db_id": "book_publishing_company", "final": {"question": "Name the title with the highest price published by 'Binnet & Hardley'.", "sql": "SELECT T1.title FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.pub_name = 'Binnet & Hardley' ORDER BY T1.price DESC LIMIT 1", "source_tables": ["publishers", "titles"]}, "evidence": "published by refers to pub_name"}
{"sample_id": 236, "db_id": "book_publishing_company", "final": {"question": "Calculate the average level difference between the Marketing editors hired by the US and non-US publishers?", "sql": "SELECT (CAST(SUM(CASE WHEN T1.country = 'USA' THEN job_lvl ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.country = 'USA' THEN 1 ELSE 0 END)) - (CAST(SUM(CASE WHEN T1.country != 'USA' THEN job_lvl ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.country != 'USA' THEN 1 ELSE 0 END)) FROM publishers AS T1 INNER JOIN employee AS T2 ON T1.pub_id = T2.pub_id INNER JOIN jobs AS T3 ON T2.job_id = T3.job_id WHERE T3.job_desc = 'Managing Editor'", "source_tables": ["publishers", "employee", "jobs"]}, "evidence": "Marketing manager is a job description which refers to job_desc; US publisher refers publisher in the US where country = 'USA'; non-US publishers refers publisher not in the US where country! = 'USA'; job level refers to job_lvl; average level = AVG(job_lvl)"}
{"sample_id": 208, "db_id": "book_publishing_company", "final": {"question": "Among the publishers in the USA, how many of them have published books that are over $15?", "sql": "SELECT COUNT(DISTINCT T1.pub_id) FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.country = 'USA' AND T1.price > 15", "source_tables": ["publishers", "titles"]}, "evidence": "are over $15 refers to price>15"}
{"sample_id": 217, "db_id": "book_publishing_company", "final": {"question": "Show me the employ id of the highest employee who doesn't have a middle name.", "sql": "SELECT emp_id FROM employee WHERE minit = '' ORDER BY job_lvl DESC LIMIT 1", "source_tables": ["employee"]}, "evidence": "highest employee refers to employee with the highest job level; MAX(job_lvl)"}
{"sample_id": 199, "db_id": "book_publishing_company", "final": {"question": "What is the publisher's information of New Moon Books?", "sql": "SELECT T1.pr_info FROM pub_info AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.pub_name = 'New Moon Books'", "source_tables": ["pub_info", "publishers"]}, "evidence": "publisher name refers to pub_name; New Moon Books is a publisher name"}
{"sample_id": 203, "db_id": "book_publishing_company", "final": {"question": "What is the price of the book that sells the best?", "sql": "SELECT T2.price FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id ORDER BY T1.qty DESC LIMIT 1", "source_tables": ["titles", "sales"]}, "evidence": "qty is abbreviation for quantity; sells the best mean with the most sales quantity; MAX(qty)"}
{"sample_id": 175, "db_id": "book_publishing_company", "final": {"question": "List all titles published in year 1991. Also provide notes details of the title and the publisher's name.", "sql": "SELECT T1.title, T1.notes, T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE STRFTIME('%Y', T1.pubdate) = '1991'", "source_tables": ["publishers", "titles"]}, "evidence": "publisher name refers to pub_name; publication date refers to pubdate; published in year 1991 refers to YEAR(pubdate) = 1991"}
{"sample_id": 231, "db_id": "book_publishing_company", "final": {"question": "Which titles has above average royalty rate? Give those title's name, type and price?", "sql": "SELECT DISTINCT T1.title, T1.type, T1.price FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.royalty > ( SELECT CAST(SUM(royalty) AS REAL) / COUNT(title_id) FROM roysched )", "source_tables": ["titles", "roysched"]}, "evidence": "average royalty rate = DIVIDE(SUM(royalty), COUNT(title_id))"}
{"sample_id": 174, "db_id": "book_publishing_company", "final": {"question": "State the royalty percentage for the most year to date sale title within the 20000 range.", "sql": "SELECT MAX(T1.ytd_sales) FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.lorange > 20000 AND T2.hirange < 20000", "source_tables": ["titles", "roysched"]}, "evidence": "most year to date sales refers to MAX(ytd_sales); range limit means high range which refers to hirange; the 20000 range refers to hirange<20000"}
{"sample_id": 239, "db_id": "book_publishing_company", "final": {"question": "Name the top five titles that sold more than average and list them in descending order of the number of sales in California stores?", "sql": "SELECT T1.title FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id INNER JOIN publishers AS T3 ON T1.pub_id = T3.pub_id WHERE T2.qty > ( SELECT CAST(SUM(qty) AS REAL) / COUNT(title_id) FROM sales ) AND T3.state = 'CA' ORDER BY T2.qty DESC LIMIT 5", "source_tables": ["publishers", "titles", "sales"]}, "evidence": "qty is abbreviation for quantity; sold more than average refers to qty > AVG(qty); california refers to state = 'CA\""}
{"sample_id": 277, "db_id": "retail_complains", "final": {"question": "Calculate the average age of clients from the Midwest region.", "sql": "SELECT CAST(SUM(T1.age) AS REAL) / COUNT(T3.Region) AS average FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T3.Region = 'Midwest'", "source_tables": ["client", "state", "district"]}, "evidence": "average age = AVG(age);"}
{"sample_id": 269, "db_id": "retail_complains", "final": {"question": "What was the phone of number of the client who made the complaint call \"CR0100432\" \uff1f", "sql": "SELECT T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Complaint ID\" = 'CR0100432'", "source_tables": ["client", "events"]}, "evidence": "complaint call refers to Complaint ID;"}
{"sample_id": 261, "db_id": "retail_complains", "final": {"question": "What was the detailed issue did Mr Gunner Omer Fuller complain about?", "sql": "SELECT T2.\"Sub-issue\" FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Gunner' AND T1.middle = 'Omer' AND T1.last = 'Fuller' AND T1.sex = 'Male'", "source_tables": ["client", "events"]}, "evidence": "detailed issue refers to Sub-issue; Mr refers to sex = 'Male';"}
{"sample_id": 325, "db_id": "retail_complains", "final": {"question": "Please list any two clients with their full names who have been tagged as \"Older American\" by the company without seeking their permission.", "sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Tags = 'Older American' AND T2.\"Consumer consent provided?\" IN (NULL, 'N/A', '') LIMIT 2", "source_tables": ["client", "events"]}, "evidence": "full names = first, middle, last; without seeking their permission refers to \"Consumer consent provided?\" in (null, 'N/A' or 'empty');"}
{"sample_id": 298, "db_id": "retail_complains", "final": {"question": "How many cases of billing dispute issues occurred in the Mountain division?", "sql": "SELECT COUNT(T1.Issue) FROM events AS T1 INNER JOIN client AS T2 ON T1.Client_ID = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.Issue = 'Billing disputes' AND T3.division = 'Mountain'", "source_tables": ["client", "events", "district"]}, "evidence": "billing dispute refers to issue = 'Billing disputes';"}
{"sample_id": 315, "db_id": "retail_complains", "final": {"question": "What is the average age of Norwalk clients?", "sql": "SELECT CAST(SUM(T1.age) AS REAL) / COUNT(T1.age) AS average FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Norwalk'", "source_tables": ["client", "district"]}, "evidence": "average age = AVG(age); Norwalk refers to city = 'Norwalk';"}
{"sample_id": 353, "db_id": "retail_complains", "final": {"question": "Pick 5 clients with 0 priority and write down their last name.", "sql": "SELECT T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T2.priority = 0 LIMIT 5", "source_tables": ["client", "callcenterlogs"]}, "evidence": "0 priority refers to priority = 0; last name refers to last"}
{"sample_id": 356, "db_id": "retail_complains", "final": {"question": "State the first name of male clients who did not receive timely response from the call center.", "sql": "SELECT T1.first FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Timely response?\" = 'No' AND T1.sex = 'Male'", "source_tables": ["client", "events"]}, "evidence": "first name refers to first; male refers to sex = 'Male'; did not receive timely response refers to Timely response? = 'No'"}
{"sample_id": 256, "db_id": "retail_complains", "final": {"question": "What is the average number of complaints on credit cards filed by clients from New York in the 3 consecutive years starting from 2015?", "sql": "SELECT CAST(COUNT(T2.\"Complaint ID\") AS REAL) / 3 AS average FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE strftime('%Y', T2.\"Date received\") BETWEEN '2015' AND '2017' AND T1.city = 'New York City' AND T2.Product = 'Credit card'", "source_tables": ["client", "events"]}, "evidence": "average = AVG(Complaint ID); credit cards refers to Product = 'Credit card'; New York refers to city = 'New York'; 3 consecutive years starting from 2015 refers to \"Date received\" BETWEEN 2015 AND 2017;"}
{"sample_id": 306, "db_id": "retail_complains", "final": {"question": "How many complaints were served in 5 minutes or less by DORIT and responded to the customer with an explanation, were made by phone?", "sql": "SELECT COUNT(T1.\"Complaint ID\") FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE T1.ser_time < '00:05:00' AND T1.server = 'DORIT' AND T2.\"Submitted via\" = 'Phone' AND T2.\"Company response to consumer\" = 'Closed with explanation'", "source_tables": ["callcenterlogs", "events"]}, "evidence": "served in 5 minutes or less refers to ser_time < '00:05:00'; DORIT refers to server = 'DORIT'; responded with an explanation refers to \"Company response to consumer\" = 'Closed with explanation'; made by refers to \"Submitted via\";"}
{"sample_id": 393, "db_id": "retail_complains", "final": {"question": "In the complains received in 2012, how many of them are submitted through email?", "sql": "SELECT COUNT(\"Submitted via\") FROM events WHERE strftime('%Y', \"Date received\") = '2012' AND \"Submitted via\" = 'Email'", "source_tables": ["events"]}, "evidence": "received in 2012 refers to Date received LIKE '2012%'; submitted through email refers to Submitted via = 'Email'"}
{"sample_id": 247, "db_id": "retail_complains", "final": {"question": "For how long was the complaint filed by Matthew Pierce on 2016/10/28 delayed?", "sql": "SELECT 365 * (strftime('%Y', T2.\"Date sent to company\") - strftime('%Y', T2.\"Date received\")) + 30 * (strftime('%M', T2.\"Date sent to company\") - strftime('%M', T2.\"Date received\")) + (strftime('%d', T2.\"Date sent to company\") - strftime('%d', T2.\"Date received\")) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Matthew' AND T1.last = 'Pierce' AND T2.\"Date received\" = '2016-10-28'", "source_tables": ["client", "events"]}, "evidence": "on 2016/10/28 refers to \"Date received\" = '2016-10-28'; delayed = SUBTRACT(\"Date sent to company', 'Date received\");"}
{"sample_id": 259, "db_id": "retail_complains", "final": {"question": "Which state does the owner of \"wyatt.collins@gmail.com\" live in? Give the full name of the state.", "sql": "SELECT T1.state FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.email = 'wyatt.collins@gmail.com'", "source_tables": ["client", "district"]}, "evidence": "full name of the state refers to state_name;"}
{"sample_id": 380, "db_id": "retail_complains", "final": {"question": "What is the average age of clients in South Atlantic?", "sql": "SELECT AVG(T1.age) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'South Atlantic'", "source_tables": ["client", "district"]}, "evidence": "in South Atlantic refers to division = 'South Atlantic'; average age refers to avg(age)"}
{"sample_id": 260, "db_id": "retail_complains", "final": {"question": "Which detailed product did Mr Lennox Oliver Drake complain about?", "sql": "SELECT DISTINCT T2.\"Sub-product\" FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Lennox' AND T1.middle = 'Oliver' AND T1.last = 'Drake' AND T1.sex = 'Male'", "source_tables": ["client", "events"]}, "evidence": "detailed product refers to \"Sub-product\"; Mr refers to sex = 'Male';"}
{"sample_id": 253, "db_id": "retail_complains", "final": {"question": "How many complaints on credit cards in the year 2016 were filed by male clients?", "sql": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE strftime('%Y', T2.\"Date received\") = '2016' AND T1.sex = 'Male' AND T2.Product = 'Credit card'", "source_tables": ["client", "events"]}, "evidence": "credit cards refers to Product = 'Credit card'; 2016 refers to year(Date received) = 2016; male refers to sex = 'Male';"}
{"sample_id": 358, "db_id": "retail_complains", "final": {"question": "Complaint about Credit Card mostly came from clients of which age group?", "sql": "SELECT SUM(CASE WHEN T1.age > 13 AND T1.age <= 19 THEN 1 ELSE 0 END), SUM(CASE WHEN T1.age > 19 AND T1.age <= 65 THEN 1 ELSE 0 END) AS adult , SUM(CASE WHEN T1.age > 65 THEN 1 ELSE 0 END) AS elder FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Product = 'Credit card'", "source_tables": ["client", "events"]}, "evidence": "about Credit Card refers to Product = 'Credit Card'; teenager refers to 13 < age < = 19; adult refers to 19 < age < = 65; elder refers to age < = 65"}
{"sample_id": 307, "db_id": "retail_complains", "final": {"question": "How many clients with the last name Alvarado are from Maryland?", "sql": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T1.state_abbrev = T3.StateCode WHERE T2.last = 'Alvarado' AND T2.state = 'MD'", "source_tables": ["client", "state", "district"]}, "evidence": "The abbreviation of Maryland is 'MD';"}
{"sample_id": 272, "db_id": "retail_complains", "final": {"question": "How many priority urgent complaints were received in march of 2017? List the complaint ID of these complaints.", "sql": "SELECT COUNT(\"Complaint ID\") FROM callcenterlogs WHERE \"Date received\" LIKE '2017-01%' AND priority = ( SELECT MAX(priority) FROM callcenterlogs )", "source_tables": ["callcenterlogs"]}, "evidence": "urgent complaints refers to priority = 2; march of 2017 refers to \"Date received\" BETWEEN '2017-01-01' AND '2017-01-31';"}
{"sample_id": 339, "db_id": "retail_complains", "final": {"question": "Who is the owner of the final phone number for the complaints on server \"MORIAH\" on 9/11/2013?", "sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T2.server = 'MORIAH' AND T2.\"Date received\" = '2013-09-11'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "owner refers to first, middle, last; on 9/11/2013 refers to Date received = '2013-09-11'"}
{"sample_id": 280, "db_id": "retail_complains", "final": {"question": "In the calls from the mountain division, how many are from teenage clients?", "sql": "SELECT COUNT(T1.age) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.age BETWEEN 12 AND 20 AND T2.division = 'Mountain'", "source_tables": ["client", "district"]}, "evidence": "teenage refers to age BETWEEN 12 AND 20;"}
{"sample_id": 300, "db_id": "retail_complains", "final": {"question": "Lists the last name of all clients who made a PS-type complaint and were served by TOVA.", "sql": "SELECT t1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T2.type = 'PS' AND T2.server = 'TOVA'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "PS-type complaint refers to type = 'PS'; served by refers to server;\n\n"}
{"sample_id": 319, "db_id": "retail_complains", "final": {"question": "How did Kyran Muller submit his complaint?", "sql": "SELECT DISTINCT T2.\"Submitted via\" FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Kyran' AND T1.last = 'Muller'", "source_tables": ["client", "events"]}, "evidence": "how it was submitted refers to \"Submitted via\";"}
{"sample_id": 274, "db_id": "retail_complains", "final": {"question": "Which product got the most five stars, and how many?", "sql": "SELECT T.Product, MAX(T.num) FROM ( SELECT Product, COUNT(Stars) AS num FROM reviews WHERE Stars = 5 GROUP BY Product ) T", "source_tables": ["reviews"]}, "evidence": "most five stars refers to MAX(COUNT(stars = 5));"}
{"sample_id": 378, "db_id": "retail_complains", "final": {"question": "Please calculate the number of clients by each division.", "sql": "SELECT T2.division, COUNT(T2.division) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id GROUP BY T2.division", "source_tables": ["client", "district"]}, "evidence": ""}
{"sample_id": 305, "db_id": "retail_complains", "final": {"question": "How many complaints made by women and served after 3 pm received a timely response from the company?", "sql": "SELECT COUNT(T1.\"Complaint ID\") FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.\"rand client\" = T2.client_id INNER JOIN events AS T3 ON T1.\"Complaint ID\" = T3.\"Complaint ID\" WHERE T2.sex = 'Female' AND T1.ser_start BETWEEN '15:00:01' AND '23:59:59' AND T3.\"Timely response?\" = 'Yes'", "source_tables": ["client", "callcenterlogs", "events"]}, "evidence": "women refers to sex = 'Female'; served after 3 pm refers to ser_time BETWEEN '15:00:01' AND '23:59:59'; received a timely response refers to \"Timely response?\" = 'Yes';"}
{"sample_id": 403, "db_id": "retail_complains", "final": {"question": "What is the division of the review of 5 stars received on December 17, 2017 for the product Eagle National Mortgage?", "sql": "SELECT T1.division FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T2.Stars = 5 AND T2.Date = '2017-12-17' AND T2.Product = 'Eagle National Mortgage'", "source_tables": ["reviews", "district"]}, "evidence": "5 stars refers to Stars = 5; on December 17 2017 refers to Date = '2017-12-17'"}
{"sample_id": 349, "db_id": "retail_complains", "final": {"question": "List down the full name of clients who have disputed the response from company.", "sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Consumer disputed?\" = 'Yes'", "source_tables": ["client", "events"]}, "evidence": "full name refers to first, middle, last; disputed the response refers to Consumer disputed? = 'Yes'"}
{"sample_id": 402, "db_id": "retail_complains", "final": {"question": "List the products involved in the complaints received on March 2017 via TOVA server.", "sql": "SELECT DISTINCT T2.Product FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE T1.server = 'TOVA' AND T2.\"Date received\" LIKE '2017-03%'", "source_tables": ["callcenterlogs", "events"]}, "evidence": "on March 2017 refers to Date received LIKE '%03%' AND Date received LIKE '2017%'"}
{"sample_id": 332, "db_id": "retail_complains", "final": {"question": "Which is the city where most of the 1 star reviews come from?", "sql": "SELECT T2.city FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Stars = 1 GROUP BY T2.city ORDER BY COUNT(T2.city) DESC LIMIT 1", "source_tables": ["reviews", "district"]}, "evidence": "most refers to max(count(state_abbrev)); 1 star review refers to Stars = 1"}
{"sample_id": 381, "db_id": "retail_complains", "final": {"question": "Which city in the Midwest region has the least number of clients?", "sql": "SELECT T2.city FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T3.Region = 'Midwest' GROUP BY T2.city ORDER BY COUNT(T2.city) LIMIT 1", "source_tables": ["client", "state", "district"]}, "evidence": "least number of clients refers to min(count(client_id))"}
{"sample_id": 396, "db_id": "retail_complains", "final": {"question": "Among the complaints received in year 2015, what is total number of complaints timely response and closed with an explanation?", "sql": "SELECT COUNT(T1.\"Complaint ID\") FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE strftime('%Y', T1.\"Date received\") = '2015' AND T2.\"Timely response?\" = 'Yes' AND T2.\"Company response to consumer\" = 'Closed with explanation'", "source_tables": ["callcenterlogs", "events"]}, "evidence": "in year 2015 refers to Date received LIKE '2015%'; timely response refers to Timely response?\" = 'Yes'; closed with an explanation refers to Company response to consumer = 'Closed with explanation'"}
{"sample_id": 323, "db_id": "retail_complains", "final": {"question": "How many clients who live in New York City submitted their complaints via fax?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'New York City' AND T2.\"Submitted via\" = 'Fax'", "source_tables": ["client", "events"]}, "evidence": "submitted complaints via fax refers to \"Submitted via\" = 'Fax';"}
{"sample_id": 545, "db_id": "movies_4", "final": {"question": "List the names of camera supervisors in the crew.", "sql": "SELECT T1.person_name FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T2.job = 'Camera Supervisor'", "source_tables": ["movie_crew", "person"]}, "evidence": "names refers to person_name; camera supervisors refers to job = 'Camera Supervisor';"}
{"sample_id": 504, "db_id": "movies_4", "final": {"question": "List down the IDs of the production companies that released the movies in 1916.", "sql": "SELECT T2.company_id FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id WHERE CAST(STRFTIME('%Y', T1.release_date) AS INT) = 1916", "source_tables": ["movie_company", "movie"]}, "evidence": "IDs of the production companies refers to company_id; movies in 1916 refers to release_date LIKE '1916%'"}
{"sample_id": 550, "db_id": "movies_4", "final": {"question": "List the genres of Forrest Gump movie.", "sql": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.title = 'Forrest Gump'", "source_tables": ["movie", "genre", "movie_genres"]}, "evidence": "genres refers to genre_name; Forrest Gump movie refers to title = 'Forrest Gump'"}
{"sample_id": 519, "db_id": "movies_4", "final": {"question": "List all the keywords with \"christmas\" in them.", "sql": "SELECT keyword_name FROM keyword WHERE keyword_name LIKE '%christmas%'", "source_tables": ["keyword"]}, "evidence": "keywords with \"christmas\" in them refers to keyword_name LIKE '%christmas%'"}
{"sample_id": 560, "db_id": "movies_4", "final": {"question": "How many main actors are there in the movie Pirates of the Caribbean: At World's End?", "sql": "SELECT COUNT(T2.cast_order) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T3.gender_id = T2.gender_id WHERE T3.gender = 'Male' OR T3.gender = 'Female' AND T1.title = 'Pirates of the Caribbean: At World''s End' AND T2.cast_order = ( SELECT MIN(T2.cast_order) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T3.gender_id = T2.gender_id WHERE T3.gender = 'Male' OR T3.gender = 'Female' AND T1.title = 'Pirates of the Caribbean: At World''s End' )", "source_tables": ["movie", "gender", "movie_cast"]}, "evidence": "main actors refers to gender = 'male' and min(cast_order); Pirates of the Caribbean: At World's End refers to title = 'Pirates of the Caribbean: At World''s End'"}
{"sample_id": 546, "db_id": "movies_4", "final": {"question": "List the job titles of Sally Menke in the crew.", "sql": "SELECT DISTINCT T2.job FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Sally Menke'", "source_tables": ["movie_crew", "person"]}, "evidence": "job titles refers to job"}
{"sample_id": 548, "db_id": "movies_4", "final": {"question": "Provide the titles and revenues of the movies produced by the DreamWorks company.", "sql": "SELECT T1.title, T1.revenue FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T2.company_id = T3.company_id WHERE T3.company_name = 'DreamWorks'", "source_tables": ["movie_company", "movie", "production_company"]}, "evidence": "produced by the DreamWorks company refers to company_name = 'DreamWorks'"}
{"sample_id": 501, "db_id": "movies_4", "final": {"question": "Find out the popularity of the movies with the highest vote count.", "sql": "SELECT popularity FROM movie ORDER BY vote_COUNT DESC LIMIT 1", "source_tables": ["movie"]}, "evidence": "highest vote count refers to max(vote_count)"}
{"sample_id": 454, "db_id": "movies_4", "final": {"question": "How many horror movies are there?", "sql": "SELECT COUNT(T1.movie_id) FROM movie_genres AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.genre_id WHERE T2.genre_name = 'Horror'", "source_tables": ["genre", "movie_genres"]}, "evidence": "horror movies refers to genre_name = 'Horror'"}
{"sample_id": 537, "db_id": "movies_4", "final": {"question": "List the movies released in 1945.", "sql": "SELECT title FROM movie WHERE CAST(STRFTIME('%Y', release_date) AS INT) = 1945", "source_tables": ["movie"]}, "evidence": "List the movies refers to title; released in 1945 refers to release_date LIKE '1945%'"}
{"sample_id": 556, "db_id": "movies_4", "final": {"question": "What keyword can the user use to search for the movie Finding Nemo?", "sql": "SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.title = 'Finding Nemo'", "source_tables": ["movie", "keyword", "movie_keywords"]}, "evidence": "What keyword refers to keyword_name; Finding Nemo refers to title = 'Finding Nemo'"}
{"sample_id": 485, "db_id": "movies_4", "final": {"question": "What is the ratio between male and female cast members of the movie 'Iron Man?' Count how many have unspecified genders.", "sql": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Male' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS RATIO , COUNT(CASE WHEN T3.gender = 'Unspecified' THEN 1 ELSE NULL END) AS UNGENDERS FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Iron Man'", "source_tables": ["movie", "gender", "movie_cast"]}, "evidence": "male refers to gender = 'Male'; female refers to gender = 'Female'; movie 'Iron Man' refers to title = 'Iron Man'; ratio = divide(sum(gender = 'Female'), sum(gender = 'Male'))"}
{"sample_id": 436, "db_id": "movies_4", "final": {"question": "What is the percentage of male characters in the movie \"Bride Wars\"?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Male' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T3.gender) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Bride Wars'", "source_tables": ["movie", "gender", "movie_cast"]}, "evidence": "male refers to gender = 'Male'; \"Bride Wars\" refers to title = 'Bride Wars'; percentage = divide(sum(gender = 'Male'), count(gender)) * 100 as percentage"}
{"sample_id": 464, "db_id": "movies_4", "final": {"question": "How many films released between 1/2/1990 and 12/30/2000 starred Uma Thurman?", "sql": "SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Uma Thurman' AND T1.release_date BETWEEN '1990-01-01' AND '2000-12-31'", "source_tables": ["movie", "movie_cast", "person"]}, "evidence": "released between 1/2/1990 and 12/30/2000 refers to release_date BETWEEN '1990-01-02' AND '2000-12-30'; film has the same meaning as movie; starred Uma Thurman refers to person_name = 'Uma Thurman'"}
{"sample_id": 493, "db_id": "movies_4", "final": {"question": "What is the genre of the movie title with the lowest revenue generated?", "sql": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id ORDER BY T1.revenue LIMIT 1", "source_tables": ["movie", "genre", "movie_genres"]}, "evidence": "genre refers to genre_name; lowest revenue refers to min(revenue)"}
{"sample_id": 508, "db_id": "movies_4", "final": {"question": "What is the language ID of the movie \"Walk the Line\"?", "sql": "SELECT T2.language_id FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Walk the Line'", "source_tables": ["movie", "movie_languages"]}, "evidence": "movie \"Walk the Line\" refers to title = 'Walk the Line'"}
{"sample_id": 458, "db_id": "movies_4", "final": {"question": "Write the person ID and character name of casts between order numbers 1 and 10 in Movie No. 285.", "sql": "SELECT person_id, character_name FROM movie_cast WHERE movie_id = 285 AND cast_order BETWEEN 1 AND 10", "source_tables": ["movie_cast"]}, "evidence": "casts between order numbers 1 and 10 refers to cast_order BETWEEN 2 AND 9; Movie No. 285 refers to movie_id = 285"}
{"sample_id": 530, "db_id": "movies_4", "final": {"question": "List all the unspecified gender characters.", "sql": "SELECT T1.character_name FROM movie_cast AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.gender_id WHERE T2.gender = 'Unspecified'", "source_tables": ["gender", "movie_cast"]}, "evidence": "characters refers to character_name; gender = 'Unspecified'"}
{"sample_id": 433, "db_id": "movies_4", "final": {"question": "For all the movies which were produced by Cruel and Unusual Films, which one has the most popularity?", "sql": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Cruel and Unusual Films' ORDER BY T3.popularity DESC LIMIT 1", "source_tables": ["movie_company", "movie", "production_company"]}, "evidence": "produced by Cruel and Unusual Films refers to company_name = 'Cruel and Unusual Films'; most popularity refers to max(popularity)"}
{"sample_id": 483, "db_id": "movies_4", "final": {"question": "List 10 crews alongside their jobs who worked on the movie 'Mad Max: Fury Road.'", "sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Mad Max: Fury Road' LIMIT 10", "source_tables": ["movie", "movie_crew", "person"]}, "evidence": "crews refers to person_name; movie 'Mad Max: Fury Road' refers to title = 'Mad Max: Fury Road'"}
{"sample_id": 474, "db_id": "movies_4", "final": {"question": "What is the gender of the character 'USAF Master Sgt. Epps?'", "sql": "SELECT T2.gender FROM movie_cast AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.gender_id WHERE T1.character_name = 'USAF Master Sgt. Epps'", "source_tables": ["gender", "movie_cast"]}, "evidence": "character 'USAF Master Sgt. Epps' refers to character_name = 'USAF Master Sgt. Epps'"}
{"sample_id": 500, "db_id": "movies_4", "final": {"question": "For movies with the keyword of \"civil war\", calculate the average revenue generated by these movies.", "sql": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'civil war'", "source_tables": ["movie", "keyword", "movie_keywords"]}, "evidence": "keyword of \"civil war\" refers to keyword_name = 'civil war'; average revenue = AVG(revenue)"}
{"sample_id": 429, "db_id": "movies_4", "final": {"question": "Provide the most used keyword in the movies.", "sql": "SELECT T1.keyword_name FROM keyword AS T1 INNER JOIN movie_keywords AS T2 ON T1.keyword_id = T2.keyword_id GROUP BY T1.keyword_name ORDER BY COUNT(T1.keyword_name) DESC LIMIT 1", "source_tables": ["keyword", "movie_keywords"]}, "evidence": "most used keyword refers to keyword_name where max(count(keyword_name))"}
{"sample_id": 476, "db_id": "movies_4", "final": {"question": "Which movie did the company 'Radiant Film GmbH' work on?", "sql": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Radiant Film GmbH'", "source_tables": ["movie_company", "movie", "production_company"]}, "evidence": "Which movie refers to title; company 'Radiant Film GmbH' refers to company_name = 'Radiant Film GmbH'"}
{"sample_id": 557, "db_id": "movies_4", "final": {"question": "Name the horror movies with positive ratings greater than 7.", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Horror' AND T1.vote_average > 7", "source_tables": ["movie", "genre", "movie_genres"]}, "evidence": "Name the horror movies refers to title where genre_name = 'horror'; positive ratings greater than 7 refers to vote_average > 7"}
{"sample_id": 471, "db_id": "movies_4", "final": {"question": "Calculate the 2016 gap between the average revenue for Indian and American films.", "sql": "SELECT AVG(CASE WHEN T3.COUNTry_name = 'United States of America' THEN T1.revenue END) - AVG(CASE WHEN T3.COUNTry_name = 'India' THEN T1.revenue END) AS CALCULATE FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2016", "source_tables": ["country", "movie", "production_country"]}, "evidence": "2016 refers to release_date LIKE '2016%'; Indian and American films refers to country_name = 'India' and country_name = 'United States of America'; gap between the average revenue refers to subtract(divide(sum(revenue), count(movie_id)) when country_name = 'United States of America', divide(sum(revenue), count(movie_id)) when country_name = 'India')"}
{"sample_id": 510, "db_id": "movies_4", "final": {"question": "Tell the language of the movie \"C'era una volta il West\".", "sql": "SELECT T3.language_name FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T1.title LIKE 'C%era una volta il West'", "source_tables": ["movie", "language", "movie_languages"]}, "evidence": "language refers to language_name; movie \"C'era una volta il West\" refers to title = 'C''era una volta il West'"}
{"sample_id": 468, "db_id": "movies_4", "final": {"question": "What is the title of the highest-budget film to date? Please include the revenue and name the country.", "sql": "SELECT T1.title, T1.revenue, T3.COUNTry_name FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id ORDER BY T1.budget DESC LIMIT 1", "source_tables": ["country", "movie", "production_country"]}, "evidence": "highest-budget film refers to max(budget); name the country refers to country_name"}
{"sample_id": 423, "db_id": "movies_4", "final": {"question": "What was David Rubin's job in the movie \"Days of Thunder\"?", "sql": "SELECT T2.job FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'David Rubin' AND T1.title = 'Days of Thunder'", "source_tables": ["movie", "movie_crew", "person"]}, "evidence": "\"Days of Thunder\" refers to title = 'Days of Thunder'"}
{"sample_id": 541, "db_id": "movies_4", "final": {"question": "Provide the release date and language of the most popular movie.", "sql": "SELECT T1.release_date, T3.language_name FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id ORDER BY T1.popularity DESC LIMIT 1", "source_tables": ["movie", "language", "movie_languages"]}, "evidence": "language refers to langauge_name; most popular movie refers to max(popularity)"}
{"sample_id": 549, "db_id": "movies_4", "final": {"question": "How many movies were produced in Canada?", "sql": "SELECT COUNT(T2.movie_id) FROM COUNTry AS T1 INNER JOIN production_COUNTry AS T2 ON T1.COUNTry_id = T2.COUNTry_id WHERE T1.COUNTry_name = 'Canada'", "source_tables": ["production_country", "country"]}, "evidence": "produced in Canada refers to country_name = 'Canada'"}
{"sample_id": 573, "db_id": "codebase_comments", "final": {"question": "How much is the processed time of downloading the most popular repository?", "sql": "SELECT ProcessedTime FROM Repo WHERE Watchers = ( SELECT MAX(Watchers) FROM Repo )", "source_tables": ["repo"]}, "evidence": "more watchers mean that this repository is more popular;"}
{"sample_id": 603, "db_id": "codebase_comments", "final": {"question": "What is the language of the method ''PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn\"?", "sql": "SELECT Lang FROM Method WHERE Name = 'PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn'", "source_tables": ["method"]}, "evidence": "language refers to Lang\uff1b"}
{"sample_id": 602, "db_id": "codebase_comments", "final": {"question": "How many more followers in percentage are there for the repository used by solution ID 18 than solution ID19?", "sql": "SELECT CAST((SUM(CASE WHEN T2.Id = 18 THEN T1.Forks ELSE 0 END) - SUM(CASE WHEN T2.Id = 19 THEN T1.Forks ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 19 THEN T1.Forks ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId", "source_tables": ["solution", "repo"]}, "evidence": "followers refers to Forks; percentage = divide(SUBTRACT(Forks(Solution.ID = 18), Forks(Solution.ID = 19)), Forks(Solution.ID = 19))*100%"}
{"sample_id": 594, "db_id": "codebase_comments", "final": {"question": "Which solution contains files within a more popular repository, the solution ID18 or solution ID19?", "sql": "SELECT CASE WHEN SUM(CASE WHEN T2.Id = 18 THEN T1.Watchers ELSE 0 END) > SUM(CASE WHEN T2.Id = 19 THEN T1.Watchers ELSE 0 END) THEN 'SolutionID18' WHEN SUM(CASE WHEN T2.Id = 18 THEN T1.Watchers ELSE 0 END) < SUM(CASE WHEN T2.Id = 19 THEN T1.Watchers ELSE 0 END) THEN 'SolutionID19' END isMorePopular FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId", "source_tables": ["solution", "repo"]}, "evidence": "more watchers mean that this repository is more popular;"}
{"sample_id": 664, "db_id": "codebase_comments", "final": {"question": "What format does the method number 8's comment have?", "sql": "SELECT CASE WHEN CommentIsXml = 0 THEN 'isNotXMLFormat' WHEN CommentIsXml = 1 THEN 'isXMLFormat' END format FROM Method WHERE Id = 8", "source_tables": ["method"]}, "evidence": "format refers CommentIsXml; method number refers to Method_100k.Id; Method_100k.Id = 8;"}
{"sample_id": 632, "db_id": "codebase_comments", "final": {"question": "What is the path of solution of \"spinachLexer.mT__55\" method?", "sql": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'spinachLexer.mT__55'", "source_tables": ["solution", "method"]}, "evidence": "path of the solution refers to Path; solution refers to Solution.Id; method refers to Name; Name = 'spinachLexer.mT__55';"}
{"sample_id": 592, "db_id": "codebase_comments", "final": {"question": "What is the github address of the repository that contains files used by solution ID12?", "sql": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 12", "source_tables": ["solution", "repo"]}, "evidence": "github address refers to Url;"}
{"sample_id": 615, "db_id": "codebase_comments", "final": {"question": "How many solutions does the repository which has 1445 Forks contain?", "sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks = 1445", "source_tables": ["solution", "repo"]}, "evidence": "solutions refers to Solution.Id; repository refers to Repository.Id;"}
{"sample_id": 657, "db_id": "codebase_comments", "final": {"question": "How many solutions whose repository's stars are a third more than forks?", "sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks < T1.Stars * 1 / 3", "source_tables": ["solution", "repo"]}, "evidence": "solutions refers to Solution.Id; repository stars are a third more than forks = (MULTIPLY(Stars, 1/3))>Forks;"}
{"sample_id": 669, "db_id": "codebase_comments", "final": {"question": "What is solution 1's processing time and how many methods have been using this solution?", "sql": "SELECT T1.ProcessedTime, COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.SolutionId = 1", "source_tables": ["solution", "method"]}, "evidence": "solution refers to Solution.Id and SolutionId; Solution.Id = 1; SolutionId = 1; processing time refers to ProcessedTime; methods refers to Name;"}
{"sample_id": 605, "db_id": "codebase_comments", "final": {"question": "List the summary of the method \"Castle.MonoRail.Framework.Test.StubViewComponentContext.RenderSection\".", "sql": "SELECT DISTINCT Summary FROM Method WHERE Name = 'Castle.MonoRail.Framework.Test.StubViewComponentContext.RenderSection'", "source_tables": ["method"]}, "evidence": ""}
{"sample_id": 578, "db_id": "codebase_comments", "final": {"question": "In the \"https://github.com/wallerdev/htmlsharp.git\", give all the linearized sequenced of API calls.", "sql": "SELECT T3.ApiCalls FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T1.Url = 'https://github.com/wallerdev/htmlsharp.git'", "source_tables": ["solution", "method", "repo"]}, "evidence": "linearized sequenced of API calls refers to ApiCalls; 'https://github.com/wallerdev/htmlsharp.git' is url of repository"}
{"sample_id": 611, "db_id": "codebase_comments", "final": {"question": "What is the repository number for the solution of method \"SCore.Poisson.ngtIndex\"?", "sql": "SELECT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'SCore.Poisson.ngtIndex'", "source_tables": ["solution", "method"]}, "evidence": "repository number refers to RepoId; method refers to Name; Name = \u2018SCore.Poisson.ngtIndex\u2019"}
{"sample_id": 572, "db_id": "codebase_comments", "final": {"question": "What is the name of the solution path with the highest processed time?", "sql": "SELECT Path FROM Solution WHERE ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Solution )", "source_tables": ["solution"]}, "evidence": "highest processed time refers to max(ProcessedTime);"}
{"sample_id": 582, "db_id": "codebase_comments", "final": {"question": "What is the linearized sequenced of API calls of the method whose solution path is \"mauriciodeamorim_tdd.encontro2\\Tdd.Encontro2.sln\"?", "sql": "SELECT T2.ApiCalls FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'mauriciodeamorim_tdd.encontro2Tdd.Encontro2.sln'", "source_tables": ["solution", "method"]}, "evidence": "linearized sequenced of API calls refers to ApiCalls;"}
{"sample_id": 668, "db_id": "codebase_comments", "final": {"question": "What is the language of method number 28 that can be found in the repository number 3?", "sql": "SELECT T2.Lang FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 28 AND T1.RepoId = 3", "source_tables": ["solution", "method"]}, "evidence": "language of method refers to Lang; method number refers to Method_100k.Id; Method_100k.Id = 28; repository number refers to RepoId; RepoID = 3;"}
{"sample_id": 640, "db_id": "codebase_comments", "final": {"question": "List all the solutions of repositories with the Forks higher than half of the watchers.", "sql": "SELECT DISTINCT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks > T1.Watchers / 2", "source_tables": ["solution", "repo"]}, "evidence": "solutions refers to Solution.Id; forks higher than half of the watchers refers tto Forks>(Watchers/2);;"}
{"sample_id": 574, "db_id": "codebase_comments", "final": {"question": "What is the github address of the \"nofear_Mara\\Mara.sln\" solution path?", "sql": "SELECT Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE Path = 'nofear_MaraMara.sln'", "source_tables": ["solution", "repo"]}, "evidence": "github address of repository refers to Url;"}
{"sample_id": 642, "db_id": "codebase_comments", "final": {"question": "Please provide the id of the respository that the most people like.", "sql": "SELECT Id FROM Repo WHERE Stars = ( SELECT MAX(Stars) FROM Repo )", "source_tables": ["repo"]}, "evidence": "repository that the most people like refers to MAX(Stars);"}
{"sample_id": 583, "db_id": "codebase_comments", "final": {"question": "How many solution paths that needs to be compiled if user wants to implement it in \"https://github.com/jeffdik/tachy.git\"?", "sql": "SELECT COUNT(T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/jeffdik/tachy.git' AND T2.WasCompiled = 0", "source_tables": ["solution", "repo"]}, "evidence": "needs to be compiled if user wants to implement refers to WasCompiled = 0; https://github.com/jeffdik/tachy.git is url of repository"}
{"sample_id": 641, "db_id": "codebase_comments", "final": {"question": "What is the percentage of Forks to Stars of repository for solution \"104086\"?", "sql": "SELECT CAST(T1.Forks AS REAL) * 100 / T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 104086", "source_tables": ["solution", "repo"]}, "evidence": "solution refers to Solution.Id; Solution.Id = 104086; percentage = MULTIPLY(DIVIDE(Forkk, Stars), 100);"}
{"sample_id": 659, "db_id": "codebase_comments", "final": {"question": "Among the repository \"3\", how many methods whose comments is XML format?", "sql": "SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.RepoId = 3 AND T2.CommentIsXml = 1", "source_tables": ["solution", "method"]}, "evidence": "repository refers to RepoId; RepoId = 3; method refers to Name; method whose comment is XML format refers to CommentIsXml = 1;"}
{"sample_id": 653, "db_id": "codebase_comments", "final": {"question": "What the percentage of the english methods among the methods whose comments is XML format?", "sql": "SELECT CAST(SUM(CASE WHEN Lang = 'en' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Name) FROM Method WHERE CommentIsXml = 1", "source_tables": ["method"]}, "evidence": "english methods refers to lang = 'en'; comment is XML format refers to CommentIsXml = 1;"}
{"sample_id": 600, "db_id": "codebase_comments", "final": {"question": "Please list the IDs of the solutions that contain files within the top 3 followed repositories.", "sql": "SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId ORDER BY T1.Forks DESC LIMIT 3", "source_tables": ["solution", "repo"]}, "evidence": "more forks refers to more people follow this repository;"}
{"sample_id": 708, "db_id": "trains", "final": {"question": "What is the average number of cars on trains that run in the east direction?", "sql": "SELECT CAST(COUNT(T1.id) AS REAL) / COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'", "source_tables": ["trains", "cars"]}, "evidence": "calculation = DIVIDE(count(id), count(train_id))"}
{"sample_id": 707, "db_id": "trains", "final": {"question": "Please list the directions in which the trains with 4 short cars run.", "sql": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.len = 'short' AND T1.position = 4", "source_tables": ["trains", "cars"]}, "evidence": "short refers to len = 'short'; 4 cars run refers to position = 4"}
{"sample_id": 695, "db_id": "trains", "final": {"question": "Please list the IDs of all the cars on train no.1 that have 2 wheels.", "sql": "SELECT id FROM cars WHERE train_id = 1 AND wheels = 2", "source_tables": ["cars"]}, "evidence": "train no.1 refers to train_id = 1; 2 wheels refers to wheels = 2"}
{"sample_id": 692, "db_id": "trains", "final": {"question": "What is the shape of the tail car on train no.1?", "sql": "SELECT shape FROM cars WHERE train_id = 1 AND position = 4", "source_tables": ["cars"]}, "evidence": "train no.1 refers to train_id = 1; tail car refers to position = 4"}
{"sample_id": 703, "db_id": "trains", "final": {"question": "Please list the shapes of all the head cars on the trains that run in the east direction.", "sql": "SELECT T1.shape FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.position = 1 GROUP BY T1.shape", "source_tables": ["trains", "cars"]}, "evidence": "head cars refers to position = 1;"}
{"sample_id": 723, "db_id": "trains", "final": {"question": "How many cars running east have double-sided tail cars?", "sql": "SELECT COUNT(T1.id) FROM trains AS T1 INNER JOIN cars AS T2 ON T1.id = T2.train_id INNER JOIN ( SELECT train_id, MAX(position) AS trailPosi FROM cars GROUP BY train_id ) AS T3 ON T1.id = T3.train_id WHERE T1.direction = 'east' AND T2.position = T3.trailPosi AND T2.sides = 'double'", "source_tables": ["trains", "cars"]}, "evidence": "east is an direction; double-sided refers to sides = 'double'; tail refers to carsposition = trailPosi"}
{"sample_id": 718, "db_id": "trains", "final": {"question": "How many trains running west have double sided cars in 3rd position?", "sql": "SELECT COUNT(T.train_id) FROM (SELECT T1.train_id FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 3 AND T2.direction = 'west' AND T1.sides = 'double' GROUP BY T1.train_id)as T", "source_tables": ["trains", "cars"]}, "evidence": "west is a direction; double sided cars refers to sides = 'double'; 3rd position refers to position = 3"}
{"sample_id": 705, "db_id": "trains", "final": {"question": "Among the cars on a train that runs in the east direction, how many of them have a flat roof and a circle load shape?", "sql": "SELECT SUM(CASE WHEN T1.load_shape = 'circle' THEN 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.roof = 'flat'", "source_tables": ["trains", "cars"]}, "evidence": "flat roof refers to roof = 'flat'; load_shape = 'circle'"}
{"sample_id": 738, "db_id": "movie", "final": {"question": "What is the name of the character played by Tom Cruise in the movie Born on the Fourth of July?", "sql": "SELECT T2.\"Character Name\" FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise' AND T1.Title = 'Born on the Fourth of July'", "source_tables": ["movie", "characters", "actor"]}, "evidence": "played by Tom Cruise refers to name = 'Tom Cruise'; movie Born on the Fourth of July refers to title = 'Born on the Fourth of July'"}
{"sample_id": 743, "db_id": "movie", "final": {"question": "How much longer in percentage is the screen time of the most important character in Batman than the least important one?", "sql": "SELECT (MAX(CAST(SUBSTR(T2.screentime, 3, 2) AS REAL)) - MIN(CAST(SUBSTR(T2.screentime, 3, 2) AS REAL))) * 100 / MIN(CAST(SUBSTR(T2.screentime, 3, 2) AS REAL)) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'Batman'", "source_tables": ["movie", "characters"]}, "evidence": "most important character refers to max(screentime); least important character refers to min(screentime); movie Batman refers to title = 'Batman'; percentage = divide(subtract(max(screentime) , min(screentime)) , min(screentime)) * 100%"}
{"sample_id": 772, "db_id": "movie", "final": {"question": "What is the gross of a comedy movie with a rating lower than 7 and starred by an actor with a net worth greater than $375,000,000.00?", "sql": "SELECT SUM(T1.Gross) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE CAST(REPLACE(REPLACE(T3.NetWorth, ',', ''), '$', '') AS REAL) > 375000000 AND T1.Rating < 7 AND T1.Genre = 'Comedy'", "source_tables": ["movie", "characters", "actor"]}, "evidence": "comedy movie refers to Genre = 'Comedy'; rating lower than 7 refers to Rating < 7; net worth greater than $375,000,000.00 refers to NetWorth > '$375,000,000.00'"}
{"sample_id": 769, "db_id": "movie", "final": {"question": "Among the actors starred in Die Hard 2, list their net worth and birth date of actors with a height between 60 to 65.", "sql": "SELECT T3.NetWorth, T3.\"Date of Birth\" FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Die Hard 2' AND T3.\"Height (Inches)\" BETWEEN 60 AND 65", "source_tables": ["movie", "characters", "actor"]}, "evidence": "Die Hard 2 refers to Title = 'Die Hard 2'; height between 60 to 65 refers to Height (Inches) BETWEEN 60 AND 65"}
{"sample_id": 748, "db_id": "movie", "final": {"question": "How many movies has the highest networth actor acted in?", "sql": "SELECT COUNT(*) FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE CAST(REPLACE(REPLACE(T2.NetWorth, ',', ''), '$', '') AS REAL) = ( SELECT MAX(CAST(REPLACE(REPLACE(NetWorth, ',', ''), '$', '') AS REAL)) FROM actor)", "source_tables": ["characters", "actor"]}, "evidence": "highest networth refers to max(networth)"}
{"sample_id": 763, "db_id": "movie", "final": {"question": "In romantic movies, how many of them starred by John Travolta?", "sql": "SELECT COUNT(*) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Genre = 'Romance' AND T3.Name = 'John Travolta'", "source_tables": ["movie", "characters", "actor"]}, "evidence": "romantic movies refers to Genre = 'Romance'; starred by John Travolta refers to Name = 'John Travolta'"}
{"sample_id": 739, "db_id": "movie", "final": {"question": "Please list the names of all the characters played by Tom Cruise.", "sql": "SELECT T1.\"Character Name\" FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T2.Name = 'Tom Cruise'", "source_tables": ["characters", "actor"]}, "evidence": "played by Tom Cruise refers to name = 'Tom Cruise'"}
{"sample_id": 752, "db_id": "movie", "final": {"question": "Give the biography of the actor who played \"Michael Moscovitz\".", "sql": "SELECT T2.Biography FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.\"Character Name\" = 'Michael Moscovitz'", "source_tables": ["characters", "actor"]}, "evidence": "\"Michael Moscovitz\" refers to Character Name = 'Michael Moscovitz'"}
{"sample_id": 732, "db_id": "movie", "final": {"question": "Which actor played the role of Joker in the movie Batman?", "sql": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Batman' AND T2.\"Character Name\" = 'Joker'", "source_tables": ["movie", "characters", "actor"]}, "evidence": "role of Joker refers to character_name = 'Joker'; movie Batman refers to title = 'Batman'"}
{"sample_id": 824, "db_id": "social_media", "final": {"question": "What gender of users retweet more than 30 times?", "sql": "SELECT DISTINCT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.RetweetCount > 30", "source_tables": ["user", "twitter"]}, "evidence": "retweet more than 30 times refers to RetweetCount > 30"}
{"sample_id": 828, "db_id": "social_media", "final": {"question": "List down all the tweet text posted from Australia.", "sql": "SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.Country = 'Australia'", "source_tables": ["location", "twitter"]}, "evidence": "\"Australia\" is the Country"}
{"sample_id": 785, "db_id": "social_media", "final": {"question": "Please list the texts of all the tweets posted from Buenos Aires with a positive sentiment.", "sql": "SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.Sentiment > 0 AND T2.City = 'Buenos Aires'", "source_tables": ["location", "twitter"]}, "evidence": "\"Buenos Aires\" is the City; positive sentiment refers to Sentiment > 0"}
{"sample_id": 779, "db_id": "social_media", "final": {"question": "Among all the tweets that have a positive sentiment, how many of them are posted on Thursday?", "sql": "SELECT COUNT(TweetID) AS tweet_number FROM twitter WHERE Sentiment > 0 AND Weekday = 'Thursday'", "source_tables": ["twitter"]}, "evidence": "positive sentiment refers to Sentiment > 0; posted on Thursday refers to Weekday = 'Thursday'"}
{"sample_id": 804, "db_id": "social_media", "final": {"question": "How many female Twitter users are there from Wisconsin?", "sql": "SELECT COUNT(T1.Likes) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T3 ON T3.UserID = T1.UserID WHERE T2.State = 'Wisconsin' AND T3.Gender = 'Female'", "source_tables": ["user", "location", "twitter"]}, "evidence": "female users refers to Gender = 'Female'; 'Wisconsin' is the State"}
{"sample_id": 780, "db_id": "social_media", "final": {"question": "What is the text of the tweet that got the most `likes`?", "sql": "SELECT text FROM twitter WHERE Likes = ( SELECT MAX( Likes) FROM twitter )", "source_tables": ["twitter"]}, "evidence": "got the most like refers to Max(Likes)"}
{"sample_id": 852, "db_id": "social_media", "final": {"question": "What is the average number of likes for a tweet posted by a male user on Mondays?", "sql": "SELECT SUM(T1.Likes) / COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Weekday = 'Monday'", "source_tables": ["user", "twitter"]}, "evidence": "male user refers to Gender = 'Male'; 'Monday' is the Weekday; average number of likes = Divide (Sum(Likes), Count(TweetID))"}
{"sample_id": 848, "db_id": "social_media", "final": {"question": "Among the tweets posted from Santa Fe state in Argentina, how many of them were posted on 31st?", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.Day = 31 AND T2.State = 'Santa' AND T2.Country = 'Argentina'", "source_tables": ["location", "twitter"]}, "evidence": "\"Sante Fe\" is the State; \"Argentina\" is the Country; posted on 31st refers to Day = 31"}
{"sample_id": 817, "db_id": "social_media", "final": {"question": "Is 3751 the location ID for tweet with ID tw-682714048199311366?", "sql": "SELECT LocationID FROM twitter WHERE TweetID = 'tw-682714048199311366'", "source_tables": ["twitter"]}, "evidence": "\"tw-682714048199311366\" is the TweetID"}
{"sample_id": 830, "db_id": "social_media", "final": {"question": "Tweets that were posted from Brazil are in what languague?", "sql": "SELECT DISTINCT T1.Lang FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.Country = 'Brazil'", "source_tables": ["location", "twitter"]}, "evidence": "\"Brazil\" is the Country; language refers to Lang"}
{"sample_id": 842, "db_id": "social_media", "final": {"question": "Please list the texts of all the tweets in French posted by male users.", "sql": "SELECT T1.text FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Lang = 'fr'", "source_tables": ["user", "twitter"]}, "evidence": "\"French\" is the language and refers to Lang = 'fr'; male user refers to Gender = 'Male'"}
{"sample_id": 790, "db_id": "social_media", "final": {"question": "How many tweets have the male users posted in total?", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male'", "source_tables": ["user", "twitter"]}, "evidence": "male users refers to Gender = 'Male'; total tweets refers to Count(TweetID)"}
{"sample_id": 799, "db_id": "social_media", "final": {"question": "Give the location id of West Sussex State.", "sql": "SELECT DISTINCT LocationID FROM location WHERE State = 'West Sussex'", "source_tables": ["location"]}, "evidence": ""}
{"sample_id": 808, "db_id": "social_media", "final": {"question": "Give the gender of the user who made the highest klout tweet on Wednesdays.", "sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Weekday = 'Wednesday' ORDER BY T1.Klout DESC LIMIT 1", "source_tables": ["user", "twitter"]}, "evidence": "highest klout refers to Max(Klout); 'Wednesday' is the Weekday"}
{"sample_id": 844, "db_id": "social_media", "final": {"question": "Among all the tweets with a positive sentiment, how many of them were posted by male users in Australia?", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T3 ON T3.UserID = T1.UserID WHERE T2.Country = 'Australia' AND T3.Gender = 'Male' AND T1.Sentiment > 0", "source_tables": ["user", "location", "twitter"]}, "evidence": "tweet with positive sentiment refers to Sentiment > 0; male user refers to Gender = 'Male'; 'Australia' is the Country"}
{"sample_id": 895, "db_id": "cs_semester", "final": {"question": "What are the GPAs of the unpaid Research Assistants?", "sql": "SELECT T2.gpa FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'free'", "source_tables": ["student", "ra"]}, "evidence": "Unpaid Research Assistants undertake their work without payment in which salary = 'free';"}
{"sample_id": 893, "db_id": "cs_semester", "final": {"question": "How many research postgraduate students are there?", "sql": "SELECT COUNT(student_id) FROM student WHERE type = 'RPG'", "source_tables": ["student"]}, "evidence": "research postgraduate student refers to type = 'RPG';"}
{"sample_id": 963, "db_id": "cs_semester", "final": {"question": "Among courses with difficulty of 3, how many students have intellegence level of 2?", "sql": "SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.diff = 3 AND T1.intelligence = 2", "source_tables": ["course", "student", "registration"]}, "evidence": "difficulty of 3 refers to diff = 3; intelligence = 2"}
{"sample_id": 887, "db_id": "cs_semester", "final": {"question": "What is the percentage of students who get a \"B\" in the course \"Computer Network\"?", "sql": "SELECT CAST(SUM(CASE WHEN T1.grade = 'B' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Computer Network'", "source_tables": ["course", "registration"]}, "evidence": "DIVIDE(COUNT(student_id(grade = 'B' and name = 'Computer Network')), COUNT(student_id where name = ' Computer Network')) as percentage;"}
{"sample_id": 942, "db_id": "cs_semester", "final": {"question": "Find the most important and most difficult courses.", "sql": "SELECT name FROM course WHERE credit = ( SELECT MAX(credit) FROM course ) AND diff = ( SELECT MAX(diff) FROM course )", "source_tables": ["course"]}, "evidence": "most important refers to MAX(credit); most difficult refers to MAX(diff);"}
{"sample_id": 920, "db_id": "cs_semester", "final": {"question": "Provide the registered courses' names by undergraduate students with GPA of 3.7 and above.", "sql": "SELECT DISTINCT T1.f_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.type = 'UG' AND T1.gpa > 3.7", "source_tables": ["course", "student", "registration"]}, "evidence": "Undergraduate students refers to type = 'UG'; GPA of 3.7 and above refers to gpa > 3.7;"}
{"sample_id": 863, "db_id": "cs_semester", "final": {"question": "Among the students who got a B in the course Machine Learning Theory, how many of them have a gpa of over 3?", "sql": "SELECT COUNT(student_id) FROM registration WHERE grade = 'B' AND student_id IN ( SELECT student_id FROM student WHERE gpa > 3 AND course_id IN ( SELECT course_id FROM course WHERE name = 'Machine Learning Theory' ) )", "source_tables": ["course", "student", "registration"]}, "evidence": "B refers to grade; GPA is an abbreviated name of Grade Point Average where over 3 refers to gpa > 3;"}
{"sample_id": 921, "db_id": "cs_semester", "final": {"question": "Describe the names and capability of the students who were advised by professors from the University of Washington.", "sql": "SELECT T3.f_name, T3.l_name, T2.capability FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T1.graduate_from = 'University of Washington'", "source_tables": ["ra", "student", "prof"]}, "evidence": "names of the students = f_name, l_name;"}
{"sample_id": 960, "db_id": "cs_semester", "final": {"question": "Among professors with the highest teachability, how many of their students have high salary?", "sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T1.salary = 'high' ORDER BY T2.teachingability DESC LIMIT 1", "source_tables": ["ra", "prof"]}, "evidence": "highest teachability refers to MAX(teachability); high salary refers to salary = 'high';"}
{"sample_id": 866, "db_id": "cs_semester", "final": {"question": "Which student is more satisfied with the course Machine Learning Theory, Willie Rechert or Laughton Antonio?", "sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE (T1.f_name = 'Laughton' OR T1.f_name = 'Willie') AND (T1.l_name = 'Antonio' OR T1.l_name = 'Rechert') AND T3.name = 'Machine Learning Theory' ORDER BY T2.sat DESC LIMIT 1", "source_tables": ["course", "student", "registration"]}, "evidence": "sat refers to student's satisfaction degree with the course; more satisfied refers to MAX(sat);"}
{"sample_id": 934, "db_id": "cs_semester", "final": {"question": "What is the difficulty of the course in which a student with level of intellengence of 5 got an A grade?", "sql": "SELECT T3.diff FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.grade = 'A' AND T1.intelligence = 5", "source_tables": ["course", "student", "registration"]}, "evidence": "difficulty of the course refers to diff;"}
{"sample_id": 878, "db_id": "cs_semester", "final": {"question": "How many research assistants does the female professor with the lowest teaching ability have?", "sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability = '1' AND T2.gender = 'Female'", "source_tables": ["ra", "prof"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; professor with the lowest teaching ability refers to prof_id where teachability = '1';"}
{"sample_id": 897, "db_id": "cs_semester", "final": {"question": "How many courses does the student with the highest GPA this semester take?", "sql": "SELECT COUNT(course_id) FROM registration WHERE student_id IN ( SELECT student_id FROM student WHERE gpa = ( SELECT MAX(gpa) FROM student ) )", "source_tables": ["student", "registration"]}, "evidence": "student with the highest GPA refers to student_id where MAX(gpa);"}
{"sample_id": 870, "db_id": "cs_semester", "final": {"question": "What is the average gpa of Ogdon Zywicki's research assistants?", "sql": "SELECT SUM(T3.gpa) / COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T1.student_id = T3.student_id WHERE T2.first_name = 'Ogdon' AND T2.last_name = 'Zywicki'", "source_tables": ["student", "ra", "prof"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; prof_id refers to professor\u2019s ID; GPA is an abbreviated name of Grade Point Average where average = AVG(gpa);"}
{"sample_id": 910, "db_id": "cs_semester", "final": {"question": "What is the male and female ratio among the professors?", "sql": "SELECT CAST(SUM(CASE WHEN gender = 'Male' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender = 'Female' THEN 1 ELSE 0 END) FROM prof", "source_tables": ["prof"]}, "evidence": "DIVIDE(COUNT(prof_id where gender = 'Male'), COUNT(prof_id where gender = 'Female'));"}
{"sample_id": 892, "db_id": "cs_semester", "final": {"question": "Among the most popular professors, how many are females?", "sql": "SELECT COUNT(prof_id) FROM prof WHERE gender = 'Female' AND popularity = ( SELECT MAX(popularity) FROM prof )", "source_tables": ["prof"]}, "evidence": "the most popular professors refers to prof_id where MAX(popularity); female refers to gender;"}
{"sample_id": 927, "db_id": "cs_semester", "final": {"question": "What is the credit of the course named \"Computer Vision\"?", "sql": "SELECT credit FROM course WHERE name = 'Computer Vision'", "source_tables": ["course"]}, "evidence": ""}
{"sample_id": 954, "db_id": "cs_semester", "final": {"question": "Please give the name of the course in which most numbers of the students got an A. Also, list the full name of the students who got an A in this course.", "sql": "SELECT T3.name, T2.f_name, T2.l_name FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T1.course_id = T3.course_id WHERE T1.grade = 'A' GROUP BY T3.name ORDER BY COUNT(T1.student_id) DESC LIMIT 1", "source_tables": ["course", "student", "registration"]}, "evidence": "most number of students got an A refers MAX(COUNT(student_id WHERE grade = 'A')); full name = f_name, l_name; got an A refers to grade = 'A';"}
{"sample_id": 917, "db_id": "cs_semester", "final": {"question": "Describe the full names and graduated universities of the professors who advised Olia Rabier.", "sql": "SELECT T1.first_name, T1.last_name, T1.graduate_from FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Olia' AND T3.l_name = 'Rabier'", "source_tables": ["ra", "student", "prof"]}, "evidence": "full names of the professors = first_name, last_name; graduated universities of the professors refers to graduate_from;"}
{"sample_id": 868, "db_id": "cs_semester", "final": {"question": "Among the students who took the course Machine Learning Theory, how many of them are undergraduates?", "sql": "SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Machine Learning Theory' AND T1.type = 'UG'", "source_tables": ["course", "student", "registration"]}, "evidence": "UG is an abbreviated name of undergraduate student in which type = 'UG';"}
{"sample_id": 891, "db_id": "cs_semester", "final": {"question": "How many students have the highest intelligence among those taking a bachelor's degree?", "sql": "SELECT COUNT(student_id) FROM student WHERE type = 'UG' AND intelligence = ( SELECT MAX(intelligence) FROM student )", "source_tables": ["student"]}, "evidence": "bachelor's degree is an undergraduate degree in which type = 'UG'; the highest intelligence refers to MAX(intelligence);"}
{"sample_id": 871, "db_id": "cs_semester", "final": {"question": "What is the average satisfying degree of the course Machine Learning Theory?", "sql": "SELECT CAST(SUM(T1.sat) AS REAL) / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Machine Learning Theory'", "source_tables": ["course", "registration"]}, "evidence": "sat refers to student's satisfaction degree with the course;"}
{"sample_id": 997, "db_id": "computer_student", "final": {"question": "Please list the IDs of the professors that teaches more than 3 courses.", "sql": "SELECT T1.p_id FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.professor = 1 GROUP BY T1.p_id HAVING COUNT(DISTINCT T1.course_id) > 3", "source_tables": ["taughtby", "person"]}, "evidence": "IDs of the professors refers to taughtBy.p_id and professor = 1; teaches more than 3 courses\u00a0 refers to count(course_id) > 3"}
{"sample_id": 996, "db_id": "computer_student", "final": {"question": "What is the level of the course with the most number of teachers?", "sql": "SELECT T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY COUNT(T2.p_id) DESC LIMIT 1", "source_tables": ["course", "taughtby"]}, "evidence": "level of the course refers to courseLevel; course with most number of teachers refers to course_id = max(count(taughtBy.p_id))"}
{"sample_id": 1001, "db_id": "computer_student", "final": {"question": "What is the ratio of professors and students?", "sql": "SELECT CAST(SUM(CASE  WHEN professor = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE  WHEN student = 1 THEN 1 ELSE 0 END) AS per FROM person", "source_tables": ["person"]}, "evidence": "professors refers to professor = 1; students refers to student = 1; ratio = divide(count(person.p_id) when professor = 1, count(person.p_id) when student = 1)"}
{"sample_id": 1038, "db_id": "computer_student", "final": {"question": "Which member of the faculty are teaching the most courses and what is his/her general course level?", "sql": "SELECT T1.p_id, T3.courseLevel FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id GROUP BY T1.p_id ORDER BY COUNT(T2.course_id) DESC LIMIT 1", "source_tables": ["course", "taughtby", "person"]}, "evidence": "member of the faculty refers to hasPosition <> 0, most courses refers to max(count(course.course_id))"}
{"sample_id": 990, "db_id": "computer_student", "final": {"question": "Is the teacher who teaches course no.9 a faculty member?", "sql": "SELECT T2.hasPosition FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T1.course_id = 9", "source_tables": ["taughtby", "person"]}, "evidence": "teacher refers to taughtBy.p_id; course no.9 refers to taughtBy.course_id = 9; faculty member refers to hasPosition ! = 0"}
{"sample_id": 981, "db_id": "computer_student", "final": {"question": "Who are the professors who gave advice to students in the 12th years of program?", "sql": "SELECT T1.p_id_dummy FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_12'", "source_tables": ["advisedby", "person"]}, "evidence": "professors refers to p_id_dummy; 12th years of program refers to yearsInProgram = 'Year_12'"}
{"sample_id": 1036, "db_id": "computer_student", "final": {"question": "Which professor taught the most courses and what is the position of this person in the university?", "sql": "SELECT T1.p_id, T1.hasPosition FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id GROUP BY T1.p_id ORDER BY COUNT(T2.course_id) DESC LIMIT 1", "source_tables": ["taughtby", "person"]}, "evidence": "professor refers to taughtBy.p_id; most courses refers to max(taughtBy.p_id); position refers to hasPosition"}
{"sample_id": 1019, "db_id": "computer_student", "final": {"question": "Among the students being advised by Advisor 5, how many students are in the 5th year?", "sql": "SELECT COUNT(*) FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T1.p_id_dummy = 5 AND T2.student = 1 AND T2.yearsInProgram = 'Year_5'", "source_tables": ["advisedby", "person"]}, "evidence": "Advisor 5 refers to p_id_dummy = 5; are in the 5th year refers to yearsInProgram = 'Year_5'"}
{"sample_id": 983, "db_id": "computer_student", "final": {"question": "How many basic and medium undergraduate courses are there?", "sql": "SELECT COUNT(*) FROM course WHERE courseLevel = 'Level_300'", "source_tables": ["course"]}, "evidence": "basic and medium undergraduate courses refers to courseLevel = 'Level_300' and courses refers to course.course_id"}
{"sample_id": 975, "db_id": "computer_student", "final": {"question": "Which level of courses is taught by professor ID 297?", "sql": "SELECT T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.p_id = 297", "source_tables": ["course", "taughtby"]}, "evidence": "professor ID 297 refers to taughtBy.p_id = 297"}
{"sample_id": 1037, "db_id": "computer_student", "final": {"question": "Which courses were taught by a professor who is not a faculty member?", "sql": "SELECT DISTINCT T2.course_id FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id WHERE T1.professor = 1 AND T1.hasPosition = 0", "source_tables": ["taughtby", "person"]}, "evidence": "courses refers to taughtBy.course_id; professor refers to professor = 1; is not a faculty member refers to hasPosition = 0"}
{"sample_id": 967, "db_id": "computer_student", "final": {"question": "What is the average number of students for each advisor?", "sql": "SELECT CAST(COUNT(p_id) AS REAL) / COUNT(DISTINCT p_id_dummy) AS avgnum FROM advisedBy GROUP BY p_id_dummy", "source_tables": ["advisedby"]}, "evidence": "students refers to advisedBy.p_id; advisor refers to p_id_dummy; average number = avg(count(advisedBy.p_id))"}
{"sample_id": 986, "db_id": "computer_student", "final": {"question": "How many teachers are faculty employees?", "sql": "SELECT COUNT(*) FROM person WHERE hasPosition = 'Faculty_eme'", "source_tables": ["person"]}, "evidence": "teachers refers to professor = 1; faculty employees refers to hasPosition = 'Faculty_eme'"}
{"sample_id": 1026, "db_id": "computer_student", "final": {"question": "What is the position in the faculty of the professor who teaches the highest number of courses?", "sql": "SELECT T1.hasPosition FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id WHERE T1.professor = 1 GROUP BY T1.p_id ORDER BY COUNT(T2.course_id) DESC LIMIT 1", "source_tables": ["taughtby", "person"]}, "evidence": "position in the faculty refers to hasPosition; professor refers to professor = 1; teaches the highest number of courses refers to max(count(taughtBy.course_id))"}
{"sample_id": 1047, "db_id": "talkingdata", "final": {"question": "How many users are there in the Home Decoration category?", "sql": "SELECT COUNT(T1.app_id) FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T2.label_id = T1.label_id WHERE T2.category = 'Home Decoration'", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1160, "db_id": "talkingdata", "final": {"question": "What is the ratio of female users to male users who uses a vivo device?", "sql": "SELECT SUM(IIF(T1.gender = 'M', 1, 0)) / SUM(IIF(T1.gender = 'F', 1, 0)) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "ratio = DIVIDE(SUM(gender = 'M' WHERE phone_brand = 'vivo'), SUM(gender = 'F' WHERE phone_brand = 'vivo')); female refers to gender = 'F'; male refers to gender = 'M'; vivo device refers to phone_brand = 'vivo';"}
{"sample_id": 1069, "db_id": "talkingdata", "final": {"question": "List the included categories in the event ID of 155.", "sql": "SELECT DISTINCT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T2.label_id = T1.label_id INNER JOIN app_events AS T3 ON T3.app_id = T2.app_id WHERE T3.event_id = 155", "source_tables": ["label_categories", "app_events", "app_labels"]}, "evidence": ""}
{"sample_id": 1130, "db_id": "talkingdata", "final": {"question": "How many male users of the \"Galaxy S5\" device model?", "sql": "SELECT COUNT(T1.device_id) FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T1.device_model = 'Galaxy S5' AND T2.gender = 'M'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "male refers to gender = 'M';"}
{"sample_id": 1151, "db_id": "talkingdata", "final": {"question": "What is the device model used by the most female users over 30?", "sql": "SELECT T.device_model FROM ( SELECT T2.device_model, COUNT(T2.device_model) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age > 30 AND T1.gender = 'F' GROUP BY T2.device_model ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "female users refers to gender = 'F'; most female users refers to MAX(COUNT(gender = 'F')); over 30 refers to age > 30;"}
{"sample_id": 1144, "db_id": "talkingdata", "final": {"question": "Among the devices with an event occurring in 2016, how many of them are owned by a user in the M23-26 user group?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.device_id WHERE STRFTIME('%Y', T2.timestamp) = '2016' AND T1.\"group\" = 'M23-26'", "source_tables": ["gender_age", "events"]}, "evidence": "in 2016 refers to year(timestamp) = 2016; M23-26 user group refers to `group` = 'M23-26';"}
{"sample_id": 1165, "db_id": "talkingdata", "final": {"question": "Calculate the percentage of male users among all device users.", "sql": "SELECT SUM(IIF(gender = 'M', 1, 0)) / COUNT(device_id) AS per FROM gender_age", "source_tables": ["gender_age"]}, "evidence": "percentage = DVIDE(SUM(gender = 'M'), COUNT(device_id)); male refers to gender = 'M';"}
{"sample_id": 1110, "db_id": "talkingdata", "final": {"question": "How many users belong to \"game-Art Style\" category?", "sql": "SELECT COUNT(T1.app_id) FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id WHERE T2.category = 'game-Art Style'", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1075, "db_id": "talkingdata", "final": {"question": "How many users of the app were not active when event no.2 happened?", "sql": "SELECT COUNT(event_id) FROM app_events WHERE event_id = 2 AND is_active = 0", "source_tables": ["app_events"]}, "evidence": "not active refers to is_active = 0; event no. refers to event_id; event_id = 2;"}
{"sample_id": 1158, "db_id": "talkingdata", "final": {"question": "Please list the device models of all the devices used by a user in the M23-26 user group.", "sql": "SELECT T2.device_model FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.\"group\" = 'M23-26'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "M23-26 user group refers to `group` = 'M23-26';"}
{"sample_id": 1171, "db_id": "talkingdata", "final": {"question": "List down the app IDs under the category of game-Rowing .", "sql": "SELECT T2.app_id FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'game-Rowing'", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1201, "db_id": "talkingdata", "final": {"question": "Indicate the location of all the events that occurred on April 30, 2016.", "sql": "SELECT longitude, latitude FROM events WHERE date(timestamp) = '2016-04-30'", "source_tables": ["events"]}, "evidence": "location = longitude, latitude; on April 30, 2016 refers timestamp BETWEEN '2016-04-30 00:00:00' AND '2016-04-30 23:59:59';"}
{"sample_id": 1138, "db_id": "talkingdata", "final": {"question": "Among the female users of the devices, how many of them are over 30?", "sql": "SELECT COUNT(device_id) FROM gender_age WHERE age > 30 AND gender = 'F'", "source_tables": ["gender_age"]}, "evidence": "female refers to gender = 'F'; over 30 refers to age > 30;"}
{"sample_id": 1098, "db_id": "talkingdata", "final": {"question": "Among all the users who use a vivo device, what is the percentage of the users in the M23-26 user group?", "sql": "SELECT SUM(IIF(T1.\"group\" = 'M23-26', 1.0, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "vivo device refers to phone_brand = 'vivo'; percentage = MULTIPLY(DIVIDE(COUNT(phone_brand = 'vivo WHERE group = 'M23-26), COUNT(phone_brand = 'vivo)), 100); M23-26 user group refers to group = 'M23-26';"}
{"sample_id": 1211, "db_id": "talkingdata", "final": {"question": "Which gender logged in the most to an event in the first 10 days of May 2016?", "sql": "SELECT T.gender FROM ( SELECT T1.gender, COUNT(T1.device_id) AS num FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE date(T2.timestamp) BETWEEN '2016-05-01' AND '2016-05-10' GROUP BY T1.gender ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["gender_age", "events_relevant"]}, "evidence": "gender that logged in the most refers to MAX(COUNT(gender)); first 10 days of May 2016 refers to timestamp BETWEEN '2016-05-01 00:00:00' AND '2016-05-10 23:59:59';"}
{"sample_id": 1232, "db_id": "talkingdata", "final": {"question": "Please provide the age group of any LG Nexus 4 device users.", "sql": "SELECT T1.\"group\" FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'LG' AND T2.device_model = 'Nexus 4'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "age group refers to `group`; LG Nexus 4 refers to phone_brand = 'LG' AND device_model = 'Nexus 4';"}
{"sample_id": 1187, "db_id": "talkingdata", "final": {"question": "What is the age group of users who use phone brand of vivo?", "sql": "SELECT T1.\"group\" FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "age group refers to group;"}
{"sample_id": 1178, "db_id": "talkingdata", "final": {"question": "List the phone brands and models of the users under 10 years of age.", "sql": "SELECT T2.phone_brand, T2.device_model FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age < 10", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "models refers to device_model; under 10 years of age refers to age < 10;"}
{"sample_id": 1145, "db_id": "talkingdata", "final": {"question": "What is the brand of the device used by the most users in the M23-26 user group?", "sql": "SELECT T.phone_brand FROM ( SELECT T2.phone_brand, COUNT(T1.device_id) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.\"group\" = 'M23-26' GROUP BY T2.phone_brand ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "brand of the device refers to phone_brand; M23-26 user group refers to `group` = 'M23-26';"}
{"sample_id": 1084, "db_id": "talkingdata", "final": {"question": "To which user group do most of the users who uses a vivo device belong?", "sql": "SELECT T.\"group\" FROM ( SELECT T2.\"group\", COUNT(\"group\") AS num FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'vivo' GROUP BY T2.\"group\" ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "user group where most of the users belong refers to MAX(COUNT(group)); vivo device refers to phone_brand = 'vivo';"}
{"sample_id": 1128, "db_id": "talkingdata", "final": {"question": "For the event which happened at 23:33:34 on 2016/5/6, how many installed apps were involved?", "sql": "SELECT COUNT(T1.event_id) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE SUBSTR(T2.\"timestamp\", 1, 10) = '2016-05-06' AND T1.is_installed = '1'", "source_tables": ["events", "app_events"]}, "evidence": "at 23:33:34 on 2016/5/6 refers to timestamp = '2016/5/6 23:33:34'; installed refers to is_installed = '1';"}
{"sample_id": 1228, "db_id": "talkingdata", "final": {"question": "What is the age and gender of the person who uses the device number 29182687948017100 on event number 1?", "sql": "SELECT T1.age, T1.gender FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T1.device_id = 29182687948017100 AND T2.event_id = 1", "source_tables": ["gender_age", "events_relevant"]}, "evidence": "device number refers to device_id; device_id = 29182687948017100; event number refers to event_id; and event_id = 1;"}
{"sample_id": 1061, "db_id": "talkingdata", "final": {"question": "What is the ratio of male and female users in 27-28 age group?", "sql": "SELECT SUM(IIF(gender = 'M' AND \"group\" = 'M27-28', 1, 0)) / SUM(IIF(gender = 'F' AND \"group\" = 'F27-28', 1, 0)) AS r FROM gender_age", "source_tables": ["gender_age"]}, "evidence": "ratio = DIVIDE(COUNT(device_id WHERE gender = 'M' AND `group` = 'M27-28'), COUNT(device_id WHERE gender = 'F' AND `group` = 'F27-28')); 27-28 age group refers to `group` = 'F27-28';"}
{"sample_id": 1239, "db_id": "talkingdata", "final": {"question": "How many of the apps belong in the \"Equity Fund\" category?", "sql": "SELECT COUNT(T1.app_id) FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id WHERE T2.category = 'Equity Fund'", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1212, "db_id": "talkingdata", "final": {"question": "What age group is the most using SM-T2558 model phones?", "sql": "SELECT T.\"group\" FROM ( SELECT T1.\"group\", COUNT(T1.device_id) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'SM-T2558' GROUP BY T1.\"group\" ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "age group using SM-T2558 model phones the most refers to MAX(COUNT(group WHERE device_model = 'SM-T2558')); SM-T2558 model phones refers to device_model = 'SM-T2558';"}
{"sample_id": 1244, "db_id": "talkingdata", "final": {"question": "What percentage of vivo devices belong to users with no information?", "sql": "SELECT SUM(IIF(T1.gender IS NULL AND T1.age IS NULL AND T1.\"group\" IS NULL, 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(gender = NULL and age = NULL and `group` = NULL), COUNT(device_id)), 1.0); vivo devices refers to phone_brand = 'vivo'; no information refers to gender = NULL AND age = NULL AND `group` = NULL;"}
{"sample_id": 1215, "db_id": "talkingdata", "final": {"question": "What percentage of women do not have applications installed on their mobile with respect to men?", "sql": "SELECT SUM(IIF(T1.gender = 'F', 1, 0)) / SUM(IIF(T1.gender = 'M', 1, 0)) AS per FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id INNER JOIN app_events_relevant AS T3 ON T2.event_id = T3.event_id WHERE T3.is_installed = 0", "source_tables": ["gender_age", "events_relevant", "app_events_relevant"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(gender = 'F'), SUM(gender = 'M')), 1.0); women refers to gender = 'F'; not installed refers to is_installed = 0; men refers to gender = 'M';"}
{"sample_id": 1049, "db_id": "talkingdata", "final": {"question": "How many female users use ZenFone 5 devices?", "sql": "SELECT COUNT(T1.gender) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T2.device_id = T1.device_id WHERE T1.gender = 'F' AND T2.device_model = 'ZenFone 5'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "female refers to gender = 'F'; ZenFone 5 refers to device_model = 'ZenFone 5';"}
{"sample_id": 1186, "db_id": "talkingdata", "final": {"question": "How many labels belong to the game-card category?", "sql": "SELECT COUNT(label_id) FROM label_categories WHERE category = 'game-card'", "source_tables": ["label_categories"]}, "evidence": "labels refers to label_id;"}
{"sample_id": 1107, "db_id": "talkingdata", "final": {"question": "List at least 10 device models that male users over the age of 39 usually use.", "sql": "SELECT T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T2.\"group\" = 'M39+' AND T2.gender = 'M' LIMIT 10", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "male refers to gender = 'M'; over the age of 39 refers to group = 'M39+';"}
{"sample_id": 1065, "db_id": "talkingdata", "final": {"question": "Describe the device user gender and age of the event ID of 15251.", "sql": "SELECT T1.gender, T1.age FROM gender_age AS T1 INNER JOIN events AS T2 ON T2.device_id = T1.device_id WHERE T2.event_id = 15251", "source_tables": ["gender_age", "events"]}, "evidence": ""}
{"sample_id": 1081, "db_id": "talkingdata", "final": {"question": "Among the users who use a Galaxy Note 2, how many of them are female?", "sql": "SELECT COUNT(T1.device_id) FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T2.gender = 'F' AND T1.device_model = 'Galaxy Note 2'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "Galaxy Note 2 refers to device_model = 'Galaxy Note 2'; female refers to gender = 'F';"}
{"sample_id": 1064, "db_id": "talkingdata", "final": {"question": "Provide the app users IDs and time for the event ID of 82.", "sql": "SELECT T1.app_id, T2.timestamp FROM app_events AS T1 INNER JOIN events AS T2 ON T2.event_id = T1.event_id WHERE T2.event_id = 82", "source_tables": ["events", "app_events"]}, "evidence": "app user IDs refers to app_id; time refers to timestamp;"}
{"sample_id": 1074, "db_id": "talkingdata", "final": {"question": "Among the LG brand users, calculate the percentage of the Nexus 5 model user. What is the ratio of male and female users of it?", "sql": "SELECT SUM(IIF(T1.device_model = 'Nexus 5', 1, 0)) * 100 / COUNT(T1.device_id) AS per , SUM(IIF(T1.device_model = 'Nexus 5' AND T2.gender = 'M', 1, 0)) / SUM(IIF(T1.device_model = 'Nexus 5' AND T2.gender = 'F', 1, 0)) AS r FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'LG'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "LG brand refers to phone_brand = 'LG'; percentage = DIVIDE(MULTIPLY(CONCAT(COUNT(device_id WHERE device_model = 'Nexus 5'), 100), COUNT(device_id)),'%'); ratio = DIVIDE(COUNT(device_id WHERE device_model = 'Nexus 5' AND gender = 'M'), COUNT(device_id WHERE device_model = 'Nexus 5' AND gender = 'F')); Nexus 5 model refers to device_model = 'Nexus 5';"}
{"sample_id": 1153, "db_id": "talkingdata", "final": {"question": "What are the top 3 categories with the most app users?", "sql": "SELECT T.category FROM ( SELECT T2.category, COUNT(T1.app_id) AS num FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id GROUP BY T2.category ) AS T ORDER BY T.num DESC LIMIT 3", "source_tables": ["label_categories", "app_labels"]}, "evidence": "most app users refers to MAX(COUNT(app_id));"}
{"sample_id": 1133, "db_id": "talkingdata", "final": {"question": "For the event which happened at 14:09:49 on 2016/5/6, in the location coordinate(116, 40), how many apps were active?", "sql": "SELECT COUNT(T1.app_id) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE T2.timestamp = '2016-05-06 14:09:49' AND T1.is_active = '1' AND T2.longitude = '116' AND T2.latitude = '40'", "source_tables": ["events", "app_events"]}, "evidence": "at 14:09:49 on 2016/5/6 refers to timestamp = '2016/5/6 14:09:49'; location coordinate(116, 40) refers to longitude = '116' AND latitude = '40'; active refers to is_active = '1';"}
{"sample_id": 1225, "db_id": "talkingdata", "final": {"question": "When did event number 2 happen and how many users were active?", "sql": "SELECT COUNT(T1.app_id) AS num FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE T1.event_id = 2 AND T1.is_active = 1 GROUP BY T2.timestamp", "source_tables": ["events", "app_events"]}, "evidence": "event number refers to event_id; event_id = 2; active refers to is_active = 1;"}
{"sample_id": 1168, "db_id": "talkingdata", "final": {"question": "How many category names start with the word \"game\"?", "sql": "SELECT COUNT(label_id) FROM label_categories WHERE category LIKE 'game%'", "source_tables": ["label_categories"]}, "evidence": "category names refers to category; start with the word game refers to category like 'game%';"}
{"sample_id": 1114, "db_id": "talkingdata", "final": {"question": "How many male users use the Galaxy Ace Plus model?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Galaxy Ace Plus' AND T1.gender = 'M'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "male refers to gender = 'M'; Galaxy Ace Plus refers to device_model = 'Galaxy Ace Plus';"}
{"sample_id": 1106, "db_id": "talkingdata", "final": {"question": "List at least 15 phone models released under the OPPO brand.", "sql": "SELECT device_model FROM phone_brand_device_model2 WHERE phone_brand = 'OPPO' LIMIT 15", "source_tables": ["phone_brand_device_model2"]}, "evidence": "phone models refers to device_model; OPPO brand refers to phone_brand = 'OPPO';"}
{"sample_id": 1209, "db_id": "talkingdata", "final": {"question": "How many men under the age of 23 have apps installed but are not active on their devices?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id INNER JOIN app_events_relevant AS T3 ON T2.event_id = T3.event_id WHERE T1.gender = 'M' AND T3.is_active = 0 AND T1.age < 23", "source_tables": ["gender_age", "events_relevant", "app_events_relevant"]}, "evidence": "men refers to gender = 'M'; under the age of 23 refers to age < 23; installed refers to is_installed = 1; not active refers to is_active = 0;"}
{"sample_id": 1358, "db_id": "law_episode", "final": {"question": "Please list any three episodes that were most enjoyed by the viewers.", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10 LIMIT 3", "source_tables": ["episode", "vote"]}, "evidence": "episode refers to title; most enjoyed by the viewers refers to stars = 10"}
{"sample_id": 1256, "db_id": "law_episode", "final": {"question": "Please list the titles of all the episodes in which Park Dietz was credited.", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T2.credited = 'true' AND T3.name = 'Park Dietz'", "source_tables": ["credit", "episode", "person"]}, "evidence": "credited refers to credited = 'true'"}
{"sample_id": 1353, "db_id": "law_episode", "final": {"question": "Where is the place of birth of the actor with the number nm0007064 who has not been credited for playing the role of a \"Narrator\"?", "sql": "SELECT DISTINCT T1.birth_place FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.person_id = T2.person_id WHERE T1.person_id = 'nm0007064' AND T2.role = 'Narrator' AND T2.credited = 'false'", "source_tables": ["credit", "person"]}, "evidence": "place of birth refers to birth_place; actor with the number nm0007064 refers to person_id = 'nm007064'; has not been credited refers to credited = ''; the role of a \"Narrator\" refers to role = 'narrator'"}
{"sample_id": 1344, "db_id": "law_episode", "final": {"question": "What is the average ranking episodes that are nominated for an award?", "sql": "SELECT SUM(T1.rating) / COUNT(T1.episode) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id", "source_tables": ["award", "episode"]}, "evidence": "average ranking = divide(sum(rating), sum(episode_id))"}
{"sample_id": 1255, "db_id": "law_episode", "final": {"question": "For how many times was Park Dietz credited?", "sql": "SELECT COUNT(T3.person_id) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T2.credited = 'true' AND T3.name = 'Park Dietz'", "source_tables": ["credit", "episode", "person"]}, "evidence": "credited refers to credited = 'true'"}
{"sample_id": 1264, "db_id": "law_episode", "final": {"question": "How many awards has Rene Balcer been nominated for?", "sql": "SELECT COUNT(T2.award_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T1.name = 'Rene Balcer'", "source_tables": ["award", "person"]}, "evidence": ""}
{"sample_id": 1313, "db_id": "law_episode", "final": {"question": "What was the rating of the episodes that Jace Alexander worked on?", "sql": "SELECT T1.rating FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T3.name = 'Jace Alexander'", "source_tables": ["credit", "episode", "person"]}, "evidence": ""}
{"sample_id": 1291, "db_id": "law_episode", "final": {"question": "How many roles did Julia Roberts play in the series?", "sql": "SELECT COUNT(T1.role) FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'Julia Roberts'", "source_tables": ["credit", "person"]}, "evidence": ""}
{"sample_id": 1245, "db_id": "law_episode", "final": {"question": "Please list all the keywords of the episode \"Refuge: Part 1\".", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Refuge: Part 1'", "source_tables": ["keyword", "episode"]}, "evidence": "episode \"Refuge: Part 1\" refers to title = 'Refuge: Part 1'"}
{"sample_id": 1246, "db_id": "law_episode", "final": {"question": "How many keywords are there for season 9, episode 23 of law_and_order?", "sql": "SELECT COUNT(T2.keyword) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.season = 9 AND T1.episode = 23", "source_tables": ["keyword", "episode"]}, "evidence": ""}
{"sample_id": 1304, "db_id": "law_episode", "final": {"question": "What are the names of the two people who won an award for their role as directors?", "sql": "SELECT T1.name FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.Result = 'Winner' AND T2.role = 'director'", "source_tables": ["award", "person"]}, "evidence": "won an award refers to result = 'Winner'; role as director refers to role = 'director'"}
{"sample_id": 1273, "db_id": "law_episode", "final": {"question": "Who is the script supervisor of the series in episode tt0629204?", "sql": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.episode_id = 'tt0629204' AND T1.role = 'script supervisor'", "source_tables": ["credit", "person"]}, "evidence": "who refers to name; script supervisor refers to role = 'script supervisor'; episode tt0629204 refers to episode_id = 'tt0629204'"}
{"sample_id": 1280, "db_id": "law_episode", "final": {"question": "What is the title of the episode with the highest number of keywords?", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id GROUP BY T1.episode_id ORDER BY COUNT(T2.keyword) DESC LIMIT 1", "source_tables": ["keyword", "episode"]}, "evidence": "the highest number of keywords refers to max(count(keyword))"}
{"sample_id": 1327, "db_id": "law_episode", "final": {"question": "What was the role of Jason Kuschner in episode 9?", "sql": "SELECT T1.role FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE T3.episode = 9 AND T2.name = 'Jason Kuschner'", "source_tables": ["credit", "episode", "person"]}, "evidence": ""}
{"sample_id": 1263, "db_id": "law_episode", "final": {"question": "Which role did Joseph Blair play in the show?", "sql": "SELECT T1.role FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'Joseph Blair'", "source_tables": ["credit", "person"]}, "evidence": ""}
{"sample_id": 1267, "db_id": "law_episode", "final": {"question": "How many episodes did J.K. Simmons' role appear on the show?", "sql": "SELECT COUNT(T1.role) FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'J.K. Simmons'", "source_tables": ["credit", "person"]}, "evidence": ""}
{"sample_id": 1277, "db_id": "law_episode", "final": {"question": "How many people gave the most enjoyed episode a 10-star rating?", "sql": "SELECT COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10", "source_tables": ["episode", "vote"]}, "evidence": "the most enjoyed refers max(rating); 10-star refers to stars = 10"}
{"sample_id": 1354, "db_id": "law_episode", "final": {"question": "What are the keywords of the episode \"Shield\"?", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Shield'", "source_tables": ["keyword", "episode"]}, "evidence": "the episode \"Shield\" refers to title = 'Shield'"}
{"sample_id": 1318, "db_id": "law_episode", "final": {"question": "How many 6-star votes did episode 12 get? Please include the air date and rating.", "sql": "SELECT T2.air_date, T2.rating FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.stars = 6 AND T2.episode = 12", "source_tables": ["episode", "vote"]}, "evidence": "6-star vote refers to stars = 6"}
{"sample_id": 1251, "db_id": "law_episode", "final": {"question": "What is the title of the episode that got the most 10-star votes?", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10 ORDER BY T2.votes DESC LIMIT 1", "source_tables": ["episode", "vote"]}, "evidence": "the most refers to max(votes); 10-star refers to stars = 10"}
{"sample_id": 1326, "db_id": "law_episode", "final": {"question": "Among the American casts, how many were uncredited on episode ID tt0629228?", "sql": "SELECT COUNT(T1.person_id) FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.episode_id = 'tt0629228' AND T1.category = 'Cast' AND T1.credited = 'false' AND T2.birth_country = 'USA'", "source_tables": ["credit", "person"]}, "evidence": "American refers to birth_country = 'USA'; cast refers to category = 'Cast'; uncredited refers to credited = ''"}
{"sample_id": 1292, "db_id": "law_episode", "final": {"question": "What are the titles of the top 3 episodes that received no less than 30 votes in its 10-star rating?", "sql": "SELECT T2.title FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.votes >= 30 AND T1.stars = 10 ORDER BY T1.votes DESC LIMIT 3", "source_tables": ["episode", "vote"]}, "evidence": "no less than 30 votes refers to votes > = 30; 10-star rating refers to stars = 10"}
{"sample_id": 1493, "db_id": "synthea", "final": {"question": "Indicate the time frame and details of the most recent care plan suggested to Jacquelyn Shanahan.", "sql": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS timeFrame , T2.DESCRIPTION FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Jacquelyn' AND T1.last = 'Shanahan' ORDER BY T2.START DESC LIMIT 1", "source_tables": ["careplans", "patients"]}, "evidence": "time frame = SUBTRACT(JULIANDAY(careplans.STOP), JULIANDAY(careplans.START)); details of care plan refers to careplans.DESCRIPTION; most recent care plan refers to MIN(careplans.STAR);"}
{"sample_id": 1474, "db_id": "synthea", "final": {"question": "How long was Mr. Major D'Amore prescribed with Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin]?", "sql": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS days FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = ' Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin]' AND T1.first = 'Major' AND T1.last = 'D''Amore'", "source_tables": ["medications", "patients"]}, "evidence": "how long = SUBTRACT(julianday(medications.STOP, julianday(medications.START))); Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin] refers to medications.DESCRIPTION = 'Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin]';"}
{"sample_id": 1518, "db_id": "synthea", "final": {"question": "Describe the condition of patient Wilmer Koepp.", "sql": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Wilmer' AND T1.last = 'Koepp'", "source_tables": ["patients", "conditions"]}, "evidence": ""}
{"sample_id": 1463, "db_id": "synthea", "final": {"question": "In 2009, who among the married patients had undergone a care plan for more than 60 days?", "sql": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.marital = 'M' AND strftime('%J', T2.STOP) - strftime('%J', T2.START) > 60", "source_tables": ["careplans", "patients"]}, "evidence": "in 2009 refers to year(careplans.START) = 2009; married patients refers to marital = 'M'; undergone a care plan for more than 60 days refers to SUBTRACT(careplans.STOP, careplans.START) > 60;"}
{"sample_id": 1542, "db_id": "synthea", "final": {"question": "List down the full name of Irish patients diagnosed with the prevalent diseases that have an occurrence greater than the 96% of the average occurrences of all conditions.", "sql": "SELECT DISTINCT T2.first, T2.last FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient INNER JOIN all_prevalences AS T3 ON T1.DESCRIPTION = T3.ITEM WHERE T2.ethnicity = 'irish' AND 100 * CAST(T3.OCCURRENCES AS REAL) / ( SELECT AVG(OCCURRENCES) FROM all_prevalences ) > 96", "source_tables": ["patients", "all_prevalences", "conditions"]}, "evidence": "full name = first, last; Irish refers to ethnicity = 'irish'; prevalent diseases that have an occurrence greater than the 96% of the average occurrences of all conditions = OCCURRENCES > (AVG(MULTIPLY(all_prevalences.OCCURRENCES, 0.96)));"}
{"sample_id": 1417, "db_id": "synthea", "final": {"question": "Provide at least 5 social security numbers of patients with a prevalent disease with a prevalence percentage lower than 30% of the average prevalence percentage of conditions.", "sql": "SELECT DISTINCT T2.ssn FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient INNER JOIN all_prevalences AS T3 ON lower(T1.DESCRIPTION) = lower(T3.ITEM) WHERE CAST(T3.\"PREVALENCE PERCENTAGE\" AS REAL) * 100 / ( SELECT AVG('PREVALENCE PERCENTAGE') FROM all_prevalences ) < 30 LIMIT 5", "source_tables": ["patients", "all_prevalences", "conditions"]}, "evidence": "social security number refers to ssn; prevalence percentage lower than 30% of the average prevalence percentage of conditions refers to PREVALENCE PERCENTAGE < MULTIPLY(0.3, AVG(PREVALENCE PERCENTAGE));"}
{"sample_id": 1373, "db_id": "synthea", "final": {"question": "Give the body height status of Mr. Vincent Wyman on 2010/8/2.", "sql": "SELECT T2.description, T2.VALUE, T2.units FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mr.' AND T1.first = 'Vincent' AND T1.last = 'Wyman' AND T2.date = '2010-08-02' AND T2.description = 'Body Height'", "source_tables": ["patients", "observations"]}, "evidence": "body height status refers to DESCRIPTION = 'Body Height' from observations;\u00a0on 2010/8/2 refers to DATE = '2010-08-02';"}
{"sample_id": 1492, "db_id": "synthea", "final": {"question": "How many patients on average receive combined chemotherapy and radiation therapy procedures each year?", "sql": "SELECT CAST(COUNT(PATIENT) AS REAL) / COUNT(DISTINCT strftime('%Y', DATE)) FROM procedures WHERE DESCRIPTION = 'Combined chemotherapy and radiation therapy (procedure)'", "source_tables": ["procedures"]}, "evidence": "average = DIVIDE(COUNT(procedures.PATIENT), COUNT(substr(procedures.DATE, 1, 4))); combined chemotherapy and radiation therapy refers to procedures.DESCRIPTION = 'Combined chemotherapy and radiation therapy (procedure)';"}
{"sample_id": 1447, "db_id": "synthea", "final": {"question": "How many of the patients who underwent a 'bone immobilization' procedure have a driver's license?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN procedures AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Bone immobilization' AND T1.drivers IS NOT NULL", "source_tables": ["patients", "procedures"]}, "evidence": "patients who underwent a 'bone immobilization' procedure refer to PATIENT from procedures where DESCRIPTION = 'Bone immobilization'; have a driver's license refers to drivers is not null;"}
{"sample_id": 1440, "db_id": "synthea", "final": {"question": "What kind of allergy is most common among white people?", "sql": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T1.race = 'white' GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1", "source_tables": ["allergies", "patients"]}, "evidence": "kind of allergy is most common refers to MAX(COUNT(DESCRIPTION)) from allergies; white refers to race = 'white';"}
{"sample_id": 1509, "db_id": "synthea", "final": {"question": "List out the start date of the care plan of alive patients.", "sql": "SELECT DISTINCT T1.START FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.deathdate IS NULL", "source_tables": ["careplans", "patients"]}, "evidence": "start of the care plan refers to careplans.START; alive patients refers to deathdate is null;"}
{"sample_id": 1430, "db_id": "synthea", "final": {"question": "Among observations in 2011, provide the names and ages of patients whose Systolic Blood Pressures are 200mmHg.", "sql": "SELECT T2.first, T2.last , CASE WHEN T2.deathdate IS NULL THEN strftime('%Y', T1.DATE) - strftime('%Y', T2.birthdate) ELSE strftime('%Y', T2.deathdate) - strftime('%Y', T2.birthdate) END AS age FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Systolic Blood Pressure' AND T1.VALUE = 200 AND T1.UNITS = 'mmHg' AND strftime('%Y', T1.DATE) = '2011'", "source_tables": ["patients", "observations"]}, "evidence": "name implies the patient's full name which refers to first, last; age refers to deathdate is null then SUBTRACT(strftime('%Y', DATE), strftime('%Y', birthdate)); Systolic Blood Pressures are 200mmHg refers to DESCRIPTION = 'Systolic Blood Pressure' and VALUE = 200 and UNITS = 'mmHg' from observations; in 2011 refers to DATE like '2011%';"}
{"sample_id": 1428, "db_id": "synthea", "final": {"question": "Describe the care plans received by the patient with secondary malignant neoplasm of the colon.", "sql": "SELECT DISTINCT T1.DESCRIPTION FROM careplans AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Secondary malignant neoplasm of colon'", "source_tables": ["careplans", "conditions"]}, "evidence": "care plans refer to DESCRIPTION from careplans; secondary malignant neoplasm of the colon refers to conditions where DESCRIPTION = 'Secondary malignant neoplasm of colon';"}
{"sample_id": 1490, "db_id": "synthea", "final": {"question": "What drug is administered more often to treat child attention deficit disorder?", "sql": "SELECT DESCRIPTION FROM medications WHERE REASONDESCRIPTION = 'Child attention deficit disorder' GROUP BY DESCRIPTION ORDER BY COUNT(DESCRIPTION) DESC LIMIT 1", "source_tables": ["medications"]}, "evidence": "drug that was administered refers to medications.DESCRIPTION; child attention deficit disorder refers to medications.REASONDESCRIPTION = 'Child attention deficit disorder';"}
{"sample_id": 1476, "db_id": "synthea", "final": {"question": "List out all the observation information collected for the patient named Bella Rolfson.", "sql": "SELECT DISTINCT T2.DESCRIPTION, T2.VALUE, T2.UNITS FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Bella' AND T1.last = 'Rolfson'", "source_tables": ["patients", "observations"]}, "evidence": "observation information refers to observations.DESCRIPTION AND observations.VALUE AND observations.UNITS;"}
{"sample_id": 1500, "db_id": "synthea", "final": {"question": "Among all patients who sought medical attention in 2010 due to contact dermatitis, identify the percentage of females.", "sql": "SELECT CAST(SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.PATIENT) FROM encounters AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE strftime('%Y', T1.DATE) = '2010' AND T1.REASONDESCRIPTION = 'Contact dermatitis'", "source_tables": ["encounters", "patients"]}, "evidence": "in 2010 refers to substr(encounters.DATE, 1, 4) = '2010'; contact dermatitis refers to encounters.REASONDESCRIPTION = 'Contact dermatitis'; percentage = MULTIPLY(DIVIDE(COUNT(encounters.PATIENT WHERE gender = 'F'), count(encounters.PATIENT) WHERE encounters.REASONDESCRIPTION = 'Contact dermatitis'), 1.0) females refers to gender = 'F';"}
{"sample_id": 1445, "db_id": "synthea", "final": {"question": "Calculate the average age of patients with prediabetes care plan.", "sql": "SELECT CAST(SUM(CASE WHEN T1.deathdate IS NULL THEN strftime('%Y', T2.STOP) - strftime('%Y', T1.birthdate) ELSE strftime('%Y', T1.deathdate) - strftime('%Y', T1.birthdate) END) AS REAL) / COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T2.REASONDESCRIPTION = 'Prediabetes'", "source_tables": ["careplans", "patients"]}, "evidence": "SUBTRACT(SUM(deathdate), SUM(birthdate)), COUNT(patient) where REASONDESCRIPTION = 'Prediabetes' from careplans;"}
{"sample_id": 1519, "db_id": "synthea", "final": {"question": "Among the patients with viral sinusitis condition, which patient's gender is most affected? Provide the number for each respectively.", "sql": "SELECT SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END), SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Viral sinusitis (disorder)'", "source_tables": ["patients", "conditions"]}, "evidence": "viral sinusitis condition refers to conditions.DESCRIPTION = 'Viral sinusitis (disorder)'; gender that is most affected refers to MAX(COUNT(gender WHERE conditions.DESCRIPTION = 'Viral sinusitis (disorder)'));"}
{"sample_id": 1366, "db_id": "synthea", "final": {"question": "Why did Elly Koss need to take Acetaminophen?", "sql": "SELECT T2.REASONDESCRIPTION FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description LIKE 'Acetaminophen%'", "source_tables": ["medications", "patients"]}, "evidence": "why need to take Acetaminophen refers to REASONDESCRIPTION\u00a0 where DESCRIPTION like 'Acetaminophen%' from medications;"}
{"sample_id": 1441, "db_id": "synthea", "final": {"question": "List down the first name of patients who received \"Influenza seasonal injectable preservative free\" immunization.", "sql": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free'", "source_tables": ["immunizations", "patients"]}, "evidence": "\"Influenza seasonal injectable preservative free\" immunization refers to immunizations where DESCRIPTION = 'Influenza seasonal injectable preservative free';"}
{"sample_id": 1438, "db_id": "synthea", "final": {"question": "When the allergy starts for Angelo Buckridge.", "sql": "SELECT T2.START FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Adolfo' AND T1.last = 'Schmitt' AND T2.STOP IS NOT NULL", "source_tables": ["allergies", "patients"]}, "evidence": ""}
{"sample_id": 1420, "db_id": "synthea", "final": {"question": "List the procedures received by Emmy Waelchi.", "sql": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN procedures AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Emmy' AND T1.last = 'Waelchi'", "source_tables": ["patients", "procedures"]}, "evidence": "procedures refer to DESCRIPTION from procedures;"}
{"sample_id": 1502, "db_id": "synthea", "final": {"question": "State description of medication taken by Joe Homenick.", "sql": "SELECT T1.DESCRIPTION FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.first = 'Joye' AND T2.last = 'Homenick'", "source_tables": ["medications", "patients"]}, "evidence": "description of medication refers to medications.DESCRIPTION;"}
{"sample_id": 1405, "db_id": "synthea", "final": {"question": "Indicate the patient's full name with the lowest body mass index in kg/m2.", "sql": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Body Mass Index' AND T2.UNITS = 'kg/m2' ORDER BY T2.VALUE LIMIT 1", "source_tables": ["patients", "observations"]}, "evidence": "full name refers to first, last; the lowest body mass index in kg/m2 refers to DESCRIPTION = Body Mass Index from observations where MIN(VALUE) and UNITS = 'kg/m2';"}
{"sample_id": 1528, "db_id": "synthea", "final": {"question": "Calculate the percentage of male patients with viral sinusitis condition.", "sql": "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Viral sinusitis (disorder)'", "source_tables": ["patients", "conditions"]}, "evidence": "percentage = MULTIPLY(DIVIDE(COUNT(patients.patient WHERE gender = 'M'), COUNT(patients.patient) WHERE conditions.DESCRIPTION = 'Viral sinusitis (disorder))), 100); male patients refers to gender = 'M'; viral sinusitis condition refers to conditions.DESCRIPTION = 'Viral sinusitis (disorder)';"}
{"sample_id": 1415, "db_id": "synthea", "final": {"question": "What is the code of the prevalent disease with the highest occurrences?", "sql": "SELECT T2.code FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON T1.ITEM = T2.DESCRIPTION ORDER BY T1.OCCURRENCES DESC LIMIT 1", "source_tables": ["all_prevalences", "conditions"]}, "evidence": ""}
{"sample_id": 1432, "db_id": "synthea", "final": {"question": "List down the first name of patients who encountered normal pregnancy.", "sql": "SELECT DISTINCT T1.first FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T2.REASONDESCRIPTION = 'Normal pregnancy'", "source_tables": ["patients", "encounters"]}, "evidence": "encountered normal pregnancy refers to encounters where REASONDESCRIPTION = 'Normal pregnancy';"}
{"sample_id": 1514, "db_id": "synthea", "final": {"question": "What is the percentage of female patients who started the care plan in 2010?", "sql": "SELECT CAST(SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.PATIENT) AS percentage FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE strftime('%Y', T1.START) = '2010'", "source_tables": ["careplans", "patients"]}, "evidence": "female patients refers to gender = 'F'; started the care plan in 2010 refers to substr(careplans.START, 1, 4) = '2010'; percentage = MULTIPLY(DIVIDE(COUNT(patients.patient WHERE patients.gender = 'F'), COUNT(patients.patient) WHERE substr(careplans.START, 1, 4) = '2010'), 100);"}
{"sample_id": 1407, "db_id": "synthea", "final": {"question": "How many Asian female patients take oxaliplatin 5 MG/ML [Eloxatin]?", "sql": "SELECT COUNT(DISTINCT T2.patient) FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'oxaliplatin 5 MG/ML [Eloxatin]' AND T2.race = 'asian' AND T2.gender = 'F'", "source_tables": ["medications", "patients"]}, "evidence": "female refers to gender = 'F'; oxaliplatin 5 MG/ML [Eloxatin] refers to medications where DESCRIPTION = 'oxaliplatin 5 MG/ML [Eloxatin]';"}
{"sample_id": 1402, "db_id": "synthea", "final": {"question": "How many conditions did Tyree Eichmann have?", "sql": "SELECT COUNT(DISTINCT T2.DESCRIPTION) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Tyree' AND T1.last = 'Eichmann'", "source_tables": ["patients", "conditions"]}, "evidence": "conditions refer to DESCRIPTION from conditions;"}
{"sample_id": 1459, "db_id": "synthea", "final": {"question": "What is the average body weight of Asian patients?", "sql": "SELECT SUM(T2.VALUE) / COUNT(T1.patient) FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.race = 'asian' AND T2.DESCRIPTION = 'Body Weight' AND T2.UNITS = 'kg'", "source_tables": ["patients", "observations"]}, "evidence": "average = AVG(observations.VALUE WHERE observations.DESCRIPTION = 'Body Weight' AND observations.UNITS = 'kg'); body weight refers to observations.DESCRIPTION = 'Body Weight'; Asian refers to race = 'asian';"}
{"sample_id": 1377, "db_id": "synthea", "final": {"question": "State the prevalence rate of condition no. 368581000119106.", "sql": "SELECT DISTINCT T1.\"PREVALENCE RATE\" FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON lower(T1.ITEM) = lower(T2.DESCRIPTION) WHERE T2.code = '368581000119106'", "source_tables": ["all_prevalences", "conditions"]}, "evidence": "condition no. 368581000119106 refers to conditions where CODE = '368581000119106';"}
{"sample_id": 1370, "db_id": "synthea", "final": {"question": "For how long did Elly Koss's cystitis last?", "sql": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS days FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description = 'Cystitis'", "source_tables": ["patients", "conditions"]}, "evidence": "SUM(MULTIPLY(365, SUBTRACT(strftime('%Y', STOP), strftime('%Y', START))), MULTIPLY(30, SUBTRACT(strftime('%m', STOP), strftime('%m', START))), SUBTRACT(strftime('%d', STOP), strftime('%d', START))) where DESCRIPTION = 'Cystitis';"}
{"sample_id": 1529, "db_id": "synthea", "final": {"question": "Among the patients who have been using Penicillin V Potassium 250 MG, what percentage of patients are female?", "sql": "SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.patient) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Penicillin V Potassium 250 MG'", "source_tables": ["medications", "patients"]}, "evidence": "Penicillin V Potassium 250 MG refers to medications.DESCRIPTION = 'Penicillin V Potassium 250 MG'; percentage = MULTIPLY(DIVIDE(patients.patient WHERE gender = 'F'), COUNT(patients.patient) WHERE medications.DESCRIPTION = 'Penicillin V Potassium 250 MG'), 100) female refers to gender = 'F';"}
{"sample_id": 1460, "db_id": "synthea", "final": {"question": "Write down the Social Security numbers of patients who have latex allergies.", "sql": "SELECT T1.ssn FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Latex allergy'", "source_tables": ["allergies", "patients"]}, "evidence": "Social Security numbers refers to ssn; latex allergies refers to allergies.DESCRIPTION = 'Latex allergy';"}
{"sample_id": 1466, "db_id": "synthea", "final": {"question": "Give me the immunization codes and dates on which Ms. Jacquelyn Shanahan was immunized with influenza seasonal injectable preservative-free vaccine.", "sql": "SELECT DISTINCT T2.CODE, T2.DATE FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Ms.' AND T1.first = 'Jacquelyn' AND T1.last = 'Shanahan' AND T2.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free'", "source_tables": ["immunizations", "patients"]}, "evidence": "immunization codes refers to immunizations.CODE; immunization dates refers to immunizations.DATE; immunized with influenza seasonal injectable preservative-free vaccine refers to immunizations.DESCRIPTION = 'Influenza seasonal injectable preservative free'; 4 consecutive years refers to 4 succeeding years;"}
{"sample_id": 1489, "db_id": "synthea", "final": {"question": "How old was Mr. Stacy Morar at the time of his first emergency room admission due to a drug overdose?", "sql": "SELECT T2.DATE - T1.birthdate AS age FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Stacy' AND T1.last = 'Morar' AND T2.DESCRIPTION = 'Emergency Room Admission' AND T2.REASONDESCRIPTION = 'Drug overdose' ORDER BY T2.DATE LIMIT 1", "source_tables": ["patients", "encounters"]}, "evidence": "how old = SUBTRACT(MIN(encounters.DATE), patients.birthdate); his first emergency room admission refers to MIN(encounters.DATE); drug overdose refers to encounters.REASONDESCRIPTION = 'Drug overdose' ;"}
{"sample_id": 1661, "db_id": "car_retails", "final": {"question": "List out 3 best seller products during year 2003 with their total quantity sold during 2003.", "sql": "SELECT t3.productName, SUM(t2.quantityOrdered) FROM orders AS t1 INNER JOIN orderdetails AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN products AS t3 ON t2.productCode = t3.productCode WHERE STRFTIME('%Y', t1.orderDate) = '2003' GROUP BY t3.productName ORDER BY SUM(t2.quantityOrdered) DESC LIMIT 3", "source_tables": ["products", "orderdetails", "orders"]}, "evidence": "Best selling products refer to products with MAX(quantityOrdered); 2003 refers to year(orderDate) = 2003;"}
{"sample_id": 1655, "db_id": "car_retails", "final": {"question": "How many 2003 Harley-Davidson Eagle Drag Bikes were ordered?", "sql": "SELECT SUM(t2.quantityOrdered) FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode WHERE t1.productName = '2003 Harley-Davidson Eagle Drag Bike'", "source_tables": ["products", "orderdetails"]}, "evidence": "2003 Harley-Davidson Eagle Drag Bikes refers to productName; how many ordered refers to COUNT(quantityOrdered);"}
{"sample_id": 1627, "db_id": "car_retails", "final": {"question": "Please list all the customers that have Steve Patterson as their sales representitive.", "sql": "SELECT t1.customerName FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t2.firstName = 'Steve' AND t2.lastName = 'Patterson'", "source_tables": ["customers", "employees"]}, "evidence": "Steve Patterson is an employee;"}
{"sample_id": 1583, "db_id": "car_retails", "final": {"question": "How many customers who are in Norway and have credit line under 220000?", "sql": "SELECT COUNT(creditLimit) FROM customers WHERE creditLimit < 220000 AND country = 'Norway'", "source_tables": ["customers"]}, "evidence": "Norway is a country; credit line refers to creditLimit; creditLimit<220000;"}
{"sample_id": 1622, "db_id": "car_retails", "final": {"question": "For the product No. S18_3482 in the Order No.10108, how much discount did the customer have?", "sql": "SELECT (t1.MSRP - t2.priceEach) / t1.MSRP FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode WHERE t1.productCode = 'S18_3482' AND t2.orderNumber = '10108'", "source_tables": ["products", "orderdetails"]}, "evidence": "DIVIDE(SUBTRACT(MSRP, priceEach)), MSRP); product No. S18_3482 refers to productCode = 'S18_3482'"}
{"sample_id": 1629, "db_id": "car_retails", "final": {"question": "Please list the phone numbers of the top 3 customers that have the highest credit limit and have Leslie Jennings as their sales representitive.", "sql": "SELECT t1.phone FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t2.firstName = 'Leslie' AND t2.lastName = 'Jennings' ORDER BY t1.creditLimit DESC LIMIT 3", "source_tables": ["customers", "employees"]}, "evidence": ""}
{"sample_id": 1585, "db_id": "car_retails", "final": {"question": "List the product code of the top five motorcycles, by descending order, the number of quantity in stock.", "sql": "SELECT productCode, quantityInStock FROM products WHERE productLine = 'Motorcycles' ORDER BY quantityInStock DESC LIMIT 5", "source_tables": ["products"]}, "evidence": "motorcycle is a product line;"}
{"sample_id": 1619, "db_id": "car_retails", "final": {"question": "If Dragon Souveniers, Ltd. aren't satisfied with their order and want to send a complain e-mail, which e-mail address should they send to?", "sql": "SELECT t2.email FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.customerName = 'Dragon Souveniers, Ltd.'", "source_tables": ["customers", "employees"]}, "evidence": "E-mail address belongs to employee; customerName = 'Dragon Souveniers, Ltd.';"}
{"sample_id": 1568, "db_id": "car_retails", "final": {"question": "Please list the name and phone number of the customer whose order was cancelled.", "sql": "SELECT T2.customerName, T2.phone FROM orders AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.status = 'Cancelled'", "source_tables": ["customers", "orders"]}, "evidence": "cancelled order refers to status = 'Cancelled';"}
{"sample_id": 1663, "db_id": "car_retails", "final": {"question": "Who are the sales representatives in New York City? List their full names.", "sql": "SELECT t1.lastName, t1.firstName FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t2.city = 'NYC' AND t1.jobTitle = 'Sales Rep'", "source_tables": ["employees", "offices"]}, "evidence": "New York City refers to city = 'NYC'; sales representative refers to jobTitle = 'Sales Rep';"}
{"sample_id": 1664, "db_id": "car_retails", "final": {"question": "Identify the customer and list down the country with the check number GG31455.", "sql": "SELECT t2.customerName, t2.country FROM payments AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.checkNumber = 'GG31455'", "source_tables": ["customers", "payments"]}, "evidence": ""}
{"sample_id": 1572, "db_id": "car_retails", "final": {"question": "How many Sales Rep who are working in Tokyo? List out email and full name of those employees.", "sql": "SELECT T1.firstName, T1.lastName, T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Tokyo' AND T1.jobTitle = 'Sales Rep'", "source_tables": ["employees", "offices"]}, "evidence": "Sales Rep is a job title; Tokyo is a city; full name = firstName+lastName;"}
{"sample_id": 1610, "db_id": "car_retails", "final": {"question": "Who is the sales representative that made the order which was sent to 25 Maiden Lane, Floor No. 4?", "sql": "SELECT T2.firstName, T2.lastName FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber WHERE T1.addressLine1 = '25 Maiden Lane' AND T1.addressLine2 = 'Floor No. 4'", "source_tables": ["customers", "employees"]}, "evidence": "Sales representative is an employee;"}
{"sample_id": 1599, "db_id": "car_retails", "final": {"question": "Of all the orders placed and shipped throughout the year 2005, what percentage of those orders corresponds to customer number 186?", "sql": "SELECT CAST(SUM(CASE WHEN customerNumber = 186 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(orderNumber) FROM orders WHERE status = 'Shipped' AND shippedDate BETWEEN '2005-01-01' AND '2005-12-31'", "source_tables": ["orders"]}, "evidence": "shipped orders refers to status = 'shipped'; year(shippedDate) = 2005; percentage = DIVIDE(SUM(customerNumber = 186)), COUNT(orderNumber)) as percentage;"}
{"sample_id": 1554, "db_id": "car_retails", "final": {"question": "How many customers have a credit limit of not more than 100,000 and which customer made the highest total payment amount for the year 2004?", "sql": "SELECT ( SELECT COUNT(customerNumber) FROM customers WHERE creditLimit <= 100000 AND customerNumber IN ( SELECT customerNumber FROM payments WHERE STRFTIME('%Y', paymentDate) = '2004' ) ), T1.customerName FROM customers AS T1 INNER JOIN payments AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.creditLimit <= 100000 AND STRFTIME('%Y', T2.paymentDate) = '2004' GROUP BY T1.customerNumber, T1.customerName ORDER BY SUM(T2.amount) DESC LIMIT 1", "source_tables": ["customers", "payments"]}, "evidence": "creditLimit < = 100000; total payment amount refers to amount; highest total payment amount refers to MAX(amount); year(paymentDate) = '2004';"}
{"sample_id": 1557, "db_id": "car_retails", "final": {"question": "How many different orders with a total price greater than 4000 are cancelled?", "sql": "SELECT COUNT(DISTINCT T1.orderNumber) FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE T1.quantityOrdered * T1.priceEach > 4000 AND T2.status = 'Cancelled'", "source_tables": ["orderdetails", "orders"]}, "evidence": "total price = MULTIPLY(quantityOrdered, priceEach) > 4000; cancelled orders refer to status = 'Cancelled';"}
{"sample_id": 1611, "db_id": "car_retails", "final": {"question": "Where's Foon Yue Tseng's office located at? Give the detailed address.", "sql": "SELECT T1.addressLine1, T1.addressLine2 FROM offices AS T1 INNER JOIN employees AS T2 ON T1.officeCode = T2.officeCode WHERE T2.firstName = 'Foon Yue' AND T2.lastName = 'Tseng'", "source_tables": ["employees", "offices"]}, "evidence": "Detailed address comprises addressLine1 and addressLine2;"}
{"sample_id": 1616, "db_id": "car_retails", "final": {"question": "Which customer made the order No. 10160? Give the contact name.", "sql": "SELECT t2.contactFirstName, t2.contactLastName FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.orderNumber = '10160'", "source_tables": ["customers", "orders"]}, "evidence": ""}
{"sample_id": 1632, "db_id": "car_retails", "final": {"question": "What's the postal code of the office the VP Sales is at?", "sql": "SELECT t2.postalCode FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t1.jobTitle = 'VP Sales'", "source_tables": ["employees", "offices"]}, "evidence": "VP Sales refers to jobTitle"}
{"sample_id": 1556, "db_id": "car_retails", "final": {"question": "Which two products has the highest and lowest expected profits? Determine the total price for each product in terms of the largest quantity that was ordered.", "sql": "SELECT T2.productName, SUM(T1.quantityOrdered * T1.priceEach) FROM orderdetails AS T1 INNER JOIN ( SELECT productCode, productName FROM products ORDER BY MSRP - buyPrice DESC LIMIT 1 ) AS T2 ON T1.productCode = T2.productCode UNION SELECT T2.productName, SUM(quantityOrdered * priceEach) FROM orderdetails AS T1 INNER JOIN ( SELECT productCode, productName FROM products ORDER BY MSRP - buyPrice ASC LIMIT 1 ) AS T2 ON T1.productCode = T2.productCode", "source_tables": ["products", "orderdetails"]}, "evidence": "expected profits = SUBTRACT(msrp, buyPrice); total price = MULTIPLY(quantityOrdered, priceEach)"}
{"sample_id": 1575, "db_id": "car_retails", "final": {"question": "How many Sales Manager who are working in Sydney? List out their email.", "sql": "SELECT T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T1.jobTitle LIKE '%Sales Manager%' AND T2.city = 'Sydney'", "source_tables": ["employees", "offices"]}, "evidence": "Sales Manager is a job title; Sydney is a city;"}
{"sample_id": 1668, "db_id": "car_retails", "final": {"question": "How many countries from the USA have an In Process order status?", "sql": "SELECT COUNT(t2.orderNumber) FROM customers AS t1 INNER JOIN orders AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.status = 'On Hold' AND t1.country = 'USA'", "source_tables": ["customers", "orders"]}, "evidence": "country = 'USA'"}
{"sample_id": 1631, "db_id": "car_retails", "final": {"question": "Where can I find the office of the President of the company?", "sql": "SELECT t2.addressLine1, t2.addressLine2 FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t1.jobTitle = 'President'", "source_tables": ["employees", "offices"]}, "evidence": "Where can I find the office refers to address, comprising of addressLine1 and addressLine2; President is a jobTitle"}
{"sample_id": 1560, "db_id": "car_retails", "final": {"question": "Please calculate the total value of Motorcycles orders.", "sql": "SELECT SUM(T1.quantityOrdered * T1.priceEach) FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode WHERE T2.productLine = 'Motorcycles'", "source_tables": ["products", "orderdetails"]}, "evidence": "Motorcycle is a product line; total value = SUM(MULTIPLY(quantityOrdered, priceEach));"}
{"sample_id": 1605, "db_id": "car_retails", "final": {"question": "What is the full address of the office where 4 people work and one of them is Sales Representation?", "sql": "SELECT T1.addressLine1, T1.addressLine2 FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber WHERE T2.jobTitle = 'Sales Rep'", "source_tables": ["customers", "employees"]}, "evidence": "full address = addressLine1+addressLine2; Sales Manager is a job title;"}
{"sample_id": 1682, "db_id": "restaurant", "final": {"question": "Indicate street and number of the Adelitas Taqueria Restaurants.", "sql": "SELECT T1.street_name, T1.street_num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'adelitas taqueria'", "source_tables": ["location", "generalinfo"]}, "evidence": "street refers to street_name; number refers to street_num; Adelitas Taqueria Restaurant refers to label = 'adelitas taqueria'"}
{"sample_id": 1673, "db_id": "restaurant", "final": {"question": "List all the cities in Sonoma County.", "sql": "SELECT city FROM geographic WHERE county = 'sonoma county'", "source_tables": ["geographic"]}, "evidence": ""}
{"sample_id": 1753, "db_id": "restaurant", "final": {"question": "List down the restaurant ID of restaurants located in Sunnyvale.", "sql": "SELECT id_restaurant FROM location WHERE city = 'sunnyvale'", "source_tables": ["location"]}, "evidence": "Sunnyvale refers to city = 'sunnyvale'"}
{"sample_id": 1715, "db_id": "restaurant", "final": {"question": "What is the county and region of Plearn-Thai Cuisine restaurant?", "sql": "SELECT T1.county, T1.region, T2.label FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.label = 'plearn-thai cuisine'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "Plearn-Thai Cuisine restaurant refers to label = 'plearn-thai cuisine'"}
{"sample_id": 1695, "db_id": "restaurant", "final": {"question": "Identify all the restaurants in Marin County by their id.", "sql": "SELECT T1.id_restaurant FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'marin county'", "source_tables": ["geographic", "generalinfo"]}, "evidence": ""}
{"sample_id": 1727, "db_id": "restaurant", "final": {"question": "What is the address of the Peking Duck restaurant?", "sql": "SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.label = 'peking duck restaurant'", "source_tables": ["location", "generalinfo"]}, "evidence": "address refers to street_num, street_name; Peking Duck restaurant refers to label = 'peking duck restaurant'"}
{"sample_id": 1744, "db_id": "restaurant", "final": {"question": "Please indicate the street names of restaurants with food type is American.", "sql": "SELECT T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'American'", "source_tables": ["location", "generalinfo"]}, "evidence": ""}
{"sample_id": 1720, "db_id": "restaurant", "final": {"question": "List every city in San Mateo County.", "sql": "SELECT city FROM geographic WHERE county = 'san mateo county'", "source_tables": ["geographic"]}, "evidence": ""}
{"sample_id": 1701, "db_id": "restaurant", "final": {"question": "What cities are located in Northern California?", "sql": "SELECT city FROM geographic WHERE region = 'northern california'", "source_tables": ["geographic"]}, "evidence": "Northern California refers to region = 'northern california'"}
{"sample_id": 1784, "db_id": "restaurant", "final": {"question": "In which counties can you find the restaurant with the highest number of branches?", "sql": "SELECT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city GROUP BY T2.county ORDER BY COUNT(T1.label) DESC LIMIT 1", "source_tables": ["geographic", "generalinfo"]}, "evidence": "restaurant refers to label; the highest number of branches refers to max(count(city))"}
{"sample_id": 1675, "db_id": "restaurant", "final": {"question": "List all cities in the Northern California Region.", "sql": "SELECT city FROM geographic WHERE region = 'northern california'", "source_tables": ["geographic"]}, "evidence": ""}
{"sample_id": 1702, "db_id": "restaurant", "final": {"question": "What does the one and only 24-hour diner's name?", "sql": "SELECT label FROM generalinfo WHERE food_type = '24 hour diner'", "source_tables": ["generalinfo"]}, "evidence": "24-hour diner refers to food_type = '24 hour diner'; diner name refers to label"}
{"sample_id": 1680, "db_id": "restaurant", "final": {"question": "In which regions are there no African food restaurants?", "sql": "SELECT DISTINCT T2.region FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.food_type != 'african'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "no African food restaurants refers to food_type <> 'african'"}
{"sample_id": 1777, "db_id": "restaurant", "final": {"question": "How many Indian restaurants are there in the Los Angeles area?", "sql": "SELECT COUNT(T1.city) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'indian' AND T1.region = 'los angeles area'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "Indian restaurant refers to food_type = 'indian'; the Los Angeles area refers to region = 'los angeles area'"}
{"sample_id": 1676, "db_id": "restaurant", "final": {"question": "List by its ID number all restaurants on 11th Street in Oakland.", "sql": "SELECT id_restaurant FROM location WHERE city = 'oakland' AND street_name = '11th street'", "source_tables": ["location"]}, "evidence": "11th Street refers to street_name = '11th street'; Oakland refers to city = 'oakland'; ID number of restaurant refers to id_restaurant\n\n"}
{"sample_id": 1758, "db_id": "restaurant", "final": {"question": "Among the bakeries, what is total number of bakery located at University Avenue, Palo Alto?", "sql": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.food_type = 'bakery' AND T2.city = 'palo alto' AND T1.street_name = 'university ave.'", "source_tables": ["location", "generalinfo"]}, "evidence": "bakery refers to food_type = 'bakery'; University Avenue refers to street_name = 'university ave.'; Palo Alto refers to city = 'palo alto'"}
{"sample_id": 1721, "db_id": "restaurant", "final": {"question": "How many restaurants have more than 4 star reviews?", "sql": "SELECT COUNT(id_restaurant) AS cnt FROM generalinfo WHERE review > 4", "source_tables": ["generalinfo"]}, "evidence": "more than 4 star review refers to review > 4"}
{"sample_id": 1705, "db_id": "restaurant", "final": {"question": "Please list all of the street names in Clayton City.", "sql": "SELECT street_name FROM location WHERE city = 'Clayton'", "source_tables": ["location"]}, "evidence": ""}
{"sample_id": 1745, "db_id": "restaurant", "final": {"question": "Please indicate which labels have the city located in Santa Cruz.", "sql": "SELECT T1.label FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'Santa Cruz county'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "Santa Cruz refers to county = 'Santa Cruz county'"}
{"sample_id": 1698, "db_id": "restaurant", "final": {"question": "What percentage of restaurants in Monterey County have Mexican food?", "sql": "SELECT CAST(SUM(IIF(T2.food_type = 'mexican', 1, 0)) AS REAL) * 100 / COUNT(T2.id_restaurant) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.county = 'monterey county'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "Mexican food refers to food_type = 'mexican'; percentage = divide(count(id_restaurant where food_type = 'mexican'), count(id_restaurant)) where county = 'monterey county' * 100%"}
{"sample_id": 1716, "db_id": "restaurant", "final": {"question": "What is the name of the restaurant that is located in El Dorado County, Lake Tahoe region?", "sql": "SELECT T2.label FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'lake tahoe' AND T1.county = 'el dorado county'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "restaurant name refers to label"}
{"sample_id": 1773, "db_id": "restaurant", "final": {"question": "Which county in northern California has the highest number of cities?", "sql": "SELECT county FROM geographic WHERE region = 'northern california' GROUP BY county ORDER BY COUNT(city) DESC LIMIT 1", "source_tables": ["geographic"]}, "evidence": "northern California refers to region = 'northern california'; the highest number of cities refers to max(count(city))"}
{"sample_id": 1683, "db_id": "restaurant", "final": {"question": "What type of food is served at the restaurant located at 3140, Alpine Road at San Mateo County?", "sql": "SELECT T2.food_type FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant INNER JOIN geographic AS T3 ON T2.city = T3.city WHERE T3.County = 'san mateo county' AND T1.street_name = 'alpine rd' AND T1.street_num = 3140", "source_tables": ["location", "geographic", "generalinfo"]}, "evidence": "3140 Alpine Road at San Mateo County refers to street_num = 3140 AND street_name = 'alpine rd' AND County = 'san mateo county'; type of food refers to food_type"}
{"sample_id": 1986, "db_id": "soccer_2016", "final": {"question": "Which is the country of the city named \"Rajkot\"?", "sql": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN city AS T2 ON T1.Country_Id = T2.Country_Id WHERE city_name = 'Rajkot'", "source_tables": ["city", "country"]}, "evidence": "city named \"Rajkot\" refers to city_name = 'Rajkot';"}
{"sample_id": 2028, "db_id": "soccer_2016", "final": {"question": "How many matches did team Mumbai Indians win in 2008?", "sql": "SELECT COUNT(T.Match_Id) FROM ( SELECT T2.Match_Id FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Player_Match AS T3 ON T1.Team_Id = T3.Team_Id WHERE T1.Team_Name = 'Mumbai Indians' AND T2.Match_Date LIKE '2008%' GROUP BY T2.Match_Id ) T", "source_tables": ["match", "player_match", "team"]}, "evidence": "team Mumbai Indians refers to Team_Name = 'Mumbai Indians'; in 2008 refers to Match_Date like '2008%'"}
{"sample_id": 1811, "db_id": "soccer_2016", "final": {"question": "Who was the man of the series in 2013? Give the full name.", "sql": "SELECT T2.Player_Name FROM Season AS T1 INNER JOIN Player AS T2 ON T1.Man_of_the_Series = T2.Player_Id WHERE T1.Season_Year = 2013", "source_tables": ["season", "player"]}, "evidence": "full name refers to Player_Name; in 2013 refers to Season_Year = 2013"}
{"sample_id": 1927, "db_id": "soccer_2016", "final": {"question": "What is the average number of extra runs made as noballs?", "sql": "SELECT AVG(T1.Extra_Runs) FROM Extra_Runs AS T1 INNER JOIN Extra_Type AS T2 ON T1.Extra_Type_Id = T2.Extra_Id WHERE T2.Extra_Name = 'noballs'", "source_tables": ["extra_type", "extra_runs"]}, "evidence": "noballs refers to Extra_Name = 'noballs' ; average number = divide(sum(Extra_Runs), count(Extra_Runs))"}
{"sample_id": 1997, "db_id": "soccer_2016", "final": {"question": "What is the second team's name in the match with the lowest winning margin?", "sql": "SELECT T1.team_name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.team_2 ORDER BY T2.win_margin LIMIT 1", "source_tables": ["match", "team"]}, "evidence": "lowest winning margin refers to MIN(win_margin); team name refers to team_name; second team refers to team_2"}
{"sample_id": 1873, "db_id": "soccer_2016", "final": {"question": "Among the players out in match ID 392187, calculate the percentage of players out by bowl.", "sql": "SELECT CAST(SUM(CASE WHEN T2.Out_Name = 'bowled' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Player_Out) FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T2.Out_Id = T1.Kind_Out WHERE T1.Match_Id = 392187", "source_tables": ["wicket_taken", "out_type"]}, "evidence": "out by bowl refers to Out_Name = 'bowled'; percentage = divide(count(Player_Out where Out_Name = 'bowled'), count(Player_Out)) * 100% where Match_Id = 392187"}
{"sample_id": 1798, "db_id": "soccer_2016", "final": {"question": "What is the bowling skill used by most players?", "sql": "SELECT T1.Bowling_Skill FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T2.Bowling_skill = T1.Bowling_Id GROUP BY T1.Bowling_Skill ORDER BY COUNT(T1.Bowling_Skill) DESC LIMIT 1", "source_tables": ["bowling_style", "player"]}, "evidence": "bowling skill used by most players refers to max(count(Bowling_Skill))"}
{"sample_id": 1800, "db_id": "soccer_2016", "final": {"question": "For how many times has SC Ganguly played as team captain in a match?", "sql": "SELECT SUM(CASE WHEN T3.Role_Desc = 'Captain' THEN 1 ELSE 0 END) FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id WHERE T1.Player_Name = 'SC Ganguly'", "source_tables": ["rolee", "player_match", "player"]}, "evidence": "SC Ganguly refers to Player_Name = 'SC Ganguly'; team captain refers to Role_Desc = 'Captain'"}
{"sample_id": 1984, "db_id": "soccer_2016", "final": {"question": "How many matches are there in 2008?", "sql": "SELECT COUNT(Match_Id) FROM \"Match\" WHERE Match_Date LIKE '2008%'", "source_tables": ["match"]}, "evidence": "in 2008 refers to Match_Date like '2008%'"}
{"sample_id": 1971, "db_id": "soccer_2016", "final": {"question": "Provide the players' names in both teams of the match that was held in June 2014.", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id WHERE SUBSTR(T3.Match_Date, 1, 4) = '2014' AND SUBSTR(T3.Match_Date, 7, 1) = '6' LIMIT 2", "source_tables": ["match", "player_match", "player"]}, "evidence": "held in June 2014 refers to SUBSTR(Match_Date, 7, 1) = 6 and SUBSTR(Match_Date, 1, 4) = 2014"}
{"sample_id": 1953, "db_id": "soccer_2016", "final": {"question": "Who is the player who received the man of the match award during the last match of Season 9?", "sql": "SELECT T1.Player_name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match WHERE T2.Season_Id = 9 ORDER BY T2.Match_Date DESC LIMIT 1", "source_tables": ["match", "player"]}, "evidence": "Who refers to Player_Name; last match of Season 9 refers to max(Match_Date) where Season_Id = 9"}
{"sample_id": 1789, "db_id": "soccer_2016", "final": {"question": "For how many times has player no.41 won the \"man of the match\" award?", "sql": "SELECT COUNT(Match_Id) FROM \"Match\" WHERE Man_of_the_Match = 41", "source_tables": ["match"]}, "evidence": "player no.41 won the \"man of the match\" refers to Man_of_the_Match = 41"}
{"sample_id": 1961, "db_id": "soccer_2016", "final": {"question": "Which country is the youngest player from?", "sql": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN Player AS T2 ON T1.Country_Id = T2.Country_Name ORDER BY T2.DOB DESC LIMIT 1", "source_tables": ["player", "country"]}, "evidence": "country refers to Country_Name; youngest player refers to max(DOB)"}
{"sample_id": 1994, "db_id": "soccer_2016", "final": {"question": "What is the average winning margin of the matches held in Newlands?", "sql": "SELECT AVG(T1.win_margin) FROM Match AS T1 INNER JOIN Venue AS T2 ON T1.venue_id = T2.venue_id WHERE T2.venue_name = 'Newlands'", "source_tables": ["match", "venue"]}, "evidence": "average winning margin refers to avg(win_margin); held in Newlands refers to venue_name = 'Newlands'"}
{"sample_id": 1808, "db_id": "soccer_2016", "final": {"question": "Give the name of venue for the game with a win margin of 138 points.", "sql": "SELECT T2.Venue_Name FROM \"Match\" AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T1.Win_Margin = 138", "source_tables": ["match", "venue"]}, "evidence": "name of venue refers to Venue_Name; a win margin of 138 points refers to Win_Margin = 138"}
{"sample_id": 1844, "db_id": "soccer_2016", "final": {"question": "Provide the winning team's name in the match with the point of winning margin of 7 on May 7, 2009.", "sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T2.Match_Date = '2009-05-07' AND T2.Win_Margin = 7", "source_tables": ["match", "team"]}, "evidence": "the winning team refers to Team_Id = Match_Winner; the point of winning margin of 7 refers to Win_Margin = 7; on May 7 2009 refers to Match_Date = '2009-05-07'"}
{"sample_id": 1977, "db_id": "soccer_2016", "final": {"question": "Which bowling skills did the players from Zimbabwea have?", "sql": "SELECT T1.Bowling_skill FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T1.Bowling_Id = T2.Bowling_skill INNER JOIN Country AS T3 ON T2.Country_Name = T3.Country_Id WHERE T3.Country_Name = 'Zimbabwea'", "source_tables": ["bowling_style", "country", "player"]}, "evidence": "Zimbabwea refers to Country_Name = 'Zimbabwea';"}
{"sample_id": 1918, "db_id": "soccer_2016", "final": {"question": "Which teams have had a player awarded the Purple Cap and another with the Orange Cap in the same season?", "sql": "SELECT T5.Team_Name, T1.Orange_Cap, T1.Purple_Cap FROM Season AS T1 INNER JOIN Match AS T2 ON T1.Season_Id = T2.Season_Id INNER JOIN Player_Match AS T3 ON T2.Match_Id = T3.Match_Id INNER JOIN Player AS T4 ON T3.Player_Id = T4.Player_Id INNER JOIN Team AS T5 ON T3.Team_Id = T5.Team_Id GROUP BY T5.Team_Name, T1.Orange_Cap, T1.Purple_Cap", "source_tables": ["season", "match", "player", "team", "player_match"]}, "evidence": ""}
{"sample_id": 1967, "db_id": "soccer_2016", "final": {"question": "How many matches were held in 2011?", "sql": "SELECT COUNT(Match_Id) FROM \"Match\" WHERE Match_Date LIKE '2011%'", "source_tables": ["match"]}, "evidence": "held in 2011 refers to Match_Date like '2011%';"}
{"sample_id": 1793, "db_id": "soccer_2016", "final": {"question": "What is the bowling skill of SC Ganguly?", "sql": "SELECT T1.Bowling_Skill FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T2.Bowling_skill = T1.Bowling_Id WHERE T2.Player_Name = 'SC Ganguly'", "source_tables": ["bowling_style", "player"]}, "evidence": "SC Ganguly refers to Player_Name = 'SC Ganguly'"}
{"sample_id": 1913, "db_id": "soccer_2016", "final": {"question": "How many players are older than Gurkeerat Singh player?", "sql": "SELECT SUM(CASE WHEN DOB < '1990-06-29' THEN 1 ELSE 0 END) FROM Player WHERE Player_Name != 'Gurkeerat Singh'", "source_tables": ["player"]}, "evidence": "older than Gurkeerat Singh player refers to DOB ! = 'Gurkeerat Singh' and DOB < '1990-06-29'"}
{"sample_id": 1897, "db_id": "soccer_2016", "final": {"question": "Among the players, what percentage are both captain and keeper?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Role_Desc = 'CaptainKeeper' THEN 1 ELSE 0 END) AS REAL) * 100 / TOTAL(T1.Player_Id) FROM Player_Match AS T1 INNER JOIN Rolee AS T2 ON T1.Role_Id = T2.Role_Id", "source_tables": ["rolee", "player_match"]}, "evidence": "captain and keeper refers to Role_Desc = 'CaptainKeeper'; percentage = divide(count(Player_Id) when Role_Desc = 'CaptainKeeper', count(Player_Id)) as percentage"}
{"sample_id": 2020, "db_id": "soccer_2016", "final": {"question": "Where did SB Joshi come from?", "sql": "SELECT T2.Country_Name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_ID WHERE T1.Player_Name = 'SB Joshi'", "source_tables": ["country", "player"]}, "evidence": "SB Joshi refers to Player_Name = 'SB Joshi'; where the player come from refers to Country_Name"}
{"sample_id": 1870, "db_id": "soccer_2016", "final": {"question": "Who was the captain of the winning team in the match held on 1st June 2008?", "sql": "SELECT T3.Player_Name FROM Player_Match AS T1 INNER JOIN Match AS T2 ON T2.Match_Id = T1.Match_Id INNER JOIN Player AS T3 ON T3.Player_Id = T1.Player_Id INNER JOIN Rolee AS T4 ON T4.Role_Id = T1.Role_Id WHERE T2.Match_Date = '2008-06-01' AND T4.Role_Desc = 'Captain' AND T2.Match_Winner = T1.Team_Id", "source_tables": ["rolee", "match", "player_match", "player"]}, "evidence": "player's name refers to Player_Name; captain refers to Role_Desc = 'Captain'; the winning team refers to Match_Winner = Team_Id; on 1st June 2008 refers to Match_Date = '2008-06-01'"}
{"sample_id": 1848, "db_id": "soccer_2016", "final": {"question": "Among the matches held in 2015, who is the winning team in the match ID 829768?", "sql": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Match_Winner WHERE T1.Match_Date LIKE '2015%' AND T1.Match_Id = 829768", "source_tables": ["match", "team"]}, "evidence": "in 2015 refers to Match_Date LIKE '2015%'; the winning team refers to Team_Id = Match_Winner; match ID 829768 refers to Match_Id = 829768"}
{"sample_id": 2037, "db_id": "soccer_2016", "final": {"question": "What is the total number of players born between 1970 to 1975?", "sql": "SELECT COUNT(Player_Id) FROM Player WHERE strftime('%Y', DOB) BETWEEN '1970' AND '1975'", "source_tables": ["player"]}, "evidence": "born between 1970 to 1975 refers to strftime('%Y',DOB) between '1970' and '1975'"}
{"sample_id": 1964, "db_id": "soccer_2016", "final": {"question": "Provide the complete name of the venue, city and country where the last match was held.", "sql": "SELECT T1.Venue_Name, T2.City_Name, T3.Country_Name FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id INNER JOIN Country AS T3 ON T2.Country_Id = T3.Country_Id INNER JOIN Match AS T4 ON T1.Venue_Id = T4.Venue_Id ORDER BY T4.Match_Date DESC LIMIT 1", "source_tables": ["city", "match", "country", "venue"]}, "evidence": "name of the venue, city and country refers to Venue_Name and City_Name and Country_Name; last match refers to max(Match_Date)"}
{"sample_id": 2040, "db_id": "soccer_2016", "final": {"question": "Among the matches held in St. George's Park, give the match ID of the match with the highest winning margin points.", "sql": "SELECT T2.Match_Id FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.venue_id = T2.venue_id WHERE T1.Venue_Name = 'St George''s Park' ORDER BY T2.Win_Margin DESC LIMIT 1", "source_tables": ["match", "venue"]}, "evidence": "held in St. George's Park refers to Venue_Name = 'St George''s Park'; highest winning margin points refers to MAX(Win_Margin)"}
{"sample_id": 1794, "db_id": "soccer_2016", "final": {"question": "Among the players who use the right hand as their batting hand, how many of them were born after 1985?", "sql": "SELECT SUM(CASE WHEN SUBSTR(T1.DOB, 1, 4) > 1985 THEN 1 ELSE 0 END) FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id WHERE T2.Batting_Hand = 'Right-hand bat'", "source_tables": ["batting_style", "player"]}, "evidence": "right hand as batting hand refers to Batting_Hand = 'Right-hand bat'; born after 1985 refers to SUBSTR(DOB, 1, 4) > 1985"}
{"sample_id": 1900, "db_id": "soccer_2016", "final": {"question": "What percentage of players have Legbreak skill?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Bowling_skill = ' Legbreak' THEN 1 ELSE 0 END) AS REAL) * 100 / TOTAL(T1.Player_Id) FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id", "source_tables": ["bowling_style", "player"]}, "evidence": "Legbreak skill refers to Bowling_skill = 'Legbreak' ; percentage = divide(sum(Player_Id) when Bowling_skill = 'Legbreak', count(Player_Id)) as percentage"}
{"sample_id": 2018, "db_id": "soccer_2016", "final": {"question": "Which teams did SC Ganguly join in season year 2008?", "sql": "SELECT T5.Team_Name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match INNER JOIN Player_Match AS T3 ON T3.Player_Id = T1.Player_Id INNER JOIN Season AS T4 ON T2.Season_Id = T4.Season_Id INNER JOIN Team AS T5 ON T3.Team_Id = T5.Team_Id WHERE T4.Season_Year = 2008 AND T1.Player_Name = 'SC Ganguly' GROUP BY T5.Team_Name", "source_tables": ["season", "match", "player", "team", "player_match"]}, "evidence": "SC Ganguly refers to Player_Name = 'SC Ganguly'; in season year 2008 refers to Season_Year = 2008"}
{"sample_id": 2027, "db_id": "soccer_2016", "final": {"question": "How many times did SC Ganguly be the man of the match?", "sql": "SELECT COUNT(T2.Man_of_the_Match) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match INNER JOIN Player_Match AS T3 ON T3.Player_Id = T1.Player_Id WHERE T1.Player_Name = 'SC Ganguly'", "source_tables": ["match", "player_match", "player"]}, "evidence": "SC Ganguly refers to Player_Name = 'SC Ganguly'"}
{"sample_id": 1989, "db_id": "soccer_2016", "final": {"question": "Give the name of the team of T Kohli in the match ID 335989.", "sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Player_Match AS T2 ON T1.Team_Id = T2.Team_Id INNER JOIN Player AS T3 ON T2.Player_Id = T3.Player_Id WHERE T2.match_id = 335989 AND T3.player_name = 'T Kohli'", "source_tables": ["player", "player_match", "team"]}, "evidence": "team of T Kohli refers to player_name = 'T Kohli';"}
{"sample_id": 1859, "db_id": "soccer_2016", "final": {"question": "List the players' names who were born in 1971.", "sql": "SELECT Player_name FROM Player WHERE DOB LIKE '1971%'", "source_tables": ["player"]}, "evidence": "players' name refers to Player_name; born in 1971 refers to DOB LIKE '1971%'"}
{"sample_id": 1792, "db_id": "soccer_2016", "final": {"question": "Which country is the oldest player from?", "sql": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN Player AS T2 ON T2.Country_Name = T1.Country_Id WHERE T2.Country_Name IS NOT NULL ORDER BY T2.DOB LIMIT 1", "source_tables": ["player", "country"]}, "evidence": "country refers to Country_Name; the oldest refers to min(DOB)"}
{"sample_id": 1795, "db_id": "soccer_2016", "final": {"question": "Please list the names of the players who use the right hand as their batting hand and are from Australia.", "sql": "SELECT T2.Player_Name FROM Country AS T1 INNER JOIN Player AS T2 ON T2.Country_Name = T1.Country_id INNER JOIN Batting_Style AS T3 ON T2.Batting_hand = T3.Batting_Id WHERE T1.Country_Name = 'Australia' AND T3.Batting_Hand = 'Right-hand bat'", "source_tables": ["player", "batting_style", "country"]}, "evidence": "name of player refers to Player_Name; right hand as batting hand refers to Batting_Hand = 'Right-hand bat'; Australia refers to Country_Name = 'Australia'"}
{"sample_id": 1920, "db_id": "soccer_2016", "final": {"question": "How many players bat with their left hands?", "sql": "SELECT SUM(CASE WHEN T2.Batting_hand = 'Left-hand bat' THEN 1 ELSE 0 END) FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id", "source_tables": ["batting_style", "player"]}, "evidence": "bat with their left hands refers to Batting_hand = 'Left-hand bat'"}
{"sample_id": 1909, "db_id": "soccer_2016", "final": {"question": "What is the difference in the average number of players out by lbw and runout in the matches?", "sql": "SELECT AVG(T1.Player_Out) FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T1.Kind_Out = T2.Out_Id WHERE T2.Out_Name = 'lbw'", "source_tables": ["wicket_taken", "out_type"]}, "evidence": "out by lbw refers to Out_Id = 4; runout refers to Out_Id = 3; average out by lbw refers to\u00a0 avg(Player_Out when Out_Id = 4); average out by runout refers to\u00a0 avg(Player_Out when Out_Id = 3)"}
{"sample_id": 1847, "db_id": "soccer_2016", "final": {"question": "What is the total number of won matches of the team named \"Pune Warriors\"?", "sql": "SELECT SUM(CASE WHEN T2.Team_Name = 'Pune Warriors' THEN 1 ELSE 0 END) FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Match_Winner", "source_tables": ["match", "team"]}, "evidence": "the team named \"Pune Warriors\" refers to Team_Name = 'Pune Warriors'; the total number of won matches = count(Team_Name where Team_Id = Match_Winner)"}
{"sample_id": 1890, "db_id": "soccer_2016", "final": {"question": "Give the player id of the player who was at the non-striker end for the most number of balls in the match 501219.", "sql": "SELECT Ball_Id FROM Ball_by_Ball WHERE Non_Striker = Ball_Id ORDER BY Ball_Id DESC LIMIT 1", "source_tables": ["ball_by_ball"]}, "evidence": "most number of balls refers to max(Ball_Id); match 501219 refers to Match_Id = 501219;\nplayer id also refers to non_striker or ball_id"}
{"sample_id": 1835, "db_id": "soccer_2016", "final": {"question": "When did Chennai Super Kings play its first match?", "sql": "SELECT Match_Date FROM \"Match\" WHERE team_1 = ( SELECT Team_Id FROM Team WHERE Team_Name = 'Chennai Super Kings' ) OR Team_2 = ( SELECT Team_Id FROM Team WHERE Team_Name = 'Chennai Super Kings' ) ORDER BY Match_Date ASC LIMIT 1", "source_tables": ["match", "team"]}, "evidence": "match date refers to Match_Date; Chennai Super Kings refers to Team_Name = 'Chennai Super Kings'; first match refers to min(Match_Date)"}
{"sample_id": 1958, "db_id": "soccer_2016", "final": {"question": "How many matches did Rajasthan Royals play in Season 8?", "sql": "SELECT SUM(CASE WHEN T1.Season_Id = 8 THEN 1 ELSE 0 END) FROM \"Match\" AS T1 INNER JOIN Team AS T2 ON T1.Team_1 = T2.Team_Id OR T1.Team_2 = T2.Team_Id WHERE T2.Team_Name = 'Rajasthan Royals'", "source_tables": ["match", "team"]}, "evidence": " Season 8 refers to Season_Id = 8"}
{"sample_id": 1905, "db_id": "soccer_2016", "final": {"question": "Which city hosted the least number of no-result matches?", "sql": "SELECT T4.City_Name FROM \"Match\" AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id INNER JOIN Venue AS T3 ON T1.Venue_Id = T3.Venue_Id INNER JOIN City AS T4 ON T3.City_Id = T4.City_Id WHERE T2.Win_Type = 'NO Result' GROUP BY T4.City_Id ORDER BY COUNT(T2.Win_Type) ASC LIMIT 1", "source_tables": ["win_by", "city", "match", "venue"]}, "evidence": "city refers to City_Name; no-result matches refers to Win_type = 'NoResult'; least number refers to min(count(Win_type = 'NoResult'))"}
{"sample_id": 1892, "db_id": "soccer_2016", "final": {"question": "What are the average extra runs given in the second innings of every match?", "sql": "SELECT AVG(Innings_No) FROM Extra_Runs WHERE Innings_No = 2", "source_tables": ["extra_runs"]}, "evidence": "second innings refers to Innings_No = 2; average extra runs = divide(sum(Extra_Runs), count(Innings_No)) when Innings_No = 2"}
{"sample_id": 1929, "db_id": "soccer_2016", "final": {"question": "How many players were born before 10/16/1975, and have a bowling skill of less than 3?", "sql": "SELECT COUNT(*) FROM Player WHERE DOB < '1975-10-16' AND Bowling_skill < 3", "source_tables": ["player"]}, "evidence": "born before 10/16/1975 refers to DOB < 1975-10-16; bowling skill of less than 3 refers to Bowling_skill < 3"}
{"sample_id": 1908, "db_id": "soccer_2016", "final": {"question": "Of the matches that were won by runs by team 1, what percentage have team 1 won the toss and decided to field?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.Team_1 = T1.Match_Winner = T1.Toss_Winner THEN 1 ELSE 0 END) AS REAL) * 100 / TOTAL(T1.Team_1) FROM \"Match\" AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id INNER JOIN Toss_Decision AS T3 ON T1.Toss_Decide = T3.Toss_Id WHERE T3.Toss_Name = 'field' AND T2.Win_Type = 'runs'", "source_tables": ["win_by", "match", "toss_decision"]}, "evidence": "won by runs refers to Win_Type = 'runs'; won the toss and decided to field refers to Toss_Winner and Toss_Name = 'field'; percentage = divide(count(Team_1) when Match_Winner = Team_1 and Toss_Winner = Team_1, count(Team_1)) as percentage"}
{"sample_id": 1960, "db_id": "soccer_2016", "final": {"question": "What are the names of the venues in Abu Dhabi?", "sql": "SELECT T1.Venue_Name FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id WHERE T2.City_Name = 'Abu Dhabi'", "source_tables": ["city", "venue"]}, "evidence": "names of the venues refers to Venue_Name; Abu Dhabi refers to City_Name = 'Abu Dhabi'"}
{"sample_id": 1876, "db_id": "soccer_2016", "final": {"question": "List down the match ID of matches that the \"man of the match\" award was given to BB McCullum.", "sql": "SELECT T1.Match_Id FROM Match AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match WHERE T2.Player_Name = 'BB McCullum'", "source_tables": ["match", "player"]}, "evidence": ""}
{"sample_id": 1992, "db_id": "soccer_2016", "final": {"question": "Among the matches played by Royal Challengers Bangalore, what is the match ID of the match with the highest winning margin?", "sql": "SELECT T2.match_id FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner WHERE T1.team_name = 'Royal Challengers Bangalore' AND T2.match_date LIKE '2012%' ORDER BY T2.win_margin DESC LIMIT 1", "source_tables": ["match", "team"]}, "evidence": "Royal Challengers Bangalore refers to team_name = 'Royal Challengers Bangalore'; highest winning margin refers to MAX(win_margin)"}
{"sample_id": 2031, "db_id": "soccer_2016", "final": {"question": "What is the role of W Jaffer in season year 2012?", "sql": "SELECT T4.Role_Desc FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id INNER JOIN Rolee AS T4 ON T2.Role_Id = T4.Role_Id INNER JOIN Season AS T5 ON T3.Season_Id = T5.Season_Id WHERE T1.Player_name = 'W Jaffer' AND T5.Season_Year = 2012", "source_tables": ["rolee", "season", "match", "player", "player_match"]}, "evidence": "W Jaffer refers to Player_name = 'W Jaffer'; in season year 2012 refers to Season_Year = 2012; role refers to Role_Desc"}
{"sample_id": 1980, "db_id": "soccer_2016", "final": {"question": "How many matches did the Sunrisers Hyderabad team win in 2013?", "sql": "SELECT SUM(CASE WHEN Match_Date LIKE '2013%' THEN 1 ELSE 0 END) FROM \"Match\" AS T1 INNER JOIN Team AS T2 ON T1.Match_Winner = T2.Team_Id WHERE T2.Team_Name = 'Sunrisers Hyderabad'", "source_tables": ["match", "team"]}, "evidence": "Sunrisers Hyderabad team refers to Team_Name = 'Sunrisers Hyderabad'; in 2013 refers to Match_Date like '2013%';"}
{"sample_id": 2080, "db_id": "music_tracker", "final": {"question": "How many singles were released between 1979 and 1981 labeled as \"soul\"?", "sql": "SELECT COUNT(T2.tag) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'soul' AND T1.groupYear BETWEEN 1979 AND 1981 AND T1.releaseType LIKE 'single'", "source_tables": ["torrents", "tags"]}, "evidence": "releaseType = 'single'; between 1979 and 1981 refers to groupYear between 1979 and 1981; tag = 'soul';"}
{"sample_id": 2061, "db_id": "music_tracker", "final": {"question": "Among the releases that were released in 2000, how many of them were released as an album and tagged \"pop\"?", "sql": "SELECT COUNT(T1.groupName) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'pop' AND T1.releaseType = 'album' AND T1.groupYear = 2000", "source_tables": ["torrents", "tags"]}, "evidence": "groupYear = 2000; album refers to releaseType;"}
{"sample_id": 2075, "db_id": "music_tracker", "final": {"question": "Among the artists with the id from 10 to 30. Which artist released the product with the tag \"funk\" in 1980?", "sql": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'funk' AND T1.groupYear = 1980 AND T1.id BETWEEN 10 AND 30", "source_tables": ["torrents", "tags"]}, "evidence": "id from 10 to 30 refers to id between 10 and 30; groupYear = 1980;"}
{"sample_id": 2062, "db_id": "music_tracker", "final": {"question": "What are the average download times for the a release tagged \"1980s\"?", "sql": "SELECT CAST(SUM(T1.totalSnatched) AS REAL) / COUNT(T2.tag) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = '1980s'", "source_tables": ["torrents", "tags"]}, "evidence": "AVG(totalSnatched where tag = '1980s');"}
{"sample_id": 2074, "db_id": "music_tracker", "final": {"question": "Which artist has released the most singles with the tag \"soul\"?", "sql": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'soul' AND T1.releaseType = 'single' GROUP BY T1.artist ORDER BY COUNT(T1.releaseType) DESC LIMIT 1", "source_tables": ["torrents", "tags"]}, "evidence": "the most singles refer to MAX(COUNT(releaseType = 'single'));"}
{"sample_id": 2054, "db_id": "music_tracker", "final": {"question": "How many times has the release \"city funk\" been downloaded?", "sql": "SELECT totalSnatched FROM torrents WHERE groupName LIKE 'city funk'", "source_tables": ["torrents"]}, "evidence": "groupName = 'city funk'; downloaded refers to totalSnatched;"}
{"sample_id": 2070, "db_id": "music_tracker", "final": {"question": "Which artist released singles between 1980 to 1982?", "sql": "SELECT artist FROM torrents WHERE groupYear BETWEEN 1980 AND 1982 AND releaseType LIKE 'single'", "source_tables": ["torrents"]}, "evidence": "releaseType = 'single'; between 1980 to 1982 refers to groupYear between 1980 and 1982;"}
{"sample_id": 2087, "db_id": "music_tracker", "final": {"question": "From 1980 to 2000, which artist had the most disco releases?", "sql": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear BETWEEN 1980 AND 2000 AND T2.tag LIKE 'disco' GROUP BY T1.artist ORDER BY COUNT(T2.tag) DESC LIMIT 1", "source_tables": ["torrents", "tags"]}, "evidence": "From 1980 to 2000 refers to groupYear between 1980 and 2000; tag = 'disco'; the most releases refer to MAX(COUNT(id));"}
{"sample_id": 2078, "db_id": "music_tracker", "final": {"question": "Among id from 10 to 50. Which artist tagged as \"new.york\" has the most downloads?", "sql": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.id BETWEEN 10 AND 50 AND T2.tag LIKE 'new.york' ORDER BY T1.totalSnatched DESC LIMIT 1", "source_tables": ["torrents", "tags"]}, "evidence": "Among id from 10 to 50 refers to id between 10 and 50; tag = 'new.york'; the most downloads refer to MAX(totalSnatched);"}
{"sample_id": 2136, "db_id": "world_development_indicators", "final": {"question": "What percentage of countries in South Asia have the Life expectancy at birth, female (years) greater than 50?", "sql": "SELECT CAST(SUM(CASE WHEN T2.value > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.CountryCode) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Region = 'South Asia' AND T2.IndicatorName = 'Life expectancy at birth, female (years)'", "source_tables": ["country", "indicators"]}, "evidence": "South Asia is the name of the region; IndicatorName = 'Life expectancy at birth, female (years)'; greater than 50 refers to Value>50; DIVIDE(COUNT(CountryCode where IndicatorName = 'Life expectancy at birth, female (years)'; Value>50; Region = 'South Asia'), COUNT(CountryCode where Region = 'South Asia')) as percentage;"}
{"sample_id": 2169, "db_id": "world_development_indicators", "final": {"question": "Write down the description and series code of Benin in year 2005.", "sql": "SELECT T2.Description, T2.Seriescode FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.TableName = 'Benin' AND T2.Year = 'YR2005'", "source_tables": ["footnotes", "country"]}, "evidence": "Benin is the short name of the country; year 2005 refers to Year = 'YR2005';"}
{"sample_id": 2236, "db_id": "world_development_indicators", "final": {"question": "Which country's indicator for Adolescent fertility rate is the highest in 1960, please give its special notes.", "sql": "SELECT DISTINCT T1.CountryCode, T1.SpecialNotes FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Value = ( SELECT Value FROM Indicators WHERE IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND Year = 1960 ORDER BY Value DESC LIMIT 1 )", "source_tables": ["country", "indicators"]}, "evidence": "indicator for Adolescent fertility rate is the highest refers to max(value where IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'); in 1960 refers to year = '1960'"}
{"sample_id": 2110, "db_id": "world_development_indicators", "final": {"question": "List down the series codes in which the topic is about Environment: Emissions and the license type is restricted. Please include their alpha code.", "sql": "SELECT SeriesCode FROM Series WHERE Topic = 'Environment: Emissions' AND LicenseType = 'Restricted'", "source_tables": ["series"]}, "evidence": ""}
{"sample_id": 2193, "db_id": "world_development_indicators", "final": {"question": "Name the country in which the topic is about Poverty: Shared Prosperity. Indicate the long name of the country.", "sql": "SELECT DISTINCT T1.LongName FROM Country AS T1 INNER JOIN footnotes AS T2 ON T1.CountryCode = T2.Countrycode INNER JOIN Series AS T3 ON T2.Seriescode = T3.SeriesCode WHERE T3.Topic = 'Poverty: Shared prosperity'", "source_tables": ["footnotes", "series", "country"]}, "evidence": ""}
{"sample_id": 2216, "db_id": "world_development_indicators", "final": {"question": "What are the full names of the countries in South Asia that belongs to the low income group?", "sql": "SELECT LongName FROM Country WHERE IncomeGroup = 'Low income' AND Region = 'South Asia'", "source_tables": ["country"]}, "evidence": "full name refers to longname; the countries in South Asia refer to region = 'South Asia'; belongs to the low income group refers to incomegroup = 'Low income'"}
{"sample_id": 2208, "db_id": "world_development_indicators", "final": {"question": "Please list the full names of any three countries that have their series code with a description of UN Energy Statistics (2014).", "sql": "SELECT DISTINCT T2.LongName FROM CountryNotes AS T1 INNER JOIN Country AS T2 ON T1.Countrycode = T2.CountryCode WHERE T1.Description = 'Sources: UN Energy Statistics (2014)' LIMIT 3", "source_tables": ["countrynotes", "country"]}, "evidence": "full name refers to longname"}
{"sample_id": 2176, "db_id": "world_development_indicators", "final": {"question": "How many footnotes have been made in year 1980 and what are the table names of these countries that made the footnotes?", "sql": "SELECT COUNT(T2.Description) FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Year = 'YR1980' UNION ALL SELECT DISTINCT T1.TableName FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Year = 'YR1980'", "source_tables": ["footnotes", "country"]}, "evidence": "year 1980 refers to Year = 'YR1980';"}
{"sample_id": 2219, "db_id": "world_development_indicators", "final": {"question": "What is the name of the country with the highest percentage of rural population in the overall total population? Indicate the rural population percentage of total population.", "sql": "SELECT countryname, MAX(value) FROM indicators WHERE indicatorname = 'Rural population (% of total population)'", "source_tables": ["indicators"]}, "evidence": "the highest percentage of rural population in the overall total population refers to max(value where indicatorname = 'Rural population (% of total population)')"}
{"sample_id": 2132, "db_id": "world_development_indicators", "final": {"question": "What is the minimum of International migrant stock, total of heavily indebted poor countries?", "sql": "SELECT MIN(T2.Value) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.OtherGroups = 'HIPC' AND T2.IndicatorName = 'International migrant stock, total'", "source_tables": ["country", "indicators"]}, "evidence": "IndicatorName = 'International migrant stock, total'; heavily indebted poor countries referred to by its abbreviated 'HIPC' = OtherGroups; MIN(Value);"}
{"sample_id": 2104, "db_id": "world_development_indicators", "final": {"question": "What is the average adolescent fertility rate of the country whose Alpha2Code is 1A over the years this indicator was calculated.", "sql": "SELECT AVG(T2.Value) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName LIKE 'adolescent fertility rate%'", "source_tables": ["country", "indicators"]}, "evidence": "the average adolescent fertility rate is DIVIDE(SUM(value), SUM(IndicatorName like 'adolescent fertility rate%'))"}
{"sample_id": 2189, "db_id": "world_development_indicators", "final": {"question": "List all the country in East Asia & Pacific region that have more than 2000000 urban population in 1970.", "sql": "SELECT DISTINCT T1.CountryCode FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Year = 1970 AND T1.Region = 'East Asia & Pacific' AND T2.Value > 2000000 AND t2.indicatorname = 'Urban population'", "source_tables": ["country", "indicators"]}, "evidence": "country refers to LongName; have more than 2000000 urban population refers to value where indicatorname = 'Urban population'>2000000; in 1970 refers to year = '1970'"}
{"sample_id": 2133, "db_id": "world_development_indicators", "final": {"question": "Please list the indicator names belonging to Education: Inputs topic in 2000.", "sql": "SELECT DISTINCT T2.IndicatorName FROM Footnotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode WHERE T1.Year = 'YR2000' AND T2.Topic = 'Education: Inputs'", "source_tables": ["footnotes", "series"]}, "evidence": "Year = 'YR2000';"}
{"sample_id": 2168, "db_id": "world_development_indicators", "final": {"question": "State the table name of country with description of \"Covers mainland Tanzania only\".", "sql": "SELECT DISTINCT T1.TableName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Covers mainland Tanzania only.'", "source_tables": ["countrynotes", "country"]}, "evidence": ""}
{"sample_id": 2126, "db_id": "world_development_indicators", "final": {"question": "Which European countries had the highest private expenditure on health in 2005? List the top ten countries in descending order and find the source of the data.", "sql": "SELECT DISTINCT T1.CountryCode, T3.Description FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN CountryNotes AS T3 ON T1.CountryCode = T3.Countrycode WHERE T2.IndicatorName = 'Out-of-pocket health expenditure (% of private expenditure on health)' AND T2.Value > 0 AND T2.year = 2005 ORDER BY T2.Value DESC LIMIT 10", "source_tables": ["countrynotes", "country", "indicators"]}, "evidence": "Year = 2005; private expenditure on health refers to IndicatorName = 'Out-of-pocket health expenditure (% of private expenditure on health)'; the highest refers to MAX(Value); source refers to Description;"}
{"sample_id": 2210, "db_id": "world_development_indicators", "final": {"question": "What is the series code for Germany and what is its description?", "sql": "SELECT T1.Seriescode, T1.Description FROM CountryNotes AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.ShortName = 'Germany'", "source_tables": ["countrynotes", "country"]}, "evidence": "Germany refers to shortname = 'Germany'"}
{"sample_id": 2244, "db_id": "world_development_indicators", "final": {"question": "What's the value of the indicator whose long definition is \"Adolescent fertility rate is the number of births per 1,000 women ages 15-19.\" for the Arab World in 1960?", "sql": "SELECT T1.Value FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName INNER JOIN Country AS T3 ON T1.CountryCode = T3.CountryCode WHERE T2.LongDefinition = 'Adolescent fertility rate is the number of births per 1,000 women ages 15-19.' AND T3.ShortName = 'Arab World' AND T1.Year = 1960", "source_tables": ["series", "country", "indicators"]}, "evidence": "in 1960 refers to Year = 1960; for the Arab World refers to CountryName = 'Arab World'"}
{"sample_id": 2094, "db_id": "world_development_indicators", "final": {"question": "Among the countries with note on the series code SM.POP.TOTL, how many of them are in the low-income group?", "sql": "SELECT COUNT(T1.Countrycode) FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Seriescode = 'SM.POP.TOTL' AND T1.IncomeGroup = 'Low income'", "source_tables": ["countrynotes", "country"]}, "evidence": "countries refer to Countrycode; low-income group refers to incomegroup = 'Low income'; with notes refers to description IS NOT NULL; series code SM.POP.TOTL refers to Seriescode = 'SM.POP.TOTL'"}
{"sample_id": 2101, "db_id": "world_development_indicators", "final": {"question": "Please list the countries that got the footnote \"Data are classified as official aid.\" on the series code DC.DAC.AUSL.CD in 2002.", "sql": "SELECT T1.SHORTNAME FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data are classified as official aid.' AND T2.Seriescode = 'DC.DAC.AUSL.CD' AND T2.Year LIKE '%2002%'", "source_tables": ["footnotes", "country"]}, "evidence": "countries are the Countrycode; footnote refers to Description = 'Data are classified as official aid'"}
{"sample_id": 2114, "db_id": "world_development_indicators", "final": {"question": "Please write down the footnote descriptions of Albania in 1981.", "sql": "SELECT DISTINCT T1.Description FROM FootNotes AS T1 INNER JOIN Country AS T2 ON T1.Countrycode = T2.CountryCode WHERE T1.Year = 'YR1981' AND T2.ShortName = 'Albania'", "source_tables": ["footnotes", "country"]}, "evidence": "Albania is the name of country where Country = 'Albania'"}
{"sample_id": 2212, "db_id": "world_development_indicators", "final": {"question": "What is the subject of the series SP.DYN.AMRT.MA and what does it pertain to?", "sql": "SELECT DISTINCT T1.Topic, T2.Description FROM Series AS T1 INNER JOIN SeriesNotes AS T2 ON T1.SeriesCode = T2.Seriescode WHERE T1.SeriesCode = 'SP.DYN.AMRT.MA'", "source_tables": ["series", "seriesnotes"]}, "evidence": "subject refers to topic; pertain to refers to Description"}
{"sample_id": 2225, "db_id": "world_development_indicators", "final": {"question": "What are the indicator codes for the Republic of Albania in the year 1960?", "sql": "SELECT DISTINCT T1.IndicatorCode FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Year = 1960 AND T2.LongName = 'Republic of Albania'", "source_tables": ["country", "indicators"]}, "evidence": "the Republic of Albania refers to LongName = 'Republic of Albania'; in the year 1960 refers to Year = '1960'"}
{"sample_id": 2206, "db_id": "world_development_indicators", "final": {"question": "What proportion of Sub-Saharan Africa's countries have lower middle incomes?", "sql": "SELECT SUM(CASE WHEN IncomeGroup = 'Lower middle income' THEN 1 ELSE 0 END) * 100.0 / COUNT(CountryCode) persentage FROM Country WHERE Region = 'Sub-Saharan Africa'", "source_tables": ["country"]}, "evidence": "proportion = divide(count(countrycode where incomegroup = 'Low income'), count(countrycode))*100%; Sub-Saharan Africa's countries refers to region = 'Sub-Saharan Africa'; have lower middle incomes refers to incomegroup = 'Low income'"}
{"sample_id": 2117, "db_id": "world_development_indicators", "final": {"question": "List down the World Bank code of the countries whose country note has described \"Data source : Human Mortality Database by University of California, Berkeley, and Max Planck Institute for Demographic Research.\"? Please include their lending category.", "sql": "SELECT DISTINCT T1.Wb2code, T1.LendingCategory FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data source : Human Mortality Database by University of California, Berkeley, and Max Planck Institute for Demographic Research.' AND T1.LendingCategory != ''", "source_tables": ["countrynotes", "country"]}, "evidence": "World Bank code refers to Wb2code; Data source refers to Description"}
{"sample_id": 2159, "db_id": "world_development_indicators", "final": {"question": "List out the name and indicator code of high income: nonOECD countries", "sql": "SELECT DISTINCT T1.CountryCode, T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'High income: nonOECD'", "source_tables": ["country", "indicators"]}, "evidence": "high income: non-OECD' refer to IncomeGroup;"}
{"sample_id": 2217, "db_id": "world_development_indicators", "final": {"question": "What is the indicator code for Mobile Cellular Subscriptions of Brazil?", "sql": "SELECT DISTINCT IndicatorCode FROM Indicators WHERE CountryName = 'Brazil' AND IndicatorName = 'Mobile cellular subscriptions'", "source_tables": ["indicators"]}, "evidence": "Mobile Cellular Subscriptions refers to indicatorname = 'Mobile cellular subscriptions'; Brazil refers to CountryName = 'Brazil'"}
{"sample_id": 2137, "db_id": "world_development_indicators", "final": {"question": "From 1960 to 1965, which country had the highest Death rate, crude (per 1,000 people)?", "sql": "SELECT CountryName FROM Indicators WHERE Year BETWEEN 1960 AND 1965 AND IndicatorName = 'Death rate, crude (per 1,000 people)' ORDER BY Value DESC LIMIT 1", "source_tables": ["indicators"]}, "evidence": "IndicatorName = 'Death rate, crude (per 1,000 people)'; the highest refers to MAX(Value); from 1960 to 1965 refers to Year between '1960' and '1965'; country refers to CountryName;"}
{"sample_id": 2161, "db_id": "world_development_indicators", "final": {"question": "List down 10 country codes and it's short names.", "sql": "SELECT CountryCode, ShortName FROM Country LIMIT 10", "source_tables": ["country"]}, "evidence": ""}
{"sample_id": 2115, "db_id": "world_development_indicators", "final": {"question": "Enumerate the footnote narratives of The Bahamas under the series code SH.DTH.IMRT in the year 1984.", "sql": "SELECT DISTINCT T1.Description FROM FootNotes AS T1 INNER JOIN Country AS T2 ON T1.Countrycode = T2.CountryCode WHERE T1.Year = 'YR1984' AND T2.ShortName = 'The Bahamas' AND T1.Seriescode = 'SH.DTH.IMRT'", "source_tables": ["footnotes", "country"]}, "evidence": "narratives is Description; The Bahamas is the name of the country where Country = 'The Bahamas'"}
{"sample_id": 2174, "db_id": "world_development_indicators", "final": {"question": "Name 5 country codes of country with highest value and state the region of these countries.", "sql": "SELECT DISTINCT T1.CountryCode, T1.Region FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode ORDER BY T2.Value DESC LIMIT 5", "source_tables": ["country", "indicators"]}, "evidence": "with highest value refers to MAX(Value);"}
{"sample_id": 2092, "db_id": "world_development_indicators", "final": {"question": "What's the description of the series code SM.POP.TOTL for Aruba?", "sql": "SELECT T2.Description FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Seriescode = 'SM.POP.TOTL'", "source_tables": ["countrynotes", "country"]}, "evidence": "Aruba is the name of the country where ShortName = 'Aruba'"}
{"sample_id": 2320, "db_id": "movielens", "final": {"question": "How many separate 35 year-old uesers have rated the movie from UK?", "sql": "SELECT COUNT(DISTINCT T2.userid) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid INNER JOIN users AS T3 ON T2.userid = T3.userid WHERE T1.country = 'UK' AND T3.age = 35", "source_tables": ["u2base", "movies", "users"]}, "evidence": "UK is a country"}
{"sample_id": 2273, "db_id": "movielens", "final": {"question": "List down 5 non English adventure movies from UK?", "sql": "SELECT T1.movieid FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'UK' AND T1.genre = 'Adventure' AND T2.isEnglish = 'F' LIMIT 5", "source_tables": ["movies", "movies2directors"]}, "evidence": "not English refers to isEnglish = 'F'; UK is a country"}
{"sample_id": 2290, "db_id": "movielens", "final": {"question": "Which adventure movie has the highest average rating?", "sql": "SELECT T1.movieid FROM movies2directors AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.genre = 'Adventure' GROUP BY T1.movieid ORDER BY AVG(T2.rating) DESC LIMIT 1", "source_tables": ["u2base", "movies2directors"]}, "evidence": ""}
{"sample_id": 2251, "db_id": "movielens", "final": {"question": "Among the movies from France, how many of them are drama?", "sql": "SELECT COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'France' AND T1.genre = 'drama'", "source_tables": ["movies", "movies2directors"]}, "evidence": "France a one country"}
{"sample_id": 2311, "db_id": "movielens", "final": {"question": "Please list director IDs who have the quality of at least 3 and have made at least 2 different genres of movies.", "sql": "SELECT T1.directorid FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality >= 3 GROUP BY T1.directorid HAVING COUNT(T2.movieid) >= 2", "source_tables": ["movies2directors", "directors"]}, "evidence": ""}
{"sample_id": 2337, "db_id": "movielens", "final": {"question": "What is the total average movie directed by the directors who's quality and revenue is 4?", "sql": "SELECT CAST(SUM(CASE WHEN T1.d_quality = 4 AND T1.avg_revenue = 4 THEN 1 ELSE 0 END) AS REAL) / COUNT(T2.movieid) FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid", "source_tables": ["movies2directors", "directors"]}, "evidence": ""}
{"sample_id": 2325, "db_id": "movielens", "final": {"question": "How many different actors have played a role in the highest rating movie?", "sql": "SELECT COUNT(DISTINCT T2.actorid) FROM u2base AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.rating = 5", "source_tables": ["u2base", "movies2actors"]}, "evidence": "highest rating of a movie is 5"}
{"sample_id": 2295, "db_id": "movielens", "final": {"question": "How many drama movie with the rating of 3?", "sql": "SELECT COUNT(DISTINCT T2.movieid) FROM u2base AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T2.genre = 'drama' AND T1.rating = 3", "source_tables": ["u2base", "movies2directors"]}, "evidence": ""}
{"sample_id": 2259, "db_id": "movielens", "final": {"question": "List the id of male users who gave ratings of less than 3 to French movies with running time of 2.", "sql": "SELECT T1.userid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid INNER JOIN users AS T3 ON T1.userid = T3.userid WHERE T2.country = 'France' AND T2.runningtime = 2 AND T1.rating < 3 AND T3.u_gender = 'M'", "source_tables": ["u2base", "movies", "users"]}, "evidence": "Male users mean that u_gender = 'M'; France is a country"}
{"sample_id": 2328, "db_id": "movielens", "final": {"question": "How many 35-year-old female users gave the movie 1711133 a rating of 3?", "sql": "SELECT COUNT(T1.userid) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T2.rating = 3 AND T2.movieid = '1711133' AND T1.age = 35 AND T1.u_gender = 'F'", "source_tables": ["u2base", "users"]}, "evidence": "Female users mean that u_gender = 'F'"}
{"sample_id": 2254, "db_id": "movielens", "final": {"question": "What is the average number of casts of movies that are from the USA?", "sql": "SELECT AVG(T2.cast_num) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'USA'", "source_tables": ["movies2actors", "movies"]}, "evidence": "USA is a country"}
{"sample_id": 2249, "db_id": "movielens", "final": {"question": "List the genres of the movies which actor id 851 is the star.", "sql": "SELECT T2.genre FROM movies2actors AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T1.actorid = T3.actorid WHERE T3.actorid = 851", "source_tables": ["movies2actors", "actors", "movies2directors"]}, "evidence": ""}
{"sample_id": 2318, "db_id": "movielens", "final": {"question": "How many French movies got the highest ranking?", "sql": "SELECT COUNT(movieid) FROM movies WHERE country = 'France' AND movieid IN ( SELECT movieid FROM u2base WHERE rating = ( SELECT MAX(rating) FROM u2base ) )", "source_tables": ["u2base", "movies"]}, "evidence": "France is a country"}
{"sample_id": 2282, "db_id": "movielens", "final": {"question": "For the movies in English that are the oldest, how many of them have the lowest rating?", "sql": "SELECT COUNT(DISTINCT T1.movieid) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.year = 1 AND T2.rating = 1 AND T1.isEnglish = 'T'", "source_tables": ["u2base", "movies"]}, "evidence": "Year contains relative value, higer year value refers to newer date; Year = 4 refers to newest date, Year = 1 refer to oldest date; Lowest rating = 1\uff1bisEnglish = 'T' means English movie"}
{"sample_id": 2329, "db_id": "movielens", "final": {"question": "How many users have rated 1 each for the UK's second newest movies with a running time of 2?", "sql": "SELECT COUNT(T2.userid) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'UK' AND T1.runningtime = 2 AND T2.rating = 1 AND T1.year = 2", "source_tables": ["u2base", "movies"]}, "evidence": "second newest movies refers to year = 2 since year in this database is a relative value, less is the newer"}
{"sample_id": 2278, "db_id": "movielens", "final": {"question": "For the male users no older than 18, how many times have they given the highest rating?", "sql": "SELECT COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 5 AND T2.age < 18 AND T2.u_gender = 'M'", "source_tables": ["u2base", "users"]}, "evidence": "Male users refers to u_gender = 'M'"}
{"sample_id": 2330, "db_id": "movielens", "final": {"question": "How many unique directors with an average earnings of 2 and a quality of 3 have not made comedy films? List them.", "sql": "SELECT DISTINCT T1.directorid FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality = 3 AND T1.avg_revenue = 2 AND T2.genre != 'Comedy'", "source_tables": ["movies2directors", "directors"]}, "evidence": ""}
{"sample_id": 2314, "db_id": "movielens", "final": {"question": "What horror movies have a running time of at least 2? Please list movie IDs.", "sql": "SELECT T1.movieid FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.runningtime >= 2 AND T1.genre = 'Horror'", "source_tables": ["movies", "movies2directors"]}, "evidence": "Higher value of running time means running time is longer"}
{"sample_id": 2265, "db_id": "movielens", "final": {"question": "What are the ID of actors with quality rating of 3 acted in English USA movies?", "sql": "SELECT T2.actorid FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T3.a_quality = 3 AND T1.country = 'USA' AND T1.isEnglish = 'T'", "source_tables": ["movies2actors", "movies", "actors"]}, "evidence": "English movies refers to isEnglish = 'T'; USA is a country"}
{"sample_id": 2351, "db_id": "superstore", "final": {"question": "Please list the names of all the products ordered by Aimee Bixby in 2016.", "sql": "SELECT DISTINCT T3.\"Product Name\" FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Customer Name\" = 'Aimee Bixby' AND STRFTIME('%Y', T2.\"Ship Date\") = '2016'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "ordered by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby'; ordered n 2016 refers to strftime('%Y', \"Order Date\") = '2016';"}
{"sample_id": 2438, "db_id": "superstore", "final": {"question": "Indicate the profit of product Sauder Camden County Barrister Bookcase, Planked Cherry Finish.", "sql": "SELECT DISTINCT T1.Profit FROM south_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.\"Product Name\" = 'Sauder Camden County Barrister Bookcase, Planked Cherry Finish'", "source_tables": ["south_superstore", "product"]}, "evidence": "Sauder Camden County Barrister Bookcase, Planked Cherry Finish' refers to \"Product Name\""}
{"sample_id": 2430, "db_id": "superstore", "final": {"question": "Please list any three orders that caused a loss to the company.", "sql": "SELECT \"Order ID\" FROM central_superstore WHERE Profit < 0 LIMIT 3", "source_tables": ["central_superstore"]}, "evidence": "caused a loss to the company refers to Profit < 0"}
{"sample_id": 2418, "db_id": "superstore", "final": {"question": "Among the customers in South superstore, which customers ordered more than 3 times in 2015? State the name of the customers.", "sql": "SELECT DISTINCT T2.\"Customer Name\" FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE STRFTIME('%Y', T1.\"Order Date\") = '2015' GROUP BY T2.\"Customer Name\" HAVING COUNT(T2.\"Customer Name\") > 3", "source_tables": ["south_superstore", "people"]}, "evidence": "name of the customers refers to Customer_Name; in 2015 refers to \"Order Date\" BETWEEN '2015-01-01' AND '2015-12-31'; more than 3 times refers to count(Order_ID) > 3"}
{"sample_id": 2374, "db_id": "superstore", "final": {"question": "Name the item ordered by Jonathan Doherty with the highest quantity in the East region.", "sql": "SELECT T3.\"Product Name\" FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T2.\"Customer Name\" = 'Jonathan Doherty' AND T2.Region = 'East' ORDER BY T1.Quantity DESC LIMIT 1", "source_tables": ["people", "product", "east_superstore"]}, "evidence": "Jonathan Doherty is the \"Customer Name\"; highest quantity refers to MAX(Quantity); Region = 'East'"}
{"sample_id": 2444, "db_id": "superstore", "final": {"question": "How many orders were made by Alan Barnes in 2015 at the Central superstore?", "sql": "SELECT COUNT(DISTINCT T2.\"Order ID\") FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Alan Barnes' AND STRFTIME('%Y', T2.\"Order Date\") = '2015'", "source_tables": ["people", "central_superstore"]}, "evidence": "in 2015 refers to \"Order Date\" = '2015%'"}
{"sample_id": 2389, "db_id": "superstore", "final": {"question": "Among the products under the office supplies category, what is the product that made the highest sales in the Central region?", "sql": "SELECT T2.\"Product Name\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.Category = 'Office Supplies' AND T2.Region = 'Central' ORDER BY T1.Sales DESC LIMIT 1", "source_tables": ["central_superstore", "product"]}, "evidence": "made the highest sales refers to MAX(Sales)"}
{"sample_id": 2451, "db_id": "superstore", "final": {"question": "Please give the name of customers from the West region that bought exactly 8 items in their purchase.", "sql": "SELECT DISTINCT T2.\"Customer Name\" FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.Quantity = 8 AND T1.Region = 'West'", "source_tables": ["people", "west_superstore"]}, "evidence": "name of customers refers to \"Customer Name\"; bought exactly 8 items refers to Quantity = 8"}
{"sample_id": 2386, "db_id": "superstore", "final": {"question": "Among the customers from Chicago, Illinois, what is the highest quantity of products bought in a single order?", "sql": "SELECT T1.Quantity FROM west_superstore AS T1 INNER JOIN east_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN central_superstore AS T3 ON T3.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN south_superstore AS T4 ON T4.\"Customer ID\" = T3.\"Customer ID\" INNER JOIN people AS T5 ON T5.\"Customer ID\" = T4.\"Customer ID\" WHERE T5.City = 'Chicago' AND T5.State = 'Illinois' ORDER BY T1.Quantity DESC LIMIT 1", "source_tables": ["east_superstore", "central_superstore", "south_superstore", "people", "west_superstore"]}, "evidence": "from Chicago refers to City = 'Chicago'; Illinois refers to State = 'Illinois'; highest quantity refers to max(Quantity)"}
{"sample_id": 2393, "db_id": "superstore", "final": {"question": "How many orders were made by Maxwell Schwartz in 2015?", "sql": "SELECT COUNT(DISTINCT T1.\"Order ID\") FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T2.\"Customer Name\" = 'Maxwell Schwartz' AND STRFTIME('%Y', T1.\"Order Date\") = '2015'", "source_tables": ["people", "east_superstore"]}, "evidence": "Maxwell Schwartz' is the \"Customer Name\"; in 2015 refers to strftime('%Y', \"Order Date\") = '2015';"}
{"sample_id": 2356, "db_id": "superstore", "final": {"question": "For how many times has Aimee Bixby ordered the product Xerox 1952?", "sql": "SELECT COUNT(DISTINCT T2.\"Order ID\") FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Customer Name\" = 'Aimee Bixby' AND T3.\"Product Name\" = 'Xerox 1952'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "Xerox 1952 is a \"Product Name\"; Aimee Bixby ordered refers to \"Customer Name\" = 'Aimee Bixby';"}
{"sample_id": 2404, "db_id": "superstore", "final": {"question": "How many office supply orders were made by Cindy Stewart in the south superstore?", "sql": "SELECT COUNT(*) FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T3.Category = 'Office Supplies' AND T2.\"Customer Name\" = 'Cindy Stewart'", "source_tables": ["south_superstore", "people", "product"]}, "evidence": "office supply refers to Category = 'Office Supplies'"}
{"sample_id": 2359, "db_id": "superstore", "final": {"question": "How many art products were ordered in 2013 in the east superstore?", "sql": "SELECT COUNT(DISTINCT T1.\"Product ID\") FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.\"Sub-Category\" = 'Art' AND T1.Region = 'East' AND STRFTIME('%Y', T1.\"Order Date\") = '2013'", "source_tables": ["product", "east_superstore"]}, "evidence": "ordered in 2013 refers to strftime('%Y', \"Order Date\") = '2013'; art products refers to \"Sub-Category\" = 'Art'"}
{"sample_id": 2387, "db_id": "superstore", "final": {"question": "What are the order date and product name of the order ID CA-2011-137274 from the Central region?", "sql": "SELECT T1.\"Order Date\", T2.\"Product Name\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Order ID\" = 'CA-2011-137274' AND T2.Region = 'Central'", "source_tables": ["central_superstore", "product"]}, "evidence": ""}
{"sample_id": 2459, "db_id": "superstore", "final": {"question": "List the customer's name from the South region with a standard class ship mode and sales greater than the 88% of the average sales of all orders.", "sql": "SELECT DISTINCT T2.\"Customer Name\" FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T2.Region = 'South' AND T1.\"Ship Mode\" = 'Standard Class' AND 100 * T1.Sales / ( SELECT AVG(Sales) FROM south_superstore ) > 88", "source_tables": ["south_superstore", "people"]}, "evidence": "sales greater than the 88% of the average sales of all orders refers to Sales > avg(Sales) * 0.88; South region refers to south_superstore"}
{"sample_id": 2379, "db_id": "superstore", "final": {"question": "What is the ship date of the order by the customer named Ann Chong in the central region?", "sql": "SELECT T2.\"Ship Date\" FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Ann Chong' AND T1.Region = 'Central'", "source_tables": ["people", "central_superstore"]}, "evidence": "Ann Chong' is the \"Customer Name\"; Region = 'Central'"}
{"sample_id": 2350, "db_id": "superstore", "final": {"question": "Among the orders made by Aimee Bixby, how many of them included at least one kind of product under the category \"Furniture\"?", "sql": "SELECT COUNT(DISTINCT T2.\"Order ID\") FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product ID\" WHERE T3.Category = 'Furniture' AND T1.\"Customer Name\" = 'Aimee Bixby'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "made by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby';"}
{"sample_id": 2399, "db_id": "superstore", "final": {"question": "List the products ordered by Matt Abelman from the Western store in 2013.", "sql": "SELECT DISTINCT T3.\"Product Name\" FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T2.\"Customer Name\" = 'Matt Abelman' AND STRFTIME('%Y', T1.\"Order Date\") = '2013'", "source_tables": ["people", "west_superstore", "product"]}, "evidence": "ordered by Matt Abelman refers to \"Customer Name\" = 'Matt Abelman'; in 2013 refers to \"Order Date\" like '2013%'"}
{"sample_id": 2458, "db_id": "superstore", "final": {"question": "What is the product's name in the highest quantity in a single purchase?", "sql": "SELECT T2.\"Product Name\" FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.Region = 'East' ORDER BY T1.Quantity DESC LIMIT 1", "source_tables": ["product", "east_superstore"]}, "evidence": "highest quantity refers to max(Quantity)"}
{"sample_id": 2412, "db_id": "superstore", "final": {"question": "What is the total profit of \"Memorex Froggy Flash Drive 8 GB in south superstore?", "sql": "SELECT SUM(T1.Profit) FROM south_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" GROUP BY T2.\"Product Name\" = 'Memorix Froggy Flash Drive 8 GB'", "source_tables": ["south_superstore", "product"]}, "evidence": "\"Memorix Froggy Flash Drive 8 GB\" is the \"Product Name\""}
{"sample_id": 2370, "db_id": "superstore", "final": {"question": "List 5 customers in the West region who had their item shipped 'Second Class.'", "sql": "SELECT DISTINCT T2.\"Customer Name\" FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.Region = 'West' AND T1.\"Ship Mode\" = 'Second Class' LIMIT 5", "source_tables": ["people", "west_superstore"]}, "evidence": "shipped 'Second Class.' refers to \"Ship Mode\" = 'Second Class'; customers refers to \"Customer Name\"; Region = 'West'"}
{"sample_id": 2446, "db_id": "superstore", "final": {"question": "What is the percentage of orders with 0.2 discount in the Central superstore were purchased by customers who live in Texas?", "sql": "SELECT CAST(SUM(CASE  WHEN T2.Discount = 0.2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.State = 'Texas'", "source_tables": ["people", "central_superstore"]}, "evidence": "live in Texas refers to State = 'Texas'; percentage = divide(sum(Order ID) when Discount = 0.2, sum(Order ID)) as percentage"}
{"sample_id": 2406, "db_id": "superstore", "final": {"question": "List the name of all products that Cindy Stewart ordered in the east superstore.", "sql": "SELECT T3.\"Product Name\" FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T2.\"Customer Name\" = 'Cindy Stewart'", "source_tables": ["south_superstore", "people", "product"]}, "evidence": "name of all products refers to Product Name; Cindy Stewart is the Customer Name;"}
{"sample_id": 2484, "db_id": "shooting", "final": {"question": "How many more black female victims than white female victims were discovered?", "sql": "SELECT SUM(race = 'B') - SUM(race = 'W') FROM subjects WHERE gender = 'F'", "source_tables": ["subjects"]}, "evidence": "black refers to race = 'B'; female refers to gender = 'F'; white refers to race = 'W'; result = subtract(count(victims where race = 'B'), count(victims where race = 'W')) where gender = 'F'"}
{"sample_id": 2472, "db_id": "shooting", "final": {"question": "From the cases where the subject were deceased, list the subject's last name, gender, race and case number.", "sql": "SELECT T2.last_name, T2.gender, T2.race, T2.case_number FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T1.subject_statuses = 'Deceased'", "source_tables": ["incidents", "subjects"]}, "evidence": "subject were deceased refers to subject_statuses = 'Deceased'"}
{"sample_id": 2487, "db_id": "shooting", "final": {"question": "Which near-death incident did a policeman by the name of Ruben Fredirick look into? What is the victim in this incident's race and gender?", "sql": "SELECT T1.case_number, T3.race, T3.gender FROM incidents AS T1 INNER JOIN officers AS T2 ON T1.case_number = T2.case_number INNER JOIN subjects AS T3 ON T1.case_number = T3.case_number WHERE T2.first_name = 'Fredirick' AND T2.last_name = 'Ruben'", "source_tables": ["subjects", "incidents", "officers"]}, "evidence": "near-death refers to subject_statuses = 'Deceased Injured'; incident refers to case_number; Ruben Fredirick refers to full_name = 'Ruben Fredirick'"}
{"sample_id": 2488, "db_id": "shooting", "final": {"question": "What proportion of male police officers looked into events where people were injured?", "sql": "SELECT CAST(SUM(T2.gender = 'M') AS REAL) * 100 / COUNT(T1.case_number) FROM incidents T1 INNER JOIN officers T2 ON T1.case_number = T2.case_number WHERE T1.subject_statuses = 'Injured'", "source_tables": ["incidents", "officers"]}, "evidence": "male refers to gender = 'M'; people were injured refers to subject_statuses = 'Injured'; proportion = divide(count(case_number where gender = 'M'), count(case_number)) where subject_statuses = 'Injured' * 100%"}
{"sample_id": 2506, "db_id": "genes", "final": {"question": "What type of interactions occurs in genes whose function is cellular transport and transport medicine and are classified as non-essential?", "sql": "SELECT T2.Type FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Function = 'TRANSCRIPTION' AND T1.Essential = 'Non-Essential'", "source_tables": ["interactions", "genes"]}, "evidence": ""}
{"sample_id": 2499, "db_id": "genes", "final": {"question": "How many pairs of positively correlated genes are both non-essential?", "sql": "SELECT COUNT(T2.GeneID2) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr > 0 AND T1.Essential = 'Non-Essential'", "source_tables": ["interactions", "genes"]}, "evidence": "If Expression_Corr > 0, it means the expression correlation is positive"}
{"sample_id": 2509, "db_id": "genes", "final": {"question": "Of all the nonessential genes that are not of the motorprotein class and whose phenotype is cell cycle defects, how many do not have a physical type of interaction?", "sql": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Type != 'Physical' AND T1.Phenotype = 'Cell cycle defects' AND T1.Class != 'Motorproteins' AND T1.Essential = 'Non-Essential'", "source_tables": ["interactions", "genes"]}, "evidence": ""}
{"sample_id": 2490, "db_id": "genes", "final": {"question": "How many non-essential genes are located in the nucleus?", "sql": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Classification AS T2 ON T1.GeneID = T2.GeneID WHERE T2.Localization = 'nucleus' AND T1.Essential = 'Non-Essential'", "source_tables": ["classification", "genes"]}, "evidence": ""}
{"sample_id": 2528, "db_id": "app_store", "final": {"question": "What is the total installs of apps with content rating of adults only 18+ and what are the translated reviews of it?", "sql": "SELECT SUM(T1.Installs), T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.\"Content Rating\" = 'Adults only 18+'", "source_tables": ["playstore", "user_reviews"]}, "evidence": "total installs = SUM(Installs);"}
{"sample_id": 2568, "db_id": "app_store", "final": {"question": "Indicate the number of installs and include the percentage of positive sentiments of FREEDOME VPN Unlimited anonymous Wifi Security.", "sql": "SELECT T1.Installs , CAST(SUM(CASE WHEN T2.Sentiment = 'Positive' THEN 1 ELSE 0 END) * 100 / SUM(CASE WHEN T2.Sentiment IS NOT NULL THEN 1.0 ELSE 0 END) AS REAL) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'FREEDOME VPN Unlimited anonymous Wifi Security'", "source_tables": ["playstore", "user_reviews"]}, "evidence": "FREEDOME VPN Unlimited anonymous Wifi Security is the App; percentage = MULTIPLY(DIVIDE((SUM(Sentiment = 'Positive')), (COUNT(*))), 100)"}
{"sample_id": 2553, "db_id": "app_store", "final": {"question": "What is the average download for entertainment apps with size no more than 1.0 M?", "sql": "SELECT AVG(CAST(REPLACE(REPLACE(Installs, ',', ''), '+', '') AS INTEGER)) FROM playstore WHERE Category = 'ENTERTAINMENT' AND Size < '1.0M'", "source_tables": ["playstore"]}, "evidence": "downloads and installs are synonyms; entertainment apps refers to Category = 'ENTERTAINMENT';"}
{"sample_id": 2544, "db_id": "app_store", "final": {"question": "What is the number of installments of the app with the highest total Sentiment polarity score?", "sql": "SELECT T1.Installs FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App GROUP BY T1.App ORDER BY SUM(T2.Sentiment_Polarity) DESC LIMIT 1", "source_tables": ["playstore", "user_reviews"]}, "evidence": "installments refers to Installs; highest total sentiment polarity score = MAX(SUM(Sentiment_Polarity));"}
{"sample_id": 2563, "db_id": "app_store", "final": {"question": "How much is the size of Browser 4G and how many users have a pretty positive favorability on it?", "sql": "SELECT T1.Size, COUNT(T1.App) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Browser 4G' AND T2.Sentiment_Polarity >= 0.5", "source_tables": ["playstore", "user_reviews"]}, "evidence": "Browser 4G is the App; pretty positive favorability refers to Sentiment_Polarity score = 0.5"}
{"sample_id": 2555, "db_id": "app_store", "final": {"question": "List out the top 3 genre for application with a sentiment review greater than 0.5.", "sql": "SELECT Genres FROM playstore WHERE App IN ( SELECT App FROM user_reviews WHERE Sentiment = 'Positive' AND Sentiment_Polarity > 0.5 ORDER BY Sentiment_Polarity DESC LIMIT 3 )", "source_tables": ["playstore", "user_reviews"]}, "evidence": "sentiment review refers to Sentiment_Polarity; Sentiment_Polarity>0.5;"}
{"sample_id": 2571, "db_id": "app_store", "final": {"question": "Which education App has the worst rating and state the translated review if available.", "sql": "SELECT T1.App, T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Category = 'EDUCATION' GROUP BY T1.App, T2.Translated_Review ORDER BY T1.Rating ASC LIMIT 1", "source_tables": ["playstore", "user_reviews"]}, "evidence": "education App refers to Category = 'EDUCATION'; worst rated app refers to Rating = 1;"}
{"sample_id": 2549, "db_id": "app_store", "final": {"question": "Which apps have 5 rating? List out then application name.", "sql": "SELECT DISTINCT App FROM playstore WHERE Rating = 5", "source_tables": ["playstore"]}, "evidence": "application name refers to App;"}
{"sample_id": 2517, "db_id": "app_store", "final": {"question": "What is the lowest sentiment polarity score of the Basketball Stars app for people who dislikes the app pretty much and how many downloads does it have?", "sql": "SELECT MIN(T2.Sentiment_Polarity), T1.Installs FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Basketball Stars'", "source_tables": ["playstore", "user_reviews"]}, "evidence": "lowest sentiment polarity score refers to MIN(Sentiment_Polarity); user dislike the app pretty much refers to Sentiment_Polarity<-0.5; number of downloads it has refers to installs;"}
{"sample_id": 2541, "db_id": "app_store", "final": {"question": "What is the rating for \"Garden Coloring Book\"? List all of its reviews.", "sql": "SELECT T1.Rating, T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Garden Coloring Book'", "source_tables": ["playstore", "user_reviews"]}, "evidence": "Golfshot Plus: Golf GPS refers to App = 'Golfshot Plus: Golf GPS'; review refers to Translated_Review;"}
{"sample_id": 2572, "db_id": "app_store", "final": {"question": "List all free sports Apps and their translated review.", "sql": "SELECT T1.App, T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Type = 'Free' AND T1.Category = 'SPORTS'", "source_tables": ["playstore", "user_reviews"]}, "evidence": "paid sports Apps refers to type = 'Paid' and Category = 'SPORTS';"}
{"sample_id": 2664, "db_id": "regional_sales", "final": {"question": "Compare the total number of orders between customer \"Apollo Ltd\" and \"Pacific Ltd\".", "sql": "SELECT SUM(CASE WHEN T2.\"Customer Names\" = 'Apollo Ltd' THEN 1 ELSE 0 END), SUM(CASE WHEN T2.\"Customer Names\" = 'Pacific Ltd' THEN 1 ELSE 0 END) FROM \"Sales Orders\" AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID", "source_tables": ["customers", "sales orders"]}, "evidence": "\"Apollo Ltd\" and \"Pacific Ltd\" are both Customer Names; total number of orders refers to COUNT(OrderNumber)"}
{"sample_id": 2707, "db_id": "regional_sales", "final": {"question": "Name of customers who have ordered Cocktail Glasses by online sales channel.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T3.\"Product Name\" = 'Cocktail Glasses' AND T2.\"Sales Channel\" = 'Online' THEN T1.\"Customer Names\" END AS T FROM Customers T1 INNER JOIN \"Sales Orders\" T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products T3 ON T3.ProductID = T2._ProductID ) WHERE T IS NOT NULL", "source_tables": ["customers", "products", "sales orders"]}, "evidence": "\"Cocktail Glasses\" is the Product Name; customer refers to Customer Names"}
{"sample_id": 2633, "db_id": "regional_sales", "final": {"question": "What is the percentage of total orders from stores in Orange County in 2018?", "sql": "SELECT CAST(SUM(CASE WHEN T2.County = 'Orange County' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderDate LIKE '%/%/18'", "source_tables": ["store locations", "sales orders"]}, "evidence": "DIVIDE(COUNT(OrderNumber where County = 'Orange County' and SUBSTR(OrderDate, -2) = '18'), COUNT(OrderNumber where SUBSTR(OrderDate, -2) = '18')) as percentage;"}
{"sample_id": 2599, "db_id": "regional_sales", "final": {"question": "Describe the customer names and product names which had over 3800 USD in net profit.", "sql": "SELECT DISTINCT \"Customer Names\", \"Product Name\" FROM ( SELECT T1.\"Customer Names\", T3.\"Product Name\" , REPLACE(T2.\"Unit Price\", ',', '') - REPLACE(T2.\"Unit Cost\", ',', '') AS T FROM Customers T1 INNER JOIN \"Sales Orders\" T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products T3 ON T3.ProductID = T2._ProductID ) WHERE T > 3800", "source_tables": ["customers", "products", "sales orders"]}, "evidence": "over 3800 USD in net profit refers to SUBTRACT(Unit Price, Unit Cost) where Net Profit > 3800;"}
{"sample_id": 2712, "db_id": "regional_sales", "final": {"question": "List the name of the customer with the most number of order quantity from 2018 to 2020.", "sql": "SELECT T1.\"Customer Names\" FROM Customers AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._CustomerID = T1.CustomerID WHERE T2.OrderDate LIKE '%/%/18' OR T2.OrderDate LIKE '%/%/19' OR T2.OrderDate LIKE '%/%/20' ORDER BY T2.\"Order Quantity\" DESC LIMIT 1", "source_tables": ["customers", "sales orders"]}, "evidence": "name of customer refers to Customer Names; from 2018 to 2020 refers to OrderDate between '1/1/2018' and '31/12/2020'; most number of order quantity refers to Order Quantity = 8"}
{"sample_id": 2629, "db_id": "regional_sales", "final": {"question": "What is the average unit price of a Cookware product?", "sql": "SELECT AVG(REPLACE(T1.\"Unit Price\", ',', '')) FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.\"Product Name\" = 'Cookware'", "source_tables": ["products", "sales orders"]}, "evidence": "AVG(Unit Price where Product Name = 'Cookware');"}
{"sample_id": 2592, "db_id": "regional_sales", "final": {"question": "Among the sales with 40% discount via in-store channel, how many products were shipped from warehouse code of WARE-NMK1003?", "sql": "SELECT COUNT(DISTINCT T) FROM ( SELECT CASE  WHEN \"Sales Channel\" = 'In-Store' AND WarehouseCode = 'WARE-NMK1003' AND \"Discount Applied\" = '0.4' THEN OrderNumber ELSE NULL END AS T FROM \"Sales Orders\" ) WHERE T IS NOT NULL", "source_tables": ["sales orders"]}, "evidence": "40% discount refers to Discount Applied = 0.4; in-store channel refers to Sales Channel = 'In-Store'; orders refer to OrderNumber;"}
{"sample_id": 2614, "db_id": "regional_sales", "final": {"question": "Calculate the average net profit of phones which have sales channel of distributor.", "sql": "SELECT SUM(REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '')) / COUNT(T1.OrderNumber) FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.\"Product Name\" = 'Phones' AND T1.\"Sales Channel\" = 'Distributor'", "source_tables": ["products", "sales orders"]}, "evidence": "net profit can be computed as SUBTRACT(Unit Price, Unit Cost); AVG(net profit) where Product Name = 'Phones' and Sales Channel = 'Distributor';"}
{"sample_id": 2736, "db_id": "regional_sales", "final": {"question": "How many sales orders were processed by the store located in Chandler in 2020?", "sql": "SELECT SUM(CASE WHEN T2.\"City Name\" = 'Chandler' AND T1.OrderDate LIKE '%/%/20' THEN 1 ELSE 0 END) FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID", "source_tables": ["store locations", "sales orders"]}, "evidence": "\"Chandler\" is the City Name; orders refers to OrderDate; in 2020 refers to Substr(OrderDate, -2) = '20'"}
{"sample_id": 2589, "db_id": "regional_sales", "final": {"question": "Among the sales order shipped in July 2018, calculate the percentage of orders for home fragrances.", "sql": "SELECT SUM(CASE WHEN T2.\"Product Name\" = 'Home Fragrances' THEN 1 ELSE 0 END) * 100 / COUNT(T1.OrderNumber)  FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.ShipDate LIKE '7/%/18'", "source_tables": ["products", "sales orders"]}, "evidence": "shipped in July 2018 refers to ShipDate between 01-07-2018 and 31-07-2018; DIVIDE(COUNT(OrderNumber where Product Name = 'Home Fragrances' and SUBSTR(OrderDate, 1, 1) = '7'), COUNT(OrderNumber where SUBSTR(ShipDate, -2) = '18')) as percentage;"}
{"sample_id": 2700, "db_id": "regional_sales", "final": {"question": "How many sales teams are there in the Midwest?", "sql": "SELECT SUM(CASE WHEN Region = 'Midwest' THEN 1 ELSE 0 END) FROM \"Sales Team\"", "source_tables": ["sales team"]}, "evidence": "\"Midwest\" is the Region"}
{"sample_id": 2585, "db_id": "regional_sales", "final": {"question": "List the name of all customers who had made orders online.", "sql": "SELECT T FROM ( SELECT CASE  WHEN T2.\"Sales Channel\" = 'Online' THEN T1.\"Customer Names\" ELSE NULL END AS T FROM Customers T1 INNER JOIN \"Sales Orders\" T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL", "source_tables": ["customers", "sales orders"]}, "evidence": "orders online refer to Sales Channel = 'Online';"}
{"sample_id": 2673, "db_id": "regional_sales", "final": {"question": "Calculate the average monthly order and percentage of warehouse \"WARE-NMK1003\" in 2019. Among them, mention number of orders for floor lamps.", "sql": "SELECT CAST(SUM(CASE WHEN T2.WarehouseCode = 'WARE-NMK1003' THEN 1 ELSE 0 END) AS REAL) / 12 , CAST(SUM(CASE WHEN T2.WarehouseCode = 'WARE-NMK1003' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.OrderNumber), COUNT(CASE WHEN T1.\"Product Name\" = 'Floor Lamps' AND T2.WarehouseCode = 'WARE-NMK1003' THEN T2.\"Order Quantity\" ELSE NULL END) FROM Products AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._ProductID = T1.ProductID WHERE T2.OrderDate LIKE '%/%/19'", "source_tables": ["products", "sales orders"]}, "evidence": "\"WARE-NMK1003\" is the WarehouseCode; in 2019 refers to SUBSTR(OrderDate, -2) = '19'; average = Divide (Count (OrderNumber where SUBSTR(OrderDate, -2) = '19'), 12); Percentage = Divide (Count(OrderNumber where WarehouseCode = 'WARE-NMK1003'), Count(OrderNumber)) * 100; 'Floor Lamps' is the Product Name; number of orders refers to Count(OrderNumber)"}
{"sample_id": 2716, "db_id": "regional_sales", "final": {"question": "How many sales teams are there in the Midwest?", "sql": "SELECT SUM(CASE WHEN Region = 'Midwest' THEN 1 ELSE 0 END) FROM \"Sales Team\"", "source_tables": ["sales team"]}, "evidence": "\"Midwest\" is the Region"}
{"sample_id": 2690, "db_id": "regional_sales", "final": {"question": "What type of store is most popular in the South?", "sql": "SELECT DISTINCT CASE WHEN MAX(T2.Population) THEN T2.Type END FROM Regions AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StateCode = T1.StateCode", "source_tables": ["regions", "store locations"]}, "evidence": "in the South refers to Region = 'South'; type of store that is most popular refers to Max(Count(Type))"}
{"sample_id": 2590, "db_id": "regional_sales", "final": {"question": "List down the customer IDs and names that start with alphabet \"W\".", "sql": "SELECT DISTINCT CustomerID, \"Customer Names\" FROM Customers WHERE \"Customer Names\" LIKE 'W%' ORDER BY \"Customer Names\" DESC", "source_tables": ["customers"]}, "evidence": "names that start with alphabet \"W\" refer to Customer Names LIKE 'W%';"}
{"sample_id": 2670, "db_id": "regional_sales", "final": {"question": "Name the products via wholesale channel of the store under Pacific/Honolulu time zone.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T3.\"Time Zone\" = 'Pacific/Honolulu' AND T2.\"Sales Channel\" = 'Wholesale' THEN T1.\"Product Name\" ELSE NULL END AS T FROM Products T1 INNER JOIN \"Sales Orders\" T2 ON T2._ProductID = T1.ProductID INNER JOIN \"Store Locations\" T3 ON T3.StoreID = T2._StoreID ) WHERE T IS NOT NULL", "source_tables": ["products", "store locations", "sales orders"]}, "evidence": "products refers to Product Name; via wholesale channel refers to Sales Channel = 'Wholesale'"}
{"sample_id": 2606, "db_id": "regional_sales", "final": {"question": "List out the name of orders which have delivery date of 6/13/2018.", "sql": "SELECT DISTINCT T FROM ( SELECT IIF(DeliveryDate = '6/13/18', OrderNumber, NULL) AS T FROM \"Sales Orders\" ) WHERE T IS NOT NULL", "source_tables": ["sales orders"]}, "evidence": ""}
{"sample_id": 2627, "db_id": "regional_sales", "final": {"question": "Please give the order number and product name of the order which has the lowest unit price.", "sql": "SELECT T1.OrderNumber, T2.\"Product Name\" FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE REPLACE(T1.\"Unit Price\", ',', '') = ( SELECT REPLACE(T1.\"Unit Price\", ',', '') FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID ORDER BY REPLACE(T1.\"Unit Price\", ',', '') LIMIT 1 )", "source_tables": ["products", "sales orders"]}, "evidence": "the lowest unit price refers to MIN(Unit Price);"}
{"sample_id": 2587, "db_id": "regional_sales", "final": {"question": "Name the sales team name who had orders with the greatest net profit in 2020.", "sql": "SELECT T2.\"Sales Team\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderDate LIKE '%/%/20' GROUP BY T2.\"Sales Team\" ORDER BY SUM(REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '')) DESC LIMIT 1", "source_tables": ["sales team", "sales orders"]}, "evidence": "net profit can be computed as SUBTRACT(Unit Price, Unit Cost); the greatest net profit in 2020 refers to MAX(net profit) where OrderDate LIKE '%/20';"}
{"sample_id": 2693, "db_id": "regional_sales", "final": {"question": "How many online purchases did Ole Group make in May 2019?", "sql": "SELECT SUM(CASE WHEN T1.\"Sales Channel\" = 'Online' AND T2.\"Customer Names\" = 'Ole Group' AND T1.OrderDate LIKE '5/%/19' THEN 1 ELSE 0 END) FROM \"Sales Orders\" AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID", "source_tables": ["customers", "sales orders"]}, "evidence": "\"Ole Group\" is the Customer Names; online purchase refers to Sales Channel = 'Online'; made in May 2019 refers to OrderDate LIKE '5/%/19'"}
{"sample_id": 2576, "db_id": "regional_sales", "final": {"question": "List all the customers with name containing the word 'Group'.", "sql": "SELECT T FROM ( SELECT IIF(\"Customer Names\" LIKE '%Group%', \"Customer Names\", NULL) AS T FROM Customers ) WHERE T IS NOT NULL", "source_tables": ["customers"]}, "evidence": "name containing the word 'Group' refers to Customer Names LIKE '%Group%';"}
{"sample_id": 2719, "db_id": "regional_sales", "final": {"question": "How much is the discount applied to the order with the highest unit price?", "sql": "SELECT \"Discount Applied\" FROM \"Sales Orders\" WHERE REPLACE(\"Unit Price\", ',', '') = ( SELECT REPLACE(\"Unit Price\", ',', '') FROM \"Sales Orders\" ORDER BY REPLACE(\"Unit Price\", ',', '') DESC LIMIT 1 ) ORDER BY REPLACE(\"Unit Price\", ',', '') DESC LIMIT 1", "source_tables": ["sales orders"]}, "evidence": "highest unit price refers to Max(Unit Price)"}
{"sample_id": 2666, "db_id": "regional_sales", "final": {"question": "List down the customer names and product names of the order made by \"Anthony Torres\" via distributor channel.", "sql": "SELECT DISTINCT T1.\"Customer Names\", T4.\"Product Name\" FROM Customers AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN \"Sales Team\" AS T3 ON T3.SalesTeamID = T2._SalesTeamID INNER JOIN Products AS T4 ON T4.ProductID = T2._ProductID WHERE T3.\"Sales Team\" = 'Anthony Torres' AND T2.\"Sales Channel\" = 'Distributor'", "source_tables": ["sales team", "customers", "products", "sales orders"]}, "evidence": "\"Anthony Torres\" is the name of Sales Team; distributor channel refers to Sales Channel = 'Distributor'"}
{"sample_id": 2586, "db_id": "regional_sales", "final": {"question": "Calculate the average net profit for bakeware product.", "sql": "SELECT AVG(REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', ''))  FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.\"Product Name\" = 'Bakeware'", "source_tables": ["products", "sales orders"]}, "evidence": "net profit can be computed as SUBTRACT(Unit Price, Unit Cost); AVG(net profit) where Product Name = 'Bakeware';"}
{"sample_id": 2728, "db_id": "regional_sales", "final": {"question": "How many orders were shipped by the sales team with the highest amount of shipped orders in 2020? Give the name of the said sales team.", "sql": "SELECT COUNT(T1.OrderNumber), T2.\"Sales Team\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.ShipDate LIKE '%/%/20' GROUP BY T2.\"Sales Team\" ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1", "source_tables": ["sales team", "sales orders"]}, "evidence": "shipped refers to ShipDate; in 2020 refers to SUBSTR(ShipDate, -2) = '20'; highest amount of shipped orders refers to Max(Count(OrderNumber))"}
{"sample_id": 2733, "db_id": "regional_sales", "final": {"question": "Name the product that was registered in the sales order 'SO - 0005951'.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.OrderNumber = 'SO - 0005951' THEN T1.\"Product Name\" ELSE NULL END AS T FROM Products T1 INNER JOIN \"Sales Orders\" T2 ON T2._ProductID = T1.ProductID ) WHERE T IS NOT NULL", "source_tables": ["products", "sales orders"]}, "evidence": "sales order 'SO - 0005951' refers to OrderNumber = 'SO - 0005951'; product refers to Product Name"}
{"sample_id": 2584, "db_id": "regional_sales", "final": {"question": "Provide all the orders from WARE-NMK1003. Name the product and sales team for each of these order.", "sql": "SELECT DISTINCT T1.\"Product Name\", T3.\"Sales Team\" FROM Products AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._ProductID = T1.ProductID INNER JOIN \"Sales Team\" AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T2.WarehouseCode = 'WARE-NMK1003'", "source_tables": ["sales team", "products", "sales orders"]}, "evidence": "all the orders from WARE-NMK1003 refer to OrderNumber where WarehouseCode = 'WARE-NMK1003'; product refers to Product Name;"}
{"sample_id": 2689, "db_id": "regional_sales", "final": {"question": "How many different time zones are there in the Northeast region?", "sql": "SELECT COUNT(DISTINCT T2.\"Time Zone\") FROM Regions AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StateCode = T1.StateCode WHERE T1.Region = 'Northeast'", "source_tables": ["regions", "store locations"]}, "evidence": ""}
{"sample_id": 2702, "db_id": "regional_sales", "final": {"question": "How many sales channels does the sales team have in the Midwest?", "sql": "SELECT COUNT(T1.\"Sales Channel\") FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.Region = 'Midwest'", "source_tables": ["sales team", "sales orders"]}, "evidence": "\"Midwest\" is the Region"}
{"sample_id": 2636, "db_id": "regional_sales", "final": {"question": "What is the unit cost of order SO - 000103?", "sql": "SELECT DISTINCT T FROM ( SELECT IIF(OrderNumber = 'SO - 000103', \"Unit Cost\", NULL) AS T FROM \"Sales Orders\" ) WHERE T IS NOT NULL", "source_tables": ["sales orders"]}, "evidence": "OrderNumber = 'SO - 000103';"}
{"sample_id": 2694, "db_id": "regional_sales", "final": {"question": "How many stores with less need for products, and purchased through a distributor, are located in Washtenaw County?", "sql": "SELECT SUM(CASE WHEN T1.\"Order Quantity\" = 1 AND T1.\"Sales Channel\" = 'Distributor' AND T2.County = 'Washtenaw County' THEN 1 ELSE 0 END) FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID", "source_tables": ["store locations", "sales orders"]}, "evidence": "less need for products refers to Order Quantity = 1; purchased through a distributor refers to Sales Channel = 'Distributor'; 'Harri County' is the County"}
{"sample_id": 2792, "db_id": "european_football_1", "final": {"question": "Which team had more home victories in the 2021 season's matches of the Bundesliga division, Augsburg or Mainz?", "sql": "SELECT CASE WHEN COUNT(CASE WHEN T1.HomeTeam = 'Augsburg' THEN 1 ELSE NULL END) - COUNT(CASE WHEN T1.HomeTeam = ' Mainz' THEN 1 ELSE NULL END) > 0 THEN 'Augsburg' ELSE 'Mainz' END FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T1.FTR = 'H'", "source_tables": ["divisions", "matchs"]}, "evidence": "Bundesliga is the name of division; more home victories refer to MAX(FTR = 'H)'; Augsburg and Mainz are names of teams and refer to HomeTeam;"}
{"sample_id": 2741, "db_id": "european_football_1", "final": {"question": "What percentage of games won, games lost and games drawn does Cittadella have as a home team in total?", "sql": "SELECT CAST(COUNT(CASE WHEN FTR = 'H' THEN 1 ELSE NULL END) / COUNT(HomeTeam) AS REAL) * 100, CAST(COUNT(CASE WHEN FTR = 'A' THEN 1 ELSE NULL END) AS REAL) / COUNT(HomeTeam), CAST(COUNT(CASE WHEN FTR = 'D' THEN 1 ELSE NULL END) AS REAL) / COUNT(HomeTeam) FROM matchs WHERE HomeTeam = 'Cittadella'", "source_tables": ["matchs"]}, "evidence": "Percentage of games won = DIVIDE(COUNT(FTR = 'H' where HomeTeam = 'Cittadella'), COUNT(Div where HomeTeam = 'Cittadella')) as percentage; Percentage of games lost = DIVIDE(COUNT(FTR = 'A' where HomeTeam = 'Cittadella')), COUNT(Div where HomeTeam = 'Cittadella') as percentage; percentage of games drawn = DIVIDE(SUM(FTR = 'D'where HomeTeam = 'Cittadella'), COUNT(Div where HomeTeam = 'Cittadella')) as percentage;\n"}
{"sample_id": 2752, "db_id": "european_football_1", "final": {"question": "What is the highest final-time score across all divisions in the 2021 season? Which team was the team that made up that score?", "sql": "SELECT ( SELECT MAX(MAX(FTAG), MAX(FTHG)) FROM matchs WHERE season = 2021 ) AS T1, AwayTeam FROM matchs WHERE season = 2021 AND FTHG = T1 OR FTAG = T1", "source_tables": ["matchs"]}, "evidence": "MAX(SUM where FTHG, FTAG, season = 2021);"}
{"sample_id": 2767, "db_id": "european_football_1", "final": {"question": "Who is the winner of the game happened on 2009/10/10, between \"East Fife\" and \"Dumbarton\"?", "sql": "SELECT CASE WHEN FTR = 'H' THEN 'East Fife' ELSE 'Dumbarton' END WINNER FROM matchs WHERE Date = '2009-10-10' AND HomeTeam = 'East Fife' AND AwayTeam = 'Dumbarton'", "source_tables": ["matchs"]}, "evidence": "2009/10/10 is a date; the winner refers to FTR = 'A'; East Fife and Dumbarton are name of teams where HomeTeam = 'East Fife'; AwayTeam = 'Dumbarton';"}
{"sample_id": 2781, "db_id": "european_football_1", "final": {"question": "What's the home win ratio of the Bundesliga division in 2021?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.FTR = 'H' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.FTR) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T2.name = 'Bundesliga'", "source_tables": ["divisions", "matchs"]}, "evidence": "home win refers to FTR = 'H', where H stands for home victory; season = '2021'; Bundesliga is a name of division; DIVIDE(COUNT(Div where FTR = 'H, season = '2021' and name = 'Bundesliga'), COUNT(Div where season = '2021' and name = 'Bundesliga')) as percentage;"}
{"sample_id": 2745, "db_id": "european_football_1", "final": {"question": "What is the percentage whereby the away team scored 2 goals during the 2017 seasons?", "sql": "SELECT CAST(SUM(CASE WHEN FTAG = 2 THEN 1 ELSE 0 END) / COUNT(FTAG) AS REAL) * 100 FROM matchs WHERE season = 2017", "source_tables": ["matchs"]}, "evidence": "scored 2 goals refers to FTAG = 2, which is short name for Final-time Away-team Goals; DIVIDE(COUNT(Div where season = 2017, FTAG = '2'), COUNT(Div where season = 2017)) as percentage;"}
{"sample_id": 2755, "db_id": "european_football_1", "final": {"question": "Which division had the most draft matches in the 2008 season?", "sql": "SELECT Div FROM matchs WHERE season = 2008 AND FTR = 'D' GROUP BY Div ORDER BY COUNT(FTR) DESC LIMIT 1", "source_tables": ["matchs"]}, "evidence": "the most draft matches refer to MAX(COUNT(Div)) where FTR = 'D';"}
{"sample_id": 2794, "db_id": "european_football_1", "final": {"question": "How many final-time home-team goals were there in total in all the matches of the Bundesliga division in the 2021 season?", "sql": "SELECT SUM(T1.FTHG) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.season = 2021", "source_tables": ["divisions", "matchs"]}, "evidence": "Bundesliga is the name of division; final-time home-team goals refers to FTHG;"}
{"sample_id": 2795, "db_id": "european_football_1", "final": {"question": "What's the winning rate of Club Brugge in the 2021 Premier League?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.FTR = 'H' THEN 1 ELSE NULL END) + COUNT(CASE WHEN T1.FTR = 'A' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(t1.FTR) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T1.AwayTeam = 'Club Brugge' OR T1.HomeTeam = 'Club Brugge'", "source_tables": ["divisions", "matchs"]}, "evidence": "Premier League is name of division; season = 2021; Club Brugge is name of team; Club Brugge wins implies HomeTeam = 'Club Brugge' and FTR = 'H' and AwayTeam = 'Club Brugge' and FTR = 'A'; DIVIDE(SUM(COUNT(FTR = 'H' where HomeTeam = 'Club Brugge', name = 'Premier League', season = 2021), COUNT(FTR = 'A'where AwayTeam = 'Club Brugge', name = 'Premier League', season = 2021)), COUNT(Div where name = 'Premier League', season = 2021));"}
{"sample_id": 2788, "db_id": "european_football_1", "final": {"question": "How many matches of the Bundesliga division ended with an away victory in the 2021 season?", "sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.FTR = 'A' AND T1.season = 2021", "source_tables": ["divisions", "matchs"]}, "evidence": "Bundesliga is the name of division; away victory refers to FTR = 'A', where 'A' stands for away victory;"}
{"sample_id": 2793, "db_id": "european_football_1", "final": {"question": "Which team had the most final-time home-team goals in the 2021 season's matches of the Bundesliga division?", "sql": "SELECT T1.HomeTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.season = 2021 ORDER BY T1.FTHG DESC LIMIT 1", "source_tables": ["divisions", "matchs"]}, "evidence": "Bundesliga is the name of division; the most final-time home-team goals refers to MAX(FTHG);"}
{"sample_id": 2884, "db_id": "professional_basketball", "final": {"question": "List out all the coach ID who have served more than 2 different teams.", "sql": "SELECT coachID FROM coaches GROUP BY coachID HAVING COUNT(DISTINCT tmID) > 2", "source_tables": ["coaches"]}, "evidence": "more than 2 different teams refers to count(tmID) > 2"}
{"sample_id": 2903, "db_id": "professional_basketball", "final": {"question": "Which winning team in the 1947 playoff quarterfinals managed to score 3,513 defensive points that same year?", "sql": "SELECT T2.tmID FROM series_post AS T1 INNER JOIN teams AS T2 ON T1.tmIDWinner = T2.tmID WHERE T1.year = 1947 AND T1.round = 'QF' AND T2.d_pts = 3513", "source_tables": ["series_post", "teams"]}, "evidence": "team refers to tmID; quarterfinal refers to round = 'QF'; score 3,513 defensive points refers to d_pts > = 3513"}
{"sample_id": 2917, "db_id": "professional_basketball", "final": {"question": "Of the players drafted in NBA between 1990 and 2000, who has the most points in all-star? List the player's first name and last name.", "sql": "SELECT T3.firstname, T3.lastname FROM player_allstar AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID INNER JOIN draft AS T3 ON T1.playerID = T3.playerID WHERE T2.year BETWEEN 1990 AND 2000 ORDER BY T1.points DESC LIMIT 1", "source_tables": ["awards_players", "draft", "player_allstar"]}, "evidence": "NBA refers to lgID = 'NBA'; between 1990 and 2000 refers to year between 1990 and 2000; the most points refers to max(points)"}
{"sample_id": 2826, "db_id": "professional_basketball", "final": {"question": "Among the players who went to high school in Chicago, how many of them belongs to the west conference?", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.hsCity = 'Chicago' AND T2.conference = 'West'", "source_tables": ["players", "player_allstar"]}, "evidence": "high school in Chicago refers to hsCity = 'Chicago'; belong to the west conference refers to divID = 'WE'"}
{"sample_id": 2939, "db_id": "professional_basketball", "final": {"question": "In the year 1998, how many home wins did the team which had the 1st round, 12th pick have that year?", "sql": "SELECT T2.homeWon FROM draft AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.draftYear = T2.year WHERE T1.draftRound = 1 AND T1.draftSelection = 12 AND T1.draftYear = 1998", "source_tables": ["teams", "draft"]}, "evidence": "in 1998 refers to year = 1998; 1st round refers to draftRound = 1; 12th pick refers to draftSelection = 12; home win refers to homeWon"}
{"sample_id": 2896, "db_id": "professional_basketball", "final": {"question": "What is the percentage of offense rebounds from the total rebounds of the players in year 2000.", "sql": "SELECT CAST(SUM(T2.o_rebounds) AS REAL) * 100 / SUM(T2.rebounds) FROM players_teams AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 2000", "source_tables": ["players_teams", "player_allstar"]}, "evidence": "in year 2000 refers to year = 2000; percentage = divide(sum(o_rebounds), sum(rebounds)) * 100%"}
{"sample_id": 2855, "db_id": "professional_basketball", "final": {"question": "In 1937, how many teams whose players got at least 500 points?", "sql": "SELECT COUNT(*) FROM ( SELECT T2.name, SUM(T1.points) FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 1937 GROUP BY T2.name HAVING SUM(points) >= 500 ) AS T3", "source_tables": ["players_teams", "teams"]}, "evidence": "in 1937 refers to year = 1937; player got at least 500 points refers to Sum(points) > = 500"}
{"sample_id": 2924, "db_id": "professional_basketball", "final": {"question": "How many first round draft player in 1996 NBA draft became an All-Star?", "sql": "SELECT COUNT(T2.playerID) FROM draft AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.draftYear = 1996 AND T1.draftRound = 1", "source_tables": ["player_allstar", "draft"]}, "evidence": "first round refers to round = 1; in 1996 refers to year = 1996; NBA refers to lgID = 'NBA'"}
{"sample_id": 2849, "db_id": "professional_basketball", "final": {"question": "Among players who were born after 1950, who had offence rebounds rates more than 30%? Please list their last names and first names.", "sql": "SELECT DISTINCT T1.lastName, T1.firstName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.birthDate > 1950 AND CAST(T2.o_rebounds AS REAL) * 100 / T2.rebounds > 30", "source_tables": ["players", "player_allstar"]}, "evidence": "born after 1950 refers to birthDate > = '1950-01-01'; offence rebound rate more than 30% refers to Divide (oRebounds, rebounds) > 0.3"}
{"sample_id": 2836, "db_id": "professional_basketball", "final": {"question": "Who are the coaches for team with winning rate of 80% and above?", "sql": "SELECT coachID FROM coaches GROUP BY tmID, coachID, won, lost HAVING CAST(won AS REAL) * 100 / (won + lost) > 80", "source_tables": ["coaches"]}, "evidence": "winning rate of 80% and above refers to Divide (won, Sum(won, lost)) > 0.8; coaches refers to coachID"}
{"sample_id": 2922, "db_id": "professional_basketball", "final": {"question": "What is the difference in the average age of players when they are drafted in the ABA vs when they are drafted in the NBA between the years 1970 and 1970?", "sql": "SELECT CAST(SUM(IIF(T2.lgID = 'ABA', 1970 - strftime('%Y', T3.birthDate), 0)) AS REAL) / COUNT(IIF(T2.lgID = 'ABA', 1, 0)) - CAST(SUM(IIF(T2.lgID = 'NBA', 1970 - strftime('%Y', T3.birthDate), 0)) AS REAL) / COUNT(IIF(T2.lgID = 'NBA', 1, 0)) FROM draft AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID INNER JOIN players AS T3 ON T2.playerID = T3.playerID WHERE T1.draftYear BETWEEN 1970 AND 1970", "source_tables": ["players_teams", "players", "draft"]}, "evidence": "ABA refers to lgID = 'ABA'; NBA refers to lgID = 'NBA'; between the years 1970 and 1970 refers to draftYear between 1970 and 1970; difference = subtract(avg(subtract(1970, year(birthDate)) where lgID = 'ABA'), avg(subtract(1970, year(birthDate)) where lgID = 'NBA'))"}
{"sample_id": 2911, "db_id": "professional_basketball", "final": {"question": "Please list the top five players with the most steals in the year 1997. Please give their full name.", "sql": "SELECT DISTINCT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id = 1997 ORDER BY T2.steals DESC LIMIT 5", "source_tables": ["players", "player_allstar"]}, "evidence": "full name refers to firstName, middleName, lastName; in the year 1997 refers to year = 1997; the most steals refers to max(steals)"}
{"sample_id": 2952, "db_id": "professional_basketball", "final": {"question": "Which team had more than one player who grabbed more than 600 rebounds in 2011? Give the full name of the team.", "sql": "SELECT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 2011 AND T2.rebounds > 600", "source_tables": ["players_teams", "teams"]}, "evidence": "more than one player refers to count(playerID) > 1; grabbed more than 600 rebounds refers to rebounds > 600; in 2011 refers to 2011; full name refers to teams.name"}
{"sample_id": 2819, "db_id": "professional_basketball", "final": {"question": "Which winning team in the final round of the postseason series games against the LAL won more than 60 games in the NBA league during the year 1996?", "sql": "SELECT DISTINCT T2.tmID FROM series_post AS T1 INNER JOIN teams AS T2 ON T1.tmIDWinner = T2.tmID WHERE T2.won > 60 AND T1.year = 1996 AND T1.round = 'CSF' AND T1.tmIDLoser = 'LAL'", "source_tables": ["series_post", "teams"]}, "evidence": "final round of post season refers to round = 'CSF'; won against LAL refers to tmIDLoser = 'LAL'; in the NBA league refers to lgID = 'NBA'; won more than 60 games refers to won > 60"}
{"sample_id": 2796, "db_id": "professional_basketball", "final": {"question": "Among the winning game from the team, what is the percentage of the winning was home game.", "sql": "SELECT CAST(homeWon AS REAL) * 100 / won  FROM teams", "source_tables": ["teams"]}, "evidence": "percentage of winning at the home = Divide(homeWon, won) * 100"}
{"sample_id": 2925, "db_id": "professional_basketball", "final": {"question": "Which team did the MVP of 1997 NBA season play in?", "sql": "SELECT DISTINCT T3.tmID FROM players_teams AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T1.tmID = T3.tmID AND T1.year = T3.year WHERE T2.year = 1997 AND T2.award = 'Finals MVP' LIMIT 1", "source_tables": ["players_teams", "awards_players", "teams"]}, "evidence": "team refers to tmID; MVP refers to award like '%MVP'; 1997 refers to year = 1997; NBA refers to lgID = 'NBA'"}
{"sample_id": 2834, "db_id": "professional_basketball", "final": {"question": "Please list the top ten teams with the highest scores in 2000.", "sql": "SELECT tmID FROM players_teams WHERE year = 2000 GROUP BY tmID ORDER BY SUM(PostPoints) DESC LIMIT 10", "source_tables": ["players_teams"]}, "evidence": "in 2000 refers to year = 2000; team with highest score refers to Max(o_fgm)"}
{"sample_id": 2949, "db_id": "professional_basketball", "final": {"question": "Which team had the most same starting players througout the season? Give the full name of the team.", "sql": "SELECT DISTINCT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.GP = T2.GS", "source_tables": ["players_teams", "teams"]}, "evidence": "the same starting player refers to GP = GS; full name of the team refers to teams.name"}
{"sample_id": 2948, "db_id": "professional_basketball", "final": {"question": "For the player in 2011 who started every game he played, which team had the player who had the most steals?", "sql": "SELECT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 2011 AND T2.GP = T2.GS GROUP BY T1.tmID, T2.steals ORDER BY T2.steals DESC LIMIT 1", "source_tables": ["players_teams", "teams"]}, "evidence": "in 2011 refers to year = 2011; started every game refers to GP = GS; the most steals refers to max(steals); team refers to tmID"}
{"sample_id": 2945, "db_id": "professional_basketball", "final": {"question": "For the players who played the most PBLA games, who was graduated from Central Missouri State college?", "sql": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.lgID = 'PBLA' AND T2.GP = 10 AND T1.college = 'Central Missouri State' GROUP BY T1.firstName, T1.middleName, T1.lastName ORDER BY COUNT(T2.id) DESC LIMIT 1", "source_tables": ["players_teams", "players"]}, "evidence": "the most PBLA games refers to max(games_played); Central Missouri State college refers to college = 'Central Missouri State'"}
{"sample_id": 2865, "db_id": "professional_basketball", "final": {"question": "What is the full name of the team that has the most players from UCLA?", "sql": "SELECT T3.name FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T3.tmID = T2.tmID WHERE T1.college = 'UCLA' GROUP BY T3.name ORDER BY COUNT(DISTINCT T1.playerID) DESC LIMIT 1", "source_tables": ["players_teams", "players", "teams"]}, "evidence": "\"UCLA\" is the college; team with most players refers to tmID where Max(Count(playerID))"}
{"sample_id": 2895, "db_id": "professional_basketball", "final": {"question": "List the full name of players who are drafted from round 1 in 1973 but not born in USA.", "sql": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN draft AS T2 ON T1.playerID = T2.playerID WHERE T2.draftRound = 1 AND T1.birthCountry != 'USA' AND T2.draftYear = 1973", "source_tables": ["players", "draft"]}, "evidence": "full name refers to firstName, middleName, lastName; in 1973 refers to year = 1973; not born in USA refers to birthCountry <> 'USA'"}
{"sample_id": 2800, "db_id": "professional_basketball", "final": {"question": "What is the percentage of the teams who had post season (playoff) were ranked number 1?", "sql": "SELECT CAST(SUM(CASE WHEN rank = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(name) FROM teams", "source_tables": ["teams"]}, "evidence": "had post season (play off) refers to playoff is not null; percentage = Divide (Count(Team where rank = 1, Count(Team))) * 100"}
{"sample_id": 2942, "db_id": "professional_basketball", "final": {"question": "In the year 1997 allstar game, which teams did the players had the most rebounds play in? List their team ids.", "sql": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN player_allstar AS T3 ON T3.playerID = T1.playerID WHERE T3.season_id = 1997 ORDER BY T1.rebounds DESC LIMIT 1", "source_tables": ["players_teams", "teams", "player_allstar"]}, "evidence": "in 1997 refers to year = 1997; the most rebounds refers to max(rebounds); team id refers to tmID"}
{"sample_id": 2869, "db_id": "professional_basketball", "final": {"question": "What is the average height of an East conference All-star player?", "sql": "SELECT AVG(DISTINCT height) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE conference = 'East'", "source_tables": ["players", "player_allstar"]}, "evidence": "average height refers to avg(height)"}
{"sample_id": 2816, "db_id": "professional_basketball", "final": {"question": "in which year costela01 obtained the best balance of games won as a coach?", "sql": "SELECT year FROM coaches WHERE coachID = 'costela01' ORDER BY CAST(won AS REAL) / (won + lost) DESC LIMIT 1", "source_tables": ["coaches"]}, "evidence": "\"costela01\" is the coachID; best balance of game won refers to Max(Divide(won, Sum(won, lost)))"}
{"sample_id": 2844, "db_id": "professional_basketball", "final": {"question": "In 1975, what was the average point of all-star players coming from the USA?", "sql": "SELECT AVG(T2.points) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id = 1975", "source_tables": ["players", "player_allstar"]}, "evidence": "in 1975 refers to season_id = 1975; coming from USA refers to birthCountry = 'USA'; average point refers to Divide (Sum(points), Count(playerID))"}
{"sample_id": 2879, "db_id": "professional_basketball", "final": {"question": "How many teams in the NBA which has at least 3 all-star players?", "sql": "SELECT COUNT(*) FROM ( SELECT tmID FROM players_teams AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.lgID = 'NBA' GROUP BY T1.tmID HAVING COUNT(DISTINCT T1.playerID) > 3 ) AS T3", "source_tables": ["players_teams", "player_allstar"]}, "evidence": "NBA refers to lgID = 'NBA'; have at least 3 all-star players refers to count(player_allstar.playerID) > 3"}
{"sample_id": 2832, "db_id": "professional_basketball", "final": {"question": "What is the average weight of the players who have won the award of Rookie of the year?", "sql": "SELECT AVG(T1.weight) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Rookie of the Year'", "source_tables": ["players", "awards_players"]}, "evidence": "\"Rookie of the Year\" is the award; average weight = Divide (Sum(weight), Count(playerID))"}
{"sample_id": 2859, "db_id": "professional_basketball", "final": {"question": "How many field goals did George Mikan make overall between 1951 and 1953?", "sql": "SELECT COUNT(fg_made) FROM player_allstar WHERE first_name = 'George' AND last_name = 'Mikan' AND season_id BETWEEN 1951 AND 1953", "source_tables": ["player_allstar"]}, "evidence": "between 1951 and 1953 refers to season_id; field goal refers to fg_made"}
{"sample_id": 2888, "db_id": "professional_basketball", "final": {"question": "List the first name, last name and team name of players who are drafted from 'Seattle' between year 1965 to 1970.", "sql": "SELECT DISTINCT T1.firstName, T1.lastName, T3.name FROM players AS T1 INNER JOIN draft AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T2.tmID = T3.tmID WHERE T2.draftFrom = 'Seattle' AND T2.draftYear BETWEEN 1965 AND 1970", "source_tables": ["players", "teams", "draft"]}, "evidence": "team name refers to teams.name; drafted from 'Seattle' refers to draftFrom = 'Seattle'; between year 1965 to 1970 refers to draftYear between 1965 and 1970"}
{"sample_id": 2961, "db_id": "shakespeare", "final": {"question": "How many paragraphs contain the character Lord Abergavenny?", "sql": "SELECT SUM(T1.ParagraphNum) FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.character_id = T2.id WHERE T2.CharName = 'Lord Abergavenny'", "source_tables": ["characters", "paragraphs"]}, "evidence": "Lord Abergavenny refers to CharName = 'Lord Abergavenny'"}
{"sample_id": 3007, "db_id": "shakespeare", "final": {"question": "How many paragraphs are there in the longest chapter where Sir Richard Ratcliff appeared?", "sql": "SELECT MAX(T2.ParagraphNum) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Sir Richard Ratcliff'", "source_tables": ["characters", "paragraphs"]}, "evidence": "longest chapter refers to max(ParagraphNum); Sir Richard Ratcliff\u00a0 refers to CharName = 'Sir Richard Ratcliff'"}
{"sample_id": 2988, "db_id": "shakespeare", "final": {"question": "How many scenes are there in work id 7, act 1?", "sql": "SELECT COUNT(id) FROM chapters WHERE work_id = 7 AND Act = 1", "source_tables": ["chapters"]}, "evidence": ""}
{"sample_id": 2993, "db_id": "shakespeare", "final": {"question": "What is the description of the chapter with the longest number of paragraphs?", "sql": "SELECT T2.Description FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id ORDER BY T1.ParagraphNum DESC LIMIT 1", "source_tables": ["chapters", "paragraphs"]}, "evidence": "chapter with the longest number of paragraphs refers to max(ParagraphNum)"}
{"sample_id": 2976, "db_id": "shakespeare", "final": {"question": "Give the title of the work that contains the character \"Shylock\".", "sql": "SELECT DISTINCT T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.CharName = 'Shylock'", "source_tables": ["chapters", "works", "characters", "paragraphs"]}, "evidence": "character \"Shylock\" refers to CharName = 'Shylock'"}
{"sample_id": 2960, "db_id": "shakespeare", "final": {"question": "Please list all the paragraphs in Act 1, Scene 1 in Twelfth Night.", "sql": "SELECT T3.PlainText FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T2.Act = 1 AND T2.Scene = 1 AND T1.Title = 'Twelfth Night'", "source_tables": ["chapters", "works", "paragraphs"]}, "evidence": "Twelfth Night refers to Title = 'Twelfth Night'; list the paragraphs refers to PlainText"}
{"sample_id": 2964, "db_id": "shakespeare", "final": {"question": "How many characters are there in Twelfth Night?", "sql": "SELECT COUNT(DISTINCT T4.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.Title = 'Twelfth Night'", "source_tables": ["chapters", "works", "characters", "paragraphs"]}, "evidence": "Twelfth Night refers to Title = 'Twelfth Night'"}
{"sample_id": 2963, "db_id": "shakespeare", "final": {"question": "For how many times has the scene \"OLIVIA\u2019S house.\" appeared in Twelfth Night?", "sql": "SELECT COUNT(T2.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Description = 'OLIVIA\u2019S house.' AND T1.Title = 'Twelfth Night'", "source_tables": ["chapters", "works"]}, "evidence": "\"OLIVIA\u2019S house.\"\u00a0 refers to chapters.Description = 'OLIVIA\u2019S house.'; Twelfth Night refers to Title = 'Twelfth Night'"}
{"sample_id": 3003, "db_id": "shakespeare", "final": {"question": "Among the history works written by Shakespeare, how many works whose 1st acts have no more than 2 scenes?", "sql": "SELECT COUNT(DISTINCT T2.work_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 1 AND T2.Scene < 2 AND T1.GenreType = 'History'", "source_tables": ["chapters", "works"]}, "evidence": "history refers to GenreType = 'History' ; 1st acts\u00a0 refers to Act = 1; no more than 2 scenes refers to count(Scene) < 2"}
{"sample_id": 3021, "db_id": "shakespeare", "final": {"question": "How many chapters include the character name \"First Witch\"?", "sql": "SELECT COUNT(T2.chapter_id) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'First Witch'", "source_tables": ["characters", "paragraphs"]}, "evidence": "character name \"First Witch\" refers to CharName = 'First Witch'"}
{"sample_id": 2971, "db_id": "shakespeare", "final": {"question": "Which chapter has the most paragraphs? Give the description of the chapter.", "sql": "SELECT T1.Description FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.chapter_id ORDER BY T2.ParagraphNum DESC LIMIT 1", "source_tables": ["chapters", "paragraphs"]}, "evidence": "most paragraphs refers to max(count(chapter_id))"}
{"sample_id": 2995, "db_id": "shakespeare", "final": {"question": "What are the descriptions of the short chapters?", "sql": "SELECT DISTINCT T2.Description FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id WHERE T1.ParagraphNum < 150", "source_tables": ["chapters", "paragraphs"]}, "evidence": "short chapters refers to ParagraphNum < 150"}
{"sample_id": 3002, "db_id": "shakespeare", "final": {"question": "How many scenes are there in the 5th act of \"History of Henry VIII\"?", "sql": "SELECT SUM(T2.Scene) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 5 AND T1.LongTitle = 'History of Henry VIII'", "source_tables": ["chapters", "works"]}, "evidence": "5th act refers to Act = 5; \"History of Henry VIII\" refers to LongTitle = 'History of Henry VIII'"}
{"sample_id": 2975, "db_id": "shakespeare", "final": {"question": "What is the description for the character mentioned in paragraph No.640171?", "sql": "SELECT T1.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.id = '640171'", "source_tables": ["characters", "paragraphs"]}, "evidence": "paragraph No.640171 refers to paragraphs.id = '640171'"}
{"sample_id": 3004, "db_id": "shakespeare", "final": {"question": "How many acts are there in Sonnets?", "sql": "SELECT SUM(DISTINCT T2.Act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Sonnets'", "source_tables": ["chapters", "works"]}, "evidence": "Sonnets refers to Title = 'Sonnets'"}
{"sample_id": 2991, "db_id": "shakespeare", "final": {"question": "How many paragraphs are there in \"Ay, surely, mere the truth: I know his lady.\"?", "sql": "SELECT ParagraphNum FROM paragraphs WHERE PlainText = 'Ay, surely, mere the truth: I know his lady.'", "source_tables": ["paragraphs"]}, "evidence": "\"Ay, surely, mere the truth: I know his lady.\" refers to PlainText = 'Ay, surely, mere the truth: I know his lady.'"}
{"sample_id": 2958, "db_id": "shakespeare", "final": {"question": "Please list the character names of all the characters from the work Twelfth Night.", "sql": "SELECT DISTINCT T4.CharName FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.Title = 'Twelfth Night'", "source_tables": ["chapters", "works", "characters", "paragraphs"]}, "evidence": "character names refers to CharName; Twelfth Night refers to Title = 'Twelfth Night'"}
{"sample_id": 2994, "db_id": "shakespeare", "final": {"question": "In \"Twelfth Night, Or What You Will\", what is the description of the chapter in 2nd scene, Act 2?", "sql": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.LongTitle = 'Twelfth Night, Or What You Will' AND T2.Scene = 2 AND T2.Act = 2", "source_tables": ["chapters", "works"]}, "evidence": "\"Twelfth Night, Or What You Will\"\u00a0 refers to LongTitle = 'Twelfth Night, Or What You Will'; 2nd scene refers to Scene = 2"}
{"sample_id": 2996, "db_id": "shakespeare", "final": {"question": "Which of Shakespeare's work has chapter description of \"A field near Windsor\"?", "sql": "SELECT T2.Title FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T1.Description = 'A field near Windsor.'", "source_tables": ["chapters", "works"]}, "evidence": ""}
{"sample_id": 3024, "db_id": "shakespeare", "final": {"question": "Describe the scene number, act, and title of work which had the description of \"The house of ANTIPHOLUS of Ephesus\" in chapter.", "sql": "SELECT T2.Act, T2.Scene, T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Description = 'The house of ANTIPHOLUS of Ephesus.'", "source_tables": ["chapters", "works"]}, "evidence": ""}
{"sample_id": 2955, "db_id": "shakespeare", "final": {"question": "What is the description of Act 1, Scene 2 in Twelfth Night?", "sql": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Twelfth Night' AND T2.Act = 1 AND T2.Scene = 2", "source_tables": ["chapters", "works"]}, "evidence": "Twelfth Night refers to Title = 'Twelfth Night'"}
{"sample_id": 2977, "db_id": "shakespeare", "final": {"question": "How many scenes are there in King John?", "sql": "SELECT COUNT(T2.Scene) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'King John'", "source_tables": ["chapters", "works"]}, "evidence": "King John refers to Title = 'King John'"}
{"sample_id": 3134, "db_id": "cars", "final": {"question": "What is the price of Chevrolet Vega 2300?", "sql": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'chevrolet vega 2300'", "source_tables": ["price", "data"]}, "evidence": "Chevrolet Vega 2300 refers to car_name = 'chevrolet vega 2300'"}
{"sample_id": 3078, "db_id": "cars", "final": {"question": "Show the origin country of Chevrolet Malibu.", "sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.car_name = 'chevrolet malibu'", "source_tables": ["production", "country", "data"]}, "evidence": "origin country refers to country; Chevrolet Malibu refers to car_name = 'chevrolet malibu'"}
{"sample_id": 3082, "db_id": "cars", "final": {"question": "How much is the Volkswagen Dasher with 14.1 mph acceleration?", "sql": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'volkswagen dasher' AND T1.acceleration = '14.1'", "source_tables": ["price", "data"]}, "evidence": "cost refers to price; Volkswagen Dasher refers to car_name = 'volkswagen dasher'; 14.1 mph acceleration refers to acceleration = 14.1"}
{"sample_id": 3137, "db_id": "cars", "final": {"question": "Which is the most fuel efficient car in 1975?", "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T2.model_year = '1975' ORDER BY T1.mpg DESC LIMIT 1", "source_tables": ["production", "data"]}, "evidence": "car's name refers to car_name; the most fuel efficient refers to max(mpg); in 1975 refers to model_year = 1975"}
{"sample_id": 3136, "db_id": "cars", "final": {"question": "List the price of Ford cars from model 1970 to 1980.", "sql": "SELECT DISTINCT T3.price FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN price AS T3 ON T3.ID = T2.ID WHERE T1.car_name LIKE 'ford%' AND T2.model_year BETWEEN 1970 AND 1980", "source_tables": ["production", "price", "data"]}, "evidence": "Ford cars refers to car_name LIKE 'ford%'; from model 1970 to 1980 refers to model_year BETWEEN 1970 AND 1980"}
{"sample_id": 3089, "db_id": "cars", "final": {"question": "What is the percentage of Japanese cars in the database?", "sql": "SELECT CAST(SUM(CASE WHEN T2.country = 'Japan' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin", "source_tables": ["production", "country"]}, "evidence": "Japanese car refers to country = 'Japan'; percentage = divide(count(ID where country = 'Japan'), count(ID)) * 100%"}
{"sample_id": 3077, "db_id": "cars", "final": {"question": "How many cars in the database are originated from Europe?", "sql": "SELECT COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'Europe'", "source_tables": ["production", "country"]}, "evidence": "originated from Europe refers to country = 'Europe'"}
{"sample_id": 3141, "db_id": "cars", "final": {"question": "List the name of the most expensive car.", "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1", "source_tables": ["price", "data"]}, "evidence": "car's name refers to car_name; the most expensive refers to max(price)"}
{"sample_id": 3073, "db_id": "cars", "final": {"question": "Please list the weights of all the cars with the price over $40000.", "sql": "SELECT T1.weight FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price > 40000", "source_tables": ["price", "data"]}, "evidence": "price over $40000 refers to price > 40000"}
{"sample_id": 3106, "db_id": "cars", "final": {"question": "Calculate the average price of cars from Europe.", "sql": "SELECT AVG(T1.price) FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T3.country = 'Europe'", "source_tables": ["production", "price", "country"]}, "evidence": "from Europe refers to country = 'Europe'; average price = avg(price) where country = 'Europe'"}
{"sample_id": 3067, "db_id": "cars", "final": {"question": "What was the origin country of the car model ford torino produced in 1970?", "sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.car_name = 'ford torino' AND T2.model_year = 1970", "source_tables": ["production", "country", "data"]}, "evidence": "origin country refers to country; Ford Torino refers to car_name = 'ford torino'; produced in 1970 refers to model_year = 1970"}
{"sample_id": 3079, "db_id": "cars", "final": {"question": "What are the miles per gallon of the most expensive car?", "sql": "SELECT T1.mpg FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1", "source_tables": ["price", "data"]}, "evidence": "miles per gallon refers to mpg; the most expensive refers to max(price)"}
{"sample_id": 3084, "db_id": "cars", "final": {"question": "When was the $32650.65157 car introduced to the market? State the year.", "sql": "SELECT T1.model FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = '32650.65157'", "source_tables": ["price", "data"]}, "evidence": "the $32650.65157 car refers to price = 32650.65157; year refers to model"}
{"sample_id": 3126, "db_id": "cars", "final": {"question": "Which country produced the car with the lowest price?", "sql": "SELECT T3.country FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country ORDER BY T1.price ASC LIMIT 1", "source_tables": ["production", "price", "country"]}, "evidence": "the lowest price refers to min(price)"}
{"sample_id": 3110, "db_id": "cars", "final": {"question": "Provide the ID of cars from Japan worth greater than 35000 and have an acceleration of 14.", "sql": "SELECT T4.ID FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T3.country = 'Japan' AND T1.price > 3500 AND T4.acceleration = 14", "source_tables": ["production", "price", "data", "country"]}, "evidence": "from Japan refers to country = 'Japan'; worth greater than 35000 refers to price > 35000; have an acceleration of 14 refers to acceleration = 14"}
{"sample_id": 3085, "db_id": "cars", "final": {"question": "Provide the price of the only Toyota Corona hardtop in the database.", "sql": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'toyota corona hardtop'", "source_tables": ["price", "data"]}, "evidence": "Toyota Corona hardtop refers to car_name = 'toyota corona hardtop'"}
{"sample_id": 3191, "db_id": "donor", "final": {"question": "How many donors from New Jersey have made a donation for an honoree?", "sql": "SELECT COUNT(donationid) FROM donations WHERE for_honoree = 't' AND donor_state = 'NJ'", "source_tables": ["donations"]}, "evidence": "from New Jersey refers to donor_state = 'NJ'; for an honoree refers to for_honoree = 't';"}
{"sample_id": 3283, "db_id": "donor", "final": {"question": "Find out if the project with the title Team More Books! has a New York teaching fellow.", "sql": "SELECT T2.teacher_ny_teaching_fellow FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Team More Books!'", "source_tables": ["essays", "projects"]}, "evidence": "title Team More Books! Refers to title = 'Team More Books!'; as a New York teaching fellow refers to teacher_ny_teaching_fellow = 't'"}
{"sample_id": 3211, "db_id": "donor", "final": {"question": "Is teacher \"42d43fa6f37314365d08692e08680973\" a New York teacher?", "sql": "SELECT teacher_ny_teaching_fellow end FROM projects WHERE teacher_acctid = '42d43fa6f37314365d08692e08680973'", "source_tables": ["projects"]}, "evidence": "teacher \"42d43fa6f37314365d08692e08680973\"refers to teacher_acctid = '42d43fa6f37314365d08692e08680973';"}
{"sample_id": 3242, "db_id": "donor", "final": {"question": "Show the school id for the project 'Virtual Aquarium Needs Help!'.", "sql": "SELECT T2.schoolid FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Virtual Aquarium Needs Help!'", "source_tables": ["essays", "projects"]}, "evidence": "Virtual Aquarium Needs Help!' is the title;"}
{"sample_id": 3234, "db_id": "donor", "final": {"question": "Is the donor of the project 'Calculate, Financial Security For Tomorrow Starts Today! ' a teacher?", "sql": "SELECT T2.is_teacher_acct FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Calculate, Financial Security For Tomorrow Starts Today! '", "source_tables": ["donations", "essays"]}, "evidence": "Calculate, Financial Security For Tomorrow Starts Today! ' is title; donor is a teacher refers to is_teacher_acct = 't'"}
{"sample_id": 3244, "db_id": "donor", "final": {"question": "For the donation of the project 'Awesome Audiobooks Make Avid Readers', what was the percentage of the tip in the total amount?", "sql": "SELECT CAST(SUM(T2.donation_optional_support) AS REAL) * 100 / SUM(T2.donation_total) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Awesome Audiobooks Make Avid Readers'", "source_tables": ["donations", "essays"]}, "evidence": "Awesome Audiobooks Make Avid Readers' is the title; percentage = Divie(donation_optional_support, donation_total)*100;"}
{"sample_id": 3227, "db_id": "donor", "final": {"question": "What is the number of the year round school in Los Angeles?", "sql": "SELECT COUNT(school_year_round) FROM projects WHERE school_city = 'Los Angeles' AND school_year_round = 't'", "source_tables": ["projects"]}, "evidence": "Los Angeles is school_city; year-round school refers to school_year_round = 't';"}
{"sample_id": 3268, "db_id": "donor", "final": {"question": "What is the sum of the total donated amounts paid through Amazon?", "sql": "SELECT SUM(donation_to_project) + SUM(donation_optional_support) FROM donations WHERE payment_method = 'amazon'", "source_tables": ["donations"]}, "evidence": "paid through Amazon refers to payment_method = 'Amazon'; sum of the total donated amounts refers to SUM(donation_to_project,donation_optional_support)"}
{"sample_id": 3284, "db_id": "donor", "final": {"question": "What is the name of the vendors that serve resources to schools whose primary focus area is Literature?", "sql": "SELECT T1.vendor_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_area LIKE 'Literacy%' GROUP BY T1.vendor_name ORDER BY COUNT(T2.primary_focus_area) DESC LIMIT 1", "source_tables": ["resources", "projects"]}, "evidence": "primary focus area is Literature refers to primary_focus_area = 'Literature'"}
{"sample_id": 3292, "db_id": "donor", "final": {"question": "What is the average amount of resources from projects that have received donations per honoree?", "sql": "SELECT AVG(T1.item_quantity) FROM resources AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.for_honoree = 't'", "source_tables": ["donations", "resources"]}, "evidence": "donations per honoree refers to for_honoree = 't'; average refers to DIVIDE(sum(item_quantity), count(donationid))"}
{"sample_id": 3294, "db_id": "donor", "final": {"question": "Which item provided for projects with Mathematics as a primary subject is the most expensive?", "sql": "SELECT T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_subject = 'Mathematics' ORDER BY T1.item_unit_price DESC LIMIT 1", "source_tables": ["resources", "projects"]}, "evidence": "Mathematics as a primary subject refers to primary_focus_subject = 'Mathematics'; most expensive refers to max(item_unit_price)"}
{"sample_id": 3301, "db_id": "donor", "final": {"question": "List the primary subject of all the donations with a corporate sponsored giftcard.", "sql": "SELECT DISTINCT T2.primary_focus_subject FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.payment_included_campaign_gift_card = 't'", "source_tables": ["donations", "projects"]}, "evidence": "corporate sponsored giftcard refers to payment_included_campaign_gift_card = 't'; primary subject refers to primary_focus_subject"}
{"sample_id": 3179, "db_id": "donor", "final": {"question": "From which state do the 5 biggest donor, who gave the highest cost of optional support, come from? List their donor_acctid and calculate for their average cost of optional support for every donations they make and identtify the project's type of resource to which they gave the hightest optional support.", "sql": "SELECT T1.school_state, T2.donor_acctid, AVG(T2.donation_optional_support), T1.resource_type FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid ORDER BY T2.donation_optional_support DESC LIMIT 5", "source_tables": ["donations", "projects"]}, "evidence": "which state refers to school_state; highest cost of optional support refers to max(donation_optional_support); average cost of optional support = avg(donation_optional_support)"}
{"sample_id": 3190, "db_id": "donor", "final": {"question": "Among all the donors from New York, how many of them are teachers?", "sql": "SELECT COUNT(donationid) FROM donations WHERE is_teacher_acct = 't' AND donor_city = 'New York'", "source_tables": ["donations"]}, "evidence": "from New York refers to donor_city = 'New York'; donor is a teacher refers to is_teacher_acct = 't';"}
{"sample_id": 3213, "db_id": "donor", "final": {"question": "Please list the resource names of project that teacher \"822b7b8768c17456fdce78b65abcc18e\" created.", "sql": "SELECT T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'", "source_tables": ["resources", "projects"]}, "evidence": "teacher \"822b7b8768c17456fdce78b65abcc18e\" refers to teacher_acctid = '822b7b8768c17456fdce78b65abcc18e';"}
{"sample_id": 3247, "db_id": "donor", "final": {"question": "Write down the need statement of Family History Project.", "sql": "SELECT need_statement FROM essays WHERE title = 'Family History Project'", "source_tables": ["essays"]}, "evidence": "Family History Project refer to title, need statement refer to need_statement"}
{"sample_id": 3166, "db_id": "donor", "final": {"question": "Which state have the highest number of PayPal donations for an honoree whose portion of a donation included corporate sponsored giftcard?", "sql": "SELECT DISTINCT donor_state FROM donations WHERE for_honoree = 't' AND payment_included_campaign_gift_card = 't' AND payment_method = 'paypal' AND donor_state = ( SELECT donor_state FROM donations GROUP BY donor_state ORDER BY SUM(donation_total) DESC LIMIT 1 )", "source_tables": ["donations"]}, "evidence": "which state refers to donor_state; highest number refers to max(count(donor_state)); PayPal donations refers to payment_method = 'paypal'; for an honoree refers to for_honoree = 't'; included corporate sponsored giftcard refers to payment_included_campaign_gift_card = 't'"}
{"sample_id": 3280, "db_id": "donor", "final": {"question": "How many schools with the highest level of poverty have received a portion of a donation included corporate sponsored gift card?", "sql": "SELECT COUNT(T1.schoolid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.payment_included_campaign_gift_card = 't' AND T1.poverty_level = 'highest poverty'", "source_tables": ["donations", "projects"]}, "evidence": "highest level of poverty refers to poverty_level = 'highest'; received a portion of a donation included corporate sponsored gift card refers to payment_included_campaign_gift_card = 't'"}
{"sample_id": 3215, "db_id": "donor", "final": {"question": "Please provide the type of resource that donation \"b39547f29dfc25fb13c6e9e8d940dc43\" contain.", "sql": "SELECT DISTINCT T1.project_resource_type FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T3.donationid LIKE 'b39547f29dfc25fb13c6e9e8d940dc43'", "source_tables": ["donations", "resources", "projects"]}, "evidence": "donation \"b39547f29dfc25fb13c6e9e8d940dc43\" refers to donationid = 'b39547f29dfc25fb13c6e9e8d940dc43'; type of resource refers to project_resource_type;"}
{"sample_id": 3167, "db_id": "donor", "final": {"question": "Who is the largest donor by amount? Give the donation id and the total amount of the donation.", "sql": "SELECT donationid, donation_total FROM donations ORDER BY donation_total DESC LIMIT 1", "source_tables": ["donations"]}, "evidence": "largest donor by amount refers to max(donation_total); total amount of the donation refers to donation_total"}
{"sample_id": 3231, "db_id": "donor", "final": {"question": "What is the total number of projects that was created by the teachers that teach 3-5 grades in Boston Public School District?", "sql": "SELECT COUNT(projectid) FROM projects WHERE school_district = 'Boston Public School District' AND grade_level = 'Grades 3-5'", "source_tables": ["projects"]}, "evidence": "teach 3-5 grades refers to grade_level = 'Grades 3-5'; 'Boston Public School District' is school_district;"}
{"sample_id": 3196, "db_id": "donor", "final": {"question": "How many projects have their resources provided by the vendor Lakeshore Learning Materials and are created by a teacher with a doctor degree?", "sql": "SELECT COUNT(T1.projectid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.vendor_name = 'Lakeshore Learning Materials' AND T2.teacher_prefix = 'Dr.'", "source_tables": ["resources", "projects"]}, "evidence": "Lakeshore Learning Materials is vendor_name;\u00a0 teacher with a doctor degree refers to teacher_prefix = 'Dr.';"}
{"sample_id": 3279, "db_id": "donor", "final": {"question": "How many schools in Brooklyn with urban metro and donations for an honoree have requested TT992 - Refill Pack for Safety Name Tags as a resource?", "sql": "SELECT COUNT(T2.schoolid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T2.school_city = 'Brooklyn' AND T2.school_metro = 'urban' AND T3.for_honoree = 't' AND T1.item_name = 'TT992 - Refill Pack for Safety Name Tags'", "source_tables": ["donations", "resources", "projects"]}, "evidence": "in Brooklyn refers to school_city = 'Brooklyn'; urban metro refers to school_metro = 'urban'; donations for an honoree refers to for_honoree = 't'; requested TT992 - Refill Pack for Safety Name Tags refers to item_name = 'TT992 - Refill Pack for Safety Name Tags'"}
{"sample_id": 3291, "db_id": "donor", "final": {"question": "In what percentage of counties has the ABC Read project been launched?", "sql": "SELECT CAST(SUM(CASE WHEN T2.title LIKE 'ABC Read' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.school_county) FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid", "source_tables": ["essays", "projects"]}, "evidence": "ABC Read project been launched refers to title = 'ABC Read'; percentage refers to DIVIDE(count(case when title = 'ABC Read' then school_county else null end),count(school_county))*100"}
{"sample_id": 3157, "db_id": "donor", "final": {"question": "Name the vendors who provide resources for project 'Lights, Camera, Action!'. List all the item names and unit price for each.", "sql": "SELECT T1.vendor_name, T1.item_name, T1.item_unit_price FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN essays AS T3 ON T2.projectid = T3.projectid WHERE T3.title = 'Lights, Camera, Action!'", "source_tables": ["essays", "resources", "projects"]}, "evidence": "project 'Lights, Camera, Action!' refers to title = 'Lights, Camera, Action!'"}
{"sample_id": 3181, "db_id": "donor", "final": {"question": "How many schools in urban area requested for books resources?", "sql": "SELECT COUNT(T2.schoolid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.resource_type = 'Books' AND T2.school_metro = 'urban'", "source_tables": ["resources", "projects"]}, "evidence": "urban area refers to school_metro = 'urban'; books resources refers to project_resource_type = 'Books'"}
{"sample_id": 3158, "db_id": "donor", "final": {"question": "How much donations have been collected for project 'Whistle While We Work!'?", "sql": "SELECT SUM(T2.donation_to_project) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title = 'Whistle While We Work!'", "source_tables": ["donations", "essays"]}, "evidence": "donations collected refers to sum(donation_to_project); project 'Whistle While We Work!' refers to title = 'Whistle While We Work!'"}
{"sample_id": 3293, "db_id": "donor", "final": {"question": "When did the project \"Photojournalists Want to Exhibit Their Best Works\" go live?", "sql": "SELECT T1.date_posted FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title LIKE 'Photojournalists Want to Exhibit Their Best Works'", "source_tables": ["essays", "projects"]}, "evidence": "project \"Photojournalists Want to Exhibit Their Best Works\" refers to title = 'Photojournalists Want to Exhibit Their Best Works'; when project go live refers to datePosted"}
{"sample_id": 3194, "db_id": "donor", "final": {"question": "What is the name of the item that is provided in the biggest amount by the vendor Lakeshore Learning Materials?", "sql": "SELECT item_name FROM resources WHERE vendor_name = 'Lakeshore Learning Materials' ORDER BY item_quantity DESC LIMIT 1", "source_tables": ["resources"]}, "evidence": "lakeshore Learning Materials is vendor_name; biggest amount refers to Max(item_quantity);"}
{"sample_id": 3259, "db_id": "donor", "final": {"question": "Write the messages of those who donated to the Newark School District in the coordinates of 40.735332, -74.196014.", "sql": "SELECT T1.donation_message FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_latitude = 40.735332 AND T2.school_longitude = -74.196014 AND T2.school_district = 'Newark School District'", "source_tables": ["donations", "projects"]}, "evidence": "message refer to donation_message; Newark School District refer to school_district; 40.735332, -74.196014 refer to (school latitude, school_longitude)"}
{"sample_id": 3208, "db_id": "donor", "final": {"question": "To which city did donor \u201c22cbc920c9b5fa08dfb331422f5926b5\u201d donate?", "sql": "SELECT DISTINCT donor_city FROM donations WHERE donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5'", "source_tables": ["donations"]}, "evidence": "donor \u201c22cbc920c9b5fa08dfb331422f5926b5\u201d refers to donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5'; city refers to donor_city"}
{"sample_id": 3239, "db_id": "donor", "final": {"question": "State the short description for the project which got the donation at 14:44:29 on 2012/9/6.", "sql": "SELECT T1.short_description FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_timestamp LIKE '2012-09-06 14:44:29'", "source_tables": ["donations", "essays"]}, "evidence": "donation at 14:44:29 on 2012/9/6 refers to donation_timestamp = '2012/9/6 14:44:29';"}
{"sample_id": 3475, "db_id": "video_games", "final": {"question": "What is the genre of the game \"Grand Theft Auto V\"?", "sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = 'Grand Theft Auto V'", "source_tables": ["game", "genre"]}, "evidence": "genre refers to genre_name; \"Grand Theft Auto V\" refers to game_name = 'Grand Theft Auto V';"}
{"sample_id": 3363, "db_id": "video_games", "final": {"question": "What is the average number of sales in Japan?", "sql": "SELECT AVG(T2.num_sales) * 100000 AS avg_japan FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Japan'", "source_tables": ["region", "region_sales"]}, "evidence": "in Japan refers to region_name = 'Japan'; average number of sales = multiply(avg(num_sales), 100000) where region_name = 'Japan'"}
{"sample_id": 3429, "db_id": "video_games", "final": {"question": "How many games include the word 'Box' in their name?", "sql": "SELECT COUNT(*) FROM ( SELECT T.game_name FROM game AS T WHERE T.game_name LIKE '%Box%' )", "source_tables": ["game"]}, "evidence": "games include the word 'Box' in their name refers to game_name = '%Box%';"}
{"sample_id": 3443, "db_id": "video_games", "final": {"question": "In which regions has the game 'Pengo' been sold?", "sql": "SELECT T5.region_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN region_sales AS T4 ON T3.id = T4.game_platform_id INNER JOIN region AS T5 ON T4.region_id = T5.id WHERE T1.game_name = 'Pengo'", "source_tables": ["region_sales", "game_publisher", "region", "game_platform", "game"]}, "evidence": "which regions refers to region_name; 'Pengo' refers to game_name = 'Pengo';"}
{"sample_id": 3439, "db_id": "video_games", "final": {"question": "Indicate, by region, which platform has sold the most games.", "sql": "SELECT T.region_name FROM ( SELECT T1.platform_name, T4.region_name, SUM(T3.num_sales) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN region_sales AS T3 ON T1.id = T3.game_platform_id INNER JOIN region AS T4 ON T3.region_id = T4.id GROUP BY T1.platform_name, T4.region_name ORDER BY SUM(T3.num_sales) DESC LIMIT 1 ) t", "source_tables": ["game_platform", "region", "region_sales", "platform"]}, "evidence": "region refers to region_name; platform refers to game_platform; sold the most games refers to MAX(SUM(num_sales));"}
{"sample_id": 3354, "db_id": "video_games", "final": {"question": "What are the names of the games that were published by 505 Games?", "sql": "SELECT T3.game_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.publisher_name = '505 Games'", "source_tables": ["game", "game_publisher", "publisher"]}, "evidence": "name of game refers to game_name; published by 505 Games refers to publisher_name = '505 Games'"}
{"sample_id": 3479, "db_id": "video_games", "final": {"question": "Find out the platform of the game \"Final Fantasy XIII-2\".", "sql": "SELECT T4.platform_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.game_name = 'Final Fantasy XIII-2'", "source_tables": ["game", "platform", "game_platform", "game_publisher"]}, "evidence": "platform of the game refers to platform_name; \"Final Fantasy XIII-2\" refers to game_name = 'Final Fantasy XIII-2';"}
{"sample_id": 3410, "db_id": "video_games", "final": {"question": "How many different publishers have published a game that starts with \"Marvel\"?", "sql": "SELECT COUNT(DISTINCT T1.publisher_id) FROM game_publisher AS T1 INNER JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.game_name LIKE 'Marvel%'", "source_tables": ["game", "game_publisher"]}, "evidence": "game that starts with \"Marvel\" refers to game_name LIKE 'Marvel%';"}
{"sample_id": 3451, "db_id": "video_games", "final": {"question": "What platform is the game 3Xtreme available on?", "sql": "SELECT T2.platform_name FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id INNER JOIN game_publisher AS T3 ON T1.game_publisher_id = T3.id INNER JOIN game AS T4 ON T3.game_id = T4.id WHERE T4.game_name = '3Xtreme'", "source_tables": ["game", "platform", "game_platform", "game_publisher"]}, "evidence": "what platform refers to platform_name; 3Xtreme refers to game_name = '3Xtreme';"}
{"sample_id": 3369, "db_id": "video_games", "final": {"question": "What is the release year of the game that gained 350000 sales in North America?", "sql": "SELECT T3.release_year FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id WHERE T2.num_sales * 100000 = 350000 AND T1.region_name = 'North America'", "source_tables": ["region", "region_sales", "game_platform"]}, "evidence": "gained 350000 sales refers to num_sales = 3.5; in North America refers to region_name = 'North America'"}
{"sample_id": 3485, "db_id": "video_games", "final": {"question": "Calculate the total sales in all regions with game platform ID 66.", "sql": "SELECT SUM(T.num_sales) * 100000 FROM region_sales AS T WHERE T.game_platform_id = 66", "source_tables": ["region_sales"]}, "evidence": "total sales in all regions = MULTIPLY(SUM(num_sales), 100000);"}
{"sample_id": 3385, "db_id": "video_games", "final": {"question": "Name the publisher of the Chronicles of the Sword game.", "sql": "SELECT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = 'Chronicles of the Sword'", "source_tables": ["game", "publisher", "game_publisher"]}, "evidence": "publisher refers to publisher_name; the Chronicles of the Sword game refers to game_name = 'Chronicles of the Sword'"}
{"sample_id": 3338, "db_id": "video_games", "final": {"question": "How many sales does game platform id 3871 make in Europe?", "sql": "SELECT T2.num_sales * 100000 FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Europe' AND T2.game_platform_id = 3871", "source_tables": ["region", "region_sales"]}, "evidence": "number of sales = multiply(num_sales, 100000); in Europe refers to region_name = 'Europe'"}
{"sample_id": 3404, "db_id": "video_games", "final": {"question": "What is the genre of the game \"Mario vs. Donkey Kong\"?", "sql": "SELECT T1.genre_name FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id WHERE T2.game_name = 'Mario vs. Donkey Kong'", "source_tables": ["game", "genre"]}, "evidence": "genre refers to genre_name; game \"Mario vs. Donkey Kong\" refers to game_name = 'Mario vs. Donkey Kong'"}
{"sample_id": 3414, "db_id": "video_games", "final": {"question": "How many video game publishers have Interactive in their names?", "sql": "SELECT COUNT(T.id) FROM publisher AS T WHERE T.publisher_name LIKE '%Interactive%'", "source_tables": ["publisher"]}, "evidence": "publishers that have Interactive in their names refers to publisher_name LIKE '%Interactive%';"}
{"sample_id": 3336, "db_id": "video_games", "final": {"question": "How many more sports games than simulation games?", "sql": "SELECT COUNT(CASE WHEN T1.genre_name = 'Sports' THEN T2.id ELSE NULL END) - COUNT(CASE WHEN T1.genre_name = 'Simulation' THEN T2.id ELSE NULL END) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id", "source_tables": ["game", "genre"]}, "evidence": "sports game refers to genre_name = 'Sports'; simulation game refers to genre_name = 'Simulation'; how many more = subtract(sum(game_id where genre_name = 'Sports'), sum(game_id where genre_name = 'Simulation'))"}
{"sample_id": 3487, "db_id": "video_games", "final": {"question": "List the games available on Wii.", "sql": "SELECT T4.game_name FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id INNER JOIN game AS T4 ON T3.game_id = T4.id WHERE T1.platform_name = 'Wii'", "source_tables": ["game", "game_platform", "platform", "game_publisher"]}, "evidence": "games available refers to game_name; Wii refers to platform_name = 'Wii';"}
{"sample_id": 3379, "db_id": "video_games", "final": {"question": "Provide the genre name of the genre ID 3.", "sql": "SELECT T.genre_name FROM genre AS T WHERE T.id = 3", "source_tables": ["genre"]}, "evidence": "genre ID 3 refers to genre.id = 3"}
{"sample_id": 3425, "db_id": "video_games", "final": {"question": "Which publisher published Overwatch?", "sql": "SELECT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = 'Overwatch'", "source_tables": ["game", "publisher", "game_publisher"]}, "evidence": "which publisher refers to publisher_name; Overwatch refers to game_name = 'Overwatch';"}
{"sample_id": 3405, "db_id": "video_games", "final": {"question": "Which publisher published the most games?", "sql": "SELECT T.publisher_name FROM ( SELECT T1.publisher_name, COUNT(DISTINCT T2.game_id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id GROUP BY T1.publisher_name ORDER BY COUNT(DISTINCT T2.game_id) DESC LIMIT 1 ) t", "source_tables": ["game_publisher", "publisher"]}, "evidence": "publisher refers to publisher_name; the most games refers to max(count(game_id))"}
{"sample_id": 3413, "db_id": "video_games", "final": {"question": "Which year has the most number of video game releases?", "sql": "SELECT T1.release_year FROM ( SELECT T.release_year, COUNT(id) FROM game_platform AS T GROUP BY T.release_year ORDER BY COUNT(T.id) DESC LIMIT 1 ) T1", "source_tables": ["game_platform"]}, "evidence": "year that has the most number of video game releases refers to MAX(COUNT(release_year));"}
{"sample_id": 3327, "db_id": "video_games", "final": {"question": "Which genre has the most games? Show its id.", "sql": "SELECT genre_id FROM ( SELECT T.genre_id, COUNT(T.id) FROM game AS T GROUP BY T.genre_id ORDER BY COUNT(T.id) DESC LIMIT 1 )", "source_tables": ["game"]}, "evidence": "the most games refers to max(game_id); genre id refers to genre_id"}
{"sample_id": 3472, "db_id": "video_games", "final": {"question": "Find out the difference between the number of publishers who released the games on the PS3 and X360.", "sql": "SELECT COUNT(CASE WHEN T2.platform_name = 'PS3' THEN T1.game_publisher_id ELSE NULL END) - COUNT(CASE WHEN T2.platform_name = 'X360' THEN T1.game_publisher_id ELSE NULL END) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id", "source_tables": ["platform", "game_platform"]}, "evidence": "difference = SUBTRACT(SUM(platform_name = 'PS3'), SUM(platform_name = 'X360')); PS3 refers to platform_name = 'PS3'; X360 refers to platform_name = 'X360';"}
{"sample_id": 3344, "db_id": "video_games", "final": {"question": "What is the genre of the Advent Rising game?", "sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = 'Advent Rising'", "source_tables": ["game", "genre"]}, "evidence": "genre refers to genre_name; Advent Rising game refers to game_name = 'Advent Rising'"}
{"sample_id": 3329, "db_id": "video_games", "final": {"question": "Show the number of games which were released on X360 in 2010.", "sql": "SELECT COUNT(DISTINCT T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T1.platform_name = 'X360' AND T2.release_year = 2010", "source_tables": ["game_platform", "platform", "game_publisher"]}, "evidence": "on X360 refers to platform_name = 'X360'; in 2010 refers to release_year = '2010'"}
{"sample_id": 3496, "db_id": "video_games", "final": {"question": "List down the name of strategy games.", "sql": "SELECT T1.game_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Strategy'", "source_tables": ["game", "genre"]}, "evidence": "strategy games refers to game_name WHERE genre_name = 'Strategy';"}
{"sample_id": 3355, "db_id": "video_games", "final": {"question": "What is the genre ID of the game named 25 to Life?", "sql": "SELECT T.genre_id FROM game AS T WHERE T.game_name = '25 to Life'", "source_tables": ["game"]}, "evidence": "the game named 25 to Life refers to game_name = '25 to Life'"}
{"sample_id": 3368, "db_id": "video_games", "final": {"question": "Which company published the game with the most sales in North America?", "sql": "SELECT T.publisher_name FROM ( SELECT T5.publisher_name, SUM(T2.num_sales) * 100000 FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN publisher AS T5 ON T4.publisher_id = T5.id WHERE T1.region_name = 'North America' GROUP BY T5.publisher_name ORDER BY SUM(T2.num_sales) * 100000 DESC LIMIT 1 ) t", "source_tables": ["publisher", "region_sales", "game_publisher", "region", "game_platform"]}, "evidence": "company refers to publisher_name; the most sales refers to max(num_sales); in North America refers to region_name = 'North America'"}
{"sample_id": 3407, "db_id": "video_games", "final": {"question": "What are the years that \"WiiU\" got a new game?", "sql": "SELECT T2.release_year FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id WHERE T1.platform_name = 'WiiU' ORDER BY T2.release_year DESC LIMIT 1", "source_tables": ["game_platform", "platform"]}, "evidence": "year refers to release_year; \"WiiU\" refers to platform_name = 'WiiU'"}
{"sample_id": 3351, "db_id": "video_games", "final": {"question": "Which game platform is the most popular in Europe?", "sql": "SELECT T.platform_name FROM ( SELECT T4.platform_name, SUM(T2.num_sales) FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.region_name = 'Europe' ORDER BY T2.num_sales DESC LIMIT 1 ) t", "source_tables": ["platform", "region", "region_sales", "game_platform"]}, "evidence": "game platform refers to game_platform_id; the most popular refers to max(num_sales); in Europe refers to region_name = 'Europe'"}
{"sample_id": 3361, "db_id": "video_games", "final": {"question": "List down the names of platform where the games released in 2016 can be played on.", "sql": "SELECT DISTINCT T1.platform_name FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id WHERE T2.release_year = 2016", "source_tables": ["game_platform", "platform"]}, "evidence": "name of platform refers to platform_name; released in 2016 refers to release_year = 2016"}
{"sample_id": 3371, "db_id": "video_games", "final": {"question": "Give the name of the publisher of the game ID 75.", "sql": "SELECT T2.publisher_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.game_id = 75", "source_tables": ["publisher", "game_publisher"]}, "evidence": "name of publisher refers to publisher_name; the game ID 75 refers to game_id = 75"}
{"sample_id": 3318, "db_id": "video_games", "final": {"question": "Please list the names of the publishers of all the puzzle games.", "sql": "SELECT DISTINCT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T4.genre_name = 'Puzzle'", "source_tables": ["game", "publisher", "genre", "game_publisher"]}, "evidence": "name of publisher refers to publisher_name; puzzle refers to genre_name = 'Puzzle'"}
{"sample_id": 3387, "db_id": "video_games", "final": {"question": "Provide the ID of the most popular platform in Europe.", "sql": "SELECT T.game_platform_id FROM ( SELECT T1.game_platform_id, SUM(T1.num_sales) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id WHERE T2.region_name = 'Europe' GROUP BY T1.game_platform_id ORDER BY SUM(T1.num_sales) DESC LIMIT 1 ) t", "source_tables": ["region", "region_sales"]}, "evidence": "ID refers to game_platform_id; the most popular refers to max(num_sales); in Europe refers to region_name = 'Europe'"}
{"sample_id": 3497, "db_id": "video_games", "final": {"question": "In what platform does the game ID 178 available?", "sql": "SELECT T3.platform_name FROM game_publisher AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.game_publisher_id INNER JOIN platform AS T3 ON T2.platform_id = T3.id WHERE T1.game_id = 178", "source_tables": ["platform", "game_platform", "game_publisher"]}, "evidence": "platform refers to platform_name;"}
{"sample_id": 3346, "db_id": "video_games", "final": {"question": "Which publisher published the most games?", "sql": "SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T2.publisher_name ORDER BY COUNT(DISTINCT T1.game_id) DESC LIMIT 1 ) t", "source_tables": ["publisher", "game_publisher"]}, "evidence": "publisher refers to publisher_name; the most games refers to max(count(publisher_id))"}
{"sample_id": 3400, "db_id": "video_games", "final": {"question": "Which is the publisher for the game \"Prism: Light the Way\"?", "sql": "SELECT T1.publisher_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = 'Prism: Light the Way'", "source_tables": ["game", "game_publisher", "publisher"]}, "evidence": "publisher refers to publisher_name; game \"Prism: Light the Way\" refers to game_name = 'Prism: Light the Way'"}
{"sample_id": 3450, "db_id": "video_games", "final": {"question": "Who is the publisher of the game 2002 FIFA World Cup?", "sql": "SELECT T2.publisher_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN game AS T3 ON T1.game_id = T3.id WHERE T3.game_name = '2002 FIFA World Cup'", "source_tables": ["game", "publisher", "game_publisher"]}, "evidence": "who is the publisher refers to publisher_name; 2002 FIFA World Cup refers to game_name = '2002 FIFA World Cup';"}
{"sample_id": 3437, "db_id": "video_games", "final": {"question": "What genres are the games published by 'Agatsuma Entertainment'?", "sql": "SELECT T4.genre_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T1.publisher_name = 'Agatsuma Entertainment'", "source_tables": ["game", "genre", "game_publisher", "publisher"]}, "evidence": "genres refers to genre_name; 'Agatsuma Entertainment' refers to publisher_name = 'Agatsuma Entertainment';"}
{"sample_id": 3399, "db_id": "video_games", "final": {"question": "What is the least common game genre?", "sql": "SELECT T.game_name FROM ( SELECT T2.game_name, COUNT(T2.id) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id GROUP BY T2.game_name ORDER BY COUNT(T2.id) ASC LIMIT 1 ) t", "source_tables": ["game", "genre"]}, "evidence": "the least common game genre refers to min(count(genre_id)); genre refers to genre_name"}
{"sample_id": 3549, "db_id": "authors", "final": {"question": "Among the author included in the paper of \"Inspection resistant memory: Architectural support for security from physical examination\", write down the author name and ID who were affiliated with Microsoft Research, USA.", "sql": "SELECT T2.Name, T1.Id FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Inspection resistant memory: Architectural support for security FROM physical examination' AND T2.Affiliation = 'Microsoft Research, USA'", "source_tables": ["paper", "paperauthor"]}, "evidence": "\"Inspection resistant memory: Architectural support for security from physical examination\" is the title of paper;\u00a0 'Microsoft Research, USA' is the Affiliation"}
{"sample_id": 3517, "db_id": "authors", "final": {"question": "Among the authors of the paper \"Stitching videos streamed by mobile phones in real-time\", how many of them are affiliated with Cairo Microsoft Innovation Lab?", "sql": "SELECT COUNT(T1.AuthorId) FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Affiliation = 'University of Tokyo' AND T2.Title = 'FIBER: A Generalized Framework for Auto-tuning Software'", "source_tables": ["paper", "paperauthor"]}, "evidence": "\"FIBER: A Generalized Framework for Auto-tuning Software\" is the Title of paper; affiliated refers to Affiliation;\u00a0 University of Tokyo is the affiliation organization"}
{"sample_id": 3667, "db_id": "authors", "final": {"question": "Provide the name of the author who is affiliated with the organization named 'ABB Electrical Machines'.", "sql": "SELECT Name FROM Author WHERE Affiliation = 'ABB Electrical Machines'", "source_tables": ["author"]}, "evidence": "'ABB Electrical Machines' is an affiliation"}
{"sample_id": 3629, "db_id": "authors", "final": {"question": "Tell the number of papers that were presented at \"International Symposium on Software Testing and Analysis\" conference.", "sql": "SELECT COUNT(T1.Id) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'International Symposium on Software Testing and Analysis'", "source_tables": ["conference", "paper"]}, "evidence": "'International Symposium on Software Testing and Analysis' is the FullName of the conference; papers refers to Paper.Id"}
{"sample_id": 3550, "db_id": "authors", "final": {"question": "Write down the author name, affiliation, jounal short name and full name of the paper \"Decreased Saliva Secretion and Down-Regulation of AQP5 in Submandibular Gland in Irradiated Rats\".", "sql": "SELECT T2.Name, T2.Affiliation, T3.ShortName, T3.FullName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T1.Title = 'Decreased Saliva Secretion and Down-Regulation of AQP5 in Submandibular Gland in Irradiated Rats'", "source_tables": ["journal", "paper", "paperauthor"]}, "evidence": "\"Decreased Saliva Secretion and Down-Regulation of AQP5 in Submandibular Gland in Irradiated Rats\" is the Title of paper"}
{"sample_id": 3593, "db_id": "authors", "final": {"question": "Please provide the full name of the conference where one of the papers of Jean-luc Hainaut were published.", "sql": "SELECT DISTINCT T3.FullName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Conference AS T3 ON T1.ConferenceId = T3.Id WHERE T2.Name = 'Jean-luc Hainaut' LIMIT 1", "source_tables": ["conference", "paper", "paperauthor"]}, "evidence": "papers of Jean-luc Hainaut refers to Name = 'Jean-luc Hainaut'"}
{"sample_id": 3600, "db_id": "authors", "final": {"question": "Find the names of papers which are published in the year 1996.", "sql": "SELECT Title FROM Paper WHERE year = 1996", "source_tables": ["paper"]}, "evidence": ""}
{"sample_id": 3529, "db_id": "authors", "final": {"question": "What is the title and journal homepage of the latest published paper?", "sql": "SELECT T1.Title, T2.HomePage FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id ORDER BY T1.Year DESC LIMIT 1", "source_tables": ["paper", "journal"]}, "evidence": "latest published paper refers to Max(Year)"}
{"sample_id": 3634, "db_id": "authors", "final": {"question": "Show the keywords of the paper that was presented at \"International Radar Symposium\" in 2012.", "sql": "SELECT T1.Keyword FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'International Radar Symposium' AND T1.Year = 2012", "source_tables": ["conference", "paper"]}, "evidence": "'International Radar Symposium' is the FullName of the conference; 2012 refers to Year = '2012'"}
{"sample_id": 3587, "db_id": "authors", "final": {"question": "Please list the names of the authors of the paper \"Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers\".", "sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers'", "source_tables": ["paper", "paperauthor"]}, "evidence": "paper \"Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers\" refers to Title = 'Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers'"}
{"sample_id": 3538, "db_id": "authors", "final": {"question": "What is the author ID and their affiliations of authors of the papers with a journal ID of 0 and published in 2009.", "sql": "SELECT DISTINCT T2.AuthorId, T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.JournalId = 0 AND T1.Year = 2009 AND T2.Affiliation IS NOT NULL", "source_tables": ["paper", "paperauthor"]}, "evidence": "published in 2009 refers to Year = 2009; journal ID of 0 refers to JournalId = 0"}
{"sample_id": 3568, "db_id": "authors", "final": {"question": "List the names of all authors affiliated with Birkbeck University of London.", "sql": "SELECT Name FROM Author WHERE Affiliation = 'Birkbeck University of London'", "source_tables": ["author"]}, "evidence": "affiliated with Birkbeck University of London refers to Affiliation = 'Birkbeck University of London'"}
{"sample_id": 3617, "db_id": "authors", "final": {"question": "Among the author who drafted the paper \"A Randomized Comparison of Sirolimus- Versus Paclitaxel-Eluting Stent Implantation in Patients With Diabetes Mellitus\", which of them is/are affiliated with the Asan Medical Center, University of Ulsan College of Medicine, Seoul, Korea\n?", "sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Affiliation = 'Asan Medical Center, University of Ulsan College of Medicine, Seoul, Korea' AND T1.Title = 'A Randomized Comparison of Sirolimus- Versus Paclitaxel-Eluting Stent Implantation in Patients With Diabetes Mellitus'", "source_tables": ["paper", "paperauthor"]}, "evidence": "author refers to PaperAuthor.Name; 'A Randomized Comparison of Sirolimus- Versus Paclitaxel-Eluting Stent Implantation in Patients With Diabetes Mellitus' is the title; 'Asan Medical Center, University of Ulsan College of Medicine, Seoul, Korea' is an Affiliation"}
{"sample_id": 3666, "db_id": "authors", "final": {"question": "Who is the author of the publication named 'Real-Time Automata'?", "sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Real-Time Automata'", "source_tables": ["paper", "paperauthor"]}, "evidence": "'Real-Time Automata' is the title of paper; publication refers to title;"}
{"sample_id": 3520, "db_id": "authors", "final": {"question": "What is the title of the paper published in 1995 and whose author included Thomas Wiegand?", "sql": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Name = 'Thomas Wiegand' AND T2.Year = 1995", "source_tables": ["paper", "paperauthor"]}, "evidence": "published in 1995 refers to Year = 1995; 'Thomas Wiegand' is the name of author"}
{"sample_id": 3576, "db_id": "authors", "final": {"question": "What is the affiliation of the author writing in the journal 'A combined search for the standard model Higgs boson at s = 1.96 \u00c2 TeV'?", "sql": "SELECT T1.Affiliation FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title = 'A combined search for the standard model Higgs boson at s = 1.96 \u00c2 TeV'", "source_tables": ["paper", "paperauthor"]}, "evidence": "journal 'A combined search for the standard model Higgs boson at s = 1.96 \u00c2 TeV' refers to Title = 'A combined search for the standard model Higgs boson at s = 1.96 \u00c2 TeV'"}
{"sample_id": 3566, "db_id": "authors", "final": {"question": "What are the conference name and journal name of paper written by Shueh-Lin Yau? List down the name of co-authors and provide the title of that paper.", "sql": "SELECT T1.ConferenceId, T1.JournalId, T2.Name, T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Conference AS T3 ON T1.ConferenceId = T3.Id INNER JOIN Journal AS T4 ON T1.JournalId = T4.Id WHERE T2.Name = 'Shueh-Lin Yau'", "source_tables": ["conference", "journal", "paper", "paperauthor"]}, "evidence": "Shueh-Lin Yau is the name of author;"}
{"sample_id": 3574, "db_id": "authors", "final": {"question": "Identify by papers title those in which conferences have been published that do not have a website..", "sql": "SELECT T2.Title FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T1.HomePage = '' AND T2.Title <> ''", "source_tables": ["conference", "paper"]}, "evidence": "do not have a website refers to HomePage IS NULL OR HomePage = ''"}
{"sample_id": 3545, "db_id": "authors", "final": {"question": "Write down the title and affiliation of the preprinted paper written by \"Roger J.Marshal\".", "sql": "SELECT T1.Title, T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Roger J. Marshall' AND T1.ConferenceID = 0 AND T1.JournalID = 0", "source_tables": ["paper", "paperauthor"]}, "evidence": "\"Roger J. Marshall\" is the name of author; preprinted paper refers to ConferenceId = 0 AND JournalId = 0"}
{"sample_id": 3570, "db_id": "authors", "final": {"question": "How many journals do not have a website?", "sql": "SELECT COUNT(HomePage) FROM Journal WHERE HomePage = ''", "source_tables": ["journal"]}, "evidence": "do not have a website refers to HomePage = ''"}
{"sample_id": 3526, "db_id": "authors", "final": {"question": "What is the short name and full name of conference uses the homepage \"http://www.informatik.uni-trier.de/~ley/db/conf/ices/index.html\"?", "sql": "SELECT ShortName, FullName FROM Conference WHERE HomePage = 'http://www.informatik.uni-trier.de/~ley/db/conf/ices/index.html'", "source_tables": ["conference"]}, "evidence": ""}
{"sample_id": 3640, "db_id": "authors", "final": {"question": "How many journals don\u2019t have a short name?", "sql": "SELECT COUNT(ShortName) FROM Journal WHERE ShortName = ''", "source_tables": ["journal"]}, "evidence": "don\u2019t have a short name means ShortName is null"}
{"sample_id": 3651, "db_id": "authors", "final": {"question": "What are the different ways the name of the author, Randall Davis, is written on their papers?", "sql": "SELECT DISTINCT T1.Name FROM PaperAuthor AS T1 INNER JOIN Author AS T2 ON T1.AuthorId = T2.Id WHERE T2.Name = 'Randall Davis' AND T1.Name != 'Randall Davis'", "source_tables": ["author", "paperauthor"]}, "evidence": "Randall Davis refer to Author.Name"}
{"sample_id": 3604, "db_id": "authors", "final": {"question": "What is the average number of papers published in the World Computer Congress each year?", "sql": "SELECT CAST(SUM(CASE WHEN T2.FullName = 'International Congress Series' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.Id) AS Div1, T1.Year FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id GROUP BY T1.YEAR HAVING Div1 != 0", "source_tables": ["paper", "journal"]}, "evidence": "published in the World Computer Congress refers to FullName = 'World Computer Congress'; average refers to DIVIDE(COUNT(FullName = 'World Computer Congress'), COUNT(Id))"}
{"sample_id": 3620, "db_id": "authors", "final": {"question": "Calculate the total average number of papers published from 2002 to 2010 under the conference \"Information and Knowledge Engineering\".", "sql": "SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T1.Year) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'Information and Knowledge Engineering' AND T1.Year >= 2002 AND T1.Year <= 2010", "source_tables": ["conference", "paper"]}, "evidence": "average number of papers refers to DIVIDE(count(id), 9); published from 2002 to 2010 refers to Year BETWEEN 2002 AND 2010; 'Information and Knowledge Engineering' is the FullName of conference;"}
{"sample_id": 3638, "db_id": "authors", "final": {"question": "Which conference has the longest name?", "sql": "SELECT FullName FROM Conference ORDER BY LENGTH(FullName) DESC LIMIT 1", "source_tables": ["conference"]}, "evidence": "the longest name refers to MAX(length(FullName))"}
{"sample_id": 3588, "db_id": "authors", "final": {"question": "What is the full name of the journal that published the paper \"Multiple paternity in a natural population of a salamander with long-term sperm storage\"?", "sql": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Title = 'Multiple paternity in a natural population of a salamander with long-term sperm storage'", "source_tables": ["paper", "journal"]}, "evidence": "paper \"Multiple paternity in a natural population of a salamander with long-term sperm storage\" refers to Title = 'Multiple paternity in a natural population of a salamander with long-term sperm storage'"}
{"sample_id": 3623, "db_id": "authors", "final": {"question": "Which journal was the paper \"Education, democracy and growth\" published on? Give the full name of the journal.", "sql": "SELECT T1.FullName FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Title = 'Education, democracy and growth'", "source_tables": ["paper", "journal"]}, "evidence": "'Education, democracy and growth' is the title of a paper"}
{"sample_id": 3579, "db_id": "authors", "final": {"question": "In how many papers and in what years was the International Conference on Database Theory published?", "sql": "SELECT COUNT(T1.Id) AS PAPER, COUNT(DISTINCT T1.Year) AS YEARS FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE year != 0 AND T2.FullName = 'International Conference on Database Theory'", "source_tables": ["conference", "paper"]}, "evidence": "the International Conference on Database Theory refers to FullName = 'International Conference on Database Theory'; published refers to year ! = 0"}
{"sample_id": 3580, "db_id": "authors", "final": {"question": "What is the full name of the journals that are published in the database papers whose topic is Sustainability?", "sql": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Keyword = 'Sustainability'", "source_tables": ["paper", "journal"]}, "evidence": "topic is Sustainability refers to Keyword = 'Sustainability'"}
{"sample_id": 3655, "db_id": "authors", "final": {"question": "What is the name of author with the ID of 1722?", "sql": "SELECT Name FROM Author WHERE Id = 1722", "source_tables": ["author"]}, "evidence": ""}
{"sample_id": 3616, "db_id": "authors", "final": {"question": "What is the conference homepage URL of the paper titled \"Quality evaluation of long duration audiovisual content\"?", "sql": "SELECT T2.HomePage FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'Quality evaluation of long duration audiovisual content'", "source_tables": ["conference", "paper"]}, "evidence": "homepage URL refers to HomePage; 'Quality evaluation of long duration audiovisual content' is the Title"}
{"sample_id": 3642, "db_id": "authors", "final": {"question": "What is the title of the paper with the most authors?", "sql": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id GROUP BY T1.PaperId ORDER BY COUNT(T1.PaperId) DESC LIMIT 1", "source_tables": ["paper", "paperauthor"]}, "evidence": "paper refers to paper.Id; paper with the most authors refers to MAX(PaperAuthor.PaperId)"}
{"sample_id": 3511, "db_id": "authors", "final": {"question": "How many papers were published in the journal \"Concepts in Magnetic Resonance Part A\"?", "sql": "SELECT COUNT(T2.Id) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Concepts in Magnetic Resonance Part A'", "source_tables": ["paper", "journal"]}, "evidence": "journal \"Concepts in Magnetic Resonance Part A\" refers to FullName = 'Concepts in Magnetic Resonance Part A'"}
{"sample_id": 3690, "db_id": "college_completion", "final": {"question": "What is the number of female graduate for all students cohort from Oakwood University in 2013?", "sql": "SELECT COUNT(*) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.year = 2013 AND T2.gender = 'F' AND T2.race = 'X' AND T1.chronname = 'Oakwood University'", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "female refers to gender = 'F'; graduates refers to grad_cohort; Oakwood University refers to chronname = 'Oakwood University'; in 2013 refers to year = 2013; all sutdents refer to rae = 'X';"}
{"sample_id": 3700, "db_id": "college_completion", "final": {"question": "What's the number of male Hispanic students who graduated from Central Alabama Community College in 2011 within 100 percent of normal/expected time?", "sql": "SELECT SUM(T2.grad_100) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Central Alabama Community College' AND T2.year = 2011 AND T2.gender = 'M' AND T2.race = 'H'", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "male refers to gender = 'M'; Hispanic students refers to race = 'H'; Central Alabama Community College refers to chronname = 'Central Alabama Community College'; in 2011 refers to year = 2011; number of students who graduated within 100 percent of normal/expected time refers to grad_100;"}
{"sample_id": 3724, "db_id": "college_completion", "final": {"question": "What was the number of female Hispanic students who graduated within 100 percent of expected time for \"Pennsylvania State University-Altoona\"?", "sql": "SELECT SUM(T2.grad_100) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Pennsylvania State University-Altoona' AND T2.gender = 'F' AND T2.race = 'H'", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "female refers to gender = 'F'; Hispanic refers to race = 'H'; graduated within 100 percent of expected time refers to grad_100; Pennsylvania State University-Altoona refers to chronname = 'Pennsylvania State University-Altoona';"}
{"sample_id": 3682, "db_id": "college_completion", "final": {"question": "List the all the institutes from the state with the most number of American Indian in 2007.", "sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2007 AND T2.race = 'Ai' GROUP BY T1.chronname ORDER BY COUNT(T1.chronname) DESC LIMIT 1", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "institutes refers to chronname; American Indian refers to race = 'Ai'; most number of American Indian refers to MAX(COUNT(race = 'Ai')); in 2007 refers to year = '2007';"}
{"sample_id": 3692, "db_id": "college_completion", "final": {"question": "Compare the graduate cohort for Auburn University from 2011 to 2013?", "sql": "SELECT SUM(CASE WHEN T2.year = 2011 THEN T2.grad_cohort ELSE 0 END), SUM(CASE WHEN T2.year = 2012 THEN T2.grad_cohort ELSE 0 END), SUM(CASE WHEN T2.year = 2013 THEN T2.grad_cohort ELSE 0 END) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.gender = 'B' AND T2.race = 'X' AND T1.chronname = 'Auburn University'", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "graduate cohort for Auburn University refers to grad_cohort is not null WHERE chronname = 'Auburn University', gender = 'B', race = 'X' and cohort = '4y other', '4y bach'; from 2011 to 2013 refers to year in (2011, 2012, 2013);"}
{"sample_id": 3709, "db_id": "college_completion", "final": {"question": "Please list the names of the institutes in the state of Alabama whose all graduates in total exceeded 500 in 2011?", "sql": "SELECT DISTINCT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.state = 'Alabama' AND T2.year = 2011 AND T2.race = 'X' AND T2.grad_cohort > 500", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "names of the institutes refers to chronname; graduates refers to grad_cohort; grad_cohort > 500; in 2011 refers to year = 2011; all students refer to race = 'X'."}
{"sample_id": 3710, "db_id": "college_completion", "final": {"question": "What's the average number of graduates for Central Alabama Community College in the 3 consecutive years from 2011 to 2013?", "sql": "SELECT AVG(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Central Alabama Community College' AND T2.year IN (2011, 2012, 2013) AND T2.gender = 'B' AND T2.race = 'X'", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "graduates refers to grad_cohort; Central Alabama Community College refers to chronname = 'Central Alabama Community College'; average number of graduates for 3 consecutive years = DIVIDE(SUM(SUM(grad_cohort WHERE year = 2011), SUM(grad_cohort WHERE year = 2012), SUM(grad_cohort WHERE year = 2013)), 3);"}
{"sample_id": 3725, "db_id": "college_completion", "final": {"question": "Give the cohort name for the school with biggest cohort size.", "sql": "SELECT DISTINCT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.cohort_size = ( SELECT MAX(T1.cohort_size) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid )", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "biggest cohort size refers to MAX(cohort_size); cohort = '4y bach' means bachelor's or equivalent-seeking cohort at 4-year institutions; cohort = '4y other' means students seeking another type of degree or certificate at a 4-year institution; cohort = '2y all' means degree-seeking students at 2-year institutions;"}
{"sample_id": 3686, "db_id": "college_completion", "final": {"question": "State the average median SAT value for institutes in the state with the most male graduate cohort in 2013.", "sql": "SELECT AVG(T1.med_sat_value) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2013 AND T2.gender = 'M' GROUP BY T2.grad_cohort ORDER BY COUNT(T2.grad_cohort) DESC LIMIT 1", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "median SAT value refers to med_sat_value; average = AVG(med_sat_value); male refers to gender = 'M'; graduate cohort refers to grad_cohort; most male graduate cohort refers to MAX(COUNT(grad_cohort WHERE gender = 'M')); in 2013 refers to year = 2013;"}
{"sample_id": 3687, "db_id": "college_completion", "final": {"question": "Name the state with the most number of graduate cohort in 2012 from private institute for profit? List all such institutes in the mentioned state.", "sql": "SELECT T1.state, T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2012 AND T1.control = 'Private for-profit' GROUP BY T2.grad_cohort ORDER BY COUNT(T2.grad_cohort) DESC LIMIT 1", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "most number of graduate cohort refers to MAX(SUM(grad_cohort)); in 2012 refers to year = 2012; private institute for profit refers to control = 'Private for-profit'; institutes refers to chronname;"}
{"sample_id": 3722, "db_id": "college_completion", "final": {"question": "Give the name of the 4-year public school in \"ID\" with the lowest graduation 100 value.", "sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'ID' AND T1.level = '4-year' AND T1.control = 'Public' GROUP BY T1.chronname ORDER BY SUM(T1.grad_100_value) ASC LIMIT 1", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "name of the school refers to chronname; 4-year refers to level = '4-year'; public refers to control = 'Public'; ID refers to state_abbr = 'ID'; lowest graduation 100 value refers to MIN(grad_100_value);"}
{"sample_id": 3753, "db_id": "college_completion", "final": {"question": "What is the average SAT value for incoming students in all of the schools located in the state with the lowest state appropriations to higher education in fiscal year 2011 per resident?", "sql": "SELECT AVG(t1.med_sat_value) FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON t1.state = t2.state ORDER BY t2.state_appr_value LIMIT 1", "source_tables": ["institution_details", "state_sector_details"]}, "evidence": "average = DIVIDE(SUM(med_sat_value), SUM(chronname)); SAT value for incoming students refers to med_sat_value; lowest state appropriations to higher education in fiscal year 2011 per resident refers to MIN(state_appr_value);"}
{"sample_id": 3731, "db_id": "college_completion", "final": {"question": "List down the states in 2011 with a national sector average of 20 and below.", "sql": "SELECT DISTINCT T1.state FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.year = 2011 AND T1.awards_per_natl_value <= 20", "source_tables": ["state_sector_grads", "state_sector_details"]}, "evidence": "in 2011 refers to year = '2011'; national sector average of 20 and below refers to awards_per_natl_value < 20;"}
{"sample_id": 3705, "db_id": "college_completion", "final": {"question": "How many students for both genders graduated from a 2-year institute in Alabama in 2011?", "sql": "SELECT SUM(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE  T2.cohort = '2y all' AND T2.year = 2011 AND T1.state = 'Alabama'", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "2-year institute refers to cohort = '2y all'; Alabama refers to state = 'Alabama'; in 2011 refers to year = 2011; T2.gender = 'B' means both genders;"}
{"sample_id": 3704, "db_id": "college_completion", "final": {"question": "Please list the names of the institutes with the percentage of male White students graduating in 2011 within 150 percent of normal/expected time over 20.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE WHEN T2.grad_150 > 20 THEN T1.chronname ELSE NULL END AS T FROM institution_details T1 INNER JOIN institution_grads T2 ON T2.unitid = T1.unitid WHERE T2.year = 2011 AND T2.gender = 'M' AND T2.race = 'W' ) WHERE T IS NOT NULL", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "names of the institutes refers to chronname; male refers to gender = 'M'; white refers to race = 'w'; in 2011 refers to year = 2011; percentage of students graduating within 150 percent of normal/expected time over 20 refers to grad_150>20;"}
{"sample_id": 4078, "db_id": "public_review_platform", "final": {"question": "Describe ID and active status of the business under category of \"Diagnostic Imaging\".", "sql": "SELECT T2.business_id, T3.active FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Diagnostic Imaging'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "ID refers to business_id; category of \"Diagnostic Imaging\" refers to category_name = 'Diagnostic Imaging';"}
{"sample_id": 3957, "db_id": "public_review_platform", "final": {"question": "For the Yelp business in \"Tempe\" city which got \"3.5\" stars and review count as \"Uber\", how many \"long\" reviews did it get?", "sql": "SELECT COUNT(T2.review_length) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Tempe' AND T1.stars = '3.5' AND T1.review_count = 'Uber' AND T2.review_length = 'Long'", "source_tables": ["reviews", "business"]}, "evidence": "\"Tempe\" is the name of city; long review refers to review_length = 'Long'"}
{"sample_id": 4056, "db_id": "public_review_platform", "final": {"question": "How many businesses id are rated more than 4?", "sql": "SELECT COUNT(business_id) FROM Business WHERE stars > 4", "source_tables": ["business"]}, "evidence": "rated more than 4 refers to stars > 4;"}
{"sample_id": 4033, "db_id": "public_review_platform", "final": {"question": "Among the users who received high compliments from other users, which users joined Yelp earliest?", "sql": "SELECT T2.user_id FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id WHERE T2.number_of_compliments = 'High' AND T1.user_yelping_since_year = ( SELECT MIN(user_yelping_since_year) FROM Users )", "source_tables": ["users", "users_compliments"]}, "evidence": "high compliments refers to number_of_compliments = ' High'; joined Yelp earliest refers to min(user_yelping_since_year)"}
{"sample_id": 3768, "db_id": "public_review_platform", "final": {"question": "For the user who gave the most number of long reviews, what is his/her averge ratings of all review?", "sql": "SELECT CAST(SUM(T1.review_stars) AS REAL) / COUNT(T1.review_stars) FROM Reviews AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.review_length LIKE 'Long' GROUP BY T1.user_id ORDER BY COUNT(T1.review_length) DESC LIMIT 1", "source_tables": ["reviews", "users"]}, "evidence": "long reviews refers to review_length = 'long'; most number of long reviews refers to MAX(COUNT(review_length = 'long')); average ratings = AVG(review_stars);"}
{"sample_id": 3840, "db_id": "public_review_platform", "final": {"question": "Among the Yelp_Businesses in Arizona, how many of them are still running?", "sql": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND active LIKE 'True'", "source_tables": ["business"]}, "evidence": "Arizona refers to state = 'AZ'; still running refers to active = 'true';"}
{"sample_id": 4030, "db_id": "public_review_platform", "final": {"question": "Calculate the percentage of businesses who located in Mesa. What is attribute value of these businesses.", "sql": "SELECT CAST(COUNT(T1.city) AS REAL) * 100 / ( SELECT COUNT(business_id) FROM Business ), T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Mesa'", "source_tables": ["business_attributes", "business"]}, "evidence": "percentage = divide(count(business where city = 'Mesa'), count(business)) * 100%"}
{"sample_id": 4077, "db_id": "public_review_platform", "final": {"question": "List down the business ID and attribute value of the attribute name of \"payment_types_visa\".", "sql": "SELECT T2.business_id, T2.attribute_value FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name = 'payment_types_visa'", "source_tables": ["business_attributes", "attributes"]}, "evidence": ""}
{"sample_id": 3782, "db_id": "public_review_platform", "final": {"question": "For the only Yelp business in \"Yuma\" city, how many \"medium\" reviews did it get?", "sql": "SELECT COUNT(T2.review_length) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Yuma' AND T2.review_length LIKE 'Medium'", "source_tables": ["reviews", "business"]}, "evidence": "medium reviews refers to review_length = 'Medium';"}
{"sample_id": 3783, "db_id": "public_review_platform", "final": {"question": "Does Yelp business No.\"4960\" have TV?", "sql": "SELECT DISTINCT CASE WHEN T1.attribute_name LIKE 'Has TV' THEN 'yes' ELSE 'no' END FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.business_id = 4960", "source_tables": ["business_attributes", "attributes"]}, "evidence": "business No. refers to business_id; have TV refers to attribute_name = 'Has TV';"}
{"sample_id": 3942, "db_id": "public_review_platform", "final": {"question": "List the categories of all active businesses that were not in Arizona.", "sql": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'TRUE' AND T1.state NOT LIKE 'AZ'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "active business refers to active = 'true'; not in Arizona refers to state ! = 'AZ'; category refers to category_name"}
{"sample_id": 3863, "db_id": "public_review_platform", "final": {"question": "When does Yelp_Business no.1 open on Tuesdays?", "sql": "SELECT T1.opening_time FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week LIKE 'Tuesday' AND T1.business_id = 1", "source_tables": ["days", "business_hours"]}, "evidence": "Yelp_Business no.1 refers to business_id = 1; open on refers to opening_time; Tuesdays refers to day_of_week = 'Tuesday'"}
{"sample_id": 3956, "db_id": "public_review_platform", "final": {"question": "Which actively running Yelp business in \"Gilbert\" has got the most reviews? Give the business id.", "sql": "SELECT DISTINCT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.active = 'true' AND T1.city = 'Gilbert' AND T1.review_count = 'Uber'", "source_tables": ["reviews", "business"]}, "evidence": "actively running business refers to active = 'true'; 'Gilbert' is the name of city; most review refers to review_count = 'Uber'"}
{"sample_id": 4128, "db_id": "public_review_platform", "final": {"question": "What is the category and attributes of businesses with highest star rating?", "sql": "SELECT DISTINCT T3.category_name, T5.attribute_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id INNER JOIN Business_Attributes AS T4 ON T2.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.stars = ( SELECT MAX(stars) FROM Business )", "source_tables": ["attributes", "business", "business_attributes", "business_categories", "categories"]}, "evidence": "category of the business refers to category_name; attributes of the business refers to attribute_name; the highest star rating refers to MAX(stars)"}
{"sample_id": 4016, "db_id": "public_review_platform", "final": {"question": "Among all the users who received the high number of compliments, what percent received the 'cute' type of compliment.", "sql": "SELECT CAST(SUM(CASE WHEN T1.compliment_type = 'cute' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.user_id) FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T2.number_of_compliments = 'High'", "source_tables": ["compliments", "users_compliments"]}, "evidence": "high number of compliments refers to number_of_compliments = 'High'; percentage = divide(count(user_id where compliment_type = 'cute'), count(user_id))*100%"}
{"sample_id": 4028, "db_id": "public_review_platform", "final": {"question": "List out the user id that has compliment type of photos.", "sql": "SELECT T2.user_id FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.compliment_type = 'photos'", "source_tables": ["compliments", "users_compliments"]}, "evidence": "compliment type of photos refers to compliment_type = 'photos'"}
{"sample_id": 4073, "db_id": "public_review_platform", "final": {"question": "What is the active and inactive ratio of the business with the review count of low.", "sql": "SELECT CAST(SUM(CASE WHEN active = 'true' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN active = 'false' THEN 1 ELSE 0 END) AS radio FROM Business WHERE review_count = 'Low'", "source_tables": ["business"]}, "evidence": "DIVIDE(COUNT(business_id where review_count = 'Low' and active = 'true'), COUNT(business_id where review_count = 'Low' and active = 'false'));"}
{"sample_id": 4051, "db_id": "public_review_platform", "final": {"question": "Which user has done the most review on a business attributed to delivery?", "sql": "SELECT T3.user_id FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Reviews AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name = 'Delivery' GROUP BY T3.user_id ORDER BY COUNT(T2.business_id) DESC LIMIT 1", "source_tables": ["business_attributes", "attributes", "reviews"]}, "evidence": "the most reviews refer to MAX(business_id) where attribute_name = 'Delivery';"}
{"sample_id": 3779, "db_id": "public_review_platform", "final": {"question": "What is the number of reviews from user No. \"21679\"?", "sql": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 21679", "source_tables": ["reviews"]}, "evidence": "user No. refers to user_id;"}
{"sample_id": 4101, "db_id": "public_review_platform", "final": {"question": "In how many businesses have customers had a bad or terrible experience?", "sql": "SELECT COUNT(business_id) FROM Business WHERE stars IN (1, 2)", "source_tables": ["business"]}, "evidence": "stars = 2 means bad experience; stars = 1 means terrible experience; customers had a bad or terrible experience refers to stars = 2 OR stars = 1"}
{"sample_id": 3789, "db_id": "public_review_platform", "final": {"question": "How many types of music does Yelp business No.\"1141\" have?", "sql": "SELECT COUNT(T1.attribute_name) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value LIKE 'TRUE' AND T2.business_id = 1141", "source_tables": ["business_attributes", "attributes"]}, "evidence": "types of music refers to attribute_name LIKE '%music%' WHERE attribute_value = 'true'; business No. refers to business_id;\n"}
{"sample_id": 3900, "db_id": "public_review_platform", "final": {"question": "How many businesses ID sell beer and wine?", "sql": "SELECT COUNT(business_id) FROM Business_Attributes WHERE attribute_id = 1 AND attribute_value = 'beer_and_wine'", "source_tables": ["business_attributes"]}, "evidence": "attribute_value = 'beer_and_wine'"}
{"sample_id": 3832, "db_id": "public_review_platform", "final": {"question": "What are the attributes that business number 56 have?", "sql": "SELECT T1.attribute_name FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value LIKE 'TRUE' AND T2.business_id = 56", "source_tables": ["business_attributes", "attributes"]}, "evidence": "business number refers to business_id; attributes that business have refers to attribute_value = 'true';"}
{"sample_id": 3935, "db_id": "public_review_platform", "final": {"question": "How many users have no followers in 2014?", "sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year = 2004 AND user_fans LIKE 'None'", "source_tables": ["users"]}, "evidence": "in 2004 refers to user_yelping_since_year = 2004; no follower refers to user_fans = 'None'"}
{"sample_id": 3969, "db_id": "public_review_platform", "final": {"question": "Write down the ID, active status and city of the business which are in CA state.", "sql": "SELECT business_id, active, city FROM Business WHERE state = 'CA' AND active = 'true'", "source_tables": ["business"]}, "evidence": "the ID refers to business_id; active status refers to active; active = 'true' means the business is still running; active = 'false' means the business is closed or not running now"}
{"sample_id": 3853, "db_id": "public_review_platform", "final": {"question": "Please list the business IDs of all the Yelp_Businesses that are good for kids.", "sql": "SELECT T2.business_id FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name LIKE 'Good for Kids' AND T2.attribute_value LIKE 'TRUE'", "source_tables": ["business_attributes", "attributes"]}, "evidence": "good for kids refers to attribute_name = 'Good for Kids' and attribute_value = 'true'\n"}
{"sample_id": 3813, "db_id": "public_review_platform", "final": {"question": "How many businesses in Scottsdale are rated as \"wonderful experience\"?", "sql": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Scottsdale' AND stars > 3", "source_tables": ["business"]}, "evidence": "Scottsdale refers to city = 'Scottsdale'; rated refers to stars; rated as wonderful experience refers to stars > 3;"}
{"sample_id": 3890, "db_id": "public_review_platform", "final": {"question": "What is the closing and opening time of businesses located at Tempe with highest star rating?", "sql": "SELECT T2.closing_time, T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Tempe' ORDER BY T1.stars DESC LIMIT 1", "source_tables": ["business", "business_hours"]}, "evidence": "located at Tempe refers to city = 'Tempe'; highest star rating refers to max(stars)"}
{"sample_id": 4064, "db_id": "public_review_platform", "final": {"question": "How many businesses with the category named Stadiums & Arenas are rated highest?", "sql": "SELECT COUNT(T1.business_id) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.category_name = 'Stadiums & Arenas' AND T3.stars = ( SELECT MAX(stars) FROM Business )", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "rated highest refers to MAX(stars); category_name = 'Stadiums & Arenas';"}
{"sample_id": 4026, "db_id": "public_review_platform", "final": {"question": "List out the state of businesses which have opening time at 1AM.", "sql": "SELECT DISTINCT T1.state FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T2.opening_time = '1AM'", "source_tables": ["business", "business_hours"]}, "evidence": "state refers to city"}
{"sample_id": 3847, "db_id": "public_review_platform", "final": {"question": "How many reviews made by user whose ID is 3 are long?", "sql": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 3 AND review_length LIKE 'Long'", "source_tables": ["reviews"]}, "evidence": "long refers to review_length = 'Long';"}
{"sample_id": 3761, "db_id": "public_review_platform", "final": {"question": "How many users have \"uber\" number of fans?", "sql": "SELECT COUNT(user_id) FROM Users WHERE user_fans LIKE 'Uber'", "source_tables": ["users"]}, "evidence": "uber number of fans refers to user_fans = 'uber';"}
{"sample_id": 3975, "db_id": "public_review_platform", "final": {"question": "Write the user ID, business ID and tips length of who started using Yelp since 2004 and had high followers.", "sql": "SELECT T1.user_id, T2.business_id, T2.tip_length FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2004 AND T1.user_fans = 'High'", "source_tables": ["tips", "users"]}, "evidence": "started using Yelp since 2004 refers to user_yelping_since_year = '2004'; had high followers refers to user_fans = 'High'"}
{"sample_id": 3881, "db_id": "public_review_platform", "final": {"question": "List down the business ID with a star range from 2 to 3, located at Mesa.", "sql": "SELECT business_id FROM Business WHERE city LIKE 'Mesa' AND stars BETWEEN 2 AND 3", "source_tables": ["business"]}, "evidence": "star range from 2 to 3 refers to stars > = 2 AND stars < 4;\u00a0 located at Mesa refers to city = 'Mesa'"}
{"sample_id": 3836, "db_id": "public_review_platform", "final": {"question": "How many businesses operating in the \"Accessories\" category have received a \"wonderful experience\" review from users?", "sql": "SELECT COUNT(T2.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.stars > 3 AND T1.category_name LIKE 'Accessories'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "Accessories category refers to category_name = 'Accessories'; wonderful experience review refers to stars > 3;"}
{"sample_id": 3962, "db_id": "public_review_platform", "final": {"question": "Which city is the business that got a \"medium\" length tip with \"3\" likes located in?", "sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Tips AS T2 ON T1.business_id = T2.business_id WHERE T2.tip_length = 'Medium' AND T2.likes = 3", "source_tables": ["tips", "business"]}, "evidence": "medium length tip refers to tip_length = 'Medium';"}
{"sample_id": 3983, "db_id": "public_review_platform", "final": {"question": "For the business with great experience existed in Sun Lakes city, provide the user ID who gave review on it and user followers.", "sql": "SELECT T3.user_id, T3.user_fans FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T1.city = 'Sun Lakes' AND T1.stars = 5", "source_tables": ["reviews", "business", "users"]}, "evidence": "with great experience refers to stars = 5"}
{"sample_id": 3855, "db_id": "public_review_platform", "final": {"question": "Under which categories is Yelp_Business no. 1?", "sql": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T2.business_id = 1", "source_tables": ["business_categories", "categories"]}, "evidence": "categories refers to category_name; Yelp_Business no.1 refers to business_id = 1"}
{"sample_id": 3914, "db_id": "public_review_platform", "final": {"question": "What is the correlation between the review starts and business stars?", "sql": "SELECT CAST(SUM(T2.review_stars) AS REAL) / COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id", "source_tables": ["reviews", "business"]}, "evidence": "highest review count refers to review_count = 'Uber'; average business review stars = Divide (Sum(review_stars), Count(user_id))"}
{"sample_id": 3952, "db_id": "public_review_platform", "final": {"question": "State the ID number for the attribute named \"Accepts Insurance\"?", "sql": "SELECT attribute_id FROM Attributes WHERE attribute_name = 'Accepts Insurance'", "source_tables": ["attributes"]}, "evidence": "ID number refers to attribute_id"}
{"sample_id": 4119, "db_id": "public_review_platform", "final": {"question": "How many of the businesses are in Surprise?", "sql": "SELECT COUNT(business_id) FROM Business WHERE city = 'Surprise'", "source_tables": ["business"]}, "evidence": "Surprise is a city"}
{"sample_id": 3889, "db_id": "public_review_platform", "final": {"question": "Count the active businesses that has an attribute of caters with low review count.", "sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T3.attribute_name LIKE 'Caters' AND T1.review_count LIKE 'Low' AND T1.active LIKE 'TRUE'", "source_tables": ["business_attributes", "attributes", "business"]}, "evidence": "active businesses refers to active = 'true'; attribute of caters refers to attribute_name = 'Caters'"}
{"sample_id": 3816, "db_id": "public_review_platform", "final": {"question": "Which city has the most businesses whose attribute is full_bar?", "sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id WHERE T2.attribute_value LIKE 'full_bar' GROUP BY T1.city", "source_tables": ["business_attributes", "business"]}, "evidence": "most business refers to MAX(business_id); full_bar refers to attribute_value = 'full_bar';"}
{"sample_id": 3971, "db_id": "public_review_platform", "final": {"question": "Among all attribute names, list down the ID and attribute name which start with \"music\".", "sql": "SELECT attribute_id, attribute_name FROM Attributes WHERE attribute_name LIKE 'music%'", "source_tables": ["attributes"]}, "evidence": "attribute name which start with \"music\" refers to attribute_name LIKE 'music%'"}
{"sample_id": 3802, "db_id": "public_review_platform", "final": {"question": "Please indicate the review count of the \"active life\" businesses in Phoenix.", "sql": "SELECT COUNT(*) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Active Life' AND T3.city = 'Phoenix'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "active life refers to category_name = 'Active Life'; Phoenix refers to city = 'Phoenix';"}
{"sample_id": 3974, "db_id": "public_review_platform", "final": {"question": "List down the business ID and user ID who got uber for cool votes.", "sql": "SELECT business_id, user_id FROM Reviews WHERE review_votes_cool = 'Uber'", "source_tables": ["reviews"]}, "evidence": "got uber for cool votes refers to review_votes_cool = 'Uber'"}
{"sample_id": 3982, "db_id": "public_review_platform", "final": {"question": "Describe category name which had above 10% in comparing with all business and categories.", "sql": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id GROUP BY T2.category_id HAVING COUNT(T2.business_id) > ( SELECT COUNT(T3.business_id) FROM Business_Categories AS T3 ) * 0.1", "source_tables": ["business_categories", "categories"]}, "evidence": "above 10% refers to DIVIDE(COUNT(Business_Categories.business_id = category_id), COUNT(category_id)) * 100% > 10%"}
{"sample_id": 4109, "db_id": "public_review_platform", "final": {"question": "In which categories does the only business located in the city of Arcadia appear?", "sql": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.city = 'Arcadia'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "categories refers to category_name"}
{"sample_id": 3917, "db_id": "public_review_platform", "final": {"question": "What is the total number of active business in AZ with a high review count?", "sql": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND review_count LIKE 'High' AND active LIKE 'True'", "source_tables": ["business"]}, "evidence": "active business refers to active = 'true'; 'AZ' is the state; high review count refers to review_count = 'High'"}
{"sample_id": 4075, "db_id": "public_review_platform", "final": {"question": "Write down the any five of ID and name of category that starts with alphabet \"P\".", "sql": "SELECT category_id, category_name FROM Categories WHERE category_name LIKE 'P%' LIMIT 5", "source_tables": ["categories"]}, "evidence": "category that starts with alphabet \"P\" refers to category_name like 'P%';"}
{"sample_id": 4114, "db_id": "public_review_platform", "final": {"question": "How many users with a long tip and 2 likes for their tip have a high number of fans?", "sql": "SELECT COUNT(DISTINCT T1.user_id) FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T2.tip_length = 'Long' AND T2.likes = 2 AND T1.user_fans = 'High'", "source_tables": ["tips", "users"]}, "evidence": "long tip refers to tip_length = 'Long'; 2 likes refers to likes = 2; high number of fans refers to user_fans = 'High'"}
{"sample_id": 3892, "db_id": "public_review_platform", "final": {"question": "List the categories of active businesses in Surprise, AZ.", "sql": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'TRUE' AND T1.state LIKE 'AZ' AND T1.city LIKE 'Surprise' GROUP BY T3.category_name", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "categories refers to category_name; active businesses refers to active = 'true'; in Surprise, AZ refers to city = 'Surprise' and state = 'AZ'"}
{"sample_id": 3800, "db_id": "public_review_platform", "final": {"question": "Provide name of businesses whose category is pets and are still opened after 9PM.", "sql": "SELECT T3.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T4.closing_time > '9PM' AND T1.category_name LIKE 'Pets'", "source_tables": ["business_categories", "business", "business_hours", "categories"]}, "evidence": "category refers to category_name; open after 9pm refers to closing_time > '9PM';"}
{"sample_id": 3965, "db_id": "public_review_platform", "final": {"question": "Does Yelp business No.\"11825\" have a \"parking lot\"?", "sql": "SELECT T1.attribute_value FROM Business_Attributes AS T1 INNER JOIN Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.business_id = 11825 AND T2.attribute_name = 'parking_lot'", "source_tables": ["business_attributes", "attributes"]}, "evidence": "business No.\"11825\" refers to business_id = '12476'; have a \"parking lot\" refers to attribute_value = 'parking_lot'"}
{"sample_id": 4121, "db_id": "public_review_platform", "final": {"question": "What is the total number of active businesses in AZ with a medium review count?", "sql": "SELECT COUNT(business_id) FROM Business WHERE review_count = 'Medium' AND state = 'AZ' AND active = 'true'", "source_tables": ["business"]}, "evidence": "active businesses refers to active = 'true'; AZ is a state; medium review count refers to review_count = 'Medium'"}
{"sample_id": 3769, "db_id": "public_review_platform", "final": {"question": "For the Yelp business which had the most number of \"long\" reviews, which category does it belong to?", "sql": "SELECT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T1.review_length LIKE 'Long' GROUP BY T2.business_id ORDER BY COUNT(T1.review_length) DESC LIMIT 1", "source_tables": ["business", "business_categories", "reviews", "categories"]}, "evidence": "long reviews refers to review_length = 'long'; most number of long reviews refers to MAX(COUNT(review_length = 'long')); category refers to category_name;"}
{"sample_id": 3883, "db_id": "public_review_platform", "final": {"question": "What is the review length of user 35026 to business with business ID 2?", "sql": "SELECT review_length FROM Reviews WHERE user_id = 35026 AND business_id = 2", "source_tables": ["reviews"]}, "evidence": "user 35026 refers to user_id = 35026"}
{"sample_id": 4001, "db_id": "public_review_platform", "final": {"question": "Based on business in Phoenix, calculate the percentage of business with low funny votes.", "sql": "SELECT CAST(SUM(CASE WHEN T2.review_votes_funny = 'Low' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Phoenix'", "source_tables": ["reviews", "business"]}, "evidence": "in Chandelier refers to city = 'Chandelier'; percentage = divide(count(business_id where review_votes_funny = 'Low'), count(business_id)); business with low funny votes refers to review_votes_funny = 'Low'"}
{"sample_id": 3764, "db_id": "public_review_platform", "final": {"question": "How many \"bars\" are there in the Yelp business?", "sql": "SELECT COUNT(T1.category_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.category_name LIKE 'Bars'", "source_tables": ["business_categories", "categories"]}, "evidence": "bars refers to category_name = 'Bars';"}
{"sample_id": 3812, "db_id": "public_review_platform", "final": {"question": "How many active businesses are there in Phoenix?", "sql": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Phoenix' AND active LIKE 'TRUE'", "source_tables": ["business"]}, "evidence": "active businesses refers to active = 'true'; Phoenix refers to city = 'Phoenix';"}
{"sample_id": 3790, "db_id": "public_review_platform", "final": {"question": "How many \"cute\" type of compliments does user No. 57400 get?", "sql": "SELECT COUNT(T1.compliment_type) FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.compliment_type LIKE 'cute' AND T2.user_id = 57400", "source_tables": ["compliments", "users_compliments"]}, "evidence": "type of compliments refers to compliment_type; user No. refers to user_id;"}
{"sample_id": 3910, "db_id": "public_review_platform", "final": {"question": "What is the yearly average review done by user ID 3?", "sql": "SELECT COUNT(review_stars) / (strftime('%Y', 'now') - T1.user_yelping_since_year) FROM Users AS T1 INNER JOIN Reviews AS T2 ON T1.user_id = T2.user_id WHERE T1.user_id = 3", "source_tables": ["reviews", "users"]}, "evidence": "yearly average review = Divide( Count(business_id), Subtract('%Y'(CURRENT_TIME), user_yelping_since_year))"}
{"sample_id": 3981, "db_id": "public_review_platform", "final": {"question": "Under the category name of \"Coffee & Tea\", mention any 5 business ID , their state and city.", "sql": "SELECT T2.business_id, T3.state, T3.city FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Coffee & Tea' LIMIT 5", "source_tables": ["business_categories", "business", "categories"]}, "evidence": ""}
{"sample_id": 3891, "db_id": "public_review_platform", "final": {"question": "Among the active businesses located at Chandler, AZ, list the category and atrributes of business with a medium review count.", "sql": "SELECT T3.category_name, T5.attribute_name FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id INNER JOIN Business_Attributes AS T4 ON T1.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.active LIKE 'TRUE' AND T1.state LIKE 'AZ' AND T1.city LIKE 'Chandler' AND T1.review_count LIKE 'Medium'", "source_tables": ["attributes", "business", "business_attributes", "business_categories", "categories"]}, "evidence": "active businesses refers to active = 'true'; located at Chandler, AZ refers to city = 'Chandler', state = 'AZ'; category refers to category_name; atrributes refers to attribute_name"}
{"sample_id": 4111, "db_id": "public_review_platform", "final": {"question": "How many businesses with music_karaoke attribute are closed?", "sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name = 'music_karaoke' AND T3.active = 'false' AND T2.attribute_value IN ('none', 'no', 'false')", "source_tables": ["business_attributes", "attributes", "business"]}, "evidence": "music_karaoke attribute refers to attribute_name = 'music_karaoke' AND attribute_value = 'true'; businesses are closed refers to active = 'false'"}
{"sample_id": 3990, "db_id": "public_review_platform", "final": {"question": "Find the percentage of 5 stars rated business.", "sql": "SELECT CAST(SUM(CASE WHEN stars = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(stars) FROM Business", "source_tables": ["business"]}, "evidence": "percentage refers to DIVIDE(COUNT(stars = 5), COUNT(business_id)) * 100%"}
{"sample_id": 3979, "db_id": "public_review_platform", "final": {"question": "Among the stopped businesses in San Tan Valley city, list down the user ID and review length of who had great experience.", "sql": "SELECT T2.user_id, T2.review_length FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'San Tan Valley' AND T1.active = 'false' AND T2.review_stars = 5", "source_tables": ["reviews", "business"]}, "evidence": "stop businesses refers to active = 'false'; great experience refers to review_stars = 5\n\n"}
{"sample_id": 4137, "db_id": "public_review_platform", "final": {"question": "Among the businesses with a category of Food, what is the percentage of the business with greater than 3 stars?", "sql": "SELECT CAST(SUM(CASE WHEN T1.stars > 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.stars) FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Food'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "category of food refers to category_name = 'Food'; calculation = DIVIDE(COUNT(stars > 3), SUM(stars))"}
{"sample_id": 3944, "db_id": "public_review_platform", "final": {"question": "How many businesses have a romantic ambiance?", "sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value = 'true' AND T1.attribute_name = 'ambience_romantic'", "source_tables": ["business_attributes", "attributes"]}, "evidence": "romantic ambiance refers to attribute_name = 'ambience_romantic' AND attribute_value = 'true'"}
{"sample_id": 3927, "db_id": "public_review_platform", "final": {"question": "What is the closing and opening time of businesses located at Gilbert with highest star rating?", "sql": "SELECT T2.closing_time, T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Gilbert' ORDER BY T1.stars DESC LIMIT 1", "source_tables": ["business", "business_hours"]}, "evidence": "\"Gilbert\" is the name of city; highest star rating refers to Max(stars)"}
{"sample_id": 3938, "db_id": "public_review_platform", "final": {"question": "What city does the business have a business hour from 10 am to 12 pm on Sunday?", "sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.opening_time LIKE '10AM' AND T2.closing_time LIKE '12PM' AND T3.day_of_week LIKE 'Sunday'", "source_tables": ["days", "business", "business_hours"]}, "evidence": "10 am refers to opening_time = '10AM'; 12 pm refers to closing_time = '12PM'; on Sunday refers to day_of_week = 'Sunday'"}
{"sample_id": 4040, "db_id": "public_review_platform", "final": {"question": "Does the length of the tip influence the number of likes for hotel and travel business category?", "sql": "SELECT T3.tip_length, SUM(T3.likes) AS likes FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Tips AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Hotels & Travel' GROUP BY T3.tip_length", "source_tables": ["tips", "business_categories", "categories"]}, "evidence": "the longer the tip_length, the lesser the likes OR the longer the tip length the higher the likes; hotel and travel business category refers to category_name = 'Hotels & Travel';"}
{"sample_id": 3943, "db_id": "public_review_platform", "final": {"question": "List the category of the business with high review count but received 2 stars.", "sql": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.stars = 2 AND T1.review_count LIKE 'High'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "high review count refers to review_count = 'High'; received 2 stars refers to stars = 2; category refers to category_name"}
{"sample_id": 3849, "db_id": "public_review_platform", "final": {"question": "How many users have joined Yelp since the year 2012?", "sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year = 2012", "source_tables": ["users"]}, "evidence": "since year 2012 refers to user_yelping_since_year = '2012'"}
{"sample_id": 3861, "db_id": "public_review_platform", "final": {"question": "Please list all the categories of the Yelp_Business in Arizona.", "sql": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.state LIKE 'AZ' GROUP BY T1.category_name", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "categories refers to category_name; in Arizona refers to state = 'AZ'"}
{"sample_id": 3932, "db_id": "public_review_platform", "final": {"question": "What is the opening time of the active businesses in Surprise that has a low review count.", "sql": "SELECT T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Surprise' AND T1.active LIKE 'TRUE' AND T1.review_count LIKE 'Low' GROUP BY T2.opening_time", "source_tables": ["days", "business", "business_hours"]}, "evidence": "active business refers to active = 'true'; 'Surprise' is the name of city;\u00a0 low review count refers to review_count = 'Low'"}
{"sample_id": 4155, "db_id": "citeseer", "final": {"question": "Under what classification do the papers that cited word1163 belong?", "sql": "SELECT DISTINCT T1.class_label FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T2.word_cited_id = 'word1163'", "source_tables": ["paper", "content"]}, "evidence": ""}
{"sample_id": 4141, "db_id": "citeseer", "final": {"question": "What is the total number of word cited under that class labelled 'AI'?", "sql": "SELECT COUNT(DISTINCT T2.word_cited_id) FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'AI'", "source_tables": ["paper", "content"]}, "evidence": ""}
{"sample_id": 4144, "db_id": "citeseer", "final": {"question": "Calculate the percentage of words used in Agents class label.", "sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.class_label = 'Agents' THEN T2.word_cited_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.word_cited_id) FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id", "source_tables": ["paper", "content"]}, "evidence": "percentage = (divide(count(word_cited_id where class_label = 'Agents')), (count(word_cited_id)))*100;"}
{"sample_id": 4305, "db_id": "simpson_episodes", "final": {"question": "Calculate the percentage of people who were born after 1970 and from California.", "sql": "SELECT CAST(SUM(CASE WHEN birth_region = 'California' AND SUBSTR(birthdate, 1, 4) > '1970' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(birthdate) FROM Person;", "source_tables": ["person"]}, "evidence": "born after 1970 refers to birthdate > 1970; from California refers to birth_region = 'California'; percentage = divide(count(birthdate > 1970 and birth_region = 'California'), total(birthdate)) * 100%"}
{"sample_id": 4274, "db_id": "simpson_episodes", "final": {"question": "Please list the three episodes with the highest number of votes for the worst star rating.", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = ( SELECT MIN(stars) FROM Vote ) ORDER BY T2.votes DESC LIMIT 3;", "source_tables": ["episode", "vote"]}, "evidence": "highest number of votes refers to MAX(COUNT(votes)); worst star rating refers to stars = 1"}
{"sample_id": 4288, "db_id": "simpson_episodes", "final": {"question": "What are the roles of the cast and crew from countries other than the USA?", "sql": "SELECT T2.role FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T1.birth_country != 'USA';", "source_tables": ["credit", "person"]}, "evidence": "from countries other than the USA refers to birth_country ! = 'USA'"}
{"sample_id": 4278, "db_id": "simpson_episodes", "final": {"question": "Please provide any two episodes' names that have the same keyword of \"1930s to 2020s\".", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T2.keyword = '1930s to 2020s' LIMIT 2;", "source_tables": ["keyword", "episode"]}, "evidence": ""}
{"sample_id": 4297, "db_id": "simpson_episodes", "final": {"question": "What award did the episode that aired on 11/30/2008 win?", "sql": "SELECT T1.award FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.result = 'Winner' AND T2.air_date = '2008-11-30';", "source_tables": ["award", "episode"]}, "evidence": "aired on 11/30/2008 refers to air_date = '11/30/2008'; win refers to result = 'Winner'"}
{"sample_id": 4355, "db_id": "simpson_episodes", "final": {"question": "List down the episode ID of episodes aired in 2008 with 5 stars and below.", "sql": "SELECT DISTINCT T1.episode_id FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 4) = '2008' AND T2.stars < 5;", "source_tables": ["episode", "vote"]}, "evidence": "aired in 2008 refers to air_date LIKE '2008%'; 5 stars and below refers to stars < 5"}
{"sample_id": 4289, "db_id": "simpson_episodes", "final": {"question": "How many 1 star ratings are there in the worst rated episode of the season?", "sql": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 1 ORDER BY T1.rating LIMIT 1;", "source_tables": ["episode", "vote"]}, "evidence": "worst rated episode refers to MIN(rating)"}
{"sample_id": 4171, "db_id": "simpson_episodes", "final": {"question": "How many episodes aired in the year 2009 have over 15% of voters giving 10 stars in star score?", "sql": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 4) = '2009' AND T2.stars = 10 AND T2.percent > 15;", "source_tables": ["episode", "vote"]}, "evidence": "aired in the year 2009 refers to air_date like '2009%'; 10 stars in star score refers to stars = 10; over 15% of voters refers to Votes.percent > 15"}
{"sample_id": 4190, "db_id": "simpson_episodes", "final": {"question": "What is the title of episode that won the Best International TV Series Award in 2017?", "sql": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2017' AND T1.award = 'Best International TV Series' AND T1.result = 'Winner';", "source_tables": ["award", "episode"]}, "evidence": "won refers to result = 'Winner'; in 2017 refers to year = 2017"}
{"sample_id": 4215, "db_id": "simpson_episodes", "final": {"question": "List the award name and persons who won the award in 2009.", "sql": "SELECT award, person FROM Award WHERE result = 'Winner' AND SUBSTR(year, 1, 4) = '2009';", "source_tables": ["award"]}, "evidence": "won the award refers to result = 'Winner'; in 2009 refers to year = 2009"}
{"sample_id": 4235, "db_id": "simpson_episodes", "final": {"question": "Name the performer who won Emmy Award for Outstanding Voice-Over Performance by playing Homer simpson 20.", "sql": "SELECT T1.person FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Homer simpson 20' AND T1.organization = 'Primetime Emmy Awards' AND T1.award = 'Outstanding Voice-Over Performance' AND T1.result = 'Winner';", "source_tables": ["award", "character_award"]}, "evidence": "Outstanding Voice-Over Performance refers to award = 'Outstanding Voice-Over Performance'; who won refers to result = 'Winner'; Emmy refers to organization = 'Primetime Emmy Awards'; playing Homer simpson 20 refers to character = 'Homer simpson 20'"}
{"sample_id": 4273, "db_id": "simpson_episodes", "final": {"question": "What are the top five most popular episodes?", "sql": "SELECT episode_id FROM Episode ORDER BY votes DESC LIMIT 5;", "source_tables": ["episode"]}, "evidence": "most popular episodes refers to MAX(votes)"}
{"sample_id": 4200, "db_id": "simpson_episodes", "final": {"question": "How many times was Ian Maxtone-Graham nominated for an award in Writers Guild of America, USA?", "sql": "SELECT COUNT(award_id) FROM Award WHERE person = 'Ian Maxtone-Graham' AND organization = 'Writers Guild of America, USA' AND result = 'Nominee';", "source_tables": ["award"]}, "evidence": "\"Ian Maxtone-Graham\" is the person; nominated refers to result = 'Nominee'; 'Writers Guild of America, USA' is the organization"}
{"sample_id": 4240, "db_id": "simpson_episodes", "final": {"question": "What is The simpson 20s: Season 20 average awards winning rate?", "sql": "SELECT CAST(SUM(CASE WHEN result = 'Winner' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(award) AS rate FROM Award;", "source_tables": ["award"]}, "evidence": "average awards winning rate refers to DIVIDE(SUM(result = 'winner'), COUNT(award));"}
{"sample_id": 4270, "db_id": "simpson_episodes", "final": {"question": "How many of the crew members who are taller than 1.70m were born in Canada?", "sql": "SELECT COUNT(name) FROM Person WHERE height_meters > 1.70 AND birth_country = 'Canada';", "source_tables": ["person"]}, "evidence": "taller than 1.70m refers to height_meters > 1.70; born in Canada refers to birth_country = 'Canada'"}
{"sample_id": 4285, "db_id": "simpson_episodes", "final": {"question": "Which episode has the largest number of votes?", "sql": "SELECT episode FROM Episode WHERE votes = ( SELECT MAX(votes) FROM Episode );", "source_tables": ["episode"]}, "evidence": "largest number of votes refers to MAX(votes)"}
{"sample_id": 4328, "db_id": "simpson_episodes", "final": {"question": "Out of the rating of 6.8 scored by title \"No Loan Again, Naturally\", how many percent of it consists of scores 5 to 10?", "sql": "SELECT SUM(T2.percent) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'No Loan Again, Naturally' AND T1.rating = 6.8 AND T2.stars BETWEEN 5 AND 10;", "source_tables": ["episode", "vote"]}, "evidence": "scores 5 to 10 refers to TOTAL(percent) where 1 < = stars < 5"}
{"sample_id": 4352, "db_id": "simpson_episodes", "final": {"question": "In between the episode 5 and10 of season 2, how many of them are credited for casting?", "sql": "SELECT COUNT(credited) FROM Credit WHERE episode_id IN ( 'S20-E5',  'S20-E6',  'S20-E7',  'S20-E8',  'S20-E9',  'S20-E10' ) AND credited = 'true' AND role = 'casting';", "source_tables": ["credit"]}, "evidence": "between the episode 5 and 10 of season 20 refers to episode_id IN('S20-E5', 'S20-E6', 'S20-E7', 'S20-E8', 'S20-E9', 'S20-E10'); credited refers to credited = 'true'; for casting refers to role = 'casting'"}
{"sample_id": 4257, "db_id": "simpson_episodes", "final": {"question": "Which episode id did award Outstanding Animated Program (For Programming Less Than One Hour) with an episode star score of 10?", "sql": "SELECT DISTINCT T1.episode_id FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T2.stars = 10;", "source_tables": ["award", "vote"]}, "evidence": "star score of 10 refers to stars = 10"}
{"sample_id": 4329, "db_id": "simpson_episodes", "final": {"question": "How many episodes have the star score greater than 8?", "sql": "SELECT COUNT(DISTINCT episode_id) FROM Vote WHERE stars > 8;", "source_tables": ["vote"]}, "evidence": "star score greater than 8 refers to stars > 8"}
{"sample_id": 4311, "db_id": "simpson_episodes", "final": {"question": "How many additional timers were born in USA?", "sql": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T2.role = 'additional timer' AND T1.birth_country = 'USA';", "source_tables": ["credit", "person"]}, "evidence": "additional timers refers to role = 'additional timer'; born in USA refers to birth_country = 'USA'"}
{"sample_id": 4336, "db_id": "simpson_episodes", "final": {"question": "Calculate the percentage of the nominees who were born in USA.", "sql": "SELECT CAST(SUM(CASE WHEN T1.birth_country = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.result = 'Nominee';", "source_tables": ["award", "person"]}, "evidence": "nominees refers to result = 'Nominee'; born in USA refers to birth_country = 'USA'; percentage = divide(sum(result = 'Nominee' and birth_country = 'USA'), count(Person.name)) * 100%"}
{"sample_id": 4266, "db_id": "simpson_episodes", "final": {"question": "How many recipients of the Primetime Emmy Award category that were born in the USA? Find the percentage of Americans in the total number of the country.", "sql": "SELECT SUM(CASE WHEN T1.birth_country = 'USA' THEN 1 ELSE 0 END) AS num , CAST(SUM(CASE WHEN T1.birth_country = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award_category = 'Primetime Emmy' AND T2.person = 'Dan Castellaneta';", "source_tables": ["award", "person"]}, "evidence": "born in the USA refers to birth_country = 'USA'; recipients refers to person = 'recipients'; percentage refers to DIVIDE(COUNT(birth_country = 'USA'), count(award_id))"}
{"sample_id": 4269, "db_id": "simpson_episodes", "final": {"question": "In the crew, who was born in 1962 in California?", "sql": "SELECT name FROM Person WHERE SUBSTR(birthdate, 1, 4) = '1962' AND birth_region = 'California';", "source_tables": ["person"]}, "evidence": "born in 1962 refers to year(birthdate) = 1962; in California refers to birth_region = 'California'"}
{"sample_id": 4233, "db_id": "simpson_episodes", "final": {"question": "Name the title of the episode that was nominated for Emmy's Outstanding Animated Program 21 times.", "sql": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.organization = 'Primetime Emmy Awards' AND T1.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T1.result = 'Nominee' GROUP BY T1.episode_id HAVING COUNT(T1.episode_id) = 21;", "source_tables": ["award", "episode"]}, "evidence": "nominated for refers to result = 'Nominee'; Outstanding Animated Program refers to award = 'Outstanding Animated Program (For Programming Less Than One Hour)'; Emmy's refers to organization = 'Primetime Emmy Awards'; 21 times refers to COUNT(episode_id) = 21;"}
{"sample_id": 4206, "db_id": "simpson_episodes", "final": {"question": "What character did Dan Castellaneta play that won him an award for Outstanding Voice-Over Performance in 2009 in the Primetime Emmy Awards?", "sql": "SELECT DISTINCT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.person = 'Dan Castellaneta' AND T1.award = 'Outstanding Voice-Over Performance' AND T1.organization = 'Primetime Emmy Awards' AND T1.year = 2009;", "source_tables": ["award", "character_award"]}, "evidence": "\"Dan Castellaneta\" is the person; won refers to result = 'Winner'; 'Outstanding Voice-Over Performance' is the award; 'Primetime Emmy Awards' is the organization; in 2009 refers to year = 2009"}
{"sample_id": 4220, "db_id": "simpson_episodes", "final": {"question": "Name the person, award, organization, result and credited status of the assistant director in S20-E13.", "sql": "SELECT T1.person, T1.award, T1.organization, T1.result, T2.credited FROM Award AS T1 INNER JOIN Credit AS T2 ON T2.episode_id = T1.episode_id WHERE T2.episode_id = 'S20-E13' AND T2.role = 'assistant director';", "source_tables": ["credit", "award"]}, "evidence": "\"assistant director\" is the role of person; 'S20-E13' is the episode_id; credited status refers to credited; credited = 'true' means the person is included in the credit list and vice versa"}
{"sample_id": 4320, "db_id": "simpson_episodes", "final": {"question": "What is the keyword for episodes with stars score of 10 at 30% and above?", "sql": "SELECT T1.keyword FROM Keyword AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10 AND T2.percent > 29;", "source_tables": ["keyword", "vote"]}, "evidence": "stars score of 10 at 30% and above refers to stars = 10 and percent > 29"}
{"sample_id": 4160, "db_id": "simpson_episodes", "final": {"question": "Among the crew members of the simpson 20s born in the New York city, how many of them were born after the year 1970?", "sql": "SELECT COUNT(name) FROM Person WHERE birth_region = 'New York' AND SUBSTR(birthdate, 1, 4) > '1970';", "source_tables": ["person"]}, "evidence": "born in New York city refers to birth_region = 'New York'; born after year 1970 refers to ('%Y', birthdate) > 1970"}
{"sample_id": 4209, "db_id": "simpson_episodes", "final": {"question": "How many 10 star votes did the top 4 episodes with the highest rating received?", "sql": "SELECT SUM(T1.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 10 ORDER BY T1.rating DESC LIMIT 4;", "source_tables": ["episode", "vote"]}, "evidence": "10 stars votes refers to stars = 10; highest rating refers to Max(rating); number of votes refers to SUM(votes)"}
{"sample_id": 4241, "db_id": "simpson_episodes", "final": {"question": "How many episodes were aired between October and November 2008?", "sql": "SELECT COUNT(episode_id) FROM Episode WHERE air_date LIKE '2008-10%' OR air_date LIKE '2008-11%';", "source_tables": ["episode"]}, "evidence": "between October and November 2008 refers to air_date BETWEEN '2008-10-01' and '2008-11-30'"}
{"sample_id": 4163, "db_id": "simpson_episodes", "final": {"question": "How many crew members who were born in the USA were nominated for the Outstanding Animated Program (For Programming Less Than One Hour) award in 2009?", "sql": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T1.birth_country = 'USA' AND T2.result = 'Nominee' AND T2.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T2.year = 2009;", "source_tables": ["award", "person"]}, "evidence": "born in USA refers to birth_country = 'USA'; were nominated refers to result = 'Nominee'; 'Outstanding Animated Program (For Programming Less Than One Hour)' is the award; in 2009 refers to year = 2009"}
{"sample_id": 4227, "db_id": "simpson_episodes", "final": {"question": "Describe the award title, person and character name of the award ID 326.", "sql": "SELECT DISTINCT T1.award, T1.person, T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.award_id = 326;", "source_tables": ["award", "character_award"]}, "evidence": ""}
{"sample_id": 4298, "db_id": "simpson_episodes", "final": {"question": "List all of the information about the music department's casts and crews.", "sql": "SELECT DISTINCT person, name, birthdate, birth_name, birth_place , birth_region, birth_country, height_meters, nickname FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T2.category = 'Music Department';", "source_tables": ["credit", "person"]}, "evidence": "information about the music department refers to category = 'Music Department'"}
{"sample_id": 4230, "db_id": "simpson_episodes", "final": {"question": "Find the winning rate of award in 2010. Describe the winner name, award name, episode title and role of the winner in that episode.", "sql": "SELECT T3.rate, T4.person, T4.award, T5.title, T4.role FROM ( SELECT CAST(SUM(CASE WHEN T1.result = 'Winner' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.result IN ('Winner', 'Nominee') THEN 1 ELSE 0 END) AS rate , T1.person, T1.award, T2.title, T1.role FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2010' ) AS T3 INNER JOIN Award AS T4 INNER JOIN Episode AS T5 ON T4.episode_id = T5.episode_id WHERE T4.year = 2010 AND T4.result = 'Winner';", "source_tables": ["award", "episode"]}, "evidence": "in 2010 refers to year = 2010; winning rate refers to DIVIDE(COUNT(result = 'winner'), COUNT(*));"}
{"sample_id": 4350, "db_id": "simpson_episodes", "final": {"question": "What is the total number of episode with a rating below 7?", "sql": "SELECT COUNT(episode_id) FROM Episode WHERE rating < 7;", "source_tables": ["episode"]}, "evidence": "rating below 7 refers to rating < 7"}
{"sample_id": 4333, "db_id": "simpson_episodes", "final": {"question": "How many awards had been held in 2009?", "sql": "SELECT COUNT(award_id) FROM Award WHERE SUBSTR(year, 1, 4) = '2009';", "source_tables": ["award"]}, "evidence": "had been held in 2009 refers to year = 2009"}
{"sample_id": 4214, "db_id": "simpson_episodes", "final": {"question": "In \"Sex, Pies and Idiot Scrapes\", how many percentage of votes did the 9 star score has?", "sql": "SELECT T2.percent FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Sex, Pies and Idiot Scrapes' AND T2.stars = 9;", "source_tables": ["episode", "vote"]}, "evidence": "\"Sex, Pies and Idiot Scrapes\" is the title of episode; 9 star score refers to stars = 9; percentage refers to percent"}
{"sample_id": 4365, "db_id": "simpson_episodes", "final": {"question": "In episodes aired in 2009, how many of them are credited to Sam Im for additional timer?", "sql": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.credited = 'true' AND T2.person = 'Sam Im' AND SUBSTR(T1.air_date, 1, 4) = '2009' AND T2.role = 'additional timer';", "source_tables": ["credit", "episode"]}, "evidence": "in 2009 refers to air_date LIKE '2009%'; credited refers to credited = 'true'; Sam Im refers to person = 'Sam Im'; for additional timer refers to role = 'additional timer'"}
{"sample_id": 4279, "db_id": "simpson_episodes", "final": {"question": "In 2010, which episode did Joel H. Cohen win an award for?", "sql": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2010' AND T1.person = 'Joel H. Cohen';", "source_tables": ["award", "episode"]}, "evidence": "In 2010 refers to year = 2010"}
{"sample_id": 4308, "db_id": "simpson_episodes", "final": {"question": "Write down the website address which stores the episode image of episode 5.", "sql": "SELECT episode_image FROM Episode WHERE episode = 5;", "source_tables": ["episode"]}, "evidence": "website address refers to episode_image"}
{"sample_id": 4158, "db_id": "simpson_episodes", "final": {"question": "Which crew member of the simpson 20s is the oldest?", "sql": "SELECT name FROM Person WHERE birthdate IS NOT NULL ORDER BY birthdate ASC LIMIT 1;", "source_tables": ["person"]}, "evidence": "oldest refers to Min(birthdate)"}
{"sample_id": 4486, "db_id": "student_loan", "final": {"question": "Among all students, calculate the percentage of disabled students.", "sql": "SELECT CAST(COUNT(T2.name) AS REAL) * 100 / COUNT(T1.name) FROM person AS T1 LEFT JOIN disabled AS T2 ON T2.name = T1.name", "source_tables": ["disabled", "person"]}, "evidence": "percentage = CONCAT(DIVIDE(MULTIPLY(COUNT(disabled.name), 100), (COUNT(person.name that is not in disabled.name))),'%');"}
{"sample_id": 4553, "db_id": "student_loan", "final": {"question": "How many students have never been absent in school?", "sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 0", "source_tables": ["longest_absense_from_school"]}, "evidence": "never been absent in school refers to month = 0;"}
{"sample_id": 4461, "db_id": "student_loan", "final": {"question": "How many students are enlisted in the Army organization?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'army'", "source_tables": ["enlist"]}, "evidence": "enlisted in the army refers to organ = 'army';"}
{"sample_id": 4449, "db_id": "student_loan", "final": {"question": "Among the students enlisted in marines, how many of them are disabled?", "sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.organ = 'marines'", "source_tables": ["disabled", "enlist"]}, "evidence": "enlisted in marines refers to organ = 'marines';"}
{"sample_id": 4383, "db_id": "student_loan", "final": {"question": "What is the percentage of male students in the navy department?", "sql": "SELECT CAST(COUNT(T2.name) AS REAL) * 100 / COUNT(T1.name) FROM enlist AS T1 LEFT JOIN male AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.organ = 'navy'", "source_tables": ["male", "enlist"]}, "evidence": "in the navy department refers to organ = 'navy'; percentage refers to DIVIDE(COUNT(name where organ = 'navy'), COUNT(name))"}
{"sample_id": 4442, "db_id": "student_loan", "final": {"question": "What is the gender of student1000?", "sql": "SELECT IIF(T.result = 0, 'female', 'male') AS re FROM ( SELECT COUNT(name) AS result FROM male WHERE name = 'studenT1000' ) T", "source_tables": ["male"]}, "evidence": "student name appear in Male table means student is a male, student does not appear in Male table means student is a female"}
{"sample_id": 4400, "db_id": "student_loan", "final": {"question": "How many unemployed students are there that have been absent for 6 months?", "sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.\"name\" = T2.name WHERE T1.\"month\" = 6", "source_tables": ["longest_absense_from_school", "unemployed"]}, "evidence": "absent for 6 months refers to month = 6;"}
{"sample_id": 4425, "db_id": "student_loan", "final": {"question": "How many students have been absent above 2 months?", "sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month > 2", "source_tables": ["longest_absense_from_school"]}, "evidence": "absent above 2 months refers to month > 2;"}
{"sample_id": 4429, "db_id": "student_loan", "final": {"question": "How many unemployed students are enlisted in the navy organization?", "sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'navy'", "source_tables": ["enlist", "unemployed"]}, "evidence": "enlisted in the navy organization refers to organ = 'navy';"}
{"sample_id": 4428, "db_id": "student_loan", "final": {"question": "Mention the name of disabled students who have never been absent from school.", "sql": "SELECT T1.name FROM disabled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name WHERE T2.month = 0", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "never been absent from school refers to month = 0"}
{"sample_id": 4407, "db_id": "student_loan", "final": {"question": "What is the longest students absence duration from school?", "sql": "SELECT name, month FROM longest_absense_from_school WHERE \"month\" = ( SELECT MAX(month) FROM longest_absense_from_school )", "source_tables": ["longest_absense_from_school"]}, "evidence": "longest students absence duration MAX(month)"}
{"sample_id": 4401, "db_id": "student_loan", "final": {"question": "Count the number of students from UCSD enlisted in the peace corps.", "sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T1.\"name\" = T2.\"name\" WHERE T2.school = 'ucsd' AND T1.organ = 'peace_corps'", "source_tables": ["enlist", "enrolled"]}, "evidence": "in the peace corps refers to organ = 'peace_corps'; from UCSD refers to school = 'ucsd';"}
{"sample_id": 4511, "db_id": "student_loan", "final": {"question": "Which male students are unemployed, disable and were absent for 5 month?", "sql": "SELECT T1.name FROM unemployed AS T1 INNER JOIN disabled AS T2 ON T2.name = T1.name INNER JOIN longest_absense_from_school AS T3 ON T3.name = T2.name WHERE T3.month = 5", "source_tables": ["disabled", "longest_absense_from_school", "unemployed"]}, "evidence": "male students are mentioned in male.name; unemployed and disabled refers to unemployed.name = disabled.name; absent for 5 month refers to month = 5;"}
{"sample_id": 4436, "db_id": "student_loan", "final": {"question": "How many unemployed disabled students have been absent for 8 months from school?", "sql": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name INNER JOIN disabled AS T3 ON T2.name = T3.name WHERE T1.month = 8", "source_tables": ["disabled", "longest_absense_from_school", "unemployed"]}, "evidence": "absent for 8 months refers to month = 8;"}
{"sample_id": 4477, "db_id": "student_loan", "final": {"question": "How many disabled students have payment due?", "sql": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN no_payment_due AS T2 ON T2.name = T1.name WHERE T2.bool = 'pos'", "source_tables": ["disabled", "no_payment_due"]}, "evidence": "have payment due refers to bool = 'pos';"}
{"sample_id": 4430, "db_id": "student_loan", "final": {"question": "Count the number of male students who belong to foreign legion.", "sql": "SELECT COUNT(T1.name) FROM male AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'foreign_legion'", "source_tables": ["male", "enlist"]}, "evidence": "belong to foreign legion refers to organ = 'foreign_legion';"}
{"sample_id": 4414, "db_id": "student_loan", "final": {"question": "How many female students joined a marines and air force organization?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ IN ('marines', 'air_force') AND name NOT IN ( SELECT name FROM male )", "source_tables": ["male", "enlist"]}, "evidence": "joined a marines refers to organ = 'marines'; air force organization refers to organ = 'air_force';"}
{"sample_id": 4519, "db_id": "student_loan", "final": {"question": "State the number of male students who do not have payment due.", "sql": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN male AS T2 ON T2.name = T1.name WHERE T1.bool = 'pos'", "source_tables": ["male", "no_payment_due"]}, "evidence": "do not have payment due refers to bool = 'neg';"}
{"sample_id": 4544, "db_id": "student_loan", "final": {"question": "What is the employment and payment status of student110?", "sql": "SELECT T1.bool FROM no_payment_due AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name WHERE T1.name = 'student110'", "source_tables": ["unemployed", "no_payment_due"]}, "evidence": "employment status is mentioned in unemployment; unemployed.name = 'student110' means the student is unemployed; if 'student110' can not be found in unemployed.name, it means the student is employed; payment status is mentioned in no_payment_due; bool = 'pos' means the student has payment due; bool = 'neg' means the student has no payment due; student110 is a name of student;"}
{"sample_id": 4406, "db_id": "student_loan", "final": {"question": "What is the total number of students in the school?", "sql": "SELECT COUNT(name) FROM person", "source_tables": ["person"]}, "evidence": ""}
{"sample_id": 4408, "db_id": "student_loan", "final": {"question": "How many students were absence for 4 month?", "sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 4", "source_tables": ["longest_absense_from_school"]}, "evidence": "absence for 4 month refers to month = 4;"}
{"sample_id": 4488, "db_id": "student_loan", "final": {"question": "List down the student names who did not file for bankruptcy.", "sql": "SELECT name FROM person WHERE name NOT IN ( SELECT name FROM filed_for_bankrupcy )", "source_tables": ["filed_for_bankrupcy", "person"]}, "evidence": "students name who did not file a bankruptcy refers to person.name who are NOT in filed_for_bankrupcy.name;"}
{"sample_id": 4410, "db_id": "student_loan", "final": {"question": "Does disable students join organization. If yes, please indicate the organization joined by the students.", "sql": "SELECT DISTINCT T2.organ FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.\"name\" = T2.\"name\"", "source_tables": ["disabled", "enlist"]}, "evidence": "organization refers to organ"}
{"sample_id": 4384, "db_id": "student_loan", "final": {"question": "What is the average time for a disabled student to be absent from school?", "sql": "SELECT AVG(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.\"name\" = T2.\"name\"", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "average time refers to DIVIDE(SUM(`month`), COUNT(name))"}
{"sample_id": 4459, "db_id": "student_loan", "final": {"question": "Find the percentage of male students enlisted in the fire department.", "sql": "SELECT CAST(COUNT(T2.name) AS REAL) * 100 / COUNT(T1.name) FROM enlist AS T1 LEFT JOIN male AS T2 ON T1.name = T2.name WHERE T1.organ = 'fire_department'", "source_tables": ["male", "enlist"]}, "evidence": "percentage refers to DIVIDE(COUNT(organ = 'fire_department'), COUNT(name))"}
{"sample_id": 4533, "db_id": "student_loan", "final": {"question": "Calculate the average duration of absense of female students.", "sql": "SELECT AVG(T2.month) FROM person AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T1.name = T3.name WHERE T3.name IS NULL", "source_tables": ["longest_absense_from_school", "male", "person"]}, "evidence": "average duration = DIVIDE(SUM(month), COUNT(longest_absence_from_school.name which are NOT in male.name)); female students refers to longest_absence_from_school.name who are NOT in male.name;"}
{"sample_id": 4551, "db_id": "student_loan", "final": {"question": "Among the students enrolled in UCLA, what is the percentage of male students in the air force department?", "sql": "SELECT CAST(COUNT(T4.name) AS REAL) * 100 / COUNT(T2.name) FROM enlist AS T1 INNER JOIN person AS T2 ON T1.name = T2.name INNER JOIN enrolled AS T3 ON T3.name = T2.name LEFT JOIN male AS T4 ON T2.name = T4.name WHERE T3.school = 'ucla' AND T1.organ = 'air_force'", "source_tables": ["male", "enlist", "enrolled", "person"]}, "evidence": "UCLA refers to school = 'ucla'; percentage = MULTIPLY(DIVIDE(COUNT(male.name), COUNT(person.name)), 100); male students are mentioned in male.name; department refers to organ; organ = 'air_force';"}
{"sample_id": 4460, "db_id": "student_loan", "final": {"question": "How many students has the longest absense from school for 5 months?", "sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 5", "source_tables": ["longest_absense_from_school"]}, "evidence": "absense from school for 5 month refers to month = 5"}
{"sample_id": 4499, "db_id": "student_loan", "final": {"question": "How many students are filed for bankruptcy?", "sql": "SELECT COUNT(name) FROM filed_for_bankrupcy", "source_tables": ["filed_for_bankrupcy"]}, "evidence": ""}
{"sample_id": 4382, "db_id": "student_loan", "final": {"question": "Please list all the female students that have filed for bankruptcy.", "sql": "SELECT name FROM filed_for_bankrupcy WHERE name NOT IN ( SELECT name FROM male )", "source_tables": ["male", "filed_for_bankrupcy"]}, "evidence": "females students have filed for bankruptcy refers to name that appeared in both filed_for_bankrupcy and male tables"}
{"sample_id": 4478, "db_id": "student_loan", "final": {"question": "Calculate the average number of female students who are disabled and who joined Foreign Legion organization.", "sql": "SELECT CAST(SUM(IIF(T3.name IS NULL, 1, 0)) AS REAL) / COUNT(T1.name) FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name WHERE T2.organ = 'foreign_legion'", "source_tables": ["disabled", "male", "enlist"]}, "evidence": "average = DIVIDE(COUNT(disabled.name who are not in male.name WHERE organ = 'foreign_legion'), COUNT(disabled.name)); female students who are disabled refers to disabled.name who are NOT in male.name; organization refers to organ; organ = 'Foreign Legion';"}
{"sample_id": 4520, "db_id": "student_loan", "final": {"question": "State the number of students who filed for bankruptcy and have payment due.", "sql": "SELECT COUNT(T1.name) FROM filed_for_bankrupcy AS T1 INNER JOIN no_payment_due AS T2 ON T2.name = T1.name WHERE T2.bool = 'pos'", "source_tables": ["no_payment_due", "filed_for_bankrupcy"]}, "evidence": "have payment due refers to bool = 'pos';"}
{"sample_id": 4494, "db_id": "student_loan", "final": {"question": "Among the students who have been absent for four months, provide any five students' names and enlisted organizations.", "sql": "SELECT T2.name, T2.organ FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T2.name = T1.name WHERE T1.month = 4 LIMIT 5", "source_tables": ["longest_absense_from_school", "enlist"]}, "evidence": "absent for four months refers to month = 4; enlisted organizations refers to organ;"}
{"sample_id": 4452, "db_id": "student_loan", "final": {"question": "Which school has the highest number of disabled students?", "sql": "SELECT T.school FROM ( SELECT T2.school, COUNT(T2.name) AS num FROM disabled AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name GROUP BY T2.school ) T ORDER BY T.num DESC LIMIT 1", "source_tables": ["disabled", "enrolled"]}, "evidence": "highest number of disabled students refers to MAX(COUNT(disabled.name))"}
{"sample_id": 4421, "db_id": "student_loan", "final": {"question": "What is the average absence period of a disabled student?", "sql": "SELECT AVG(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "average refers to DIVIDE(SUM(month), COUNT(name))"}
{"sample_id": 4394, "db_id": "student_loan", "final": {"question": "Name 5 students with due payments that are enlisted alongside which organization they were enlisted.", "sql": "SELECT T2.organ, T1.name FROM no_payment_due AS T1 INNER JOIN enlist AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.bool = 'pos' LIMIT 5", "source_tables": ["enlist", "no_payment_due"]}, "evidence": "with due payments refers to bool = 'pos'; organization refers to organ"}
{"sample_id": 4481, "db_id": "student_loan", "final": {"question": "Calculate the percentage of students who have never been absent.", "sql": "SELECT CAST(SUM(IIF(month = 0, 1, 0)) AS REAL) * 100 / COUNT(name) FROM longest_absense_from_school", "source_tables": ["longest_absense_from_school"]}, "evidence": "percentage = CONCAT(DIVIDE(MULTIPLY(COUNT(name WHERE month = 0), 100), COUNT(name)),'%'); never been absent refers to month = 0;"}
{"sample_id": 4441, "db_id": "student_loan", "final": {"question": "State name of students who filed for bankruptcy and have the longest duration of absense from school.", "sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name ORDER BY T1.month DESC LIMIT 1", "source_tables": ["longest_absense_from_school", "filed_for_bankrupcy"]}, "evidence": "longest duration of absense refers to MAX(month)"}
{"sample_id": 4512, "db_id": "student_loan", "final": {"question": "List out female students that enrolled in occ school and ulca?", "sql": "SELECT name FROM enrolled WHERE school IN ('occ', 'ulca') AND name NOT IN ( SELECT name FROM male )", "source_tables": ["male", "enrolled"]}, "evidence": "female students refers to enrolled.name who are NOT in male.name; occ school and ulca refers to school IN('occ', 'ulca');"}
{"sample_id": 4373, "db_id": "student_loan", "final": {"question": "Among the students that have filed for bankruptcy, how many of them have been absent from school for over 5 months?", "sql": "SELECT COUNT(T1.name) FROM filed_for_bankrupcy AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.\"name\" = T2.\"name\" WHERE T2.\"month\" > 5", "source_tables": ["longest_absense_from_school", "filed_for_bankrupcy"]}, "evidence": "absent from school for over 5 months refers to `month` > 5;"}
{"sample_id": 4585, "db_id": "mental_health_survey", "final": {"question": "Please list the IDs of the users who answered \"Yes\" to the question \"Do you think that discussing a physical health issue with your employer would have negative consequences?\" in 2014's survey.", "sql": "SELECT T2.UserID FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T1.questiontext = 'Do you think that discussing a physical health issue with your employer would have negative consequences?' AND T2.AnswerText LIKE 'Yes' AND T2.SurveyID = 2014", "source_tables": ["answer", "question"]}, "evidence": "2014 refer to SurveyID; Question refer to questiontext; yes refer to AnswerText = 'Yes'\n\n"}
{"sample_id": 4618, "db_id": "mental_health_survey", "final": {"question": "How many questions were asked in the questionary for the mental health survey?", "sql": "SELECT COUNT(questiontext) FROM Question", "source_tables": ["question"]}, "evidence": ""}
{"sample_id": 4589, "db_id": "mental_health_survey", "final": {"question": "How many users lived in Canada according to 2018's survey?", "sql": "SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID = 2018 AND T1.questiontext = 'What country do you live in?' AND T2.AnswerText = 'Canada'", "source_tables": ["answer", "question"]}, "evidence": "lived in Canada refers to AnswerText(QuestionID(3)) = 'Canada'"}
{"sample_id": 4611, "db_id": "mental_health_survey", "final": {"question": "What was the percentage for the answer of \"Yes\" was given to the question \"Has your employer ever formally discussed mental health (for example, as part of a wellness campaign or other official communication)?\"?", "sql": "SELECT CAST(SUM(CASE  WHEN T1.AnswerText LIKE 'Yes' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'Has your employer ever formally discussed mental health (for example, as part of a wellness campaign or other official communication)?'", "source_tables": ["answer", "question"]}, "evidence": "percentage = divide(count(QuestionID = 15& AnswerText = 'Yes'), count(QuestionID = 15))*100%"}
{"sample_id": 4581, "db_id": "mental_health_survey", "final": {"question": "What is the percentage of the the users who would bring up a mental health issue with a potential employer in an interview?", "sql": "SELECT CAST(SUM(CASE  WHEN T1.AnswerText LIKE 'Yes' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 12", "source_tables": ["answer", "question"]}, "evidence": "Percentage = DIVIDE(SUM(AnswerText = 'Yes' Or AnswerText = 'Maybe'), COUNT(QuestionID = 12))* 100"}
{"sample_id": 4598, "db_id": "mental_health_survey", "final": {"question": "How many users participated in the Survey No.2016?", "sql": "SELECT COUNT(DISTINCT UserID) FROM Answer WHERE SurveyID LIKE 2016", "source_tables": ["answer"]}, "evidence": "Survey No.2016 refers to SurveyID = 2016"}
{"sample_id": 4579, "db_id": "mental_health_survey", "final": {"question": "Which country have the least number of users being surveyed? Indicate the name of the country. If there are multiple countries having the same number of users, indicate all of their names.", "sql": "SELECT T1.AnswerText FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 3 GROUP BY T1.AnswerText ORDER BY COUNT(T1.UserID) DESC LIMIT 1", "source_tables": ["answer", "question"]}, "evidence": "Country with least number of users being surveyed refers to MIN(COUNT(AnswerText)) where questionid = 3"}
{"sample_id": 4604, "db_id": "mental_health_survey", "final": {"question": "How many different answers did the question \"Describe the conversation you had with your previous employer about your mental health, including their reactions and actions taken to address your mental health issue/questions.\" get?", "sql": "SELECT COUNT(DISTINCT T1.AnswerText) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'Describe the conversation you had with your previous employer about your mental health, including their reactions and actions taken to address your mental health issue/questions.'", "source_tables": ["answer", "question"]}, "evidence": ""}
{"sample_id": 4606, "db_id": "mental_health_survey", "final": {"question": "How many people wrote comments for the question \"Any additional notes or comments.\"?", "sql": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'Any additional notes or comments' AND T1.AnswerText IS NOT NULL", "source_tables": ["answer", "question"]}, "evidence": "question refers to questiontext; wrote comments refers to AnswerText(QuestionID = 103) ! = -1"}
{"sample_id": 4580, "db_id": "mental_health_survey", "final": {"question": "What is the average age of the survey respondents in the United States?", "sql": "SELECT CAST(SUM(T1.AnswerText) AS REAL) / COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN ( SELECT T1.UserID FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 3 AND T1.AnswerText = 'United States' ) AS T2 ON T1.UserID = T2.UserID INNER JOIN Question AS T3 ON T1.QuestionID = T3.questionid WHERE T3.questionid = 1", "source_tables": ["answer", "question"]}, "evidence": "Average age refer to AVG(AnswerText) where questionid = 1; respondents in the United States refers to AnswerText = 'United States' where questionid = 3"}
{"sample_id": 4666, "db_id": "disney", "final": {"question": "List all the songs associated with drama movies.", "sql": "SELECT song FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title WHERE T1.genre = 'Drama' GROUP BY song", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "drama refers to genre = 'Drama';"}
{"sample_id": 4722, "db_id": "disney", "final": {"question": "What is Disney's highest grossing action movie?", "sql": "SELECT movie_title FROM movies_total_gross WHERE genre = 'Action' ORDER BY CAST(REPLACE(trim(total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1", "source_tables": ["movies_total_gross"]}, "evidence": "action movie refers to movie_title where genre = 'Action'; highest grossing movie refers to MAX(total_gross)"}
{"sample_id": 4631, "db_id": "disney", "final": {"question": "Among the movies directed by Wolfgang Reitherman, which one of them was the most popular?", "sql": "SELECT T2.movie_title FROM director AS T1 INNER JOIN movies_total_gross AS T2 ON T1.name = T2.movie_title WHERE T1.director = 'Wolfgang Reitherman' ORDER BY T2.total_gross DESC LIMIT 1", "source_tables": ["director", "movies_total_gross"]}, "evidence": "directed by Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; the most popular movie refers to MAX(total_gross);"}
{"sample_id": 4716, "db_id": "disney", "final": {"question": "The main character Elsa is voiced by which actor and who is the director of the movie?", "sql": "SELECT T1.\"voice-actor\", T3.director FROM \"voice-actors\" AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title INNER JOIN director AS T3 ON T2.movie_title = T3.name WHERE T2.hero = 'Elsa'", "source_tables": ["voice-actors", "director", "characters"]}, "evidence": "Elsa is the main character of the movie which refers to hero = 'Elsa'; voiced by which actor refers to voice-actor;"}
{"sample_id": 4635, "db_id": "disney", "final": {"question": "Who is the villain of the movie \"Beauty and the Beast\"?", "sql": "SELECT villian FROM characters WHERE movie_title = 'Beauty and the Beast'", "source_tables": ["characters"]}, "evidence": "Beauty and the Beast refers to movie_title = 'Beauty and the Beast';"}
{"sample_id": 4665, "db_id": "disney", "final": {"question": "From 2000 to 2010, in which year did the studio entertainment segment make the most revenue?", "sql": "SELECT \"Year\" FROM revenue WHERE \"Year\" BETWEEN 2000 AND 2010 ORDER BY \"Studio Entertainment[NI 1]\" DESC LIMIT 1", "source_tables": ["revenue"]}, "evidence": "From 2000 to 2010 refers to Year between 2000 and 2010; the most revenue refers to MAX(\"Studio Entertainment[NI 1]\");"}
{"sample_id": 4703, "db_id": "disney", "final": {"question": "What movies did director Jack Kinney direct?", "sql": "SELECT name FROM director WHERE director = 'Jack Kinney'", "source_tables": ["director"]}, "evidence": "FALSE;"}
{"sample_id": 4686, "db_id": "disney", "final": {"question": "List the movie titles and associated songs directed by Ron Clements.", "sql": "SELECT T1.movie_title, T1.song FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Ron Clements'", "source_tables": ["director", "characters"]}, "evidence": "Ron Clements refers director = 'Ron Clements';"}
{"sample_id": 4639, "db_id": "disney", "final": {"question": "Who is the hero character of the movie whose total gross was $222,527,828?", "sql": "SELECT T1.hero FROM characters AS T1 INNER JOIN movies_total_gross AS T2 ON T2.movie_title = T1.movie_title WHERE T2.total_gross = '$222,527,828'", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "FALSE;"}
{"sample_id": 4714, "db_id": "disney", "final": {"question": "Provide the names of voice actors for the characters of films directed by Wolfgang Reitherman.", "sql": "SELECT T2.hero, T1.\"voice-actor\" FROM \"voice-actors\" AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title INNER JOIN director AS T3 ON T3.name = T2.movie_title WHERE T3.director = 'Wolfgang Reitherman'", "source_tables": ["voice-actors", "director", "characters"]}, "evidence": "Wolfgang Reitherman refers to director = 'Wolfgang Reitherman';"}
{"sample_id": 4698, "db_id": "disney", "final": {"question": "Among the movies released from 2001 to 2005, list down the titles and directors of the movies which had a total gross of more than 100% above the average.", "sql": "SELECT T2.name, T2.director FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE SUBSTR(T1.release_date, LENGTH(T1.release_date) - 3, LENGTH(T1.release_date)) BETWEEN '2001' AND '2005' AND CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) / ( SELECT SUM(CAST(REPLACE(trim(T3.total_gross, '$'), ',', '') AS REAL)) / COUNT(T3.movie_title) AS avg_gross FROM movies_total_gross AS T3 INNER JOIN director AS T4 ON T3.movie_title = T4.name WHERE SUBSTR(T3.release_date, LENGTH(T3.release_date) - 3, LENGTH(T3.release_date)) BETWEEN '2001' AND '2005' ) - 1 > 1", "source_tables": ["movies_total_gross", "director"]}, "evidence": "Released from 2001 to 2005 refers to substr(release_date, length(release_date) - 3, length(release_date)) between '2001' and '2005'; DIVIDE(SUM(total_gross), COUNT(movie_title));"}
{"sample_id": 4731, "db_id": "disney", "final": {"question": "What is the difference in the current gross of Cars and its sequel, Cars 2? Which movie is more popular?", "sql": "SELECT SUM(CASE WHEN movie_title = 'Cars' THEN CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL) ELSE 0 END), SUM(CASE WHEN movie_title = 'Cars 2' THEN CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL) ELSE 0 END) FROM movies_total_gross", "source_tables": ["movies_total_gross"]}, "evidence": "SUBTRACT(inflation_adjusted_gross where movie_title = 'Cars', inflation_adjusted_gross where movie_title = 'Cars 2'); more popular movie refers to movie_title where MAX(inflation_adjusted_gross);"}
{"sample_id": 4671, "db_id": "disney", "final": {"question": "What are the characters in the PG movies?", "sql": "SELECT DISTINCT T2.character FROM movies_total_gross AS T1 INNER JOIN \"voice-actors\" AS T2 ON T1.movie_title = T2.movie WHERE T1.MPAA_rating = 'PG'", "source_tables": ["voice-actors", "movies_total_gross"]}, "evidence": "PG is an abbreviation for parental guidance and refers to MPAA_rating = 'PG';"}
{"sample_id": 4661, "db_id": "disney", "final": {"question": "How many horror movies are there?", "sql": "SELECT COUNT(movie_title) FROM \"movies_total_gross\" WHERE genre = 'Horror'", "source_tables": ["movies_total_gross"]}, "evidence": "Horror refers to genre = 'Horror';"}
{"sample_id": 4700, "db_id": "disney", "final": {"question": "How many voice actors for the movie Aladdin?", "sql": "SELECT COUNT(\"voice-actor\") FROM \"voice-actors\" WHERE movie = 'Aladdin'", "source_tables": ["voice-actors"]}, "evidence": "Aladdin is the name of the movie which refers to movie = 'Aladdin';"}
{"sample_id": 4721, "db_id": "disney", "final": {"question": "Who was the first ever Disney villain?", "sql": "SELECT villian FROM characters ORDER BY SUBSTR(release_date, LENGTH(release_date) - 1, LENGTH(release_date)) DESC LIMIT 1", "source_tables": ["characters"]}, "evidence": "the first ever villian is villian that was released before all others in time which refers to substr(release_date, length(release_date) - 1, length(release_date)) desc limit 1;"}
{"sample_id": 4676, "db_id": "disney", "final": {"question": "What are the total grosses for the movies with Jim Cummings as the voice actor?", "sql": "SELECT T2.movie_title FROM \"voice-actors\" AS T1 INNER JOIN movies_total_gross AS T2 ON T2.movie_title = T1.movie WHERE T1.\"voice-actor\" = 'Jim Cummings' ORDER BY CAST(REPLACE(trim(T2.total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1", "source_tables": ["voice-actors", "movies_total_gross"]}, "evidence": "FALSE;"}
{"sample_id": 4693, "db_id": "disney", "final": {"question": "Who directed the most popular movie?", "sql": "SELECT T2.director FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name ORDER BY CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1", "source_tables": ["movies_total_gross", "director"]}, "evidence": "The most popular movie refers MAX(total_gross); who directed refers to director;"}
{"sample_id": 4648, "db_id": "disney", "final": {"question": "The character Donald Duck has appeared in two Disney movies, which one has more grossing?", "sql": "SELECT T1.movie_title FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title WHERE T2.hero = 'Donald Duck' ORDER BY CAST(REPLACE(SUBSTR(total_gross, 2), ',', '') AS REAL) DESC LIMIT 1", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "Donald Duck is the main character of the movie which refers to hero = 'Donald Duck'; which one has more grossing refers to movie_title where MAX(total_gross);"}
{"sample_id": 4674, "db_id": "disney", "final": {"question": "Who are the voice actors in the movie that came out on 11/24/2010?", "sql": "SELECT T2.\"voice-actor\" FROM movies_total_gross AS T1 INNER JOIN \"voice-actors\" AS T2 ON T1.movie_title = T2.movie WHERE T1.release_date = 'Nov 24, 2010'", "source_tables": ["voice-actors", "movies_total_gross"]}, "evidence": "Came out on 11/24/2010 refers to release_date = 'Nov 24, 2010';"}
{"sample_id": 4717, "db_id": "disney", "final": {"question": "Calculate the percentage of directors whose films grossed over $100 million.", "sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) > 100000000 THEN T3.director ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T3.director) FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title INNER JOIN director AS T3 ON T1.movie_title = T3.name", "source_tables": ["movies_total_gross", "director", "characters"]}, "evidence": "DIVIDE(COUNT(director where total_gross > 100000000), COUNT(director)) as percentage;"}
{"sample_id": 4636, "db_id": "disney", "final": {"question": "Which movie is the character Robin Hood in?", "sql": "SELECT movie_title FROM characters WHERE hero = 'Robin Hood'", "source_tables": ["characters"]}, "evidence": "Robin Hood is the main character of the movie which refers to hero = 'Robin Hood'; movie refers to movie_title;"}
{"sample_id": 4728, "db_id": "disney", "final": {"question": "Determine the average gross for Disney's PG-13-rated action movies.", "sql": "SELECT SUM(CAST(REPLACE(trim(total_gross, '$'), ',', '') AS REAL)) / COUNT(movie_title) FROM movies_total_gross WHERE MPAA_rating = 'PG-13'", "source_tables": ["movies_total_gross"]}, "evidence": "DIVIDE(SUM(total_gross where genre = 'Action' and MPAA_rating = 'PG-13'), COUNT(movie_title where genre = 'Action' and MPAA_rating = 'PG-13'));"}
{"sample_id": 4785, "db_id": "legislator", "final": {"question": "Give the Wikipedia IDs of historical legislators who are Readjuster Democrats.", "sql": "SELECT T2.wikipedia_id FROM \"historical-terms\" AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.party = 'Readjuster Democrat'", "source_tables": ["historical", "historical-terms"]}, "evidence": "Readjuster Democrats refers to party = 'Readjuster Democrat'"}
{"sample_id": 4781, "db_id": "legislator", "final": {"question": "Which legislator has the YouTube channel 'RoskamIL06?' Write the official full name.", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T2.bioguide = T1.bioguide_id WHERE T2.youtube = 'RoskamIL06'", "source_tables": ["social-media", "current"]}, "evidence": "YouTube channel 'RoskamIL06' refers to youtube = 'RoskamIL06';"}
{"sample_id": 4795, "db_id": "legislator", "final": {"question": "How old was Jr. F. James Sensenbrenner when he first started as a legislator?", "sql": "SELECT CAST(MIN(T2.start) - T1.birthday_bio AS DATE) AS AGE FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'F. James Sensenbrenner, Jr.'", "source_tables": ["current-terms", "current"]}, "evidence": "Jr. F. James Sensenbrenner is an official_full_name; How old refers to SUBTRACT(MIN(start), birthday_bio)"}
{"sample_id": 4740, "db_id": "legislator", "final": {"question": "What is the google entity ID of current legislator Sherrod Brown?", "sql": "SELECT google_entity_id_id FROM current WHERE official_full_name = 'Sherrod Brown'", "source_tables": ["current"]}, "evidence": "Sherrod Brown is an official_full_name"}
{"sample_id": 4814, "db_id": "legislator", "final": {"question": "Among male legislators, state number of the legislators who are not the senator.", "sql": "SELECT COUNT(T3.state) FROM ( SELECT T2.state FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'M' AND (T2.class IS NULL OR T2.class = '') GROUP BY T2.state ) T3", "source_tables": ["current-terms", "current"]}, "evidence": "male refers to gender_bio = M; not the senator refers to class IS NULL OR class = ''"}
{"sample_id": 4770, "db_id": "legislator", "final": {"question": "Provide the full name of all current female legislators that chose Republican as their political party.", "sql": "SELECT T1.first_name, T1.last_name FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Republican' AND T1.gender_bio = 'F' AND T2.END > DATE() GROUP BY T1.bioguide_id", "source_tables": ["current-terms", "current"]}, "evidence": "full name refers to official_full_name; official_full_name refers to first_name, last_name; female refers to gender_bio = 'F'; chose Republican as their political party refers to party = 'Republican'; current legislators refers to END > Date()"}
{"sample_id": 4831, "db_id": "legislator", "final": {"question": "Who is the Pro-Administration senator that runs from March 4, 1789 to December 31, 1791?", "sql": "SELECT T1.first_name, T1.last_name FROM historical AS T1 INNER JOIN \"historical-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Pro-Administration' AND T2.start = '1789-03-04' AND T2.end = '1791-12-31'", "source_tables": ["historical", "historical-terms"]}, "evidence": "Pro-Administration refers to party = 'Pro-Administration'; senator refers to type = 'sen'; runs from March 4, 1789 refers to start = '1789-03-04'; runs to refers to end = '1791-12-31';"}
{"sample_id": 4907, "db_id": "legislator", "final": {"question": "Give the alphanumeric ID of the Catholic legislators in Nebraska.", "sql": "SELECT T1.bioguide FROM \"current-terms\" AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.religion_bio = 'Catholic' AND T1.state = 'NE'", "source_tables": ["current-terms", "current"]}, "evidence": "alphanumeric ID refers to bioguide; Catholic legislators refers to religion_bio = 'Catholic'; Nebraska refers to state = 'NE';"}
{"sample_id": 4888, "db_id": "legislator", "final": {"question": "What is the religion with the most occurrrence of the current legislators?", "sql": "SELECT religion_bio FROM current GROUP BY religion_bio ORDER BY COUNT(religion_bio) DESC LIMIT 1", "source_tables": ["current"]}, "evidence": "religion with the most occurrrence of the current legislators refers to MAX(count(religion_bio));"}
{"sample_id": 4912, "db_id": "legislator", "final": {"question": "Among the female legislators, what is the percentage of the senators in Maine?", "sql": "SELECT CAST(SUM(CASE WHEN T2.type = 'sen' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.type) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state = 'ME' AND T1.gender_bio = 'F'", "source_tables": ["current-terms", "current"]}, "evidence": "female refers to gender_bio = 'F'; percentage = MULTIPLY(DIVIDE(SUM(type = 'sen'), COUNT(type)), 100.0); senators refers to type = 'sen'; Maine refers to state = 'ME';"}
{"sample_id": 4798, "db_id": "legislator", "final": {"question": "When was the last serving date of Matt Salmon?", "sql": "SELECT T1.END FROM \"historical-terms\" AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.official_full_name = 'Matt Salmon'", "source_tables": ["historical", "historical-terms"]}, "evidence": "Matt Salmon is an official_full_name"}
{"sample_id": 4772, "db_id": "legislator", "final": {"question": "How many times did Richard Durbin become a legislator in district 20?", "sql": "SELECT SUM(CASE WHEN T2.district = 20 THEN 1 ELSE 0 END) AS count FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Richard' AND T1.last_name = 'Durbin'", "source_tables": ["current-terms", "current"]}, "evidence": "Richard Durbin is an official_full_name;\u00a0 official_full_name refers to first_name, last_name; district 20 refers to district = 20"}
{"sample_id": 4736, "db_id": "legislator", "final": {"question": "How many current legislators do not have an account on ballotpedia.org ?", "sql": "SELECT COUNT(*) FROM current WHERE ballotpedia_id = '' OR ballotpedia_id IS NULL", "source_tables": ["current"]}, "evidence": "do not have an account on ballotpedia.org refers to ballotpedia_id IS NULL OR ballotpedia_id = ''"}
{"sample_id": 4897, "db_id": "legislator", "final": {"question": "What is the full official name of the current legislator that has served for the most number of terms?", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide GROUP BY T1.official_full_name, T2.bioguide ORDER BY COUNT(T2.bioguide) DESC LIMIT 1", "source_tables": ["current-terms", "current"]}, "evidence": "served for the most number of terms refers to MAX(COUNT(bioguide));"}
{"sample_id": 4763, "db_id": "legislator", "final": {"question": "What is the current official Youtube username of Chris Van Hollen?", "sql": "SELECT T2.youtube FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.official_full_name = 'Chris Van Hollen'", "source_tables": ["social-media", "current"]}, "evidence": "Youtube username refers to youtube; Chris Van Hollen is an official_full_name"}
{"sample_id": 4768, "db_id": "legislator", "final": {"question": "What is the current official Twitter handle of Roger F. Wicker?", "sql": "SELECT T2.twitter FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.official_full_name = 'Roger F. Wicker'", "source_tables": ["social-media", "current"]}, "evidence": "Twitter handle refers to twitter; Roger F. Wicker is an official_full_name"}
{"sample_id": 4902, "db_id": "legislator", "final": {"question": "What is the average number of terms served for a current legislator that's famous or impact?", "sql": "SELECT CAST(COUNT(T2.bioguide) AS REAL) / COUNT(DISTINCT T1.bioguide_id) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.wikipedia_id IS NOT NULL", "source_tables": ["current-terms", "current"]}, "evidence": "average = DIVIDE(COUNT(bioguide), COUNT(bioguide_id)); legislator that's famous or impact refers to wikipedia_id is not null;"}
{"sample_id": 4862, "db_id": "legislator", "final": {"question": "List all the Jewish current legislators that had served in Florida.", "sql": "SELECT T1.first_name, T1.last_name FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.religion_bio = 'Jewish' AND T2.state = 'FL' GROUP BY T1.first_name, T1.last_name", "source_tables": ["current-terms", "current"]}, "evidence": "Jewish refers to religion_bio = 'Jewish'; in Florida refers to state = 'FL';"}
{"sample_id": 4836, "db_id": "legislator", "final": {"question": "Give the religion of the legislator with RSS url of http://www.corker.senate.gov/public/index.cfm/rss/feed.", "sql": "SELECT T1.religion_bio FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.rss_url = 'http://www.corker.senate.gov/public/index.cfm/rss/feed' GROUP BY T1.religion_bio", "source_tables": ["current-terms", "current"]}, "evidence": "religion refers to religion_bio;"}
{"sample_id": 4890, "db_id": "legislator", "final": {"question": "Among the current legislators who have accounts on both http://thomas.gov, how many of them have accounts on instagram?", "sql": "SELECT COUNT(DISTINCT T1.bioguide_id) FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.thomas_id IS NOT NULL AND T2.instagram IS NOT NULL", "source_tables": ["social-media", "current"]}, "evidence": "have accounts on both http://thomas.gov refers to thomas_id is NOT null; have accounts on instagram refers to instagram is not null;"}
{"sample_id": 4819, "db_id": "legislator", "final": {"question": "Mention the username of Facebook of Ralph Abraham.", "sql": "SELECT T2.facebook FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.first_name = 'Ralph' AND T1.last_name = 'Abraham'", "source_tables": ["social-media", "current"]}, "evidence": "username of Facebook refers to facebook; Ralph Abraham is an official_full_name; official_full_name refers to first_name, last_name"}
{"sample_id": 4823, "db_id": "legislator", "final": {"question": "Give the religion of the legislator whose YouTube name is MaxineWaters.", "sql": "SELECT T2.religion_bio FROM \"social-media\" AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T1.youtube = 'MaxineWaters'", "source_tables": ["social-media", "current"]}, "evidence": "MaxineWaters relates to youtube"}
{"sample_id": 4805, "db_id": "legislator", "final": {"question": "What is the birthday of Amy Klobuchar?", "sql": "SELECT birthday_bio FROM current WHERE first_name = 'Amy' AND last_name = 'Klobuchar'", "source_tables": ["current"]}, "evidence": "birthday refers to birthday_bio; Amy Klobuchar refers to full name; full name refers to first_name, last_name"}
{"sample_id": 4854, "db_id": "legislator", "final": {"question": "List all the representatives in 1789 along with the districts and state.", "sql": "SELECT T2.district, T2.state FROM historical AS T1 INNER JOIN \"historical-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.start LIKE '1789%'", "source_tables": ["historical", "historical-terms"]}, "evidence": "representatives refers to type = 'rep'; in 1789 refers to start like '1789%';"}
{"sample_id": 4881, "db_id": "legislator", "final": {"question": "What is the party of the oldest legislator?", "sql": "SELECT T1.party FROM \"historical-terms\" AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide ORDER BY T2.birthday_bio LIMIT 1", "source_tables": ["historical", "historical-terms"]}, "evidence": "oldest legislator refers to MIN(birthday_bio);"}
{"sample_id": 4867, "db_id": "legislator", "final": {"question": "What are the full names of the non-google female entity legislators that have not been registered in Federal Election Commission data?", "sql": "SELECT first_name, last_name FROM historical WHERE gender_bio = 'F' AND google_entity_id_id IS NULL AND fec_id IS NULL", "source_tables": ["historical"]}, "evidence": "full names = first_name, last_name; non-google entity refers to google_entity_id_id is null; female refers to gender_bio = 'F'; have not been registered in Federal Election Commission data refers to fec_id is null;"}
{"sample_id": 4809, "db_id": "legislator", "final": {"question": "What is the middle name of the legislator whose birthday was on 8/24/1956?", "sql": "SELECT middle_name FROM current WHERE birthday_bio = '1956-08-24'", "source_tables": ["current"]}, "evidence": "birthday was on 8/24/1956 refers to birthday_bio = '1956-08-24'"}
{"sample_id": 4757, "db_id": "legislator", "final": {"question": "How many current legislators chose Republican as their political party?", "sql": "SELECT COUNT(*) FROM \"current-terms\" WHERE party = 'Republican'", "source_tables": ["current-terms"]}, "evidence": "chose Republican as their political party refers to party = 'Republican'"}
{"sample_id": 4835, "db_id": "legislator", "final": {"question": "Provide the google entity ID of the senators in New York.", "sql": "SELECT T1.google_entity_id_id FROM historical AS T1 INNER JOIN \"historical-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.type = 'sen' AND T2.state = 'NY'", "source_tables": ["historical", "historical-terms"]}, "evidence": "google entity ID refers to google_entity_id_id; senators refers to type = 'sen'; New York refers to state = 'NY';"}
{"sample_id": 4901, "db_id": "legislator", "final": {"question": "Among all the current legislators who have served for more than 4 terms, what is the percentage of them being female?", "sql": "SELECT CAST(SUM(CASE WHEN gender_bio = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.bioguide) FROM ( SELECT T2.bioguide, T1.gender_bio FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide GROUP BY T2.bioguide HAVING COUNT(T2.bioguide) > 4 ) T3", "source_tables": ["current-terms", "current"]}, "evidence": "have served for more than 4 years refers to count(bioguide) > 4; percentage = MULTIPLY(DIVIDE(SUM(gender_bio = 'F'), count(bioguide)), 100.0); female refers to gender_bio = 'F'"}
{"sample_id": 4845, "db_id": "legislator", "final": {"question": "What is the name of the legislator with the ID of W000059?", "sql": "SELECT first_name, last_name FROM historical WHERE bioguide_id = 'W000059'", "source_tables": ["historical"]}, "evidence": "name of the legislator = first_name, last_name; ID of W000059 refers to bioguide_id = 'W000059';"}
{"sample_id": 4857, "db_id": "legislator", "final": {"question": "List all the junior senators in 1997.", "sql": "SELECT T1.first_name, T1.last_name FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.start LIKE '1997%' AND T2.state_rank = 'junior'", "source_tables": ["current-terms", "current"]}, "evidence": "junior senators refers to state_rank = 'junior'; in 1997 refers to start like '1997%';"}
{"sample_id": 4864, "db_id": "legislator", "final": {"question": "Based on the number of current legislators, calculate the percentage of legislators that served in 21st-Century.", "sql": "SELECT CAST(SUM(CASE WHEN strftime('%Y', T2.start) BETWEEN '2000' AND '2017' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bioguide_id) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide", "source_tables": ["current-terms", "current"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(strftime('%Y', start) between '2000' and '2017'), COUNT(bioguide_id)), 100.0); 1st-Century refers to strftime('%Y', T2.start) between '2000' and '2017';"}
{"sample_id": 4796, "db_id": "legislator", "final": {"question": "List the full names, religions, and parties of legislators who have served in Maine.", "sql": "SELECT T1.official_full_name, T2.relation, T2.party FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state = 'ME' GROUP BY T1.official_full_name, T2.relation, T2.party", "source_tables": ["current-terms", "current"]}, "evidence": "full names refers to official_full_name; religion refers to religion_bio; Maine refers to state = \"ME\""}
{"sample_id": 4773, "db_id": "legislator", "final": {"question": "Calculate the average number of current male legislators who chose Democrat from 2000 until 2021.", "sql": "SELECT CAST(COUNT(T1.bioguide_id) AS REAL) / 22 FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'M' AND CAST(T2.start AS DATE) >= 2000 AND CAST(T2.END AS DATE) <= 2021 AND T2.party = 'Democrat'", "source_tables": ["current-terms", "current"]}, "evidence": "male refers to gender_bio = 'M'; legislators who chose Democrat refers to party = 'Democrat'; from 2000 until 2021 refers to start > = 2000 AND END < = 2021; calculation = DIVIDE(COUNT(bioguide_id), 22)"}
{"sample_id": 5048, "db_id": "olympics", "final": {"question": "Which region is the majority of the athletes from?", "sql": "SELECT T2.region_name FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id GROUP BY T2.region_name ORDER BY COUNT(T1.person_id) DESC LIMIT 1", "source_tables": ["person_region", "noc_region"]}, "evidence": "region refers to region_name; the majority of the athletes from refer to MAX(COUNT(region_name));"}
{"sample_id": 5014, "db_id": "olympics", "final": {"question": "Give the height of the tallest athlete from Portugal.", "sql": "SELECT T3.height FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Portugal' ORDER BY T3.height DESC LIMIT 1", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": "the tallest athlete refers to id where MAX(height); from Portugal refers to region_name = 'Portugal';"}
{"sample_id": 5025, "db_id": "olympics", "final": {"question": "What is the percentage of champions at the age of over 30?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.age > 30 THEN 1 END) AS REAL) * 100 / COUNT(T2.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id WHERE T1.medal_id = 1", "source_tables": ["competitor_event", "games_competitor"]}, "evidence": "DIVIDE(COUNT(competitor_id where age > 30), COUNT(competitor_id))as percentage where medal_id = 1;"}
{"sample_id": 5038, "db_id": "olympics", "final": {"question": "What are the id of the games held in London?", "sql": "SELECT T1.games_id FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'London'", "source_tables": ["games_city", "city"]}, "evidence": "London refers to city_name = 'London';"}
{"sample_id": 4946, "db_id": "olympics", "final": {"question": "How many athletes are from Australia?", "sql": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Australia'", "source_tables": ["person_region", "noc_region"]}, "evidence": "from Australia refer region_name = 'Australia';"}
{"sample_id": 4970, "db_id": "olympics", "final": {"question": "Calculate the average age of the persons who participated in the 1992 Summer Games.", "sql": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1992 Summer'", "source_tables": ["games", "person", "games_competitor"]}, "evidence": "DIVIDE(SUM(age), COUNT(person_id)) where games_name = '1992 Summer';"}
{"sample_id": 5059, "db_id": "olympics", "final": {"question": "What is the average age of Argentina's athletes who participated in the Summer Olympics in 2012?", "sql": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person_region AS T3 ON T2.person_id = T3.person_id INNER JOIN noc_region AS T4 ON T3.region_id = T4.id WHERE T1.games_name = '2012 Summer' AND T4.region_name = 'Argentina'", "source_tables": ["games", "person_region", "noc_region", "games_competitor"]}, "evidence": "AVG(age) where games_name = '2012 Summer' and region_name = 'Argentina';"}
{"sample_id": 4983, "db_id": "olympics", "final": {"question": "How many athletes from Malaysia have won a medal?", "sql": "SELECT COUNT(T3.person_id) FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN person_region AS T4 ON T3.person_id = T4.person_id INNER JOIN noc_region AS T5 ON T4.region_id = T5.id WHERE T5.region_name = 'Malaysia' AND T1.id != 4", "source_tables": ["medal", "competitor_event", "games_competitor", "person_region", "noc_region"]}, "evidence": "Malaysia refers to region_name = 'Malaysia'; athletes won a medal refer to competitor_id where medal_id <> 4;"}
{"sample_id": 4962, "db_id": "olympics", "final": {"question": "What is the name of the oldest person who participated in the Olympic Games?", "sql": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age DESC LIMIT 1", "source_tables": ["games_competitor", "person"]}, "evidence": "the oldest person refers to person_id where MAX(age); name refers to full_name;"}
{"sample_id": 5010, "db_id": "olympics", "final": {"question": "How many games has Prithipal Singh participated in?", "sql": "SELECT COUNT(T2.games_id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Prithipal Singh'", "source_tables": ["games_competitor", "person"]}, "evidence": "games refer to games_id;"}
{"sample_id": 4923, "db_id": "olympics", "final": {"question": "In which year did London hold its earliest Olympic game?", "sql": "SELECT T3.games_year FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London' ORDER BY T3.games_year LIMIT 1", "source_tables": ["games_city", "city", "games"]}, "evidence": "In which year refers to games_year; London refers to city_name = 'London'; earliest Olympic game refers to MIN(games_year);"}
{"sample_id": 5039, "db_id": "olympics", "final": {"question": "How many people who are below 30 and participated in the summer season?", "sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.season = 'Summer' AND T2.age < 30", "source_tables": ["games", "games_competitor"]}, "evidence": "people who are below 30 refer to person_id where age < 30; the summer season refers to season = 'Summer';"}
{"sample_id": 4931, "db_id": "olympics", "final": {"question": "For Peter Kohnke, show the name of his/her region.", "sql": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Peter Kohnke'", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": "name of his/her region refers to region_name;"}
{"sample_id": 5056, "db_id": "olympics", "final": {"question": "How many competitors over the age of 30 participated in the 1992 Winter Olympics?", "sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1992 Winter' AND T2.age > 30", "source_tables": ["games", "games_competitor"]}, "evidence": "competitors over the age of 30 refer to person_id where age > 30; the 1992 Winter Olympics refers to games_name = '1992 Winter';"}
{"sample_id": 5081, "db_id": "olympics", "final": {"question": "Among the males, list the region name of people with height greater than 87% of the average height of all people listed.", "sql": "SELECT DISTINCT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.gender = 'M' AND T3.height * 100 > ( SELECT AVG(height) FROM person WHERE gender = 'M' ) * 87", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": "males refer to gender = 'M'; height greater than 87% of the average height refers to height > MULTIPLY(AVG(height), 0.87);"}
{"sample_id": 4954, "db_id": "olympics", "final": {"question": "In the Winter and Summer Olympics of 1988, which game has the most number of competitors? Find the difference of the number of competitors between the two games.", "sql": "SELECT P1 , ( SELECT MAX(P2) - MIN(P2) FROM ( SELECT COUNT(T2.person_id) AS P2 FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name IN ('1988 Winter', '1988 Summer') GROUP BY T1.season ) ORDER BY P2 DESC LIMIT 1 ) FROM ( SELECT T1.season AS P1, COUNT(T2.person_id) AS P2 FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name IN ('1988 Winter', '1988 Summer') GROUP BY T1.season ) ORDER BY P2 DESC LIMIT 1", "source_tables": ["games", "games_competitor"]}, "evidence": "the most number of competitors refer to MAX(COUNT(person_id)); SUBTRACT(COUNT(person_id where games_name = '1988 Summer'), COUNT(person_id where games_name = '1988 Winter'));"}
{"sample_id": 4976, "db_id": "olympics", "final": {"question": "How many gold medals were given to the winners in the Ice Hockey Men's Ice Hockey event?", "sql": "SELECT COUNT(T2.competitor_id) FROM event AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.event_id WHERE T1.event_name LIKE 'Ice Hockey Men%s Ice Hockey' AND T2.medal_id = 1", "source_tables": ["event", "competitor_event"]}, "evidence": "gold medals given to the winners refer to competitor_id where medal_name = 'Gold'; Ice Hockey Men's Ice Hockey refers to event_name = 'Ice Hockey Men''s Ice Hockey';"}
{"sample_id": 4929, "db_id": "olympics", "final": {"question": "How many Olympic Games has London hosted?", "sql": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London'", "source_tables": ["games_city", "city", "games"]}, "evidence": "London refers to city_name = 'London';"}
{"sample_id": 4961, "db_id": "olympics", "final": {"question": "What is the name of all the sports Chin Eei Hui has competed in?", "sql": "SELECT DISTINCT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id INNER JOIN competitor_event AS T3 ON T2.id = T3.event_id INNER JOIN games_competitor AS T4 ON T3.competitor_id = T4.id INNER JOIN person AS T5 ON T4.person_id = T5.id WHERE T5.full_name = 'Chin Eei Hui'", "source_tables": ["competitor_event", "sport", "games_competitor", "event", "person"]}, "evidence": "name of the sport refers to sport_name;"}
{"sample_id": 5074, "db_id": "olympics", "final": {"question": "What is the season of the game where a competitor who weighted 73 kg and 180 cm tall, participated?", "sql": "SELECT DISTINCT T1.season FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.height = 180 AND T3.weight = 73", "source_tables": ["games", "person", "games_competitor"]}, "evidence": "competitor who weighted 73 kg and 180 cm tall refers to person_id where height = 180 and weight = 73;"}
{"sample_id": 5045, "db_id": "olympics", "final": {"question": "List out the id of event that achieve the gold medal.", "sql": "SELECT T2.event_id FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id WHERE T1.medal_name = 'Gold'", "source_tables": ["medal", "competitor_event"]}, "evidence": "the gold medal refers to medal_name = 'Gold';"}
{"sample_id": 4965, "db_id": "olympics", "final": {"question": "How many persons participated in the Sapporo Olympics?", "sql": "SELECT COUNT(T1.person_id) FROM games_competitor AS T1 INNER JOIN games_city AS T2 ON T1.games_id = T2.games_id INNER JOIN city AS T3 ON T2.city_id = T3.id WHERE T3.city_name = 'Sapporo'", "source_tables": ["games_city", "city", "games_competitor"]}, "evidence": "the Sapporo Olympics refer to games_id where city_name = 'Sapporo';"}
{"sample_id": 5015, "db_id": "olympics", "final": {"question": "Tell the host city of the 1968 Winter Olympic Games.", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1968 Winter'", "source_tables": ["games_city", "city", "games"]}, "evidence": "host city refers to city_name; the 1968 Winter Olympic Games refer to games_name = '1968 Winter';"}
{"sample_id": 5036, "db_id": "olympics", "final": {"question": "Mention the height of people who belong to region id 7.", "sql": "SELECT T2.height FROM person_region AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.id WHERE T1.region_id = 7", "source_tables": ["person_region", "person"]}, "evidence": ""}
{"sample_id": 5071, "db_id": "olympics", "final": {"question": "In what year and season did Sohail Abbas compete?", "sql": "SELECT T1.games_year, T1.season FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Sohail Abbas'", "source_tables": ["games", "person", "games_competitor"]}, "evidence": "year refers to games_year;"}
{"sample_id": 5022, "db_id": "olympics", "final": {"question": "Please list all game names that were held in Los Angeles.", "sql": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Los Angeles'", "source_tables": ["games_city", "city", "games"]}, "evidence": "Los Angeles refers to city_name = 'Los Angeles';"}
{"sample_id": 5067, "db_id": "olympics", "final": {"question": "In which city was the game held where the oldest competitor participated?", "sql": "SELECT T4.city_name FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.games_id = T2.id INNER JOIN games_city AS T3 ON T1.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id ORDER BY T1.age DESC LIMIT 1", "source_tables": ["games", "city", "games_city", "games_competitor"]}, "evidence": "in which city refers to city_name; the oldest refers to MAX(age);"}
{"sample_id": 5029, "db_id": "olympics", "final": {"question": "Please list all competitors' names who participated in 1936 Summer.", "sql": "SELECT T3.full_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1936 Summer'", "source_tables": ["games", "person", "games_competitor"]}, "evidence": "competitors' names refer to full_name; in 1936 Summer refers to games_name = '1936 Summer';"}
{"sample_id": 5007, "db_id": "olympics", "final": {"question": "What is Vijay Singh Chauhan's region name?", "sql": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Vijay Singh Chauhan'", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": ""}
{"sample_id": 5057, "db_id": "olympics", "final": {"question": "What is the name of the Olympic game with the most competitors held in Barcelona?", "sql": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T4.city_name = 'Barcelona' GROUP BY T1.id ORDER BY COUNT(T2.person_id) DESC LIMIT 1", "source_tables": ["games", "city", "games_city", "games_competitor"]}, "evidence": "Barcelona refers to city_name = 'Barcelona'; the most competitors refer to MAX(COUNT(games_name)); name of game refers to games_name;"}
{"sample_id": 4969, "db_id": "olympics", "final": {"question": "Calculate the percentage of women who have participated in Equestrianism Mixed Three-Day Event, Individual.", "sql": "SELECT CAST(COUNT(CASE WHEN T1.gender = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN event AS T4 ON T3.event_id = T4.id WHERE T4.event_name = 'Equestrianism Mixed Three-Day Event, Individual'", "source_tables": ["event", "competitor_event", "games_competitor", "person"]}, "evidence": "DIVIDE(COUNT(person_id where gender = 'F), COUNT(person_id)) as percentage where event_name = 'Equestrianism Mixed Three-Day Event, Individual';"}
{"sample_id": 5077, "db_id": "olympics", "final": {"question": "How many female competitors were from Iran?", "sql": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Iran' AND T3.gender = 'F'", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": "female competitors refer to person_id where gender = 'F'; from Iran refers to region_name = 'Iran';"}
{"sample_id": 5064, "db_id": "olympics", "final": {"question": "What is the NOC code of the region of the competitors weighted 77 kg?", "sql": "SELECT T1.noc FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.weight = 77", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": "NOC code refers to noc; competitors weighted 77 kg refer to person_id where weight = 77;"}
{"sample_id": 5229, "db_id": "address", "final": {"question": "How many postal points with unique post office types are there in Ohio?", "sql": "SELECT COUNT(T2.zip_code) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Ohio' AND T2.type = 'Unique Post Office'", "source_tables": ["state", "zip_data"]}, "evidence": "postal points refer to zip_code; unique post office types refer to type = 'Unique Post Office'; Ohio is the name of the state, in which name = 'Ohio';"}
{"sample_id": 5199, "db_id": "address", "final": {"question": "Provide the population of Arecibo in 2020.", "sql": "SELECT SUM(T2.population_2020) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'ARECIBO'", "source_tables": ["zip_data", "country"]}, "evidence": "population of Arecibo in 2020 refers to SUM(population_2020) where county = 'ARECIBO';"}
{"sample_id": 5176, "db_id": "address", "final": {"question": "Among the postal points in California, calculate the percentage of them in post office types.", "sql": "SELECT CAST(COUNT(CASE WHEN T2.type = 'Post Office' THEN T2.zip_code ELSE NULL END) AS REAL) * 100 / COUNT(T2.zip_code) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'California'", "source_tables": ["state", "zip_data"]}, "evidence": "DIVIDE(COUNT(zip_code where type = 'Post Office'), COUNT(zip_code)) as percentage where name = 'California';"}
{"sample_id": 5171, "db_id": "address", "final": {"question": "Provide the zip codes and the alias of Greeneville.", "sql": "SELECT T2.zip_code, T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Greeneville'", "source_tables": ["zip_data", "alias"]}, "evidence": "Greeneville is the city;"}
{"sample_id": 5214, "db_id": "address", "final": {"question": "Give the alias of the cities with an Asian population of 7.", "sql": "SELECT T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.asian_population = 7", "source_tables": ["zip_data", "alias"]}, "evidence": "Asian population of 7 refers to asian_population = 7;"}
{"sample_id": 5089, "db_id": "address", "final": {"question": "Please list the zip_codes of all the residential areas in Huntingdon county with over 30 employees.", "sql": "SELECT DISTINCT T1.zip_code FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'HUNTINGDON' AND T1.employees > 30", "source_tables": ["zip_data", "country"]}, "evidence": "over 30 employees refers to employee > 30; 'HUNTINGDON' is the county"}
{"sample_id": 5182, "db_id": "address", "final": {"question": "What are the bad aliases of the postal points from East Setauket?", "sql": "SELECT T1.bad_alias FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'East Setauket'", "source_tables": ["avoid", "zip_data"]}, "evidence": "East Setauket is the city;"}
{"sample_id": 5127, "db_id": "address", "final": {"question": "What is the zip code of the district represented by Steven A King?", "sql": "SELECT T2.zip_code FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.first_name = 'King' AND T1.last_name = 'Steven A'", "source_tables": ["congress", "zip_congress"]}, "evidence": ""}
{"sample_id": 5104, "db_id": "address", "final": {"question": "What is the difference in the most populated city of Allentown-Bethlehem-Easton, PA-NJ in 2020 against its population in 2010?", "sql": "SELECT T1.population_2020 - T1.population_2010 AS result_data FROM zip_data AS T1 INNER JOIN CBSA AS T2 ON T1.CBSA = T2.CBSA WHERE T2.CBSA_name = 'Allentown-Bethlehem-Easton, PA-NJ' ORDER BY T1.population_2020 DESC LIMIT 1", "source_tables": ["cbsa", "zip_data"]}, "evidence": "\"Allentown-Bethlehem-Easton, PA-NJ\" is the CBSA_name; most populated city refers to Max(population_2020); difference = Subtract (population_2020, population_2011)"}
{"sample_id": 5172, "db_id": "address", "final": {"question": "Compare the numbers of postal points under Smith Adrian and Heck Joe.", "sql": "SELECT CASE WHEN COUNT(CASE WHEN T1.first_name = 'Smith' AND T1.last_name = 'Adrian' THEN T2.zip_code ELSE NULL END) > COUNT(CASE WHEN T1.first_name = 'Heck' AND T1.last_name = 'Joe' THEN T2.zip_code ELSE NULL END) THEN 'Smith Adrian>Heck Joe' ELSE 'Smith Adrian<=Heck Joe' END AS COMPARE FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district", "source_tables": ["congress", "zip_congress"]}, "evidence": "COUNT(zip_code where first_name = 'Smith' and last_name = 'Adrian') > COUNT(zip_code where first_name = 'Heck' and last_name = 'Joe');"}
{"sample_id": 5221, "db_id": "address", "final": {"question": "Who are the congress representatives of the postal points in Garfield?", "sql": "SELECT T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T1.city = 'Garfield'", "source_tables": ["congress", "zip_data", "zip_congress"]}, "evidence": "Who are the congress representatives refer to first_name, last_name; Garfield is the city;"}
{"sample_id": 5139, "db_id": "address", "final": {"question": "Which CBSAs have more than 10 zip codes?", "sql": "SELECT T1.CBSA_name FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA GROUP BY T1.CBSA HAVING COUNT(T2.zip_code) > 10", "source_tables": ["cbsa", "zip_data"]}, "evidence": "has more than 10 zip codes refers to CBSA where count(CBSA) > 10"}
{"sample_id": 5105, "db_id": "address", "final": {"question": "List all the zip codes in the county of New Castle in Delaware.", "sql": "SELECT DISTINCT T2.zip_code FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T2.county = 'NEW CASTLE' AND T1.name = 'Delaware'", "source_tables": ["state", "country"]}, "evidence": "\"NEW CASTLE\" is the county; 'Delaware' is the name of state"}
{"sample_id": 5098, "db_id": "address", "final": {"question": "How many counties are there in Alabama?", "sql": "SELECT COUNT(T2.county) FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Alabama'", "source_tables": ["state", "country"]}, "evidence": "\"Alabama\" is the name"}
{"sample_id": 5193, "db_id": "address", "final": {"question": "How many cities does congressman Pierluisi Pedro represent?", "sql": "SELECT COUNT(DISTINCT T1.city) FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T3.first_name = 'Pierluisi' AND T3.last_name = 'Pedro'", "source_tables": ["congress", "zip_data", "zip_congress"]}, "evidence": ""}
{"sample_id": 5096, "db_id": "address", "final": {"question": "What is the area code of the city with the female median age over 32 years old?", "sql": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN ZIP_Data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.female_median_age > 32 GROUP BY T1.area_code", "source_tables": ["area_code", "zip_data"]}, "evidence": ""}
{"sample_id": 5082, "db_id": "address", "final": {"question": "What is the total number of households in Arecibo county?", "sql": "SELECT SUM(T1.households) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO'", "source_tables": ["zip_data", "country"]}, "evidence": "\"ARECIBO\" is the county; total number of households refer to sum(households)"}
{"sample_id": 5178, "db_id": "address", "final": {"question": "Which city has the most bad aliases?", "sql": "SELECT T2.city FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code GROUP BY T1.bad_alias ORDER BY COUNT(T1.zip_code) DESC LIMIT 1", "source_tables": ["avoid", "zip_data"]}, "evidence": "the most bad aliases refer to MAX(COUNT(bad_alias));"}
{"sample_id": 5117, "db_id": "address", "final": {"question": "Which state is area code 878 in? Give the name of the state.", "sql": "SELECT T2.state FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 878", "source_tables": ["area_code", "zip_data"]}, "evidence": ""}
{"sample_id": 5231, "db_id": "address", "final": {"question": "Calculate the percentage of congress representatives from the Democrat party. Among them, how many postal points are in the Hawaii state?", "sql": "SELECT CAST(SUM(CASE WHEN T1.party = 'Democrat' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*), SUM(CASE WHEN T1.state = 'Hawaii' THEN 1 ELSE 0 END) FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district", "source_tables": ["congress", "zip_congress"]}, "evidence": "DIVIDE(COUNT(party = 'Democrat'), COUNT(congress_rep_id)) as percentage; postal points refer to zip_code; state = 'Hawaii';"}
{"sample_id": 5162, "db_id": "address", "final": {"question": "What is the difference in the number of cities with P.O. box only and cities with Post Office among the cities with area code 787?", "sql": "SELECT COUNT(CASE WHEN T2.type = 'P.O. Box Only' THEN 1 ELSE NULL END) - COUNT(CASE WHEN T2.type = 'Post Office' THEN 1 ELSE NULL END) AS DIFFERENCE FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 787", "source_tables": ["area_code", "zip_data"]}, "evidence": "SUBTRACT(COUNT(type = 'P.O. Box Only'), COUNT(type = 'Post Office')) where area_code = 787;"}
{"sample_id": 5226, "db_id": "address", "final": {"question": "How many postal points are there under the congress representative from the House of Representatives in Mississippi?", "sql": "SELECT COUNT(T2.zip_code) FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.state = 'Mississippi'", "source_tables": ["congress", "zip_congress"]}, "evidence": "postal points refer to zip_code; Mississippi is the name of the state, in which name = 'Mississippi';"}
{"sample_id": 5101, "db_id": "address", "final": {"question": "In California, how many delivery receptacles are there in the community post office that has the highest number of delivery receptacles?", "sql": "SELECT COUNT(*) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.abbreviation = 'CA' AND T2.type LIKE '%Community Post Office%' AND T1.name = 'California' AND T2.state = 'CA'", "source_tables": ["state", "zip_data"]}, "evidence": "in California refers to name = 'California' and state = 'CA'; 'Community Post Office' is the Type"}
{"sample_id": 5130, "db_id": "address", "final": {"question": "Name the county that has the bad alias of Druid Hills.", "sql": "SELECT T2.county FROM avoid AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T1.bad_alias = 'Druid Hills'", "source_tables": ["avoid", "country"]}, "evidence": "\"Druid Hills\" is the bad_alias"}
{"sample_id": 5195, "db_id": "address", "final": {"question": "Indicate the name of the congressman represent in Guanica.", "sql": "SELECT T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T1.city = 'Guanica'", "source_tables": ["congress", "zip_data", "zip_congress"]}, "evidence": "name of congressman implies full name which refers to first_name, last_name; Guanica is the city;"}
{"sample_id": 5123, "db_id": "address", "final": {"question": "What is the area code of Bishopville, SC?", "sql": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Bishopville' AND T2.state = 'SC'", "source_tables": ["area_code", "zip_data"]}, "evidence": "\"Bishopville\" is the city; 'SC' is the state"}
{"sample_id": 5126, "db_id": "address", "final": {"question": "Name both the alias and the bad alias of zip code 38015.", "sql": "SELECT T1.alias, T2.bad_alias FROM alias AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code WHERE T1.zip_code = 38015", "source_tables": ["avoid", "alias"]}, "evidence": ""}
{"sample_id": 5094, "db_id": "address", "final": {"question": "What is the highest gender ratio of the residential areas in Arecibo county?", "sql": "SELECT CAST(T1.male_population AS REAL) / T1.female_population FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO' AND T1.female_population <> 0 ORDER BY 1 DESC LIMIT 1", "source_tables": ["zip_data", "country"]}, "evidence": "\"ARECIBO\" is the county; highest gender ration refers to Max(Divide (male_population, female_population))"}
{"sample_id": 5085, "db_id": "address", "final": {"question": "Among all the residential areas in Delaware, how many of them implement daylight saving?", "sql": "SELECT COUNT(T1.zip_code) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'DELAWARE' AND T1.daylight_savings = 'Yes'", "source_tables": ["zip_data", "country"]}, "evidence": "\"Delaware\" is a county; implement daylight savings refers to daylight_saving = 'Yes'"}
{"sample_id": 5103, "db_id": "address", "final": {"question": "What are the names of the states whose postal point is not affiliated with any organization?", "sql": "SELECT DISTINCT T2.name FROM zip_data AS T1 INNER JOIN state AS T2 ON T1.state = T2.abbreviation WHERE T1.division IS NULL", "source_tables": ["state", "zip_data"]}, "evidence": "postal point is not affiliated with any organization refers to division is null"}
{"sample_id": 5347, "db_id": "beer_factory", "final": {"question": "What is the best seller root beer brand and what is the average star rating for this root beer?", "sql": "SELECT T1.BrandID, AVG(T1.StarRating) FROM rootbeerreview AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID GROUP BY T3.BrandID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1", "source_tables": ["rootbeerbrand", "rootbeerreview", "transaction"]}, "evidence": "best seller root beer refers to MAX(COUNT(BrandID)); average star rating = AVG(StarRating);"}
{"sample_id": 5236, "db_id": "beer_factory", "final": {"question": "What is the description of the root beer brand A&W?", "sql": "SELECT Description FROM rootbeerbrand WHERE BrandName = 'A&W'", "source_tables": ["rootbeerbrand"]}, "evidence": "A&W refers to BrandName = 'A&W';"}
{"sample_id": 5324, "db_id": "beer_factory", "final": {"question": "Give me the brewery and brand names of canned root beer that were purchased before 6/6/2015.", "sql": "SELECT DISTINCT T2.BreweryName, T2.BrandName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T1.PurchaseDate < '2015-06-06' AND T1.ContainerType = 'Can'", "source_tables": ["rootbeerbrand", "rootbeer"]}, "evidence": "canned root beer refers to ContainerType = 'Can'; purchased before 6/6/2015 refers to PurchaseDate < '2015-06-06';"}
{"sample_id": 5320, "db_id": "beer_factory", "final": {"question": "How many brands of bottle root beer were purchased between 4/3/2015 and 10/26/2015?", "sql": "SELECT COUNT(BrandID) FROM rootbeer WHERE ContainerType = 'Bottle' AND PurchaseDate BETWEEN '2015-04-03' AND '2015-10-26'", "source_tables": ["rootbeer"]}, "evidence": "bottle root beer refers to ContainerType = 'Bottle'; purchased between 4/3/2015 and 10/26/2015 refers to PurchaseDate BETWEEN '2015-04-23' AND '2015-10-26';"}
{"sample_id": 5241, "db_id": "beer_factory", "final": {"question": "What is the full name of the customer that had made the most transactions in August, 2014?", "sql": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y-%m', T2.TransactionDate) = '2014-08' GROUP BY T1.CustomerID ORDER BY COUNT(T2.CustomerID) DESC LIMIT 1", "source_tables": ["customers", "transaction"]}, "evidence": "full name = First, Last; made the most transactions refers to MAX(COUNT(TransactionID)); in August, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08';"}
{"sample_id": 5295, "db_id": "beer_factory", "final": {"question": "What is the average cost of root beers purchased for more than 2 dollars and sold in bottles?", "sql": "SELECT AVG(T2.PurchasePrice) FROM rootbeer AS T1 INNER JOIN \"transaction\" AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T1.ContainerType = 'Bottle' AND T2.PurchasePrice > 2", "source_tables": ["rootbeerbrand", "rootbeer", "transaction"]}, "evidence": "average cost = DIVIDE(SUM(PurchasePrice > 2), COUNT(RootBeerID) WHERE PurchasePrice > 2); more than 2 dollars refers to PurchasePrice > 2; in bottles refers to ContainerType = 'Bottle';"}
{"sample_id": 5251, "db_id": "beer_factory", "final": {"question": "Among all the root beers sold in 2014, what is the percentage of the root beers produced by the brewery AJ Stephans Beverages?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.BreweryName = 'AJ Stephans Beverages' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN \"transaction\" AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014%'", "source_tables": ["rootbeerbrand", "rootbeer", "transaction"]}, "evidence": "sold in 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014'; percentage = DIVIDE(MULTIPLY(SUM(BreweryName = 'AJ Stephans Beverages'), 1.0), COUNT(RootBeerID)) WHERE SUBSTR(TransactionDate, 1, 4) = '2014'; AJ Stephans Beverages refers to BreweryName = 'AJ Stephans Beverages';"}
{"sample_id": 5257, "db_id": "beer_factory", "final": {"question": "What is the phone number of the customer who owns the credit card of number 6011179359005380?", "sql": "SELECT DISTINCT T1.PhoneNumber FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CreditCardNumber = 6011179359005382", "source_tables": ["customers", "transaction"]}, "evidence": "FALSE;"}
{"sample_id": 5304, "db_id": "beer_factory", "final": {"question": "Find and list the full name and email of the customers who used American Express cards in Sac State Union.", "sql": "SELECT DISTINCT T1.First, T1.Last, T1.Email FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN location AS T3 ON T2.LocationID = T3.LocationID WHERE T3.LocationName = 'Sac State Union' AND T2.CreditCardType = 'American Express'", "source_tables": ["location", "customers", "transaction"]}, "evidence": "full name = First, Last; American Express cards refers to CreditCardType = 'American Express'; Sac State Union refers to LocationName = 'Sac State Union';"}
{"sample_id": 5255, "db_id": "beer_factory", "final": {"question": "Provide the name of the location where transaction no.100885 happened.", "sql": "SELECT T2.LocationName FROM \"transaction\" AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.TransactionID = 100885", "source_tables": ["location", "transaction"]}, "evidence": "name of the location refers to LocationName; transaction no. refers to TransactionID; TransactionID = 100885;"}
{"sample_id": 5298, "db_id": "beer_factory", "final": {"question": "Which root beer got the most five stars in 2012? Give the brand name of this beer.", "sql": "SELECT T3.BrandName FROM rootbeer AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.StarRating = 5 AND strftime('%Y', T2.ReviewDate) = '2012' GROUP BY T1.BrandID ORDER BY COUNT(T2.BrandID) DESC LIMIT 1", "source_tables": ["rootbeerbrand", "rootbeer", "rootbeerreview"]}, "evidence": "most five stars refers to MAX(COUNT(StarRating = 5)); in 2012 refers to FirstBrewedYear = 2012;"}
{"sample_id": 5265, "db_id": "beer_factory", "final": {"question": "What is the average number of reviews of all the root beer brands from \"CA\" State?", "sql": "SELECT CAST(COUNT(*) AS REAL) / COUNT(DISTINCT T1.BrandID) AS avgreview FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T1.State = 'CA'", "source_tables": ["rootbeerbrand", "rootbeerreview"]}, "evidence": "average = DIVIDE(COUNT(CustomerID), COUNT(BrandID) WHERE state = CA); \n"}
{"sample_id": 5256, "db_id": "beer_factory", "final": {"question": "Which city does the customer who finished transaction no.103545 live in?", "sql": "SELECT T1.City FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.TransactionID = 103545", "source_tables": ["customers", "transaction"]}, "evidence": "transaction no. refers to TransactionID; TransactionID = 103545;"}
{"sample_id": 5245, "db_id": "beer_factory", "final": {"question": "Please list the full names of the customers who have purchased at least one root beer produced by AJ Stephans Beverages.", "sql": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T4.BreweryName = 'AJ Stephans Beverages'", "source_tables": ["rootbeerbrand", "rootbeer", "customers", "transaction"]}, "evidence": "full name = First, Last; customers who have purchased at least one root beer refers to CustomerID > = 1; produced by AJ Stephans Beverages refers to BreweryName = 'AJ Stephans Beverages';"}
{"sample_id": 5334, "db_id": "beer_factory", "final": {"question": "Give me the full name of the first customer, and tell me how long ago he or she wrote his or her first review since making his or her first purchase.", "sql": "SELECT T1.First, T1.Last , strftime('%J', ReviewDate) - strftime('%J', FirstPurchaseDate) AS TIMEAGO FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID LIMIT 1", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "full name = First, Last; how long ago = SUBTRACT(ReviewDate, FirstPurchaseDate);"}
{"sample_id": 5262, "db_id": "beer_factory", "final": {"question": "For the customer who gave a 3 star rating to Frostie brand on 2014/4/24, did the user permit the company to send regular emails to him/her?", "sql": "SELECT CASE WHEN T1.SubscribedToEmailList LIKE 'TRUE' THEN 'YES' ELSE 'NO' END AS result FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T2.BrandID = T3.BrandID WHERE T2.StarRating = 3 AND T3.BrandName = 'Frostie' AND T2.ReviewDate = '2014-04-24'", "source_tables": ["rootbeerbrand", "rootbeerreview", "customers"]}, "evidence": "3 star rating refers to StarRating = 3; Frostie refers to\u00a0 BrandName = 'Frostie'; if SubscribedToEmailList = 'TRUE', it means the user permit the company to send regular emails to him/her; if SubscribedToEmailList = FALSE', it means the user did not permit the company to send regular emails to him/her; rating on 2014/4/24 refers to ReviewDate = '2014-04-24';"}
{"sample_id": 5355, "db_id": "beer_factory", "final": {"question": "How many purchases were made at Sac State American River Courtyard using Master Card?", "sql": "SELECT COUNT(T1.TransactionID) FROM \"transaction\" AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.LocationName = 'Sac State American River Courtyard' AND T1.CreditCardType = 'MasterCard'", "source_tables": ["location", "transaction"]}, "evidence": "Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard'; Master Card refers to CreditCardType = 'MasterCard';"}
{"sample_id": 5345, "db_id": "beer_factory", "final": {"question": "List out root beer brand that is not caffeinated and not containing cane sugar. What is the total amount sold for this products?", "sql": "SELECT T1.BrandName, SUM(T3.PurchasePrice) FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID INNER JOIN \"transaction\" AS T3 ON T2.RootBeerID = T3.RootBeerID WHERE T1.CaneSugar = 'FALSE' AND T1.Caffeinated = 'FALSE' GROUP BY T1.BrandName", "source_tables": ["rootbeerbrand", "rootbeer", "transaction"]}, "evidence": "root beer brand refers to BrandName; not caffeinated refers to Caffeinated = 'FALSE'; not containing cane sugar refers to CaneSugar = 'FALSE'; total amount sold = SUM(PurchasePrice);"}
{"sample_id": 5247, "db_id": "beer_factory", "final": {"question": "What is the number of the credit card that Frank-Paul Santangelo used to purchase root beers on 2014/7/7?", "sql": "SELECT DISTINCT T2.CreditCardNumber FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND T2.TransactionDate = '2014-07-07'", "source_tables": ["customers", "transaction"]}, "evidence": "number of the credit card refers to CreditCardNumber; on 2014/7/7 refers to TransactionDate = '2014-07-07';"}
{"sample_id": 5240, "db_id": "beer_factory", "final": {"question": "Among the users that permit the company to send regular emails to them, how many of them had made a transaction with a Visa card in July, 2014?", "sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.SubscribedToEmailList = 'TRUE' AND T2.CreditCardType = 'Visa' AND STRFTIME('%Y-%m', T2.TransactionDate) = '2014-07'", "source_tables": ["customers", "transaction"]}, "evidence": "users permit the company to send regular emails to them refers to subscribedtoemaillist = 'TRUE'; Visa card refers to creditcardtype = 'Visa'; in July, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '07';"}
{"sample_id": 5258, "db_id": "beer_factory", "final": {"question": "Which customer has the most reviews? State the full name.", "sql": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.CustomerID ORDER BY COUNT(T2.CustomerID) DESC LIMIT 1", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "customer that has the most reviews refers to MAX(COUNT(CustomerID)); full name = First, Last;"}
{"sample_id": 5269, "db_id": "beer_factory", "final": {"question": "How many breweries are there in Australia?", "sql": "SELECT COUNT(BreweryName) FROM rootbeerbrand WHERE Country = 'Australia'", "source_tables": ["rootbeerbrand"]}, "evidence": "Australia refers to Country = 'Australia';"}
{"sample_id": 5235, "db_id": "beer_factory", "final": {"question": "What is the name of the root beer brand with the lowest unit profit available to wholesalers?", "sql": "SELECT BrandName FROM rootbeerbrand ORDER BY CurrentRetailPrice - WholesaleCost LIMIT 1", "source_tables": ["rootbeerbrand"]}, "evidence": "name of the root beer brand refers to BrandName; lowest unit profit available to wholesalers refers to MIN(SUBTRACT(CurrentRetailPrice, WholesaleCost));"}
{"sample_id": 5311, "db_id": "beer_factory", "final": {"question": "What credit card is the most used in the purchase of non-alcoholic beer?", "sql": "SELECT T2.CreditCardType FROM rootbeer AS T1 INNER JOIN \"transaction\" AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T3.Alcoholic = 'FALSE' GROUP BY T2.CreditCardType ORDER BY COUNT(T2.CreditCardType) DESC LIMIT 1", "source_tables": ["rootbeerbrand", "rootbeer", "transaction"]}, "evidence": "credit card that is the most used refers to MAX(COUNT(CreditCardType)); non-alcoholic beer refers to Alcoholic = 'FALSE';"}
{"sample_id": 5319, "db_id": "beer_factory", "final": {"question": "List the brand IDs of the beers whose star rating is more than 3.", "sql": "SELECT BrandID FROM rootbeerreview WHERE StarRating > 3", "source_tables": ["rootbeerreview"]}, "evidence": "star rating is more than 3 refers to StarRating > 3;"}
{"sample_id": 5303, "db_id": "beer_factory", "final": {"question": "What is the difference in the average number of sales per day of root beer brands that contain honey and that don\u2019t contain honey.", "sql": "SELECT (CAST(SUM(CASE WHEN T1.Honey = 'TRUE' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT T3.TransactionDate)) - (CAST(SUM(CASE WHEN T1.Honey <> 'TRUE' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT T3.TransactionDate)) FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID INNER JOIN \"transaction\" AS T3 ON T2.RootBeerID = T3.RootBeerID", "source_tables": ["rootbeerbrand", "rootbeer", "transaction"]}, "evidence": "difference in the average = SUBTRACT(DIVIDE(MULTIPLY(SUM(Honey = 'TRUE'), 1.0), COUNT(TransactionDate)), DIVIDE(MULTIPLY(SUM(Honey = 'FALSE'), 1.0), COUNT(TransactionDate))); contain honey refers to Honey = 'TRUE'; don\u2019t contain honey refers to Honey = 'FALSE'"}
{"sample_id": 5376, "db_id": "sales", "final": {"question": "List down product ids that were purchased by customers called Abby.", "sql": "SELECT DISTINCT T1.ProductID FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Abby'", "source_tables": ["customers", "sales"]}, "evidence": ""}
{"sample_id": 5397, "db_id": "sales", "final": {"question": "What is the best selling colour for HL Mountain Frame, 42?", "sql": "SELECT IIF(SUM(IIF(T1.Name = 'HL Mountain Frame - Silver, 42', T2.SalesID, 0)) - SUM(IIF(T1.Name = 'HL Mountain Frame - Black, 42', T2.SalesID, 0)) > 0, 'Silver', 'Black') FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID", "source_tables": ["products", "sales"]}, "evidence": "best selling colour refers to name of product with higher total sales; SUM(SalesID WHERE Name = 'HL Mountain Frame - Silver, 42') > SUM(Name = 'HL Mountain Frame - Black, 42') means Silver is the best selling colour, otherwise Black is the best seling colour;"}
{"sample_id": 5368, "db_id": "sales", "final": {"question": "List down product names of free gifts.", "sql": "SELECT Name FROM Products WHERE Price = 0", "source_tables": ["products"]}, "evidence": "free gifts refers to Price = 0;"}
{"sample_id": 5407, "db_id": "sales", "final": {"question": "Find the number of customers handled by each of the sales people.", "sql": "SELECT COUNT(CustomerID) FROM Sales GROUP BY SalesPersonID", "source_tables": ["sales"]}, "evidence": ""}
{"sample_id": 5469, "db_id": "sales", "final": {"question": "Find and list the products that sold below the average quantity.", "sql": "SELECT DISTINCT T2.Name FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Quantity < ( SELECT AVG(Quantity) FROM Sales )", "source_tables": ["products", "sales"]}, "evidence": "below the average quantity refers to Quantity < AVG(Quantity);"}
{"sample_id": 5468, "db_id": "sales", "final": {"question": "Name the product that sold the most quantity.", "sql": "SELECT T2.Name FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Quantity DESC LIMIT 1", "source_tables": ["products", "sales"]}, "evidence": "most quantity refers to MAX(Quantity);"}
{"sample_id": 5375, "db_id": "sales", "final": {"question": "What is the last name of the customer who placed an order for sales id 178?", "sql": "SELECT T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.SalesID = 178", "source_tables": ["customers", "sales"]}, "evidence": ""}
{"sample_id": 5461, "db_id": "sales", "final": {"question": "List the first name of all the customers whose last name is Chen.", "sql": "SELECT FirstName, LastName FROM Customers WHERE LastName = 'Chen'", "source_tables": ["customers"]}, "evidence": ""}
{"sample_id": 5379, "db_id": "sales", "final": {"question": "What is the first name of employee who handled sales for customer called Abigail?", "sql": "SELECT DISTINCT T3.FirstName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID WHERE T1.FirstName = 'Abigail'", "source_tables": ["customers", "employees", "sales"]}, "evidence": ""}
{"sample_id": 5409, "db_id": "sales", "final": {"question": "Identify the name of the sales person with employee ID 7.", "sql": "SELECT FirstName, MiddleInitial, LastName FROM Employees WHERE EmployeeID = 7", "source_tables": ["employees"]}, "evidence": "name of the sales person = FirstName, MiddleInitial, LastName;"}
{"sample_id": 5424, "db_id": "sales", "final": {"question": "Calculate the total quantity of products that are gifts.", "sql": "SELECT SUM(T2.Quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Price = 0", "source_tables": ["products", "sales"]}, "evidence": "total quantity = SUM(Quantity); gifts refers to Price = 0;"}
{"sample_id": 5370, "db_id": "sales", "final": {"question": "What is the name of the product with the lowest quantity?", "sql": "SELECT T2.Name FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Quantity LIMIT 1", "source_tables": ["products", "sales"]}, "evidence": "lowest quantity refers to MIN(Quantity);"}
{"sample_id": 5400, "db_id": "sales", "final": {"question": "What is the average number of customers per sales person?", "sql": "SELECT CAST(COUNT(T1.CustomerID) AS REAL) / COUNT(T3.EmployeeID) FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID", "source_tables": ["customers", "employees", "sales"]}, "evidence": "average = DIVIDE(COUNT(CustomerID), COUNT(EmployeeID));"}
{"sample_id": 5449, "db_id": "sales", "final": {"question": "What is the full name of the customer who purchased the highest amount of total price in a single purchase?", "sql": "SELECT T2.FirstName, T2.MiddleInitial, T2.LastName FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T1.ProductID = T3.ProductID GROUP BY T1.SalesID, T1.Quantity, T3.Price, FirstName, MiddleInitial, LastName ORDER BY T1.Quantity * T3.Price DESC LIMIT 1", "source_tables": ["customers", "products", "sales"]}, "evidence": "full name of the customer = FirstName, MiddleInitial, LastName; highest amount of total price refers to MAX(MULTIPLY(Quantity, Price));"}
{"sample_id": 5441, "db_id": "sales", "final": {"question": "List the customer's ID and last name of the customer that purchased a product with a quantity greater than 90% of the average quantity of all listed products.", "sql": "SELECT T2.CustomerID, T2.LastName FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Quantity > ( SELECT AVG(Quantity) FROM Sales ) * 0.9", "source_tables": ["customers", "sales"]}, "evidence": "quantity greater than 90% of the average quantity = Quantity > MULTIPLY(AVG(Quantity), 0.9);"}
{"sample_id": 5383, "db_id": "sales", "final": {"question": "Among customers with IDs from 1 to 100, what is the highest price of products they purchased?", "sql": "SELECT T1.Price FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.CustomerID BETWEEN 1 AND 100 ORDER BY T1.Price DESC LIMIT 1", "source_tables": ["products", "sales"]}, "evidence": "IDs from 1 to 100 refers to CustomerID BETWEEN 1 AND 100 ; highest price refers to MAX(Price);"}
{"sample_id": 5404, "db_id": "sales", "final": {"question": "Calculate the revenue produced through sales of HL Road Frame - Red, 56.", "sql": "SELECT SUM(T2.Quantity * T1.Price) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'HL Road Frame - Red, 56'", "source_tables": ["products", "sales"]}, "evidence": "revenue = MULTIPLY(SUM(Quantity, Price)); 'HL Road Frame - Red, 56' is name of product;"}
{"sample_id": 5464, "db_id": "sales", "final": {"question": "Find and list the full name of customers who bought products above-average quantity.", "sql": "SELECT T2.FirstName, T2.MiddleInitial, T2.LastName FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Quantity HAVING T1.Quantity > ( SELECT AVG(Quantity) FROM Sales )", "source_tables": ["customers", "sales"]}, "evidence": "full name of the customer = FirstName, MiddleInitial, LastName; above-average quantity = Quantity > AVG(Quantity);"}
{"sample_id": 5467, "db_id": "sales", "final": {"question": "List the full name of customers who spend more than 50,000 in descending order the amount spend.", "sql": "SELECT DISTINCT T3.FirstName, T3.MiddleInitial, T3.LastName FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T2.Quantity * T1.Price > 50000", "source_tables": ["customers", "products", "sales"]}, "evidence": "full name of the customer = FirstName, MiddleInitial, LastName; more than 50,000 in the amount refers to MULTIPLY(Quantity, Price) > 50000;"}
{"sample_id": 5427, "db_id": "sales", "final": {"question": "How many of the employees have the last name \"Ringer\" ?", "sql": "SELECT COUNT(LastName) FROM Employees WHERE LastName = 'Ringer'", "source_tables": ["employees"]}, "evidence": ""}
{"sample_id": 5453, "db_id": "sales", "final": {"question": "How many type of products did Dalton M. Coleman purchase?", "sql": "SELECT COUNT(T2.ProductID) FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.FirstName = 'Dalton' AND T1.MiddleInitial = 'M' AND T1.LastName = 'Coleman'", "source_tables": ["customers", "sales"]}, "evidence": ""}
{"sample_id": 5532, "db_id": "menu", "final": {"question": "Give me the name and menu price of dishes that were free.", "sql": "SELECT T2.name, T1.price FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T2.lowest_price = 0", "source_tables": ["menuitem", "dish"]}, "evidence": "dishes that were free refers to lowest_price = 0;"}
{"sample_id": 5557, "db_id": "menu", "final": {"question": "What is the average number of dishes per menu in the Souper de Luxe menus? Identify what is the name of the dish that appeared the most in all of its menus.", "sql": "SELECT COUNT(*), T1.dish_id FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T3.name = 'Souper de Luxe' GROUP BY T3.id ORDER BY COUNT(T1.dish_id) DESC LIMIT 1", "source_tables": ["menu", "menuitem", "dish", "menupage"]}, "evidence": "average number of dishes per menu = DIVIDE(COUNT(dish_id), COUNT(menu_page_id)); Souper de Luxe is a name of menu; dish that appeared the most in all of its menus refers to MAX(COUNT(dish_id));"}
{"sample_id": 5509, "db_id": "menu", "final": {"question": "List down the locations of menu sponsored by Norddeutscher Lloyd Bremen.", "sql": "SELECT location FROM Menu WHERE sponsor = 'Norddeutscher Lloyd Bremen'", "source_tables": ["menu"]}, "evidence": "sponsored by Norddeutscher Lloyd Bremen refers to sponsor = 'Norddeutscher Lloyd Bremen';"}
{"sample_id": 5564, "db_id": "menu", "final": {"question": "What is the image ID of page 1 of the menu \"Zentral Theater Terrace\"?", "sql": "SELECT T2.image_id FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.name = 'Zentral Theater Terrace' AND T2.page_number = 1", "source_tables": ["menu", "menupage"]}, "evidence": "page 1 refers to page_number = 1; Zentral Theater Terrace is a name of menu;"}
{"sample_id": 5552, "db_id": "menu", "final": {"question": "What is the menu id of the menu sponsored by Occidental and Oriental Steamship Company with the highest number of pages?", "sql": "SELECT T2.menu_id FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.sponsor = 'OCCIDENTAL & ORIENTAL STEAMSHIP COMPANY' GROUP BY T2.menu_id ORDER BY COUNT(T2.page_number) DESC LIMIT 1", "source_tables": ["menu", "menupage"]}, "evidence": "sponsored by Occidental and Oriental Steamship Company refers to sponsor = 'OCCIDENTAL & ORIENTAL STEAMSHIP COMPANY'; highest number of pages refers to MAX(COUNT(page_number));"}
{"sample_id": 5501, "db_id": "menu", "final": {"question": "List the dishes that appeared at the left upper corner of the CHAS.BRADLEY'S OYSTER & DINING ROOM\"s sponsored menu.", "sql": "SELECT T4.name FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T3.sponsor = 'CHAS.BRADLEY''S OYSTER & DINING ROOM' AND T1.xpos < 0.25 AND T1.ypos < 0.25", "source_tables": ["menu", "menuitem", "dish", "menupage"]}, "evidence": "appeared at the left upper corner refers to xpos < 0.25 and ypos < 0.25; CHAS.BRADLEY'S OYSTER & DINING ROOM refers to sponsor = 'CHAS.BRADLEY''S OYSTER & DINING ROOM';"}
{"sample_id": 5544, "db_id": "menu", "final": {"question": "On 1887-07-21, what was the event that lead to the creation of menu id 21380?", "sql": "SELECT event FROM Menu WHERE date = '1887-07-21' AND id = 21380", "source_tables": ["menu"]}, "evidence": "On 1887-07-21 refers to date = '1887-07-21';"}
{"sample_id": 5546, "db_id": "menu", "final": {"question": "How many menus include puree of split peas aux croutons?", "sql": "SELECT SUM(CASE WHEN T1.name = 'Puree of split peas aux croutons' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id", "source_tables": ["dish", "menuitem"]}, "evidence": "puree of split peas aux croutons is a name of dish;"}
{"sample_id": 5574, "db_id": "menu", "final": {"question": "Among the menu pages on which the dish \"Paysanne Soup\" had appeared, how many of them had a stable price for the dish?", "sql": "SELECT SUM(CASE WHEN T1.name = 'Paysanne Soup' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.highest_price IS NULL", "source_tables": ["dish", "menuitem"]}, "evidence": "Paysanne Soup is a name of dish; stable price refers to highest_price is null;"}
{"sample_id": 5525, "db_id": "menu", "final": {"question": "Among the dishes, how many of them are for free?", "sql": "SELECT COUNT(*) FROM Dish WHERE lowest_price = 0", "source_tables": ["dish"]}, "evidence": "free refers to lowest_price = 0;"}
{"sample_id": 5475, "db_id": "menu", "final": {"question": "Please list the prices of the dish \"Clear green turtle\" on every menu page it appeared on.", "sql": "SELECT T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Clear green turtle'", "source_tables": ["dish", "menuitem"]}, "evidence": "Clear green turtle is a name of dish;"}
{"sample_id": 5551, "db_id": "menu", "final": {"question": "Among the menus that include milk, what is the menu page id of the menu that has the highest price?", "sql": "SELECT T1.menu_page_id FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T2.name = 'Milk' ORDER BY T1.price DESC LIMIT 1", "source_tables": ["menuitem", "dish"]}, "evidence": "milk is a name of dish; highest price refers to MAX(price);"}
{"sample_id": 5492, "db_id": "menu", "final": {"question": "How many menus were created for steamship?", "sql": "SELECT COUNT(*) FROM Menu WHERE venue = 'STEAMSHIP'", "source_tables": ["menu"]}, "evidence": "steamship refers to venue = 'STEAMSHIP';"}
{"sample_id": 5560, "db_id": "menu", "final": {"question": "Among the menus with over 10 pages, how many of them have over 20 dishes?", "sql": "SELECT COUNT(*) FROM Menu WHERE page_count > 10 AND dish_count > 20", "source_tables": ["menu"]}, "evidence": "menus with over 10 pages refers to page_count > 10; over 20 dishes refers to dish_count > 20;"}
{"sample_id": 5563, "db_id": "menu", "final": {"question": "Among the menus that did not support taking out or booking in advance, how many of them were created before 1950?", "sql": "SELECT COUNT(*) FROM Menu WHERE call_number IS NULL AND strftime('%Y', date) < '1950'", "source_tables": ["menu"]}, "evidence": "did not support taking out or booking in advance refers to call_number is null; created before 1950 refers to strftime('%Y', date) < '1950';"}
{"sample_id": 5529, "db_id": "menu", "final": {"question": "How long has the \"Clear Green Turtle\" dish appeared on the menu, and tell me when its latest update was?", "sql": "SELECT T1.last_appeared - T1.first_appeared, T2.updated_at FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Clear green turtle'", "source_tables": ["dish", "menuitem"]}, "evidence": "Clear Green Turtle is a name of dish; how long a dish appeared on the menu = SUBTRACT(last_appeared, first_appeared); latest update refers to latest updated_at;"}
{"sample_id": 5508, "db_id": "menu", "final": {"question": "What is the occasion for menu with ID 12463?", "sql": "SELECT occasion FROM Menu WHERE id = 12463", "source_tables": ["menu"]}, "evidence": "FALSE;"}
{"sample_id": 5538, "db_id": "menu", "final": {"question": "Name the dishes that cost 180,000.", "sql": "SELECT T1.name FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T2.price = 180000", "source_tables": ["dish", "menuitem"]}, "evidence": "cost 180,000 refers to price = 180000;"}
{"sample_id": 5487, "db_id": "menu", "final": {"question": "What is the average price of the dishes on the menu \"Zentral Theater Terrace\"?", "sql": "SELECT SUM(T1.price) / COUNT(T1.price) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id WHERE T3.name = 'Zentral Theater Terrace'", "source_tables": ["menu", "menuitem", "menupage"]}, "evidence": "average price = AVG(price); Zentral Theater Terrace refers to menu;"}
{"sample_id": 5543, "db_id": "menu", "final": {"question": "Which dish has the longest history?", "sql": "SELECT name FROM Dish ORDER BY last_appeared - Dish.first_appeared DESC LIMIT 1", "source_tables": ["dish"]}, "evidence": "longest history refers to MAX(SUBTRACT(last_appeared, first_appeared));"}
{"sample_id": 5499, "db_id": "menu", "final": {"question": "On the menu with the most dishes, how many dishes were there on its second page?", "sql": "SELECT COUNT(T1.dish_id) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id WHERE T2.page_number = 2 GROUP BY T3.name ORDER BY T3.dish_count DESC LIMIT 1", "source_tables": ["menu", "menuitem", "menupage"]}, "evidence": "menu with the most dishes refers to menu.id with MAX(dish_count); second page refers to page_number = 2;"}
{"sample_id": 5605, "db_id": "shipping", "final": {"question": "What is the average number of shipments done by the Kenworth trucks?", "sql": "SELECT CAST(COUNT(T2.ship_id) AS REAL) / COUNT(DISTINCT T1.truck_id) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T1.make = 'Kenworth'", "source_tables": ["shipment", "truck"]}, "evidence": "\"Kenworth\" is the make of truck; average = Divide (Count(ship_id where make = 'Kenworth'), Count(truck_id where make = 'Kenworth))"}
{"sample_id": 5644, "db_id": "shipping", "final": {"question": "How many trucks were manufactured in year 2009?", "sql": "SELECT COUNT(truck_id) FROM truck WHERE model_year = 2009", "source_tables": ["truck"]}, "evidence": "manufactured in year 2009 refers to model_year = 2009"}
{"sample_id": 5585, "db_id": "shipping", "final": {"question": "What is the full name of the driver that has done the most shipments in 2017?", "sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE STRFTIME('%Y', T1.ship_date) = '2017' GROUP BY T2.first_name, T2.last_name ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["shipment", "driver"]}, "evidence": "driver refers to driver_id; full name refers to first_name, last_name; in 2017 refers to Cast(ship_date AS DATE) = 2017; Most shipment refers to Max(Sum(weight))"}
{"sample_id": 5613, "db_id": "shipping", "final": {"question": "How many shipments with weight of no more than 1,000 pounds were shipped by the oldest truck?", "sql": "SELECT COUNT(*) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.weight < 1000 ORDER BY T1.model_year ASC LIMIT 1", "source_tables": ["shipment", "truck"]}, "evidence": "weight of no more than 1000 pounds refers to weight < 1000; oldest truck refers to Min (model_year)"}
{"sample_id": 5650, "db_id": "shipping", "final": {"question": "Who is the driver that transported the lightest weight of shipment? Provide the full name of the driver.", "sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id ORDER BY T1.weight ASC LIMIT 1", "source_tables": ["shipment", "driver"]}, "evidence": "lightest weight refers to Min(weight); full name refers to first_name, last_name"}
{"sample_id": 5594, "db_id": "shipping", "final": {"question": "Who was the customer of shipment no.1275? Give the customer's name.", "sql": "SELECT T1.cust_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T2.ship_id = '1275'", "source_tables": ["shipment", "customer"]}, "evidence": "shipment no. 1275 refers to ship_id = 1275; customer name refers to cust_name"}
{"sample_id": 5620, "db_id": "shipping", "final": {"question": "Identify the total weight of shipments transported in 2016 by the newest Peterbilt.", "sql": "SELECT SUM(T2.weight) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T1.make = 'Peterbilt' AND STRFTIME('%Y', T2.ship_date) = '2016' ORDER BY T1.model_year DESC LIMIT 1", "source_tables": ["shipment", "truck"]}, "evidence": "transported in 2016 refers to CAST(ship_date as DATE) = 2016; 'Peterbilt' is the make; newest refers to Max(model_year)"}
{"sample_id": 5590, "db_id": "shipping", "final": {"question": "What is the average weight of the goods being transported on a single shipment ordered by S K L Enterprises Inc?", "sql": "SELECT AVG(T2.weight) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'S K L Enterprises Inc'", "source_tables": ["shipment", "customer"]}, "evidence": "\"S K L Enterprises Inc\" is the cust_name; average = Divide (Sum(weight), Count(ship_id))"}
{"sample_id": 5589, "db_id": "shipping", "final": {"question": "Please list the destination cities of all the shipments ordered by S K L Enterprises Inc.", "sql": "SELECT DISTINCT T3.city_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id WHERE T1.cust_name = 'S K L Enterprises Inc'", "source_tables": ["shipment", "customer", "city"]}, "evidence": "\"S K L Enterprises Inc\" is the cust_name; destination cities refers to city_name"}
{"sample_id": 5673, "db_id": "shipping", "final": {"question": "What is the weight of the shipment delivered by Andrea Simons on March 7, 2016?", "sql": "SELECT T1.weight FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.first_name = 'Andrea' AND T2.last_name = 'Simons' AND T1.ship_date = '2016-03-07'", "source_tables": ["shipment", "driver"]}, "evidence": "on March 7, 2016 refers to ship_date = '2016-03-07'"}
{"sample_id": 5623, "db_id": "shipping", "final": {"question": "What is the average shipment weight carried by the oldest Mack?", "sql": "SELECT AVG(T2.weight) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T1.make = 'Mack'", "source_tables": ["shipment", "truck"]}, "evidence": "\"Mack\" is the make; oldest refers to Min(model_year); average shipment weight refers to AVG(weight)"}
{"sample_id": 5640, "db_id": "shipping", "final": {"question": "What is the percentage of wholesaler customers who have shipment weight of not greater than 70000 pounds?", "sql": "SELECT CAST(SUM(CASE WHEN T2.weight < 70000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_type = 'wholesaler'", "source_tables": ["shipment", "customer"]}, "evidence": "\"wholesaler\" is the cust_type; weight of not greater than 70000 pounds refers to weight < 70000; percentage = Divide (Count(cust_id where weight < 70000), Count(cust_id)) * 100"}
{"sample_id": 5682, "db_id": "shipping", "final": {"question": "Calculate the difference between the number of shipments shipped by the truck with the model year 2005 and model year 2006.", "sql": "SELECT SUM(CASE WHEN T1.model_year = '2005' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.model_year = '2006' THEN 1 ELSE 0 END) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id", "source_tables": ["shipment", "truck"]}, "evidence": "\"2005\" and \"2006\" are both model_year of truck; difference = Subtract (Count (ship_id where model_year = 2005), Count(ship_id where model_year = 2006))"}
{"sample_id": 5649, "db_id": "shipping", "final": {"question": "What is the annual revenue of Klett & Sons Repair?", "sql": "SELECT annual_revenue FROM customer WHERE cust_name = 'Klett & Sons Repair'", "source_tables": ["customer"]}, "evidence": "\"Klett & Sons Repair\" is the cust_name"}
{"sample_id": 5656, "db_id": "shipping", "final": {"question": "How many shipments did Zachery Hicks transport goods to New York in the year 2016?", "sql": "SELECT COUNT(*) FROM city AS T1 INNER JOIN shipment AS T2 ON T1.city_id = T2.city_id INNER JOIN driver AS T3 ON T3.driver_id = T2.driver_id WHERE T3.first_name = 'Zachery' AND T3.last_name = 'Hicks' AND T1.city_name = 'New York' AND STRFTIME('%Y', T2.ship_date) = '2016'", "source_tables": ["shipment", "city", "driver"]}, "evidence": "\"New York\" is the city_name; in 2016 refers to CAST(ship_date AS DATE) = 2016"}
{"sample_id": 5604, "db_id": "shipping", "final": {"question": "Calculate the population density of the city as the destination of shipment no.1369.", "sql": "SELECT T2.area / T2.population FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1369'", "source_tables": ["shipment", "city"]}, "evidence": "shipment no. 1369 refers to ship_id = 1369; population density refers to Divide (area, population)"}
{"sample_id": 5670, "db_id": "shipping", "final": {"question": "What is the truck's model year used to ship the ship ID 1245?", "sql": "SELECT T1.model_year FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1245'", "source_tables": ["shipment", "truck"]}, "evidence": ""}
{"sample_id": 5678, "db_id": "shipping", "final": {"question": "List the driver's name of the shipment shipped on February 22, 2016.", "sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_date = '2016-02-22'", "source_tables": ["shipment", "driver"]}, "evidence": "on February 22, 2016 refers to ship_date = '2016-02-22'; driver's name refers to first_name, last_name"}
{"sample_id": 5581, "db_id": "shipping", "final": {"question": "How many shipments were ordered by a customer in Florida?", "sql": "SELECT COUNT(T1.cust_id) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.state = 'FL'", "source_tables": ["shipment", "customer"]}, "evidence": "customer in Florida refers to state = 'FL'"}
{"sample_id": 5654, "db_id": "shipping", "final": {"question": "Provide the brand of the truck and the name of the driver that transported goods in Klett & Sons Repair.", "sql": "SELECT T3.make, T4.first_name, T4.last_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN truck AS T3 ON T3.truck_id = T2.truck_id INNER JOIN driver AS T4 ON T4.driver_id = T2.driver_id WHERE T1.cust_name = 'Klett & Sons Repair'", "source_tables": ["truck", "shipment", "customer", "driver"]}, "evidence": "\"Klett & Sons Repair\" is the cust_name; brand of truck refers to make; name of driver refers to first_name, last_name"}
{"sample_id": 5637, "db_id": "shipping", "final": {"question": "State the address of drivers who transported the shipment with weight greater than 50000 pounds.", "sql": "SELECT T2.address FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id GROUP BY T2.driver_id HAVING SUM(T1.weight) > 50000", "source_tables": ["shipment", "driver"]}, "evidence": "shipment with weight greater than 50000 pounds refers to Sum(weight) > 50000"}
{"sample_id": 5707, "db_id": "language_corpus", "final": {"question": "What is the title of corpus with most words?", "sql": "SELECT title FROM pages WHERE words = ( SELECT MAX(words) FROM pages )", "source_tables": ["pages"]}, "evidence": "most words refers to max(words)"}
{"sample_id": 5792, "db_id": "language_corpus", "final": {"question": "How many occurrences does the word \"panajot\" have?", "sql": "SELECT occurrences FROM words WHERE word = 'panajot'", "source_tables": ["words"]}, "evidence": "panajot refers to word = 'panajot'"}
{"sample_id": 5776, "db_id": "language_corpus", "final": {"question": "What is the occurrence of the word \"nombre\"?", "sql": "SELECT occurrences FROM words WHERE word = 'nombre'", "source_tables": ["words"]}, "evidence": "This is not;"}
{"sample_id": 5797, "db_id": "language_corpus", "final": {"question": "Which word has the most appearances in the Wikipedia page with the title of \"Agricultura\"? Give the word ID.", "sql": "SELECT T2.wid FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.title = 'Agricultura' ORDER BY T2.occurrences DESC LIMIT 1", "source_tables": ["pages_words", "pages"]}, "evidence": "Agricultura refers to title = 'Agricultura'; the most appearances is MAX(pages_words_sampling.occurrences)"}
{"sample_id": 5730, "db_id": "language_corpus", "final": {"question": "Indicate the title of all the pages in which the word comunitat appears.", "sql": "SELECT T3.title FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'comunitat'", "source_tables": ["pages", "pages_words", "words"]}, "evidence": "This is not;"}
{"sample_id": 5748, "db_id": "language_corpus", "final": {"question": "What is the second word in the pair of words number 1 and 8968?", "sql": "SELECT word FROM words WHERE wid = 8968", "source_tables": ["words"]}, "evidence": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; w1st = 1; w2nd = 8968;"}
{"sample_id": 5819, "db_id": "language_corpus", "final": {"question": "What is the average occurrence of the word \"grec\" on each Wikipedia page that has this word?", "sql": "SELECT CAST(SUM(T2.occurrences) AS REAL) / COUNT(T1.wid) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'grec'", "source_tables": ["pages_words", "words"]}, "evidence": "grec refers to word = 'grec'; AVG(occurrences where word = 'grec')"}
{"sample_id": 5764, "db_id": "language_corpus", "final": {"question": "What is the total number of words in page containing pair of word id \"100\" and \"317\"?", "sql": "SELECT words FROM langs WHERE lid = ( SELECT lid FROM biwords WHERE w1st = 100 AND w2nd = 317 )", "source_tables": ["langs", "biwords"]}, "evidence": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; w1st = 100; w2nd = 317;"}
{"sample_id": 5695, "db_id": "language_corpus", "final": {"question": "What is the total pages of Wikipedia in Catalan language?", "sql": "SELECT pages FROM langs WHERE lang = 'ca'", "source_tables": ["langs"]}, "evidence": "total pages refers to sum(pages); Catalan language refers to lang = 'ca'"}
{"sample_id": 5733, "db_id": "language_corpus", "final": {"question": "Indicate if there is any pair formed by the words fukunaga and d'egees.", "sql": "SELECT CASE WHEN COUNT(T1.wid) > 0 THEN 'yes' ELSE 'no' END FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st OR T1.wid = T2.w2nd WHERE T2.w1st = ( SELECT wid FROM words WHERE T1.word = 'fukunaga' ) AND T2.w2nd = ( SELECT wid FROM words WHERE word LIKE 'd%egees' )", "source_tables": ["words", "biwords"]}, "evidence": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word;\u00a0 w1st = word = 'fukunaga' or w2nd = word = 'fukunaga'; w1st = word = 'd'egees'or w2nd = word = 'd'egees';"}
{"sample_id": 5709, "db_id": "language_corpus", "final": {"question": "Among the title with single digit word count, list down 5 revision page ID of these titles.", "sql": "SELECT revision FROM pages WHERE words < 10 LIMIT 5", "source_tables": ["pages"]}, "evidence": "single digit word count refers to words < 10"}
{"sample_id": 5754, "db_id": "language_corpus", "final": {"question": "How many times the word \"desena\" occurs?", "sql": "SELECT occurrences FROM words WHERE word = 'desena'", "source_tables": ["words"]}, "evidence": "How many times occurs refers to occurrences;"}
{"sample_id": 5687, "db_id": "language_corpus", "final": {"question": "What is the title of Catalan language wikipedia page with revision page id '16203226'?", "sql": "SELECT title FROM pages WHERE revision = 16203226", "source_tables": ["pages"]}, "evidence": "revision page id '16203226' refers to revision = 16203226"}
{"sample_id": 5802, "db_id": "language_corpus", "final": {"question": "How many times does the biwords \"que gregorio\" appear in the language?", "sql": "SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'que' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'gregorio' )", "source_tables": ["words", "biwords"]}, "evidence": "que gregorio refers to w1st = wid where word = 'que' AND w2nd = wid where word = 'gregorio'; appear refers to biwords.occurrences"}
{"sample_id": 5694, "db_id": "language_corpus", "final": {"question": "Calculate the average number of the word occurrences in which \u2018system\u2019 appeared as the first word in the pair.", "sql": "SELECT AVG(T2.occurrences) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st WHERE T2.w1st = ( SELECT wid FROM words WHERE word = 'sistema' )", "source_tables": ["words", "biwords"]}, "evidence": "average word occurrences = divide(sum(occurrences), count(occurrences)); \u2018system\u2019 appeared as the first word refers to w1st = 'system'"}
{"sample_id": 5684, "db_id": "language_corpus", "final": {"question": "Name the longest Catalan language Wikipedia page title and state the number of different words in this page.", "sql": "SELECT title, words FROM pages WHERE title = ( SELECT MAX(LENGTH(title)) FROM pages )", "source_tables": ["pages"]}, "evidence": "longest title refers to max(length(title))"}
{"sample_id": 5807, "db_id": "language_corpus", "final": {"question": "For the word \"grec\", what is the percentage of the appearances in the \"Art\" Wikipedia page have among all the appearances?", "sql": "SELECT CAST(SUM(CASE WHEN T3.title = 'Art' THEN T2.occurrences ELSE 0 END) AS REAL) * 100 / SUM(T2.occurrences) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'grec'", "source_tables": ["pages", "pages_words", "words"]}, "evidence": "grec refers to word = 'grec'; Art refers to title = 'Art'; percentage is DIVIDE(occurrences(grec), occurences(Art))*100"}
{"sample_id": 5800, "db_id": "language_corpus", "final": {"question": "How many times does the word \"her\u00f2dot\" appear in the Wikipedia page?", "sql": "SELECT COUNT(T2.occurrences) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'her\u00f2dot'", "source_tables": ["pages_words", "words"]}, "evidence": "her\u00f2dot refers to word = 'her\u00f2dot'; times appear refers to SUM(pid)"}
{"sample_id": 5722, "db_id": "language_corpus", "final": {"question": "Indicate the page id of Wikipedia about Catalan language of all the pages that have a numeric value in their title.", "sql": "SELECT pid, title FROM pages WHERE title LIKE '%0%' OR '%1%' OR '%2%' OR '%3%' OR '%4%' OR '%5%' OR '%6%' OR '%7%' OR '%8%' OR '%9%'", "source_tables": ["pages"]}, "evidence": "the page id of Wikipedia refers to pid; numeric value contains only numbers, LIKE '%0%' OR '%1%' OR '%2%' OR '%3%' OR '%4%' OR '%5%' OR '%6%' OR '%7%' OR '%8%' OR '%9%';"}
{"sample_id": 5729, "db_id": "language_corpus", "final": {"question": "Calculate the percentage of times that the same word appears in a pair.", "sql": "SELECT CAST(COUNT(CASE WHEN w1st = w2nd THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(w1st) FROM biwords", "source_tables": ["biwords"]}, "evidence": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; the same word appears in a pair refers to w1st = w2nd; times refers to occurrences; DIVIDE(COUNT(occurrences where w1st = w2nd), COUNT(occurrences)) as percentage;"}
{"sample_id": 5786, "db_id": "language_corpus", "final": {"question": "What is the total occurrence of the biwords pairs with \"\u00e0bac\" as its first word?", "sql": "SELECT COUNT(T2.w1st) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T1.word = '\u00e0bac'", "source_tables": ["words", "biwords"]}, "evidence": "occurrence refers to occurrences; \u00e0bac refers to word = '\u00e0bac'; first word refers to w1st"}
{"sample_id": 5699, "db_id": "language_corpus", "final": {"question": "What is the wikipedia page id of Arqueozoologia?", "sql": "SELECT page FROM pages WHERE title = 'Arqueozoologia'", "source_tables": ["pages"]}, "evidence": "page id refers to pid; Arqueozoologia refers to title = 'Arqueozoologia'"}
{"sample_id": 5779, "db_id": "language_corpus", "final": {"question": "How many times did the word \"grec\" occur on the page titled \"\u00c0bac\"?", "sql": "SELECT T2.occurrences FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T3.title = '\u00c0bac' AND T1.word = 'grec'", "source_tables": ["pages", "pages_words", "words"]}, "evidence": "how many times occur refers to occurrences; page titled \"\u00c0bac\" refers to title = '\u00c0bac' ;"}
{"sample_id": 5700, "db_id": "language_corpus", "final": {"question": "In Abadia, what is the word id of the of the Catalan language that appeared the highest amount of times? Indicate the how many times did they said word id appeared.", "sql": "SELECT T2.wid, T2.occurrences FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.title = 'Abadia' ORDER BY T2.occurrences DESC LIMIT 1", "source_tables": ["pages_words", "pages"]}, "evidence": "Abadia refers to title = 'Abadia'; word id refers to wid; the highest amount of times refers to max(occurrences)"}
{"sample_id": 5771, "db_id": "language_corpus", "final": {"question": "State the name of the pair of word that have id of 20 and 50?", "sql": "SELECT T1.word, T3.word FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T2.w1st = 20 AND T2.w2nd = 50", "source_tables": ["words", "biwords"]}, "evidence": "word that have id of 20 refers to wid = 20; word that have id of 50 refers to wid = 50;"}
{"sample_id": 5743, "db_id": "language_corpus", "final": {"question": "What proportion of a pair of words in the Catalan language have been repeated less than 80 times?", "sql": "SELECT CAST(COUNT(CASE WHEN occurrences < 80 THEN lid ELSE NULL END) AS REAL) * 100 / COUNT(lid) FROM biwords", "source_tables": ["biwords"]}, "evidence": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; in the Catalan language refers to lid; repeated less than 80 times refers to occurrences < 80; DIVIDE(COUNT(lid where occurrences < 80), COUNT(lid)) as percentage;"}
{"sample_id": 5795, "db_id": "language_corpus", "final": {"question": "For the biwords pair that appears \"116430\" times, what is the second word of the pair?", "sql": "SELECT T1.word FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w2nd WHERE T2.occurrences = 116430", "source_tables": ["words", "biwords"]}, "evidence": "the biwords pair that appears \"116430\" times refers to occurrences = 116430; second word of the pair refers to w2nd"}
{"sample_id": 5853, "db_id": "airline", "final": {"question": "What is the description of the airline code 19049?", "sql": "SELECT Description FROM \"Air Carriers\" WHERE Code = 19049", "source_tables": ["air carriers"]}, "evidence": ""}
{"sample_id": 5881, "db_id": "airline", "final": {"question": "Which flight carrier operator flies from Atlantic City to Fort Lauderdale?", "sql": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.ORIGIN = 'ACY' AND T1.DEST = 'FLL' GROUP BY T2.Description", "source_tables": ["airlines", "air carriers"]}, "evidence": "flight carrier operator refers to OP_CARRIER_AIRLINE_ID; from Atlantic City refers to ORIGIN = 'ACY'; to Fort Lauderdale refers to DEST = 'FLL';"}
{"sample_id": 5866, "db_id": "airline", "final": {"question": "Give the name of the airline to which tail number N202NN belongs to.", "sql": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.TAIL_NUM = 'N202NN' GROUP BY T2.Description", "source_tables": ["airlines", "air carriers"]}, "evidence": "name of the airline refers to Description; tail number refers to TAIL_NUM; TAIL_NUM = 'N202NN';"}
{"sample_id": 5873, "db_id": "airline", "final": {"question": "What is the code of Mississippi Valley Airlines?", "sql": "SELECT Code FROM \"Air Carriers\" WHERE Description LIKE 'Mississippi Valley Airlines%'", "source_tables": ["air carriers"]}, "evidence": "Mississippi Valley Airlines refers to Description like 'Mississippi Valley Airlines%';"}
{"sample_id": 5860, "db_id": "airline", "final": {"question": "How many planes does Southwest Airlines Co. have?", "sql": "SELECT COUNT(T3.TAIL_NUM) FROM ( SELECT T1.TAIL_NUM FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T2.Description = 'Southwest Airlines Co.: WN' GROUP BY T1.TAIL_NUM ) T3", "source_tables": ["airlines", "air carriers"]}, "evidence": "planes refers to TAIL_NUM; Southwest Airlines Co. refers to Description = 'Southwest Airlines Co.: WN';"}
{"sample_id": 5836, "db_id": "airline", "final": {"question": "What is the average departure delay time of flights operated by American Airlines Inc.?", "sql": "SELECT AVG(T1.DEP_DELAY) FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T2.Code = T1.ORIGIN INNER JOIN \"Air Carriers\" AS T3 ON T1.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA'", "source_tables": ["airlines", "airports", "air carriers"]}, "evidence": "average departure delay time = DIVIDE(SUM(DEP_DELAY), COUNT(Code)); American Airlines Inc. refers to Description = 'American Airlines Inc.: AA';"}
{"sample_id": 5863, "db_id": "airline", "final": {"question": "Among the airports whose destination is Logan International, what is the airline id of the carrier operator with the highest delay in minutes due to security?", "sql": "SELECT T2.OP_CARRIER_AIRLINE_ID FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T1.Description = 'Boston, MA: Logan International' AND T2.DEST = 'BOS' ORDER BY T2.SECURITY_DELAY DESC LIMIT 1", "source_tables": ["airlines", "airports"]}, "evidence": "destination refers to DEST; Logan International refers to Description = 'Boston, MA: Logan International'; airline id of the carrier operator refers to OP_CARRIER_AIRLINE_ID; highest delay in minutes due to security refers to MAX(SECURITY_DELAY);"}
{"sample_id": 5834, "db_id": "airline", "final": {"question": "Among the flights operated by American Airlines Inc. on 2018/8/1, how many of them were cancelled?", "sql": "SELECT SUM(CASE WHEN T2.CANCELLED = 1 THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN \"Air Carriers\" AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T2.FL_DATE = '2018/8/1' AND T3.Description = 'American Airlines Inc.: AA'", "source_tables": ["airlines", "airports", "air carriers"]}, "evidence": "American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; on 2018/8/1 refers to FL_DATE = '2018/8/1'; cancelled refers to CANCELLED = 1;"}
{"sample_id": 5851, "db_id": "airline", "final": {"question": "What is the percentage of flights from Los Angeles International airport that were cancelled due to a type C cancellation code?", "sql": "SELECT CAST(SUM(CASE WHEN T2.CANCELLATION_CODE = 'C' THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE = '2018/8/15' AND T2.CANCELLATION_CODE IS NOT NULL AND T1.Description = 'Los Angeles, CA: Los Angeles International'", "source_tables": ["airlines", "airports"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(CANCELLATION_CODE = 'C'), COUNT(Code)), 100); flights from refers to ORIGIN; Los Angeles International airport refers to Description = 'Los Angeles, CA: Los Angeles International'; cancelled refers to Cancelled = 1; cancelled due to a type C cancellation code refers to CANCELLATION_CODE = 'C';"}
{"sample_id": 5865, "db_id": "airline", "final": {"question": "What is the name of the airline with the highest number of non-cancelled flights?", "sql": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.CANCELLED = 0 GROUP BY T2.Description ORDER BY COUNT(T1.CANCELLED) DESC LIMIT 1", "source_tables": ["airlines", "air carriers"]}, "evidence": "names of the airlines refers to Description; highest number of non-cancelled flights refers to MAX(COUNT(CANCELLED = 0));"}
{"sample_id": 5904, "db_id": "airline", "final": {"question": "List the flight date of flights with air carrier described as Profit Airlines Inc.: XBH which have an actual elapsed time below 100.", "sql": "SELECT T2.FL_DATE FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.ACTUAL_ELAPSED_TIME < 100 AND T1.Description = 'Profit Airlines Inc.: XBH'", "source_tables": ["airlines", "air carriers"]}, "evidence": "flight date refers to FL_DATE; Profit Airlines Inc.: XBH refers to Description = 'Profit Airlines Inc.: XBH'; actual elapsed time below 100 refers to ACTUAL_ELAPSED_TIME < 100;"}
{"sample_id": 5833, "db_id": "airline", "final": {"question": "Among the flights operated by American Airlines Inc., how many of them were scheduled to land in New York?", "sql": "SELECT SUM(CASE WHEN T2.DEST = 'JFK' THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST INNER JOIN \"Air Carriers\" AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA'", "source_tables": ["airlines", "airports", "air carriers"]}, "evidence": "American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; land in New York refers to DEST = 'JFK';"}
{"sample_id": 5894, "db_id": "airline", "final": {"question": "Provide the air carrier description of all flights arriving at Miami.", "sql": "SELECT T1.Description FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.DEST = 'MIA'", "source_tables": ["airlines", "air carriers"]}, "evidence": "arriving at Miami refers to DEST = 'MIA';"}
{"sample_id": 5831, "db_id": "airline", "final": {"question": "How many flights operated by American Airlines Inc. on 2018/8/1 were faster than scheduled?", "sql": "SELECT SUM(CASE WHEN T2.ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN \"Air Carriers\" AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T2.FL_DATE = '2018/8/1' AND T3.Description = 'American Airlines Inc.: AA'", "source_tables": ["airlines", "airports", "air carriers"]}, "evidence": "American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; on 2018/8/1 refers to FL_DATE = '2018/8/1'; faster than scheduled refers to ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME;"}
{"sample_id": 5911, "db_id": "airline", "final": {"question": "Among the flights of the air carrier described as American Airlines, what is the percentage of the flights with earlier departure?", "sql": "SELECT CAST(SUM(CASE WHEN T2.DEP_DELAY < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description LIKE '%American Airlines%'", "source_tables": ["airlines", "air carriers"]}, "evidence": "American Airlines can be found in Description which contains 'American Airlines'; percentage = MULTIPLY(DIVIDE(SUM(DEP_DELAY < 0), COUNT(DEP_DELAY)), 1.0); earlier departure refers to DEP_DELAY < 0;"}
{"sample_id": 5840, "db_id": "airline", "final": {"question": "Provide the number of airplanes that landed on Oakland Airport on 2018/8/7.", "sql": "SELECT SUM(CASE WHEN T1.Description LIKE '%Oakland%' THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE = '2018/8/7'", "source_tables": ["airlines", "airports"]}, "evidence": "landed on refers to DEST; Oakland Airport refers to Description which contains 'Oakland'; on 2018/8/7 refers to FL_DATE = '2018/8/7';"}
{"sample_id": 5887, "db_id": "airline", "final": {"question": "Give the code of the airport described as Driftwood Bay, AK: Driftwood Bay Airport.", "sql": "SELECT Code FROM Airports WHERE Description = 'Driftwood Bay, AK: Driftwood Bay Airport'", "source_tables": ["airports"]}, "evidence": "Driftwood Bay, AK: Driftwood Bay Airport refers to Description = 'Driftwood Bay, AK: Driftwood Bay Airport';"}
{"sample_id": 5888, "db_id": "airline", "final": {"question": "How many cancelled flights are there?", "sql": "SELECT COUNT(*) FROM Airlines WHERE CANCELLED = 1", "source_tables": ["airlines"]}, "evidence": "cancelled flights refers to CANCELLED = 1;"}
{"sample_id": 6092, "db_id": "books", "final": {"question": "Give the author's name of the books that cost 19 dollars and above.", "sql": "SELECT DISTINCT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN order_line AS T4 ON T4.book_id = T1.book_id WHERE T4.price > 19", "source_tables": ["book_author", "book", "author", "order_line"]}, "evidence": "books cost 19 dollars and above refers to price > = 19"}
{"sample_id": 6035, "db_id": "books", "final": {"question": "On what date did the customers who live at number 460 of their respective streets place their orders?", "sql": "SELECT T1.order_date FROM cust_order AS T1 INNER JOIN address AS T2 ON T1.dest_address_id = T2.address_id WHERE T2.street_number = 460", "source_tables": ["address", "cust_order"]}, "evidence": "live at number 460 refers to street_number = '460'; date the customers placed their orders refers to order_date"}
{"sample_id": 6059, "db_id": "books", "final": {"question": "Among all addresses provided by customers, identify the percentage that are not in use anymore.", "sql": "SELECT CAST(SUM(CASE WHEN T2.address_status = 'Inactive' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customer_address AS T1 INNER JOIN address_status AS T2 ON T2.status_id = T1.status_id", "source_tables": ["address_status", "customer_address"]}, "evidence": "address not in use refers to address_status = 'Inactive'; percentage = Divide (Count(address_status = 'Inactive'), Count(address_status)) * 100"}
{"sample_id": 5968, "db_id": "books", "final": {"question": "Who authored the book with greatest number of pages?", "sql": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id ORDER BY T1.num_pages DESC LIMIT 1", "source_tables": ["book_author", "book", "author"]}, "evidence": "greatest number of pages refers to Max(num_pages); who authored refers to author_name"}
{"sample_id": 5965, "db_id": "books", "final": {"question": "List the ISBN of the book published in Spanish.", "sql": "SELECT T1.isbn13 FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'Spanish'", "source_tables": ["book", "book_language"]}, "evidence": "\"Spanish\" is the language_name; ISBN refers to isbn13"}
{"sample_id": 6053, "db_id": "books", "final": {"question": "Identify the cost difference between Priority and Express shipping methods.", "sql": "SELECT SUM(CASE WHEN method_name = 'Priority' THEN cost ELSE 0 END) - SUM(CASE WHEN method_name = 'Express' THEN cost ELSE 0 END) FROM shipping_method", "source_tables": ["shipping_method"]}, "evidence": "\"Priority\" and \"Express\" are both method_name; cost difference = Subtract (Sum(cost where method_name = 'Express'), Sum(cost where method_name 'Priority'))"}
{"sample_id": 6000, "db_id": "books", "final": {"question": "How many orders were returned in the year 2020?", "sql": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Returned' AND STRFTIME('%Y', T2.status_date) = '2020'", "source_tables": ["order_status", "order_history"]}, "evidence": "returned refers to status_value = 'Returned'; in the year 2020 refers to status_date LIKE '%2020%'"}
{"sample_id": 5924, "db_id": "books", "final": {"question": "Among the books ordered by Lucas Wyldbore, how many of them are over 300 pages?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Lucas' AND T4.last_name = 'Wyldbore' AND T1.num_pages > 300", "source_tables": ["customer", "book", "cust_order", "order_line"]}, "evidence": "books have over 300 pages refers to num_pages > 300"}
{"sample_id": 6032, "db_id": "books", "final": {"question": "Which customer addresses are no longer active?", "sql": "SELECT DISTINCT T1.street_name FROM address AS T1 INNER JOIN customer_address AS T2 ON T1.address_id = T2.address_id INNER JOIN address_status AS T3 ON T3.status_id = T2.status_id WHERE T3.address_status = 'Inactive'", "source_tables": ["address_status", "address", "customer_address"]}, "evidence": "no longer active refers to address_status = 'Inactive'; customer address refers to street_number, street_name, city"}
{"sample_id": 5991, "db_id": "books", "final": {"question": "What is the average price for the order line?", "sql": "SELECT AVG(price) FROM order_line", "source_tables": ["order_line"]}, "evidence": "average price refers to AVG(price)"}
{"sample_id": 5999, "db_id": "books", "final": {"question": "What are the books published by \"Harper Collins\"?", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Harper Collins'", "source_tables": ["book", "publisher"]}, "evidence": "\"Harper Collins\" is the publisher_name; books refers to title"}
{"sample_id": 5964, "db_id": "books", "final": {"question": "Calculate the total price of books ordered by customer named Lucas Wyldbore.", "sql": "SELECT SUM(T1.price) FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T3.first_name = 'Lucas' AND T3.last_name = 'Wyldbore'", "source_tables": ["customer", "cust_order", "order_line"]}, "evidence": "total price refers to Sum(price); full name is composed of first name, last name"}
{"sample_id": 5957, "db_id": "books", "final": {"question": "What is the name of the publisher that published the most books?", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id GROUP BY T2.publisher_name ORDER BY COUNT(T2.publisher_id) DESC LIMIT 1", "source_tables": ["book", "publisher"]}, "evidence": "name of publisher refers to publisher_name; publisher published the most number of books refers to Max(Count(book_id))"}
{"sample_id": 6028, "db_id": "books", "final": {"question": "Indicate the title of the six books with the greatest potential value as collectibles.", "sql": "SELECT title FROM book ORDER BY publication_date ASC LIMIT 6", "source_tables": ["book"]}, "evidence": "greatest potential value refers to Min(publication_date)"}
{"sample_id": 5962, "db_id": "books", "final": {"question": "What is the language of the book with ISBN 23755004321?", "sql": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T1.isbn13 = 23755004321", "source_tables": ["book", "book_language"]}, "evidence": "\"23755004321\" is the isbn13; language refers to language_name"}
{"sample_id": 6021, "db_id": "books", "final": {"question": "What are the languages of the first two published books?", "sql": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id ORDER BY T1.publication_date ASC LIMIT 2", "source_tables": ["book", "book_language"]}, "evidence": "first two published book refers to Min(publication_date); language refers to language_name"}
{"sample_id": 6101, "db_id": "books", "final": {"question": "What is the language of the book titled Zorro?", "sql": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'Zorro'", "source_tables": ["book", "book_language"]}, "evidence": "\"Zorro\" is the title of the book; langauge refers to language_name"}
{"sample_id": 5979, "db_id": "books", "final": {"question": "Who wrote \"The Prophet\"?", "sql": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T1.title = 'The Prophet'", "source_tables": ["book_author", "book", "author"]}, "evidence": "\"The Prophet\" is the title of the book: who wrote refers to author_name"}
{"sample_id": 5972, "db_id": "books", "final": {"question": "In books authored by Abraham Lincoln, what is the percentage of the books published in 1992?", "sql": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', T1.publication_date) = '1992' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Abraham Lincoln'", "source_tables": ["book_author", "book", "author"]}, "evidence": "\"Abraham Lincoln\" is the author_name; published in 1992 refers to publication_date LIKE '1992%'; percentage = Divide (Sum(publication_date LIKE '1992%'), Count(publication_date)) * 100"}
{"sample_id": 6014, "db_id": "books", "final": {"question": "How many orders did Marcelia Goering place in 2021 that uses the Priority Shipping method?", "sql": "SELECT COUNT(*) FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T2.shipping_method_id WHERE T1.first_name = 'Marcelia' AND T1.last_name = 'Goering' AND STRFTIME('%Y', T2.order_date) = '2021' AND T3.method_name = 'Priority'", "source_tables": ["customer", "shipping_method", "cust_order"]}, "evidence": "in 2021 refers to substr(order_date, 1, 4) = '2021'; priority shipping method refers to method_name = 'Priority'"}
{"sample_id": 6064, "db_id": "books", "final": {"question": "Who is the publisher of Hitchhiker's Guide To The Galaxy: The Filming of the Douglas Adams classic?", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'Hitchhiker''s Guide To The Galaxy: The Filming of the Douglas Adams classic'", "source_tables": ["book", "publisher"]}, "evidence": "\"Hitchhiker's Guide To The Galaxy: The Filming of the Douglas Adams classic\" is the title of the book; publisher refers to publisher_name"}
{"sample_id": 5918, "db_id": "books", "final": {"question": "Among the books published by publisher \"Thomas Nelson\", how many of them have over 300 pages?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Thomas Nelson' AND T1.num_pages > 300", "source_tables": ["book", "publisher"]}, "evidence": "\"Thomas Nelson\" is the publisher_name; books with over 300 pages refers to num_pages > 300"}
{"sample_id": 6031, "db_id": "books", "final": {"question": "In which cities are the customers of Costa Rica located?", "sql": "SELECT T1.city FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T2.country_name = 'Costa Rica'", "source_tables": ["address", "country"]}, "evidence": "\"Costa Rica\" is the country_name"}
{"sample_id": 6029, "db_id": "books", "final": {"question": "How many books were ordered in the last month of the year 2020?", "sql": "SELECT COUNT(*) FROM cust_order WHERE order_date LIKE '2020-12%'", "source_tables": ["cust_order"]}, "evidence": "ordered in last month of the year 2020 refers to Substr(order_date, 1, 7) = '2020-12'"}
{"sample_id": 6089, "db_id": "books", "final": {"question": "List the title of books published by AK Press.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'AK Press'", "source_tables": ["book", "publisher"]}, "evidence": "\"AK Press\" is the publisher_name"}
{"sample_id": 5983, "db_id": "books", "final": {"question": "Sum the total price of the orders for The Prophet book.", "sql": "SELECT SUM(T1.price) FROM order_line AS T1 INNER JOIN book AS T2 ON T1.book_id = T2.book_id WHERE T2.title = 'The Prophet'", "source_tables": ["book", "order_line"]}, "evidence": "\"The Prophet\" is the title of the book: total price refers to Sum(price)"}
{"sample_id": 6010, "db_id": "books", "final": {"question": "How many customers have an address that is located in the city of Villeneuve-la-Garenne?", "sql": "SELECT COUNT(address_id) FROM address WHERE city = 'Villeneuve-la-Garenne'", "source_tables": ["address"]}, "evidence": "\"Villeneuve-la-Garenne\" is the city"}
{"sample_id": 5976, "db_id": "books", "final": {"question": "Which books were released by Orson Scott Card in 2001?", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Orson Scott Card' AND STRFTIME('%Y', T1.publication_date) = '2001'", "source_tables": ["book_author", "book", "author"]}, "evidence": "\"Orson Scott Card\" is the author_name; released in 2001 refers to publication_date LIKE '2001%'; books refers to title"}
{"sample_id": 6024, "db_id": "books", "final": {"question": "What are the names of all the publishers who have published at least 30 books?", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id GROUP BY T2.publisher_name HAVING COUNT(T2.publisher_name) >= 30", "source_tables": ["book", "publisher"]}, "evidence": "published at least 30 books refers to Count(book_id) > = 30"}
{"sample_id": 6027, "db_id": "books", "final": {"question": "Indicate the ISBN13 of all the books that have less than 140 pages and more than 135.", "sql": "SELECT isbn13 FROM book WHERE num_pages < 140 AND num_pages > 135", "source_tables": ["book"]}, "evidence": "ISBN13 refers to isbn13; less than 140 pages and more than 135 refers to num_pages > 135 AND num_pages < 140;"}
{"sample_id": 6045, "db_id": "books", "final": {"question": "Provide the full name of the customers who have ordered the book The Sorrows of Young Werther.", "sql": "SELECT T4.first_name, T4.last_name FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T1.title = 'The Sorrows of Young Werther'", "source_tables": ["customer", "book", "cust_order", "order_line"]}, "evidence": "full name refers to first_name, last_name; 'The Sorrows of Young Werther' is the title of the book"}
{"sample_id": 6091, "db_id": "books", "final": {"question": "List down the ISBN of the books purchased by the customer with an email of fsier3e@ihg.com.", "sql": "SELECT T1.isbn13 FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.email = 'fsier3e@ihg.com'", "source_tables": ["customer", "book", "cust_order", "order_line"]}, "evidence": "\"fsier3e@ihg.com\" is the email of customer; ISBN refers to isbn13"}
{"sample_id": 6009, "db_id": "books", "final": {"question": "Other than zero, what is the lowest price paid by a customer for an order?", "sql": "SELECT MIN(price) FROM order_line WHERE price <> 0", "source_tables": ["order_line"]}, "evidence": "other than 0 refers to price ! = 0; lowest price paid refers to Min(price)"}
{"sample_id": 5949, "db_id": "books", "final": {"question": "How many orders did Antonia Poltun return?", "sql": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T1.status_value = 'Returned' AND T4.first_name = 'Antonia' AND T4.last_name = 'Poltun'", "source_tables": ["customer", "order_status", "cust_order", "order_history"]}, "evidence": "order returned refers to status_value = 'Returned'"}
{"sample_id": 6100, "db_id": "books", "final": {"question": "What is the title of the book in the order ID 931?", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T2.order_id = 931", "source_tables": ["book", "order_line"]}, "evidence": ""}
{"sample_id": 6079, "db_id": "books", "final": {"question": "What is the average of English books among all books published by Carole Marsh Mysteries?", "sql": "SELECT CAST(SUM(CASE WHEN T1.language_name = 'English' THEN 1 ELSE 0 END) AS REAL) / COUNT(*) FROM book_language AS T1 INNER JOIN book AS T2 ON T1.language_id = T2.language_id INNER JOIN publisher AS T3 ON T3.publisher_id = T2.publisher_id WHERE T3.publisher_name = 'Carole Marsh Mysteries'", "source_tables": ["book", "book_language", "publisher"]}, "evidence": "English book refers to language_name = 'English'; 'Carole Marsh Mysteries' is the publisher_name; average = Divide (Count(language_name = 'English'), Count(book_id))"}
{"sample_id": 6065, "db_id": "books", "final": {"question": "List all books published by ADV Manga.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'ADV Manga'", "source_tables": ["book", "publisher"]}, "evidence": "\"ADV Manga\" is the publisher_name; books refers to title"}
{"sample_id": 5922, "db_id": "books", "final": {"question": "What is the cheapest order price of the book \"The Little House\"?", "sql": "SELECT MIN(T2.price) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'The Little House'", "source_tables": ["book", "order_line"]}, "evidence": "\"The Little House\" is the title of book; cheapest order price refers to Min(price)"}
{"sample_id": 5923, "db_id": "books", "final": {"question": "Please list the titles of all the books that Lucas Wyldbore has ordered.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Lucas' AND T4.last_name = 'Wyldbore'", "source_tables": ["customer", "book", "cust_order", "order_line"]}, "evidence": ""}
{"sample_id": 6192, "db_id": "food_inspection_2", "final": {"question": "Tell the address of employee who did inspection ID 52238?", "sql": "SELECT T1.address FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 52238", "source_tables": ["employee", "inspection"]}, "evidence": ""}
{"sample_id": 6241, "db_id": "food_inspection_2", "final": {"question": "How many grocery stores paid $250 fine upon their inspection?", "sql": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T1.facility_type = 'Grocery Store' AND T3.fine = 250", "source_tables": ["inspection", "violation", "establishment"]}, "evidence": "grocery store refers to facility_type = 'Grocery Store'; $250 fine refers to fine = 250"}
{"sample_id": 6247, "db_id": "food_inspection_2", "final": {"question": "Among the establishments that failed the inspection in February 2010, list the names of the employees with a salary greater than 70% of the average salary of all employees.", "sql": "SELECT DISTINCT T1.employee_id FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.results = 'Fail' AND strftime('%Y-%m', T2.inspection_date) = '2010-02' AND T1.salary > 0.7 * ( SELECT AVG(salary) FROM employee )", "source_tables": ["employee", "inspection"]}, "evidence": "failed the inspection refers to results = 'Fail'; in January 2010 refers to inspection_date like '2010-01%'; name of employee refers to first_name, last_name; a salary greater than 70% of the average salary refers to salary > multiply(avg(salary), 0.7)"}
{"sample_id": 6180, "db_id": "food_inspection_2", "final": {"question": "Compare the number of inspections under toxic items and no-smoking regulations.", "sql": "SELECT COUNT(CASE WHEN T2.category = 'Toxic Items' THEN T1.inspection_id END) AS Tox_nums , COUNT(CASE WHEN T2.category = 'No Smoking Regulations' THEN T1.inspection_id END) AS NosmoNums FROM violation AS T1 INNER JOIN inspection_point AS T2 ON T1.point_id = T2.point_id", "source_tables": ["inspection_point", "violation"]}, "evidence": "under toxic items refers to category = 'Toxic Items'; no-smoking regulations refers to category = 'No Smoking Regulations'"}
{"sample_id": 6245, "db_id": "food_inspection_2", "final": {"question": "What is the establishment's name with an inspection category of No Smoking Regulations?", "sql": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id INNER JOIN inspection_point AS T4 ON T3.point_id = T4.point_id WHERE T4.category = 'No Smoking Regulations'", "source_tables": ["inspection_point", "inspection", "violation", "establishment"]}, "evidence": "establishment's name refers to dba_name; an inspection category of No Smoking Regulations refers to category = 'No Smoking Regulations'"}
{"sample_id": 6216, "db_id": "food_inspection_2", "final": {"question": "How many inspection points with serious point level that have no fine?", "sql": "SELECT COUNT(DISTINCT T2.point_id) FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.point_level = 'Serious ' AND T2.fine = 0", "source_tables": ["violation", "inspection_point"]}, "evidence": "serious point level refers to point_level = 'Serious '; have no fine refers to fine = 0"}
{"sample_id": 6183, "db_id": "food_inspection_2", "final": {"question": "How many inspections were done under the display of inspection report summary category?", "sql": "SELECT COUNT(T2.inspection_id) FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.category = 'Display of Inspection Report Summary'", "source_tables": ["violation", "inspection_point"]}, "evidence": "under the display of inspection report summary category refers to category = 'Display of Inspection Report Summary'"}
{"sample_id": 6168, "db_id": "food_inspection_2", "final": {"question": "Provide the fine paid and the complete address of the establishment with inspection ID 48216.", "sql": "SELECT DISTINCT T3.fine, T1.state, T1.city, T1.address FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T2.inspection_id = 48216", "source_tables": ["inspection", "violation", "establishment"]}, "evidence": "complete address refers to state, city, address"}
{"sample_id": 6162, "db_id": "food_inspection_2", "final": {"question": "What is the employee's full name involved in the canvass inspection type on March 09, 2010?", "sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_date = '2010-03-09' AND T2.inspection_type = 'Canvass'", "source_tables": ["employee", "inspection"]}, "evidence": "full name refers to first_name, last_name; canvass inspection type refers to inspection_type = 'Canvass'; on March 09, 2010 refers to inspection_date = '2010-03-09'"}
{"sample_id": 6224, "db_id": "food_inspection_2", "final": {"question": "Where in Chicago does the restaurant named \"Old Timers Rest & Lounge\" located?", "sql": "SELECT address FROM establishment WHERE city = 'CHICAGO' AND dba_name = 'OLD TIMERS REST & LOUNGE' AND facility_type = 'Restaurant'", "source_tables": ["establishment"]}, "evidence": "in Chicago refers to city = 'CHICAGO'; restaurant refers to facility_type = 'Restaurant'; \"Old Timers Rest & Lounge\" refers to dba_name = 'OLD TIMERS REST & LOUNGE'; location refers to address"}
{"sample_id": 6214, "db_id": "food_inspection_2", "final": {"question": "Which establishments did Bob Benson inspect in 2010 and what was the results?", "sql": "SELECT DISTINCT T3.dba_name, T2.results FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T1.first_name = 'Bob' AND T1.last_name = 'Benson' AND strftime('%Y', T2.inspection_date) = '2010'", "source_tables": ["establishment", "employee", "inspection"]}, "evidence": "establishment name refers to dba_name; in 2010 refers to inspection_date like '2010%'"}
{"sample_id": 6196, "db_id": "food_inspection_2", "final": {"question": "List down the phone numbers of employees who did Canvass inspection.", "sql": "SELECT DISTINCT T1.phone FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_type = 'Canvass'", "source_tables": ["employee", "inspection"]}, "evidence": "phone number refers to phone; Canvass inspection refers to inspection_type = 'Canvass'"}
{"sample_id": 6178, "db_id": "food_inspection_2", "final": {"question": "How many inspections were done under the personnel category?", "sql": "SELECT COUNT(T1.inspection_id) FROM violation AS T1 INNER JOIN inspection_point AS T2 ON T1.point_id = T2.point_id WHERE T2.category = 'Personnel'", "source_tables": ["inspection_point", "violation"]}, "evidence": "under the personnel category refers to category = 'Personnel'"}
{"sample_id": 6141, "db_id": "food_inspection_2", "final": {"question": "What is the full name of the employee with the lowest salary?", "sql": "SELECT first_name, last_name FROM employee ORDER BY salary ASC LIMIT 1", "source_tables": ["employee"]}, "evidence": "full name refers to first_name, last_name; the lowest salary refers to min(salary)"}
{"sample_id": 6228, "db_id": "food_inspection_2", "final": {"question": "Provide the last name of the employee involved in the inspection ID 52256.", "sql": "SELECT DISTINCT T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 52256", "source_tables": ["employee", "inspection"]}, "evidence": ""}
{"sample_id": 6154, "db_id": "food_inspection_2", "final": {"question": "How much is the total fine given to Ron of Japan Inc in its inspection done on February 2014?", "sql": "SELECT SUM(T3.fine) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE strftime('%Y-%m', T2.inspection_date) = '2014-02' AND T1.dba_name = 'RON OF JAPAN INC'", "source_tables": ["inspection", "violation", "establishment"]}, "evidence": "total fine = sum(fine); Ron of Japan Inc refers to dba_name = 'RON OF JAPAN INC'; on February 2014 refers to inspection_date like '2014-02%'"}
{"sample_id": 6167, "db_id": "food_inspection_2", "final": {"question": "How many of the restaurants with the lowest risk level failed the complaint inspection type?", "sql": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = '1' AND T2.inspection_type = 'Complaint' AND T1.facility_type = 'Restaurant' AND T2.results = 'Fail'", "source_tables": ["inspection", "establishment"]}, "evidence": "restaurant refers to facility_type = 'Restaurant'; the lowest risk level refers to min(risk_level); failed refers to results = 'Fail'; the complaint inspection type refers to inspection_type = 'Complaint'"}
{"sample_id": 6118, "db_id": "food_inspection_2", "final": {"question": "Please list the assumed name of all the facilities that failed an inspection in 2010.", "sql": "SELECT DISTINCT T2.dba_name FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE T1.results = 'Fail' AND strftime('%Y', T1.inspection_date) = '2010'", "source_tables": ["inspection", "establishment"]}, "evidence": "assumed name refers to dba_name; failed an inspection refers to results = 'Fail'; in 2010 refers to inspection_date like '2010%'"}
{"sample_id": 6158, "db_id": "food_inspection_2", "final": {"question": "Which business had the highest number of inspections done? Calculate the percentage of passed and failed inspections of the said business.", "sql": "SELECT T2.dba_name , CAST(SUM(CASE WHEN T1.results = 'Pass' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.inspection_id) AS percentagePassed , CAST(SUM(CASE WHEN T1.results = 'Fail' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.inspection_id) FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no GROUP BY T2.dba_name ORDER BY COUNT(T1.license_no) DESC LIMIT 1", "source_tables": ["inspection", "establishment"]}, "evidence": "business name refers to dba_name; the highest number of inspections done max(count(inspection_id)); percentage of passed inspections = divide(sum(inspection_id where results = 'Pass'), total(inspection_id)) * 100%; percentage of failed inspections = divide(sum(inspection_id where results = 'Fail'), total(inspection_id)) * 100%"}
{"sample_id": 6160, "db_id": "food_inspection_2", "final": {"question": "What is the establishment's name and employee involved in the inspection ID 44256 on May 5, 2010?", "sql": "SELECT T1.dba_name, T3.first_name, T3.last_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T2.inspection_date = '2010-05-05' AND T2.inspection_id = 44256", "source_tables": ["inspection", "establishment", "employee"]}, "evidence": "establishment's name refers to dba_name; employee name refers to first_name, last_name; inspection ID 44256 refers to inspection_id = 44256; on May 5, 2010 refers to inspection_date = '2010-05-05'"}
{"sample_id": 6201, "db_id": "food_inspection_2", "final": {"question": "How many inspections done in 2010 had serious food safety issue?", "sql": "SELECT COUNT(T2.inspection_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y', T2.inspection_date) = '2010' AND T1.risk_level = 3", "source_tables": ["inspection", "establishment"]}, "evidence": "in 2010 refers to inspection_date like '2010%'; had serious food safety issue refers to risk_level = 3"}
{"sample_id": 6205, "db_id": "food_inspection_2", "final": {"question": "Did license number 1222441 pass the inspection and what is the zip code number of it?", "sql": "SELECT DISTINCT T2.results, T1.zip FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.license_no = 1222441", "source_tables": ["inspection", "establishment"]}, "evidence": "license number 1222441 refers to license_no = 1222441; result of the inspection refers to results; zip code number refers to zip"}
{"sample_id": 6137, "db_id": "food_inspection_2", "final": {"question": "What is the average number of inspections did risk level 3 taverns have?", "sql": "SELECT CAST(COUNT(T2.inspection_id) AS REAL) / COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = 3 AND T1.facility_type = 'TAVERN'", "source_tables": ["inspection", "establishment"]}, "evidence": "risk level 3 refers to risk_level = '3'; tavern refers to facility_type = 'TAVERN'; average number = divide(count(inspection_id), sum(license_no)) where risk_level = '3' and facility_type = 'TAVERN'"}
{"sample_id": 6148, "db_id": "food_inspection_2", "final": {"question": "Out of all the short form complaint inspections done by David Hodges, how many businesses passed?", "sql": "SELECT COUNT(DISTINCT T2.license_no) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.first_name = 'David' AND T1.last_name = 'Hodges' AND T1.employee_id = 153225 AND T2.inspection_type = 'Short Form Complaint' AND T2.results = 'Pass'", "source_tables": ["employee", "inspection"]}, "evidence": "short form complaint inspection refers to inspection_type = 'Short Form Complaint'; pass refers to results = 'Pass'"}
{"sample_id": 6123, "db_id": "food_inspection_2", "final": {"question": "What is the average number of inspections carried out in the year 2010 by a sanitarian whose salary is over 70000?", "sql": "SELECT CAST(SUM(CASE WHEN T2.inspection_date LIKE '2010%' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.salary > 70000 THEN 1 ELSE 0 END) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id", "source_tables": ["employee", "inspection"]}, "evidence": "in the year 2010 refers to inspection_date like '2010%'; salary is over 70000 refers to salary > 70000; average number = divide(sum(inspection where inspection_date like '2010%'), sum(employee_id where salary > 70000))"}
{"sample_id": 6239, "db_id": "food_inspection_2", "final": {"question": "Provide the salary range of the employee involved in the inspection ID 58424.", "sql": "SELECT T1.salary, T3.salary FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN employee AS T3 WHERE T2.inspection_id = 58424 ORDER BY T1.salary, T3.salary DESC LIMIT 1", "source_tables": ["employee", "inspection"]}, "evidence": ""}
{"sample_id": 6125, "db_id": "food_inspection_2", "final": {"question": "Which employee was responsible for inspection no.48224? Give the full name.", "sql": "SELECT T2.first_name, T2.last_name FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T1.inspection_id = 48224", "source_tables": ["inspection", "employee"]}, "evidence": "inspection no.48224 refers to inspection_id = '48224'; full name refers to first_name, last_name;"}
{"sample_id": 6296, "db_id": "coinmarketcap", "final": {"question": "What's the percentage of coins that is higher than the price 1 hour ago in May 29,2013? List the names of these coins.", "sql": "SELECT T1.NAME FROM coins AS T1 INNER JOIN historical AS T2 ON T1.ID = T2.coin_id WHERE T2.DATE = '2013-05-29' AND T2.percent_change_1h > 0", "source_tables": ["historical", "coins"]}, "evidence": "percentage that is higher than the price 1 hour ago refers to percent_change_1h>0; in May 29,2013 refers to date = '2013-05-29'"}
{"sample_id": 6289, "db_id": "coinmarketcap", "final": {"question": "When did Peercoin rank fifth?", "sql": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Peercoin' AND T2.cmc_rank = 5", "source_tables": ["historical", "coins"]}, "evidence": "when refers to date; rank fifth refers to cmc_rank = 5"}
{"sample_id": 6282, "db_id": "coinmarketcap", "final": {"question": "Name the coins that have three tags.", "sql": "SELECT name FROM coins WHERE LENGTH(tag_names) - LENGTH(replace(tag_names, ',', '')) = 2", "source_tables": ["coins"]}, "evidence": "have three tags refers to length(tag_names)-length(replace(tag_names,',','')) = 2"}
{"sample_id": 6284, "db_id": "coinmarketcap", "final": {"question": "Please name the coin that ranked first among the coins traded on April 29, 2013.", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-29' AND T2.cmc_rank = 1", "source_tables": ["historical", "coins"]}, "evidence": "ranked first refers to cmc_rank = 1; on April 29, 2013 refers to date = '2013-04-29'"}
{"sample_id": 6271, "db_id": "coinmarketcap", "final": {"question": "Please list the names of the crytocurrencies that have a total amount of existence of over 10000000 on 2013/4/28.", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T2.total_supply > 10000000", "source_tables": ["historical", "coins"]}, "evidence": "a total amount of existence of over 10000000 refers to total_supply>10000000; on 2013/4/28 refers to date = '2013-04-28'"}
{"sample_id": 6270, "db_id": "coinmarketcap", "final": {"question": "Which crytocurrency was traded in the highest value on 2016/1/8?", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2016-01-08' AND T2.volume_24h = ( SELECT MAX(volume_24h) FROM historical WHERE date = '2016-01-08' )", "source_tables": ["historical", "coins"]}, "evidence": "traded in the highest value refers to max(volume_24h); on 2016/1/8 refers to date = '2016-01-08'"}
{"sample_id": 6249, "db_id": "coinmarketcap", "final": {"question": "Name the coin that has the highest market capitalization for all transactions in 2018.", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date LIKE '2018%' AND T2.market_cap = ( SELECT MAX(market_cap) FROM historical WHERE STRFTIME('%Y', date) = '2018' )", "source_tables": ["historical", "coins"]}, "evidence": "highest market capitalization refers to max(market_cap); in 2018 refers to year(date) = 2018"}
{"sample_id": 6272, "db_id": "coinmarketcap", "final": {"question": "Had Bitcoin's price increased or decreased on 2013/5/5 compared with the price 7 days before?", "sql": "SELECT (CASE WHEN T2.percent_change_7d > 0 THEN 'INCREASED' ELSE 'DECREASED' END) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-05-05' AND T1.name = 'Bitcoin'", "source_tables": ["historical", "coins"]}, "evidence": "price increased refers to percent_change_7d>0; decreased refers percent_change_7d<0; on 2013/5/5 refers to date = '2013-05-05'"}
{"sample_id": 6262, "db_id": "coinmarketcap", "final": {"question": "Name the coin that have higher than average percentage price changed from the previous 24 hours for transaction on 2013/6/22.", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2020-06-22' GROUP BY T1.name HAVING AVG(T2.percent_change_24h) > T2.PRICE", "source_tables": ["historical", "coins"]}, "evidence": "average percentage price changed from the previous 24 hours refers to AVG(percent_change_24h); on 15/5/2013 refers to DATE = '2013-04-15'"}
{"sample_id": 6521, "db_id": "retail_world", "final": {"question": "How many condiments were sold in 1997?", "sql": "SELECT COUNT(T2.ProductID) FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID INNER JOIN \"Order Details\" AS T3 ON T2.ProductID = T3.ProductID INNER JOIN Orders AS T4 ON T3.OrderID = T4.OrderID WHERE T1.CategoryName = 'Condiments' AND T1.CategoryID = 2 AND T4.OrderDate LIKE '1997%'", "source_tables": ["products", "order details", "categories", "orders"]}, "evidence": "\"Condiments\" is the CategoryName; in 1997 refers to year(OrderDate) = 1997;"}
{"sample_id": 6430, "db_id": "retail_world", "final": {"question": "What is the description of the category that tofu belongs to?", "sql": "SELECT T1.Description FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.ProductName = 'tofu'", "source_tables": ["products", "categories"]}, "evidence": "tofu is the name of the product;"}
{"sample_id": 6613, "db_id": "retail_world", "final": {"question": "Name the products where the suppliers come from Finland.", "sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Finland'", "source_tables": ["products", "suppliers"]}, "evidence": "'Finland' is a Country; product refers to ProductName; suppliers refers to SupplierID"}
{"sample_id": 6553, "db_id": "retail_world", "final": {"question": "Provide the products list which were ordered in 1996 by the company in Norway.", "sql": "SELECT T4.ProductName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN \"Order Details\" AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID WHERE T1.Country = 'Norway' AND STRFTIME('%Y', T2.OrderDate) = '1996'", "source_tables": ["customers", "products", "order details", "orders"]}, "evidence": "ordered in 1996 refers to year(OrderDate) = 1996; in Norway refers to Country = 'Norway'"}
{"sample_id": 6574, "db_id": "retail_world", "final": {"question": "Provide the full name of the employee who processed the sales order with ID 10274.", "sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10274", "source_tables": ["employees", "orders"]}, "evidence": "full name refers to FirstName, LastName; sales order with ID 10274 refers to OrderID = 10274"}
{"sample_id": 6461, "db_id": "retail_world", "final": {"question": "List down the customer ids who placed order with Michael Suyama.", "sql": "SELECT T2.CustomerID FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Michael' AND T1.LastName = 'Suyama'", "source_tables": ["employees", "orders"]}, "evidence": ""}
{"sample_id": 6608, "db_id": "retail_world", "final": {"question": "List all product names under Confections.", "sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.CategoryName = 'Confections'", "source_tables": ["products", "categories"]}, "evidence": "'Confections' is a CompanyName;"}
{"sample_id": 6516, "db_id": "retail_world", "final": {"question": "In August of 1996, how many orders were placed by the customer with the highest amount of orders?", "sql": "SELECT COUNT(OrderID) FROM Orders WHERE OrderDate LIKE '1996-08%' GROUP BY CustomerID ORDER BY COUNT(OrderID) DESC LIMIT 1", "source_tables": ["orders"]}, "evidence": "August of 1996 refers to OrderDate = '1996-8'; highest amount of orders refers to MAX(COUNT(OrderID))"}
{"sample_id": 6416, "db_id": "retail_world", "final": {"question": "Indicate the name of the categories to which the products of order number 10933 belong.", "sql": "SELECT T3.CategoryName FROM Products AS T1 INNER JOIN \"Order Details\" AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Categories AS T3 ON T1.CategoryID = T3.CategoryID WHERE T2.OrderID = 10933", "source_tables": ["products", "order details", "categories"]}, "evidence": "order number 10933 refers to OrderID = 10933;"}
{"sample_id": 6485, "db_id": "retail_world", "final": {"question": "Among the employees, give me the full names of those who have less than 4 territories.", "sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.EmployeeID < 4", "source_tables": ["employeeterritories", "employees"]}, "evidence": "less than 4 territories refers to EmployeeID where Count(TerritoryID) < 4"}
{"sample_id": 6371, "db_id": "retail_world", "final": {"question": "What is the name of the supplier that supplies the most products to the company?", "sql": "SELECT T1.SupplierID FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID GROUP BY T1.SupplierID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["products", "suppliers"]}, "evidence": "name of the supplier refers to SupplierID; the most product refers to max(count(ProductID))"}
{"sample_id": 6637, "db_id": "retail_world", "final": {"question": "What is the name of product with the ID of 77?", "sql": "SELECT ProductName FROM Products WHERE ProductID = 77", "source_tables": ["products"]}, "evidence": "name of product refers to ProductName; ID refers to ProductID"}
{"sample_id": 6395, "db_id": "retail_world", "final": {"question": "List the name of the top ten most ordered product's names in descending order of the number of orders.", "sql": "SELECT T3.ProductName FROM Orders AS T1 INNER JOIN \"Order Details\" AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID GROUP BY T3.ProductName ORDER BY COUNT(*) DESC LIMIT 10", "source_tables": ["products", "order details", "orders"]}, "evidence": "most ordered refers to max(COUNT(OrderID))"}
{"sample_id": 6799, "db_id": "retails", "final": {"question": "Please state the segment, the name, the address, and the phone number of customer number 3.", "sql": "SELECT c_mktsegment, c_name, c_address, c_phone FROM customer WHERE c_custkey = 3", "source_tables": ["customer"]}, "evidence": "segment refers to c_mktsegment; name refers to c_name; address refers to c_address; phone number refers to c_phone; customer number 3 refers to c_custkey = 3"}
{"sample_id": 6848, "db_id": "retails", "final": {"question": "List the comments describing orders from customers in the furniture segment.", "sql": "SELECT T1.o_comment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'FURNITURE'", "source_tables": ["customer", "orders"]}, "evidence": "comment refers to o_comment; furniture segment refers to c_mktsegment = 'FURNITURE'"}
{"sample_id": 6914, "db_id": "retails", "final": {"question": "How much is the discounted price of every item that customer 111511 ordered in order 53159? List the names of the parts of every item.", "sql": "SELECT T2.l_extendedprice * (1 - T2.l_discount), T3.p_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN part AS T3 ON T2.l_partkey = T3.p_partkey WHERE T1.o_custkey = 111511 AND T1.o_orderkey = 53159", "source_tables": ["lineitem", "part", "orders"]}, "evidence": "discounted price refers to multiply(l_extendedprice, subtract(1, l_discount)); customer 111511 refers to o_custkey = 111511; order 53159 refers to o_orderkey = 53159; name of the part refers to p_name"}
{"sample_id": 6836, "db_id": "retails", "final": {"question": "Which part and supplier have the most profit?", "sql": "SELECT T3.p_name, T4.s_name FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey INNER JOIN supplier AS T4 ON T1.ps_suppkey = T4.s_suppkey ORDER BY T2.l_extendedprice * (1 - T2.l_discount) - T1.ps_supplycost * T2.l_quantity DESC LIMIT 1", "source_tables": ["partsupp", "supplier", "lineitem", "part"]}, "evidence": "part refers to p_name; supplier refers to s_name; the most profit refers to max(subtract(multiply(l_extendedprice, subtract(1, l_discount)), multiply(ps_supplycost, l_quantity)))"}
{"sample_id": 6706, "db_id": "retails", "final": {"question": "How many customers are in debt?", "sql": "SELECT COUNT(c_custkey) FROM customer WHERE c_acctbal < 0", "source_tables": ["customer"]}, "evidence": "customers are in debt refer to c_custkey where c_acctbal < 0;"}
{"sample_id": 6681, "db_id": "retails", "final": {"question": "How many customers are in Brazil?", "sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'BRAZIL'", "source_tables": ["customer", "nation"]}, "evidence": "Brazil is the name of the nation which refers to n_name = 'BRAZIL'"}
{"sample_id": 6825, "db_id": "retails", "final": {"question": "What is the supply cost for the part \"violet olive rose ivory sandy\"?", "sql": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_name = 'violet olive rose ivory sandy'", "source_tables": ["partsupp", "part"]}, "evidence": "supply cost refers to ps_supplycost; part \"violet olive rose ivory sandy\" refers to p_name = 'violet olive rose ivory sandy'"}
{"sample_id": 6789, "db_id": "retails", "final": {"question": "Lists all parts supplied by Supplier#000000034.", "sql": "SELECT T3.p_name FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T2.s_name = 'Supplier#000000034'", "source_tables": ["partsupp", "supplier", "part"]}, "evidence": "part refers to p_name; Supplier#000000034 refers to s_name = 'Supplier#000000034'"}
{"sample_id": 6810, "db_id": "retails", "final": {"question": "Please list any two parts that come with the wrap bag container and have a supply cost of under 10.", "sql": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T2.ps_supplycost < 10 AND T1.p_container = 'WRAP BAG' LIMIT 2", "source_tables": ["partsupp", "part"]}, "evidence": "part name refers to p_name; wrap bag container refers to p_container = 'WRAP BAG'; supply cost of under 10 refers to ps_supplycost < 10"}
{"sample_id": 6887, "db_id": "retails", "final": {"question": "On which date was the part \"burnished seashell gainsboro navajo chocolate\" in order no.1 shipped?", "sql": "SELECT T1.l_shipdate FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T1.l_orderkey = 1 AND T2.p_name = 'burnished seashell gainsboro navajo chocolate'", "source_tables": ["lineitem", "part"]}, "evidence": "date refers to l_shipdate; part \"burnished seashell gainsboro navajo chocolate\" refers to p_name = 'burnished seashell gainsboro navajo chocolate'; order no.1 refers to l_orderkey = 1"}
{"sample_id": 6850, "db_id": "retails", "final": {"question": "Name customers in India with account balances over $5000.", "sql": "SELECT T1.c_name FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal > 5000 AND T2.n_name = 'INDIA'", "source_tables": ["customer", "nation"]}, "evidence": "customer name refers to c_name; India refers to n_name = 'INDIA'; account balance over $5000 refers to c_acctbal > 5000"}
{"sample_id": 6680, "db_id": "retails", "final": {"question": "Among the orders made by customers in the household segment, how many of them are urgent?", "sql": "SELECT COUNT(T1.o_orderpriority) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD' AND T1.o_orderpriority = '1-URGENT'", "source_tables": ["customer", "orders"]}, "evidence": "orders in household segment refer to o_orderkey where c_mktsegment = 'HOUSEHOLD'; the order is urgent if o_orderpriority = '1-URGENT' ;"}
{"sample_id": 6786, "db_id": "retails", "final": {"question": "How many items shipped by REG AIR were ordered on March 22, 1995?", "sql": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'REG AIR' AND T1.o_orderdate = '1995-03-22'", "source_tables": ["lineitem", "orders"]}, "evidence": "items shipped by REG AIR refer to l_linenumber where l_shipmode = 'REG AIR'; ordered on March 22, 1995 refers to o_orderdate = '1995-03-22';"}
{"sample_id": 6864, "db_id": "retails", "final": {"question": "How many parts have a jumbo case container?", "sql": "SELECT COUNT(p_partkey) FROM part WHERE p_container = 'JUMBO CASE'", "source_tables": ["part"]}, "evidence": "jumbo case container refers to p_container = 'JUMBO CASE'"}
{"sample_id": 6779, "db_id": "retails", "final": {"question": "Calculate the difference in the average number of low-priority orders shipped by truck in each month of 1995 and 1996.", "sql": "SELECT (CAST(SUM(IIF(STRFTIME('%Y', T2.l_shipdate) = 1995, 1, 0)) AS REAL) / 12) - (CAST(SUM(IIF(STRFTIME('%Y', T2.l_shipdate) = 1996, 1, 0)) AS REAL) / 12) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderpriority = '5-LOW' AND T2.l_shipmode = 'TRUCK'", "source_tables": ["lineitem", "orders"]}, "evidence": "SUBTRACT(DIVIDE(SUM(l_orderkey where year(l_shipdate) = 1995), 12), DIVIDE(SUM(l_orderkey where year(l_shipdate) = 1996), 12)) where o_orderpriority = '5-LOW';"}
{"sample_id": 6736, "db_id": "retails", "final": {"question": "Calculate the total profit made by chocolate floral blue coral cyan.", "sql": "SELECT SUM(T3.l_extendedprice * (1 - T3.l_discount) - T2.ps_supplycost * T3.l_quantity) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN lineitem AS T3 ON T2.ps_partkey = T3.l_partkey AND T2.ps_suppkey = T3.l_suppkey WHERE T1.p_name = 'chocolate floral blue coral cyan'", "source_tables": ["partsupp", "part", "lineitem"]}, "evidence": "SUBTRACT(MULTIPLY(l_extendedprice, (SUBTRACT(1, l_discount)), MULTIPLY(ps_supplycost, l_quantity))) where p_name = 'chocolate floral blue coral cyan';"}
{"sample_id": 6677, "db_id": "retails", "final": {"question": "Please list the order comments of all the orders made by customers in the household segment.", "sql": "SELECT T1.o_comment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD'", "source_tables": ["customer", "orders"]}, "evidence": "orders in household segment refer to o_orderkey where c_mktsegment = 'HOUSEHOLD'; order comments refer to o_comment;"}
{"sample_id": 6871, "db_id": "retails", "final": {"question": "What is the name of the supplier that provides the part \"hot spring dodger dim light\" with the lowest supply cost?", "sql": "SELECT T2.s_name FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_name = 'hot spring dodger dim light' ORDER BY T1.ps_supplycost LIMIT 1", "source_tables": ["partsupp", "supplier", "part"]}, "evidence": "supplier name refers to s_name; part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'; the lowest supply cost refers to min(ps_supplycost)"}
{"sample_id": 6764, "db_id": "retails", "final": {"question": "Find and list the part key of the parts which has an above-average retail price.", "sql": "SELECT p_partkey FROM part WHERE p_retailprice > ( SELECT AVG(p_retailprice) FROM part )", "source_tables": ["part"]}, "evidence": "part key of the parts which has an above-average retail price refer to p_partkey where p_retailprice > AVG(p_retailprice);"}
{"sample_id": 6743, "db_id": "retails", "final": {"question": "How many of the line items have been shipped by rail with a quantity less than 30?", "sql": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_quantity < 30 AND l_shipmode = 'RAIL'", "source_tables": ["lineitem"]}, "evidence": "shipped by rail refers to l_shipmode = 'RAIL'; quantity less than 30 refers to l_quantity < 30;"}
{"sample_id": 6856, "db_id": "retails", "final": {"question": "Calculate percentage of household segment in Indonesia.", "sql": "SELECT CAST(SUM(IIF(T1.c_mktsegment = 'HOUSEHOLD', 1, 0)) AS REAL) * 100 / COUNT(T1.c_mktsegment) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'INDONESIA'", "source_tables": ["customer", "nation"]}, "evidence": "household segment refers to c_mktsegment = 'HOUSEHOLD'; Indonesia refers to n_name = 'Indonesia'; percentage = divide(count(c_mktsegment = 'HOUSEHOLD'), count(c_mktsegment)) where n_name = 'Indonesia' * 100%"}
{"sample_id": 6907, "db_id": "retails", "final": {"question": "What are the top 2 countries with the highest number of indebted suppliers?", "sql": "SELECT T.n_name FROM ( SELECT T2.n_name, SUM(T1.s_acctbal) AS num FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 GROUP BY T1.s_nationkey ) AS T ORDER BY T.num LIMIT 2", "source_tables": ["supplier", "nation"]}, "evidence": "country refers to c_name; highest number of indebted refers to max(sum(acctbal)) where s_acctbal < 0"}
{"sample_id": 6682, "db_id": "retails", "final": {"question": "Please list the phone numbers of all the customers in the household segment and are in Brazil.", "sql": "SELECT T1.c_phone FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'HOUSEHOLD' AND T2.n_name = 'BRAZIL'", "source_tables": ["customer", "nation"]}, "evidence": "phone numbers refer to c_phone; Brazil is the name of the nation which refers to n_name = 'BRAZIL'; household segment refers to c_mktsegment = 'HOUSEHOLD';"}
{"sample_id": 6762, "db_id": "retails", "final": {"question": "What is the average number of items shipped each day in April of 1994?", "sql": "SELECT AVG(l_linenumber) FROM lineitem WHERE l_shipdate BETWEEN '1994-01-01' AND '1994-01-30'", "source_tables": ["lineitem"]}, "evidence": "AVG(l_linenumber) where l_shipdate between '1994-01-01' and '1994-01-30';"}
{"sample_id": 6671, "db_id": "retails", "final": {"question": "When was the latest date the items of order no.1 were shipped?", "sql": "SELECT MAX(l_shipdate) FROM lineitem WHERE l_orderkey = 1", "source_tables": ["lineitem"]}, "evidence": "order no.1 refers to l_orderkey = 1; the latest date shipped refers to MAX(l_shipdate);"}
{"sample_id": 6780, "db_id": "retails", "final": {"question": "List by their id all customers who have a debit balance in their accounts.", "sql": "SELECT c_custkey FROM customer WHERE c_acctbal < 0", "source_tables": ["customer"]}, "evidence": "customers who have a debt balance refer to c_custkey where c_acctbal < 0;"}
{"sample_id": 6881, "db_id": "retails", "final": {"question": "Please list the order keys of all the orders that have more than 2 parts with a jumbo case container.", "sql": "SELECT T.l_orderkey FROM ( SELECT T2.l_orderkey, COUNT(T2.l_partkey) AS num FROM part AS T1 INNER JOIN lineitem AS T2 ON T1.p_partkey = T2.l_partkey WHERE T1.p_container = 'JUMBO CASE' GROUP BY T2.l_orderkey ) AS T WHERE T.num > 2", "source_tables": ["part", "lineitem"]}, "evidence": "order key refers to l_orderkey; jumbo case container refers to p_container = 'JUMBO CASE'; more than 2 parts refers to count(l_partkey) > 2"}
{"sample_id": 6748, "db_id": "retails", "final": {"question": "Among the customers from Brazil, how many customers are in automobile market segment?", "sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'AUTOMOBILE' AND T2.n_name = 'BRAZIL'", "source_tables": ["customer", "nation"]}, "evidence": "customers refer to c_custkey; Brazil is the name of the nation which refers to n_name = 'BRAZIL'; c_mktsegment = 'automobile';"}
{"sample_id": 6689, "db_id": "retails", "final": {"question": "How many countries are there in the No.2 region?", "sql": "SELECT COUNT(n_nationkey) FROM nation WHERE n_regionkey = 2", "source_tables": ["nation"]}, "evidence": "No.2 region refers to n_regionkey = 2;"}
{"sample_id": 6674, "db_id": "retails", "final": {"question": "What is the phone number of Customer#000000001?", "sql": "SELECT c_phone FROM customer WHERE c_name = 'Customer#000000001'", "source_tables": ["customer"]}, "evidence": "customer phone refers to c_phone; Customer#000000001 refers to c_name;"}
{"sample_id": 6738, "db_id": "retails", "final": {"question": "List the suppliers' names which supplied smoke red pale saddle plum.", "sql": "SELECT T3.s_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_name = 'smoke red pale saddle plum'", "source_tables": ["partsupp", "part", "supplier"]}, "evidence": "p_name = 'smoke red pale saddle plum'; the suppliers' names refer to s_name;"}
{"sample_id": 6721, "db_id": "retails", "final": {"question": "How much is the profit for smoke turquoise purple blue salmon that was delivered in person on 5/7/1996?", "sql": "SELECT T1.l_extendedprice * (1 - T1.l_discount) - T2.ps_supplycost * T1.l_quantity AS num FROM lineitem AS T1 INNER JOIN partsupp AS T2 ON T1.l_suppkey = T2.ps_suppkey INNER JOIN part AS T3 ON T2.ps_partkey = T3.p_partkey WHERE T1.l_receiptdate = '1996-05-07' AND T1.l_shipinstruct = 'DELIVER IN PERSON' AND T3.p_name = 'smoke turquoise purple blue salmon'", "source_tables": ["partsupp", "lineitem", "part"]}, "evidence": "SUBTRACT(MULTIPLY(l_extendedprice, (SUBTRACT(1, l_discount)), MULTIPLY(ps_supplycost, l_quantity))) where p_name = 'smoke turquoise purple blue salmon' and l_receiptdate = '1996-05-07' and l_shipinstruct = 'DELIVER IN PERSON';"}
{"sample_id": 6790, "db_id": "retails", "final": {"question": "What are the cost prices of large burnished copper?", "sql": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_type = 'LARGE BURNISHED COPPER'", "source_tables": ["partsupp", "part"]}, "evidence": "cost price refers to ps_supplycost; large burnished copper refers to p_type = 'LARGE BURNISHED COPPER'"}
{"sample_id": 6768, "db_id": "retails", "final": {"question": "List the name and phone number of customers in India who have an above-average account balance.", "sql": "SELECT T1.c_name, T1.c_phone FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal > ( SELECT AVG(c_acctbal) FROM customer ) ORDER BY T1.c_name", "source_tables": ["customer", "nation"]}, "evidence": "name of customer refers to c_name; phone number of customer refers to c_phone; customers in India who have an above-average account balance refer to n_name = 'INDIA' and c_acctbal > AVG(c_acctbal);"}
{"sample_id": 6812, "db_id": "retails", "final": {"question": "What are the countries that belong to Africa?", "sql": "SELECT T2.n_name FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey WHERE T1.r_name = 'Africa'", "source_tables": ["region", "nation"]}, "evidence": "country is nation name which refers to n_name; Africa is region name refers to r_name = 'Africa'"}
{"sample_id": 6891, "db_id": "retails", "final": {"question": "Please list all the modes of shipping for the part \"burnished seashell gainsboro navajo chocolate\".", "sql": "SELECT DISTINCT T1.l_shipmode FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name = 'burnished seashell gainsboro navajo chocolate'", "source_tables": ["lineitem", "part"]}, "evidence": "mode of shipping refers to l_shipmode; part \"burnished seashell gainsboro navajo chocolate\" refers to p_name = 'burnished seashell gainsboro navajo chocolate'"}
{"sample_id": 6801, "db_id": "retails", "final": {"question": "How many of the line items that have a quantity greater than 40 have been shipped by air?", "sql": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_quantity > 40 AND l_shipmode = 'AIR'", "source_tables": ["lineitem"]}, "evidence": "quantity greater than 40 refers to l_quantity > 40; shipped by air refers to l_shipmode = 'AIR'"}
{"sample_id": 6823, "db_id": "retails", "final": {"question": "How many part supplies are close to being out of stock?", "sql": "SELECT COUNT(ps_suppkey) FROM partsupp WHERE ps_availqty < 10", "source_tables": ["partsupp"]}, "evidence": "close to being out of stock refers to ps_availqty < 10"}
{"sample_id": 6806, "db_id": "retails", "final": {"question": "What is the discounted price of line item number 1?", "sql": "SELECT l_extendedprice * (1 - l_discount) FROM lineitem WHERE l_linenumber = 1", "source_tables": ["lineitem"]}, "evidence": "discounted price refers to multiply(l_extendedprice, subtract(1, l_discount)); line item number 1 refers to l_linenumber = 1"}
{"sample_id": 6778, "db_id": "retails", "final": {"question": "Among the suppliers in the European region, what percentage have a below-average account balance?", "sql": "SELECT CAST(SUM(IIF(T3.s_acctbal < ( SELECT AVG(supplier.s_acctbal) FROM supplier ), 1, 0)) AS REAL) * 100 / COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey INNER JOIN supplier AS T3 ON T1.n_nationkey = T3.s_nationkey WHERE T2.r_name = 'EUROPE'", "source_tables": ["region", "supplier", "nation"]}, "evidence": "DIVIDE(COUNT(s_acctbal < AVG(s_acctbal)), COUNT(s_suppkey)) as percentage where r_name = 'EUROPE';"}
{"sample_id": 6678, "db_id": "retails", "final": {"question": "Please give the name of the customer who has made the single order with the highest total price.", "sql": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey ORDER BY T1.o_totalprice DESC LIMIT 1", "source_tables": ["customer", "orders"]}, "evidence": "name of the customer refers to c_name; single order with the highest total price refers to MAX(o_totalprice) LIMIT 1;"}
{"sample_id": 6837, "db_id": "retails", "final": {"question": "What proportion of suppliers are from Asia?", "sql": "SELECT CAST(SUM(IIF(T1.r_name = 'ASIA', 1, 0)) AS REAL) * 100 / COUNT(T1.r_regionkey) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey INNER JOIN supplier AS T3 ON T2.n_nationkey = T3.s_nationkey", "source_tables": ["region", "supplier", "nation"]}, "evidence": "Asia refers to r_name = 'ASIA'; proportion = divide(count(s_name where r_name = 'ASIA'), count(s_name)) * 100%"}
{"sample_id": 6673, "db_id": "retails", "final": {"question": "What is the comment of the order with the highest total price?", "sql": "SELECT o_comment FROM orders WHERE o_totalprice = ( SELECT MAX(o_totalprice) FROM orders )", "source_tables": ["orders"]}, "evidence": "the highest total price refers to MAX(o_totalprice); comment of the order refers to o_comment;"}
{"sample_id": 6684, "db_id": "retails", "final": {"question": "How many orders in total are made by customers in Germany?", "sql": "SELECT COUNT(T2.c_custkey) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY'", "source_tables": ["customer", "nation", "orders"]}, "evidence": "orders refer to o_orderkey; Germany is the name of the nation which refers to n_name = 'GERMANY';"}
{"sample_id": 6889, "db_id": "retails", "final": {"question": "Which part is ordered in a bigger amount in order no.1, \"burnished seashell gainsboro navajo chocolate\" or \"salmon white grey tan navy\"?", "sql": "SELECT T.p_name FROM ( SELECT T2.p_name, SUM(T1.l_quantity) AS num FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name IN ('salmon white grey tan navy', 'burnished seashell gainsboro navajo chocolate') GROUP BY T1.l_partkey ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["lineitem", "part"]}, "evidence": "amount refers to sum(l_quantity); order no.1 refers to l_orderkey = 1; \"burnished seashell gainsboro navajo chocolate\" or \"salmon white grey tan navy\" refers to p_name IN ('salmon white grey tan navy', 'burnished seashell gainsboro navajo chocolate')"}
{"sample_id": 6878, "db_id": "retails", "final": {"question": "Among all the parts under the type \"promo brushed steel\", how many of them have a total available quantity from all suppliers of under 5000?", "sql": "SELECT SUM(num) FROM ( SELECT COUNT(T3.s_name) AS num FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_type = 'PROMO BRUSHED STEEL' GROUP BY T2.ps_partkey HAVING SUM(T2.ps_availqty) < 5000 ) T", "source_tables": ["partsupp", "part", "supplier"]}, "evidence": "type \"promo brushed steel\" refers to p_type = 'PROMO BRUSHED STEEL'; a total available quantity of under 5000 refers to sum(ps_availqty) < 5000"}
{"sample_id": 6913, "db_id": "retails", "final": {"question": "What are the names of the parts that were ordered by customer 110942?", "sql": "SELECT T3.p_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN part AS T3 ON T2.l_partkey = T3.p_partkey WHERE T1.o_custkey = 110942", "source_tables": ["lineitem", "part", "orders"]}, "evidence": "name of the part refers to p_name; customer 110942 refers to o_custkey = 110942"}
{"sample_id": 6857, "db_id": "retails", "final": {"question": "Please list the names of all the products under the type \"promo brushed steel\".", "sql": "SELECT p_name FROM part WHERE p_type = 'PROMO BRUSHED STEEL'", "source_tables": ["part"]}, "evidence": "product name refers to p_name; type \"promo brushed steel\" refers to p_type = 'PROMO BRUSHED STEEL'"}
{"sample_id": 6687, "db_id": "retails", "final": {"question": "What is the average price of the orders made by a customer in Germany?", "sql": "SELECT AVG(T3.o_totalprice) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY'", "source_tables": ["customer", "nation", "orders"]}, "evidence": "DIVIDE(SUM(o_totalprice), COUNT(o_orderkey)) where n_name = 'GERMANY';"}
{"sample_id": 6938, "db_id": "ice_hockey_draft", "final": {"question": "Who is the youngest player to have played during the 1997-1998 season for OHL League?", "sql": "SELECT DISTINCT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '1997-1998' AND T1.LEAGUE = 'OHL' ORDER BY T2.birthdate DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "youngest player refers to MAX(birthdate); 1997-1998 season refers to SEASON = '1997-1998'; OHL league refers to LEAGUE = 'OHL';"}
{"sample_id": 6937, "db_id": "ice_hockey_draft", "final": {"question": "How many games did the tallest player have ever played?", "sql": "SELECT T1.GP FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.ELITEID = ( SELECT t.ELITEID FROM PlayerInfo t ORDER BY t.height DESC LIMIT 1 )", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "tallest player refers to MAX(height_in_cm);"}
{"sample_id": 6946, "db_id": "ice_hockey_draft", "final": {"question": "Identify the players with the same height as Brian Gionta. How tall are they?", "sql": "SELECT T2.PlayerName, T1.height_in_cm FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height WHERE T2.height = ( SELECT height FROM PlayerInfo WHERE PlayerName = 'Brian Gionta' )", "source_tables": ["playerinfo", "height_info"]}, "evidence": "players refers to PlayerName; height refers to height_in_cm;"}
{"sample_id": 6947, "db_id": "ice_hockey_draft", "final": {"question": "Identify the name and position of the player who has committed the most rule violations.", "sql": "SELECT T2.PlayerName, T2.position_info FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.PIM = ( SELECT MAX(PIM) FROM SeasonStatus )", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "name of the player refers to PlayerName; position of the player refers to position_info; committed the most rule violations refers to MAX(PIM);"}
{"sample_id": 6984, "db_id": "ice_hockey_draft", "final": {"question": "Calculate the average height in centimeter of all players who played in Acadie-Bathurst Titan during regular season.", "sql": "SELECT CAST(SUM(T1.height_in_cm) AS REAL) / COUNT(T2.ELITEID) FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height INNER JOIN SeasonStatus AS T3 ON T2.ELITEID = T3.ELITEID WHERE T3.TEAM = 'Acadie-Bathurst Titan' AND T3.GAMETYPE = 'Regular Season'", "source_tables": ["playerinfo", "seasonstatus", "height_info"]}, "evidence": "average height in centimeter = AVG(height_in_cm); height in centimeter refers to height_in_cm; players refers to PlayerName; Acadie-Bathurst Titan refers to TEAM = 'Acadie-Bathurst Titan'; regular season refers to GAMETYPE = 'Regular Season';"}
{"sample_id": 6978, "db_id": "ice_hockey_draft", "final": {"question": "Who has played the most game plays in the 2000-2001 season of the International league?", "sql": "SELECT DISTINCT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.LEAGUE = 'International' ORDER BY T1.GP DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "played the most game plays refers to MAX(GP); 2000-2001 season refers to SEASON = '2000-2001'; International league refers to LEAGUE = 'International';"}
{"sample_id": 6954, "db_id": "ice_hockey_draft", "final": {"question": "Among all goals scored by Calgary Hitmen in the 2007-2008 season, identify the percentage scored by Ian Schultz.", "sql": "SELECT CAST(SUM(CASE WHEN T2.PlayerName = 'Ian Schultz' THEN T1.G ELSE 0 END) AS REAL) * 100 / SUM(T1.G) FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2007-2008' AND T1.TEAM = 'Calgary Hitmen'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "goals scored refers to G; Calgary Hitmen refers to TEAM = 'Calgary Hitmen'; percentage = MULTIPLY(DIVIDE(SUM(G WHERE PlayerName = 'Ian Schultz'), SUM(G)), 100); 2007-2008 season refers to SEASON = '2007-2008';"}
{"sample_id": 6934, "db_id": "ice_hockey_draft", "final": {"question": "What is the weight in kilograms of the player with the highest number of goal differential of all time?", "sql": "SELECT T3.weight_in_kg FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN weight_info AS T3 ON T2.weight = T3.weight_id ORDER BY T1.PLUSMINUS DESC LIMIT 1", "source_tables": ["playerinfo", "weight_info", "seasonstatus"]}, "evidence": "weight in kilograms refers to weight_in_kg; highest number of goal differential of all time refers to MAX(PLUSMINUS);"}
{"sample_id": 6918, "db_id": "ice_hockey_draft", "final": {"question": "What is the name of the tallest player?", "sql": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id ORDER BY T2.height_in_cm DESC LIMIT 1", "source_tables": ["playerinfo", "height_info"]}, "evidence": "tallest player refers to MAX(height_in_cm);"}
{"sample_id": 6972, "db_id": "ice_hockey_draft", "final": {"question": "List the names of all players in team Avangard Omsk in season 2000-2001.", "sql": "SELECT DISTINCT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.TEAM = 'Avangard Omsk'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "names of the players refers to PlayerName; team Avangard Omsk refers to TEAM = 'Avangard Omsk'; 2000-2001 season refers to SEASON = '2000-2001';"}
{"sample_id": 6998, "db_id": "ice_hockey_draft", "final": {"question": "Calculate the percentage of penalty minutes of Swedish players in OHL league among all players.", "sql": "SELECT CAST(COUNT(CASE WHEN T1.nation = 'Sweden' THEN T2.PIM ELSE NULL END) AS REAL) * 100 / COUNT(*) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.LEAGUE = 'OHL'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(PIM WHERE nation = 'Sweden'), COUNT(ELITEID) WHERE LEAGUE = 'OHL'), 100); Swedish refers to nation = 'Sweden'; players refers to PlayerName; OHL league refers to LEAGUE = 'OHL';"}
{"sample_id": 6994, "db_id": "ice_hockey_draft", "final": {"question": "Indicate the height of all players from team Oshawa Generals in inches.", "sql": "SELECT T3.height_in_inch FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T2.TEAM = 'Oshawa Generals'", "source_tables": ["playerinfo", "seasonstatus", "height_info"]}, "evidence": "height in inches refers to height_in_inch; players refers to PlayerName; team Oshawa Generals refers to TEAM = 'Oshawa Generals';"}
{"sample_id": 6931, "db_id": "ice_hockey_draft", "final": {"question": "Among the players whose total NHL games played in their first 7 years of NHL career is no less than 500, what is the name of the player who committed the most rule violations?", "sql": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.sum_7yr_GP > 500 ORDER BY T2.PIM DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "total NHL games played in their first 7 years of NHL career is no less than 500 refers to sum_7yr_GP > 500; name of the player refers to PlayerName; committed the most rule violations refers to MAX(PIM);"}
{"sample_id": 6955, "db_id": "ice_hockey_draft", "final": {"question": "Among all penalty minutes picked up by Ak Bars Kazan in the 1999-2000 season, identify the percentage picked up by Yevgeni Muratov.", "sql": "SELECT CAST(SUM(CASE WHEN T2.PlayerName = 'Yevgeni Muratov' THEN T1.PIM ELSE 0 END) AS REAL) * 100 / SUM(T1.PIM) FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '1999-2000' AND T1.TEAM = 'Ak Bars Kazan'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "penalty minutes refers to PIM; Ak Bars Kazan refers to TEAM = 'Ak Bars Kazan'; percentage = MULTIPLY(DIVIDE(SUM(PIM WHERE PlayerName = 'Yevgeni Muratov'), SUM(PIM)), 100.0); 1999-2000 season refers to SEASON = '1999-2000';"}
{"sample_id": 6942, "db_id": "ice_hockey_draft", "final": {"question": "Among all the teams that made the playoffs in the 2007-2008 season, identify the percentage that played over 20 games.", "sql": "SELECT CAST(COUNT(CASE WHEN GP > 20 THEN TEAM ELSE NULL END) AS REAL) * 100 / COUNT(TEAM) FROM SeasonStatus WHERE SEASON = '2007-2008' AND GAMETYPE = 'Playoffs'", "source_tables": ["seasonstatus"]}, "evidence": "playoffs refers to GAMETYPE = 'Playoffs'; percentage = MULTIPLY(DIVIDE(SUM(GP > 20), COUNT(ELITEID)), 100); played over 20 games refers to GP > 20; 2007-2008 season refers to SEASON = '2007-2008';"}
{"sample_id": 7101, "db_id": "works_cycles", "final": {"question": "What is the product cost end date with the highest weight in grams?", "sql": "SELECT T2.EndDate FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.WeightUnitMeasureCode = 'G' ORDER BY T1.Weight DESC LIMIT 1", "source_tables": ["productcosthistory", "product"]}, "evidence": "in grams refers to WeightUnitMeasureCode = 'G'"}
{"sample_id": 7004, "db_id": "works_cycles", "final": {"question": "For all the purchase order transactions, name all the products with low quality.", "sql": "SELECT DISTINCT T1.Name FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Class = 'L' AND T2.TransactionType = 'P' ORDER BY T1.Name", "source_tables": ["transactionhistory", "product"]}, "evidence": "Low quality refers to the product's quality class, therefore Class = 'L'"}
{"sample_id": 7224, "db_id": "works_cycles", "final": {"question": "List the first names of the people with more than 65 sick leave hours.", "sql": "SELECT T2.FirstName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.SickLeaveHours > 65", "source_tables": ["employee", "person"]}, "evidence": "SickLeaveHours>65;"}
{"sample_id": 7179, "db_id": "works_cycles", "final": {"question": "What are the product assembly ID that come with unit measure code EA and BOM level of 2, at the same time have per assembly quantity of more than 10?", "sql": "SELECT ProductAssemblyID FROM BillOfMaterials WHERE UnitMeasureCode = 'EA' AND BOMLevel = 2 AND PerAssemblyQty > 10", "source_tables": ["billofmaterials"]}, "evidence": "Per assembly quantity of more than 10 is expresses as PerAssemblyQty>10"}
{"sample_id": 7271, "db_id": "works_cycles", "final": {"question": "What is the full name of the second oldest person in the company at the time he was hired?", "sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY STRFTIME('%Y', T1.HireDate) - STRFTIME('%Y', T1.BirthDate) DESC LIMIT 1, 1", "source_tables": ["employee", "person"]}, "evidence": "age at the time of being hired = SUBTRACT(HireDate, BirthDate); full name = FirstName+MiddleName+LastName;"}
{"sample_id": 7420, "db_id": "works_cycles", "final": {"question": "Among the employees in the Manufacturing group in 2007, how many of them are store contacts?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID INNER JOIN Person AS T3 ON T1.BusinessEntityID WHERE T3.PersonType = 'SC' AND T2.GroupName = 'Manufacturing' AND STRFTIME('%Y', T1.EndDate) >= '2007' AND STRFTIME('%Y', T1.StartDate) <= '2007'", "source_tables": ["employeedepartmenthistory", "department", "person"]}, "evidence": "store contact refers to PersonType = 'SC'; year(EndDate)>2007 and year(StartDate)<2007;"}
{"sample_id": 6999, "db_id": "works_cycles", "final": {"question": "What is the average standard cost of product number CA-1098?", "sql": "SELECT AVG(T2.StandardCost) FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductNumber = 'CA-1098'", "source_tables": ["productcosthistory", "product"]}, "evidence": "Average cost = AVG(StandardCost)"}
{"sample_id": 7465, "db_id": "works_cycles", "final": {"question": "What is the profit for the product \"792\"?", "sql": "SELECT T1.ListPrice - T2.StandardCost FROM ProductListPriceHistory AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID = 792", "source_tables": ["productlistpricehistory", "productcosthistory"]}, "evidence": "profit = SUBTRACT(ListPrice, StandardCost);"}
{"sample_id": 7041, "db_id": "works_cycles", "final": {"question": "Which job title has the lowest pay?", "sql": "SELECT T1.JobTitle FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T2.Rate ASC LIMIT 1", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "lowest pay refers to min(Rate);"}
{"sample_id": 7080, "db_id": "works_cycles", "final": {"question": "Average of the last receipt cost of the products whose average lead time is 60 days.", "sql": "SELECT SUM(LastReceiptCost) / COUNT(ProductID) FROM ProductVendor WHERE AverageLeadTime = 60", "source_tables": ["productvendor"]}, "evidence": "average = DIVIDE(SUM(lastreceiptcost), COUNT(OnorderQty)) where AverageLeadTime = 60"}
{"sample_id": 7288, "db_id": "works_cycles", "final": {"question": "What is the class of the product with the most reviews?", "sql": "SELECT T2.Class FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID GROUP BY T2.Class ORDER BY COUNT(T1.ProductReviewID) DESC LIMIT 1", "source_tables": ["productreview", "product"]}, "evidence": "most review refers to MAX(count(comments)); high class refers to Class = 'H'; medium class refers to Class = 'M'; low class refers to Class = 'L'"}
{"sample_id": 7469, "db_id": "works_cycles", "final": {"question": "What is the price for the AWC Logo Cap?", "sql": "SELECT T2.ListPrice FROM Product AS T1 INNER JOIN ProductListPriceHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'AWC Logo Cap'", "source_tables": ["productlistpricehistory", "product"]}, "evidence": "price refers to ListPrice; price of 3 products = MULTIPLY(ListPrice, 3); Lock Washer 6 is a name of a product;"}
{"sample_id": 7001, "db_id": "works_cycles", "final": {"question": "List the products whereby the standard cost is $80 more than previous standard cost in history.", "sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.StandardCost - T2.StandardCost > 80 GROUP BY T1.Name", "source_tables": ["productcosthistory", "product"]}, "evidence": "SUBTRACT(product.StandardCost, CostHistory.StandardCost)>80"}
{"sample_id": 7432, "db_id": "works_cycles", "final": {"question": "What is the average pay rate of the employees who worked in the Engineering Departmentin 2007?", "sql": "SELECT AVG(T3.Rate) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID INNER JOIN EmployeePayHistory AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Name = 'Engineering' AND STRFTIME('%Y', EndDate) > '2007' AND STRFTIME('%Y', T1.StartDate) < '2007'", "source_tables": ["employeedepartmenthistory", "department", "employeepayhistory"]}, "evidence": "average pay rate = AVG(Rate); work in 2007 refers to year(StartDate)<2007 AND year(EndDate)>2007;"}
{"sample_id": 7149, "db_id": "works_cycles", "final": {"question": "Please tell the meaning of CultureID \"fr\".", "sql": "SELECT Name FROM Culture WHERE CultureID = 'fr'", "source_tables": ["culture"]}, "evidence": "tell the meaning is to find the name of culture"}
{"sample_id": 7298, "db_id": "works_cycles", "final": {"question": "Please give all the list prices of the product LL Fork.", "sql": "SELECT T2.ListPrice FROM Product AS T1 INNER JOIN ProductListPriceHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'LL Fork'", "source_tables": ["productlistpricehistory", "product"]}, "evidence": "Hex Nut 5 is name of a product"}
{"sample_id": 7167, "db_id": "works_cycles", "final": {"question": "What kind of transaction type for the \"HL Road Frame - Black, 48\" order happened in 2012/12/13?", "sql": "SELECT T1.TransactionType FROM TransactionHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'HL Road Frame - Black, 48' AND STRFTIME('%Y-%m-%d',T1.TransactionDate) = '2013-07-31'", "source_tables": ["transactionhistory", "product"]}, "evidence": "Transactiontype = 'w' means 'WorkOrder'; transactiontype = 's' means 'SalesOrder'; transactiontype = 'P' means 'PurchaseOrder'; happened in refers to TransactionDate"}
{"sample_id": 7373, "db_id": "works_cycles", "final": {"question": "Which territory has the greatest difference in sales from previous year to this year? Indicate the difference, as well as the name and country of the region.", "sql": "SELECT SalesLastYear - SalesYTD, Name, CountryRegionCode FROM SalesTerritory ORDER BY SalesLastYear - SalesYTD DESC LIMIT 1", "source_tables": ["salesterritory"]}, "evidence": "greatest difference in sales from previous year to this year refers to Max(Subtract(SalesLastYear,SalesYTD));"}
{"sample_id": 7032, "db_id": "works_cycles", "final": {"question": "What is the highest amount of bonus earned by the sales person in Canada?", "sql": "SELECT T2.Bonus FROM SalesTerritory AS T1 INNER JOIN SalesPerson AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T1.CountryRegionCode = 'CA' ORDER BY T2.SalesQuota DESC LIMIT 1", "source_tables": ["salesterritory", "salesperson"]}, "evidence": "Canada is name of a sales territory"}
{"sample_id": 7065, "db_id": "works_cycles", "final": {"question": "Among the employees who are married, how many of them have a western name style?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.NameStyle = 0 AND T1.MaritalStatus = 'M'", "source_tables": ["employee", "person"]}, "evidence": "married refers to MaritalStatus = 'M'; western name style refers to NameStyle = '0';"}
{"sample_id": 7464, "db_id": "works_cycles", "final": {"question": "List all the scraped work orders for handling damage reason.", "sql": "SELECT T2.WorkOrderID FROM ScrapReason AS T1 INNER JOIN WorkOrder AS T2 ON T1.ScrapReasonID = T2.ScrapReasonID WHERE T1.Name = 'Handling damage'", "source_tables": ["scrapreason", "workorder"]}, "evidence": "handling damage is descrription of manufacturing failure which refers to ScrapReason.Name"}
{"sample_id": 7033, "db_id": "works_cycles", "final": {"question": "What are the names of the product that has the lowest rating?", "sql": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Rating = ( SELECT Rating FROM ProductReview ORDER BY Rating ASC LIMIT 1 )", "source_tables": ["productreview", "product"]}, "evidence": "lowest rating refers to Rating = 1;"}
{"sample_id": 7152, "db_id": "works_cycles", "final": {"question": "For the older production technician who was hired in 2008/12/7, what's his/her birthday?", "sql": "SELECT BirthDate FROM Employee WHERE HireDate = '2008-12-07'", "source_tables": ["employee"]}, "evidence": "Oldest production technician refers to MIN(BirthDate) where JobTitle = 'Production Technician'"}
{"sample_id": 7207, "db_id": "works_cycles", "final": {"question": "How many types of credit cards are there and how many are vista?", "sql": "SELECT COUNT(CardNumber) FROM CreditCard WHERE CardType = 'vista'", "source_tables": ["creditcard"]}, "evidence": "type of credit card refers to CardType; CardType = 'Vista';"}
{"sample_id": 7117, "db_id": "works_cycles", "final": {"question": "What is the sales revenue for item number 740?", "sql": "SELECT ListPrice - StandardCost FROM Product WHERE ProductID = 740", "source_tables": ["product"]}, "evidence": "business number 1580 refers to BusinessEntityID = 1580; Net profit = SUBTRACT(LastReceiptCost,StandardPrice)"}
{"sample_id": 7381, "db_id": "works_cycles", "final": {"question": "What are the full names of the sales person whose bonuses are less than 1,000?", "sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM SalesPerson AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Bonus < 1000", "source_tables": ["salesperson", "person"]}, "evidence": "full name = FirstName+MiddleName+LastName; Bonus<1000;"}
{"sample_id": 7458, "db_id": "works_cycles", "final": {"question": "What is the organization level for Human Resources Manager?", "sql": "SELECT OrganizationLevel FROM Employee WHERE JobTitle = 'Human Resources Manager'", "source_tables": ["employee"]}, "evidence": "Human Resources Manager is a job title"}
{"sample_id": 7460, "db_id": "works_cycles", "final": {"question": "What is the cost and the product number of product with the id \"888\"?", "sql": "SELECT T2.StandardCost, T2.ProductNumber FROM ProductCostHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID = 888", "source_tables": ["productcosthistory", "product"]}, "evidence": "cost refers to StandardCost;"}
{"sample_id": 7316, "db_id": "works_cycles", "final": {"question": "Based on the lastet payrate of each employee, calculate the average hourly payrate for each department.", "sql": "SELECT AVG(T1.Rate) FROM EmployeePayHistory AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T1.RateChangeDate = ( SELECT MAX(T1.RateChangeDate) FROM EmployeePayHistory AS T1 INNER JOIN Department AS T2 ON T1.BusinessEntityID = T2.DepartmentID )", "source_tables": ["employeedepartmenthistory", "department", "employeepayhistory"]}, "evidence": "latest payrate refers to max(RateChangeDate); average hourly payrate = divide(sum(Rate), count(BusinessEntityID)) for each DepartmentID"}
{"sample_id": 7128, "db_id": "works_cycles", "final": {"question": "Please list the total number of companies with a commission percentage of 0.018 or above, along with each company's assigned geographical location.", "sql": "SELECT T1.BusinessEntityID, T2.\"Group\" FROM SalesPerson AS T1 INNER JOIN SalesTerritory AS T2 USING (territoryid) WHERE T1.CommissionPct >= 0.018", "source_tables": ["salesterritory", "salesperson"]}, "evidence": "geographical location refers to group from SalesPerson; ComissionPct refers to commission percentage where ComissionPct > = 0.018;"}
{"sample_id": 7067, "db_id": "works_cycles", "final": {"question": "Please list the employees who have more than 20 vacations hours and wish to receive e-mail promotions.", "sql": "SELECT T1.BusinessEntityID FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 1 AND T1.VacationHours > 20", "source_tables": ["employee", "person"]}, "evidence": "Contact does wish to receive e-mail promotions refers to EmailPromotion = (1,2); more than 20 vacations hours refers to VacationHours>20"}
{"sample_id": 7397, "db_id": "works_cycles", "final": {"question": "What is the discount percentage of \"LL Road Frame Sale\"?", "sql": "SELECT DiscountPct FROM SpecialOffer WHERE Description = 'LL Road Frame Sale'", "source_tables": ["specialoffer"]}, "evidence": "discount percentage refers to DiscountPct; LL Road Frame Sale is a description of special offer;"}
{"sample_id": 7368, "db_id": "works_cycles", "final": {"question": "What is the name of the product with the almost highest review score?", "sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Rating = ( SELECT Rating FROM ProductReview ORDER BY Rating DESC LIMIT 1 )", "source_tables": ["productreview", "product"]}, "evidence": "highest review score refers to Rating = 5;"}
{"sample_id": 7357, "db_id": "works_cycles", "final": {"question": "Please list the top 5 products with the most orders.", "sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN SalesOrderDetail AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.Name ORDER BY SUM(T2.OrderQty) DESC LIMIT 0, 5", "source_tables": ["product", "salesorderdetail"]}, "evidence": "most order refers to Max(OrderQty);"}
{"sample_id": 7053, "db_id": "works_cycles", "final": {"question": "What is the pay frequency of the oldest employee?", "sql": "SELECT T1.PayFrequency FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T2.BirthDate ASC LIMIT 1", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "oldest employee refers to min(BirthDate); PayFrequency = 1 refers to \u2018Salary received monthly\u2019; PayFrequency = 2 refers to \u2018Salary received biweekly'"}
{"sample_id": 7107, "db_id": "works_cycles", "final": {"question": "What is the name of the supplier number 1492?", "sql": "SELECT NAME FROM Vendor WHERE BusinessEntityID = 1492", "source_tables": ["vendor"]}, "evidence": "supplier number 1492 refers to BusinessEntityId = 1492; name of the supplier = name from vendor"}
{"sample_id": 7034, "db_id": "works_cycles", "final": {"question": "How many of the workers who started working in 2009 are from the Production Department?", "sql": "SELECT COUNT(T2.BusinessEntityID) FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.DepartmentID = T2.DepartmentID WHERE T2.StartDate >= '2009-01-01' AND T2.StartDate < '2010-01-01' AND T1.Name = 'Production'", "source_tables": ["employeedepartmenthistory", "department"]}, "evidence": "StartDate BETWEEN '2009-01-01' AND '2009-12-31';"}
{"sample_id": 7326, "db_id": "works_cycles", "final": {"question": "List the person who owns a distinguish credt card.", "sql": "SELECT T3.FirstName, T3.LastName FROM CreditCard AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.CreditCardID = T2.CreditCardID INNER JOIN Person AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.CardType = 'Distinguish'", "source_tables": ["person", "personcreditcard", "creditcard"]}, "evidence": "distinguish credt card refers to cardType = 'Distinguish'"}
{"sample_id": 7283, "db_id": "works_cycles", "final": {"question": "Among the products that are purchased, how many of them have never received the highest rating?", "sql": "SELECT COUNT(T1.ProductID) FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.MakeFlag = 0 AND T1.Rating != 5", "source_tables": ["productreview", "product"]}, "evidence": "product that are purchased refers to MakeFlag = 0; never received highest rating refers to Rating! = 5\n\n"}
{"sample_id": 7025, "db_id": "works_cycles", "final": {"question": "Which currency pair's average exchange rate for the day is the highest?", "sql": "SELECT FromCurrencyCode, ToCurrencyCode FROM CurrencyRate ORDER BY AverageRate DESC LIMIT 1", "source_tables": ["currencyrate"]}, "evidence": "currency pair refers to FromCurrencyCode/ToCurrencyCode"}
{"sample_id": 7042, "db_id": "works_cycles", "final": {"question": "What is the total number of employees that worked in the Finance department?", "sql": "SELECT COUNT(T2.BusinessEntityID) FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 USING (DepartmentID) WHERE T1.Name = 'Finance'", "source_tables": ["employeedepartmenthistory", "department"]}, "evidence": ""}
{"sample_id": 7353, "db_id": "works_cycles", "final": {"question": "What are the sales reasons for order 43718?", "sql": "SELECT T2.Name FROM SalesOrderHeaderSalesReason AS T1 INNER JOIN SalesReason AS T2 ON T1.SalesReasonID = T2.SalesReasonID WHERE T1.SalesOrderID = 43718", "source_tables": ["salesorderheadersalesreason", "salesreason"]}, "evidence": "order refers to SalesOrderID"}
{"sample_id": 7280, "db_id": "works_cycles", "final": {"question": "What is the highest profit on net for a product?", "sql": "SELECT LastReceiptCost - StandardPrice FROM ProductVendor ORDER BY LastReceiptCost - StandardPrice DESC LIMIT 1", "source_tables": ["productvendor"]}, "evidence": "profit on net = subtract(LastReceiptCost, StandardPrice)"}
{"sample_id": 7095, "db_id": "works_cycles", "final": {"question": "How many products are there if we add all those located in the Subassembly category?", "sql": "SELECT COUNT(T1.LocationID) FROM Location AS T1 INNER JOIN ProductInventory AS T2 USING (LocationID) WHERE T1.Name = 'Subassembly'", "source_tables": ["location", "productinventory"]}, "evidence": "located in the Subassembly category refers to Name = 'Subassembly'"}
{"sample_id": 7043, "db_id": "works_cycles", "final": {"question": "What is the profit of the product with the highest list price and of the product with the lowest list price other than 0? Indicates the depth the component is from its parent.", "sql": "SELECT ( SELECT ListPrice - StandardCost FROM Product WHERE ListPrice != 0 ORDER BY ListPrice DESC LIMIT 1 ) , ( SELECT ListPrice - StandardCost FROM Product WHERE ListPrice != 0 ORDER BY ListPrice LIMIT 1 )", "source_tables": ["product"]}, "evidence": "profit = subtract(ListPrice, StandardCost); the depth the component from its parent refers to BOMLevel;"}
{"sample_id": 7210, "db_id": "works_cycles", "final": {"question": "List all the names of the stores assigned to the sales person with the id \"277\".", "sql": "SELECT Name FROM Store WHERE SalesPersonID = 277", "source_tables": ["store"]}, "evidence": ""}
{"sample_id": 7402, "db_id": "works_cycles", "final": {"question": "Among all the products that are manufactured in-house, how many of them are salable?", "sql": "SELECT SUM(FinishedGoodsFlag) FROM Product WHERE MakeFlag = 1", "source_tables": ["product"]}, "evidence": "product is mnanufactured in-house refers to MakeFlag = 1; salable product refers to FinishedGoodsFlag = 1;"}
{"sample_id": 7056, "db_id": "works_cycles", "final": {"question": "Among the employees who have a pay rate of above 40, how many of them are male?", "sql": "SELECT SUM(CASE WHEN T2.Gender = 'M' THEN 1 ELSE 0 END) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Rate > 40", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "pay rate above 40 refers to Rate>40; male employee refers to Gender = M"}
{"sample_id": 7240, "db_id": "works_cycles", "final": {"question": "What is the credit card number for the sales order \"45793\"?", "sql": "SELECT T2.CardNumber FROM SalesOrderHeader AS T1 INNER JOIN CreditCard AS T2 ON T1.CreditCardID = T2.CreditCardID WHERE T1.SalesOrderID = 45793", "source_tables": ["salesorderheader", "creditcard"]}, "evidence": ""}
{"sample_id": 7127, "db_id": "works_cycles", "final": {"question": "Which chromoly steel product model has AdventureWorks saved in English?", "sql": "SELECT T1.ProductModelID FROM ProductModelProductDescriptionCulture AS T1 INNER JOIN Culture AS T2 USING (cultureid) INNER JOIN ProductDescription AS T3 USING (productdescriptionid) WHERE T3.Description LIKE 'Chromoly steel%' AND T2.Name = 'English'", "source_tables": ["productmodelproductdescriptionculture", "productdescription", "culture"]}, "evidence": "Saved in English refers to product description written in English where Culture.name = 'English'"}
{"sample_id": 7289, "db_id": "works_cycles", "final": {"question": "Please list the e-mails of the reviewers who have reviewed high class.", "sql": "SELECT T1.EmailAddress FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Class = 'H'", "source_tables": ["productreview", "product"]}, "evidence": "high class refers to Class = 'H'; men's product refers to Style = 'M'"}
{"sample_id": 7148, "db_id": "works_cycles", "final": {"question": "What is the minimum shipping charge for \"OVERSEAS - DELUXE\"?", "sql": "SELECT ShipBase FROM ShipMethod WHERE Name = 'OVERSEAS - DELUXE'", "source_tables": ["shipmethod"]}, "evidence": "Minimum shipping charge refers to ShipBase; OVERSEAS - DELUXE is name of shipping company"}
{"sample_id": 7328, "db_id": "works_cycles", "final": {"question": "Name all stores and its sales representative in France territory.", "sql": "SELECT T3.Name, T4.FirstName, T4.LastName FROM SalesTerritory AS T1 INNER JOIN Customer AS T2 ON T1.TerritoryID = T2.TerritoryID INNER JOIN Store AS T3 ON T2.StoreID = T3.BusinessEntityID INNER JOIN Person AS T4 ON T2.PersonID = T4.BusinessEntityID WHERE T1.Name = 'France'", "source_tables": ["salesterritory", "store", "customer", "person"]}, "evidence": "France territory refers to SalesTerritory.Name = 'France';"}
{"sample_id": 7138, "db_id": "works_cycles", "final": {"question": "What percentage of AdventureWorks employees are men?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessentityID) FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessentityID = T2.BusinessentityID WHERE T1.PersonType = 'EM'", "source_tables": ["employee", "person"]}, "evidence": "male refers to Gender = 'M'; employee refers to PersonType = 'EM'; percentage = DIVIDE(COUNT(Gender = 'M'), COUNT(PersonType = 'MY'))*100%;"}
{"sample_id": 7079, "db_id": "works_cycles", "final": {"question": "Among the active employees with over 10 hours of sick leave, what is the percentage of the employees with over 20 vacation hours?", "sql": "SELECT CAST(SUM(CASE WHEN T2.VacationHours > 20 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.CurrentFlag = 1 AND T2.SickLeaveHours > 10", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "CurrentFlag = 1 refers to the active status of employees; Percentage = Divide (Count (BusinessEntityID (CurrentFlag = 1 & VacationHours >20 & SickLeaveHours > 10)), Count (BusinessEntityID (CurrentFlag = 1 & SickLeaveHours>10))) * 100;"}
{"sample_id": 7123, "db_id": "works_cycles", "final": {"question": "What is the currency of Brazil?", "sql": "SELECT T1.Name FROM Currency AS T1 INNER JOIN CountryRegionCurrency AS T2 ON T1.CurrencyCode = T2.CurrencyCode INNER JOIN CountryRegion AS T3 ON T2.CountryRegionCode = T3.CountryRegionCode WHERE T3.Name = 'Brazil'", "source_tables": ["countryregioncurrency", "currency", "countryregion"]}, "evidence": ""}
{"sample_id": 7008, "db_id": "works_cycles", "final": {"question": "How much would be the total sales profit for shopping cart ID 20621 ?", "sql": "SELECT SUM((T1.ListPrice - T1.StandardCost) * T2.Quantity) FROM Product AS T1 INNER JOIN ShoppingCartItem AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ShoppingCartID = 20621", "source_tables": ["shoppingcartitem", "product"]}, "evidence": "Sales profit = MULTIPLY(SUBTRACT(ListPrice, StandardCost; Quantity)), where ShoppingCartID = '20621'"}
{"sample_id": 7000, "db_id": "works_cycles", "final": {"question": "For all the products, list the product name and its corresponding start date for the current standard cost.", "sql": "SELECT T1.Name, T2.StartDate FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T2.EndDate IS NULL", "source_tables": ["productcosthistory", "product"]}, "evidence": "The current standard cost refers to EndDate is NULL"}
{"sample_id": 7145, "db_id": "works_cycles", "final": {"question": "Which sales person made the sale of 1635823.3967 last year? Give the Business Entity ID.", "sql": "SELECT BusinessEntityID FROM SalesPerson WHERE SalesLastYear = '1635823.3967'", "source_tables": ["salesperson"]}, "evidence": ""}
{"sample_id": 7094, "db_id": "works_cycles", "final": {"question": "List the first and last name of all unmarried male Production Supervisors.", "sql": "SELECT T2.FirstName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.MaritalStatus = 'S' AND T1.Gender = 'M' AND T1.JobTitle LIKE 'Production Supervisor%'", "source_tables": ["employee", "person"]}, "evidence": "unmarried refers to MaritalStatus = 'S', male refers to Gender = 'M', Production Supervisors is a job title"}
{"sample_id": 7351, "db_id": "works_cycles", "final": {"question": "Which department, altogether, has the most personnel who work the evening shift?", "sql": "SELECT T3.Name FROM EmployeeDepartmentHistory AS T1 INNER JOIN Shift AS T2 ON T1.ShiftId = T2.ShiftId INNER JOIN Department AS T3 ON T1.DepartmentID = T3.DepartmentID WHERE T2.Name = 'Night' GROUP BY T3.Name ORDER BY COUNT(T1.BusinessEntityID) DESC LIMIT 1", "source_tables": ["shift", "employeedepartmenthistory", "department"]}, "evidence": "evening shift also means night shift where Name = 'Night';most personnel in evening shift refers to Max(Count(Shift.ShiftID(Name = 'Night')));"}
{"sample_id": 7366, "db_id": "works_cycles", "final": {"question": "What percentage of businesses in the Northwest US have forecasted annual sales of above 300,000?", "sql": "SELECT CAST(SUM(CASE WHEN T1.SalesQuota > 300000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessEntityID) FROM SalesPerson AS T1 INNER JOIN SalesTerritory AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T2.CountryRegionCode = 'US' AND T2.Name = 'Northwest'", "source_tables": ["salesterritory", "salesperson"]}, "evidence": "Northwest refers to Name = 'Northwest'; US refers to CountryRegionCode = 'US'; forecasted annual sales of above 300,000 refers to SalesQuota >300000; Percentage = Divide(Count(TerritoryID(SalesQuota >300000)),Count(TerritoryID))*100"}
{"sample_id": 7076, "db_id": "works_cycles", "final": {"question": "How many vacation hours do the male employees have on average?", "sql": "SELECT CAST(SUM(T1.VacationHours) AS REAL) / COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Gender = 'M' AND T2.PersonType = 'EM'", "source_tables": ["employee", "person"]}, "evidence": "employee refers to PersonType = 'EM'; Male refers to Gender = 'M'; Average = Divide( SUM(VacationHours(PersonType = 'EM'& Gender = 'M')),Count(BusinessEntityID(PersonType = 'EM' & Gender = 'M')));"}
{"sample_id": 7205, "db_id": "works_cycles", "final": {"question": "How many times is married non sales employees against single non-sales employees?", "sql": "SELECT CAST(SUM(CASE WHEN T1.MaritalStatus = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.MaritalStatus = 'S' THEN 1 ELSE 0 END) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'EM'", "source_tables": ["employee", "person"]}, "evidence": "non-sales employee refers to PersonType = 'EM'; married refers to MaritalStatus = 'M'; single refers to MaritalStatus = 'S'; percentage = DIVIDE(SUM(MaritalStatus = 'M'), (SUM(MaritalStatus = 'S') as percentage;"}
{"sample_id": 7303, "db_id": "works_cycles", "final": {"question": "Please list the products that are out of stock and purchased in house.", "sql": "SELECT T2.Name FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.MakeFlag = 0 AND (T1.OnOrderQty IS NULL OR T1.OnOrderQty = 0)", "source_tables": ["productvendor", "product"]}, "evidence": "take more than 2 days to make refers to DaysToManufacture>2; out of stock refers to OnOrderQty = 0 or OnOrderQty is null; manufactured in house refers to MakeFlag = 1"}
{"sample_id": 7160, "db_id": "works_cycles", "final": {"question": "How many letters are there in Catherine Ward's e-mail account passwords?", "sql": "SELECT LENGTH(T2.PasswordHash) FROM Person AS T1 INNER JOIN Password AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'Catherine' AND T1.LastName = 'Ward'", "source_tables": ["password", "person"]}, "evidence": "Catherine Ward refers to the name of BusinessEntityID; how many letters in password for the e-mail account refers to LENGTH(PasswordHash)"}
{"sample_id": 7337, "db_id": "works_cycles", "final": {"question": "Please provide the IDs of any three AdventureWorks product subcategories.", "sql": "SELECT DISTINCT ProductCategoryID FROM ProductSubcategory LIMIT 3", "source_tables": ["productsubcategory"]}, "evidence": ""}
{"sample_id": 7106, "db_id": "works_cycles", "final": {"question": "What is the employee of company number 1's full name?", "sql": "SELECT FirstName, MiddleName, LastName FROM Person WHERE BusinessEntityID = 1 AND PersonType = 'EM'", "source_tables": ["person"]}, "evidence": "company number 1 refers to BusinessEntityId = 1; employee refers to PersonType = 'EM'; full name refers to FirstName + MiddleName + LastName"}
{"sample_id": 7329, "db_id": "works_cycles", "final": {"question": "Name all products that started selling in 2013. State its respective vendor's name.", "sql": "SELECT T1.Name, T3.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE STRFTIME('%Y', T1.SellStartDate) = '2013'", "source_tables": ["vendor", "product", "productvendor"]}, "evidence": "Started selling in 2013 refers to year(SellStartDate) = 2013;"}
{"sample_id": 7180, "db_id": "works_cycles", "final": {"question": "How many location IDs have actual resource hours of 2?", "sql": "SELECT COUNT(LocationID) FROM WorkOrderRouting WHERE ActualResourceHrs = 2", "source_tables": ["workorderrouting"]}, "evidence": "actual resource hours of 2 refers to ActualResourceHrs = 2"}
{"sample_id": 7021, "db_id": "works_cycles", "final": {"question": "Which product has the highest profit on net? State the product name.", "sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID ORDER BY T2.LastReceiptCost - T2.StandardPrice DESC LIMIT 1", "source_tables": ["product", "productvendor"]}, "evidence": "Profit on net = SUBTRACT(LastReceiptCost, StandardPrice)"}
{"sample_id": 7186, "db_id": "works_cycles", "final": {"question": "What is the job position currently occupied by Ken J S\u00c3\u00a1nchez?", "sql": "SELECT T1.JobTitle FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.FirstName = 'Ken' AND T2.MiddleName = 'J' AND T2.LastName = 'S\u00e1nchez'", "source_tables": ["employee", "person"]}, "evidence": "Job position refers to JobTitle"}
{"sample_id": 7382, "db_id": "works_cycles", "final": {"question": "When did the Senior Tool Designer, who was 33 years old at the time he was hired, stopped working in the Engineering department?", "sql": "SELECT T2.EndDate FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T1.JobTitle = 'Senior Tool Designer' AND STRFTIME('%Y', T1.HireDate) - STRFTIME('%Y', T1.BirthDate) = 33 AND T2.EndDate IS NOT NULL", "source_tables": ["department", "employeedepartmenthistory", "employee"]}, "evidence": "Senior Tool Designer is a JobTitle; 33 years old at the time of hiring refers to SUBTRACT(year(HireDate)), (year(BirthDate)) = 33;"}
{"sample_id": 7447, "db_id": "works_cycles", "final": {"question": "List all the socks products.", "sql": "SELECT T2.ProductID FROM ProductSubcategory AS T1 INNER JOIN Product AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID WHERE T1.Name = 'Socks'", "source_tables": ["productsubcategory", "product"]}, "evidence": "Socks is a name of product subcategory"}
{"sample_id": 7191, "db_id": "works_cycles", "final": {"question": "What is the total sick leave hours of employees who do not wish to receive any e-mail promotion?", "sql": "SELECT SUM(T1.SickLeaveHours) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 0", "source_tables": ["employee", "person"]}, "evidence": "Employees who do not wish to receive any e-mail promotions are marked as EmailPromotion = 0"}
{"sample_id": 7072, "db_id": "works_cycles", "final": {"question": "What is the surname suffix of the employee who works as a store contact and has the longest sick leave hours?", "sql": "SELECT T2.Suffix FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP' ORDER BY T1.SickLeaveHours DESC LIMIT 1", "source_tables": ["employee", "person"]}, "evidence": "store contact refers to PersonType = 'SC';"}
{"sample_id": 7098, "db_id": "works_cycles", "final": {"question": "If we discount the products that do not have any type of offer, how many different products have been sold in an amount greater than 2 units per order?", "sql": "SELECT COUNT(DISTINCT T1.ProductID) FROM SalesOrderDetail AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID INNER JOIN SpecialOffer AS T3 ON T2.SpecialOfferID = T3.SpecialOfferID WHERE T1.OrderQty > 2 AND T1.UnitPriceDiscount = 0", "source_tables": ["specialofferproduct", "specialoffer", "salesorderdetail"]}, "evidence": "do not have any type of offer refers to Description = 'No Discount'; sold in an amount greater than 2 refers to OrderQty>2"}
{"sample_id": 7405, "db_id": "works_cycles", "final": {"question": "What type of employee is David Bradley?", "sql": "SELECT PersonType FROM Person WHERE FirstName = 'David' AND LastName = 'Bradley'", "source_tables": ["person"]}, "evidence": "type of employee refers to PersonType;"}
{"sample_id": 7338, "db_id": "works_cycles", "final": {"question": "What are the differences between the 288th salesperson's predicted annual sales and his or her actual sales thus far?", "sql": "SELECT SalesYTD - SalesQuota FROM SalesPerson WHERE BusinessEntityID = 288", "source_tables": ["salesperson"]}, "evidence": "288th sales person refers to BusinessEntityID = 288; predited annual sales refers to SalesQuota; actual sales refers to SalesYTD; difference = Substract(SalesQuota(BusinessEntityID(288))), (SalesYTD(BusinessEntityID(288)));"}
{"sample_id": 7024, "db_id": "works_cycles", "final": {"question": "What is the total profit all transactions with product ID 827?", "sql": "SELECT SUM((T1.ListPrice - T1.StandardCost) * T2.Quantity) FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID = 827", "source_tables": ["transactionhistory", "product"]}, "evidence": "Profit = MULTIPLY(SUBTRACT(ListPrice, StandardCost) Quantity))"}
{"sample_id": 7166, "db_id": "works_cycles", "final": {"question": "What is the number of State Province of France that doesn't have a State Province Code?", "sql": "SELECT T1.CountryRegionCode FROM StateProvince AS T1 INNER JOIN CountryRegion AS T2 ON T1.CountryRegionCode = T2.CountryRegionCode WHERE T2.Name = 'France' AND T1.IsOnlyStateProvinceFlag = 1", "source_tables": ["stateprovince", "countryregion"]}, "evidence": "Doesn't have a State Province Code refers to IsOnlyStateProvinceFlag = 1 where StateProvinceCode is unavailable"}
{"sample_id": 7052, "db_id": "works_cycles", "final": {"question": "Please list the job titles of the employees who has a document that has been approved.", "sql": "SELECT DISTINCT T2.BusinessEntityID, T2.JobTitle FROM Document AS T1 INNER JOIN Employee AS T2 ON T1.Owner = T2.BusinessEntityID WHERE T1.Status = 2", "source_tables": ["employee", "document"]}, "evidence": "document has been approved refers to Status = 2"}
{"sample_id": 7059, "db_id": "works_cycles", "final": {"question": "What is the pay rate of the employee who has the longest vacation hours?", "sql": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T2.VacationHours DESC LIMIT 1", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "longest vacation hour refers to max(VacationHours)"}
{"sample_id": 7014, "db_id": "works_cycles", "final": {"question": "List down the product name, reviewer name, rating and comments for product under the road line.", "sql": "SELECT T1.Name, T2.ReviewerName, T2.Rating, T2.Comments FROM Product AS T1 INNER JOIN ProductReview AS T2 USING (productID) WHERE T1.ProductLine = 'R'", "source_tables": ["productreview", "product"]}, "evidence": "The Road line refers to the product line, therefore ProductLine = 'R'"}
{"sample_id": 7278, "db_id": "works_cycles", "final": {"question": "What is the current status of the order with the highest shipping cost?", "sql": "SELECT Status FROM SalesOrderHeader ORDER BY Freight DESC LIMIT 1", "source_tables": ["salesorderheader"]}, "evidence": "shipping cost and Freight are synonyms; highest shipping cost refers to MAX(Freight);"}
{"sample_id": 7219, "db_id": "works_cycles", "final": {"question": "What is the total shipment by \"cargo transport 5\" cost of all purchase orders created on 12/14/2011?", "sql": "SELECT SUM(t2.freight) FROM ShipMethod AS t1 INNER JOIN PurchaseOrderHeader AS t2 ON t1.shipmethodid = t2.shipmethodid WHERE t1.name = 'cargo transport 5' AND t2.orderdate = '2011-12-14'", "source_tables": ["shipmethod", "purchaseorderheader"]}, "evidence": "Catgo Transport 5 is a name of shipping method; OrderDate = '2011-12-14'; total shipment cost = SUM(Freight);"}
{"sample_id": 7411, "db_id": "works_cycles", "final": {"question": "Please list the e-mail addresses of all the employees who wish to receive e-mail promotions from Adventureworks and selected partners.", "sql": "SELECT T2.EmailAddress FROM Person AS T1 INNER JOIN EmailAddress AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.EmailPromotion = 2", "source_tables": ["emailaddress", "person"]}, "evidence": "employees who wish to receive e-mail promotions from AdventureWorks and selected partners refers to EmailPromotion = 2;"}
{"sample_id": 7322, "db_id": "works_cycles", "final": {"question": "Calculate the average length of employment for employee working in the Research and Development deparment.", "sql": "SELECT AVG(STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.HireDate)) FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T3.Name = 'Research and Development'", "source_tables": ["department", "employeedepartmenthistory", "employee"]}, "evidence": "average length of employment = AVG(subtract(2022, year(HireDate)))"}
{"sample_id": 7441, "db_id": "works_cycles", "final": {"question": "What is the thumbnail photo file for the product with the id \"979\"?", "sql": "SELECT T2.ThumbnailPhotoFileName FROM ProductProductPhoto AS T1 INNER JOIN ProductPhoto AS T2 ON T1.ProductPhotoID = T2.ProductPhotoID WHERE T1.ProductID = 979", "source_tables": ["productproductphoto", "productphoto"]}, "evidence": "thumbnail photo file refers to ThumbnailPhotoFileName;"}
{"sample_id": 7343, "db_id": "works_cycles", "final": {"question": "What is the difference between the actual manufacturing cost of product number 818 and the estimated manufacturing cost?", "sql": "SELECT PlannedCost - ActualCost FROM WorkOrderRouting WHERE ProductID = 818", "source_tables": ["workorderrouting"]}, "evidence": "product number 818 refers to ProductID = 818; estimated manufacturing cost refers PlannedCost; actual manufacturing cost refers to ActualCost; difference = Substract(PlannedCost(ProductID(818))),(ActualCost(ProductID(818)));"}
{"sample_id": 7309, "db_id": "works_cycles", "final": {"question": "Name all person in the individual retail whose last name is 'Anderson'.", "sql": "SELECT FirstName, MiddleName, LastName FROM Person WHERE LastName = 'Anderson' AND PersonType = 'IN'", "source_tables": ["person"]}, "evidence": "person in the individual retail refers to PersonType = 'IN'"}
{"sample_id": 7112, "db_id": "works_cycles", "final": {"question": "Please list any 3 product numbers with the lowest standard cost.", "sql": "SELECT ProductID FROM ProductCostHistory ORDER BY StandardCost ASC LIMIT 3", "source_tables": ["productcosthistory"]}, "evidence": "product number = productID"}
{"sample_id": 7292, "db_id": "works_cycles", "final": {"question": "What is the highest vendor's selling price for Hex Nut 5?", "sql": "SELECT T1.StandardPrice FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Hex Nut 5' ORDER BY T1.StandardPrice DESC LIMIT 1", "source_tables": ["productvendor", "product"]}, "evidence": "vendor's selling price refers to StandardPrice"}
{"sample_id": 7503, "db_id": "image_and_language", "final": {"question": "What is the object whose attribute is blurry in image no.2377993? Give the explanation about the object.", "sql": "SELECT T4.OBJ_CLASS_ID, T4.OBJ_CLASS FROM IMG_OBJ_att AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T2.ATT_CLASS = 'blurry' AND T1.IMG_ID = 22377993", "source_tables": ["att_classes", "obj_classes", "img_obj_att", "img_obj"]}, "evidence": "attribute is blurry refers to ATT_CLASS = 'blurry'; image no.2377993 refers to IMG_ID = 22377993; explanation about the object refers to OBJ_CLASS"}
{"sample_id": 7565, "db_id": "image_and_language", "final": {"question": "What is the ratio between the number of object samples in image 1 and the number of object samples in image 6?", "sql": "SELECT CAST(SUM(CASE WHEN IMG_ID = 1 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN IMG_ID = 6 THEN 1 ELSE 0 END) FROM IMG_OBJ", "source_tables": ["img_obj"]}, "evidence": "DIVIDE(SUM(OBJ_SAMPLE_ID where IMG_ID = 1), SUM(OBJ_SAMPLE_ID where IMG_ID = 6));"}
{"sample_id": 7572, "db_id": "image_and_language", "final": {"question": "What are the attributes of the widest object in image 400?", "sql": "SELECT T1.ATT_CLASS FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID WHERE T2.IMG_ID = 400 ORDER BY T3.W DESC LIMIT 1", "source_tables": ["img_obj", "att_classes", "img_obj_att"]}, "evidence": "attributes refer to ATT_CLASS; the widest relates to the width of the bounding\nbox of the object which refers to MAX(W); image 400 refers to IMG_ID = 400;"}
{"sample_id": 7495, "db_id": "image_and_language", "final": {"question": "How many white objects are there in image no.2347915?", "sql": "SELECT SUM(CASE WHEN T2.ATT_CLASS = 'white' THEN 1 ELSE 0 END) FROM IMG_OBJ_ATT AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 2347915", "source_tables": ["att_classes", "img_obj_att"]}, "evidence": "white objects refers to ATT_CLASS = 'white'; image no.2347915 refers to IMG_ID = 2347915"}
{"sample_id": 7547, "db_id": "image_and_language", "final": {"question": "How many object samples in image no.908 are in the class of tip?", "sql": "SELECT SUM(CASE WHEN T2.OBJ_CLASS = 'tip' THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 908", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "object samples in the class of \"tip\" refer to OBJ_CLASS_ID where OBJ_CLASS = 'tip'; image no.5 refers to IMG_ID = 5;"}
{"sample_id": 7497, "db_id": "image_and_language", "final": {"question": "What is the relationship between object sample no.12 and no.8 of image no.2345511?", "sql": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 2345511 AND T2.OBJ1_SAMPLE_ID = 12 AND T2.OBJ2_SAMPLE_ID = 8", "source_tables": ["pred_classes", "img_rel"]}, "evidence": "relationship refers to PRED_CLASS; object sample no.12 and no.8 of image no.2345511 refers to IMG_ID = 2345511 AND OBJ1_SAMPLE_ID = 12 AND OBJ2_SAMPLE_ID = 8"}
{"sample_id": 7498, "db_id": "image_and_language", "final": {"question": "Give the object number of the sample which has the relationship of \"lying on\" with object sample no.1 from image no.2345524.", "sql": "SELECT T2.OBJ1_SAMPLE_ID FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 2345524 AND T1.PRED_CLASS = 'lying on' AND T2.OBJ2_SAMPLE_ID = 1", "source_tables": ["pred_classes", "img_rel"]}, "evidence": "object number of the sample refers to OBJ1_SAMPLE_ID; object sample no.1 from image no.2345524 refers to OBJ2_SAMPLE_ID = 1 and IMG_ID = 2345524"}
{"sample_id": 7504, "db_id": "image_and_language", "final": {"question": "How many samples of \"wall\" are there in image no.2353079?", "sql": "SELECT SUM(CASE WHEN T1.OBJ_CLASS = 'wall' THEN 1 ELSE 0 END) FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 2353079", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "samples of \"wall\" refers to OBJ_SAMPLE_ID and OBJ_CLASS = 'wall' ; image no.2353079 refers to IMG_ID = 2353079"}
{"sample_id": 7571, "db_id": "image_and_language", "final": {"question": "How many images have objects with the attributes of polka dot?", "sql": "SELECT COUNT(T2.OBJ_SAMPLE_ID) FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.ATT_CLASS = 'polka dot'", "source_tables": ["att_classes", "img_obj_att"]}, "evidence": "attributes of polka dot refer to ATT_CLASS = 'polka dot'; images refer to IMG_ID;"}
{"sample_id": 7524, "db_id": "image_and_language", "final": {"question": "What is the object class of the image with a bounding box of 0, 0, 135, 212?", "sql": "SELECT T1.OBJ_CLASS FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.X = 0 AND T2.Y = 0 AND T2.W = 135 AND T2.H = 212", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "object class of the image refers to OBJ_CLASS; bounding box of 0, 0, 135, 212 refers to X = 0 AND Y = 0 AND W = 135 AND H = 212"}
{"sample_id": 7595, "db_id": "image_and_language", "final": {"question": "Calculate the ratio of the total number of images with an object class of \"man\" and \"person\".", "sql": "SELECT CAST(COUNT(CASE WHEN T2.OBJ_CLASS = 'man' THEN 1 ELSE 0 END) AS REAL) / COUNT(CASE WHEN T2.OBJ_CLASS = 'person' THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "DIVIDE(COUNT(IMG_ID where OBJ_CLASS = 'man'), COUNT(IMG_ID where OBJ_CLASS = 'person'));"}
{"sample_id": 7499, "db_id": "image_and_language", "final": {"question": "How many samples of food object are there in image no.6?", "sql": "SELECT COUNT(T2.OBJ_SAMPLE_ID) FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 6 AND T1.OBJ_CLASS = 'food'", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "samples of food object refers to OBJ_CLASS = 'food'; image no.6 refers to IMG_ID = 6"}
{"sample_id": 7514, "db_id": "image_and_language", "final": {"question": "What is the bounding box of the object with image id 4 and a prediction relationship class id of 144?", "sql": "SELECT T2.X, T2.Y, T2.W, T2.H FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID WHERE T1.PRED_CLASS_ID = 144 AND T1.IMG_ID = 3", "source_tables": ["img_obj", "img_rel"]}, "evidence": "bounding box of the object refers to (x, y, W, H); image id refers to IMG_ID; prediction relationship class id of 144 refers to PRED_CLASS_ID = 144"}
{"sample_id": 7520, "db_id": "image_and_language", "final": {"question": "List all the explanations about object classes of all the images with an x and y coordinate of 0.", "sql": "SELECT T1.OBJ_CLASS FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.X = 0 AND T2.Y = 0 GROUP BY T1.OBJ_CLASS", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "explanations about distinct object classes refers to OBJ_CLASS; images refers to IMG_ID; x and y coordinate of 0 refers to X = 0 AND Y = 0"}
{"sample_id": 7548, "db_id": "image_and_language", "final": {"question": "List out the number of object samples in image no.41 which are in the class of \"kitchen\"?", "sql": "SELECT SUM(CASE WHEN T2.OBJ_CLASS = 'kitchen' THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 41", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "object samples in the class of \"kitchen\" refer to OBJ_CLASS_ID where OBJ_CLASS = 'kitchen'; image no.41 refers to IMG_ID = 41 ;"}
{"sample_id": 7568, "db_id": "image_and_language", "final": {"question": "List all the object classes in image 10.", "sql": "SELECT DISTINCT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 10", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "object classes refer to OBJ_CLASS; image 10 refers to IMG_ID = 10;"}
{"sample_id": 7580, "db_id": "image_and_language", "final": {"question": "How many images have a total of 10 attribute classes?", "sql": "SELECT COUNT(IMG_ID) FROM IMG_OBJ WHERE OBJ_CLASS_ID = 10", "source_tables": ["img_obj"]}, "evidence": "images refer to IMG_ID; total of 10 attribute classes refers to COUNT(OBJ_CLASS_ID) = 10;"}
{"sample_id": 7564, "db_id": "image_and_language", "final": {"question": "Which object has the highest attribute classes?", "sql": "SELECT OBJ_SAMPLE_ID FROM IMG_OBJ_ATT GROUP BY OBJ_SAMPLE_ID ORDER BY COUNT(OBJ_SAMPLE_ID) DESC LIMIT 1", "source_tables": ["img_obj_att"]}, "evidence": "object has the highest attribute classes refers to OBJ_SAMPLE_ID where MAX(COUNT(OBJ_SAMPLE_ID));"}
{"sample_id": 7528, "db_id": "image_and_language", "final": {"question": "How many objects can you spot in image no. 72? What objects may be identified on the same image and within the bounding box represented as (341, 27, 42, 51)?", "sql": "SELECT SUM(IIF(T1.IMG_ID = 1, 1, 0)), SUM(IIF(T1.X = 341 AND T1.Y = 27 AND T1.W = 42 AND T1.H = 51, 1, 0)) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "How many objects refers to OBJ_CLASS_ID; image no. 72 refers to IMG_ID = 72; What objects refers to OBJ_CLASS; bounding box represented as (341, 27, 42, 51) refers to X = 341 and Y = 27 and W = 42 and H = 51"}
{"sample_id": 7490, "db_id": "image_and_language", "final": {"question": "What is the percentage of the object samples in the class of \"man\" in image no.1?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.OBJ_CLASS = 'man' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.OBJ_CLASS_ID) FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 1", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "object samples refers to OBJ_SAMPLE_ID; class of \"man\" refers to OBJ_CLASS = 'man'; image no.1 refers to IMG_ID = 1; percentage = divide(count(OBJ_SAMPLE_ID)when OBJ_CLASS = 'man', count(OBJ_SAMPLE_ID)) as percentage"}
{"sample_id": 7531, "db_id": "image_and_language", "final": {"question": "Name the object element that is described as being scattered on image no. 10.", "sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID INNER JOIN IMG_OBJ_ATT AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN ATT_CLASSES AS T4 ON T3.ATT_CLASS_ID = T4.ATT_CLASS_ID WHERE T4.ATT_CLASS = 'scattered' AND T1.IMG_ID = 10 GROUP BY T2.OBJ_CLASS", "source_tables": ["img_obj", "obj_classes", "img_obj_att", "att_classes"]}, "evidence": "Name the object element refers to OBJ_CLASS; scattered refers to ATT_CLASS = 'scattered'; image no. 10 refers to IMG_ID = 10"}
{"sample_id": 7505, "db_id": "image_and_language", "final": {"question": "State the object class of sample no.10 of image no.2320341.", "sql": "SELECT T1.OBJ_CLASS FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 2320341 AND T2.OBJ_SAMPLE_ID = 10", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "object class refers to OBJ_CLASS; sample no.10 refers to OBJ_SAMPLE_ID = 10; image no.2320341 refers to IMG_ID = 2320341"}
{"sample_id": 7560, "db_id": "image_and_language", "final": {"question": "Indicating the bounding box of \"kitchen\" in image id 250.", "sql": "SELECT T1.X, T1.Y, T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 250 AND T2.OBJ_CLASS = 'kitchen'", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "bounding box refers to X, Y, W, H from IMG_OBJ; \"kitchen\" in image id 250 refers to OBJ_CLASS = 'kitchen' where IMG_ID = 250;"}
{"sample_id": 7511, "db_id": "image_and_language", "final": {"question": "What are the corresponding classes for the \"very large bike\" attribute?", "sql": "SELECT ATT_CLASS_ID FROM ATT_CLASSES WHERE ATT_CLASS = 'very large'", "source_tables": ["att_classes"]}, "evidence": "attribute refers to ATT_CLASS"}
{"sample_id": 7529, "db_id": "image_and_language", "final": {"question": "On image no. 5, name the attributes that are composed of multiple objects.", "sql": "SELECT T2.ATT_CLASS FROM IMG_OBJ_ATT AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 5 GROUP BY T2.ATT_CLASS HAVING COUNT(T2.ATT_CLASS) > 2", "source_tables": ["att_classes", "img_obj_att"]}, "evidence": "image no. 5 refers to IMG_ID = 5; name the attributes refers to ATT_CLASS; multiple objects refers to count(ATT_CLASS) > = 2"}
{"sample_id": 7557, "db_id": "image_and_language", "final": {"question": "How many samples of animal objects are there in image no.660?", "sql": "SELECT COUNT(T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'animal' AND T1.IMG_ID = 660", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "samples of animal objects refer to OBJ_SAMPLE_ID where OBJ_CLASS = 'animal'; image no.660 refers to IMG_ID = 660;"}
{"sample_id": 7542, "db_id": "image_and_language", "final": {"question": "How many attribute classes are there for image id 5?", "sql": "SELECT COUNT(ATT_CLASS_ID) FROM IMG_OBJ_ATT WHERE IMG_ID = 5", "source_tables": ["img_obj_att"]}, "evidence": "attribute classes refer to ATT_CLASS_ID; image id 5 refers to IMG_ID = 5;"}
{"sample_id": 7780, "db_id": "hockey", "final": {"question": "What is the average winning rate of the Buffalo Sabres in 2000?", "sql": "SELECT SUM(CAST(T2.W AS REAL) / T2.G) / COUNT(T1.oppID) FROM TeamVsTeam AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID WHERE T2.name = 'Buffalo Sabres' AND T1.year = 2000", "source_tables": ["teamvsteam", "teams"]}, "evidence": "DIVIDE(SUM(DIVIDE(W,G), COUNT(oppID) where year = 2000; Montreal Canadiens is name of team;"}
{"sample_id": 7752, "db_id": "hockey", "final": {"question": "What is the power play chances of New York Rangers in 2009?", "sql": "SELECT CAST(PPG AS REAL) / PPC FROM Teams WHERE year = 2009 AND name = 'New York Rangers'", "source_tables": ["teams"]}, "evidence": "power play chanses = DIVIDE (PPG, PPC); name = New York Rangers; year = 2009"}
{"sample_id": 7787, "db_id": "hockey", "final": {"question": "How many hall of famers both played and coached in the league?", "sql": "SELECT COUNT(playerID) FROM Master WHERE hofID IS NOT NULL AND playerID IS NOT NULL AND coachID IS NOT NULL", "source_tables": ["master"]}, "evidence": "hall of famers refers to hofID; both played and coached means playerID is not NULL and coachID is not NULL;"}
{"sample_id": 7727, "db_id": "hockey", "final": {"question": "How many wins does the team have whose goaltender have the most number of successfully stopping the other team from scoring during the entire game?", "sql": "SELECT SUM(W) FROM Goalies GROUP BY tmID ORDER BY SUM(SHO) DESC LIMIT 1", "source_tables": ["goalies"]}, "evidence": "Number of wins refers to W; Shutout refers to SHO; a shutout is credited to a goaltender who successfully stops the other team from scoring during the entire game.\n"}
{"sample_id": 7687, "db_id": "hockey", "final": {"question": "In how many games did player Id \"vernomi01\" end up with a tie or an overtime loss in the 1998 season?", "sql": "SELECT \"T/OL\" FROM Goalies WHERE playerID = 'vernomi01' AND year = 1998", "source_tables": ["goalies"]}, "evidence": "end up with a tie or an overtime loss refers to T/OL"}
{"sample_id": 7803, "db_id": "hockey", "final": {"question": "Who is the heaviest player? State player ID of 5 heaviest players.", "sql": "SELECT playerID FROM Master ORDER BY weight DESC LIMIT 5", "source_tables": ["master"]}, "evidence": "5 heaviest players refer to MAX(weight) limit to 5 playerID;"}
{"sample_id": 7786, "db_id": "hockey", "final": {"question": "In the year 1958, what is the total number of players that became hall of famers?", "sql": "SELECT COUNT(hofID) FROM HOF WHERE category = 'Player' AND year = 1958", "source_tables": ["hof"]}, "evidence": "hall of famers refers to hofID; players stand for category;"}
{"sample_id": 7704, "db_id": "hockey", "final": {"question": "Who made the most assists in a single game in the Stanley Cup finals ?", "sql": "SELECT playerID FROM ScoringSC ORDER BY A DESC LIMIT 1", "source_tables": ["scoringsc"]}, "evidence": "the most assists refers to max(A)"}
{"sample_id": 7757, "db_id": "hockey", "final": {"question": "Which team had the highest penalty kill chances in 1995, Florida Panthers, Edmonton Oilers or Los Angeles Kings?", "sql": "SELECT name FROM Teams WHERE year = 1995 AND name IN ('Florida Panthers', 'Edmonton Oilers', 'Los Angeles Kings') ORDER BY PKC DESC LIMIT 1", "source_tables": ["teams"]}, "evidence": "the highest penalty kill chances refer to MAX(PKC); year = 1995;"}
{"sample_id": 7769, "db_id": "hockey", "final": {"question": "Among the coaches who have taught the Philadelphia Flyers, how many of them are born in March?", "sql": "SELECT COUNT(DISTINCT T3.coachID) FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Philadelphia Flyers' AND T3.birthMon = 3", "source_tables": ["coaches", "master", "teams"]}, "evidence": "born in March refers to birthMon = 3; Philadelphia Flyers is the name of team;"}
{"sample_id": 7765, "db_id": "hockey", "final": {"question": "Please list the first names of the coaches who have taught the Montreal Canadiens.", "sql": "SELECT DISTINCT T3.firstName FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Montreal Canadiens'", "source_tables": ["coaches", "master", "teams"]}, "evidence": "Montreal Canadiens is the name of team."}
{"sample_id": 7674, "db_id": "hockey", "final": {"question": "Among the players who were born in July and August, how many of them got in the Hall of Fame?", "sql": "SELECT COUNT(T1.playerID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T1.birthMon IN (7, 8)", "source_tables": ["hof", "master"]}, "evidence": "born in July and August refers to birthMon IN('7','8')"}
{"sample_id": 7797, "db_id": "hockey", "final": {"question": "Which Minnesota North Stars' goalkeeper had the most Goal Againsts in his play time?", "sql": "SELECT playerID FROM Goalies AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.name = 'Minnesota North Stars' GROUP BY T1.playerID ORDER BY SUM(T1.GA) DESC LIMIT 1", "source_tables": ["goalies", "teams"]}, "evidence": "Goals Against are the number of goals recorded while the goalie is on the ice; the most Goal Againsts refers to MAX(GA); Minnesota North Stars is name of team;"}
{"sample_id": 7672, "db_id": "hockey", "final": {"question": "Please list the awards the players who died in Arlington have won.", "sql": "SELECT T2.award FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.deathCity = 'Kemptville'", "source_tables": ["awardsplayers", "master"]}, "evidence": "died in Arlington refers to deathCity = 'Arlington'"}
{"sample_id": 7789, "db_id": "hockey", "final": {"question": "For the team that Scotty Bowman coached in 1982, how many bench minor penalties did they have that year?", "sql": "SELECT T2.BenchMinor FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T3.firstName = 'Scotty' AND T3.lastName = 'Bowman' AND T1.year = 1982", "source_tables": ["coaches", "master", "teams"]}, "evidence": "bench minor penalties refer to BenchMinor; Scotty Bowman is a coach; year = 1982;"}
{"sample_id": 7768, "db_id": "hockey", "final": {"question": "Please list the first names of the coaches whose team played in 1922's Stanley Cup finals.", "sql": "SELECT T3.firstName FROM Coaches AS T1 INNER JOIN TeamsSC AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.year = 1922", "source_tables": ["teamssc", "coaches", "master"]}, "evidence": "teams refer to tmID; year = 1922;"}
{"sample_id": 7709, "db_id": "hockey", "final": {"question": "How many years were there after Don Waddell retired and became a coach in NHL?", "sql": "SELECT MAX(T2.year) - MIN(T2.year) FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T1.firstName = 'Don' AND T1.lastName = 'Waddell'", "source_tables": ["coaches", "master"]}, "evidence": "after retired and became a coach refers to max(subtract(year, lastNHL))"}
{"sample_id": 7636, "db_id": "hockey", "final": {"question": "Name the goalies and season they played when Boston Bruins won number 1 in rank.", "sql": "SELECT T1.firstName, T1.lastName, T3.year FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.year = T3.year AND T2.tmID = T3.tmID WHERE T1.deathYear IS NOT NULL AND T3.name = 'Boston Bruins' AND T3.rank = 1 AND T1.pos = 'G'", "source_tables": ["goalies", "master", "teams"]}, "evidence": "goalies refers to pos = 'G'; season refers to year\n"}
{"sample_id": 7647, "db_id": "hockey", "final": {"question": "Among the players who won an award in the year 1983, how many of them play the position of goalie?", "sql": "SELECT COUNT(playerID) FROM AwardsPlayers WHERE pos = 'G' AND year = 1983", "source_tables": ["awardsplayers"]}, "evidence": "position of goalie refers to pos = 'G'"}
{"sample_id": 7799, "db_id": "hockey", "final": {"question": "For the goalie who had the most shutouts in 2010, what's his catching hand?", "sql": "SELECT T2.shootCatch FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 2010 GROUP BY T2.shootCatch ORDER BY SUM(T1.SHO) DESC LIMIT 1", "source_tables": ["goalies", "master"]}, "evidence": "the most shutouts refer to MAX(SHO); catching hand refers to shootCatch; year = 2010;"}
{"sample_id": 7706, "db_id": "hockey", "final": {"question": "What position did player id \"hartgi01\" play in his Stanley Cup finals performance?", "sql": "SELECT DISTINCT pos FROM ScoringSC WHERE playerID = 'hartgi01'", "source_tables": ["scoringsc"]}, "evidence": "position refers to pos"}
{"sample_id": 7615, "db_id": "hockey", "final": {"question": "Who is the youngest player who is still living. State the given name and date of birth.", "sql": "SELECT nameGiven , nameGiven , birthYear, birthMon, birthDay FROM Master WHERE deathYear IS NULL ORDER BY birthYear DESC, birthMon DESC, birthday DESC LIMIT 1", "source_tables": ["master"]}, "evidence": "still living refers to deathYear IS NULL; youngest refers to MAX(birthYear,birthMon,birthDay)"}
{"sample_id": 7793, "db_id": "hockey", "final": {"question": "For the goalkeeper that became a coach than a Hall of Famer, who played for BOS in 1972?", "sql": "SELECT T2.firstName, T2.lastName , IIF(T1.tmID = 'BOS', 'YES', 'NO') FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 1972 AND T1.tmID = 'BOS' AND T2.coachID IS NOT NULL AND T2.hofID IS NULL", "source_tables": ["goalies", "master"]}, "evidence": "BOS refers to tmID = 'BOS'; year = 1972; became a coach than a Hall of Famer means coachID is not NULL and hofID is NULL;"}
{"sample_id": 7621, "db_id": "hockey", "final": {"question": "List all deceased goalies by last name. List the season where he had the most time played.", "sql": "SELECT T1.playerID, T2.year, Min FROM Master AS T1 INNER JOIN Goalies AS T2 ON T2.playerID = T1.playerID WHERE T1.deathYear IS NOT NULL ORDER BY T2.Min DESC LIMIT 1", "source_tables": ["goalies", "master"]}, "evidence": "deceased refers to deathYear; most time played refers to MAX(Min)"}
{"sample_id": 7767, "db_id": "hockey", "final": {"question": "Please give the height of the tallest coach of the Montreal Canadiens.", "sql": "SELECT T3.height FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Montreal Canadiens' AND T3.coachID IS NOT NULL ORDER BY T3.height DESC LIMIT 1", "source_tables": ["coaches", "master", "teams"]}, "evidence": "the tallest refers to MAX(height); Montreal Canadiens is the name of team;"}
{"sample_id": 7694, "db_id": "hockey", "final": {"question": "For the goalie who had the most shutouts in 2010, what's his catching hand?", "sql": "SELECT T1.shootCatch FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2010 GROUP BY T2.playerID ORDER BY SUM(T2.SHO) DESC LIMIT 1", "source_tables": ["goalies", "master"]}, "evidence": "the most shutouts refers to max(SHO); shootCatch = 'L' refers to lefthand; shootCatch = 'R' refers to righthand; shootCatch = 'null' or 'empty' means this player is good at both left and right hand"}
{"sample_id": 7616, "db_id": "hockey", "final": {"question": "For all the deceased players who are good at both left and right hand, list the player's name and the age when he died.", "sql": "SELECT firstName, lastName, deathYear - birthYear FROM Master WHERE shootCatch IS NULL AND deathYear IS NOT NULL", "source_tables": ["master"]}, "evidence": "age when he died refers to SUBTRACT(deathYear,birthYear); deceased refers to deathYear IS NOT NULL; good at both left and right hand refers to shootCatch IS NULL"}
{"sample_id": 7795, "db_id": "hockey", "final": {"question": "In the history of all the Quebec Bulldogs, which goalie had the most play minutes for the team? Give the full name.", "sql": "SELECT T2.firstName, T2.lastName FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T1.tmID = T3.tmID AND T1.year = T3.year WHERE T3.name = 'Quebec Bulldogs' AND T2.pos = 'D' GROUP BY T1.playerID, T2.firstName, T2.lastName ORDER BY SUM(T1.Min) DESC LIMIT 1", "source_tables": ["goalies", "master", "teams"]}, "evidence": "the most play minutes refer to MAX(Min); goalie refers to pos = 'G'; New York Islanders is the nameof team;"}
{"sample_id": 7818, "db_id": "hockey", "final": {"question": "In 1998, How many wins were made by team 'CAR' per game played? Who contributed the most goals? State the player ID.", "sql": "SELECT CAST(T1.W AS REAL) / T1.G, T2.playerID FROM Teams AS T1 INNER JOIN Scoring AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.tmID = 'CAR' AND T1.year = 1998 GROUP BY T1.W / T1.G, T2.playerID ORDER BY SUM(T2.G) DESC LIMIT 1", "source_tables": ["teams", "scoring"]}, "evidence": "year = 1998; wins per game played = DIVIDE(W, G); CAR refers to tmID; contributed the most goals refers to MAX(G);"}
{"sample_id": 7732, "db_id": "hockey", "final": {"question": "How many players, whose shooting/catching hand is both left and right, debuted their first NHL in 2011?", "sql": "SELECT COUNT(playerID) FROM Master WHERE shootCatch IS NULL AND firstNHL = '2011'", "source_tables": ["master"]}, "evidence": "shooting/catching hand is both left and right refers to shootCatch is NULL, debuted their first NHL in 2011 refers to firstNHL = 2011"}
{"sample_id": 7685, "db_id": "hockey", "final": {"question": "Show me how many minutes player Id \"valiqst01\" played in the game in 2007 season.", "sql": "SELECT Min FROM Goalies WHERE playerID = 'valiqst01' AND year = 2007", "source_tables": ["goalies"]}, "evidence": "show me how many minutes refers to Min"}
{"sample_id": 7662, "db_id": "hockey", "final": {"question": "Among the coaches who have received an award in 1940, how many of them are born in Toronto?", "sql": "SELECT COUNT(T1.coachID) FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 1940 AND T1.birthCity = 'Toronto'", "source_tables": ["master", "awardscoaches"]}, "evidence": "born in Toronto refers to birthCountry = 'Toronto'"}
{"sample_id": 7791, "db_id": "hockey", "final": {"question": "Which was the dominant hand for the goaltender who played 32 games for QUN in 1973? Give the full name.", "sql": "SELECT T2.shootCatch, T2.firstName, T2.lastName FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID AND T1.year = 1973 WHERE T1.tmID = 'QUN' AND T1.GP = 32", "source_tables": ["goalies", "master"]}, "evidence": "the dominant hand refers to shootCatch; year = 1973; tmID = 'QUN'; played 32 games refers to GP = 32;"}
{"sample_id": 7716, "db_id": "hockey", "final": {"question": "How many shots on goal did Cam Neely had in the year of 1990?", "sql": "SELECT T2.SOG FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T1.firstName = 'Cam' AND T1.lastName = 'Neely' AND T2.year = '1990'", "source_tables": ["master", "scoring"]}, "evidence": "1990 refers to the year played; Shot on goal refers to SOG\n"}
{"sample_id": 7785, "db_id": "hockey", "final": {"question": "For all the referees, who became a hall of famer in the 1970s? What's his hofID?", "sql": "SELECT name, hofID FROM HOF WHERE category = 'Builder' AND year BETWEEN 1970 AND 1979", "source_tables": ["hof"]}, "evidence": "1970s refers to year between 1970 and 1979; referees stand for category;"}
{"sample_id": 7682, "db_id": "hockey", "final": {"question": "How many years did player Id \"healygl01\" play?", "sql": "SELECT COUNT(year) FROM Goalies WHERE playerID = 'healygl01'", "source_tables": ["goalies"]}, "evidence": "years of playing = MAX(year)-MIN(year)"}
{"sample_id": 7644, "db_id": "hockey", "final": {"question": "What is given name for player 'aebisda01'. Calculate the average time in minutes for the all his games played as goaltender.", "sql": "SELECT T1.nameGiven, CAST(SUM(T2.Min) AS REAL) / SUM(T2.GP) FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T1.playerID = 'aebisda01' GROUP BY T1.nameGiven", "source_tables": ["goalies", "master"]}, "evidence": "played as goaltender refers to pos = 'G'; time in minutes refers to Min; all his games played refers to GP; average time in minutes refers to DIVIDE(SUM(Min)/SUM(GP))"}
{"sample_id": 7801, "db_id": "hockey", "final": {"question": "State the player ID and coach ID of person who have become coach after retirement.", "sql": "SELECT playerID, coachID FROM Master WHERE playerID IS NOT NULL AND coachID IS NOT NULL", "source_tables": ["master"]}, "evidence": "after retirement means playerID Iis not NULL and coachID is not NULL;"}
{"sample_id": 7653, "db_id": "hockey", "final": {"question": "Please list the name of the person who was in the Hall of Fame in the year 1978.", "sql": "SELECT name FROM HOF WHERE year = 1978", "source_tables": ["hof"]}, "evidence": ""}
{"sample_id": 7686, "db_id": "hockey", "final": {"question": "How many games did player Id \"vanbijo01\" win in the 1990 season?", "sql": "SELECT W FROM Goalies WHERE playerID = 'vanbijo01' AND year = 1990", "source_tables": ["goalies"]}, "evidence": "the number of wins refers to W"}
{"sample_id": 7689, "db_id": "hockey", "final": {"question": "Did legendsID \"P194502\" personally attend his Hall of Fame dedication?", "sql": "SELECT IIF(T1.note = 'posthumous', 'YES', 'NO') FROM AwardsMisc AS T1 RIGHT JOIN Master AS T2 ON T1.ID = T2.playerID WHERE T2.legendsID = 'P194502'", "source_tables": ["master", "awardsmisc"]}, "evidence": "note = 'posthumous'refers to \"didn't personally attend\""}
{"sample_id": 7835, "db_id": "world", "final": {"question": "Provide the country, population, capital city, and official language of the country with the smallest surface area.", "sql": "SELECT T1.Name, T1.Population, T1.Capital, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode INNER JOIN City AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' ORDER BY T1.SurfaceArea LIMIT 1", "source_tables": ["countrylanguage", "city", "country"]}, "evidence": "capital city refers to Capital; official language refers to IsOfficial = 'T'; smallest surface area refers to MIN(SurfaceArea);"}
{"sample_id": 7827, "db_id": "world", "final": {"question": "List the languages used in Turkmenistan.", "sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Turkmenistan'", "source_tables": ["countrylanguage", "country"]}, "evidence": "Turkmenistan is a name of country;"}
{"sample_id": 7911, "db_id": "world", "final": {"question": "How many cities are there in the country with the surface area of 652090?", "sql": "SELECT T2.Name, COUNT(T1.Name) FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.SurfaceArea = 652090 GROUP BY T2.Name", "source_tables": ["city", "country"]}, "evidence": ""}
{"sample_id": 7877, "db_id": "world", "final": {"question": "List down the official language of the countries which declared independence after 1990,", "sql": "SELECT T1.Name, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.IndepYear > 1990 AND T2.IsOfficial = 'T'", "source_tables": ["countrylanguage", "country"]}, "evidence": "official lanaguage refers to IsOfficial = 'T'; declared independence after 1990 refers to IndepYear > 1990;"}
{"sample_id": 7900, "db_id": "world", "final": {"question": "What are the official languages used in Greece?", "sql": "SELECT T1.Language FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.IsOfficial = 'T' AND T2.name = 'Greece'", "source_tables": ["countrylanguage", "country"]}, "evidence": "official language refers to IsOfficial = 'T'; Greece is a name of country;"}
{"sample_id": 7914, "db_id": "world", "final": {"question": "Provide the language used in the country ruled by Pierre Buyoya.", "sql": "SELECT T1.Language FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.HeadOfState = 'Pierre Buyoya'", "source_tables": ["countrylanguage", "country"]}, "evidence": "ruled by Pierre Buyoya refers to HeadOfState = 'Pierre Buyoya';"}
{"sample_id": 7881, "db_id": "world", "final": {"question": "What is the life expectancy of residents in the most crowded city?", "sql": "SELECT T2.LifeExpectancy FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population DESC LIMIT 1", "source_tables": ["city", "country"]}, "evidence": "most crowded city refers to MAX(Population);"}
{"sample_id": 7825, "db_id": "world", "final": {"question": "How many cities are there in the country with the largest surface area?", "sql": "SELECT T2.ID FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.SurfaceArea = ( SELECT MAX(SurfaceArea) FROM Country )", "source_tables": ["city", "country"]}, "evidence": "largest surface area refers to MAX(SurfaceArea);"}
{"sample_id": 7901, "db_id": "world", "final": {"question": "Give the population of the country where Queimados city belongs.", "sql": "SELECT T2.Population FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Queimados'", "source_tables": ["city", "country"]}, "evidence": ""}
{"sample_id": 7884, "db_id": "world", "final": {"question": "Which country has the smallest surface area and the most crowded city?", "sql": "SELECT T2.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population DESC, T2.SurfaceArea DESC LIMIT 1", "source_tables": ["city", "country"]}, "evidence": "smallest surface area refers to MIN(smallest surface area); most crowded city refers to MAX(Population);"}
{"sample_id": 7903, "db_id": "world", "final": {"question": "What is the surface area and GNP of the country where Namibe district belongs?", "sql": "SELECT T2.SurfaceArea, T2.GNP FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = 'Namibe'", "source_tables": ["city", "country"]}, "evidence": ""}
{"sample_id": 7893, "db_id": "world", "final": {"question": "How many countries have a life expectancy of 75.1?", "sql": "SELECT COUNT(*) FROM Country WHERE LifeExpectancy = 75.1", "source_tables": ["country"]}, "evidence": ""}
{"sample_id": 7913, "db_id": "world", "final": {"question": "What is the life expectancy of the people living in Calama city?", "sql": "SELECT T2.LifeExpectancy FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Calama'", "source_tables": ["city", "country"]}, "evidence": ""}
{"sample_id": 7862, "db_id": "world", "final": {"question": "What is the capital city of the Philippines?", "sql": "SELECT T1.Capital FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Philipiines'", "source_tables": ["city", "country"]}, "evidence": "capital city refers to Capital; Philippines is a name of country;"}
{"sample_id": 7870, "db_id": "world", "final": {"question": "List all the countries in the continent of Asia that use English as their unofficial language.", "sql": "SELECT T1.Name FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' AND T2.IsOfficial = 'F' GROUP BY T1.Name", "source_tables": ["countrylanguage", "country"]}, "evidence": "use English as unofficial language refers to Language = 'English' WHERE IsOfficial = 'F';"}
{"sample_id": 7873, "db_id": "world", "final": {"question": "Which country has the smallest surface area?", "sql": "SELECT Name FROM Country ORDER BY SurfaceArea ASC LIMIT 1", "source_tables": ["country"]}, "evidence": "smallest surface area refers to MIN(smallest surface area);"}
{"sample_id": 7917, "db_id": "world", "final": {"question": "Among the countries that use Italian as their language, what is the percentage of republic countries?", "sql": "SELECT CAST(SUM(CASE WHEN T2.GovernmentForm = 'Republic' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Italian'", "source_tables": ["countrylanguage", "country"]}, "evidence": "use Italian as their language refers to `Language` = 'Italian'; percentage = MULTIPLY(DIVIDE(SUM(`Language` = 'Italian' WHERE GovernmentForm = 'Republic'), COUNT(`Language` = 'Italian')), 100); use Italian as their language refers to `Language` = 'Italian'; republic countries refers to GovernmentForm = 'Republic';"}
{"sample_id": 7885, "db_id": "world", "final": {"question": "List down all cities of China.", "sql": "SELECT T1.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'China'", "source_tables": ["city", "country"]}, "evidence": "China is a name of country;"}
{"sample_id": 7858, "db_id": "world", "final": {"question": "How many countries have Socialistic Republic form of government?", "sql": "SELECT COUNT(Code) FROM Country WHERE GovernmentForm = 'Socialistic Republic'", "source_tables": ["country"]}, "evidence": "Socialistic Republic form of government refers to GovernmentForm = 'Socialistic Republic';"}
{"sample_id": 7922, "db_id": "music_platform_2", "final": {"question": "Name all the categories for podcast titled 'I Heart My Life Show'.", "sql": "SELECT T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'I Heart My Life Show'", "source_tables": ["podcasts", "categories"]}, "evidence": "'I Hearty My Life Show' is the title of podcast"}
{"sample_id": 7978, "db_id": "music_platform_2", "final": {"question": "What percentage of podcasts are \"technology\" podcasts? List all of them.", "sql": "SELECT CAST(SUM(CASE WHEN T1.category = 'technology' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.title) OR '%' \"percentage\" FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id", "source_tables": ["podcasts", "categories"]}, "evidence": "\"technology\" podcast refers to category = 'technology'; percentage = Divide (Count (podcast_id (category = 'technology')), Count (podcast_id)) * 100"}
{"sample_id": 7952, "db_id": "music_platform_2", "final": {"question": "To which categories do the podcasts of the reviewer whose id is EFB34EAC8E9397C belong?", "sql": "SELECT DISTINCT T1.category FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.author_id = 'EFB34EAC8E9397C'", "source_tables": ["reviews", "categories"]}, "evidence": "reviewer whose id is EFB34EAC8E9397C refers to author_id = 'EFB34EAC8E9397C'"}
{"sample_id": 7972, "db_id": "music_platform_2", "final": {"question": "What are the titles and categories of all the podcasts with a review that has \"Absolutely fantastic\" in it?", "sql": "SELECT T2.title, T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T3.content LIKE '%Absolutely fantastic%'", "source_tables": ["podcasts", "reviews", "categories"]}, "evidence": "review refers to content; 'Absolutely fantastic' in it refers to content like '%Absolutely fantastic%'"}
{"sample_id": 7964, "db_id": "music_platform_2", "final": {"question": "What is the least common category?", "sql": "SELECT category FROM categories GROUP BY category ORDER BY COUNT(podcast_id) ASC LIMIT 1", "source_tables": ["categories"]}, "evidence": "least common category refers to Min(Count(category))"}
{"sample_id": 7926, "db_id": "music_platform_2", "final": {"question": "Name all the podcast title and its category with average rating of more than 3.0.", "sql": "SELECT T2.title, T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id GROUP BY T3.podcast_id HAVING AVG(T3.rating) > 3", "source_tables": ["podcasts", "reviews", "categories"]}, "evidence": "average rating of more than 3.0 refers to avg(rating) > 3.0"}
{"sample_id": 7955, "db_id": "music_platform_2", "final": {"question": "In how many categories were podcast reviews created in the last six months of 2016? List them.", "sql": "SELECT COUNT(DISTINCT T1.category) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.created_at BETWEEN '2016-07-01T00:00:00-07:00' AND '2016-12-31T23:59:59-07:00'", "source_tables": ["reviews", "categories"]}, "evidence": "created in last six months of 2016 refers to created_at BETWEEN '2016-07-01T00:00:00-07:00' and '2016-12-31T23:59:59-07:00'"}
{"sample_id": 7974, "db_id": "music_platform_2", "final": {"question": "List the urls for all the \"fiction-science-fiction\" podcasts.", "sql": "SELECT itunes_url FROM podcasts WHERE podcast_id IN ( SELECT podcast_id FROM categories WHERE category = 'fiction-science-fiction' )", "source_tables": ["podcasts", "categories"]}, "evidence": "fiction-science-fiction podcasts refers to category = 'fiction-science-fiction'; urls refers to itunes_url"}
{"sample_id": 7953, "db_id": "music_platform_2", "final": {"question": "Indicate the slug and the itunes url of the podcast whose review content was written Can't stop listening.", "sql": "SELECT slug, itunes_url FROM podcasts WHERE podcast_id IN ( SELECT podcast_id FROM reviews WHERE content = 'Can''t stop listening' )", "source_tables": ["podcasts", "reviews"]}, "evidence": "review content was written Can't stop listening refers to content = 'Can't stop listening'"}
{"sample_id": 7924, "db_id": "music_platform_2", "final": {"question": "How many people rated 5 for the podcast which title contains the word 'spoiler' under the 'art' category '?", "sql": "SELECT COUNT(T3.podcast_id) FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T2.title LIKE '%spoilers%' AND T1.category = 'arts' AND T3.rating = 5", "source_tables": ["podcasts", "reviews", "categories"]}, "evidence": "rated 5 refers to rating = 5; contain the word 'spoilers' refers to title like '%spoilers%'; 'art' is the category name;"}
{"sample_id": 7951, "db_id": "music_platform_2", "final": {"question": "What are the titles of the podcasts whose reviews were created between 2018-08-22T11:53:16-07:00 and 2018-11-20T11:14:20-07:00?", "sql": "SELECT DISTINCT T1.title FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.created_at BETWEEN '2018-08-22T11:53:16-07:00' AND '2018-11-20T11:14:20-07:00'", "source_tables": ["podcasts", "reviews"]}, "evidence": "created between 2018-08-22T11:53:16-07:00 and 2018-11-20T11:14:20-07:00 refers to created at BETWEEN '2018-08-22T11:53:16-07:00' and '2018-11-20T11:14:20-07:00'"}
{"sample_id": 7948, "db_id": "music_platform_2", "final": {"question": "Indicates the title of all podcasts in the fiction category.", "sql": "SELECT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'fiction'", "source_tables": ["podcasts", "categories"]}, "evidence": ""}
{"sample_id": 7971, "db_id": "music_platform_2", "final": {"question": "List all the podcasts reviewed by a reviewer who has a review titled \"Inspired & On Fire!\".", "sql": "SELECT T1.title FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'Inspired & On Fire!'", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"Inspired & On Fire\" refers to title of review"}
{"sample_id": 8127, "db_id": "university", "final": {"question": "In which country does Johns Hopkins University located?", "sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'Johns Hopkins University'", "source_tables": ["country", "university"]}, "evidence": "Johns Hopkins University refers to university_name = 'Johns Hopkins University'; which country refers to country_name"}
{"sample_id": 8032, "db_id": "university", "final": {"question": "Provide the ID of the university with the highest percentage of female students in 2012.", "sql": "SELECT university_id FROM university_year WHERE year = 2012 ORDER BY pct_female_students DESC LIMIT 1", "source_tables": ["university_year"]}, "evidence": "in 2012 refers to year = 2012; highest percentage of female students\u00a0 refers to MAX(pct_female_students); ID of the university refers to university_id"}
{"sample_id": 8090, "db_id": "university", "final": {"question": "Show the id of University of Orl\u00e9ans.", "sql": "SELECT id FROM university WHERE university_name = 'University of Orl\u00e9ans'", "source_tables": ["university"]}, "evidence": "University of Orl\u00e9ans refers to university_name = 'University of Orl\u00e9ans';"}
{"sample_id": 8100, "db_id": "university", "final": {"question": "Which ranking system is criteria \"Total Shanghai\" in?", "sql": "SELECT T1.system_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T2.criteria_name = 'Total Shanghai'", "source_tables": ["ranking_system", "ranking_criteria"]}, "evidence": "criteria \"Total Shanghai\" refers to criteria_name = 'Total Shanghai'; which ranking system refers to system_name"}
{"sample_id": 8096, "db_id": "university", "final": {"question": "How many students were there in University of Michigan in 2011?", "sql": "SELECT COUNT(*) FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id WHERE T1.university_name = 'University of Michigan' AND T2.year = 2011", "source_tables": ["university", "university_year"]}, "evidence": "in 2011 refers to year 2011; in University of Michigan refers to university_name = 'University of Michigan';"}
{"sample_id": 8075, "db_id": "university", "final": {"question": "Please list the names of all the universities in Australia.", "sql": "SELECT T1.university_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Australia'", "source_tables": ["country", "university"]}, "evidence": "in Australia refers to country_name = 'Australia'; name of university refers to university_name"}
{"sample_id": 8042, "db_id": "university", "final": {"question": "Which universities have more than 100,000 students in 2011?", "sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T1.num_students > 100000", "source_tables": ["university", "university_year"]}, "evidence": "in 2011 refers to year 2011; more than 100,000 students refers to num_students > 100000; which university refers to university_name;"}
{"sample_id": 8081, "db_id": "university", "final": {"question": "Please list the names of all the ranking criteria of Harvard University in 2011.", "sql": "SELECT T1.criteria_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'Harvard University' AND T2.year = 2011", "source_tables": ["university", "ranking_criteria", "university_ranking_year"]}, "evidence": "in 2011 refers to year 2011; Harvard University refers to university_name = 'Harvard University'; names of all the ranking criteria refers to criteria_name"}
{"sample_id": 8021, "db_id": "university", "final": {"question": "In which country does the most populated university in 2014 located ?", "sql": "SELECT T2.country_id FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2014 ORDER BY T1.num_students DESC LIMIT 1", "source_tables": ["university", "university_year"]}, "evidence": "the most populated university refers to max(num_students); in 2014 refers to year = 2014"}
{"sample_id": 8040, "db_id": "university", "final": {"question": "Name the most famous university in Argentina.", "sql": "SELECT T1.university_name FROM university AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'Argentina' GROUP BY T1.university_name ORDER BY SUM(T2.score) DESC LIMIT 1", "source_tables": ["university_ranking_year", "country", "university"]}, "evidence": "in Argentina refers to country_name = 'Argentina';\u00a0 most famous refers to MAX(SUM(score))"}
{"sample_id": 8034, "db_id": "university", "final": {"question": "Name the university that had the most students in 2011.", "sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 ORDER BY T1.num_students DESC LIMIT 1", "source_tables": ["university", "university_year"]}, "evidence": "in 2011 refers to year = 2011; had the most students refers to MAX(num_students); name of university refers to university_name;"}
{"sample_id": 8026, "db_id": "university", "final": {"question": "Among universities that score below 80 in 2015, what is the percentage of international students?", "sql": "SELECT SUM(CAST(T1.num_students * T1.pct_international_students AS REAL) / 100) / COUNT(*) * 100 FROM university_year AS T1 INNER JOIN university_ranking_year AS T2 ON T1.university_id = T2.university_id WHERE T2.score < 80 AND T1.year = 2015", "source_tables": ["university_ranking_year", "university_year"]}, "evidence": "score below 80 refers to score < 80; in 2015 refers to year 2015; percentage of international students refers to DIVIDE(SUM(DIVIDE(MULTIPLY(num_students, pct_international_students), 100)), SUM(num_students))"}
{"sample_id": 8125, "db_id": "university", "final": {"question": "List the countries of universities that scored 70 and below in 2016.", "sql": "SELECT DISTINCT T3.country_name FROM university AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T2.score < 70 AND T2.year = 2016", "source_tables": ["university_ranking_year", "country", "university"]}, "evidence": "scored 70 and below refers to score < 70; in 2016 refers to year = 2016"}
{"sample_id": 8054, "db_id": "university", "final": {"question": "List the universities in Denmark.", "sql": "SELECT T1.university_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Denmark'", "source_tables": ["country", "university"]}, "evidence": "in Denmark refers to country_name = 'Denmark'; name of university refers to university_name;"}
{"sample_id": 8124, "db_id": "university", "final": {"question": "Provide the name of the university with the highest number of male students.", "sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id ORDER BY T1.num_students * T1.pct_female_students / 100 - T1.num_students DESC LIMIT 1", "source_tables": ["university", "university_year"]}, "evidence": "highest number of female students refers to MAX(SUBTRACT(num_students, DIVIDE(MULTIPLY(num_students, pct_female_students), 100))); name of university refers to university_name"}
{"sample_id": 8085, "db_id": "university", "final": {"question": "How many female students did Stanford University have in 2011?", "sql": "SELECT CAST(T1.num_students * T1.pct_female_students AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T2.university_name = 'Stanford University'", "source_tables": ["university", "university_year"]}, "evidence": "in 2011 refers to year 2011; female students refers to DIVIDE(MULTIPLY(pct_female_students, num_students), 100); Stanford University refers to university_name = 'Stanford University';"}
{"sample_id": 8045, "db_id": "university", "final": {"question": "What are the top three universities with the most international students?", "sql": "SELECT DISTINCT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id GROUP BY T2.university_name ORDER BY SUM(T1.num_students * T1.pct_international_students / 100) DESC LIMIT 3", "source_tables": ["university", "university_year"]}, "evidence": "most international students refers to MAX(SUM(DIVIDE(MULTIPLE(pct_international_students, num_students), 100))); name of university refers to university_name;"}
{"sample_id": 8097, "db_id": "university", "final": {"question": "For Chosun University, what was its score on \"Influence Rank\" in 2015?", "sql": "SELECT T2.score FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'Chosun University' AND T1.criteria_name = 'Influence Rank' AND T2.year = 2015", "source_tables": ["university", "ranking_criteria", "university_ranking_year"]}, "evidence": "Chosun University refers to university_name = 'Chosun University'; in 2015 refers to year = 2015; on \"Influence Rank\" refers to criteria_name = 'Influence Rank';"}
{"sample_id": 8113, "db_id": "university", "final": {"question": "In years 2011 to 2013, what is the total number of female students in university ID 40?", "sql": "SELECT SUM(CAST(num_students * pct_female_students AS REAL) / 100) FROM university_year WHERE year BETWEEN 2011 AND 2013 AND university_id = 40", "source_tables": ["university_year"]}, "evidence": "total number of female students refers to SUM(DIVIDE(MULTIPLY(pct_female_students, num_students), 100)); In years 2011 to 2013 refers to year BETWEEN 2011 AND 2013"}
{"sample_id": 8088, "db_id": "university", "final": {"question": "Which country is University of Veterinary Medicine Vienna located in? Give its country id.", "sql": "SELECT country_id FROM university WHERE university_name = 'University of Veterinary Medicine Vienna'", "source_tables": ["university"]}, "evidence": "University of Veterinary Medicine Vienna refers to university_name = 'University of Veterinary Medicine Vienna';"}
{"sample_id": 8010, "db_id": "university", "final": {"question": "Provide the number of international students and number of students in 2013 in university ID 20.", "sql": "SELECT pct_international_students * num_students, num_students FROM university_year WHERE year = 2013 AND university_id = 20", "source_tables": ["university_year"]}, "evidence": "number of international students refers to DIVIDE(MULTIPLY(pct_international_students, num_students), 100); in 2013 refers to year = 2013"}
{"sample_id": 8007, "db_id": "university", "final": {"question": "What is the university ID of the university with the largest student staff ratio?", "sql": "SELECT university_id FROM university_year ORDER BY student_staff_ratio DESC LIMIT 1", "source_tables": ["university_year"]}, "evidence": "the largest student staff ratio refers to max(student_staff_ratio)"}
{"sample_id": 8115, "db_id": "university", "final": {"question": "Give the student staff ratio of university ID 35.", "sql": "SELECT student_staff_ratio FROM university_year WHERE university_id = 35", "source_tables": ["university_year"]}, "evidence": ""}
{"sample_id": 8063, "db_id": "university", "final": {"question": "How many percent of universities got a score above 80 under International criteria in 2016? Among them, name the university which got the highest score.", "sql": "SELECT CAST(SUM(CASE WHEN T2.score > 80 THEN 1 ELSE 0 END) AS REAL) / COUNT(*), ( SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'International' AND T2.year = 2016 AND T2.score > 80 ORDER BY T2.score DESC LIMIT 1 ) AS max FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'International' AND T2.year = 2016", "source_tables": ["university", "ranking_criteria", "university_ranking_year"]}, "evidence": "got a score above 80 refers to score > 80; under International criteria refers to criteria_name = 'International'; in 2016 refers to year = 2016; highest score refers to MAX(score)"}
{"sample_id": 8077, "db_id": "university", "final": {"question": "Which country is Harvard University in?", "sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'Harvard University'", "source_tables": ["country", "university"]}, "evidence": "Harvard University refers to university_name = 'Harvard University'; which country refers to country_name"}
{"sample_id": 7995, "db_id": "university", "final": {"question": "In 2014, what is the name of the university which was considered a leader in the publications rank?", "sql": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Publications Rank' AND T2.year = 2014 AND T1.id = 17 ORDER BY T2.score DESC LIMIT 1", "source_tables": ["university", "ranking_criteria", "university_ranking_year"]}, "evidence": "In 2014 refers to year = 2014; leader refers to MAX(score); in the publications rank refers to criteria_name = 'Publications Rank'; name of university refers to university_name;"}
{"sample_id": 8122, "db_id": "university", "final": {"question": "List down all universities that scored below 50.", "sql": "SELECT DISTINCT T2.university_name FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.score < 50", "source_tables": ["university", "university_ranking_year"]}, "evidence": "scored below 50 refers to score < 50; all universities refers to university_name;"}
{"sample_id": 8082, "db_id": "university", "final": {"question": "What are the names of the universities that got 98 in teaching in 2011?", "sql": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 AND T2.score = 98", "source_tables": ["university", "ranking_criteria", "university_ranking_year"]}, "evidence": "in 2011 refers to year 2011; that got 98 refers to score = 98; in teaching refers to criteria_name = 'Teaching'; name of university refers to university_name"}
{"sample_id": 8055, "db_id": "university", "final": {"question": "Provide the number of staff at the University of Auckland in 2015.", "sql": "SELECT CAST(SUM(T1.num_students) AS REAL) / SUM(T1.student_staff_ratio) FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'University of Auckland' AND T1.year = 2015", "source_tables": ["university", "university_year"]}, "evidence": "University of Auckland refers to university_name = 'University of Auckland'; in 2015 refers to year = 2015; number of staff refers to DIVIDE(num_students, student_staff_ratio)"}
{"sample_id": 8069, "db_id": "university", "final": {"question": "Please list the IDs of the universities with a student staff ratio of over 15 in 2011.", "sql": "SELECT university_id FROM university_year WHERE year = 2011 AND student_staff_ratio > 15", "source_tables": ["university_year"]}, "evidence": "in 2011 refers to year 2011; student staff ratio of over 15 refers to student_staff_ratio > 15; ID of the university refers to university_id"}
{"sample_id": 8208, "db_id": "sales_in_weather", "final": {"question": "What is the sea level and average speed for store number 3 and store number 4?", "sql": "SELECT T1.sealevel, T1.avgspeed FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 3 OR T2.store_nbr = 4", "source_tables": ["weather", "relation"]}, "evidence": "store number 3 refers to store_nbr = 3; average speed refers to avgspeed; store number 4 refers to store_nbr = 4"}
{"sample_id": 8159, "db_id": "sales_in_weather", "final": {"question": "Give the average temperature of station no.20 on 2014/10/17.", "sql": "SELECT tavg FROM weather WHERE \"date\" = '2014-10-17' AND station_nbr = 20", "source_tables": ["weather"]}, "evidence": "station no.20 refers to station_nbr = 20; on 2014/10/17 refers to date = '2014-10-17'; average temperature refers to tavg"}
{"sample_id": 8141, "db_id": "sales_in_weather", "final": {"question": "Please list the dates on which the temperature of station no.2 was above the 30-year normal.", "sql": "SELECT \"date\" FROM weather WHERE station_nbr = 2 AND depart > 0", "source_tables": ["weather"]}, "evidence": "temperature above the 30-year normal refers to depart > 0; station no.2 refers to station_nbr = 2"}
{"sample_id": 8174, "db_id": "sales_in_weather", "final": {"question": "Give the station pressure status recorded by the weather station which contained no.12 store on 2012/5/15.", "sql": "SELECT T1.stnpressure FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.\"date\" = '2012-05-15' AND T2.store_nbr = 12", "source_tables": ["weather", "relation"]}, "evidence": "no.12 store refers to store_nbr = 12; on 2012/5/15 refers to date = '2012-05-15'; station pressure status refers to stnpressure"}
{"sample_id": 8203, "db_id": "sales_in_weather", "final": {"question": "What is the lowest minimum temperature recorded in store 16 on January 2012?", "sql": "SELECT MIN(tmin) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 16 AND T1.\"date\" LIKE '%2012-01%'", "source_tables": ["weather", "relation"]}, "evidence": "lowest minimum temperature refers to Min(tmin); store 16 refers to store_nbr = 16; on January 2012 refers to Substring (date, 1, 7) = '2012-01'"}
{"sample_id": 8183, "db_id": "sales_in_weather", "final": {"question": "Which weather station does the store that sold the highest quantity of item 9 belongs to?", "sql": "SELECT station_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE T1.item_nbr = 9 GROUP BY T2.station_nbr ORDER BY SUM(T1.units) DESC LIMIT 1", "source_tables": ["relation", "sales_in_weather"]}, "evidence": "item 9 refers to item_nbr = 9; sold the highest quantity refers to Max(Sum(units)); weather station refers to station_nbr"}
{"sample_id": 8214, "db_id": "sales_in_weather", "final": {"question": "What is the difference between the units sold for item 1 when the sunset was the earliest and the latest?", "sql": "SELECT ( SELECT SUM(T2.units) AS sumunit FROM weather AS T1 INNER JOIN sales_in_weather AS T2 ON T1.\"date\" = T2.\"date\" INNER JOIN relation AS T3 ON T2.store_nbr = T3.store_nbr WHERE T2.item_nbr = 5 AND sunset IS NOT NULL GROUP BY T1.sunset ORDER BY T1.sunset LIMIT 1 ) - ( SELECT SUM(T2.units) AS sumunit FROM weather AS T1 INNER JOIN sales_in_weather AS T2 ON T1.\"date\" = T2.\"date\" INNER JOIN relation AS T3 ON T2.store_nbr = T3.store_nbr WHERE T2.item_nbr = 5 AND sunset IS NOT NULL GROUP BY T1.sunset ORDER BY T1.sunset DESC LIMIT 1 )", "source_tables": ["weather", "relation", "sales_in_weather"]}, "evidence": "item 1 refers to item_nbr = 1; when the sunset earliest refers to Min(sunset); latest sunset refers to Max(sunset); difference unit sold refers to Subtract(Sum(units where Min(sunset)), Sum(units where Max(sunset)))"}
{"sample_id": 8143, "db_id": "sales_in_weather", "final": {"question": "What is the total number of units of item no.5 sold in store no.3 in 2012 on days when the temperature was below the 30-year normal?", "sql": "SELECT SUM(CASE WHEN T3.depart < 0 THEN units ELSE 0 END) AS sum FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.\"date\", 1, 4) = '2012' AND T1.item_nbr = 5", "source_tables": ["weather", "relation", "sales_in_weather"]}, "evidence": "item no.5 refers to item_nbr = 5; store no. 3 refers to store_nbr = 3; when the temperature was below the 30-year normal refers to depart < 0; in 2012 refers to SUBSTR(date, 1, 4) = '2012'; total number of units refers to Sum(units)"}
{"sample_id": 8162, "db_id": "sales_in_weather", "final": {"question": "Which weather station does store no.20 belong to?", "sql": "SELECT station_nbr FROM relation WHERE store_nbr = 20", "source_tables": ["relation"]}, "evidence": "store no.20 refers to store_nbr = 20; weather station refers to station_nbr"}
{"sample_id": 8198, "db_id": "sales_in_weather", "final": {"question": "How many days did the show fell more than 5 inches?", "sql": "SELECT COUNT(DISTINCT \"date\") FROM weather WHERE snowfall > 5", "source_tables": ["weather"]}, "evidence": "snow fell more than 5 inches refers to snowfall > 5"}
{"sample_id": 8202, "db_id": "sales_in_weather", "final": {"question": "How many stations were able to sell item 5 on January 2014?", "sql": "SELECT COUNT(DISTINCT T2.station_nbr) AS number FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE SUBSTR(\"date\", 1, 7) = '2014-01' AND item_nbr = 5", "source_tables": ["relation", "sales_in_weather"]}, "evidence": "item 5 refers to item_nbr = 5; on January 2014 refers to Substring (date, 1, 7) = '2014-01'"}
{"sample_id": 8194, "db_id": "sales_in_weather", "final": {"question": "Among the stations with 3 stores, how many stations have a station pressure of no more than 30 on February 18, 2014?", "sql": "SELECT COUNT(station_nbr) FROM weather WHERE \"date\" = '2014-02-18' AND stnpressure < 30 AND station_nbr IN ( SELECT station_nbr FROM relation GROUP BY station_nbr HAVING COUNT(store_nbr) = 3 )", "source_tables": ["weather", "relation"]}, "evidence": "station with 3 stores refers to station_nbr where Count(store_nbr) = 3; station pressure of no more than 30 refers to stnpressure < 30; On February 18, 2014 refers to date = '2014-02-18'"}
{"sample_id": 8166, "db_id": "sales_in_weather", "final": {"question": "Tell the wet-bulb temperature of the weather station which contained store no.6 on 2012/2/15.", "sql": "SELECT T1.wetbulb FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 14 AND T1.\"date\" = '2012-02-15'", "source_tables": ["weather", "relation"]}, "evidence": "store no.6 refers to store_nbr = 6; on 2012/2/15 refers to date = '2012-02-15'; wet-bulb temperature refers to wetbulb"}
{"sample_id": 8163, "db_id": "sales_in_weather", "final": {"question": "Tell the temperature range of the home weather station of store no.7 on 2014/4/28.", "sql": "SELECT T1.tmax - T1.tmin AS temprange FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 7 AND T1.\"date\" = '2014-04-28'", "source_tables": ["weather", "relation"]}, "evidence": "store no.7 refers to tore_nbr = 7; on 2014/4/28 refers to date = '2014-04-28'; temperature range refers to Subtract (tmax, tmin)"}
{"sample_id": 8197, "db_id": "sales_in_weather", "final": {"question": "What is the maximum average speed?", "sql": "SELECT MAX(avgspeed) FROM weather", "source_tables": ["weather"]}, "evidence": "maximum average speed refers to Max(avgspeed)"}
{"sample_id": 8160, "db_id": "sales_in_weather", "final": {"question": "Tell the resultant wind speed of station no.9 on 2014/1/15.", "sql": "SELECT resultspeed FROM weather WHERE \"date\" = '2014-01-15' AND station_nbr = 9", "source_tables": ["weather"]}, "evidence": "station no.9 refers to station_nbr = 9; on 2014/1/15 refers to date = '2014/01/15'; result wind speed refers to resultspeed"}
{"sample_id": 8467, "db_id": "mondial_geo", "final": {"question": "Name all countries in which have border with Bulgaria.", "sql": "SELECT T3.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 INNER JOIN country AS T3 ON T3.Code = T2.Country2 WHERE T1.Name = 'Bulgaria'", "source_tables": ["borders", "country"]}, "evidence": "Bulgaria is a country name"}
{"sample_id": 8298, "db_id": "mondial_geo", "final": {"question": "How many mountains are there in the country with the greatest population?", "sql": "SELECT COUNT(T2.Mountain) FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY T1.Population DESC LIMIT 1", "source_tables": ["geo_mountain", "country"]}, "evidence": ""}
{"sample_id": 8403, "db_id": "mondial_geo", "final": {"question": "What is the GDP for Service of the country with Fuenlabrada as its city.", "sql": "SELECT T4.Service * T4.GDP FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name INNER JOIN economy AS T4 ON T4.Country = T2.Country WHERE T3.Name = 'Fuenlabrada'", "source_tables": ["economy", "city", "province", "country"]}, "evidence": ""}
{"sample_id": 8414, "db_id": "mondial_geo", "final": {"question": "Based on the data shown at Target, what percentage of countries are non-Christian?", "sql": "SELECT 100 - (CAST(SUM(CASE WHEN Target = 'Christian' THEN 1 ELSE 0 END) AS REAL)) * 100 / COUNT(Country) FROM target", "source_tables": ["target"]}, "evidence": "percentage of countries are non-Christian = [count(non-Christian) / count(non-Christian + Christian)] * 100%"}
{"sample_id": 8269, "db_id": "mondial_geo", "final": {"question": "Where country does Baghdad belongs to?", "sql": "SELECT Name FROM country WHERE Province = 'Baghdad'", "source_tables": ["country"]}, "evidence": "Baghdad is one of provinces"}
{"sample_id": 8286, "db_id": "mondial_geo", "final": {"question": "What kind of government does Iran have?", "sql": "SELECT T2.Government FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Iran'", "source_tables": ["politics", "country"]}, "evidence": "Uganda is one of country names"}
{"sample_id": 8472, "db_id": "mondial_geo", "final": {"question": "What is the organization(s) that has 'National Society' as member type.", "sql": "SELECT T1.Name FROM organization AS T1 INNER JOIN isMember AS T2 ON T2.Country = T1.Country INNER JOIN country AS T3 ON T2.Country = T3.Code WHERE T2.Type = 'National Society'", "source_tables": ["ismember", "organization", "country"]}, "evidence": ""}
{"sample_id": 8479, "db_id": "mondial_geo", "final": {"question": "What is the newest established organization where Singapore is a member of?", "sql": "SELECT T3.Name FROM country AS T1 INNER JOIN isMember AS T2 ON T1.Code = T2.Country INNER JOIN organization AS T3 ON T3.Country = T2.Country WHERE T1.Name = 'Singapore' ORDER BY T3.Established DESC LIMIT 1", "source_tables": ["ismember", "organization", "country"]}, "evidence": ""}
{"sample_id": 8222, "db_id": "mondial_geo", "final": {"question": "State the country and its population with population growth greater than 2% but infant mortality rate less than 5%.", "sql": "SELECT T1.Name, T1.Population FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T2.Population_Growth > 2 AND T2.Infant_Mortality < 5", "source_tables": ["population", "country"]}, "evidence": ""}
{"sample_id": 8283, "db_id": "mondial_geo", "final": {"question": "For the country in which Olsztyn is located, where is the capital?", "sql": "SELECT T1.Capital FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Olsztyn'", "source_tables": ["city", "country"]}, "evidence": "Olsztyn is one of country names"}
{"sample_id": 8341, "db_id": "mondial_geo", "final": {"question": "Name the river at Little Rock city. State the length of the river.", "sql": "SELECT T3.Length FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T1.Name = 'Little Rock'", "source_tables": ["city", "river", "located"]}, "evidence": ""}
{"sample_id": 8398, "db_id": "mondial_geo", "final": {"question": "How many people are there in Fareham's mother country?", "sql": "SELECT T1.Population FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T3.Name = 'Fareham'", "source_tables": ["city", "province", "country"]}, "evidence": "Mother country refers to home country"}
{"sample_id": 8369, "db_id": "mondial_geo", "final": {"question": "What are the names of the three nations where the longest river that empties into the Atlantic Ocean stretches to?", "sql": "SELECT DISTINCT T1.Country FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Name = ( SELECT Name FROM river WHERE Sea = 'Atlantic Ocean' ORDER BY Length DESC LIMIT 1 )", "source_tables": ["city", "river", "located"]}, "evidence": "Empties into the Atlantic Ocean = flows to the Atlantic Ocean"}
{"sample_id": 8396, "db_id": "mondial_geo", "final": {"question": "How many percent of the total area of Russia is in Europe?", "sql": "SELECT T2.Percentage FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country WHERE T3.Name = 'Russia' AND T1.Name = 'Europe'", "source_tables": ["encompasses", "continent", "country"]}, "evidence": ""}
{"sample_id": 8386, "db_id": "mondial_geo", "final": {"question": "Among all the rivers finally flows to the sea of 540m in depth, which one has the longest length?", "sql": "SELECT T2.Name FROM sea AS T1 INNER JOIN river AS T2 ON T2.Sea = T1.Name WHERE T1.Depth = 540 ORDER BY T2.Length DESC LIMIT 1", "source_tables": ["sea", "river"]}, "evidence": ""}
{"sample_id": 8290, "db_id": "mondial_geo", "final": {"question": "Which country has the city of 114339 in population? Give the full name of the country.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.Country WHERE T2.Population = 114339", "source_tables": ["city", "country"]}, "evidence": ""}
{"sample_id": 8303, "db_id": "mondial_geo", "final": {"question": "How many deserts are there in a country where over 90% of people speaks Armenian?", "sql": "SELECT COUNT(T2.Desert) FROM country AS T1 INNER JOIN geo_desert AS T2 ON T1.Code = T2.Country INNER JOIN language AS T3 ON T1.Code = T2.Country WHERE T3.Name = 'Armenian' AND T3.Percentage > 90", "source_tables": ["geo_desert", "language", "country"]}, "evidence": ""}
{"sample_id": 8345, "db_id": "mondial_geo", "final": {"question": "What is the average height of all mountains in Nepal?", "sql": "SELECT AVG(T1.Height) FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain WHERE T2.Province = 'Nepal'", "source_tables": ["mountain", "geo_mountain"]}, "evidence": "Nepal is a province"}
{"sample_id": 8482, "db_id": "mondial_geo", "final": {"question": "List all the name and height of all mountains in Alaska", "sql": "SELECT T1.Name, T1.Height FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain WHERE T2.Province = 'Alaska'", "source_tables": ["mountain", "geo_mountain"]}, "evidence": "Alaska is a province"}
{"sample_id": 8495, "db_id": "mondial_geo", "final": {"question": "When did the country whose capital is Nouakchott attained it's independence?", "sql": "SELECT T2.Independence FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Capital = 'Nouakchott'", "source_tables": ["politics", "country"]}, "evidence": ""}
{"sample_id": 8432, "db_id": "mondial_geo", "final": {"question": "What is the geographic location of Aarhus city? Please provide the answer with the coordinates of the location.", "sql": "SELECT Longitude, Latitude FROM city WHERE Name = 'Aarhus'", "source_tables": ["city"]}, "evidence": "Longitude, Latitude = coordinates of the location"}
{"sample_id": 8241, "db_id": "mondial_geo", "final": {"question": "How much is her GDP in agriculture for the country with the least area?", "sql": "SELECT T2.GDP * T2.Agriculture FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T1.Area ASC LIMIT 1", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8282, "db_id": "mondial_geo", "final": {"question": "Which city in Japan has the most people in the country?", "sql": "SELECT T2.Name FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Japan' ORDER BY T2.Population DESC LIMIT 1", "source_tables": ["city", "country"]}, "evidence": "most people refers to largest population"}
{"sample_id": 8494, "db_id": "mondial_geo", "final": {"question": "What river has the 17th-longest length overall? Specify it's length.", "sql": "SELECT Name, Length FROM river ORDER BY Length DESC LIMIT 16, 1", "source_tables": ["river"]}, "evidence": ""}
{"sample_id": 8463, "db_id": "mondial_geo", "final": {"question": "For each organisations with headquarters in the USA, provide the its full name and the city where the headquarter is located at.", "sql": "SELECT Name, City FROM organization WHERE Country = 'USA'", "source_tables": ["organization"]}, "evidence": ""}
{"sample_id": 8243, "db_id": "mondial_geo", "final": {"question": "Among the countries with the African ethnic group, how many of them has a population of over 10000000?", "sql": "SELECT COUNT(T1.Name) FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'African' AND T1.Area > 10000000", "source_tables": ["country", "ethnicgroup"]}, "evidence": ""}
{"sample_id": 8321, "db_id": "mondial_geo", "final": {"question": "On which island does South Yorkshire situated? State it's longtitude and latitude.", "sql": "SELECT DISTINCT T3.Longitude, T3.Latitude FROM city AS T1 INNER JOIN locatedOn AS T2 ON T1.Name = T2.City INNER JOIN island AS T3 ON T3.Name = T2.Island WHERE T1.Province = 'South Yorkshire'", "source_tables": ["city", "locatedon", "island"]}, "evidence": "'South Yorkshire' is a province"}
{"sample_id": 8506, "db_id": "mondial_geo", "final": {"question": "What percentage of countries became independent during the year 1960?", "sql": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Independence) = '1960' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Country) FROM politics", "source_tables": ["politics"]}, "evidence": "Percentage = count(countries independent 1960) / total num of countries"}
{"sample_id": 8422, "db_id": "mondial_geo", "final": {"question": "In which lake flows the river that is, in turn, the mouth of the Manicouagan River?", "sql": "SELECT NAME FROM lake WHERE river = ( SELECT river FROM river WHERE NAME = 'Manicouagan' )", "source_tables": ["river", "lake"]}, "evidence": ""}
{"sample_id": 8351, "db_id": "mondial_geo", "final": {"question": "What is the name of the country whose citizens have the lowest purchasing power?", "sql": "SELECT T2.Name FROM economy AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code ORDER BY T1.Inflation DESC LIMIT 1", "source_tables": ["economy", "country"]}, "evidence": "Inflation can reduce purchasing power over time for recipients and payers."}
{"sample_id": 8258, "db_id": "mondial_geo", "final": {"question": "How many organizations are established after 1999/1/1 in a country whose GDP is under 500000?", "sql": "SELECT T1.Country, COUNT(T1.Country) FROM economy AS T1 INNER JOIN organization AS T2 ON T1.Country = T2.Country WHERE T1.GDP < 500000 AND STRFTIME('%Y', T2.Established) < '1999' GROUP BY T1.Country", "source_tables": ["economy", "organization"]}, "evidence": ""}
{"sample_id": 8349, "db_id": "mondial_geo", "final": {"question": "Which countries are dependent on the British Crown?", "sql": "SELECT Country FROM politics WHERE Government = 'British crown dependency'", "source_tables": ["politics"]}, "evidence": ""}
{"sample_id": 8496, "db_id": "mondial_geo", "final": {"question": "What is the name of the country with the smallest population, and what is its gross domestic product?", "sql": "SELECT T1.Name, T2.GDP FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T1.Population ASC LIMIT 1", "source_tables": ["economy", "country"]}, "evidence": "GDP refers to gross domestic product"}
{"sample_id": 8387, "db_id": "mondial_geo", "final": {"question": "In which Country is the second highest volcanic mountain located in? Give the code of the country.", "sql": "SELECT T3.Country FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province ORDER BY T1.Height DESC LIMIT 1, 1", "source_tables": ["mountain", "province", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8504, "db_id": "mondial_geo", "final": {"question": "What is the population density of the nation whose capital city is in the Distrito Federal province, and what portion of its gross domestic product is devoted to its industries?", "sql": "SELECT T1.Population / T1.Area, T2.Industry FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Province = 'Distrito Federal'", "source_tables": ["economy", "country"]}, "evidence": "ation and country are synonyms; Gross domestic product = GDP; Portion of GDP devoted to industries appears in economy.Industry; Population Density = Population / Area"}
{"sample_id": 8395, "db_id": "mondial_geo", "final": {"question": "Which two countries have the border in length of 803 km? Give the full names of the countries.", "sql": "SELECT T1.Name, T3.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 INNER JOIN country AS T3 ON T3.Code = T2.Country2 WHERE T2.Length = 803", "source_tables": ["borders", "country"]}, "evidence": ""}
{"sample_id": 8498, "db_id": "mondial_geo", "final": {"question": "What is the maximal elevation of the summit of the shortest mountain that can be found in the island of Madagaskar? Indicate what type of mountain it is.", "sql": "SELECT T3.Height, T3.Type FROM island AS T1 INNER JOIN mountainOnIsland AS T2 ON T1.Name = T2.Island INNER JOIN mountain AS T3 ON T3.Name = T2.Mountain WHERE T1.Name = 'Madagaskar' ORDER BY T3.Height DESC LIMIT 1", "source_tables": ["mountain", "mountainonisland", "island"]}, "evidence": "The elevation of the summit refers to height"}
{"sample_id": 8480, "db_id": "mondial_geo", "final": {"question": "Provide the population of the city of the 'World Tourism Organization' headquarter.", "sql": "SELECT T2.Population FROM organization AS T1 INNER JOIN city AS T2 ON T1.City = T2.Name WHERE T1.Name = 'World Tourism Organization'", "source_tables": ["organization", "city"]}, "evidence": ""}
{"sample_id": 8421, "db_id": "mondial_geo", "final": {"question": "Of all the lakes in Bolivia, which is the deepest?", "sql": "SELECT T1.Name FROM lake AS T1 INNER JOIN geo_lake AS T2 ON T1.Name = T2.Lake INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN country AS T4 ON T4.Code = T3.Country WHERE T4.Name = 'Bolivia' ORDER BY T1.Depth DESC LIMIT 1", "source_tables": ["geo_lake", "province", "country", "lake"]}, "evidence": "Bolivia is the country"}
{"sample_id": 8307, "db_id": "mondial_geo", "final": {"question": "What is the greatest length of the border between 2 independent countries?", "sql": "SELECT MAX(T3.Length) FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN borders AS T3 ON T3.Country1 = T2.Country WHERE T2.Independence IS NOT NULL", "source_tables": ["politics", "borders", "country"]}, "evidence": ""}
{"sample_id": 8289, "db_id": "mondial_geo", "final": {"question": "For the third largest country, which ethinic group has the most population?", "sql": "SELECT T2.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Name = ( SELECT Name FROM country ORDER BY Area DESC LIMIT 2, 1 ) GROUP BY T2.Name ORDER BY T2.Percentage * T1.Population DESC LIMIT 1", "source_tables": ["country", "ethnicgroup"]}, "evidence": ""}
{"sample_id": 8488, "db_id": "mondial_geo", "final": {"question": "In which city has the greatest population, what is its percentage to its country population?", "sql": "SELECT T3.Name, CAST(T3.Population AS REAL) * 100 / T1.Population FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Country = T2.Country ORDER BY T3.Population DESC LIMIT 1", "source_tables": ["city", "province", "country"]}, "evidence": ""}
{"sample_id": 8230, "db_id": "mondial_geo", "final": {"question": "Calculate the population of Arab in each country?", "sql": "SELECT T2.Percentage * T1.Population FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Arab'", "source_tables": ["country", "ethnicgroup"]}, "evidence": "Arab is the name of enthic groups in the country; Population of (Arab in each country) = (percentage of Arab) * (population of each country)"}
{"sample_id": 8375, "db_id": "mondial_geo", "final": {"question": "What is the capital of the 3rd most populated country in Asia and what is the capital city's ratio in percentage (%) against the overall population of the country?", "sql": "SELECT T4.Capital, CAST(T3.Population AS REAL) * 100 / T4.Population FROM city AS T3 INNER JOIN ( SELECT T1.Capital , T1.Population FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country WHERE T2.Continent = 'Asia' ORDER BY T1.Population DESC LIMIT 2, 1 ) AS T4 ON T3.Name = T4.Capital", "source_tables": ["city", "encompasses", "country"]}, "evidence": ""}
{"sample_id": 8481, "db_id": "mondial_geo", "final": {"question": "What is the height of mountain Dhaulagiri located and in which province is it located?", "sql": "SELECT T1.Height, T2.Province FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain WHERE T1.Name = 'Dhaulagiri'", "source_tables": ["mountain", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8392, "db_id": "mondial_geo", "final": {"question": "Which non capital city has the most people of all?", "sql": "SELECT T3.Name FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T3.Name <> T1.Capital ORDER BY T3.Population DESC LIMIT 1", "source_tables": ["city", "province", "country"]}, "evidence": ""}
{"sample_id": 8372, "db_id": "mondial_geo", "final": {"question": "What are the names of the cities along the Euphrat River's course? Indicate the capital city of the nation where the Euphrat River flows.", "sql": "SELECT T2.City, T1.Capital FROM country AS T1 INNER JOIN located AS T2 ON T1.Code = T2.Country INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Name = 'Euphrat'", "source_tables": ["located", "river", "country"]}, "evidence": ""}
{"sample_id": 8318, "db_id": "mondial_geo", "final": {"question": "What is the average inflation rate of the biggest continent?", "sql": "SELECT AVG(T4.Inflation) FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN economy AS T4 ON T4.Country = T3.Code WHERE T1.Name = ( SELECT Name FROM continent ORDER BY Area DESC LIMIT 1 )", "source_tables": ["economy", "encompasses", "continent", "country"]}, "evidence": ""}
{"sample_id": 8484, "db_id": "mondial_geo", "final": {"question": "State the inflation rate of Greece.", "sql": "SELECT T2.Inflation FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Greece'", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8459, "db_id": "mondial_geo", "final": {"question": "What proportion of rivers have a length of more than 3,000 miles? Please provide the name of a Russian river that is more than 3,000 miles long.", "sql": "SELECT CAST(SUM(CASE WHEN T1.Length > 3000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Name) FROM river AS T1 INNER JOIN located AS T2 ON T1.Name = T2.River INNER JOIN country AS T3 ON T3.Code = T2.Country", "source_tables": ["country", "river", "located"]}, "evidence": "Proportion of rivers with lengths greater than 3,000 miles = [(Total number of rivers with lengths greater than 3,000 miles) / (Total number of rivers)] * 100%"}
{"sample_id": 8385, "db_id": "mondial_geo", "final": {"question": "How many cities in France have a population of more than 100,000?", "sql": "SELECT COUNT(T2.Name) FROM country AS T1 INNER JOIN city AS T2 ON T2.Country = T1.Code WHERE T1.Name = 'France' AND T2.Population > 100000", "source_tables": ["city", "country"]}, "evidence": ""}
{"sample_id": 8367, "db_id": "mondial_geo", "final": {"question": "What is the difference in population between the two nations where the tallest peak is located?", "sql": "SELECT * FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Country = T2.Country INNER JOIN country AS T4 ON T4.Code = T3.Country WHERE T1.Name = ( SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1 )", "source_tables": ["mountain", "province", "geo_mountain", "country"]}, "evidence": ""}
{"sample_id": 8287, "db_id": "mondial_geo", "final": {"question": "Where does Bermuda belong to? Give the full name of the country.", "sql": "SELECT T3.Name FROM locatedOn AS T1 INNER JOIN island AS T2 ON T1.Island = T2.Name INNER JOIN country AS T3 ON T3.Code = T1.Country WHERE T3.Name = 'Bermuda'", "source_tables": ["country", "locatedon", "island"]}, "evidence": "Bermuda is one of countries"}
{"sample_id": 8302, "db_id": "mondial_geo", "final": {"question": "Please list the deserts in the countries whose population is over 100000 and covers an area of under 500000.", "sql": "SELECT T2.Desert FROM country AS T1 INNER JOIN geo_desert AS T2 ON T1.Code = T2.Country WHERE T1.Area > 100000 AND T1.Population < 500000", "source_tables": ["geo_desert", "country"]}, "evidence": ""}
{"sample_id": 8253, "db_id": "mondial_geo", "final": {"question": "How many lakes in the Canary Islands cover an area of over 1000000?", "sql": "SELECT COUNT(T2.Name) FROM located AS T1 INNER JOIN lake AS T2 ON T1.Lake = T2.Name WHERE T1.Province = 'Canary Islands' AND T2.Area > 1000000", "source_tables": ["located", "lake"]}, "evidence": ""}
{"sample_id": 8334, "db_id": "mondial_geo", "final": {"question": "Please state the longest river that flows to the Mediterranean Sea.", "sql": "SELECT Name FROM river WHERE Sea = 'Mediterranean Sea' ORDER BY Length DESC LIMIT 1", "source_tables": ["river"]}, "evidence": ""}
{"sample_id": 8325, "db_id": "mondial_geo", "final": {"question": "List the all the cities and its city population for provinces with population more than 1000000.", "sql": "SELECT T1.Name, T1.Population FROM city AS T1 INNER JOIN province AS T2 ON T2.Name = T1.Province WHERE T2.Population > 1000000", "source_tables": ["city", "province"]}, "evidence": ""}
{"sample_id": 8300, "db_id": "mondial_geo", "final": {"question": "Please list the mountains in the country with the lowest inflation rate.", "sql": "SELECT Mountain FROM geo_mountain WHERE Country = ( SELECT Country FROM economy ORDER BY Inflation ASC LIMIT 1 )", "source_tables": ["economy", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8568, "db_id": "software_company", "final": {"question": "In male customers ages from 30 to 50, how many of them has an income ranges from 2000 to 2300?", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Male' AND T1.age >= 30 AND T1.age <= 50 AND T2.INCOME_K >= 2000 AND T2.INCOME_K <= 2300", "source_tables": ["demog", "customers"]}, "evidence": "male customers ages from 30 to 50 refer to SEX = 'Male' where age BETWEEN 30 AND 50; income ranges from 2000 to 2300 refers to INCOME_K BETWEEN 2000 AND 3000;"}
{"sample_id": 8532, "db_id": "software_company", "final": {"question": "What is the total number of customers with an age below 30?", "sql": "SELECT COUNT(ID) FROM Customers WHERE age < 30", "source_tables": ["customers"]}, "evidence": "age below 30 refers to age < 30;"}
{"sample_id": 8544, "db_id": "software_company", "final": {"question": "List the marital status of customers within the age of 40 to 60 that has the highest income among the group.", "sql": "SELECT T1.MARITAL_STATUS FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.age >= 40 AND T1.age <= 60 ORDER BY T2.INCOME_K DESC LIMIT 1", "source_tables": ["demog", "customers"]}, "evidence": "age of 40 to 60 refers to age BETWEEN 40 AND 60; the highest income refers to MAX(INCOME_K);"}
{"sample_id": 8584, "db_id": "software_company", "final": {"question": "Among the reference ID of under 10 who got response by marketing department, compare their education status.", "sql": "SELECT T1.EDUCATIONNUM FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T2.REFID < 10 AND T2.RESPONSE = 'true'", "source_tables": ["customers", "mailings1_2"]}, "evidence": "reference ID of under 10 refers to REFID < 10; got response refers to RESPONSE = 'true'; education status refers to EDUCATIONNUM;"}
{"sample_id": 8548, "db_id": "software_company", "final": {"question": "List the income and number of inhabitants of customers with an age greater than the 80% of average age of all customers?", "sql": "SELECT T2.INCOME_K, T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID GROUP BY T2.INCOME_K, T2.INHABITANTS_K HAVING T1.age > 0.8 * AVG(T1.age)", "source_tables": ["demog", "customers"]}, "evidence": "age greater than the 80% of average age refers to age > (AVG(age) * 0.8); income refers to INCOME_K; number of inhabitants refers to INHABITANTS_K;"}
{"sample_id": 8522, "db_id": "software_company", "final": {"question": "Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are from a place with more than 30,000 inhabitants?", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T3.INHABITANTS_K > 30 AND T2.RESPONSE = 'true'", "source_tables": ["demog", "customers", "mailings1_2"]}, "evidence": "RESPONSE = 'true'; place with more than 30,000 inhabitants refers to GEOID where INHABITANTS_K > 30;"}
{"sample_id": 8560, "db_id": "software_company", "final": {"question": "What is the total number of widowed customers with an age below 50?", "sql": "SELECT COUNT(ID) FROM Customers WHERE MARITAL_STATUS = 'Widowed' AND age < 50", "source_tables": ["customers"]}, "evidence": "widowed customers with an age below 50 refer to MARITAL_STATUS = 'Widowed' where age < 50;"}
{"sample_id": 8534, "db_id": "software_company", "final": {"question": "In geographic identifier from 20 to 50, how many of them has a number of inhabitants below 20?", "sql": "SELECT COUNT(GEOID) FROM Demog WHERE INHABITANTS_K < 20 AND GEOID >= 20 AND GEOID <= 50", "source_tables": ["demog"]}, "evidence": "geographic identifier from 20 to 50 refers to GEOID BETWEEN 20 AND 50; number of inhabitants below 20 refers to INHABITANTS_K < 20;"}
{"sample_id": 8513, "db_id": "software_company", "final": {"question": "Of the first 60,000 customers' responses to the incentive mailing sent by the marketing department, how many of them are considered a true response?", "sql": "SELECT COUNT(REFID) custmoer_number FROM Mailings1_2 WHERE RESPONSE = 'true'", "source_tables": ["mailings1_2"]}, "evidence": "RESPONSE = 'true';"}
{"sample_id": 8555, "db_id": "software_company", "final": {"question": "Among the male customer in their twenties, how many are from places where the average income is more than 3000?", "sql": "SELECT COUNT(T2.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Male' AND T2.INCOME_K > 3000 AND T1.age >= 20 AND T1.age <= 29", "source_tables": ["demog", "customers"]}, "evidence": "male customer in their twenties refer to SEX = 'Male' where age BETWEEN 20 AND 29; average income is more than 3000 refers to INCOME_K > 3000;"}
{"sample_id": 8573, "db_id": "software_company", "final": {"question": "Among the divorced male customers, give the income and response of those who has an level of education of 6 and above.", "sql": "SELECT DISTINCT T3.INCOME_K, T2.RESPONSE FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.EDUCATIONNUM > 6 AND T1.SEX = 'Male' AND T1.MARITAL_STATUS = 'Divorced'", "source_tables": ["demog", "customers", "mailings1_2"]}, "evidence": "divorced male customers refer to SEX = 'Male' where MARITAL_STATUS = 'Divorced';"}
{"sample_id": 8511, "db_id": "software_company", "final": {"question": "Among all the customers, how many of them are teenagers?", "sql": "SELECT COUNT(ID) FROM Customers WHERE age >= 13 AND age <= 19", "source_tables": ["customers"]}, "evidence": "teenager is a person aged between 13 and 19 years;"}
{"sample_id": 8572, "db_id": "software_company", "final": {"question": "What is the age of female customers within the number of inhabitants below 30?", "sql": "SELECT age FROM Customers WHERE GEOID IN ( SELECT GEOID FROM Demog WHERE INHABITANTS_K < 30 ) AND SEX = 'Female'", "source_tables": ["demog", "customers"]}, "evidence": "female customers within the number of inhabitants below 30 refer to SEX = 'Female' where INHABITANTS_K < 30;"}
{"sample_id": 8579, "db_id": "software_company", "final": {"question": "Point out the greater one between the number of actual responding and not responding to mailing.", "sql": "SELECT RESPONSE FROM Mailings1_2 GROUP BY RESPONSE ORDER BY COUNT(RESPONSE) DESC LIMIT 1", "source_tables": ["mailings1_2"]}, "evidence": "COUNT(REFID where RESPONSE = 'true')>or<COUNT(REFID where RESPONSE = 'false');"}
{"sample_id": 8575, "db_id": "software_company", "final": {"question": "In male customers with an occupation handlers or cleaners, what is the percentage of customers with a true response?", "sql": "SELECT CAST(SUM(CASE WHEN T2.RESPONSE = 'true' THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.REFID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.OCCUPATION = 'Handlers-cleaners' AND T1.SEX = 'Male'", "source_tables": ["customers", "mailings1_2"]}, "evidence": "DIVIDE(COUNT(OCCUPATION = 'Handlers-cleaners', SEX = 'Male' and RESPONSE = 'true'), COUNT(OCCUPATION = 'Handlers-cleaners' and SEX = 'Male')) as percentage;"}
{"sample_id": 8689, "db_id": "chicago_crime", "final": {"question": "What is the average number of less severe crimes reported a day in February of 2018?", "sql": "SELECT CAST(COUNT(T2.case_number) AS REAL) / 28 FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no WHERE T2.date LIKE '2/%/2018%' AND T1.index_code = 'N'", "source_tables": ["iucr", "crime"]}, "evidence": "day in February of 2018 refers to date LIKE '2/%/2018'; less severe crime refers to index_code = 'N'; average = Divide (Count(case_number), 28)"}
{"sample_id": 8669, "db_id": "chicago_crime", "final": {"question": "How many domestic violence cases were brought in the ward that uses \"ward13@cityofchicago.org\"?", "sql": "SELECT SUM(CASE WHEN T2.domestic = 'TRUE' THEN 1 ELSE 0 END) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T2.ward_no = T1.ward_no WHERE T1.ward_email = 'ward13@cityofchicago.org'", "source_tables": ["crime", "ward"]}, "evidence": "domestic violence refers to domestic = 'TRUE'; uses \"ward13@cityofchicago.org\" refers to ward_email = 'ward13@cityofchicago.org'"}
{"sample_id": 8732, "db_id": "chicago_crime", "final": {"question": "What is the general and specific description of incident 275?", "sql": "SELECT primary_description, secondary_description FROM IUCR WHERE iucr_no = 275", "source_tables": ["iucr"]}, "evidence": "incident 275 refers to iucr_no = 275; general description refers to primary_description; specific description refers to secondary_description"}
{"sample_id": 8673, "db_id": "chicago_crime", "final": {"question": "Among the crimes located in the community area with the highest population, what is the percentage of domestic violence?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.domestic = 'TRUE' THEN T2.domestic END) AS REAL) * 100 / COUNT(T2.domestic) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no GROUP BY T1.community_area_no HAVING COUNT(T1.population) ORDER BY COUNT(T1.population) DESC LIMIT 1", "source_tables": ["community_area", "crime"]}, "evidence": "the highest population refers to max(population); domestic violence refers to domestic = 'TRUE'; percentage = divide(count(domestic = 'TRUE'), count(domestic)) where population = max(population) * 100%"}
{"sample_id": 8743, "db_id": "chicago_crime", "final": {"question": "At which district did the multiple homicide case number JB120039 occurred?", "sql": "SELECT T1.district_no, T1.district_name FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.case_number = 'JB120039' GROUP BY T1.district_no, T1.district_name", "source_tables": ["crime", "district"]}, "evidence": "multiple homicide refers to Count(case_number) > 1; district refers to district_name"}
{"sample_id": 8688, "db_id": "chicago_crime", "final": {"question": "In drug abuse crimes, what percentage is related to cannabis?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.secondary_description LIKE '%CANNABIS%' THEN T1.secondary_description END) AS REAL) * 100 / COUNT(T1.secondary_description) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN FBI_Code AS T3 ON T3.fbi_code_no = T2.fbi_code_no WHERE T3.title = 'Drug Abuse'", "source_tables": ["iucr", "crime", "fbi_code"]}, "evidence": "drug abuse crime refer to title = 'Drug Abuse'; percentage = Divide (Count (secondary_description LIKE '%CANNABIS%'), Count (secondary_description)) * 100"}
{"sample_id": 8655, "db_id": "chicago_crime", "final": {"question": "Among the criminal sexual assaults in the district of Adnardo Gutierrez, how many cases happened in the residence?", "sql": "SELECT COUNT(T2.report_no) FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no INNER JOIN FBI_Code AS T3 ON T3.fbi_code_no = T2.fbi_code_no WHERE T3.title = 'Criminal Sexual Assault' AND T1.commander = 'Adnardo Gutierrez' AND T2.location_description = 'RESIDENCE'", "source_tables": ["crime", "fbi_code", "district"]}, "evidence": "criminal sexual assault refers to title = 'Criminal Sexual Assault'; Adnardo Gutierrez refers to commander = 'Adnardo Gutierrez'; in the residence refers to location_description = 'RESIDENCE'"}
{"sample_id": 8632, "db_id": "chicago_crime", "final": {"question": "In the most populated ward, how many incidents of domestic violence were reported in a bar or tavern?", "sql": "SELECT COUNT(T2.report_no) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.domestic = 'TRUE' AND T2.location_description = 'BAR OR TAVERN' ORDER BY T1.Population DESC LIMIT 1", "source_tables": ["crime", "ward"]}, "evidence": "the most populated refers to max(population); domestic violence refers to domestic = 'TRUE'; in a bar or tavern refers to location_description = 'BAR OR TAVERN'"}
{"sample_id": 8730, "db_id": "chicago_crime", "final": {"question": "Please list all of the contact information for the police district Near West.", "sql": "SELECT phone, fax, tty, twitter FROM District WHERE district_name = 'Near West'", "source_tables": ["district"]}, "evidence": "\"Near West\" is the district_name; all contact information refers to phone, fax, tty, twitter"}
{"sample_id": 8635, "db_id": "chicago_crime", "final": {"question": "What is the short description of the crime committed the most by criminals in the least populated community?", "sql": "SELECT T3.title FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no GROUP BY T3.title ORDER BY T1.population ASC, T3.fbi_code_no DESC LIMIT 1", "source_tables": ["community_area", "crime", "fbi_code"]}, "evidence": "short description refers to title; committed the most refers to max(fbi_code_no); the least populated community refers to min(population)"}
{"sample_id": 8733, "db_id": "chicago_crime", "final": {"question": "What is the percentage of severe cases that are related to sexual assault?", "sql": "SELECT CAST(SUM(CASE WHEN primary_description = 'CRIM SEXUAL ASSAULT' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM IUCR WHERE index_code = 'I'", "source_tables": ["iucr"]}, "evidence": "related to sexual assault refers to primary_description = 'CRIME SEXUAL ASSAULT'; severe case refers to index_code = 'I'; percentage = Divide (Count (iucr_no where primary_description = 'CRIME SEXUAL ASSAULT'), Count (iucr_no)) * 100"}
{"sample_id": 8598, "db_id": "chicago_crime", "final": {"question": "Please list the case numbers of all the crimes with no arrest made in Central Chicago.", "sql": "SELECT COUNT(*) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T2.district_name = 'Central' AND T1.arrest = 'FALSE'", "source_tables": ["crime", "district"]}, "evidence": "no arrest made refers to arrest = 'FALSE'; Central Chicago refers to district_name = 'Central'"}
{"sample_id": 8683, "db_id": "chicago_crime", "final": {"question": "What is the average number of reckless homicides that happened in a district?", "sql": "SELECT CAST(COUNT(T2.report_no) AS REAL) / COUNT(DISTINCT T1.district_name) FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no INNER JOIN IUCR AS T3 ON T3.iucr_no = T2.iucr_no WHERE T3.secondary_description = 'RECKLESS HOMICIDE'", "source_tables": ["iucr", "crime", "district"]}, "evidence": "\"RECKLESS HOMICIDE\" is the secondary_description; average = Divide (Count(report_no), Count(district_name))"}
{"sample_id": 8740, "db_id": "chicago_crime", "final": {"question": "What is the general description for case number JB106010?", "sql": "SELECT T1.primary_description FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.case_number = 'JB106010'", "source_tables": ["iucr", "crime"]}, "evidence": "general description refers to primary_description"}
{"sample_id": 8724, "db_id": "chicago_crime", "final": {"question": "In the South side community, what is the name of the community with the most reported incidents of unlawful taking, carrying, leading, or riding away of property from the possession or constructive possession of another person?", "sql": "SELECT T3.community_area_name FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T3.side = 'South' AND T1.description = 'The unlawful taking, carrying, leading, or riding away of property FROM the possession or constructive possession of another person.' GROUP BY T3.community_area_name ORDER BY COUNT(T1.fbi_code_no) DESC LIMIT 1", "source_tables": ["community_area", "crime", "fbi_code"]}, "evidence": "\"unlawful taking, carrying, leading, or riding away of property from the possession or constructive possession of another person\" is the description; name of community refer to community_area_name; most reported incidents refers to Max(Count(fbi_code_no))"}
{"sample_id": 8725, "db_id": "chicago_crime", "final": {"question": "How many crime against society were reported in Englewood?", "sql": "SELECT SUM(CASE WHEN T3.community_area_name = 'Englewood' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T1.crime_against = 'Society'", "source_tables": ["community_area", "crime", "fbi_code"]}, "evidence": "\"Englewood\" is the community_area_name; 'Society' is the crime_against"}
{"sample_id": 8590, "db_id": "chicago_crime", "final": {"question": "What is the email address to contact the administrator of Central Chicago?", "sql": "SELECT email FROM District WHERE district_name = 'Central'", "source_tables": ["district"]}, "evidence": "email address refers to email; Central Chicago refers to district_name = 'Central'"}
{"sample_id": 8654, "db_id": "chicago_crime", "final": {"question": "Provide the occurrence date and location of the deceptive practice due to the unlawful use of recorded sound.", "sql": "SELECT T2.date, T2.latitude, T2.longitude FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no WHERE T1.primary_description = 'DECEPTIVE PRACTICE' AND T1.secondary_description = 'UNLAWFUL USE OF RECORDED SOUND'", "source_tables": ["iucr", "crime"]}, "evidence": "location refers to latitude, longitude; deceptive practice refers to primary_description = 'DECEPTIVE PRACTICE'; unlawful use of recorded sound refers to secondary_description = 'UNLAWFUL USE OF RECORDED SOUND'"}
{"sample_id": 8601, "db_id": "chicago_crime", "final": {"question": "More crimes happened in which community area in January, 2018, Woodlawn or Lincoln Square?", "sql": "SELECT T1.community_area_name FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.community_area_name IN ('Woodlawn', 'Lincoln Square') AND T2.date LIKE '%1/2018%' GROUP BY T1.community_area_name ORDER BY COUNT(T1.community_area_name) DESC LIMIT 1", "source_tables": ["community_area", "crime"]}, "evidence": "in January 2018 refers to date like '%1/2018%'; Woodlawn or Lincoln Square refers to community_area_name in ('Woodlawn', 'Lincoln Square'); number of crime refers to COUNT(report_no); the higher the report_no, the more crimes happened in the community;"}
{"sample_id": 8658, "db_id": "chicago_crime", "final": {"question": "How many aldermen have \"James\" as their first name?", "sql": "SELECT COUNT(*) FROM Ward WHERE alderman_first_name = 'James'", "source_tables": ["ward"]}, "evidence": ""}
{"sample_id": 8755, "db_id": "chicago_crime", "final": {"question": "What is the full name of the alderman of ward no.21?", "sql": "SELECT alderman_first_name, alderman_last_name, alderman_name_suffix FROM Ward WHERE ward_no = 21", "source_tables": ["ward"]}, "evidence": "full name of alderman refers to alderman_first_name, alderman_last_name, alderman_name_suffix"}
{"sample_id": 8737, "db_id": "chicago_crime", "final": {"question": "How many crime cases have been classified as \"Weapons Violation\" by the FBI?", "sql": "SELECT SUM(CASE WHEN T2.title = 'Weapons Violation' THEN 1 ELSE 0 END) FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no", "source_tables": ["crime", "fbi_code"]}, "evidence": "\"Weapons Violation\" is the title of crime; crime cases refers to report_no;"}
{"sample_id": 8634, "db_id": "chicago_crime", "final": {"question": "Out of all the incidents of domestic violence reported at the ward represented by alderman Walter Burnett Jr., how many were arrested?", "sql": "SELECT SUM(CASE WHEN T2.arrest = 'TRUE' THEN 1 ELSE 0 END) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T1.alderman_first_name = 'Walter' AND T1.alderman_last_name = 'Burnett' AND alderman_name_suffix = 'Jr.' AND T2.domestic = 'TRUE'", "source_tables": ["crime", "ward"]}, "evidence": "domestic violence refers to domestic = 'TRUE'; arrested refers to arrest = 'TRUE'"}
{"sample_id": 8630, "db_id": "chicago_crime", "final": {"question": "What is the precise location or coordinate where most of the robberies in Rogers Park occurred?", "sql": "SELECT T2.latitude, T2.longitude FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no WHERE T1.community_area_name = 'Rogers Park' AND T3.title = 'Robbery' AND T3.fbi_code_no = 3", "source_tables": ["community_area", "crime", "fbi_code"]}, "evidence": "precise location or coordinate refers to latitude, longitude; most refers to fbi_code_no = 3; robbery refers to title = 'Robbery'; Rogers Park refers to community_area_name = 'Rogers Park'"}
{"sample_id": 8718, "db_id": "chicago_crime", "final": {"question": "Between Deering and Near West districts, which district reported the most number of crime incidents that happened in a library?", "sql": "SELECT T1.district_name FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T1.district_name IN ('Deering', 'Near West') AND T2.location_description = 'LIBRARY' GROUP BY T1.district_name ORDER BY COUNT(T2.district_no) DESC LIMIT 1", "source_tables": ["crime", "district"]}, "evidence": "\"Deering\" and \"Near West\" are both district_name; 'LIBRARY' is the location_description; district with the most number of crime Max(Count(district_no))"}
{"sample_id": 8697, "db_id": "chicago_crime", "final": {"question": "How many weapons violation crimes have occurred in the Calumet district?", "sql": "SELECT SUM(CASE WHEN T3.district_name = 'Calumet' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T1.primary_description = 'WEAPONS VIOLATION'", "source_tables": ["iucr", "crime", "district"]}, "evidence": "\"Calumet\" is the district_name; 'WEAPON VIOLATION' is the primary_description of crime"}
{"sample_id": 8714, "db_id": "chicago_crime", "final": {"question": "Which community has the highest number of neighborhoods?", "sql": "SELECT T1.community_area_name FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no ORDER BY T2.community_area_no DESC LIMIT 1", "source_tables": ["community_area", "neighborhood"]}, "evidence": "community with highest number of neighborhoods refers to Max(Count(community_area_no)); community refers to community_area_name"}
{"sample_id": 8623, "db_id": "chicago_crime", "final": {"question": "How many incidents of domestic violence occurred in an abandoned building in 2018?", "sql": "SELECT SUM(CASE WHEN location_description = 'ABANDONED BUILDING' THEN 1 ELSE 0 END) FROM Crime WHERE date LIKE '%2018%' AND domestic = 'TRUE'", "source_tables": ["crime"]}, "evidence": "domestic violence refers to domestic = 'TRUE'; in an abandoned building refers to location_description = 'ABANDONED BUILDING'; in 2018 refers to date LIKE '%2018%'"}
{"sample_id": 8735, "db_id": "chicago_crime", "final": {"question": "How many neighborhoods can be found in the Forest Glen community area?", "sql": "SELECT SUM(CASE WHEN T2.community_area_name = 'Forest Glen' THEN 1 ELSE 0 END) FROM Neighborhood AS T1 INNER JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no", "source_tables": ["community_area", "neighborhood"]}, "evidence": "\"Forest Glen\" is the community_area_name; neighborhoods refers to neighborhood_name"}
{"sample_id": 8769, "db_id": "chicago_crime", "final": {"question": "Which district commander was responsible for more incidents in January, 2018, Robert A. Rubio or Glenn White?", "sql": "SELECT T1.commander FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T1.commander IN ('Robert A. Rubio', 'Glenn White') AND SUBSTR(T2.date, 1, 1) = '1' AND SUBSTR(T2.date, 5, 4) = '2018' GROUP BY T1.commander", "source_tables": ["crime", "district"]}, "evidence": "in January 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'; 'Robert A. Rubio' and 'Glenn White' are both commander; responsible for more incident refers to Max(count(ward_no))"}
{"sample_id": 8736, "db_id": "chicago_crime", "final": {"question": "What is the total population of the neighborhoods Avondale Gardens, Irving Park, Kilbourn Park, Merchant Park, Old Irving Park, and The Villa?", "sql": "SELECT SUM(T2.population) AS sum FROM Neighborhood AS T1 INNER JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.neighborhood_name = 'Avondale Gardens' OR T1.neighborhood_name = 'Irving Park' OR T1.neighborhood_name = 'Kilbourn Park' OR T1.neighborhood_name = 'Merchant Park' OR T1.neighborhood_name = 'Old Irving Park' OR T1.neighborhood_name = 'The Villa'", "source_tables": ["community_area", "neighborhood"]}, "evidence": "\"Avoladale Gardens\", \"Irving Park\", \"Kilbourn Park\", \"Merchant Park\", \"Old Irving Park\", \"The Villa\" are neighborhood_name; total population refers to Sum(Population)"}
{"sample_id": 8602, "db_id": "chicago_crime", "final": {"question": "What is the fax number for the district with the most number of crimes in January, 2018?", "sql": "SELECT T1.fax FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.date LIKE '%1/2018%' GROUP BY T2.district_no ORDER BY COUNT(case_number) DESC LIMIT 1", "source_tables": ["crime", "district"]}, "evidence": "fax number refers to fax; the most number of crimes refers to max(count(case_number)); in January 2018 refers to date like '%1/2018%'"}
{"sample_id": 8747, "db_id": "chicago_crime", "final": {"question": "Give the FBI code for the crime described by \"The killing of one human being by another.\"", "sql": "SELECT fbi_code_no FROM FBI_Code WHERE description = 'The killing of one human being by another.'", "source_tables": ["fbi_code"]}, "evidence": "\"The killing of one human being by another\" is the description; FBI code refers to fbi_code_no"}
{"sample_id": 8744, "db_id": "chicago_crime", "final": {"question": "What is the percentage of crime cases that have been classified as \"drug abuse\" by the FBI and happened on the street?", "sql": "SELECT CAST(SUM(CASE WHEN T2.title = 'Drug Abuse' AND T1.location_description = 'STREET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.fbi_code_no) FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no", "source_tables": ["crime", "fbi_code"]}, "evidence": "\"Drug Abuse\" is the title of crime; happened on the street refers to location_description = 'STREET';\u00a0 percentage = Divide (Count(fbi_code_no where location_description = 'STREET'), Count(fbi_code_no)) * 100"}
{"sample_id": 8691, "db_id": "chicago_crime", "final": {"question": "Among the incidents reported in Harrison, what percentage are disorderly conduct?", "sql": "SELECT COUNT(CASE WHEN T3.title = 'Disorderly Conduct' THEN T2.report_no END) * 100.0 / COUNT(T2.report_no) AS per FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no INNER JOIN FBI_Code AS T3 ON T3.fbi_code_no = T2.fbi_code_no WHERE T1.district_name = 'Harrison'", "source_tables": ["crime", "fbi_code", "district"]}, "evidence": "\"Harrison\" is the district_name;\u00a0 'Disorderly Conduct' is the title; percentage = Divide (Count(title = 'Disorderly Conduct'), Count(report_no)) * 100; incident report refers to report_no"}
{"sample_id": 8597, "db_id": "chicago_crime", "final": {"question": "Among all the crimes that had happened in Central Chicago, how many of them were cases of domestic violence?", "sql": "SELECT COUNT(*) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T2.district_name = 'Central' AND T1.domestic = 'TRUE'", "source_tables": ["crime", "district"]}, "evidence": "Central Chicago refers to district_name = 'Central'; case of domestic violence refers to domestic = 'TRUE'"}
{"sample_id": 8606, "db_id": "chicago_crime", "final": {"question": "Who is the commander of Morgan Park district?", "sql": "SELECT commander FROM District WHERE district_name = 'Morgan Park'", "source_tables": ["district"]}, "evidence": "Morgan Park district refers to district_name = 'Morgan Park'"}
{"sample_id": 8811, "db_id": "food_inspection", "final": {"question": "What is the name of the establishment with the lowest inspection score of all time?", "sql": "SELECT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = ( SELECT MIN(score) FROM inspections )", "source_tables": ["businesses", "inspections"]}, "evidence": "the lowest inspection score refers to MIN(score);"}
{"sample_id": 8794, "db_id": "food_inspection", "final": {"question": "Give the description of the moderate risk violation which \"Chez Fayala, Inc.\" had on 2016/7/1.", "sql": "SELECT T1.description FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Chez Fayala, Inc.' AND T1.\"date\" = '2016-07-01' AND T1.risk_category = 'Moderate Risk'", "source_tables": ["violations", "businesses"]}, "evidence": "\"Chez Fayala, Inc.\" is the name of the business; moderate risk violation refers to risk_category = 'Moderate Risk'; date = '2016-07-01';"}
{"sample_id": 8806, "db_id": "food_inspection", "final": {"question": "How many eateries applied in 2012?", "sql": "SELECT COUNT(business_id) FROM businesses WHERE STRFTIME('%Y', application_date) = '2012'", "source_tables": ["businesses"]}, "evidence": "eateries applied in 2012 refer to business_id where application_date between '2012-01-01' and '2012-12-31';"}
{"sample_id": 8836, "db_id": "food_inspection", "final": {"question": "List the eateries' names and addresses which had reinspection on 2nd February, 2015.", "sql": "SELECT T2.name, T2.address FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.\"date\" = '2015-02-02' AND T1.type = 'Reinspection/Followup'", "source_tables": ["businesses", "inspections"]}, "evidence": "eateries which had reinspection on 2nd February, 2015 refer to business_id where date = '2015-02-02' and type = 'Reinspection/Followup';"}
{"sample_id": 8802, "db_id": "food_inspection", "final": {"question": "What is the average score for \"Chairman Bao\" in all its unscheduled routine inspections?", "sql": "SELECT CAST(SUM(CASE WHEN T2.name = 'Chairman Bao' THEN T1.score ELSE 0 END) AS REAL) / COUNT(CASE WHEN T1.type = 'Routine - Unscheduled' THEN T1.score ELSE 0 END) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id", "source_tables": ["businesses", "inspections"]}, "evidence": "DIVIDE(SUM(score where type = 'Routine - Unscheduled' and name = 'Chairman Bao'), COUNT(type = 'Routine - Unscheduled' where name = 'Chairman Bao'));"}
{"sample_id": 8846, "db_id": "food_inspection", "final": {"question": "List the tax code and inspection type of the business named \"Rue Lepic\".", "sql": "SELECT DISTINCT T3.tax_code, T2.type FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN businesses AS T3 ON T2.business_id = T3.business_id WHERE T3.name = 'Rue Lepic'", "source_tables": ["violations", "inspections", "businesses"]}, "evidence": "\"Rue Lepic\" is the name of the business;"}
{"sample_id": 8807, "db_id": "food_inspection", "final": {"question": "How many foodborne illness investigations were done in 2014?", "sql": "SELECT COUNT(business_id) FROM inspections WHERE STRFTIME('%Y', \"date\") = '2014' AND type = 'Foodborne Illness Investigation'", "source_tables": ["inspections"]}, "evidence": "foodborne illness investigations refer to inspections where type = 'Foodborne Illness Investigation'; investigations in 2014 refers to date between '2014-01-01' and '2014-12-31';"}
{"sample_id": 8837, "db_id": "food_inspection", "final": {"question": "List the names and business certificates of the eateries which got inspection score under 50.", "sql": "SELECT T2.name, T2.business_id FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score < 50", "source_tables": ["businesses", "inspections"]}, "evidence": "eateries which got inspection score under 50 refer to business_id where score < 50;"}
{"sample_id": 8829, "db_id": "food_inspection", "final": {"question": "List the inspection dates, scores and inspection types for the eateries with tax code AA.", "sql": "SELECT T1.\"date\", T1.score, T1.type FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.tax_code = 'AA'", "source_tables": ["businesses", "inspections"]}, "evidence": "eateries with tax code AA refer to business_id where tax_code = 'AA';"}
{"sample_id": 8843, "db_id": "food_inspection", "final": {"question": "List owner's name of businesses with a 100 score.", "sql": "SELECT DISTINCT T2.owner_name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = 100", "source_tables": ["businesses", "inspections"]}, "evidence": "owner's name of businesses refers to owner_name;"}
{"sample_id": 8820, "db_id": "food_inspection", "final": {"question": "Among the top 5 owners with highest number of establishments, which owner has the highest number of high risk violations? Give the name of the owner.", "sql": "SELECT T4.owner_name FROM violations AS T3 INNER JOIN businesses AS T4 ON T3.business_id = T4.business_id INNER JOIN ( SELECT T2.owner_name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id GROUP BY T2.owner_name ORDER BY COUNT(T1.business_id) DESC LIMIT 5 ) AS T5 ON T4.owner_name = T5.owner_name WHERE T3.risk_category = 'High Risk' GROUP BY T4.owner_name ORDER BY COUNT(T3.risk_category) DESC LIMIT 1", "source_tables": ["violations", "businesses"]}, "evidence": "5 owners with highest number of establishments refer to owner_name where MAX(COUNT(business_id)) LIMIT 5; the highest number of high risk violations refers to MAX(COUNT(risk_category = 'High Risk'));"}
{"sample_id": 8784, "db_id": "food_inspection", "final": {"question": "Among the routine inspections of Tiramisu Kitchen, how many of them have a score of over 70?", "sql": "SELECT COUNT(T2.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Tiramisu Kitchen' AND T1.type = 'Routine - Unscheduled' AND T1.score > 70", "source_tables": ["businesses", "inspections"]}, "evidence": "Tiramisu Kitchen is the name of the business; routine inspections refer to type = 'Routine - Unscheduled'; score of over 70 refers to score > 70;"}
{"sample_id": 8791, "db_id": "food_inspection", "final": {"question": "Give the name of the business which met all the required standards during the unscheduled routine inspection on 2016/9/28.", "sql": "SELECT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = 100 AND T1.\"date\" = '2016-09-28' AND T1.type = 'Routine - Unscheduled'", "source_tables": ["businesses", "inspections"]}, "evidence": "met all the required standards refers to score = 100; unscheduled routine inspection on 2016/9/28 refers to type = 'Routine - Unscheduled' where date = '2016-09-28';"}
{"sample_id": 8785, "db_id": "food_inspection", "final": {"question": "Which restaurant had more low risk violation in inspections, Tiramisu Kitchen or OMNI S.F. Hotel - 2nd Floor Pantry?", "sql": "SELECT CASE WHEN SUM(CASE WHEN T2.name = 'OMNI S.F. Hotel - 2nd Floor Pantry' THEN 1 ELSE 0 END) > SUM(CASE WHEN T2.name = 'Tiramisu Kitchen' THEN 1 ELSE 0 END) THEN 'OMNI S.F. Hotel - 2nd Floor Pantry' ELSE 'Tiramisu Kitchen' END AS result FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'Low Risk'", "source_tables": ["violations", "businesses"]}, "evidence": "Tiramisu Kitchen and OMNI S.F. Hotel - 2nd Floor Pantry are names of the business; more low risk violations refer to MAX(COUNT(risk_category = 'Low Risk'));"}
{"sample_id": 8850, "db_id": "food_inspection", "final": {"question": "List the violation type ID of business with business ID from 30 to 50 and located at 747 IRVING St, San Francisco.", "sql": "SELECT DISTINCT T1.violation_type_id FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.business_id BETWEEN 30 AND 50 AND T2.address = '747 IRVING St' AND T2.city = 'San Francisco'", "source_tables": ["violations", "businesses"]}, "evidence": "business ID from 30 to 50 refers to business_id between 30 and 50; address = '747 IRVING St'; city = 'San Francisco';"}
{"sample_id": 8823, "db_id": "food_inspection", "final": {"question": "List down the eateries' IDs with structural inspection type in February 2016.", "sql": "SELECT business_id FROM inspections WHERE type = 'Structural Inspection' AND \"date\" LIKE '2016-02%'", "source_tables": ["inspections"]}, "evidence": "eateries' IDs refer to business_id; structural inspection type refers to inspections WHERE type = 'Structural Inspection'; in February 2016 refers to year(date) = 2016 and month(date) = 2;"}
{"sample_id": 8902, "db_id": "cookbook", "final": {"question": "Provide the ingredients that are rationed in the recipe with the highest carbohydrate content.", "sql": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id INNER JOIN Nutrition AS T3 ON T3.recipe_id = T2.recipe_id WHERE T2.max_qty = T2.min_qty ORDER BY T3.carbo DESC LIMIT 1", "source_tables": ["ingredient", "quantity", "nutrition"]}, "evidence": "the highest carbohydrate content refers to MAX(carbo)"}
{"sample_id": 8864, "db_id": "cookbook", "final": {"question": "How many ingredients must be rationed in the recipe \"Raspberry Chiffon Pie\"?", "sql": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie' AND T2.max_qty = T2.min_qty", "source_tables": ["quantity", "recipe"]}, "evidence": "Raspberry Chiffon Pie refers to title; ingredient must be rationed refers to max_qty = min_qty"}
{"sample_id": 8905, "db_id": "cookbook", "final": {"question": "Provide the ingredients and maximum quantities of the recipe which can serve 7 people.", "sql": "SELECT T3.name, T2.max_qty FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.servings = 7", "source_tables": ["quantity", "ingredient", "recipe"]}, "evidence": "can serve 7 people refers to servings = 7"}
{"sample_id": 8895, "db_id": "cookbook", "final": {"question": "Among the recipes whose source is the National Potato Board, which recipe has the highest calories?", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.source = 'National Potato Board' ORDER BY T2.calories DESC LIMIT 1", "source_tables": ["nutrition", "recipe"]}, "evidence": "the National Potato Board is a source; the highest calories refers to MAX(calories)"}
{"sample_id": 8907, "db_id": "cookbook", "final": {"question": "List the ingredients which measure in slices.", "sql": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T2.unit = 'slice(s)'", "source_tables": ["ingredient", "quantity"]}, "evidence": "slices refers to unit = 'slice(s)'"}
{"sample_id": 8920, "db_id": "cookbook", "final": {"question": "List all the ingredients of Apricot Yogurt Parfaits.", "sql": "SELECT T3.name, T3.category FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Apricot Yogurt Parfaits'", "source_tables": ["quantity", "ingredient", "recipe"]}, "evidence": "Apricot Yogurt Parfaits refers to title"}
{"sample_id": 8901, "db_id": "cookbook", "final": {"question": "How many ingredients are needed to prepare Idaho Potato Supreme?", "sql": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Idaho Potato Supreme'", "source_tables": ["quantity", "recipe"]}, "evidence": "Idaho Potato Supreme refers to title"}
{"sample_id": 8916, "db_id": "cookbook", "final": {"question": "How many dairy recipes can serve more than 10 people?", "sql": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.category = 'dairy' AND T1.servings > 10", "source_tables": ["quantity", "ingredient", "recipe"]}, "evidence": "dairy recipes refers to category = 'dairy'; serve more than 10 people refers to servings > 10"}
{"sample_id": 8873, "db_id": "cookbook", "final": {"question": "How many times do seedless red grapes appear in the recipes?", "sql": "SELECT COUNT(*) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T1.name = 'seedless red grapes'", "source_tables": ["ingredient", "quantity"]}, "evidence": "seedless red grapes is a name of an ingredient"}
{"sample_id": 8868, "db_id": "cookbook", "final": {"question": "How many calories from fat are there in the recipe \"Raspberry Chiffon Pie\"?", "sql": "SELECT T2.calories * T2.pcnt_cal_fat FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie'", "source_tables": ["nutrition", "recipe"]}, "evidence": "calories from fat refers to MULTIPLY(calories, pcnt_cal_fat)||'%; Raspberry Chiffon Pie refers to title"}
{"sample_id": 8894, "db_id": "cookbook", "final": {"question": "How many servings does the recipe with the highest unsaturated fat have?", "sql": "SELECT COUNT(T1.title) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat - T2.sat_fat DESC LIMIT 1", "source_tables": ["nutrition", "recipe"]}, "evidence": "with the highest unsaturated fat refers MAX(SUBTRACT(total_fat, sat_fat))"}
{"sample_id": 8874, "db_id": "cookbook", "final": {"question": "State the name of the optional ingredient of no.1397 recipe.", "sql": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T2.recipe_id = 1397 AND T2.optional = 'TRUE'", "source_tables": ["ingredient", "quantity"]}, "evidence": "no.1397 recipe refers to recipe_id = 1397; optional ingredient refers to optional = 'TRUE'"}
{"sample_id": 8885, "db_id": "cookbook", "final": {"question": "How many ingredients are there in Apricot Yogurt Parfaits?", "sql": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Apricot Yogurt Parfaits'", "source_tables": ["quantity", "recipe"]}, "evidence": "Apricot Yogurt Parfaits refers to title"}
{"sample_id": 8941, "db_id": "human_resources", "final": {"question": "Among the employees who work as a Trainee, how many of them have a salary of over &20,000 a year?", "sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL) > 20000 AND T2.positiontitle = 'Trainee'", "source_tables": ["employee", "position"]}, "evidence": "Trainee is a position title; salary of over 20,000 refers to salary > '20000'"}
{"sample_id": 8956, "db_id": "human_resources", "final": {"question": "How many employees whose performance is poor have a salary of over $50,000 per year?", "sql": "SELECT COUNT(*) FROM employee WHERE performance = 'Poor' AND CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL) > 50000", "source_tables": ["employee"]}, "evidence": "performance is poor refers to performance = 'Poor'; salary of over $50,000 refers to salary > '50000'"}
{"sample_id": 8953, "db_id": "human_resources", "final": {"question": "Give the full address of the office of the highest paid manager.", "sql": "SELECT T2.address FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Manager' ORDER BY T1.salary DESC LIMIT 1", "source_tables": ["location", "employee", "position"]}, "evidence": "the highest paid refers to MAX(salary); manager is a position title"}
{"sample_id": 8965, "db_id": "human_resources", "final": {"question": "Which position has the highest number of female employees with a 2 year degree?", "sql": "SELECT T2.positiontitle FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.educationrequired = '2 year degree' AND T1.gender = 'F' GROUP BY T2.positiontitle ORDER BY COUNT(T2.positiontitle) DESC LIMIT 1", "source_tables": ["employee", "position"]}, "evidence": "2 year degree refers to educationrequired = '2 year degree'; female refers to gender = 'F'; the highest number of employees refers to MAX(positionID)"}
{"sample_id": 8948, "db_id": "human_resources", "final": {"question": "How many employees are there in the \"Miami\" office?", "sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.locationcity = 'Miami'", "source_tables": ["location", "employee"]}, "evidence": "Miami office refers to locationcity = 'Miami'"}
{"sample_id": 8955, "db_id": "human_resources", "final": {"question": "If Jose Rodriguez tried his best, how many percentage can his salary raise without changing his position?", "sql": "SELECT 100 * (CAST(REPLACE(SUBSTR(T2.maxsalary, 4), ',', '') AS REAL) - CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) / CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL) AS per FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'Jose' AND T1.lastname = 'Rodriguez'", "source_tables": ["employee", "position"]}, "evidence": "Jose Rodriguez is the full name of an employee; full name = firstname, lastname; calculation = DIVIDE(SUBTRACT(maxsalary, salary), salary) * 100"}
{"sample_id": 8931, "db_id": "human_resources", "final": {"question": "Among the employees working at the office in New York, how many of them have a good job performance?", "sql": "SELECT COUNT(*) FROM employee AS T1 INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.state = 'NY' AND T1.performance = 'Good'", "source_tables": ["location", "employee"]}, "evidence": "Sandy Adams is the fullname of an employee; full name = firstname, lastname; New York refers to state = 'NY'; good job performance refers to performance = 'Good';"}
{"sample_id": 8938, "db_id": "human_resources", "final": {"question": "Which employee's job position requires a higher education level, Jose Rodriguez or Sandy Adams?", "sql": "SELECT T1.firstname, T1.lastname FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE (T1.lastname = 'Adams' AND T1.firstname = 'Sandy') OR (T1.lastname = 'Rodriguez' AND T1.firstname = 'Jose') ORDER BY T2.educationrequired DESC LIMIT 1", "source_tables": ["employee", "position"]}, "evidence": "Jose Rodriguez AND Sandy Adams are the fullname of employee; full name = firstname, lastname; higher education level refers to MAX(educationrequired)"}
{"sample_id": 8950, "db_id": "human_resources", "final": {"question": "Who is the employee in \u201cNew York City\u201d with a good performance? Give the social security number of the employee.", "sql": "SELECT T1.firstname, T1.lastname, T1.ssn FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.locationcity = 'New York City' AND T1.performance = 'Good'", "source_tables": ["location", "employee"]}, "evidence": "New York City refers to locationcity = 'New York City'; good performance refers to performance = 'Good'; social security number refers to ssn"}
{"sample_id": 8973, "db_id": "human_resources", "final": {"question": "What is the maximum salary of position \"Trainer\"?", "sql": "SELECT maxsalary FROM position WHERE positiontitle = 'Trainee'", "source_tables": ["position"]}, "evidence": "maximum salary refers to maxsalary; Trainee is a positiontitle"}
{"sample_id": 8939, "db_id": "human_resources", "final": {"question": "Please list the zip codes of the offices where all the male employees with a good job performance work at.", "sql": "SELECT T2.zipcode FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.gender = 'M' AND T1.performance = 'Good'", "source_tables": ["location", "employee"]}, "evidence": "male employees refers to gender = 'M'; good job performance refers to performance = 'Good'"}
{"sample_id": 9077, "db_id": "bike_share_1", "final": {"question": "Is there any intercity trip were made during 2014? If yes, list out the city name for the start and end station.", "sql": "SELECT T1.start_station_name, T1.end_station_name FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.start_date LIKE '%/%/2014%' AND T1.start_station_name != T1.end_station_name", "source_tables": ["station", "trip"]}, "evidence": "intercity trip refers to start_station_name! = end_station_name; during 2014 refers to start_date like '%2014%'; start station refers to start_station_name; end station refers to end_station_name;"}
{"sample_id": 9095, "db_id": "bike_share_1", "final": {"question": "What is the average coldest temperature for the zip code of 94301 and what stations are within the zip code? Include the latitude and longitude as well.", "sql": "SELECT AVG(T3.min_temperature_f), T1.long, T1.lat FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name INNER JOIN weather AS T3 ON T3.zip_code = T2.zip_code WHERE T3.zip_code = 94301", "source_tables": ["weather", "station", "trip"]}, "evidence": "coldest temperature refers to min_temperature_f; average coldest temperature refers = AVG(min_temperature_f); stations refers to name; latitude refers to lat; longitude refers to long;"}
{"sample_id": 9053, "db_id": "bike_share_1", "final": {"question": "What is the mean temperature in Fahrenheit on 8/29/2013 for the area where the zip code is 94107?", "sql": "SELECT SUM(IIF(zip_code = 94107 AND date = '8/29/2013', mean_temperature_f, 0)) FROM weather", "source_tables": ["weather"]}, "evidence": "mean temperature in Fahrenheit refers to mean_temperature_f; on 8/29/2013 refers to date = '8/29/2013';"}
{"sample_id": 8996, "db_id": "bike_share_1", "final": {"question": "Among all the trips, which day had the most bikes borrowed? What was the average coldest temperature on that day?", "sql": "SELECT T2.date, AVG(T2.min_temperature_f) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code GROUP BY T2.date ORDER BY COUNT(T1.start_date) DESC LIMIT 1", "source_tables": ["weather", "trip"]}, "evidence": "which day had the most bikes borrowed refers to MAX(start_date); the average coldest temperature can be computed as DIVIDE(SUM(min_temperature_f), COUNT(min_temperature_f));"}
{"sample_id": 9091, "db_id": "bike_share_1", "final": {"question": "Name the city of the station that trip ID 585842 borrowed a bike and indicate when that station was first installed.", "sql": "SELECT T2.city, T2.installation_date FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.id = 585842", "source_tables": ["station", "trip"]}, "evidence": "when the station was first installed refers to installation_date;"}
{"sample_id": 9080, "db_id": "bike_share_1", "final": {"question": "What is the total trip duration made within Palo Alto city? Convert the duration to hour.", "sql": "SELECT CAST(SUM(T1.duration) AS REAL) / 3600 FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'Palo Alto'", "source_tables": ["station", "trip"]}, "evidence": "total trip duration to hour = DIVIDE(SUM(duration), 3600);"}
{"sample_id": 9044, "db_id": "bike_share_1", "final": {"question": "How many trips which start station and end station are the same?", "sql": "SELECT SUM(IIF(start_station_id = end_station_id, 1, 0)) FROM trip", "source_tables": ["trip"]}, "evidence": "start station refers to start_station_id; end station refers to end_station_id; start station and end station are the same refers to start_station_id = end_station_id;"}
{"sample_id": 9064, "db_id": "bike_share_1", "final": {"question": "When was the bike station from which the bike was borrowed on trip ID4069 installed?", "sql": "SELECT T2.installation_date FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.id = 4069", "source_tables": ["station", "trip"]}, "evidence": "bike was borrowed from refers to start_station_id; when the bike station was installed refers to installation_date;"}
{"sample_id": 9032, "db_id": "bike_share_1", "final": {"question": "Find the average ride duration during the rain of more than 0.8 inches.", "sql": "SELECT AVG(T1.duration) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE (T2.events = 'Rain' AND T2.precipitation_inches > 0.8) OR (T2.events = 'rain' AND T2.precipitation_inches > 0.8)", "source_tables": ["weather", "trip"]}, "evidence": "rain of more than 0.8 inches refers to events = rain where precipitation_inches>0.8; average ride duration = DIVIDE(SUM(duration), COUNT(duration));"}
{"sample_id": 9096, "db_id": "bike_share_1", "final": {"question": "Calculate the average duration travelled by subscribers that both started and ended their trip in Mountain View City Hall and indicate the date when the station was first installed.", "sql": "SELECT AVG(T1.duration), T2.installation_date FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.start_station_name = 'Mountain View City Hall' AND T1.subscription_type = 'Subscriber' AND T1.end_station_name = 'Mountain View City Hall'", "source_tables": ["station", "trip"]}, "evidence": "average duration = DIVIDE(SUM(duration), COUNT(id)); subscribers refers to subscription_type = 'subscriptions'; started and ended their trip at Mountain View City Hall refers to start_station_name = 'Mountain View City Hall' and end_station_name = 'Mountain View City Hall'; when the station was first installed refers to installation_date;"}
{"sample_id": 9027, "db_id": "bike_share_1", "final": {"question": "Calculate the difference between the number of customers and the number of subscribers who did the trip in June 2013.", "sql": "SELECT SUM(IIF(subscription_type = 'Subscriber', 1, 0)) - SUM(IIF(subscription_type = 'Customer', 1, 0)) FROM trip WHERE start_date LIKE '6/%/2013%'", "source_tables": ["trip"]}, "evidence": "customer refers to subscription_type = 'Customer'; subscribers refers to subscription_type = 'Subscriber'; difference = SUBTRACT(SUM(subscription_type = 'Subscriber' t), SUM(subscription_type = 'Customer')); trip in June 2013 refers to start_date BETWEEN '6/1/2013 0:00'AND '6/31/2013 12:59';"}
{"sample_id": 8993, "db_id": "bike_share_1", "final": {"question": "List all trips where bikes were returned at location 37.331415, -121.8932. State the date the bike was borrowed.", "sql": "SELECT T2.end_station_name, T2.start_date FROM station AS T1 INNER JOIN trip AS T2 ON T2.end_station_name = T1.name WHERE T1.lat = 37.331415 AND T1.long = -121.8932", "source_tables": ["station", "trip"]}, "evidence": "37.331415 and -121.8932 are latitude (lat) and longitude (long) coordinates indicating location; returned at refers to end_station_name; the date the bike was borrowed refers to start_date;"}
{"sample_id": 9005, "db_id": "bike_share_1", "final": {"question": "Which year experienced the most rain?", "sql": "SELECT SUBSTR(CAST(date AS TEXT), -4) FROM weather GROUP BY SUBSTR(CAST(date AS TEXT), -4) ORDER BY SUM(CASE WHEN events LIKE '%Rain%' OR events LIKE '%rain%' THEN 1 ELSE 0 END) DESC LIMIT 1", "source_tables": ["weather"]}, "evidence": "events = 'Rain'; year refers to YEAR(date);"}
{"sample_id": 9009, "db_id": "bike_share_1", "final": {"question": "Which day in the month of November, 2014 have a foggy weather in the zip code 94301 and in total, how many bikes were borrowed by subscribers from all of the stations in the said day?", "sql": "SELECT T2.date, COUNT(T1.start_station_name) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '11/%/2014%' AND T2.zip_code = 94301 AND T2.events = 'Fog' AND T1.subscription_type = 'Subscriber'", "source_tables": ["weather", "trip"]}, "evidence": "day in the month of November, 2014 refers to start_date between '11/1/2014' and '11/30/2014'; foggy weather refers to events = 'Fog'; subscriber refers to subscription_type; all of the stations bikes were borrowed from refer to start_station_name;"}
{"sample_id": 9071, "db_id": "bike_share_1", "final": {"question": "What is the longest trip duration according? Convert the it to number of days.", "sql": "SELECT MAX(duration), CAST(MAX(duration) AS REAL) / 86400 FROM trip", "source_tables": ["trip"]}, "evidence": "longest trip duration refers to MAX(duration); days conversion = DIVIDE(duration, 86400);"}
{"sample_id": 9088, "db_id": "bike_share_1", "final": {"question": "What is the average duration of trips for the starting station of Santa Clara at Almaden and what is the latitude and longitude of this station?", "sql": "SELECT AVG(T1.duration), T2.lat, T2.long FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name LEFT JOIN station AS T3 ON T3.name = T1.end_station_name WHERE T1.start_station_name = 'Santa Clara at Almaden'", "source_tables": ["station", "trip"]}, "evidence": "average duration = DIVIDE(SUM(duration), COUNT(id)); starting station refers to start_station_name; start_station_name = 'Santa Clara at Almaden'; latitude refers to lat; longitude refers to long;"}
{"sample_id": 9087, "db_id": "bike_share_1", "final": {"question": "What is the percentage ration of customers to subscribers that started their trips within the city of San Francisco?", "sql": "SELECT CAST(SUM(CASE WHEN T1.subscription_type = 'Customer' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.subscription_type = 'Subscriber' THEN 1 ELSE 0 END) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'San Francisco'", "source_tables": ["station", "trip"]}, "evidence": "customer refers to subscription_type = 'customer'; subscriber refers to subscription_type = 'subscriber'; started their trips within refers to start_station_id; percentage ratio = DIVIDE(SUM(subscription_type = 'Customer'), SUM(subscription_type = 'Subscriber')) as percentage;"}
{"sample_id": 9040, "db_id": "bike_share_1", "final": {"question": "Which year had the most number of trips that started at stations in San Francisco?", "sql": "SELECT SUBSTR(CAST(T1.start_date AS TEXT), INSTR(T1.start_date, ' '), -4) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'San Francisco' GROUP BY T1.start_station_name ORDER BY COUNT(T1.id) DESC LIMIT 1", "source_tables": ["station", "trip"]}, "evidence": "started at station refers to start_station_name; San Francisco refers to city = 'San Francisco'; year that had the most number of trips refers to MAX(year(start_date));"}
{"sample_id": 9062, "db_id": "bike_share_1", "final": {"question": "Among the bike trips started on the days with a fog in 2013, how many of those trips started from the station \"2nd at Townsend\"?", "sql": "SELECT COUNT(T1.start_station_name) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '%2013%' AND T2.events = 'Fog' AND T1.start_station_name = '2nd at Townsend' AND T2.zip_code = 94107", "source_tables": ["weather", "trip"]}, "evidence": "started on the days with a fog refers to start_date where events = 'fog'; in 2013 refers to date LIKE '%2013'; started from station refers to start_station_name; start_station_name = '2nd at Townsend';"}
{"sample_id": 9023, "db_id": "bike_share_1", "final": {"question": "Please write down the trip IDs which ended on the days when the minimum temperature is less than 45 degrees Fahrenheit.", "sql": "SELECT T1.id FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.min_temperature_f < 45", "source_tables": ["weather", "trip"]}, "evidence": "the minimum temperature is less than 45 degrees Fahrenheit refers to min_temperature_f<45;"}
{"sample_id": 9037, "db_id": "bike_share_1", "final": {"question": "Please list bikes id were used in trips which start station were installed in 2013.", "sql": "SELECT DISTINCT T1.bike_id FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.installation_date LIKE '%2013'", "source_tables": ["station", "trip"]}, "evidence": "start station refers to start_station_name; installed in 2013 refers to installation_date LIKE '%2013';"}
{"sample_id": 9051, "db_id": "bike_share_1", "final": {"question": "In 2015, what percentage of trips that had the subscription type was Customer and ended on a rainy day?", "sql": "SELECT CAST(SUM(CASE WHEN T2.events = 'Rain' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTR(CAST(T2.date AS TEXT), -4) = '2015' AND T1.subscription_type = 'Customer'", "source_tables": ["weather", "trip"]}, "evidence": "in 2015 refers to end_date like '%2015%'; percentage = DIVIDE(COUNT(events = 'Rain'), COUNT(events));"}
{"sample_id": 9261, "db_id": "movie_3", "final": {"question": "How many rentals did Ella Oliver hire in June 2016?", "sql": "SELECT COUNT(T1.rental_id) FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'ELLA' AND T2.last_name = 'ELLA' AND date(T1.rental_date) BETWEEN '2005-06-01' AND '2005-06-30'", "source_tables": ["customer", "rental"]}, "evidence": "'Ella Oliver' is a full name of a customer; full name refers to first_name, last_name; rental hired in June 2016 refers to rental_date BETWEEN '2005-06-01' AND '2005-06-30'"}
{"sample_id": 9312, "db_id": "movie_3", "final": {"question": "List all the animation titles.", "sql": "SELECT T3.title AS per FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T2.name = 'Animation'", "source_tables": ["category", "film_category", "film"]}, "evidence": "'animation' is a name of a category"}
{"sample_id": 9416, "db_id": "movie_3", "final": {"question": "What is the total amount of money Mary Smith has spent on film rentals?", "sql": "SELECT SUM(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH'", "source_tables": ["payment", "customer"]}, "evidence": "the total amount = sum(amount)"}
{"sample_id": 9134, "db_id": "movie_3", "final": {"question": "Among all films that the customer RUTH MARTINEZ has rented, what is the percentage of it being a Music film?", "sql": "SELECT CAST(SUM(IIF(T3.name = 'Music', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id INNER JOIN inventory AS T4 ON T1.film_id = T4.film_id INNER JOIN customer AS T5 ON T4.store_id = T5.store_id INNER JOIN rental AS T6 ON T4.inventory_id = T6.inventory_id WHERE T5.first_name = 'RUTH' AND T5.last_name = 'MARTINEZ'", "source_tables": ["film_category", "film", "rental", "inventory", "customer", "category"]}, "evidence": "music film refers to name = 'Music'; percentage = Divide (Count(film_id where name = 'Music'), Count(film_id)) * 100"}
{"sample_id": 9304, "db_id": "movie_3", "final": {"question": "Who is the manager of the store with the largest collection of films?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T3.first_name, T3.last_name, COUNT(T1.film_id) AS num FROM inventory AS T1 INNER JOIN store AS T2 ON T1.store_id = T2.store_id INNER JOIN staff AS T3 ON T2.manager_staff_id = T3.staff_id GROUP BY T3.first_name, T3.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["inventory", "store", "staff"]}, "evidence": "Who refers to first_name, last_name; the largest collection of films refers to MAX(film_id)"}
{"sample_id": 9145, "db_id": "movie_3", "final": {"question": "Give the detailed address for store No.2.", "sql": "SELECT T1.address, T1.address2, T1.district FROM address AS T1 INNER JOIN store AS T2 ON T1.address_id = T2.address_id WHERE T2.store_id = 2", "source_tables": ["store", "address"]}, "evidence": "store no. 22 refers to store_id = 2; detailed address refers to address, address2, district"}
{"sample_id": 9418, "db_id": "movie_3", "final": {"question": "Please give the full name of the customer who had made the biggest amount of payment in one single film rental.", "sql": "SELECT T2.first_name, T2.last_name FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.amount DESC LIMIT 1", "source_tables": ["payment", "customer"]}, "evidence": "full name refers to first_name, last_name; the biggest amount refers to max(amount)"}
{"sample_id": 9374, "db_id": "movie_3", "final": {"question": "What is the average rental rate for PG-13 rated movies?", "sql": "SELECT AVG(rental_rate) FROM film WHERE rating = 'PG-13'", "source_tables": ["film"]}, "evidence": "PG-13 rated movie refers to rating = 'PG-13'; average rental rate = avg(rental_rate)"}
{"sample_id": 9323, "db_id": "movie_3", "final": {"question": "How many customers have an address in Abu Dhabi city? List those customer names.", "sql": "SELECT COUNT(T1.city_id) FROM city AS T1 INNER JOIN address AS T2 ON T1.city_id = T2.city_id INNER JOIN customer AS T3 ON T2.address_id = T3.address_id WHERE T1.city = 'Abu Dhabi'", "source_tables": ["city", "customer", "address"]}, "evidence": "name refers to first_name, last_name"}
{"sample_id": 9272, "db_id": "movie_3", "final": {"question": "How many customers live in the city of Miyakonojo?", "sql": "SELECT COUNT(T3.customer_id) FROM city AS T1 INNER JOIN address AS T2 ON T1.city_id = T2.city_id INNER JOIN customer AS T3 ON T2.address_id = T3.address_id WHERE T1.city = 'Miyakonojo'", "source_tables": ["city", "customer", "address"]}, "evidence": ""}
{"sample_id": 9235, "db_id": "movie_3", "final": {"question": "List the store ID of the films with a rental rate greater than the 60% of average rental rate of all listed films.", "sql": "SELECT T2.store_id FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T1.rental_rate > ( SELECT AVG(T1.rental_rate) * 0.6 FROM film AS T1 )", "source_tables": ["inventory", "film"]}, "evidence": "average rental rate of all listed films refers to AVG(rental_rate); rental rate greater than the 60% of average rental rate refers to rental_rate > (AVG(rental_rate)) MULTIPLY 0.6"}
{"sample_id": 9362, "db_id": "movie_3", "final": {"question": "How many documentary films are rated PG-13?", "sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Documentary' AND T1.rating = 'PG-13'", "source_tables": ["category", "film_category", "film"]}, "evidence": "documentary film refers to category.name = 'documentary'; rated PG-13 refers to rating = 'PG-13'"}
{"sample_id": 9142, "db_id": "movie_3", "final": {"question": "State the number of films that are 178 minutes long.", "sql": "SELECT COUNT(film_id) FROM film WHERE length = '178'", "source_tables": ["film"]}, "evidence": "178 min long refers to length = '178'"}
{"sample_id": 9248, "db_id": "movie_3", "final": {"question": "Give the total amount of rent for the movie Clockwork Paradice.", "sql": "SELECT SUM(T1.amount) FROM payment AS T1 INNER JOIN rental AS T2 ON T1.rental_id = T2.rental_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T4.title = 'CLOCKWORK PARADICE'", "source_tables": ["payment", "inventory", "rental", "film"]}, "evidence": "'Clockwork Paradice' is a title of a film"}
{"sample_id": 9270, "db_id": "movie_3", "final": {"question": "Indicate the name of the actors of the films rated as 'Parents Strongly Precautioned' with the highest replacement cost.", "sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.rating = 'PG-13' ORDER BY T3.replacement_cost DESC LIMIT 1", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "name refers to first_name, last_name; Parents Strongly Precautioned' refers to rating = 'PG-13'; \nhighest replacement cost refers to MAX(replacement_cost)"}
{"sample_id": 9345, "db_id": "movie_3", "final": {"question": "What is Mary Smith's rental ID?", "sql": "SELECT T2.rental_id FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'MARY' AND T1.last_name = 'SMITH'", "source_tables": ["customer", "rental"]}, "evidence": ""}
{"sample_id": 9398, "db_id": "movie_3", "final": {"question": "List down the actor ID of actors with Dee as their last name.", "sql": "SELECT actor_id FROM actor WHERE last_name = 'Dee'", "source_tables": ["actor"]}, "evidence": ""}
{"sample_id": 9163, "db_id": "movie_3", "final": {"question": "What is the percentage more for the rental payment for store No.2 than store No.1?", "sql": "SELECT CAST((SUM(IIF(T2.store_id = 2, T1.amount, 0)) - SUM(IIF(T2.store_id = 1, T1.amount, 0))) AS REAL) * 100 / SUM(IIF(T2.store_id = 1, T1.amount, 0)) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id INNER JOIN store AS T3 ON T2.store_id = T3.store_id", "source_tables": ["payment", "store", "customer"]}, "evidence": "store no. 1 refers to store_id = 1; store no.2 refers to store_id = 2; rental payment refers to amount; percent more = Divide (Subtract(amount where store_id = 2, amount where store_id = 1), amount where store_id = 1) *100"}
{"sample_id": 9121, "db_id": "movie_3", "final": {"question": "Please list the titles of all the films under the category of \"Horror\" and has a rental rate of $2.99.", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Horror' AND T1.rental_rate = 2.99", "source_tables": ["category", "film_category", "film"]}, "evidence": "\"Horror\" is the name of category; rental rate of $2.99 refers to rental_rate = 2.99"}
{"sample_id": 9180, "db_id": "movie_3", "final": {"question": "What is the most common special features of science-fiction movies?", "sql": "SELECT T1.special_features FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'sci-fi' ORDER BY T1.special_features DESC LIMIT 1", "source_tables": ["category", "film_category", "film"]}, "evidence": "\"science fiction\" is the name of category; most common special features refers to Max(frequency(special_features))"}
{"sample_id": 9150, "db_id": "movie_3", "final": {"question": "Sherri Rhodes rented a film at 12:27:27 on 2005/7/28, when did she/he return that film?", "sql": "SELECT T2.return_date FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'SHERRI' AND T1.last_name = 'RHODES' AND T2.rental_date = '2005-07-28 12:27:27'", "source_tables": ["customer", "rental"]}, "evidence": "rented at 12:27:27 on 2005/7/28 refers to rental_date = '2005-07-28 12:27:27'"}
{"sample_id": 9277, "db_id": "movie_3", "final": {"question": "What is the average amount of rent that Christy Vargas paid?", "sql": "SELECT AVG(T2.amount) FROM customer AS T1 INNER JOIN payment AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'CHRISTY' AND T1.Last_name = 'VARGAS'", "source_tables": ["payment", "customer"]}, "evidence": "'Christy Vargas' is a full name of a customer; full name refers to first_name, last_name; average amount of rent refers to AVG(amount)"}
{"sample_id": 9303, "db_id": "movie_3", "final": {"question": "How many films did a customer named Francis Sikes rent?", "sql": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'FRANCIS' AND T1.last_name = 'SIKES'", "source_tables": ["customer", "rental"]}, "evidence": "'Francis Sikes' is a full name of a customer; full name refers to first_name, last_name;"}
{"sample_id": 9295, "db_id": "movie_3", "final": {"question": "What is the percentage of documentary films?", "sql": "SELECT CAST(SUM(IIF(T2.name = 'Documentary', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id", "source_tables": ["category", "film_category"]}, "evidence": "documentary' is a name of a category; calculation = DIVIDE(SUM(name = 'Documentary'), COUNT(film_id)) * 100"}
{"sample_id": 9259, "db_id": "movie_3", "final": {"question": "What language was the most used in movies released in 2006?", "sql": "SELECT T.language_id FROM ( SELECT T1.language_id, COUNT(T1.language_id) AS num FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE STRFTIME('%Y',T1.release_year) = '2006' GROUP BY T1.language_id ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["language", "film"]}, "evidence": "released in 2006 refers to release_year = 2006; the most used language refers to MAX(COUNT(language_id))"}
{"sample_id": 9183, "db_id": "movie_3", "final": {"question": "Who is the staff manager of the store with the most non-active customers?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T3.first_name, T3.last_name, COUNT(T1.customer_id) AS num FROM customer AS T1 INNER JOIN store AS T2 ON T1.store_id = T2.store_id INNER JOIN staff AS T3 ON T2.store_id = T3.store_id WHERE T1.active = 0 GROUP BY T3.first_name, T3.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["store", "customer", "staff"]}, "evidence": "most non-active customer refers to Max(Count(active = 0))"}
{"sample_id": 9216, "db_id": "movie_3", "final": {"question": "How much percentage of the film did Mary Keitel perform more than Angela Witherspoon?", "sql": "SELECT CAST((SUM(IIF(T1.first_name = 'ANGELA' AND T1.last_name = 'WITHERSPOON', 1, 0)) - SUM(IIF(T1.first_name = 'MARY' AND T1.last_name = 'KEITEL', 1, 0))) AS REAL) * 100 / SUM(IIF(T1.first_name = 'MARY' AND T1.last_name = 'KEITEL', 1, 0)) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id", "source_tables": ["film_actor", "actor"]}, "evidence": "'Mary Keitel' AND 'Angela Witherspoon' are full name of actors; full name refers to FirstName, LastName; calculation = DIVIDE(SUBTRACT(SUM('Mary Keitel'), SUM('Angela Witherspoon')), SUM('Angela Witherspoon')) * 100"}
{"sample_id": 9233, "db_id": "movie_3", "final": {"question": "List the titles of the films starred by Elvis Marx.", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.length BETWEEN 110 AND 150 AND T1.first_name = 'Russell' AND T1.last_name = 'Close'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "'Elvis Marx' is a full name of a film; full name refers to first_name, last_name"}
{"sample_id": 9194, "db_id": "movie_3", "final": {"question": "List the actors' IDs who have \"KILMER\" as last name.", "sql": "SELECT actor_id FROM actor WHERE last_name = 'KILMER'", "source_tables": ["actor"]}, "evidence": ""}
{"sample_id": 9138, "db_id": "movie_3", "final": {"question": "Who is the owner of email address \"JEREMY.HURTADO@sakilacustomer.org\"? Give the full name.", "sql": "SELECT first_name, last_name FROM customer WHERE email = 'JEREMY.HURTADO@sakilacustomer.org'", "source_tables": ["customer"]}, "evidence": "\"JEREMY.HURTADO@sakilacustomer.org\" is the email; owner refers to customer; full name refers to first_name, last_name"}
{"sample_id": 9153, "db_id": "movie_3", "final": {"question": "Where does the staff Jon Stephens live?", "sql": "SELECT T1.address, T1.address2 FROM address AS T1 INNER JOIN staff AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = 'Jon' AND T2.last_name = 'Stephens'", "source_tables": ["staff", "address"]}, "evidence": "location refers to address, address2, district"}
{"sample_id": 9104, "db_id": "movie_3", "final": {"question": "Please list the titles of all the films that have more than 2 special features.", "sql": "SELECT title FROM ( SELECT title, COUNT(special_features) AS num FROM film GROUP BY title ) AS T ORDER BY T.num > 2", "source_tables": ["film"]}, "evidence": "more than 2 special features refers to Count(special_features) > 2"}
{"sample_id": 9222, "db_id": "movie_3", "final": {"question": "Among the customers with customer ID of 100 and below, how many of them have Thomas as their last name?", "sql": "SELECT COUNT(customer_id) FROM customer WHERE last_name = 'Thomas' AND customer_id < 100", "source_tables": ["customer"]}, "evidence": "customer ID of 100 and below refers to customer_id < 100"}
{"sample_id": 9113, "db_id": "movie_3", "final": {"question": "Please list the full names of all the actors that have starred in the film ACADEMY DINOSAUR.", "sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'ACADEMY DINOSAUR'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "full name refers to first_name, last_name; \"ACADEMY DINOSAUR\" is the title of film"}
{"sample_id": 9390, "db_id": "movie_3", "final": {"question": "List at least 3 cities under the country of Philippines.", "sql": "SELECT T1.city FROM city AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE country = 'Philippines'", "source_tables": ["city", "country"]}, "evidence": ""}
{"sample_id": 9128, "db_id": "movie_3", "final": {"question": "Please give the full name of the customer that have rented the most films.", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, COUNT(T2.rental_id) AS num FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["customer", "rental"]}, "evidence": "full name refers to first_name, last_name; customer who rented the most film refers to Max(count(rental_id))"}
{"sample_id": 9136, "db_id": "movie_3", "final": {"question": "What is Diane Collins' email address?", "sql": "SELECT email FROM customer WHERE first_name = 'DIANE' AND last_name = 'COLLINS'", "source_tables": ["customer"]}, "evidence": ""}
{"sample_id": 9129, "db_id": "movie_3", "final": {"question": "Among the customers who have rented the film ACADEMY DINOSAUR, how many of them are active?", "sql": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.active = 1 AND T4.title = 'ACADEMY DINOSAUR'", "source_tables": ["inventory", "customer", "rental", "film"]}, "evidence": "\"ACADEMY DINOSAUR\" is the title of film; customer refers to customer_id; active refers to active = 1"}
{"sample_id": 9097, "db_id": "movie_3", "final": {"question": "What is the description of the film ACADEMY DINOSAUR?", "sql": "SELECT description FROM film WHERE title = 'ACADEMY DINOSAUR'", "source_tables": ["film"]}, "evidence": "\"ACADEMY DINOSAUR\" is the title of film"}
{"sample_id": 9251, "db_id": "movie_3", "final": {"question": "In children's movies, which was rented the most?", "sql": "SELECT T.title FROM ( SELECT T4.title, COUNT(T4.title) AS num FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id INNER JOIN film_category AS T5 ON T4.film_id = T5.film_id INNER JOIN category AS T6 ON T5.category_id = T6.category_id WHERE T6.name = 'Children' GROUP BY T4.title ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["film_category", "rental", "film", "inventory", "customer", "category"]}, "evidence": "children is the name of the category; rented the most refers to MAX(COUNT(title))"}
{"sample_id": 9320, "db_id": "movie_3", "final": {"question": "Please give the description of the movie starring JENNIFER DAVIS.", "sql": "SELECT T3.description FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T3.film_id = T2.film_id WHERE T1.first_name = 'JOHNNY' AND T1.last_name = 'DAVIS'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": ""}
{"sample_id": 9368, "db_id": "movie_3", "final": {"question": "Where can you rent the movie 'Wyoming Storm'? Identify the address of the rental store and the rental rate.", "sql": "SELECT T2.store_id, T1.address, T4.rental_rate FROM address AS T1 INNER JOIN store AS T2 ON T1.address_id = T2.address_id INNER JOIN inventory AS T3 ON T2.store_id = T3.store_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T4.title = 'WYOMING STORM'", "source_tables": ["inventory", "store", "address", "film"]}, "evidence": "'Wyoming Storm' refers to title = 'WYOMING STORM'"}
{"sample_id": 9413, "db_id": "movie_3", "final": {"question": "Which country does Mary Smith live in?", "sql": "SELECT T3.country FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id INNER JOIN customer AS T4 ON T1.address_id = T4.address_id WHERE T4.first_name = 'MARY' AND T4.last_name = 'SMITH'", "source_tables": ["city", "customer", "address", "country"]}, "evidence": ""}
{"sample_id": 9371, "db_id": "movie_3", "final": {"question": "Name the movie with the highest rental revenue among the shortest films.", "sql": "SELECT title FROM film WHERE length = ( SELECT MIN(length) FROM film ) ORDER BY rental_duration * rental_rate DESC LIMIT 1", "source_tables": ["film"]}, "evidence": "movie name refers to title; the highest rental revenue refers to max(multiply(rental_duration, rental_rate)); the shortest film refers to min(length)"}
{"sample_id": 9400, "db_id": "movie_3", "final": {"question": "In store ID 2, how many of the films are R rating?\n", "sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T2.store_id = 2 AND T1.rating = 'R'", "source_tables": ["inventory", "film"]}, "evidence": "R rating refers to rating = 'R'"}
{"sample_id": 9388, "db_id": "movie_3", "final": {"question": "Who are the actors starred in the film \"Bound Cheaper\"?", "sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'BOUND CHEAPER'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "actor refers to first_name, last_name; film \"Bound Cheaper\" refers to title = 'BOUND CHEAPER'"}
{"sample_id": 9102, "db_id": "movie_3", "final": {"question": "Among the films that are released in 2006, how many of them are rated Adults Only in the Motion Picture Association Film Rating?", "sql": "SELECT COUNT(film_id) FROM film WHERE rating = 'NC-17' AND release_year = 2006", "source_tables": ["film"]}, "evidence": "released in 2006 refers to release_year = 2006; rated Adults Only refers to rating = 'NC-17'"}
{"sample_id": 9352, "db_id": "movie_3", "final": {"question": "Calculate the total rental rate for animation film titles.", "sql": "SELECT SUM(T1.rental_rate) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.\"name\" = 'Animation'", "source_tables": ["category", "film_category", "film"]}, "evidence": "animation film refers to category.name = 'Animation'; total rental rate = sum(rental_rate)"}
{"sample_id": 9193, "db_id": "movie_3", "final": {"question": "Who are the top 5 actors with the highest number of films? List their full names and calculate the average number of films for each of the actors.", "sql": "SELECT T.first_name, T.last_name, num FROM ( SELECT T1.first_name, T1.last_name, COUNT(T2.film_id) AS num FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.num DESC LIMIT 5", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "actors with highest number of films refers to actor_id with Max(Count(film_id)); full name refers to first_name, last_name; average number of film = Divide (Count(film_id), 5)"}
{"sample_id": 9284, "db_id": "movie_3", "final": {"question": "Where is store number 2 located?", "sql": "SELECT T1.address, T1.address2, T1.district FROM address AS T1 INNER JOIN store AS T2 ON T1.address_id = T2.address_id WHERE T2.store_id = 2", "source_tables": ["store", "address"]}, "evidence": "store number 2 refers to store_id = 2; where is a store located refers to address, address2, district"}
{"sample_id": 9342, "db_id": "movie_3", "final": {"question": "List down all film IDs of comedy film titles.", "sql": "SELECT T1.film_id FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T3.name = 'comedy'", "source_tables": ["category", "film_category", "film"]}, "evidence": "comedy is name of category"}
{"sample_id": 9197, "db_id": "movie_3", "final": {"question": "How many films rented on 26th May, 2005 were returned on 30th May, 2005?", "sql": "SELECT COUNT(DISTINCT rental_id) FROM rental WHERE date(rental_date) BETWEEN '2005-05-26' AND '2005-05-30'", "source_tables": ["rental"]}, "evidence": "rented on 26th May 2005 refers to rental_date = '2005-05-26'; return on 30th May, 2005 refers to return_date = '2005-05-30'; number of rented film refers to Count (rental_id)"}
{"sample_id": 9296, "db_id": "movie_3", "final": {"question": "How many films in English are for adults only?", "sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T2.name = 'English' AND T1.rating = 'NC-17'", "source_tables": ["language", "film"]}, "evidence": "English is a name of a language; for adults only refers to rating = 'NC-17'"}
{"sample_id": 9279, "db_id": "movie_3", "final": {"question": "What are the actors that have the same forename as Johnny? Please include in your answer the full names of these actors.", "sql": "SELECT first_name, last_name FROM actor WHERE first_name = 'Johnny'", "source_tables": ["actor"]}, "evidence": "forename means first_name; full name refers to first_name, last_name"}
{"sample_id": 9332, "db_id": "movie_3", "final": {"question": "How many film titles were released in 2006?", "sql": "SELECT COUNT(film_id) FROM film WHERE release_year = 2006", "source_tables": ["film"]}, "evidence": "released in 2006 refers to release_year = 2006"}
{"sample_id": 9402, "db_id": "movie_3", "final": {"question": "Give the duration of the film starred by Nick Wahlberg with the highest rental rate.", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Nick' AND T1.last_name = 'Wahlberg' ORDER BY T3.rental_rate DESC LIMIT 1", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "duration refers to length; the highest rental rate refers to max(rental_rate)"}
{"sample_id": 9298, "db_id": "movie_3", "final": {"question": "How many of the actors are named \"Dan\"?", "sql": "SELECT COUNT(actor_id) FROM actor WHERE first_name = 'Dan'", "source_tables": ["actor"]}, "evidence": "'Dan' is a first_name of an actor"}
{"sample_id": 9321, "db_id": "movie_3", "final": {"question": "List the full names of customers who have paid more than 10$.", "sql": "SELECT T2.first_name, T2.last_name FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.amount > 10", "source_tables": ["payment", "customer"]}, "evidence": "full name refers to first_name, last_name; more than 10$ refers to amount > 10"}
{"sample_id": 9189, "db_id": "movie_3", "final": {"question": "Among the classic movies, how many movies have a rental rate of less than 1?", "sql": "SELECT COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.rental_rate < 1 AND T2.name = 'Classics'", "source_tables": ["category", "film_category", "film"]}, "evidence": "classic movie refers to name = 'Classics'; rental rate of less than 1 refers to rental_rate < 1; movie refers to film_id"}
{"sample_id": 9098, "db_id": "movie_3", "final": {"question": "How many films have a rental duration of over 6 days?", "sql": "SELECT COUNT(film_id) FROM film WHERE rental_duration > 6", "source_tables": ["film"]}, "evidence": "rental duration of over 6 days refers to rental_duration > 6"}
{"sample_id": 9207, "db_id": "movie_3", "final": {"question": "Write down any five film names under the documentary category.", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Documentary' LIMIT 5", "source_tables": ["category", "film_category", "film"]}, "evidence": "\"Documentary\" is the name of category; film name refers to title"}
{"sample_id": 9297, "db_id": "movie_3", "final": {"question": "Which film has the longest duration?", "sql": "SELECT title FROM film WHERE length = ( SELECT MAX(length) FROM film )", "source_tables": ["film"]}, "evidence": "film refers to the title; the longest duration refers to MAX(length)"}
{"sample_id": 9318, "db_id": "movie_3", "final": {"question": "Which category does BABY HALL film belong to?", "sql": "SELECT T3.\"name\" FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T1.title = 'BABY HALL'", "source_tables": ["category", "film_category", "film"]}, "evidence": "category refers to name; BABY HALL film refers to title = 'BABY HALL'"}
{"sample_id": 9317, "db_id": "movie_3", "final": {"question": "How many id movies have category id 11?", "sql": "SELECT COUNT(film_id) FROM film_category WHERE category_id = 11", "source_tables": ["film_category"]}, "evidence": "id movies refers to film_id"}
{"sample_id": 9347, "db_id": "movie_3", "final": {"question": "List down email address of customers who were attended by staff with ID 2.", "sql": "SELECT DISTINCT T1.email FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T2.staff_id = 2", "source_tables": ["customer", "rental"]}, "evidence": "email address refers to email"}
{"sample_id": 9440, "db_id": "california_schools", "final": {"question": "How many schools in Fresno (directly funded) have number of test takers not more than 250?", "sql": "SELECT COUNT(T1.CDSCode) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.\"Charter Funding Type\" = 'Directly funded' AND T1.\"County Name\" = 'Fresno' AND T2.NumTstTakr <= 250", "source_tables": ["satscores", "frpm"]}, "evidence": ""}
{"sample_id": 9493, "db_id": "california_schools", "final": {"question": "What is the district code for the School that does not offer a magnet program in the city of Fresno?", "sql": "SELECT T1.\"District Code\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = 'Fresno' AND T2.Magnet = 0", "source_tables": ["schools", "frpm"]}, "evidence": "When magent is equal to 0 in the database, it means ths school doesn't offer a magnet program."}
{"sample_id": 9442, "db_id": "california_schools", "final": {"question": "How many schools in Amador which the Low Grade is 9 and the High Grade is 12?", "sql": "SELECT COUNT(T1.\"School Name\") FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Amador' AND T1.\"Low Grade\" = 9 AND T1.\"High Grade\" = 12", "source_tables": ["schools", "frpm"]}, "evidence": ""}
{"sample_id": 9433, "db_id": "california_schools", "final": {"question": "Please list the codes of the schools with a total enrollment of over 500.", "sql": "SELECT T2.CDSCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.\"Enrollment (K-12)\" + T2.\"Enrollment (Ages 5-17)\" > 500", "source_tables": ["schools", "frpm"]}, "evidence": "Total enrollment can be represented by `Enrollment (K-12)` + `Enrollment (Ages 5-17)`"}
{"sample_id": 9475, "db_id": "california_schools", "final": {"question": "How many test takers are there at the school/s whose mailing city address is in Fresno?", "sql": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'", "source_tables": ["schools", "satscores"]}, "evidence": ""}
{"sample_id": 9481, "db_id": "california_schools", "final": {"question": "What is the website for the schools under the administrations of Mike Larson and Dante Alvarez?", "sql": "SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez')", "source_tables": ["schools"]}, "evidence": ""}
{"sample_id": 9461, "db_id": "california_schools", "final": {"question": "What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?", "sql": "SELECT AVG(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE strftime('%Y', T2.OpenDate) = '1980' AND T2.County = 'Fresno'", "source_tables": ["schools", "satscores"]}, "evidence": "between 1/1/1980 and 12/31/1980 means the year = 1980"}
{"sample_id": 9500, "db_id": "california_schools", "final": {"question": "What is the most common type of grade span served in the city of Adelanto?", "sql": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1", "source_tables": ["schools"]}, "evidence": ""}
{"sample_id": 9458, "db_id": "california_schools", "final": {"question": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names.", "sql": "SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1", "source_tables": ["schools", "satscores"]}, "evidence": "full name means first name, last name; There are at most 3 administrators for each school; SAT Scores are greater or equal to 1500 refers to NumGE1500"}
{"sample_id": 9457, "db_id": "california_schools", "final": {"question": "What is the administrator's email address of the chartered school with the fewest students enrolled in grades 1 through 12?", "sql": "SELECT T2.AdmEmail1 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.\"Charter School (Y/N)\" = 1 ORDER BY T1.\"Enrollment (K-12)\" ASC LIMIT 1", "source_tables": ["schools", "frpm"]}, "evidence": "Charted school means `Charter School (Y/N)` = 1 in the table frpm; Students enrolled in grades 1 through 12 refers to `Enrollment (K-12)`"}
{"sample_id": 9503, "db_id": "california_schools", "final": {"question": "In which city can you find the school in the state of California with the lowest latitude coordinates and what is its lowest grade? Indicate the school name.", "sql": "SELECT T2.City, T1.\"Low Grade\", T1.\"School Name\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.State = 'CA' ORDER BY T2.Latitude ASC LIMIT 1", "source_tables": ["schools", "frpm"]}, "evidence": "State of California refers to state = 'CA'"}
{"sample_id": 9468, "db_id": "california_schools", "final": {"question": "Which state special schools have the highest number of enrollees from grades 1 through 12?", "sql": "SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 ORDER BY T1.\"Enrollment (K-12)\" DESC LIMIT 1", "source_tables": ["schools", "frpm"]}, "evidence": "State Special Schools refers to DOC = 31; Grades 1 through 12 means K-12"}
{"sample_id": 9494, "db_id": "california_schools", "final": {"question": "How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?", "sql": "SELECT T1.\"Enrollment (Ages 5-17)\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T2.City = 'Fremont' AND T1.\"Academic Year\" BETWEEN 2014 AND 2015", "source_tables": ["schools", "frpm"]}, "evidence": "State Special School means EdOpsCode = 'SSS'"}
{"sample_id": 9432, "db_id": "california_schools", "final": {"question": "For the school with the highest average score in Reading in the SAT test, what is its FRPM count for students aged 5-17?", "sql": "SELECT T2.\"FRPM Count (Ages 5-17)\" FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrRead DESC LIMIT 1", "source_tables": ["satscores", "frpm"]}, "evidence": ""}
{"sample_id": 9498, "db_id": "california_schools", "final": {"question": "What is the city location of the high school level school with Lunch Provision 2 whose lowest grade is 9 and the highest grade is 12 in the county of Merced?", "sql": "SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.\"NSLP Provision Status\" = 'Lunch Provision 2' AND T2.County = 'Merced' AND T1.\"Low Grade\" = 9 AND T1.\"High Grade\" = 12 AND T2.EILCode = 'HS'", "source_tables": ["schools", "frpm"]}, "evidence": "High school can be represented as EILCode = 'HS'"}
{"sample_id": 9453, "db_id": "california_schools", "final": {"question": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?", "sql": "SELECT CAST(\"Free Meal Count (K-12)\" AS REAL) / \"Enrollment (K-12)\" FROM frpm ORDER BY \"Enrollment (K-12)\" DESC LIMIT 9, 2", "source_tables": ["frpm"]}, "evidence": "K-12 refers to students in grades 1 through 12; Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`"}
{"sample_id": 9484, "db_id": "california_schools", "final": {"question": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%?", "sql": "SELECT COUNT(T2.School) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.Charter = 0 AND CAST(T1.\"Free Meal Count (K-12)\" AS REAL) * 100 / T1.\"Enrollment (K-12)\" < 0.18", "source_tables": ["schools", "frpm"]}, "evidence": "non-chartered schools refer to schools whose Charter = 0; K-12 means grades 1 through 12; percent of eligible free rate for K-12 = `Free Meal Count (K-12)` * 100 / `Enrollment (K-12)`"}
{"sample_id": 9562, "db_id": "financial", "final": {"question": "How many accounts are there in the district of \"Pisek\"?", "sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'", "source_tables": ["account", "district"]}, "evidence": "A2 refers to district name"}
{"sample_id": 9596, "db_id": "financial", "final": {"question": "What year was account owner number 130 born?", "sql": "SELECT STRFTIME('%Y', T1.birth_date) FROM client AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id INNER JOIN account AS T2 ON T3.account_id = T2.account_id WHERE T2.account_id = 130", "source_tables": ["client", "account", "disp"]}, "evidence": ""}
{"sample_id": 9584, "db_id": "financial", "final": {"question": "What is the region of the client with the id 3541 from?", "sql": "SELECT T1.A3 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 3541", "source_tables": ["client", "district"]}, "evidence": "A3 refers to region"}
{"sample_id": 9521, "db_id": "financial", "final": {"question": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.", "sql": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) = '1993' AND T1.duration > 12 ORDER BY T1.amount DESC LIMIT 1", "source_tables": ["account", "loan"]}, "evidence": "Loan validity more than 12 months refers to duration > 12"}
{"sample_id": 9520, "db_id": "financial", "final": {"question": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.", "sql": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1", "source_tables": ["account", "loan"]}, "evidence": "'POPLATEK TYDNE' stands for weekly issuance"}
{"sample_id": 9528, "db_id": "financial", "final": {"question": "What is the biggest amount of transaction that the client whose card was opened in 1996/10/21 made?", "sql": "SELECT T4.amount FROM card AS T1 JOIN disp AS T2 ON T1.disp_id = T2.disp_id JOIN account AS T3 on T2.account_id = T3.account_id JOIN trans AS T4 on T3.account_id = T4.account_id WHERE T1.issued = '1996-10-21' ORDER BY T4.amount DESC LIMIT 1", "source_tables": ["trans", "account", "disp", "card"]}, "evidence": ""}
{"sample_id": 9516, "db_id": "financial", "final": {"question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?", "sql": "SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1", "source_tables": ["client", "account", "disp", "district"]}, "evidence": "Female means gender = 'F'; A11 refers to average salary; Gap = highest average salary - lowest average salary; If the person A's birthdate > B's birthdate, it means that person B is order than person A."}
{"sample_id": 9575, "db_id": "financial", "final": {"question": "How many 'classic' cards are eligible for loan?", "sql": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'classic' AND T2.type = 'OWNER'", "source_tables": ["disp", "card"]}, "evidence": "when the account type = 'OWNER', it's eligible for loan"}
{"sample_id": 9535, "db_id": "financial", "final": {"question": "For the client who applied 98832 USD loan in 1996/1/3, when was his/her birthday?", "sql": "SELECT T4.birth_date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832", "source_tables": ["client", "account", "loan", "disp"]}, "evidence": ""}
{"sample_id": 9583, "db_id": "financial", "final": {"question": "What type of credit card does the client with the id 13539 own?", "sql": "SELECT T3.type FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T1.disp_id = T3.disp_id WHERE T2.client_id = 13539", "source_tables": ["client", "disp", "card"]}, "evidence": ""}
{"sample_id": 9597, "db_id": "financial", "final": {"question": "How many accounts have an owner disposition and request for a statement to be generated upon a transaction?", "sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU'", "source_tables": ["account", "disp"]}, "evidence": "Frequency = 'POPLATEK PO OBRATU' stands for issuance after transaction"}
{"sample_id": 9540, "db_id": "financial", "final": {"question": "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.", "sql": "SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(account_id) FROM loan WHERE amount < 100000", "source_tables": ["loan"]}, "evidence": "Status = 'C' stands for running contract, ok so far; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100."}
{"sample_id": 9599, "db_id": "financial", "final": {"question": "What is the sum that client number 4's account has following transaction 851? Who owns this account, a man or a woman?", "sql": "SELECT T4.balance, T1.gender FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id =T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 4 AND T4.trans_id = 851", "source_tables": ["client", "trans", "account", "disp"]}, "evidence": ""}
{"sample_id": 9612, "db_id": "financial", "final": {"question": "How many clients who were born in 1920 stay in east Bohemia?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia'", "source_tables": ["client", "district"]}, "evidence": "East Bohemia appears in the column A3, which refers to the region."}
{"sample_id": 9567, "db_id": "financial", "final": {"question": "Who are the account holder identification numbers whose who have transactions on the credit card with the amount is less than the average, in 1998?", "sql": "SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1998' AND T1.operation = 'VYBER KARTOU' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE STRFTIME('%Y', date) = '1998')", "source_tables": ["account", "trans"]}, "evidence": "Operation = 'VYBER KARTOU' refers to credit card withdrawal"}
{"sample_id": 9595, "db_id": "financial", "final": {"question": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?", "sql": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM \"order\" GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539", "source_tables": ["order", "account"]}, "evidence": "k_symbol refers to the purpose of payments"}
{"sample_id": 9568, "db_id": "financial", "final": {"question": "Who are the female account holders who own credit cards and also have loans?", "sql": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T5 ON T2.account_id = T5.account_id INNER JOIN loan AS T3 ON T5.account_id = T3.account_id INNER JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T1.gender = 'F'", "source_tables": ["client", "loan", "account", "disp", "card"]}, "evidence": "Female refers to gender = 'F'"}
{"sample_id": 9578, "db_id": "financial", "final": {"question": "Who is the owner of the account with the largest loan amount?", "sql": "SELECT T1.client_id FROM disp AS T1 INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN loan AS T2 ON T3.account_id = T2.account_id WHERE T1.type = 'OWNER' ORDER BY T2.amount DESC LIMIT 1", "source_tables": ["account", "loan", "disp"]}, "evidence": ""}
{"sample_id": 9608, "db_id": "financial", "final": {"question": "What percentage of male clients request for weekly statements to be issued?", "sql": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T3 ON T1.district_id = T3.district_id INNER JOIN account AS T2 ON T2.district_id = T3.district_id INNER JOIN disp as T4 on T1.client_id = T4.client_id AND T2.account_id = T4.account_id WHERE T2.frequency = 'POPLATEK TYDNE'", "source_tables": ["client", "account", "disp", "district"]}, "evidence": "Percentage of male clients = [count(male clients who requested weekly statements / count(clients who requested weekly statements)] * 100%; Male means gender = 'M'; 'POPLATEK TYDNE' stands for weekly issuance"}
{"sample_id": 9604, "db_id": "financial", "final": {"question": "How many male customers who were born between 1974 and 1976 have made a payment on their home in excess of $4000?", "sql": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T2.account_id = T4.account_id INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE STRFTIME('%Y', T3.birth_date) BETWEEN '1974' AND '1976' AND T3.gender = 'M' AND T1.amount > 4000 AND T1.k_symbol = 'SIPO'", "source_tables": ["client", "account", "trans", "disp"]}, "evidence": "Man and male refers to gender = 'M'; 'SIPO' stands for household payment"}
{"sample_id": 9539, "db_id": "financial", "final": {"question": "What is the percentage of loan amount that has been fully paid with no issue.", "sql": "SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100) / SUM(amount) FROM loan", "source_tables": ["loan"]}, "evidence": "Loan paid with no issue means contract finished, no problems; status = 'A' means contract finished, no problems; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100%"}
{"sample_id": 9626, "db_id": "toxicology", "final": {"question": "Of the first 100 molecules in number order, how many are carcinogenic?", "sql": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND T.label = '+'", "source_tables": ["molecule"]}, "evidence": "first 100 molecules in number order refers to molecule_id between 'TR000' and 'TR099'; label = '+' means molecules are carcinogenic"}
{"sample_id": 9671, "db_id": "toxicology", "final": {"question": "What are the elements of the atoms of TR144_8_19?", "sql": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19'", "source_tables": ["connected", "atom"]}, "evidence": "TR144_8_19 is the bond id; "}
{"sample_id": 9732, "db_id": "toxicology", "final": {"question": "How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound?", "sql": "SELECT COUNT(DISTINCT T2.molecule_id), SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '='", "source_tables": ["bond", "molecule"]}, "evidence": "double bond refers to bond_type = ' = '; label = '+' mean molecules are carcinogenic;"}
{"sample_id": 9689, "db_id": "toxicology", "final": {"question": "List down the bond type for molecules from molecule id TR000 to TR050.", "sql": "SELECT T2.molecule_id, T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR050'", "source_tables": ["bond", "molecule"]}, "evidence": "double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';"}
{"sample_id": 9640, "db_id": "toxicology", "final": {"question": "What percentage of carcinogenic-type molecules does not contain fluorine?", "sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'", "source_tables": ["atom", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic; contain fluorine refers to element = 'f'; percentage = DIVIDE(SUM(element = 'f') * 100, COUNT(molecule_id)) where label = '+'; Should consider the distinct atoms when counting;"}
{"sample_id": 9672, "db_id": "toxicology", "final": {"question": "Of all the carcinogenic molecules, which one has the most double bonds?", "sql": "SELECT T.molecule_id FROM ( SELECT T3.molecule_id, COUNT(T1.bond_type) FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T1.bond_type = '=' GROUP BY T3.molecule_id ORDER BY COUNT(T1.bond_type) DESC LIMIT 1 ) AS T", "source_tables": ["bond", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic; double bond refers to bond_type = ' = ';"}
{"sample_id": 9726, "db_id": "toxicology", "final": {"question": "List all carcinogenic molecules and their elements.", "sql": "SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'", "source_tables": ["atom", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"}
{"sample_id": 9657, "db_id": "toxicology", "final": {"question": "How many molecules are carcinogenic and have the bromine element?", "sql": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'br'", "source_tables": ["atom", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic; have bromine element refers to element = 'br'"}
{"sample_id": 9634, "db_id": "toxicology", "final": {"question": "Which element is the least numerous in non-carcinogenic molecules?", "sql": "SELECT T.element FROM (SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) ASC LIMIT 1) t", "source_tables": ["atom", "molecule"]}, "evidence": "label = '-' means molecules are non-carcinogenic; least numerous refers to MIN(COUNT(element));"}
{"sample_id": 9629, "db_id": "toxicology", "final": {"question": "What elements are in a double type bond?", "sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='", "source_tables": ["connected", "bond", "atom"]}, "evidence": "double type bond refers to bond_type = '=';"}
{"sample_id": 9649, "db_id": "toxicology", "final": {"question": "What is the percentage of molecules that are carcinogenic? Please provide your answer as a percentage with three decimal places.", "sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3) FROM molecule t", "source_tables": ["molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) as percent"}
{"sample_id": 9647, "db_id": "toxicology", "final": {"question": "Please list top five molecules that have double bonds in alphabetical order.", "sql": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '=' ORDER BY T.molecule_id LIMIT 5", "source_tables": ["bond"]}, "evidence": "double bond refers to bond_type = ' = ';"}
{"sample_id": 9668, "db_id": "toxicology", "final": {"question": "List the bond type and the bond ID of the atom 45.", "sql": "SELECT T1.bond_type, T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T2.atom_id, 7, 2) = '45'", "source_tables": ["connected", "bond"]}, "evidence": "bond ID of atom 45 refers to SUBSTR(atom_id, 7, 2) + 0 = 45; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';"}
{"sample_id": 9727, "db_id": "toxicology", "final": {"question": "Name all bonds with single bond types and what atoms are connected to the molecules.", "sql": "SELECT T1.bond_id, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'", "source_tables": ["connected", "bond"]}, "evidence": "single bond refers to bond_type = '-';"}
{"sample_id": 9753, "db_id": "toxicology", "final": {"question": "How many of the molecules are carcinogenic?", "sql": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'", "source_tables": ["molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic;"}
{"sample_id": 9687, "db_id": "toxicology", "final": {"question": "List down the molecule id for non carcinogenic molecules.", "sql": "SELECT T.molecule_id FROM molecule AS T WHERE T.label = '-'", "source_tables": ["molecule"]}, "evidence": "label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9655, "db_id": "toxicology", "final": {"question": "Please list top two bonds that happened with the molecule TR006 in alphabetical order.", "sql": "SELECT DISTINCT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR006' ORDER BY T2.bond_id LIMIT 2", "source_tables": ["connected", "atom"]}, "evidence": "TR006 is the molecule id"}
{"sample_id": 9658, "db_id": "toxicology", "final": {"question": "What are the bond type and the atoms of the bond ID of TR001_6_9?", "sql": "SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR001_6_9'", "source_tables": ["connected", "bond"]}, "evidence": "atoms refer to atom_id or atom_id2"}
{"sample_id": 9761, "db_id": "toxicology", "final": {"question": "List the atom ID of the carcinogenic molecule that contains oxygen?", "sql": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.label = '+'", "source_tables": ["atom", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic; oxygen refers to element = 'o'"}
{"sample_id": 9627, "db_id": "toxicology", "final": {"question": "Identify by their ID the molecules in which there is carbon.", "sql": "SELECT T.molecule_id FROM atom AS T WHERE T.element = 'c'", "source_tables": ["atom"]}, "evidence": "carbon refers to element = 'c';"}
{"sample_id": 9654, "db_id": "toxicology", "final": {"question": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.", "sql": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3", "source_tables": ["bond", "molecule"]}, "evidence": "label = '-' means molecules are not carcinogenic; single type bond refers to bond_type = '-'; list top three molecules refers to return molecule_id and order by molecule_id;"}
{"sample_id": 9692, "db_id": "toxicology", "final": {"question": "Among the molecules with element Calcium, are they mostly carcinogenic or non carcinogenic?", "sql": "SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca' GROUP BY T2.label ORDER BY COUNT(T2.label) DESC LIMIT 1", "source_tables": ["atom", "molecule"]}, "evidence": "calcium refers to element = 'ca'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; MAX(label)"}
{"sample_id": 9674, "db_id": "toxicology", "final": {"question": "What are the atoms that can bond with the atom that has the element lead?", "sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb'", "source_tables": ["connected", "atom"]}, "evidence": "atom that has the element lead refers to atom_id where element = 'pb'"}
{"sample_id": 9652, "db_id": "toxicology", "final": {"question": "What are the elements of the toxicology and label of molecule TR060?", "sql": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'", "source_tables": ["atom", "molecule"]}, "evidence": "TR060 is the molecule id; "}
{"sample_id": 9662, "db_id": "toxicology", "final": {"question": "List all the elements of the toxicology of the molecule \"TR004\".", "sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'", "source_tables": ["atom"]}, "evidence": "TR004 is the molecule id;"}
{"sample_id": 9676, "db_id": "toxicology", "final": {"question": "What percentage of bonds have the most common combination of atoms' elements?", "sql": "SELECT CAST((SELECT COUNT(T1.atom_id) FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id GROUP BY T2.bond_type ORDER BY COUNT(T2.bond_id) DESC LIMIT 1 ) AS REAL) * 100 / ( SELECT COUNT(atom_id) FROM connected )", "source_tables": ["connected", "bond"]}, "evidence": "DIVIDE(COUNT(bond_id), COUNT(atom_id where MAX(COUNT(atom_id)) ))"}
{"sample_id": 9746, "db_id": "toxicology", "final": {"question": "Find the percentage of atoms with single bond.", "sql": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond t", "source_tables": ["bond"]}, "evidence": "single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(bond_type = '-'), COUNT(bond_id)) as percentage"}
{"sample_id": 9722, "db_id": "toxicology", "final": {"question": "What atoms comprise TR186?", "sql": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id = 'TR186'", "source_tables": ["atom"]}, "evidence": "TR186 is a molecule id"}
{"sample_id": 9715, "db_id": "toxicology", "final": {"question": "How many atoms belong to the molecule labeled with carcinogenic compounds?", "sql": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'", "source_tables": ["atom", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic;"}
{"sample_id": 9825, "db_id": "card_games", "final": {"question": "Calculate the percentage of cards in Spanish. List them by name.", "sql": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'", "source_tables": ["foreign_data"]}, "evidence": "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100"}
{"sample_id": 9935, "db_id": "card_games", "final": {"question": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.", "sql": "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1", "source_tables": ["sets"]}, "evidence": "expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize)"}
{"sample_id": 9923, "db_id": "card_games", "final": {"question": "Which card name in the set 'Journey into Nyx Hero's Path' has the highest converted mana cost.", "sql": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Journey into Nyx Hero''s Path' ORDER BY T1.convertedManaCost DESC LIMIT 1", "source_tables": ["sets", "cards"]}, "evidence": "set 'Journey into Nyx Hero's Path' refers to name = 'Journey into Nyx Hero''s Path'"}
{"sample_id": 9830, "db_id": "card_games", "final": {"question": "How many unknown power cards contain info about the triggered ability", "sql": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE (T1.power IS NULL OR T1.power = '*') AND T2.text LIKE '%triggered ability%'", "source_tables": ["rulings", "cards"]}, "evidence": "unknown power cards refers to power is null or power = '*';contain info about the triggered ability refers to text contains 'triggered ability'"}
{"sample_id": 9818, "db_id": "card_games", "final": {"question": "How many cards with a 1993 frame version and available on paper have a sensitive content warning?", "sql": "SELECT COUNT(id) FROM cards WHERE frameVersion = 1993 AND availability = 'paper' AND hasContentWarning = 1", "source_tables": ["cards"]}, "evidence": "sensitive content warning refer to hasContentWarning = 1; available on paper refer to availability = 'paper' 1993 refer to frameVersion"}
{"sample_id": 9860, "db_id": "card_games", "final": {"question": "Point out the language of set id \"174\"?", "sql": "SELECT language FROM set_translations WHERE id = 174", "source_tables": ["set_translations"]}, "evidence": ""}
{"sample_id": 9776, "db_id": "card_games", "final": {"question": "How many types of cards does the artist Aaron Boyd illustrated about card art?", "sql": "SELECT COUNT(type) FROM cards WHERE artist = 'Aaron Boyd'", "source_tables": ["cards"]}, "evidence": "Aaron Boyd' is artist;"}
{"sample_id": 9872, "db_id": "card_games", "final": {"question": "Of all the cards that are designed by Aaron Miller, how many of them are incredibly powerful?", "sql": "SELECT SUM(CASE WHEN artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) FROM cards", "source_tables": ["cards"]}, "evidence": "designed by Aaron Miller refers to artist = 'Aaron Miller'; are icredibily powerful refers to cardKingdomFoilId is not null AND cardKingdomId is not null"}
{"sample_id": 9821, "db_id": "card_games", "final": {"question": "Lists all types of cards available in arena.", "sql": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL", "source_tables": ["cards"]}, "evidence": "all types refer to subtypes and supertypes\n\navailble in arena refers to availability = 'arena'"}
{"sample_id": 9770, "db_id": "card_games", "final": {"question": "Describe the information about rulings for card named 'Sublime Epiphany' with number 74s.", "sql": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'", "source_tables": ["rulings", "cards"]}, "evidence": "Sublime Epiphany' is name of cards; number 74s refers to number = '74s'; information refers to text;"}
{"sample_id": 9846, "db_id": "card_games", "final": {"question": "What proportion of cards do not have a text box with a normal layout?", "sql": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards", "source_tables": ["cards"]}, "evidence": "do not have a text box refers to isTextless = 1; proportion refers to DIVIDE(COUNT(Textless = 1 and layout = 'normal'),COUNT(Textless))*100"}
{"sample_id": 9803, "db_id": "card_games", "final": {"question": "List down the name of artists for cards in Chinese Simplified.", "sql": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'", "source_tables": ["foreign_data", "cards"]}, "evidence": "Chinese Simplified' is the language;"}
{"sample_id": 9826, "db_id": "card_games", "final": {"question": "Indicates the name of all the languages into which the set whose number of cards is 309 is translated.", "sql": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 309", "source_tables": ["set_translations", "sets"]}, "evidence": "set refer to setCode; number of cards refers to baseSetSize; baseSetsize = 309\n\n"}
{"sample_id": 9771, "db_id": "card_games", "final": {"question": "Name the card and artist with the most ruling information. Also state if the card is a promotional printing.", "sql": "SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 AND T1.artist = (SELECT artist FROM cards WHERE isPromo = 1 GROUP BY artist HAVING COUNT(DISTINCT uuid) = (SELECT MAX(count_uuid) FROM ( SELECT COUNT(DISTINCT uuid) AS count_uuid FROM cards WHERE isPromo = 1 GROUP BY artist ))) LIMIT 1", "source_tables": ["rulings", "cards"]}, "evidence": "with the most ruling information refers to Max(count(rulings.uuid)); the card is the promotional printing refers to isPromo = 1;"}
{"sample_id": 9906, "db_id": "card_games", "final": {"question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.", "sql": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC", "source_tables": ["sets", "foreign_data", "cards"]}, "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)"}
{"sample_id": 9796, "db_id": "card_games", "final": {"question": "How many black border cards are only available on mtgo?", "sql": "SELECT COUNT(id) FROM cards WHERE availability = 'mtgo' AND borderColor = 'black'", "source_tables": ["cards"]}, "evidence": "black border card refers to borderColor = black; available on mtgo refers to availability = mtgo;\n\nadd quotes for string = 'black' and = 'mtgo'"}
{"sample_id": 9789, "db_id": "card_games", "final": {"question": "Please provide the names of the artists who illustrated the card art in Phyrexian.", "sql": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'", "source_tables": ["foreign_data", "cards"]}, "evidence": "Phyrexian' is the language; name of artists refers to artist;"}
{"sample_id": 9819, "db_id": "card_games", "final": {"question": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo?", "sql": "SELECT manaCost FROM cards WHERE availability = 'mtgo,paper' AND borderColor = 'black' AND frameVersion = 2003 AND layout = 'normal'", "source_tables": ["cards"]}, "evidence": "available in paper and mtgo refers to availability = 'mtgo,paper'; frameVersion = 2003;borderColor = 'black'"}
{"sample_id": 9794, "db_id": "card_games", "final": {"question": "How many cards are there with toughness of 99?", "sql": "SELECT COUNT(id) FROM cards WHERE toughness = 99", "source_tables": ["cards"]}, "evidence": ""}
{"sample_id": 9849, "db_id": "card_games", "final": {"question": "What languages are available in the set known as Archenemy on the magic card market and having the code ARC?", "sql": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC'", "source_tables": ["set_translations", "sets"]}, "evidence": "known as Archenemy refers to mcmName = 'Archenemy'; having the code ARC refers to setCode = 'ARC'"}
{"sample_id": 9850, "db_id": "card_games", "final": {"question": "What is the name of set number 5 and its translation?", "sql": "SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 5 GROUP BY T1.name, T2.translation", "source_tables": ["set_translations", "sets"]}, "evidence": "set number 5 refers to id = 5"}
{"sample_id": 9838, "db_id": "card_games", "final": {"question": "What percentage of cards without power are in French?", "sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*'", "source_tables": ["foreign_data", "cards"]}, "evidence": "in French refers to language = 'French'; cards without power refers to power IS NULL OR power = '*'; percentage = DIVIDE(COUNT(language = 'French' and power is NULL or power = '*'), COUNT( power is NULL or power = '*'))*100"}
{"sample_id": 9900, "db_id": "card_games", "final": {"question": "What is card number 4 in the set Coldsnap?", "sql": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = 4", "source_tables": ["sets", "cards"]}, "evidence": "card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4"}
{"sample_id": 9922, "db_id": "card_games", "final": {"question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.", "sql": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL", "source_tables": ["set_translations", "cards"]}, "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'"}
{"sample_id": 9893, "db_id": "card_games", "final": {"question": "What is the expansion type of the set \"Hauptset Zehnte Edition\"?", "sql": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'", "source_tables": ["set_translations", "sets"]}, "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = ' Hauptset Zehnte Edition'; expansion type refers to type"}
{"sample_id": 9868, "db_id": "card_games", "final": {"question": "What is percentage of the cards with a converted Mana Cost of 10 in set of Abyssal Horror?", "sql": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id), T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Abyssal Horror'", "source_tables": ["sets", "cards"]}, "evidence": "set of Abyssal Horror refers to name = 'Abyssal Horror'; percentage refers to DIVIDE(COUNT(convertedManaCost = 16),COUNT(convertedManaCost))*100"}
{"sample_id": 9843, "db_id": "card_games", "final": {"question": "Please list top three unknown power cards that have promotional types for arena league in alphabetical order.", "sql": "SELECT name FROM cards WHERE (power IS NULL OR power LIKE '%*%') AND promoTypes = 'arenaleague' ORDER BY name LIMIT 3", "source_tables": ["cards"]}, "evidence": "unknown power cards refers to power is null or power = '*'; promotional types for arena league refers to promoTypes = 'arenaleague'"}
{"sample_id": 9781, "db_id": "card_games", "final": {"question": "What is the type of the card \"Ancestor's Chosen\" as originally printed?", "sql": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND originalType IS NOT NULL", "source_tables": ["cards"]}, "evidence": "Ancestor's Chosen' is the name of card; type of the card as originally printed refers to originaltype;"}
{"sample_id": 9791, "db_id": "card_games", "final": {"question": "How many cards that illusrtated in German have been reprinted?", "sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.isReprint = 1", "source_tables": ["foreign_data", "cards"]}, "evidence": "German' is the language; reprinted refers to isReprint = 1;"}
{"sample_id": 9827, "db_id": "card_games", "final": {"question": "How many Brazilian Portuguese translated sets are inside the Commander block?", "sql": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T1.block = 'Commander'", "source_tables": ["set_translations", "sets"]}, "evidence": "Commander block refer to block = 'Commander'; sets refer to code = setCode; Portuguese refer to language = 'Portuguese (Brasil)'"}
{"sample_id": 9910, "db_id": "card_games", "final": {"question": "What's the code for the set which was released on 2017/7/14?", "sql": "SELECT code FROM sets WHERE releaseDate = '2017-07-14' GROUP BY releaseDate, code", "source_tables": ["sets"]}, "evidence": "released on 2017/7/14 refers to releaseDate = '2017-07-14'"}
{"sample_id": 9833, "db_id": "card_games", "final": {"question": "To which artist does the card with the text \"Das perfekte Gegenmittel zu einer dichten Formation\" belong?", "sql": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.flavorText LIKE '%DAS perfekte Gegenmittel zu einer dichten Formation%'", "source_tables": ["foreign_data", "cards"]}, "evidence": ""}
{"sample_id": 9823, "db_id": "card_games", "final": {"question": "What percentage of legendary frame effect cards that are only available in online game variations?", "sql": "SELECT SUM(CASE WHEN isOnlineOnly = 1 THEN 1.0 ELSE 0 END) / COUNT(id) * 100 FROM cards WHERE frameEffects = 'legendary'", "source_tables": ["cards"]}, "evidence": "only available in online game variationsrefer to isOnlineOnly =1 ; legendary frame effect cards refer to frameEffects = 'legendary'; percentage refer to DIVIDE(COUNT(isOnlineOnly=1), COUNT(id)) from cards where frameEffects = 'legendary'"}
{"sample_id": 9941, "db_id": "card_games", "final": {"question": "What is the language of the \"Battlebond\" set?", "sql": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM sets WHERE name = 'Battlebond' )", "source_tables": ["set_translations", "sets"]}, "evidence": "\"Battlebond\" set refers to name = 'Battlebond'"}
{"sample_id": 9886, "db_id": "card_games", "final": {"question": "Please list the names of the cards in the set \"Hauptset Zehnte Edition\".", "sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'", "source_tables": ["set_translations", "cards"]}, "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'"}
{"sample_id": 9798, "db_id": "card_games", "final": {"question": "What are the card layout of cards with keyword of flying?", "sql": "SELECT layout FROM cards WHERE keywords = 'Flying'", "source_tables": ["cards"]}, "evidence": ""}
{"sample_id": 9947, "db_id": "card_games", "final": {"question": "Find the uuid of cards in which the old school format is restricted or banned.", "sql": "SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Banned' OR status = 'Restricted')", "source_tables": ["legalities"]}, "evidence": "old school format refers to format = 'oldschool'; restricted or banned refers to status = 'banned' or 'restricted'"}
{"sample_id": 9950, "db_id": "card_games", "final": {"question": "List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal.", "sql": "SELECT DISTINCT T2.name , CASE WHEN T1.status = 'Legal' THEN T1.format ELSE NULL END FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.setCode IN ( SELECT code FROM sets WHERE name = 'Hour of Devastation' )", "source_tables": ["sets", "legalities", "cards"]}, "evidence": "the set Hour of Devastation refers to set.name = 'Hour of Devastation'; names of all the cards in the set refers to cards.name; legal cards refers to status = 'Legal'; the formats refers to format"}
{"sample_id": 10011, "db_id": "codebase_community", "final": {"question": "Which user ID has the highest reputation?", "sql": "SELECT Id FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )", "source_tables": ["users"]}, "evidence": "highest reputation refers to Max(Reputation)"}
{"sample_id": 10129, "db_id": "codebase_community", "final": {"question": "Among the posts with views ranging from 100 to 150, what is the comment with the highest score?", "sql": "SELECT Text FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) ORDER BY Score DESC LIMIT 1", "source_tables": ["comments", "posts"]}, "evidence": "views ranging from 100 to 150 refers to ViewCount BETWEEN 100 and 150; comment with the highest score refers to Text where MAX(Score);"}
{"sample_id": 10107, "db_id": "codebase_community", "final": {"question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.", "sql": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'", "source_tables": ["users", "posts", "posthistory"]}, "evidence": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';"}
{"sample_id": 10006, "db_id": "codebase_community", "final": {"question": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'", "sql": "SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'", "source_tables": ["posthistory", "posts"]}, "evidence": "\"Why square the difference instead of taking the absolute value in standard deviation?\" is the Title of post;"}
{"sample_id": 10133, "db_id": "codebase_community", "final": {"question": "Among products comments with 0 score, what is the total number of users ages 40 years old?", "sql": "SELECT COUNT(DISTINCT T1.id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40", "source_tables": ["users", "comments"]}, "evidence": ""}
{"sample_id": 10037, "db_id": "codebase_community", "final": {"question": "Among the users who obtained the \"Organizer\" badges, calculate the percentage of users who are teenagers.", "sql": "SELECT CAST(SUM(IIF(T2.Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.\"Name\" = 'Organizer'", "source_tables": ["users", "badges"]}, "evidence": "\"Organizer\" is the Name of badge; teenager refers to Age BETWEEN 13 AND 18; percentage = Divide (Count(UserId where Age BETWEEN 13 AND 18), Count(UserId)) *100"}
{"sample_id": 9983, "db_id": "codebase_community", "final": {"question": "What is the title for the post which got the highest score comment?", "sql": "SELECT Title FROM posts WHERE Id = ( SELECT PostId FROM comments ORDER BY Score DESC LIMIT 1 )", "source_tables": ["comments", "posts"]}, "evidence": "highest score comment refers to Max(comments.Score)"}
{"sample_id": 10074, "db_id": "codebase_community", "final": {"question": "List the post IDs and badge names of the user Samuel in 2013.", "sql": "SELECT T1.PostId, T2.Name FROM postHistory AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId WHERE T1.UserDisplayName = 'Samuel' AND STRFTIME('%Y', T1.CreationDate) = '2013' AND STRFTIME('%Y', T2.Date) = '2013'", "source_tables": ["badges", "posthistory"]}, "evidence": "Samuel refers to UserDisplayName; YEAR(CreationDate) = 2013 relates to PostId; YEAR(Date) = 2013 relates to the badge;"}
{"sample_id": 9993, "db_id": "codebase_community", "final": {"question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?", "sql": "SELECT CAST(COUNT(T2.Id) AS REAL) / COUNT(DISTINCT T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24", "source_tables": ["votes", "posts"]}, "evidence": "user no. 24 refers to UserId = OwnerUserId = '24'; times of his/her post than votes = Divide (Count(post.Id), Count(votes.Id))"}
{"sample_id": 9987, "db_id": "codebase_community", "final": {"question": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?", "sql": "SELECT IIF(T2.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'", "source_tables": ["comments", "posts"]}, "evidence": "user no. 23853 refers to UserId = '23853'; at 9:08:18 on 2013/7/12 refers to CreationDate = '2013-07-12 09:08:18.0'; not well-finished refers to ClosedDate IS NULL and vice versa"}
{"sample_id": 10029, "db_id": "codebase_community", "final": {"question": "How many positive comments are there on the list?", "sql": "SELECT COUNT(id) FROM comments WHERE score > 60", "source_tables": ["comments"]}, "evidence": "Positive comment refers to score > 60"}
{"sample_id": 9980, "db_id": "codebase_community", "final": {"question": "How many votes did the user No.58 take on 2010/7/19?", "sql": "SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'", "source_tables": ["votes"]}, "evidence": "user no. 58 refers to UserId = 58; on 2010/7/19 refers to CreationDate = '2010-07-19'"}
{"sample_id": 10025, "db_id": "codebase_community", "final": {"question": "What is the sum of favourite count gained by user ID 686 in 2011?", "sql": "SELECT SUM(DISTINCT FavoriteCount) FROM posts WHERE Id IN ( SELECT PostId FROM postHistory WHERE UserId = 686 AND STRFTIME('%Y', CreationDate) = '2011' )", "source_tables": ["posthistory", "posts"]}, "evidence": "in 2011 refers to year (CreatinDate) = 2011"}
{"sample_id": 9968, "db_id": "codebase_community", "final": {"question": "Please list the display names of all the users who owns a post that is well-finished.", "sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ClosedDate IS NOT NULL", "source_tables": ["users", "posts"]}, "evidence": "the post that is well-finished refers to ClosedDate IS NOT Null"}
{"sample_id": 10079, "db_id": "codebase_community", "final": {"question": "Under the vote type of 8, provide the display names and websites URLs of the user who got the highest bounty amount.", "sql": "SELECT DisplayName, WebsiteUrl FROM users WHERE Id = ( SELECT UserId FROM votes WHERE VoteTypeId = 8 ORDER BY BountyAmount DESC LIMIT 1 )", "source_tables": ["votes", "users"]}, "evidence": "vote type of 8 refers to VoteTypeId = 8; the highest bounty amount refers to MAX(BountyAmount);"}
{"sample_id": 10018, "db_id": "codebase_community", "final": {"question": "Which users have posted the most comments. List out the user's badge?", "sql": "SELECT Name FROM badges AS T1 INNER JOIN comments AS T2 ON T1.UserId = t2.UserId GROUP BY T2.UserId ORDER BY COUNT(T2.UserId) DESC LIMIT 1", "source_tables": ["comments", "badges"]}, "evidence": "user with the most comments refers to UserId where Max(Count(Id)"}
{"sample_id": 10086, "db_id": "codebase_community", "final": {"question": "What is the sum of score of the post on 2010-07-19?", "sql": "SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%'", "source_tables": ["posts"]}, "evidence": "on 2010-07-19 refers to LasActivityDate LIKE '2010-07-19%';"}
{"sample_id": 9965, "db_id": "codebase_community", "final": {"question": "For the post that got the most number of answers owned by csgillespie, how many answers did it get?", "sql": "SELECT MAX(T1.AnswerCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "source_tables": ["users", "posts"]}, "evidence": "\"csgillespie\" is the DisplayName of user; the most number of answer refers to Max(AnswerCount)"}
{"sample_id": 9999, "db_id": "codebase_community", "final": {"question": "Write all comments made by user 'A Lion.'", "sql": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'", "source_tables": ["users", "comments"]}, "evidence": "\"A Lion\" is the DisplayName of user; comment refers to Text"}
{"sample_id": 9975, "db_id": "codebase_community", "final": {"question": "Among the badges obtained by csgillespie, how many of them were obtained in the year 2011?", "sql": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE STRFTIME('%Y', T1.Date) = '2011' AND T2.DisplayName = 'csgillespie'", "source_tables": ["users", "badges"]}, "evidence": "\"csgillespie\" is the DisplayName of user; obtained in 2011 refers to YEAR (Date) = 2011"}
{"sample_id": 9978, "db_id": "codebase_community", "final": {"question": "What is the average number of badges obtained by a user with over 200 views?", "sql": "SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T2.DisplayName) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Views > 200", "source_tables": ["users", "badges"]}, "evidence": "user with over 200 views refers to Views > 200; average number of badges = Divide (Count(Id), Count(DisplayName))"}
{"sample_id": 10095, "db_id": "codebase_community", "final": {"question": "What is the average number of posts voted by the oldest users?", "sql": "SELECT AVG(PostId) FROM votes WHERE UserId IN ( SELECT Id FROM users WHERE Age = ( SELECT MAX(Age) FROM users ) )", "source_tables": ["votes", "users"]}, "evidence": "average number of posts voted refers to AVG(PostId) FROM votes; the oldest users refer to MAX(Age);"}
{"sample_id": 10041, "db_id": "codebase_community", "final": {"question": "How many adults who obtained the badge Supporter?", "sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Supporter' AND T1.Age BETWEEN 19 AND 65", "source_tables": ["users", "badges"]}, "evidence": "Supporter is the Name of badge; adult refers to Age BETWEEN 19 AND 65"}
{"sample_id": 10137, "db_id": "codebase_community", "final": {"question": "In comments with score between 1 to 5, list down the display names of the users with 0 down votes.", "sql": "SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0", "source_tables": ["users", "comments"]}, "evidence": "DownVotes = 0; Score BETWEEN 1 and 5"}
{"sample_id": 10008, "db_id": "codebase_community", "final": {"question": "Which user added a bounty amount of 50 to the post title mentioning variance?", "sql": "SELECT T3.DisplayName, T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title LIKE '%variance%'", "source_tables": ["votes", "users", "posts"]}, "evidence": "bounty amount of 50 refers to BountyAmount = 50; user refers to DisplayName; title mentioning variance refers to Title include 'variance'"}
{"sample_id": 10080, "db_id": "codebase_community", "final": {"question": "What are the titles of the top 5 posts with the highest popularity?", "sql": "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5", "source_tables": ["posts"]}, "evidence": "Higher view count means the post has higher popularity; the highest popularity refers to MAX(ViewCount);"}
{"sample_id": 10092, "db_id": "codebase_community", "final": {"question": "What is the date when the youngest user made his or her first post?", "sql": "SELECT T2.CreaionDate FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Age IS NOT NULL ORDER BY T1.Age, T2.CreaionDate LIMIT 1", "source_tables": ["users", "posts"]}, "evidence": "the youngest user refers to MIN(Age); first post refers to MIN(CreaionDate);"}
{"sample_id": 10056, "db_id": "codebase_community", "final": {"question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?", "sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1", "source_tables": ["users", "posts", "posthistory"]}, "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';"}
{"sample_id": 10027, "db_id": "codebase_community", "final": {"question": "How many users obtained the \"Announcer\" badge?", "sql": "SELECT COUNT(id) FROM badges WHERE Name = 'Announcer'", "source_tables": ["badges"]}, "evidence": "\"Announcer\" is the Name of badge; user refers to UserId"}
{"sample_id": 10015, "db_id": "codebase_community", "final": {"question": "How many users from New York have a teacher and supporter badge?", "sql": "SELECT COUNT(DISTINCT T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teacher') AND T2.Location = 'New York'", "source_tables": ["users", "badges"]}, "evidence": "\"Supporter\" and \"Teachers\" are both Name of badge; 'New York' is the Location; user refers to UserId"}
{"sample_id": 10101, "db_id": "codebase_community", "final": {"question": "Which post has the highest score? Please give its id and title's name.", "sql": "SELECT T1.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T2.Score DESC LIMIT 1", "source_tables": ["users", "posts"]}, "evidence": "the highest score refers to MAX(Score); owner's name refers to DisplayName;"}
{"sample_id": 9971, "db_id": "codebase_community", "final": {"question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.", "sql": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'", "source_tables": ["tags", "posts"]}, "evidence": "\"bayesian\" is the TagName; excerpt from refers to ExcerptPostId"}
{"sample_id": 10055, "db_id": "codebase_community", "final": {"question": "Which post by slashnick has the most answers count? State the post ID.", "sql": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1", "source_tables": ["users", "posts", "posthistory"]}, "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';"}
{"sample_id": 10064, "db_id": "codebase_community", "final": {"question": "How many posts were created on 21st July, 2010?", "sql": "SELECT COUNT(id) FROM postHistory WHERE date(CreationDate) = '2010-07-21'", "source_tables": ["posthistory"]}, "evidence": "created on 21st July, 2010 refers to CreationDate BETWEEN '2010-07-21 00:00:00' and '2012-07-21 23:59:59';"}
{"sample_id": 10063, "db_id": "codebase_community", "final": {"question": "How many users received commentator badges in 2014?", "sql": "SELECT COUNT(Id) FROM badges WHERE Name = 'Commentator' AND STRFTIME('%Y', Date) = '2014'", "source_tables": ["badges"]}, "evidence": "Commentator is the name of the badge; year(Date) = 2014;"}
{"sample_id": 10042, "db_id": "codebase_community", "final": {"question": "State the number of views of users who obtained the badge on 7/19/2010 7:39:08 PM.", "sql": "SELECT T1.Views FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0'", "source_tables": ["users", "badges"]}, "evidence": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'"}
{"sample_id": 10030, "db_id": "codebase_community", "final": {"question": "State the detailed content of the comment which was created on 7/19/2010 7:25:47 PM.", "sql": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'", "source_tables": ["comments"]}, "evidence": "detailed content of the comment refers to Text; created on 7/19/2010 7:16:14 PM refers to CreationDate = '2010-07-19 19:16:14.0'"}
{"sample_id": 10163, "db_id": "superhero", "final": {"question": "What is the name of the superhero that has the most powers?", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.hero_id) DESC LIMIT 1", "source_tables": ["hero_power", "superhero"]}, "evidence": "name of the superhero refers to superhero_name; superhero that has the most powers refers to MAX(COUNT(superhero_name))"}
{"sample_id": 10210, "db_id": "superhero", "final": {"question": "How many percent of female heroes were published by Marvel Comics?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female'", "source_tables": ["publisher", "gender", "superhero"]}, "evidence": "percent = MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100); female heroes refers to gender = 'Female'; Marvel Comics refers to publisher_name = 'Marvel Comics';"}
{"sample_id": 10249, "db_id": "superhero", "final": {"question": "What is the average height of a non-human superhero in Dark Horse Comics?", "sql": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.race != 'Human'", "source_tables": ["publisher", "superhero", "race"]}, "evidence": "average = AVG(height_cm); non-human superhero refers to race <> 'Human'; Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';"}
{"sample_id": 10158, "db_id": "superhero", "final": {"question": "Who is the dumbest superhero?", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1", "source_tables": ["hero_attribute", "attribute", "superhero"]}, "evidence": "the dumbest superhero refers to MIN(attribute_value) where attribute_name = 'Intelligence'"}
{"sample_id": 10160, "db_id": "superhero", "final": {"question": "Which superheroes have a durability attribute value of less than 50?", "sql": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)", "source_tables": ["hero_attribute", "attribute", "superhero"]}, "evidence": "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50"}
{"sample_id": 10204, "db_id": "superhero", "final": {"question": "List the heroes' names whose eyes and hair colours are both black.", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'", "source_tables": ["colour", "superhero"]}, "evidence": "heroes' names refers to superhero_name; eyes and hair colours are both black refers to eye_colour_id AND hair_colour_id WHERE colour.colour = 'Black';"}
{"sample_id": 10221, "db_id": "superhero", "final": {"question": "How many superheroes didn't have any publisher?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.id = 1", "source_tables": ["publisher", "superhero"]}, "evidence": "didn't have any publisher refers to publisher.id = 1;"}
{"sample_id": 10195, "db_id": "superhero", "final": {"question": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero.", "sql": "SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.eye_colour_id = T1.hair_colour_id AND T1.eye_colour_id = T1.skin_colour_id", "source_tables": ["publisher", "superhero"]}, "evidence": "which superhero refers to superhero_name; the same eyes, hair and skin colour refers to hair_colour_id = skin_colour_id AND hair_colour_id = eye_colour_id; publisher refers to publisher_name;"}
{"sample_id": 10192, "db_id": "superhero", "final": {"question": "What is the eyes colour of Abraham Sapien?", "sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'", "source_tables": ["colour", "superhero"]}, "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;"}
{"sample_id": 10190, "db_id": "superhero", "final": {"question": "How many superheroes were published by Dark Horse Comics?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'", "source_tables": ["publisher", "superhero"]}, "evidence": "published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';"}
{"sample_id": 10237, "db_id": "superhero", "final": {"question": "Count the good female superheroes.", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Good' AND T3.gender = 'Female'", "source_tables": ["alignment", "gender", "superhero"]}, "evidence": "good refers to alignment.id = 1; female refers to gender.id = 2;"}
{"sample_id": 10167, "db_id": "superhero", "final": {"question": "Give the publisher ID of Star Trek.", "sql": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'", "source_tables": ["publisher"]}, "evidence": "Star Trek is the publisher_name;"}
{"sample_id": 10213, "db_id": "superhero", "final": {"question": "Calculate the average height for each superhero.", "sql": "SELECT CAST(SUM(height_cm) AS REAL) / COUNT(id) FROM superhero", "source_tables": ["superhero"]}, "evidence": "average = DIVIDE(SUM(height_cm), COUNT(all heros));"}
{"sample_id": 10182, "db_id": "superhero", "final": {"question": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180", "source_tables": ["publisher", "superhero"]}, "evidence": "height between 150 to 180 refers to height_cm BETWEEN 150 AND 180; heroes published by Marvel Comics refers to publisher_name = 'Marvel Comics'; calculation = MULTIPLY(DIVIDE(SUM(publisher.id = 13)), COUNT(publisher.id), 100)"}
{"sample_id": 10194, "db_id": "superhero", "final": {"question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.", "sql": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'", "source_tables": ["publisher", "gender", "superhero"]}, "evidence": "eyes refers to eye_colour_id; hair refers to hair_colour_id; skin colour refers to skin_colour_id; female superheroes refers to gender = 'Female'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';"}
{"sample_id": 10233, "db_id": "superhero", "final": {"question": "Give the alignment and superpowers of the superhero named Atom IV.", "sql": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Atom IV'", "source_tables": ["superpower", "alignment", "hero_power", "superhero"]}, "evidence": "superpowers refers to power_name;"}
{"sample_id": 10202, "db_id": "superhero", "final": {"question": "List the powers of Hunter Zolomon.", "sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'", "source_tables": ["superpower", "hero_power", "superhero"]}, "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;"}
{"sample_id": 10184, "db_id": "superhero", "final": {"question": "Which power do superheroes have the most of?", "sql": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T2.power_name ORDER BY COUNT(T1.hero_id) DESC LIMIT 1", "source_tables": ["superpower", "hero_power"]}, "evidence": "power that superheroes have the most refers to MAX(COUNT(power_name))"}
{"sample_id": 10252, "db_id": "superhero", "final": {"question": "Identify the weakest attribute of the Black Panther.", "sql": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1", "source_tables": ["hero_attribute", "attribute", "superhero"]}, "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';"}
{"sample_id": 10209, "db_id": "superhero", "final": {"question": "What are the race and alignment of Cameron Hicks?", "sql": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'", "source_tables": ["alignment", "race", "superhero"]}, "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';"}
{"sample_id": 10217, "db_id": "superhero", "final": {"question": "How many superheroes have a neutral alignment?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'", "source_tables": ["alignment", "superhero"]}, "evidence": "neutral alignment refers to alignment_id = 3;"}
{"sample_id": 10253, "db_id": "superhero", "final": {"question": "What is Abomination's eye colour?", "sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'", "source_tables": ["colour", "superhero"]}, "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;"}
{"sample_id": 10183, "db_id": "superhero", "final": {"question": "Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79", "source_tables": ["gender", "superhero"]}, "evidence": "super hero names refers to superhero_name;male superheros refers to gender = 'Male';Calculation = weight_kg > MULTIPLY(AVG(weight_kg), 0.79)"}
{"sample_id": 10235, "db_id": "superhero", "final": {"question": "Calculate the average attribute value of all neutral superheroes.", "sql": "SELECT AVG(T1.attribute_value) FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN alignment AS T3 ON T2.alignment_id = T3.id WHERE T3.alignment = 'Neutral'", "source_tables": ["hero_attribute", "alignment", "superhero"]}, "evidence": "average = AVG(attribute_value); neutral superheroes refers to alignment_id = 3;"}
{"sample_id": 10232, "db_id": "superhero", "final": {"question": "What is the race of the superhero with maximum attribute value?", "sql": "SELECT T3.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN race AS T3 ON T1.race_id = T3.id ORDER BY T2.attribute_value DESC LIMIT 1", "source_tables": ["hero_attribute", "race", "superhero"]}, "evidence": "maximum attribute value refers to MAX(attribute_value);"}
{"sample_id": 10280, "db_id": "formula_1", "final": {"question": "Which country is the constructor which got 1 point in the race No. 24 from?", "sql": "SELECT T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 24 AND T1.points = 1", "source_tables": ["constructors", "constructorresults"]}, "evidence": "race number refers to raceId;"}
{"sample_id": 10346, "db_id": "formula_1", "final": {"question": "Please list the exact dates on which a Formula_1 race took place on the Barcelona-Catalunya circuit.", "sql": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'", "source_tables": ["circuits", "races"]}, "evidence": ""}
{"sample_id": 10299, "db_id": "formula_1", "final": {"question": "For all the drivers who finished the game in race No. 872, who is the youngest?", "sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1", "source_tables": ["results", "drivers"]}, "evidence": "race number refers to raceId; drivers who finished the race refers to time has value; the youngest is a driver where MAX(dob);"}
{"sample_id": 10429, "db_id": "formula_1", "final": {"question": "What was the longest time that Lewis Hamilton had spent at a pit stop?", "sql": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.duration DESC LIMIT 1", "source_tables": ["pitstops", "drivers"]}, "evidence": "longest time refes to MAX(duration);"}
{"sample_id": 10395, "db_id": "formula_1", "final": {"question": "List out top 10 Spanish drivers who were born before 1982 and have the latest lap time.", "sql": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Spanish' AND STRFTIME('%Y', T2.dob) < '1982' ORDER BY T1.time DESC LIMIT 10", "source_tables": ["pitstops", "drivers"]}, "evidence": "born before 1982 refers to year(dob) < 1982; latest lap time refers to Max(time);"}
{"sample_id": 10370, "db_id": "formula_1", "final": {"question": "What are the maximum points of British constructors?", "sql": "SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'", "source_tables": ["constructors", "constructorstandings"]}, "evidence": "maximum points = MAX(points); British is a nationality"}
{"sample_id": 10348, "db_id": "formula_1", "final": {"question": "What's the fastest lap time ever in a race for Lewis Hamilton?", "sql": "SELECT T2.fastestLapTime FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1", "source_tables": ["results", "drivers"]}, "evidence": "fastest lap time ever refers to min(fastestLapTime)"}
{"sample_id": 10404, "db_id": "formula_1", "final": {"question": "How many American drivers have puncture status.", "sql": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 on T1.driverId = T2.driverId INNER JOIN status AS T3 on T2.statusId = T3.statusId WHERE T3.status = 'Puncture' AND T1.nationality = 'American'", "source_tables": ["results", "drivers", "status"]}, "evidence": "puncture status refers to status = Puncture;"}
{"sample_id": 10364, "db_id": "formula_1", "final": {"question": "What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races?", "sql": "SELECT AVG(CAST(SUBSTR(T2.fastestLapTime, 1, INSTR(T2.fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, ':') + 1) AS REAL)) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.surname = 'Hamilton' AND T1.forename = 'Lewis'", "source_tables": ["results", "drivers"]}, "evidence": "average fastest lap time = avg(fastestLapTime); The time is recorded on 'MM:SS.mmm'"}
{"sample_id": 10423, "db_id": "formula_1", "final": {"question": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?", "sql": "SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1", "source_tables": ["drivers", "qualifying", "circuits", "races"]}, "evidence": "Ranked 1st in the 3rd qualifying race refer to MIN(q3); 2008 is the year of race; full name of racer = forename, surname"}
{"sample_id": 10388, "db_id": "formula_1", "final": {"question": "How many driver participated in race ID number 18?", "sql": "SELECT COUNT(driverId) FROM driverStandings WHERE raceId = 18", "source_tables": ["driverstandings"]}, "evidence": ""}
{"sample_id": 10390, "db_id": "formula_1", "final": {"question": "What is reference name of Robert Kubica?", "sql": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'", "source_tables": ["drivers"]}, "evidence": "reference name refers to driverRef;"}
{"sample_id": 10332, "db_id": "formula_1", "final": {"question": "What's the location coordinates of Silverstone Circuit?", "sql": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'", "source_tables": ["circuits"]}, "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'"}
{"sample_id": 10360, "db_id": "formula_1", "final": {"question": "Who was the champion of 2008's Australian Grand Prix and where can I know more about him?", "sql": "SELECT T1.forename, T1.surname, T1.url FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T2.time LIKE '_:%:__.___' AND T3.year = 2008", "source_tables": ["results", "drivers", "races"]}, "evidence": "only champion's finished time is represented by 'HH:MM:SS.mmm'; where can I know more refers to url"}
{"sample_id": 10373, "db_id": "formula_1", "final": {"question": "How many Japanese constructors have 0 points in 2 races?", "sql": "SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2", "source_tables": ["constructors", "constructorstandings"]}, "evidence": "2 races refers to COUNT(raceID) = 2; Japanese refers to constructors.nationality = 'Japanese';"}
{"sample_id": 10384, "db_id": "formula_1", "final": {"question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?", "sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005", "source_tables": ["results", "drivers", "races"]}, "evidence": "born before 1985 refers to year(dob)<1985; in 2000 to 2005 refers to year between 2000 and 2005; percentage = Divide(COUNT(driverId where year (dob) <1985 and laps >50),COUNT(DriverID where year between 2000 and 2005) *100;"}
{"sample_id": 10436, "db_id": "formula_1", "final": {"question": "Please list the lap records for the circuits in Italy.", "sql": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1", "source_tables": ["results", "circuits", "races", "fastest_lap_times"]}, "evidence": "lap record means the fastest time recorded which refers to time"}
{"sample_id": 10403, "db_id": "formula_1", "final": {"question": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race.", "sql": "SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1", "source_tables": ["drivers", "qualifying", "races"]}, "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; first qualifying race refers to MIN(races.date);"}
{"sample_id": 10335, "db_id": "formula_1", "final": {"question": "In which country can I find the circuit with the highest altitude?", "sql": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1", "source_tables": ["circuits"]}, "evidence": "highest altitude refers to max(alt)"}
{"sample_id": 10415, "db_id": "formula_1", "final": {"question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?", "sql": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'", "source_tables": ["circuits"]}, "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)"}
{"sample_id": 10359, "db_id": "formula_1", "final": {"question": "What's the finish time for the driver who ranked second in 2008's AustChineseralian Grand Prix?", "sql": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank = 2 AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008", "source_tables": ["results", "races"]}, "evidence": "finish time refers to time; Chinese Grand Prix refers to races.name = 'Chinese Grand Prix';"}
{"sample_id": 10417, "db_id": "formula_1", "final": {"question": "What is the average score of Lewis Hamilton among all the Turkish Grand Prix?", "sql": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'", "source_tables": ["drivers", "driverstandings", "races"]}, "evidence": "Average score = AVG(points)"}
{"sample_id": 10380, "db_id": "formula_1", "final": {"question": "Which driver has the fastest lap time? Please give their forenames and surnames.", "sql": "SELECT T2.forename, T2.surname, T1.fastestLapTime FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1", "source_tables": ["results", "drivers"]}, "evidence": ""}
{"sample_id": 10354, "db_id": "formula_1", "final": {"question": "In which years did Lewis Hamilton participate in a Formula_1 race?", "sql": "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'", "source_tables": ["results", "drivers", "races"]}, "evidence": ""}
{"sample_id": 10425, "db_id": "formula_1", "final": {"question": "How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?", "sql": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId WHERE T3.statusId = 3 AND T2.name = 'Canadian Grand Prix' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1", "source_tables": ["results", "status", "races"]}, "evidence": "number of accidents refers to the number where statusid = 3; Canadian Grand Prix refers to the race of name\n"}
{"sample_id": 10341, "db_id": "formula_1", "final": {"question": "Which circuit did the 2009 Spanish Grand Prix use?", "sql": "SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'", "source_tables": ["circuits", "races"]}, "evidence": ""}
{"sample_id": 10294, "db_id": "formula_1", "final": {"question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?", "sql": "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'", "source_tables": ["drivers", "qualifying"]}, "evidence": "race number refers to raceId; had the Q3 time as 0:0M:SS refers to q3 LIKE 'M:SS%'"}
{"sample_id": 10409, "db_id": "formula_1", "final": {"question": "What is the average fastest lap time of the top 10 drivers in the 2006 United States Grand Prix?", "sql": "SELECT AVG(T1.fastestLapTime) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank < 11 AND T2.year = 2006 AND T2.name = 'United States Grand Prix'", "source_tables": ["results", "races"]}, "evidence": "top 10 refers to rank <11; AVG(fastestLapTime);"}
{"sample_id": 10419, "db_id": "formula_1", "final": {"question": "Which citizenship do the vast majority of the drivers hold?", "sql": "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(driverId) DESC LIMIT 1", "source_tables": ["drivers"]}, "evidence": "Citizenship of majority of drivers = MAX(nationality); citizenship and nationality are synonyms\n\n"}
{"sample_id": 10350, "db_id": "formula_1", "final": {"question": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name.", "sql": "SELECT T3.forename, T3.surname, T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Canadian Grand Prix' AND T2.rank = 1 AND T1.year = 2007", "source_tables": ["results", "drivers", "races"]}, "evidence": "reference name refers to driverRef; Canadian Grand Prix refers to races.name = 'Canadian Grand Prix';"}
{"sample_id": 10378, "db_id": "formula_1", "final": {"question": "Which drivers born after 1975 have been ranked 2? Please give their forenames and surnames.", "sql": "SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) > '1975' AND T1.rank = 2", "source_tables": ["results", "drivers"]}, "evidence": "born after 1975 refers to year(dob) >1975;"}
{"sample_id": 10408, "db_id": "formula_1", "final": {"question": "In which race did the fastest 1st lap time was recorded? Please indicate the time in milliseconds.", "sql": "SELECT T1.milliseconds FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.lap = 1 ORDER BY T1.time LIMIT 1", "source_tables": ["laptimes", "races"]}, "evidence": "fastest refers to Min(time);"}
{"sample_id": 10406, "db_id": "formula_1", "final": {"question": "What is the website of the constructor who tallied the most total wins.", "sql": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId ORDER BY T2.wins DESC LIMIT 1", "source_tables": ["constructors", "constructorstandings"]}, "evidence": "introduction website refers to url;"}
{"sample_id": 10426, "db_id": "formula_1", "final": {"question": "How many wins was achieved by the oldest racer? Indicate his/her full name.", "sql": "SELECT SUM(T1.wins),T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId ORDER BY T2.dob ASC LIMIT 1", "source_tables": ["drivers", "driverstandings"]}, "evidence": "oldest racer refers to MIN(dob); full name refers to forename, surname."}
{"sample_id": 10535, "db_id": "european_football_2", "final": {"question": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10?", "sql": "SELECT t2.chanceCreationShootingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hannover 96' AND t2.\"date\" LIKE '2015-09-10%'", "source_tables": ["team_attributes", "team"]}, "evidence": "\"Hannover 96\" refers to team_long_name = 'Hannover 96'; on 2015/9/10 refers to date LIKE '2015-09-10%';"}
{"sample_id": 10567, "db_id": "european_football_2", "final": {"question": "Which top 4 leagues had the most games in the 2015-2016 season?", "sql": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC LIMIT 4", "source_tables": ["match", "league"]}, "evidence": "in the 2015-2016 season refers to season = '2015/2016'; league with most games refers to League.name where MAX(COUNT(id))"}
{"sample_id": 10491, "db_id": "european_football_2", "final": {"question": "Which football player has the shortest height?", "sql": "SELECT player_name FROM player ORDER BY height ASC LIMIT 1", "source_tables": ["player"]}, "evidence": "shortest height refers to MIN(height);"}
{"sample_id": 10443, "db_id": "european_football_2", "final": {"question": "What is the height of the tallest player? Indicate his name.", "sql": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1", "source_tables": ["player"]}, "evidence": "tallest player refers to MAX(height);"}
{"sample_id": 10509, "db_id": "european_football_2", "final": {"question": "Among the players whose height is over 180, how many of them have a volley score of over 70?", "sql": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 AND t2.volleys > 70", "source_tables": ["player_attributes", "player"]}, "evidence": "height > 180; volley score refers to volleys; volleys > 70;"}
{"sample_id": 10467, "db_id": "european_football_2", "final": {"question": "What is the attacking work rate of the football playerr Franco Zennaro?", "sql": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'", "source_tables": ["player_attributes", "player"]}, "evidence": ""}
{"sample_id": 10516, "db_id": "european_football_2", "final": {"question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?", "sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id", "source_tables": ["player_attributes", "player"]}, "evidence": "how much higher in percentage = MULTIPLY(DIVIDE(SUBTRACT(overall_rating WHERE player_name = 'Ariel Borysiuk', overall_rating WHERE player_name = 'Paulin Puel'), overall_rating WHERE player_name = 'Paulin Puel'), 100);"}
{"sample_id": 10529, "db_id": "european_football_2", "final": {"question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.", "sql": "SELECT \"date\" FROM ( SELECT t2.crossing, t2.\"date\" FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)"}
{"sample_id": 10503, "db_id": "european_football_2", "final": {"question": "Which country is the Belgium Jupiler League from?", "sql": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Belgium Jupiler League'", "source_tables": ["league", "country"]}, "evidence": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League';"}
{"sample_id": 10486, "db_id": "european_football_2", "final": {"question": "List out of players whose preferred foot is left.", "sql": "SELECT DISTINCT t1.id, t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = 'left'", "source_tables": ["player_attributes", "player"]}, "evidence": "preferred_foot = 'left';"}
{"sample_id": 10510, "db_id": "european_football_2", "final": {"question": "Please list the names of the players whose volley score and dribbling score are over 70.", "sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.volleys > 70 AND t2.dribbling > 70", "source_tables": ["player_attributes", "player"]}, "evidence": "volley score are over 70 refers to volleys > 70; dribbling score refers to dribbling are over 70 refers to dribbling > 70;"}
{"sample_id": 10459, "db_id": "european_football_2", "final": {"question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.", "sql": "SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'", "source_tables": ["player_attributes", "player"]}, "evidence": "players who prefer left foot refers to preferred_foot = 'left'; percentage of players who prefer left foot = DIVIDE(MULTIPLY((SUM(preferred_foot = 'left'), 100)), COUNT(player_fifa_api_id)); born between 1987 and 1992 refers to YEAR(birthday) BETWEEN '1987' AND '1992';"}
{"sample_id": 10471, "db_id": "european_football_2", "final": {"question": "How many matches in the 2015/2016 season were held in Scotland Premier League\n?", "sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' AND t1.name = 'Scotland Premier League'", "source_tables": ["match", "league"]}, "evidence": "Scotland Premier League refers to League.name = 'Scotland Premier League';"}
{"sample_id": 10557, "db_id": "european_football_2", "final": {"question": "Please provide top five football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.", "sql": "SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential DESC LIMIT 5", "source_tables": ["player_attributes"]}, "evidence": "lowest potential players refers to MIN(potential); prefer to use the right foot when attacking refers to preferred_foot = 'right'"}
{"sample_id": 10470, "db_id": "european_football_2", "final": {"question": "What is the overall rating of the football player Gabriel Tamas in year 2011?", "sql": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND strftime('%Y', t2.date) = '2011'", "source_tables": ["player_attributes", "player"]}, "evidence": "in year 2011 refers to strftime('%Y', date) = '2011';"}
{"sample_id": 10487, "db_id": "european_football_2", "final": {"question": "Please list all team names which the speed class is fast.", "sql": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Fast'", "source_tables": ["team_attributes", "team"]}, "evidence": "team names refers to team_long_name; speed class refers to buildUpPlaySpeedClass; buildUpPlaySpeedClass = 'Fast';"}
{"sample_id": 10564, "db_id": "european_football_2", "final": {"question": "In the 2015\u20132016 season, how many games were played in the Italian Serie A league?", "sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Italy Serie A' AND t2.season = '2015/2016'", "source_tables": ["match", "league"]}, "evidence": "In the 2015\u20132016 season refers to season = '2015/2016'"}
{"sample_id": 10466, "db_id": "european_football_2", "final": {"question": "List the football players with a birthyear of 1970 and a birthmonth of October.", "sql": "SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 7) = '1970-10'", "source_tables": ["player"]}, "evidence": "players with a birthyear of 1970 and a birthmonth of October refers to substr(birthday,1,7) AS 'year-month',WHERE year = '1970' AND month = '10';"}
{"sample_id": 10525, "db_id": "european_football_2", "final": {"question": "What was the overall rating for Aaron Mooy on 2016/2/4?", "sql": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.\"date\", 1, 10) = '2016-02-04' AND t1.player_name = 'Aaron Mooy'", "source_tables": ["player_attributes", "player"]}, "evidence": "Aaron Mooy refers to player_name = 'Aaron Mooy'; on 2016/2/4 refers to date LIKE '2016-02-04%';"}
{"sample_id": 10533, "db_id": "european_football_2", "final": {"question": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.", "sql": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.\"date\", 1, 10) = '2013-09-20'", "source_tables": ["team_attributes", "team"]}, "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'"}
{"sample_id": 10463, "db_id": "european_football_2", "final": {"question": "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing.", "sql": "SELECT t3.team_long_name FROM Team AS t3 INNER JOIN Team_Attributes AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.buildUpPlayDribblingClass = 'Normal' AND t4.chanceCreationPassing < ( SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.\"date\", 1, 4) = '2014') ORDER BY t4.chanceCreationPassing DESC", "source_tables": ["team_attributes", "team"]}, "evidence": "normal build-up play dribbling class refers to buildUpPlayDribblingClass = 'Normal'; in 2014 refers to date > = '2014-01-01 00:00:00' AND date < = '2014-01-31 00:00:00'; names of the teams refers to team_long_name; less than average chance creation passing = DIVIDE(SUM(chanceCreationPassing), COUNT(id)) > chanceCreationPassing;"}
{"sample_id": 10568, "db_id": "european_football_2", "final": {"question": "Please provide the full name of the away team that scored the most goals.", "sql": "SELECT t2.team_long_name FROM Match AS t1 INNER JOIN Team AS t2 ON t1.away_team_api_id = t2.team_api_id ORDER BY t1.away_team_goal DESC LIMIT 1", "source_tables": ["match", "team"]}, "evidence": "full name refers to team_long_name; away team refers to away_team_api_id; scored the most goals refers to MAX(away_team_goal)"}
{"sample_id": 10555, "db_id": "european_football_2", "final": {"question": "How many football players born after the 1990s have the first name \"Aaron\"?", "sql": "SELECT COUNT(id) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%'", "source_tables": ["player"]}, "evidence": "first name \"Aaron\" refers to player_name LIKE 'Aaron%'; born after the 1990s refers to birthday > '1990'"}
{"sample_id": 10518, "db_id": "european_football_2", "final": {"question": "Calculate the average overall rating of Pietro Marino.", "sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Pietro Marino'", "source_tables": ["player_attributes", "player"]}, "evidence": "Pietro Marino refers to player_name = 'Pietro Marino'; average overall rating AVG(T1.overall_rating)"}
{"sample_id": 10485, "db_id": "european_football_2", "final": {"question": "What is Aaron Doran's potential score?", "sql": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'", "source_tables": ["player_attributes", "player"]}, "evidence": "potential score refers to potential;"}
{"sample_id": 10619, "db_id": "thrombosis_prediction", "final": {"question": "When was the medical information on patient number 48473 first documented, and what disease did she have?", "sql": "SELECT \"First Date\", Diagnosis FROM Patient WHERE ID = 48473", "source_tables": ["patient"]}, "evidence": "medical information first documented refers to Description; disease refers to diagnosis; patient number refers to id"}
{"sample_id": 10627, "db_id": "thrombosis_prediction", "final": {"question": "Was the patient with the number 57266's uric acid within a normal range?", "sql": "SELECT CASE WHEN (T1.SEX = 'F' AND T2.UA > 6.5) OR (T1.SEX = 'M' AND T2.UA > 8.0) THEN true ELSE false END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266", "source_tables": ["laboratory", "patient"]}, "evidence": "uric acid within a normal range refers to UA > 8.0 and SEX = 'M'OR UA > 6.5 and SEX = 'F'"}
{"sample_id": 10687, "db_id": "thrombosis_prediction", "final": {"question": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = 'negative' OR T2.RNP = '0' AND T1.Admission = '+'", "source_tables": ["laboratory", "patient"]}, "evidence": "normal level of anti-ribonuclear protein refers to RNP = '-', '+-'; And'-' means 'negative'; '+-' refers to '0'; admitted to the hospital refers to Admission = '+'; Should consider DISTINCT in the final result;"}
{"sample_id": 10611, "db_id": "thrombosis_prediction", "final": {"question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?", "sql": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND \"ANA Pattern\" = 'S' AND \"aCL IgM\" > (SELECT AVG(\"aCL IgM\") * 1.2 FROM Examination WHERE Thrombosis = 2 AND \"ANA Pattern\" = 'S')", "source_tables": ["examination"]}, "evidence": "thrombosis level 2 refers to Thrombosis = 2; ANA pattern of only S refers to ANA = 'S'; average anti-Cardiolip in antibody (IgM) refers to AVG(`aCL IgM`); calculation = MULTIPLY(AVG + AVG, 0.2)"}
{"sample_id": 10671, "db_id": "thrombosis_prediction", "final": {"question": "Please list the disease names of the patients that have a proteinuria level higher than normal.", "sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.\"U-PRO\" >= 30", "source_tables": ["laboratory", "patient"]}, "evidence": "disease names refers to Diagnosis; proteinuria level higher than normal refers to `U-PRO` > = 30;"}
{"sample_id": 10720, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients whose total cholesterol is within the normal range, how many of them have a P pattern observed in the sheet of ANA examination?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T3.\"ANA Pattern\" = 'P' AND T2.\"T-CHO\" < 250", "source_tables": ["laboratory", "examination", "patient"]}, "evidence": "total cholesterol is within the normal range refers to `T-CHO` < 250; P pattern observed in the sheet of ANA examination refers to ANA Pattern = 'P';"}
{"sample_id": 10662, "db_id": "thrombosis_prediction", "final": {"question": "From laboratory examinations in 1991, what is the average hematoclit level that is lower than the normal range.", "sql": "SELECT AVG(T2.HCT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT < 29 AND STRFTIME('%Y', T2.Date) = '1991'", "source_tables": ["laboratory", "patient"]}, "evidence": "laboratory examinations in 1991 refers to Date like '1991%'; average hematoclit level = AVG(HCT); hematoclit level that is lower than the normal range refers to HCT < 29;"}
{"sample_id": 10629, "db_id": "thrombosis_prediction", "final": {"question": "List all patients with their sex and date of birthday, whose AST glutamic oxaloacetic transaminase (GOT) index is within normal range for loboratory examination in 1994.", "sql": "SELECT DISTINCT T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND STRFTIME('%Y', T2.Date) = '1994'", "source_tables": ["laboratory", "patient"]}, "evidence": "AST glutamic oxaloacetic transaminase (GOT) index is within normal range refers to GOT < 60; examination in 1994 refers to year(Date) = 1994"}
{"sample_id": 10647, "db_id": "thrombosis_prediction", "final": {"question": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.", "sql": "SELECT T1.ID,T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.\"T-BIL\" >= 2.0 GROUP BY T1.SEX,T1.ID", "source_tables": ["laboratory", "patient"]}, "evidence": "List refers to GROUP_CONCAT(DISTINCT ID); total bilirubin (T-BIL) not within normal range refers to T-BIL > = 2.0"}
{"sample_id": 10726, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients with a normal blood glucose, how many of them don't have thrombosis?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.GLU < 180 AND T3.Thrombosis = 0", "source_tables": ["laboratory", "examination", "patient"]}, "evidence": "normal blood glucose refers to GLU < 180; don't have thrombosis refers to Thrombosis = 0;"}
{"sample_id": 10595, "db_id": "thrombosis_prediction", "final": {"question": "What is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995?", "sql": "SELECT T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.\"Examination Date\" BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T2.Diagnosis ORDER BY COUNT(T2.Diagnosis) DESC LIMIT 1", "source_tables": ["examination", "patient"]}, "evidence": "the most common illness refers to MAX(COUNT(Diagnosis)); lab work between 1/1/1985 and 12/31/1995 refers to `Examination Date` between '1985-01-01' and '1995-12-31 '"}
{"sample_id": 10608, "db_id": "thrombosis_prediction", "final": {"question": "Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.", "sql": "SELECT ID FROM Examination WHERE \"Examination Date\" BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'", "source_tables": ["examination"]}, "evidence": "'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'"}
{"sample_id": 10603, "db_id": "thrombosis_prediction", "final": {"question": "For the patient who got the laboratory test of uric acid level as 8.4 on 1991-10-21, how old was he/she at that time?", "sql": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA = 8.4 AND T2.Date = '1991-10-21'", "source_tables": ["laboratory", "patient"]}, "evidence": "how old at that time refers to SUBTRACT(year(test date), year(Birthday)); uric acid level as 8.4 refers to UA = '8.4'; 1991/10/21 refers to Date = '1991-10-21'"}
{"sample_id": 10714, "db_id": "thrombosis_prediction", "final": {"question": "What is the anti Cardiolipin antibody concentration of the female patient with the highest uric acid level in the normal range?", "sql": "SELECT T3.\"aCL IgG\", T3.\"aCL IgM\", T3.\"aCL IgA\" FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T1.SEX = 'F' AND T2.UA > 6.5 ORDER BY T2.UA DESC LIMIT 1", "source_tables": ["laboratory", "examination", "patient"]}, "evidence": "anti Cardiolipin antibody concentration refers to `aCL IgG`, `aCL IgM`, `aCL IgA`; female patient refers to Sex = F'; highest uric acid level in the normal range refers to MAX(UA > 6.50);"}
{"sample_id": 10728, "db_id": "thrombosis_prediction", "final": {"question": "How many patients diagnosed with SLE have a normal white blood cell level?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9", "source_tables": ["laboratory", "patient"]}, "evidence": "diagnosed with SLE refers to Diagnosis = 'SLE'; normal white blood cell level refers to WBC between 3.5 and 9.0;"}
{"sample_id": 10722, "db_id": "thrombosis_prediction", "final": {"question": "What is the disease name of the patient who has the highest level of triglyceride within the normal range?", "sql": "SELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 ORDER BY T2.TG DESC LIMIT 1", "source_tables": ["laboratory", "examination"]}, "evidence": "disease name referse to Diagnosis; highest level of triglyceride within the normal range refers to MAX(TG < 200);"}
{"sample_id": 10583, "db_id": "thrombosis_prediction", "final": {"question": "For in-patient age 50 and above, what is their average anti-cardiolipin antibody (IgG) concentration?", "sql": "SELECT AVG(T2.\"aCL IgG\") FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50 AND T1.Admission = '+'", "source_tables": ["examination", "patient"]}, "evidence": "in-patient refers to Admission = '+'; age 50 and above refers to SUBTRACT(year(current_timestamp), year(Birthday)) >= '50'; average anti-cardiolipin antibody (IgG) concentration refers to AVG(aCL IgG)"}
{"sample_id": 10630, "db_id": "thrombosis_prediction", "final": {"question": "Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.", "sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60", "source_tables": ["laboratory", "patient"]}, "evidence": "male refers to SEX = 'M'; ALT glutamic pylvic transaminase (GPT) exceed the normal range refers to GPT > = 60"}
{"sample_id": 10713, "db_id": "thrombosis_prediction", "final": {"question": "How many male patients have a normal level of both albumin and total protein?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M'  AND T2.ALB > 3.5 AND T2.ALB < 5.5 AND T2.TP BETWEEN 6.0 AND 8.5", "source_tables": ["laboratory", "patient"]}, "evidence": "male refers to Sex = 'M'; normal level of both albumin and total protein refers to ALB > 3.5 and ALB < 5.5 AND TP between 6.0 and 8.5;"}
{"sample_id": 10600, "db_id": "thrombosis_prediction", "final": {"question": "What was the gender of the first AORTITIS diagnosed patient?", "sql": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' AND \"First Date\" IS NOT NULL ORDER BY \"First Date\" ASC LIMIT 1", "source_tables": ["patient"]}, "evidence": "gender means SEX; 'AORTITIS' refers to Diagnosis;"}
{"sample_id": 10716, "db_id": "thrombosis_prediction", "final": {"question": "Please list the patient's ID whose creatinine level is normal and whose anti Cardiolipin antibody concentration level is the highest.", "sql": "SELECT T2.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.CRE < 1.5 ORDER BY T2.\"aCL IgA\" DESC LIMIT 1", "source_tables": ["laboratory", "examination"]}, "evidence": "creatinine level is normal refers to CRE < 1.5; anti Cardiolipin antibody concentration level is the highest refers to MAX(aCL IgA);"}
{"sample_id": 10702, "db_id": "thrombosis_prediction", "final": {"question": "How many male patients have their glutamic oxaloacetic transaminase in the normal range?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'", "source_tables": ["laboratory", "patient"]}, "evidence": "male refers to Sex = 'M'; glutamic oxaloacetic transaminase in the normal range refers to GOT < 60;"}
{"sample_id": 10718, "db_id": "thrombosis_prediction", "final": {"question": "What is the anti-nucleus antibody concentration of the patient whose total bilirubin is the highest in the normal range?", "sql": "SELECT T3.ANA FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.\"T-BIL\" < 2.0 ORDER BY T2.\"T-BIL\" DESC LIMIT 1", "source_tables": ["laboratory", "examination", "patient"]}, "evidence": "anti-nucleus antibody concentration refers to ANA; total bilirubin is the highest in the normal range refers to MAX(`T-BIL` < 2.0);"}
{"sample_id": 10618, "db_id": "thrombosis_prediction", "final": {"question": "What is the most common sign of patients with SLE disease?", "sql": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1", "source_tables": ["examination"]}, "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis"}
{"sample_id": 10612, "db_id": "thrombosis_prediction", "final": {"question": "What percentage of patients with a proteinuria level within the normal range have a uric acid level below the normal range?", "sql": "SELECT CAST(SUM(CASE WHEN UA <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Laboratory WHERE \"U-PRO\" > 0 AND \"U-PRO\" < 30", "source_tables": ["laboratory"]}, "evidence": "proteinuria level within the normal range refers to `U-PRO` > 0 AND `U-PRO` < 30; uric acid level below the normal range refers to UA < = 6.5; calculation = MULTIPLY(DIVIDE(UA < = 6.5, `U-PRO` > 0 AND `U-PRO` < 30)\uff0c100)"}
{"sample_id": 10641, "db_id": "thrombosis_prediction", "final": {"question": "For all patients with normal uric acid (UA), what is the average UA index based on their latest laboratory examination result?", "sql": "SELECT AVG(T2.UA) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.UA < 6.5 AND T1.SEX = 'F') OR (T2.UA < 8.0 AND T1.SEX = 'M') AND T2.Date = ( SELECT MAX(Date) FROM Laboratory )", "source_tables": ["laboratory", "patient"]}, "evidence": "uric acid (UA) with normal range refers to UA < 8.0 and SEX = 'M' or UA < 6.5 and SEX = 'F'; average UA index refers to AVG(UA)"}
{"sample_id": 10732, "db_id": "thrombosis_prediction", "final": {"question": "For the male patients that have a normal prothrombin time, what is their average prothrombin time?", "sql": "SELECT AVG(T2.PT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PT < 14 AND T1.SEX = 'M'", "source_tables": ["laboratory", "patient"]}, "evidence": "male refers to Sex = 'M'; normal prothrombin time refer to PT < 14; average prothrombin time = AVG(PT);"}
{"sample_id": 10668, "db_id": "thrombosis_prediction", "final": {"question": "For the patients with an abnormal activated partial prothrom bin time, how many of them does not have thrombosis?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T3.Thrombosis = 0 AND T2.APTT > 45", "source_tables": ["laboratory", "examination", "patient"]}, "evidence": "abnormal activated partial prothrom bin time refers to APTT > 45; does not have thrombosis refers to Thrombosis = 0; Only count ones without repetitive."}
{"sample_id": 10602, "db_id": "thrombosis_prediction", "final": {"question": "Was the patient a man or a women whose ALT glutamic pylvic transaminase status got 9 on 1992-6-12?", "sql": "SELECT T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT = 9.0 AND T2.Date = '1992-06-12'", "source_tables": ["laboratory", "patient"]}, "evidence": "man refers to SEX = 'M'; women refers to SEX = 'F'; ALT glutamic pylvic transaminase status got 9 GPT = '9'; 1992/6/12 refers to Date = '1992-06-12'"}
{"sample_id": 10606, "db_id": "thrombosis_prediction", "final": {"question": "For the patient whose birthday was 1959/3/1, what symptoms did he/she have during the examination on 1993/9/27?", "sql": "SELECT T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-03-01' AND T2.\"Examination Date\" = '1993-09-27'", "source_tables": ["examination", "patient"]}, "evidence": ""}
{"sample_id": 10628, "db_id": "thrombosis_prediction", "final": {"question": "When is the laboratory examination of patient '48473' where his/her AST glutamic oxaloacetic transaminase (GOT) index is above the normal range.", "sql": "SELECT Date FROM Laboratory WHERE ID = 48473 AND GOT >= 60", "source_tables": ["laboratory"]}, "evidence": "AST glutamic oxaloacetic transaminase (GOT) index is above the normal range refers to GOT > = 60; when refers to DATE"}
{"sample_id": 10639, "db_id": "thrombosis_prediction", "final": {"question": "For all patient born in 1982, state if their albumin is within normal range.", "sql": "SELECT CASE WHEN T2.ALB >= 3.5 AND T2.ALB <= 5.5 THEN 'normal' ELSE 'abnormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1982'", "source_tables": ["laboratory", "patient"]}, "evidence": "Year(Birthday) = '1982'; albumin is within normal range refers to ALB between 3.5 and 5.5"}
{"sample_id": 10786, "db_id": "student_club", "final": {"question": "Where is Amy Firth's hometown?", "sql": "SELECT T2.city, T2.county, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'", "source_tables": ["member", "zip_code"]}, "evidence": "hometown refers to city, county, state"}
{"sample_id": 10825, "db_id": "student_club", "final": {"question": "Indicate the name of the closed event whose cost has exceeded the budget the most.", "sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event WHERE T1.event_status = 'Closed' AND T1.remaining < 0 ORDER BY T1.remaining LIMIT 1", "source_tables": ["event", "budget"]}, "evidence": "closed events refers to event_name where status = 'Closed'; exceed the budget the most refers to MIN(remaining) where remaining < 0"}
{"sample_id": 10891, "db_id": "student_club", "final": {"question": "Which student has the hometown of Lincolnton, North Carolina with the zip code of 28092? List their full name and position.", "sql": "SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T2.zip_code = 28092", "source_tables": ["member", "zip_code"]}, "evidence": "full name refers to first_name, last_name, hometown of Lincolnton, North Carolina refers to city = 'Lincolnton' AND state = 'North Carolina'"}
{"sample_id": 10780, "db_id": "student_club", "final": {"question": "Who was the first one paid his/her dues? Tell the full name.", "sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Dues' ORDER BY T2.date_received LIMIT 1", "source_tables": ["income", "member"]}, "evidence": "full name refers to first_name, last_name; first paid dues refers to MIN(received_date) where source = 'Dues'"}
{"sample_id": 10781, "db_id": "student_club", "final": {"question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?", "sql": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'", "source_tables": ["event", "budget"]}, "evidence": "budget in Advertisement refer to category = 'Advertisement' in the budget table; DIVIDE(SUM(amount when event_name = 'Yearly Kickoff'), SUM(amount when event_name = 'October Meeting'))"}
{"sample_id": 10840, "db_id": "student_club", "final": {"question": "Mention the category of events which were held at MU 215.", "sql": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'", "source_tables": ["event", "budget"]}, "evidence": "held at MU 215 refers to location = 'MU 215'"}
{"sample_id": 10853, "db_id": "student_club", "final": {"question": "List the last name of the members of the club that attended the women's soccer event.", "sql": "SELECT T3.last_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women''s Soccer' AND T3.position = 'Member'", "source_tables": ["event", "member", "attendance"]}, "evidence": "members of the club refers to position = 'Member'; 'Women's Soccer' is event name;"}
{"sample_id": 10866, "db_id": "student_club", "final": {"question": "List the expenses that spend more than fifty dollars on average.", "sql": "SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50", "source_tables": ["expense"]}, "evidence": "expense refers to expense_description; spend more than fifty dollars on average refers to DIVIDE( SUM(cost), COUNT(expense_id) ) > 50"}
{"sample_id": 10744, "db_id": "student_club", "final": {"question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?", "sql": "SELECT T1.event_name FROM event AS T1  INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id  HAVING COUNT(T2.link_to_event) > 10 EXCEPT SELECT T1.event_name  FROM event AS T1  WHERE T1.type = 'Meeting'", "source_tables": ["event", "attendance"]}, "evidence": "meetings events refers to type = 'Meeting'; attended by more than 10 members refers to COUNT(event_id) > 10"}
{"sample_id": 10878, "db_id": "student_club", "final": {"question": "List the full name of the top five members who spend the most money in the descending order of spending.", "sql": "SELECT T3.first_name, T3.last_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id ORDER BY T2.spent DESC LIMIT 5", "source_tables": ["expense", "member", "budget"]}, "evidence": "full name refers to first_name, last_name; spend the most money refers to MAX(expense.cost)"}
{"sample_id": 10811, "db_id": "student_club", "final": {"question": "Which event has the lowest cost?", "sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1", "source_tables": ["event", "expense", "budget"]}, "evidence": "event refers to event_name; lowest cost means MIN(cost)"}
{"sample_id": 10766, "db_id": "student_club", "final": {"question": "What was the notes of the fundraising on 2019/9/14?", "sql": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'", "source_tables": ["income"]}, "evidence": "fundraising on 2019/9/14 refers to source = 'Fundraising' where date_received = '2019-09-14'"}
{"sample_id": 10764, "db_id": "student_club", "final": {"question": "What was the cost for the \"Posters\" on 2019/9/4?", "sql": "SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'", "source_tables": ["expense"]}, "evidence": "'Poster' is an event description; on 2019/9/14 refers to event_date = '2019-09-04'"}
{"sample_id": 10808, "db_id": "student_club", "final": {"question": "What is the total expense for the Yearly Kickoff?", "sql": "SELECT SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'Yearly Kickoff'", "source_tables": ["event", "expense", "budget"]}, "evidence": "'Yearly Kickoff' is an event name; total expense refers to SUM(cost)"}
{"sample_id": 10783, "db_id": "student_club", "final": {"question": "What is the total cost of the pizzas for all the events?", "sql": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'", "source_tables": ["expense"]}, "evidence": "total cost of the pizzas refers to SUM(cost) where expense_description = 'Pizza'"}
{"sample_id": 10867, "db_id": "student_club", "final": {"question": "Find the full name of members whose t-shirt size is extra large.", "sql": "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'", "source_tables": ["member"]}, "evidence": "full name refers to first_name, last_name; t_shirt_size = 'X-Large'"}
{"sample_id": 10820, "db_id": "student_club", "final": {"question": "Name the event with the highest amount spent on advertisement.", "sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1", "source_tables": ["event", "budget"]}, "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'"}
{"sample_id": 10794, "db_id": "student_club", "final": {"question": "When did the member, Casey Mason, received the income?", "sql": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Casey' AND T1.last_name = 'Mason'", "source_tables": ["income", "member"]}, "evidence": "when the income was received refers to date_received"}
{"sample_id": 10815, "db_id": "student_club", "final": {"question": "Provide the full name and email address of the Student_Club's Secretary.", "sql": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'", "source_tables": ["member"]}, "evidence": "full name refers to first_name, last_name; 'Secretary' is a position of Student Club"}
{"sample_id": 10819, "db_id": "student_club", "final": {"question": "On average, how much did the Student_Club spend on food for the typical event in the past?", "sql": "SELECT SUM(spent) / COUNT(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed'", "source_tables": ["budget"]}, "evidence": "DIVIDE(SUM(spent), COUNT(spent)) where category = 'Food'; 'event in the past' means event_status = 'Closed'"}
{"sample_id": 10837, "db_id": "student_club", "final": {"question": "List out the position of members who joined major of Business.", "sql": "SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business'", "source_tables": ["major", "member"]}, "evidence": "'Business' is the major name"}
{"sample_id": 10787, "db_id": "student_club", "final": {"question": "What are the expenses of the budget with the lowest remaining?", "sql": "SELECT T2.expense_description FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget ORDER BY T1.remaining LIMIT 1", "source_tables": ["expense", "budget"]}, "evidence": "expense of budget refers to expense_description; lowest remaining refers to MIN(remaining)"}
{"sample_id": 10842, "db_id": "student_club", "final": {"question": "State the name of major that Vice President has joined.", "sql": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'", "source_tables": ["major", "member"]}, "evidence": "name of major refers to major_name; 'Vice President' is position of Student Club"}
{"sample_id": 10816, "db_id": "student_club", "final": {"question": "How many members of the Student_Club have major in 'Physics Teaching'?", "sql": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Physics Teaching'", "source_tables": ["major", "member"]}, "evidence": "'Physics Teaching' is the major_name;"}
{"sample_id": 10742, "db_id": "student_club", "final": {"question": "Please list the event names of all the events attended by Maya Mclean.", "sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'", "source_tables": ["event", "member", "attendance"]}, "evidence": ""}
{"sample_id": 10740, "db_id": "student_club", "final": {"question": "What is the event that has the highest attendance of the students from the Student_Club?", "sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1", "source_tables": ["event", "attendance"]}, "evidence": "event with highest attendance refers to MAX(COUNT(link_to_event))"}
{"sample_id": 10752, "db_id": "student_club", "final": {"question": "What college offers the major that Tyler Hewitt took?", "sql": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'", "source_tables": ["major", "member"]}, "evidence": ""}
{"sample_id": 10746, "db_id": "student_club", "final": {"question": "What is the average attendance of meetings in 2020?", "sql": "SELECT CAST(COUNT(T2.link_to_event) AS REAL) / COUNT(DISTINCT T2.link_to_event) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE SUBSTR(T1.event_date, 1, 4) = '2020' AND T1.type = 'Meeting'", "source_tables": ["event", "attendance"]}, "evidence": "meetings in 2020 refers to type = 'Meeting' where YEAR(event_date) = 2020; average = DIVIDE(COUNT(event_id), COUNT(DISTINCT event_name))"}
{"sample_id": 10849, "db_id": "student_club", "final": {"question": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?", "sql": "SELECT DISTINCT T2.category, T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker'", "source_tables": ["event", "budget"]}, "evidence": "budget category refers to category; events located at refers to location; type = 'Guest Speaker'; 0 budget spent refers to spent = 0; "}
{"sample_id": 10763, "db_id": "student_club", "final": {"question": "Give the location for \"Spring Budget Review\".", "sql": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'", "source_tables": ["event"]}, "evidence": "'Spring Budget Review' is an event name;"}
{"sample_id": 10800, "db_id": "student_club", "final": {"question": "What is the highest amount of budget spend for an event?", "sql": "SELECT MAX(spent) FROM budget", "source_tables": ["budget"]}, "evidence": "highest amount of budget spend refers to MAX(spent)"}
{"sample_id": 10922, "db_id": "debit_card_specializing", "final": {"question": "Please list the product description of the products consumed in September, 2013.", "sql": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Date = '201309'", "source_tables": ["yearmonth", "transactions_1k", "products"]}, "evidence": "September 2013 refers to 201309; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month."}
{"sample_id": 10897, "db_id": "debit_card_specializing", "final": {"question": "How many customers in KAM had a consumption of less than 30,000 for the year 2012?", "sql": "SELECT COUNT(*) FROM ( SELECT T2.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND SUBSTRING(T2.Date, 1, 4) = '2012' GROUP BY T2.CustomerID HAVING SUM(T2.Consumption) < 30000 ) AS t1", "source_tables": ["yearmonth", "customers"]}, "evidence": "Year 2012 can be presented as Between 201201 And 201212, which means between January and December in 2012"}
{"sample_id": 10896, "db_id": "debit_card_specializing", "final": {"question": "Which customers, paying in CZK, consumed the most gas in 2011?", "sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Date BETWEEN 201101 AND 201112 GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": "Year 2011 can be presented as Between 201101 And 201112, which means between January and December in 2011"}
{"sample_id": 10920, "db_id": "debit_card_specializing", "final": {"question": "What is the highest monthly consumption in the year 2012?", "sql": "SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1", "source_tables": ["yearmonth"]}, "evidence": "The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month."}
{"sample_id": 10953, "db_id": "debit_card_specializing", "final": {"question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?", "sql": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency", "source_tables": ["yearmonth", "customers", "transactions_1k"]}, "evidence": "average price per single item = Total(price) / Total(amount)"}
{"sample_id": 10941, "db_id": "debit_card_specializing", "final": {"question": "What was the product id of the transaction happened at 2012/8/23 21:20:00?", "sql": "SELECT T1.ProductID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'", "source_tables": ["transactions_1k", "gasstations"]}, "evidence": "'2012/8/23 21:20:00' can refer to date = '2012-08-23' AND T1.time = '21:20:00' in the database"}
{"sample_id": 10930, "db_id": "debit_card_specializing", "final": {"question": "How many transactions taken place in the gas station in the Czech Republic are with a price of over 1000?", "sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000", "source_tables": ["transactions_1k", "gasstations"]}, "evidence": "Gas station in the Czech Republic implies that Country = 'CZE'"}
{"sample_id": 10939, "db_id": "debit_card_specializing", "final": {"question": "For the earliest customer, what segment did he/she have?", "sql": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY Date ASC LIMIT 1", "source_tables": ["customers", "transactions_1k"]}, "evidence": ""}
{"sample_id": 10903, "db_id": "debit_card_specializing", "final": {"question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?", "sql": "SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date BETWEEN 201301 AND 201312", "source_tables": ["yearmonth", "customers"]}, "evidence": "annual average consumption of customer with the lowest consumption in each segment = total consumption per year / the number of customer with lowest consumption in each segment; Difference in annual average = SME's annual average - LAM's annual average; Difference in annual average = LAM's annual average - KAM's annual average; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year."}
{"sample_id": 10929, "db_id": "debit_card_specializing", "final": {"question": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.", "sql": "SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11", "source_tables": ["transactions_1k", "gasstations"]}, "evidence": ""}
{"sample_id": 10904, "db_id": "debit_card_specializing", "final": {"question": "Which of the three segments\u2014SME, LAM and KAM\u2014has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?", "sql": "SELECT CAST((SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0)), CAST(SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) , CAST(SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID", "source_tables": ["yearmonth", "customers"]}, "evidence": "Increase or Decrease = consumption for 2013 - consumption for 2012; Percentage of Increase = (Increase or Decrease / consumption for 2013) * 100%; The first 4 strings of the Date values in the yearmonth table can represent year"}
{"sample_id": 10924, "db_id": "debit_card_specializing", "final": {"question": "Please list the chains of the gas stations with transactions in euro.", "sql": "SELECT DISTINCT T3.ChainID FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T2.Currency = 'EUR'", "source_tables": ["customers", "transactions_1k", "gasstations"]}, "evidence": ""}
