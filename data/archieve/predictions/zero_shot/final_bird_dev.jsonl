{"sample_id": 6521, "db_id": "retail_world", "gold_sql": "SELECT COUNT(T2.ProductID) FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID INNER JOIN \"Order Details\" AS T3 ON T2.ProductID = T3.ProductID INNER JOIN Orders AS T4 ON T3.OrderID = T4.OrderID WHERE T1.CategoryName = 'Condiments' AND T1.CategoryID = 2 AND T4.OrderDate LIKE '1997%'", "pred_sql": "SELECT SUM(od.quantity) AS total_condiments_sold\nFROM orderdetails od\nJOIN products p ON od.productid = p.productid\nJOIN categories c ON p.categoryid = c.categoryid\nJOIN orders o ON od.orderid = o.orderid\nWHERE c.categoryname = 'Condiments' AND strftime('%Y', o.orderdate) = '1997';"}
{"sample_id": 6430, "db_id": "retail_world", "gold_sql": "SELECT T1.Description FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.ProductName = 'tofu'", "pred_sql": "SELECT c.description FROM categories c JOIN products p ON c.categoryid = p.categoryid WHERE p.productname = 'tofu';"}
{"sample_id": 6613, "db_id": "retail_world", "gold_sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Finland'", "pred_sql": "SELECT products.productname FROM products JOIN suppliers ON products.supplierid = suppliers.supplierid WHERE suppliers.country = 'Finland';"}
{"sample_id": 6553, "db_id": "retail_world", "gold_sql": "SELECT T4.ProductName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN \"Order Details\" AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID WHERE T1.Country = 'Norway' AND STRFTIME('%Y', T2.OrderDate) = '1996'", "pred_sql": "SELECT DISTINCT p.productname \nFROM products p \nJOIN orderdetails od ON p.productid = od.productid \nJOIN orders o ON od.orderid = o.orderid \nJOIN customers c ON o.customerid = c.customerid \nWHERE c.country = 'Norway' AND strftime('%Y', o.orderdate) = '1996';"}
{"sample_id": 6574, "db_id": "retail_world", "gold_sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10274", "pred_sql": "SELECT employees.firstname || ' ' || employees.lastname AS full_name \nFROM orders \nJOIN employees ON orders.employeeid = employees.employeeid \nWHERE orders.orderid = '10274';"}
{"sample_id": 6461, "db_id": "retail_world", "gold_sql": "SELECT T2.CustomerID FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Michael' AND T1.LastName = 'Suyama'", "pred_sql": "SELECT DISTINCT customers.customerid \nFROM customers \nJOIN orders ON customers.customerid = orders.customerid \nJOIN employees ON orders.employeeid = employees.employeeid \nWHERE employees.firstname = 'Michael' AND employees.lastname = 'Suyama';"}
{"sample_id": 6608, "db_id": "retail_world", "gold_sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.CategoryName = 'Confections'", "pred_sql": "SELECT productname FROM products WHERE categoryid = (SELECT categoryid FROM categories WHERE categoryname = 'Confections');"}
{"sample_id": 6516, "db_id": "retail_world", "gold_sql": "SELECT COUNT(OrderID) FROM Orders WHERE OrderDate LIKE '1996-08%' GROUP BY CustomerID ORDER BY COUNT(OrderID) DESC LIMIT 1", "pred_sql": "SELECT COUNT(o.orderid) AS order_count\nFROM orders o\nWHERE o.customerid = (\n    SELECT o2.customerid\n    FROM orders o2\n    WHERE strftime('%Y-%m', o2.orderdate) = '1996-08'\n    GROUP BY o2.customerid\n    ORDER BY COUNT(o2.orderid) DESC\n    LIMIT 1\n)"}
{"sample_id": 6416, "db_id": "retail_world", "gold_sql": "SELECT T3.CategoryName FROM Products AS T1 INNER JOIN \"Order Details\" AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Categories AS T3 ON T1.CategoryID = T3.CategoryID WHERE T2.OrderID = 10933", "pred_sql": "SELECT DISTINCT c.categoryname \nFROM categories c \nJOIN products p ON c.categoryid = p.categoryid \nJOIN orderdetails od ON p.productid = od.productid \nJOIN orders o ON od.orderid = o.orderid \nWHERE o.orderid = '10933';"}
{"sample_id": 6485, "db_id": "retail_world", "gold_sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.EmployeeID < 4", "pred_sql": "SELECT firstname || ' ' || lastname AS full_name FROM employees WHERE employeeid NOT IN (SELECT employeeid FROM territories GROUP BY employeeid HAVING COUNT(*) >= 4)"}
{"sample_id": 6371, "db_id": "retail_world", "gold_sql": "SELECT T1.SupplierID FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID GROUP BY T1.SupplierID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT suppliers.suppliername\nFROM suppliers\nJOIN products ON suppliers.supplierid = products.supplierid\nGROUP BY suppliers.supplierid\nORDER BY COUNT(products.productid) DESC\nLIMIT 1;"}
{"sample_id": 6637, "db_id": "retail_world", "gold_sql": "SELECT ProductName FROM Products WHERE ProductID = 77", "pred_sql": "SELECT productname FROM products WHERE productid = '77';"}
{"sample_id": 6395, "db_id": "retail_world", "gold_sql": "SELECT T3.ProductName FROM Orders AS T1 INNER JOIN \"Order Details\" AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID GROUP BY T3.ProductName ORDER BY COUNT(*) DESC LIMIT 10", "pred_sql": "SELECT p.productname, COUNT(od.orderid) AS order_count \nFROM products p \nJOIN orderdetails od ON p.productid = od.productid \nJOIN orders o ON od.orderid = o.orderid \nGROUP BY p.productid \nORDER BY order_count DESC \nLIMIT 10;"}
{"sample_id": 824, "db_id": "social_media", "gold_sql": "SELECT DISTINCT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.RetweetCount > 30", "pred_sql": "SELECT user.gender, COUNT(twitter.retweetcount) AS retweet_count \nFROM user \nJOIN twitter ON user.userid = twitter.userid \nWHERE twitter.retweetcount > 30 \nGROUP BY user.gender;"}
{"sample_id": 828, "db_id": "social_media", "gold_sql": "SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.Country = 'Australia'", "pred_sql": "SELECT twitter.text FROM twitter JOIN location ON twitter.locationid = location.locationid WHERE location.country = 'Australia';"}
{"sample_id": 785, "db_id": "social_media", "gold_sql": "SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.Sentiment > 0 AND T2.City = 'Buenos Aires'", "pred_sql": "SELECT twitter.text FROM twitter JOIN location ON twitter.locationid = location.locationid WHERE location.city = 'Buenos Aires' AND twitter.sentiment > 0;"}
{"sample_id": 779, "db_id": "social_media", "gold_sql": "SELECT COUNT(TweetID) AS tweet_number FROM twitter WHERE Sentiment > 0 AND Weekday = 'Thursday'", "pred_sql": "SELECT COUNT(*) AS positive_tweets_on_thursday FROM twitter WHERE sentiment > 0 AND weekday = 'Thursday';"}
{"sample_id": 804, "db_id": "social_media", "gold_sql": "SELECT COUNT(T1.Likes) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T3 ON T3.UserID = T1.UserID WHERE T2.State = 'Wisconsin' AND T3.Gender = 'Female'", "pred_sql": "SELECT COUNT(DISTINCT u.userid) AS female_user_count \nFROM user u \nJOIN twitter t ON u.userid = t.userid \nJOIN location l ON t.locationid = l.locationid \nWHERE u.gender = 'Female' AND l.state = 'Wisconsin';"}
{"sample_id": 780, "db_id": "social_media", "gold_sql": "SELECT text FROM twitter WHERE Likes = ( SELECT MAX( Likes) FROM twitter )", "pred_sql": "SELECT text FROM twitter ORDER BY likes DESC LIMIT 1;"}
{"sample_id": 852, "db_id": "social_media", "gold_sql": "SELECT SUM(T1.Likes) / COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Weekday = 'Monday'", "pred_sql": "SELECT AVG(t.likes) AS average_likes \nFROM twitter t \nJOIN user u ON t.userid = u.userid \nWHERE u.gender = 1 AND t.weekday = 'Monday';"}
{"sample_id": 848, "db_id": "social_media", "gold_sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.Day = 31 AND T2.State = 'Santa' AND T2.Country = 'Argentina'", "pred_sql": "SELECT COUNT(*) AS tweet_count FROM twitter t JOIN location l ON t.locationid = l.locationid WHERE l.state = 'Santa Fe' AND l.country = 'Argentina' AND t.day = '31';"}
{"sample_id": 817, "db_id": "social_media", "gold_sql": "SELECT LocationID FROM twitter WHERE TweetID = 'tw-682714048199311366'", "pred_sql": "SELECT locationid FROM twitter WHERE tweetid = 'tw-682714048199311366';"}
{"sample_id": 830, "db_id": "social_media", "gold_sql": "SELECT DISTINCT T1.Lang FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.Country = 'Brazil'", "pred_sql": "SELECT DISTINCT twitter.lang FROM twitter JOIN location ON twitter.locationid = location.locationid WHERE location.country = 'Brazil';"}
{"sample_id": 842, "db_id": "social_media", "gold_sql": "SELECT T1.text FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Lang = 'fr'", "pred_sql": "SELECT twitter.text FROM twitter JOIN user ON twitter.userid = user.userid WHERE user.gender = 1 AND twitter.lang = 'fr'"}
{"sample_id": 790, "db_id": "social_media", "gold_sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male'", "pred_sql": "SELECT COUNT(*) AS total_tweets FROM twitter WHERE userid IN (SELECT userid FROM user WHERE gender = 'Male')"}
{"sample_id": 799, "db_id": "social_media", "gold_sql": "SELECT DISTINCT LocationID FROM location WHERE State = 'West Sussex'", "pred_sql": "SELECT locationid FROM location WHERE state = 'West Sussex';"}
{"sample_id": 808, "db_id": "social_media", "gold_sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Weekday = 'Wednesday' ORDER BY T1.Klout DESC LIMIT 1", "pred_sql": "SELECT u.gender \nFROM user u \nJOIN twitter t ON u.userid = t.userid \nWHERE t.klout = (SELECT MAX(klout) FROM twitter WHERE weekday = 'Wednesday') \nAND t.weekday = 'Wednesday';"}
{"sample_id": 844, "db_id": "social_media", "gold_sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T3 ON T3.UserID = T1.UserID WHERE T2.Country = 'Australia' AND T3.Gender = 'Male' AND T1.Sentiment > 0", "pred_sql": "SELECT COUNT(*) AS positive_tweet_count FROM twitter t JOIN user u ON t.userid = u.userid JOIN location l ON t.locationid = l.locationid WHERE t.sentiment > 0 AND u.gender = 1 AND l.country = 'Australia';"}
{"sample_id": 8689, "db_id": "chicago_crime", "gold_sql": "SELECT CAST(COUNT(T2.case_number) AS REAL) / 28 FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no WHERE T2.date LIKE '2/%/2018%' AND T1.index_code = 'N'", "pred_sql": "SELECT AVG(daily_crime_count) AS average_less_severe_crimes_per_day\nFROM (\n    SELECT COUNT(*) AS daily_crime_count\n    FROM crime\n    WHERE date BETWEEN '2018-02-01' AND '2018-02-28' \n    AND iucr_no IN (SELECT iucr_no FROM iucr WHERE index_code = 'N')\n    GROUP BY date\n) AS daily_crimes;"}
{"sample_id": 8669, "db_id": "chicago_crime", "gold_sql": "SELECT SUM(CASE WHEN T2.domestic = 'TRUE' THEN 1 ELSE 0 END) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T2.ward_no = T1.ward_no WHERE T1.ward_email = 'ward13@cityofchicago.org'", "pred_sql": "SELECT COUNT(*) AS domestic_violence_cases\nFROM crime\nJOIN ward ON crime.ward_no = ward.ward_no\nWHERE ward.ward_email = 'ward13@cityofchicago.org' AND crime.domestic = 'true';"}
{"sample_id": 8732, "db_id": "chicago_crime", "gold_sql": "SELECT primary_description, secondary_description FROM IUCR WHERE iucr_no = 275", "pred_sql": "SELECT iucr.primary_description, iucr.secondary_description FROM iucr WHERE iucr.iucr_no = '275';"}
{"sample_id": 8673, "db_id": "chicago_crime", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.domestic = 'TRUE' THEN T2.domestic END) AS REAL) * 100 / COUNT(T2.domestic) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no GROUP BY T1.community_area_no HAVING COUNT(T1.population) ORDER BY COUNT(T1.population) DESC LIMIT 1", "pred_sql": "SELECT (SUM(CASE WHEN domestic = 'true' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS domestic_violence_percentage\nFROM crime\nWHERE community_area_no = (SELECT community_area_no\n                           FROM community_area\n                           ORDER BY population DESC\n                           LIMIT 1);"}
{"sample_id": 8743, "db_id": "chicago_crime", "gold_sql": "SELECT T1.district_no, T1.district_name FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.case_number = 'JB120039' GROUP BY T1.district_no, T1.district_name", "pred_sql": "SELECT district.district_name FROM crime JOIN district ON crime.district_no = district.district_no WHERE crime.case_number = 'JB120039' AND crime.case_number IN (SELECT case_number FROM crime GROUP BY case_number HAVING COUNT(*) > 1);"}
{"sample_id": 8688, "db_id": "chicago_crime", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.secondary_description LIKE '%CANNABIS%' THEN T1.secondary_description END) AS REAL) * 100 / COUNT(T1.secondary_description) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN FBI_Code AS T3 ON T3.fbi_code_no = T2.fbi_code_no WHERE T3.title = 'Drug Abuse'", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM crime WHERE fbi_code_no IN (SELECT fbi_code_no FROM fbi_code WHERE title LIKE '%drug abuse%'))) AS cannabis_percentage\nFROM crime\nWHERE fbi_code_no IN (SELECT fbi_code_no FROM fbi_code WHERE title LIKE '%cannabis%');"}
{"sample_id": 8655, "db_id": "chicago_crime", "gold_sql": "SELECT COUNT(T2.report_no) FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no INNER JOIN FBI_Code AS T3 ON T3.fbi_code_no = T2.fbi_code_no WHERE T3.title = 'Criminal Sexual Assault' AND T1.commander = 'Adnardo Gutierrez' AND T2.location_description = 'RESIDENCE'", "pred_sql": "SELECT COUNT(*) AS total_cases\nFROM crime c\nJOIN district d ON c.district_no = d.district_no\nJOIN fbi_code f ON c.fbi_code_no = f.fbi_code_no\nWHERE f.title = 'Criminal Sexual Assault' AND d.district_name = 'Adnardo Gutierrez' AND c.location_description LIKE '%residence%';"}
{"sample_id": 8632, "db_id": "chicago_crime", "gold_sql": "SELECT COUNT(T2.report_no) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.domestic = 'TRUE' AND T2.location_description = 'BAR OR TAVERN' ORDER BY T1.Population DESC LIMIT 1", "pred_sql": "SELECT COUNT(*) AS domestic_violence_incidents\nFROM crime\nJOIN ward ON crime.ward_no = ward.ward_no\nWHERE crime.domestic = 'true'\nAND crime.location_description LIKE '%bar%' OR crime.location_description LIKE '%tavern%'\nAND ward.ward_no = (SELECT ward_no FROM ward ORDER BY population DESC LIMIT 1);"}
{"sample_id": 8730, "db_id": "chicago_crime", "gold_sql": "SELECT phone, fax, tty, twitter FROM District WHERE district_name = 'Near West'", "pred_sql": "SELECT district.* FROM district JOIN community_area ON district.district_no = community_area.side WHERE community_area.community_area_name = 'Near West';"}
{"sample_id": 8635, "db_id": "chicago_crime", "gold_sql": "SELECT T3.title FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no GROUP BY T3.title ORDER BY T1.population ASC, T3.fbi_code_no DESC LIMIT 1", "pred_sql": "SELECT f.title, COUNT(*) as crime_count\nFROM crime\nJOIN community_area ON crime.community_area_no = community_area.community_area_no\nJOIN fbi_code f ON crime.fbi_code_no = f.fbi_code_no\nWHERE community_area.population = (SELECT MIN(population) FROM community_area)\nGROUP BY f.title\nORDER BY crime_count DESC\nLIMIT 1;"}
{"sample_id": 8733, "db_id": "chicago_crime", "gold_sql": "SELECT CAST(SUM(CASE WHEN primary_description = 'CRIM SEXUAL ASSAULT' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM IUCR WHERE index_code = 'I'", "pred_sql": "SELECT (COUNT(CASE WHEN c.iucr_no IN (SELECT iucr_no FROM iucr WHERE primary_description LIKE '%Sexual Assault%') THEN 1 END) * 100.0 / COUNT(*)) AS percentage_severe_cases\nFROM crime c\nWHERE c.fbi_code_no IN (SELECT fbi_code_no FROM fbi_code WHERE crime_against = 'Persons') AND c.iucr_no IN (SELECT iucr_no FROM iucr WHERE index_code = 'I');"}
{"sample_id": 8598, "db_id": "chicago_crime", "gold_sql": "SELECT COUNT(*) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T2.district_name = 'Central' AND T1.arrest = 'FALSE'", "pred_sql": "SELECT case_number FROM crime INNER JOIN community_area ON crime.community_area_no = community_area.community_area_no WHERE arrest = 'false' AND community_area_name = 'Central Chicago';"}
{"sample_id": 8683, "db_id": "chicago_crime", "gold_sql": "SELECT CAST(COUNT(T2.report_no) AS REAL) / COUNT(DISTINCT T1.district_name) FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no INNER JOIN IUCR AS T3 ON T3.iucr_no = T2.iucr_no WHERE T3.secondary_description = 'RECKLESS HOMICIDE'", "pred_sql": "SELECT AVG(reckless_homicides) AS average_reckless_homicides FROM (SELECT COUNT(*) AS reckless_homicides FROM crime WHERE iucr_no = 'XXXX' GROUP BY district_no) AS district_homicides;"}
{"sample_id": 8740, "db_id": "chicago_crime", "gold_sql": "SELECT T1.primary_description FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.case_number = 'JB106010'", "pred_sql": "SELECT iucr.primary_description FROM crime JOIN iucr ON crime.iucr_no = iucr.iucr_no WHERE crime.case_number = 'JB106010';"}
{"sample_id": 8724, "db_id": "chicago_crime", "gold_sql": "SELECT T3.community_area_name FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T3.side = 'South' AND T1.description = 'The unlawful taking, carrying, leading, or riding away of property FROM the possession or constructive possession of another person.' GROUP BY T3.community_area_name ORDER BY COUNT(T1.fbi_code_no) DESC LIMIT 1", "pred_sql": "SELECT ca.community_area_name, COUNT(c.report_no) AS incident_count\nFROM community_area ca\nJOIN crime c ON ca.community_area_no = c.community_area_no\nJOIN fbi_code f ON c.fbi_code_no = f.fbi_code_no\nWHERE ca.side = 'South' AND f.title LIKE '%unlawful taking, carrying, leading, or riding away of property%'\nGROUP BY ca.community_area_name\nORDER BY incident_count DESC\nLIMIT 1;"}
{"sample_id": 8725, "db_id": "chicago_crime", "gold_sql": "SELECT SUM(CASE WHEN T3.community_area_name = 'Englewood' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T1.crime_against = 'Society'", "pred_sql": "SELECT COUNT(*) AS crime_count FROM crime c JOIN fbi_code f ON c.fbi_code_no = f.fbi_code_no JOIN community_area ca ON c.community_area_no = ca.community_area_no WHERE f.crime_against = 'Society' AND ca.community_area_name = 'Englewood';"}
{"sample_id": 8590, "db_id": "chicago_crime", "gold_sql": "SELECT email FROM District WHERE district_name = 'Central'", "pred_sql": "SELECT email FROM district WHERE district_name = 'Central Chicago';"}
{"sample_id": 8654, "db_id": "chicago_crime", "gold_sql": "SELECT T2.date, T2.latitude, T2.longitude FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no WHERE T1.primary_description = 'DECEPTIVE PRACTICE' AND T1.secondary_description = 'UNLAWFUL USE OF RECORDED SOUND'", "pred_sql": "SELECT date, block FROM crime WHERE iucr_no IN (SELECT iucr_no FROM iucr WHERE primary_description = 'Deceptive Practice') AND fbi_code_no IN (SELECT fbi_code_no FROM fbi_code WHERE description LIKE '%unlawful use of recorded sound%');"}
{"sample_id": 8601, "db_id": "chicago_crime", "gold_sql": "SELECT T1.community_area_name FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.community_area_name IN ('Woodlawn', 'Lincoln Square') AND T2.date LIKE '%1/2018%' GROUP BY T1.community_area_name ORDER BY COUNT(T1.community_area_name) DESC LIMIT 1", "pred_sql": "SELECT community_area.community_area_name, COUNT(crime.report_no) AS crime_count\nFROM crime\nJOIN community_area ON crime.community_area_no = community_area.community_area_no\nWHERE crime.date BETWEEN '2018-01-01' AND '2018-01-31'\nAND community_area.community_area_name IN ('Woodlawn', 'Lincoln Square')\nGROUP BY community_area.community_area_name\nORDER BY crime_count DESC;"}
{"sample_id": 8658, "db_id": "chicago_crime", "gold_sql": "SELECT COUNT(*) FROM Ward WHERE alderman_first_name = 'James'", "pred_sql": "SELECT COUNT(*) AS alderman_count FROM ward WHERE alderman_first_name = 'James';"}
{"sample_id": 8755, "db_id": "chicago_crime", "gold_sql": "SELECT alderman_first_name, alderman_last_name, alderman_name_suffix FROM Ward WHERE ward_no = 21", "pred_sql": "SELECT alderman_first_name || ' ' || alderman_last_name AS full_name FROM ward WHERE ward_no = 21;"}
{"sample_id": 8737, "db_id": "chicago_crime", "gold_sql": "SELECT SUM(CASE WHEN T2.title = 'Weapons Violation' THEN 1 ELSE 0 END) FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no", "pred_sql": "SELECT COUNT(*) AS total_cases FROM crime INNER JOIN fbi_code ON crime.fbi_code_no = fbi_code.fbi_code_no WHERE fbi_code.title = 'Weapons Violation';"}
{"sample_id": 8634, "db_id": "chicago_crime", "gold_sql": "SELECT SUM(CASE WHEN T2.arrest = 'TRUE' THEN 1 ELSE 0 END) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T1.alderman_first_name = 'Walter' AND T1.alderman_last_name = 'Burnett' AND alderman_name_suffix = 'Jr.' AND T2.domestic = 'TRUE'", "pred_sql": "SELECT COUNT(*) AS total_arrests FROM crime c JOIN ward w ON c.ward_no = w.ward_no WHERE c.domestic = 'true' AND w.alderman_first_name = 'Walter' AND w.alderman_last_name = 'Burnett' AND w.alderman_name_suffix = 'Jr.';"}
{"sample_id": 8630, "db_id": "chicago_crime", "gold_sql": "SELECT T2.latitude, T2.longitude FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no WHERE T1.community_area_name = 'Rogers Park' AND T3.title = 'Robbery' AND T3.fbi_code_no = 3", "pred_sql": "SELECT latitude, longitude FROM crime JOIN community_area ON crime.community_area_no = community_area.community_area_no JOIN iucr ON crime.iucr_no = iucr.iucr_no WHERE iucr.primary_description = 'Robbery' AND community_area.community_area_name = 'Rogers Park';"}
{"sample_id": 8718, "db_id": "chicago_crime", "gold_sql": "SELECT T1.district_name FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T1.district_name IN ('Deering', 'Near West') AND T2.location_description = 'LIBRARY' GROUP BY T1.district_name ORDER BY COUNT(T2.district_no) DESC LIMIT 1", "pred_sql": "SELECT d.district_name, COUNT(c.report_no) AS crime_count\nFROM district d\nJOIN crime c ON d.district_no = c.district_no\nWHERE d.district_name IN ('Deering', 'Near West')\nAND c.location_description LIKE '%library%'\nGROUP BY d.district_name\nORDER BY crime_count DESC\nLIMIT 1;"}
{"sample_id": 8697, "db_id": "chicago_crime", "gold_sql": "SELECT SUM(CASE WHEN T3.district_name = 'Calumet' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T1.primary_description = 'WEAPONS VIOLATION'", "pred_sql": "SELECT COUNT(*) AS weapons_violation_count FROM crime INNER JOIN district ON crime.district_no = district.district_no INNER JOIN fbi_code ON crime.fbi_code_no = fbi_code.fbi_code_no WHERE district.district_name = 'Calumet' AND fbi_code.title = 'Weapons Violation';"}
{"sample_id": 8714, "db_id": "chicago_crime", "gold_sql": "SELECT T1.community_area_name FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no ORDER BY T2.community_area_no DESC LIMIT 1", "pred_sql": "SELECT community_area.community_area_name, COUNT(neighborhood.neighborhood_name) AS neighborhood_count \nFROM community_area \nJOIN neighborhood ON community_area.community_area_no = neighborhood.community_area_no \nGROUP BY community_area.community_area_name \nORDER BY neighborhood_count DESC \nLIMIT 1;"}
{"sample_id": 8623, "db_id": "chicago_crime", "gold_sql": "SELECT SUM(CASE WHEN location_description = 'ABANDONED BUILDING' THEN 1 ELSE 0 END) FROM Crime WHERE date LIKE '%2018%' AND domestic = 'TRUE'", "pred_sql": "SELECT COUNT(*) AS incident_count FROM crime WHERE domestic = 'true' AND location_description LIKE '%abandoned building%' AND date LIKE '2018%';"}
{"sample_id": 8735, "db_id": "chicago_crime", "gold_sql": "SELECT SUM(CASE WHEN T2.community_area_name = 'Forest Glen' THEN 1 ELSE 0 END) FROM Neighborhood AS T1 INNER JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no", "pred_sql": "SELECT COUNT(*) AS neighborhood_count FROM neighborhood WHERE community_area_no = (SELECT community_area_no FROM community_area WHERE community_area_name = 'Forest Glen');"}
{"sample_id": 8769, "db_id": "chicago_crime", "gold_sql": "SELECT T1.commander FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T1.commander IN ('Robert A. Rubio', 'Glenn White') AND SUBSTR(T2.date, 1, 1) = '1' AND SUBSTR(T2.date, 5, 4) = '2018' GROUP BY T1.commander", "pred_sql": "SELECT d.commander, COUNT(c.case_number) AS incident_count\nFROM crime c\nJOIN district d ON c.district_no = d.district_no\nWHERE d.commander IN ('Robert A. Rubio', 'Glenn White')\nAND c.date BETWEEN '2018-01-01' AND '2018-01-31'\nGROUP BY d.commander\nORDER BY incident_count DESC;"}
{"sample_id": 8736, "db_id": "chicago_crime", "gold_sql": "SELECT SUM(T2.population) AS sum FROM Neighborhood AS T1 INNER JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.neighborhood_name = 'Avondale Gardens' OR T1.neighborhood_name = 'Irving Park' OR T1.neighborhood_name = 'Kilbourn Park' OR T1.neighborhood_name = 'Merchant Park' OR T1.neighborhood_name = 'Old Irving Park' OR T1.neighborhood_name = 'The Villa'", "pred_sql": "SELECT SUM(c.population) AS total_population \nFROM community_area AS c \nJOIN neighborhood AS n ON c.community_area_no = n.community_area_no \nWHERE n.neighborhood_name IN ('Avondale Gardens', 'Irving Park', 'Kilbourn Park', 'Merchant Park', 'Old Irving Park', 'The Villa');"}
{"sample_id": 8602, "db_id": "chicago_crime", "gold_sql": "SELECT T1.fax FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.date LIKE '%1/2018%' GROUP BY T2.district_no ORDER BY COUNT(case_number) DESC LIMIT 1", "pred_sql": "SELECT d.fax FROM district d JOIN crime c ON d.district_no = c.district_no WHERE c.date BETWEEN '2018-01-01' AND '2018-01-31' GROUP BY d.district_no ORDER BY COUNT(c.report_no) DESC LIMIT 1;"}
{"sample_id": 8747, "db_id": "chicago_crime", "gold_sql": "SELECT fbi_code_no FROM FBI_Code WHERE description = 'The killing of one human being by another.'", "pred_sql": "SELECT fbi_code_no FROM fbi_code WHERE description LIKE '%The killing of one human being by another%';"}
{"sample_id": 8744, "db_id": "chicago_crime", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.title = 'Drug Abuse' AND T1.location_description = 'STREET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.fbi_code_no) FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM crime)) AS percentage_of_drug_abuse_cases\nFROM crime\nJOIN fbi_code ON crime.fbi_code_no = fbi_code.fbi_code_no\nWHERE fbi_code.title = 'drug abuse' AND crime.location_description LIKE '%street%';"}
{"sample_id": 8691, "db_id": "chicago_crime", "gold_sql": "SELECT COUNT(CASE WHEN T3.title = 'Disorderly Conduct' THEN T2.report_no END) * 100.0 / COUNT(T2.report_no) AS per FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no INNER JOIN FBI_Code AS T3 ON T3.fbi_code_no = T2.fbi_code_no WHERE T1.district_name = 'Harrison'", "pred_sql": "SELECT (COUNT(CASE WHEN iucr_no = (SELECT iucr_no FROM iucr WHERE primary_description = 'Disorderly Conduct') THEN 1 END) * 100.0 / COUNT(*)) AS disorderly_conduct_percentage\nFROM crime\nJOIN neighborhood ON crime.community_area_no = neighborhood.community_area_no\nWHERE neighborhood.neighborhood_name = 'Harrison';"}
{"sample_id": 8597, "db_id": "chicago_crime", "gold_sql": "SELECT COUNT(*) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T2.district_name = 'Central' AND T1.domestic = 'TRUE'", "pred_sql": "SELECT COUNT(*) AS domestic_violence_cases FROM crime WHERE community_area_no IN (SELECT community_area_no FROM community_area WHERE community_area_name = 'Central Chicago') AND domestic = 'true';"}
{"sample_id": 8606, "db_id": "chicago_crime", "gold_sql": "SELECT commander FROM District WHERE district_name = 'Morgan Park'", "pred_sql": "SELECT commander FROM district WHERE district_name = 'Morgan Park';"}
{"sample_id": 8127, "db_id": "university", "gold_sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'Johns Hopkins University'", "pred_sql": "SELECT country.country_name FROM university JOIN country ON university.country_id = country.id WHERE university.university_name = 'Johns Hopkins University';"}
{"sample_id": 8032, "db_id": "university", "gold_sql": "SELECT university_id FROM university_year WHERE year = 2012 ORDER BY pct_female_students DESC LIMIT 1", "pred_sql": "SELECT university.id FROM university JOIN university_year ON university.id = university_year.university_id WHERE university_year.year = 2012 ORDER BY university_year.pct_female_students DESC LIMIT 1;"}
{"sample_id": 8090, "db_id": "university", "gold_sql": "SELECT id FROM university WHERE university_name = 'University of Orl\u00e9ans'", "pred_sql": "SELECT id FROM university WHERE university_name = 'University of Orl\u00e9ans';"}
{"sample_id": 8100, "db_id": "university", "gold_sql": "SELECT T1.system_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T2.criteria_name = 'Total Shanghai'", "pred_sql": "SELECT ranking_system.system_name FROM ranking_criteria JOIN ranking_system ON ranking_criteria.ranking_system_id = ranking_system.id WHERE ranking_criteria.criteria_name = 'Total Shanghai';"}
{"sample_id": 8096, "db_id": "university", "gold_sql": "SELECT COUNT(*) FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id WHERE T1.university_name = 'University of Michigan' AND T2.year = 2011", "pred_sql": "SELECT num_students FROM university_year INNER JOIN university ON university_year.university_id = university.id WHERE university.university_name = 'University of Michigan' AND university_year.year = 2011;"}
{"sample_id": 8075, "db_id": "university", "gold_sql": "SELECT T1.university_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Australia'", "pred_sql": "SELECT university_name FROM university WHERE country_id = (SELECT id FROM country WHERE country_name = 'Australia');"}
{"sample_id": 8042, "db_id": "university", "gold_sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T1.num_students > 100000", "pred_sql": "SELECT university.university_name FROM university JOIN university_year ON university.id = university_year.university_id WHERE university_year.num_students > 100000 AND university_year.year = 2011;"}
{"sample_id": 8081, "db_id": "university", "gold_sql": "SELECT T1.criteria_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'Harvard University' AND T2.year = 2011", "pred_sql": "SELECT rc.criteria_name \nFROM university u \nJOIN university_ranking_year ur ON u.id = ur.university_id \nJOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id \nWHERE u.university_name = 'Harvard University' AND ur.year = '2011';"}
{"sample_id": 8021, "db_id": "university", "gold_sql": "SELECT T2.country_id FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2014 ORDER BY T1.num_students DESC LIMIT 1", "pred_sql": "SELECT c.country_name FROM university u JOIN university_year uy ON u.id = uy.university_id JOIN country c ON u.country_id = c.id WHERE uy.year = 2014 ORDER BY uy.num_students DESC LIMIT 1;"}
{"sample_id": 8040, "db_id": "university", "gold_sql": "SELECT T1.university_name FROM university AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'Argentina' GROUP BY T1.university_name ORDER BY SUM(T2.score) DESC LIMIT 1", "pred_sql": "SELECT university_name FROM university WHERE country_id = (SELECT id FROM country WHERE country_name = 'Argentina') ORDER BY university_name LIMIT 1;"}
{"sample_id": 8034, "db_id": "university", "gold_sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 ORDER BY T1.num_students DESC LIMIT 1", "pred_sql": "SELECT university.university_name FROM university JOIN university_year ON university.id = university_year.university_id WHERE university_year.year = 2011 ORDER BY university_year.num_students DESC LIMIT 1;"}
{"sample_id": 8026, "db_id": "university", "gold_sql": "SELECT SUM(CAST(T1.num_students * T1.pct_international_students AS REAL) / 100) / COUNT(*) * 100 FROM university_year AS T1 INNER JOIN university_ranking_year AS T2 ON T1.university_id = T2.university_id WHERE T2.score < 80 AND T1.year = 2015", "pred_sql": "SELECT AVG(pct_international_students) AS average_pct_international_students\nFROM university_year\nWHERE university_id IN (\n    SELECT university_id\n    FROM university_ranking_year\n    WHERE year = '2015' AND score < '80'\n)"}
{"sample_id": 8125, "db_id": "university", "gold_sql": "SELECT DISTINCT T3.country_name FROM university AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T2.score < 70 AND T2.year = 2016", "pred_sql": "SELECT DISTINCT c.country_name \nFROM country c \nJOIN university u ON c.id = u.country_id \nJOIN university_ranking_year ur ON u.id = ur.university_id \nJOIN university_year uy ON u.id = uy.university_id \nWHERE ur.score <= '70' AND ur.year = '2016';"}
{"sample_id": 8054, "db_id": "university", "gold_sql": "SELECT T1.university_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Denmark'", "pred_sql": "SELECT university.university_name FROM university JOIN country ON university.country_id = country.id WHERE country.country_name = 'Denmark';"}
{"sample_id": 8124, "db_id": "university", "gold_sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id ORDER BY T1.num_students * T1.pct_female_students / 100 - T1.num_students DESC LIMIT 1", "pred_sql": "SELECT university.university_name FROM university_year JOIN university ON university_year.university_id = university.id ORDER BY university_year.num_students * (1 - university_year.pct_female_students / 100) DESC LIMIT 1;"}
{"sample_id": 8085, "db_id": "university", "gold_sql": "SELECT CAST(T1.num_students * T1.pct_female_students AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T2.university_name = 'Stanford University'", "pred_sql": "SELECT uy.pct_female_students * uy.num_students AS female_students\nFROM university_year uy\nJOIN university u ON uy.university_id = u.id\nWHERE u.university_name = 'Stanford University' AND uy.year = 2011;"}
{"sample_id": 8045, "db_id": "university", "gold_sql": "SELECT DISTINCT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id GROUP BY T2.university_name ORDER BY SUM(T1.num_students * T1.pct_international_students / 100) DESC LIMIT 3", "pred_sql": "SELECT u.university_name, u.country_id, uy.pct_international_students FROM university u JOIN university_year uy ON u.id = uy.university_id ORDER BY uy.pct_international_students DESC LIMIT 3;"}
{"sample_id": 8097, "db_id": "university", "gold_sql": "SELECT T2.score FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'Chosun University' AND T1.criteria_name = 'Influence Rank' AND T2.year = 2015", "pred_sql": "SELECT ury.score \nFROM university_ranking_year ury \nJOIN university u ON ury.university_id = u.id \nJOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id \nWHERE u.university_name = 'Chosun University' \nAND rc.criteria_name = 'Influence Rank' \nAND ury.year = '2015';"}
{"sample_id": 8113, "db_id": "university", "gold_sql": "SELECT SUM(CAST(num_students * pct_female_students AS REAL) / 100) FROM university_year WHERE year BETWEEN 2011 AND 2013 AND university_id = 40", "pred_sql": "SELECT SUM(pct_female_students * num_students / 100) AS total_female_students\nFROM university_year\nWHERE university_id = 40 AND year BETWEEN 2011 AND 2013;"}
{"sample_id": 8088, "db_id": "university", "gold_sql": "SELECT country_id FROM university WHERE university_name = 'University of Veterinary Medicine Vienna'", "pred_sql": "SELECT country.id FROM university JOIN country ON university.country_id = country.id WHERE university.university_name = 'University of Veterinary Medicine Vienna';"}
{"sample_id": 8010, "db_id": "university", "gold_sql": "SELECT pct_international_students * num_students, num_students FROM university_year WHERE year = 2013 AND university_id = 20", "pred_sql": "SELECT num_students, pct_international_students * num_students / 100 AS num_international_students \nFROM university_year \nWHERE university_id = 20 AND year = 2013;"}
{"sample_id": 8007, "db_id": "university", "gold_sql": "SELECT university_id FROM university_year ORDER BY student_staff_ratio DESC LIMIT 1", "pred_sql": "SELECT university.id FROM university JOIN university_year ON university.id = university_year.university_id ORDER BY university_year.student_staff_ratio DESC LIMIT 1;"}
{"sample_id": 8115, "db_id": "university", "gold_sql": "SELECT student_staff_ratio FROM university_year WHERE university_id = 35", "pred_sql": "SELECT student_staff_ratio FROM university_year WHERE university_id = 35;"}
{"sample_id": 8063, "db_id": "university", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.score > 80 THEN 1 ELSE 0 END) AS REAL) / COUNT(*), ( SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'International' AND T2.year = 2016 AND T2.score > 80 ORDER BY T2.score DESC LIMIT 1 ) AS max FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'International' AND T2.year = 2016", "pred_sql": "SELECT university.university_name, university_ranking_year.score\nFROM university_ranking_year\nJOIN ranking_criteria ON university_ranking_year.ranking_criteria_id = ranking_criteria.id\nJOIN university ON university_ranking_year.university_id = university.id\nWHERE ranking_criteria.criteria_name = 'International' AND university_ranking_year.year = '2016' AND university_ranking_year.score > '80'\nORDER BY university_ranking_year.score DESC\nLIMIT 1;"}
{"sample_id": 8077, "db_id": "university", "gold_sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'Harvard University'", "pred_sql": "SELECT country.country_name FROM university JOIN country ON university.country_id = country.id WHERE university.university_name = 'Harvard University';"}
{"sample_id": 7995, "db_id": "university", "gold_sql": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Publications Rank' AND T2.year = 2014 AND T1.id = 17 ORDER BY T2.score DESC LIMIT 1", "pred_sql": "SELECT u.university_name \nFROM university u \nJOIN university_ranking_year ur ON u.id = ur.university_id \nJOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id \nJOIN ranking_system rs ON rc.ranking_system_id = rs.id \nWHERE ur.year = '2014' AND rc.criteria_name = 'publications' \nORDER BY ur.score DESC \nLIMIT 1;"}
{"sample_id": 8122, "db_id": "university", "gold_sql": "SELECT DISTINCT T2.university_name FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.score < 50", "pred_sql": "SELECT university.university_name FROM university INNER JOIN university_ranking_year ON university.id = university_ranking_year.university_id WHERE university_ranking_year.score < '50';"}
{"sample_id": 8082, "db_id": "university", "gold_sql": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 AND T2.score = 98", "pred_sql": "SELECT u.university_name \nFROM university u \nJOIN university_ranking_year ur ON u.id = ur.university_id \nJOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id \nWHERE ur.year = '2011' AND rc.criteria_name = 'teaching' AND ur.score = '98';"}
{"sample_id": 8055, "db_id": "university", "gold_sql": "SELECT CAST(SUM(T1.num_students) AS REAL) / SUM(T1.student_staff_ratio) FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'University of Auckland' AND T1.year = 2015", "pred_sql": "SELECT (num_students / student_staff_ratio) AS num_staff FROM university_year WHERE university_id = (SELECT id FROM university WHERE university_name = 'University of Auckland') AND year = 2015;"}
{"sample_id": 8069, "db_id": "university", "gold_sql": "SELECT university_id FROM university_year WHERE year = 2011 AND student_staff_ratio > 15", "pred_sql": "SELECT university.id FROM university JOIN university_year ON university.id = university_year.university_id WHERE university_year.student_staff_ratio > 15 AND university_year.year = 2011;"}
{"sample_id": 2792, "db_id": "european_football_1", "gold_sql": "SELECT CASE WHEN COUNT(CASE WHEN T1.HomeTeam = 'Augsburg' THEN 1 ELSE NULL END) - COUNT(CASE WHEN T1.HomeTeam = ' Mainz' THEN 1 ELSE NULL END) > 0 THEN 'Augsburg' ELSE 'Mainz' END FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T1.FTR = 'H'", "pred_sql": "SELECT hometeam, COUNT(*) AS home_victories FROM matchs JOIN divisions ON matchs.div = divisions.division WHERE divisions.name = 'Bundesliga' AND matchs.season = '2021' AND matchs.ftr = 'H' AND (matchs.hometeam = 'Augsburg' OR matchs.hometeam = 'Mainz') GROUP BY hometeam ORDER BY home_victories DESC LIMIT 1;"}
{"sample_id": 2741, "db_id": "european_football_1", "gold_sql": "SELECT CAST(COUNT(CASE WHEN FTR = 'H' THEN 1 ELSE NULL END) / COUNT(HomeTeam) AS REAL) * 100, CAST(COUNT(CASE WHEN FTR = 'A' THEN 1 ELSE NULL END) AS REAL) / COUNT(HomeTeam), CAST(COUNT(CASE WHEN FTR = 'D' THEN 1 ELSE NULL END) AS REAL) / COUNT(HomeTeam) FROM matchs WHERE HomeTeam = 'Cittadella'", "pred_sql": "SELECT\n    (SUM(CASE WHEN ftr = 'H' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS home_win_percentage,\n    (SUM(CASE WHEN ftr = 'A' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS home_loss_percentage,\n    (SUM(CASE WHEN ftr = 'D' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS home_draw_percentage\nFROM matchs\nWHERE hometeam = 'Cittadella';"}
{"sample_id": 2752, "db_id": "european_football_1", "gold_sql": "SELECT ( SELECT MAX(MAX(FTAG), MAX(FTHG)) FROM matchs WHERE season = 2021 ) AS T1, AwayTeam FROM matchs WHERE season = 2021 AND FTHG = T1 OR FTAG = T1", "pred_sql": "SELECT hometeam, fthg, awayteam, ftag FROM matchs WHERE season = '2021' ORDER BY GREATEST(fthg, ftag) DESC LIMIT 1;"}
{"sample_id": 2767, "db_id": "european_football_1", "gold_sql": "SELECT CASE WHEN FTR = 'H' THEN 'East Fife' ELSE 'Dumbarton' END WINNER FROM matchs WHERE Date = '2009-10-10' AND HomeTeam = 'East Fife' AND AwayTeam = 'Dumbarton'", "pred_sql": "SELECT CASE \n    WHEN fthg > ftag THEN hometeam \n    WHEN ftag > fthg THEN awayteam \n    ELSE 'Draw' \nEND AS winner \nFROM matchs \nWHERE date = '2009-10-10' \nAND (hometeam = 'East Fife' AND awayteam = 'Dumbarton' OR hometeam = 'Dumbarton' AND awayteam = 'East Fife';"}
{"sample_id": 2781, "db_id": "european_football_1", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.FTR = 'H' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.FTR) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T2.name = 'Bundesliga'", "pred_sql": "SELECT COUNT(CASE WHEN ftr = 'H' THEN 1 END) * 1.0 / COUNT(*) AS home_win_ratio FROM matchs JOIN divisions ON matchs.div = divisions.division WHERE divisions.name = 'Bundesliga' AND matchs.season = '2021';"}
{"sample_id": 2745, "db_id": "european_football_1", "gold_sql": "SELECT CAST(SUM(CASE WHEN FTAG = 2 THEN 1 ELSE 0 END) / COUNT(FTAG) AS REAL) * 100 FROM matchs WHERE season = 2017", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM matchs WHERE season = '2017')) AS percentage FROM matchs WHERE season = '2017' AND ftag = '2';"}
{"sample_id": 2755, "db_id": "european_football_1", "gold_sql": "SELECT Div FROM matchs WHERE season = 2008 AND FTR = 'D' GROUP BY Div ORDER BY COUNT(FTR) DESC LIMIT 1", "pred_sql": "SELECT d.name, COUNT(m.ftr) AS draft_count \nFROM divisions d \nJOIN matchs m ON d.division = m.div \nWHERE m.season = '2008' AND m.ftr = 'D' \nGROUP BY d.name \nORDER BY draft_count DESC \nLIMIT 1;"}
{"sample_id": 2794, "db_id": "european_football_1", "gold_sql": "SELECT SUM(T1.FTHG) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.season = 2021", "pred_sql": "SELECT SUM(fthg) AS total_home_goals FROM matchs JOIN divisions ON matchs.div = divisions.division WHERE divisions.name = 'Bundesliga' AND matchs.season = '2021';"}
{"sample_id": 2795, "db_id": "european_football_1", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.FTR = 'H' THEN 1 ELSE NULL END) + COUNT(CASE WHEN T1.FTR = 'A' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(t1.FTR) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T1.AwayTeam = 'Club Brugge' OR T1.HomeTeam = 'Club Brugge'", "pred_sql": "SELECT COUNT(CASE WHEN ftr = 'H' THEN 1 END) * 1.0 / COUNT(*) AS winning_rate FROM matchs JOIN divisions ON matchs.div = divisions.division WHERE (hometeam = 'Club Brugge' OR awayteam = 'Club Brugge') AND season = '2021' AND divisions.name = 'Premier League';"}
{"sample_id": 2788, "db_id": "european_football_1", "gold_sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.FTR = 'A' AND T1.season = 2021", "pred_sql": "SELECT COUNT(*) FROM matchs JOIN divisions ON matchs.div = divisions.division WHERE divisions.name = 'Bundesliga' AND matchs.ftr = 'A' AND matchs.season = '2021';"}
{"sample_id": 2793, "db_id": "european_football_1", "gold_sql": "SELECT T1.HomeTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.season = 2021 ORDER BY T1.FTHG DESC LIMIT 1", "pred_sql": "SELECT hometeam, SUM(fthg) AS total_home_goals \nFROM matchs \nJOIN divisions ON matchs.div = divisions.division \nWHERE divisions.name = 'Bundesliga' AND matchs.season = '2021' \nGROUP BY hometeam \nORDER BY total_home_goals DESC \nLIMIT 1;"}
{"sample_id": 1682, "db_id": "restaurant", "gold_sql": "SELECT T1.street_name, T1.street_num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'adelitas taqueria'", "pred_sql": "SELECT street_num, street_name FROM location JOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant WHERE generalinfo.label = 'Adelitas Taqueria';"}
{"sample_id": 1673, "db_id": "restaurant", "gold_sql": "SELECT city FROM geographic WHERE county = 'sonoma county'", "pred_sql": "SELECT DISTINCT city FROM geographic WHERE county = 'Sonoma County';"}
{"sample_id": 1753, "db_id": "restaurant", "gold_sql": "SELECT id_restaurant FROM location WHERE city = 'sunnyvale'", "pred_sql": "SELECT id_restaurant FROM generalinfo WHERE city = 'Sunnyvale';"}
{"sample_id": 1715, "db_id": "restaurant", "gold_sql": "SELECT T1.county, T1.region, T2.label FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.label = 'plearn-thai cuisine'", "pred_sql": "SELECT g.county, g.region FROM generalinfo gi JOIN geographic g ON gi.city = g.city WHERE gi.label = 'Plearn-Thai Cuisine';"}
{"sample_id": 1695, "db_id": "restaurant", "gold_sql": "SELECT T1.id_restaurant FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'marin county'", "pred_sql": "SELECT generalinfo.id_restaurant FROM generalinfo JOIN geographic ON generalinfo.city = geographic.city WHERE geographic.county = 'Marin County';"}
{"sample_id": 1727, "db_id": "restaurant", "gold_sql": "SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.label = 'peking duck restaurant'", "pred_sql": "SELECT location.street_num, location.street_name FROM generalinfo JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE generalinfo.label = 'Peking Duck';"}
{"sample_id": 1744, "db_id": "restaurant", "gold_sql": "SELECT T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'American'", "pred_sql": "SELECT location.street_name FROM generalinfo JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE generalinfo.food_type = 'American';"}
{"sample_id": 1720, "db_id": "restaurant", "gold_sql": "SELECT city FROM geographic WHERE county = 'san mateo county'", "pred_sql": "SELECT DISTINCT city FROM geographic WHERE county = 'San Mateo County';"}
{"sample_id": 1701, "db_id": "restaurant", "gold_sql": "SELECT city FROM geographic WHERE region = 'northern california'", "pred_sql": "SELECT DISTINCT city FROM geographic WHERE region = 'Northern California';"}
{"sample_id": 1784, "db_id": "restaurant", "gold_sql": "SELECT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city GROUP BY T2.county ORDER BY COUNT(T1.label) DESC LIMIT 1", "pred_sql": "SELECT g.county\nFROM location l\nJOIN generalinfo g ON l.id_restaurant = g.id_restaurant\nGROUP BY g.label\nORDER BY COUNT(l.id_restaurant) DESC\nLIMIT 1;"}
{"sample_id": 1675, "db_id": "restaurant", "gold_sql": "SELECT city FROM geographic WHERE region = 'northern california'", "pred_sql": "SELECT DISTINCT city FROM geographic WHERE region = 'Northern California';"}
{"sample_id": 1702, "db_id": "restaurant", "gold_sql": "SELECT label FROM generalinfo WHERE food_type = '24 hour diner'", "pred_sql": "SELECT label FROM generalinfo WHERE food_type = 'diner' AND review = 24;"}
{"sample_id": 1680, "db_id": "restaurant", "gold_sql": "SELECT DISTINCT T2.region FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.food_type != 'african'", "pred_sql": "SELECT DISTINCT g.region FROM geographic g LEFT JOIN generalinfo gi ON g.city = gi.city WHERE gi.food_type != 'African' OR gi.food_type IS NULL;"}
{"sample_id": 1777, "db_id": "restaurant", "gold_sql": "SELECT COUNT(T1.city) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'indian' AND T1.region = 'los angeles area'", "pred_sql": "SELECT COUNT(*) AS number_of_restaurants FROM generalinfo WHERE food_type = 'Indian' AND city IN (SELECT city FROM geographic WHERE county = 'Los Angeles');"}
{"sample_id": 1676, "db_id": "restaurant", "gold_sql": "SELECT id_restaurant FROM location WHERE city = 'oakland' AND street_name = '11th street'", "pred_sql": "SELECT generalinfo.id_restaurant FROM generalinfo JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE location.street_name = '11th Street' AND location.city = 'Oakland';"}
{"sample_id": 1758, "db_id": "restaurant", "gold_sql": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.food_type = 'bakery' AND T2.city = 'palo alto' AND T1.street_name = 'university ave.'", "pred_sql": "SELECT COUNT(*) AS total_bakeries FROM generalinfo g JOIN location l ON g.id_restaurant = l.id_restaurant WHERE g.food_type = 'bakery' AND l.street_name = 'University Avenue' AND l.city = 'Palo Alto';"}
{"sample_id": 1721, "db_id": "restaurant", "gold_sql": "SELECT COUNT(id_restaurant) AS cnt FROM generalinfo WHERE review > 4", "pred_sql": "SELECT COUNT(*) AS restaurant_count FROM generalinfo WHERE review > 4.0;"}
{"sample_id": 1705, "db_id": "restaurant", "gold_sql": "SELECT street_name FROM location WHERE city = 'Clayton'", "pred_sql": "SELECT DISTINCT street_name FROM location WHERE city = 'Clayton City';"}
{"sample_id": 1745, "db_id": "restaurant", "gold_sql": "SELECT T1.label FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'Santa Cruz county'", "pred_sql": "SELECT label FROM generalinfo WHERE city = 'Santa Cruz';"}
{"sample_id": 1698, "db_id": "restaurant", "gold_sql": "SELECT CAST(SUM(IIF(T2.food_type = 'mexican', 1, 0)) AS REAL) * 100 / COUNT(T2.id_restaurant) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.county = 'monterey county'", "pred_sql": "SELECT (COUNT(CASE WHEN gi.food_type = 'Mexican' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_mexican_restaurants\nFROM generalinfo gi\nJOIN geographic g ON gi.city = g.city\nWHERE g.county = 'Monterey County';"}
{"sample_id": 1716, "db_id": "restaurant", "gold_sql": "SELECT T2.label FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'lake tahoe' AND T1.county = 'el dorado county'", "pred_sql": "SELECT gi.label FROM generalinfo gi JOIN geographic g ON gi.city = g.city WHERE g.county = 'El Dorado County' AND g.region = 'Lake Tahoe';"}
{"sample_id": 1773, "db_id": "restaurant", "gold_sql": "SELECT county FROM geographic WHERE region = 'northern california' GROUP BY county ORDER BY COUNT(city) DESC LIMIT 1", "pred_sql": "SELECT county, COUNT(city) AS city_count \nFROM geographic \nWHERE region = 'Northern California' \nGROUP BY county \nORDER BY city_count DESC \nLIMIT 1;"}
{"sample_id": 1683, "db_id": "restaurant", "gold_sql": "SELECT T2.food_type FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant INNER JOIN geographic AS T3 ON T2.city = T3.city WHERE T3.County = 'san mateo county' AND T1.street_name = 'alpine rd' AND T1.street_num = 3140", "pred_sql": "SELECT food_type FROM generalinfo JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE street_num = '3140' AND street_name = 'Alpine Road' AND city IN (SELECT city FROM geographic WHERE county = 'San Mateo County');"}
{"sample_id": 10535, "db_id": "european_football_2", "gold_sql": "SELECT t2.chanceCreationShootingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hannover 96' AND t2.\"date\" LIKE '2015-09-10%'", "pred_sql": "SELECT defenceaggressionclass FROM team_attributes WHERE team_fifa_api_id = (SELECT team_fifa_api_id FROM team WHERE team_long_name = 'Hannover 96') AND date = '2015-09-10';"}
{"sample_id": 10567, "db_id": "european_football_2", "gold_sql": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC LIMIT 4", "pred_sql": "SELECT league.name, COUNT(match.id) AS game_count \nFROM match \nJOIN league ON match.league_id = league.id \nWHERE match.season = '2015-2016' \nGROUP BY league.name \nORDER BY game_count DESC \nLIMIT 4;"}
{"sample_id": 10491, "db_id": "european_football_2", "gold_sql": "SELECT player_name FROM player ORDER BY height ASC LIMIT 1", "pred_sql": "SELECT player_name, height FROM player ORDER BY height ASC LIMIT 1;"}
{"sample_id": 10443, "db_id": "european_football_2", "gold_sql": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1", "pred_sql": "SELECT player.player_name, MAX(player.height) AS tallest_height\nFROM player;"}
{"sample_id": 10509, "db_id": "european_football_2", "gold_sql": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 AND t2.volleys > 70", "pred_sql": "SELECT COUNT(*) AS player_count FROM player_attributes WHERE player_api_id IN (SELECT player_api_id FROM player WHERE height > 180) AND volleys > 70;"}
{"sample_id": 10467, "db_id": "european_football_2", "gold_sql": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'", "pred_sql": "SELECT pa.attacking_work_rate FROM player_attributes pa JOIN player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Franco Zennaro';"}
{"sample_id": 10516, "db_id": "european_football_2", "gold_sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id", "pred_sql": "SELECT (a.overall_rating - p.overall_rating) / p.overall_rating * 100 AS percentage_difference\nFROM player_attributes a\nJOIN player pa ON a.player_api_id = pa.player_api_id\nJOIN player pb ON p.player_api_id = pb.player_api_id\nWHERE pa.player_name = 'Ariel Borysiuk' AND pb.player_name = 'Paulin Puel';"}
{"sample_id": 10529, "db_id": "european_football_2", "gold_sql": "SELECT \"date\" FROM ( SELECT t2.crossing, t2.\"date\" FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1", "pred_sql": "SELECT date FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Kevin Constant') AND crossing = (SELECT MAX(crossing) FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Kevin Constant')) ORDER BY date ASC LIMIT 1;"}
{"sample_id": 10503, "db_id": "european_football_2", "gold_sql": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Belgium Jupiler League'", "pred_sql": "SELECT country.name FROM league JOIN country ON league.country_id = country.id WHERE league.name = 'Belgium Jupiler League';"}
{"sample_id": 10486, "db_id": "european_football_2", "gold_sql": "SELECT DISTINCT t1.id, t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = 'left'", "pred_sql": "SELECT * FROM player_attributes WHERE preferred_foot = 'left';"}
{"sample_id": 10510, "db_id": "european_football_2", "gold_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.volleys > 70 AND t2.dribbling > 70", "pred_sql": "SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.volleys > 70 AND player_attributes.dribbling > 70;"}
{"sample_id": 10459, "db_id": "european_football_2", "gold_sql": "SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM player)) AS left_foot_percentage\nFROM player_attributes pa\nJOIN player p ON pa.player_api_id = p.player_api_id\nWHERE pa.preferred_foot = 'left' AND p.birthday BETWEEN '1987-01-01' AND '1992-12-31';"}
{"sample_id": 10471, "db_id": "european_football_2", "gold_sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' AND t1.name = 'Scotland Premier League'", "pred_sql": "SELECT COUNT(*) AS match_count FROM match WHERE season = '2015/2016' AND league_id = (SELECT id FROM league WHERE name = 'Scotland Premier League');"}
{"sample_id": 10557, "db_id": "european_football_2", "gold_sql": "SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential DESC LIMIT 5", "pred_sql": "SELECT player_api_id FROM player_attributes WHERE potential = (SELECT MIN(potential) FROM player_attributes) AND preferred_foot = 'right' LIMIT 5;"}
{"sample_id": 10470, "db_id": "european_football_2", "gold_sql": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND strftime('%Y', t2.date) = '2011'", "pred_sql": "SELECT pa.overall_rating \nFROM player_attributes pa \nJOIN player p ON pa.player_api_id = p.player_api_id \nWHERE p.player_name = 'Gabriel Tamas' AND strftime('%Y', pa.date) = '2011';"}
{"sample_id": 10487, "db_id": "european_football_2", "gold_sql": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Fast'", "pred_sql": "SELECT team.team_long_name FROM team_attributes JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Fast';"}
{"sample_id": 10564, "db_id": "european_football_2", "gold_sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Italy Serie A' AND t2.season = '2015/2016'", "pred_sql": "SELECT COUNT(*) AS total_games FROM match WHERE league_id = (SELECT id FROM league WHERE name = 'Serie A' AND country_id = (SELECT id FROM country WHERE name = 'Italy')) AND season = '2015/2016';"}
{"sample_id": 10466, "db_id": "european_football_2", "gold_sql": "SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 7) = '1970-10'", "pred_sql": "SELECT player_name FROM player WHERE strftime('%Y', birthday) = '1970' AND strftime('%m', birthday) = '10';"}
{"sample_id": 10525, "db_id": "european_football_2", "gold_sql": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.\"date\", 1, 10) = '2016-02-04' AND t1.player_name = 'Aaron Mooy'", "pred_sql": "SELECT overall_rating FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Aaron Mooy' AND player_attributes.date = '2016-02-04';"}
{"sample_id": 10533, "db_id": "european_football_2", "gold_sql": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.\"date\", 1, 10) = '2013-09-20'", "pred_sql": "SELECT ta.chancecreationpassingclass \nFROM team_attributes ta \nJOIN team t ON ta.team_api_id = t.team_api_id \nWHERE t.team_long_name = 'PEC Zwolle' AND ta.date = '2013-09-20';"}
{"sample_id": 10463, "db_id": "european_football_2", "gold_sql": "SELECT t3.team_long_name FROM Team AS t3 INNER JOIN Team_Attributes AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.buildUpPlayDribblingClass = 'Normal' AND t4.chanceCreationPassing < ( SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.\"date\", 1, 4) = '2014') ORDER BY t4.chanceCreationPassing DESC", "pred_sql": "SELECT team.team_long_name \nFROM team_attributes \nJOIN team ON team_attributes.team_api_id = team.team_api_id \nWHERE team_attributes.buildupplaydribblingclass = 'Normal' \nAND team_attributes.chancecreationpassing < (SELECT AVG(chancecreationpassing) FROM team_attributes WHERE date LIKE '2014%') \nORDER BY team_attributes.chancecreationpassing DESC;"}
{"sample_id": 10568, "db_id": "european_football_2", "gold_sql": "SELECT t2.team_long_name FROM Match AS t1 INNER JOIN Team AS t2 ON t1.away_team_api_id = t2.team_api_id ORDER BY t1.away_team_goal DESC LIMIT 1", "pred_sql": "SELECT team.team_long_name\nFROM match\nJOIN team ON match.away_team_api_id = team.team_api_id\nWHERE match.away_team_goal = (SELECT MAX(away_team_goal) FROM match)"}
{"sample_id": 10555, "db_id": "european_football_2", "gold_sql": "SELECT COUNT(id) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%'", "pred_sql": "SELECT COUNT(*) AS player_count FROM player WHERE player_name LIKE 'Aaron%' AND birthday > '1990-12-31';"}
{"sample_id": 10518, "db_id": "european_football_2", "gold_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Pietro Marino'", "pred_sql": "SELECT AVG(pa.overall_rating) AS average_overall_rating \nFROM player_attributes pa \nJOIN player p ON pa.player_api_id = p.player_api_id \nWHERE p.player_name = 'Pietro Marino';"}
{"sample_id": 10485, "db_id": "european_football_2", "gold_sql": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'", "pred_sql": "SELECT pa.potential FROM player_attributes pa JOIN player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Aaron Doran';"}
{"sample_id": 3690, "db_id": "college_completion", "gold_sql": "SELECT COUNT(*) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.year = 2013 AND T2.gender = 'F' AND T2.race = 'X' AND T1.chronname = 'Oakwood University'", "pred_sql": "SELECT SUM(grad_100) AS female_graduates FROM institution_grads ig JOIN institution_details id ON ig.unitid = id.unitid WHERE id.chronname = 'Oakwood University' AND ig.year = 2013 AND ig.gender = 'F' AND ig.cohort = '4y bach';"}
{"sample_id": 3700, "db_id": "college_completion", "gold_sql": "SELECT SUM(T2.grad_100) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Central Alabama Community College' AND T2.year = 2011 AND T2.gender = 'M' AND T2.race = 'H'", "pred_sql": "SELECT SUM(ig.grad_100) AS male_hispanic_grads_2011 FROM institution_grads ig JOIN institution_details id ON ig.unitid = id.unitid WHERE id.chronname = 'Central Alabama Community College' AND ig.year = 2011 AND ig.gender = 'M' AND ig.race = 'H' AND ig.grad_cohort = '4y bach';"}
{"sample_id": 3724, "db_id": "college_completion", "gold_sql": "SELECT SUM(T2.grad_100) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Pennsylvania State University-Altoona' AND T2.gender = 'F' AND T2.race = 'H'", "pred_sql": "SELECT ig.grad_100 \nFROM institution_grads ig \nJOIN institution_details id ON ig.unitid = id.unitid \nWHERE id.chronname = 'Pennsylvania State University-Altoona' \nAND ig.gender = 'F' \nAND ig.race = 'H' \nAND ig.grad_100_rate IS NOT NULL;"}
{"sample_id": 3682, "db_id": "college_completion", "gold_sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2007 AND T2.race = 'Ai' GROUP BY T1.chronname ORDER BY COUNT(T1.chronname) DESC LIMIT 1", "pred_sql": "SELECT id.chronname, id.city, id.state, id.level, id.control \nFROM institution_details id \nJOIN institution_grads ig ON id.unitid = ig.unitid \nJOIN state_sector_grads ssg ON id.state = ssg.state \nWHERE ig.race = 'Ai' AND ig.year = 2007 \nORDER BY ig.grad_cohort DESC \nLIMIT 1;"}
{"sample_id": 3692, "db_id": "college_completion", "gold_sql": "SELECT SUM(CASE WHEN T2.year = 2011 THEN T2.grad_cohort ELSE 0 END), SUM(CASE WHEN T2.year = 2012 THEN T2.grad_cohort ELSE 0 END), SUM(CASE WHEN T2.year = 2013 THEN T2.grad_cohort ELSE 0 END) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.gender = 'B' AND T2.race = 'X' AND T1.chronname = 'Auburn University'", "pred_sql": "SELECT year, grad_cohort FROM institution_grads ig JOIN institution_details id ON ig.unitid = id.unitid WHERE id.chronname = 'Auburn University' AND year BETWEEN 2011 AND 2013;"}
{"sample_id": 3709, "db_id": "college_completion", "gold_sql": "SELECT DISTINCT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.state = 'Alabama' AND T2.year = 2011 AND T2.race = 'X' AND T2.grad_cohort > 500", "pred_sql": "SELECT id.chronname FROM institution_details AS id JOIN institution_grads AS ig ON id.unitid = ig.unitid WHERE id.state = 'Alabama' AND ig.year = 2011 AND ig.grad_cohort > 500;"}
{"sample_id": 3710, "db_id": "college_completion", "gold_sql": "SELECT AVG(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Central Alabama Community College' AND T2.year IN (2011, 2012, 2013) AND T2.gender = 'B' AND T2.race = 'X'", "pred_sql": "SELECT AVG(grad_100) AS average_graduates\nFROM institution_grads\nJOIN institution_details ON institution_grads.unitid = institution_details.unitid\nWHERE institution_details.chronname = 'Central Alabama Community College'\nAND institution_grads.year BETWEEN 2011 AND 2013;"}
{"sample_id": 3725, "db_id": "college_completion", "gold_sql": "SELECT DISTINCT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.cohort_size = ( SELECT MAX(T1.cohort_size) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid )", "pred_sql": "SELECT cohort FROM institution_grads WHERE cohort_size = (SELECT MAX(cohort_size) FROM institution_grads)"}
{"sample_id": 3686, "db_id": "college_completion", "gold_sql": "SELECT AVG(T1.med_sat_value) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2013 AND T2.gender = 'M' GROUP BY T2.grad_cohort ORDER BY COUNT(T2.grad_cohort) DESC LIMIT 1", "pred_sql": "SELECT AVG(med_sat_value) AS average_median_sat_value\nFROM institution_details id\nJOIN institution_grads ig ON id.unitid = ig.unitid\nWHERE ig.year = 2013 AND ig.gender = 'M'\nGROUP BY id.state\nORDER BY COUNT(ig.grad_cohort) DESC\nLIMIT 1;"}
{"sample_id": 3687, "db_id": "college_completion", "gold_sql": "SELECT T1.state, T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2012 AND T1.control = 'Private for-profit' GROUP BY T2.grad_cohort ORDER BY COUNT(T2.grad_cohort) DESC LIMIT 1", "pred_sql": "SELECT sd.state, id.chronname, id.city, id.level, id.control \nFROM institution_details id \nJOIN state_sector_grads ssg ON id.unitid = ssg.unitid \nJOIN state_sector_details sd ON ssg.state = sd.state \nWHERE ssg.year = 2012 AND ssg.control = 'Private for-profit' \nORDER BY ssg.grad_cohort DESC \nLIMIT 1;"}
{"sample_id": 3722, "db_id": "college_completion", "gold_sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'ID' AND T1.level = '4-year' AND T1.control = 'Public' GROUP BY T1.chronname ORDER BY SUM(T1.grad_100_value) ASC LIMIT 1", "pred_sql": "SELECT chronname FROM institution_details WHERE level = '4-year' AND control = 'Public' AND state = 'ID' ORDER BY grad_100_value ASC LIMIT 1;"}
{"sample_id": 3753, "db_id": "college_completion", "gold_sql": "SELECT AVG(t1.med_sat_value) FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON t1.state = t2.state ORDER BY t2.state_appr_value LIMIT 1", "pred_sql": "SELECT AVG(med_sat_value) AS average_sat_value\nFROM institution_details\nWHERE state = (SELECT state FROM state_sector_details ORDER BY state_appr_value ASC LIMIT 1);"}
{"sample_id": 3731, "db_id": "college_completion", "gold_sql": "SELECT DISTINCT T1.state FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.year = 2011 AND T1.awards_per_natl_value <= 20", "pred_sql": "SELECT DISTINCT state FROM state_sector_details WHERE year = '2011' AND awards_per_natl_value <= '20';"}
{"sample_id": 3705, "db_id": "college_completion", "gold_sql": "SELECT SUM(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE  T2.cohort = '2y all' AND T2.year = 2011 AND T1.state = 'Alabama'", "pred_sql": "SELECT SUM(grad_100) AS total_graduates FROM institution_grads ig JOIN institution_details id ON ig.unitid = id.unitid WHERE id.level = '2-year' AND id.state = 'Alabama' AND ig.year = 2011 AND ig.gender = 'B';"}
{"sample_id": 3704, "db_id": "college_completion", "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE WHEN T2.grad_150 > 20 THEN T1.chronname ELSE NULL END AS T FROM institution_details T1 INNER JOIN institution_grads T2 ON T2.unitid = T1.unitid WHERE T2.year = 2011 AND T2.gender = 'M' AND T2.race = 'W' ) WHERE T IS NOT NULL", "pred_sql": "SELECT id.chronname, g.grad_150_rate \nFROM institution_details AS id \nJOIN institution_grads AS g ON id.unitid = g.unitid \nWHERE g.year = 2011 \nAND g.gender = 'M' \nAND g.race = 'W' \nAND g.grad_150_rate > 20;"}
{"sample_id": 9440, "db_id": "california_schools", "gold_sql": "SELECT COUNT(T1.CDSCode) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.\"Charter Funding Type\" = 'Directly funded' AND T1.\"County Name\" = 'Fresno' AND T2.NumTstTakr <= 250", "pred_sql": "SELECT COUNT(*) AS school_count \nFROM schools s \nJOIN satscores sa ON s.cdscode = sa.cds \nWHERE s.county = 'Fresno' \nAND s.fundingtype = 'Directly funded' \nAND sa.numtsttakr <= 250;"}
{"sample_id": 9493, "db_id": "california_schools", "gold_sql": "SELECT T1.\"District Code\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = 'Fresno' AND T2.Magnet = 0", "pred_sql": "SELECT DISTINCT f.\"district code\" FROM frpm f JOIN schools s ON f.cdscode = s.cdscode WHERE s.city = 'Fresno' AND s.magnet = '0';"}
{"sample_id": 9442, "db_id": "california_schools", "gold_sql": "SELECT COUNT(T1.\"School Name\") FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Amador' AND T1.\"Low Grade\" = 9 AND T1.\"High Grade\" = 12", "pred_sql": "SELECT COUNT(*) AS school_count FROM schools WHERE county = 'Amador' AND low_grade = '9' AND high_grade = '12';"}
{"sample_id": 9433, "db_id": "california_schools", "gold_sql": "SELECT T2.CDSCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.\"Enrollment (K-12)\" + T2.\"Enrollment (Ages 5-17)\" > 500", "pred_sql": "SELECT cdscode FROM schools WHERE enroll12 > 500;"}
{"sample_id": 9475, "db_id": "california_schools", "gold_sql": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'", "pred_sql": "SELECT SUM(numtsttakr) AS total_test_takers FROM schools JOIN satscores ON schools.cdscode = satscores.cds WHERE mailcity = 'Fresno';"}
{"sample_id": 9481, "db_id": "california_schools", "gold_sql": "SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez')", "pred_sql": "SELECT s.website FROM schools s WHERE (s.admfname1 = 'Mike' AND s.admlname1 = 'Larson') OR (s.admfname2 = 'Dante' AND s.admlname2 = 'Alvarez');"}
{"sample_id": 9461, "db_id": "california_schools", "gold_sql": "SELECT AVG(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE strftime('%Y', T2.OpenDate) = '1980' AND T2.County = 'Fresno'", "pred_sql": "SELECT AVG(s.numtsttakr) AS average_test_takers\nFROM satscores s\nJOIN schools sch ON s.cds = sch.cdscode\nWHERE sch.county = 'Fresno' \nAND sch.opendate BETWEEN '1980-01-01' AND '1980-12-31';"}
{"sample_id": 9500, "db_id": "california_schools", "gold_sql": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1", "pred_sql": "SELECT gsserved, COUNT(*) as count FROM schools WHERE city = 'Adelanto' GROUP BY gsserved ORDER BY count DESC LIMIT 1;"}
{"sample_id": 9458, "db_id": "california_schools", "gold_sql": "SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1", "pred_sql": "SELECT s.admfname1 || ' ' || s.admlname1 AS full_name \nFROM satscores ss \nJOIN schools s ON ss.cds = s.cdscode \nWHERE ss.numge1500 = (SELECT MAX(numge1500) FROM satscores)"}
{"sample_id": 9457, "db_id": "california_schools", "gold_sql": "SELECT T2.AdmEmail1 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.\"Charter School (Y/N)\" = 1 ORDER BY T1.\"Enrollment (K-12)\" ASC LIMIT 1", "pred_sql": "SELECT s.admemail1 \nFROM schools s \nJOIN frpm f ON s.cdscode = f.cdscode \nWHERE f.charter = '1' \nORDER BY f.enrollment (k-12) ASC \nLIMIT 1;"}
{"sample_id": 9503, "db_id": "california_schools", "gold_sql": "SELECT T2.City, T1.\"Low Grade\", T1.\"School Name\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.State = 'CA' ORDER BY T2.Latitude ASC LIMIT 1", "pred_sql": "SELECT city, school, low_grade FROM schools WHERE state = 'California' ORDER BY latitude ASC LIMIT 1;"}
{"sample_id": 9468, "db_id": "california_schools", "gold_sql": "SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 ORDER BY T1.\"Enrollment (K-12)\" DESC LIMIT 1", "pred_sql": "SELECT s.school, s.enroll12 \nFROM schools s \nWHERE s.statustype = 'State Special Schools' \nORDER BY s.enroll12 DESC \nLIMIT 1;"}
{"sample_id": 9494, "db_id": "california_schools", "gold_sql": "SELECT T1.\"Enrollment (Ages 5-17)\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T2.City = 'Fremont' AND T1.\"Academic Year\" BETWEEN 2014 AND 2015", "pred_sql": "SELECT SUM(enrollment (ages 5-17)) AS total_enrollment\nFROM frpm\nJOIN schools ON frpm.cdscode = schools.cdscode\nWHERE schools.soctype = 'State Special Schools' AND schools.city = 'Fremont' AND frpm.academic year = '2014-2015';"}
{"sample_id": 9432, "db_id": "california_schools", "gold_sql": "SELECT T2.\"FRPM Count (Ages 5-17)\" FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrRead DESC LIMIT 1", "pred_sql": "SELECT f.frpm_count_ages_5_17 \nFROM frpm f \nJOIN schools s ON f.cdscode = s.cdscode \nJOIN satscores sa ON s.cdscode = sa.cds \nWHERE sa.avgscrread = (SELECT MAX(avgscrread) FROM satscores)"}
{"sample_id": 9498, "db_id": "california_schools", "gold_sql": "SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.\"NSLP Provision Status\" = 'Lunch Provision 2' AND T2.County = 'Merced' AND T1.\"Low Grade\" = 9 AND T1.\"High Grade\" = 12 AND T2.EILCode = 'HS'", "pred_sql": "SELECT s.city FROM schools s JOIN frpm f ON s.cdscode = f.cdscode WHERE f.nslp_provision_status = '2' AND f.low_grade = '9' AND f.high_grade = '12' AND f.county_name = 'Merced' AND f.school_type = 'High School';"}
{"sample_id": 9453, "db_id": "california_schools", "gold_sql": "SELECT CAST(\"Free Meal Count (K-12)\" AS REAL) / \"Enrollment (K-12)\" FROM frpm ORDER BY \"Enrollment (K-12)\" DESC LIMIT 9, 2", "pred_sql": "SELECT school_name, (CAST(free_meal_count AS FLOAT) / CAST(enrollment AS FLOAT)) AS eligible_free_rate\nFROM frpm\nWHERE low_grade <= '10' AND high_grade >= '10'\n   OR low_grade <= '11' AND high_grade >= '11'\nORDER BY enrollment DESC\nLIMIT 11;"}
{"sample_id": 9484, "db_id": "california_schools", "gold_sql": "SELECT COUNT(T2.School) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.Charter = 0 AND CAST(T1.\"Free Meal Count (K-12)\" AS REAL) * 100 / T1.\"Enrollment (K-12)\" < 0.18", "pred_sql": "SELECT COUNT(*) AS total_non_chartered_schools \nFROM frpm \nWHERE \"county name\" = 'Los Angeles' \nAND \"charter school (y/n)\" = '0' \nAND \"percent (%) eligible free (k-12)\" < '0.18';"}
{"sample_id": 10786, "db_id": "student_club", "gold_sql": "SELECT T2.city, T2.county, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'", "pred_sql": "SELECT zip_code.city, zip_code.state FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Amy' AND member.last_name = 'Firth';"}
{"sample_id": 10825, "db_id": "student_club", "gold_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event WHERE T1.event_status = 'Closed' AND T1.remaining < 0 ORDER BY T1.remaining LIMIT 1", "pred_sql": "SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.remaining < 0 ORDER BY (b.spent - b.amount) DESC LIMIT 1;"}
{"sample_id": 10891, "db_id": "student_club", "gold_sql": "SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T2.zip_code = 28092", "pred_sql": "SELECT first_name || ' ' || last_name AS full_name, position FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina' AND zip_code.zip_code = '28092';"}
{"sample_id": 10780, "db_id": "student_club", "gold_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Dues' ORDER BY T2.date_received LIMIT 1", "pred_sql": "SELECT first_name || ' ' || last_name AS full_name FROM member WHERE member_id = (SELECT link_to_member FROM income ORDER BY date_received ASC LIMIT 1)"}
{"sample_id": 10781, "db_id": "student_club", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'", "pred_sql": "SELECT COUNT(*) AS count FROM budget b1, budget b2, event e1, event e2 WHERE b1.category = 'advertisement' AND b2.category = 'advertisement' AND e1.event_name = 'Yearly Kickoff' AND e2.event_name = 'October Meeting' AND b1.amount > b2.amount AND b1.link_to_event = e1.event_id AND b2.link_to_event = e2.event_id;"}
{"sample_id": 10840, "db_id": "student_club", "gold_sql": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'", "pred_sql": "SELECT DISTINCT type FROM event WHERE location = 'MU 215';"}
{"sample_id": 10853, "db_id": "student_club", "gold_sql": "SELECT T3.last_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women''s Soccer' AND T3.position = 'Member'", "pred_sql": "SELECT m.last_name \nFROM member m \nJOIN attendance a ON m.member_id = a.link_to_member \nJOIN event e ON a.link_to_event = e.event_id \nWHERE e.event_name = 'women's soccer'"}
{"sample_id": 10866, "db_id": "student_club", "gold_sql": "SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50", "pred_sql": "SELECT expense.expense_description, AVG(expense.cost) AS average_cost\nFROM expense\nGROUP BY expense.expense_description\nHAVING AVG(expense.cost) > 50;"}
{"sample_id": 10744, "db_id": "student_club", "gold_sql": "SELECT T1.event_name FROM event AS T1  INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id  HAVING COUNT(T2.link_to_event) > 10 EXCEPT SELECT T1.event_name  FROM event AS T1  WHERE T1.type = 'Meeting'", "pred_sql": "SELECT COUNT(DISTINCT e.event_id) AS meeting_count\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nWHERE e.type = 'meeting'\nGROUP BY e.event_id\nHAVING COUNT(a.link_to_member) > 10;"}
{"sample_id": 10878, "db_id": "student_club", "gold_sql": "SELECT T3.first_name, T3.last_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id ORDER BY T2.spent DESC LIMIT 5", "pred_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, SUM(e.cost) AS total_spent \nFROM member m \nJOIN expense e ON m.member_id = e.link_to_member \nGROUP BY m.member_id \nORDER BY total_spent DESC \nLIMIT 5;"}
{"sample_id": 10811, "db_id": "student_club", "gold_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1", "pred_sql": "SELECT e.event_name, MIN(b.spent) AS lowest_cost \nFROM event e \nJOIN budget b ON e.event_id = b.link_to_event \nGROUP BY e.event_id \nORDER BY lowest_cost ASC \nLIMIT 1;"}
{"sample_id": 10766, "db_id": "student_club", "gold_sql": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'", "pred_sql": "SELECT notes FROM event WHERE event_name = 'fundraising' AND event_date = '2019-09-14T00:00:00';"}
{"sample_id": 10764, "db_id": "student_club", "gold_sql": "SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'", "pred_sql": "SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04';"}
{"sample_id": 10808, "db_id": "student_club", "gold_sql": "SELECT SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'Yearly Kickoff'", "pred_sql": "SELECT SUM(cost) AS total_expense FROM expense WHERE link_to_budget IN (SELECT budget_id FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'Yearly Kickoff'))"}
{"sample_id": 10783, "db_id": "student_club", "gold_sql": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'", "pred_sql": "SELECT SUM(cost) AS total_cost FROM expense WHERE expense_description LIKE '%pizza%';"}
{"sample_id": 10867, "db_id": "student_club", "gold_sql": "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'", "pred_sql": "SELECT first_name || ' ' || last_name AS full_name FROM member WHERE t_shirt_size = 'Extra Large';"}
{"sample_id": 10820, "db_id": "student_club", "gold_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1", "pred_sql": "SELECT event.event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'advertisement' ORDER BY budget.spent DESC LIMIT 1;"}
{"sample_id": 10794, "db_id": "student_club", "gold_sql": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Casey' AND T1.last_name = 'Mason'", "pred_sql": "SELECT date_received FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Casey' AND last_name = 'Mason');"}
{"sample_id": 10815, "db_id": "student_club", "gold_sql": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'", "pred_sql": "SELECT first_name || ' ' || last_name AS full_name, email FROM member WHERE position = 'Secretary';"}
{"sample_id": 10819, "db_id": "student_club", "gold_sql": "SELECT SUM(spent) / COUNT(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed'", "pred_sql": "SELECT AVG(b.spent) AS average_spent_on_food\nFROM budget b\nJOIN event e ON b.link_to_event = e.event_id\nWHERE b.category = 'food' AND e.event_date < DATE('now');"}
{"sample_id": 10837, "db_id": "student_club", "gold_sql": "SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business'", "pred_sql": "SELECT DISTINCT m.position FROM member m JOIN major j ON m.link_to_major = j.major_id WHERE j.major_name = 'Business';"}
{"sample_id": 10787, "db_id": "student_club", "gold_sql": "SELECT T2.expense_description FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget ORDER BY T1.remaining LIMIT 1", "pred_sql": "SELECT e.expense_id, e.expense_description, e.expense_date, e.cost, e.approved \nFROM expense e \nJOIN budget b ON e.link_to_budget = b.budget_id \nWHERE b.remaining = (SELECT MIN(remaining) FROM budget)"}
{"sample_id": 10842, "db_id": "student_club", "gold_sql": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'", "pred_sql": "SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';"}
{"sample_id": 10816, "db_id": "student_club", "gold_sql": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Physics Teaching'", "pred_sql": "SELECT COUNT(*) AS member_count FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching';"}
{"sample_id": 10742, "db_id": "student_club", "gold_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'", "pred_sql": "SELECT event.event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean';"}
{"sample_id": 10740, "db_id": "student_club", "gold_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1", "pred_sql": "SELECT e.event_name, COUNT(a.link_to_member) AS attendance_count \nFROM event e \nJOIN attendance a ON e.event_id = a.link_to_event \nGROUP BY e.event_id \nORDER BY attendance_count DESC \nLIMIT 1;"}
{"sample_id": 10752, "db_id": "student_club", "gold_sql": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'", "pred_sql": "SELECT college FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Tyler' AND last_name = 'Hewitt')"}
{"sample_id": 10746, "db_id": "student_club", "gold_sql": "SELECT CAST(COUNT(T2.link_to_event) AS REAL) / COUNT(DISTINCT T2.link_to_event) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE SUBSTR(T1.event_date, 1, 4) = '2020' AND T1.type = 'Meeting'", "pred_sql": "SELECT AVG(attendance_count) AS average_attendance FROM (SELECT COUNT(link_to_member) AS attendance_count FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.type = 'meeting' AND strftime('%Y', event.event_date) = '2020' GROUP BY event.event_id) AS attendance_counts;"}
{"sample_id": 10849, "db_id": "student_club", "gold_sql": "SELECT DISTINCT T2.category, T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker'", "pred_sql": "SELECT b.category FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.location = 'MU 215' AND e.type = 'guest speaker' AND b.spent = '0';"}
{"sample_id": 10763, "db_id": "student_club", "gold_sql": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'", "pred_sql": "SELECT location FROM event WHERE event_name = 'Spring Budget Review';"}
{"sample_id": 10800, "db_id": "student_club", "gold_sql": "SELECT MAX(spent) FROM budget", "pred_sql": "SELECT MAX(spent) AS highest_budget_spent FROM budget;"}
{"sample_id": 7503, "db_id": "image_and_language", "gold_sql": "SELECT T4.OBJ_CLASS_ID, T4.OBJ_CLASS FROM IMG_OBJ_att AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T2.ATT_CLASS = 'blurry' AND T1.IMG_ID = 22377993", "pred_sql": "SELECT o.obj_class FROM img_obj AS o JOIN img_obj_att AS a ON o.img_id = a.img_id AND o.obj_sample_id = a.obj_sample_id JOIN att_classes AS ac ON a.att_class_id = ac.att_class_id WHERE ac.att_class = 'blurry' AND o.img_id = '2377993';"}
{"sample_id": 7565, "db_id": "image_and_language", "gold_sql": "SELECT CAST(SUM(CASE WHEN IMG_ID = 1 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN IMG_ID = 6 THEN 1 ELSE 0 END) FROM IMG_OBJ", "pred_sql": "SELECT (SELECT COUNT(obj_sample_id) FROM img_obj WHERE img_id = '1') * 1.0 / (SELECT COUNT(obj_sample_id) FROM img_obj WHERE img_id = '6') AS ratio;"}
{"sample_id": 7572, "db_id": "image_and_language", "gold_sql": "SELECT T1.ATT_CLASS FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID WHERE T2.IMG_ID = 400 ORDER BY T3.W DESC LIMIT 1", "pred_sql": "SELECT att_classes.att_class \nFROM img_obj \nJOIN img_obj_att ON img_obj.img_id = img_obj_att.img_id AND img_obj.obj_sample_id = img_obj_att.obj_sample_id \nJOIN att_classes ON img_obj_att.att_class_id = att_classes.att_class_id \nWHERE img_obj.img_id = '400' \nORDER BY CAST(img_obj.w AS INTEGER) DESC \nLIMIT 1;"}
{"sample_id": 7495, "db_id": "image_and_language", "gold_sql": "SELECT SUM(CASE WHEN T2.ATT_CLASS = 'white' THEN 1 ELSE 0 END) FROM IMG_OBJ_ATT AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 2347915", "pred_sql": "SELECT COUNT(DISTINCT img_obj.obj_sample_id) AS white_object_count \nFROM img_obj \nJOIN img_obj_att ON img_obj.img_id = img_obj_att.img_id AND img_obj.obj_sample_id = img_obj_att.obj_sample_id \nJOIN att_classes ON img_obj_att.att_class_id = att_classes.att_class_id \nWHERE img_obj.img_id = '2347915' AND att_classes.att_class = 'white';"}
{"sample_id": 7547, "db_id": "image_and_language", "gold_sql": "SELECT SUM(CASE WHEN T2.OBJ_CLASS = 'tip' THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 908", "pred_sql": "SELECT COUNT(DISTINCT img_obj.obj_sample_id) AS object_sample_count \nFROM img_obj \nJOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id \nWHERE img_obj.img_id = '908' AND obj_classes.obj_class = 'tip';"}
{"sample_id": 7497, "db_id": "image_and_language", "gold_sql": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 2345511 AND T2.OBJ1_SAMPLE_ID = 12 AND T2.OBJ2_SAMPLE_ID = 8", "pred_sql": "SELECT p.pred_class \nFROM img_rel r \nJOIN pred_classes p ON r.pred_class_id = p.pred_class_id \nWHERE r.img_id = '2345511' \nAND (r.obj1_sample_id = '12' AND r.obj2_sample_id = '8' OR r.obj1_sample_id = '8' AND r.obj2_sample_id = '12');"}
{"sample_id": 7498, "db_id": "image_and_language", "gold_sql": "SELECT T2.OBJ1_SAMPLE_ID FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 2345524 AND T1.PRED_CLASS = 'lying on' AND T2.OBJ2_SAMPLE_ID = 1", "pred_sql": "SELECT img_obj.obj_sample_id \nFROM img_rel \nJOIN img_obj ON img_rel.img_id = img_obj.img_id AND img_rel.obj2_sample_id = img_obj.obj_sample_id \nWHERE img_rel.img_id = '2345524' \nAND img_rel.pred_class_id IN (SELECT pred_class_id FROM pred_classes WHERE pred_class = 'lying on') \nAND img_rel.obj1_sample_id = '1';"}
{"sample_id": 7504, "db_id": "image_and_language", "gold_sql": "SELECT SUM(CASE WHEN T1.OBJ_CLASS = 'wall' THEN 1 ELSE 0 END) FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 2353079", "pred_sql": "SELECT COUNT(DISTINCT img_obj.obj_sample_id) AS sample_count \nFROM img_obj \nJOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id \nWHERE img_obj.img_id = '2353079' AND obj_classes.obj_class = 'wall';"}
{"sample_id": 7571, "db_id": "image_and_language", "gold_sql": "SELECT COUNT(T2.OBJ_SAMPLE_ID) FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.ATT_CLASS = 'polka dot'", "pred_sql": "SELECT COUNT(DISTINCT img_obj.img_id) AS image_count\nFROM img_obj\nJOIN img_obj_att ON img_obj.img_id = img_obj_att.img_id AND img_obj.obj_sample_id = img_obj_att.obj_sample_id\nJOIN att_classes ON img_obj_att.att_class_id = att_classes.att_class_id\nWHERE att_classes.att_class = 'polka dot';"}
{"sample_id": 7524, "db_id": "image_and_language", "gold_sql": "SELECT T1.OBJ_CLASS FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.X = 0 AND T2.Y = 0 AND T2.W = 135 AND T2.H = 212", "pred_sql": "SELECT obj_classes.obj_class FROM img_obj JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id WHERE img_obj.x = '0' AND img_obj.y = '0' AND img_obj.w = '135' AND img_obj.h = '212';"}
{"sample_id": 7595, "db_id": "image_and_language", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.OBJ_CLASS = 'man' THEN 1 ELSE 0 END) AS REAL) / COUNT(CASE WHEN T2.OBJ_CLASS = 'person' THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID", "pred_sql": "SELECT COUNT(DISTINCT img_id) * 1.0 / (SELECT COUNT(DISTINCT img_id) FROM img_obj WHERE obj_class_id IN (SELECT obj_class_id FROM obj_classes WHERE obj_class IN ('man', 'person'))) AS ratio_of_images_with_man_and_person\nFROM img_obj\nWHERE obj_class_id IN (SELECT obj_class_id FROM obj_classes WHERE obj_class IN ('man', 'person'));"}
{"sample_id": 7499, "db_id": "image_and_language", "gold_sql": "SELECT COUNT(T2.OBJ_SAMPLE_ID) FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 6 AND T1.OBJ_CLASS = 'food'", "pred_sql": "SELECT COUNT(*) AS food_sample_count FROM img_obj WHERE img_id = '6' AND obj_class_id IN (SELECT obj_class_id FROM obj_classes WHERE obj_class LIKE '%food%');"}
{"sample_id": 7514, "db_id": "image_and_language", "gold_sql": "SELECT T2.X, T2.Y, T2.W, T2.H FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID WHERE T1.PRED_CLASS_ID = 144 AND T1.IMG_ID = 3", "pred_sql": "SELECT img_obj.x, img_obj.y, img_obj.w, img_obj.h \nFROM img_obj \nJOIN img_rel ON img_obj.img_id = img_rel.img_id \nWHERE img_obj.img_id = '4' AND img_rel.pred_class_id = '144';"}
{"sample_id": 7520, "db_id": "image_and_language", "gold_sql": "SELECT T1.OBJ_CLASS FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.X = 0 AND T2.Y = 0 GROUP BY T1.OBJ_CLASS", "pred_sql": "SELECT obj_classes.obj_class FROM img_obj JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id WHERE img_obj.x = '0' AND img_obj.y = '0';"}
{"sample_id": 7548, "db_id": "image_and_language", "gold_sql": "SELECT SUM(CASE WHEN T2.OBJ_CLASS = 'kitchen' THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 41", "pred_sql": "SELECT COUNT(DISTINCT img_obj.obj_sample_id) AS number_of_samples\nFROM img_obj\nJOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id\nWHERE img_obj.img_id = '41' AND obj_classes.obj_class = 'kitchen';"}
{"sample_id": 7568, "db_id": "image_and_language", "gold_sql": "SELECT DISTINCT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 10", "pred_sql": "SELECT obj_class FROM obj_classes WHERE obj_class_id IN (SELECT obj_class_id FROM img_obj WHERE img_id = '10');"}
{"sample_id": 7580, "db_id": "image_and_language", "gold_sql": "SELECT COUNT(IMG_ID) FROM IMG_OBJ WHERE OBJ_CLASS_ID = 10", "pred_sql": "SELECT COUNT(DISTINCT img_id) AS total_images FROM img_obj_att GROUP BY img_id HAVING COUNT(att_class_id) = 10;"}
{"sample_id": 7564, "db_id": "image_and_language", "gold_sql": "SELECT OBJ_SAMPLE_ID FROM IMG_OBJ_ATT GROUP BY OBJ_SAMPLE_ID ORDER BY COUNT(OBJ_SAMPLE_ID) DESC LIMIT 1", "pred_sql": "SELECT img_obj.obj_sample_id, COUNT(img_obj_att.att_class_id) AS attribute_count\nFROM img_obj\nJOIN img_obj_att ON img_obj.img_id = img_obj_att.img_id AND img_obj.obj_sample_id = img_obj_att.obj_sample_id\nGROUP BY img_obj.obj_sample_id\nORDER BY attribute_count DESC\nLIMIT 1;"}
{"sample_id": 7528, "db_id": "image_and_language", "gold_sql": "SELECT SUM(IIF(T1.IMG_ID = 1, 1, 0)), SUM(IIF(T1.X = 341 AND T1.Y = 27 AND T1.W = 42 AND T1.H = 51, 1, 0)) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID", "pred_sql": "SELECT COUNT(DISTINCT img_obj.obj_sample_id) AS object_count, GROUP_CONCAT(DISTINCT obj_classes.obj_class) AS identified_objects\nFROM img_obj\nJOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id\nWHERE img_obj.img_id = '72' AND \n      img_obj.x >= '341' AND img_obj.y >= '27' AND \n      img_obj.x + img_obj.w <= '341' + '42' AND \n      img_obj.y + img_obj.h <= '27' + '51';"}
{"sample_id": 7490, "db_id": "image_and_language", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.OBJ_CLASS = 'man' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.OBJ_CLASS_ID) FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 1", "pred_sql": "SELECT (COUNT(obj_sample_id) * 100.0 / (SELECT COUNT(*) FROM img_obj WHERE img_id = '1')) AS percentage\nFROM img_obj\nJOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id\nWHERE img_obj.img_id = '1' AND obj_classes.obj_class = 'man';"}
{"sample_id": 7531, "db_id": "image_and_language", "gold_sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID INNER JOIN IMG_OBJ_ATT AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN ATT_CLASSES AS T4 ON T3.ATT_CLASS_ID = T4.ATT_CLASS_ID WHERE T4.ATT_CLASS = 'scattered' AND T1.IMG_ID = 10 GROUP BY T2.OBJ_CLASS", "pred_sql": "SELECT obj_classes.obj_class \nFROM img_obj \nJOIN img_rel ON img_obj.img_id = img_rel.img_id \nJOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id \nWHERE img_obj.img_id = '10' AND img_rel.pred_class_id IN (SELECT pred_class_id FROM pred_classes WHERE pred_class LIKE '%scattered%');"}
{"sample_id": 7505, "db_id": "image_and_language", "gold_sql": "SELECT T1.OBJ_CLASS FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 2320341 AND T2.OBJ_SAMPLE_ID = 10", "pred_sql": "SELECT obj_class FROM obj_classes WHERE obj_class_id IN (SELECT obj_class_id FROM img_obj WHERE img_id = '2320341' AND obj_sample_id = '10')"}
{"sample_id": 7560, "db_id": "image_and_language", "gold_sql": "SELECT T1.X, T1.Y, T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 250 AND T2.OBJ_CLASS = 'kitchen'", "pred_sql": "SELECT img_obj.x, img_obj.y, img_obj.w, img_obj.h \nFROM img_obj \nJOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id \nWHERE img_obj.img_id = '250' AND obj_classes.obj_class = 'kitchen';"}
{"sample_id": 7511, "db_id": "image_and_language", "gold_sql": "SELECT ATT_CLASS_ID FROM ATT_CLASSES WHERE ATT_CLASS = 'very large'", "pred_sql": "SELECT att_class FROM att_classes WHERE att_class_id IN (SELECT att_class_id FROM img_obj_att WHERE img_id IN (SELECT img_id FROM img_obj WHERE obj_sample_id IN (SELECT obj_sample_id FROM img_obj_att WHERE att_class_id = (SELECT att_class_id FROM att_classes WHERE att_class = 'very large bike'))))"}
{"sample_id": 7529, "db_id": "image_and_language", "gold_sql": "SELECT T2.ATT_CLASS FROM IMG_OBJ_ATT AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 5 GROUP BY T2.ATT_CLASS HAVING COUNT(T2.ATT_CLASS) > 2", "pred_sql": "SELECT DISTINCT att_classes.att_class \nFROM img_obj_att \nJOIN img_obj ON img_obj_att.img_id = img_obj.img_id AND img_obj_att.obj_sample_id = img_obj.obj_sample_id \nJOIN att_classes ON img_obj_att.att_class_id = att_classes.att_class_id \nWHERE img_obj.img_id = '5' \nGROUP BY att_classes.att_class_id \nHAVING COUNT(DISTINCT img_obj.obj_sample_id) > 1;"}
{"sample_id": 7557, "db_id": "image_and_language", "gold_sql": "SELECT COUNT(T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'animal' AND T1.IMG_ID = 660", "pred_sql": "SELECT COUNT(DISTINCT img_obj.obj_sample_id) AS animal_sample_count \nFROM img_obj \nJOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id \nWHERE img_obj.img_id = '660' AND obj_classes.obj_class LIKE '%animal%';"}
{"sample_id": 7542, "db_id": "image_and_language", "gold_sql": "SELECT COUNT(ATT_CLASS_ID) FROM IMG_OBJ_ATT WHERE IMG_ID = 5", "pred_sql": "SELECT COUNT(DISTINCT att_class_id) AS attribute_class_count FROM img_obj_att WHERE img_id = 5;"}
{"sample_id": 9077, "db_id": "bike_share_1", "gold_sql": "SELECT T1.start_station_name, T1.end_station_name FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.start_date LIKE '%/%/2014%' AND T1.start_station_name != T1.end_station_name", "pred_sql": "SELECT DISTINCT s1.city AS start_city, s2.city AS end_city \nFROM trip t \nJOIN station s1 ON t.start_station_id = s1.id \nJOIN station s2 ON t.end_station_id = s2.id \nWHERE strftime('%Y', t.start_date) = '2014' AND s1.city != s2.city;"}
{"sample_id": 9095, "db_id": "bike_share_1", "gold_sql": "SELECT AVG(T3.min_temperature_f), T1.long, T1.lat FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name INNER JOIN weather AS T3 ON T3.zip_code = T2.zip_code WHERE T3.zip_code = 94301", "pred_sql": "SELECT AVG(min_temperature_f) AS average_coldest_temperature, s.name, s.lat, s.long \nFROM weather w \nJOIN station s ON w.zip_code = s.zip_code \nWHERE s.zip_code = '94301' \nGROUP BY s.name, s.lat, s.long;"}
{"sample_id": 9053, "db_id": "bike_share_1", "gold_sql": "SELECT SUM(IIF(zip_code = 94107 AND date = '8/29/2013', mean_temperature_f, 0)) FROM weather", "pred_sql": "SELECT mean_temperature_f FROM weather WHERE date = '2013-08-29' AND zip_code = 94107;"}
{"sample_id": 8996, "db_id": "bike_share_1", "gold_sql": "SELECT T2.date, AVG(T2.min_temperature_f) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code GROUP BY T2.date ORDER BY COUNT(T1.start_date) DESC LIMIT 1", "pred_sql": "SELECT w.date, AVG(w.min_temperature_f) AS avg_coldest_temp\nFROM trip t\nJOIN weather w ON DATE(t.start_date) = w.date\nGROUP BY w.date\nORDER BY COUNT(t.id) DESC\nLIMIT 1;"}
{"sample_id": 9091, "db_id": "bike_share_1", "gold_sql": "SELECT T2.city, T2.installation_date FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.id = 585842", "pred_sql": "SELECT s.city, s.installation_date \nFROM trip t \nJOIN station s ON t.start_station_id = s.id \nWHERE t.id = '585842';"}
{"sample_id": 9080, "db_id": "bike_share_1", "gold_sql": "SELECT CAST(SUM(T1.duration) AS REAL) / 3600 FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'Palo Alto'", "pred_sql": "SELECT SUM(duration) / 3600 AS total_trip_duration_hours FROM trip INNER JOIN station ON trip.start_station_id = station.id WHERE station.city = 'Palo Alto';"}
{"sample_id": 9044, "db_id": "bike_share_1", "gold_sql": "SELECT SUM(IIF(start_station_id = end_station_id, 1, 0)) FROM trip", "pred_sql": "SELECT COUNT(*) AS same_station_trip_count FROM trip WHERE start_station_id = end_station_id;"}
{"sample_id": 9064, "db_id": "bike_share_1", "gold_sql": "SELECT T2.installation_date FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.id = 4069", "pred_sql": "SELECT installation_date FROM station WHERE id = (SELECT start_station_id FROM trip WHERE id = 'ID4069');"}
{"sample_id": 9032, "db_id": "bike_share_1", "gold_sql": "SELECT AVG(T1.duration) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE (T2.events = 'Rain' AND T2.precipitation_inches > 0.8) OR (T2.events = 'rain' AND T2.precipitation_inches > 0.8)", "pred_sql": "SELECT AVG(duration) AS average_ride_duration\nFROM trip\nJOIN weather ON trip.start_date = weather.date\nWHERE weather.precipitation_inches > 0.8;"}
{"sample_id": 9096, "db_id": "bike_share_1", "gold_sql": "SELECT AVG(T1.duration), T2.installation_date FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.start_station_name = 'Mountain View City Hall' AND T1.subscription_type = 'Subscriber' AND T1.end_station_name = 'Mountain View City Hall'", "pred_sql": "SELECT AVG(trip.duration) AS average_duration, station.installation_date \nFROM trip \nJOIN station AS start_station ON trip.start_station_id = start_station.id \nJOIN station AS end_station ON trip.end_station_id = end_station.id \nWHERE start_station.city = 'Mountain View' \nAND end_station.city = 'Mountain View' \nAND trip.subscription_type = 'Subscriber';"}
{"sample_id": 9027, "db_id": "bike_share_1", "gold_sql": "SELECT SUM(IIF(subscription_type = 'Subscriber', 1, 0)) - SUM(IIF(subscription_type = 'Customer', 1, 0)) FROM trip WHERE start_date LIKE '6/%/2013%'", "pred_sql": "SELECT COUNT(CASE WHEN subscription_type = 'Customer' THEN 1 END) - COUNT(CASE WHEN subscription_type = 'Subscriber' THEN 1 END) AS customer_subscriber_difference\nFROM trip\nWHERE start_date BETWEEN '2013-06-01' AND '2013-06-30';"}
{"sample_id": 8993, "db_id": "bike_share_1", "gold_sql": "SELECT T2.end_station_name, T2.start_date FROM station AS T1 INNER JOIN trip AS T2 ON T2.end_station_name = T1.name WHERE T1.lat = 37.331415 AND T1.long = -121.8932", "pred_sql": "SELECT trip.start_date FROM trip JOIN station AS end_station ON trip.end_station_id = end_station.id WHERE end_station.lat = '37.331415' AND end_station.long = '-121.8932';"}
{"sample_id": 9005, "db_id": "bike_share_1", "gold_sql": "SELECT SUBSTR(CAST(date AS TEXT), -4) FROM weather GROUP BY SUBSTR(CAST(date AS TEXT), -4) ORDER BY SUM(CASE WHEN events LIKE '%Rain%' OR events LIKE '%rain%' THEN 1 ELSE 0 END) DESC LIMIT 1", "pred_sql": "SELECT strftime('%Y', date) AS year, SUM(precipitation_inches) AS total_rain FROM weather WHERE precipitation_inches > 0 GROUP BY year ORDER BY total_rain DESC LIMIT 1;"}
{"sample_id": 9009, "db_id": "bike_share_1", "gold_sql": "SELECT T2.date, COUNT(T1.start_station_name) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '11/%/2014%' AND T2.zip_code = 94301 AND T2.events = 'Fog' AND T1.subscription_type = 'Subscriber'", "pred_sql": "SELECT w.date, COUNT(t.id) AS total_bikes_borrowed\nFROM weather w\nLEFT JOIN trip t ON DATE(t.start_date) = DATE(w.date)\nWHERE w.events = 'Fog' AND w.zip_code = 94301 AND strftime('%Y-%m', w.date) = '2014-11'\nGROUP BY w.date;"}
{"sample_id": 9071, "db_id": "bike_share_1", "gold_sql": "SELECT MAX(duration), CAST(MAX(duration) AS REAL) / 86400 FROM trip", "pred_sql": "SELECT MAX(duration) / 86400 AS longest_trip_duration_days FROM trip;"}
{"sample_id": 9088, "db_id": "bike_share_1", "gold_sql": "SELECT AVG(T1.duration), T2.lat, T2.long FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name LEFT JOIN station AS T3 ON T3.name = T1.end_station_name WHERE T1.start_station_name = 'Santa Clara at Almaden'", "pred_sql": "SELECT AVG(duration) AS average_duration, s.lat, s.long FROM trip t JOIN station s ON t.start_station_id = s.id WHERE s.name = 'Santa Clara at Almaden';"}
{"sample_id": 9087, "db_id": "bike_share_1", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.subscription_type = 'Customer' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.subscription_type = 'Subscriber' THEN 1 ELSE 0 END) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'San Francisco'", "pred_sql": "SELECT (COUNT(CASE WHEN subscription_type = 'Customer' THEN 1 END) * 100.0 / COUNT(*)) AS customer_percentage FROM trip WHERE start_station_id IN (SELECT id FROM station WHERE city = 'San Francisco')"}
{"sample_id": 9040, "db_id": "bike_share_1", "gold_sql": "SELECT SUBSTR(CAST(T1.start_date AS TEXT), INSTR(T1.start_date, ' '), -4) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'San Francisco' GROUP BY T1.start_station_name ORDER BY COUNT(T1.id) DESC LIMIT 1", "pred_sql": "SELECT strftime('%Y', start_date) AS year, COUNT(*) AS trip_count\nFROM trip\nJOIN station ON trip.start_station_id = station.id\nWHERE station.city = 'San Francisco'\nGROUP BY year\nORDER BY trip_count DESC\nLIMIT 1;"}
{"sample_id": 9062, "db_id": "bike_share_1", "gold_sql": "SELECT COUNT(T1.start_station_name) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '%2013%' AND T2.events = 'Fog' AND T1.start_station_name = '2nd at Townsend' AND T2.zip_code = 94107", "pred_sql": "SELECT COUNT(*) AS trip_count \nFROM trip \nJOIN weather ON trip.start_date = weather.date \nWHERE trip.start_station_name = '2nd at Townsend' \nAND weather.events = 'Fog' \nAND strftime('%Y', trip.start_date) = '2013';"}
{"sample_id": 9023, "db_id": "bike_share_1", "gold_sql": "SELECT T1.id FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.min_temperature_f < 45", "pred_sql": "SELECT trip.id FROM trip JOIN weather ON date(trip.end_date) = weather.date WHERE weather.min_temperature_f < 45;"}
{"sample_id": 9037, "db_id": "bike_share_1", "gold_sql": "SELECT DISTINCT T1.bike_id FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.installation_date LIKE '%2013'", "pred_sql": "SELECT DISTINCT trip.bike_id FROM trip JOIN station ON trip.start_station_id = station.id WHERE station.installation_date LIKE '2013%';"}
{"sample_id": 9051, "db_id": "bike_share_1", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.events = 'Rain' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTR(CAST(T2.date AS TEXT), -4) = '2015' AND T1.subscription_type = 'Customer'", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM trip WHERE subscription_type = 'Customer')) AS percentage_of_rainy_customer_trips\nFROM trip\nJOIN weather ON date(end_date) = date(weather.date)\nWHERE subscription_type = 'Customer' AND events = 'Rain' AND strftime('%Y', end_date) = '2015';"}
{"sample_id": 10163, "db_id": "superhero", "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.hero_id) DESC LIMIT 1", "pred_sql": "SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id GROUP BY s.id ORDER BY COUNT(hp.power_id) DESC LIMIT 1;"}
{"sample_id": 10210, "db_id": "superhero", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female'", "pred_sql": "SELECT (COUNT(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 END) * 100.0 / COUNT(*)) AS female_marvel_percentage\nFROM superhero\nJOIN gender ON superhero.gender_id = gender.id\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE gender.gender = 'female';"}
{"sample_id": 10249, "db_id": "superhero", "gold_sql": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.race != 'Human'", "pred_sql": "SELECT AVG(height_cm) AS average_height FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher_name = 'Dark Horse Comics' AND race_id NOT IN (SELECT id FROM race WHERE race = 'Human');"}
{"sample_id": 10158, "db_id": "superhero", "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1", "pred_sql": "SELECT s.superhero_name, ha.attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'intelligence' ORDER BY ha.attribute_value ASC LIMIT 1;"}
{"sample_id": 10160, "db_id": "superhero", "gold_sql": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)", "pred_sql": "SELECT s.superhero_name, ha.attribute_value \nFROM superhero s \nJOIN hero_attribute ha ON s.id = ha.hero_id \nJOIN attribute a ON ha.attribute_id = a.id \nWHERE a.attribute_name = 'durability' AND ha.attribute_value < 50;"}
{"sample_id": 10204, "db_id": "superhero", "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'", "pred_sql": "SELECT superhero_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'black') AND hair_colour_id = (SELECT id FROM colour WHERE colour = 'black');"}
{"sample_id": 10221, "db_id": "superhero", "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.id = 1", "pred_sql": "SELECT COUNT(*) AS count FROM superhero WHERE publisher_id IS NULL OR publisher_id = '';"}
{"sample_id": 10195, "db_id": "superhero", "gold_sql": "SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.eye_colour_id = T1.hair_colour_id AND T1.eye_colour_id = T1.skin_colour_id", "pred_sql": "SELECT s.superhero_name, s.full_name, p.publisher_name \nFROM superhero s \nJOIN colour ce ON s.eye_colour_id = ce.id \nJOIN colour ch ON s.hair_colour_id = ch.id \nJOIN colour cs ON s.skin_colour_id = cs.id \nJOIN publisher p ON s.publisher_id = p.id \nWHERE ce.colour = ch.colour AND ch.colour = cs.colour;"}
{"sample_id": 10192, "db_id": "superhero", "gold_sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'", "pred_sql": "SELECT c.colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.full_name = 'Abraham Sapien';"}
{"sample_id": 10190, "db_id": "superhero", "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'", "pred_sql": "SELECT COUNT(*) AS superhero_count FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics');"}
{"sample_id": 10237, "db_id": "superhero", "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Good' AND T3.gender = 'Female'", "pred_sql": "SELECT COUNT(*) AS good_female_superheroes\nFROM superhero\nJOIN gender ON superhero.gender_id = gender.id\nJOIN alignment ON superhero.alignment_id = alignment.id\nWHERE gender.gender = 'female' AND alignment.alignment = 'Good';"}
{"sample_id": 10167, "db_id": "superhero", "gold_sql": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'", "pred_sql": "SELECT publisher.id FROM publisher JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.superhero_name = 'Star Trek';"}
{"sample_id": 10213, "db_id": "superhero", "gold_sql": "SELECT CAST(SUM(height_cm) AS REAL) / COUNT(id) FROM superhero", "pred_sql": "SELECT superhero.superhero_name, AVG(CAST(superhero.height_cm AS REAL)) AS average_height FROM superhero GROUP BY superhero.superhero_name;"}
{"sample_id": 10182, "db_id": "superhero", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180", "pred_sql": "SELECT (COUNT(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_marvel FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.height_cm BETWEEN 150 AND 180;"}
{"sample_id": 10194, "db_id": "superhero", "gold_sql": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'", "pred_sql": "SELECT c1.colour AS eye_colour, c2.colour AS hair_colour, c3.colour AS skin_colour \nFROM superhero s \nJOIN colour c1 ON s.eye_colour_id = c1.id \nJOIN colour c2 ON s.hair_colour_id = c2.id \nJOIN colour c3 ON s.skin_colour_id = c3.id \nJOIN gender g ON s.gender_id = g.id \nJOIN publisher p ON s.publisher_id = p.id \nWHERE g.gender = 'female' AND p.publisher_name = 'Dark Horse Comics';"}
{"sample_id": 10233, "db_id": "superhero", "gold_sql": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Atom IV'", "pred_sql": "SELECT a.alignment, sp.power_name \nFROM superhero s \nJOIN alignment a ON s.alignment_id = a.id \nJOIN hero_power hp ON s.id = hp.hero_id \nJOIN superpower sp ON hp.power_id = sp.id \nWHERE s.superhero_name = 'Atom IV';"}
{"sample_id": 10202, "db_id": "superhero", "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'", "pred_sql": "SELECT sp.power_name \nFROM superhero s \nJOIN hero_power hp ON s.id = hp.hero_id \nJOIN superpower sp ON hp.power_id = sp.id \nWHERE s.superhero_name = 'Hunter Zolomon';"}
{"sample_id": 10184, "db_id": "superhero", "gold_sql": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T2.power_name ORDER BY COUNT(T1.hero_id) DESC LIMIT 1", "pred_sql": "SELECT sp.power_name, COUNT(hp.power_id) AS power_count\nFROM superpower sp\nJOIN hero_power hp ON sp.id = hp.power_id\nGROUP BY sp.power_name\nORDER BY power_count DESC\nLIMIT 1;"}
{"sample_id": 10252, "db_id": "superhero", "gold_sql": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1", "pred_sql": "SELECT a.attribute_name, ha.attribute_value FROM hero_attribute ha JOIN superhero s ON ha.hero_id = s.id JOIN attribute a ON ha.attribute_id = a.id WHERE s.superhero_name = 'Black Panther' ORDER BY ha.attribute_value ASC LIMIT 1;"}
{"sample_id": 10209, "db_id": "superhero", "gold_sql": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'", "pred_sql": "SELECT race.race, alignment.alignment FROM superhero JOIN race ON superhero.race_id = race.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks';"}
{"sample_id": 10217, "db_id": "superhero", "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'", "pred_sql": "SELECT COUNT(*) AS neutral_superhero_count FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral';"}
{"sample_id": 10253, "db_id": "superhero", "gold_sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'", "pred_sql": "SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abomination';"}
{"sample_id": 10183, "db_id": "superhero", "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79", "pred_sql": "SELECT superhero_name FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'male') AND weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero)"}
{"sample_id": 10235, "db_id": "superhero", "gold_sql": "SELECT AVG(T1.attribute_value) FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN alignment AS T3 ON T2.alignment_id = T3.id WHERE T3.alignment = 'Neutral'", "pred_sql": "SELECT AVG(ha.attribute_value) AS average_attribute_value\nFROM superhero s\nJOIN alignment a ON s.alignment_id = a.id\nJOIN hero_attribute ha ON s.id = ha.hero_id\nWHERE a.alignment = 'Neutral';"}
{"sample_id": 10232, "db_id": "superhero", "gold_sql": "SELECT T3.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN race AS T3 ON T1.race_id = T3.id ORDER BY T2.attribute_value DESC LIMIT 1", "pred_sql": "SELECT r.race FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN race r ON s.race_id = r.id WHERE ha.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute)"}
{"sample_id": 1986, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN city AS T2 ON T1.Country_Id = T2.Country_Id WHERE city_name = 'Rajkot'", "pred_sql": "SELECT country.country_name FROM city JOIN country ON city.country_id = country.country_id WHERE city.city_name = 'Rajkot';"}
{"sample_id": 2028, "db_id": "soccer_2016", "gold_sql": "SELECT COUNT(T.Match_Id) FROM ( SELECT T2.Match_Id FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Player_Match AS T3 ON T1.Team_Id = T3.Team_Id WHERE T1.Team_Name = 'Mumbai Indians' AND T2.Match_Date LIKE '2008%' GROUP BY T2.Match_Id ) T", "pred_sql": "SELECT COUNT(*) AS matches_won FROM match WHERE match_winner = (SELECT team_id FROM team WHERE team_name = 'Mumbai Indians') AND season_id = (SELECT season_id FROM season WHERE season_year = 2008);"}
{"sample_id": 1811, "db_id": "soccer_2016", "gold_sql": "SELECT T2.Player_Name FROM Season AS T1 INNER JOIN Player AS T2 ON T1.Man_of_the_Series = T2.Player_Id WHERE T1.Season_Year = 2013", "pred_sql": "SELECT player.player_name FROM player JOIN season ON player.player_id = season.man_of_the_series WHERE season.season_year = 2013;"}
{"sample_id": 1927, "db_id": "soccer_2016", "gold_sql": "SELECT AVG(T1.Extra_Runs) FROM Extra_Runs AS T1 INNER JOIN Extra_Type AS T2 ON T1.Extra_Type_Id = T2.Extra_Id WHERE T2.Extra_Name = 'noballs'", "pred_sql": "SELECT AVG(extra_runs) AS average_extra_runs FROM extra_runs WHERE extra_type_id = (SELECT extra_id FROM extra_type WHERE extra_name = 'noball');"}
{"sample_id": 1997, "db_id": "soccer_2016", "gold_sql": "SELECT T1.team_name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.team_2 ORDER BY T2.win_margin LIMIT 1", "pred_sql": "SELECT team.team_name FROM match JOIN team ON match.team_2 = team.team_id ORDER BY match.win_margin ASC LIMIT 1;"}
{"sample_id": 1873, "db_id": "soccer_2016", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Out_Name = 'bowled' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Player_Out) FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T2.Out_Id = T1.Kind_Out WHERE T1.Match_Id = 392187", "pred_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM wicket_taken WHERE match_id = 392187) AS percentage_out_by_bowl\nFROM wicket_taken\nWHERE match_id = 392187 AND kind_out IN (SELECT out_id FROM out_type WHERE out_name = 'bowled');"}
{"sample_id": 1798, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Bowling_Skill FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T2.Bowling_skill = T1.Bowling_Id GROUP BY T1.Bowling_Skill ORDER BY COUNT(T1.Bowling_Skill) DESC LIMIT 1", "pred_sql": "SELECT bowling_skill, COUNT(*) as player_count FROM player GROUP BY bowling_skill ORDER BY player_count DESC LIMIT 1;"}
{"sample_id": 1800, "db_id": "soccer_2016", "gold_sql": "SELECT SUM(CASE WHEN T3.Role_Desc = 'Captain' THEN 1 ELSE 0 END) FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id WHERE T1.Player_Name = 'SC Ganguly'", "pred_sql": "SELECT COUNT(*) AS captaincy_count FROM player_match pm JOIN player p ON pm.player_id = p.player_id WHERE p.player_name = 'SC Ganguly' AND pm.role_id = (SELECT role_id FROM rolee WHERE role_desc = 'Captain');"}
{"sample_id": 1984, "db_id": "soccer_2016", "gold_sql": "SELECT COUNT(Match_Id) FROM \"Match\" WHERE Match_Date LIKE '2008%'", "pred_sql": "SELECT COUNT(*) AS total_matches FROM match WHERE strftime('%Y', match_date) = '2008';"}
{"sample_id": 1971, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id WHERE SUBSTR(T3.Match_Date, 1, 4) = '2014' AND SUBSTR(T3.Match_Date, 7, 1) = '6' LIMIT 2", "pred_sql": "SELECT player.player_name \nFROM player \nJOIN player_match ON player.player_id = player_match.player_id \nJOIN match ON player_match.match_id = match.match_id \nWHERE match.match_date BETWEEN '2014-06-01' AND '2014-06-30' \nAND (match.team_1 = player_match.team_id OR match.team_2 = player_match.team_id);"}
{"sample_id": 1953, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Player_name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match WHERE T2.Season_Id = 9 ORDER BY T2.Match_Date DESC LIMIT 1", "pred_sql": "SELECT player.player_name FROM match JOIN player ON match.man_of_the_match = player.player_id WHERE match.season_id = 9 ORDER BY match.match_date DESC LIMIT 1;"}
{"sample_id": 1789, "db_id": "soccer_2016", "gold_sql": "SELECT COUNT(Match_Id) FROM \"Match\" WHERE Man_of_the_Match = 41", "pred_sql": "SELECT COUNT(*) AS man_of_the_match_count FROM match WHERE man_of_the_match = 41;"}
{"sample_id": 1961, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN Player AS T2 ON T1.Country_Id = T2.Country_Name ORDER BY T2.DOB DESC LIMIT 1", "pred_sql": "SELECT country.country_name FROM player JOIN country ON player.country_name = country.country_id ORDER BY dob DESC LIMIT 1;"}
{"sample_id": 1994, "db_id": "soccer_2016", "gold_sql": "SELECT AVG(T1.win_margin) FROM Match AS T1 INNER JOIN Venue AS T2 ON T1.venue_id = T2.venue_id WHERE T2.venue_name = 'Newlands'", "pred_sql": "SELECT AVG(win_margin) AS average_winning_margin \nFROM match \nJOIN venue ON match.venue_id = venue.venue_id \nWHERE venue.venue_name = 'Newlands';"}
{"sample_id": 1808, "db_id": "soccer_2016", "gold_sql": "SELECT T2.Venue_Name FROM \"Match\" AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T1.Win_Margin = 138", "pred_sql": "SELECT venue.venue_name FROM match JOIN venue ON match.venue_id = venue.venue_id WHERE match.win_margin = 138;"}
{"sample_id": 1844, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T2.Match_Date = '2009-05-07' AND T2.Win_Margin = 7", "pred_sql": "SELECT team.team_name \nFROM match \nJOIN team ON match.match_winner = team.team_id \nWHERE match.win_margin = 7 \nAND match.match_date = '2009-05-07';"}
{"sample_id": 1977, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Bowling_skill FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T1.Bowling_Id = T2.Bowling_skill INNER JOIN Country AS T3 ON T2.Country_Name = T3.Country_Id WHERE T3.Country_Name = 'Zimbabwea'", "pred_sql": "SELECT DISTINCT bowling_style.bowling_skill FROM player JOIN country ON player.country_name = country.country_id WHERE country.country_name = 'Zimbabwea';"}
{"sample_id": 1918, "db_id": "soccer_2016", "gold_sql": "SELECT T5.Team_Name, T1.Orange_Cap, T1.Purple_Cap FROM Season AS T1 INNER JOIN Match AS T2 ON T1.Season_Id = T2.Season_Id INNER JOIN Player_Match AS T3 ON T2.Match_Id = T3.Match_Id INNER JOIN Player AS T4 ON T3.Player_Id = T4.Player_Id INNER JOIN Team AS T5 ON T3.Team_Id = T5.Team_Id GROUP BY T5.Team_Name, T1.Orange_Cap, T1.Purple_Cap", "pred_sql": "SELECT DISTINCT t1.team_name, t2.team_name, s.season_year \nFROM season s \nJOIN player p1 ON s.purple_cap = p1.player_id \nJOIN team t1 ON p1.country_name = t1.team_id \nJOIN player p2 ON s.orange_cap = p2.player_id \nJOIN team t2 ON p2.country_name = t2.team_id \nWHERE t1.team_id != t2.team_id;"}
{"sample_id": 1967, "db_id": "soccer_2016", "gold_sql": "SELECT COUNT(Match_Id) FROM \"Match\" WHERE Match_Date LIKE '2011%'", "pred_sql": "SELECT COUNT(*) AS total_matches FROM match WHERE strftime('%Y', match_date) = '2011';"}
{"sample_id": 1793, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Bowling_Skill FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T2.Bowling_skill = T1.Bowling_Id WHERE T2.Player_Name = 'SC Ganguly'", "pred_sql": "SELECT bowling_skill FROM player WHERE player_name = 'SC Ganguly';"}
{"sample_id": 1913, "db_id": "soccer_2016", "gold_sql": "SELECT SUM(CASE WHEN DOB < '1990-06-29' THEN 1 ELSE 0 END) FROM Player WHERE Player_Name != 'Gurkeerat Singh'", "pred_sql": "SELECT COUNT(*) AS older_players_count \nFROM player \nWHERE dob < (SELECT dob FROM player WHERE player_name = 'Gurkeerat Singh')"}
{"sample_id": 1897, "db_id": "soccer_2016", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Role_Desc = 'CaptainKeeper' THEN 1 ELSE 0 END) AS REAL) * 100 / TOTAL(T1.Player_Id) FROM Player_Match AS T1 INNER JOIN Rolee AS T2 ON T1.Role_Id = T2.Role_Id", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM player)) AS percentage FROM player_match WHERE role_id IN (SELECT role_id FROM rolee WHERE role_desc IN ('captain', 'keeper')) GROUP BY player_id HAVING COUNT(DISTINCT role_id) = 2;"}
{"sample_id": 2020, "db_id": "soccer_2016", "gold_sql": "SELECT T2.Country_Name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_ID WHERE T1.Player_Name = 'SB Joshi'", "pred_sql": "SELECT country.country_name FROM player JOIN country ON player.country_name = country.country_id WHERE player.player_name = 'SB Joshi';"}
{"sample_id": 1870, "db_id": "soccer_2016", "gold_sql": "SELECT T3.Player_Name FROM Player_Match AS T1 INNER JOIN Match AS T2 ON T2.Match_Id = T1.Match_Id INNER JOIN Player AS T3 ON T3.Player_Id = T1.Player_Id INNER JOIN Rolee AS T4 ON T4.Role_Id = T1.Role_Id WHERE T2.Match_Date = '2008-06-01' AND T4.Role_Desc = 'Captain' AND T2.Match_Winner = T1.Team_Id", "pred_sql": "SELECT player.player_name FROM match JOIN player_match ON match.match_id = player_match.match_id JOIN team ON match.match_winner = team.team_id JOIN player ON player_match.player_id = player.player_id WHERE match.match_date = '2008-06-01' AND player_match.role_id = 'captain';"}
{"sample_id": 1848, "db_id": "soccer_2016", "gold_sql": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Match_Winner WHERE T1.Match_Date LIKE '2015%' AND T1.Match_Id = 829768", "pred_sql": "SELECT team.team_name \nFROM match \nJOIN team ON match.match_winner = team.team_id \nWHERE match.match_id = 829768 AND match.match_date BETWEEN '2015-01-01' AND '2015-12-31';"}
{"sample_id": 2037, "db_id": "soccer_2016", "gold_sql": "SELECT COUNT(Player_Id) FROM Player WHERE strftime('%Y', DOB) BETWEEN '1970' AND '1975'", "pred_sql": "SELECT COUNT(*) AS total_players FROM player WHERE dob BETWEEN '1970-01-01' AND '1975-12-31';"}
{"sample_id": 1964, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Venue_Name, T2.City_Name, T3.Country_Name FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id INNER JOIN Country AS T3 ON T2.Country_Id = T3.Country_Id INNER JOIN Match AS T4 ON T1.Venue_Id = T4.Venue_Id ORDER BY T4.Match_Date DESC LIMIT 1", "pred_sql": "SELECT venue.venue_name, city.city_name, country.country_name \nFROM match \nJOIN venue ON match.venue_id = venue.venue_id \nJOIN city ON venue.city_id = city.city_id \nJOIN country ON city.country_id = country.country_id \nORDER BY match.match_date DESC \nLIMIT 1;"}
{"sample_id": 2040, "db_id": "soccer_2016", "gold_sql": "SELECT T2.Match_Id FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.venue_id = T2.venue_id WHERE T1.Venue_Name = 'St George''s Park' ORDER BY T2.Win_Margin DESC LIMIT 1", "pred_sql": "SELECT match_id FROM match WHERE venue_id = (SELECT venue_id FROM venue WHERE venue_name = 'St. George's Park') ORDER BY win_margin DESC LIMIT 1;"}
{"sample_id": 1794, "db_id": "soccer_2016", "gold_sql": "SELECT SUM(CASE WHEN SUBSTR(T1.DOB, 1, 4) > 1985 THEN 1 ELSE 0 END) FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id WHERE T2.Batting_Hand = 'Right-hand bat'", "pred_sql": "SELECT COUNT(*) AS player_count FROM player WHERE batting_hand = (SELECT batting_id FROM batting_style WHERE batting_hand = 'right') AND dob > '1985-01-01';"}
{"sample_id": 1900, "db_id": "soccer_2016", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Bowling_skill = ' Legbreak' THEN 1 ELSE 0 END) AS REAL) * 100 / TOTAL(T1.Player_Id) FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM player)) AS percentage_legbreak_players FROM player WHERE bowling_skill = (SELECT bowling_id FROM bowling_style WHERE bowling_skill = 'Legbreak')"}
{"sample_id": 2018, "db_id": "soccer_2016", "gold_sql": "SELECT T5.Team_Name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match INNER JOIN Player_Match AS T3 ON T3.Player_Id = T1.Player_Id INNER JOIN Season AS T4 ON T2.Season_Id = T4.Season_Id INNER JOIN Team AS T5 ON T3.Team_Id = T5.Team_Id WHERE T4.Season_Year = 2008 AND T1.Player_Name = 'SC Ganguly' GROUP BY T5.Team_Name", "pred_sql": "SELECT team.team_name \nFROM player \nJOIN player_match ON player.player_id = player_match.player_id \nJOIN match ON player_match.match_id = match.match_id \nJOIN team ON player_match.team_id = team.team_id \nWHERE player.player_name = 'SC Ganguly' AND match.season_id = (SELECT season_id FROM season WHERE season_year = 2008);"}
{"sample_id": 2027, "db_id": "soccer_2016", "gold_sql": "SELECT COUNT(T2.Man_of_the_Match) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match INNER JOIN Player_Match AS T3 ON T3.Player_Id = T1.Player_Id WHERE T1.Player_Name = 'SC Ganguly'", "pred_sql": "SELECT COUNT(*) AS man_of_the_match_count FROM match WHERE man_of_the_match = (SELECT player_id FROM player WHERE player_name = 'SC Ganguly');"}
{"sample_id": 1989, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Player_Match AS T2 ON T1.Team_Id = T2.Team_Id INNER JOIN Player AS T3 ON T2.Player_Id = T3.Player_Id WHERE T2.match_id = 335989 AND T3.player_name = 'T Kohli'", "pred_sql": "SELECT team.team_name FROM player_match JOIN player ON player_match.player_id = player.player_id JOIN match ON player_match.match_id = match.match_id JOIN team ON player_match.team_id = team.team_id WHERE player.player_name = 'T Kohli' AND match.match_id = 335989;"}
{"sample_id": 1859, "db_id": "soccer_2016", "gold_sql": "SELECT Player_name FROM Player WHERE DOB LIKE '1971%'", "pred_sql": "SELECT player_name FROM player WHERE dob LIKE '1971%'"}
{"sample_id": 1792, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN Player AS T2 ON T2.Country_Name = T1.Country_Id WHERE T2.Country_Name IS NOT NULL ORDER BY T2.DOB LIMIT 1", "pred_sql": "SELECT country.country_name FROM player JOIN country ON player.country_name = country.country_id ORDER BY dob ASC LIMIT 1;"}
{"sample_id": 1795, "db_id": "soccer_2016", "gold_sql": "SELECT T2.Player_Name FROM Country AS T1 INNER JOIN Player AS T2 ON T2.Country_Name = T1.Country_id INNER JOIN Batting_Style AS T3 ON T2.Batting_hand = T3.Batting_Id WHERE T1.Country_Name = 'Australia' AND T3.Batting_Hand = 'Right-hand bat'", "pred_sql": "SELECT player_name FROM player WHERE batting_hand = (SELECT batting_id FROM batting_style WHERE batting_hand = 'right') AND country_name = (SELECT country_id FROM country WHERE country_name = 'Australia');"}
{"sample_id": 1920, "db_id": "soccer_2016", "gold_sql": "SELECT SUM(CASE WHEN T2.Batting_hand = 'Left-hand bat' THEN 1 ELSE 0 END) FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id", "pred_sql": "SELECT COUNT(*) AS left_hand_batsmen_count FROM player WHERE batting_hand = (SELECT batting_id FROM batting_style WHERE batting_hand = 'left')"}
{"sample_id": 1909, "db_id": "soccer_2016", "gold_sql": "SELECT AVG(T1.Player_Out) FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T1.Kind_Out = T2.Out_Id WHERE T2.Out_Name = 'lbw'", "pred_sql": "SELECT AVG(CASE WHEN kind_out = (SELECT out_id FROM out_type WHERE out_name = 'lbw') THEN 1 ELSE 0 END) - AVG(CASE WHEN kind_out = (SELECT out_id FROM out_type WHERE out_name = 'runout') THEN 1 ELSE 0 END) AS difference_in_average_outs\nFROM wicket_taken;"}
{"sample_id": 1847, "db_id": "soccer_2016", "gold_sql": "SELECT SUM(CASE WHEN T2.Team_Name = 'Pune Warriors' THEN 1 ELSE 0 END) FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Match_Winner", "pred_sql": "SELECT COUNT(*) AS total_won_matches \nFROM match \nJOIN team ON match.match_winner = team.team_id \nWHERE team.team_name = 'Pune Warriors';"}
{"sample_id": 1890, "db_id": "soccer_2016", "gold_sql": "SELECT Ball_Id FROM Ball_by_Ball WHERE Non_Striker = Ball_Id ORDER BY Ball_Id DESC LIMIT 1", "pred_sql": "SELECT non_striker, COUNT(*) AS balls_faced\nFROM ball_by_ball\nWHERE match_id = 501219\nGROUP BY non_striker\nORDER BY balls_faced DESC\nLIMIT 1;"}
{"sample_id": 1835, "db_id": "soccer_2016", "gold_sql": "SELECT Match_Date FROM \"Match\" WHERE team_1 = ( SELECT Team_Id FROM Team WHERE Team_Name = 'Chennai Super Kings' ) OR Team_2 = ( SELECT Team_Id FROM Team WHERE Team_Name = 'Chennai Super Kings' ) ORDER BY Match_Date ASC LIMIT 1", "pred_sql": "SELECT match_date FROM match WHERE team_1 = (SELECT team_id FROM team WHERE team_name = 'Chennai Super Kings') OR team_2 = (SELECT team_id FROM team WHERE team_name = 'Chennai Super Kings') ORDER BY match_date ASC LIMIT 1;"}
{"sample_id": 1958, "db_id": "soccer_2016", "gold_sql": "SELECT SUM(CASE WHEN T1.Season_Id = 8 THEN 1 ELSE 0 END) FROM \"Match\" AS T1 INNER JOIN Team AS T2 ON T1.Team_1 = T2.Team_Id OR T1.Team_2 = T2.Team_Id WHERE T2.Team_Name = 'Rajasthan Royals'", "pred_sql": "SELECT COUNT(*) AS match_count FROM match WHERE season_id = 8 AND (team_1 = 'Rajasthan Royals' OR team_2 = 'Rajasthan Royals');"}
{"sample_id": 1905, "db_id": "soccer_2016", "gold_sql": "SELECT T4.City_Name FROM \"Match\" AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id INNER JOIN Venue AS T3 ON T1.Venue_Id = T3.Venue_Id INNER JOIN City AS T4 ON T3.City_Id = T4.City_Id WHERE T2.Win_Type = 'NO Result' GROUP BY T4.City_Id ORDER BY COUNT(T2.Win_Type) ASC LIMIT 1", "pred_sql": "SELECT city.city_name, COUNT(match.match_id) AS no_result_count\nFROM match\nJOIN venue ON match.venue_id = venue.venue_id\nJOIN city ON venue.city_id = city.city_id\nWHERE match.outcome_type IS NULL\nGROUP BY city.city_name\nORDER BY no_result_count ASC\nLIMIT 1;"}
{"sample_id": 1892, "db_id": "soccer_2016", "gold_sql": "SELECT AVG(Innings_No) FROM Extra_Runs WHERE Innings_No = 2", "pred_sql": "SELECT match_id, AVG(extra_runs) AS average_extra_runs FROM extra_runs WHERE innings_no = 2 GROUP BY match_id;"}
{"sample_id": 1929, "db_id": "soccer_2016", "gold_sql": "SELECT COUNT(*) FROM Player WHERE DOB < '1975-10-16' AND Bowling_skill < 3", "pred_sql": "SELECT COUNT(*) AS player_count FROM player WHERE dob < '1975-10-16' AND bowling_skill < 3;"}
{"sample_id": 1908, "db_id": "soccer_2016", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.Team_1 = T1.Match_Winner = T1.Toss_Winner THEN 1 ELSE 0 END) AS REAL) * 100 / TOTAL(T1.Team_1) FROM \"Match\" AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id INNER JOIN Toss_Decision AS T3 ON T1.Toss_Decide = T3.Toss_Id WHERE T3.Toss_Name = 'field' AND T2.Win_Type = 'runs'", "pred_sql": "SELECT (COUNT(CASE WHEN m.toss_winner = m.team_1 AND m.toss_decide = 1 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_won_toss_and_fielded\nFROM match m\nJOIN win_by w ON m.win_type = w.win_id\nWHERE m.match_winner = m.team_1 AND w.win_type = 'runs';"}
{"sample_id": 1960, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Venue_Name FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id WHERE T2.City_Name = 'Abu Dhabi'", "pred_sql": "SELECT venue_name FROM venue INNER JOIN city ON venue.city_id = city.city_id WHERE city.city_name = 'Abu Dhabi';"}
{"sample_id": 1876, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Match_Id FROM Match AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match WHERE T2.Player_Name = 'BB McCullum'", "pred_sql": "SELECT match_id FROM match WHERE man_of_the_match = (SELECT player_id FROM player WHERE player_name = 'BB McCullum')"}
{"sample_id": 1992, "db_id": "soccer_2016", "gold_sql": "SELECT T2.match_id FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner WHERE T1.team_name = 'Royal Challengers Bangalore' AND T2.match_date LIKE '2012%' ORDER BY T2.win_margin DESC LIMIT 1", "pred_sql": "SELECT match_id FROM match WHERE win_margin = (SELECT MAX(win_margin) FROM match WHERE match_winner = (SELECT team_id FROM team WHERE team_name = 'Royal Challengers Bangalore'));"}
{"sample_id": 2031, "db_id": "soccer_2016", "gold_sql": "SELECT T4.Role_Desc FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id INNER JOIN Rolee AS T4 ON T2.Role_Id = T4.Role_Id INNER JOIN Season AS T5 ON T3.Season_Id = T5.Season_Id WHERE T1.Player_name = 'W Jaffer' AND T5.Season_Year = 2012", "pred_sql": "SELECT rolee.role_desc FROM player_match JOIN player ON player_match.player_id = player.player_id JOIN rolee ON player_match.role_id = rolee.role_id JOIN match ON player_match.match_id = match.match_id WHERE player.player_name = 'W Jaffer' AND match.season_id = (SELECT season_id FROM season WHERE season_year = 2012);"}
{"sample_id": 1980, "db_id": "soccer_2016", "gold_sql": "SELECT SUM(CASE WHEN Match_Date LIKE '2013%' THEN 1 ELSE 0 END) FROM \"Match\" AS T1 INNER JOIN Team AS T2 ON T1.Match_Winner = T2.Team_Id WHERE T2.Team_Name = 'Sunrisers Hyderabad'", "pred_sql": "SELECT COUNT(*) AS total_wins FROM match WHERE match_winner = (SELECT team_id FROM team WHERE team_name = 'Sunrisers Hyderabad') AND season_id = (SELECT season_id FROM season WHERE season_year = 2013);"}
{"sample_id": 1358, "db_id": "law_episode", "gold_sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10 LIMIT 3", "pred_sql": "SELECT episode_id, title, rating FROM episode ORDER BY rating DESC LIMIT 3;"}
{"sample_id": 1256, "db_id": "law_episode", "gold_sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T2.credited = 'true' AND T3.name = 'Park Dietz'", "pred_sql": "SELECT e.title FROM episode e JOIN credit c ON e.episode_id = c.episode_id JOIN person p ON c.person_id = p.person_id WHERE p.name = 'Park Dietz';"}
{"sample_id": 1353, "db_id": "law_episode", "gold_sql": "SELECT DISTINCT T1.birth_place FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.person_id = T2.person_id WHERE T1.person_id = 'nm0007064' AND T2.role = 'Narrator' AND T2.credited = 'false'", "pred_sql": "SELECT p.birth_place FROM person p JOIN credit c ON p.person_id = c.person_id WHERE p.person_id = 'nm0007064' AND c.role = 'Narrator' AND c.credited = 0;"}
{"sample_id": 1344, "db_id": "law_episode", "gold_sql": "SELECT SUM(T1.rating) / COUNT(T1.episode) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id", "pred_sql": "SELECT AVG(CAST(e.rating AS FLOAT)) AS average_rating\nFROM episode e\nJOIN award a ON e.episode_id = a.episode_id;"}
{"sample_id": 1255, "db_id": "law_episode", "gold_sql": "SELECT COUNT(T3.person_id) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T2.credited = 'true' AND T3.name = 'Park Dietz'", "pred_sql": "SELECT COUNT(*) AS credit_count FROM credit WHERE person_id = (SELECT person_id FROM person WHERE name = 'Park Dietz')"}
{"sample_id": 1264, "db_id": "law_episode", "gold_sql": "SELECT COUNT(T2.award_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T1.name = 'Rene Balcer'", "pred_sql": "SELECT COUNT(*) AS award_count FROM award WHERE person_id = (SELECT person_id FROM person WHERE name = 'Rene Balcer')"}
{"sample_id": 1313, "db_id": "law_episode", "gold_sql": "SELECT T1.rating FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T3.name = 'Jace Alexander'", "pred_sql": "SELECT e.rating FROM episode e JOIN credit c ON e.episode_id = c.episode_id WHERE c.person_id = (SELECT person_id FROM person WHERE name = 'Jace Alexander')"}
{"sample_id": 1291, "db_id": "law_episode", "gold_sql": "SELECT COUNT(T1.role) FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'Julia Roberts'", "pred_sql": "SELECT COUNT(DISTINCT credit.role) AS role_count \nFROM credit \nJOIN person ON credit.person_id = person.person_id \nJOIN episode ON credit.episode_id = episode.episode_id \nWHERE person.name = 'Julia Roberts';"}
{"sample_id": 1245, "db_id": "law_episode", "gold_sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Refuge: Part 1'", "pred_sql": "SELECT k.keyword FROM keyword k JOIN episode e ON k.episode_id = e.episode_id WHERE e.title = 'Refuge: Part 1';"}
{"sample_id": 1246, "db_id": "law_episode", "gold_sql": "SELECT COUNT(T2.keyword) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.season = 9 AND T1.episode = 23", "pred_sql": "SELECT COUNT(keyword) AS keyword_count FROM keyword WHERE episode_id IN (SELECT episode_id FROM episode WHERE season = '9' AND episode = '23' AND series = 'law_and_order');"}
{"sample_id": 1304, "db_id": "law_episode", "gold_sql": "SELECT T1.name FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.Result = 'Winner' AND T2.role = 'director'", "pred_sql": "SELECT DISTINCT p.name \nFROM person p \nJOIN award a ON p.person_id = a.person_id \nWHERE a.role = 'director' AND a.result = 'Winner' \nLIMIT 2;"}
{"sample_id": 1273, "db_id": "law_episode", "gold_sql": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.episode_id = 'tt0629204' AND T1.role = 'script supervisor'", "pred_sql": "SELECT person.name FROM person JOIN credit ON person.person_id = credit.person_id WHERE credit.episode_id = 'tt0629204' AND credit.role = 'script supervisor';"}
{"sample_id": 1280, "db_id": "law_episode", "gold_sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id GROUP BY T1.episode_id ORDER BY COUNT(T2.keyword) DESC LIMIT 1", "pred_sql": "SELECT e.title FROM episode e JOIN (SELECT episode_id, COUNT(keyword) as keyword_count FROM keyword GROUP BY episode_id) k ON e.episode_id = k.episode_id ORDER BY k.keyword_count DESC LIMIT 1;"}
{"sample_id": 1327, "db_id": "law_episode", "gold_sql": "SELECT T1.role FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE T3.episode = 9 AND T2.name = 'Jason Kuschner'", "pred_sql": "SELECT role FROM credit WHERE person_id = (SELECT person_id FROM person WHERE name = 'Jason Kuschner') AND episode_id = '9';"}
{"sample_id": 1263, "db_id": "law_episode", "gold_sql": "SELECT T1.role FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'Joseph Blair'", "pred_sql": "SELECT role FROM credit JOIN person ON credit.person_id = person.person_id WHERE person.name = 'Joseph Blair';"}
{"sample_id": 1267, "db_id": "law_episode", "gold_sql": "SELECT COUNT(T1.role) FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'J.K. Simmons'", "pred_sql": "SELECT COUNT(DISTINCT e.episode_id) AS episode_count \nFROM credit c \nJOIN person p ON c.person_id = p.person_id \nJOIN episode e ON c.episode_id = e.episode_id \nWHERE p.name = 'J.K. Simmons';"}
{"sample_id": 1277, "db_id": "law_episode", "gold_sql": "SELECT COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10", "pred_sql": "SELECT SUM(v.votes) AS total_votes\nFROM vote v\nJOIN episode e ON v.episode_id = e.episode_id\nWHERE v.stars = 10 AND e.episode_id = (\n    SELECT episode_id\n    FROM vote\n    GROUP BY episode_id\n    ORDER BY SUM(votes * stars) DESC\n    LIMIT 1\n)"}
{"sample_id": 1354, "db_id": "law_episode", "gold_sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Shield'", "pred_sql": "SELECT k.keyword FROM keyword k JOIN episode e ON k.episode_id = e.episode_id WHERE e.title = 'Shield';"}
{"sample_id": 1318, "db_id": "law_episode", "gold_sql": "SELECT T2.air_date, T2.rating FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.stars = 6 AND T2.episode = 12", "pred_sql": "SELECT air_date, rating, SUM(votes) AS total_votes\nFROM vote\nJOIN episode ON vote.episode_id = episode.episode_id\nWHERE stars = 6 AND episode.number_in_series = '12'\nGROUP BY air_date, rating;"}
{"sample_id": 1251, "db_id": "law_episode", "gold_sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10 ORDER BY T2.votes DESC LIMIT 1", "pred_sql": "SELECT e.title FROM episode e JOIN vote v ON e.episode_id = v.episode_id WHERE v.stars = 10 ORDER BY v.votes DESC LIMIT 1;"}
{"sample_id": 1326, "db_id": "law_episode", "gold_sql": "SELECT COUNT(T1.person_id) FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.episode_id = 'tt0629228' AND T1.category = 'Cast' AND T1.credited = 'false' AND T2.birth_country = 'USA'", "pred_sql": "SELECT COUNT(DISTINCT c.person_id) AS uncredited_count\nFROM credit c\nJOIN person p ON c.person_id = p.person_id\nWHERE c.episode_id = 'tt0629228' AND c.credited = 0 AND p.birth_country = 'USA';"}
{"sample_id": 1292, "db_id": "law_episode", "gold_sql": "SELECT T2.title FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.votes >= 30 AND T1.stars = 10 ORDER BY T1.votes DESC LIMIT 3", "pred_sql": "SELECT title FROM episode WHERE episode_id IN (SELECT episode_id FROM vote WHERE votes >= 30) ORDER BY (SELECT SUM(stars * votes) / SUM(votes) FROM vote WHERE episode_id = episode.episode_id) DESC LIMIT 3;"}
{"sample_id": 5048, "db_id": "olympics", "gold_sql": "SELECT T2.region_name FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id GROUP BY T2.region_name ORDER BY COUNT(T1.person_id) DESC LIMIT 1", "pred_sql": "SELECT noc_region.region_name, COUNT(person.id) AS athlete_count\nFROM person\nJOIN person_region ON person.id = person_region.person_id\nJOIN noc_region ON person_region.region_id = noc_region.id\nGROUP BY noc_region.region_name\nORDER BY athlete_count DESC\nLIMIT 1;"}
{"sample_id": 5014, "db_id": "olympics", "gold_sql": "SELECT T3.height FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Portugal' ORDER BY T3.height DESC LIMIT 1", "pred_sql": "SELECT MAX(height) AS tallest_height FROM person INNER JOIN person_region ON person.id = person_region.person_id INNER JOIN noc_region ON person_region.region_id = noc_region.id WHERE noc_region.region_name = 'Portugal' AND height != '0';"}
{"sample_id": 5025, "db_id": "olympics", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.age > 30 THEN 1 END) AS REAL) * 100 / COUNT(T2.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id WHERE T1.medal_id = 1", "pred_sql": "SELECT (COUNT(CASE WHEN gc.age > 30 AND ce.medal_id = 1 THEN 1 END) * 100.0 / COUNT(CASE WHEN ce.medal_id = 1 THEN 1 END)) AS percentage_champions_over_30\nFROM games_competitor gc\nJOIN competitor_event ce ON gc.id = ce.competitor_id;"}
{"sample_id": 5038, "db_id": "olympics", "gold_sql": "SELECT T1.games_id FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'London'", "pred_sql": "SELECT id FROM games WHERE id IN (SELECT games_id FROM games_city WHERE city_id = (SELECT id FROM city WHERE city_name = 'London'));"}
{"sample_id": 4946, "db_id": "olympics", "gold_sql": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Australia'", "pred_sql": "SELECT COUNT(DISTINCT person.id) AS athlete_count FROM person INNER JOIN person_region ON person.id = person_region.person_id INNER JOIN noc_region ON person_region.region_id = noc_region.id WHERE noc_region.region_name = 'Australia';"}
{"sample_id": 4970, "db_id": "olympics", "gold_sql": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1992 Summer'", "pred_sql": "SELECT AVG(age) AS average_age FROM games_competitor gc JOIN games g ON gc.games_id = g.id WHERE g.games_year = 1992 AND g.games_name LIKE '%Summer%';"}
{"sample_id": 5059, "db_id": "olympics", "gold_sql": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person_region AS T3 ON T2.person_id = T3.person_id INNER JOIN noc_region AS T4 ON T3.region_id = T4.id WHERE T1.games_name = '2012 Summer' AND T4.region_name = 'Argentina'", "pred_sql": "SELECT AVG(gc.age) AS average_age\nFROM games_competitor gc\nJOIN games g ON gc.games_id = g.id\nJOIN games_city gc2 ON g.id = gc2.games_id\nJOIN city c ON gc2.city_id = c.id\nJOIN person_region pr ON gc.person_id = pr.person_id\nJOIN noc_region nr ON pr.region_id = nr.id\nWHERE nr.noc = 'ARG' AND g.games_year = 2012 AND g.games_name LIKE '%Summer%';"}
{"sample_id": 4983, "db_id": "olympics", "gold_sql": "SELECT COUNT(T3.person_id) FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN person_region AS T4 ON T3.person_id = T4.person_id INNER JOIN noc_region AS T5 ON T4.region_id = T5.id WHERE T5.region_name = 'Malaysia' AND T1.id != 4", "pred_sql": "SELECT COUNT(DISTINCT gc.person_id) AS athlete_count\nFROM games_competitor gc\nJOIN competitor_event ce ON gc.id = ce.competitor_id\nJOIN person_region pr ON gc.person_id = pr.person_id\nJOIN noc_region nr ON pr.region_id = nr.id\nWHERE nr.noc = 'MYS' AND ce.medal_id IS NOT NULL;"}
{"sample_id": 4962, "db_id": "olympics", "gold_sql": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age DESC LIMIT 1", "pred_sql": "SELECT full_name FROM person ORDER BY age DESC LIMIT 1;"}
{"sample_id": 5010, "db_id": "olympics", "gold_sql": "SELECT COUNT(T2.games_id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Prithipal Singh'", "pred_sql": "SELECT COUNT(DISTINCT games.id) AS games_participated\nFROM games_competitor\nJOIN person ON games_competitor.person_id = person.id\nWHERE person.full_name = 'Prithipal Singh';"}
{"sample_id": 4923, "db_id": "olympics", "gold_sql": "SELECT T3.games_year FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London' ORDER BY T3.games_year LIMIT 1", "pred_sql": "SELECT MIN(games_year) AS earliest_year FROM games INNER JOIN games_city ON games.id = games_city.games_id INNER JOIN city ON games_city.city_id = city.id WHERE city.city_name = 'London';"}
{"sample_id": 5039, "db_id": "olympics", "gold_sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.season = 'Summer' AND T2.age < 30", "pred_sql": "SELECT COUNT(DISTINCT gc.person_id) AS num_participants\nFROM games_competitor gc\nJOIN games g ON gc.games_id = g.id\nWHERE g.games_year % 4 = 0 AND g.games_name LIKE '%summer%' AND gc.age < 30;"}
{"sample_id": 4931, "db_id": "olympics", "gold_sql": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Peter Kohnke'", "pred_sql": "SELECT noc_region.region_name \nFROM person \nJOIN person_region ON person.id = person_region.person_id \nJOIN noc_region ON person_region.region_id = noc_region.id \nWHERE person.full_name = 'Peter Kohnke';"}
{"sample_id": 5056, "db_id": "olympics", "gold_sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1992 Winter' AND T2.age > 30", "pred_sql": "SELECT COUNT(DISTINCT gc.person_id) AS competitors_over_30\nFROM games g\nJOIN games_competitor gc ON g.id = gc.games_id\nWHERE g.games_year = 1992 AND gc.age > 30;"}
{"sample_id": 5081, "db_id": "olympics", "gold_sql": "SELECT DISTINCT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.gender = 'M' AND T3.height * 100 > ( SELECT AVG(height) FROM person WHERE gender = 'M' ) * 87", "pred_sql": "SELECT DISTINCT nr.region_name \nFROM person p \nJOIN person_region pr ON p.id = pr.person_id \nJOIN noc_region nr ON pr.region_id = nr.id \nWHERE p.gender = 'M' \nAND p.height > (SELECT AVG(height) * 0.87 FROM person)"}
{"sample_id": 4954, "db_id": "olympics", "gold_sql": "SELECT P1 , ( SELECT MAX(P2) - MIN(P2) FROM ( SELECT COUNT(T2.person_id) AS P2 FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name IN ('1988 Winter', '1988 Summer') GROUP BY T1.season ) ORDER BY P2 DESC LIMIT 1 ) FROM ( SELECT T1.season AS P1, COUNT(T2.person_id) AS P2 FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name IN ('1988 Winter', '1988 Summer') GROUP BY T1.season ) ORDER BY P2 DESC LIMIT 1", "pred_sql": "WITH CompetitorCounts AS (  SELECT g.id AS game_id, COUNT(gc.id) AS competitor_count  FROM games g  JOIN games_competitor gc ON g.id = gc.games_id  WHERE g.games_year = 1988 AND (g.games_name LIKE '%Winter%' OR g.games_name LIKE '%Summer%')  GROUP BY g.id),  MaxCompetitors AS (  SELECT game_id, competitor_count, ROW_NUMBER() OVER (ORDER BY competitor_count DESC) AS rank  FROM CompetitorCounts)  SELECT MAX(CASE WHEN rank = 1 THEN competitor_count END) AS max_competitors_winter,  MAX(CASE WHEN rank = 2 THEN competitor_count END) AS max_competitors_summer,  (MAX(CASE WHEN rank = 1 THEN competitor_count END) - MAX(CASE WHEN rank = 2 THEN competitor_count END)) AS difference  FROM MaxCompetitors;"}
{"sample_id": 4976, "db_id": "olympics", "gold_sql": "SELECT COUNT(T2.competitor_id) FROM event AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.event_id WHERE T1.event_name LIKE 'Ice Hockey Men%s Ice Hockey' AND T2.medal_id = 1", "pred_sql": "SELECT COUNT(*) AS gold_medals_count \nFROM competitor_event ce \nJOIN event e ON ce.event_id = e.id \nJOIN sport s ON e.sport_id = s.id \nJOIN medal m ON ce.medal_id = m.id \nWHERE m.medal_name = 'Gold' \nAND s.sport_name = 'Ice Hockey' \nAND e.event_name = 'Men's Ice Hockey';"}
{"sample_id": 4929, "db_id": "olympics", "gold_sql": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London'", "pred_sql": "SELECT COUNT(*) AS number_of_games FROM games_city gc JOIN city c ON gc.city_id = c.id WHERE c.city_name = 'London';"}
{"sample_id": 4961, "db_id": "olympics", "gold_sql": "SELECT DISTINCT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id INNER JOIN competitor_event AS T3 ON T2.id = T3.event_id INNER JOIN games_competitor AS T4 ON T3.competitor_id = T4.id INNER JOIN person AS T5 ON T4.person_id = T5.id WHERE T5.full_name = 'Chin Eei Hui'", "pred_sql": "SELECT sport.sport_name \nFROM sport \nJOIN event ON sport.id = event.sport_id \nJOIN competitor_event ON event.id = competitor_event.event_id \nJOIN games_competitor ON competitor_event.competitor_id = games_competitor.id \nJOIN person ON games_competitor.person_id = person.id \nWHERE person.full_name = 'Chin Eei Hui';"}
{"sample_id": 5074, "db_id": "olympics", "gold_sql": "SELECT DISTINCT T1.season FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.height = 180 AND T3.weight = 73", "pred_sql": "SELECT g.season FROM games g JOIN games_competitor gc ON g.id = gc.games_id JOIN person p ON gc.person_id = p.id WHERE p.weight = 73 AND p.height = 180;"}
{"sample_id": 5045, "db_id": "olympics", "gold_sql": "SELECT T2.event_id FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id WHERE T1.medal_name = 'Gold'", "pred_sql": "SELECT DISTINCT competitor_event.event_id FROM competitor_event WHERE competitor_event.medal_id = 1;"}
{"sample_id": 4965, "db_id": "olympics", "gold_sql": "SELECT COUNT(T1.person_id) FROM games_competitor AS T1 INNER JOIN games_city AS T2 ON T1.games_id = T2.games_id INNER JOIN city AS T3 ON T2.city_id = T3.id WHERE T3.city_name = 'Sapporo'", "pred_sql": "SELECT COUNT(DISTINCT gc.person_id) AS number_of_participants FROM games g JOIN games_city gc ON g.id = gc.games_id WHERE g.games_name = '1972 season'"}
{"sample_id": 5015, "db_id": "olympics", "gold_sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1968 Winter'", "pred_sql": "SELECT city.city_name FROM games_city JOIN games ON games_city.games_id = games.id JOIN city ON games_city.city_id = city.id WHERE games.games_year = 1968 AND games_name LIKE '%Winter%';"}
{"sample_id": 5036, "db_id": "olympics", "gold_sql": "SELECT T2.height FROM person_region AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.id WHERE T1.region_id = 7", "pred_sql": "SELECT person.height FROM person JOIN person_region ON person.id = person_region.person_id WHERE person_region.region_id = 7;"}
{"sample_id": 5071, "db_id": "olympics", "gold_sql": "SELECT T1.games_year, T1.season FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Sohail Abbas'", "pred_sql": "SELECT g.games_year, g.season FROM games g JOIN games_competitor gc ON g.id = gc.games_id JOIN person p ON gc.person_id = p.id WHERE p.full_name = 'Sohail Abbas';"}
{"sample_id": 5022, "db_id": "olympics", "gold_sql": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Los Angeles'", "pred_sql": "SELECT g.games_name FROM games g JOIN games_city gc ON g.id = gc.games_id JOIN city c ON gc.city_id = c.id WHERE c.city_name = 'Los Angeles';"}
{"sample_id": 5067, "db_id": "olympics", "gold_sql": "SELECT T4.city_name FROM games_competitor AS T1 INNER JOIN games AS T2 ON T1.games_id = T2.id INNER JOIN games_city AS T3 ON T1.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id ORDER BY T1.age DESC LIMIT 1", "pred_sql": "SELECT city.city_name FROM city JOIN games_city ON city.id = games_city.city_id JOIN games_competitor ON games_city.games_id = games_competitor.games_id WHERE games_competitor.age = (SELECT MAX(age) FROM games_competitor);"}
{"sample_id": 5029, "db_id": "olympics", "gold_sql": "SELECT T3.full_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1936 Summer'", "pred_sql": "SELECT person.full_name FROM games_competitor JOIN games ON games_competitor.games_id = games.id JOIN competitor_event ON games_competitor.id = competitor_event.competitor_id JOIN event ON competitor_event.event_id = event.id WHERE games.games_year = 1936 AND games.games_name LIKE '%Summer%';"}
{"sample_id": 5007, "db_id": "olympics", "gold_sql": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Vijay Singh Chauhan'", "pred_sql": "SELECT noc_region.region_name \nFROM person \nJOIN person_region ON person.id = person_region.person_id \nJOIN noc_region ON person_region.region_id = noc_region.id \nWHERE person.full_name = 'Vijay Singh Chauhan';"}
{"sample_id": 5057, "db_id": "olympics", "gold_sql": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T4.city_name = 'Barcelona' GROUP BY T1.id ORDER BY COUNT(T2.person_id) DESC LIMIT 1", "pred_sql": "SELECT g.games_name FROM games g JOIN games_city gc ON g.id = gc.games_id JOIN games_competitor gc2 ON g.id = gc2.games_id WHERE gc.city_id = (SELECT id FROM city WHERE city_name = 'Barcelona') GROUP BY g.id ORDER BY COUNT(gc2.id) DESC LIMIT 1;"}
{"sample_id": 4969, "db_id": "olympics", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.gender = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN event AS T4 ON T3.event_id = T4.id WHERE T4.event_name = 'Equestrianism Mixed Three-Day Event, Individual'", "pred_sql": "SELECT (COUNT(CASE WHEN p.gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_women\nFROM games_competitor gc\nJOIN competitor_event ce ON gc.id = ce.competitor_id\nJOIN event e ON ce.event_id = e.id\nJOIN sport s ON e.sport_id = s.id\nJOIN person p ON gc.person_id = p.id\nWHERE s.sport_name = 'Equestrianism' AND e.event_name = 'Mixed Three-Day Event, Individual';"}
{"sample_id": 5077, "db_id": "olympics", "gold_sql": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Iran' AND T3.gender = 'F'", "pred_sql": "SELECT COUNT(DISTINCT gc.person_id) AS female_competitors_count \nFROM games_competitor gc \nJOIN person p ON gc.person_id = p.id \nJOIN person_region pr ON p.id = pr.person_id \nJOIN noc_region nr ON pr.region_id = nr.id \nWHERE p.gender = 'F' AND nr.noc = 'IRN';"}
{"sample_id": 5064, "db_id": "olympics", "gold_sql": "SELECT T1.noc FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.weight = 77", "pred_sql": "SELECT DISTINCT noc_region.noc FROM person JOIN person_region ON person.id = person_region.person_id JOIN noc_region ON person_region.region_id = noc_region.id WHERE person.weight = 77;"}
{"sample_id": 10280, "db_id": "formula_1", "gold_sql": "SELECT T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 24 AND T1.points = 1", "pred_sql": "SELECT constructors.nationality FROM constructorresults JOIN constructors ON constructorresults.constructorid = constructors.constructorid WHERE constructorresults.points = '1' AND constructorresults.raceid IN (SELECT raceid FROM races WHERE round = '24')"}
{"sample_id": 10346, "db_id": "formula_1", "gold_sql": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'", "pred_sql": "SELECT races.date FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.circuitref = 'Barcelona-Catalunya';"}
{"sample_id": 10299, "db_id": "formula_1", "gold_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1", "pred_sql": "SELECT forename, surname, dob FROM drivers d JOIN results r ON d.driverid = r.driverid WHERE r.raceid = '872' ORDER BY dob DESC LIMIT 1;"}
{"sample_id": 10429, "db_id": "formula_1", "gold_sql": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.duration DESC LIMIT 1", "pred_sql": "SELECT MAX(duration) AS longest_pit_stop\nFROM pitstops\nJOIN drivers ON pitstops.driverid = drivers.driverid\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';"}
{"sample_id": 10395, "db_id": "formula_1", "gold_sql": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Spanish' AND STRFTIME('%Y', T2.dob) < '1982' ORDER BY T1.time DESC LIMIT 10", "pred_sql": "SELECT d.forename, d.surname, l.time \nFROM drivers d \nJOIN laptimes l ON d.driverid = l.driverid \nWHERE d.nationality = 'Spanish' AND d.dob < '1982-01-01' \nORDER BY l.time ASC \nLIMIT 10;"}
{"sample_id": 10370, "db_id": "formula_1", "gold_sql": "SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'", "pred_sql": "SELECT MAX(points) AS max_points FROM constructorstandings JOIN constructors ON constructorstandings.constructorid = constructors.constructorid WHERE constructors.nationality = 'British';"}
{"sample_id": 10348, "db_id": "formula_1", "gold_sql": "SELECT T2.fastestLapTime FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1", "pred_sql": "SELECT MIN(laptimes.time) AS fastest_lap_time\nFROM laptimes\nJOIN results ON laptimes.raceid = results.raceid AND laptimes.driverid = results.driverid\nJOIN drivers ON results.driverid = drivers.driverid\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';"}
{"sample_id": 10404, "db_id": "formula_1", "gold_sql": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 on T1.driverId = T2.driverId INNER JOIN status AS T3 on T2.statusId = T3.statusId WHERE T3.status = 'Puncture' AND T1.nationality = 'American'", "pred_sql": "SELECT COUNT(DISTINCT d.driverid) AS american_driver_count\nFROM drivers d\nJOIN results r ON d.driverid = r.driverid\nJOIN status s ON r.statusid = s.statusid\nWHERE d.nationality = 'American' AND s.status = 'Puncture';"}
{"sample_id": 10364, "db_id": "formula_1", "gold_sql": "SELECT AVG(CAST(SUBSTR(T2.fastestLapTime, 1, INSTR(T2.fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, ':') + 1) AS REAL)) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.surname = 'Hamilton' AND T1.forename = 'Lewis'", "pred_sql": "SELECT AVG(fastestlaptime) / 1000.0 AS average_fastest_lap_time_seconds\nFROM results\nJOIN drivers ON results.driverid = drivers.driverid\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'"}
{"sample_id": 10423, "db_id": "formula_1", "gold_sql": "SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1", "pred_sql": "SELECT d.forename || ' ' || d.surname AS full_name \nFROM qualifying q \nJOIN races r ON q.raceid = r.raceid \nJOIN circuits c ON r.circuitid = c.circuitid \nJOIN drivers d ON q.driverid = d.driverid \nWHERE q.position = 1 \nAND r.round = 3 \nAND r.year = '2008' \nAND c.name = 'Marina Bay Street Circuit';"}
{"sample_id": 10388, "db_id": "formula_1", "gold_sql": "SELECT COUNT(driverId) FROM driverStandings WHERE raceId = 18", "pred_sql": "SELECT COUNT(DISTINCT driverid) AS driver_count FROM results WHERE raceid = '18';"}
{"sample_id": 10390, "db_id": "formula_1", "gold_sql": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'", "pred_sql": "SELECT driverref FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';"}
{"sample_id": 10332, "db_id": "formula_1", "gold_sql": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'", "pred_sql": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit';"}
{"sample_id": 10360, "db_id": "formula_1", "gold_sql": "SELECT T1.forename, T1.surname, T1.url FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T2.time LIKE '_:%:__.___' AND T3.year = 2008", "pred_sql": "SELECT d.forename, d.surname, c.name AS constructor_name, c.url AS constructor_url \nFROM results r \nJOIN drivers d ON r.driverid = d.driverid \nJOIN constructors c ON r.constructorid = c.constructorid \nJOIN races ra ON r.raceid = ra.raceid \nWHERE ra.year = '2008' AND ra.name = 'Australian Grand Prix' AND r.position = '1';"}
{"sample_id": 10373, "db_id": "formula_1", "gold_sql": "SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2", "pred_sql": "SELECT COUNT(DISTINCT c.constructorid) AS japanese_zero_points_constructors\nFROM constructors c\nJOIN constructorresults cr ON c.constructorid = cr.constructorid\nJOIN races r ON cr.raceid = r.raceid\nWHERE c.nationality = 'Japanese'\nAND cr.points = '0'\nGROUP BY c.constructorid\nHAVING COUNT(DISTINCT r.raceid) = 2;"}
{"sample_id": 10384, "db_id": "formula_1", "gold_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005", "pred_sql": "SELECT ROUND((COUNT(DISTINCT d.driverid) * 100.0 / (SELECT COUNT(DISTINCT driverid) FROM drivers WHERE dob < '1985-01-01')), 2) AS percentage\nFROM laptimes l\nJOIN drivers d ON l.driverid = d.driverid\nJOIN races r ON l.raceid = r.raceid\nWHERE r.year BETWEEN '2000' AND '2005' AND l.lap > 50;"}
{"sample_id": 10436, "db_id": "formula_1", "gold_sql": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1", "pred_sql": "SELECT l.driverid, l.lap, l.time, c.circuitref, c.name, c.location \nFROM laptimes l \nJOIN races r ON l.raceid = r.raceid \nJOIN circuits c ON r.circuitid = c.circuitid \nWHERE c.country = 'Italy' \nORDER BY l.lap ASC;"}
{"sample_id": 10403, "db_id": "formula_1", "gold_sql": "SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1", "pred_sql": "SELECT seasons.year, drivers.forename || ' ' || drivers.surname AS driver_name, races.date, races.time\nFROM qualifying\nJOIN drivers ON qualifying.driverid = drivers.driverid\nJOIN races ON qualifying.raceid = races.raceid\nJOIN seasons ON races.year = seasons.year\nWHERE drivers.dob = (SELECT MIN(dob) FROM drivers)\nLIMIT 1;"}
{"sample_id": 10335, "db_id": "formula_1", "gold_sql": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1", "pred_sql": "SELECT country FROM circuits ORDER BY CAST(alt AS INTEGER) DESC LIMIT 1;"}
{"sample_id": 10415, "db_id": "formula_1", "gold_sql": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'", "pred_sql": "SELECT location, country, lat, lng FROM circuits WHERE circuitref = 'Hungaroring';"}
{"sample_id": 10359, "db_id": "formula_1", "gold_sql": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank = 2 AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008", "pred_sql": "SELECT results.time FROM results JOIN races ON results.raceid = races.raceid WHERE races.year = '2008' AND races.name = 'Australian Grand Prix' AND results.position = '2';"}
{"sample_id": 10417, "db_id": "formula_1", "gold_sql": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'", "pred_sql": "SELECT AVG(results.points) AS average_score\nFROM results\nJOIN races ON results.raceid = races.raceid\nJOIN drivers ON results.driverid = drivers.driverid\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Turkish Grand Prix';"}
{"sample_id": 10380, "db_id": "formula_1", "gold_sql": "SELECT T2.forename, T2.surname, T1.fastestLapTime FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1", "pred_sql": "SELECT d.forename, d.surname FROM results r JOIN drivers d ON r.driverid = d.driverid ORDER BY r.fastestlaptime ASC LIMIT 1;"}
{"sample_id": 10354, "db_id": "formula_1", "gold_sql": "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'", "pred_sql": "SELECT DISTINCT races.year \nFROM results \nJOIN drivers ON results.driverid = drivers.driverid \nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';"}
{"sample_id": 10425, "db_id": "formula_1", "gold_sql": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId WHERE T3.statusId = 3 AND T2.name = 'Canadian Grand Prix' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1", "pred_sql": "SELECT COUNT(*) AS accident_count\nFROM results r\nJOIN races ra ON r.raceid = ra.raceid\nJOIN driverstandings ds ON r.driverid = ds.driverid\nWHERE ra.name = 'Canadian Grand Prix' AND r.statusid = 'accident'\nGROUP BY r.driverid\nORDER BY accident_count DESC\nLIMIT 1;"}
{"sample_id": 10341, "db_id": "formula_1", "gold_sql": "SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'", "pred_sql": "SELECT circuits.name FROM circuits JOIN races ON circuits.circuitid = races.circuitid WHERE races.year = '2009' AND races.name = 'Spanish Grand Prix';"}
{"sample_id": 10294, "db_id": "formula_1", "gold_sql": "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'", "pred_sql": "SELECT d.code FROM drivers d JOIN qualifying q ON d.driverid = q.driverid WHERE q.raceid = (SELECT raceid FROM races WHERE round = 45) AND q.q3 = '0:01:33';"}
{"sample_id": 10409, "db_id": "formula_1", "gold_sql": "SELECT AVG(T1.fastestLapTime) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank < 11 AND T2.year = 2006 AND T2.name = 'United States Grand Prix'", "pred_sql": "SELECT AVG(fastestlaptime) AS average_fastest_lap_time\nFROM results\nJOIN races ON results.raceid = races.raceid\nWHERE races.year = '2006' AND races.name = 'United States Grand Prix'\nAND results.position <= 10;"}
{"sample_id": 10419, "db_id": "formula_1", "gold_sql": "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(driverId) DESC LIMIT 1", "pred_sql": "SELECT nationality, COUNT(*) as count FROM drivers GROUP BY nationality ORDER BY count DESC LIMIT 1;"}
{"sample_id": 10350, "db_id": "formula_1", "gold_sql": "SELECT T3.forename, T3.surname, T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Canadian Grand Prix' AND T2.rank = 1 AND T1.year = 2007", "pred_sql": "SELECT d.driverref FROM results r JOIN races ra ON r.raceid = ra.raceid JOIN drivers d ON r.driverid = d.driverid WHERE ra.name = 'Canadian Grand Prix' AND ra.year = '2007' AND r.position = '1';"}
{"sample_id": 10378, "db_id": "formula_1", "gold_sql": "SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) > '1975' AND T1.rank = 2", "pred_sql": "SELECT forename, surname FROM drivers WHERE dob > '1975-01-01' AND driverid IN (SELECT driverid FROM driverstandings WHERE position = 2)"}
{"sample_id": 10408, "db_id": "formula_1", "gold_sql": "SELECT T1.milliseconds FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.lap = 1 ORDER BY T1.time LIMIT 1", "pred_sql": "SELECT r.name, r.date, l.time AS fastest_lap_time_milliseconds \nFROM races r \nJOIN laptimes l ON r.raceid = l.raceid \nWHERE l.lap = 1 \nORDER BY l.time ASC \nLIMIT 1;"}
{"sample_id": 10406, "db_id": "formula_1", "gold_sql": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId ORDER BY T2.wins DESC LIMIT 1", "pred_sql": "SELECT c.url FROM constructors c JOIN (SELECT constructorid, SUM(wins) AS total_wins FROM constructorstandings GROUP BY constructorid ORDER BY total_wins DESC LIMIT 1) AS top_constructor ON c.constructorid = top_constructor.constructorid;"}
{"sample_id": 10426, "db_id": "formula_1", "gold_sql": "SELECT SUM(T1.wins),T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId ORDER BY T2.dob ASC LIMIT 1", "pred_sql": "SELECT CONCAT(forename, ' ', surname) AS full_name, COUNT(results.position) AS wins\nFROM drivers\nJOIN results ON drivers.driverid = results.driverid\nWHERE results.position = '1'\nAND drivers.dob = (SELECT MIN(dob) FROM drivers)\nGROUP BY drivers.driverid;"}
{"sample_id": 3134, "db_id": "cars", "gold_sql": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'chevrolet vega 2300'", "pred_sql": "SELECT price.price FROM price JOIN data ON price.id = data.id WHERE data.car_name = 'Chevrolet Vega 2300';"}
{"sample_id": 3078, "db_id": "cars", "gold_sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.car_name = 'chevrolet malibu'", "pred_sql": "SELECT country.origin FROM country JOIN production ON country.origin = production.country JOIN data ON production.id = data.id WHERE data.car_name = 'Chevrolet Malibu';"}
{"sample_id": 3082, "db_id": "cars", "gold_sql": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'volkswagen dasher' AND T1.acceleration = '14.1'", "pred_sql": "SELECT price.price FROM data JOIN price ON data.id = price.id JOIN production ON data.id = production.id WHERE data.car_name = 'Volkswagen Dasher' AND data.acceleration = '14.1';"}
{"sample_id": 3137, "db_id": "cars", "gold_sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T2.model_year = '1975' ORDER BY T1.mpg DESC LIMIT 1", "pred_sql": "SELECT car_name, mpg FROM data JOIN production ON data.id = production.id WHERE model_year = 1975 ORDER BY mpg DESC LIMIT 1;"}
{"sample_id": 3136, "db_id": "cars", "gold_sql": "SELECT DISTINCT T3.price FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN price AS T3 ON T3.ID = T2.ID WHERE T1.car_name LIKE 'ford%' AND T2.model_year BETWEEN 1970 AND 1980", "pred_sql": "SELECT price.price FROM price JOIN production ON price.id = production.id JOIN data ON production.id = data.id WHERE data.car_name LIKE 'Ford%' AND production.model_year BETWEEN 1970 AND 1980;"}
{"sample_id": 3089, "db_id": "cars", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.country = 'Japan' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM production)) AS percentage_japanese_cars FROM production JOIN country ON production.country = country.origin WHERE country.origin = 'Japan';"}
{"sample_id": 3077, "db_id": "cars", "gold_sql": "SELECT COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'Europe'", "pred_sql": "SELECT COUNT(*) AS car_count FROM country WHERE origin = 'Europe';"}
{"sample_id": 3141, "db_id": "cars", "gold_sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1", "pred_sql": "SELECT car_name FROM price JOIN data ON price.id = data.id ORDER BY price DESC LIMIT 1;"}
{"sample_id": 3073, "db_id": "cars", "gold_sql": "SELECT T1.weight FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price > 40000", "pred_sql": "SELECT data.weight FROM data JOIN price ON data.id = price.id WHERE price.price > 40000;"}
{"sample_id": 3106, "db_id": "cars", "gold_sql": "SELECT AVG(T1.price) FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T3.country = 'Europe'", "pred_sql": "SELECT AVG(price.price) AS average_price FROM price JOIN production ON price.id = production.id JOIN country ON production.country = country.origin WHERE country.origin = 'Europe';"}
{"sample_id": 3067, "db_id": "cars", "gold_sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.car_name = 'ford torino' AND T2.model_year = 1970", "pred_sql": "SELECT country.origin FROM country JOIN production ON country.origin = production.country JOIN data ON production.id = data.id WHERE data.car_name = 'ford torino' AND production.model_year = 1970;"}
{"sample_id": 3079, "db_id": "cars", "gold_sql": "SELECT T1.mpg FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1", "pred_sql": "SELECT d.mpg FROM data d JOIN price p ON d.id = p.id WHERE p.price = (SELECT MAX(price) FROM price);"}
{"sample_id": 3084, "db_id": "cars", "gold_sql": "SELECT T1.model FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = '32650.65157'", "pred_sql": "SELECT model_year FROM production JOIN price ON production.id = price.id WHERE price.price = 32650.65157;"}
{"sample_id": 3126, "db_id": "cars", "gold_sql": "SELECT T3.country FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country ORDER BY T1.price ASC LIMIT 1", "pred_sql": "SELECT country.origin FROM price JOIN production ON price.id = production.id JOIN country ON production.country = country.origin ORDER BY price.price ASC LIMIT 1;"}
{"sample_id": 3110, "db_id": "cars", "gold_sql": "SELECT T4.ID FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T3.country = 'Japan' AND T1.price > 3500 AND T4.acceleration = 14", "pred_sql": "SELECT production.id FROM production JOIN price ON production.id = price.id WHERE production.country = (SELECT origin FROM country WHERE country = 'Japan') AND price.price > 35000 AND data.acceleration = 14;"}
{"sample_id": 3085, "db_id": "cars", "gold_sql": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'toyota corona hardtop'", "pred_sql": "SELECT price.price FROM price JOIN data ON price.id = data.id WHERE data.car_name = 'Toyota Corona hardtop'"}
{"sample_id": 8902, "db_id": "cookbook", "gold_sql": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id INNER JOIN Nutrition AS T3 ON T3.recipe_id = T2.recipe_id WHERE T2.max_qty = T2.min_qty ORDER BY T3.carbo DESC LIMIT 1", "pred_sql": "SELECT i.name, q.max_qty, q.min_qty, q.unit \nFROM quantity q \nJOIN ingredient i ON q.ingredient_id = i.ingredient_id \nJOIN nutrition n ON q.recipe_id = n.recipe_id \nWHERE q.max_qty = q.min_qty \nAND n.carbo = (SELECT MAX(carbo) FROM nutrition)"}
{"sample_id": 8864, "db_id": "cookbook", "gold_sql": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie' AND T2.max_qty = T2.min_qty", "pred_sql": "SELECT COUNT(*) FROM quantity q JOIN recipe r ON q.recipe_id = r.recipe_id WHERE r.title = 'Raspberry Chiffon Pie' AND q.max_qty = q.min_qty;"}
{"sample_id": 8905, "db_id": "cookbook", "gold_sql": "SELECT T3.name, T2.max_qty FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.servings = 7", "pred_sql": "SELECT i.name, q.max_qty \nFROM quantity q \nJOIN ingredient i ON q.ingredient_id = i.ingredient_id \nJOIN recipe r ON q.recipe_id = r.recipe_id \nWHERE r.servings = 7;"}
{"sample_id": 8895, "db_id": "cookbook", "gold_sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.source = 'National Potato Board' ORDER BY T2.calories DESC LIMIT 1", "pred_sql": "SELECT title, MAX(calories) AS highest_calories FROM recipe JOIN nutrition ON recipe.recipe_id = nutrition.recipe_id WHERE source = 'National Potato Board' GROUP BY title ORDER BY highest_calories DESC LIMIT 1;"}
{"sample_id": 8907, "db_id": "cookbook", "gold_sql": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T2.unit = 'slice(s)'", "pred_sql": "SELECT i.name, q.unit FROM ingredient i JOIN quantity q ON i.ingredient_id = q.ingredient_id WHERE q.unit = 'slices';"}
{"sample_id": 8920, "db_id": "cookbook", "gold_sql": "SELECT T3.name, T3.category FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Apricot Yogurt Parfaits'", "pred_sql": "SELECT ingredient.name, quantity.max_qty, quantity.min_qty, quantity.unit, quantity.preparation FROM ingredient JOIN quantity ON ingredient.ingredient_id = quantity.ingredient_id JOIN recipe ON quantity.recipe_id = recipe.recipe_id WHERE recipe.title = 'Apricot Yogurt Parfaits';"}
{"sample_id": 8901, "db_id": "cookbook", "gold_sql": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Idaho Potato Supreme'", "pred_sql": "SELECT COUNT(q.ingredient_id) AS ingredient_count \nFROM recipe r \nJOIN quantity q ON r.recipe_id = q.recipe_id \nWHERE r.title = 'Idaho Potato Supreme';"}
{"sample_id": 8916, "db_id": "cookbook", "gold_sql": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.category = 'dairy' AND T1.servings > 10", "pred_sql": "SELECT COUNT(*) FROM recipe WHERE servings > 10 AND recipe_id IN (SELECT recipe_id FROM ingredient WHERE category = 'dairy');"}
{"sample_id": 8873, "db_id": "cookbook", "gold_sql": "SELECT COUNT(*) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T1.name = 'seedless red grapes'", "pred_sql": "SELECT COUNT(*) FROM quantity q JOIN ingredient i ON q.ingredient_id = i.ingredient_id WHERE i.name = 'seedless red grapes';"}
{"sample_id": 8868, "db_id": "cookbook", "gold_sql": "SELECT T2.calories * T2.pcnt_cal_fat FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie'", "pred_sql": "SELECT n.calories * (n.pcnt_cal_fat / 100) AS calories_from_fat \nFROM recipe r \nJOIN nutrition n ON r.recipe_id = n.recipe_id \nWHERE r.title = 'Raspberry Chiffon Pie';"}
{"sample_id": 8894, "db_id": "cookbook", "gold_sql": "SELECT COUNT(T1.title) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat - T2.sat_fat DESC LIMIT 1", "pred_sql": "SELECT servings FROM recipe JOIN nutrition ON recipe.recipe_id = nutrition.recipe_id ORDER BY CAST(nutrition.total_fat AS FLOAT) - CAST(nutrition.sat_fat AS FLOAT) DESC LIMIT 1;"}
{"sample_id": 8874, "db_id": "cookbook", "gold_sql": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T2.recipe_id = 1397 AND T2.optional = 'TRUE'", "pred_sql": "SELECT i.name FROM ingredient i JOIN quantity q ON i.ingredient_id = q.ingredient_id WHERE q.recipe_id = '1397' AND q.optional = 'yes';"}
{"sample_id": 8885, "db_id": "cookbook", "gold_sql": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Apricot Yogurt Parfaits'", "pred_sql": "SELECT COUNT(*) AS ingredient_count FROM quantity q JOIN recipe r ON q.recipe_id = r.recipe_id WHERE r.title = 'Apricot Yogurt Parfaits';"}
{"sample_id": 5707, "db_id": "language_corpus", "gold_sql": "SELECT title FROM pages WHERE words = ( SELECT MAX(words) FROM pages )", "pred_sql": "SELECT title FROM pages ORDER BY words DESC LIMIT 1;"}
{"sample_id": 5792, "db_id": "language_corpus", "gold_sql": "SELECT occurrences FROM words WHERE word = 'panajot'", "pred_sql": "SELECT occurrences FROM words WHERE word = 'panajot';"}
{"sample_id": 5776, "db_id": "language_corpus", "gold_sql": "SELECT occurrences FROM words WHERE word = 'nombre'", "pred_sql": "SELECT occurrences FROM words WHERE word = 'nombre';"}
{"sample_id": 5797, "db_id": "language_corpus", "gold_sql": "SELECT T2.wid FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.title = 'Agricultura' ORDER BY T2.occurrences DESC LIMIT 1", "pred_sql": "SELECT pw.wid FROM pages_words pw JOIN pages p ON pw.pid = p.pid WHERE p.title = 'Agricultura' ORDER BY pw.occurrences DESC LIMIT 1;"}
{"sample_id": 5730, "db_id": "language_corpus", "gold_sql": "SELECT T3.title FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'comunitat'", "pred_sql": "SELECT pages.title FROM pages JOIN pages_words ON pages.pid = pages_words.pid JOIN words ON pages_words.wid = words.wid WHERE words.word = 'comunitat';"}
{"sample_id": 5748, "db_id": "language_corpus", "gold_sql": "SELECT word FROM words WHERE wid = 8968", "pred_sql": "SELECT w2nd FROM biwords WHERE w1st = 1 AND w2nd = 8968;"}
{"sample_id": 5819, "db_id": "language_corpus", "gold_sql": "SELECT CAST(SUM(T2.occurrences) AS REAL) / COUNT(T1.wid) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'grec'", "pred_sql": "SELECT pages.pid, AVG(pages_words.occurrences) AS average_occurrences\nFROM pages\nJOIN pages_words ON pages.pid = pages_words.pid\nJOIN words ON pages_words.wid = words.wid\nWHERE words.word = 'grec'\nGROUP BY pages.pid;"}
{"sample_id": 5764, "db_id": "language_corpus", "gold_sql": "SELECT words FROM langs WHERE lid = ( SELECT lid FROM biwords WHERE w1st = 100 AND w2nd = 317 )", "pred_sql": "SELECT SUM(pages.words) AS total_words\nFROM pages\nJOIN pages_words pw1 ON pages.pid = pw1.pid\nJOIN pages_words pw2 ON pages.pid = pw2.pid\nWHERE pw1.wid = 100 AND pw2.wid = 317;"}
{"sample_id": 5695, "db_id": "language_corpus", "gold_sql": "SELECT pages FROM langs WHERE lang = 'ca'", "pred_sql": "SELECT pages FROM langs WHERE lid = 1;"}
{"sample_id": 5733, "db_id": "language_corpus", "gold_sql": "SELECT CASE WHEN COUNT(T1.wid) > 0 THEN 'yes' ELSE 'no' END FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st OR T1.wid = T2.w2nd WHERE T2.w1st = ( SELECT wid FROM words WHERE T1.word = 'fukunaga' ) AND T2.w2nd = ( SELECT wid FROM words WHERE word LIKE 'd%egees' )", "pred_sql": "SELECT COUNT(*) > 0 AS pair_exists \nFROM biwords \nJOIN words AS w1 ON biwords.w1st = w1.wid \nJOIN words AS w2 ON biwords.w2nd = w2.wid \nWHERE w1.word = 'fukunaga' AND w2.word = 'd'egees';"}
{"sample_id": 5709, "db_id": "language_corpus", "gold_sql": "SELECT revision FROM pages WHERE words < 10 LIMIT 5", "pred_sql": "SELECT DISTINCT pages.revision FROM pages JOIN langs ON pages.lid = langs.lid WHERE pages.words < 10 LIMIT 5;"}
{"sample_id": 5754, "db_id": "language_corpus", "gold_sql": "SELECT occurrences FROM words WHERE word = 'desena'", "pred_sql": "SELECT SUM(occurrences) AS total_occurrences FROM words WHERE word = 'desena';"}
{"sample_id": 5687, "db_id": "language_corpus", "gold_sql": "SELECT title FROM pages WHERE revision = 16203226", "pred_sql": "SELECT title FROM pages WHERE revision = 16203226 AND lid = 1;"}
{"sample_id": 5802, "db_id": "language_corpus", "gold_sql": "SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'que' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'gregorio' )", "pred_sql": "SELECT SUM(occurrences) AS total_occurrences FROM biwords WHERE lid = 1 AND w1st IN (SELECT wid FROM words WHERE word = 'que') AND w2nd IN (SELECT wid FROM words WHERE word = 'gregorio');"}
{"sample_id": 5694, "db_id": "language_corpus", "gold_sql": "SELECT AVG(T2.occurrences) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st WHERE T2.w1st = ( SELECT wid FROM words WHERE word = 'sistema' )", "pred_sql": "SELECT AVG(occurrences) AS average_occurrences FROM biwords WHERE w1st = (SELECT wid FROM words WHERE word = 'system');"}
{"sample_id": 5684, "db_id": "language_corpus", "gold_sql": "SELECT title, words FROM pages WHERE title = ( SELECT MAX(LENGTH(title)) FROM pages )", "pred_sql": "SELECT p.title, p.words FROM pages p JOIN langs l ON p.lid = l.lid WHERE l.lid = 1 ORDER BY LENGTH(p.title) DESC LIMIT 1;"}
{"sample_id": 5807, "db_id": "language_corpus", "gold_sql": "SELECT CAST(SUM(CASE WHEN T3.title = 'Art' THEN T2.occurrences ELSE 0 END) AS REAL) * 100 / SUM(T2.occurrences) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'grec'", "pred_sql": "SELECT (SUM(pw.occurrences) * 100.0 / (SELECT SUM(occurrences) FROM pages_words WHERE pid = (SELECT pid FROM pages WHERE title = 'Art'))) AS percentage\nFROM pages_words pw\nJOIN words w ON pw.wid = w.wid\nWHERE w.word = 'grec' AND pw.pid = (SELECT pid FROM pages WHERE title = 'Art');"}
{"sample_id": 5800, "db_id": "language_corpus", "gold_sql": "SELECT COUNT(T2.occurrences) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'her\u00f2dot'", "pred_sql": "SELECT SUM(occurrences) AS total_occurrences FROM pages_words WHERE wid = (SELECT wid FROM words WHERE word = 'her\u00f2dot')"}
{"sample_id": 5722, "db_id": "language_corpus", "gold_sql": "SELECT pid, title FROM pages WHERE title LIKE '%0%' OR '%1%' OR '%2%' OR '%3%' OR '%4%' OR '%5%' OR '%6%' OR '%7%' OR '%8%' OR '%9%'", "pred_sql": "SELECT pid FROM pages WHERE title GLOB '*[0-9]*';"}
{"sample_id": 5729, "db_id": "language_corpus", "gold_sql": "SELECT CAST(COUNT(CASE WHEN w1st = w2nd THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(w1st) FROM biwords", "pred_sql": "SELECT (SUM(bi.occurrences) * 100.0 / SUM(lw.occurrences)) AS percentage\nFROM biwords bi\nJOIN langs_words lw ON bi.w1st = lw.wid\nWHERE bi.lid = lw.lid\nGROUP BY bi.lid, bi.w1st;"}
{"sample_id": 5786, "db_id": "language_corpus", "gold_sql": "SELECT COUNT(T2.w1st) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T1.word = '\u00e0bac'", "pred_sql": "SELECT SUM(occurrences) AS total_occurrences FROM biwords WHERE w1st = (SELECT wid FROM words WHERE word = '\u00e0bac')"}
{"sample_id": 5699, "db_id": "language_corpus", "gold_sql": "SELECT page FROM pages WHERE title = 'Arqueozoologia'", "pred_sql": "SELECT pid FROM pages WHERE title = 'Arqueozoologia';"}
{"sample_id": 5779, "db_id": "language_corpus", "gold_sql": "SELECT T2.occurrences FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T3.title = '\u00c0bac' AND T1.word = 'grec'", "pred_sql": "SELECT occurrences FROM pages_words JOIN pages ON pages.pid = pages_words.pid WHERE pages.title = '\u00c0bac' AND pages_words.wid = (SELECT wid FROM words WHERE word = 'grec');"}
{"sample_id": 5700, "db_id": "language_corpus", "gold_sql": "SELECT T2.wid, T2.occurrences FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.title = 'Abadia' ORDER BY T2.occurrences DESC LIMIT 1", "pred_sql": "SELECT wid, SUM(occurrences) AS total_occurrences \nFROM pages_words \nJOIN pages ON pages.pid = pages_words.pid \nWHERE pages.title LIKE '%Abadia%'\nGROUP BY wid \nORDER BY total_occurrences DESC \nLIMIT 1;"}
{"sample_id": 5771, "db_id": "language_corpus", "gold_sql": "SELECT T1.word, T3.word FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T2.w1st = 20 AND T2.w2nd = 50", "pred_sql": "SELECT w1.word, w2.word FROM biwords b JOIN words w1 ON b.w1st = w1.wid JOIN words w2 ON b.w2nd = w2.wid WHERE b.w1st = 20 AND b.w2nd = 50;"}
{"sample_id": 5743, "db_id": "language_corpus", "gold_sql": "SELECT CAST(COUNT(CASE WHEN occurrences < 80 THEN lid ELSE NULL END) AS REAL) * 100 / COUNT(lid) FROM biwords", "pred_sql": "SELECT COUNT(*) * 1.0 / (SELECT COUNT(*) FROM biwords WHERE lid = 1) AS proportion\nFROM biwords\nWHERE lid = 1 AND occurrences < 80;"}
{"sample_id": 5795, "db_id": "language_corpus", "gold_sql": "SELECT T1.word FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w2nd WHERE T2.occurrences = 116430", "pred_sql": "SELECT w2nd FROM biwords WHERE occurrences = 116430;"}
{"sample_id": 708, "db_id": "trains", "gold_sql": "SELECT CAST(COUNT(T1.id) AS REAL) / COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'", "pred_sql": "SELECT AVG(car_count) AS average_cars FROM (SELECT trains.id, COUNT(cars.id) AS car_count FROM trains LEFT JOIN cars ON trains.id = cars.train_id WHERE trains.direction = 'east' GROUP BY trains.id) AS train_car_counts;"}
{"sample_id": 707, "db_id": "trains", "gold_sql": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.len = 'short' AND T1.position = 4", "pred_sql": "SELECT DISTINCT trains.direction FROM trains JOIN cars ON trains.id = cars.train_id WHERE cars.position = '4' AND cars.len = 'short';"}
{"sample_id": 695, "db_id": "trains", "gold_sql": "SELECT id FROM cars WHERE train_id = 1 AND wheels = 2", "pred_sql": "SELECT id FROM cars WHERE train_id = '1' AND wheels = '2';"}
{"sample_id": 692, "db_id": "trains", "gold_sql": "SELECT shape FROM cars WHERE train_id = 1 AND position = 4", "pred_sql": "SELECT shape FROM cars WHERE train_id = '1' AND position = '4';"}
{"sample_id": 703, "db_id": "trains", "gold_sql": "SELECT T1.shape FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.position = 1 GROUP BY T1.shape", "pred_sql": "SELECT cars.shape FROM cars JOIN trains ON cars.train_id = trains.id WHERE cars.position = '1' AND trains.direction = 'east';"}
{"sample_id": 723, "db_id": "trains", "gold_sql": "SELECT COUNT(T1.id) FROM trains AS T1 INNER JOIN cars AS T2 ON T1.id = T2.train_id INNER JOIN ( SELECT train_id, MAX(position) AS trailPosi FROM cars GROUP BY train_id ) AS T3 ON T1.id = T3.train_id WHERE T1.direction = 'east' AND T2.position = T3.trailPosi AND T2.sides = 'double'", "pred_sql": "SELECT COUNT(*) FROM cars JOIN trains ON cars.train_id = trains.id WHERE trains.direction = 'east' AND cars.position = '4' AND cars.sides = 'double';"}
{"sample_id": 718, "db_id": "trains", "gold_sql": "SELECT COUNT(T.train_id) FROM (SELECT T1.train_id FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 3 AND T2.direction = 'west' AND T1.sides = 'double' GROUP BY T1.train_id)as T", "pred_sql": "SELECT COUNT(DISTINCT trains.id) AS train_count FROM trains JOIN cars ON trains.id = cars.train_id WHERE trains.direction = 'west' AND cars.sides = 'double' AND cars.position = '3';"}
{"sample_id": 705, "db_id": "trains", "gold_sql": "SELECT SUM(CASE WHEN T1.load_shape = 'circle' THEN 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.roof = 'flat'", "pred_sql": "SELECT COUNT(*) FROM cars JOIN trains ON cars.train_id = trains.id WHERE trains.direction = 'east' AND cars.roof = 'flat' AND cars.load_shape = 'circle';"}
{"sample_id": 738, "db_id": "movie", "gold_sql": "SELECT T2.\"Character Name\" FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise' AND T1.Title = 'Born on the Fourth of July'", "pred_sql": "SELECT characters.`character name` FROM characters JOIN actor ON characters.actorid = actor.actorid JOIN movie ON characters.movieid = movie.movieid WHERE actor.name = 'Tom Cruise' AND movie.title = 'Born on the Fourth of July';"}
{"sample_id": 743, "db_id": "movie", "gold_sql": "SELECT (MAX(CAST(SUBSTR(T2.screentime, 3, 2) AS REAL)) - MIN(CAST(SUBSTR(T2.screentime, 3, 2) AS REAL))) * 100 / MIN(CAST(SUBSTR(T2.screentime, 3, 2) AS REAL)) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'Batman'", "pred_sql": "SELECT (max(screentime) - min(screentime)) * 100.0 / min(screentime) AS percentage_difference\nFROM characters\nJOIN movie ON characters.movieid = movie.movieid\nWHERE movie.title = 'Batman';"}
{"sample_id": 772, "db_id": "movie", "gold_sql": "SELECT SUM(T1.Gross) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE CAST(REPLACE(REPLACE(T3.NetWorth, ',', ''), '$', '') AS REAL) > 375000000 AND T1.Rating < 7 AND T1.Genre = 'Comedy'", "pred_sql": "SELECT m.gross FROM movie m JOIN characters c ON m.movieid = c.movieid JOIN actor a ON c.actorid = a.actorid WHERE m.genre = 'comedy' AND m.rating < 7 AND a.networth > '375000000.00';"}
{"sample_id": 769, "db_id": "movie", "gold_sql": "SELECT T3.NetWorth, T3.\"Date of Birth\" FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Die Hard 2' AND T3.\"Height (Inches)\" BETWEEN 60 AND 65", "pred_sql": "SELECT a.networth, a.date_of_birth FROM actor a JOIN characters c ON a.actorid = c.actorid JOIN movie m ON c.movieid = m.movieid WHERE m.title = 'Die Hard 2' AND a.height_inches BETWEEN 60 AND 65;"}
{"sample_id": 748, "db_id": "movie", "gold_sql": "SELECT COUNT(*) FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE CAST(REPLACE(REPLACE(T2.NetWorth, ',', ''), '$', '') AS REAL) = ( SELECT MAX(CAST(REPLACE(REPLACE(NetWorth, ',', ''), '$', '') AS REAL)) FROM actor)", "pred_sql": "SELECT COUNT(DISTINCT c.movieid) AS movie_count \nFROM actor a \nJOIN characters c ON a.actorid = c.actorid \nWHERE a.networth = (SELECT MAX(networth) FROM actor);"}
{"sample_id": 763, "db_id": "movie", "gold_sql": "SELECT COUNT(*) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Genre = 'Romance' AND T3.Name = 'John Travolta'", "pred_sql": "SELECT COUNT(DISTINCT m.movieid) AS romantic_movie_count\nFROM movie m\nJOIN characters c ON m.movieid = c.movieid\nJOIN actor a ON c.actorid = a.actorid\nWHERE m.genre = 'romantic' AND a.name = 'John Travolta';"}
{"sample_id": 739, "db_id": "movie", "gold_sql": "SELECT T1.\"Character Name\" FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T2.Name = 'Tom Cruise'", "pred_sql": "SELECT characters.`character name` FROM characters JOIN actor ON characters.actorid = actor.actorid WHERE actor.name = 'Tom Cruise';"}
{"sample_id": 752, "db_id": "movie", "gold_sql": "SELECT T2.Biography FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.\"Character Name\" = 'Michael Moscovitz'", "pred_sql": "SELECT a.biography FROM actor a JOIN characters c ON a.actorid = c.actorid WHERE c.character_name = 'Michael Moscovitz';"}
{"sample_id": 732, "db_id": "movie", "gold_sql": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Batman' AND T2.\"Character Name\" = 'Joker'", "pred_sql": "SELECT actor.name FROM actor JOIN characters ON actor.actorid = characters.actorid JOIN movie ON characters.movieid = movie.movieid WHERE characters.character_name = 'Joker' AND movie.title = 'Batman';"}
{"sample_id": 4585, "db_id": "mental_health_survey", "gold_sql": "SELECT T2.UserID FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T1.questiontext = 'Do you think that discussing a physical health issue with your employer would have negative consequences?' AND T2.AnswerText LIKE 'Yes' AND T2.SurveyID = 2014", "pred_sql": "SELECT DISTINCT a.userid \nFROM answer a \nJOIN question q ON a.questionid = q.questionid \nWHERE a.answertext = 'Yes' \nAND q.questiontext = 'Do you think that discussing a physical health issue with your employer would have negative consequences?' \nAND a.surveyid = '2014';"}
{"sample_id": 4618, "db_id": "mental_health_survey", "gold_sql": "SELECT COUNT(questiontext) FROM Question", "pred_sql": "SELECT COUNT(*) AS total_questions FROM question WHERE questionid IN (SELECT questionid FROM answer WHERE surveyid = (SELECT surveyid FROM survey WHERE description LIKE '%mental health%'));"}
{"sample_id": 4589, "db_id": "mental_health_survey", "gold_sql": "SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID = 2018 AND T1.questiontext = 'What country do you live in?' AND T2.AnswerText = 'Canada'", "pred_sql": "SELECT COUNT(DISTINCT userid) AS user_count FROM answer WHERE surveyid = 2018 AND answertext = 'Canada';"}
{"sample_id": 4611, "db_id": "mental_health_survey", "gold_sql": "SELECT CAST(SUM(CASE  WHEN T1.AnswerText LIKE 'Yes' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'Has your employer ever formally discussed mental health (for example, as part of a wellness campaign or other official communication)?'", "pred_sql": "SELECT (COUNT(CASE WHEN a.answertext = 'Yes' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM answer a\nJOIN question q ON a.questionid = q.questionid\nWHERE q.questiontext = 'Has your employer ever formally discussed mental health (for example, as part of a wellness campaign or other official communication)?';"}
{"sample_id": 4581, "db_id": "mental_health_survey", "gold_sql": "SELECT CAST(SUM(CASE  WHEN T1.AnswerText LIKE 'Yes' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 12", "pred_sql": "SELECT (COUNT(DISTINCT userid) * 100.0 / (SELECT COUNT(DISTINCT userid) FROM answer)) AS percentage FROM answer WHERE questionid = (SELECT questionid FROM question WHERE questiontext LIKE '%bring up a mental health issue%') AND answertext = 1;"}
{"sample_id": 4598, "db_id": "mental_health_survey", "gold_sql": "SELECT COUNT(DISTINCT UserID) FROM Answer WHERE SurveyID LIKE 2016", "pred_sql": "SELECT COUNT(DISTINCT userid) AS user_count FROM answer WHERE surveyid = '2016';"}
{"sample_id": 4579, "db_id": "mental_health_survey", "gold_sql": "SELECT T1.AnswerText FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 3 GROUP BY T1.AnswerText ORDER BY COUNT(T1.UserID) DESC LIMIT 1", "pred_sql": "SELECT description AS country, COUNT(DISTINCT userid) AS user_count FROM survey JOIN answer ON survey.surveyid = answer.surveyid GROUP BY description ORDER BY user_count ASC;"}
{"sample_id": 4604, "db_id": "mental_health_survey", "gold_sql": "SELECT COUNT(DISTINCT T1.AnswerText) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'Describe the conversation you had with your previous employer about your mental health, including their reactions and actions taken to address your mental health issue/questions.'", "pred_sql": "SELECT COUNT(DISTINCT answer.answertext) AS different_answers\nFROM answer\nJOIN question ON answer.questionid = question.questionid\nWHERE question.questiontext = 'Describe the conversation you had with your previous employer about your mental health, including their reactions and actions taken to address your mental health issue/questions.';"}
{"sample_id": 4606, "db_id": "mental_health_survey", "gold_sql": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'Any additional notes or comments' AND T1.AnswerText IS NOT NULL", "pred_sql": "SELECT COUNT(DISTINCT userid) AS number_of_people FROM answer WHERE questionid = (SELECT questionid FROM question WHERE questiontext = 'Any additional notes or comments.');"}
{"sample_id": 4580, "db_id": "mental_health_survey", "gold_sql": "SELECT CAST(SUM(T1.AnswerText) AS REAL) / COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN ( SELECT T1.UserID FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 3 AND T1.AnswerText = 'United States' ) AS T2 ON T1.UserID = T2.UserID INNER JOIN Question AS T3 ON T1.QuestionID = T3.questionid WHERE T3.questionid = 1", "pred_sql": "SELECT AVG(age) AS average_age FROM respondents WHERE country = 'United States';"}
{"sample_id": 6938, "db_id": "ice_hockey_draft", "gold_sql": "SELECT DISTINCT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '1997-1998' AND T1.LEAGUE = 'OHL' ORDER BY T2.birthdate DESC LIMIT 1", "pred_sql": "SELECT playername, birthdate FROM playerinfo JOIN seasonstatus ON playerinfo.eliteid = seasonstatus.eliteid WHERE season = '1997-1998' AND league = 'OHL' ORDER BY birthdate DESC LIMIT 1;"}
{"sample_id": 6937, "db_id": "ice_hockey_draft", "gold_sql": "SELECT T1.GP FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.ELITEID = ( SELECT t.ELITEID FROM PlayerInfo t ORDER BY t.height DESC LIMIT 1 )", "pred_sql": "SELECT SUM(CAST(seasonstatus.gp AS INTEGER)) AS total_games\nFROM playerinfo\nJOIN height_info ON playerinfo.height = height_info.height_id\nJOIN seasonstatus ON playerinfo.eliteid = seasonstatus.eliteid\nWHERE height_in_cm = (SELECT MAX(CAST(height_in_cm AS INTEGER)) FROM height_info);"}
{"sample_id": 6946, "db_id": "ice_hockey_draft", "gold_sql": "SELECT T2.PlayerName, T1.height_in_cm FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height WHERE T2.height = ( SELECT height FROM PlayerInfo WHERE PlayerName = 'Brian Gionta' )", "pred_sql": "SELECT p.playername, h.height_in_cm FROM playerinfo p JOIN height_info h ON p.height = h.height_id WHERE h.height_in_cm = (SELECT h2.height_in_cm FROM playerinfo p2 JOIN height_info h2 ON p2.height = h2.height_id WHERE p2.playername = 'Brian Gionta')"}
{"sample_id": 6947, "db_id": "ice_hockey_draft", "gold_sql": "SELECT T2.PlayerName, T2.position_info FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.PIM = ( SELECT MAX(PIM) FROM SeasonStatus )", "pred_sql": "SELECT playerinfo.playername, playerinfo.position_info FROM playerinfo JOIN seasonstatus ON playerinfo.eliteid = seasonstatus.eliteid ORDER BY seasonstatus.pim DESC LIMIT 1;"}
{"sample_id": 6984, "db_id": "ice_hockey_draft", "gold_sql": "SELECT CAST(SUM(T1.height_in_cm) AS REAL) / COUNT(T2.ELITEID) FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height INNER JOIN SeasonStatus AS T3 ON T2.ELITEID = T3.ELITEID WHERE T3.TEAM = 'Acadie-Bathurst Titan' AND T3.GAMETYPE = 'Regular Season'", "pred_sql": "SELECT AVG(CAST(height_info.height_in_cm AS INTEGER)) AS average_height_cm\nFROM playerinfo\nJOIN seasonstatus ON playerinfo.eliteid = seasonstatus.eliteid\nJOIN height_info ON playerinfo.height = height_info.height_id\nWHERE seasonstatus.team = 'Acadie-Bathurst Titan' AND seasonstatus.gametype = 'Regular season';"}
{"sample_id": 6978, "db_id": "ice_hockey_draft", "gold_sql": "SELECT DISTINCT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.LEAGUE = 'International' ORDER BY T1.GP DESC LIMIT 1", "pred_sql": "SELECT playerinfo.playername, SUM(seasonstatus.gp) AS total_games\nFROM playerinfo\nJOIN seasonstatus ON playerinfo.eliteid = seasonstatus.eliteid\nWHERE seasonstatus.season = '2000-2001' AND seasonstatus.league = 'International'\nGROUP BY playerinfo.playername\nORDER BY total_games DESC\nLIMIT 1;"}
{"sample_id": 6954, "db_id": "ice_hockey_draft", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.PlayerName = 'Ian Schultz' THEN T1.G ELSE 0 END) AS REAL) * 100 / SUM(T1.G) FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2007-2008' AND T1.TEAM = 'Calgary Hitmen'", "pred_sql": "SELECT (SUM(CASE WHEN ss.g > 0 THEN ss.g ELSE 0 END) * 100.0 / SUM(ss.g)) AS percentage_goals_scored\nFROM seasonstatus ss\nJOIN playerinfo pi ON ss.eliteid = pi.eliteid\nWHERE ss.team = 'Calgary Hitmen' AND ss.season = '2007-2008' AND pi.playername = 'Ian Schultz';"}
{"sample_id": 6934, "db_id": "ice_hockey_draft", "gold_sql": "SELECT T3.weight_in_kg FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN weight_info AS T3 ON T2.weight = T3.weight_id ORDER BY T1.PLUSMINUS DESC LIMIT 1", "pred_sql": "SELECT weight_info.weight_in_kg FROM playerinfo JOIN seasonstatus ON playerinfo.eliteid = seasonstatus.eliteid JOIN weight_info ON playerinfo.weight = weight_info.weight_id WHERE seasonstatus.plusminus = (SELECT MAX(plusminus) FROM seasonstatus);"}
{"sample_id": 6918, "db_id": "ice_hockey_draft", "gold_sql": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id ORDER BY T2.height_in_cm DESC LIMIT 1", "pred_sql": "SELECT playername FROM playerinfo JOIN height_info ON playerinfo.height = height_info.height_id ORDER BY height_in_cm DESC LIMIT 1;"}
{"sample_id": 6972, "db_id": "ice_hockey_draft", "gold_sql": "SELECT DISTINCT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.TEAM = 'Avangard Omsk'", "pred_sql": "SELECT playername FROM playerinfo JOIN seasonstatus ON playerinfo.eliteid = seasonstatus.eliteid WHERE team = 'Avangard Omsk' AND season = '2000-2001';"}
{"sample_id": 6998, "db_id": "ice_hockey_draft", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.nation = 'Sweden' THEN T2.PIM ELSE NULL END) AS REAL) * 100 / COUNT(*) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.LEAGUE = 'OHL'", "pred_sql": "SELECT (SUM(CAST(ss.pim AS INTEGER)) * 100.0 / (SELECT SUM(CAST(ss2.pim AS INTEGER)) FROM seasonstatus ss2)) AS penalty_minutes_percentage\nFROM playerinfo pi\nJOIN seasonstatus ss ON pi.eliteid = ss.eliteid\nWHERE pi.nation = 'Sweden' AND ss.league = 'OHL';"}
{"sample_id": 6994, "db_id": "ice_hockey_draft", "gold_sql": "SELECT T3.height_in_inch FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T2.TEAM = 'Oshawa Generals'", "pred_sql": "SELECT height_in_inch FROM height_info JOIN playerinfo ON height_info.height_id = playerinfo.height JOIN seasonstatus ON playerinfo.eliteid = seasonstatus.eliteid WHERE seasonstatus.team = 'Oshawa Generals';"}
{"sample_id": 6931, "db_id": "ice_hockey_draft", "gold_sql": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.sum_7yr_GP > 500 ORDER BY T2.PIM DESC LIMIT 1", "pred_sql": "SELECT p.playername FROM playerinfo p JOIN seasonstatus s ON p.eliteid = s.eliteid WHERE p.sum_7yr_gp >= 500 ORDER BY s.pim DESC LIMIT 1;"}
{"sample_id": 6955, "db_id": "ice_hockey_draft", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.PlayerName = 'Yevgeni Muratov' THEN T1.PIM ELSE 0 END) AS REAL) * 100 / SUM(T1.PIM) FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '1999-2000' AND T1.TEAM = 'Ak Bars Kazan'", "pred_sql": "SELECT (SUM(CASE WHEN p.playername = 'Yevgeni Muratov' THEN s.pim ELSE 0 END) * 100.0 / SUM(s.pim)) AS percentage_pim\nFROM seasonstatus s\nJOIN playerinfo p ON s.eliteid = p.eliteid\nWHERE s.team = 'Ak Bars Kazan' AND s.season = '1999-2000';"}
{"sample_id": 6942, "db_id": "ice_hockey_draft", "gold_sql": "SELECT CAST(COUNT(CASE WHEN GP > 20 THEN TEAM ELSE NULL END) AS REAL) * 100 / COUNT(TEAM) FROM SeasonStatus WHERE SEASON = '2007-2008' AND GAMETYPE = 'Playoffs'", "pred_sql": "SELECT (COUNT(CASE WHEN gp > 20 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_played_over_20_games\nFROM seasonstatus\nWHERE season = '2007-2008' AND gametype = 'playoffs';"}
{"sample_id": 5376, "db_id": "sales", "gold_sql": "SELECT DISTINCT T1.ProductID FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Abby'", "pred_sql": "SELECT sales.productid FROM sales JOIN customers ON sales.customerid = customers.customerid WHERE customers.firstname = 'Abby';"}
{"sample_id": 5397, "db_id": "sales", "gold_sql": "SELECT IIF(SUM(IIF(T1.Name = 'HL Mountain Frame - Silver, 42', T2.SalesID, 0)) - SUM(IIF(T1.Name = 'HL Mountain Frame - Black, 42', T2.SalesID, 0)) > 0, 'Silver', 'Black') FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID", "pred_sql": "SELECT products.name, SUM(sales.quantity) AS total_quantity\nFROM sales\nJOIN products ON sales.productid = products.productid\nWHERE products.name = 'HL Mountain Frame'\nGROUP BY products.name\nORDER BY total_quantity DESC\nLIMIT 1;"}
{"sample_id": 5368, "db_id": "sales", "gold_sql": "SELECT Name FROM Products WHERE Price = 0", "pred_sql": "SELECT name FROM products WHERE price = '0.0';"}
{"sample_id": 5407, "db_id": "sales", "gold_sql": "SELECT COUNT(CustomerID) FROM Sales GROUP BY SalesPersonID", "pred_sql": "SELECT employees.firstname, employees.lastname, COUNT(DISTINCT sales.customerid) AS number_of_customers FROM sales JOIN employees ON sales.salespersonid = employees.employeeid GROUP BY employees.employeeid;"}
{"sample_id": 5469, "db_id": "sales", "gold_sql": "SELECT DISTINCT T2.Name FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Quantity < ( SELECT AVG(Quantity) FROM Sales )", "pred_sql": "SELECT p.name, s.quantity \nFROM products p \nJOIN sales s ON p.productid = s.productid \nWHERE s.quantity < (SELECT AVG(quantity) FROM sales)"}
{"sample_id": 5468, "db_id": "sales", "gold_sql": "SELECT T2.Name FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Quantity DESC LIMIT 1", "pred_sql": "SELECT products.name, SUM(sales.quantity) AS total_quantity\nFROM sales\nJOIN products ON sales.productid = products.productid\nGROUP BY products.name\nORDER BY total_quantity DESC\nLIMIT 1;"}
{"sample_id": 5375, "db_id": "sales", "gold_sql": "SELECT T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.SalesID = 178", "pred_sql": "SELECT customers.lastname FROM sales JOIN customers ON sales.customerid = customers.customerid WHERE sales.salesid = '178';"}
{"sample_id": 5461, "db_id": "sales", "gold_sql": "SELECT FirstName, LastName FROM Customers WHERE LastName = 'Chen'", "pred_sql": "SELECT firstname FROM customers WHERE lastname = 'Chen';"}
{"sample_id": 5379, "db_id": "sales", "gold_sql": "SELECT DISTINCT T3.FirstName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID WHERE T1.FirstName = 'Abigail'", "pred_sql": "SELECT employees.firstname FROM employees JOIN sales ON employees.employeeid = sales.salespersonid JOIN customers ON sales.customerid = customers.customerid WHERE customers.firstname = 'Abigail';"}
{"sample_id": 5409, "db_id": "sales", "gold_sql": "SELECT FirstName, MiddleInitial, LastName FROM Employees WHERE EmployeeID = 7", "pred_sql": "SELECT firstname, lastname FROM employees WHERE employeeid = 7;"}
{"sample_id": 5424, "db_id": "sales", "gold_sql": "SELECT SUM(T2.Quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Price = 0", "pred_sql": "SELECT SUM(quantity) AS total_gift_quantity FROM sales JOIN products ON sales.productid = products.productid WHERE products.price = '0.0';"}
{"sample_id": 5370, "db_id": "sales", "gold_sql": "SELECT T2.Name FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Quantity LIMIT 1", "pred_sql": "SELECT name FROM products WHERE productid = (SELECT productid FROM sales ORDER BY quantity ASC LIMIT 1)"}
{"sample_id": 5400, "db_id": "sales", "gold_sql": "SELECT CAST(COUNT(T1.CustomerID) AS REAL) / COUNT(T3.EmployeeID) FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID", "pred_sql": "SELECT AVG(customer_count) AS average_customers_per_salesperson FROM (SELECT salespersonid, COUNT(DISTINCT customerid) AS customer_count FROM sales GROUP BY salespersonid) AS sales_summary;"}
{"sample_id": 5449, "db_id": "sales", "gold_sql": "SELECT T2.FirstName, T2.MiddleInitial, T2.LastName FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T1.ProductID = T3.ProductID GROUP BY T1.SalesID, T1.Quantity, T3.Price, FirstName, MiddleInitial, LastName ORDER BY T1.Quantity * T3.Price DESC LIMIT 1", "pred_sql": "SELECT c.firstname || ' ' || c.lastname AS full_name\nFROM sales s\nJOIN customers c ON s.customerid = c.customerid\nJOIN products p ON s.productid = p.productid\nORDER BY (s.quantity * p.price) DESC\nLIMIT 1;"}
{"sample_id": 5441, "db_id": "sales", "gold_sql": "SELECT T2.CustomerID, T2.LastName FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Quantity > ( SELECT AVG(Quantity) FROM Sales ) * 0.9", "pred_sql": "SELECT c.customerid, c.lastname \nFROM customers c \nJOIN sales s ON c.customerid = s.customerid \nWHERE s.quantity > (SELECT AVG(quantity) * 0.9 FROM sales)"}
{"sample_id": 5383, "db_id": "sales", "gold_sql": "SELECT T1.Price FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.CustomerID BETWEEN 1 AND 100 ORDER BY T1.Price DESC LIMIT 1", "pred_sql": "SELECT MAX(p.price) AS highest_price\nFROM sales s\nJOIN products p ON s.productid = p.productid\nWHERE s.customerid IN (SELECT customerid FROM customers WHERE customerid BETWEEN '1' AND '100')"}
{"sample_id": 5404, "db_id": "sales", "gold_sql": "SELECT SUM(T2.Quantity * T1.Price) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'HL Road Frame - Red, 56'", "pred_sql": "SELECT SUM(quantity * price) AS total_revenue \nFROM sales \nJOIN products ON sales.productid = products.productid \nWHERE products.name = 'HL Road Frame - Red' AND products.price > 0.0;"}
{"sample_id": 5464, "db_id": "sales", "gold_sql": "SELECT T2.FirstName, T2.MiddleInitial, T2.LastName FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Quantity HAVING T1.Quantity > ( SELECT AVG(Quantity) FROM Sales )", "pred_sql": "SELECT c.firstname || ' ' || c.lastname AS full_name\nFROM customers c\nJOIN sales s ON c.customerid = s.customerid\nGROUP BY c.customerid\nHAVING SUM(s.quantity) > (SELECT AVG(total_quantity) FROM (SELECT SUM(quantity) AS total_quantity FROM sales GROUP BY customerid));"}
{"sample_id": 5467, "db_id": "sales", "gold_sql": "SELECT DISTINCT T3.FirstName, T3.MiddleInitial, T3.LastName FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T2.Quantity * T1.Price > 50000", "pred_sql": "SELECT c.firstname || ' ' || c.lastname AS full_name, SUM(p.price * s.quantity) AS total_spent \nFROM customers c \nJOIN sales s ON c.customerid = s.customerid \nJOIN products p ON s.productid = p.productid \nGROUP BY c.customerid \nHAVING total_spent > 50000 \nORDER BY total_spent DESC;"}
{"sample_id": 5427, "db_id": "sales", "gold_sql": "SELECT COUNT(LastName) FROM Employees WHERE LastName = 'Ringer'", "pred_sql": "SELECT COUNT(*) AS employee_count FROM employees WHERE lastname = 'Ringer';"}
{"sample_id": 5453, "db_id": "sales", "gold_sql": "SELECT COUNT(T2.ProductID) FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.FirstName = 'Dalton' AND T1.MiddleInitial = 'M' AND T1.LastName = 'Coleman'", "pred_sql": "SELECT COUNT(DISTINCT p.productid) AS product_count \nFROM sales s \nJOIN customers c ON s.customerid = c.customerid \nJOIN products p ON s.productid = p.productid \nWHERE c.firstname = 'Dalton' AND c.lastname = 'Coleman';"}
{"sample_id": 997, "db_id": "computer_student", "gold_sql": "SELECT T1.p_id FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.professor = 1 GROUP BY T1.p_id HAVING COUNT(DISTINCT T1.course_id) > 3", "pred_sql": "SELECT p.p_id FROM person p JOIN taughtby t ON p.p_id = t.p_id WHERE p.professor = 0 GROUP BY p.p_id HAVING COUNT(t.course_id) > 3;"}
{"sample_id": 996, "db_id": "computer_student", "gold_sql": "SELECT T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY COUNT(T2.p_id) DESC LIMIT 1", "pred_sql": "SELECT c.courselevel FROM course c JOIN taughtby t ON c.course_id = t.course_id GROUP BY c.course_id ORDER BY COUNT(t.p_id) DESC LIMIT 1;"}
{"sample_id": 1001, "db_id": "computer_student", "gold_sql": "SELECT CAST(SUM(CASE  WHEN professor = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE  WHEN student = 1 THEN 1 ELSE 0 END) AS per FROM person", "pred_sql": "SELECT SUM(CASE WHEN professor = 0 THEN 1 ELSE 0 END) AS num_professors, SUM(CASE WHEN student = 1 THEN 1 ELSE 0 END) AS num_students, (SUM(CASE WHEN professor = 0 THEN 1 ELSE 0 END) * 1.0 / NULLIF(SUM(CASE WHEN student = 1 THEN 1 ELSE 0 END), 0)) AS ratio FROM person;"}
{"sample_id": 1038, "db_id": "computer_student", "gold_sql": "SELECT T1.p_id, T3.courseLevel FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id GROUP BY T1.p_id ORDER BY COUNT(T2.course_id) DESC LIMIT 1", "pred_sql": "SELECT p.p_id, COUNT(t.course_id) AS course_count, c.courselevel \nFROM person p \nJOIN taughtby t ON p.p_id = t.p_id \nJOIN course c ON t.course_id = c.course_id \nWHERE p.professor = 0 \nGROUP BY p.p_id, c.courselevel \nORDER BY course_count DESC \nLIMIT 1;"}
{"sample_id": 990, "db_id": "computer_student", "gold_sql": "SELECT T2.hasPosition FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T1.course_id = 9", "pred_sql": "SELECT CASE WHEN COUNT(*) > 0 THEN 'Yes' ELSE 'No' END AS is_faculty_member\nFROM person p\nJOIN taughtby t ON p.p_id = t.p_id\nWHERE t.course_id = '9' AND p.hasposition = 1;"}
{"sample_id": 981, "db_id": "computer_student", "gold_sql": "SELECT T1.p_id_dummy FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_12'", "pred_sql": "SELECT DISTINCT p1.p_id FROM person p1 JOIN advisedby a ON p1.p_id = a.p_id JOIN person p2 ON a.p_id_dummy = p2.p_id WHERE p2.student = 1 AND p2.yearsinprogram = 12 AND p1.professor = 0;"}
{"sample_id": 1036, "db_id": "computer_student", "gold_sql": "SELECT T1.p_id, T1.hasPosition FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id GROUP BY T1.p_id ORDER BY COUNT(T2.course_id) DESC LIMIT 1", "pred_sql": "SELECT p.p_id, COUNT(t.course_id) AS course_count, p.professor, p.hasposition \nFROM person p \nJOIN taughtby t ON p.p_id = t.p_id \nWHERE p.professor = 0 \nGROUP BY p.p_id \nORDER BY course_count DESC \nLIMIT 1;"}
{"sample_id": 1019, "db_id": "computer_student", "gold_sql": "SELECT COUNT(*) FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T1.p_id_dummy = 5 AND T2.student = 1 AND T2.yearsInProgram = 'Year_5'", "pred_sql": "SELECT COUNT(*) AS student_count FROM person p JOIN advisedby a ON p.p_id = a.p_id WHERE a.p_id_dummy = 5 AND p.student = 1 AND p.yearsinprogram = 5;"}
{"sample_id": 983, "db_id": "computer_student", "gold_sql": "SELECT COUNT(*) FROM course WHERE courseLevel = 'Level_300'", "pred_sql": "SELECT COUNT(*) AS course_count FROM course WHERE courselevel = 'Level_300';"}
{"sample_id": 975, "db_id": "computer_student", "gold_sql": "SELECT T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.p_id = 297", "pred_sql": "SELECT course.courselevel FROM course JOIN taughtby ON course.course_id = taughtby.course_id JOIN person ON taughtby.p_id = person.p_id WHERE person.p_id = 297 AND person.professor = 0;"}
{"sample_id": 1037, "db_id": "computer_student", "gold_sql": "SELECT DISTINCT T2.course_id FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id WHERE T1.professor = 1 AND T1.hasPosition = 0", "pred_sql": "SELECT DISTINCT course.course_id FROM course JOIN taughtby ON course.course_id = taughtby.course_id JOIN person ON taughtby.p_id = person.p_id WHERE person.professor = 0 AND person.hasposition = 0;"}
{"sample_id": 967, "db_id": "computer_student", "gold_sql": "SELECT CAST(COUNT(p_id) AS REAL) / COUNT(DISTINCT p_id_dummy) AS avgnum FROM advisedBy GROUP BY p_id_dummy", "pred_sql": "SELECT advisedby.p_id_dummy AS advisor_id, COUNT(taughtby.p_id) AS student_count FROM advisedby JOIN taughtby ON advisedby.p_id = taughtby.p_id GROUP BY advisedby.p_id_dummy;"}
{"sample_id": 986, "db_id": "computer_student", "gold_sql": "SELECT COUNT(*) FROM person WHERE hasPosition = 'Faculty_eme'", "pred_sql": "SELECT COUNT(*) FROM person WHERE professor = 0 AND hasposition = 1;"}
{"sample_id": 1026, "db_id": "computer_student", "gold_sql": "SELECT T1.hasPosition FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id WHERE T1.professor = 1 GROUP BY T1.p_id ORDER BY COUNT(T2.course_id) DESC LIMIT 1", "pred_sql": "SELECT person.hasposition FROM person JOIN taughtby ON person.p_id = taughtby.p_id GROUP BY person.p_id ORDER BY COUNT(taughtby.course_id) DESC LIMIT 1;"}
{"sample_id": 5605, "db_id": "shipping", "gold_sql": "SELECT CAST(COUNT(T2.ship_id) AS REAL) / COUNT(DISTINCT T1.truck_id) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T1.make = 'Kenworth'", "pred_sql": "SELECT AVG(shipment_count) AS average_shipments\nFROM (\n    SELECT COUNT(*) AS shipment_count\n    FROM shipment\n    JOIN truck ON shipment.truck_id = truck.truck_id\n    WHERE truck.make = 'Kenworth'\n    GROUP BY shipment.truck_id\n) AS shipment_counts;"}
{"sample_id": 5644, "db_id": "shipping", "gold_sql": "SELECT COUNT(truck_id) FROM truck WHERE model_year = 2009", "pred_sql": "SELECT COUNT(*) AS truck_count FROM truck WHERE model_year = '2009';"}
{"sample_id": 5585, "db_id": "shipping", "gold_sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE STRFTIME('%Y', T1.ship_date) = '2017' GROUP BY T2.first_name, T2.last_name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT d.first_name || ' ' || d.last_name AS full_name\nFROM driver d\nJOIN shipment s ON d.driver_id = s.driver_id\nWHERE strftime('%Y', s.ship_date) = '2017'\nGROUP BY d.driver_id\nORDER BY COUNT(s.ship_id) DESC\nLIMIT 1;"}
{"sample_id": 5613, "db_id": "shipping", "gold_sql": "SELECT COUNT(*) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.weight < 1000 ORDER BY T1.model_year ASC LIMIT 1", "pred_sql": "SELECT COUNT(*) AS shipment_count \nFROM shipment \nWHERE weight <= 1000 \nAND truck_id = (SELECT truck_id \n                FROM truck \n                ORDER BY model_year ASC \n                LIMIT 1);"}
{"sample_id": 5650, "db_id": "shipping", "gold_sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id ORDER BY T1.weight ASC LIMIT 1", "pred_sql": "SELECT d.first_name || ' ' || d.last_name AS full_name \nFROM driver d \nJOIN shipment s ON d.driver_id = s.driver_id \nORDER BY s.weight ASC \nLIMIT 1;"}
{"sample_id": 5594, "db_id": "shipping", "gold_sql": "SELECT T1.cust_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T2.ship_id = '1275'", "pred_sql": "SELECT cust_name FROM customer WHERE cust_id = (SELECT cust_id FROM shipment WHERE ship_id = 1275);"}
{"sample_id": 5620, "db_id": "shipping", "gold_sql": "SELECT SUM(T2.weight) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T1.make = 'Peterbilt' AND STRFTIME('%Y', T2.ship_date) = '2016' ORDER BY T1.model_year DESC LIMIT 1", "pred_sql": "SELECT SUM(s.weight) AS total_weight\nFROM shipment s\nJOIN truck t ON s.truck_id = t.truck_id\nWHERE t.make = 'Peterbilt' AND t.model_year = (SELECT MAX(model_year) FROM truck WHERE make = 'Peterbilt') AND strftime('%Y', s.ship_date) = '2016';"}
{"sample_id": 5590, "db_id": "shipping", "gold_sql": "SELECT AVG(T2.weight) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'S K L Enterprises Inc'", "pred_sql": "SELECT AVG(weight) AS average_weight FROM shipment JOIN customer ON shipment.cust_id = customer.cust_id WHERE customer.cust_name = 'S K L Enterprises Inc';"}
{"sample_id": 5589, "db_id": "shipping", "gold_sql": "SELECT DISTINCT T3.city_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id WHERE T1.cust_name = 'S K L Enterprises Inc'", "pred_sql": "SELECT city.city_name FROM shipment JOIN customer ON shipment.cust_id = customer.cust_id JOIN city ON shipment.city_id = city.city_id WHERE customer.cust_name = 'S K L Enterprises Inc.';"}
{"sample_id": 5673, "db_id": "shipping", "gold_sql": "SELECT T1.weight FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.first_name = 'Andrea' AND T2.last_name = 'Simons' AND T1.ship_date = '2016-03-07'", "pred_sql": "SELECT shipment.weight FROM shipment JOIN driver ON shipment.driver_id = driver.driver_id WHERE driver.first_name = 'Andrea' AND driver.last_name = 'Simons' AND shipment.ship_date = '2016-03-07';"}
{"sample_id": 5623, "db_id": "shipping", "gold_sql": "SELECT AVG(T2.weight) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T1.make = 'Mack'", "pred_sql": "SELECT AVG(s.weight) AS average_shipment_weight\nFROM shipment s\nJOIN truck t ON s.truck_id = t.truck_id\nWHERE t.make = 'Mack'\nAND t.model_year = (SELECT MIN(model_year) FROM truck WHERE make = 'Mack');"}
{"sample_id": 5640, "db_id": "shipping", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.weight < 70000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_type = 'wholesaler'", "pred_sql": "SELECT (COUNT(CASE WHEN s.weight <= 70000 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_wholesalers FROM customer c JOIN shipment s ON c.cust_id = s.cust_id WHERE c.cust_type = 'wholesaler';"}
{"sample_id": 5682, "db_id": "shipping", "gold_sql": "SELECT SUM(CASE WHEN T1.model_year = '2005' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.model_year = '2006' THEN 1 ELSE 0 END) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id", "pred_sql": "SELECT (SELECT COUNT(*) FROM shipment WHERE truck_id IN (SELECT truck_id FROM truck WHERE model_year = '2005')) - (SELECT COUNT(*) FROM shipment WHERE truck_id IN (SELECT truck_id FROM truck WHERE model_year = '2006')) AS shipment_difference;"}
{"sample_id": 5649, "db_id": "shipping", "gold_sql": "SELECT annual_revenue FROM customer WHERE cust_name = 'Klett & Sons Repair'", "pred_sql": "SELECT annual_revenue FROM customer WHERE cust_name = 'Klett & Sons Repair';"}
{"sample_id": 5656, "db_id": "shipping", "gold_sql": "SELECT COUNT(*) FROM city AS T1 INNER JOIN shipment AS T2 ON T1.city_id = T2.city_id INNER JOIN driver AS T3 ON T3.driver_id = T2.driver_id WHERE T3.first_name = 'Zachery' AND T3.last_name = 'Hicks' AND T1.city_name = 'New York' AND STRFTIME('%Y', T2.ship_date) = '2016'", "pred_sql": "SELECT COUNT(*) AS shipment_count FROM shipment s JOIN driver d ON s.driver_id = d.driver_id JOIN city c ON s.city_id = c.city_id WHERE d.first_name = 'Zachery' AND d.last_name = 'Hicks' AND c.city_name = 'New York' AND strftime('%Y', s.ship_date) = '2016';"}
{"sample_id": 5604, "db_id": "shipping", "gold_sql": "SELECT T2.area / T2.population FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1369'", "pred_sql": "SELECT (CAST(c.area AS FLOAT) / CAST(c.population AS FLOAT)) AS population_density \nFROM city c \nJOIN shipment s ON c.city_id = s.city_id \nWHERE s.ship_id = 1369;"}
{"sample_id": 5670, "db_id": "shipping", "gold_sql": "SELECT T1.model_year FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1245'", "pred_sql": "SELECT truck.model_year FROM shipment JOIN truck ON shipment.truck_id = truck.truck_id WHERE shipment.ship_id = 1245;"}
{"sample_id": 5678, "db_id": "shipping", "gold_sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_date = '2016-02-22'", "pred_sql": "SELECT driver.first_name, driver.last_name \nFROM shipment \nJOIN driver ON shipment.driver_id = driver.driver_id \nWHERE shipment.ship_date = '2016-02-22';"}
{"sample_id": 5581, "db_id": "shipping", "gold_sql": "SELECT COUNT(T1.cust_id) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.state = 'FL'", "pred_sql": "SELECT COUNT(*) AS shipment_count FROM shipment s JOIN customer c ON s.cust_id = c.cust_id WHERE c.state = 'Florida';"}
{"sample_id": 5654, "db_id": "shipping", "gold_sql": "SELECT T3.make, T4.first_name, T4.last_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN truck AS T3 ON T3.truck_id = T2.truck_id INNER JOIN driver AS T4 ON T4.driver_id = T2.driver_id WHERE T1.cust_name = 'Klett & Sons Repair'", "pred_sql": "SELECT truck.make, driver.first_name || ' ' || driver.last_name AS driver_name \nFROM shipment \nJOIN customer ON shipment.cust_id = customer.cust_id \nJOIN truck ON shipment.truck_id = truck.truck_id \nJOIN driver ON shipment.driver_id = driver.driver_id \nWHERE customer.cust_name = 'Klett & Sons Repair';"}
{"sample_id": 5637, "db_id": "shipping", "gold_sql": "SELECT T2.address FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id GROUP BY T2.driver_id HAVING SUM(T1.weight) > 50000", "pred_sql": "SELECT driver.address FROM driver JOIN shipment ON driver.driver_id = shipment.driver_id WHERE shipment.weight > 50000;"}
{"sample_id": 4155, "db_id": "citeseer", "gold_sql": "SELECT DISTINCT T1.class_label FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T2.word_cited_id = 'word1163'", "pred_sql": "SELECT DISTINCT p.class_label \nFROM cites c \nJOIN paper p ON c.citing_paper_id = p.paper_id \nJOIN content ct ON ct.paper_id = c.cited_paper_id \nWHERE ct.word_cited_id = 'word1163';"}
{"sample_id": 4141, "db_id": "citeseer", "gold_sql": "SELECT COUNT(DISTINCT T2.word_cited_id) FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'AI'", "pred_sql": "SELECT COUNT(c.word_cited_id) AS total_word_cited FROM content c JOIN paper p ON c.paper_id = p.paper_id WHERE p.class_label = 'AI' AND c.word_cited_id = '1';"}
{"sample_id": 4144, "db_id": "citeseer", "gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.class_label = 'Agents' THEN T2.word_cited_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.word_cited_id) FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id", "pred_sql": "SELECT (SUM(c.word_cited_id) * 100.0 / COUNT(c.word_cited_id)) AS percentage_words_used\nFROM content c\nJOIN paper p ON c.paper_id = p.paper_id\nWHERE p.class_label = 'Agents';"}
{"sample_id": 1661, "db_id": "car_retails", "gold_sql": "SELECT t3.productName, SUM(t2.quantityOrdered) FROM orders AS t1 INNER JOIN orderdetails AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN products AS t3 ON t2.productCode = t3.productCode WHERE STRFTIME('%Y', t1.orderDate) = '2003' GROUP BY t3.productName ORDER BY SUM(t2.quantityOrdered) DESC LIMIT 3", "pred_sql": "SELECT p.productname, SUM(od.quantityordered) AS total_quantity_sold \nFROM products p \nJOIN orderdetails od ON p.productcode = od.productcode \nJOIN orders o ON od.ordernumber = o.ordernumber \nWHERE strftime('%Y', o.orderdate) = '2003' \nGROUP BY p.productname \nORDER BY total_quantity_sold DESC \nLIMIT 3;"}
{"sample_id": 1655, "db_id": "car_retails", "gold_sql": "SELECT SUM(t2.quantityOrdered) FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode WHERE t1.productName = '2003 Harley-Davidson Eagle Drag Bike'", "pred_sql": "SELECT SUM(od.quantityordered) AS total_ordered\nFROM orderdetails od\nJOIN products p ON od.productcode = p.productcode\nWHERE p.productname = '2003 Harley-Davidson Eagle Drag Bike';"}
{"sample_id": 1627, "db_id": "car_retails", "gold_sql": "SELECT t1.customerName FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t2.firstName = 'Steve' AND t2.lastName = 'Patterson'", "pred_sql": "SELECT * FROM customers WHERE salesrepemployeenumber = (SELECT employeenumber FROM employees WHERE firstname = 'Steve' AND lastname = 'Patterson');"}
{"sample_id": 1583, "db_id": "car_retails", "gold_sql": "SELECT COUNT(creditLimit) FROM customers WHERE creditLimit < 220000 AND country = 'Norway'", "pred_sql": "SELECT COUNT(*) AS customer_count FROM customers WHERE country = 'Norway' AND creditlimit < 220000;"}
{"sample_id": 1622, "db_id": "car_retails", "gold_sql": "SELECT (t1.MSRP - t2.priceEach) / t1.MSRP FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode WHERE t1.productCode = 'S18_3482' AND t2.orderNumber = '10108'", "pred_sql": "SELECT (priceeach * quantityordered) AS total_price, (SELECT discount FROM orderdetails WHERE ordernumber = '10108' AND productcode = 'S18_3482') AS discount FROM orderdetails WHERE ordernumber = '10108' AND productcode = 'S18_3482';"}
{"sample_id": 1629, "db_id": "car_retails", "gold_sql": "SELECT t1.phone FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t2.firstName = 'Leslie' AND t2.lastName = 'Jennings' ORDER BY t1.creditLimit DESC LIMIT 3", "pred_sql": "SELECT phone FROM customers WHERE salesrepemployeenumber = (SELECT employeenumber FROM employees WHERE firstname = 'Leslie' AND lastname = 'Jennings') ORDER BY creditlimit DESC LIMIT 3;"}
{"sample_id": 1585, "db_id": "car_retails", "gold_sql": "SELECT productCode, quantityInStock FROM products WHERE productLine = 'Motorcycles' ORDER BY quantityInStock DESC LIMIT 5", "pred_sql": "SELECT productcode FROM products WHERE productline = 'Motorcycles' ORDER BY quantityinstock DESC LIMIT 5;"}
{"sample_id": 1619, "db_id": "car_retails", "gold_sql": "SELECT t2.email FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.customerName = 'Dragon Souveniers, Ltd.'", "pred_sql": "SELECT email FROM employees WHERE employeenumber = (SELECT salesrepemployeenumber FROM customers WHERE customername = 'Dragon Souveniers, Ltd.');"}
{"sample_id": 1568, "db_id": "car_retails", "gold_sql": "SELECT T2.customerName, T2.phone FROM orders AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.status = 'Cancelled'", "pred_sql": "SELECT customers.customername, customers.phone \nFROM customers \nJOIN orders ON customers.customernumber = orders.customernumber \nWHERE orders.status = 'Cancelled';"}
{"sample_id": 1663, "db_id": "car_retails", "gold_sql": "SELECT t1.lastName, t1.firstName FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t2.city = 'NYC' AND t1.jobTitle = 'Sales Rep'", "pred_sql": "SELECT CONCAT(e.firstname, ' ', e.lastname) AS full_name \nFROM employees e \nJOIN offices o ON e.officecode = o.officecode \nWHERE o.city = 'New York';"}
{"sample_id": 1664, "db_id": "car_retails", "gold_sql": "SELECT t2.customerName, t2.country FROM payments AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.checkNumber = 'GG31455'", "pred_sql": "SELECT customers.customername, customers.country FROM customers JOIN payments ON customers.customernumber = payments.customernumber WHERE payments.checknumber = 'GG31455';"}
{"sample_id": 1572, "db_id": "car_retails", "gold_sql": "SELECT T1.firstName, T1.lastName, T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Tokyo' AND T1.jobTitle = 'Sales Rep'", "pred_sql": "SELECT email, firstname || ' ' || lastname AS full_name FROM employees WHERE officecode IN (SELECT officecode FROM offices WHERE city = 'Tokyo') AND jobtitle = 'Sales Rep';"}
{"sample_id": 1610, "db_id": "car_retails", "gold_sql": "SELECT T2.firstName, T2.lastName FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber WHERE T1.addressLine1 = '25 Maiden Lane' AND T1.addressLine2 = 'Floor No. 4'", "pred_sql": "SELECT e.firstname, e.lastname \nFROM employees e \nJOIN customers c ON e.employeenumber = c.salesrepemployeenumber \nJOIN orders o ON c.customernumber = o.customernumber \nWHERE c.addressline1 = '25 Maiden Lane' AND c.addressline2 = 'Floor No. 4';"}
{"sample_id": 1599, "db_id": "car_retails", "gold_sql": "SELECT CAST(SUM(CASE WHEN customerNumber = 186 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(orderNumber) FROM orders WHERE status = 'Shipped' AND shippedDate BETWEEN '2005-01-01' AND '2005-12-31'", "pred_sql": "SELECT (COUNT(CASE WHEN o.customernumber = '186' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM orders o WHERE strftime('%Y', o.orderdate) = '2005' AND o.status = 'Shipped';"}
{"sample_id": 1554, "db_id": "car_retails", "gold_sql": "SELECT ( SELECT COUNT(customerNumber) FROM customers WHERE creditLimit <= 100000 AND customerNumber IN ( SELECT customerNumber FROM payments WHERE STRFTIME('%Y', paymentDate) = '2004' ) ), T1.customerName FROM customers AS T1 INNER JOIN payments AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.creditLimit <= 100000 AND STRFTIME('%Y', T2.paymentDate) = '2004' GROUP BY T1.customerNumber, T1.customerName ORDER BY SUM(T2.amount) DESC LIMIT 1", "pred_sql": "SELECT c.customernumber, c.customername, SUM(p.amount) AS total_payment\nFROM customers c\nJOIN payments p ON c.customernumber = p.customernumber\nWHERE c.creditlimit <= 100000 AND strftime('%Y', p.paymentdate) = '2004'\nGROUP BY c.customernumber, c.customername\nORDER BY total_payment DESC\nLIMIT 1;"}
{"sample_id": 1557, "db_id": "car_retails", "gold_sql": "SELECT COUNT(DISTINCT T1.orderNumber) FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE T1.quantityOrdered * T1.priceEach > 4000 AND T2.status = 'Cancelled'", "pred_sql": "SELECT COUNT(DISTINCT o.ordernumber) AS total_cancelled_orders\nFROM orders o\nJOIN orderdetails od ON o.ordernumber = od.ordernumber\nWHERE o.status = 'Cancelled'\nGROUP BY o.ordernumber\nHAVING SUM(od.quantityordered * od.priceeach) > 4000;"}
{"sample_id": 1611, "db_id": "car_retails", "gold_sql": "SELECT T1.addressLine1, T1.addressLine2 FROM offices AS T1 INNER JOIN employees AS T2 ON T1.officeCode = T2.officeCode WHERE T2.firstName = 'Foon Yue' AND T2.lastName = 'Tseng'", "pred_sql": "SELECT o.addressline1, o.addressline2, o.city, o.state, o.country, o.postalcode \nFROM employees e \nJOIN offices o ON e.officecode = o.officecode \nWHERE e.firstname = 'Foon' AND e.lastname = 'Tseng';"}
{"sample_id": 1616, "db_id": "car_retails", "gold_sql": "SELECT t2.contactFirstName, t2.contactLastName FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.orderNumber = '10160'", "pred_sql": "SELECT contactfirstname, contactlastname FROM customers INNER JOIN orders ON customers.customernumber = orders.customernumber WHERE orders.ordernumber = '10160';"}
{"sample_id": 1632, "db_id": "car_retails", "gold_sql": "SELECT t2.postalCode FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t1.jobTitle = 'VP Sales'", "pred_sql": "SELECT o.postalcode FROM offices o JOIN employees e ON o.officecode = e.officecode WHERE e.jobtitle = 'VP Sales';"}
{"sample_id": 1556, "db_id": "car_retails", "gold_sql": "SELECT T2.productName, SUM(T1.quantityOrdered * T1.priceEach) FROM orderdetails AS T1 INNER JOIN ( SELECT productCode, productName FROM products ORDER BY MSRP - buyPrice DESC LIMIT 1 ) AS T2 ON T1.productCode = T2.productCode UNION SELECT T2.productName, SUM(quantityOrdered * priceEach) FROM orderdetails AS T1 INNER JOIN ( SELECT productCode, productName FROM products ORDER BY MSRP - buyPrice ASC LIMIT 1 ) AS T2 ON T1.productCode = T2.productCode", "pred_sql": "SELECT productcode, productname, (msrp - buyprice) AS expected_profit, MAX(quantityordered * priceeach) AS total_price\nFROM products\nJOIN orderdetails ON products.productcode = orderdetails.productcode\nGROUP BY productcode, productname\nORDER BY expected_profit DESC\nLIMIT 1;\n\nSELECT productcode, productname, (msrp - buyprice) AS expected_profit, MAX(quantityordered * priceeach) AS total_price\nFROM products\nJOIN orderdetails ON products.productcode = orderdetails.productcode\nGROUP BY productcode, productname\nORDER BY expected_profit ASC\nLIMIT 1;"}
{"sample_id": 1575, "db_id": "car_retails", "gold_sql": "SELECT T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T1.jobTitle LIKE '%Sales Manager%' AND T2.city = 'Sydney'", "pred_sql": "SELECT email FROM employees WHERE jobtitle = 'Sales Manager' AND officecode IN (SELECT officecode FROM offices WHERE city = 'Sydney');"}
{"sample_id": 1668, "db_id": "car_retails", "gold_sql": "SELECT COUNT(t2.orderNumber) FROM customers AS t1 INNER JOIN orders AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.status = 'On Hold' AND t1.country = 'USA'", "pred_sql": "SELECT COUNT(DISTINCT c.country) AS country_count \nFROM customers c \nJOIN orders o ON c.customernumber = o.customernumber \nWHERE c.country = 'USA' AND o.status = 'In Process';"}
{"sample_id": 1631, "db_id": "car_retails", "gold_sql": "SELECT t2.addressLine1, t2.addressLine2 FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t1.jobTitle = 'President'", "pred_sql": "SELECT * FROM offices WHERE officecode IN (SELECT officecode FROM employees WHERE jobtitle = 'President');"}
{"sample_id": 1560, "db_id": "car_retails", "gold_sql": "SELECT SUM(T1.quantityOrdered * T1.priceEach) FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode WHERE T2.productLine = 'Motorcycles'", "pred_sql": "SELECT SUM(od.quantityordered * od.priceeach) AS total_value\nFROM orderdetails od\nJOIN products p ON od.productcode = p.productcode\nWHERE p.productline = 'Motorcycles';"}
{"sample_id": 1605, "db_id": "car_retails", "gold_sql": "SELECT T1.addressLine1, T1.addressLine2 FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber WHERE T2.jobTitle = 'Sales Rep'", "pred_sql": "SELECT o.addressline1 || ' ' || o.addressline2 AS full_address \nFROM offices o \nJOIN employees e ON o.officecode = e.officecode \nWHERE e.officecode IN (\n    SELECT officecode \n    FROM employees \n    GROUP BY officecode \n    HAVING COUNT(*) = 4\n) \nAND e.jobtitle = 'Sales Representative';"}
{"sample_id": 7780, "db_id": "hockey", "gold_sql": "SELECT SUM(CAST(T2.W AS REAL) / T2.G) / COUNT(T1.oppID) FROM TeamVsTeam AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID WHERE T2.name = 'Buffalo Sabres' AND T1.year = 2000", "pred_sql": "SELECT AVG(w / (w + l)) AS average_winning_rate FROM coaches WHERE tmid = 'BUF' AND year = '2000'"}
{"sample_id": 7752, "db_id": "hockey", "gold_sql": "SELECT CAST(PPG AS REAL) / PPC FROM Teams WHERE year = 2009 AND name = 'New York Rangers'", "pred_sql": "SELECT ppc FROM teamspost WHERE tmid = 'NYR' AND year = 2009;"}
{"sample_id": 7787, "db_id": "hockey", "gold_sql": "SELECT COUNT(playerID) FROM Master WHERE hofID IS NOT NULL AND playerID IS NOT NULL AND coachID IS NOT NULL", "pred_sql": "SELECT COUNT(DISTINCT m.playerid) AS hall_of_famers_count\nFROM master m\nJOIN hof h ON m.hofid = h.hofid\nWHERE m.coachid IS NOT NULL;"}
{"sample_id": 7727, "db_id": "hockey", "gold_sql": "SELECT SUM(W) FROM Goalies GROUP BY tmID ORDER BY SUM(SHO) DESC LIMIT 1", "pred_sql": "SELECT t.tmid, t.w FROM teams t JOIN goalies g ON t.tmid = g.tmid WHERE g.sho = (SELECT MAX(sho) FROM goalies)"}
{"sample_id": 7687, "db_id": "hockey", "gold_sql": "SELECT \"T/OL\" FROM Goalies WHERE playerID = 'vernomi01' AND year = 1998", "pred_sql": "SELECT COUNT(*) AS games_with_ties_or_ot_losses \nFROM ( \n    SELECT g, t AS ties, ol AS overtime_losses \n    FROM goaliessc \n    WHERE playerid = 'vernomi01' AND year = '1998' \n) AS player_games;"}
{"sample_id": 7803, "db_id": "hockey", "gold_sql": "SELECT playerID FROM Master ORDER BY weight DESC LIMIT 5", "pred_sql": "SELECT playerid, weight FROM master ORDER BY weight DESC LIMIT 5;"}
{"sample_id": 7786, "db_id": "hockey", "gold_sql": "SELECT COUNT(hofID) FROM HOF WHERE category = 'Player' AND year = 1958", "pred_sql": "SELECT COUNT(*) AS total_hof_players FROM hof WHERE year = '1958';"}
{"sample_id": 7704, "db_id": "hockey", "gold_sql": "SELECT playerID FROM ScoringSC ORDER BY A DESC LIMIT 1", "pred_sql": "SELECT playerid, year, tmid, a AS assists FROM scoring WHERE year IN (SELECT year FROM seriespost WHERE round = 'Finals') ORDER BY a DESC LIMIT 1;"}
{"sample_id": 7757, "db_id": "hockey", "gold_sql": "SELECT name FROM Teams WHERE year = 1995 AND name IN ('Florida Panthers', 'Edmonton Oilers', 'Los Angeles Kings') ORDER BY PKC DESC LIMIT 1", "pred_sql": "SELECT name, pkc FROM teams WHERE year = '1995' AND tmid IN ('FLA', 'EDM', 'LAK') ORDER BY pkc DESC LIMIT 1;"}
{"sample_id": 7769, "db_id": "hockey", "gold_sql": "SELECT COUNT(DISTINCT T3.coachID) FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Philadelphia Flyers' AND T3.birthMon = 3", "pred_sql": "SELECT COUNT(*) AS coach_count \nFROM coaches \nJOIN master ON coaches.coachid = master.coachid \nWHERE coaches.tmid = 'PHI' \nAND master.birthmon = '3';"}
{"sample_id": 7765, "db_id": "hockey", "gold_sql": "SELECT DISTINCT T3.firstName FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Montreal Canadiens'", "pred_sql": "SELECT DISTINCT coaches.year, master.firstname FROM coaches JOIN teams ON coaches.tmid = teams.tmid WHERE teams.name = 'Montreal Canadiens';"}
{"sample_id": 7674, "db_id": "hockey", "gold_sql": "SELECT COUNT(T1.playerID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T1.birthMon IN (7, 8)", "pred_sql": "SELECT COUNT(*) AS hall_of_fame_count\nFROM hof\nWHERE name IN (\n    SELECT firstname || ' ' || lastname\n    FROM master\n    WHERE (birthmon = '07' OR birthmon = '08')\n)"}
{"sample_id": 7797, "db_id": "hockey", "gold_sql": "SELECT playerID FROM Goalies AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.name = 'Minnesota North Stars' GROUP BY T1.playerID ORDER BY SUM(T1.GA) DESC LIMIT 1", "pred_sql": "SELECT g.playerid, m.firstname, m.lastname, SUM(g.ga) AS total_goals_against\nFROM goalies g\nJOIN master m ON g.playerid = m.playerid\nWHERE g.tmid = 'MIN'  -- Minnesota North Stars team ID\nGROUP BY g.playerid, m.firstname, m.lastname\nORDER BY total_goals_against DESC\nLIMIT 1;"}
{"sample_id": 7672, "db_id": "hockey", "gold_sql": "SELECT T2.award FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.deathCity = 'Kemptville'", "pred_sql": "SELECT DISTINCT awardsplayers.award \nFROM awardsplayers \nJOIN master ON awardsplayers.playerid = master.playerid \nWHERE master.deathcity = 'Arlington';"}
{"sample_id": 7789, "db_id": "hockey", "gold_sql": "SELECT T2.BenchMinor FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T3.firstName = 'Scotty' AND T3.lastName = 'Bowman' AND T1.year = 1982", "pred_sql": "SELECT t.benchminor FROM coaches c JOIN teams t ON c.tmid = t.tmid AND c.year = t.year WHERE c.year = '1982' AND c.coachid = (SELECT coachid FROM master WHERE firstname = 'Scotty' AND lastname = 'Bowman')"}
{"sample_id": 7768, "db_id": "hockey", "gold_sql": "SELECT T3.firstName FROM Coaches AS T1 INNER JOIN TeamsSC AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.year = 1922", "pred_sql": "SELECT DISTINCT c.firstname \nFROM coaches c \nJOIN teams t ON c.tmid = t.tmid AND c.year = t.year \nJOIN seriespost s ON t.year = s.year \nWHERE s.round = 'Finals' AND s.year = '1922';"}
{"sample_id": 7709, "db_id": "hockey", "gold_sql": "SELECT MAX(T2.year) - MIN(T2.year) FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T1.firstName = 'Don' AND T1.lastName = 'Waddell'", "pred_sql": "SELECT COUNT(DISTINCT year) AS years_after_retirement\nFROM coaches\nWHERE coachid = (SELECT coachid FROM master WHERE firstname = 'Don' AND lastname = 'Waddell')\nAND year > (SELECT lastnhl FROM master WHERE firstname = 'Don' AND lastname = 'Waddell');"}
{"sample_id": 7636, "db_id": "hockey", "gold_sql": "SELECT T1.firstName, T1.lastName, T3.year FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.year = T3.year AND T2.tmID = T3.tmID WHERE T1.deathYear IS NOT NULL AND T3.name = 'Boston Bruins' AND T3.rank = 1 AND T1.pos = 'G'", "pred_sql": "SELECT g.playerid, g.year FROM goalies g JOIN teams t ON g.tmid = t.tmid WHERE t.year = g.year AND t.lgid = 'NHL' AND t.rank = '1' AND t.name = 'Boston Bruins';"}
{"sample_id": 7647, "db_id": "hockey", "gold_sql": "SELECT COUNT(playerID) FROM AwardsPlayers WHERE pos = 'G' AND year = 1983", "pred_sql": "SELECT COUNT(DISTINCT a.playerid) AS goalie_count\nFROM awardsplayers a\nJOIN master m ON a.playerid = m.playerid\nWHERE a.year = '1983' AND m.pos = 'G';"}
{"sample_id": 7799, "db_id": "hockey", "gold_sql": "SELECT T2.shootCatch FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 2010 GROUP BY T2.shootCatch ORDER BY SUM(T1.SHO) DESC LIMIT 1", "pred_sql": "SELECT g.shootcatch \nFROM goalies g \nJOIN combinedshutouts cs ON g.playerid = cs.idgoalie1 OR g.playerid = cs.idgoalie2 \nWHERE cs.year = 2010 \nGROUP BY g.playerid \nORDER BY COUNT(cs.year) DESC \nLIMIT 1;"}
{"sample_id": 7706, "db_id": "hockey", "gold_sql": "SELECT DISTINCT pos FROM ScoringSC WHERE playerID = 'hartgi01'", "pred_sql": "SELECT pos FROM scoring WHERE playerid = 'hartgi01' AND year = (SELECT year FROM seriespost WHERE series = 'Stanley Cup Finals')"}
{"sample_id": 7615, "db_id": "hockey", "gold_sql": "SELECT nameGiven , nameGiven , birthYear, birthMon, birthDay FROM Master WHERE deathYear IS NULL ORDER BY birthYear DESC, birthMon DESC, birthday DESC LIMIT 1", "pred_sql": "SELECT namegiven, birthyear || '-' || birthmon || '-' || birthday AS date_of_birth \nFROM master \nWHERE deathyear IS NULL \nORDER BY birthyear DESC, birthmon DESC, birthday DESC \nLIMIT 1;"}
{"sample_id": 7793, "db_id": "hockey", "gold_sql": "SELECT T2.firstName, T2.lastName , IIF(T1.tmID = 'BOS', 'YES', 'NO') FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 1972 AND T1.tmID = 'BOS' AND T2.coachID IS NOT NULL AND T2.hofID IS NULL", "pred_sql": "SELECT m.firstname, m.lastname, c.year, c.tmid, h.year AS hof_year \nFROM master m \nJOIN goalies g ON m.playerid = g.playerid \nJOIN coaches c ON m.coachid = c.coachid \nJOIN hof h ON m.hofid = h.hofid \nWHERE g.tmid = 'BOS' AND g.year = '1972';"}
{"sample_id": 7621, "db_id": "hockey", "gold_sql": "SELECT T1.playerID, T2.year, Min FROM Master AS T1 INNER JOIN Goalies AS T2 ON T2.playerID = T1.playerID WHERE T1.deathYear IS NOT NULL ORDER BY T2.Min DESC LIMIT 1", "pred_sql": "SELECT g.playerid, m.lastname, g.year, MAX(g.min) AS max_minutes\nFROM goalies g\nJOIN master m ON g.playerid = m.playerid\nWHERE m.deathyear IS NOT NULL\nGROUP BY g.playerid, m.lastname, g.year\nORDER BY m.lastname;"}
{"sample_id": 7767, "db_id": "hockey", "gold_sql": "SELECT T3.height FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Montreal Canadiens' AND T3.coachID IS NOT NULL ORDER BY T3.height DESC LIMIT 1", "pred_sql": "SELECT MAX(height) AS tallest_coach_height \nFROM coaches \nJOIN teams ON coaches.tmid = teams.tmid \nWHERE teams.name = 'Montreal Canadiens';"}
{"sample_id": 7694, "db_id": "hockey", "gold_sql": "SELECT T1.shootCatch FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2010 GROUP BY T2.playerID ORDER BY SUM(T2.SHO) DESC LIMIT 1", "pred_sql": "SELECT g.shootcatch \nFROM goalies g \nJOIN combinedshutouts cs ON g.playerid = cs.idgoalie1 OR g.playerid = cs.idgoalie2 \nWHERE cs.year = 2010 \nGROUP BY g.playerid \nORDER BY COUNT(cs.r/p) DESC \nLIMIT 1;"}
{"sample_id": 7616, "db_id": "hockey", "gold_sql": "SELECT firstName, lastName, deathYear - birthYear FROM Master WHERE shootCatch IS NULL AND deathYear IS NOT NULL", "pred_sql": "SELECT firstname || ' ' || lastname AS player_name, (strftime('%Y', 'now') - birthyear) AS age_at_death \nFROM master \nWHERE (deathyear IS NOT NULL) AND (shootcatch IS NULL OR shootcatch = 'empty')"}
{"sample_id": 7795, "db_id": "hockey", "gold_sql": "SELECT T2.firstName, T2.lastName FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T1.tmID = T3.tmID AND T1.year = T3.year WHERE T3.name = 'Quebec Bulldogs' AND T2.pos = 'D' GROUP BY T1.playerID, T2.firstName, T2.lastName ORDER BY SUM(T1.Min) DESC LIMIT 1", "pred_sql": "SELECT m.firstname || ' ' || m.lastname AS full_name, SUM(g.min) AS total_minutes\nFROM goalies g\nJOIN master m ON g.playerid = m.playerid\nWHERE g.tmid = 'QUE'  -- Assuming 'QUE' is the team ID for Quebec Bulldogs\nGROUP BY m.playerid\nORDER BY total_minutes DESC\nLIMIT 1;"}
{"sample_id": 7818, "db_id": "hockey", "gold_sql": "SELECT CAST(T1.W AS REAL) / T1.G, T2.playerID FROM Teams AS T1 INNER JOIN Scoring AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.tmID = 'CAR' AND T1.year = 1998 GROUP BY T1.W / T1.G, T2.playerID ORDER BY SUM(T2.G) DESC LIMIT 1", "pred_sql": "SELECT scoring.playerid, SUM(scoring.g) AS total_goals, COUNT(scoring.gp) AS games_played, (SUM(scoring.g) / COUNT(scoring.gp)) AS goals_per_game FROM scoring WHERE scoring.year = 1998 AND scoring.tmid = 'CAR' GROUP BY scoring.playerid ORDER BY total_goals DESC LIMIT 1;"}
{"sample_id": 7732, "db_id": "hockey", "gold_sql": "SELECT COUNT(playerID) FROM Master WHERE shootCatch IS NULL AND firstNHL = '2011'", "pred_sql": "SELECT COUNT(*) AS player_count \nFROM master \nWHERE playerid IN (\n    SELECT playerid \n    FROM goalies \n    WHERE year = '2011' \n    AND (shootcatch IS NULL OR shootcatch = 'empty')\n) \nAND playerid IN (\n    SELECT playerid \n    FROM scoring \n    WHERE year = '2011'\n)"}
{"sample_id": 7685, "db_id": "hockey", "gold_sql": "SELECT Min FROM Goalies WHERE playerID = 'valiqst01' AND year = 2007", "pred_sql": "SELECT SUM(min) AS total_minutes FROM goaliessc WHERE playerid = 'valiqst01' AND year = '2007';"}
{"sample_id": 7662, "db_id": "hockey", "gold_sql": "SELECT COUNT(T1.coachID) FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 1940 AND T1.birthCity = 'Toronto'", "pred_sql": "SELECT COUNT(DISTINCT c.coachid) AS coach_count\nFROM coaches c\nJOIN awardscoaches ac ON c.coachid = ac.coachid\nJOIN master m ON c.coachid = m.coachid\nWHERE ac.year = 1940 AND m.birthcity = 'Toronto';"}
{"sample_id": 7791, "db_id": "hockey", "gold_sql": "SELECT T2.shootCatch, T2.firstName, T2.lastName FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID AND T1.year = 1973 WHERE T1.tmID = 'QUN' AND T1.GP = 32", "pred_sql": "SELECT m.firstname || ' ' || m.lastname AS full_name, g.playerid, g.year, g.tmid, g.gp, m.shootcatch \nFROM goaliessc g \nJOIN master m ON g.playerid = m.playerid \nWHERE g.gp = '32' AND g.tmid = 'QUN' AND g.year = '1973';"}
{"sample_id": 7716, "db_id": "hockey", "gold_sql": "SELECT T2.SOG FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T1.firstName = 'Cam' AND T1.lastName = 'Neely' AND T2.year = '1990'", "pred_sql": "SELECT SUM(sog) AS total_shots_on_goal FROM scoring WHERE playerid = (SELECT playerid FROM master WHERE firstname = 'Cam' AND lastname = 'Neely') AND year = 1990;"}
{"sample_id": 7785, "db_id": "hockey", "gold_sql": "SELECT name, hofID FROM HOF WHERE category = 'Builder' AND year BETWEEN 1970 AND 1979", "pred_sql": "SELECT hof.hofid FROM hof WHERE year BETWEEN '1970' AND '1979' AND category = 'referee';"}
{"sample_id": 7682, "db_id": "hockey", "gold_sql": "SELECT COUNT(year) FROM Goalies WHERE playerID = 'healygl01'", "pred_sql": "SELECT COUNT(DISTINCT year) AS years_played FROM scoring WHERE playerid = 'healygl01';"}
{"sample_id": 7644, "db_id": "hockey", "gold_sql": "SELECT T1.nameGiven, CAST(SUM(T2.Min) AS REAL) / SUM(T2.GP) FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T1.playerID = 'aebisda01' GROUP BY T1.nameGiven", "pred_sql": "SELECT m.namegiven, AVG(g.min) AS average_minutes\nFROM master m\nJOIN goalies g ON m.playerid = g.playerid\nWHERE m.playerid = 'aebisda01'"}
{"sample_id": 7801, "db_id": "hockey", "gold_sql": "SELECT playerID, coachID FROM Master WHERE playerID IS NOT NULL AND coachID IS NOT NULL", "pred_sql": "SELECT master.playerid, master.coachid \nFROM master \nWHERE master.coachid IS NOT NULL AND master.playerid IS NOT NULL;"}
{"sample_id": 7653, "db_id": "hockey", "gold_sql": "SELECT name FROM HOF WHERE year = 1978", "pred_sql": "SELECT name FROM hof WHERE year = '1978';"}
{"sample_id": 7686, "db_id": "hockey", "gold_sql": "SELECT W FROM Goalies WHERE playerID = 'vanbijo01' AND year = 1990", "pred_sql": "SELECT SUM(w) AS total_wins FROM scoring WHERE playerid = 'vanbijo01' AND year = 1990;"}
{"sample_id": 7689, "db_id": "hockey", "gold_sql": "SELECT IIF(T1.note = 'posthumous', 'YES', 'NO') FROM AwardsMisc AS T1 RIGHT JOIN Master AS T2 ON T1.ID = T2.playerID WHERE T2.legendsID = 'P194502'", "pred_sql": "SELECT hof.year, hof.name, hof.category FROM hof JOIN master ON hof.hofid = master.hofid WHERE master.legendsid = 'P194502';"}
{"sample_id": 9825, "db_id": "card_games", "gold_sql": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'", "pred_sql": "SELECT name, (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards)) AS percentage FROM foreign_data WHERE language = 'Spanish' GROUP BY name;"}
{"sample_id": 9935, "db_id": "card_games", "gold_sql": "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1", "pred_sql": "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalsetsize DESC LIMIT 1;"}
{"sample_id": 9923, "db_id": "card_games", "gold_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Journey into Nyx Hero''s Path' ORDER BY T1.convertedManaCost DESC LIMIT 1", "pred_sql": "SELECT name FROM cards WHERE uuid IN (SELECT uuid FROM sets WHERE name = 'Journey into Nyx Hero's Path') ORDER BY convertedmanacost DESC LIMIT 1;"}
{"sample_id": 9830, "db_id": "card_games", "gold_sql": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE (T1.power IS NULL OR T1.power = '*') AND T2.text LIKE '%triggered ability%'", "pred_sql": "SELECT COUNT(*) FROM cards WHERE power = '*' AND text LIKE '%triggered ability%';"}
{"sample_id": 9818, "db_id": "card_games", "gold_sql": "SELECT COUNT(id) FROM cards WHERE frameVersion = 1993 AND availability = 'paper' AND hasContentWarning = 1", "pred_sql": "SELECT COUNT(*) FROM cards WHERE frameversion = '1993' AND availability LIKE '%paper%' AND hascontentwarning = '1';"}
{"sample_id": 9860, "db_id": "card_games", "gold_sql": "SELECT language FROM set_translations WHERE id = 174", "pred_sql": "SELECT language FROM set_translations WHERE setcode = '174';"}
{"sample_id": 9776, "db_id": "card_games", "gold_sql": "SELECT COUNT(type) FROM cards WHERE artist = 'Aaron Boyd'", "pred_sql": "SELECT COUNT(DISTINCT type) AS card_type_count FROM cards WHERE artist = 'Aaron Boyd';"}
{"sample_id": 9872, "db_id": "card_games", "gold_sql": "SELECT SUM(CASE WHEN artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) FROM cards", "pred_sql": "SELECT COUNT(*) AS powerful_card_count FROM cards WHERE artist = 'Aaron Miller' AND cardkingdomid IS NOT NULL;"}
{"sample_id": 9821, "db_id": "card_games", "gold_sql": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL", "pred_sql": "SELECT DISTINCT type FROM cards WHERE availability LIKE '%arena%';"}
{"sample_id": 9770, "db_id": "card_games", "gold_sql": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'", "pred_sql": "SELECT rulings.* FROM rulings JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Sublime Epiphany' AND cards.number = '74s';"}
{"sample_id": 9846, "db_id": "card_games", "gold_sql": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards", "pred_sql": "SELECT (COUNT(*) FILTER (WHERE istextless = '1') * 1.0 / COUNT(*)) AS proportion FROM cards WHERE layout != 'normal';"}
{"sample_id": 9803, "db_id": "card_games", "gold_sql": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'", "pred_sql": "SELECT DISTINCT cards.artist FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Chinese Simplified';"}
{"sample_id": 9826, "db_id": "card_games", "gold_sql": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 309", "pred_sql": "SELECT set_translations.language FROM sets JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.basesetsize = '309';"}
{"sample_id": 9771, "db_id": "card_games", "gold_sql": "SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 AND T1.artist = (SELECT artist FROM cards WHERE isPromo = 1 GROUP BY artist HAVING COUNT(DISTINCT uuid) = (SELECT MAX(count_uuid) FROM ( SELECT COUNT(DISTINCT uuid) AS count_uuid FROM cards WHERE isPromo = 1 GROUP BY artist ))) LIMIT 1", "pred_sql": "SELECT cards.name, cards.artist, COUNT(rulings.id) AS ruling_count, cards.ispromo \nFROM cards \nLEFT JOIN rulings ON cards.uuid = rulings.uuid \nGROUP BY cards.uuid \nORDER BY ruling_count DESC \nLIMIT 1;"}
{"sample_id": 9906, "db_id": "card_games", "gold_sql": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC", "pred_sql": "SELECT fd.name FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid JOIN sets s ON c.setcode = s.code WHERE s.name = 'Coldsnap' ORDER BY c.convertedmanacost DESC LIMIT 1;"}
{"sample_id": 9796, "db_id": "card_games", "gold_sql": "SELECT COUNT(id) FROM cards WHERE availability = 'mtgo' AND borderColor = 'black'", "pred_sql": "SELECT COUNT(*) FROM cards WHERE bordercolor = 'black' AND availability LIKE '%mtgo%';"}
{"sample_id": 9789, "db_id": "card_games", "gold_sql": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'", "pred_sql": "SELECT DISTINCT artist FROM cards WHERE availability LIKE '%phyrexian%'"}
{"sample_id": 9819, "db_id": "card_games", "gold_sql": "SELECT manaCost FROM cards WHERE availability = 'mtgo,paper' AND borderColor = 'black' AND frameVersion = 2003 AND layout = 'normal'", "pred_sql": "SELECT manacost FROM cards WHERE layout = 'normal' AND frameversion = '2003' AND bordercolor = 'black' AND availability LIKE '%paper%' AND availability LIKE '%mtgo%';"}
{"sample_id": 9794, "db_id": "card_games", "gold_sql": "SELECT COUNT(id) FROM cards WHERE toughness = 99", "pred_sql": "SELECT COUNT(*) FROM cards WHERE toughness = '99';"}
{"sample_id": 9849, "db_id": "card_games", "gold_sql": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC'", "pred_sql": "SELECT DISTINCT set_translations.language FROM sets JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Archenemy' AND sets.code = 'ARC';"}
{"sample_id": 9850, "db_id": "card_games", "gold_sql": "SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 5 GROUP BY T1.name, T2.translation", "pred_sql": "SELECT sets.name, set_translations.translation FROM sets JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = '5';"}
{"sample_id": 9838, "db_id": "card_games", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*'", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards)) AS percentage FROM cards WHERE power IS NULL AND uuid IN (SELECT uuid FROM foreign_data WHERE language = 'French');"}
{"sample_id": 9900, "db_id": "card_games", "gold_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = 4", "pred_sql": "SELECT * FROM cards WHERE number = '4' AND setcode = 'CSP';"}
{"sample_id": 9922, "db_id": "card_games", "gold_sql": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL", "pred_sql": "SELECT set_translations.translation FROM cards JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.name = 'Fellwar Stone' AND set_translations.language = 'Japanese';"}
{"sample_id": 9893, "db_id": "card_games", "gold_sql": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'", "pred_sql": "SELECT type FROM sets WHERE name = 'Hauptset Zehnte Edition';"}
{"sample_id": 9868, "db_id": "card_games", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id), T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Abyssal Horror'", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE setcode = 'ABH')) AS percentage FROM cards WHERE convertedmanacost = '10' AND setcode = 'ABH';"}
{"sample_id": 9843, "db_id": "card_games", "gold_sql": "SELECT name FROM cards WHERE (power IS NULL OR power LIKE '%*%') AND promoTypes = 'arenaleague' ORDER BY name LIMIT 3", "pred_sql": "SELECT name, power FROM cards WHERE power = '*' AND promotypes LIKE '%arenaleague%' ORDER BY name ASC LIMIT 3;"}
{"sample_id": 9781, "db_id": "card_games", "gold_sql": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND originalType IS NOT NULL", "pred_sql": "SELECT originaltype FROM cards WHERE name = \"Ancestor's Chosen\";"}
{"sample_id": 9791, "db_id": "card_games", "gold_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.isReprint = 1", "pred_sql": "SELECT COUNT(*) FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE f.language = 'German' AND c.isreprint = '1';"}
{"sample_id": 9827, "db_id": "card_games", "gold_sql": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T1.block = 'Commander'", "pred_sql": "SELECT COUNT(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brazil)';"}
{"sample_id": 9910, "db_id": "card_games", "gold_sql": "SELECT code FROM sets WHERE releaseDate = '2017-07-14' GROUP BY releaseDate, code", "pred_sql": "SELECT code FROM sets WHERE releasedate = '2017-07-14';"}
{"sample_id": 9833, "db_id": "card_games", "gold_sql": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.flavorText LIKE '%DAS perfekte Gegenmittel zu einer dichten Formation%'", "pred_sql": "SELECT artist FROM cards WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation';"}
{"sample_id": 9823, "db_id": "card_games", "gold_sql": "SELECT SUM(CASE WHEN isOnlineOnly = 1 THEN 1.0 ELSE 0 END) / COUNT(id) * 100 FROM cards WHERE frameEffects = 'legendary'", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE frameeffects LIKE '%legendary%')) AS percentage\nFROM cards\nWHERE isonlineonly = '1' AND frameeffects LIKE '%legendary%';"}
{"sample_id": 9941, "db_id": "card_games", "gold_sql": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM sets WHERE name = 'Battlebond' )", "pred_sql": "SELECT set_translations.language FROM sets JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Battlebond';"}
{"sample_id": 9886, "db_id": "card_games", "gold_sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'", "pred_sql": "SELECT name FROM cards WHERE uuid IN (SELECT uuid FROM sets WHERE name = 'Hauptset Zehnte Edition')"}
{"sample_id": 9798, "db_id": "card_games", "gold_sql": "SELECT layout FROM cards WHERE keywords = 'Flying'", "pred_sql": "SELECT DISTINCT layout FROM cards WHERE keywords LIKE '%flying%';"}
{"sample_id": 9947, "db_id": "card_games", "gold_sql": "SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Banned' OR status = 'Restricted')", "pred_sql": "SELECT cards.uuid FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'old school' AND (legalities.status = 'restricted' OR legalities.status = 'banned');"}
{"sample_id": 9950, "db_id": "card_games", "gold_sql": "SELECT DISTINCT T2.name , CASE WHEN T1.status = 'Legal' THEN T1.format ELSE NULL END FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.setCode IN ( SELECT code FROM sets WHERE name = 'Hour of Devastation' )", "pred_sql": "SELECT cards.name, legalities.format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.setcode = 'HOU';"}
{"sample_id": 2136, "db_id": "world_development_indicators", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.value > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.CountryCode) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Region = 'South Asia' AND T2.IndicatorName = 'Life expectancy at birth, female (years)'", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM country WHERE region = 'South Asia')) AS percentage FROM indicators JOIN country ON indicators.countrycode = country.countrycode WHERE indicators.indicatorname = 'Life expectancy at birth, female (years)' AND indicators.value > 50;"}
{"sample_id": 2169, "db_id": "world_development_indicators", "gold_sql": "SELECT T2.Description, T2.Seriescode FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.TableName = 'Benin' AND T2.Year = 'YR2005'", "pred_sql": "SELECT cn.description, cn.seriescode FROM countrynotes cn JOIN country c ON cn.countrycode = c.countrycode WHERE c.shortname = 'Benin' AND cn.year = '2005';"}
{"sample_id": 2236, "db_id": "world_development_indicators", "gold_sql": "SELECT DISTINCT T1.CountryCode, T1.SpecialNotes FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Value = ( SELECT Value FROM Indicators WHERE IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND Year = 1960 ORDER BY Value DESC LIMIT 1 )", "pred_sql": "SELECT c.specialnotes FROM indicators i JOIN country c ON i.countrycode = c.countrycode WHERE i.indicatorname = 'Adolescent fertility rate' AND i.year = '1960' ORDER BY i.value DESC LIMIT 1;"}
{"sample_id": 2110, "db_id": "world_development_indicators", "gold_sql": "SELECT SeriesCode FROM Series WHERE Topic = 'Environment: Emissions' AND LicenseType = 'Restricted'", "pred_sql": "SELECT s.seriescode, c.alpha2code \nFROM series s \nJOIN indicators i ON s.seriescode = i.indicatorcode \nJOIN country c ON i.countrycode = c.countrycode \nWHERE s.topic = 'Environment: Emissions' AND s.licensetype = 'restricted';"}
{"sample_id": 2193, "db_id": "world_development_indicators", "gold_sql": "SELECT DISTINCT T1.LongName FROM Country AS T1 INNER JOIN footnotes AS T2 ON T1.CountryCode = T2.Countrycode INNER JOIN Series AS T3 ON T2.Seriescode = T3.SeriesCode WHERE T3.Topic = 'Poverty: Shared prosperity'", "pred_sql": "SELECT c.longname FROM country c JOIN series s ON c.countrycode = s.seriescode WHERE s.topic = 'Poverty: Shared Prosperity';"}
{"sample_id": 2216, "db_id": "world_development_indicators", "gold_sql": "SELECT LongName FROM Country WHERE IncomeGroup = 'Low income' AND Region = 'South Asia'", "pred_sql": "SELECT longname FROM country WHERE region = 'South Asia' AND incomegroup = 'low income'"}
{"sample_id": 2208, "db_id": "world_development_indicators", "gold_sql": "SELECT DISTINCT T2.LongName FROM CountryNotes AS T1 INNER JOIN Country AS T2 ON T1.Countrycode = T2.CountryCode WHERE T1.Description = 'Sources: UN Energy Statistics (2014)' LIMIT 3", "pred_sql": "SELECT c.longname FROM country c JOIN countrynotes cn ON c.countrycode = cn.countrycode JOIN series s ON cn.seriescode = s.seriescode WHERE s.description = 'UN Energy Statistics (2014)' LIMIT 3;"}
{"sample_id": 2176, "db_id": "world_development_indicators", "gold_sql": "SELECT COUNT(T2.Description) FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Year = 'YR1980' UNION ALL SELECT DISTINCT T1.TableName FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Year = 'YR1980'", "pred_sql": "SELECT COUNT(footnotes.description) AS footnote_count, country.tablename FROM footnotes JOIN country ON footnotes.countrycode = country.countrycode WHERE footnotes.year = '1980' GROUP BY country.tablename;"}
{"sample_id": 2219, "db_id": "world_development_indicators", "gold_sql": "SELECT countryname, MAX(value) FROM indicators WHERE indicatorname = 'Rural population (% of total population)'", "pred_sql": "SELECT country.shortname, indicators.value AS rural_population_percentage FROM indicators JOIN country ON indicators.countrycode = country.countrycode WHERE indicators.indicatorname = 'Rural population (% of total population)' ORDER BY indicators.value DESC LIMIT 1;"}
{"sample_id": 2132, "db_id": "world_development_indicators", "gold_sql": "SELECT MIN(T2.Value) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.OtherGroups = 'HIPC' AND T2.IndicatorName = 'International migrant stock, total'", "pred_sql": "SELECT MIN(value) AS min_international_migrant_stock\nFROM indicators\nJOIN country ON indicators.countrycode = country.countrycode\nWHERE indicatorname = 'International migrant stock, total' AND othergroups = 'HIPC';"}
{"sample_id": 2104, "db_id": "world_development_indicators", "gold_sql": "SELECT AVG(T2.Value) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName LIKE 'adolescent fertility rate%'", "pred_sql": "SELECT AVG(value) AS average_fertility_rate FROM indicators WHERE countrycode = (SELECT countrycode FROM country WHERE alpha2code = '1A') AND indicatorname = 'Adolescent Fertility Rate';"}
{"sample_id": 2189, "db_id": "world_development_indicators", "gold_sql": "SELECT DISTINCT T1.CountryCode FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Year = 1970 AND T1.Region = 'East Asia & Pacific' AND T2.Value > 2000000 AND t2.indicatorname = 'Urban population'", "pred_sql": "SELECT c.shortname, c.longname, i.value \nFROM country c \nJOIN indicators i ON c.countrycode = i.countrycode \nWHERE c.region = 'East Asia & Pacific' \nAND i.year = '1970' \nAND i.indicatorname = 'Urban Population' \nAND i.value > 2000000;"}
{"sample_id": 2133, "db_id": "world_development_indicators", "gold_sql": "SELECT DISTINCT T2.IndicatorName FROM Footnotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode WHERE T1.Year = 'YR2000' AND T2.Topic = 'Education: Inputs'", "pred_sql": "SELECT indicatorname FROM series WHERE topic = 'Education: Inputs' AND seriescode IN (SELECT seriescode FROM indicators WHERE year = '2000')"}
{"sample_id": 2168, "db_id": "world_development_indicators", "gold_sql": "SELECT DISTINCT T1.TableName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Covers mainland Tanzania only.'", "pred_sql": "SELECT tablename FROM country WHERE countrycode IN (SELECT countrycode FROM countrynotes WHERE description = 'Covers mainland Tanzania only')"}
{"sample_id": 2126, "db_id": "world_development_indicators", "gold_sql": "SELECT DISTINCT T1.CountryCode, T3.Description FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN CountryNotes AS T3 ON T1.CountryCode = T3.Countrycode WHERE T2.IndicatorName = 'Out-of-pocket health expenditure (% of private expenditure on health)' AND T2.Value > 0 AND T2.year = 2005 ORDER BY T2.Value DESC LIMIT 10", "pred_sql": "SELECT c.shortname, i.value, s.source \nFROM indicators i \nJOIN country c ON i.countrycode = c.countrycode \nJOIN series s ON i.indicatorcode = s.seriescode \nWHERE s.topic = 'Health' AND i.year = '2005' AND c.region = 'Europe' \nORDER BY i.value DESC \nLIMIT 10;"}
{"sample_id": 2210, "db_id": "world_development_indicators", "gold_sql": "SELECT T1.Seriescode, T1.Description FROM CountryNotes AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.ShortName = 'Germany'", "pred_sql": "SELECT series.seriescode, countrynotes.description FROM country JOIN countrynotes ON country.countrycode = countrynotes.countrycode WHERE country.shortname = 'Germany';"}
{"sample_id": 2244, "db_id": "world_development_indicators", "gold_sql": "SELECT T1.Value FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName INNER JOIN Country AS T3 ON T1.CountryCode = T3.CountryCode WHERE T2.LongDefinition = 'Adolescent fertility rate is the number of births per 1,000 women ages 15-19.' AND T3.ShortName = 'Arab World' AND T1.Year = 1960", "pred_sql": "SELECT indicators.value \nFROM indicators \nJOIN country ON indicators.countrycode = country.countrycode \nJOIN series ON indicators.indicatorcode = series.seriescode \nWHERE series.longdefinition = 'Adolescent fertility rate is the number of births per 1,000 women ages 15-19.' \nAND country.region = 'Arab World' \nAND indicators.year = '1960';"}
{"sample_id": 2094, "db_id": "world_development_indicators", "gold_sql": "SELECT COUNT(T1.Countrycode) FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Seriescode = 'SM.POP.TOTL' AND T1.IncomeGroup = 'Low income'", "pred_sql": "SELECT COUNT(DISTINCT c.countrycode) AS low_income_country_count\nFROM country c\nJOIN countrynotes cn ON c.countrycode = cn.countrycode\nWHERE cn.seriescode = 'SM.POP.TOTL' AND c.incomegroup = 'Low income';"}
{"sample_id": 2101, "db_id": "world_development_indicators", "gold_sql": "SELECT T1.SHORTNAME FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data are classified as official aid.' AND T2.Seriescode = 'DC.DAC.AUSL.CD' AND T2.Year LIKE '%2002%'", "pred_sql": "SELECT c.shortname FROM country c JOIN footnotes f ON c.countrycode = f.countrycode WHERE f.seriescode = 'DC.DAC.AUSL.CD' AND f.year = '2002' AND f.description = 'Data are classified as official aid.';"}
{"sample_id": 2114, "db_id": "world_development_indicators", "gold_sql": "SELECT DISTINCT T1.Description FROM FootNotes AS T1 INNER JOIN Country AS T2 ON T1.Countrycode = T2.CountryCode WHERE T1.Year = 'YR1981' AND T2.ShortName = 'Albania'", "pred_sql": "SELECT description FROM footnotes WHERE countrycode = (SELECT countrycode FROM country WHERE shortname = 'Albania') AND year = '1981';"}
{"sample_id": 2212, "db_id": "world_development_indicators", "gold_sql": "SELECT DISTINCT T1.Topic, T2.Description FROM Series AS T1 INNER JOIN SeriesNotes AS T2 ON T1.SeriesCode = T2.Seriescode WHERE T1.SeriesCode = 'SP.DYN.AMRT.MA'", "pred_sql": "SELECT topic, shortdefinition FROM series WHERE seriescode = 'SP.DYN.AMRT.MA';"}
{"sample_id": 2225, "db_id": "world_development_indicators", "gold_sql": "SELECT DISTINCT T1.IndicatorCode FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Year = 1960 AND T2.LongName = 'Republic of Albania'", "pred_sql": "SELECT indicatorcode FROM indicators WHERE countryname = 'Republic of Albania' AND year = '1960';"}
{"sample_id": 2206, "db_id": "world_development_indicators", "gold_sql": "SELECT SUM(CASE WHEN IncomeGroup = 'Lower middle income' THEN 1 ELSE 0 END) * 100.0 / COUNT(CountryCode) persentage FROM Country WHERE Region = 'Sub-Saharan Africa'", "pred_sql": "SELECT COUNT(*) * 1.0 / (SELECT COUNT(*) FROM country WHERE region = 'Sub-Saharan Africa') AS proportion_lower_middle_income FROM country WHERE region = 'Sub-Saharan Africa' AND incomegroup = 'Lower middle income';"}
{"sample_id": 2117, "db_id": "world_development_indicators", "gold_sql": "SELECT DISTINCT T1.Wb2code, T1.LendingCategory FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data source : Human Mortality Database by University of California, Berkeley, and Max Planck Institute for Demographic Research.' AND T1.LendingCategory != ''", "pred_sql": "SELECT country.wb2code, country.lendingcategory \nFROM countrynotes \nJOIN country ON countrynotes.countrycode = country.countrycode \nWHERE countrynotes.description = 'Data source : Human Mortality Database by University of California, Berkeley, and Max Planck Institute for Demographic Research.';"}
{"sample_id": 2159, "db_id": "world_development_indicators", "gold_sql": "SELECT DISTINCT T1.CountryCode, T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'High income: nonOECD'", "pred_sql": "SELECT c.shortname, i.indicatorcode \nFROM country c \nJOIN indicators i ON c.countrycode = i.countrycode \nWHERE c.incomegroup = 'High income' AND c.lendingcategory != 'IBRD';"}
{"sample_id": 2217, "db_id": "world_development_indicators", "gold_sql": "SELECT DISTINCT IndicatorCode FROM Indicators WHERE CountryName = 'Brazil' AND IndicatorName = 'Mobile cellular subscriptions'", "pred_sql": "SELECT indicatorcode FROM indicators WHERE countryname = 'Brazil' AND indicatorname = 'Mobile Cellular Subscriptions';"}
{"sample_id": 2137, "db_id": "world_development_indicators", "gold_sql": "SELECT CountryName FROM Indicators WHERE Year BETWEEN 1960 AND 1965 AND IndicatorName = 'Death rate, crude (per 1,000 people)' ORDER BY Value DESC LIMIT 1", "pred_sql": "SELECT country.shortname, MAX(indicators.value) AS highest_death_rate\nFROM indicators\nJOIN country ON indicators.countrycode = country.countrycode\nWHERE indicators.indicatorname = 'Death rate, crude (per 1,000 people)' \nAND indicators.year BETWEEN '1960' AND '1965'\nGROUP BY country.shortname\nORDER BY highest_death_rate DESC\nLIMIT 1;"}
{"sample_id": 2161, "db_id": "world_development_indicators", "gold_sql": "SELECT CountryCode, ShortName FROM Country LIMIT 10", "pred_sql": "SELECT countrycode, shortname FROM country LIMIT 10;"}
{"sample_id": 2115, "db_id": "world_development_indicators", "gold_sql": "SELECT DISTINCT T1.Description FROM FootNotes AS T1 INNER JOIN Country AS T2 ON T1.Countrycode = T2.CountryCode WHERE T1.Year = 'YR1984' AND T2.ShortName = 'The Bahamas' AND T1.Seriescode = 'SH.DTH.IMRT'", "pred_sql": "SELECT footnotes.description FROM footnotes JOIN country ON footnotes.countrycode = country.countrycode WHERE country.shortname = 'The Bahamas' AND footnotes.seriescode = 'SH.DTH.IMRT' AND footnotes.year = '1984';"}
{"sample_id": 2174, "db_id": "world_development_indicators", "gold_sql": "SELECT DISTINCT T1.CountryCode, T1.Region FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode ORDER BY T2.Value DESC LIMIT 5", "pred_sql": "SELECT countrycode, region FROM indicators JOIN country ON indicators.countrycode = country.countrycode ORDER BY value DESC LIMIT 5;"}
{"sample_id": 2092, "db_id": "world_development_indicators", "gold_sql": "SELECT T2.Description FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Seriescode = 'SM.POP.TOTL'", "pred_sql": "SELECT description FROM seriesnotes WHERE seriescode = 'SM.POP.TOTL' AND countrycode = (SELECT countrycode FROM country WHERE shortname = 'Aruba');"}
{"sample_id": 7101, "db_id": "works_cycles", "gold_sql": "SELECT T2.EndDate FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.WeightUnitMeasureCode = 'G' ORDER BY T1.Weight DESC LIMIT 1", "pred_sql": "SELECT enddate FROM productcosthistory pc JOIN product p ON pc.productid = p.productid ORDER BY p.weight DESC LIMIT 1;"}
{"sample_id": 7004, "db_id": "works_cycles", "gold_sql": "SELECT DISTINCT T1.Name FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Class = 'L' AND T2.TransactionType = 'P' ORDER BY T1.Name", "pred_sql": "SELECT p.name \nFROM purchaseorderdetail pod \nJOIN product p ON pod.productid = p.productid \nWHERE p.class = 'L';"}
{"sample_id": 7224, "db_id": "works_cycles", "gold_sql": "SELECT T2.FirstName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.SickLeaveHours > 65", "pred_sql": "SELECT firstname FROM person INNER JOIN employee ON person.businessentityid = employee.businessentityid WHERE employee.sickleavehours > 65;"}
{"sample_id": 7179, "db_id": "works_cycles", "gold_sql": "SELECT ProductAssemblyID FROM BillOfMaterials WHERE UnitMeasureCode = 'EA' AND BOMLevel = 2 AND PerAssemblyQty > 10", "pred_sql": "SELECT productassemblyid FROM billofmaterials WHERE unitmeasurecode = 'EA' AND bomlevel = 2 AND perassemblyqty > 10;"}
{"sample_id": 7271, "db_id": "works_cycles", "gold_sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY STRFTIME('%Y', T1.HireDate) - STRFTIME('%Y', T1.BirthDate) DESC LIMIT 1, 1", "pred_sql": "SELECT firstname || ' ' || lastname AS full_name FROM person JOIN employee ON person.businessentityid = employee.businessentityid ORDER BY birthdate ASC LIMIT 1 OFFSET 1;"}
{"sample_id": 7420, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID INNER JOIN Person AS T3 ON T1.BusinessEntityID WHERE T3.PersonType = 'SC' AND T2.GroupName = 'Manufacturing' AND STRFTIME('%Y', T1.EndDate) >= '2007' AND STRFTIME('%Y', T1.StartDate) <= '2007'", "pred_sql": "SELECT COUNT(e.businessentityid) AS StoreContactCount\nFROM employee e\nJOIN employeedepartmenthistory edh ON e.businessentityid = edh.businessentityid\nJOIN department d ON edh.departmentid = d.departmentid\nWHERE d.groupname = 'Manufacturing' \nAND edh.startdate <= '2007-12-31' \nAND (edh.enddate IS NULL OR edh.enddate >= '2007-01-01') \nAND e.persontype = 'SC';"}
{"sample_id": 6999, "db_id": "works_cycles", "gold_sql": "SELECT AVG(T2.StandardCost) FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductNumber = 'CA-1098'", "pred_sql": "SELECT AVG(standardcost) AS average_standard_cost FROM product WHERE productnumber = 'CA-1098';"}
{"sample_id": 7465, "db_id": "works_cycles", "gold_sql": "SELECT T1.ListPrice - T2.StandardCost FROM ProductListPriceHistory AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID = 792", "pred_sql": "SELECT (p.listprice - p.standardcost) AS profit \nFROM product p \nWHERE p.productid = '792';"}
{"sample_id": 7041, "db_id": "works_cycles", "gold_sql": "SELECT T1.JobTitle FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T2.Rate ASC LIMIT 1", "pred_sql": "SELECT jobtitle FROM employee ORDER BY rate ASC LIMIT 1;"}
{"sample_id": 7080, "db_id": "works_cycles", "gold_sql": "SELECT SUM(LastReceiptCost) / COUNT(ProductID) FROM ProductVendor WHERE AverageLeadTime = 60", "pred_sql": "SELECT AVG(lastreceiptcost) AS average_last_receipt_cost\nFROM productvendor\nWHERE averageleadtime = 60;"}
{"sample_id": 7288, "db_id": "works_cycles", "gold_sql": "SELECT T2.Class FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID GROUP BY T2.Class ORDER BY COUNT(T1.ProductReviewID) DESC LIMIT 1", "pred_sql": "SELECT p.class\nFROM product p\nJOIN (SELECT productid, COUNT(*) as review_count\n      FROM productreview\n      GROUP BY productid\n      ORDER BY review_count DESC\n      LIMIT 1) as most_reviewed ON p.productid = most_reviewed.productid;"}
{"sample_id": 7469, "db_id": "works_cycles", "gold_sql": "SELECT T2.ListPrice FROM Product AS T1 INNER JOIN ProductListPriceHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'AWC Logo Cap'", "pred_sql": "SELECT p.name, plh.listprice FROM product p JOIN productlistpricehistory plh ON p.productid = plh.productid WHERE p.name = 'AWC Logo Cap'"}
{"sample_id": 7001, "db_id": "works_cycles", "gold_sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.StandardCost - T2.StandardCost > 80 GROUP BY T1.Name", "pred_sql": "SELECT p.productid, p.name, p.standardcost, plph.standardcost AS previous_standard_cost \nFROM product p \nJOIN productcosthistory plph ON p.productid = plph.productid \nWHERE p.standardcost > (plph.standardcost + 80) \nORDER BY p.productid;"}
{"sample_id": 7432, "db_id": "works_cycles", "gold_sql": "SELECT AVG(T3.Rate) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID INNER JOIN EmployeePayHistory AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Name = 'Engineering' AND STRFTIME('%Y', EndDate) > '2007' AND STRFTIME('%Y', T1.StartDate) < '2007'", "pred_sql": "SELECT AVG(ep.rate) AS average_pay_rate\nFROM employeepayhistory ep\nJOIN employeedepartmenthistory edh ON ep.businessentityid = edh.businessentityid\nJOIN department d ON edh.departmentid = d.departmentid\nWHERE d.name = 'Engineering' AND ep.ratechangedate BETWEEN '2007-01-01' AND '2007-12-31';"}
{"sample_id": 7149, "db_id": "works_cycles", "gold_sql": "SELECT Name FROM Culture WHERE CultureID = 'fr'", "pred_sql": "SELECT name FROM culture WHERE cultureid = 'fr';"}
{"sample_id": 7298, "db_id": "works_cycles", "gold_sql": "SELECT T2.ListPrice FROM Product AS T1 INNER JOIN ProductListPriceHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'LL Fork'", "pred_sql": "SELECT plh.listprice \nFROM productlistpricehistory plh \nJOIN product p ON plh.productid = p.productid \nWHERE p.name = 'LL Fork';"}
{"sample_id": 7167, "db_id": "works_cycles", "gold_sql": "SELECT T1.TransactionType FROM TransactionHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'HL Road Frame - Black, 48' AND STRFTIME('%Y-%m-%d',T1.TransactionDate) = '2013-07-31'", "pred_sql": "SELECT transactiontype FROM transactionhistory WHERE referenceorderid IN (SELECT salesorderid FROM salesorderheader WHERE orderdate = '2012-12-13') AND productid = (SELECT productid FROM product WHERE name = 'HL Road Frame - Black, 48');"}
{"sample_id": 7373, "db_id": "works_cycles", "gold_sql": "SELECT SalesLastYear - SalesYTD, Name, CountryRegionCode FROM SalesTerritory ORDER BY SalesLastYear - SalesYTD DESC LIMIT 1", "pred_sql": "SELECT st.name AS territory_name, cr.name AS country_name, (st.salesytd - st.saleslastyear) AS sales_difference\nFROM salesterritory st\nJOIN countryregion cr ON st.countryregioncode = cr.countryregioncode\nORDER BY sales_difference DESC\nLIMIT 1;"}
{"sample_id": 7032, "db_id": "works_cycles", "gold_sql": "SELECT T2.Bonus FROM SalesTerritory AS T1 INNER JOIN SalesPerson AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T1.CountryRegionCode = 'CA' ORDER BY T2.SalesQuota DESC LIMIT 1", "pred_sql": "SELECT MAX(bonus) AS highest_bonus\nFROM salesperson s\nJOIN salesterritory st ON s.territoryid = st.territoryid\nWHERE st.countryregioncode = (SELECT countryregioncode FROM countryregion WHERE name = 'Canada');"}
{"sample_id": 7065, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.NameStyle = 0 AND T1.MaritalStatus = 'M'", "pred_sql": "SELECT COUNT(*) AS married_western_style_employees\nFROM employee e\nJOIN person p ON e.businessentityid = p.businessentityid\nWHERE e.maritalstatus = 'M' AND p.namestyle = '0';"}
{"sample_id": 7464, "db_id": "works_cycles", "gold_sql": "SELECT T2.WorkOrderID FROM ScrapReason AS T1 INNER JOIN WorkOrder AS T2 ON T1.ScrapReasonID = T2.ScrapReasonID WHERE T1.Name = 'Handling damage'", "pred_sql": "SELECT * FROM workorder WHERE scrapreasonid = (SELECT scrapreasonid FROM scrapreason WHERE name = 'Handling Damage')"}
{"sample_id": 7033, "db_id": "works_cycles", "gold_sql": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Rating = ( SELECT Rating FROM ProductReview ORDER BY Rating ASC LIMIT 1 )", "pred_sql": "SELECT p.name\nFROM product p\nJOIN productreview pr ON p.productid = pr.productid\nGROUP BY p.productid\nORDER BY AVG(pr.rating) ASC\nLIMIT 1;"}
{"sample_id": 7152, "db_id": "works_cycles", "gold_sql": "SELECT BirthDate FROM Employee WHERE HireDate = '2008-12-07'", "pred_sql": "SELECT e.birthdate \nFROM employee e \nJOIN employeedepartmenthistory edh ON e.businessentityid = edh.businessentityid \nWHERE edh.startdate = '2008-12-07' \nAND edh.departmentid = (SELECT departmentid FROM department WHERE name = 'Production Technician')"}
{"sample_id": 7207, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(CardNumber) FROM CreditCard WHERE CardType = 'vista'", "pred_sql": "SELECT COUNT(DISTINCT cardtype) AS total_credit_card_types, SUM(CASE WHEN cardtype = 'Visa' THEN 1 ELSE 0 END) AS visa_count FROM creditcard;"}
{"sample_id": 7117, "db_id": "works_cycles", "gold_sql": "SELECT ListPrice - StandardCost FROM Product WHERE ProductID = 740", "pred_sql": "SELECT SUM(sod.linetotal) AS sales_revenue\nFROM salesorderdetail sod\nJOIN salesorderheader soh ON sod.salesorderid = soh.salesorderid\nWHERE sod.productid = '740' AND soh.status = 4;"}
{"sample_id": 7381, "db_id": "works_cycles", "gold_sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM SalesPerson AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Bonus < 1000", "pred_sql": "SELECT p.firstname || ' ' || p.lastname AS full_name \nFROM salesperson s \nJOIN person p ON s.businessentityid = p.businessentityid \nWHERE s.bonus < 1000;"}
{"sample_id": 7458, "db_id": "works_cycles", "gold_sql": "SELECT OrganizationLevel FROM Employee WHERE JobTitle = 'Human Resources Manager'", "pred_sql": "SELECT e.organizationlevel \nFROM employee e \nJOIN person p ON e.businessentityid = p.businessentityid \nWHERE p.jobtitle = 'Human Resources Manager';"}
{"sample_id": 7460, "db_id": "works_cycles", "gold_sql": "SELECT T2.StandardCost, T2.ProductNumber FROM ProductCostHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID = 888", "pred_sql": "SELECT standardcost, productnumber FROM product WHERE productid = '888';"}
{"sample_id": 7316, "db_id": "works_cycles", "gold_sql": "SELECT AVG(T1.Rate) FROM EmployeePayHistory AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T1.RateChangeDate = ( SELECT MAX(T1.RateChangeDate) FROM EmployeePayHistory AS T1 INNER JOIN Department AS T2 ON T1.BusinessEntityID = T2.DepartmentID )", "pred_sql": "SELECT d.name AS DepartmentName, AVG(e.rate) AS AverageHourlyPayRate\nFROM employeedepartmenthistory edh\nJOIN department d ON edh.departmentid = d.departmentid\nJOIN employeepayhistory e ON edh.businessentityid = e.businessentityid\nWHERE e.ratechangedate = (SELECT MAX(ratechangedate) FROM employeepayhistory WHERE businessentityid = edh.businessentityid)\nGROUP BY d.name;"}
{"sample_id": 7128, "db_id": "works_cycles", "gold_sql": "SELECT T1.BusinessEntityID, T2.\"Group\" FROM SalesPerson AS T1 INNER JOIN SalesTerritory AS T2 USING (territoryid) WHERE T1.CommissionPct >= 0.018", "pred_sql": "SELECT COUNT(DISTINCT s.businessentityid) AS total_companies, st.name AS territory_name \nFROM salesperson s \nJOIN salesterritory st ON s.territoryid = st.territoryid \nWHERE s.commissionpct >= 0.018 \nGROUP BY st.name;"}
{"sample_id": 7067, "db_id": "works_cycles", "gold_sql": "SELECT T1.BusinessEntityID FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 1 AND T1.VacationHours > 20", "pred_sql": "SELECT p.firstname, p.lastname, e.vacationhours \nFROM person p \nJOIN employee e ON p.businessentityid = e.businessentityid \nWHERE e.vacationhours > 20 AND p.emailpromotion = 1;"}
{"sample_id": 7397, "db_id": "works_cycles", "gold_sql": "SELECT DiscountPct FROM SpecialOffer WHERE Description = 'LL Road Frame Sale'", "pred_sql": "SELECT specialoffer.discountpct FROM specialoffer JOIN specialofferproduct ON specialoffer.specialofferid = specialofferproduct.specialofferid JOIN product ON specialofferproduct.productid = product.productid WHERE product.name = 'LL Road Frame Sale';"}
{"sample_id": 7368, "db_id": "works_cycles", "gold_sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Rating = ( SELECT Rating FROM ProductReview ORDER BY Rating DESC LIMIT 1 )", "pred_sql": "SELECT name FROM product WHERE productid = (SELECT productid FROM productreview ORDER BY rating DESC LIMIT 1 OFFSET 1)"}
{"sample_id": 7357, "db_id": "works_cycles", "gold_sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN SalesOrderDetail AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.Name ORDER BY SUM(T2.OrderQty) DESC LIMIT 0, 5", "pred_sql": "SELECT p.productid, p.name, COUNT(soh.salesorderid) AS order_count\nFROM product p\nJOIN salesorderdetail sod ON p.productid = sod.productid\nJOIN salesorderheader soh ON sod.salesorderid = soh.salesorderid\nGROUP BY p.productid, p.name\nORDER BY order_count DESC\nLIMIT 5;"}
{"sample_id": 7053, "db_id": "works_cycles", "gold_sql": "SELECT T1.PayFrequency FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T2.BirthDate ASC LIMIT 1", "pred_sql": "SELECT payfrequency FROM employeepayhistory WHERE businessentityid = (SELECT businessentityid FROM employee ORDER BY birthdate ASC LIMIT 1)"}
{"sample_id": 7107, "db_id": "works_cycles", "gold_sql": "SELECT NAME FROM Vendor WHERE BusinessEntityID = 1492", "pred_sql": "SELECT name FROM vendor WHERE businessentityid = 1492;"}
{"sample_id": 7034, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(T2.BusinessEntityID) FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.DepartmentID = T2.DepartmentID WHERE T2.StartDate >= '2009-01-01' AND T2.StartDate < '2010-01-01' AND T1.Name = 'Production'", "pred_sql": "SELECT COUNT(e.businessentityid) AS worker_count\nFROM employee e\nJOIN employeedepartmenthistory edh ON e.businessentityid = edh.businessentityid\nJOIN department d ON edh.departmentid = d.departmentid\nWHERE edh.startdate >= '2009-01-01' AND edh.startdate < '2010-01-01' AND d.name = 'Production';"}
{"sample_id": 7326, "db_id": "works_cycles", "gold_sql": "SELECT T3.FirstName, T3.LastName FROM CreditCard AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.CreditCardID = T2.CreditCardID INNER JOIN Person AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.CardType = 'Distinguish'", "pred_sql": "SELECT p.firstname, p.lastname, cc.cardtype, cc.cardnumber \nFROM person p \nJOIN creditcard cc ON p.businessentityid = cc.businessentityid \nWHERE cc.cardtype = 'distinguish';"}
{"sample_id": 7283, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(T1.ProductID) FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.MakeFlag = 0 AND T1.Rating != 5", "pred_sql": "SELECT COUNT(DISTINCT p.productid) AS products_without_highest_rating\nFROM product p\nJOIN productreview pr ON p.productid = pr.productid\nWHERE pr.rating < 5;"}
{"sample_id": 7025, "db_id": "works_cycles", "gold_sql": "SELECT FromCurrencyCode, ToCurrencyCode FROM CurrencyRate ORDER BY AverageRate DESC LIMIT 1", "pred_sql": "SELECT fromcurrencycode, tocurrencycode, averagerate \nFROM currencyrate \nORDER BY averagerate DESC \nLIMIT 1;"}
{"sample_id": 7042, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(T2.BusinessEntityID) FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 USING (DepartmentID) WHERE T1.Name = 'Finance'", "pred_sql": "SELECT COUNT(e.businessentityid) AS total_employees\nFROM employee e\nJOIN employeedepartmenthistory edh ON e.businessentityid = edh.businessentityid\nJOIN department d ON edh.departmentid = d.departmentid\nWHERE d.name = 'Finance';"}
{"sample_id": 7353, "db_id": "works_cycles", "gold_sql": "SELECT T2.Name FROM SalesOrderHeaderSalesReason AS T1 INNER JOIN SalesReason AS T2 ON T1.SalesReasonID = T2.SalesReasonID WHERE T1.SalesOrderID = 43718", "pred_sql": "SELECT sr.name \nFROM salesorderheadersalesreason so_sr \nJOIN salesreason sr ON so_sr.salesreasonid = sr.salesreasonid \nWHERE so_sr.salesorderid = 43718;"}
{"sample_id": 7280, "db_id": "works_cycles", "gold_sql": "SELECT LastReceiptCost - StandardPrice FROM ProductVendor ORDER BY LastReceiptCost - StandardPrice DESC LIMIT 1", "pred_sql": "SELECT MAX(listprice - standardcost) AS highest_profit FROM product;"}
{"sample_id": 7095, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(T1.LocationID) FROM Location AS T1 INNER JOIN ProductInventory AS T2 USING (LocationID) WHERE T1.Name = 'Subassembly'", "pred_sql": "SELECT COUNT(*) AS total_products\nFROM product\nWHERE productsubcategoryid IN (\n    SELECT productsubcategoryid\n    FROM productsubcategory\n    WHERE name = 'Subassembly'\n)"}
{"sample_id": 7043, "db_id": "works_cycles", "gold_sql": "SELECT ( SELECT ListPrice - StandardCost FROM Product WHERE ListPrice != 0 ORDER BY ListPrice DESC LIMIT 1 ) , ( SELECT ListPrice - StandardCost FROM Product WHERE ListPrice != 0 ORDER BY ListPrice LIMIT 1 )", "pred_sql": "SELECT MAX(listprice - standardcost) AS max_profit, MIN(listprice - standardcost) AS min_profit\nFROM product\nWHERE listprice > 0;"}
{"sample_id": 7210, "db_id": "works_cycles", "gold_sql": "SELECT Name FROM Store WHERE SalesPersonID = 277", "pred_sql": "SELECT store.name FROM store JOIN salesperson ON store.salespersonid = salesperson.businessentityid WHERE salesperson.businessentityid = '277';"}
{"sample_id": 7402, "db_id": "works_cycles", "gold_sql": "SELECT SUM(FinishedGoodsFlag) FROM Product WHERE MakeFlag = 1", "pred_sql": "SELECT COUNT(*) AS SalableManufacturedProductsCount \nFROM product \nWHERE makeflag = 1 AND finishedgoodsflag = 1;"}
{"sample_id": 7056, "db_id": "works_cycles", "gold_sql": "SELECT SUM(CASE WHEN T2.Gender = 'M' THEN 1 ELSE 0 END) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Rate > 40", "pred_sql": "SELECT COUNT(*) AS MaleEmployeeCount \nFROM employee \nWHERE rate > 40 AND gender = 'M';"}
{"sample_id": 7240, "db_id": "works_cycles", "gold_sql": "SELECT T2.CardNumber FROM SalesOrderHeader AS T1 INNER JOIN CreditCard AS T2 ON T1.CreditCardID = T2.CreditCardID WHERE T1.SalesOrderID = 45793", "pred_sql": "SELECT c.cardnumber \nFROM creditcard c \nJOIN salesorderheader so ON c.creditcardid = so.creditcardid \nWHERE so.salesorderid = '45793';"}
{"sample_id": 7127, "db_id": "works_cycles", "gold_sql": "SELECT T1.ProductModelID FROM ProductModelProductDescriptionCulture AS T1 INNER JOIN Culture AS T2 USING (cultureid) INNER JOIN ProductDescription AS T3 USING (productdescriptionid) WHERE T3.Description LIKE 'Chromoly steel%' AND T2.Name = 'English'", "pred_sql": "SELECT pm.name AS ProductModelName \nFROM productmodel pm \nJOIN productmodelproductdescriptionculture pmc ON pm.productmodelid = pmc.productmodelid \nJOIN productdescription pd ON pmc.productdescriptionid = pd.productdescriptionid \nJOIN culture c ON pmc.cultureid = c.cultureid \nWHERE c.name = 'English' AND pm.name LIKE '%chromoly steel%';"}
{"sample_id": 7289, "db_id": "works_cycles", "gold_sql": "SELECT T1.EmailAddress FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Class = 'H'", "pred_sql": "SELECT DISTINCT r.emailaddress \nFROM productreview r \nJOIN product p ON r.productid = p.productid \nWHERE p.class = 'H';"}
{"sample_id": 7148, "db_id": "works_cycles", "gold_sql": "SELECT ShipBase FROM ShipMethod WHERE Name = 'OVERSEAS - DELUXE'", "pred_sql": "SELECT shipbase FROM shipmethod WHERE name = 'OVERSEAS - DELUXE';"}
{"sample_id": 7328, "db_id": "works_cycles", "gold_sql": "SELECT T3.Name, T4.FirstName, T4.LastName FROM SalesTerritory AS T1 INNER JOIN Customer AS T2 ON T1.TerritoryID = T2.TerritoryID INNER JOIN Store AS T3 ON T2.StoreID = T3.BusinessEntityID INNER JOIN Person AS T4 ON T2.PersonID = T4.BusinessEntityID WHERE T1.Name = 'France'", "pred_sql": "SELECT store.name AS store_name, person.firstname || ' ' || person.lastname AS sales_representative_name\nFROM store\nJOIN salesperson ON store.salespersonid = salesperson.businessentityid\nJOIN salesterritory ON salesperson.territoryid = salesterritory.territoryid\nJOIN countryregion ON salesterritory.countryregioncode = countryregion.countryregioncode\nJOIN person ON salesperson.businessentityid = person.businessentityid\nWHERE countryregion.name = 'France';"}
{"sample_id": 7138, "db_id": "works_cycles", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessentityID) FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessentityID = T2.BusinessentityID WHERE T1.PersonType = 'EM'", "pred_sql": "SELECT (COUNT(CASE WHEN gender = 'M' THEN 1 END) * 100.0 / COUNT(*)) AS male_percentage FROM employee;"}
{"sample_id": 7079, "db_id": "works_cycles", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.VacationHours > 20 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.CurrentFlag = 1 AND T2.SickLeaveHours > 10", "pred_sql": "SELECT (COUNT(CASE WHEN e.vacationhours > 20 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_over_20_vacation_hours\nFROM employee e\nWHERE e.currentflag = 1 AND e.sickleavehours > 10;"}
{"sample_id": 7123, "db_id": "works_cycles", "gold_sql": "SELECT T1.Name FROM Currency AS T1 INNER JOIN CountryRegionCurrency AS T2 ON T1.CurrencyCode = T2.CurrencyCode INNER JOIN CountryRegion AS T3 ON T2.CountryRegionCode = T3.CountryRegionCode WHERE T3.Name = 'Brazil'", "pred_sql": "SELECT c.name AS currency_name \nFROM currency c \nJOIN countryregioncurrency crc ON c.currencycode = crc.currencycode \nJOIN countryregion cr ON crc.countryregioncode = cr.countryregioncode \nWHERE cr.name = 'Brazil';"}
{"sample_id": 7008, "db_id": "works_cycles", "gold_sql": "SELECT SUM((T1.ListPrice - T1.StandardCost) * T2.Quantity) FROM Product AS T1 INNER JOIN ShoppingCartItem AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ShoppingCartID = 20621", "pred_sql": "SELECT SUM((p.listprice - p.standardcost) * sci.quantity) AS total_sales_profit\nFROM shoppingcartitem sci\nJOIN product p ON sci.productid = p.productid\nWHERE sci.shoppingcartid = 20621;"}
{"sample_id": 7000, "db_id": "works_cycles", "gold_sql": "SELECT T1.Name, T2.StartDate FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T2.EndDate IS NULL", "pred_sql": "SELECT p.name AS product_name, p.startdate AS standard_cost_start_date\nFROM product p\nJOIN productcosthistory pch ON p.productid = pch.productid\nWHERE pch.startdate = (SELECT MAX(startdate) FROM productcosthistory WHERE productid = p.productid)"}
{"sample_id": 7145, "db_id": "works_cycles", "gold_sql": "SELECT BusinessEntityID FROM SalesPerson WHERE SalesLastYear = '1635823.3967'", "pred_sql": "SELECT salesperson.businessentityid \nFROM salesorderheader \nJOIN salesperson ON salesorderheader.salespersonid = salesperson.businessentityid \nWHERE salesorderheader.totaldue = 1635823.3967 \nAND strftime('%Y', salesorderheader.orderdate) = strftime('%Y', 'now', '-1 year')"}
{"sample_id": 7094, "db_id": "works_cycles", "gold_sql": "SELECT T2.FirstName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.MaritalStatus = 'S' AND T1.Gender = 'M' AND T1.JobTitle LIKE 'Production Supervisor%'", "pred_sql": "SELECT p.firstname, p.lastname \nFROM person p \nJOIN employee e ON p.businessentityid = e.businessentityid \nWHERE e.jobtitle = 'Production Supervisor' \nAND e.gender = 'M' \nAND e.maritalstatus = 'S';"}
{"sample_id": 7351, "db_id": "works_cycles", "gold_sql": "SELECT T3.Name FROM EmployeeDepartmentHistory AS T1 INNER JOIN Shift AS T2 ON T1.ShiftId = T2.ShiftId INNER JOIN Department AS T3 ON T1.DepartmentID = T3.DepartmentID WHERE T2.Name = 'Night' GROUP BY T3.Name ORDER BY COUNT(T1.BusinessEntityID) DESC LIMIT 1", "pred_sql": "SELECT d.name AS DepartmentName, COUNT(e.businessentityid) AS PersonnelCount\nFROM department d\nJOIN employeedepartmenthistory edh ON d.departmentid = edh.departmentid\nJOIN employee e ON edh.businessentityid = e.businessentityid\nJOIN shift s ON edh.shiftid = s.shiftid\nWHERE s.name = 'Evening'\nGROUP BY d.name\nORDER BY PersonnelCount DESC\nLIMIT 1;"}
{"sample_id": 7366, "db_id": "works_cycles", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.SalesQuota > 300000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessEntityID) FROM SalesPerson AS T1 INNER JOIN SalesTerritory AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T2.CountryRegionCode = 'US' AND T2.Name = 'Northwest'", "pred_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM businessentity) AS percentage\nFROM salesperson s\nJOIN salesterritory st ON s.territoryid = st.territoryid\nWHERE st.name = 'Northwest' AND s.salesquota > 300000;"}
{"sample_id": 7076, "db_id": "works_cycles", "gold_sql": "SELECT CAST(SUM(T1.VacationHours) AS REAL) / COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Gender = 'M' AND T2.PersonType = 'EM'", "pred_sql": "SELECT AVG(vacationhours) AS average_vacation_hours FROM employee WHERE gender = 'M';"}
{"sample_id": 7205, "db_id": "works_cycles", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.MaritalStatus = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.MaritalStatus = 'S' THEN 1 ELSE 0 END) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'EM'", "pred_sql": "SELECT SUM(CASE WHEN maritalstatus = 'M' AND persontype != 'SP' THEN 1 ELSE 0 END) AS married_non_sales,\n       SUM(CASE WHEN maritalstatus = 'S' AND persontype != 'SP' THEN 1 ELSE 0 END) AS single_non_sales\nFROM employee e\nJOIN person p ON e.businessentityid = p.businessentityid;"}
{"sample_id": 7303, "db_id": "works_cycles", "gold_sql": "SELECT T2.Name FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.MakeFlag = 0 AND (T1.OnOrderQty IS NULL OR T1.OnOrderQty = 0)", "pred_sql": "SELECT * FROM product WHERE finishedgoodsflag = 1 AND productid NOT IN (SELECT productid FROM productinventory WHERE quantity > 0)"}
{"sample_id": 7160, "db_id": "works_cycles", "gold_sql": "SELECT LENGTH(T2.PasswordHash) FROM Person AS T1 INNER JOIN Password AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'Catherine' AND T1.LastName = 'Ward'", "pred_sql": "SELECT SUM(LENGTH(passwordhash)) AS total_letters\nFROM password\nJOIN person ON password.businessentityid = person.businessentityid\nWHERE person.firstname = 'Catherine' AND person.lastname = 'Ward';"}
{"sample_id": 7337, "db_id": "works_cycles", "gold_sql": "SELECT DISTINCT ProductCategoryID FROM ProductSubcategory LIMIT 3", "pred_sql": "SELECT productsubcategoryid FROM productsubcategory LIMIT 3;"}
{"sample_id": 7106, "db_id": "works_cycles", "gold_sql": "SELECT FirstName, MiddleName, LastName FROM Person WHERE BusinessEntityID = 1 AND PersonType = 'EM'", "pred_sql": "SELECT e.firstname || ' ' || e.lastname AS full_name \nFROM employee e \nJOIN businessentity b ON e.businessentityid = b.businessentityid \nWHERE b.businessentityid = 1;"}
{"sample_id": 7329, "db_id": "works_cycles", "gold_sql": "SELECT T1.Name, T3.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE STRFTIME('%Y', T1.SellStartDate) = '2013'", "pred_sql": "SELECT p.name AS product_name, v.name AS vendor_name \nFROM product p \nJOIN productvendor pv ON p.productid = pv.productid \nJOIN vendor v ON pv.businessentityid = v.businessentityid \nWHERE p.sellstartdate >= '2013-01-01' AND p.sellstartdate < '2014-01-01';"}
{"sample_id": 7180, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(LocationID) FROM WorkOrderRouting WHERE ActualResourceHrs = 2", "pred_sql": "SELECT COUNT(locationid) AS location_count FROM location WHERE actualresourcehrs = 2;"}
{"sample_id": 7021, "db_id": "works_cycles", "gold_sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID ORDER BY T2.LastReceiptCost - T2.StandardPrice DESC LIMIT 1", "pred_sql": "SELECT name FROM product ORDER BY (listprice - standardcost) DESC LIMIT 1;"}
{"sample_id": 7186, "db_id": "works_cycles", "gold_sql": "SELECT T1.JobTitle FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.FirstName = 'Ken' AND T2.MiddleName = 'J' AND T2.LastName = 'S\u00e1nchez'", "pred_sql": "SELECT e.jobtitle FROM employee e JOIN person p ON e.businessentityid = p.businessentityid WHERE p.firstname = 'Ken' AND p.lastname = 'S\u00e1nchez' AND e.currentflag = '1';"}
{"sample_id": 7382, "db_id": "works_cycles", "gold_sql": "SELECT T2.EndDate FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T1.JobTitle = 'Senior Tool Designer' AND STRFTIME('%Y', T1.HireDate) - STRFTIME('%Y', T1.BirthDate) = 33 AND T2.EndDate IS NOT NULL", "pred_sql": "SELECT enddate \nFROM employeedepartmenthistory edh \nJOIN employee e ON edh.businessentityid = e.businessentityid \nWHERE e.jobtitle = 'Senior Tool Designer' \nAND e.hiredate = DATE('now', '-33 years') \nAND edh.departmentid = (SELECT departmentid FROM department WHERE name = 'Engineering') \nAND edh.enddate IS NOT NULL;"}
{"sample_id": 7447, "db_id": "works_cycles", "gold_sql": "SELECT T2.ProductID FROM ProductSubcategory AS T1 INNER JOIN Product AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID WHERE T1.Name = 'Socks'", "pred_sql": "SELECT * FROM product WHERE name LIKE '%socks%';"}
{"sample_id": 7191, "db_id": "works_cycles", "gold_sql": "SELECT SUM(T1.SickLeaveHours) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 0", "pred_sql": "SELECT SUM(e.sickleavehours) AS total_sick_leave_hours\nFROM employee e\nJOIN person p ON e.businessentityid = p.businessentityid\nWHERE p.emailpromotion = 0;"}
{"sample_id": 7072, "db_id": "works_cycles", "gold_sql": "SELECT T2.Suffix FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP' ORDER BY T1.SickLeaveHours DESC LIMIT 1", "pred_sql": "SELECT p.suffix FROM person p JOIN employee e ON p.businessentityid = e.businessentityid WHERE e.businessentityid IN (SELECT businessentityid FROM person WHERE persontype = 'SC') ORDER BY e.sickleavehours DESC LIMIT 1;"}
{"sample_id": 7098, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(DISTINCT T1.ProductID) FROM SalesOrderDetail AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID INNER JOIN SpecialOffer AS T3 ON T2.SpecialOfferID = T3.SpecialOfferID WHERE T1.OrderQty > 2 AND T1.UnitPriceDiscount = 0", "pred_sql": "SELECT COUNT(DISTINCT sd.productid) AS different_products_sold\nFROM salesorderdetail sd\nJOIN salesorderheader sh ON sd.salesorderid = sh.salesorderid\nLEFT JOIN specialofferproduct sop ON sd.specialofferid = sop.specialofferid\nWHERE sop.specialofferid IS NULL \nAND sd.orderqty > 2;"}
{"sample_id": 7405, "db_id": "works_cycles", "gold_sql": "SELECT PersonType FROM Person WHERE FirstName = 'David' AND LastName = 'Bradley'", "pred_sql": "SELECT jobtitle FROM employee e JOIN person p ON e.businessentityid = p.businessentityid WHERE p.firstname = 'David' AND p.lastname = 'Bradley';"}
{"sample_id": 7338, "db_id": "works_cycles", "gold_sql": "SELECT SalesYTD - SalesQuota FROM SalesPerson WHERE BusinessEntityID = 288", "pred_sql": "SELECT (salesquota - salesytd) AS sales_difference FROM salesperson WHERE businessentityid = 288;"}
{"sample_id": 7024, "db_id": "works_cycles", "gold_sql": "SELECT SUM((T1.ListPrice - T1.StandardCost) * T2.Quantity) FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID = 827", "pred_sql": "SELECT SUM(p.listprice - p.standardcost) AS total_profit\nFROM transactionhistory th\nJOIN product p ON th.productid = p.productid\nWHERE th.productid = 827;"}
{"sample_id": 7166, "db_id": "works_cycles", "gold_sql": "SELECT T1.CountryRegionCode FROM StateProvince AS T1 INNER JOIN CountryRegion AS T2 ON T1.CountryRegionCode = T2.CountryRegionCode WHERE T2.Name = 'France' AND T1.IsOnlyStateProvinceFlag = 1", "pred_sql": "SELECT COUNT(*) AS NumberOfStateProvinces FROM stateprovince WHERE countryregioncode = 'FR' AND isonlystateprovinceflag = 1;"}
{"sample_id": 7052, "db_id": "works_cycles", "gold_sql": "SELECT DISTINCT T2.BusinessEntityID, T2.JobTitle FROM Document AS T1 INNER JOIN Employee AS T2 ON T1.Owner = T2.BusinessEntityID WHERE T1.Status = 2", "pred_sql": "SELECT DISTINCT e.jobtitle \nFROM employee e \nJOIN businessentity b ON e.businessentityid = b.businessentityid \nJOIN document d ON b.businessentityid = d.owner \nWHERE d.status = 2;"}
{"sample_id": 7059, "db_id": "works_cycles", "gold_sql": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T2.VacationHours DESC LIMIT 1", "pred_sql": "SELECT e.businessentityid, e.rate FROM employeepayhistory e JOIN employee emp ON e.businessentityid = emp.businessentityid WHERE emp.vacationhours = (SELECT MAX(vacationhours) FROM employee)"}
{"sample_id": 7014, "db_id": "works_cycles", "gold_sql": "SELECT T1.Name, T2.ReviewerName, T2.Rating, T2.Comments FROM Product AS T1 INNER JOIN ProductReview AS T2 USING (productID) WHERE T1.ProductLine = 'R'", "pred_sql": "SELECT p.name AS product_name, pr.reviewername, pr.rating, pr.comments \nFROM product p \nJOIN productsubcategory ps ON p.productsubcategoryid = ps.productsubcategoryid \nJOIN productreview pr ON p.productid = pr.productid \nWHERE ps.name = 'Road'"}
{"sample_id": 7278, "db_id": "works_cycles", "gold_sql": "SELECT Status FROM SalesOrderHeader ORDER BY Freight DESC LIMIT 1", "pred_sql": "SELECT status FROM salesorderheader WHERE salesorderid = (SELECT salesorderid FROM salesorderheader ORDER BY freight DESC LIMIT 1)"}
{"sample_id": 7219, "db_id": "works_cycles", "gold_sql": "SELECT SUM(t2.freight) FROM ShipMethod AS t1 INNER JOIN PurchaseOrderHeader AS t2 ON t1.shipmethodid = t2.shipmethodid WHERE t1.name = 'cargo transport 5' AND t2.orderdate = '2011-12-14'", "pred_sql": "SELECT SUM(po.freight) AS total_shipment_cost\nFROM purchaseorderheader po\nJOIN shipmethod sm ON po.shipmethodid = sm.shipmethodid\nWHERE sm.name = 'cargo transport 5' AND po.orderdate = '2011-12-14';"}
{"sample_id": 7411, "db_id": "works_cycles", "gold_sql": "SELECT T2.EmailAddress FROM Person AS T1 INNER JOIN EmailAddress AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.EmailPromotion = 2", "pred_sql": "SELECT e.emailaddress \nFROM emailaddress e \nJOIN person p ON e.businessentityid = p.businessentityid \nJOIN employee emp ON p.businessentityid = emp.businessentityid \nWHERE p.emailpromotion = 1;"}
{"sample_id": 7322, "db_id": "works_cycles", "gold_sql": "SELECT AVG(STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.HireDate)) FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T3.Name = 'Research and Development'", "pred_sql": "SELECT AVG(julianday(eh.enddate) - julianday(eh.startdate)) AS average_length_of_employment\nFROM employeedepartmenthistory eh\nJOIN department d ON eh.departmentid = d.departmentid\nWHERE d.name = 'Research and Development' AND eh.enddate IS NOT NULL;"}
{"sample_id": 7441, "db_id": "works_cycles", "gold_sql": "SELECT T2.ThumbnailPhotoFileName FROM ProductProductPhoto AS T1 INNER JOIN ProductPhoto AS T2 ON T1.ProductPhotoID = T2.ProductPhotoID WHERE T1.ProductID = 979", "pred_sql": "SELECT thumbnailphotofilename FROM productphoto WHERE productphotoid = '979';"}
{"sample_id": 7343, "db_id": "works_cycles", "gold_sql": "SELECT PlannedCost - ActualCost FROM WorkOrderRouting WHERE ProductID = 818", "pred_sql": "SELECT (SELECT actualcost FROM workorderrouting WHERE productid = '818') - (SELECT plannedcost FROM workorderrouting WHERE productid = '818') AS cost_difference;"}
{"sample_id": 7309, "db_id": "works_cycles", "gold_sql": "SELECT FirstName, MiddleName, LastName FROM Person WHERE LastName = 'Anderson' AND PersonType = 'IN'", "pred_sql": "SELECT firstname, lastname FROM person WHERE persontype = 'IN' AND lastname = 'Anderson';"}
{"sample_id": 7112, "db_id": "works_cycles", "gold_sql": "SELECT ProductID FROM ProductCostHistory ORDER BY StandardCost ASC LIMIT 3", "pred_sql": "SELECT productnumber FROM product ORDER BY standardcost ASC LIMIT 3;"}
{"sample_id": 7292, "db_id": "works_cycles", "gold_sql": "SELECT T1.StandardPrice FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Hex Nut 5' ORDER BY T1.StandardPrice DESC LIMIT 1", "pred_sql": "SELECT MAX(pv.standardprice) AS highest_selling_price\nFROM productvendor pv\nJOIN product p ON pv.productid = p.productid\nWHERE p.name = 'Hex Nut 5';"}
{"sample_id": 165, "db_id": "movie_platform", "gold_sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 57756708 ORDER BY T1.rating_timestamp_utc DESC LIMIT 1", "pred_sql": "SELECT movies.movie_title FROM ratings_users JOIN ratings ON ratings_users.user_id = ratings.user_id JOIN movies ON ratings.movie_id = movies.movie_id WHERE ratings_users.user_id = '57756708' ORDER BY ratings.rating_timestamp_utc DESC LIMIT 1;"}
{"sample_id": 137, "db_id": "movie_platform", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.user_has_payment_method = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists_users AS T3 ON T1.user_id = T3.user_id WHERE T2.movie_title = 'A Shot in the Dark'", "pred_sql": "SELECT (COUNT(CASE WHEN ru.user_subscriber = 1 THEN 1 END) * 100.0 / COUNT(*)) AS subscriber_percentage\nFROM ratings r\nJOIN ratings_users ru ON r.user_id = ru.user_id\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.movie_title = 'A Shot in the Dark';"}
{"sample_id": 163, "db_id": "movie_platform", "gold_sql": "SELECT AVG(T3.list_movie_number) , SUM(CASE WHEN T1.rating_score = 5 THEN 1 ELSE 0 END) FROM ratings AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id INNER JOIN lists AS T3 ON T2.user_id = T3.user_id WHERE T1.user_id = 8516503", "pred_sql": "SELECT AVG(CAST(list_movie_number AS INTEGER)) AS average_movies, COUNT(r.rating_id) AS five_star_ratings\nFROM lists l\nLEFT JOIN ratings_users ru ON l.user_id = ru.user_id\nLEFT JOIN ratings r ON ru.user_id = r.user_id\nWHERE l.user_id = '8516503' AND r.rating_score = 5;"}
{"sample_id": 53, "db_id": "movie_platform", "gold_sql": "SELECT COUNT(*) FROM lists WHERE list_followers > 200 AND list_update_timestamp_utc > '2010-01-01'", "pred_sql": "SELECT COUNT(*) AS list_count FROM lists WHERE list_creation_timestamp_utc > '2010-01-01' AND list_followers > 200;"}
{"sample_id": 5, "db_id": "movie_platform", "gold_sql": "SELECT AVG(T2.rating_score) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'When Will I Be Loved'", "pred_sql": "SELECT AVG(rating_score) AS average_rating FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE movies.movie_title = 'When Will I Be Loved';"}
{"sample_id": 125, "db_id": "movie_platform", "gold_sql": "SELECT T2.user_avatar_image_url FROM ratings AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id WHERE T1.rating_score = 5", "pred_sql": "SELECT ru.user_avatar_image_url\nFROM ratings r\nJOIN ratings_users ru ON r.user_id = ru.user_id\nWHERE r.rating_score = 5\nORDER BY r.rating_timestamp_utc DESC\nLIMIT 1;"}
{"sample_id": 3, "db_id": "movie_platform", "gold_sql": "SELECT movie_title FROM movies GROUP BY movie_title ORDER BY COUNT(movie_title) DESC LIMIT 1", "pred_sql": "SELECT movies.movie_title FROM movies JOIN ratings ON movies.movie_id = ratings.movie_id GROUP BY movies.movie_id ORDER BY COUNT(ratings.rating_id) DESC LIMIT 1;"}
{"sample_id": 154, "db_id": "movie_platform", "gold_sql": "SELECT list_title FROM lists WHERE list_update_timestamp_utc = ( SELECT list_update_timestamp_utc FROM lists ORDER BY list_update_timestamp_utc DESC LIMIT 1 )", "pred_sql": "SELECT list_title FROM lists ORDER BY list_update_timestamp_utc DESC LIMIT 1;"}
{"sample_id": 49, "db_id": "movie_platform", "gold_sql": "SELECT AVG(T1.rating_score), T2.movie_release_year FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Pavee Lackeen: The Traveller Girl'", "pred_sql": "SELECT AVG(rating_score) AS average_rating, movie_release_year FROM movies JOIN ratings ON movies.movie_id = ratings.movie_id WHERE movie_title = 'Pavee Lackeen: The Traveller Girl' GROUP BY movie_release_year;"}
{"sample_id": 35, "db_id": "movie_platform", "gold_sql": "SELECT COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_release_year = 1924 AND T1.director_name = 'Erich von Stroheim' AND T2.rating_score = 5 AND T2.user_has_payment_method = 1", "pred_sql": "SELECT COUNT(DISTINCT ratings_users.user_id) AS user_count\nFROM ratings\nJOIN ratings_users ON ratings.user_id = ratings_users.user_id\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE ratings_users.user_subscriber = 1\nAND movies.movie_release_year = 1924\nAND movies.director_name = 'Erich von Stroheim'\nAND ratings.rating_score = 5;"}
{"sample_id": 80, "db_id": "movie_platform", "gold_sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists AS T3 ON T3.user_id = T1.user_id WHERE T3.list_title = '250 Favourite Films'", "pred_sql": "SELECT m.movie_title, r.rating_score \nFROM lists l \nJOIN lists_users lu ON l.list_id = lu.list_id \nJOIN ratings_users ru ON lu.user_id = ru.user_id \nJOIN ratings r ON ru.user_id = r.user_id \nJOIN movies m ON r.movie_id = m.movie_id \nWHERE l.list_title = '250 Favourite Films';"}
{"sample_id": 77, "db_id": "movie_platform", "gold_sql": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved' AND T1.rating_score = 1 AND T1.user_trialist = 1", "pred_sql": "SELECT COUNT(DISTINCT r.user_id) AS trailist_count\nFROM ratings r\nJOIN ratings_users ru ON r.user_id = ru.user_id\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.movie_title = 'When Will I Be Loved' AND r.rating_score = 1 AND ru.user_trialist = 1;"}
{"sample_id": 34, "db_id": "movie_platform", "gold_sql": "SELECT DISTINCT T1.movie_release_year, T1.movie_title FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_release_year = ( SELECT movie_release_year FROM movies GROUP BY movie_release_year ORDER BY COUNT(movie_id) DESC LIMIT 1 ) AND T2.rating_score = 1", "pred_sql": "SELECT m.movie_release_year, m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.rating_score = 1\nGROUP BY m.movie_release_year\nORDER BY COUNT(m.movie_id) ASC, MAX(r.rating_score) DESC\nLIMIT 1;"}
{"sample_id": 46, "db_id": "movie_platform", "gold_sql": "SELECT T2.rating_url FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_id = 45579900 AND T1.movie_title = 'The Vertical Ray of the Sun' AND T2.critic_likes = 20", "pred_sql": "SELECT r.rating_url FROM ratings r JOIN ratings_users ru ON r.user_id = ru.user_id JOIN movies m ON r.movie_id = m.movie_id WHERE ru.user_id = '45579900' AND m.movie_title = 'The Vertical Ray of the Sun' AND r.critic_likes = 20;"}
{"sample_id": 7, "db_id": "movie_platform", "gold_sql": "SELECT CAST(SUM(CASE WHEN user_subscriber = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM ratings", "pred_sql": "SELECT (COUNT(CASE WHEN ru.user_subscriber = 1 THEN 1 END) * 100.0 / COUNT(*)) AS subscriber_rating_percentage FROM ratings r JOIN ratings_users ru ON r.user_id = ru.user_id;"}
{"sample_id": 43, "db_id": "movie_platform", "gold_sql": "SELECT AVG(T2.rating_score), T1.director_name FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'The Crowd'", "pred_sql": "SELECT AVG(r.rating_score) AS average_rating, m.director_name FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'The Crowd' GROUP BY m.director_name;"}
{"sample_id": 70, "db_id": "movie_platform", "gold_sql": "SELECT T1.rating_score FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.user_id = 39115684", "pred_sql": "SELECT rating_date_utc FROM ratings_users INNER JOIN ratings ON ratings_users.user_id = ratings.user_id INNER JOIN movies ON ratings.movie_id = movies.movie_id WHERE movies.movie_title = 'A Way of Life' AND ratings_users.user_id = 39115684;"}
{"sample_id": 128, "db_id": "movie_platform", "gold_sql": "SELECT T2.movie_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE rating_score = 5 AND rating_timestamp_utc LIKE '2013-05-03 05:11:17'", "pred_sql": "SELECT movies.movie_url FROM ratings JOIN ratings_users ON ratings.user_id = ratings_users.user_id JOIN movies ON ratings.movie_id = movies.movie_id WHERE ratings.rating_score = 5 AND ratings.rating_timestamp_utc = '2013-05-03 05:11:17';"}
{"sample_id": 110, "db_id": "movie_platform", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.rating_score > 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title LIKE 'Patti Smith: Dream of Life'", "pred_sql": "SELECT (COUNT(CASE WHEN r.rating_score > 3 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_users_rated_above_3\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.movie_title = 'Patti Smith: Dream of Life';"}
{"sample_id": 91, "db_id": "movie_platform", "gold_sql": "SELECT user_id FROM lists ORDER BY list_followers DESC LIMIT 1", "pred_sql": "SELECT user_id FROM lists ORDER BY list_followers DESC LIMIT 1;"}
{"sample_id": 83, "db_id": "movie_platform", "gold_sql": "SELECT SUM(CASE WHEN T2.movie_title = 'Innocence Unprotected' THEN T1.rating_score ELSE 0 END) / SUM(CASE WHEN T2.movie_title = 'Innocence Unprotected' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.movie_title = 'When Will I Be Loved' THEN T1.rating_score ELSE 0 END) / SUM(CASE WHEN T2.movie_title = 'When Will I Be Loved' THEN 1 ELSE 0 END) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id", "pred_sql": "SELECT (SELECT AVG(rating_score) FROM ratings WHERE movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'Innocence Unprotected')) - (SELECT AVG(rating_score) FROM ratings WHERE movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'When Will I Be Loved')) AS rating_difference;"}
{"sample_id": 153, "db_id": "movie_platform", "gold_sql": "SELECT director_url FROM movies WHERE movie_title LIKE 'Red Blooded American Girl'", "pred_sql": "SELECT director_url FROM movies WHERE movie_title = 'Red Blooded American Girl'"}
{"sample_id": 150, "db_id": "movie_platform", "gold_sql": "SELECT T2.movie_title, T1.rating_timestamp_utc, T1.rating_score FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 39115684", "pred_sql": "SELECT movies.movie_title, ratings_users.rating_date_utc, ratings.rating_score \nFROM ratings \nJOIN ratings_users ON ratings.user_id = ratings_users.user_id \nJOIN movies ON ratings.movie_id = movies.movie_id \nWHERE ratings_users.user_id = '39115684';"}
{"sample_id": 89, "db_id": "movie_platform", "gold_sql": "SELECT movie_release_year FROM movies WHERE movie_title = 'Cops'", "pred_sql": "SELECT movie_release_year FROM movies WHERE movie_title = 'Cops';"}
{"sample_id": 8, "db_id": "movie_platform", "gold_sql": "SELECT T1.movie_title FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_trialist = 1 AND T2.rating_timestamp_utc LIKE '2020-04%'", "pred_sql": "SELECT m.movie_title \nFROM ratings r \nJOIN ratings_users ru ON r.user_id = ru.user_id \nJOIN movies m ON r.movie_id = m.movie_id \nWHERE ru.user_trialist = 1 \nAND r.rating_date_utc BETWEEN '2020-04-01' AND '2020-04-30';"}
{"sample_id": 159, "db_id": "movie_platform", "gold_sql": "SELECT T2.movie_title, T1.rating_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.critic_likes DESC LIMIT 1", "pred_sql": "SELECT r.rating_id, r.rating_url, r.critic_likes\nFROM ratings r\nWHERE r.critic_likes = (SELECT MAX(critic_likes) FROM ratings)"}
{"sample_id": 113, "db_id": "movie_platform", "gold_sql": "SELECT director_id FROM movies GROUP BY director_id ORDER BY COUNT(movie_id) DESC LIMIT 1", "pred_sql": "SELECT director_id FROM movies GROUP BY director_id ORDER BY COUNT(movie_id) DESC LIMIT 1;"}
{"sample_id": 13, "db_id": "movie_platform", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.rating_score = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'Welcome to the Dollhouse'", "pred_sql": "SELECT (COUNT(CASE WHEN r.rating_score = 5 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_highest_ratings\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.movie_title = 'Welcome to the Dollhouse';"}
{"sample_id": 59, "db_id": "movie_platform", "gold_sql": "SELECT T2.user_trialist FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.list_title = '250 Favourite Films'", "pred_sql": "SELECT user_trialist FROM lists_users WHERE list_id = (SELECT list_id FROM lists WHERE list_title = '250 Favourite Films');"}
{"sample_id": 142, "db_id": "movie_platform", "gold_sql": "SELECT DISTINCT T2.list_title FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T1.user_eligible_for_trial = 1", "pred_sql": "SELECT list_title FROM lists_users WHERE user_eligible_for_trial = '1'"}
{"sample_id": 17, "db_id": "movie_platform", "gold_sql": "SELECT list_url FROM lists WHERE list_update_timestamp_utc LIKE '2012%' AND list_followers BETWEEN 1 AND 2 ORDER BY list_update_timestamp_utc DESC LIMIT 1", "pred_sql": "SELECT list_url FROM lists WHERE list_followers BETWEEN '1' AND '2' AND list_update_timestamp_utc LIKE '2012%';"}
{"sample_id": 72, "db_id": "movie_platform", "gold_sql": "SELECT T1.user_trialist FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.user_id = 39115684", "pred_sql": "SELECT ru.user_trialist \nFROM ratings_users ru \nJOIN ratings r ON ru.user_id = r.user_id \nJOIN movies m ON r.movie_id = m.movie_id \nWHERE ru.user_id = '39115684' AND m.movie_title = 'A Way of Life';"}
{"sample_id": 145, "db_id": "movie_platform", "gold_sql": "SELECT DISTINCT T2.list_title FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_movie_number < 50 AND T1.user_subscriber = 1", "pred_sql": "SELECT list_title FROM lists_users INNER JOIN lists ON lists_users.list_id = lists.list_id WHERE lists_users.user_subscriber = '1' AND lists.list_movie_number < '50';"}
{"sample_id": 2528, "db_id": "app_store", "gold_sql": "SELECT SUM(T1.Installs), T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.\"Content Rating\" = 'Adults only 18+'", "pred_sql": "SELECT SUM(p.installs) AS total_installs, ur.translated_review \nFROM playstore p \nJOIN user_reviews ur ON p.app = ur.app \nWHERE p.content_rating = 'Adult' \nGROUP BY ur.translated_review;"}
{"sample_id": 2568, "db_id": "app_store", "gold_sql": "SELECT T1.Installs , CAST(SUM(CASE WHEN T2.Sentiment = 'Positive' THEN 1 ELSE 0 END) * 100 / SUM(CASE WHEN T2.Sentiment IS NOT NULL THEN 1.0 ELSE 0 END) AS REAL) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'FREEDOME VPN Unlimited anonymous Wifi Security'", "pred_sql": "SELECT p.installs, (SUM(CASE WHEN ur.sentiment = 'Positive' THEN 1 ELSE 0 END) * 100.0 / COUNT(ur.sentiment)) AS positive_sentiment_percentage\nFROM playstore p\nLEFT JOIN user_reviews ur ON p.app = ur.app\nWHERE p.app = 'FREEDOME VPN Unlimited anonymous Wifi Security'"}
{"sample_id": 2553, "db_id": "app_store", "gold_sql": "SELECT AVG(CAST(REPLACE(REPLACE(Installs, ',', ''), '+', '') AS INTEGER)) FROM playstore WHERE Category = 'ENTERTAINMENT' AND Size < '1.0M'", "pred_sql": "SELECT AVG(CAST(SUBSTR(installs, 1, INSTR(installs, '+') - 1) AS INTEGER)) AS average_downloads FROM playstore WHERE category = 'Entertainment' AND size <= '1.0M';"}
{"sample_id": 2544, "db_id": "app_store", "gold_sql": "SELECT T1.Installs FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App GROUP BY T1.App ORDER BY SUM(T2.Sentiment_Polarity) DESC LIMIT 1", "pred_sql": "SELECT p.installs FROM playstore p JOIN (SELECT app, SUM(CASE WHEN sentiment_polarity IS NOT NULL THEN CAST(sentiment_polarity AS FLOAT) ELSE 0 END) AS total_polarity FROM user_reviews GROUP BY app) ur ON p.app = ur.app ORDER BY ur.total_polarity DESC LIMIT 1;"}
{"sample_id": 2563, "db_id": "app_store", "gold_sql": "SELECT T1.Size, COUNT(T1.App) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Browser 4G' AND T2.Sentiment_Polarity >= 0.5", "pred_sql": "SELECT size, COUNT(*) as positive_reviews_count FROM playstore JOIN user_reviews ON playstore.app = user_reviews.app WHERE playstore.app = 'Browser 4G' AND user_reviews.sentiment_polarity >= 0.5;"}
{"sample_id": 2555, "db_id": "app_store", "gold_sql": "SELECT Genres FROM playstore WHERE App IN ( SELECT App FROM user_reviews WHERE Sentiment = 'Positive' AND Sentiment_Polarity > 0.5 ORDER BY Sentiment_Polarity DESC LIMIT 3 )", "pred_sql": "SELECT genres, COUNT(*) as review_count \nFROM user_reviews \nWHERE sentiment_polarity > 0.5 \nGROUP BY genres \nORDER BY review_count DESC \nLIMIT 3;"}
{"sample_id": 2571, "db_id": "app_store", "gold_sql": "SELECT T1.App, T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Category = 'EDUCATION' GROUP BY T1.App, T2.Translated_Review ORDER BY T1.Rating ASC LIMIT 1", "pred_sql": "SELECT p.app, p.rating, ur.translated_review \nFROM playstore p \nLEFT JOIN user_reviews ur ON p.app = ur.app \nWHERE p.category = 'EDUCATION' \nORDER BY p.rating ASC \nLIMIT 1;"}
{"sample_id": 2549, "db_id": "app_store", "gold_sql": "SELECT DISTINCT App FROM playstore WHERE Rating = 5", "pred_sql": "SELECT app FROM playstore WHERE rating = '5'"}
{"sample_id": 2517, "db_id": "app_store", "gold_sql": "SELECT MIN(T2.Sentiment_Polarity), T1.Installs FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Basketball Stars'", "pred_sql": "SELECT MIN(sentiment_polarity) AS lowest_sentiment_polarity, p.installs \nFROM user_reviews AS u \nJOIN playstore AS p ON u.app = p.app \nWHERE u.sentiment = 'Negative' AND u.sentiment_polarity < -0.5 AND p.app = 'Basketball Stars';"}
{"sample_id": 2541, "db_id": "app_store", "gold_sql": "SELECT T1.Rating, T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Garden Coloring Book'", "pred_sql": "SELECT p.rating, u.translated_review FROM playstore p JOIN user_reviews u ON p.app = u.app WHERE p.app = 'Garden Coloring Book';"}
{"sample_id": 2572, "db_id": "app_store", "gold_sql": "SELECT T1.App, T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Type = 'Free' AND T1.Category = 'SPORTS'", "pred_sql": "SELECT p.app, ur.translated_review \nFROM playstore p \nJOIN user_reviews ur ON p.app = ur.app \nWHERE p.type = 'Free' AND p.category = 'SPORTS';"}
{"sample_id": 214, "db_id": "book_publishing_company", "gold_sql": "SELECT type FROM titles ORDER BY advance DESC LIMIT 1", "pred_sql": "SELECT type, MAX(advance) AS max_advance FROM titles GROUP BY type ORDER BY max_advance DESC LIMIT 1;"}
{"sample_id": 212, "db_id": "book_publishing_company", "gold_sql": "SELECT AVG(T2.job_lvl), T1.max_lvl - AVG(T2.job_lvl) FROM jobs AS T1 INNER JOIN employee AS T2 ON T1.job_id = T2.job_id WHERE T1.job_desc = 'Managing Editor' GROUP BY T2.job_id, T1.max_lvl", "pred_sql": "SELECT AVG(job_lvl) AS average_level, MAX(job_lvl) AS highest_level FROM employee WHERE job_id = (SELECT job_id FROM jobs WHERE job_desc = 'Managing Editor');"}
{"sample_id": 198, "db_id": "book_publishing_company", "gold_sql": "SELECT COUNT(pub_id) FROM publishers WHERE country = 'USA'", "pred_sql": "SELECT COUNT(*) AS publisher_count FROM publishers WHERE country = 'USA';"}
{"sample_id": 181, "db_id": "book_publishing_company", "gold_sql": "SELECT fname, lname FROM employee WHERE STRFTIME('%Y', hire_date) < '1990'", "pred_sql": "SELECT fname, minit, lname FROM employee WHERE hire_date < '1990-01-01';"}
{"sample_id": 190, "db_id": "book_publishing_company", "gold_sql": "SELECT T1.title FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.pub_name = 'Binnet & Hardley' ORDER BY T1.price DESC LIMIT 1", "pred_sql": "SELECT title FROM titles WHERE pub_id = (SELECT pub_id FROM publishers WHERE pub_name = 'Binnet & Hardley') ORDER BY price DESC LIMIT 1;"}
{"sample_id": 236, "db_id": "book_publishing_company", "gold_sql": "SELECT (CAST(SUM(CASE WHEN T1.country = 'USA' THEN job_lvl ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.country = 'USA' THEN 1 ELSE 0 END)) - (CAST(SUM(CASE WHEN T1.country != 'USA' THEN job_lvl ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.country != 'USA' THEN 1 ELSE 0 END)) FROM publishers AS T1 INNER JOIN employee AS T2 ON T1.pub_id = T2.pub_id INNER JOIN jobs AS T3 ON T2.job_id = T3.job_id WHERE T3.job_desc = 'Managing Editor'", "pred_sql": "SELECT AVG(e1.job_lvl - e2.job_lvl) AS avg_level_difference\nFROM employee e1\nJOIN employee e2 ON e1.job_id = e2.job_id\nJOIN publishers p1 ON e1.pub_id = p1.pub_id\nJOIN publishers p2 ON e2.pub_id = p2.pub_id\nWHERE p1.country = 'US' AND p2.country != 'US' AND e1.job_lvl IS NOT NULL AND e2.job_lvl IS NOT NULL;"}
{"sample_id": 208, "db_id": "book_publishing_company", "gold_sql": "SELECT COUNT(DISTINCT T1.pub_id) FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.country = 'USA' AND T1.price > 15", "pred_sql": "SELECT COUNT(DISTINCT publishers.pub_id) AS publisher_count \nFROM publishers \nJOIN titles ON publishers.pub_id = titles.pub_id \nWHERE publishers.country = 'USA' AND titles.price > 15;"}
{"sample_id": 217, "db_id": "book_publishing_company", "gold_sql": "SELECT emp_id FROM employee WHERE minit = '' ORDER BY job_lvl DESC LIMIT 1", "pred_sql": "SELECT emp_id FROM employee WHERE minit IS NULL ORDER BY job_lvl DESC LIMIT 1;"}
{"sample_id": 199, "db_id": "book_publishing_company", "gold_sql": "SELECT T1.pr_info FROM pub_info AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.pub_name = 'New Moon Books'", "pred_sql": "SELECT * FROM publishers WHERE pub_name = 'New Moon Books';"}
{"sample_id": 203, "db_id": "book_publishing_company", "gold_sql": "SELECT T2.price FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id ORDER BY T1.qty DESC LIMIT 1", "pred_sql": "SELECT price FROM titles WHERE title_id = (SELECT title_id FROM sales GROUP BY title_id ORDER BY SUM(qty) DESC LIMIT 1);"}
{"sample_id": 175, "db_id": "book_publishing_company", "gold_sql": "SELECT T1.title, T1.notes, T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE STRFTIME('%Y', T1.pubdate) = '1991'", "pred_sql": "SELECT titles.title, titles.notes, publishers.pub_name \nFROM titles \nJOIN publishers ON titles.pub_id = publishers.pub_id \nWHERE strftime('%Y', titles.pubdate) = '1991';"}
{"sample_id": 231, "db_id": "book_publishing_company", "gold_sql": "SELECT DISTINCT T1.title, T1.type, T1.price FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.royalty > ( SELECT CAST(SUM(royalty) AS REAL) / COUNT(title_id) FROM roysched )", "pred_sql": "SELECT title, type, price FROM titles WHERE royalty > (SELECT AVG(royalty) FROM titles)"}
{"sample_id": 174, "db_id": "book_publishing_company", "gold_sql": "SELECT MAX(T1.ytd_sales) FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.lorange > 20000 AND T2.hirange < 20000", "pred_sql": "SELECT r.royalty AS royalty_percentage\nFROM titles t\nJOIN roysched r ON t.title_id = r.title_id\nWHERE t.ytd_sales = (SELECT MAX(ytd_sales) FROM titles WHERE ytd_sales BETWEEN 0 AND 20000)"}
{"sample_id": 239, "db_id": "book_publishing_company", "gold_sql": "SELECT T1.title FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id INNER JOIN publishers AS T3 ON T1.pub_id = T3.pub_id WHERE T2.qty > ( SELECT CAST(SUM(qty) AS REAL) / COUNT(title_id) FROM sales ) AND T3.state = 'CA' ORDER BY T2.qty DESC LIMIT 5", "pred_sql": "SELECT t.title, SUM(s.qty) AS total_sales \nFROM titles t \nJOIN sales s ON t.title_id = s.title_id \nJOIN stores st ON s.stor_id = st.stor_id \nWHERE st.state = 'CA' \nGROUP BY t.title \nHAVING total_sales > (SELECT AVG(total_sales) \n                      FROM (SELECT SUM(qty) AS total_sales \n                            FROM sales s2 \n                            JOIN stores st2 ON s2.stor_id = st2.stor_id \n                            WHERE st2.state = 'CA' \n                            GROUP BY s2.title_id)) \nORDER BY total_sales DESC \nLIMIT 5;"}
{"sample_id": 4486, "db_id": "student_loan", "gold_sql": "SELECT CAST(COUNT(T2.name) AS REAL) * 100 / COUNT(T1.name) FROM person AS T1 LEFT JOIN disabled AS T2 ON T2.name = T1.name", "pred_sql": "SELECT (COUNT(DISTINCT disabled.name) * 100.0 / COUNT(DISTINCT person.name)) AS disabled_percentage FROM person LEFT JOIN disabled ON person.name = disabled.name;"}
{"sample_id": 4553, "db_id": "student_loan", "gold_sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 0", "pred_sql": "SELECT COUNT(*) AS never_absent_count FROM longest_absense_from_school WHERE month = '0';"}
{"sample_id": 4461, "db_id": "student_loan", "gold_sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'army'", "pred_sql": "SELECT COUNT(*) FROM enlist WHERE organ = 'Army';"}
{"sample_id": 4449, "db_id": "student_loan", "gold_sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.organ = 'marines'", "pred_sql": "SELECT COUNT(*) AS disabled_count FROM enlist INNER JOIN disabled ON enlist.name = disabled.name WHERE enlist.organ = 'marines';"}
{"sample_id": 4383, "db_id": "student_loan", "gold_sql": "SELECT CAST(COUNT(T2.name) AS REAL) * 100 / COUNT(T1.name) FROM enlist AS T1 LEFT JOIN male AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.organ = 'navy'", "pred_sql": "SELECT (COUNT(male.name) * 100.0 / COUNT(person.name)) AS male_percentage FROM person JOIN enlist ON person.name = enlist.name WHERE enlist.organ = 'navy';"}
{"sample_id": 4442, "db_id": "student_loan", "gold_sql": "SELECT IIF(T.result = 0, 'female', 'male') AS re FROM ( SELECT COUNT(name) AS result FROM male WHERE name = 'studenT1000' ) T", "pred_sql": "SELECT CASE WHEN name IN (SELECT name FROM male) THEN 'Male' ELSE 'Female' END AS gender FROM person WHERE name = 'student1000';"}
{"sample_id": 4400, "db_id": "student_loan", "gold_sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.\"name\" = T2.name WHERE T1.\"month\" = 6", "pred_sql": "SELECT COUNT(*) FROM unemployed u JOIN longest_absense_from_school l ON u.name = l.name WHERE l.month = '6';"}
{"sample_id": 4425, "db_id": "student_loan", "gold_sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month > 2", "pred_sql": "SELECT COUNT(*) AS student_count FROM longest_absense_from_school WHERE month > '2';"}
{"sample_id": 4429, "db_id": "student_loan", "gold_sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'navy'", "pred_sql": "SELECT COUNT(*) FROM unemployed INNER JOIN enlist ON unemployed.name = enlist.name WHERE enlist.organ = 'navy';"}
{"sample_id": 4428, "db_id": "student_loan", "gold_sql": "SELECT T1.name FROM disabled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name WHERE T2.month = 0", "pred_sql": "SELECT disabled.name FROM disabled JOIN longest_absense_from_school ON disabled.name = longest_absense_from_school.name WHERE longest_absense_from_school.month = '0';"}
{"sample_id": 4407, "db_id": "student_loan", "gold_sql": "SELECT name, month FROM longest_absense_from_school WHERE \"month\" = ( SELECT MAX(month) FROM longest_absense_from_school )", "pred_sql": "SELECT name, month FROM longest_absense_from_school ORDER BY month DESC LIMIT 1;"}
{"sample_id": 4401, "db_id": "student_loan", "gold_sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T1.\"name\" = T2.\"name\" WHERE T2.school = 'ucsd' AND T1.organ = 'peace_corps'", "pred_sql": "SELECT COUNT(*) FROM enlist WHERE organ = 'peace corps' AND name IN (SELECT name FROM enrolled WHERE school = 'UCSD');"}
{"sample_id": 4511, "db_id": "student_loan", "gold_sql": "SELECT T1.name FROM unemployed AS T1 INNER JOIN disabled AS T2 ON T2.name = T1.name INNER JOIN longest_absense_from_school AS T3 ON T3.name = T2.name WHERE T3.month = 5", "pred_sql": "SELECT person.name FROM person JOIN male ON person.name = male.name JOIN unemployed ON person.name = unemployed.name JOIN disabled ON person.name = disabled.name JOIN longest_absense_from_school ON person.name = longest_absense_from_school.name WHERE longest_absense_from_school.month = '5';"}
{"sample_id": 4436, "db_id": "student_loan", "gold_sql": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name INNER JOIN disabled AS T3 ON T2.name = T3.name WHERE T1.month = 8", "pred_sql": "SELECT COUNT(*) FROM unemployed u JOIN disabled d ON u.name = d.name JOIN longest_absense_from_school l ON u.name = l.name WHERE l.month = '8';"}
{"sample_id": 4477, "db_id": "student_loan", "gold_sql": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN no_payment_due AS T2 ON T2.name = T1.name WHERE T2.bool = 'pos'", "pred_sql": "SELECT COUNT(DISTINCT disabled.name) AS disabled_students_with_payment_due\nFROM disabled\nJOIN no_payment_due ON disabled.name = no_payment_due.name\nWHERE no_payment_due.bool = 'pos';"}
{"sample_id": 4430, "db_id": "student_loan", "gold_sql": "SELECT COUNT(T1.name) FROM male AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'foreign_legion'", "pred_sql": "SELECT COUNT(*) FROM enlist WHERE organ = 'foreign legion' AND name IN (SELECT name FROM male);"}
{"sample_id": 4414, "db_id": "student_loan", "gold_sql": "SELECT COUNT(name) FROM enlist WHERE organ IN ('marines', 'air_force') AND name NOT IN ( SELECT name FROM male )", "pred_sql": "SELECT COUNT(DISTINCT enlist.name) AS female_students_count \nFROM enlist \nLEFT JOIN male ON enlist.name = male.name \nWHERE (enlist.organ = 'marines' OR enlist.organ = 'air force') \nAND male.name IS NULL;"}
{"sample_id": 4519, "db_id": "student_loan", "gold_sql": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN male AS T2 ON T2.name = T1.name WHERE T1.bool = 'pos'", "pred_sql": "SELECT COUNT(*) AS male_students_without_payment_due \nFROM male \nJOIN no_payment_due ON male.name = no_payment_due.name \nWHERE no_payment_due.bool = 'neg';"}
{"sample_id": 4544, "db_id": "student_loan", "gold_sql": "SELECT T1.bool FROM no_payment_due AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name WHERE T1.name = 'student110'", "pred_sql": "SELECT u.name AS student_name, CASE WHEN np.bool = 'neg' THEN 'No payment due' ELSE 'Payment due' END AS payment_status, CASE WHEN u.name IS NOT NULL THEN 'Unemployed' ELSE 'Employed' END AS employment_status FROM person p LEFT JOIN no_payment_due np ON p.name = np.name LEFT JOIN unemployed u ON p.name = u.name WHERE p.name = 'student110';"}
{"sample_id": 4406, "db_id": "student_loan", "gold_sql": "SELECT COUNT(name) FROM person", "pred_sql": "SELECT COUNT(*) AS total_students FROM person;"}
{"sample_id": 4408, "db_id": "student_loan", "gold_sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 4", "pred_sql": "SELECT COUNT(*) AS student_count FROM longest_absense_from_school WHERE month = '4';"}
{"sample_id": 4488, "db_id": "student_loan", "gold_sql": "SELECT name FROM person WHERE name NOT IN ( SELECT name FROM filed_for_bankrupcy )", "pred_sql": "SELECT name FROM person WHERE name NOT IN (SELECT name FROM filed_for_bankrupcy)"}
{"sample_id": 4410, "db_id": "student_loan", "gold_sql": "SELECT DISTINCT T2.organ FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.\"name\" = T2.\"name\"", "pred_sql": "SELECT enlist.organ FROM enlist INNER JOIN disabled ON enlist.name = disabled.name;"}
{"sample_id": 4384, "db_id": "student_loan", "gold_sql": "SELECT AVG(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.\"name\" = T2.\"name\"", "pred_sql": "SELECT AVG(CAST(month AS INTEGER)) AS average_absence_time FROM longest_absense_from_school WHERE name IN (SELECT name FROM disabled);"}
{"sample_id": 4459, "db_id": "student_loan", "gold_sql": "SELECT CAST(COUNT(T2.name) AS REAL) * 100 / COUNT(T1.name) FROM enlist AS T1 LEFT JOIN male AS T2 ON T1.name = T2.name WHERE T1.organ = 'fire_department'", "pred_sql": "SELECT (COUNT(DISTINCT e.name) * 100.0 / (SELECT COUNT(DISTINCT p.name) FROM person p JOIN male m ON p.name = m.name)) AS percentage_male_enlisted_in_fire_department\nFROM enlist e\nWHERE e.organ = 'fire department';"}
{"sample_id": 4533, "db_id": "student_loan", "gold_sql": "SELECT AVG(T2.month) FROM person AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T1.name = T3.name WHERE T3.name IS NULL", "pred_sql": "SELECT AVG(CAST(month AS INTEGER)) AS average_absence_duration FROM longest_absense_from_school WHERE name NOT IN (SELECT name FROM male);"}
{"sample_id": 4551, "db_id": "student_loan", "gold_sql": "SELECT CAST(COUNT(T4.name) AS REAL) * 100 / COUNT(T2.name) FROM enlist AS T1 INNER JOIN person AS T2 ON T1.name = T2.name INNER JOIN enrolled AS T3 ON T3.name = T2.name LEFT JOIN male AS T4 ON T2.name = T4.name WHERE T3.school = 'ucla' AND T1.organ = 'air_force'", "pred_sql": "SELECT (COUNT(male.name) * 100.0 / COUNT(enrolled.name)) AS male_percentage\nFROM enrolled\nLEFT JOIN male ON enrolled.name = male.name\nWHERE enrolled.school = 'UCLA' AND enrolled.month = 'air force department';"}
{"sample_id": 4460, "db_id": "student_loan", "gold_sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 5", "pred_sql": "SELECT COUNT(*) FROM longest_absense_from_school WHERE month = '5';"}
{"sample_id": 4499, "db_id": "student_loan", "gold_sql": "SELECT COUNT(name) FROM filed_for_bankrupcy", "pred_sql": "SELECT COUNT(*) AS number_of_students FROM filed_for_bankrupcy;"}
{"sample_id": 4382, "db_id": "student_loan", "gold_sql": "SELECT name FROM filed_for_bankrupcy WHERE name NOT IN ( SELECT name FROM male )", "pred_sql": "SELECT person.name FROM person LEFT JOIN filed_for_bankrupcy ON person.name = filed_for_bankrupcy.name LEFT JOIN male ON person.name = male.name WHERE filed_for_bankrupcy.name IS NOT NULL AND male.name IS NULL;"}
{"sample_id": 4478, "db_id": "student_loan", "gold_sql": "SELECT CAST(SUM(IIF(T3.name IS NULL, 1, 0)) AS REAL) / COUNT(T1.name) FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name WHERE T2.organ = 'foreign_legion'", "pred_sql": "SELECT AVG(female_count) AS average_female_disabled FROM (SELECT COUNT(*) AS female_count FROM person LEFT JOIN disabled ON person.name = disabled.name LEFT JOIN enlist ON person.name = enlist.name WHERE enlist.organ = 'Foreign Legion' AND person.name NOT IN (SELECT name FROM male) GROUP BY person.name) AS female_disabled;"}
{"sample_id": 4520, "db_id": "student_loan", "gold_sql": "SELECT COUNT(T1.name) FROM filed_for_bankrupcy AS T1 INNER JOIN no_payment_due AS T2 ON T2.name = T1.name WHERE T2.bool = 'pos'", "pred_sql": "SELECT COUNT(*) AS number_of_students FROM filed_for_bankrupcy INNER JOIN no_payment_due ON filed_for_bankrupcy.name = no_payment_due.name WHERE no_payment_due.bool = 'pos';"}
{"sample_id": 4494, "db_id": "student_loan", "gold_sql": "SELECT T2.name, T2.organ FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T2.name = T1.name WHERE T1.month = 4 LIMIT 5", "pred_sql": "SELECT e.name, e.organ FROM longest_absense_from_school AS l JOIN enlist AS e ON l.name = e.name WHERE l.month = '4' LIMIT 5;"}
{"sample_id": 4452, "db_id": "student_loan", "gold_sql": "SELECT T.school FROM ( SELECT T2.school, COUNT(T2.name) AS num FROM disabled AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name GROUP BY T2.school ) T ORDER BY T.num DESC LIMIT 1", "pred_sql": "SELECT enrolled.school, COUNT(disabled.name) AS disabled_count \nFROM disabled \nJOIN enrolled ON disabled.name = enrolled.name \nGROUP BY enrolled.school \nORDER BY disabled_count DESC \nLIMIT 1;"}
{"sample_id": 4421, "db_id": "student_loan", "gold_sql": "SELECT AVG(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name", "pred_sql": "SELECT AVG(month) AS average_absence_period FROM longest_absense_from_school WHERE name IN (SELECT name FROM disabled)"}
{"sample_id": 4394, "db_id": "student_loan", "gold_sql": "SELECT T2.organ, T1.name FROM no_payment_due AS T1 INNER JOIN enlist AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.bool = 'pos' LIMIT 5", "pred_sql": "SELECT enlist.name, enlist.organ FROM enlist JOIN no_payment_due ON enlist.name = no_payment_due.name WHERE no_payment_due.bool = 'pos' LIMIT 5;"}
{"sample_id": 4481, "db_id": "student_loan", "gold_sql": "SELECT CAST(SUM(IIF(month = 0, 1, 0)) AS REAL) * 100 / COUNT(name) FROM longest_absense_from_school", "pred_sql": "SELECT (COUNT(CASE WHEN month = '0' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_never_absent FROM longest_absense_from_school;"}
{"sample_id": 4441, "db_id": "student_loan", "gold_sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name ORDER BY T1.month DESC LIMIT 1", "pred_sql": "SELECT f.name FROM filed_for_bankrupcy f JOIN longest_absense_from_school l ON f.name = l.name WHERE l.month != '0'"}
{"sample_id": 4512, "db_id": "student_loan", "gold_sql": "SELECT name FROM enrolled WHERE school IN ('occ', 'ulca') AND name NOT IN ( SELECT name FROM male )", "pred_sql": "SELECT person.name FROM person LEFT JOIN male ON person.name = male.name LEFT JOIN enrolled ON person.name = enrolled.name WHERE male.name IS NULL AND (enrolled.school = 'occ' OR enrolled.school = 'ulca');"}
{"sample_id": 4373, "db_id": "student_loan", "gold_sql": "SELECT COUNT(T1.name) FROM filed_for_bankrupcy AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.\"name\" = T2.\"name\" WHERE T2.\"month\" > 5", "pred_sql": "SELECT COUNT(*) FROM filed_for_bankrupcy f JOIN longest_absense_from_school l ON f.name = l.name WHERE l.month > '5';"}
{"sample_id": 5853, "db_id": "airline", "gold_sql": "SELECT Description FROM \"Air Carriers\" WHERE Code = 19049", "pred_sql": "SELECT description FROM air carriers WHERE code = '19049';"}
{"sample_id": 5881, "db_id": "airline", "gold_sql": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.ORIGIN = 'ACY' AND T1.DEST = 'FLL' GROUP BY T2.Description", "pred_sql": "SELECT DISTINCT a.op_carrier_airline_id \nFROM airlines a \nJOIN airports origin ON a.origin = origin.code \nJOIN airports destination ON a.dest = destination.code \nWHERE origin.description = 'Atlantic City' AND destination.description = 'Fort Lauderdale';"}
{"sample_id": 5866, "db_id": "airline", "gold_sql": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.TAIL_NUM = 'N202NN' GROUP BY T2.Description", "pred_sql": "SELECT ac.description FROM airlines a JOIN air_carriers ac ON a.op_carrier_airline_id = ac.code WHERE a.tail_num = 'N202NN';"}
{"sample_id": 5873, "db_id": "airline", "gold_sql": "SELECT Code FROM \"Air Carriers\" WHERE Description LIKE 'Mississippi Valley Airlines%'", "pred_sql": "SELECT code FROM air_carriers WHERE description = 'Mississippi Valley Airlines';"}
{"sample_id": 5860, "db_id": "airline", "gold_sql": "SELECT COUNT(T3.TAIL_NUM) FROM ( SELECT T1.TAIL_NUM FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T2.Description = 'Southwest Airlines Co.: WN' GROUP BY T1.TAIL_NUM ) T3", "pred_sql": "SELECT COUNT(DISTINCT tail_num) AS number_of_planes FROM airlines WHERE op_carrier_airline_id = (SELECT code FROM air_carriers WHERE description = 'Southwest Airlines Co.');"}
{"sample_id": 5836, "db_id": "airline", "gold_sql": "SELECT AVG(T1.DEP_DELAY) FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T2.Code = T1.ORIGIN INNER JOIN \"Air Carriers\" AS T3 ON T1.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA'", "pred_sql": "SELECT AVG(dep_delay) AS average_departure_delay FROM airlines WHERE op_carrier_airline_id = (SELECT code FROM air_carriers WHERE description = 'American Airlines Inc.');"}
{"sample_id": 5863, "db_id": "airline", "gold_sql": "SELECT T2.OP_CARRIER_AIRLINE_ID FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T1.Description = 'Boston, MA: Logan International' AND T2.DEST = 'BOS' ORDER BY T2.SECURITY_DELAY DESC LIMIT 1", "pred_sql": "SELECT op_carrier_airline_id FROM airlines WHERE dest = (SELECT code FROM airports WHERE description = 'Logan International') ORDER BY security_delay DESC LIMIT 1;"}
{"sample_id": 5834, "db_id": "airline", "gold_sql": "SELECT SUM(CASE WHEN T2.CANCELLED = 1 THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN \"Air Carriers\" AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T2.FL_DATE = '2018/8/1' AND T3.Description = 'American Airlines Inc.: AA'", "pred_sql": "SELECT COUNT(*) AS cancelled_flights_count FROM airlines WHERE op_carrier_airline_id = (SELECT code FROM air_carriers WHERE description = 'American Airlines Inc.') AND fl_date = '2018-08-01' AND cancelled = '1';"}
{"sample_id": 5851, "db_id": "airline", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.CANCELLATION_CODE = 'C' THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE = '2018/8/15' AND T2.CANCELLATION_CODE IS NOT NULL AND T1.Description = 'Los Angeles, CA: Los Angeles International'", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM airlines WHERE origin = 'LAX')) AS cancellation_percentage\nFROM airlines\nWHERE origin = 'LAX' AND cancellation_code = 'C';"}
{"sample_id": 5865, "db_id": "airline", "gold_sql": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.CANCELLED = 0 GROUP BY T2.Description ORDER BY COUNT(T1.CANCELLED) DESC LIMIT 1", "pred_sql": "SELECT ac.description FROM airlines a JOIN air_carriers ac ON a.op_carrier_airline_id = ac.code WHERE a.cancelled = '0' GROUP BY ac.description ORDER BY COUNT(*) DESC LIMIT 1;"}
{"sample_id": 5904, "db_id": "airline", "gold_sql": "SELECT T2.FL_DATE FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.ACTUAL_ELAPSED_TIME < 100 AND T1.Description = 'Profit Airlines Inc.: XBH'", "pred_sql": "SELECT fl_date FROM airlines WHERE op_carrier_airline_id = (SELECT code FROM air carriers WHERE description = 'Profit Airlines Inc.: XBH') AND actual_elapsed_time < 100;"}
{"sample_id": 5833, "db_id": "airline", "gold_sql": "SELECT SUM(CASE WHEN T2.DEST = 'JFK' THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST INNER JOIN \"Air Carriers\" AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA'", "pred_sql": "SELECT COUNT(*) AS flight_count FROM airlines WHERE op_carrier_airline_id = (SELECT code FROM air_carriers WHERE description = 'American Airlines Inc.') AND dest = (SELECT code FROM airports WHERE description = 'New York');"}
{"sample_id": 5894, "db_id": "airline", "gold_sql": "SELECT T1.Description FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.DEST = 'MIA'", "pred_sql": "SELECT ac.description FROM airlines a JOIN air_carriers ac ON a.op_carrier_airline_id = ac.code WHERE a.dest = (SELECT code FROM airports WHERE description = 'Miami')"}
{"sample_id": 5831, "db_id": "airline", "gold_sql": "SELECT SUM(CASE WHEN T2.ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN \"Air Carriers\" AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T2.FL_DATE = '2018/8/1' AND T3.Description = 'American Airlines Inc.: AA'", "pred_sql": "SELECT COUNT(*) FROM airlines WHERE op_carrier_airline_id = (SELECT code FROM air_carriers WHERE description = 'American Airlines Inc.') AND fl_date = '2018-08-01' AND actual_elapsed_time < crs_elapsed_time;"}
{"sample_id": 5911, "db_id": "airline", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.DEP_DELAY < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description LIKE '%American Airlines%'", "pred_sql": "SELECT (COUNT(CASE WHEN dep_delay < 0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_earlier_departures\nFROM airlines\nJOIN air_carriers ON airlines.op_carrier_airline_id = air_carriers.code\nWHERE air_carriers.description = 'American Airlines';"}
{"sample_id": 5840, "db_id": "airline", "gold_sql": "SELECT SUM(CASE WHEN T1.Description LIKE '%Oakland%' THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE = '2018/8/7'", "pred_sql": "SELECT COUNT(DISTINCT tail_num) AS number_of_airplanes FROM airlines WHERE dest = (SELECT code FROM airports WHERE description = 'Oakland Airport') AND fl_date = '2018-08-07';"}
{"sample_id": 5887, "db_id": "airline", "gold_sql": "SELECT Code FROM Airports WHERE Description = 'Driftwood Bay, AK: Driftwood Bay Airport'", "pred_sql": "SELECT code FROM airports WHERE description = 'Driftwood Bay Airport';"}
{"sample_id": 5888, "db_id": "airline", "gold_sql": "SELECT COUNT(*) FROM Airlines WHERE CANCELLED = 1", "pred_sql": "SELECT COUNT(*) AS cancelled_flights_count FROM airlines WHERE cancelled = '1';"}
{"sample_id": 2080, "db_id": "music_tracker", "gold_sql": "SELECT COUNT(T2.tag) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'soul' AND T1.groupYear BETWEEN 1979 AND 1981 AND T1.releaseType LIKE 'single'", "pred_sql": "SELECT COUNT(*) FROM torrents t JOIN tags tg ON t.id = tg.id WHERE t.releasetype = 'single' AND t.groupyear BETWEEN '1979' AND '1981' AND tg.tag = 'soul';"}
{"sample_id": 2061, "db_id": "music_tracker", "gold_sql": "SELECT COUNT(T1.groupName) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'pop' AND T1.releaseType = 'album' AND T1.groupYear = 2000", "pred_sql": "SELECT COUNT(t.id) AS album_count \nFROM torrents t \nJOIN tags tg ON t.id = tg.id \nWHERE t.groupyear = '2000' \nAND t.releasetype = 'album' \nAND tg.tag = 'pop';"}
{"sample_id": 2075, "db_id": "music_tracker", "gold_sql": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'funk' AND T1.groupYear = 1980 AND T1.id BETWEEN 10 AND 30", "pred_sql": "SELECT DISTINCT t.artist \nFROM torrents t \nJOIN tags tg ON t.id = tg.id \nWHERE tg.tag = 'funk' \nAND t.groupyear = '1980' \nAND t.id BETWEEN '10' AND '30';"}
{"sample_id": 2062, "db_id": "music_tracker", "gold_sql": "SELECT CAST(SUM(T1.totalSnatched) AS REAL) / COUNT(T2.tag) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = '1980s'", "pred_sql": "SELECT AVG(CAST(t.totalsnatched AS INTEGER)) AS average_downloads\nFROM torrents t\nJOIN tags tg ON t.id = tg.id\nWHERE tg.tag = '1980s';"}
{"sample_id": 2074, "db_id": "music_tracker", "gold_sql": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'soul' AND T1.releaseType = 'single' GROUP BY T1.artist ORDER BY COUNT(T1.releaseType) DESC LIMIT 1", "pred_sql": "SELECT artist, COUNT(*) AS single_count \nFROM torrents \nJOIN tags ON torrents.id = tags.id \nWHERE releasetype = 'single' AND tag = 'soul' \nGROUP BY artist \nORDER BY single_count DESC \nLIMIT 1;"}
{"sample_id": 2054, "db_id": "music_tracker", "gold_sql": "SELECT totalSnatched FROM torrents WHERE groupName LIKE 'city funk'", "pred_sql": "SELECT totalsnatched FROM torrents WHERE groupname = 'city funk';"}
{"sample_id": 2070, "db_id": "music_tracker", "gold_sql": "SELECT artist FROM torrents WHERE groupYear BETWEEN 1980 AND 1982 AND releaseType LIKE 'single'", "pred_sql": "SELECT artist, groupname, groupyear FROM torrents WHERE releasetype = 'single' AND groupyear BETWEEN '1980' AND '1982';"}
{"sample_id": 2087, "db_id": "music_tracker", "gold_sql": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear BETWEEN 1980 AND 2000 AND T2.tag LIKE 'disco' GROUP BY T1.artist ORDER BY COUNT(T2.tag) DESC LIMIT 1", "pred_sql": "SELECT artist, COUNT(*) AS disco_release_count \nFROM torrents \nWHERE releasetype = 'album' AND groupyear BETWEEN '1980' AND '2000' \nAND EXISTS (SELECT 1 FROM tags WHERE tags.id = torrents.id AND tag = 'disco') \nGROUP BY artist \nORDER BY disco_release_count DESC \nLIMIT 1;"}
{"sample_id": 2078, "db_id": "music_tracker", "gold_sql": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.id BETWEEN 10 AND 50 AND T2.tag LIKE 'new.york' ORDER BY T1.totalSnatched DESC LIMIT 1", "pred_sql": "SELECT artist, SUM(CAST(t.totalsnatched AS INTEGER)) AS total_downloads \nFROM torrents t \nJOIN tags tg ON t.id = tg.id \nWHERE tg.tag = 'new.york' \nAND t.id BETWEEN '10' AND '50' \nGROUP BY artist \nORDER BY total_downloads DESC \nLIMIT 1;"}
{"sample_id": 10011, "db_id": "codebase_community", "gold_sql": "SELECT Id FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )", "pred_sql": "SELECT id FROM users ORDER BY reputation DESC LIMIT 1;"}
{"sample_id": 10129, "db_id": "codebase_community", "gold_sql": "SELECT Text FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) ORDER BY Score DESC LIMIT 1", "pred_sql": "SELECT comments.text, comments.score FROM comments JOIN posts ON comments.postid = posts.id WHERE posts.viewcount BETWEEN 100 AND 150 ORDER BY comments.score DESC LIMIT 1;"}
{"sample_id": 10107, "db_id": "codebase_community", "gold_sql": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'", "pred_sql": "SELECT p.viewcount, u.displayname \nFROM posts p \nJOIN users u ON p.lasteditoruserid = u.id \nWHERE p.title = 'Computer Game Datasets';"}
{"sample_id": 10006, "db_id": "codebase_community", "gold_sql": "SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'", "pred_sql": "SELECT comments.text, comments.creationdate, comments.userid, comments.userdisplayname \nFROM comments \nJOIN posts ON comments.postid = posts.id \nWHERE posts.title = 'Why square the difference instead of taking the absolute value in standard deviation?'"}
{"sample_id": 10133, "db_id": "codebase_community", "gold_sql": "SELECT COUNT(DISTINCT T1.id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40", "pred_sql": "SELECT COUNT(DISTINCT userid) AS total_users FROM comments JOIN users ON comments.userid = users.id WHERE comments.score = 0 AND users.age = 40;"}
{"sample_id": 10037, "db_id": "codebase_community", "gold_sql": "SELECT CAST(SUM(IIF(T2.Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.\"Name\" = 'Organizer'", "pred_sql": "SELECT (COUNT(CASE WHEN age BETWEEN 13 AND 18 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_teenagers\nFROM users\nWHERE id IN (SELECT userid FROM badges WHERE name = 'Organizer');"}
{"sample_id": 9983, "db_id": "codebase_community", "gold_sql": "SELECT Title FROM posts WHERE Id = ( SELECT PostId FROM comments ORDER BY Score DESC LIMIT 1 )", "pred_sql": "SELECT posts.title FROM posts JOIN comments ON posts.id = comments.postid WHERE comments.score = (SELECT MAX(score) FROM comments)"}
{"sample_id": 10074, "db_id": "codebase_community", "gold_sql": "SELECT T1.PostId, T2.Name FROM postHistory AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId WHERE T1.UserDisplayName = 'Samuel' AND STRFTIME('%Y', T1.CreationDate) = '2013' AND STRFTIME('%Y', T2.Date) = '2013'", "pred_sql": "SELECT posts.id AS post_id, badges.name AS badge_name \nFROM users \nJOIN badges ON users.id = badges.userid \nJOIN posts ON users.id = posts.owneruserid \nWHERE users.displayname = 'Samuel' \nAND badges.date LIKE '2013%'"}
{"sample_id": 9993, "db_id": "codebase_community", "gold_sql": "SELECT CAST(COUNT(T2.Id) AS REAL) / COUNT(DISTINCT T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24", "pred_sql": "SELECT COUNT(posts.id) AS post_count, COUNT(votes.id) AS vote_count, COUNT(posts.id) * 1.0 / NULLIF(COUNT(votes.id), 0) AS post_to_vote_ratio\nFROM posts\nLEFT JOIN votes ON posts.id = votes.postid\nWHERE posts.owneruserid = 24;"}
{"sample_id": 9987, "db_id": "codebase_community", "gold_sql": "SELECT IIF(T2.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'", "pred_sql": "SELECT closeddate FROM posts WHERE id IN (SELECT postid FROM comments WHERE userid = 23853 AND creationdate = '2013-07-12 09:08:18');"}
{"sample_id": 10029, "db_id": "codebase_community", "gold_sql": "SELECT COUNT(id) FROM comments WHERE score > 60", "pred_sql": "SELECT COUNT(*) AS positive_comment_count FROM comments WHERE score > 60;"}
{"sample_id": 9980, "db_id": "codebase_community", "gold_sql": "SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'", "pred_sql": "SELECT COUNT(*) AS vote_count FROM votes WHERE userid = 58 AND DATE(creationdate) = '2010-07-19';"}
{"sample_id": 10025, "db_id": "codebase_community", "gold_sql": "SELECT SUM(DISTINCT FavoriteCount) FROM posts WHERE Id IN ( SELECT PostId FROM postHistory WHERE UserId = 686 AND STRFTIME('%Y', CreationDate) = '2011' )", "pred_sql": "SELECT SUM(favoritecount) AS total_favorites FROM posts WHERE owneruserid = '686' AND strftime('%Y', creaiondate) = '2011';"}
{"sample_id": 9968, "db_id": "codebase_community", "gold_sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ClosedDate IS NOT NULL", "pred_sql": "SELECT DISTINCT users.displayname \nFROM users \nJOIN posts ON users.id = posts.owneruserid \nWHERE posts.closeddate IS NOT NULL;"}
{"sample_id": 10079, "db_id": "codebase_community", "gold_sql": "SELECT DisplayName, WebsiteUrl FROM users WHERE Id = ( SELECT UserId FROM votes WHERE VoteTypeId = 8 ORDER BY BountyAmount DESC LIMIT 1 )", "pred_sql": "SELECT u.displayname, u.websiteurl \nFROM votes v \nJOIN users u ON v.userid = u.id \nWHERE v.votetypeid = 8 \nORDER BY v.bountyamount DESC \nLIMIT 1;"}
{"sample_id": 10018, "db_id": "codebase_community", "gold_sql": "SELECT Name FROM badges AS T1 INNER JOIN comments AS T2 ON T1.UserId = t2.UserId GROUP BY T2.UserId ORDER BY COUNT(T2.UserId) DESC LIMIT 1", "pred_sql": "SELECT u.displayname, b.name \nFROM users u \nJOIN comments c ON u.id = c.userid \nJOIN badges b ON u.id = b.userid \nGROUP BY u.id \nORDER BY COUNT(c.id) DESC;"}
{"sample_id": 10086, "db_id": "codebase_community", "gold_sql": "SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%'", "pred_sql": "SELECT SUM(score) AS total_score FROM posts WHERE DATE(creationdate) = '2010-07-19';"}
{"sample_id": 9965, "db_id": "codebase_community", "gold_sql": "SELECT MAX(T1.AnswerCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "pred_sql": "SELECT answercount FROM posts WHERE owneruserid = (SELECT id FROM users WHERE displayname = 'csgillespie') ORDER BY answercount DESC LIMIT 1;"}
{"sample_id": 9999, "db_id": "codebase_community", "gold_sql": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'", "pred_sql": "SELECT * FROM comments WHERE userdisplayname = 'A Lion.';"}
{"sample_id": 9975, "db_id": "codebase_community", "gold_sql": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE STRFTIME('%Y', T1.Date) = '2011' AND T2.DisplayName = 'csgillespie'", "pred_sql": "SELECT COUNT(*) AS badge_count FROM badges WHERE userid = (SELECT id FROM users WHERE displayname = 'csgillespie') AND date LIKE '2011%';"}
{"sample_id": 9978, "db_id": "codebase_community", "gold_sql": "SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T2.DisplayName) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Views > 200", "pred_sql": "SELECT AVG(badge_count) AS average_badges\nFROM (\n    SELECT userid, COUNT(*) AS badge_count\n    FROM badges\n    GROUP BY userid\n) AS badge_counts\nJOIN (\n    SELECT id\n    FROM users\n    WHERE views > 200\n) AS filtered_users\nON badge_counts.userid = filtered_users.id;"}
{"sample_id": 10095, "db_id": "codebase_community", "gold_sql": "SELECT AVG(PostId) FROM votes WHERE UserId IN ( SELECT Id FROM users WHERE Age = ( SELECT MAX(Age) FROM users ) )", "pred_sql": "SELECT AVG(post_count) AS average_posts_voted\nFROM (\n    SELECT COUNT(votes.postid) AS post_count\n    FROM users\n    JOIN votes ON users.id = votes.userid\n    WHERE users.age > 65\n    GROUP BY users.id\n) AS user_post_counts;"}
{"sample_id": 10041, "db_id": "codebase_community", "gold_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Supporter' AND T1.Age BETWEEN 19 AND 65", "pred_sql": "SELECT COUNT(DISTINCT users.id) AS adult_count\nFROM users\nJOIN badges ON users.id = badges.userid\nWHERE badges.name = 'Supporter' AND users.age BETWEEN 19 AND 65;"}
{"sample_id": 10137, "db_id": "codebase_community", "gold_sql": "SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0", "pred_sql": "SELECT DISTINCT u.displayname \nFROM comments c \nJOIN users u ON c.userid = u.id \nWHERE c.score BETWEEN 1 AND 5 \nAND u.downvotes = 0;"}
{"sample_id": 10008, "db_id": "codebase_community", "gold_sql": "SELECT T3.DisplayName, T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title LIKE '%variance%'", "pred_sql": "SELECT users.displayname \nFROM votes \nJOIN posts ON votes.postid = posts.id \nJOIN users ON votes.userid = users.id \nWHERE votes.bountyamount = 50 AND posts.title LIKE '%variance%';"}
{"sample_id": 10080, "db_id": "codebase_community", "gold_sql": "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5", "pred_sql": "SELECT title FROM posts ORDER BY viewcount DESC LIMIT 5;"}
{"sample_id": 10092, "db_id": "codebase_community", "gold_sql": "SELECT T2.CreaionDate FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Age IS NOT NULL ORDER BY T1.Age, T2.CreaionDate LIMIT 1", "pred_sql": "SELECT MIN(creationdate) AS first_post_date FROM posts WHERE owneruserid = (SELECT id FROM users ORDER BY age ASC LIMIT 1)"}
{"sample_id": 10056, "db_id": "codebase_community", "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1", "pred_sql": "SELECT p.title, p.viewcount FROM posts p JOIN users u ON p.owneruserid = u.id WHERE u.displayname IN ('Harvey Motulsky', 'Noah Snyder') ORDER BY p.viewcount DESC LIMIT 1;"}
{"sample_id": 10027, "db_id": "codebase_community", "gold_sql": "SELECT COUNT(id) FROM badges WHERE Name = 'Announcer'", "pred_sql": "SELECT COUNT(DISTINCT userid) AS user_count FROM badges WHERE name = 'Announcer';"}
{"sample_id": 10015, "db_id": "codebase_community", "gold_sql": "SELECT COUNT(DISTINCT T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teacher') AND T2.Location = 'New York'", "pred_sql": "SELECT COUNT(DISTINCT u.id) AS user_count\nFROM users u\nJOIN badges b ON u.id = b.userid\nWHERE u.location = 'New York' AND (b.name = 'teacher' OR b.name = 'supporter')"}
{"sample_id": 10101, "db_id": "codebase_community", "gold_sql": "SELECT T1.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T2.Score DESC LIMIT 1", "pred_sql": "SELECT id, title FROM posts ORDER BY score DESC LIMIT 1;"}
{"sample_id": 9971, "db_id": "codebase_community", "gold_sql": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'", "pred_sql": "SELECT body FROM posts WHERE id = (SELECT excerptpostid FROM tags WHERE tagname = 'bayesian')"}
{"sample_id": 10055, "db_id": "codebase_community", "gold_sql": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1", "pred_sql": "SELECT id FROM posts WHERE owneruserid = (SELECT id FROM users WHERE displayname = 'slashnick') ORDER BY answercount DESC LIMIT 1;"}
{"sample_id": 10064, "db_id": "codebase_community", "gold_sql": "SELECT COUNT(id) FROM postHistory WHERE date(CreationDate) = '2010-07-21'", "pred_sql": "SELECT COUNT(*) AS post_count FROM posts WHERE creaiondate = '2010-07-21';"}
{"sample_id": 10063, "db_id": "codebase_community", "gold_sql": "SELECT COUNT(Id) FROM badges WHERE Name = 'Commentator' AND STRFTIME('%Y', Date) = '2014'", "pred_sql": "SELECT COUNT(DISTINCT userid) AS user_count FROM badges WHERE name = 'commentator' AND date LIKE '2014%'"}
{"sample_id": 10042, "db_id": "codebase_community", "gold_sql": "SELECT T1.Views FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0'", "pred_sql": "SELECT u.views FROM users u JOIN badges b ON u.id = b.userid WHERE b.date = '2010-07-19 19:39:08';"}
{"sample_id": 10030, "db_id": "codebase_community", "gold_sql": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'", "pred_sql": "SELECT text FROM comments WHERE creationdate = '2010-07-19 19:25:47';"}
{"sample_id": 8467, "db_id": "mondial_geo", "gold_sql": "SELECT T3.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 INNER JOIN country AS T3 ON T3.Code = T2.Country2 WHERE T1.Name = 'Bulgaria'", "pred_sql": "SELECT country1 AS country FROM borders WHERE country2 = 'BG' UNION SELECT country2 AS country FROM borders WHERE country1 = 'BG';"}
{"sample_id": 8298, "db_id": "mondial_geo", "gold_sql": "SELECT COUNT(T2.Mountain) FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY T1.Population DESC LIMIT 1", "pred_sql": "SELECT COUNT(*) FROM geo_mountain WHERE country = (SELECT code FROM country ORDER BY population DESC LIMIT 1);"}
{"sample_id": 8403, "db_id": "mondial_geo", "gold_sql": "SELECT T4.Service * T4.GDP FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name INNER JOIN economy AS T4 ON T4.Country = T2.Country WHERE T3.Name = 'Fuenlabrada'", "pred_sql": "SELECT economy.gdp, economy.service FROM economy JOIN city ON economy.country = city.country WHERE city.name = 'Fuenlabrada';"}
{"sample_id": 8414, "db_id": "mondial_geo", "gold_sql": "SELECT 100 - (CAST(SUM(CASE WHEN Target = 'Christian' THEN 1 ELSE 0 END) AS REAL)) * 100 / COUNT(Country) FROM target", "pred_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM country) AS non_christian_percentage FROM country WHERE country NOT IN (SELECT country FROM religion WHERE name = 'Christianity')"}
{"sample_id": 8269, "db_id": "mondial_geo", "gold_sql": "SELECT Name FROM country WHERE Province = 'Baghdad'", "pred_sql": "SELECT country FROM city WHERE name = 'Baghdad';"}
{"sample_id": 8286, "db_id": "mondial_geo", "gold_sql": "SELECT T2.Government FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Iran'", "pred_sql": "SELECT government FROM politics WHERE country = 'IR';"}
{"sample_id": 8472, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Name FROM organization AS T1 INNER JOIN isMember AS T2 ON T2.Country = T1.Country INNER JOIN country AS T3 ON T2.Country = T3.Code WHERE T2.Type = 'National Society'", "pred_sql": "SELECT organization.name FROM organization JOIN ismember ON organization.code = ismember.country WHERE ismember.type = 'National Society';"}
{"sample_id": 8479, "db_id": "mondial_geo", "gold_sql": "SELECT T3.Name FROM country AS T1 INNER JOIN isMember AS T2 ON T1.Code = T2.Country INNER JOIN organization AS T3 ON T3.Country = T2.Country WHERE T1.Name = 'Singapore' ORDER BY T3.Established DESC LIMIT 1", "pred_sql": "SELECT organization.name FROM organization JOIN ismember ON organization.country = ismember.country WHERE ismember.country = 'SG' ORDER BY organization.established DESC LIMIT 1;"}
{"sample_id": 8222, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Name, T1.Population FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T2.Population_Growth > 2 AND T2.Infant_Mortality < 5", "pred_sql": "SELECT country.code, country.population \nFROM country \nJOIN population ON country.code = population.country \nWHERE population.population_growth > 2 AND population.infant_mortality < 5;"}
{"sample_id": 8283, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Capital FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Olsztyn'", "pred_sql": "SELECT c.capital FROM city ci JOIN country c ON ci.country = c.code WHERE ci.name = 'Olsztyn';"}
{"sample_id": 8341, "db_id": "mondial_geo", "gold_sql": "SELECT T3.Length FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T1.Name = 'Little Rock'", "pred_sql": "SELECT river.name, river.length FROM river JOIN located ON river.name = located.river WHERE located.city = 'Little Rock';"}
{"sample_id": 8398, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Population FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T3.Name = 'Fareham'", "pred_sql": "SELECT country.population FROM city JOIN country ON city.country = country.code WHERE city.name = 'Fareham';"}
{"sample_id": 8369, "db_id": "mondial_geo", "gold_sql": "SELECT DISTINCT T1.Country FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Name = ( SELECT Name FROM river WHERE Sea = 'Atlantic Ocean' ORDER BY Length DESC LIMIT 1 )", "pred_sql": "SELECT DISTINCT country.name FROM river JOIN sea ON river.sea = sea.name JOIN country ON river.country = country.code WHERE sea.name = 'Atlantic Ocean' ORDER BY river.length DESC LIMIT 3;"}
{"sample_id": 8396, "db_id": "mondial_geo", "gold_sql": "SELECT T2.Percentage FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country WHERE T3.Name = 'Russia' AND T1.Name = 'Europe'", "pred_sql": "SELECT percentage FROM encompasses WHERE country = 'RUS' AND continent = 'Europe';"}
{"sample_id": 8386, "db_id": "mondial_geo", "gold_sql": "SELECT T2.Name FROM sea AS T1 INNER JOIN river AS T2 ON T2.Sea = T1.Name WHERE T1.Depth = 540 ORDER BY T2.Length DESC LIMIT 1", "pred_sql": "SELECT name FROM river WHERE sea = (SELECT name FROM sea WHERE depth = '540') ORDER BY length DESC LIMIT 1;"}
{"sample_id": 8290, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.Country WHERE T2.Population = 114339", "pred_sql": "SELECT country.name FROM city JOIN country ON city.country = country.code WHERE city.population = '114339';"}
{"sample_id": 8303, "db_id": "mondial_geo", "gold_sql": "SELECT COUNT(T2.Desert) FROM country AS T1 INNER JOIN geo_desert AS T2 ON T1.Code = T2.Country INNER JOIN language AS T3 ON T1.Code = T2.Country WHERE T3.Name = 'Armenian' AND T3.Percentage > 90", "pred_sql": "SELECT COUNT(DISTINCT d.name) AS desert_count\nFROM desert d\nJOIN ethnicgroup e ON d.country = e.country\nWHERE e.name = 'Armenian' AND e.percentage > 90;"}
{"sample_id": 8345, "db_id": "mondial_geo", "gold_sql": "SELECT AVG(T1.Height) FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain WHERE T2.Province = 'Nepal'", "pred_sql": "SELECT AVG(height) AS average_height FROM mountain WHERE country = 'Nepal';"}
{"sample_id": 8482, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Name, T1.Height FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain WHERE T2.Province = 'Alaska'", "pred_sql": "SELECT name, height FROM mountain WHERE country = 'USA' AND province = 'Alaska';"}
{"sample_id": 8495, "db_id": "mondial_geo", "gold_sql": "SELECT T2.Independence FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Capital = 'Nouakchott'", "pred_sql": "SELECT independence FROM politics WHERE country = (SELECT code FROM country WHERE capital = 'Nouakchott');"}
{"sample_id": 8432, "db_id": "mondial_geo", "gold_sql": "SELECT Longitude, Latitude FROM city WHERE Name = 'Aarhus'", "pred_sql": "SELECT longitude, latitude FROM city WHERE name = 'Aarhus';"}
{"sample_id": 8241, "db_id": "mondial_geo", "gold_sql": "SELECT T2.GDP * T2.Agriculture FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T1.Area ASC LIMIT 1", "pred_sql": "SELECT agriculture FROM economy WHERE country = (SELECT code FROM country ORDER BY area ASC LIMIT 1)"}
{"sample_id": 8282, "db_id": "mondial_geo", "gold_sql": "SELECT T2.Name FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Japan' ORDER BY T2.Population DESC LIMIT 1", "pred_sql": "SELECT name FROM city WHERE country = 'JP' ORDER BY population DESC LIMIT 1;"}
{"sample_id": 8494, "db_id": "mondial_geo", "gold_sql": "SELECT Name, Length FROM river ORDER BY Length DESC LIMIT 16, 1", "pred_sql": "SELECT name, length FROM river ORDER BY length ASC LIMIT 1 OFFSET 16;"}
{"sample_id": 8463, "db_id": "mondial_geo", "gold_sql": "SELECT Name, City FROM organization WHERE Country = 'USA'", "pred_sql": "SELECT name, city FROM organization WHERE country = 'USA';"}
{"sample_id": 8243, "db_id": "mondial_geo", "gold_sql": "SELECT COUNT(T1.Name) FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'African' AND T1.Area > 10000000", "pred_sql": "SELECT COUNT(*) FROM country WHERE code IN (SELECT country FROM ethnicgroup WHERE name = 'African') AND population > 10000000;"}
{"sample_id": 8321, "db_id": "mondial_geo", "gold_sql": "SELECT DISTINCT T3.Longitude, T3.Latitude FROM city AS T1 INNER JOIN locatedOn AS T2 ON T1.Name = T2.City INNER JOIN island AS T3 ON T3.Name = T2.Island WHERE T1.Province = 'South Yorkshire'", "pred_sql": "SELECT geo_island.island, island.longitude, island.latitude \nFROM locatedon \nJOIN geo_island ON locatedon.island = geo_island.island \nWHERE locatedon.province = 'South Yorkshire';"}
{"sample_id": 8506, "db_id": "mondial_geo", "gold_sql": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Independence) = '1960' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Country) FROM politics", "pred_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM country) AS percentage FROM politics WHERE independence IS NOT NULL AND strftime('%Y', independence) = '1960';"}
{"sample_id": 8422, "db_id": "mondial_geo", "gold_sql": "SELECT NAME FROM lake WHERE river = ( SELECT river FROM river WHERE NAME = 'Manicouagan' )", "pred_sql": "SELECT lake.name FROM lake JOIN river ON lake.river = river.name WHERE river.name = 'Manicouagan'"}
{"sample_id": 8351, "db_id": "mondial_geo", "gold_sql": "SELECT T2.Name FROM economy AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code ORDER BY T1.Inflation DESC LIMIT 1", "pred_sql": "SELECT country.name FROM country JOIN economy ON country.code = economy.country ORDER BY economy.gdp/economy.population LIMIT 1;"}
{"sample_id": 8258, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Country, COUNT(T1.Country) FROM economy AS T1 INNER JOIN organization AS T2 ON T1.Country = T2.Country WHERE T1.GDP < 500000 AND STRFTIME('%Y', T2.Established) < '1999' GROUP BY T1.Country", "pred_sql": "SELECT COUNT(*) FROM organization o JOIN economy e ON o.country = e.country WHERE e.gdp < 500000 AND o.established > '1999-01-01';"}
{"sample_id": 8349, "db_id": "mondial_geo", "gold_sql": "SELECT Country FROM politics WHERE Government = 'British crown dependency'", "pred_sql": "SELECT country FROM politics WHERE dependent = 'GBR';"}
{"sample_id": 8496, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Name, T2.GDP FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T1.Population ASC LIMIT 1", "pred_sql": "SELECT country.name, economy.gdp FROM country JOIN economy ON country.code = economy.country ORDER BY country.population ASC LIMIT 1;"}
{"sample_id": 8387, "db_id": "mondial_geo", "gold_sql": "SELECT T3.Country FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province ORDER BY T1.Height DESC LIMIT 1, 1", "pred_sql": "SELECT country FROM geo_mountain WHERE height = (SELECT DISTINCT height FROM geo_mountain ORDER BY height DESC LIMIT 1 OFFSET 1)"}
{"sample_id": 8504, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Population / T1.Area, T2.Industry FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Province = 'Distrito Federal'", "pred_sql": "SELECT (c.population / c.area) AS population_density, e.industry AS industry_percentage FROM country c JOIN economy e ON c.code = e.country WHERE c.capital IN (SELECT name FROM city WHERE province = 'Distrito Federal');"}
{"sample_id": 8395, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Name, T3.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 INNER JOIN country AS T3 ON T3.Code = T2.Country2 WHERE T2.Length = 803", "pred_sql": "SELECT c1.name AS country1_name, c2.name AS country2_name \nFROM borders b \nJOIN country c1 ON b.country1 = c1.code \nJOIN country c2 ON b.country2 = c2.code \nWHERE b.length = '803 km';"}
{"sample_id": 8498, "db_id": "mondial_geo", "gold_sql": "SELECT T3.Height, T3.Type FROM island AS T1 INNER JOIN mountainOnIsland AS T2 ON T1.Name = T2.Island INNER JOIN mountain AS T3 ON T3.Name = T2.Mountain WHERE T1.Name = 'Madagaskar' ORDER BY T3.Height DESC LIMIT 1", "pred_sql": "SELECT height, type FROM mountain WHERE mountain IN (SELECT mountain FROM mountainonisland WHERE island = 'Madagaskar') ORDER BY length LIMIT 1;"}
{"sample_id": 8480, "db_id": "mondial_geo", "gold_sql": "SELECT T2.Population FROM organization AS T1 INNER JOIN city AS T2 ON T1.City = T2.Name WHERE T1.Name = 'World Tourism Organization'", "pred_sql": "SELECT city.population FROM city JOIN organization ON city.name = organization.city WHERE organization.name = 'World Tourism Organization';"}
{"sample_id": 8421, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Name FROM lake AS T1 INNER JOIN geo_lake AS T2 ON T1.Name = T2.Lake INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN country AS T4 ON T4.Code = T3.Country WHERE T4.Name = 'Bolivia' ORDER BY T1.Depth DESC LIMIT 1", "pred_sql": "SELECT name, depth FROM lake WHERE country = 'BOL' ORDER BY depth DESC LIMIT 1;"}
{"sample_id": 8307, "db_id": "mondial_geo", "gold_sql": "SELECT MAX(T3.Length) FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN borders AS T3 ON T3.Country1 = T2.Country WHERE T2.Independence IS NOT NULL", "pred_sql": "SELECT MAX(length) AS greatest_border_length FROM borders WHERE country1 IN (SELECT code FROM country WHERE independence IS NOT NULL) AND country2 IN (SELECT code FROM country WHERE independence IS NOT NULL);"}
{"sample_id": 8289, "db_id": "mondial_geo", "gold_sql": "SELECT T2.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Name = ( SELECT Name FROM country ORDER BY Area DESC LIMIT 2, 1 ) GROUP BY T2.Name ORDER BY T2.Percentage * T1.Population DESC LIMIT 1", "pred_sql": "SELECT e.name, e.percentage FROM ethnicgroup e JOIN country c ON e.country = c.code WHERE c.population = (SELECT population FROM country ORDER BY population DESC LIMIT 1 OFFSET 2) ORDER BY e.percentage DESC LIMIT 1;"}
{"sample_id": 8488, "db_id": "mondial_geo", "gold_sql": "SELECT T3.Name, CAST(T3.Population AS REAL) * 100 / T1.Population FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Country = T2.Country ORDER BY T3.Population DESC LIMIT 1", "pred_sql": "SELECT city.name, city.population, (city.population * 100.0 / country.population) AS population_percentage\nFROM city\nJOIN country ON city.country = country.code\nORDER BY city.population DESC\nLIMIT 1;"}
{"sample_id": 8230, "db_id": "mondial_geo", "gold_sql": "SELECT T2.Percentage * T1.Population FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Arab'", "pred_sql": "SELECT country, SUM(percentage) AS total_population FROM ethnicgroup WHERE name = 'Arab' GROUP BY country;"}
{"sample_id": 8375, "db_id": "mondial_geo", "gold_sql": "SELECT T4.Capital, CAST(T3.Population AS REAL) * 100 / T4.Population FROM city AS T3 INNER JOIN ( SELECT T1.Capital , T1.Population FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country WHERE T2.Continent = 'Asia' ORDER BY T1.Population DESC LIMIT 2, 1 ) AS T4 ON T3.Name = T4.Capital", "pred_sql": "SELECT c.capital, (CAST(ci.population AS REAL) / CAST(c.population AS REAL)) * 100 AS capital_population_ratio\nFROM country c\nJOIN city ci ON c.capital = ci.name\nWHERE c.code IN (\n    SELECT code\n    FROM country\n    WHERE code IN (\n        SELECT country\n        FROM encompasses\n        WHERE continent = 'Asia'\n    )\n    ORDER BY population DESC\n    LIMIT 1 OFFSET 2\n)"}
{"sample_id": 8481, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Height, T2.Province FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain WHERE T1.Name = 'Dhaulagiri'", "pred_sql": "SELECT height, province FROM geo_mountain WHERE mountain = 'Dhaulagiri';"}
{"sample_id": 8392, "db_id": "mondial_geo", "gold_sql": "SELECT T3.Name FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T3.Name <> T1.Capital ORDER BY T3.Population DESC LIMIT 1", "pred_sql": "SELECT name, population FROM city WHERE name NOT IN (SELECT capital FROM country) ORDER BY population DESC LIMIT 1;"}
{"sample_id": 8372, "db_id": "mondial_geo", "gold_sql": "SELECT T2.City, T1.Capital FROM country AS T1 INNER JOIN located AS T2 ON T1.Code = T2.Country INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Name = 'Euphrat'", "pred_sql": "SELECT city.name, country.capital FROM city JOIN located ON city.name = located.city JOIN river ON located.river = river.name JOIN country ON located.country = country.code WHERE river.name = 'Euphrat';"}
{"sample_id": 8318, "db_id": "mondial_geo", "gold_sql": "SELECT AVG(T4.Inflation) FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN economy AS T4 ON T4.Country = T3.Code WHERE T1.Name = ( SELECT Name FROM continent ORDER BY Area DESC LIMIT 1 )", "pred_sql": "SELECT AVG(e.inflation) AS average_inflation_rate\nFROM economy e\nJOIN encompasses ec ON e.country = ec.country\nJOIN continent c ON ec.continent = c.name\nWHERE c.area = (SELECT MAX(area) FROM continent);"}
{"sample_id": 8484, "db_id": "mondial_geo", "gold_sql": "SELECT T2.Inflation FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Greece'", "pred_sql": "SELECT inflation FROM economy WHERE country = 'Greece';"}
{"sample_id": 8459, "db_id": "mondial_geo", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.Length > 3000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Name) FROM river AS T1 INNER JOIN located AS T2 ON T1.Name = T2.River INNER JOIN country AS T3 ON T3.Code = T2.Country", "pred_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM river) AS proportion, name FROM river WHERE length > '3000' AND country = 'RU';"}
{"sample_id": 8385, "db_id": "mondial_geo", "gold_sql": "SELECT COUNT(T2.Name) FROM country AS T1 INNER JOIN city AS T2 ON T2.Country = T1.Code WHERE T1.Name = 'France' AND T2.Population > 100000", "pred_sql": "SELECT COUNT(*) FROM city WHERE country = 'FRA' AND population > 100000;"}
{"sample_id": 8367, "db_id": "mondial_geo", "gold_sql": "SELECT * FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Country = T2.Country INNER JOIN country AS T4 ON T4.Code = T3.Country WHERE T1.Name = ( SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1 )", "pred_sql": "SELECT ABS(c1.population - c2.population) AS population_difference\nFROM country c1\nJOIN geo_mountain gm ON c1.code = gm.country\nJOIN mountain m ON gm.mountain = m.name\nJOIN country c2 ON c2.code = (SELECT country FROM geo_mountain WHERE mountain = m.name)\nWHERE m.height = (SELECT MAX(height) FROM mountain);"}
{"sample_id": 8287, "db_id": "mondial_geo", "gold_sql": "SELECT T3.Name FROM locatedOn AS T1 INNER JOIN island AS T2 ON T1.Island = T2.Name INNER JOIN country AS T3 ON T3.Code = T1.Country WHERE T3.Name = 'Bermuda'", "pred_sql": "SELECT country.name FROM country WHERE country.code = (SELECT city.country FROM city WHERE city.name = 'Bermuda');"}
{"sample_id": 8302, "db_id": "mondial_geo", "gold_sql": "SELECT T2.Desert FROM country AS T1 INNER JOIN geo_desert AS T2 ON T1.Code = T2.Country WHERE T1.Area > 100000 AND T1.Population < 500000", "pred_sql": "SELECT d.name FROM desert d JOIN country c ON d.country = c.code WHERE c.population > 100000 AND c.area < 500000;"}
{"sample_id": 8253, "db_id": "mondial_geo", "gold_sql": "SELECT COUNT(T2.Name) FROM located AS T1 INNER JOIN lake AS T2 ON T1.Lake = T2.Name WHERE T1.Province = 'Canary Islands' AND T2.Area > 1000000", "pred_sql": "SELECT COUNT(*) FROM lake l JOIN geo_island gi ON l.name = gi.lake WHERE gi.island = 'Canary Islands' AND l.area > 1000000;"}
{"sample_id": 8334, "db_id": "mondial_geo", "gold_sql": "SELECT Name FROM river WHERE Sea = 'Mediterranean Sea' ORDER BY Length DESC LIMIT 1", "pred_sql": "SELECT name FROM river WHERE sea = 'Mediterranean Sea' ORDER BY length DESC LIMIT 1;"}
{"sample_id": 8325, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Name, T1.Population FROM city AS T1 INNER JOIN province AS T2 ON T2.Name = T1.Province WHERE T2.Population > 1000000", "pred_sql": "SELECT city.name, city.population FROM city JOIN province ON city.province = province.name WHERE province.population > 1000000;"}
{"sample_id": 8300, "db_id": "mondial_geo", "gold_sql": "SELECT Mountain FROM geo_mountain WHERE Country = ( SELECT Country FROM economy ORDER BY Inflation ASC LIMIT 1 )", "pred_sql": "SELECT geo_mountain.name FROM geo_mountain JOIN economy ON geo_mountain.country = economy.country WHERE economy.inflation = (SELECT MIN(inflation) FROM economy)"}
{"sample_id": 7922, "db_id": "music_platform_2", "gold_sql": "SELECT T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'I Heart My Life Show'", "pred_sql": "SELECT c.category FROM categories c JOIN podcasts p ON c.podcast_id = p.podcast_id WHERE p.title = 'I Heart My Life Show';"}
{"sample_id": 7978, "db_id": "music_platform_2", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.category = 'technology' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.title) OR '%' \"percentage\" FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id", "pred_sql": "SELECT COUNT(p.podcast_id) * 100.0 / (SELECT COUNT(*) FROM podcasts) AS percentage, p.* FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'technology' GROUP BY p.podcast_id;"}
{"sample_id": 7952, "db_id": "music_platform_2", "gold_sql": "SELECT DISTINCT T1.category FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.author_id = 'EFB34EAC8E9397C'", "pred_sql": "SELECT DISTINCT c.category \nFROM categories c \nJOIN reviews r ON c.podcast_id = r.podcast_id \nWHERE r.author_id = 'EFB34EAC8E9397C';"}
{"sample_id": 7972, "db_id": "music_platform_2", "gold_sql": "SELECT T2.title, T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T3.content LIKE '%Absolutely fantastic%'", "pred_sql": "SELECT p.title, c.category \nFROM podcasts p \nJOIN reviews r ON p.podcast_id = r.podcast_id \nJOIN categories c ON p.podcast_id = c.podcast_id \nWHERE r.content LIKE '%Absolutely fantastic%';"}
{"sample_id": 7964, "db_id": "music_platform_2", "gold_sql": "SELECT category FROM categories GROUP BY category ORDER BY COUNT(podcast_id) ASC LIMIT 1", "pred_sql": "SELECT category FROM categories GROUP BY category ORDER BY COUNT(*) ASC LIMIT 1;"}
{"sample_id": 7926, "db_id": "music_platform_2", "gold_sql": "SELECT T2.title, T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id GROUP BY T3.podcast_id HAVING AVG(T3.rating) > 3", "pred_sql": "SELECT p.title, c.category, AVG(r.rating) as average_rating \nFROM podcasts p \nJOIN categories c ON p.podcast_id = c.podcast_id \nJOIN reviews r ON p.podcast_id = r.podcast_id \nGROUP BY p.podcast_id, c.category \nHAVING AVG(r.rating) > 3.0;"}
{"sample_id": 7955, "db_id": "music_platform_2", "gold_sql": "SELECT COUNT(DISTINCT T1.category) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.created_at BETWEEN '2016-07-01T00:00:00-07:00' AND '2016-12-31T23:59:59-07:00'", "pred_sql": "SELECT DISTINCT c.category \nFROM categories c \nJOIN reviews r ON c.podcast_id = r.podcast_id \nWHERE r.created_at >= '2016-07-01' AND r.created_at < '2017-01-01';"}
{"sample_id": 7974, "db_id": "music_platform_2", "gold_sql": "SELECT itunes_url FROM podcasts WHERE podcast_id IN ( SELECT podcast_id FROM categories WHERE category = 'fiction-science-fiction' )", "pred_sql": "SELECT p.itunes_url FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'fiction-science-fiction';"}
{"sample_id": 7953, "db_id": "music_platform_2", "gold_sql": "SELECT slug, itunes_url FROM podcasts WHERE podcast_id IN ( SELECT podcast_id FROM reviews WHERE content = 'Can''t stop listening' )", "pred_sql": "SELECT podcasts.slug, podcasts.itunes_url FROM podcasts JOIN reviews ON podcasts.podcast_id = reviews.podcast_id WHERE reviews.content = 'Can''t stop listening';"}
{"sample_id": 7924, "db_id": "music_platform_2", "gold_sql": "SELECT COUNT(T3.podcast_id) FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T2.title LIKE '%spoilers%' AND T1.category = 'arts' AND T3.rating = 5", "pred_sql": "SELECT COUNT(DISTINCT r.author_id) AS five_star_raters\nFROM reviews r\nJOIN podcasts p ON r.podcast_id = p.podcast_id\nJOIN categories c ON p.podcast_id = c.podcast_id\nWHERE r.rating = 5\nAND p.title LIKE '%spoiler%'\nAND c.category = 'art';"}
{"sample_id": 7951, "db_id": "music_platform_2", "gold_sql": "SELECT DISTINCT T1.title FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.created_at BETWEEN '2018-08-22T11:53:16-07:00' AND '2018-11-20T11:14:20-07:00'", "pred_sql": "SELECT DISTINCT p.title FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.created_at BETWEEN '2018-08-22T11:53:16-07:00' AND '2018-11-20T11:14:20-07:00';"}
{"sample_id": 7948, "db_id": "music_platform_2", "gold_sql": "SELECT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'fiction'", "pred_sql": "SELECT p.title FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'fiction';"}
{"sample_id": 7971, "db_id": "music_platform_2", "gold_sql": "SELECT T1.title FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'Inspired & On Fire!'", "pred_sql": "SELECT p.* FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.title = 'Inspired & On Fire!'"}
{"sample_id": 6296, "db_id": "coinmarketcap", "gold_sql": "SELECT T1.NAME FROM coins AS T1 INNER JOIN historical AS T2 ON T1.ID = T2.coin_id WHERE T2.DATE = '2013-05-29' AND T2.percent_change_1h > 0", "pred_sql": "SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = 20130529 AND h.percent_change_1h > 0;"}
{"sample_id": 6289, "db_id": "coinmarketcap", "gold_sql": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Peercoin' AND T2.cmc_rank = 5", "pred_sql": "SELECT date FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Peercoin') AND cmc_rank = 5;"}
{"sample_id": 6282, "db_id": "coinmarketcap", "gold_sql": "SELECT name FROM coins WHERE LENGTH(tag_names) - LENGTH(replace(tag_names, ',', '')) = 2", "pred_sql": "SELECT name FROM coins WHERE tags IS NOT NULL AND LENGTH(tags) - LENGTH(REPLACE(tags, ',', '')) + 1 = 3;"}
{"sample_id": 6284, "db_id": "coinmarketcap", "gold_sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-29' AND T2.cmc_rank = 1", "pred_sql": "SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = 20130429 ORDER BY h.cmc_rank ASC LIMIT 1;"}
{"sample_id": 6271, "db_id": "coinmarketcap", "gold_sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T2.total_supply > 10000000", "pred_sql": "SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = 20130428 AND c.total_supply > 10000000;"}
{"sample_id": 6270, "db_id": "coinmarketcap", "gold_sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2016-01-08' AND T2.volume_24h = ( SELECT MAX(volume_24h) FROM historical WHERE date = '2016-01-08' )", "pred_sql": "SELECT coins.name, MAX(historical.volume_24h) AS highest_value FROM historical JOIN coins ON historical.coin_id = coins.id WHERE historical.date = 20160108 GROUP BY coins.name ORDER BY highest_value DESC LIMIT 1;"}
{"sample_id": 6249, "db_id": "coinmarketcap", "gold_sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date LIKE '2018%' AND T2.market_cap = ( SELECT MAX(market_cap) FROM historical WHERE STRFTIME('%Y', date) = '2018' )", "pred_sql": "SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date BETWEEN 20180101 AND 20181231 ORDER BY h.market_cap DESC LIMIT 1;"}
{"sample_id": 6272, "db_id": "coinmarketcap", "gold_sql": "SELECT (CASE WHEN T2.percent_change_7d > 0 THEN 'INCREASED' ELSE 'DECREASED' END) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-05-05' AND T1.name = 'Bitcoin'", "pred_sql": "SELECT CASE WHEN h1.price > h2.price THEN 'increased' WHEN h1.price < h2.price THEN 'decreased' ELSE 'no change' END AS price_change\nFROM historical h1\nJOIN historical h2 ON h1.coin_id = h2.coin_id\nWHERE h1.date = 20130505 AND h2.date = 20130428\nAND h1.coin_id = (SELECT id FROM coins WHERE name = 'Bitcoin');"}
{"sample_id": 6262, "db_id": "coinmarketcap", "gold_sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2020-06-22' GROUP BY T1.name HAVING AVG(T2.percent_change_24h) > T2.PRICE", "pred_sql": "SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.percent_change_24h > (SELECT AVG(percent_change_24h) FROM historical WHERE date = '2013-06-22') AND h.date = '2013-06-22';"}
{"sample_id": 2320, "db_id": "movielens", "gold_sql": "SELECT COUNT(DISTINCT T2.userid) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid INNER JOIN users AS T3 ON T2.userid = T3.userid WHERE T1.country = 'UK' AND T3.age = 35", "pred_sql": "SELECT COUNT(DISTINCT u.userid) AS separate_users_count \nFROM users u \nJOIN u2base ub ON u.userid = ub.userid \nJOIN movies m ON ub.movieid = m.movieid \nWHERE u.age = '35' AND m.country = 'UK';"}
{"sample_id": 2273, "db_id": "movielens", "gold_sql": "SELECT T1.movieid FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'UK' AND T1.genre = 'Adventure' AND T2.isEnglish = 'F' LIMIT 5", "pred_sql": "SELECT m.movieid FROM movies m JOIN movies2directors md ON m.movieid = md.movieid WHERE m.isenglish = 'no' AND md.genre = 'adventure' AND m.country = 'UK' LIMIT 5;"}
{"sample_id": 2290, "db_id": "movielens", "gold_sql": "SELECT T1.movieid FROM movies2directors AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.genre = 'Adventure' GROUP BY T1.movieid ORDER BY AVG(T2.rating) DESC LIMIT 1", "pred_sql": "SELECT m.movieid, AVG(u.rating) AS avg_rating \nFROM movies m \nJOIN movies2directors md ON m.movieid = md.movieid \nJOIN u2base u ON m.movieid = u.movieid \nWHERE md.genre = (SELECT genre FROM movies2directors WHERE genre = 'adventure') \nGROUP BY m.movieid \nORDER BY avg_rating DESC \nLIMIT 1;"}
{"sample_id": 2251, "db_id": "movielens", "gold_sql": "SELECT COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'France' AND T1.genre = 'drama'", "pred_sql": "SELECT COUNT(*) FROM movies m JOIN movies2directors md ON m.movieid = md.movieid WHERE m.country = 'France' AND md.genre = (SELECT genre FROM movies2directors WHERE genre = 'Drama')"}
{"sample_id": 2311, "db_id": "movielens", "gold_sql": "SELECT T1.directorid FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality >= 3 GROUP BY T1.directorid HAVING COUNT(T2.movieid) >= 2", "pred_sql": "SELECT directorid FROM directors d JOIN movies2directors md ON d.directorid = md.directorid WHERE d.d_quality >= 3 GROUP BY d.directorid HAVING COUNT(DISTINCT md.genre) >= 2;"}
{"sample_id": 2337, "db_id": "movielens", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.d_quality = 4 AND T1.avg_revenue = 4 THEN 1 ELSE 0 END) AS REAL) / COUNT(T2.movieid) FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid", "pred_sql": "SELECT AVG(movies2directors.movieid) AS average_movies\nFROM directors\nJOIN movies2directors ON directors.directorid = movies2directors.directorid\nWHERE directors.d_quality = 4 AND directors.avg_revenue = 4;"}
{"sample_id": 2325, "db_id": "movielens", "gold_sql": "SELECT COUNT(DISTINCT T2.actorid) FROM u2base AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.rating = 5", "pred_sql": "SELECT COUNT(DISTINCT ma.actorid) AS different_actors\nFROM u2base AS u\nJOIN movies AS m ON u.movieid = m.movieid\nJOIN movies2actors AS ma ON m.movieid = ma.movieid\nWHERE u.rating = (SELECT MAX(rating) FROM u2base)"}
{"sample_id": 2295, "db_id": "movielens", "gold_sql": "SELECT COUNT(DISTINCT T2.movieid) FROM u2base AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T2.genre = 'drama' AND T1.rating = 3", "pred_sql": "SELECT COUNT(*) FROM movies2directors md JOIN movies m ON md.movieid = m.movieid WHERE md.genre = 'drama' AND m.movieid IN (SELECT movieid FROM u2base WHERE rating = 3);"}
{"sample_id": 2259, "db_id": "movielens", "gold_sql": "SELECT T1.userid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid INNER JOIN users AS T3 ON T1.userid = T3.userid WHERE T2.country = 'France' AND T2.runningtime = 2 AND T1.rating < 3 AND T3.u_gender = 'M'", "pred_sql": "SELECT u.userid FROM users u JOIN u2base ub ON u.userid = ub.userid JOIN movies m ON ub.movieid = m.movieid WHERE u.u_gender = 'M' AND ub.rating < 3 AND m.country = 'France' AND m.runningtime = '2';"}
{"sample_id": 2328, "db_id": "movielens", "gold_sql": "SELECT COUNT(T1.userid) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T2.rating = 3 AND T2.movieid = '1711133' AND T1.age = 35 AND T1.u_gender = 'F'", "pred_sql": "SELECT COUNT(*) FROM u2base JOIN users ON u2base.userid = users.userid WHERE users.age = '35' AND users.u_gender = 'F' AND u2base.movieid = '1711133' AND u2base.rating = 3;"}
{"sample_id": 2254, "db_id": "movielens", "gold_sql": "SELECT AVG(T2.cast_num) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'USA'", "pred_sql": "SELECT AVG(CAST(cast_num AS INTEGER)) AS average_casts FROM movies m JOIN movies2actors ma ON m.movieid = ma.movieid WHERE m.country = 'USA';"}
{"sample_id": 2249, "db_id": "movielens", "gold_sql": "SELECT T2.genre FROM movies2actors AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T1.actorid = T3.actorid WHERE T3.actorid = 851", "pred_sql": "SELECT DISTINCT md.genre FROM movies2actors ma JOIN movies2directors md ON ma.movieid = md.movieid WHERE ma.actorid = '851';"}
{"sample_id": 2318, "db_id": "movielens", "gold_sql": "SELECT COUNT(movieid) FROM movies WHERE country = 'France' AND movieid IN ( SELECT movieid FROM u2base WHERE rating = ( SELECT MAX(rating) FROM u2base ) )", "pred_sql": "SELECT COUNT(*) FROM movies m JOIN u2base u ON m.movieid = u.movieid WHERE m.country = 'France' AND u.rating = (SELECT MAX(rating) FROM u2base WHERE movieid IN (SELECT movieid FROM movies WHERE country = 'France'));"}
{"sample_id": 2282, "db_id": "movielens", "gold_sql": "SELECT COUNT(DISTINCT T1.movieid) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.year = 1 AND T2.rating = 1 AND T1.isEnglish = 'T'", "pred_sql": "SELECT COUNT(*) AS lowest_rated_movies_count \nFROM movies m \nJOIN u2base u ON m.movieid = u.movieid \nWHERE m.isenglish = 'yes' \nAND m.year = '1' \nAND u.rating = (SELECT MIN(rating) FROM u2base WHERE movieid IN (SELECT movieid FROM movies WHERE isenglish = 'yes' AND year = '1'));"}
{"sample_id": 2329, "db_id": "movielens", "gold_sql": "SELECT COUNT(T2.userid) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'UK' AND T1.runningtime = 2 AND T2.rating = 1 AND T1.year = 2", "pred_sql": "SELECT COUNT(DISTINCT u.userid) AS user_count \nFROM u2base u \nJOIN movies m ON u.movieid = m.movieid \nWHERE u.rating = 1 \nAND m.country = 'UK' \nAND m.year = (SELECT DISTINCT year FROM movies WHERE country = 'UK' ORDER BY year DESC LIMIT 1 OFFSET 1) \nAND m.runningtime = '2';"}
{"sample_id": 2278, "db_id": "movielens", "gold_sql": "SELECT COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 5 AND T2.age < 18 AND T2.u_gender = 'M'", "pred_sql": "SELECT COUNT(u.userid) AS highest_rating_count\nFROM u2base u\nJOIN users us ON u.userid = us.userid\nWHERE us.u_gender = 'M' AND us.age = '1' AND u.rating = 5;"}
{"sample_id": 2330, "db_id": "movielens", "gold_sql": "SELECT DISTINCT T1.directorid FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality = 3 AND T1.avg_revenue = 2 AND T2.genre != 'Comedy'", "pred_sql": "SELECT COUNT(DISTINCT d.directorid) AS unique_directors\nFROM directors d\nJOIN movies2directors md ON d.directorid = md.directorid\nJOIN movies m ON md.movieid = m.movieid\nWHERE d.avg_revenue = 2 AND d.d_quality = 3 AND md.genre != 'comedy';"}
{"sample_id": 2314, "db_id": "movielens", "gold_sql": "SELECT T1.movieid FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.runningtime >= 2 AND T1.genre = 'Horror'", "pred_sql": "SELECT movieid FROM movies WHERE runningtime >= '2' AND genre = 'horror';"}
{"sample_id": 2265, "db_id": "movielens", "gold_sql": "SELECT T2.actorid FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T3.a_quality = 3 AND T1.country = 'USA' AND T1.isEnglish = 'T'", "pred_sql": "SELECT a.actorid FROM actors a JOIN movies2actors ma ON a.actorid = ma.actorid JOIN movies m ON ma.movieid = m.movieid WHERE a.a_quality = '3' AND m.isenglish = '1' AND m.country = 'USA';"}
{"sample_id": 2961, "db_id": "shakespeare", "gold_sql": "SELECT SUM(T1.ParagraphNum) FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.character_id = T2.id WHERE T2.CharName = 'Lord Abergavenny'", "pred_sql": "SELECT COUNT(*) AS paragraph_count FROM paragraphs p JOIN characters c ON p.character_id = c.id WHERE c.charname = 'Lord Abergavenny';"}
{"sample_id": 3007, "db_id": "shakespeare", "gold_sql": "SELECT MAX(T2.ParagraphNum) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Sir Richard Ratcliff'", "pred_sql": "SELECT COUNT(p.id) AS paragraph_count\nFROM paragraphs p\nJOIN chapters c ON p.chapter_id = c.id\nJOIN characters ch ON p.character_id = ch.id\nWHERE ch.charname = 'Sir Richard Ratcliff'\nAND c.id IN (\n    SELECT chapter_id\n    FROM paragraphs\n    GROUP BY chapter_id\n    HAVING COUNT(id) > 150\n)"}
{"sample_id": 2988, "db_id": "shakespeare", "gold_sql": "SELECT COUNT(id) FROM chapters WHERE work_id = 7 AND Act = 1", "pred_sql": "SELECT COUNT(DISTINCT scene) AS scene_count FROM chapters WHERE work_id = '7' AND act = '1';"}
{"sample_id": 2993, "db_id": "shakespeare", "gold_sql": "SELECT T2.Description FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id ORDER BY T1.ParagraphNum DESC LIMIT 1", "pred_sql": "SELECT c.description FROM chapters c JOIN paragraphs p ON c.id = p.chapter_id GROUP BY c.id ORDER BY COUNT(p.id) DESC LIMIT 1;"}
{"sample_id": 2976, "db_id": "shakespeare", "gold_sql": "SELECT DISTINCT T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.CharName = 'Shylock'", "pred_sql": "SELECT works.title FROM works JOIN paragraphs ON works.id = paragraphs.work_id JOIN characters ON paragraphs.character_id = characters.id WHERE characters.charname = 'Shylock';"}
{"sample_id": 2960, "db_id": "shakespeare", "gold_sql": "SELECT T3.PlainText FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T2.Act = 1 AND T2.Scene = 1 AND T1.Title = 'Twelfth Night'", "pred_sql": "SELECT p.plaintext FROM paragraphs p JOIN chapters c ON p.chapter_id = c.id JOIN works w ON c.work_id = w.id WHERE w.title = 'Twelfth Night' AND c.act = '1' AND c.scene = '1';"}
{"sample_id": 2964, "db_id": "shakespeare", "gold_sql": "SELECT COUNT(DISTINCT T4.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.Title = 'Twelfth Night'", "pred_sql": "SELECT COUNT(*) FROM characters WHERE id IN (SELECT DISTINCT character_id FROM paragraphs WHERE chapter_id IN (SELECT id FROM chapters WHERE work_id = (SELECT id FROM works WHERE title = 'Twelfth Night')));"}
{"sample_id": 2963, "db_id": "shakespeare", "gold_sql": "SELECT COUNT(T2.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Description = 'OLIVIA\u2019S house.' AND T1.Title = 'Twelfth Night'", "pred_sql": "SELECT COUNT(*) AS scene_count \nFROM chapters c \nJOIN works w ON c.work_id = w.id \nWHERE c.scene = 'OLIVIA\u2019S house.' AND w.title = 'Twelfth Night';"}
{"sample_id": 3003, "db_id": "shakespeare", "gold_sql": "SELECT COUNT(DISTINCT T2.work_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 1 AND T2.Scene < 2 AND T1.GenreType = 'History'", "pred_sql": "SELECT COUNT(DISTINCT w.id) AS work_count\nFROM works w\nJOIN chapters c ON w.id = c.work_id\nWHERE w.title LIKE '%Shakespeare%'\nAND c.act = '1'\nAND (SELECT COUNT(*) FROM chapters WHERE work_id = w.id AND act = c.act) <= 2;"}
{"sample_id": 3021, "db_id": "shakespeare", "gold_sql": "SELECT COUNT(T2.chapter_id) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'First Witch'", "pred_sql": "SELECT COUNT(DISTINCT c.id) AS chapter_count\nFROM chapters c\nJOIN paragraphs p ON c.id = p.chapter_id\nJOIN characters ch ON p.character_id = ch.id\nWHERE ch.charname = 'First Witch';"}
{"sample_id": 2971, "db_id": "shakespeare", "gold_sql": "SELECT T1.Description FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.chapter_id ORDER BY T2.ParagraphNum DESC LIMIT 1", "pred_sql": "SELECT chapters.description FROM chapters JOIN paragraphs ON chapters.id = paragraphs.chapter_id GROUP BY chapters.id ORDER BY COUNT(paragraphs.id) DESC LIMIT 1;"}
{"sample_id": 2995, "db_id": "shakespeare", "gold_sql": "SELECT DISTINCT T2.Description FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id WHERE T1.ParagraphNum < 150", "pred_sql": "SELECT c.description FROM chapters c JOIN paragraphs p ON c.id = p.chapter_id GROUP BY c.id HAVING COUNT(p.id) <= 150;"}
{"sample_id": 3002, "db_id": "shakespeare", "gold_sql": "SELECT SUM(T2.Scene) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 5 AND T1.LongTitle = 'History of Henry VIII'", "pred_sql": "SELECT COUNT(DISTINCT scene) AS scene_count FROM chapters JOIN works ON chapters.work_id = works.id WHERE works.title = 'History of Henry VIII' AND chapters.act = '5';"}
{"sample_id": 2975, "db_id": "shakespeare", "gold_sql": "SELECT T1.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.id = '640171'", "pred_sql": "SELECT c.description FROM characters c JOIN paragraphs p ON c.id = p.character_id WHERE p.paragraphnum = 640171;"}
{"sample_id": 3004, "db_id": "shakespeare", "gold_sql": "SELECT SUM(DISTINCT T2.Act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Sonnets'", "pred_sql": "SELECT COUNT(DISTINCT act) AS act_count FROM chapters WHERE work_id = (SELECT id FROM works WHERE title = 'Sonnets');"}
{"sample_id": 2991, "db_id": "shakespeare", "gold_sql": "SELECT ParagraphNum FROM paragraphs WHERE PlainText = 'Ay, surely, mere the truth: I know his lady.'", "pred_sql": "SELECT COUNT(*) AS paragraph_count FROM paragraphs WHERE plaintext = 'Ay, surely, mere the truth: I know his lady.';"}
{"sample_id": 2958, "db_id": "shakespeare", "gold_sql": "SELECT DISTINCT T4.CharName FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.Title = 'Twelfth Night'", "pred_sql": "SELECT charname FROM characters WHERE id IN (SELECT character_id FROM paragraphs WHERE chapter_id IN (SELECT id FROM chapters WHERE work_id = (SELECT id FROM works WHERE title = 'Twelfth Night')));"}
{"sample_id": 2994, "db_id": "shakespeare", "gold_sql": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.LongTitle = 'Twelfth Night, Or What You Will' AND T2.Scene = 2 AND T2.Act = 2", "pred_sql": "SELECT chapters.description FROM chapters JOIN works ON chapters.work_id = works.id WHERE works.title = 'Twelfth Night, Or What You Will' AND chapters.act = 'Act 2' AND chapters.scene = '2';"}
{"sample_id": 2996, "db_id": "shakespeare", "gold_sql": "SELECT T2.Title FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T1.Description = 'A field near Windsor.'", "pred_sql": "SELECT works.title FROM works JOIN chapters ON works.id = chapters.work_id WHERE chapters.description = 'A field near Windsor';"}
{"sample_id": 3024, "db_id": "shakespeare", "gold_sql": "SELECT T2.Act, T2.Scene, T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Description = 'The house of ANTIPHOLUS of Ephesus.'", "pred_sql": "SELECT chapters.scene, chapters.act, works.title \nFROM chapters \nJOIN works ON chapters.work_id = works.id \nWHERE chapters.description = 'The house of ANTIPHOLUS of Ephesus';"}
{"sample_id": 2955, "db_id": "shakespeare", "gold_sql": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Twelfth Night' AND T2.Act = 1 AND T2.Scene = 2", "pred_sql": "SELECT chapters.description FROM chapters JOIN works ON chapters.work_id = works.id WHERE works.title = 'Twelfth Night' AND chapters.act = '1' AND chapters.scene = '2';"}
{"sample_id": 2977, "db_id": "shakespeare", "gold_sql": "SELECT COUNT(T2.Scene) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'King John'", "pred_sql": "SELECT COUNT(DISTINCT scene) AS scene_count FROM chapters WHERE work_id = (SELECT id FROM works WHERE title = 'King John');"}
{"sample_id": 6192, "db_id": "food_inspection_2", "gold_sql": "SELECT T1.address FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 52238", "pred_sql": "SELECT e.address FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_id = '52238';"}
{"sample_id": 6241, "db_id": "food_inspection_2", "gold_sql": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T1.facility_type = 'Grocery Store' AND T3.fine = 250", "pred_sql": "SELECT COUNT(DISTINCT e.employee_id) AS grocery_store_count\nFROM establishment AS est\nJOIN inspection AS ins ON est.license_no = ins.license_no\nJOIN violation AS v ON ins.inspection_id = v.inspection_id\nWHERE est.facility_type = 'Grocery Store' AND v.fine = 250;"}
{"sample_id": 6247, "db_id": "food_inspection_2", "gold_sql": "SELECT DISTINCT T1.employee_id FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.results = 'Fail' AND strftime('%Y-%m', T2.inspection_date) = '2010-02' AND T1.salary > 0.7 * ( SELECT AVG(salary) FROM employee )", "pred_sql": "SELECT e.first_name, e.last_name \nFROM employee e \nWHERE e.salary > (SELECT AVG(salary) * 0.7 FROM employee) \nAND e.employee_id IN (\n    SELECT i.employee_id \n    FROM inspection i \n    JOIN establishment est ON i.license_no = est.license_no \n    WHERE i.results = 'Fail' \n    AND i.inspection_date BETWEEN '2010-02-01' AND '2010-02-28'\n);"}
{"sample_id": 6180, "db_id": "food_inspection_2", "gold_sql": "SELECT COUNT(CASE WHEN T2.category = 'Toxic Items' THEN T1.inspection_id END) AS Tox_nums , COUNT(CASE WHEN T2.category = 'No Smoking Regulations' THEN T1.inspection_id END) AS NosmoNums FROM violation AS T1 INNER JOIN inspection_point AS T2 ON T1.point_id = T2.point_id", "pred_sql": "SELECT COUNT(CASE WHEN inspection_type = 'Toxic Items' THEN 1 END) AS toxic_items_inspections, COUNT(CASE WHEN inspection_type = 'No Smoking Regulations' THEN 1 END) AS no_smoking_inspections FROM inspection;"}
{"sample_id": 6245, "db_id": "food_inspection_2", "gold_sql": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id INNER JOIN inspection_point AS T4 ON T3.point_id = T4.point_id WHERE T4.category = 'No Smoking Regulations'", "pred_sql": "SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.inspection_type = 'No Smoking Regulations';"}
{"sample_id": 6216, "db_id": "food_inspection_2", "gold_sql": "SELECT COUNT(DISTINCT T2.point_id) FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.point_level = 'Serious ' AND T2.fine = 0", "pred_sql": "SELECT COUNT(*) AS serious_points_no_fine\nFROM inspection_point\nWHERE point_level = 'Serious' AND fine IS NULL;"}
{"sample_id": 6183, "db_id": "food_inspection_2", "gold_sql": "SELECT COUNT(T2.inspection_id) FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.category = 'Display of Inspection Report Summary'", "pred_sql": "SELECT COUNT(*) AS total_inspections FROM inspection WHERE inspection_type = 'inspection report summary';"}
{"sample_id": 6168, "db_id": "food_inspection_2", "gold_sql": "SELECT DISTINCT T3.fine, T1.state, T1.city, T1.address FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T2.inspection_id = 48216", "pred_sql": "SELECT v.fine, e.address, e.city, e.state, e.zip \nFROM violation v \nJOIN inspection i ON v.inspection_id = i.inspection_id \nJOIN establishment e ON i.license_no = e.license_no \nWHERE i.inspection_id = '48216';"}
{"sample_id": 6162, "db_id": "food_inspection_2", "gold_sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_date = '2010-03-09' AND T2.inspection_type = 'Canvass'", "pred_sql": "SELECT e.first_name || ' ' || e.last_name AS full_name \nFROM employee e \nJOIN inspection i ON e.employee_id = i.employee_id \nWHERE i.inspection_type = 'canvass' AND i.inspection_date = '2010-03-09';"}
{"sample_id": 6224, "db_id": "food_inspection_2", "gold_sql": "SELECT address FROM establishment WHERE city = 'CHICAGO' AND dba_name = 'OLD TIMERS REST & LOUNGE' AND facility_type = 'Restaurant'", "pred_sql": "SELECT address, city, state, zip FROM establishment WHERE dba_name = 'Old Timers Rest & Lounge' AND city = 'Chicago' AND facility_type = 'Restaurant';"}
{"sample_id": 6214, "db_id": "food_inspection_2", "gold_sql": "SELECT DISTINCT T3.dba_name, T2.results FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T1.first_name = 'Bob' AND T1.last_name = 'Benson' AND strftime('%Y', T2.inspection_date) = '2010'", "pred_sql": "SELECT e.first_name, e.last_name, es.dba_name, es.aka_name, i.inspection_date, i.results \nFROM employee e \nJOIN inspection i ON e.employee_id = i.employee_id \nJOIN establishment es ON i.license_no = es.license_no \nWHERE e.first_name = 'Bob' AND e.last_name = 'Benson' AND strftime('%Y', i.inspection_date) = '2010';"}
{"sample_id": 6196, "db_id": "food_inspection_2", "gold_sql": "SELECT DISTINCT T1.phone FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_type = 'Canvass'", "pred_sql": "SELECT employee.phone FROM employee JOIN inspection ON employee.employee_id = inspection.employee_id WHERE inspection.inspection_type = 'Canvass';"}
{"sample_id": 6178, "db_id": "food_inspection_2", "gold_sql": "SELECT COUNT(T1.inspection_id) FROM violation AS T1 INNER JOIN inspection_point AS T2 ON T1.point_id = T2.point_id WHERE T2.category = 'Personnel'", "pred_sql": "SELECT COUNT(*) AS total_inspections FROM inspection WHERE inspection_type = 'Personnel';"}
{"sample_id": 6141, "db_id": "food_inspection_2", "gold_sql": "SELECT first_name, last_name FROM employee ORDER BY salary ASC LIMIT 1", "pred_sql": "SELECT first_name || ' ' || last_name AS full_name FROM employee ORDER BY salary ASC LIMIT 1;"}
{"sample_id": 6228, "db_id": "food_inspection_2", "gold_sql": "SELECT DISTINCT T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 52256", "pred_sql": "SELECT last_name FROM employee WHERE employee_id = (SELECT employee_id FROM inspection WHERE inspection_id = '52256');"}
{"sample_id": 6154, "db_id": "food_inspection_2", "gold_sql": "SELECT SUM(T3.fine) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE strftime('%Y-%m', T2.inspection_date) = '2014-02' AND T1.dba_name = 'RON OF JAPAN INC'", "pred_sql": "SELECT SUM(v.fine) AS total_fine\nFROM violation v\nJOIN inspection i ON v.inspection_id = i.inspection_id\nJOIN employee e ON i.employee_id = e.employee_id\nJOIN establishment est ON i.license_no = est.license_no\nWHERE e.first_name = 'Ron' AND est.dba_name = 'Japan Inc' AND i.inspection_date BETWEEN '2014-02-01' AND '2014-02-28';"}
{"sample_id": 6167, "db_id": "food_inspection_2", "gold_sql": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = '1' AND T2.inspection_type = 'Complaint' AND T1.facility_type = 'Restaurant' AND T2.results = 'Fail'", "pred_sql": "SELECT COUNT(*) AS failed_restaurant_count \nFROM establishment e \nJOIN inspection i ON e.license_no = i.license_no \nWHERE e.facility_type = 'Restaurant' \nAND e.risk_level = (SELECT MIN(risk_level) FROM establishment WHERE facility_type = 'Restaurant') \nAND i.inspection_type = 'Complaint' \nAND i.results = 'Fail';"}
{"sample_id": 6118, "db_id": "food_inspection_2", "gold_sql": "SELECT DISTINCT T2.dba_name FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE T1.results = 'Fail' AND strftime('%Y', T1.inspection_date) = '2010'", "pred_sql": "SELECT DISTINCT e.aka_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.results = 'Fail' AND strftime('%Y', i.inspection_date) = '2010';"}
{"sample_id": 6158, "db_id": "food_inspection_2", "gold_sql": "SELECT T2.dba_name , CAST(SUM(CASE WHEN T1.results = 'Pass' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.inspection_id) AS percentagePassed , CAST(SUM(CASE WHEN T1.results = 'Fail' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.inspection_id) FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no GROUP BY T2.dba_name ORDER BY COUNT(T1.license_no) DESC LIMIT 1", "pred_sql": "SELECT e.dba_name, COUNT(i.inspection_id) AS total_inspections, \n       SUM(CASE WHEN i.results IN ('Pass', 'Pass w/ Conditions') THEN 1 ELSE 0 END) * 100.0 / COUNT(i.inspection_id) AS pass_percentage, \n       SUM(CASE WHEN i.results IN ('Fail') THEN 1 ELSE 0 END) * 100.0 / COUNT(i.inspection_id) AS fail_percentage \nFROM establishment e \nJOIN inspection i ON e.license_no = i.license_no \nGROUP BY e.dba_name \nORDER BY total_inspections DESC \nLIMIT 1;"}
{"sample_id": 6160, "db_id": "food_inspection_2", "gold_sql": "SELECT T1.dba_name, T3.first_name, T3.last_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T2.inspection_date = '2010-05-05' AND T2.inspection_id = 44256", "pred_sql": "SELECT e.first_name || ' ' || e.last_name AS employee_name, es.dba_name AS establishment_name \nFROM inspection i \nJOIN establishment es ON i.license_no = es.license_no \nJOIN employee e ON i.employee_id = e.employee_id \nWHERE i.inspection_id = '44256' AND i.inspection_date = '2010-05-05';"}
{"sample_id": 6201, "db_id": "food_inspection_2", "gold_sql": "SELECT COUNT(T2.inspection_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y', T2.inspection_date) = '2010' AND T1.risk_level = 3", "pred_sql": "SELECT COUNT(*) AS serious_issues_count FROM inspection i JOIN violation v ON i.inspection_id = v.inspection_id WHERE strftime('%Y', i.inspection_date) = '2010' AND v.fine = '250';"}
{"sample_id": 6205, "db_id": "food_inspection_2", "gold_sql": "SELECT DISTINCT T2.results, T1.zip FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.license_no = 1222441", "pred_sql": "SELECT i.results, e.zip FROM inspection i JOIN establishment e ON i.license_no = e.license_no WHERE e.license_no = 1222441;"}
{"sample_id": 6137, "db_id": "food_inspection_2", "gold_sql": "SELECT CAST(COUNT(T2.inspection_id) AS REAL) / COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = 3 AND T1.facility_type = 'TAVERN'", "pred_sql": "SELECT AVG(inspection_count) AS average_inspections\nFROM (\n    SELECT COUNT(inspection_id) AS inspection_count\n    FROM inspection\n    JOIN establishment ON inspection.license_no = establishment.license_no\n    WHERE establishment.risk_level = 3 AND establishment.facility_type = 'Tavern'\n    GROUP BY establishment.license_no\n) AS inspection_counts;"}
{"sample_id": 6148, "db_id": "food_inspection_2", "gold_sql": "SELECT COUNT(DISTINCT T2.license_no) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.first_name = 'David' AND T1.last_name = 'Hodges' AND T1.employee_id = 153225 AND T2.inspection_type = 'Short Form Complaint' AND T2.results = 'Pass'", "pred_sql": "SELECT COUNT(DISTINCT i.license_no) AS passed_businesses\nFROM inspection i\nJOIN employee e ON i.employee_id = e.employee_id\nWHERE e.first_name = 'David' AND e.last_name = 'Hodges' \nAND i.inspection_type = 'Short Form Complaint' \nAND i.results IN ('Pass', 'Pass w/ Conditions');"}
{"sample_id": 6123, "db_id": "food_inspection_2", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.inspection_date LIKE '2010%' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.salary > 70000 THEN 1 ELSE 0 END) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id", "pred_sql": "SELECT AVG(inspection_count) AS average_inspections\nFROM (\n    SELECT COUNT(*) AS inspection_count\n    FROM inspection\n    JOIN employee ON inspection.employee_id = employee.employee_id\n    WHERE employee.title = 'Sanitarian'\n      AND employee.salary > 70000\n      AND strftime('%Y', inspection.inspection_date) = '2010'\n    GROUP BY inspection.employee_id\n) AS inspection_counts;"}
{"sample_id": 6239, "db_id": "food_inspection_2", "gold_sql": "SELECT T1.salary, T3.salary FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN employee AS T3 WHERE T2.inspection_id = 58424 ORDER BY T1.salary, T3.salary DESC LIMIT 1", "pred_sql": "SELECT MIN(salary) AS min_salary, MAX(salary) AS max_salary FROM employee WHERE employee_id IN (SELECT employee_id FROM inspection WHERE inspection_id = '58424');"}
{"sample_id": 6125, "db_id": "food_inspection_2", "gold_sql": "SELECT T2.first_name, T2.last_name FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T1.inspection_id = 48224", "pred_sql": "SELECT first_name || ' ' || last_name AS full_name FROM employee INNER JOIN inspection ON employee.employee_id = inspection.employee_id WHERE inspection.inspection_id = '48224';"}
{"sample_id": 9562, "db_id": "financial", "gold_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'", "pred_sql": "SELECT COUNT(*) AS account_count FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.a2 = 'Pisek';"}
{"sample_id": 9596, "db_id": "financial", "gold_sql": "SELECT STRFTIME('%Y', T1.birth_date) FROM client AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id INNER JOIN account AS T2 ON T3.account_id = T2.account_id WHERE T2.account_id = 130", "pred_sql": "SELECT birth_date FROM client WHERE client_id = (SELECT client_id FROM disp WHERE account_id = (SELECT account_id FROM account WHERE account_id = '130') AND type = 'OWNER')"}
{"sample_id": 9584, "db_id": "financial", "gold_sql": "SELECT T1.A3 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 3541", "pred_sql": "SELECT d.a3 AS region FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.client_id = 3541;"}
{"sample_id": 9521, "db_id": "financial", "gold_sql": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) = '1993' AND T1.duration > 12 ORDER BY T1.amount DESC LIMIT 1", "pred_sql": "SELECT account.account_id, MAX(loan.amount) AS highest_approved_amount\nFROM account\nJOIN loan ON account.account_id = loan.account_id\nWHERE loan.duration > 12 AND account.date LIKE '93%'\nGROUP BY account.account_id\nORDER BY highest_approved_amount DESC;"}
{"sample_id": 9520, "db_id": "financial", "gold_sql": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1", "pred_sql": "SELECT account.account_id, MIN(loan.amount) AS lowest_approved_amount\nFROM account\nJOIN loan ON account.account_id = loan.account_id\nWHERE loan.date BETWEEN '970101' AND '971231'\nGROUP BY account.account_id\nORDER BY lowest_approved_amount ASC;"}
{"sample_id": 9528, "db_id": "financial", "gold_sql": "SELECT T4.amount FROM card AS T1 JOIN disp AS T2 ON T1.disp_id = T2.disp_id JOIN account AS T3 on T2.account_id = T3.account_id JOIN trans AS T4 on T3.account_id = T4.account_id WHERE T1.issued = '1996-10-21' ORDER BY T4.amount DESC LIMIT 1", "pred_sql": "SELECT MAX(trans.amount) AS max_transaction_amount\nFROM trans\nJOIN card ON trans.account_id = card.disp_id\nWHERE card.issued = '961021';"}
{"sample_id": 9516, "db_id": "financial", "gold_sql": "SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1", "pred_sql": "SELECT a.account_id, (SELECT MAX(a11) FROM district) - (SELECT MIN(a11) FROM district WHERE district_id IN (SELECT c.district_id FROM client c WHERE c.gender = 'F' ORDER BY c.birth_date ASC LIMIT 1)) AS salary_gap\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nWHERE c.gender = 'F'\nORDER BY c.birth_date ASC\nLIMIT 1;"}
{"sample_id": 9575, "db_id": "financial", "gold_sql": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'classic' AND T2.type = 'OWNER'", "pred_sql": "SELECT COUNT(DISTINCT card.card_id) AS classic_card_count\nFROM card\nJOIN disp ON card.disp_id = disp.disp_id\nJOIN loan ON disp.account_id = loan.account_id\nWHERE card.type = 'classic';"}
{"sample_id": 9535, "db_id": "financial", "gold_sql": "SELECT T4.birth_date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832", "pred_sql": "SELECT birth_date FROM client WHERE client_id = (SELECT client_id FROM loan WHERE amount = 98832 AND date = 960103)"}
{"sample_id": 9583, "db_id": "financial", "gold_sql": "SELECT T3.type FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T1.disp_id = T3.disp_id WHERE T2.client_id = 13539", "pred_sql": "SELECT card.type FROM card JOIN disp ON card.disp_id = disp.disp_id WHERE disp.client_id = 13539;"}
{"sample_id": 9597, "db_id": "financial", "gold_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU'", "pred_sql": "SELECT COUNT(DISTINCT a.account_id) AS account_count\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nJOIN trans t ON a.account_id = t.account_id\nWHERE d.type = 'OWNER' AND t.k_symbol = 'SLUZBY';"}
{"sample_id": 9540, "db_id": "financial", "gold_sql": "SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(account_id) FROM loan WHERE amount < 100000", "pred_sql": "SELECT (COUNT(CASE WHEN l.status = 'C' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_running_no_issue\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nWHERE l.amount < 100000;"}
{"sample_id": 9599, "db_id": "financial", "gold_sql": "SELECT T4.balance, T1.gender FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id =T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 4 AND T4.trans_id = 851", "pred_sql": "SELECT SUM(trans.amount) AS total_amount, client.gender FROM trans JOIN disp ON trans.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id WHERE trans.trans_id = '851' AND disp.account_id IN (SELECT account_id FROM account WHERE account_id IN (SELECT account_id FROM disp WHERE client_id = 4));"}
{"sample_id": 9612, "db_id": "financial", "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia'", "pred_sql": "SELECT COUNT(*) AS client_count \nFROM client c \nJOIN district d ON c.district_id = d.district_id \nWHERE c.birth_date BETWEEN 19200101 AND 19201231 \nAND d.a3 = 'East Bohemia';"}
{"sample_id": 9567, "db_id": "financial", "gold_sql": "SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1998' AND T1.operation = 'VYBER KARTOU' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE STRFTIME('%Y', date) = '1998')", "pred_sql": "SELECT DISTINCT disp.client_id FROM disp JOIN card ON disp.disp_id = card.disp_id JOIN trans ON disp.account_id = trans.account_id WHERE trans.amount < (SELECT AVG(trans.amount) FROM trans JOIN card ON trans.account_id = card.account_id WHERE card.issued BETWEEN '980101' AND '981231') AND card.issued BETWEEN '980101' AND '981231';"}
{"sample_id": 9595, "db_id": "financial", "gold_sql": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM \"order\" GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539", "pred_sql": "SELECT COUNT(*) AS statement_requests, SUM(amount) AS total_debited FROM order WHERE account_id = '3' OR account_id = '3539';"}
{"sample_id": 9568, "db_id": "financial", "gold_sql": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T5 ON T2.account_id = T5.account_id INNER JOIN loan AS T3 ON T5.account_id = T3.account_id INNER JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T1.gender = 'F'", "pred_sql": "SELECT DISTINCT client.client_id, client.gender \nFROM client \nJOIN disp ON client.client_id = disp.client_id \nJOIN card ON disp.account_id = card.account_id \nJOIN loan ON disp.account_id = loan.account_id \nWHERE client.gender = 'F';"}
{"sample_id": 9578, "db_id": "financial", "gold_sql": "SELECT T1.client_id FROM disp AS T1 INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN loan AS T2 ON T3.account_id = T2.account_id WHERE T1.type = 'OWNER' ORDER BY T2.amount DESC LIMIT 1", "pred_sql": "SELECT c.client_id, d.type, a.account_id, l.amount \nFROM client c \nJOIN disp d ON c.client_id = d.client_id \nJOIN account a ON d.account_id = a.account_id \nJOIN loan l ON a.account_id = l.account_id \nWHERE d.type = 'OWNER' \nORDER BY l.amount DESC \nLIMIT 1;"}
{"sample_id": 9608, "db_id": "financial", "gold_sql": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T3 ON T1.district_id = T3.district_id INNER JOIN account AS T2 ON T2.district_id = T3.district_id INNER JOIN disp as T4 on T1.client_id = T4.client_id AND T2.account_id = T4.account_id WHERE T2.frequency = 'POPLATEK TYDNE'", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM client WHERE gender = 'M')) AS percentage FROM disp JOIN account ON disp.account_id = account.account_id WHERE disp.type = 'USER' AND account.frequency = 'weekly' AND client.gender = 'M';"}
{"sample_id": 9604, "db_id": "financial", "gold_sql": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T2.account_id = T4.account_id INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE STRFTIME('%Y', T3.birth_date) BETWEEN '1974' AND '1976' AND T3.gender = 'M' AND T1.amount > 4000 AND T1.k_symbol = 'SIPO'", "pred_sql": "SELECT COUNT(DISTINCT c.client_id) AS male_customers_count\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nJOIN order o ON a.account_id = o.account_id\nWHERE c.gender = 'M'\nAND c.birth_date BETWEEN 19740101 AND 19761231\nAND o.amount > 4000\nAND o.k_symbol = 'SIPO';"}
{"sample_id": 9539, "db_id": "financial", "gold_sql": "SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100) / SUM(amount) FROM loan", "pred_sql": "SELECT (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) * 100.0 / SUM(amount)) AS percentage_fully_paid FROM loan;"}
{"sample_id": 4666, "db_id": "disney", "gold_sql": "SELECT song FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title WHERE T1.genre = 'Drama' GROUP BY song", "pred_sql": "SELECT r.song FROM round r JOIN movies_total_gross m ON r.movie_title = m.movie_title WHERE m.genre = 'drama';"}
{"sample_id": 4722, "db_id": "disney", "gold_sql": "SELECT movie_title FROM movies_total_gross WHERE genre = 'Action' ORDER BY CAST(REPLACE(trim(total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1", "pred_sql": "SELECT movie_title, total_gross FROM movies_total_gross WHERE genre = 'action' ORDER BY total_gross DESC LIMIT 1;"}
{"sample_id": 4631, "db_id": "disney", "gold_sql": "SELECT T2.movie_title FROM director AS T1 INNER JOIN movies_total_gross AS T2 ON T1.name = T2.movie_title WHERE T1.director = 'Wolfgang Reitherman' ORDER BY T2.total_gross DESC LIMIT 1", "pred_sql": "SELECT mt.movie_title, mt.total_gross FROM director d JOIN movies_total_gross mt ON d.name = mt.movie_title WHERE d.director = 'Wolfgang Reitherman' ORDER BY mt.total_gross DESC LIMIT 1;"}
{"sample_id": 4716, "db_id": "disney", "gold_sql": "SELECT T1.\"voice-actor\", T3.director FROM \"voice-actors\" AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title INNER JOIN director AS T3 ON T2.movie_title = T3.name WHERE T2.hero = 'Elsa'", "pred_sql": "SELECT va.voice_actor, d.director \nFROM characters c \nJOIN voice-actors va ON c.hero = va.character \nJOIN director d ON c.movie_title = d.name \nWHERE c.hero = 'Elsa';"}
{"sample_id": 4635, "db_id": "disney", "gold_sql": "SELECT villian FROM characters WHERE movie_title = 'Beauty and the Beast'", "pred_sql": "SELECT villian FROM round WHERE movie_title = 'Beauty and the Beast';"}
{"sample_id": 4665, "db_id": "disney", "gold_sql": "SELECT \"Year\" FROM revenue WHERE \"Year\" BETWEEN 2000 AND 2010 ORDER BY \"Studio Entertainment[NI 1]\" DESC LIMIT 1", "pred_sql": "SELECT year, MAX(total) AS max_revenue FROM revenue WHERE year BETWEEN '2000' AND '2010' GROUP BY year ORDER BY max_revenue DESC LIMIT 1;"}
{"sample_id": 4703, "db_id": "disney", "gold_sql": "SELECT name FROM director WHERE director = 'Jack Kinney'", "pred_sql": "SELECT name FROM director WHERE director = 'Jack Kinney';"}
{"sample_id": 4686, "db_id": "disney", "gold_sql": "SELECT T1.movie_title, T1.song FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Ron Clements'", "pred_sql": "SELECT characters.movie_title, round.song \nFROM characters \nJOIN director ON characters.movie_title = director.name \nJOIN round ON characters.movie_title = round.movie_title \nWHERE director.director = 'Ron Clements';"}
{"sample_id": 4639, "db_id": "disney", "gold_sql": "SELECT T1.hero FROM characters AS T1 INNER JOIN movies_total_gross AS T2 ON T2.movie_title = T1.movie_title WHERE T2.total_gross = '$222,527,828'", "pred_sql": "SELECT hero FROM characters JOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title WHERE total_gross = '222527828';"}
{"sample_id": 4714, "db_id": "disney", "gold_sql": "SELECT T2.hero, T1.\"voice-actor\" FROM \"voice-actors\" AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title INNER JOIN director AS T3 ON T3.name = T2.movie_title WHERE T3.director = 'Wolfgang Reitherman'", "pred_sql": "SELECT va.voice_actor \nFROM voice-actors va \nJOIN characters c ON va.movie = c.movie_title \nJOIN director d ON c.movie_title = d.name \nWHERE d.director = 'Wolfgang Reitherman';"}
{"sample_id": 4698, "db_id": "disney", "gold_sql": "SELECT T2.name, T2.director FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE SUBSTR(T1.release_date, LENGTH(T1.release_date) - 3, LENGTH(T1.release_date)) BETWEEN '2001' AND '2005' AND CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) / ( SELECT SUM(CAST(REPLACE(trim(T3.total_gross, '$'), ',', '') AS REAL)) / COUNT(T3.movie_title) AS avg_gross FROM movies_total_gross AS T3 INNER JOIN director AS T4 ON T3.movie_title = T4.name WHERE SUBSTR(T3.release_date, LENGTH(T3.release_date) - 3, LENGTH(T3.release_date)) BETWEEN '2001' AND '2005' ) - 1 > 1", "pred_sql": "SELECT mt.movie_title, d.director \nFROM movies_total_gross mt \nJOIN director d ON mt.movie_title = d.name \nWHERE mt.release_date BETWEEN '2001-01-01' AND '2005-12-31' \nAND mt.total_gross > (SELECT AVG(total_gross) * 1.0 * 2 FROM movies_total_gross WHERE release_date BETWEEN '2001-01-01' AND '2005-12-31')"}
{"sample_id": 4731, "db_id": "disney", "gold_sql": "SELECT SUM(CASE WHEN movie_title = 'Cars' THEN CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL) ELSE 0 END), SUM(CASE WHEN movie_title = 'Cars 2' THEN CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL) ELSE 0 END) FROM movies_total_gross", "pred_sql": "SELECT movie_title, inflation_adjusted_gross FROM movies_total_gross WHERE movie_title IN ('Cars', 'Cars 2');"}
{"sample_id": 4671, "db_id": "disney", "gold_sql": "SELECT DISTINCT T2.character FROM movies_total_gross AS T1 INNER JOIN \"voice-actors\" AS T2 ON T1.movie_title = T2.movie WHERE T1.MPAA_rating = 'PG'", "pred_sql": "SELECT characters.hero FROM characters JOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title WHERE movies_total_gross.mpaa_rating = 'PG';"}
{"sample_id": 4661, "db_id": "disney", "gold_sql": "SELECT COUNT(movie_title) FROM \"movies_total_gross\" WHERE genre = 'Horror'", "pred_sql": "SELECT COUNT(*) FROM movies_total_gross WHERE genre = 'horror';"}
{"sample_id": 4700, "db_id": "disney", "gold_sql": "SELECT COUNT(\"voice-actor\") FROM \"voice-actors\" WHERE movie = 'Aladdin'", "pred_sql": "SELECT COUNT(*) AS voice_actor_count FROM voice-actors WHERE movie = 'Aladdin';"}
{"sample_id": 4721, "db_id": "disney", "gold_sql": "SELECT villian FROM characters ORDER BY SUBSTR(release_date, LENGTH(release_date) - 1, LENGTH(release_date)) DESC LIMIT 1", "pred_sql": "SELECT villian FROM round WHERE villian IS NOT NULL ORDER BY release_date ASC LIMIT 1;"}
{"sample_id": 4676, "db_id": "disney", "gold_sql": "SELECT T2.movie_title FROM \"voice-actors\" AS T1 INNER JOIN movies_total_gross AS T2 ON T2.movie_title = T1.movie WHERE T1.\"voice-actor\" = 'Jim Cummings' ORDER BY CAST(REPLACE(trim(T2.total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1", "pred_sql": "SELECT mtg.total_gross FROM voice-actors va JOIN characters c ON va.movie = c.movie_title JOIN movies_total_gross mtg ON c.movie_title = mtg.movie_title WHERE va.voice_actor = 'Jim Cummings';"}
{"sample_id": 4693, "db_id": "disney", "gold_sql": "SELECT T2.director FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name ORDER BY CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1", "pred_sql": "SELECT director, MAX(total_gross) AS max_gross FROM movies_total_gross JOIN director ON movies_total_gross.movie_title = director.name GROUP BY director ORDER BY max_gross DESC LIMIT 1;"}
{"sample_id": 4648, "db_id": "disney", "gold_sql": "SELECT T1.movie_title FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title WHERE T2.hero = 'Donald Duck' ORDER BY CAST(REPLACE(SUBSTR(total_gross, 2), ',', '') AS REAL) DESC LIMIT 1", "pred_sql": "SELECT ct.movie_title, mt.total_gross FROM characters ct JOIN movies_total_gross mt ON ct.movie_title = mt.movie_title WHERE ct.hero = 'Donald Duck' ORDER BY mt.total_gross DESC LIMIT 1;"}
{"sample_id": 4674, "db_id": "disney", "gold_sql": "SELECT T2.\"voice-actor\" FROM movies_total_gross AS T1 INNER JOIN \"voice-actors\" AS T2 ON T1.movie_title = T2.movie WHERE T1.release_date = 'Nov 24, 2010'", "pred_sql": "SELECT voice-actors.voice-actor FROM voice-actors JOIN characters ON voice-actors.movie = characters.movie_title WHERE characters.release_date = '11/24/2010';"}
{"sample_id": 4717, "db_id": "disney", "gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) > 100000000 THEN T3.director ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T3.director) FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title INNER JOIN director AS T3 ON T1.movie_title = T3.name", "pred_sql": "SELECT COUNT(DISTINCT d.director) * 100.0 / (SELECT COUNT(DISTINCT director) FROM director) AS percentage_of_directors\nFROM director d\nJOIN movies_total_gross mtg ON d.name = mtg.movie_title\nWHERE mtg.total_gross > 100000000;"}
{"sample_id": 4636, "db_id": "disney", "gold_sql": "SELECT movie_title FROM characters WHERE hero = 'Robin Hood'", "pred_sql": "SELECT movie_title FROM characters WHERE hero = 'Robin Hood';"}
{"sample_id": 4728, "db_id": "disney", "gold_sql": "SELECT SUM(CAST(REPLACE(trim(total_gross, '$'), ',', '') AS REAL)) / COUNT(movie_title) FROM movies_total_gross WHERE MPAA_rating = 'PG-13'", "pred_sql": "SELECT AVG(total_gross) AS average_gross\nFROM movies_total_gross\nWHERE mpaa_rating = 'PG-13' AND genre = 'action';"}
{"sample_id": 8568, "db_id": "software_company", "gold_sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Male' AND T1.age >= 30 AND T1.age <= 50 AND T2.INCOME_K >= 2000 AND T2.INCOME_K <= 2300", "pred_sql": "SELECT COUNT(*) AS male_customers_count \nFROM customers \nWHERE sex = 'male' \nAND age BETWEEN 30 AND 50 \nAND geoid IN (\n    SELECT geoid \n    FROM demog \n    WHERE income_k BETWEEN 2000 AND 2300\n);"}
{"sample_id": 8532, "db_id": "software_company", "gold_sql": "SELECT COUNT(ID) FROM Customers WHERE age < 30", "pred_sql": "SELECT COUNT(*) AS total_customers FROM customers WHERE age < 30;"}
{"sample_id": 8544, "db_id": "software_company", "gold_sql": "SELECT T1.MARITAL_STATUS FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.age >= 40 AND T1.age <= 60 ORDER BY T2.INCOME_K DESC LIMIT 1", "pred_sql": "SELECT marital_status FROM customers WHERE age BETWEEN 40 AND 60 AND geoid IN (SELECT geoid FROM demog ORDER BY income_k * inhabitants_k * 12 DESC LIMIT 1)"}
{"sample_id": 8584, "db_id": "software_company", "gold_sql": "SELECT T1.EDUCATIONNUM FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T2.REFID < 10 AND T2.RESPONSE = 'true'", "pred_sql": "SELECT c.educationnum, COUNT(c.id) AS response_count\nFROM customers c\nJOIN mailings1_2 m ON c.id = m.refid\nWHERE m.response = 1 AND c.id < 10\nGROUP BY c.educationnum;"}
{"sample_id": 8548, "db_id": "software_company", "gold_sql": "SELECT T2.INCOME_K, T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID GROUP BY T2.INCOME_K, T2.INHABITANTS_K HAVING T1.age > 0.8 * AVG(T1.age)", "pred_sql": "SELECT d.income_k, d.inhabitants_k \nFROM demog d \nJOIN customers c ON d.geoid = c.geoid \nWHERE c.age > (SELECT AVG(age) * 0.8 FROM customers);"}
{"sample_id": 8522, "db_id": "software_company", "gold_sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T3.INHABITANTS_K > 30 AND T2.RESPONSE = 'true'", "pred_sql": "SELECT COUNT(DISTINCT c.id) AS customer_count\nFROM customers c\nJOIN mailings1_2 m ON c.id = m.refid\nJOIN demog d ON c.geoid = d.geoid\nWHERE m.response = 1 AND d.inhabitants_k > 30\nLIMIT 60000;"}
{"sample_id": 8560, "db_id": "software_company", "gold_sql": "SELECT COUNT(ID) FROM Customers WHERE MARITAL_STATUS = 'Widowed' AND age < 50", "pred_sql": "SELECT COUNT(*) AS total_widowed_customers FROM customers WHERE marital_status = 'Widowed' AND age < 50;"}
{"sample_id": 8534, "db_id": "software_company", "gold_sql": "SELECT COUNT(GEOID) FROM Demog WHERE INHABITANTS_K < 20 AND GEOID >= 20 AND GEOID <= 50", "pred_sql": "SELECT COUNT(*) AS count_below_20_inhabitants FROM demog WHERE geoid BETWEEN 20 AND 50 AND inhabitants_k < 20;"}
{"sample_id": 8513, "db_id": "software_company", "gold_sql": "SELECT COUNT(REFID) custmoer_number FROM Mailings1_2 WHERE RESPONSE = 'true'", "pred_sql": "SELECT COUNT(*) AS true_responses FROM mailings1_2 WHERE response = True LIMIT 60000;"}
{"sample_id": 8555, "db_id": "software_company", "gold_sql": "SELECT COUNT(T2.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Male' AND T2.INCOME_K > 3000 AND T1.age >= 20 AND T1.age <= 29", "pred_sql": "SELECT COUNT(DISTINCT c.id) AS male_customers_in_twenty FROM customers c JOIN demog d ON c.geoid = d.geoid WHERE c.sex = 'male' AND c.age BETWEEN 20 AND 29 AND d.income_k > 3000;"}
{"sample_id": 8573, "db_id": "software_company", "gold_sql": "SELECT DISTINCT T3.INCOME_K, T2.RESPONSE FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.EDUCATIONNUM > 6 AND T1.SEX = 'Male' AND T1.MARITAL_STATUS = 'Divorced'", "pred_sql": "SELECT d.income_k, m.response \nFROM customers c \nJOIN demog d ON c.geoid = d.geoid \nJOIN mailings1_2 m ON c.id = m.refid \nWHERE c.marital_status = 'Divorced' \nAND c.sex = 'Male' \nAND c.educationnum >= 6;"}
{"sample_id": 8511, "db_id": "software_company", "gold_sql": "SELECT COUNT(ID) FROM Customers WHERE age >= 13 AND age <= 19", "pred_sql": "SELECT COUNT(*) AS teenager_count FROM customers WHERE age BETWEEN 13 AND 19;"}
{"sample_id": 8572, "db_id": "software_company", "gold_sql": "SELECT age FROM Customers WHERE GEOID IN ( SELECT GEOID FROM Demog WHERE INHABITANTS_K < 30 ) AND SEX = 'Female'", "pred_sql": "SELECT age FROM customers WHERE sex = 'female' AND geoid IN (SELECT geoid FROM demog WHERE inhabitants_k < 30)"}
{"sample_id": 8579, "db_id": "software_company", "gold_sql": "SELECT RESPONSE FROM Mailings1_2 GROUP BY RESPONSE ORDER BY COUNT(RESPONSE) DESC LIMIT 1", "pred_sql": "SELECT COUNT(CASE WHEN response = 1 THEN 1 END) AS actual_responding, COUNT(CASE WHEN response = 0 THEN 1 END) AS not_responding FROM mailings3;"}
{"sample_id": 8575, "db_id": "software_company", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.RESPONSE = 'true' THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.REFID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.OCCUPATION = 'Handlers-cleaners' AND T1.SEX = 'Male'", "pred_sql": "SELECT (COUNT(CASE WHEN m.response = 1 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_true_response\nFROM customers c\nJOIN mailings1_2 m ON c.id = m.refid\nWHERE c.sex = 'male' AND c.occupation = 'handlers or cleaners';"}
{"sample_id": 2484, "db_id": "shooting", "gold_sql": "SELECT SUM(race = 'B') - SUM(race = 'W') FROM subjects WHERE gender = 'F'", "pred_sql": "SELECT COUNT(*) AS black_female_count FROM subjects WHERE race = 'Black' AND gender = 'F'; SELECT COUNT(*) AS white_female_count FROM subjects WHERE race = 'White' AND gender = 'F'; SELECT (SELECT COUNT(*) FROM subjects WHERE race = 'Black' AND gender = 'F') - (SELECT COUNT(*) FROM subjects WHERE race = 'White' AND gender = 'F') AS difference;"}
{"sample_id": 2472, "db_id": "shooting", "gold_sql": "SELECT T2.last_name, T2.gender, T2.race, T2.case_number FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T1.subject_statuses = 'Deceased'", "pred_sql": "SELECT subjects.last_name, subjects.gender, subjects.race, subjects.case_number \nFROM subjects \nJOIN incidents ON subjects.case_number = incidents.case_number \nWHERE incidents.subject_statuses = 'deceased';"}
{"sample_id": 2487, "db_id": "shooting", "gold_sql": "SELECT T1.case_number, T3.race, T3.gender FROM incidents AS T1 INNER JOIN officers AS T2 ON T1.case_number = T2.case_number INNER JOIN subjects AS T3 ON T1.case_number = T3.case_number WHERE T2.first_name = 'Fredirick' AND T2.last_name = 'Ruben'", "pred_sql": "SELECT s.race, s.gender FROM incidents i JOIN officers o ON i.case_number = o.case_number JOIN subjects s ON i.case_number = s.case_number WHERE o.full_name = 'Ruben Fredirick' AND i.subject_statuses LIKE '%near-death%';"}
{"sample_id": 2488, "db_id": "shooting", "gold_sql": "SELECT CAST(SUM(T2.gender = 'M') AS REAL) * 100 / COUNT(T1.case_number) FROM incidents T1 INNER JOIN officers T2 ON T1.case_number = T2.case_number WHERE T1.subject_statuses = 'Injured'", "pred_sql": "SELECT COUNT(DISTINCT o.case_number) * 1.0 / (SELECT COUNT(*) FROM officers) AS male_officer_proportion\nFROM officers o\nJOIN incidents i ON o.case_number = i.case_number\nWHERE o.gender = 'M' AND i.subject_statuses LIKE '%injured%';"}
{"sample_id": 545, "db_id": "movies_4", "gold_sql": "SELECT T1.person_name FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T2.job = 'Camera Supervisor'", "pred_sql": "SELECT person.person_name FROM movie_crew JOIN person ON movie_crew.person_id = person.person_id WHERE movie_crew.job = 'Camera Supervisor';"}
{"sample_id": 504, "db_id": "movies_4", "gold_sql": "SELECT T2.company_id FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id WHERE CAST(STRFTIME('%Y', T1.release_date) AS INT) = 1916", "pred_sql": "SELECT DISTINCT pc.company_id \nFROM production_company pc \nJOIN movie_company mc ON pc.company_id = mc.company_id \nJOIN movie m ON mc.movie_id = m.movie_id \nWHERE strftime('%Y', m.release_date) = '1916';"}
{"sample_id": 550, "db_id": "movies_4", "gold_sql": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.title = 'Forrest Gump'", "pred_sql": "SELECT g.genre_name FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE m.title = 'Forrest Gump';"}
{"sample_id": 519, "db_id": "movies_4", "gold_sql": "SELECT keyword_name FROM keyword WHERE keyword_name LIKE '%christmas%'", "pred_sql": "SELECT keyword_name FROM keyword WHERE keyword_name LIKE '%christmas%';"}
{"sample_id": 560, "db_id": "movies_4", "gold_sql": "SELECT COUNT(T2.cast_order) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T3.gender_id = T2.gender_id WHERE T3.gender = 'Male' OR T3.gender = 'Female' AND T1.title = 'Pirates of the Caribbean: At World''s End' AND T2.cast_order = ( SELECT MIN(T2.cast_order) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T3.gender_id = T2.gender_id WHERE T3.gender = 'Male' OR T3.gender = 'Female' AND T1.title = 'Pirates of the Caribbean: At World''s End' )", "pred_sql": "SELECT COUNT(*) AS main_actor_count \nFROM movie_cast mc \nJOIN movie m ON mc.movie_id = m.movie_id \nWHERE m.title = 'Pirates of the Caribbean: At World''s End' \nAND mc.cast_order = '1';"}
{"sample_id": 546, "db_id": "movies_4", "gold_sql": "SELECT DISTINCT T2.job FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Sally Menke'", "pred_sql": "SELECT job FROM movie_crew JOIN person ON movie_crew.person_id = person.person_id WHERE person.person_name = 'Sally Menke';"}
{"sample_id": 548, "db_id": "movies_4", "gold_sql": "SELECT T1.title, T1.revenue FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T2.company_id = T3.company_id WHERE T3.company_name = 'DreamWorks'", "pred_sql": "SELECT m.title, m.revenue \nFROM movie m \nJOIN movie_company mc ON m.movie_id = mc.movie_id \nJOIN production_company pc ON mc.company_id = pc.company_id \nWHERE pc.company_name = 'DreamWorks';"}
{"sample_id": 501, "db_id": "movies_4", "gold_sql": "SELECT popularity FROM movie ORDER BY vote_COUNT DESC LIMIT 1", "pred_sql": "SELECT title, popularity FROM movie ORDER BY vote_count DESC LIMIT 1;"}
{"sample_id": 454, "db_id": "movies_4", "gold_sql": "SELECT COUNT(T1.movie_id) FROM movie_genres AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.genre_id WHERE T2.genre_name = 'Horror'", "pred_sql": "SELECT COUNT(*) AS horror_movie_count FROM movie INNER JOIN movie_genres ON movie.movie_id = movie_genres.movie_id INNER JOIN genre ON movie_genres.genre_id = genre.genre_id WHERE genre.genre_name = 'Horror';"}
{"sample_id": 537, "db_id": "movies_4", "gold_sql": "SELECT title FROM movie WHERE CAST(STRFTIME('%Y', release_date) AS INT) = 1945", "pred_sql": "SELECT * FROM movie WHERE release_date LIKE '1945%';"}
{"sample_id": 556, "db_id": "movies_4", "gold_sql": "SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.title = 'Finding Nemo'", "pred_sql": "SELECT keyword.keyword_name FROM movie_keywords JOIN movie ON movie_keywords.movie_id = movie.movie_id JOIN keyword ON movie_keywords.keyword_id = keyword.keyword_id WHERE movie.title = 'Finding Nemo';"}
{"sample_id": 485, "db_id": "movies_4", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Male' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS RATIO , COUNT(CASE WHEN T3.gender = 'Unspecified' THEN 1 ELSE NULL END) AS UNGENDERS FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Iron Man'", "pred_sql": "SELECT\n    SUM(CASE WHEN mc.gender_id = 'male' THEN 1 ELSE 0 END) AS male_count,\n    SUM(CASE WHEN mc.gender_id = 'female' THEN 1 ELSE 0 END) AS female_count,\n    SUM(CASE WHEN mc.gender_id = 'unspecified' THEN 1 ELSE 0 END) AS unspecified_count\nFROM\n    movie_cast mc\nJOIN\n    movie m ON mc.movie_id = m.movie_id\nWHERE\n    m.title = 'Iron Man';"}
{"sample_id": 436, "db_id": "movies_4", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Male' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T3.gender) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Bride Wars'", "pred_sql": "SELECT (COUNT(CASE WHEN g.gender = 'male' THEN 1 END) * 100.0 / COUNT(*)) AS male_percentage\nFROM movie_cast mc\nJOIN movie m ON mc.movie_id = m.movie_id\nJOIN gender g ON mc.gender_id = g.gender_id\nWHERE m.title = 'Bride Wars';"}
{"sample_id": 464, "db_id": "movies_4", "gold_sql": "SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Uma Thurman' AND T1.release_date BETWEEN '1990-01-01' AND '2000-12-31'", "pred_sql": "SELECT COUNT(DISTINCT m.movie_id) AS film_count\nFROM movie m\nJOIN movie_cast mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nWHERE p.person_name = 'Uma Thurman'\nAND m.release_date BETWEEN '1990-01-02' AND '2000-12-30';"}
{"sample_id": 493, "db_id": "movies_4", "gold_sql": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id ORDER BY T1.revenue LIMIT 1", "pred_sql": "SELECT g.genre_name \nFROM movie AS m \nJOIN movie_genres AS mg ON m.movie_id = mg.movie_id \nJOIN genre AS g ON mg.genre_id = g.genre_id \nWHERE m.revenue = (SELECT MIN(revenue) FROM movie)"}
{"sample_id": 508, "db_id": "movies_4", "gold_sql": "SELECT T2.language_id FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Walk the Line'", "pred_sql": "SELECT ml.language_id FROM movie_languages ml JOIN movie m ON ml.movie_id = m.movie_id WHERE m.title = 'Walk the Line';"}
{"sample_id": 458, "db_id": "movies_4", "gold_sql": "SELECT person_id, character_name FROM movie_cast WHERE movie_id = 285 AND cast_order BETWEEN 1 AND 10", "pred_sql": "SELECT person_id, character_name FROM movie_cast WHERE movie_id = '285' AND cast_order BETWEEN '1' AND '10';"}
{"sample_id": 530, "db_id": "movies_4", "gold_sql": "SELECT T1.character_name FROM movie_cast AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.gender_id WHERE T2.gender = 'Unspecified'", "pred_sql": "SELECT character_name FROM movie_cast WHERE gender_id = (SELECT gender_id FROM gender WHERE gender = 'unspecified')"}
{"sample_id": 433, "db_id": "movies_4", "gold_sql": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Cruel and Unusual Films' ORDER BY T3.popularity DESC LIMIT 1", "pred_sql": "SELECT m.title, m.popularity \nFROM movie m \nJOIN movie_company mc ON m.movie_id = mc.movie_id \nJOIN production_company pc ON mc.company_id = pc.company_id \nWHERE pc.company_name = 'Cruel and Unusual Films' \nORDER BY m.popularity DESC \nLIMIT 1;"}
{"sample_id": 483, "db_id": "movies_4", "gold_sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Mad Max: Fury Road' LIMIT 10", "pred_sql": "SELECT mc.person_id, mc.job \nFROM movie_crew mc \nJOIN movie m ON mc.movie_id = m.movie_id \nWHERE m.title = 'Mad Max: Fury Road' \nLIMIT 10;"}
{"sample_id": 474, "db_id": "movies_4", "gold_sql": "SELECT T2.gender FROM movie_cast AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.gender_id WHERE T1.character_name = 'USAF Master Sgt. Epps'", "pred_sql": "SELECT g.gender FROM movie_cast mc JOIN gender g ON mc.gender_id = g.gender_id WHERE mc.character_name = 'USAF Master Sgt. Epps';"}
{"sample_id": 500, "db_id": "movies_4", "gold_sql": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'civil war'", "pred_sql": "SELECT AVG(m.revenue) AS average_revenue\nFROM movie m\nJOIN movie_keywords mk ON m.movie_id = mk.movie_id\nWHERE mk.keyword_id = (SELECT keyword_id FROM keyword WHERE keyword_name = 'civil war');"}
{"sample_id": 429, "db_id": "movies_4", "gold_sql": "SELECT T1.keyword_name FROM keyword AS T1 INNER JOIN movie_keywords AS T2 ON T1.keyword_id = T2.keyword_id GROUP BY T1.keyword_name ORDER BY COUNT(T1.keyword_name) DESC LIMIT 1", "pred_sql": "SELECT keyword.keyword_name, COUNT(movie_keywords.keyword_id) AS keyword_count\nFROM movie_keywords\nJOIN keyword ON movie_keywords.keyword_id = keyword.keyword_id\nGROUP BY keyword.keyword_name\nORDER BY keyword_count DESC\nLIMIT 1;"}
{"sample_id": 476, "db_id": "movies_4", "gold_sql": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Radiant Film GmbH'", "pred_sql": "SELECT movie.title FROM movie JOIN movie_company ON movie.movie_id = movie_company.movie_id JOIN production_company ON movie_company.company_id = production_company.company_id WHERE production_company.company_name = 'Radiant Film GmbH';"}
{"sample_id": 557, "db_id": "movies_4", "gold_sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Horror' AND T1.vote_average > 7", "pred_sql": "SELECT title FROM movie JOIN movie_genres ON movie.movie_id = movie_genres.movie_id JOIN genre ON movie_genres.genre_id = genre.genre_id WHERE genre.genre_name = 'Horror' AND movie.vote_average > 7;"}
{"sample_id": 471, "db_id": "movies_4", "gold_sql": "SELECT AVG(CASE WHEN T3.COUNTry_name = 'United States of America' THEN T1.revenue END) - AVG(CASE WHEN T3.COUNTry_name = 'India' THEN T1.revenue END) AS CALCULATE FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2016", "pred_sql": "SELECT AVG(CASE WHEN pc.country_id = 'IN' THEN m.revenue END) AS avg_indian_revenue, AVG(CASE WHEN pc.country_id = 'US' THEN m.revenue END) AS avg_american_revenue, (AVG(CASE WHEN pc.country_id = 'IN' THEN m.revenue END) - AVG(CASE WHEN pc.country_id = 'US' THEN m.revenue END)) AS revenue_gap\nFROM movie m\nJOIN production_country pc ON m.movie_id = pc.movie_id\nWHERE m.release_date LIKE '2016%'"}
{"sample_id": 510, "db_id": "movies_4", "gold_sql": "SELECT T3.language_name FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T1.title LIKE 'C%era una volta il West'", "pred_sql": "SELECT l.language_name \nFROM movie m \nJOIN movie_languages ml ON m.movie_id = ml.movie_id \nJOIN language l ON ml.language_id = l.language_id \nWHERE m.title = \"C'era una volta il West\";"}
{"sample_id": 468, "db_id": "movies_4", "gold_sql": "SELECT T1.title, T1.revenue, T3.COUNTry_name FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id ORDER BY T1.budget DESC LIMIT 1", "pred_sql": "SELECT m.title, m.budget, m.revenue, c.country_name \nFROM movie m \nJOIN production_country pc ON m.movie_id = pc.movie_id \nJOIN country c ON pc.country_id = c.country_id \nORDER BY CAST(m.budget AS INTEGER) DESC \nLIMIT 1;"}
{"sample_id": 423, "db_id": "movies_4", "gold_sql": "SELECT T2.job FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'David Rubin' AND T1.title = 'Days of Thunder'", "pred_sql": "SELECT mc.job FROM movie_crew mc JOIN movie m ON mc.movie_id = m.movie_id JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'David Rubin' AND m.title = 'Days of Thunder';"}
{"sample_id": 541, "db_id": "movies_4", "gold_sql": "SELECT T1.release_date, T3.language_name FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id ORDER BY T1.popularity DESC LIMIT 1", "pred_sql": "SELECT release_date, language_name FROM movie JOIN movie_languages ON movie.movie_id = movie_languages.movie_id JOIN language ON movie_languages.language_id = language.language_id ORDER BY popularity DESC LIMIT 1;"}
{"sample_id": 549, "db_id": "movies_4", "gold_sql": "SELECT COUNT(T2.movie_id) FROM COUNTry AS T1 INNER JOIN production_COUNTry AS T2 ON T1.COUNTry_id = T2.COUNTry_id WHERE T1.COUNTry_name = 'Canada'", "pred_sql": "SELECT COUNT(*) AS number_of_movies FROM movie INNER JOIN production_country ON movie.movie_id = production_country.movie_id INNER JOIN country ON production_country.country_id = country.country_id WHERE country.country_name = 'Canada';"}
{"sample_id": 3475, "db_id": "video_games", "gold_sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = 'Grand Theft Auto V'", "pred_sql": "SELECT g.genre_id, ge.genre_name FROM game g JOIN genre ge ON g.genre_id = ge.id WHERE g.game_name = 'Grand Theft Auto V';"}
{"sample_id": 3363, "db_id": "video_games", "gold_sql": "SELECT AVG(T2.num_sales) * 100000 AS avg_japan FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Japan'", "pred_sql": "SELECT AVG(num_sales * 100000) AS average_sales FROM region_sales JOIN region ON region_sales.region_id = region.id WHERE region.region_name = 'Japan';"}
{"sample_id": 3429, "db_id": "video_games", "gold_sql": "SELECT COUNT(*) FROM ( SELECT T.game_name FROM game AS T WHERE T.game_name LIKE '%Box%' )", "pred_sql": "SELECT COUNT(*) AS game_count FROM game WHERE game_name LIKE '%Box%';"}
{"sample_id": 3443, "db_id": "video_games", "gold_sql": "SELECT T5.region_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN region_sales AS T4 ON T3.id = T4.game_platform_id INNER JOIN region AS T5 ON T4.region_id = T5.id WHERE T1.game_name = 'Pengo'", "pred_sql": "SELECT region.region_name, region_sales.num_sales \nFROM region \nJOIN region_sales ON region.id = region_sales.region_id \nJOIN game_platform ON region_sales.game_platform_id = game_platform.id \nJOIN game ON game_platform.game_publisher_id = game_publisher.id \nWHERE game.game_name = 'Pengo';"}
{"sample_id": 3439, "db_id": "video_games", "gold_sql": "SELECT T.region_name FROM ( SELECT T1.platform_name, T4.region_name, SUM(T3.num_sales) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN region_sales AS T3 ON T1.id = T3.game_platform_id INNER JOIN region AS T4 ON T3.region_id = T4.id GROUP BY T1.platform_name, T4.region_name ORDER BY SUM(T3.num_sales) DESC LIMIT 1 ) t", "pred_sql": "SELECT r.region_name, p.platform_name, SUM(rs.num_sales) AS total_sales\nFROM region r\nJOIN region_sales rs ON r.id = rs.region_id\nJOIN game_platform gp ON rs.game_platform_id = gp.id\nJOIN platform p ON gp.platform_id = p.id\nGROUP BY r.region_name, p.platform_name\nORDER BY r.region_name, total_sales DESC;"}
{"sample_id": 3354, "db_id": "video_games", "gold_sql": "SELECT T3.game_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.publisher_name = '505 Games'", "pred_sql": "SELECT game.game_name FROM game JOIN game_publisher ON game.id = game_publisher.game_id JOIN publisher ON game_publisher.publisher_id = publisher.id WHERE publisher.publisher_name = '505 Games';"}
{"sample_id": 3479, "db_id": "video_games", "gold_sql": "SELECT T4.platform_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.game_name = 'Final Fantasy XIII-2'", "pred_sql": "SELECT platform.platform_name \nFROM game \nJOIN game_platform ON game.id = game_platform.game_publisher_id \nJOIN platform ON game_platform.platform_id = platform.id \nWHERE game.game_name = 'Final Fantasy XIII-2';"}
{"sample_id": 3410, "db_id": "video_games", "gold_sql": "SELECT COUNT(DISTINCT T1.publisher_id) FROM game_publisher AS T1 INNER JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.game_name LIKE 'Marvel%'", "pred_sql": "SELECT COUNT(DISTINCT publisher.id) AS different_publishers\nFROM publisher\nJOIN game_publisher ON publisher.id = game_publisher.publisher_id\nJOIN game ON game_publisher.game_id = game.id\nWHERE game.game_name LIKE 'Marvel%';"}
{"sample_id": 3451, "db_id": "video_games", "gold_sql": "SELECT T2.platform_name FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id INNER JOIN game_publisher AS T3 ON T1.game_publisher_id = T3.id INNER JOIN game AS T4 ON T3.game_id = T4.id WHERE T4.game_name = '3Xtreme'", "pred_sql": "SELECT platform.platform_name FROM game_platform JOIN game ON game_platform.game_publisher_id = game.id JOIN platform ON game_platform.platform_id = platform.id WHERE game.id = (SELECT game.id FROM game WHERE game.game_name = '3Xtreme')"}
{"sample_id": 3369, "db_id": "video_games", "gold_sql": "SELECT T3.release_year FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id WHERE T2.num_sales * 100000 = 350000 AND T1.region_name = 'North America'", "pred_sql": "SELECT gp.release_year FROM region r JOIN region_sales rs ON r.id = rs.region_id JOIN game_platform gp ON rs.game_platform_id = gp.id WHERE r.region_name = 'North America' AND rs.num_sales = 3;"}
{"sample_id": 3485, "db_id": "video_games", "gold_sql": "SELECT SUM(T.num_sales) * 100000 FROM region_sales AS T WHERE T.game_platform_id = 66", "pred_sql": "SELECT SUM(num_sales) AS total_sales FROM region_sales WHERE game_platform_id = '66';"}
{"sample_id": 3385, "db_id": "video_games", "gold_sql": "SELECT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = 'Chronicles of the Sword'", "pred_sql": "SELECT publisher.publisher_name FROM publisher JOIN game_publisher ON publisher.id = game_publisher.publisher_id JOIN game ON game_publisher.game_id = game.id WHERE game.game_name = 'Chronicles of the Sword';"}
{"sample_id": 3338, "db_id": "video_games", "gold_sql": "SELECT T2.num_sales * 100000 FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Europe' AND T2.game_platform_id = 3871", "pred_sql": "SELECT SUM(num_sales) AS total_sales FROM region_sales WHERE region_id = (SELECT id FROM region WHERE region_name = 'Europe') AND game_platform_id = '3871';"}
{"sample_id": 3404, "db_id": "video_games", "gold_sql": "SELECT T1.genre_name FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id WHERE T2.game_name = 'Mario vs. Donkey Kong'", "pred_sql": "SELECT g.genre_id, ge.genre_name FROM game g JOIN genre ge ON g.genre_id = ge.id WHERE g.game_name = 'Mario vs. Donkey Kong';"}
{"sample_id": 3414, "db_id": "video_games", "gold_sql": "SELECT COUNT(T.id) FROM publisher AS T WHERE T.publisher_name LIKE '%Interactive%'", "pred_sql": "SELECT COUNT(*) AS publisher_count FROM publisher WHERE publisher_name LIKE '%Interactive%';"}
{"sample_id": 3336, "db_id": "video_games", "gold_sql": "SELECT COUNT(CASE WHEN T1.genre_name = 'Sports' THEN T2.id ELSE NULL END) - COUNT(CASE WHEN T1.genre_name = 'Simulation' THEN T2.id ELSE NULL END) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id", "pred_sql": "SELECT (SELECT COUNT(*) FROM game WHERE genre_id = (SELECT id FROM genre WHERE genre_name = 'sports')) - (SELECT COUNT(*) FROM game WHERE genre_id = (SELECT id FROM genre WHERE genre_name = 'simulation')) AS difference;"}
{"sample_id": 3487, "db_id": "video_games", "gold_sql": "SELECT T4.game_name FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id INNER JOIN game AS T4 ON T3.game_id = T4.id WHERE T1.platform_name = 'Wii'", "pred_sql": "SELECT game.game_name FROM game JOIN game_platform ON game.id = game_platform.game_publisher_id JOIN platform ON game_platform.platform_id = platform.id WHERE platform.platform_name = 'Wii';"}
{"sample_id": 3379, "db_id": "video_games", "gold_sql": "SELECT T.genre_name FROM genre AS T WHERE T.id = 3", "pred_sql": "SELECT genre_name FROM genre WHERE id = '3';"}
{"sample_id": 3425, "db_id": "video_games", "gold_sql": "SELECT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = 'Overwatch'", "pred_sql": "SELECT publisher.publisher_name FROM publisher JOIN game_publisher ON publisher.id = game_publisher.publisher_id JOIN game ON game_publisher.game_id = game.id WHERE game.game_name = 'Overwatch';"}
{"sample_id": 3405, "db_id": "video_games", "gold_sql": "SELECT T.publisher_name FROM ( SELECT T1.publisher_name, COUNT(DISTINCT T2.game_id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id GROUP BY T1.publisher_name ORDER BY COUNT(DISTINCT T2.game_id) DESC LIMIT 1 ) t", "pred_sql": "SELECT publisher.publisher_name, COUNT(game.id) AS game_count \nFROM publisher \nJOIN game_publisher ON publisher.id = game_publisher.publisher_id \nJOIN game ON game_publisher.game_id = game.id \nGROUP BY publisher.publisher_name \nORDER BY game_count DESC \nLIMIT 1;"}
{"sample_id": 3413, "db_id": "video_games", "gold_sql": "SELECT T1.release_year FROM ( SELECT T.release_year, COUNT(id) FROM game_platform AS T GROUP BY T.release_year ORDER BY COUNT(T.id) DESC LIMIT 1 ) T1", "pred_sql": "SELECT release_year, COUNT(*) AS num_releases FROM game_platform GROUP BY release_year ORDER BY num_releases DESC LIMIT 1;"}
{"sample_id": 3327, "db_id": "video_games", "gold_sql": "SELECT genre_id FROM ( SELECT T.genre_id, COUNT(T.id) FROM game AS T GROUP BY T.genre_id ORDER BY COUNT(T.id) DESC LIMIT 1 )", "pred_sql": "SELECT genre.id FROM genre JOIN game ON genre.id = game.genre_id GROUP BY genre.id ORDER BY COUNT(game.id) DESC LIMIT 1;"}
{"sample_id": 3472, "db_id": "video_games", "gold_sql": "SELECT COUNT(CASE WHEN T2.platform_name = 'PS3' THEN T1.game_publisher_id ELSE NULL END) - COUNT(CASE WHEN T2.platform_name = 'X360' THEN T1.game_publisher_id ELSE NULL END) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id", "pred_sql": "SELECT COUNT(DISTINCT gp.publisher_id) AS num_publishers, p.platform_name FROM game_platform gp JOIN game_publisher gpub ON gp.game_publisher_id = gpub.id JOIN platform p ON gp.platform_id = p.id WHERE p.platform_name IN ('PS3', 'X360') GROUP BY p.platform_name;"}
{"sample_id": 3344, "db_id": "video_games", "gold_sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = 'Advent Rising'", "pred_sql": "SELECT g.genre_name FROM game AS g JOIN genre AS ge ON g.genre_id = ge.id WHERE g.game_name = 'Advent Rising';"}
{"sample_id": 3329, "db_id": "video_games", "gold_sql": "SELECT COUNT(DISTINCT T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T1.platform_name = 'X360' AND T2.release_year = 2010", "pred_sql": "SELECT COUNT(g.id) AS number_of_games FROM game g JOIN game_platform gp ON g.id = gp.game_publisher_id JOIN platform p ON gp.platform_id = p.id WHERE p.platform_name = 'X360' AND gp.release_year = '2010';"}
{"sample_id": 3496, "db_id": "video_games", "gold_sql": "SELECT T1.game_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Strategy'", "pred_sql": "SELECT game.game_name FROM game JOIN genre ON game.genre_id = genre.id WHERE genre.genre_name = 'strategy';"}
{"sample_id": 3355, "db_id": "video_games", "gold_sql": "SELECT T.genre_id FROM game AS T WHERE T.game_name = '25 to Life'", "pred_sql": "SELECT genre_id FROM game WHERE game_name = '25 to Life';"}
{"sample_id": 3368, "db_id": "video_games", "gold_sql": "SELECT T.publisher_name FROM ( SELECT T5.publisher_name, SUM(T2.num_sales) * 100000 FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN publisher AS T5 ON T4.publisher_id = T5.id WHERE T1.region_name = 'North America' GROUP BY T5.publisher_name ORDER BY SUM(T2.num_sales) * 100000 DESC LIMIT 1 ) t", "pred_sql": "SELECT publisher.publisher_name FROM publisher JOIN game_publisher ON publisher.id = game_publisher.publisher_id JOIN game_platform ON game_publisher.game_id = game_platform.game_publisher_id JOIN region_sales ON game_platform.id = region_sales.game_platform_id JOIN region ON region_sales.region_id = region.id WHERE region.region_name = 'North America' ORDER BY region_sales.num_sales DESC LIMIT 1;"}
{"sample_id": 3407, "db_id": "video_games", "gold_sql": "SELECT T2.release_year FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id WHERE T1.platform_name = 'WiiU' ORDER BY T2.release_year DESC LIMIT 1", "pred_sql": "SELECT DISTINCT gp.release_year \nFROM game_platform gp \nJOIN platform p ON gp.platform_id = p.id \nWHERE p.platform_name = 'WiiU';"}
{"sample_id": 3351, "db_id": "video_games", "gold_sql": "SELECT T.platform_name FROM ( SELECT T4.platform_name, SUM(T2.num_sales) FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.region_name = 'Europe' ORDER BY T2.num_sales DESC LIMIT 1 ) t", "pred_sql": "SELECT platform.platform_name, SUM(region_sales.num_sales) AS total_sales\nFROM region_sales\nJOIN game_platform ON region_sales.game_platform_id = game_platform.id\nJOIN platform ON game_platform.platform_id = platform.id\nJOIN region ON region_sales.region_id = region.id\nWHERE region.region_name = 'Europe'\nGROUP BY platform.platform_name\nORDER BY total_sales DESC\nLIMIT 1;"}
{"sample_id": 3361, "db_id": "video_games", "gold_sql": "SELECT DISTINCT T1.platform_name FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id WHERE T2.release_year = 2016", "pred_sql": "SELECT platform.platform_name FROM platform JOIN game_platform ON platform.id = game_platform.platform_id JOIN game_publisher ON game_platform.game_publisher_id = game_publisher.id JOIN game ON game_publisher.game_id = game.id WHERE game_platform.release_year = '2016';"}
{"sample_id": 3371, "db_id": "video_games", "gold_sql": "SELECT T2.publisher_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.game_id = 75", "pred_sql": "SELECT publisher.publisher_name FROM publisher JOIN game_publisher ON publisher.id = game_publisher.publisher_id WHERE game_publisher.game_id = 75;"}
{"sample_id": 3318, "db_id": "video_games", "gold_sql": "SELECT DISTINCT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T4.genre_name = 'Puzzle'", "pred_sql": "SELECT publisher.publisher_name FROM publisher JOIN game_publisher ON publisher.id = game_publisher.publisher_id JOIN game ON game_publisher.game_id = game.id JOIN genre ON game.genre_id = genre.id WHERE genre.genre_name = 'puzzle';"}
{"sample_id": 3387, "db_id": "video_games", "gold_sql": "SELECT T.game_platform_id FROM ( SELECT T1.game_platform_id, SUM(T1.num_sales) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id WHERE T2.region_name = 'Europe' GROUP BY T1.game_platform_id ORDER BY SUM(T1.num_sales) DESC LIMIT 1 ) t", "pred_sql": "SELECT gp.platform_id FROM region_sales rs JOIN game_platform gp ON rs.game_platform_id = gp.id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Europe' ORDER BY rs.num_sales DESC LIMIT 1;"}
{"sample_id": 3497, "db_id": "video_games", "gold_sql": "SELECT T3.platform_name FROM game_publisher AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.game_publisher_id INNER JOIN platform AS T3 ON T2.platform_id = T3.id WHERE T1.game_id = 178", "pred_sql": "SELECT platform.platform_name FROM game_platform JOIN platform ON game_platform.platform_id = platform.id WHERE game_platform.game_publisher_id = (SELECT game_publisher.id FROM game_publisher JOIN game ON game_publisher.game_id = game.id WHERE game.id = 178);"}
{"sample_id": 3346, "db_id": "video_games", "gold_sql": "SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T2.publisher_name ORDER BY COUNT(DISTINCT T1.game_id) DESC LIMIT 1 ) t", "pred_sql": "SELECT publisher.publisher_name, COUNT(game.id) AS game_count \nFROM publisher \nJOIN game_publisher ON publisher.id = game_publisher.publisher_id \nJOIN game ON game_publisher.game_id = game.id \nGROUP BY publisher.publisher_name \nORDER BY game_count DESC \nLIMIT 1;"}
{"sample_id": 3400, "db_id": "video_games", "gold_sql": "SELECT T1.publisher_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = 'Prism: Light the Way'", "pred_sql": "SELECT publisher.publisher_name FROM game JOIN game_publisher ON game.id = game_publisher.game_id JOIN publisher ON game_publisher.publisher_id = publisher.id WHERE game.game_name = 'Prism: Light the Way';"}
{"sample_id": 3450, "db_id": "video_games", "gold_sql": "SELECT T2.publisher_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN game AS T3 ON T1.game_id = T3.id WHERE T3.game_name = '2002 FIFA World Cup'", "pred_sql": "SELECT publisher.publisher_name FROM publisher JOIN game_publisher ON publisher.id = game_publisher.publisher_id JOIN game ON game_publisher.game_id = game.id WHERE game.game_name = '2002 FIFA World Cup';"}
{"sample_id": 3437, "db_id": "video_games", "gold_sql": "SELECT T4.genre_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T1.publisher_name = 'Agatsuma Entertainment'", "pred_sql": "SELECT DISTINCT g.genre_id, ge.genre_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id JOIN genre ge ON g.genre_id = ge.id WHERE p.publisher_name = 'Agatsuma Entertainment';"}
{"sample_id": 3399, "db_id": "video_games", "gold_sql": "SELECT T.game_name FROM ( SELECT T2.game_name, COUNT(T2.id) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id GROUP BY T2.game_name ORDER BY COUNT(T2.id) ASC LIMIT 1 ) t", "pred_sql": "SELECT genre_name FROM genre WHERE id = (SELECT genre_id FROM game GROUP BY genre_id ORDER BY COUNT(*) ASC LIMIT 1);"}
{"sample_id": 5347, "db_id": "beer_factory", "gold_sql": "SELECT T1.BrandID, AVG(T1.StarRating) FROM rootbeerreview AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID GROUP BY T3.BrandID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1", "pred_sql": "SELECT rb.brandname, AVG(rr.starrating) AS average_rating\nFROM rootbeer rb\nJOIN rootbeerreview rr ON rb.brandid = rr.brandid\nJOIN transaction t ON rb.rootbeerid = t.rootbeerid\nGROUP BY rb.brandid\nORDER BY COUNT(t.transactionid) DESC\nLIMIT 1;"}
{"sample_id": 5236, "db_id": "beer_factory", "gold_sql": "SELECT Description FROM rootbeerbrand WHERE BrandName = 'A&W'", "pred_sql": "SELECT description FROM rootbeerbrand WHERE brandname = 'A&W';"}
{"sample_id": 5324, "db_id": "beer_factory", "gold_sql": "SELECT DISTINCT T2.BreweryName, T2.BrandName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T1.PurchaseDate < '2015-06-06' AND T1.ContainerType = 'Can'", "pred_sql": "SELECT rb.brandname, rbb.breweryname \nFROM rootbeer r \nJOIN rootbeerbrand rb ON r.brandid = rb.brandid \nWHERE r.containertype = 'canned' \nAND r.purchasedate < '2015-06-06';"}
{"sample_id": 5320, "db_id": "beer_factory", "gold_sql": "SELECT COUNT(BrandID) FROM rootbeer WHERE ContainerType = 'Bottle' AND PurchaseDate BETWEEN '2015-04-03' AND '2015-10-26'", "pred_sql": "SELECT COUNT(DISTINCT rb.brandid) AS brand_count \nFROM rootbeer rb \nJOIN transaction t ON rb.rootbeerid = t.rootbeerid \nWHERE rb.containertype = 'bottle' \nAND t.transactiondate BETWEEN '2015-04-03' AND '2015-10-26';"}
{"sample_id": 5241, "db_id": "beer_factory", "gold_sql": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y-%m', T2.TransactionDate) = '2014-08' GROUP BY T1.CustomerID ORDER BY COUNT(T2.CustomerID) DESC LIMIT 1", "pred_sql": "SELECT first || ' ' || last AS full_name\nFROM customers\nWHERE customerid = (\n    SELECT customerid\n    FROM transaction\n    WHERE strftime('%Y-%m', transactiondate) = '2014-08'\n    GROUP BY customerid\n    ORDER BY COUNT(transactionid) DESC\n    LIMIT 1\n)"}
{"sample_id": 5295, "db_id": "beer_factory", "gold_sql": "SELECT AVG(T2.PurchasePrice) FROM rootbeer AS T1 INNER JOIN \"transaction\" AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T1.ContainerType = 'Bottle' AND T2.PurchasePrice > 2", "pred_sql": "SELECT AVG(purchaseprice) AS average_cost FROM transaction JOIN rootbeer ON transaction.rootbeerid = rootbeer.rootbeerid WHERE purchaseprice > 2 AND rootbeer.containertype = 'bottles';"}
{"sample_id": 5251, "db_id": "beer_factory", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T3.BreweryName = 'AJ Stephans Beverages' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN \"transaction\" AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014%'", "pred_sql": "SELECT (COUNT(CASE WHEN rb.brandname = 'AJ Stephans Beverages' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM rootbeer r\nJOIN rootbeerbrand rb ON r.brandid = rb.brandid\nJOIN transaction t ON r.rootbeerid = t.rootbeerid\nWHERE strftime('%Y', t.transactiondate) = '2014';"}
{"sample_id": 5257, "db_id": "beer_factory", "gold_sql": "SELECT DISTINCT T1.PhoneNumber FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CreditCardNumber = 6011179359005382", "pred_sql": "SELECT phonenumber FROM customers WHERE customerid = (SELECT customerid FROM transaction WHERE creditcardnumber = '6011179359005380')"}
{"sample_id": 5304, "db_id": "beer_factory", "gold_sql": "SELECT DISTINCT T1.First, T1.Last, T1.Email FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN location AS T3 ON T2.LocationID = T3.LocationID WHERE T3.LocationName = 'Sac State Union' AND T2.CreditCardType = 'American Express'", "pred_sql": "SELECT first || ' ' || last AS fullname, email FROM customers c JOIN transaction t ON c.customerid = t.customerid JOIN location l ON t.locationid = l.locationid WHERE t.creditcardtype = 'American Express' AND l.locationname = 'Sac State Union';"}
{"sample_id": 5255, "db_id": "beer_factory", "gold_sql": "SELECT T2.LocationName FROM \"transaction\" AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.TransactionID = 100885", "pred_sql": "SELECT location.locationname FROM transaction JOIN location ON transaction.locationid = location.locationid WHERE transaction.transactionid = '100885';"}
{"sample_id": 5298, "db_id": "beer_factory", "gold_sql": "SELECT T3.BrandName FROM rootbeer AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.StarRating = 5 AND strftime('%Y', T2.ReviewDate) = '2012' GROUP BY T1.BrandID ORDER BY COUNT(T2.BrandID) DESC LIMIT 1", "pred_sql": "SELECT rb.brandname FROM rootbeerreview rbr JOIN rootbeerbrand rb ON rbr.brandid = rb.brandid WHERE rbr.starrating = 5 AND strftime('%Y', rbr.reviewdate) = '2012' GROUP BY rb.brandname ORDER BY COUNT(*) DESC LIMIT 1;"}
{"sample_id": 5265, "db_id": "beer_factory", "gold_sql": "SELECT CAST(COUNT(*) AS REAL) / COUNT(DISTINCT T1.BrandID) AS avgreview FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T1.State = 'CA'", "pred_sql": "SELECT AVG(review_count) AS average_reviews FROM (SELECT brandid, COUNT(*) AS review_count FROM rootbeerreview INNER JOIN rootbeerbrand ON rootbeerreview.brandid = rootbeerbrand.brandid WHERE rootbeerbrand.state = 'CA' GROUP BY brandid) AS review_counts;"}
{"sample_id": 5256, "db_id": "beer_factory", "gold_sql": "SELECT T1.City FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.TransactionID = 103545", "pred_sql": "SELECT city FROM customers WHERE customerid = (SELECT customerid FROM transaction WHERE transactionid = '103545')"}
{"sample_id": 5245, "db_id": "beer_factory", "gold_sql": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T4.BreweryName = 'AJ Stephans Beverages'", "pred_sql": "SELECT first || ' ' || last AS full_name FROM customers c JOIN transaction t ON c.customerid = t.customerid JOIN rootbeer r ON t.rootbeerid = r.rootbeerid JOIN rootbeerbrand rb ON r.brandid = rb.brandid WHERE rb.breweryname = 'AJ Stephans Beverages' GROUP BY c.customerid;"}
{"sample_id": 5334, "db_id": "beer_factory", "gold_sql": "SELECT T1.First, T1.Last , strftime('%J', ReviewDate) - strftime('%J', FirstPurchaseDate) AS TIMEAGO FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID LIMIT 1", "pred_sql": "SELECT c.first || ' ' || c.last AS full_name, julianday(rr.reviewdate) - julianday(c.firstpurchasedate) AS days_since_first_review\nFROM customers c\nJOIN rootbeerreview rr ON c.customerid = rr.customerid\nWHERE rr.reviewdate = (SELECT MIN(reviewdate) FROM rootbeerreview WHERE customerid = c.customerid)"}
{"sample_id": 5262, "db_id": "beer_factory", "gold_sql": "SELECT CASE WHEN T1.SubscribedToEmailList LIKE 'TRUE' THEN 'YES' ELSE 'NO' END AS result FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T2.BrandID = T3.BrandID WHERE T2.StarRating = 3 AND T3.BrandName = 'Frostie' AND T2.ReviewDate = '2014-04-24'", "pred_sql": "SELECT subscribedtoemaillist FROM customers WHERE customerid IN (SELECT customerid FROM rootbeerreview WHERE brandid = (SELECT brandid FROM rootbeerbrand WHERE brandname = 'Frostie') AND starrating = 3 AND reviewdate = '2014-04-24')"}
{"sample_id": 5355, "db_id": "beer_factory", "gold_sql": "SELECT COUNT(T1.TransactionID) FROM \"transaction\" AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.LocationName = 'Sac State American River Courtyard' AND T1.CreditCardType = 'MasterCard'", "pred_sql": "SELECT COUNT(*) AS purchase_count FROM transaction t JOIN location l ON t.locationid = l.locationid WHERE l.locationname = 'Sac State American River Courtyard' AND t.creditcardtype = 'Master Card';"}
{"sample_id": 5345, "db_id": "beer_factory", "gold_sql": "SELECT T1.BrandName, SUM(T3.PurchasePrice) FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID INNER JOIN \"transaction\" AS T3 ON T2.RootBeerID = T3.RootBeerID WHERE T1.CaneSugar = 'FALSE' AND T1.Caffeinated = 'FALSE' GROUP BY T1.BrandName", "pred_sql": "SELECT rb.brandname, SUM(t.purchaseprice) AS total_amount_sold \nFROM rootbeerbrand rb \nJOIN rootbeer r ON rb.brandid = r.brandid \nJOIN transaction t ON r.rootbeerid = t.rootbeerid \nWHERE rb.caffeinated = 'false' AND rb.canesugar = 'false' \nGROUP BY rb.brandname;"}
{"sample_id": 5247, "db_id": "beer_factory", "gold_sql": "SELECT DISTINCT T2.CreditCardNumber FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND T2.TransactionDate = '2014-07-07'", "pred_sql": "SELECT creditcardnumber FROM transaction JOIN customers ON transaction.customerid = customers.customerid WHERE customers.first = 'Frank-Paul' AND customers.last = 'Santangelo' AND transaction.transactiondate = '2014-07-07';"}
{"sample_id": 5240, "db_id": "beer_factory", "gold_sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.SubscribedToEmailList = 'TRUE' AND T2.CreditCardType = 'Visa' AND STRFTIME('%Y-%m', T2.TransactionDate) = '2014-07'", "pred_sql": "SELECT COUNT(DISTINCT c.customerid) AS number_of_customers\nFROM customers c\nJOIN transaction t ON c.customerid = t.customerid\nWHERE c.subscribedtoemaillist = 'true'\nAND t.creditcardtype = 'Visa'\nAND strftime('%Y-%m', t.transactiondate) = '2014-07';"}
{"sample_id": 5258, "db_id": "beer_factory", "gold_sql": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.CustomerID ORDER BY COUNT(T2.CustomerID) DESC LIMIT 1", "pred_sql": "SELECT c.first || ' ' || c.last AS full_name\nFROM customers c\nJOIN rootbeerreview r ON c.customerid = r.customerid\nGROUP BY c.customerid\nORDER BY COUNT(r.review) DESC\nLIMIT 1;"}
{"sample_id": 5269, "db_id": "beer_factory", "gold_sql": "SELECT COUNT(BreweryName) FROM rootbeerbrand WHERE Country = 'Australia'", "pred_sql": "SELECT COUNT(DISTINCT breweryname) AS brewery_count FROM rootbeerbrand WHERE country = 'Australia';"}
{"sample_id": 5235, "db_id": "beer_factory", "gold_sql": "SELECT BrandName FROM rootbeerbrand ORDER BY CurrentRetailPrice - WholesaleCost LIMIT 1", "pred_sql": "SELECT brandname FROM rootbeerbrand JOIN rootbeer ON rootbeerbrand.brandid = rootbeer.brandid JOIN transaction ON rootbeer.rootbeerid = transaction.rootbeerid GROUP BY brandname ORDER BY (currentretailprice - wholesalecost) ASC LIMIT 1;"}
{"sample_id": 5311, "db_id": "beer_factory", "gold_sql": "SELECT T2.CreditCardType FROM rootbeer AS T1 INNER JOIN \"transaction\" AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T3.Alcoholic = 'FALSE' GROUP BY T2.CreditCardType ORDER BY COUNT(T2.CreditCardType) DESC LIMIT 1", "pred_sql": "SELECT creditcardnumber, COUNT(*) as usage_count \nFROM transaction \nJOIN rootbeer ON transaction.rootbeerid = rootbeer.rootbeerid \nJOIN rootbeerbrand ON rootbeer.brandid = rootbeerbrand.brandid \nWHERE rootbeerbrand.alcoholic = 'false' \nGROUP BY creditcardnumber \nORDER BY usage_count DESC \nLIMIT 1;"}
{"sample_id": 5319, "db_id": "beer_factory", "gold_sql": "SELECT BrandID FROM rootbeerreview WHERE StarRating > 3", "pred_sql": "SELECT brandid FROM rootbeerreview WHERE starrating > 3;"}
{"sample_id": 5303, "db_id": "beer_factory", "gold_sql": "SELECT (CAST(SUM(CASE WHEN T1.Honey = 'TRUE' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT T3.TransactionDate)) - (CAST(SUM(CASE WHEN T1.Honey <> 'TRUE' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT T3.TransactionDate)) FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID INNER JOIN \"transaction\" AS T3 ON T2.RootBeerID = T3.RootBeerID", "pred_sql": "SELECT CASE WHEN rb.honey = 'true' THEN 'Contains Honey' ELSE 'Does Not Contain Honey' END AS honey_status, AVG(sales_per_day) AS average_sales_per_day\nFROM (\n    SELECT rb.brandid, COUNT(t.transactionid) / COUNT(DISTINCT DATE(t.transactiondate)) AS sales_per_day\n    FROM rootbeer rb\n    JOIN transaction t ON rb.rootbeerid = t.rootbeerid\n    GROUP BY rb.brandid\n) AS sales_data\nJOIN rootbeerbrand rb ON sales_data.brandid = rb.brandid\nGROUP BY rb.honey;"}
{"sample_id": 2506, "db_id": "genes", "gold_sql": "SELECT T2.Type FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Function = 'TRANSCRIPTION' AND T1.Essential = 'Non-Essential'", "pred_sql": "SELECT interactions.type \nFROM genes \nJOIN interactions ON genes.geneid = interactions.geneid1 \nWHERE genes.function IN ('cellular transport', 'transport medicine') \nAND genes.essential = 'no';"}
{"sample_id": 2499, "db_id": "genes", "gold_sql": "SELECT COUNT(T2.GeneID2) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr > 0 AND T1.Essential = 'Non-Essential'", "pred_sql": "SELECT COUNT(*) AS positive_correlated_pairs\nFROM interactions i\nJOIN genes g1 ON i.geneid1 = g1.geneid\nJOIN genes g2 ON i.geneid2 = g2.geneid\nWHERE i.type = 'positively correlated' AND g1.essential = 'no' AND g2.essential = 'no';"}
{"sample_id": 2509, "db_id": "genes", "gold_sql": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Type != 'Physical' AND T1.Phenotype = 'Cell cycle defects' AND T1.Class != 'Motorproteins' AND T1.Essential = 'Non-Essential'", "pred_sql": "SELECT COUNT(*) FROM genes g LEFT JOIN interactions i ON g.geneid = i.geneid1 WHERE g.essential = 'no' AND g.class != 'motorprotein' AND g.phenotype = 'cell cycle defects' AND i.type IS NULL;"}
{"sample_id": 2490, "db_id": "genes", "gold_sql": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Classification AS T2 ON T1.GeneID = T2.GeneID WHERE T2.Localization = 'nucleus' AND T1.Essential = 'Non-Essential'", "pred_sql": "SELECT COUNT(*) FROM genes WHERE essential = 'no' AND localization = 'nucleus';"}
{"sample_id": 1047, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(T1.app_id) FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T2.label_id = T1.label_id WHERE T2.category = 'Home Decoration'", "pred_sql": "SELECT COUNT(DISTINCT app_labels.app_id) AS user_count \nFROM app_labels \nJOIN label_categories ON app_labels.label_id = label_categories.label_id \nWHERE label_categories.category = 'Home Decoration';"}
{"sample_id": 1160, "db_id": "talkingdata", "gold_sql": "SELECT SUM(IIF(T1.gender = 'M', 1, 0)) / SUM(IIF(T1.gender = 'F', 1, 0)) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'", "pred_sql": "SELECT COUNT(CASE WHEN g.gender = 'F' THEN 1 END) * 1.0 / COUNT(CASE WHEN g.gender = 'M' THEN 1 END) AS female_to_male_ratio\nFROM gender_age g\nJOIN phone_brand_device_model2 p ON g.device_id = p.device_id\nWHERE p.phone_brand = 'vivo';"}
{"sample_id": 1069, "db_id": "talkingdata", "gold_sql": "SELECT DISTINCT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T2.label_id = T1.label_id INNER JOIN app_events AS T3 ON T3.app_id = T2.app_id WHERE T3.event_id = 155", "pred_sql": "SELECT DISTINCT lc.category \nFROM events e \nJOIN app_events ae ON e.event_id = ae.event_id \nJOIN app_events_relevant aer ON ae.app_id = aer.app_id \nJOIN app_labels al ON aer.app_id = al.app_id \nJOIN label_categories lc ON al.label_id = lc.label_id \nWHERE e.event_id = 155;"}
{"sample_id": 1130, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(T1.device_id) FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T1.device_model = 'Galaxy S5' AND T2.gender = 'M'", "pred_sql": "SELECT COUNT(DISTINCT ga.device_id) AS male_user_count\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE ga.gender = 'M' AND pb.device_model = 'Galaxy S5';"}
{"sample_id": 1151, "db_id": "talkingdata", "gold_sql": "SELECT T.device_model FROM ( SELECT T2.device_model, COUNT(T2.device_model) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age > 30 AND T1.gender = 'F' GROUP BY T2.device_model ) AS T ORDER BY T.num DESC LIMIT 1", "pred_sql": "SELECT p.device_model, COUNT(g.device_id) AS female_count\nFROM gender_age g\nJOIN phone_brand_device_model2 p ON g.device_id = p.device_id\nWHERE g.gender = 'F' AND g.age > 30\nGROUP BY p.device_model\nORDER BY female_count DESC\nLIMIT 1;"}
{"sample_id": 1144, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.device_id WHERE STRFTIME('%Y', T2.timestamp) = '2016' AND T1.\"group\" = 'M23-26'", "pred_sql": "SELECT COUNT(DISTINCT e.device_id) AS device_count\nFROM events e\nJOIN gender_age g ON e.device_id = g.device_id\nWHERE g.group = 'm23-26' AND strftime('%Y', e.timestamp, 'unixepoch') = '2016';"}
{"sample_id": 1165, "db_id": "talkingdata", "gold_sql": "SELECT SUM(IIF(gender = 'M', 1, 0)) / COUNT(device_id) AS per FROM gender_age", "pred_sql": "SELECT (SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS male_percentage FROM gender_age;"}
{"sample_id": 1110, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(T1.app_id) FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id WHERE T2.category = 'game-Art Style'", "pred_sql": "SELECT COUNT(DISTINCT app_labels.app_id) AS user_count \nFROM app_labels \nJOIN label_categories ON app_labels.label_id = label_categories.label_id \nWHERE label_categories.category = 'game-Art Style';"}
{"sample_id": 1075, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(event_id) FROM app_events WHERE event_id = 2 AND is_active = 0", "pred_sql": "SELECT COUNT(DISTINCT app_events.app_id) AS inactive_users_count\nFROM app_events\nWHERE app_events.event_id = 2 AND app_events.is_active = 0;"}
{"sample_id": 1158, "db_id": "talkingdata", "gold_sql": "SELECT T2.device_model FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.\"group\" = 'M23-26'", "pred_sql": "SELECT DISTINCT p.device_model \nFROM phone_brand_device_model2 p \nJOIN gender_age g ON p.device_id = g.device_id \nWHERE g.group = 'm23-26';"}
{"sample_id": 1171, "db_id": "talkingdata", "gold_sql": "SELECT T2.app_id FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'game-Rowing'", "pred_sql": "SELECT app_all.app_id \nFROM app_all \nJOIN app_labels ON app_all.app_id = app_labels.app_id \nJOIN label_categories ON app_labels.label_id = label_categories.label_id \nWHERE label_categories.category = 'game-Rowing';"}
{"sample_id": 1201, "db_id": "talkingdata", "gold_sql": "SELECT longitude, latitude FROM events WHERE date(timestamp) = '2016-04-30'", "pred_sql": "SELECT longitude, latitude FROM events WHERE timestamp >= 1461984000 AND timestamp < 1462070400;"}
{"sample_id": 1138, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(device_id) FROM gender_age WHERE age > 30 AND gender = 'F'", "pred_sql": "SELECT COUNT(*) AS female_users_over_30\nFROM gender_age\nJOIN sample_submission ON gender_age.device_id = sample_submission.device_id\nWHERE gender = 'F' AND age > 30;"}
{"sample_id": 1098, "db_id": "talkingdata", "gold_sql": "SELECT SUM(IIF(T1.\"group\" = 'M23-26', 1.0, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'", "pred_sql": "SELECT (COUNT(CASE WHEN ga.group = 'm23-26' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_m23_26\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE pb.phone_brand = 'vivo';"}
{"sample_id": 1211, "db_id": "talkingdata", "gold_sql": "SELECT T.gender FROM ( SELECT T1.gender, COUNT(T1.device_id) AS num FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE date(T2.timestamp) BETWEEN '2016-05-01' AND '2016-05-10' GROUP BY T1.gender ) AS T ORDER BY T.num DESC LIMIT 1", "pred_sql": "SELECT g.gender, COUNT(e.event_id) AS login_count\nFROM events e\nJOIN gender_age g ON e.device_id = g.device_id\nWHERE e.timestamp >= 1462051200 AND e.timestamp < 1462636800\nGROUP BY g.gender\nORDER BY login_count DESC\nLIMIT 1;"}
{"sample_id": 1232, "db_id": "talkingdata", "gold_sql": "SELECT T1.\"group\" FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'LG' AND T2.device_model = 'Nexus 4'", "pred_sql": "SELECT ga.group FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id WHERE pb.phone_brand = 'LG' AND pb.device_model = 'Nexus 4';"}
{"sample_id": 1187, "db_id": "talkingdata", "gold_sql": "SELECT T1.\"group\" FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'", "pred_sql": "SELECT DISTINCT g.group \nFROM gender_age g \nJOIN phone_brand_device_model2 p ON g.device_id = p.device_id \nWHERE p.phone_brand = 'vivo';"}
{"sample_id": 1178, "db_id": "talkingdata", "gold_sql": "SELECT T2.phone_brand, T2.device_model FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age < 10", "pred_sql": "SELECT DISTINCT pbdm.phone_brand, pbdm.device_model \nFROM phone_brand_device_model2 AS pbdm \nJOIN gender_age AS ga ON pbdm.device_id = ga.device_id \nWHERE ga.age < 10;"}
{"sample_id": 1145, "db_id": "talkingdata", "gold_sql": "SELECT T.phone_brand FROM ( SELECT T2.phone_brand, COUNT(T1.device_id) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.\"group\" = 'M23-26' GROUP BY T2.phone_brand ) AS T ORDER BY T.num DESC LIMIT 1", "pred_sql": "SELECT pb.phone_brand, COUNT(DISTINCT ga.device_id) AS user_count\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE ga.group = 'm23-26'\nGROUP BY pb.phone_brand\nORDER BY user_count DESC\nLIMIT 1;"}
{"sample_id": 1084, "db_id": "talkingdata", "gold_sql": "SELECT T.\"group\" FROM ( SELECT T2.\"group\", COUNT(\"group\") AS num FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'vivo' GROUP BY T2.\"group\" ) AS T ORDER BY T.num DESC LIMIT 1", "pred_sql": "SELECT ga.group, COUNT(*) as user_count\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE pb.phone_brand = 'vivo'\nGROUP BY ga.group\nORDER BY user_count DESC\nLIMIT 1;"}
{"sample_id": 1128, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(T1.event_id) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE SUBSTR(T2.\"timestamp\", 1, 10) = '2016-05-06' AND T1.is_installed = '1'", "pred_sql": "SELECT COUNT(DISTINCT ae.app_id) AS installed_apps_count\nFROM app_events ae\nJOIN events e ON ae.event_id = e.event_id\nWHERE e.timestamp = 1462521214 AND ae.is_installed = 1;"}
{"sample_id": 1228, "db_id": "talkingdata", "gold_sql": "SELECT T1.age, T1.gender FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T1.device_id = 29182687948017100 AND T2.event_id = 1", "pred_sql": "SELECT ga.age, ga.gender \nFROM gender_age ga \nJOIN app_events ae ON ga.device_id = ae.app_id \nWHERE ga.device_id = 29182687948017100 AND ae.event_id = 1;"}
{"sample_id": 1061, "db_id": "talkingdata", "gold_sql": "SELECT SUM(IIF(gender = 'M' AND \"group\" = 'M27-28', 1, 0)) / SUM(IIF(gender = 'F' AND \"group\" = 'F27-28', 1, 0)) AS r FROM gender_age", "pred_sql": "SELECT SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) AS male_count, SUM(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) AS female_count, (SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) * 1.0 / NULLIF(SUM(CASE WHEN gender = 'F' THEN 1 ELSE 0 END), 0)) AS male_female_ratio FROM gender_age_train WHERE age BETWEEN 27 AND 28;"}
{"sample_id": 1239, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(T1.app_id) FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id WHERE T2.category = 'Equity Fund'", "pred_sql": "SELECT COUNT(DISTINCT app_all.app_id) AS app_count \nFROM app_all \nJOIN app_labels ON app_all.app_id = app_labels.app_id \nJOIN label_categories ON app_labels.label_id = label_categories.label_id \nWHERE label_categories.category = 'Equity Fund';"}
{"sample_id": 1212, "db_id": "talkingdata", "gold_sql": "SELECT T.\"group\" FROM ( SELECT T1.\"group\", COUNT(T1.device_id) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'SM-T2558' GROUP BY T1.\"group\" ) AS T ORDER BY T.num DESC LIMIT 1", "pred_sql": "SELECT ga.group, COUNT(*) as usage_count\nFROM phone_brand_device_model2 AS pb\nJOIN gender_age AS ga ON pb.device_id = ga.device_id\nWHERE pb.device_model = 'SM-T2558'\nGROUP BY ga.group\nORDER BY usage_count DESC\nLIMIT 1;"}
{"sample_id": 1244, "db_id": "talkingdata", "gold_sql": "SELECT SUM(IIF(T1.gender IS NULL AND T1.age IS NULL AND T1.\"group\" IS NULL, 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM phone_brand_device_model2 WHERE phone_brand = 'vivo')) AS percentage_no_info\nFROM gender_age_test\nWHERE device_id IN (SELECT device_id FROM phone_brand_device_model2 WHERE phone_brand = 'vivo')\nAND device_id NOT IN (SELECT device_id FROM gender_age);"}
{"sample_id": 1215, "db_id": "talkingdata", "gold_sql": "SELECT SUM(IIF(T1.gender = 'F', 1, 0)) / SUM(IIF(T1.gender = 'M', 1, 0)) AS per FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id INNER JOIN app_events_relevant AS T3 ON T2.event_id = T3.event_id WHERE T3.is_installed = 0", "pred_sql": "SELECT (SUM(CASE WHEN g.gender = 'F' AND ae.is_installed = 0 THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN g.gender = 'F' THEN 1 ELSE 0 END), 0)) AS percentage_women_not_installed,\n       (SUM(CASE WHEN g.gender = 'M' AND ae.is_installed = 0 THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN g.gender = 'M' THEN 1 ELSE 0 END), 0)) AS percentage_men_not_installed\nFROM gender_age g\nJOIN app_events ae ON g.device_id = ae.app_id\nGROUP BY g.gender;"}
{"sample_id": 1049, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(T1.gender) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T2.device_id = T1.device_id WHERE T1.gender = 'F' AND T2.device_model = 'ZenFone 5'", "pred_sql": "SELECT COUNT(DISTINCT ga.device_id) AS female_users_count \nFROM gender_age ga \nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id \nWHERE ga.gender = 'F' AND pb.phone_brand = 'Asus' AND pb.device_model = 'ZenFone 5';"}
{"sample_id": 1186, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(label_id) FROM label_categories WHERE category = 'game-card'", "pred_sql": "SELECT COUNT(*) AS label_count FROM label_categories WHERE category = 'game-card';"}
{"sample_id": 1107, "db_id": "talkingdata", "gold_sql": "SELECT T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T2.\"group\" = 'M39+' AND T2.gender = 'M' LIMIT 10", "pred_sql": "SELECT DISTINCT p.device_model \nFROM phone_brand_device_model2 p \nJOIN gender_age g ON p.device_id = g.device_id \nWHERE g.gender = 'M' AND g.age > 39 \nLIMIT 10;"}
{"sample_id": 1065, "db_id": "talkingdata", "gold_sql": "SELECT T1.gender, T1.age FROM gender_age AS T1 INNER JOIN events AS T2 ON T2.device_id = T1.device_id WHERE T2.event_id = 15251", "pred_sql": "SELECT ga.gender, ga.age FROM gender_age ga JOIN app_events ae ON ga.device_id = ae.app_id WHERE ae.event_id = 15251;"}
{"sample_id": 1081, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(T1.device_id) FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T2.gender = 'F' AND T1.device_model = 'Galaxy Note 2'", "pred_sql": "SELECT COUNT(DISTINCT ga.device_id) AS female_users_count\nFROM gender_age ga\nJOIN phone_brand_device_model2 pbdm ON ga.device_id = pbdm.device_id\nWHERE ga.gender = 'F' AND pbdm.phone_brand = 'Samsung' AND pbdm.device_model = 'Galaxy Note 2';"}
{"sample_id": 1064, "db_id": "talkingdata", "gold_sql": "SELECT T1.app_id, T2.timestamp FROM app_events AS T1 INNER JOIN events AS T2 ON T2.event_id = T1.event_id WHERE T2.event_id = 82", "pred_sql": "SELECT app_events.app_id, events.timestamp FROM app_events JOIN events ON app_events.event_id = events.event_id WHERE app_events.event_id = 82;"}
{"sample_id": 1074, "db_id": "talkingdata", "gold_sql": "SELECT SUM(IIF(T1.device_model = 'Nexus 5', 1, 0)) * 100 / COUNT(T1.device_id) AS per , SUM(IIF(T1.device_model = 'Nexus 5' AND T2.gender = 'M', 1, 0)) / SUM(IIF(T1.device_model = 'Nexus 5' AND T2.gender = 'F', 1, 0)) AS r FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'LG'", "pred_sql": "SELECT\n    (COUNT(CASE WHEN gender_age.gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS female_percentage,\n    (COUNT(CASE WHEN gender_age.gender = 'M' THEN 1 END) * 100.0 / COUNT(*)) AS male_percentage,\n    COUNT(*) AS total_users\nFROM\n    phone_brand_device_model2\nJOIN\n    gender_age ON phone_brand_device_model2.device_id = gender_age.device_id\nWHERE\n    phone_brand = 'LG' AND\n    device_model = 'Nexus 5';"}
{"sample_id": 1153, "db_id": "talkingdata", "gold_sql": "SELECT T.category FROM ( SELECT T2.category, COUNT(T1.app_id) AS num FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id GROUP BY T2.category ) AS T ORDER BY T.num DESC LIMIT 3", "pred_sql": "SELECT lc.category, COUNT(DISTINCT aa.app_id) AS user_count\nFROM app_labels AS al\nJOIN label_categories AS lc ON al.label_id = lc.label_id\nJOIN app_all AS aa ON al.app_id = aa.app_id\nGROUP BY lc.category\nORDER BY user_count DESC\nLIMIT 3;"}
{"sample_id": 1133, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(T1.app_id) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE T2.timestamp = '2016-05-06 14:09:49' AND T1.is_active = '1' AND T2.longitude = '116' AND T2.latitude = '40'", "pred_sql": "SELECT COUNT(DISTINCT ae.app_id) AS active_apps_count\nFROM app_events ae\nJOIN events e ON ae.event_id = e.event_id\nWHERE ae.is_active = 1\nAND e.timestamp = strftime('%s','2016-05-06 14:09:49')\nAND e.longitude = 116\nAND e.latitude = 40;"}
{"sample_id": 1225, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(T1.app_id) AS num FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE T1.event_id = 2 AND T1.is_active = 1 GROUP BY T2.timestamp", "pred_sql": "SELECT e.timestamp, COUNT(DISTINCT ae.app_id) AS active_users\nFROM events e\nJOIN app_events ae ON e.event_id = ae.event_id\nWHERE e.event_id = 2 AND ae.is_active = 1\nGROUP BY e.timestamp;"}
{"sample_id": 1168, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(label_id) FROM label_categories WHERE category LIKE 'game%'", "pred_sql": "SELECT COUNT(*) FROM label_categories WHERE category LIKE 'game%';"}
{"sample_id": 1114, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Galaxy Ace Plus' AND T1.gender = 'M'", "pred_sql": "SELECT COUNT(DISTINCT ga.device_id) AS male_user_count\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE ga.gender = 'M' AND pb.phone_brand = 'Samsung' AND pb.device_model = 'Galaxy Ace Plus';"}
{"sample_id": 1106, "db_id": "talkingdata", "gold_sql": "SELECT device_model FROM phone_brand_device_model2 WHERE phone_brand = 'OPPO' LIMIT 15", "pred_sql": "SELECT device_model FROM phone_brand_device_model2 WHERE phone_brand = 'OPPO' LIMIT 15;"}
{"sample_id": 1209, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id INNER JOIN app_events_relevant AS T3 ON T2.event_id = T3.event_id WHERE T1.gender = 'M' AND T3.is_active = 0 AND T1.age < 23", "pred_sql": "SELECT COUNT(DISTINCT ga.device_id) AS male_under_23_inactive_installed\nFROM gender_age ga\nJOIN app_events ae ON ga.device_id = ae.app_id\nWHERE ga.gender = 'M' AND ga.age < 23 AND ae.is_installed = 1 AND ae.is_active = 0;"}
{"sample_id": 1493, "db_id": "synthea", "gold_sql": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS timeFrame , T2.DESCRIPTION FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Jacquelyn' AND T1.last = 'Shanahan' ORDER BY T2.START DESC LIMIT 1", "pred_sql": "SELECT cp.start, cp.stop, cp.description \nFROM careplans cp \nJOIN patients p ON cp.patient = p.patient \nWHERE p.first = 'Jacquelyn' AND p.last = 'Shanahan' \nORDER BY cp.start DESC \nLIMIT 1;"}
{"sample_id": 1474, "db_id": "synthea", "gold_sql": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS days FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = ' Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin]' AND T1.first = 'Major' AND T1.last = 'D''Amore'", "pred_sql": "SELECT m.start, m.stop, (julianday(m.stop) - julianday(m.start)) AS duration_days \nFROM medications m \nJOIN patients p ON m.patient = p.patient \nWHERE p.first = 'Major' AND p.last = 'D'Amore' AND m.description = 'Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin]';"}
{"sample_id": 1518, "db_id": "synthea", "gold_sql": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Wilmer' AND T1.last = 'Koepp'", "pred_sql": "SELECT conditions.description, conditions.start, conditions.stop FROM conditions JOIN patients ON conditions.patient = patients.patient WHERE patients.first = 'Wilmer' AND patients.last = 'Koepp';"}
{"sample_id": 1463, "db_id": "synthea", "gold_sql": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.marital = 'M' AND strftime('%J', T2.STOP) - strftime('%J', T2.START) > 60", "pred_sql": "SELECT p.first || ' ' || p.last AS full_name \nFROM patients p \nJOIN careplans c ON p.patient = c.patient \nWHERE p.marital = 'M' \nAND c.stop - c.start > 60 \nAND strftime('%Y', c.start) = '2009';"}
{"sample_id": 1542, "db_id": "synthea", "gold_sql": "SELECT DISTINCT T2.first, T2.last FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient INNER JOIN all_prevalences AS T3 ON T1.DESCRIPTION = T3.ITEM WHERE T2.ethnicity = 'irish' AND 100 * CAST(T3.OCCURRENCES AS REAL) / ( SELECT AVG(OCCURRENCES) FROM all_prevalences ) > 96", "pred_sql": "SELECT p.first || ' ' || p.last AS full_name \nFROM patients p \nJOIN conditions c ON p.patient = c.patient \nJOIN all_prevalences a ON c.description = a.item \nWHERE p.ethnicity = 'Irish' \nAND a.occurrences > (SELECT AVG(CAST(occurrences AS INTEGER)) * 0.96 FROM all_prevalences);"}
{"sample_id": 1417, "db_id": "synthea", "gold_sql": "SELECT DISTINCT T2.ssn FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient INNER JOIN all_prevalences AS T3 ON lower(T1.DESCRIPTION) = lower(T3.ITEM) WHERE CAST(T3.\"PREVALENCE PERCENTAGE\" AS REAL) * 100 / ( SELECT AVG('PREVALENCE PERCENTAGE') FROM all_prevalences ) < 30 LIMIT 5", "pred_sql": "SELECT DISTINCT p.ssn \nFROM patients p \nJOIN conditions c ON p.patient = c.patient \nJOIN all_prevalences a ON c.description = a.item \nWHERE a.prevalence_percentage < (SELECT AVG(prevalence_percentage) FROM all_prevalences) \nLIMIT 5;"}
{"sample_id": 1373, "db_id": "synthea", "gold_sql": "SELECT T2.description, T2.VALUE, T2.units FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mr.' AND T1.first = 'Vincent' AND T1.last = 'Wyman' AND T2.date = '2010-08-02' AND T2.description = 'Body Height'", "pred_sql": "SELECT o.description, o.value, o.units \nFROM observations o \nJOIN patients p ON o.patient = p.patient \nWHERE p.first = 'Vincent' AND p.last = 'Wyman' AND o.date = '2010-08-02';"}
{"sample_id": 1492, "db_id": "synthea", "gold_sql": "SELECT CAST(COUNT(PATIENT) AS REAL) / COUNT(DISTINCT strftime('%Y', DATE)) FROM procedures WHERE DESCRIPTION = 'Combined chemotherapy and radiation therapy (procedure)'", "pred_sql": "SELECT AVG(patient_count) AS average_patients_per_year\nFROM (\n    SELECT strftime('%Y', procedures.date) AS year, COUNT(DISTINCT procedures.patient) AS patient_count\n    FROM procedures\n    WHERE procedures.description IN ('chemotherapy', 'radiation therapy')\n    GROUP BY year\n) AS yearly_counts;"}
{"sample_id": 1447, "db_id": "synthea", "gold_sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN procedures AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Bone immobilization' AND T1.drivers IS NOT NULL", "pred_sql": "SELECT COUNT(DISTINCT p.patient) AS patient_count \nFROM patients p \nJOIN procedures pr ON p.patient = pr.patient \nWHERE pr.description = 'bone immobilization' \nAND p.drivers IS NOT NULL;"}
{"sample_id": 1440, "db_id": "synthea", "gold_sql": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T1.race = 'white' GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1", "pred_sql": "SELECT allergies.description, COUNT(allergies.description) AS allergy_count \nFROM allergies \nJOIN patients ON allergies.patient = patients.patient \nWHERE patients.race = 'white' \nGROUP BY allergies.description \nORDER BY allergy_count DESC \nLIMIT 1;"}
{"sample_id": 1509, "db_id": "synthea", "gold_sql": "SELECT DISTINCT T1.START FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.deathdate IS NULL", "pred_sql": "SELECT careplans.start FROM careplans JOIN patients ON careplans.patient = patients.patient WHERE patients.deathdate IS NULL;"}
{"sample_id": 1430, "db_id": "synthea", "gold_sql": "SELECT T2.first, T2.last , CASE WHEN T2.deathdate IS NULL THEN strftime('%Y', T1.DATE) - strftime('%Y', T2.birthdate) ELSE strftime('%Y', T2.deathdate) - strftime('%Y', T2.birthdate) END AS age FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Systolic Blood Pressure' AND T1.VALUE = 200 AND T1.UNITS = 'mmHg' AND strftime('%Y', T1.DATE) = '2011'", "pred_sql": "SELECT p.first || ' ' || p.last AS full_name, \n       (CASE \n           WHEN p.deathdate IS NULL THEN strftime('%Y', 'now') - strftime('%Y', p.birthdate) \n           ELSE strftime('%Y', p.deathdate) - strftime('%Y', p.birthdate) \n       END) AS age \nFROM observations o \nJOIN patients p ON o.patient = p.patient \nWHERE o.description = 'Systolic Blood Pressure' \n  AND o.value = '200' \n  AND strftime('%Y', o.date) = '2011';"}
{"sample_id": 1428, "db_id": "synthea", "gold_sql": "SELECT DISTINCT T1.DESCRIPTION FROM careplans AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Secondary malignant neoplasm of colon'", "pred_sql": "SELECT careplans.* FROM careplans JOIN conditions ON careplans.patient = conditions.patient WHERE conditions.description = 'secondary malignant neoplasm of the colon';"}
{"sample_id": 1490, "db_id": "synthea", "gold_sql": "SELECT DESCRIPTION FROM medications WHERE REASONDESCRIPTION = 'Child attention deficit disorder' GROUP BY DESCRIPTION ORDER BY COUNT(DESCRIPTION) DESC LIMIT 1", "pred_sql": "SELECT medications.description, COUNT(medications.description) AS frequency\nFROM medications\nJOIN conditions ON medications.patient = conditions.patient\nWHERE conditions.description = 'Attention Deficit Disorder' AND age < 18\nGROUP BY medications.description\nORDER BY frequency DESC;"}
{"sample_id": 1476, "db_id": "synthea", "gold_sql": "SELECT DISTINCT T2.DESCRIPTION, T2.VALUE, T2.UNITS FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Bella' AND T1.last = 'Rolfson'", "pred_sql": "SELECT observations.date, observations.encounter, observations.code, observations.description, observations.value, observations.units \nFROM observations \nJOIN patients ON observations.patient = patients.patient \nWHERE patients.first = 'Bella' AND patients.last = 'Rolfson';"}
{"sample_id": 1500, "db_id": "synthea", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.PATIENT) FROM encounters AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE strftime('%Y', T1.DATE) = '2010' AND T1.REASONDESCRIPTION = 'Contact dermatitis'", "pred_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM patients WHERE gender = 'F') AS female_percentage\nFROM encounters e\nJOIN conditions c ON e.patient = c.patient\nJOIN patients p ON e.patient = p.patient\nWHERE e.date BETWEEN '2010-01-01' AND '2010-12-31' AND c.description = 'contact dermatitis';"}
{"sample_id": 1445, "db_id": "synthea", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.deathdate IS NULL THEN strftime('%Y', T2.STOP) - strftime('%Y', T1.birthdate) ELSE strftime('%Y', T1.deathdate) - strftime('%Y', T1.birthdate) END) AS REAL) / COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T2.REASONDESCRIPTION = 'Prediabetes'", "pred_sql": "SELECT AVG(CASE WHEN deathdate IS NOT NULL THEN strftime('%Y', deathdate) - strftime('%Y', birthdate) ELSE strftime('%Y', 'now') - strftime('%Y', birthdate) END) AS average_age\nFROM patients\nJOIN careplans ON patients.patient = careplans.patient\nWHERE careplans.description LIKE '%prediabetes%';"}
{"sample_id": 1519, "db_id": "synthea", "gold_sql": "SELECT SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END), SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Viral sinusitis (disorder)'", "pred_sql": "SELECT gender, COUNT(*) as affected_count \nFROM patients p \nJOIN conditions c ON p.patient = c.patient \nWHERE c.description = 'viral sinusitis' \nGROUP BY gender \nORDER BY affected_count DESC;"}
{"sample_id": 1366, "db_id": "synthea", "gold_sql": "SELECT T2.REASONDESCRIPTION FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description LIKE 'Acetaminophen%'", "pred_sql": "SELECT medications.reasondescription FROM medications JOIN patients ON medications.patient = patients.patient WHERE patients.first = 'Elly' AND patients.last = 'Koss' AND medications.description = 'Acetaminophen';"}
{"sample_id": 1441, "db_id": "synthea", "gold_sql": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free'", "pred_sql": "SELECT patients.first FROM patients JOIN immunizations ON patients.patient = immunizations.patient WHERE immunizations.description = 'Influenza seasonal injectable preservative free';"}
{"sample_id": 1438, "db_id": "synthea", "gold_sql": "SELECT T2.START FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Adolfo' AND T1.last = 'Schmitt' AND T2.STOP IS NOT NULL", "pred_sql": "SELECT start FROM allergies JOIN patients ON allergies.patient = patients.patient WHERE first = 'Angelo' AND last = 'Buckridge';"}
{"sample_id": 1420, "db_id": "synthea", "gold_sql": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN procedures AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Emmy' AND T1.last = 'Waelchi'", "pred_sql": "SELECT procedures.* FROM procedures JOIN patients ON procedures.patient = patients.patient WHERE patients.first = 'Emmy' AND patients.last = 'Waelchi';"}
{"sample_id": 1502, "db_id": "synthea", "gold_sql": "SELECT T1.DESCRIPTION FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.first = 'Joye' AND T2.last = 'Homenick'", "pred_sql": "SELECT medications.description FROM medications JOIN patients ON medications.patient = patients.patient WHERE patients.first = 'Joe' AND patients.last = 'Homenick';"}
{"sample_id": 1405, "db_id": "synthea", "gold_sql": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Body Mass Index' AND T2.UNITS = 'kg/m2' ORDER BY T2.VALUE LIMIT 1", "pred_sql": "SELECT p.first || ' ' || p.last AS full_name, o.value AS bmi\nFROM patients p\nJOIN observations o ON p.patient = o.patient\nWHERE o.description = 'body mass index'\nORDER BY o.value ASC\nLIMIT 1;"}
{"sample_id": 1528, "db_id": "synthea", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Viral sinusitis (disorder)'", "pred_sql": "SELECT COUNT(p.patient) * 100.0 / (SELECT COUNT(*) FROM patients) AS male_percentage\nFROM patients p\nJOIN conditions c ON p.patient = c.patient\nWHERE c.description = 'viral sinusitis' AND p.gender = 'M';"}
{"sample_id": 1415, "db_id": "synthea", "gold_sql": "SELECT T2.code FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON T1.ITEM = T2.DESCRIPTION ORDER BY T1.OCCURRENCES DESC LIMIT 1", "pred_sql": "SELECT item, occurrences FROM all_prevalences ORDER BY occurrences DESC LIMIT 1;"}
{"sample_id": 1432, "db_id": "synthea", "gold_sql": "SELECT DISTINCT T1.first FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T2.REASONDESCRIPTION = 'Normal pregnancy'", "pred_sql": "SELECT p.first FROM patients p JOIN conditions c ON p.patient = c.patient WHERE c.description = 'normal pregnancy';"}
{"sample_id": 1514, "db_id": "synthea", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.PATIENT) AS percentage FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE strftime('%Y', T1.START) = '2010'", "pred_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM patients WHERE gender = 'F') AS percentage_female_careplans\nFROM careplans\nJOIN patients ON careplans.patient = patients.patient\nWHERE strftime('%Y', careplans.start) = '2010' AND patients.gender = 'F';"}
{"sample_id": 1407, "db_id": "synthea", "gold_sql": "SELECT COUNT(DISTINCT T2.patient) FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'oxaliplatin 5 MG/ML [Eloxatin]' AND T2.race = 'asian' AND T2.gender = 'F'", "pred_sql": "SELECT COUNT(DISTINCT p.patient) AS asian_female_patients_count \nFROM patients p \nJOIN medications m ON p.patient = m.patient \nWHERE p.race = 'Asian' \nAND p.gender = 'Female' \nAND m.description = 'oxaliplatin 5 MG/ML [Eloxatin]';"}
{"sample_id": 1402, "db_id": "synthea", "gold_sql": "SELECT COUNT(DISTINCT T2.DESCRIPTION) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Tyree' AND T1.last = 'Eichmann'", "pred_sql": "SELECT COUNT(*) AS condition_count FROM conditions INNER JOIN patients ON conditions.patient = patients.patient WHERE patients.first = 'Tyree' AND patients.last = 'Eichmann';"}
{"sample_id": 1459, "db_id": "synthea", "gold_sql": "SELECT SUM(T2.VALUE) / COUNT(T1.patient) FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.race = 'asian' AND T2.DESCRIPTION = 'Body Weight' AND T2.UNITS = 'kg'", "pred_sql": "SELECT AVG(value) AS average_body_weight FROM observations WHERE description = 'body weight' AND patient IN (SELECT patient FROM patients WHERE ethnicity = 'Asian');"}
{"sample_id": 1377, "db_id": "synthea", "gold_sql": "SELECT DISTINCT T1.\"PREVALENCE RATE\" FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON lower(T1.ITEM) = lower(T2.DESCRIPTION) WHERE T2.code = '368581000119106'", "pred_sql": "SELECT prevalence_rate FROM all_prevalences WHERE item = (SELECT description FROM conditions WHERE code = '368581000119106')"}
{"sample_id": 1370, "db_id": "synthea", "gold_sql": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS days FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description = 'Cystitis'", "pred_sql": "SELECT start, stop, (stop - start) AS allergy_duration FROM allergies JOIN patients ON allergies.patient = patients.patient WHERE first = 'Elly' AND last = 'Koss' AND description = 'cystitis';"}
{"sample_id": 1529, "db_id": "synthea", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.patient) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Penicillin V Potassium 250 MG'", "pred_sql": "SELECT (COUNT(CASE WHEN p.gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS female_percentage\nFROM patients p\nJOIN medications m ON p.patient = m.patient\nWHERE m.description = 'Penicillin V Potassium 250 MG';"}
{"sample_id": 1460, "db_id": "synthea", "gold_sql": "SELECT T1.ssn FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Latex allergy'", "pred_sql": "SELECT DISTINCT patients.ssn FROM patients JOIN allergies ON patients.patient = allergies.patient WHERE allergies.description = 'latex'"}
{"sample_id": 1466, "db_id": "synthea", "gold_sql": "SELECT DISTINCT T2.CODE, T2.DATE FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Ms.' AND T1.first = 'Jacquelyn' AND T1.last = 'Shanahan' AND T2.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free'", "pred_sql": "SELECT immunizations.code, immunizations.date \nFROM immunizations \nJOIN patients ON immunizations.patient = patients.patient \nWHERE patients.first = 'Jacquelyn' AND patients.last = 'Shanahan' \nAND immunizations.description = 'influenza seasonal injectable preservative-free vaccine';"}
{"sample_id": 1489, "db_id": "synthea", "gold_sql": "SELECT T2.DATE - T1.birthdate AS age FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Stacy' AND T1.last = 'Morar' AND T2.DESCRIPTION = 'Emergency Room Admission' AND T2.REASONDESCRIPTION = 'Drug overdose' ORDER BY T2.DATE LIMIT 1", "pred_sql": "SELECT (CASE WHEN p.deathdate IS NULL THEN strftime('%Y', 'now') - strftime('%Y', p.birthdate) ELSE strftime('%Y', p.deathdate) - strftime('%Y', p.birthdate) END) AS age_at_first_admission\nFROM patients p\nJOIN encounters e ON p.patient = e.patient\nWHERE p.first = 'Stacy' AND p.last = 'Morar' AND e.reasoncode = 'drug overdose'\nORDER BY e.date ASC\nLIMIT 1;"}
{"sample_id": 8811, "db_id": "food_inspection", "gold_sql": "SELECT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = ( SELECT MIN(score) FROM inspections )", "pred_sql": "SELECT name FROM businesses WHERE business_id = (SELECT business_id FROM inspections ORDER BY score ASC LIMIT 1);"}
{"sample_id": 8794, "db_id": "food_inspection", "gold_sql": "SELECT T1.description FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Chez Fayala, Inc.' AND T1.\"date\" = '2016-07-01' AND T1.risk_category = 'Moderate Risk'", "pred_sql": "SELECT v.description FROM violations v JOIN businesses b ON v.business_id = b.business_id WHERE b.name = 'Chez Fayala, Inc.' AND v.risk_category = 'Moderate' AND v.date = '2016/7/1';"}
{"sample_id": 8806, "db_id": "food_inspection", "gold_sql": "SELECT COUNT(business_id) FROM businesses WHERE STRFTIME('%Y', application_date) = '2012'", "pred_sql": "SELECT COUNT(*) AS number_of_eateries FROM businesses WHERE application_date LIKE '2012%';"}
{"sample_id": 8836, "db_id": "food_inspection", "gold_sql": "SELECT T2.name, T2.address FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.\"date\" = '2015-02-02' AND T1.type = 'Reinspection/Followup'", "pred_sql": "SELECT b.name, b.address FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.date = '2015-02-02' AND i.type = 'reinspection';"}
{"sample_id": 8802, "db_id": "food_inspection", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.name = 'Chairman Bao' THEN T1.score ELSE 0 END) AS REAL) / COUNT(CASE WHEN T1.type = 'Routine - Unscheduled' THEN T1.score ELSE 0 END) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id", "pred_sql": "SELECT AVG(i.score) AS average_score\nFROM inspections i\nJOIN businesses b ON i.business_id = b.business_id\nWHERE b.name = 'Chairman Bao' AND i.type = 'unscheduled routine';"}
{"sample_id": 8846, "db_id": "food_inspection", "gold_sql": "SELECT DISTINCT T3.tax_code, T2.type FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN businesses AS T3 ON T2.business_id = T3.business_id WHERE T3.name = 'Rue Lepic'", "pred_sql": "SELECT b.tax_code, i.type FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE b.name = 'Rue Lepic';"}
{"sample_id": 8807, "db_id": "food_inspection", "gold_sql": "SELECT COUNT(business_id) FROM inspections WHERE STRFTIME('%Y', \"date\") = '2014' AND type = 'Foodborne Illness Investigation'", "pred_sql": "SELECT COUNT(*) AS investigation_count FROM inspections WHERE date BETWEEN '2014-01-01' AND '2014-12-31' AND type = 'foodborne illness';"}
{"sample_id": 8837, "db_id": "food_inspection", "gold_sql": "SELECT T2.name, T2.business_id FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score < 50", "pred_sql": "SELECT b.name, b.business_certificate FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score < 50;"}
{"sample_id": 8829, "db_id": "food_inspection", "gold_sql": "SELECT T1.\"date\", T1.score, T1.type FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.tax_code = 'AA'", "pred_sql": "SELECT inspections.date, inspections.score, inspections.type FROM inspections JOIN businesses ON inspections.business_id = businesses.business_id WHERE businesses.tax_code = 'AA';"}
{"sample_id": 8843, "db_id": "food_inspection", "gold_sql": "SELECT DISTINCT T2.owner_name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = 100", "pred_sql": "SELECT b.owner_name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score = 100;"}
{"sample_id": 8820, "db_id": "food_inspection", "gold_sql": "SELECT T4.owner_name FROM violations AS T3 INNER JOIN businesses AS T4 ON T3.business_id = T4.business_id INNER JOIN ( SELECT T2.owner_name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id GROUP BY T2.owner_name ORDER BY COUNT(T1.business_id) DESC LIMIT 5 ) AS T5 ON T4.owner_name = T5.owner_name WHERE T3.risk_category = 'High Risk' GROUP BY T4.owner_name ORDER BY COUNT(T3.risk_category) DESC LIMIT 1", "pred_sql": "SELECT owner_name FROM businesses WHERE owner_name IN (SELECT owner_name FROM businesses GROUP BY owner_name ORDER BY COUNT(business_id) DESC LIMIT 5) AND business_id IN (SELECT business_id FROM violations WHERE risk_category = 'High') GROUP BY owner_name ORDER BY COUNT(violations.business_id) DESC LIMIT 1;"}
{"sample_id": 8784, "db_id": "food_inspection", "gold_sql": "SELECT COUNT(T2.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Tiramisu Kitchen' AND T1.type = 'Routine - Unscheduled' AND T1.score > 70", "pred_sql": "SELECT COUNT(*) AS high_score_inspections FROM inspections WHERE business_id = (SELECT business_id FROM businesses WHERE name = 'Tiramisu Kitchen') AND score > 70;"}
{"sample_id": 8791, "db_id": "food_inspection", "gold_sql": "SELECT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = 100 AND T1.\"date\" = '2016-09-28' AND T1.type = 'Routine - Unscheduled'", "pred_sql": "SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score = 100 AND i.date = '2016-09-28' AND i.type = 'unscheduled routine';"}
{"sample_id": 8785, "db_id": "food_inspection", "gold_sql": "SELECT CASE WHEN SUM(CASE WHEN T2.name = 'OMNI S.F. Hotel - 2nd Floor Pantry' THEN 1 ELSE 0 END) > SUM(CASE WHEN T2.name = 'Tiramisu Kitchen' THEN 1 ELSE 0 END) THEN 'OMNI S.F. Hotel - 2nd Floor Pantry' ELSE 'Tiramisu Kitchen' END AS result FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'Low Risk'", "pred_sql": "SELECT b.name, COUNT(v.violation_type_id) AS low_risk_violations\nFROM businesses b\nJOIN violations v ON b.business_id = v.business_id\nWHERE v.risk_category = 'Low' AND (b.name = 'Tiramisu Kitchen' OR b.name = 'OMNI S.F. Hotel - 2nd Floor Pantry')\nGROUP BY b.name\nORDER BY low_risk_violations DESC;"}
{"sample_id": 8850, "db_id": "food_inspection", "gold_sql": "SELECT DISTINCT T1.violation_type_id FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.business_id BETWEEN 30 AND 50 AND T2.address = '747 IRVING St' AND T2.city = 'San Francisco'", "pred_sql": "SELECT v.violation_type_id FROM violations v JOIN businesses b ON v.business_id = b.business_id WHERE b.business_id BETWEEN '30' AND '50' AND b.address = '747 IRVING St' AND b.city = 'San Francisco';"}
{"sample_id": 8823, "db_id": "food_inspection", "gold_sql": "SELECT business_id FROM inspections WHERE type = 'Structural Inspection' AND \"date\" LIKE '2016-02%'", "pred_sql": "SELECT DISTINCT b.business_id FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.type = 'structural' AND i.date BETWEEN '2016-02-01' AND '2016-02-29';"}
{"sample_id": 895, "db_id": "cs_semester", "gold_sql": "SELECT T2.gpa FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'free'", "pred_sql": "SELECT s.gpa FROM student s JOIN ra r ON s.student_id = r.student_id WHERE r.salary = 'free';"}
{"sample_id": 893, "db_id": "cs_semester", "gold_sql": "SELECT COUNT(student_id) FROM student WHERE type = 'RPG'", "pred_sql": "SELECT COUNT(*) AS research_postgraduate_count FROM student WHERE type = 'RPG';"}
{"sample_id": 963, "db_id": "cs_semester", "gold_sql": "SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.diff = 3 AND T1.intelligence = 2", "pred_sql": "SELECT COUNT(DISTINCT r.student_id) AS student_count \nFROM registration r \nJOIN course c ON r.course_id = c.course_id \nJOIN student s ON r.student_id = s.student_id \nWHERE c.diff = '3' AND s.intelligence = '2';"}
{"sample_id": 887, "db_id": "cs_semester", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.grade = 'B' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Computer Network'", "pred_sql": "SELECT (COUNT(CASE WHEN r.grade = 3 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_b_students\nFROM registration r\nJOIN course c ON r.course_id = c.course_id\nWHERE c.name = 'Computer Network';"}
{"sample_id": 942, "db_id": "cs_semester", "gold_sql": "SELECT name FROM course WHERE credit = ( SELECT MAX(credit) FROM course ) AND diff = ( SELECT MAX(diff) FROM course )", "pred_sql": "SELECT * FROM course ORDER BY diff DESC, credit DESC LIMIT 1;"}
{"sample_id": 920, "db_id": "cs_semester", "gold_sql": "SELECT DISTINCT T1.f_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.type = 'UG' AND T1.gpa > 3.7", "pred_sql": "SELECT course.name FROM course JOIN registration ON course.course_id = registration.course_id JOIN student ON registration.student_id = student.student_id WHERE student.type = 'UG' AND student.gpa >= 3.7;"}
{"sample_id": 863, "db_id": "cs_semester", "gold_sql": "SELECT COUNT(student_id) FROM registration WHERE grade = 'B' AND student_id IN ( SELECT student_id FROM student WHERE gpa > 3 AND course_id IN ( SELECT course_id FROM course WHERE name = 'Machine Learning Theory' ) )", "pred_sql": "SELECT COUNT(DISTINCT s.student_id) AS student_count \nFROM student s \nJOIN registration r ON s.student_id = r.student_id \nJOIN course c ON r.course_id = c.course_id \nWHERE r.grade = 3 AND c.name = 'Machine Learning Theory' AND s.gpa > 3;"}
{"sample_id": 921, "db_id": "cs_semester", "gold_sql": "SELECT T3.f_name, T3.l_name, T2.capability FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T1.graduate_from = 'University of Washington'", "pred_sql": "SELECT s.f_name, s.l_name, r.capability \nFROM student s \nJOIN ra r ON s.student_id = r.student_id \nJOIN prof p ON r.prof_id = p.prof_id \nWHERE p.graduate_from = 'University of Washington';"}
{"sample_id": 960, "db_id": "cs_semester", "gold_sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T1.salary = 'high' ORDER BY T2.teachingability DESC LIMIT 1", "pred_sql": "SELECT COUNT(ra.student_id) AS high_salary_students\nFROM ra\nJOIN prof ON ra.prof_id = prof.prof_id\nWHERE prof.teachingability = (SELECT MAX(teachingability) FROM prof) AND ra.salary = 'high';"}
{"sample_id": 866, "db_id": "cs_semester", "gold_sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE (T1.f_name = 'Laughton' OR T1.f_name = 'Willie') AND (T1.l_name = 'Antonio' OR T1.l_name = 'Rechert') AND T3.name = 'Machine Learning Theory' ORDER BY T2.sat DESC LIMIT 1", "pred_sql": "SELECT s.f_name, s.l_name, r.sat FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.name = 'Machine Learning Theory' AND (s.f_name = 'Willie' AND s.l_name = 'Rechert' OR s.f_name = 'Laughton' AND s.l_name = 'Antonio')"}
{"sample_id": 934, "db_id": "cs_semester", "gold_sql": "SELECT T3.diff FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.grade = 'A' AND T1.intelligence = 5", "pred_sql": "SELECT c.diff FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE s.intelligence = 5 AND r.grade = 4;"}
{"sample_id": 878, "db_id": "cs_semester", "gold_sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability = '1' AND T2.gender = 'Female'", "pred_sql": "SELECT COUNT(ra.student_id) AS research_assistant_count\nFROM ra\nJOIN prof ON ra.prof_id = prof.prof_id\nWHERE prof.gender = 0  -- Assuming 0 represents female\nAND prof.teachingability = (SELECT MIN(teachingability) FROM prof WHERE gender = 0);"}
{"sample_id": 897, "db_id": "cs_semester", "gold_sql": "SELECT COUNT(course_id) FROM registration WHERE student_id IN ( SELECT student_id FROM student WHERE gpa = ( SELECT MAX(gpa) FROM student ) )", "pred_sql": "SELECT COUNT(DISTINCT r.course_id) AS course_count\nFROM registration r\nJOIN student s ON r.student_id = s.student_id\nWHERE s.gpa = (SELECT MAX(gpa) FROM student);"}
{"sample_id": 870, "db_id": "cs_semester", "gold_sql": "SELECT SUM(T3.gpa) / COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T1.student_id = T3.student_id WHERE T2.first_name = 'Ogdon' AND T2.last_name = 'Zywicki'", "pred_sql": "SELECT AVG(s.gpa) AS average_gpa\nFROM ra r\nJOIN student s ON r.student_id = s.student_id\nJOIN prof p ON r.prof_id = p.prof_id\nWHERE p.first_name = 'Ogdon' AND p.last_name = 'Zywicki';"}
{"sample_id": 910, "db_id": "cs_semester", "gold_sql": "SELECT CAST(SUM(CASE WHEN gender = 'Male' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender = 'Female' THEN 1 ELSE 0 END) FROM prof", "pred_sql": "SELECT gender, COUNT(*) AS count FROM prof GROUP BY gender;"}
{"sample_id": 892, "db_id": "cs_semester", "gold_sql": "SELECT COUNT(prof_id) FROM prof WHERE gender = 'Female' AND popularity = ( SELECT MAX(popularity) FROM prof )", "pred_sql": "SELECT COUNT(*) AS female_professors_count FROM prof WHERE gender = 1 AND popularity IN (SELECT popularity FROM prof ORDER BY popularity DESC LIMIT (SELECT COUNT(*) FROM prof) / 2)"}
{"sample_id": 927, "db_id": "cs_semester", "gold_sql": "SELECT credit FROM course WHERE name = 'Computer Vision'", "pred_sql": "SELECT credit FROM course WHERE name = 'Computer Vision';"}
{"sample_id": 954, "db_id": "cs_semester", "gold_sql": "SELECT T3.name, T2.f_name, T2.l_name FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T1.course_id = T3.course_id WHERE T1.grade = 'A' GROUP BY T3.name ORDER BY COUNT(T1.student_id) DESC LIMIT 1", "pred_sql": "SELECT c.name, s.f_name, s.l_name \nFROM course c \nJOIN registration r ON c.course_id = r.course_id \nJOIN student s ON r.student_id = s.student_id \nWHERE r.grade = 4 \nAND c.course_id = (SELECT r2.course_id \n                   FROM registration r2 \n                   WHERE r2.grade = 4 \n                   GROUP BY r2.course_id \n                   ORDER BY COUNT(r2.student_id) DESC \n                   LIMIT 1)"}
{"sample_id": 917, "db_id": "cs_semester", "gold_sql": "SELECT T1.first_name, T1.last_name, T1.graduate_from FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Olia' AND T3.l_name = 'Rabier'", "pred_sql": "SELECT prof.first_name || ' ' || prof.last_name AS full_name, prof.graduate_from FROM prof JOIN ra ON prof.prof_id = ra.prof_id JOIN student ON ra.student_id = student.student_id WHERE student.f_name = 'Olia' AND student.l_name = 'Rabier';"}
{"sample_id": 868, "db_id": "cs_semester", "gold_sql": "SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Machine Learning Theory' AND T1.type = 'UG'", "pred_sql": "SELECT COUNT(DISTINCT s.student_id) AS undergraduate_count\nFROM student s\nJOIN registration r ON s.student_id = r.student_id\nJOIN course c ON r.course_id = c.course_id\nWHERE c.name = 'Machine Learning Theory' AND s.type = 'UG';"}
{"sample_id": 891, "db_id": "cs_semester", "gold_sql": "SELECT COUNT(student_id) FROM student WHERE type = 'UG' AND intelligence = ( SELECT MAX(intelligence) FROM student )", "pred_sql": "SELECT COUNT(*) AS student_count FROM student WHERE intelligence = (SELECT MAX(intelligence) FROM student WHERE type = 'UG') AND type = 'UG';"}
{"sample_id": 871, "db_id": "cs_semester", "gold_sql": "SELECT CAST(SUM(T1.sat) AS REAL) / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Machine Learning Theory'", "pred_sql": "SELECT AVG(sat) AS average_satisfaction FROM registration JOIN course ON registration.course_id = course.course_id WHERE course.name = 'Machine Learning Theory';"}
{"sample_id": 6799, "db_id": "retails", "gold_sql": "SELECT c_mktsegment, c_name, c_address, c_phone FROM customer WHERE c_custkey = 3", "pred_sql": "SELECT c_mktsegment, c_name, c_address, c_phone FROM customer WHERE c_custkey = '3';"}
{"sample_id": 6848, "db_id": "retails", "gold_sql": "SELECT T1.o_comment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'FURNITURE'", "pred_sql": "SELECT o_comment FROM orders JOIN customer ON orders.o_custkey = customer.c_custkey WHERE customer.c_mktsegment = 'furniture';"}
{"sample_id": 6914, "db_id": "retails", "gold_sql": "SELECT T2.l_extendedprice * (1 - T2.l_discount), T3.p_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN part AS T3 ON T2.l_partkey = T3.p_partkey WHERE T1.o_custkey = 111511 AND T1.o_orderkey = 53159", "pred_sql": "SELECT p.p_name, (l.l_extendedprice * (1 - l.l_discount)) AS discounted_price\nFROM lineitem l\nJOIN orders o ON l.l_orderkey = o.o_orderkey\nJOIN customer c ON o.o_custkey = c.c_custkey\nJOIN part p ON l.l_partkey = p.p_partkey\nWHERE c.c_custkey = '111511' AND o.o_orderkey = 53159;"}
{"sample_id": 6836, "db_id": "retails", "gold_sql": "SELECT T3.p_name, T4.s_name FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey INNER JOIN supplier AS T4 ON T1.ps_suppkey = T4.s_suppkey ORDER BY T2.l_extendedprice * (1 - T2.l_discount) - T1.ps_supplycost * T2.l_quantity DESC LIMIT 1", "pred_sql": "SELECT p.p_name, s.s_name, SUM((l.l_extendedprice * (1 - l.l_discount)) - (ps.ps_supplycost * l.l_quantity)) AS profit\nFROM lineitem l\nJOIN partsupp ps ON l.l_partkey = ps.ps_partkey\nJOIN part p ON ps.ps_partkey = p.p_partkey\nJOIN supplier s ON ps.ps_suppkey = s.s_suppkey\nGROUP BY p.p_name, s.s_name\nORDER BY profit DESC\nLIMIT 1;"}
{"sample_id": 6706, "db_id": "retails", "gold_sql": "SELECT COUNT(c_custkey) FROM customer WHERE c_acctbal < 0", "pred_sql": "SELECT COUNT(*) AS number_of_debt_customers FROM customer WHERE c_acctbal < 0;"}
{"sample_id": 6681, "db_id": "retails", "gold_sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'BRAZIL'", "pred_sql": "SELECT COUNT(*) AS customer_count FROM customer WHERE c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'Brazil');"}
{"sample_id": 6825, "db_id": "retails", "gold_sql": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_name = 'violet olive rose ivory sandy'", "pred_sql": "SELECT ps_supplycost FROM partsupp JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'violet olive rose ivory sandy';"}
{"sample_id": 6789, "db_id": "retails", "gold_sql": "SELECT T3.p_name FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T2.s_name = 'Supplier#000000034'", "pred_sql": "SELECT p.* FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey JOIN supplier s ON ps.ps_suppkey = s.s_suppkey WHERE s.s_name = 'Supplier#000000034';"}
{"sample_id": 6810, "db_id": "retails", "gold_sql": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T2.ps_supplycost < 10 AND T1.p_container = 'WRAP BAG' LIMIT 2", "pred_sql": "SELECT p_name, p_partkey FROM part JOIN partsupp ON part.p_partkey = partsupp.ps_partkey WHERE p_container = 'wrap bag' AND ps_supplycost < 10 LIMIT 2;"}
{"sample_id": 6887, "db_id": "retails", "gold_sql": "SELECT T1.l_shipdate FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T1.l_orderkey = 1 AND T2.p_name = 'burnished seashell gainsboro navajo chocolate'", "pred_sql": "SELECT l_shipdate FROM lineitem JOIN orders ON lineitem.l_orderkey = orders.o_orderkey JOIN part ON lineitem.l_partkey = part.p_partkey WHERE part.p_name = 'burnished seashell gainsboro navajo chocolate' AND orders.o_orderkey = 1;"}
{"sample_id": 6850, "db_id": "retails", "gold_sql": "SELECT T1.c_name FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal > 5000 AND T2.n_name = 'INDIA'", "pred_sql": "SELECT c_name FROM customer WHERE c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'India') AND c_acctbal > 5000;"}
{"sample_id": 6680, "db_id": "retails", "gold_sql": "SELECT COUNT(T1.o_orderpriority) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD' AND T1.o_orderpriority = '1-URGENT'", "pred_sql": "SELECT COUNT(*) AS urgent_order_count \nFROM orders \nJOIN customer ON orders.o_custkey = customer.c_custkey \nWHERE customer.c_mktsegment = 'household' AND orders.o_orderpriority = 0;"}
{"sample_id": 6786, "db_id": "retails", "gold_sql": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'REG AIR' AND T1.o_orderdate = '1995-03-22'", "pred_sql": "SELECT COUNT(*) AS item_count \nFROM lineitem l \nJOIN orders o ON l.l_orderkey = o.o_orderkey \nWHERE l.l_shipmode = 'REG AIR' \nAND o.o_orderdate = 19950322;"}
{"sample_id": 6864, "db_id": "retails", "gold_sql": "SELECT COUNT(p_partkey) FROM part WHERE p_container = 'JUMBO CASE'", "pred_sql": "SELECT COUNT(*) AS part_count FROM part WHERE p_container = 'jumbo case';"}
{"sample_id": 6779, "db_id": "retails", "gold_sql": "SELECT (CAST(SUM(IIF(STRFTIME('%Y', T2.l_shipdate) = 1995, 1, 0)) AS REAL) / 12) - (CAST(SUM(IIF(STRFTIME('%Y', T2.l_shipdate) = 1996, 1, 0)) AS REAL) / 12) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderpriority = '5-LOW' AND T2.l_shipmode = 'TRUCK'", "pred_sql": "SELECT strftime('%Y-%m', o_orderdate) AS month, AVG(o_orderkey) AS avg_low_priority_orders\nFROM orders\nJOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey\nWHERE o_orderpriority = 1 AND l_shipmode = 'TRUCK' AND (strftime('%Y', o_orderdate) = '1995' OR strftime('%Y', o_orderdate) = '1996')\nGROUP BY month\nORDER BY month;"}
{"sample_id": 6736, "db_id": "retails", "gold_sql": "SELECT SUM(T3.l_extendedprice * (1 - T3.l_discount) - T2.ps_supplycost * T3.l_quantity) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN lineitem AS T3 ON T2.ps_partkey = T3.l_partkey AND T2.ps_suppkey = T3.l_suppkey WHERE T1.p_name = 'chocolate floral blue coral cyan'", "pred_sql": "SELECT SUM((l_extendedprice * (1 - l_discount)) - (ps_supplycost * l_quantity)) AS total_profit\nFROM lineitem\nJOIN partsupp ON lineitem.l_partkey = partsupp.ps_partkey\nJOIN part ON lineitem.l_partkey = part.p_partkey\nWHERE part.p_name IN ('chocolate', 'floral', 'blue', 'coral', 'cyan');"}
{"sample_id": 6677, "db_id": "retails", "gold_sql": "SELECT T1.o_comment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD'", "pred_sql": "SELECT o_comment FROM orders WHERE o_custkey IN (SELECT c_custkey FROM customer WHERE c_mktsegment = 'household')"}
{"sample_id": 6871, "db_id": "retails", "gold_sql": "SELECT T2.s_name FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_name = 'hot spring dodger dim light' ORDER BY T1.ps_supplycost LIMIT 1", "pred_sql": "SELECT s_name FROM supplier s JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey JOIN part p ON ps.ps_partkey = p.p_partkey WHERE p.p_name = 'hot spring dodger dim light' ORDER BY ps.ps_supplycost ASC LIMIT 1;"}
{"sample_id": 6764, "db_id": "retails", "gold_sql": "SELECT p_partkey FROM part WHERE p_retailprice > ( SELECT AVG(p_retailprice) FROM part )", "pred_sql": "SELECT p_partkey FROM part WHERE p_retailprice > (SELECT AVG(p_retailprice) FROM part);"}
{"sample_id": 6743, "db_id": "retails", "gold_sql": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_quantity < 30 AND l_shipmode = 'RAIL'", "pred_sql": "SELECT COUNT(*) AS line_item_count FROM lineitem WHERE l_shipmode = 'rail' AND l_quantity < 30;"}
{"sample_id": 6856, "db_id": "retails", "gold_sql": "SELECT CAST(SUM(IIF(T1.c_mktsegment = 'HOUSEHOLD', 1, 0)) AS REAL) * 100 / COUNT(T1.c_mktsegment) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'INDONESIA'", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM customer WHERE c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'Indonesia'))) AS household_percentage\nFROM customer\nWHERE c_mktsegment = 'HOUSEHOLD' AND c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'Indonesia');"}
{"sample_id": 6907, "db_id": "retails", "gold_sql": "SELECT T.n_name FROM ( SELECT T2.n_name, SUM(T1.s_acctbal) AS num FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 GROUP BY T1.s_nationkey ) AS T ORDER BY T.num LIMIT 2", "pred_sql": "SELECT n.n_name, COUNT(s.s_suppkey) AS supplier_count\nFROM supplier s\nJOIN nation n ON s.s_nationkey = n.n_nationkey\nWHERE s.s_acctbal < 0\nGROUP BY n.n_name\nORDER BY supplier_count DESC\nLIMIT 2;"}
{"sample_id": 6682, "db_id": "retails", "gold_sql": "SELECT T1.c_phone FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'HOUSEHOLD' AND T2.n_name = 'BRAZIL'", "pred_sql": "SELECT c_phone FROM customer WHERE c_mktsegment = 'household' AND c_nationkey IN (SELECT n_nationkey FROM nation WHERE n_name = 'Brazil');"}
{"sample_id": 6762, "db_id": "retails", "gold_sql": "SELECT AVG(l_linenumber) FROM lineitem WHERE l_shipdate BETWEEN '1994-01-01' AND '1994-01-30'", "pred_sql": "SELECT AVG(daily_items) AS average_items_shipped\nFROM (\n    SELECT COUNT(*) AS daily_items\n    FROM lineitem\n    WHERE l_shipdate >= 19940401 AND l_shipdate < 19940501\n    GROUP BY l_shipdate\n) AS daily_counts;"}
{"sample_id": 6671, "db_id": "retails", "gold_sql": "SELECT MAX(l_shipdate) FROM lineitem WHERE l_orderkey = 1", "pred_sql": "SELECT MAX(l_shipdate) AS latest_ship_date FROM lineitem WHERE l_orderkey = 1;"}
{"sample_id": 6780, "db_id": "retails", "gold_sql": "SELECT c_custkey FROM customer WHERE c_acctbal < 0", "pred_sql": "SELECT c_custkey FROM customer WHERE c_acctbal < 0;"}
{"sample_id": 6881, "db_id": "retails", "gold_sql": "SELECT T.l_orderkey FROM ( SELECT T2.l_orderkey, COUNT(T2.l_partkey) AS num FROM part AS T1 INNER JOIN lineitem AS T2 ON T1.p_partkey = T2.l_partkey WHERE T1.p_container = 'JUMBO CASE' GROUP BY T2.l_orderkey ) AS T WHERE T.num > 2", "pred_sql": "SELECT o.o_orderkey \nFROM orders o \nJOIN lineitem l ON o.o_orderkey = l.l_orderkey \nJOIN part p ON l.l_partkey = p.p_partkey \nWHERE p.p_container = 'JUMBO' \nGROUP BY o.o_orderkey \nHAVING COUNT(l.l_partkey) > 2;"}
{"sample_id": 6748, "db_id": "retails", "gold_sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'AUTOMOBILE' AND T2.n_name = 'BRAZIL'", "pred_sql": "SELECT COUNT(*) AS customer_count FROM customer WHERE c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'Brazil') AND c_mktsegment = 'AUTOMOBILE';"}
{"sample_id": 6689, "db_id": "retails", "gold_sql": "SELECT COUNT(n_nationkey) FROM nation WHERE n_regionkey = 2", "pred_sql": "SELECT COUNT(DISTINCT n_nationkey) AS country_count FROM nation WHERE n_regionkey = '2';"}
{"sample_id": 6674, "db_id": "retails", "gold_sql": "SELECT c_phone FROM customer WHERE c_name = 'Customer#000000001'", "pred_sql": "SELECT c_phone FROM customer WHERE c_custkey = '000000001';"}
{"sample_id": 6738, "db_id": "retails", "gold_sql": "SELECT T3.s_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_name = 'smoke red pale saddle plum'", "pred_sql": "SELECT s_name FROM supplier s JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey JOIN part p ON ps.ps_partkey = p.p_partkey WHERE p.p_name = 'smoke red pale saddle plum';"}
{"sample_id": 6721, "db_id": "retails", "gold_sql": "SELECT T1.l_extendedprice * (1 - T1.l_discount) - T2.ps_supplycost * T1.l_quantity AS num FROM lineitem AS T1 INNER JOIN partsupp AS T2 ON T1.l_suppkey = T2.ps_suppkey INNER JOIN part AS T3 ON T2.ps_partkey = T3.p_partkey WHERE T1.l_receiptdate = '1996-05-07' AND T1.l_shipinstruct = 'DELIVER IN PERSON' AND T3.p_name = 'smoke turquoise purple blue salmon'", "pred_sql": "SELECT SUM((l.l_extendedprice * (1 - l.l_discount)) - (ps.ps_supplycost * l.l_quantity)) AS profit\nFROM lineitem l\nJOIN partsupp ps ON l.l_partkey = ps.ps_partkey\nJOIN part p ON l.l_partkey = p.p_partkey\nWHERE p.p_name IN ('smoke', 'turquoise', 'purple', 'blue', 'salmon')\nAND l.l_shipdate = '1996-05-07'\nAND l.l_shipmode = 'in person';"}
{"sample_id": 6790, "db_id": "retails", "gold_sql": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_type = 'LARGE BURNISHED COPPER'", "pred_sql": "SELECT ps_supplycost FROM partsupp JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_size = 'large' AND part.p_name = 'burnished copper';"}
{"sample_id": 6768, "db_id": "retails", "gold_sql": "SELECT T1.c_name, T1.c_phone FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal > ( SELECT AVG(c_acctbal) FROM customer ) ORDER BY T1.c_name", "pred_sql": "SELECT c_name, c_phone FROM customer WHERE c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'India') AND c_acctbal > (SELECT AVG(c_acctbal) FROM customer)"}
{"sample_id": 6812, "db_id": "retails", "gold_sql": "SELECT T2.n_name FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey WHERE T1.r_name = 'Africa'", "pred_sql": "SELECT n_name FROM nation WHERE n_regionkey IN (SELECT r_regionkey FROM region WHERE r_name = 'Africa');"}
{"sample_id": 6891, "db_id": "retails", "gold_sql": "SELECT DISTINCT T1.l_shipmode FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name = 'burnished seashell gainsboro navajo chocolate'", "pred_sql": "SELECT DISTINCT l_shipmode FROM lineitem JOIN part ON lineitem.l_partkey = part.p_partkey WHERE part.p_name = 'burnished seashell gainsboro navajo chocolate';"}
{"sample_id": 6801, "db_id": "retails", "gold_sql": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_quantity > 40 AND l_shipmode = 'AIR'", "pred_sql": "SELECT COUNT(*) AS line_item_count FROM lineitem WHERE l_quantity > 40 AND l_shipmode = 'air';"}
{"sample_id": 6823, "db_id": "retails", "gold_sql": "SELECT COUNT(ps_suppkey) FROM partsupp WHERE ps_availqty < 10", "pred_sql": "SELECT COUNT(*) AS close_to_oos_count FROM partsupp WHERE ps_availqty < 10;"}
{"sample_id": 6806, "db_id": "retails", "gold_sql": "SELECT l_extendedprice * (1 - l_discount) FROM lineitem WHERE l_linenumber = 1", "pred_sql": "SELECT l_extendedprice * (1 - l_discount) AS discounted_price FROM lineitem WHERE l_linenumber = 1;"}
{"sample_id": 6778, "db_id": "retails", "gold_sql": "SELECT CAST(SUM(IIF(T3.s_acctbal < ( SELECT AVG(supplier.s_acctbal) FROM supplier ), 1, 0)) AS REAL) * 100 / COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey INNER JOIN supplier AS T3 ON T1.n_nationkey = T3.s_nationkey WHERE T2.r_name = 'EUROPE'", "pred_sql": "SELECT (COUNT(CASE WHEN s_acctbal < avg_acctbal THEN 1 END) * 100.0 / COUNT(*)) AS percentage_below_average\nFROM supplier\nJOIN nation ON supplier.s_nationkey = nation.n_nationkey\nJOIN region ON nation.n_regionkey = region.r_regionkey\nCROSS JOIN (SELECT AVG(s_acctbal) AS avg_acctbal FROM supplier) AS avg_table\nWHERE region.r_name = 'Europe';"}
{"sample_id": 6678, "db_id": "retails", "gold_sql": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey ORDER BY T1.o_totalprice DESC LIMIT 1", "pred_sql": "SELECT c_name FROM customer WHERE c_custkey = (SELECT o_custkey FROM orders ORDER BY o_totalprice DESC LIMIT 1)"}
{"sample_id": 6837, "db_id": "retails", "gold_sql": "SELECT CAST(SUM(IIF(T1.r_name = 'ASIA', 1, 0)) AS REAL) * 100 / COUNT(T1.r_regionkey) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey INNER JOIN supplier AS T3 ON T2.n_nationkey = T3.s_nationkey", "pred_sql": "SELECT COUNT(*) * 1.0 / (SELECT COUNT(*) FROM supplier) AS proportion_of_asian_suppliers FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_regionkey = (SELECT r_regionkey FROM region WHERE r_name = 'Asia');"}
{"sample_id": 6673, "db_id": "retails", "gold_sql": "SELECT o_comment FROM orders WHERE o_totalprice = ( SELECT MAX(o_totalprice) FROM orders )", "pred_sql": "SELECT o_comment FROM orders WHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders);"}
{"sample_id": 6684, "db_id": "retails", "gold_sql": "SELECT COUNT(T2.c_custkey) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY'", "pred_sql": "SELECT COUNT(*) AS total_orders FROM orders WHERE o_custkey IN (SELECT c_custkey FROM customer WHERE c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'Germany'));"}
{"sample_id": 6889, "db_id": "retails", "gold_sql": "SELECT T.p_name FROM ( SELECT T2.p_name, SUM(T1.l_quantity) AS num FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name IN ('salmon white grey tan navy', 'burnished seashell gainsboro navajo chocolate') GROUP BY T1.l_partkey ) AS T ORDER BY T.num DESC LIMIT 1", "pred_sql": "SELECT p.p_name, SUM(l.l_quantity) AS total_quantity\nFROM lineitem l\nJOIN part p ON l.l_partkey = p.p_partkey\nWHERE l.l_orderkey = 1 AND (p.p_name = 'burnished seashell gainsboro navajo chocolate' OR p.p_name = 'salmon white grey tan navy')\nGROUP BY p.p_name\nORDER BY total_quantity DESC\nLIMIT 1;"}
{"sample_id": 6878, "db_id": "retails", "gold_sql": "SELECT SUM(num) FROM ( SELECT COUNT(T3.s_name) AS num FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_type = 'PROMO BRUSHED STEEL' GROUP BY T2.ps_partkey HAVING SUM(T2.ps_availqty) < 5000 ) T", "pred_sql": "SELECT COUNT(*) AS total_parts\nFROM part p\nJOIN partsupp ps ON p.p_partkey = ps.ps_partkey\nGROUP BY p.p_partkey\nHAVING SUM(ps.ps_availqty) < 5000 AND p.p_type = 'promo brushed steel';"}
{"sample_id": 6913, "db_id": "retails", "gold_sql": "SELECT T3.p_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN part AS T3 ON T2.l_partkey = T3.p_partkey WHERE T1.o_custkey = 110942", "pred_sql": "SELECT p.p_name FROM part p JOIN lineitem l ON p.p_partkey = l.l_partkey JOIN orders o ON l.l_orderkey = o.o_orderkey JOIN customer c ON o.o_custkey = c.c_custkey WHERE c.c_custkey = '110942';"}
{"sample_id": 6857, "db_id": "retails", "gold_sql": "SELECT p_name FROM part WHERE p_type = 'PROMO BRUSHED STEEL'", "pred_sql": "SELECT p_name FROM part WHERE p_type = 'promo brushed steel';"}
{"sample_id": 6687, "db_id": "retails", "gold_sql": "SELECT AVG(T3.o_totalprice) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY'", "pred_sql": "SELECT AVG(o_totalprice) AS average_order_price FROM orders JOIN customer ON orders.o_custkey = customer.c_custkey JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'Germany';"}
{"sample_id": 2884, "db_id": "professional_basketball", "gold_sql": "SELECT coachID FROM coaches GROUP BY coachID HAVING COUNT(DISTINCT tmID) > 2", "pred_sql": "SELECT coachid FROM coaches GROUP BY coachid HAVING COUNT(DISTINCT tmid) > 2;"}
{"sample_id": 2903, "db_id": "professional_basketball", "gold_sql": "SELECT T2.tmID FROM series_post AS T1 INNER JOIN teams AS T2 ON T1.tmIDWinner = T2.tmID WHERE T1.year = 1947 AND T1.round = 'QF' AND T2.d_pts = 3513", "pred_sql": "SELECT t.name \nFROM teams t \nJOIN series_post s ON t.tmid = s.tmidwinner \nWHERE s.year = 1947 AND s.round = 'QF' AND t.d_pts = 3513;"}
{"sample_id": 2917, "db_id": "professional_basketball", "gold_sql": "SELECT T3.firstname, T3.lastname FROM player_allstar AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID INNER JOIN draft AS T3 ON T1.playerID = T3.playerID WHERE T2.year BETWEEN 1990 AND 2000 ORDER BY T1.points DESC LIMIT 1", "pred_sql": "SELECT p.firstname, p.lastname\nFROM players p\nJOIN draft d ON p.playerid = d.playerid\nJOIN player_allstar pa ON p.playerid = pa.playerid\nWHERE d.draftyear BETWEEN '1990' AND '2000'\nORDER BY pa.points DESC\nLIMIT 1;"}
{"sample_id": 2826, "db_id": "professional_basketball", "gold_sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.hsCity = 'Chicago' AND T2.conference = 'West'", "pred_sql": "SELECT COUNT(DISTINCT p.playerid) AS player_count\nFROM players p\nJOIN players_teams pt ON p.playerid = pt.playerid\nWHERE p.hscity = 'Chicago' AND pt.conference = 'west';"}
{"sample_id": 2939, "db_id": "professional_basketball", "gold_sql": "SELECT T2.homeWon FROM draft AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.draftYear = T2.year WHERE T1.draftRound = 1 AND T1.draftSelection = 12 AND T1.draftYear = 1998", "pred_sql": "SELECT t.homewon FROM teams t JOIN draft d ON t.year = d.draftyear WHERE d.draftround = 1 AND d.draftselection = 12 AND t.year = '1998';"}
{"sample_id": 2896, "db_id": "professional_basketball", "gold_sql": "SELECT CAST(SUM(T2.o_rebounds) AS REAL) * 100 / SUM(T2.rebounds) FROM players_teams AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 2000", "pred_sql": "SELECT (SUM(orebounds) * 100.0 / SUM(rebounds)) AS offense_rebound_percentage\nFROM players_teams\nWHERE year = '2000' AND rebounds IS NOT NULL;"}
{"sample_id": 2855, "db_id": "professional_basketball", "gold_sql": "SELECT COUNT(*) FROM ( SELECT T2.name, SUM(T1.points) FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 1937 GROUP BY T2.name HAVING SUM(points) >= 500 ) AS T3", "pred_sql": "SELECT COUNT(DISTINCT pt.tmid) AS team_count\nFROM players_teams pt\nWHERE pt.year = '1937' AND pt.points >= 500;"}
{"sample_id": 2924, "db_id": "professional_basketball", "gold_sql": "SELECT COUNT(T2.playerID) FROM draft AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.draftYear = 1996 AND T1.draftRound = 1", "pred_sql": "SELECT COUNT(DISTINCT dp.playerid) AS first_round_all_stars\nFROM draft d\nJOIN players p ON d.playerid = p.playerid\nJOIN player_allstar pa ON p.playerid = pa.playerid\nWHERE d.draftyear = '1996' AND d.draftround = '1' AND d.lgid = 'NBA';"}
{"sample_id": 2849, "db_id": "professional_basketball", "gold_sql": "SELECT DISTINCT T1.lastName, T1.firstName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.birthDate > 1950 AND CAST(T2.o_rebounds AS REAL) * 100 / T2.rebounds > 30", "pred_sql": "SELECT p.lastname, p.firstname \nFROM players p \nJOIN players_teams pt ON p.playerid = pt.playerid \nWHERE p.birthdate > '1950-01-01' \nAND (CAST(pt.orebounds AS FLOAT) / NULLIF(pt.rebounds, 0)) > 0.3;"}
{"sample_id": 2836, "db_id": "professional_basketball", "gold_sql": "SELECT coachID FROM coaches GROUP BY tmID, coachID, won, lost HAVING CAST(won AS REAL) * 100 / (won + lost) > 80", "pred_sql": "SELECT DISTINCT c.coachid, c.year, c.tmid, c.lgid, c.won, c.lost \nFROM coaches c \nJOIN teams t ON c.tmid = t.tmid AND c.year = t.year \nWHERE (CAST(c.won AS FLOAT) / (CAST(c.won AS FLOAT) + CAST(c.lost AS FLOAT))) >= 0.8;"}
{"sample_id": 2922, "db_id": "professional_basketball", "gold_sql": "SELECT CAST(SUM(IIF(T2.lgID = 'ABA', 1970 - strftime('%Y', T3.birthDate), 0)) AS REAL) / COUNT(IIF(T2.lgID = 'ABA', 1, 0)) - CAST(SUM(IIF(T2.lgID = 'NBA', 1970 - strftime('%Y', T3.birthDate), 0)) AS REAL) / COUNT(IIF(T2.lgID = 'NBA', 1, 0)) FROM draft AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID INNER JOIN players AS T3 ON T2.playerID = T3.playerID WHERE T1.draftYear BETWEEN 1970 AND 1970", "pred_sql": "SELECT AVG(CASE WHEN d.lgid = 'ABA' THEN p.birthdate END) AS avg_age_aba, AVG(CASE WHEN d.lgid = 'NBA' THEN p.birthdate END) AS avg_age_nba\nFROM draft d\nJOIN players p ON d.playerid = p.playerid\nWHERE d.draftyear = '1970'"}
{"sample_id": 2911, "db_id": "professional_basketball", "gold_sql": "SELECT DISTINCT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id = 1997 ORDER BY T2.steals DESC LIMIT 5", "pred_sql": "SELECT p.firstname || ' ' || p.lastname AS full_name, pa.steals \nFROM players p \nJOIN player_allstar pa ON p.playerid = pa.playerid \nWHERE pa.season_id = 1997 \nORDER BY pa.steals DESC \nLIMIT 5;"}
{"sample_id": 2952, "db_id": "professional_basketball", "gold_sql": "SELECT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 2011 AND T2.rebounds > 600", "pred_sql": "SELECT t.name FROM teams t JOIN players_teams pt ON t.tmid = pt.tmid JOIN players p ON pt.playerid = p.playerid WHERE pt.year = '2011' AND pt.rebounds > 600 GROUP BY t.name HAVING COUNT(p.playerid) > 1;"}
{"sample_id": 2819, "db_id": "professional_basketball", "gold_sql": "SELECT DISTINCT T2.tmID FROM series_post AS T1 INNER JOIN teams AS T2 ON T1.tmIDWinner = T2.tmID WHERE T2.won > 60 AND T1.year = 1996 AND T1.round = 'CSF' AND T1.tmIDLoser = 'LAL'", "pred_sql": "SELECT t.name AS winning_team_name \nFROM series_post sp \nJOIN teams t ON sp.tmidwinner = t.tmid AND sp.year = t.year \nWHERE sp.round = 'F' \nAND sp.tmidloser = 'LAL' \nAND t.won > 60 \nAND t.lgid = 'NBA' \nAND t.year = '1996';"}
{"sample_id": 2796, "db_id": "professional_basketball", "gold_sql": "SELECT CAST(homeWon AS REAL) * 100 / won  FROM teams", "pred_sql": "SELECT (SUM(CASE WHEN homewon > 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS home_win_percentage\nFROM teams\nWHERE won > 0;"}
{"sample_id": 2925, "db_id": "professional_basketball", "gold_sql": "SELECT DISTINCT T3.tmID FROM players_teams AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T1.tmID = T3.tmID AND T1.year = T3.year WHERE T2.year = 1997 AND T2.award = 'Finals MVP' LIMIT 1", "pred_sql": "SELECT teams.name FROM awards_players JOIN players ON awards_players.playerid = players.playerid JOIN teams ON players.playerid = players_teams.playerid WHERE awards_players.year = '1997' AND awards_players.award = 'MVP' AND teams.year = '1997';"}
{"sample_id": 2834, "db_id": "professional_basketball", "gold_sql": "SELECT tmID FROM players_teams WHERE year = 2000 GROUP BY tmID ORDER BY SUM(PostPoints) DESC LIMIT 10", "pred_sql": "SELECT name, o_pts FROM teams WHERE year = '2000' ORDER BY o_pts DESC LIMIT 10;"}
{"sample_id": 2949, "db_id": "professional_basketball", "gold_sql": "SELECT DISTINCT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.GP = T2.GS", "pred_sql": "SELECT teams.name FROM players_teams JOIN teams ON players_teams.tmid = teams.tmid WHERE players_teams.gs = players_teams.gp GROUP BY teams.name ORDER BY COUNT(players_teams.playerid) DESC LIMIT 1;"}
{"sample_id": 2948, "db_id": "professional_basketball", "gold_sql": "SELECT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 2011 AND T2.GP = T2.GS GROUP BY T1.tmID, T2.steals ORDER BY T2.steals DESC LIMIT 1", "pred_sql": "SELECT pt.tmid, COUNT(pt.playerid) AS total_steals\nFROM players_teams pt\nJOIN players p ON pt.playerid = p.playerid\nWHERE pt.year = '2011' AND pt.gs = pt.gp\nGROUP BY pt.tmid\nORDER BY total_steals DESC\nLIMIT 1;"}
{"sample_id": 2945, "db_id": "professional_basketball", "gold_sql": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.lgID = 'PBLA' AND T2.GP = 10 AND T1.college = 'Central Missouri State' GROUP BY T1.firstName, T1.middleName, T1.lastName ORDER BY COUNT(T2.id) DESC LIMIT 1", "pred_sql": "SELECT p.firstname, p.lastname, COUNT(pt.gp) AS total_games\nFROM players p\nJOIN players_teams pt ON p.playerid = pt.playerid\nWHERE p.college = 'Central Missouri State'\nGROUP BY p.playerid\nORDER BY total_games DESC\nLIMIT 1;"}
{"sample_id": 2865, "db_id": "professional_basketball", "gold_sql": "SELECT T3.name FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T3.tmID = T2.tmID WHERE T1.college = 'UCLA' GROUP BY T3.name ORDER BY COUNT(DISTINCT T1.playerID) DESC LIMIT 1", "pred_sql": "SELECT teams.name FROM teams JOIN players_teams ON teams.tmid = players_teams.tmid JOIN players ON players_teams.playerid = players.playerid WHERE players.college = 'UCLA' GROUP BY teams.name ORDER BY COUNT(players.playerid) DESC LIMIT 1;"}
{"sample_id": 2895, "db_id": "professional_basketball", "gold_sql": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN draft AS T2 ON T1.playerID = T2.playerID WHERE T2.draftRound = 1 AND T1.birthCountry != 'USA' AND T2.draftYear = 1973", "pred_sql": "SELECT p.firstname || ' ' || p.lastname AS full_name \nFROM players p \nJOIN draft d ON p.playerid = d.playerid \nWHERE d.draftround = '1' \nAND d.draftyear = '1973' \nAND p.birthcountry != 'USA';"}
{"sample_id": 2800, "db_id": "professional_basketball", "gold_sql": "SELECT CAST(SUM(CASE WHEN rank = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(name) FROM teams", "pred_sql": "SELECT (COUNT(CASE WHEN playoff IS NOT NULL THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM teams WHERE rank = '1';"}
{"sample_id": 2942, "db_id": "professional_basketball", "gold_sql": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN player_allstar AS T3 ON T3.playerID = T1.playerID WHERE T3.season_id = 1997 ORDER BY T1.rebounds DESC LIMIT 1", "pred_sql": "SELECT pt.tmid\nFROM player_allstar AS pa\nJOIN players_teams AS pt ON pa.playerid = pt.playerid\nWHERE pa.season_id = 1997\nGROUP BY pt.tmid\nORDER BY SUM(pa.rebounds) DESC\nLIMIT 1;"}
{"sample_id": 2869, "db_id": "professional_basketball", "gold_sql": "SELECT AVG(DISTINCT height) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE conference = 'East'", "pred_sql": "SELECT AVG(height) AS average_height FROM players JOIN player_allstar ON players.playerid = player_allstar.playerid WHERE player_allstar.conference = 'east';"}
{"sample_id": 2816, "db_id": "professional_basketball", "gold_sql": "SELECT year FROM coaches WHERE coachID = 'costela01' ORDER BY CAST(won AS REAL) / (won + lost) DESC LIMIT 1", "pred_sql": "SELECT year, MAX(won) AS max_wins FROM coaches WHERE coachid = 'costela01' GROUP BY year ORDER BY max_wins DESC LIMIT 1;"}
{"sample_id": 2844, "db_id": "professional_basketball", "gold_sql": "SELECT AVG(T2.points) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id = 1975", "pred_sql": "SELECT AVG(pa.points) AS average_points\nFROM player_allstar pa\nJOIN players p ON pa.playerid = p.playerid\nWHERE p.birthcountry = 'USA' AND pa.season_id = '1975';"}
{"sample_id": 2879, "db_id": "professional_basketball", "gold_sql": "SELECT COUNT(*) FROM ( SELECT tmID FROM players_teams AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.lgID = 'NBA' GROUP BY T1.tmID HAVING COUNT(DISTINCT T1.playerID) > 3 ) AS T3", "pred_sql": "SELECT COUNT(DISTINCT t.tmid) AS team_count\nFROM teams t\nJOIN players_teams pt ON t.tmid = pt.tmid\nJOIN player_allstar pa ON pt.playerid = pa.playerid\nWHERE t.lgid = 'NBA'\nGROUP BY t.tmid\nHAVING COUNT(DISTINCT pa.playerid) >= 3;"}
{"sample_id": 2832, "db_id": "professional_basketball", "gold_sql": "SELECT AVG(T1.weight) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Rookie of the Year'", "pred_sql": "SELECT AVG(weight) AS average_weight FROM players WHERE playerid IN (SELECT playerid FROM awards_players WHERE award = 'Rookie of the Year');"}
{"sample_id": 2859, "db_id": "professional_basketball", "gold_sql": "SELECT COUNT(fg_made) FROM player_allstar WHERE first_name = 'George' AND last_name = 'Mikan' AND season_id BETWEEN 1951 AND 1953", "pred_sql": "SELECT SUM(p.fgmade) AS total_field_goals\nFROM players AS pl\nJOIN players_teams AS pt ON pl.playerid = pt.playerid\nJOIN player_allstar AS pa ON pl.playerid = pa.playerid\nWHERE pl.firstname = 'George' AND pl.lastname = 'Mikan' AND pt.year BETWEEN '1951' AND '1953';"}
{"sample_id": 2888, "db_id": "professional_basketball", "gold_sql": "SELECT DISTINCT T1.firstName, T1.lastName, T3.name FROM players AS T1 INNER JOIN draft AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T2.tmID = T3.tmID WHERE T2.draftFrom = 'Seattle' AND T2.draftYear BETWEEN 1965 AND 1970", "pred_sql": "SELECT p.firstname, p.lastname, pt.tmid \nFROM players p \nJOIN draft d ON p.playerid = d.playerid \nJOIN players_teams pt ON p.playerid = pt.playerid \nWHERE d.draftyear BETWEEN '1965' AND '1970' \nAND d.draftfrom = 'Seattle';"}
{"sample_id": 2351, "db_id": "superstore", "gold_sql": "SELECT DISTINCT T3.\"Product Name\" FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Customer Name\" = 'Aimee Bixby' AND STRFTIME('%Y', T2.\"Ship Date\") = '2016'", "pred_sql": "SELECT p.product_name \nFROM product p \nJOIN central_superstore cs ON p.product_id = cs.product_id \nJOIN people pe ON cs.customer_id = pe.customer_id \nWHERE pe.customer_name = 'Aimee Bixby' \nAND strftime('%Y', cs.order_date) = '2016' \nUNION \nSELECT p.product_name \nFROM product p \nJOIN east_superstore es ON p.product_id = es.product_id \nJOIN people pe ON es.customer_id = pe.customer_id \nWHERE pe.customer_name = 'Aimee Bixby' \nAND strftime('%Y', es.order_date) = '2016' \nUNION \nSELECT p.product_name \nFROM product p \nJOIN south_superstore ss ON p.product_id = ss.product_id \nJOIN people pe ON ss.customer_id = pe.customer_id \nWHERE pe.customer_name = 'Aimee Bixby' \nAND strftime('%Y', ss.order_date) = '2016' \nUNION \nSELECT p.product_name \nFROM product p \nJOIN west_superstore ws ON p.product_id = ws.product_id \nJOIN people pe ON ws.customer_id = pe.customer_id \nWHERE pe.customer_name = 'Aimee Bixby' \nAND strftime('%Y', ws.order_date) = '2016';"}
{"sample_id": 2438, "db_id": "superstore", "gold_sql": "SELECT DISTINCT T1.Profit FROM south_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.\"Product Name\" = 'Sauder Camden County Barrister Bookcase, Planked Cherry Finish'", "pred_sql": "SELECT SUM(cs.profit) AS total_profit\nFROM central_superstore cs\nJOIN product p ON cs.product_id = p.product_id\nWHERE p.product_name = 'Sauder Camden County Barrister Bookcase' AND p.category = 'Furniture' AND p.sub_category = 'Bookcases';"}
{"sample_id": 2430, "db_id": "superstore", "gold_sql": "SELECT \"Order ID\" FROM central_superstore WHERE Profit < 0 LIMIT 3", "pred_sql": "SELECT * FROM (SELECT order_id, sales, quantity, discount, profit, (sales / (1 - discount) * quantity - profit) AS total_cost FROM central_superstore UNION ALL SELECT order_id, sales, quantity, discount, profit, (sales / (1 - discount) * quantity - profit) AS total_cost FROM east_superstore UNION ALL SELECT order_id, sales, quantity, discount, profit, (sales / (1 - discount) * quantity - profit) AS total_cost FROM south_superstore UNION ALL SELECT order_id, sales, quantity, discount, profit, (sales / (1 - discount) * quantity - profit) AS total_cost FROM west_superstore) AS all_orders WHERE total_cost < 0 LIMIT 3;"}
{"sample_id": 2418, "db_id": "superstore", "gold_sql": "SELECT DISTINCT T2.\"Customer Name\" FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE STRFTIME('%Y', T1.\"Order Date\") = '2015' GROUP BY T2.\"Customer Name\" HAVING COUNT(T2.\"Customer Name\") > 3", "pred_sql": "SELECT p.\"customer name\" FROM south_superstore s JOIN people p ON s.\"customer id\" = p.\"customer id\" WHERE strftime('%Y', s.\"order date\") = '2015' GROUP BY p.\"customer name\" HAVING COUNT(s.\"order id\") > 3;"}
{"sample_id": 2374, "db_id": "superstore", "gold_sql": "SELECT T3.\"Product Name\" FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T2.\"Customer Name\" = 'Jonathan Doherty' AND T2.Region = 'East' ORDER BY T1.Quantity DESC LIMIT 1", "pred_sql": "SELECT p.product_name FROM east_superstore es JOIN product p ON es.product_id = p.product_id JOIN people pe ON es.customer_id = pe.customer_id WHERE pe.customer_name = 'Jonathan Doherty' AND es.region = 'East' ORDER BY es.quantity DESC LIMIT 1;"}
{"sample_id": 2444, "db_id": "superstore", "gold_sql": "SELECT COUNT(DISTINCT T2.\"Order ID\") FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Alan Barnes' AND STRFTIME('%Y', T2.\"Order Date\") = '2015'", "pred_sql": "SELECT COUNT(*) AS order_count FROM central_superstore cs JOIN people p ON cs.customer_id = p.customer_id WHERE p.customer_name = 'Alan Barnes' AND strftime('%Y', cs.order_date) = '2015';"}
{"sample_id": 2389, "db_id": "superstore", "gold_sql": "SELECT T2.\"Product Name\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.Category = 'Office Supplies' AND T2.Region = 'Central' ORDER BY T1.Sales DESC LIMIT 1", "pred_sql": "SELECT product.product_name, SUM(central_superstore.sales) AS total_sales \nFROM central_superstore \nJOIN product ON central_superstore.product_id = product.product_id \nWHERE product.category = 'Office Supplies' AND central_superstore.region = 'Central' \nGROUP BY product.product_name \nORDER BY total_sales DESC \nLIMIT 1;"}
{"sample_id": 2451, "db_id": "superstore", "gold_sql": "SELECT DISTINCT T2.\"Customer Name\" FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.Quantity = 8 AND T1.Region = 'West'", "pred_sql": "SELECT p.\"customer name\" FROM west_superstore AS w JOIN people AS p ON w.\"customer id\" = p.\"customer id\" WHERE w.\"quantity\" = 8;"}
{"sample_id": 2386, "db_id": "superstore", "gold_sql": "SELECT T1.Quantity FROM west_superstore AS T1 INNER JOIN east_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN central_superstore AS T3 ON T3.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN south_superstore AS T4 ON T4.\"Customer ID\" = T3.\"Customer ID\" INNER JOIN people AS T5 ON T5.\"Customer ID\" = T4.\"Customer ID\" WHERE T5.City = 'Chicago' AND T5.State = 'Illinois' ORDER BY T1.Quantity DESC LIMIT 1", "pred_sql": "SELECT MAX(quantity) AS highest_quantity\nFROM (\n    SELECT quantity\n    FROM central_superstore\n    JOIN people ON central_superstore.customer_id = people.customer_id\n    WHERE people.city = 'Chicago' AND people.state = 'IL'\n    UNION ALL\n    SELECT quantity\n    FROM east_superstore\n    JOIN people ON east_superstore.customer_id = people.customer_id\n    WHERE people.city = 'Chicago' AND people.state = 'IL'\n    UNION ALL\n    SELECT quantity\n    FROM south_superstore\n    JOIN people ON south_superstore.customer_id = people.customer_id\n    WHERE people.city = 'Chicago' AND people.state = 'IL'\n    UNION ALL\n    SELECT quantity\n    FROM west_superstore\n    JOIN people ON west_superstore.customer_id = people.customer_id\n    WHERE people.city = 'Chicago' AND people.state = 'IL'\n) AS all_orders;"}
{"sample_id": 2393, "db_id": "superstore", "gold_sql": "SELECT COUNT(DISTINCT T1.\"Order ID\") FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T2.\"Customer Name\" = 'Maxwell Schwartz' AND STRFTIME('%Y', T1.\"Order Date\") = '2015'", "pred_sql": "SELECT COUNT(*) AS order_count FROM central_superstore WHERE customer_id IN (SELECT customer_id FROM people WHERE customer_name = 'Maxwell Schwartz') AND strftime('%Y', order_date) = '2015' UNION ALL SELECT COUNT(*) AS order_count FROM east_superstore WHERE customer_id IN (SELECT customer_id FROM people WHERE customer_name = 'Maxwell Schwartz') AND strftime('%Y', order_date) = '2015' UNION ALL SELECT COUNT(*) AS order_count FROM south_superstore WHERE customer_id IN (SELECT customer_id FROM people WHERE customer_name = 'Maxwell Schwartz') AND strftime('%Y', order_date) = '2015' UNION ALL SELECT COUNT(*) AS order_count FROM west_superstore WHERE customer_id IN (SELECT customer_id FROM people WHERE customer_name = 'Maxwell Schwartz') AND strftime('%Y', order_date) = '2015';"}
{"sample_id": 2356, "db_id": "superstore", "gold_sql": "SELECT COUNT(DISTINCT T2.\"Order ID\") FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Customer Name\" = 'Aimee Bixby' AND T3.\"Product Name\" = 'Xerox 1952'", "pred_sql": "SELECT COUNT(*) AS order_count \nFROM ( \n    SELECT * \n    FROM central_superstore \n    WHERE customer_id = (SELECT customer_id FROM people WHERE customer_name = 'Aimee Bixby') \n    AND product_id = (SELECT product_id FROM product WHERE product_name = 'Xerox 1952') \n    UNION ALL \n    SELECT * \n    FROM east_superstore \n    WHERE customer_id = (SELECT customer_id FROM people WHERE customer_name = 'Aimee Bixby') \n    AND product_id = (SELECT product_id FROM product WHERE product_name = 'Xerox 1952') \n    UNION ALL \n    SELECT * \n    FROM south_superstore \n    WHERE customer_id = (SELECT customer_id FROM people WHERE customer_name = 'Aimee Bixby') \n    AND product_id = (SELECT product_id FROM product WHERE product_name = 'Xerox 1952') \n    UNION ALL \n    SELECT * \n    FROM west_superstore \n    WHERE customer_id = (SELECT customer_id FROM people WHERE customer_name = 'Aimee Bixby') \n    AND product_id = (SELECT product_id FROM product WHERE product_name = 'Xerox 1952') \n) AS combined_orders;"}
{"sample_id": 2404, "db_id": "superstore", "gold_sql": "SELECT COUNT(*) FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T3.Category = 'Office Supplies' AND T2.\"Customer Name\" = 'Cindy Stewart'", "pred_sql": "SELECT COUNT(*) AS order_count FROM south_superstore ss JOIN people p ON ss.customer_id = p.customer_id WHERE p.customer_name = 'Cindy Stewart' AND ss.product_id IN (SELECT product_id FROM product WHERE category = 'Office Supplies');"}
{"sample_id": 2359, "db_id": "superstore", "gold_sql": "SELECT COUNT(DISTINCT T1.\"Product ID\") FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.\"Sub-Category\" = 'Art' AND T1.Region = 'East' AND STRFTIME('%Y', T1.\"Order Date\") = '2013'", "pred_sql": "SELECT SUM(quantity) AS total_art_products_ordered FROM east_superstore es JOIN product p ON es.product_id = p.product_id WHERE p.category = 'Art' AND strftime('%Y', es.order_date) = '2013';"}
{"sample_id": 2387, "db_id": "superstore", "gold_sql": "SELECT T1.\"Order Date\", T2.\"Product Name\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Order ID\" = 'CA-2011-137274' AND T2.Region = 'Central'", "pred_sql": "SELECT cs.order_date, p.product_name \nFROM central_superstore cs \nJOIN product p ON cs.product_id = p.product_id \nWHERE cs.order_id = 'CA-2011-137274' AND cs.region = 'Central';"}
{"sample_id": 2459, "db_id": "superstore", "gold_sql": "SELECT DISTINCT T2.\"Customer Name\" FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T2.Region = 'South' AND T1.\"Ship Mode\" = 'Standard Class' AND 100 * T1.Sales / ( SELECT AVG(Sales) FROM south_superstore ) > 88", "pred_sql": "SELECT DISTINCT p.customer_name \nFROM people p \nJOIN south_superstore s ON p.customer_id = s.customer_id \nWHERE s.ship_mode = 'Standard Class' \nAND s.sales > (0.88 * (SELECT AVG(sales) FROM (SELECT sales FROM central_superstore UNION ALL SELECT sales FROM east_superstore UNION ALL SELECT sales FROM south_superstore UNION ALL SELECT sales FROM west_superstore)))"}
{"sample_id": 2379, "db_id": "superstore", "gold_sql": "SELECT T2.\"Ship Date\" FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Ann Chong' AND T1.Region = 'Central'", "pred_sql": "SELECT cs.ship_date \nFROM central_superstore cs \nJOIN people p ON cs.customer_id = p.customer_id \nWHERE p.customer_name = 'Ann Chong' AND cs.region = 'Central';"}
{"sample_id": 2350, "db_id": "superstore", "gold_sql": "SELECT COUNT(DISTINCT T2.\"Order ID\") FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product ID\" WHERE T3.Category = 'Furniture' AND T1.\"Customer Name\" = 'Aimee Bixby'", "pred_sql": "SELECT COUNT(DISTINCT cs.order_id) AS order_count\nFROM central_superstore cs\nJOIN people p ON cs.customer_id = p.customer_id\nJOIN product pr ON cs.product_id = pr.product_id\nWHERE p.customer_name = 'Aimee Bixby' AND pr.category = 'Furniture';"}
{"sample_id": 2399, "db_id": "superstore", "gold_sql": "SELECT DISTINCT T3.\"Product Name\" FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T2.\"Customer Name\" = 'Matt Abelman' AND STRFTIME('%Y', T1.\"Order Date\") = '2013'", "pred_sql": "SELECT p.product_name \nFROM west_superstore AS w \nJOIN product AS p ON w.product_id = p.product_id \nJOIN people AS pe ON w.customer_id = pe.customer_id \nWHERE pe.customer_name = 'Matt Abelman' \nAND strftime('%Y', w.order_date) = '2013';"}
{"sample_id": 2458, "db_id": "superstore", "gold_sql": "SELECT T2.\"Product Name\" FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.Region = 'East' ORDER BY T1.Quantity DESC LIMIT 1", "pred_sql": "SELECT product.product_name, MAX(east_superstore.quantity) AS max_quantity\nFROM east_superstore\nJOIN product ON east_superstore.product_id = product.product_id\nGROUP BY product.product_name\nORDER BY max_quantity DESC\nLIMIT 1;"}
{"sample_id": 2412, "db_id": "superstore", "gold_sql": "SELECT SUM(T1.Profit) FROM south_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" GROUP BY T2.\"Product Name\" = 'Memorix Froggy Flash Drive 8 GB'", "pred_sql": "SELECT SUM(profit) AS total_profit FROM south_superstore WHERE product_id = (SELECT product_id FROM product WHERE product_name = 'Memorex Froggy Flash Drive 8 GB');"}
{"sample_id": 2370, "db_id": "superstore", "gold_sql": "SELECT DISTINCT T2.\"Customer Name\" FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.Region = 'West' AND T1.\"Ship Mode\" = 'Second Class' LIMIT 5", "pred_sql": "SELECT DISTINCT p.\"customer name\" FROM west_superstore w JOIN people p ON w.\"customer id\" = p.\"customer id\" WHERE w.\"ship mode\" = 'Second Class' LIMIT 5;"}
{"sample_id": 2446, "db_id": "superstore", "gold_sql": "SELECT CAST(SUM(CASE  WHEN T2.Discount = 0.2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.State = 'Texas'", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM central_superstore)) AS percentage\nFROM central_superstore cs\nJOIN people p ON cs.customer_id = p.customer_id\nWHERE cs.discount = 0.2 AND p.state = 'TX';"}
{"sample_id": 2406, "db_id": "superstore", "gold_sql": "SELECT T3.\"Product Name\" FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T2.\"Customer Name\" = 'Cindy Stewart'", "pred_sql": "SELECT p.product_name FROM product p JOIN east_superstore e ON p.product_id = e.product_id JOIN people pe ON e.customer_id = pe.customer_id WHERE pe.customer_name = 'Cindy Stewart';"}
{"sample_id": 7835, "db_id": "world", "gold_sql": "SELECT T1.Name, T1.Population, T1.Capital, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode INNER JOIN City AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' ORDER BY T1.SurfaceArea LIMIT 1", "pred_sql": "SELECT c.name AS country, c.population, c.capital, cl.language \nFROM country c \nJOIN countrylanguage cl ON c.code = cl.countrycode \nWHERE cl.isofficial = 'T' \nORDER BY c.surfacearea ASC \nLIMIT 1;"}
{"sample_id": 7827, "db_id": "world", "gold_sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Turkmenistan'", "pred_sql": "SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Turkmenistan');"}
{"sample_id": 7911, "db_id": "world", "gold_sql": "SELECT T2.Name, COUNT(T1.Name) FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.SurfaceArea = 652090 GROUP BY T2.Name", "pred_sql": "SELECT COUNT(*) FROM city WHERE countrycode IN (SELECT code FROM country WHERE surfacearea = 652090);"}
{"sample_id": 7877, "db_id": "world", "gold_sql": "SELECT T1.Name, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.IndepYear > 1990 AND T2.IsOfficial = 'T'", "pred_sql": "SELECT cl.language \nFROM countrylanguage cl \nJOIN country c ON cl.countrycode = c.code \nWHERE c.indepyear > 1990 AND cl.isofficial = 'T';"}
{"sample_id": 7900, "db_id": "world", "gold_sql": "SELECT T1.Language FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.IsOfficial = 'T' AND T2.name = 'Greece'", "pred_sql": "SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Greece') AND isofficial = 'T';"}
{"sample_id": 7914, "db_id": "world", "gold_sql": "SELECT T1.Language FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.HeadOfState = 'Pierre Buyoya'", "pred_sql": "SELECT cl.language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.headofstate = 'Pierre Buyoya';"}
{"sample_id": 7881, "db_id": "world", "gold_sql": "SELECT T2.LifeExpectancy FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population DESC LIMIT 1", "pred_sql": "SELECT c.lifeexpectancy FROM country c JOIN city ci ON c.code = ci.countrycode ORDER BY ci.population DESC LIMIT 1;"}
{"sample_id": 7825, "db_id": "world", "gold_sql": "SELECT T2.ID FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.SurfaceArea = ( SELECT MAX(SurfaceArea) FROM Country )", "pred_sql": "SELECT COUNT(*) FROM city WHERE countrycode = (SELECT code FROM country ORDER BY surfacearea DESC LIMIT 1);"}
{"sample_id": 7901, "db_id": "world", "gold_sql": "SELECT T2.Population FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Queimados'", "pred_sql": "SELECT country.population FROM country JOIN city ON city.countrycode = country.code WHERE city.name = 'Queimados';"}
{"sample_id": 7884, "db_id": "world", "gold_sql": "SELECT T2.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population DESC, T2.SurfaceArea DESC LIMIT 1", "pred_sql": "SELECT country.name, MIN(country.surfacearea) AS smallest_surface_area, city.name AS most_crowded_city, MAX(city.population) AS max_population FROM country JOIN city ON country.code = city.countrycode GROUP BY country.name ORDER BY smallest_surface_area LIMIT 1;"}
{"sample_id": 7903, "db_id": "world", "gold_sql": "SELECT T2.SurfaceArea, T2.GNP FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = 'Namibe'", "pred_sql": "SELECT country.surfacearea, country.gnp FROM country JOIN city ON country.code = city.countrycode WHERE city.district = 'Namibe';"}
{"sample_id": 7893, "db_id": "world", "gold_sql": "SELECT COUNT(*) FROM Country WHERE LifeExpectancy = 75.1", "pred_sql": "SELECT COUNT(*) FROM country WHERE lifeexpectancy = 75.1;"}
{"sample_id": 7913, "db_id": "world", "gold_sql": "SELECT T2.LifeExpectancy FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Calama'", "pred_sql": "SELECT c.lifeexpectancy FROM country c JOIN city ci ON c.code = ci.countrycode WHERE ci.name = 'Calama';"}
{"sample_id": 7862, "db_id": "world", "gold_sql": "SELECT T1.Capital FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Philipiines'", "pred_sql": "SELECT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.name = 'Philippines' AND city.id = country.capital;"}
{"sample_id": 7870, "db_id": "world", "gold_sql": "SELECT T1.Name FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' AND T2.IsOfficial = 'F' GROUP BY T1.Name", "pred_sql": "SELECT DISTINCT c.name FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE c.continent = 'Asia' AND cl.language = 'English' AND cl.isofficial = 'F';"}
{"sample_id": 7873, "db_id": "world", "gold_sql": "SELECT Name FROM Country ORDER BY SurfaceArea ASC LIMIT 1", "pred_sql": "SELECT name FROM country ORDER BY surfacearea ASC LIMIT 1;"}
{"sample_id": 7917, "db_id": "world", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.GovernmentForm = 'Republic' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Italian'", "pred_sql": "SELECT AVG(cl.percentage) AS average_percentage\nFROM countrylanguage cl\nJOIN country c ON cl.countrycode = c.code\nWHERE cl.language = 'Italian' AND c.governmentform LIKE '%Republic%';"}
{"sample_id": 7885, "db_id": "world", "gold_sql": "SELECT T1.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'China'", "pred_sql": "SELECT name FROM city WHERE countrycode = 'CHN';"}
{"sample_id": 7858, "db_id": "world", "gold_sql": "SELECT COUNT(Code) FROM Country WHERE GovernmentForm = 'Socialistic Republic'", "pred_sql": "SELECT COUNT(*) FROM country WHERE governmentform LIKE '%Socialistic Republic%';"}
{"sample_id": 5532, "db_id": "menu", "gold_sql": "SELECT T2.name, T1.price FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T2.lowest_price = 0", "pred_sql": "SELECT dish.name, menuitem.price FROM dish JOIN menuitem ON dish.id = menuitem.dish_id WHERE dish.lowest_price = '0'"}
{"sample_id": 5557, "db_id": "menu", "gold_sql": "SELECT COUNT(*), T1.dish_id FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T3.name = 'Souper de Luxe' GROUP BY T3.id ORDER BY COUNT(T1.dish_id) DESC LIMIT 1", "pred_sql": "SELECT AVG(dish_count) AS average_dishes_per_menu, (SELECT name FROM dish WHERE id = (SELECT dish_id FROM menuitem WHERE menu_page_id IN (SELECT id FROM menupage WHERE menu_id IN (SELECT id FROM menu WHERE name = 'Souper de Luxe')) GROUP BY dish_id ORDER BY COUNT(*) DESC LIMIT 1)) AS most_frequent_dish FROM menu WHERE name = 'Souper de Luxe';"}
{"sample_id": 5509, "db_id": "menu", "gold_sql": "SELECT location FROM Menu WHERE sponsor = 'Norddeutscher Lloyd Bremen'", "pred_sql": "SELECT DISTINCT location FROM menu WHERE sponsor = (SELECT id FROM sponsor WHERE name = 'Norddeutscher Lloyd Bremen');"}
{"sample_id": 5564, "db_id": "menu", "gold_sql": "SELECT T2.image_id FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.name = 'Zentral Theater Terrace' AND T2.page_number = 1", "pred_sql": "SELECT menupage.image_id FROM menupage JOIN menu ON menupage.menu_id = menu.id WHERE menu.name = 'Zentral Theater Terrace' AND menupage.page_number = '1';"}
{"sample_id": 5552, "db_id": "menu", "gold_sql": "SELECT T2.menu_id FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.sponsor = 'OCCIDENTAL & ORIENTAL STEAMSHIP COMPANY' GROUP BY T2.menu_id ORDER BY COUNT(T2.page_number) DESC LIMIT 1", "pred_sql": "SELECT menu.id FROM menu JOIN menupage ON menu.id = menupage.menu_id WHERE menu.sponsor = 'Occidental and Oriental Steamship Company' GROUP BY menu.id ORDER BY COUNT(menupage.id) DESC LIMIT 1;"}
{"sample_id": 5501, "db_id": "menu", "gold_sql": "SELECT T4.name FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T3.sponsor = 'CHAS.BRADLEY''S OYSTER & DINING ROOM' AND T1.xpos < 0.25 AND T1.ypos < 0.25", "pred_sql": "SELECT d.name \nFROM dish d \nJOIN menuitem mi ON d.id = mi.dish_id \nJOIN menupage mp ON mi.menu_page_id = mp.id \nJOIN menu m ON mp.menu_id = m.id \nWHERE m.sponsor IS NOT NULL \nAND m.name = 'CHAS.BRADLEY''S OYSTER & DINING ROOM' \nAND mi.xpos = '0' \nAND mi.ypos = '0';"}
{"sample_id": 5544, "db_id": "menu", "gold_sql": "SELECT event FROM Menu WHERE date = '1887-07-21' AND id = 21380", "pred_sql": "SELECT event FROM menu WHERE id = 21380 AND date = '1887-07-21';"}
{"sample_id": 5546, "db_id": "menu", "gold_sql": "SELECT SUM(CASE WHEN T1.name = 'Puree of split peas aux croutons' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id", "pred_sql": "SELECT COUNT(DISTINCT menu.id) AS menu_count\nFROM menu\nJOIN menuitem ON menuitem.menu_page_id = menupage.id\nJOIN menupage ON menupage.menu_id = menu.id\nJOIN dish ON menuitem.dish_id = dish.id\nWHERE dish.name = 'puree of split peas aux croutons';"}
{"sample_id": 5574, "db_id": "menu", "gold_sql": "SELECT SUM(CASE WHEN T1.name = 'Paysanne Soup' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.highest_price IS NULL", "pred_sql": "SELECT COUNT(DISTINCT menupage.id) AS stable_price_count\nFROM menupage\nJOIN menuitem ON menupage.id = menuitem.menu_page_id\nJOIN dish ON menuitem.dish_id = dish.id\nWHERE dish.name = 'Paysanne Soup' AND menuitem.price = menuitem.high_price;"}
{"sample_id": 5525, "db_id": "menu", "gold_sql": "SELECT COUNT(*) FROM Dish WHERE lowest_price = 0", "pred_sql": "SELECT COUNT(*) AS free_dish_count FROM dish WHERE lowest_price = '0'"}
{"sample_id": 5475, "db_id": "menu", "gold_sql": "SELECT T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Clear green turtle'", "pred_sql": "SELECT menuitem.price, menuitem.high_price, menupage.page_number, menu.name \nFROM menuitem \nJOIN menupage ON menuitem.menu_page_id = menupage.id \nJOIN menu ON menupage.menu_id = menu.id \nJOIN dish ON menuitem.dish_id = dish.id \nWHERE dish.name = 'Clear green turtle';"}
{"sample_id": 5551, "db_id": "menu", "gold_sql": "SELECT T1.menu_page_id FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T2.name = 'Milk' ORDER BY T1.price DESC LIMIT 1", "pred_sql": "SELECT menupage.id FROM menuitem JOIN menupage ON menuitem.menu_page_id = menupage.id JOIN dish ON menuitem.dish_id = dish.id WHERE dish.name LIKE '%milk%' ORDER BY menuitem.high_price DESC LIMIT 1;"}
{"sample_id": 5492, "db_id": "menu", "gold_sql": "SELECT COUNT(*) FROM Menu WHERE venue = 'STEAMSHIP'", "pred_sql": "SELECT COUNT(*) AS menu_count FROM menu WHERE name LIKE '%steamship%';"}
{"sample_id": 5560, "db_id": "menu", "gold_sql": "SELECT COUNT(*) FROM Menu WHERE page_count > 10 AND dish_count > 20", "pred_sql": "SELECT COUNT(*) AS menu_count \nFROM menu \nWHERE page_count > 10 AND dish_count > 20;"}
{"sample_id": 5563, "db_id": "menu", "gold_sql": "SELECT COUNT(*) FROM Menu WHERE call_number IS NULL AND strftime('%Y', date) < '1950'", "pred_sql": "SELECT COUNT(*) AS menu_count FROM menu WHERE (sponsor IS NULL OR sponsor = '') AND date < 1950;"}
{"sample_id": 5529, "db_id": "menu", "gold_sql": "SELECT T1.last_appeared - T1.first_appeared, T2.updated_at FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Clear green turtle'", "pred_sql": "SELECT (last_appeared - first_appeared) AS duration, updated_at FROM dish WHERE name = 'Clear Green Turtle';"}
{"sample_id": 5508, "db_id": "menu", "gold_sql": "SELECT occasion FROM Menu WHERE id = 12463", "pred_sql": "SELECT occasion FROM menu WHERE id = 12463;"}
{"sample_id": 5538, "db_id": "menu", "gold_sql": "SELECT T1.name FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T2.price = 180000", "pred_sql": "SELECT name FROM dish WHERE lowest_price = '180000' OR highest_price = '180000';"}
{"sample_id": 5487, "db_id": "menu", "gold_sql": "SELECT SUM(T1.price) / COUNT(T1.price) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id WHERE T3.name = 'Zentral Theater Terrace'", "pred_sql": "SELECT AVG(CAST(menuitem.price AS REAL)) AS average_price\nFROM menu\nJOIN menupage ON menu.id = menupage.menu_id\nJOIN menuitem ON menupage.id = menuitem.menu_page_id\nWHERE menu.name = 'Zentral Theater Terrace';"}
{"sample_id": 5543, "db_id": "menu", "gold_sql": "SELECT name FROM Dish ORDER BY last_appeared - Dish.first_appeared DESC LIMIT 1", "pred_sql": "SELECT name FROM dish WHERE (last_appeared - first_appeared) = (SELECT MAX(last_appeared - first_appeared) FROM dish WHERE first_appeared BETWEEN '1851' AND '2012' AND last_appeared BETWEEN '1851' AND '2012')"}
{"sample_id": 5499, "db_id": "menu", "gold_sql": "SELECT COUNT(T1.dish_id) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id WHERE T2.page_number = 2 GROUP BY T3.name ORDER BY T3.dish_count DESC LIMIT 1", "pred_sql": "SELECT COUNT(menuitem.id) AS dish_count\nFROM menuitem\nJOIN menupage ON menuitem.menu_page_id = menupage.id\nWHERE menupage.menu_id = (\n    SELECT id\n    FROM menu\n    ORDER BY dish_count DESC\n    LIMIT 1\n) AND menupage.page_number = '2';"}
{"sample_id": 9261, "db_id": "movie_3", "gold_sql": "SELECT COUNT(T1.rental_id) FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'ELLA' AND T2.last_name = 'ELLA' AND date(T1.rental_date) BETWEEN '2005-06-01' AND '2005-06-30'", "pred_sql": "SELECT COUNT(r.rental_id) AS total_rentals\nFROM rental r\nJOIN customer c ON r.customer_id = c.customer_id\nWHERE c.first_name = 'Ella' AND c.last_name = 'Oliver' AND strftime('%Y-%m', r.rental_date) = '2016-06';"}
{"sample_id": 9312, "db_id": "movie_3", "gold_sql": "SELECT T3.title AS per FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T2.name = 'Animation'", "pred_sql": "SELECT title FROM film_text WHERE film_id IN (SELECT film_id FROM film_category WHERE category_id = (SELECT category_id FROM category WHERE name = 'Animation'));"}
{"sample_id": 9416, "db_id": "movie_3", "gold_sql": "SELECT SUM(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH'", "pred_sql": "SELECT SUM(p.amount) AS total_spent\nFROM payment p\nJOIN customer c ON p.customer_id = c.customer_id\nWHERE c.first_name = 'Mary' AND c.last_name = 'Smith';"}
{"sample_id": 9134, "db_id": "movie_3", "gold_sql": "SELECT CAST(SUM(IIF(T3.name = 'Music', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id INNER JOIN inventory AS T4 ON T1.film_id = T4.film_id INNER JOIN customer AS T5 ON T4.store_id = T5.store_id INNER JOIN rental AS T6 ON T4.inventory_id = T6.inventory_id WHERE T5.first_name = 'RUTH' AND T5.last_name = 'MARTINEZ'", "pred_sql": "SELECT (COUNT(f.film_id) * 100.0 / (SELECT COUNT(*) FROM rental r JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'RUTH' AND c.last_name = 'MARTINEZ')) AS music_percentage\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nJOIN rental r ON f.film_id = r.inventory_id\nJOIN customer cu ON r.customer_id = cu.customer_id\nWHERE cu.first_name = 'RUTH' AND cu.last_name = 'MARTINEZ' AND c.name = 'Music';"}
{"sample_id": 9304, "db_id": "movie_3", "gold_sql": "SELECT T.first_name, T.last_name FROM ( SELECT T3.first_name, T3.last_name, COUNT(T1.film_id) AS num FROM inventory AS T1 INNER JOIN store AS T2 ON T1.store_id = T2.store_id INNER JOIN staff AS T3 ON T2.manager_staff_id = T3.staff_id GROUP BY T3.first_name, T3.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "pred_sql": "SELECT s.manager_staff_id, COUNT(i.film_id) AS film_count\nFROM store s\nJOIN inventory i ON s.store_id = i.store_id\nGROUP BY s.store_id\nORDER BY film_count DESC\nLIMIT 1;"}
{"sample_id": 9145, "db_id": "movie_3", "gold_sql": "SELECT T1.address, T1.address2, T1.district FROM address AS T1 INNER JOIN store AS T2 ON T1.address_id = T2.address_id WHERE T2.store_id = 2", "pred_sql": "SELECT a.address, a.address2, a.district, c.city, co.country \nFROM address a \nJOIN store s ON a.address_id = s.address_id \nJOIN city c ON a.city_id = c.city_id \nJOIN country co ON c.country_id = co.country_id \nWHERE s.store_id = 2;"}
{"sample_id": 9418, "db_id": "movie_3", "gold_sql": "SELECT T2.first_name, T2.last_name FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.amount DESC LIMIT 1", "pred_sql": "SELECT c.first_name || ' ' || c.last_name AS full_name\nFROM customer c\nJOIN payment p ON c.customer_id = p.customer_id\nJOIN rental r ON p.rental_id = r.rental_id\nJOIN inventory i ON r.inventory_id = i.inventory_id\nJOIN film f ON i.film_id = f.film_id\nWHERE p.amount = (SELECT MAX(amount) FROM payment)\nLIMIT 1;"}
{"sample_id": 9374, "db_id": "movie_3", "gold_sql": "SELECT AVG(rental_rate) FROM film WHERE rating = 'PG-13'", "pred_sql": "SELECT AVG(rental_rate) AS average_rental_rate FROM film WHERE rating = 'PG-13';"}
{"sample_id": 9323, "db_id": "movie_3", "gold_sql": "SELECT COUNT(T1.city_id) FROM city AS T1 INNER JOIN address AS T2 ON T1.city_id = T2.city_id INNER JOIN customer AS T3 ON T2.address_id = T3.address_id WHERE T1.city = 'Abu Dhabi'", "pred_sql": "SELECT c.first_name, c.last_name \nFROM customer c \nJOIN address a ON c.address_id = a.address_id \nJOIN city ci ON a.city_id = ci.city_id \nWHERE ci.city = 'Abu Dhabi';"}
{"sample_id": 9272, "db_id": "movie_3", "gold_sql": "SELECT COUNT(T3.customer_id) FROM city AS T1 INNER JOIN address AS T2 ON T1.city_id = T2.city_id INNER JOIN customer AS T3 ON T2.address_id = T3.address_id WHERE T1.city = 'Miyakonojo'", "pred_sql": "SELECT COUNT(*) AS customer_count FROM customer c JOIN address a ON c.address_id = a.address_id JOIN city ci ON a.city_id = ci.city_id WHERE ci.city = 'Miyakonojo';"}
{"sample_id": 9235, "db_id": "movie_3", "gold_sql": "SELECT T2.store_id FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T1.rental_rate > ( SELECT AVG(T1.rental_rate) * 0.6 FROM film AS T1 )", "pred_sql": "SELECT DISTINCT i.store_id \nFROM inventory i \nJOIN film f ON i.film_id = f.film_id \nWHERE f.rental_rate > (SELECT AVG(rental_rate) * 0.6 FROM film);"}
{"sample_id": 9362, "db_id": "movie_3", "gold_sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Documentary' AND T1.rating = 'PG-13'", "pred_sql": "SELECT COUNT(f.film_id) AS documentary_count \nFROM film f \nJOIN film_category fc ON f.film_id = fc.film_id \nJOIN category c ON fc.category_id = c.category_id \nWHERE c.name = 'Documentary' AND f.rating = 'PG-13';"}
{"sample_id": 9142, "db_id": "movie_3", "gold_sql": "SELECT COUNT(film_id) FROM film WHERE length = '178'", "pred_sql": "SELECT COUNT(*) AS number_of_films FROM film WHERE length = 178;"}
{"sample_id": 9248, "db_id": "movie_3", "gold_sql": "SELECT SUM(T1.amount) FROM payment AS T1 INNER JOIN rental AS T2 ON T1.rental_id = T2.rental_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T4.title = 'CLOCKWORK PARADICE'", "pred_sql": "SELECT SUM(p.amount) AS total_rent\nFROM payment p\nJOIN rental r ON p.rental_id = r.rental_id\nJOIN inventory i ON r.inventory_id = i.inventory_id\nJOIN film f ON i.film_id = f.film_id\nWHERE f.title = 'Clockwork Paradice';"}
{"sample_id": 9270, "db_id": "movie_3", "gold_sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.rating = 'PG-13' ORDER BY T3.replacement_cost DESC LIMIT 1", "pred_sql": "SELECT a.first_name, a.last_name \nFROM actor a \nJOIN film_actor fa ON a.actor_id = fa.actor_id \nJOIN film f ON fa.film_id = f.film_id \nWHERE f.rating = 'PG-13' \nAND f.replacement_cost = (SELECT MAX(replacement_cost) FROM film WHERE rating = 'PG-13');"}
{"sample_id": 9345, "db_id": "movie_3", "gold_sql": "SELECT T2.rental_id FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'MARY' AND T1.last_name = 'SMITH'", "pred_sql": "SELECT rental_id FROM rental WHERE customer_id = (SELECT customer_id FROM customer WHERE first_name = 'Mary' AND last_name = 'Smith');"}
{"sample_id": 9398, "db_id": "movie_3", "gold_sql": "SELECT actor_id FROM actor WHERE last_name = 'Dee'", "pred_sql": "SELECT actor_id FROM actor WHERE last_name = 'Dee';"}
{"sample_id": 9163, "db_id": "movie_3", "gold_sql": "SELECT CAST((SUM(IIF(T2.store_id = 2, T1.amount, 0)) - SUM(IIF(T2.store_id = 1, T1.amount, 0))) AS REAL) * 100 / SUM(IIF(T2.store_id = 1, T1.amount, 0)) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id INNER JOIN store AS T3 ON T2.store_id = T3.store_id", "pred_sql": "SELECT (SUM(CASE WHEN store_id = '2' THEN amount ELSE 0 END) - SUM(CASE WHEN store_id = '1' THEN amount ELSE 0 END)) / SUM(CASE WHEN store_id = '1' THEN amount ELSE 0 END) * 100 AS percentage_difference\nFROM payment;"}
{"sample_id": 9121, "db_id": "movie_3", "gold_sql": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Horror' AND T1.rental_rate = 2.99", "pred_sql": "SELECT f.title \nFROM film f \nJOIN film_category fc ON f.film_id = fc.film_id \nJOIN category c ON fc.category_id = c.category_id \nWHERE c.name = 'Horror' AND f.rental_rate = 2.99;"}
{"sample_id": 9180, "db_id": "movie_3", "gold_sql": "SELECT T1.special_features FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'sci-fi' ORDER BY T1.special_features DESC LIMIT 1", "pred_sql": "SELECT special_features, COUNT(*) as feature_count \nFROM film \nJOIN film_category ON film.film_id = film_category.film_id \nJOIN category ON film_category.category_id = category.category_id \nWHERE category.name = 'Science Fiction' \nGROUP BY special_features \nORDER BY feature_count DESC \nLIMIT 1;"}
{"sample_id": 9150, "db_id": "movie_3", "gold_sql": "SELECT T2.return_date FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'SHERRI' AND T1.last_name = 'RHODES' AND T2.rental_date = '2005-07-28 12:27:27'", "pred_sql": "SELECT return_date FROM rental WHERE customer_id = (SELECT customer_id FROM customer WHERE first_name = 'Sherri' AND last_name = 'Rhodes') AND rental_date = '2005-07-28 12:27:27';"}
{"sample_id": 9277, "db_id": "movie_3", "gold_sql": "SELECT AVG(T2.amount) FROM customer AS T1 INNER JOIN payment AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'CHRISTY' AND T1.Last_name = 'VARGAS'", "pred_sql": "SELECT AVG(p.amount) AS average_rent\nFROM payment p\nJOIN customer c ON p.customer_id = c.customer_id\nWHERE c.first_name = 'Christy' AND c.last_name = 'Vargas';"}
{"sample_id": 9303, "db_id": "movie_3", "gold_sql": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'FRANCIS' AND T1.last_name = 'SIKES'", "pred_sql": "SELECT COUNT(rental.rental_id) AS total_films_rented\nFROM customer\nJOIN rental ON customer.customer_id = rental.customer_id\nWHERE customer.first_name = 'Francis' AND customer.last_name = 'Sikes';"}
{"sample_id": 9295, "db_id": "movie_3", "gold_sql": "SELECT CAST(SUM(IIF(T2.name = 'Documentary', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM film)) AS documentary_percentage FROM film_category fc JOIN film f ON fc.film_id = f.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Documentary';"}
{"sample_id": 9259, "db_id": "movie_3", "gold_sql": "SELECT T.language_id FROM ( SELECT T1.language_id, COUNT(T1.language_id) AS num FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE STRFTIME('%Y',T1.release_year) = '2006' GROUP BY T1.language_id ) AS T ORDER BY T.num DESC LIMIT 1", "pred_sql": "SELECT l.name, COUNT(f.film_id) AS film_count\nFROM film f\nJOIN language l ON f.language_id = l.language_id\nWHERE f.release_year = 2006\nGROUP BY l.name\nORDER BY film_count DESC\nLIMIT 1;"}
{"sample_id": 9183, "db_id": "movie_3", "gold_sql": "SELECT T.first_name, T.last_name FROM ( SELECT T3.first_name, T3.last_name, COUNT(T1.customer_id) AS num FROM customer AS T1 INNER JOIN store AS T2 ON T1.store_id = T2.store_id INNER JOIN staff AS T3 ON T2.store_id = T3.store_id WHERE T1.active = 0 GROUP BY T3.first_name, T3.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "pred_sql": "SELECT s.first_name, s.last_name \nFROM staff s \nJOIN store st ON s.staff_id = st.manager_staff_id \nWHERE st.store_id = (SELECT st2.store_id \n                     FROM store st2 \n                     JOIN customer c ON st2.store_id = c.store_id \n                     WHERE c.active = 0 \n                     GROUP BY st2.store_id \n                     ORDER BY COUNT(c.customer_id) DESC \n                     LIMIT 1)"}
{"sample_id": 9216, "db_id": "movie_3", "gold_sql": "SELECT CAST((SUM(IIF(T1.first_name = 'ANGELA' AND T1.last_name = 'WITHERSPOON', 1, 0)) - SUM(IIF(T1.first_name = 'MARY' AND T1.last_name = 'KEITEL', 1, 0))) AS REAL) * 100 / SUM(IIF(T1.first_name = 'MARY' AND T1.last_name = 'KEITEL', 1, 0)) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id", "pred_sql": "SELECT (SUM(CASE WHEN a.first_name = 'Mary' AND a.last_name = 'Keitel' THEN f.length ELSE 0 END) * 100.0 / SUM(CASE WHEN a.first_name = 'Angela' AND a.last_name = 'Witherspoon' THEN f.length ELSE 0 END)) AS percentage_performance\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id;"}
{"sample_id": 9233, "db_id": "movie_3", "gold_sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.length BETWEEN 110 AND 150 AND T1.first_name = 'Russell' AND T1.last_name = 'Close'", "pred_sql": "SELECT f.title \nFROM film f \nJOIN film_actor fa ON f.film_id = fa.film_id \nJOIN actor a ON fa.actor_id = a.actor_id \nWHERE a.first_name = 'Elvis' AND a.last_name = 'Marx';"}
{"sample_id": 9194, "db_id": "movie_3", "gold_sql": "SELECT actor_id FROM actor WHERE last_name = 'KILMER'", "pred_sql": "SELECT actor_id FROM actor WHERE last_name = 'KILMER';"}
{"sample_id": 9138, "db_id": "movie_3", "gold_sql": "SELECT first_name, last_name FROM customer WHERE email = 'JEREMY.HURTADO@sakilacustomer.org'", "pred_sql": "SELECT first_name || ' ' || last_name AS full_name FROM customer WHERE email = 'JEREMY.HURTADO@sakilacustomer.org';"}
{"sample_id": 9153, "db_id": "movie_3", "gold_sql": "SELECT T1.address, T1.address2 FROM address AS T1 INNER JOIN staff AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = 'Jon' AND T2.last_name = 'Stephens'", "pred_sql": "SELECT address.address FROM staff JOIN address ON staff.address_id = address.address_id WHERE staff.first_name = 'Jon' AND staff.last_name = 'Stephens';"}
{"sample_id": 9104, "db_id": "movie_3", "gold_sql": "SELECT title FROM ( SELECT title, COUNT(special_features) AS num FROM film GROUP BY title ) AS T ORDER BY T.num > 2", "pred_sql": "SELECT title FROM film WHERE special_features IS NOT NULL AND LENGTH(special_features) - LENGTH(REPLACE(special_features, ',', '')) > 2;"}
{"sample_id": 9222, "db_id": "movie_3", "gold_sql": "SELECT COUNT(customer_id) FROM customer WHERE last_name = 'Thomas' AND customer_id < 100", "pred_sql": "SELECT COUNT(*) AS customer_count FROM customer WHERE customer_id <= '100' AND last_name = 'Thomas';"}
{"sample_id": 9113, "db_id": "movie_3", "gold_sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'ACADEMY DINOSAUR'", "pred_sql": "SELECT a.first_name || ' ' || a.last_name AS full_name\nFROM actor a\nJOIN film_actor fa ON a.actor_id = fa.actor_id\nJOIN film f ON fa.film_id = f.film_id\nWHERE f.title = 'ACADEMY DINOSAUR';"}
{"sample_id": 9390, "db_id": "movie_3", "gold_sql": "SELECT T1.city FROM city AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE country = 'Philippines'", "pred_sql": "SELECT city FROM city WHERE country_id = (SELECT country_id FROM country WHERE country = 'Philippines');"}
{"sample_id": 9128, "db_id": "movie_3", "gold_sql": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, COUNT(T2.rental_id) AS num FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "pred_sql": "SELECT c.first_name || ' ' || c.last_name AS full_name\nFROM customer c\nJOIN rental r ON c.customer_id = r.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(r.rental_id) DESC\nLIMIT 1;"}
{"sample_id": 9136, "db_id": "movie_3", "gold_sql": "SELECT email FROM customer WHERE first_name = 'DIANE' AND last_name = 'COLLINS'", "pred_sql": "SELECT email FROM customer WHERE first_name = 'Diane' AND last_name = 'Collins';"}
{"sample_id": 9129, "db_id": "movie_3", "gold_sql": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.active = 1 AND T4.title = 'ACADEMY DINOSAUR'", "pred_sql": "SELECT COUNT(DISTINCT c.customer_id) AS active_customers_count\nFROM customer c\nJOIN rental r ON c.customer_id = r.customer_id\nJOIN inventory i ON r.inventory_id = i.inventory_id\nJOIN film f ON i.film_id = f.film_id\nWHERE f.title = 'ACADEMY DINOSAUR' AND c.active = '1';"}
{"sample_id": 9097, "db_id": "movie_3", "gold_sql": "SELECT description FROM film WHERE title = 'ACADEMY DINOSAUR'", "pred_sql": "SELECT description FROM film_text WHERE title = 'ACADEMY DINOSAUR';"}
{"sample_id": 9251, "db_id": "movie_3", "gold_sql": "SELECT T.title FROM ( SELECT T4.title, COUNT(T4.title) AS num FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id INNER JOIN film_category AS T5 ON T4.film_id = T5.film_id INNER JOIN category AS T6 ON T5.category_id = T6.category_id WHERE T6.name = 'Children' GROUP BY T4.title ) AS T ORDER BY T.num DESC LIMIT 1", "pred_sql": "SELECT f.title, COUNT(r.rental_id) AS rental_count\nFROM film f\nJOIN inventory i ON f.film_id = i.film_id\nJOIN rental r ON i.inventory_id = r.inventory_id\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE c.name = 'Children'\nGROUP BY f.title\nORDER BY rental_count DESC\nLIMIT 1;"}
{"sample_id": 9320, "db_id": "movie_3", "gold_sql": "SELECT T3.description FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T3.film_id = T2.film_id WHERE T1.first_name = 'JOHNNY' AND T1.last_name = 'DAVIS'", "pred_sql": "SELECT f.description FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'JENNIFER' AND a.last_name = 'DAVIS';"}
{"sample_id": 9368, "db_id": "movie_3", "gold_sql": "SELECT T2.store_id, T1.address, T4.rental_rate FROM address AS T1 INNER JOIN store AS T2 ON T1.address_id = T2.address_id INNER JOIN inventory AS T3 ON T2.store_id = T3.store_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T4.title = 'WYOMING STORM'", "pred_sql": "SELECT s.store_id, a.address, s.rental_rate \nFROM store s \nJOIN inventory i ON s.store_id = i.store_id \nJOIN film f ON i.film_id = f.film_id \nJOIN rental r ON i.inventory_id = r.inventory_id \nJOIN address a ON s.address_id = a.address_id \nWHERE f.title = 'Wyoming Storm';"}
{"sample_id": 9413, "db_id": "movie_3", "gold_sql": "SELECT T3.country FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id INNER JOIN customer AS T4 ON T1.address_id = T4.address_id WHERE T4.first_name = 'MARY' AND T4.last_name = 'SMITH'", "pred_sql": "SELECT country.country FROM customer \nJOIN address ON customer.address_id = address.address_id \nJOIN city ON address.city_id = city.city_id \nJOIN country ON city.country_id = country.country_id \nWHERE customer.first_name = 'Mary' AND customer.last_name = 'Smith';"}
{"sample_id": 9371, "db_id": "movie_3", "gold_sql": "SELECT title FROM film WHERE length = ( SELECT MIN(length) FROM film ) ORDER BY rental_duration * rental_rate DESC LIMIT 1", "pred_sql": "SELECT f.title, SUM(p.amount) AS total_revenue\nFROM film f\nJOIN inventory i ON f.film_id = i.film_id\nJOIN rental r ON i.inventory_id = r.inventory_id\nJOIN payment p ON r.rental_id = p.rental_id\nGROUP BY f.film_id\nORDER BY total_revenue DESC, f.length ASC\nLIMIT 1;"}
{"sample_id": 9400, "db_id": "movie_3", "gold_sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T2.store_id = 2 AND T1.rating = 'R'", "pred_sql": "SELECT COUNT(f.film_id) AS r_rating_count FROM film f JOIN inventory i ON f.film_id = i.film_id WHERE i.store_id = 2 AND f.rating = 'R';"}
{"sample_id": 9388, "db_id": "movie_3", "gold_sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'BOUND CHEAPER'", "pred_sql": "SELECT a.first_name, a.last_name \nFROM actor a \nJOIN film_actor fa ON a.actor_id = fa.actor_id \nJOIN film f ON fa.film_id = f.film_id \nWHERE f.title = 'Bound Cheaper';"}
{"sample_id": 9102, "db_id": "movie_3", "gold_sql": "SELECT COUNT(film_id) FROM film WHERE rating = 'NC-17' AND release_year = 2006", "pred_sql": "SELECT COUNT(*) AS adults_only_count FROM film WHERE release_year = 2006 AND rating = 'NC-17';"}
{"sample_id": 9352, "db_id": "movie_3", "gold_sql": "SELECT SUM(T1.rental_rate) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.\"name\" = 'Animation'", "pred_sql": "SELECT SUM(f.rental_rate) AS total_rental_rate\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE c.name = 'Animation';"}
{"sample_id": 9193, "db_id": "movie_3", "gold_sql": "SELECT T.first_name, T.last_name, num FROM ( SELECT T1.first_name, T1.last_name, COUNT(T2.film_id) AS num FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.num DESC LIMIT 5", "pred_sql": "SELECT a.first_name || ' ' || a.last_name AS full_name, COUNT(fa.film_id) AS film_count, AVG(COUNT(fa.film_id)) OVER() AS average_films\nFROM actor a\nJOIN film_actor fa ON a.actor_id = fa.actor_id\nGROUP BY a.actor_id\nORDER BY film_count DESC\nLIMIT 5;"}
{"sample_id": 9284, "db_id": "movie_3", "gold_sql": "SELECT T1.address, T1.address2, T1.district FROM address AS T1 INNER JOIN store AS T2 ON T1.address_id = T2.address_id WHERE T2.store_id = 2", "pred_sql": "SELECT address.address, address.address2, city.city, country.country \nFROM store \nJOIN address ON store.address_id = address.address_id \nJOIN city ON address.city_id = city.city_id \nJOIN country ON city.country_id = country.country_id \nWHERE store.store_id = 2;"}
{"sample_id": 9342, "db_id": "movie_3", "gold_sql": "SELECT T1.film_id FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T3.name = 'comedy'", "pred_sql": "SELECT f.film_id FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Comedy';"}
{"sample_id": 9197, "db_id": "movie_3", "gold_sql": "SELECT COUNT(DISTINCT rental_id) FROM rental WHERE date(rental_date) BETWEEN '2005-05-26' AND '2005-05-30'", "pred_sql": "SELECT COUNT(*) AS total_films_rented FROM rental WHERE rental_date = '2005-05-26' AND return_date = '2005-05-30';"}
{"sample_id": 9296, "db_id": "movie_3", "gold_sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T2.name = 'English' AND T1.rating = 'NC-17'", "pred_sql": "SELECT COUNT(*) AS adult_film_count FROM film WHERE rating = 'NC-17' AND language_id = (SELECT language_id FROM language WHERE name = 'English');"}
{"sample_id": 9279, "db_id": "movie_3", "gold_sql": "SELECT first_name, last_name FROM actor WHERE first_name = 'Johnny'", "pred_sql": "SELECT first_name || ' ' || last_name AS full_name FROM actor WHERE first_name = 'Johnny';"}
{"sample_id": 9332, "db_id": "movie_3", "gold_sql": "SELECT COUNT(film_id) FROM film WHERE release_year = 2006", "pred_sql": "SELECT COUNT(title) AS film_count FROM film WHERE release_year = 2006;"}
{"sample_id": 9402, "db_id": "movie_3", "gold_sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Nick' AND T1.last_name = 'Wahlberg' ORDER BY T3.rental_rate DESC LIMIT 1", "pred_sql": "SELECT f.length \nFROM film f \nJOIN film_actor fa ON f.film_id = fa.film_id \nJOIN actor a ON fa.actor_id = a.actor_id \nWHERE a.first_name = 'Nick' AND a.last_name = 'Wahlberg' \nORDER BY f.rental_rate DESC \nLIMIT 1;"}
{"sample_id": 9298, "db_id": "movie_3", "gold_sql": "SELECT COUNT(actor_id) FROM actor WHERE first_name = 'Dan'", "pred_sql": "SELECT COUNT(*) AS actor_count FROM actor WHERE first_name = 'Dan';"}
{"sample_id": 9321, "db_id": "movie_3", "gold_sql": "SELECT T2.first_name, T2.last_name FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.amount > 10", "pred_sql": "SELECT c.first_name || ' ' || c.last_name AS full_name \nFROM customer c \nJOIN payment p ON c.customer_id = p.customer_id \nWHERE p.amount > 10;"}
{"sample_id": 9189, "db_id": "movie_3", "gold_sql": "SELECT COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.rental_rate < 1 AND T2.name = 'Classics'", "pred_sql": "SELECT COUNT(*) AS movie_count FROM film WHERE rental_rate < 1 AND title LIKE '%classic%';"}
{"sample_id": 9098, "db_id": "movie_3", "gold_sql": "SELECT COUNT(film_id) FROM film WHERE rental_duration > 6", "pred_sql": "SELECT COUNT(*) AS film_count FROM film WHERE rental_duration > 6;"}
{"sample_id": 9207, "db_id": "movie_3", "gold_sql": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Documentary' LIMIT 5", "pred_sql": "SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Documentary' LIMIT 5;"}
{"sample_id": 9297, "db_id": "movie_3", "gold_sql": "SELECT title FROM film WHERE length = ( SELECT MAX(length) FROM film )", "pred_sql": "SELECT title FROM film ORDER BY length DESC LIMIT 1;"}
{"sample_id": 9318, "db_id": "movie_3", "gold_sql": "SELECT T3.\"name\" FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T1.title = 'BABY HALL'", "pred_sql": "SELECT c.name FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id WHERE f.title = 'BABY HALL';"}
{"sample_id": 9317, "db_id": "movie_3", "gold_sql": "SELECT COUNT(film_id) FROM film_category WHERE category_id = 11", "pred_sql": "SELECT COUNT(f.film_id) AS movie_count FROM film f JOIN film_category fc ON f.film_id = fc.film_id WHERE fc.category_id = '11';"}
{"sample_id": 9347, "db_id": "movie_3", "gold_sql": "SELECT DISTINCT T1.email FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T2.staff_id = 2", "pred_sql": "SELECT c.email FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN staff s ON r.staff_id = s.staff_id WHERE s.staff_id = 2;"}
{"sample_id": 4078, "db_id": "public_review_platform", "gold_sql": "SELECT T2.business_id, T3.active FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Diagnostic Imaging'", "pred_sql": "SELECT b.business_id, b.active FROM business b JOIN business_categories bc ON b.business_id = bc.business_id JOIN categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Diagnostic Imaging';"}
{"sample_id": 3957, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(T2.review_length) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Tempe' AND T1.stars = '3.5' AND T1.review_count = 'Uber' AND T2.review_length = 'Long'", "pred_sql": "SELECT COUNT(*) AS long_review_count FROM reviews r JOIN business b ON r.business_id = b.business_id WHERE b.city = 'Tempe' AND b.stars = '3.5' AND b.review_count > 100;"}
{"sample_id": 4056, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(business_id) FROM Business WHERE stars > 4", "pred_sql": "SELECT COUNT(business_id) AS business_count FROM business WHERE stars > 4;"}
{"sample_id": 4033, "db_id": "public_review_platform", "gold_sql": "SELECT T2.user_id FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id WHERE T2.number_of_compliments = 'High' AND T1.user_yelping_since_year = ( SELECT MIN(user_yelping_since_year) FROM Users )", "pred_sql": "SELECT u.user_id, u.user_yelping_since_year \nFROM users u \nJOIN users_compliments uc ON u.user_id = uc.user_id \nWHERE uc.number_of_compliments = (SELECT MAX(number_of_compliments) FROM users_compliments) \nORDER BY u.user_yelping_since_year ASC;"}
{"sample_id": 3768, "db_id": "public_review_platform", "gold_sql": "SELECT CAST(SUM(T1.review_stars) AS REAL) / COUNT(T1.review_stars) FROM Reviews AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.review_length LIKE 'Long' GROUP BY T1.user_id ORDER BY COUNT(T1.review_length) DESC LIMIT 1", "pred_sql": "SELECT AVG(user_average_stars) AS average_rating\nFROM users\nWHERE user_id = (\n    SELECT user_id\n    FROM reviews\n    GROUP BY user_id\n    ORDER BY SUM(review_length) DESC\n    LIMIT 1\n)"}
{"sample_id": 3840, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND active LIKE 'True'", "pred_sql": "SELECT COUNT(*) AS running_business_count FROM business WHERE state = 'Arizona' AND active = 'True';"}
{"sample_id": 4030, "db_id": "public_review_platform", "gold_sql": "SELECT CAST(COUNT(T1.city) AS REAL) * 100 / ( SELECT COUNT(business_id) FROM Business ), T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Mesa'", "pred_sql": "SELECT (COUNT(b.business_id) * 100.0 / (SELECT COUNT(*) FROM business)) AS percentage, ba.attribute_value \nFROM business b \nJOIN business_attributes ba ON b.business_id = ba.business_id \nWHERE b.city = 'Mesa' \nGROUP BY ba.attribute_value;"}
{"sample_id": 4077, "db_id": "public_review_platform", "gold_sql": "SELECT T2.business_id, T2.attribute_value FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name = 'payment_types_visa'", "pred_sql": "SELECT business_attributes.business_id, business_attributes.attribute_value \nFROM business_attributes \nJOIN attributes ON business_attributes.attribute_id = attributes.attribute_id \nWHERE attributes.attribute_name = 'payment_types_visa';"}
{"sample_id": 3782, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(T2.review_length) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Yuma' AND T2.review_length LIKE 'Medium'", "pred_sql": "SELECT COUNT(*) AS medium_review_count \nFROM reviews r \nJOIN business b ON r.business_id = b.business_id \nWHERE b.city = 'Yuma' AND r.review_stars = 3;"}
{"sample_id": 3783, "db_id": "public_review_platform", "gold_sql": "SELECT DISTINCT CASE WHEN T1.attribute_name LIKE 'Has TV' THEN 'yes' ELSE 'no' END FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.business_id = 4960", "pred_sql": "SELECT attribute_value FROM business_attributes WHERE business_id = '4960' AND attribute_id = (SELECT attribute_id FROM attributes WHERE attribute_name = 'TV');"}
{"sample_id": 3942, "db_id": "public_review_platform", "gold_sql": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'TRUE' AND T1.state NOT LIKE 'AZ'", "pred_sql": "SELECT DISTINCT c.category_name \nFROM business b \nJOIN business_categories bc ON b.business_id = bc.business_id \nJOIN categories c ON bc.category_id = c.category_id \nWHERE b.active = 'True' AND b.state != 'Arizona';"}
{"sample_id": 3863, "db_id": "public_review_platform", "gold_sql": "SELECT T1.opening_time FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week LIKE 'Tuesday' AND T1.business_id = 1", "pred_sql": "SELECT opening_time, closing_time FROM business_hours WHERE business_id = '1' AND day_id = (SELECT day_id FROM days WHERE day_of_week = 2);"}
{"sample_id": 3956, "db_id": "public_review_platform", "gold_sql": "SELECT DISTINCT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.active = 'true' AND T1.city = 'Gilbert' AND T1.review_count = 'Uber'", "pred_sql": "SELECT business_id FROM business WHERE active = 'True' AND city = 'Gilbert' ORDER BY review_count DESC LIMIT 1;"}
{"sample_id": 4128, "db_id": "public_review_platform", "gold_sql": "SELECT DISTINCT T3.category_name, T5.attribute_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id INNER JOIN Business_Attributes AS T4 ON T2.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.stars = ( SELECT MAX(stars) FROM Business )", "pred_sql": "SELECT c.category_name, a.attribute_name \nFROM business b \nJOIN business_categories bc ON b.business_id = bc.business_id \nJOIN categories c ON bc.category_id = c.category_id \nJOIN business_attributes ba ON b.business_id = ba.business_id \nJOIN attributes a ON ba.attribute_id = a.attribute_id \nWHERE b.stars = (SELECT MAX(stars) FROM business)"}
{"sample_id": 4016, "db_id": "public_review_platform", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.compliment_type = 'cute' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.user_id) FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T2.number_of_compliments = 'High'", "pred_sql": "SELECT (COUNT(DISTINCT uc.user_id) * 100.0 / (SELECT COUNT(DISTINCT user_id) FROM users_compliments)) AS percent_cute_compliments\nFROM users_compliments uc\nJOIN compliments c ON uc.compliment_id = c.compliment_id\nWHERE c.compliment_type = 'cute' AND uc.number_of_compliments = (SELECT MAX(number_of_compliments) FROM users_compliments);"}
{"sample_id": 4028, "db_id": "public_review_platform", "gold_sql": "SELECT T2.user_id FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.compliment_type = 'photos'", "pred_sql": "SELECT DISTINCT uc.user_id \nFROM users_compliments uc \nJOIN compliments c ON uc.compliment_id = c.compliment_id \nWHERE c.compliment_type = 'photos';"}
{"sample_id": 4073, "db_id": "public_review_platform", "gold_sql": "SELECT CAST(SUM(CASE WHEN active = 'true' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN active = 'false' THEN 1 ELSE 0 END) AS radio FROM Business WHERE review_count = 'Low'", "pred_sql": "SELECT active, COUNT(*) AS count FROM business WHERE review_count < 10 GROUP BY active;"}
{"sample_id": 4051, "db_id": "public_review_platform", "gold_sql": "SELECT T3.user_id FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Reviews AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name = 'Delivery' GROUP BY T3.user_id ORDER BY COUNT(T2.business_id) DESC LIMIT 1", "pred_sql": "SELECT u.user_id, COUNT(r.review_stars) AS review_count\nFROM users u\nJOIN reviews r ON u.user_id = r.user_id\nJOIN business b ON r.business_id = b.business_id\nJOIN business_attributes ba ON b.business_id = ba.business_id\nJOIN attributes a ON ba.attribute_id = a.attribute_id\nWHERE a.attribute_name = 'delivery'\nGROUP BY u.user_id\nORDER BY review_count DESC\nLIMIT 1;"}
{"sample_id": 3779, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 21679", "pred_sql": "SELECT COUNT(*) AS review_count FROM reviews WHERE user_id = 21679;"}
{"sample_id": 4101, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(business_id) FROM Business WHERE stars IN (1, 2)", "pred_sql": "SELECT COUNT(DISTINCT business_id) AS bad_experience_count FROM reviews WHERE review_stars <= 2;"}
{"sample_id": 3789, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(T1.attribute_name) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value LIKE 'TRUE' AND T2.business_id = 1141", "pred_sql": "SELECT COUNT(DISTINCT c.category_id) AS music_types\nFROM business_categories bc\nJOIN categories c ON bc.category_id = c.category_id\nWHERE bc.business_id = '1141' AND c.category_name = 'Music';"}
{"sample_id": 3900, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(business_id) FROM Business_Attributes WHERE attribute_id = 1 AND attribute_value = 'beer_and_wine'", "pred_sql": "SELECT DISTINCT business_id FROM business_attributes WHERE attribute_id IN (SELECT attribute_id FROM attributes WHERE attribute_name IN ('beer', 'wine'));"}
{"sample_id": 3832, "db_id": "public_review_platform", "gold_sql": "SELECT T1.attribute_name FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value LIKE 'TRUE' AND T2.business_id = 56", "pred_sql": "SELECT a.attribute_name \nFROM attributes a \nJOIN business_attributes ba ON a.attribute_id = ba.attribute_id \nWHERE ba.business_id = 56;"}
{"sample_id": 3935, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year = 2004 AND user_fans LIKE 'None'", "pred_sql": "SELECT COUNT(*) AS user_count FROM users WHERE user_fans = 0 AND user_yelping_since_year = 2014;"}
{"sample_id": 3969, "db_id": "public_review_platform", "gold_sql": "SELECT business_id, active, city FROM Business WHERE state = 'CA' AND active = 'true'", "pred_sql": "SELECT business_id, active, city FROM business WHERE state = 'CA';"}
{"sample_id": 3853, "db_id": "public_review_platform", "gold_sql": "SELECT T2.business_id FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name LIKE 'Good for Kids' AND T2.attribute_value LIKE 'TRUE'", "pred_sql": "SELECT business_id FROM business_attributes WHERE attribute_id IN (SELECT attribute_id FROM attributes WHERE attribute_name = 'Good for Kids')"}
{"sample_id": 3813, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Scottsdale' AND stars > 3", "pred_sql": "SELECT COUNT(*) AS business_count FROM business WHERE city = 'Scottsdale' AND stars > 3;"}
{"sample_id": 3890, "db_id": "public_review_platform", "gold_sql": "SELECT T2.closing_time, T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Tempe' ORDER BY T1.stars DESC LIMIT 1", "pred_sql": "SELECT b.business_id, bh.opening_time, bh.closing_time \nFROM business b \nJOIN business_hours bh ON b.business_id = bh.business_id \nWHERE b.city = 'Tempe' \nORDER BY b.stars DESC \nLIMIT 1;"}
{"sample_id": 4064, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(T1.business_id) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.category_name = 'Stadiums & Arenas' AND T3.stars = ( SELECT MAX(stars) FROM Business )", "pred_sql": "SELECT COUNT(b.business_id) AS number_of_businesses\nFROM business b\nJOIN business_categories bc ON b.business_id = bc.business_id\nJOIN categories c ON bc.category_id = c.category_id\nWHERE c.category_name = 'Stadiums & Arenas' AND b.stars > 3;"}
{"sample_id": 4026, "db_id": "public_review_platform", "gold_sql": "SELECT DISTINCT T1.state FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T2.opening_time = '1AM'", "pred_sql": "SELECT DISTINCT b.state FROM business_hours bh JOIN business b ON bh.business_id = b.business_id WHERE bh.opening_time = '01:00:00'"}
{"sample_id": 3847, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 3 AND review_length LIKE 'Long'", "pred_sql": "SELECT COUNT(*) AS long_reviews_count FROM reviews WHERE user_id = 3 AND review_length > 100;"}
{"sample_id": 3761, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(user_id) FROM Users WHERE user_fans LIKE 'Uber'", "pred_sql": "SELECT COUNT(*) AS user_count FROM users WHERE user_fans > 1000;"}
{"sample_id": 3975, "db_id": "public_review_platform", "gold_sql": "SELECT T1.user_id, T2.business_id, T2.tip_length FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2004 AND T1.user_fans = 'High'", "pred_sql": "SELECT u.user_id, t.business_id, t.tip_length \nFROM users u \nJOIN tips t ON u.user_id = t.user_id \nWHERE u.user_yelping_since_year = 2004 AND u.user_fans > 100;"}
{"sample_id": 3881, "db_id": "public_review_platform", "gold_sql": "SELECT business_id FROM Business WHERE city LIKE 'Mesa' AND stars BETWEEN 2 AND 3", "pred_sql": "SELECT business_id FROM business WHERE stars >= 2 AND stars <= 3 AND city = 'Mesa';"}
{"sample_id": 3836, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(T2.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.stars > 3 AND T1.category_name LIKE 'Accessories'", "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS business_count\nFROM business b\nJOIN business_categories bc ON b.business_id = bc.business_id\nJOIN reviews r ON b.business_id = r.business_id\nWHERE bc.category_id = (SELECT category_id FROM categories WHERE category_name = 'Accessories')\nAND r.review_stars > 3;"}
{"sample_id": 3962, "db_id": "public_review_platform", "gold_sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Tips AS T2 ON T1.business_id = T2.business_id WHERE T2.tip_length = 'Medium' AND T2.likes = 3", "pred_sql": "SELECT b.city FROM tips t JOIN business b ON t.business_id = b.business_id WHERE t.tip_length = 3 AND t.likes = 3;"}
{"sample_id": 3983, "db_id": "public_review_platform", "gold_sql": "SELECT T3.user_id, T3.user_fans FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T1.city = 'Sun Lakes' AND T1.stars = 5", "pred_sql": "SELECT u.user_id, u.user_fans \nFROM reviews r \nJOIN business b ON r.business_id = b.business_id \nJOIN users u ON r.user_id = u.user_id \nWHERE b.city = 'Sun Lakes' AND b.stars > 3;"}
{"sample_id": 3855, "db_id": "public_review_platform", "gold_sql": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T2.business_id = 1", "pred_sql": "SELECT c.category_name \nFROM business_categories bc \nJOIN categories c ON bc.category_id = c.category_id \nWHERE bc.business_id = '1';"}
{"sample_id": 3914, "db_id": "public_review_platform", "gold_sql": "SELECT CAST(SUM(T2.review_stars) AS REAL) / COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id", "pred_sql": "SELECT AVG(reviews.review_stars) AS average_review_stars, AVG(business.stars) AS average_business_stars\nFROM reviews\nJOIN business ON reviews.business_id = business.business_id;"}
{"sample_id": 3952, "db_id": "public_review_platform", "gold_sql": "SELECT attribute_id FROM Attributes WHERE attribute_name = 'Accepts Insurance'", "pred_sql": "SELECT attribute_id FROM attributes WHERE attribute_name = 'Accepts Insurance';"}
{"sample_id": 4119, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(business_id) FROM Business WHERE city = 'Surprise'", "pred_sql": "SELECT COUNT(*) AS business_count FROM business WHERE city = 'Surprise';"}
{"sample_id": 3889, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T3.attribute_name LIKE 'Caters' AND T1.review_count LIKE 'Low' AND T1.active LIKE 'TRUE'", "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS active_business_count\nFROM business b\nJOIN business_attributes ba ON b.business_id = ba.business_id\nJOIN attributes a ON ba.attribute_id = a.attribute_id\nWHERE b.active = 'True' \nAND a.attribute_name = 'caters' \nAND b.review_count < 10;"}
{"sample_id": 3816, "db_id": "public_review_platform", "gold_sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id WHERE T2.attribute_value LIKE 'full_bar' GROUP BY T1.city", "pred_sql": "SELECT b.city, COUNT(b.business_id) AS business_count\nFROM business b\nJOIN business_attributes ba ON b.business_id = ba.business_id\nWHERE ba.attribute_id IN (SELECT attribute_id FROM attributes WHERE attribute_name = 'full_bar')\nGROUP BY b.city\nORDER BY business_count DESC\nLIMIT 1;"}
{"sample_id": 3971, "db_id": "public_review_platform", "gold_sql": "SELECT attribute_id, attribute_name FROM Attributes WHERE attribute_name LIKE 'music%'", "pred_sql": "SELECT attribute_id, attribute_name FROM attributes WHERE attribute_name LIKE 'music%';"}
{"sample_id": 3802, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(*) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Active Life' AND T3.city = 'Phoenix'", "pred_sql": "SELECT SUM(b.review_count) AS total_review_count FROM business b JOIN business_categories bc ON b.business_id = bc.business_id JOIN categories c ON bc.category_id = c.category_id WHERE b.active = 'True' AND b.city = 'Phoenix' AND c.category_name = 'active life';"}
{"sample_id": 3974, "db_id": "public_review_platform", "gold_sql": "SELECT business_id, user_id FROM Reviews WHERE review_votes_cool = 'Uber'", "pred_sql": "SELECT DISTINCT reviews.business_id, reviews.user_id \nFROM reviews \nJOIN users ON reviews.user_id = users.user_id \nWHERE users.user_votes_cool > 100;"}
{"sample_id": 3982, "db_id": "public_review_platform", "gold_sql": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id GROUP BY T2.category_id HAVING COUNT(T2.business_id) > ( SELECT COUNT(T3.business_id) FROM Business_Categories AS T3 ) * 0.1", "pred_sql": "SELECT c.category_name, COUNT(bc.business_id) AS business_count\nFROM business_categories bc\nJOIN categories c ON bc.category_id = c.category_id\nJOIN business b ON bc.business_id = b.business_id\nWHERE b.active = 'True'\nGROUP BY c.category_name\nHAVING COUNT(bc.business_id) > (SELECT COUNT(*) * 0.1 FROM business)"}
{"sample_id": 4109, "db_id": "public_review_platform", "gold_sql": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.city = 'Arcadia'", "pred_sql": "SELECT c.category_name \nFROM business_categories bc \nJOIN categories c ON bc.category_id = c.category_id \nJOIN business b ON bc.business_id = b.business_id \nWHERE b.city = 'Arcadia'"}
{"sample_id": 3917, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND review_count LIKE 'High' AND active LIKE 'True'", "pred_sql": "SELECT COUNT(*) AS total_active_businesses FROM business WHERE active = 'True' AND state = 'AZ' AND review_count > 0;"}
{"sample_id": 4075, "db_id": "public_review_platform", "gold_sql": "SELECT category_id, category_name FROM Categories WHERE category_name LIKE 'P%' LIMIT 5", "pred_sql": "SELECT category_id, category_name FROM categories WHERE category_name LIKE 'P%' LIMIT 5;"}
{"sample_id": 4114, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(DISTINCT T1.user_id) FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T2.tip_length = 'Long' AND T2.likes = 2 AND T1.user_fans = 'High'", "pred_sql": "SELECT COUNT(DISTINCT u.user_id) AS user_count\nFROM users u\nJOIN tips t ON u.user_id = t.user_id\nWHERE t.tip_length > 100 AND t.likes = 2 AND u.user_fans > 100;"}
{"sample_id": 3892, "db_id": "public_review_platform", "gold_sql": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'TRUE' AND T1.state LIKE 'AZ' AND T1.city LIKE 'Surprise' GROUP BY T3.category_name", "pred_sql": "SELECT c.category_name \nFROM business_categories bc \nJOIN categories c ON bc.category_id = c.category_id \nJOIN business b ON bc.business_id = b.business_id \nWHERE b.active = 'True' AND b.city = 'Surprise' AND b.state = 'AZ';"}
{"sample_id": 3800, "db_id": "public_review_platform", "gold_sql": "SELECT T3.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T4.closing_time > '9PM' AND T1.category_name LIKE 'Pets'", "pred_sql": "SELECT b.business_id, b.city, b.state FROM business b JOIN business_categories bc ON b.business_id = bc.business_id JOIN categories c ON bc.category_id = c.category_id JOIN business_hours bh ON b.business_id = bh.business_id WHERE c.category_name = 'pets' AND b.active = 'True' AND bh.closing_time > 21;"}
{"sample_id": 3965, "db_id": "public_review_platform", "gold_sql": "SELECT T1.attribute_value FROM Business_Attributes AS T1 INNER JOIN Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.business_id = 11825 AND T2.attribute_name = 'parking_lot'", "pred_sql": "SELECT COUNT(*) > 0 AS has_parking_lot FROM business_attributes WHERE business_id = '11825' AND attribute_id = (SELECT attribute_id FROM attributes WHERE attribute_name = 'parking lot');"}
{"sample_id": 4121, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(business_id) FROM Business WHERE review_count = 'Medium' AND state = 'AZ' AND active = 'true'", "pred_sql": "SELECT COUNT(*) AS total_active_businesses FROM business WHERE active = 'True' AND state = 'AZ' AND review_count BETWEEN 10 AND 50;"}
{"sample_id": 3769, "db_id": "public_review_platform", "gold_sql": "SELECT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T1.review_length LIKE 'Long' GROUP BY T2.business_id ORDER BY COUNT(T1.review_length) DESC LIMIT 1", "pred_sql": "SELECT c.category_name \nFROM reviews r \nJOIN business b ON r.business_id = b.business_id \nJOIN business_categories bc ON b.business_id = bc.business_id \nJOIN categories c ON bc.category_id = c.category_id \nWHERE r.review_length = (SELECT MAX(review_length) FROM reviews) \nLIMIT 1;"}
{"sample_id": 3883, "db_id": "public_review_platform", "gold_sql": "SELECT review_length FROM Reviews WHERE user_id = 35026 AND business_id = 2", "pred_sql": "SELECT review_length FROM reviews WHERE user_id = 35026 AND business_id = 2;"}
{"sample_id": 4001, "db_id": "public_review_platform", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.review_votes_funny = 'Low' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Phoenix'", "pred_sql": "SELECT (COUNT(CASE WHEN u.user_votes_funny < 10 THEN 1 END) * 100.0 / COUNT(*)) AS low_funny_votes_percentage\nFROM business b\nJOIN users u ON b.business_id = u.user_id\nWHERE b.city = 'Phoenix';"}
{"sample_id": 3764, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(T1.category_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.category_name LIKE 'Bars'", "pred_sql": "SELECT COUNT(*) AS bar_count FROM business_categories bc JOIN categories c ON bc.category_id = c.category_id WHERE c.category_name = 'bars';"}
{"sample_id": 3812, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Phoenix' AND active LIKE 'TRUE'", "pred_sql": "SELECT COUNT(*) AS active_business_count FROM business WHERE active = 'True' AND city = 'Phoenix';"}
{"sample_id": 3790, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(T1.compliment_type) FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.compliment_type LIKE 'cute' AND T2.user_id = 57400", "pred_sql": "SELECT SUM(number_of_compliments) AS total_cute_compliments \nFROM users_compliments uc \nJOIN compliments c ON uc.compliment_id = c.compliment_id \nWHERE uc.user_id = 57400 AND c.compliment_type = 'cute';"}
{"sample_id": 3910, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(review_stars) / (strftime('%Y', 'now') - T1.user_yelping_since_year) FROM Users AS T1 INNER JOIN Reviews AS T2 ON T1.user_id = T2.user_id WHERE T1.user_id = 3", "pred_sql": "SELECT AVG(review_stars) AS average_review FROM reviews WHERE user_id = 3;"}
{"sample_id": 3981, "db_id": "public_review_platform", "gold_sql": "SELECT T2.business_id, T3.state, T3.city FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Coffee & Tea' LIMIT 5", "pred_sql": "SELECT b.business_id, b.state, b.city \nFROM business b \nJOIN business_categories bc ON b.business_id = bc.business_id \nJOIN categories c ON bc.category_id = c.category_id \nWHERE c.category_name = 'Coffee & Tea' \nLIMIT 5;"}
{"sample_id": 3891, "db_id": "public_review_platform", "gold_sql": "SELECT T3.category_name, T5.attribute_name FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id INNER JOIN Business_Attributes AS T4 ON T1.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.active LIKE 'TRUE' AND T1.state LIKE 'AZ' AND T1.city LIKE 'Chandler' AND T1.review_count LIKE 'Medium'", "pred_sql": "SELECT c.category_name, a.attribute_name \nFROM business b \nJOIN business_categories bc ON b.business_id = bc.business_id \nJOIN categories c ON bc.category_id = c.category_id \nJOIN business_attributes ba ON b.business_id = ba.business_id \nJOIN attributes a ON ba.attribute_id = a.attribute_id \nWHERE b.active = 'True' \nAND b.city = 'Chandler' \nAND b.state = 'AZ' \nAND b.review_count BETWEEN 10 AND 50;"}
{"sample_id": 4111, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name = 'music_karaoke' AND T3.active = 'false' AND T2.attribute_value IN ('none', 'no', 'false')", "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS closed_businesses_count\nFROM business b\nJOIN business_attributes ba ON b.business_id = ba.business_id\nWHERE ba.attribute_id = (SELECT attribute_id FROM attributes WHERE attribute_name = 'music_karaoke')\nAND b.active = 'False';"}
{"sample_id": 3990, "db_id": "public_review_platform", "gold_sql": "SELECT CAST(SUM(CASE WHEN stars = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(stars) FROM Business", "pred_sql": "SELECT (COUNT(CASE WHEN stars = '5' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_of_5_star_businesses FROM business;"}
{"sample_id": 3979, "db_id": "public_review_platform", "gold_sql": "SELECT T2.user_id, T2.review_length FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'San Tan Valley' AND T1.active = 'false' AND T2.review_stars = 5", "pred_sql": "SELECT r.user_id, r.review_length \nFROM reviews r \nJOIN business b ON r.business_id = b.business_id \nWHERE b.active = 'False' AND b.city = 'San Tan Valley' AND r.review_stars = 5;"}
{"sample_id": 4137, "db_id": "public_review_platform", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.stars > 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.stars) FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Food'", "pred_sql": "SELECT (COUNT(CASE WHEN b.stars > 3 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_positive_stars\nFROM business b\nJOIN business_categories bc ON b.business_id = bc.business_id\nJOIN categories c ON bc.category_id = c.category_id\nWHERE c.category_name = 'Food';"}
{"sample_id": 3944, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value = 'true' AND T1.attribute_name = 'ambience_romantic'", "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS romantic_business_count\nFROM business b\nJOIN business_attributes ba ON b.business_id = ba.business_id\nJOIN attributes a ON ba.attribute_id = a.attribute_id\nWHERE a.attribute_name = 'romantic' AND ba.attribute_value = 'True';"}
{"sample_id": 3927, "db_id": "public_review_platform", "gold_sql": "SELECT T2.closing_time, T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Gilbert' ORDER BY T1.stars DESC LIMIT 1", "pred_sql": "SELECT b.business_id, bh.opening_time, bh.closing_time \nFROM business b \nJOIN business_hours bh ON b.business_id = bh.business_id \nWHERE b.city = 'Gilbert' \nORDER BY b.stars DESC \nLIMIT 1;"}
{"sample_id": 3938, "db_id": "public_review_platform", "gold_sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.opening_time LIKE '10AM' AND T2.closing_time LIKE '12PM' AND T3.day_of_week LIKE 'Sunday'", "pred_sql": "SELECT b.city FROM business b JOIN business_hours bh ON b.business_id = bh.business_id JOIN days d ON bh.day_id = d.day_id WHERE bh.opening_time <= 10 AND bh.closing_time >= 12 AND d.day_of_week = 0;"}
{"sample_id": 4040, "db_id": "public_review_platform", "gold_sql": "SELECT T3.tip_length, SUM(T3.likes) AS likes FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Tips AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Hotels & Travel' GROUP BY T3.tip_length", "pred_sql": "SELECT AVG(t.tip_length) AS average_tip_length, AVG(t.likes) AS average_likes\nFROM tips t\nJOIN business b ON t.business_id = b.business_id\nJOIN business_categories bc ON b.business_id = bc.business_id\nJOIN categories c ON bc.category_id = c.category_id\nWHERE c.category_name IN ('Hotel', 'Travel')\nGROUP BY c.category_name;"}
{"sample_id": 3943, "db_id": "public_review_platform", "gold_sql": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.stars = 2 AND T1.review_count LIKE 'High'", "pred_sql": "SELECT c.category_name \nFROM business b \nJOIN business_categories bc ON b.business_id = bc.business_id \nJOIN categories c ON bc.category_id = c.category_id \nWHERE b.review_count > 100 AND b.stars = '2';"}
{"sample_id": 3849, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year = 2012", "pred_sql": "SELECT COUNT(*) AS user_count FROM users WHERE user_yelping_since_year >= 2012;"}
{"sample_id": 3861, "db_id": "public_review_platform", "gold_sql": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.state LIKE 'AZ' GROUP BY T1.category_name", "pred_sql": "SELECT c.category_name FROM categories c JOIN business_categories bc ON c.category_id = bc.category_id JOIN business b ON bc.business_id = b.business_id WHERE b.state = 'Arizona';"}
{"sample_id": 3932, "db_id": "public_review_platform", "gold_sql": "SELECT T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Surprise' AND T1.active LIKE 'TRUE' AND T1.review_count LIKE 'Low' GROUP BY T2.opening_time", "pred_sql": "SELECT bh.opening_time FROM business b JOIN business_hours bh ON b.business_id = bh.business_id WHERE b.active = 'True' AND b.city = 'Surprise' AND b.review_count < (SELECT AVG(review_count) FROM business)"}
{"sample_id": 5229, "db_id": "address", "gold_sql": "SELECT COUNT(T2.zip_code) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Ohio' AND T2.type = 'Unique Post Office'", "pred_sql": "SELECT COUNT(DISTINCT type) AS unique_post_office_types FROM zip_data WHERE state = 'Ohio';"}
{"sample_id": 5199, "db_id": "address", "gold_sql": "SELECT SUM(T2.population_2020) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'ARECIBO'", "pred_sql": "SELECT population_2020 FROM zip_data WHERE city = 'Arecibo';"}
{"sample_id": 5176, "db_id": "address", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.type = 'Post Office' THEN T2.zip_code ELSE NULL END) AS REAL) * 100 / COUNT(T2.zip_code) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'California'", "pred_sql": "SELECT type, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM zip_data WHERE state = 'California') AS percentage FROM zip_data WHERE state = 'California' GROUP BY type;"}
{"sample_id": 5171, "db_id": "address", "gold_sql": "SELECT T2.zip_code, T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Greeneville'", "pred_sql": "SELECT z.zip_code, a.alias FROM zip_data z JOIN alias a ON z.zip_code = a.zip_code WHERE z.city = 'Greeneville';"}
{"sample_id": 5214, "db_id": "address", "gold_sql": "SELECT T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.asian_population = 7", "pred_sql": "SELECT a.alias \nFROM alias a \nJOIN zip_data z ON a.zip_code = z.zip_code \nWHERE z.asian_population = '7';"}
{"sample_id": 5089, "db_id": "address", "gold_sql": "SELECT DISTINCT T1.zip_code FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'HUNTINGDON' AND T1.employees > 30", "pred_sql": "SELECT zip_data.zip_code FROM zip_data JOIN country ON zip_data.zip_code = country.zip_code WHERE country.county = 'Huntingdon' AND zip_data.employees > 30;"}
{"sample_id": 5182, "db_id": "address", "gold_sql": "SELECT T1.bad_alias FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'East Setauket'", "pred_sql": "SELECT avoid.bad_alias FROM avoid JOIN zip_data ON avoid.zip_code = zip_data.zip_code WHERE zip_data.city = 'East Setauket';"}
{"sample_id": 5127, "db_id": "address", "gold_sql": "SELECT T2.zip_code FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.first_name = 'King' AND T1.last_name = 'Steven A'", "pred_sql": "SELECT zip_code FROM zip_congress WHERE district = (SELECT cognress_rep_id FROM congress WHERE first_name = 'Steven' AND last_name = 'King')"}
{"sample_id": 5104, "db_id": "address", "gold_sql": "SELECT T1.population_2020 - T1.population_2010 AS result_data FROM zip_data AS T1 INNER JOIN CBSA AS T2 ON T1.CBSA = T2.CBSA WHERE T2.CBSA_name = 'Allentown-Bethlehem-Easton, PA-NJ' ORDER BY T1.population_2020 DESC LIMIT 1", "pred_sql": "SELECT (population_2020 - population_2010) AS population_difference FROM zip_data WHERE city = 'Allentown-Bethlehem-Easton' AND state = 'PA'"}
{"sample_id": 5172, "db_id": "address", "gold_sql": "SELECT CASE WHEN COUNT(CASE WHEN T1.first_name = 'Smith' AND T1.last_name = 'Adrian' THEN T2.zip_code ELSE NULL END) > COUNT(CASE WHEN T1.first_name = 'Heck' AND T1.last_name = 'Joe' THEN T2.zip_code ELSE NULL END) THEN 'Smith Adrian>Heck Joe' ELSE 'Smith Adrian<=Heck Joe' END AS COMPARE FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district", "pred_sql": "SELECT z1.cbsa AS cbsa_smith, COUNT(z1.zip_code) AS postal_points_smith, z2.cbsa AS cbsa_heck, COUNT(z2.zip_code) AS postal_points_heck\nFROM zip_data z1\nJOIN congress c1 ON z1.cbsa = c1.abbreviation\nWHERE c1.first_name = 'Adrian' AND c1.last_name = 'Smith'\nGROUP BY z1.cbsa\nUNION ALL\nSELECT z2.cbsa AS cbsa_heck, COUNT(z2.zip_code) AS postal_points_heck\nFROM zip_data z2\nJOIN congress c2 ON z2.cbsa = c2.abbreviation\nWHERE c2.first_name = 'Joe' AND c2.last_name = 'Heck'\nGROUP BY z2.cbsa;"}
{"sample_id": 5221, "db_id": "address", "gold_sql": "SELECT T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T1.city = 'Garfield'", "pred_sql": "SELECT congress.first_name, congress.last_name, congress.party, congress.state FROM congress JOIN zip_data ON congress.abbreviation = zip_data.state WHERE zip_data.city = 'Garfield';"}
{"sample_id": 5139, "db_id": "address", "gold_sql": "SELECT T1.CBSA_name FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA GROUP BY T1.CBSA HAVING COUNT(T2.zip_code) > 10", "pred_sql": "SELECT cbsa.cbsa, cbsa.cbsa_name, COUNT(zip_data.zip_code) AS zip_code_count \nFROM cbsa \nJOIN zip_data ON cbsa.cbsa = zip_data.cbsa \nGROUP BY cbsa.cbsa, cbsa.cbsa_name \nHAVING COUNT(zip_data.zip_code) > 10;"}
{"sample_id": 5105, "db_id": "address", "gold_sql": "SELECT DISTINCT T2.zip_code FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T2.county = 'NEW CASTLE' AND T1.name = 'Delaware'", "pred_sql": "SELECT zip_code FROM zip_data WHERE state = 'DE' AND zip_code IN (SELECT zip_code FROM country WHERE county = 'New Castle');"}
{"sample_id": 5098, "db_id": "address", "gold_sql": "SELECT COUNT(T2.county) FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Alabama'", "pred_sql": "SELECT COUNT(DISTINCT county) AS county_count FROM country WHERE state = 'Alabama';"}
{"sample_id": 5193, "db_id": "address", "gold_sql": "SELECT COUNT(DISTINCT T1.city) FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T3.first_name = 'Pierluisi' AND T3.last_name = 'Pedro'", "pred_sql": "SELECT COUNT(DISTINCT zip_data.city) AS city_count \nFROM congress \nJOIN zip_congress ON congress.cognress_rep_id = zip_congress.district \nJOIN zip_data ON zip_congress.zip_code = zip_data.zip_code \nWHERE congress.first_name = 'Pedro' AND congress.last_name = 'Pierluisi';"}
{"sample_id": 5096, "db_id": "address", "gold_sql": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN ZIP_Data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.female_median_age > 32 GROUP BY T1.area_code", "pred_sql": "SELECT area_code.zip_code, area_code.area_code \nFROM area_code \nJOIN zip_data ON area_code.zip_code = zip_data.zip_code \nJOIN congress ON zip_data.zip_code = zip_congress.zip_code \nJOIN cbsa ON zip_data.cbsa = cbsa.cbsa \nWHERE zip_data.state = congress.state AND cbsa.female_median_age > 32;"}
{"sample_id": 5082, "db_id": "address", "gold_sql": "SELECT SUM(T1.households) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO'", "pred_sql": "SELECT SUM(households) AS total_households FROM zip_data WHERE county = 'Arecibo'"}
{"sample_id": 5178, "db_id": "address", "gold_sql": "SELECT T2.city FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code GROUP BY T1.bad_alias ORDER BY COUNT(T1.zip_code) DESC LIMIT 1", "pred_sql": "SELECT zip_data.city, COUNT(avoid.bad_alias) AS bad_alias_count \nFROM zip_data \nJOIN avoid ON zip_data.zip_code = avoid.zip_code \nGROUP BY zip_data.city \nORDER BY bad_alias_count DESC \nLIMIT 1;"}
{"sample_id": 5117, "db_id": "address", "gold_sql": "SELECT T2.state FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 878", "pred_sql": "SELECT state.name FROM area_code JOIN zip_data ON area_code.zip_code = zip_data.zip_code JOIN state ON zip_data.state = state.abbreviation WHERE area_code.area_code = '878';"}
{"sample_id": 5231, "db_id": "address", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.party = 'Democrat' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*), SUM(CASE WHEN T1.state = 'Hawaii' THEN 1 ELSE 0 END) FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district", "pred_sql": "SELECT COUNT(zip_data.zip_code) * 100.0 / (SELECT COUNT(*) FROM congress WHERE party = 'Democrat') AS percentage_of_postal_points_in_hawaii\nFROM congress\nJOIN zip_congress ON congress.cognress_rep_id = zip_congress.district\nJOIN zip_data ON zip_congress.zip_code = zip_data.zip_code\nWHERE congress.party = 'Democrat' AND zip_data.state = 'HI';"}
{"sample_id": 5162, "db_id": "address", "gold_sql": "SELECT COUNT(CASE WHEN T2.type = 'P.O. Box Only' THEN 1 ELSE NULL END) - COUNT(CASE WHEN T2.type = 'Post Office' THEN 1 ELSE NULL END) AS DIFFERENCE FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 787", "pred_sql": "SELECT COUNT(CASE WHEN type = 'P.O. Box' THEN 1 END) AS po_box_only_count, COUNT(CASE WHEN type = 'Post Office' THEN 1 END) AS post_office_count FROM zip_data WHERE zip_code IN (SELECT zip_code FROM area_code WHERE area_code = '787');"}
{"sample_id": 5226, "db_id": "address", "gold_sql": "SELECT COUNT(T2.zip_code) FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.state = 'Mississippi'", "pred_sql": "SELECT COUNT(zip_data.zip_code) AS postal_point_count \nFROM zip_data \nJOIN congress ON zip_congress.zip_code = zip_data.zip_code \nWHERE congress.state = 'MS' AND congress.house = 'House of Representatives';"}
{"sample_id": 5101, "db_id": "address", "gold_sql": "SELECT COUNT(*) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.abbreviation = 'CA' AND T2.type LIKE '%Community Post Office%' AND T1.name = 'California' AND T2.state = 'CA'", "pred_sql": "SELECT total_delivery_receptacles FROM zip_data WHERE state = 'CA' ORDER BY total_delivery_receptacles DESC LIMIT 1;"}
{"sample_id": 5130, "db_id": "address", "gold_sql": "SELECT T2.county FROM avoid AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T1.bad_alias = 'Druid Hills'", "pred_sql": "SELECT country.county FROM avoid JOIN zip_data ON avoid.zip_code = zip_data.zip_code JOIN country ON zip_data.zip_code = country.zip_code WHERE avoid.bad_alias = 'Druid Hills';"}
{"sample_id": 5195, "db_id": "address", "gold_sql": "SELECT T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T1.city = 'Guanica'", "pred_sql": "SELECT first_name || ' ' || last_name AS congressman_name FROM congress WHERE state = 'Guanica';"}
{"sample_id": 5123, "db_id": "address", "gold_sql": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Bishopville' AND T2.state = 'SC'", "pred_sql": "SELECT area_code.area_code FROM area_code JOIN zip_data ON area_code.zip_code = zip_data.zip_code WHERE zip_data.city = 'Bishopville' AND zip_data.state = 'SC';"}
{"sample_id": 5126, "db_id": "address", "gold_sql": "SELECT T1.alias, T2.bad_alias FROM alias AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code WHERE T1.zip_code = 38015", "pred_sql": "SELECT alias.alias, avoid.bad_alias FROM alias JOIN avoid ON alias.zip_code = avoid.zip_code WHERE alias.zip_code = '38015';"}
{"sample_id": 5094, "db_id": "address", "gold_sql": "SELECT CAST(T1.male_population AS REAL) / T1.female_population FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO' AND T1.female_population <> 0 ORDER BY 1 DESC LIMIT 1", "pred_sql": "SELECT MAX(male_population / female_population) AS highest_gender_ratio FROM zip_data WHERE county = 'Arecibo' AND female_population != 0;"}
{"sample_id": 5085, "db_id": "address", "gold_sql": "SELECT COUNT(T1.zip_code) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'DELAWARE' AND T1.daylight_savings = 'Yes'", "pred_sql": "SELECT COUNT(*) AS residential_areas_with_daylight_saving FROM zip_data WHERE state = 'DE' AND daylight_savings = 'Yes';"}
{"sample_id": 5103, "db_id": "address", "gold_sql": "SELECT DISTINCT T2.name FROM zip_data AS T1 INNER JOIN state AS T2 ON T1.state = T2.abbreviation WHERE T1.division IS NULL", "pred_sql": "SELECT DISTINCT state.name FROM zip_data WHERE zip_data.organization = 'No data';"}
{"sample_id": 573, "db_id": "codebase_comments", "gold_sql": "SELECT ProcessedTime FROM Repo WHERE Watchers = ( SELECT MAX(Watchers) FROM Repo )", "pred_sql": "SELECT processedtime FROM repo ORDER BY stars DESC LIMIT 1;"}
{"sample_id": 603, "db_id": "codebase_comments", "gold_sql": "SELECT Lang FROM Method WHERE Name = 'PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn'", "pred_sql": "SELECT lang FROM method WHERE name = 'PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn';"}
{"sample_id": 602, "db_id": "codebase_comments", "gold_sql": "SELECT CAST((SUM(CASE WHEN T2.Id = 18 THEN T1.Forks ELSE 0 END) - SUM(CASE WHEN T2.Id = 19 THEN T1.Forks ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 19 THEN T1.Forks ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId", "pred_sql": "SELECT (r1.followers - r2.followers) * 100.0 / r2.followers AS percentage_difference\nFROM (\n    SELECT repo.id, repo.followers\n    FROM solution\n    JOIN repo ON solution.repid = repo.id\n    WHERE solution.id = '18'\n) AS r1,\n(\n    SELECT repo.id, repo.followers\n    FROM solution\n    JOIN repo ON solution.repid = repo.id\n    WHERE solution.id = '19'\n) AS r2;"}
{"sample_id": 594, "db_id": "codebase_comments", "gold_sql": "SELECT CASE WHEN SUM(CASE WHEN T2.Id = 18 THEN T1.Watchers ELSE 0 END) > SUM(CASE WHEN T2.Id = 19 THEN T1.Watchers ELSE 0 END) THEN 'SolutionID18' WHEN SUM(CASE WHEN T2.Id = 18 THEN T1.Watchers ELSE 0 END) < SUM(CASE WHEN T2.Id = 19 THEN T1.Watchers ELSE 0 END) THEN 'SolutionID19' END isMorePopular FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId", "pred_sql": "SELECT s.id, r.stars FROM solution s JOIN repo r ON s.repid = r.id WHERE s.id IN ('ID18', 'ID19') ORDER BY r.stars DESC LIMIT 1;"}
{"sample_id": 664, "db_id": "codebase_comments", "gold_sql": "SELECT CASE WHEN CommentIsXml = 0 THEN 'isNotXMLFormat' WHEN CommentIsXml = 1 THEN 'isXMLFormat' END format FROM Method WHERE Id = 8", "pred_sql": "SELECT commentisxml FROM method WHERE id = '8';"}
{"sample_id": 632, "db_id": "codebase_comments", "gold_sql": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'spinachLexer.mT__55'", "pred_sql": "SELECT solution.path FROM method JOIN solution ON method.solutionid = solution.id WHERE method.name = 'spinachLexer.mT__55';"}
{"sample_id": 592, "db_id": "codebase_comments", "gold_sql": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 12", "pred_sql": "SELECT r.url FROM repo r JOIN solution s ON r.id = s.repid WHERE s.id = 'ID12';"}
{"sample_id": 615, "db_id": "codebase_comments", "gold_sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks = 1445", "pred_sql": "SELECT COUNT(*) FROM solution WHERE repoid = (SELECT id FROM repo WHERE forks = '1445');"}
{"sample_id": 657, "db_id": "codebase_comments", "gold_sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks < T1.Stars * 1 / 3", "pred_sql": "SELECT COUNT(*) FROM solution s JOIN repo r ON s.repid = r.id WHERE r.stars > r.forks * 1.33;"}
{"sample_id": 669, "db_id": "codebase_comments", "gold_sql": "SELECT T1.ProcessedTime, COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.SolutionId = 1", "pred_sql": "SELECT solution.processedtime, COUNT(method.id) AS method_count \nFROM solution \nLEFT JOIN method ON solution.id = method.solutionid \nWHERE solution.id = '1' \nGROUP BY solution.processedtime;"}
{"sample_id": 605, "db_id": "codebase_comments", "gold_sql": "SELECT DISTINCT Summary FROM Method WHERE Name = 'Castle.MonoRail.Framework.Test.StubViewComponentContext.RenderSection'", "pred_sql": "SELECT summary FROM method WHERE name = 'Castle.MonoRail.Framework.Test.StubViewComponentContext.RenderSection';"}
{"sample_id": 578, "db_id": "codebase_comments", "gold_sql": "SELECT T3.ApiCalls FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T1.Url = 'https://github.com/wallerdev/htmlsharp.git'", "pred_sql": "SELECT m.apicalls FROM repo r JOIN solution s ON r.id = s.repid JOIN method m ON s.id = m.solutionid WHERE r.url = 'https://github.com/wallerdev/htmlsharp.git';"}
{"sample_id": 611, "db_id": "codebase_comments", "gold_sql": "SELECT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'SCore.Poisson.ngtIndex'", "pred_sql": "SELECT repo.id FROM repo JOIN solution ON repo.id = solution.repid JOIN method ON solution.id = method.solutionid WHERE method.name = 'SCore.Poisson.ngtIndex';"}
{"sample_id": 572, "db_id": "codebase_comments", "gold_sql": "SELECT Path FROM Solution WHERE ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Solution )", "pred_sql": "SELECT path FROM solution ORDER BY processedtime DESC LIMIT 1;"}
{"sample_id": 582, "db_id": "codebase_comments", "gold_sql": "SELECT T2.ApiCalls FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'mauriciodeamorim_tdd.encontro2Tdd.Encontro2.sln'", "pred_sql": "SELECT m.apicalls FROM method m JOIN solution s ON m.solutionid = s.id WHERE s.path = 'mauriciodeamorim_tdd.encontro2\\Tdd.Encontro2.sln';"}
{"sample_id": 668, "db_id": "codebase_comments", "gold_sql": "SELECT T2.Lang FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 28 AND T1.RepoId = 3", "pred_sql": "SELECT m.lang FROM method m JOIN solution s ON m.solutionid = s.id WHERE m.id = '28' AND s.repid = '3';"}
{"sample_id": 640, "db_id": "codebase_comments", "gold_sql": "SELECT DISTINCT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks > T1.Watchers / 2", "pred_sql": "SELECT solution.* FROM solution JOIN repo ON solution.repid = repo.id WHERE repo.forks > (repo.watchers / 2);"}
{"sample_id": 574, "db_id": "codebase_comments", "gold_sql": "SELECT Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE Path = 'nofear_MaraMara.sln'", "pred_sql": "SELECT r.url FROM solution s JOIN repo r ON s.repid = r.id WHERE s.path = 'nofear_Mara\\\\Mara.sln';"}
{"sample_id": 642, "db_id": "codebase_comments", "gold_sql": "SELECT Id FROM Repo WHERE Stars = ( SELECT MAX(Stars) FROM Repo )", "pred_sql": "SELECT id FROM repo ORDER BY stars DESC LIMIT 1;"}
{"sample_id": 583, "db_id": "codebase_comments", "gold_sql": "SELECT COUNT(T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/jeffdik/tachy.git' AND T2.WasCompiled = 0", "pred_sql": "SELECT COUNT(s.path) AS compiled_solution_count \nFROM solution s \nJOIN repo r ON s.repid = r.id \nWHERE s.wascompiled = '0' AND r.url = 'https://github.com/jeffdik/tachy.git';"}
{"sample_id": 641, "db_id": "codebase_comments", "gold_sql": "SELECT CAST(T1.Forks AS REAL) * 100 / T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 104086", "pred_sql": "SELECT (CAST(SUM(CAST(repo.forks AS INTEGER)) AS FLOAT) / SUM(CAST(repo.stars AS INTEGER))) * 100 AS percentage_forks_to_stars\nFROM repo\nJOIN solution ON repo.id = solution.repid\nWHERE solution.id = '104086';"}
{"sample_id": 659, "db_id": "codebase_comments", "gold_sql": "SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.RepoId = 3 AND T2.CommentIsXml = 1", "pred_sql": "SELECT COUNT(m.id) AS xml_method_count FROM method m JOIN solution s ON m.solutionid = s.id WHERE s.repid = '3' AND m.commentisxml = '1';"}
{"sample_id": 653, "db_id": "codebase_comments", "gold_sql": "SELECT CAST(SUM(CASE WHEN Lang = 'en' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Name) FROM Method WHERE CommentIsXml = 1", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM method WHERE commentisxml = '1')) AS percentage FROM method WHERE lang = 'en' AND commentisxml = '1';"}
{"sample_id": 600, "db_id": "codebase_comments", "gold_sql": "SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId ORDER BY T1.Forks DESC LIMIT 3", "pred_sql": "SELECT s.id FROM solution s JOIN repo r ON s.repid = r.id ORDER BY r.stars DESC LIMIT 3"}
{"sample_id": 6092, "db_id": "books", "gold_sql": "SELECT DISTINCT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN order_line AS T4 ON T4.book_id = T1.book_id WHERE T4.price > 19", "pred_sql": "SELECT DISTINCT a.author_name \nFROM author a \nJOIN book_author ba ON a.author_id = ba.author_id \nJOIN book b ON ba.book_id = b.book_id \nJOIN order_line ol ON b.book_id = ol.book_id \nWHERE ol.price >= 19;"}
{"sample_id": 6035, "db_id": "books", "gold_sql": "SELECT T1.order_date FROM cust_order AS T1 INNER JOIN address AS T2 ON T1.dest_address_id = T2.address_id WHERE T2.street_number = 460", "pred_sql": "SELECT cust_order.order_date \nFROM cust_order \nJOIN customer_address ON cust_order.customer_id = customer_address.customer_id \nJOIN address ON customer_address.address_id = address.address_id \nWHERE address.street_number = '460';"}
{"sample_id": 6059, "db_id": "books", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.address_status = 'Inactive' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customer_address AS T1 INNER JOIN address_status AS T2 ON T2.status_id = T1.status_id", "pred_sql": "SELECT (COUNT(CASE WHEN as.status_id = '2' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_not_in_use FROM customer_address ca JOIN address_status as ON ca.status_id = as.status_id;"}
{"sample_id": 5968, "db_id": "books", "gold_sql": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id ORDER BY T1.num_pages DESC LIMIT 1", "pred_sql": "SELECT author.author_name \nFROM author \nJOIN book_author ON author.author_id = book_author.author_id \nJOIN book ON book_author.book_id = book.book_id \nORDER BY book.num_pages DESC \nLIMIT 1;"}
{"sample_id": 5965, "db_id": "books", "gold_sql": "SELECT T1.isbn13 FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'Spanish'", "pred_sql": "SELECT book.isbn13 FROM book JOIN book_language ON book.language_id = book_language.language_id WHERE book_language.language_name = 'Spanish';"}
{"sample_id": 6053, "db_id": "books", "gold_sql": "SELECT SUM(CASE WHEN method_name = 'Priority' THEN cost ELSE 0 END) - SUM(CASE WHEN method_name = 'Express' THEN cost ELSE 0 END) FROM shipping_method", "pred_sql": "SELECT (SELECT cost FROM shipping_method WHERE method_name = 'Express') - (SELECT cost FROM shipping_method WHERE method_name = 'Priority') AS cost_difference;"}
{"sample_id": 6000, "db_id": "books", "gold_sql": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Returned' AND STRFTIME('%Y', T2.status_date) = '2020'", "pred_sql": "SELECT COUNT(*) AS returned_orders_count \nFROM order_history oh \nJOIN cust_order co ON oh.order_id = co.order_id \nWHERE oh.status_id = (SELECT status_id FROM order_status WHERE status_value = 'returned') \nAND strftime('%Y', co.order_date) = '2020';"}
{"sample_id": 5924, "db_id": "books", "gold_sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Lucas' AND T4.last_name = 'Wyldbore' AND T1.num_pages > 300", "pred_sql": "SELECT COUNT(*) AS books_over_300_pages\nFROM order_line ol\nJOIN cust_order co ON ol.order_id = co.order_id\nJOIN customer c ON co.customer_id = c.customer_id\nJOIN book b ON ol.book_id = b.book_id\nWHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore' AND b.num_pages > 300;"}
{"sample_id": 6032, "db_id": "books", "gold_sql": "SELECT DISTINCT T1.street_name FROM address AS T1 INNER JOIN customer_address AS T2 ON T1.address_id = T2.address_id INNER JOIN address_status AS T3 ON T3.status_id = T2.status_id WHERE T3.address_status = 'Inactive'", "pred_sql": "SELECT ca.customer_id, a.street_number, a.street_name, a.city, c.country_name \nFROM customer_address ca \nJOIN address a ON ca.address_id = a.address_id \nJOIN country c ON a.country_id = c.country_id \nWHERE ca.status_id = '2';"}
{"sample_id": 5991, "db_id": "books", "gold_sql": "SELECT AVG(price) FROM order_line", "pred_sql": "SELECT AVG(price) AS average_price FROM order_line;"}
{"sample_id": 5999, "db_id": "books", "gold_sql": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Harper Collins'", "pred_sql": "SELECT book.title FROM book JOIN publisher ON book.publisher_id = publisher.publisher_id WHERE publisher.publisher_name = 'Harper Collins';"}
{"sample_id": 5964, "db_id": "books", "gold_sql": "SELECT SUM(T1.price) FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T3.first_name = 'Lucas' AND T3.last_name = 'Wyldbore'", "pred_sql": "SELECT SUM(order_line.price) AS total_price\nFROM cust_order\nJOIN customer ON cust_order.customer_id = customer.customer_id\nJOIN order_line ON cust_order.order_id = order_line.order_id\nWHERE customer.first_name = 'Lucas' AND customer.last_name = 'Wyldbore';"}
{"sample_id": 5957, "db_id": "books", "gold_sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id GROUP BY T2.publisher_name ORDER BY COUNT(T2.publisher_id) DESC LIMIT 1", "pred_sql": "SELECT publisher.publisher_name\nFROM publisher\nJOIN book ON publisher.publisher_id = book.publisher_id\nGROUP BY publisher.publisher_id\nORDER BY COUNT(book.book_id) DESC\nLIMIT 1;"}
{"sample_id": 6028, "db_id": "books", "gold_sql": "SELECT title FROM book ORDER BY publication_date ASC LIMIT 6", "pred_sql": "SELECT title FROM book ORDER BY publication_date ASC LIMIT 6;"}
{"sample_id": 5962, "db_id": "books", "gold_sql": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T1.isbn13 = 23755004321", "pred_sql": "SELECT bl.language_name FROM book b JOIN book_language bl ON b.language_id = bl.language_id WHERE b.isbn13 = '23755004321';"}
{"sample_id": 6021, "db_id": "books", "gold_sql": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id ORDER BY T1.publication_date ASC LIMIT 2", "pred_sql": "SELECT bl.language_name FROM book b JOIN book_language bl ON b.language_id = bl.language_id ORDER BY b.publication_date LIMIT 2;"}
{"sample_id": 6101, "db_id": "books", "gold_sql": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'Zorro'", "pred_sql": "SELECT bl.language_name FROM book b JOIN book_language bl ON b.language_id = bl.language_id WHERE b.title = 'Zorro';"}
{"sample_id": 5979, "db_id": "books", "gold_sql": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T1.title = 'The Prophet'", "pred_sql": "SELECT author.author_name FROM book JOIN book_author ON book.book_id = book_author.book_id JOIN author ON book_author.author_id = author.author_id WHERE book.title = 'The Prophet';"}
{"sample_id": 5972, "db_id": "books", "gold_sql": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', T1.publication_date) = '1992' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Abraham Lincoln'", "pred_sql": "SELECT (COUNT(b.book_id) * 100.0 / (SELECT COUNT(*) FROM book WHERE book_id IN (SELECT book_id FROM book_author WHERE author_id = (SELECT author_id FROM author WHERE author_name = 'Abraham Lincoln')))) AS percentage FROM book b WHERE b.publication_date LIKE '1992%';"}
{"sample_id": 6014, "db_id": "books", "gold_sql": "SELECT COUNT(*) FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T2.shipping_method_id WHERE T1.first_name = 'Marcelia' AND T1.last_name = 'Goering' AND STRFTIME('%Y', T2.order_date) = '2021' AND T3.method_name = 'Priority'", "pred_sql": "SELECT COUNT(cust_order.order_id) AS total_orders\nFROM cust_order\nJOIN customer ON cust_order.customer_id = customer.customer_id\nJOIN shipping_method ON cust_order.shipping_method_id = shipping_method.method_id\nWHERE customer.first_name = 'Marcelia' AND customer.last_name = 'Goering' \nAND shipping_method.method_name = 'Priority'\nAND strftime('%Y', cust_order.order_date) = '2021';"}
{"sample_id": 6064, "db_id": "books", "gold_sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'Hitchhiker''s Guide To The Galaxy: The Filming of the Douglas Adams classic'", "pred_sql": "SELECT publisher.publisher_name FROM book JOIN publisher ON book.publisher_id = publisher.publisher_id WHERE book.title = \"Hitchhiker's Guide To The Galaxy: The Filming of the Douglas Adams classic\";"}
{"sample_id": 5918, "db_id": "books", "gold_sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Thomas Nelson' AND T1.num_pages > 300", "pred_sql": "SELECT COUNT(*) AS book_count FROM book b JOIN publisher p ON b.publisher_id = p.publisher_id WHERE p.publisher_name = 'Thomas Nelson' AND b.num_pages > 300;"}
{"sample_id": 6031, "db_id": "books", "gold_sql": "SELECT T1.city FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T2.country_name = 'Costa Rica'", "pred_sql": "SELECT DISTINCT city FROM address WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'Costa Rica');"}
{"sample_id": 6029, "db_id": "books", "gold_sql": "SELECT COUNT(*) FROM cust_order WHERE order_date LIKE '2020-12%'", "pred_sql": "SELECT COUNT(*) AS total_books_ordered\nFROM cust_order co\nJOIN order_line ol ON co.order_id = ol.order_id\nWHERE co.order_date BETWEEN '2020-12-01' AND '2020-12-31';"}
{"sample_id": 6089, "db_id": "books", "gold_sql": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'AK Press'", "pred_sql": "SELECT book.title FROM book JOIN publisher ON book.publisher_id = publisher.publisher_id WHERE publisher.publisher_name = 'AK Press';"}
{"sample_id": 5983, "db_id": "books", "gold_sql": "SELECT SUM(T1.price) FROM order_line AS T1 INNER JOIN book AS T2 ON T1.book_id = T2.book_id WHERE T2.title = 'The Prophet'", "pred_sql": "SELECT SUM(order_line.price) AS total_price\nFROM order_line\nJOIN cust_order ON order_line.order_id = cust_order.order_id\nJOIN book ON order_line.book_id = book.book_id\nWHERE book.title = 'The Prophet';"}
{"sample_id": 6010, "db_id": "books", "gold_sql": "SELECT COUNT(address_id) FROM address WHERE city = 'Villeneuve-la-Garenne'", "pred_sql": "SELECT COUNT(DISTINCT customer.customer_id) AS customer_count\nFROM customer\nJOIN customer_address ON customer.customer_id = customer_address.customer_id\nJOIN address ON customer_address.address_id = address.address_id\nWHERE address.city = 'Villeneuve-la-Garenne';"}
{"sample_id": 5976, "db_id": "books", "gold_sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Orson Scott Card' AND STRFTIME('%Y', T1.publication_date) = '2001'", "pred_sql": "SELECT book.title FROM book JOIN book_author ON book.book_id = book_author.book_id JOIN author ON book_author.author_id = author.author_id WHERE author.author_name = 'Orson Scott Card' AND strftime('%Y', book.publication_date) = '2001';"}
{"sample_id": 6024, "db_id": "books", "gold_sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id GROUP BY T2.publisher_name HAVING COUNT(T2.publisher_name) >= 30", "pred_sql": "SELECT publisher.publisher_name\nFROM publisher\nJOIN book ON publisher.publisher_id = book.publisher_id\nGROUP BY publisher.publisher_id\nHAVING COUNT(book.book_id) >= 30;"}
{"sample_id": 6027, "db_id": "books", "gold_sql": "SELECT isbn13 FROM book WHERE num_pages < 140 AND num_pages > 135", "pred_sql": "SELECT isbn13 FROM book WHERE num_pages < 140 AND num_pages > 135;"}
{"sample_id": 6045, "db_id": "books", "gold_sql": "SELECT T4.first_name, T4.last_name FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T1.title = 'The Sorrows of Young Werther'", "pred_sql": "SELECT customer.first_name, customer.last_name \nFROM customer \nJOIN cust_order ON customer.customer_id = cust_order.customer_id \nJOIN order_line ON cust_order.order_id = order_line.order_id \nJOIN book ON order_line.book_id = book.book_id \nWHERE book.title = 'The Sorrows of Young Werther';"}
{"sample_id": 6091, "db_id": "books", "gold_sql": "SELECT T1.isbn13 FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.email = 'fsier3e@ihg.com'", "pred_sql": "SELECT b.isbn13 \nFROM cust_order co \nJOIN customer c ON co.customer_id = c.customer_id \nJOIN order_line ol ON co.order_id = ol.order_id \nJOIN book b ON ol.book_id = b.book_id \nWHERE c.email = 'fsier3e@ihg.com';"}
{"sample_id": 6009, "db_id": "books", "gold_sql": "SELECT MIN(price) FROM order_line WHERE price <> 0", "pred_sql": "SELECT MIN(price) AS lowest_price FROM order_line WHERE price > 0;"}
{"sample_id": 5949, "db_id": "books", "gold_sql": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T1.status_value = 'Returned' AND T4.first_name = 'Antonia' AND T4.last_name = 'Poltun'", "pred_sql": "SELECT COUNT(*) AS return_count\nFROM cust_order co\nJOIN order_history oh ON co.order_id = oh.order_id\nJOIN customer c ON co.customer_id = c.customer_id\nWHERE c.first_name = 'Antonia' AND c.last_name = 'Poltun' AND oh.status_id = (SELECT status_id FROM order_status WHERE status_value = 'returned');"}
{"sample_id": 6100, "db_id": "books", "gold_sql": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T2.order_id = 931", "pred_sql": "SELECT book.title FROM book JOIN order_line ON book.book_id = order_line.book_id JOIN cust_order ON order_line.order_id = cust_order.order_id WHERE cust_order.order_id = '931';"}
{"sample_id": 6079, "db_id": "books", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.language_name = 'English' THEN 1 ELSE 0 END) AS REAL) / COUNT(*) FROM book_language AS T1 INNER JOIN book AS T2 ON T1.language_id = T2.language_id INNER JOIN publisher AS T3 ON T3.publisher_id = T2.publisher_id WHERE T3.publisher_name = 'Carole Marsh Mysteries'", "pred_sql": "SELECT AVG(num_pages) AS average_pages\nFROM book\nJOIN publisher ON book.publisher_id = publisher.publisher_id\nJOIN book_language ON book.language_id = book_language.language_id\nWHERE publisher.publisher_name = 'Carole Marsh Mysteries' AND book_language.language_name = 'English';"}
{"sample_id": 6065, "db_id": "books", "gold_sql": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'ADV Manga'", "pred_sql": "SELECT book.title FROM book JOIN publisher ON book.publisher_id = publisher.publisher_id WHERE publisher.publisher_name = 'ADV Manga';"}
{"sample_id": 5922, "db_id": "books", "gold_sql": "SELECT MIN(T2.price) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'The Little House'", "pred_sql": "SELECT MIN(ol.price) AS cheapest_price \nFROM order_line ol \nJOIN book b ON ol.book_id = b.book_id \nWHERE b.title = 'The Little House';"}
{"sample_id": 5923, "db_id": "books", "gold_sql": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Lucas' AND T4.last_name = 'Wyldbore'", "pred_sql": "SELECT b.title \nFROM book b \nJOIN order_line ol ON b.book_id = ol.book_id \nJOIN cust_order co ON ol.order_id = co.order_id \nJOIN customer c ON co.customer_id = c.customer_id \nWHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore';"}
{"sample_id": 4785, "db_id": "legislator", "gold_sql": "SELECT T2.wikipedia_id FROM \"historical-terms\" AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.party = 'Readjuster Democrat'", "pred_sql": "SELECT historical.wikipedia_id FROM historical JOIN historical-terms ON historical.bioguide_id = historical-terms.bioguide WHERE historical-terms.party = 'Readjuster Democrat';"}
{"sample_id": 4781, "db_id": "legislator", "gold_sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T2.bioguide = T1.bioguide_id WHERE T2.youtube = 'RoskamIL06'", "pred_sql": "SELECT c.official_full_name FROM current c JOIN social-media s ON c.bioguide_id = s.bioguide WHERE s.youtube = 'RoskamIL06';"}
{"sample_id": 4795, "db_id": "legislator", "gold_sql": "SELECT CAST(MIN(T2.start) - T1.birthday_bio AS DATE) AS AGE FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'F. James Sensenbrenner, Jr.'", "pred_sql": "SELECT strftime('%Y', 'now') - strftime('%Y', birthday_bio) - (strftime('%m', 'now') < strftime('%m', birthday_bio) OR (strftime('%m', 'now') = strftime('%m', birthday_bio) AND strftime('%d', 'now') < strftime('%d', birthday_bio))) AS age FROM current WHERE official_full_name = 'Jr. F. James Sensenbrenner'"}
{"sample_id": 4740, "db_id": "legislator", "gold_sql": "SELECT google_entity_id_id FROM current WHERE official_full_name = 'Sherrod Brown'", "pred_sql": "SELECT google_entity_id_id FROM current WHERE first_name = 'Sherrod' AND last_name = 'Brown';"}
{"sample_id": 4814, "db_id": "legislator", "gold_sql": "SELECT COUNT(T3.state) FROM ( SELECT T2.state FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'M' AND (T2.class IS NULL OR T2.class = '') GROUP BY T2.state ) T3", "pred_sql": "SELECT COUNT(*) AS number_of_legislators FROM current WHERE gender_bio = 'male' AND bioguide_id NOT IN (SELECT bioguide FROM current-terms WHERE chamber = 'senate');"}
{"sample_id": 4770, "db_id": "legislator", "gold_sql": "SELECT T1.first_name, T1.last_name FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Republican' AND T1.gender_bio = 'F' AND T2.END > DATE() GROUP BY T1.bioguide_id", "pred_sql": "SELECT first_name || ' ' || last_name AS full_name FROM current JOIN current-terms ON current.bioguide_id = current-terms.bioguide WHERE gender_bio = 'female' AND current-terms.party = 'Republican';"}
{"sample_id": 4831, "db_id": "legislator", "gold_sql": "SELECT T1.first_name, T1.last_name FROM historical AS T1 INNER JOIN \"historical-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Pro-Administration' AND T2.start = '1789-03-04' AND T2.end = '1791-12-31'", "pred_sql": "SELECT c.first_name, c.last_name, ct.party \nFROM current c \nJOIN current-terms ct ON c.bioguide_id = ct.bioguide \nWHERE ct.start <= '1789-03-04' AND ct.end >= '1791-12-31' AND ct.party = 'Pro-Administration';"}
{"sample_id": 4907, "db_id": "legislator", "gold_sql": "SELECT T1.bioguide FROM \"current-terms\" AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.religion_bio = 'Catholic' AND T1.state = 'NE'", "pred_sql": "SELECT current.bioguide_id FROM current JOIN current-terms ON current.bioguide_id = current-terms.bioguide WHERE current.religion_bio = 'Catholic' AND current-terms.state = 'NE';"}
{"sample_id": 4888, "db_id": "legislator", "gold_sql": "SELECT religion_bio FROM current GROUP BY religion_bio ORDER BY COUNT(religion_bio) DESC LIMIT 1", "pred_sql": "SELECT religion_bio, COUNT(*) as occurrence FROM current GROUP BY religion_bio ORDER BY occurrence DESC LIMIT 1;"}
{"sample_id": 4912, "db_id": "legislator", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.type = 'sen' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.type) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state = 'ME' AND T1.gender_bio = 'F'", "pred_sql": "SELECT (COUNT(CASE WHEN ct.type = 'sen' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_senators FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE c.gender_bio = 'female' AND ct.state = 'ME';"}
{"sample_id": 4798, "db_id": "legislator", "gold_sql": "SELECT T1.END FROM \"historical-terms\" AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.official_full_name = 'Matt Salmon'", "pred_sql": "SELECT end FROM current-terms WHERE bioguide = (SELECT bioguide_id FROM current WHERE first_name = 'Matt' AND last_name = 'Salmon')"}
{"sample_id": 4772, "db_id": "legislator", "gold_sql": "SELECT SUM(CASE WHEN T2.district = 20 THEN 1 ELSE 0 END) AS count FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Richard' AND T1.last_name = 'Durbin'", "pred_sql": "SELECT COUNT(*) FROM current-terms WHERE bioguide = (SELECT bioguide_id FROM current WHERE first_name = 'Richard' AND last_name = 'Durbin') AND district = '20';"}
{"sample_id": 4736, "db_id": "legislator", "gold_sql": "SELECT COUNT(*) FROM current WHERE ballotpedia_id = '' OR ballotpedia_id IS NULL", "pred_sql": "SELECT COUNT(*) AS count FROM current WHERE ballotpedia_id IS NULL OR ballotpedia_id = '';"}
{"sample_id": 4897, "db_id": "legislator", "gold_sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide GROUP BY T1.official_full_name, T2.bioguide ORDER BY COUNT(T2.bioguide) DESC LIMIT 1", "pred_sql": "SELECT c.official_full_name FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide GROUP BY c.official_full_name ORDER BY COUNT(ct.bioguide) DESC LIMIT 1;"}
{"sample_id": 4763, "db_id": "legislator", "gold_sql": "SELECT T2.youtube FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.official_full_name = 'Chris Van Hollen'", "pred_sql": "SELECT sm.youtube FROM social-media sm JOIN current c ON sm.bioguide = c.bioguide_id WHERE c.first_name = 'Chris' AND c.last_name = 'Van Hollen';"}
{"sample_id": 4768, "db_id": "legislator", "gold_sql": "SELECT T2.twitter FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.official_full_name = 'Roger F. Wicker'", "pred_sql": "SELECT sm.twitter FROM current c JOIN social-media sm ON c.bioguide_id = sm.bioguide WHERE c.first_name = 'Roger' AND c.last_name = 'Wicker';"}
{"sample_id": 4902, "db_id": "legislator", "gold_sql": "SELECT CAST(COUNT(T2.bioguide) AS REAL) / COUNT(DISTINCT T1.bioguide_id) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.wikipedia_id IS NOT NULL", "pred_sql": "SELECT AVG(term_count) AS average_terms_served\nFROM (\n    SELECT COUNT(*) AS term_count\n    FROM current c\n    JOIN current-terms ct ON c.bioguide_id = ct.bioguide\n    WHERE c.wikipedia_id IS NOT NULL\n    GROUP BY c.bioguide_id\n) AS term_counts;"}
{"sample_id": 4862, "db_id": "legislator", "gold_sql": "SELECT T1.first_name, T1.last_name FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.religion_bio = 'Jewish' AND T2.state = 'FL' GROUP BY T1.first_name, T1.last_name", "pred_sql": "SELECT c.first_name, c.last_name, ct.party, ct.state \nFROM current c \nJOIN current-terms ct ON c.bioguide_id = ct.bioguide \nWHERE c.religion_bio = 'Jewish' AND ct.state = 'FL';"}
{"sample_id": 4836, "db_id": "legislator", "gold_sql": "SELECT T1.religion_bio FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.rss_url = 'http://www.corker.senate.gov/public/index.cfm/rss/feed' GROUP BY T1.religion_bio", "pred_sql": "SELECT current.religion_bio FROM current JOIN current-terms ON current.bioguide_id = current-terms.bioguide WHERE current-terms.rss_url = 'http://www.corker.senate.gov/public/index.cfm/rss/feed';"}
{"sample_id": 4890, "db_id": "legislator", "gold_sql": "SELECT COUNT(DISTINCT T1.bioguide_id) FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.thomas_id IS NOT NULL AND T2.instagram IS NOT NULL", "pred_sql": "SELECT COUNT(DISTINCT c.bioguide_id) AS count_instagram_accounts\nFROM current c\nJOIN current-terms ct ON c.bioguide_id = ct.bioguide\nWHERE ct.thomas IS NOT NULL AND ct.thomas != ''\nAND c.bioguide_id IN (SELECT bioguide FROM social-media WHERE instagram IS NOT NULL AND instagram != '')"}
{"sample_id": 4819, "db_id": "legislator", "gold_sql": "SELECT T2.facebook FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.first_name = 'Ralph' AND T1.last_name = 'Abraham'", "pred_sql": "SELECT sm.facebook FROM social-media sm JOIN current c ON sm.bioguide = c.bioguide_id WHERE c.first_name = 'Ralph' AND c.last_name = 'Abraham';"}
{"sample_id": 4823, "db_id": "legislator", "gold_sql": "SELECT T2.religion_bio FROM \"social-media\" AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T1.youtube = 'MaxineWaters'", "pred_sql": "SELECT current.religion_bio FROM current JOIN social-media ON current.bioguide_id = social-media.bioguide WHERE social-media.youtube = 'MaxineWaters';"}
{"sample_id": 4805, "db_id": "legislator", "gold_sql": "SELECT birthday_bio FROM current WHERE first_name = 'Amy' AND last_name = 'Klobuchar'", "pred_sql": "SELECT birthday_bio FROM current WHERE first_name = 'Amy' AND last_name = 'Klobuchar';"}
{"sample_id": 4854, "db_id": "legislator", "gold_sql": "SELECT T2.district, T2.state FROM historical AS T1 INNER JOIN \"historical-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.start LIKE '1789%'", "pred_sql": "SELECT ct.first_name, ct.last_name, ct.district, ct.state \nFROM current AS ct \nJOIN current-terms AS ctt ON ct.bioguide_id = ctt.bioguide \nWHERE ctt.type = 'rep' AND ctt.start <= '1789-12-31' AND (ctt.end IS NULL OR ctt.end >= '1789-01-01');"}
{"sample_id": 4881, "db_id": "legislator", "gold_sql": "SELECT T1.party FROM \"historical-terms\" AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide ORDER BY T2.birthday_bio LIMIT 1", "pred_sql": "SELECT party FROM current WHERE birthday_bio = (SELECT MIN(birthday_bio) FROM current);"}
{"sample_id": 4867, "db_id": "legislator", "gold_sql": "SELECT first_name, last_name FROM historical WHERE gender_bio = 'F' AND google_entity_id_id IS NULL AND fec_id IS NULL", "pred_sql": "SELECT first_name || ' ' || last_name AS full_name FROM current WHERE gender_bio = 'female' AND google_entity_id_id IS NULL AND (fec_id IS NULL OR fec_id = '')"}
{"sample_id": 4809, "db_id": "legislator", "gold_sql": "SELECT middle_name FROM current WHERE birthday_bio = '1956-08-24'", "pred_sql": "SELECT middle_name FROM current WHERE birthday_bio = '1956-08-24';"}
{"sample_id": 4757, "db_id": "legislator", "gold_sql": "SELECT COUNT(*) FROM \"current-terms\" WHERE party = 'Republican'", "pred_sql": "SELECT COUNT(*) AS count FROM current_terms WHERE party = 'Republican';"}
{"sample_id": 4835, "db_id": "legislator", "gold_sql": "SELECT T1.google_entity_id_id FROM historical AS T1 INNER JOIN \"historical-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.type = 'sen' AND T2.state = 'NY'", "pred_sql": "SELECT current.google_entity_id_id FROM current JOIN current-terms ON current.bioguide_id = current-terms.bioguide WHERE current-terms.state = 'NY' AND current-terms.type = 'sen';"}
{"sample_id": 4901, "db_id": "legislator", "gold_sql": "SELECT CAST(SUM(CASE WHEN gender_bio = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.bioguide) FROM ( SELECT T2.bioguide, T1.gender_bio FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide GROUP BY T2.bioguide HAVING COUNT(T2.bioguide) > 4 ) T3", "pred_sql": "SELECT (COUNT(CASE WHEN gender_bio = 'Female' THEN 1 END) * 100.0 / COUNT(*)) AS female_percentage\nFROM current c\nJOIN current-terms ct ON c.bioguide_id = ct.bioguide\nWHERE ct.start IS NOT NULL\nGROUP BY c.bioguide_id\nHAVING COUNT(ct.bioguide) > 4;"}
{"sample_id": 4845, "db_id": "legislator", "gold_sql": "SELECT first_name, last_name FROM historical WHERE bioguide_id = 'W000059'", "pred_sql": "SELECT first_name, last_name FROM current WHERE bioguide_id = 'W000059';"}
{"sample_id": 4857, "db_id": "legislator", "gold_sql": "SELECT T1.first_name, T1.last_name FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.start LIKE '1997%' AND T2.state_rank = 'junior'", "pred_sql": "SELECT c.first_name, c.last_name, ct.state, ct.party, ct.start, ct.end \nFROM current c \nJOIN current-terms ct ON c.bioguide_id = ct.bioguide \nWHERE ct.state_rank = 'junior' AND ct.start <= '1997-12-31' AND ct.end >= '1997-01-01'"}
{"sample_id": 4864, "db_id": "legislator", "gold_sql": "SELECT CAST(SUM(CASE WHEN strftime('%Y', T2.start) BETWEEN '2000' AND '2017' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bioguide_id) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide", "pred_sql": "SELECT (COUNT(h.bioguide) * 100.0 / COUNT(c.bioguide_id)) AS percentage_21st_century_legislators\nFROM current c\nLEFT JOIN historical h ON c.bioguide_id = h.bioguide_id\nWHERE h.start >= '2001-01-01' AND h.end <= '2099-12-31';"}
{"sample_id": 4796, "db_id": "legislator", "gold_sql": "SELECT T1.official_full_name, T2.relation, T2.party FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state = 'ME' GROUP BY T1.official_full_name, T2.relation, T2.party", "pred_sql": "SELECT current.official_full_name, current.religion_bio, current_terms.party \nFROM current \nJOIN current_terms ON current.bioguide_id = current_terms.bioguide \nWHERE current_terms.state = 'ME';"}
{"sample_id": 4773, "db_id": "legislator", "gold_sql": "SELECT CAST(COUNT(T1.bioguide_id) AS REAL) / 22 FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'M' AND CAST(T2.start AS DATE) >= 2000 AND CAST(T2.END AS DATE) <= 2021 AND T2.party = 'Democrat'", "pred_sql": "SELECT AVG(count) AS average_male_democrats FROM (SELECT COUNT(*) AS count FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE c.gender_bio = 'male' AND ct.party = 'Democrat' AND ct.start >= '2000-01-01' AND ct.end <= '2021-12-31' GROUP BY strftime('%Y', ct.start))"}
{"sample_id": 8208, "db_id": "sales_in_weather", "gold_sql": "SELECT T1.sealevel, T1.avgspeed FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 3 OR T2.store_nbr = 4", "pred_sql": "SELECT w.sealevel, w.avgspeed FROM weather w JOIN relation r ON w.station_nbr = r.station_nbr WHERE r.store_nbr IN (3, 4)"}
{"sample_id": 8159, "db_id": "sales_in_weather", "gold_sql": "SELECT tavg FROM weather WHERE \"date\" = '2014-10-17' AND station_nbr = 20", "pred_sql": "SELECT AVG(tavg) AS average_temperature FROM weather WHERE station_nbr = 20 AND date = '2014-10-17';"}
{"sample_id": 8141, "db_id": "sales_in_weather", "gold_sql": "SELECT \"date\" FROM weather WHERE station_nbr = 2 AND depart > 0", "pred_sql": "SELECT date FROM weather WHERE station_nbr = 2 AND depart > 0;"}
{"sample_id": 8174, "db_id": "sales_in_weather", "gold_sql": "SELECT T1.stnpressure FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.\"date\" = '2012-05-15' AND T2.store_nbr = 12", "pred_sql": "SELECT w.stnpressure FROM weather w JOIN relation r ON w.station_nbr = r.station_nbr WHERE r.store_nbr = '12' AND w.date = '2012-05-15';"}
{"sample_id": 8203, "db_id": "sales_in_weather", "gold_sql": "SELECT MIN(tmin) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 16 AND T1.\"date\" LIKE '%2012-01%'", "pred_sql": "SELECT MIN(w.tmin) AS lowest_min_temp \nFROM weather w \nJOIN relation r ON w.station_nbr = r.station_nbr \nJOIN sales_in_weather s ON r.store_nbr = s.store_nbr \nWHERE s.store_nbr = '16' \nAND s.date BETWEEN '2012-01-01' AND '2012-01-31';"}
{"sample_id": 8183, "db_id": "sales_in_weather", "gold_sql": "SELECT station_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE T1.item_nbr = 9 GROUP BY T2.station_nbr ORDER BY SUM(T1.units) DESC LIMIT 1", "pred_sql": "SELECT r.station_nbr \nFROM sales_in_weather AS s \nJOIN relation AS r ON s.store_nbr = r.store_nbr \nWHERE s.item_nbr = '9' \nORDER BY s.units DESC \nLIMIT 1;"}
{"sample_id": 8214, "db_id": "sales_in_weather", "gold_sql": "SELECT ( SELECT SUM(T2.units) AS sumunit FROM weather AS T1 INNER JOIN sales_in_weather AS T2 ON T1.\"date\" = T2.\"date\" INNER JOIN relation AS T3 ON T2.store_nbr = T3.store_nbr WHERE T2.item_nbr = 5 AND sunset IS NOT NULL GROUP BY T1.sunset ORDER BY T1.sunset LIMIT 1 ) - ( SELECT SUM(T2.units) AS sumunit FROM weather AS T1 INNER JOIN sales_in_weather AS T2 ON T1.\"date\" = T2.\"date\" INNER JOIN relation AS T3 ON T2.store_nbr = T3.store_nbr WHERE T2.item_nbr = 5 AND sunset IS NOT NULL GROUP BY T1.sunset ORDER BY T1.sunset DESC LIMIT 1 )", "pred_sql": "SELECT MAX(s.units) - MIN(s.units) AS units_difference\nFROM sales_in_weather s\nJOIN weather w ON s.date = w.date\nWHERE s.item_nbr = '1' AND w.sunset = (SELECT MIN(sunset) FROM weather) OR w.sunset = (SELECT MAX(sunset) FROM weather);"}
{"sample_id": 8143, "db_id": "sales_in_weather", "gold_sql": "SELECT SUM(CASE WHEN T3.depart < 0 THEN units ELSE 0 END) AS sum FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.\"date\", 1, 4) = '2012' AND T1.item_nbr = 5", "pred_sql": "SELECT SUM(s.units) AS total_units\nFROM sales_in_weather s\nJOIN relation r ON s.store_nbr = r.store_nbr\nJOIN weather w ON r.station_nbr = w.station_nbr\nWHERE s.item_nbr = '5' \nAND s.store_nbr = '3' \nAND strftime('%Y', s.date) = '2012' \nAND w.depart < 0;"}
{"sample_id": 8162, "db_id": "sales_in_weather", "gold_sql": "SELECT station_nbr FROM relation WHERE store_nbr = 20", "pred_sql": "SELECT r.station_nbr FROM relation r WHERE r.store_nbr = 20;"}
{"sample_id": 8198, "db_id": "sales_in_weather", "gold_sql": "SELECT COUNT(DISTINCT \"date\") FROM weather WHERE snowfall > 5", "pred_sql": "SELECT COUNT(DISTINCT date) AS days_with_snowfall_above_5_inches FROM weather WHERE snowfall > 5;"}
{"sample_id": 8202, "db_id": "sales_in_weather", "gold_sql": "SELECT COUNT(DISTINCT T2.station_nbr) AS number FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE SUBSTR(\"date\", 1, 7) = '2014-01' AND item_nbr = 5", "pred_sql": "SELECT COUNT(DISTINCT r.station_nbr) AS station_count \nFROM sales_in_weather siw \nJOIN relation r ON siw.store_nbr = r.store_nbr \nWHERE siw.item_nbr = '5' AND siw.date BETWEEN '2014-01-01' AND '2014-01-31';"}
{"sample_id": 8194, "db_id": "sales_in_weather", "gold_sql": "SELECT COUNT(station_nbr) FROM weather WHERE \"date\" = '2014-02-18' AND stnpressure < 30 AND station_nbr IN ( SELECT station_nbr FROM relation GROUP BY station_nbr HAVING COUNT(store_nbr) = 3 )", "pred_sql": "SELECT COUNT(DISTINCT r.station_nbr) AS station_count\nFROM relation r\nJOIN weather w ON r.station_nbr = w.station_nbr\nWHERE w.stnpressure <= 30\nAND w.date = '2014-02-18'\nGROUP BY r.station_nbr\nHAVING COUNT(DISTINCT r.store_nbr) = 3;"}
{"sample_id": 8166, "db_id": "sales_in_weather", "gold_sql": "SELECT T1.wetbulb FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 14 AND T1.\"date\" = '2012-02-15'", "pred_sql": "SELECT w.wetbulb FROM weather w JOIN relation r ON w.station_nbr = r.station_nbr WHERE r.store_nbr = '6' AND w.date = '2012-02-15';"}
{"sample_id": 8163, "db_id": "sales_in_weather", "gold_sql": "SELECT T1.tmax - T1.tmin AS temprange FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 7 AND T1.\"date\" = '2014-04-28'", "pred_sql": "SELECT w.tmax - w.tmin AS temperature_range \nFROM weather w \nJOIN relation r ON w.station_nbr = r.station_nbr \nWHERE r.store_nbr = '7' AND w.date = '2014-04-28';"}
{"sample_id": 8197, "db_id": "sales_in_weather", "gold_sql": "SELECT MAX(avgspeed) FROM weather", "pred_sql": "SELECT MAX(avgspeed) AS max_average_speed FROM weather;"}
{"sample_id": 8160, "db_id": "sales_in_weather", "gold_sql": "SELECT resultspeed FROM weather WHERE \"date\" = '2014-01-15' AND station_nbr = 9", "pred_sql": "SELECT resultspeed FROM weather WHERE station_nbr = 9 AND date = '2014-01-15';"}
{"sample_id": 4305, "db_id": "simpson_episodes", "gold_sql": "SELECT CAST(SUM(CASE WHEN birth_region = 'California' AND SUBSTR(birthdate, 1, 4) > '1970' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(birthdate) FROM Person;", "pred_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM person) AS percentage FROM person WHERE birthdate > '1970-01-01' AND birth_region = 'California';"}
{"sample_id": 4274, "db_id": "simpson_episodes", "gold_sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = ( SELECT MIN(stars) FROM Vote ) ORDER BY T2.votes DESC LIMIT 3;", "pred_sql": "SELECT episode_id, title, votes FROM episode WHERE episode_id IN (SELECT episode_id FROM vote WHERE stars = (SELECT MIN(stars) FROM vote)) ORDER BY votes DESC LIMIT 3;"}
{"sample_id": 4288, "db_id": "simpson_episodes", "gold_sql": "SELECT T2.role FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T1.birth_country != 'USA';", "pred_sql": "SELECT DISTINCT credit.role FROM credit JOIN person ON credit.person = person.name WHERE person.birth_country != 'USA';"}
{"sample_id": 4278, "db_id": "simpson_episodes", "gold_sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T2.keyword = '1930s to 2020s' LIMIT 2;", "pred_sql": "SELECT e1.title AS episode1_title, e2.title AS episode2_title\nFROM episode e1\nJOIN keyword k1 ON e1.episode_id = k1.episode_id\nJOIN keyword k2 ON k1.keyword = k2.keyword AND k1.episode_id != k2.episode_id\nJOIN episode e2 ON k2.episode_id = e2.episode_id\nWHERE k1.keyword = '1930s to 2020s';"}
{"sample_id": 4297, "db_id": "simpson_episodes", "gold_sql": "SELECT T1.award FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.result = 'Winner' AND T2.air_date = '2008-11-30';", "pred_sql": "SELECT award.award, award.year FROM award JOIN episode ON award.episode_id = episode.episode_id WHERE episode.air_date = '2008-11-30';"}
{"sample_id": 4355, "db_id": "simpson_episodes", "gold_sql": "SELECT DISTINCT T1.episode_id FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 4) = '2008' AND T2.stars < 5;", "pred_sql": "SELECT episode_id FROM episode WHERE air_date LIKE '2008%' AND episode_id IN (SELECT episode_id FROM vote WHERE stars <= 5)"}
{"sample_id": 4289, "db_id": "simpson_episodes", "gold_sql": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 1 ORDER BY T1.rating LIMIT 1;", "pred_sql": "SELECT COUNT(vote.stars) AS one_star_count\nFROM vote\nJOIN episode ON vote.episode_id = episode.episode_id\nWHERE vote.stars = '1' AND episode.rating <= '5.0' AND episode.season = (SELECT season FROM episode ORDER BY rating ASC LIMIT 1)"}
{"sample_id": 4171, "db_id": "simpson_episodes", "gold_sql": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 4) = '2009' AND T2.stars = 10 AND T2.percent > 15;", "pred_sql": "SELECT COUNT(DISTINCT e.episode_id) AS episode_count\nFROM episode e\nJOIN vote v ON e.episode_id = v.episode_id\nWHERE strftime('%Y', e.air_date) = '2009'\nAND v.stars = '10'\nAND v.percent > 0.15;"}
{"sample_id": 4190, "db_id": "simpson_episodes", "gold_sql": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2017' AND T1.award = 'Best International TV Series' AND T1.result = 'Winner';", "pred_sql": "SELECT e.title FROM episode e JOIN award a ON e.episode_id = a.episode_id WHERE a.award = 'Best International TV Series' AND a.year = 2017 AND a.result = 'Winner';"}
{"sample_id": 4215, "db_id": "simpson_episodes", "gold_sql": "SELECT award, person FROM Award WHERE result = 'Winner' AND SUBSTR(year, 1, 4) = '2009';", "pred_sql": "SELECT award.award, award.person FROM award WHERE year = 2009 AND result = 'Winner';"}
{"sample_id": 4235, "db_id": "simpson_episodes", "gold_sql": "SELECT T1.person FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Homer simpson 20' AND T1.organization = 'Primetime Emmy Awards' AND T1.award = 'Outstanding Voice-Over Performance' AND T1.result = 'Winner';", "pred_sql": "SELECT person.name FROM award JOIN credit ON award.episode_id = credit.episode_id JOIN person ON award.person = person.name WHERE award.award = 'Emmy Award' AND award.award_category = 'Outstanding Voice-Over Performance' AND credit.character = 'Homer Simpson' AND award.result = 'Winner'"}
{"sample_id": 4273, "db_id": "simpson_episodes", "gold_sql": "SELECT episode_id FROM Episode ORDER BY votes DESC LIMIT 5;", "pred_sql": "SELECT episode_id, title, rating, votes FROM episode ORDER BY votes DESC LIMIT 5;"}
{"sample_id": 4200, "db_id": "simpson_episodes", "gold_sql": "SELECT COUNT(award_id) FROM Award WHERE person = 'Ian Maxtone-Graham' AND organization = 'Writers Guild of America, USA' AND result = 'Nominee';", "pred_sql": "SELECT COUNT(*) AS nomination_count \nFROM award \nJOIN person ON award.person = person.name \nWHERE person.name = 'Ian Maxtone-Graham' \nAND award.organization = 'Writers Guild of America, USA' \nAND award.result = 'Nominee';"}
{"sample_id": 4240, "db_id": "simpson_episodes", "gold_sql": "SELECT CAST(SUM(CASE WHEN result = 'Winner' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(award) AS rate FROM Award;", "pred_sql": "SELECT COUNT(DISTINCT a.award_id) * 1.0 / COUNT(DISTINCT e.episode_id) AS average_award_winning_rate\nFROM episode e\nLEFT JOIN award a ON e.episode_id = a.episode_id\nWHERE e.title LIKE '%The Simpsons%' AND e.season = '20';"}
{"sample_id": 4270, "db_id": "simpson_episodes", "gold_sql": "SELECT COUNT(name) FROM Person WHERE height_meters > 1.70 AND birth_country = 'Canada';", "pred_sql": "SELECT COUNT(*) FROM person WHERE height_meters > '1.70' AND birth_country = 'Canada';"}
{"sample_id": 4285, "db_id": "simpson_episodes", "gold_sql": "SELECT episode FROM Episode WHERE votes = ( SELECT MAX(votes) FROM Episode );", "pred_sql": "SELECT episode_id, title, votes FROM episode ORDER BY votes DESC LIMIT 1;"}
{"sample_id": 4328, "db_id": "simpson_episodes", "gold_sql": "SELECT SUM(T2.percent) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'No Loan Again, Naturally' AND T1.rating = 6.8 AND T2.stars BETWEEN 5 AND 10;", "pred_sql": "SELECT SUM(votes) * 100.0 / (SELECT SUM(votes) FROM vote WHERE episode_id = (SELECT episode_id FROM episode WHERE title = 'No Loan Again, Naturally')) AS percent_of_high_scores\nFROM vote\nWHERE episode_id = (SELECT episode_id FROM episode WHERE title = 'No Loan Again, Naturally') AND stars BETWEEN 5 AND 10;"}
{"sample_id": 4352, "db_id": "simpson_episodes", "gold_sql": "SELECT COUNT(credited) FROM Credit WHERE episode_id IN ( 'S20-E5',  'S20-E6',  'S20-E7',  'S20-E8',  'S20-E9',  'S20-E10' ) AND credited = 'true' AND role = 'casting';", "pred_sql": "SELECT COUNT(*) AS credited_cast_count FROM credit WHERE episode_id IN (SELECT episode_id FROM episode WHERE season = '2' AND episode BETWEEN '5' AND '10') AND category = 'cast';"}
{"sample_id": 4257, "db_id": "simpson_episodes", "gold_sql": "SELECT DISTINCT T1.episode_id FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T2.stars = 10;", "pred_sql": "SELECT episode.episode_id FROM award JOIN episode ON award.episode_id = episode.episode_id WHERE award.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND episode.episode_id IN (SELECT vote.episode_id FROM vote WHERE vote.stars = '10')"}
{"sample_id": 4329, "db_id": "simpson_episodes", "gold_sql": "SELECT COUNT(DISTINCT episode_id) FROM Vote WHERE stars > 8;", "pred_sql": "SELECT COUNT(*) AS episode_count FROM vote WHERE stars > 8;"}
{"sample_id": 4311, "db_id": "simpson_episodes", "gold_sql": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T2.role = 'additional timer' AND T1.birth_country = 'USA';", "pred_sql": "SELECT COUNT(*) AS additional_timers_born_in_usa FROM person WHERE birth_country = 'USA' AND nickname LIKE '%timer%';"}
{"sample_id": 4336, "db_id": "simpson_episodes", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.birth_country = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.result = 'Nominee';", "pred_sql": "SELECT (COUNT(DISTINCT a.person) * 100.0 / (SELECT COUNT(*) FROM award WHERE result = 'Nominee')) AS nominee_percentage\nFROM award a\nJOIN person p ON a.person = p.name\nWHERE p.birth_country = 'USA' AND a.result = 'Nominee';"}
{"sample_id": 4266, "db_id": "simpson_episodes", "gold_sql": "SELECT SUM(CASE WHEN T1.birth_country = 'USA' THEN 1 ELSE 0 END) AS num , CAST(SUM(CASE WHEN T1.birth_country = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award_category = 'Primetime Emmy' AND T2.person = 'Dan Castellaneta';", "pred_sql": "SELECT COUNT(DISTINCT award.person) AS emmy_recipients, (COUNT(DISTINCT award.person) * 100.0 / (SELECT COUNT(DISTINCT person.name) FROM person)) AS percentage_americans FROM award JOIN person ON award.person = person.name WHERE award.award_category = 'Primetime Emmy Award' AND person.birth_country = 'USA';"}
{"sample_id": 4269, "db_id": "simpson_episodes", "gold_sql": "SELECT name FROM Person WHERE SUBSTR(birthdate, 1, 4) = '1962' AND birth_region = 'California';", "pred_sql": "SELECT name FROM person WHERE birthdate LIKE '1962%' AND birth_place = 'California';"}
{"sample_id": 4233, "db_id": "simpson_episodes", "gold_sql": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.organization = 'Primetime Emmy Awards' AND T1.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T1.result = 'Nominee' GROUP BY T1.episode_id HAVING COUNT(T1.episode_id) = 21;", "pred_sql": "SELECT e.title FROM episode e JOIN award a ON e.episode_id = a.episode_id WHERE a.award = 'Emmy' AND a.award_category = 'Outstanding Animated Program' GROUP BY e.episode_id HAVING COUNT(a.award_id) = 21;"}
{"sample_id": 4206, "db_id": "simpson_episodes", "gold_sql": "SELECT DISTINCT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.person = 'Dan Castellaneta' AND T1.award = 'Outstanding Voice-Over Performance' AND T1.organization = 'Primetime Emmy Awards' AND T1.year = 2009;", "pred_sql": "SELECT character_award.character \nFROM award \nJOIN character_award ON award.award_id = character_award.award_id \nJOIN person ON award.person = person.name \nWHERE person.name = 'Dan Castellaneta' \nAND award.year = 2009 \nAND award.organization = 'Primetime Emmy Awards' \nAND award.award_category = 'Outstanding Voice-Over Performance'"}
{"sample_id": 4220, "db_id": "simpson_episodes", "gold_sql": "SELECT T1.person, T1.award, T1.organization, T1.result, T2.credited FROM Award AS T1 INNER JOIN Credit AS T2 ON T2.episode_id = T1.episode_id WHERE T2.episode_id = 'S20-E13' AND T2.role = 'assistant director';", "pred_sql": "SELECT p.name, a.award, a.organization, a.result, c.credited \nFROM award a \nJOIN credit c ON a.episode_id = c.episode_id \nJOIN person p ON a.person = p.name \nWHERE c.role = 'assistant director' \nAND a.season = '20' \nAND a.episode_id = 'E13';"}
{"sample_id": 4320, "db_id": "simpson_episodes", "gold_sql": "SELECT T1.keyword FROM Keyword AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10 AND T2.percent > 29;", "pred_sql": "SELECT k.keyword \nFROM vote v \nJOIN keyword k ON v.episode_id = k.episode_id \nWHERE v.stars = 10 AND v.percent >= 0.30;"}
{"sample_id": 4160, "db_id": "simpson_episodes", "gold_sql": "SELECT COUNT(name) FROM Person WHERE birth_region = 'New York' AND SUBSTR(birthdate, 1, 4) > '1970';", "pred_sql": "SELECT COUNT(*) AS crew_count FROM person WHERE birth_place = 'New York City' AND birthdate > '1970-01-01' AND birthdate LIKE '%20%';"}
{"sample_id": 4209, "db_id": "simpson_episodes", "gold_sql": "SELECT SUM(T1.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 10 ORDER BY T1.rating DESC LIMIT 4;", "pred_sql": "SELECT SUM(votes) AS total_votes\nFROM vote\nWHERE episode_id IN (\n    SELECT episode_id\n    FROM episode\n    WHERE rating = '10.0'\n    ORDER BY rating DESC\n    LIMIT 4\n) AND stars = '10'"}
{"sample_id": 4241, "db_id": "simpson_episodes", "gold_sql": "SELECT COUNT(episode_id) FROM Episode WHERE air_date LIKE '2008-10%' OR air_date LIKE '2008-11%';", "pred_sql": "SELECT COUNT(*) AS episode_count FROM episode WHERE air_date BETWEEN '2008-10-01' AND '2008-11-30';"}
{"sample_id": 4163, "db_id": "simpson_episodes", "gold_sql": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T1.birth_country = 'USA' AND T2.result = 'Nominee' AND T2.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T2.year = 2009;", "pred_sql": "SELECT COUNT(DISTINCT p.name) AS crew_member_count\nFROM person p\nJOIN award a ON p.name = a.person\nWHERE p.birth_country = 'USA'\nAND a.award = 'Outstanding Animated Program (For Programming Less Than One Hour)'\nAND a.year = 2009\nAND a.result = 'Nominee';"}
{"sample_id": 4227, "db_id": "simpson_episodes", "gold_sql": "SELECT DISTINCT T1.award, T1.person, T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.award_id = 326;", "pred_sql": "SELECT award.award AS award_title, person.name AS person_name, character_award.character AS character_name \nFROM award \nJOIN person ON award.person = person.name \nJOIN character_award ON award.award_id = character_award.award_id \nWHERE award.award_id = 326;"}
{"sample_id": 4298, "db_id": "simpson_episodes", "gold_sql": "SELECT DISTINCT person, name, birthdate, birth_name, birth_place , birth_region, birth_country, height_meters, nickname FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T2.category = 'Music Department';", "pred_sql": "SELECT * FROM credit WHERE category = 'music'"}
{"sample_id": 4230, "db_id": "simpson_episodes", "gold_sql": "SELECT T3.rate, T4.person, T4.award, T5.title, T4.role FROM ( SELECT CAST(SUM(CASE WHEN T1.result = 'Winner' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.result IN ('Winner', 'Nominee') THEN 1 ELSE 0 END) AS rate , T1.person, T1.award, T2.title, T1.role FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2010' ) AS T3 INNER JOIN Award AS T4 INNER JOIN Episode AS T5 ON T4.episode_id = T5.episode_id WHERE T4.year = 2010 AND T4.result = 'Winner';", "pred_sql": "SELECT p.name AS winner_name, a.award AS award_name, e.title AS episode_title, a.role AS winner_role\nFROM award a\nJOIN person p ON a.person = p.name\nJOIN episode e ON a.episode_id = e.episode_id\nWHERE a.result = 'Winner' AND a.year = 2010;"}
{"sample_id": 4350, "db_id": "simpson_episodes", "gold_sql": "SELECT COUNT(episode_id) FROM Episode WHERE rating < 7;", "pred_sql": "SELECT COUNT(*) AS total_episodes FROM episode WHERE rating < 7.0;"}
{"sample_id": 4333, "db_id": "simpson_episodes", "gold_sql": "SELECT COUNT(award_id) FROM Award WHERE SUBSTR(year, 1, 4) = '2009';", "pred_sql": "SELECT COUNT(*) AS total_awards FROM award WHERE year = 2009;"}
{"sample_id": 4214, "db_id": "simpson_episodes", "gold_sql": "SELECT T2.percent FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Sex, Pies and Idiot Scrapes' AND T2.stars = 9;", "pred_sql": "SELECT percent FROM vote WHERE episode_id = (SELECT episode_id FROM episode WHERE title = 'Sex, Pies and Idiot Scrapes') AND stars = '9';"}
{"sample_id": 4365, "db_id": "simpson_episodes", "gold_sql": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.credited = 'true' AND T2.person = 'Sam Im' AND SUBSTR(T1.air_date, 1, 4) = '2009' AND T2.role = 'additional timer';", "pred_sql": "SELECT COUNT(*) AS episode_count \nFROM episode e \nJOIN credit c ON e.episode_id = c.episode_id \nWHERE c.person = 'Sam Im' \nAND c.role = 'additional timer' \nAND strftime('%Y', e.air_date) = '2009';"}
{"sample_id": 4279, "db_id": "simpson_episodes", "gold_sql": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2010' AND T1.person = 'Joel H. Cohen';", "pred_sql": "SELECT e.title, e.air_date \nFROM award a \nJOIN episode e ON a.episode_id = e.episode_id \nJOIN person p ON a.person = p.name \nWHERE p.name = 'Joel H. Cohen' AND a.year = 2010;"}
{"sample_id": 4308, "db_id": "simpson_episodes", "gold_sql": "SELECT episode_image FROM Episode WHERE episode = 5;", "pred_sql": "SELECT episode_image FROM episode WHERE episode_id = '5';"}
{"sample_id": 4158, "db_id": "simpson_episodes", "gold_sql": "SELECT name FROM Person WHERE birthdate IS NOT NULL ORDER BY birthdate ASC LIMIT 1;", "pred_sql": "SELECT name, birthdate FROM person WHERE birthdate = (SELECT MIN(birthdate) FROM person)"}
{"sample_id": 3191, "db_id": "donor", "gold_sql": "SELECT COUNT(donationid) FROM donations WHERE for_honoree = 't' AND donor_state = 'NJ'", "pred_sql": "SELECT COUNT(DISTINCT donor_acctid) AS donor_count FROM donations WHERE donor_state = 'New Jersey' AND for_honoree = 't';"}
{"sample_id": 3283, "db_id": "donor", "gold_sql": "SELECT T2.teacher_ny_teaching_fellow FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Team More Books!'", "pred_sql": "SELECT teacher_ny_teaching_fellow FROM projects WHERE projectid IN (SELECT projectid FROM essays WHERE title = 'Team More Books!');"}
{"sample_id": 3211, "db_id": "donor", "gold_sql": "SELECT teacher_ny_teaching_fellow end FROM projects WHERE teacher_acctid = '42d43fa6f37314365d08692e08680973'", "pred_sql": "SELECT teacher_ny_teaching_fellow FROM projects WHERE teacher_acctid = '42d43fa6f37314365d08692e08680973';"}
{"sample_id": 3242, "db_id": "donor", "gold_sql": "SELECT T2.schoolid FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Virtual Aquarium Needs Help!'", "pred_sql": "SELECT schoolid FROM projects WHERE projectid = (SELECT projectid FROM essays WHERE title = 'Virtual Aquarium Needs Help!');"}
{"sample_id": 3234, "db_id": "donor", "gold_sql": "SELECT T2.is_teacher_acct FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Calculate, Financial Security For Tomorrow Starts Today! '", "pred_sql": "SELECT d.is_teacher_acct FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.title = 'Calculate, Financial Security For Tomorrow Starts Today!';"}
{"sample_id": 3244, "db_id": "donor", "gold_sql": "SELECT CAST(SUM(T2.donation_optional_support) AS REAL) * 100 / SUM(T2.donation_total) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Awesome Audiobooks Make Avid Readers'", "pred_sql": "SELECT (SUM(donation_optional_support) / SUM(donation_total)) * 100 AS tip_percentage\nFROM donations\nJOIN projects ON donations.projectid = projects.projectid\nWHERE projects.title = 'Awesome Audiobooks Make Avid Readers';"}
{"sample_id": 3227, "db_id": "donor", "gold_sql": "SELECT COUNT(school_year_round) FROM projects WHERE school_city = 'Los Angeles' AND school_year_round = 't'", "pred_sql": "SELECT COUNT(*) AS year_round_school_count FROM projects WHERE school_city = 'Los Angeles' AND school_year_round = 't';"}
{"sample_id": 3268, "db_id": "donor", "gold_sql": "SELECT SUM(donation_to_project) + SUM(donation_optional_support) FROM donations WHERE payment_method = 'amazon'", "pred_sql": "SELECT SUM(donation_total) AS total_donated_amounts FROM donations WHERE payment_method = 'Amazon';"}
{"sample_id": 3284, "db_id": "donor", "gold_sql": "SELECT T1.vendor_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_area LIKE 'Literacy%' GROUP BY T1.vendor_name ORDER BY COUNT(T2.primary_focus_area) DESC LIMIT 1", "pred_sql": "SELECT DISTINCT vendor_name FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.primary_focus_area = 'Literature';"}
{"sample_id": 3292, "db_id": "donor", "gold_sql": "SELECT AVG(T1.item_quantity) FROM resources AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.for_honoree = 't'", "pred_sql": "SELECT AVG(item_quantity) AS average_resources_per_honoree\nFROM resources r\nJOIN projects p ON r.projectid = p.projectid\nJOIN donations d ON p.projectid = d.projectid\nWHERE d.for_honoree = 't';"}
{"sample_id": 3294, "db_id": "donor", "gold_sql": "SELECT T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_subject = 'Mathematics' ORDER BY T1.item_unit_price DESC LIMIT 1", "pred_sql": "SELECT item_name, MAX(item_unit_price) AS max_price \nFROM resources \nJOIN projects ON resources.projectid = projects.projectid \nWHERE projects.primary_focus_subject = 'Mathematics' \nGROUP BY item_name \nORDER BY max_price DESC \nLIMIT 1;"}
{"sample_id": 3301, "db_id": "donor", "gold_sql": "SELECT DISTINCT T2.primary_focus_subject FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.payment_included_campaign_gift_card = 't'", "pred_sql": "SELECT DISTINCT p.primary_focus_subject \nFROM donations d \nJOIN projects p ON d.projectid = p.projectid \nWHERE d.payment_included_campaign_gift_card = 't';"}
{"sample_id": 3179, "db_id": "donor", "gold_sql": "SELECT T1.school_state, T2.donor_acctid, AVG(T2.donation_optional_support), T1.resource_type FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid ORDER BY T2.donation_optional_support DESC LIMIT 5", "pred_sql": "SELECT d.donor_state, d.donor_acctid, AVG(d.donation_optional_support) AS avg_optional_support, r.project_resource_type\nFROM donations d\nJOIN resources r ON d.projectid = r.projectid\nGROUP BY d.donor_acctid\nORDER BY avg_optional_support DESC\nLIMIT 5;"}
{"sample_id": 3190, "db_id": "donor", "gold_sql": "SELECT COUNT(donationid) FROM donations WHERE is_teacher_acct = 't' AND donor_city = 'New York'", "pred_sql": "SELECT COUNT(DISTINCT donor_acctid) AS teacher_count FROM donations WHERE donor_state = 'NY' AND is_teacher_acct = 't';"}
{"sample_id": 3213, "db_id": "donor", "gold_sql": "SELECT T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'", "pred_sql": "SELECT r.item_name FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e';"}
{"sample_id": 3247, "db_id": "donor", "gold_sql": "SELECT need_statement FROM essays WHERE title = 'Family History Project'", "pred_sql": "SELECT need_statement FROM essays WHERE title = 'Family History Project';"}
{"sample_id": 3166, "db_id": "donor", "gold_sql": "SELECT DISTINCT donor_state FROM donations WHERE for_honoree = 't' AND payment_included_campaign_gift_card = 't' AND payment_method = 'paypal' AND donor_state = ( SELECT donor_state FROM donations GROUP BY donor_state ORDER BY SUM(donation_total) DESC LIMIT 1 )", "pred_sql": "SELECT donor_state, COUNT(*) AS donation_count \nFROM donations \nWHERE payment_included_campaign_gift_card = 't' \nAND for_honoree = 't' \nGROUP BY donor_state \nORDER BY donation_count DESC \nLIMIT 1;"}
{"sample_id": 3280, "db_id": "donor", "gold_sql": "SELECT COUNT(T1.schoolid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.payment_included_campaign_gift_card = 't' AND T1.poverty_level = 'highest poverty'", "pred_sql": "SELECT COUNT(DISTINCT p.schoolid) AS school_count \nFROM projects p \nJOIN donations d ON p.projectid = d.projectid \nWHERE p.poverty_level = 'highest' \nAND d.payment_included_campaign_gift_card = 't';"}
{"sample_id": 3215, "db_id": "donor", "gold_sql": "SELECT DISTINCT T1.project_resource_type FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T3.donationid LIKE 'b39547f29dfc25fb13c6e9e8d940dc43'", "pred_sql": "SELECT project_resource_type FROM resources WHERE projectid IN (SELECT projectid FROM donations WHERE donationid = 'b39547f29dfc25fb13c6e9e8d940dc43')"}
{"sample_id": 3167, "db_id": "donor", "gold_sql": "SELECT donationid, donation_total FROM donations ORDER BY donation_total DESC LIMIT 1", "pred_sql": "SELECT donationid, donation_total FROM donations ORDER BY donation_total DESC LIMIT 1;"}
{"sample_id": 3231, "db_id": "donor", "gold_sql": "SELECT COUNT(projectid) FROM projects WHERE school_district = 'Boston Public School District' AND grade_level = 'Grades 3-5'", "pred_sql": "SELECT COUNT(*) AS total_projects FROM projects WHERE grade_level IN ('3', '4', '5') AND school_district = 'Boston Public School District';"}
{"sample_id": 3196, "db_id": "donor", "gold_sql": "SELECT COUNT(T1.projectid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.vendor_name = 'Lakeshore Learning Materials' AND T2.teacher_prefix = 'Dr.'", "pred_sql": "SELECT COUNT(DISTINCT p.projectid) AS project_count \nFROM projects p \nJOIN resources r ON p.projectid = r.projectid \nWHERE r.vendor_name = 'Lakeshore Learning Materials' \nAND p.teacher_prefix = 'Dr. ';"}
{"sample_id": 3279, "db_id": "donor", "gold_sql": "SELECT COUNT(T2.schoolid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T2.school_city = 'Brooklyn' AND T2.school_metro = 'urban' AND T3.for_honoree = 't' AND T1.item_name = 'TT992 - Refill Pack for Safety Name Tags'", "pred_sql": "SELECT COUNT(DISTINCT p.schoolid) AS school_count \nFROM projects p \nJOIN donations d ON p.projectid = d.projectid \nJOIN resources r ON p.projectid = r.projectid \nWHERE p.school_city = 'Brooklyn' \nAND p.school_metro = 'urban' \nAND d.for_honoree = 't' \nAND r.item_name = 'TT992 - Refill Pack for Safety Name Tags';"}
{"sample_id": 3291, "db_id": "donor", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.title LIKE 'ABC Read' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.school_county) FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid", "pred_sql": "SELECT COUNT(DISTINCT school_county) * 100.0 / (SELECT COUNT(DISTINCT school_county) FROM projects) AS percentage_counties_launched FROM projects WHERE projectid = 'ABC Read';"}
{"sample_id": 3157, "db_id": "donor", "gold_sql": "SELECT T1.vendor_name, T1.item_name, T1.item_unit_price FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN essays AS T3 ON T2.projectid = T3.projectid WHERE T3.title = 'Lights, Camera, Action!'", "pred_sql": "SELECT r.vendor_name, r.item_name, r.item_unit_price \nFROM resources r \nJOIN projects p ON r.projectid = p.projectid \nWHERE p.title = 'Lights, Camera, Action!';"}
{"sample_id": 3181, "db_id": "donor", "gold_sql": "SELECT COUNT(T2.schoolid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.resource_type = 'Books' AND T2.school_metro = 'urban'", "pred_sql": "SELECT COUNT(DISTINCT p.schoolid) AS school_count \nFROM projects p \nJOIN resources r ON p.projectid = r.projectid \nWHERE r.project_resource_type = 'books' \nAND p.school_metro = 'urban';"}
{"sample_id": 3158, "db_id": "donor", "gold_sql": "SELECT SUM(T2.donation_to_project) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title = 'Whistle While We Work!'", "pred_sql": "SELECT SUM(donation_total) AS total_donations FROM donations WHERE projectid = (SELECT projectid FROM projects WHERE title = 'Whistle While We Work!');"}
{"sample_id": 3293, "db_id": "donor", "gold_sql": "SELECT T1.date_posted FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title LIKE 'Photojournalists Want to Exhibit Their Best Works'", "pred_sql": "SELECT date_posted FROM projects WHERE projectid = (SELECT projectid FROM essays WHERE title = 'Photojournalists Want to Exhibit Their Best Works');"}
{"sample_id": 3194, "db_id": "donor", "gold_sql": "SELECT item_name FROM resources WHERE vendor_name = 'Lakeshore Learning Materials' ORDER BY item_quantity DESC LIMIT 1", "pred_sql": "SELECT item_name, SUM(item_quantity) AS total_quantity\nFROM resources\nWHERE vendor_name = 'Lakeshore Learning Materials'\nGROUP BY item_name\nORDER BY total_quantity DESC\nLIMIT 1;"}
{"sample_id": 3259, "db_id": "donor", "gold_sql": "SELECT T1.donation_message FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_latitude = 40.735332 AND T2.school_longitude = -74.196014 AND T2.school_district = 'Newark School District'", "pred_sql": "SELECT d.donation_message FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.school_district = 'Newark School District' AND p.school_latitude = '40.735332' AND p.school_longitude = '-74.196014';"}
{"sample_id": 3208, "db_id": "donor", "gold_sql": "SELECT DISTINCT donor_city FROM donations WHERE donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5'", "pred_sql": "SELECT donor_city FROM donations WHERE donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5';"}
{"sample_id": 3239, "db_id": "donor", "gold_sql": "SELECT T1.short_description FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_timestamp LIKE '2012-09-06 14:44:29'", "pred_sql": "SELECT essays.short_description FROM donations JOIN projects ON donations.projectid = projects.projectid JOIN essays ON projects.projectid = essays.projectid WHERE donations.donation_timestamp = '2012/9/6 14:44:29';"}
{"sample_id": 10922, "db_id": "debit_card_specializing", "gold_sql": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Date = '201309'", "pred_sql": "SELECT p.description \nFROM transactions_1k t \nJOIN products p ON t.productid = p.productid \nWHERE strftime('%Y-%m', t.date) = '2013-09';"}
{"sample_id": 10897, "db_id": "debit_card_specializing", "gold_sql": "SELECT COUNT(*) FROM ( SELECT T2.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND SUBSTRING(T2.Date, 1, 4) = '2012' GROUP BY T2.CustomerID HAVING SUM(T2.Consumption) < 30000 ) AS t1", "pred_sql": "SELECT COUNT(DISTINCT c.customerid) AS customer_count \nFROM customers c \nJOIN yearmonth ym ON c.customerid = ym.customerid \nWHERE ym.consumption < 30000 \nAND ym.date BETWEEN 20120101 AND 20121231 \nAND c.segment = 'KAM';"}
{"sample_id": 10896, "db_id": "debit_card_specializing", "gold_sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Date BETWEEN 201101 AND 201112 GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1", "pred_sql": "SELECT c.customerid, SUM(ym.consumption) AS total_consumption\nFROM customers c\nJOIN transactions_1k t ON c.customerid = t.customerid\nJOIN yearmonth ym ON c.customerid = ym.customerid\nWHERE c.currency = 'CZK' AND strftime('%Y', t.date) = '2011'\nGROUP BY c.customerid\nORDER BY total_consumption DESC;"}
{"sample_id": 10920, "db_id": "debit_card_specializing", "gold_sql": "SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1", "pred_sql": "SELECT MAX(consumption) AS highest_consumption FROM yearmonth WHERE date BETWEEN 20120101 AND 20121231;"}
{"sample_id": 10953, "db_id": "debit_card_specializing", "gold_sql": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency", "pred_sql": "SELECT c.customerid, AVG(t.price) AS average_price, c.currency \nFROM transactions_1k t \nJOIN customers c ON t.customerid = c.customerid \nGROUP BY c.customerid \nORDER BY SUM(t.amount * t.price) DESC \nLIMIT 1;"}
{"sample_id": 10941, "db_id": "debit_card_specializing", "gold_sql": "SELECT T1.ProductID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'", "pred_sql": "SELECT productid FROM transactions_1k WHERE date = '2012/8/23' AND time = '21:20:00';"}
{"sample_id": 10930, "db_id": "debit_card_specializing", "gold_sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000", "pred_sql": "SELECT COUNT(*) AS transaction_count \nFROM transactions_1k t \nJOIN gasstations g ON t.gasstationid = g.gasstationid \nWHERE g.country = 'Czech Republic' AND t.price > 1000;"}
{"sample_id": 10939, "db_id": "debit_card_specializing", "gold_sql": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY Date ASC LIMIT 1", "pred_sql": "SELECT segment FROM customers WHERE customerid = (SELECT customerid FROM customers ORDER BY customerid ASC LIMIT 1)"}
{"sample_id": 10903, "db_id": "debit_card_specializing", "gold_sql": "SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date BETWEEN 201301 AND 201312", "pred_sql": "SELECT CASE \n    WHEN segment1 = 'SME' AND segment2 = 'LAM' THEN 'SME vs LAM' \n    WHEN segment1 = 'LAM' AND segment2 = 'KAM' THEN 'LAM vs KAM' \n    WHEN segment1 = 'KAM' AND segment2 = 'SME' THEN 'KAM vs SME' \nEND AS comparison, \n    AVG(consumption1) - AVG(consumption2) AS consumption_difference \nFROM \n    (SELECT c1.segment AS segment1, c2.segment AS segment2, y1.consumption AS consumption1, y2.consumption AS consumption2 \n     FROM customers c1 \n     JOIN yearmonth y1 ON c1.customerid = y1.customerid \n     JOIN customers c2 ON c2.segment IN ('LAM', 'KAM', 'SME') \n     JOIN yearmonth y2 ON c2.customerid = y2.customerid \n     WHERE y1.date BETWEEN 20130101 AND 20131231 \n     AND y1.consumption = (SELECT MIN(consumption) FROM yearmonth WHERE date BETWEEN 20130101 AND 20131231 AND customerid IN (SELECT customerid FROM customers WHERE currency = 'CZK')) \n     AND y2.date BETWEEN 20130101 AND 20131231) \nGROUP BY segment1, segment2;"}
{"sample_id": 10929, "db_id": "debit_card_specializing", "gold_sql": "SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11", "pred_sql": "SELECT DISTINCT time FROM transactions_1k WHERE gasstationid IN (SELECT gasstationid FROM gasstations WHERE chainid = 11);"}
{"sample_id": 10904, "db_id": "debit_card_specializing", "gold_sql": "SELECT CAST((SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0)), CAST(SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) , CAST(SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID", "pred_sql": "WITH consumption_data AS (  SELECT c.segment,  strftime('%Y', y.date) AS year,  SUM(y.consumption) AS total_consumption  FROM yearmonth y  JOIN customers c ON y.customerid = c.customerid  WHERE c.currency = 'EUR' AND strftime('%Y', y.date) IN ('2012', '2013')  GROUP BY c.segment, year),  consumption_percentage AS (  SELECT segment,  (SUM(CASE WHEN year = '2013' THEN total_consumption ELSE 0 END) - SUM(CASE WHEN year = '2012' THEN total_consumption ELSE 0 END)) * 100.0 / NULLIF(SUM(CASE WHEN year = '2012' THEN total_consumption ELSE 0 END), 0) AS percentage_increase  FROM consumption_data  GROUP BY segment)  SELECT segment, percentage_increase  FROM consumption_percentage  ORDER BY percentage_increase DESC;"}
{"sample_id": 10924, "db_id": "debit_card_specializing", "gold_sql": "SELECT DISTINCT T3.ChainID FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T2.Currency = 'EUR'", "pred_sql": "SELECT DISTINCT g.chainid FROM gasstations g JOIN transactions_1k t ON g.gasstationid = t.gasstationid JOIN customers c ON t.customerid = c.customerid WHERE c.currency = 'euro';"}
{"sample_id": 10619, "db_id": "thrombosis_prediction", "gold_sql": "SELECT \"First Date\", Diagnosis FROM Patient WHERE ID = 48473", "pred_sql": "SELECT p.first_date, p.diagnosis FROM patient p WHERE p.id = 48473;"}
{"sample_id": 10627, "db_id": "thrombosis_prediction", "gold_sql": "SELECT CASE WHEN (T1.SEX = 'F' AND T2.UA > 6.5) OR (T1.SEX = 'M' AND T2.UA > 8.0) THEN true ELSE false END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266", "pred_sql": "SELECT ua FROM laboratory WHERE id = 57266;"}
{"sample_id": 10687, "db_id": "thrombosis_prediction", "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = 'negative' OR T2.RNP = '0' AND T1.Admission = '+'", "pred_sql": "SELECT COUNT(DISTINCT p.id) AS normal_patients_count\nFROM patient p\nJOIN laboratory l ON p.id = l.id\nWHERE l.rnp = '-' AND p.admission = '+';"}
{"sample_id": 10611, "db_id": "thrombosis_prediction", "gold_sql": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND \"ANA Pattern\" = 'S' AND \"aCL IgM\" > (SELECT AVG(\"aCL IgM\") * 1.2 FROM Examination WHERE Thrombosis = 2 AND \"ANA Pattern\" = 'S')", "pred_sql": "SELECT COUNT(DISTINCT p.id) AS patient_count\nFROM patient p\nJOIN examination e ON p.id = e.id\nWHERE e.thrombosis = 2\nAND e.ana_pattern = 'S'\nAND e.acl_igm > (SELECT AVG(CAST(acl_igm AS REAL)) * 1.2 FROM examination);"}
{"sample_id": 10671, "db_id": "thrombosis_prediction", "gold_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.\"U-PRO\" >= 30", "pred_sql": "SELECT DISTINCT p.diagnosis FROM patient p JOIN laboratory l ON p.id = l.id WHERE l.u_pro > 30;"}
{"sample_id": 10720, "db_id": "thrombosis_prediction", "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T3.\"ANA Pattern\" = 'P' AND T2.\"T-CHO\" < 250", "pred_sql": "SELECT COUNT(DISTINCT p.id) AS patient_count\nFROM patient p\nJOIN examination e ON p.id = e.id\nJOIN laboratory l ON p.id = l.id\nWHERE l.t-cho < 250 AND e.ana_pattern = 'P';"}
{"sample_id": 10662, "db_id": "thrombosis_prediction", "gold_sql": "SELECT AVG(T2.HCT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT < 29 AND STRFTIME('%Y', T2.Date) = '1991'", "pred_sql": "SELECT AVG(hct) AS average_hct FROM laboratory WHERE date LIKE '91%' AND hct < 29;"}
{"sample_id": 10629, "db_id": "thrombosis_prediction", "gold_sql": "SELECT DISTINCT T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND STRFTIME('%Y', T2.Date) = '1994'", "pred_sql": "SELECT p.sex, p.birthday FROM patient p JOIN laboratory l ON p.id = l.id WHERE l.got < 60 AND l.date BETWEEN '1994-01-01' AND '1994-12-31';"}
{"sample_id": 10647, "db_id": "thrombosis_prediction", "gold_sql": "SELECT T1.ID,T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.\"T-BIL\" >= 2.0 GROUP BY T1.SEX,T1.ID", "pred_sql": "SELECT p.sex, COUNT(*) AS total_patients\nFROM patient p\nJOIN laboratory l ON p.id = l.id\nWHERE l.t-bil >= 2.0\nGROUP BY p.sex;"}
{"sample_id": 10726, "db_id": "thrombosis_prediction", "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.GLU < 180 AND T3.Thrombosis = 0", "pred_sql": "SELECT COUNT(*) AS patient_count \nFROM patient p \nJOIN examination e ON p.id = e.id \nWHERE e.thrombosis = 0 \nAND p.id IN (SELECT id FROM laboratory WHERE glu < 180)"}
{"sample_id": 10595, "db_id": "thrombosis_prediction", "gold_sql": "SELECT T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.\"Examination Date\" BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T2.Diagnosis ORDER BY COUNT(T2.Diagnosis) DESC LIMIT 1", "pred_sql": "SELECT diagnosis, COUNT(diagnosis) AS diagnosis_count\nFROM patient p\nJOIN laboratory l ON p.id = l.id\nWHERE l.date BETWEEN '1985-01-01' AND '1995-12-31'\nGROUP BY diagnosis\nORDER BY diagnosis_count DESC\nLIMIT 1;"}
{"sample_id": 10608, "db_id": "thrombosis_prediction", "gold_sql": "SELECT ID FROM Examination WHERE \"Examination Date\" BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'", "pred_sql": "SELECT patient.id FROM patient JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'Behcet''s' AND examination.date BETWEEN '1970-01-01' AND '1997-12-31';"}
{"sample_id": 10603, "db_id": "thrombosis_prediction", "gold_sql": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA = 8.4 AND T2.Date = '1991-10-21'", "pred_sql": "SELECT (1991 - birthday) AS age FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE ua = 8.4 AND date = '1991-10-21';"}
{"sample_id": 10714, "db_id": "thrombosis_prediction", "gold_sql": "SELECT T3.\"aCL IgG\", T3.\"aCL IgM\", T3.\"aCL IgA\" FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T1.SEX = 'F' AND T2.UA > 6.5 ORDER BY T2.UA DESC LIMIT 1", "pred_sql": "SELECT e.\"acl igg\" FROM examination e JOIN laboratory l ON e.id = l.id WHERE l.ua < 8.0 AND l.ua = (SELECT MAX(ua) FROM laboratory WHERE ua < 8.0) AND e.id IN (SELECT p.id FROM patient p WHERE p.sex = 'F')"}
{"sample_id": 10728, "db_id": "thrombosis_prediction", "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9", "pred_sql": "SELECT COUNT(DISTINCT p.id) AS patient_count\nFROM patient p\nJOIN examination e ON p.id = e.id\nWHERE e.diagnosis = 'SLE' AND e.wbc BETWEEN 3.5 AND 9.0;"}
{"sample_id": 10722, "db_id": "thrombosis_prediction", "gold_sql": "SELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 ORDER BY T2.TG DESC LIMIT 1", "pred_sql": "SELECT p.diagnosis FROM laboratory l JOIN patient p ON l.id = p.id WHERE l.tg < 200 ORDER BY l.tg DESC LIMIT 1;"}
{"sample_id": 10583, "db_id": "thrombosis_prediction", "gold_sql": "SELECT AVG(T2.\"aCL IgG\") FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50 AND T1.Admission = '+'", "pred_sql": "SELECT AVG(examination.\"acl igg\") AS average_acl_igg\nFROM patient\nJOIN examination ON patient.id = examination.id\nWHERE (strftime('%Y', 'now') - strftime('%Y', patient.birthday)) >= 50 AND patient.admission = '+';"}
{"sample_id": 10630, "db_id": "thrombosis_prediction", "gold_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60", "pred_sql": "SELECT DISTINCT p.id FROM patient p JOIN laboratory l ON p.id = l.id WHERE p.sex = 'M' AND l.gpt >= 60;"}
{"sample_id": 10713, "db_id": "thrombosis_prediction", "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M'  AND T2.ALB > 3.5 AND T2.ALB < 5.5 AND T2.TP BETWEEN 6.0 AND 8.5", "pred_sql": "SELECT COUNT(DISTINCT p.id) AS male_patient_count\nFROM patient p\nJOIN laboratory l ON p.id = l.id\nWHERE p.sex = 'M' \nAND l.alb > 3.5 AND l.alb < 5.5 \nAND l.tp > 6.0 AND l.tp < 8.5;"}
{"sample_id": 10600, "db_id": "thrombosis_prediction", "gold_sql": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' AND \"First Date\" IS NOT NULL ORDER BY \"First Date\" ASC LIMIT 1", "pred_sql": "SELECT p.sex FROM patient p JOIN examination e ON p.id = e.id WHERE e.diagnosis = 'AORTITIS' ORDER BY p.first date LIMIT 1;"}
{"sample_id": 10716, "db_id": "thrombosis_prediction", "gold_sql": "SELECT T2.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.CRE < 1.5 ORDER BY T2.\"aCL IgA\" DESC LIMIT 1", "pred_sql": "SELECT e.id FROM examination e JOIN laboratory l ON e.id = l.id WHERE l.cre < 1.5 AND e.acl_igg = (SELECT MAX(acl_igg) FROM examination)"}
{"sample_id": 10702, "db_id": "thrombosis_prediction", "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'", "pred_sql": "SELECT COUNT(*) AS male_patients_with_normal_got FROM patient p JOIN laboratory l ON p.id = l.id WHERE p.sex = 'M' AND l.got < 60;"}
{"sample_id": 10718, "db_id": "thrombosis_prediction", "gold_sql": "SELECT T3.ANA FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.\"T-BIL\" < 2.0 ORDER BY T2.\"T-BIL\" DESC LIMIT 1", "pred_sql": "SELECT e.ana FROM examination e JOIN laboratory l ON e.id = l.id WHERE l.t_bil < 2.0 ORDER BY l.t_bil DESC LIMIT 1;"}
{"sample_id": 10618, "db_id": "thrombosis_prediction", "gold_sql": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1", "pred_sql": "SELECT symptoms, COUNT(symptoms) as symptom_count FROM examination WHERE diagnosis = 'SLE' GROUP BY symptoms ORDER BY symptom_count DESC LIMIT 1;"}
{"sample_id": 10612, "db_id": "thrombosis_prediction", "gold_sql": "SELECT CAST(SUM(CASE WHEN UA <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Laboratory WHERE \"U-PRO\" > 0 AND \"U-PRO\" < 30", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM laboratory WHERE u_pro BETWEEN 0 AND 30)) AS percentage\nFROM laboratory\nWHERE u_pro BETWEEN 0 AND 30 AND ua < 8.0;"}
{"sample_id": 10641, "db_id": "thrombosis_prediction", "gold_sql": "SELECT AVG(T2.UA) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.UA < 6.5 AND T1.SEX = 'F') OR (T2.UA < 8.0 AND T1.SEX = 'M') AND T2.Date = ( SELECT MAX(Date) FROM Laboratory )", "pred_sql": "SELECT AVG(laboratory.ua) AS average_ua FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.date = (SELECT MAX(date) FROM laboratory WHERE id = patient.id) AND laboratory.ua > 6.5 AND (patient.sex = 'F' OR patient.sex = 'M');"}
{"sample_id": 10732, "db_id": "thrombosis_prediction", "gold_sql": "SELECT AVG(T2.PT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PT < 14 AND T1.SEX = 'M'", "pred_sql": "SELECT AVG(pt) AS average_prothrombin_time FROM laboratory JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.pt < 14;"}
{"sample_id": 10668, "db_id": "thrombosis_prediction", "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T3.Thrombosis = 0 AND T2.APTT > 45", "pred_sql": "SELECT COUNT(DISTINCT p.id) AS patient_count\nFROM patient p\nJOIN examination e ON p.id = e.id\nJOIN laboratory l ON p.id = l.id\nWHERE l.aptt >= 45 AND e.thrombosis = 0;"}
{"sample_id": 10602, "db_id": "thrombosis_prediction", "gold_sql": "SELECT T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT = 9.0 AND T2.Date = '1992-06-12'", "pred_sql": "SELECT sex FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date = '1992-06-12' AND laboratory.gpt = 9;"}
{"sample_id": 10606, "db_id": "thrombosis_prediction", "gold_sql": "SELECT T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-03-01' AND T2.\"Examination Date\" = '1993-09-27'", "pred_sql": "SELECT e.symptoms \nFROM examination e \nJOIN patient p ON e.id = p.id \nWHERE p.birthday = '1959-03-01' \nAND e.examination_date = '1993-09-27';"}
{"sample_id": 10628, "db_id": "thrombosis_prediction", "gold_sql": "SELECT Date FROM Laboratory WHERE ID = 48473 AND GOT >= 60", "pred_sql": "SELECT date FROM laboratory WHERE id = '48473' AND got > 60;"}
{"sample_id": 10639, "db_id": "thrombosis_prediction", "gold_sql": "SELECT CASE WHEN T2.ALB >= 3.5 AND T2.ALB <= 5.5 THEN 'normal' ELSE 'abnormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1982'", "pred_sql": "SELECT p.id, l.alb, CASE WHEN l.alb > 3.5 AND l.alb < 5.5 THEN 'Normal' ELSE 'Abnormal' END AS albumin_status\nFROM patient p\nJOIN laboratory l ON p.id = l.id\nWHERE p.birthday BETWEEN '1982-01-01' AND '1982-12-31';"}
{"sample_id": 277, "db_id": "retail_complains", "gold_sql": "SELECT CAST(SUM(T1.age) AS REAL) / COUNT(T3.Region) AS average FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T3.Region = 'Midwest'", "pred_sql": "SELECT AVG(CAST(client.age AS INTEGER)) AS average_age FROM client JOIN district ON client.district_id = district.district_id JOIN state ON district.state_abbrev = state.statecode WHERE state.region = 'Midwest';"}
{"sample_id": 269, "db_id": "retail_complains", "gold_sql": "SELECT T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Complaint ID\" = 'CR0100432'", "pred_sql": "SELECT client.phone FROM callcenterlogs JOIN client ON callcenterlogs.rand client = client.client_id WHERE callcenterlogs.complaint id = 'CR0100432';"}
{"sample_id": 261, "db_id": "retail_complains", "gold_sql": "SELECT T2.\"Sub-issue\" FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Gunner' AND T1.middle = 'Omer' AND T1.last = 'Fuller' AND T1.sex = 'Male'", "pred_sql": "SELECT e.issue, e.sub_issue, e.consumer_complaint_narrative \nFROM events e \nJOIN client c ON e.client_id = c.client_id \nWHERE c.first = 'Gunner' AND c.middle = 'Omer' AND c.last = 'Fuller';"}
{"sample_id": 325, "db_id": "retail_complains", "gold_sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Tags = 'Older American' AND T2.\"Consumer consent provided?\" IN (NULL, 'N/A', '') LIMIT 2", "pred_sql": "SELECT c.first || ' ' || c.last AS full_name \nFROM client c \nJOIN events e ON c.client_id = e.client_id \nWHERE e.tags = 'Older American' \nAND e.consumer_consent_provided IS NULL \nLIMIT 2;"}
{"sample_id": 298, "db_id": "retail_complains", "gold_sql": "SELECT COUNT(T1.Issue) FROM events AS T1 INNER JOIN client AS T2 ON T1.Client_ID = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.Issue = 'Billing disputes' AND T3.division = 'Mountain'", "pred_sql": "SELECT COUNT(*) AS billing_dispute_count \nFROM events \nWHERE issue = 'billing dispute' \nAND client_id IN (\n    SELECT client_id \n    FROM client \n    WHERE district_id IN (\n        SELECT district_id \n        FROM district \n        WHERE division = 'Mountain'\n    )\n);"}
{"sample_id": 315, "db_id": "retail_complains", "gold_sql": "SELECT CAST(SUM(T1.age) AS REAL) / COUNT(T1.age) AS average FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Norwalk'", "pred_sql": "SELECT AVG(age) AS average_age FROM client WHERE city = 'Norwalk';"}
{"sample_id": 353, "db_id": "retail_complains", "gold_sql": "SELECT T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T2.priority = 0 LIMIT 5", "pred_sql": "SELECT last FROM client INNER JOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client WHERE callcenterlogs.priority = '0' LIMIT 5;"}
{"sample_id": 356, "db_id": "retail_complains", "gold_sql": "SELECT T1.first FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Timely response?\" = 'No' AND T1.sex = 'Male'", "pred_sql": "SELECT client.first\nFROM client\nJOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client\nWHERE client.sex = 'male' AND callcenterlogs.outcome = 'not timely'"}
{"sample_id": 256, "db_id": "retail_complains", "gold_sql": "SELECT CAST(COUNT(T2.\"Complaint ID\") AS REAL) / 3 AS average FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE strftime('%Y', T2.\"Date received\") BETWEEN '2015' AND '2017' AND T1.city = 'New York City' AND T2.Product = 'Credit card'", "pred_sql": "SELECT AVG(complaint_count) AS average_complaints\nFROM (\n    SELECT COUNT(c.complaint_id) AS complaint_count\n    FROM callcenterlogs c\n    JOIN client cl ON c.rand_client = cl.client_id\n    JOIN state s ON cl.state = s.statecode\n    JOIN events e ON c.complaint_id = e.complaint_id\n    WHERE s.state = 'New York' \n      AND e.product = 'credit card' \n      AND e.date_received BETWEEN '2015-01-01' AND '2017-12-31'\n    GROUP BY strftime('%Y', e.date_received)\n) AS complaint_counts;"}
{"sample_id": 306, "db_id": "retail_complains", "gold_sql": "SELECT COUNT(T1.\"Complaint ID\") FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE T1.ser_time < '00:05:00' AND T1.server = 'DORIT' AND T2.\"Submitted via\" = 'Phone' AND T2.\"Company response to consumer\" = 'Closed with explanation'", "pred_sql": "SELECT COUNT(*) AS complaint_count\nFROM callcenterlogs ccl\nJOIN client cl ON ccl.rand client = cl.client_id\nWHERE ccl.ser_time <= '00:05:00' \nAND ccl.outcome = 'explained' \nAND ccl.phonefinal IS NOT NULL \nAND cl.first = 'DORIT';"}
{"sample_id": 393, "db_id": "retail_complains", "gold_sql": "SELECT COUNT(\"Submitted via\") FROM events WHERE strftime('%Y', \"Date received\") = '2012' AND \"Submitted via\" = 'Email'", "pred_sql": "SELECT COUNT(*) AS email_complaints_count \nFROM callcenterlogs \nWHERE strftime('%Y', \"date received\") = '2012' \nAND \"submitted via\" = 'email';"}
{"sample_id": 247, "db_id": "retail_complains", "gold_sql": "SELECT 365 * (strftime('%Y', T2.\"Date sent to company\") - strftime('%Y', T2.\"Date received\")) + 30 * (strftime('%M', T2.\"Date sent to company\") - strftime('%M', T2.\"Date received\")) + (strftime('%d', T2.\"Date sent to company\") - strftime('%d', T2.\"Date received\")) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Matthew' AND T1.last = 'Pierce' AND T2.\"Date received\" = '2016-10-28'", "pred_sql": "SELECT julianday(e.date_sent_to_company) - julianday(c.date_received) AS delay_days\nFROM events e\nJOIN callcenterlogs cl ON e.complaint_id = cl.complaint_id\nJOIN client c ON e.client_id = c.client_id\nWHERE c.first = 'Matthew' AND c.last = 'Pierce' AND cl.date_received = '2016-10-28';"}
{"sample_id": 259, "db_id": "retail_complains", "gold_sql": "SELECT T1.state FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.email = 'wyatt.collins@gmail.com'", "pred_sql": "SELECT state.state FROM client JOIN state ON client.state = state.statecode WHERE client.email = 'wyatt.collins@gmail.com';"}
{"sample_id": 380, "db_id": "retail_complains", "gold_sql": "SELECT AVG(T1.age) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'South Atlantic'", "pred_sql": "SELECT AVG(age) AS average_age FROM client WHERE state IN (SELECT state FROM state WHERE region = 'South Atlantic');"}
{"sample_id": 260, "db_id": "retail_complains", "gold_sql": "SELECT DISTINCT T2.\"Sub-product\" FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Lennox' AND T1.middle = 'Oliver' AND T1.last = 'Drake' AND T1.sex = 'Male'", "pred_sql": "SELECT events.product FROM events JOIN client ON events.client_id = client.client_id WHERE client.first = 'Lennox' AND client.middle = 'Oliver' AND client.last = 'Drake';"}
{"sample_id": 253, "db_id": "retail_complains", "gold_sql": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE strftime('%Y', T2.\"Date received\") = '2016' AND T1.sex = 'Male' AND T2.Product = 'Credit card'", "pred_sql": "SELECT COUNT(*) AS complaint_count \nFROM callcenterlogs cl \nJOIN events e ON cl.complaint_id = e.complaint_id \nJOIN client c ON cl.rand_client = c.client_id \nWHERE e.product = 'credit card' \nAND strftime('%Y', cl.date_received) = '2016' \nAND c.sex = 'male';"}
{"sample_id": 358, "db_id": "retail_complains", "gold_sql": "SELECT SUM(CASE WHEN T1.age > 13 AND T1.age <= 19 THEN 1 ELSE 0 END), SUM(CASE WHEN T1.age > 19 AND T1.age <= 65 THEN 1 ELSE 0 END) AS adult , SUM(CASE WHEN T1.age > 65 THEN 1 ELSE 0 END) AS elder FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Product = 'Credit card'", "pred_sql": "SELECT client.age, COUNT(*) AS complaint_count\nFROM callcenterlogs\nJOIN events ON callcenterlogs.complaint_id = events.complaint_id\nJOIN client ON events.client_id = client.client_id\nWHERE events.product = 'Credit Card'\nGROUP BY client.age\nORDER BY complaint_count DESC;"}
{"sample_id": 307, "db_id": "retail_complains", "gold_sql": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T1.state_abbrev = T3.StateCode WHERE T2.last = 'Alvarado' AND T2.state = 'MD'", "pred_sql": "SELECT COUNT(*) FROM client WHERE last = 'Alvarado' AND state = 'MD';"}
{"sample_id": 272, "db_id": "retail_complains", "gold_sql": "SELECT COUNT(\"Complaint ID\") FROM callcenterlogs WHERE \"Date received\" LIKE '2017-01%' AND priority = ( SELECT MAX(priority) FROM callcenterlogs )", "pred_sql": "SELECT `complaint id` FROM callcenterlogs WHERE priority = 'higher' AND `date received` LIKE '2017-03%';"}
{"sample_id": 339, "db_id": "retail_complains", "gold_sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T2.server = 'MORIAH' AND T2.\"Date received\" = '2013-09-11'", "pred_sql": "SELECT client.first, client.last, callcenterlogs.phonefinal \nFROM callcenterlogs \nJOIN client ON callcenterlogs.rand client = client.client_id \nWHERE callcenterlogs.server = 'MORIAH' \nAND callcenterlogs.date received = '2013-09-11';"}
{"sample_id": 280, "db_id": "retail_complains", "gold_sql": "SELECT COUNT(T1.age) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.age BETWEEN 12 AND 20 AND T2.division = 'Mountain'", "pred_sql": "SELECT COUNT(*) AS teenage_client_calls\nFROM callcenterlogs cl\nJOIN client c ON cl.rand_client = c.client_id\nJOIN district d ON c.district_id = d.district_id\nWHERE d.division = 'mountain' AND c.age = 'teenager';"}
{"sample_id": 300, "db_id": "retail_complains", "gold_sql": "SELECT t1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T2.type = 'PS' AND T2.server = 'TOVA'", "pred_sql": "SELECT client.last FROM client \nJOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client \nWHERE callcenterlogs.type = 'PS' AND callcenterlogs.server = 'TOVA';"}
{"sample_id": 319, "db_id": "retail_complains", "gold_sql": "SELECT DISTINCT T2.\"Submitted via\" FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Kyran' AND T1.last = 'Muller'", "pred_sql": "SELECT submitted via FROM events JOIN client ON events.client_id = client.client_id WHERE client.first = 'Kyran' AND client.last = 'Muller';"}
{"sample_id": 274, "db_id": "retail_complains", "gold_sql": "SELECT T.Product, MAX(T.num) FROM ( SELECT Product, COUNT(Stars) AS num FROM reviews WHERE Stars = 5 GROUP BY Product ) T", "pred_sql": "SELECT product, COUNT(stars) AS five_star_count \nFROM reviews \nWHERE stars = '5' \nGROUP BY product \nORDER BY five_star_count DESC \nLIMIT 1;"}
{"sample_id": 378, "db_id": "retail_complains", "gold_sql": "SELECT T2.division, COUNT(T2.division) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id GROUP BY T2.division", "pred_sql": "SELECT d.division, COUNT(c.client_id) AS client_count\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nGROUP BY d.division;"}
{"sample_id": 305, "db_id": "retail_complains", "gold_sql": "SELECT COUNT(T1.\"Complaint ID\") FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.\"rand client\" = T2.client_id INNER JOIN events AS T3 ON T1.\"Complaint ID\" = T3.\"Complaint ID\" WHERE T2.sex = 'Female' AND T1.ser_start BETWEEN '15:00:01' AND '23:59:59' AND T3.\"Timely response?\" = 'Yes'", "pred_sql": "SELECT COUNT(*) AS complaint_count \nFROM callcenterlogs cl \nJOIN client c ON cl.rand client = c.client_id \nWHERE c.sex = 'female' \nAND strftime('%H', cl.ser_exit) > '15' \nAND cl.outcome = 'timely response';"}
{"sample_id": 403, "db_id": "retail_complains", "gold_sql": "SELECT T1.division FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T2.Stars = 5 AND T2.Date = '2017-12-17' AND T2.Product = 'Eagle National Mortgage'", "pred_sql": "SELECT d.division \nFROM reviews r \nJOIN district d ON r.district_id = d.district_id \nWHERE r.stars = '5' \nAND r.date = '2017-12-17' \nAND r.product = 'Eagle National Mortgage';"}
{"sample_id": 349, "db_id": "retail_complains", "gold_sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Consumer disputed?\" = 'Yes'", "pred_sql": "SELECT client.first, client.middle, client.last \nFROM client \nJOIN events ON client.client_id = events.client_id \nJOIN callcenterlogs ON events.complaint_id = callcenterlogs.complaint_id \nWHERE events.consumer_disputed = 'yes';"}
{"sample_id": 402, "db_id": "retail_complains", "gold_sql": "SELECT DISTINCT T2.Product FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE T1.server = 'TOVA' AND T2.\"Date received\" LIKE '2017-03%'", "pred_sql": "SELECT DISTINCT events.product \nFROM events \nJOIN callcenterlogs ON events.complaint_id = callcenterlogs.complaint_id \nWHERE callcenterlogs.date_received BETWEEN '2017-03-01' AND '2017-03-31' \nAND callcenterlogs.server = 'TOVA';"}
{"sample_id": 332, "db_id": "retail_complains", "gold_sql": "SELECT T2.city FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Stars = 1 GROUP BY T2.city ORDER BY COUNT(T2.city) DESC LIMIT 1", "pred_sql": "SELECT city, COUNT(*) as review_count \nFROM reviews \nJOIN district ON reviews.district_id = district.district_id \nWHERE stars = '1' \nGROUP BY city \nORDER BY review_count DESC \nLIMIT 1;"}
{"sample_id": 381, "db_id": "retail_complains", "gold_sql": "SELECT T2.city FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T3.Region = 'Midwest' GROUP BY T2.city ORDER BY COUNT(T2.city) LIMIT 1", "pred_sql": "SELECT city, COUNT(client_id) AS client_count \nFROM client \nJOIN district ON client.district_id = district.district_id \nJOIN state ON district.state_abbrev = state.statecode \nWHERE state.region = 'Midwest' \nGROUP BY city \nORDER BY client_count ASC \nLIMIT 1;"}
{"sample_id": 396, "db_id": "retail_complains", "gold_sql": "SELECT COUNT(T1.\"Complaint ID\") FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE strftime('%Y', T1.\"Date received\") = '2015' AND T2.\"Timely response?\" = 'Yes' AND T2.\"Company response to consumer\" = 'Closed with explanation'", "pred_sql": "SELECT COUNT(*) AS total_timely_closed_complaints \nFROM callcenterlogs \nJOIN events ON callcenterlogs.complaint_id = events.complaint_id \nWHERE strftime('%Y', callcenterlogs.date_received) = '2015' \nAND events.timely_response = 'yes' \nAND callcenterlogs.outcome = 'closed';"}
{"sample_id": 323, "db_id": "retail_complains", "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'New York City' AND T2.\"Submitted via\" = 'Fax'", "pred_sql": "SELECT COUNT(DISTINCT c.client_id) AS client_count \nFROM client c \nJOIN callcenterlogs cl ON c.client_id = cl.rand_client \nWHERE c.city = 'New York City' AND cl.submitted_via = 'fax';"}
{"sample_id": 3549, "db_id": "authors", "gold_sql": "SELECT T2.Name, T1.Id FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Inspection resistant memory: Architectural support for security FROM physical examination' AND T2.Affiliation = 'Microsoft Research, USA'", "pred_sql": "SELECT a.id, a.name FROM author a JOIN paperauthor pa ON a.id = pa.authorid JOIN paper p ON pa.paperid = p.id WHERE p.title = 'Inspection resistant memory: Architectural support for security from physical examination' AND pa.affiliation = 'Microsoft Research, USA';"}
{"sample_id": 3517, "db_id": "authors", "gold_sql": "SELECT COUNT(T1.AuthorId) FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Affiliation = 'University of Tokyo' AND T2.Title = 'FIBER: A Generalized Framework for Auto-tuning Software'", "pred_sql": "SELECT COUNT(DISTINCT a.id) AS author_count\nFROM author a\nJOIN paperauthor pa ON a.id = pa.authorid\nJOIN paper p ON pa.paperid = p.id\nWHERE p.title = 'Stitching videos streamed by mobile phones in real-time' AND a.affiliation = 'Cairo Microsoft Innovation Lab';"}
{"sample_id": 3667, "db_id": "authors", "gold_sql": "SELECT Name FROM Author WHERE Affiliation = 'ABB Electrical Machines'", "pred_sql": "SELECT name FROM author WHERE affiliation = 'ABB Electrical Machines';"}
{"sample_id": 3629, "db_id": "authors", "gold_sql": "SELECT COUNT(T1.Id) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'International Symposium on Software Testing and Analysis'", "pred_sql": "SELECT COUNT(*) AS number_of_papers FROM paper WHERE conferenceid = (SELECT id FROM conference WHERE fullname = 'International Symposium on Software Testing and Analysis')"}
{"sample_id": 3550, "db_id": "authors", "gold_sql": "SELECT T2.Name, T2.Affiliation, T3.ShortName, T3.FullName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T1.Title = 'Decreased Saliva Secretion and Down-Regulation of AQP5 in Submandibular Gland in Irradiated Rats'", "pred_sql": "SELECT a.name AS author_name, a.affiliation AS author_affiliation, j.shortname AS journal_shortname, j.fullname AS journal_fullname \nFROM author a \nJOIN paperauthor pa ON a.id = pa.authorid \nJOIN paper p ON pa.paperid = p.id \nJOIN journal j ON p.journalid = j.id \nWHERE p.title = 'Decreased Saliva Secretion and Down-Regulation of AQP5 in Submandibular Gland in Irradiated Rats';"}
{"sample_id": 3593, "db_id": "authors", "gold_sql": "SELECT DISTINCT T3.FullName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Conference AS T3 ON T1.ConferenceId = T3.Id WHERE T2.Name = 'Jean-luc Hainaut' LIMIT 1", "pred_sql": "SELECT conference.fullname \nFROM conference \nJOIN paper ON conference.id = paper.conferenceid \nJOIN paperauthor ON paper.id = paperauthor.paperid \nWHERE paperauthor.name = 'Jean-luc Hainaut';"}
{"sample_id": 3600, "db_id": "authors", "gold_sql": "SELECT Title FROM Paper WHERE year = 1996", "pred_sql": "SELECT title FROM paper WHERE year = '1996';"}
{"sample_id": 3529, "db_id": "authors", "gold_sql": "SELECT T1.Title, T2.HomePage FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id ORDER BY T1.Year DESC LIMIT 1", "pred_sql": "SELECT paper.title, journal.homepage FROM paper JOIN journal ON paper.journalid = journal.id WHERE paper.year != '0' ORDER BY paper.year DESC LIMIT 1;"}
{"sample_id": 3634, "db_id": "authors", "gold_sql": "SELECT T1.Keyword FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'International Radar Symposium' AND T1.Year = 2012", "pred_sql": "SELECT p.keyword FROM paper p JOIN conference c ON p.conferenceid = c.id WHERE c.fullname = 'International Radar Symposium' AND p.year = '2012';"}
{"sample_id": 3587, "db_id": "authors", "gold_sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers'", "pred_sql": "SELECT a.name FROM author a JOIN paperauthor pa ON a.id = pa.authorid JOIN paper p ON pa.paperid = p.id WHERE p.title = 'Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers';"}
{"sample_id": 3538, "db_id": "authors", "gold_sql": "SELECT DISTINCT T2.AuthorId, T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.JournalId = 0 AND T1.Year = 2009 AND T2.Affiliation IS NOT NULL", "pred_sql": "SELECT paperauthor.authorid, paperauthor.affiliation FROM paperauthor JOIN paper ON paperauthor.paperid = paper.id WHERE paper.journalid = '0' AND paper.year = '2009';"}
{"sample_id": 3568, "db_id": "authors", "gold_sql": "SELECT Name FROM Author WHERE Affiliation = 'Birkbeck University of London'", "pred_sql": "SELECT name FROM author WHERE affiliation = 'Birkbeck University of London';"}
{"sample_id": 3617, "db_id": "authors", "gold_sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Affiliation = 'Asan Medical Center, University of Ulsan College of Medicine, Seoul, Korea' AND T1.Title = 'A Randomized Comparison of Sirolimus- Versus Paclitaxel-Eluting Stent Implantation in Patients With Diabetes Mellitus'", "pred_sql": "SELECT a.name \nFROM author a \nJOIN paperauthor pa ON a.id = pa.authorid \nJOIN paper p ON pa.paperid = p.id \nWHERE p.title = 'A Randomized Comparison of Sirolimus- Versus Paclitaxel-Eluting Stent Implantation in Patients With Diabetes Mellitus' \nAND a.affiliation = 'Asan Medical Center, University of Ulsan College of Medicine, Seoul, Korea';"}
{"sample_id": 3666, "db_id": "authors", "gold_sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Real-Time Automata'", "pred_sql": "SELECT a.name FROM author a JOIN paperauthor pa ON a.id = pa.authorid JOIN paper p ON pa.paperid = p.id WHERE p.title = 'Real-Time Automata';"}
{"sample_id": 3520, "db_id": "authors", "gold_sql": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Name = 'Thomas Wiegand' AND T2.Year = 1995", "pred_sql": "SELECT paper.title FROM paper JOIN paperauthor ON paper.id = paperauthor.paperid JOIN author ON paperauthor.authorid = author.id WHERE paper.year = '1995' AND author.name = 'Thomas Wiegand';"}
{"sample_id": 3576, "db_id": "authors", "gold_sql": "SELECT T1.Affiliation FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title = 'A combined search for the standard model Higgs boson at s = 1.96 \u00c2 TeV'", "pred_sql": "SELECT a.affiliation FROM author a JOIN paperauthor pa ON a.id = pa.authorid JOIN paper p ON pa.paperid = p.id JOIN journal j ON p.journalid = j.id WHERE j.fullname = 'A combined search for the standard model Higgs boson at s = 1.96 \u00c2 TeV';"}
{"sample_id": 3566, "db_id": "authors", "gold_sql": "SELECT T1.ConferenceId, T1.JournalId, T2.Name, T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Conference AS T3 ON T1.ConferenceId = T3.Id INNER JOIN Journal AS T4 ON T1.JournalId = T4.Id WHERE T2.Name = 'Shueh-Lin Yau'", "pred_sql": "SELECT c.fullname AS conference_name, j.fullname AS journal_name, pa.name AS co_author_name, p.title AS paper_title \nFROM paper p \nJOIN paperauthor pa ON p.id = pa.paperid \nLEFT JOIN conference c ON p.conferenceid = c.id \nLEFT JOIN journal j ON p.journalid = j.id \nWHERE pa.name != 'Shueh-Lin Yau' AND p.id IN (\n    SELECT paperid \n    FROM paperauthor \n    WHERE name = 'Shueh-Lin Yau'\n)"}
{"sample_id": 3574, "db_id": "authors", "gold_sql": "SELECT T2.Title FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T1.HomePage = '' AND T2.Title <> ''", "pred_sql": "SELECT paper.title \nFROM paper \nJOIN conference ON paper.conferenceid = conference.id \nWHERE conference.homepage IS NULL OR conference.homepage = '';"}
{"sample_id": 3545, "db_id": "authors", "gold_sql": "SELECT T1.Title, T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Roger J. Marshall' AND T1.ConferenceID = 0 AND T1.JournalID = 0", "pred_sql": "SELECT paper.title, paperauthor.affiliation FROM paper JOIN paperauthor ON paper.id = paperauthor.paperid WHERE paper.year = '0' AND paperauthor.name = 'Roger J.Marshal';"}
{"sample_id": 3570, "db_id": "authors", "gold_sql": "SELECT COUNT(HomePage) FROM Journal WHERE HomePage = ''", "pred_sql": "SELECT COUNT(*) FROM journal WHERE homepage IS NULL OR homepage = '';"}
{"sample_id": 3526, "db_id": "authors", "gold_sql": "SELECT ShortName, FullName FROM Conference WHERE HomePage = 'http://www.informatik.uni-trier.de/~ley/db/conf/ices/index.html'", "pred_sql": "SELECT shortname, fullname FROM conference WHERE homepage = 'http://www.informatik.uni-trier.de/~ley/db/conf/ices/index.html';"}
{"sample_id": 3640, "db_id": "authors", "gold_sql": "SELECT COUNT(ShortName) FROM Journal WHERE ShortName = ''", "pred_sql": "SELECT COUNT(*) FROM journal WHERE shortname IS NULL OR shortname = '';"}
{"sample_id": 3651, "db_id": "authors", "gold_sql": "SELECT DISTINCT T1.Name FROM PaperAuthor AS T1 INNER JOIN Author AS T2 ON T1.AuthorId = T2.Id WHERE T2.Name = 'Randall Davis' AND T1.Name != 'Randall Davis'", "pred_sql": "SELECT DISTINCT name FROM paperauthor WHERE authorid = (SELECT id FROM author WHERE name = 'Randall Davis')"}
{"sample_id": 3604, "db_id": "authors", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.FullName = 'International Congress Series' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.Id) AS Div1, T1.Year FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id GROUP BY T1.YEAR HAVING Div1 != 0", "pred_sql": "SELECT AVG(paper_count) AS average_papers_per_year\nFROM (\n    SELECT COUNT(*) AS paper_count, strftime('%Y', year) AS publication_year\n    FROM paper\n    WHERE conferenceid = (SELECT id FROM conference WHERE fullname = 'World Computer Congress')\n    GROUP BY publication_year\n) AS yearly_paper_counts;"}
{"sample_id": 3620, "db_id": "authors", "gold_sql": "SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T1.Year) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'Information and Knowledge Engineering' AND T1.Year >= 2002 AND T1.Year <= 2010", "pred_sql": "SELECT AVG(paper_count) AS average_papers FROM (SELECT COUNT(*) AS paper_count FROM paper JOIN conference ON paper.conferenceid = conference.id WHERE conference.fullname = 'Information and Knowledge Engineering' AND paper.year BETWEEN '2002' AND '2010' GROUP BY paper.conferenceid) AS counts;"}
{"sample_id": 3638, "db_id": "authors", "gold_sql": "SELECT FullName FROM Conference ORDER BY LENGTH(FullName) DESC LIMIT 1", "pred_sql": "SELECT fullname FROM conference ORDER BY LENGTH(fullname) DESC LIMIT 1;"}
{"sample_id": 3588, "db_id": "authors", "gold_sql": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Title = 'Multiple paternity in a natural population of a salamander with long-term sperm storage'", "pred_sql": "SELECT journal.fullname FROM journal JOIN paper ON journal.id = paper.journalid WHERE paper.title = 'Multiple paternity in a natural population of a salamander with long-term sperm storage';"}
{"sample_id": 3623, "db_id": "authors", "gold_sql": "SELECT T1.FullName FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Title = 'Education, democracy and growth'", "pred_sql": "SELECT journal.fullname FROM paper JOIN journal ON paper.journalid = journal.id WHERE paper.title = 'Education, democracy and growth';"}
{"sample_id": 3579, "db_id": "authors", "gold_sql": "SELECT COUNT(T1.Id) AS PAPER, COUNT(DISTINCT T1.Year) AS YEARS FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE year != 0 AND T2.FullName = 'International Conference on Database Theory'", "pred_sql": "SELECT COUNT(p.id) AS paper_count, p.year FROM paper p JOIN conference c ON p.conferenceid = c.id WHERE c.fullname = 'International Conference on Database Theory' GROUP BY p.year;"}
{"sample_id": 3580, "db_id": "authors", "gold_sql": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Keyword = 'Sustainability'", "pred_sql": "SELECT journal.fullname FROM journal JOIN paper ON journal.id = paper.journalid WHERE paper.keyword LIKE '%Sustainability%';"}
{"sample_id": 3655, "db_id": "authors", "gold_sql": "SELECT Name FROM Author WHERE Id = 1722", "pred_sql": "SELECT name FROM author WHERE id = '1722';"}
{"sample_id": 3616, "db_id": "authors", "gold_sql": "SELECT T2.HomePage FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'Quality evaluation of long duration audiovisual content'", "pred_sql": "SELECT conference.homepage FROM paper JOIN conference ON paper.conferenceid = conference.id WHERE paper.title = 'Quality evaluation of long duration audiovisual content';"}
{"sample_id": 3642, "db_id": "authors", "gold_sql": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id GROUP BY T1.PaperId ORDER BY COUNT(T1.PaperId) DESC LIMIT 1", "pred_sql": "SELECT p.title FROM paper p JOIN paperauthor pa ON p.id = pa.paperid GROUP BY p.id ORDER BY COUNT(pa.authorid) DESC LIMIT 1;"}
{"sample_id": 3511, "db_id": "authors", "gold_sql": "SELECT COUNT(T2.Id) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Concepts in Magnetic Resonance Part A'", "pred_sql": "SELECT COUNT(*) FROM paper WHERE journalid = (SELECT id FROM journal WHERE fullname = 'Concepts in Magnetic Resonance Part A');"}
{"sample_id": 8941, "db_id": "human_resources", "gold_sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL) > 20000 AND T2.positiontitle = 'Trainee'", "pred_sql": "SELECT COUNT(*) AS employee_count FROM employee JOIN position ON employee.positionid = position.positionid WHERE position.positiontitle = 'Trainee' AND employee.salary > 20000;"}
{"sample_id": 8956, "db_id": "human_resources", "gold_sql": "SELECT COUNT(*) FROM employee WHERE performance = 'Poor' AND CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL) > 50000", "pred_sql": "SELECT COUNT(*) FROM employee WHERE performance = 'Poor' AND salary > 50000;"}
{"sample_id": 8953, "db_id": "human_resources", "gold_sql": "SELECT T2.address FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Manager' ORDER BY T1.salary DESC LIMIT 1", "pred_sql": "SELECT l.address FROM employee e JOIN position p ON e.positionid = p.positionid JOIN location l ON e.locationid = l.locationid WHERE p.positiontitle = 'Manager' ORDER BY e.salary DESC LIMIT 1;"}
{"sample_id": 8965, "db_id": "human_resources", "gold_sql": "SELECT T2.positiontitle FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.educationrequired = '2 year degree' AND T1.gender = 'F' GROUP BY T2.positiontitle ORDER BY COUNT(T2.positiontitle) DESC LIMIT 1", "pred_sql": "SELECT p.positiontitle, COUNT(e.ssn) AS female_count\nFROM employee e\nJOIN position p ON e.positionid = p.positionid\nWHERE e.gender = 'Female' AND p.educationrequired = 2\nGROUP BY p.positiontitle\nORDER BY female_count DESC\nLIMIT 1;"}
{"sample_id": 8948, "db_id": "human_resources", "gold_sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.locationcity = 'Miami'", "pred_sql": "SELECT COUNT(*) AS employee_count FROM employee e JOIN location l ON e.locationid = l.locationid WHERE l.locationcity = 'Miami';"}
{"sample_id": 8955, "db_id": "human_resources", "gold_sql": "SELECT 100 * (CAST(REPLACE(SUBSTR(T2.maxsalary, 4), ',', '') AS REAL) - CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) / CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL) AS per FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'Jose' AND T1.lastname = 'Rodriguez'", "pred_sql": "SELECT (maxsalary - salary) * 100.0 / maxsalary AS percentage_increase\nFROM employee e\nJOIN position p ON e.positionid = p.positionid\nWHERE e.firstname = 'Jose' AND e.lastname = 'Rodriguez' AND e.performance = 'Good';"}
{"sample_id": 8931, "db_id": "human_resources", "gold_sql": "SELECT COUNT(*) FROM employee AS T1 INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.state = 'NY' AND T1.performance = 'Good'", "pred_sql": "SELECT COUNT(*) AS good_performance_count FROM employee e JOIN location l ON e.locationid = l.locationid WHERE l.locationcity = 'New York' AND e.performance = 'Good';"}
{"sample_id": 8938, "db_id": "human_resources", "gold_sql": "SELECT T1.firstname, T1.lastname FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE (T1.lastname = 'Adams' AND T1.firstname = 'Sandy') OR (T1.lastname = 'Rodriguez' AND T1.firstname = 'Jose') ORDER BY T2.educationrequired DESC LIMIT 1", "pred_sql": "SELECT e1.firstname || ' ' || e1.lastname AS employee_name, p1.educationrequired FROM employee e1 JOIN position p1 ON e1.positionid = p1.positionid WHERE e1.firstname = 'Jose' AND e1.lastname = 'Rodriguez' UNION SELECT e2.firstname || ' ' || e2.lastname AS employee_name, p2.educationrequired FROM employee e2 JOIN position p2 ON e2.positionid = p2.positionid WHERE e2.firstname = 'Sandy' AND e2.lastname = 'Adams';"}
{"sample_id": 8950, "db_id": "human_resources", "gold_sql": "SELECT T1.firstname, T1.lastname, T1.ssn FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.locationcity = 'New York City' AND T1.performance = 'Good'", "pred_sql": "SELECT e.ssn FROM employee e JOIN location l ON e.locationid = l.locationid WHERE l.locationcity = 'New York City' AND e.performance = 'Good';"}
{"sample_id": 8973, "db_id": "human_resources", "gold_sql": "SELECT maxsalary FROM position WHERE positiontitle = 'Trainee'", "pred_sql": "SELECT MAX(maxsalary) FROM position WHERE positiontitle = 'Trainer';"}
{"sample_id": 8939, "db_id": "human_resources", "gold_sql": "SELECT T2.zipcode FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.gender = 'M' AND T1.performance = 'Good'", "pred_sql": "SELECT DISTINCT l.zipcode \nFROM location l \nJOIN employee e ON l.locationid = e.locationid \nWHERE e.gender = 'Male' AND e.performance = 'Good';"}
{"sample_id": 9626, "db_id": "toxicology", "gold_sql": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND T.label = '+'", "pred_sql": "SELECT COUNT(*) AS carcinogenic_count FROM molecule WHERE label = '+' LIMIT 100;"}
{"sample_id": 9671, "db_id": "toxicology", "gold_sql": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19'", "pred_sql": "SELECT element FROM atom WHERE molecule_id = 'TR144';"}
{"sample_id": 9732, "db_id": "toxicology", "gold_sql": "SELECT COUNT(DISTINCT T2.molecule_id), SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '='", "pred_sql": "SELECT COUNT(DISTINCT m.molecule_id) AS total_double_bond_molecules, SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) AS carcinogenic_count\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE b.bond_type = '=';"}
{"sample_id": 9689, "db_id": "toxicology", "gold_sql": "SELECT T2.molecule_id, T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR050'", "pred_sql": "SELECT bond.bond_type FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR050';"}
{"sample_id": 9640, "db_id": "toxicology", "gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM molecule WHERE label = '+')) AS percentage_non_fluorine_carcinogenic\nFROM molecule m\nWHERE m.label = '+'\nAND m.molecule_id NOT IN (\n    SELECT DISTINCT a.molecule_id\n    FROM atom a\n    WHERE a.element = 'f'\n);"}
{"sample_id": 9672, "db_id": "toxicology", "gold_sql": "SELECT T.molecule_id FROM ( SELECT T3.molecule_id, COUNT(T1.bond_type) FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T1.bond_type = '=' GROUP BY T3.molecule_id ORDER BY COUNT(T1.bond_type) DESC LIMIT 1 ) AS T", "pred_sql": "SELECT molecule.molecule_id, COUNT(bond.bond_id) AS double_bond_count\nFROM molecule\nJOIN bond ON molecule.molecule_id = bond.molecule_id\nWHERE molecule.label = '+' AND bond.bond_type = '='\nGROUP BY molecule.molecule_id\nORDER BY double_bond_count DESC\nLIMIT 1;"}
{"sample_id": 9726, "db_id": "toxicology", "gold_sql": "SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'", "pred_sql": "SELECT m.molecule_id, m.label, a.element \nFROM molecule m \nJOIN atom a ON m.molecule_id = a.molecule_id \nWHERE m.label = '+';"}
{"sample_id": 9657, "db_id": "toxicology", "gold_sql": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'br'", "pred_sql": "SELECT COUNT(DISTINCT m.molecule_id) AS carcinogenic_bromine_molecules\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE m.label = '+' AND a.element = 'br';"}
{"sample_id": 9634, "db_id": "toxicology", "gold_sql": "SELECT T.element FROM (SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) ASC LIMIT 1) t", "pred_sql": "SELECT element, COUNT(*) as element_count \nFROM atom \nJOIN molecule ON atom.molecule_id = molecule.molecule_id \nWHERE molecule.label = '-' \nGROUP BY element \nORDER BY element_count ASC \nLIMIT 1;"}
{"sample_id": 9629, "db_id": "toxicology", "gold_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='", "pred_sql": "SELECT DISTINCT a.element \nFROM bond b \nJOIN connected c ON b.bond_id = c.bond_id \nJOIN atom a ON c.atom_id = a.atom_id \nWHERE b.bond_type = '=';"}
{"sample_id": 9649, "db_id": "toxicology", "gold_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3) FROM molecule t", "pred_sql": "SELECT ROUND((SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) * 100.0) / COUNT(*), 3) AS carcinogenic_percentage FROM molecule;"}
{"sample_id": 9647, "db_id": "toxicology", "gold_sql": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '=' ORDER BY T.molecule_id LIMIT 5", "pred_sql": "SELECT DISTINCT molecule.molecule_id FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '=' ORDER BY molecule.molecule_id ASC LIMIT 5;"}
{"sample_id": 9668, "db_id": "toxicology", "gold_sql": "SELECT T1.bond_type, T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T2.atom_id, 7, 2) = '45'", "pred_sql": "SELECT bond.bond_type, bond.bond_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = '45' OR connected.atom_id2 = '45';"}
{"sample_id": 9727, "db_id": "toxicology", "gold_sql": "SELECT T1.bond_id, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'", "pred_sql": "SELECT bond.bond_id, atom1.atom_id AS atom1_id, atom2.atom_id AS atom2_id \nFROM bond \nJOIN connected ON bond.bond_id = connected.bond_id \nJOIN atom AS atom1 ON connected.atom_id = atom1.atom_id \nJOIN atom AS atom2 ON connected.atom_id2 = atom2.atom_id \nWHERE bond.bond_type = '-'"}
{"sample_id": 9753, "db_id": "toxicology", "gold_sql": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'", "pred_sql": "SELECT COUNT(*) AS carcinogenic_count FROM molecule WHERE label = '+';"}
{"sample_id": 9687, "db_id": "toxicology", "gold_sql": "SELECT T.molecule_id FROM molecule AS T WHERE T.label = '-'", "pred_sql": "SELECT molecule_id FROM molecule WHERE label = '-';"}
{"sample_id": 9655, "db_id": "toxicology", "gold_sql": "SELECT DISTINCT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR006' ORDER BY T2.bond_id LIMIT 2", "pred_sql": "SELECT bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id ASC LIMIT 2;"}
{"sample_id": 9658, "db_id": "toxicology", "gold_sql": "SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR001_6_9'", "pred_sql": "SELECT bond.bond_type, connected.atom_id, connected.atom_id2 \nFROM bond \nJOIN connected ON bond.bond_id = connected.bond_id \nWHERE bond.bond_id = 'TR001_6_9';"}
{"sample_id": 9761, "db_id": "toxicology", "gold_sql": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.label = '+'", "pred_sql": "SELECT atom.atom_id FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'o';"}
{"sample_id": 9627, "db_id": "toxicology", "gold_sql": "SELECT T.molecule_id FROM atom AS T WHERE T.element = 'c'", "pred_sql": "SELECT DISTINCT molecule.molecule_id FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c';"}
{"sample_id": 9654, "db_id": "toxicology", "gold_sql": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3", "pred_sql": "SELECT DISTINCT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = '-' AND m.label = '-' ORDER BY m.molecule_id ASC LIMIT 3;"}
{"sample_id": 9692, "db_id": "toxicology", "gold_sql": "SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca' GROUP BY T2.label ORDER BY COUNT(T2.label) DESC LIMIT 1", "pred_sql": "SELECT label, COUNT(*) as count FROM molecule WHERE molecule_id IN (SELECT DISTINCT molecule_id FROM atom WHERE element = 'ca') GROUP BY label;"}
{"sample_id": 9674, "db_id": "toxicology", "gold_sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb'", "pred_sql": "SELECT a2.atom_id, a2.element \nFROM atom a1 \nJOIN connected c ON a1.atom_id = c.atom_id \nJOIN atom a2 ON c.atom_id2 = a2.atom_id \nWHERE a1.element = 'pb';"}
{"sample_id": 9652, "db_id": "toxicology", "gold_sql": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'", "pred_sql": "SELECT atom.element, molecule.label FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR060';"}
{"sample_id": 9662, "db_id": "toxicology", "gold_sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'", "pred_sql": "SELECT element FROM atom WHERE molecule_id = 'TR004';"}
{"sample_id": 9676, "db_id": "toxicology", "gold_sql": "SELECT CAST((SELECT COUNT(T1.atom_id) FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id GROUP BY T2.bond_type ORDER BY COUNT(T2.bond_id) DESC LIMIT 1 ) AS REAL) * 100 / ( SELECT COUNT(atom_id) FROM connected )", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM bond)) AS percentage FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id GROUP BY a1.element, a2.element ORDER BY COUNT(*) DESC LIMIT 1;"}
{"sample_id": 9746, "db_id": "toxicology", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond t", "pred_sql": "SELECT (COUNT(CASE WHEN bond_type = '-' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_single_bond FROM bond;"}
{"sample_id": 9722, "db_id": "toxicology", "gold_sql": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id = 'TR186'", "pred_sql": "SELECT atom.atom_id, atom.element FROM atom WHERE atom.molecule_id = 'TR186';"}
{"sample_id": 9715, "db_id": "toxicology", "gold_sql": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'", "pred_sql": "SELECT COUNT(atom.atom_id) AS atom_count \nFROM atom \nJOIN molecule ON atom.molecule_id = molecule.molecule_id \nWHERE molecule.label = '+';"}
{"sample_id": 2664, "db_id": "regional_sales", "gold_sql": "SELECT SUM(CASE WHEN T2.\"Customer Names\" = 'Apollo Ltd' THEN 1 ELSE 0 END), SUM(CASE WHEN T2.\"Customer Names\" = 'Pacific Ltd' THEN 1 ELSE 0 END) FROM \"Sales Orders\" AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID", "pred_sql": "SELECT c.\"customer names\", COUNT(so.ordernumber) AS total_orders\nFROM customers c\nJOIN sales orders so ON c.customerid = so._customerid\nWHERE c.\"customer names\" IN ('Apollo Ltd', 'Pacific Ltd')\nGROUP BY c.\"customer names\";"}
{"sample_id": 2707, "db_id": "regional_sales", "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T3.\"Product Name\" = 'Cocktail Glasses' AND T2.\"Sales Channel\" = 'Online' THEN T1.\"Customer Names\" END AS T FROM Customers T1 INNER JOIN \"Sales Orders\" T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products T3 ON T3.ProductID = T2._ProductID ) WHERE T IS NOT NULL", "pred_sql": "SELECT c.\"customer names\" \nFROM customers c \nJOIN sales orders so ON c.customerid = so._customerid \nJOIN products p ON so._productid = p.productid \nWHERE p.\"product name\" = 'Cocktail Glasses' \nAND so.\"sales channel\" = 'Online';"}
{"sample_id": 2633, "db_id": "regional_sales", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.County = 'Orange County' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderDate LIKE '%/%/18'", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM sales orders)) AS percentage_orders FROM sales orders JOIN store locations ON sales orders._storeid = store locations.storeid WHERE store locations.county = 'Orange County' AND strftime('%Y', sales orders.orderdate) = '2018';"}
{"sample_id": 2599, "db_id": "regional_sales", "gold_sql": "SELECT DISTINCT \"Customer Names\", \"Product Name\" FROM ( SELECT T1.\"Customer Names\", T3.\"Product Name\" , REPLACE(T2.\"Unit Price\", ',', '') - REPLACE(T2.\"Unit Cost\", ',', '') AS T FROM Customers T1 INNER JOIN \"Sales Orders\" T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products T3 ON T3.ProductID = T2._ProductID ) WHERE T > 3800", "pred_sql": "SELECT c.\"customer names\", p.\"product name\" \nFROM sales orders so \nJOIN customers c ON so._customerid = c.customerid \nJOIN products p ON so._productid = p.productid \nWHERE (CAST(so.unit_price AS REAL) - CAST(so.unit_cost AS REAL)) * CAST(so.\"order quantity\" AS REAL) > 3800;"}
{"sample_id": 2712, "db_id": "regional_sales", "gold_sql": "SELECT T1.\"Customer Names\" FROM Customers AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._CustomerID = T1.CustomerID WHERE T2.OrderDate LIKE '%/%/18' OR T2.OrderDate LIKE '%/%/19' OR T2.OrderDate LIKE '%/%/20' ORDER BY T2.\"Order Quantity\" DESC LIMIT 1", "pred_sql": "SELECT c.\"customer names\" \nFROM customers c \nJOIN sales orders so ON c.customerid = so._customerid \nWHERE so.orderdate BETWEEN '01/01/2018' AND '12/31/2020' \nGROUP BY c.customerid \nORDER BY SUM(so.\"order quantity\") DESC \nLIMIT 1;"}
{"sample_id": 2629, "db_id": "regional_sales", "gold_sql": "SELECT AVG(REPLACE(T1.\"Unit Price\", ',', '')) FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.\"Product Name\" = 'Cookware'", "pred_sql": "SELECT AVG(unit price) AS average_unit_price FROM sales orders JOIN products ON sales orders._productid = products.productid WHERE products.product name = 'Cookware';"}
{"sample_id": 2592, "db_id": "regional_sales", "gold_sql": "SELECT COUNT(DISTINCT T) FROM ( SELECT CASE  WHEN \"Sales Channel\" = 'In-Store' AND WarehouseCode = 'WARE-NMK1003' AND \"Discount Applied\" = '0.4' THEN OrderNumber ELSE NULL END AS T FROM \"Sales Orders\" ) WHERE T IS NOT NULL", "pred_sql": "SELECT COUNT(DISTINCT _productid) AS product_count \nFROM sales_orders \nWHERE `discount applied` = '0.4' \nAND `sales channel` = 'In-Store' \nAND warehousecode = 'WARE-NMK1003';"}
{"sample_id": 2614, "db_id": "regional_sales", "gold_sql": "SELECT SUM(REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '')) / COUNT(T1.OrderNumber) FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.\"Product Name\" = 'Phones' AND T1.\"Sales Channel\" = 'Distributor'", "pred_sql": "SELECT AVG(unit_price - unit_cost) AS average_net_profit \nFROM sales_orders \nJOIN products ON sales_orders._productid = products.productid \nWHERE products.product_name LIKE '%phone%' \nAND sales_orders.sales_channel = 'Distributor';"}
{"sample_id": 2736, "db_id": "regional_sales", "gold_sql": "SELECT SUM(CASE WHEN T2.\"City Name\" = 'Chandler' AND T1.OrderDate LIKE '%/%/20' THEN 1 ELSE 0 END) FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID", "pred_sql": "SELECT COUNT(*) AS total_sales_orders FROM sales_orders SO JOIN store_locations SL ON SO._storeid = SL.storeid WHERE SL.city_name = 'Chandler' AND strftime('%Y', SO.orderdate) = '2020';"}
{"sample_id": 2589, "db_id": "regional_sales", "gold_sql": "SELECT SUM(CASE WHEN T2.\"Product Name\" = 'Home Fragrances' THEN 1 ELSE 0 END) * 100 / COUNT(T1.OrderNumber)  FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.ShipDate LIKE '7/%/18'", "pred_sql": "SELECT (COUNT(CASE WHEN p.product_name LIKE '%home fragrance%' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_home_fragrances\nFROM sales_orders so\nJOIN products p ON so._productid = p.productid\nWHERE strftime('%Y-%m', so.shipdate) = '2018-07';"}
{"sample_id": 2700, "db_id": "regional_sales", "gold_sql": "SELECT SUM(CASE WHEN Region = 'Midwest' THEN 1 ELSE 0 END) FROM \"Sales Team\"", "pred_sql": "SELECT COUNT(*) AS number_of_sales_teams FROM sales_team WHERE region = 'Midwest';"}
{"sample_id": 2585, "db_id": "regional_sales", "gold_sql": "SELECT T FROM ( SELECT CASE  WHEN T2.\"Sales Channel\" = 'Online' THEN T1.\"Customer Names\" ELSE NULL END AS T FROM Customers T1 INNER JOIN \"Sales Orders\" T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL", "pred_sql": "SELECT DISTINCT c.\"customer names\" FROM customers c JOIN sales orders so ON c.customerid = so._customerid WHERE so.\"sales channel\" = 'Online';"}
{"sample_id": 2673, "db_id": "regional_sales", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.WarehouseCode = 'WARE-NMK1003' THEN 1 ELSE 0 END) AS REAL) / 12 , CAST(SUM(CASE WHEN T2.WarehouseCode = 'WARE-NMK1003' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.OrderNumber), COUNT(CASE WHEN T1.\"Product Name\" = 'Floor Lamps' AND T2.WarehouseCode = 'WARE-NMK1003' THEN T2.\"Order Quantity\" ELSE NULL END) FROM Products AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._ProductID = T1.ProductID WHERE T2.OrderDate LIKE '%/%/19'", "pred_sql": "SELECT strftime('%Y-%m', orderdate) AS month, COUNT(ordernumber) AS total_orders, AVG(order_quantity) AS average_order_quantity, SUM(CASE WHEN products.product_name = 'floor lamp' THEN 1 ELSE 0 END) AS floor_lamp_orders\nFROM sales_orders\nJOIN products ON sales_orders._productid = products.productid\nWHERE warehousecode = 'WARE-NMK1003' AND strftime('%Y', orderdate) = '2019'\nGROUP BY month;"}
{"sample_id": 2716, "db_id": "regional_sales", "gold_sql": "SELECT SUM(CASE WHEN Region = 'Midwest' THEN 1 ELSE 0 END) FROM \"Sales Team\"", "pred_sql": "SELECT COUNT(*) AS number_of_sales_teams FROM sales_team WHERE region = 'Midwest';"}
{"sample_id": 2690, "db_id": "regional_sales", "gold_sql": "SELECT DISTINCT CASE WHEN MAX(T2.Population) THEN T2.Type END FROM Regions AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StateCode = T1.StateCode", "pred_sql": "SELECT type, COUNT(*) as popularity FROM store locations WHERE statecode IN (SELECT statecode FROM regions WHERE region = 'South') GROUP BY type ORDER BY popularity DESC LIMIT 1;"}
{"sample_id": 2590, "db_id": "regional_sales", "gold_sql": "SELECT DISTINCT CustomerID, \"Customer Names\" FROM Customers WHERE \"Customer Names\" LIKE 'W%' ORDER BY \"Customer Names\" DESC", "pred_sql": "SELECT customerid, \"customer names\" FROM customers WHERE \"customer names\" LIKE 'W%';"}
{"sample_id": 2670, "db_id": "regional_sales", "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T3.\"Time Zone\" = 'Pacific/Honolulu' AND T2.\"Sales Channel\" = 'Wholesale' THEN T1.\"Product Name\" ELSE NULL END AS T FROM Products T1 INNER JOIN \"Sales Orders\" T2 ON T2._ProductID = T1.ProductID INNER JOIN \"Store Locations\" T3 ON T3.StoreID = T2._StoreID ) WHERE T IS NOT NULL", "pred_sql": "SELECT p.product_name \nFROM products p \nJOIN sales_orders so ON p.productid = so._productid \nJOIN store_locations sl ON so._storeid = sl.storeid \nWHERE so.sales_channel = 'Wholesale' \nAND sl.time_zone = 'Pacific/Honolulu';"}
{"sample_id": 2606, "db_id": "regional_sales", "gold_sql": "SELECT DISTINCT T FROM ( SELECT IIF(DeliveryDate = '6/13/18', OrderNumber, NULL) AS T FROM \"Sales Orders\" ) WHERE T IS NOT NULL", "pred_sql": "SELECT so.ordernumber FROM sales orders so WHERE so.deliverydate = '6/13/2018';"}
{"sample_id": 2627, "db_id": "regional_sales", "gold_sql": "SELECT T1.OrderNumber, T2.\"Product Name\" FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE REPLACE(T1.\"Unit Price\", ',', '') = ( SELECT REPLACE(T1.\"Unit Price\", ',', '') FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID ORDER BY REPLACE(T1.\"Unit Price\", ',', '') LIMIT 1 )", "pred_sql": "SELECT so.ordernumber, p.productname FROM sales_orders so JOIN products p ON so._productid = p.productid ORDER BY so.unitprice ASC LIMIT 1;"}
{"sample_id": 2587, "db_id": "regional_sales", "gold_sql": "SELECT T2.\"Sales Team\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderDate LIKE '%/%/20' GROUP BY T2.\"Sales Team\" ORDER BY SUM(REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '')) DESC LIMIT 1", "pred_sql": "SELECT st.sales team \nFROM sales orders so \nJOIN sales team st ON so._salesteamid = st.salesteamid \nWHERE strftime('%Y', so.orderdate) = '2020' \nGROUP BY st.sales team \nORDER BY SUM((so.unit price - so.unit cost) * so.order quantity) DESC \nLIMIT 1;"}
{"sample_id": 2693, "db_id": "regional_sales", "gold_sql": "SELECT SUM(CASE WHEN T1.\"Sales Channel\" = 'Online' AND T2.\"Customer Names\" = 'Ole Group' AND T1.OrderDate LIKE '5/%/19' THEN 1 ELSE 0 END) FROM \"Sales Orders\" AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID", "pred_sql": "SELECT COUNT(*) AS online_purchases_count \nFROM sales_orders \nJOIN customers ON sales_orders._customerid = customers.customerid \nWHERE customers.customer_names = 'Ole Group' \nAND sales_orders.sales_channel = 'Online' \nAND strftime('%Y-%m', sales_orders.orderdate) = '2019-05';"}
{"sample_id": 2576, "db_id": "regional_sales", "gold_sql": "SELECT T FROM ( SELECT IIF(\"Customer Names\" LIKE '%Group%', \"Customer Names\", NULL) AS T FROM Customers ) WHERE T IS NOT NULL", "pred_sql": "SELECT * FROM customers WHERE \"customer names\" LIKE '%Group%';"}
{"sample_id": 2719, "db_id": "regional_sales", "gold_sql": "SELECT \"Discount Applied\" FROM \"Sales Orders\" WHERE REPLACE(\"Unit Price\", ',', '') = ( SELECT REPLACE(\"Unit Price\", ',', '') FROM \"Sales Orders\" ORDER BY REPLACE(\"Unit Price\", ',', '') DESC LIMIT 1 ) ORDER BY REPLACE(\"Unit Price\", ',', '') DESC LIMIT 1", "pred_sql": "SELECT \"discount applied\" FROM sales orders WHERE \"unit price\" = (SELECT MAX(\"unit price\") FROM sales orders);"}
{"sample_id": 2666, "db_id": "regional_sales", "gold_sql": "SELECT DISTINCT T1.\"Customer Names\", T4.\"Product Name\" FROM Customers AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN \"Sales Team\" AS T3 ON T3.SalesTeamID = T2._SalesTeamID INNER JOIN Products AS T4 ON T4.ProductID = T2._ProductID WHERE T3.\"Sales Team\" = 'Anthony Torres' AND T2.\"Sales Channel\" = 'Distributor'", "pred_sql": "SELECT c.\"customer names\", p.\"product name\" \nFROM sales orders so \nJOIN customers c ON so._customerid = c.customerid \nJOIN products p ON so._productid = p.productid \nWHERE c.\"customer names\" = 'Anthony Torres' \nAND so.\"sales channel\" = 'Distributor';"}
{"sample_id": 2586, "db_id": "regional_sales", "gold_sql": "SELECT AVG(REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', ''))  FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.\"Product Name\" = 'Bakeware'", "pred_sql": "SELECT AVG(unit_price - unit_cost) AS average_net_profit \nFROM sales_orders \nJOIN products ON sales_orders._productid = products.productid \nWHERE products.product_name = 'bakeware';"}
{"sample_id": 2728, "db_id": "regional_sales", "gold_sql": "SELECT COUNT(T1.OrderNumber), T2.\"Sales Team\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.ShipDate LIKE '%/%/20' GROUP BY T2.\"Sales Team\" ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1", "pred_sql": "SELECT st.sales team, COUNT(so.ordernumber) AS total_orders\nFROM sales orders so\nJOIN sales team st ON so._salesteamid = st.salesteamid\nWHERE strftime('%Y', so.shipdate) = '2020'\nGROUP BY st.sales team\nORDER BY total_orders DESC\nLIMIT 1;"}
{"sample_id": 2733, "db_id": "regional_sales", "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.OrderNumber = 'SO - 0005951' THEN T1.\"Product Name\" ELSE NULL END AS T FROM Products T1 INNER JOIN \"Sales Orders\" T2 ON T2._ProductID = T1.ProductID ) WHERE T IS NOT NULL", "pred_sql": "SELECT products.product_name FROM sales_orders JOIN products ON sales_orders._productid = products.productid WHERE sales_orders.ordernumber = 'SO - 0005951';"}
{"sample_id": 2584, "db_id": "regional_sales", "gold_sql": "SELECT DISTINCT T1.\"Product Name\", T3.\"Sales Team\" FROM Products AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._ProductID = T1.ProductID INNER JOIN \"Sales Team\" AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T2.WarehouseCode = 'WARE-NMK1003'", "pred_sql": "SELECT so.ordernumber, p.product_name, st.sales_team \nFROM sales_orders so \nJOIN products p ON so._productid = p.productid \nJOIN sales_team st ON so._salesteamid = st.salesteamid \nWHERE so.warehousecode = 'WARE-NMK1003';"}
{"sample_id": 2689, "db_id": "regional_sales", "gold_sql": "SELECT COUNT(DISTINCT T2.\"Time Zone\") FROM Regions AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StateCode = T1.StateCode WHERE T1.Region = 'Northeast'", "pred_sql": "SELECT COUNT(DISTINCT time_zone) AS different_time_zones FROM store locations WHERE statecode IN (SELECT statecode FROM regions WHERE region = 'Northeast');"}
{"sample_id": 2702, "db_id": "regional_sales", "gold_sql": "SELECT COUNT(T1.\"Sales Channel\") FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.Region = 'Midwest'", "pred_sql": "SELECT COUNT(DISTINCT `sales channel`) AS sales_channel_count FROM `sales orders` JOIN `sales team` ON `sales orders`._salesteamid = `sales team`.salesteamid WHERE `sales team`.region = 'Midwest';"}
{"sample_id": 2636, "db_id": "regional_sales", "gold_sql": "SELECT DISTINCT T FROM ( SELECT IIF(OrderNumber = 'SO - 000103', \"Unit Cost\", NULL) AS T FROM \"Sales Orders\" ) WHERE T IS NOT NULL", "pred_sql": "SELECT unit_cost FROM sales_orders WHERE ordernumber = 'SO - 000103';"}
{"sample_id": 2694, "db_id": "regional_sales", "gold_sql": "SELECT SUM(CASE WHEN T1.\"Order Quantity\" = 1 AND T1.\"Sales Channel\" = 'Distributor' AND T2.County = 'Washtenaw County' THEN 1 ELSE 0 END) FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID", "pred_sql": "SELECT COUNT(DISTINCT sl.storeid) AS store_count \nFROM \"store locations\" sl \nJOIN \"sales orders\" so ON sl.storeid = so._storeid \nWHERE sl.county = 'Washtenaw' \nAND so.sales channel = 'Distributor' \nAND so.order quantity < (SELECT AVG(order quantity) FROM \"sales orders\")"}
