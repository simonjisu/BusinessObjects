{"sample_id": 10, "db_id": "department_management", "final": {"question": "How many acting statuses are there?", "sql": "SELECT count(DISTINCT temporary_acting) FROM management", "source_tables": ["management"]}}
{"sample_id": 12, "db_id": "department_management", "final": {"question": "What are the distinct ages of the heads who are acting?", "sql": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'", "source_tables": ["management", "head"]}}
{"sample_id": 3, "db_id": "department_management", "final": {"question": "What are the maximum and minimum budget of the departments?", "sql": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department", "source_tables": ["department"]}}
{"sample_id": 6, "db_id": "department_management", "final": {"question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?", "sql": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'", "source_tables": ["head", "management", "department"]}}
{"sample_id": 37, "db_id": "farm", "final": {"question": "What are the official names of cities that have hosted more than one competition?", "sql": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1", "source_tables": ["city", "farm_competition"]}}
{"sample_id": 27, "db_id": "farm", "final": {"question": "Return the maximum and minimum number of cows across all farms.", "sql": "SELECT max(Cows) ,  min(Cows) FROM farm", "source_tables": ["farm"]}}
{"sample_id": 48, "db_id": "farm", "final": {"question": "List the official names of cities that have not held any competition.", "sql": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)", "source_tables": ["city", "farm_competition"]}}
{"sample_id": 36, "db_id": "farm", "final": {"question": "Show the official names of the cities that have hosted more than one competition.", "sql": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1", "source_tables": ["city", "farm_competition"]}}
{"sample_id": 55, "db_id": "farm", "final": {"question": "What are the census rankings of cities that do not have the status \"Village\"?", "sql": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"", "source_tables": ["city"]}}
{"sample_id": 45, "db_id": "farm", "final": {"question": "Return the different statuses of cities, ascending by frequency.", "sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC", "source_tables": ["city"]}}
{"sample_id": 39, "db_id": "farm", "final": {"question": "What is the status of the city that has hosted the most competitions?", "sql": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["city", "farm_competition"]}}
{"sample_id": 17, "db_id": "farm", "final": {"question": "Count the number of farms.", "sql": "SELECT count(*) FROM farm", "source_tables": ["farm"]}}
{"sample_id": 61, "db_id": "student_assessment", "final": {"question": "What are the first and last names of all the candidates?", "sql": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id", "source_tables": ["people", "candidates"]}}
{"sample_id": 57, "db_id": "student_assessment", "final": {"question": "What is the name of the course with the most registered students?", "sql": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["courses", "student_course_registrations"]}}
{"sample_id": 59, "db_id": "student_assessment", "final": {"question": "What are the ids of the students who registered for some courses but had the least number of courses for all students?", "sql": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1", "source_tables": ["student_course_registrations"]}}
{"sample_id": 95, "db_id": "student_assessment", "final": {"question": "List the names of courses in alphabetical order?", "sql": "SELECT course_name FROM courses ORDER BY course_name", "source_tables": ["courses"]}}
{"sample_id": 91, "db_id": "student_assessment", "final": {"question": "Find distinct cities of addresses of people?", "sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id", "source_tables": ["people_addresses", "addresses"]}}
{"sample_id": 72, "db_id": "student_assessment", "final": {"question": "How many courses does the student with id 171 actually attend?", "sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171", "source_tables": ["courses", "student_course_attendance"]}}
{"sample_id": 69, "db_id": "student_assessment", "final": {"question": "How many students attend course English?", "sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"", "source_tables": ["courses", "student_course_attendance"]}}
{"sample_id": 90, "db_id": "student_assessment", "final": {"question": "What are the ids of the students who registered for course 301 most recently?", "sql": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1", "source_tables": ["student_course_attendance"]}}
{"sample_id": 102, "db_id": "student_assessment", "final": {"question": "What are the ids of the courses that are registered or attended by the student whose id is 121?", "sql": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121", "source_tables": ["student_course_attendance", "student_course_registrations"]}}
{"sample_id": 63, "db_id": "student_assessment", "final": {"question": "What are the  ids of every student who has never attended a course?", "sql": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)", "source_tables": ["students", "student_course_attendance"]}}
{"sample_id": 99, "db_id": "student_assessment", "final": {"question": "What are the id of students who registered courses or attended courses?", "sql": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance", "source_tables": ["student_course_attendance", "student_course_registrations"]}}
{"sample_id": 62, "db_id": "student_assessment", "final": {"question": "List the id of students who never attends courses?", "sql": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)", "source_tables": ["students", "student_course_attendance"]}}
{"sample_id": 111, "db_id": "bike_1", "final": {"question": "What are the names of stations that have latitude lower than 37.5?", "sql": "SELECT name FROM station WHERE lat  <  37.5", "source_tables": ["station"]}}
{"sample_id": 186, "db_id": "bike_1", "final": {"question": "What are the dates that have the 5 highest cloud cover rates and what are the rates?", "sql": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5", "source_tables": ["weather"]}}
{"sample_id": 155, "db_id": "bike_1", "final": {"question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.", "sql": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60", "source_tables": ["trip", "weather"]}}
{"sample_id": 173, "db_id": "bike_1", "final": {"question": "What are the name, latitude, and city of the station with the lowest latitude?", "sql": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1", "source_tables": ["station"]}}
{"sample_id": 143, "db_id": "bike_1", "final": {"question": "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?", "sql": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"", "source_tables": ["station", "status"]}}
{"sample_id": 194, "db_id": "bike_1", "final": {"question": "What are all the different start station names for a trip that lasted less than 100?", "sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100", "source_tables": ["trip"]}}
{"sample_id": 152, "db_id": "bike_1", "final": {"question": "What is the mean longitude for all stations that have never had more than 10 bikes available?", "sql": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)", "source_tables": ["station", "status"]}}
{"sample_id": 145, "db_id": "bike_1", "final": {"question": "What is the 3 most common cloud cover rates in the region of zip code 94107?", "sql": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3", "source_tables": ["weather"]}}
{"sample_id": 196, "db_id": "bike_1", "final": {"question": "What are all the different zip codes that have a maximum dew point that was always below 70?", "sql": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70", "source_tables": ["weather"]}}
{"sample_id": 170, "db_id": "bike_1", "final": {"question": "What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?", "sql": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7", "source_tables": ["station", "status"]}}
{"sample_id": 131, "db_id": "bike_1", "final": {"question": "Return the unique name for stations that have ever had 7 bikes available.", "sql": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7", "source_tables": ["station", "status"]}}
{"sample_id": 156, "db_id": "bike_1", "final": {"question": "For each zip code, find the ids of all trips that have a higher average mean temperature above 60?", "sql": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60", "source_tables": ["trip", "weather"]}}
{"sample_id": 212, "db_id": "bike_1", "final": {"question": "What is the average latitude and longitude of all starting stations for the trips?", "sql": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id", "source_tables": ["trip", "station"]}}
{"sample_id": 142, "db_id": "bike_1", "final": {"question": "What are the ids of the stations in San Francisco that normally have more than 10 bikes available?", "sql": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10", "source_tables": ["station", "status"]}}
{"sample_id": 120, "db_id": "bike_1", "final": {"question": "What is the id of the shortest trip?", "sql": "SELECT id FROM trip ORDER BY duration LIMIT 1", "source_tables": ["trip"]}}
{"sample_id": 180, "db_id": "bike_1", "final": {"question": "What are the ids and names of all start stations that were the beginning of at least 200 trips?", "sql": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200", "source_tables": ["trip"]}}
{"sample_id": 181, "db_id": "bike_1", "final": {"question": "Find the zip code in which the average mean visibility is lower than 10.", "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10", "source_tables": ["weather"]}}
{"sample_id": 115, "db_id": "bike_1", "final": {"question": "Give me the start station and end station for the trips with the three oldest id.", "sql": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3", "source_tables": ["trip"]}}
{"sample_id": 136, "db_id": "bike_1", "final": {"question": "What is the id of the bike that traveled the most in 94002?", "sql": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["trip"]}}
{"sample_id": 149, "db_id": "bike_1", "final": {"question": "What is the average bike availability in stations that are not located in Palo Alto?", "sql": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")", "source_tables": ["station", "status"]}}
{"sample_id": 113, "db_id": "bike_1", "final": {"question": "For each city, return the highest latitude among its stations.", "sql": "SELECT city ,  max(lat) FROM station GROUP BY city", "source_tables": ["station"]}}
{"sample_id": 141, "db_id": "bike_1", "final": {"question": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.", "sql": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10", "source_tables": ["station", "status"]}}
{"sample_id": 229, "db_id": "book_2", "final": {"question": "List the titles of books that are not published.", "sql": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)", "source_tables": ["publication", "book"]}}
{"sample_id": 223, "db_id": "book_2", "final": {"question": "Show writers who have published a book with price more than 4000000.", "sql": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000", "source_tables": ["publication", "book"]}}
{"sample_id": 216, "db_id": "book_2", "final": {"question": "What are the titles of the books whose writer is not \"Elaine Lee\"?", "sql": "SELECT Title FROM book WHERE Writer != \"Elaine Lee\"", "source_tables": ["book"]}}
{"sample_id": 218, "db_id": "book_2", "final": {"question": "What are the dates of publications in descending order of price?", "sql": "SELECT Publication_Date FROM publication ORDER BY Price DESC", "source_tables": ["publication"]}}
{"sample_id": 224, "db_id": "book_2", "final": {"question": "Show the titles of books in descending order of publication price.", "sql": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC", "source_tables": ["publication", "book"]}}
{"sample_id": 271, "db_id": "musical", "final": {"question": "Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?", "sql": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"", "source_tables": ["musical"]}}
{"sample_id": 259, "db_id": "musical", "final": {"question": "What are the names of musicals who have at 3 or more actors?", "sql": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3", "source_tables": ["musical", "actor"]}}
{"sample_id": 252, "db_id": "musical", "final": {"question": "Show names of actors that have appeared in musical with name \"The Phantom of the Opera\".", "sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"", "source_tables": ["musical", "actor"]}}
{"sample_id": 269, "db_id": "musical", "final": {"question": "What are the names of musicals who have no actors?", "sql": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)", "source_tables": ["musical", "actor"]}}
{"sample_id": 253, "db_id": "musical", "final": {"question": "What are the names of actors who have been in the musical titled The Phantom of the Opera?", "sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"", "source_tables": ["musical", "actor"]}}
{"sample_id": 236, "db_id": "musical", "final": {"question": "List the name of actors in ascending alphabetical order.", "sql": "SELECT Name FROM actor ORDER BY Name ASC", "source_tables": ["actor"]}}
{"sample_id": 262, "db_id": "musical", "final": {"question": "Please show the nominee who has been nominated the greatest number of times.", "sql": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["musical"]}}
{"sample_id": 249, "db_id": "musical", "final": {"question": "Return the different nominees of musicals that have an award that is not the Tony Award.", "sql": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"", "source_tables": ["musical"]}}
{"sample_id": 296, "db_id": "twitter_1", "final": {"question": "Find the name and partition id for users who tweeted less than twice.", "sql": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2", "source_tables": ["user_profiles", "tweets"]}}
{"sample_id": 289, "db_id": "twitter_1", "final": {"question": "Find the id of users who are followed by Mary or Susan.", "sql": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\"", "source_tables": ["user_profiles", "follows"]}}
{"sample_id": 292, "db_id": "twitter_1", "final": {"question": "List the name and number of followers for each user, and sort the results by the number of followers in descending order.", "sql": "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC", "source_tables": ["user_profiles"]}}
{"sample_id": 276, "db_id": "twitter_1", "final": {"question": "How many users are there?", "sql": "SELECT count(*) FROM user_profiles", "source_tables": ["user_profiles"]}}
{"sample_id": 300, "db_id": "twitter_1", "final": {"question": "Find the maximum and total number of followers of all users.", "sql": "SELECT max(followers) ,  sum(followers) FROM user_profiles", "source_tables": ["user_profiles"]}}
{"sample_id": 282, "db_id": "twitter_1", "final": {"question": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.", "sql": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'", "source_tables": ["user_profiles"]}}
{"sample_id": 320, "db_id": "product_catalog", "final": {"question": "Find the level name of the catalog with the lowest price (in USD).", "sql": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1", "source_tables": ["catalog_contents", "catalog_structure"]}}
{"sample_id": 321, "db_id": "product_catalog", "final": {"question": "What are the average and minimum price (in Euro) of all products?", "sql": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents", "source_tables": ["catalog_contents"]}}
{"sample_id": 314, "db_id": "product_catalog", "final": {"question": "What are the name and publication date of the catalogs with catalog level number above 5?", "sql": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5", "source_tables": ["catalogs", "catalog_structure"]}}
{"sample_id": 339, "db_id": "product_catalog", "final": {"question": "How many products are there in the records?", "sql": "SELECT count(*) FROM catalog_contents", "source_tables": ["catalog_contents"]}}
{"sample_id": 304, "db_id": "product_catalog", "final": {"question": "What are the attribute data types with more than 3 attribute definitions?", "sql": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3", "source_tables": ["attribute_definitions"]}}
{"sample_id": 333, "db_id": "product_catalog", "final": {"question": "Find the name and attribute ID of the attribute definitions with attribute value 0.", "sql": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0", "source_tables": ["attribute_definitions", "catalog_contents_additional_attributes"]}}
{"sample_id": 336, "db_id": "product_catalog", "final": {"question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.", "sql": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700", "source_tables": ["catalog_contents"]}}
{"sample_id": 341, "db_id": "product_catalog", "final": {"question": "Name all the products with next entry ID greater than 8.", "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8", "source_tables": ["catalog_contents"]}}
{"sample_id": 316, "db_id": "product_catalog", "final": {"question": "Find the entry names of the catalog with the attribute that have the most entries.", "sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["catalog_contents", "catalog_contents_additional_attributes"]}}
{"sample_id": 429, "db_id": "flight_1", "final": {"question": "Show names for all employees who do not have certificate of Boeing 737-800.", "sql": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"", "source_tables": ["aircraft", "employee", "certificate"]}}
{"sample_id": 435, "db_id": "flight_1", "final": {"question": "what is the salary and name of the employee who has the most number of aircraft certificates?", "sql": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["employee", "certificate"]}}
{"sample_id": 434, "db_id": "flight_1", "final": {"question": "What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?", "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5", "source_tables": ["aircraft", "certificate"]}}
{"sample_id": 430, "db_id": "flight_1", "final": {"question": "What are the names of all employees who are not certified to fly Boeing 737-800s?", "sql": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"", "source_tables": ["aircraft", "employee", "certificate"]}}
{"sample_id": 400, "db_id": "flight_1", "final": {"question": "What are the numbers of the shortest flights?", "sql": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3", "source_tables": ["flight"]}}
{"sample_id": 396, "db_id": "flight_1", "final": {"question": "What is the origin and destination for all flights whose price is higher than 300?", "sql": "SELECT origin ,  destination FROM Flight WHERE price  >  300", "source_tables": ["flight"]}}
{"sample_id": 367, "db_id": "flight_1", "final": {"question": "How many employees have salary between 100000 and 200000?", "sql": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000", "source_tables": ["employee"]}}
{"sample_id": 360, "db_id": "flight_1", "final": {"question": "What are the names of all aircrafts that can cover more distances than average?", "sql": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)", "source_tables": ["aircraft"]}}
{"sample_id": 409, "db_id": "flight_1", "final": {"question": "Which destination has least number of flights?", "sql": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1", "source_tables": ["flight"]}}
{"sample_id": 375, "db_id": "flight_1", "final": {"question": "Show the name of employees with three lowest salaries.", "sql": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3", "source_tables": ["employee"]}}
{"sample_id": 374, "db_id": "flight_1", "final": {"question": "What is the id and name of the employee with the highest salary?", "sql": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1", "source_tables": ["employee"]}}
{"sample_id": 427, "db_id": "flight_1", "final": {"question": "Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\"", "source_tables": ["aircraft", "employee", "certificate"]}}
{"sample_id": 405, "db_id": "flight_1", "final": {"question": "Show all destinations and the number of flights to each destination.", "sql": "SELECT destination ,  count(*) FROM Flight GROUP BY destination", "source_tables": ["flight"]}}
{"sample_id": 402, "db_id": "flight_1", "final": {"question": "What is the average distance and price for all flights from LA?", "sql": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"", "source_tables": ["flight"]}}
{"sample_id": 395, "db_id": "flight_1", "final": {"question": "Show origin and destination for flights with price higher than 300.", "sql": "SELECT origin ,  destination FROM Flight WHERE price  >  300", "source_tables": ["flight"]}}
{"sample_id": 438, "db_id": "flight_1", "final": {"question": "What is the salaray and name of the employee with the most certificates to fly planes more than 5000?", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["aircraft", "employee", "certificate"]}}
{"sample_id": 366, "db_id": "flight_1", "final": {"question": "What is the id of every employee who has at least a salary of  100000?", "sql": "SELECT eid FROM Employee WHERE salary  >  100000", "source_tables": ["employee"]}}
{"sample_id": 379, "db_id": "flight_1", "final": {"question": "Show the id and salary of Mark Young.", "sql": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'", "source_tables": ["employee"]}}
{"sample_id": 348, "db_id": "flight_1", "final": {"question": "What are the ids of all aircrafts that can cover a distance of more than 1000?", "sql": "SELECT aid FROM Aircraft WHERE distance  >  1000", "source_tables": ["aircraft"]}}
{"sample_id": 388, "db_id": "flight_1", "final": {"question": "What are the origins of all flights that are headed to Honolulu?", "sql": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"", "source_tables": ["flight"]}}
{"sample_id": 526, "db_id": "allergy_1", "final": {"question": "How old are the students with allergies to food and animal types on average?", "sql": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")", "source_tables": ["has_allergy", "student", "allergy_type"]}}
{"sample_id": 516, "db_id": "allergy_1", "final": {"question": "How many students have each different allergy?", "sql": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy", "source_tables": ["has_allergy"]}}
{"sample_id": 467, "db_id": "allergy_1", "final": {"question": "Show all cities where students live.", "sql": "SELECT DISTINCT city_code FROM Student", "source_tables": ["student"]}}
{"sample_id": 495, "db_id": "allergy_1", "final": {"question": "Show the average age for male and female students.", "sql": "SELECT avg(age) ,  sex FROM Student GROUP BY sex", "source_tables": ["student"]}}
{"sample_id": 489, "db_id": "allergy_1", "final": {"question": "Show all majors and corresponding number of students.", "sql": "SELECT major ,  count(*) FROM Student GROUP BY major", "source_tables": ["student"]}}
{"sample_id": 530, "db_id": "allergy_1", "final": {"question": "How many male students (sex is 'M') are allergic to any type of food?", "sql": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")", "source_tables": ["has_allergy", "student", "allergy_type"]}}
{"sample_id": 464, "db_id": "allergy_1", "final": {"question": "How many advisors are there?", "sql": "SELECT count(DISTINCT advisor) FROM Student", "source_tables": ["student"]}}
{"sample_id": 514, "db_id": "allergy_1", "final": {"question": "Which allergy is the most common?", "sql": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1", "source_tables": ["has_allergy"]}}
{"sample_id": 505, "db_id": "allergy_1", "final": {"question": "Show all student IDs who have at least two allergies.", "sql": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2", "source_tables": ["has_allergy"]}}
{"sample_id": 460, "db_id": "allergy_1", "final": {"question": "What is the total number of students?", "sql": "SELECT count(*) FROM Student", "source_tables": ["student"]}}
{"sample_id": 507, "db_id": "allergy_1", "final": {"question": "What are the student ids of students who don't have any allergies?", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 501, "db_id": "allergy_1", "final": {"question": "Which advisor has most number of students?", "sql": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 502, "db_id": "allergy_1", "final": {"question": "Give the advisor with the most students.", "sql": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 499, "db_id": "allergy_1", "final": {"question": "Show all advisors and corresponding number of students.", "sql": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor", "source_tables": ["student"]}}
{"sample_id": 454, "db_id": "allergy_1", "final": {"question": "What are the allergy types and how many allergies correspond to each one?", "sql": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype", "source_tables": ["allergy_type"]}}
{"sample_id": 535, "db_id": "allergy_1", "final": {"question": "Find the first name and major of the students who are not allegry to soy.", "sql": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 527, "db_id": "allergy_1", "final": {"question": "List the first and last name of the students who do not have any food type allergy.", "sql": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")", "source_tables": ["has_allergy", "student", "allergy_type"]}}
{"sample_id": 486, "db_id": "allergy_1", "final": {"question": "Provide the last name of the youngest student.", "sql": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)", "source_tables": ["student"]}}
{"sample_id": 472, "db_id": "allergy_1", "final": {"question": "What are the student ids for all male students?", "sql": "SELECT StuID FROM Student WHERE Sex  =  'M'", "source_tables": ["student"]}}
{"sample_id": 439, "db_id": "allergy_1", "final": {"question": "How many allergies are there?", "sql": "SELECT count(DISTINCT allergy) FROM Allergy_type", "source_tables": ["allergy_type"]}}
{"sample_id": 496, "db_id": "allergy_1", "final": {"question": "What are the average ages for male and female students?", "sql": "SELECT avg(age) ,  sex FROM Student GROUP BY sex", "source_tables": ["student"]}}
{"sample_id": 555, "db_id": "store_1", "final": {"question": "List every album whose title starts with A in alphabetical order.", "sql": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;", "source_tables": ["albums"]}}
{"sample_id": 595, "db_id": "store_1", "final": {"question": "How many employees are living in Canada?", "sql": "SELECT count(*) FROM employees WHERE country = \"Canada\";", "source_tables": ["employees"]}}
{"sample_id": 637, "db_id": "store_1", "final": {"question": "List the name of playlist which has number of tracks greater than 100.", "sql": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;", "source_tables": ["playlist_tracks", "playlists"]}}
{"sample_id": 623, "db_id": "store_1", "final": {"question": "What is title of album which track Balls to the Wall belongs to?", "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";", "source_tables": ["albums", "tracks"]}}
{"sample_id": 635, "db_id": "store_1", "final": {"question": "List the name of all tracks in the playlists of Movies.", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";", "source_tables": ["playlist_tracks", "playlists", "tracks"]}}
{"sample_id": 620, "db_id": "store_1", "final": {"question": "How many milliseconds long is Fast As a Shark?", "sql": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";", "source_tables": ["tracks"]}}
{"sample_id": 642, "db_id": "store_1", "final": {"question": "What is the unit price of the tune \"Fast As a Shark\"?", "sql": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";", "source_tables": ["tracks"]}}
{"sample_id": 553, "db_id": "store_1", "final": {"question": "List every album ordered by album title in ascending order.", "sql": "SELECT title FROM albums ORDER BY title;", "source_tables": ["albums"]}}
{"sample_id": 566, "db_id": "store_1", "final": {"question": "What are the states with the most invoices?", "sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;", "source_tables": ["invoices"]}}
{"sample_id": 626, "db_id": "store_1", "final": {"question": "What is the name of all tracks in the album named Balls to the Wall?", "sql": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";", "source_tables": ["albums", "tracks"]}}
{"sample_id": 643, "db_id": "store_1", "final": {"question": "Find the name of tracks which are in Movies playlist but not in music playlist.", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'", "source_tables": ["playlist_tracks", "playlists", "tracks"]}}
{"sample_id": 549, "db_id": "store_1", "final": {"question": "List the top 5 genres by number of tracks. List genres name and total tracks.", "sql": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;", "source_tables": ["genres", "tracks"]}}
{"sample_id": 591, "db_id": "store_1", "final": {"question": "What is the address of employee Nancy Edwards?", "sql": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "source_tables": ["employees"]}}
{"sample_id": 548, "db_id": "store_1", "final": {"question": "What are the top 10 customers' first and last names with the highest gross sales, and also what are the sales?", "sql": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;", "source_tables": ["customers", "invoices"]}}
{"sample_id": 573, "db_id": "store_1", "final": {"question": "Eduardo Martins is a customer at which company?", "sql": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";", "source_tables": ["customers"]}}
{"sample_id": 645, "db_id": "store_1", "final": {"question": "Find the name of tracks which are in both Movies and music playlists.", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'", "source_tables": ["playlist_tracks", "playlists", "tracks"]}}
{"sample_id": 598, "db_id": "store_1", "final": {"question": "What is the the phone number of Nancy Edwards?", "sql": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "source_tables": ["employees"]}}
{"sample_id": 559, "db_id": "store_1", "final": {"question": "List total amount of  invoice from Chicago, IL.", "sql": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";", "source_tables": ["invoices"]}}
{"sample_id": 560, "db_id": "store_1", "final": {"question": "What are the total amount of money in the invoices billed from Chicago, Illinois?", "sql": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";", "source_tables": ["invoices"]}}
{"sample_id": 633, "db_id": "store_1", "final": {"question": "List the name of tracks belongs to genre Rock or genre Jazz.", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"", "source_tables": ["genres", "tracks"]}}
{"sample_id": 640, "db_id": "store_1", "final": {"question": "What are the tracks that Dean Peeters bought?", "sql": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";", "source_tables": ["customers", "tracks", "invoices", "invoice_lines"]}}
{"sample_id": 618, "db_id": "store_1", "final": {"question": "What is the composer who created the track \"Fast As a Shark\"?", "sql": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";", "source_tables": ["tracks"]}}
{"sample_id": 572, "db_id": "store_1", "final": {"question": "How many albums has Billy Cobam released?", "sql": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";", "source_tables": ["albums", "artists"]}}
{"sample_id": 664, "db_id": "journal_committee", "final": {"question": "List the names of editors that are not on any journal committee.", "sql": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)", "source_tables": ["editor", "journal_committee"]}}
{"sample_id": 653, "db_id": "journal_committee", "final": {"question": "Show the names of editors of age either 24 or 25.", "sql": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25", "source_tables": ["editor"]}}
{"sample_id": 654, "db_id": "journal_committee", "final": {"question": "What is the name of the youngest editor?", "sql": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1", "source_tables": ["editor"]}}
{"sample_id": 649, "db_id": "journal_committee", "final": {"question": "How many editors are there?", "sql": "SELECT count(*) FROM editor", "source_tables": ["editor"]}}
{"sample_id": 665, "db_id": "journal_committee", "final": {"question": "List the date, theme and sales of the journal which did not have any of the listed editors serving on committee.", "sql": "SELECT date ,  theme ,  sales FROM journal EXCEPT SELECT T1.date ,  T1.theme ,  T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID", "source_tables": ["journal_committee", "journal"]}}
{"sample_id": 694, "db_id": "customers_card_transactions", "final": {"question": "What are the ids, full names, and phones of each customer?", "sql": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers", "source_tables": ["customers"]}}
{"sample_id": 690, "db_id": "customers_card_transactions", "final": {"question": "Count the number of customers who hold an account.", "sql": "SELECT count(DISTINCT customer_id) FROM Accounts", "source_tables": ["accounts"]}}
{"sample_id": 736, "db_id": "customers_card_transactions", "final": {"question": "How many different types of transactions are there?", "sql": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 678, "db_id": "customers_card_transactions", "final": {"question": "How many accounts are there for each customer id?", "sql": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id", "source_tables": ["accounts"]}}
{"sample_id": 746, "db_id": "customers_card_transactions", "final": {"question": "What are the different account ids that have made financial transactions, as well as how many transactions correspond to each?", "sql": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id", "source_tables": ["financial_transactions"]}}
{"sample_id": 682, "db_id": "customers_card_transactions", "final": {"question": "Give the full name and customer id of the customer with the fewest accounts.", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["accounts", "customers"]}}
{"sample_id": 669, "db_id": "customers_card_transactions", "final": {"question": "Show ids, customer ids, names for all accounts.", "sql": "SELECT account_id ,  customer_id ,  account_name FROM Accounts", "source_tables": ["accounts"]}}
{"sample_id": 720, "db_id": "customers_card_transactions", "final": {"question": "What are the different card types, and how many cards are there of each?", "sql": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code", "source_tables": ["customers_cards"]}}
{"sample_id": 667, "db_id": "customers_card_transactions", "final": {"question": "How many accounts do we have?", "sql": "SELECT count(*) FROM Accounts", "source_tables": ["accounts"]}}
{"sample_id": 697, "db_id": "customers_card_transactions", "final": {"question": "Show the number of customer cards.", "sql": "SELECT count(*) FROM Customers_cards", "source_tables": ["customers_cards"]}}
{"sample_id": 681, "db_id": "customers_card_transactions", "final": {"question": "What is the customer first, last name and id with least number of accounts.", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["accounts", "customers"]}}
{"sample_id": 680, "db_id": "customers_card_transactions", "final": {"question": "What is the customer id of the customer with the most accounts, and how many accounts does this person have?", "sql": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["accounts"]}}
{"sample_id": 715, "db_id": "customers_card_transactions", "final": {"question": "Show id, first and last names for all customers with at least two cards.", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2", "source_tables": ["customers", "customers_cards"]}}
{"sample_id": 713, "db_id": "customers_card_transactions", "final": {"question": "What is the customer id with most number of cards, and how many does he have?", "sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers_cards"]}}
{"sample_id": 684, "db_id": "customers_card_transactions", "final": {"question": "How many customers do not have an account?", "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "source_tables": ["customers", "accounts"]}}
{"sample_id": 723, "db_id": "customers_card_transactions", "final": {"question": "Show card type codes with at least 5 cards.", "sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5", "source_tables": ["customers_cards"]}}
{"sample_id": 783, "db_id": "race_track", "final": {"question": "Show the name and date for each race and its track name.", "sql": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id", "source_tables": ["track", "race"]}}
{"sample_id": 750, "db_id": "race_track", "final": {"question": "What are the names and locations of all tracks?", "sql": "SELECT name ,  LOCATION FROM track", "source_tables": ["track"]}}
{"sample_id": 759, "db_id": "race_track", "final": {"question": "What are distinct locations where tracks are located?", "sql": "SELECT DISTINCT LOCATION FROM track", "source_tables": ["track"]}}
{"sample_id": 747, "db_id": "race_track", "final": {"question": "How many tracks do we have?", "sql": "SELECT count(*) FROM track", "source_tables": ["track"]}}
{"sample_id": 755, "db_id": "race_track", "final": {"question": "What is the minimum, maximum, and average seating for all tracks.", "sql": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track", "source_tables": ["track"]}}
{"sample_id": 760, "db_id": "race_track", "final": {"question": "Give the different locations of tracks.", "sql": "SELECT DISTINCT LOCATION FROM track", "source_tables": ["track"]}}
{"sample_id": 767, "db_id": "race_track", "final": {"question": "Show the race class and number of races in each class.", "sql": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS", "source_tables": ["race"]}}
{"sample_id": 763, "db_id": "race_track", "final": {"question": "What are the distinct classes that races can have?", "sql": "SELECT DISTINCT CLASS FROM race", "source_tables": ["race"]}}
{"sample_id": 765, "db_id": "race_track", "final": {"question": "Show name, class, and date for all races.", "sql": "SELECT name ,  CLASS ,  date FROM race", "source_tables": ["race"]}}
{"sample_id": 794, "db_id": "coffee_shop", "final": {"question": "Which membership card has more than 5 members?", "sql": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5", "source_tables": ["member"]}}
{"sample_id": 797, "db_id": "coffee_shop", "final": {"question": "How many members are not living in Hartford?", "sql": "SELECT count(*) FROM member WHERE address != 'Hartford'", "source_tables": ["member"]}}
{"sample_id": 792, "db_id": "coffee_shop", "final": {"question": "Find the ids and names of members who are under age 30 or with black membership card.", "sql": "SELECT name ,  member_id FROM member WHERE Membership_card  =  'Black' OR age  <  30", "source_tables": ["member"]}}
{"sample_id": 790, "db_id": "coffee_shop", "final": {"question": "Find the number of members living in each address.", "sql": "SELECT count(*) ,  address FROM member GROUP BY address", "source_tables": ["member"]}}
{"sample_id": 803, "db_id": "coffee_shop", "final": {"question": "What are the id and address of the shops which have a happy hour in May?", "sql": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'", "source_tables": ["shop", "happy_hour"]}}
{"sample_id": 873, "db_id": "chinook_1", "final": {"question": "Please list all album titles in alphabetical order.", "sql": "SELECT Title FROM ALBUM ORDER BY Title", "source_tables": ["album"]}}
{"sample_id": 831, "db_id": "chinook_1", "final": {"question": "What are the durations of the longest and the shortest tracks in milliseconds?", "sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK", "source_tables": ["track"]}}
{"sample_id": 862, "db_id": "chinook_1", "final": {"question": "What are the addresses of customers living in Germany who have had an invoice?", "sql": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"", "source_tables": ["customer", "invoice"]}}
{"sample_id": 877, "db_id": "chinook_1", "final": {"question": "Find the names of artists that do not have any albums.", "sql": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId", "source_tables": ["artist", "album"]}}
{"sample_id": 810, "db_id": "chinook_1", "final": {"question": "What are the names of different music genres?", "sql": "SELECT Name FROM GENRE", "source_tables": ["genre"]}}
{"sample_id": 814, "db_id": "chinook_1", "final": {"question": "Find the full names of employees living in the city of Calgary.", "sql": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"", "source_tables": ["employee"]}}
{"sample_id": 822, "db_id": "chinook_1", "final": {"question": "Find the number of albums by the artist \"Metallica\".", "sql": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"", "source_tables": ["album", "artist"]}}
{"sample_id": 861, "db_id": "chinook_1", "final": {"question": "Find the address of all customers that live in Germany and have invoice.", "sql": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"", "source_tables": ["customer", "invoice"]}}
{"sample_id": 829, "db_id": "chinook_1", "final": {"question": "What is the average unit price of all the tracks?", "sql": "SELECT AVG(UnitPrice) FROM TRACK", "source_tables": ["track"]}}
{"sample_id": 881, "db_id": "chinook_1", "final": {"question": "What are the duration of the longest and shortest pop tracks in milliseconds?", "sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"", "source_tables": ["track", "genre"]}}
{"sample_id": 849, "db_id": "chinook_1", "final": {"question": "What is the first name and last name employee helps the customer with first name Leonie?", "sql": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"", "source_tables": ["customer", "employee"]}}
{"sample_id": 883, "db_id": "chinook_1", "final": {"question": "What are the birth dates of employees living in Edmonton?", "sql": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"", "source_tables": ["employee"]}}
{"sample_id": 872, "db_id": "chinook_1", "final": {"question": "What are the last names of employees who serve at most 20 customers?", "sql": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20", "source_tables": ["customer", "employee"]}}
{"sample_id": 859, "db_id": "chinook_1", "final": {"question": "Find the first names of all customers that live in Brazil and have an invoice.", "sql": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"", "source_tables": ["customer", "invoice"]}}
{"sample_id": 812, "db_id": "chinook_1", "final": {"question": "What is all the customer information for customers in NY state?", "sql": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"", "source_tables": ["customer"]}}
{"sample_id": 840, "db_id": "chinook_1", "final": {"question": "What are the titles and ids for albums containing tracks with unit price greater than 1?", "sql": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID", "source_tables": ["album", "track"]}}
{"sample_id": 875, "db_id": "chinook_1", "final": {"question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.", "sql": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name", "source_tables": ["album", "artist"]}}
{"sample_id": 823, "db_id": "chinook_1", "final": {"question": "Which artist does the album \"Balls to the Wall\" belong to?", "sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"", "source_tables": ["album", "artist"]}}
{"sample_id": 928, "db_id": "insurance_fnol", "final": {"question": "Find the maximum and minimum settlement amount.", "sql": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements", "source_tables": ["settlements"]}}
{"sample_id": 910, "db_id": "insurance_fnol", "final": {"question": "Which customer uses the most policies? Give me the customer name.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "customers_policies"]}}
{"sample_id": 903, "db_id": "insurance_fnol", "final": {"question": "Find the name of services that have been used for more than 2 times in first notification of loss.", "sql": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2", "source_tables": ["services", "first_notification_of_loss"]}}
{"sample_id": 932, "db_id": "insurance_fnol", "final": {"question": "What are the open and close dates of all the policies used by the customer who have \"Diana\" in part of their names?", "sql": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"", "source_tables": ["customers", "customers_policies"]}}
{"sample_id": 915, "db_id": "insurance_fnol", "final": {"question": "List all the services in the alphabetical order.", "sql": "SELECT service_name FROM services ORDER BY service_name", "source_tables": ["services"]}}
{"sample_id": 916, "db_id": "insurance_fnol", "final": {"question": "Give me a list of all the service names sorted alphabetically.", "sql": "SELECT service_name FROM services ORDER BY service_name", "source_tables": ["services"]}}
{"sample_id": 912, "db_id": "insurance_fnol", "final": {"question": "Tell me the types of the policy used by the customer named \"Dayana Robel\".", "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"", "source_tables": ["customers", "available_policies", "customers_policies"]}}
{"sample_id": 929, "db_id": "insurance_fnol", "final": {"question": "List all the customers in increasing order of IDs.", "sql": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC", "source_tables": ["customers"]}}
{"sample_id": 907, "db_id": "insurance_fnol", "final": {"question": "How many policies are listed for the customer named \"Dayana Robel\"?", "sql": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"", "source_tables": ["customers", "customers_policies"]}}
{"sample_id": 971, "db_id": "medicine_enzyme_interaction", "final": {"question": "How many distinct FDA approval statuses are there for the medicines?", "sql": "SELECT count(DISTINCT FDA_approved) FROM medicine", "source_tables": ["medicine"]}}
{"sample_id": 935, "db_id": "medicine_enzyme_interaction", "final": {"question": "List the name of enzymes in descending lexicographical order.", "sql": "SELECT name FROM enzyme ORDER BY name DESC", "source_tables": ["enzyme"]}}
{"sample_id": 941, "db_id": "medicine_enzyme_interaction", "final": {"question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?", "sql": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'", "source_tables": ["enzyme"]}}
{"sample_id": 956, "db_id": "medicine_enzyme_interaction", "final": {"question": "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?", "sql": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'", "source_tables": ["enzyme", "medicine_enzyme_interaction", "medicine"]}}
{"sample_id": 963, "db_id": "medicine_enzyme_interaction", "final": {"question": "What is the id and trade name of the medicines can interact with at least 3 enzymes?", "sql": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3", "source_tables": ["medicine_enzyme_interaction", "medicine"]}}
{"sample_id": 974, "db_id": "medicine_enzyme_interaction", "final": {"question": "What are the names of enzymes that include the string 'ALA'?", "sql": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"", "source_tables": ["enzyme"]}}
{"sample_id": 943, "db_id": "medicine_enzyme_interaction", "final": {"question": "What are the names of enzymes who does not produce 'Heme'?", "sql": "SELECT name FROM enzyme WHERE product != 'Heme'", "source_tables": ["enzyme"]}}
{"sample_id": 962, "db_id": "medicine_enzyme_interaction", "final": {"question": "What is the count of enzymes without any interactions?", "sql": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );", "source_tables": ["enzyme", "medicine_enzyme_interaction"]}}
{"sample_id": 936, "db_id": "medicine_enzyme_interaction", "final": {"question": "What are the names of enzymes in descending order?", "sql": "SELECT name FROM enzyme ORDER BY name DESC", "source_tables": ["enzyme"]}}
{"sample_id": 938, "db_id": "medicine_enzyme_interaction", "final": {"question": "What are the names and locations of all enzymes listed?", "sql": "SELECT name ,  LOCATION FROM enzyme", "source_tables": ["enzyme"]}}
{"sample_id": 1009, "db_id": "university_basketball", "final": {"question": "Find how many school locations have the word 'NY'.", "sql": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"", "source_tables": ["university"]}}
{"sample_id": 979, "db_id": "university_basketball", "final": {"question": "List all public schools and their locations.", "sql": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'", "source_tables": ["university"]}}
{"sample_id": 989, "db_id": "university_basketball", "final": {"question": "What is the primary conference of the school that has the lowest acc percent score in the competition?", "sql": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1", "source_tables": ["university", "basketball_match"]}}
{"sample_id": 1012, "db_id": "university_basketball", "final": {"question": "What are the names of teams from universities that have a below average enrollment?", "sql": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)", "source_tables": ["university", "basketball_match"]}}
{"sample_id": 987, "db_id": "university_basketball", "final": {"question": "What is the highest acc percent score in the competition?", "sql": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1", "source_tables": ["basketball_match"]}}
{"sample_id": 1013, "db_id": "university_basketball", "final": {"question": "Find the number of universities that have over a 20000 enrollment size for each affiliation type.", "sql": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation", "source_tables": ["university"]}}
{"sample_id": 1014, "db_id": "university_basketball", "final": {"question": "What are the different affiliations, and how many schools with each have an enrollment size of above 20000?", "sql": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation", "source_tables": ["university"]}}
{"sample_id": 990, "db_id": "university_basketball", "final": {"question": "Return the primary conference of the school with the lowest acc percentage score.", "sql": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1", "source_tables": ["university", "basketball_match"]}}
{"sample_id": 1002, "db_id": "university_basketball", "final": {"question": "What are the total enrollments of universities of each affiliation type?", "sql": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation", "source_tables": ["university"]}}
{"sample_id": 977, "db_id": "university_basketball", "final": {"question": "List all schools and their nicknames in the order of founded year.", "sql": "SELECT school ,  nickname FROM university ORDER BY founded", "source_tables": ["university"]}}
{"sample_id": 1036, "db_id": "phone_1", "final": {"question": "List the name of the phone model launched in year 2002 and with the highest RAM size.", "sql": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;", "source_tables": ["chip_model", "phone"]}}
{"sample_id": 1027, "db_id": "phone_1", "final": {"question": "What is maximum and minimum RAM size of phone produced by company named \"Nokia Corporation\"?", "sql": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";", "source_tables": ["chip_model", "phone"]}}
{"sample_id": 1031, "db_id": "phone_1", "final": {"question": "Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \"LG-P760\".", "sql": "SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \"LG-P760\";", "source_tables": ["screen_mode", "phone"]}}
{"sample_id": 1033, "db_id": "phone_1", "final": {"question": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.", "sql": "SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;", "source_tables": ["phone"]}}
{"sample_id": 1051, "db_id": "phone_1", "final": {"question": "Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.", "sql": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'", "source_tables": ["screen_mode", "phone"]}}
{"sample_id": 1044, "db_id": "phone_1", "final": {"question": "Find the accreditation level that more than 3 phones use.", "sql": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  3", "source_tables": ["phone"]}}
{"sample_id": 1030, "db_id": "phone_1", "final": {"question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.", "sql": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';", "source_tables": ["phone"]}}
{"sample_id": 1104, "db_id": "match_season", "final": {"question": "What are the names of teams that do no have match season record?", "sql": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)", "source_tables": ["team", "match_season"]}}
{"sample_id": 1057, "db_id": "match_season", "final": {"question": "What are the official native languages that contain the string \"English\".", "sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"", "source_tables": ["country"]}}
{"sample_id": 1090, "db_id": "match_season", "final": {"question": "Show the position of players and the corresponding number of players.", "sql": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION", "source_tables": ["match_season"]}}
{"sample_id": 1101, "db_id": "match_season", "final": {"question": "What are the names of all colleges that have two or more players?", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2", "source_tables": ["match_season"]}}
{"sample_id": 1091, "db_id": "match_season", "final": {"question": "How many players played each position?", "sql": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION", "source_tables": ["match_season"]}}
{"sample_id": 1065, "db_id": "match_season", "final": {"question": "What are the draft pick numbers and draft classes for players who play the Defender position?", "sql": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"", "source_tables": ["match_season"]}}
{"sample_id": 1053, "db_id": "match_season", "final": {"question": "Count the number of countries.", "sql": "SELECT count(*) FROM country", "source_tables": ["country"]}}
{"sample_id": 1098, "db_id": "match_season", "final": {"question": "Show the top 3 most common colleges of players in match seasons.", "sql": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3", "source_tables": ["match_season"]}}
{"sample_id": 1108, "db_id": "match_season", "final": {"question": "Which college have both players with position midfielder and players with position defender?", "sql": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"", "source_tables": ["match_season"]}}
{"sample_id": 1068, "db_id": "match_season", "final": {"question": "Show the players and the years played.", "sql": "SELECT Player ,  Years_Played FROM player", "source_tables": ["player"]}}
{"sample_id": 1076, "db_id": "match_season", "final": {"question": "What are the distinct positions of the players from a country whose capital is Dublin?", "sql": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\"", "source_tables": ["match_season", "country"]}}
{"sample_id": 1084, "db_id": "match_season", "final": {"question": "Show the positions of the players from the team with name \"Ryley Goldner\".", "sql": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"", "source_tables": ["team", "match_season"]}}
{"sample_id": 1066, "db_id": "match_season", "final": {"question": "How many distinct teams are involved in match seasons?", "sql": "SELECT count(DISTINCT Team) FROM match_season", "source_tables": ["match_season"]}}
{"sample_id": 1132, "db_id": "climbing", "final": {"question": "Show the height of the mountain climbed by the climber with the maximum points.", "sql": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1", "source_tables": ["climber", "mountain"]}}
{"sample_id": 1117, "db_id": "climbing", "final": {"question": "Return the maximum number of points for climbers from the United Kingdom.", "sql": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"", "source_tables": ["climber"]}}
{"sample_id": 1115, "db_id": "climbing", "final": {"question": "What are the names of climbers who are not from the country of Switzerland?", "sql": "SELECT Name FROM climber WHERE Country != \"Switzerland\"", "source_tables": ["climber"]}}
{"sample_id": 1119, "db_id": "climbing", "final": {"question": "Count the number of different countries that climbers are from.", "sql": "SELECT COUNT(DISTINCT Country) FROM climber", "source_tables": ["climber"]}}
{"sample_id": 1120, "db_id": "climbing", "final": {"question": "What are the names of mountains in ascending alphabetical order?", "sql": "SELECT Name FROM mountain ORDER BY Name ASC", "source_tables": ["mountain"]}}
{"sample_id": 1129, "db_id": "climbing", "final": {"question": "What are the names of climbers and the corresponding names of mountains that they climb?", "sql": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "source_tables": ["climber", "mountain"]}}
{"sample_id": 1114, "db_id": "climbing", "final": {"question": "List the names of climbers whose country is not Switzerland.", "sql": "SELECT Name FROM climber WHERE Country != \"Switzerland\"", "source_tables": ["climber"]}}
{"sample_id": 1136, "db_id": "climbing", "final": {"question": "Show the times used by climbers to climb mountains in Country Uganda.", "sql": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"", "source_tables": ["climber", "mountain"]}}
{"sample_id": 1173, "db_id": "body_builder", "final": {"question": "What is the minimum snatch score?", "sql": "SELECT min(snatch) FROM body_builder", "source_tables": ["body_builder"]}}
{"sample_id": 1150, "db_id": "body_builder", "final": {"question": "How many body builders are there?", "sql": "SELECT count(*) FROM body_builder", "source_tables": ["body_builder"]}}
{"sample_id": 1160, "db_id": "body_builder", "final": {"question": "What are the heights of body builders with total score smaller than 315?", "sql": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315", "source_tables": ["body_builder", "people"]}}
{"sample_id": 1158, "db_id": "body_builder", "final": {"question": "What is the name of the body builder with the greatest body weight?", "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "source_tables": ["body_builder", "people"]}}
{"sample_id": 1157, "db_id": "body_builder", "final": {"question": "What are the names of body builders whose total score is higher than 300?", "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300", "source_tables": ["body_builder", "people"]}}
{"sample_id": 1163, "db_id": "body_builder", "final": {"question": "List each birth place along with the number of people from there.", "sql": "SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place", "source_tables": ["people"]}}
{"sample_id": 1184, "db_id": "election_representative", "final": {"question": "What is the party of the representative that has the smallest number of votes.", "sql": "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1", "source_tables": ["election", "representative"]}}
{"sample_id": 1176, "db_id": "election_representative", "final": {"question": "List the dates and vote percents of elections.", "sql": "SELECT Date ,  Vote_Percent FROM election", "source_tables": ["election"]}}
{"sample_id": 1182, "db_id": "election_representative", "final": {"question": "What are the names of representatives with more than 10000 votes in election?", "sql": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  10000", "source_tables": ["election", "representative"]}}
{"sample_id": 1193, "db_id": "election_representative", "final": {"question": "How many distinct parties are there for representatives?", "sql": "SELECT count(DISTINCT Party) FROM representative", "source_tables": ["representative"]}}
{"sample_id": 1249, "db_id": "apartment_rentals", "final": {"question": "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings.", "sql": "SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code", "source_tables": ["apartment_bookings"]}}
{"sample_id": 1244, "db_id": "apartment_rentals", "final": {"question": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.", "sql": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2", "source_tables": ["apartments", "apartment_buildings"]}}
{"sample_id": 1206, "db_id": "apartment_rentals", "final": {"question": "What is the minimum and maximum number of bathrooms of all the apartments?", "sql": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments", "source_tables": ["apartments"]}}
{"sample_id": 1194, "db_id": "apartment_rentals", "final": {"question": "How many apartment bookings are there in total?", "sql": "SELECT count(*) FROM Apartment_Bookings", "source_tables": ["apartment_bookings"]}}
{"sample_id": 1266, "db_id": "apartment_rentals", "final": {"question": "Show each gender code and the corresponding count of guests sorted by the count in descending order.", "sql": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC", "source_tables": ["guests"]}}
{"sample_id": 1254, "db_id": "apartment_rentals", "final": {"question": "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.", "sql": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC", "source_tables": ["apartments"]}}
{"sample_id": 1272, "db_id": "apartment_rentals", "final": {"question": "Show the apartment numbers of apartments with unit status availability of both 0 and 1.", "sql": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1", "source_tables": ["apartments", "view_unit_status"]}}
{"sample_id": 1213, "db_id": "apartment_rentals", "final": {"question": "Find the average room count of the apartments that have the \"Studio\" type code.", "sql": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"", "source_tables": ["apartments"]}}
{"sample_id": 1268, "db_id": "apartment_rentals", "final": {"question": "How many apartments do not have any facility?", "sql": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)", "source_tables": ["apartments", "apartment_facilities"]}}
{"sample_id": 1264, "db_id": "apartment_rentals", "final": {"question": "Show each apartment type code, and the maximum and minimum number of rooms for each type.", "sql": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code", "source_tables": ["apartments"]}}
{"sample_id": 1242, "db_id": "apartment_rentals", "final": {"question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".", "sql": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"", "source_tables": ["apartments", "apartment_buildings"]}}
{"sample_id": 1221, "db_id": "apartment_rentals", "final": {"question": "What are the apartment number, start date, and end date of each apartment booking?", "sql": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id", "source_tables": ["apartments", "apartment_bookings"]}}
{"sample_id": 1219, "db_id": "apartment_rentals", "final": {"question": "What are dates of birth of all the guests whose gender is \"Male\"?", "sql": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"", "source_tables": ["guests"]}}
{"sample_id": 1215, "db_id": "apartment_rentals", "final": {"question": "Which apartments have type code \"Flat\"? Give me their apartment numbers.", "sql": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"", "source_tables": ["apartments"]}}
{"sample_id": 1256, "db_id": "apartment_rentals", "final": {"question": "Show the top 3 apartment type codes sorted by the average number of rooms in descending order.", "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3", "source_tables": ["apartments"]}}
{"sample_id": 1222, "db_id": "apartment_rentals", "final": {"question": "What are the booking start and end dates of the apartments with type code \"Duplex\"?", "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \"Duplex\"", "source_tables": ["apartments", "apartment_bookings"]}}
{"sample_id": 1285, "db_id": "game_injury", "final": {"question": "How many different kinds of information sources are there for injury accidents?", "sql": "SELECT count(DISTINCT SOURCE) FROM injury_accident", "source_tables": ["injury_accident"]}}
{"sample_id": 1286, "db_id": "game_injury", "final": {"question": "How many games are free of injury accidents?", "sql": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )", "source_tables": ["injury_accident", "game"]}}
{"sample_id": 1277, "db_id": "game_injury", "final": {"question": "What are the maximum, minimum and average home games each stadium held?", "sql": "SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium", "source_tables": ["stadium"]}}
{"sample_id": 1289, "db_id": "game_injury", "final": {"question": "Show the name, average attendance, total attendance for stadiums where no accidents happened.", "sql": "SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT T2.name ,  T2.average_attendance ,  T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id", "source_tables": ["injury_accident", "stadium", "game"]}}
{"sample_id": 1274, "db_id": "game_injury", "final": {"question": "How many games are held after season 2007?", "sql": "SELECT count(*) FROM game WHERE season  >  2007", "source_tables": ["game"]}}
{"sample_id": 1297, "db_id": "soccer_1", "final": {"question": "List all player names who have an overall rating higher than the average.", "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )", "source_tables": ["player", "player_attributes"]}}
{"sample_id": 1294, "db_id": "soccer_1", "final": {"question": "How many leagues are there in England?", "sql": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"", "source_tables": ["league", "country"]}}
{"sample_id": 1301, "db_id": "soccer_1", "final": {"question": "What is the average rating for right-footed players and left-footed players?", "sql": "SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot", "source_tables": ["player_attributes"]}}
{"sample_id": 1306, "db_id": "soccer_1", "final": {"question": "List the names and birthdays of the top five players in terms of potential.", "sql": "SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5", "source_tables": ["player", "player_attributes"]}}
{"sample_id": 1313, "db_id": "performance_attendance", "final": {"question": "Show different locations and the number of performances at each location.", "sql": "SELECT LOCATION ,  COUNT(*) FROM performance GROUP BY LOCATION", "source_tables": ["performance"]}}
{"sample_id": 1320, "db_id": "performance_attendance", "final": {"question": "Show the names of members and the dates of performances they attended in descending order of attendance of the performances.", "sql": "SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC", "source_tables": ["member", "member_attendance", "performance"]}}
{"sample_id": 1317, "db_id": "performance_attendance", "final": {"question": "Show the names of members and the location of the performances they attended.", "sql": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID", "source_tables": ["member", "member_attendance", "performance"]}}
{"sample_id": 1367, "db_id": "college_2", "final": {"question": "What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?", "sql": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["teaches"]}}
{"sample_id": 1473, "db_id": "college_2", "final": {"question": "What are the names of all instructors with names that include \"dar\"?", "sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "source_tables": ["instructor"]}}
{"sample_id": 1459, "db_id": "college_2", "final": {"question": "What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?", "sql": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')", "source_tables": ["instructor"]}}
{"sample_id": 1374, "db_id": "college_2", "final": {"question": "List the names of all courses ordered by their titles and credits.", "sql": "SELECT title FROM course ORDER BY title ,  credits", "source_tables": ["course"]}}
{"sample_id": 1333, "db_id": "college_2", "final": {"question": "Give the name of the student in the History department with the most credits.", "sql": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 1486, "db_id": "college_2", "final": {"question": "Find the names and average salaries of all departments whose average salary is greater than 42000.", "sql": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000", "source_tables": ["instructor"]}}
{"sample_id": 1455, "db_id": "college_2", "final": {"question": "How many students and instructors are in each department?", "sql": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name", "source_tables": ["student", "instructor", "department"]}}
{"sample_id": 1352, "db_id": "college_2", "final": {"question": "Find the total budgets of the Marketing or Finance department.", "sql": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'", "source_tables": ["department"]}}
{"sample_id": 1378, "db_id": "college_2", "final": {"question": "List the names and buildings of all departments sorted by the budget from large to small.", "sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC", "source_tables": ["department"]}}
{"sample_id": 1348, "db_id": "college_2", "final": {"question": "Find the name of the courses that do not have any prerequisite?", "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "source_tables": ["course", "prereq"]}}
{"sample_id": 1407, "db_id": "college_2", "final": {"question": "What is the year and semester with the most courses?", "sql": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1", "source_tables": ["section"]}}
{"sample_id": 1427, "db_id": "college_2", "final": {"question": "What are the names of students who took a course in the Fall of 2003?", "sql": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)", "source_tables": ["student", "takes"]}}
{"sample_id": 1438, "db_id": "college_2", "final": {"question": "Find the name of instructor who is the advisor of the student who has the highest number of total credits.", "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1", "source_tables": ["student", "instructor", "advisor"]}}
{"sample_id": 1408, "db_id": "college_2", "final": {"question": "Find the name of department has the highest amount of students?", "sql": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 1397, "db_id": "college_2", "final": {"question": "What are the titles of courses that are offered in more than one department?", "sql": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1", "source_tables": ["course"]}}
{"sample_id": 1443, "db_id": "college_2", "final": {"question": "What are the ids of instructors who didnt' teach?", "sql": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches", "source_tables": ["instructor", "teaches"]}}
{"sample_id": 1474, "db_id": "college_2", "final": {"question": "List in alphabetic order the names of all distinct instructors.", "sql": "SELECT DISTINCT name FROM  instructor ORDER BY name", "source_tables": ["instructor"]}}
{"sample_id": 1338, "db_id": "college_2", "final": {"question": "How many departments offer courses?", "sql": "SELECT count(DISTINCT dept_name) FROM course", "source_tables": ["course"]}}
{"sample_id": 1355, "db_id": "college_2", "final": {"question": "What is the name of the department with an instructure who has a name like 'Soisalon'?", "sql": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'", "source_tables": ["instructor"]}}
{"sample_id": 1362, "db_id": "college_2", "final": {"question": "Find the title of course that is provided by both Statistics and Psychology departments.", "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'", "source_tables": ["course"]}}
{"sample_id": 1421, "db_id": "college_2", "final": {"question": "What are the names of courses without prerequisites?", "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "source_tables": ["course", "prereq"]}}
{"sample_id": 1363, "db_id": "college_2", "final": {"question": "What is the title of a course that is listed in both the Statistics and Psychology departments?", "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'", "source_tables": ["course"]}}
{"sample_id": 1406, "db_id": "college_2", "final": {"question": "Find the year and semester when offers the largest number of courses.", "sql": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1", "source_tables": ["section"]}}
{"sample_id": 1449, "db_id": "college_2", "final": {"question": "How many instructors are in the department with the highest budget, and what is their average salary?", "sql": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1", "source_tables": ["instructor", "department"]}}
{"sample_id": 1467, "db_id": "college_2", "final": {"question": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000", "source_tables": ["instructor"]}}
{"sample_id": 1391, "db_id": "college_2", "final": {"question": "What are the names of students who have more than one advisor?", "sql": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1", "source_tables": ["student", "advisor"]}}
{"sample_id": 1396, "db_id": "college_2", "final": {"question": "Find the title of the course that is offered by more than one department.", "sql": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1", "source_tables": ["course"]}}
{"sample_id": 1358, "db_id": "college_2", "final": {"question": "Find the name and budget of departments whose budgets are more than the average budget.", "sql": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "source_tables": ["department"]}}
{"sample_id": 1419, "db_id": "college_2", "final": {"question": "What are the ids of courses without prerequisites?", "sql": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq", "source_tables": ["course", "prereq"]}}
{"sample_id": 1430, "db_id": "college_2", "final": {"question": "Find the name of the instructors who taught C Programming course before.", "sql": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'", "source_tables": ["instructor", "course", "teaches"]}}
{"sample_id": 1350, "db_id": "college_2", "final": {"question": "How many different instructors have taught some course?", "sql": "SELECT COUNT (DISTINCT id) FROM teaches", "source_tables": ["teaches"]}}
{"sample_id": 1475, "db_id": "college_2", "final": {"question": "List the distinct names of the instructors, ordered by name.", "sql": "SELECT DISTINCT name FROM  instructor ORDER BY name", "source_tables": ["instructor"]}}
{"sample_id": 1325, "db_id": "college_2", "final": {"question": "How many classrooms are not in Lamberton?", "sql": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'", "source_tables": ["classroom"]}}
{"sample_id": 1343, "db_id": "college_2", "final": {"question": "What are the titles for courses with two prerequisites?", "sql": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2", "source_tables": ["course", "prereq"]}}
{"sample_id": 1502, "db_id": "debate", "final": {"question": "Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.", "sql": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC", "source_tables": ["debate_people", "people", "debate"]}}
{"sample_id": 1494, "db_id": "debate", "final": {"question": "What are the date and venue of each debate?", "sql": "SELECT Date ,  Venue FROM debate", "source_tables": ["debate"]}}
{"sample_id": 1493, "db_id": "debate", "final": {"question": "List the venues of debates in ascending order of the number of audience.", "sql": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC", "source_tables": ["debate"]}}
{"sample_id": 1542, "db_id": "insurance_and_eClaims", "final": {"question": "Find the description of the claim status \"Open\".", "sql": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"", "source_tables": ["claims_processing_stages"]}}
{"sample_id": 1520, "db_id": "insurance_and_eClaims", "final": {"question": "Which customer made the largest amount of claim in a single claim? Return the customer details.", "sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)", "source_tables": ["customers", "policies", "claim_headers"]}}
{"sample_id": 1509, "db_id": "insurance_and_eClaims", "final": {"question": "Find all the policy type codes associated with the customer \"Dayana Robel\"", "sql": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"", "source_tables": ["customers", "policies"]}}
{"sample_id": 1536, "db_id": "insurance_and_eClaims", "final": {"question": "What are the names of the customers and staff members?", "sql": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff", "source_tables": ["customers", "staff"]}}
{"sample_id": 1507, "db_id": "insurance_and_eClaims", "final": {"question": "List the names of all the customers in alphabetical order.", "sql": "SELECT customer_details FROM customers ORDER BY customer_details", "source_tables": ["customers"]}}
{"sample_id": 1511, "db_id": "insurance_and_eClaims", "final": {"question": "Which type of policy is most frequently used? Give me the policy type code.", "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["policies"]}}
{"sample_id": 1526, "db_id": "insurance_and_eClaims", "final": {"question": "Find the number of distinct stages in claim processing.", "sql": "SELECT count(*) FROM claims_processing_stages", "source_tables": ["claims_processing_stages"]}}
{"sample_id": 1545, "db_id": "insurance_and_eClaims", "final": {"question": "Which customer is associated with the latest policy?", "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)", "source_tables": ["customers", "policies"]}}
{"sample_id": 1555, "db_id": "customers_and_invoices", "final": {"question": "Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.", "sql": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\"", "source_tables": ["accounts", "customers"]}}
{"sample_id": 1595, "db_id": "customers_and_invoices", "final": {"question": "Show all product sizes.", "sql": "SELECT DISTINCT product_size FROM Products", "source_tables": ["products"]}}
{"sample_id": 1593, "db_id": "customers_and_invoices", "final": {"question": "Show the account id and name with at least 4 transactions.", "sql": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4", "source_tables": ["accounts", "financial_transactions"]}}
{"sample_id": 1623, "db_id": "customers_and_invoices", "final": {"question": "Show order ids and the number of products in each order.", "sql": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id", "source_tables": ["order_items"]}}
{"sample_id": 1617, "db_id": "customers_and_invoices", "final": {"question": "Show the order ids and the number of items in each order.", "sql": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id", "source_tables": ["order_items"]}}
{"sample_id": 1551, "db_id": "customers_and_invoices", "final": {"question": "Show the id, the date of account opened, the account name, and other account detail for all accounts.", "sql": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts", "source_tables": ["accounts"]}}
{"sample_id": 1552, "db_id": "customers_and_invoices", "final": {"question": "What are the ids, date opened, name, and other details for all accounts?", "sql": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts", "source_tables": ["accounts"]}}
{"sample_id": 1549, "db_id": "customers_and_invoices", "final": {"question": "How many customers have opened an account?", "sql": "SELECT count(DISTINCT customer_id) FROM Accounts", "source_tables": ["accounts"]}}
{"sample_id": 1587, "db_id": "customers_and_invoices", "final": {"question": "Show the transaction types and the total amount of transactions.", "sql": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type", "source_tables": ["financial_transactions"]}}
{"sample_id": 1603, "db_id": "customers_and_invoices", "final": {"question": "How many invoices do we have?", "sql": "SELECT count(*) FROM Invoices", "source_tables": ["invoices"]}}
{"sample_id": 1620, "db_id": "customers_and_invoices", "final": {"question": "How many distinct order ids correspond to each product?", "sql": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id", "source_tables": ["order_items"]}}
{"sample_id": 1600, "db_id": "customers_and_invoices", "final": {"question": "How many transactions correspond to each invoice number?", "sql": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number", "source_tables": ["financial_transactions"]}}
{"sample_id": 1609, "db_id": "customers_and_invoices", "final": {"question": "What is the order id and order details for the order more than two invoices.", "sql": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2", "source_tables": ["invoices", "orders"]}}
{"sample_id": 1566, "db_id": "customers_and_invoices", "final": {"question": "Count the number of accounts corresponding to each customer id.", "sql": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id", "source_tables": ["accounts"]}}
{"sample_id": 1618, "db_id": "customers_and_invoices", "final": {"question": "How many order items correspond to each order id?", "sql": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id", "source_tables": ["order_items"]}}
{"sample_id": 1605, "db_id": "customers_and_invoices", "final": {"question": "Show invoice dates and order id and details for all invoices.", "sql": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id", "source_tables": ["invoices", "orders"]}}
{"sample_id": 1550, "db_id": "customers_and_invoices", "final": {"question": "Count the number of customers who have an account.", "sql": "SELECT count(DISTINCT customer_id) FROM Accounts", "source_tables": ["accounts"]}}
{"sample_id": 1641, "db_id": "wedding", "final": {"question": "Show the name and age for all male people who don't have a wedding.", "sql": "SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)", "source_tables": ["wedding", "people"]}}
{"sample_id": 1648, "db_id": "wedding", "final": {"question": "How many churches have a wedding in year 2016?", "sql": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016", "source_tables": ["wedding"]}}
{"sample_id": 1630, "db_id": "wedding", "final": {"question": "Show the name, open date, and organizer for all churches.", "sql": "SELECT name ,  open_date ,  organized_by FROM Church", "source_tables": ["church"]}}
{"sample_id": 1636, "db_id": "wedding", "final": {"question": "How many female people are older than 30 in our record?", "sql": "SELECT count(*) FROM people WHERE is_male  =  'F' AND age  >  30", "source_tables": ["people"]}}
{"sample_id": 1680, "db_id": "theme_gallery", "final": {"question": "Return the themes, dates, and attendance for exhibitions that happened in 2004.", "sql": "SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004", "source_tables": ["exhibition", "exhibition_record"]}}
{"sample_id": 1658, "db_id": "theme_gallery", "final": {"question": "Count the number of artists who are older than 46 and joined after 1990.", "sql": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990", "source_tables": ["artist"]}}
{"sample_id": 1671, "db_id": "theme_gallery", "final": {"question": "Show names for artists without any exhibition.", "sql": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)", "source_tables": ["exhibition", "artist"]}}
{"sample_id": 1679, "db_id": "theme_gallery", "final": {"question": "What is the theme, date, and attendance for the exhibition in year 2004?", "sql": "SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004", "source_tables": ["exhibition", "exhibition_record"]}}
{"sample_id": 1653, "db_id": "theme_gallery", "final": {"question": "What are all distinct country for artists?", "sql": "SELECT DISTINCT country FROM artist", "source_tables": ["artist"]}}
{"sample_id": 1655, "db_id": "theme_gallery", "final": {"question": "Show all artist names and the year joined who are not from United States.", "sql": "SELECT name ,  year_join FROM artist WHERE country != 'United States'", "source_tables": ["artist"]}}
{"sample_id": 1686, "db_id": "theme_gallery", "final": {"question": "Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10.", "sql": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10", "source_tables": ["exhibition", "exhibition_record"]}}
{"sample_id": 1675, "db_id": "theme_gallery", "final": {"question": "Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009.", "sql": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009", "source_tables": ["exhibition"]}}
{"sample_id": 1692, "db_id": "epinions_1", "final": {"question": "How many users are there?", "sql": "SELECT count(*) FROM useracct", "source_tables": ["useracct"]}}
{"sample_id": 1710, "db_id": "epinions_1", "final": {"question": "For each user, find their name and the number of reviews written by them.", "sql": "SELECT T1.name ,  count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id", "source_tables": ["review", "useracct"]}}
{"sample_id": 1693, "db_id": "epinions_1", "final": {"question": "Find the average and maximum rating of all reviews.", "sql": "SELECT avg(rating) ,  max(rating) FROM review", "source_tables": ["review"]}}
{"sample_id": 1703, "db_id": "epinions_1", "final": {"question": "Find the names of items whose rank is higher than 3 and whose average rating is above 5.", "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rank  >  3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating)  >  5", "source_tables": ["item", "review"]}}
{"sample_id": 1718, "db_id": "epinions_1", "final": {"question": "Find the number of items without any review.", "sql": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)", "source_tables": ["item", "review"]}}
{"sample_id": 1716, "db_id": "epinions_1", "final": {"question": "Find the names of users who did not leave any review.", "sql": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)", "source_tables": ["review", "useracct"]}}
{"sample_id": 1729, "db_id": "riding_club", "final": {"question": "Show the names of players coached by the rank 1 coach.", "sql": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1", "source_tables": ["player", "player_coach", "coach"]}}
{"sample_id": 1731, "db_id": "riding_club", "final": {"question": "Show the names of players and names of their coaches in descending order of the votes of players.", "sql": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC", "source_tables": ["player", "player_coach", "coach"]}}
{"sample_id": 1725, "db_id": "riding_club", "final": {"question": "Show different occupations along with the number of players in each occupation.", "sql": "SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation", "source_tables": ["player"]}}
{"sample_id": 1730, "db_id": "riding_club", "final": {"question": "Show the names and genders of players with a coach starting after 2011.", "sql": "SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011", "source_tables": ["player", "player_coach", "coach"]}}
{"sample_id": 1737, "db_id": "gymnast", "final": {"question": "Count the number of gymnasts.", "sql": "SELECT count(*) FROM gymnast", "source_tables": ["gymnast"]}}
{"sample_id": 1767, "db_id": "gymnast", "final": {"question": "What are the names of gymnasts, ordered by their heights ascending?", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1746, "db_id": "gymnast", "final": {"question": "What are the names of gymnasts?", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1772, "db_id": "gymnast", "final": {"question": "How many distinct hometowns did these people have?", "sql": "SELECT count(DISTINCT Hometown) FROM people", "source_tables": ["people"]}}
{"sample_id": 1764, "db_id": "gymnast", "final": {"question": "What are the hometowns that are shared by at least two gymnasts?", "sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1750, "db_id": "gymnast", "final": {"question": "What is the age of the tallest person?", "sql": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1", "source_tables": ["people"]}}
{"sample_id": 1774, "db_id": "gymnast", "final": {"question": "Show the ages of gymnasts in descending order of total points.", "sql": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1748, "db_id": "gymnast", "final": {"question": "What are the names of gymnasts whose hometown is not \"Santo Domingo\"?", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\"", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1822, "db_id": "small_bank_1", "final": {"question": "Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.", "sql": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1778, "db_id": "small_bank_1", "final": {"question": "How many accounts are there in total?", "sql": "SELECT count(*) FROM accounts", "source_tables": ["accounts"]}}
{"sample_id": 1782, "db_id": "small_bank_1", "final": {"question": "Find the average checking balance.", "sql": "SELECT avg(balance) FROM checking", "source_tables": ["checking"]}}
{"sample_id": 1802, "db_id": "small_bank_1", "final": {"question": "Find the name and checking balance of the account with the lowest savings balance.", "sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1790, "db_id": "small_bank_1", "final": {"question": "Find the checking balance and saving balance in the Brown\u2019s account.", "sql": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1783, "db_id": "small_bank_1", "final": {"question": "What is the average balance in checking accounts?", "sql": "SELECT avg(balance) FROM checking", "source_tables": ["checking"]}}
{"sample_id": 1804, "db_id": "small_bank_1", "final": {"question": "Find the number of checking accounts for each account name.", "sql": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "source_tables": ["accounts", "checking"]}}
{"sample_id": 1792, "db_id": "small_bank_1", "final": {"question": "Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1800, "db_id": "small_bank_1", "final": {"question": "Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.", "sql": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1821, "db_id": "small_bank_1", "final": {"question": "What are the names of customers with a higher checking balance than savings balance?", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1839, "db_id": "browser_web", "final": {"question": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.", "sql": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'", "source_tables": ["accelerator_compatible_browser", "browser", "web_client_accelerator"]}}
{"sample_id": 1843, "db_id": "browser_web", "final": {"question": "give me names of all compatible browsers and accelerators in the descending order of compatible year", "sql": "SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC", "source_tables": ["accelerator_compatible_browser", "browser", "web_client_accelerator"]}}
{"sample_id": 1837, "db_id": "browser_web", "final": {"question": "How many accelerators are not compatible with the browsers listed ?", "sql": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );", "source_tables": ["accelerator_compatible_browser", "web_client_accelerator"]}}
{"sample_id": 1842, "db_id": "browser_web", "final": {"question": "Find the number of web accelerators used for each Operating system.", "sql": "SELECT Operating_system ,  count(*) FROM web_client_accelerator GROUP BY Operating_system", "source_tables": ["web_client_accelerator"]}}
{"sample_id": 1834, "db_id": "browser_web", "final": {"question": "What is the id and name of the browser that is compatible with the most web accelerators?", "sql": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["accelerator_compatible_browser", "browser"]}}
{"sample_id": 1879, "db_id": "wrestler", "final": {"question": "What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?", "sql": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"", "source_tables": ["elimination"]}}
{"sample_id": 1845, "db_id": "wrestler", "final": {"question": "Count the number of wrestlers.", "sql": "SELECT count(*) FROM wrestler", "source_tables": ["wrestler"]}}
{"sample_id": 1865, "db_id": "wrestler", "final": {"question": "How many eliminations did each team have?", "sql": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team", "source_tables": ["elimination"]}}
{"sample_id": 1869, "db_id": "wrestler", "final": {"question": "What are the reigns and days held of all wrestlers?", "sql": "SELECT Reign ,  Days_held FROM wrestler", "source_tables": ["wrestler"]}}
{"sample_id": 1883, "db_id": "wrestler", "final": {"question": "What are the times of elimination for any instances in which the elimination was done by Punk or Orton?", "sql": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"", "source_tables": ["elimination"]}}
{"sample_id": 1876, "db_id": "wrestler", "final": {"question": "List the names of wrestlers that have not been eliminated.", "sql": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)", "source_tables": ["wrestler", "elimination"]}}
{"sample_id": 1873, "db_id": "wrestler", "final": {"question": "Which reign is the most common among wrestlers?", "sql": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["wrestler"]}}
{"sample_id": 1856, "db_id": "wrestler", "final": {"question": "What are the names of wrestlers and the elimination moves?", "sql": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID", "source_tables": ["wrestler", "elimination"]}}
{"sample_id": 1886, "db_id": "school_finance", "final": {"question": "Show all school names in alphabetical order.", "sql": "SELECT school_name FROM school ORDER BY school_name", "source_tables": ["school"]}}
{"sample_id": 1905, "db_id": "school_finance", "final": {"question": "What is the total budget amount for school \"Glenn\" in all years?", "sql": "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn'", "source_tables": ["budget", "school"]}}
{"sample_id": 1889, "db_id": "school_finance", "final": {"question": "What are the mascots for schools with enrollments above the average?", "sql": "SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)", "source_tables": ["school"]}}
{"sample_id": 1887, "db_id": "school_finance", "final": {"question": "List the name, location, mascot for all schools.", "sql": "SELECT school_name ,  LOCATION ,  mascot FROM school", "source_tables": ["school"]}}
{"sample_id": 1899, "db_id": "school_finance", "final": {"question": "List the amount and donor name for the largest amount of donation.", "sql": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1", "source_tables": ["endowment"]}}
{"sample_id": 1903, "db_id": "school_finance", "final": {"question": "Show all donor names.", "sql": "SELECT DISTINCT donator_name FROM endowment", "source_tables": ["endowment"]}}
{"sample_id": 1915, "db_id": "protein_institute", "final": {"question": "List the names of buildings with at least 200 feet of height and with at least 20 floors.", "sql": "SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20", "source_tables": ["building"]}}
{"sample_id": 1927, "db_id": "protein_institute", "final": {"question": "Show the protein name and the institution name.", "sql": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id", "source_tables": ["protein", "institution"]}}
{"sample_id": 1921, "db_id": "protein_institute", "final": {"question": "Show the names of buildings except for those having an institution founded in 2003.", "sql": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003", "source_tables": ["building", "institution"]}}
{"sample_id": 1928, "db_id": "protein_institute", "final": {"question": "How many proteins are associated with an institution in a building with at least 20 floors?", "sql": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20", "source_tables": ["protein", "building", "institution"]}}
{"sample_id": 1933, "db_id": "cinema", "final": {"question": "Count the number of cinemas.", "sql": "SELECT count(*) FROM cinema", "source_tables": ["cinema"]}}
{"sample_id": 1934, "db_id": "cinema", "final": {"question": "Show name, opening year, and capacity for each cinema.", "sql": "SELECT name ,  openning_year ,  capacity FROM cinema", "source_tables": ["cinema"]}}
{"sample_id": 1949, "db_id": "cinema", "final": {"question": "List all directors along with the number of films directed by each director.", "sql": "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by", "source_tables": ["film"]}}
{"sample_id": 1953, "db_id": "cinema", "final": {"question": "Show cinema name, film title, date, and price for each record in schedule.", "sql": "SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id", "source_tables": ["film", "schedule", "cinema"]}}
{"sample_id": 1955, "db_id": "cinema", "final": {"question": "Show director with the largest number of show times in total.", "sql": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1", "source_tables": ["film", "schedule"]}}
{"sample_id": 1950, "db_id": "cinema", "final": {"question": "What is total number of show times per dat for each cinema?", "sql": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id", "source_tables": ["schedule", "cinema"]}}
{"sample_id": 1960, "db_id": "products_for_hire", "final": {"question": "Are the customers holding coupons with amount 500 bad or good?", "sql": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500", "source_tables": ["customers", "discount_coupons"]}}
{"sample_id": 1974, "db_id": "products_for_hire", "final": {"question": "How many products are never booked with amount higher than 200?", "sql": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )", "source_tables": ["products_for_hire", "products_booked"]}}
{"sample_id": 1964, "db_id": "products_for_hire", "final": {"question": "What is the id of the product that is booked for 3 times?", "sql": "SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*)  =  3", "source_tables": ["products_booked"]}}
{"sample_id": 1967, "db_id": "products_for_hire", "final": {"question": "What are the names of products whose availability equals to 1?", "sql": "SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.available_yn  =  1", "source_tables": ["products_for_hire", "view_product_availability"]}}
{"sample_id": 1977, "db_id": "products_for_hire", "final": {"question": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?", "sql": "SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20", "source_tables": ["products_for_hire"]}}
{"sample_id": 1986, "db_id": "phone_market", "final": {"question": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.", "sql": "SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64", "source_tables": ["phone"]}}
{"sample_id": 1990, "db_id": "phone_market", "final": {"question": "For each phone, show its names and total number of stocks.", "sql": "SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name", "source_tables": ["phone_market", "phone"]}}
{"sample_id": 1983, "db_id": "phone_market", "final": {"question": "What is the carrier of the most expensive phone?", "sql": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1", "source_tables": ["phone"]}}
{"sample_id": 2015, "db_id": "gas_company", "final": {"question": "How many gas station are opened between 2000 and 2005?", "sql": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005", "source_tables": ["gas_station"]}}
{"sample_id": 2028, "db_id": "gas_company", "final": {"question": "What are the names of the managers for gas stations that are operated by the ExxonMobil company?", "sql": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'", "source_tables": ["company", "station_company", "gas_station"]}}
{"sample_id": 2004, "db_id": "gas_company", "final": {"question": "What are the different main industries for all companies?", "sql": "SELECT DISTINCT main_industry FROM company", "source_tables": ["company"]}}
{"sample_id": 2032, "db_id": "gas_company", "final": {"question": "What is the name of the manager with the most gas stations that opened after 2000?", "sql": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["gas_station"]}}
{"sample_id": 1993, "db_id": "gas_company", "final": {"question": "How many gas companies are there?", "sql": "SELECT count(*) FROM company", "source_tables": ["company"]}}
{"sample_id": 1997, "db_id": "gas_company", "final": {"question": "Show the company name and the main industry for all companies whose headquarters are not from USA.", "sql": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'", "source_tables": ["company"]}}
{"sample_id": 2029, "db_id": "gas_company", "final": {"question": "Show all locations where a gas station for company with market value greater than 100 is located.", "sql": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100", "source_tables": ["company", "station_company", "gas_station"]}}
{"sample_id": 2027, "db_id": "gas_company", "final": {"question": "Show the manager name for gas stations belonging to the ExxonMobil company.", "sql": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'", "source_tables": ["company", "station_company", "gas_station"]}}
{"sample_id": 1994, "db_id": "gas_company", "final": {"question": "What is the total number of companies?", "sql": "SELECT count(*) FROM company", "source_tables": ["company"]}}
{"sample_id": 2020, "db_id": "gas_company", "final": {"question": "What are the headquarters that have both a company in the banking and 'oil and gas' industries?", "sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'", "source_tables": ["company"]}}
{"sample_id": 2044, "db_id": "party_people", "final": {"question": "Count the number of different parties.", "sql": "SELECT count(DISTINCT party_name) FROM party", "source_tables": ["party"]}}
{"sample_id": 2073, "db_id": "party_people", "final": {"question": "Show all member names who are not in charge of any event.", "sql": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id", "source_tables": ["party_events", "member"]}}
{"sample_id": 2039, "db_id": "party_people", "final": {"question": "How many regions do we have?", "sql": "SELECT count(*) FROM region", "source_tables": ["region"]}}
{"sample_id": 2067, "db_id": "party_people", "final": {"question": "Show member names that are not in the Progress Party.", "sql": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \"Progress Party\"", "source_tables": ["member", "party"]}}
{"sample_id": 2064, "db_id": "party_people", "final": {"question": "What are the names of parties that have no members?", "sql": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)", "source_tables": ["member", "party"]}}
{"sample_id": 2058, "db_id": "party_people", "final": {"question": "How many members are in each party?", "sql": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id", "source_tables": ["member", "party"]}}
{"sample_id": 2075, "db_id": "party_people", "final": {"question": "What are the names of parties with at least 2 events?", "sql": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2", "source_tables": ["party_events", "party"]}}
{"sample_id": 2047, "db_id": "party_people", "final": {"question": "Show the minister who took office after 1961 or before 1959.", "sql": "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959", "source_tables": ["party"]}}
{"sample_id": 2040, "db_id": "party_people", "final": {"question": "Count the number of regions.", "sql": "SELECT count(*) FROM region", "source_tables": ["region"]}}
{"sample_id": 2052, "db_id": "party_people", "final": {"question": "Who are the ministers and what parties do they belong to, listed descending by the times they took office?", "sql": "SELECT minister ,  party_name FROM party ORDER BY took_office DESC", "source_tables": ["party"]}}
{"sample_id": 2097, "db_id": "pilot_record", "final": {"question": "List the names of pilots that do not have any record.", "sql": "SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)", "source_tables": ["pilot", "pilot_record"]}}
{"sample_id": 2087, "db_id": "pilot_record", "final": {"question": "Show the names of pilots from team \"Bradley\" or \"Fordham\".", "sql": "SELECT Pilot_name FROM pilot WHERE Team  =  \"Bradley\" OR Team  =  \"Fordham\"", "source_tables": ["pilot"]}}
{"sample_id": 2088, "db_id": "pilot_record", "final": {"question": "What is the joined year of the pilot of the highest rank?", "sql": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1", "source_tables": ["pilot"]}}
{"sample_id": 2122, "db_id": "cre_Doc_Control_Systems", "final": {"question": "List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.", "sql": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";", "source_tables": ["ref_shipping_agents", "documents"]}}
{"sample_id": 2128, "db_id": "cre_Doc_Control_Systems", "final": {"question": "List the employees who have not showed up in any circulation history of documents. List the employee's name.", "sql": "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id", "source_tables": ["circulation_history", "employees"]}}
{"sample_id": 2124, "db_id": "cre_Doc_Control_Systems", "final": {"question": "How many draft copies does the document with id 2 have?", "sql": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;", "source_tables": ["draft_copies"]}}
{"sample_id": 2109, "db_id": "cre_Doc_Control_Systems", "final": {"question": "How many employees does each role have? List role description, id and number of employees.", "sql": "SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;", "source_tables": ["roles", "employees"]}}
{"sample_id": 2114, "db_id": "cre_Doc_Control_Systems", "final": {"question": "List the document ids for any documents with the status code done and the type code paper.", "sql": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";", "source_tables": ["documents"]}}
{"sample_id": 2130, "db_id": "cre_Doc_Control_Systems", "final": {"question": "For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.", "sql": "SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;", "source_tables": ["circulation_history"]}}
{"sample_id": 2112, "db_id": "cre_Doc_Control_Systems", "final": {"question": "How many documents have the status code done?", "sql": "SELECT count(*) FROM Documents WHERE document_status_code = \"done\";", "source_tables": ["documents"]}}
{"sample_id": 2105, "db_id": "cre_Doc_Control_Systems", "final": {"question": "What is the description of role code ED?", "sql": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";", "source_tables": ["roles"]}}
{"sample_id": 2141, "db_id": "local_govt_in_alabama", "final": {"question": "What is the id of the event with the most participants?", "sql": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["participants_in_events"]}}
{"sample_id": 2139, "db_id": "local_govt_in_alabama", "final": {"question": "What is the most common participant type?", "sql": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["participants"]}}
{"sample_id": 2145, "db_id": "local_govt_in_alabama", "final": {"question": "What are all the distinct participant ids who attended any events?", "sql": "SELECT count(DISTINCT participant_id) FROM participants_in_Events", "source_tables": ["participants_in_events"]}}
{"sample_id": 2189, "db_id": "formula_1", "final": {"question": "What is the id and stop number for each driver that has a shorter pit stop than the driver in the race with id 841?", "sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)", "source_tables": ["pitstops"]}}
{"sample_id": 2180, "db_id": "formula_1", "final": {"question": "What are the numbers of constructors for different nationalities?", "sql": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality", "source_tables": ["constructors"]}}
{"sample_id": 2194, "db_id": "formula_1", "final": {"question": "List the names of all distinct races in reversed  lexicographic order?", "sql": "SELECT DISTINCT name FROM races ORDER BY name DESC", "source_tables": ["races"]}}
{"sample_id": 2178, "db_id": "formula_1", "final": {"question": "Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?", "sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20", "source_tables": ["driverstandings", "drivers"]}}
{"sample_id": 2205, "db_id": "formula_1", "final": {"question": "What is the id and last name of the driver who participated in the most races after 2010?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["results", "drivers", "races"]}}
{"sample_id": 2164, "db_id": "formula_1", "final": {"question": "How many drivers participated in the race Australian Grand Prix held in 2009?", "sql": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009", "source_tables": ["results", "races"]}}
{"sample_id": 2166, "db_id": "formula_1", "final": {"question": "How many drivers did not participate in the races held in 2009?", "sql": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )", "source_tables": ["results", "races"]}}
{"sample_id": 2224, "db_id": "formula_1", "final": {"question": "Find the id and surname of the driver who participated the most number of races?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["results", "drivers", "races"]}}
{"sample_id": 2221, "db_id": "formula_1", "final": {"question": "What is the id, forename, and number of races for all drivers that have participated in at least 2 races?", "sql": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2", "source_tables": ["results", "drivers", "races"]}}
{"sample_id": 2210, "db_id": "formula_1", "final": {"question": "Find the names of Japanese constructors that have once earned more than 5 points?", "sql": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5", "source_tables": ["constructors", "constructorstandings"]}}
{"sample_id": 2160, "db_id": "formula_1", "final": {"question": "What is the id and family name of the driver who has the longest laptime?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1", "source_tables": ["drivers", "laptimes"]}}
{"sample_id": 2216, "db_id": "formula_1", "final": {"question": "What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "sql": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "source_tables": ["results", "races"]}}
{"sample_id": 2199, "db_id": "formula_1", "final": {"question": "What are the names of all races that occurred after 12:00:00 or before 09:00:00?", "sql": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"", "source_tables": ["races"]}}
{"sample_id": 2146, "db_id": "formula_1", "final": {"question": "What is the name of the race held most recently?", "sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1", "source_tables": ["races"]}}
{"sample_id": 2220, "db_id": "formula_1", "final": {"question": "Find the id, forename and number of races of all drivers who have at least participated in two races?", "sql": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2", "source_tables": ["results", "drivers", "races"]}}
{"sample_id": 2168, "db_id": "formula_1", "final": {"question": "Give me a list of names and years of races that had any driver whose forename is Lewis?", "sql": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"", "source_tables": ["results", "drivers", "races"]}}
{"sample_id": 2253, "db_id": "machine_repair", "final": {"question": "What are the names of the technicians that have not been assigned to repair machines?", "sql": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)", "source_tables": ["technician", "repair_assignment"]}}
{"sample_id": 2235, "db_id": "machine_repair", "final": {"question": "What are the names of the technicians aged either 36 or 37?", "sql": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37", "source_tables": ["technician"]}}
{"sample_id": 2237, "db_id": "machine_repair", "final": {"question": "What is the starting year for the oldest technician?", "sql": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1", "source_tables": ["technician"]}}
{"sample_id": 2232, "db_id": "machine_repair", "final": {"question": "List the name of technicians whose team is not \"NYY\".", "sql": "SELECT Name FROM technician WHERE Team != \"NYY\"", "source_tables": ["technician"]}}
{"sample_id": 2236, "db_id": "machine_repair", "final": {"question": "What is the starting year of the oldest technicians?", "sql": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1", "source_tables": ["technician"]}}
{"sample_id": 2255, "db_id": "machine_repair", "final": {"question": "What are the starting years shared by the technicians from the team \"CLE\" or \"CWS\"?", "sql": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\"", "source_tables": ["technician"]}}
{"sample_id": 2282, "db_id": "entrepreneur", "final": {"question": "What is the investor that has invested in the most number of entrepreneurs?", "sql": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["entrepreneur"]}}
{"sample_id": 2281, "db_id": "entrepreneur", "final": {"question": "How many entrepreneurs correspond to each investor?", "sql": "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor", "source_tables": ["entrepreneur"]}}
{"sample_id": 2271, "db_id": "entrepreneur", "final": {"question": "Return the weight of the shortest person.", "sql": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1", "source_tables": ["people"]}}
{"sample_id": 2293, "db_id": "entrepreneur", "final": {"question": "Count the number of different companies.", "sql": "SELECT count(DISTINCT Company) FROM entrepreneur", "source_tables": ["entrepreneur"]}}
{"sample_id": 2263, "db_id": "entrepreneur", "final": {"question": "Return the average money requested across all entrepreneurs.", "sql": "SELECT avg(Money_Requested) FROM entrepreneur", "source_tables": ["entrepreneur"]}}
{"sample_id": 2279, "db_id": "entrepreneur", "final": {"question": "Return the weights of entrepreneurs, ordered descending by amount of money requested.", "sql": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC", "source_tables": ["people", "entrepreneur"]}}
{"sample_id": 2265, "db_id": "entrepreneur", "final": {"question": "Return the names of people, ordered by weight ascending.", "sql": "SELECT Name FROM People ORDER BY Weight ASC", "source_tables": ["people"]}}
{"sample_id": 2270, "db_id": "entrepreneur", "final": {"question": "What is the weight of the shortest person?", "sql": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1", "source_tables": ["people"]}}
{"sample_id": 2298, "db_id": "perpetrator", "final": {"question": "List the number of people injured by perpetrators in ascending order.", "sql": "SELECT Injured FROM perpetrator ORDER BY Injured ASC", "source_tables": ["perpetrator"]}}
{"sample_id": 2297, "db_id": "perpetrator", "final": {"question": "List the date of perpetrators in descending order of the number of people killed.", "sql": "SELECT Date FROM perpetrator ORDER BY Killed DESC", "source_tables": ["perpetrator"]}}
{"sample_id": 2308, "db_id": "perpetrator", "final": {"question": "What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.", "sql": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country", "source_tables": ["perpetrator"]}}
{"sample_id": 2309, "db_id": "perpetrator", "final": {"question": "What is the country that has the most perpetrators?", "sql": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["perpetrator"]}}
{"sample_id": 2304, "db_id": "perpetrator", "final": {"question": "What is the name of the perpetrator with the biggest weight.", "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1", "source_tables": ["perpetrator", "people"]}}
{"sample_id": 2320, "db_id": "csu_1", "final": {"question": "What campuses are located in Chico?", "sql": "SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"", "source_tables": ["campuses"]}}
{"sample_id": 2384, "db_id": "csu_1", "final": {"question": "What is the campus fee in the year 2000 for San Jose State University?", "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000", "source_tables": ["csu_fees", "campuses"]}}
{"sample_id": 2357, "db_id": "csu_1", "final": {"question": "How many campuses are there in Los Angeles county?", "sql": "SELECT count(*) FROM campuses WHERE county  =  \"Los Angeles\"", "source_tables": ["campuses"]}}
{"sample_id": 2322, "db_id": "csu_1", "final": {"question": "What are the campuses that opened in 1958?", "sql": "SELECT campus FROM campuses WHERE YEAR  =  1958", "source_tables": ["campuses"]}}
{"sample_id": 2375, "db_id": "csu_1", "final": {"question": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1", "source_tables": ["faculty", "degrees", "campuses"]}}
{"sample_id": 2349, "db_id": "csu_1", "final": {"question": "report the total number of degrees granted between 1998 and 2002.", "sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus", "source_tables": ["degrees", "campuses"]}}
{"sample_id": 2324, "db_id": "csu_1", "final": {"question": "What campuses opened before 1800?", "sql": "SELECT campus FROM campuses WHERE YEAR  <  1800", "source_tables": ["campuses"]}}
{"sample_id": 2325, "db_id": "csu_1", "final": {"question": "Which campus was opened between 1935 and 1939?", "sql": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939", "source_tables": ["campuses"]}}
{"sample_id": 2319, "db_id": "csu_1", "final": {"question": "What are the names of all campuses located at Chico?", "sql": "SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"", "source_tables": ["campuses"]}}
{"sample_id": 2383, "db_id": "csu_1", "final": {"question": "Find the campus fee of \"San Jose State University\" in year 2000.", "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000", "source_tables": ["csu_fees", "campuses"]}}
{"sample_id": 2352, "db_id": "csu_1", "final": {"question": "What is the total number of degrees granted after 2000 for each Orange county campus?", "sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus", "source_tables": ["degrees", "campuses"]}}
{"sample_id": 2355, "db_id": "csu_1", "final": {"question": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?", "sql": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200", "source_tables": ["enrollments", "campuses"]}}
{"sample_id": 2348, "db_id": "csu_1", "final": {"question": "What is the average fee for a CSU campus in the year of 2005?", "sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005", "source_tables": ["csu_fees"]}}
{"sample_id": 2358, "db_id": "csu_1", "final": {"question": "How many campuses exist are in the county of LA?", "sql": "SELECT count(*) FROM campuses WHERE county  =  \"Los Angeles\"", "source_tables": ["campuses"]}}
{"sample_id": 2402, "db_id": "candidate_poll", "final": {"question": "What are the average height and weight across males (sex is M)?", "sql": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'", "source_tables": ["people"]}}
{"sample_id": 2419, "db_id": "candidate_poll", "final": {"question": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.", "sql": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate", "source_tables": ["candidate"]}}
{"sample_id": 2418, "db_id": "candidate_poll", "final": {"question": "Count the number of people of each sex who have a weight higher than 85.", "sql": "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex", "source_tables": ["people"]}}
{"sample_id": 2394, "db_id": "candidate_poll", "final": {"question": "What is the id of the candidate with the lowest oppose rate?", "sql": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1", "source_tables": ["candidate"]}}
{"sample_id": 2404, "db_id": "candidate_poll", "final": {"question": "What are the names of people who have a height greater than 200 or less than 190?", "sql": "SELECT name FROM people WHERE height  >  200 OR height  <  190", "source_tables": ["people"]}}
{"sample_id": 2408, "db_id": "candidate_poll", "final": {"question": "What is the name and sex of the candidate with the highest support rate?", "sql": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1", "source_tables": ["people", "candidate"]}}
{"sample_id": 2392, "db_id": "candidate_poll", "final": {"question": "Return the top 3 greatest support rates.", "sql": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3", "source_tables": ["candidate"]}}
{"sample_id": 2406, "db_id": "candidate_poll", "final": {"question": "What are the average and minimum weights for people of each sex?", "sql": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex", "source_tables": ["people"]}}
{"sample_id": 2518, "db_id": "movie_1", "final": {"question": "What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?", "sql": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000", "source_tables": ["rating", "movie", "reviewer"]}}
{"sample_id": 2447, "db_id": "movie_1", "final": {"question": "What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.", "sql": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5", "source_tables": ["rating", "movie"]}}
{"sample_id": 2441, "db_id": "movie_1", "final": {"question": "What is the total number of ratings that has more than 3 stars?", "sql": "SELECT count(*) FROM Rating WHERE stars  >  3", "source_tables": ["rating"]}}
{"sample_id": 2499, "db_id": "movie_1", "final": {"question": "Find the title and score of the movie with the lowest rating among all movies directed by each director.", "sql": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director", "source_tables": ["rating", "movie"]}}
{"sample_id": 2440, "db_id": "movie_1", "final": {"question": "What is the id of the reviewer named Daniel Lewis?", "sql": "SELECT rID FROM Reviewer WHERE name  =  \"Daniel Lewis\"", "source_tables": ["reviewer"]}}
{"sample_id": 2478, "db_id": "movie_1", "final": {"question": "What are the titles of all movies that were not reviewed by Chris Jackson?", "sql": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'", "source_tables": ["rating", "movie", "reviewer"]}}
{"sample_id": 2433, "db_id": "movie_1", "final": {"question": "Who is the director of movie Avatar?", "sql": "SELECT director FROM Movie WHERE title  = 'Avatar'", "source_tables": ["movie"]}}
{"sample_id": 2506, "db_id": "movie_1", "final": {"question": "What are the names of the reviewers who have rated a movie more than 3 stars before?", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3", "source_tables": ["rating", "reviewer"]}}
{"sample_id": 2493, "db_id": "movie_1", "final": {"question": "What are the names and years of the movies that has the top 3 highest rating star?", "sql": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3", "source_tables": ["rating", "movie"]}}
{"sample_id": 2432, "db_id": "movie_1", "final": {"question": "How many movies were made before 2000?", "sql": "SELECT count(*) FROM Movie WHERE YEAR  <  2000", "source_tables": ["movie"]}}
{"sample_id": 2504, "db_id": "movie_1", "final": {"question": "What are the titles of all movies that have between 3 and 5 stars?", "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5", "source_tables": ["rating", "movie"]}}
{"sample_id": 2517, "db_id": "movie_1", "final": {"question": "What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?", "sql": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000", "source_tables": ["rating", "movie", "reviewer"]}}
{"sample_id": 2514, "db_id": "movie_1", "final": {"question": "What are the ids of all reviewers who did not give 4 stars?", "sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4", "source_tables": ["rating"]}}
{"sample_id": 2456, "db_id": "movie_1", "final": {"question": "For the oldest movie listed, what is its average rating and title?", "sql": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)", "source_tables": ["rating", "movie"]}}
{"sample_id": 2461, "db_id": "movie_1", "final": {"question": "What is the names of movies whose created year is after all movies directed by Steven Spielberg?", "sql": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")", "source_tables": ["movie"]}}
{"sample_id": 2471, "db_id": "movie_1", "final": {"question": "Find the names of all directors whose movies are rated by Sarah Martinez.", "sql": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'", "source_tables": ["rating", "movie", "reviewer"]}}
{"sample_id": 2508, "db_id": "movie_1", "final": {"question": "What is the average rating for each movie that has never been reviewed by Brittany Harris?", "sql": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\") GROUP BY mID", "source_tables": ["rating", "reviewer"]}}
{"sample_id": 2464, "db_id": "movie_1", "final": {"question": "What are the titles and directors of all movies that have a rating higher than the average James Cameron film rating?", "sql": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")", "source_tables": ["rating", "movie"]}}
{"sample_id": 2468, "db_id": "movie_1", "final": {"question": "What are the names of all reviewers that have rated 3 or more movies?", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3", "source_tables": ["rating", "reviewer"]}}
{"sample_id": 2475, "db_id": "movie_1", "final": {"question": "Return all reviewer names and movie names together in a single list.", "sql": "SELECT name FROM Reviewer UNION SELECT title FROM Movie", "source_tables": ["movie", "reviewer"]}}
{"sample_id": 2438, "db_id": "movie_1", "final": {"question": "What is the id of the reviewer whose name includes the word \"Mike\"?", "sql": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"", "source_tables": ["reviewer"]}}
{"sample_id": 2552, "db_id": "county_public_safety", "final": {"question": "What are the crime rates of counties that contain cities that have white percentages of over 90?", "sql": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90", "source_tables": ["city", "county_public_safety"]}}
{"sample_id": 2551, "db_id": "county_public_safety", "final": {"question": "Show the crime rate of counties with a city having white percentage more than 90.", "sql": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90", "source_tables": ["city", "county_public_safety"]}}
{"sample_id": 2531, "db_id": "county_public_safety", "final": {"question": "What are the minimum and maximum crime rate of counties?", "sql": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety", "source_tables": ["county_public_safety"]}}
{"sample_id": 2559, "db_id": "county_public_safety", "final": {"question": "Show the police force shared by counties with location on the east and west.", "sql": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\"", "source_tables": ["county_public_safety"]}}
{"sample_id": 2560, "db_id": "county_public_safety", "final": {"question": "Which police forces operate in both counties that are located in the East and in the West?", "sql": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\"", "source_tables": ["county_public_safety"]}}
{"sample_id": 2553, "db_id": "county_public_safety", "final": {"question": "Please show the police forces and the number of counties with each police force.", "sql": "SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force", "source_tables": ["county_public_safety"]}}
{"sample_id": 2561, "db_id": "county_public_safety", "final": {"question": "Show the names of cities in counties that have a crime rate less than 100.", "sql": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)", "source_tables": ["city", "county_public_safety"]}}
{"sample_id": 2541, "db_id": "county_public_safety", "final": {"question": "List the names of the city with the top 5 white percentages.", "sql": "SELECT Name FROM city ORDER BY White DESC LIMIT 5", "source_tables": ["city"]}}
{"sample_id": 2605, "db_id": "inn_1", "final": {"question": "Find the name of the room with the maximum occupancy.", "sql": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;", "source_tables": ["rooms"]}}
{"sample_id": 2613, "db_id": "inn_1", "final": {"question": "Find the average and minimum price of the rooms in different decor.", "sql": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;", "source_tables": ["rooms"]}}
{"sample_id": 2577, "db_id": "inn_1", "final": {"question": "How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?", "sql": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\";", "source_tables": ["reservations"]}}
{"sample_id": 2628, "db_id": "inn_1", "final": {"question": "What are the name of rooms that cost more than the average.", "sql": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );", "source_tables": ["rooms"]}}
{"sample_id": 2638, "db_id": "inn_1", "final": {"question": "What are the name of rooms booked by customers whose first name has \"ROY\" in part?", "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2606, "db_id": "inn_1", "final": {"question": "What is the name of the room that can accommodate the most people?", "sql": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;", "source_tables": ["rooms"]}}
{"sample_id": 2602, "db_id": "inn_1", "final": {"question": "How many rooms have a king bed?", "sql": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";", "source_tables": ["rooms"]}}
{"sample_id": 2593, "db_id": "inn_1", "final": {"question": "What kind of decor has the least number of reservations?", "sql": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2634, "db_id": "inn_1", "final": {"question": "What are the names of rooms whose reservation frequency exceeds 60 times?", "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2637, "db_id": "inn_1", "final": {"question": "Find the name of rooms booked by some customers whose first name contains ROY.", "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2598, "db_id": "inn_1", "final": {"question": "What are the first and last names of people who payed more than the rooms' base prices?", "sql": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2632, "db_id": "inn_1", "final": {"question": "For each room, find its name and the number of times reservations were made for it.", "sql": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2590, "db_id": "inn_1", "final": {"question": "For each bed type, find the average base price of different bed type.", "sql": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;", "source_tables": ["rooms"]}}
{"sample_id": 2619, "db_id": "inn_1", "final": {"question": "For each bed type, find the average room price.", "sql": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;", "source_tables": ["rooms"]}}
{"sample_id": 2616, "db_id": "inn_1", "final": {"question": "Sort all the rooms according to the price. Just report the room names.", "sql": "SELECT roomName FROM Rooms ORDER BY basePrice;", "source_tables": ["rooms"]}}
{"sample_id": 2585, "db_id": "inn_1", "final": {"question": "Which room has cheapest base price? List the room's name and the base price.", "sql": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;", "source_tables": ["rooms"]}}
{"sample_id": 2652, "db_id": "local_govt_mdm", "final": {"question": "Which distinct source system code includes the substring 'en'?", "sql": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'", "source_tables": ["cmi_cross_references"]}}
{"sample_id": 2646, "db_id": "local_govt_mdm", "final": {"question": "How many different source system code for the cmi cross references are there?", "sql": "SELECT count(DISTINCT source_system_code) FROM CMI_cross_references", "source_tables": ["cmi_cross_references"]}}
{"sample_id": 2639, "db_id": "local_govt_mdm", "final": {"question": "what are the details of the cmi masters that have the cross reference code 'Tax'?", "sql": "SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T2.source_system_code  =  'Tax'", "source_tables": ["cmi_cross_references", "customer_master_index"]}}
{"sample_id": 2650, "db_id": "local_govt_mdm", "final": {"question": "What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?", "sql": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'", "source_tables": ["cmi_cross_references", "customer_master_index"]}}
{"sample_id": 2675, "db_id": "party_host", "final": {"question": "Show the locations of parties with hosts older than 50.", "sql": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50", "source_tables": ["party", "host", "party_host"]}}
{"sample_id": 2678, "db_id": "party_host", "final": {"question": "Which parties have more than 20 hosts? Give me the host names for these parties.", "sql": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20", "source_tables": ["party", "host", "party_host"]}}
{"sample_id": 2677, "db_id": "party_host", "final": {"question": "Show the host names for parties with number of hosts greater than 20.", "sql": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20", "source_tables": ["party", "host", "party_host"]}}
{"sample_id": 2681, "db_id": "party_host", "final": {"question": "List the names of hosts who did not serve as a host of any party in our record.", "sql": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)", "source_tables": ["host", "party_host"]}}
{"sample_id": 2661, "db_id": "party_host", "final": {"question": "What is the average number of hosts for parties?", "sql": "SELECT avg(Number_of_hosts) FROM party", "source_tables": ["party"]}}
{"sample_id": 2666, "db_id": "party_host", "final": {"question": "How many hosts does each nationality have? List the nationality and the count.", "sql": "SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality", "source_tables": ["host"]}}
{"sample_id": 2724, "db_id": "storm_record", "final": {"question": "What are the names of regions that were affected by the storm in which the most people died?", "sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1", "source_tables": ["affected_region", "storm", "region"]}}
{"sample_id": 2721, "db_id": "storm_record", "final": {"question": "Show the region name with at least two storms.", "sql": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2", "source_tables": ["affected_region", "region"]}}
{"sample_id": 2717, "db_id": "storm_record", "final": {"question": "What are the region names affected by the storm with a number of deaths of least 10?", "sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10", "source_tables": ["affected_region", "storm", "region"]}}
{"sample_id": 2722, "db_id": "storm_record", "final": {"question": "What are the names of regions with two or more storms?", "sql": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2", "source_tables": ["affected_region", "region"]}}
{"sample_id": 2714, "db_id": "storm_record", "final": {"question": "What are the names of storms that both affected two or more regions and affected a total of 10 or more cities?", "sql": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10", "source_tables": ["affected_region", "storm"]}}
{"sample_id": 2703, "db_id": "storm_record", "final": {"question": "Show the name for regions not affected.", "sql": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)", "source_tables": ["affected_region", "region"]}}
{"sample_id": 2702, "db_id": "storm_record", "final": {"question": "Count the number of different affected regions.", "sql": "SELECT count(DISTINCT region_id) FROM affected_region", "source_tables": ["affected_region"]}}
{"sample_id": 2712, "db_id": "storm_record", "final": {"question": "What are the names of storms that did not affect any regions?", "sql": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)", "source_tables": ["affected_region", "storm"]}}
{"sample_id": 2704, "db_id": "storm_record", "final": {"question": "What are the names of regions that were not affected?", "sql": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)", "source_tables": ["affected_region", "region"]}}
{"sample_id": 2707, "db_id": "storm_record", "final": {"question": "List the name for storms and the number of affected regions for each storm.", "sql": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id", "source_tables": ["affected_region", "storm"]}}
{"sample_id": 2768, "db_id": "election", "final": {"question": "For each county, find the name of the county and the number of delegates from that county.", "sql": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id", "source_tables": ["election", "county"]}}
{"sample_id": 2734, "db_id": "election", "final": {"question": "What are the maximum and minimum population of the counties?", "sql": "SELECT max(Population) ,  min(Population) FROM county", "source_tables": ["county"]}}
{"sample_id": 2785, "db_id": "election", "final": {"question": "Show the people that have been governor the most times.", "sql": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["party"]}}
{"sample_id": 2763, "db_id": "election", "final": {"question": "Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?", "sql": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2", "source_tables": ["election", "party"]}}
{"sample_id": 2751, "db_id": "election", "final": {"question": "Show the delegates and the names of county they belong to.", "sql": "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District", "source_tables": ["election", "county"]}}
{"sample_id": 2773, "db_id": "election", "final": {"question": "Return the names of all counties sorted by county name in descending alphabetical order.", "sql": "SELECT County_name FROM county ORDER BY County_name DESC", "source_tables": ["county"]}}
{"sample_id": 2770, "db_id": "election", "final": {"question": "For each party, return the name of the party and the number of delegates from that party.", "sql": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party", "source_tables": ["election", "party"]}}
{"sample_id": 2765, "db_id": "election", "final": {"question": "Return all the committees that have delegates from Democratic party.", "sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"", "source_tables": ["election", "party"]}}
{"sample_id": 2756, "db_id": "election", "final": {"question": "Count the number of distinct delegates who are from counties with population above 50000.", "sql": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000", "source_tables": ["election", "county"]}}
{"sample_id": 2755, "db_id": "election", "final": {"question": "How many distinct delegates are from counties with population larger than 50000?", "sql": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000", "source_tables": ["election", "county"]}}
{"sample_id": 2749, "db_id": "election", "final": {"question": "Show all the information about election.", "sql": "SELECT * FROM election", "source_tables": ["election"]}}
{"sample_id": 2745, "db_id": "election", "final": {"question": "Show the lieutenant governor and comptroller from the democratic party.", "sql": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"", "source_tables": ["party"]}}
{"sample_id": 2789, "db_id": "election", "final": {"question": "What are the names of parties that do not have delegates in election?", "sql": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)", "source_tables": ["election", "party"]}}
{"sample_id": 2729, "db_id": "election", "final": {"question": "Show the county name and population of all counties.", "sql": "SELECT County_name ,  Population FROM county", "source_tables": ["county"]}}
{"sample_id": 2782, "db_id": "election", "final": {"question": "Which party has two or more records?", "sql": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2", "source_tables": ["party"]}}
{"sample_id": 2800, "db_id": "news_report", "final": {"question": "What is the nationality of the journalist with the largest number of years working?", "sql": "SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1", "source_tables": ["journalist"]}}
{"sample_id": 2804, "db_id": "news_report", "final": {"question": "Show the dates, places, and names of events in descending order of the attendance.", "sql": "SELECT Date ,  Name ,  venue FROM event ORDER BY Event_Attendance DESC", "source_tables": ["event"]}}
{"sample_id": 2799, "db_id": "news_report", "final": {"question": "What is the average number of years spent working as a journalist?", "sql": "SELECT avg(Years_working) FROM journalist", "source_tables": ["journalist"]}}
{"sample_id": 2801, "db_id": "news_report", "final": {"question": "Show the different nationalities and the number of journalists of each nationality.", "sql": "SELECT Nationality ,  COUNT(*) FROM journalist GROUP BY Nationality", "source_tables": ["journalist"]}}
{"sample_id": 2802, "db_id": "news_report", "final": {"question": "Show the most common nationality for journalists.", "sql": "SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["journalist"]}}
{"sample_id": 2814, "db_id": "restaurant_1", "final": {"question": "What is the address of the restaurant Subway?", "sql": "SELECT Address FROM Restaurant WHERE ResName = \"Subway\";", "source_tables": ["restaurant"]}}
{"sample_id": 2816, "db_id": "restaurant_1", "final": {"question": "List all restaurant types.", "sql": "SELECT ResTypeName FROM Restaurant_Type;", "source_tables": ["restaurant_type"]}}
{"sample_id": 2832, "db_id": "restaurant_1", "final": {"question": "When did Linda Smith visit Subway?", "sql": "SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";", "source_tables": ["student", "visits_restaurant", "restaurant"]}}
{"sample_id": 2828, "db_id": "restaurant_1", "final": {"question": "List all female students age is older than 18 who is not majoring in 600. List students' first name and last name.", "sql": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F';", "source_tables": ["student"]}}
{"sample_id": 2817, "db_id": "restaurant_1", "final": {"question": "What is the description of the restaurant type Sandwich?", "sql": "SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = \"Sandwich\";", "source_tables": ["restaurant_type"]}}
{"sample_id": 2836, "db_id": "customer_deliveries", "final": {"question": "Find the name and price of the product that has been ordered the greatest number of times.", "sql": "SELECT t1.product_name ,   t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["regular_order_products", "products"]}}
{"sample_id": 2850, "db_id": "customer_deliveries", "final": {"question": "List the state names and the number of customers living in each state.", "sql": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county", "source_tables": ["addresses", "customer_addresses"]}}
{"sample_id": 2841, "db_id": "customer_deliveries", "final": {"question": "Find the names of customers who are not living in the state of California.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'", "source_tables": ["customers", "addresses", "customer_addresses"]}}
{"sample_id": 2835, "db_id": "customer_deliveries", "final": {"question": "Find the ids of orders whose status is 'Success'.", "sql": "SELECT actual_order_id FROM actual_orders WHERE order_status_code  =  'Success'", "source_tables": ["actual_orders"]}}
{"sample_id": 2853, "db_id": "icfp_1", "final": {"question": "How many institutions are there?", "sql": "SELECT count(*) FROM inst", "source_tables": ["inst"]}}
{"sample_id": 2900, "db_id": "icfp_1", "final": {"question": "Which papers have the substring \"Database\" in their titles? Show the titles of the papers.", "sql": "SELECT title FROM papers WHERE title LIKE \"%Database%\"", "source_tables": ["papers"]}}
{"sample_id": 2860, "db_id": "icfp_1", "final": {"question": "Find the titles of all the papers written by \"Aaron Turon\".", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"", "source_tables": ["papers", "authorship", "authors"]}}
{"sample_id": 2902, "db_id": "icfp_1", "final": {"question": "Who has written a paper that has the word \"Functional\" in its title? Return the first names of the authors.", "sql": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\"", "source_tables": ["papers", "authorship", "authors"]}}
{"sample_id": 2855, "db_id": "icfp_1", "final": {"question": "How many papers are published in total?", "sql": "SELECT count(*) FROM papers", "source_tables": ["papers"]}}
{"sample_id": 2866, "db_id": "icfp_1", "final": {"question": "What is the name of the institution the author \"Katsuhiro Ueno\" belongs to?", "sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"", "source_tables": ["inst", "authorship", "authors"]}}
{"sample_id": 2876, "db_id": "icfp_1", "final": {"question": "List the titles of the papers whose authors are from the institution \"Indiana University\".", "sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"", "source_tables": ["inst", "authorship", "papers"]}}
{"sample_id": 2859, "db_id": "icfp_1", "final": {"question": "Find all the papers published by \"Aaron Turon\".", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"", "source_tables": ["papers", "authorship", "authors"]}}
{"sample_id": 2889, "db_id": "icfp_1", "final": {"question": "Find the titles of papers whose first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"?", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"", "source_tables": ["papers", "inst", "authorship", "authors"]}}
{"sample_id": 2861, "db_id": "icfp_1", "final": {"question": "How many papers have \"Atsushi Ohori\" published?", "sql": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"", "source_tables": ["papers", "authorship", "authors"]}}
{"sample_id": 2910, "db_id": "icfp_1", "final": {"question": "Which authors have first name \"Amal\"? List their last names.", "sql": "SELECT lname FROM authors WHERE fname  =  \"Amal\"", "source_tables": ["authors"]}}
{"sample_id": 2864, "db_id": "icfp_1", "final": {"question": "Which institution is the author \"Matthias Blume\" belong to? Give me the name of the institution.", "sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"", "source_tables": ["inst", "authorship", "authors"]}}
{"sample_id": 2897, "db_id": "icfp_1", "final": {"question": "Find the titles of the papers that contain the word \"ML\".", "sql": "SELECT title FROM papers WHERE title LIKE \"%ML%\"", "source_tables": ["papers"]}}
{"sample_id": 2865, "db_id": "icfp_1", "final": {"question": "Which institution does \"Katsuhiro Ueno\" belong to?", "sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"", "source_tables": ["inst", "authorship", "authors"]}}
{"sample_id": 2958, "db_id": "sakila_1", "final": {"question": "What are the names and ids of the different categories, and how many films are in each?", "sql": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id", "source_tables": ["film_category", "category"]}}
{"sample_id": 2994, "db_id": "sakila_1", "final": {"question": "Return the amount of the largest payment.", "sql": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1", "source_tables": ["payment"]}}
{"sample_id": 2964, "db_id": "sakila_1", "final": {"question": "Count the number of different languages in these films.", "sql": "SELECT count(DISTINCT language_id) FROM film", "source_tables": ["film"]}}
{"sample_id": 2988, "db_id": "sakila_1", "final": {"question": "Return the full name of the customer who made the first rental.", "sql": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1", "source_tables": ["customer", "rental"]}}
{"sample_id": 2936, "db_id": "sakila_1", "final": {"question": "What are the countries that contain 3 or more cities?", "sql": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3", "source_tables": ["city", "country"]}}
{"sample_id": 2948, "db_id": "sakila_1", "final": {"question": "What are the full names of actors who had roles in more than 30 films?", "sql": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30", "source_tables": ["film_actor", "actor"]}}
{"sample_id": 2931, "db_id": "sakila_1", "final": {"question": "Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.", "sql": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3", "source_tables": ["inventory", "film"]}}
{"sample_id": 2986, "db_id": "sakila_1", "final": {"question": "What are the titles of films that are either longer than 100 minutes or rated PG other than those that cost more than 200 to replace?", "sql": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200", "source_tables": ["film"]}}
{"sample_id": 2923, "db_id": "sakila_1", "final": {"question": "Which districts have at least two addresses?", "sql": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2", "source_tables": ["address"]}}
{"sample_id": 2949, "db_id": "sakila_1", "final": {"question": "Which store owns most items?", "sql": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["inventory"]}}
{"sample_id": 2966, "db_id": "sakila_1", "final": {"question": "Return the titles of any movies with an R rating.", "sql": "SELECT title FROM film WHERE rating  =  'R'", "source_tables": ["film"]}}
{"sample_id": 2984, "db_id": "sakila_1", "final": {"question": "Return the address and email of the customer with the first name Linda.", "sql": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'", "source_tables": ["customer", "address"]}}
{"sample_id": 2937, "db_id": "sakila_1", "final": {"question": "Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa.", "sql": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'", "source_tables": ["staff", "payment"]}}
{"sample_id": 2973, "db_id": "sakila_1", "final": {"question": "How many stores are there?", "sql": "SELECT count(*) FROM store", "source_tables": ["store"]}}
{"sample_id": 2972, "db_id": "sakila_1", "final": {"question": "What is the name of the language that the film 'AIRPORT POLLOCK' is in?", "sql": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'", "source_tables": ["language", "film"]}}
{"sample_id": 2961, "db_id": "sakila_1", "final": {"question": "What is the film title and inventory id of the item in the inventory which was rented most frequently?", "sql": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["inventory", "film", "rental"]}}
{"sample_id": 2989, "db_id": "sakila_1", "final": {"question": "What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'", "source_tables": ["staff", "customer", "rental"]}}
{"sample_id": 3061, "db_id": "loan_1", "final": {"question": "Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.", "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1", "source_tables": ["customer", "bank", "loan"]}}
{"sample_id": 3072, "db_id": "loan_1", "final": {"question": "What are the names of banks that have loaned money to customers with credit scores below 100?", "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100", "source_tables": ["customer", "bank", "loan"]}}
{"sample_id": 3026, "db_id": "loan_1", "final": {"question": "What are the names and account balances of customers with the letter a in their names?", "sql": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'", "source_tables": ["customer"]}}
{"sample_id": 3056, "db_id": "loan_1", "final": {"question": "What are the names of customers who have taken out more than one loan?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1", "source_tables": ["customer", "loan"]}}
{"sample_id": 3038, "db_id": "loan_1", "final": {"question": "What are the names of customers with credit score less than the average credit score across customers?", "sql": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)", "source_tables": ["customer"]}}
{"sample_id": 3025, "db_id": "loan_1", "final": {"question": "Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.", "sql": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'", "source_tables": ["customer"]}}
{"sample_id": 3012, "db_id": "loan_1", "final": {"question": "What are the names of banks in the state of New York?", "sql": "SELECT bname FROM bank WHERE state  =  'New York'", "source_tables": ["bank"]}}
{"sample_id": 3013, "db_id": "loan_1", "final": {"question": "List the name of all customers sorted by their account balance in ascending order.", "sql": "SELECT cust_name FROM customer ORDER BY acc_bal", "source_tables": ["customer"]}}
{"sample_id": 3066, "db_id": "loan_1", "final": {"question": "What are the different names and credit scores of customers who have taken a loan?", "sql": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id", "source_tables": ["customer", "loan"]}}
{"sample_id": 3024, "db_id": "loan_1", "final": {"question": "Count the number of different account types.", "sql": "SELECT count(DISTINCT acc_type) FROM customer", "source_tables": ["customer"]}}
{"sample_id": 3018, "db_id": "loan_1", "final": {"question": "What are the states, account types, and credit scores for customers who have 0 loans?", "sql": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0", "source_tables": ["customer"]}}
{"sample_id": 3019, "db_id": "loan_1", "final": {"question": "Find the number of different cities which banks are located at.", "sql": "SELECT count(DISTINCT city) FROM bank", "source_tables": ["bank"]}}
{"sample_id": 3005, "db_id": "loan_1", "final": {"question": "Find the average number of customers in all banks of Utah state.", "sql": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'", "source_tables": ["bank"]}}
{"sample_id": 3030, "db_id": "loan_1", "final": {"question": "What are the names of customers who have both savings and checking accounts?", "sql": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'", "source_tables": ["customer"]}}
{"sample_id": 3062, "db_id": "loan_1", "final": {"question": "What is the name of the bank branch that has lended the largest total amount in loans, specifically to customers with credit scores below 100?", "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1", "source_tables": ["customer", "bank", "loan"]}}
{"sample_id": 3047, "db_id": "loan_1", "final": {"question": "Find the state which has the most number of customers.", "sql": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1", "source_tables": ["bank"]}}
{"sample_id": 3109, "db_id": "behavior_monitoring", "final": {"question": "What are the id and zip code of the address with the highest monthly rental?", "sql": "SELECT T2.address_id ,  T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id ORDER BY monthly_rental DESC LIMIT 1", "source_tables": ["addresses", "student_addresses"]}}
{"sample_id": 3106, "db_id": "behavior_monitoring", "final": {"question": "Find the texts of assessment notes for teachers with last name \"Schuster\".", "sql": "SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schuster\"", "source_tables": ["teachers", "assessment_notes"]}}
{"sample_id": 3082, "db_id": "behavior_monitoring", "final": {"question": "How many distinct incident type codes are there?", "sql": "SELECT count(DISTINCT incident_type_code) FROM Behavior_Incident", "source_tables": ["behavior_incident"]}}
{"sample_id": 3112, "db_id": "behavior_monitoring", "final": {"question": "What are the first names and last names of students with address in Wisconsin state?", "sql": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Wisconsin\"", "source_tables": ["students", "addresses"]}}
{"sample_id": 3091, "db_id": "behavior_monitoring", "final": {"question": "Find the maximum and minimum monthly rental for all student addresses.", "sql": "SELECT max(monthly_rental) ,  min(monthly_rental) FROM Student_Addresses", "source_tables": ["student_addresses"]}}
{"sample_id": 3108, "db_id": "behavior_monitoring", "final": {"question": "Find the start and end dates of detentions of teachers with last name \"Schultz\".", "sql": "SELECT T1.datetime_detention_start ,  datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schultz\"", "source_tables": ["detention", "teachers"]}}
{"sample_id": 3099, "db_id": "behavior_monitoring", "final": {"question": "Find the id and last name of the student that has the most behavior incidents?", "sql": "SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["behavior_incident", "students"]}}
{"sample_id": 3079, "db_id": "behavior_monitoring", "final": {"question": "How many assessment notes are there in total?", "sql": "SELECT count(*) FROM ASSESSMENT_NOTES", "source_tables": ["assessment_notes"]}}
{"sample_id": 3148, "db_id": "assets_maintenance", "final": {"question": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.", "sql": "SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name", "source_tables": ["staff", "engineer_visits"]}}
{"sample_id": 3119, "db_id": "assets_maintenance", "final": {"question": "Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.", "sql": "SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2", "source_tables": ["asset_parts", "assets", "fault_log"]}}
{"sample_id": 3144, "db_id": "assets_maintenance", "final": {"question": "Which part has the least chargeable amount? List the part id and amount.", "sql": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1", "source_tables": ["parts"]}}
{"sample_id": 3142, "db_id": "assets_maintenance", "final": {"question": "What are all the distinct asset models?", "sql": "SELECT DISTINCT asset_model FROM Assets", "source_tables": ["assets"]}}
{"sample_id": 3146, "db_id": "assets_maintenance", "final": {"question": "What is the description of the type of the company who concluded its contracts most recently?", "sql": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code  =  T3.company_type_code ORDER BY T2.contract_end_date DESC LIMIT 1", "source_tables": ["third_party_companies", "maintenance_contracts", "ref_company_types"]}}
{"sample_id": 3139, "db_id": "assets_maintenance", "final": {"question": "Which staff have contacted which engineers? List the staff name and the engineer first name and last name.", "sql": "SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id", "source_tables": ["staff", "maintenance_engineers", "engineer_visits"]}}
{"sample_id": 3134, "db_id": "assets_maintenance", "final": {"question": "List the asset id, details, make and model for every asset.", "sql": "SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets", "source_tables": ["assets"]}}
{"sample_id": 3161, "db_id": "station_weather", "final": {"question": "How many different services are provided by all stations?", "sql": "SELECT count(DISTINCT services) FROM station", "source_tables": ["station"]}}
{"sample_id": 3153, "db_id": "station_weather", "final": {"question": "How many trains have 'Express' in their names?", "sql": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\"", "source_tables": ["train"]}}
{"sample_id": 3158, "db_id": "station_weather", "final": {"question": "What is the average high temperature for each day of week?", "sql": "SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week", "source_tables": ["weekly_weather"]}}
{"sample_id": 3155, "db_id": "station_weather", "final": {"question": "Find the number of trains starting from each origin.", "sql": "SELECT origin ,  count(*) FROM train GROUP BY origin", "source_tables": ["train"]}}
{"sample_id": 3296, "db_id": "college_1", "final": {"question": "Find the name and address of the department that has the highest number of students.", "sql": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student", "department"]}}
{"sample_id": 3275, "db_id": "college_1", "final": {"question": "What is the last name of the professor whose office is located in DRE 102, and when were they hired?", "sql": "SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'", "source_tables": ["employee", "professor"]}}
{"sample_id": 3248, "db_id": "college_1", "final": {"question": "list names of all departments ordered by their names.", "sql": "SELECT dept_name FROM department ORDER BY dept_name", "source_tables": ["department"]}}
{"sample_id": 3267, "db_id": "college_1", "final": {"question": "What are the first names of all professors not teaching any classes?", "sql": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num", "source_tables": ["class", "employee"]}}
{"sample_id": 3179, "db_id": "college_1", "final": {"question": "What is the description for the CIS-220 and how many credits does it have?", "sql": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'", "source_tables": ["course"]}}
{"sample_id": 3253, "db_id": "college_1", "final": {"question": "What are the first names of all employees that are professors ordered by date of birth?", "sql": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob", "source_tables": ["employee"]}}
{"sample_id": 3190, "db_id": "college_1", "final": {"question": "Find the number of different departments in each school whose number of different departments is less than 5.", "sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5", "source_tables": ["department"]}}
{"sample_id": 3278, "db_id": "college_1", "final": {"question": "What are the description and credit of the course which the student whose last name is Smithson took?", "sql": "SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'", "source_tables": ["student", "class", "course", "enroll"]}}
{"sample_id": 3249, "db_id": "college_1", "final": {"question": "What are the names of all departments in alphabetical order?", "sql": "SELECT dept_name FROM department ORDER BY dept_name", "source_tables": ["department"]}}
{"sample_id": 3243, "db_id": "college_1", "final": {"question": "What is the total number of professors with a Ph.D. ?", "sql": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'", "source_tables": ["professor"]}}
{"sample_id": 3195, "db_id": "college_1", "final": {"question": "How many credits does the department offer?", "sql": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code", "source_tables": ["course"]}}
{"sample_id": 3200, "db_id": "college_1", "final": {"question": "Find the number of classes in each school.", "sql": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code", "source_tables": ["class", "course", "department"]}}
{"sample_id": 3237, "db_id": "college_1", "final": {"question": "What are the first names of all students in course ACCT-211?", "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'", "source_tables": ["student", "class", "enroll"]}}
{"sample_id": 3265, "db_id": "college_1", "final": {"question": "Which department has the most professors with a Ph.D.?", "sql": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["professor", "department"]}}
{"sample_id": 3323, "db_id": "college_1", "final": {"question": "What are the first names of all professors who teach more than one class?", "sql": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1", "source_tables": ["class", "employee"]}}
{"sample_id": 3329, "db_id": "college_1", "final": {"question": "What is the first name of the student whose last name starts with the letter S and is taking ACCT-211?", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'", "source_tables": ["student", "enroll", "class"]}}
{"sample_id": 3324, "db_id": "college_1", "final": {"question": "Find the first names of students who took exactly one class.", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1", "source_tables": ["student", "enroll"]}}
{"sample_id": 3285, "db_id": "college_1", "final": {"question": "What is the first name of the professor who is teaching CIS-220 and QM-261?", "sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'", "source_tables": ["class", "employee"]}}
{"sample_id": 3263, "db_id": "college_1", "final": {"question": "What is the name of the department with the fewest professors?", "sql": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1", "source_tables": ["professor", "department"]}}
{"sample_id": 3256, "db_id": "college_1", "final": {"question": "What is the first and last name of the oldest employee?", "sql": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1", "source_tables": ["employee"]}}
{"sample_id": 3299, "db_id": "college_1", "final": {"question": "What is the name, address, and number of students in the departments that have the 3 most students?", "sql": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3", "source_tables": ["student", "department"]}}
{"sample_id": 3280, "db_id": "college_1", "final": {"question": "How many professors who has a either Ph.D. or MA degree?", "sql": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'", "source_tables": ["professor"]}}
{"sample_id": 3242, "db_id": "college_1", "final": {"question": "How many professors do have a Ph.D. degree?", "sql": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'", "source_tables": ["professor"]}}
{"sample_id": 3264, "db_id": "college_1", "final": {"question": "What is the name of department where has the largest number of professors with a Ph.D. degree?", "sql": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["professor", "department"]}}
{"sample_id": 3302, "db_id": "college_1", "final": {"question": "Find the first names of all instructors who have taught some course and the course code.", "sql": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num", "source_tables": ["class", "employee"]}}
{"sample_id": 3204, "db_id": "college_1", "final": {"question": "Find the count and code of the job has most employees.", "sql": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1", "source_tables": ["employee"]}}
{"sample_id": 3310, "db_id": "college_1", "final": {"question": "Find names of all students who took some course and the course description.", "sql": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code", "source_tables": ["student", "enroll", "class", "course"]}}
{"sample_id": 3307, "db_id": "college_1", "final": {"question": "What are the first names, office locations of all lecturers who have taught some course?", "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num", "source_tables": ["class", "course", "employee", "professor"]}}
{"sample_id": 3211, "db_id": "college_1", "final": {"question": "How many students are in each department?", "sql": "SELECT count(*) ,  dept_code FROM student GROUP BY dept_code", "source_tables": ["student"]}}
{"sample_id": 3282, "db_id": "college_1", "final": {"question": "How many professors who are from either Accounting or Biology department?", "sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'", "source_tables": ["professor", "department"]}}
{"sample_id": 3222, "db_id": "college_1", "final": {"question": "How many courses are offered?", "sql": "SELECT count(DISTINCT crs_code) FROM CLASS", "source_tables": ["class"]}}
{"sample_id": 3186, "db_id": "college_1", "final": {"question": "Find the description and credit for the course QM-261?", "sql": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'", "source_tables": ["course"]}}
{"sample_id": 3308, "db_id": "college_1", "final": {"question": "Find the first names and offices of all instructors who have taught some course and the course description and the department name.", "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code", "source_tables": ["class", "professor", "department", "course", "employee"]}}
{"sample_id": 3203, "db_id": "college_1", "final": {"question": "How many different professors are there for the different schools?", "sql": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code", "source_tables": ["professor", "department"]}}
{"sample_id": 3346, "db_id": "sports_competition", "final": {"question": "List all club names in descending alphabetical order.", "sql": "SELECT name FROM club ORDER BY name DESC", "source_tables": ["club"]}}
{"sample_id": 3376, "db_id": "sports_competition", "final": {"question": "which country did participated in the most number of Tournament competitions?", "sql": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1", "source_tables": ["competition"]}}
{"sample_id": 3366, "db_id": "sports_competition", "final": {"question": "What are the positions with both players having more than 20 points and less than 10 points.", "sql": "SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10", "source_tables": ["player"]}}
{"sample_id": 3353, "db_id": "sports_competition", "final": {"question": "What is the average number of points for players from the \"AIB\" club?", "sql": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  \"AIB\"", "source_tables": ["player", "club"]}}
{"sample_id": 3338, "db_id": "sports_competition", "final": {"question": "What are the distinct years in which the competitions type is not \"Tournament\"?", "sql": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"", "source_tables": ["competition"]}}
{"sample_id": 3370, "db_id": "sports_competition", "final": {"question": "how many different positions are there?", "sql": "SELECT count(DISTINCT POSITION) FROM player", "source_tables": ["player"]}}
{"sample_id": 3372, "db_id": "sports_competition", "final": {"question": "what are the name of players who get more than the average points.", "sql": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)", "source_tables": ["player"]}}
{"sample_id": 3371, "db_id": "sports_competition", "final": {"question": "How many different position for players are listed?", "sql": "SELECT count(DISTINCT POSITION) FROM player", "source_tables": ["player"]}}
{"sample_id": 3378, "db_id": "sports_competition", "final": {"question": "which countries did participated in both Friendly and Tournament type competitions.", "sql": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'", "source_tables": ["competition"]}}
{"sample_id": 3350, "db_id": "sports_competition", "final": {"question": "Show the names of clubs that have players with position \"Right Wing\".", "sql": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"", "source_tables": ["player", "club"]}}
{"sample_id": 3368, "db_id": "sports_competition", "final": {"question": "Show total points of all players.", "sql": "SELECT sum(Points) FROM player", "source_tables": ["player"]}}
{"sample_id": 3389, "db_id": "manufacturer", "final": {"question": "Find the average number of factories for the manufacturers that have more than 20 shops.", "sql": "SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops  >  20", "source_tables": ["manufacturer"]}}
{"sample_id": 3393, "db_id": "manufacturer", "final": {"question": "Find the id and number of shops for the company that produces the most expensive furniture.", "sql": "SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1", "source_tables": ["furniture_manufacte", "manufacturer"]}}
{"sample_id": 3396, "db_id": "manufacturer", "final": {"question": "Find the market shares and names of furnitures which no any company is producing in our records.", "sql": "SELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)", "source_tables": ["furniture_manufacte", "furniture"]}}
{"sample_id": 3384, "db_id": "manufacturer", "final": {"question": "find the total market rate of the furnitures that have the top 2 market shares.", "sql": "SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2", "source_tables": ["furniture"]}}
{"sample_id": 3432, "db_id": "hr_1", "final": {"question": "display those employees who joined after 7th September, 1987.", "sql": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'", "source_tables": ["employees"]}}
{"sample_id": 3409, "db_id": "hr_1", "final": {"question": "On what dates were employees without the letter M in their first names hired?", "sql": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'", "source_tables": ["employees"]}}
{"sample_id": 3438, "db_id": "hr_1", "final": {"question": "display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50.", "sql": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50", "source_tables": ["employees"]}}
{"sample_id": 3478, "db_id": "hr_1", "final": {"question": "display the ID for those employees who did two or more jobs in the past.", "sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2", "source_tables": ["job_history"]}}
{"sample_id": 3507, "db_id": "hr_1", "final": {"question": "What is all the information about employees who have never had a job in the past?", "sql": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "source_tables": ["job_history", "employees"]}}
{"sample_id": 3437, "db_id": "hr_1", "final": {"question": "What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?", "sql": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000", "source_tables": ["jobs"]}}
{"sample_id": 3491, "db_id": "hr_1", "final": {"question": "What are the ids for employees who do not work in departments with managers that have ids between 100 and 200?", "sql": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "source_tables": ["departments", "employees"]}}
{"sample_id": 3413, "db_id": "hr_1", "final": {"question": "What are the full name, hire data, salary and department id for employees without the letter M in their first name, ordered by ascending department id?", "sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id", "source_tables": ["employees"]}}
{"sample_id": 3511, "db_id": "hr_1", "final": {"question": "What are the full names, departments, cities, and state provinces for each employee?", "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id", "source_tables": ["locations", "departments", "employees"]}}
{"sample_id": 3435, "db_id": "hr_1", "final": {"question": "Which job titles correspond to jobs with salaries over 9000?", "sql": "SELECT job_title FROM jobs WHERE min_salary  >  9000", "source_tables": ["jobs"]}}
{"sample_id": 3490, "db_id": "hr_1", "final": {"question": "Find the ids of the employees who does not work in those departments where some employees works whose manager id within the range 100 and 200.", "sql": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "source_tables": ["departments", "employees"]}}
{"sample_id": 3399, "db_id": "hr_1", "final": {"question": "What are the first name and department name of all employees?", "sql": "SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id", "source_tables": ["departments", "employees"]}}
{"sample_id": 3424, "db_id": "hr_1", "final": {"question": "What are the first and last name for those employees who works either in department 70 or 90?", "sql": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90", "source_tables": ["employees"]}}
{"sample_id": 3467, "db_id": "hr_1", "final": {"question": "What are the full names and department ids for the lowest paid employees across all departments.", "sql": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)", "source_tables": ["employees"]}}
{"sample_id": 3481, "db_id": "hr_1", "final": {"question": "Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?", "sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4", "source_tables": ["employees"]}}
{"sample_id": 3400, "db_id": "hr_1", "final": {"question": "List the full name (first and last name), and salary for those employees who earn below 6000.", "sql": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000", "source_tables": ["employees"]}}
{"sample_id": 3425, "db_id": "hr_1", "final": {"question": "What are the full names of employees who with in department 70 or 90?", "sql": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90", "source_tables": ["employees"]}}
{"sample_id": 3436, "db_id": "hr_1", "final": {"question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.", "sql": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000", "source_tables": ["jobs"]}}
{"sample_id": 3470, "db_id": "hr_1", "final": {"question": "display the employee id and salary of all employees who report to Payam (first name).", "sql": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )", "source_tables": ["employees"]}}
{"sample_id": 3521, "db_id": "hr_1", "final": {"question": "What are full names and salaries of employees working in the city of London?", "sql": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'", "source_tables": ["locations", "departments", "employees"]}}
{"sample_id": 3479, "db_id": "hr_1", "final": {"question": "What are the employee ids for those who had two or more jobs.", "sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2", "source_tables": ["job_history"]}}
{"sample_id": 3411, "db_id": "hr_1", "final": {"question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?", "sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'", "source_tables": ["employees"]}}
{"sample_id": 3407, "db_id": "hr_1", "final": {"question": "What is all the information about the Marketing department?", "sql": "SELECT * FROM  departments WHERE department_name  =  'Marketing'", "source_tables": ["departments"]}}
{"sample_id": 3474, "db_id": "hr_1", "final": {"question": "get the details of employees who manage a department.", "sql": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id", "source_tables": ["departments", "employees"]}}
{"sample_id": 3472, "db_id": "hr_1", "final": {"question": "find the name of all departments that do actually have one or more employees assigned to them.", "sql": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id", "source_tables": ["departments", "employees"]}}
{"sample_id": 3448, "db_id": "hr_1", "final": {"question": "display the country ID and number of cities for each country.", "sql": "SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id", "source_tables": ["locations"]}}
{"sample_id": 3567, "db_id": "music_1", "final": {"question": "What are the names of the artists who released a song that has the word love in its title, and where are the artists from?", "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"", "source_tables": ["artist", "song"]}}
{"sample_id": 3609, "db_id": "music_1", "final": {"question": "What is the id of every song that has a resolution higher than that of a song with a rating below 8?", "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)", "source_tables": ["song"]}}
{"sample_id": 3553, "db_id": "music_1", "final": {"question": "What is the average song duration for the songs that are in mp3 format and whose resolution below 800?", "sql": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800", "source_tables": ["files", "song"]}}
{"sample_id": 3563, "db_id": "music_1", "final": {"question": "What are the different names for all songs that have a higher resolution than English songs?", "sql": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")", "source_tables": ["song"]}}
{"sample_id": 3524, "db_id": "music_1", "final": {"question": "What is the id of the longest song?", "sql": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1", "source_tables": ["files"]}}
{"sample_id": 3572, "db_id": "music_1", "final": {"question": "Give me a list of the names of all songs ordered by their resolution.", "sql": "SELECT song_name FROM song ORDER BY resolution", "source_tables": ["song"]}}
{"sample_id": 3574, "db_id": "music_1", "final": {"question": "What are the ids of songs that are available in either mp4 format or have resolution above 720?", "sql": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720", "source_tables": ["files", "song"]}}
{"sample_id": 3607, "db_id": "music_1", "final": {"question": "What are the song names for every song whose rating is less than the minimum rating for English songs?", "sql": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')", "source_tables": ["song"]}}
{"sample_id": 3555, "db_id": "music_1", "final": {"question": "How many artists are male and how many are female?", "sql": "SELECT count(*) ,  gender FROM artist GROUP BY gender", "source_tables": ["artist"]}}
{"sample_id": 3534, "db_id": "music_1", "final": {"question": "What is the name of the artist who produced the shortest song?", "sql": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1", "source_tables": ["files", "song"]}}
{"sample_id": 3570, "db_id": "music_1", "final": {"question": "List the names of all genres in alphabetical oder, together with its ratings.", "sql": "SELECT g_name ,  rating FROM genre ORDER BY g_name", "source_tables": ["genre"]}}
{"sample_id": 3558, "db_id": "music_1", "final": {"question": "Return the gender and name of artist who produced the song with the lowest resolution.", "sql": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1", "source_tables": ["artist", "song"]}}
{"sample_id": 3590, "db_id": "music_1", "final": {"question": "What are the average rating and resolution of songs that are in Bangla?", "sql": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"", "source_tables": ["song"]}}
{"sample_id": 3589, "db_id": "music_1", "final": {"question": "What are the names of all singers that are from the UK and released a song in English?", "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"", "source_tables": ["artist", "song"]}}
{"sample_id": 3543, "db_id": "music_1", "final": {"question": "How many songs, on average, are sung by a female artist?", "sql": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\"", "source_tables": ["artist", "song"]}}
{"sample_id": 3538, "db_id": "music_1", "final": {"question": "How many songs have 4 minute duration?", "sql": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"", "source_tables": ["files"]}}
{"sample_id": 3568, "db_id": "music_1", "final": {"question": "List the name and gender for all artists who released songs in March.", "sql": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"", "source_tables": ["artist", "song"]}}
{"sample_id": 3580, "db_id": "music_1", "final": {"question": "What is the language that was used most often in songs with resolution above 500?", "sql": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1", "source_tables": ["song"]}}
{"sample_id": 3598, "db_id": "music_1", "final": {"question": "Find the names and number of works of all artists who have at least one English songs.", "sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1", "source_tables": ["artist", "song"]}}
{"sample_id": 3550, "db_id": "music_1", "final": {"question": "What is the country of origin of the artist who is female and produced a song in Bangla?", "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"", "source_tables": ["artist", "song"]}}
{"sample_id": 3651, "db_id": "baseball_1", "final": {"question": "For each team, return the team name, id and the maximum salary among the team.", "sql": "SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;", "source_tables": ["team", "salary"]}}
{"sample_id": 3677, "db_id": "baseball_1", "final": {"question": "List all the salary values players received in 2010 and 2001.", "sql": "SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001", "source_tables": ["salary"]}}
{"sample_id": 3656, "db_id": "baseball_1", "final": {"question": "List players' first name and last name who have weight greater than 220 or height shorter than 75.", "sql": "SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75", "source_tables": ["player"]}}
{"sample_id": 3645, "db_id": "baseball_1", "final": {"question": "What are the first name and last name of the players whose death record is empty?", "sql": "SELECT name_first ,  name_last FROM player WHERE death_year = '';", "source_tables": ["player"]}}
{"sample_id": 3662, "db_id": "baseball_1", "final": {"question": "What are the name and id of the team with the most victories in 2008 postseason?", "sql": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["team", "postseason"]}}
{"sample_id": 3687, "db_id": "baseball_1", "final": {"question": "How many games in total did team Boston Red Stockings attend from 2000 to 2010?", "sql": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;", "source_tables": ["team", "home_game"]}}
{"sample_id": 3642, "db_id": "baseball_1", "final": {"question": "List three countries which are the origins of the least players.", "sql": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;", "source_tables": ["player"]}}
{"sample_id": 3685, "db_id": "baseball_1", "final": {"question": "Find the number of games taken place in city Atlanta in 2000.", "sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';", "source_tables": ["park", "home_game"]}}
{"sample_id": 3663, "db_id": "baseball_1", "final": {"question": "Find the name and id of the team that won the most times in 2008 postseason.", "sql": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["team", "postseason"]}}
{"sample_id": 3631, "db_id": "baseball_1", "final": {"question": "Count the number of players who enter hall of fame for each year.", "sql": "SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid;", "source_tables": ["hall_of_fame"]}}
{"sample_id": 3675, "db_id": "baseball_1", "final": {"question": "How much salary did the top 3 well-paid players get in 2001?", "sql": "SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;", "source_tables": ["salary"]}}
{"sample_id": 3688, "db_id": "baseball_1", "final": {"question": "How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total?", "sql": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;", "source_tables": ["salary", "player"]}}
{"sample_id": 3664, "db_id": "baseball_1", "final": {"question": "What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?", "sql": "SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year", "source_tables": ["team", "postseason"]}}
{"sample_id": 3643, "db_id": "baseball_1", "final": {"question": "What are the three countries that the least players are from?", "sql": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;", "source_tables": ["player"]}}
{"sample_id": 3652, "db_id": "baseball_1", "final": {"question": "What are the name and id of the team offering the lowest average salary?", "sql": "SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;", "source_tables": ["team", "salary"]}}
{"sample_id": 3682, "db_id": "baseball_1", "final": {"question": "How many games were played in park \"Columbia Park\" in 1907?", "sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';", "source_tables": ["park", "home_game"]}}
{"sample_id": 3668, "db_id": "baseball_1", "final": {"question": "How many games in 1885 postseason resulted in ties (that is, the value of \"ties\" is '1')?", "sql": "SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;", "source_tables": ["postseason"]}}
{"sample_id": 3720, "db_id": "mountain_photos", "final": {"question": "What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.", "sql": "SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)", "source_tables": ["photos", "camera_lens"]}}
{"sample_id": 3717, "db_id": "mountain_photos", "final": {"question": "List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif'", "sql": "SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Lasta Massif'", "source_tables": ["photos", "camera_lens", "mountain"]}}
{"sample_id": 3710, "db_id": "mountain_photos", "final": {"question": "What are the id and name of the photos for mountains?", "sql": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.height  >  4000", "source_tables": ["photos", "mountain"]}}
{"sample_id": 3711, "db_id": "mountain_photos", "final": {"question": "What are the id and name of the mountains that have at least 2 photos?", "sql": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2", "source_tables": ["photos", "mountain"]}}
{"sample_id": 3743, "db_id": "program_share", "final": {"question": "find the number of different programs that are broadcast during night time.", "sql": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'", "source_tables": ["broadcast"]}}
{"sample_id": 3737, "db_id": "program_share", "final": {"question": "Find the names of the channels that are broadcast in the morning.", "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'", "source_tables": ["channel", "broadcast"]}}
{"sample_id": 3751, "db_id": "program_share", "final": {"question": "what is the number of different channel owners?", "sql": "SELECT count(DISTINCT OWNER) FROM channel", "source_tables": ["channel"]}}
{"sample_id": 3742, "db_id": "program_share", "final": {"question": "Count the number of programs broadcast for each time section of a day.", "sql": "SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day", "source_tables": ["broadcast"]}}
{"sample_id": 3745, "db_id": "program_share", "final": {"question": "Find the names of programs that are never broadcasted in the morning.", "sql": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"", "source_tables": ["broadcast", "program"]}}
{"sample_id": 3759, "db_id": "program_share", "final": {"question": "Find the name of the program that is broadcast most frequently.", "sql": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["broadcast", "program"]}}
{"sample_id": 3739, "db_id": "program_share", "final": {"question": "what are the names of the channels that broadcast in both morning and night?", "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'", "source_tables": ["channel", "broadcast"]}}
{"sample_id": 3741, "db_id": "program_share", "final": {"question": "how many programs are broadcast in each time section of the day?", "sql": "SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day", "source_tables": ["broadcast"]}}
{"sample_id": 3769, "db_id": "e_learning", "final": {"question": "List all the login names and family names of course author and tutors.", "sql": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors", "source_tables": ["course_authors_and_tutors"]}}
{"sample_id": 3779, "db_id": "e_learning", "final": {"question": "How many tests have result \"Fail\"?", "sql": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"", "source_tables": ["student_tests_taken"]}}
{"sample_id": 3825, "db_id": "e_learning", "final": {"question": "List the dates of enrollment and completion of the student with personal name \"Karson\".", "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\"", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3771, "db_id": "e_learning", "final": {"question": "List all the dates of enrollment and completion of students.", "sql": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment", "source_tables": ["student_course_enrolment"]}}
{"sample_id": 3788, "db_id": "e_learning", "final": {"question": "What are the names of all the subjects.", "sql": "SELECT subject_name FROM SUBJECTS", "source_tables": ["subjects"]}}
{"sample_id": 3789, "db_id": "e_learning", "final": {"question": "List all the information about course authors and tutors in alphabetical order of the personal name.", "sql": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name", "source_tables": ["course_authors_and_tutors"]}}
{"sample_id": 3824, "db_id": "e_learning", "final": {"question": "Return the completion date for all the tests that have \"Fail\" result.", "sql": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"", "source_tables": ["student_course_enrolment", "student_tests_taken"]}}
{"sample_id": 3804, "db_id": "e_learning", "final": {"question": "What are the names of the courses taught by the tutor whose personal name is \"Julio\"?", "sql": "SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T1.personal_name  =  \"Julio\"", "source_tables": ["courses", "course_authors_and_tutors"]}}
{"sample_id": 3829, "db_id": "e_learning", "final": {"question": "Find the student ID and login name of the student with the most course enrollments", "sql": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3766, "db_id": "e_learning", "final": {"question": "Return the addresses of the course authors or tutors whose personal name is \"Cathrine\".", "sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"", "source_tables": ["course_authors_and_tutors"]}}
{"sample_id": 3801, "db_id": "e_learning", "final": {"question": "Find the addresses and author IDs of the course authors that teach at least two courses.", "sql": "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2", "source_tables": ["courses", "course_authors_and_tutors"]}}
{"sample_id": 3768, "db_id": "e_learning", "final": {"question": "What is the address of each course author or tutor?", "sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors", "source_tables": ["course_authors_and_tutors"]}}
{"sample_id": 3810, "db_id": "e_learning", "final": {"question": "List the subject ID, name of subject and the number of courses available for each subject in ascending order of the course counts.", "sql": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC", "source_tables": ["courses", "subjects"]}}
{"sample_id": 3798, "db_id": "e_learning", "final": {"question": "What are the addresses of the course authors who teach either \"operating system\" or \"data structure\" course.", "sql": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\"", "source_tables": ["courses", "course_authors_and_tutors"]}}
{"sample_id": 3778, "db_id": "e_learning", "final": {"question": "Which tests have \"Pass\" results? Return the dates when the tests were taken.", "sql": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\"", "source_tables": ["student_tests_taken"]}}
{"sample_id": 3786, "db_id": "e_learning", "final": {"question": "Find the number of students who have the word \"son\" in their personal names.", "sql": "SELECT COUNT(*) FROM Students WHERE personal_name LIKE \"%son%\"", "source_tables": ["students"]}}
{"sample_id": 3817, "db_id": "e_learning", "final": {"question": "What are the descriptions and names of the courses that have student enrollment bigger than 2?", "sql": "SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2", "source_tables": ["courses", "student_course_enrolment"]}}
{"sample_id": 3888, "db_id": "insurance_policies", "final": {"question": "Which claims had exactly one settlement? For each, tell me the the date the claim was made, the date it was settled and the amount settled.", "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1", "source_tables": ["settlements", "claims"]}}
{"sample_id": 3876, "db_id": "insurance_policies", "final": {"question": "Compute the total amount of payment processed.", "sql": "SELECT sum(Amount_Payment) FROM Payments", "source_tables": ["payments"]}}
{"sample_id": 3865, "db_id": "insurance_policies", "final": {"question": "What is the total amount of settlement made for all the settlements?", "sql": "SELECT sum(Amount_Settled) FROM Settlements", "source_tables": ["settlements"]}}
{"sample_id": 3878, "db_id": "insurance_policies", "final": {"question": "Return the distinct customer details.", "sql": "SELECT DISTINCT customer_details FROM Customers", "source_tables": ["customers"]}}
{"sample_id": 3875, "db_id": "insurance_policies", "final": {"question": "What is the total amount of payment?", "sql": "SELECT sum(Amount_Payment) FROM Payments", "source_tables": ["payments"]}}
{"sample_id": 3864, "db_id": "insurance_policies", "final": {"question": "Tell me the the date when the first claim was made.", "sql": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1", "source_tables": ["claims"]}}
{"sample_id": 3853, "db_id": "insurance_policies", "final": {"question": "Among all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled.", "sql": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )", "source_tables": ["claims"]}}
{"sample_id": 3880, "db_id": "insurance_policies", "final": {"question": "Find the policy type the most customers choose.", "sql": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customer_policies"]}}
{"sample_id": 3889, "db_id": "insurance_policies", "final": {"question": "Find the total claimed amount of all the claims.", "sql": "SELECT sum(Amount_Claimed) FROM Claims", "source_tables": ["claims"]}}
{"sample_id": 3851, "db_id": "insurance_policies", "final": {"question": "Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount.", "sql": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1", "source_tables": ["claims"]}}
{"sample_id": 3858, "db_id": "insurance_policies", "final": {"question": "Find the number of settlements each claim corresponds to. Show the number together with the claim id.", "sql": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id", "source_tables": ["settlements", "claims"]}}
{"sample_id": 3932, "db_id": "hospital_1", "final": {"question": "Find the number of distinct room types available.", "sql": "SELECT count(DISTINCT roomtype) FROM room", "source_tables": ["room"]}}
{"sample_id": 3943, "db_id": "hospital_1", "final": {"question": "Find the names of all patients who have an undergoing treatment and are staying in room 111.", "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111", "source_tables": ["undergoes", "patient", "stay"]}}
{"sample_id": 3917, "db_id": "hospital_1", "final": {"question": "Find the patient who most recently stayed in room 111.", "sql": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1", "source_tables": ["stay"]}}
{"sample_id": 3966, "db_id": "hospital_1", "final": {"question": "Which physicians are trained in procedures that are more expensive than 5000?", "sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000", "source_tables": ["trained_in", "physician", "procedures"]}}
{"sample_id": 3948, "db_id": "hospital_1", "final": {"question": "Which nurses are in charge of patients undergoing treatments?", "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID", "source_tables": ["undergoes", "nurse"]}}
{"sample_id": 3971, "db_id": "hospital_1", "final": {"question": "Find the names of procedures which physician John Wen was trained in.", "sql": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "source_tables": ["trained_in", "physician", "procedures"]}}
{"sample_id": 3937, "db_id": "hospital_1", "final": {"question": "Find the number of medications prescribed for each brand.", "sql": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand", "source_tables": ["prescribes", "medication"]}}
{"sample_id": 3906, "db_id": "hospital_1", "final": {"question": "Which physicians have never taken any appointment? Find their names.", "sql": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID", "source_tables": ["appointment", "physician"]}}
{"sample_id": 3918, "db_id": "hospital_1", "final": {"question": "What is the id of the patient who stayed in room 111 most recently?", "sql": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1", "source_tables": ["stay"]}}
{"sample_id": 3974, "db_id": "hospital_1", "final": {"question": "What are the procedures that cost more than 1000 or are specialized in by physician John Wen?", "sql": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "source_tables": ["trained_in", "procedures", "physician"]}}
{"sample_id": 3955, "db_id": "hospital_1", "final": {"question": "List the names of departments where some physicians are primarily affiliated with.", "sql": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1", "source_tables": ["affiliated_with", "department"]}}
{"sample_id": 3980, "db_id": "hospital_1", "final": {"question": "Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names.", "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'", "source_tables": ["physician", "affiliated_with", "department"]}}
{"sample_id": 3950, "db_id": "hospital_1", "final": {"question": "What is the alphabetically ordered list of all distinct medications?", "sql": "SELECT DISTINCT name FROM medication ORDER BY name", "source_tables": ["medication"]}}
{"sample_id": 3915, "db_id": "hospital_1", "final": {"question": "Find the name of medication used on the patient who stays in room 111?", "sql": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111", "source_tables": ["prescribes", "medication", "patient", "stay"]}}
{"sample_id": 3933, "db_id": "hospital_1", "final": {"question": "What is the names of the physicians who prescribe medication Thesisin?", "sql": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"", "source_tables": ["prescribes", "medication", "physician"]}}
{"sample_id": 3919, "db_id": "hospital_1", "final": {"question": "What is the name of the nurse has the most appointments?", "sql": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["nurse", "appointment"]}}
{"sample_id": 3914, "db_id": "hospital_1", "final": {"question": "Find the number of patients' prescriptions physician John Dorian made.", "sql": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"", "source_tables": ["prescribes", "physician", "patient"]}}
{"sample_id": 3944, "db_id": "hospital_1", "final": {"question": "What are the names of patients who are staying in room 111 and have an undergoing treatment?", "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111", "source_tables": ["undergoes", "patient", "stay"]}}
{"sample_id": 3902, "db_id": "hospital_1", "final": {"question": "What is the id of the appointment that started most recently?", "sql": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1", "source_tables": ["appointment"]}}
{"sample_id": 3907, "db_id": "hospital_1", "final": {"question": "Find the names of all physicians and their primary affiliated departments' names.", "sql": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1", "source_tables": ["physician", "affiliated_with", "department"]}}
{"sample_id": 3995, "db_id": "ship_mission", "final": {"question": "What are the type and nationality of ships?", "sql": "SELECT TYPE ,  Nationality FROM ship", "source_tables": ["ship"]}}
{"sample_id": 4019, "db_id": "ship_mission", "final": {"question": "Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.", "sql": "SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000", "source_tables": ["ship"]}}
{"sample_id": 4007, "db_id": "ship_mission", "final": {"question": "List the nations that have more than two ships.", "sql": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*)  >  2", "source_tables": ["ship"]}}
{"sample_id": 4016, "db_id": "ship_mission", "final": {"question": "What are the different fates of the mission that involved ships from the United States?", "sql": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  \"United States\"", "source_tables": ["mission", "ship"]}}
{"sample_id": 4008, "db_id": "ship_mission", "final": {"question": "What are the nations that have more than two ships?", "sql": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*)  >  2", "source_tables": ["ship"]}}
{"sample_id": 4004, "db_id": "ship_mission", "final": {"question": "For each type, how many ships are there?", "sql": "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE", "source_tables": ["ship"]}}
{"sample_id": 4051, "db_id": "student_1", "final": {"question": "Find all students taught by OTHA MOYER. Output the first and last names of the students.", "sql": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"", "source_tables": ["list", "teachers"]}}
{"sample_id": 4078, "db_id": "student_1", "final": {"question": "Find the classroom that the most students use.", "sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1", "source_tables": ["list"]}}
{"sample_id": 4070, "db_id": "student_1", "final": {"question": "What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER?", "sql": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"", "source_tables": ["list", "teachers"]}}
{"sample_id": 4033, "db_id": "student_1", "final": {"question": "Find the grade studying in room 105.", "sql": "SELECT DISTINCT grade FROM list WHERE classroom  =  105", "source_tables": ["list"]}}
{"sample_id": 4031, "db_id": "student_1", "final": {"question": "Which grade is studying in classroom 103?", "sql": "SELECT DISTINCT grade FROM list WHERE classroom  =  103", "source_tables": ["list"]}}
{"sample_id": 4068, "db_id": "student_1", "final": {"question": "Find the number of teachers who teach the student called MADLOCK RAY.", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"", "source_tables": ["list", "teachers"]}}
{"sample_id": 4037, "db_id": "student_1", "final": {"question": "Which classrooms are used by grade 5?", "sql": "SELECT DISTINCT classroom FROM list WHERE grade  =  5", "source_tables": ["list"]}}
{"sample_id": 4053, "db_id": "student_1", "final": {"question": "Find all students taught by MARROTTE KIRK. Output first and last names of students.", "sql": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\"", "source_tables": ["list", "teachers"]}}
{"sample_id": 4085, "db_id": "student_1", "final": {"question": "Find the name of the teacher who teaches the largest number of students.", "sql": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["list", "teachers"]}}
{"sample_id": 4063, "db_id": "student_1", "final": {"question": "Find the number of students taught by TARRING LEIA.", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\"", "source_tables": ["list", "teachers"]}}
{"sample_id": 4065, "db_id": "student_1", "final": {"question": "How many teachers does the student named CHRISSY NABOZNY have?", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"", "source_tables": ["list", "teachers"]}}
{"sample_id": 4064, "db_id": "student_1", "final": {"question": "How many students are taught by teacher TARRING LEIA?", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\"", "source_tables": ["list", "teachers"]}}
{"sample_id": 4028, "db_id": "student_1", "final": {"question": "List the first names of all the students in room 107.", "sql": "SELECT DISTINCT firstname FROM list WHERE classroom  =  107", "source_tables": ["list"]}}
{"sample_id": 4026, "db_id": "student_1", "final": {"question": "What are the first names of students in room 108?", "sql": "SELECT firstname FROM list WHERE classroom  =  108", "source_tables": ["list"]}}
{"sample_id": 4023, "db_id": "student_1", "final": {"question": "Find the last names of students studying in room 111.", "sql": "SELECT lastname FROM list WHERE classroom  =  111", "source_tables": ["list"]}}
{"sample_id": 4102, "db_id": "company_employee", "final": {"question": "Show the names of companies and the number of employees they have", "sql": "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name", "source_tables": ["company", "employment", "people"]}}
{"sample_id": 4100, "db_id": "company_employee", "final": {"question": "Show names of companies and that of employees in descending order of number of years working for that employee.", "sql": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working", "source_tables": ["company", "employment", "people"]}}
{"sample_id": 4093, "db_id": "company_employee", "final": {"question": "What is the maximum and minimum market value of companies?", "sql": "SELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company", "source_tables": ["company"]}}
{"sample_id": 4092, "db_id": "company_employee", "final": {"question": "Show the names of companies in the banking or retailing industry?", "sql": "SELECT Name FROM company WHERE Industry  =  \"Banking\" OR Industry  =  \"Retailing\"", "source_tables": ["company"]}}
{"sample_id": 4136, "db_id": "film_rank", "final": {"question": "What is the name of teh studio that created the most films?", "sql": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["film"]}}
{"sample_id": 4105, "db_id": "film_rank", "final": {"question": "How many film are there?", "sql": "SELECT count(*) FROM film", "source_tables": ["film"]}}
{"sample_id": 4138, "db_id": "film_rank", "final": {"question": "What are the names of studios that have made two or more films?", "sql": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2", "source_tables": ["film"]}}
{"sample_id": 4131, "db_id": "film_rank", "final": {"question": "Please list the years of film market estimations when the market is in country \"Japan\" in descending order.", "sql": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC", "source_tables": ["market", "film_market_estimation"]}}
{"sample_id": 4113, "db_id": "film_rank", "final": {"question": "What are the types of film market estimations in year 1995?", "sql": "SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995", "source_tables": ["film_market_estimation"]}}
{"sample_id": 4140, "db_id": "film_rank", "final": {"question": "What are the titles of films that do not have a film market estimation?", "sql": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)", "source_tables": ["film_market_estimation", "film"]}}
{"sample_id": 4114, "db_id": "film_rank", "final": {"question": "Return the types of film market estimations in 1995.", "sql": "SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995", "source_tables": ["film_market_estimation"]}}
{"sample_id": 4117, "db_id": "film_rank", "final": {"question": "How many markets have number of cities smaller than 300?", "sql": "SELECT count(*) FROM market WHERE Number_cities  <  300", "source_tables": ["market"]}}
{"sample_id": 4148, "db_id": "film_rank", "final": {"question": "Which studios have an average gross of over 4500000?", "sql": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000", "source_tables": ["film"]}}
{"sample_id": 4107, "db_id": "film_rank", "final": {"question": "List the distinct director of all films.", "sql": "SELECT DISTINCT Director FROM film", "source_tables": ["film"]}}
{"sample_id": 4133, "db_id": "film_rank", "final": {"question": "List the studios of each film and the number of films produced by that studio.", "sql": "SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio", "source_tables": ["film"]}}
{"sample_id": 4236, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are the ids of all the employees who authorize document destruction?", "sql": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4157, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the number of document types.", "sql": "SELECT count(*) FROM Ref_document_types", "source_tables": ["ref_document_types"]}}
{"sample_id": 4192, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are the name, role code, and date of birth of the employee named 'Armani'?", "sql": "SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'", "source_tables": ["employees"]}}
{"sample_id": 4234, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Which employees do not authorize destruction for any document? Give me their employee ids.", "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "source_tables": ["employees", "documents_to_be_destroyed"]}}
{"sample_id": 4231, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the employee ids and the number of documents destroyed by each employee.", "sql": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4199, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What is the role code with the largest number of employees?", "sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["employees"]}}
{"sample_id": 4223, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the location codes with at least 3 documents.", "sql": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3", "source_tables": ["document_locations"]}}
{"sample_id": 4212, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Give me all the distinct location codes for documents.", "sql": "SELECT DISTINCT location_code FROM Document_locations", "source_tables": ["document_locations"]}}
{"sample_id": 4171, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What is the document type name for the document with name \"How to read a book\"?", "sql": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"How to read a book\"", "source_tables": ["ref_document_types", "all_documents"]}}
{"sample_id": 4178, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Give me the name and description of the location with code x.", "sql": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\"", "source_tables": ["ref_locations"]}}
{"sample_id": 4228, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "List the names of the employees who authorized the destruction of documents and the employees who destroyed the corresponding documents.", "sql": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;", "source_tables": ["employees", "documents_to_be_destroyed"]}}
{"sample_id": 4173, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the number of locations.", "sql": "SELECT count(*) FROM Ref_locations", "source_tables": ["ref_locations"]}}
{"sample_id": 4203, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the role code with the least employees.", "sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1", "source_tables": ["employees"]}}
{"sample_id": 4208, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Find the names of all the employees whose the role name is \"Editor\".", "sql": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Editor\"", "source_tables": ["roles", "employees"]}}
{"sample_id": 4163, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What is the document type code for document type \"Paper\"?", "sql": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"", "source_tables": ["ref_document_types"]}}
{"sample_id": 4221, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What is the location code with the most documents?", "sql": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["document_locations"]}}
{"sample_id": 4220, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What is the code of each location and the number of documents in that location?", "sql": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code", "source_tables": ["document_locations"]}}
{"sample_id": 4193, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What is the id for the employee called Ebba?", "sql": "SELECT employee_ID FROM Employees WHERE employee_name  =  \"Ebba\"", "source_tables": ["employees"]}}
{"sample_id": 4264, "db_id": "club_1", "final": {"question": "Give me the first name and last name for all the female members of the club \"Bootup Baltimore\".", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4252, "db_id": "club_1", "final": {"question": "Who are the members of the club named \"Bootup Baltimore\"? Give me their last names.", "sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4309, "db_id": "club_1", "final": {"question": "Find the average age of members of the club \"Hopkins Student Enterprises\".", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4253, "db_id": "club_1", "final": {"question": "Who are the members of the club named \"Hopkins Student Enterprises\"? Show the last name.", "sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4259, "db_id": "club_1", "final": {"question": "How many clubs does \"Linda Smith\" belong to?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4251, "db_id": "club_1", "final": {"question": "Find the last names of the members of the club \"Bootup Baltimore\".", "sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4304, "db_id": "club_1", "final": {"question": "What are the names of the clubs that have \"Davis Steven\" as a member?", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4305, "db_id": "club_1", "final": {"question": "List the clubs that have at least a member with advisor \"1121\".", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4276, "db_id": "club_1", "final": {"question": "What is the description of the club \"Pen and Paper Gaming\"?", "sql": "SELECT clubdesc FROM club WHERE clubname  =  \"Pen and Paper Gaming\"", "source_tables": ["club"]}}
{"sample_id": 4312, "db_id": "club_1", "final": {"question": "Compute the average age of the members in the club \"Tennis Club\".", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4274, "db_id": "club_1", "final": {"question": "Find the description of the club called \"Tennis Club\".", "sql": "SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\"", "source_tables": ["club"]}}
{"sample_id": 4284, "db_id": "club_1", "final": {"question": "Which clubs are located at \"AKW\"? Return the club names.", "sql": "SELECT clubname FROM club WHERE clublocation  =  \"AKW\"", "source_tables": ["club"]}}
{"sample_id": 4273, "db_id": "club_1", "final": {"question": "What is the description of the club named \"Tennis Club\"?", "sql": "SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\"", "source_tables": ["club"]}}
{"sample_id": 4301, "db_id": "club_1", "final": {"question": "How many clubs does the student named \"Eric Tai\" belong to?", "sql": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4389, "db_id": "tracking_grants_for_research", "final": {"question": "Which role is most common for the staff?", "sql": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["project_staff"]}}
{"sample_id": 4328, "db_id": "tracking_grants_for_research", "final": {"question": "What are the send dates for all documents that have a grant amount of more than 5000 and are involved in research?", "sql": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'", "source_tables": ["organisations", "grants", "organisation_types", "documents"]}}
{"sample_id": 4324, "db_id": "tracking_grants_for_research", "final": {"question": "What is the type and id of the organization that has the most research staff?", "sql": "SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["research_staff", "organisations"]}}
{"sample_id": 4331, "db_id": "tracking_grants_for_research", "final": {"question": "List the project details of the projects which did not hire any staff for a researcher role.", "sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )", "source_tables": ["projects", "project_staff"]}}
{"sample_id": 4374, "db_id": "tracking_grants_for_research", "final": {"question": "What is the description for the results whose project detail is 'sint'?", "sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'", "source_tables": ["projects", "research_outcomes", "project_outcomes"]}}
{"sample_id": 4376, "db_id": "tracking_grants_for_research", "final": {"question": "What is the id of the organization with the maximum number of outcomes and how many outcomes are there?", "sql": "SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["projects", "project_outcomes"]}}
{"sample_id": 4325, "db_id": "tracking_grants_for_research", "final": {"question": "Which organisation type hires most research staff?", "sql": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1", "source_tables": ["research_staff", "organisations"]}}
{"sample_id": 4387, "db_id": "tracking_grants_for_research", "final": {"question": "What are the descriptions of all the project outcomes?", "sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code", "source_tables": ["research_outcomes", "project_outcomes"]}}
{"sample_id": 4339, "db_id": "tracking_grants_for_research", "final": {"question": "What is the total amount of grants given by each organisations? Also list the organisation id.", "sql": "SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id", "source_tables": ["grants"]}}
{"sample_id": 4381, "db_id": "tracking_grants_for_research", "final": {"question": "How many tasks are there in total?", "sql": "SELECT count(*) FROM Tasks", "source_tables": ["tasks"]}}
{"sample_id": 4377, "db_id": "tracking_grants_for_research", "final": {"question": "List the project details of the projects launched by the organisation", "sql": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )", "source_tables": ["projects"]}}
{"sample_id": 4352, "db_id": "tracking_grants_for_research", "final": {"question": "What are the details of the project with no outcomes?", "sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )", "source_tables": ["projects", "project_outcomes"]}}
{"sample_id": 4361, "db_id": "tracking_grants_for_research", "final": {"question": "How many documents can one grant have at most? List the grant id and number.", "sql": "SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["documents"]}}
{"sample_id": 4318, "db_id": "tracking_grants_for_research", "final": {"question": "What is the total amount of grant money for research?", "sql": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'", "source_tables": ["organisations", "grants", "organisation_types"]}}
{"sample_id": 4341, "db_id": "tracking_grants_for_research", "final": {"question": "List the project details of the projects with the research outcome described with the substring 'Published'.", "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'", "source_tables": ["projects", "research_outcomes", "project_outcomes"]}}
{"sample_id": 4371, "db_id": "tracking_grants_for_research", "final": {"question": "What is the last date of the staff leaving the projects?", "sql": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1", "source_tables": ["project_staff"]}}
{"sample_id": 4316, "db_id": "tracking_grants_for_research", "final": {"question": "What are the details of the project that is producing both patents and papers as outcomes?", "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent'", "source_tables": ["projects", "project_outcomes"]}}
{"sample_id": 4461, "db_id": "network_2", "final": {"question": "Who is the friend of Zach with longest year relationship?", "sql": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')", "source_tables": ["personfriend"]}}
{"sample_id": 4469, "db_id": "network_2", "final": {"question": "Who is the person that has no friend?", "sql": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4431, "db_id": "network_2", "final": {"question": "Find the name and age of all males in order of their age.", "sql": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age", "source_tables": ["person"]}}
{"sample_id": 4471, "db_id": "network_2", "final": {"question": "Which person whose friends have the oldest average age?", "sql": "SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4418, "db_id": "network_2", "final": {"question": "What is the average age for a male in each job?", "sql": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job", "source_tables": ["person"]}}
{"sample_id": 4459, "db_id": "network_2", "final": {"question": "Who has friends that are older than the average age? Print their friends and their ages as well", "sql": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4448, "db_id": "network_2", "final": {"question": "What are the names of all of Bob's friends?", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4396, "db_id": "network_2", "final": {"question": "What is the average age for all people in the table?", "sql": "SELECT avg(age) FROM Person", "source_tables": ["person"]}}
{"sample_id": 4456, "db_id": "network_2", "final": {"question": "What are the names of all friends who are from New York?", "sql": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4407, "db_id": "network_2", "final": {"question": "How old is the doctor named Zach?", "sql": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'", "source_tables": ["person"]}}
{"sample_id": 4474, "db_id": "network_2", "final": {"question": "What is the total number of people who have no friends living in Austin?", "sql": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4419, "db_id": "network_2", "final": {"question": "What is minimum age for different job title?", "sql": "SELECT min(age) ,  job FROM Person GROUP BY job", "source_tables": ["person"]}}
{"sample_id": 4452, "db_id": "network_2", "final": {"question": "What are all the friends of Alice who are female?", "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4398, "db_id": "network_2", "final": {"question": "How many different cities do people originate from?", "sql": "SELECT count(DISTINCT city) FROM Person", "source_tables": ["person"]}}
{"sample_id": 4447, "db_id": "network_2", "final": {"question": "Find the name of persons who are friends with Bob.", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4464, "db_id": "network_2", "final": {"question": "What are the ages of all of Zach's friends who are in the longest relationship?", "sql": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4453, "db_id": "network_2", "final": {"question": "Find the male friend of Alice whose job is a doctor?", "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4472, "db_id": "network_2", "final": {"question": "What is the name of the person who has the oldest average age for their friends, and what is that average age?", "sql": "SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4489, "db_id": "decoration_competition", "final": {"question": "Show the names of members that have a rank in round higher than 3.", "sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID WHERE T2.Rank_in_Round  >  3", "source_tables": ["round", "member"]}}
{"sample_id": 4485, "db_id": "decoration_competition", "final": {"question": "Show the names of members and names of colleges they go to.", "sql": "SELECT T2.Name ,  T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID", "source_tables": ["college", "member"]}}
{"sample_id": 4480, "db_id": "decoration_competition", "final": {"question": "Show the names of members whose country is \"United States\" or \"Canada\".", "sql": "SELECT Name FROM member WHERE Country  =  \"United States\" OR Country  =  \"Canada\"", "source_tables": ["member"]}}
{"sample_id": 4534, "db_id": "document_management", "final": {"question": "What document types have more than 2 corresponding documents?", "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2", "source_tables": ["documents"]}}
{"sample_id": 4510, "db_id": "document_management", "final": {"question": "What are all the section titles of the document named \"David CV\"?", "sql": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  \"David CV\"", "source_tables": ["document_sections", "documents"]}}
{"sample_id": 4517, "db_id": "document_management", "final": {"question": "What are the average access counts of documents that have the functional area description \"Acknowledgement\"?", "sql": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"", "source_tables": ["document_functional_areas", "functional_areas", "documents"]}}
{"sample_id": 4518, "db_id": "document_management", "final": {"question": "Find names of the document without any images.", "sql": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id", "source_tables": ["document_sections_images", "document_sections", "documents"]}}
{"sample_id": 4500, "db_id": "document_management", "final": {"question": "What is the average access count of documents?", "sql": "SELECT avg(access_count) FROM documents", "source_tables": ["documents"]}}
{"sample_id": 4520, "db_id": "document_management", "final": {"question": "What is the name of the document with the most number of sections?", "sql": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["document_sections", "documents"]}}
{"sample_id": 4495, "db_id": "document_management", "final": {"question": "What is the name of the document which has been accessed the most times, as well as the number of times it has been accessed?", "sql": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1", "source_tables": ["documents"]}}
{"sample_id": 4506, "db_id": "document_management", "final": {"question": "Find the list of documents that are both in the most three popular type and have the most three popular structure.", "sql": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3", "source_tables": ["documents"]}}
{"sample_id": 4519, "db_id": "document_management", "final": {"question": "What are the names of documents that do not have any images?", "sql": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id", "source_tables": ["document_sections_images", "document_sections", "documents"]}}
{"sample_id": 4516, "db_id": "document_management", "final": {"question": "Find the average access counts of documents with functional area \"Acknowledgement\".", "sql": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"", "source_tables": ["document_functional_areas", "functional_areas", "documents"]}}
{"sample_id": 4544, "db_id": "company_office", "final": {"question": "What are the average profits of companies?", "sql": "SELECT avg(Profits_billion) FROM Companies", "source_tables": ["companies"]}}
{"sample_id": 4552, "db_id": "company_office", "final": {"question": "Find the stories of the building with the largest height.", "sql": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1", "source_tables": ["buildings"]}}
{"sample_id": 4543, "db_id": "company_office", "final": {"question": "List the name and assets of each company in ascending order of company name.", "sql": "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC", "source_tables": ["companies"]}}
{"sample_id": 4562, "db_id": "company_office", "final": {"question": "Please show each industry and the corresponding number of companies in that industry.", "sql": "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry", "source_tables": ["companies"]}}
{"sample_id": 4536, "db_id": "company_office", "final": {"question": "How many companies are there?", "sql": "SELECT count(*) FROM Companies", "source_tables": ["companies"]}}
{"sample_id": 4545, "db_id": "company_office", "final": {"question": "Compute the average profits companies make.", "sql": "SELECT avg(Profits_billion) FROM Companies", "source_tables": ["companies"]}}
{"sample_id": 4538, "db_id": "company_office", "final": {"question": "List the names of companies in descending order of market value.", "sql": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC", "source_tables": ["companies"]}}
{"sample_id": 4548, "db_id": "company_office", "final": {"question": "How many different industries are the companies in?", "sql": "SELECT count(DISTINCT Industry) FROM Companies", "source_tables": ["companies"]}}
{"sample_id": 4586, "db_id": "solvency_ii", "final": {"question": "Show the names of products and the number of events they are in.", "sql": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name", "source_tables": ["products_in_events", "products"]}}
{"sample_id": 4588, "db_id": "solvency_ii", "final": {"question": "Show the names of products that are in at least two events.", "sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2", "source_tables": ["products_in_events", "products"]}}
{"sample_id": 4582, "db_id": "solvency_ii", "final": {"question": "Show different type codes of products and the number of products with each type code.", "sql": "SELECT Product_Type_Code ,  COUNT(*) FROM Products GROUP BY Product_Type_Code", "source_tables": ["products"]}}
{"sample_id": 4607, "db_id": "entertainment_awards", "final": {"question": "List the most common type of artworks.", "sql": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["artwork"]}}
{"sample_id": 4595, "db_id": "entertainment_awards", "final": {"question": "What are the names of the chairs of festivals, sorted in ascending order of the year held?", "sql": "SELECT Chair_Name FROM festival_detail ORDER BY YEAR ASC", "source_tables": ["festival_detail"]}}
{"sample_id": 4606, "db_id": "entertainment_awards", "final": {"question": "Please show different types of artworks with the corresponding number of artworks of each type.", "sql": "SELECT TYPE ,  COUNT(*) FROM artwork GROUP BY TYPE", "source_tables": ["artwork"]}}
{"sample_id": 4611, "db_id": "entertainment_awards", "final": {"question": "What are the total number of the audiences who visited any of the festivals?", "sql": "SELECT sum(Num_of_Audience) FROM festival_detail", "source_tables": ["festival_detail"]}}
{"sample_id": 4596, "db_id": "entertainment_awards", "final": {"question": "What is the location of the festival with the largest number of audience?", "sql": "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1", "source_tables": ["festival_detail"]}}
{"sample_id": 4621, "db_id": "customers_campaigns_ecommerce", "final": {"question": "Show the names of customers who have at least 2 mailshots with outcome code 'Order'.", "sql": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  'Order' GROUP BY T1.customer_id HAVING count(*)  >=  2", "source_tables": ["mailshot_customers", "customers"]}}
{"sample_id": 4619, "db_id": "customers_campaigns_ecommerce", "final": {"question": "Show the name and phone for customers with a mailshot with outcome code 'No Response'.", "sql": "SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  'No Response'", "source_tables": ["customers", "mailshot_customers"]}}
{"sample_id": 4622, "db_id": "customers_campaigns_ecommerce", "final": {"question": "Show the names of customers who have the most mailshots.", "sql": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["mailshot_customers", "customers"]}}
{"sample_id": 4639, "db_id": "college_3", "final": {"question": "Give the phones for departments in room 268.", "sql": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268", "source_tables": ["department"]}}
{"sample_id": 4644, "db_id": "college_3", "final": {"question": "Find the first names of students whose first names contain letter \"a\".", "sql": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'", "source_tables": ["student"]}}
{"sample_id": 4650, "db_id": "college_3", "final": {"question": "Find the department name that is in Building \"Mergenthaler\".", "sql": "SELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\"", "source_tables": ["department"]}}
{"sample_id": 4669, "db_id": "college_3", "final": {"question": "What is the name of the department with the fewest members?", "sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1", "source_tables": ["member_of", "department"]}}
{"sample_id": 4632, "db_id": "college_3", "final": {"question": "List all names of courses with 1 credit?", "sql": "SELECT CName FROM COURSE WHERE Credits  =  1", "source_tables": ["course"]}}
{"sample_id": 4681, "db_id": "college_3", "final": {"question": "What are the department name and room for the course INTRODUCTION TO COMPUTER SCIENCE?", "sql": "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"", "source_tables": ["course", "department"]}}
{"sample_id": 4668, "db_id": "college_3", "final": {"question": "Find the name of the department that has the fewest members.", "sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1", "source_tables": ["member_of", "department"]}}
{"sample_id": 4649, "db_id": "college_3", "final": {"question": "What are the rooms for members of the faculty who are professors and who live in building NEB?", "sql": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"", "source_tables": ["faculty"]}}
{"sample_id": 4699, "db_id": "college_3", "final": {"question": "What are the names of departments either in division AS, or in division EN and in building NEB?", "sql": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"", "source_tables": ["department"]}}
{"sample_id": 4662, "db_id": "college_3", "final": {"question": "Find the first names of faculties of rank Professor in alphabetic order.", "sql": "SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname", "source_tables": ["faculty"]}}
{"sample_id": 4633, "db_id": "college_3", "final": {"question": "What are the names of courses with 1 credit?", "sql": "SELECT CName FROM COURSE WHERE Credits  =  1", "source_tables": ["course"]}}
{"sample_id": 4636, "db_id": "college_3", "final": {"question": "What is the number of departments in Division \"AS\"?", "sql": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"", "source_tables": ["department"]}}
{"sample_id": 4688, "db_id": "college_3", "final": {"question": "What are the first names and last names of the students that minor in the department with DNO 140.", "sql": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140", "source_tables": ["student", "minor_in"]}}
{"sample_id": 4666, "db_id": "college_3", "final": {"question": "Find the name of the department that has no students minored in?", "sql": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO", "source_tables": ["minor_in", "department"]}}
{"sample_id": 4685, "db_id": "college_3", "final": {"question": "What are the distinct first names for students with a grade point of 3.8 or above in at least one course?", "sql": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8", "source_tables": ["student", "gradeconversion", "enrolled_in"]}}
{"sample_id": 4676, "db_id": "college_3", "final": {"question": "What are the name of courses that have at least five enrollments?", "sql": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5", "source_tables": ["course", "enrolled_in"]}}
{"sample_id": 4784, "db_id": "department_store", "final": {"question": "Find the id and name of customers whose address contains WY state and do not use credit card for payment.", "sql": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"", "source_tables": ["customers"]}}
{"sample_id": 4718, "db_id": "department_store", "final": {"question": "What is the average price for each type of product?", "sql": "SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code", "source_tables": ["products"]}}
{"sample_id": 4727, "db_id": "department_store", "final": {"question": "What are the distinct names of customers with an order status of Pending, sorted by customer id?", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id", "source_tables": ["customers", "customer_orders"]}}
{"sample_id": 4740, "db_id": "department_store", "final": {"question": "Find the product type whose average price is higher than the average price of all products.", "sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)", "source_tables": ["products"]}}
{"sample_id": 4786, "db_id": "department_store", "final": {"question": "Find the average price of all product clothes.", "sql": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'", "source_tables": ["products"]}}
{"sample_id": 4762, "db_id": "department_store", "final": {"question": "What are id and name of the products whose price is lower than 600 or higher than 900?", "sql": "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900", "source_tables": ["products"]}}
{"sample_id": 4765, "db_id": "department_store", "final": {"question": "What are the ids of suppliers which have an average amount purchased of above 50000 or below 30000?", "sql": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000", "source_tables": ["product_suppliers"]}}
{"sample_id": 4750, "db_id": "department_store", "final": {"question": "What are the names and ids of customers whose address contains TN?", "sql": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"", "source_tables": ["customers"]}}
{"sample_id": 4781, "db_id": "department_store", "final": {"question": "What are the distinct names of customers who have purchased at least three different products?", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3", "source_tables": ["customers", "customer_orders", "order_items"]}}
{"sample_id": 4778, "db_id": "department_store", "final": {"question": "Find the names of products that were bought by at least two distinct customers.", "sql": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2", "source_tables": ["customer_orders", "order_items", "products"]}}
{"sample_id": 4749, "db_id": "department_store", "final": {"question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.", "sql": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')", "source_tables": ["staff_department_assignments"]}}
{"sample_id": 4735, "db_id": "department_store", "final": {"question": "Return the ids of the two department store chains with the most department stores.", "sql": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2", "source_tables": ["department_stores"]}}
{"sample_id": 4702, "db_id": "department_store", "final": {"question": "What are the ids of the top three products that were purchased in the largest amount?", "sql": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3", "source_tables": ["product_suppliers"]}}
{"sample_id": 4714, "db_id": "department_store", "final": {"question": "What is the id of the product that was ordered the most often?", "sql": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["order_items"]}}
{"sample_id": 4751, "db_id": "department_store", "final": {"question": "Return the names and ids of customers who have TN in their address.", "sql": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"", "source_tables": ["customers"]}}
{"sample_id": 4730, "db_id": "department_store", "final": {"question": "Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products.", "sql": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)", "source_tables": ["product_suppliers", "products"]}}
{"sample_id": 4766, "db_id": "department_store", "final": {"question": "What are the average amount purchased and value purchased for the supplier who supplies the most products.", "sql": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["product_suppliers"]}}
{"sample_id": 4748, "db_id": "department_store", "final": {"question": "What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?", "sql": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')", "source_tables": ["staff_department_assignments"]}}
{"sample_id": 4741, "db_id": "department_store", "final": {"question": "What is the code of the product type with an average price higher than the average price of all products?", "sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)", "source_tables": ["products"]}}
{"sample_id": 4819, "db_id": "aircraft", "final": {"question": "For each aircraft that has won an award, what is its name and how many time has it won?", "sql": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft", "source_tables": ["aircraft", "match"]}}
{"sample_id": 4816, "db_id": "aircraft", "final": {"question": "List the name of the aircraft that has been named winning aircraft the most number of times.", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["aircraft", "match"]}}
{"sample_id": 4821, "db_id": "aircraft", "final": {"question": "What are the names of all pilots listed by descending age?", "sql": "SELECT Name FROM pilot ORDER BY Age DESC", "source_tables": ["pilot"]}}
{"sample_id": 4820, "db_id": "aircraft", "final": {"question": "List names of all pilot in descending order of age.", "sql": "SELECT Name FROM pilot ORDER BY Age DESC", "source_tables": ["pilot"]}}
{"sample_id": 4800, "db_id": "aircraft", "final": {"question": "What are the maximum and minimum number of transit passengers of all aiports.", "sql": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport", "source_tables": ["airport"]}}
{"sample_id": 4793, "db_id": "aircraft", "final": {"question": "What are the descriptions for the aircrafts?", "sql": "SELECT Description FROM aircraft", "source_tables": ["aircraft"]}}
{"sample_id": 4829, "db_id": "aircraft", "final": {"question": "What is all the information on the airport with the largest number of international passengers?", "sql": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1", "source_tables": ["airport"]}}
{"sample_id": 4803, "db_id": "aircraft", "final": {"question": "what is the name of every pilot who is at least 25 years old?", "sql": "SELECT Name FROM pilot WHERE Age  >=  25", "source_tables": ["pilot"]}}
{"sample_id": 4792, "db_id": "aircraft", "final": {"question": "List the description of all aircrafts.", "sql": "SELECT Description FROM aircraft", "source_tables": ["aircraft"]}}
{"sample_id": 4808, "db_id": "aircraft", "final": {"question": "Please show the names of aircrafts associated with airport with name \"London Gatwick\".", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"", "source_tables": ["airport", "aircraft", "airport_aircraft"]}}
{"sample_id": 4841, "db_id": "local_govt_and_lot", "final": {"question": "What are the id and details of the customers who have at least 3 events?", "sql": "SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3", "source_tables": ["customers", "customer_events"]}}
{"sample_id": 4851, "db_id": "local_govt_and_lot", "final": {"question": "How many customers did not have any event?", "sql": "SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )", "source_tables": ["customers", "customer_events"]}}
{"sample_id": 4840, "db_id": "local_govt_and_lot", "final": {"question": "List the id and type of each thing, and the details of the organization that owns it.", "sql": "SELECT T1.thing_id ,  T1.type_of_Thing_Code ,  T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id  =  T2.organization_id", "source_tables": ["things", "organizations"]}}
{"sample_id": 4845, "db_id": "local_govt_and_lot", "final": {"question": "How many distinct locations have the things with service detail 'Unsatisfied' been located in?", "sql": "SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied'", "source_tables": ["things", "timed_locations_of_things"]}}
{"sample_id": 4878, "db_id": "school_player", "final": {"question": "What are the location and nickname of each school?", "sql": "SELECT T1.Location ,  T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID  =  T2.School_ID", "source_tables": ["school_details", "school"]}}
{"sample_id": 4869, "db_id": "school_player", "final": {"question": "List the teams of the players with the top 5 largest ages.", "sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5", "source_tables": ["player"]}}
{"sample_id": 4868, "db_id": "school_player", "final": {"question": "Which team has the oldest player?", "sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1", "source_tables": ["player"]}}
{"sample_id": 4867, "db_id": "school_player", "final": {"question": "Find the team of the player of the highest age.", "sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1", "source_tables": ["player"]}}
{"sample_id": 4863, "db_id": "school_player", "final": {"question": "What are the teams of the players, sorted in ascending alphabetical order?", "sql": "SELECT Team FROM player ORDER BY Team ASC", "source_tables": ["player"]}}
{"sample_id": 4862, "db_id": "school_player", "final": {"question": "Take the average of the school enrollment.", "sql": "SELECT avg(Enrollment) FROM school", "source_tables": ["school"]}}
{"sample_id": 4864, "db_id": "school_player", "final": {"question": "Find the team of each player and sort them in ascending alphabetical order.", "sql": "SELECT Team FROM player ORDER BY Team ASC", "source_tables": ["player"]}}
{"sample_id": 4882, "db_id": "school_player", "final": {"question": "Order denominations in descending order of the count of schools with the denomination. Return each denomination with the count of schools.", "sql": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC", "source_tables": ["school"]}}
{"sample_id": 4924, "db_id": "store_product", "final": {"question": "What are the products with the maximum page size A4 that also have a pages per minute color smaller than 5?", "sql": "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5", "source_tables": ["product"]}}
{"sample_id": 4913, "db_id": "store_product", "final": {"question": "Which city is the headquarter of the store named \"Blackville\" in?", "sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"", "source_tables": ["store", "district", "store_district"]}}
{"sample_id": 4898, "db_id": "store_product", "final": {"question": "What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents?", "sql": "SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000", "source_tables": ["district"]}}
{"sample_id": 4914, "db_id": "store_product", "final": {"question": "What city is the headquarter of the store Blackville?", "sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"", "source_tables": ["store", "district", "store_district"]}}
{"sample_id": 4929, "db_id": "store_product", "final": {"question": "Find the most prominent max page size among all the products.", "sql": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1", "source_tables": ["product"]}}
{"sample_id": 4893, "db_id": "store_product", "final": {"question": "Find all the distinct district names ordered by city area in descending.", "sql": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC", "source_tables": ["district"]}}
{"sample_id": 4900, "db_id": "store_product", "final": {"question": "What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?", "sql": "SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000", "source_tables": ["district"]}}
{"sample_id": 4920, "db_id": "store_product", "final": {"question": "What is the average number of pages per minute color?", "sql": "SELECT avg(pages_per_minute_color) FROM product", "source_tables": ["product"]}}
{"sample_id": 4925, "db_id": "store_product", "final": {"question": "Find products with max page size as \"A4\" or pages per minute color smaller than 5.", "sql": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5", "source_tables": ["product"]}}
{"sample_id": 4904, "db_id": "store_product", "final": {"question": "What is the name of the district with the smallest area?", "sql": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1", "source_tables": ["district"]}}
{"sample_id": 5021, "db_id": "soccer_2", "final": {"question": "Find the names of states that have some college students playing in goalie and mid positions.", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'", "source_tables": ["college", "tryout"]}}
{"sample_id": 5005, "db_id": "soccer_2", "final": {"question": "Find the average hours for the students whose tryout decision is no.", "sql": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'", "source_tables": ["player", "tryout"]}}
{"sample_id": 5016, "db_id": "soccer_2", "final": {"question": "How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges?", "sql": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'", "source_tables": ["college", "tryout"]}}
{"sample_id": 4939, "db_id": "soccer_2", "final": {"question": "What is the average enrollment number?", "sql": "SELECT avg(enr) FROM College", "source_tables": ["college"]}}
{"sample_id": 4994, "db_id": "soccer_2", "final": {"question": "What are the names of all students who tried out in alphabetical order?", "sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName", "source_tables": ["player", "tryout"]}}
{"sample_id": 5015, "db_id": "soccer_2", "final": {"question": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.", "sql": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'", "source_tables": ["college", "tryout"]}}
{"sample_id": 4991, "db_id": "soccer_2", "final": {"question": "Find the name and college of students whose decisions are yes in the tryout.", "sql": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "source_tables": ["player", "tryout"]}}
{"sample_id": 4968, "db_id": "soccer_2", "final": {"question": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?", "sql": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"", "source_tables": ["college"]}}
{"sample_id": 4985, "db_id": "soccer_2", "final": {"question": "What is the name of school that has the smallest enrollment in each state?", "sql": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state", "source_tables": ["college"]}}
{"sample_id": 4960, "db_id": "soccer_2", "final": {"question": "What is the average, maximum, and minimum for the number of hours spent training?", "sql": "SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player", "source_tables": ["player"]}}
{"sample_id": 5014, "db_id": "soccer_2", "final": {"question": "What are the names of all tryout participants who are from the largest college?", "sql": "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)", "source_tables": ["college", "player", "tryout"]}}
{"sample_id": 4967, "db_id": "soccer_2", "final": {"question": "Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.", "sql": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"", "source_tables": ["college"]}}
{"sample_id": 4974, "db_id": "soccer_2", "final": {"question": "What are the name of the players who received a card in descending order of the hours of training?", "sql": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC", "source_tables": ["player"]}}
{"sample_id": 5022, "db_id": "soccer_2", "final": {"question": "What are the names of the states that have some college students playing in the positions of goalie and mid-field?", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'", "source_tables": ["college", "tryout"]}}
{"sample_id": 4971, "db_id": "soccer_2", "final": {"question": "List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.", "sql": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName", "source_tables": ["college"]}}
{"sample_id": 4984, "db_id": "soccer_2", "final": {"question": "What are the names of the schools with the top 3 largest class sizes?", "sql": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3", "source_tables": ["college"]}}
{"sample_id": 4966, "db_id": "soccer_2", "final": {"question": "Who are the players that have names containing the letter a?", "sql": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'", "source_tables": ["player"]}}
{"sample_id": 5042, "db_id": "soccer_2", "final": {"question": "How many states have smaller colleges than average?", "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)", "source_tables": ["college"]}}
{"sample_id": 4990, "db_id": "soccer_2", "final": {"question": "What are the different states that had students successfully try out?", "sql": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'", "source_tables": ["college", "tryout"]}}
{"sample_id": 4957, "db_id": "soccer_2", "final": {"question": "How many students whose are playing the role of goalie?", "sql": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'", "source_tables": ["tryout"]}}
{"sample_id": 4995, "db_id": "soccer_2", "final": {"question": "Find the name and hours of the students whose tryout decision is yes.", "sql": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "source_tables": ["player", "tryout"]}}
{"sample_id": 5011, "db_id": "soccer_2", "final": {"question": "Which college has any student who is a goalie and succeeded in the tryout.", "sql": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'", "source_tables": ["tryout"]}}
{"sample_id": 5062, "db_id": "device", "final": {"question": "What are the names of device shops, and what are the carriers that they carry devices in stock for?", "sql": "SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID", "source_tables": ["stock", "device", "shop"]}}
{"sample_id": 5064, "db_id": "device", "final": {"question": "What are the names of shops that have more than a single kind of device in stock?", "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1", "source_tables": ["stock", "shop"]}}
{"sample_id": 5050, "db_id": "device", "final": {"question": "Return the names of shops, ordered by year of opening ascending.", "sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC", "source_tables": ["shop"]}}
{"sample_id": 5053, "db_id": "device", "final": {"question": "What are the names and location of the shops in ascending alphabetical order of name.", "sql": "SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC", "source_tables": ["shop"]}}
{"sample_id": 5068, "db_id": "device", "final": {"question": "What is the name of the shop that has the greatest quantity of devices in stock?", "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1", "source_tables": ["stock", "shop"]}}
{"sample_id": 5078, "db_id": "device", "final": {"question": "Which locations contains both shops that opened after the year 2012 and shops that opened before 2008?", "sql": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008", "source_tables": ["shop"]}}
{"sample_id": 5044, "db_id": "device", "final": {"question": "Count the number of devices.", "sql": "SELECT count(*) FROM device", "source_tables": ["device"]}}
{"sample_id": 5080, "db_id": "device", "final": {"question": "What are the carriers of devices that are not in stock anywhere?", "sql": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)", "source_tables": ["stock", "device"]}}
{"sample_id": 5092, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Find the phone number and email address of customer \"Harold\".", "sql": "SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  \"Harold\"", "source_tables": ["customers"]}}
{"sample_id": 5154, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Which status code is the most common of all the bookings?", "sql": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["bookings"]}}
{"sample_id": 5164, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Give me the description of the service type that offers not only the photo product but also the film product.", "sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'", "source_tables": ["services", "ref_service_types"]}}
{"sample_id": 5116, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Find the states or counties where the stores with marketing region code \"CA\" are located.", "sql": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\"", "source_tables": ["stores", "addresses"]}}
{"sample_id": 5140, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Find the order dates of the orders with price above 1000.", "sql": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000", "source_tables": ["customer_orders", "order_items", "products"]}}
{"sample_id": 5153, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What is the most frequent status of bookings?", "sql": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["bookings"]}}
{"sample_id": 5132, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Find the product names whose average product price is below 1000000.", "sql": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000", "source_tables": ["products"]}}
{"sample_id": 5093, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Show all the Store_Name of drama workshop groups.", "sql": "SELECT Store_Name FROM Drama_Workshop_Groups", "source_tables": ["drama_workshop_groups"]}}
{"sample_id": 5101, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Show all the distinct product names with price higher than the average.", "sql": "SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS)", "source_tables": ["products"]}}
{"sample_id": 5111, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What is the payment method code used by the most orders?", "sql": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["invoices"]}}
{"sample_id": 5124, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Find the description and code of the service type that is performed the most times.", "sql": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["services", "ref_service_types"]}}
{"sample_id": 5146, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "List the email addresses of the drama workshop groups located in Alaska state.", "sql": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\"", "source_tables": ["drama_workshop_groups", "addresses"]}}
{"sample_id": 5099, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What is the description of the marketing region China?", "sql": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  \"China\"", "source_tables": ["marketing_regions"]}}
{"sample_id": 5131, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What are the product names with average product price smaller than 1000000?", "sql": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000", "source_tables": ["products"]}}
{"sample_id": 5094, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What are the store names of drama workshop groups?", "sql": "SELECT Store_Name FROM Drama_Workshop_Groups", "source_tables": ["drama_workshop_groups"]}}
{"sample_id": 5135, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What are the order details of the products with price higher than 2000?", "sql": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000", "source_tables": ["order_items", "products"]}}
{"sample_id": 5102, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What are the distinct names of the products that cost more than the average?", "sql": "SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS)", "source_tables": ["products"]}}
{"sample_id": 5244, "db_id": "music_2", "final": {"question": "How many different songs have shared vocals?", "sql": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"", "source_tables": ["vocals", "songs"]}}
{"sample_id": 5241, "db_id": "music_2", "final": {"question": "Find the number of vocal types used in song \"Le Pop\"", "sql": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "source_tables": ["vocals", "songs"]}}
{"sample_id": 5246, "db_id": "music_2", "final": {"question": "What are the different names of all songs without back vocals?", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"", "source_tables": ["vocals", "songs"]}}
{"sample_id": 5184, "db_id": "music_2", "final": {"question": "What are the first and last names of the performer who was in the back stage position for the song \"Badlands\"?", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"", "source_tables": ["songs", "performance", "band"]}}
{"sample_id": 5260, "db_id": "music_2", "final": {"question": "What are the song titles on the album \"A Kiss Before You Go: Live in Hamburg\"?", "sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"A Kiss Before You Go: Live in Hamburg\"", "source_tables": ["albums", "songs", "tracklists"]}}
{"sample_id": 5173, "db_id": "music_2", "final": {"question": "How many songs are there?", "sql": "SELECT count(*) FROM Songs", "source_tables": ["songs"]}}
{"sample_id": 5196, "db_id": "music_2", "final": {"question": "What are the different instruments listed in the database?", "sql": "SELECT DISTINCT instrument FROM Instruments", "source_tables": ["instruments"]}}
{"sample_id": 5245, "db_id": "music_2", "final": {"question": "Find all the songs that do not have a back vocal.", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"", "source_tables": ["vocals", "songs"]}}
{"sample_id": 5177, "db_id": "music_2", "final": {"question": "Hom many musicians performed in the song \"Flash\"?", "sql": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"", "source_tables": ["songs", "performance", "band"]}}
{"sample_id": 5203, "db_id": "music_2", "final": {"question": "What instruments does the the song \"Le Pop\" use?", "sql": "SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "source_tables": ["songs", "instruments"]}}
{"sample_id": 5227, "db_id": "music_2", "final": {"question": "Find all the vocal types.", "sql": "SELECT DISTINCT TYPE FROM vocals", "source_tables": ["vocals"]}}
{"sample_id": 5243, "db_id": "music_2", "final": {"question": "How many songs have a shared vocal?", "sql": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"", "source_tables": ["vocals", "songs"]}}
{"sample_id": 5258, "db_id": "music_2", "final": {"question": "What are the names of the songs that do not have back vocals?", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"", "source_tables": ["vocals", "songs"]}}
{"sample_id": 5179, "db_id": "music_2", "final": {"question": "Find all the songs produced by artists with first name \"Marianne\".", "sql": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.firstname  =  \"Marianne\"", "source_tables": ["songs", "performance", "band"]}}
{"sample_id": 5181, "db_id": "music_2", "final": {"question": "Who performed the song named \"Badlands\"? Show the first name and the last name.", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\"", "source_tables": ["songs", "performance", "band"]}}
{"sample_id": 5204, "db_id": "music_2", "final": {"question": "What are the instruments are used in the song \"Le Pop\"?", "sql": "SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "source_tables": ["songs", "instruments"]}}
{"sample_id": 5240, "db_id": "music_2", "final": {"question": "What types of vocals are used in the song \"Badlands\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"", "source_tables": ["vocals", "songs"]}}
{"sample_id": 5182, "db_id": "music_2", "final": {"question": "What are the first and last names of the artist who perfomed the song \"Badlands\"?", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\"", "source_tables": ["songs", "performance", "band"]}}
{"sample_id": 5212, "db_id": "music_2", "final": {"question": "What is the song with the most vocals?", "sql": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["vocals", "songs"]}}
{"sample_id": 5253, "db_id": "music_2", "final": {"question": "Which vocal type has the band mate with first name \"Marianne\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Marianne\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["vocals", "band"]}}
{"sample_id": 5330, "db_id": "manufactory_1", "final": {"question": "What are the names and prices of products that cost at least 180, sorted by price decreasing and name ascending?", "sql": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC", "source_tables": ["products"]}}
{"sample_id": 5338, "db_id": "manufactory_1", "final": {"question": "What are the names and average prices of products for manufacturers whose products cost on average 150 or more?", "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150", "source_tables": ["products", "manufacturers"]}}
{"sample_id": 5294, "db_id": "manufactory_1", "final": {"question": "What are the names of manufacturers with revenue greater than the average of all revenues?", "sql": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)", "source_tables": ["manufacturers"]}}
{"sample_id": 5281, "db_id": "manufactory_1", "final": {"question": "Find the founder of the company whose name begins with the letter 'S'.", "sql": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'", "source_tables": ["manufacturers"]}}
{"sample_id": 5266, "db_id": "manufactory_1", "final": {"question": "Return the founder of Sony.", "sql": "SELECT founder FROM manufacturers WHERE name  =  'Sony'", "source_tables": ["manufacturers"]}}
{"sample_id": 5280, "db_id": "manufactory_1", "final": {"question": "How many manufacturers have headquarters in either Tokyo or Beijing?", "sql": "SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'", "source_tables": ["manufacturers"]}}
{"sample_id": 5325, "db_id": "manufactory_1", "final": {"question": "Compute the average price of all products with manufacturer code equal to 2.", "sql": "SELECT avg(price) FROM products WHERE Manufacturer  =  2", "source_tables": ["products"]}}
{"sample_id": 5292, "db_id": "manufactory_1", "final": {"question": "What are the names, headquarters and revenues for manufacturers, sorted by revenue descending?", "sql": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC", "source_tables": ["manufacturers"]}}
{"sample_id": 5303, "db_id": "manufactory_1", "final": {"question": "Find the total revenue for each manufacturer.", "sql": "SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name", "source_tables": ["manufacturers"]}}
{"sample_id": 5277, "db_id": "manufactory_1", "final": {"question": "What are the different cities listed?", "sql": "SELECT DISTINCT headquarter FROM manufacturers", "source_tables": ["manufacturers"]}}
{"sample_id": 5340, "db_id": "manufactory_1", "final": {"question": "What is the name and price of the cheapest product?", "sql": "SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1", "source_tables": ["products"]}}
{"sample_id": 5323, "db_id": "manufactory_1", "final": {"question": "Compute the average price of all the products.", "sql": "SELECT avg(price) FROM products", "source_tables": ["products"]}}
{"sample_id": 5272, "db_id": "manufactory_1", "final": {"question": "Return the average, maximum, and total revenues across all manufacturers.", "sql": "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers", "source_tables": ["manufacturers"]}}
{"sample_id": 5336, "db_id": "manufactory_1", "final": {"question": "What are the average prices of products, grouped by manufacturer name?", "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name", "source_tables": ["products", "manufacturers"]}}
{"sample_id": 5310, "db_id": "manufactory_1", "final": {"question": "How many products are not made by Sony?", "sql": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')", "source_tables": ["products", "manufacturers"]}}
{"sample_id": 5287, "db_id": "manufactory_1", "final": {"question": "Find the name of product that is produced by both companies Creative Labs and Sony.", "sql": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'", "source_tables": ["products", "manufacturers"]}}
{"sample_id": 5392, "db_id": "tracking_software_problems", "final": {"question": "Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin?", "sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"", "source_tables": ["staff", "problems", "product"]}}
{"sample_id": 5388, "db_id": "tracking_software_problems", "final": {"question": "What are the ids of the problems that are from the product \"voluptatem\" and are reported after 1995?", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\"", "source_tables": ["problems", "product"]}}
{"sample_id": 5382, "db_id": "tracking_software_problems", "final": {"question": "Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems.", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )", "source_tables": ["staff", "problems"]}}
{"sample_id": 5390, "db_id": "tracking_software_problems", "final": {"question": "Which staff members who reported problems from the product \"rem\" but not \"aut\"? Give me their first and last names.", "sql": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"", "source_tables": ["staff", "problems", "product"]}}
{"sample_id": 5350, "db_id": "tracking_software_problems", "final": {"question": "For the problem with id 10, return the ids and dates of its problem logs.", "sql": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10", "source_tables": ["problem_log"]}}
{"sample_id": 5361, "db_id": "tracking_software_problems", "final": {"question": "Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.", "sql": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"", "source_tables": ["staff", "problems"]}}
{"sample_id": 5372, "db_id": "tracking_software_problems", "final": {"question": "What are the products that have problems reported after 1986-11-13? Give me the product id and the count of problems reported after 1986-11-13.", "sql": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id", "source_tables": ["problems", "product"]}}
{"sample_id": 5383, "db_id": "tracking_software_problems", "final": {"question": "What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )", "source_tables": ["staff", "problems"]}}
{"sample_id": 5363, "db_id": "tracking_software_problems", "final": {"question": "Find the ids of the problems that are reported by the staff whose last name is Bosco.", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\"", "source_tables": ["staff", "problems"]}}
{"sample_id": 5384, "db_id": "tracking_software_problems", "final": {"question": "Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick.", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )", "source_tables": ["staff", "problems"]}}
{"sample_id": 5346, "db_id": "tracking_software_problems", "final": {"question": "Which problem log was created most recently? Give me the log id.", "sql": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1", "source_tables": ["problem_log"]}}
{"sample_id": 5434, "db_id": "shop_membership", "final": {"question": "What are the names of the branches that have some members with a hometown in Louisville, Kentucky and also those from Hiram, Goergia?", "sql": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'", "source_tables": ["membership_register_branch", "branch", "member"]}}
{"sample_id": 5411, "db_id": "shop_membership", "final": {"question": "Show the membership level with most number of members.", "sql": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1", "source_tables": ["member"]}}
{"sample_id": 5402, "db_id": "shop_membership", "final": {"question": "What are the opening years in which at least two shops opened?", "sql": "SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2", "source_tables": ["branch"]}}
{"sample_id": 5412, "db_id": "shop_membership", "final": {"question": "What is the membership level with the most people?", "sql": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1", "source_tables": ["member"]}}
{"sample_id": 5418, "db_id": "shop_membership", "final": {"question": "What are the names of the members that have never registered at any branch?", "sql": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)", "source_tables": ["membership_register_branch", "member"]}}
{"sample_id": 5401, "db_id": "shop_membership", "final": {"question": "List all open years when at least two shops are opened.", "sql": "SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2", "source_tables": ["branch"]}}
{"sample_id": 5416, "db_id": "shop_membership", "final": {"question": "For each branch id, what are the names of the branches that were registered after 2015?", "sql": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id", "source_tables": ["membership_register_branch", "branch"]}}
{"sample_id": 5395, "db_id": "shop_membership", "final": {"question": "Show name, address road, and city for all branches sorted by open year.", "sql": "SELECT name ,  address_road ,  city FROM branch ORDER BY open_year", "source_tables": ["branch"]}}
{"sample_id": 5426, "db_id": "shop_membership", "final": {"question": "What are the cities that have a branch that opened in 2001 and a branch with more than 100 members?", "sql": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100", "source_tables": ["branch"]}}
{"sample_id": 5417, "db_id": "shop_membership", "final": {"question": "Show member names without any registered branch.", "sql": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)", "source_tables": ["membership_register_branch", "member"]}}
{"sample_id": 5471, "db_id": "voter_2", "final": {"question": "Find the distinct Advisor of students who have treasurer votes in the spring election cycle.", "sql": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5464, "db_id": "voter_2", "final": {"question": "List all the distinct president votes and the vice president votes.", "sql": "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD", "source_tables": ["voting_record"]}}
{"sample_id": 5503, "db_id": "voter_2", "final": {"question": "What is the most common major among female (sex is F) students?", "sql": "SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 5454, "db_id": "voter_2", "final": {"question": "Tell me the ages of the oldest and youngest students studying major 600.", "sql": "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600", "source_tables": ["student"]}}
{"sample_id": 5463, "db_id": "voter_2", "final": {"question": "Report the distinct president vote and the vice president vote.", "sql": "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD", "source_tables": ["voting_record"]}}
{"sample_id": 5440, "db_id": "voter_2", "final": {"question": "How many voting records do we have?", "sql": "SELECT count(*) FROM VOTING_RECORD", "source_tables": ["voting_record"]}}
{"sample_id": 5459, "db_id": "voter_2", "final": {"question": "What are the distinct president votes on 08/30/2015?", "sql": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"", "source_tables": ["voting_record"]}}
{"sample_id": 5483, "db_id": "voter_2", "final": {"question": "Find the average age of students who live in the city with code \"NYC\" and have secretary votes in the spring election cycle.", "sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5441, "db_id": "voter_2", "final": {"question": "Find the distinct number of president votes.", "sql": "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD", "source_tables": ["voting_record"]}}
{"sample_id": 5457, "db_id": "voter_2", "final": {"question": "What are the distinct secretary votes in the fall election cycle?", "sql": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"", "source_tables": ["voting_record"]}}
{"sample_id": 5461, "db_id": "voter_2", "final": {"question": "Report the distinct registration date and the election cycle.", "sql": "SELECT DISTINCT Registration_Date ,  Election_Cycle FROM VOTING_RECORD", "source_tables": ["voting_record"]}}
{"sample_id": 5482, "db_id": "voter_2", "final": {"question": "Which students live in the city with code \"NYC\" and have class senator votes in the spring election cycle? Count the numbers.", "sql": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5488, "db_id": "voter_2", "final": {"question": "What are the distinct first names of the students who have vice president votes and reside in a city whose city code is not PIT?", "sql": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5451, "db_id": "voter_2", "final": {"question": "What is the average age of female (sex is F) students?", "sql": "SELECT avg(Age) FROM STUDENT WHERE Sex  =  \"F\"", "source_tables": ["student"]}}
{"sample_id": 5474, "db_id": "voter_2", "final": {"question": "What are the distinct majors that students with treasurer votes are studying?", "sql": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5539, "db_id": "products_gen_characteristics", "final": {"question": "What is the color code and description of the product named \"chervil\"?", "sql": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5592, "db_id": "products_gen_characteristics", "final": {"question": "Give the names of characteristics that are in two or more products?", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2", "source_tables": ["characteristics", "product_characteristics", "products"]}}
{"sample_id": 5535, "db_id": "products_gen_characteristics", "final": {"question": "Find the category descriptions of the products whose descriptions include letter 't'.", "sql": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'", "source_tables": ["ref_product_categories", "products"]}}
{"sample_id": 5562, "db_id": "products_gen_characteristics", "final": {"question": "What are the names of the products that have a color description of 'red' and the 'fast' characteristic?", "sql": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\"", "source_tables": ["ref_colors", "characteristics", "product_characteristics", "products"]}}
{"sample_id": 5523, "db_id": "products_gen_characteristics", "final": {"question": "List the names, color descriptions and product descriptions of products with category \"Herbs\".", "sql": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5569, "db_id": "products_gen_characteristics", "final": {"question": "Count the products that have the color description \"white\" or have the characteristic name \"hot\".", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"", "source_tables": ["ref_colors", "characteristics", "product_characteristics", "products"]}}
{"sample_id": 5580, "db_id": "products_gen_characteristics", "final": {"question": "What are the unit of measure and category code for the 'chervil' product?", "sql": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"chervil\"", "source_tables": ["ref_product_categories", "products"]}}
{"sample_id": 5522, "db_id": "products_gen_characteristics", "final": {"question": "Return the names of products in the category 'Spices'.", "sql": "SELECT product_name FROM products WHERE product_category_code  =  \"Spices\"", "source_tables": ["products"]}}
{"sample_id": 5543, "db_id": "products_gen_characteristics", "final": {"question": "List all the product names with the color description \"white\".", "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5514, "db_id": "products_gen_characteristics", "final": {"question": "Count the number of characteristics.", "sql": "SELECT count(*) FROM CHARACTERISTICS", "source_tables": ["characteristics"]}}
{"sample_id": 5553, "db_id": "products_gen_characteristics", "final": {"question": "List all the characteristic names and data types of product \"cumin\".", "sql": "SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"cumin\"", "source_tables": ["characteristics", "product_characteristics", "products"]}}
{"sample_id": 5586, "db_id": "products_gen_characteristics", "final": {"question": "Give the color description that is least common across products.", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5589, "db_id": "products_gen_characteristics", "final": {"question": "What are the names, details and data types of the characteristics which are never used by any product?", "sql": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id", "source_tables": ["product_characteristics", "characteristics"]}}
{"sample_id": 5546, "db_id": "products_gen_characteristics", "final": {"question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.", "sql": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5593, "db_id": "products_gen_characteristics", "final": {"question": "How many colors are never used by any product?", "sql": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5521, "db_id": "products_gen_characteristics", "final": {"question": "What are the names of products with category \"Spices\"?", "sql": "SELECT product_name FROM products WHERE product_category_code  =  \"Spices\"", "source_tables": ["products"]}}
{"sample_id": 5594, "db_id": "products_gen_characteristics", "final": {"question": "Count the number of colors that are not used in any products.", "sql": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5525, "db_id": "products_gen_characteristics", "final": {"question": "How many products are there under the category \"Seeds\"?", "sql": "SELECT count(*) FROM products WHERE product_category_code  =  \"Seeds\"", "source_tables": ["products"]}}
{"sample_id": 5623, "db_id": "swimming", "final": {"question": "Find all details for each swimmer.", "sql": "SELECT * FROM swimmer", "source_tables": ["swimmer"]}}
{"sample_id": 5613, "db_id": "swimming", "final": {"question": "What is the name of the stadium which held the most events?", "sql": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["event", "stadium"]}}
{"sample_id": 5606, "db_id": "swimming", "final": {"question": "Which countries do not have a stadium that was opened after 2006?", "sql": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year  >  2006", "source_tables": ["stadium"]}}
{"sample_id": 5618, "db_id": "swimming", "final": {"question": "Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time.", "sql": "SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1", "source_tables": ["swimmer", "record"]}}
{"sample_id": 5601, "db_id": "swimming", "final": {"question": "Find the country that has the most stadiums.", "sql": "SELECT country FROM stadium GROUP BY country ORDER BY count(*) DESC LIMIT 1", "source_tables": ["stadium"]}}
{"sample_id": 5602, "db_id": "swimming", "final": {"question": "Which country has at most 3 stadiums listed?", "sql": "SELECT country FROM stadium GROUP BY country HAVING count(*)  <=  3", "source_tables": ["stadium"]}}
{"sample_id": 5632, "db_id": "railway", "final": {"question": "What is the name of the oldest manager?", "sql": "SELECT Name FROM manager ORDER BY Age DESC LIMIT 1", "source_tables": ["manager"]}}
{"sample_id": 5639, "db_id": "railway", "final": {"question": "Show different locations of railways along with the corresponding number of railways at each location.", "sql": "SELECT LOCATION ,  COUNT(*) FROM railway GROUP BY LOCATION", "source_tables": ["railway"]}}
{"sample_id": 5642, "db_id": "railway", "final": {"question": "Show the countries that have both managers of age above 50 and managers of age below 46.", "sql": "SELECT Country FROM manager WHERE Age  >  50 INTERSECT SELECT Country FROM manager WHERE Age  <  46", "source_tables": ["manager"]}}
{"sample_id": 5634, "db_id": "railway", "final": {"question": "Show the builder of railways associated with the trains named \"Andaman Exp\".", "sql": "SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID WHERE T2.Name  =  \"Andaman Exp\"", "source_tables": ["train", "railway"]}}
{"sample_id": 5630, "db_id": "railway", "final": {"question": "What are the names of managers in ascending order of level?", "sql": "SELECT Name FROM manager ORDER BY LEVEL ASC", "source_tables": ["manager"]}}
{"sample_id": 5648, "db_id": "customers_and_products_contacts", "final": {"question": "Show each state and the number of addresses in each state.", "sql": "SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county", "source_tables": ["addresses"]}}
{"sample_id": 5654, "db_id": "customers_and_products_contacts", "final": {"question": "Show the product name and total order quantity for each product.", "sql": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id", "source_tables": ["order_items", "products"]}}
{"sample_id": 5646, "db_id": "customers_and_products_contacts", "final": {"question": "How many addresses are there in country USA?", "sql": "SELECT count(*) FROM addresses WHERE country  =  'USA'", "source_tables": ["addresses"]}}
{"sample_id": 5750, "db_id": "dorm_1", "final": {"question": "What are the first names of all students who live in the dorm with the most amenities?", "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["dorm_amenity", "lives_in", "dorm", "has_amenity", "student"]}}
{"sample_id": 5744, "db_id": "dorm_1", "final": {"question": "What are the names of the amenities that Smith Hall has?", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'", "source_tables": ["dorm", "dorm_amenity", "has_amenity"]}}
{"sample_id": 5688, "db_id": "dorm_1", "final": {"question": "How many different genders are there in the dorms?", "sql": "SELECT count(DISTINCT gender) FROM dorm", "source_tables": ["dorm"]}}
{"sample_id": 5685, "db_id": "dorm_1", "final": {"question": "Find the name of dorms that do not have any amenity", "sql": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)", "source_tables": ["dorm", "has_amenity"]}}
{"sample_id": 5690, "db_id": "dorm_1", "final": {"question": "What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it?", "sql": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'", "source_tables": ["dorm"]}}
{"sample_id": 5748, "db_id": "dorm_1", "final": {"question": "What is the most common amenity in the dorms?", "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["has_amenity", "dorm_amenity"]}}
{"sample_id": 5729, "db_id": "dorm_1", "final": {"question": "Find the average age of students living in each dorm and the name of dorm.", "sql": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name", "source_tables": ["student", "dorm", "lives_in"]}}
{"sample_id": 5707, "db_id": "dorm_1", "final": {"question": "Find the first and last name of students whose age is younger than the average age.", "sql": "SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)", "source_tables": ["student"]}}
{"sample_id": 5743, "db_id": "dorm_1", "final": {"question": "Find the name of amenities Smith Hall dorm have.", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'", "source_tables": ["dorm", "dorm_amenity", "has_amenity"]}}
{"sample_id": 5734, "db_id": "dorm_1", "final": {"question": "How many students are older than 20 in each dorm?", "sql": "SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name", "source_tables": ["student", "dorm", "lives_in"]}}
{"sample_id": 5683, "db_id": "dorm_1", "final": {"question": "Find the number of dorms that have some amenity.", "sql": "SELECT count(DISTINCT dormid) FROM has_amenity", "source_tables": ["has_amenity"]}}
{"sample_id": 5733, "db_id": "dorm_1", "final": {"question": "Find the number of students who is older than 20 in each dorm.", "sql": "SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name", "source_tables": ["student", "dorm", "lives_in"]}}
{"sample_id": 5678, "db_id": "dorm_1", "final": {"question": "How many students exist?", "sql": "SELECT count(*) FROM student", "source_tables": ["student"]}}
{"sample_id": 5674, "db_id": "dorm_1", "final": {"question": "How many diffrent dorm amenities are there?", "sql": "SELECT count(*) FROM dorm_amenity", "source_tables": ["dorm_amenity"]}}
{"sample_id": 5747, "db_id": "dorm_1", "final": {"question": "Find the name of amenity that is most common in all dorms.", "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["has_amenity", "dorm_amenity"]}}
{"sample_id": 5736, "db_id": "dorm_1", "final": {"question": "What are the first names of all students in Smith Hall?", "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'", "source_tables": ["student", "dorm", "lives_in"]}}
{"sample_id": 5720, "db_id": "dorm_1", "final": {"question": "How many students live in each city and what are their average ages?", "sql": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code", "source_tables": ["student"]}}
{"sample_id": 5669, "db_id": "dorm_1", "final": {"question": "Find the first name of students living in city PHL whose age is between 20 and 25.", "sql": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25", "source_tables": ["student"]}}
{"sample_id": 5663, "db_id": "dorm_1", "final": {"question": "Find the name of dorms that can accommodate more than 300 students.", "sql": "SELECT dorm_name FROM dorm WHERE student_capacity  >  300", "source_tables": ["dorm"]}}
{"sample_id": 5737, "db_id": "dorm_1", "final": {"question": "Find the average age of students who are living in the dorm with the largest capacity.", "sql": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)", "source_tables": ["student", "dorm", "lives_in"]}}
{"sample_id": 5779, "db_id": "customer_complaints", "final": {"question": "What is the description of the product named \"Chocolate\"?", "sql": "SELECT product_description FROM products WHERE product_name  =  \"Chocolate\"", "source_tables": ["products"]}}
{"sample_id": 5790, "db_id": "customer_complaints", "final": {"question": "Return complaint status codes have more than 3 corresponding complaints?", "sql": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3", "source_tables": ["complaints"]}}
{"sample_id": 5806, "db_id": "customer_complaints", "final": {"question": "Give the state that has the most customers.", "sql": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1", "source_tables": ["customers"]}}
{"sample_id": 5765, "db_id": "customer_complaints", "final": {"question": "Which city has the least number of customers whose type code is \"Good Credit Rating\"?", "sql": "SELECT town_city FROM customers WHERE customer_type_code  =  \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1", "source_tables": ["customers"]}}
{"sample_id": 5778, "db_id": "customer_complaints", "final": {"question": "What are the phone numbers of all customers and all staff members?", "sql": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff", "source_tables": ["customers", "staff"]}}
{"sample_id": 5776, "db_id": "customer_complaints", "final": {"question": "What are the emails and phone numbers of custoemrs who have never filed a complaint?", "sql": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)", "source_tables": ["customers", "complaints"]}}
{"sample_id": 5792, "db_id": "customer_complaints", "final": {"question": "What are the last names of staff with email addressed containing the substring \"wrau\"?", "sql": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\"", "source_tables": ["staff"]}}
{"sample_id": 5782, "db_id": "customer_complaints", "final": {"question": "What is the name and category code of the product with the highest price?", "sql": "SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1", "source_tables": ["products"]}}
{"sample_id": 5762, "db_id": "customer_complaints", "final": {"question": "Count the number of customers.", "sql": "SELECT count(*) FROM customers", "source_tables": ["customers"]}}
{"sample_id": 5796, "db_id": "customer_complaints", "final": {"question": "Return the last name of the staff member who handled the complaint with the earliest date raised.", "sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1", "source_tables": ["staff", "complaints"]}}
{"sample_id": 5825, "db_id": "workshop_paper", "final": {"question": "Show the authors of submissions and the acceptance results of their submissions.", "sql": "SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID", "source_tables": ["acceptance", "submission"]}}
{"sample_id": 5810, "db_id": "workshop_paper", "final": {"question": "Find the author for each submission and list them in ascending order of submission score.", "sql": "SELECT Author FROM submission ORDER BY Scores ASC", "source_tables": ["submission"]}}
{"sample_id": 5813, "db_id": "workshop_paper", "final": {"question": "Show the names of authors from college \"Florida\" or \"Temple\"", "sql": "SELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\"", "source_tables": ["submission"]}}
{"sample_id": 5836, "db_id": "workshop_paper", "final": {"question": "Which authors did not submit to any workshop?", "sql": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)", "source_tables": ["acceptance", "submission"]}}
{"sample_id": 5815, "db_id": "workshop_paper", "final": {"question": "What is the average score of submissions?", "sql": "SELECT avg(Scores) FROM submission", "source_tables": ["submission"]}}
{"sample_id": 5816, "db_id": "workshop_paper", "final": {"question": "Compute the average score of submissions.", "sql": "SELECT avg(Scores) FROM submission", "source_tables": ["submission"]}}
{"sample_id": 5872, "db_id": "tracking_share_transactions", "final": {"question": "Show the id and details for the investors who have the top 3 number of transactions.", "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3", "source_tables": ["transactions", "investors"]}}
{"sample_id": 5837, "db_id": "tracking_share_transactions", "final": {"question": "Find the number of investors in total.", "sql": "SELECT count(*) FROM INVESTORS", "source_tables": ["investors"]}}
{"sample_id": 5868, "db_id": "tracking_share_transactions", "final": {"question": "Show the transaction type code that occurs the fewest times.", "sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1", "source_tables": ["transactions"]}}
{"sample_id": 5864, "db_id": "tracking_share_transactions", "final": {"question": "Show the average amount of transactions for different lots.", "sql": "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id", "source_tables": ["transactions", "transactions_lots"]}}
{"sample_id": 5847, "db_id": "tracking_share_transactions", "final": {"question": "Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50.", "sql": "SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50", "source_tables": ["transactions"]}}
{"sample_id": 5869, "db_id": "tracking_share_transactions", "final": {"question": "Show the transaction type code that occurs the most frequently.", "sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["transactions"]}}
{"sample_id": 5853, "db_id": "tracking_share_transactions", "final": {"question": "Return the lot details and investor ids.", "sql": "SELECT lot_details ,  investor_id FROM LOTS", "source_tables": ["lots"]}}
{"sample_id": 5867, "db_id": "tracking_share_transactions", "final": {"question": "Show the number of transactions for different investors.", "sql": "SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS GROUP BY investor_id", "source_tables": ["transactions"]}}
{"sample_id": 5848, "db_id": "tracking_share_transactions", "final": {"question": "Show the maximum share count of transactions where the amount is smaller than 10000", "sql": "SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000", "source_tables": ["transactions"]}}
{"sample_id": 5961, "db_id": "cre_Theme_park", "final": {"question": "Count the number of tourists who did not visit any place.", "sql": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )", "source_tables": ["visits", "visitors"]}}
{"sample_id": 5958, "db_id": "cre_Theme_park", "final": {"question": "What are the names of tourist attraction that Alison visited but Rosalind did not visit?", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"", "source_tables": ["tourist_attractions", "visits", "visitors"]}}
{"sample_id": 5889, "db_id": "cre_Theme_park", "final": {"question": "What are the price ranges of five star hotels?", "sql": "SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\"", "source_tables": ["hotels"]}}
{"sample_id": 5943, "db_id": "cre_Theme_park", "final": {"question": "List all the possible ways to get to attractions, together with the number of attractions accessible by these methods.", "sql": "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There", "source_tables": ["tourist_attractions"]}}
{"sample_id": 5909, "db_id": "cre_Theme_park", "final": {"question": "Give me the detail and opening hour for each museum.", "sql": "SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID", "source_tables": ["museums", "tourist_attractions"]}}
{"sample_id": 5911, "db_id": "cre_Theme_park", "final": {"question": "Which tourist attraction is associated with the photo \"game1\"? Return its name.", "sql": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"", "source_tables": ["photos", "tourist_attractions"]}}
{"sample_id": 5918, "db_id": "cre_Theme_park", "final": {"question": "What is the name of the staff that is in charge of the attraction named \"US museum\"?", "sql": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"US museum\"", "source_tables": ["staff", "tourist_attractions"]}}
{"sample_id": 5904, "db_id": "cre_Theme_park", "final": {"question": "What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?", "sql": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\"", "source_tables": ["tourist_attractions"]}}
{"sample_id": 5934, "db_id": "cre_Theme_park", "final": {"question": "Show the details of the top 3 most expensive hotels.", "sql": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3", "source_tables": ["hotels"]}}
{"sample_id": 5899, "db_id": "cre_Theme_park", "final": {"question": "Count the number of distinct names associated with the photos.", "sql": "SELECT count(DISTINCT Name) FROM PHOTOS", "source_tables": ["photos"]}}
{"sample_id": 5914, "db_id": "cre_Theme_park", "final": {"question": "What are the details and ways to get to tourist attractions related to royal family?", "sql": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID", "source_tables": ["royal_family", "tourist_attractions"]}}
{"sample_id": 5924, "db_id": "cre_Theme_park", "final": {"question": "Which tourist attractions does the visitor with detail 'Vincent' visit?", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  \"Vincent\"", "source_tables": ["visitors", "tourist_attractions", "visits"]}}
{"sample_id": 5959, "db_id": "cre_Theme_park", "final": {"question": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"", "source_tables": ["tourist_attractions", "visits", "visitors"]}}
{"sample_id": 5954, "db_id": "cre_Theme_park", "final": {"question": "What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?", "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"", "source_tables": ["locations", "tourist_attractions"]}}
{"sample_id": 5917, "db_id": "cre_Theme_park", "final": {"question": "Find the details of the shops that can be reached by walk.", "sql": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\"", "source_tables": ["shops", "tourist_attractions"]}}
{"sample_id": 5919, "db_id": "cre_Theme_park", "final": {"question": "Tell me the name of the staff in charge of the attraction called \"US museum\".", "sql": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"US museum\"", "source_tables": ["staff", "tourist_attractions"]}}
{"sample_id": 5937, "db_id": "cre_Theme_park", "final": {"question": "What are the details and star ratings of the three hotels with the lowest price ranges?", "sql": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3", "source_tables": ["hotels"]}}
{"sample_id": 5887, "db_id": "cre_Theme_park", "final": {"question": "What is the detail of each visitor?", "sql": "SELECT Tourist_Details FROM VISITORS", "source_tables": ["visitors"]}}
{"sample_id": 6023, "db_id": "game_1", "final": {"question": "What is the total number of hours per work and number of games played by David Shieber?", "sql": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  \"David\" AND T2.Lname  =  \"Shieber\"", "source_tables": ["sportsinfo", "student"]}}
{"sample_id": 6038, "db_id": "game_1", "final": {"question": "Show all game names played by at least 1000 hours.", "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000", "source_tables": ["video_games", "plays_games"]}}
{"sample_id": 6040, "db_id": "game_1", "final": {"question": "Show all game names played by Linda Smith", "sql": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"Smith\" AND T3.Fname  =  \"Linda\"", "source_tables": ["student", "video_games", "plays_games"]}}
{"sample_id": 5992, "db_id": "game_1", "final": {"question": "How many sports do we have?", "sql": "SELECT count(DISTINCT sportname) FROM Sportsinfo", "source_tables": ["sportsinfo"]}}
{"sample_id": 6004, "db_id": "game_1", "final": {"question": "Show all sport name and the number of students.", "sql": "SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname", "source_tables": ["sportsinfo"]}}
{"sample_id": 5988, "db_id": "game_1", "final": {"question": "Show the average, minimum, and maximum age for different majors.", "sql": "SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major", "source_tables": ["student"]}}
{"sample_id": 5966, "db_id": "game_1", "final": {"question": "Show all video game types.", "sql": "SELECT DISTINCT gtype FROM Video_games", "source_tables": ["video_games"]}}
{"sample_id": 6041, "db_id": "game_1", "final": {"question": "What are the names of all games played by Linda Smith?", "sql": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"Smith\" AND T3.Fname  =  \"Linda\"", "source_tables": ["student", "video_games", "plays_games"]}}
{"sample_id": 6015, "db_id": "game_1", "final": {"question": "What are the ids of all students who don't play sports?", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo", "source_tables": ["student", "sportsinfo"]}}
{"sample_id": 6002, "db_id": "game_1", "final": {"question": "How many games are played for all football games by students on scholarship?", "sql": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'", "source_tables": ["sportsinfo"]}}
{"sample_id": 5978, "db_id": "game_1", "final": {"question": "Which game type has most number of games?", "sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1", "source_tables": ["video_games"]}}
{"sample_id": 6005, "db_id": "game_1", "final": {"question": "How many students play each sport?", "sql": "SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname", "source_tables": ["sportsinfo"]}}
{"sample_id": 5976, "db_id": "game_1", "final": {"question": "Show all video game types and the number of video games in each type.", "sql": "SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype", "source_tables": ["video_games"]}}
{"sample_id": 5993, "db_id": "game_1", "final": {"question": "How many different types of sports do we offer?", "sql": "SELECT count(DISTINCT sportname) FROM Sportsinfo", "source_tables": ["sportsinfo"]}}
{"sample_id": 6007, "db_id": "game_1", "final": {"question": "What are the ids of all students along with how many sports and games did they play?", "sql": "SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID", "source_tables": ["sportsinfo"]}}
{"sample_id": 6032, "db_id": "game_1", "final": {"question": "Show all game ids and the number of hours played.", "sql": "SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid", "source_tables": ["plays_games"]}}
{"sample_id": 6022, "db_id": "game_1", "final": {"question": "Show total hours per week and number of games played for student David Shieber.", "sql": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  \"David\" AND T2.Lname  =  \"Shieber\"", "source_tables": ["sportsinfo", "student"]}}
{"sample_id": 5975, "db_id": "game_1", "final": {"question": "Count the number of video games with Massively multiplayer online game type .", "sql": "SELECT count(*) FROM Video_games WHERE gtype  =  \"Massively multiplayer online game\"", "source_tables": ["video_games"]}}
{"sample_id": 6074, "db_id": "customers_and_addresses", "final": {"question": "Find the name of customers who are living in Colorado?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\"", "source_tables": ["customers", "addresses", "customer_addresses"]}}
{"sample_id": 6133, "db_id": "customers_and_addresses", "final": {"question": "What are the names of customers who never made an order.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id", "source_tables": ["customers", "customer_orders"]}}
{"sample_id": 6132, "db_id": "customers_and_addresses", "final": {"question": "Find the names of customers who never placed an order.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id", "source_tables": ["customers", "customer_orders"]}}
{"sample_id": 6058, "db_id": "customers_and_addresses", "final": {"question": "Which payment method is used by most customers?", "sql": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers"]}}
{"sample_id": 6102, "db_id": "customers_and_addresses", "final": {"question": "What is the name of the customer that has purchased the most items?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1", "source_tables": ["customers", "customer_orders", "order_items"]}}
{"sample_id": 6059, "db_id": "customers_and_addresses", "final": {"question": "Find the payment method that is used most frequently.", "sql": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers"]}}
{"sample_id": 6098, "db_id": "customers_and_addresses", "final": {"question": "Find the name and active date of the customer that use email as the contact channel.", "sql": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'", "source_tables": ["customers", "customer_contact_channels"]}}
{"sample_id": 6086, "db_id": "customers_and_addresses", "final": {"question": "List the countries having more than 4 addresses listed.", "sql": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4", "source_tables": ["addresses"]}}
{"sample_id": 6103, "db_id": "customers_and_addresses", "final": {"question": "Give me the name of the customer who ordered the most items in total.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1", "source_tables": ["customers", "customer_orders", "order_items"]}}
{"sample_id": 6067, "db_id": "customers_and_addresses", "final": {"question": "Which customer's name contains \"Alex\"? Find the full name.", "sql": "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\"", "source_tables": ["customers"]}}
{"sample_id": 6056, "db_id": "customers_and_addresses", "final": {"question": "Find the \"date became customers\" of the customers whose ID is between 10 and 20.", "sql": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20", "source_tables": ["customers"]}}
{"sample_id": 6075, "db_id": "customers_and_addresses", "final": {"question": "What are the names of customers who live in Colorado state?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\"", "source_tables": ["customers", "addresses", "customer_addresses"]}}
{"sample_id": 6124, "db_id": "customers_and_addresses", "final": {"question": "Find the name and ID of the product whose total order quantity is the largest.", "sql": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1", "source_tables": ["order_items", "products"]}}
{"sample_id": 6090, "db_id": "customers_and_addresses", "final": {"question": "Which contact channel has been used by the customer with name \"Tillman Ernser\"?", "sql": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"", "source_tables": ["customers", "customer_contact_channels"]}}
{"sample_id": 6070, "db_id": "customers_and_addresses", "final": {"question": "What is the address content of the customer named \"Maudie Kertzmann\"?", "sql": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"", "source_tables": ["customers", "addresses", "customer_addresses"]}}
{"sample_id": 6073, "db_id": "customers_and_addresses", "final": {"question": "Find the number of customers who live in the city called Lake Geovannyton.", "sql": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"", "source_tables": ["customers", "addresses", "customer_addresses"]}}
{"sample_id": 6089, "db_id": "customers_and_addresses", "final": {"question": "Which contact channel codes were used less than 5 times?", "sql": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5", "source_tables": ["customer_contact_channels"]}}
{"sample_id": 6135, "db_id": "customers_and_addresses", "final": {"question": "What are the names of customers who have purchased both products Latte and Americano?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'", "source_tables": ["customers", "customer_orders", "order_items", "products"]}}
{"sample_id": 6119, "db_id": "customers_and_addresses", "final": {"question": "What is the total amount of products purchased before 2018-03-17 07:13:53?", "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\"", "source_tables": ["customer_orders", "order_items"]}}
{"sample_id": 6145, "db_id": "music_4", "final": {"question": "Give the distinct famous release dates for all artists.", "sql": "SELECT distinct(Famous_Release_date) FROM artist", "source_tables": ["artist"]}}
{"sample_id": 6176, "db_id": "music_4", "final": {"question": "What is the most common result of the music festival?", "sql": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["music_festival"]}}
{"sample_id": 6184, "db_id": "music_4", "final": {"question": "Show the famous titles of the artists with both volumes that lasted more than 2 weeks on top and volumes that lasted less than 2 weeks on top.", "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2", "source_tables": ["volume", "artist"]}}
{"sample_id": 6153, "db_id": "music_4", "final": {"question": "Give the songs included in volumes that have more than 1 week on top.", "sql": "SELECT Song FROM volume WHERE Weeks_on_Top  >  1", "source_tables": ["volume"]}}
{"sample_id": 6152, "db_id": "music_4", "final": {"question": "What are the songs in volumes with more than 1 week on top?", "sql": "SELECT Song FROM volume WHERE Weeks_on_Top  >  1", "source_tables": ["volume"]}}
{"sample_id": 6157, "db_id": "music_4", "final": {"question": "Count the number of distinct artists who have volumes.", "sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume", "source_tables": ["volume"]}}
{"sample_id": 6142, "db_id": "music_4", "final": {"question": "What are the famous titles of the artist \"Triumfall\"?", "sql": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"", "source_tables": ["artist"]}}
{"sample_id": 6177, "db_id": "music_4", "final": {"question": "Return the result that is most frequent at music festivals.", "sql": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["music_festival"]}}
{"sample_id": 6160, "db_id": "music_4", "final": {"question": "Please show the songs that have result \"nominated\" at music festivals.", "sql": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  \"Nominated\"", "source_tables": ["volume", "music_festival"]}}
{"sample_id": 6158, "db_id": "music_4", "final": {"question": "Please show the date of ceremony of the volumes that last more than 2 weeks on top.", "sql": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2", "source_tables": ["volume", "music_festival"]}}
{"sample_id": 6173, "db_id": "music_4", "final": {"question": "Return the famous release date for the oldest artist.", "sql": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1", "source_tables": ["artist"]}}
{"sample_id": 6193, "db_id": "music_4", "final": {"question": "How many music festivals have had each kind of result, ordered descending by count?", "sql": "SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC", "source_tables": ["music_festival"]}}
{"sample_id": 6205, "db_id": "roller_coaster", "final": {"question": "List the status shared by more than two roller coaster.", "sql": "SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*)  >  2", "source_tables": ["roller_coaster"]}}
{"sample_id": 6196, "db_id": "roller_coaster", "final": {"question": "How many roller coasters are there?", "sql": "SELECT count(*) FROM roller_coaster", "source_tables": ["roller_coaster"]}}
{"sample_id": 6208, "db_id": "roller_coaster", "final": {"question": "Show the names of countries that have more than one roller coaster.", "sql": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "source_tables": ["roller_coaster", "country"]}}
{"sample_id": 6202, "db_id": "roller_coaster", "final": {"question": "What is the average speed of roller coasters?", "sql": "SELECT avg(Speed) FROM roller_coaster", "source_tables": ["roller_coaster"]}}
{"sample_id": 6221, "db_id": "ship_1", "final": {"question": "Find the name, class and rank of all captains.", "sql": "SELECT name ,  CLASS ,  rank FROM captain", "source_tables": ["captain"]}}
{"sample_id": 6251, "db_id": "ship_1", "final": {"question": "Find the name of the ships that have more than one captain.", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1", "source_tables": ["ship", "captain"]}}
{"sample_id": 6239, "db_id": "ship_1", "final": {"question": "Find the name, type, and flag of the ship that is built in the most recent year.", "sql": "SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1", "source_tables": ["ship"]}}
{"sample_id": 6259, "db_id": "ship_1", "final": {"question": "Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank.", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'", "source_tables": ["ship", "captain"]}}
{"sample_id": 6224, "db_id": "ship_1", "final": {"question": "Return the rank for which there are the fewest captains.", "sql": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1", "source_tables": ["captain"]}}
{"sample_id": 6260, "db_id": "ship_1", "final": {"question": "What are the names of ships that are commanded by both captains with the rank of Midshipman and captains with the rank of Lieutenant?", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'", "source_tables": ["ship", "captain"]}}
{"sample_id": 6222, "db_id": "ship_1", "final": {"question": "What are the names, classes, and ranks of all captains?", "sql": "SELECT name ,  CLASS ,  rank FROM captain", "source_tables": ["captain"]}}
{"sample_id": 6245, "db_id": "ship_1", "final": {"question": "List all ship names in the order of built year and class.", "sql": "SELECT name FROM ship ORDER BY built_year ,  CLASS", "source_tables": ["ship"]}}
{"sample_id": 6254, "db_id": "ship_1", "final": {"question": "Return the names and classes of ships that do not have a captain?", "sql": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)", "source_tables": ["ship", "captain"]}}
{"sample_id": 6242, "db_id": "ship_1", "final": {"question": "What are the different ship flags, and how many ships have each?", "sql": "SELECT count(*) ,  flag FROM ship GROUP BY flag", "source_tables": ["ship"]}}
{"sample_id": 6249, "db_id": "ship_1", "final": {"question": "In which year were most of ships built?", "sql": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1", "source_tables": ["ship"]}}
{"sample_id": 6295, "db_id": "city_record", "final": {"question": "List venues of all matches in the order of their dates starting from the most recent one.", "sql": "SELECT venue FROM MATCH ORDER BY date DESC", "source_tables": ["match"]}}
{"sample_id": 6292, "db_id": "city_record", "final": {"question": "Which cities have regional population above 8000000 or below 5000000?", "sql": "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000", "source_tables": ["city"]}}
{"sample_id": 6288, "db_id": "city_record", "final": {"question": "Which cities have higher temperature in Feb than in Jun or have once served as host cities?", "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city", "source_tables": ["city", "hosting_city", "temperature"]}}
{"sample_id": 6274, "db_id": "city_record", "final": {"question": "IN which year did city \"Taizhou ( Zhejiang )\" serve as a host city?", "sql": "SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city WHERE T1.city  =  \"Taizhou ( Zhejiang )\"", "source_tables": ["city", "hosting_city"]}}
{"sample_id": 6291, "db_id": "city_record", "final": {"question": "Please give me a list of cities whose regional population is over 8000000 or under 5000000.", "sql": "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000", "source_tables": ["city"]}}
{"sample_id": 6276, "db_id": "city_record", "final": {"question": "What are the three largest cities in terms of regional population?", "sql": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3", "source_tables": ["city"]}}
{"sample_id": 6281, "db_id": "city_record", "final": {"question": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?", "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct", "source_tables": ["city", "temperature"]}}
{"sample_id": 6285, "db_id": "city_record", "final": {"question": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.", "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city", "source_tables": ["city", "hosting_city", "temperature"]}}
{"sample_id": 6313, "db_id": "e_government", "final": {"question": "Find the name of the youngest organization.", "sql": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1", "source_tables": ["organizations"]}}
{"sample_id": 6316, "db_id": "e_government", "final": {"question": "What is the last name of the contact individual from the Labour party organization who was contacted most recently?", "sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1", "source_tables": ["individuals", "organizations", "organization_contact_individuals"]}}
{"sample_id": 6323, "db_id": "e_government", "final": {"question": "Find the name of all the cities and states.", "sql": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses", "source_tables": ["addresses"]}}
{"sample_id": 6308, "db_id": "e_government", "final": {"question": "What is the payment method code and party phone of the party with the email 'enrico09@example.com'?", "sql": "SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  \"enrico09@example.com\"", "source_tables": ["parties"]}}
{"sample_id": 6303, "db_id": "e_government", "final": {"question": "List all the types of forms.", "sql": "SELECT DISTINCT form_type_code FROM forms", "source_tables": ["forms"]}}
{"sample_id": 6321, "db_id": "e_government", "final": {"question": "Find name of the services that has never been used.", "sql": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id", "source_tables": ["services", "party_services"]}}
{"sample_id": 6304, "db_id": "e_government", "final": {"question": "What are the different types of forms?", "sql": "SELECT DISTINCT form_type_code FROM forms", "source_tables": ["forms"]}}
{"sample_id": 6320, "db_id": "e_government", "final": {"question": "Count the number of services.", "sql": "SELECT count(*) FROM services", "source_tables": ["services"]}}
{"sample_id": 6358, "db_id": "school_bus", "final": {"question": "find the name of driver who is driving the school bus with the longest working history.", "sql": "SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id  =  t2.driver_id ORDER BY years_working DESC LIMIT 1", "source_tables": ["driver", "school_bus"]}}
{"sample_id": 6344, "db_id": "school_bus", "final": {"question": "Show the name of drivers in descending order of age.", "sql": "SELECT name FROM driver ORDER BY age DESC", "source_tables": ["driver"]}}
{"sample_id": 6349, "db_id": "school_bus", "final": {"question": "Show all home cities except for those having a driver older than 40.", "sql": "SELECT home_city FROM driver EXCEPT SELECT home_city FROM driver WHERE age  >  40", "source_tables": ["driver"]}}
{"sample_id": 6354, "db_id": "school_bus", "final": {"question": "Show the school name and type for schools without a school bus.", "sql": "SELECT school ,  TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)", "source_tables": ["school_bus", "school"]}}
{"sample_id": 6356, "db_id": "school_bus", "final": {"question": "How many drivers are from Hartford city or younger than 40?", "sql": "SELECT count(*) FROM driver WHERE home_city  =  'Hartford' OR age  <  40", "source_tables": ["driver"]}}
{"sample_id": 6362, "db_id": "flight_company", "final": {"question": "What is maximum group equity shareholding of the companies?", "sql": "SELECT max(group_equity_shareholding) FROM operate_company", "source_tables": ["operate_company"]}}
{"sample_id": 6366, "db_id": "flight_company", "final": {"question": "What are the distinct types of the companies that have operated any flights with velocity less than 200?", "sql": "SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200", "source_tables": ["operate_company", "flight"]}}
{"sample_id": 6367, "db_id": "flight_company", "final": {"question": "What are the ids and names of the companies that operated more than one flight?", "sql": "SELECT T1.id ,  T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id GROUP BY T1.id HAVING count(*)  >  1", "source_tables": ["operate_company", "flight"]}}
{"sample_id": 6373, "db_id": "flight_company", "final": {"question": "Which of the airport names contains the word 'international'?", "sql": "SELECT name FROM airport WHERE name LIKE '%international%'", "source_tables": ["airport"]}}
{"sample_id": 6377, "db_id": "flight_company", "final": {"question": "which pilot is in charge of the most number of flights?", "sql": "SELECT pilot FROM flight GROUP BY pilot ORDER BY count(*) DESC LIMIT 1", "source_tables": ["flight"]}}
{"sample_id": 6442, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Show the budget type code and description and the corresponding document id.", "sql": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code", "source_tables": ["documents_with_expenses", "ref_budget_codes"]}}
{"sample_id": 6421, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Return the description of the document type name 'Film'.", "sql": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  \"Film\"", "source_tables": ["ref_document_types"]}}
{"sample_id": 6456, "db_id": "cre_Docs_and_Epenses", "final": {"question": "How many documents do not have any expense?", "sql": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )", "source_tables": ["documents_with_expenses", "documents"]}}
{"sample_id": 6391, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the statement id and statement detail for the statement that has the most corresponding accounts?", "sql": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["accounts", "statements"]}}
{"sample_id": 6403, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the names and dates for documents corresponding to project that has the details 'Graph Database project'?", "sql": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'", "source_tables": ["projects", "documents"]}}
{"sample_id": 6430, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What is the project detail for the project with document \"King Book\"?", "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\"", "source_tables": ["projects", "documents"]}}
{"sample_id": 6412, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What is the document type code with most number of documents?", "sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["documents"]}}
{"sample_id": 6396, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Show the ids and names of all documents.", "sql": "SELECT document_id ,  document_name FROM Documents", "source_tables": ["documents"]}}
{"sample_id": 6432, "db_id": "cre_Docs_and_Epenses", "final": {"question": "How many budget types do we have?", "sql": "SELECT count(*) FROM Ref_budget_codes", "source_tables": ["ref_budget_codes"]}}
{"sample_id": 6453, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the ids of documents with the type code CV that do not have expenses.", "sql": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses", "source_tables": ["documents_with_expenses", "documents"]}}
{"sample_id": 6440, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the document ids for the budget type code 'SF'?", "sql": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'", "source_tables": ["documents_with_expenses"]}}
{"sample_id": 6424, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Show the number of projects.", "sql": "SELECT count(*) FROM Projects", "source_tables": ["projects"]}}
{"sample_id": 6422, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What is the document type name and the document type description and creation date for all the documents?", "sql": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code", "source_tables": ["ref_document_types", "documents"]}}
{"sample_id": 6451, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Return the ids of documents that do not have expenses.", "sql": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses", "source_tables": ["documents_with_expenses", "documents"]}}
{"sample_id": 6443, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Return the budget type codes, budget type descriptions and document ids for documents with expenses.", "sql": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code", "source_tables": ["documents_with_expenses", "ref_budget_codes"]}}
{"sample_id": 6460, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the account details with the largest value or with value having char '5' in it?", "sql": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"", "source_tables": ["accounts"]}}
{"sample_id": 6459, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'.", "sql": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'", "source_tables": ["documents_with_expenses", "documents"]}}
{"sample_id": 6397, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the ids and names for each of the documents?", "sql": "SELECT document_id ,  document_name FROM Documents", "source_tables": ["documents"]}}
{"sample_id": 6484, "db_id": "scientist_1", "final": {"question": "Find the name of the scientist who worked on both a project named 'Matter of Time' and a project named 'A Puzzling Parallax'.", "sql": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'", "source_tables": ["projects", "assignedto", "scientists"]}}
{"sample_id": 6474, "db_id": "scientist_1", "final": {"question": "List the name of all projects that are operated longer than the average working hours of all projects.", "sql": "SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)", "source_tables": ["projects"]}}
{"sample_id": 6501, "db_id": "scientist_1", "final": {"question": "What are the names of scientists who have not been assigned a project?", "sql": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "source_tables": ["assignedto", "scientists"]}}
{"sample_id": 6487, "db_id": "scientist_1", "final": {"question": "What are the names of all the scientists in alphabetical order?", "sql": "SELECT name FROM scientists ORDER BY name", "source_tables": ["scientists"]}}
{"sample_id": 6482, "db_id": "scientist_1", "final": {"question": "Find the name of projects that require between 100 and 300 hours of work.", "sql": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300", "source_tables": ["projects"]}}
{"sample_id": 6492, "db_id": "scientist_1", "final": {"question": "Find the number of projects which each scientist is working on and scientist's name.", "sql": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name", "source_tables": ["assignedto", "scientists"]}}
{"sample_id": 6470, "db_id": "scientist_1", "final": {"question": "Find the average hours of all projects.", "sql": "SELECT avg(hours) FROM projects", "source_tables": ["projects"]}}
{"sample_id": 6508, "db_id": "scientist_1", "final": {"question": "Find name of the project that needs the least amount of time to finish and the name of scientists who worked on it.", "sql": "SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)", "source_tables": ["projects", "assignedto", "scientists"]}}
{"sample_id": 6467, "db_id": "scientist_1", "final": {"question": "Count the number of different scientists assigned to any project.", "sql": "SELECT count(DISTINCT scientist) FROM assignedto", "source_tables": ["assignedto"]}}
{"sample_id": 6488, "db_id": "scientist_1", "final": {"question": "Find the number of scientists involved for each project name.", "sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name", "source_tables": ["projects", "assignedto"]}}
{"sample_id": 6481, "db_id": "scientist_1", "final": {"question": "What is the sum of hours for projects that scientists with the name Michael Rogers or Carol Smith are assigned to?", "sql": "SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith'", "source_tables": ["projects", "assignedto", "scientists"]}}
{"sample_id": 6530, "db_id": "wine_1", "final": {"question": "How many wines are produced at Robert Biale winery?", "sql": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"", "source_tables": ["wine"]}}
{"sample_id": 6515, "db_id": "wine_1", "final": {"question": "What are the names of all wines produced in 2008?", "sql": "SELECT Name FROM WINE WHERE YEAR  =  \"2008\"", "source_tables": ["wine"]}}
{"sample_id": 6554, "db_id": "wine_1", "final": {"question": "List the names of all distinct wines ordered by price.", "sql": "SELECT DISTINCT Name FROM WINE ORDER BY price", "source_tables": ["wine"]}}
{"sample_id": 6581, "db_id": "wine_1", "final": {"question": "Which 3 wineries produce the most wines made from white grapes?", "sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3", "source_tables": ["grapes", "wine"]}}
{"sample_id": 6527, "db_id": "wine_1", "final": {"question": "What are the names of wines made from red grapes?", "sql": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"", "source_tables": ["grapes", "wine"]}}
{"sample_id": 6564, "db_id": "wine_1", "final": {"question": "What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?", "sql": "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"", "source_tables": ["wine"]}}
{"sample_id": 6543, "db_id": "wine_1", "final": {"question": "What are the names of wines made from red grapes and with prices above 50?", "sql": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50", "source_tables": ["grapes", "wine"]}}
{"sample_id": 6590, "db_id": "wine_1", "final": {"question": "Find the county where produces the most number of wines with score higher than 90.", "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6551, "db_id": "wine_1", "final": {"question": "What are the distinct names of wines with prices higher than any wine from John Anthony winery.", "sql": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")", "source_tables": ["wine"]}}
{"sample_id": 6510, "db_id": "wine_1", "final": {"question": "What is the name of the highest rated wine?", "sql": "SELECT Name FROM WINE ORDER BY Score LIMIT 1", "source_tables": ["wine"]}}
{"sample_id": 6582, "db_id": "wine_1", "final": {"question": "List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.", "sql": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR", "source_tables": ["wine"]}}
{"sample_id": 6563, "db_id": "wine_1", "final": {"question": "What are the distinct wineries which produce wines costing between 50 and 100?", "sql": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100", "source_tables": ["wine"]}}
{"sample_id": 6591, "db_id": "wine_1", "final": {"question": "What is the county that produces the most wines scoring higher than 90?", "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6534, "db_id": "wine_1", "final": {"question": "Give me the average prices of wines that are produced by appelations in Sonoma County.", "sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\"", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6532, "db_id": "wine_1", "final": {"question": "How many appelations are in Napa Country?", "sql": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"", "source_tables": ["appellations"]}}
{"sample_id": 6528, "db_id": "wine_1", "final": {"question": "Find the names of all distinct wines that have appellations in North Coast area.", "sql": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"North Coast\"", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6525, "db_id": "wine_1", "final": {"question": "What are the names of wines with scores higher than 90?", "sql": "SELECT Name FROM WINE WHERE score  >  90", "source_tables": ["wine"]}}
{"sample_id": 6609, "db_id": "train_station", "final": {"question": "Show the station name with at least two trains.", "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2", "source_tables": ["train_station", "station"]}}
{"sample_id": 6596, "db_id": "train_station", "final": {"question": "Show the names and main services for train stations that have the top three total number of passengers.", "sql": "SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT 3", "source_tables": ["station"]}}
{"sample_id": 6610, "db_id": "train_station", "final": {"question": "Show all locations with only 1 station.", "sql": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1", "source_tables": ["station"]}}
{"sample_id": 6605, "db_id": "train_station", "final": {"question": "Show the station name and number of trains in each station.", "sql": "SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id", "source_tables": ["train_station", "station"]}}
{"sample_id": 6612, "db_id": "train_station", "final": {"question": "What are the names of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" trains?", "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Ananthapuri Express\" INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Guruvayur Express\"", "source_tables": ["train", "train_station", "station"]}}
{"sample_id": 6598, "db_id": "train_station", "final": {"question": "Show all locations and the total number of platforms and passengers for all train stations in each location.", "sql": "SELECT LOCATION ,  sum(number_of_platforms) ,  sum(total_passengers) FROM station GROUP BY LOCATION", "source_tables": ["station"]}}
{"sample_id": 6691, "db_id": "driving_school", "final": {"question": "How many lessons were in cancelled state?", "sql": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";", "source_tables": ["lessons"]}}
{"sample_id": 6644, "db_id": "driving_school", "final": {"question": "How many employees live in Georgia?", "sql": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";", "source_tables": ["addresses"]}}
{"sample_id": 6621, "db_id": "driving_school", "final": {"question": "List the first name middle name and last name of all staff.", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Staff;", "source_tables": ["staff"]}}
{"sample_id": 6663, "db_id": "driving_school", "final": {"question": "How many customers in total?", "sql": "SELECT count(*) FROM Customers;", "source_tables": ["customers"]}}
{"sample_id": 6628, "db_id": "driving_school", "final": {"question": "When did the staff member Janessa Sawayn leave the company?", "sql": "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "source_tables": ["staff"]}}
{"sample_id": 6695, "db_id": "driving_school", "final": {"question": "How many lessons taught by staff whose first name has letter 'a' in it?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\"", "source_tables": ["staff", "lessons"]}}
{"sample_id": 6649, "db_id": "driving_school", "final": {"question": "List the states which have between 2 to 4 staffs living there.", "sql": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;", "source_tables": ["staff", "addresses"]}}
{"sample_id": 6669, "db_id": "driving_school", "final": {"question": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";", "source_tables": ["customers", "lessons"]}}
{"sample_id": 6629, "db_id": "driving_school", "final": {"question": "How many staff have the first name Ludie?", "sql": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";", "source_tables": ["staff"]}}
{"sample_id": 6682, "db_id": "driving_school", "final": {"question": "What is the city with the most customers?", "sql": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["customers", "addresses"]}}
{"sample_id": 6630, "db_id": "driving_school", "final": {"question": "How many employees have a first name of Ludie?", "sql": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";", "source_tables": ["staff"]}}
{"sample_id": 6676, "db_id": "driving_school", "final": {"question": "What are the first and last names of all customers who lived in Lockmanfurt?", "sql": "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";", "source_tables": ["customers", "addresses"]}}
{"sample_id": 6704, "db_id": "driving_school", "final": {"question": "What are the last names that are used by customers and staff?", "sql": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff", "source_tables": ["customers", "staff"]}}
{"sample_id": 6674, "db_id": "driving_school", "final": {"question": "What are the first and last names of all customers with between 1000 and 3000 dollars outstanding?", "sql": "SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;", "source_tables": ["customers"]}}
{"sample_id": 6673, "db_id": "driving_school", "final": {"question": "List the first name and last name of customers have the amount of outstanding between 1000 and 3000.", "sql": "SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;", "source_tables": ["customers"]}}
{"sample_id": 6700, "db_id": "driving_school", "final": {"question": "What is the average price for a lesson taught by Janessa Sawayn?", "sql": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "source_tables": ["staff", "lessons"]}}
{"sample_id": 6697, "db_id": "driving_school", "final": {"question": "How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn?", "sql": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "source_tables": ["staff", "lessons"]}}
{"sample_id": 6683, "db_id": "driving_school", "final": {"question": "How much in total does customer with first name as Carole and last name as Bernhard paid?", "sql": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"", "source_tables": ["customers", "customer_payments"]}}
{"sample_id": 6678, "db_id": "driving_school", "final": {"question": "What is the country in which the customer Carole Bernhard lived?", "sql": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"", "source_tables": ["customers", "addresses"]}}
{"sample_id": 6698, "db_id": "driving_school", "final": {"question": "What is the total time for all lessons taught by Janessa Sawayn?", "sql": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "source_tables": ["staff", "lessons"]}}
{"sample_id": 6781, "db_id": "activity_1", "final": {"question": "What are the ids of the students who are not involved in any activity", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in", "source_tables": ["student", "participates_in"]}}
{"sample_id": 6722, "db_id": "activity_1", "final": {"question": "Show the phone, room, and building for the faculty named Jerry Prince.", "sql": "SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  \"Jerry\" AND Lname  =  \"Prince\"", "source_tables": ["faculty"]}}
{"sample_id": 6734, "db_id": "activity_1", "final": {"question": "For each faculty rank, show the number of faculty members who have it.", "sql": "SELECT rank ,  count(*) FROM Faculty GROUP BY rank", "source_tables": ["faculty"]}}
{"sample_id": 6777, "db_id": "activity_1", "final": {"question": "Find the first and last name of the faculty who is involved in the largest number of activities.", "sql": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["faculty_participates_in", "faculty"]}}
{"sample_id": 6757, "db_id": "activity_1", "final": {"question": "What are the ids of the faculty members who do not advise any student.", "sql": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student", "source_tables": ["student", "faculty"]}}
{"sample_id": 6730, "db_id": "activity_1", "final": {"question": "Which building has most faculty members?", "sql": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1", "source_tables": ["faculty"]}}
{"sample_id": 6731, "db_id": "activity_1", "final": {"question": "Find the building that has the largest number of faculty members.", "sql": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1", "source_tables": ["faculty"]}}
{"sample_id": 6724, "db_id": "activity_1", "final": {"question": "How many Professors are in building NEB?", "sql": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"", "source_tables": ["faculty"]}}
{"sample_id": 6738, "db_id": "activity_1", "final": {"question": "Which rank has the smallest number of faculty members?", "sql": "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1", "source_tables": ["faculty"]}}
{"sample_id": 6768, "db_id": "activity_1", "final": {"question": "How many activities does Mark Giuliano participate in?", "sql": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"", "source_tables": ["faculty_participates_in", "faculty"]}}
{"sample_id": 6770, "db_id": "activity_1", "final": {"question": "Show the names of all the activities Mark Giuliano participates in.", "sql": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"", "source_tables": ["activity", "faculty_participates_in", "faculty"]}}
{"sample_id": 6721, "db_id": "activity_1", "final": {"question": "Count the number of female Professors we have.", "sql": "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\"", "source_tables": ["faculty"]}}
{"sample_id": 6769, "db_id": "activity_1", "final": {"question": "Find the number of activities Mark Giuliano is involved in.", "sql": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"", "source_tables": ["faculty_participates_in", "faculty"]}}
{"sample_id": 6754, "db_id": "activity_1", "final": {"question": "Show the ids for all the faculty members who have at least 2 students.", "sql": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2", "source_tables": ["student", "faculty"]}}
{"sample_id": 6710, "db_id": "activity_1", "final": {"question": "What ranks do we have for faculty?", "sql": "SELECT DISTINCT rank FROM Faculty", "source_tables": ["faculty"]}}
{"sample_id": 6794, "db_id": "activity_1", "final": {"question": "Find the ids of the students who participate in Canoeing and Kayaking.", "sql": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'", "source_tables": ["activity", "participates_in"]}}
{"sample_id": 6712, "db_id": "activity_1", "final": {"question": "Show all the distinct buildings that have faculty rooms.", "sql": "SELECT DISTINCT building FROM Faculty", "source_tables": ["faculty"]}}
{"sample_id": 6755, "db_id": "activity_1", "final": {"question": "Which faculty members advise two ore more students? Give me their faculty ids.", "sql": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2", "source_tables": ["student", "faculty"]}}
{"sample_id": 6788, "db_id": "activity_1", "final": {"question": "Find the first names of the faculty members who are playing Canoeing or Kayaking.", "sql": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", "source_tables": ["activity", "faculty_participates_in", "faculty"]}}
{"sample_id": 6822, "db_id": "flight_4", "final": {"question": "Find the name, city, and country of the airport that has the lowest altitude.", "sql": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1", "source_tables": ["airports"]}}
{"sample_id": 6863, "db_id": "flight_4", "final": {"question": "What is the number of routes whose destinations are Italian airports?", "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'", "source_tables": ["routes", "airports"]}}
{"sample_id": 6799, "db_id": "flight_4", "final": {"question": "What is the name, city, country, and elevation for every airport in the city of New York?", "sql": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'", "source_tables": ["airports"]}}
{"sample_id": 6796, "db_id": "flight_4", "final": {"question": "Find the name of the airport in the city of Goroka.", "sql": "SELECT name FROM airports WHERE city  =  'Goroka'", "source_tables": ["airports"]}}
{"sample_id": 6860, "db_id": "flight_4", "final": {"question": "For each country and airline name, how many routes are there?", "sql": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name", "source_tables": ["routes", "airlines"]}}
{"sample_id": 6866, "db_id": "flight_4", "final": {"question": "Find the number of routes that have destination John F Kennedy International Airport.", "sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'", "source_tables": ["routes", "airports"]}}
{"sample_id": 6813, "db_id": "flight_4", "final": {"question": "What is the country of the airport with the highest elevation?", "sql": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1", "source_tables": ["airports"]}}
{"sample_id": 6833, "db_id": "flight_4", "final": {"question": "What is the number of different different airports that are destinations for American Airlines?", "sql": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'", "source_tables": ["routes", "airlines"]}}
{"sample_id": 6824, "db_id": "flight_4", "final": {"question": "Find the name, city, and country of the airport that has the highest latitude.", "sql": "SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1", "source_tables": ["airports"]}}
{"sample_id": 6850, "db_id": "flight_4", "final": {"question": "List the cities which have more than 2 airports sorted by the number of airports.", "sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)", "source_tables": ["airports"]}}
{"sample_id": 6829, "db_id": "flight_4", "final": {"question": "For the airline ids with the top 10 most routes operated, what are their names?", "sql": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10", "source_tables": ["routes", "airlines"]}}
{"sample_id": 6817, "db_id": "flight_4", "final": {"question": "In how many cities are there airports in the country of Greenland?", "sql": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'", "source_tables": ["airports"]}}
{"sample_id": 6859, "db_id": "flight_4", "final": {"question": "What are the cities with exactly two airports?", "sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2", "source_tables": ["airports"]}}
{"sample_id": 6804, "db_id": "flight_4", "final": {"question": "What is the maximum elevation of all airports in the country of Iceland?", "sql": "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'", "source_tables": ["airports"]}}
{"sample_id": 6861, "db_id": "flight_4", "final": {"question": "What is the total number of routes for each country and airline in that country?", "sql": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name", "source_tables": ["routes", "airlines"]}}
{"sample_id": 6852, "db_id": "flight_4", "final": {"question": "Find the number of routes for each source airport and the airport name.", "sql": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name", "source_tables": ["routes", "airports"]}}
{"sample_id": 6837, "db_id": "flight_4", "final": {"question": "What are the countries with the most airlines whose active status is Y?", "sql": "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airlines"]}}
{"sample_id": 6929, "db_id": "tracking_orders", "final": {"question": "What are the distinct details of invoices created before 1989-09-03 or after 2007-12-25?", "sql": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"", "source_tables": ["invoices"]}}
{"sample_id": 6897, "db_id": "tracking_orders", "final": {"question": "What are the dates of the orders made by the customer named \"Jeramie\"?", "sql": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"", "source_tables": ["customers", "orders"]}}
{"sample_id": 6888, "db_id": "tracking_orders", "final": {"question": "Find the details of all the distinct customers who have orders with status \"On Road\".", "sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"", "source_tables": ["customers", "orders"]}}
{"sample_id": 6933, "db_id": "tracking_orders", "final": {"question": "What are the names of the customers who have made two or less orders?", "sql": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2", "source_tables": ["customers", "orders"]}}
{"sample_id": 6906, "db_id": "tracking_orders", "final": {"question": "When was the order placed whose shipment tracking number is 3452? Give me the date.", "sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452", "source_tables": ["shipments", "orders"]}}
{"sample_id": 6907, "db_id": "tracking_orders", "final": {"question": "On which day was the order placed whose shipment tracking number is 3452?", "sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452", "source_tables": ["shipments", "orders"]}}
{"sample_id": 6912, "db_id": "tracking_orders", "final": {"question": "List the name and count of each product in all orders.", "sql": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id", "source_tables": ["order_items", "products", "orders"]}}
{"sample_id": 6899, "db_id": "tracking_orders", "final": {"question": "Which customers made orders between 2009-01-01 and 2010-01-01? Find their names.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"", "source_tables": ["customers", "orders"]}}
{"sample_id": 6896, "db_id": "tracking_orders", "final": {"question": "Find the dates of orders which belong to the customer named \"Jeramie\".", "sql": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"", "source_tables": ["customers", "orders"]}}
{"sample_id": 6884, "db_id": "tracking_orders", "final": {"question": "Find the ids of all the order items whose product id is 11.", "sql": "SELECT order_item_id FROM order_items WHERE product_id = 11", "source_tables": ["order_items"]}}
{"sample_id": 6926, "db_id": "tracking_orders", "final": {"question": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.", "sql": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"", "source_tables": ["invoices"]}}
{"sample_id": 6901, "db_id": "tracking_orders", "final": {"question": "What are the distinct ids of products ordered between 1975-01-01 and 1976-01-01??", "sql": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"", "source_tables": ["order_items", "orders"]}}
{"sample_id": 6954, "db_id": "architecture", "final": {"question": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.", "sql": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet", "source_tables": ["architect", "bridge"]}}
{"sample_id": 6942, "db_id": "architecture", "final": {"question": "What are the names and year of construction for the mills of 'Grondzeiler' type?", "sql": "SELECT name ,  built_year FROM mill WHERE TYPE  =  'Grondzeiler'", "source_tables": ["mill"]}}
{"sample_id": 6949, "db_id": "architecture", "final": {"question": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?", "sql": "SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge'", "source_tables": ["bridge"]}}
{"sample_id": 6944, "db_id": "architecture", "final": {"question": "What are the names of the mills which are not located in 'Donceel'?", "sql": "SELECT name FROM mill WHERE LOCATION != 'Donceel'", "source_tables": ["mill"]}}
{"sample_id": 6976, "db_id": "culture_company", "final": {"question": "What are the titles, years, and directors of all movies, ordered by budget in millions?", "sql": "SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million", "source_tables": ["movie"]}}
{"sample_id": 6970, "db_id": "culture_company", "final": {"question": "What categories have two or more corresponding books that were made after 1989?", "sql": "SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2", "source_tables": ["book_club"]}}
{"sample_id": 6991, "db_id": "culture_company", "final": {"question": "Show all company names with a movie directed in year 1999.", "sql": "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999", "source_tables": ["movie", "culture_company"]}}
{"sample_id": 6955, "db_id": "culture_company", "final": {"question": "How many book clubs are there?", "sql": "SELECT count(*) FROM book_club", "source_tables": ["book_club"]}}
{"sample_id": 6975, "db_id": "culture_company", "final": {"question": "Show all movie titles, years, and directors, ordered by budget.", "sql": "SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million", "source_tables": ["movie"]}}
{"sample_id": 6988, "db_id": "culture_company", "final": {"question": "What are all the company names that have a book published by Alyson?", "sql": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'", "source_tables": ["culture_company", "book_club"]}}
{"sample_id": 6977, "db_id": "culture_company", "final": {"question": "How many movie directors are there?", "sql": "SELECT COUNT (DISTINCT director) FROM movie", "source_tables": ["movie"]}}
{"sample_id": 6960, "db_id": "culture_company", "final": {"question": "What are all the different book publishers?", "sql": "SELECT DISTINCT publisher FROM book_club", "source_tables": ["book_club"]}}
{"sample_id": 7024, "db_id": "concert_singer", "final": {"question": "Show names for all stadiums except for stadiums having a concert in year 2014.", "sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "source_tables": ["stadium", "concert"]}}
{"sample_id": 7037, "db_id": "concert_singer", "final": {"question": "What are the number of concerts that occurred in the stadium with the largest capacity ?", "sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "source_tables": ["stadium", "concert"]}}
{"sample_id": 6999, "db_id": "concert_singer", "final": {"question": "Show the name and the release year of the song by the youngest singer.", "sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "source_tables": ["singer"]}}
{"sample_id": 7036, "db_id": "concert_singer", "final": {"question": "Find the number of concerts happened in the stadium with the highest capacity .", "sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "source_tables": ["stadium", "concert"]}}
{"sample_id": 7025, "db_id": "concert_singer", "final": {"question": "What are the names of all stadiums that did not have a concert in 2014?", "sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "source_tables": ["stadium", "concert"]}}
{"sample_id": 7026, "db_id": "concert_singer", "final": {"question": "Show the name and theme for all concerts and the number of singers in each concert.", "sql": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id", "source_tables": ["singer_in_concert", "concert"]}}
{"sample_id": 7021, "db_id": "concert_singer", "final": {"question": "Show the stadium names without any concert.", "sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "source_tables": ["stadium", "concert"]}}
{"sample_id": 7015, "db_id": "concert_singer", "final": {"question": "Show the stadium name and the number of concerts in each stadium.", "sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "source_tables": ["stadium", "concert"]}}
{"sample_id": 6995, "db_id": "concert_singer", "final": {"question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "source_tables": ["singer"]}}
{"sample_id": 7054, "db_id": "pets_1", "final": {"question": "Find the major and age of students who do not have a cat pet.", "sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "source_tables": ["student", "pets", "has_pet"]}}
{"sample_id": 7077, "db_id": "pets_1", "final": {"question": "What is the last name of the student who has a cat that is 3 years old?", "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "source_tables": ["student", "pets", "has_pet"]}}
{"sample_id": 7061, "db_id": "pets_1", "final": {"question": "What type of pet is the youngest animal, and how much does it weigh?", "sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "source_tables": ["pets"]}}
{"sample_id": 7062, "db_id": "pets_1", "final": {"question": "Find the id and weight of all pets whose age is older than 1.", "sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "source_tables": ["pets"]}}
{"sample_id": 7047, "db_id": "pets_1", "final": {"question": "How many dog pets are raised by female students?", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "source_tables": ["student", "pets", "has_pet"]}}
{"sample_id": 7048, "db_id": "pets_1", "final": {"question": "Find the number of distinct type of pets.", "sql": "SELECT count(DISTINCT pettype) FROM pets", "source_tables": ["pets"]}}
{"sample_id": 7070, "db_id": "pets_1", "final": {"question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.", "sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "source_tables": ["student", "has_pet"]}}
{"sample_id": 7063, "db_id": "pets_1", "final": {"question": "What is the id and weight of every pet who is older than 1?", "sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "source_tables": ["pets"]}}
{"sample_id": 7059, "db_id": "pets_1", "final": {"question": "What is the first name of every student who has a dog but does not have a cat?", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "source_tables": ["student", "pets", "has_pet"]}}
{"sample_id": 7164, "db_id": "car_1", "final": {"question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "source_tables": ["car_names", "car_makers", "model_list", "cars_data"]}}
{"sample_id": 7121, "db_id": "car_1", "final": {"question": "What is the average weight and year for each year?", "sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "source_tables": ["cars_data"]}}
{"sample_id": 7145, "db_id": "car_1", "final": {"question": "What are the different models created by either the car maker General Motors or weighed more than 3500?", "sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "source_tables": ["car_names", "model_list", "cars_data", "car_makers"]}}
{"sample_id": 7082, "db_id": "car_1", "final": {"question": "How many countries does each continent have? List the continent id, continent name and the number of countries.", "sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "source_tables": ["countries", "continents"]}}
{"sample_id": 7132, "db_id": "car_1", "final": {"question": "What is the maximum accelerate for different number of cylinders?", "sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "source_tables": ["cars_data"]}}
{"sample_id": 7128, "db_id": "car_1", "final": {"question": "What is the average horsepower of the cars before 1980?", "sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "source_tables": ["cars_data"]}}
{"sample_id": 7125, "db_id": "car_1", "final": {"question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7161, "db_id": "car_1", "final": {"question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?", "sql": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7162, "db_id": "car_1", "final": {"question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?", "sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "source_tables": ["cars_data"]}}
{"sample_id": 7105, "db_id": "car_1", "final": {"question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7131, "db_id": "car_1", "final": {"question": "What is the average edispl for all volvos?", "sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7098, "db_id": "car_1", "final": {"question": "How many car makers are there in each continents? List the continent name and the count.", "sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "source_tables": ["countries", "continents", "car_makers"]}}
{"sample_id": 7094, "db_id": "car_1", "final": {"question": "Find the make and production time of the cars that were produced in the earliest year?", "sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7106, "db_id": "car_1", "final": {"question": "How many car makers are there in france?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "source_tables": ["countries", "car_makers"]}}
{"sample_id": 7158, "db_id": "car_1", "final": {"question": "For the cars with 4 cylinders, which model has the largest horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7156, "db_id": "car_1", "final": {"question": "How many cars has over 6 cylinders?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "source_tables": ["cars_data"]}}
{"sample_id": 7088, "db_id": "car_1", "final": {"question": "Which model of the car has the minimum horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7126, "db_id": "car_1", "final": {"question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7099, "db_id": "car_1", "final": {"question": "What is the name of each continent and how many car makers are there in each one?", "sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "source_tables": ["countries", "continents", "car_makers"]}}
{"sample_id": 7235, "db_id": "flight_2", "final": {"question": "Which airlines have at least 10 flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7177, "db_id": "flight_2", "final": {"question": "What are the airline names and abbreviations for airlines in the USA?", "sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "source_tables": ["airlines"]}}
{"sample_id": 7215, "db_id": "flight_2", "final": {"question": "Which city has the most frequent destination airport?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "flights"]}}
{"sample_id": 7205, "db_id": "flight_2", "final": {"question": "How many flights fly from Aberdeen to Ashley?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "source_tables": ["airports", "flights"]}}
{"sample_id": 7187, "db_id": "flight_2", "final": {"question": "Give the airline with abbreviation 'UAL'.", "sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "source_tables": ["airlines"]}}
{"sample_id": 7237, "db_id": "flight_2", "final": {"question": "Which airlines have less than 200 flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7211, "db_id": "flight_2", "final": {"question": "Return the number of United Airlines flights leaving from AHD Airport.", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7183, "db_id": "flight_2", "final": {"question": "Return the number of  airports.", "sql": "SELECT count(*) FROM AIRPORTS", "source_tables": ["airports"]}}
{"sample_id": 7226, "db_id": "flight_2", "final": {"question": "What are airlines that have some flight departing from airport 'AHD'?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7174, "db_id": "flight_2", "final": {"question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "source_tables": ["airlines"]}}
{"sample_id": 7217, "db_id": "flight_2", "final": {"question": "Which city is the most frequent source airport?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "flights"]}}
{"sample_id": 7230, "db_id": "flight_2", "final": {"question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7191, "db_id": "flight_2", "final": {"question": "Give the city and country for the Alton airport.", "sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "source_tables": ["airports"]}}
{"sample_id": 7173, "db_id": "flight_2", "final": {"question": "What country is Jetblue Airways affiliated with?", "sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "source_tables": ["airlines"]}}
{"sample_id": 7219, "db_id": "flight_2", "final": {"question": "What is the airport code of the airport with the most flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "flights"]}}
{"sample_id": 7194, "db_id": "flight_2", "final": {"question": "What are airport names at City 'Aberdeen'?", "sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "source_tables": ["airports"]}}
{"sample_id": 7253, "db_id": "employee_hire_evaluation", "final": {"question": "Count the number of employees", "sql": "SELECT count(*) FROM employee", "source_tables": ["employee"]}}
{"sample_id": 7270, "db_id": "employee_hire_evaluation", "final": {"question": "find the name of employee who was awarded the most times in the evaluation.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["evaluation", "employee"]}}
{"sample_id": 7256, "db_id": "employee_hire_evaluation", "final": {"question": "What is the number of employees from each city?", "sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "source_tables": ["employee"]}}
{"sample_id": 7269, "db_id": "employee_hire_evaluation", "final": {"question": "Which shops' number products is above the average? Give me the shop names.", "sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "source_tables": ["shop"]}}
{"sample_id": 7255, "db_id": "employee_hire_evaluation", "final": {"question": "List the names of employees and sort in ascending order of age.", "sql": "SELECT name FROM employee ORDER BY age", "source_tables": ["employee"]}}
{"sample_id": 7273, "db_id": "employee_hire_evaluation", "final": {"question": "Which employee received the biggest bonus? Give me the employee name.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "source_tables": ["evaluation", "employee"]}}
{"sample_id": 7272, "db_id": "employee_hire_evaluation", "final": {"question": "Find the name of the employee who got the highest one time bonus.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "source_tables": ["evaluation", "employee"]}}
{"sample_id": 7285, "db_id": "employee_hire_evaluation", "final": {"question": "What is all the information about hiring?", "sql": "SELECT * FROM hiring", "source_tables": ["hiring"]}}
{"sample_id": 7264, "db_id": "employee_hire_evaluation", "final": {"question": "find the minimum and maximum number of products of all stores.", "sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "source_tables": ["shop"]}}
{"sample_id": 7364, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "List all document ids with at least two paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "source_tables": ["paragraphs"]}}
{"sample_id": 7340, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all template type codes and descriptions.", "sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "source_tables": ["ref_template_types"]}}
{"sample_id": 7306, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show ids for all templates that are used by more than one document.", "sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "source_tables": ["documents"]}}
{"sample_id": 7295, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the names and template ids for documents that contain the letter w in their description.", "sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "source_tables": ["documents"]}}
{"sample_id": 7351, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Count the number of paragraphs.", "sql": "SELECT count(*) FROM Paragraphs", "source_tables": ["paragraphs"]}}
{"sample_id": 7362, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all document ids, names and the number of paragraphs in each document.", "sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 7333, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the names of documents that use templates with the code BK?", "sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "source_tables": ["templates", "documents"]}}
{"sample_id": 7350, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "How many paragraphs in total?", "sql": "SELECT count(*) FROM Paragraphs", "source_tables": ["paragraphs"]}}
{"sample_id": 7365, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the ids of documents that have 2 or more paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "source_tables": ["paragraphs"]}}
{"sample_id": 7327, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the codes of template types that have fewer than 3 templates?", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "source_tables": ["templates"]}}
{"sample_id": 7315, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the different template type codes?", "sql": "SELECT DISTINCT template_type_code FROM Templates", "source_tables": ["templates"]}}
{"sample_id": 7290, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "How many documents do we have?", "sql": "SELECT count(*) FROM Documents", "source_tables": ["documents"]}}
{"sample_id": 7298, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "How many different templates do all document use?", "sql": "SELECT count(DISTINCT template_id) FROM Documents", "source_tables": ["documents"]}}
{"sample_id": 7296, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What is the document id, template id and description for document named \"Robbin CV\"?", "sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "source_tables": ["documents"]}}
{"sample_id": 7309, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the ids for templates that are not used in any documents?", "sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "source_tables": ["templates", "documents"]}}
{"sample_id": 7328, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What the smallest version number and its template type code?", "sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "source_tables": ["templates"]}}
{"sample_id": 7339, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the codes of template types that are not used for any document?", "sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "source_tables": ["templates", "documents"]}}
{"sample_id": 7310, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "How many templates do we have?", "sql": "SELECT count(*) FROM Templates", "source_tables": ["templates"]}}
{"sample_id": 7395, "db_id": "course_teach", "final": {"question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "source_tables": ["teacher", "course", "course_arrange"]}}
{"sample_id": 7396, "db_id": "course_teach", "final": {"question": "Show the name of the teacher for the math course.", "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "source_tables": ["teacher", "course", "course_arrange"]}}
{"sample_id": 7399, "db_id": "course_teach", "final": {"question": "What are the names of the teachers and how many courses do they teach?", "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "source_tables": ["teacher", "course_arrange"]}}
{"sample_id": 7392, "db_id": "course_teach", "final": {"question": "Show names of teachers and the courses they are arranged to teach.", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "source_tables": ["teacher", "course", "course_arrange"]}}
{"sample_id": 7378, "db_id": "course_teach", "final": {"question": "What are the age and hometown of teachers?", "sql": "SELECT Age ,  Hometown FROM teacher", "source_tables": ["teacher"]}}
{"sample_id": 7391, "db_id": "course_teach", "final": {"question": "What are the towns from which at least two teachers come from?", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "source_tables": ["teacher"]}}
{"sample_id": 7415, "db_id": "museum_visit", "final": {"question": "What is the name of the museum that had no visitor yet?", "sql": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)", "source_tables": ["museum", "visit"]}}
{"sample_id": 7409, "db_id": "museum_visit", "final": {"question": "Find the average number of staff working for the museums that were open before 2009.", "sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "source_tables": ["museum"]}}
{"sample_id": 7408, "db_id": "museum_visit", "final": {"question": "Find the id and name of the museum that has the most staff members?", "sql": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "source_tables": ["museum"]}}
{"sample_id": 7416, "db_id": "museum_visit", "final": {"question": "Find the name and age of the visitor who bought the most tickets at once.", "sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "source_tables": ["visitor", "visit"]}}
{"sample_id": 7421, "db_id": "museum_visit", "final": {"question": "How many museums were opened after 2013 or before 2008?", "sql": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008", "source_tables": ["museum"]}}
{"sample_id": 7428, "db_id": "wta_1", "final": {"question": "Find the average age of losers and winners of all matches.", "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "source_tables": ["matches"]}}
{"sample_id": 7463, "db_id": "wta_1", "final": {"question": "What are the first names of all players, and their average rankings?", "sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "source_tables": ["players", "rankings"]}}
{"sample_id": 7436, "db_id": "wta_1", "final": {"question": "Find the number of distinct name of losers.", "sql": "SELECT count(DISTINCT loser_name) FROM matches", "source_tables": ["matches"]}}
{"sample_id": 7471, "db_id": "wta_1", "final": {"question": "What are the codes of countries with more than 50 players?", "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "source_tables": ["players"]}}
{"sample_id": 7467, "db_id": "wta_1", "final": {"question": "How many players are from each country?", "sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "source_tables": ["players"]}}
{"sample_id": 7474, "db_id": "wta_1", "final": {"question": "Find the number of matches happened in each year.", "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "source_tables": ["matches"]}}
{"sample_id": 7462, "db_id": "wta_1", "final": {"question": "Find the average ranking for each player and their first name.", "sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "source_tables": ["players", "rankings"]}}
{"sample_id": 7483, "db_id": "wta_1", "final": {"question": "How many players are there for each hand type?", "sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "source_tables": ["players"]}}
{"sample_id": 7473, "db_id": "wta_1", "final": {"question": "How many total tours were there for each ranking date?", "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "source_tables": ["rankings"]}}
{"sample_id": 7431, "db_id": "wta_1", "final": {"question": "What is the average rank for winners in all matches?", "sql": "SELECT avg(winner_rank) FROM matches", "source_tables": ["matches"]}}
{"sample_id": 7432, "db_id": "wta_1", "final": {"question": "Find the highest rank of losers in all matches.", "sql": "SELECT min(loser_rank) FROM matches", "source_tables": ["matches"]}}
{"sample_id": 7426, "db_id": "wta_1", "final": {"question": "List the first name and birth date of all players from the country with code USA.", "sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "source_tables": ["players"]}}
{"sample_id": 7434, "db_id": "wta_1", "final": {"question": "find the number of distinct country codes of all players.", "sql": "SELECT count(DISTINCT country_code) FROM players", "source_tables": ["players"]}}
{"sample_id": 7494, "db_id": "battle_death", "final": {"question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "sql": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "source_tables": ["battle"]}}
{"sample_id": 7497, "db_id": "battle_death", "final": {"question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "sql": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", "source_tables": ["ship", "battle"]}}
{"sample_id": 7493, "db_id": "battle_death", "final": {"question": "What is the ship id and name that caused most total injuries?", "sql": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["ship", "death"]}}
{"sample_id": 7496, "db_id": "battle_death", "final": {"question": "How many battles did not lose any ship with tonnage '225'?", "sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "source_tables": ["ship", "battle"]}}
{"sample_id": 7508, "db_id": "student_transcripts_tracking", "final": {"question": "Which department offers the most number of degrees? List department name and id.", "sql": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["departments", "degree_programs"]}}
{"sample_id": 7502, "db_id": "student_transcripts_tracking", "final": {"question": "How many courses in total are listed?", "sql": "SELECT count(*) FROM Courses", "source_tables": ["courses"]}}
{"sample_id": 7536, "db_id": "student_transcripts_tracking", "final": {"question": "Which semesters do not have any student enrolled? List the semester name.", "sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "source_tables": ["student_enrolment", "semesters"]}}
{"sample_id": 7566, "db_id": "student_transcripts_tracking", "final": {"question": "Show the date of the transcript which shows the least number of results, also list the id.", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["transcripts", "transcript_contents"]}}
{"sample_id": 7524, "db_id": "student_transcripts_tracking", "final": {"question": "What is the description of the department whose name has the substring the computer?", "sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "source_tables": ["departments"]}}
{"sample_id": 7535, "db_id": "student_transcripts_tracking", "final": {"question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?", "sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["students", "student_enrolment"]}}
{"sample_id": 7517, "db_id": "student_transcripts_tracking", "final": {"question": "What are the names and descriptions for all the sections?", "sql": "SELECT section_name ,  section_description FROM Sections", "source_tables": ["sections"]}}
{"sample_id": 7503, "db_id": "student_transcripts_tracking", "final": {"question": "How many courses are there?", "sql": "SELECT count(*) FROM Courses", "source_tables": ["courses"]}}
{"sample_id": 7511, "db_id": "student_transcripts_tracking", "final": {"question": "How many different departments offer degrees?", "sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "source_tables": ["degree_programs"]}}
{"sample_id": 7509, "db_id": "student_transcripts_tracking", "final": {"question": "What is the name and id of the department with the most number of degrees ?", "sql": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1", "source_tables": ["departments", "degree_programs"]}}
{"sample_id": 7550, "db_id": "student_transcripts_tracking", "final": {"question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "source_tables": ["students"]}}
{"sample_id": 7553, "db_id": "student_transcripts_tracking", "final": {"question": "What is the first name of the student whose permanent address is different from his or her current one?", "sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "source_tables": ["students"]}}
{"sample_id": 7504, "db_id": "student_transcripts_tracking", "final": {"question": "How is the math course described?", "sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "source_tables": ["courses"]}}
{"sample_id": 7576, "db_id": "student_transcripts_tracking", "final": {"question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .", "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "source_tables": ["students", "addresses"]}}
{"sample_id": 7537, "db_id": "student_transcripts_tracking", "final": {"question": "What is the name of the semester with no students enrolled?", "sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "source_tables": ["student_enrolment", "semesters"]}}
{"sample_id": 7514, "db_id": "student_transcripts_tracking", "final": {"question": "How many degrees does the engineering department offer?", "sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "source_tables": ["departments", "degree_programs"]}}
{"sample_id": 7542, "db_id": "student_transcripts_tracking", "final": {"question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "source_tables": ["students", "student_enrolment", "addresses"]}}
{"sample_id": 7629, "db_id": "tvshow", "final": {"question": "What are the countries that are not playing cartoons written by Todd Casey?", "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 7621, "db_id": "tvshow", "final": {"question": "How many cartoons did each director create?", "sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "source_tables": ["cartoon"]}}
{"sample_id": 7608, "db_id": "tvshow", "final": {"question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "source_tables": ["tv_series"]}}
{"sample_id": 7581, "db_id": "tvshow", "final": {"question": "What are the names of all cartoons directed by Ben Jones?", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "source_tables": ["cartoon"]}}
{"sample_id": 7598, "db_id": "tvshow", "final": {"question": "List the language used least number of TV Channel. List language and number of TV Channel.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "source_tables": ["tv_channel"]}}
{"sample_id": 7635, "db_id": "tvshow", "final": {"question": "What are the ids of all tv channels that have more than 2 TV channels?", "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "source_tables": ["tv_channel"]}}
{"sample_id": 7589, "db_id": "tvshow", "final": {"question": "What is the country with the most number of TV Channels and how many does it have?", "sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["tv_channel"]}}
{"sample_id": 7626, "db_id": "tvshow", "final": {"question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 7632, "db_id": "tvshow", "final": {"question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "source_tables": ["tv_channel"]}}
{"sample_id": 7638, "db_id": "tvshow", "final": {"question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 7634, "db_id": "tvshow", "final": {"question": "find id of the tv channels that from the countries where have more than two tv channels.", "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "source_tables": ["tv_channel"]}}
{"sample_id": 7627, "db_id": "tvshow", "final": {"question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 7599, "db_id": "tvshow", "final": {"question": "What are the languages used by the least number of TV Channels and how many channels use it?", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "source_tables": ["tv_channel"]}}
{"sample_id": 7672, "db_id": "poker_player", "final": {"question": "List the names and birth dates of people in ascending alphabetical order of name.", "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "source_tables": ["people"]}}
{"sample_id": 7658, "db_id": "poker_player", "final": {"question": "What is the birth date of the poker player with the lowest earnings?", "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "source_tables": ["people", "poker_player"]}}
{"sample_id": 7670, "db_id": "poker_player", "final": {"question": "What are the nationalities that are shared by at least two people?", "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "source_tables": ["people"]}}
{"sample_id": 7644, "db_id": "poker_player", "final": {"question": "List the final tables made and the best finishes of poker players.", "sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "source_tables": ["poker_player"]}}
{"sample_id": 7656, "db_id": "poker_player", "final": {"question": "List the names of poker players ordered by the final tables made in ascending order.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "source_tables": ["people", "poker_player"]}}
{"sample_id": 7648, "db_id": "poker_player", "final": {"question": "What is the money rank of the poker player with the highest earnings?", "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "source_tables": ["poker_player"]}}
{"sample_id": 7660, "db_id": "poker_player", "final": {"question": "What is the money rank of the tallest poker player?", "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "source_tables": ["people", "poker_player"]}}
{"sample_id": 7669, "db_id": "poker_player", "final": {"question": "Give the nationality that is most common across all people.", "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["people"]}}
{"sample_id": 7692, "db_id": "voter_1", "final": {"question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "sql": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "source_tables": ["votes", "contestants"]}}
{"sample_id": 7688, "db_id": "voter_1", "final": {"question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?", "sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1", "source_tables": ["votes", "contestants"]}}
{"sample_id": 7682, "db_id": "voter_1", "final": {"question": "List the vote ids, phone numbers and states of all votes.", "sql": "SELECT vote_id ,  phone_number ,  state FROM votes", "source_tables": ["votes"]}}
{"sample_id": 7801, "db_id": "world_1", "final": {"question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "source_tables": ["country"]}}
{"sample_id": 7696, "db_id": "world_1", "final": {"question": "Give the names of the nations that were founded after 1950.", "sql": "SELECT Name FROM country WHERE IndepYear  >  1950", "source_tables": ["country"]}}
{"sample_id": 7741, "db_id": "world_1", "final": {"question": "What are the names of nations where both English and French are official languages?", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7721, "db_id": "world_1", "final": {"question": "How many people live in Gelderland district?", "sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "source_tables": ["city"]}}
{"sample_id": 7711, "db_id": "world_1", "final": {"question": "What is the average expected life expectancy for countries in the region of Central Africa?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "source_tables": ["country"]}}
{"sample_id": 7812, "db_id": "world_1", "final": {"question": "Count the number of countries for which Spanish is the predominantly spoken language.", "sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "source_tables": ["countrylanguage"]}}
{"sample_id": 7714, "db_id": "world_1", "final": {"question": "Give the name of the country in Asia with the lowest life expectancy.", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "source_tables": ["country"]}}
{"sample_id": 7753, "db_id": "world_1", "final": {"question": "Find the city with the largest population that uses English.", "sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "source_tables": ["city", "countrylanguage"]}}
{"sample_id": 7800, "db_id": "world_1", "final": {"question": "Count the number of countries in Asia.", "sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "source_tables": ["country"]}}
{"sample_id": 7736, "db_id": "world_1", "final": {"question": "Which continent speaks the most languages?", "sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7757, "db_id": "world_1", "final": {"question": "What is average life expectancy in the countries where English is not the official language?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7701, "db_id": "world_1", "final": {"question": "Which continent is Anguilla in?", "sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "source_tables": ["country"]}}
{"sample_id": 7777, "db_id": "world_1", "final": {"question": "Which cities are in European countries where English is not the official language?", "sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "source_tables": ["city", "countrylanguage", "country"]}}
{"sample_id": 7713, "db_id": "world_1", "final": {"question": "What is the name of country that has the shortest life expectancy in Asia?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "source_tables": ["country"]}}
{"sample_id": 7760, "db_id": "world_1", "final": {"question": "How many people live in countries that do not speak English?", "sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7775, "db_id": "world_1", "final": {"question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?", "sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7767, "db_id": "world_1", "final": {"question": "What are the African countries that have a  population less than any country in Asia?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")", "source_tables": ["country"]}}
{"sample_id": 7814, "db_id": "world_1", "final": {"question": "Return the codes of countries for which Spanish is the predominantly spoken language.", "sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "source_tables": ["countrylanguage"]}}
{"sample_id": 7807, "db_id": "world_1", "final": {"question": "Which language is spoken by the largest number of countries?", "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["countrylanguage"]}}
{"sample_id": 7771, "db_id": "world_1", "final": {"question": "What are the country codes for countries that do not speak English?", "sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "source_tables": ["countrylanguage"]}}
{"sample_id": 7811, "db_id": "world_1", "final": {"question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "source_tables": ["countrylanguage"]}}
{"sample_id": 7809, "db_id": "world_1", "final": {"question": "What is the language spoken by the largest percentage of people in each country?", "sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "source_tables": ["countrylanguage"]}}
{"sample_id": 7764, "db_id": "world_1", "final": {"question": "For the countries founded before 1930, what is the total number of distinct official languages?", "sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7781, "db_id": "world_1", "final": {"question": "What are the name, independence year, and surface area of the country with the smallest population?", "sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "source_tables": ["country"]}}
{"sample_id": 7826, "db_id": "orchestra", "final": {"question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "source_tables": ["performance"]}}
{"sample_id": 7845, "db_id": "orchestra", "final": {"question": "List the record company shared by the most number of orchestras.", "sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["orchestra"]}}
{"sample_id": 7821, "db_id": "orchestra", "final": {"question": "What are the record companies of orchestras in descending order of years in which they were founded?", "sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "source_tables": ["orchestra"]}}
{"sample_id": 7815, "db_id": "orchestra", "final": {"question": "How many conductors are there?", "sql": "SELECT count(*) FROM conductor", "source_tables": ["conductor"]}}
{"sample_id": 7839, "db_id": "orchestra", "final": {"question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "source_tables": ["orchestra", "conductor"]}}
{"sample_id": 7838, "db_id": "orchestra", "final": {"question": "What is the name of the conductor who has conducted the most orchestras?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["orchestra", "conductor"]}}
{"sample_id": 7829, "db_id": "orchestra", "final": {"question": "List names of conductors in descending order of years of work.", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "source_tables": ["conductor"]}}
{"sample_id": 7818, "db_id": "orchestra", "final": {"question": "What are the names of conductors, ordered by age?", "sql": "SELECT Name FROM conductor ORDER BY Age ASC", "source_tables": ["conductor"]}}
{"sample_id": 7900, "db_id": "network_1", "final": {"question": "Give the name of the student with the most likes.", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["highschooler", "likes"]}}
{"sample_id": 7876, "db_id": "network_1", "final": {"question": "How many friends does each student have?", "sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "source_tables": ["friend"]}}
{"sample_id": 7902, "db_id": "network_1", "final": {"question": "What are the names of students who have 2 or more likes?", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "source_tables": ["highschooler", "likes"]}}
{"sample_id": 7857, "db_id": "network_1", "final": {"question": "Show the names and grades of each high schooler.", "sql": "SELECT name ,  grade FROM Highschooler", "source_tables": ["highschooler"]}}
{"sample_id": 7886, "db_id": "network_1", "final": {"question": "Count the number of friends Kyle has.", "sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "source_tables": ["highschooler", "friend"]}}
{"sample_id": 7891, "db_id": "network_1", "final": {"question": "Show the ids of high schoolers who have friends and are also liked by someone else.", "sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "source_tables": ["friend", "likes"]}}
{"sample_id": 7904, "db_id": "network_1", "final": {"question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "source_tables": ["highschooler", "friend"]}}
{"sample_id": 7860, "db_id": "network_1", "final": {"question": "What is the grade of each high schooler?", "sql": "SELECT grade FROM Highschooler", "source_tables": ["highschooler"]}}
{"sample_id": 7868, "db_id": "network_1", "final": {"question": "Count the number of high schoolers in grades 9 or 10.", "sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "source_tables": ["highschooler"]}}
{"sample_id": 7869, "db_id": "network_1", "final": {"question": "Show the number of high schoolers for each grade.", "sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "source_tables": ["highschooler"]}}
{"sample_id": 7898, "db_id": "network_1", "final": {"question": "What are the names of high schoolers who have likes, and how many likes does each have?", "sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "source_tables": ["highschooler", "likes"]}}
{"sample_id": 7888, "db_id": "network_1", "final": {"question": "What are the ids of high school students who do not have friends?", "sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "source_tables": ["highschooler", "friend"]}}
{"sample_id": 7951, "db_id": "dog_kennels", "final": {"question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "source_tables": ["dogs", "treatments"]}}
{"sample_id": 7923, "db_id": "dog_kennels", "final": {"question": "Which owner owns the most dogs? List the owner id, first name and last name.", "sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["dogs", "owners"]}}
{"sample_id": 7949, "db_id": "dog_kennels", "final": {"question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "source_tables": ["dogs", "owners"]}}
{"sample_id": 7979, "db_id": "dog_kennels", "final": {"question": "What is the average age of all the dogs?", "sql": "SELECT avg(age) FROM Dogs", "source_tables": ["dogs"]}}
{"sample_id": 7922, "db_id": "dog_kennels", "final": {"question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.", "sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 7968, "db_id": "dog_kennels", "final": {"question": "Count the number of dogs of an age below the average.", "sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "source_tables": ["dogs"]}}
{"sample_id": 7970, "db_id": "dog_kennels", "final": {"question": "Show me the cost of the most recently performed treatment.", "sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "source_tables": ["treatments"]}}
{"sample_id": 7977, "db_id": "dog_kennels", "final": {"question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "source_tables": ["dogs"]}}
{"sample_id": 7965, "db_id": "dog_kennels", "final": {"question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "source_tables": ["owners"]}}
{"sample_id": 7932, "db_id": "dog_kennels", "final": {"question": "Give me the description of the treatment type whose total cost is the lowest.", "sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "source_tables": ["treatment_types", "treatments"]}}
{"sample_id": 7953, "db_id": "dog_kennels", "final": {"question": "List the last name of the owner owning the youngest dog.", "sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "source_tables": ["dogs", "owners"]}}
{"sample_id": 7989, "db_id": "dog_kennels", "final": {"question": "What are all the possible breed type and size type combinations?", "sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "source_tables": ["dogs"]}}
{"sample_id": 7976, "db_id": "dog_kennels", "final": {"question": "Find the number of professionals who have not treated any dogs.", "sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 7962, "db_id": "dog_kennels", "final": {"question": "Find the number of professionals who have ever treated dogs.", "sql": "SELECT count(DISTINCT professional_id) FROM Treatments", "source_tables": ["treatments"]}}
{"sample_id": 7987, "db_id": "dog_kennels", "final": {"question": "List the email, cell phone and home phone of all the professionals.", "sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "source_tables": ["professionals"]}}
{"sample_id": 7912, "db_id": "dog_kennels", "final": {"question": "Find the states where both owners and professionals live.", "sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "source_tables": ["professionals", "owners"]}}
{"sample_id": 7991, "db_id": "dog_kennels", "final": {"question": "List the first name of all the professionals along with the description of the treatment they have done.", "sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "source_tables": ["treatment_types", "professionals", "treatments"]}}
{"sample_id": 8004, "db_id": "singer", "final": {"question": "What is the name of the singer who is worth the most?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "source_tables": ["singer"]}}
{"sample_id": 8008, "db_id": "singer", "final": {"question": "What is the most common singer citizenship ?", "sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1", "source_tables": ["singer"]}}
{"sample_id": 8019, "db_id": "singer", "final": {"question": "List the name of singers that do not have any song.", "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "source_tables": ["singer", "song"]}}
{"sample_id": 8022, "db_id": "singer", "final": {"question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "source_tables": ["singer"]}}
{"sample_id": 8007, "db_id": "singer", "final": {"question": "Please show the most common citizenship of singers.", "sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["singer"]}}
{"sample_id": 8002, "db_id": "singer", "final": {"question": "What are the names of the singers whose birth years are either 1948 or 1949?", "sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "source_tables": ["singer"]}}
