sample_id,db_id,question,gold_sql,source_tables,len_tbls,cate_len_tbls,gold_c,need_low|wrong,need_mid|wrong,need_high|wrong,virtual_table,description
train.56,student_assessment,which course has most number of registered students?,SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1,"['courses', 'student_course_registrations']",2,2,0.1679999999999999,False,True,False,SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of course names from the 'Courses' table, which are associated with student registrations. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return."
train.64,student_assessment,List the id of students who attended some courses?,SELECT student_id FROM student_course_attendance,['student_course_attendance'],1,1,0.0865882352941176,True,False,False,SELECT student_id FROM student_course_attendance,This virtual table describes the identifiers of students who have attended courses from the 'Student_Course_Attendance' table. The placeholder in the SELECT clause represents the unique student identifiers.
train.65,student_assessment,What are the ids of all students who have attended at least one course?,SELECT student_id FROM student_course_attendance,['student_course_attendance'],1,1,0.0865882352941176,True,False,False,SELECT student_id FROM student_course_attendance,This virtual table describes the identifiers of students who have attended courses from the 'Student_Course_Attendance' table. The placeholder in the SELECT clause represents the unique identifier for each student.
train.76,student_assessment,What is the id of the candidate who most recently accessed the course?,SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1,['candidate_assessments'],1,1,0.1119999999999999,True,False,False,SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of candidate IDs from the 'Candidate_Assessments' table, ordered by the date of assessment in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of candidate IDs to retrieve."
train.77,student_assessment,What is detail of the student who registered the most number of courses?,SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,"['student_course_registrations', 'students']",2,2,0.1679999999999999,False,True,False,SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of student details from the 'Students' table, specifically for those students who have registered for courses. The results are grouped by each student to ensure unique entries and are ordered by the number of course registrations in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of student details to return."
train.82,student_assessment,"For each course id, how many students are registered and what are the course names?","SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id","['courses', 'student_course_registrations', 'students']",3,3+,0.1807058823529412,False,False,True,"SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id","This virtual table summarizes the number of students registered for each course from the 'Courses' table. It joins the 'Students' table with the 'Student_Course_Registrations' table to link students to their course registrations, and then further joins with the 'Courses' table to retrieve the course names. The result is grouped by course ID to count the number of students per course."
train.90,student_assessment,What are the ids of the students who registered for course 301 most recently?,SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1,['student_course_attendance'],1,1,0.1679999999999999,False,True,False,SELECT student_id FROM student_course_attendance WHERE course_id = [PLACEHOLDER-TYPE:NUMBER] ORDER BY date_of_attendance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The results are ordered by the date of attendance in descending order, and the number of results returned is limited by a placeholder for numeric values."
train.93,student_assessment,Find distinct cities of address of students?,SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id,"['addresses', 'people_addresses', 'students']",3,3+,0.1119999999999999,True,False,False,SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id,"This virtual table provides a distinct list of cities where students are located, by joining the 'Addresses', 'People_Addresses', and 'Students' tables. The placeholders in the query represent the necessary identifiers for the relationships between these tables."
train.104,student_assessment,What are all details of the students who registered but did not attend any course?,SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance),"['student_course_attendance', 'student_course_registrations']",2,2,0.1171764705882353,True,False,False,SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance),"This virtual table provides a list of all course registrations for students who have not attended any courses. The query retrieves all columns from the 'student_course_registrations' table, filtering out students based on their attendance records using a subquery that checks for student IDs in the 'student_course_attendance' table."
train.105,student_assessment,List the id of students who registered course statistics in the order of registration date.,SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'statistics' ORDER BY T2.registration_date,"['courses', 'student_course_registrations']",2,2,0.1679999999999999,False,True,False,SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.registration_date,"This virtual table provides a list of student IDs from the 'Students' table who are registered for a specific course. The course is identified by its name, which is represented by a placeholder in the WHERE clause. The results are ordered by the date of registration, allowing for an organized view of when each student registered for the course."
train.106,student_assessment,What are the ids of the students who registered course statistics by order of registration date?,SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'statistics' ORDER BY T2.registration_date,"['courses', 'student_course_registrations']",2,2,0.1679999999999999,False,True,False,SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.registration_date,"This virtual table provides a list of student IDs from the 'Students' table who are registered for a specific course. The course is identified by its name, which is represented by a placeholder in the WHERE clause. The results are ordered by the date of registration, allowing for an organized view of when each student registered for the course."
train.123,bike_1,"For each zip code, return the average mean temperature of August there.","SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE '8/%' GROUP BY zip_code",['weather'],1,1,0.2367058823529411,False,False,True,"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code",This virtual table provides the average mean temperature in Fahrenheit for each zip code based on weather reports for a specific date. The placeholder in the WHERE clause represents the date for which the weather data is being queried.
train.135,bike_1,Which bike traveled the most often in zip code 94002?,SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1,['trip'],1,1,0.2239999999999999,False,False,True,SELECT bike_id FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER] GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of bike identifiers from the 'trip' table for users who started their trips from a specific zip code. The results are grouped by bike identifier and ordered by the number of trips taken with each bike, allowing users to see which bikes are most frequently used in that area. The placeholders in the WHERE clause represent the zip code of interest and the limit on the number of results to return."
train.136,bike_1,What is the id of the bike that traveled the most in 94002?,SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1,['trip'],1,1,0.2239999999999999,False,False,True,SELECT bike_id FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER] GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of bike identifiers from the 'trip' table for users who started their trips from a specific zip code. The results are grouped by bike identifier and ordered by the number of trips taken, allowing users to see which bikes are most frequently used in that area. The placeholders in the WHERE clause represent the zip code and the limit on the number of results to return."
train.143,bike_1,What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?,"SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE '12/%'","['status', 'station']",2,2,0.3449861371300111,False,False,True,"SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] UNION SELECT name ,  id FROM station WHERE installation_date LIKE [PLACEHOLDER-TYPE:STRING]","This virtual table provides a list of bike stations along with their unique identifiers. It includes stations that have an average number of available bikes exceeding a specified threshold, as well as stations that were installed on a specific date. The first part of the query retrieves the names and IDs of stations from the 'station' table that are joined with the 'status' table, filtering based on the average number of bikes available. The second part of the query retrieves names and IDs of stations from the 'station' table based on the installation date, using a placeholder for the date format."
train.144,bike_1,What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?,"SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE '12/%'","['status', 'station']",2,2,0.3449861371300111,False,False,True,"SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] UNION SELECT name ,  id FROM station WHERE installation_date LIKE [PLACEHOLDER-TYPE:STRING]","This virtual table provides a list of bike stations along with their unique identifiers. It includes stations that have an average number of available bikes exceeding a specified threshold, as well as stations that were installed on a specific date. The placeholders in the query allow users to specify the minimum average bikes available and the installation date criteria."
train.145,bike_1,What is the 3 most common cloud cover rates in the region of zip code 94107?,SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3,['weather'],1,1,0.2239999999999999,False,False,True,SELECT cloud_cover FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER] GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the cloud cover data from the 'weather' table for a specific zip code. The results are grouped by cloud cover values and ordered by the frequency of each cloud cover value, allowing users to see the most common cloud cover conditions for the specified area. The placeholders in the WHERE clause represent the zip code, and the LIMIT clause allows for specifying the maximum number of results to return."
train.161,bike_1,"For each trip, return its ending station's installation date.","SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id","['trip', 'station']",2,2,0.1247058823529411,True,False,False,"SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id","This virtual table provides a list of trip identifiers along with the installation dates of the bike stations where the trips ended. The data is sourced from the 'trip' table and the 'station' table, linked by the end station identifier."
train.162,bike_1,What is the installation date for each ending station on all the trips?,"SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id","['trip', 'station']",2,2,0.1247058823529411,True,False,False,"SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id","This virtual table provides a list of trip identifiers along with the installation dates of the bike stations where the trips ended. The data is sourced from the 'trip' table and the 'station' table, linked by the end station identifier."
train.163,bike_1,Which trip started from the station with the largest dock count? Give me the trip id.,SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1,"['trip', 'station']",2,2,0.1119999999999999,True,False,False,SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the unique identifiers of trips from the 'trip' table, specifically focusing on those that started at various bike stations. The results are ordered by the number of docks available at each station in descending order, allowing users to see which stations with the most docks are associated with the trips. The placeholder in the LIMIT clause represents the maximum number of trip identifiers to return."
train.165,bike_1,Count the number of trips that did not end in San Francisco city.,SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  'San Francisco',"['trip', 'station']",2,2,0.1425882352941176,True,False,False,SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  [PLACEHOLDER-TYPE:STRING],This virtual table counts the number of trips that ended at stations located in cities other than a specified city. The placeholder in the WHERE clause represents the name of the city to exclude from the count.
train.166,bike_1,How many trips did not end in San Francisco?,SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != 'San Francisco',"['trip', 'station']",2,2,0.1425882352941176,True,False,False,SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of trips that ended at stations located in cities other than a specified city. The placeholder in the WHERE clause represents the name of the city to exclude from the count.
train.167,bike_1,"In zip code 94107, on which day neither Fog nor Rain was not observed?",SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != 'Fog' AND EVENTS != 'Rain',['weather'],1,1,0.1388684900711877,True,False,False,SELECT date FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER] AND EVENTS != [PLACEHOLDER-TYPE:STRING] AND EVENTS != [PLACEHOLDER-TYPE:STRING],"This virtual table provides the dates of weather reports from the 'weather' table for a specific zip code, excluding certain weather events. The placeholders in the WHERE clause represent the zip code and the types of weather events to be filtered out."
train.168,bike_1,On which day has it neither been foggy nor rained in the zip code of 94107?,SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != 'Fog' AND EVENTS != 'Rain',['weather'],1,1,0.1388684900711877,True,False,False,SELECT date FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER] AND EVENTS != [PLACEHOLDER-TYPE:STRING] AND EVENTS != [PLACEHOLDER-TYPE:STRING],"This virtual table provides the dates of weather reports from the 'weather' table for a specific zip code, excluding certain weather events. The placeholders in the WHERE clause represent the zip code and the types of weather events to be filtered out."
train.183,bike_1,List all the cities in a decreasing order of each city's stations' highest latitude.,SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC,['station'],1,1,0.1679999999999999,False,True,False,SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC,"This virtual table provides a list of unique cities where bike stations are located, sorted by the maximum latitude of the stations in each city. The placeholder in the ORDER BY clause indicates that the cities will be ordered based on their geographical position from north to south."
train.184,bike_1,"For each city, list their names in decreasing order by their highest station latitude.",SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC,['station'],1,1,0.1679999999999999,False,True,False,SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC,"This virtual table provides a list of unique cities where bike stations are located, sorted by the maximum latitude of the stations in each city. The placeholder in the ORDER BY clause indicates that the cities will be ordered based on their geographical position, specifically the highest latitude."
train.189,bike_1,"For each station, return its longitude and the average duration of trips that started from the station.","SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id","['trip', 'station']",2,2,0.2065882352941176,False,True,False,"SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id","This virtual table provides the names and longitude coordinates of bike stations from the 'station' table, along with the average duration of trips that started at each station. The data is aggregated by the start station identifier, allowing users to see how long trips typically last from each location."
train.190,bike_1,"For each start station id, what is its name, longitude and average duration of trips started there?","SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id","['trip', 'station']",2,2,0.2065882352941176,False,True,False,"SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id","This virtual table provides the names and longitude coordinates of bike stations from the 'station' table, along with the average duration of trips that started at each station. The data is aggregated by the start station identifier, allowing users to see how long trips typically last from each location."
train.192,bike_1,"For each end station id, what is its name, latitude, and minimum duration for trips ended there?","SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id","['trip', 'station']",2,2,0.2065882352941176,False,True,False,"SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id","This virtual table provides the names and latitude coordinates of bike stations from the 'station' table, along with the minimum trip duration recorded for trips that ended at each station. The data is aggregated by the end station identifier, allowing users to see which stations have the shortest trip durations."
train.196,bike_1,What are all the different zip codes that have a maximum dew point that was always below 70?,SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70,['weather'],1,1,0.2239999999999999,False,False,True,SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of unique zip codes from the 'weather' table that do not have any recorded maximum dew point above a specified threshold. The placeholder in the query allows users to specify the maximum dew point value for filtering the results.
train.205,bike_1,Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.,SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100,"['weather', 'trip']",2,2,0.3068684900711876,False,False,True,SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table identifies zip codes where the average mean humidity is below a specified threshold and where the number of trips originating from those zip codes meets or exceeds a certain count. The placeholders in the HAVING clauses represent the humidity threshold and the minimum trip count, respectively."
train.206,bike_1,What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?,SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100,"['weather', 'trip']",2,2,0.3068684900711876,False,False,True,SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table identifies zip codes where the average mean humidity is below a specified threshold and where the number of trips originating from those zip codes meets or exceeds a certain count. The placeholders in the HAVING clauses represent the humidity threshold and the minimum trip count, respectively."
train.304,product_catalog,What are the attribute data types with more than 3 attribute definitions?,SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3,['attribute_definitions'],1,1,0.2195113122171945,False,False,True,SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a summary of the different data types defined in the 'Attribute_Definitions' table, specifically those that have more than a specified number of occurrences. The placeholder in the HAVING clause represents the minimum count of attributes required to be included in the results."
train.316,product_catalog,Find the entry names of the catalog with the attribute that have the most entries.,SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1),"['catalog_contents', 'catalog_contents_additional_attributes']",2,2,0.1985882352941176,False,False,True,SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]),This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have the most common attribute values associated with them. The placeholder in the LIMIT clause represents the number of top attribute values to consider.
train.317,product_catalog,What is the entry name of the most expensive catalog (in USD)?,SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1,['catalog_contents'],1,1,0.1119999999999999,True,False,False,SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of catalog entry names from the 'Catalog_Contents' table, ordered by their price in dollars in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of entries to retrieve."
train.330,product_catalog,What are the names of catalog entries with level number 8?,SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  '8',"['catalog_contents', 'catalog_contents_additional_attributes']",2,2,0.1425882352941176,False,True,False,SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that are associated with specific additional attributes. The placeholder in the WHERE clause represents the level number of the catalog entry, allowing users to filter results based on this attribute."
train.331,product_catalog,Find the names of the products with length smaller than 3 or height greater than 5.,SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5,['catalog_contents'],1,1,0.1807058823529412,False,True,False,SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  [PLACEHOLDER-TYPE:NUMBER] OR width  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of catalog entries from the 'Catalog_Contents' table where the length of the entry is less than a specified value or the width is greater than a specified value. The placeholders in the WHERE clause represent the numeric values for length and width.
train.332,product_catalog,Which catalog contents have length below 3 or above 5? Find the catalog entry names.,SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5,['catalog_contents'],1,1,0.1807058823529412,False,True,False,SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  [PLACEHOLDER-TYPE:NUMBER] OR width  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that meet specific dimensional criteria. The placeholders in the WHERE clause represent the maximum length and minimum width measurements for filtering the catalog entries.
train.338,product_catalog,On which days more than one revisions were made on catalogs.,SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1,['catalogs'],1,1,0.2195113122171945,False,False,True,SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the latest revision dates of catalogs from the 'Catalogs' table, grouped by the revision date. The placeholder in the HAVING clause represents the minimum count of catalogs that must share the same revision date to be included in the results."
train.388,flight_1,What are the origins of all flights that are headed to Honolulu?,SELECT origin FROM Flight WHERE destination  =  'Honolulu',['flight'],1,1,0.1425882352941176,True,False,False,SELECT origin FROM Flight WHERE destination  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the origins of flights from the 'Flight' table that are headed to a specific destination. The placeholder in the WHERE clause represents the destination's name.
train.390,flight_1,What are the departure and arrival dates of all flights from LA to Honolulu?,"SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  'Los Angeles' AND destination  =  'Honolulu'",['flight'],1,1,0.2016289592760181,False,False,True,"SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  [PLACEHOLDER-TYPE:STRING] AND destination  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the scheduled departure and arrival dates of flights from the 'Flight' table that originate from a specific location and head to a specific destination. The placeholders in the WHERE clause represent the origin and destination locations.
train.394,flight_1,What is the average price for flights from LA to Honolulu?,SELECT avg(price) FROM Flight WHERE origin  =  'Los Angeles' AND destination  =  'Honolulu',['flight'],1,1,0.1635113122171945,False,True,False,SELECT avg(price) FROM Flight WHERE origin  =  [PLACEHOLDER-TYPE:STRING] AND destination  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average ticket price for flights originating from a specific location and heading to a designated destination. The placeholders in the WHERE clause represent the origin and destination of the flights.
train.415,flight_1,Show aircraft names and number of flights for each aircraft.,"SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid","['aircraft', 'flight']",2,2,0.1807058823529412,False,False,True,"SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",This virtual table provides the names of aircraft along with the count of flights associated with each aircraft from the 'Flight' and 'Aircraft' tables. The placeholder in the SELECT statement allows for dynamic retrieval of aircraft names and their corresponding flight counts.
train.416,flight_1,What is the name of each aircraft and how many flights does each one complete?,"SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid","['aircraft', 'flight']",2,2,0.1807058823529412,False,False,True,"SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",This virtual table provides the names of aircraft along with the count of flights associated with each aircraft from the 'Flight' and 'Aircraft' tables. The placeholder in the SELECT statement allows for dynamic retrieval of aircraft names and their corresponding flight counts.
train.430,flight_1,What are the names of all employees who are not certified to fly Boeing 737-800s?,SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Boeing 737-800',"['employee', 'certificate', 'aircraft']",3,3+,0.2367058823529411,False,False,True,SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of employees from the 'Employee' table who do not hold a certificate for a specific aircraft model. The placeholder in the query represents the name of the aircraft model.
train.431,flight_1,Show the name of aircraft which fewest people have its certificate.,SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1,"['aircraft', 'certificate']",2,2,0.1679999999999999,False,True,False,SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the names of aircraft that have the most certificates associated with them. The query joins the 'Certificate' and 'Aircraft' tables based on the aircraft ID, groups the results by aircraft ID, and orders them by the count of certificates in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of results to return."
train.432,flight_1,What are the names of the aircraft that the least people are certified to fly?,SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1,"['aircraft', 'certificate']",2,2,0.1679999999999999,False,True,False,SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the names of aircraft that have the most certificates associated with them. The query joins the 'Certificate' and 'Aircraft' tables on the aircraft ID, groups the results by aircraft ID, and orders them by the count of certificates in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of aircraft names to return."
train.438,flight_1,What is the salaray and name of the employee with the most certificates to fly planes more than 5000?,SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1,"['employee', 'certificate', 'aircraft']",3,3+,0.2239999999999999,False,False,True,SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the names of employees who hold certificates for aircraft that can travel a distance greater than a specified value. The results are grouped by employee ID and ordered by the number of certificates held, with a limit on the number of results returned."
train.448,allergy_1,What are all the different food allergies?,SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  'food',['allergy_type'],1,1,0.1679999999999999,False,True,False,SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of distinct allergies from the 'Allergy_Type' table that belong to a specific category of allergies. The placeholder in the WHERE clause represents the type of allergy being queried.
train.452,allergy_1,How many animal type allergies exist?,SELECT count(*) FROM Allergy_type WHERE allergytype  =  'animal',['allergy_type'],1,1,0.1425882352941176,True,False,False,SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.
train.455,allergy_1,Which allergy type has most number of allergies?,SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1,['allergy_type'],1,1,0.1679999999999999,False,True,False,SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a summary of the different types of allergies categorized in the 'Allergy_Type' table. It groups the allergies by their type and orders them by the frequency of occurrence, allowing users to see the most common allergy types. The placeholder in the LIMIT clause represents the maximum number of allergy types to display."
train.458,allergy_1,Which allergy type is the least common?,SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1,['allergy_type'],1,1,0.1679999999999999,False,True,False,SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values."
train.462,allergy_1,What are the full names of all students,"SELECT Fname ,  Lname FROM Student",['student'],1,1,0.1247058823529411,True,False,False,"SELECT Fname ,  Lname FROM Student","The virtual table describes the first and last names of students from the 'Student' table. The query does not include any filtering conditions, allowing for the retrieval of all students' names."
train.472,allergy_1,What are the student ids for all male students?,SELECT StuID FROM Student WHERE Sex  =  'M',['student'],1,1,0.1425882352941176,True,False,False,SELECT StuID FROM Student WHERE Sex  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the unique identifiers of students from the 'Student' table who belong to a specific gender. The placeholder in the WHERE clause represents the gender of the students.
train.492,allergy_1,What is the largest major?,SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1,['student'],1,1,0.1679999999999999,False,True,False,SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of academic majors from the 'Student' table, grouped by the major name. The results are ordered by the number of students in each major in descending order, with a limit set by a placeholder for numeric values to specify how many top majors to return."
train.502,allergy_1,Give the advisor with the most students.,SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1,['student'],1,1,0.1679999999999999,False,True,False,SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of academic advisors from the 'Student' table, grouped by the advisor's name. The results are ordered by the number of students assigned to each advisor in descending order, with a limit on the number of advisors returned, specified by a placeholder for numeric values."
train.503,allergy_1,How many students have cat allergies?,SELECT count(*) FROM Has_allergy WHERE Allergy  =  'Cat',['has_allergy'],1,1,0.1425882352941176,True,False,False,SELECT count(*) FROM Has_allergy WHERE Allergy  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of students who have a specific allergy from the 'Has_Allergy' table. The placeholder in the WHERE clause represents the name of the allergy.
train.504,allergy_1,How many students are affected by cat allergies?,SELECT count(*) FROM Has_allergy WHERE Allergy  =  'Cat',['has_allergy'],1,1,0.1425882352941176,True,False,False,SELECT count(*) FROM Has_allergy WHERE Allergy  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of students who have a specific allergy from the 'Has_Allergy' table. The placeholder in the WHERE clause represents the name of the allergy.
train.510,allergy_1,How many students who are female are allergic to milk or eggs?,SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  'F' AND T1.allergy  =  'Milk' OR T1.allergy  =  'Eggs',"['has_allergy', 'student']",2,2,0.1807058823529412,False,True,False,SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  [PLACEHOLDER-TYPE:STRING] AND T1.allergy  =  [PLACEHOLDER-TYPE:STRING] OR T1.allergy  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the count of students who have specific allergies, filtered by their gender. The placeholders in the WHERE clause represent the gender of the students and the names of the allergies being queried."
train.514,allergy_1,Which allergy is the most common?,SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1,['has_allergy'],1,1,0.1679999999999999,False,True,False,SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of allergies from the 'Has_Allergy' table, grouped by the allergy name and ordered by the frequency of occurrence. The placeholder in the LIMIT clause allows the user to specify the maximum number of allergies to retrieve."
train.519,allergy_1,Find the last name and age of the student who has allergy to both milk and cat.,"SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')","['has_allergy', 'student']",2,2,0.2752941176470588,False,False,True,"SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  [PLACEHOLDER-TYPE:STRING])",This virtual table provides the last names and ages of students from the 'Student' table who have two specific allergies. The placeholders in the query represent the names of the allergies that are being checked for each student.
train.520,allergy_1,What are the last names and ages of the students who are allergic to milk and cat?,"SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')","['has_allergy', 'student']",2,2,0.2752941176470588,False,False,True,"SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  [PLACEHOLDER-TYPE:STRING])",This virtual table provides the last names and ages of students from the 'Student' table who have two specific allergies. The placeholders in the query represent the names of the allergies that are being checked for each student.
train.523,allergy_1,Find the first name and gender of the student who has allergy to milk but not cat.,"SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')","['has_allergy', 'student']",2,2,0.2752941176470588,False,False,True,"SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  [PLACEHOLDER-TYPE:STRING])",This virtual table provides the first names and gender of students from the 'Student' table who have a specific allergy but do not have another specified allergy. The placeholders in the subquery represent the names of the allergies being filtered.
train.524,allergy_1,What are the first name and gender of the students who have allergy to milk but can put up with cats?,"SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')","['has_allergy', 'student']",2,2,0.2752941176470588,False,False,True,"SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  [PLACEHOLDER-TYPE:STRING])",This virtual table provides the first names and gender of students from the 'Student' table who have a specific allergy but do not have another specified allergy. The placeholders in the subquery represent the names of the allergies being filtered.
train.525,allergy_1,Find the average age of the students who have allergies with food and animal types.,SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food' INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'animal'),"['has_allergy', 'allergy_type', 'student']",3,3+,0.2469325681492109,False,False,True,SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  [PLACEHOLDER-TYPE:STRING]),"This virtual table calculates the average age of students who have two specific types of allergies. The placeholders in the query represent the categories of allergies that the students have, allowing for flexible input to filter the results based on different allergy types."
train.528,allergy_1,What is the full name of each student who is not allergic to any type of food.,"SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food')","['has_allergy', 'allergy_type', 'student']",3,3+,0.2494117647058823,False,False,True,"SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  [PLACEHOLDER-TYPE:STRING])",This virtual table provides the first and last names of students from the 'Student' table who do not have a specific type of allergy. The placeholder in the subquery represents the allergy type that is being filtered out.
train.530,allergy_1,How many male students (sex is 'M') are allergic to any type of food?,SELECT count(*) FROM Student WHERE sex  =  'M' AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food'),"['has_allergy', 'allergy_type', 'student']",3,3+,0.2254567253653053,False,False,True,SELECT count(*) FROM Student WHERE sex  =  [PLACEHOLDER-TYPE:STRING] AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  [PLACEHOLDER-TYPE:STRING]),This virtual table counts the number of students from the 'Student' table who are of a specific gender and have a particular type of allergy. The placeholders in the WHERE clause represent the gender of the students and the type of allergy they have.
train.531,allergy_1,Find the different first names and cities of the students who have allergy to milk or cat.,"SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  'Milk' OR T2.Allergy  =  'Cat'","['has_allergy', 'student']",2,2,0.2270407239819004,False,False,True,"SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  [PLACEHOLDER-TYPE:STRING] OR T2.Allergy  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides a list of distinct first names and city codes of students who have specific allergies. The placeholders in the WHERE clause represent the names of the allergies being queried.
train.532,allergy_1,What are the distinct first names and cities of the students who have allergy either to milk or to cat?,"SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  'Milk' OR T2.Allergy  =  'Cat'","['has_allergy', 'student']",2,2,0.2270407239819004,False,False,True,"SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  [PLACEHOLDER-TYPE:STRING] OR T2.Allergy  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides a distinct list of first names and city codes of students who have specific allergies. The placeholders in the WHERE clause represent the names of the allergies that are being queried.
train.542,store_1,What are the names of the countries and average invoice size of the top countries by size?,"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;",['invoices'],1,1,0.2061176470588234,False,False,True,"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned."
train.564,store_1,How many invoices were billed from each state?,"SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  'USA' GROUP BY billing_state;",['invoices'],1,1,0.2367058823529411,False,False,True,"SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  [PLACEHOLDER-TYPE:STRING] GROUP BY billing_state;",This virtual table summarizes the number of invoices issued in each state for a specific country. The placeholder in the WHERE clause represents the name of the country for which the invoice data is being aggregated.
train.566,store_1,What are the states with the most invoices?,"SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  'USA' GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;",['invoices'],1,1,0.2621176470588234,False,False,True,"SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  [PLACEHOLDER-TYPE:STRING] GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table summarizes the number of invoices issued per state within a specific country. The placeholder in the WHERE clause represents the country for which the invoice counts are being aggregated, while the placeholder in the LIMIT clause specifies the maximum number of states to return, ordered by the count of invoices in descending order."
train.568,store_1,What is the number of invoices and total money billed in them from CA?,"SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  'CA';",['invoices'],1,1,0.2065882352941176,False,False,True,"SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  [PLACEHOLDER-TYPE:STRING];",This virtual table summarizes the total number of invoices and the total amount billed for a specific billing state from the 'invoices' table. The placeholder in the WHERE clause represents the billing state being queried.
train.575,store_1,What is Astrid Gruber's email and phone number?,"SELECT email ,  phone FROM customers WHERE first_name = 'Astrid' AND last_name = 'Gruber';",['customers'],1,1,0.2016289592760181,False,True,False,"SELECT email ,  phone FROM customers WHERE first_name = [PLACEHOLDER-TYPE:STRING] AND last_name = [PLACEHOLDER-TYPE:STRING];",This virtual table describes the email addresses and phone numbers of customers from the 'customers' table who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.
train.580,store_1,How many customers are from California?,SELECT count(*) FROM customers WHERE state = 'CA';,['customers'],1,1,0.1425882352941176,True,False,False,SELECT count(*) FROM customers WHERE state = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the total number of customers from the 'customers' table who reside in a specific state. The placeholder in the WHERE clause represents the state name.
train.593,store_1,Find the full name of employee who supported the most number of customers.,"SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1","['employees', 'customers']",2,2,0.2061176470588234,False,False,True,"SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the first and last names of employees who serve as support representatives for customers. The results are grouped by the employee's unique identifier and ordered by the number of customers they support in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.
train.608,store_1,How many orders does Luca Mancini have in his invoices?,SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = 'Lucas' AND T1.last_name = 'Mancini';,"['customers', 'invoices']",2,2,0.1635113122171945,False,True,False,SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];,"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer."
train.623,store_1,What is title of album which track Balls to the Wall belongs to?,SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = 'Balls to the Wall';,"['albums', 'tracks']",2,2,0.1425882352941176,True,False,False,SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the titles of albums from the 'albums' table that contain tracks of a specific name. The placeholder in the WHERE clause represents the name of the track.
train.626,store_1,What is the name of all tracks in the album named Balls to the Wall?,SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = 'Balls to the Wall';,"['albums', 'tracks']",2,2,0.1425882352941176,True,False,False,SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the names of tracks from the 'tracks' table that belong to a specific album title in the 'albums' table. The placeholder in the WHERE clause represents the title of the album.
train.630,store_1,What are the names of all Rock tracks that are stored on MPEG audio files?,SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' AND T3.name = 'MPEG audio file';,"['tracks', 'genres', 'media_types']",3,3+,0.1635113122171945,False,True,False,SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] AND T3.name = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre and media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.
train.632,store_1,What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?,SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' OR T3.name = 'MPEG audio file';,"['tracks', 'genres', 'media_types']",3,3+,0.1635113122171945,False,True,False,SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T3.name = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre or media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.
train.640,store_1,What are the tracks that Dean Peeters bought?,SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = 'Daan' AND T4.last_name = 'Peeters';,"['tracks', 'invoice_lines', 'customers', 'invoices']",4,3+,0.1635113122171945,False,True,False,SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = [PLACEHOLDER-TYPE:STRING] AND T4.last_name = [PLACEHOLDER-TYPE:STRING];,"This virtual table describes the names of tracks from the 'tracks' table that have been purchased by a specific customer. The query joins multiple tables to filter the results based on the customer's first and last names, represented by placeholders in the WHERE clause."
train.686,customers_card_transactions,What are the full names of customers who do not have any accounts?,"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id","['accounts', 'customers']",2,2,0.1807058823529412,False,True,False,"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.
train.688,customers_card_transactions,What are the full names of customers who have accounts?,"SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id","['accounts', 'customers']",2,2,0.1501176470588235,True,False,False,"SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",This virtual table provides a distinct list of first and last names of customers from the 'Customers' table who have associated accounts in the 'Accounts' table. The join condition links the customer to their respective account using the customer identifier.
train.704,customers_card_transactions,Return the full name and phone of the customer who has card number 4560596484842.,"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  '4560596484842'","['customers', 'customers_cards']",2,2,0.2065882352941176,False,False,True,"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  [PLACEHOLDER-TYPE:STRING]","This virtual table describes the first and last names, as well as the phone number of customers associated with a specific card number from the 'Customers' and 'Customers_Cards' tables. The placeholder in the WHERE clause represents the card number being queried."
train.717,customers_card_transactions,"What is the customer id, first and last name with least number of accounts.","SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1","['customers', 'customers_cards']",2,2,0.2319999999999999,False,False,True,"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for customers who have associated cards in the 'Customers_Cards' table. The results are grouped by customer ID and ordered by the count of associated cards in ascending order, with a limit on the number of results returned as specified by the placeholder."
train.718,customers_card_transactions,Return the id and full name of the customer who has the fewest accounts.,"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1","['customers', 'customers_cards']",2,2,0.2319999999999999,False,False,True,"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, based on the associated cards in the 'Customers_Cards' table. The results are grouped by customer ID and ordered by the count of associated cards in ascending order, with a limit specified by a placeholder for numeric values."
train.721,customers_card_transactions,What is the card type code with most number of cards?,SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1,['customers_cards'],1,1,0.1679999999999999,False,True,False,SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the different types of cards issued to customers by counting the occurrences of each card type. The placeholder in the LIMIT clause allows the user to specify the maximum number of card types to retrieve, sorted by the most common types first."
train.735,customers_card_transactions,Show the number of transaction types.,SELECT count(DISTINCT transaction_type) FROM Financial_Transactions,['financial_transactions'],1,1,0.1119999999999999,True,False,False,SELECT count(DISTINCT transaction_type) FROM Financial_Transactions,This virtual table provides a count of distinct transaction types recorded in the 'Financial_Transactions' table. The result will indicate how many unique types of transactions (such as debit or credit) have been made.
train.743,customers_card_transactions,What is the transaction type that has processed the greatest total amount in transactions?,SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1,['financial_transactions'],1,1,0.1679999999999999,False,True,False,SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the types of transactions recorded in the 'Financial_Transactions' table, grouping them by their type and ordering the results by the total amount of each transaction type in descending order. The placeholder in the LIMIT clause represents the maximum number of transaction types to display."
train.893,insurance_fnol,"What are the customer phone numbers under the policy ""Life Insurance""?",SELECT customer_phone FROM available_policies WHERE policy_type_code  =  'Life Insurance',['available_policies'],1,1,0.1425882352941176,True,False,False,SELECT customer_phone FROM available_policies WHERE policy_type_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the contact phone numbers of customers from the 'Available_Policies' table who have a specific type of insurance policy. The placeholder in the WHERE clause represents the policy type code.
train.895,insurance_fnol,Which policy type has the most records in the database?,SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1,['available_policies'],1,1,0.1679999999999999,False,True,False,SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the different types of insurance policies available in the 'Available_Policies' table. It groups the policies by their type code and orders them by the number of occurrences, allowing users to see the most common policy types. The placeholder in the LIMIT clause represents the maximum number of policy types to return."
train.897,insurance_fnol,What are all the customer phone numbers under the most popular policy type?,SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1),['available_policies'],1,1,0.1985882352941176,False,False,True,SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]),"This virtual table retrieves the contact phone numbers of customers from the 'Available_Policies' table who have the most common type of insurance policy. The placeholder in the subquery represents the limit for the number of policy types to consider, allowing users to specify how many of the top policy types they want to retrieve phone numbers for."
train.898,insurance_fnol,Find the phone numbers of customers using the most common policy type among the available policies.,SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1),['available_policies'],1,1,0.1985882352941176,False,False,True,SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]),"The virtual table describes the contact phone numbers of customers associated with the most common type of insurance policy from the 'Available_Policies' table. The placeholder in the subquery represents the limit for the number of policy types to consider, allowing the user to specify how many of the top policy types they want to retrieve."
train.1060,match_season,Show the players from college UCLA.,SELECT Player FROM match_season WHERE College  =  'UCLA',['match_season'],1,1,0.1425882352941176,True,False,False,SELECT Player FROM match_season WHERE College  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the players who participated in matches during a specific season and attended a particular college. The placeholder in the WHERE clause represents the name of the college.
train.1082,match_season,"Show the season, the player, and the name of the team that players belong to.","SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id","['team', 'match_season']",2,2,0.1505882352941176,False,True,False,"SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id","This virtual table provides a summary of match seasons, including the season name, player names, and their corresponding team names. The data is retrieved from the 'match_season' table, which is joined with the 'team' table to associate players with their teams."
train.1092,match_season,Show the country names and the corresponding number of players.,"SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name","['country', 'match_season']",2,2,0.1807058823529412,False,False,True,"SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name","This virtual table provides a count of matches played by players from each country, by joining the 'country' table with the 'match_season' table. The placeholder in the SELECT clause represents the country names, and the COUNT function aggregates the number of matches for each country."
train.1098,match_season,Show the top 3 most common colleges of players in match seasons.,SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3,['match_season'],1,1,0.1679999999999999,False,True,False,SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college and ordered by the number of players associated with each college, with a limit on the number of colleges returned as specified by the placeholder."
train.1099,match_season,What are the three colleges from which the most players are from?,SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3,['match_season'],1,1,0.1679999999999999,False,True,False,SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college and ordered by the number of players associated with each college, with a limit on the number of colleges returned based on the specified number."
train.1107,match_season,"Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.",SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  'Forward' INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  'Defender',"['country', 'match_season']",2,2,0.2195113122171945,False,False,True,SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING],"This virtual table identifies the names of countries represented by players who occupy a specific position in matches. It uses an intersection to find countries where players have the same position, allowing for a comparison of two different instances of that position. The placeholders in the query represent the position of the players being filtered."
train.1109,match_season,"Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.",SELECT College FROM match_season WHERE POSITION  =  'Midfielder' INTERSECT SELECT College FROM match_season WHERE POSITION  =  'Defender',['match_season'],1,1,0.2195113122171945,False,False,True,SELECT College FROM match_season WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT College FROM match_season WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the colleges attended by players who have played in two different positions during the match season. The placeholders in the WHERE clause represent the specific positions of the players being compared.
train.1222,apartment_rentals,"What are the booking start and end dates of the apartments with type code ""Duplex""?","SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  'Duplex'","['apartment_bookings', 'apartments']",2,2,0.1425882352941176,True,False,False,"SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the start dates of apartment bookings from the 'Apartment_Bookings' table for apartments of a specific type. The placeholder in the WHERE clause represents the apartment type code.
train.1224,apartment_rentals,What are the booking start and end dates of the apartments with more than 2 bedrooms?,"SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2","['apartment_bookings', 'apartments']",2,2,0.1425882352941176,True,False,False,"SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the start dates of apartment bookings from the 'Apartment_Bookings' table for apartments that have a specified number of bedrooms. The placeholder in the WHERE clause represents the minimum number of bedrooms required for the apartments being queried.
train.1225,apartment_rentals,Find the booking start date and end date for the apartments that have more than two bedrooms.,"SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2","['apartment_bookings', 'apartments']",2,2,0.1425882352941176,True,False,False,"SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the start dates of apartment bookings from the 'Apartment_Bookings' table for apartments that have a specified number of bedrooms. The placeholder in the WHERE clause represents the minimum number of bedrooms required for the apartments being queried.
train.1229,apartment_rentals,"Which apartments have bookings with status code ""Confirmed""? Return their apartment numbers.",SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  'Confirmed',"['apartment_bookings', 'apartments']",2,2,0.1679999999999999,False,True,False,SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.
train.1232,apartment_rentals,"Show the guest first names, start dates, and end dates of all the apartment bookings.","SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id","['apartment_bookings', 'guests']",2,2,0.1247058823529411,True,False,False,"SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id",This virtual table provides the first names of guests along with the start dates of their apartment bookings. The placeholders in the query allow for filtering or additional conditions to be applied as needed.
train.1234,apartment_rentals,"Show the start dates and end dates of all the apartment bookings made by guests with gender code ""Female"".","SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  'Female'","['apartment_bookings', 'guests']",2,2,0.1425882352941176,True,False,False,"SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the start dates of apartment bookings along with the corresponding booking end dates for guests filtered by a specific gender. The placeholders in the WHERE clause represent the gender code of the guests.
train.1238,apartment_rentals,Show the facility codes of apartments with more than 4 bedrooms.,SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4,"['apartments', 'apartment_facilities']",2,2,0.1425882352941176,True,False,False,SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the facility codes of apartments that have a specified number of bedrooms. The placeholder in the WHERE clause represents the minimum number of bedrooms required for the apartments.
train.1256,apartment_rentals,Show the top 3 apartment type codes sorted by the average number of rooms in descending order.,SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3,['apartments'],1,1,0.1679999999999999,False,True,False,SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a summary of the different types of apartments available in the 'Apartments' table, grouped by their type code. The results are ordered by the average number of rooms in each apartment type, allowing users to see which types of apartments are more spacious on average. The placeholder in the LIMIT clause represents the maximum number of apartment types to be displayed."
train.1258,apartment_rentals,"Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.","SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1",['apartments'],1,1,0.2319999999999999,False,False,True,"SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table summarizes the types of apartments available in the 'Apartments' table, displaying the apartment type code along with the count of bathrooms and bedrooms. The results are grouped by apartment type and ordered by the total number of rooms in descending order, with a limit on the number of results returned based on a specified number."
train.1261,apartment_rentals,Which apartment type code appears the most often?,SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1,['apartments'],1,1,0.1679999999999999,False,True,False,SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a summary of the different types of apartments available in the 'Apartments' table. It groups the apartments by their type code and orders them by the number of apartments of each type in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of apartment types to retrieve.
train.1262,apartment_rentals,Show the most common apartment type code among apartments with more than 1 bathroom.,SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1,['apartments'],1,1,0.2239999999999999,False,False,True,SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a summary of the types of apartments available in the 'Apartments' table that have a specified number of bathrooms. The results are grouped by the apartment type code and ordered by the count of apartments in each type, allowing users to see which types are most common based on the bathroom count criteria. The placeholders in the WHERE clause and LIMIT clause represent the minimum number of bathrooms and the maximum number of results to return, respectively."
train.1272,apartment_rentals,Show the apartment numbers of apartments with unit status availability of both 0 and 1.,SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1,"['view_unit_status', 'apartments']",2,2,0.2195113122171945,False,False,True,SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the apartment numbers from the 'Apartments' table that are available based on a specific availability status. The query uses an INTERSECT operation to find common apartment numbers that meet the availability criteria specified by the placeholders.
train.1294,soccer_1,How many leagues are there in England?,SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  'England',"['country', 'league']",2,2,0.1425882352941176,True,False,False,SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of leagues associated with a specific country from the 'Country' and 'League' tables. The placeholder in the WHERE clause represents the name of the country for which the league count is being queried.
train.1303,soccer_1,List all of the player ids with a height of at least 180cm and an overall rating higher than 85.,SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85,"['player_attributes', 'player']",2,2,0.2367058823529411,False,False,True,SELECT player_api_id FROM Player WHERE height  >=  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table identifies players from the 'Player' table who meet specific physical and skill criteria. The first part of the query filters players based on their height, while the second part filters players based on their overall skill rating. The intersection of these two sets of players is returned, represented by the player_api_id."
train.1304,soccer_1,List all of the ids for left-footed players with a height between 180cm and 190cm.,SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  'left',"['player_attributes', 'player']",2,2,0.2625882352941176,False,False,True,SELECT player_api_id FROM Player WHERE height  >=  [PLACEHOLDER-TYPE:NUMBER] AND height  <=  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies players based on their height and preferred foot. It retrieves the API identifiers of players from the 'Player' table whose height falls within a specified range and intersects this with players from the 'Player_Attributes' table who have a specific preferred foot. The placeholders in the query represent the height range and the preferred foot of the players.
train.1306,soccer_1,List the names and birthdays of the top five players in terms of potential.,"SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5","['player_attributes', 'player']",2,2,0.1710407239819004,False,True,False,"SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of unique player names and their birthdays from the 'Player' table, joined with the 'Player_Attributes' table to include only those players with their corresponding attributes. The results are ordered by the potential skill rating in descending order, and the number of results returned is limited by a specified placeholder for numeric values."
train.1511,insurance_and_eClaims,Which type of policy is most frequently used? Give me the policy type code.,SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1,['policies'],1,1,0.1679999999999999,False,True,False,SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the different types of insurance policies from the 'Policies' table, grouping them by their policy type code. The placeholder in the LIMIT clause allows the user to specify the maximum number of policy types to retrieve, sorted by the frequency of each type in descending order."
train.1513,insurance_and_eClaims,Find all the policy types that are used by more than 2 customers.,SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2,['policies'],1,1,0.2195113122171945,False,False,True,SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of unique insurance policy types from the 'Policies' table that have been issued more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of policies required to be included in the results.
train.1516,insurance_and_eClaims,What are the total amount and average amount paid in claim headers?,"SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers",['claim_headers'],1,1,0.1075113122171946,True,False,False,"SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers",This virtual table summarizes the total and average amounts paid for claims from the 'Claim_Headers' table. The placeholders in the SELECT clause represent the total and average of the 'amount_paid' column.
train.1518,insurance_and_eClaims,How much amount in total were claimed in the most recently created document?,SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1),"['claims_documents', 'claim_headers']",2,2,0.1985882352941176,False,False,True,SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT [PLACEHOLDER-TYPE:NUMBER]),This virtual table calculates the total amount claimed from the 'Claim_Headers' table for claims that have associated documents created on a specific date. The placeholder in the subquery represents the limit for selecting the created date of the documents.
train.1519,insurance_and_eClaims,What is the name of the customer who has made the largest amount of claim in a single claim?,SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers),"['policies', 'customers', 'claim_headers']",3,3+,0.1731764705882353,False,True,False,SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers),"This virtual table retrieves the detailed information about the customer associated with the claim that has the highest amount claimed. The query joins the 'Claim_Headers' table with the 'Policies' table to link claims to their respective policies, and then joins the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims."
train.1521,insurance_and_eClaims,What is the name of the customer who has made the minimum amount of payment in one claim?,SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers),"['policies', 'customers', 'claim_headers']",3,3+,0.1731764705882353,False,True,False,SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers),"This virtual table retrieves detailed information about customers associated with claims that have the minimum amount paid. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to their respective policies, and then joins with the 'Customers' table to get customer details. The placeholder in the WHERE clause represents the minimum amount paid for claims."
train.1531,insurance_and_eClaims,Find the names of the customers who have an deputy policy.,SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  'Deputy',"['policies', 'customers']",2,2,0.1679999999999999,False,True,False,SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of unique customer details from the 'Customers' table for those customers who hold a specific type of insurance policy. The placeholder in the WHERE clause represents the policy type code that is being queried.
train.1533,insurance_and_eClaims,Find the names of customers who either have an deputy policy or uniformed policy.,SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  'Deputy' OR t1.policy_type_code  =  'Uniform',"['policies', 'customers']",2,2,0.1889230769230769,False,False,True,SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING] OR t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of distinct customer details from the 'Customers' table for customers who hold insurance policies of specific types. The placeholders in the WHERE clause represent the policy type codes that are being queried.
train.1546,insurance_and_eClaims,Find the customer who started a policy most recently.,SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies),"['policies', 'customers']",2,2,0.1731764705882353,False,True,False,SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies),This virtual table retrieves the detailed information about customers who have the most recently started insurance policy from the 'Policies' table. The placeholder in the WHERE clause represents the condition to find the latest start date of the policy.
train.1553,customers_and_invoices,"Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.","SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'","['accounts', 'customers']",2,2,0.2245192697768762,False,False,True,"SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides details about customer accounts from the 'Accounts' table, including the account ID, the date the account was opened, the account name, and any additional account details. The results are filtered based on the first name of the customer from the 'Customers' table, represented by a placeholder for string values."
train.1556,customers_and_invoices,What are the names and other details for accounts corresponding to the customer named Meaghan Keeling?,"SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan' AND T2.customer_last_name  =  'Keeling'","['accounts', 'customers']",2,2,0.2016289592760181,False,False,True,"SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table describes the account names and additional details of accounts associated with customers from the 'Accounts' table, filtered by the first and last names of the customers. The placeholders in the WHERE clause represent the customer's first and last names."
train.1558,customers_and_invoices,What are the full names of customers with the account name 900?,"SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  '900'","['accounts', 'customers']",2,2,0.1807058823529412,False,True,False,"SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of customers associated with a specific account from the 'Accounts' and 'Customers' tables. The placeholder in the WHERE clause represents the name of the account.
train.1568,customers_and_invoices,Return the id and full name of the customer with the most accounts.,"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1","['accounts', 'customers']",2,2,0.2319999999999999,False,False,True,"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for those customers who have accounts. The results are grouped by customer ID and ordered by the number of accounts each customer has, with a limit on the number of results returned based on a specified number."
train.1579,customers_and_invoices,How many transaction does each account have? Show the number and account id.,"SELECT count(*) ,  account_id FROM Financial_transactions",['financial_transactions'],1,1,0.1247058823529411,True,False,False,"SELECT count(*) ,  account_id FROM Financial_transactions",This virtual table provides a count of financial transactions grouped by account ID from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the account ID for which the transaction count is being retrieved.
train.1589,customers_and_invoices,"Show the account name, id and the number of transactions for each account.","SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id","['accounts', 'financial_transactions']",2,2,0.2065882352941176,False,False,True,"SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id","This virtual table summarizes the total number of financial transactions associated with each account. It displays the account name and account ID from the 'Accounts' table, along with a count of transactions from the 'Financial_Transactions' table, grouped by account ID."
train.1599,customers_and_invoices,Show the invoice number and the number of transactions for each invoice.,"SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number",['financial_transactions'],1,1,0.1807058823529412,False,True,False,"SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number","This virtual table summarizes the total number of financial transactions associated with each invoice from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the invoice number, and the count function aggregates the number of transactions per invoice."
train.1602,customers_and_invoices,What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?,"SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1","['invoices', 'financial_transactions']",2,2,0.2061176470588234,False,False,True,"SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of invoice numbers and their corresponding invoice dates from the 'Invoices' table, filtered by the number of financial transactions associated with each invoice. The placeholder in the LIMIT clause represents the maximum number of records to return."
train.1617,customers_and_invoices,Show the order ids and the number of items in each order.,"SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",['order_items'],1,1,0.1807058823529412,False,True,False,"SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id","This virtual table summarizes the total number of items in each order from the 'Order_Items' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function calculates the total number of items associated with each order."
train.2049,party_people,Show all ministers who do not belong to Progress Party.,SELECT minister FROM party WHERE party_name != 'Progress Party',['party'],1,1,0.1425882352941176,True,False,False,SELECT minister FROM party WHERE party_name != [PLACEHOLDER-TYPE:STRING],"This virtual table describes the ministers associated with political parties from the 'party' table, excluding a specific party name. The placeholder in the WHERE clause represents the name of the party to be excluded."
train.2058,party_people,How many members are in each party?,"SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id","['party', 'member']",2,2,0.1807058823529412,False,False,True,"SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",This virtual table summarizes the number of members associated with each political party from the 'Member' and 'Party' tables. The placeholder in the SELECT statement allows for the retrieval of the party name and the count of members belonging to that party.
train.2071,party_people,Show party names and the number of events for each party.,"SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id","['party', 'party_events']",2,2,0.1807058823529412,False,False,True,"SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id","This virtual table summarizes the number of events organized by each political party from the 'party_events' table. It joins the 'party' table to retrieve the party names associated with the events. The placeholder in the SELECT statement represents the party name, while the count function aggregates the total number of events for each party."
train.2081,party_people,How many Annual Meeting events happened in the United Kingdom region?,SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  'United Kingdom' AND t3.Event_Name  =  'Annaual Meeting',"['party', 'party_events', 'region']",3,3+,0.1635113122171945,False,True,False,SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  [PLACEHOLDER-TYPE:STRING] AND t3.Event_Name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a count of party events associated with a specific region and event name. It joins the 'region', 'party', and 'party_events' tables to filter the results based on the specified region name and event name. The placeholders in the WHERE clause represent the region's name and the event's name."
train.2176,formula_1,What are the names and years of all races that had a driver with the last name Lewis?,"SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = 'Lewis'","['results', 'drivers', 'races']",3,3+,0.1807058823529412,False,True,False,"SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and years of races from the 'races' table that a specific driver participated in. The placeholder in the WHERE clause represents the driver's first name.
train.2182,formula_1,What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?,"SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = 'Australian Grand Prix' EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = 'Chinese Grand Prix'","['races', 'drivers', 'results']",3,3+,0.2576289592760181,False,False,True,"SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = [PLACEHOLDER-TYPE:STRING]","This virtual table describes the first and last names of drivers who participated in a specific race, excluding those who also participated in another specified race. The placeholders in the WHERE clause represent the names of the races."
train.2183,formula_1,Find all the forenames of distinct drivers who was in position 1 as standing and won?,SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1,"['drivers', 'driverstandings']",2,2,0.1889230769230769,False,True,False,SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = [PLACEHOLDER-TYPE:NUMBER] AND T2.wins = [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of distinct first names of drivers from the 'drivers' table who have achieved a specific position in the standings and have a certain number of wins. The placeholders in the WHERE clause represent the desired position and the number of wins.
train.2185,formula_1,Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?,SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20,"['drivers', 'driverstandings']",2,2,0.22028025477707,False,False,True,SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = [PLACEHOLDER-TYPE:NUMBER] AND T2.wins = [PLACEHOLDER-TYPE:NUMBER] AND T2.points > [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of distinct first names of drivers from the 'drivers' table who have a specific position in the standings, a certain number of wins, and more points than a specified threshold. The placeholders in the WHERE clause represent the position, number of wins, and points criteria."
train.2186,formula_1,What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?,SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20,"['drivers', 'driverstandings']",2,2,0.22028025477707,False,False,True,SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = [PLACEHOLDER-TYPE:NUMBER] AND T2.wins = [PLACEHOLDER-TYPE:NUMBER] AND T2.points > [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of distinct first names of drivers from the 'drivers' table who have a specific position in the standings, a certain number of wins, and have scored more points than a specified threshold. The placeholders in the WHERE clause represent the position, number of wins, and points criteria."
train.2189,formula_1,What are the numbers of races for each constructor id?,"SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",['constructorstandings'],1,1,0.1807058823529412,False,True,False,"SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid","This virtual table provides a count of the total number of constructor standings for each constructor from the 'constructorStandings' table. The placeholder in the SELECT statement represents the constructor's identifier, which is grouped to show the total standings for each constructor."
train.2218,formula_1,What are the names of all the Japanese constructors that have earned more than 5 points?,SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = 'Japanese' AND T2.points > 5,"['constructorstandings', 'constructors']",2,2,0.1807058823529412,False,True,False,SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = [PLACEHOLDER-TYPE:STRING] AND T2.points > [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of constructors from the 'constructors' table who have a specific nationality and have scored more than a certain number of points in the constructor standings. The placeholders in the WHERE clause represent the constructor's nationality and the points threshold.
train.2220,formula_1,What is the average fastest lap speed for the Monaco Grand Prix in 2008?,SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Monaco Grand Prix',"['races', 'results']",2,2,0.1635113122171945,True,False,False,SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = [PLACEHOLDER-TYPE:NUMBER] AND T1.name = [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average fastest lap speed from the 'results' table for races that occurred in a specific year and have a particular name. The placeholders in the WHERE clause represent the year of the race and the name of the race.
train.2221,formula_1,What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?,SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Monaco Grand Prix',"['races', 'results']",2,2,0.1635113122171945,True,False,False,SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = [PLACEHOLDER-TYPE:NUMBER] AND T1.name = [PLACEHOLDER-TYPE:STRING],This virtual table provides the maximum fastest lap speed recorded during races held in a specific year and with a specific race name. The placeholders in the WHERE clause represent the year of the race and the official name of the race.
train.2222,formula_1,What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?,SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Monaco Grand Prix',"['races', 'results']",2,2,0.1635113122171945,True,False,False,SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = [PLACEHOLDER-TYPE:NUMBER] AND T1.name = [PLACEHOLDER-TYPE:STRING],This virtual table provides the maximum fastest lap speed recorded during races in a specific year and for a specific race name. The placeholders in the WHERE clause represent the year of the race and the official name of the race.
train.2224,formula_1,"For each race name, What is the maximum fastest lap speed for races after 2004 ordered by year?","SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year","['races', 'results']",2,2,0.2879999999999999,False,False,True,"SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.name ORDER BY T1.year","This virtual table provides the maximum fastest lap speed recorded for each race, along with the official name of the race and the year it took place. The placeholder in the WHERE clause represents the year threshold for filtering the races."
train.2225,formula_1,What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?,"SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year","['races', 'results']",2,2,0.2879999999999999,False,False,True,"SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.name ORDER BY T1.year","This virtual table provides the average fastest lap speed of races from the 'races' table, grouped by the race name and year. The placeholder in the WHERE clause represents the year threshold, allowing users to filter races that occurred after a specific year."
train.2226,formula_1,"What is the average fastest lap speed for races held after 2004, for each race, ordered by year?","SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year","['races', 'results']",2,2,0.2879999999999999,False,False,True,"SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.name ORDER BY T1.year","This virtual table provides the average fastest lap speed of races from the 'races' table, grouped by the race name and year. The placeholder in the WHERE clause represents a specific year, allowing users to filter for races that occurred after that year."
train.2243,machine_repair,What is the starting year of the oldest technicians?,SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1,['technician'],1,1,0.1119999999999999,True,False,False,SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the starting years of technicians from the 'technician' table, ordered by their age in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return."
train.2248,machine_repair,What are the teams with the most technicians?,SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1,['technician'],1,1,0.1679999999999999,False,True,False,SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of technician teams from the 'technician' table, grouped by team and ordered by the number of technicians in each team. The placeholder in the LIMIT clause allows for specifying the maximum number of teams to display."
train.2258,machine_repair,What are the names of the technicians  and how many machines are they assigned to repair?,"SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name","['repair_assignment', 'technician']",2,2,0.1807058823529412,False,False,True,"SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name","This virtual table provides the names of technicians along with the count of repair tasks they have been assigned to. The data is aggregated from the 'repair_assignment' table, which links technicians to their respective repair tasks, and the 'technician' table, which contains the details of each technician."
train.2328,csu_1,Find all the campuses opened in 1958.,SELECT campus FROM campuses WHERE YEAR  =  1958,['campuses'],1,1,0.1425882352941176,True,False,False,SELECT campus FROM campuses WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of campuses from the 'Campuses' table that have records for a specific year. The placeholder in the WHERE clause represents the year for which the campus data is being queried.
train.2334,csu_1,"Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.",SELECT campus FROM campuses WHERE LOCATION  =  'Northridge' AND county  =  'Los Angeles' UNION SELECT campus FROM campuses WHERE LOCATION  =  'San Francisco' AND county  =  'San Francisco',['campuses'],1,1,0.2508684900711876,False,False,True,SELECT campus FROM campuses WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING] AND county  =  [PLACEHOLDER-TYPE:STRING] UNION SELECT campus FROM campuses WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING] AND county  =  [PLACEHOLDER-TYPE:STRING],"This virtual table retrieves the names of campuses located in a specific geographical location and county. The query combines results from two identical selections, allowing for the possibility of filtering by different criteria in the future. The placeholders in the WHERE clauses represent the location and county names."
train.2350,csu_1,Which campus has the most faculties in year 2003?,SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1,"['faculty', 'campuses']",2,2,0.1679999999999999,False,True,False,SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T2.faculty DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the campuses from the 'Campuses' table that have faculty data for a specific year. The campuses are ordered by the number of faculty members in descending order, and the result is limited to a specified number of campuses. The placeholders in the WHERE clause and LIMIT clause represent the year of the faculty data and the maximum number of campuses to return, respectively."
train.2356,csu_1,report the total number of degrees granted between 1998 and 2002.,"SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus","['degrees', 'campuses']",2,2,0.2748235294117647,False,False,True,"SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  [PLACEHOLDER-TYPE:NUMBER] AND T2.year  <=  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.campus",This virtual table summarizes the total number of degrees awarded for each campus over a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the degree records.
train.2359,csu_1,What is the total number of degrees granted after 2000 for each Orange county campus?,"SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  'Orange' AND T2.year  >=  2000 GROUP BY T1.campus","['degrees', 'campuses']",2,2,0.2748235294117647,False,False,True,"SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  [PLACEHOLDER-TYPE:STRING] AND T2.year  >=  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.campus","This virtual table summarizes the total number of degrees awarded by each campus located in a specific county, filtering for degrees awarded from a certain year onwards. The placeholders in the WHERE clause represent the county name and the year threshold."
train.2362,csu_1,What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?,SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200,"['enrollments', 'campuses']",2,2,0.1948684900711876,False,False,True,SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  [PLACEHOLDER-TYPE:NUMBER] AND totalenrollment_ay  >  [PLACEHOLDER-TYPE:NUMBER] AND FTE_AY  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table identifies campuses from the 'Campuses' table that have a specific number of total enrollments and full-time equivalent enrollments for a given academic year. The placeholders in the WHERE clause represent the year, total enrollment threshold, and full-time equivalent enrollment threshold."
train.2363,csu_1,"What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?",SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200,"['enrollments', 'campuses']",2,2,0.1948684900711876,False,False,True,SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  [PLACEHOLDER-TYPE:NUMBER] AND totalenrollment_ay  >  [PLACEHOLDER-TYPE:NUMBER] AND FTE_AY  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the campuses from the 'Campuses' table that have total enrollments exceeding a specified number and full-time equivalent enrollments exceeding another specified number for a given academic year. The placeholders in the WHERE clause represent the year, total enrollment threshold, and full-time equivalent enrollment threshold."
train.2366,csu_1,List the campuses in Los Angeles county.,SELECT campus FROM campuses WHERE county  =  'Los Angeles',['campuses'],1,1,0.1425882352941176,True,False,False,SELECT campus FROM campuses WHERE county  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the campuses located in a specific county from the 'Campuses' table. The placeholder in the WHERE clause represents the name of the county.
train.2368,csu_1,"How many degrees were conferred in ""San Jose State University"" in 2000?",SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  'San Jose State University' AND t2.year  =  2000,"['degrees', 'campuses']",2,2,0.1635113122171945,True,False,False,SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the types of degrees awarded at a specific campus for a given year. The placeholders in the WHERE clause represent the campus name and the year of the degrees awarded.
train.2374,csu_1,"What is the number of faculty lines in campus ""Long Beach State University"" in 2002?",SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  'Long Beach State University',"['faculty', 'campuses']",2,2,0.1635113122171945,True,False,False,SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the number of faculty members from the 'faculty' table for a specific campus and year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.
train.2376,csu_1,"How many faculty lines are there in ""San Francisco State University"" in year 2004?",SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  'San Francisco State University',"['faculty', 'campuses']",2,2,0.1635113122171945,True,False,False,SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the number of faculty members from the 'faculty' table for a specific campus and year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.
train.2377,csu_1,How many faculty lines are there at San Francisco State University in 2004?,SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  'San Francisco State University',"['faculty', 'campuses']",2,2,0.1635113122171945,True,False,False,SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the number of faculty members from the 'faculty' table for a specific campus and year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.
train.2381,csu_1,How many faculty members did the university that conferred the most degrees in 2002 have?,SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1,"['faculty', 'degrees', 'campuses']",3,3+,0.1679999999999999,False,True,False,SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY t3.degrees DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the number of faculty members from the 'faculty' table for each campus, filtered by a specific year. It joins the 'campuses' table to associate each faculty record with its corresponding campus and also joins the 'degrees' table to ensure that the faculty data corresponds to the same year as the degrees awarded. The results are ordered by the number of degrees awarded in descending order, and the output is limited to a specified number of records."
train.2382,csu_1,How many faculty lines are there in the university that conferred the least number of degrees in year 2001?,SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1,"['faculty', 'degrees', 'campuses']",3,3+,0.1679999999999999,False,True,False,SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY t3.degrees LIMIT [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the number of faculty members from the 'faculty' table for campuses that have awarded degrees in a specific year. The query joins the 'campuses' table with the 'faculty' and 'degrees' tables based on the campus identifier and filters the results for a particular year. The placeholders in the WHERE clause and LIMIT clause allow for dynamic input of the year and the number of results to return.
train.2383,csu_1,How many faculty members are at the university that gave the least number of degrees in 2001?,SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1,"['faculty', 'degrees', 'campuses']",3,3+,0.1679999999999999,False,True,False,SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY t3.degrees LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the number of faculty members from the 'faculty' table for each campus, filtered by a specific year. It joins the 'campuses' table to associate campuses with their respective faculty data and the 'degrees' table to ensure that the faculty data corresponds to the same year as the degrees awarded. The placeholders in the WHERE clause represent the year of interest and the limit for the number of results returned."
train.2385,csu_1,How many undergraduates are there at San Jose State,SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  'San Jose State University',"['discipline_enrollments', 'campuses']",2,2,0.1635113122171945,True,False,False,SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the total number of undergraduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.
train.2397,candidate_poll,Return the poll resource associated with the most candidates.,SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1,['candidate'],1,1,0.1679999999999999,False,True,False,SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of poll sources from the 'candidate' table, grouped by the source and ordered by the number of occurrences. The placeholder in the LIMIT clause allows the user to specify the maximum number of poll sources to retrieve."
train.2405,candidate_poll,Return the poll source corresponding to the candidate who has the oppose rate.,SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1,['candidate'],1,1,0.1119999999999999,True,False,False,SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of poll sources from the 'candidate' table, ordered by the opposition rate in descending order. The placeholder in the LIMIT clause indicates the maximum number of poll sources to return."
train.2417,candidate_poll,"For each sex, what is the name and sex of the candidate with the oppose rate for their sex?","SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex","['candidate', 'people']",2,2,0.2065882352941176,False,False,True,"SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex","This virtual table provides the names and genders of individuals from the 'people' table, along with the minimum opposition rate from the 'candidate' table for each gender. The data is aggregated by gender, allowing for a comparison of the lowest opposition rates among different genders."
train.2434,movie_1,Find the titles of all movies directed by steven spielberg.,SELECT title FROM Movie WHERE director = 'Steven Spielberg',['movie'],1,1,0.1425882352941176,True,False,False,SELECT title FROM Movie WHERE director = [PLACEHOLDER-TYPE:STRING],This virtual table describes the titles of movies from the 'Movie' table that were directed by a specific director. The placeholder in the WHERE clause represents the director's name.
train.2461,movie_1,What are the different names of all reviewers whose ratings do not have a date field?,SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  'null',"['rating', 'reviewer']",2,2,0.1679999999999999,True,False,False,SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  [PLACEHOLDER-TYPE:STRING],"This virtual table lists the distinct names of reviewers who submitted ratings on a specific date. The query joins the 'Reviewer' and 'Rating' tables based on the reviewer's ID, filtering the results by the date of the rating submission."
train.2476,movie_1,Find the names of all reviewers who rated Gone with the Wind.,SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind',"['rating', 'movie', 'reviewer']",3,3+,0.1679999999999999,True,False,False,SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.
train.2483,movie_1,What are the names of all the reviewers and movie names?,SELECT name FROM Reviewer UNION SELECT title FROM Movie,"['movie', 'reviewer']",2,2,0.1807058823529412,False,True,False,SELECT name FROM Reviewer UNION SELECT title FROM Movie,"This virtual table combines the names of reviewers and the titles of movies from the 'Reviewer' and 'Movie' tables, respectively. The use of UNION allows for a single list that includes both reviewers and movie titles."
train.2495,movie_1,"For each director, how many reviews have they received?","SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director","['rating', 'movie']",2,2,0.1807058823529412,False,True,False,"SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director","This virtual table provides a count of ratings for each movie director from the 'Movie' and 'Rating' tables. The placeholder in the SELECT statement represents the count of ratings, while the grouping is done by the director's name."
train.2500,movie_1,What are the names and years of the movies that has the top 3 highest rating star?,"SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3","['rating', 'movie']",2,2,0.1501176470588235,True,False,False,"SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of movie titles and their release years from the 'Movie' table, ordered by the number of stars given in ratings from the 'Rating' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of results to return."
train.2502,movie_1,"For each director, return the director's name together with the title of the movie they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.","SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != 'null' GROUP BY director","['rating', 'movie']",2,2,0.2723443328550932,False,False,True,"SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != [PLACEHOLDER-TYPE:STRING] GROUP BY director","This virtual table provides a summary of movie ratings, showing the title of the movie, the number of stars given, and the director's name, while excluding movies directed by a specific individual. The placeholder in the WHERE clause represents the name of the director to be excluded from the results."
train.2503,movie_1,"For each director, what are the titles and ratings for all the movies they reviewed?","SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != 'null' GROUP BY director","['rating', 'movie']",2,2,0.2723443328550932,False,False,True,"SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != [PLACEHOLDER-TYPE:STRING] GROUP BY director","This virtual table provides a summary of movie ratings, showing the title of the movie, the number of stars given, and the director's name, while excluding movies directed by a specific individual. The placeholder in the WHERE clause represents the director's name that should be excluded from the results."
train.2505,movie_1,"For each reviewer id, what is the title and rating for the movie with the smallest rating?","SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID","['rating', 'movie']",2,2,0.2163443328550932,False,False,True,"SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID","This virtual table provides a summary of movie ratings by reviewers. It displays the title of the movie, the unique identifier of the reviewer, the number of stars given in the rating, and the minimum stars given by each reviewer for the movies they rated. The placeholders in the query allow for dynamic filtering based on specific reviewer IDs and movie titles."
train.2507,movie_1,"For each director, what is the title and score of their most poorly rated movie?","SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director","['rating', 'movie']",2,2,0.2163443328550932,False,False,True,"SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director","This virtual table provides a summary of movie ratings, displaying the title of each movie, the number of stars given in the rating, the director of the movie, and the minimum star rating for each director. The data is aggregated by director, allowing for a comparison of the lowest ratings received by movies directed by the same individual."
train.2508,movie_1,What is the name of the movie that is rated by most of times?,"SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1","['rating', 'movie']",2,2,0.2061176470588234,False,True,False,"SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of movie titles along with their unique identifiers from the 'Movie' table. The results are filtered based on the number of ratings received, showing only the top-rated movies. The placeholder in the LIMIT clause represents the maximum number of movies to display."
train.2509,movie_1,What is the name of the movie that has been reviewed the most?,"SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1","['rating', 'movie']",2,2,0.2061176470588234,False,True,False,"SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of movie titles along with their unique identifiers from the 'Movie' table. The results are filtered based on the number of ratings each movie has received, sorted in descending order, and limited to a specified number of top-rated movies. The placeholder in the LIMIT clause represents the maximum number of movies to return."
train.2517,movie_1,What are the ids of all moviest hat have not been reviewed by Britanny Harris?,SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  'Brittany Harris',"['rating', 'reviewer']",2,2,0.1985882352941176,False,True,False,SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table identifies the unique movie identifiers from the 'Rating' table that have not been rated by a specific reviewer. The placeholder in the query represents the reviewer's name, allowing users to filter out movies rated by that individual."
train.2518,movie_1,Find the average rating star for each movie that received at least 2 ratings.,"SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",['rating'],1,1,0.2576289592760181,False,False,True,"SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the unique movie identifiers along with the average star ratings from the 'Rating' table. It filters the results to include only those movies that have received a minimum number of ratings, as specified by the placeholder."
train.2528,movie_1,What are the names of reviewers who had rated 3 star and 4 star?,SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4,"['rating', 'reviewer']",2,2,0.2195113122171945,False,False,True,SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of reviewers who have given a specific number of stars to movies. The query uses an INTERSECT operation to find reviewers who rated two different movies with the same star rating. The placeholders in the WHERE clause represent the number of stars given in the ratings.
train.2530,movie_1,What are the names of movies that get 3 star and 4 star?,SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4,"['rating', 'movie']",2,2,0.2195113122171945,False,False,True,SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the titles of movies that have received a specific number of stars from two different reviewers. The placeholders in the WHERE clause represent the star ratings given by the reviewers.
train.2576,inn_1,Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.,SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;,"['rooms', 'reservations']",2,2,0.1679999999999999,False,True,False,SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];,This virtual table provides the names of the most frequently reserved rooms from the 'Rooms' table based on the reservations made in the 'Reservations' table. The placeholder in the LIMIT clause represents the maximum number of room names to return.
train.2577,inn_1,Which room has the largest number of reservations?,SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;,"['rooms', 'reservations']",2,2,0.1679999999999999,False,True,False,SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];,This virtual table provides the names of the most frequently reserved rooms from the 'Rooms' table based on the reservations made in the 'Reservations' table. The placeholder in the LIMIT clause represents the maximum number of room names to return.
train.2578,inn_1,How many kids stay in the rooms reserved by ROY SWEAZY?,SELECT kids FROM Reservations WHERE FirstName = 'ROY' AND LastName  =  'SWEAZY';,['reservations'],1,1,0.1635113122171945,False,True,False,SELECT kids FROM Reservations WHERE FirstName = [PLACEHOLDER-TYPE:STRING] AND LastName  =  [PLACEHOLDER-TYPE:STRING];,This virtual table provides the number of kids associated with reservations made by a specific guest. The placeholders in the WHERE clause represent the first and last names of the guest.
train.2582,inn_1,"Which room has the highest rate? List the room's full name, rate, check in and check out date.","SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;","['rooms', 'reservations']",2,2,0.2499310344827585,False,False,True,"SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of room names along with their corresponding reservation rates, check-in, and check-out dates. The data is sourced from the 'Reservations' and 'Rooms' tables, where the room identifier in reservations is linked to the unique room identifier in the rooms table. The results are grouped by room to ensure unique entries and are ordered by the reservation rate in descending order, with a limit on the number of results returned based on a specified number."
train.2583,inn_1,"Return the name, rate, check in and check out date for the room with the highest rate.","SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;","['rooms', 'reservations']",2,2,0.2499310344827585,False,False,True,"SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of room names along with their corresponding reservation rates, check-in, and check-out dates. The data is sourced from the 'Reservations' and 'Rooms' tables, where the room identifier in reservations is linked to the unique room identifier in the rooms table. The results are grouped by room to ensure each room appears only once, sorted by the reservation rate in descending order, and limited to a specified number of entries."
train.2589,inn_1,Find the total number of king beds available.,SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';,['rooms'],1,1,0.1425882352941176,True,False,False,SELECT sum(beds) FROM Rooms WHERE bedtype  =  [PLACEHOLDER-TYPE:STRING];,This virtual table calculates the total number of beds available in rooms of a specific bed type from the 'Rooms' table. The placeholder in the WHERE clause represents the type of beds being queried.
train.2590,inn_1,List the names and decor of rooms that have a king bed. Sort the list by their price.,"SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;",['rooms'],1,1,0.2061176470588234,False,False,True,"SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  [PLACEHOLDER-TYPE:STRING] ORDER BY basePrice;","This virtual table describes the names and decor of rooms from the 'Rooms' table that have a specific type of bed. The placeholder in the WHERE clause represents the bed type being queried, and the results are ordered by the base price of the rooms."
train.2594,inn_1,What is the decor of room Recluse and defiance?,SELECT decor FROM Rooms WHERE roomName  =  'Recluse and defiance';,['rooms'],1,1,0.1425882352941176,True,False,False,SELECT decor FROM Rooms WHERE roomName  =  [PLACEHOLDER-TYPE:STRING];,This virtual table describes the decor of a specific room from the 'Rooms' table based on the room's name. The placeholder in the WHERE clause represents the name of the room being queried.
train.2604,inn_1,Find the first and last names of people who payed more than the rooms' base prices.,"SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0","['rooms', 'reservations']",2,2,0.1807058823529412,False,True,False,"SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the first and last names of guests from the 'Reservations' table who have a reservation rate that exceeds the base price of the room they booked. The placeholder in the WHERE clause represents the difference in price that is being queried.
train.2609,inn_1,How many rooms have a king bed?,SELECT count(*) FROM Rooms WHERE bedType  =  'King';,['rooms'],1,1,0.1425882352941176,True,False,False,SELECT count(*) FROM Rooms WHERE bedType  =  [PLACEHOLDER-TYPE:STRING];,This virtual table provides the count of rooms from the 'Rooms' table that have a specific type of bed. The placeholder in the WHERE clause represents the type of bed being queried.
train.2612,inn_1,Find the name of the room with the maximum occupancy.,SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;,['rooms'],1,1,0.1119999999999999,True,False,False,SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table lists the names of rooms from the 'Rooms' table, ordered by their maximum occupancy in descending order. The placeholder in the LIMIT clause represents the maximum number of room names to be displayed."
train.2621,inn_1,What is the average minimum and price of the rooms for each different decor.,"SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;",['rooms'],1,1,0.1948684900711876,False,False,True,"SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;","This virtual table provides a summary of the average and minimum base prices of rooms, grouped by their decor descriptions. The placeholders represent the decor type and pricing information."
train.2628,inn_1,List the name of rooms with king or queen bed.,SELECT roomName FROM Rooms WHERE bedType  =  'King' OR bedType  =  'Queen';,['rooms'],1,1,0.1635113122171945,False,True,False,SELECT roomName FROM Rooms WHERE bedType  =  [PLACEHOLDER-TYPE:STRING] OR bedType  =  [PLACEHOLDER-TYPE:STRING];,This virtual table describes the names of rooms from the 'Rooms' table that have a specific type of bed. The placeholders in the WHERE clause represent the types of beds being queried.
train.2639,inn_1,"For each room, find its name and the number of times reservations were made for it.","SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room","['rooms', 'reservations']",2,2,0.2065882352941176,False,False,True,"SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room","This virtual table provides a summary of room reservations, showing the room names along with the count of reservations for each room. The placeholders in the query allow for dynamic filtering based on room identifiers."
train.2846,customer_deliveries,Show the details of all trucks in the order of their license number.,SELECT truck_details FROM trucks ORDER BY truck_licence_number,['trucks'],1,1,0.1119999999999999,True,False,False,SELECT truck_details FROM trucks ORDER BY truck_licence_number,"The virtual table provides details about trucks from the 'Trucks' table, specifically focusing on the truck's detailed information. The results are ordered by the truck's license number to facilitate easy identification and sorting of the trucks."
train.2848,customer_deliveries,Find the names of customers who are not living in the state of California.,SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California',"['addresses', 'customers', 'customer_addresses']",3,3+,0.1985882352941176,False,False,True,SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a list of customer names from the 'Customers' table who do not have an address in a specific state, province, or county. The placeholder in the WHERE clause represents the name of the state, province, or county to filter out customers with addresses in that location."
train.2856,customer_deliveries,Find the name of route that has the highest number of deliveries.,SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1,"['delivery_route_locations', 'delivery_routes']",2,2,0.1679999999999999,False,True,False,SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of delivery route names from the 'Delivery_Routes' table, grouped by their unique identifiers. The results are ordered by the number of associated delivery locations in descending order, allowing users to see the most utilized routes. The placeholder in the LIMIT clause represents the maximum number of routes to be displayed."
train.3175,college_1,How many professors are teaching class with code ACCT-211?,SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  'ACCT-211',['class'],1,1,0.1679999999999999,False,True,False,SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of distinct professors teaching classes associated with a specific course code from the 'CLASS' table. The placeholder in the WHERE clause represents the course code being queried.
train.3176,college_1,How many professors teach a class with the code ACCT-211?,SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  'ACCT-211',['class'],1,1,0.1679999999999999,False,True,False,SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of distinct professors teaching classes associated with a specific course code from the 'CLASS' table. The placeholder in the WHERE clause represents the course code being queried.
train.3179,college_1,What are the first names and date of birth of professors teaching course ACCT-211?,"SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  'ACCT-211'","['employee', 'class']",2,2,0.2061176470588234,False,False,True,"SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides a distinct list of first names and dates of birth of professors from the 'employee' table who are teaching classes associated with a specific course code. The placeholder in the WHERE clause represents the course code for which the professors are being queried.
train.3188,college_1,Where is the history department?,SELECT dept_address FROM department WHERE dept_name  =  'History',['department'],1,1,0.1425882352941176,True,False,False,SELECT dept_address FROM department WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the physical address of a department from the 'DEPARTMENT' table based on the specified department name. The placeholder in the WHERE clause represents the name of the department being queried.
train.3190,college_1,What are the different locations of the school with the code BUS?,SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS',['department'],1,1,0.1679999999999999,False,True,False,SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table counts the distinct addresses of departments from the 'DEPARTMENT' table that belong to a specific school. The placeholder in the WHERE clause represents the school code.
train.3201,college_1,What is the total credit does each department offer?,"SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code",['course'],1,1,0.1807058823529412,False,True,False,"SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code","This virtual table summarizes the total credit hours offered by each department from the 'COURSE' table. The placeholder in the SELECT clause represents the total credit hours, while the GROUP BY clause groups the results by department code."
train.3202,college_1,How many credits does the department offer?,"SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code",['course'],1,1,0.1807058823529412,False,True,False,"SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code","This virtual table summarizes the total credit hours for courses grouped by their respective department codes from the 'COURSE' table. The placeholder in the SELECT clause represents the total credit hours, while the GROUP BY clause organizes the results by department code."
train.3213,college_1,Which school has the smallest amount of professors?,SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1,"['department', 'professor']",2,2,0.1679999999999999,False,True,False,SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of school codes from the 'department' table, grouped by school code and ordered by the count of professors associated with each school. The placeholder in the LIMIT clause allows the user to specify the maximum number of school codes to retrieve."
train.3215,college_1,Find the number of professors with a Ph.D. degree in each department.,"SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code",['professor'],1,1,0.2367058823529411,False,False,True,"SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  [PLACEHOLDER-TYPE:STRING] GROUP BY dept_code","This virtual table provides a count of professors grouped by their department code, specifically for those professors who hold a certain highest degree. The placeholder in the WHERE clause represents the degree level being queried."
train.3217,college_1,Find the number of students for each department.,"SELECT count(*) ,  dept_code FROM student GROUP BY dept_code",['student'],1,1,0.1807058823529412,False,True,False,"SELECT count(*) ,  dept_code FROM student GROUP BY dept_code",This virtual table provides a count of students grouped by their respective department codes from the 'student' table. The placeholder in the SELECT statement represents the total number of students in each department.
train.3219,college_1,Find the total number of hours have done for all students in each department.,"SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code",['student'],1,1,0.1807058823529412,False,True,False,"SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code","This virtual table summarizes the total credit hours completed by students, grouped by their respective departments. The placeholder in the SELECT clause represents the total credit hours, while the GROUP BY clause organizes the results by department code."
train.3240,college_1,Which department offers the most credits all together?,SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1,"['course', 'department', 'class']",3,3+,0.1679999999999999,False,True,False,SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of department names from the 'DEPARTMENT' table, which are associated with courses from the 'COURSE' table. The query joins the 'COURSE', 'CLASS', and 'DEPARTMENT' tables to aggregate the total credit hours for each department, ordering the results in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of department names to retrieve."
train.3243,college_1,What is the first name of each student enrolled in class ACCT-211?,SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211',"['student', 'class', 'enroll']",3,3+,0.1425882352941176,True,False,False,SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the first names of students enrolled in classes associated with a specific course code from the 'CLASS', 'ENROLL', and 'STUDENT' tables. The placeholder in the WHERE clause represents the course code."
train.3245,college_1,What is the first name of students enrolled in class ACCT-211 and got grade C?,SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C',"['student', 'class', 'enroll']",3,3+,0.1635113122171945,True,False,False,SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  [PLACEHOLDER-TYPE:STRING] AND T2.enroll_grade  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the first names of students enrolled in classes associated with a specific course code and who have received a particular grade. The placeholders in the WHERE clause represent the course code and the grade received by the students.
train.3254,college_1,What is the name of the department with the most students enrolled?,SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1,"['course', 'department', 'class', 'enroll']",4,3+,0.1679999999999999,False,True,False,SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of department names from the 'DEPARTMENT' table that are associated with classes in the 'CLASS' table. The query joins multiple tables to aggregate the number of classes per department, allowing users to see which departments have the most classes offered. The placeholder in the LIMIT clause represents the maximum number of department names to return."
train.3257,college_1,List the codes of all courses that take place in room KLR209.,SELECT class_code FROM CLASS WHERE class_room  =  'KLR209',['class'],1,1,0.1425882352941176,True,False,False,SELECT class_code FROM CLASS WHERE class_room  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the unique class codes from the 'CLASS' table for classes held in a specific room. The placeholder in the WHERE clause represents the room's identifier.
train.3258,college_1,What are the codes of all the courses that are located in room KLR209?,SELECT class_code FROM CLASS WHERE class_room  =  'KLR209',['class'],1,1,0.1425882352941176,True,False,False,SELECT class_code FROM CLASS WHERE class_room  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the unique class codes from the 'CLASS' table that are held in a specific classroom. The placeholder in the WHERE clause represents the room where the class is conducted.
train.3267,college_1,What is the first name of students who got grade C in any class?,SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C',"['enroll', 'student']",2,2,0.1679999999999999,False,True,False,SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of distinct first names of students who have received a specific grade in their enrolled classes. The placeholder in the WHERE clause represents the grade that the user wants to filter by.
train.3273,college_1,What are the first names of the professors who do not teach a class.,SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num,"['employee', 'class']",2,2,0.1985882352941176,False,False,True,SELECT emp_fname FROM employee WHERE emp_jobcode  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num,"This virtual table describes the first names of employees from the 'employee' table who hold a specific job code, excluding those who are professors teaching any class. The placeholder in the WHERE clause represents the job code of the employees."
train.3274,college_1,What are the first names of all professors not teaching any classes?,SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num,"['employee', 'class']",2,2,0.1985882352941176,False,False,True,SELECT emp_fname FROM employee WHERE emp_jobcode  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num,"This virtual table describes the first names of employees from the 'employee' table who hold a specific job code, excluding those who are professors teaching any class. The placeholder in the WHERE clause represents the job code of the employees."
train.3288,college_1,How many professors attained either Ph.D. or Masters degrees?,SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA',['professor'],1,1,0.1635113122171945,True,False,False,SELECT count(*) FROM professor WHERE prof_high_degree  =  [PLACEHOLDER-TYPE:STRING] OR prof_high_degree  =  [PLACEHOLDER-TYPE:STRING],This virtual table counts the number of professors from the 'professor' table who have a specific highest degree. The placeholders in the WHERE clause represent the degrees being queried.
train.3292,college_1,What is the first name of the professor who is teaching CIS-220 and QM-261?,SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261',"['employee', 'class']",2,2,0.2195113122171945,False,False,True,SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the first names of professors who are teaching a specific course, identified by its course code. The query uses an INTERSECT operation to find professors who are associated with the same course code in two different instances, ensuring that only those professors who meet both conditions are returned. The placeholders in the WHERE clause represent the course code being queried."
train.3293,college_1,Find the first name of student who is taking classes from accounting and Computer Info. Systems departments,SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems',"['course', 'enroll', 'department', 'class', 'student']",5,3+,0.2195113122171945,False,False,True,SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the first names of students who are enrolled in classes offered by a specific department. The query uses an INTERSECT operation to find students who are enrolled in classes from two instances of the same department, ensuring that the results include only those students who meet the criteria in both cases. The placeholder in the WHERE clause represents the department's name."
train.3308,college_1,What are the first names and office of the professors who are in the history department and have a Ph.D?,"SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'","['employee', 'professor', 'department']",3,3+,0.2016289592760181,False,False,True,"SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.prof_high_degree  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the first names of employees and the office locations of professors from the 'employee' and 'professor' tables, respectively. It filters the results based on a specific department name and the highest degree obtained by the professors, both represented by placeholders for string values."
train.3319,college_1,Find names of all students who took some course and got A or C.,"SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'","['enroll', 'student']",2,2,0.2016289592760181,False,False,True,"SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  [PLACEHOLDER-TYPE:STRING] OR T2.enroll_grade  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of students from the 'student' table who have received specific grades in their enrolled classes. The placeholders in the WHERE clause represent the grades being queried.
train.3324,college_1,What are the different first names and highest degree attained for professors teaching in the Computer Information Systems department?,"SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'","['employee', 'professor', 'class', 'department']",4,3+,0.2061176470588234,False,False,True,"SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides a distinct list of first names of employees and their highest degrees from the 'CLASS', 'EMPLOYEE', 'PROFESSOR', and 'DEPARTMENT' tables. The results are filtered based on a specific department name provided as a placeholder."
train.3333,college_1,"Find the name of department that offers the class whose description has the word ""Statistics"".",SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%',"['course', 'department']",2,2,0.1425882352941176,True,False,False,SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE [PLACEHOLDER-TYPE:STRING],"This virtual table provides the names of departments that offer courses matching a specific description. The query joins the 'course' table with the 'department' table based on the department code, filtering the results to include only those courses whose descriptions contain a specified string."
train.3343,sports_competition,What are the types and countries of competitions?,"SELECT Competition_type ,  Country FROM competition",['competition'],1,1,0.1247058823529411,True,False,False,"SELECT Competition_type ,  Country FROM competition",This virtual table describes the types of competitions and the countries where they are held from the 'competition' table. The placeholders represent the specific competition type and country details.
train.3355,sports_competition,Please show the names and the players of clubs.,"SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID","['club', 'player']",2,2,0.1247058823529411,True,False,False,"SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID","This virtual table describes the names of clubs along with the unique identifiers of players associated with those clubs. The join operation links the 'club' table and the 'player' table based on the common 'Club_ID' field, allowing for the retrieval of player information for each club."
train.3364,sports_competition,What are the positions of players whose average number of points scored by that position is larger than 20?,SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20,['player'],1,1,0.1635113122171945,False,True,False,SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the playing positions of players from the 'player' table who have an average score of points greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum average points required.
train.3374,sports_competition,What are the positions of both players that have more than 20 20 points and less than 10 points?,SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10,['player'],1,1,0.1807058823529412,False,False,True,SELECT POSITION FROM player WHERE Points  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT POSITION FROM player WHERE Points  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the playing positions of players from the 'player' table who have a total points score that falls between two specified numeric values. The placeholders in the query represent the lower and upper bounds for the points scored by the players.
train.3383,sports_competition,which country did participated in the most number of Tournament competitions?,SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1,['competition'],1,1,0.2239999999999999,False,False,True,SELECT country FROM competition WHERE competition_type  =  [PLACEHOLDER-TYPE:STRING] GROUP BY country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of countries where competitions of a specific type have taken place. The results are grouped by country and ordered by the number of competitions, allowing users to see which countries host the most events of that type. The placeholders in the query represent the competition type and the limit on the number of results returned."
train.3384,sports_competition,what is the name of the country that participated in the most tournament competitions?,SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1,['competition'],1,1,0.2239999999999999,False,False,True,SELECT country FROM competition WHERE competition_type  =  [PLACEHOLDER-TYPE:STRING] GROUP BY country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of countries where competitions of a specific type have taken place. The results are grouped by country and ordered by the number of occurrences, allowing users to see which countries host the most competitions of that type. The placeholders in the query represent the competition type and the limit on the number of countries to return."
train.3388,sports_competition,What are the countries that have never participated in any friendly-type competitions?,SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly',['competition'],1,1,0.1985882352941176,False,False,True,SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  [PLACEHOLDER-TYPE:STRING],"This virtual table lists the countries where competitions were held, excluding those countries that hosted competitions of a specific type. The placeholder in the WHERE clause represents the type of competition to be excluded."
train.3407,hr_1,"List the full name (first and last name), and salary for those employees who earn below 6000.","SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",['employees'],1,1,0.2065882352941176,False,True,False,"SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  [PLACEHOLDER-TYPE:NUMBER]","This virtual table describes the first names, last names, and salaries of employees from the 'employees' table who earn less than a specified salary. The placeholder in the WHERE clause represents the salary threshold."
train.3418,hr_1,"What are the full name, hire date, salary, and department id for employees without the letter M in their first name?","SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",['employees'],1,1,0.2118614020950846,False,False,True,"SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE [PLACEHOLDER-TYPE:STRING]","This virtual table provides a list of employees' first names, last names, hire dates, salaries, and their department identifiers from the 'employees' table, excluding those whose first names match a specific pattern. The placeholder in the WHERE clause represents the pattern to filter out certain first names."
train.3419,hr_1,"display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.","SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id",['employees'],1,1,0.2372731668009669,False,False,True,"SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE [PLACEHOLDER-TYPE:STRING] ORDER BY department_id","This virtual table provides a list of employees' first names, last names, hire dates, salaries, and their department identifiers from the 'employees' table, excluding those whose first names match a specific pattern. The placeholder in the WHERE clause allows for filtering based on the first name criteria."
train.3420,hr_1,"What are the full name, hire data, salary and department id for employees without the letter M in their first name, ordered by ascending department id?","SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id",['employees'],1,1,0.2372731668009669,False,False,True,"SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE [PLACEHOLDER-TYPE:STRING] ORDER BY department_id","This virtual table provides a list of employees' first names, last names, hire dates, salaries, and their department identifiers from the 'employees' table, excluding those whose first names match a specific pattern. The placeholder in the WHERE clause allows for filtering based on the first name criteria."
train.3442,hr_1,Which job titles correspond to jobs with salaries over 9000?,SELECT job_title FROM jobs WHERE min_salary  >  9000,['jobs'],1,1,0.1425882352941176,True,False,False,SELECT job_title FROM jobs WHERE min_salary  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the job titles from the 'jobs' table where the minimum salary exceeds a specified amount. The placeholder in the WHERE clause represents the minimum salary threshold.
train.3444,hr_1,"What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?","SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",['jobs'],1,1,0.1948684900711876,False,True,False,"SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the job titles along with the salary range (calculated as the difference between maximum and minimum salary) for jobs in the 'jobs' table that have a maximum salary falling within a specified range. The placeholders in the WHERE clause represent the lower and upper limits of the salary range.
train.3448,hr_1,What are the employee ids for each employee and final dates of employment at their last job?,"SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id",['job_history'],1,1,0.1807058823529412,False,True,False,"SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id","This virtual table provides a summary of the most recent job end dates for each employee from the 'job_history' table. The placeholder in the SELECT clause represents the unique identifier for each employee, while the MAX function is used to retrieve the latest end date for their job history."
train.3453,hr_1,display the average salary of employees for each department who gets a commission percentage.,"SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != 'null' GROUP BY department_id",['employees'],1,1,0.2367058823529411,False,False,True,"SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != [PLACEHOLDER-TYPE:STRING] GROUP BY department_id",This virtual table provides the average salary of employees grouped by their department. The placeholder in the WHERE clause indicates that only employees with a non-null commission percentage are considered in the calculation.
train.3454,hr_1,What is the average salary of employees who have a commission percentage that is not null?,"SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != 'null' GROUP BY department_id",['employees'],1,1,0.2367058823529411,False,False,True,"SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != [PLACEHOLDER-TYPE:STRING] GROUP BY department_id",This virtual table provides the average salary of employees grouped by their department. The placeholder in the WHERE clause indicates that only departments with employees who have a non-null commission percentage are included in the results.
train.3455,hr_1,display the country ID and number of cities for each country.,"SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id",['locations'],1,1,0.1807058823529412,False,True,False,"SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id","This virtual table summarizes the number of locations associated with each country in the 'locations' table. The placeholder in the SELECT clause represents the unique identifier for each country, while the COUNT function aggregates the total number of locations per country."
train.3456,hr_1,Give the country id and corresponding count of cities in each country.,"SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id",['locations'],1,1,0.1807058823529412,False,True,False,"SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id","This virtual table summarizes the number of locations associated with each country from the 'locations' table. The placeholder in the SELECT clause represents the unique identifier for each country, while the COUNT function aggregates the total number of locations per country."
train.3465,hr_1,Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?,SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000,"['job_history', 'employees']",2,2,0.0865882352941176,True,False,False,SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a comprehensive view of the job history of employees who have a salary greater than or equal to a specified amount. It combines data from the 'job_history' and 'employees' tables, linking them through the employee identifier. The placeholder in the WHERE clause represents the minimum salary threshold for filtering the results."
train.3482,hr_1,What is all the information regarding employees who are managers?,SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id,"['employees', 'departments']",2,2,0.1119999999999999,True,False,False,SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id,"This virtual table provides a list of employees who are also managers in their respective departments. It combines data from the 'employees' and 'departments' tables, ensuring that only those employees whose 'employee_id' matches the 'manager_id' of their department are included. The use of DISTINCT ensures that each employee-manager pair is unique."
train.3487,hr_1,What are the unique ids of those departments where any manager is managing 4 or more employees.,"SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",['employees'],1,1,0.2830407239819004,False,False,True,"SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= [PLACEHOLDER-TYPE:NUMBER]","This virtual table lists unique department identifiers from the 'employees' table, grouped by department and manager. It filters the results to include only those departments that have a specified minimum number of employees, represented by a placeholder for numeric values."
train.3488,hr_1,Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?,"SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",['employees'],1,1,0.2830407239819004,False,False,True,"SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= [PLACEHOLDER-TYPE:NUMBER]","This virtual table lists unique department identifiers from the 'employees' table, grouped by department and manager. It filters the results to include only those departments that have a specified minimum number of employees. The placeholder in the HAVING clause represents the minimum count of employees required for a department to be included in the results."
train.3496,hr_1,What is all the information regarding employees with salaries above the minimum and under 2500?,SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500,['employees'],1,1,0.1171764705882353,True,False,False,SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND [PLACEHOLDER-TYPE:NUMBER],"This virtual table retrieves all employee records from the 'employees' table whose salary falls within a specified range. The lower limit of the salary range is dynamically determined by selecting the minimum salary from the same table, while the upper limit is represented by a placeholder for numeric values."
train.3500,hr_1,What are the full names and hire dates for employees in the same department as someone with the first name Clara?,"SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  'Clara')",['employees'],1,1,0.2371764705882353,False,False,True,"SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  [PLACEHOLDER-TYPE:STRING])","This virtual table provides the first names, last names, and hire dates of employees from the 'employees' table who belong to the same department as a specified employee. The placeholder in the subquery represents the first name of the employee whose department is being queried."
train.3502,hr_1,"What are the full names and hire dates for employees in the same department as someone with the first name Clara, not including Clara?","SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  'Clara') AND first_name != 'Clara'",['employees'],1,1,0.2752941176470588,False,False,True,"SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  [PLACEHOLDER-TYPE:STRING]) AND first_name != [PLACEHOLDER-TYPE:STRING]","This virtual table provides the first names, last names, and hire dates of employees from the 'employees' table who belong to the same department as a specified employee, while excluding the specified employee's name. The placeholders in the WHERE clause represent the first name of the employee to find the department and the first name to exclude."
train.3503,hr_1,display the employee number and name( first name and last name ) for all employees who work in a department with any employee whose name contains a ’T’.,"SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )",['employees'],1,1,0.2752941176470588,False,False,True,"SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE [PLACEHOLDER-TYPE:STRING] )","This virtual table describes the employee ID, first name, and last name of employees from the 'employees' table who belong to the same department as a specified employee. The placeholder in the WHERE clause represents the first name of the employee whose department is being queried."
train.3507,hr_1,display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN.,"SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )",['employees'],1,1,0.2112941176470588,False,True,False,"SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  [PLACEHOLDER-TYPE:STRING] )","This virtual table provides a list of employee IDs and their corresponding job IDs from the 'employees' table, specifically for those employees whose salary is less than the minimum salary for a specified job. The placeholder in the subquery represents the job identifier for which the minimum salary is being compared."
train.3512,hr_1,What are total salaries and department id for each department that has more than 2 employees?,"SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2",['employees'],1,1,0.2576289592760181,False,False,True,"SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table summarizes the total salary of employees grouped by their department. It includes only those departments that have a minimum number of employees, as specified by the placeholder in the HAVING clause."
train.3515,hr_1,"display the department ID, full name (first and last name), salary for those employees who is highest salary in every department.","SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id",['employees'],1,1,0.2314158215010142,False,False,True,"SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id","This virtual table summarizes the first names, last names, salaries, and department IDs of employees from the 'employees' table, grouped by department. The placeholder in the SELECT clause represents the maximum salary within each department."
train.3520,hr_1,What are the full names and cities of employees who have the letter Z in their first names?,"SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'","['employees', 'departments', 'locations']",3,3+,0.2065882352941176,False,True,False,"SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE [PLACEHOLDER-TYPE:STRING]","This virtual table provides the first and last names of employees along with the city of their department's location. The data is sourced from the 'employees', 'departments', and 'locations' tables, with a filter applied to the first name of the employees using a placeholder for string values."
train.3523,hr_1,display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working.,"SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id","['countries', 'employees', 'departments', 'locations']",4,3+,0.1685192697768762,True,False,False,"SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id","This virtual table provides the first and last names of employees along with their unique identifiers and the names of the countries where their departments are located. The data is sourced from the 'employees', 'departments', 'locations', and 'countries' tables, linked through their respective identifiers."
train.3525,hr_1,display the department name and number of employees in each of the department.,"SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name","['employees', 'departments']",2,2,0.1807058823529412,False,True,False,"SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name",This virtual table provides a summary of the number of employees in each department by joining the 'employees' and 'departments' tables. The placeholder in the SELECT statement allows for the retrieval of the department name along with the count of employees in that department.
train.3526,hr_1,What are the department names and how many employees work in each of them?,"SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name","['employees', 'departments']",2,2,0.1807058823529412,False,True,False,"SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name",This virtual table provides a count of employees grouped by their respective department names from the 'employees' and 'departments' tables. The placeholder in the COUNT function allows for dynamic counting of employees in each department.
train.3527,hr_1,"display the full name (first and last name), and salary of those employees who working in any department located in London.","SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'","['employees', 'departments', 'locations']",3,3+,0.2065882352941176,False,True,False,"SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  [PLACEHOLDER-TYPE:STRING]","This virtual table describes the first names, last names, and salaries of employees from the 'employees' table who work in departments located in a specific city. The placeholders in the WHERE clause represent the city name."
train.3528,hr_1,What are full names and salaries of employees working in the city of London?,"SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'","['employees', 'departments', 'locations']",3,3+,0.2065882352941176,False,True,False,"SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  [PLACEHOLDER-TYPE:STRING]","This virtual table describes the first names, last names, and salaries of employees from the 'employees' table who work in departments located in a specific city. The placeholders in the WHERE clause represent the city name."
train.3532,music_1,Find the id of the song that lasts the longest.,SELECT f_id FROM files ORDER BY duration DESC LIMIT 1,['files'],1,1,0.1119999999999999,True,False,False,SELECT f_id FROM files ORDER BY duration DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of file identifiers from the 'files' table, ordered by the duration of the audio files in descending order. The placeholder in the LIMIT clause indicates the maximum number of file identifiers to return."
train.3542,music_1,What are the names of the artists who sang the shortest song?,SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1,"['files', 'song']",2,2,0.1119999999999999,True,False,False,SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of artists from the 'song' table, joined with the 'files' table to access the duration of their songs. The results are ordered by the duration of the audio files, and a placeholder is used to limit the number of results returned."
train.3545,music_1,How many songs have 4 minute duration?,SELECT count(*) FROM files WHERE duration LIKE '4:%',['files'],1,1,0.1425882352941176,True,False,False,SELECT count(*) FROM files WHERE duration LIKE [PLACEHOLDER-TYPE:STRING],This virtual table provides a count of audio files from the 'files' table that match a specific duration pattern. The placeholder in the WHERE clause represents the duration criteria to filter the files.
train.3549,music_1,What is the average rating of songs produced by female artists?,SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  'Female',"['artist', 'song']",2,2,0.1425882352941176,True,False,False,SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  [PLACEHOLDER-TYPE:STRING],"This virtual table calculates the average rating of songs performed by artists of a specific gender. It joins the 'artist' and 'song' tables based on the artist's name, filtering the results to include only those artists whose gender matches the specified placeholder."
train.3552,music_1,Find the file format that is used by the most files.,SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1,['files'],1,1,0.1679999999999999,True,False,False,SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of audio file formats from the 'files' table, grouped by format type. The results are ordered by the count of files in each format, allowing users to see the most common formats used. The placeholder in the LIMIT clause represents the maximum number of formats to return."
train.3556,music_1,What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?,SELECT f_id FROM files WHERE formats  =  'mp4' INTERSECT SELECT f_id FROM song WHERE resolution  <  1000,"['files', 'song']",2,2,0.2367058823529411,False,False,True,SELECT f_id FROM files WHERE formats  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT f_id FROM song WHERE resolution  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies the unique file identifiers from the 'files' table that are available in a specific format and also exist in the 'song' table with a resolution lower than a specified value. The placeholders in the WHERE clauses represent the format of the file and the maximum resolution allowed.
train.3557,music_1,What is the country of origin of the artist who is female and produced a song in Bangla?,SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  'Female' AND T2.languages  =  'bangla',"['artist', 'song']",2,2,0.1635113122171945,True,False,False,SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  [PLACEHOLDER-TYPE:STRING] AND T2.languages  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a list of countries from which artists originate, filtered by the gender of the artist and the languages in which their songs are available. The placeholders in the WHERE clause represent the specific gender and language criteria."
train.3558,music_1,What countries are the female artists who sung in the language Bangla from?,SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  'Female' AND T2.languages  =  'bangla',"['artist', 'song']",2,2,0.1635113122171945,True,False,False,SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  [PLACEHOLDER-TYPE:STRING] AND T2.languages  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a list of countries from which artists originate, filtered by the gender of the artist and the languages in which their songs are available. The placeholders in the WHERE clause represent the specific gender and language criteria."
train.3566,music_1,What is the gender and name of the artist who sang the song with the smallest resolution?,"SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1","['artist', 'song']",2,2,0.1501176470588235,True,False,False,"SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of artists along with their gender from the 'artist' table, specifically for those artists who have songs in the 'song' table. The results are ordered by the audio resolution of the songs, and the number of results returned is limited by a placeholder for numeric values."
train.3567,music_1,"For each file format, return the number of artists who released songs in that format.","SELECT count(*) ,  formats FROM files GROUP BY formats",['files'],1,1,0.1807058823529412,False,True,False,"SELECT count(*) ,  formats FROM files GROUP BY formats",This virtual table provides a count of audio files grouped by their available formats from the 'files' table. The placeholder in the SELECT clause represents the count of files for each format.
train.3576,music_1,What are the names and genders of all artists who released songs in the month of March?,"SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE '%Mar%'","['artist', 'song']",2,2,0.1807058823529412,False,True,False,"SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and genders of artists from the 'artist' table who have released songs on a specific date. The placeholder in the WHERE clause represents the release date of the songs.
train.3586,music_1,What are the languages that are used most often in songs?,SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1,['song'],1,1,0.1679999999999999,True,False,False,SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of languages in which songs are available, grouped by language and ordered by the number of songs in each language. The placeholder in the LIMIT clause allows the user to specify the maximum number of languages to retrieve."
train.3590,music_1,What are the names of all male British artists?,SELECT artist_name FROM artist WHERE country  =  'UK' AND gender  =  'Male',['artist'],1,1,0.1635113122171945,True,False,False,SELECT artist_name FROM artist WHERE country  =  [PLACEHOLDER-TYPE:STRING] AND gender  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of artists from the 'artist' table who are from a specific country and belong to a specific gender. The placeholders in the WHERE clause represent the country and gender of the artists.
train.3598,music_1,What is the average rating and resolution of all bangla songs?,"SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  'bangla'",['song'],1,1,0.1807058823529412,False,True,False,"SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  [PLACEHOLDER-TYPE:STRING]",This virtual table calculates the average rating and average resolution of songs from the 'song' table that are available in a specific language. The placeholder in the WHERE clause represents the language of the songs.
train.3599,music_1,What are the maximum and minimum resolution of songs whose duration is 3 minutes?,"SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE '3:%'","['files', 'song']",2,2,0.1635113122171945,True,False,False,"SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE [PLACEHOLDER-TYPE:STRING]","This virtual table provides the maximum and minimum audio resolutions of songs from the 'song' table, filtered by the duration of the associated files in the 'files' table. The placeholder in the WHERE clause represents the specific duration pattern to match."
train.3601,music_1,What are the maximum duration and resolution of songs grouped and ordered by languages?,"SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages","['files', 'song']",2,2,0.2319999999999999,False,False,True,"SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages","This virtual table provides the maximum duration and resolution of audio files, along with the languages in which the songs are available. The data is aggregated by languages, allowing users to see the longest audio files and their highest resolutions for each language category."
train.3603,music_1,What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?,"SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is","['files', 'song']",2,2,0.2319999999999999,False,False,True,"SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is","This virtual table provides the minimum duration of audio files and the minimum rating of songs grouped by their genre. The placeholders represent the necessary fields from the 'files' and 'song' tables, allowing users to analyze the relationship between audio file durations and song ratings across different genres."
train.3607,music_1,Find the name and country of origin for all artists who have release at least one song of resolution above 900.,"SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1","['artist', 'song']",2,2,0.2889861371300112,False,False,True,"SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T2.artist_name HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names and countries of artists from the 'artist' table who have songs in the 'song' table with a resolution greater than a specified value. The results are grouped by artist name, and only those artists with a count of songs meeting the resolution criteria that is greater than or equal to a specified number are included."
train.3619,music_1,Find the top 3 artists who have the largest number of songs works whose language is Bangla.,SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  'bangla' GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3,"['artist', 'song']",2,2,0.2239999999999999,False,False,True,SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of artists from the 'artist' table who have songs available in a specific language. The query joins the 'artist' and 'song' tables on the artist's name, filters the results based on the specified language, groups the results by artist name, and orders them by the number of songs in descending order, limiting the output to a specified number of artists."
train.3623,music_1,"List the duration, file size and format of songs whose genre is pop, ordered by title?","SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  'pop' ORDER BY T2.song_name","['files', 'song']",2,2,0.2319999999999999,False,False,True,"SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T2.song_name","This virtual table provides information about the duration, file size, and available formats of audio files associated with songs from a specific genre. The placeholder in the WHERE clause represents the genre of the songs being queried."
train.3624,music_1,"What is the duration, file size, and song format for every pop song, ordered by title alphabetically?","SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  'pop' ORDER BY T2.song_name","['files', 'song']",2,2,0.2319999999999999,False,False,True,"SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T2.song_name","This virtual table provides information about the duration, file size, and available formats of audio files associated with songs from a specific genre. The placeholder in the WHERE clause represents the genre of interest."
train.3631,baseball_1,What is average salary of the players in the team named 'Boston Red Stockings' ?,SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings',"['team', 'salary']",2,2,0.1425882352941176,True,False,False,SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = [PLACEHOLDER-TYPE:STRING],"This virtual table calculates the average salary of players from a specific team. It joins the 'salary' table with the 'team' table based on the team identifier, filtering the results to include only the team with the specified name."
train.3650,baseball_1,What are the three countries that the least players are from?,SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;,['player'],1,1,0.1679999999999999,False,True,False,SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides a list of countries where players were born, grouped by country and ordered by the number of players from each country in ascending order. The placeholder in the LIMIT clause allows for specifying the maximum number of countries to return."
train.3657,baseball_1,"What is the highest salary among each team? List the team name, id and maximum salary.","SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;","['team', 'salary']",2,2,0.2065882352941176,False,False,True,"SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;",This virtual table provides the names and identifiers of teams along with their highest recorded salary from the 'salary' table. The data is grouped by team identifiers to ensure that each team is represented only once with its maximum salary.
train.3658,baseball_1,"For each team, return the team name, id and the maximum salary among the team.","SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;","['team', 'salary']",2,2,0.2065882352941176,False,False,True,"SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;",This virtual table provides the names and identifiers of teams along with their highest recorded salary from the 'salary' table. The data is grouped by team identifiers to ensure that each team is represented only once with its maximum salary.
train.3659,baseball_1,What are the name and id of the team offering the lowest average salary?,"SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;","['team', 'salary']",2,2,0.2061176470588234,False,True,False,"SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of team names and their corresponding team IDs from the 'team' table, along with the average salary of players from each team. The results are ordered by the average salary in ascending order, and the number of results returned is limited by a placeholder for numeric values."
train.3661,baseball_1,Find the players' first name and last name who won award both in 1960 and in 1961.,"SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961","['player_award', 'player']",2,2,0.2576289592760181,False,False,True,"SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  [PLACEHOLDER-TYPE:NUMBER]",This virtual table identifies players who received awards in two different years. It selects the first and last names of players from the 'player' table who have awards recorded in the 'player_award' table for the specified years. The use of INTERSECT ensures that only players who received awards in both years are included in the results.
train.3663,baseball_1,List players' first name and last name who have weight greater than 220 or height shorter than 75.,"SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75",['player'],1,1,0.2188235294117647,False,False,True,"SELECT name_first ,  name_last FROM player WHERE weight  >  [PLACEHOLDER-TYPE:NUMBER] OR height  <  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the first and last names of players from the 'player' table who either weigh more than a specified amount or are shorter than a specified height. The placeholders in the WHERE clause represent the weight and height criteria.
train.3664,baseball_1,What are the first name and last name of the players who have weight above 220 or height below 75?,"SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75",['player'],1,1,0.2188235294117647,False,False,True,"SELECT name_first ,  name_last FROM player WHERE weight  >  [PLACEHOLDER-TYPE:NUMBER] OR height  <  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the first and last names of players from the 'player' table who either weigh more than a specified amount or are shorter than a specified height. The placeholders in the WHERE clause represent the weight and height criteria.
train.3665,baseball_1,List the maximum scores of the team Boston Red Stockings when the team won in postseason?,SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';,"['postseason', 'team']",2,2,0.1425882352941176,True,False,False,SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING];,"This virtual table calculates the maximum number of wins achieved by any team in the postseason from the 'postseason' table, specifically for the team identified by its name in the 'team' table. The placeholder in the WHERE clause represents the name of the team being queried."
train.3666,baseball_1,What are the maximum scores the team Boston Red Stockings got when the team won in postseason?,SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';,"['postseason', 'team']",2,2,0.1425882352941176,True,False,False,SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING];,"This virtual table calculates the maximum number of wins achieved by any team in the postseason, specifically for a team identified by its name. The placeholder in the WHERE clause represents the name of the team being queried."
train.3672,baseball_1,"For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons.","SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year","['postseason', 'team']",2,2,0.2367058823529411,False,False,True,"SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.year",This virtual table provides the count of postseason wins for a specific team across different years. The placeholder in the WHERE clause represents the name of the team for which the postseason wins are being queried.
train.3677,baseball_1,What is the total salary paid by team Boston Red Stockings in 2010?,SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010,"['team', 'salary']",2,2,0.1635113122171945,True,False,False,SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = [PLACEHOLDER-TYPE:STRING] AND T1.year  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table calculates the total salary of players from a specific team for a given year. The placeholders represent the team's name and the year for which the salary data is being queried.
train.3681,baseball_1,List the 3 highest salaries of the players in 2001?,SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;,['salary'],1,1,0.1679999999999999,False,True,False,SELECT salary FROM salary WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY salary DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides the salary records from the 'salary' table for a specific year, sorted in descending order. The placeholders represent the year for which the salary data is requested and the limit on the number of records to return."
train.3682,baseball_1,How much salary did the top 3 well-paid players get in 2001?,SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;,['salary'],1,1,0.1679999999999999,False,True,False,SELECT salary FROM salary WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY salary DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides the salary records from the 'salary' table for a specific year, sorted in descending order. The placeholders represent the year for which the salary data is requested and the limit on the number of records to return."
train.3683,baseball_1,What were all the salary values of players in 2010 and 2001?,SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001,['salary'],1,1,0.2195113122171945,False,False,True,SELECT salary FROM salary WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] UNION SELECT salary FROM salary WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table retrieves the salary records for players in two specific years from the 'salary' table. The placeholders represent the years for which the salary data is being queried.
train.3685,baseball_1,In which year did the least people enter hall of fame?,SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;,['hall_of_fame'],1,1,0.1679999999999999,False,True,False,SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides a list of years in which players were inducted into the Hall of Fame, grouped by year. The results are ordered by the number of inductees in ascending order, with a limit set by a placeholder for numeric values to specify how many years to return."
train.3686,baseball_1,Find the year in which the least people enter hall of fame.,SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;,['hall_of_fame'],1,1,0.1679999999999999,False,True,False,SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides a list of years in which players were inducted into the Hall of Fame, grouped by year. The results are ordered by the number of inductees in ascending order, with a limit set by a placeholder for numeric values."
train.3689,baseball_1,"How many games were played in park ""Columbia Park"" in 1907?",SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';,"['park', 'home_game']",2,2,0.1635113122171945,True,False,False,SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = [PLACEHOLDER-TYPE:NUMBER] AND T2.park_name = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the total count of home games played in a specific year at a designated park. The placeholders represent the year of the games and the name of the park.
train.3690,baseball_1,"Count the number of games taken place in park ""Columbia Park"" in 1907.",SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';,"['park', 'home_game']",2,2,0.1635113122171945,True,False,False,SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = [PLACEHOLDER-TYPE:NUMBER] AND T2.park_name = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the total count of home games played in a specific year at a designated park. The placeholders represent the year of the games and the name of the park.
train.3691,baseball_1,How many games were played in city Atlanta in 2000?,SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';,"['park', 'home_game']",2,2,0.1635113122171945,True,False,False,SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.city  =  [PLACEHOLDER-TYPE:STRING];,This virtual table provides the total count of home games played in a specific year at parks located in a specified city. The placeholders represent the year of the home games and the city where the park is situated.
train.3692,baseball_1,Find the number of games taken place in city Atlanta in 2000.,SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';,"['park', 'home_game']",2,2,0.1635113122171945,True,False,False,SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.city  =  [PLACEHOLDER-TYPE:STRING];,This virtual table provides the total count of home games played in a specific year at parks located in a specified city. The placeholders represent the year of the home games and the city where the park is situated.
train.3693,baseball_1,What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?,SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;,"['team', 'home_game']",2,2,0.1807058823529412,False,True,False,SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING] AND T1.year BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];,This virtual table calculates the total attendance for home games played by a specific team over a range of years. The placeholders represent the team's name and the start and end years for the attendance data.
train.3698,baseball_1,What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?,"SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'","['team', 'player', 'salary']",3,3+,0.2748235294117647,False,False,True,"SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = [PLACEHOLDER-TYPE:NUMBER] AND T3.name = [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = [PLACEHOLDER-TYPE:NUMBER] AND T3.name = [PLACEHOLDER-TYPE:STRING]","This virtual table retrieves the first and last names of players who were associated with a specific team during a particular year, based on their salary records. The placeholders in the WHERE clause represent the year and the team's name."
train.3702,baseball_1,Find the team that attended the least number of home games in 1980.,SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;,"['team', 'home_game']",2,2,0.1679999999999999,False,True,False,SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.attendance ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table lists the names of teams that hosted home games in a specific year, ordered by their attendance in ascending order. The placeholders represent the year of the home games and the limit on the number of teams to display."
train.3709,baseball_1,Which park had most attendances in 2008?,SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;,"['park', 'home_game']",2,2,0.1679999999999999,False,True,False,SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.attendance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides a list of park names where home games were played in a specific year, ordered by attendance in descending order. The placeholders represent the year of the home games and the limit on the number of park names to return."
train.3857,insurance_policies,Find the settlement amount of the claim with the largest claim amount. Show both the settlement amount and claim amount.,"SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1",['claims'],1,1,0.1501176470588235,False,True,False,"SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of the amounts claimed and settled for insurance claims from the 'Claims' table. The results are ordered by the claimed amount in descending order, and the placeholder allows for limiting the number of records returned."
train.3862,insurance_policies,"Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date.",SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims ),['claims'],1,1,0.1731764705882353,False,True,False,SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims ),This virtual table provides the dates when claims were made for those claims that have a settled amount less than or equal to the average settled amount across all claims. The placeholder in the subquery represents the average amount settled for comparison.
train.3863,insurance_policies,Return the claim start date for the claims whose claimed amount is no more than the average,SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims ),['claims'],1,1,0.1731764705882353,False,True,False,SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims ),This virtual table provides the dates when claims were made for those claims that have a settled amount less than or equal to the average settled amount across all claims. The placeholder in the subquery represents the average settled amount calculated from the Claims table.
train.3868,insurance_policies,How many settlements were made on the claim with the most recent claim settlement date? List the number and the claim id.,"SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1","['claims', 'settlements']",2,2,0.2061176470588234,False,False,True,"SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a count of claims along with their unique identifiers from the 'Claims' table, joined with the 'Settlements' table. The results are grouped by the claim ID and ordered by the date the claims were settled in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return."
train.3869,insurance_policies,Find the claim id and the number of settlements made for the claim with the most recent settlement date.,"SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1","['claims', 'settlements']",2,2,0.2061176470588234,False,False,True,"SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a count of claims along with their unique identifiers from the 'Claims' table, joined with the 'Settlements' table. The results are grouped by the claim ID and ordered by the date the claims were settled in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return."
train.3878,insurance_policies,What is the most popular payment method?,SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1,['payments'],1,1,0.1679999999999999,False,True,False,SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a summary of the different payment methods used in the 'Payments' table, grouped by the payment method code. The results are ordered by the frequency of each payment method, allowing users to see the most commonly used methods. The placeholder in the LIMIT clause represents the maximum number of payment methods to return."
train.3879,insurance_policies,Which payment method is used the most often?,SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1,['payments'],1,1,0.1679999999999999,False,True,False,SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a summary of the different payment methods used in the 'Payments' table, grouped by the payment method code. The placeholder in the LIMIT clause allows the user to specify the maximum number of payment methods to retrieve, sorted by the frequency of their usage in descending order."
train.3880,insurance_policies,With which kind of payment method were the least number of payments processed?,SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1,['payments'],1,1,0.1679999999999999,False,True,False,SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of unique payment method codes used in the 'Payments' table, grouped by the payment method code and ordered by the frequency of each method in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of payment methods to retrieve."
train.3886,insurance_policies,Which kind of policy type was chosen by the most customers?,SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1,['customer_policies'],1,1,0.1679999999999999,False,True,False,SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the different types of insurance policies from the 'Customer_Policies' table, grouping them by their policy type code. The placeholder in the LIMIT clause allows the user to specify the maximum number of policy types to retrieve, sorted by the frequency of each type in descending order."
train.3893,insurance_policies,Which customers do not have any policies? Find the details of these customers.,SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id,"['customer_policies', 'customers']",2,2,0.1425882352941176,True,False,False,SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id,"This virtual table provides a list of customer details from the 'Customers' table, excluding those customers who have associated insurance policies. The query uses an EXCEPT clause to filter out customers that are linked to any policies in the 'Customer_Policies' table."
train.3895,insurance_policies,"Which claims had exactly one settlement? For each, tell me the the date the claim was made, the date it was settled and the amount settled.","SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1","['claims', 'settlements']",2,2,0.2835113122171945,False,False,True,"SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of claims from the 'Claims' table that have been linked to settlements in the 'Settlements' table. It displays the claim ID, the date the claim was made, and the date the claim was settled. The placeholder in the HAVING clause represents the number of settlements associated with each claim, allowing users to filter claims based on their settlement count."
train.3898,hospital_1,Which department has the largest number of employees?,SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;,['department'],1,1,0.1679999999999999,False,True,False,SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides a list of department names from the 'Department' table, grouped by their unique identifiers. The results are ordered by the count of occurrences of each department ID in descending order, allowing users to see the most frequently referenced departments. The placeholder in the LIMIT clause represents the maximum number of department names to return."
train.3899,hospital_1,Find the department with the most employees.,SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;,['department'],1,1,0.1679999999999999,False,True,False,SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides a list of department names from the 'Department' table, grouped by their unique identifiers. The results are ordered by the count of occurrences of each department ID in descending order, allowing users to see the most frequently referenced departments. The placeholder in the LIMIT clause represents the maximum number of department names to return."
train.3901,hospital_1,Tell me the employee id of the head of the department with the least employees.,SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;,['department'],1,1,0.1679999999999999,False,True,False,SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides a list of department heads from the 'Department' table, grouped by their department IDs. The result is ordered by the count of departments, and the number of results returned is limited by a placeholder for numeric values."
train.3902,hospital_1,what is the name and position of the head whose department has least number of employees?,"SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;","['physician', 'department']",2,2,0.2061176470588234,False,False,True,"SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides the names and positions of physicians who are heads of departments. It aggregates the data from the 'Department' and 'Physician' tables, grouping by department ID and ordering the results by the count of departments, limited to a specified number of results."
train.3903,hospital_1,Find the name and position of the head of the department with the least employees.,"SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;","['physician', 'department']",2,2,0.2061176470588234,False,False,True,"SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides the names and positions of physicians who are heads of departments. It aggregates the data from the 'Department' and 'Physician' tables, grouping by department ID and ordering the results by the count of departments, limited to a specified number of results."
train.3904,hospital_1,What are names of patients who made an appointment?,SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn,"['patient', 'appointment']",2,2,0.0865882352941176,True,False,False,SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn,This virtual table provides the names of patients associated with their appointments from the 'Appointment' and 'Patient' tables. The join condition links the patient identifier in the 'Appointment' table to the Social Security Number in the 'Patient' table.
train.3914,hospital_1,Find the names of all physicians and their primary affiliated departments' names.,"SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1","['physician', 'department', 'affiliated_with']",3,3+,0.1807058823529412,False,False,True,"SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  [PLACEHOLDER-TYPE:NUMBER]","This virtual table describes the names of physicians and their affiliated departments from the 'Physician' and 'Department' tables. The join condition links physicians to their departments through the 'Affiliated_With' table, and the placeholder in the WHERE clause indicates whether the affiliation is primary."
train.3928,hospital_1,How many patients do each physician take care of? List their names and number of patients they take care of.,"SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid","['physician', 'patient']",2,2,0.1807058823529412,False,False,True,"SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid","This virtual table provides the names of physicians along with the count of patients for whom they are the primary care physician. The data is sourced from the 'Physician' and 'Patient' tables, where the relationship is established through the primary care physician identifier. The grouping is done by the physician's unique identifier to aggregate the patient counts accordingly."
train.3930,hospital_1,Find the name of physicians who are in charge of more than one patient.,SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1,"['physician', 'patient']",2,2,0.2195113122171945,False,False,True,SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of physicians who are primary care physicians (PCP) for patients, specifically those who have more than a specified number of patients assigned to them. The placeholder in the HAVING clause represents the minimum count of patients a physician must have to be included in the results."
train.3940,hospital_1,What is the names of the physicians who prescribe medication Thesisin?,SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  'Thesisin',"['physician', 'prescribes', 'medication']",3,3+,0.1679999999999999,False,True,False,SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of unique physician names who have prescribed a specific medication. The placeholders in the WHERE clause represent the name of the medication being queried.
train.3941,hospital_1,List the names of all the physicians who prescribe Thesisin as medication.,SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  'Thesisin',"['physician', 'prescribes', 'medication']",3,3+,0.1679999999999999,False,True,False,SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of unique physician names who have prescribed a specific medication. The placeholders in the WHERE clause represent the name of the medication being queried.
train.3944,hospital_1,Find the number of medications prescribed for each brand.,"SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand","['prescribes', 'medication']",2,2,0.1807058823529412,False,False,True,"SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand","This virtual table provides a count of prescribed medications grouped by their brand names. It combines data from the 'medication' table and the 'prescribes' table, allowing users to see how many times each brand of medication has been prescribed."
train.3948,hospital_1,Find the patient who has the most recent undergoing treatment?,SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1,['undergoes'],1,1,0.1119999999999999,True,False,False,SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of patients who have undergone medical procedures, sorted by the date of the procedures. The placeholder in the LIMIT clause allows for specifying the maximum number of patients to retrieve."
train.3949,hospital_1,Which patient is undergoing the most recent treatment?,SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1,['undergoes'],1,1,0.1119999999999999,True,False,False,SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of patients who have undergone medical procedures, sorted by the date of the procedures. The placeholder in the LIMIT clause allows for specifying the maximum number of patients to retrieve."
train.3959,hospital_1,Find the physician who prescribed the highest dose. What is his or her name?,SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1,"['physician', 'prescribes']",2,2,0.1119999999999999,True,False,False,SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of physicians from the 'Physician' table who have prescribed medications, ordered by the dosage of the medications in descending order. The placeholder in the LIMIT clause represents the maximum number of physician names to be returned."
train.3960,hospital_1,List the physicians' employee ids together with their primary affiliation departments' ids.,"SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1",['affiliated_with'],1,1,0.1807058823529412,False,False,True,"SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of physicians along with their associated departments from the 'Affiliated_With' table, filtered by whether the affiliation is marked as primary. The placeholder in the WHERE clause represents the primary affiliation status."
train.3971,hospital_1,What are the three most costly procedures?,SELECT name FROM procedures ORDER BY cost LIMIT 3,['procedures'],1,1,0.1119999999999999,True,False,False,SELECT name FROM procedures ORDER BY cost LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of medical procedures from the 'Procedures' table, ordered by their associated costs. The placeholder in the LIMIT clause allows the user to specify the maximum number of procedure names to retrieve."
train.3972,hospital_1,Find the physicians who are trained in a procedure that costs more than 5000.,SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000,"['physician', 'procedures', 'trained_in']",3,3+,0.1425882352941176,True,False,False,SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of physicians who are trained in specific procedures that have a cost exceeding a certain amount. The placeholders in the WHERE clause represent the cost threshold for the procedures.
train.3974,hospital_1,Find the physician who was trained in the most expensive procedure?,SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1,"['physician', 'procedures', 'trained_in']",3,3+,0.1119999999999999,True,False,False,SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of physicians who are trained in specific medical procedures, ordered by the cost of those procedures in descending order. The placeholder in the LIMIT clause represents the maximum number of physician names to be returned."
train.3980,hospital_1,Find all procedures which cost more than 1000 or which physician John Wen was trained in.,SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  'John Wen',"['procedures', 'physician', 'trained_in']",3,3+,0.2748235294117647,False,False,True,SELECT name FROM procedures WHERE cost  >  [PLACEHOLDER-TYPE:NUMBER] UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a list of procedure names from the 'Procedures' table that have a cost greater than a specified amount. Additionally, it includes names of procedures that a specific physician is trained in, by joining the 'Physician', 'Trained_In', and 'Procedures' tables. The placeholders represent the cost threshold and the physician's name respectively."
train.3993,hospital_1,How many patients are not using Procrastin-X as medication?,SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' ),"['patient', 'prescribes', 'medication']",3,3+,0.2112941176470588,False,False,True,SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING] ),This virtual table counts the number of patients who have not been prescribed a specific medication. It filters the patients based on their Social Security Number (SSN) and checks against a subquery that retrieves the patients who have received the specified medication. The placeholder in the subquery represents the name of the medication.
train.4256,club_1,What are the first names of all the students?,SELECT DISTINCT fname FROM student,['student'],1,1,0.1119999999999999,True,False,False,SELECT DISTINCT fname FROM student,The virtual table describes the distinct first names of students from the 'Student' table. The query retrieves unique first names to avoid duplicates.
train.4271,club_1,"Give me the first name and last name for all the female members of the club ""Bootup Baltimore"".","SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  'Bootup Baltimore' AND t3.sex  =  'F'","['club', 'member_of_club', 'student']",3,3+,0.2016289592760181,False,False,True,"SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  [PLACEHOLDER-TYPE:STRING] AND t3.sex  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of students who are members of a specific club and belong to a certain gender. The placeholders in the WHERE clause represent the club's name and the student's gender.
train.4277,club_1,"Find the club which has the largest number of members majoring in ""600"".",SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  '600' GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1,"['club', 'member_of_club', 'student']",3,3+,0.2239999999999999,False,False,True,SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  [PLACEHOLDER-TYPE:STRING] GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of clubs that students, majoring in a specific field of study, are members of. The clubs are grouped by their names and ordered by the number of members in descending order, with a limit on the number of clubs returned. The placeholders in the WHERE clause and LIMIT clause represent the major of the students and the maximum number of clubs to display, respectively."
train.4278,club_1,Find the name of the club that has the most female students.,SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  'F' GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1,"['club', 'member_of_club', 'student']",3,3+,0.2239999999999999,False,False,True,SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  [PLACEHOLDER-TYPE:STRING] GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of clubs that have the highest number of members of a specific gender. The placeholders in the WHERE clause represent the gender of the students, and the LIMIT clause allows for specifying the maximum number of clubs to return."
train.4312,club_1,"List the clubs that have at least a member with advisor ""1121"".",SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121,"['club', 'member_of_club', 'student']",3,3+,0.1679999999999999,False,True,False,SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the distinct names of clubs from the 'Club' table that are associated with students whose academic advisor matches a specified identifier. The placeholder in the WHERE clause represents the advisor's ID.
train.4324,tracking_grants_for_research,What is the total grant amount of the organisations described as research?,SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research',"['grants', 'organisation_types', 'organisations']",3,3+,0.1425882352941176,True,False,False,SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  [PLACEHOLDER-TYPE:STRING],"This virtual table calculates the total grant amount from the 'Grants' table for organisations of a specific type. It joins the 'Grants' table with the 'Organisations' table to link grants to their respective organisations, and further joins with the 'Organisation_Types' table to filter by the organisation type description. The placeholder in the WHERE clause represents the specific organisation type description being queried."
train.4327,tracking_grants_for_research,From what date and to what date do the staff work on a project that has the most staff and has staff in a leader role?,"SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'",['project_staff'],1,1,0.3211583710407238,False,False,True,"SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER] ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the start and end dates of staff involvement in projects. It combines two sets of data: the first set includes dates for the top N projects with the most staff members, while the second set includes dates for staff members with a specific role. The placeholders represent the number of top projects to retrieve and the role code for filtering staff members."
train.4328,tracking_grants_for_research,Find the organisation ids and details of the organisations which are involved in,"SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000","['grants', 'organisations']",2,2,0.2576289592760181,False,False,True,"SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of organisation IDs and their corresponding details from the 'Organisations' table, which are associated with grants from the 'Grants' table. The results are grouped by organisation ID, and only those organisations that have a total grant amount exceeding a specified threshold are included, as indicated by the placeholder in the HAVING clause."
train.4330,tracking_grants_for_research,What is the organisation type and id of the organisation which has the most number of research staff?,"SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1","['organisations', 'research_staff']",2,2,0.2061176470588234,False,True,False,"SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of organisation types and their corresponding organisation IDs from the 'Organisations' table. It joins with the 'Research_Staff' table to filter organisations based on the staff members employed by them. The results are grouped by organisation ID and ordered by the number of research staff associated with each organisation, limiting the output to a specified number of results."
train.4331,tracking_grants_for_research,What is the type and id of the organization that has the most research staff?,"SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1","['organisations', 'research_staff']",2,2,0.2061176470588234,False,True,False,"SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of organisation types and their corresponding organisation IDs from the 'Organisations' table. It joins with the 'Research_Staff' table to filter organisations based on the staff members employed by them. The results are grouped by organisation ID and ordered by the count of research staff in descending order, with a limit on the number of results returned as specified by a placeholder."
train.4333,tracking_grants_for_research,What is the type of the organization with the most research staff?,SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1,"['organisations', 'research_staff']",2,2,0.1679999999999999,False,True,False,SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of organisation types associated with research staff, grouped by the organisation type and ordered by the number of research staff in each type. The placeholder in the LIMIT clause allows the user to specify the maximum number of organisation types to retrieve."
train.4334,tracking_grants_for_research,Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described,SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research',"['grants', 'organisation_types', 'organisations', 'documents']",4,3+,0.1807058823529412,False,True,False,SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  [PLACEHOLDER-TYPE:NUMBER] AND T4.organisation_type_description  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the sent dates of documents from the 'Documents' table that are associated with grants exceeding a specified amount. The query joins multiple tables: 'Grants' to link grants with documents, 'Organisations' to connect grants to their respective organisations, and 'Organisation_Types' to filter organisations based on their type description. The placeholders represent the grant amount and the organisation type description, allowing users to specify their criteria."
train.4335,tracking_grants_for_research,What are the send dates for all documents that have a grant amount of more than 5000 and are involved in research?,SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research',"['grants', 'organisation_types', 'organisations', 'documents']",4,3+,0.1807058823529412,False,True,False,SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  [PLACEHOLDER-TYPE:NUMBER] AND T4.organisation_type_description  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the sent dates of documents from the 'Documents' table that are associated with grants exceeding a specified amount. The query joins multiple tables: 'Grants' to link grants to documents, 'Organisations' to connect grants to their respective organisations, and 'Organisation_Types' to filter based on the type of organisation. The placeholders represent the grant amount and the organisation type description."
train.4343,tracking_grants_for_research,When did researchers start and stop working?,"SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'",['project_staff'],1,1,0.1807058823529412,False,True,False,"SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the start and end dates of staff members' involvement in projects from the 'Project_Staff' table, filtered by a specific role code. The placeholder in the WHERE clause represents the role of the staff member."
train.4349,tracking_grants_for_research,What are the details for the project whose research has been published?,SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%',"['project_outcomes', 'projects', 'research_outcomes']",3,3+,0.1425882352941176,True,False,False,SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the details of projects from the 'Projects' table that are associated with specific research outcomes. The query joins the 'Projects' table with the 'Project_Outcomes' table and the 'Research_Outcomes' table to filter projects based on a particular outcome description. The placeholder in the WHERE clause represents the outcome description being searched for.
train.4356,tracking_grants_for_research,Which project made the most number of outcomes? List the project details and the project id.,"SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1","['project_outcomes', 'projects']",2,2,0.2061176470588234,False,True,False,"SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of project details and their corresponding project IDs from the 'Projects' table. It joins with the 'Project_Outcomes' table to aggregate the outcomes associated with each project. The results are grouped by project ID and ordered by the count of outcomes in descending order, allowing the user to limit the number of results returned based on a specified number."
train.4360,tracking_grants_for_research,"Which organisation hired the most number of research staff? List the organisation id, type and detail.","SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1","['organisations', 'research_staff']",2,2,0.2319999999999999,False,False,True,"SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of organisations along with their types and details, specifically focusing on those that employ research staff. The results are grouped by organisation ID and ordered by the number of research staff associated with each organisation, with a limit on the number of results returned based on a specified numeric value."
train.4361,tracking_grants_for_research,"What are the ids, types, and details of the organization with the most research staff?","SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1","['organisations', 'research_staff']",2,2,0.2319999999999999,False,False,True,"SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of organisations along with their types and details, specifically focusing on those that employ research staff. The results are grouped by organisation ID and ordered by the number of research staff associated with each organisation, with a limit on the number of results returned as specified by the placeholder."
train.4363,tracking_grants_for_research,"For each staff id, what is the description of the role that is involved with the most number of projects?","SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1","['project_outcomes', 'project_staff', 'staff_roles']",3,3+,0.2061176470588234,False,True,False,"SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of staff members along with their role descriptions from the 'Staff_Roles' and 'Project_Staff' tables. It joins these tables based on the role code and groups the results by staff ID to count the number of associated project outcomes. The results are ordered by the count in descending order, and a placeholder is included to limit the number of results returned."
train.4367,tracking_grants_for_research,"For grants that have descriptions of Regular and Initial Applications, what are their start dates?",SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application',"['grants', 'document_types', 'documents']",3,3+,0.2195113122171945,False,False,True,SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  [PLACEHOLDER-TYPE:STRING],"This virtual table retrieves the start dates of grants from the 'Grants' table that are associated with documents of a specific type. The query uses joins to connect the 'Grants', 'Documents', and 'Document_Types' tables based on their foreign key relationships. The placeholder in the WHERE clause represents the description of the document type, allowing users to specify which document type they are interested in."
train.4369,tracking_grants_for_research,"For each grant id, how many documents does it have, and which one has the most?","SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1",['documents'],1,1,0.2061176470588234,False,True,False,"SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table summarizes the number of documents associated with each grant from the 'Documents' table. It groups the results by 'grant_id' and orders them in descending order based on the count of documents, allowing the user to specify a limit on the number of results returned."
train.4372,tracking_grants_for_research,What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order.,SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details,"['organisation_types', 'organisations']",2,2,0.1679999999999999,False,True,False,SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  [PLACEHOLDER-TYPE:STRING] ORDER BY organisation_details,"This virtual table provides the details of organisations that belong to a specific type, as defined in the 'Organisation_Types' table. The placeholder in the WHERE clause represents the description of the organisation type, allowing users to filter the results accordingly."
train.4380,tracking_grants_for_research,What are the result description of the project whose detail is 'sint'?,SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint',"['project_outcomes', 'projects', 'research_outcomes']",3,3+,0.1425882352941176,True,False,False,SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the outcome descriptions of research outcomes associated with a specific project. The placeholders in the WHERE clause represent the detailed description of the project being queried.
train.4381,tracking_grants_for_research,What is the description for the results whose project detail is 'sint'?,SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint',"['project_outcomes', 'projects', 'research_outcomes']",3,3+,0.1425882352941176,True,False,False,SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the outcome descriptions of research outcomes associated with specific projects. The query joins the 'Research_Outcomes' table with the 'Project_Outcomes' table and the 'Projects' table to filter the results based on the project details. The placeholder in the WHERE clause represents the specific project details being queried.
train.4383,tracking_grants_for_research,What is the id of the organization with the maximum number of outcomes and how many outcomes are there?,"SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1","['project_outcomes', 'projects']",2,2,0.2061176470588234,False,True,False,"SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a count of projects grouped by organisation, showing how many project outcomes each organisation has. The placeholder in the LIMIT clause allows the user to specify the maximum number of organisations to display based on their project outcomes."
train.4384,tracking_grants_for_research,List the project details of the projects launched by the organisation,SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 ),['projects'],1,1,0.1985882352941176,False,True,False,SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER] ),This virtual table provides a list of project details from the 'Projects' table for organisations that have the highest number of associated projects. The placeholder in the LIMIT clause allows the user to specify the maximum number of organisations to retrieve based on their project count.
train.4392,tracking_grants_for_research,What are the staff roles of the staff who,SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18',['project_staff'],1,1,0.1807058823529412,False,True,False,SELECT role_code FROM Project_Staff WHERE date_from  >  [PLACEHOLDER-TYPE:STRING] AND date_to  <  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the role codes of staff members associated with projects, filtered by their involvement dates. The placeholders in the WHERE clause represent the start and end dates for the staff members' participation in the projects."
train.4394,tracking_grants_for_research,What are the descriptions of all the project outcomes?,SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code,"['project_outcomes', 'research_outcomes']",2,2,0.0865882352941176,True,False,False,SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code,"This virtual table describes the outcome descriptions of research outcomes associated with specific project outcomes. The join between the 'Research_Outcomes' and 'Project_Outcomes' tables is based on the matching outcome codes, allowing users to retrieve detailed descriptions of research outcomes linked to their respective projects."
train.4397,tracking_grants_for_research,What is the most common role for the staff?,SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1,['project_staff'],1,1,0.1679999999999999,False,True,False,SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of unique role codes from the 'Project_Staff' table, grouped by the role code and ordered by the number of occurrences in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of role codes to retrieve."
train.4410,network_2,Who is the oldest person whose job is student?,SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' ),['person'],1,1,0.1940995475113122,False,True,False,SELECT name FROM Person WHERE job  =  [PLACEHOLDER-TYPE:STRING] AND age  =  (SELECT max(age) FROM person WHERE job  =  [PLACEHOLDER-TYPE:STRING] ),This virtual table describes the names of individuals from the 'Person' table who have a specific job title and are the oldest among those with the same job. The placeholders in the WHERE clause represent the job title being queried.
train.4439,network_2,What is the name and age of every male? Order the results by age.,SELECT name FROM Person WHERE gender  =  'male' ORDER BY age,['person'],1,1,0.1679999999999999,False,True,False,SELECT name FROM Person WHERE gender  =  [PLACEHOLDER-TYPE:STRING] ORDER BY age,"This virtual table lists the names of individuals from the 'Person' table who belong to a specific gender. The results are ordered by their age, allowing for easy identification of individuals within that gender category."
train.4441,network_2,What are the names and ages of every person who is a friend of both Dan and Alice?,"SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'","['personfriend', 'person']",2,2,0.2576289592760181,False,False,True,"SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and ages of persons from the 'Person' table who have mutual friendships with a specific friend. The placeholders in the WHERE clause represent the names of the friends being queried.
train.4444,network_2,Find the name of the person who has friends with age above 40 and under age 30?,SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30),"['personfriend', 'person']",2,2,0.3007058823529411,False,False,True,SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  [PLACEHOLDER-TYPE:NUMBER]) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  [PLACEHOLDER-TYPE:NUMBER]),This virtual table identifies individuals from the 'Person' table who have friends that are both older and younger than a specified age. The placeholders in the query represent the age limits for filtering friends.
train.4445,network_2,What are the names of every person who has a friend over 40 and under 30?,SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30),"['personfriend', 'person']",2,2,0.3007058823529411,False,False,True,SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  [PLACEHOLDER-TYPE:NUMBER]) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  [PLACEHOLDER-TYPE:NUMBER]),This virtual table identifies individuals from the 'Person' table who have friends that are both older and younger than a specified age. The placeholders in the query represent the age limits for filtering friends.
train.4449,network_2,What are the names of the people who have no friends who are students?,SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student',"['personfriend', 'person']",2,2,0.2367058823529411,False,False,True,SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies the names of individuals from the 'Person' table who do not have any friends that work in a specific occupation. The placeholder in the query allows for the specification of the job title to filter out those individuals accordingly.
train.4454,network_2,Find the name of persons who are friends with Bob.,SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob',"['personfriend', 'person']",2,2,0.1425882352941176,True,False,False,SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of persons from the 'Person' table who have a specific friend listed in the 'PersonFriend' table. The placeholder in the WHERE clause represents the friend's name.
train.4455,network_2,What are the names of all of Bob's friends?,SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob',"['personfriend', 'person']",2,2,0.1425882352941176,True,False,False,SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of individuals from the 'Person' table who have a specific friend listed in the 'PersonFriend' table. The placeholder in the WHERE clause represents the friend's name.
train.4456,network_2,Find the names of females who are friends with Zach,SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female',"['personfriend', 'person']",2,2,0.1635113122171945,True,False,False,SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  [PLACEHOLDER-TYPE:STRING] AND T1.gender  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of persons from the 'Person' table who have a specific friend and belong to a certain gender. The placeholders in the WHERE clause represent the friend's name and the gender of the person.
train.4465,network_2,What are the different names of friends who are younger than the average age for a friend?,SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person),"['personfriend', 'person']",2,2,0.1985882352941176,False,True,False,SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person),This virtual table lists the distinct names of friends of persons who are younger than the average age of all persons in the 'Person' table. The placeholder in the WHERE clause represents the age condition based on the average age.
train.4466,network_2,Who has friends that are older than the average age? Print their friends and their ages as well,"SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)","['personfriend', 'person']",2,2,0.2625882352941177,False,False,True,"SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)",This virtual table provides a list of distinct friends and their names along with the ages of those friends who are older than the average age of all persons in the 'Person' table. The placeholders in the query allow for dynamic filtering based on the average age calculation.
train.4467,network_2,"Whare the names, friends, and ages of all people who are older than the average age of a person?","SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)","['personfriend', 'person']",2,2,0.2625882352941177,False,False,True,"SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)",This virtual table provides a list of distinct friends and their names along with the ages of those friends who are older than the average age of all persons in the 'Person' table. The placeholders in the query allow for dynamic filtering based on the average age calculation.
train.4473,network_2,What are the names of all people who are friends with Alice for the shortest amount of time?,SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice'),['personfriend'],1,1,0.1940995475113122,False,True,False,SELECT name FROM PersonFriend WHERE friend =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  [PLACEHOLDER-TYPE:STRING]),"This virtual table describes the names of persons who have a specific friend, filtered by the year when the friendship was established. The placeholders in the WHERE clause represent the friend's name and the year of the friendship."
train.4475,network_2,"What are the names, ages, and jobs of all people who are friends with Alice for the longest amount of time?","SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')","['personfriend', 'person']",2,2,0.2580995475113122,False,False,True,"SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  [PLACEHOLDER-TYPE:STRING] AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  [PLACEHOLDER-TYPE:STRING])","This virtual table provides the names, ages, and job titles of individuals from the 'Person' table who have a specific friend, along with the most recent year of friendship established with that friend. The placeholders in the WHERE clause represent the friend's name."
train.4478,network_2,Which person whose friends have the oldest average age?,"SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1","['personfriend', 'person']",2,2,0.2061176470588234,False,False,True,"SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names of friends along with the average age of their respective friends from the 'Person' table. The results are grouped by the friend's name and ordered by the average age in descending order, with a limit on the number of results specified by a placeholder."
train.4480,network_2,What is the total number of people who has no friend living in the city of Austin.,SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin'),"['personfriend', 'person']",2,2,0.2367058823529411,False,False,True,SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  [PLACEHOLDER-TYPE:STRING]),This virtual table counts the number of distinct persons from the 'PersonFriend' table who have friends that do not reside in a specified city. The placeholder in the WHERE clause represents the name of the city to filter out friends.
train.4503,document_management,Find the types of documents with more than 4 documents.,SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4,['documents'],1,1,0.2195113122171945,False,False,True,SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a summary of the different types of documents stored in the 'Documents' table. It groups the documents by their type and filters the results to show only those document types that have been accessed more than a specified number of times, represented by a placeholder for numeric values."
train.4504,document_management,What are the codes of types of documents of which there are for or more?,SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4,['documents'],1,1,0.2195113122171945,False,False,True,SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a summary of the different types of documents stored in the 'Documents' table. It groups the documents by their type and filters the results to show only those document types that have been accessed more than a specified number of times, represented by a placeholder for numeric values."
train.4505,document_management,Find the total access count of all documents in the most popular document type.,SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1,['documents'],1,1,0.1679999999999999,False,True,False,SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],This virtual table summarizes the total access counts of documents grouped by their type. The placeholder in the LIMIT clause allows the user to specify the maximum number of document types to retrieve based on their access counts.
train.4525,document_management,Find names of the document without any images.,SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id,"['document_sections', 'document_sections_images', 'documents']",3,3+,0.1425882352941176,True,False,False,SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id,"This virtual table lists the names of documents from the 'Documents' table that do not have any associated images in their sections. The query uses an EXCEPT clause to filter out document names that are linked to sections containing images, ensuring only documents without images are returned."
train.4532,document_management,Count the number of users that are logged in.,SELECT count(*) FROM users WHERE user_login  =  1,['users'],1,1,0.1425882352941176,True,False,False,SELECT count(*) FROM users WHERE user_login  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table counts the number of users in the 'Users' table based on a specific login username. The placeholder in the WHERE clause represents the user's login name.
train.4733,department_store,"Return the distinct name of customers whose order status is Pending, in the order of customer id.",SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Pending' ORDER BY T2.customer_id,"['customer_orders', 'customers']",2,2,0.1889230769230769,False,True,False,SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T2.customer_id,This virtual table provides a list of distinct customer names from the 'Customers' table who have placed orders with a specific status. The placeholder in the WHERE clause represents the order status code that is being filtered.
train.4736,department_store,What are the names and addressed of customers who have both New and Pending orders?,"SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'New' INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Pending'","['customer_orders', 'customers']",2,2,0.2576289592760181,False,False,True,"SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the names and addresses of customers who have placed orders with a specific status. The query uses an INTERSECT operation to find customers who have multiple orders with the same status, represented by a placeholder in the WHERE clause."
train.4749,department_store,Find the id and name of the staff who has been assigned for the shortest period.,"SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1","['staff_department_assignments', 'staff']",2,2,0.1501176470588235,True,False,False,"SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of staff members along with their unique identifiers from the 'Staff' table. It joins the 'Staff' table with the 'Staff_Department_Assignments' table to include only those staff members who have been assigned to a department. The results are ordered by the duration of their assignment, calculated as the difference between the end date and the start date of their assignment. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return."
train.4750,department_store,What is the id and name of the staff who has been assigned for the least amount of time?,"SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1","['staff_department_assignments', 'staff']",2,2,0.1501176470588235,True,False,False,"SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of staff members along with their unique identifiers from the 'Staff' table. It joins the 'Staff' table with the 'Staff_Department_Assignments' table to include only those staff members who have been assigned to a department. The results are ordered by the duration of their assignment, calculated as the difference between the end date and start date of their assignment. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return."
train.4753,department_store,Find the ids of all distinct customers who made order after some orders that were Cancelled.,SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  'Cancelled'),['customer_orders'],1,1,0.1985882352941176,False,True,False,SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists unique customer identifiers from the 'Customer_Orders' table for orders placed after a specific date. The placeholder in the subquery represents the order status code used to filter the earliest order date.
train.4755,department_store,What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?,SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff'),['staff_department_assignments'],1,1,0.1731764705882353,False,True,False,SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists the unique identifiers of staff members who were assigned to a department and whose assignment ended before the most recent assignment date for a specific job title. The placeholder in the subquery represents the job title code to filter the results accordingly.
train.4758,department_store,Return the names and ids of customers who have TN in their address.,"SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE '%TN%'",['customers'],1,1,0.1807058823529412,False,True,False,"SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and unique identifiers of customers from the 'Customers' table whose addresses match a specific pattern. The placeholder in the WHERE clause represents the address pattern to filter the results.
train.4760,department_store,What are the names and genders of staff who were assigned in 2016?,"SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE '2016%'","['staff_department_assignments', 'staff']",2,2,0.1807058823529412,False,True,False,"SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and genders of staff members from the 'Staff' table who have been assigned to a department starting from a specific date. The placeholder in the WHERE clause represents the date of assignment.
train.4762,department_store,What are the names of staff who have been assigned multiple jobs?,SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1,"['staff_department_assignments', 'staff']",2,2,0.2195113122171945,False,False,True,SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table describes the names of staff members from the 'Staff' table who are assigned to departments, filtered to include only those with more than a specified number of assignments. The placeholder in the HAVING clause represents the minimum count of assignments required."
train.4792,department_store,What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment?,"SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE '%WY%' AND payment_method_code != 'Credit Card'",['customers'],1,1,0.2188235294117647,False,False,True,"SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE [PLACEHOLDER-TYPE:STRING] AND payment_method_code != [PLACEHOLDER-TYPE:STRING]",This virtual table describes the unique identifiers and names of customers from the 'Customers' table who have a specific address pattern and do not use a certain payment method. The placeholders in the WHERE clause represent the address pattern and the payment method code.
train.4793,department_store,Find the average price of all product clothes.,SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes',['products'],1,1,0.1425882352941176,True,False,False,SELECT avg(product_price) FROM products WHERE product_type_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average price of products from the 'Products' table that belong to a specific product type. The placeholder in the WHERE clause represents the product type code.
train.4795,department_store,Find the name of the most expensive hardware product.,SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1,['products'],1,1,0.1679999999999999,True,False,False,SELECT product_name FROM products WHERE product_type_code  =  [PLACEHOLDER-TYPE:STRING] ORDER BY product_price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of product names from the 'Products' table that match a specific product type code. The results are ordered by the product price in descending order, and the number of results returned is limited by a placeholder for numeric values."
train.4902,store_product,Find the list of page size which have more than 3 product listed,SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3,['product'],1,1,0.2195113122171945,False,False,True,SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the maximum page sizes of products from the 'product' table, grouped by their maximum page size. The placeholder in the HAVING clause represents the minimum count of products that must share the same maximum page size to be included in the results."
train.4903,store_product,What is the maximum page size for everything that has more than 3 products listed?,SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3,['product'],1,1,0.2195113122171945,False,False,True,SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the maximum page sizes of products from the 'product' table, grouped by their maximum page size. The placeholder in the HAVING clause represents the minimum count of products that must share the same maximum page size to be included in the results."
train.4913,store_product,What is the total number of residents for the districts with the 3 largest areas?,SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3,['district'],1,1,0.1119999999999999,True,False,False,SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table calculates the total population of cities within districts from the 'district' table, ordering the results by the area of the cities in descending order. The placeholder in the LIMIT clause represents the maximum number of results to return."
train.4917,store_product,What are the names of all the stores located in Khanewal District?,SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  'Khanewal District',"['store_district', 'store', 'district']",3,3+,0.1425882352941176,True,False,False,SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of stores located in a specific district. The query joins the 'store', 'store_district', and 'district' tables to filter stores based on the district's name provided as a placeholder."
train.4924,store_product,Find the city with the most number of stores.,SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1,"['store_district', 'store', 'district']",3,3+,0.1679999999999999,False,True,False,SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of cities where the headquarters of districts are located, based on the stores associated with those districts. The results are grouped by the city name and ordered by the number of stores in descending order, with a limit on the number of cities returned, specified by a placeholder for numeric values."
train.4930,store_product,"Find products with max page size as ""A4"" and pages per minute color smaller than 5.",SELECT product FROM product WHERE max_page_size  =  'A4' AND pages_per_minute_color  <  5,['product'],1,1,0.1807058823529412,False,True,False,SELECT product FROM product WHERE max_page_size  =  [PLACEHOLDER-TYPE:STRING] AND pages_per_minute_color  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the products from the 'product' table that have a specific maximum page size and a print speed in pages per minute for color output that is below a certain threshold. The placeholders in the WHERE clause represent the maximum page size and the maximum pages per minute for color printing.
train.4932,store_product,"Find products with max page size as ""A4"" or pages per minute color smaller than 5.",SELECT product FROM product WHERE max_page_size  =  'A4' OR pages_per_minute_color  <  5,['product'],1,1,0.1807058823529412,False,True,False,SELECT product FROM product WHERE max_page_size  =  [PLACEHOLDER-TYPE:STRING] OR pages_per_minute_color  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the products from the 'product' table that either have a specific maximum page size or have a print speed in pages per minute for color output that is below a certain threshold. The placeholders in the WHERE clause represent the maximum page size and the print speed limit.
train.4935,store_product,"What are all of the products whose name includes the substring ""Scanner""?",SELECT product FROM product WHERE product LIKE '%Scanner%',['product'],1,1,0.1425882352941176,True,False,False,SELECT product FROM product WHERE product LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the names or descriptions of products from the 'product' table that match a specific pattern. The placeholder in the LIKE clause represents the search term for the product name or description.
train.4937,store_product,What is the most common maximum page size?,SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1,['product'],1,1,0.1679999999999999,False,True,False,SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of maximum page sizes from the 'product' table, grouped by the maximum page size and ordered by the frequency of each size in descending order. The placeholder in the LIMIT clause represents the number of results to return."
train.4938,store_product,Find the name of the products that are not using the most frequently-used max page size.,SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1),['product'],1,1,0.1985882352941176,False,False,True,SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]),This virtual table lists the names or descriptions of products from the 'product' table that do not have the most common maximum page size. The placeholder in the subquery represents a numeric value to limit the results based on the count of maximum page sizes.
train.4947,soccer_2,"How many students, on average, does each college have enrolled?",SELECT avg(enr) FROM College,['college'],1,1,0.0865882352941176,True,False,False,SELECT avg(enr) FROM College,This virtual table calculates the average enrollment number of students across all colleges listed in the 'College' table. The result provides insight into the overall student population in these institutions.
train.4955,soccer_2,How many hours do the players train on average?,SELECT avg(HS) FROM Player,['player'],1,1,0.0865882352941176,True,False,False,SELECT avg(HS) FROM Player,This virtual table calculates the average high school attended by players from the 'Player' table. The placeholder in the SELECT clause represents the high school data that will be averaged.
train.4956,soccer_2,Find the name and training hours of players whose hours are below 1500.,"SELECT pName ,  HS FROM Player WHERE HS  <  1500",['player'],1,1,0.1807058823529412,False,True,False,"SELECT pName ,  HS FROM Player WHERE HS  <  [PLACEHOLDER-TYPE:NUMBER]",This virtual table describes the names and high schools of players from the 'Player' table who attended high schools with an enrollment number less than a specified value. The placeholder in the WHERE clause represents the enrollment number of students at the high school.
train.4961,soccer_2,What are the different types of player positions?,SELECT count(DISTINCT pPos) FROM tryout,['tryout'],1,1,0.1119999999999999,True,False,False,SELECT count(DISTINCT pPos) FROM tryout,This virtual table provides the count of distinct positions that players are trying out for in the 'Tryout' table. The result will give an overview of the variety of positions available for players during tryouts.
train.4962,soccer_2,How many students got accepted after the tryout?,SELECT count(*) FROM tryout WHERE decision  =  'yes',['tryout'],1,1,0.1425882352941176,True,False,False,SELECT count(*) FROM tryout WHERE decision  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the total number of players who received a specific decision regarding their tryout from the 'Tryout' table. The placeholder in the WHERE clause represents the decision made about the players' tryouts.
train.4966,soccer_2,"Find the max, average and min training hours of all players.","SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player",['player'],1,1,0.1247058823529411,True,False,False,"SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player","This virtual table provides the average, maximum, and minimum values of the high school attended by players from the 'Player' table. The placeholders in the SELECT clause represent the calculated statistics for the high school data."
train.4967,soccer_2,"What is the average, maximum, and minimum for the number of hours spent training?","SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player",['player'],1,1,0.1247058823529411,True,False,False,"SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player","This virtual table provides the average, maximum, and minimum values of the high school attended by players from the 'Player' table. The placeholders in the SELECT clause represent the calculated statistics for the high school data."
train.4970,soccer_2,What are the names of players whose training hours is between 500 and 1500?,SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500,['player'],1,1,0.1425882352941176,True,False,False,SELECT pName FROM Player WHERE HS BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of players from the 'Player' table who attended high schools within a specific range of enrollment numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the enrollment numbers.
train.4971,soccer_2,What are the names of players who train between 500 and 1500 hours?,SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500,['player'],1,1,0.1425882352941176,True,False,False,SELECT pName FROM Player WHERE HS BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of players from the 'Player' table who attended high schools within a specific range of enrollment numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the enrollment numbers.
train.4975,soccer_2,What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?,"SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = 'LA'",['college'],1,1,0.2188235294117647,False,False,True,"SELECT cName ,  enr FROM College WHERE enr  >  [PLACEHOLDER-TYPE:NUMBER] AND state = [PLACEHOLDER-TYPE:STRING]",This virtual table provides the names and enrollment numbers of colleges from the 'College' table that have an enrollment greater than a specified number and are located in a specific state. The placeholders in the WHERE clause represent the minimum enrollment number and the state name.
train.4981,soccer_2,What are the name of the players who received a card in descending order of the hours of training?,SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC,['player'],1,1,0.1679999999999999,False,True,False,SELECT pName FROM Player WHERE yCard  =  [PLACEHOLDER-TYPE:STRING] ORDER BY HS DESC,"This virtual table describes the names of players from the 'Player' table who have a specific year of eligibility. The results are ordered by the high school attended, in descending order. The placeholder in the WHERE clause represents the year of the player's card."
train.4984,soccer_2,Which position is most popular among players in the tryout?,SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1,['tryout'],1,1,0.1679999999999999,False,True,False,SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of player positions from the 'Tryout' table, grouped by position and ordered by the number of players trying out for each position. The placeholder in the LIMIT clause represents the maximum number of positions to return."
train.4985,soccer_2,What was the most popular position at tryouts?,SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1,['tryout'],1,1,0.1679999999999999,False,True,False,SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of player positions from the 'Tryout' table, grouped by position and ordered by the number of players trying out for each position. The placeholder in the LIMIT clause represents the maximum number of positions to return."
train.4988,soccer_2,What is minimum hours of the students playing in different position?,"SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos","['player', 'tryout']",2,2,0.1807058823529412,False,True,False,"SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos","This virtual table summarizes the minimum high school attended by players for each position they are trying out for, based on the data from the 'Tryout' and 'Player' tables. The placeholder in the SELECT clause represents the high school name, while the position is grouped accordingly."
train.4989,soccer_2,"For each position, what is the minimum time students spent practicing?","SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos","['player', 'tryout']",2,2,0.1807058823529412,False,True,False,"SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos","This virtual table provides the minimum high school name associated with each position that players are trying out for, by joining the 'Tryout' and 'Player' tables. The placeholder in the SELECT clause represents the high school name, while the grouping is done by the position the player is trying out for."
train.5003,soccer_2,What are the names and hours spent practicing of every student who received a yes at tryouts?,"SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'","['player', 'tryout']",2,2,0.1807058823529412,False,True,False,"SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the names and high schools of players from the 'Player' table who have a specific decision regarding their tryout. The placeholder in the WHERE clause represents the decision made about the player's tryout.
train.5007,soccer_2,What are the names of all students who successfully tried out for the position of striker?,SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker',"['player', 'tryout']",2,2,0.1635113122171945,False,True,False,SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  [PLACEHOLDER-TYPE:STRING] AND T2.pPos  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of players from the 'Player' table who have participated in tryouts and received a specific decision for a particular position. The placeholders in the WHERE clause represent the decision made regarding the player's tryout and the position they are trying out for.
train.5013,soccer_2,What is the average number of hours spent practicing for students who got rejected?,SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no',"['player', 'tryout']",2,2,0.1425882352941176,True,False,False,SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average high school attended by players who participated in tryouts and received a specific decision. The placeholder in the WHERE clause represents the decision made regarding the player's tryout.
train.5018,soccer_2,Which college has any student who is a goalie and succeeded in the tryout.,SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie',['tryout'],1,1,0.1635113122171945,False,True,False,SELECT cName FROM  tryout WHERE decision  =  [PLACEHOLDER-TYPE:STRING] AND pPos  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of colleges from the 'Tryout' table where players have received a specific decision regarding their tryout for a particular position. The placeholders in the WHERE clause represent the decision made and the position the player is trying out for.
train.5022,soccer_2,What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.,"SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'","['tryout', 'college']",2,2,0.2061176470588234,False,False,True,"SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides a distinct list of states and enrollment numbers from the 'College' table for colleges where players have participated in tryouts. The placeholder in the WHERE clause represents the decision made regarding the player's tryout.
train.5023,soccer_2,"How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges?","SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'","['tryout', 'college']",2,2,0.2061176470588234,False,False,True,"SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides a distinct list of states and enrollment numbers from the 'College' table for colleges where players have participated in tryouts. The placeholder in the WHERE clause represents the decision made regarding the player's tryout.
train.5026,soccer_2,Find the names of schools that have some students playing in goalie and mid positions.,SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid',['tryout'],1,1,0.2195113122171945,False,False,True,SELECT cName FROM  tryout WHERE pPos  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT cName FROM  tryout WHERE pPos  =  [PLACEHOLDER-TYPE:STRING],"This virtual table identifies the colleges where players are trying out for two specific positions. The placeholders in the query represent the positions for which the players are trying out, allowing users to specify different positions to find common colleges for those tryouts."
train.5028,soccer_2,Find the names of states that have some college students playing in goalie and mid positions.,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid',"['tryout', 'college']",2,2,0.2195113122171945,False,False,True,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  [PLACEHOLDER-TYPE:STRING],"This virtual table identifies the states where colleges are located that are hosting tryouts for a specific position. The query uses an intersection to find states that have tryouts for the same position, ensuring that only relevant states are returned. The placeholders in the WHERE clause represent the position for which players are trying out."
train.5029,soccer_2,What are the names of the states that have some college students playing in the positions of goalie and mid-field?,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid',"['tryout', 'college']",2,2,0.2195113122171945,False,False,True,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  [PLACEHOLDER-TYPE:STRING],"This virtual table identifies the states of colleges that are hosting tryouts for a specific position. The query uses an intersection to find states where the tryout position matches the specified placeholder value, ensuring that only relevant states are returned."
train.5030,soccer_2,How many schools have some students playing in goalie and mid positions.,SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'),['tryout'],1,1,0.1171764705882353,True,False,False,SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT cName FROM  tryout WHERE pPos  =  [PLACEHOLDER-TYPE:STRING]),"This virtual table counts the number of colleges where players are trying out for two specific positions. The placeholders in the query represent the positions for which the players are trying out, allowing users to specify any two positions they are interested in."
train.5037,soccer_2,What is the count of states with college students playing in the mid position but not as goalies?,SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'),"['tryout', 'college']",2,2,0.1171764705882353,True,False,False,SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  [PLACEHOLDER-TYPE:STRING]),"This virtual table counts the number of unique states where colleges are located that have hosted tryouts for a specific position, excluding those states that have hosted tryouts for the same position. The placeholders in the query represent the position for which the tryouts are being considered."
train.5039,soccer_2,What are the states with colleges that have enrollments less than the some other college?,SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college),['college'],1,1,0.1985882352941176,False,False,True,SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college),"This virtual table provides a list of distinct states where colleges are located, specifically filtering for those colleges that have an enrollment number less than the maximum enrollment number found in the 'College' table. The placeholder in the WHERE clause represents the enrollment number for comparison."
train.5102,cre_Drama_Workshop_Groups,"Show the minimum, average, maximum order quantity of all invoices.","SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES",['invoices'],1,1,0.1247058823529411,True,False,False,"SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES","This virtual table provides the minimum, average, and maximum quantities of products ordered as recorded in the 'INVOICES' table. The placeholders in the SELECT statement represent the aggregated values of the 'Order_Quantity' column."
train.5118,cre_Drama_Workshop_Groups,What is the payment method code used by the most orders?,SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1,['invoices'],1,1,0.1679999999999999,False,True,False,SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of unique payment method codes used in the invoices, grouped by the payment method code and ordered by the frequency of their usage. The placeholder in the LIMIT clause allows the user to specify the maximum number of payment methods to retrieve."
train.5127,cre_Drama_Workshop_Groups,Give me the descriptions of the service types that cost more than 100.,SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Price  >  100,"['services', 'ref_service_types']",2,2,0.1425882352941176,True,False,False,SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Price  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table describes the service type descriptions from the 'Ref_Service_Types' table that are associated with services in the 'Services' table, filtered by a specific product price. The placeholder in the WHERE clause represents the minimum product price to filter the results."
train.5134,cre_Drama_Workshop_Groups,"What are the names of workshop groups in which services with product name ""film"" are performed?","SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  'film'","['services', 'drama_workshop_groups']",2,2,0.1807058823529412,False,False,True,"SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the phone number and email address of stores associated with specific drama workshop groups that offer a particular product. The placeholder in the WHERE clause represents the name of the product being queried.
train.5142,cre_Drama_Workshop_Groups,What are the order details of the products with price higher than 2000?,SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000,"['products', 'order_items']",2,2,0.1425882352941176,True,False,False,SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table retrieves additional details about order items from the 'Order_Items' table, specifically for those products whose price exceeds a specified amount. The placeholder in the WHERE clause represents the price threshold for filtering the products."
train.5143,cre_Drama_Workshop_Groups,Find the order detail for the products with price above 2000.,SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000,"['products', 'order_items']",2,2,0.1425882352941176,True,False,False,SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table retrieves additional details about order items from the 'Order_Items' table, specifically for those products whose price exceeds a specified amount. The placeholder in the WHERE clause represents the price threshold for filtering the products."
train.5160,cre_Drama_Workshop_Groups,What is the most frequent status of bookings?,SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1,['bookings'],1,1,0.1679999999999999,False,True,False,SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the unique status codes of bookings from the 'Bookings' table, grouped by their status and ordered by the count of bookings for each status in descending order. The placeholder in the LIMIT clause represents the maximum number of status codes to return."
train.5161,cre_Drama_Workshop_Groups,Which status code is the most common of all the bookings?,SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1,['bookings'],1,1,0.1679999999999999,False,True,False,SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the unique status codes of bookings from the 'Bookings' table, grouped by their status and ordered by the count of bookings for each status in descending order. The placeholder in the LIMIT clause represents the maximum number of status codes to return."
train.5162,cre_Drama_Workshop_Groups,"What are the names of the workshop groups that have bookings with status code ""stop""?",SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  'stop',"['drama_workshop_groups', 'bookings']",2,2,0.1425882352941176,True,False,False,SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the names of stores associated with bookings that have a specific status. The placeholder in the WHERE clause represents the status code of the booking.
train.5171,cre_Drama_Workshop_Groups,Give me the description of the service type that offers not only the photo product but also the film product.,SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film',"['services', 'ref_service_types']",2,2,0.2195113122171945,False,False,True,SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the service type descriptions associated with a specific product from the 'Services' table, ensuring that the same product name is used in both parts of the query. The placeholders in the WHERE clause represent the product's name."
train.5459,voter_2,Find the average age of female students.,SELECT avg(Age) FROM STUDENT WHERE Sex  =  'F',['student'],1,1,0.1425882352941176,True,False,False,SELECT avg(Age) FROM STUDENT WHERE Sex  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average age of students from the 'Student' table who belong to a specific gender. The placeholder in the WHERE clause represents the gender of the students.
train.5466,voter_2,What are the distinct president votes on 08/30/2015?,SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  '08/30/2015',['voting_record'],1,1,0.1679999999999999,False,True,False,SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a distinct list of presidential votes cast by students from the 'Voting_record' table, filtered by the registration date. The placeholder in the WHERE clause represents the specific registration date being queried."
train.5467,voter_2,Show all the distinct president votes made on 08/30/2015.,SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  '08/30/2015',['voting_record'],1,1,0.1679999999999999,False,True,False,SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a distinct list of presidential votes cast by students from the 'Voting_record' table, filtered by the date of registration. The placeholder in the WHERE clause represents the specific registration date being queried."
train.5476,voter_2,Find the distinct ages of students who have secretary votes in the fall election cycle.,SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  'Fall',"['student', 'voting_record']",2,2,0.1679999999999999,False,True,False,SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a distinct list of ages of students who voted for the secretary candidate in a specific election cycle. The placeholder in the WHERE clause represents the election cycle identifier.
train.5479,voter_2,Who served as an advisor for students who have treasurer votes in the spring election cycle?,SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  'Spring',"['student', 'voting_record']",2,2,0.1679999999999999,False,True,False,SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of unique academic advisors for students who voted for a specific treasurer in a given election cycle. The placeholder in the WHERE clause represents the election cycle identifier.
train.5486,voter_2,How many male (sex is M) students have class senator votes in the fall election cycle?,SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  'M' AND T2.Election_Cycle  =  'Fall',"['student', 'voting_record']",2,2,0.1635113122171945,False,True,False,SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  [PLACEHOLDER-TYPE:STRING] AND T2.Election_Cycle  =  [PLACEHOLDER-TYPE:STRING],This virtual table counts the number of students from the 'Student' table who are female or male and have participated in the voting process during a specific election cycle. The placeholders in the WHERE clause represent the gender of the students and the election cycle identifier.
train.5491,voter_2,"What is the average age of students who have city code ""NYC"" and have secretary votes for the spring election cycle?",SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  'NYC' AND T2.Election_Cycle  =  'Spring',"['student', 'voting_record']",2,2,0.1635113122171945,False,True,False,SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  [PLACEHOLDER-TYPE:STRING] AND T2.Election_Cycle  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average age of students from the 'Student' table who voted for a specific candidate in the 'Voting_record' table. The placeholders in the WHERE clause represent the city code where the students reside and the election cycle during which the votes were cast.
train.5492,voter_2,Find the average age of female (sex is F) students who have secretary votes in the spring election cycle.,SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  'F' AND T2.Election_Cycle  =  'Spring',"['student', 'voting_record']",2,2,0.1635113122171945,False,True,False,SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  [PLACEHOLDER-TYPE:STRING] AND T2.Election_Cycle  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average age of students from the 'Student' table who voted for a specific candidate in the 'Voting_record' table. The placeholders in the WHERE clause represent the gender of the students and the election cycle during which the votes were cast.
train.5494,voter_2,Find the distinct first names of all the students who have vice president votes and whose city code is not PIT.,SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  'PIT',"['student', 'voting_record']",2,2,0.2449230769230768,False,False,True,SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the first names of students who voted for a specific vice presidential candidate, excluding those who reside in a particular city. The placeholder in the EXCEPT clause represents the city code."
train.5495,voter_2,What are the distinct first names of the students who have vice president votes and reside in a city whose city code is not PIT?,SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  'PIT',"['student', 'voting_record']",2,2,0.2449230769230768,False,False,True,SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the first names of students who voted for the vice president but are not residents of a specific city. The placeholder in the EXCEPT clause represents the city code that is used to filter out students from that city.
train.5496,voter_2,Find the distinct last names of all the students who have president votes and whose advisor is not 2192.,SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  '2192',"['student', 'voting_record']",2,2,0.2449230769230768,False,False,True,SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a list of unique last names of students who voted for a presidential candidate, excluding those who have a specific academic advisor. The placeholders in the query represent the advisor's name."
train.5499,voter_2,What are the distinct last names of the students who have president votes and have 8741 as the advisor?,SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  '8741',"['student', 'voting_record']",2,2,0.2449230769230768,False,False,True,SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the last names of students who have voted for a presidential candidate and are assigned to a specific academic advisor. The placeholder in the WHERE clause represents the advisor's name.
train.5510,voter_2,What is the most common major among female (sex is F) students?,SELECT Major FROM STUDENT WHERE Sex  =  'F' GROUP BY major ORDER BY count(*) DESC LIMIT 1,['student'],1,1,0.2239999999999999,False,False,True,SELECT Major FROM STUDENT WHERE Sex  =  [PLACEHOLDER-TYPE:STRING] GROUP BY major ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of majors from the 'Student' table, filtered by the gender of the students. The results are grouped by major and ordered by the number of students in each major in descending order, with a limit on the number of results returned. The placeholders represent the gender of the students and the maximum number of majors to display."
train.5511,voter_2,Find the major that is studied by the most female students.,SELECT Major FROM STUDENT WHERE Sex  =  'F' GROUP BY major ORDER BY count(*) DESC LIMIT 1,['student'],1,1,0.2239999999999999,False,False,True,SELECT Major FROM STUDENT WHERE Sex  =  [PLACEHOLDER-TYPE:STRING] GROUP BY major ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of majors from the 'Student' table, filtered by the gender of the students. The results are grouped by major and ordered by the number of students in each major in descending order, with a limit on the number of results returned. The placeholders represent the gender of the students and the maximum number of majors to display."
train.5534,products_gen_characteristics,"Find the number of products with category ""Spices"" and typically sold above 1000.",SELECT count(*) FROM products WHERE product_category_code  =  'Spices' AND typical_buying_price  >  1000,['products'],1,1,0.1807058823529412,False,False,True,SELECT count(*) FROM products WHERE product_category_code  =  [PLACEHOLDER-TYPE:STRING] AND typical_buying_price  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a count of products from the 'Products' table that belong to a specific product category and have a typical buying price above a certain threshold. The placeholders in the WHERE clause represent the product category code and the minimum buying price.
train.5543,products_gen_characteristics,What are the descriptions of the categories that products with product descriptions that contain the letter t are in?,SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%',"['products', 'ref_product_categories']",2,2,0.1425882352941176,True,False,False,SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE [PLACEHOLDER-TYPE:STRING],This virtual table provides the descriptions of product categories from the 'Ref_Product_Categories' table for products that have a specific description. The placeholder in the WHERE clause allows for filtering products based on their description.
train.5556,products_gen_characteristics,"How many distinct characteristic names does the product ""cumin"" have?",SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  'sesame',"['products', 'characteristics', 'product_characteristics']",3,3+,0.1679999999999999,False,True,False,SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table counts the distinct characteristic names associated with a specific product from the 'Products' table. The placeholder in the WHERE clause represents the name of the product for which the distinct characteristics are being counted.
train.5577,products_gen_characteristics,How many products have their color described as 'white' or have a characteristic with the name 'hot'?,SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  'white' OR t3.characteristic_name  =  'hot',"['products', 'ref_colors', 'characteristics', 'product_characteristics']",4,3+,0.1635113122171945,False,True,False,SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  [PLACEHOLDER-TYPE:STRING] OR t3.characteristic_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a count of products that either match a specific color description or have a specific characteristic name. It combines data from multiple tables, including 'Products', 'Product_Characteristics', 'Characteristics', and 'Ref_Colors', using joins based on their relationships. The placeholders in the WHERE clause represent the color description and characteristic name that the user can specify."
train.5579,products_gen_characteristics,Return the unit of measure for 'Herb' products.,SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  'Herbs',['ref_product_categories'],1,1,0.1425882352941176,True,False,False,SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the unit of measure for a specific product category from the 'Ref_Product_Categories' table. The placeholder in the WHERE clause represents the unique code for the product category.
train.5586,products_gen_characteristics,"Find the unit of measurement and product category code of product named ""chervil"".","SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  'chervil'","['products', 'ref_product_categories']",2,2,0.1807058823529412,False,False,True,"SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the unit of measure and product category code for a specific product from the 'Products' table. The placeholder in the WHERE clause represents the name of the product being queried.
train.5590,products_gen_characteristics,What is the description of the color for most products?,SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1,"['products', 'ref_colors']",2,2,0.1679999999999999,False,True,False,SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"The virtual table describes the color descriptions of products from the 'Products' table, grouped by color and ordered by the frequency of each color's occurrence. The placeholder in the LIMIT clause represents the maximum number of color descriptions to return."
train.5592,products_gen_characteristics,What is the description of the color used by least products?,SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1,"['products', 'ref_colors']",2,2,0.1679999999999999,False,True,False,SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of color descriptions for products from the 'Products' table, grouped by color and ordered by the count of products associated with each color in ascending order. The placeholder in the LIMIT clause represents the maximum number of color descriptions to return."
train.5599,products_gen_characteristics,Give the names of characteristics that are in two or more products?,SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2,"['products', 'characteristics', 'product_characteristics']",3,3+,0.2195113122171945,False,False,True,SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER],"This virtual table describes the names of characteristics associated with products from the 'Products' table. It retrieves characteristic names by joining the 'Products', 'Product_Characteristics', and 'Characteristics' tables. The results are grouped by characteristic name, and only those with a count of associated products greater than or equal to a specified number are included. The placeholder in the HAVING clause represents the minimum count of products for the characteristic names to be displayed."
train.5633,railway,List the builders of railways in ascending alphabetical order.,SELECT Builder FROM railway ORDER BY Builder ASC,['railway'],1,1,0.1119999999999999,True,False,False,SELECT Builder FROM railway ORDER BY Builder ASC,"This virtual table provides a list of builders from the 'railway' table, sorted in ascending order by the builder's name. The query retrieves the 'Builder' column, which indicates the name of the company or individual responsible for constructing the railway."
train.5643,railway,Show the id and builder of the railway that are associated with the most trains.,"SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1","['train', 'railway']",2,2,0.2061176470588234,False,False,True,"SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of railway IDs along with the names of the builders for each railway. The data is aggregated by railway ID, showing the most frequently associated railways based on the number of trains linked to them. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return."
train.5645,railway,Show the most common builder of railways.,SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1,['railway'],1,1,0.1679999999999999,False,True,False,SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of builders from the 'railway' table, grouped by their names. It orders the results by the number of railways each builder has constructed, showing the top results based on a specified limit. The placeholder in the LIMIT clause represents the maximum number of builders to display."
train.5707,dorm_1,What is the last name of every student who is either female or living in a city with the code BAL or male and under 20?,SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20,['student'],1,1,0.2625882352941176,False,False,True,SELECT lname FROM student WHERE sex  =  [PLACEHOLDER-TYPE:STRING] AND city_code  =  [PLACEHOLDER-TYPE:STRING] UNION SELECT lname FROM student WHERE sex  =  [PLACEHOLDER-TYPE:STRING] AND age  <  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of last names of students from the 'Student' table based on specific criteria. It includes students of a certain gender residing in a specific city, as well as students of the same gender who are younger than a specified age. The placeholders in the WHERE clauses represent the gender, city code, and age criteria."
train.5738,dorm_1,Find the number of amenities for each of the dorms that can accommodate more than 100 students.,"SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid","['has_amenity', 'dorm']",2,2,0.2367058823529411,False,False,True,"SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.dormid",This virtual table provides a count of amenities available in dormitories that can accommodate more than a specified number of students. The placeholder in the WHERE clause represents the minimum student capacity for filtering the dormitories.
train.5747,dorm_1,What are the total number of students who are living in a male dorm?,SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M',"['student', 'lives_in', 'dorm']",3,3+,0.1425882352941176,True,False,False,SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of students residing in dormitories based on gender designation. The placeholders in the WHERE clause represent the gender of the dormitory.
train.5756,dorm_1,Find the first name of students who are living in the dorm that has most number of amenities.,SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1),"['has_amenity', 'lives_in', 'student', 'dorm_amenity', 'dorm']",5,3+,0.1985882352941176,False,True,False,SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]),"The virtual table describes the first names of students who live in dormitories that have the most amenities. The query joins the 'Student' table with the 'Lives_in' table to find students residing in specific dorms. It then filters the dorms based on a subquery that counts the number of amenities in each dorm, ordering them in descending order and limiting the results to a specified number of dorms. The placeholder in the LIMIT clause represents the maximum number of dormitories to consider."
train.5765,dorm_1,What is the first name and age of every student who lives in a dorm with a TV Lounge?,"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')","['has_amenity', 'student', 'lives_in', 'dorm_amenity']",4,3+,0.2494117647058823,False,False,True,"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  [PLACEHOLDER-TYPE:STRING])",This virtual table describes the first names and ages of students who live in dormitories that do not have a specific amenity. The placeholders in the WHERE clause represent the amenity's name that is being filtered out.
train.5777,customer_complaints,What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints?,SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1,"['complaints', 'customers']",2,2,0.1679999999999999,False,True,False,SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the email addresses of customers from the 'Customers' table who have made complaints, grouped by customer to ensure unique entries. The results are ordered by the number of complaints each customer has made, and the limit on the number of results returned can be specified using a placeholder for numeric values."
train.5778,customer_complaints,Which products has been complained by the customer who has filed least amount of complaints?,SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1,"['complaints', 'products', 'customers']",3,3+,0.1889230769230769,False,False,True,SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of distinct product names from the 'Products' table that have been associated with complaints. The query joins the 'Products' table with the 'Complaints' table based on the product identifier, and then groups the results by customer identifiers from the 'Customers' table. The results are ordered by the count of complaints per customer, and a limit is applied to restrict the number of product names returned based on a specified number."
train.5795,customer_complaints,What is the last name of the staff member in charge of the complaint on the product with the lowest price?,SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1,"['complaints', 'products', 'staff']",3,3+,0.1119999999999999,True,False,False,SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of last names of staff members who are associated with complaints related to products. The results are ordered by the price of the products, and the number of results returned is limited by a placeholder for numeric values."
train.5796,customer_complaints,Which complaint status has more than 3 records on file?,SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3,['complaints'],1,1,0.2195113122171945,False,False,True,SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],"The virtual table summarizes the different complaint status codes from the 'Complaints' table, specifically focusing on those status codes that have a count exceeding a specified number. The placeholder in the HAVING clause represents the minimum count of complaints required for a status code to be included in the results."
train.5801,customer_complaints,Count the number of customers that have the customer type that is most common.,SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1,['customers'],1,1,0.1679999999999999,False,True,False,SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a count of customers grouped by their type, allowing for an analysis of the distribution of different customer types. The placeholder in the LIMIT clause represents the maximum number of customer types to display, enabling users to specify how many top customer types they wish to see."
train.5810,customer_complaints,What is first names of the top 5 staff who have handled the greatest number of complaints?,SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5,"['complaints', 'staff']",2,2,0.1679999999999999,False,True,False,SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the first names of staff members from the 'Staff' table who are associated with complaints in the 'Complaints' table. The results are grouped by staff member and ordered by the number of complaints they have handled, with a limit specified by a placeholder for numeric values."
train.5811,customer_complaints,Return the first names of the 5 staff members who have handled the most complaints.,SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5,"['complaints', 'staff']",2,2,0.1679999999999999,False,True,False,SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the first names of staff members from the 'Staff' table who are associated with complaints in the 'Complaints' table. The results are grouped by staff member and ordered by the number of complaints they have handled, with a limit on the number of results returned based on a specified number."
train.5845,tracking_share_transactions,Show all investor details.,SELECT Investor_details FROM INVESTORS,['investors'],1,1,0.0865882352941176,True,False,False,SELECT Investor_details FROM INVESTORS,"This virtual table provides detailed information about investors from the 'Investors' table. The query selects the 'Investor_details' column, which contains specific information regarding each investor."
train.5858,tracking_share_transactions,Show details of all investors if they make any transaction with share count greater than 100.,SELECT T1.Investor_details FROM  INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.share_count  >  100,"['transactions', 'investors']",2,2,0.1425882352941176,True,False,False,SELECT T1.Investor_details FROM  INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.share_count  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides detailed information about investors from the 'Investors' table who have made transactions involving a number of shares greater than a specified amount. The placeholder in the WHERE clause represents the minimum share count for filtering the transactions.
train.5864,tracking_share_transactions,What are the lot details of lots associated with transactions with share count smaller than 50?,SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  <  50,"['lots', 'transactions_lots', 'transactions']",3,3+,0.1425882352941176,True,False,False,SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the details of lots associated with transactions where the number of shares involved in the transaction is less than a specified amount. The placeholders in the WHERE clause represent the numeric value for the share count.
train.5866,tracking_share_transactions,Show the average transaction amount for different transaction types.,"SELECT transaction_type_code ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",['transactions'],1,1,0.1807058823529412,False,True,False,"SELECT transaction_type_code ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code","This virtual table summarizes the average amount of transactions grouped by their respective transaction types from the 'Transactions' table. The placeholder in the SELECT clause represents the transaction type code, while the average amount is calculated for each type."
train.5867,tracking_share_transactions,Show the maximum and minimum share count of different transaction types.,"SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code",['transactions'],1,1,0.1948684900711876,False,False,True,"SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code","This virtual table summarizes the maximum and minimum share counts for each type of transaction recorded in the 'Transactions' table. The placeholder in the SELECT clause represents the transaction type code, while the aggregation functions calculate the maximum and minimum share counts for each group of transaction types."
train.5883,tracking_share_transactions,What are the details of all sales and purchases?,SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases,"['sales', 'purchases']",2,2,0.1807058823529412,False,True,False,SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases,This virtual table combines the details of sales and purchase transactions from the 'Sales' and 'Purchases' tables. The placeholder in the SELECT statements allows for the retrieval of specific details related to sales and purchases.
train.5898,cre_Theme_park,What is the average price range of five star hotels that allow pets?,SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  '5' AND pets_allowed_yn  =  1,['hotels'],1,1,0.1635113122171945,False,True,False,SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  [PLACEHOLDER-TYPE:STRING] AND pets_allowed_yn  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table calculates the average price range of hotels from the 'Hotels' table that have a specific star rating and indicate whether pets are allowed. The placeholders in the WHERE clause represent the star rating code and the pets allowed status.
train.5904,cre_Theme_park,"Find all the locations whose names contain the word ""film"".",SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE '%film%',['locations'],1,1,0.1425882352941176,True,False,False,SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of location names from the 'Locations' table that match a specific pattern. The placeholder in the WHERE clause allows for flexible searching of location names based on user input.
train.5915,cre_Theme_park,What are the details and opening hours of the museums?,"SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID","['tourist_attractions', 'museums']",2,2,0.1247058823529411,True,False,False,"SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID",This virtual table provides details about museums and their opening hours by joining the 'Museums' table with the 'Tourist_Attractions' table. The placeholder in the SELECT statement allows for the retrieval of specific museum details and their corresponding opening hours.
train.5916,cre_Theme_park,Give me the detail and opening hour for each museum.,"SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID","['tourist_attractions', 'museums']",2,2,0.1247058823529411,True,False,False,"SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID",This virtual table provides details about museums and their opening hours by joining the 'Museums' table with the 'Tourist_Attractions' table. The placeholder in the SELECT statement allows for the retrieval of specific museum details and their corresponding opening hours.
train.5922,cre_Theme_park,Which tourist attractions are related to royal family? Tell me their details and how we can get there.,"SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID","['royal_family', 'tourist_attractions']",2,2,0.1247058823529411,True,False,False,"SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID",This virtual table provides details about royal families and the instructions on how to reach the associated tourist attractions. The join operation links the 'Royal_Family' table with the 'Tourist_Attractions' table based on the unique identifier for royal family entries and the tourist attraction ID.
train.5923,cre_Theme_park,What are the details of the shops that can be accessed by walk?,SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  'walk',"['shops', 'tourist_attractions']",2,2,0.1425882352941176,True,False,False,SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the details of shops that are associated with tourist attractions, filtered by specific instructions on how to reach those attractions. The placeholder in the WHERE clause represents the directions to the attraction."
train.5931,cre_Theme_park,Which tourist attractions does the visitor with detail 'Vincent' visit?,SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  'Vincent',"['visits', 'visitors', 'tourist_attractions']",3,3+,0.1425882352941176,True,False,False,SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  [PLACEHOLDER-TYPE:STRING],"This virtual table lists the names of tourist attractions that have been visited by a specific tourist. The query joins the 'Tourist_Attractions' table with the 'Visits' table to link attractions to visits, and then further joins with the 'Visitors' table to filter by the details of a specific tourist. The placeholder in the WHERE clause represents the details of the tourist being queried."
train.5932,cre_Theme_park,Show the tourist attractions visited by the tourist whose detail is 'Vincent'.,SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  'Vincent',"['visits', 'visitors', 'tourist_attractions']",3,3+,0.1425882352941176,True,False,False,SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  [PLACEHOLDER-TYPE:STRING],"This virtual table lists the names of tourist attractions that have been visited by a specific tourist. The query joins the 'Tourist_Attractions' table with the 'Visits' table to link attractions to visits, and then further joins with the 'Visitors' table to filter by the specific tourist's details. The placeholder in the WHERE clause represents the details of the tourist."
train.5941,cre_Theme_park,Show the details of the top 3 most expensive hotels.,SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3,['hotels'],1,1,0.1119999999999999,True,False,False,SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of additional details about hotels from the 'Hotels' table, ordered by their price range in descending order. The placeholder in the LIMIT clause represents the maximum number of hotel details to retrieve."
train.5942,cre_Theme_park,What are the details of the three most expensive hotels?,SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3,['hotels'],1,1,0.1119999999999999,True,False,False,SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of additional details about hotels from the 'Hotels' table, ordered by their price range in descending order. The placeholder in the LIMIT clause represents the maximum number of hotel details to retrieve."
train.5944,cre_Theme_park,What are the details and star ratings of the three hotels with the lowest price ranges?,"SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",['hotels'],1,1,0.1501176470588235,False,True,False,"SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of additional details about hotels along with their star rating codes, sorted by the price range in ascending order. The placeholder in the LIMIT clause represents the maximum number of hotel records to return."
train.5945,cre_Theme_park,Show the transportation method most people choose to get to tourist attractions.,SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1,['tourist_attractions'],1,1,0.1679999999999999,False,True,False,SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of instructions on how to reach various tourist attractions, grouped by the unique directions provided. The results are ordered by the frequency of each instruction, allowing users to see the most common ways to get to attractions. The placeholder in the LIMIT clause represents the maximum number of instructions to retrieve."
train.5946,cre_Theme_park,Which transportation method is used the most often to get to tourist attractions?,SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1,['tourist_attractions'],1,1,0.1679999999999999,False,True,False,SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of instructions on how to reach various tourist attractions, grouped by the unique directions provided. The results are ordered by the frequency of each instruction, allowing users to see the most common ways to get to attractions. The placeholder in the LIMIT clause represents the maximum number of instructions to retrieve."
train.5955,cre_Theme_park,Show the names and ids of tourist attractions that are visited at most once.,"SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1","['visits', 'tourist_attractions']",2,2,0.2576289592760181,False,False,True,"SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names and unique identifiers of tourist attractions that have been visited a limited number of times, as specified by a placeholder for numeric values. The data is sourced from the 'Tourist_Attractions' table, and it is filtered based on the number of visits recorded in the 'Visits' table, ensuring that only attractions with visit counts below or equal to the specified threshold are included."
train.5956,cre_Theme_park,What are the names and ids of the tourist attractions that are visited at most once?,"SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1","['visits', 'tourist_attractions']",2,2,0.2576289592760181,False,False,True,"SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names and unique identifiers of tourist attractions that have been visited a limited number of times, as specified by a placeholder for numeric values. The data is sourced from the 'Tourist_Attractions' table, and it is filtered based on the count of visits recorded in the 'Visits' table, ensuring that only attractions with visit counts less than or equal to the specified number are included."
train.5959,cre_Theme_park,What are the names of the tourist attractions that have parking or shopping as their feature details?,SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping',"['features', 'tourist_attractions', 'tourist_attraction_features']",3,3+,0.2195113122171945,False,False,True,SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  [PLACEHOLDER-TYPE:STRING] UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  [PLACEHOLDER-TYPE:STRING],"This virtual table lists the names of tourist attractions that feature specific characteristics. The query combines results from the 'Tourist_Attractions', 'Tourist_Attraction_Features', and 'Features' tables, filtering based on the details of the features. The placeholders in the WHERE clause represent the specific feature details being queried."
train.5960,cre_Theme_park,Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?,SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping',"['features', 'tourist_attractions', 'tourist_attraction_features']",3,3+,0.2195113122171945,False,False,True,SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  [PLACEHOLDER-TYPE:STRING] UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  [PLACEHOLDER-TYPE:STRING],"This virtual table lists the names of tourist attractions that feature specific characteristics. The query retrieves attraction names from the 'Tourist_Attractions' table by joining it with the 'Tourist_Attraction_Features' and 'Features' tables. The placeholders in the WHERE clause represent the details of the features that the attractions must have, allowing users to specify different feature criteria."
train.5963,cre_Theme_park,What are the names of the tourist attractions Vincent and Marcelle visit?,SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Vincent' INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Marcelle',"['visits', 'visitors', 'tourist_attractions']",3,3+,0.2195113122171945,False,False,True,SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of tourist attractions that have been visited by two different tourists, identified by their specific details. The placeholders in the WHERE clause represent the details of each tourist."
train.5985,game_1,Which game type has most number of games?,SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1,['video_games'],1,1,0.1679999999999999,False,True,False,SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the types of video games from the 'Video_Games' table, grouping them by genre and ordering the results by the number of games in each genre. The placeholder in the LIMIT clause represents the maximum number of genres to display."
train.5988,game_1,What is the type with the fewest games?,SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1,['video_games'],1,1,0.1679999999999999,False,True,False,SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the types of video games from the 'Video_Games' table, grouping them by their genre. The placeholder in the LIMIT clause represents the maximum number of genres to be displayed."
train.6001,game_1,How many students play sports?,SELECT count(DISTINCT StuID) FROM Sportsinfo,['sportsinfo'],1,1,0.1119999999999999,True,False,False,SELECT count(DISTINCT StuID) FROM Sportsinfo,"This virtual table provides the count of distinct students from the 'SportsInfo' table, indicating how many unique students are participating in sports activities. The query uses the COUNT function to aggregate the unique student identifiers."
train.6003,game_1,List ids for all student who are on scholarship.,SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y',['sportsinfo'],1,1,0.1425882352941176,True,False,False,SELECT StuID FROM Sportsinfo WHERE onscholarship  =  [PLACEHOLDER-TYPE:STRING],"This virtual table lists the unique identifiers of students from the 'SportsInfo' table who are on a sports scholarship. The placeholder in the WHERE clause represents the scholarship status, which can be either 'Yes' or 'No'."
train.6004,game_1,What are the ids for all sporty students who are on scholarship?,SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y',['sportsinfo'],1,1,0.1425882352941176,True,False,False,SELECT StuID FROM Sportsinfo WHERE onscholarship  =  [PLACEHOLDER-TYPE:STRING],"This virtual table lists the unique identifiers of students from the 'SportsInfo' table who are on a sports scholarship. The placeholder in the WHERE clause represents the scholarship status, which can be either 'Yes' or 'No'."
train.6006,game_1,What are the last names for all scholarship students?,SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y',"['sportsinfo', 'student']",2,2,0.1425882352941176,True,False,False,SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the last names of students from the 'Student' table who are participating in sports and are on a sports scholarship. The placeholder in the WHERE clause represents the scholarship status.
train.6010,game_1,What is the total number of all football games played by scholarship students?,SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  'Football' AND onscholarship  =  'Y',['sportsinfo'],1,1,0.1635113122171945,False,True,False,SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  [PLACEHOLDER-TYPE:STRING] AND onscholarship  =  [PLACEHOLDER-TYPE:STRING],This virtual table summarizes the total number of games played by students involved in a specific sport who are also on a sports scholarship. The placeholders in the WHERE clause represent the sport's name and the scholarship status.
train.6014,game_1,What are the ids of all students along with how many sports and games did they play?,"SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID",['sportsinfo'],1,1,0.2065882352941176,False,False,True,"SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID","This virtual table summarizes the total number of games played by each student from the 'SportsInfo' table. The placeholder in the SELECT clause represents the unique student identifier, while the count and sum functions aggregate the data accordingly."
train.6019,game_1,Which sport has most number of students on scholarship?,SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1,['sportsinfo'],1,1,0.2239999999999999,False,False,True,SELECT sportname FROM Sportsinfo WHERE onscholarship  =  [PLACEHOLDER-TYPE:STRING] GROUP BY sportname ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table describes the names of sports in which students are involved, filtered by their scholarship status. The results are grouped by sport name and ordered by the number of students participating in each sport, with a limit on the number of results returned. The placeholders represent the scholarship status and the maximum number of results to display."
train.6020,game_1,What is the sport with the most scholarship students?,SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1,['sportsinfo'],1,1,0.2239999999999999,False,False,True,SELECT sportname FROM Sportsinfo WHERE onscholarship  =  [PLACEHOLDER-TYPE:STRING] GROUP BY sportname ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of sports names from the 'SportsInfo' table for students who are either on or not on a sports scholarship, depending on the specified condition. The results are grouped by sport name and ordered by the number of students participating in each sport, with a limit on the number of results returned."
train.6024,game_1,What are the student ids for those on scholarship in major number 600?,SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y',"['sportsinfo', 'student']",2,2,0.2195113122171945,False,False,True,SELECT StuID FROM Student WHERE major  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies students who are majoring in a specific field of study and are also participating in sports on a scholarship. The placeholders in the query represent the major and the scholarship status.
train.6025,game_1,Show student ids who are female and play football.,SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  'Football',"['sportsinfo', 'student']",2,2,0.2195113122171945,False,False,True,SELECT StuID FROM Student WHERE sex  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies students who are of a specific gender and also participate in a particular sport. The placeholders in the WHERE clauses represent the gender and the sport's name.
train.6026,game_1,What are the ids of all female students who play football?,SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  'Football',"['sportsinfo', 'student']",2,2,0.2195113122171945,False,False,True,SELECT StuID FROM Student WHERE sex  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies students who are of a specific gender and also participate in a particular sport. The placeholders in the WHERE clauses represent the gender and the sport's name.
train.6028,game_1,What are the ids of all male students who do not play football?,SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  'Football',"['sportsinfo', 'student']",2,2,0.2195113122171945,False,False,True,SELECT StuID FROM Student WHERE sex  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies students from the 'Student' table who are of a specific gender and are not participating in a specified sport. The placeholders in the WHERE clause represent the gender and the sport's name.
train.6060,customers_and_addresses,Find the average order quantity per order.,SELECT avg(order_quantity) FROM order_items,['order_items'],1,1,0.0865882352941176,True,False,False,SELECT avg(order_quantity) FROM order_items,This virtual table calculates the average quantity of products ordered from the 'Order_Items' table. The result provides insights into the typical order size for products.
train.6071,customers_and_addresses,What are the details of all products?,SELECT DISTINCT product_details FROM products,['products'],1,1,0.1119999999999999,True,False,False,SELECT DISTINCT product_details FROM products,The virtual table provides a unique list of product specifications from the 'Products' table. The placeholder in the SELECT statement allows for potential filtering or additional conditions to be added later.
train.6075,customers_and_addresses,"Find the detail of products whose detail contains the word ""Latte"" or the word ""Americano""",SELECT product_details FROM products WHERE product_details LIKE '%Latte%' OR product_details LIKE '%Americano%',['products'],1,1,0.1635113122171945,False,True,False,SELECT product_details FROM products WHERE product_details LIKE [PLACEHOLDER-TYPE:STRING] OR product_details LIKE [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the product details from the 'Products' table that match specific criteria. The placeholders in the WHERE clause represent the patterns to search for in the product details.
train.6085,customers_and_addresses,Which city has the most customers living in?,SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1,"['addresses', 'customers', 'customer_addresses']",3,3+,0.1679999999999999,False,True,False,SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of cities where customers are located, derived from the 'Customers', 'Customer_Addresses', and 'Addresses' tables. The results are grouped by city and ordered by the number of customers in each city, with a limit on the number of cities returned based on a specified numeric value."
train.6086,customers_and_addresses,Find the city where the most customers live.,SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1,"['addresses', 'customers', 'customer_addresses']",3,3+,0.1679999999999999,False,True,False,SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of cities where customers are located, derived from the 'Customers', 'Customer_Addresses', and 'Addresses' tables. The results are grouped by city and ordered by the number of customers in each city, with a limit on the number of cities returned based on a specified numeric value."
train.6097,customers_and_addresses,"Which contact channel has been used by the customer with name ""Tillman Ernser""?",SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  'Tillman Ernser',"['customer_contact_channels', 'customers']",2,2,0.1679999999999999,False,True,False,SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a distinct list of contact channels used by customers from the 'Customers' table based on their name. The placeholder in the WHERE clause represents the specific customer's name.
train.6100,customers_and_addresses,"Return the the ""active to date"" of the latest contact channel used by the customer named ""Tillman Ernser"".",SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  'Tillman Ernser',"['customer_contact_channels', 'customers']",2,2,0.1425882352941176,True,False,False,SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the most recent deactivation date of a contact channel for a specific customer from the 'Customers' and 'Customer_Contact_Channels' tables. The placeholder in the WHERE clause represents the customer's name.
train.6101,customers_and_addresses,What is the average time span of contact channels in the database?,SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels,['customer_contact_channels'],1,1,0.1075113122171946,True,False,False,SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels,This virtual table calculates the average duration that contact channels remain active for customers in the 'Customer_Contact_Channels' table. The placeholder in the SELECT clause represents the calculation of the difference between the active dates.
train.6103,customers_and_addresses,What is the channel code and contact number of the customer contact channel that was active for the longest time?,"SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)",['customer_contact_channels'],1,1,0.2367058823529411,False,False,True,"SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])",This virtual table provides the channel codes and associated contact numbers from the 'Customer_Contact_Channels' table for the most recently active contact channel based on the duration of activity. The placeholder in the LIMIT clause allows for specifying the number of records to retrieve based on the longest active duration.
train.6108,customers_and_addresses,Find the name of the customer who made the order of the largest amount of goods.,SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items),"['customer_orders', 'customers', 'order_items']",3,3+,0.1731764705882353,False,False,True,SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items),"This virtual table provides the names of customers who have placed orders containing the maximum quantity of any product. It joins the 'Customers' table with the 'Customer_Orders' table to link customers to their orders, and then further joins with the 'Order_Items' table to access the order quantities. The placeholder in the WHERE clause is used to filter for the maximum order quantity across all orders."
train.6123,customers_and_addresses,"What is the total number of products that are in orders with status ""Cancelled""?",SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  'Cancelled',"['customer_orders', 'order_items']",2,2,0.1425882352941176,True,False,False,SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  [PLACEHOLDER-TYPE:STRING],"This virtual table calculates the total quantity of products ordered from the 'Customer_Orders' table, filtered by a specific order status. The placeholder in the WHERE clause represents the order status to be specified by the user."
train.6130,customers_and_addresses,What is the most frequently ordered product? Tell me the detail of the product,SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1,"['products', 'order_items']",2,2,0.1679999999999999,False,True,False,SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of product details from the 'Products' table based on the quantity of each product ordered. The query joins the 'Order_Items' table with the 'Products' table to aggregate the product details, grouping by product ID and ordering the results by the count of orders in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of product details to return."
train.6131,customers_and_addresses,Find the name and ID of the product whose total order quantity is the largest.,"SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1","['products', 'order_items']",2,2,0.2061176470588234,False,False,True,"SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of product details and their identifiers from the 'Products' table, based on the quantities ordered from the 'Order_Items' table. The results are grouped by product ID and ordered by the total quantity ordered, with a limit specified by a placeholder for numeric values."
train.6132,customers_and_addresses,What are the name and ID of the product bought the most.,"SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1","['products', 'order_items']",2,2,0.2061176470588234,False,False,True,"SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of product details and their identifiers from the 'Products' table, based on the quantities ordered from the 'Order_Items' table. The results are grouped by product ID and ordered by the total quantity ordered, with a limit specified by a placeholder for numeric values."
train.6133,customers_and_addresses,"Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",SELECT address_content FROM addresses WHERE city  =  'East Julianaside' AND state_province_county  =  'Texas' UNION SELECT address_content FROM addresses WHERE city  =  'Gleasonmouth' AND state_province_county  =  'Arizona',['addresses'],1,1,0.2508684900711876,False,False,True,SELECT address_content FROM addresses WHERE city  =  [PLACEHOLDER-TYPE:STRING] AND state_province_county  =  [PLACEHOLDER-TYPE:STRING] UNION SELECT address_content FROM addresses WHERE city  =  [PLACEHOLDER-TYPE:STRING] AND state_province_county  =  [PLACEHOLDER-TYPE:STRING],"This virtual table retrieves the detailed address content from the 'Addresses' table for specific cities and states, allowing for the combination of results from two different queries based on the same criteria. The placeholders in the WHERE clauses represent the city and state names."
train.6155,music_4,"What are the category of music festivals with result ""Awarded""?",SELECT Category FROM music_festival WHERE RESULT  =  'Awarded',['music_festival'],1,1,0.1425882352941176,False,True,False,SELECT Category FROM music_festival WHERE RESULT  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the categories of awards or recognitions from the 'music_festival' table based on a specific result. The placeholder in the WHERE clause represents the outcome of the festival participation.
train.6167,music_4,"Please show the songs that have result ""nominated"" at music festivals.",SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  'Nominated',"['music_festival', 'volume']",2,2,0.1425882352941176,False,True,False,SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the songs associated with music festivals where the outcome was a specific result. The query joins the 'music_festival' and 'volume' tables based on the volume identifier, and filters the results based on the specified outcome using a placeholder for string values."
train.6180,music_4,Return the famous release date for the oldest artist.,SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1,['artist'],1,1,0.1119999999999999,True,False,False,SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the release dates of the most recognized songs by artists from the 'artist' table, ordered by the age of the artists in descending order. The placeholder in the LIMIT clause represents the maximum number of results to return."
train.6185,music_4,Please show the categories of the music festivals with count more than 1.,SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1,['music_festival'],1,1,0.2195113122171945,False,False,True,SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table summarizes the categories of awards or recognitions from the 'music_festival' table that have received more than a specified number of entries. The placeholder in the HAVING clause represents the minimum count of entries required to filter the categories.
train.6187,music_4,What is the song in the volume with the maximum weeks on top?,SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1,['volume'],1,1,0.1119999999999999,True,False,False,SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the songs from the 'volume' table, ordered by the number of weeks they stayed at the top, allowing users to specify a limit on the number of results returned. The placeholder in the LIMIT clause represents the maximum number of songs to display."
train.6195,music_4,What is the issue date of the volume with the minimum weeks on top?,SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1,['volume'],1,1,0.1119999999999999,True,False,False,SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of issue release dates from the 'volume' table, ordered by the number of weeks the associated song stayed at the top, allowing users to retrieve a specified number of results. The placeholder in the LIMIT clause represents the maximum number of issue dates to return."
train.6271,city_record,"What is the match id of the competition called ""1994 FIFA World Cup qualification""?",SELECT match_id FROM MATCH WHERE competition = '1994 FIFA World Cup qualification',['match'],1,1,0.1425882352941176,True,False,False,SELECT match_id FROM MATCH WHERE competition = [PLACEHOLDER-TYPE:STRING],This virtual table describes the unique identifiers of matches from the 'match' table that are part of a specific competition. The placeholder in the WHERE clause represents the competition's identifier.
train.6274,city_record,Which city has hosted the most events?,SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1,"['hosting_city', 'city']",2,2,0.1679999999999999,False,True,False,SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the cities that have hosted the most matches, ordered by the number of matches hosted. The placeholder in the LIMIT clause allows the user to specify how many top cities they want to retrieve."
train.6286,city_record,Which city has the highest temperature in February?,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1,"['city', 'temperature']",2,2,0.1119999999999999,True,False,False,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of cities from the 'city' table, ordered by their average temperature in February from the 'temperature' table in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be displayed."
train.6287,city_record,"In February, which city marks the highest temperature?",SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1,"['city', 'temperature']",2,2,0.1119999999999999,True,False,False,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of cities from the 'city' table, ordered by their average temperature in February from the 'temperature' table in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be displayed."
train.6288,city_record,Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct,"['city', 'temperature']",2,2,0.1807058823529412,False,True,False,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct,This virtual table lists the names of cities from the 'city' table that have an average temperature in March that is either lower than the average temperature in July or higher than the average temperature in October. The placeholders in the WHERE clause represent the temperature values for the respective months.
train.6289,city_record,Which cities' temperature in March is lower than that in July or higher than that in Oct?,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct,"['city', 'temperature']",2,2,0.1807058823529412,False,True,False,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct,This virtual table identifies cities from the 'city' table that have a specific temperature condition. It selects cities where the average temperature in March is either less than the average temperature in July or greater than the average temperature in October. The placeholders in the query represent the temperature values for the respective months.
train.6292,city_record,Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city,"['hosting_city', 'city', 'temperature']",3,3+,0.1985882352941176,False,False,True,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city,"This virtual table identifies cities that have a lower average temperature in March compared to December, excluding those cities that have hosted a match. The placeholders in the query represent the necessary identifiers for the cities and their temperature data."
train.6293,city_record,Which cities have lower temperature in March than in Dec and have never served as host cities?,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city,"['hosting_city', 'city', 'temperature']",3,3+,0.1985882352941176,False,False,True,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city,"This virtual table identifies cities that have a lower average temperature in March compared to December, excluding those cities that have hosted a match. The placeholders in the query represent the necessary identifiers for the cities and their temperature data."
train.6298,city_record,Please give me a list of cities whose regional population is over 8000000 or under 5000000.,SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000,['city'],1,1,0.2367058823529411,False,False,True,SELECT city FROM city WHERE regional_population  >  [PLACEHOLDER-TYPE:NUMBER] UNION SELECT city FROM city WHERE regional_population  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of cities from the 'city' table based on their regional population. It retrieves cities with a population greater than a specified number and also those with a population less than another specified number. The placeholders in the WHERE clauses represent the population thresholds for filtering the cities.
train.6313,e_government,What is the name of the party form that is most common?,SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1,"['forms', 'party_forms']",2,2,0.1679999999999999,False,True,False,SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of form names from the 'Forms' table that are associated with parties through the 'Party_Forms' table. The results are grouped by form ID and ordered by the count of associations in descending order, allowing users to see the most frequently used forms. The placeholder in the LIMIT clause represents the maximum number of results to return."
train.6329,e_government,What are the names of the services that have never been used?,SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id,"['services', 'party_services']",2,2,0.1425882352941176,True,False,False,SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id,"This virtual table lists the names of services from the 'Services' table that have not been booked by any party. The query uses an EXCEPT clause to exclude service names that are present in the 'Party_Services' table, indicating that those services have been booked."
train.6330,e_government,Find the name of all the cities and states.,SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses,['addresses'],1,1,0.1807058823529412,False,False,True,SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses,"This virtual table provides a combined list of town/city names and state/province/county names from the 'Addresses' table. The use of UNION allows for the retrieval of unique entries from both columns, ensuring that any duplicates are removed."
train.6342,e_government,"Which state can address ""6862 Kaitlyn Knolls"" possibly be in?",SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE '%6862 Kaitlyn Knolls%',['addresses'],1,1,0.1425882352941176,True,False,False,SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE [PLACEHOLDER-TYPE:STRING],"This virtual table retrieves the state, province, or county information from the 'Addresses' table based on a specific address line that matches a given pattern. The placeholder in the LIKE clause allows for flexible searching of address lines."
train.6346,e_government,Find the last name of the individuals that have been contact individuals of an organization.,SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id,"['organization_contact_individuals', 'individuals']",2,2,0.1119999999999999,True,False,False,SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id,"This virtual table provides a list of unique last names of individuals who have contacted organizations. It combines data from the 'Individuals' table and the 'Organization_Contact_Individuals' table, ensuring that only distinct last names are returned."
train.6371,flight_company,What are the names and types of the companies that have ever operated a flight?,"SELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id","['flight', 'operate_company']",2,2,0.1247058823529411,True,False,False,"SELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id","This virtual table provides the names and types of operating companies that are associated with flights. The data is retrieved by joining the 'operate_company' table with the 'flight' table based on the company identifier, allowing users to see which companies operate specific flights."
train.6375,flight_company,"What is the id, name and IATA code of the airport that had most number of flights?","SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1","['airport', 'flight']",2,2,0.2319999999999999,False,False,True,"SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of airport identifiers, names, and IATA codes from the 'airport' table, specifically for those airports that have been associated with flights. The results are grouped by flight identifiers to aggregate the data, ordered by the number of flights in descending order, and limited to a specified number of entries. The placeholder in the LIMIT clause represents the maximum number of results to return."
train.6381,flight_company,How many companies operates airlines in each airport?,"SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id","['airport', 'flight', 'operate_company']",3,3+,0.1807058823529412,False,True,False,"SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id","This virtual table summarizes the number of flights operated by each company at different airports. It joins the 'operate_company', 'flight', and 'airport' tables to count the flights associated with each airport, identified by their unique IDs."
train.6517,wine_1,What is the name of the highest rated wine?,SELECT Name FROM WINE ORDER BY Score LIMIT 1,['wine'],1,1,0.1119999999999999,True,False,False,SELECT Name FROM WINE ORDER BY Score LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of wines from the 'wine' table, ordered by their rating scores. The placeholder in the LIMIT clause indicates the maximum number of wine names to be returned."
train.6518,wine_1,Give the name of the wine with the highest score.,SELECT Name FROM WINE ORDER BY Score LIMIT 1,['wine'],1,1,0.1119999999999999,True,False,False,SELECT Name FROM WINE ORDER BY Score LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of wines from the 'wine' table, ordered by their rating scores. The placeholder in the LIMIT clause represents the maximum number of wine names to be displayed."
train.6520,wine_1,What is the winery at which the wine with the highest score was made?,SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1,['wine'],1,1,0.1119999999999999,True,False,False,SELECT Winery FROM WINE ORDER BY SCORE LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of wineries from the 'wine' table, ordered by their rating scores. The placeholder in the LIMIT clause represents the maximum number of wineries to be displayed."
train.6533,wine_1,List the names of all distinct wines that are made of red color grape.,SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  'Red',"['wine', 'grapes']",2,2,0.1679999999999999,False,True,False,SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  [PLACEHOLDER-TYPE:STRING],"This virtual table lists the distinct names of wines made from grape varieties of a specific color. The query joins the 'grapes' and 'wine' tables based on the grape variety, filtering the results to include only those grapes that match the specified color."
train.6544,wine_1,Give the names and scores of wines made from white grapes.,"SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  'White'","['wine', 'grapes']",2,2,0.1807058823529412,False,True,False,"SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the names and scores of wines made from grape varieties of a specific color. The query joins the 'grapes' and 'wine' tables based on the grape variety, filtering the results to include only those grapes that match the specified color."
train.6547,wine_1,Find the the grape whose white color grapes are used to produce wines with scores higher than 90.,SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  'White' AND T2.score  >  90,"['wine', 'grapes']",2,2,0.2061176470588234,False,False,True,SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  [PLACEHOLDER-TYPE:STRING] AND T2.score  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists distinct grape varieties from the 'grapes' table that have a specific color and are associated with wines that have a score above a certain threshold. The placeholders in the WHERE clause represent the color of the grape and the minimum score for the wine.
train.6550,wine_1,What are the names of wines made from red grapes and with prices above 50?,SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  'Red' AND T2.price  >  50,"['wine', 'grapes']",2,2,0.1807058823529412,False,True,False,SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  [PLACEHOLDER-TYPE:STRING] AND T2.price  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of wines made from grape varieties of a specific color and priced above a certain amount. The placeholders in the WHERE clause represent the grape color and the price threshold.
train.6558,wine_1,What are the distinct names of wines with prices higher than any wine from John Anthony winery.,SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  'John Anthony'),['wine'],1,1,0.1985882352941176,False,True,False,SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists the distinct names of wines from the 'wine' table that are priced higher than the minimum price of wines produced by a specific winery. The placeholder in the subquery represents the name of the winery.
train.6566,wine_1,Give the color of the grape whose wine products have the highest average price?,SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1,"['wine', 'grapes']",2,2,0.1679999999999999,False,True,False,SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the colors of grape varieties from the 'grapes' table, which are associated with wines in the 'wine' table. The results are grouped by grape variety and ordered by the average price of the wines produced from each grape, with a limit on the number of results returned based on a specified number."
train.6588,wine_1,Which 3 wineries produce the most wines made from white grapes?,SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  'White' GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3,"['wine', 'grapes']",2,2,0.2239999999999999,False,False,True,SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of wineries that produce wines made from grape varieties of a specific color. The query joins the 'grapes' and 'wine' tables based on the grape variety, filters the results by the specified grape color, groups the results by winery name, and orders them by the number of wines produced, limiting the output to a specified number of wineries."
train.6597,wine_1,Find the county where produces the most number of wines with score higher than 90.,SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1,"['wine', 'appellations']",2,2,0.2239999999999999,False,False,True,SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.County ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of counties where wines with a score above a specified threshold are produced. The placeholder in the WHERE clause represents the minimum score for filtering the wines, and the second placeholder limits the number of counties returned based on the count of wines produced in each county."
train.6626,driving_school,Show the detail of vehicle with id 1.,SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;,['vehicles'],1,1,0.1425882352941176,True,False,False,SELECT vehicle_details FROM Vehicles WHERE vehicle_id = [PLACEHOLDER-TYPE:NUMBER];,This virtual table provides details about vehicles from the 'Vehicles' table based on a specific vehicle identifier. The placeholder in the WHERE clause represents the unique identifier for the vehicle.
train.6650,driving_school,How many staff live in state Georgia?,SELECT count(*) FROM Addresses WHERE state_province_county = 'Georgia';,['addresses'],1,1,0.1425882352941176,True,False,False,SELECT count(*) FROM Addresses WHERE state_province_county = [PLACEHOLDER-TYPE:STRING];,"This virtual table provides the count of addresses from the 'Addresses' table that are located in a specific state, province, or county. The placeholder in the WHERE clause represents the name of the state, province, or county being queried."
train.6665,driving_school,"What is the status code, phone number, and email address of the customer whose last name is Kohler or whose first name is Marina?","SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = 'Marina' OR last_name  =  'Kohler'",['customers'],1,1,0.2275113122171945,False,False,True,"SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = [PLACEHOLDER-TYPE:STRING] OR last_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the status code, mobile phone number, and email address of customers from the 'Customers' table who have a specific first name or last name. The placeholders in the WHERE clause represent the customer's first and last names."
train.6676,driving_school,How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?,SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = 'Rylan' AND T2.last_name = 'Goodwin' AND T1.lesson_status_code = 'Completed';,"['lessons', 'customers']",2,2,0.1807058823529412,False,False,True,SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = [PLACEHOLDER-TYPE:STRING] AND T2.last_name = [PLACEHOLDER-TYPE:STRING] AND T1.lesson_status_code = [PLACEHOLDER-TYPE:STRING];,"This virtual table provides the count of lessons associated with a specific customer identified by their first and last name. It filters the lessons based on the customer's name and the status of the lesson. The placeholders in the WHERE clause represent the customer's first name, last name, and the lesson status code."
train.6688,driving_school,Which city does has most number of customers?,SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;,"['addresses', 'customers']",2,2,0.1679999999999999,False,True,False,SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides a list of cities where customers are located, derived from the 'Customers' and 'Addresses' tables. The results are grouped by city and ordered by the number of customers in each city, with a limit on the number of cities returned based on a specified number."
train.6711,driving_school,What are the last names that are used by customers and staff?,SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff,"['staff', 'customers']",2,2,0.1425882352941176,True,False,False,SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff,This virtual table identifies the last names that are common between customers and staff members. The query uses the INTERSECT operator to find last names that appear in both the 'Customers' and 'Staff' tables.
train.6714,driving_school,What is the id and detail of the vehicle used in lessons for most of the times?,"SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1","['lessons', 'vehicles']",2,2,0.2061176470588234,False,False,True,"SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of vehicle IDs and their corresponding details from the 'Vehicles' table, specifically for vehicles that have been used in lessons. The results are grouped by vehicle ID and ordered by the number of lessons associated with each vehicle in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return."
train.6725,activity_1,Show ids for all the male faculty.,SELECT FacID FROM Faculty WHERE Sex  =  'M',['faculty'],1,1,0.1425882352941176,True,False,False,SELECT FacID FROM Faculty WHERE Sex  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the unique identifiers of faculty members from the 'Faculty' table who belong to a specific gender. The placeholder in the WHERE clause represents the gender of the faculty members.
train.6734,activity_1,What are the first name and last name of all the instructors?,"SELECT fname ,  lname FROM Faculty WHERE Rank  =  'Instructor'",['faculty'],1,1,0.1807058823529412,False,True,False,"SELECT fname ,  lname FROM Faculty WHERE Rank  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of faculty members from the 'Faculty' table who hold a specific academic rank. The placeholder in the WHERE clause represents the rank of the faculty member.
train.6737,activity_1,Which building has most faculty members?,SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1,['faculty'],1,1,0.1679999999999999,False,True,False,SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of buildings where faculty members have their offices, grouped by building name. The results are ordered by the number of faculty members in each building in descending order, and the placeholder allows the user to specify the maximum number of buildings to return."
train.6747,activity_1,Show the number of male and female assistant professors.,"SELECT sex ,  count(*) FROM Faculty WHERE rank  =  'AsstProf' GROUP BY sex",['faculty'],1,1,0.2367058823529411,False,False,True,"SELECT sex ,  count(*) FROM Faculty WHERE rank  =  [PLACEHOLDER-TYPE:STRING] GROUP BY sex",This virtual table summarizes the gender distribution of faculty members based on their academic rank. The placeholder in the WHERE clause represents the specific rank of faculty members being queried.
train.6748,activity_1,How many male and female assistant professors do we have?,"SELECT sex ,  count(*) FROM Faculty WHERE rank  =  'AsstProf' GROUP BY sex",['faculty'],1,1,0.2367058823529411,False,False,True,"SELECT sex ,  count(*) FROM Faculty WHERE rank  =  [PLACEHOLDER-TYPE:STRING] GROUP BY sex",This virtual table summarizes the gender distribution of faculty members based on their academic rank. The placeholder in the WHERE clause represents the specific rank of faculty members being queried.
train.6750,activity_1,Who is the advisor of Linda Smith? Give me the first name and last name.,"SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  'Linda' AND T2.lname  =  'Smith'","['faculty', 'student']",2,2,0.2016289592760181,False,True,False,"SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  [PLACEHOLDER-TYPE:STRING] AND T2.lname  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first names and last names of faculty members who are academic advisors to a specific student. The placeholders in the WHERE clause represent the first and last names of the student.
train.6751,activity_1,Show the ids of students whose advisors are professors.,SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  'Professor',"['faculty', 'student']",2,2,0.1425882352941176,True,False,False,SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies the unique identifiers of students who are advised by faculty members of a specific academic rank. The placeholder in the WHERE clause represents the rank of the faculty member.
train.6752,activity_1,Which students have professors as their advisors? Find their student ids.,SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  'Professor',"['faculty', 'student']",2,2,0.1425882352941176,True,False,False,SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies the unique identifiers of students who are advised by faculty members of a specific academic rank. The placeholder in the WHERE clause represents the rank of the faculty member.
train.6753,activity_1,Show first name and last name for all the students advised by Michael Goodrich.,"SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  'Michael' AND T1.lname  =  'Goodrich'","['faculty', 'student']",2,2,0.2016289592760181,False,True,False,"SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  [PLACEHOLDER-TYPE:STRING] AND T1.lname  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of students who are advised by a specific faculty member. The placeholders in the WHERE clause represent the first and last names of the faculty member.
train.6756,activity_1,What are the faculty id and the number of students each faculty has?,"SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID","['faculty', 'student']",2,2,0.1807058823529412,False,True,False,"SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID",This virtual table provides a count of students assigned to each faculty member as their advisor from the 'Faculty' and 'Student' tables. The placeholder in the SELECT statement represents the faculty member's unique identifier.
train.6758,activity_1,How many students are advised by each rank of faculty? List the rank and the number of students.,"SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank","['faculty', 'student']",2,2,0.1807058823529412,False,True,False,"SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank","This virtual table summarizes the number of students assigned to each academic rank of faculty members. It joins the 'Faculty' table with the 'Student' table based on the advisor relationship, grouping the results by the faculty rank to count the number of students per rank."
train.6761,activity_1,Show the ids for all the faculty members who have at least 2 students.,SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2,"['faculty', 'student']",2,2,0.2195113122171945,False,False,True,SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table identifies faculty members who serve as advisors to students. It retrieves the unique identifiers of faculty members from the 'Faculty' table, joining it with the 'Student' table based on the advisor relationship. The results are grouped by faculty ID, and only those faculty members who have advised a specified minimum number of students are included, as indicated by the placeholder in the HAVING clause."
train.6777,activity_1,Show the names of all the activities Mark Giuliano participates in.,SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  'Mark' AND T1.lname  =  'Giuliano',"['activity', 'faculty', 'faculty_participates_in']",3,3+,0.1635113122171945,True,False,False,SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  [PLACEHOLDER-TYPE:STRING] AND T1.lname  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of activities in which a specific faculty member participates. The placeholders in the WHERE clause represent the first and last names of the faculty member.
train.6779,activity_1,"Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in.","SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID","['faculty', 'faculty_participates_in']",2,2,0.2245192697768762,False,False,True,"SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID","This virtual table summarizes the first names and last names of faculty members along with the count of activities they participate in. The data is retrieved from the 'Faculty' table and is grouped by each faculty member's unique identifier. The placeholders represent the faculty member's first name, last name, and the count of their participation in activities."
train.6789,activity_1,Show the ids for all the students who participate in an activity and are under 20.,SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20,"['student', 'participates_in']",2,2,0.1985882352941176,False,True,False,SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies students who participate in activities and are younger than a specified age. The placeholder in the WHERE clause represents the age limit for filtering the students.
train.6797,activity_1,Find the first names of professors who are not playing Canoeing or Kayaking.,SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking',"['activity', 'faculty', 'faculty_participates_in']",3,3+,0.2621176470588234,False,False,True,SELECT lname FROM faculty WHERE rank  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  [PLACEHOLDER-TYPE:STRING] OR T3.activity_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the last names of faculty members who hold a specific academic rank but do not participate in certain activities. The placeholders in the query represent the rank of the faculty and the names of the activities they are not involved in.
train.6798,activity_1,What are the first names of the professors who do not play Canoeing or Kayaking as activities?,SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking',"['activity', 'faculty', 'faculty_participates_in']",3,3+,0.2621176470588234,False,False,True,SELECT lname FROM faculty WHERE rank  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  [PLACEHOLDER-TYPE:STRING] OR T3.activity_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the last names of faculty members who hold a specific academic rank but do not participate in certain activities. The placeholders in the query represent the rank of the faculty and the names of the activities they may or may not be involved in.
train.6799,activity_1,Find the first names of the faculty members who participate in Canoeing and Kayaking.,SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking',"['activity', 'faculty', 'faculty_participates_in']",3,3+,0.2195113122171945,False,False,True,SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the last names of faculty members who participate in a specific activity. The query uses an INTERSECT operation to ensure that only faculty members who are involved in the same activity are selected. The placeholders in the WHERE clause represent the name of the activity.
train.6801,activity_1,Find the ids of the students who participate in Canoeing and Kayaking.,SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking',"['activity', 'participates_in']",2,2,0.2195113122171945,False,False,True,SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies students who participate in two specific activities from the 'Activity' table. The placeholders in the WHERE clause represent the names of the activities being compared.
train.6825,flight_4,Find the number of routes operated by American Airlines.,SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines',"['routes', 'airlines']",2,2,0.1425882352941176,True,False,False,SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of routes operated by a specific airline from the 'airlines' and 'routes' tables. The placeholder in the WHERE clause represents the name of the airline for which the route count is being queried.
train.6826,flight_4,How many routes does American Airlines operate?,SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines',"['routes', 'airlines']",2,2,0.1425882352941176,True,False,False,SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of routes operated by a specific airline from the 'airlines' and 'routes' tables. The placeholder in the WHERE clause represents the name of the airline for which the route count is being queried.
train.6831,flight_4,"Find the name, city, and country of the airport that has the highest latitude.","SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1",['airports'],1,1,0.176,False,True,False,"SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of airport names, their respective cities, and countries from the 'airports' table, sorted by elevation in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return."
train.6834,flight_4,What is the name and city of the airport that the most routes end at?,"SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1","['airports', 'routes']",2,2,0.2319999999999999,False,False,True,"SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of destination airport names and their corresponding cities from the 'airports' table, along with the destination airport IDs from the 'routes' table. The results are grouped by destination airport ID and ordered by the count of routes to each destination, limited to a specified number of results."
train.6838,flight_4,What is the name and city of the airport from most of the routes start?,"SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1","['airports', 'routes']",2,2,0.2319999999999999,False,False,True,"SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of airport names and their corresponding cities from the 'airports' table, along with the source airport IDs from the 'routes' table. The results are grouped by source airport ID and ordered by the number of routes originating from each airport, limited to a specified number of results."
train.6841,flight_4,Which countries has the most number of airlines?,SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1,['airlines'],1,1,0.1679999999999999,False,True,False,SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of countries where airlines are based, grouped by country and ordered by the number of airlines in each country. The placeholder in the LIMIT clause allows the user to specify the maximum number of countries to return."
train.6842,flight_4,What is the name of the country with the most number of home airlines?,SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1,['airlines'],1,1,0.1679999999999999,False,True,False,SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of countries where airlines are based, grouped by country and ordered by the number of airlines in each country. The placeholder in the LIMIT clause allows the user to specify the maximum number of countries to return."
train.6858,flight_4,What are the cities that have more than 2 airports sorted by number of airports?,SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*),['airports'],1,1,0.2449230769230768,False,False,True,SELECT city FROM airports GROUP BY city HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER] ORDER BY count(*),This virtual table provides a list of cities that have more than a specified number of airports. The placeholder in the HAVING clause represents the minimum count of airports required for a city to be included in the results.
train.6862,flight_4,"For each  airport name, how many routes start at that airport, ordered from most to least?","SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC","['airports', 'routes']",2,2,0.2061176470588234,False,True,False,"SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC","This virtual table provides a count of routes originating from each airport, along with the airport names. The data is aggregated by airport name and sorted in descending order based on the number of routes."
train.6867,flight_4,"For each country and airline name, how many routes are there?","SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name","['routes', 'airlines']",2,2,0.2447058823529412,False,False,True,"SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name","This virtual table summarizes the number of routes operated by each airline, grouped by the country and name of the airline. The placeholders in the query allow for dynamic filtering based on the airline's country and name."
train.6868,flight_4,What is the total number of routes for each country and airline in that country?,"SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name","['routes', 'airlines']",2,2,0.2447058823529412,False,False,True,"SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name","This virtual table summarizes the number of routes operated by each airline, grouped by the country and name of the airline. The placeholders in the query allow for dynamic filtering based on the airline's country and name."
train.6873,flight_4,Find the number of routes that have destination John F Kennedy International Airport.,SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport',"['airports', 'routes']",2,2,0.1425882352941176,True,False,False,SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of routes that lead to a specific destination airport from the 'airports' and 'routes' tables. The placeholder in the WHERE clause represents the name of the destination airport.
train.6880,flight_4,What is the name of the airline with the most routes?,SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1,"['routes', 'airlines']",2,2,0.1679999999999999,False,True,False,SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of airline names from the 'airlines' table that are associated with routes in the 'routes' table. The results are grouped by airline name and ordered by the number of routes each airline operates, with a limit on the number of results returned as specified by the placeholder."
train.6883,flight_4,Find the busiest destination airport that runs most number of routes in China.,SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1,"['airports', 'routes']",2,2,0.2239999999999999,False,False,True,SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"The virtual table describes the names of airports located in a specific country that serve as destinations for routes. The query joins the 'airports' table with the 'routes' table to filter the airports based on the specified country. The results are grouped by airport name and ordered by the number of routes to each airport in descending order, with a limit on the number of results returned."
train.6884,flight_4,What is the name of the airport that is the destination of the most number of routes that start in China?,SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1,"['airports', 'routes']",2,2,0.2239999999999999,False,False,True,SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"The virtual table describes the names of airports located in a specific country that serve as destinations for routes. The query joins the 'airports' table with the 'routes' table to filter and group the results based on the country of the airports. The placeholders in the WHERE clause represent the country name, and the LIMIT clause allows for specifying the maximum number of results to return."
train.6980,culture_company,Show all publishers which do not have a book in 1989.,SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989,['book_club'],1,1,0.1985882352941176,False,False,True,SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the publishers of books discussed in the 'book_club' table, excluding those publishers whose books were discussed in a specific year. The placeholder in the WHERE clause represents the year to filter out the publishers."
train.6990,culture_company,Show all director names who have a movie in the year 1999 or 2000.,SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000,['movie'],1,1,0.1635113122171945,True,False,False,SELECT director FROM movie WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER],The virtual table describes the directors of movies released in specific years from the 'movie' table. The placeholders in the WHERE clause represent the years of interest.
train.6991,culture_company,Which directors had a movie in either 1999 or 2000?,SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000,['movie'],1,1,0.1635113122171945,True,False,False,SELECT director FROM movie WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the names of directors from the 'movie' table for movies released in specific years. The placeholders in the WHERE clause represent the years of interest.
train.6996,culture_company,Show the movie titles and book titles for all companies in China.,"SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'","['culture_company', 'movie', 'book_club']",3,3+,0.1807058823529412,False,True,False,"SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  [PLACEHOLDER-TYPE:STRING]","This virtual table describes the titles of movies and the corresponding book titles discussed in book clubs, filtered by the year a cultural company was incorporated. The placeholders in the WHERE clause represent the year of incorporation."
dev.95,car_1,Which model of the car has the minimum horsepower?,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;,"['car_names', 'cars_data']",2,2,0.1119999999999999,True,False,False,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table lists the car models from the 'car_names' table, ordered by their horsepower in ascending order. The placeholder in the LIMIT clause represents the maximum number of car models to be displayed."
dev.103,car_1,Which distinct car models are the produced after 1980?,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;,"['model_list', 'car_names', 'cars_data']",3,3+,0.1679999999999999,False,True,False,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides a list of distinct car models from the 'model_list' table that have been manufactured after a specific year. The query joins the 'model_list' table with the 'car_names' table to match car models with their respective makes, and then further joins with the 'cars_data' table to filter the results based on the manufacturing year. The placeholder in the WHERE clause represents the year of manufacture."
dev.106,car_1,What is the name of each continent and how many car makers are there in each one?,"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;","['countries', 'car_makers', 'continents']",3,3+,0.1807058823529412,False,True,False,"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;","This virtual table provides a count of car makers grouped by continent. It joins the 'continents' table with the 'countries' table to associate each country with its continent, and then further joins with the 'car_makers' table to count the number of car makers from each continent. The placeholder in the SELECT statement represents the continent's name."
dev.111,car_1,What is the accelerate of the car make amc hornet sportabout (sw)?,SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';,"['cars_data', 'car_names']",2,2,0.1425882352941176,True,False,False,SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  [PLACEHOLDER-TYPE:STRING];,"The virtual table describes the acceleration times of cars from the 'cars_data' table, filtered by a specific car make from the 'car_names' table. The placeholder in the WHERE clause represents the name of the car make."
dev.113,car_1,How many car makers are there in france?,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';,"['car_makers', 'countries']",2,2,0.1425882352941176,True,False,False,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  [PLACEHOLDER-TYPE:STRING];,"This virtual table provides the count of car makers based in a specific country. It joins the 'car_makers' table with the 'countries' table using the country identifier, and filters the results based on the specified country name."
dev.114,car_1,What is the number of makers of care in France?,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';,"['car_makers', 'countries']",2,2,0.1425882352941176,True,False,False,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  [PLACEHOLDER-TYPE:STRING];,"This virtual table provides the count of car makers based in a specific country. It joins the 'car_makers' table with the 'countries' table using the country identifier, and filters the results based on the specified country name."
dev.115,car_1,How many car models are produced in the usa?,SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';,"['car_makers', 'model_list', 'countries']",3,3+,0.1425882352941176,True,False,False,SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  [PLACEHOLDER-TYPE:STRING];,This virtual table provides the count of car models from the 'model_list' table that are associated with car makers from a specific country. The placeholders in the WHERE clause represent the name of the country being queried.
dev.129,car_1,Which countries in europe have at least 3 car manufacturers?,SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;,"['continents', 'car_makers', 'countries']",3,3+,0.2508684900711876,False,False,True,SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.CountryName HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER];,This virtual table lists the names of countries from the 'countries' table that belong to a specific continent. It joins the 'continents' table to filter countries by continent and the 'car_makers' table to ensure that the countries have associated car makers. The placeholders in the WHERE clause represent the continent's name and the minimum count of car makers per country.
dev.131,car_1,What is the maximum horsepower and the make of the car models with 3 cylinders?,"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;","['car_names', 'cars_data']",2,2,0.2061176470588234,False,False,True,"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T2.horsepower DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of car makes along with their corresponding horsepower from the 'car_names' and 'cars_data' tables. The results are filtered to include only those cars with a specific number of cylinders, represented by a placeholder for numeric values. Additionally, the results are ordered by horsepower in descending order, and the number of results returned is limited by another numeric placeholder."
dev.133,car_1,"Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;,"['car_names', 'cars_data']",2,2,0.1119999999999999,True,False,False,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"The virtual table describes the car models from the 'car_names' table, ordered by their fuel efficiency (MPG) in descending order. The placeholder in the LIMIT clause represents the maximum number of car models to return."
dev.150,car_1,What are the names and ids of all makers with more than 3 models?,"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;","['car_makers', 'model_list']",2,2,0.2576289592760181,False,False,True,"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of car makers along with their unique identifiers from the 'car_makers' table. It filters the results to include only those car makers that have produced more than a specified number of car models, as indicated by the placeholder in the HAVING clause."
dev.158,car_1,"For a volvo model, how many cylinders does the version with least accelerate have?",SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;,"['cars_data', 'car_names']",2,2,0.1679999999999999,False,True,False,SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.accelerate ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides the number of cylinders for cars from the 'cars_data' table, filtered by a specific car model from the 'car_names' table. The results are ordered by the acceleration time in ascending order, and the query limits the output to a specified number of entries. The placeholders represent the car model name and the limit on the number of results."
dev.160,car_1,What is the number of cars with a greater accelerate than the one with the most horsepower?,SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );,['cars_data'],1,1,0.1985882352941176,False,False,True,SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT [PLACEHOLDER-TYPE:NUMBER] );,This virtual table provides a count of cars from the 'cars_data' table that have an acceleration time greater than the acceleration time of the top specified number of cars with the highest horsepower. The placeholder in the subquery represents the number of top cars to consider based on horsepower.
dev.165,car_1,"For the cars with 4 cylinders, which model has the largest horsepower?",SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;,"['car_names', 'cars_data']",2,2,0.1679999999999999,False,True,False,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T2.horsepower DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table lists the car models from the 'car_names' table that have a specific number of cylinders. The results are ordered by the horsepower of the cars in descending order, and the number of results returned is limited by a placeholder value."
dev.166,car_1,"For all of the 4 cylinder cars, which model has the most horsepower?",SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;,"['car_names', 'cars_data']",2,2,0.1679999999999999,False,True,False,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T2.horsepower DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table lists the car models from the 'car_names' table that have a specific number of cylinders. The results are ordered by the horsepower of the cars in descending order, and the number of results returned is limited by a placeholder value."
dev.168,car_1,"Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?","select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;","['cars_data', 'car_names']",2,2,0.2635743724241289,False,False,True,"select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of car makes and their identifiers from the 'car_names' table, specifically for cars that have a horsepower greater than the minimum horsepower recorded in the 'cars_data' table and have a cylinder count less than a specified number. The placeholder in the WHERE clause represents the maximum number of cylinders allowed."
dev.176,car_1,What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?,"SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;","['car_makers', 'car_names', 'model_list']",3,3+,0.3449861371300111,False,False,True,"SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER];","This virtual table identifies car makers who have produced a significant number of car models, as well as those who have a specific number of car names associated with their models. The placeholders in the HAVING clauses represent the minimum counts of models and names, respectively."
dev.180,flight_2,What country is Jetblue Airways affiliated with?,SELECT Country FROM AIRLINES WHERE Airline  =  'JetBlue Airways',['airlines'],1,1,0.1425882352941176,True,False,False,SELECT Country FROM AIRLINES WHERE Airline  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the country of an airline based on its name. The placeholder in the WHERE clause represents the specific airline's name for which the country is being queried.
dev.194,flight_2,Give the airline with abbreviation 'UAL'.,SELECT Airline FROM AIRLINES WHERE Abbreviation  =  'UAL',['airlines'],1,1,0.1425882352941176,True,False,False,SELECT Airline FROM AIRLINES WHERE Abbreviation  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of airlines from the 'airlines' table that match a specific abbreviation. The placeholder in the WHERE clause represents the abbreviation of the airline.
dev.214,flight_2,Give the number of Jetblue Airways flights.,SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = 'JetBlue Airways',"['flights', 'airlines']",2,2,0.1425882352941176,True,False,False,SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of flights operated by a specific airline from the 'flights' table. It joins the 'flights' table with the 'airlines' table to filter the results based on the airline's name. The placeholder in the WHERE clause represents the name of the airline for which the flight count is being queried.
dev.225,flight_2,What is the code of airport that has the highest number of flights?,SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1,"['airports', 'flights']",2,2,0.1679999999999999,False,True,False,SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the airport codes from the 'airports' table that are either source or destination airports for flights in the 'flights' table. The results are grouped by airport code and ordered by the number of flights associated with each airport, with a limit on the number of results returned based on a specified number."
dev.227,flight_2,What is the code of airport that has fewest number of flights?,SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1,"['airports', 'flights']",2,2,0.1679999999999999,False,True,False,SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER],This virtual table lists unique airport codes from the 'airports' table that are either source or destination for flights in the 'flights' table. The placeholder in the LIMIT clause represents the maximum number of airport codes to return.
dev.229,flight_2,Which airline has most number of flights?,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1,"['flights', 'airlines']",2,2,0.1679999999999999,False,True,False,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of airlines from the 'airlines' table that are associated with flights in the 'flights' table. The results are grouped by airline name and ordered by the number of flights in descending order, with a limit on the number of results specified by a placeholder for numeric values."
dev.232,flight_2,What is the abbreviation of the airilne has the fewest flights and what country is it in?,"SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1","['flights', 'airlines']",2,2,0.2061176470588234,False,False,True,"SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of the abbreviations and countries of airlines that operate flights. The data is aggregated by airline, showing the most frequently operating airlines based on the number of flights. The placeholder in the LIMIT clause allows the user to specify how many results they want to retrieve."
dev.244,flight_2,Which airlines have less than 200 flights?,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200,"['flights', 'airlines']",2,2,0.2195113122171945,False,False,True,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of airlines from the 'airlines' table that operate fewer flights than a specified number. The placeholder in the HAVING clause represents the maximum number of flights an airline can operate.
dev.258,flight_2,Which airports do not have departing or arriving flights?,SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights),"['airports', 'flights']",2,2,0.1731764705882353,False,False,True,SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights),"This virtual table lists the names of airports from the 'Airports' table that do not serve as departure or arrival points for any flights. The query uses a subquery to identify airports that are involved in flights, ensuring that only airports without any flight connections are included."
dev.308,cre_Doc_Template_Mgt,Count the number of documents that use the PPT template type.,SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT',"['templates', 'documents']",2,2,0.1425882352941176,True,False,False,SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a count of documents associated with a specific type of template from the 'Documents' and 'Templates' tables. The placeholder in the WHERE clause represents the unique code for the template type.
dev.311,cre_Doc_Template_Mgt,What is the id and type code for the template used by the most documents?,"SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1","['templates', 'documents']",2,2,0.2061176470588234,False,False,True,"SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of template IDs along with their corresponding template type codes from the 'Documents' and 'Templates' tables. The results are grouped by template ID and ordered by the count of documents associated with each template, limited to a specified number of results."
dev.312,cre_Doc_Template_Mgt,Return the id and type code of the template that is used for the greatest number of documents.,"SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1","['templates', 'documents']",2,2,0.2061176470588234,False,False,True,"SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of template IDs along with their corresponding template type codes from the 'Documents' and 'Templates' tables. The results are grouped by template ID and ordered by the count of documents associated with each template, limited to a specified number of results."
dev.341,cre_Doc_Template_Mgt,Show all template type codes and the number of documents using each type.,"SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code","['templates', 'documents']",2,2,0.1807058823529412,False,True,False,"SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code","This virtual table summarizes the count of documents associated with each template type from the 'Templates' and 'Documents' tables. The placeholder in the SELECT statement represents the template type code, and the count indicates the number of documents linked to each template type."
dev.346,cre_Doc_Template_Mgt,What are the codes of template types that are not used for any document?,SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id,"['templates', 'documents']",2,2,0.1425882352941176,True,False,False,SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id,"This virtual table identifies the unique template type codes from the 'Templates' table that are not associated with any documents in the 'Documents' table. The query uses an EXCEPT clause to filter out template types that have been linked to documents, ensuring that only those template types without any corresponding documents are returned."
dev.361,cre_Doc_Template_Mgt,Show paragraph details for paragraph with text 'Korea ' .,select other_details from paragraphs where paragraph_text like 'korea',['paragraphs'],1,1,0.1425882352941176,True,False,False,select other_details from paragraphs where paragraph_text like [PLACEHOLDER-TYPE:STRING],This virtual table retrieves additional details from the 'Paragraphs' table for paragraphs that contain specific text. The placeholder in the WHERE clause represents the text pattern to search for within the paragraph content.
dev.367,cre_Doc_Template_Mgt,Show all document ids and the number of paragraphs in each document. Order by document id.,"SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",['paragraphs'],1,1,0.2061176470588234,False,False,True,"SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id","This virtual table provides a count of paragraphs associated with each document from the 'Paragraphs' table. The results are grouped by the document identifier, allowing users to see how many paragraphs belong to each document, sorted by the document ID."
dev.439,wta_1,Find the highest rank of losers in all matches.,SELECT min(loser_rank) FROM matches,['matches'],1,1,0.0865882352941176,True,False,False,SELECT min(loser_rank) FROM matches,This virtual table provides the minimum rank of losing players from the 'matches' table. The query aggregates the data to find the lowest rank among all losing players in the recorded matches.
dev.458,wta_1,"What are the full names of all left handed players, in order of birth date?","SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",['players'],1,1,0.2061176470588234,False,False,True,"SELECT first_name ,  last_name FROM players WHERE hand  =  [PLACEHOLDER-TYPE:STRING] ORDER BY birth_date",This virtual table describes the first and last names of players from the 'players' table who play with a specific hand. The results are ordered by the players' birth dates. The placeholder in the WHERE clause represents the playing hand of the players.
dev.464,wta_1,"What is the name of the winner who has won the most matches, and how many rank points does this player have?","SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",['matches'],1,1,0.2061176470588234,False,False,True,"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names and ranking points of the winning players from the 'matches' table, grouped by the winner's name. The results are ordered by the number of matches won in descending order, with a limit on the number of results returned, specified by a placeholder for numeric values."
dev.471,wta_1,Find the total ranking points for each player and their first name.,"SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name","['rankings', 'players']",2,2,0.1807058823529412,False,True,False,"SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name","This virtual table summarizes the total ranking points for each player by their first name. It combines data from the 'players' and 'rankings' tables, grouping the results by the player's first name to provide a clear view of their accumulated ranking points."
dev.479,wta_1,Find the total number of tours for each ranking date.,"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",['rankings'],1,1,0.1807058823529412,False,True,False,"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date","This virtual table summarizes the total number of tours or events considered for player rankings on each ranking date. The placeholder in the SELECT clause represents the aggregated sum of tours, while the GROUP BY clause organizes the results by the ranking date."
dev.480,wta_1,How many total tours were there for each ranking date?,"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",['rankings'],1,1,0.1807058823529412,False,True,False,"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date","This virtual table summarizes the total number of tours or events considered for player rankings on each ranking date. The placeholder in the SELECT clause represents the aggregated sum of tours, while the GROUP BY clause organizes the results by the ranking date."
dev.533,student_transcripts_tracking,"Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.","SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2","['student_enrolment', 'students']",2,2,0.3014423466999532,False,False,True,"SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the first name, middle name, last name, and unique identifier of students from the 'Students' table who are enrolled in a specific number of courses. The placeholder in the HAVING clause represents the count of courses the students are enrolled in."
dev.536,student_transcripts_tracking,"What are the first, middle, and last names for everybody enrolled in a Bachelors program?","SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'","['student_enrolment', 'degree_programs', 'students']",3,3+,0.2319999999999999,False,False,True,"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides a list of distinct first, middle, and last names of students who are enrolled in a specific degree program. The placeholders in the WHERE clause represent the name of the degree program being queried."
dev.537,student_transcripts_tracking,Find the kind of program which most number of students are enrolled in?,SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1,"['student_enrolment', 'degree_programs']",2,2,0.1679999999999999,False,True,False,SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of degree program names from the 'Degree_Programs' table, which are associated with student enrolments. The results are grouped by the degree program name and ordered by the number of enrolments in descending order, allowing users to see the most popular degree programs. The placeholder in the LIMIT clause represents the maximum number of results to return."
dev.539,student_transcripts_tracking,Find the program which most number of students are enrolled in. List both the id and the summary.,"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1","['student_enrolment', 'degree_programs']",2,2,0.2061176470588234,False,False,True,"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of degree programs along with their unique identifiers from the 'Degree_Programs' table. It joins with the 'Student_Enrolment' table to count the number of students enrolled in each degree program. The results are grouped by the degree program ID and ordered by the number of enrollments in descending order, allowing users to see the most popular degree programs. The placeholder in the LIMIT clause represents the maximum number of results to return."
dev.541,student_transcripts_tracking,"Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.","SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","['student_enrolment', 'students']",2,2,0.2626849315068493,False,False,True,"SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of students along with their first, middle, and last names, and the count of their enrolments in courses. The results are grouped by each student's unique identifier and ordered by the number of enrolments in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of students to return."
dev.547,student_transcripts_tracking,What's the name of the course with most number of enrollments?,SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1,"['courses', 'student_enrolment_courses']",2,2,0.1679999999999999,False,True,False,SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of course names from the 'Courses' table that are associated with student enrolments. The results are grouped by course name and ordered by the number of enrolments in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of course names to return."
dev.550,student_transcripts_tracking,What are the last name of the students who live in North Carolina but have not registered in any degree programs?,SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id,"['addresses', 'student_enrolment', 'students']",3,3+,0.2239999999999999,False,False,True,SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id,"This virtual table lists the last names of students who currently reside in a specific state, excluding those who are enrolled in any degree program. The placeholders in the query represent the state name and ensure that the results are filtered accordingly."
dev.554,student_transcripts_tracking,What is the mobile phone number of the student named Timmothy Ward ?,select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward',['students'],1,1,0.1807058823529412,False,True,False,select cell_mobile_number from students where first_name  =  [PLACEHOLDER-TYPE:STRING] and last_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the mobile phone numbers of students from the 'Students' table based on their first and last names. The placeholders in the WHERE clause represent the student's first and last names.
dev.561,student_transcripts_tracking,Which address holds the most number of students currently? List the address id and all lines.,"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1","['addresses', 'students']",2,2,0.2319999999999999,False,False,True,"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of unique addresses that are currently associated with students, including the address ID and the primary and secondary address lines. The results are grouped by address ID and ordered by the number of students associated with each address, allowing for a limit on the number of results returned."
dev.576,student_transcripts_tracking,What is the id of the semester that had both Masters and Bachelors students enrolled?,SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor',"['student_enrolment', 'degree_programs']",2,2,0.2449230769230768,False,False,True,SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table identifies the distinct semesters in which students are enrolled in a specific degree program. The placeholders in the query represent the name of the degree program, allowing users to specify which program's semesters they are interested in."
dev.580,student_transcripts_tracking,What other details can you tell me about students in reverse alphabetical order?,SELECT other_student_details FROM Students ORDER BY other_student_details DESC,['students'],1,1,0.1119999999999999,True,False,False,SELECT other_student_details FROM Students ORDER BY other_student_details DESC,"This virtual table provides a list of additional details related to students from the 'Students' table, sorted in descending order. The placeholder in the SELECT clause represents the specific details of the students."
dev.581,student_transcripts_tracking,Describe the section h.,SELECT section_description FROM Sections WHERE section_name  =  'h',['sections'],1,1,0.1425882352941176,True,False,False,SELECT section_description FROM Sections WHERE section_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the description of a specific section from the 'Sections' table based on the section's name. The placeholder in the WHERE clause represents the name of the section being queried.
dev.705,world_1,How many countries have governments that are republics?,SELECT count(*) FROM country WHERE GovernmentForm  =  'Republic',['country'],1,1,0.1425882352941176,True,False,False,SELECT count(*) FROM country WHERE GovernmentForm  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of countries from the 'country' table that have a specific form of government. The placeholder in the WHERE clause represents the type of government being queried.
dev.730,world_1,What is the average GNP and total population in all nations whose government is US territory?,"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  'US Territory'",['country'],1,1,0.1807058823529412,False,True,False,"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  [PLACEHOLDER-TYPE:STRING]",This virtual table calculates the average Gross National Product (GNP) and the total population of countries from the 'country' table that have a specific form of government. The placeholder in the WHERE clause represents the type of government being queried.
dev.734,world_1,How many type of governments are in Africa?,SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  'Africa',['country'],1,1,0.1679999999999999,False,True,False,SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of distinct government forms present in countries located within a specific continent. The placeholder in the WHERE clause represents the continent's name.
dev.735,world_1,How many different forms of governments are there in Africa?,SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  'Africa',['country'],1,1,0.1679999999999999,False,True,False,SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of distinct government forms present in countries located within a specific continent. The placeholder in the WHERE clause represents the continent's name.
dev.742,world_1,Which continent has the most diverse languages?,SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1,"['country', 'countrylanguage']",2,2,0.1679999999999999,False,True,False,SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of continents along with the count of countries that speak languages from those continents. The placeholder in the LIMIT clause allows the user to specify the maximum number of continents to retrieve.
dev.743,world_1,Which continent speaks the most languages?,SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1,"['country', 'countrylanguage']",2,2,0.1679999999999999,False,True,False,SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of continents along with the count of countries that speak languages from those continents. The placeholder in the LIMIT clause allows the user to specify the maximum number of continents to retrieve based on the number of countries speaking languages from each continent.
dev.746,world_1,What are the names of nations speak both English and French?,SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French',"['country', 'countrylanguage']",2,2,0.2195113122171945,False,False,True,SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of countries that have two specific languages spoken within them. The placeholders in the WHERE clause represent the names of the languages being queried.
dev.755,world_1,Which countries have either English or Dutch as an official language?,SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND IsOfficial  =  'T' UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Dutch' AND IsOfficial  =  'T',"['country', 'countrylanguage']",2,2,0.1807058823529412,False,True,False,SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  [PLACEHOLDER-TYPE:STRING] AND IsOfficial  =  [PLACEHOLDER-TYPE:STRING] UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  [PLACEHOLDER-TYPE:STRING] AND IsOfficial  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a comprehensive view of countries and their languages by joining the 'country' and 'countrylanguage' tables. It filters the results to show only those countries where a specific language is spoken, and whether that language is official or not. The placeholders in the WHERE clause represent the language name and its official status."
dev.766,world_1,What is the total number of people living in the nations that do not use English?,SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English'),"['country', 'countrylanguage']",2,2,0.2112941176470588,False,False,True,SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  [PLACEHOLDER-TYPE:STRING]),This virtual table calculates the total population of countries that do not have a specific language as an official language. The placeholder in the subquery represents the language name that is being checked against the countries.
dev.767,world_1,How many people live in countries that do not speak English?,SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English'),"['country', 'countrylanguage']",2,2,0.2112941176470588,False,False,True,SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  [PLACEHOLDER-TYPE:STRING]),This virtual table calculates the total population of countries that do not have a specific language as an official language. The placeholder in the subquery represents the language name that is being checked against the countries.
dev.783,world_1,Return the codes of countries that do not speak English and do not have Republics for governments.,SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  'English',"['country', 'countrylanguage']",2,2,0.2748235294117647,False,False,True,SELECT Code FROM country WHERE GovernmentForm != [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies the unique codes of countries that do not have a specific form of government and are not associated with a particular language. The placeholders in the query represent the government form and the language of interest.
dev.784,world_1,Which cities are in European countries where English is not the official language?,SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English'),"['country', 'city', 'countrylanguage']",3,3+,0.2625882352941177,False,False,True,SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  [PLACEHOLDER-TYPE:STRING] AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  [PLACEHOLDER-TYPE:STRING] AND T4.Language  =  [PLACEHOLDER-TYPE:STRING]),"This virtual table provides a list of distinct city names from the 'city' table that are located in a specific continent, as defined in the 'country' table. The query also filters out cities from countries where a specified language is an official language, ensuring that only cities from countries without that official language are included. The placeholders in the WHERE clause represent the continent and the language criteria."
dev.785,world_1,What are the names of cities in Europe for which English is not the official language?,SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English'),"['country', 'city', 'countrylanguage']",3,3+,0.2625882352941177,False,False,True,SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  [PLACEHOLDER-TYPE:STRING] AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  [PLACEHOLDER-TYPE:STRING] AND T4.Language  =  [PLACEHOLDER-TYPE:STRING]),"This virtual table lists the names of cities from the 'city' table that are located in a specific continent, while excluding those cities from countries where a specified language is an official language. The placeholders in the WHERE clause represent the continent and the language criteria."
dev.788,world_1,"What are the name, independence year, and surface area of the country with the smallest population?","SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",['country'],1,1,0.176,False,True,False,"SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of countries, displaying their names, surface areas, and the year they gained independence. The results are ordered by the population of the countries, and the number of entries returned is limited by a specified placeholder for numeric values."
dev.789,world_1,"Give the name, year of independence, and surface area of the country that has the lowest population.","SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",['country'],1,1,0.176,False,True,False,"SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of countries, displaying their names, surface areas, and the year they gained independence. The results are ordered by the population of the countries, and the number of entries returned is limited by a specified placeholder for numeric values."
dev.793,world_1,"What are the names of countries that speak more than 2 languages, as well as how many languages they speak?","SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2","['country', 'countrylanguage']",2,2,0.2576289592760181,False,False,True,"SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a count of languages spoken in each country from the 'country' table, along with the country's name. The query filters the results to only include countries where the number of languages spoken exceeds a specified threshold, represented by a placeholder for numeric values."
dev.796,world_1,Find the government form name and total population for each government form whose average life expectancy is longer than 72.,"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",['country'],1,1,0.2576289592760181,False,False,True,"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table summarizes the total population of countries grouped by their government form, filtering for those government forms where the average life expectancy exceeds a specified threshold. The placeholder in the HAVING clause represents the minimum average life expectancy value."
dev.797,world_1,What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?,"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",['country'],1,1,0.2576289592760181,False,False,True,"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table summarizes the total population of countries grouped by their government form, filtering for those government forms where the average life expectancy exceeds a specified threshold. The placeholder in the HAVING clause represents the minimum average life expectancy value."
dev.801,world_1,Return the names and surface areas of the 5 largest countries.,"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",['country'],1,1,0.1501176470588235,True,False,False,"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of country names along with their surface areas, sorted in descending order by surface area. The placeholder in the LIMIT clause allows the user to specify the maximum number of countries to retrieve."
dev.810,world_1,What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?,"select sum(population) ,  avg(surfacearea) from country where continent  =  'north america' and surfacearea  >  3000",['country'],1,1,0.2329861371300112,False,False,True,"select sum(population) ,  avg(surfacearea) from country where continent  =  [PLACEHOLDER-TYPE:STRING] and surfacearea  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the total population and average surface area of countries located in a specific continent that have a surface area greater than a specified value. The placeholders in the WHERE clause represent the continent's name and the minimum surface area.
dev.811,world_1,Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .,"select sum(population) ,  avg(surfacearea) from country where continent  =  'north america' and surfacearea  >  3000",['country'],1,1,0.2329861371300112,False,False,True,"select sum(population) ,  avg(surfacearea) from country where continent  =  [PLACEHOLDER-TYPE:STRING] and surfacearea  >  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the total population and average surface area of countries located in a specific continent that have a surface area greater than a specified value. The placeholders in the WHERE clause represent the continent's name and the minimum surface area.
dev.812,world_1,What are the cities whose population is between 160000 and 900000?,SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000,['city'],1,1,0.1425882352941176,True,False,False,SELECT name FROM city WHERE Population BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of cities from the 'city' table that have a population within a specified range. The placeholders in the WHERE clause represent the lower and upper limits of the population range.
dev.921,dog_kennels,Find the average age of the dogs who went through treatments.,SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments ),"['dogs', 'treatments']",2,2,0.1731764705882353,False,True,False,SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments ),This virtual table calculates the average age of dogs that have received treatments. The placeholder in the WHERE clause allows for filtering based on specific dog identifiers if needed.
dev.924,dog_kennels,Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .,select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 ),"['dogs', 'treatments']",2,2,0.2254567253653053,False,False,True,select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  [PLACEHOLDER-TYPE:NUMBER] ),This virtual table lists the names of dogs from the 'Dogs' table that have not received treatments exceeding a specified total cost. The placeholder in the HAVING clause represents the maximum allowable total treatment cost for filtering the dogs.
dev.937,dog_kennels,Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.,"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","['owners', 'dogs', 'treatments']",3,3+,0.2061176470588234,False,False,True,"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of owners along with their last names who have had dogs treated, sorted by the number of treatments in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of owners to display."
dev.942,dog_kennels,Which professionals have done at least two types of treatments? List the professional id and cell phone.,"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2","['professionals', 'treatments']",2,2,0.2576289592760181,False,False,True,"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides a list of professionals along with their cell numbers who have administered a minimum number of treatments. The placeholder in the HAVING clause represents the minimum count of treatments that a professional must have administered to be included in the results.
dev.943,dog_kennels,Find the id and cell phone of the professionals who operate two or more types of treatments.,"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2","['professionals', 'treatments']",2,2,0.2576289592760181,False,False,True,"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides a list of professionals along with their cell numbers who have administered a minimum number of treatments. The placeholder in the HAVING clause represents the minimum count of treatments that a professional must have administered to be included in the results.
dev.950,dog_kennels,"List each owner's first name, last name, and the size of his for her dog.","SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","['owners', 'dogs']",2,2,0.1505882352941176,False,True,False,"SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","This virtual table provides the first and last names of dog owners along with the size code of their dogs. It combines data from the 'Owners' and 'Dogs' tables, linking them through the owner_id. The placeholders in the SELECT statement allow for dynamic querying of owner names and their corresponding dog's size code."
dev.954,dog_kennels,List the names of the dogs of the rarest breed and the treatment dates of them.,"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )","['dogs', 'treatments']",2,2,0.2367058823529411,False,False,True,"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER] )","This virtual table provides the names of dogs along with the dates of their treatments from the 'Dogs' and 'Treatments' tables. It filters the results to include only those dogs that belong to the least common breed, as determined by the breed code, using a placeholder for the limit on the number of breeds to consider."
dev.958,dog_kennels,What are the arriving date and the departing date of the dogs who have gone through a treatment?,"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id","['dogs', 'treatments']",2,2,0.1501176470588235,True,False,False,"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id","This virtual table provides a list of unique arrival and departure dates for dogs from the 'Dogs' table, along with their associated treatment records from the 'Treatments' table. The placeholders in the JOIN clause represent the relationships between the dogs and their treatments."
dev.960,dog_kennels,List the last name of the owner owning the youngest dog.,SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs ),"['owners', 'dogs']",2,2,0.1731764705882353,False,True,False,SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs ),"This virtual table describes the last names of owners who own the oldest dog in the 'Dogs' table. The query joins the 'Owners' and 'Dogs' tables based on the owner ID and filters the results to find the maximum age of dogs, using a subquery to determine which dog is the oldest."
dev.997,dog_kennels,Find the distinct breed type and size type combinations for dogs.,"SELECT DISTINCT breed_code ,  size_code FROM dogs",['dogs'],1,1,0.1501176470588235,True,False,False,"SELECT DISTINCT breed_code ,  size_code FROM dogs",This virtual table provides a unique list of breed codes and size codes from the 'Dogs' table. The placeholders represent the breed and size categories associated with the dogs.
dev.999,dog_kennels,What are each professional's first name and description of the treatment they have performed?,"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code","['professionals', 'treatments', 'treatment_types']",3,3+,0.1501176470588235,True,False,False,"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code","This virtual table provides a list of unique first names of professionals along with the descriptions of the treatment types they have administered. The data is sourced from the 'Professionals', 'Treatments', and 'Treatment_Types' tables, ensuring that only distinct combinations of professional names and treatment descriptions are displayed."
