sample_id,db_id,question,gold_sql,source_tables,len_tbls,cate_len_tbls,gold_c,need_1|wrong,need_2|wrong,need_3+|wrong,virtual_table,description
train.64,student_assessment,List the id of students who attended some courses?,SELECT student_id FROM student_course_attendance,['student_course_attendance'],1,1,0.0865882352941176,True,False,False,SELECT student_id FROM student_course_attendance,This virtual table describes the identifiers of students who have attended courses from the 'Student_Course_Attendance' table. The placeholder in the SELECT clause represents the unique student identifiers.
train.68,student_assessment,What details do we have on the students who registered for courses most recently?,SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1,"['student_course_registrations', 'students']",2,2,0.1119999999999999,False,True,False,SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of student details from the 'Students' table for students who have registered for courses. The data is retrieved by joining the 'Student_Course_Registrations' table with the 'Students' table based on the student ID. The results are ordered by the registration date in descending order, and a placeholder is included to limit the number of records returned."
train.76,student_assessment,What is the id of the candidate who most recently accessed the course?,SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1,['candidate_assessments'],1,1,0.1119999999999999,True,False,False,SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of candidate identifiers from the 'Candidate_Assessments' table, ordered by the date of assessment in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return."
train.78,student_assessment,What are the details of the student who registered for the most number of courses?,SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,"['student_course_registrations', 'students']",2,2,0.1679999999999999,False,True,False,SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of student details from the 'Students' table, specifically for those students who have registered for courses. The results are grouped by each student to ensure unique entries and are ordered by the number of course registrations in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of student details to return."
train.82,student_assessment,"For each course id, how many students are registered and what are the course names?","SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id","['courses', 'student_course_registrations', 'students']",3,3+,0.1807058823529412,False,False,True,"SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id","This virtual table summarizes the number of students registered for each course from the 'Courses' table. It joins the 'Students' table with the 'Student_Course_Registrations' table to link students to their course registrations, and then further joins with the 'Courses' table to retrieve course names. The result is grouped by course ID to count the number of students per course."
train.89,student_assessment,What is the id of the student who most recently registered course 301?,SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1,['student_course_attendance'],1,1,0.1679999999999999,True,False,False,SELECT student_id FROM student_course_attendance WHERE course_id = [PLACEHOLDER-TYPE:NUMBER] ORDER BY date_of_attendance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The results are ordered by the date of attendance in descending order, and the number of results returned is limited by a placeholder for numeric values."
train.92,student_assessment,What are the different cities where people live?,SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id,"['addresses', 'people_addresses']",2,2,0.1119999999999999,False,True,False,SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id,This virtual table provides a list of unique cities from the 'Addresses' table that are associated with people through the 'People_Addresses' table. The placeholder in the JOIN clause represents the relationship between addresses and people.
train.105,student_assessment,List the id of students who registered course statistics in the order of registration date.,SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'statistics' ORDER BY T2.registration_date,"['courses', 'student_course_registrations']",2,2,0.1679999999999999,False,True,False,SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.registration_date,"This virtual table lists the identifiers of students who are registered for a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course, allowing users to filter the results based on their input."
train.106,student_assessment,What are the ids of the students who registered course statistics by order of registration date?,SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'statistics' ORDER BY T2.registration_date,"['courses', 'student_course_registrations']",2,2,0.1679999999999999,False,True,False,SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.registration_date,"This virtual table lists the unique identifiers of students who are registered for a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course, allowing users to filter the results based on their input."
train.387,flight_1,Show origins of all flights with destination Honolulu.,SELECT origin FROM Flight WHERE destination  =  'Honolulu',['flight'],1,1,0.1425882352941176,True,False,False,SELECT origin FROM Flight WHERE destination  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the starting locations of flights from the 'Flight' table that are headed to a specific destination. The placeholder in the WHERE clause represents the destination's name.
train.390,flight_1,What are the departure and arrival dates of all flights from LA to Honolulu?,"SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  'Los Angeles' AND destination  =  'Honolulu'",['flight'],1,1,0.2016289592760181,True,False,False,"SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  [PLACEHOLDER-TYPE:STRING] AND destination  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the scheduled departure and arrival dates of flights from the 'Flight' table that originate from a specific location and are destined for another specific location. The placeholders in the WHERE clause represent the origin and destination of the flight.
train.400,flight_1,What are the numbers of the shortest flights?,SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3,['flight'],1,1,0.1119999999999999,True,False,False,SELECT flno FROM Flight ORDER BY distance ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the flight numbers from the 'Flight' table, ordered by the distance of each flight in ascending order. The placeholder in the LIMIT clause represents the maximum number of flight numbers to be returned."
train.408,flight_1,What place has the most flights coming from there?,SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1,['flight'],1,1,0.1679999999999999,True,False,False,SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of flight origins from the 'Flight' table, grouped by the origin location. The results are ordered by the number of flights departing from each origin in descending order, with a limit on the number of origins returned as specified by the placeholder."
train.416,flight_1,What is the name of each aircraft and how many flights does each one complete?,"SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid","['aircraft', 'flight']",2,2,0.1807058823529412,False,True,False,"SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",This virtual table provides the names of aircraft along with the count of flights associated with each aircraft from the 'Flight' and 'Aircraft' tables. The placeholder in the SELECT statement allows for dynamic retrieval of aircraft names and their corresponding flight counts.
train.429,flight_1,Show names for all employees who do not have certificate of Boeing 737-800.,SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Boeing 737-800',"['employee', 'certificate', 'aircraft']",3,3+,0.2367058823529411,False,False,True,SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of employees from the 'Employee' table who do not hold a certificate for a specific aircraft model. The placeholder in the query represents the name of the aircraft model.
train.433,flight_1,Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.,SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5,"['aircraft', 'certificate']",2,2,0.2239999999999999,False,True,False,SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.aid ORDER BY count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the names of aircraft that have been certified by employees, filtered by the maximum distance the aircraft can travel. The results are grouped by aircraft ID and ordered based on the count of certifications that meet a specified threshold."
train.434,flight_1,What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?,SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5,"['aircraft', 'certificate']",2,2,0.2239999999999999,False,True,False,SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.aid ORDER BY count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the names of aircraft that have been certified by employees, filtered by the maximum distance the aircraft can travel. The results are grouped by aircraft ID and ordered based on the count of certifications that meet a specified threshold."
train.437,flight_1,What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?,SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1,"['employee', 'certificate', 'aircraft']",3,3+,0.2239999999999999,False,False,True,SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of employees who hold certificates for aircraft that can travel a distance greater than a specified value. The results are grouped by employee ID and ordered by the number of certificates held, with a limit on the number of results returned."
train.448,allergy_1,What are all the different food allergies?,SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  'food',['allergy_type'],1,1,0.1679999999999999,True,False,False,SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of distinct allergies from the 'Allergy_Type' table that belong to a specific category of allergy. The placeholder in the WHERE clause represents the type of allergy being queried.
train.456,allergy_1,Which allergy type is most common?,SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1,['allergy_type'],1,1,0.1679999999999999,True,False,False,SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a summary of the different types of allergies categorized in the 'Allergy_Type' table. It groups the allergies by their type and orders them by the frequency of occurrence, allowing users to see the most common allergy types. The placeholder in the LIMIT clause represents the maximum number of allergy types to display."
train.458,allergy_1,Which allergy type is the least common?,SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1,['allergy_type'],1,1,0.1679999999999999,True,False,False,SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values."
train.462,allergy_1,What are the full names of all students,"SELECT Fname ,  Lname FROM Student",['student'],1,1,0.1247058823529411,True,False,False,"SELECT Fname ,  Lname FROM Student","This virtual table describes the first and last names of students from the 'Student' table. The query can be further modified to include conditions or filters based on specific criteria such as age, major, or city code."
train.472,allergy_1,What are the student ids for all male students?,SELECT StuID FROM Student WHERE Sex  =  'M',['student'],1,1,0.1425882352941176,True,False,False,SELECT StuID FROM Student WHERE Sex  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the unique identifiers of students from the 'Student' table who belong to a specific gender. The placeholder in the WHERE clause represents the gender of the students.
train.492,allergy_1,What is the largest major?,SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1,['student'],1,1,0.1679999999999999,True,False,False,SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of academic majors from the 'Student' table, grouped by the major and ordered by the number of students in each major in descending order. The placeholder in the LIMIT clause represents the maximum number of majors to return."
train.501,allergy_1,Which advisor has most number of students?,SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1,['student'],1,1,0.1679999999999999,True,False,False,SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of academic advisors from the 'Student' table, grouped by the advisor's name. The results are ordered by the number of students assigned to each advisor in descending order, with a limit on the number of advisors returned, specified by a placeholder for numeric values."
train.504,allergy_1,How many students are affected by cat allergies?,SELECT count(*) FROM Has_allergy WHERE Allergy  =  'Cat',['has_allergy'],1,1,0.1425882352941176,True,False,False,SELECT count(*) FROM Has_allergy WHERE Allergy  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of students who have a specific allergy from the 'Has_Allergy' table. The placeholder in the WHERE clause represents the name of the allergy.
train.508,allergy_1,Which students are unaffected by allergies?,SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy,"['has_allergy', 'student']",2,2,0.1425882352941176,False,True,False,SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy,This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.
train.509,allergy_1,How many female students have milk or egg allergies?,SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  'F' AND T1.allergy  =  'Milk' OR T1.allergy  =  'Eggs',"['has_allergy', 'student']",2,2,0.1807058823529412,False,True,False,SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  [PLACEHOLDER-TYPE:STRING] AND T1.allergy  =  [PLACEHOLDER-TYPE:STRING] OR T1.allergy  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the count of students who have specific allergies, filtered by their gender. The placeholders in the WHERE clause represent the gender of the students and the names of the allergies being queried."
train.510,allergy_1,How many students who are female are allergic to milk or eggs?,SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  'F' AND T1.allergy  =  'Milk' OR T1.allergy  =  'Eggs',"['has_allergy', 'student']",2,2,0.1807058823529412,False,True,False,SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  [PLACEHOLDER-TYPE:STRING] AND T1.allergy  =  [PLACEHOLDER-TYPE:STRING] OR T1.allergy  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the count of students who have specific allergies, filtered by their gender. The placeholders in the WHERE clause represent the gender of the students and the names of the allergies being queried."
train.513,allergy_1,Which allergy has most number of students affected?,SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1,['has_allergy'],1,1,0.1679999999999999,True,False,False,SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of allergies from the 'Has_Allergy' table, grouped by the allergy name and ordered by the frequency of occurrence. The placeholder in the LIMIT clause allows the user to specify the maximum number of allergies to retrieve."
train.518,allergy_1,How many students are affected by each allergy type?,"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype","['has_allergy', 'allergy_type']",2,2,0.1807058823529412,False,True,False,"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype","This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type."
train.520,allergy_1,What are the last names and ages of the students who are allergic to milk and cat?,"SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')","['has_allergy', 'student']",2,2,0.2752941176470588,False,True,False,"SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  [PLACEHOLDER-TYPE:STRING])",This virtual table provides the last names and ages of students from the 'Student' table who have two specific allergies. The placeholders in the query represent the names of the allergies that are being checked for each student.
train.522,allergy_1,What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names.,"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  'Lisa' ORDER BY T1.Allergy","['has_allergy', 'allergy_type', 'student']",3,3+,0.2061176470588234,False,False,True,"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy",This virtual table provides a list of allergies and their types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.
train.525,allergy_1,Find the average age of the students who have allergies with food and animal types.,SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food' INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'animal'),"['has_allergy', 'allergy_type', 'student']",3,3+,0.2469325681492109,False,False,True,SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  [PLACEHOLDER-TYPE:STRING]),"This virtual table calculates the average age of students who have two specific types of allergies. The placeholders in the query represent the categories of allergies that the students have, allowing for flexible input to filter the results based on different allergy types."
train.527,allergy_1,List the first and last name of the students who do not have any food type allergy.,"SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food')","['has_allergy', 'allergy_type', 'student']",3,3+,0.2494117647058823,False,False,True,"SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  [PLACEHOLDER-TYPE:STRING])",This virtual table provides the first and last names of students from the 'Student' table who do not have a specific type of allergy. The placeholder in the subquery represents the allergy type that is being filtered out.
train.529,allergy_1,Find the number of male (sex is 'M') students who have some food type allery.,SELECT count(*) FROM Student WHERE sex  =  'M' AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food'),"['has_allergy', 'allergy_type', 'student']",3,3+,0.2254567253653053,False,False,True,SELECT count(*) FROM Student WHERE sex  =  [PLACEHOLDER-TYPE:STRING] AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  [PLACEHOLDER-TYPE:STRING]),This virtual table counts the number of students from the 'Student' table who are of a specific gender and have a specific type of allergy. The placeholders in the WHERE clause represent the gender of the students and the type of allergy.
train.531,allergy_1,Find the different first names and cities of the students who have allergy to milk or cat.,"SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  'Milk' OR T2.Allergy  =  'Cat'","['has_allergy', 'student']",2,2,0.2270407239819004,False,True,False,"SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  [PLACEHOLDER-TYPE:STRING] OR T2.Allergy  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides a list of distinct first names and city codes of students who have specific allergies. The placeholders in the WHERE clause represent the names of the allergies being queried.
train.533,allergy_1,Find the number of students who are older than 18 and do not have allergy to either food or animal.,SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food' OR T2.allergytype  =  'animal'),"['has_allergy', 'allergy_type', 'student']",3,3+,0.2469325681492108,False,False,True,SELECT count(*) FROM Student WHERE age  >  [PLACEHOLDER-TYPE:NUMBER] AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  [PLACEHOLDER-TYPE:STRING] OR T2.allergytype  =  [PLACEHOLDER-TYPE:STRING]),This virtual table counts the number of students from the 'Student' table who are older than a specified age and do not have allergies of certain types. The placeholders in the query represent the age threshold and the allergy types to be excluded.
train.535,allergy_1,Find the first name and major of the students who are not allegry to soy.,"SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Soy')","['has_allergy', 'student']",2,2,0.2494117647058823,False,True,False,"SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  [PLACEHOLDER-TYPE:STRING])",This virtual table provides the first names and majors of students from the 'Student' table who do not have a specific allergy. The placeholder in the subquery represents the name of the allergy being checked against the 'Has_Allergy' table.
train.542,store_1,What are the names of the countries and average invoice size of the top countries by size?,"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;",['invoices'],1,1,0.2061176470588234,True,False,False,"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned."
train.553,store_1,List every album ordered by album title in ascending order.,SELECT title FROM albums ORDER BY title;,['albums'],1,1,0.1119999999999999,True,False,False,SELECT title FROM albums ORDER BY title;,"This virtual table lists the titles of all albums from the 'albums' table, sorted in alphabetical order. The query retrieves the 'title' column and orders the results by the album title."
train.560,store_1,"What are the total amount of money in the invoices billed from Chicago, Illinois?",SELECT sum(total) FROM invoices WHERE billing_city  =  'Chicago' AND billing_state  =  'IL';,['invoices'],1,1,0.1635113122171945,True,False,False,SELECT sum(total) FROM invoices WHERE billing_city  =  [PLACEHOLDER-TYPE:STRING] AND billing_state  =  [PLACEHOLDER-TYPE:STRING];,This virtual table calculates the total amount of invoices issued for a specific billing city and state. The placeholders in the WHERE clause represent the billing city and state for which the total is being calculated.
train.564,store_1,How many invoices were billed from each state?,"SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  'USA' GROUP BY billing_state;",['invoices'],1,1,0.2367058823529411,True,False,False,"SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  [PLACEHOLDER-TYPE:STRING] GROUP BY billing_state;",This virtual table summarizes the number of invoices issued in each state within a specific country. The placeholder in the WHERE clause represents the name of the country for which the invoice data is being aggregated.
train.565,store_1,List the state in the US with the most invoices.,"SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  'USA' GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;",['invoices'],1,1,0.2621176470588234,True,False,False,"SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  [PLACEHOLDER-TYPE:STRING] GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table summarizes the number of invoices issued per state within a specific country. The placeholder in the WHERE clause represents the country for which the invoice counts are being aggregated, while the placeholder in the LIMIT clause specifies the maximum number of states to return, ordered by the count of invoices in descending order."
train.566,store_1,What are the states with the most invoices?,"SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  'USA' GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;",['invoices'],1,1,0.2621176470588234,True,False,False,"SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  [PLACEHOLDER-TYPE:STRING] GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table summarizes the number of invoices issued per state within a specific country. The placeholder in the WHERE clause represents the country name, while the placeholder in the LIMIT clause indicates the maximum number of states to return, sorted by the count of invoices in descending order."
train.567,store_1,List the number of invoices and the invoice total from California.,"SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  'CA';",['invoices'],1,1,0.2065882352941176,True,False,False,"SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  [PLACEHOLDER-TYPE:STRING];",This virtual table summarizes the total number of invoices and the total amount billed for a specific billing state from the 'invoices' table. The placeholder in the WHERE clause represents the billing state being queried.
train.575,store_1,What is Astrid Gruber's email and phone number?,"SELECT email ,  phone FROM customers WHERE first_name = 'Astrid' AND last_name = 'Gruber';",['customers'],1,1,0.2016289592760181,True,False,False,"SELECT email ,  phone FROM customers WHERE first_name = [PLACEHOLDER-TYPE:STRING] AND last_name = [PLACEHOLDER-TYPE:STRING];",This virtual table describes the email addresses and phone numbers of customers from the 'customers' table who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.
train.593,store_1,Find the full name of employee who supported the most number of customers.,"SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1","['employees', 'customers']",2,2,0.2061176470588234,False,True,False,"SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of support representatives' first and last names from the 'employees' table, who are associated with customers in the 'customers' table. The results are grouped by the representative's ID and ordered by the number of customers they support, with a limit on the number of representatives returned based on a specified number."
train.594,store_1,What is the full name of the employee who has the most customers?,"SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1","['employees', 'customers']",2,2,0.2061176470588234,False,True,False,"SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the first and last names of employees who serve as support representatives for customers. The data is aggregated by the employee's ID, and the results are ordered by the number of customers they support in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return."
train.604,store_1,How many employees who are IT staff are from each city?,"SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",['employees'],1,1,0.2367058823529411,True,False,False,"SELECT count(*) ,  city FROM employees WHERE title  =  [PLACEHOLDER-TYPE:STRING] GROUP BY city","This virtual table provides a count of employees grouped by their city, specifically for those who hold a certain job title. The placeholder in the WHERE clause represents the job title of the employees."
train.624,store_1,What is the name of the album that has the track Ball to the Wall?,SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = 'Balls to the Wall';,"['albums', 'tracks']",2,2,0.1425882352941176,False,True,False,SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the titles of albums from the 'albums' table that contain tracks of a specific name. The placeholder in the WHERE clause represents the name of the track.
train.632,store_1,What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?,SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' OR T3.name = 'MPEG audio file';,"['tracks', 'genres', 'media_types']",3,3+,0.1635113122171945,False,False,True,SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T3.name = [PLACEHOLDER-TYPE:STRING];,This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre or media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.
train.946,medicine_enzyme_interaction,What are the names and trade names of the medcines that are FDA approved?,"SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'",['medicine'],1,1,0.1807058823529412,True,False,False,"SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and trade names of medicines from the 'medicine' table that have a specific FDA approval status. The placeholder in the WHERE clause represents the FDA approval status of the medicine.
train.951,medicine_enzyme_interaction,"What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.","SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC","['medicine', 'medicine_enzyme_interaction']",2,2,0.2319999999999999,False,True,False,"SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC","This virtual table provides a list of medicines along with their unique identifiers and FDA approval status, sorted by the number of interactions they have with enzymes. The placeholders in the query allow for dynamic filtering and sorting based on the interaction count."
train.953,medicine_enzyme_interaction,What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?,"SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1","['enzyme', 'medicine_enzyme_interaction']",2,2,0.2621176470588234,False,True,False,"SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of enzyme identifiers and their names from the 'enzyme' table that are involved in a specific type of interaction with medicines. The interaction type is specified by a placeholder, and the results are grouped by enzyme ID, ordered by the frequency of interactions in descending order, with a limit on the number of results returned."
train.968,medicine_enzyme_interaction,What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?,"SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'","['medicine', 'medicine_enzyme_interaction']",2,2,0.2576289592760181,False,True,False,"SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and trade names of medicines that have specific types of interactions with enzymes. The placeholders in the WHERE clause represent the types of interactions being queried.
train.970,medicine_enzyme_interaction,What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?,"SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'","['enzyme', 'medicine', 'medicine_enzyme_interaction']",3,3+,0.2367058823529411,False,False,True,"SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the names and trade names of medicines from the 'medicine' table that do not interact with a specific enzyme product. The placeholder in the EXCEPT clause represents the product name of the enzyme.
train.1355,college_2,What is the name of the department with an instructure who has a name like 'Soisalon'?,SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%',['instructor'],1,1,0.1425882352941176,True,False,False,SELECT dept_name FROM instructor WHERE name LIKE [PLACEHOLDER-TYPE:STRING],This virtual table provides the names of academic departments associated with instructors whose names match a specified pattern. The placeholder in the WHERE clause allows for flexible searching of instructor names.
train.1365,college_2,What are the titles of courses that are in the Statistics department but not the Psychology department?,SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology',['course'],1,1,0.2195113122171945,True,False,False,SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the titles of courses offered by one academic department that are not offered by another academic department. The placeholders in the WHERE clause represent the names of the departments being compared.
train.1424,college_2,Find the title of course whose prerequisite is course Differential Geometry.,SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry'),"['course', 'prereq']",2,2,0.2112941176470588,False,True,False,SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]),"This virtual table lists the titles of courses from the 'course' table that have prerequisites. The prerequisite courses are identified by their titles, which are specified using a placeholder in the subquery."
train.1426,college_2,Find the names of students who have taken any course in the fall semester of year 2003.,SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003),"['student', 'takes']",2,2,0.2254567253653053,False,True,False,SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]),This virtual table describes the names of students who are enrolled in courses during a specific semester and year. The placeholders in the WHERE clause represent the semester and year for which the student enrollment is being queried.
train.1435,college_2,What are the names of all instructors who advise students in the math depart sorted by total credits of the student.,SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred,"['instructor', 'student', 'advisor']",3,3+,0.1679999999999999,False,False,True,SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred,"This virtual table lists the names of instructors who are advising students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students."
train.1436,college_2,What is the course title of the prerequisite of course Mobile Computing?,SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing'),"['course', 'prereq']",2,2,0.2112941176470588,False,True,False,SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists the titles of courses that are prerequisites for a specific course identified by its title. The placeholder in the WHERE clause represents the title of the course for which the prerequisites are being queried.
train.1439,college_2,What is the name of the instructor who advises the student with the greatest number of total credits?,SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1,"['instructor', 'student', 'advisor']",3,3+,0.1119999999999999,False,False,True,SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of instructors who are advising students, ordered by the total credits earned by the students in descending order. The placeholder in the LIMIT clause represents the maximum number of instructor names to be returned."
train.1448,college_2,Find the number and averaged salary of all instructors who are in the department with the highest budget.,"SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1","['instructor', 'department']",2,2,0.1501176470588235,False,True,False,"SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table calculates the average salary of instructors grouped by their respective departments, and counts the number of instructors in each department. The results are ordered by the department's budget in descending order, with a limit on the number of departments returned based on a specified number."
train.1449,college_2,"How many instructors are in the department with the highest budget, and what is their average salary?","SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1","['instructor', 'department']",2,2,0.1501176470588235,False,True,False,"SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the average salary of instructors along with the count of instructors in each department, sorted by the department's budget in descending order. The placeholder in the LIMIT clause represents the maximum number of departments to be displayed."
train.1452,college_2,Find the name of students who didn't take any course from Biology department.,SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology'),"['course', 'student', 'takes']",3,3+,0.2112941176470588,False,False,True,SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists the names of students who are not enrolled in any courses offered by a specific department. The placeholder in the subquery represents the department's name.
train.1458,college_2,Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.,"SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')",['instructor'],1,1,0.2112941176470588,True,False,False,"SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])",This virtual table provides the names and salaries of instructors from the 'instructor' table who earn less than the average salary of instructors within a specified department. The placeholder in the subquery represents the department's name.
train.1461,college_2,What are the names of students who have taken Statistics courses?,SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics',"['course', 'student', 'takes']",3,3+,0.1425882352941176,False,False,True,SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.
train.1464,college_2,Find the names of all instructors in computer science department,SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.',['instructor'],1,1,0.1425882352941176,True,False,False,SELECT name FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of instructors from the 'instructor' table who belong to a specific academic department. The placeholder in the WHERE clause represents the department's name.
train.1480,college_2,Find courses that ran in Fall 2009 but not in Spring 2010.,SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010,['section'],1,1,0.2508684900711876,True,False,False,SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER],"This virtual table identifies the course IDs from the 'SECTION' table that are offered in a specific semester and year, excluding those that are offered in another specified semester and year. The placeholders in the query represent the semester and year values for filtering the results."
train.1489,college_2,What are the names of instructors who earn more than at least one instructor from the Biology department?,SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology'),['instructor'],1,1,0.1731764705882353,True,False,False,SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the minimum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.
train.1515,insurance_and_eClaims,Find the total and average amount paid in claim headers.,"SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers",['claim_headers'],1,1,0.1075113122171946,True,False,False,"SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers",This virtual table summarizes the total and average amounts paid for claims from the 'Claim_Headers' table. The placeholders in the SELECT clause represent the total and average of the 'amount_paid' column.
train.1516,insurance_and_eClaims,What are the total amount and average amount paid in claim headers?,"SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers",['claim_headers'],1,1,0.1075113122171946,True,False,False,"SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers",This virtual table summarizes the total and average amounts paid for claims from the 'Claim_Headers' table. The placeholders in the SELECT clause represent the aggregated values of the amounts paid.
train.1517,insurance_and_eClaims,Find the total amount claimed in the most recently created document.,SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1),"['claims_documents', 'claim_headers']",2,2,0.1985882352941176,False,True,False,SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT [PLACEHOLDER-TYPE:NUMBER]),This virtual table calculates the total amount claimed from the 'Claim_Headers' table for claims that have documents created on a specific date. The placeholder in the subquery represents the limit for selecting the created date of the documents.
train.1519,insurance_and_eClaims,What is the name of the customer who has made the largest amount of claim in a single claim?,SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers),"['policies', 'customers', 'claim_headers']",3,3+,0.1731764705882353,False,False,True,SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers),This virtual table provides detailed information about the customer associated with the claim that has the highest amount claimed. It retrieves the customer details from the 'Customers' table by joining it with the 'Policies' and 'Claim_Headers' tables based on their relationships. The placeholder in the WHERE clause is used to filter for the maximum claimed amount.
train.1527,insurance_and_eClaims,What is the name of the claim processing stage that most of the claims are on?,SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1,"['claims_processing', 'claims_processing_stages']",2,2,0.1679999999999999,False,True,False,SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a summary of the claim statuses from the claims processing stages. It retrieves the names of the claim statuses by joining the 'claims_processing' table with the 'claims_processing_stages' table based on the claim stage identifier. The results are grouped by the claim stage identifier and ordered by the count of occurrences in descending order, allowing the user to specify a limit on the number of statuses returned."
train.1535,insurance_and_eClaims,Find the names of all the customers and staff members.,SELECT customer_details FROM customers UNION SELECT staff_details FROM staff,"['staff', 'customers']",2,2,0.1807058823529412,False,True,False,SELECT customer_details FROM customers UNION SELECT staff_details FROM staff,This virtual table combines detailed information about customers and staff members from the 'Customers' and 'Staff' tables. The result will include all customer details and staff details in a single unified list.
train.1545,insurance_and_eClaims,Which customer is associated with the latest policy?,SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies),"['policies', 'customers']",2,2,0.1731764705882353,False,True,False,SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies),This virtual table retrieves the detailed information about customers who have the most recently started insurance policy from the 'Policies' table. The placeholder in the WHERE clause represents the condition to find the latest start date of the policy.
train.1546,insurance_and_eClaims,Find the customer who started a policy most recently.,SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies),"['policies', 'customers']",2,2,0.1731764705882353,False,True,False,SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies),This virtual table retrieves the detailed information about customers who have the most recently started insurance policy from the 'Policies' table. The placeholder in the WHERE clause represents the condition to find the latest start date of the policy.
train.1553,customers_and_invoices,"Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.","SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'","['accounts', 'customers']",2,2,0.2245192697768762,False,True,False,"SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides details about customer accounts from the 'Accounts' table, including the account ID, the date the account was opened, the account name, and any additional account details. The results are filtered based on the first name of the customer from the 'Customers' table, represented by a placeholder for string values."
train.1556,customers_and_invoices,What are the names and other details for accounts corresponding to the customer named Meaghan Keeling?,"SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan' AND T2.customer_last_name  =  'Keeling'","['accounts', 'customers']",2,2,0.2016289592760181,False,True,False,"SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table describes the account names and additional details of accounts associated with customers from the 'Accounts' table, filtered by the first and last names of the customers. The placeholders in the WHERE clause represent the customer's first and last names."
train.1558,customers_and_invoices,What are the full names of customers with the account name 900?,"SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  '900'","['accounts', 'customers']",2,2,0.1807058823529412,False,True,False,"SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of customers associated with a specific account from the 'Accounts' and 'Customers' tables. The placeholder in the WHERE clause represents the name of the account.
train.1569,customers_and_invoices,"Show id, first name and last name for all customers and the number of accounts.","SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id","['accounts', 'customers']",2,2,0.2245192697768762,False,True,False,"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id","This virtual table provides a summary of customers and their associated accounts. It displays the unique customer identifier, first name, and last name of each customer, along with a count of the number of accounts they hold. The data is aggregated by customer, allowing for insights into customer account distribution."
train.1570,customers_and_invoices,"What are the the full names and ids for all customers, and how many accounts does each have?","SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id","['accounts', 'customers']",2,2,0.2245192697768762,False,True,False,"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id","This virtual table provides a summary of customers who have accounts, displaying their unique customer ID, first name, last name, and the count of accounts associated with each customer. The placeholders represent the customer details and the count of accounts."
train.1580,customers_and_invoices,Count the number of financial transactions that correspond to each account id.,"SELECT count(*) ,  account_id FROM Financial_transactions",['financial_transactions'],1,1,0.1247058823529411,True,False,False,"SELECT count(*) ,  account_id FROM Financial_transactions",This virtual table provides a count of financial transactions grouped by account ID from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the account ID for which the transaction count is being retrieved.
train.1607,customers_and_invoices,Show the order ids and the number of invoices for each order.,"SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id",['invoices'],1,1,0.1807058823529412,True,False,False,"SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id","This virtual table summarizes the total number of invoices associated with each order from the 'Invoices' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function aggregates the number of invoices per order."
train.1617,customers_and_invoices,Show the order ids and the number of items in each order.,"SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",['order_items'],1,1,0.1807058823529412,True,False,False,"SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id","This virtual table summarizes the total number of items in each order from the 'Order_Items' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function calculates the total number of items associated with each order."
train.1622,customers_and_invoices,"What are teh names of the different products, as well as the number of customers who have ordered each product.","SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name","['orders', 'products', 'order_items']",3,3+,0.1807058823529412,False,False,True,"SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name","This virtual table summarizes the total quantity of each product ordered from the 'Products' table by joining it with the 'Order_Items' and 'Orders' tables. The placeholder in the SELECT statement represents the product name, and the count function aggregates the total number of items ordered for each product."
train.2050,party_people,Which ministers are not a part of the Progress Party?,SELECT minister FROM party WHERE party_name != 'Progress Party',['party'],1,1,0.1425882352941176,True,False,False,SELECT minister FROM party WHERE party_name != [PLACEHOLDER-TYPE:STRING],"This virtual table describes the ministers associated with political parties from the 'party' table, excluding a specific party name. The placeholder in the WHERE clause represents the name of the party to be excluded."
train.2057,party_people,Show all party names and the number of members in each party.,"SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id","['party', 'member']",2,2,0.1807058823529412,False,True,False,"SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",This virtual table summarizes the number of members associated with each political party from the 'Member' and 'Party' tables. The placeholder in the SELECT statement allows for the retrieval of the party name and the count of members belonging to that party.
train.2072,party_people,How many events are there for each party?,"SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id","['party', 'party_events']",2,2,0.1807058823529412,False,True,False,"SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id","This virtual table summarizes the number of events organized by each political party from the 'party_events' table. It joins the 'party' table to retrieve the party names associated with the events. The placeholder in the SELECT statement represents the party names, while the count function aggregates the total number of events for each party."
train.2081,party_people,How many Annual Meeting events happened in the United Kingdom region?,SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  'United Kingdom' AND t3.Event_Name  =  'Annaual Meeting',"['party', 'party_events', 'region']",3,3+,0.1635113122171945,False,False,True,SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  [PLACEHOLDER-TYPE:STRING] AND t3.Event_Name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a count of party events that are associated with a specific region and event name. The placeholders in the WHERE clause represent the region's name and the event's name, allowing users to filter the results based on their input."
train.2167,formula_1,What is the id and family name of the driver who has the longest laptime?,"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1","['laptimes', 'drivers']",2,2,0.1501176470588235,False,True,False,"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of drivers along with their surnames from the 'drivers' table, ordered by their lap times recorded in the 'lapTimes' table. The results are limited to a specified number of entries, represented by a placeholder for numeric values."
train.2174,formula_1,How many drivers did not race in 2009?,SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 ),"['results', 'races']",2,2,0.2367058823529411,False,True,False,SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != [PLACEHOLDER-TYPE:NUMBER] ),"This virtual table counts the distinct number of drivers who participated in races, excluding those that took place in a specific year. The placeholder in the WHERE clause represents the year to filter out races."
train.2179,formula_1,Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?,"SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = 'Australian Grand Prix' INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = 'Chinese Grand Prix'","['races', 'drivers', 'results']",3,3+,0.2576289592760181,False,False,True,"SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = [PLACEHOLDER-TYPE:STRING]","This virtual table describes the unique identifiers and first names of drivers who participated in two specific races, identified by their names. The placeholders in the WHERE clause represent the names of the races being queried."
train.2180,formula_1,What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?,"SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = 'Australian Grand Prix' INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = 'Chinese Grand Prix'","['races', 'drivers', 'results']",3,3+,0.2576289592760181,False,False,True,"SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = [PLACEHOLDER-TYPE:STRING]","This virtual table describes the unique identifiers and first names of drivers who participated in two specific races, identified by their names. The placeholders in the WHERE clause represent the names of the races being queried."
train.2182,formula_1,What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?,"SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = 'Australian Grand Prix' EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = 'Chinese Grand Prix'","['races', 'drivers', 'results']",3,3+,0.2576289592760181,False,False,True,"SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = [PLACEHOLDER-TYPE:STRING]","This virtual table describes the first and last names of drivers who participated in a specific race, excluding those who participated in another specified race. The placeholders in the WHERE clause represent the names of the races."
train.2190,formula_1,"For each constructor id, how many races are there?","SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",['constructorstandings'],1,1,0.1807058823529412,True,False,False,"SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid","This virtual table provides a count of the total number of constructor standings for each constructor from the 'constructorStandings' table. The placeholder in the SELECT statement represents the constructor's identifier, which is grouped to show the total standings for each constructor."
train.2194,formula_1,What are the names of all races held after 2000 in Spain?,SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = 'Spain' AND T1.year > 2000,"['races', 'circuits']",2,2,0.2061176470588234,False,True,False,SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.
train.2217,formula_1,Find the names of Japanese constructors that have once earned more than 5 points?,SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = 'Japanese' AND T2.points > 5,"['constructorstandings', 'constructors']",2,2,0.1807058823529412,False,True,False,SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = [PLACEHOLDER-TYPE:STRING] AND T2.points > [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the official names of constructors from the 'constructors' table who are from a specific nationality and have scored more points than a specified threshold in the constructor standings. The placeholders in the WHERE clause represent the constructor's nationality and the points threshold.
train.2218,formula_1,What are the names of all the Japanese constructors that have earned more than 5 points?,SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = 'Japanese' AND T2.points > 5,"['constructorstandings', 'constructors']",2,2,0.1807058823529412,False,True,False,SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = [PLACEHOLDER-TYPE:STRING] AND T2.points > [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of constructors from the 'constructors' table who have a specific nationality and have scored more than a certain number of points in the constructor standings. The placeholders in the WHERE clause represent the constructor's nationality and the points threshold.
train.2220,formula_1,What is the average fastest lap speed for the Monaco Grand Prix in 2008?,SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Monaco Grand Prix',"['races', 'results']",2,2,0.1635113122171945,False,True,False,SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = [PLACEHOLDER-TYPE:NUMBER] AND T1.name = [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average fastest lap speed from the 'results' table for races that occurred in a specific year and have a particular name. The placeholders in the WHERE clause represent the year of the race and the name of the race.
train.2222,formula_1,What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?,SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Monaco Grand Prix',"['races', 'results']",2,2,0.1635113122171945,False,True,False,SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = [PLACEHOLDER-TYPE:NUMBER] AND T1.name = [PLACEHOLDER-TYPE:STRING],This virtual table provides the maximum fastest lap speed recorded during races held in a specific year and with a specific race name. The placeholders in the WHERE clause represent the year of the race and the name of the race.
train.2223,formula_1,What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?,"SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year","['races', 'results']",2,2,0.2879999999999999,False,True,False,"SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.name ORDER BY T1.year","This virtual table provides the maximum fastest lap speed recorded for each race, along with the official name of the race and the year it took place. The placeholder in the WHERE clause represents a specific year, allowing users to filter races that occurred after that year."
train.2224,formula_1,"For each race name, What is the maximum fastest lap speed for races after 2004 ordered by year?","SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year","['races', 'results']",2,2,0.2879999999999999,False,True,False,"SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.name ORDER BY T1.year","This virtual table provides the maximum fastest lap speed recorded for each race, along with the official name of the race and the year it took place. The results are filtered to include only races that occurred after a specified year, and the data is grouped by the race name and ordered by the year."
train.2325,csu_1,What campuses are located in the county of Los Angeles?,SELECT campus FROM campuses WHERE county  =  'Los Angeles',['campuses'],1,1,0.1425882352941176,True,False,False,SELECT campus FROM campuses WHERE county  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of campuses from the 'Campuses' table that are located in a specific county. The placeholder in the WHERE clause represents the name of the county.
train.2347,csu_1,In what year was the most degrees conferred?,SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1,['degrees'],1,1,0.0559999999999999,True,False,False,SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the years in which degrees were awarded, grouped by year and ordered by the total number of degrees awarded in descending order. The placeholder in the LIMIT clause represents the maximum number of years to return."
train.2348,csu_1,Which campus has the most degrees conferred in all times?,SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1,['degrees'],1,1,0.1679999999999999,True,False,False,SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of campuses from the 'degrees' table, grouped by campus name. The campuses are ordered by the total number of degrees awarded, in descending order, and the result is limited to a specified number of campuses. The placeholder in the LIMIT clause represents the maximum number of campuses to return."
train.2349,csu_1,What campus has the most degrees  conferrred over its entire existence?,SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1,['degrees'],1,1,0.1679999999999999,True,False,False,SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of campuses from the 'degrees' table, grouped by campus name. The campuses are ordered by the total number of degrees awarded, in descending order, and the result is limited to a specified number of campuses. The placeholder in the LIMIT clause represents the maximum number of campuses to return."
train.2351,csu_1,What campus has the most faculties in 2003?,SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1,"['faculty', 'campuses']",2,2,0.1679999999999999,False,True,False,SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T2.faculty DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the campuses from the 'Campuses' table that have faculty data for a specific year. The campuses are ordered by the number of faculty members in descending order, and the result is limited to a specified number of campuses. The placeholders in the WHERE clause and LIMIT clause represent the year of the faculty data and the maximum number of campuses to return, respectively."
train.2358,csu_1,"For each Orange county campus, report the number of degrees granted after 2000.","SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  'Orange' AND T2.year  >=  2000 GROUP BY T1.campus","['degrees', 'campuses']",2,2,0.2748235294117647,False,True,False,"SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  [PLACEHOLDER-TYPE:STRING] AND T2.year  >=  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.campus","This virtual table summarizes the total number of degrees awarded by each campus located in a specific county, filtering for degrees awarded from a certain year onwards. The placeholders in the WHERE clause represent the county's name and the starting year for the degree records."
train.2359,csu_1,What is the total number of degrees granted after 2000 for each Orange county campus?,"SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  'Orange' AND T2.year  >=  2000 GROUP BY T1.campus","['degrees', 'campuses']",2,2,0.2748235294117647,False,True,False,"SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  [PLACEHOLDER-TYPE:STRING] AND T2.year  >=  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.campus","This virtual table summarizes the total number of degrees awarded by each campus located in a specific county, filtering the results for degrees awarded from a certain year onwards. The placeholders in the WHERE clause represent the county name and the year threshold."
train.2362,csu_1,What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?,SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200,"['enrollments', 'campuses']",2,2,0.1948684900711876,False,True,False,SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  [PLACEHOLDER-TYPE:NUMBER] AND totalenrollment_ay  >  [PLACEHOLDER-TYPE:NUMBER] AND FTE_AY  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table identifies campuses from the 'Campuses' table that have a specific number of total enrollments and full-time equivalent enrollments for a given academic year. The placeholders in the WHERE clause represent the year, total enrollment threshold, and full-time equivalent enrollment threshold."
train.2367,csu_1,What campuses are in Los Angeles county?,SELECT campus FROM campuses WHERE county  =  'Los Angeles',['campuses'],1,1,0.1425882352941176,True,False,False,SELECT campus FROM campuses WHERE county  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of campuses from the 'Campuses' table that are located in a specific county. The placeholder in the WHERE clause represents the name of the county.
train.2368,csu_1,"How many degrees were conferred in ""San Jose State University"" in 2000?",SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  'San Jose State University' AND t2.year  =  2000,"['degrees', 'campuses']",2,2,0.1635113122171945,False,True,False,SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year of the degrees awarded.
train.2377,csu_1,How many faculty lines are there at San Francisco State University in 2004?,SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  'San Francisco State University',"['faculty', 'campuses']",2,2,0.1635113122171945,False,True,False,SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the number of faculty members from the 'faculty' table for a specific campus and year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.
train.2378,csu_1,List the campus that have between 600 and 1000 faculty lines in year 2004.,SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004,"['faculty', 'campuses']",2,2,0.2065882352941176,False,True,False,SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  [PLACEHOLDER-TYPE:NUMBER] AND t2.faculty  <=  [PLACEHOLDER-TYPE:NUMBER] AND T1.year  =  [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the campuses from the 'Campuses' table that have a number of faculty members within a specified range for a given year. The placeholders in the WHERE clause represent the minimum and maximum number of faculty members, as well as the year of interest."
train.2379,csu_1,What are the campuses that had between 600 and 1000 faculty members in 2004?,SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004,"['faculty', 'campuses']",2,2,0.2065882352941176,False,True,False,SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  [PLACEHOLDER-TYPE:NUMBER] AND t2.faculty  <=  [PLACEHOLDER-TYPE:NUMBER] AND T1.year  =  [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the campuses from the 'Campuses' table that have a number of faculty members within a specified range. The query joins the 'Campuses' table with the 'faculty' table based on the campus identifier, and filters the results based on the number of faculty members and the year of the data record. The placeholders in the WHERE clause represent the range of faculty numbers and the specific year."
train.2380,csu_1,How many faculty lines are there in the university that conferred the most number of degrees in year 2002?,SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1,"['faculty', 'degrees', 'campuses']",3,3+,0.1679999999999999,False,False,True,SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY t3.degrees DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the number of faculty members from the 'faculty' table for each campus, filtered by a specific year. It joins the 'campuses' table to ensure that the faculty data corresponds to the correct campus and also joins the 'degrees' table to order the results based on the number of degrees awarded. The placeholders in the WHERE clause represent the year of interest and the limit for the number of results to return."
train.2383,csu_1,How many faculty members are at the university that gave the least number of degrees in 2001?,SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1,"['faculty', 'degrees', 'campuses']",3,3+,0.1679999999999999,False,False,True,SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY t3.degrees LIMIT [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the number of faculty members from the 'faculty' table for campuses that have awarded degrees in a specific year. The query joins the 'campuses' table with the 'faculty' and 'degrees' tables based on the campus identifier and filters the results for a particular year. The placeholders in the WHERE clause and LIMIT clause allow for dynamic input of the year and the number of results to return.
train.2385,csu_1,How many undergraduates are there at San Jose State,SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  'San Jose State University',"['discipline_enrollments', 'campuses']",2,2,0.1635113122171945,False,True,False,SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING],This virtual table summarizes the total number of undergraduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.
train.3131,assets_maintenance,"Which engineer has visited the most times? Show the engineer id, first name and last name.","SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1","['maintenance_engineers', 'engineer_visits']",2,2,0.2319999999999999,False,True,False,"SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of maintenance engineers along with their first and last names from the 'Maintenance_Engineers' table. The results are grouped by engineer ID and ordered by the number of visits they have conducted, allowing users to see which engineers have the most visits. The placeholder in the LIMIT clause represents the maximum number of engineers to display."
train.3139,assets_maintenance,How many fault status codes are recorded in the fault log parts table?,SELECT DISTINCT fault_status FROM Fault_Log_Parts,['fault_log_parts'],1,1,0.1119999999999999,True,False,False,SELECT DISTINCT fault_status FROM Fault_Log_Parts,"This virtual table provides a unique list of fault statuses associated with parts from the 'Fault_Log_Parts' table. The query retrieves distinct values from the 'fault_status' column, allowing users to see all the different statuses recorded for faults related to parts."
train.3143,assets_maintenance,Which part fault requires the most number of skills to fix? List part id and name.,"SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1","['part_faults', 'parts', 'skills_required_to_fix']",3,3+,0.2061176470588234,False,False,True,"SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of parts along with their identifiers from the 'Parts' table that are associated with faults requiring specific skills. The results are grouped by part identifier and ordered by the frequency of their occurrence in fault records, allowing users to see the most commonly required parts for repairs. The placeholder in the LIMIT clause represents the maximum number of parts to return."
train.3176,college_1,How many professors teach a class with the code ACCT-211?,SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  'ACCT-211',['class'],1,1,0.1679999999999999,True,False,False,SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of distinct professors teaching classes associated with a specific course code from the 'CLASS' table. The placeholder in the WHERE clause represents the course code being queried.
train.3180,college_1,What are the first names and birthdates of the professors in charge of ACCT-211?,"SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  'ACCT-211'","['employee', 'class']",2,2,0.2061176470588234,False,True,False,"SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides a distinct list of first names and dates of birth of professors from the 'employee' table who are teaching classes associated with a specific course code. The placeholder in the WHERE clause represents the course code for which the professors are being queried.
train.3189,college_1,How many different locations does the school with code BUS has?,SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS',['department'],1,1,0.1679999999999999,True,False,False,SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of distinct department addresses from the 'DEPARTMENT' table for a specific school. The placeholder in the WHERE clause represents the school code being queried.
train.3190,college_1,What are the different locations of the school with the code BUS?,SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS',['department'],1,1,0.1679999999999999,True,False,False,SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of distinct department addresses from the 'DEPARTMENT' table for a specific school. The placeholder in the WHERE clause represents the school code being queried.
train.3206,college_1,How many classes are held in each department?,"SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code","['course', 'class']",2,2,0.1807058823529412,False,True,False,"SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code",This virtual table provides a count of classes grouped by department code from the 'CLASS' and 'COURSE' tables. The placeholder in the SELECT statement represents the count of classes for each department.
train.3209,college_1,What is the number of professors for different school?,"SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code","['department', 'professor']",2,2,0.1807058823529412,False,True,False,"SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code","This virtual table provides a count of professors grouped by the school code from the 'Department' table. The placeholder in the SELECT statement represents the count of professors, while the school code is derived from the department associated with each professor."
train.3210,college_1,How many different professors are there for the different schools?,"SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code","['department', 'professor']",2,2,0.1807058823529412,False,True,False,"SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code","This virtual table provides a count of professors grouped by the school code from the 'Department' table. The placeholder in the SELECT statement represents the count of professors, while the school code is derived from the department associated with each professor."
train.3217,college_1,Find the number of students for each department.,"SELECT count(*) ,  dept_code FROM student GROUP BY dept_code",['student'],1,1,0.1807058823529412,True,False,False,"SELECT count(*) ,  dept_code FROM student GROUP BY dept_code",This virtual table provides a count of students grouped by their department codes from the 'student' table. The placeholder in the SELECT statement represents the department code for which the count of students is being aggregated.
train.3218,college_1,How many students are in each department?,"SELECT count(*) ,  dept_code FROM student GROUP BY dept_code",['student'],1,1,0.1807058823529412,True,False,False,"SELECT count(*) ,  dept_code FROM student GROUP BY dept_code","This virtual table provides a count of students grouped by their respective department codes from the 'student' table. The placeholder in the SELECT clause represents the count of students, while the GROUP BY clause organizes the results by department code."
train.3220,college_1,How many hours do the students spend studying in each department?,"SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code",['student'],1,1,0.1807058823529412,True,False,False,"SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code","This virtual table summarizes the total credit hours completed by students, grouped by their respective departments. The placeholder in the SELECT clause represents the total credit hours, while the GROUP BY clause organizes the results by department code."
train.3222,college_1,"What is the highest, lowest, and average student GPA for every department?","SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code",['student'],1,1,0.2065882352941176,True,False,False,"SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code","This virtual table summarizes the academic performance of students by department. It calculates the maximum, average, and minimum GPA of students grouped by their respective department codes. The placeholders in the SELECT statement represent the GPA metrics and department code."
train.3234,college_1,How many courses does the department of Computer Information Systmes offer?,SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  'Computer Info. Systems',"['course', 'department']",2,2,0.1425882352941176,False,True,False,SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of courses offered by a specific department from the 'DEPARTMENT' and 'COURSE' tables. The placeholder in the WHERE clause represents the name of the department for which the course count is being queried.
train.3238,college_1,What are the total number of credits offered by each department?,"SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code","['course', 'class']",2,2,0.1807058823529412,False,True,False,"SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code","This virtual table summarizes the total credit hours for courses grouped by their respective department codes. It combines data from the 'COURSE' and 'CLASS' tables, where the course code links the two tables. The placeholder in the SELECT clause represents the total credit hours, while the department code is used for grouping the results."
train.3243,college_1,What is the first name of each student enrolled in class ACCT-211?,SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211',"['student', 'class', 'enroll']",3,3+,0.1425882352941176,False,False,True,SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the first names of students enrolled in classes associated with a specific course code from the 'CLASS', 'ENROLL', and 'STUDENT' tables. The placeholder in the WHERE clause represents the course code."
train.3253,college_1,What is the name of the department that has the largest number of students enrolled?,SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1,"['course', 'department', 'class', 'enroll']",4,3+,0.1679999999999999,False,False,True,SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of department names from the 'DEPARTMENT' table that are associated with classes in the 'CLASS' table. The query joins multiple tables to aggregate the number of classes per department, allowing users to see which departments have the most classes offered. The placeholder in the LIMIT clause represents the maximum number of department names to return."
train.3254,college_1,What is the name of the department with the most students enrolled?,SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1,"['course', 'department', 'class', 'enroll']",4,3+,0.1679999999999999,False,False,True,SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of department names from the 'DEPARTMENT' table that are associated with classes in which students are enrolled. The query joins multiple tables: 'CLASS', 'ENROLL', 'COURSE', and 'DEPARTMENT' to gather the relevant information. The results are grouped by department code and ordered by the number of classes in descending order, with a limit on the number of departments returned based on a specified placeholder for numeric values."
train.3258,college_1,What are the codes of all the courses that are located in room KLR209?,SELECT class_code FROM CLASS WHERE class_room  =  'KLR209',['class'],1,1,0.1425882352941176,True,False,False,SELECT class_code FROM CLASS WHERE class_room  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the unique class codes from the 'CLASS' table that are held in a specific classroom. The placeholder in the WHERE clause represents the room where the class is conducted.
train.3267,college_1,What is the first name of students who got grade C in any class?,SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C',"['enroll', 'student']",2,2,0.1679999999999999,False,True,False,SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a list of distinct first names of students who have received a specific grade in their enrolled classes. The placeholder in the WHERE clause represents the grade that the user wants to filter by.
train.3273,college_1,What are the first names of the professors who do not teach a class.,SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num,"['employee', 'class']",2,2,0.1985882352941176,False,True,False,SELECT emp_fname FROM employee WHERE emp_jobcode  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num,"This virtual table describes the first names of employees from the 'employee' table who hold a specific job code, excluding those who are professors teaching any class. The placeholder in the WHERE clause represents the job code of the employees."
train.3274,college_1,What are the first names of all professors not teaching any classes?,SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num,"['employee', 'class']",2,2,0.1985882352941176,False,True,False,SELECT emp_fname FROM employee WHERE emp_jobcode  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num,"This virtual table describes the first names of employees from the 'employee' table who hold a specific job code, excluding those who are professors teaching any class. The placeholder in the WHERE clause represents the job code of the employees."
train.3288,college_1,How many professors attained either Ph.D. or Masters degrees?,SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA',['professor'],1,1,0.1635113122171945,True,False,False,SELECT count(*) FROM professor WHERE prof_high_degree  =  [PLACEHOLDER-TYPE:STRING] OR prof_high_degree  =  [PLACEHOLDER-TYPE:STRING],This virtual table counts the number of professors from the 'professor' table who have a specific highest degree. The placeholders in the WHERE clause represent the degrees being queried.
train.3293,college_1,Find the first name of student who is taking classes from accounting and Computer Info. Systems departments,SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems',"['course', 'enroll', 'department', 'class', 'student']",5,3+,0.2195113122171945,False,False,True,SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the first names of students who are enrolled in classes offered by a specific department. The query uses an INTERSECT operation to find students who are enrolled in classes from two instances of the same department, ensuring that only those students who meet both conditions are returned. The placeholder in the WHERE clause represents the department's name."
train.3300,college_1,What is the name of the department with the student that has the lowest GPA?,SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1,"['department', 'student']",2,2,0.1119999999999999,False,True,False,SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of department names from the 'department' table for students, ordered by their GPA. The placeholder in the LIMIT clause allows the user to specify the maximum number of department names to retrieve."
train.3314,college_1,"What are the first names, office locations of all lecturers who have taught some course?","SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num","['course', 'employee', 'professor', 'class']",4,3+,0.1505882352941176,False,False,True,"SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num","This virtual table provides a view of the first names of professors, their office locations, and descriptions of the courses they teach. It combines data from the 'CLASS', 'EMPLOYEE', 'COURSE', and 'PROFESSOR' tables, linking them through their respective identifiers."
train.3315,college_1,Find the first names and offices of all instructors who have taught some course and the course description and the department name.,"SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code","['course', 'department', 'professor', 'class', 'employee']",5,3+,0.1685192697768762,False,False,True,"SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code","This virtual table provides a view of the first names of professors, their office locations, course descriptions, and department names associated with classes. The placeholders in the query represent the relationships between the tables involved, allowing for dynamic querying based on specific criteria."
train.3333,college_1,"Find the name of department that offers the class whose description has the word ""Statistics"".",SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%',"['course', 'department']",2,2,0.1425882352941176,False,True,False,SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of departments that offer courses matching a specific description. The placeholder in the WHERE clause represents the course description to filter the results.
train.3417,hr_1,"display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M.","SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",['employees'],1,1,0.2118614020950846,True,False,False,"SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE [PLACEHOLDER-TYPE:STRING]","This virtual table provides a list of employees' first names, last names, hire dates, salaries, and their department identifiers from the 'employees' table, excluding those whose first names match a specific pattern. The placeholder in the WHERE clause represents the pattern to filter out certain first names."
train.3418,hr_1,"What are the full name, hire date, salary, and department id for employees without the letter M in their first name?","SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",['employees'],1,1,0.2118614020950846,True,False,False,"SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE [PLACEHOLDER-TYPE:STRING]","This virtual table provides a list of employees' first names, last names, hire dates, salaries, and their department identifiers from the 'employees' table, excluding those whose first names match a specific pattern. The placeholder in the WHERE clause represents the pattern to filter out certain first names."
train.3419,hr_1,"display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.","SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id",['employees'],1,1,0.2372731668009669,True,False,False,"SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE [PLACEHOLDER-TYPE:STRING] ORDER BY department_id","This virtual table provides a list of employees' first names, last names, hire dates, salaries, and their department identifiers from the 'employees' table, excluding those whose first names match a specific pattern. The placeholder in the WHERE clause allows for filtering based on the first name criteria."
train.3442,hr_1,Which job titles correspond to jobs with salaries over 9000?,SELECT job_title FROM jobs WHERE min_salary  >  9000,['jobs'],1,1,0.1425882352941176,True,False,False,SELECT job_title FROM jobs WHERE min_salary  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the job titles from the 'jobs' table where the minimum salary exceeds a specified amount. The placeholder in the WHERE clause represents the minimum salary threshold.
train.3444,hr_1,"What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?","SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",['jobs'],1,1,0.1948684900711876,True,False,False,"SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the job titles along with the salary range (calculated as the difference between maximum and minimum salary) for jobs in the 'jobs' table that fall within a specified maximum salary range. The placeholders in the WHERE clause represent the lower and upper limits of the salary range.
train.3448,hr_1,What are the employee ids for each employee and final dates of employment at their last job?,"SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id",['job_history'],1,1,0.1807058823529412,True,False,False,"SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id","This virtual table provides a summary of the most recent job end dates for each employee from the 'job_history' table. The placeholder in the SELECT clause represents the unique identifier for each employee, while the MAX function is used to retrieve the latest end date for their job history."
train.3451,hr_1,Find the ids of the departments where any manager is managing 4 or more employees.,"SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",['employees'],1,1,0.2830407239819004,True,False,False,"SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= [PLACEHOLDER-TYPE:NUMBER]","This virtual table lists unique department identifiers from the 'employees' table, grouped by department and manager. It filters the results to include only those departments that have a specified minimum number of employees, represented by a placeholder for numeric values."
train.3457,hr_1,display job ID for those jobs that were done by two or more for more than 300 days.,SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2,['job_history'],1,1,0.2508684900711876,True,False,False,SELECT job_id FROM job_history WHERE end_date - start_date  > [PLACEHOLDER-TYPE:NUMBER] GROUP BY job_id HAVING COUNT(*) >= [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of job identifiers from the 'job_history' table where the duration of each job (calculated as the difference between the end date and start date) exceeds a specified number of days. Additionally, it groups the results by job identifier and filters to include only those jobs that have been held for a minimum number of times, as indicated by the placeholder in the HAVING clause."
train.3458,hr_1,What are the job ids for jobs done more than once for a period of more than 300 days?,SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2,['job_history'],1,1,0.2508684900711876,True,False,False,SELECT job_id FROM job_history WHERE end_date - start_date  > [PLACEHOLDER-TYPE:NUMBER] GROUP BY job_id HAVING COUNT(*) >= [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of job identifiers from the 'job_history' table where the duration of the job (calculated as the difference between the end date and start date) exceeds a specified number of days. Additionally, it groups the results by job identifier and filters to include only those jobs that have been held for a minimum number of occurrences, as indicated by the placeholders."
train.3463,hr_1,display the department name and number of employees in each of the department.,"SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name","['employees', 'departments']",2,2,0.1807058823529412,False,True,False,"SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name","This virtual table summarizes the number of employees in each department by joining the 'employees' and 'departments' tables. The placeholder in the SELECT statement represents the department's name, while the COUNT function calculates the total number of employees per department."
train.3470,hr_1,Provide the full names of employees earning more than the employee with id 163.,"SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )",['employees'],1,1,0.2112941176470588,True,False,False,"SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = [PLACEHOLDER-TYPE:NUMBER] )",This virtual table describes the first and last names of employees from the 'employees' table who earn more than a specific employee's salary. The placeholder in the subquery represents the unique identifier of the employee whose salary is being compared.
train.3471,hr_1,return the smallest salary for every departments.,"SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id",['employees'],1,1,0.1807058823529412,True,False,False,"SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id","This virtual table provides the minimum salary for each department from the 'employees' table. The placeholder in the SELECT clause represents the minimum salary, while the GROUP BY clause groups the results by department identifier."
train.3472,hr_1,What is the minimum salary in each department?,"SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id",['employees'],1,1,0.1807058823529412,True,False,False,"SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id","This virtual table provides the minimum salary for each department from the 'employees' table. The placeholder in the SELECT clause represents the salary values, while the department_id is used to group the results by each department."
train.3482,hr_1,What is all the information regarding employees who are managers?,SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id,"['employees', 'departments']",2,2,0.1119999999999999,False,True,False,SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id,"This virtual table provides a list of employees who are also managers in their respective departments. It combines data from the 'employees' and 'departments' tables, ensuring that only those employees whose 'employee_id' matches the 'manager_id' of their department are included. The use of DISTINCT ensures that each employee-manager pair is unique."
train.3488,hr_1,Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?,"SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",['employees'],1,1,0.2830407239819004,True,False,False,"SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= [PLACEHOLDER-TYPE:NUMBER]","This virtual table lists unique department identifiers from the 'employees' table, grouped by department and manager. It filters the results to include only those departments that have a specified minimum number of employees, represented by a placeholder for numeric values."
train.3497,hr_1,Find the ids of the employees who does not work in those departments where some employees works whose manager id within the range 100 and 200.,SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200),"['employees', 'departments']",2,2,0.1552941176470588,False,True,False,SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]),This virtual table retrieves all employee records from the 'employees' table where the department ID does not fall within a specified range of manager IDs. The placeholders in the query represent numeric values for the range of manager IDs to filter out departments managed by those IDs.
train.3502,hr_1,"What are the full names and hire dates for employees in the same department as someone with the first name Clara, not including Clara?","SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  'Clara') AND first_name != 'Clara'",['employees'],1,1,0.2752941176470588,True,False,False,"SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  [PLACEHOLDER-TYPE:STRING]) AND first_name != [PLACEHOLDER-TYPE:STRING]","This virtual table provides the first names, last names, and hire dates of employees from the 'employees' table who belong to the same department as a specified employee, while excluding the specified employee's name. The placeholders in the WHERE clause represent the first name of the employee to find the department and the first name of the employee to exclude."
train.3506,hr_1,"What are the ids, full names, and salaries for employees making more than average and who work in a department with employees who have the letter J in their first name?","SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')",['employees'],1,1,0.3445192697768763,True,False,False,"SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE [PLACEHOLDER-TYPE:STRING])","This virtual table provides a list of employees, including their unique identifiers, first names, last names, and salaries, from the 'employees' table. It filters the results to show only those employees whose salaries are above the average salary of all employees and belong to departments where at least one employee has a first name matching a specified pattern."
train.3507,hr_1,display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN.,"SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )",['employees'],1,1,0.2112941176470588,True,False,False,"SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  [PLACEHOLDER-TYPE:STRING] )","This virtual table provides a list of employee IDs and their corresponding job IDs from the 'employees' table, specifically for those employees whose salary is less than the minimum salary for a specified job. The placeholder in the subquery represents the job identifier for which the minimum salary is being compared."
train.3510,hr_1,"What are the employee ids, full names, and job ids for employees who make more than the highest earning employee with title PU_MAN?","SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )",['employees'],1,1,0.2551075050709939,True,False,False,"SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  [PLACEHOLDER-TYPE:STRING] )","This virtual table provides a list of employees, including their unique identifiers, first names, last names, and job identifiers, who earn a salary greater than the maximum salary for a specified job. The placeholder in the subquery represents the job identifier for which the maximum salary is being compared."
train.3512,hr_1,What are total salaries and department id for each department that has more than 2 employees?,"SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2",['employees'],1,1,0.2576289592760181,True,False,False,"SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table summarizes the total salary of employees grouped by their department. It includes only those departments that have a minimum number of employees, as specified by the placeholder in the HAVING clause."
train.3515,hr_1,"display the department ID, full name (first and last name), salary for those employees who is highest salary in every department.","SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id",['employees'],1,1,0.2314158215010142,True,False,False,"SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id","This virtual table summarizes the first names, last names, salaries, and department IDs of employees from the 'employees' table, grouped by department. The placeholder in the SELECT clause represents the maximum salary within each department."
train.3516,hr_1,"What are the department ids, full names, and salaries for employees who make the most in their departments?","SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id",['employees'],1,1,0.2314158215010142,True,False,False,"SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id","This virtual table summarizes the first names, last names, salaries, and department IDs of employees from the 'employees' table, grouped by department. The placeholder in the SELECT clause represents the maximum salary within each department."
train.3520,hr_1,What are the full names and cities of employees who have the letter Z in their first names?,"SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'","['employees', 'departments', 'locations']",3,3+,0.2065882352941176,False,False,True,"SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE [PLACEHOLDER-TYPE:STRING]","This virtual table provides the first and last names of employees along with the city of their department's location. The data is sourced from the 'employees', 'departments', and 'locations' tables, with a filter applied to the first name of the employees using a placeholder for string values."
train.3523,hr_1,display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working.,"SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id","['countries', 'employees', 'departments', 'locations']",4,3+,0.1685192697768762,False,False,True,"SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id","This virtual table provides the first and last names of employees along with their unique identifiers and the names of the countries where their departments are located. The data is sourced from the 'employees', 'departments', 'locations', and 'countries' tables, linked through their respective identifiers."
train.3525,hr_1,display the department name and number of employees in each of the department.,"SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name","['employees', 'departments']",2,2,0.1807058823529412,False,True,False,"SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name",This virtual table provides a summary of the number of employees in each department by joining the 'employees' and 'departments' tables. The placeholder in the SELECT statement allows for the retrieval of the department name along with the count of employees in that department.
train.3526,hr_1,What are the department names and how many employees work in each of them?,"SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name","['employees', 'departments']",2,2,0.1807058823529412,False,True,False,"SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name",This virtual table provides a count of employees grouped by their respective department names from the 'employees' and 'departments' tables. The placeholder in the COUNT function allows for dynamic counting of employees in each department.
train.3528,hr_1,What are full names and salaries of employees working in the city of London?,"SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'","['employees', 'departments', 'locations']",3,3+,0.2065882352941176,False,False,True,"SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the first names, last names, and salaries of employees from the 'employees' table who work in departments located in a specific city. The placeholders in the WHERE clause represent the city name."
train.3641,baseball_1,"In 2014, what are the id and rank of the team that has the largest average number of attendance?","SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;","['team', 'home_game']",2,2,0.2621176470588234,False,True,False,"SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides the team IDs and their ranks for teams that hosted home games in a specific year. The results are grouped by team ID and ordered by the average attendance of the home games in descending order, with a limit on the number of results returned. The placeholders represent the year of the home games and the maximum number of teams to display."
train.3647,baseball_1,Which 3 players won the most player awards? List their full name and id.,"SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;","['player_award', 'player']",2,2,0.2319999999999999,False,True,False,"SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of players along with their first and last names from the 'player' table, who have received awards. The results are grouped by player ID to ensure uniqueness and are ordered by the number of awards received in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of players to return."
train.3649,baseball_1,List three countries which are the origins of the least players.,SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;,['player'],1,1,0.1679999999999999,True,False,False,SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides a list of countries where players were born, grouped by country and ordered by the number of players from each country in ascending order. The placeholder in the LIMIT clause allows for specifying the maximum number of countries to return."
train.3650,baseball_1,What are the three countries that the least players are from?,SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;,['player'],1,1,0.1679999999999999,True,False,False,SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides a list of countries where players were born, grouped by country and ordered by the number of players from each country in ascending order. The placeholder in the LIMIT clause allows for specifying the maximum number of countries to return."
train.3651,baseball_1,Find all the players' first name and last name who have empty death record.,"SELECT name_first ,  name_last FROM player WHERE death_year = '';",['player'],1,1,0.1807058823529412,True,False,False,"SELECT name_first ,  name_last FROM player WHERE death_year = [PLACEHOLDER-TYPE:STRING];",This virtual table describes the first and last names of players from the 'player' table who have a recorded year of death. The placeholder in the WHERE clause represents the specific year of death being queried.
train.3657,baseball_1,"What is the highest salary among each team? List the team name, id and maximum salary.","SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;","['team', 'salary']",2,2,0.2065882352941176,False,True,False,"SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;",This virtual table provides the names and identifiers of teams along with their highest recorded salary from the 'salary' table. The data is grouped by team identifiers to ensure that each team is represented only once with its maximum salary.
train.3662,baseball_1,Which players won awards in both 1960 and 1961? Return their first names and last names.,"SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961","['player_award', 'player']",2,2,0.2576289592760181,False,True,False,"SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  [PLACEHOLDER-TYPE:NUMBER]","This virtual table identifies players who received awards in two specific years. The placeholders in the WHERE clause represent the years for which the awards were given, allowing users to specify any two years of interest."
train.3665,baseball_1,List the maximum scores of the team Boston Red Stockings when the team won in postseason?,SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';,"['postseason', 'team']",2,2,0.1425882352941176,False,True,False,SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING];,"This virtual table calculates the maximum number of wins achieved by any team in the postseason from the 'postseason' table, specifically for the team identified by its name in the 'team' table. The placeholder in the WHERE clause represents the name of the team being queried."
train.3666,baseball_1,What are the maximum scores the team Boston Red Stockings got when the team won in postseason?,SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';,"['postseason', 'team']",2,2,0.1425882352941176,False,True,False,SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING];,"This virtual table calculates the maximum number of wins achieved by any team in the postseason from the 'postseason' table, specifically for the team identified by its name in the 'team' table. The placeholder in the WHERE clause represents the name of the team being queried."
train.3669,baseball_1,What are the name and id of the team with the most victories in 2008 postseason?,"SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;","['postseason', 'team']",2,2,0.2621176470588234,False,True,False,"SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides the names of the winning teams and their corresponding team IDs from the postseason table for a specific year. The results are grouped by the winning team ID and ordered by the number of wins in descending order, with a limit on the number of results returned."
train.3673,baseball_1,What is the total number of postseason games that team Boston Red Stockings participated in?,SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' );,"['postseason', 'team']",2,2,0.1171764705882353,False,True,False,SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING] UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING] );,"This virtual table counts the total number of postseason appearances for a specific team, including both wins and losses. It combines data from the 'postseason' table and the 'team' table, filtering by the team's name provided as a placeholder."
train.3678,baseball_1,What is the total salary expenses of team Boston Red Stockings in 2010?,SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010,"['team', 'salary']",2,2,0.1635113122171945,False,True,False,SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = [PLACEHOLDER-TYPE:STRING] AND T1.year  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table calculates the total salary of players from a specific team for a given year. The placeholders represent the team's name and the year for which the salary data is being queried.
train.3679,baseball_1,How many players were in the team Boston Red Stockings in 2000?,SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000,"['team', 'salary']",2,2,0.1635113122171945,False,True,False,SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = [PLACEHOLDER-TYPE:STRING] AND T1.year  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the total count of salary records for a specific team in a given year. The placeholders represent the team's name and the year for which the salary records are being queried.
train.3681,baseball_1,List the 3 highest salaries of the players in 2001?,SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;,['salary'],1,1,0.1679999999999999,True,False,False,SELECT salary FROM salary WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY salary DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides the salary records from the 'salary' table for a specific year, sorted in descending order. The placeholders represent the year for which the salary data is requested and the limit on the number of records to return."
train.3684,baseball_1,List all the salary values players received in 2010 and 2001.,SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001,['salary'],1,1,0.2195113122171945,True,False,False,SELECT salary FROM salary WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] UNION SELECT salary FROM salary WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the salary records for players in two specific years from the 'salary' table. The placeholders in the WHERE clause represent the years for which the salary data is being queried.
train.3685,baseball_1,In which year did the least people enter hall of fame?,SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;,['hall_of_fame'],1,1,0.1679999999999999,True,False,False,SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides a list of years in which players were inducted into the Hall of Fame, grouped by year and ordered by the number of inductees in ascending order. The placeholder in the LIMIT clause allows for specifying the maximum number of years to retrieve."
train.3686,baseball_1,Find the year in which the least people enter hall of fame.,SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;,['hall_of_fame'],1,1,0.1679999999999999,True,False,False,SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides a list of years in which players were inducted into the Hall of Fame, grouped by year. The results are ordered by the number of inductees in ascending order, with a limit set by a placeholder for numeric values."
train.3689,baseball_1,"How many games were played in park ""Columbia Park"" in 1907?",SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';,"['park', 'home_game']",2,2,0.1635113122171945,False,True,False,SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = [PLACEHOLDER-TYPE:NUMBER] AND T2.park_name = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the total count of home games played in a specific year at a designated park. The placeholders represent the year of the games and the name of the park.
train.3690,baseball_1,"Count the number of games taken place in park ""Columbia Park"" in 1907.",SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';,"['park', 'home_game']",2,2,0.1635113122171945,False,True,False,SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = [PLACEHOLDER-TYPE:NUMBER] AND T2.park_name = [PLACEHOLDER-TYPE:STRING];,This virtual table provides the total count of home games played in a specific year at a designated park. The placeholders represent the year of the games and the name of the park.
train.3691,baseball_1,How many games were played in city Atlanta in 2000?,SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';,"['park', 'home_game']",2,2,0.1635113122171945,False,True,False,SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.city  =  [PLACEHOLDER-TYPE:STRING];,This virtual table provides the total count of home games played in a specific year at parks located in a specified city. The placeholders represent the year of the home games and the city where the park is situated.
train.3692,baseball_1,Find the number of games taken place in city Atlanta in 2000.,SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';,"['park', 'home_game']",2,2,0.1635113122171945,False,True,False,SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.city  =  [PLACEHOLDER-TYPE:STRING];,This virtual table provides the total count of home games played in a specific year at parks located in a specified city. The placeholders represent the year of the home games and the city where the park is situated.
train.3697,baseball_1,List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007.,"SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'","['team', 'player', 'salary']",3,3+,0.2748235294117647,False,False,True,"SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = [PLACEHOLDER-TYPE:NUMBER] AND T3.name = [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = [PLACEHOLDER-TYPE:NUMBER] AND T3.name = [PLACEHOLDER-TYPE:STRING]","This virtual table provides the first and last names of players who were associated with a specific team during a particular year, based on their salary records. The placeholders in the query represent the year and the team's name, allowing users to specify the desired year and team for their query."
train.3699,baseball_1,How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?,SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;,"['team', 'home_game']",2,2,0.1807058823529412,False,True,False,SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = [PLACEHOLDER-TYPE:STRING] AND T1.year BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];,This virtual table calculates the total number of home games played by a specific team over a range of years. The placeholders represent the team's name and the start and end years for the query.
train.3702,baseball_1,Find the team that attended the least number of home games in 1980.,SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;,"['team', 'home_game']",2,2,0.1679999999999999,False,True,False,SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.attendance ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table lists the names of teams that hosted home games in a specific year, ordered by their attendance in ascending order. The placeholders represent the year of the home games and the limit on the number of teams to display."
train.3710,baseball_1,Which park did the most people attend in 2008?,SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;,"['park', 'home_game']",2,2,0.1679999999999999,False,True,False,SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.attendance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides a list of park names where home games were played in a specific year, ordered by the total attendance in descending order. The placeholders represent the year of the home games and the limit on the number of park names to return."
train.3898,hospital_1,Which department has the largest number of employees?,SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;,['department'],1,1,0.1679999999999999,True,False,False,SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"The virtual table provides a list of department names from the 'Department' table, grouped by their unique identifiers. It orders the results by the count of each department's occurrences in descending order and limits the output to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of department names to retrieve."
train.3899,hospital_1,Find the department with the most employees.,SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;,['department'],1,1,0.1679999999999999,True,False,False,SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table provides a list of department names from the 'Department' table, grouped by their unique identifiers. The results are ordered by the count of occurrences of each department ID in descending order, allowing users to see the most frequently referenced departments. The placeholder in the LIMIT clause represents the maximum number of department names to return."
train.3902,hospital_1,what is the name and position of the head whose department has least number of employees?,"SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;","['physician', 'department']",2,2,0.2061176470588234,False,True,False,"SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides the names and positions of physicians who are heads of departments. It aggregates the data from the 'Department' and 'Physician' tables, grouping by department ID and ordering the results based on the count of departments, with a limit on the number of results returned as specified by the placeholder."
train.3904,hospital_1,What are names of patients who made an appointment?,SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn,"['patient', 'appointment']",2,2,0.0865882352941176,False,True,False,SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn,This virtual table provides the names of patients associated with their appointments from the 'Appointment' and 'Patient' tables. The join condition links the patient identifier in the 'Appointment' table to the Social Security Number in the 'Patient' table.
train.3905,hospital_1,List the names of patients who have made appointments.,SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn,"['patient', 'appointment']",2,2,0.0865882352941176,False,True,False,SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn,"This virtual table provides the names of patients associated with their appointments from the 'Appointment' and 'Patient' tables. The join condition links the patient identifier in the 'Appointment' table to the Social Security Number in the 'Patient' table, allowing for the retrieval of patient names based on their scheduled appointments."
train.3914,hospital_1,Find the names of all physicians and their primary affiliated departments' names.,"SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1","['physician', 'department', 'affiliated_with']",3,3+,0.1807058823529412,False,False,True,"SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  [PLACEHOLDER-TYPE:NUMBER]","This virtual table describes the names of physicians along with the names of the departments they are affiliated with, specifically filtering for those whose affiliation is marked as primary. The placeholders in the WHERE clause represent the primary affiliation status."
train.3915,hospital_1,What are the name and primarily affiliated department name of each physician?,"SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1","['physician', 'department', 'affiliated_with']",3,3+,0.1807058823529412,False,False,True,"SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  [PLACEHOLDER-TYPE:NUMBER]","This virtual table describes the names of physicians along with the names of the departments they are affiliated with, specifically filtering for those whose affiliation is marked as primary. The placeholders in the WHERE clause represent the primary affiliation status."
train.3929,hospital_1,Return the name of each physician and the number of patients he or she treats.,"SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid","['physician', 'patient']",2,2,0.1807058823529412,False,True,False,"SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid",This virtual table provides the names of physicians along with the count of patients for whom they are the primary care physician (PCP). The data is retrieved by joining the 'Physician' table with the 'Patient' table based on the physician's employee ID and the patient's PCP identifier. The results are grouped by the physician's employee ID to aggregate the patient counts.
train.3930,hospital_1,Find the name of physicians who are in charge of more than one patient.,SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1,"['physician', 'patient']",2,2,0.2195113122171945,False,True,False,SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of physicians who are primary care physicians (PCP) for patients, specifically those who have more than a specified number of patients. The placeholder in the HAVING clause represents the minimum count of patients a physician must have to be included in the results."
train.3931,hospital_1,Which physicians are in charge of more than one patient? Give me their names.,SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1,"['physician', 'patient']",2,2,0.2195113122171945,False,True,False,SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table lists the names of physicians who are primary care physicians (PCP) for a number of patients exceeding a specified threshold. The placeholder in the HAVING clause represents the minimum number of patients a physician must have to be included in the results.
train.3934,hospital_1,Find the number of rooms for different block code?,"SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode","['block', 'room']",2,2,0.1807058823529412,False,True,False,"SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",This virtual table provides a count of rooms grouped by their block code status from the 'Block' and 'Room' tables. The placeholders represent the block floor and block code statuses used for filtering the results.
train.3944,hospital_1,Find the number of medications prescribed for each brand.,"SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand","['prescribes', 'medication']",2,2,0.1807058823529412,False,True,False,"SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand","This virtual table provides a count of prescribed medications grouped by their brand names. It combines data from the 'medication' table and the 'prescribes' table, allowing users to see how many times each brand of medication has been prescribed."
train.3959,hospital_1,Find the physician who prescribed the highest dose. What is his or her name?,SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1,"['physician', 'prescribes']",2,2,0.1119999999999999,False,True,False,SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of physicians from the 'Physician' table who have prescribed medications, ordered by the dosage of the medications in descending order. The placeholder in the LIMIT clause represents the maximum number of physician names to be returned."
train.3960,hospital_1,List the physicians' employee ids together with their primary affiliation departments' ids.,"SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1",['affiliated_with'],1,1,0.1807058823529412,True,False,False,"SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of physicians along with their associated departments from the 'Affiliated_With' table, filtered by whether the affiliation is marked as primary. The placeholder in the WHERE clause represents the primary affiliation status."
train.3961,hospital_1,What are each physician's employee id and department id primarily affiliated.,"SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1",['affiliated_with'],1,1,0.1807058823529412,True,False,False,"SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of physicians along with their associated departments from the 'Affiliated_With' table, filtered by whether the affiliation is marked as primary. The placeholder in the WHERE clause represents the primary affiliation status."
train.3970,hospital_1,Find the three most expensive procedures.,SELECT name FROM procedures ORDER BY cost LIMIT 3,['procedures'],1,1,0.1119999999999999,True,False,False,SELECT name FROM procedures ORDER BY cost LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of medical procedures from the 'Procedures' table, ordered by their associated costs. The placeholder in the LIMIT clause allows the user to specify the maximum number of procedure names to retrieve."
train.3971,hospital_1,What are the three most costly procedures?,SELECT name FROM procedures ORDER BY cost LIMIT 3,['procedures'],1,1,0.1119999999999999,True,False,False,SELECT name FROM procedures ORDER BY cost LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of medical procedures from the 'Procedures' table, ordered by their cost. The placeholder in the LIMIT clause allows the user to specify the maximum number of procedure names to retrieve."
train.3973,hospital_1,Which physicians are trained in procedures that are more expensive than 5000?,SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000,"['physician', 'procedures', 'trained_in']",3,3+,0.1425882352941176,False,False,True,SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of physicians who are trained in specific procedures that have a cost exceeding a certain amount. The placeholders in the WHERE clause represent the cost threshold for the procedures.
train.3974,hospital_1,Find the physician who was trained in the most expensive procedure?,SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1,"['physician', 'procedures', 'trained_in']",3,3+,0.1119999999999999,False,False,True,SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of physicians who are trained in specific medical procedures, ordered by the cost of those procedures in descending order. The placeholder in the LIMIT clause represents the maximum number of physician names to be returned."
train.3985,hospital_1,What procedures cost less than 5000 and have John Wen as a trained physician?,SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  'John Wen',"['procedures', 'physician', 'trained_in']",3,3+,0.2748235294117647,False,False,True,SELECT name FROM procedures WHERE cost  <  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of medical procedures that are less expensive than a specified cost and are also treatments that a specific physician is certified to perform. The placeholders in the query represent the cost limit and the physician's name.
train.4321,tracking_grants_for_research,What are the different grant amounts for documents sent before '1986-08-26 20:49:27' and after the grant ended on '1989-03-16 18:27:16'?,SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  '1989-03-16 18:27:16',"['grants', 'documents']",2,2,0.2367058823529411,False,True,False,SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  [PLACEHOLDER-TYPE:STRING],This virtual table provides the grant amounts from the 'Grants' table that are associated with documents sent before a specific date and grants that are still active after a certain end date. The placeholders in the WHERE clause represent the dates for filtering the documents and grants.
train.4322,tracking_grants_for_research,List the project details of the project both producing patent and paper as outcomes.,SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent',"['project_outcomes', 'projects']",2,2,0.2195113122171945,False,True,False,SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the project details from the 'Projects' table that have two specific outcomes. The query uses an INTERSECT operation to find projects that meet both outcome criteria, represented by placeholders for the outcome codes."
train.4324,tracking_grants_for_research,What is the total grant amount of the organisations described as research?,SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research',"['grants', 'organisation_types', 'organisations']",3,3+,0.1425882352941176,False,False,True,SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  [PLACEHOLDER-TYPE:STRING],"This virtual table calculates the total grant amount from the 'Grants' table for organisations of a specific type. It joins the 'Grants' table with the 'Organisations' table to link grants to their respective organisations, and further joins with the 'Organisation_Types' table to filter by the organisation type description. The placeholder in the WHERE clause represents the specific organisation type description being queried."
train.4327,tracking_grants_for_research,From what date and to what date do the staff work on a project that has the most staff and has staff in a leader role?,"SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'",['project_staff'],1,1,0.3211583710407238,True,False,False,"SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER] ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the start and end dates of staff involvement in projects. It combines two sets of data: the first set includes dates for the top N projects with the most staff members, while the second set includes dates for staff members with a specific role. The placeholders represent the number of top projects to retrieve and the role code for filtering staff members."
train.4330,tracking_grants_for_research,What is the organisation type and id of the organisation which has the most number of research staff?,"SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1","['organisations', 'research_staff']",2,2,0.2061176470588234,False,True,False,"SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of organisation types and their corresponding organisation IDs from the 'Organisations' table. It joins with the 'Research_Staff' table to filter organisations based on their employment of research staff. The results are grouped by organisation ID and ordered by the count of research staff associated with each organisation, limiting the output to a specified number of results."
train.4334,tracking_grants_for_research,Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described,SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research',"['grants', 'organisation_types', 'organisations', 'documents']",4,3+,0.1807058823529412,False,False,True,SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  [PLACEHOLDER-TYPE:NUMBER] AND T4.organisation_type_description  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the sent dates of documents from the 'Documents' table that are associated with grants exceeding a specified amount. The query joins multiple tables: 'Grants' to link grants with documents, 'Organisations' to connect grants to their respective organisations, and 'Organisation_Types' to filter based on the type of organisation. The placeholders represent the grant amount and the organisation type description."
train.4338,tracking_grants_for_research,List the project details of the projects which did not hire any staff for a researcher role.,SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' ),"['project_staff', 'projects']",2,2,0.2112941176470588,False,True,False,SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  [PLACEHOLDER-TYPE:STRING] ),This virtual table provides a list of project details from the 'Projects' table for projects that do not have any associated staff members with a specific role. The placeholder in the WHERE clause represents the role code that is being filtered out.
train.4339,tracking_grants_for_research,What are the details for all projects that did not hire any staff in a research role?,SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' ),"['project_staff', 'projects']",2,2,0.2112941176470588,False,True,False,SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  [PLACEHOLDER-TYPE:STRING] ),This virtual table provides a list of project details from the 'Projects' table for projects that do not have any associated staff members with a specific role. The placeholder in the WHERE clause represents the role code that is being filtered out.
train.4342,tracking_grants_for_research,"When do all the researcher role staff start to work, and when do they stop working?","SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'",['project_staff'],1,1,0.1807058823529412,True,False,False,"SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides the start and end dates of staff members' involvement in projects from the 'Project_Staff' table, filtered by a specific role code. The placeholder in the WHERE clause represents the role of the staff member."
train.4350,tracking_grants_for_research,How many staff does each project has? List the project id and the number in an ascending order.,"SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC","['project_staff', 'projects']",2,2,0.2061176470588234,False,True,False,"SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC","This virtual table provides a count of staff members associated with each project from the 'Project_Staff' table, grouped by project ID. The results are ordered in ascending order based on the number of staff members per project."
train.4351,tracking_grants_for_research,"For each project id, how many staff does it have? List them in increasing order.","SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC","['project_staff', 'projects']",2,2,0.2061176470588234,False,True,False,"SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC","This virtual table provides a count of staff members associated with each project from the 'Project_Staff' table, grouped by project ID. The results are ordered in ascending order based on the number of staff members per project."
train.4356,tracking_grants_for_research,Which project made the most number of outcomes? List the project details and the project id.,"SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1","['project_outcomes', 'projects']",2,2,0.2061176470588234,False,True,False,"SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of project details and their corresponding project IDs from the 'Projects' table. It joins with the 'Project_Outcomes' table to aggregate the outcomes associated with each project. The results are grouped by project ID and ordered by the count of outcomes in descending order, allowing the user to limit the number of results returned based on a specified number."
train.4359,tracking_grants_for_research,What are the details of the project with no outcomes?,SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes ),"['project_outcomes', 'projects']",2,2,0.1731764705882353,False,True,False,SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes ),"This virtual table provides a list of project details from the 'Projects' table for projects that do not have any associated outcomes in the 'Project_Outcomes' table. The query uses a subquery to filter out projects that have recorded outcomes, ensuring that only projects without outcomes are displayed."
train.4360,tracking_grants_for_research,"Which organisation hired the most number of research staff? List the organisation id, type and detail.","SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1","['organisations', 'research_staff']",2,2,0.2319999999999999,False,True,False,"SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of organisations along with their types and details, specifically focusing on those that employ research staff. The results are grouped by organisation ID and ordered by the number of research staff associated with each organisation, with a limit on the number of results returned as specified by the placeholder."
train.4363,tracking_grants_for_research,"For each staff id, what is the description of the role that is involved with the most number of projects?","SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1","['project_outcomes', 'project_staff', 'staff_roles']",3,3+,0.2061176470588234,False,False,True,"SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of staff members along with their role descriptions from the 'Staff_Roles' and 'Project_Staff' tables. It joins these tables based on the role code and further connects to the 'Project_Outcomes' table to group the results by staff ID. The results are ordered by the count of associated outcomes in descending order, allowing the user to limit the number of results returned based on a specified number."
train.4364,tracking_grants_for_research,Which document type is described with the prefix 'Initial'?,SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%',['document_types'],1,1,0.1425882352941176,True,False,False,SELECT document_type_code FROM Document_Types WHERE document_description LIKE [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the unique document type codes from the 'Document_Types' table based on a specific description of the document type. The placeholder in the WHERE clause allows for filtering the results according to the desired document description.
train.4369,tracking_grants_for_research,"For each grant id, how many documents does it have, and which one has the most?","SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1",['documents'],1,1,0.2061176470588234,True,False,False,"SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table summarizes the number of documents associated with each grant from the 'Documents' table. It groups the results by 'grant_id' and orders them in descending order based on the count of documents, allowing the user to specify a limit on the number of results returned."
train.4374,tracking_grants_for_research,How many Patent outcomes are generated from all the projects?,SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent',['project_outcomes'],1,1,0.1425882352941176,True,False,False,SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of project outcomes from the 'Project_Outcomes' table that match a specific outcome code. The placeholder in the WHERE clause represents the outcome code being queried.
train.4376,tracking_grants_for_research,How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?,SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54',['project_staff'],1,1,0.1807058823529412,True,False,False,SELECT count(*) FROM Project_Staff WHERE role_code  =  [PLACEHOLDER-TYPE:STRING] OR date_from  <  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a count of staff members associated with projects, filtered by a specific role code or a start date that is earlier than a specified date. The placeholders in the WHERE clause represent the role code and the date for filtering the results."
train.4380,tracking_grants_for_research,What are the result description of the project whose detail is 'sint'?,SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint',"['project_outcomes', 'projects', 'research_outcomes']",3,3+,0.1425882352941176,False,False,True,SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the outcome descriptions of research outcomes associated with specific projects. The query joins the 'Research_Outcomes' table with the 'Project_Outcomes' table and the 'Projects' table to filter the results based on the project details. The placeholder in the WHERE clause represents the specific project details being queried.
train.4381,tracking_grants_for_research,What is the description for the results whose project detail is 'sint'?,SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint',"['project_outcomes', 'projects', 'research_outcomes']",3,3+,0.1425882352941176,False,False,True,SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the outcome descriptions of research outcomes associated with specific projects. The query joins the 'Research_Outcomes' table with the 'Project_Outcomes' table and the 'Projects' table to filter the results based on the project details. The placeholder in the WHERE clause represents the specific project details being queried.
train.4385,tracking_grants_for_research,What are the details for the projects which were launched by the organization with the most projects?,SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 ),['projects'],1,1,0.1985882352941176,True,False,False,SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER] ),This virtual table provides a list of project details from the 'Projects' table for organisations that have the highest number of associated projects. The placeholder in the LIMIT clause allows the user to specify the maximum number of organisations to retrieve based on their project count.
train.4391,tracking_grants_for_research,"For each project id, how many tasks are there?","SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id","['tasks', 'projects']",2,2,0.1807058823529412,False,True,False,"SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id","This virtual table provides a count of tasks associated with each project from the 'Projects' table, along with the project details. The count is grouped by the unique project identifier, allowing users to see how many tasks are linked to each project."
train.4392,tracking_grants_for_research,What are the staff roles of the staff who,SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18',['project_staff'],1,1,0.1807058823529412,True,False,False,SELECT role_code FROM Project_Staff WHERE date_from  >  [PLACEHOLDER-TYPE:STRING] AND date_to  <  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the role codes of staff members associated with projects, filtered by their involvement dates. The placeholders in the WHERE clause represent the start and end dates for the staff members' participation in the projects."
train.4397,tracking_grants_for_research,What is the most common role for the staff?,SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1,['project_staff'],1,1,0.1679999999999999,True,False,False,SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of unique role codes from the 'Project_Staff' table, grouped by the role code and ordered by the number of occurrences in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of role codes to retrieve."
train.5534,products_gen_characteristics,"Find the number of products with category ""Spices"" and typically sold above 1000.",SELECT count(*) FROM products WHERE product_category_code  =  'Spices' AND typical_buying_price  >  1000,['products'],1,1,0.1807058823529412,True,False,False,SELECT count(*) FROM products WHERE product_category_code  =  [PLACEHOLDER-TYPE:STRING] AND typical_buying_price  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides the count of products from the 'Products' table that belong to a specific product category and have a typical buying price above a certain threshold. The placeholders in the WHERE clause represent the product category code and the minimum buying price.
train.5543,products_gen_characteristics,What are the descriptions of the categories that products with product descriptions that contain the letter t are in?,SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%',"['products', 'ref_product_categories']",2,2,0.1425882352941176,False,True,False,SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE [PLACEHOLDER-TYPE:STRING],This virtual table provides the descriptions of product categories from the 'Ref_Product_Categories' table for products that have a specific description. The placeholder in the WHERE clause allows for filtering products based on their description.
train.5576,products_gen_characteristics,"Count the products that have the color description ""white"" or have the characteristic name ""hot"".",SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  'white' OR t3.characteristic_name  =  'hot',"['products', 'ref_colors', 'characteristics', 'product_characteristics']",4,3+,0.1635113122171945,False,False,True,SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  [PLACEHOLDER-TYPE:STRING] OR t3.characteristic_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a count of products that either match a specific color description or have a specific characteristic name. It combines data from the 'Products', 'Product_Characteristics', 'Characteristics', and 'Ref_Colors' tables, using joins to link the relevant identifiers and applying filters based on the provided placeholders."
train.5579,products_gen_characteristics,Return the unit of measure for 'Herb' products.,SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  'Herbs',['ref_product_categories'],1,1,0.1425882352941176,True,False,False,SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the unit of measure for a specific product category from the 'Ref_Product_Categories' table. The placeholder in the WHERE clause represents the unique code for the product category.
train.5586,products_gen_characteristics,"Find the unit of measurement and product category code of product named ""chervil"".","SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  'chervil'","['products', 'ref_product_categories']",2,2,0.1807058823529412,False,True,False,"SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the unit of measure and product category code for a specific product from the 'Products' table. The placeholder in the WHERE clause represents the name of the product being queried.
train.5589,products_gen_characteristics,What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'?,SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  'white' AND t2.unit_of_measure != 'Handful',"['products', 'ref_colors', 'ref_product_categories']",3,3+,0.1807058823529412,False,False,True,SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  [PLACEHOLDER-TYPE:STRING] AND t2.unit_of_measure != [PLACEHOLDER-TYPE:STRING],This virtual table describes the names of products from the 'Products' table that are associated with a specific color and do not belong to a certain unit of measure. The placeholders in the WHERE clause represent the color description and the unit of measure that should be excluded.
train.5592,products_gen_characteristics,What is the description of the color used by least products?,SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1,"['products', 'ref_colors']",2,2,0.1679999999999999,False,True,False,SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of color descriptions for products from the 'Products' table, grouped by color and ordered by the count of products associated with each color. The placeholder in the LIMIT clause allows the user to specify the maximum number of color descriptions to retrieve."
train.5599,products_gen_characteristics,Give the names of characteristics that are in two or more products?,SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2,"['products', 'characteristics', 'product_characteristics']",3,3+,0.2195113122171945,False,False,True,SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER],"This virtual table describes the names of characteristics associated with products from the 'Products' table. It retrieves characteristic names by joining the 'Products', 'Product_Characteristics', and 'Characteristics' tables. The results are grouped by characteristic name, and only those with a count of associated products greater than or equal to a specified number are included. The placeholder in the HAVING clause represents the minimum count of products for the characteristic names to be displayed."
train.5669,dorm_1,What are the names of the all-female dorms?,SELECT dorm_name FROM dorm WHERE gender  =  'F',['dorm'],1,1,0.1425882352941176,True,False,False,SELECT dorm_name FROM dorm WHERE gender  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the names of dormitories from the 'Dorm' table that are designated for a specific gender. The placeholder in the WHERE clause represents the gender designation for the dormitory.
train.5688,dorm_1,Find the average and total capacity of dorms for the students with gender X.,"SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'",['dorm'],1,1,0.1635113122171945,True,False,False,"SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the average and total student capacity of dormitories filtered by a specific gender designation. The placeholder in the WHERE clause represents the gender of the dormitory.
train.5699,dorm_1,What are the names and types of the dorms that have a capacity greater than 300 or less than 100?,"SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",['dorm'],1,1,0.2188235294117647,True,False,False,"SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  [PLACEHOLDER-TYPE:NUMBER] OR student_capacity  <  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides the names and gender designations of dormitories from the 'Dorm' table that have a student capacity exceeding or falling below a specified number. The placeholders in the WHERE clause represent the capacity limits for filtering the dormitories.
train.5747,dorm_1,What are the total number of students who are living in a male dorm?,SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M',"['student', 'lives_in', 'dorm']",3,3+,0.1425882352941176,False,False,True,SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of students residing in dormitories based on gender designation. The placeholders in the WHERE clause represent the gender of the dormitory.
train.5755,dorm_1,What is the most common amenity in the dorms?,SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1,"['has_amenity', 'dorm_amenity']",2,2,0.1679999999999999,False,True,False,SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"The virtual table describes the names of amenities available in dormitories, grouped by their identifiers and ordered by the count of occurrences in descending order. The placeholder in the LIMIT clause represents the maximum number of amenities to be displayed."
train.5757,dorm_1,What are the first names of all students who live in the dorm with the most amenities?,SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1),"['has_amenity', 'lives_in', 'student', 'dorm_amenity', 'dorm']",5,3+,0.1985882352941176,False,False,True,SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]),"This virtual table describes the first names of students who live in dormitories that have the most amenities. The query joins the 'Student' table with the 'Lives_in' table to find students residing in specific dorms. It filters the dorms based on a subquery that counts the number of amenities in each dorm, ordering them by the count and limiting the results to a specified number of dormitories. The placeholder in the LIMIT clause represents the maximum number of dormitories to consider."
train.5776,customer_complaints,Find the emails of customers who has filed a complaints of the product with the most complaints.,SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1,"['complaints', 'customers']",2,2,0.1679999999999999,False,True,False,SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of email addresses of customers who have made complaints, grouped by customer ID. The results are ordered by the number of complaints each customer has made, and the number of results returned can be limited by a specified numeric placeholder."
train.5777,customer_complaints,What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints?,SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1,"['complaints', 'customers']",2,2,0.1679999999999999,False,True,False,SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of email addresses of customers who have made complaints, grouped by customer ID. The results are ordered by the number of complaints each customer has made, and the number of results returned can be limited by a specified number."
train.5779,customer_complaints,Return the names of products that have had complaints filed by the customer who has filed the fewest complaints.,SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1,"['complaints', 'products', 'customers']",3,3+,0.1889230769230769,False,False,True,SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of distinct product names from the 'Products' table that have been associated with complaints. The query joins the 'Products' table with the 'Complaints' table based on the product identifier, and it groups the results by customer identifiers to ensure that each customer is counted only once. The results are ordered by the count of complaints, and a placeholder is included to limit the number of results returned."
train.5795,customer_complaints,What is the last name of the staff member in charge of the complaint on the product with the lowest price?,SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1,"['complaints', 'products', 'staff']",3,3+,0.1119999999999999,False,False,True,SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of last names of staff members who are handling complaints related to products, ordered by the price of those products. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return."
train.5800,customer_complaints,How many customers are there in the customer type with the most customers?,SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1,['customers'],1,1,0.1679999999999999,True,False,False,SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a count of customers grouped by their type, allowing for an analysis of the distribution of different customer types. The placeholder in the LIMIT clause represents the maximum number of customer types to display, enabling users to specify how many top customer types they wish to see."
train.5810,customer_complaints,What is first names of the top 5 staff who have handled the greatest number of complaints?,SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5,"['complaints', 'staff']",2,2,0.1679999999999999,False,True,False,SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the first names of staff members from the 'Staff' table who are associated with complaints in the 'Complaints' table. The results are grouped by staff member and ordered by the number of complaints they have handled, with a limit on the number of results returned based on a specified number."
train.5812,customer_complaints,Which state has the most customers?,SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1,['customers'],1,1,0.1679999999999999,True,False,False,SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the states where customers reside, grouping the results by state and ordering them by the number of customers in each state. The placeholder in the LIMIT clause allows for specifying the maximum number of states to return."
train.5813,customer_complaints,Give the state that has the most customers.,SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1,['customers'],1,1,0.1679999999999999,True,False,False,SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the states where customers reside, grouping the results by state and ordering them by the number of customers in each state. The placeholder in the LIMIT clause allows for specifying the maximum number of states to return."
train.5865,tracking_share_transactions,"What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is ""PUR""?",SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  'PUR',"['lots', 'transactions_lots', 'transactions']",3,3+,0.1807058823529412,False,False,True,SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  [PLACEHOLDER-TYPE:NUMBER] AND T3.transaction_type_code  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the details of lots associated with transactions that involve a specific number of shares and a particular type of transaction. The placeholders in the WHERE clause represent the minimum share count and the transaction type code.
train.5866,tracking_share_transactions,Show the average transaction amount for different transaction types.,"SELECT transaction_type_code ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",['transactions'],1,1,0.1807058823529412,True,False,False,"SELECT transaction_type_code ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code","This virtual table summarizes the average amount of transactions grouped by their respective transaction types from the 'Transactions' table. The placeholder in the SELECT clause represents the transaction type code, while the average amount is calculated for each type."
train.5873,tracking_share_transactions,"Show the number of transactions with transaction type code ""SALE"" for different investors if it is larger than 0.","SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code  =  'SALE' GROUP BY investor_id",['transactions'],1,1,0.2367058823529411,True,False,False,"SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code  =  [PLACEHOLDER-TYPE:STRING] GROUP BY investor_id","This virtual table summarizes the number of transactions for each investor from the 'Transactions' table, filtered by a specific transaction type. The placeholder in the WHERE clause represents the transaction type code."
train.5876,tracking_share_transactions,Show the transaction type code that occurs the most frequently.,SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1,['transactions'],1,1,0.1679999999999999,True,False,False,SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the different types of transactions recorded in the 'Transactions' table, grouping them by their unique transaction type codes. The results are ordered by the frequency of each transaction type, allowing users to see the most common transaction types up to a specified limit. The placeholder in the LIMIT clause represents the maximum number of transaction types to return."
train.5884,tracking_share_transactions,What are the details of the lots which are not used in any transactions?,SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id  =  T2.lot_id,"['lots', 'transactions_lots']",2,2,0.1425882352941176,False,True,False,SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id  =  T2.lot_id,This virtual table provides the details of lots from the 'Lots' table that are not associated with any transactions. The query uses an EXCEPT clause to exclude lot details that are linked to transactions through the 'Transactions_Lots' table.
train.5893,cre_Theme_park,Show details of all visitors.,SELECT Tourist_Details FROM VISITORS,['visitors'],1,1,0.0865882352941176,True,False,False,SELECT Tourist_Details FROM VISITORS,This virtual table provides details about tourists from the 'Visitors' table. The placeholder in the SELECT clause represents the specific details related to each tourist.
train.5901,cre_Theme_park,What is the detail of the location UK Gallery?,SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  'UK Gallery',['locations'],1,1,0.1425882352941176,True,False,False,SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides additional information about a specific location from the 'Locations' table based on the location's name. The placeholder in the WHERE clause represents the name of the location being queried.
train.5902,cre_Theme_park,"Return the detail of the location named ""UK Gallery"".",SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  'UK Gallery',['locations'],1,1,0.1425882352941176,True,False,False,SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides additional information about a specific location from the 'Locations' table based on the location's name. The placeholder in the WHERE clause represents the name of the location being queried.
train.5914,cre_Theme_park,Give me the star rating descriptions of the hotels that cost more than 10000.,SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000,"['ref_hotel_star_ratings', 'hotels']",2,2,0.1425882352941176,False,True,False,SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the star rating descriptions of hotels from the 'Ref_Hotel_Star_Ratings' table that have a price range above a specified value. The placeholder in the WHERE clause represents the price range threshold.
train.5915,cre_Theme_park,What are the details and opening hours of the museums?,"SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID","['tourist_attractions', 'museums']",2,2,0.1247058823529411,False,True,False,"SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID",This virtual table provides details about museums and their opening hours by joining the 'Museums' table with the 'Tourist_Attractions' table. The placeholder in the SELECT statement allows for the retrieval of specific museum details and their corresponding opening hours.
train.5922,cre_Theme_park,Which tourist attractions are related to royal family? Tell me their details and how we can get there.,"SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID","['royal_family', 'tourist_attractions']",2,2,0.1247058823529411,False,True,False,"SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID",This virtual table provides details about royal families and the instructions on how to reach the associated tourist attractions. The join operation links the 'Royal_Family' table with the 'Tourist_Attractions' table based on the unique identifier for royal family entries and the tourist attraction ID.
train.5924,cre_Theme_park,Find the details of the shops that can be reached by walk.,SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  'walk',"['shops', 'tourist_attractions']",2,2,0.1425882352941176,False,True,False,SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides the details of shops that are associated with tourist attractions, filtered by specific instructions on how to reach those attractions. The placeholder in the WHERE clause represents the directions to the attraction."
train.5927,cre_Theme_park,What are the details of the markets that can be accessed by walk or bus?,SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  'walk' OR  T2.How_to_Get_There  =  'bus',"['street_markets', 'tourist_attractions']",2,2,0.1635113122171945,False,True,False,SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  [PLACEHOLDER-TYPE:STRING] OR  T2.How_to_Get_There  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides details about street markets that are linked to tourist attractions based on specific directions on how to reach them. The placeholders in the WHERE clause represent the different sets of instructions for accessing the attractions.
train.5928,cre_Theme_park,Find the details of all the markets that are accessible by walk or bus.,SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  'walk' OR  T2.How_to_Get_There  =  'bus',"['street_markets', 'tourist_attractions']",2,2,0.1635113122171945,False,True,False,SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  [PLACEHOLDER-TYPE:STRING] OR  T2.How_to_Get_There  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides details about street markets that are linked to specific tourist attractions. The query filters the results based on the instructions on how to reach the attractions, allowing users to specify one or two different methods of access using placeholders."
train.5942,cre_Theme_park,What are the details of the three most expensive hotels?,SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3,['hotels'],1,1,0.1119999999999999,True,False,False,SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides additional details about hotels from the 'Hotels' table, sorted by their price range in descending order. The placeholder in the LIMIT clause represents the maximum number of hotel details to retrieve."
train.5943,cre_Theme_park,Show the details and star ratings of the 3 least expensive hotels.,"SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",['hotels'],1,1,0.1501176470588235,True,False,False,"SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides details about hotels, specifically their additional information and star rating codes. The results are ordered by the price range of the hotels in ascending order, and the number of results returned is limited by a placeholder for numeric values."
train.5945,cre_Theme_park,Show the transportation method most people choose to get to tourist attractions.,SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1,['tourist_attractions'],1,1,0.1679999999999999,True,False,False,SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of instructions on how to reach various tourist attractions, grouped by the unique directions available. The results are ordered by the frequency of each instruction, allowing users to see the most common ways to get to attractions. The placeholder in the LIMIT clause represents the maximum number of instructions to retrieve."
train.5946,cre_Theme_park,Which transportation method is used the most often to get to tourist attractions?,SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1,['tourist_attractions'],1,1,0.1679999999999999,True,False,False,SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of instructions on how to reach various tourist attractions, grouped by the unique directions available. The results are ordered by the frequency of each instruction, allowing users to see the most common ways to get to attractions. The placeholder in the LIMIT clause represents the maximum number of instructions to retrieve."
train.5951,cre_Theme_park,"Show different tourist attractions' names, ids, and the corresponding number of visits.","SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID","['visits', 'tourist_attractions']",2,2,0.2065882352941176,False,True,False,"SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID","This virtual table provides a summary of tourist attractions along with the count of visits for each attraction. It combines data from the 'Tourist_Attractions' table and the 'Visits' table, grouping the results by the unique identifier of each tourist attraction. The placeholders represent the specific details of the attractions and the count of visits associated with them."
train.5959,cre_Theme_park,What are the names of the tourist attractions that have parking or shopping as their feature details?,SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping',"['features', 'tourist_attractions', 'tourist_attraction_features']",3,3+,0.2195113122171945,False,False,True,SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  [PLACEHOLDER-TYPE:STRING] UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  [PLACEHOLDER-TYPE:STRING],"This virtual table lists the names of tourist attractions that feature specific characteristics. The query combines results from the 'Tourist_Attractions', 'Tourist_Attraction_Features', and 'Features' tables, filtering based on the details of the features. The placeholders in the WHERE clause represent the specific feature details being queried."
train.5960,cre_Theme_park,Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?,SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping',"['features', 'tourist_attractions', 'tourist_attraction_features']",3,3+,0.2195113122171945,False,False,True,SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  [PLACEHOLDER-TYPE:STRING] UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  [PLACEHOLDER-TYPE:STRING],"This virtual table lists the names of tourist attractions that feature specific characteristics. The query combines results from the 'Tourist_Attractions', 'Tourist_Attraction_Features', and 'Features' tables, filtering based on the details of the features. The placeholders in the WHERE clause represent the specific feature details being queried."
train.5964,cre_Theme_park,Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.,SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Vincent' INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Marcelle',"['visits', 'visitors', 'tourist_attractions']",3,3+,0.2195113122171945,False,False,True,SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  [PLACEHOLDER-TYPE:STRING],"This virtual table describes the names of tourist attractions that have been visited by two different tourists, identified by their specific details. The placeholders in the WHERE clause represent the details of the tourists being compared."
train.6059,customers_and_addresses,What is the average amount of items ordered in each order?,SELECT avg(order_quantity) FROM order_items,['order_items'],1,1,0.0865882352941176,True,False,False,SELECT avg(order_quantity) FROM order_items,This virtual table calculates the average quantity of products ordered from the 'Order_Items' table. The placeholder in the SELECT clause represents the average of the order quantities.
train.6066,customers_and_addresses,Find the payment method that is used most frequently.,SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1,['customers'],1,1,0.1679999999999999,True,False,False,SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table summarizes the preferred payment methods used by customers from the 'Customers' table. It groups the results by payment method and orders them by the frequency of each method, allowing the user to specify a limit on the number of payment methods returned."
train.6085,customers_and_addresses,Which city has the most customers living in?,SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1,"['addresses', 'customers', 'customer_addresses']",3,3+,0.1679999999999999,False,False,True,SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of cities where customers are located, derived from the 'Customers', 'Customer_Addresses', and 'Addresses' tables. The results are grouped by city and ordered by the number of customers in each city, with a limit on the number of cities returned based on a specified number."
train.6098,customers_and_addresses,"Find the contact channel code that was used by the customer named ""Tillman Ernser"".",SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  'Tillman Ernser',"['customer_contact_channels', 'customers']",2,2,0.1679999999999999,False,True,False,SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides a distinct list of contact channels used by customers from the 'Customers' table based on their name. The placeholder in the WHERE clause represents the specific customer's name.
train.6099,customers_and_addresses,"What is the ""active to date"" of the latest contact channel used by ""Tillman Ernser""?",SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  'Tillman Ernser',"['customer_contact_channels', 'customers']",2,2,0.1425882352941176,False,True,False,SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the most recent deactivation date of a contact channel for a specific customer from the 'Customers' and 'Customer_Contact_Channels' tables. The placeholder in the WHERE clause represents the customer's name.
train.6100,customers_and_addresses,"Return the the ""active to date"" of the latest contact channel used by the customer named ""Tillman Ernser"".",SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  'Tillman Ernser',"['customer_contact_channels', 'customers']",2,2,0.1425882352941176,False,True,False,SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table retrieves the most recent deactivation date of a contact channel for a specific customer from the 'Customers' and 'Customer_Contact_Channels' tables. The placeholder in the WHERE clause represents the customer's name.
train.6101,customers_and_addresses,What is the average time span of contact channels in the database?,SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels,['customer_contact_channels'],1,1,0.1075113122171946,True,False,False,SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels,This virtual table calculates the average duration that contact channels remain active for customers in the 'Customer_Contact_Channels' table. The placeholder in the SELECT clause represents the calculation of the difference between the active dates.
train.6102,customers_and_addresses,Compute the average active time span of contact channels.,SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels,['customer_contact_channels'],1,1,0.1075113122171946,True,False,False,SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels,This virtual table calculates the average duration that contact channels remain active for customers in the 'Customer_Contact_Channels' table. The placeholder in the SELECT clause represents the calculation of the difference between the active dates.
train.6104,customers_and_addresses,Return the channel code and contact number of the customer contact channel whose active duration was the longest.,"SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)",['customer_contact_channels'],1,1,0.2367058823529411,True,False,False,"SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])",This virtual table provides the channel codes and contact numbers of customer contact channels that have been active for a duration equal to the longest active duration found in the 'Customer_Contact_Channels' table. The placeholder in the LIMIT clause allows for specifying the number of records to retrieve based on the longest active duration.
train.6105,customers_and_addresses,Find the name and active date of the customer that use email as the contact channel.,"SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'","['customer_contact_channels', 'customers']",2,2,0.1807058823529412,False,True,False,"SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  [PLACEHOLDER-TYPE:STRING]",This virtual table provides the names of customers along with the activation dates of their preferred contact channels from the 'Customers' and 'Customer_Contact_Channels' tables. The placeholder in the WHERE clause represents the specific contact channel code being queried.
train.6127,customers_and_addresses,Who made the latest order?,SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1,"['customer_orders', 'customers']",2,2,0.1119999999999999,False,True,False,SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of customer names from the 'Customers' table who have placed orders, sorted by the date of their most recent order. The placeholder in the LIMIT clause allows for specifying the maximum number of customer names to retrieve."
train.6131,customers_and_addresses,Find the name and ID of the product whose total order quantity is the largest.,"SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1","['products', 'order_items']",2,2,0.2061176470588234,False,True,False,"SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a summary of product details and their identifiers from the 'Products' table, based on the quantities ordered from the 'Order_Items' table. The results are grouped by product ID and ordered by the total quantity ordered, with a limit specified by a placeholder for numeric values."
train.6133,customers_and_addresses,"Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",SELECT address_content FROM addresses WHERE city  =  'East Julianaside' AND state_province_county  =  'Texas' UNION SELECT address_content FROM addresses WHERE city  =  'Gleasonmouth' AND state_province_county  =  'Arizona',['addresses'],1,1,0.2508684900711876,True,False,False,SELECT address_content FROM addresses WHERE city  =  [PLACEHOLDER-TYPE:STRING] AND state_province_county  =  [PLACEHOLDER-TYPE:STRING] UNION SELECT address_content FROM addresses WHERE city  =  [PLACEHOLDER-TYPE:STRING] AND state_province_county  =  [PLACEHOLDER-TYPE:STRING],"This virtual table retrieves the detailed address content from the 'Addresses' table for specific cities and states, allowing for the combination of results from two different queries based on the same criteria. The placeholders in the WHERE clauses represent the city and state names."
train.6134,customers_and_addresses,"What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",SELECT address_content FROM addresses WHERE city  =  'East Julianaside' AND state_province_county  =  'Texas' UNION SELECT address_content FROM addresses WHERE city  =  'Gleasonmouth' AND state_province_county  =  'Arizona',['addresses'],1,1,0.2508684900711876,True,False,False,SELECT address_content FROM addresses WHERE city  =  [PLACEHOLDER-TYPE:STRING] AND state_province_county  =  [PLACEHOLDER-TYPE:STRING] UNION SELECT address_content FROM addresses WHERE city  =  [PLACEHOLDER-TYPE:STRING] AND state_province_county  =  [PLACEHOLDER-TYPE:STRING],"This virtual table retrieves the detailed address content from the 'Addresses' table for specific cities and states, allowing for the combination of results from two different queries based on the same criteria. The placeholders in the WHERE clauses represent the city and state names."
train.6271,city_record,"What is the match id of the competition called ""1994 FIFA World Cup qualification""?",SELECT match_id FROM MATCH WHERE competition = '1994 FIFA World Cup qualification',['match'],1,1,0.1425882352941176,True,False,False,SELECT match_id FROM MATCH WHERE competition = [PLACEHOLDER-TYPE:STRING],This virtual table describes the unique identifiers of matches from the 'match' table that are part of a specific competition. The placeholder in the WHERE clause represents the competition's identifier.
train.6275,city_record,Find the city that hosted the most events.,SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1,"['hosting_city', 'city']",2,2,0.1679999999999999,False,True,False,SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the cities that have hosted the most matches, ordered by the number of matches hosted. The placeholder in the LIMIT clause allows the user to specify how many top cities they want to retrieve."
train.6282,city_record,Which three cities have the largest regional population?,SELECT city FROM city ORDER BY regional_population DESC LIMIT 3,['city'],1,1,0.1119999999999999,True,False,False,SELECT city FROM city ORDER BY regional_population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of cities from the 'city' table, ordered by their regional population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be displayed."
train.6283,city_record,What are the three largest cities in terms of regional population?,SELECT city FROM city ORDER BY regional_population DESC LIMIT 3,['city'],1,1,0.1119999999999999,True,False,False,SELECT city FROM city ORDER BY regional_population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of cities from the 'city' table, ordered by their regional population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be displayed."
train.6286,city_record,Which city has the highest temperature in February?,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1,"['city', 'temperature']",2,2,0.1119999999999999,False,True,False,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table lists the names of cities from the 'city' table, ordered by their average temperature in February from the 'temperature' table. The placeholder in the LIMIT clause represents the maximum number of cities to be displayed."
train.6288,city_record,Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct,"['city', 'temperature']",2,2,0.1807058823529412,False,True,False,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct,This virtual table lists the names of cities from the 'city' table that have a March average temperature lower than July or higher than October. The placeholders in the WHERE clause represent the temperature values for the respective months.
train.6290,city_record,Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities?,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city,"['hosting_city', 'city', 'temperature']",3,3+,0.1985882352941176,False,False,True,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city,This virtual table identifies cities that have a lower average temperature in March compared to July and have hosted a match. The placeholders in the query represent the necessary identifiers for the cities and their temperature data.
train.6293,city_record,Which cities have lower temperature in March than in Dec and have never served as host cities?,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city,"['hosting_city', 'city', 'temperature']",3,3+,0.1985882352941176,False,False,True,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city,"This virtual table identifies cities that have a higher average temperature in March compared to December, while excluding those cities that have hosted a match. The placeholders in the query represent the necessary identifiers for the cities and their temperature data."
train.6295,city_record,Which cities have higher temperature in Feb than in Jun or have once served as host cities?,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city,"['hosting_city', 'city', 'temperature']",3,3+,0.1985882352941176,False,False,True,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city,"This virtual table provides a list of cities based on specific temperature conditions and hosting events. It retrieves cities where the average temperature in February is greater than that in June, and also includes cities that have hosted matches. The placeholders in the query represent the necessary identifiers for the cities and their temperature data."
train.6324,e_government,Find the last name of the first ever contact person of the organization with the highest UK Vat number.,SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1,"['organizations', 'organization_contact_individuals', 'individuals']",3,3+,0.1985882352941176,False,False,True,SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides the last names of individuals who have contacted the organization with the highest VAT registration number. The results are ordered by the end date of the contact period, and a placeholder is included to limit the number of results returned."
train.6328,e_government,Find name of the services that has never been used.,SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id,"['services', 'party_services']",2,2,0.1425882352941176,False,True,False,SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id,"This virtual table lists the names of services from the 'Services' table that are not booked by any party in the 'Party_Services' table. The query uses an EXCEPT clause to exclude service names that are present in the 'Party_Services' table, ensuring only unbooked services are displayed."
train.6330,e_government,Find the name of all the cities and states.,SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses,['addresses'],1,1,0.1807058823529412,True,False,False,SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses,"This virtual table provides a combined list of town/city names and state/province/county names from the 'Addresses' table. The use of UNION allows for the retrieval of unique entries from both columns, ensuring that any duplicates are removed."
train.6331,e_government,What are the names of all cities and states?,SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses,['addresses'],1,1,0.1807058823529412,True,False,False,SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses,"This virtual table provides a combined list of town or city names and state, province, or county names from the 'Addresses' table. The use of UNION allows for the retrieval of unique entries from both columns, ensuring that the results do not contain duplicates."
train.6346,e_government,Find the last name of the individuals that have been contact individuals of an organization.,SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id,"['organization_contact_individuals', 'individuals']",2,2,0.1119999999999999,False,True,False,SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id,"This virtual table provides a list of unique last names of individuals who have contacted organizations. It combines data from the 'Individuals' table and the 'Organization_Contact_Individuals' table, ensuring that only distinct last names are returned."
train.6723,activity_1,"Show the first name, last name, and phone number for all female faculty members.","SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'",['faculty'],1,1,0.2065882352941176,True,False,False,"SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  [PLACEHOLDER-TYPE:STRING]","This virtual table describes the first names, last names, and contact phone numbers of faculty members from the 'Faculty' table who belong to a specific gender. The placeholder in the WHERE clause represents the gender of the faculty members."
train.6725,activity_1,Show ids for all the male faculty.,SELECT FacID FROM Faculty WHERE Sex  =  'M',['faculty'],1,1,0.1425882352941176,True,False,False,SELECT FacID FROM Faculty WHERE Sex  =  [PLACEHOLDER-TYPE:STRING],This virtual table describes the unique identifiers of faculty members from the 'Faculty' table who belong to a specific gender. The placeholder in the WHERE clause represents the gender of the faculty members.
train.6738,activity_1,Find the building that has the largest number of faculty members.,SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1,['faculty'],1,1,0.1679999999999999,True,False,False,SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of buildings where faculty members have their offices, grouped by building name. The results are ordered by the number of faculty members in each building in descending order, with a limit on the number of buildings returned as specified by the placeholder."
train.6740,activity_1,In which buildings are there at least ten professors?,SELECT building FROM Faculty WHERE rank  =  'Professor' GROUP BY building HAVING count(*)  >=  10,['faculty'],1,1,0.2508684900711876,True,False,False,SELECT building FROM Faculty WHERE rank  =  [PLACEHOLDER-TYPE:STRING] GROUP BY building HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of buildings where faculty members of a specific academic rank are located. The query groups the results by building and filters to include only those buildings that have a certain number of faculty members, as indicated by the placeholders."
train.6747,activity_1,Show the number of male and female assistant professors.,"SELECT sex ,  count(*) FROM Faculty WHERE rank  =  'AsstProf' GROUP BY sex",['faculty'],1,1,0.2367058823529411,True,False,False,"SELECT sex ,  count(*) FROM Faculty WHERE rank  =  [PLACEHOLDER-TYPE:STRING] GROUP BY sex","This virtual table summarizes the count of faculty members by gender from the 'Faculty' table, filtered by a specific academic rank. The placeholder in the WHERE clause represents the rank of the faculty members."
train.6750,activity_1,Who is the advisor of Linda Smith? Give me the first name and last name.,"SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  'Linda' AND T2.lname  =  'Smith'","['faculty', 'student']",2,2,0.2016289592760181,False,True,False,"SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  [PLACEHOLDER-TYPE:STRING] AND T2.lname  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first names and last names of faculty members who are academic advisors to a specific student. The placeholders in the WHERE clause represent the first and last names of the student.
train.6751,activity_1,Show the ids of students whose advisors are professors.,SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  'Professor',"['faculty', 'student']",2,2,0.1425882352941176,False,True,False,SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies the unique identifiers of students who are advised by faculty members of a specific academic rank. The placeholder in the WHERE clause represents the rank of the faculty member.
train.6753,activity_1,Show first name and last name for all the students advised by Michael Goodrich.,"SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  'Michael' AND T1.lname  =  'Goodrich'","['faculty', 'student']",2,2,0.2016289592760181,False,True,False,"SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  [PLACEHOLDER-TYPE:STRING] AND T1.lname  =  [PLACEHOLDER-TYPE:STRING]",This virtual table describes the first and last names of students who are advised by a specific faculty member. The placeholders in the WHERE clause represent the first and last names of the faculty member.
train.6759,activity_1,What are the first and last name of the faculty who has the most students?,"SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1","['faculty', 'student']",2,2,0.2061176470588234,False,True,False,"SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the first and last names of faculty members who serve as advisors to students. The results are grouped by faculty ID and ordered by the number of students they advise, with a limit on the number of faculty members returned based on a specified number."
train.6765,activity_1,What activities do we have?,SELECT activity_name FROM Activity,['activity'],1,1,0.0865882352941176,True,False,False,SELECT activity_name FROM Activity,This virtual table describes the names of activities from the 'Activity' table. The query retrieves all activity names without any filtering conditions.
train.6766,activity_1,List all the activities we have.,SELECT activity_name FROM Activity,['activity'],1,1,0.0865882352941176,True,False,False,SELECT activity_name FROM Activity,This virtual table describes the names of activities from the 'Activity' table. The query retrieves all activity names without any filtering conditions.
train.6780,activity_1,"What is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in.","SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID","['faculty', 'faculty_participates_in']",2,2,0.2245192697768762,False,True,False,"SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID","This virtual table summarizes the first names and last names of faculty members along with the count of activities they participate in. The data is retrieved from the 'Faculty' table and the 'Faculty_Participates_in' table, grouped by each faculty member's unique identifier. The placeholders represent the faculty member's first name, last name, and the count of their participation in activities."
train.6781,activity_1,Show all the activity names and the number of faculty involved in each activity.,"SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID","['activity', 'faculty_participates_in']",2,2,0.1807058823529412,False,True,False,"SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID","This virtual table summarizes the number of faculty members participating in each activity from the 'Activity' table. The placeholder in the SELECT statement represents the activity name, and the count reflects the total number of faculty involved in each activity."
train.6782,activity_1,How many faculty members participate in each activity? Return the activity names and the number of faculty members.,"SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID","['activity', 'faculty_participates_in']",2,2,0.1807058823529412,False,True,False,"SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID","This virtual table summarizes the number of faculty members participating in each activity from the 'Activity' table. The placeholder in the SELECT statement represents the activity name, and the count function aggregates the number of faculty members for each activity."
train.6789,activity_1,Show the ids for all the students who participate in an activity and are under 20.,SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20,"['student', 'participates_in']",2,2,0.1985882352941176,False,True,False,SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  [PLACEHOLDER-TYPE:NUMBER],This virtual table identifies students who participate in activities and are younger than a specified age. The placeholder in the WHERE clause represents the age limit for filtering the students.
train.6795,activity_1,Find the first names of the faculty members who are playing Canoeing or Kayaking.,SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking',"['activity', 'faculty', 'faculty_participates_in']",3,3+,0.1889230769230769,False,False,True,SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  [PLACEHOLDER-TYPE:STRING] OR T3.activity_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a list of distinct last names of faculty members who participate in specific activities. The activities are filtered based on their names, which are represented by placeholders in the WHERE clause."
train.6796,activity_1,Which faculty members are playing either Canoeing or Kayaking? Tell me their first names.,SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking',"['activity', 'faculty', 'faculty_participates_in']",3,3+,0.1889230769230769,False,False,True,SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  [PLACEHOLDER-TYPE:STRING] OR T3.activity_name  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a list of distinct last names of faculty members who participate in specific activities. The query joins the 'Faculty' table with the 'Faculty_Participates_in' table to link faculty members to their activities, and then further joins with the 'Activity' table to filter based on the names of the activities. The placeholders in the WHERE clause represent the names of the activities of interest."
train.6798,activity_1,What are the first names of the professors who do not play Canoeing or Kayaking as activities?,SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking',"['activity', 'faculty', 'faculty_participates_in']",3,3+,0.2621176470588234,False,False,True,SELECT lname FROM faculty WHERE rank  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  [PLACEHOLDER-TYPE:STRING] OR T3.activity_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table lists the last names of faculty members who hold a specific academic rank but do not participate in certain activities. The placeholders in the query represent the rank of the faculty and the names of the activities they do not participate in.
train.6801,activity_1,Find the ids of the students who participate in Canoeing and Kayaking.,SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking',"['activity', 'participates_in']",2,2,0.2195113122171945,False,True,False,SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table identifies students who participate in two specific activities from the 'Activity' table. The placeholders in the WHERE clauses represent the names of the activities being queried.
dev.95,car_1,Which model of the car has the minimum horsepower?,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;,"['car_names', 'cars_data']",2,2,0.1119999999999999,False,True,False,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table lists the car models from the 'car_names' table, ordered by their horsepower in ascending order. The placeholder in the LIMIT clause represents the maximum number of car models to be displayed."
dev.97,car_1,Find the model of the car whose weight is below the average weight.,SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA),"['car_names', 'cars_data']",2,2,0.1731764705882353,False,True,False,SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA),"The virtual table describes the car models from the 'car_names' table that have a weight less than the average weight of all cars in the 'cars_data' table. The query uses a subquery to calculate the average weight, ensuring that only lighter models are selected."
dev.111,car_1,What is the accelerate of the car make amc hornet sportabout (sw)?,SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';,"['cars_data', 'car_names']",2,2,0.1425882352941176,False,True,False,SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  [PLACEHOLDER-TYPE:STRING];,"The virtual table describes the acceleration times of cars from the 'cars_data' table, filtered by a specific car make from the 'car_names' table. The placeholder in the WHERE clause represents the name of the car make."
dev.112,car_1,How much does the car accelerate that makes amc hornet sportabout (sw)?,SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';,"['cars_data', 'car_names']",2,2,0.1425882352941176,False,True,False,SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  [PLACEHOLDER-TYPE:STRING];,"This virtual table provides the acceleration times of cars from the 'cars_data' table, specifically focusing on the time taken to accelerate from 0 to 60 mph. The data is filtered based on the car make, which is specified by a placeholder in the WHERE clause."
dev.113,car_1,How many car makers are there in france?,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';,"['car_makers', 'countries']",2,2,0.1425882352941176,False,True,False,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  [PLACEHOLDER-TYPE:STRING];,"This virtual table provides the count of car makers based in a specific country. It joins the 'car_makers' table with the 'countries' table using the country identifier, and filters the results based on the specified country name."
dev.121,car_1,What are all the makers and models?,"SELECT Maker ,  Model FROM MODEL_LIST;",['model_list'],1,1,0.1247058823529411,True,False,False,"SELECT Maker ,  Model FROM MODEL_LIST;",The virtual table describes the relationship between car makers and their respective car models from the 'model_list' table. The placeholders represent the identifiers for the car makers and models.
dev.129,car_1,Which countries in europe have at least 3 car manufacturers?,SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;,"['continents', 'car_makers', 'countries']",3,3+,0.2508684900711876,False,False,True,SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.CountryName HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER];,This virtual table lists the names of countries from the 'countries' table that belong to a specific continent. It joins the 'continents' table to filter countries by continent and the 'car_makers' table to ensure that the countries have associated car makers. The placeholders in the WHERE clause represent the continent's name and the minimum count of car makers per country.
dev.130,car_1,What are the names of all European countries with at least 3 manufacturers?,SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;,"['continents', 'car_makers', 'countries']",3,3+,0.2508684900711876,False,False,True,SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.CountryName HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER];,This virtual table lists the names of countries from the 'countries' table that belong to a specific continent. It joins the 'continents' table to filter countries by continent and the 'car_makers' table to ensure that the countries have associated car makers. The placeholders in the WHERE clause represent the continent's name and the minimum count of car makers per country.
dev.131,car_1,What is the maximum horsepower and the make of the car models with 3 cylinders?,"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;","['car_names', 'cars_data']",2,2,0.2061176470588234,False,True,False,"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T2.horsepower DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of car makes along with their horsepower from the 'car_names' and 'cars_data' tables. The results are filtered to include only those cars with a specific number of cylinders, represented by a placeholder for numeric values. The output is ordered by horsepower in descending order, and the number of results returned is limited by another numeric placeholder."
dev.141,car_1,Which model has the most version(make) of cars?,SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;,['car_names'],1,1,0.1679999999999999,True,False,False,SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"The virtual table describes the car models from the 'car_names' table, grouped by model name. It orders the results by the count of occurrences of each model in descending order and limits the output to a specified number of top models. The placeholder in the LIMIT clause represents the maximum number of models to return."
dev.142,car_1,What model has the most different versions?,SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;,['car_names'],1,1,0.1679999999999999,True,False,False,SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"The virtual table describes the car models from the 'car_names' table, grouped by model name. It orders the results by the count of occurrences of each model in descending order and limits the output to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of models to return."
dev.150,car_1,What are the names and ids of all makers with more than 3 models?,"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;","['car_makers', 'model_list']",2,2,0.2576289592760181,False,True,False,"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER];","This virtual table provides a list of car makers along with their unique identifiers from the 'car_makers' table. It filters the results to include only those car makers that have produced more than a specified number of car models, as indicated by the placeholder in the HAVING clause."
dev.161,car_1,How many countries has more than 2 car makers ?,select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2,"['car_makers', 'countries']",2,2,0.2195113122171945,False,True,False,select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  [PLACEHOLDER-TYPE:NUMBER],This virtual table provides a count of car makers grouped by their respective countries from the 'countries' and 'car_makers' tables. The placeholder in the HAVING clause represents the minimum number of car makers that must be associated with a country for it to be included in the results.
dev.165,car_1,"For the cars with 4 cylinders, which model has the largest horsepower?",SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;,"['car_names', 'cars_data']",2,2,0.1679999999999999,False,True,False,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T2.horsepower DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];,"This virtual table lists the car models from the 'car_names' table that have a specific number of cylinders. The results are ordered by the horsepower of the cars in descending order, and the number of results returned is limited by a placeholder value."
dev.171,car_1,Which models are lighter than 3500 but not built by the 'Ford Motor Company'?,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';,"['car_makers', 'model_list', 'car_names', 'cars_data']",4,3+,0.2061176470588234,False,False,True,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  [PLACEHOLDER-TYPE:NUMBER] AND T4.FullName != [PLACEHOLDER-TYPE:STRING];,"This virtual table provides a list of distinct car models from the 'model_list' table that meet specific criteria. It filters the results based on the weight of the cars from the 'cars_data' table, ensuring that only cars lighter than a specified weight are included. Additionally, it excludes car makers based on their full name from the 'car_makers' table, allowing users to focus on models from specific manufacturers. The placeholders in the WHERE clause represent the maximum weight and the name of the car maker to exclude."
dev.175,car_1,Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .,"select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;","['car_makers', 'car_names', 'model_list']",3,3+,0.3449861371300111,False,False,True,"select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  [PLACEHOLDER-TYPE:NUMBER];",This virtual table identifies car makers who have produced a significant number of car models and have those models associated with specific car names. The placeholders in the HAVING clauses represent the minimum counts of models and names that must be met for the car makers to be included in the results.
dev.176,car_1,What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?,"SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;","['car_makers', 'car_names', 'model_list']",3,3+,0.3449861371300111,False,False,True,"SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER];","This virtual table identifies car makers who have produced a significant number of car models, as well as those who have a specific number of car names associated with their models. The placeholders in the HAVING clauses represent the minimum counts of models and names, respectively."
dev.526,student_transcripts_tracking,What are the names and ids of every course with less than 2 sections?,"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2","['courses', 'sections']",2,2,0.2576289592760181,False,True,False,"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of course names and their corresponding identifiers from the 'Courses' table, specifically for those courses that have a number of sections less than or equal to a specified threshold. The placeholder in the HAVING clause represents the maximum number of sections allowed for the courses listed."
dev.534,student_transcripts_tracking,"What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?","SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2","['student_enrolment', 'students']",2,2,0.3014423466999532,False,True,False,"SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the first name, middle name, last name, and student ID of students from the 'Students' table who are enrolled in a specific number of courses. The placeholder in the HAVING clause represents the count of courses the students are enrolled in."
dev.535,student_transcripts_tracking,"Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.","SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'","['student_enrolment', 'degree_programs', 'students']",3,3+,0.2319999999999999,False,False,True,"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  [PLACEHOLDER-TYPE:STRING]","This virtual table provides a list of distinct first, middle, and last names of students who are enrolled in a specific degree program. The placeholder in the WHERE clause represents the name of the degree program."
dev.539,student_transcripts_tracking,Find the program which most number of students are enrolled in. List both the id and the summary.,"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1","['student_enrolment', 'degree_programs']",2,2,0.2061176470588234,False,True,False,"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of degree programs along with their unique identifiers from the 'Degree_Programs' table. It joins with the 'Student_Enrolment' table to count how many students are enrolled in each degree program. The results are grouped by the degree program ID and ordered by the number of students enrolled in descending order, with a limit on the number of results returned based on a specified number."
dev.541,student_transcripts_tracking,"Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.","SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","['student_enrolment', 'students']",2,2,0.2626849315068493,False,True,False,"SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of students along with their first, middle, and last names, and the count of courses they are enrolled in. The results are grouped by each student's unique identifier and ordered by the number of courses in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of students to return."
dev.547,student_transcripts_tracking,What's the name of the course with most number of enrollments?,SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1,"['courses', 'student_enrolment_courses']",2,2,0.1679999999999999,False,True,False,SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of course names from the 'Courses' table that are associated with student enrolments. The results are grouped by course name and ordered by the number of enrolments in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of course names to return."
dev.548,student_transcripts_tracking,What is the name of the course with the most students enrolled?,SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1,"['courses', 'student_enrolment_courses']",2,2,0.1679999999999999,False,True,False,SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER],"This virtual table provides a list of course names from the 'Courses' table that are associated with student enrolments. The results are grouped by course name and ordered by the number of enrolments in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of course names to return."
dev.550,student_transcripts_tracking,What are the last name of the students who live in North Carolina but have not registered in any degree programs?,SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id,"['addresses', 'student_enrolment', 'students']",3,3+,0.2239999999999999,False,False,True,SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id,"This virtual table lists the last names of students who currently reside in a specific state, excluding those who are enrolled in any degree program. The query joins the 'Students' table with the 'Addresses' table to filter by the current address's state, and uses an EXCEPT clause to remove students who are found in the 'Student_Enrolment' table."
dev.554,student_transcripts_tracking,What is the mobile phone number of the student named Timmothy Ward ?,select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward',['students'],1,1,0.1807058823529412,True,False,False,select cell_mobile_number from students where first_name  =  [PLACEHOLDER-TYPE:STRING] and last_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the mobile phone numbers of students from the 'Students' table based on their first and last names. The placeholders in the WHERE clause represent the student's first and last names.
dev.561,student_transcripts_tracking,Which address holds the most number of students currently? List the address id and all lines.,"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1","['addresses', 'students']",2,2,0.2319999999999999,False,True,False,"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of unique addresses that are currently associated with students, including the address ID and primary and secondary address lines. The results are grouped by address ID and ordered by the number of students linked to each address, with a limit on the number of addresses returned based on a specified numeric value."
dev.578,student_transcripts_tracking,What are the different addresses that have students living there?,SELECT count(DISTINCT current_address_id) FROM Students,['students'],1,1,0.1119999999999999,True,False,False,SELECT count(DISTINCT current_address_id) FROM Students,This virtual table provides the count of distinct current addresses associated with students from the 'Students' table. The placeholder in the SELECT clause represents the unique current address identifiers.
dev.581,student_transcripts_tracking,Describe the section h.,SELECT section_description FROM Sections WHERE section_name  =  'h',['sections'],1,1,0.1425882352941176,True,False,False,SELECT section_description FROM Sections WHERE section_name  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the description of a specific section from the 'Sections' table based on the section's name. The placeholder in the WHERE clause represents the name of the section being queried.
dev.705,world_1,How many countries have governments that are republics?,SELECT count(*) FROM country WHERE GovernmentForm  =  'Republic',['country'],1,1,0.1425882352941176,True,False,False,SELECT count(*) FROM country WHERE GovernmentForm  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of countries from the 'country' table that have a specific form of government. The placeholder in the WHERE clause represents the type of government being queried.
dev.723,world_1,"How many people live in Asia, and what is the largest GNP among them?","SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  'Asia'",['country'],1,1,0.1807058823529412,True,False,False,"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  [PLACEHOLDER-TYPE:STRING]",This virtual table summarizes the total population and the maximum Gross National Product (GNP) of countries located in a specific continent. The placeholder in the WHERE clause represents the continent's name.
dev.724,world_1,What is the average life expectancy in African countries that are republics?,SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  'Africa' AND GovernmentForm  =  'Republic',['country'],1,1,0.1635113122171945,True,False,False,SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  [PLACEHOLDER-TYPE:STRING] AND GovernmentForm  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average life expectancy of countries from the 'country' table that are located in a specific continent and have a particular form of government. The placeholders in the WHERE clause represent the continent and the government form.
dev.725,world_1,Give the average life expectancy for countries in Africa which are republics?,SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  'Africa' AND GovernmentForm  =  'Republic',['country'],1,1,0.1635113122171945,True,False,False,SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  [PLACEHOLDER-TYPE:STRING] AND GovernmentForm  =  [PLACEHOLDER-TYPE:STRING],This virtual table calculates the average life expectancy of countries from the 'country' table that belong to a specific continent and have a particular form of government. The placeholders in the WHERE clause represent the continent and government form criteria.
dev.731,world_1,Give the mean GNP and total population of nations which are considered US territory.,"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  'US Territory'",['country'],1,1,0.1807058823529412,True,False,False,"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  [PLACEHOLDER-TYPE:STRING]",This virtual table calculates the average Gross National Product (GNP) and the total population of countries from the 'country' table that have a specific form of government. The placeholder in the WHERE clause represents the type of government being queried.
dev.735,world_1,How many different forms of governments are there in Africa?,SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  'Africa',['country'],1,1,0.1679999999999999,True,False,False,SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the count of distinct government forms present in countries located within a specific continent. The placeholder in the WHERE clause represents the continent's name.
dev.754,world_1,What are the countries where either English or Dutch is the official language ?,select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  'english' and isofficial  =  't' union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  'dutch' and isofficial  =  't',"['country', 'countrylanguage']",2,2,0.2508684900711876,False,True,False,select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  [PLACEHOLDER-TYPE:STRING] and isofficial  =  [PLACEHOLDER-TYPE:STRING] union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  [PLACEHOLDER-TYPE:STRING] and isofficial  =  [PLACEHOLDER-TYPE:STRING],This virtual table provides the names of countries where a specific language is spoken as an official language. The placeholders in the query represent the language name and the official status of the language.
dev.755,world_1,Which countries have either English or Dutch as an official language?,SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND IsOfficial  =  'T' UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Dutch' AND IsOfficial  =  'T',"['country', 'countrylanguage']",2,2,0.1807058823529412,False,True,False,SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  [PLACEHOLDER-TYPE:STRING] AND IsOfficial  =  [PLACEHOLDER-TYPE:STRING] UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  [PLACEHOLDER-TYPE:STRING] AND IsOfficial  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a comprehensive view of countries and their languages by joining the 'country' and 'countrylanguage' tables. It filters the results to show only those countries where a specific language is spoken, and whether that language is official or not. The placeholders in the WHERE clause represent the language name and its official status."
dev.758,world_1,Which languages are spoken by only one country in republic governments?,SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  'Republic' GROUP BY T2.Language HAVING COUNT(*)  =  1,"['country', 'countrylanguage']",2,2,0.2367058823529411,False,True,False,SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T2.Language HAVING COUNT(*)  =  [PLACEHOLDER-TYPE:NUMBER],"This virtual table describes the languages spoken in countries that have a specific form of government. The query retrieves the languages from the 'countrylanguage' table by joining it with the 'country' table based on the country code. The placeholder in the WHERE clause represents the type of government, and the placeholder in the HAVING clause indicates the required count of countries that speak each language."
dev.759,world_1,What languages are only used by a single country with a republic government?,SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  'Republic' GROUP BY T2.Language HAVING COUNT(*)  =  1,"['country', 'countrylanguage']",2,2,0.2367058823529411,False,True,False,SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T2.Language HAVING COUNT(*)  =  [PLACEHOLDER-TYPE:NUMBER],"This virtual table describes the languages spoken in countries that have a specific form of government. The query retrieves the languages from the 'countrylanguage' table by joining it with the 'country' table based on the country code. It filters the results to include only those countries with a specified government form and groups the results by language, ensuring that only languages spoken in a certain number of countries are included. The placeholders in the WHERE and HAVING clauses represent the government form and the count of countries, respectively."
dev.760,world_1,Find the city with the largest population that uses English.,"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  'English' ORDER BY T1.Population DESC LIMIT 1","['city', 'countrylanguage']",2,2,0.2061176470588234,False,True,False,"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides the names and populations of cities from the 'city' table that have a specific language spoken, as indicated in the 'countrylanguage' table. The placeholder in the WHERE clause represents the language of interest, while the LIMIT placeholder allows for specifying the maximum number of results to return, sorted by population in descending order."
dev.766,world_1,What is the total number of people living in the nations that do not use English?,SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English'),"['country', 'countrylanguage']",2,2,0.2112941176470588,False,True,False,SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  [PLACEHOLDER-TYPE:STRING]),This virtual table calculates the total population of countries that do not have a specific language as an official language. The placeholder in the subquery represents the language name that is being checked against the countries.
dev.774,world_1,What are the African countries that have a  population less than any country in Asia?,SELECT Name FROM country WHERE Continent  =  'Africa'  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  'Asia'),['country'],1,1,0.2112941176470588,True,False,False,SELECT Name FROM country WHERE Continent  =  [PLACEHOLDER-TYPE:STRING]  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists the names of countries from the 'country' table that are located in a specific continent and have a population less than the maximum population of any country within the same continent. The placeholders in the WHERE clause represent the continent's name.
dev.777,world_1,What are the Asian countries which have a population larger than that of any country in Africa?,SELECT Name FROM country WHERE Continent  =  'Asia'  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  'Africa'),['country'],1,1,0.2112941176470588,True,False,False,SELECT Name FROM country WHERE Continent  =  [PLACEHOLDER-TYPE:STRING]  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  [PLACEHOLDER-TYPE:STRING]),This virtual table lists the names of countries from the 'country' table that are located in a specific continent and have a population greater than the minimum population of countries within the same continent. The placeholders in the WHERE clause represent the continent's name.
dev.778,world_1,What are the country codes for countries that do not speak English?,SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  'English',['countrylanguage'],1,1,0.1985882352941176,True,False,False,SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  [PLACEHOLDER-TYPE:STRING],"This virtual table identifies the country codes of countries where a specific language is spoken, excluding those countries where that language is the official language. The placeholder in the WHERE clause represents the name of the language being queried."
dev.786,world_1,Which unique cities are in Asian countries where Chinese is the official language ?,select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  'asia',"['country', 'city', 'countrylanguage']",3,3+,0.22028025477707,False,False,True,select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  [PLACEHOLDER-TYPE:STRING] and t2.language  =  [PLACEHOLDER-TYPE:STRING] and t1.continent  =  [PLACEHOLDER-TYPE:STRING],"This virtual table provides a list of distinct city names from the 'city' table that are located in countries where a specific language is spoken officially. The query filters based on whether the language is official, the name of the language, and the continent the country belongs to, using placeholders for these criteria."
dev.789,world_1,"Give the name, year of independence, and surface area of the country that has the lowest population.","SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",['country'],1,1,0.176,True,False,False,"SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of countries, displaying their names, surface areas, and the year they gained independence. The results are ordered by the population of the countries, and the number of entries returned is limited by a specified placeholder for numeric values."
dev.793,world_1,"What are the names of countries that speak more than 2 languages, as well as how many languages they speak?","SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2","['country', 'countrylanguage']",2,2,0.2576289592760181,False,True,False,"SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a count of languages spoken in each country from the 'country' table, along with the country's name. The query filters the results to only include countries where the number of languages spoken exceeds a specified threshold, represented by a placeholder for numeric values."
dev.797,world_1,What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?,"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",['country'],1,1,0.2576289592760181,True,False,False,"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  [PLACEHOLDER-TYPE:NUMBER]","This virtual table summarizes the total population of countries grouped by their government form, filtering for those government forms where the average life expectancy exceeds a specified threshold. The placeholder in the HAVING clause represents the minimum average life expectancy value."
dev.812,world_1,What are the cities whose population is between 160000 and 900000?,SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000,['city'],1,1,0.1425882352941176,True,False,False,SELECT name FROM city WHERE Population BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER],This virtual table describes the names of cities from the 'city' table that have a population within a specified range. The placeholders in the WHERE clause represent the lower and upper limits of the population range.
dev.820,world_1,What are the codes of countries where Spanish is spoken by the largest percentage of people?,"SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'Spanish' GROUP BY CountryCode",['countrylanguage'],1,1,0.2367058823529411,True,False,False,"SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  [PLACEHOLDER-TYPE:STRING] GROUP BY CountryCode",This virtual table provides the country codes and the maximum percentage of speakers for a specific language from the 'countrylanguage' table. The placeholder in the WHERE clause represents the language name that the user wants to query.
dev.821,world_1,Return the codes of countries for which Spanish is the predominantly spoken language.,"SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'Spanish' GROUP BY CountryCode",['countrylanguage'],1,1,0.2367058823529411,True,False,False,"SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  [PLACEHOLDER-TYPE:STRING] GROUP BY CountryCode",This virtual table provides the country codes and the maximum percentage of speakers for a specific language from the 'countrylanguage' table. The placeholder in the WHERE clause represents the language name being queried.
dev.920,dog_kennels,What is the average age of the dogs who have gone through any treatments?,SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments ),"['dogs', 'treatments']",2,2,0.1731764705882353,False,True,False,SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments ),This virtual table calculates the average age of dogs that have received treatments. The placeholder in the WHERE clause allows for filtering based on specific dog identifiers that have treatment records.
dev.936,dog_kennels,Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.,"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","['owners', 'dogs', 'treatments']",3,3+,0.2061176470588234,False,False,True,"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]","This virtual table provides a list of owners along with their last names who have had dogs treated, sorted by the number of treatments in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of owners to display."
dev.942,dog_kennels,Which professionals have done at least two types of treatments? List the professional id and cell phone.,"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2","['professionals', 'treatments']",2,2,0.2576289592760181,False,True,False,"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]",This virtual table provides a list of professionals along with their cell numbers who have administered a minimum number of treatments. The placeholder in the HAVING clause represents the minimum count of treatments that a professional must have administered to be included in the results.
dev.944,dog_kennels,What are the first name and last name of the professionals who have done treatment with cost below average?,"SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )","['professionals', 'treatments']",2,2,0.2367058823529411,False,True,False,"SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )","This virtual table provides a list of unique first and last names of professionals who have administered treatments that cost less than the average cost of treatments recorded in the database. The query joins the 'Professionals' table with the 'Treatments' table to filter based on treatment costs, using a subquery to calculate the average treatment cost."
dev.950,dog_kennels,"List each owner's first name, last name, and the size of his for her dog.","SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","['owners', 'dogs']",2,2,0.1505882352941176,False,True,False,"SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","This virtual table provides the first and last names of dog owners along with the size code of their dogs. It combines data from the 'Owners' and 'Dogs' tables, linking them through the owner_id. The placeholders in the SELECT statement allow for dynamic querying of owner names and their corresponding dog's size category."
dev.951,dog_kennels,"What are each owner's first name, last name, and the size of their dog?","SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","['owners', 'dogs']",2,2,0.1505882352941176,False,True,False,"SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","This virtual table provides the first and last names of dog owners along with the size code of their dogs. It combines data from the 'Owners' table and the 'Dogs' table, linking them through the owner_id. The placeholders represent the specific values that can be modified to filter or retrieve specific information about owners and their dogs."
dev.958,dog_kennels,What are the arriving date and the departing date of the dogs who have gone through a treatment?,"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id","['dogs', 'treatments']",2,2,0.1501176470588235,False,True,False,"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id","This virtual table provides a list of unique arrival and departure dates for dogs from the 'Dogs' table, along with their associated treatments from the 'Treatments' table. The placeholders in the JOIN clause represent the relationships between the dogs and their treatments."
dev.961,dog_kennels,Who owns the youngest dog? Give me his or her last name.,SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs ),"['owners', 'dogs']",2,2,0.1731764705882353,False,True,False,SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs ),"This virtual table provides the last names of owners who own the oldest dog in the database. It joins the 'Owners' table with the 'Dogs' table based on the owner ID and filters the results to find the maximum age of dogs, using a subquery to determine which dog is the oldest."
dev.997,dog_kennels,Find the distinct breed type and size type combinations for dogs.,"SELECT DISTINCT breed_code ,  size_code FROM dogs",['dogs'],1,1,0.1501176470588235,True,False,False,"SELECT DISTINCT breed_code ,  size_code FROM dogs",This virtual table provides a unique list of breed codes and size codes from the 'Dogs' table. The placeholders represent the breed and size categories associated with the dogs.
dev.999,dog_kennels,What are each professional's first name and description of the treatment they have performed?,"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code","['professionals', 'treatments', 'treatment_types']",3,3+,0.1501176470588235,False,False,True,"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",This virtual table provides a list of unique first names of professionals along with the descriptions of the treatment types they have administered. The placeholders in the query allow for filtering or further specification of the professionals or treatment types if needed.
